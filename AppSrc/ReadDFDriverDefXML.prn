Compiling Program: C:\Projects\DF20\DbUpdateFramework\AppSrc\ReadDFDriverDefXML.src
Memory Available: 2147483646
1>    CompilerLevelWarning All On
1>Use cApplication.pkg
Including file: cApplication.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cApplication.pkg)
1>>>Use Windows.pkg
Using pre-compiled package WINDOWS.PKG
Including file: windows.pkd    (C:\Program Files\DataFlex 24.0\Pkg\windows.pkd)
8251>>>
8251>>>Use LanguageText.pkg
8251>>>Use WinUser.pkg
8251>>>Use WinShell.pkg
8251>>>Use cWorkspace.pkg
Including file: cWorkspace.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cWorkspace.pkg)
8251>>>>>Use VdfBase.pkg
8251>>>>>Use tWinStructs.pkg
8251>>>>>Use LanguageText.pkg
8251>>>>>Use WinShell.pkg // Shell API functions
8251>>>>>Use seq_chnl.pkg
Including file: seq_chnl.pkg    (C:\Program Files\DataFlex 24.0\Pkg\seq_chnl.pkg)
8251>>>>>>>Use LanguageText.pkg
8251>>>>>>>Use VDFBase.pkg
Including file: errornum.inc    (C:\Program Files\DataFlex 24.0\Pkg\errornum.inc)
8251>>>>>>>>
8251>>>>>>>>//
8251>>>>>>>>// these will get defined in fmac
8251>>>>>>>>//
8251>>>>>>>>// already defined
8251>>>>>>>>//    #REPLACE DFERR_COMP_BAD_IMAGE_NAME                 |CI4293
8251>>>>>>>>//    #REPLACE DFERR_COMP_CONSTANT_EXPECTED              |CI4299
8251>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_RETURN_TYPE            |CI4310
8251>>>>>>>>//    #REPLACE DFERR_COMP_IMAGE_NOT_FOUND                |CI4311
8251>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_DATATYPE               |CI4315
8251>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_TYPE                   |CI4317
8251>>>>>>>>//    #REPLACE DFERR_COMP_MISSING_ARGUMENT               |CI4320
8251>>>>>>>>//    #REPLACE DFERR_COMP_MISSING_END_OBJECT             |CI4323
8251>>>>>>>>//    #REPLACE DFERR_COMP_UNDEFINED_SYMBOL_IN_ARGUMENT   |CI4328
8251>>>>>>>>//    #REPLACE DFERR_COMP_SYMBOL_ALREADY_DEFINED         |CI4332
8251>>>>>>>>//    #REPLACE DFERR_COMP_TOO_MANY_MESSAGES              |CI4339
8251>>>>>>>>//    #REPLACE DFERR_COMP_UNRESOVLED_CONTROL_BLOCK       |CI4348
8251>>>>>>>>// new compiler errors used by fmac
8251>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_OBJECT_DEFINTION       |CI4388 // object name used is not valid
8251>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_PROPERTY_DEFINTION     |CI4389 // property name cannot be used
8251>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_METHOD_DEFINTION       |CI4390 // method name cannot be used
8251>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_CODE_PLACEMENT         |CI4391 // Location of code, nesting, is wrong
8251>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_METHOD_SYNTAX          |CI4392 // syntax is incorrect for method definition
8251>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_MESSAGE_SYNTAX         |CI4393 // sysntax is incorrect for sending message
8251>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_OBJECT_REFERENCE       |CI4394 // object named in message is invalid
8251>>>>>>>>//    #REPLACE DFERR_COMP_OBSOLETE_UNSUPPORTED_FEATURE   |CI4395 // Obsolete - was 101 (Moveused by fmac)
8251>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_ARGUMENT               |CI4396 // Agument in line is incorrect
8251>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_EXTERNAL_FUNCTION_DEFINITION |CI4397 // name cannot be used
8251>>>>>>>>//    #REPLACE DFERR_COMP_MISSING_DEBUG_INFORMATION      |CI4500 // debug information is not provided
8251>>>>>>>>//    #REPLACE DFERR_COMP_INCOMPATIBLE_DEBUG_INFORMATION |CI4501 // debug inforamtion is is not correct
8251>>>>>>>>//    #REPLACE DFERR_COMP_RECURSIVE_STRUCT_DECLARATION   |CI4513 // recursive struct definition
8251>>>>>>>>//    #REPLACE DFERR_COMP_AMBIGUOUS_SYNTAX               |CI4514 // either Left of "'[' is not array, use '(' if indicator" or "Left of '.' is not of type struct or table"
8251>>>>>>>>
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_STRING_CMD       |CI4531 // pertaining to string commands
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_TYPE_CMD         |CI4532 // pertaining to type/end_type commands
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_CMD              |CI4533 // pertaining to a more generic obsolete command 
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_GLOBAL_FUNCTION  |CI4534 // Global function is obsolete
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_TECHNIQUE        |CI4535 // Using some older technique
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_PACKAGE          |CI4536 // Package is obsolete, remove it if you can
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_CLASS            |CI4537 // Class is obsolete, remove it if you can
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_INDICATOR_USE    |CI4538 // Using indicators anywhere
8251>>>>>>>>//    
8251>>>>>>>>//    #Replace DFERR_COMP_ILLEGAL_CONVERSION                            |CI4539 // Datatype conversion is illegal, would cause runtime-error
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_OBJECT_FUNCTION  |CI4540 // Global function is obsolete
8251>>>>>>>>//    #Replace DFERR_INVALID_LOCALE_CODE                    |CI4541 // Error thown by Set_Attribute DF_LOCALE_CODE on invalid value
8251>>>>>>>>//    #Replace DFERR_STRING_COMPARISON_ERROR                |CI4542 // Error during string comparison (ICU returned an error)
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_REDEFINING_RETURN_TYPE    |CI4543 // Warning when redefining a function with a different return type
8251>>>>>>>>//    #Replace DFERR_COMP_AMBIGUOUS_FUNCTION_EXPRESSION     |CI4544 // Error when using ambiguous function in expression
8251>>>>>>>>    
8251>>>>>>>>
8251>>>>>>>>
8251>>>>>>>
8251>>>>>>>Define DF_SEQ_CHANNEL_NOT_AVAILABLE for -2
8251>>>>>>>Define DF_SEQ_CHANNEL_ERROR         for -1
8251>>>>>>>Define DF_SEQ_CHANNEL_MIN           for 0
8251>>>>>>>Define DF_SEQ_CHANNEL_MAX           for 9
8251>>>>>>>Define DF_SEQ_START_CHANNEL         for 2 // leave 0 and 1 til last
8251>>>>>>>// so that programs that use direct_input/output
8251>>>>>>>// w/o specifying a channel will work.
8251>>>>>>>Enum_List
8251>>>>>>>    Define DF_SEQ_CHANNEL_MODE_CLOSED
8251>>>>>>>    Define DF_SEQ_CHANNEL_MODE_OPEN
8251>>>>>>>    Define DF_SEQ_CHANNEL_MODE_OUTPUT
8251>>>>>>>    Define DF_SEQ_CHANNEL_MODE_INPUT
8251>>>>>>>End_Enum_List
8251>>>>>>>
8251>>>>>>>Enum_List
8251>>>>>>>    Define DF_SEQ_CHANNEL_ERROR_MODE_NONE
8251>>>>>>>    Define DF_SEQ_CHANNEL_ERROR_MODE_ALL
8251>>>>>>>End_Enum_List
8251>>>>>>>
8251>>>>>>>Global_Variable Integer Seq$Channel$Error$Mode
8251>>>>>>>
8251>>>>>>>Procedure Set Seq_Channel_Error_Mode Global Integer iMode
8253>>>>>>>    Move iMode to Seq$Channel$Error$Mode
8254>>>>>>>End_Procedure
8255>>>>>>>
8255>>>>>>>Function Seq_Channel_Error_Mode Global Returns Integer
8257>>>>>>>    Function_Return Seq$Channel$Error$Mode
8258>>>>>>>End_Function
8259>>>>>>>
8259>>>>>>>Global_Variable Integer[DF_SEQ_CHANNEL_MAX] giSeqChannelList
8259>>>>>>>// initialize array
8259>>>>>>>For WindowIndex from 0 to (DF_SEQ_CHANNEL_MAX-1)
8265>>>>>>>>
8265>>>>>>>    Move 0 to giSeqChannelList[WindowIndex]
8266>>>>>>>Loop
8267>>>>>>>>
8267>>>>>>>
8267>>>>>>>Set Seq_Channel_Error_Mode to DF_SEQ_CHANNEL_ERROR_MODE_ALL
8268>>>>>>>
8268>>>>>>>Function Seq_Channel_Mode Global Integer iChannel Returns Integer
8270>>>>>>>    Function_Return giSeqChannelList[iChannel]
8271>>>>>>>End_Function
8272>>>>>>>
8272>>>>>>>Procedure Set Seq_Channel_Mode Global Integer iChannel Integer iMode
8274>>>>>>>    Move iMode to giSeqChannelList[iChannel]
8275>>>>>>>End_Procedure
8276>>>>>>>
8276>>>>>>>Function Seq_New_Channel Global Returns Integer
8278>>>>>>>    Integer iObject iChannel
8278>>>>>>>    
8278>>>>>>>    Move DF_SEQ_START_CHANNEL to iChannel
8279>>>>>>>    
8279>>>>>>>    While (iChannel < DF_SEQ_CHANNEL_MAX)
8283>>>>>>>        If (Seq_Channel_Mode(iChannel) = DF_SEQ_CHANNEL_MODE_CLOSED) Begin
8285>>>>>>>            Set Seq_Channel_Mode iChannel to DF_SEQ_CHANNEL_MODE_OPEN
8286>>>>>>>            Function_Return iChannel
8287>>>>>>>        End
8287>>>>>>>>
8287>>>>>>>        
8287>>>>>>>        Increment iChannel
8288>>>>>>>    Loop
8289>>>>>>>>
8289>>>>>>>    
8289>>>>>>>    // wrap back to beginning
8289>>>>>>>    Move 0 to iChannel
8290>>>>>>>    
8290>>>>>>>    While (iChannel < DF_SEQ_START_CHANNEL)
8294>>>>>>>        If (Seq_Channel_Mode(iChannel) = DF_SEQ_CHANNEL_MODE_CLOSED) Begin
8296>>>>>>>            Set Seq_Channel_Mode iChannel to DF_SEQ_CHANNEL_MODE_OPEN
8297>>>>>>>            Function_Return iChannel
8298>>>>>>>        End
8298>>>>>>>>
8298>>>>>>>        
8298>>>>>>>        Increment iChannel
8299>>>>>>>    Loop
8300>>>>>>>>
8300>>>>>>>    
8300>>>>>>>    Function_Return DF_SEQ_CHANNEL_NOT_AVAILABLE
8301>>>>>>>End_Function
8302>>>>>>>
8302>>>>>>>Procedure Seq_Release_Channel Global Integer iChannel
8304>>>>>>>    If ((iChannel >= DF_SEQ_CHANNEL_MIN) and (iChannel <= DF_SEQ_CHANNEL_MAX)) Begin
8306>>>>>>>        Set Seq_Channel_Mode iChannel to DF_SEQ_CHANNEL_MODE_CLOSED
8307>>>>>>>    End
8307>>>>>>>>
8307>>>>>>>End_Procedure
8308>>>>>>>
8308>>>>>>>Function Seq_Open_Input_Channel Global String sChannel Returns Integer
8310>>>>>>>    Integer iChannel
8310>>>>>>>    
8310>>>>>>>    Move (Seq_New_Channel()) to iChannel
8311>>>>>>>    
8311>>>>>>>    If (iChannel <= DF_SEQ_CHANNEL_ERROR) Begin
8313>>>>>>>        If (Seq_Channel_Error_Mode() = DF_SEQ_CHANNEL_ERROR_MODE_ALL) Begin
8315>>>>>>>            Error DFERR_CANT_OPEN_INPUT_FILE (sChannel + ":" *C_$NoOpenChannels)
8316>>>>>>>>
8316>>>>>>>        End
8316>>>>>>>>
8316>>>>>>>        Function_Return iChannel
8317>>>>>>>    End
8317>>>>>>>>
8317>>>>>>>    
8317>>>>>>>    Move False to Err
8318>>>>>>>    Direct_Input channel iChannel sChannel
8320>>>>>>>    
8320>>>>>>>    If (Err) Begin
8322>>>>>>>        Send Seq_Release_Channel iChannel
8323>>>>>>>        Function_Return DF_SEQ_CHANNEL_ERROR
8324>>>>>>>    End
8324>>>>>>>>
8324>>>>>>>    
8324>>>>>>>    Set Seq_Channel_Mode iChannel to DF_SEQ_CHANNEL_MODE_INPUT
8325>>>>>>>    
8325>>>>>>>    Function_Return iChannel
8326>>>>>>>End_Function
8327>>>>>>>
8327>>>>>>>Function Seq_Open_Output_Channel Global String sChannel Returns Integer
8329>>>>>>>    Integer iChannel
8329>>>>>>>    
8329>>>>>>>    Move (Seq_New_Channel()) to iChannel
8330>>>>>>>    
8330>>>>>>>    If (iChannel <= DF_SEQ_CHANNEL_ERROR) Begin
8332>>>>>>>        If (Seq_Channel_Error_Mode() = DF_SEQ_CHANNEL_ERROR_MODE_ALL) Begin
8334>>>>>>>            Error DFERR_CANT_OPEN_OUTPUT_FILE (sChannel + ":" *C_$ChannelNotAvailable)
8335>>>>>>>>
8335>>>>>>>            Move DF_SEQ_CHANNEL_ERROR to iChannel
8336>>>>>>>        End
8336>>>>>>>>
8336>>>>>>>        
8336>>>>>>>        Function_Return iChannel
8337>>>>>>>    End
8337>>>>>>>>
8337>>>>>>>    
8337>>>>>>>    Move False to Err
8338>>>>>>>    Direct_Output channel iChannel sChannel
8340>>>>>>>    
8340>>>>>>>    If (Err) Begin
8342>>>>>>>        Send Seq_Release_Channel iChannel
8343>>>>>>>        Function_Return DF_SEQ_CHANNEL_ERROR
8344>>>>>>>    End
8344>>>>>>>>
8344>>>>>>>    
8344>>>>>>>    Set Seq_Channel_Mode iChannel to DF_SEQ_CHANNEL_MODE_OUTPUT
8345>>>>>>>    
8345>>>>>>>    Function_Return iChannel
8346>>>>>>>End_Function
8347>>>>>>>
8347>>>>>>>Function Seq_Append_Output_Channel Global String sChannel Returns Integer
8349>>>>>>>    Integer iChannel
8349>>>>>>>    
8349>>>>>>>    Move (Seq_New_Channel()) to iChannel
8350>>>>>>>    
8350>>>>>>>    If (iChannel <= DF_SEQ_CHANNEL_ERROR) Begin
8352>>>>>>>        If (Seq_Channel_Error_Mode() = DF_SEQ_CHANNEL_ERROR_MODE_ALL) Begin
8354>>>>>>>            Error DFERR_CANT_OPEN_OUTPUT_FILE (sChannel + ":" *C_$ChannelNotAvailable)
8355>>>>>>>>
8355>>>>>>>            Move DF_SEQ_CHANNEL_ERROR to iChannel
8356>>>>>>>        End
8356>>>>>>>>
8356>>>>>>>        
8356>>>>>>>        Function_Return iChannel
8357>>>>>>>    End
8357>>>>>>>>
8357>>>>>>>    
8357>>>>>>>    Move False to Err
8358>>>>>>>    Append_Output channel iChannel sChannel
8360>>>>>>>    
8360>>>>>>>    If (Err) Begin
8362>>>>>>>        Send Seq_Release_Channel iChannel
8363>>>>>>>        Function_Return DF_SEQ_CHANNEL_ERROR
8364>>>>>>>    End
8364>>>>>>>>
8364>>>>>>>    
8364>>>>>>>    Set Seq_Channel_Mode iChannel to DF_SEQ_CHANNEL_MODE_OUTPUT
8365>>>>>>>    
8365>>>>>>>    Function_Return iChannel
8366>>>>>>>End_Function
8367>>>>>>>
8367>>>>>>>Procedure Seq_Close_Channel Global Integer iChannel
8369>>>>>>>    Integer iMode
8369>>>>>>>    
8369>>>>>>>    If ((iChannel >= DF_SEQ_CHANNEL_MIN) and (iChannel <= DF_SEQ_CHANNEL_MAX)) Begin
8371>>>>>>>        Move (Seq_Channel_Mode(iChannel)) to iMode
8372>>>>>>>        
8372>>>>>>>        If (iMode = DF_SEQ_CHANNEL_MODE_OUTPUT) Begin
8374>>>>>>>            Close_Output channel iChannel
8376>>>>>>>        End
8376>>>>>>>>
8376>>>>>>>        Else If (iMode = DF_SEQ_CHANNEL_MODE_INPUT) Begin
8379>>>>>>>            Close_Input channel iChannel
8381>>>>>>>        End
8381>>>>>>>>
8381>>>>>>>        // If channel not open, release it! No (fatal) Error.
8381>>>>>>>        Send Seq_Release_Channel iChannel
8382>>>>>>>    End
8382>>>>>>>>
8382>>>>>>>End_Procedure
8383>>>>>Use GlobalFunctionsProcedures.pkg
8383>>>>>
8383>>>>>Register_Function IsRegistered String sWorkspace Returns Boolean
8383>>>>>Register_Function VdfSystemDfPath   Returns String
8383>>>>>Register_Function VdfSystemMakePath Returns String
8383>>>>>
8383>>>>>Enum_List
8383>>>>>    Define wsWorkspaceOpened       // WS opened ok
8383>>>>>    Define wsWorkspaceNotFound     // the named WS was not found in the global list
8383>>>>>    Define wsWorkspaceFileNotFound // the WS file was not found
8383>>>>>    Define wsDataPathEmpty         // the DataPath entry was empty
8383>>>>>    Define wsFileListEmpty         // The FileList entry was empty
8383>>>>>    Define wsFileListNotExist      // The FileList.cfg file could not be found
8383>>>>>End_Enum_List
8383>>>>>
8383>>>>>
8383>>>>>Define INVALID_HANDLE_VALUE for -1
8383>>>>>Define MAX_PATH for 260   // Symbol for maximum length of a path
8383>>>>>
8383>>>>>
8383>>>>>// Wide version
8383>>>>>External_Function winFindFirstFileW "FindFirstFileW" Kernel32.dll ;    WString wFileSpec ;    Pointer lpsWin32FindData ;    Returns Handle
8384>>>>>
8384>>>>>// Wrapper Function winFindFirstFile
8384>>>>>Function winFindFirstFile Global ;    String  sFileSpec ;    Pointer lpsWin32FindData ;    Returns Handle
8386>>>>>    
8386>>>>>    Handle  hResult
8386>>>>>    Integer iVoid iFilenameSize iAltFilenameSize
8386>>>>>    Integer iSizeOfStructWithoutStrings
8386>>>>>    String  sFileName sAlternateFileName
8386>>>>>    WString wFileName wAlternateFileName
8386>>>>>    Pointer pWFD
8386>>>>>    tWin32FindDataW tWFD
8386>>>>>    tWin32FindDataW tWFD
8386>>>>>    
8386>>>>>    // lpsWin32FindData is a pointer to a WIN32_FIND_DATAW struct, which contains pointers to UTF-8 strings.
8386>>>>>    // These string must be converted to UTF-16 and afterwards back to UTF-8.
8386>>>>>
8386>>>>>    Move (SizeOfType(tWin32FindData) - MAX_PATH - MAX_ALTPATH) to iSizeOfStructWithoutStrings
8387>>>>>    Move (AddressOf(tWFD)) to pWFD
8388>>>>>    
8388>>>>>    // Call the function
8388>>>>>    Move (winFindFirstFileW (sFileSpec, pWFD)) to hResult
8389>>>>>
8389>>>>>    // Copy the struct contents back to the incoming one.
8389>>>>>    Move (CopyMemory(lpsWin32FindData, pWFD, iSizeOfStructWithoutStrings)) to iVoid
8390>>>>>    
8390>>>>>    // But do the strings separately and convert them to UTF8
8390>>>>>    Move (PointerToWString(pWFD + iSizeOfStructWithoutStrings)) to sFileName
8391>>>>>    Move (PointerToWString(pWFD + iSizeOfStructWithoutStrings + (MAX_PATH*2))) to sAlternateFileName
8392>>>>>    
8392>>>>>    // Extend string with 0 to the maximum number of characters
8392>>>>>    If (SizeOfString(sFileName)<MAX_PATH) ;        Append sFileName (Repeat(Character(0), MAX_PATH - SizeOfString(sFileName)))
8395>>>>>    If (SizeOfString(sAlternateFileName)<MAX_ALTPATH) ;        Append sAlternateFileName (Repeat(Character(0), MAX_ALTPATH - SizeOfString(sAlternateFileName)))
8398>>>>>        
8398>>>>>    Move (MemCopy(lpsWin32FindData + iSizeOfStructWithoutStrings, AddressOf(sFileName), MAX_PATH)) to iVoid
8399>>>>>    Move (MemCopy(lpsWin32FindData + iSizeOfStructWithoutStrings + MAX_PATH, AddressOf(sAlternateFileName), MAX_ALTPATH)) to iVoid
8400>>>>>    
8400>>>>>    Function_Return hResult
8401>>>>>End_Function
8402>>>>>
8402>>>>>// When used directly, be sure to use WString types (UTF16).
8402>>>>>External_Function winFindNextFileW "FindNextFileW" Kernel32.dll ;    Handle  hFindFile ;    Pointer lpsWin32FindData ;    Returns Integer
8403>>>>>
8403>>>>>// Wrapper Function winFindNextFile
8403>>>>>Function winFindNextFile Global ;    Handle  hFindFile ;    Pointer lpsWin32FindData ;    Returns Integer
8405>>>>>    
8405>>>>>    Integer iResult iVoid iFilenameSize iAltFilenameSize
8405>>>>>    Integer iSizeOfStructWithoutStrings
8405>>>>>    String  sFileName sAlternateFileName
8405>>>>>    WString wFileName wAlternateFileName
8405>>>>>    Pointer pWFD
8405>>>>>    tWin32FindDataW tWFD
8405>>>>>    tWin32FindDataW tWFD
8405>>>>>
8405>>>>>    // lpsWin32FindData is a pointer to a WIN32_FIND_DATAW struct, which contains pointers to UTF-8 strings.
8405>>>>>    // These string must be converted to UTF-16 and afterwards back to UTF-8.
8405>>>>>
8405>>>>>    // Copy the struct to a local struct that can be modified to UTF-16.
8405>>>>>    Move (SizeOfType(tWin32FindData) - MAX_PATH - MAX_ALTPATH) to iSizeOfStructWithoutStrings
8406>>>>>    Move (AddressOf(tWFD)) to pWFD
8407>>>>>    Move (MemCopy(pWFD, lpsWin32FindData, iSizeOfStructWithoutStrings)) to iVoid
8408>>>>>    // But do the strings separately and convert them to wide strings (UTF16).
8408>>>>>    Move (PointerToString(lpsWin32FindData + iSizeOfStructWithoutStrings)) to wFileName
8409>>>>>    Move (PointerToString(lpsWin32FindData + iSizeOfStructWithoutStrings + MAX_PATH)) to wAlternateFileName
8410>>>>>    Move (MemCopy(pWFD + iSizeOfStructWithoutStrings, AddressOf(wFileName), SizeOfString(wFileName)*2)) to iVoid
8411>>>>>    Move (MemCopy(pWFD + iSizeOfStructWithoutStrings + (MAX_PATH*2), AddressOf(wAlternateFileName), SizeOfString(wAlternateFileName)*2)) to iVoid
8412>>>>>    
8412>>>>>    // Call the function
8412>>>>>    Move (winFindNextFileW (hFindFile, pWFD)) to iResult  
8413>>>>>
8413>>>>>    // Copy the struct contents back to the incoming one.
8413>>>>>    Move (CopyMemory(lpsWin32FindData, pWFD, iSizeOfStructWithoutStrings)) to iVoid
8414>>>>>    
8414>>>>>    // But do the strings separately and convert them to UTF8
8414>>>>>    Move (PointerToWString(pWFD + iSizeOfStructWithoutStrings)) to sFileName
8415>>>>>    Move (PointerToWString(pWFD + iSizeOfStructWithoutStrings + (MAX_PATH*2))) to sAlternateFileName
8416>>>>>    
8416>>>>>    // Extend string with 0 to the maximum number of characters
8416>>>>>    If (SizeOfString(sFileName)<MAX_PATH) ;        Append sFileName (Repeat(Character(0), MAX_PATH - SizeOfString(sFileName)))
8419>>>>>    If (SizeOfString(sAlternateFileName)<MAX_ALTPATH) ;        Append sAlternateFileName (Repeat(Character(0), MAX_ALTPATH - SizeOfString(sAlternateFileName)))
8422>>>>>        
8422>>>>>    Move (MemCopy(lpsWin32FindData + iSizeOfStructWithoutStrings, AddressOf(sFileName), MAX_PATH)) to iVoid
8423>>>>>    Move (MemCopy(lpsWin32FindData + iSizeOfStructWithoutStrings + MAX_PATH, AddressOf(sAlternateFileName), MAX_ALTPATH)) to iVoid
8424>>>>>    
8424>>>>>    Function_Return iResult
8425>>>>>End_Function
8426>>>>>
8426>>>>>
8426>>>>>External_Function winFindClose "FindClose" Kernel32.dll ;    Handle hOpenFile Returns Integer
8427>>>>>
8427>>>>>Function DoesFileExist Global String sFilename Returns Boolean
8429>>>>>    tWin32FindDataW Win32FindData
8429>>>>>    tWin32FindDataW Win32FindData
8429>>>>>    String sMask
8429>>>>>    Integer iVoid
8429>>>>>    Handle hFileFind
8429>>>>>    
8429>>>>>    Move (winFindFirstFileW(sFilename, AddressOf(Win32FindData))) to hFileFind
8430>>>>>    If (hFileFind <> INVALID_HANDLE_VALUE) Begin
8432>>>>>        Move (winFindClose(hFileFind)) to iVoid
8433>>>>>    End
8433>>>>>>
8433>>>>>    
8433>>>>>    Function_Return (hFileFind <> INVALID_HANDLE_VALUE)
8434>>>>>End_Function
8435>>>>>
8435>>>>>
8435>>>>>Use cIniFile.pkg
Including file: cIniFile.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cIniFile.pkg)
8435>>>>>>>Use Dll.pkg
8435>>>>>>>Use errornum.inc
8435>>>>>>>Use LanguageText.pkg
8435>>>>>>>Use GlobalFunctionsProcedures.pkg
8435>>>>>>>Use seq_chnl.pkg
8435>>>>>>>Use CharTranslate.pkg
8435>>>>>>>Use cCharTranslate.pkg
Including file: cCharTranslate.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCharTranslate.pkg)
8435>>>>>>>>>Use Variant.pkg
Including file: Variant.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Variant.pkg)
8435>>>>>>>>>>>Use ui
8435>>>>>>>>>>>Use errornum.inc
8435>>>>>>>>>>>
8435>>>>>>>>>>>// OLE VARENUM usage keys (from wtypes.h)
8435>>>>>>>>>>>
8435>>>>>>>>>>>
8435>>>>>>>>>>>External_Function SysAllocString "SysAllocString" oleaut32.dll Pointer pStr Returns Pointer
8436>>>>>>>>>>>External_Function SysStringLen "SysStringLen" oleaut32.dll Pointer vStr Returns Integer
8437>>>>>>>>>>>
8437>>>>>>>>>>>//  Returns the variant type
8437>>>>>>>>>>>Function VariantType Global Variant vVal Returns Integer
8439>>>>>>>>>>>    Function_Return (DeRefW(AddressOf(vVal),0))
8440>>>>>>>>>>>End_Function
8441>>>>>>>>>>>
8441>>>>>>>>>>>
8441>>>>>>>>>>>// Returns the character length of the variant string. 
8441>>>>>>>>>>>Function VariantStringLength Global Variant bStr Returns Integer
8443>>>>>>>>>>>    Integer iLen iType
8443>>>>>>>>>>>
8443>>>>>>>>>>>    Move (VariantType(bStr)) to iType
8444>>>>>>>>>>>    If (iType=OLE_VT_Empty) Begin
8446>>>>>>>>>>>        Function_Return 0
8447>>>>>>>>>>>    End
8447>>>>>>>>>>>>
8447>>>>>>>>>>>    If (iType<>OLE_VT_Bstr) Begin
8449>>>>>>>>>>>        Error DFERR_BAD_TYPE_EXPRESSION "In variable is not a variant bstr"
8450>>>>>>>>>>>>
8450>>>>>>>>>>>        Function_Return 0
8451>>>>>>>>>>>    End
8451>>>>>>>>>>>>
8451>>>>>>>>>>>    Move (SysStringLen(DeRefPtr(AddressOf(bStr),8))) to iLen
8452>>>>>>>>>>>    Function_Return iLen
8453>>>>>>>>>>>End_Function
8454>>>>>>>>>>>
8454>>>>>>>>>>>
8454>>>>>>>>>>>// returns true if char string in the buffer can fit into a string.
8454>>>>>>>>>>>// Changed this to always return True, because the Max_Argument_Size limitation has been removed.
8454>>>>>>>>>>>Function ValidStringBufferLength Global Pointer pData Returns Boolean
8456>>>>>>>>>>>    Function_Return True
8457>>>>>>>>>>>End_Function
8458>>>>>>>>>>>
8458>>>>>>>>>>>
8458>>>>>>>>>Use CharTranslate.pkg
8458>>>>>>>>>Use GlobalFunctionsProcedures.pkg
8458>>>>>>>>>
8458>>>>>>>>>// special for UTF16, which is really not a code page at all
8458>>>>>>>>>Define CP_UTF16 for -1
8458>>>>>>>>>
8458>>>>>>>>>Class cCharTranslate is a cObject
8459>>>>>>>>>    
8459>>>>>>>>>    
8459>>>>>>>>>    // UTF16 functions that allow you to move between a char (UTF8, ANS, OEM) and a UTF16 buffer
8459>>>>>>>>>    
8459>>>>>>>>>    // converts from buffer of encoded eCharType to a new UTF16 buffer
8459>>>>>>>>>    // note: Utf16FromBuffer with eCharType of CP_OEM can replace OEMToUTF16Buffer
8459>>>>>>>>>    Function Utf16FromBuffer  Pointer pMultiCharBuffer Integer eCharType Integer ByRef iLen Returns Pointer
8461>>>>>>>>>        Pointer pWideBuf
8461>>>>>>>>>        Integer iWideBufLen iStrLen
8461>>>>>>>>>        Move 0 to pWideBuf
8462>>>>>>>>>        Move 0 to iLen
8463>>>>>>>>>        If (pMultiCharBuffer) Begin
8465>>>>>>>>>            Move (CStringSize(pMultiCharBuffer)) to iStrLen
8466>>>>>>>>>            If (iStrLen) Begin
8468>>>>>>>>>                Move (MultiToWideBuffer(eCharType,pMultiCharBuffer, iStrLen, AddressOf(pWideBuf))) to iLen
8469>>>>>>>>>                If (iLen=0) Begin
8471>>>>>>>>>                    Function_Return 0
8472>>>>>>>>>                End
8472>>>>>>>>>>
8472>>>>>>>>>            End
8472>>>>>>>>>>
8472>>>>>>>>>        End
8472>>>>>>>>>>
8472>>>>>>>>>        Function_Return pWideBuf
8473>>>>>>>>>    End_Function
8474>>>>>>>>>    
8474>>>>>>>>>    Function Utf16FromStr String sValue Integer eCharType Integer ByRef iLen Returns Pointer
8476>>>>>>>>>        Pointer pValue
8476>>>>>>>>>        Get Utf16FromBuffer (AddressOf(sValue)) eCharType (&iLen) to pValue
8477>>>>>>>>>        Function_Return pValue
8478>>>>>>>>>    End_Function
8479>>>>>>>>>    
8479>>>>>>>>>    // converts from utf16 buffer to a new buffer of encoded eCharType
8479>>>>>>>>>    // note: Utf16ToBuffer with eCharType of CP_OEM can replace UTFtoOEMBuffer
8479>>>>>>>>>    Function Utf16ToBuffer Pointer pWideBuf Integer eCharType Integer iLen Returns Pointer
8481>>>>>>>>>        Pointer pRetBuf
8481>>>>>>>>>        Integer iRetBufLen
8481>>>>>>>>>        Move 0 to pRetBuf
8482>>>>>>>>>        If (pWideBuf and iLen) Begin
8484>>>>>>>>>            Move (WideToMultiBuffer(eCharType,pWideBuf,iLen,AddressOf(pRetBuf))) to iRetBufLen
8485>>>>>>>>>            If (iRetBufLen=0) Begin
8487>>>>>>>>>                Function_Return 0
8488>>>>>>>>>            End
8488>>>>>>>>>>
8488>>>>>>>>>        End
8488>>>>>>>>>>
8488>>>>>>>>>        Function_Return pRetBuf
8489>>>>>>>>>    End_Function
8490>>>>>>>>>    
8490>>>>>>>>>    Function Utf16ToStr Pointer pWideBuf Integer eCharType Integer iLen Returns String
8492>>>>>>>>>        String sValue
8492>>>>>>>>>        Pointer pValue
8492>>>>>>>>>        Boolean bOk
8492>>>>>>>>>        Get Utf16ToBuffer pWideBuf eCharType iLen to pValue
8493>>>>>>>>>        If (not(ValidStringBufferLength(pValue))) Begin
8495>>>>>>>>>            Error DFERR_PROGRAM "Buffer exceeds maximum string size"
8496>>>>>>>>>>
8496>>>>>>>>>        End
8496>>>>>>>>>>
8496>>>>>>>>>        Move (PointerToString(pValue)) to sValue
8497>>>>>>>>>        Move (Free(pValue)) to bOk
8498>>>>>>>>>        Function_Return sValue
8499>>>>>>>>>    End_Function
8500>>>>>>>>>    
8500>>>>>>>>>    
8500>>>>>>>>>    // UTF8 functions that allow you to move between a UTF8 buffer and other single char OEM/ASNI
8500>>>>>>>>>    
8500>>>>>>>>>    Function Utf8FromBuffer Pointer pMultiCharBuffer Integer eCharType Returns Pointer
8502>>>>>>>>>        Pointer pWideBuf
8502>>>>>>>>>        Pointer pUtf8Buf
8502>>>>>>>>>        Integer iLen iMultiBufLen
8502>>>>>>>>>        Boolean bOk
8502>>>>>>>>>        Get Utf16FromBuffer pMultiCharBuffer eCharType (&iLen) to pWideBuf
8503>>>>>>>>>        If (iLen=0) Begin
8505>>>>>>>>>            Function_Return 0
8506>>>>>>>>>        End
8506>>>>>>>>>>
8506>>>>>>>>>        Move 0 to pUtf8Buf
8507>>>>>>>>>        Move (WideToMultiBuffer(CP_UTF8,pWideBuf,iLen,AddressOf(pUtf8Buf))) to iMultiBufLen
8508>>>>>>>>>        Move (Free(pWideBuf)) to bOk
8509>>>>>>>>>        Function_Return pUtf8Buf
8510>>>>>>>>>    End_Function
8511>>>>>>>>>    
8511>>>>>>>>>    Function Utf8FromStr String sValue Integer eCharType Returns Pointer
8513>>>>>>>>>        Pointer pValue
8513>>>>>>>>>        Get Utf8FromBuffer (AddressOf(sValue)) eCharType to pValue
8514>>>>>>>>>        Function_Return pValue
8515>>>>>>>>>    End_Function
8516>>>>>>>>>    
8516>>>>>>>>>    Function Utf8ToBuffer Pointer pMultiCharBuffer Integer eCharType Returns Pointer
8518>>>>>>>>>        Pointer pRetBuf pWideBuf
8518>>>>>>>>>        Integer iWideBufLen
8518>>>>>>>>>        Integer iRetBufLen
8518>>>>>>>>>        Boolean bOk
8518>>>>>>>>>        Get Utf16FromBuffer pMultiCharBuffer CP_UTF8 (&iWideBufLen) to pWideBuf
8519>>>>>>>>>        If (iWideBufLen=0) Begin
8521>>>>>>>>>            Function_Return 0
8522>>>>>>>>>        End
8522>>>>>>>>>>
8522>>>>>>>>>        Move 0 to pRetBuf
8523>>>>>>>>>        Move (WideToMultiBuffer(eCharType,pWideBuf,iWideBufLen,AddressOf(pRetBuf))) to iRetBufLen
8524>>>>>>>>>        Move (Free(pWideBuf)) to bOk
8525>>>>>>>>>        Function_Return pRetBuf
8526>>>>>>>>>    End_Function
8527>>>>>>>>>    
8527>>>>>>>>>    Function Utf8ToStr Pointer pWideBuf Integer eCharType Returns String
8529>>>>>>>>>        String sValue
8529>>>>>>>>>        Pointer pValue
8529>>>>>>>>>        Boolean bOk
8529>>>>>>>>>        Get Utf8ToBuffer pWideBuf eCharType to pValue
8530>>>>>>>>>        If (not(ValidStringBufferLength(pValue))) Begin
8532>>>>>>>>>            Error DFERR_PROGRAM "Buffer exceeds maximum string size"
8533>>>>>>>>>>
8533>>>>>>>>>        End
8533>>>>>>>>>>
8533>>>>>>>>>        Move (PointerToString(pValue)) to sValue
8534>>>>>>>>>        Move (Free(pValue)) to bOk
8535>>>>>>>>>        Function_Return sValue
8536>>>>>>>>>    End_Function
8537>>>>>>>>>    
8537>>>>>>>>>    // Variant functions that allow you to move between a variant string (wide char) and other
8537>>>>>>>>>    // buffer and string types. Normally a Move vVar to sVar does a OEM/Unicode translation. These
8537>>>>>>>>>    // allow you translate to other formats (UTF8, OEM and ANSI)
8537>>>>>>>>>    
8537>>>>>>>>>    // Create data buffer from variant string. data buffer is encoded by eCharType
8537>>>>>>>>>    Function VariantStrToBuffer Variant vValue Integer eCharType Returns Pointer
8539>>>>>>>>>        Pointer pBSTR pRetStr
8539>>>>>>>>>        Integer iLen iBufLen
8539>>>>>>>>>        Boolean bOk
8539>>>>>>>>>        Move 0 to pRetStr
8540>>>>>>>>>        Move (VariantStringLength( vValue)) to iLen
8541>>>>>>>>>        If (iLen) Begin
8543>>>>>>>>>            Move (DeRefPtr(AddressOf(vValue),8)) to pBSTR
8544>>>>>>>>>            Move (WideToMultiBuffer(eCharType,pBSTR,iLen,AddressOf(pRetStr))) to iBufLen
8545>>>>>>>>>        End
8545>>>>>>>>>>
8545>>>>>>>>>        Function_Return pRetStr
8546>>>>>>>>>    End_Function
8547>>>>>>>>>    
8547>>>>>>>>>    // Create string from variant string. data buffer is encoded by eCharType
8547>>>>>>>>>    
8547>>>>>>>>>    Function VariantStrToStr Variant vValue Integer eCharType Returns String
8549>>>>>>>>>        String sValue
8549>>>>>>>>>        Pointer pValue
8549>>>>>>>>>        Boolean bOk
8549>>>>>>>>>        Get VariantStrToBuffer vValue eCharType to pValue
8550>>>>>>>>>        If (not(ValidStringBufferLength(pValue))) Begin
8552>>>>>>>>>            Error DFERR_PROGRAM "Buffer exceeds maximum string size"
8553>>>>>>>>>>
8553>>>>>>>>>        End
8553>>>>>>>>>>
8553>>>>>>>>>        Move (PointerToString(pValue)) to sValue
8554>>>>>>>>>        Move (Free(pValue)) to bOk
8555>>>>>>>>>        Function_Return sValue
8556>>>>>>>>>    End_Function
8557>>>>>>>>>    
8557>>>>>>>>>    // Create variant string from data buffer. data buffer is encoded by eCharType
8557>>>>>>>>>    
8557>>>>>>>>>    Function VariantStrFromBuffer Pointer pSource Integer eCodeType Returns Variant
8559>>>>>>>>>        Variant vValue
8559>>>>>>>>>        Pointer pvValue
8559>>>>>>>>>        Boolean bOk
8559>>>>>>>>>        Pointer pWStr
8559>>>>>>>>>        Move "" to vValue
8560>>>>>>>>>        If (pSource) Begin
8562>>>>>>>>>            //Initialize pWstr variable so it has the correct type and AddressOf will return a proper pointer
8562>>>>>>>>>            Move 0 to pWStr
8563>>>>>>>>>            //Convert the Ansi string to Unicode
8563>>>>>>>>>            Move (MultiToWideBuffer( eCodeType, pSource, CStringSize(pSource), AddressOf(pWStr))) to bOk
8564>>>>>>>>>            //Initialize vValue variable so it has the correct type and AddressOf will return a proper pointer
8564>>>>>>>>>            Move 0 to vValue
8565>>>>>>>>>            Move (AddressOf(vValue)) to pvValue
8566>>>>>>>>>            //Change the Variant type to VT_BSTR
8566>>>>>>>>>            Move (StoreDw(pvValue,0,OLE_VT_Bstr)) to bOk
8567>>>>>>>>>            //Allocate a proper COM BSTR, assign the Unicode string, and store the BSTR in the Variant variable
8567>>>>>>>>>            Move (StorePtr(pvValue,8,SysAllocString(pWStr))) to bOk
8568>>>>>>>>>            //Now clear up the Unicode string, the Variant owns a BSTR copy of the string
8568>>>>>>>>>            Move (Free(pWStr)) to bOk
8569>>>>>>>>>        End
8569>>>>>>>>>>
8569>>>>>>>>>        Function_Return vValue
8570>>>>>>>>>    End_Function
8571>>>>>>>>>    
8571>>>>>>>>>    // Create variant string from data string. data string is encoded by eCharType
8571>>>>>>>>>    
8571>>>>>>>>>    Function VariantStrFromStr String sValue Integer eCodeType Returns Variant
8573>>>>>>>>>        Variant vValue
8573>>>>>>>>>        Get VariantStrFromBuffer (AddressOf(sValue)) eCodeType to vValue
8574>>>>>>>>>        Function_Return vValue
8575>>>>>>>>>    End_Function
8576>>>>>>>>>    
8576>>>>>>>>>    // Create buffer of utf16 data from variant.
8576>>>>>>>>>    // Returns newly created memory address and length (by reference)
8576>>>>>>>>>    Function VariantStrToUTF16 Variant vValue Integer ByRef iLen Returns Pointer
8578>>>>>>>>>        Pointer pBSTR pRetStr
8578>>>>>>>>>        Boolean bOk
8578>>>>>>>>>        Move 0 to pRetStr
8579>>>>>>>>>        Move (VariantStringLength( vValue)) to iLen
8580>>>>>>>>>        If (iLen) Begin
8582>>>>>>>>>            Move (DeRefPtr(AddressOf(vValue),8)) to pBSTR
8583>>>>>>>>>            Move (Alloc(iLen+1 * 2)) to pRetStr
8584>>>>>>>>>            Move (MemCopy(pRetStr,pBSTR,(iLen+1 * 2))) to bOk
8585>>>>>>>>>        End
8585>>>>>>>>>>
8585>>>>>>>>>        Function_Return pRetStr
8586>>>>>>>>>    End_Function
8587>>>>>>>>>    
8587>>>>>>>>>    // Create variant from buffer of utf16 data
8587>>>>>>>>>    Function VariantStrFromUTF16 Pointer pSource Returns Variant
8589>>>>>>>>>        Variant vValue
8589>>>>>>>>>        Pointer pvValue
8589>>>>>>>>>        Boolean bOk
8589>>>>>>>>>        Move "" to vValue
8590>>>>>>>>>        If (pSource) Begin
8592>>>>>>>>>            //Initialize pWstr variable so it has the correct type and AddressOf will return a proper pointer
8592>>>>>>>>>            //Initialize vValue variable so it has the correct type and AddressOf will return a proper pointer
8592>>>>>>>>>            Move 0 to vValue
8593>>>>>>>>>            Move (AddressOf(vValue)) to pvValue
8594>>>>>>>>>            //Change the Variant type to VT_BSTR
8594>>>>>>>>>            Move (StoreDw(pvValue,0,OLE_VT_Bstr)) to bOk
8595>>>>>>>>>            //Allocate a proper COM BSTR, assign the Unicode string, and store the BSTR in the Variant variable
8595>>>>>>>>>            Move (StorePtr(pvValue,8,SysAllocString(pSource))) to bOk
8596>>>>>>>>>        End
8596>>>>>>>>>>
8596>>>>>>>>>        Function_Return vValue
8597>>>>>>>>>    End_Function
8598>>>>>>>>>    
8598>>>>>>>>>    // Create Uchar array from variant string.
8598>>>>>>>>>    // Data buffer is encoded by eCharType
8598>>>>>>>>>    Function VariantStrToUCharArray Variant vValue Integer eCharType Returns UChar[]
8600>>>>>>>>>        Pointer pBSTR pRetStr
8600>>>>>>>>>        Integer iLen iBufLen
8600>>>>>>>>>        Boolean bOk
8600>>>>>>>>>        UChar[] UC1
8601>>>>>>>>>        Move 0 to pRetStr
8602>>>>>>>>>        Move (VariantStringLength( vValue)) to iLen
8603>>>>>>>>>        If (iLen) Begin
8605>>>>>>>>>            Move (DeRefPtr(AddressOf(vValue),8)) to pBSTR
8606>>>>>>>>>            If (eCharType=CP_UTF16) Begin
8608>>>>>>>>>                Move (iLen*2) to iBufLen
8609>>>>>>>>>                Move (ResizeArray(UC1,iBufLen)) to UC1
8610>>>>>>>>>                Move (MemCopy(AddressOf(UC1),pBSTR,iBufLen)) to bOk
8611>>>>>>>>>            End
8611>>>>>>>>>>
8611>>>>>>>>>            Else Begin
8612>>>>>>>>>                Move (WideToMultiBuffer(eCharType,pBSTR,iLen,AddressOf(pRetStr))) to iBufLen
8613>>>>>>>>>                Move (ResizeArray(UC1,iBufLen)) to UC1
8614>>>>>>>>>                Move (MemCopy(AddressOf(UC1),pRetStr,iBufLen)) to bOk
8615>>>>>>>>>                Move (Free(pRetStr)) to bOk
8616>>>>>>>>>            End
8616>>>>>>>>>>
8616>>>>>>>>>        End
8616>>>>>>>>>>
8616>>>>>>>>>        Function_Return UC1
8617>>>>>>>>>    End_Function
8618>>>>>>>>>    
8618>>>>>>>>>    // Create variant string from UChar array. data is encoded by eCharType
8618>>>>>>>>>    Function VariantStrFromUCharArray UChar[] ucSource Integer eCodeType Returns Variant
8620>>>>>>>>>        Variant vValue
8620>>>>>>>>>        Pointer pvValue
8620>>>>>>>>>        Boolean bOk
8620>>>>>>>>>        Pointer pWStr
8620>>>>>>>>>        Move "" to vValue
8621>>>>>>>>>        
8621>>>>>>>>>        //Initialize pWstr variable so it has the correct type and AddressOf will return a proper pointer
8621>>>>>>>>>        Move 0 to pWStr
8622>>>>>>>>>        //Convert the Ansi string to Unicode
8622>>>>>>>>>        If (eCodeType=CP_UTF16) Begin
8624>>>>>>>>>            Move 0 to ucSource[SizeOfArray(ucSource)]
8625>>>>>>>>>            Move 0 to ucSource[SizeOfArray(ucSource)]
8626>>>>>>>>>            Move (AddressOf(ucSource)) to pWStr
8627>>>>>>>>>        End
8627>>>>>>>>>>
8627>>>>>>>>>        Else Begin
8628>>>>>>>>>            Move (MultiToWideBuffer( eCodeType, AddressOf(ucSource), SizeOfArray(ucSource), AddressOf(pWStr))) to bOk
8629>>>>>>>>>        End
8629>>>>>>>>>>
8629>>>>>>>>>        //Initialize vValue variable so it has the correct type and AddressOf will return a proper pointer
8629>>>>>>>>>        Move 0 to vValue
8630>>>>>>>>>        Move (AddressOf(vValue)) to pvValue
8631>>>>>>>>>        //Change the Variant type to VT_BSTR
8631>>>>>>>>>        Move (StoreDw(pvValue,0,OLE_VT_Bstr)) to bOk
8632>>>>>>>>>        //Allocate a proper COM BSTR, assign the Unicode string, and store the BSTR in the Variant variable
8632>>>>>>>>>        Move (StorePtr(pvValue,8,SysAllocString(pWStr))) to bOk
8633>>>>>>>>>        //Now clear up the Unicode string, the Variant owns a BSTR copy of the string
8633>>>>>>>>>        If (eCodeType<>CP_UTF16) Begin
8635>>>>>>>>>            Move (Free(pWStr)) to bOk
8636>>>>>>>>>        End
8636>>>>>>>>>>
8636>>>>>>>>>        Function_Return vValue
8637>>>>>>>>>    End_Function
8638>>>>>>>>>    
8638>>>>>>>>>    
8638>>>>>>>>>    // UChar array conversions. Converts a passed uchar array with from-encoding to
8638>>>>>>>>>    // a new UChar array with to-encoding
8638>>>>>>>>>    
8638>>>>>>>>>    Function ConvertUCharArray UChar[] UCharData Integer iFromCP Integer iToCP Returns UChar[]
8640>>>>>>>>>        Pointer pFromBuf pToBuf
8640>>>>>>>>>        Integer iBytes iChars
8640>>>>>>>>>        Boolean bOk
8640>>>>>>>>>        
8640>>>>>>>>>        Move (SizeOfArray(UCharData)) to iBytes
8641>>>>>>>>>        If (iFromCP=iToCP or iBytes=0) Begin
8643>>>>>>>>>            Function_Return UCharData
8644>>>>>>>>>        End
8644>>>>>>>>>>
8644>>>>>>>>>        
8644>>>>>>>>>        If (iFromCP<>CP_UTF16) Begin
8646>>>>>>>>>            Move 0 to UCharData[iBytes] // extend to make sure we have 0 at end
8647>>>>>>>>>            Get Utf16FromBuffer (AddressOf(UCharData)) iFromCP (&iChars) to pFromBuf
8648>>>>>>>>>        End
8648>>>>>>>>>>
8648>>>>>>>>>        Else Begin
8649>>>>>>>>>            Move (iBytes/2) to iChars // if from is utf16
8650>>>>>>>>>        End
8650>>>>>>>>>>
8650>>>>>>>>>        
8650>>>>>>>>>        If (iToCP<>CP_UTF16) Begin
8652>>>>>>>>>            If (iFromCP=CP_UTF16) Begin
8654>>>>>>>>>                Get Utf16ToBuffer (AddressOf(UCharData)) iToCP iChars to pToBuf
8655>>>>>>>>>            End
8655>>>>>>>>>>
8655>>>>>>>>>            Else Begin
8656>>>>>>>>>                Get Utf16ToBuffer pFromBuf iToCP iChars to pToBuf
8657>>>>>>>>>                Move (Free(pFromBuf)) to bOk
8658>>>>>>>>>            End
8658>>>>>>>>>>
8658>>>>>>>>>            Move (CStringSize(pToBuf)) to iBytes
8659>>>>>>>>>        End
8659>>>>>>>>>>
8659>>>>>>>>>        Else Begin
8660>>>>>>>>>            Move (iChars*2) to iBytes
8661>>>>>>>>>            Move pFromBuf to pToBuf
8662>>>>>>>>>        End
8662>>>>>>>>>>
8662>>>>>>>>>        Move (ResizeArray(UCharData,iBytes)) to UCharData
8663>>>>>>>>>        Move (MemCopy(AddressOf(UCharData),pToBuf,iBytes)) to bOk
8664>>>>>>>>>        Move (Free(pToBuf)) to bOk
8665>>>>>>>>>        Function_Return UCharData
8666>>>>>>>>>    End_Function
8667>>>>>>>>>    
8667>>>>>>>>>    // Base64 Encoding functions that allow you to encode to and decode from strings and
8667>>>>>>>>>    // Variant strings. Binary data is always buffer
8667>>>>>>>>>    
8667>>>>>>>>>    Function Base64EncodeToStr Pointer pBinaryData Integer iBinaryLen Returns String
8669>>>>>>>>>        Pointer pBase64
8669>>>>>>>>>        String sResult
8669>>>>>>>>>        Integer iVoid
8669>>>>>>>>>        Move (Base64Encode(pBinaryData, iBinaryLen)) to pBase64
8670>>>>>>>>>        Move (PointerToString(pBase64)) to sResult
8671>>>>>>>>>        Move (Free(pBase64)) to iVoid
8672>>>>>>>>>        Function_Return sResult
8673>>>>>>>>>    End_Function
8674>>>>>>>>>    
8674>>>>>>>>>    Function Base64DecodeFromStr String sBase64 Integer ByRef iBinaryLen Returns Pointer
8676>>>>>>>>>        Pointer pBinaryData
8676>>>>>>>>>        String sBinary
8676>>>>>>>>>        Integer iVoid
8676>>>>>>>>>        Move (Base64Decode(AddressOf(sBase64), &iBinaryLen)) to pBinaryData
8677>>>>>>>>>        Function_Return pBinaryData
8678>>>>>>>>>    End_Function
8679>>>>>>>>>    
8679>>>>>>>>>    Function Base64EncodeToVariantStr Pointer pBinaryData Integer iBinaryLen Returns Variant
8681>>>>>>>>>        Pointer pBase64
8681>>>>>>>>>        Variant vVar
8681>>>>>>>>>        Integer iBase64Len iVoid
8681>>>>>>>>>        If (pBinaryData and iBinaryLen) Begin
8683>>>>>>>>>            Move (Base64Encode(pBinaryData,iBinaryLen)) to pBase64
8684>>>>>>>>>            Get  VariantStrFromBuffer pBase64 CP_ACP to vVar
8685>>>>>>>>>            Move (Free(pBase64)) to iVoid
8686>>>>>>>>>        End
8686>>>>>>>>>>
8686>>>>>>>>>        Function_Return vVar
8687>>>>>>>>>    End_Function
8688>>>>>>>>>    
8688>>>>>>>>>    Function Base64DecodeFromVariantStr Variant vBase64Str Integer ByRef iBinaryLen Returns Pointer
8690>>>>>>>>>        Pointer pBase64 pBinaryData
8690>>>>>>>>>        Integer iVoid
8690>>>>>>>>>        Move 0 to iBinaryLen
8691>>>>>>>>>        Get VariantStrToBuffer vBase64Str CP_ACP to pBase64
8692>>>>>>>>>        If (pBase64) Begin
8694>>>>>>>>>            Move (Base64Decode(pBase64,&iBinaryLen)) to pBinaryData
8695>>>>>>>>>            Move (Free(pBase64)) to iVoid
8696>>>>>>>>>        End
8696>>>>>>>>>>
8696>>>>>>>>>        Function_Return pBinaryData
8697>>>>>>>>>    End_Function
8698>>>>>>>>>    
8698>>>>>>>>>    // base 64 Encode from Uchar array to a Uchar array
8698>>>>>>>>>    Function Base64EncodeUCharArray UChar[] UCharData Returns UChar[]
8700>>>>>>>>>        Pointer pBase64
8700>>>>>>>>>        Integer iLen
8700>>>>>>>>>        Boolean bOk
8700>>>>>>>>>        
8700>>>>>>>>>        Move (SizeOfArray(UCharData)) to iLen
8701>>>>>>>>>        If (iLen) Begin
8703>>>>>>>>>            Move (Base64Encode(AddressOf(UCharData), iLen)) to pBase64
8704>>>>>>>>>            Move (CStringSize(pBase64)) to iLen
8705>>>>>>>>>            Move (ResizeArray(UCharData,iLen)) to UCharData
8706>>>>>>>>>            Move (MemCopy(AddressOf(UCharData),pBase64,iLen)) to bOk
8707>>>>>>>>>            Move (Free(pBase64)) to bOk
8708>>>>>>>>>        End
8708>>>>>>>>>>
8708>>>>>>>>>        Function_Return UCharData
8709>>>>>>>>>    End_Function
8710>>>>>>>>>    
8710>>>>>>>>>    // base 64 Decode from Uchar array to a Uchar array
8710>>>>>>>>>    Function Base64DecodeUCharArray UChar[] UCharData Returns UChar[]
8712>>>>>>>>>        Pointer pData
8712>>>>>>>>>        Integer iLen
8712>>>>>>>>>        Boolean bOk
8712>>>>>>>>>        
8712>>>>>>>>>        Move (SizeOfArray(UCharData)) to iLen
8713>>>>>>>>>        If (iLen) Begin
8715>>>>>>>>>            Move 0 to UCharData[iLen]
8716>>>>>>>>>            Move (Base64Decode(AddressOf(UCharData),&iLen)) to pData
8717>>>>>>>>>            Move (ResizeArray(UCharData,iLen)) to UCharData
8718>>>>>>>>>            Move (MemCopy(AddressOf(UCharData),pData,iLen)) to bOk
8719>>>>>>>>>            Move (Free(pData)) to bOk
8720>>>>>>>>>        End
8720>>>>>>>>>>
8720>>>>>>>>>        Function_Return UCharData
8721>>>>>>>>>    End_Function
8722>>>>>>>>>    
8722>>>>>>>>>End_Class
8723>>>>>>>>>
8723>>>>>>>>>
8723>>>>>>>
8723>>>>>>>// it is important that psFileName is defined. If blank, the registry may be accessed. We will check all WritePrivateProfileString
8723>>>>>>>// and GetPrivateProfileString to make sure that a file is defined.
8723>>>>>>>
8723>>>>>>>
8723>>>>>>>External_Function WritePrivateProfileStringW "WritePrivateProfileStringW" Kernel32.dll ;    WString sSection ;    WString sKeyName ;    WString sValue ;    WString sFileName ;    Returns Integer
8724>>>>>>>
8724>>>>>>>
8724>>>>>>>// When called directly, be sure to use WString types.
8724>>>>>>>External_Function GetPrivateProfileStringW "GetPrivateProfileStringW" Kernel32.dll ;    Pointer lpSection ;    Pointer lpKeyName ;    Pointer lpDefault ;    Pointer lpsValue ;    Integer nSize ;    WString lpFileName ;    Returns Integer
8725>>>>>>>
8725>>>>>>>External_Function WritePrivateProfileStringA "WritePrivateProfileStringA" Kernel32.dll ;    String sSection ;    String sKeyName ;    String sValue ;    String sFileName ;    Returns Integer
8726>>>>>>>    
8726>>>>>>>// When called directly, be sure to use String types.
8726>>>>>>>External_Function GetPrivateProfileStringA "GetPrivateProfileStringA" Kernel32.dll ;    Pointer lpSection ;    Pointer lpKeyName ;    Pointer lpDefault ;    Pointer lpsValue ;    Integer nSize ;    String lpFileName ;    Returns Integer
8727>>>>>>>    
8727>>>>>>>// Wrapper redirecting direct access to the wide for backwards compatibility (parameters will be auto converted)
8727>>>>>>>Define WritePrivateProfileString for WritePrivateProfileStringW
8727>>>>>>>    
8727>>>>>>>
8727>>>>>>>// Wrapper Function GetPrivateProfileString for backwards compatibility
8727>>>>>>>Function GetPrivateProfileString Global ;    Pointer pSection ;    Pointer pKeyName ;    Pointer pDefault ;    Pointer lpsValue ;    Integer nSize ;    String  sFileName ;    Returns Integer
8729>>>>>>>    
8729>>>>>>>    Integer iResult
8729>>>>>>>    UWide   uwSection uwKeyName uwDefault uwValue uwFileName
8729>>>>>>>    UWide   uwSection uwKeyName uwDefault uwValue uwFileName
8729>>>>>>>
8729>>>>>>>    Send StringToWide pSection (&uwSection)
8730>>>>>>>    Send StringToWide pKeyName (&uwKeyName)
8731>>>>>>>    Send StringToWide pDefault (&uwDefault)    
8732>>>>>>>    Send StringToWide (AddressOf(sFileName)) (&uwFileName)
8733>>>>>>>                           
8733>>>>>>>    Send WideSetBuffer lpsValue (AddressOf(nSize)) (&uwValue) 
8734>>>>>>>       
8734>>>>>>>    Move (GetPrivateProfileStringW (uwSection.lpUText, uwKeyName.lpUText, uwDefault.lpUText, uwValue.lpUText, nSize, uwFileName.lpUText)) to iResult
8735>>>>>>>        
8735>>>>>>>    Send WideToStringSized (&uwValue) lpsValue iResult      // iResult is number of characters
8736>>>>>>>    
8736>>>>>>>    Function_Return iResult
8737>>>>>>>End_Function
8738>>>>>>> 
8738>>>>>>>
8738>>>>>>>Class cIniFile is a cObject
8739>>>>>>>    Procedure Construct_Object
8741>>>>>>>        Forward Send Construct_Object
8743>>>>>>>        
8743>>>>>>>        
8743>>>>>>>        // Set to false to use the narrow windows API's to access the ini files. This allows UTF-8 data to be written
8743>>>>>>>        // and read (except if the file is stored as UTF-16) but has the downside of not supporting unicode file paths.
8743>>>>>>>        Property Boolean pbWideAPI True
8744>>>>>>>        
8744>>>>>>>        // Set to true to save the ini file as UTF-16LE (with a BOM). This allows unicode data to be saved properly
8744>>>>>>>        // using the wide API's. Note that pbWideAPI should be true to use this property. Existing ini files will be
8744>>>>>>>        // converted on first write (WriteString).
8744>>>>>>>        Property Boolean pbStoreAsUTF16 False
8745>>>>>>>        
8745>>>>>>>        Property String psPrivate_FileName ""
8746>>>>>>>        Property Boolean pbPrivate_FirstWrite True
8747>>>>>>>    End_Procedure
8748>>>>>>>    
8748>>>>>>>    Procedure Set psFileName String sVal
8750>>>>>>>        Set pbPrivate_FirstWrite to True
8751>>>>>>>        Set psPrivate_FileName to sVal
8752>>>>>>>    End_Procedure
8753>>>>>>>    
8753>>>>>>>    Function psFileName Returns String
8755>>>>>>>        Function_Return (psPrivate_FileName(Self))
8756>>>>>>>    End_Function
8757>>>>>>>    
8757>>>>>>>    Procedure InitFile
8759>>>>>>>        Boolean bExists bHasBom
8759>>>>>>>        Integer iChnl
8759>>>>>>>        UChar[] ucData
8760>>>>>>>        Handle hoTranslate
8760>>>>>>>        
8760>>>>>>>        If (pbPrivate_FirstWrite(Self) and pbStoreAsUTF16(Self) and pbWideAPI(Self)) Begin
8762>>>>>>>            File_Exist (psPrivate_FileName(Self)) bExists
8763>>>>>>>            If (not(bExists)) Begin
8765>>>>>>>                //  Create the file with a UTF-16 BOM so
8765>>>>>>>                Move (Seq_New_Channel()) to iChnl
8766>>>>>>>                If (iChnl >= 0) Begin
8768>>>>>>>                    Direct_Output channel iChnl ("binary:" + psPrivate_FileName(Self))
8770>>>>>>>                    Write channel iChnl C_BOM_UTF16LE
8772>>>>>>>                    Close_Output channel iChnl
8774>>>>>>>                    Send Seq_Release_Channel iChnl
8775>>>>>>>                End
8775>>>>>>>>
8775>>>>>>>                Else If (iChnl = -1) Begin
8778>>>>>>>                    Error DFErr_Program "I/O Channel Error"
8779>>>>>>>>
8779>>>>>>>                End
8779>>>>>>>>
8779>>>>>>>                Else If (iChnl = -2) Begin
8782>>>>>>>                    Error DFErr_Program "No I/O Channel Available"
8783>>>>>>>>
8783>>>>>>>                End
8783>>>>>>>>
8783>>>>>>>            End
8783>>>>>>>>
8783>>>>>>>            Else Begin
8784>>>>>>>                //  Check for BOM
8784>>>>>>>                Move (Seq_New_Channel()) to iChnl
8785>>>>>>>                If (iChnl >= 0) Begin
8787>>>>>>>                    Direct_Input channel iChnl ("binary:" + psPrivate_FileName(Self))
8789>>>>>>>                    Read_Block channel iChnl ucData 2
8791>>>>>>>                    
8791>>>>>>>                    Move (SizeOfArray(ucData) >= 2 and ucData[0] = C_BOM_UTF16LEc1 and ucData[1] = C_BOM_UTF16LEc2) to bHasBom
8792>>>>>>>                    
8792>>>>>>>                    //  If no BOM we'll have to read the entire file to convert it
8792>>>>>>>                    If (not(bHasBom)) Begin
8794>>>>>>>                        Set_Channel_Position iChnl to 0
8795>>>>>>>>
8795>>>>>>>                        Read_Block ucData -1
8796>>>>>>>                    End
8796>>>>>>>>
8796>>>>>>>    
8796>>>>>>>                    Close_Input channel iChnl
8798>>>>>>>                    
8798>>>>>>>                    If (not(bHasBom)) Begin
8800>>>>>>>                        //  Convert thedata
8800>>>>>>>                        Get Create (RefClass(cCharTranslate)) to hoTranslate
8801>>>>>>>                        Get ConvertUCharArray of hoTranslate ucData CP_OEMCP CP_UTF16 to ucData
8802>>>>>>>                        
8802>>>>>>>                        //  Write out the UTF 16 file with BOM
8802>>>>>>>                        Direct_Output channel iChnl ("binary:" + psPrivate_FileName(Self))
8804>>>>>>>                        Write channel iChnl C_BOM_UTF16LE
8806>>>>>>>                        
8806>>>>>>>                        Write channel iChnl ucData
8808>>>>>>>                        
8808>>>>>>>                        Close_Output channel iChnl
8810>>>>>>>                        
8810>>>>>>>                        Send Destroy of hoTranslate
8811>>>>>>>                    End
8811>>>>>>>>
8811>>>>>>>                    
8811>>>>>>>                    Send Seq_Release_Channel iChnl
8812>>>>>>>                End
8812>>>>>>>>
8812>>>>>>>                Else If (iChnl = -1) Begin
8815>>>>>>>                    Error DFErr_Program "I/O Channel Error"
8816>>>>>>>>
8816>>>>>>>                End
8816>>>>>>>>
8816>>>>>>>                Else If (iChnl = -2) Begin
8819>>>>>>>                    Error DFErr_Program "No I/O Channel Available"
8820>>>>>>>>
8820>>>>>>>                End
8820>>>>>>>>
8820>>>>>>>            End
8820>>>>>>>>
8820>>>>>>>            
8820>>>>>>>            Set pbPrivate_FirstWrite to False
8821>>>>>>>        End
8821>>>>>>>>
8821>>>>>>>    End_Procedure
8822>>>>>>>    
8822>>>>>>>    Procedure WriteString String sSection String sKey String sValue
8824>>>>>>>        Boolean bSuccess
8824>>>>>>>        String sFileName
8824>>>>>>>        
8824>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8826>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8827>>>>>>>>
8827>>>>>>>            Procedure_Return
8828>>>>>>>        End
8828>>>>>>>>
8828>>>>>>>        
8828>>>>>>>        Send InitFile
8829>>>>>>>        
8829>>>>>>>        // All parameters are Strings and are converted to WString upon invoking the external function.
8829>>>>>>>        If (pbWideAPI(Self)) Begin
8831>>>>>>>            Move (WritePrivateProfileStringW(sSection, sKey, sValue, psPrivate_FileName(Self))) to bSuccess
8832>>>>>>>        End
8832>>>>>>>>
8832>>>>>>>        Else Begin
8833>>>>>>>            Move (Utf8ToAnsi(psPrivate_FileName(Self))) to sFileName
8834>>>>>>>            Move (WritePrivateProfileStringA(sSection, sKey, sValue, sFilename)) to bSuccess 
8835>>>>>>>        End
8835>>>>>>>>
8835>>>>>>>        If (bSuccess = False) ;            Error DFERR_INI_FILE C_$CannotWriteToTheIniFile
8838>>>>>>>    End_Procedure
8839>>>>>>>    
8839>>>>>>>    
8839>>>>>>>    Function ReadString String sSection String sKey String sDefault Returns String
8841>>>>>>>        Integer iNumChars iSizeValue
8841>>>>>>>        WString wValue wFileName wSection wKey wDefault
8841>>>>>>>        String sFileName sValue
8841>>>>>>>        
8841>>>>>>>        Move 2047 to iSizeValue
8842>>>>>>>        Move (Repeat(" ", iSizeValue)) to sValue
8843>>>>>>>        
8843>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8845>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8846>>>>>>>>
8846>>>>>>>            Function_Return ''
8847>>>>>>>        End
8847>>>>>>>>
8847>>>>>>>        
8847>>>>>>>        If (pbWideAPI(Self)) Begin
8849>>>>>>>            Move sSection to wSection
8850>>>>>>>            Move sKey to wKey
8851>>>>>>>            Move sDefault to wDefault
8852>>>>>>>            Move sValue to wValue
8853>>>>>>>            Move (GetPrivateProfileStringW(AddressOf(wSection), AddressOf(wKey), AddressOf(wDefault), AddressOf(wValue), iSizeValue, psPrivate_FileName(Self))) to iNumChars
8854>>>>>>>            Move wValue to sValue
8855>>>>>>>        End
8855>>>>>>>>
8855>>>>>>>        Else Begin
8856>>>>>>>            Move (Utf8ToAnsi(psPrivate_FileName(Self))) to sFileName
8857>>>>>>>            Move (GetPrivateProfileStringA(AddressOf(sSection), AddressOf(sKey), AddressOf(sDefault), AddressOf(sValue), iSizeValue, sFileName)) to iNumChars
8858>>>>>>>        End
8858>>>>>>>>
8858>>>>>>>        
8858>>>>>>>        Function_Return  (CString(sValue))
8859>>>>>>>    End_Function
8860>>>>>>>    
8860>>>>>>>    Function SectionExists String sSection Returns Boolean
8862>>>>>>>        // A section exists only if it has at least one Key. A section with no keys is said not to exist
8862>>>>>>>        Handle hoKeys
8862>>>>>>>        Integer icKey iKey
8862>>>>>>>        
8862>>>>>>>        Get Create U_ARRAY to hoKeys
8863>>>>>>>        Send ReadSection sSection hoKeys
8864>>>>>>>        Get Item_Count of hoKeys to icKey
8865>>>>>>>        Send Destroy of hoKeys
8866>>>>>>>        
8866>>>>>>>        Function_Return (icKey >0)
8867>>>>>>>    End_Function
8868>>>>>>>    
8868>>>>>>>    Procedure ReadSection WString wSection Handle hoArray
8870>>>>>>>        Integer iNumChars iSizeValue iPos
8870>>>>>>>        Pointer lpsKeys
8870>>>>>>>        WString wKeys wKey
8870>>>>>>>        
8870>>>>>>>        Move 16384 to iSizeValue
8871>>>>>>>        Move (Repeat(character(0),  iSizeValue)) to wKeys
8872>>>>>>>        
8872>>>>>>>        Move (AddressOf(wKeys)) to lpsKeys
8873>>>>>>>        
8873>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8875>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8876>>>>>>>>
8876>>>>>>>            Procedure_Return
8877>>>>>>>        End
8877>>>>>>>>
8877>>>>>>>        // The last parameter is a String and is converted to WString upon invoking the external function.
8877>>>>>>>        Move (GetPrivateProfileStringW(AddressOf(wSection), 0, 0, lpsKeys, Length(wKeys), psPrivate_FileName(Self))) to iNumChars
8878>>>>>>>        If (iNumChars >0) Begin
8880>>>>>>>            Repeat
8880>>>>>>>>
8880>>>>>>>                Move (Pos(Character(0),wKeys)) to iPos
8881>>>>>>>                If (iPos >1) Begin
8883>>>>>>>                    Move (Left(wKeys,iPos -1))  to wKey
8884>>>>>>>                    Move (Right(wKeys,Length(wKeys) - iPos)) to wKeys
8885>>>>>>>                    Set Value of hoArray (Item_Count(hoArray)) to wKey
8886>>>>>>>                End
8886>>>>>>>>
8886>>>>>>>            Until (iPos <=1)
8888>>>>>>>        End
8888>>>>>>>>
8888>>>>>>>    End_Procedure
8889>>>>>>>    
8889>>>>>>>    Procedure ReadSections Handle hoArray
8891>>>>>>>        Integer iNumChars iSizeValue iPos
8891>>>>>>>        Pointer lpwSections
8891>>>>>>>        WString wSections
8891>>>>>>>        String sSection
8891>>>>>>>        
8891>>>>>>>        Move 16384 to iSizeValue
8892>>>>>>>        
8892>>>>>>>        Move (Repeat(character(0),  iSizeValue)) to wSections
8893>>>>>>>        Move (AddressOf(wSections)) to lpwSections
8894>>>>>>>        
8894>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8896>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8897>>>>>>>>
8897>>>>>>>            Procedure_Return
8898>>>>>>>        End
8898>>>>>>>>
8898>>>>>>>        // The last parameter is a String and is converted to WString upon invoking the external function.
8898>>>>>>>        Move (GetPrivateProfileStringW(0, 0, 0, lpwSections, Length(wSections), psPrivate_FileName(Self))) to iNumChars
8899>>>>>>>        If (iNumChars >0) Begin
8901>>>>>>>            Repeat
8901>>>>>>>>
8901>>>>>>>                Move (Pos(Character(0),wSections)) to iPos
8902>>>>>>>                If (iPos >1) Begin
8904>>>>>>>                    Move (Left(wSections,iPos -1)) to sSection
8905>>>>>>>                    Move (Right(wSections, Length(wSections) - iPos)) to wSections
8906>>>>>>>                    Set Value of hoArray (Item_Count(hoArray)) to sSection
8907>>>>>>>                End
8907>>>>>>>>
8907>>>>>>>            Until (iPos <=1)
8909>>>>>>>        End
8909>>>>>>>>
8909>>>>>>>        
8909>>>>>>>    End_Procedure
8910>>>>>>>    
8910>>>>>>>    Procedure DeleteSection String sSection
8912>>>>>>>        
8912>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8914>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8915>>>>>>>>
8915>>>>>>>            Procedure_Return
8916>>>>>>>        End
8916>>>>>>>>
8916>>>>>>>        If (WritePrivateProfileString(sSection, "", "", psPrivate_FileName(Self)) = 0) ;            Error DFERR_INI_FILE C_$CanNotDeleteSection
8919>>>>>>>    End_Procedure
8920>>>>>>>    
8920>>>>>>>    Procedure DeleteKey String sSection String sKey
8922>>>>>>>        Integer iVoid
8922>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8924>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8925>>>>>>>>
8925>>>>>>>            Procedure_Return
8926>>>>>>>        End
8926>>>>>>>>
8926>>>>>>>        Move (WritePrivateProfileString(sSection, sKey, "", psPrivate_FileName(Self))) to iVoid
8927>>>>>>>    End_Procedure
8928>>>>>>>    
8928>>>>>>>    Function KeyExists String sSection String sKey Returns Boolean
8930>>>>>>>        Handle hoKeys
8930>>>>>>>        Integer iKey
8930>>>>>>>        Boolean bExists
8930>>>>>>>        
8930>>>>>>>        Move (False) to bExists
8931>>>>>>>        
8931>>>>>>>        Move (Uppercase(sKey)) to sKey
8932>>>>>>>        
8932>>>>>>>        Get Create U_ARRAY to hoKeys
8933>>>>>>>        
8933>>>>>>>        Send ReadSection sSection hoKeys
8934>>>>>>>        For iKey from 0 to (Item_Count(hoKeys) -1)
8940>>>>>>>>
8940>>>>>>>            If (sKey = Uppercase(Value(hoKeys, iKey))) Begin
8942>>>>>>>                Move (True) to bExists
8943>>>>>>>            End
8943>>>>>>>>
8943>>>>>>>        Loop
8944>>>>>>>>
8944>>>>>>>        
8944>>>>>>>        Send Destroy of hoKeys
8945>>>>>>>        
8945>>>>>>>        Function_Return bExists
8946>>>>>>>    End_Function
8947>>>>>>>    
8947>>>>>>>End_Class
8948>>>>>
8948>>>>>Class cWorkspace is a cObject
8949>>>>>    
8949>>>>>    Procedure Construct_Object
8951>>>>>        Forward Send Construct_Object
8953>>>>>        
8953>>>>>        
8953>>>>>        Property String psAppSrcPath
8954>>>>>        Property String psBitmapPath
8955>>>>>        Property String psDataPath
8956>>>>>        Property String psDdSrcPath
8957>>>>>        Property String psDescription
8958>>>>>        Property String psFileList
8959>>>>>        Property String psHelpPath
8960>>>>>        Property String psHome
8961>>>>>        Property String psIdeSrcPath
8962>>>>>        Property String psProgramPath
8963>>>>>        Property String psAppHtmlPath
8964>>>>>        Property String psWorkspaceName
8965>>>>>        Property String psWorkspaceWSFile
8966>>>>>        Property String psConnectionIni
8967>>>>>        
8967>>>>>        Property String psSystemDfPath // took from the Registry!
8968>>>>>        Property String psSystemMakePath // took from the Registry!
8969>>>>>        Property String psDfPath        // Calculated
8970>>>>>        
8970>>>>>        Property Boolean pbWorkspaceOpened False // used internally to tell if we are switching workspaces
8971>>>>>        
8971>>>>>    End_Procedure
8972>>>>>    
8972>>>>>    Function FullPathNames String sShortPathNames Returns String
8974>>>>>        String sFileName
8974>>>>>        String sFullPathNames 
8974>>>>>        WString sFullPathName sShortPathName
8974>>>>>        Pointer lpsFilePart
8974>>>>>        Integer icChar // the number of characters returned
8974>>>>>        Integer iPos
8974>>>>>        
8974>>>>>        Move (Pos(";", sShortPathNames)) to iPos
8975>>>>>        While (length(sShortPathNames) >0)
8979>>>>>            If (iPos =0) Begin
8981>>>>>                Move sShortPathNames to sShortPathName
8982>>>>>                Move "" to sShortPathNames
8983>>>>>            End
8983>>>>>>
8983>>>>>            Else Begin // multiple paths
8984>>>>>                Move (Left(sShortPathNames, iPos -1)) to sShortPathName
8985>>>>>                Move (Right(sShortPathNames, length(sShortPathNames) -iPos)) to sShortPathNames // remove this path from the paths
8986>>>>>            End
8986>>>>>>
8986>>>>>            Move (Repeat(character(0), 4096)) to sFullPathName
8987>>>>>            Move -1 to lpsFilePart
8988>>>>>            Move (GetFullPathNameW(sShortPathName, 4096, AddressOf(sFullPathName), AddressOf(lpsFilePart))) to icChar
8989>>>>>            Append sFullPathNames (CString(sFullPathName))
8990>>>>>            If (sShortPathNames <>"") ;                Append sFullPathNames ";"
8993>>>>>            Move (Pos(";", sShortPathNames)) to iPos
8994>>>>>        Loop
8995>>>>>>
8995>>>>>        
8995>>>>>        Function_Return sFullPathNames
8996>>>>>    End_Function
8997>>>>>    
8997>>>>>    Function GetApplicationPath Returns String
8999>>>>>        // Returns the path of the Application (no trailing "\")
8999>>>>>        WString wApplicationFileName 
8999>>>>>        Boolean bRemoved
8999>>>>>        Integer iNumChars
8999>>>>>        String sFilename sPath
8999>>>>>        
8999>>>>>        Move (Repeat(Character(0), 1024)) to wApplicationFileName
9000>>>>>        Move (GetModuleFileNameW(0, AddressOf(wApplicationFileName), 1024)) to iNumChars
9001>>>>>        Move (CString(wApplicationFileName)) to wApplicationFileName
9002>>>>>        
9002>>>>>        Move (PathRemoveFileSpecW(AddressOf(wApplicationFileName))) to bRemoved
9003>>>>>        Move (CString(wApplicationFileName)) to sPath
9004>>>>>        
9004>>>>>        If (Right(sPath, 1) ="\") ;            Move (Left(sPath, Length(sPath) -1)) to sPath
9007>>>>>        Function_Return sPath
9008>>>>>    End_Function
9009>>>>>    
9009>>>>>    Procedure DoClearPaths
9011>>>>>        // Call this prior to changing from one WorkspAce to another
9011>>>>>        // if you don't, OpenWorkspaceFile will ignore the new paths.
9011>>>>>        Set psHome           to ""
9012>>>>>        Set psAppSrcPath     to ""
9013>>>>>        Set psBitmapPath     to ""
9014>>>>>        Set psDataPath       to ""
9015>>>>>        Set psDdSrcPath      to ""
9016>>>>>        Set psDescription    to ""
9017>>>>>        Set psFileList       to ""
9018>>>>>        Set psHelpPath       to ""
9019>>>>>        Set psIdeSrcPath     to ""
9020>>>>>        Set psAppHtmlPath    to ""
9021>>>>>        Set psProgramPath    to ""
9022>>>>>        Set psWorkspaceName  to ""
9023>>>>>        Set psSystemDfPath   to ""
9024>>>>>        Set psSystemMakePath to ""
9025>>>>>        Set psWorkspaceWSFile to ""
9026>>>>>        Set psConnectionIni to ""
9027>>>>>    End_Procedure
9028>>>>>    
9028>>>>>    Function OpenWorkspaceFile String sWorkspaceFile Returns Integer
9030>>>>>        WString wApplicationStartPath
9030>>>>>        String sWsName // name of Workspace is inferred from the Workspacefile name
9030>>>>>        Boolean bRemoved
9030>>>>>        Handle hoIniFile
9030>>>>>        Boolean bSuccess // call succeeded?
9030>>>>>        String sOldDirectory
9030>>>>>        String sSystemDfPath sSystemMakePath
9030>>>>>        Boolean bExist // does the WS file exist?
9030>>>>>        Boolean bChangingWorkspace
9030>>>>>        
9030>>>>>        String sHome sAppSrcPath sBitmapPath sDataPath sDdSrcPath sDescription sAppHtmlPath
9030>>>>>        String sFileList sHelpPath sIdeSrcPath sProgramPath sWorkspaceName sConnectionIni
9030>>>>>        
9030>>>>>        Set psWorkspaceWSFile to ""
9031>>>>>        If (sWorkspaceFile ="") ;            Function_Return wsWorkspaceFileNotFound
9034>>>>>        
9034>>>>>        // Append extension if not supplied...
9034>>>>>        If (Uppercase(Right(Trim(sWorkspaceFile),3)) <> ".WS") Begin
9036>>>>>            Move (sWorkspaceFile-".ws") to sWorkspaceFile
9037>>>>>        End
9037>>>>>>
9037>>>>>        
9037>>>>>        Get pbWorkspaceOpened to bChangingWorkspace // if we had an existing workspace. We are changing
9038>>>>>        
9038>>>>>        If (IsFilenameQualified(sWorkspaceFile) = False) Begin
9040>>>>>            // Set the properties to the paths of the Workspace
9040>>>>>            // Find the WS file (with program)...
9040>>>>>            Get GetApplicationPath to wApplicationStartPath
9041>>>>>            
9041>>>>>            Move sWorkspaceFile to sWsName
9042>>>>>            Move (wApplicationStartPath +"\" +sWorkspaceFile) to sWorkspaceFile
9043>>>>>        End
9043>>>>>>
9043>>>>>        Else Begin
9044>>>>>            Move (ExtractFileName(sWorkspaceFile)) to sWsName
9045>>>>>            
9045>>>>>            Move sWorkspaceFile to wApplicationStartPath
9046>>>>>            Move (PathRemoveFileSpecW(AddressOf(wApplicationStartPath))) to bRemoved
9047>>>>>        End
9047>>>>>>
9047>>>>>        
9047>>>>>        // Ensure that the file can be found...
9047>>>>>        //File_Exist (ToAnsi(sWorkspaceFile)) bExist        // [JVH] 8.3.8.0 Convert filename to Ansi
9047>>>>>        // [JVH] Turn off support for
9047>>>>>        // Ansi extended characters in workspace until we can
9047>>>>>        // resolve all open issues
9047>>>>>        Set psWorkspaceWSFile to sWorkspaceFile
9048>>>>>        File_Exist sWorkspaceFile bExist
9049>>>>>        If (bExist = False) ;            Function_Return wsWorkspaceFileNotFound
9052>>>>>        
9052>>>>>        Get psHome           to sHome
9053>>>>>        Get psAppSrcPath     to sAppSrcPath
9054>>>>>        Get psAppHtmlPath    to sAppHtmlPath
9055>>>>>        Get psBitmapPath     to sBitmapPath
9056>>>>>        Get psDataPath       to sDataPath
9057>>>>>        Get psDdSrcPath      to sDdSrcPath
9058>>>>>        Get psDescription    to sDescription
9059>>>>>        Get psFileList       to sFileList
9060>>>>>        Get psHelpPath       to sHelpPath
9061>>>>>        Get psIdeSrcPath     to sIdeSrcPath
9062>>>>>        Get psProgramPath    to sProgramPath
9063>>>>>        Get psSystemDfPath   to sSystemDfPath
9064>>>>>        Get psSystemMakePath to sSystemMakePath
9065>>>>>        Get psWorkspaceName  to sWorkspaceName
9066>>>>>        Get psConnectionIni to sConnectionIni
9067>>>>>        
9067>>>>>        Get_Current_Directory to sOldDirectory
9068>>>>>        // Note- this conversion is temporarily rolled back
9068>>>>>        //Move (SetCurrentDirectory(ToAnsi(CString(wApplicationStartPath)))) To bSuccess    // [JVH] 8.3.8.0 Convert AppStartPath to ANSI
9068>>>>>        Move (SetCurrentDirectory(CString(wApplicationStartPath))) to bSuccess
9069>>>>>        
9069>>>>>        Get Create U_cIniFile to hoIniFile
9070>>>>>        Set pbWideAPI of hoIniFile to False
9071>>>>>        Set psFilename of hoIniFile to sWorkspaceFile
9072>>>>>        
9072>>>>>        If (sHome ="") ;            Get ReadString of hoIniFile "Workspace" "Home" ""          to sHome
9075>>>>>        If (sAppSrcPath ="") ;            Get ReadString of hoIniFile "Workspace" "AppSrcPath" ""    to sAppSrcPath
9078>>>>>        If (sAppHtmlPath ="") ;            Get ReadString of hoIniFile "Workspace" "AppHtmlPath" ""   to sAppHtmlPath
9081>>>>>        If (sBitmapPath ="") ;            Get ReadString of hoIniFile "Workspace" "BitmapPath" ""    to sBitmapPath
9084>>>>>        If (sDataPath ="") ;            Get ReadString of hoIniFile "Workspace" "DataPath" ""      to sDataPath
9087>>>>>        If (sDdSrcPath ="") ;            Get ReadString of hoIniFile "Workspace" "DdSrcPath" ""     to sDdSrcPath
9090>>>>>        If (sDescription ="") ;            Get ReadString of hoIniFile "Workspace" "Description" ""   to sDescription
9093>>>>>        If (sFileList ="") ;            Get ReadString of hoIniFile "Workspace" "FileList" ""      to sFileList
9096>>>>>        If (sHelpPath ="") ;            Get ReadString of hoIniFile "Workspace" "HelpPath" ""      to sHelpPath
9099>>>>>        If (sIdeSrcPath ="") ;            Get ReadString of hoIniFile "Workspace" "IdeSrcPath" ""    to sIdeSrcPath
9102>>>>>        If (sProgramPath ="") ;            Get ReadString of hoIniFile "Workspace" "ProgramPath" ""   to sProgramPath
9105>>>>>        If (sWorkspaceName ="") ;            Move (Left(sWsName, Length(sWsName) -3))                   to sWorkspaceName
9108>>>>>        If (sConnectionIni ="") ;            Get ReadString of hoIniFile "Workspace" "ConnectionIni" ""   to sConnectionIni
9111>>>>>        
9111>>>>>        If (sSystemDfPath ="") ;            Set psSystemDfPath   to (VdfSystemDfPath(Self))
9114>>>>>        If (sSystemMakePath ="") ;            Set psSystemMakePath to (VdfSystemMakePath(Self))
9117>>>>>        
9117>>>>>        Set psHome          to (FullPathNames(Self, sHome))
9118>>>>>        
9118>>>>>        // Set CWD to Home...
9118>>>>>        Move (SetCurrentDirectory(sHome)) to bSuccess
9119>>>>>        Set psAppSrcPath    to (FullPathNames(Self, sAppSrcPath))
9120>>>>>        Set psAppHtmlPath   to (FullPathNames(Self, sAppHtmlPath))
9121>>>>>        Set psBitmapPath    to (FullPathNames(Self, sBitmapPath))
9122>>>>>        Set psDataPath      to (FullPathNames(Self, sDataPath))
9123>>>>>        Set psDdSrcPath     to (FullPathNames(Self, sDdSrcPath))
9124>>>>>        Set psFileList      to (FullPathNames(Self, sFileList))
9125>>>>>        Set psHelpPath      to (FullPathNames(Self, sHelpPath))
9126>>>>>        Set psIdeSrcPath    to (FullPathNames(Self, sIdeSrcPath))
9127>>>>>        Set psProgramPath   to (FullPathNames(Self, sProgramPath))
9128>>>>>        Set psConnectionIni to (FullPathNames(Self, sConnectionIni))
9129>>>>>        
9129>>>>>        Set psWorkspaceName to sWorkspaceName
9130>>>>>        Set psDescription   to sDescription
9131>>>>>        
9131>>>>>        Send Destroy of hoIniFile // destroy dynaically created inifile object
9132>>>>>        
9132>>>>>        // Restore CWD...
9132>>>>>        Move (SetCurrentDirectory(sOldDirectory)) to sOldDirectory
9133>>>>>        
9133>>>>>        // Check for error conditions:
9133>>>>>        // DataPath and FileList must be defined; the FileList entry must point to a valid FileList.cfg
9133>>>>>        If (psDataPath(Self) = "") ;            Function_Return wsDataPathEmpty
9136>>>>>        If (psFileList(Self) = "") ;            Function_Return wsFileListEmpty
9139>>>>>        
9139>>>>>        Move (DoesFileExist(psFileList(Self))) to bExist
9140>>>>>        If (bExist = False) ;            Function_Return wsFileListNotExist
9143>>>>>        
9143>>>>>        If bChangingWorkspace ;            Close DF_ALL // if there is a WS open, we must close all the files
9146>>>>>        
9146>>>>>        Send DoAssignPaths // set psDfPath
9147>>>>>        Send DoSetPaths    // Set the application's Attributes of Filelist_Name and Open_Path
9148>>>>>        Set pbWorkspaceOpened to True
9149>>>>>        
9149>>>>>        Function_Return wsWorkspaceOpened
9150>>>>>    End_Function
9151>>>>>    
9151>>>>>    Function OpenWorkspace String sWorkspace Returns Integer
9153>>>>>        // Look in the Workspaces.ini file for the name, then open it by path
9153>>>>>        
9153>>>>>        Handle hoSections hoIniFile
9153>>>>>        Integer iWorkspace eOpened
9153>>>>>        String sWorkspaceName sPath
9153>>>>>        String sVdfRootDir
9153>>>>>        
9153>>>>>        Get Create U_Array    to hoSections
9154>>>>>        Get Create U_cIniFile to hoIniFile
9155>>>>>        
9155>>>>>        Get_Profile_String "Defaults" "VdfRootDir" to sVdfRootDir
9158>>>>>        If (Right(sVdfRootDir,1) <>"\") ;            Move (sVdfRootDir +"\") to sVdfRootDir
9161>>>>>        
9161>>>>>        Set psFilename of hoIniFile to (sVdfRootDir +"bin\Workspaces.ini")
9162>>>>>        
9162>>>>>        Send ReadSections of hoIniFile hoSections
9163>>>>>        
9163>>>>>        For iWorkspace from 0 to (Item_Count(hoSections) -1)
9169>>>>>>
9169>>>>>            Get Value of hoSections iWorkspace to sWorkspaceName
9170>>>>>            If (Uppercase(sWorkspaceName) = Uppercase(sWorkspace)) Begin
9172>>>>>                Get ReadString of hoIniFile sWorkspace "Path" "" to sPath
9173>>>>>                If (Right(sPath,1) <>"\") ;                    Move (sPath +"\") to sPath
9176>>>>>                
9176>>>>>                Get OpenWorkspaceFile (sPath + sWorkspace) to eOpened
9177>>>>>                Send Destroy of hoSections
9178>>>>>                Send Destroy of hoIniFile
9179>>>>>                Function_Return eOpened
9180>>>>>            End
9180>>>>>>
9180>>>>>        Loop
9181>>>>>>
9181>>>>>        
9181>>>>>        Send Destroy of hoSections
9182>>>>>        Send Destroy of hoIniFile
9183>>>>>        Function_Return wsWorkspaceNotFound
9184>>>>>    End_Function
9185>>>>>    
9185>>>>>    Function IsRegistered String sWorkspace Returns Boolean
9187>>>>>        Boolean bRegistered
9187>>>>>        Handle hoIniFile
9187>>>>>        String sVdfRootDir
9187>>>>>        
9187>>>>>        Get Create U_cIniFile to hoIniFile
9188>>>>>        
9188>>>>>        Get_Profile_String "Defaults" "VdfRootDir" to sVdfRootDir
9191>>>>>        If (Right(sVdfRootDir,1) <>"\") ;            Move (sVdfRootDir +"\") to sVdfRootDir
9194>>>>>        Set psFilename of hoIniFile to (sVdfRootDir +"bin\Workspaces.ini")
9195>>>>>        Move (SectionExists(hoIniFile, sWorkspace)) to bRegistered
9196>>>>>        
9196>>>>>        Send Destroy of hoIniFile
9197>>>>>        
9197>>>>>        Function_Return bRegistered
9198>>>>>    End_Function
9199>>>>>    
9199>>>>>    Function VdfSystemDfPath Returns String
9201>>>>>        String sSystemDfPath
9201>>>>>        Get_Profile_String "Workspaces" "SystemDfPath" to sSystemDfPath
9204>>>>>        
9204>>>>>        Function_Return sSystemDfPath
9205>>>>>    End_Function
9206>>>>>    
9206>>>>>    Function VdfSystemMakePath Returns String
9208>>>>>        String sSystemMakePath
9208>>>>>        Get_Profile_String "Workspaces" "SystemMakePath" to sSystemMakePath
9211>>>>>        
9211>>>>>        Function_Return sSystemMakePath
9212>>>>>    End_Function
9213>>>>>    
9213>>>>>    Procedure DoAssignPaths
9215>>>>>        String sDataPath sBitmapPath sHelpPath sProgramPath sSystemDfPath
9215>>>>>        
9215>>>>>        Get psDataPath     to sDataPath
9216>>>>>        Get psBitmapPath   to sBitmapPath
9217>>>>>        Get psHelpPath     to sHelpPath
9218>>>>>        Get psProgramPath  to sProgramPath
9219>>>>>        Get psSystemDfPath to sSystemDfPath
9220>>>>>        
9220>>>>>        Set psDfPath to (sDataPath +';' + sBitmapPath +';' + sHelpPath +';' + sProgramPath +';' + sSystemDfPath)
9221>>>>>        
9221>>>>>    End_Procedure
9222>>>>>    
9222>>>>>    Procedure DoSetPaths
9224>>>>>        // [JVH] must convert paths to Ansi before setting these values
9224>>>>>        // Note- this conversion is temporarily rolled back
9224>>>>>        //Set_Attribute DF_FILELIST_NAME To (ToAnsi(psFileList(self)))
9224>>>>>        //Set_Attribute DF_OPEN_PATH     To (ToAnsi(psDfPath(self)))
9224>>>>>        Set_Attribute DF_FILELIST_NAME to (psFileList(Self))
9227>>>>>        Set_Attribute DF_OPEN_PATH     to (psDfPath(Self))
9230>>>>>    End_Procedure
9231>>>>>    
9231>>>>>    Procedure EnumerateWorkspaceData Handle hoCallBack Handle hmGeneric
9233>>>>>        String sPath
9233>>>>>        
9233>>>>>        If (psWorkspaceName(Self)="") ;            Send hmGeneric to hoCallBack C_$WorkspaceNotUsed
9236>>>>>        Else Begin
9237>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$WorkspaceDesc, psDescription(Self)))
9238>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$WorkspaceName, psWorkspaceName(Self)))
9239>>>>>            Send hmGeneric to hoCallBack ""
9240>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$Filelist, psFileList(Self)))
9241>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$DataPath, psDataPath(Self)))
9242>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$ProgramPath, psProgramPath(Self)))
9243>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$HelpPath, psHelpPath(Self)))
9244>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$BitmapsPath, psBitmapPath(Self)))
9245>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$SystemPaths, psSystemDfPath(Self)))
9246>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$FullDFPath, psDfPath(Self)))
9247>>>>>        End
9247>>>>>>
9247>>>>>    End_Procedure
9248>>>>>    
9248>>>>>    Function OpenWorkspaceErrorMessage Integer eErrorCode Returns String
9250>>>>>        // Decodes the enumerated integer returned by OpenWorkspace and
9250>>>>>        // returns a corresponding message string.
9250>>>>>        String sError
9250>>>>>        
9250>>>>>        Case Begin
9250>>>>>            Case (eErrorCode = wsWorkspaceOpened)
9252>>>>>                Move C_$NoErrors to sError
9253>>>>>                Case Break
9254>>>>>            Case (eErrorCode = wsWorkspaceNotFound)
9257>>>>>                Move C_$NoWsName to sError
9258>>>>>                Case Break
9259>>>>>            Case (eErrorCode = wsWorkspaceFileNotFound)
9262>>>>>                Move C_$NoWsFileFound to sError
9263>>>>>                Case Break
9264>>>>>            Case (eErrorCode = wsDataPathEmpty)
9267>>>>>                Move C_$NoWsDataPath to sError
9268>>>>>                Case Break
9269>>>>>            Case (eErrorCode = wsFileListEmpty)
9272>>>>>                Move C_$NoWsFileList to sError
9273>>>>>                Case Break
9274>>>>>            Case (eErrorCode = wsFileListNotExist)
9277>>>>>                Move C_$NoFileListCfg to sError
9278>>>>>                Case Break
9279>>>>>            Case Else
9279>>>>>                Move C_$UnknownError to sError
9280>>>>>                Case Break
9281>>>>>        Case End
9281>>>>>        
9281>>>>>        Function_Return (sError-".")
9282>>>>>    End_Function
9283>>>>>    
9283>>>>>    Function GetWorkspaceFileName String sWorkspace Returns String
9285>>>>>        // Returns the name of the physical Workspace file for the passed Workspace name.
9285>>>>>        String sVdfRootDir
9285>>>>>        Handle hoIniFile
9285>>>>>        String sPath
9285>>>>>        String sFileName
9285>>>>>        String sWorkspacePath
9285>>>>>        
9285>>>>>        Move "" to sFileName
9286>>>>>        
9286>>>>>        Get_Profile_String "Defaults" "VdfRootDir" to sVdfRootDir
9289>>>>>        If (Right(sVdfRootDir,1) <>"\") ;            Move (sVdfRootDir +"\") to sVdfRootDir
9292>>>>>        
9292>>>>>        Get Create U_cIniFile to hoIniFile
9293>>>>>        Set psFilename of hoIniFile to (sVdfRootDir +"bin\Workspaces.ini")
9294>>>>>        Get ReadString of hoIniFile sWorkspace "Path" "" to sWorkspacePath
9295>>>>>        If (sWorkspacePath <>"") Begin
9297>>>>>            If (Right(sWorkspacePath,1) <>"\") ;                Move (sWorkspacePath +"\") to sWorkspacePath
9300>>>>>            Move (sWorkspacePath +sWorkspace +".ws") to sFileName
9301>>>>>        End
9301>>>>>>
9301>>>>>        Send Destroy of hoIniFile
9302>>>>>        
9302>>>>>        Function_Return sFileName
9303>>>>>    End_Function
9304>>>>>    
9304>>>>>    Function CountOfPaths String sPaths Returns Integer
9306>>>>>        // Returns the number of paths defined in a string of paths
9306>>>>>        Integer iChar icChar icPath
9306>>>>>        
9306>>>>>        If (sPaths ="") ;            Function_Return 0
9309>>>>>        
9309>>>>>        Move (Length(sPaths) -1) to icChar
9310>>>>>        For iChar from 1 to icChar
9316>>>>>>
9316>>>>>            If (Mid(sPaths, 1, iChar) =";") ;                Increment icPath
9319>>>>>        Loop
9320>>>>>>
9320>>>>>        
9320>>>>>        Function_Return (icPath +1)
9321>>>>>    End_Function
9322>>>>>    
9322>>>>>    Function PathAtIndex String sPaths Integer iIndex Returns String
9324>>>>>        // Returns the path at the 1-based index of passed paths.
9324>>>>>        // If the path contains a trailing "\", it will be removed
9324>>>>>        Integer iChar icPath iPath iPos
9324>>>>>        String sPath
9324>>>>>        
9324>>>>>        Move (sPaths +";") to sPaths
9325>>>>>        For iPath from 1 to iIndex
9331>>>>>>
9331>>>>>            Move (Pos(";", sPaths)) to iPos
9332>>>>>            If iPos Begin
9334>>>>>                Move (Left(sPaths, iPos -1)) to sPath
9335>>>>>                If (Right(sPath,1) = '\') ;                    Move (Left(sPath, Length(sPath) -1)) to sPath
9338>>>>>                Move (Right(sPaths, Length(sPaths) -iPos)) to sPaths
9339>>>>>            End
9339>>>>>>
9339>>>>>            Else ;                Function_Return "" // index past number of paths
9341>>>>>        Loop
9342>>>>>>
9342>>>>>        
9342>>>>>        Function_Return sPath
9343>>>>>    End_Function
9344>>>>>    
9344>>>>>End_Class
9345>>>Use cCommandLine.pkg
Including file: cCommandLine.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCommandLine.pkg)
9345>>>>>Use VDFBase.pkg
9345>>>>>
9345>>>>>Class cCommandLine is a cObject
9346>>>>>    
9346>>>>>    Procedure Construct_Object
9348>>>>>        Forward Send Construct_Object
9350>>>>>        
9350>>>>>        Property Handle phoArgs // private object-handle of internal array of arguments
9351>>>>>    End_Procedure
9352>>>>>    
9352>>>>>    Procedure Private_DoCreateArgsArray
9354>>>>>        // creates the array for holding the arguments. Created upon demand only!
9354>>>>>        Integer icArg
9354>>>>>        String sArg
9354>>>>>        
9354>>>>>        Object oArgs is an Array
9356>>>>>            Delegate Set phoArgs to Self
9358>>>>>            Repeat
9358>>>>>>
9358>>>>>                CmdLine sArg
9359>>>>>>
9359>>>>>                If (sArg <> "") Begin
9361>>>>>                    Increment icArg
9362>>>>>                    Set Value  (icArg -1) to sArg
9363>>>>>                End
9363>>>>>>
9363>>>>>            Until (sArg = "")
9365>>>>>        End_Object
9366>>>>>    End_Procedure
9367>>>>>    
9367>>>>>    Function CountOfArgs Returns Integer
9369>>>>>        //Returns the number of arguments passed
9369>>>>>        If (phoArgs(Self) =0) ;            Send Private_DoCreateArgsArray
9372>>>>>        Function_Return (Item_Count(phoArgs(Self)))
9373>>>>>    End_Function
9374>>>>>    
9374>>>>>    Function Argument Integer iIndex Returns String
9376>>>>>        //Returns the one-based argument string
9376>>>>>        If (phoArgs(Self) =0) ;            Send Private_DoCreateArgsArray
9379>>>>>        Function_Return (Value(phoArgs(Self), iIndex -1))
9380>>>>>    End_Function
9381>>>>>    
9381>>>>>End_Class
9382>>>>>
9382>>>Use cRegistry.pkg
Including file: cRegistry.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cRegistry.pkg)
9382>>>>>Use Dll.pkg
9382>>>>>Use RegistryAPI.pkg
9382>>>>>Use tWinStructs.pkg
9382>>>>>
9382>>>>>Enum_List // Registry Data types
9382>>>>>    Define rdString
9382>>>>>    Define rdDword
9382>>>>>    Define rdBinary
9382>>>>>    Define rdUnknown
9382>>>>>End_Enum_List
9382>>>>>
9382>>>>>
9382>>>>>Class cRegistry is a cObject
9383>>>>>    Procedure Construct_Object
9385>>>>>        Forward Send Construct_Object
9387>>>>>        
9387>>>>>        Property Handle phRootKey HKEY_CURRENT_USER
9388>>>>>        Property UInteger pfAccessRights  KEY_ALL_ACCESS // what access level should be used to open a Key?
9389>>>>>        Property Handle phCurrentKey
9390>>>>>        Property Boolean pbLazyWrite True
9391>>>>>    End_Procedure
9392>>>>>    
9392>>>>>    Function CountOfSubkeys Returns Integer
9394>>>>>        Integer dwCountOfSubkeys
9394>>>>>        Integer iError
9394>>>>>        String sError
9394>>>>>        
9394>>>>>        Move 0 to dwCountOfSubkeys
9395>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, AddressOf(dwCountOfSubkeys), 0, 0, 0, 0, 0, 0, 0)) to iError
9396>>>>>        If iError Begin
9398>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9399>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9400>>>>>>
9400>>>>>        End
9400>>>>>>
9400>>>>>        Function_Return dwCountOfSubkeys
9401>>>>>    End_Function
9402>>>>>    
9402>>>>>    Function CountOfValues Returns Integer
9404>>>>>        Integer dwCountOfValues
9404>>>>>        Integer iError
9404>>>>>        String sError
9404>>>>>        
9404>>>>>        Move 0 to dwCountOfValues
9405>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, 0, 0, 0, AddressOf(dwCountOfValues), 0, 0, 0, 0)) to iError
9406>>>>>        If iError Begin
9408>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9409>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9410>>>>>>
9410>>>>>        End
9410>>>>>>
9410>>>>>        
9410>>>>>        Function_Return dwCountOfValues
9411>>>>>    End_Function
9412>>>>>    
9412>>>>>    Function LongestSubkeyLength Returns Integer
9414>>>>>        Integer dwLongestSubkeyLength
9414>>>>>        Integer iError
9414>>>>>        String sError
9414>>>>>        
9414>>>>>        Move 0 to dwLongestSubkeyLength
9415>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, 0, AddressOf(dwLongestSubkeyLength), 0, 0, 0, 0, 0, 0)) to iError
9416>>>>>        If iError Begin
9418>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9419>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9420>>>>>>
9420>>>>>        End
9420>>>>>>
9420>>>>>        
9420>>>>>        Function_Return dwLongestSubkeyLength
9421>>>>>    End_Function
9422>>>>>    
9422>>>>>    Function LongestValueLength Returns Integer
9424>>>>>        Integer dwLongestValueLength
9424>>>>>        Integer iError
9424>>>>>        String sError
9424>>>>>        
9424>>>>>        Move 0 to dwLongestValueLength
9425>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, 0, 0, 0, 0, AddressOf(dwLongestValueLength), 0, 0, 0)) to iError
9426>>>>>        If iError Begin
9428>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9429>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9430>>>>>>
9430>>>>>        End
9430>>>>>>
9430>>>>>        
9430>>>>>        Function_Return dwLongestValueLength
9431>>>>>    End_Function
9432>>>>>    
9432>>>>>    Function LongestDataLength Returns Integer
9434>>>>>        Integer dwLongestDataLength
9434>>>>>        Integer iError
9434>>>>>        String sError
9434>>>>>        
9434>>>>>        Move 0 to dwLongestDataLength
9435>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, 0, 0, 0, 0, 0, AddressOf(dwLongestDataLength), 0, 0)) to iError
9436>>>>>        If iError Begin
9438>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9439>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9440>>>>>>
9440>>>>>        End
9440>>>>>>
9440>>>>>        
9440>>>>>        Function_Return dwLongestDataLength
9441>>>>>    End_Function
9442>>>>>    
9442>>>>>    Function ValueType String sValueName Returns Integer
9444>>>>>        Integer dwType
9444>>>>>        Integer iError eType
9444>>>>>        String sError
9444>>>>>        
9444>>>>>        Move 0 to dwType
9445>>>>>        Move (RegQueryValueExW(phCurrentKey(Self), sValueName, 0, AddressOf(dwType), 0, 0)) to iError
9446>>>>>        If iError Begin
9448>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9449>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9450>>>>>>
9450>>>>>        End
9450>>>>>>
9450>>>>>        
9450>>>>>        If (dwType = REG_SZ) ;            Move rdString to eType
9453>>>>>        Else If (dwType = REG_DWORD)  ;            Move rdDword to eType
9457>>>>>        Else If (dwType = REG_BINARY) ;            Move rdBinary to eType
9461>>>>>        Else ;            Move rdUnknown to eType
9463>>>>>        
9463>>>>>        Function_Return eType
9464>>>>>    End_Function
9465>>>>>    
9465>>>>>    Function ValueLength String sValueName Returns Integer
9467>>>>>        Integer dwSize
9467>>>>>        Integer iError
9467>>>>>        String sError
9467>>>>>        
9467>>>>>        Move 0 to dwSize
9468>>>>>        Move (RegQueryValueExW(phCurrentKey(Self), sValueName, 0, 0, 0, AddressOf(dwSize))) to iError
9469>>>>>        If iError Begin
9471>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9472>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9473>>>>>>
9473>>>>>        End
9473>>>>>>
9473>>>>>        
9473>>>>>        Function_Return dwSize
9474>>>>>    End_Function
9475>>>>>    
9475>>>>>    Function CreateKey String sKeyName Returns Integer // return=error code
9477>>>>>        // Calling CreateKey for an existing Key, merely opens it without error.
9477>>>>>        Handle hKey hKeyOpened
9477>>>>>        Integer iError
9477>>>>>        String sError
9477>>>>>        
9477>>>>>        Move 0 to hKeyOpened // initialize it so we can get its address
9478>>>>>        
9478>>>>>        Get phRootKey to hKey
9479>>>>>        
9479>>>>>        Move (RegCreateKeyEx(hKey, sKeyName, 0, 0, REG_OPTION_NON_VOLATILE, pfAccessRights(Self), 0, AddressOf(hKeyOpened), 0)) to iError
9480>>>>>        If (iError =0) ;            Set phCurrentKey to hKeyOpened
9483>>>>>        Else Begin
9484>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9485>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9486>>>>>>
9486>>>>>        End
9486>>>>>>
9486>>>>>        Function_Return iError
9487>>>>>    End_Function
9488>>>>>    
9488>>>>>    Procedure CloseKey
9490>>>>>        Integer iError
9490>>>>>        Handle hKey
9490>>>>>        
9490>>>>>        Get phCurrentKey to hKey
9491>>>>>        
9491>>>>>        If (hKey <>0) Begin
9493>>>>>            If (pbLazyWrite(Self)) ;                Move (RegCloseKey(hKey)) to iError
9496>>>>>            Else ;                Move (RegFlushKey(hKey)) to iError
9498>>>>>            
9498>>>>>            Set phCurrentKey to 0
9499>>>>>        End
9499>>>>>>
9499>>>>>    End_Procedure
9500>>>>>    
9500>>>>>    Function OpenKey String sKeyName Returns Boolean
9502>>>>>        Handle hKey hKeyOpened
9502>>>>>        Integer iError
9502>>>>>        
9502>>>>>        Move 0 to hKeyOpened // initialize it so we can get its address
9503>>>>>        
9503>>>>>        Get phRootKey to hKey
9504>>>>>        Move (RegOpenKeyEx(hKey, sKeyName, 0, pfAccessRights(Self), AddressOf(hKeyOpened))) to iError
9505>>>>>        If (iError =0) ;            Set phCurrentKey to hKeyOpened
9508>>>>>        
9508>>>>>        Function_Return (iError=0)
9509>>>>>    End_Function
9510>>>>>    
9510>>>>>    Procedure WriteInteger WString sValue Integer iValueData
9512>>>>>        Handle hKey
9512>>>>>        Integer iError
9512>>>>>        Integer iData
9512>>>>>        String sError
9512>>>>>        
9512>>>>>        Move iValueData to iData
9513>>>>>        Get phCurrentKey to hKey
9514>>>>>        Move (RegSetValueExW(hKey, sValue, 0, REG_DWORD, AddressOf(iData), SizeOfType(Integer))) to iError
9515>>>>>        If iError Begin
9517>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9518>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9519>>>>>>
9519>>>>>        End
9519>>>>>>
9519>>>>>    End_Procedure
9520>>>>>    
9520>>>>>    // WriteDword is obsolete. Please use WriteInteger or WriteUInt, depending on whether you use a signed or unsigned value.
9520>>>>>    Procedure WriteDword String sValue Integer iValueData
9522>>>>>        Send WriteInteger of Self sValue iValueData
9523>>>>>    End_Procedure
9524>>>>>    
9524>>>>>    Procedure WriteUInt WString sValue UInteger uValueData
9526>>>>>        Handle hKey
9526>>>>>        Integer iError
9526>>>>>        UInteger uData
9526>>>>>        String sError
9526>>>>>        
9526>>>>>        Move uValueData to uData
9527>>>>>        Get phCurrentKey to hKey
9528>>>>>        Move (RegSetValueExW(hKey, sValue, 0, REG_DWORD, AddressOf(uData), SizeOfType(UInteger))) to iError
9529>>>>>        If iError Begin
9531>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9532>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9533>>>>>>
9533>>>>>        End
9533>>>>>>
9533>>>>>    End_Procedure
9534>>>>>
9534>>>>>    Procedure WriteString WString sValue WString wValueData
9536>>>>>        Handle hKey
9536>>>>>        Integer iError cbData
9536>>>>>        String sError
9536>>>>>        
9536>>>>>        If (wValueData = "") Begin
9538>>>>>            Move (Character(0)) to wValueData
9539>>>>>            Move 1 to cbData
9540>>>>>        End
9540>>>>>>
9540>>>>>        Else Begin
9541>>>>>            Move ((SizeOfWString(wValueData) +1)*2) to cbData
9542>>>>>        End
9542>>>>>>
9542>>>>>        Get phCurrentKey to hKey
9543>>>>>        Move (RegSetValueExW(hKey, sValue, 0, REG_SZ, AddressOf(wValueData), cbData)) to iError
9544>>>>>        If iError Begin
9546>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9547>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9548>>>>>>
9548>>>>>        End
9548>>>>>>
9548>>>>>    End_Procedure
9549>>>>>    
9549>>>>>    Procedure WriteBinary WString sValue Pointer pValueData Integer iDataLength
9551>>>>>        Handle hKey
9551>>>>>        Integer iError
9551>>>>>        String sError
9551>>>>>        
9551>>>>>        Get phCurrentKey to hKey
9552>>>>>        Move (RegSetValueExw(hKey, sValue, 0, REG_BINARY, pValueData, iDataLength)) to iError
9553>>>>>        If iError Begin
9555>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9556>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9557>>>>>>
9557>>>>>        End
9557>>>>>>
9557>>>>>    End_Procedure
9558>>>>>    
9558>>>>>    Function ReadInteger WString sValueName Returns Integer
9560>>>>>        Handle hKey
9560>>>>>        Integer iError
9560>>>>>        Integer iValueData iValueDataLength
9560>>>>>        String sError
9560>>>>>        
9560>>>>>        Move 0           to iValueData
9561>>>>>        Move (SizeOfType(Integer)) to iValueDataLength
9562>>>>>        
9562>>>>>        Get phCurrentKey to hKey
9563>>>>>        Move (RegQueryValueExW(hKey, sValueName, 0, 0, AddressOf(iValueData), AddressOf(iValueDataLength))) to iError
9564>>>>>        If iError Begin
9566>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9567>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9568>>>>>>
9568>>>>>        End
9568>>>>>>
9568>>>>>        
9568>>>>>        Function_Return iValueData
9569>>>>>    End_Function
9570>>>>>    
9570>>>>>    // ReadDword is obsolete. Please use ReadInteger or ReadUInt, depending on whether you expect a signed or unsigned value.
9570>>>>>    Function ReadDword String sValueName Returns Integer
9572>>>>>        Function_Return (ReadInteger(Self, sValueName))
9573>>>>>    End_Function
9574>>>>>
9574>>>>>    Function ReadUInt WString sValueName Returns UInteger
9576>>>>>        Handle hKey
9576>>>>>        Integer iError
9576>>>>>        UInteger uValueData uValueDataLength
9576>>>>>        String sError
9576>>>>>        
9576>>>>>        Move 0           to uValueData
9577>>>>>        Move (SizeOfType(UInteger)) to uValueDataLength
9578>>>>>        
9578>>>>>        Get phCurrentKey to hKey
9579>>>>>        Move (RegQueryValueExW(hKey, sValueName, 0, 0, AddressOf(uValueData), AddressOf(uValueDataLength))) to iError
9580>>>>>        If iError Begin
9582>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9583>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9584>>>>>>
9584>>>>>        End
9584>>>>>>
9584>>>>>        
9584>>>>>        Function_Return uValueData
9585>>>>>    End_Function
9586>>>>>    
9586>>>>>    Function ReadString String sValueName Returns String
9588>>>>>        Handle hKey
9588>>>>>        Integer iError
9588>>>>>        WString wValueData
9588>>>>>        DWord dwValueDataLength dwType
9588>>>>>        Pointer lpsValueData
9588>>>>>        String sError
9588>>>>>        
9588>>>>>        Move (Repeat(character(0), ValueLength(Self, sValueName))) to wValueData
9589>>>>>        Move (AddressOf(wValueData)) to lpsValueData
9590>>>>>        
9590>>>>>        Move (SizeOfWString(wValueData)) to dwValueDataLength
9591>>>>>        
9591>>>>>        Move REG_SZ to dwType
9592>>>>>        
9592>>>>>        Get phCurrentKey to hKey
9593>>>>>        Move (RegQueryValueExW(hKey, sValueName, 0, (AddressOf(dwType)), lpsValueData, AddressOf(dwValueDataLength))) to iError
9594>>>>>        If iError Begin
9596>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9597>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9598>>>>>>
9598>>>>>        End
9598>>>>>>
9598>>>>>        
9598>>>>>        Function_Return (CString(wValueData))
9599>>>>>    End_Function
9600>>>>>    
9600>>>>>    Function ReadBinary String sValueName Pointer pValueData Integer iDataLength Returns Boolean
9602>>>>>        Handle hKey
9602>>>>>        Integer iError
9602>>>>>        String sError
9602>>>>>        
9602>>>>>        Get phCurrentKey to hKey
9603>>>>>        Move (RegQueryValueExW(hKey, sValueName, 0, 0, pValueData, AddressOf(iDataLength))) to iError
9604>>>>>        If iError Begin
9606>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9607>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9608>>>>>>
9608>>>>>        End
9608>>>>>>
9608>>>>>        
9608>>>>>        Function_Return (iDataLength >0)
9609>>>>>    End_Function
9610>>>>>    
9610>>>>>    
9610>>>>>    // Private....
9610>>>>>    Function GetBaseKey Returns Handle
9612>>>>>        Handle hBaseKey
9612>>>>>        If (phCurrentKey(Self) = 0) ;            Get phRootKey to hBaseKey
9615>>>>>        Else ;            Get phCurrentKey to hBaseKey
9617>>>>>        
9617>>>>>        Function_Return hBaseKey
9618>>>>>    End_Function
9619>>>>>    
9619>>>>>    Function GetKey String sKeyName Returns Handle
9621>>>>>        Handle hKeyOpened
9621>>>>>        Integer iError
9621>>>>>        
9621>>>>>        Move 0 to hKeyOpened // initialize so we can get its address
9622>>>>>        
9622>>>>>        Move (RegOpenKeyEx(GetBaseKey(Self), sKeyName, 0, pfAccessRights(Self), AddressOf(hKeyOpened))) to iError
9623>>>>>        
9623>>>>>        If (iError =0) ;            Function_Return hKeyOpened
9626>>>>>        Else ;            Function_Return 0
9628>>>>>    End_Function
9629>>>>>    
9629>>>>>    // Public
9629>>>>>    Function KeyExists String sKeyName Returns Boolean
9631>>>>>        Handle hKey
9631>>>>>        Integer iVoid
9631>>>>>        
9631>>>>>        If (Trim(sKeyName) = "") ;            Function_Return False
9634>>>>>        
9634>>>>>        Get GetKey sKeyName to hKey
9635>>>>>        If hKey ;            Move (RegCloseKey(hKey)) to iVoid
9638>>>>>        Function_Return (hKey <>0)
9639>>>>>    End_Function
9640>>>>>    
9640>>>>>    Function ValueExists String sValueName Returns Boolean
9642>>>>>        // Determines whether a Value exists for the currently-opened Key.
9642>>>>>        Integer iError
9642>>>>>        DWord dwDataType
9642>>>>>        Move 0 to dwDataType // must initialize the variable to get its address
9643>>>>>        
9643>>>>>        Move (RegQueryValueExW(phCurrentKey(Self), sValueName, 0, AddressOf(dwDataType), 0, 0)) to iError
9644>>>>>        
9644>>>>>        Function_Return (iError=0)
9645>>>>>    End_Function
9646>>>>>    
9646>>>>>    Function DeleteKey String sKeyName Returns Boolean // Deleted successfully?
9648>>>>>        
9648>>>>>            If (Trim(sKeyName) = "") ;            Function_Return False
9651>>>>>        
9651>>>>>        Function_Return (ShDeleteKey(phRootKey(Self), sKeyName) =0)
9652>>>>>    End_Function
9653>>>>>    
9653>>>>>    Function DeleteValue String sValueName Returns Boolean // Deleted successfully?
9655>>>>>        Function_Return (RegDeleteValue(phCurrentKey(Self), sValueName) =0)
9656>>>>>    End_Function
9657>>>>>    
9657>>>>>    Function Subkeys Returns String[]
9659>>>>>        Integer iError
9659>>>>>        Integer icValue iLongestSubkey
9659>>>>>        Handle hKey
9659>>>>>        DWord dwSubkeyNameLength
9659>>>>>        String sSubkeyName sFileTime
9659>>>>>        Pointer lpsSubkeyName
9659>>>>>        String[] aResult
9660>>>>>        tWinFileTime fileTime
9660>>>>>        tWinFileTime fileTime
9660>>>>>
9660>>>>>        Get LongestSubkeyLength to iLongestSubkey
9661>>>>>        Move (Repeat(character(0), iLongestSubkey +1)) to sSubkeyName
9662>>>>>        Move (AddressOf(sSubkeyName)) to lpsSubkeyName
9663>>>>>
9663>>>>>        Get phCurrentKey to hKey
9664>>>>>        Repeat
9664>>>>>>
9664>>>>>            Move (iLongestSubkey +1) to dwSubkeyNameLength
9665>>>>>
9665>>>>>            Move (RegEnumKeyEx(hKey, icValue, lpsSubkeyName, AddressOf(dwSubkeyNameLength), 0, 0, 0, AddressOf(fileTime))) to iError
9666>>>>>            If (iError =0) Begin
9668>>>>>                Move (CString(sSubkeyName)) to aResult[icValue]
9669>>>>>                Increment icValue
9670>>>>>            End
9670>>>>>>
9670>>>>>        Until (iError)
9672>>>>>        Function_Return aResult
9673>>>>>    End_Function
9674>>>>>    
9674>>>>>    Function GetSubkeys Handle hoArray Returns Integer // count of Values
9676>>>>>        Integer iError
9676>>>>>        Integer icValue iLongestSubkey
9676>>>>>        Handle hKey
9676>>>>>        DWord dwSubkeyNameLength
9676>>>>>        WString wSubkeyName
9676>>>>>        tWinFileTime FileTime
9676>>>>>        tWinFileTime FileTime
9676>>>>>        
9676>>>>>        Get LongestSubkeyLength to iLongestSubkey
9677>>>>>        Move (Repeat(character(0), iLongestSubkey +1)) to wSubkeyName
9678>>>>>        
9678>>>>>        Get phCurrentKey to hKey
9679>>>>>        Repeat
9679>>>>>>
9679>>>>>            Move (iLongestSubkey +1) to dwSubkeyNameLength
9680>>>>>            
9680>>>>>            Move (RegEnumKeyExW(hKey, icValue, AddressOf(wSubkeyName), AddressOf(dwSubkeyNameLength), 0, 0, 0, AddressOf(FileTime))) to iError
9681>>>>>            If (iError =0) Begin
9683>>>>>                Increment icValue
9684>>>>>                Set Value of hoArray (Item_Count(hoArray)) to (CString(wSubkeyName))
9685>>>>>            End
9685>>>>>>
9685>>>>>        Until (iError)
9687>>>>>        Function_Return icValue
9688>>>>>        
9688>>>>>    End_Function
9689>>>>>    
9689>>>>>    Function GetValues Handle hoArray Returns Integer // count of Values
9691>>>>>        Integer iError
9691>>>>>        Integer icValue iLongestValue
9691>>>>>        Handle hKey
9691>>>>>        DWord dwValueNameLength
9691>>>>>        WString wValueName 
9691>>>>>        String sValueNameSize
9691>>>>>        Pointer lpsValueName
9691>>>>>        
9691>>>>>        Get LongestValueLength to iLongestValue
9692>>>>>        Move (Repeat(character(0), iLongestValue +1)) to wValueName
9693>>>>>        Move (AddressOf(wValueName)) to lpsValueName
9694>>>>>        
9694>>>>>        Get phCurrentKey to hKey
9695>>>>>        Repeat
9695>>>>>>
9695>>>>>            Move (iLongestValue +1) to dwValueNameLength
9696>>>>>            Move (RegEnumValueW(hKey, icValue, lpsValueName, AddressOf(dwValueNameLength), 0, 0, 0, 0)) to iError
9697>>>>>            If (iError =0) Begin
9699>>>>>                Increment icValue
9700>>>>>                Set Value of hoArray (Item_Count(hoArray)) to (CString(wValueName))
9701>>>>>            End
9701>>>>>>
9701>>>>>        Until (iError)
9703>>>>>        Function_Return icValue
9704>>>>>        
9704>>>>>    End_Function
9705>>>>>    
9705>>>>>End_Class
9706>>>Use cVersionInfo.pkg
Including file: cVersionInfo.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cVersionInfo.pkg)
9706>>>>>Use VdfBase.pkg
9706>>>>>Use DLL.pkg
9706>>>>>Use tWinStructs.pkg
9706>>>>>Use WinKern.pkg
9706>>>>>
9706>>>>>Define VS_FF_DEBUG         for |CI$00000001
9706>>>>>Define VS_FF_PRERELEASE    for |CI$00000002
9706>>>>>Define VS_FF_PATCHED       for |CI$00000004
9706>>>>>Define VS_FF_PRIVATEBUILD  for |CI$00000008
9706>>>>>Define VS_FF_INFOINFERRED  for |CI$00000010
9706>>>>>Define VS_FF_SPECIALBUILD  for |CI$00000020
9706>>>>>
9706>>>>>// Note: String pointer lpFilename must refer to WString type.
9706>>>>>External_Function GetFileVersionInfoSizeW "GetFileVersionInfoSizeW" version.dll ;    Pointer lpFilename ;    Pointer lpdwHandle ;    Returns DWord
9707>>>>>    
9707>>>>>// Wrapper Function GetFileVersionInfoSize (when using strings)
9707>>>>>Function GetFileVersionInfoSize Global ;    Pointer aFilename ;    Pointer lpdwHandle ;    Returns DWord
9709>>>>>    
9709>>>>>    DWord  dwResult
9709>>>>>    UWide  uwFileName
9709>>>>>    UWide  uwFileName
9709>>>>>
9709>>>>>    Send StringToWide aFilename (&uwFileName)
9710>>>>>    
9710>>>>>    Move (GetFileVersionInfoSizeW (uwFileName.lpUText, lpdwHandle)) to dwResult        
9711>>>>>    Function_Return dwResult
9712>>>>>End_Function
9713>>>>>
9713>>>>>// Note: String pointers should be referring to WString items.
9713>>>>>External_Function GetFileVersionInfoW "GetFileVersionInfoW" version.dll ;    Pointer lpFilename ;    DWord   dwHandle ;    DWord   dwLen ;    Pointer lpData ;    Returns Integer
9714>>>>>    
9714>>>>>// Wrapper Function GetFileVersionInfo (when using strings)
9714>>>>>Function GetFileVersionInfo Global ;    Pointer aFilename ;    DWord   dwHandle ;    DWord   dwLen ;    Pointer pData ;    Returns Integer
9716>>>>>    
9716>>>>>    Integer iResult
9716>>>>>    UWide   uwFileName
9716>>>>>    UWide   uwFileName
9716>>>>>
9716>>>>>    Send StringToWide aFilename (&uwFileName)
9717>>>>>    
9717>>>>>    Move (GetFileVersionInfoW (uwFileName.lpUText, dwHandle, dwLen, pData)) to iResult
9718>>>>>    Function_Return iResult
9719>>>>>End_Function    
9720>>>>>
9720>>>>>// Note: String pointers should be referring to WString items.
9720>>>>>External_Function VerQueryValueW "VerQueryValueW" version.dll ;    Pointer pBlock ;    Pointer pSubBlock ;    Pointer paBuffer ;    Pointer puLen ;    Returns Integer
9721>>>>>
9721>>>>>// Wrapper Function VerQueryValue (when using strings)
9721>>>>>Function VerQueryValue Global ;    Pointer pBlock ;    Pointer pSubBlock ;    Pointer paBuffer ;    Pointer puLen ;    Returns Integer
9723>>>>>    
9723>>>>>    Integer iResult
9723>>>>>    UWide   uwSubBlock
9723>>>>>    UWide   uwSubBlock
9723>>>>>    
9723>>>>>    Send StringToWide pSubBlock (&uwSubBlock)
9724>>>>>    
9724>>>>>    Move (VerQueryValueW (pBlock, uwSubBlock.lpUText, paBuffer, puLen)) to iResult        
9725>>>>>    
9725>>>>>    Function_Return iResult
9726>>>>>End_Function
9727>>>>>
9727>>>>>
9727>>>>>Class cVersionInfo is a cObject
9728>>>>>    Procedure Construct_Object
9730>>>>>        Forward Send Construct_Object
9732>>>>>        
9732>>>>>        
9732>>>>>        Property Integer piVersionMajor
9733>>>>>        Property Integer piVersionMinor
9734>>>>>        Property Integer piVersionRelease
9735>>>>>        Property Integer piVersionBuild
9736>>>>>        
9736>>>>>        Property Boolean pbIncluded
9737>>>>>        Property Boolean pbSpecialBuild
9738>>>>>        Property Boolean pbPrivateBuild
9739>>>>>        
9739>>>>>    End_Procedure
9740>>>>>    
9740>>>>>    Procedure DoCreate WString sFileName
9742>>>>>        DWord dwHandle
9742>>>>>        Integer iInfoSize iVerSize iSuccess iVersion iVoid iFlags
9742>>>>>        WString sData
9742>>>>>        tWinVs_FixedFileInfo VsFixedFileInfo
9742>>>>>        tWinVs_FixedFileInfo VsFixedFileInfo
9742>>>>>        WString sSubBlock
9742>>>>>        Pointer pVsFixedFileInfo
9742>>>>>        
9742>>>>>        Move 0 to pVsFixedFileInfo
9743>>>>>        Move 0 to dwHandle
9744>>>>>        Move 0 to iVerSize
9745>>>>>        
9745>>>>>        Move (GetFileVersionInfoSizeW(AddressOf(sFilename), AddressOf(dwHandle))) to iInfoSize
9746>>>>>        Set pbIncluded to (iInfoSize <>0)
9747>>>>>        
9747>>>>>        If (pbIncluded(Self)) Begin
9749>>>>>            Move (Repeat(Character(0), iInfoSize)) to sData
9750>>>>>            Move (GetFileVersionInfoW(AddressOf(sFilename), 0, iInfoSize, AddressOf(sData))) to iSuccess
9751>>>>>            
9751>>>>>            If (iSuccess <>0) Begin
9753>>>>>                Move "\" to sSubBlock
9754>>>>>                If (VerQueryValueW(AddressOf(sData), AddressOf(sSubBlock), AddressOf(pVsFixedFileInfo), AddressOf(iVerSize))) Begin
9756>>>>>                    Move (memcopy(AddressOf(VsFixedFileInfo), pVsFixedFileInfo, iVerSize)) to iVoid // copy the structure
9757>>>>>                    
9757>>>>>                    Move VsFixedFileInfo.dwFileVersionMS to iVersion
9758>>>>>                    Set piVersionMajor to (Hi(iVersion))
9759>>>>>                    Set piVersionMinor to (Low(iVersion))
9760>>>>>                    
9760>>>>>                    Move VsFixedFileInfo.dwFileVersionLS to iVersion
9761>>>>>                    Set piVersionRelease to (Hi(iVersion))
9762>>>>>                    Set piVersionBuild   to (Low(iVersion))
9763>>>>>                    
9763>>>>>                    Move VsFixedFileInfo.dwFileFlags to iFlags
9764>>>>>                    Set pbSpecialBuild    to (iFlags iand VS_FF_SPECIALBUILD)
9765>>>>>                    Set pbPrivateBuild    to (iFlags iand VS_FF_PRIVATEBUILD)
9766>>>>>                End
9766>>>>>>
9766>>>>>            End
9766>>>>>>
9766>>>>>            
9766>>>>>        End
9766>>>>>>
9766>>>>>    End_Procedure
9767>>>>>    
9767>>>>>End_Class
9768>>>Use GlobalFunctionsProcedures.pkg
9768>>>Use tWinStructs.pkg
9768>>>Use HelpSystemConstants.pkg // constants used by help system (not used by web)
9768>>>
9768>>>Register_Function phoWorkspace Returns Handle
9768>>>Register_Function phoCommandLine Returns Handle
9768>>>Register_Function pbEnterKeyAsTabKey Returns Boolean
9768>>>Register_Function GetApplicationName Returns String
9768>>>Register_Function GetApplicationFileName Returns String
9768>>>
9768>>>Register_Function Statusbar_State Returns Integer
9768>>>Register_Function Toolbar_State Returns Integer
9768>>>Register_Procedure Set Statusbar_State
9768>>>Register_Procedure Set Toolbar_State
9768>>>
9768>>>
9768>>>Class cApplication is a cObject
9769>>>    Procedure Construct_Object
9771>>>        Forward Send Construct_Object
9773>>>        
9773>>>        Move Self to ghoApplication
9774>>>        
9774>>>        Property Handle phoVersionInfo
9775>>>        Property Handle phoWorkspace
9776>>>        Property Handle phoCommandLine
9777>>>        Property Handle phoMainPanel       // main panel will set this for us.
9778>>>        Property String psHelpFile         // type of file is determined by peHelpType
9779>>>        Property Integer peHelpType htWinHelp // htNoHelp htHtmlHelp htWinHelp
9780>>>        
9780>>>        Property String psCompany "Data Access Worldwide"
9781>>>        Property String psProduct "DataFlex Applications"
9782>>>        Property String psVersion C_DFVersion
9783>>>        Property String psProgram (Module_Name(desktop))
9784>>>        
9784>>>        // set to '' to stop the auto open workspace behavior
9784>>>        Property String psAutoOpenWorkspace 'Config.ws'
9785>>>        
9785>>>        
9785>>>        Property Boolean pbPreserveEnvironment True
9786>>>        
9786>>>        Object oCommandLine is a cCommandLine
9788>>>            Delegate Set phoCommandLine to Self
9790>>>        End_Object
9791>>>        
9791>>>        Object oWorkspace is a cWorkspace
9793>>>            Delegate Set phoWorkspace to Self
9795>>>        End_Object
9796>>>        
9796>>>        Object oVersionInfo is a cVersionInfo
9798>>>            Delegate Set phoVersionInfo to Self
9800>>>            Send DoCreate (GetApplicationFileName(parent(Self)))
9801>>>        End_Object
9802>>>        
9802>>>        Set pbUseWindowsFont to True
9803>>>        
9803>>>    End_Procedure
9804>>>    
9804>>>    Procedure Destroy_Object
9806>>>        If (ghoApplication=Self) Begin
9808>>>            Move 0 to ghoApplication
9809>>>        End
9809>>>>
9809>>>        Forward Send Destroy_Object
9811>>>    End_Procedure
9812>>>    
9812>>>    // Determines if the Enter key should act like the Tab key (and send msg_Next)
9812>>>    // The use of a global variable, gbKEnterNext, makes this an application-wide property
9812>>>    Procedure Set pbEnterKeyAsTabKey Boolean bNext
9814>>>        Move bNext to gbKEnterNext
9815>>>    End_Procedure
9816>>>    
9816>>>    Function pbEnterKeyAsTabKey Returns Boolean
9818>>>        Function_Return gbKEnterNext
9819>>>    End_Function
9820>>>    
9820>>>    Procedure DoLoadEnvironment Handle hoContainer Boolean bProgram
9822>>>// not used with webapp
9822>>>        Handle hoRegistry hoCommandBars
9822>>>        Handle hMonitor
9822>>>        Integer iError cxy
9822>>>        tWinWindowPlacement WindowPlacement
9822>>>        tWinWindowPlacement WindowPlacement
9822>>>        String sKey
9822>>>        Boolean bSuccess
9822>>>        String sObjectName
9822>>>        
9822>>>        If (pbPreserveEnvironment(Self)) Begin
9824>>>            Get Create U_cRegistry to hoRegistry
9825>>>            Set pfAccessRights of hoRegistry to KEY_READ
9826>>>            
9826>>>            Get RegistryKeyString to sKey
9827>>>            
9827>>>            If (bProgram = False) Begin
9829>>>                Move (sKey +"\WINDOWS") to sKey
9830>>>                Get Object_Label of hoContainer to sObjectName  // just get the local name
9831>>>                Move (sKey +"\" +sObjectName) to sKey
9832>>>            End
9832>>>>
9832>>>            Else ;                Move (sKey + "\Preferences") to sKey
9834>>>            
9834>>>            Get OpenKey of hoRegistry sKey to bSuccess
9835>>>            
9835>>>            If bSuccess Begin
9837>>>                If (ValueExists(hoRegistry, 'Placement')) Begin
9839>>>                    Get ReadBinary of hoRegistry "Placement" (AddressOf(WindowPlacement)) (SizeOfType(tWinWindowPlacement)) to bSuccess
9840>>>                    If bSuccess Begin
9842>>>                        // Do not restore size if the window is not resizable
9842>>>                        If (Border_Style(hoContainer) <> BORDER_THICK) Begin
9844>>>                            // restore always works with outer size
9844>>>                            Get GuiWindowSize     of hoContainer to cxy
9845>>>                            Move (WindowPlacement.NormalPosition.left + Low(cxy)) to WindowPlacement.NormalPosition.right
9846>>>                            Move (WindowPlacement.NormalPosition.top + Hi(cxy)) to WindowPlacement.NormalPosition.bottom
9847>>>                        End
9847>>>>
9847>>>                        
9847>>>                        // Test that the main window's placement location will appear on some connected monitor. If none
9847>>>                        // of the main window is visible then set the location to 0,0 and adjust the size....
9847>>>                        If (bProgram) Begin
9849>>>                            // Test the top left point
9849>>>                            Move (MonitorFromPoint(WindowPlacement.NormalPosition.left, WindowPlacement.NormalPosition.top, MONITOR_DEFAULTONNULL)) to hMonitor
9850>>>                            
9850>>>                            If (hMonitor = 0) Begin
9852>>>                                // test the bottom right point
9852>>>                                Move (MonitorFromPoint(WindowPlacement.NormalPosition.right, WindowPlacement.NormalPosition.bottom, MONITOR_DEFAULTONNULL)) to hMonitor
9853>>>                            End
9853>>>>
9853>>>                            
9853>>>                            // hMonitor = 0 means that the window location is not in any current monitor (probably the monitor layout has changed)
9853>>>                            // or that the window begins and ends outside all monitors (even though it may span across some monitor). We will adjust!
9853>>>                            If (hMonitor = 0) Begin
9855>>>                                Send ResetWindowPos (&WindowPlacement.NormalPosition)
9856>>>                            End
9856>>>>
9856>>>                        End
9856>>>>
9856>>>                        
9856>>>                        // Set the placement
9856>>>                        Move (SetWindowPlacement(Window_Handle(hoContainer), AddressOf(WindowPlacement))) to bSuccess
9857>>>                    End
9857>>>>
9857>>>                End
9857>>>>
9857>>>                If bProgram Begin
9859>>>                    Get phoCommandBars of hoContainer to hoCommandBars
9860>>>                    If not hoCommandBars Begin
9862>>>                        If (ValueExists(hoRegistry, 'IsStatusBarVisible')) ;                            Set Statusbar_State of hoContainer to (ReadDword(hoRegistry, 'IsStatusBarVisible'))
9865>>>                        If (ValueExists(hoRegistry, 'IsToolBarVisible'))   ;                            Set Toolbar_State   of hoContainer to (ReadDword(hoRegistry, 'IsToolBarVisible'))
9868>>>                    End
9868>>>>
9868>>>                End
9868>>>>
9868>>>                
9868>>>                Send CloseKey of hoRegistry
9869>>>            End
9869>>>>
9869>>>            
9869>>>            Send Destroy of hoRegistry
9870>>>        End
9870>>>>
9870>>>    End_Procedure
9871>>>    
9871>>>    Procedure DoSaveEnvironment Handle hoContainer Boolean bProgram
9873>>>// not used with webapp
9873>>>        Handle hoRegistry
9873>>>        Integer iError
9873>>>        tWinWindowPlacement WindowPlacement
9873>>>        tWinWindowPlacement WindowPlacement
9873>>>        String sKey
9873>>>        Boolean bSuccess
9873>>>        Integer eShowCmd
9873>>>        String sObjectName
9873>>>        
9873>>>        If (pbPreserveEnvironment(Self)) Begin
9875>>>            Get Create U_cRegistry to hoRegistry
9876>>>            Get RegistryKeyString to sKey
9877>>>            
9877>>>            If (bProgram = False) Begin
9879>>>                Move (sKey +"\WINDOWS") to sKey
9880>>>                Get Object_Label of hoContainer to sObjectName  // just get the local name
9881>>>                Move (sKey +"\" +sObjectName) to sKey
9882>>>            End
9882>>>>
9882>>>            Else ;                Move (sKey +"\Preferences") to sKey
9884>>>            
9884>>>            Get CreateKey of hoRegistry sKey to iError
9885>>>            If (iError = 0) Begin
9887>>>                Move (SizeOfType(tWinWindowPlacement)) to WindowPlacement.length
9888>>>                Move (GetWindowPlacement(Window_Handle(hoContainer), AddressOf(WindowPlacement))) to bSuccess
9889>>>                If bSuccess Begin
9891>>>                    // if minimized, assume restored, as we don't want to restart minimized!
9891>>>                    If (WindowPlacement.showCmd = SW_SHOWMINIMIZED) Begin
9893>>>                        Move SW_SHOWNORMAL to WindowPlacement.showCmd
9894>>>                    End
9894>>>>
9894>>>                    Send WriteBinary of hoRegistry "Placement" (AddressOf(WindowPlacement)) WindowPlacement.length
9895>>>                End
9895>>>>
9895>>>                
9895>>>                If bProgram Begin
9897>>>                    Send WriteInteger of hoRegistry 'IsStatusBarVisible' (Statusbar_State(hoContainer))
9898>>>                    Send WriteInteger of hoRegistry 'IsToolBarVisible'   (Toolbar_State(hoContainer))
9899>>>                End
9899>>>>
9899>>>                
9899>>>                
9899>>>                Send CloseKey of hoRegistry
9900>>>            End
9900>>>>
9900>>>            
9900>>>            Send Destroy of hoRegistry
9901>>>        End
9901>>>>
9901>>>    End_Procedure
9902>>>    
9902>>>    
9902>>>    Procedure ResetWindowPos tWinRect ByRef WindowPos
9904>>>        Integer ixySize ixSize iySize
9904>>>        Integer ixOffset iyOffset
9904>>>        
9904>>>        // first calculate the offset needed to move onto the main monitor at 0,0
9904>>>        Move (0 - WindowPos.left) to ixOffset
9905>>>        Move (0 - WindowPos.top) to iyOffset
9906>>>        
9906>>>        Move 0 to WindowPos.left
9907>>>        Move 0 to WindowPos.top
9908>>>        
9908>>>        Move (WindowPos.right + ixOffset) to WindowPos.right
9909>>>        Move (WindowPos.bottom + iyOffset) to WindowPos.bottom
9910>>>        
9910>>>        // also make sure that the size of the window is <= the size of the main monitor
9910>>>        Move (GUIScreen_Size(1)) to ixySize    // parameter of 1 means return "available" screen size
9911>>>        Move (low(ixySize))      to ixSize
9912>>>        Move (hi(ixySize))       to iySize
9913>>>        
9913>>>        Move (ixSize min WindowPos.right) to WindowPos.right
9914>>>        Move (iySize min WindowPos.bottom) to WindowPos.bottom
9915>>>    End_Procedure
9916>>>    
9916>>>    
9916>>>    Function RegistryKeyString Returns String
9918>>>        String sCompany sProduct sVersion sProgram
9918>>>        
9918>>>        Get psCompany to sCompany
9919>>>        Get psProduct to sProduct
9920>>>        Get psVersion to sVersion
9921>>>        Get psProgram to sProgram
9922>>>        
9922>>>        If (sCompany = "") ;            Move "Data Access Worldwide" to sCompany
9925>>>        If (sProduct = "") ;            Move "DataFlex Applications" to sProduct
9928>>>        If (sVersion = "") ;            Move C_DFVersion             to sVersion
9931>>>        If (sProgram ="") ;            Move (Module_Name(desktop))   to sProgram
9934>>>        
9934>>>        Function_Return ("SOFTWARE\" +sCompany +"\" +sProduct +"\" +sVersion +"\" +sProgram)
9935>>>    End_Function
9936>>>    
9936>>>    Procedure WriteString String sSubKey String sValueName String sValueData
9938>>>        String sKey
9938>>>        Handle hoRegistry
9938>>>        Integer iError
9938>>>        
9938>>>        Get Create U_cRegistry to hoRegistry
9939>>>        Get RegistryKeyString to sKey
9940>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9943>>>        Get CreateKey of hoRegistry sKey to iError
9944>>>        If (iError = 0) Begin
9946>>>            Send WriteString of hoRegistry sValueName sValueData
9947>>>            Send CloseKey of hoRegistry
9948>>>        End
9948>>>>
9948>>>        
9948>>>        Send Destroy of hoRegistry
9949>>>    End_Procedure
9950>>>    
9950>>>    Procedure WriteInteger String sSubKey String sValueName Integer iValueData
9952>>>        String sKey
9952>>>        Handle hoRegistry
9952>>>        Integer iError
9952>>>        
9952>>>        Get Create U_cRegistry to hoRegistry
9953>>>        Get RegistryKeyString to sKey
9954>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9957>>>        Get CreateKey of hoRegistry sKey to iError
9958>>>        If (iError = 0) Begin
9960>>>            Send WriteInteger of hoRegistry sValueName iValueData
9961>>>            Send CloseKey of hoRegistry
9962>>>        End
9962>>>>
9962>>>        
9962>>>        Send Destroy of hoRegistry
9963>>>    End_Procedure
9964>>>    
9964>>>    // WriteDword is obsolete. Please use WriteInteger or WriteUInt, depending on whether you use a signed or unsigned value.
9964>>>    Procedure WriteDword String sSubKey String sValueName Integer iValueData
9966>>>        Send WriteInteger of Self sSubKey sValueName iValueData 
9967>>>    End_Procedure
9968>>>    
9968>>>    Procedure WriteUInteger String sSubKey String sValueName UInteger uValueData
9970>>>        String sKey
9970>>>        Handle hoRegistry
9970>>>        Integer iError
9970>>>        
9970>>>        Get Create U_cRegistry to hoRegistry
9971>>>        Get RegistryKeyString to sKey
9972>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9975>>>        Get CreateKey of hoRegistry sKey to iError
9976>>>        If (iError = 0) Begin
9978>>>            Send WriteUInt of hoRegistry sValueName uValueData
9979>>>            Send CloseKey of hoRegistry
9980>>>        End
9980>>>>
9980>>>        
9980>>>        Send Destroy of hoRegistry
9981>>>    End_Procedure
9982>>>
9982>>>    Procedure WriteBinary String sSubKey String sValueName Pointer pValueData Integer iDataLength
9984>>>        String sKey
9984>>>        Handle hoRegistry
9984>>>        Integer iError
9984>>>        
9984>>>        Get Create U_cRegistry to hoRegistry
9985>>>        Get RegistryKeyString to sKey
9986>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9989>>>        Get CreateKey of hoRegistry sKey to iError
9990>>>        If (iError = 0) Begin
9992>>>            Send WriteBinary of hoRegistry sValueName pValueData iDataLength
9993>>>            Send CloseKey of hoRegistry
9994>>>        End
9994>>>>
9994>>>        
9994>>>        Send Destroy of hoRegistry
9995>>>    End_Procedure
9996>>>    
9996>>>    // returns true if both sub-key and value exists.
9996>>>    Function ValueExists String sSubKey String sValueName Returns Boolean
9998>>>        String sKey
9998>>>        Handle hoRegistry
9998>>>        Boolean bOK
9998>>>        Get Create U_cRegistry to hoRegistry
9999>>>        Get RegistryKeyString to sKey
10000>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
10003>>>        Get OpenKey of hoRegistry sKey to bOk
10004>>>        If (bOK) Begin
10006>>>            Move (ValueExists(hoRegistry, sValueName)) to bOk
10007>>>            Send CloseKey of hoRegistry
10008>>>        End
10008>>>>
10008>>>        Send Destroy of hoRegistry
10009>>>        Function_Return bOk
10010>>>    End_Function
10011>>>    
10011>>>    Function ReadString String sSubKey String sValueName String sDefault Returns String
10013>>>        String sKey sData
10013>>>        Handle hoRegistry
10013>>>        Boolean bOK
10013>>>        
10013>>>        Move sDefault to sData
10014>>>        Get Create U_cRegistry to hoRegistry
10015>>>        Get RegistryKeyString to sKey
10016>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
10019>>>        Get OpenKey of hoRegistry sKey to bOk
10020>>>        If (bOK) Begin
10022>>>            If (ValueExists(hoRegistry, sValueName)) ;                Get ReadString of hoRegistry sValueName to sData
10025>>>            Send CloseKey of hoRegistry
10026>>>        End
10026>>>>
10026>>>        
10026>>>        Send Destroy of hoRegistry
10027>>>        Function_Return sData
10028>>>    End_Function
10029>>>    
10029>>>    Function ReadInteger String sSubKey String sValueName Integer iDefault Returns Integer
10031>>>        String sKey
10031>>>        Integer iData
10031>>>        Handle hoRegistry
10031>>>        Boolean bOK
10031>>>        
10031>>>        Move iDefault to iData
10032>>>        Get Create U_cRegistry to hoRegistry
10033>>>        Get RegistryKeyString to sKey
10034>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
10037>>>        Get OpenKey of hoRegistry sKey to bOk
10038>>>        If bOK Begin
10040>>>            If (ValueExists(hoRegistry, sValueName)) ;                Get ReadInteger of hoRegistry sValueName to iData
10043>>>            Send CloseKey of hoRegistry
10044>>>        End
10044>>>>
10044>>>        
10044>>>        Send Destroy of hoRegistry
10045>>>        Function_Return iData
10046>>>    End_Function
10047>>>
10047>>>    // ReadDword is obsolete. Please use ReadInteger or ReadUInt, depending on whether you expect a signed or unsigned value.
10047>>>    Function ReadDword String sSubKey String sValueName Integer iDefault Returns Integer
10049>>>        Function_Return (ReadInteger(Self, sSubKey, sValueName, iDefault))
10050>>>    End_Function
10051>>>    
10051>>>    Function ReadUInt String sSubKey String sValueName UInteger uDefault Returns UInteger
10053>>>        String sKey
10053>>>        UInteger uData
10053>>>        Handle hoRegistry
10053>>>        Boolean bOK
10053>>>        
10053>>>        Move uDefault to uData
10054>>>        Get Create U_cRegistry to hoRegistry
10055>>>        Get RegistryKeyString to sKey
10056>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
10059>>>        Get OpenKey of hoRegistry sKey to bOk
10060>>>        If bOK Begin
10062>>>            If (ValueExists(hoRegistry, sValueName)) ;                Get ReadUInt of hoRegistry sValueName to uData
10065>>>            Send CloseKey of hoRegistry
10066>>>        End
10066>>>>
10066>>>        
10066>>>        Send Destroy of hoRegistry
10067>>>        Function_Return uData
10068>>>    End_Function
10069>>>    
10069>>>    Function ReadBinary String sSubKey String sValueName Pointer pValueData Integer iDataLength Returns Boolean
10071>>>        String sKey
10071>>>        Handle hoRegistry
10071>>>        Boolean bOK bSuccess
10071>>>        
10071>>>        Get Create U_cRegistry to hoRegistry
10072>>>        Get RegistryKeyString to sKey
10073>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
10076>>>        Get OpenKey of hoRegistry sKey to bOk
10077>>>        If bOK Begin
10079>>>            Get ReadBinary of hoRegistry sValueName pValueData iDataLength to bSuccess
10080>>>            Send CloseKey of hoRegistry
10081>>>        End
10081>>>>
10081>>>        
10081>>>        Send Destroy of hoRegistry
10082>>>        Function_Return bSuccess
10083>>>    End_Function
10084>>>    
10084>>>    Procedure DoOpenWorkspace String sWorkspace
10086>>>        // Tries to open in this order:
10086>>>        // 1) if absolute path, use that; otherwise
10086>>>        // 2) try to open in the path of the EXE; otherwise
10086>>>        // 3) load it via the Registered list
10086>>>        
10086>>>        Integer eOpened
10086>>>        String sError sWSFile
10086>>>        Handle hoWorkspace
10086>>>        Boolean bChangingWorkspace
10086>>>        
10086>>>        // As soon as an open is attempted, the application's object psAutoOpenWorkspace property
10086>>>        // is cleared. This way any attempt to manually open a workspace during its construction,
10086>>>        // which includes OnCreate, will stop the object from attempting to automatically open the
10086>>>        // workspace. This was added to make psAutoOpenWorkspace compatible with older applications.
10086>>>        // Typically these application will open a workspace in OnCreate. If this happens we assume
10086>>>        // that there should be no automatic opening of a worskpace.
10086>>>        Set psAutoOpenWorkspace to ""
10087>>>        
10087>>>        Get phoWorkspace to hoWorkspace
10088>>>        
10088>>>        Get pbWorkspaceOpened of hoWorkspace to bChangingWorkspace
10089>>>        If (bChangingWorkspace and ghoConnection) Begin
10091>>>            Send AutoDisconnect
10092>>>        End
10092>>>>
10092>>>        
10092>>>        Get OpenWorkspaceFile of hoWorkspace sWorkspace to eOpened
10093>>>        If (eOpened = wsWorkspaceFileNotFound) Begin
10095>>>            If (IsRegistered(hoWorkspace, sWorkspace) =True) Begin
10097>>>                Get OpenWorkspace of hoWorkspace sWorkspace to eOpened
10098>>>            End
10098>>>>
10098>>>        End
10098>>>>
10098>>>        If (eOpened <> wsWorkspaceOpened) Begin
10100>>>            Get OpenWorkspaceErrorMessage of hoWorkspace eOpened to sError
10101>>>            Get psWorkspaceWSFile of hoWorkspace to sWSFile
10102>>>            Error DFERR_CAPPLICATION (SFormat(C_$TheProgramCannotRun, sWorkspace) + ":\n\n" + If(sWSFile<>"",sWSfile+"\n\n","") +sError)
10103>>>>
10103>>>            Abort
10104>>>>
10104>>>        End
10104>>>>
10104>>>        Else Begin
10105>>>            Send AutoConnect
10106>>>            Send OnWorkspaceOpened
10107>>>        End
10107>>>>
10107>>>    End_Procedure
10108>>>    
10108>>>    Procedure AutoConnect
10110>>>        If (ghoConnection) Begin
10112>>>            Send AutoConnect of ghoConnection
10113>>>        End
10113>>>>
10113>>>    End_Procedure
10114>>>    
10114>>>    Procedure AutoDisconnect
10116>>>        If (ghoConnection) Begin
10118>>>            Send AutoDisconnect of ghoConnection
10119>>>        End
10119>>>>
10119>>>    End_Procedure
10120>>>    
10120>>>    // send after a workspace is successfully opened and connected
10120>>>    Procedure OnWorkspaceOpened
10122>>>    End_Procedure
10123>>>    
10123>>>    Procedure OnCreate
10125>>>        // Event called when the Application object is ready to be used
10125>>>        // to open a Workspace, etc.
10125>>>    End_Procedure
10126>>>    
10126>>>    Procedure End_Construct_Object
10128>>>        String sName
10128>>>        Forward Send End_Construct_Object
10130>>>        Send OnCreate
10131>>>        // note that psAutoOpenWorkspace will get cleared of OnCreate attempts to open a workspace
10131>>>        Get psAutoOpenWorkspace to sName
10132>>>        If (sName<>"") Begin
10134>>>            Send DoOpenWorkspace sName
10135>>>        End
10135>>>>
10135>>>    End_Procedure
10136>>>    
10136>>>    Function GetApplicationFileName Returns String
10138>>>        // Returns the filename from Windows
10138>>>        Integer iNumChars
10138>>>        WString wFilename
10138>>>                
10138>>>        Move (Repeat(Character(0), 1024)) to wFilename
10139>>>        Move (GetModuleFileNameW(0, AddressOf(wFilename), 1024)) to iNumChars
10140>>>        
10140>>>        Function_Return (CString(wFilename))
10141>>>    End_Function
10142>>>    
10142>>>    Function GetApplicationPath Returns String
10144>>>        // Returns the path of the Application (no trailing "\")
10144>>>        WString wApplicationFileName 
10144>>>        String sPath
10144>>>        Boolean bRemoved
10144>>>        
10144>>>        Get GetApplicationFileName  to wApplicationFileName
10145>>>        Move (PathRemoveFileSpecW(AddressOf(wApplicationFileName))) to bRemoved
10146>>>        Move (CString(wApplicationFileName)) to sPath
10147>>>        
10147>>>        If (Right(sPath, 1) ="\") ;            Move (Left(sPath, Length(sPath) -1)) to sPath
10150>>>        Function_Return sPath
10151>>>    End_Function
10152>>>    
10152>>>    Function GetApplicationName Returns String
10154>>>        // Returns the name of the Application (without its Path or Extension)
10154>>>        String sApplicationFileName 
10154>>>        WString wApplicationName
10154>>>        Boolean bRemoved
10154>>>        Integer iVoid
10154>>>        
10154>>>        Get GetApplicationFileName to sApplicationFileName
10155>>>        Move (ExtractFileName(sApplicationFileName)) to wApplicationName
10156>>>        Move (PathRemoveExtensionW(AddressOf(wApplicationName))) to iVoid
10157>>>        Function_Return (CString(wApplicationName))
10158>>>    End_Function
10159>>>    
10159>>>    Function DFRootPath Returns String
10161>>>        String sRoot
10161>>>        Get_Profile_String "Defaults" "VDFRootDir" to sRoot
10164>>>        // Ensure it does not contain a trailing "\"
10164>>>        If (Right(sRoot,1) = "\") Begin
10166>>>            Move (Left(sRoot, Length(sRoot)-1)) to sRoot
10167>>>        End
10167>>>>
10167>>>        Function_Return sRoot
10168>>>    End_Function
10169>>>    
10169>>>    Function DFBinPath Returns String
10171>>>        String sRoot
10171>>>        Get DFRootPath to sRoot
10172>>>        If (sRoot<>"") Begin
10174>>>            Move (sRoot+"\bin") to sRoot
10175>>>        End
10175>>>>
10175>>>        Else Begin
10176>>>            // if the root from the registry (vdfrootdir) is empty, we will assume that the
10176>>>            // bin path must be the same as the application path.
10176>>>            Get GetApplicationPath to sRoot
10177>>>        End
10177>>>>
10177>>>        Function_Return sRoot
10178>>>    End_Function
10179>>>    
10179>>>    // this just directs to the desktop property. If you are using an application object you are
10179>>>    // encouraged to set this here.
10179>>>    Procedure Set pbUseWindowsFont Boolean bUseWindowsFont
10181>>>        Set pbUseWindowsFont of Desktop to bUseWindowsFont
10182>>>    End_Procedure
10183>>>    
10183>>>    Function pbUseWindowsFont Returns Boolean
10185>>>        Boolean bUseWindowsFont
10185>>>        Get pbUseWindowsFont of Desktop to bUseWindowsFont
10186>>>        Function_Return bUseWindowsFont
10187>>>    End_Function
10188>>>    
10188>>>    // this just directs to the desktop property. If you are using an application object you are
10188>>>    // encouraged to set this here.
10188>>>    Procedure Set pbLegacyDialogRatio Boolean bLegacy
10190>>>        Set pbLegacyDialogRatio of Desktop to bLegacy
10191>>>    End_Procedure
10192>>>    
10192>>>    Function pbLegacyDialogRatio Returns Boolean
10194>>>        Boolean bLegacy
10194>>>        Get pbLegacyDialogRatio of Desktop to bLegacy
10195>>>        Function_Return bLegacy
10196>>>    End_Function
10197>>>End_Class
10198>>>
10198>>>
10198>Use Dferror.pkg                 // Error handling class and object
Including file: Dferror.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dferror.pkg)
10198>>>Use cWindowsErrorHandler.pkg
Including file: cWindowsErrorHandler.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cWindowsErrorHandler.pkg)
10198>>>>>Use cBaseErrorHandler.pkg
Including file: cBaseErrorHandler.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cBaseErrorHandler.pkg)
10198>>>>>>>Use errornum.inc
10198>>>>>>>Use cTrappedErrors.pkg
Including file: cTrappedErrors.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cTrappedErrors.pkg)
10198>>>>>>>>>Define MAX_ERROR_NUMBER for 32766
10198>>>>>>>>>
10198>>>>>>>>>// This array stores the set of trapped errors as toggled ranges starting
10198>>>>>>>>>// with the errors that are trapped. The array should always contain 0 and
10198>>>>>>>>>// MAX_ERROR_NUMBER + 1, which are the limits. If an array contained the
10198>>>>>>>>>// following items...
10198>>>>>>>>>//
10198>>>>>>>>>// { 0, 5, 10, MAX_ERROR_NUMBER + 1 }.
10198>>>>>>>>>//
10198>>>>>>>>>// This would mean that errors 1 - 4 are trapped, 5 - 9 are ignored, and
10198>>>>>>>>>// 10 through the rest are trapped.
10198>>>>>>>>>//
10198>>>>>>>>>Class cTrappedErrors is an array
10199>>>>>>>>>    Procedure Construct_Object
10201>>>>>>>>>        Forward Send Construct_Object
10203>>>>>>>>>        
10203>>>>>>>>>        Send initArray
10204>>>>>>>>>    End_Procedure
10205>>>>>>>>>    
10205>>>>>>>>>    // Find largest error LE targetError. Assumes array is sorted.
10205>>>>>>>>>    Function findErrorLE Integer targetError Returns Integer
10207>>>>>>>>>        
10207>>>>>>>>>        Integer lowIndex hiIndex midIndex currError
10207>>>>>>>>>        
10207>>>>>>>>>        // If error is outside of boudary conditions, use
10207>>>>>>>>>        // value of closest valid error# instead.
10207>>>>>>>>>        If (targetError <= 0);            Move 1 to targetError
10210>>>>>>>>>        Else If (targetError >= MAX_ERROR_NUMBER) ;            Move ( MAX_ERROR_NUMBER - 1 ) to targetError
10214>>>>>>>>>        
10214>>>>>>>>>        Move 0 to lowIndex
10215>>>>>>>>>        Move ( item_count( Self ) - 1 ) to hiIndex
10216>>>>>>>>>        
10216>>>>>>>>>        // midIndex will contain the closest error LE to target upon exit.
10216>>>>>>>>>        Repeat
10216>>>>>>>>>>
10216>>>>>>>>>            
10216>>>>>>>>>            Move ( ( lowIndex + hiIndex ) / 2 ) to midIndex
10217>>>>>>>>>            Move ( integer_value( Self, midIndex ) )  to currError
10218>>>>>>>>>            
10218>>>>>>>>>            // midIndex is targetIndex if a match occurs
10218>>>>>>>>>            If (currError = targetError) ;                Function_Return midIndex
10221>>>>>>>>>            
10221>>>>>>>>>            // We are either on it or just below it.
10221>>>>>>>>>            If ( lowIndex = midIndex ) Begin
10223>>>>>>>>>                
10223>>>>>>>>>                If ( integer_value( Self, hiIndex ) le targetError ) ;                    Move hiIndex to midIndex
10226>>>>>>>>>                
10226>>>>>>>>>                Function_Return midIndex
10227>>>>>>>>>                
10227>>>>>>>>>            End
10227>>>>>>>>>>
10227>>>>>>>>>            
10227>>>>>>>>>            // No match, so move the boundaries.
10227>>>>>>>>>            If (currError > targetError) ;                Move ( midIndex - 1 ) to hiIndex
10230>>>>>>>>>            Else ;                Move midIndex to lowIndex
10232>>>>>>>>>            
10232>>>>>>>>>        Until lowIndex gt hiIndex
10234>>>>>>>>>        
10234>>>>>>>>>        Function_Return midIndex
10235>>>>>>>>>        
10235>>>>>>>>>    End_Function
10236>>>>>>>>>    
10236>>>>>>>>>    // Boundaries of the table are assumed to hold error limits.
10236>>>>>>>>>    Procedure initArray
10238>>>>>>>>>        Send delete_data
10239>>>>>>>>>        Set array_value  0 to 0
10240>>>>>>>>>        Set array_value  1 to ( MAX_ERROR_NUMBER + 1 )
10241>>>>>>>>>    End_Procedure
10242>>>>>>>>>    
10242>>>>>>>>>    // Return 1 if Error is trapped, 0 otherwise.
10242>>>>>>>>>    Function IsTrapped Integer Error# Returns Integer
10244>>>>>>>>>        Function_Return ( not ( mod( findErrorLE( Self, Error# ), 2 ) ) )
10245>>>>>>>>>    End_Function
10246>>>>>>>>>    
10246>>>>>>>>>    // Add the error as long as it doesn't violate boundary conditions.
10246>>>>>>>>>    // This routine leaves the array unsorted.
10246>>>>>>>>>    Procedure addError Integer Error#
10248>>>>>>>>>        If ( ( Error# lt MAX_ERROR_NUMBER ) and ( Error# gt 0 ) ) ;            Set array_value  ( item_count( Self ) ) to ( Integer( Error# ) )
10251>>>>>>>>>    End_Procedure
10252>>>>>>>>>    
10252>>>>>>>>>    // Set error to flagged state.
10252>>>>>>>>>    Procedure handleError Integer Error# Integer trapFlag
10254>>>>>>>>>        
10254>>>>>>>>>        Integer prevErrIndex prevErrFlag prevErrValue nextErrValue
10254>>>>>>>>>        
10254>>>>>>>>>        If ( ( Error# gt MAX_ERROR_NUMBER ) or ( Error# lt 0 ) ) Begin
10256>>>>>>>>>            Error DFERR_ERROR_NUMBER_OUT_OF_RANGE
10257>>>>>>>>>>
10257>>>>>>>>>            Procedure_Return
10258>>>>>>>>>        End
10258>>>>>>>>>>
10258>>>>>>>>>        
10258>>>>>>>>>        Get findErrorLE Error# to prevErrIndex
10259>>>>>>>>>        Get isTrapped   Error# to prevErrFlag
10260>>>>>>>>>        
10260>>>>>>>>>        // if eq, Error already handled in some range.
10260>>>>>>>>>        If (PrevErrFlag <> trapFlag) Begin
10262>>>>>>>>>            
10262>>>>>>>>>            // This is kind of complicated. If we are adding an error,
10262>>>>>>>>>            // we have to account for the error already being in the
10262>>>>>>>>>            // array as well as rejoining ranges that have been previously
10262>>>>>>>>>            // split and splitting ranges when adding a new flag.
10262>>>>>>>>>            
10262>>>>>>>>>            Get integer_value  ( prevErrIndex + 1 ) to nextErrValue
10263>>>>>>>>>            Get integer_value  prevErrIndex         to prevErrValue
10264>>>>>>>>>            
10264>>>>>>>>>            // Do this first so prevErrIndex stays valid.
10264>>>>>>>>>            If (nextErrValue = ( Error# + 1 )) ;                Send delete_item ( prevErrIndex + 1 )
10267>>>>>>>>>            Else ;                Send addError ( Error# + 1 )
10269>>>>>>>>>            
10269>>>>>>>>>            If ( prevErrValue < Error# ) ;                Send addError Error#
10272>>>>>>>>>            Else ;                Send delete_item prevErrIndex
10274>>>>>>>>>        End
10274>>>>>>>>>>
10274>>>>>>>>>        Send sort_items UPWARD_DIRECTION
10275>>>>>>>>>        
10275>>>>>>>>>    End_Procedure
10276>>>>>>>>>    
10276>>>>>>>>>    // Flag error as trappable
10276>>>>>>>>>    Procedure Trap_Error Integer Error#
10278>>>>>>>>>        Send handleError Error# 1
10279>>>>>>>>>    End_Procedure
10280>>>>>>>>>    
10280>>>>>>>>>    // Flag error as non-trappable
10280>>>>>>>>>    Procedure Ignore_Error Integer Error#
10282>>>>>>>>>        Send handleError Error# 0
10283>>>>>>>>>    End_Procedure
10284>>>>>>>>>    
10284>>>>>>>>>    // Flag all errors as trappable
10284>>>>>>>>>    Procedure Trap_All
10286>>>>>>>>>        Send initArray
10287>>>>>>>>>    End_Procedure
10288>>>>>>>>>    
10288>>>>>>>>>    // Flag all errors as non-trappable
10288>>>>>>>>>    Procedure Ignore_All
10290>>>>>>>>>        Send delete_data
10291>>>>>>>>>        Set array_value 0 to 0
10292>>>>>>>>>        Set array_value 1 to 1
10293>>>>>>>>>        Set array_value 2 to ( MAX_ERROR_NUMBER + 1 )
10294>>>>>>>>>    End_Procedure
10295>>>>>>>>>End_Class
10296>>>>>>>>>
10296>>>>>>>Use LanguageText.pkg
10296>>>>>>>Use VdfBase.pkg
10296>>>>>>>
10296>>>>>>>// used by error handler and UserError to pull a caption out of the error string
10296>>>>>>>Define C_ErrorCaption for "*CAPTION*="
10296>>>>>>>
10296>>>>>>>Class cBaseErrorHandler is a cObject
10297>>>>>>>    Procedure Construct_Object
10299>>>>>>>        Forward Send Construct_Object
10301>>>>>>>        
10301>>>>>>>        Set delegation_mode to no_delegate_or_error
10302>>>>>>>        
10302>>>>>>>        // This is the caption that appears for unhandled errors dialog box
10302>>>>>>>        Property String psUnhandledErrorCaption C_$UnhandledProgramError
10303>>>>>>>        
10303>>>>>>>        // This is the caption that appears for standard user errors
10303>>>>>>>        Property String psUserErrorCaption C_$Error
10304>>>>>>>        
10304>>>>>>>        // If set false, this makes the error handler work the old way which
10304>>>>>>>        // does not use the new unhandled dialog. Only exists for compatibility reasons
10304>>>>>>>        Property Boolean pbUnhandledErrorSupport       True
10305>>>>>>>        
10305>>>>>>>        Property Boolean pbErrorProcessingState False  // Flag which is sent when error is being processed. This stops error recursion.
10306>>>>>>>        
10306>>>>>>>        Property Integer piCurrentErrorNumber     0
10307>>>>>>>        Property Integer piCurrentErrorLine        0
10308>>>>>>>        
10308>>>>>>>        Property Integer[] paUserErrors       // Collection of sorted error numbers considered to be user errors. (note, this array must remain sorted!)
10309>>>>>>>        
10309>>>>>>>        
10309>>>>>>>        Object oTrappedErrors is a cTrappedErrors
10311>>>>>>>        End_Object
10312>>>>>>>        
10312>>>>>>>        Send DefineStandardUserErrors
10313>>>>>>>        
10313>>>>>>>        Move Self to Error_Object_Id
10314>>>>>>>        Move Self to ghoErrorHandler
10315>>>>>>>    End_Procedure
10316>>>>>>>    
10316>>>>>>>    Procedure DefineStandardUserErrors
10318>>>>>>>        Integer[] aUserErrors
10319>>>>>>>        
10319>>>>>>>        // define the standard user error numbers....
10319>>>>>>>        Move 0                                     to aUserErrors[0]
10320>>>>>>>        Move DFERR_NUMBER_TOO_LARGE                to aUserErrors[1]
10321>>>>>>>        Move DFERR_WINDOW_RANGE                    to aUserErrors[2]
10322>>>>>>>        Move DFERR_ENTRY_REQUIRED                  to aUserErrors[3]
10323>>>>>>>        Move DFERR_ENTER_A_NUMBER                  to aUserErrors[4]
10324>>>>>>>        Move DFERR_BAD_ENTRY                       to aUserErrors[5]
10325>>>>>>>        Move DFERR_ENTER_VALID_DATE                to aUserErrors[6]
10326>>>>>>>        Move DFERR_NUMERIC_RANGE                   to aUserErrors[7]
10327>>>>>>>        Move DFERR_DUPLICATE_REC                   to aUserErrors[8]
10328>>>>>>>        Move DFERR_TEXT_FIELD_TOO_LONG             to aUserErrors[9]
10329>>>>>>>        Move DFERR_FIND_PRIOR_BEG_OF_FILE          to aUserErrors[10]
10330>>>>>>>        Move DFERR_FIND_PAST_END_OF_FILE           to aUserErrors[11]
10331>>>>>>>        Move DFERR_NO_REC_TO_DELETE                to aUserErrors[12]
10332>>>>>>>        Move DFERR_FIELD_NOT_INDEXED               to aUserErrors[13]
10333>>>>>>>        Move DFERR_REC_NUMBER_RANGE                to aUserErrors[14]
10334>>>>>>>        Move DFERR_ENTER_VALID_REC_ID              to aUserErrors[15]
10335>>>>>>>        Move DFERR_OPERATOR_ERROR                  to aUserErrors[16]
10336>>>>>>>        Move DFERR_CANT_CHANGE_KEY_FIELD           to aUserErrors[17]
10337>>>>>>>        Move DFERR_NO_DELETE_RELATED_RECORDS_EXIST to aUserErrors[18]
10338>>>>>>>        Move DFERR_OPERATION_NOT_ALLOWED           to aUserErrors[19]
10339>>>>>>>        Move DFERR_OPERATOR                        to aUserErrors[20]
10340>>>>>>>        Move DFERR_XML_HTTP                        to aUserErrors[21]
10341>>>>>>>        Move DFERR_CLIENT_SOAP_TRANSFER            to aUserErrors[22]
10342>>>>>>>        Move DFERR_CLIENT_SOAP_FAULT               to aUserErrors[23]
10343>>>>>>>        Move DFERR_TEXT_TOO_LARGE_FOR_FIELD        to aUserErrors[24]
10344>>>>>>>        Move DFERR_WINPRINT                        to aUserErrors[25]
10345>>>>>>>        Move DFERR_CRYSTAL_REPORT                  to aUserErrors[26]
10346>>>>>>>        Move DFERR_MAPI                            to aUserErrors[27]
10347>>>>>>>        Move DFERR_FILE_ACCESS_VIOLATION           to aUserErrors[28]
10348>>>>>>>        Move DFERR_DATAFLEX_REPORTS                to aUserErrors[29]
10349>>>>>>>        Move DFERR_CANT_REFIND_RECORD              to aUserErrors[30]
10350>>>>>>>        // WebApp Errors
10350>>>>>>>        Move DFERR_WEBAPP_ACCESS_DENIED            to aUserErrors[31]
10351>>>>>>>        // This is defined as DD_DEFAULT_ERROR_NUMBER in DataDict.pkg and is the default Field_error number of DDs.
10351>>>>>>>        Move 999                                   to aUserErrors[32]
10352>>>>>>>        // This is session timeout (we keep the old number 950 for backwards comatibility reasons)
10352>>>>>>>        Move DFERR_WEBAPP_SESSION_TIMEOUT          to aUserErrors[33]
10353>>>>>>>        // This is session timeout (we keep the old number 951 for backwards comatibility reasons)
10353>>>>>>>        Move DFERR_WEBAPP_BAD_SESSION_KEY          to aUserErrors[34]
10354>>>>>>>        Move DFERR_WEBAPP_INVALID_URL              to aUserErrors[35]
10355>>>>>>>        Move DFERR_WEBAPP_INVALID_URL_REC          to aUserErrors[36]
10356>>>>>>>        Move (SortArray(aUserErrors)) to aUserErrors
10357>>>>>>>        Set paUserErrors to aUserErrors
10358>>>>>>>    End_Procedure
10359>>>>>>>    
10359>>>>>>>    Procedure HandleError Integer iErrNum Integer iErrLine String sErrText
10361>>>>>>>        //  Stub method implemented by subclass
10361>>>>>>>    End_Procedure
10362>>>>>>>    
10362>>>>>>>    // Called by the runtime when an error occurs. Initiates the main error handling. Skips errors
10362>>>>>>>    // that are ignored and makes sure to prevent recursion by checking the error processing state.
10362>>>>>>>    Procedure Error_Report Integer iErrNum Integer iErrLine String sErrText
10364>>>>>>>        If (pbErrorProcessingState(Self)) ;            Procedure_Return
10367>>>>>>>            
10367>>>>>>>        If (not(IsTrapped(Self, iErrNum))) ;            Procedure_Return
10370>>>>>>>        
10370>>>>>>>        Set pbErrorProcessingState to True
10371>>>>>>>        Set piCurrentErrorNumber to iErrNum
10372>>>>>>>        Set piCurrentErrorLine to iErrLine
10373>>>>>>>        
10373>>>>>>>        Send HandleError iErrNum iErrLine sErrText
10374>>>>>>>        
10374>>>>>>>        Set piCurrentErrorNumber to 0
10375>>>>>>>        Set piCurrentErrorLine to 0
10376>>>>>>>        Move 0 to ghoErrorSource
10377>>>>>>>        Set pbErrorProcessingState to False
10378>>>>>>>    End_Procedure
10379>>>>>>>    
10379>>>>>>>    
10379>>>>>>>
10379>>>>>>>    
10379>>>>>>>    // Returns true if this is a user error (i.e. "find past end of file")
10379>>>>>>>    Function IsUserError Integer iError Returns Boolean
10381>>>>>>>        Integer[] aUserErrors
10382>>>>>>>        Get paUserErrors to aUserErrors
10383>>>>>>>        Function_Return (BinarySearchArray(iError, aUserErrors) <> -1)
10384>>>>>>>    End_Function
10385>>>>>>>    
10385>>>>>>>        // returns true if this is an unhandled error (i.e., not a user error
10385>>>>>>>    Function IsUnhandledError Integer iError Returns Boolean
10387>>>>>>>        Integer[] UserErrors
10388>>>>>>>        Get paUserErrors to UserErrors
10389>>>>>>>        Function_Return (SearchArray(iError,UserErrors)=-1)
10390>>>>>>>    End_Function
10391>>>>>>>    
10391>>>>>>>    Procedure AddUserError Integer iError
10393>>>>>>>        // adds a user error to the collection of defined 'user errors'
10393>>>>>>>        Integer[] aUserErrors
10394>>>>>>>        Get paUserErrors to aUserErrors
10395>>>>>>>        
10395>>>>>>>        If (BinarySearchArray(iError, aUserErrors) = -1) Begin
10397>>>>>>>            Move (InsertInArray(aUserErrors, BinarySearchInsertPos(), iError)) to aUserErrors         // Keep the array sorted. Makes searching fast, adding slower.
10398>>>>>>>            Set paUserErrors to aUserErrors
10399>>>>>>>        End
10399>>>>>>>>
10399>>>>>>>    End_Procedure
10400>>>>>>>    
10400>>>>>>>    Procedure RemoveUserError Integer iError
10402>>>>>>>        // Removes the passed error number from the set of user errors.
10402>>>>>>>        Integer iIndex
10402>>>>>>>        Integer[] aUserErrors
10403>>>>>>>        
10403>>>>>>>        Get paUserErrors to aUserErrors
10404>>>>>>>        Move (BinarySearchArray(iError, aUserErrors)) to iIndex
10405>>>>>>>        
10405>>>>>>>        If (iIndex <> -1) Begin
10407>>>>>>>            Move (RemoveFromArray(aUserErrors, iIndex)) to aUserErrors
10408>>>>>>>            Set paUserErrors to aUserErrors
10409>>>>>>>        End
10409>>>>>>>>
10409>>>>>>>    End_Procedure
10410>>>>>>>    
10410>>>>>>>    Procedure RemoveAllUserErrors
10412>>>>>>>        // Clears set of User Errors
10412>>>>>>>        Set paUserErrors to (ResizeArray(paUserErrors(Self), 0))
10413>>>>>>>    End_Procedure
10414>>>>>>>    
10414>>>>>>>    // return true if an error number is critical
10414>>>>>>>    Function IsCritical Integer iError Returns Boolean
10416>>>>>>>        Function_Return (".3.10.18.19.20.21.22.43.70.72.74.75.78.80.97.";            contains ("."+String(iError)+"."))
10417>>>>>>>    End_Function
10418>>>>>>>    
10418>>>>>>>    Procedure TrapError Integer iError
10420>>>>>>>        Send Trap_Error of oTrappedErrors iError
10421>>>>>>>    End_Procedure
10422>>>>>>>    
10422>>>>>>>    Procedure IgnoreError Integer iError
10424>>>>>>>        Send Ignore_Error of oTrappedErrors iError
10425>>>>>>>    End_Procedure
10426>>>>>>>    
10426>>>>>>>    Procedure IgnoreAllErrors
10428>>>>>>>        Send Ignore_All of oTrappedErrors
10429>>>>>>>    End_Procedure
10430>>>>>>>    
10430>>>>>>>    Procedure TrapAllErrors
10432>>>>>>>        Send Trap_All of oTrappedErrors
10433>>>>>>>    End_Procedure
10434>>>>>>>    
10434>>>>>>>    Function IsTrapped Integer iError  Returns Boolean
10436>>>>>>>        Function_Return (IsTrapped(oTrappedErrors,iError))
10437>>>>>>>    End_Function
10438>>>>>>>    
10438>>>>>>>    
10438>>>>>>>
10438>>>>>>>    
10438>>>>>>>    // Used to fetch the default error description.
10438>>>>>>>    //
10438>>>>>>>    // iError   - Error number
10438>>>>>>>    // sMessage - Additional error message
10438>>>>>>>    // Returns  - Complete error message
10438>>>>>>>    Function ErrorDescription Integer iError String sMessage Returns String
10440>>>>>>>        String sDescription
10440>>>>>>>        Boolean bAvailable
10440>>>>>>>        
10440>>>>>>>        //  Fetch system error text
10440>>>>>>>        Get Error_Text of Desktop iError to sDescription
10441>>>>>>>        Get Error_Text_Available of Desktop iError to bAvailable
10442>>>>>>>        
10442>>>>>>>        //  Trim both messages
10442>>>>>>>        Move (Trim(sDescription)) to sDescription
10443>>>>>>>        Move (Trim(sMessage)) to sMessage
10444>>>>>>>        
10444>>>>>>>        //  Append message if needed
10444>>>>>>>        If (sMessage <> "") Begin
10446>>>>>>>            If (sDescription <> "" and bAvailable) Begin
10448>>>>>>>                Move (sDescription + " " + sMessage) to sDescription
10449>>>>>>>            End
10449>>>>>>>>
10449>>>>>>>            Else Begin
10450>>>>>>>                Move sMessage to sDescription
10451>>>>>>>            End
10451>>>>>>>>
10451>>>>>>>        End
10451>>>>>>>>
10451>>>>>>>        
10451>>>>>>>        Function_Return sDescription
10452>>>>>>>    End_Function
10453>>>>>>>    
10453>>>>>>>    // Legacy names here for backwards compatibility
10453>>>>>>>    Function Error_Description Integer iError String sMessage Returns String
10455>>>>>>>        Function_Return (ErrorDescription(Self, iError, sMessage))
10456>>>>>>>    End_Function
10457>>>>>>>    
10457>>>>>>>    
10457>>>>>>>    Function Error_processing_state Returns Boolean
10459>>>>>>>        Function_Return (pbErrorProcessingState(Self))
10460>>>>>>>    End_Function
10461>>>>>>>    
10461>>>>>>>    Function Current_Error_Number Returns Integer
10463>>>>>>>        Function_Return (piCurrentErrorNumber(Self))
10464>>>>>>>    End_Function
10465>>>>>>>    
10465>>>>>>>    Procedure Set Current_Error_Number Integer iErr
10467>>>>>>>        Set piCurrentErrorNumber to iErr
10468>>>>>>>    End_Procedure
10469>>>>>>>    
10469>>>>>>>    Function Error_Line_Number Returns Integer
10471>>>>>>>        Function_Return (piCurrentErrorLine(Self))
10472>>>>>>>    End_Function
10473>>>>>>>    
10473>>>>>>>    Procedure Set Error_Line_Number Integer iLine
10475>>>>>>>        Set piCurrentErrorLine to iLine
10476>>>>>>>    End_Procedure
10477>>>>>>>    
10477>>>>>>>    Procedure Trap_Error Integer iError
10479>>>>>>>        Send TrapError iError
10480>>>>>>>    End_Procedure
10481>>>>>>>    
10481>>>>>>>    Procedure Ignore_Error Integer iError
10483>>>>>>>        Send IgnoreError iError
10484>>>>>>>    End_Procedure
10485>>>>>>>    
10485>>>>>>>    Procedure Trap_All
10487>>>>>>>        Send TrapAllErrors
10488>>>>>>>    End_Procedure
10489>>>>>>>    
10489>>>>>>>    Procedure Ignore_All
10491>>>>>>>        Send IgnoreAllErrors
10492>>>>>>>    End_Procedure
10493>>>>>>>    
10493>>>>>>>    Function Is_Critical Integer iError Returns Boolean
10495>>>>>>>        Function_Return (IsCritical(Self, iError))
10496>>>>>>>    End_Function
10497>>>>>>>End_Class
10498>>>>>>>
10498>>>>>>>Procedure UserError Global String sMessage String sCaption
10500>>>>>>>    String sCapt
10500>>>>>>>    If (Error_Object_Id=0) Begin
10502>>>>>>>        Error DFERR_PROGRAM "No Error Handler"
10503>>>>>>>>
10503>>>>>>>        Procedure_Return
10504>>>>>>>    End
10504>>>>>>>>
10504>>>>>>>    
10504>>>>>>>    // Accept not passing a caption in which case the error handler's
10504>>>>>>>    // default caption. It had been the intention to require a caption ("" if none)
10504>>>>>>>    // but having no caption kind of worked where the caption would be "0". Since it
10504>>>>>>>    // kind of worked, I don't want to remove this which might generate runtime errors.
10504>>>>>>>    If (num_arguments>1) Begin
10506>>>>>>>        Move sCaption to sCapt
10507>>>>>>>    End
10507>>>>>>>>
10507>>>>>>>    
10507>>>>>>>    Error DFERR_OPERATOR (sMessage + If(sCapt<>"",C_ErrorCaption + sCapt,""))
10508>>>>>>>>
10508>>>>>>>End_Procedure
10509>>>>>Use Windows.pkg
10509>>>>>Use msgbox.pkg
10509>>>>>Use GlobalFunctionsProcedures.pkg
10509>>>>>
10509>>>>>Class cWindowsErrorHandler is a cBaseErrorHandler
10510>>>>>    Procedure Construct_Object
10512>>>>>        Forward Send Construct_Object
10514>>>>>        
10514>>>>>        
10514>>>>>        
10514>>>>>        // shows error numbers with user errors. Only set this true if your
10514>>>>>        // application has meaningful numbers that helps the end user. Note that
10514>>>>>        // unhandled errors always show numbers.
10514>>>>>        // this is ignored if pbUnhandledErrorSupport is false
10514>>>>>        Property Boolean pbShowErrorNumber        False
10515>>>>>        
10515>>>>>        //  This allows us to skip find errors (GT & LT) and to only
10515>>>>>        //  ring a bell when these occur.
10515>>>>>        //
10515>>>>>        Property Boolean pbBellOnFindErrorState True
10516>>>>>        
10516>>>>>        Property Integer pbVerboseState         True
10517>>>>>
10517>>>>>    End_Procedure
10518>>>>>    
10518>>>>>
10518>>>>>    
10518>>>>>    Procedure UnhandledErrorDisplay Integer iErrorLine String sMessage
10520>>>>>        String sCaption sCRLF
10520>>>>>        Move (Character(13)+Character(10)) to sCRLF
10521>>>>>        Get psUnhandledErrorCaption to sCaption
10522>>>>>        Move (Replaces("\n",sMessage,sCRLF)) to sMessage
10523>>>>>        Move (Replaces("\"+sCRLF, sMessage, "\n")) to sMessage
10524>>>>>        ErrorDisplay iErrorLine sMessage sCaption C_$OK C_$Copy
10525>>>>>    End_Procedure
10526>>>>>    
10526>>>>>    // Handle error event, displaying error info to user.
10526>>>>>    Procedure HandleError Integer iErrNum Integer iErrLine String sErrText
10528>>>>>        Integer iReply iIcon
10528>>>>>        String  sDescription sMess
10528>>>>>        String  sSource sCaption
10528>>>>>        Integer iSrcPos iSrc iTxtLen
10528>>>>>        Boolean bIsUnhandled bUnhandledSupport bCritical bVerbose
10528>>>>>        
10528>>>>>        
10528>>>>>        // if this is false, this will work old-style -- all errors go through message box
10528>>>>>        Get pbUnhandledErrorSupport to bUnhandledSupport
10529>>>>>        
10529>>>>>        Get IsCritical iErrNum to bCritical
10530>>>>>        Get IsUnhandledError iErrNum to bIsUnhandled
10531>>>>>        
10531>>>>>        
10531>>>>>        //
10531>>>>>        //   Changes made so find errors don't report - just beep
10531>>>>>        //
10531>>>>>        If ( pbBellOnFindErrorState(Self) and ;             (iErrNum=DFERR_FIND_PRIOR_BEG_OF_FILE or iErrNum=DFERR_FIND_PAST_END_OF_FILE)) Begin
10533>>>>>            Send Bell
10534>>>>>        End
10534>>>>>>
10534>>>>>        Else Begin
10535>>>>>            
10535>>>>>            // See if source information is provided (Source = module.function). If so remove
10535>>>>>            // as detail. Must find last instance of this in string
10535>>>>>            Move (pos(C_ErrorContextSourceText,sErrText)) to iSrc
10536>>>>>            If (iSrc > 0) Begin
10538>>>>>                Move (iSrc-1) to iSrcPos
10539>>>>>                Move (length(C_ErrorContextSourceText)) to  iTxtLen
10540>>>>>                Move sErrText to sSource
10541>>>>>                Repeat // this makes sure we find last instance of this
10541>>>>>>
10541>>>>>                    Move (Remove(sSource, 1, iSrc-1 + iTxtLen )) to sSource // right part of string
10542>>>>>                    Move (Pos(C_ErrorContextSourceText,sSource)) to iSrc           // see if it was the last
10543>>>>>                    If (iSrc > 0) ;                                               // if not, track length                        Move (iSrcPos + iTxtLen + iSrc-1) to iSrcPos
10546>>>>>                Until (iSrc=0)
10548>>>>>                Move (Trim(Left(sErrText,iSrcPos))) to sErrText
10549>>>>>                If (Right(sErrText,1) = ',') ;                    Move (Left(sErrText,Length(sErrText) - 1)) to sErrText
10552>>>>>            End
10552>>>>>>
10552>>>>>            
10552>>>>>            // the caption normally used for handled user errors
10552>>>>>            Get psUserErrorCaption to sCaption
10553>>>>>            // if an operator error this may be a Procedure UserError situation where the
10553>>>>>            // caption is passed in the error text. If so, get the caption
10553>>>>>            If (iErrNum=DFERR_OPERATOR) Begin
10555>>>>>                Move (pos(C_ErrorCaption,sErrText)) to iSrc
10556>>>>>                If iSrc Begin
10558>>>>>                    Move (Length(C_ErrorCaption)) to  iTxtLen
10559>>>>>                    Move (Remove(sErrText, 1, iSrc-1 + iTxtLen )) to sCaption
10560>>>>>                    Move (Left(sErrText,iSrc-1)) to sErrText
10561>>>>>                End
10561>>>>>>
10561>>>>>            End
10561>>>>>>
10561>>>>>            
10561>>>>>            Get ErrorDescription iErrNum sErrText to sDescription
10562>>>>>            
10562>>>>>            // if the error source is identified we can get extended error
10562>>>>>            // text for our error message
10562>>>>>            If (ghoErrorSource > 0) Begin
10564>>>>>                Get extended_error_Message of ghoErrorSource to sMess
10565>>>>>                If (sMess <> '') ;                    Move (sDescription + "\n\n" + sMess ) to sDescription
10568>>>>>            End
10568>>>>>>
10568>>>>>            
10568>>>>>            If (bUnhandledSupport) Begin
10570>>>>>                // as of 14.1, this is the preferred way to do errors
10570>>>>>                If (bCritical or bIsUnhandled) Begin
10572>>>>>                    Move ( sDescription + "\n\n" + C_$Error + ":" * String(iErrNum) ) to sDescription
10573>>>>>                    If (sSource <> "") Begin
10575>>>>>                        Move (sDescription + "\n" + C_$ErrorSource +" =" * sSource) to sDescription
10576>>>>>                    End
10576>>>>>>
10576>>>>>                End
10576>>>>>>
10576>>>>>                Else If (pbShowErrorNumber(Self)) Begin
10579>>>>>                    // if a user error, we provide a way to see error numbers.
10579>>>>>                    Move ( sDescription + "\n\n" + C_$Error + ":" * String(iErrNum) ) to sDescription
10580>>>>>                End
10580>>>>>>
10580>>>>>            End
10580>>>>>>
10580>>>>>            Else Begin
10581>>>>>                // we get here if we want it to work the old (less good) way. This is provided
10581>>>>>                // only for backwards compatibility. All errors go through the message box
10581>>>>>                Get Verbose_State to bVerbose
10582>>>>>                If (bVerbose)  Begin
10584>>>>>                    Move ( sDescription + "\n\n" + SFormat(C_$TechnicalDetails, iErrNum, iErrLine) ) to sDescription
10585>>>>>                    If (sSource<>"") Begin
10587>>>>>                        Move (sDescription + "\n" + C_$ErrorSource +" =" * sSource) to sDescription
10588>>>>>                    End
10588>>>>>>
10588>>>>>                End
10588>>>>>>
10588>>>>>            End
10588>>>>>>
10588>>>>>            
10588>>>>>            If ( (bCritical or bIsUnhandled) and bUnhandledSupport) Begin
10590>>>>>                Send UnhandledErrorDisplay iErrLine sDescription
10591>>>>>            End
10591>>>>>>
10591>>>>>            Else Begin
10592>>>>>                Move (If(bCritical,MB_IconHand,MB_IconExclamation)) to iIcon
10593>>>>>                Move (Message_Box(sDescription, sCaption, MB_Ok, iIcon)) to iReply
10594>>>>>            End
10594>>>>>>
10594>>>>>            
10594>>>>>            // abort on critical errors
10594>>>>>            If bCritical ;                Abort
10597>>>>>            
10597>>>>>        End
10597>>>>>>
10597>>>>>        
10597>>>>>    End_Procedure
10598>>>>>    
10598>>>>>    
10598>>>>>    
10598>>>>>    Function Help_Context Integer Context_Type Returns String
10600>>>>>        Function_Return (Current_Error_Number(Self))
10601>>>>>    End_Function
10602>>>>>    
10602>>>>>    
10602>>>>>    
10602>>>>>    // The following functions are rarely or never used.
10602>>>>>    
10602>>>>>    // The functions below are used to construct a general help
10602>>>>>    // name for errors that are generated by the system.  If processing
10602>>>>>    // comes here, then there was no module specific help found.  These
10602>>>>>    // functions will provide a more general help name that appears in
10602>>>>>    // the form of SYSTEM..ERROR:#.  All global errors should be
10602>>>>>    // places in the help file under this application and module name.
10602>>>>>    
10602>>>>>    // Returns "ERROR:errornum" to supply error help.
10602>>>>>    Function Help_Name Returns String
10604>>>>>        Function_Return (Append("ERROR:",lastErr))
10605>>>>>    End_Function
10606>>>>>    
10606>>>>>    Function Application_Name Returns String
10608>>>>>        Function_Return 'SYSTEM'
10609>>>>>    End_Function
10610>>>>>    
10610>>>>>    Function Module_Name Returns String
10612>>>>>        Function_Return ''
10613>>>>>    End_Function
10614>>>>>    
10614>>>>>    
10614>>>>>    // Legacy names here for backwards compatibility
10614>>>>>    Function Verbose_State Returns Boolean
10616>>>>>        Function_Return (pbVerboseState(Self))
10617>>>>>    End_Function
10618>>>>>    
10618>>>>>    Procedure Set Verbose_State Boolean bVal
10620>>>>>        Set pbVerboseState to bVal
10621>>>>>    End_Procedure
10622>>>>>    
10622>>>>>    Procedure Set Bell_on_Find_Error_State Boolean bVal
10624>>>>>        Set pbBellOnFindErrorState to bVal
10625>>>>>    End_Procedure
10626>>>>>    
10626>>>>>    Function Bell_on_Find_Error_State Returns Boolean
10628>>>>>        Function_Return (pbBellOnFindErrorState(Self))
10629>>>>>    End_Function
10630>>>>>End_Class
10631>>>
10631>>>// Legacy classnames
10631>>>Class ErrorSystem is a cWindowsErrorHandler
10632>>>End_Class
10633>>>
10633>>>Class Trapped_Errors_Array is a cTrappedErrors
10634>>>End_Class
10635>>>
10635>>>// Replace to make legacy code run that uses old names work
10635>>>
10635>>>Object oErrorHandler is a cWindowsErrorHandler
10637>>>End_Object
10638>>>
10638>Use seq_chnl.pkg                // Sequential channel management
10638>Use Statpnl.pkg                 // StatusPanel class
Including file: Statpnl.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Statpnl.pkg)
10638>>>// creates the standard status_panel object.
10638>>>//
10638>>>// This is the default Status Panel object used by any of the DataFlex classes that
10638>>>// invoke the standard status panel. The standard has always been that the package name
10638>>>// is StatPnl.pkg and the name of the object is Status_Panel. As of 12.0, there are major
10638>>>// changes in the way the status panel operates The Sentinel based external status panel used in
10638>>>// prior revisions has been replace with status panel that is part of the application.
10638>>>// This should work much better and faster than the old sentinel based solution.
10638>>>// While the way this operates has changed, the interface has not and therefore this should work
10638>>>// with most applications.
10638>>>//
10638>>>// As of 12.0, we have added a global handle that contains the object ID of this status panel.
10638>>>// This variable ghoStatusPanel can be used in place of the object name Status_Panel. This provides
10638>>>// a cleaner more robust interface.
10638>>>//
10638>>>//
10638>>>// Compatibility Note:
10638>>>//
10638>>>// When used in the standard way, this change will require no changes. A developer will only need to
10638>>>// change their code if they've modified the sentinel program, which was a difficult thing to do.
10638>>>//
10638>>>// If for some reason you application will not work using this as a replacement for the old status
10638>>>// panel, you've probably done something special with the old status-panel. If you don't want to
10638>>>// figure out how to use the new one and you want to continue using the old one you are going to need
10638>>>// to add some code to include the old status panel in your application. Add the following to your project (your src).
10638>>>//
10638>>>// Use StatPnl.pkg    // Make sure you load the new status panel object first. this is not optional!
10638>>>// Use OldStatPnl.pkg // load the old status panel. Status_Panel is now this old object
10638>>>//
10638>>>// If you do this, you will lose access to the new status-panel via Status_Panel. However, you
10638>>>// can still access the new object via the ghoStatusPanel handle.
10638>>>//
10638>>>//
10638>>>// Creating your own Status Panel objects
10638>>>//
10638>>>// If a developer wishes to create a custom panel, they should use this package as their template.
10638>>>// This panel can be visually modeled and changed any way you wish. Just save your new custom panel
10638>>>// with a different file and object name and direct your status panel request to the new object.
10638>>>//
10638>>>// If the new panel changes the interface and updates objects that are not currently defined, you
10638>>>// want to make sure you send the message ProcessEvents after you've updated the object. This allows
10638>>>// the object to paint when inside of a tight loop. For example, if you wanted to add a progress
10638>>>// bar (cProgressBar) you would want to Send ProcessEvents after you update the progress bar.
10638>>>// e.g.
10638>>>//       Procedure UpdateStatusBar
10638>>>//           Send DoAdvance of oProgressBar
10638>>>//           Send ProcessEvents
10638>>>//       End_Procedure
10638>>>//
10638>>>// Of course, if you use the standard interfaces in status bar and your forward send these
10638>>>// messages this will be done for you.
10638>>>//
10638>>>// the standard Interface for status panels are:
10638>>>//
10638>>>// Send Initialize_StatusPanel - initializes values for caption, title & message
10638>>>// Send Start_StatusPanel      - start the status panel
10638>>>// Send Stop_StatusPanel       - stop the status panel
10638>>>// Send Update_StatusPanel     - update the status panel's action area
10638>>>// Get  Check_StatusPanel      - check for cancel (if cancel or pbCancel is set, close the panel)
10638>>>//
10638>>>// Get/Set Caption_Text - updates the caption bar
10638>>>// Get/Set Title_Text   - updates the title area
10638>>>// Get/Set Message_Text - updates the Message area
10638>>>// Get/Set Action_Text  - updates the action area
10638>>>// Get/Set Button_Text  - updates the button area
10638>>>//
10638>>>// Get/Set Allow_cancel_state - determines if panel can be canceled
10638>>>// Send EnableCancelButton - code you should provide to enable/disable cancel button
10638>>>//
10638>>>// ghoStatusPanel - global handle that points to the standard status panel.
10638>>>
10638>>>Use cProcessStatusPanel.pkg
Including file: cProcessStatusPanel.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cProcessStatusPanel.pkg)
10638>>>>>// cProcessStatusPanel.pkg
10638>>>>>//
10638>>>>>// Class used to create StatusPanels.
10638>>>>>//
10638>>>>>// This class does not provide any of the inner objects that make up a status panel. Instead an
10638>>>>>// interface is provided that is used to update the various areas of status panel. At this level,
10638>>>>>// those areas (title area, message area, action area, button area) are logical. You create the
10638>>>>>// physical objects at the object level and then bind these objects to the interface.
10638>>>>>// Take a look at StatPnl.pkg to see how this is used.
10638>>>>>//
10638>>>>>// the standard Interface for status panels are:
10638>>>>>//
10638>>>>>// Send Initialize_StatusPanel - initializes values for caption, title & message
10638>>>>>// Send Start_StatusPanel      - start the status panel
10638>>>>>// Send Stop_StatusPanel       - stop the status panel
10638>>>>>// Send Update_StatusPanel     - update the status panel's action area
10638>>>>>// Get  Check_StatusPanel      - check for cancel (if cancel or pbCancel is set, close the panel)
10638>>>>>//
10638>>>>>// Get/Set Caption_Text - updates the caption bar
10638>>>>>// Get/Set Title_Text   - updates the title area
10638>>>>>// Get/Set Message_Text - updates the Message area
10638>>>>>// Get/Set Action_Text  - updates the action area
10638>>>>>// Get/Set Button_Text  - updates the button area
10638>>>>>//
10638>>>>>// Get/Set Allow_cancel_state - determines if panel can be canceled
10638>>>>>// Send EnableCancelButton - code must be provided in the cancel button object to enable/disable cancel button
10638>>>>>//
10638>>>>>
10638>>>>>Use cStatusPanel.pkg
Including file: cStatusPanel.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cStatusPanel.pkg)
10638>>>>>>>// This is an abstract class that can be used to create status panels. The interface at this level
10638>>>>>>>// is very simple. You can start, stop, request a cancel and allow the object to paint.
10638>>>>>>>//
10638>>>>>>>// Look at cProcessStatusPanel.pkg to see how this is used.
10638>>>>>>>
10638>>>>>>>Use Windows.pkg
10638>>>>>>>
10638>>>>>>>
10638>>>>>>>
10638>>>>>>>
10638>>>>>>>Class cStatusPanel is a FloatingPanel
10639>>>>>>>    
10639>>>>>>>    Procedure Construct_Object
10641>>>>>>>        Forward Send Construct_object
10643>>>>>>>        
10643>>>>>>>        Property Boolean pbCancel False
10644>>>>>>>        
10644>>>>>>>        Set Extended_Window_Style to WS_EX_DLGMODALFRAME True // kills sysmenu as long as there is no icon
10645>>>>>>>        Set Icon to '' // this must be cleared so there will be no icon
10646>>>>>>>        Set locate_mode to CENTER_ON_PANEL
10647>>>>>>>        Set Border_Style  to Border_Dialog
10648>>>>>>>        // should be scoped so it will not try to change the focus if there is no focusable button inside
10648>>>>>>>        Set Scope_State to True
10649>>>>>>>        
10649>>>>>>>        On_Key KEXIT_APPLICATION Send Close_Panel
10650>>>>>>>    End_Procedure
10651>>>>>>>    
10651>>>>>>>    // this is private and required. Never send this.
10651>>>>>>>    Procedure Deactivate_Group
10653>>>>>>>        If (Active_State(Self)) Begin
10655>>>>>>>            Send SuspendGUI of Desktop False
10656>>>>>>>        End
10656>>>>>>>>
10656>>>>>>>        Forward Send Deactivate_Group
10658>>>>>>>    End_Procedure
10659>>>>>>>    
10659>>>>>>>    // Send this message to stop the panel
10659>>>>>>>    Procedure Deactivate
10661>>>>>>>        If (Active_State(Self)) Begin
10663>>>>>>>            Send SuspendGUI of Desktop False
10664>>>>>>>        End
10664>>>>>>>>
10664>>>>>>>        Forward Send Deactivate
10666>>>>>>>    End_Procedure
10667>>>>>>>    
10667>>>>>>>    // Send this message to start the panel
10667>>>>>>>    Procedure Activate
10669>>>>>>>        If not (Active_State(Self)) Begin
10671>>>>>>>            Set pbCancel to False
10672>>>>>>>            Send SuspendGUI of Desktop True
10673>>>>>>>        End
10673>>>>>>>>
10673>>>>>>>        Forward Send Activate
10675>>>>>>>    End_Procedure
10676>>>>>>>    
10676>>>>>>>    // This allows the panel to paint when used in a tight loop, which is what status panels are
10676>>>>>>>    // used for. Any time you update the panel or wish to check for a cancel, you should call this.
10676>>>>>>>    Procedure ProcessEvents
10678>>>>>>>        If (Active_State(Self)) Begin
10680>>>>>>>            Send PumpMsgQueue of Desktop
10681>>>>>>>        End
10681>>>>>>>>
10681>>>>>>>    End_Procedure
10682>>>>>>>    
10682>>>>>>>    // note close panel does not actually close the panel. It just sets pbCancel to True, informing the
10682>>>>>>>    // process using this that it wants to close. It is then up the process close the panel.
10682>>>>>>>    Procedure Close_Panel
10684>>>>>>>        Set pbCancel to True
10685>>>>>>>    End_Procedure
10686>>>>>>>    
10686>>>>>>>End_Class
10687>>>>>
10687>>>>>
10687>>>>>
10687>>>>>Class cProcessStatusPanel is a cStatusPanel
10688>>>>>    
10688>>>>>    Procedure Construct_Object
10690>>>>>        Forward Send Construct_object
10692>>>>>        // determines if panel can be canceled
10692>>>>>        Property Boolean Allow_Cancel_State True
10693>>>>>    End_Procedure
10694>>>>>    
10694>>>>>    // Any of the properties that change the text of a status panel must also send
10694>>>>>    // ProcessEvents which allows the panel to process painting messages. The ProcessEvents
10694>>>>>    // is essential when using status panels within a tight loop
10694>>>>>    
10694>>>>>    Procedure Set Caption_text String sText
10696>>>>>        Set Label to sText
10697>>>>>        Send ProcessEvents
10698>>>>>    End_Procedure
10699>>>>>    
10699>>>>>    Function Caption_Text Returns String
10701>>>>>        Function_Return (Label(Self))
10702>>>>>    End_Function
10703>>>>>    
10703>>>>>    Procedure Set Message_Text String sText
10705>>>>>        Send ProcessEvents
10706>>>>>    End_Procedure
10707>>>>>    
10707>>>>>    Function Message_Text Returns String
10709>>>>>    End_Function
10710>>>>>    
10710>>>>>    Procedure Set Action_Text String sText
10712>>>>>        Send ProcessEvents
10713>>>>>    End_Procedure
10714>>>>>    
10714>>>>>    Function Action_Text Returns String
10716>>>>>    End_Function
10717>>>>>    
10717>>>>>    Procedure Set Button_Text String sText
10719>>>>>        Send ProcessEvents
10720>>>>>    End_Procedure
10721>>>>>    
10721>>>>>    Function Button_Text Returns String
10723>>>>>    End_Function
10724>>>>>    
10724>>>>>    Procedure Set Title_Text String sText
10726>>>>>        Send ProcessEvents
10727>>>>>    End_Procedure
10728>>>>>    
10728>>>>>    Function Title_Text Returns String
10730>>>>>    End_Function
10731>>>>>    
10731>>>>>    // initializes values for caption, title & message
10731>>>>>    Procedure Initialize_StatusPanel String sCaption String sTitle String sMessage
10733>>>>>        Set Caption_text to sCaption
10734>>>>>        Set Title_Text   to sTitle
10735>>>>>        Set Message_Text to sMessage
10736>>>>>    End_Procedure
10737>>>>>    
10737>>>>>    // update the status panel's action area
10737>>>>>    Procedure Update_StatusPanel String sAction
10739>>>>>        Set Action_Text to sAction
10740>>>>>    End_Procedure
10741>>>>>    
10741>>>>>    // stop the status panel
10741>>>>>    Procedure Close_Panel
10743>>>>>        If (Allow_cancel_state(Self)) Begin
10745>>>>>            Forward Send Close_Panel
10747>>>>>        End
10747>>>>>>
10747>>>>>    End_Procedure
10748>>>>>    
10748>>>>>    // Code must be provided in the cancel button object to enable/disable cancel button
10748>>>>>    Procedure EnableCancelButton Boolean bEnable
10750>>>>>    End_Procedure
10751>>>>>    
10751>>>>>    // check for cancel (if cancel or pbCancel is set, close the panel)
10751>>>>>    Function Check_StatusPanel Returns Integer
10753>>>>>        Boolean bCancel
10753>>>>>        If (Active_state(Self)) Begin
10755>>>>>            Send ProcessEvents
10756>>>>>            Get pbCancel to bCancel
10757>>>>>            If bCancel Begin
10759>>>>>                Send Stop_StatusPanel // the old status panel removed this when canceled.
10760>>>>>            End
10760>>>>>>
10760>>>>>        End
10760>>>>>>
10760>>>>>        Function_Return (If(bCancel, MSG_CANCEL, 0)) // the old check status panel returns msg_cancel
10761>>>>>    End_Function
10762>>>>>    
10762>>>>>    // start the status panel
10762>>>>>    Procedure Start_StatusPanel
10764>>>>>        If not (Active_state(Self)) Begin
10766>>>>>            Send EnableCancelButton (Allow_cancel_state(Self))
10767>>>>>            Send Activate
10768>>>>>        End
10768>>>>>>
10768>>>>>    End_Procedure
10769>>>>>    
10769>>>>>    // stop the status panel
10769>>>>>    Procedure Stop_StatusPanel
10771>>>>>        If (Active_state(Self)) Begin
10773>>>>>            Send Deactivate
10774>>>>>        End
10774>>>>>>
10774>>>>>    End_Procedure
10775>>>>>    
10775>>>>>End_Class
10776>>>
10776>>>
10776>>>Global_Variable Handle ghoStatusPanel // will contain the ID of the global StatusPanel object
10776>>>
10776>>>
10776>>>Object Status_Panel is a cProcessStatusPanel
10778>>>    
10778>>>    Move Self to ghoStatusPanel // this can be used throughout your applicaton to access this object
10779>>>    
10779>>>    Set Size to 80 166
10780>>>    
10780>>>    Object oTitleTxt is a TextBox
10782>>>        Set location to 10 10
10783>>>        Set Auto_Size_State to False
10784>>>        Set size to 20 150
10785>>>        Set Justification_Mode to JMode_Center
10786>>>    End_Object
10787>>>    
10787>>>    Object oMessageTxt is a TextBox
10789>>>        Set location to 25 10
10790>>>        Set Auto_Size_State to False
10791>>>        Set size to 20 150
10792>>>    End_Object
10793>>>    
10793>>>    Object oActionTxt is a TextBox
10795>>>        Set location to 45 10
10796>>>    End_Object
10797>>>    
10797>>>    Object oStopButton is a Button
10799>>>        Set Location to 60 58
10800>>>        Set Label to C_$Cancel
10801>>>        
10801>>>        Procedure OnClick
10804>>>            Send Close_panel
10805>>>        End_Procedure
10806>>>        
10806>>>    End_Object
10807>>>    
10807>>>    // These messages bind the standard cProcessStatusPanel interface to the actual
10807>>>    // objects defined within this instance of the status panel.
10807>>>    
10807>>>    // note: all of the messages that change text should be forwarded
10807>>>    // as the forwarded messages allows the panel to paint when in a tight loop
10807>>>    
10807>>>    Procedure Set Message_Text String sText
10810>>>        Set Label of oMessageTxt to sText
10811>>>        Forward Set Message_Text to sText
10813>>>    End_Procedure
10814>>>    
10814>>>    Function Message_Text Returns String
10817>>>        Function_Return (Label(oMessageTxt))
10818>>>    End_Function
10819>>>    
10819>>>    Procedure Set Action_Text String sText
10822>>>        Set Label of oActionTxt to sText
10823>>>        Forward Set Action_Text to sText
10825>>>    End_Procedure
10826>>>    
10826>>>    Function Action_Text Returns String
10829>>>        Function_Return (Label(oActionTxt))
10830>>>    End_Function
10831>>>    
10831>>>    Procedure Set Button_Text String sText
10834>>>        Set Label of oStopButton to sText
10835>>>        Forward Set Button_Text to sText
10837>>>    End_Procedure
10838>>>    
10838>>>    Function Button_Text Returns String
10841>>>        Function_Return (Label(oStopButton))
10842>>>    End_Function
10843>>>    
10843>>>    Procedure Set Title_Text String sText
10846>>>        Set Label of oTitleTxt to sText
10847>>>        Forward Set Title_Text to sText
10849>>>    End_Procedure
10850>>>    
10850>>>    Function Title_Text Returns String
10853>>>        Function_Return (Label(oTitleTxt))
10854>>>    End_Function
10855>>>    
10855>>>    // gets called when status panel is activated passing whether a button
10855>>>    // should appear
10855>>>    Procedure EnableCancelButton Boolean bEnable
10858>>>        Set Enabled_State of oStopButton to bEnable
10859>>>    End_Procedure
10860>>>    
10860>>>End_Object
10861>>>
10861>Use File_dlg.pkg                // SaveAsDialog & OpenDialog class
Including file: File_dlg.pkg    (C:\Program Files\DataFlex 24.0\Pkg\File_dlg.pkg)
10861>>>Use Windows.pkg
10861>>>Use GlobalFunctionsProcedures.pkg
10861>>>
10861>>>
10861>>>// Unicode support, wide version of GetOpenFileName - Gets called directly from Show_Dialog.
10861>>>External_Function GetOpenFileNameW "GetOpenFileNameW" Comdlg32.DLL Pointer OpenStruct Returns Integer
10862>>>
10862>>>// Unicode support, wide version of GetSaveFileName
10862>>>External_Function GetSaveFileNameW "GetSaveFileNameW" Comdlg32.DLL Pointer OpenStruct Returns Integer
10863>>>
10863>>>Struct TOpenFileName
10863>>>    DWord    lStructSize          // length, in bytes, of the structure.
10863>>>    Handle   hwndOwner            // Handle to the window that owns the dialog box.
10863>>>    Handle   hInstance            // handle to a memory object containing a dialog box template.
10863>>>    Pointer  lpstrFilter          // pointer to a buffer containing pairs of null-terminated filter strings.
10863>>>    Pointer  lpstrCustomFilter    // Pointer to a static buffer that contains a pair of null-terminated filter strings for preserving the filter pattern chosen by the user.
10863>>>    DWord    nMaxCustFilter       // size, in chars, of the buffer identified by lpstrCustomFilter.
10863>>>    DWord    nFilterIndex         // index of the currently selected filter
10863>>>    Pointer  lpstrFile            // Pointer to a buffer that contains the file name(s)
10863>>>    DWord    nMaxFile             // Size, in CHARs, of the buffer pointed to by lpstrFile.
10863>>>    Pointer  lpstrFileTitle       // Pointer to a buffer that receives the file name and extension
10863>>>    DWord    nMaxFileTitle        // size, in CHARs, of the buffer pointed to by lpstrFileTitle
10863>>>    Pointer  lpstrInitialDir      // Pointer to a NULL terminated string that can specify the initial directory.
10863>>>    Pointer  lpstrTitle           // Pointer to a string to be placed in the title bar of the dialog box.
10863>>>    DWord    ofnFlags             // set of bit flags you can use to initialize the dialog box.
10863>>>    Short    nFileOffset          // Specifies the zero-based offset, in TCHARs, from the beginning of the path to the file name in the string pointed to by lpstrFile.
10863>>>    Short    nFileExtension       // Specifies the zero-based offset, in TCHARs, from the beginning of the path to the file name extension in the string pointed to by lpstrFile.
10863>>>    Pointer  lpstrDefExt          // Pointer to a buffer that contains the default extension.
10863>>>    Longptr  lCustData            // Specifies application-defined data that the system passes to the hook procedure identified by the lpfnHook member.
10863>>>    Pointer  lpfnHook             // Pointer to a hook procedure.
10863>>>    Pointer  lpTemplateName       // Pointer to a null-terminated string that names a dialog template resource in the module identified by the hInstance member.
10863>>>    Pointer  lpvReserved          // Reserved
10863>>>    DWord    dwReserved           // Reserved
10863>>>    DWord    FlagsEx              // A set of bit flags you can use to initialize the dialog box.
10863>>>End_Struct
10863>>>
10863>>>Define OFN_READONLY               for |CI$000001
10863>>>Define OFN_OVERWRITEPROMPT        for |CI$000002
10863>>>Define OFN_HIDEREADONLY           for |CI$000004
10863>>>Define OFN_NOCHANGEDIR            for |CI$000008
10863>>>Define OFN_NOVALIDATE             for |CI$000100
10863>>>Define OFN_ALLOWMULTISELECT       for |CI$000200
10863>>>Define OFN_EXTENSIONDIFFERENT     for |CI$000400
10863>>>Define OFN_PATHMUSTEXIST          for |CI$000800
10863>>>Define OFN_FILEMUSTEXIST          for |CI$001000
10863>>>Define OFN_CREATEPROMPT           for |CI$002000
10863>>>Define OFN_SHAREAWARE             for |CI$004000
10863>>>Define OFN_NOREADONLYRETURN       for |CI$008000
10863>>>Define OFN_NOTESTFILECREATE       for |CI$010000
10863>>>Define OFN_EXPLORER               for |CI$080000     // new look commdlg
10863>>>
10863>>>Class AbstractFileDialog is a cObject
10864>>>    
10864>>>    Procedure Construct_Object
10866>>>        Forward Send Construct_Object
10868>>>        
10868>>>        Property String  Filter_String
10869>>>        Property String  Initial_Folder
10870>>>        Property String  File_Name
10871>>>        Property String  File_Title
10872>>>        Property String  Dialog_Caption
10873>>>        Property Integer Filter_Index          1
10874>>>        Property Integer HideReadOnly_State    False
10875>>>        Property Integer TickReadOnly_State    False
10876>>>        Property Integer AllowReadOnly_State   True
10877>>>        Property Integer FileMustExist_State   True
10878>>>        Property Integer PathMustExist_State   True
10879>>>        Property Integer CreatePrompt_State    True
10880>>>        Property Integer ShowFileTitle_State   False
10881>>>        Property Integer OverwritePrompt_State False
10882>>>        Property Integer NoChangeDir_State     False
10883>>>        
10883>>>        Property Boolean Private_MultiSelect_State False
10884>>>        
10884>>>        Property String[] Private_Selected_Files
10885>>>        
10885>>>        Property Integer PrivateExternal_msg
10886>>>        
10886>>>        //Set Focus_Mode To No_Activate
10886>>>    End_Procedure
10887>>>    
10887>>>    Function OwnerHandle Returns Handle
10889>>>        Handle hWnd
10889>>>        Handle hoObj
10889>>>        Get Focus of desktop to hoObj // start with the focus
10890>>>        Move (gOwnerWindowHandle(hoObj)) to hWnd // global function finds the right handle for us
10891>>>        Function_Return hWnd
10892>>>    End_Function
10893>>>    
10893>>>    
10893>>>    Function Show_Dialog Returns Integer // bool
10895>>>        Handle hWnd
10895>>>        Integer bOK iFilter iFlags bHideRO bTickRO bFileExist bPathExist iMsg
10895>>>        Integer icInitDir bCreatePrompt bOverwritePrompt bAllowReadOnly
10895>>>        Integer iPos iCount
10895>>>        Integer bNoChangeDir
10895>>>        Pointer lpsFileTitle lpsFileName lpsFilter lpsInitDir
10895>>>        Pointer lpsTitle lpsDefExt
10895>>>        WString sFileName sFileTitle sFilter sInitDir sTitle sDefExt
10895>>>        Pointer lpOpenFileData
10895>>>        Boolean bMultiSelect
10895>>>        String[] sFiles
10896>>>        TOpenFileName OpenFileData
10896>>>        TOpenFileName OpenFileData
10896>>>        
10896>>>        //Delegate Get Container_Handle To hWnd
10896>>>        Get OwnerHandle to hWnd
10897>>>        
10897>>>        If (ShowFileTitle_State(Self)) Begin
10899>>>            Get File_Title to sFileName
10900>>>        End
10900>>>>
10900>>>        
10900>>>        Get private_MultiSelect_State to bMultiSelect
10901>>>        
10901>>>        Get Initial_Folder        to sInitDir
10902>>>        Get Dialog_Caption        to sTitle
10903>>>        Get Filter_String         to sFilter
10904>>>        Get HideReadOnly_State    to bHideRO
10905>>>        Get TickReadOnly_State    to bTickRO
10906>>>        Get FileMustExist_State   to bFileExist
10907>>>        Get PathMustExist_State   to bPathExist
10908>>>        Get CreatePrompt_State    to bCreatePrompt
10909>>>        Get OverwritePrompt_State to bOverwritePrompt
10910>>>        Get AllowReadOnly_State   to bAllowReadOnly
10911>>>        Get NoChangeDir_State     to bNoChangeDir
10912>>>        Get Filter_Index          to iFilter
10913>>>        
10913>>>        Move (sFilter + Character(0) + Character(0)) to sFilter
10914>>>        Move (Replaces('|', sFilter, Character(0))) to sFilter
10915>>>        
10915>>>        Append sInitDir   (character(0))
10916>>>        Append sFileTitle (Repeat(character(0),32000))
10917>>>        Append sFileName  (Repeat(character(0),32000))
10918>>>        Append sTitle     (Repeat(character(0),255))
10919>>>        Append sDefExt    (character(0))
10920>>>        
10920>>>        Move (AddressOf(sInitDir))   to lpsInitDir
10921>>>        Move (AddressOf(sFileName))  to lpsFileName
10922>>>        Move (AddressOf(sFileTitle)) to lpsFileTitle
10923>>>        Move (AddressOf(sTitle))     to lpsTitle
10924>>>        Move (AddressOf(sDefExt))    to lpsDefExt
10925>>>        Move (AddressOf(sFilter))    to lpsFilter
10926>>>        
10926>>>        
10926>>>        If (bMultiSelect) Begin
10928>>>            Move (OFN_EXPLORER + OFN_ALLOWMULTISELECT) to iFlags  // Multi-select!
10929>>>        End
10929>>>>
10929>>>        
10929>>>        If bFileExist ;            Move (iFlags + OFN_FILEMUSTEXIST)    to iFlags
10932>>>        If bPathExist ;            Move (iFlags + OFN_PATHMUSTEXIST)    to iFlags
10935>>>        If bHideRO ;            Move (iFlags + OFN_HIDEREADONLY)     to iFlags
10938>>>        If bTickRO ;            Move (iFlags + OFN_READONLY)         to iFlags
10941>>>        If bCreatePrompt ;            Move (iFlags + OFN_CREATEPROMPT)     to iFlags
10944>>>        If bOverwritePrompt ;            Move (iFlags + OFN_OVERWRITEPROMPT)  to iFlags
10947>>>        If not bAllowReadOnly ;            Move (iFlags + OFN_NOREADONLYRETURN) to iFlags
10950>>>        If bNoChangeDir ;            Move (iFlags + OFN_NOCHANGEDIR)      to iFlags
10953>>>        
10953>>>        Move (SizeOfType(TOpenFileName)) to OpenFileData.lStructSize
10954>>>        Move hWnd         to OpenFileData.hWndOwner
10955>>>        Move iFilter      to OpenFileData.nFilterIndex
10956>>>        Move lpsFileName  to OpenFileData.lpstrFile
10957>>>        
10957>>>        If (sInitDir <> '') Begin
10959>>>            Move lpsInitDir    to OpenFileData.lpstrInitialDir
10960>>>        End
10960>>>>
10960>>>        
10960>>>        If (sTitle <> '') Begin
10962>>>            Move lpsTitle      to OpenFileData.lpstrTitle
10963>>>        End
10963>>>>
10963>>>        
10963>>>        Move 32000             to OpenFileData.nMaxFileTitle
10964>>>        Move 32000             to OpenFileData.nMaxFile
10965>>>        Move lpsFileTitle      to OpenFileData.lpstrFileTitle
10966>>>        Move iFlags            to OpenFileData.ofnFlags
10967>>>        Move lpsFilter         to OpenFileData.lpstrFilter
10968>>>        Move lpsDefExt         to OpenFileData.lpstrDefExt
10969>>>        
10969>>>        Move (AddressOf(OpenFileData)) to lpOpenFileData
10970>>>        
10970>>>        Get PrivateExternal_msg to iMsg
10971>>>        If (iMsg = Get_GetOpenFileNameW) ;            Move (GetOpenFileNameW (lpOpenFileData)) to bOK
10974>>>        If (iMsg = Get_GetSaveFileNameW) ;            Move (GetSaveFileNameW (lpOpenFileData)) to bOK
10977>>>        
10977>>>        If bOK Begin
10979>>>            Move OpenFileData.ofnFlags     to iFlags
10980>>>            Move OpenFileData.nFilterIndex to iFilter
10981>>>            Move OpenFileData.nFileOffset  to icInitDir
10982>>>            
10982>>>            Move (CString(Left(sFileName, icInitDir))) to sInitDir    // Trim trailing null
10983>>>            Set Initial_Folder     to sInitDir
10984>>>            
10984>>>            Set TickReadOnly_State to (iFlags iand OFN_READONLY)
10985>>>            Set Filter_Index       to iFilter
10986>>>
10986>>>            Set File_Name          to (CString( sFileName ))
10987>>>            Set File_Title         to (CString( sFileTitle ))
10988>>>            
10988>>>            If (bMultiSelect) Begin
10990>>>                // If this is a multi-files dialog then parse out the array of selected files....
10990>>>                If (Right(sInitDir, 1) = "\") ;                    Move (Left(sInitDir, Length(sInitDir)-1)) to sInitDir     // Trim trailing :\". This is only there if 1 file was selected!
10993>>>                
10993>>>                // Get the null delimited string of file names into the sFiles array....
10993>>>                Move 0 to iCount
10994>>>                Move (Right(sFileName, Length(sFileName) - icInitDir)) to sFileName    // Strip the path info (we already have it)
10995>>>                
10995>>>                Repeat
10995>>>>
10995>>>                    // Get the next filename....
10995>>>                    Move (Pos(Character(0), sFileName)) to iPos   // Filenames are null delimeted
10996>>>                    
10996>>>                    If (iPos > 1) Begin
10998>>>                        Move (sInitDir + "\" + CString(Left(sFileName, iPos))) to sFiles[iCount]
10999>>>                        Move (Right(sFileName, Length(sFileName) - iPos)) to sFileName
11000>>>                        Increment iCount
11001>>>                    End
11001>>>>
11001>>>                Until (iPos <= 1)
11003>>>            End
11003>>>>
11003>>>            Else Begin
11004>>>                Move (CString(sFileName)) to sFiles[0]
11005>>>            End
11005>>>>
11005>>>            
11005>>>            Set private_Selected_Files to sFiles
11006>>>        End
11006>>>>
11006>>>        Function_Return (bOK)
11007>>>    End_Function
11008>>>End_Class
11009>>>
11009>>>Class OpenDialog is an AbstractFileDialog
11010>>>    Procedure Construct_Object
11012>>>        Forward Send Construct_Object
11014>>>        Set PrivateExternal_msg to get_GetOpenFileNameW
11015>>>    End_Procedure
11016>>>    
11016>>>    Procedure Set MultiSelect_State Boolean bState
11018>>>        Set private_MultiSelect_State to bState
11019>>>    End_Procedure
11020>>>    
11020>>>    Function MultiSelect_State Returns Boolean
11022>>>        Boolean bState
11022>>>        Get private_MultiSelect_State to bState
11023>>>        Function_Return bState
11024>>>    End_Function
11025>>>    
11025>>>    Function Selected_Files Returns String[]
11027>>>        String[] sFiles
11028>>>        Get private_Selected_Files to sFiles
11029>>>        Function_Return sFiles
11030>>>    End_Function
11031>>>End_Class
11032>>>
11032>>>Class SaveAsDialog is an AbstractFileDialog
11033>>>    Procedure Construct_Object
11035>>>        Forward Send Construct_Object
11037>>>        Set FileMustExist_State   to False
11038>>>        Set CreatePrompt_State    to False
11039>>>        Set ShowFileTitle_State   to True
11040>>>        Set OverwritePrompt_State to True
11041>>>        Set HideReadOnly_State    to True
11042>>>        Set PrivateExternal_msg to get_GetSaveFileNameW
11043>>>    End_Procedure
11044>>>End_Class
11045>>>
11045>Use Flexml.pkg
Including file: Flexml.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Flexml.pkg)
11045>>>Use VdfBase.pkg
11045>>>Use LanguageText.pkg
11045>>>Use GlobalFunctionsProcedures.pkg
11045>>>
11045>>>
11045>>>// Used to designate that a handle is a handle to an Xml Dom object. This
11045>>>// is used/required by server web-services but could be used elsewhere .
11045>>>
11045>>>
11045>>>// Types of Nodes
11045>>>
11045>>>
11045>>>// classes and methods defined in fmac
11045>>>
11045>>>
11045>>>Register_Function transformNode Handle infcXSLNode Returns String
11045>>>
11045>>>
11045>>>
11045>>>
11045>>>
11045>>>
11045>>>
11045>>>
11045>>>
11045>>>// XML function & procedure registration
11045>>>
11045>>>Register_Procedure Set XmlInterface Handle iHandle
11045>>>Register_Function XmlInterface Returns Handle
11045>>>
11045>>>// NODE Properties
11045>>>Register_Function phAttributes Returns Handle
11045>>>Register_Function psBaseName Returns String
11045>>>Register_Function phChildNodes Returns Handle
11045>>>Register_Function phDefinition Returns Handle
11045>>>Register_Function phFirstChild Returns Handle
11045>>>Register_Function phLastChild Returns Handle
11045>>>Register_Function phNextSibling Returns Handle
11045>>>Register_Function psNameSpaceURI Returns String
11045>>>Register_Function psNodeName Returns String
11045>>>Register_Function piNodeType Returns Integer
11045>>>Register_Function psNodeTypeString Returns String
11045>>>Register_Function phOwnerDocument Returns Handle
11045>>>Register_Function phParentNode Returns Handle
11045>>>Register_Function pbParsed Returns Integer
11045>>>Register_Function psPrefix Returns String
11045>>>Register_Function phPreviousSibling Returns Handle
11045>>>Register_Function pbSpecified Returns Integer
11045>>>Register_Function psText Returns String
11045>>>Register_Procedure Set psText String sText
11045>>>Register_Function psXML Returns String
11045>>>
11045>>>// Node Read write properties
11045>>>
11045>>>Register_Procedure Set psDataType String sTypeName
11045>>>Register_Function psDataType Returns String
11045>>>Register_Procedure Set pvNodeTypedValue Integer iType Integer iAddress
11045>>>Register_Function pvNodeTypedValue Integer iType Returns Integer  // address of data
11045>>>Register_Procedure Set psNodeValue String sValue
11045>>>Register_Function psNodeValue Returns String
11045>>>
11045>>>// Node Methods
11045>>>
11045>>>Register_Function AppendChild Handle iChildInfc Returns Handle
11045>>>Register_Function CloneInfcNode Handle bRecurse Returns Handle
11045>>>Register_Function HasChildNodes Returns Integer
11045>>>Register_Function InsertBefore Handle infcNodeToInsert Handle iWhere Returns Handle
11045>>>Register_Function RemoveChild Handle iChildToRemove Returns Handle
11045>>>Register_Function ReplaceChild Handle iNewChild Handle iChildToReplace Returns Handle
11045>>>Register_Function SelectNodes String selectstring Returns Handle
11045>>>Register_Function SelectSingleNode String selectstring Returns Handle
11045>>>
11045>>>// Node Collections
11045>>>// READONLY PROPERTIES
11045>>>
11045>>>Register_Function phItem Integer iItem Returns Handle
11045>>>Register_Function phElementItem Integer iItem Returns Handle
11045>>>
11045>>>Register_Function piLength Returns Integer
11045>>>
11045>>>Register_Function NamedItem String sName Returns Handle
11045>>>Register_Function QualifiedItem String sBaseName String sNameSpace Returns Handle
11045>>>Register_Function RemoveNamedItem String sName Returns Handle
11045>>>Register_Function RemoveQualifiedItem String sBaseName String sNameSpace Returns Handle
11045>>>Register_Function SetNamedItem Handle iInterface Returns Handle
11045>>>
11045>>>// XML DOM Document
11045>>>// Read only properties
11045>>>
11045>>>Register_Function phDocType Returns Handle
11045>>>Register_Function phImplementation Returns Handle
11045>>>Register_Function phParseError Returns Handle
11045>>>Register_Function piReadyState Returns Integer
11045>>>Register_Function psURL Returns String
11045>>>
11045>>>// Read Write Properties
11045>>>
11045>>>Register_Procedure Set pbAsync Integer bValue
11045>>>Register_Function pbAsync Returns Integer
11045>>>Register_Procedure Set phDocumentElement Handle iElement
11045>>>Register_Function phDocumentElement Returns Handle
11045>>>Register_Procedure Set pbPreserveWhiteSpace Integer bValue
11045>>>Register_Function pbPreserveWhiteSpace Returns Integer
11045>>>Register_Procedure Set pbResolveExternals Integer bValue
11045>>>Register_Function pbResolveExternals Returns Integer
11045>>>Register_Procedure Set pbValidateOnParse Integer bValue
11045>>>Register_Function pbValidateOnParse Returns Integer
11045>>>
11045>>>// Events
11045>>>
11045>>>// Methods
11045>>>
11045>>>Register_Function Abort Returns Integer
11045>>>Register_Function ElementsByTagName String sTagName Returns Handle
11045>>>Register_Function LoadDocument String sURLName Returns Integer
11045>>>Register_Function LoadXML String sXMLText Returns Integer
11045>>>Register_Function NodeFromID String sNodeName Returns Handle
11045>>>Register_Function SaveDocument String sURLName Returns Integer
11045>>>
11045>>>// Parse Error
11045>>>// Read Only Properties
11045>>>
11045>>>Register_Function piErrorCode Returns Integer
11045>>>Register_Function piFilePos Returns Integer
11045>>>Register_Function piLine Returns Integer
11045>>>Register_Function piLinePos Returns Integer
11045>>>Register_Function psReason Returns String
11045>>>Register_Function psSrcText Returns String
11045>>>Register_Function psURL Returns String
11045>>>
11045>>>// DOM Implementation
11045>>>// Method
11045>>>
11045>>>Register_Function HasFeature String sSystem String sFeature Returns Integer
11045>>>
11045>>>// Methods
11045>>>
11045>>>Register_Function substringData Integer iOffset Integer iCount Returns String
11045>>>Register_Function appendData String sData Returns Handle
11045>>>Register_Function insertData Integer iOffset String sData Returns Handle
11045>>>Register_Function deleteData Integer iOffset Integer iCount Returns Handle
11045>>>Register_Function replaceData Integer iOffset Integer iCount String sData Returns Handle
11045>>>
11045>>>// Attributes
11045>>>
11045>>>Register_Function psName Returns String
11045>>>
11045>>>// Elements
11045>>>// Read Only properties
11045>>>
11045>>>Register_Function psTagName Returns String
11045>>>
11045>>>// Methods
11045>>>
11045>>>Register_Procedure Set attributeValue String sName String sValue
11045>>>Register_Function attributeValue String sName Returns String
11045>>>Register_Function removeAttribute String sName Returns Handle
11045>>>Register_Function attributeNode String sName Returns Handle
11045>>>Register_Procedure Set attributeNode Handle iNode Returns Handle
11045>>>Register_Function removeAttributeNode Handle iNode Returns Handle
11045>>>
11045>>>// DOM Text
11045>>>// Methods
11045>>>
11045>>>Register_Function splitText Integer iOffset Returns Integer
11045>>>
11045>>>// DOM Processing Instruction
11045>>>// Read Only Properties
11045>>>Register_Function psTarget Returns String
11045>>>
11045>>>// DOM Document Type
11045>>>
11045>>>Register_Function phEntities Returns Handle
11045>>>Register_Function phNotations Returns Handle
11045>>>
11045>>>// DOM Notations
11045>>>
11045>>>Register_Function psPublicID Returns String
11045>>>Register_Function psSystemID Returns String
11045>>>Register_Function psNotationName Returns String
11045>>>
11045>>>// create nodes
11045>>>
11045>>>Register_Function createAttribute String sName Returns Handle
11045>>>Register_Function createCDataSection String sValue Returns Handle
11045>>>Register_Function createComment String sValue Returns Handle
11045>>>Register_Function createDocumentFragment Returns Handle
11045>>>Register_Function createElement String sTagName Returns Handle
11045>>>Register_Function createEntityReference String sEntityName Returns Handle
11045>>>Register_Function createNode Integer iNodeType String sName String sNameSpace Returns Handle
11045>>>Register_Function createProcessingInstruction String sTarget String sData Returns Handle
11045>>>Register_Function createTextNode String sData Returns Handle
11045>>>
11045>>>Register_Function ChangeNodeType Integer iTypeOfNode Integer bSetInterface Returns Handle
11045>>>
11045>>>
11045>>>//          Part 1:  Base Document Logic Specialized For Templates
11045>>>
11045>>>//
11045>>>//  XML Collections
11045>>>//
11045>>>//  Collection mixin has common functions to both node lists and named node maps
11045>>>//
11045>>>
11045>>>// This provides functions required of all XMLDOM objects.
11045>>>//
11045>>>Class cXMLDOMMixin is a Mixin
11046>>>    
11046>>>    // Create an XML object of passed class Id and bind passed interface. returns
11046>>>    // the object handle. All dynamic XML object can be created using this syntax
11046>>>    
11046>>>    Function CreateXMLObject Integer iClassId Handle hinfXMLInterface Returns Handle
11048>>>        Handle hoId hoDocument
11048>>>        // We will always create objects at the DOMDocument level.
11048>>>        Get DocumentObject to hoDocument
11049>>>        If (hoDocument=0) Begin  // this should never happen.
11051>>>            Error DFERR_XML_INTERNAL_ERROR C_$XmlFailedNoDocObject
11052>>>>
11052>>>            Function_Return 0
11053>>>        End
11053>>>>
11053>>>        If hinfXMLInterface Begin
11055>>>            Get Create of hoDocument iClassId to hoID
11056>>>            Set XMLInterface of hoID to hinfXMLInterface
11057>>>        End
11057>>>>
11057>>>        Function_Return hoID
11058>>>    End_Function
11059>>>    
11059>>>    // create an XML Node object based on the interface type.
11059>>>    // this will convert the interface to the proper type and will create
11059>>>    // an appropriate DF object.
11059>>>    // This requires that a DocumentObject exists
11059>>>    
11059>>>    Function CreateXMLNode Handle hinfc Returns Handle
11061>>>        Integer iType iClassId
11061>>>        Handle  hoDocument hoNode
11061>>>        // Get the node type of the infc handle w/o creating a DF object
11061>>>        Move (invokexml(DF_IXMLDOMNODE, GET_piNodeType, hinfc, 0, 0, 0, 0)) to iType
11062>>>        Move (invokexml(DF_IXMLDOMNODE, GET_ChangeNodeType, hinfc, iType, 1, 0, 0)) to hInfc
11063>>>        If (hinfc=0) Begin
11065>>>            // this should not happen and we would need to know about this.
11065>>>            Error DFERR_XML_INTERNAL_ERROR (C_$XmlFailedNoDocObject + String(iType))
11066>>>>
11066>>>            Function_Return 0
11067>>>        End
11067>>>>
11067>>>        Get DocumentObject to hoDocument
11068>>>        // you can augment your class IDs in a single place.
11068>>>        Get NodeClassId of hoDocument iType to iClassId
11069>>>        Get CreateXMLObject of hoDocument iClassId hinfc to hoNode
11070>>>        
11070>>>        Function_Return hoNode
11071>>>    End_Function
11072>>>    
11072>>>    
11072>>>    // Change object's class. This let's you change the class id of an object
11072>>>    // on an object by object basis. This would let you create nodes (e.g. elements)
11072>>>    // that have a custom interface for each node type. Normally, this would be sent
11072>>>    // after a node has been created using one of the default classes
11072>>>    Function ChangeNodeClass Handle hoNode Integer iClassID Returns Handle
11074>>>        Integer iType
11074>>>        Handle  hinfcNew
11074>>>        Get piNodeType of hoNode to iType
11075>>>        Get ChangeNodeType of hoNode iType False to hInfcNew
11076>>>        Send Destroy to hoNode // destroy object and old infc handle.
11077>>>        Get CreateXMLObject iClassId hinfcNew to hoNode
11078>>>        Function_Return hoNode
11079>>>    End_Function
11080>>>    
11080>>>End_Class
11081>>>
11081>>>
11081>>>Class cXMLDOMCollectionMixin is a Mixin
11082>>>    
11082>>>    Import_Class_Protocol cXMLDOMMixin
11083>>>    
11083>>>    //  Returns number of items in the collection
11083>>>    //
11083>>>    Function NodeListLength Returns Integer
11085>>>        Integer iLength
11085>>>        Get piLength to iLength
11086>>>        Function_Return iLength
11087>>>    End_Function
11088>>>    
11088>>>    // Returns an XML node object for pass item
11088>>>    //
11088>>>    Function CollectionNode Integer I Returns Handle
11090>>>        Handle hoNewNode
11090>>>        Handle infcItem
11090>>>        Get phItem i to infcItem
11091>>>        If (infcItem) ;            Get CreateXMLNode infcItem to hoNewNode
11094>>>        Function_Return hoNewNode
11095>>>    End_Function
11096>>>    
11096>>>    
11096>>>End_Class
11097>>>
11097>>>// Simple declarations of collections.
11097>>>
11097>>>Class cXMLDOMNodeList is a BaseXmlDomNodeList
11098>>>    Import_Class_Protocol cXMLDOMCollectionMixin
11099>>>End_Class
11100>>>
11100>>>Class cXMLDOMNamedNodeMap is a BaseXmlDomNamedNodeMap
11101>>>    
11101>>>    Import_Class_Protocol cXMLDOMCollectionMixin
11102>>>    
11102>>>    // returns a node attribute that matches passed name, zero if none
11102>>>    Function NamedNode String sName Returns Handle
11104>>>        Handle hoNewNode
11104>>>        Handle infcItem
11104>>>        Get NamedItem sName to infcItem
11105>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
11108>>>        Function_Return hoNewNode
11109>>>    End_Function
11110>>>    
11110>>>    // Adds or changes a node attribute
11110>>>    // This should return the passed object Id which is now bound to the attribute. If an error, returns 0
11110>>>    Function SetNamedNode Handle hoNode Returns Handle
11112>>>        Handle hinfcNode hinfcItem
11112>>>        Get XMLInterface of hoNode to hinfcNode // node of passed attribute
11113>>>        Get SetNamedItem hinfcNode to hinfcItem
11114>>>        If hinfcItem ;            Set XMLInterface of hoNode to hinfcItem
11117>>>        Else ;            Move 0 to hoNode // zero indicates error
11119>>>        Function_Return hoNode
11120>>>    End_Function
11121>>>    
11121>>>    // removes named attribute, Returns handle of removed node or zero if not found.
11121>>>    // Note that returned object must be disposed of or moved somewhere else.
11121>>>    Function RemoveNamedNode String sName Returns Handle
11123>>>        Handle hoNewNode
11123>>>        Handle infcItem
11123>>>        Get RemoveNamedItem sName to infcItem
11124>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
11127>>>        Function_Return hoNewNode
11128>>>    End_Function
11129>>>    
11129>>>    Function QualifiedNode String sNameSpace String sBaseName Returns Handle
11131>>>        Handle hoNewNode
11131>>>        Handle infcItem
11131>>>        Get QualifiedItem  sBaseName sNameSpace  to infcItem
11132>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
11135>>>        Function_Return hoNewNode
11136>>>    End_Function
11137>>>    
11137>>>    Function RemoveQualifiedNode String sNameSpace String sBaseName Returns Handle
11139>>>        Handle hoNewNode
11139>>>        Handle infcItem
11139>>>        Get RemoveQualifiedItem sBaseName sNameSpace to infcItem
11140>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
11143>>>        Function_Return hoNewNode
11144>>>    End_Function
11145>>>    
11145>>>End_Class
11146>>>
11146>>>
11146>>>
11146>>>// Mixin for nodes.
11146>>>//
11146>>>//  First the declaration of functions that have no object references.
11146>>>//
11146>>>
11146>>>
11146>>>Class cXMLDOMNodeMixin is a Mixin
11147>>>    
11147>>>    Import_Class_Protocol cXMLDOMMixin
11148>>>    
11148>>>    //  Append Node to the end of list. Returns passed Object handle if Ok, 0 if error
11148>>>    
11148>>>    Function AppendNode Handle hoNode Returns Handle
11150>>>        Handle hinfcNode
11150>>>        Handle infcReturned
11150>>>        // Get COM Interface to call Append child.
11150>>>        Get XMLInterface of hoNode to hinfcNode
11151>>>        If (hinfcNode=0) ;            Function_Return 0
11154>>>        Get AppendChild hinfcNode to infcReturned
11155>>>        // Interface returned is stored in DataFlex object.
11155>>>        If (infcReturned=0) ;            Function_Return 0
11158>>>        Set XMLInterface of hoNode to infcReturned
11159>>>        Function_Return hoNode
11160>>>    End_Function
11161>>>    
11161>>>    //  Insert NewNode before Node. Returns passed newnode Object handle if Ok, 0 if error
11161>>>    
11161>>>    Function InsertBeforeNode Handle hoNewNode Handle hoNode Returns Handle
11163>>>        Handle hinfcNewNode hinfcNode hoRefNode infcReturned
11163>>>        Integer iType
11163>>>        // DOM says if no refnode argument passed or it is 0, append to end
11163>>>        If (Num_Arguments=1) ;            Move 0 to hoRefNode
11166>>>        Else ;            Move hoNode to hoRefNode
11168>>>        Get XMLInterface of hoNewNode to hinfcNewNode
11169>>>        If (hinfcNewNode=0) ;            Function_Return 0
11172>>>        If hoRefNode Begin
11174>>>            Get XMLInterface of hoRefNode to hinfcNode
11175>>>            If (hinfcNode=0) ;                Function_Return 0
11178>>>        End
11178>>>>
11178>>>        Get InsertBefore hinfcNewNode hinfcNode to infcReturned
11179>>>        If (infcReturned=0) ;            Function_Return 0
11182>>>        // Interface returned is stored in DataFlex object.
11182>>>        Set XMLInterface of hoNewNode to infcReturned
11183>>>        Function_Return hoNewNode
11184>>>    End_Function
11185>>>    
11185>>>    //  Remove Node. Returns object Id of removed node, zero if error
11185>>>    //  Important: The node is not destroyed! This lets you move it elsewhere if you want
11185>>>    
11185>>>    Function RemoveNode Handle hoNode Returns Handle
11187>>>        Handle hInfcNode
11187>>>        Get XMLInterface of hoNode to hInfcNode
11188>>>        If (hinfcNode=0) ;            Function_Return 0
11191>>>        Get RemoveChild hInfcNode to hinfcNode
11192>>>        If (hinfcNode=0) ;            Function_Return 0
11195>>>        Set XMLInterface of hoNode to hinfcNode
11196>>>        Function_Return hoNode
11197>>>    End_Function
11198>>>    
11198>>>    //  Replace Node. Returns object Id of replaced node, zero if error
11198>>>    //  Important: The replaced node is not destroyed! This lets you move it elsewhere if you want
11198>>>    
11198>>>    Function ReplaceNode Handle hoNewNode Handle hoNodeToReplace Returns Handle
11200>>>        Handle hInfcNewNode hinfcNodetoReplace hinfcNode
11200>>>        Get XMLInterface of hoNewNode       to hInfcNewNode
11201>>>        Get XMLInterface of hoNodetoReplace to hInfcNodetoreplace
11202>>>        If (hinfcNewNode=0 or hInfcNodeToReplace=0) ;            Function_Return 0
11205>>>        Get ReplaceChild hInfcNewNode hinfcNodeToReplace to hinfcNode
11206>>>        If (hinfcNode=0) ;            Function_Return 0
11209>>>        Set XMLInterface of hoNodetoReplace to hinfcNode
11210>>>        Function_Return hoNodetoReplace
11211>>>    End_Function
11212>>>    
11212>>>    // Remove the named node. Returns handle to removed node. You must destroy
11212>>>    // or move this removed object as needed
11212>>>    
11212>>>    Function RemoveNamedNode String sQueryString Returns Handle
11214>>>        Handle hoNode
11214>>>        Handle hInfcTemplate hinfcNode
11214>>>        Integer iRet
11214>>>        Get SelectSingleNode sQueryString to hinfcTemplate
11215>>>        If (hinfcTemplate) Begin
11217>>>            // Remove child returns an interface to the disassociated node.
11217>>>            // It should be disposed by setting it to an object and then calling destroy
11217>>>            Get RemoveChild hInfcTemplate to hInfcNode
11218>>>            // Even if hInfcTemplate and hInfcNode are the same their reference count will be incremented.
11218>>>            // Therefore we must destroy one the interfaces which will decrement the reference count thus
11218>>>            // avoding a memory leak
11218>>>            Move (invokexml(DF_IXMLDOMNODE, DESTROY_XML_INTERFACE, hInfcTemplate, 0, 0, 0, 0)) to iRet
11219>>>            If hInfcNode ;                Get CreateXMLNode hinfcNode to hoNode
11222>>>        End
11222>>>>
11222>>>        Function_Return hoNode
11223>>>    End_Function
11224>>>    
11224>>>    // This function creates a clone of the passed Node. if bRecurse all child nodes are also
11224>>>    // cloned. The object Id of the new clone object is returned.
11224>>>    // The interface of the object returned can be used in AppendChild to add
11224>>>    // the node to the XML Document.
11224>>>    
11224>>>    Function CloneNode Integer bRecurse Returns Handle
11226>>>        Handle hoNewNode
11226>>>        Handle hinfcNewNode
11226>>>        Get CloneInfcNode (If(bRecurse,-1,0)) to hinfcNewNode
11227>>>        If hinfcNewNode ;            Get CreateXMLNode hinfcNewNode to hoNewNode
11230>>>        Function_Return hoNewNode
11231>>>    End_Function
11232>>>    
11232>>>    //  Create a collection of all nodes. returns handle of a cXMLDomNodeList
11232>>>    
11232>>>    Function ChildNodes Returns Handle
11234>>>        Handle infcNodeList
11234>>>        Handle hoNodeList
11234>>>        Get phChildNodes to infcNodeList
11235>>>        If (infcNodeList) ;            Get CreateXMLObject U_cXMLDOMNodeList infcNodeList to hoNodeList
11238>>>        Function_Return hoNodeList
11239>>>    End_Function
11240>>>    
11240>>>    //  Create a collection of all attributes. returns handle of a cXMLDomNodeMapList
11240>>>    
11240>>>    Function AttributeNodes Returns Handle
11242>>>        Handle hoCollectionId   // Object to hold collection
11242>>>        Handle hinfcAttributes  // XML Interface for collection
11242>>>        Get phAttributes to hinfcAttributes
11243>>>        If (hinfcAttributes) ;            Get CreateXMLObject U_cXMLDOMNamedNodeMap hinfcAttributes to hoCollectionId
11246>>>        Function_Return hoCollectionId
11247>>>    End_Function
11248>>>    
11248>>>    //  Create a collection of all attributes for the temporary attribute node object.
11248>>>    //  Using this saves a small amount of time creating and destroying this object but
11248>>>    //  it must be used with care. This binding is temporary!
11248>>>    Function TempAttributeNodes Returns Handle
11250>>>        Handle hoCollectionId hoDocument
11250>>>        Handle hinfcAttributes  // XML Interface for collection
11250>>>        Get phAttributes to hinfcAttributes
11251>>>        If (hinfcAttributes) Begin
11253>>>            Get DocumentObject to hoDocument
11254>>>            Get phoTempDomNodeMap of hoDocument to hoCollectionId
11255>>>            Set XMLInterface of hoCollectionId to hinfcAttributes
11256>>>        End
11256>>>>
11256>>>        Function_Return hoCollectionId
11257>>>    End_Function
11258>>>    
11258>>>    
11258>>>    // Returns a collection of just elements
11258>>>    
11258>>>    Function ElementNodes String sQueryString Returns Handle
11260>>>        Handle hoNodeList
11260>>>        Handle hinfcNodeList
11260>>>        Get ElementsByTagName sQueryString to hinfcNodeList
11261>>>        If (hinfcNodeList <> 0) ;            Get CreateXMLObject U_cXMLDOMNodeList hinfcNodeList to hoNodeList
11264>>>        Function_Return hoNodeList
11265>>>    End_Function
11266>>>    
11266>>>    
11266>>>    
11266>>>    // Return object handle for query.
11266>>>    
11266>>>    Function FindNode String sQueryString Returns Handle
11268>>>        Handle hoNode
11268>>>        Handle hinfcNode
11268>>>        Get SelectSingleNode sQueryString to hinfcNode
11269>>>        If (hinfcNode <> 0) ;            Get CreateXMLNode hInfcNode to hoNode
11272>>>        Function_Return hoNode
11273>>>    End_Function
11274>>>    
11274>>>    // Return object handle for a collection node.
11274>>>    
11274>>>    
11274>>>    Function FindNodeList String sQueryString Returns Handle
11276>>>        Handle hoNodeList
11276>>>        Handle hinfcNodeList
11276>>>        Get SelectNodes sQueryString to hinfcNodeList
11277>>>        If (hinfcNodeList <> 0) ;            Get CreateXMLObject U_cXMLDOMNodeList hinfcNodeList to hoNodeList
11280>>>        Function_Return hoNodeList
11281>>>    End_Function
11282>>>    
11282>>>    // The CreatexxxxxNode messages creates an node object for the type specified. Both
11282>>>    // the interface and the object or of the correct type (i.e. element, comment)
11282>>>    // These all return an object handle which can be used to place the object via
11282>>>    // appendNode or InsertBeforeNode
11282>>>    
11282>>>    // This function creates a child element, returning a dataflex object.
11282>>>    // The interface of the object returned can be used in AppendChild to add
11282>>>    // the element to the XML Document.
11282>>>    
11282>>>    Function CreateElementNode String sTagName String sValue Returns Handle
11284>>>        Handle hoNewElement
11284>>>        Handle hoDocumentObject
11284>>>        Handle infcNewElement
11284>>>        Integer iClassId
11284>>>        // The DataFlex objects are created inside the nodes (elements).
11284>>>        // Create an element in the document and assign its interface to the new DF object.
11284>>>        Get DocumentObject to hoDocumentObject
11285>>>        Get createElement of hoDocumentObject sTagName to infcNewElement
11286>>>        If infcNewElement Begin // if there was an error, no infc handle would be returned
11288>>>            Get NodeClassId of hoDocumentObject NODE_ELEMENT to iClassId
11289>>>            Get CreateXMLObject iClassId infcNewElement to hoNewElement
11290>>>            If hoNewElement ; // very unlikely this will be zero                Set psText of hoNewElement to sValue
11293>>>        End
11293>>>>
11293>>>        Function_Return hoNewElement
11294>>>    End_Function
11295>>>    
11295>>>    // This function creates an attribute in a document. Attributes are _NOT_ children of an element.
11295>>>    // A DataFlex object is returned. An attribute can be added to an xml document using
11295>>>    // get AddAttributeNode.
11295>>>    
11295>>>    Function CreateAttributeNode String sName String sValue Returns Handle
11297>>>        Handle hoNewAttribute
11297>>>        Handle hoDocumentObject
11297>>>        Handle infcNewAttribute
11297>>>        Integer iClassId
11297>>>        Get DocumentObject to hoDocumentObject
11298>>>        // Create an Attribute in the document and assign its interface to the new DF object.
11298>>>        Get createAttribute of hoDocumentObject sName to infcNewAttribute
11299>>>        If infcNewAttribute Begin // if there was an error, no infc handle would be returned
11301>>>            Get NodeClassId of hoDocumentObject NODE_ATTRIBUTE to iClassId
11302>>>            Get CreateXMLObject iClassId infcNewAttribute to hoNewAttribute
11303>>>            // Set the value of the attribute.
11303>>>            If hoNewAttribute ; // very unlikely this will be 0                Set psText of hoNewAttribute to sValue
11306>>>        End
11306>>>>
11306>>>        Function_Return hoNewAttribute
11307>>>    End_Function
11308>>>    
11308>>>    // This function creates a child comment, returning a dataflex object.
11308>>>    // The interface of the object returned can be used in AppendChild to add
11308>>>    // the comment to the XML Document.
11308>>>    
11308>>>    Function CreateChildComment String sValue Returns Handle
11310>>>        Handle hoNewComment
11310>>>        Handle hoDocumentObject
11310>>>        Handle infcNewComment
11310>>>        Integer iClassID
11310>>>        Get DocumentObject to hoDocumentObject
11311>>>        // Create an Comment in the document and assign its interface to the new DF object.
11311>>>        Get createComment of hoDocumentObject sValue to infcNewComment
11312>>>        If infcNewComment Begin // if there was an error, no infc handle would be returned
11314>>>            Get NodeClassId of hoDocumentObject NODE_COMMENT to iClassId
11315>>>            Get CreateXMLObject iClassId infcNewComment to hoNewComment
11316>>>            If hoNewComment ; // very unlikely this will be 0                Set psText of hoNewComment to sValue
11319>>>        End
11319>>>>
11319>>>        Function_Return hoNewComment
11320>>>    End_Function
11321>>>    
11321>>>    // This function creates a child processing instruction, returning a dataflex object.
11321>>>    // The interface of the object returned can be used in AppendChild to add
11321>>>    // the processing instruction to the XML Document.
11321>>>    
11321>>>    Function CreateChildProcessingInstruction String sTarget String sValue Returns Handle
11323>>>        Handle hoNewProcessingInstruction
11323>>>        Handle hoDocumentObject
11323>>>        Handle infcNewProcessingInstruction
11323>>>        Integer iClassID
11323>>>        Get DocumentObject to hoDocumentObject
11324>>>        // Create an ProcessingInstruction in the document and assign its interface to the new DF object.
11324>>>        Get createProcessingInstruction of hoDocumentObject sTarget sValue to infcNewProcessingInstruction
11325>>>        If infcNewProcessingInstruction  Begin // if there was an error, no infc handle would be returned
11327>>>            Get NodeClassId of hoDocumentObject NODE_PROCESSING_INSTRUCTION to iClassId
11328>>>            Get CreateXMLObject iClassID infcNewProcessingInstruction to hoNewProcessingInstruction
11329>>>        End
11329>>>>
11329>>>        Function_Return hoNewProcessingInstruction
11330>>>    End_Function
11331>>>    
11331>>>    // This function creates a child text node, returning a dataflex object.
11331>>>    // The interface of the object returned can be used in AppendChild to add
11331>>>    // the text node to the XML Document.
11331>>>    
11331>>>    Function CreateChildTextNode String sValue Returns Handle
11333>>>        Handle hoNewTextNode
11333>>>        Handle hoDocumentObject
11333>>>        Handle infcNewTextNode
11333>>>        Integer iClassID
11333>>>        Get DocumentObject to hoDocumentObject
11334>>>        // Create an TextNode in the document and assign its interface to the new DF object.
11334>>>        Get createTextNode of hoDocumentObject sValue to infcNewTextNode
11335>>>        If infcNewTextNode Begin // if there was an error, no infc handle would be returned
11337>>>            Get NodeClassId of hoDocumentObject NODE_TEXT to iClassId
11338>>>            Get CreateXMLObject iClassId infcNewTextNode to hoNewTextNode
11339>>>        End
11339>>>>
11339>>>        Function_Return hoNewTextNode
11340>>>    End_Function
11341>>>    
11341>>>    // This function creates a cdata text node, returning a dataflex object.
11341>>>    // The interface of the object returned can be used in AppendChild to add
11341>>>    // the cdata node to the XML Document.
11341>>>    
11341>>>    Function CreateCDATASectionNode String sValue Returns Handle
11343>>>        Handle hoNewNode
11343>>>        Handle hoDocumentObject
11343>>>        Handle infcNewNode
11343>>>        Integer iClassId
11343>>>        // The DataFlex objects are created inside the nodes (elements).
11343>>>        // Create an element in the document and assign its interface to the new DF object.
11343>>>        Get DocumentObject to hoDocumentObject
11344>>>        Get createCDATASection of hoDocumentObject sValue to infcNewNode
11345>>>        If infcNewNode Begin
11347>>>            Get NodeClassId of hoDocumentObject NODE_CDATA_SECTION to iClassId
11348>>>            Get CreateXMLObject iClassId infcNewNode to hoNewNode
11349>>>        End
11349>>>>
11349>>>        Function_Return hoNewNode
11350>>>    End_Function
11351>>>    
11351>>>    // Create a document fragment.  Document fragments can be used to house nodes temporarily. When
11351>>>    // You append or insert a document fragment (appendNode InsertBeforeNode) child nodes are appended
11351>>>    // to the destination object and not the fragment node itself. This is useful!
11351>>>    
11351>>>    Function CreateDocumentFragmentNode Returns Handle
11353>>>        Handle hoNew
11353>>>        Handle hoDocumentObject
11353>>>        Handle infcNew
11353>>>        Integer iClassID
11353>>>        Get DocumentObject to hoDocumentObject
11354>>>        // Create an Comment in the document and assign its interface to the new DF object.
11354>>>        Get createDocumentFragment of hoDocumentObject to infcNew
11355>>>        If infcNew Begin // if there was an error, no infc handle would be returned
11357>>>            Get NodeClassId of hoDocumentObject NODE_DOCUMENT_FRAGMENT to iClassId
11358>>>            Get CreateXMLObject iClassId infcNew to hoNew
11359>>>        End
11359>>>>
11359>>>        Function_Return hoNew
11360>>>    End_Function
11361>>>    
11361>>>    //  Create a Node of any passed Type (e.g. Node_element). Normally you don't need this as there are
11361>>>    //  specific messages to do this for each node type. Node that this lets you pass namespaces as a separate
11361>>>    //  parameter. With all of the other messages (e.g. createElementNode) you pass namespaces as prefixed to
11361>>>    // the tagname (e.g. Get CreateElementNode "MyNameSpace:MyTag" "MyValue" to hoEle)
11361>>>    
11361>>>    Function CreateChildNode Integer iNodeType String sTagName String sNameSpace Returns Handle
11363>>>        Handle hoNewNode hoDocumentObject
11363>>>        Handle infcNewNode
11363>>>        Integer iClassid iType
11363>>>        Get DocumentObject to hoDocumentObject
11364>>>        Get NodeClassId iNodeType to iClassId
11365>>>        If (iClassId<>0) Begin
11367>>>            // Create a node in the document and assign its interface to the new DF object.
11367>>>            Get createNode of hoDocumentObject iNodeType sTagName sNameSpace to infcNewNode
11368>>>            // this is required to force the interface type to be correct.
11368>>>            Move (invokexml(DF_IXMLDOMNODE, GET_piNodeType, infcNewNode, 0, 0, 0, 0)) to iType
11369>>>            Move (invokexml(DF_IXMLDOMNODE, GET_ChangeNodeType, infcNewNode, iType, 1, 0, 0)) to infcNewNode
11370>>>            
11370>>>            If infcNewNode ;                Get CreateXMLObject iClassId infcNewNode to hoNewNode
11373>>>        End
11373>>>>
11373>>>        Function_Return hoNewNode
11374>>>    End_Function
11375>>>    
11375>>>    
11375>>>    
11375>>>    // The Addxxxxx messages create a new node and appends it to the list. When used as a function,
11375>>>    // the object handle is returned and must be disposed of later by the programmer.
11375>>>    // When used as a procedure, the object is destroyed--it just does it and is done.
11375>>>    
11375>>>    Function AddElement String sTagName String sValue Returns Handle
11377>>>        Handle hoNewElement
11377>>>        Get CreateElementNode sTagName sValue to hoNewElement
11378>>>        If hoNewElement ;            Get AppendNode hoNewElement to hoNewElement
11381>>>        Function_Return hoNewElement
11382>>>    End_Function
11383>>>    
11383>>>    Procedure AddElement String sTagName String sValue
11385>>>        Handle hoNewElement
11385>>>        Get AddElement sTagName sValue to hoNewElement
11386>>>        If hoNewElement ;            Send Destroy to hoNewElement
11389>>>        Else ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddElement"))
11391>>>    End_Procedure
11392>>>    
11392>>>    // this returns the object, This is often needed
11392>>>    Function CreateElementNodeNS String sNameSpace String sTagName String sValue Returns Handle
11394>>>        Handle hoNewElement
11394>>>        Get CreateChildNode NODE_ELEMENT sTagName sNameSpace to hoNewElement
11395>>>        If (hoNewElement and sValue<>"") ;            Set psText of hoNewElement to sValue
11398>>>        Function_Return hoNewElement
11399>>>    End_Function
11400>>>    
11400>>>    
11400>>>    // this returns the object, This is often needed
11400>>>    Function AddElementNS String sNameSpace String sTagName String sValue Returns Handle
11402>>>        Handle hoNewElement
11402>>>        Get CreateElementNodeNS sNameSpace sTagName sValue to hoNewElement
11403>>>        If hoNewElement Begin
11405>>>            Get AppendNode hoNewElement to hoNewElement
11406>>>        End
11406>>>>
11406>>>        Function_Return hoNewElement
11407>>>    End_Function
11408>>>    
11408>>>    Procedure AddElementNS String sNameSpace String sTagName String sValue
11410>>>        Handle hoNewElement
11410>>>        Get AddElementNS sNameSpace sTagName sValue to hoNewElement
11411>>>        If hoNewElement ;            Send Destroy to hoNewElement
11414>>>        Else ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddElementNS"))
11416>>>    End_Procedure
11417>>>    
11417>>>    Function AddAttributeNode Handle hoNode Returns Handle
11419>>>        Handle hInfc
11419>>>        Get Set_AttributeNode (XmlInterface(hoNode)) to hInfc
11420>>>        If hInfc ; // if ret value we have a replacement            Set XmlInterface of hoNode to hInfc
11423>>>        Function_Return hoNode
11424>>>    End_Function
11425>>>    
11425>>>    Function AttributeValueNode String sName Returns Handle
11427>>>        Handle hInfc
11427>>>        Handle hoNode
11427>>>        Get AttributeNode sName to hInfc
11428>>>        If hInfc ; // if ret value we have a replacement            Get CreateXMLNode hInfc to hoNode
11431>>>        Function_Return hoNode
11432>>>    End_Function
11433>>>    
11433>>>    Function AttributeValueNodeNS String sNameSpace String sBaseName Returns Handle
11435>>>        Handle hoAttrs hoAttr
11435>>>        String sValue
11435>>>        Get TempAttributeNodes to hoAttrs
11436>>>        If hoAttrs Begin
11438>>>            Get QualifiedNode of hoAttrs sNamespace sBaseName to hoAttr
11439>>>            Set XMLInterface of hoAttrs to 0
11440>>>        End
11440>>>>
11440>>>        Function_Return hoAttr
11441>>>    End_Function
11442>>>    
11442>>>    
11442>>>    Function CreateAttributeNodeNS String sNameSpace String sName String sValue Returns Handle
11444>>>        Handle hoNewAttribute
11444>>>        Get CreateChildNode NODE_ATTRIBUTE sName sNameSpace to hoNewAttribute
11445>>>        If hoNewAttribute ;            Set psText of hoNewAttribute to sValue
11448>>>        Function_Return hoNewAttribute
11449>>>    End_Function
11450>>>    
11450>>>    Procedure AddAttributeNS String sNameSpace String sName String sValue
11452>>>        Handle hoNode
11452>>>        Get CreateAttributeNodeNS sNameSpace sName sValue to hoNode
11453>>>        If hoNode Begin
11455>>>            Get AddAttributeNode hoNode to hoNode
11456>>>            If hoNode ;                Send Destroy of hoNode
11459>>>        End
11459>>>>
11459>>>        Else ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddAttributeNS"))
11461>>>    End_Procedure
11462>>>    
11462>>>    
11462>>>    // This function encapsulates creation and addition of attributes to a node.
11462>>>    // should only work with element class
11462>>>    Procedure AddAttribute String sName String sValue
11464>>>        Set AttributeValue sName to sValue
11465>>>    End_Procedure
11466>>>    
11466>>>    // This function encapsulates creation and addition of comments to a node.
11466>>>    // The return value is a Boolean that is currently unused.
11466>>>    
11466>>>    Procedure AddChildComment String sValue
11468>>>        Handle hoNewNode
11468>>>        Get createChildComment sValue to hoNewNode
11469>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddChildComment"))
11472>>>        Else Begin
11473>>>            Get AppendNode hoNewNode to hoNewNode
11474>>>            Send Destroy to hoNewNode
11475>>>        End
11475>>>>
11475>>>    End_Procedure
11476>>>    
11476>>>    // This function encapsulates creation and addition of processing instructions to a node.
11476>>>    // The return value is a Boolean that is currently unused.
11476>>>    
11476>>>    Procedure AddChildProcessingInstruction String sTarget String sValue
11478>>>        Handle hoNewNode
11478>>>        Get createChildProcessingInstruction sTarget sValue to hoNewNode
11479>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddChildProcessingInstruction"))
11482>>>        Else Begin
11483>>>            Get AppendNode hoNewNode to hoNewNode
11484>>>            Send Destroy to hoNewNode
11485>>>        End
11485>>>>
11485>>>    End_Procedure
11486>>>    
11486>>>    
11486>>>    // This function encapsulates creation and addition of text nodes to a node.
11486>>>    // The return value is a Boolean that is currently unused.
11486>>>    
11486>>>    Procedure AddChildTextNode String sValue
11488>>>        Handle hoNewNode
11488>>>        Get createChildTextNode sValue to hoNewNode
11489>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddChildTextNode"))
11492>>>        Else Begin
11493>>>            Get AppendNode hoNewNode to hoNewNode
11494>>>            Send Destroy to hoNewNode
11495>>>        End
11495>>>>
11495>>>    End_Procedure
11496>>>    
11496>>>    // This procedure encapsulates creation and addition of cdata text nodes to a node.
11496>>>    Procedure AddCDataSection String sValue
11498>>>        Handle hoNewNode
11498>>>        Get CreateCDATASectionNode sValue to hoNewNode
11499>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddCDataSection"))
11502>>>        Else Begin
11503>>>            Get AppendNode hoNewNode to hoNewNode
11504>>>            Send Destroy to hoNewNode
11505>>>        End
11505>>>>
11505>>>    End_Procedure
11506>>>    
11506>>>    
11506>>>    Function AddChildNode Integer iNodeType String sTagName String sNameSpace Returns Handle
11508>>>        Handle hoNewNode
11508>>>        Handle hoDocumentObject
11508>>>        Get DocumentObject to hoDocumentObject
11509>>>        Get createChildNode of hoDocumentObject iNodeType sTagName sNamespace to hoNewNode
11510>>>        If hoNewNode ;            Get AppendNode hoNewNode to hoNewNode
11513>>>        Function_Return hoNewNode
11514>>>    End_Function
11515>>>    
11515>>>    // don't use the runtime/msxml version of this. Instead just return the
11515>>>    // first text from the first child node. This is much faster
11515>>>    Function psText Returns String
11517>>>        Handle hText
11517>>>        String sValue
11517>>>        Get phFirstChild to hText
11518>>>        Get InfcNodeValue hText to sValue
11519>>>        Function_Return sValue
11520>>>    End_Function
11521>>>    
11521>>>    // Use this to call the internal Text property. This returns all text for all child
11521>>>    // node. You rarely would want to do this. The is uses the msxml psText which can
11521>>>    // get slow with very large files. If for some reason you need all of the child node's
11521>>>    // text and the file is large, you might want to consider doing this process manually.
11521>>>    Function AllChildNodesText Returns String
11523>>>        String sValue
11523>>>        Forward Get psText to sValue
11525>>>        Function_Return sValue
11526>>>    End_Function
11527>>>    
11527>>>    // return the interface NodeValue without having to create a
11527>>>    // new object. This also disposes the hInfc interface
11527>>>    Function InfcNodeValue Handle hInfc Returns String
11529>>>        Handle hoDocument hoTempNode
11529>>>        String sValue
11529>>>        If (hinfc) Begin
11531>>>            Get DocumentObject to hoDocument
11532>>>            Get phoTempDomNode of hoDocument to hoTempNode
11533>>>            Set XMLInterface of hoTempNode to hInfc
11534>>>            Get psNodeValue of hoTempNode to sValue
11535>>>            // This disposes of hInfc which was passed in. After
11535>>>            // calling this you can no longer use it (which is good).
11535>>>            Set XMLInterface of hoTempNode to 0
11536>>>        End
11536>>>>
11536>>>        Function_Return sValue
11537>>>    End_Function
11538>>>    
11538>>>    // ChildNodeValue is used to get the "value" of an element. This is useful when the element
11538>>>    // only has a single value (similar to an attribute).
11538>>>    
11538>>>    Function ChildNodeValue String sTagName Returns String
11540>>>        Handle hoTempNode hoDocument
11540>>>        Handle hinfcTempNode
11540>>>        String sRetVal
11540>>>        Get SelectSingleNode sTagName to hinfcTempNode
11541>>>        If (hinfcTempNode <> 0) Begin
11543>>>            Get DocumentObject to hoDocument
11544>>>            Get phoTempDomNode of hoDocument to hoTempNode
11545>>>            Set XMLInterface of hoTempNode to hinfcTempNode
11546>>>            Get phFirstChild of hoTempNode to hinfcTempNode
11547>>>            Set XMLInterface of hoTempNode to 0
11548>>>            If hinfcTempNode Begin
11550>>>                Get InfcNodeValue hinfcTempNode to sRetVal
11551>>>            End
11551>>>>
11551>>>        End
11551>>>>
11551>>>        Function_Return sRetVal
11552>>>    End_Function
11553>>>    
11553>>>    // This simple function allows a parent to change the text of one of its elements.
11553>>>    // This actually occurs quite a bit, because (as stated above) lowest level
11553>>>    // elements are frequently used as properties.
11553>>>    //
11553>>>    Procedure SetChildNodeValue String sTagName String sValue
11555>>>        Handle hoTempNode
11555>>>        Handle hinfcTempNode
11555>>>        // Search for the node that matches.
11555>>>        Get SelectSingleNode sTagName to hinfcTempNode
11556>>>        // If no match is found, add a new element with the tag.
11556>>>        If (hinfcTempNode = 0) ;            Send AddElement sTagName sValue
11559>>>        Else Begin
11560>>>            Get CreateXMLObject U_BaseXMLDOMNode hinfcTempNode to hoTempNode
11561>>>            If hoTempNode Begin
11563>>>                // Set the text of the element.
11563>>>                Set psText of hoTempNode to sValue
11564>>>                Send Destroy to hoTempNode
11565>>>            End
11565>>>>
11565>>>            Else ;                Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_SetChildNodeValue"))
11567>>>        End
11567>>>>
11567>>>    End_Procedure
11568>>>    
11568>>>    // These messages are used to allow you to travese through a nodes.
11568>>>    
11568>>>    Function FirstChild Returns Handle
11570>>>        Handle hoChild
11570>>>        Handle hinfcChild
11570>>>        Get phFirstChild  to hinfcChild
11571>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
11574>>>        Function_Return hoChild
11575>>>    End_Function
11576>>>    
11576>>>    Function NextSibling Returns Handle
11578>>>        Handle hoChild
11578>>>        Handle hinfcChild
11578>>>        Get phNextSibling  to hinfcChild
11579>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
11582>>>        Function_Return hoChild
11583>>>    End_Function
11584>>>    
11584>>>    Function PreviousSibling Returns Handle
11586>>>        Handle hoChild
11586>>>        Handle hinfcChild
11586>>>        Get phPreviousSibling  to hinfcChild
11587>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
11590>>>        Function_Return hoChild
11591>>>    End_Function
11592>>>    
11592>>>    Function LastChild Returns Handle
11594>>>        Handle hoChild
11594>>>        Handle hinfcChild
11594>>>        Get phLastChild  to hinfcChild
11595>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
11598>>>        Function_Return hoChild
11599>>>    End_Function
11600>>>    
11600>>>    // return an object that is the parent of the current node
11600>>>    Function ParentNode Returns Handle
11602>>>        Handle hoId
11602>>>        Handle hinfcXMLInterface
11602>>>        Get phParentNode to hinfcXMLInterface
11603>>>        If (hinfcXMLInterface) ;            Get CreateXmlNode hinfcXMLInterface to hoID
11606>>>        Function_Return hoID
11607>>>    End_Function
11608>>>    
11608>>>    // Same as NextSibling except it uses or destroys the current node
11608>>>    //
11608>>>    // optimized version does not destroy/create object unless it needs to.
11608>>>    // if the next node is the same node type we will resuse this object
11608>>>    // else this object is destroyed
11608>>>    Function NextNode Returns Handle
11610>>>        Handle hoNode hoDocument
11610>>>        Handle hInfc
11610>>>        Get phNextSibling to hInfc
11611>>>        If hInfc Begin
11613>>>            Get DocumentObject to hoDocument
11614>>>            Move Self to hoNode
11615>>>            Send BindXMLInfc of hoDocument hInfc (&hoNode)
11616>>>        End
11616>>>>
11616>>>        Else Begin
11617>>>            Send Destroy
11618>>>            Move 0 to hoNode
11619>>>        End
11619>>>>
11619>>>        Function_Return hoNode
11620>>>    End_Function
11621>>>    
11621>>>    
11621>>>    // Enumerate through all nodes.
11621>>>    
11621>>>    Procedure EnumerateNodes Integer iMsg Handle hoReceiver String sVal1 String sVal2
11623>>>        Integer i iLen
11623>>>        Handle hoNode
11623>>>        Handle hoNodeCollection
11623>>>        Get ChildNodes to hoNodeCollection
11624>>>        If (hoNodeCollection <> 0) Begin
11626>>>            Get NodeListLength of hoNodeCollection to iLen
11627>>>            Decrement iLen
11628>>>            For i from 0 to iLen
11634>>>>
11634>>>                // For each record, process its fields.
11634>>>                Get CollectionNode of hoNodeCollection i to hoNode
11635>>>                Send iMsg of hoReceiver hoNode sVal1 sVal2
11636>>>                Send Destroy of hoNode
11637>>>            Loop
11638>>>>
11638>>>            Send Destroy of hoNodeCollection
11639>>>        End
11639>>>>
11639>>>    End_Procedure
11640>>>    
11640>>>    // Enumerate through all elements.
11640>>>    
11640>>>    Procedure EnumerateElements Integer iMsg Handle hoReceiver String sVal1 String sVal2
11642>>>        Integer i iLen
11642>>>        Handle hoNode
11642>>>        Handle hoNodeCollection
11642>>>        Get ChildNodes to hoNodeCollection
11643>>>        If (hoNodeCollection <> 0) Begin
11645>>>            Get NodeListLength of hoNodeCollection to iLen
11646>>>            Decrement iLen
11647>>>            For i from 0 to iLen
11653>>>>
11653>>>                // For each record, process its fields.
11653>>>                Get CollectionNode of hoNodeCollection i to hoNode
11654>>>                If (piNodeType(hoNode)=NODE_ELEMENT) ;                    Send iMsg of hoReceiver hoNode sVal1 sVal2
11657>>>                Send Destroy of hoNode
11658>>>            Loop
11659>>>>
11659>>>            Send Destroy of hoNodeCollection
11660>>>        End
11660>>>>
11660>>>    End_Procedure
11661>>>    
11661>>>    
11661>>>    // enumerate through all attributes. There is no recurse here because attributes will not
11661>>>    // contain attributes.
11661>>>    
11661>>>    Procedure EnumerateAttributes Integer iMsg Handle hoReceiver String sSomeValue
11663>>>        Integer i iLen
11663>>>        Handle hoNode
11663>>>        Handle hoNodeMapCollection
11663>>>        // we don't use tempattributenodes because we don't know what the enum message will do.
11663>>>        Get AttributeNodes to hoNodeMapCollection
11664>>>        If (hoNodeMapCollection <> 0) Begin
11666>>>            Get NodeListLength of hoNodeMapCollection to iLen
11667>>>            Decrement iLen
11668>>>            For i from 0 to iLen
11674>>>>
11674>>>                // For each record, process its fields.
11674>>>                Get CollectionNode of hoNodeMapCollection i to hoNode
11675>>>                Send iMsg of hoReceiver hoNode sSomeValue
11676>>>                Send Destroy of hoNode
11677>>>            Loop
11678>>>>
11678>>>            Send Destroy of hoNodeMapCollection
11679>>>        End
11679>>>>
11679>>>    End_Procedure
11680>>>    
11680>>>    
11680>>>    Function XSLTransformation Handle hoXSLDocument Returns String
11682>>>        Handle infcXSLStartAt
11682>>>        String sBuffer
11682>>>        // Transformation is of current object using passed XSLDocument.
11682>>>        Get XMLInterface of hoXSLDocument to infcXSLStartAt
11683>>>        Get TransformNode infcXSLStartAt to sBuffer
11684>>>        Function_Return sBuffer
11685>>>    End_Function
11686>>>    
11686>>>    // This allows for transformations not limited to the size of the string buffer
11686>>>    //
11686>>>    // Note that it is up to the programmer to dispose of the memory allocated at pBuffer
11686>>>    // by using the free(pBuffer) function
11686>>>    //
11686>>>    Function XSLTransformationToAddress Handle hoXSLDocument Returns Pointer
11688>>>        Handle infcXSLStartAt
11688>>>        Pointer pBuffer
11688>>>        // Transformation is of current object using passed XSLDocument.
11688>>>        Get XMLInterface of hoXSLDocument to infcXSLStartAt
11689>>>        Get TransformNodeToAddress infcXSLStartAt to pBuffer
11690>>>        Function_Return pBuffer
11691>>>    End_Function
11692>>>    
11692>>>    
11692>>>    // extract base name from string. e.g.: ns:name --> name
11692>>>    //
11692>>>    Function BaseNameFromQName String sName Returns String
11694>>>        Integer iPos
11694>>>        Move (Pos(":",sName)) to iPos
11695>>>        If iPos Begin
11697>>>            Move (remove(sName,1,iPos)) to sName
11698>>>        End
11698>>>>
11698>>>        Function_Return sName
11699>>>    End_Function
11700>>>    
11700>>>    // extract prefix name from string. e.g.: ns:name --> ns
11700>>>    //
11700>>>    Function PrefixNameFromQName String sName Returns String
11702>>>        String sPreFix
11702>>>        Integer iPos
11702>>>        Move (Pos(":",sName)) to iPos
11703>>>        If iPos Begin
11705>>>            Move (Left(sName,iPos-1)) to sPreFix
11706>>>        End
11706>>>>
11706>>>        Function_Return sPreFix
11707>>>    End_Function
11708>>>    
11708>>>    
11708>>>    // Returns true if node is element and namespace and base name match
11708>>>    //
11708>>>    Function IsElementNS String sNamespaceURI String sBaseName Returns Boolean
11710>>>        Function_Return (piNodeType(Self)=NODE_ELEMENT and ;            psNameSpaceURI(Self)=sNamespaceURI and ;            psBaseName(Self)=sBaseName )
11711>>>    End_Function
11712>>>    
11712>>>    // Returns node of first occurence of child node matching namespace and base name
11712>>>    //
11712>>>    Function ChildElementNS String sNameSpaceURI String sBaseName Returns Handle
11714>>>        Handle hoNode
11714>>>        Get FirstChild to hoNode
11715>>>        While (hoNode and not(IsElementNS(hoNode, sNameSpaceURI, sBaseName)))
11719>>>            Get NextNode of hoNode to hoNode
11720>>>        Loop
11721>>>>
11721>>>        Function_Return hoNode
11722>>>    End_Function
11723>>>    
11723>>>    Function NextElementNS String sNameSpaceURI String sBaseName Returns Handle
11725>>>        Handle hoNode
11725>>>        // NextNode may return the same object or it may destroy the object and
11725>>>        // return nothing or a different object
11725>>>        Get NextNode to hoNode
11726>>>        While (hoNode and not(IsElementNS(hoNode, sNameSpaceURI, sBaseName)))
11730>>>            // use of hoNode is required. This can be different than self
11730>>>            Get NextNode of hoNode to hoNode
11731>>>        Loop
11732>>>>
11732>>>        
11732>>>        Function_Return hoNode
11733>>>    End_Function
11734>>>    
11734>>>    
11734>>>    // Returns value (string) first occurence of child node matching namespace and base name
11734>>>    //
11734>>>    Function ChildElementValueNS String sNameSpaceURI String sBaseName Returns String
11736>>>        Handle hoNext
11736>>>        String sText
11736>>>        Get ChildElementNS sNameSpaceURI sBaseName to hoNext
11737>>>        If hoNext Begin
11739>>>            Get psText of hoNext to sText
11740>>>            Send destroy of hoNext
11741>>>        End
11741>>>>
11741>>>        Function_Return sText
11742>>>    End_Function
11743>>>    
11743>>>    Procedure SetChildElementValueNS String sNameSpaceURI String sBaseName String sValue
11745>>>        Handle hoNode
11745>>>        Handle hinfcTempNode
11745>>>        Get ChildElementNS sNameSpaceURI sBaseName to hoNode
11746>>>        If (hoNode=0) Begin
11748>>>            Send AddElementNS sNameSpaceURI sBaseName sValue
11749>>>        End
11749>>>>
11749>>>        Else Begin
11750>>>            Set psText of hoNode to sValue
11751>>>            Send destroy of hoNode
11752>>>        End
11752>>>>
11752>>>    End_Procedure
11753>>>    
11753>>>    // pass a prefix and try to finds its NameSpaceURI. Start at current node and work up to parent.
11753>>>    // This can be useful when a qualified name is found in an attribute value
11753>>>    //
11753>>>    Function PrefixToNamespaceURI String sPrefix Returns String
11755>>>        Handle hoNode
11755>>>        Integer i iNodes
11755>>>        Handle hoNodes hoParentNode hoAttNode
11755>>>        Boolean bDone bParent
11755>>>        String sAttPrefix sName sNameSpace
11755>>>        
11755>>>        Move Self to hoNode
11756>>>        While not bDone
11760>>>            Get TempAttributeNodes of hoNode to hoNodes
11761>>>            If (hoNodes <> 0) Begin
11763>>>                Get NodeListLength of hoNodes to iNodes
11764>>>                For i from 0 to (iNodes-1)
11770>>>>
11770>>>                    // For each record, process its fields.
11770>>>                    Get CollectionNode of hoNodes i to hoAttNode
11771>>>                    Get psPrefix of hoAttNode to sAttPrefix
11772>>>                    Get psBaseName of hoAttNode to sName
11773>>>                    // with legacy msxml, xmlns="foo" returns psPrefix="xmlns" and pbBaseName=""
11773>>>                    // with newer msxml, xmlns="foo" returns psPrefix="" and pbBaseName="xmlns"
11773>>>                    // We handle both cases here.
11773>>>                    
11773>>>                    If ( (sAttPrefix="xmlns" and sName=sPrefix) or ; // if a normal xmlns:xx="foo" match (sPrefix="xx") or a legacy xmlns="foo" match (sPrefix="")                        (sPrefix="" and sAttPrefix="" and sName="xmlns") ) Begin // special test for newer msxml xmlns="foo" match (sPrefix="")
11775>>>                        
11775>>>                        Get Value of hoAttNode to sNameSpace
11776>>>                        Move True to bDone
11777>>>                        Move (iNodes-1) to i
11778>>>                        
11778>>>                    End
11778>>>>
11778>>>                    
11778>>>                    Send Destroy of hoAttNode
11779>>>                Loop
11780>>>>
11780>>>                Set XMLInterface of hoNodes to 0
11781>>>            End
11781>>>>
11781>>>            
11781>>>            Get ParentNode of hoNode to hoParentNode
11782>>>            If bParent ;                Send destroy of hoNode
11785>>>            If not bDone Begin
11787>>>                If not hoParentNode ;                    Move True to bDone
11790>>>                Else Begin
11791>>>                    Move True to bParent
11792>>>                    Move hoParentNode to hoNode
11793>>>                End
11793>>>>
11793>>>            End
11793>>>>
11793>>>        Loop
11794>>>>
11794>>>        Function_Return sNameSpace
11795>>>    End_Function
11796>>>    
11796>>>    
11796>>>    
11796>>>End_Class
11797>>>
11797>>>// Set up basic inheritance for specialized forms of XML classes.
11797>>>// This needs to be done so we can make objects of these types.
11797>>>
11797>>>Class cXMLDOMElement is a BaseXmlDomElement
11798>>>    Import_Class_Protocol cXMLDOMNodeMixin
11799>>>    
11799>>>    // Should use AddAttributeValue...does same thing
11799>>>    Procedure SetAttributeValue String sName String sValue
11801>>>        Send AddAttribute sName sValue
11802>>>    End_Procedure
11803>>>    
11803>>>    // Note: Get_AttributeValue already there
11803>>>    
11803>>>    Procedure RemoveAttribute String sName
11805>>>        Integer iVal
11805>>>        Get RemoveAttribute sName to iVal
11806>>>    End_Procedure
11807>>>    
11807>>>    Function AttributeValueNS String sNameSpace String sBaseName Returns String
11809>>>        String sValue
11809>>>        Handle hinfcItem
11809>>>        Handle hoDoc hoTempAttributeNodes hoNode
11809>>>        Integer hinfcAttributes
11809>>>        
11809>>>        Get TempAttributeNodes to hoTempAttributeNodes
11810>>>        Get QualifiedItem of hoTempAttributeNodes sBaseName sNameSpace  to hinfcItem
11811>>>        Set XMLInterface of hoTempAttributeNodes to 0
11812>>>        If hinfcItem Begin
11814>>>            Get DocumentObject to hoDoc
11815>>>            Get phoTempDomNode of hoDoc to hoNode
11816>>>            Set XMLInterface of hoNode to hinfcItem
11817>>>            Get psNodeValue of hoNode to sValue
11818>>>            Set XMLInterface of hoNode to 0
11819>>>        End
11819>>>>
11819>>>        Function_Return sValue
11820>>>    End_Function
11821>>>    
11821>>>    Procedure RemoveAttributeNS String sNameSpace String sBaseName
11823>>>        Handle hoAttrs hoAttr
11823>>>        String sValue
11823>>>        Get TempAttributeNodes to hoAttrs
11824>>>        If hoAttrs Begin
11826>>>            Get RemoveQualifiedNode of hoAttrs sNamespace sBaseName to hoAttr
11827>>>            Set XMLInterface of hoAttrs to 0
11828>>>            If hoAttr ;                Send destroy of hoAttr
11831>>>        End
11831>>>>
11831>>>    End_Procedure
11832>>>    
11832>>>End_Class
11833>>>
11833>>>Class cXMLDOMNode is a BaseXmlDomNode
11834>>>    Import_Class_Protocol cXMLDOMNodeMixin
11835>>>End_Class
11836>>>
11836>>>Class cXMLDOMAttribute is a BaseXmlDomAttribute
11837>>>    Import_Class_Protocol cXMLDOMNodeMixin
11838>>>End_Class
11839>>>
11839>>>Class cXMLDOMComment is a BaseXmlDomComment
11840>>>    Import_Class_Protocol cXMLDOMNodeMixin
11841>>>End_Class
11842>>>
11842>>>Class cXMLDOMProcessingInstruction is a BaseXmlDomProcessingInstruction
11843>>>    Import_Class_Protocol cXMLDOMNodeMixin
11844>>>End_Class
11845>>>
11845>>>Class cXMLDOMTextNode is a BaseXmlDomTextNode
11846>>>    Import_Class_Protocol cXMLDOMNodeMixin
11847>>>End_Class
11848>>>
11848>>>Class cXMLDOMCDATASection is a BaseXmlDomCDATASection
11849>>>    Import_Class_Protocol cXMLDOMNodeMixin
11850>>>End_Class
11851>>>
11851>>>Class cXMLDOMDocumentType is a BaseXmlDomDocumentType
11852>>>    Import_Class_Protocol cXMLDOMNodeMixin
11853>>>    
11853>>>End_Class
11854>>>
11854>>>Class cXMLDOMNotation is a BaseXmlDomNotation
11855>>>    Import_Class_Protocol cXMLDOMNodeMixin
11856>>>End_Class
11857>>>
11857>>>Class cXMLDOMEntity is a BaseXmlDomEntity
11858>>>    Import_Class_Protocol cXMLDOMNodeMixin
11859>>>End_Class
11860>>>
11860>>>Class cXMLDOMEntityReference is a BaseXmlDomEntityReference
11861>>>    Import_Class_Protocol cXMLDOMNodeMixin
11862>>>End_Class
11863>>>
11863>>>Class cXMLDOMDocumentFragment is a BaseXmlDomDocumentFragment
11864>>>    Import_Class_Protocol cXMLDOMNodeMixin
11865>>>End_Class
11866>>>
11866>>>
11866>>>Class cXMLDOMParseError is a BaseXMLDomParseError
11867>>>    // returns an error sub-object as a sibling of this error object
11867>>>    Function ErrorItemNode Integer iItem Returns Handle
11869>>>        Handle hoParseErrorNode hoParent
11869>>>        Handle hParseErrorIntf
11869>>>        Get ErrorItem iItem to hParseErrorIntf
11870>>>        If (hParseErrorIntf) Begin
11872>>>            // add to parent in case developer destroys the current object
11872>>>            Get Parent to hoParent
11873>>>            Get Create of hoParent U_cXMLDOMParseError to hoParseErrorNode
11874>>>            Set XmlInterface of hoParseErrorNode to hParseErrorIntf
11875>>>        End
11875>>>>
11875>>>        Function_Return hoParseErrorNode
11876>>>    End_Function
11877>>>End_Class
11878>>>
11878>>>// Base document class with Base functions.
11878>>>
11878>>>Class cXMLDOMDocument is an BaseXmlDomDocument
11879>>>    
11879>>>    Import_Class_Protocol cXMLDOMNodeMixin
11880>>>    
11880>>>    Procedure Construct_Object
11882>>>        Handle hInfc
11882>>>        Forward Send Construct_Object
11884>>>        Property String psDocumentName ""
11885>>>        Property Integer phPrivateDocumentElement 0
11886>>>        Property Handle phoTempDomNode (Create(Self,U_cXMLDomNode))
11887>>>        Property Handle phoTempDomNodeMap (Create(Self,U_cXMLDOMNamedNodeMap))
11888>>>        
11888>>>        // added in 15.1. If no COM pointer, msxml6 is most likely not installed. This will
11888>>>        // raise an unhandled error, which could be augmented to do something else.
11888>>>        Get XmlInterface to hInfc
11889>>>        If (hInfc=0) Begin
11891>>>            Send ErrorCreatingXMLObject
11892>>>        End
11892>>>>
11892>>>        
11892>>>        // as of 18.0 pbAsync now defaults to False. In most cases, this is what you want
11892>>>        Set pbAsync to False
11893>>>    End_Procedure
11894>>>    
11894>>>    // returns the classId for the passed NodeType. This is a good augmentation point. All nodes
11894>>>    // within an xml document come here to get a class. So, if you want to augment and return a
11894>>>    // different class, just check the node type and return whatever -- else forward
11894>>>    
11894>>>    Function NodeClassId Integer iType Returns Integer
11896>>>        Integer iClassId
11896>>>        Case Begin
11896>>>            Case (iType=NODE_ELEMENT) ;                Move U_cXMLDOMElement      to iClassId
11899>>>            Case (iType=NODE_ATTRIBUTE) ;                Move U_cXMLDOMAttribute    to iClassId
11903>>>            Case (iType=NODE_TEXT) ;                Move U_cXMLDOMTextNode     to iClassId
11907>>>            Case (iType=NODE_CDATA_SECTION) ;                Move U_cXMLDOMCDATASection to iClassId
11911>>>            Case (iType=NODE_ENTITY_REFERENCE) ;                Move U_cXMLDOMEntityReference to iClassId
11915>>>            Case (iType=NODE_ENTITY) ;                Move U_cXMLDOMEntity       to iClassId
11919>>>            Case (iType=NODE_PROCESSING_INSTRUCTION) ;                Move U_cXMLDOMProcessingInstruction to iClassId
11923>>>            Case (iType=NODE_COMMENT) ;                Move U_cXMLDOMComment      to iClassId
11927>>>            Case (iType=NODE_DOCUMENT) ;                Move U_cXMLDOMDocument     to iClassId
11931>>>            Case (iType=NODE_DOCUMENT_TYPE) ;                Move U_cXMLDOMDocumentType to iClassId
11935>>>            Case (iType=NODE_DOCUMENT_FRAGMENT) ;                Move U_cXMLDOMDocumentFragment to iClassId
11939>>>            Case (iType=NODE_NOTATION) ;                Move U_cXMLDOMNotation     to iClassId
11943>>>            Case (iType=0) ;                Move 0                     to iClassId // this is an error!!
11947>>>            Case Else ;                Move U_cXMLDOMNode         to iClassId
11949>>>        Case End
11949>>>        Function_Return iClassId
11950>>>    End_Function
11951>>>    
11951>>>    // Load an XML Document. The name of the document is stored in a property
11951>>>    // that must be set for this function to work correctly.
11951>>>    
11951>>>    Function LoadXMLDocument Returns Integer
11953>>>        String sDocumentName
11953>>>        Integer bRetVal
11953>>>        Get psDocumentName to sDocumentName
11954>>>        Get LoadDocument sDocumentName to bRetVal
11955>>>        If (bRetVal = 0);            Function_Return True
11958>>>        Else;            Function_Return False
11960>>>    End_Function
11961>>>    
11961>>>    Function SaveXMLDocument Returns Integer
11963>>>        String sDocumentName
11963>>>        Integer bRetVal
11963>>>        Get psDocumentName to sDocumentName
11964>>>        Get SaveDocument sDocumentName to bRetVal
11965>>>        Function_Return bRetVal
11966>>>    End_Function
11967>>>    
11967>>>    // Load an XML from a string. This aguments the C message to ret 1 if Ok and 0 if error.
11967>>>    //
11967>>>    Function LoadXML String sXML Returns Integer
11969>>>        Integer bRetVal
11969>>>        // for some reason the parser will not work properly with embedded double quotes.
11969>>>        // Change all " to ' in document.
11969>>>        //Move (replaces('"',sXML,"'")) to sXML  // removed this. Bad Idea.
11969>>>        Forward Get LoadXml sXML to bRetVal
11971>>>        If (bRetVal = 0) ;            Function_Return True
11974>>>        Else;            Function_Return False
11976>>>    End_Function
11977>>>    
11977>>>    // Load an XML string from an address. This aguments the C message to ret 1 if Ok and 0 if error.
11977>>>    //
11977>>>    Function LoadXMLFromAddress Pointer pXML Returns Integer
11979>>>        Integer bRetVal
11979>>>        Forward Get LoadXmlFromAddress pXML to bRetVal
11981>>>        If (bRetVal = 0) ;            Function_Return True
11984>>>        Else;            Function_Return False
11986>>>    End_Function
11987>>>    
11987>>>    
11987>>>    // Allow Nodes and Node node lists to get the parent document.
11987>>>    
11987>>>    Function DocumentObject Returns Handle
11989>>>        Function_Return Self
11990>>>    End_Function
11991>>>    
11991>>>    // Access to the root node allows for searches and iterations.
11991>>>    // The root node is a cNode.
11991>>>    
11991>>>    Function DocumentElement Returns Handle
11993>>>        Handle hNewNode       // Object ID of Root Node
11993>>>        Handle infcNode   // XML Element Interface
11993>>>        Get phDocumentElement to infcNode
11994>>>        If infcNode Begin
11996>>>            Get CreateXMLObject U_cXMLDOMElement infcNode to hNewNode
11997>>>            Set phPrivateDocumentElement to hNewNode // we no longer use this at all
11998>>>        End
11998>>>>
11998>>>        Function_Return hNewNode
11999>>>    End_Function
12000>>>    
12000>>>    //  CreateRootNode is used to set up the first element in a document.
12000>>>    //  It should only be used when creating new files.
12000>>>    
12000>>>    Function CreateDocumentElement String sTagName Returns Handle
12002>>>        Handle hNewNode       // Object ID of Root Node
12002>>>        Handle infcNode   // XML Element Interface
12002>>>        // Call XML to create an element in the document.
12002>>>        Get CreateElement sTagName to infcNode
12003>>>        // Tie the element interface to the DataFlex object.
12003>>>        If infcNode ;            Get CreateXMLObject U_cXMLDOMElement infcNode to hNewNode
12006>>>        // Call XML to set the root element of the document.
12006>>>        Set phDocumentElement to infcNode
12007>>>        Set phPrivateDocumentElement to hNewNode
12008>>>        Function_Return hNewNode
12009>>>    End_Function
12010>>>    
12010>>>    Function CreateDocumentElementNS String sNamespace String sTagName Returns Handle
12012>>>        Handle hNewNode       // Object ID of Root Node
12012>>>        Handle infcNode iType  // XML Element Interface
12012>>>        Get CreateElementNodeNS sNameSpace sTagName "" to hNewNode
12013>>>        Get XmlInterface of hNewNode to infcNode
12014>>>        Set phDocumentElement to infcNode
12015>>>        Set phPrivateDocumentElement to hNewNode
12016>>>        Function_Return hNewNode
12017>>>    End_Function
12018>>>    
12018>>>    
12018>>>    
12018>>>    // return the DocType as a document-type object. Returns 0 if no dtd
12018>>>    // Access to information from the doc type object is limited. Use get psXML
12018>>>    Function DocTypeNode Returns Handle
12020>>>        Handle hinfcDocType hoDocType
12020>>>        Get phDocType to hinfcDocType
12021>>>        If hinfcDocType ;            Get CreateXMLObject U_cXMLDOMDocumentType hinfcDocType to hoDocType
12024>>>        Function_Return hoDocType
12025>>>    End_Function
12026>>>    
12026>>>    Function phXMLErrorObject Returns Handle
12028>>>        Handle hoParseErrorObject
12028>>>        Handle hInfcParseError
12028>>>        Get phParseError to hInfcParseError
12029>>>        If hInfcParseError ;            Get CreateXMLObject U_cXMLDOMParseError hinfcParseError to hoParseErrorObject
12032>>>        Function_Return hoParseErrorObject
12033>>>    End_Function
12034>>>    
12034>>>    //  The following procedure is meant to be overridden by one provided by the developer.
12034>>>    
12034>>>    Procedure BasicParseErrorReport
12036>>>        String sProblem
12036>>>        String sLinePosition
12036>>>        String sDescr
12036>>>        String sReason
12036>>>        String sSource
12036>>>        Handle hoParseErrorObject
12036>>>        Get phXMLErrorObject to hoParseErrorObject
12037>>>        If hoParseErrorObject Begin
12039>>>            Move (SFormat(C_$CannotLoad, psDocumentName(Self)) + "."+character(13)+character(10)) to sProblem
12040>>>            Move (SFormat(C_$ParsingError, piLine(hoParseErrorObject), piLinePos(hoParseErrorObject))) to sLinePosition
12041>>>            Move (sLinePosition +character(13)+character(10)) to sLinePosition
12042>>>            
12042>>>            Move (C_$Reason + ":" * (psReason(hoParseErrorObject))  +character(13)+character(10)) to sReason
12043>>>            Move (C_$Source + ":" * (psSrcText(hoParseErrorObject))) to sSource
12044>>>            Move (sProblem + sLinePosition + sReason + sSource) to sDescr
12045>>>            Error DFERR_XML_INTERNAL_ERROR sDescr
12046>>>>
12046>>>            Send Destroy of hoParseErrorObject
12047>>>        End
12047>>>>
12047>>>        Else ;            Error DFERR_XML_INTERNAL_ERROR C_$NotCreatedParseObject
12049>>>    End_Procedure
12050>>>    
12050>>>    // bind an xml interface node to the passed XML object. If the
12050>>>    // object type is of the wrong type, we will destroy it and recreate it
12050>>>    // which is why hoNode is passed byRef.
12050>>>    // to use this you'd have to use the lower level private messages to get the
12050>>>    // xml interface handles and then bind them to an object. Just like in COM you could
12050>>>    // bind these to the same object, which might save some parsing time. This is made private
12050>>>    // because the time savings would probably be small and would not justify the extra
12050>>>    // complexity.
12050>>>    // It is a programming error to pass this a zero handle.
12050>>>    Procedure BindXMLInfc Handle hInfc Handle ByRef hoNode
12052>>>        Integer iType iClassId iType2
12052>>>        Get piNodeType of hoNode to iType2 // type of the DF XML object
12053>>>        
12053>>>        // Get the node type of the infc handle w/o creating a DF object
12053>>>        Move (invokexml(DF_IXMLDOMNODE, GET_piNodeType, hinfc, 0, 0, 0, 0)) to iType
12054>>>        Move (invokexml(DF_IXMLDOMNODE, GET_ChangeNodeType, hinfc, iType, 1, 0, 0)) to hInfc
12055>>>        If (hinfc=0) Begin
12057>>>            // this should not happen and we would need to know about this.
12057>>>            Error DFERR_XML_INTERNAL_ERROR (C_$XmlFailedNoDocObject + String(iType))
12058>>>>
12058>>>            Procedure_Return 0
12059>>>        End
12059>>>>
12059>>>        // if the type is the same we can reuse the current object and binding it to the interface pointer
12059>>>        If (iType=iType2) Begin
12061>>>            // resuse Self and return
12061>>>            Set XMLInterface of hoNode to hInfc
12062>>>        End
12062>>>>
12062>>>        // if diffrent type, destroy the existing object and recreate it
12062>>>        Else Begin
12063>>>            Send Destroy of hoNode
12064>>>            Get NodeClassId iType to iClassId
12065>>>            Get CreateXMLObject iClassId hInfc to hoNode
12066>>>        End
12066>>>>
12066>>>    End_Procedure
12067>>>    
12067>>>    Function ValidateDocument Returns Handle
12069>>>        Handle hParseErrorIntf hoParseError
12069>>>        Forward Get ValidateDocument to hParseErrorIntf
12071>>>        If hParseErrorIntf Begin
12073>>>            Get CreateXMLObject U_cXMLDOMParseError hParseErrorIntf to hoParseError
12074>>>        End
12074>>>>
12074>>>        Function_Return hoParseError
12075>>>    End_Function
12076>>>    
12076>>>    Function AddExternalSchemaDocument String sSchema Handle hoSchema Returns Boolean
12078>>>        Handle hInfc
12078>>>        Boolean bOk
12078>>>        Get XmlInterface of hoSchema to hInfc
12079>>>        Forward Get AddExternalSchemaDocument sSchema hInfc to bOk
12081>>>        Function_Return (not(bOk))
12082>>>    End_Function
12083>>>    
12083>>>    Function AddExternalSchemaFile String sSchema String sFile Returns Boolean
12085>>>        Boolean bOk
12085>>>        Forward Get AddExternalSchemaFile sSchema sFile to bOk
12087>>>        Function_Return (not(bOk))
12088>>>    End_Function
12089>>>    
12089>>>    Procedure Set psSelectionNamespaces String sNamespaces
12091>>>        Set psDomSecondLevelProperty "SelectionNamespaces" to sNamespaces
12092>>>    End_Procedure
12093>>>    
12093>>>    Function psSelectionNamespaces Returns String
12095>>>        String  sNamespaces
12095>>>        Get psDomSecondLevelProperty "SelectionNamespaces" to sNamespaces
12096>>>        Function_Return sNamespaces
12097>>>    End_Function
12098>>>    
12098>>>    Procedure Set pbMultipleErrorMessages Boolean bMultipleErrors
12100>>>        Set pbDomSecondLevelProperty "MultipleErrorMessages" to bMultipleErrors
12101>>>    End_Procedure
12102>>>    
12102>>>    Function pbMultipleErrorMessages Returns Boolean
12104>>>        Boolean bMultipleErrors
12104>>>        Get pbDomSecondLevelProperty "MultipleErrorMessages" to bMultipleErrors
12105>>>        Function_Return bMultipleErrors
12106>>>    End_Function
12107>>>    
12107>>>    Procedure ErrorCreatingXMLObject
12109>>>        Error DFERR_XML_INTERNAL_ERROR "Could not create XML COM object. MSXML6 may not be properly installed and registered."
12110>>>>
12110>>>    End_Procedure
12111>>>    
12111>>>    // returns the last parse error. If 0, you know everything parsed. This can be
12111>>>    // used along wit pbReadyState to load XML documents in async mode.
12111>>>    Function LastParseError Returns Integer
12113>>>        Integer iErr
12113>>>        Handle hoParseErrorReport
12113>>>        Get phXMLErrorObject to hoParseErrorReport
12114>>>        Get piErrorCode of hoParseErrorReport to iErr
12115>>>        Send Destroy of hoParseErrorReport
12116>>>        Function_Return iErr
12117>>>    End_Function
12118>>>    
12118>>>    
12118>>>End_Class
12119>Use cli.pkg
Including file: cli.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cli.pkg)
12119>>>//                                                              
12119>>>//   CLI specific functionality. There are several connectivity kits     
12119>>>//   based on  SQL/92 CLI. Those are:                                    
12119>>>//    - ODBC_DRV  The Data Access CK for ODBC                            
12119>>>//    - DB2_DRV   The Data Access CK for DB2                             
12119>>>//    - MSSQLDRV  The Data Access CK for Microsoft SQL Server            
12119>>>//                                                                       
12119>>>//   This package defines the common functionality for all CLI based     
12119>>>//   drivers.                                                            
12119>>>
12119>>>Define DF_FILE_TABLE_CHARACTER_FORMAT   for 601
12119>>>Define DF_FILE_MAX_ROWS_FETCHED         for 602
12119>>>Define DF_FILE_PRIMARY_INDEX_TRIGGER    for 604      // Replaced by DF_FILE_GENERATE_RECORD_ID_METHOD !
12119>>>Define DF_FILE_TRANSLATE_OEM_TO_ANSI    for 606      // Deprecated !!! Only defined for decent error reporting
12119>>>Define DF_FILE_REFIND_AFTER_SAVE        for 608
12119>>>Define DF_FILE_TABLE_NAME               for 609
12119>>>Define DF_FILE_GET_RID_AFTER_CREATE     for 610
12119>>>Define DF_FILE_SQL_FILTER               for 611
12119>>>Define DF_FILE_USE_DUMMY_ZERO_DATE      for 612
12119>>>Define DF_FILE_GENERATE_RECORD_ID_METHOD for 614
12119>>>Define DF_FILE_DUMMY_UPDATE_COLUMN      for 616
12119>>>Define DF_FILE_FETCH_ALL_COLUMNS        for 620
12119>>>Define DF_FILE_DATABASE_ID              for 622
12119>>>Define DF_FILE_SQL_FILTER_ACTIVE        for 624
12119>>>Define DF_FILE_NUMBER_SQL_RELATIONS     for 626
12119>>>Define DF_FILE_BLOCK_SIZE               for 628
12119>>>Define DF_FILE_JIT_BINDING              for 630
12119>>>Define DF_FILE_FINDCACHE_HITS           for 632
12119>>>Define DF_FILE_FINDCACHE_TIMEOUTS       for 634
12119>>>Define DF_FILE_SQL_FILTER_EQ            for 636
12119>>>Define DF_FILE_RESTRUCTURE_INT_ONLY     for 638
12119>>>Define DF_FILE_ALLOWED_STRUCTURE_CHANGES for 640
12119>>>
12119>>>Define DF_FIELD_STORE_TIME              for 702
12119>>>Define DF_FIELD_TIME                    for 703
12119>>>Define DF_FIELD_IS_NULL                 for 704
12119>>>Define DF_FIELD_NULL_ALLOWED            for 706
12119>>>Define DF_FIELD_DEFAULT_VALUE           for 707
12119>>>Define DF_FIELD_FETCH_STATE             for 708
12119>>>Define DF_FIELD_READ_ONLY               for 710
12119>>>Define DF_FIELD_NATIVE_TYPE_NAME        for 711
12119>>>Define DF_FIELD_NATIVE_TYPE             for 712
12119>>>Define DF_FIELD_NO_OEM_ANSI_TRANSLATE   for 714
12119>>>Define DF_SQL_RELATION_COLUMN           for 716
12119>>>Define DF_SQL_RELATION_RELATED_SCHEMA   for 717
12119>>>Define DF_FIELD_NATIVE_SIZE             for 718
12119>>>Define DF_SQL_RELATION_RELATED_TABLE    for 719
12119>>>Define DF_SQL_RELATION_RELATED_COLUMN   for 721
12119>>>Define DF_FIELD_IS_IDENTITY             for 722
12119>>>Define DF_FIELD_SQL_COLUMN_NAME         for 723
12119>>>
12119>>>Define DF_INDEX_NAME                    for 801
12119>>>Define DF_INDEX_UNIQUE                  for 802
12119>>>Define DF_INDEX_ON_BACKEND              for 804
12119>>>
12119>>>Define DF_INDEX_CLUSTERED               for 806
12119>>>Define DF_INDEX_SQL_PRIMARY_KEY         for 808
12119>>>Define DF_INDEX_SQL_TYPE                for 810
12119>>>Define DF_INDEX_NUMBER                  for 812
12119>>>
12119>>>Define DF_DATABASE_LOCK_STATE                    for 1001
12119>>>Define DF_DATABASE_ID                            for 1002
12119>>>Define DF_DATABASE_MYSQLTABLETYPE                for 1003
12119>>>Define DF_DATABASE_NUMBER_TYPES                  for 1004
12119>>>Define DF_DATABASE_TYPE_NAME                     for 1005
12119>>>Define DF_DATABASE_TYPE_ID                       for 1006
12119>>>Define DF_DATABASE_TYPE_CREATE_PARAMS            for 1007
12119>>>Define DF_DATABASE_TYPE_AUTOINC                  for 1008
12119>>>Define DF_DATABASE_DEFAULT_DEFAULT_ASCII         for 1009
12119>>>Define DF_DATABASE_TYPE_UNSIGNED                 for 1010
12119>>>Define DF_DATABASE_DEFAULT_DEFAULT_NUMERIC       for 1011
12119>>>Define DF_DATABASE_TYPE_MAXSIZE                  for 1012
12119>>>Define DF_DATABASE_DEFAULT_DEFAULT_DATE          for 1013
12119>>>Define DF_DATABASE_DEFAULT_NULLABLE_ASCII        for 1014
12119>>>Define DF_DATABASE_DEFAULT_DEFAULT_TEXT          for 1015
12119>>>Define DF_DATABASE_DEFAULT_NULLABLE_NUMERIC      for 1016
12119>>>Define DF_DATABASE_DEFAULT_DEFAULT_BINARY        for 1017
12119>>>Define DF_DATABASE_DEFAULT_NULLABLE_DATE         for 1018
12119>>>Define DF_DATABASE_DUMMY_ZERO_DATE_VALUE         for 1019
12119>>>Define DF_DATABASE_DEFAULT_NULLABLE_TEXT         for 1020
12119>>>Define DF_DATABASE_DUPREC_STATE                  for 1021
12119>>>Define DF_DATABASE_DEFAULT_NULLABLE_BINARY       for 1022
12119>>>Define DF_DATABASE_MAX_ACTIVE_STATEMENTS         for 1024
12119>>>Define DF_DATABASE_DRIVER_DECIMAL_SEPARATOR      for 1026
12119>>>Define DF_DATABASE_DRIVER_THOUSANDS_SEPARATOR    for 1028
12119>>>
12119>>>Define DF_DATABASE_DRIVER_DATE_FORMAT            for 1030
12119>>>Define DF_DATABASE_DRIVER_DATE_SEPARATOR         for 1032
12119>>>Define DF_DATABASE_IGNORE_UCASE_SUPPORT          for 1034
12119>>>Define DF_DATABASE_INDEX_CREATE                  for 1036
12119>>>Define DF_DATABASE_INDEX_DROP                    for 1038
12119>>>Define DF_DATABASE_INDEX_ASC                     for 1040
12119>>>Define DF_DATABASE_INDEX_DESC                    for 1042
12119>>>Define DF_DATABASE_COLUMN_CREATE_DEFAULTCLAUSE   for 1044
12119>>>Define DF_DATABASE_DUPREC_ERRORNUMBER            for 1046
12119>>>Define DF_DATABASE_USE_IDENTITY_TYPE             for 1048
12119>>>Define DF_DATABASE_NUMBER_NATIVE_LOCKERRORS      for 1050
12119>>>Define DF_DATABASE_NATIVE_LOCKERROR              for 1052
12119>>>Define DF_DATABASE_DEFAULT_MAX_ROWS              for 1054
12119>>>Define DF_DATABASE_IGNORE_WARNINGS               for 1056
12119>>>Define DF_DATABASE_USE_DF_LOCKERROR              for 1058
12119>>>Define DF_DATABASE_FIND_CACHE_TIMEOUT            for 1060
12119>>>Define DF_DATABASE_JIT_TRESHOLD                  for 1062
12119>>>Define DF_DATABASE_TRUNCATE_BINARY_ZEROES        for 1064
12119>>>Define DF_DATABASE_DEFAULT_DEFAULT_DATETIME      for 1065
12119>>>Define DF_DATABASE_DEFAULT_NULLABLE_DATETIME     for 1066
12119>>>Define DF_DATABASE_MAP_DFDATE_TO_ODBCTYPE         for 1068
12119>>>Define DF_DATABASE_MAP_DFDATETIME_TO_ODBCTYPE     for 1070
12119>>>Define DF_DATABASE_MAP_DFASCII_TO_ODBCTYPE        for 1072
12119>>>Define DF_DATABASE_MAP_DFTEXT_TO_ODBCTYPE         for 1074
12119>>>Define DF_DATABASE_MAP_DFBINARY_TO_ODBCTYPE       for 1076
12119>>>Define DF_DATABASE_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA for 1078
12119>>>
12119>>>Define DF_DATABASE_MAP_DFDATE_TO_SQLTYPE         for 1069
12119>>>Define DF_DATABASE_MAP_DFDATETIME_TO_SQLTYPE     for 1071
12119>>>Define DF_DATABASE_MAP_DFASCII_TO_SQLTYPE        for 1073
12119>>>Define DF_DATABASE_MAP_DFTEXT_TO_SQLTYPE         for 1075
12119>>>Define DF_DATABASE_MAP_DFBINARY_TO_SQLTYPE       for 1077
12119>>>Define DF_DATABASE_DEFAULT_DATABASE              for 1079
12119>>>Define DF_DATABASE_TRIM_VARCHAR_VALUES           for 1084
12119>>>Define DF_DATABASE_IDENTIFIER_QUOTE              for 1085
12119>>>Define DF_DATABASE_ODBC_DRIVER_NAME              for 1087
12119>>>
12119>>>Define DF_DRIVER_DEFAULT_DEFAULT_ASCII           for 1101
12119>>>Define DF_DRIVER_DEFAULT_NULLABLE_ASCII          for 1102
12119>>>Define DF_DRIVER_DEFAULT_DEFAULT_NUMERIC         for 1103
12119>>>Define DF_DRIVER_DEFAULT_NULLABLE_NUMERIC        for 1104
12119>>>Define DF_DRIVER_DEFAULT_DEFAULT_DATE            for 1105
12119>>>Define DF_DRIVER_DEFAULT_NULLABLE_DATE           for 1106
12119>>>Define DF_DRIVER_DEFAULT_DEFAULT_TEXT            for 1107
12119>>>Define DF_DRIVER_DEFAULT_NULLABLE_TEXT           for 1108
12119>>>Define DF_DRIVER_DEFAULT_DEFAULT_BINARY          for 1109
12119>>>Define DF_DRIVER_DEFAULT_NULLABLE_BINARY         for 1110
12119>>>Define DF_DRIVER_DUMMY_ZERO_DATE_VALUE           for 1111
12119>>>Define DF_DRIVER_MAX_ACTIVE_STATEMENTS           for 1112
12119>>>Define DF_DRIVER_CACHE_PATH                      for 1113
12119>>>Define DF_DRIVER_DRIVER_DECIMAL_SEPARATOR        for 1114
12119>>>Define DF_DRIVER_DEFAULT_TABLE_CHARACTER_FORMAT  for 1115
12119>>>Define DF_DRIVER_DRIVER_THOUSANDS_SEPARATOR      for 1116
12119>>>Define DF_DRIVER_APPLICATION_CHARACTER_FORMAT    for 1117
12119>>>Define DF_DRIVER_DRIVER_DATE_FORMAT              for 1118
12119>>>Define DF_DRIVER_LAST_ERROR_TEXT                 for 1119
12119>>>Define DF_DRIVER_DRIVER_DATE_SEPARATOR           for 1120
12119>>>Define DF_DRIVER_CONNECTION_ID                   for 1121
12119>>>Define DF_DRIVER_IGNORE_UCASE_SUPPORT            for 1122
12119>>>Define DF_DRIVER_CONNECTION_ID_STRING            for 1123
12119>>>Define DF_DRIVER_IGNORE_WARNINGS                 for 1124
12119>>>Define DF_DRIVER_USE_DF_LOCKERROR                for 1126
12119>>>Define DF_DRIVER_FIND_CACHE_TIMEOUT              for 1128
12119>>>Define DF_DRIVER_JIT_TRESHOLD                    for 1130
12119>>>Define DF_DRIVER_TRUNCATE_BINARY_ZEROES          for 1132
12119>>>Define DF_DRIVER_ERROR_DEBUG_MODE                for 1134
12119>>>Define DF_DRIVER_USE_CACHE                       for 1136
12119>>>Define DF_DRIVER_REPORT_CACHE_ERRORS             for 1138
12119>>>Define DF_DRIVER_USE_CACHE_EXPIRATION            for 1140
12119>>>Define DF_DRIVER_DEFAULT_USE_DUMMY_ZERO_DATE     for 1142
12119>>>Define DF_DRIVER_DEFAULT_RECORD_IDENTITY_HIDING  for 1144
12119>>>Define DF_DRIVER_REPORT_ACTIVE_COLUMN_ERRORS     for 1146
12119>>>Define DF_DRIVER_SILENT_LOGIN                    for 1148
12119>>>Define DF_DRIVER_DEFAULT_MAP_TO_RECNUM           for 1150
12119>>>Define DF_DRIVER_CONNECTION_ID_OPTIONS           for 1152
12119>>>Define DF_DRIVER_NUMBER_CONNECTION_IDS           for 1154
12119>>>Define DF_DRIVER_DEFAULT_DEFAULT_DATETIME        for 1155
12119>>>Define DF_DRIVER_DEFAULT_NULLABLE_DATETIME       for 1156
12119>>>Define DF_DRIVER_MATCH_CLIENT_SERVER_VERSION     for 1158
12119>>>Define DF_DRIVER_SQLSERVER_CLIENT_VERSION        for 1160
12119>>>Define DF_DRIVER_MAP_DFDATE_TO_ODBCTYPE          for 1168
12119>>>Define DF_DRIVER_MAP_DFDATETIME_TO_ODBCTYPE      for 1170
12119>>>Define DF_DRIVER_MAP_DFASCII_TO_ODBCTYPE         for 1172
12119>>>Define DF_DRIVER_MAP_DFTEXT_TO_ODBCTYPE          for 1174
12119>>>Define DF_DRIVER_MAP_DFBINARY_TO_ODBCTYPE        for 1176
12119>>>Define DF_DRIVER_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA for 1178
12119>>>Define DF_DRIVER_LOGIN_ON_OPEN                   for 1180
12119>>>Define DF_DRIVER_MINIMUM_CLIENT_VERSION          for 1182
12119>>>Define DF_DRIVER_TRIM_VARCHAR_VALUES             for 1184
12119>>>Define DF_DRIVER_SQLSERVER_CLIENT_DRIVER_NAME    for 1187 
12119>>>
12119>>>Define DF_DRIVER_MAP_DFDATE_TO_SQLTYPE           for 1169
12119>>>Define DF_DRIVER_MAP_DFDATETIME_TO_SQLTYPE       for 1171
12119>>>Define DF_DRIVER_MAP_DFASCII_TO_SQLTYPE          for 1173
12119>>>Define DF_DRIVER_MAP_DFTEXT_TO_SQLTYPE           for 1175
12119>>>Define DF_DRIVER_MAP_DFBINARY_TO_SQLTYPE         for 1177
12119>>>
12119>>>
12119>>>// Replacement for logical column number that indicates all columns
12119>>>Define DF_ALL_COLUMNS for -1
12119>>>
12119>>>// Possible DF_FILE_GENERATE_RECORD_ID_METHOD values
12119>>>Define RIM_NONE            for 0
12119>>>Define RIM_IDENTITY_COLUMN for 1
12119>>>Define RIM_DISPENSER_TABLE for 2
12119>>>Define RIM_EXTERNAL        for 3
12119>>>
12119>>>// Possible DF_FIELD_READ_ONLY values
12119>>>Define RO_NO            for 0
12119>>>Define RO_IGNORECHANGE  for 1
12119>>>Define RO_ACCEPTCHANGE  for 2
12119>>>Define RO_ERRORONCHANGE for 3
12119>>>
12119>>>
12119>>>// Possible DF_DRIVER_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA values
12119>>>Define MAP_DF_TO_SQL_TYPE_UNKNOWN    for 0
12119>>>Define MAP_DF_TO_SQL_TYPE_SQL2000    for 3
12119>>>Define MAP_DF_TO_SQL_TYPE_SQL2005    for 4
12119>>>Define MAP_DF_TO_SQL_TYPE_SQL2008    for 5
12119>>>Define MAP_DF_TO_SQL_TYPE_SQL2012    for 6
12119>>>Define MAP_DF_TO_SQL_TYPE_DB2_LEGACY  for 7
12119>>>Define MAP_DF_TO_SQL_TYPE_DB2_10      for 8
12119>>>Define MAP_DF_TO_SQL_TYPE_ODBC_SCHEMA for 9
12119>>>Define MAP_DF_TO_SQL_TYPE_UNICODE     for 11
12119>>>
12119>>>
12119>>>// Possible DF_DRIVER_SQLSERVER_CLIENT_VERSION values are defined in Mssqldrv.pkg
12119>>>
12119>>>// Possible SQL Column type values
12119>>>//      SQL Server specific types defined in mssqldrv.pkg
12119>>>//      DB2 specific typesm defined in db2_drv.pkg
12119>>>
12119>>>Define SQL_UNKNOWN_TYPE   for    0
12119>>>Define SQL_CHAR           for    1
12119>>>Define SQL_NUMERIC        for    2
12119>>>Define SQL_DECIMAL        for    3
12119>>>Define SQL_INTEGER        for    4
12119>>>Define SQL_SMALLINT       for    5
12119>>>Define SQL_FLOAT          for    6
12119>>>Define SQL_REAL           for    7
12119>>>Define SQL_DOUBLE         for    8
12119>>>Define SQL_DATETIME       for    9
12119>>>Define SQL_VARCHAR        for   12
12119>>>Define SQL_TYPE_DATE      for   91
12119>>>Define SQL_TYPE_TIME      for   92
12119>>>Define SQL_TYPE_TIMESTAMP for   93
12119>>>
12119>>>Define SQL_DATE           for    9
12119>>>Define SQL_INTERVAL       for   10
12119>>>Define SQL_TIME           for   10
12119>>>Define SQL_TIMESTAMP      for   11
12119>>>Define SQL_LONGVARCHAR    for  (-1)
12119>>>Define SQL_BINARY         for  (-2)
12119>>>Define SQL_VARBINARY      for  (-3)
12119>>>Define SQL_LONGVARBINARY  for  (-4)
12119>>>Define SQL_BIGINT         for  (-5)
12119>>>Define SQL_TINYINT        for  (-6)
12119>>>Define SQL_BIT            for  (-7)
12119>>>Define SQL_WCHAR          for  (-8)
12119>>>Define SQL_WVARCHAR       for  (-9)
12119>>>Define SQL_WLONGVARCHAR   for (-10)
12119>>>Define SQL_GUID           for (-11)
12119>>>
12119>>>// Possible DF_INDEX_SQL_TYPE values
12119>>>Define DF_INDEX_CLIENT      for  1
12119>>>Define DF_INDEX_SERVER      for  2
12119>>>Define DF_INDEX_SERVER_ONLY for  3
12119>>>Define DF_INDEX_TEMPORARY   for  4
12119>>>
12119>>>// Possible DF_FILE_ALLOWED_STRUCTURE_CHANGES values
12119>>>Define ALL_TABLE_CHANGES_ALLOWED            for  0
12119>>>Define ONLY_TABLE_INT_FILE_CHANGES_ALLOWED  for  1
12119>>>Define NO_TABLE_CHANGES_ALLOWED             for  2
12119>>>
12119>>>// Driver level attributes
12119>>>Define DRVR_TOKEN_BASE                       for 1000
12119>>>Define DRVR_ATTRIBUTE_START                  for (DRVR_TOKEN_BASE + 19)
12119>>>Define DRVR_DEFAULT_NULLABLE_ASCII           for (DRVR_ATTRIBUTE_START)
12119>>>Define DRVR_DEFAULT_NULLABLE_NUMERIC         for (DRVR_ATTRIBUTE_START +  1)
12119>>>Define DRVR_DEFAULT_NULLABLE_DATE            for (DRVR_ATTRIBUTE_START +  2)
12119>>>Define DRVR_DEFAULT_NULLABLE_TEXT            for (DRVR_ATTRIBUTE_START +  3)
12119>>>Define DRVR_DEFAULT_NULLABLE_BINARY          for (DRVR_ATTRIBUTE_START +  4)
12119>>>Define DRVR_DEFAULT_DEFAULT_ASCII            for (DRVR_ATTRIBUTE_START +  5)
12119>>>Define DRVR_DEFAULT_DEFAULT_NUMERIC          for (DRVR_ATTRIBUTE_START +  6)
12119>>>Define DRVR_DEFAULT_DEFAULT_DATE             for (DRVR_ATTRIBUTE_START +  7)
12119>>>Define DRVR_DEFAULT_DEFAULT_TEXT             for (DRVR_ATTRIBUTE_START +  8)
12119>>>Define DRVR_DEFAULT_DEFAULT_BINARY           for (DRVR_ATTRIBUTE_START +  9)
12119>>>Define DRVR_MAX_ACTIVE_STATEMENTS            for (DRVR_ATTRIBUTE_START + 10)
12119>>>Define DRVR_ERROR_DEBUG_MODE                 for (DRVR_ATTRIBUTE_START + 11)
12119>>>Define DRVR_DRIVER_DECIMAL_SEPARATOR         for (DRVR_ATTRIBUTE_START + 12)
12119>>>Define DRVR_DRIVER_THOUSANDS_SEPARATOR       for (DRVR_ATTRIBUTE_START + 13)
12119>>>Define DRVR_DRIVER_DATE_FORMAT               for (DRVR_ATTRIBUTE_START + 14)
12119>>>Define DRVR_DRIVER_DATE_SEPARATOR            for (DRVR_ATTRIBUTE_START + 15)
12119>>>Define DRVR_USE_CACHE                        for (DRVR_ATTRIBUTE_START + 16)
12119>>>Define DRVR_REPORT_CACHE_ERRORS              for (DRVR_ATTRIBUTE_START + 17)
12119>>>Define DRVR_CACHE_PATH                       for (DRVR_ATTRIBUTE_START + 18)
12119>>>Define DRVR_USE_CACHE_EXPIRATION             for (DRVR_ATTRIBUTE_START + 19)
12119>>>Define DRVR_DEFAULT_TABLE_CHARACTER_FORMAT   for (DRVR_ATTRIBUTE_START + 20)
12119>>>Define DRVR_APPLICATION_CHARACTER_FORMAT     for (DRVR_ATTRIBUTE_START + 21)
12119>>>Define DRVR_DUMMY_ZERO_DATE_VALUE            for (DRVR_ATTRIBUTE_START + 22)
12119>>>Define DRVR_DEFAULT_USE_DUMMY_ZERO_DATE      for (DRVR_ATTRIBUTE_START + 23)
12119>>>Define DRVR_IGNORE_UCASE_SUPPORT             for (DRVR_ATTRIBUTE_START + 24)
12119>>>Define DRVR_LASTERRORTEXTLENGTH              for (DRVR_ATTRIBUTE_START + 25)
12119>>>Define DRVR_LASTERRORTEXT                    for (DRVR_ATTRIBUTE_START + 26)
12119>>>Define DRVR_DEFAULTRECORDIDHIDING            for (DRVR_ATTRIBUTE_START + 35)
12119>>>Define DRVR_REPORTACTIVECOLUMNERRORS         for (DRVR_ATTRIBUTE_START + 36)
12119>>>
12119>>>
12119>>>// Error Number constants
12119>>>Define CLIERR_GENERAL_ERROR                       for 12289
12119>>>Define CLIERR_CANT_INITIALIZE                     for 12290
12119>>>Define CLIERR_CANT_DEINITIALIZE                   for 12291
12119>>>Define CLIERR_BAD_OR_NO_PRIMARY_INDEX_SPECIFIED   for 12292
12119>>>Define CLIERR_LOGIN_UNSUCCESSFUL                  for 12293
12119>>>Define CLIERR_LOGOUT_UNSUCCESSFUL                 for 12294
12119>>>Define CLIERR_TABLE_NOT_IN_CONNECTION             for 12295
12119>>>Define CLIERR_NULL_VALUE_NOT_ALLOWED              for 12296
12119>>>Define CLIERR_SEGMENT_NUMBER_RANGE                for 12297
12119>>>Define CLIERR_INDEX_NUMBER_RANGE                  for 12298
12119>>>Define CLIERR_LOGIN_ATTRIBUTE_MUST_BE_SET         for 12299
12119>>>Define CLIERR_PHYSICAL_NAME_MUST_BE_SET           for 12300
12119>>>Define CLIERR_INVALID_REGISTRATION_FILE           for 12301
12119>>>Define CLIERR_LICENSE_EXPIRED                     for 12302
12119>>>Define CLIERR_DEADLOCK_OR_TIMEOUT                 for 12303
12119>>>Define CLIERR_SQL_ERROR                           for 12304
12119>>>Define CLIERR_SQLINVALID_CLI_STMT_HANDLE          for 12305
12119>>>Define CLIERR_SQLINVALID_CLI_CONN_HANDLE          for 12306
12119>>>Define CLIERR_SQLINVALID_DRIVER_ID                for 12307
12119>>>Define CLIERR_SQLINVALID_BIND_FILE                for 12308
12119>>>Define CLIERR_SQLINVALID_COLUMN                   for 12309
12119>>>Define CLIERR_SQLINVALID_ATTRIBUTE                for 12310
12119>>>Define CLIERR_SQLINVALID_BUFFER                   for 12311
12119>>>Define CLIERR_INVALID_CONFIGURATION_KEYWORD       for 12312
12119>>>Define CLIERR_NOUNIQUEINDEX                       for 12313
12119>>>Define CLIERR_UCSEGMENT_NOT_SUPPORTED             for 12314
12119>>>Define CLIERR_FIELDREADONLY                       for 12315
12119>>>Define CLIERR_DBPROPERROR                         for 12316
12119>>>Define CLIERR_CANTSETRECNUMINACTIVE               for 12317
12119>>>Define CLIERR_CANTCHANGEINACTIVECOLUMN            for 12318
12119>>>Define CLIERR_FIELDISINACTIVE                     for 12319
12119>>>Define CLIERR_NOT_INSTALLED                       for 12320
12119>>>Define CLIERR_CANT_FIND_TERMLIST                  for 12321
12119>>>Define CLIERR_CANT_READ_TERMLIST                  for 12322
12119>>>Define CLIERR_MAX_USERS_EXCEEDED                  for 12323
12119>>>Define CLIERR_USER_COUNT_FILE_ERROR               for 12324
12119>>>Define CLIERR_CANT_INIT_USER_COUNT                for 12325
12119>>>Define CLIERR_USER_COUNT_FILE_NOT_FOUND           for 12326
12119>>>Define CLIERR_USER_COUNT_FILE_CANT_READ           for 12327
12119>>>Define CLIERR_USER_COUNT_FILE_CANT_DECRYPT        for 12328
12119>>>Define CLIERR_USER_COUNT_FILE_BAD_VERSION         for 12329
12119>>>Define CLIERR_CANTCREATE_RECNUMISZERO             for 12330
12119>>>Define CLIERR_CANTGETCOLUMNINFO                   for 12331
12119>>>Define CLIERR_INVALIDDATABASEHANDLE               for 12332
12119>>>Define CLIERR_TYPENUMBEROUTOFRANGE                for 12333
12119>>>Define CLIERR_LOCKERRORNUMBEROUTOFRANGE           for 12334
12119>>>Define CLIERR_CONNECTIONIDOUTOFRANGE              for 12335
12119>>>Define CLIERR_CONNECTIONIDNOTFOUND                for 12336
12119>>>Define CLIERR_RELATIONOUTOFRANGE                  for 12337
12119>>>Define CLIERR_NOTANEXPRESSEDITION                 for 12338
12119>>>Define CLIERR_INVALID_CONFIGURATION_VALUE         for 12339
12119>>>Define CLIERR_NOCLIENTSERVERVERSIONMATCH          for 12340
12119>>>Define CLIERR_CONNECTIONIDALREADYEXISTS           for 12341
12119>>>Define CLIERR_INVALIDCONNECTSTRINGOPENOPTION      for 12342
12119>>>Define CLIERR_DATABASECONNECTIONLOST              for 12343
12119>>>Define CLIERR_STRUCTURECHANGENOTALLOWED           for 12344
12119>>>Define CLIERR_MINIMUMCLIENTVERSIONNOTFOUND        for 12345
12119>>>
12119>>>
12119>>>// Call driver Function identifiers
12119>>>Define CLI_CONSTRAINT             for 10000
12119>>>Define CLI_SETDRIVERATTRIBUTE     for 10001
12119>>>Define CLI_GETDRIVERATTRIBUTE     for 10002
12119>>>Define CLI_BROWSECONNECT          for 10003
12119>>>Define CLI_DATASOURCES            for 10004
12119>>>Define CLI_CKREVISION             for 10005
12119>>>Define CLI_INITDATASOURCES        for 10006
12119>>>Define CLI_ENUMERATE_TABLES       for 10007
12119>>>Define CLI_TABLENAME              for 10008
12119>>>Define CLI_TABLESCHEMA            for 10009
12119>>>Define CLI_TABLETYPE              for 10010
12119>>>Define CLI_TABLECOMMENT           for 10011
12119>>>Define CLI_ENUMERATE_COLUMNS      for 10012
12119>>>Define CLI_COLUMNNAME             for 10013
12119>>>Define CLI_DUMPSTATUS             for 10014
12119>>>Define CLI_READCONFIGURATION      for 10015
12119>>>Define CLI_GETDBATTRIBUTE0        for 10016
12119>>>Define CLI_GETDBATTRIBUTE         for 10017
12119>>>Define CLI_GETREGNAME             for 10018
12119>>>Define CLI_GETSERIALNUM           for 10019
12119>>>Define CLI_GETMAXUSERS            for 10020
12119>>>Define CLI_BCP                    for 10021
12119>>>Define CLI_DROPINDICES            for 10022
12119>>>Define CLI_CREATEINDICES          for 10023
12119>>>Define CLI_REDIRECTCONNECTION     for 10024
12119>>>Define CLI_CREATECONNECTIONID     for 10025
12119>>>Define CLI_DELETECONNECTIONID     for 10026
12119>>>
12119>>>
12119>>>// Init data source types
12119>>>Define SQL_FETCH_ALL     for  2
12119>>>Define SQL_FETCH_USER    for 31
12119>>>Define SQL_FETCH_SYSTEM  for 32
12119>>>
12119>>>
12119>>>// Dummy strings used in the commands
12119>>>String  CLI$StrDummy 255
12119>>>Integer CLI$IntDummy
12119>>>
12119>>>
12119>>>//   Setup a constraint for a file.                                    
12119>>>
12119>>>
12119>>>
12119>>>// Set or get an attribute at driver level. These attributes, when set,
12119>>>// will be set for the remainder of the session or until set again. To 
12119>>>// permanently set driver level attributes change the driver           
12119>>>// configuration file.                                                 
12119>>>
12119>>>
12119>>>
12119>>>
12119>>>
12119>>>
12119>>>
12119>>>// An instance of this class can be used as a broker object to
12119>>>// call several CLI releated methods.                         
12119>>>
12119>>>//Class cCLIHandler is a cObject
12119>>>Class cCLIHandler is an Array
12120>>>    
12120>>>    Procedure Construct_Object 
12122>>>        Forward Send Construct_object 
12124>>>        
12124>>>        Property String  psDriverID        ""
12125>>>    End_Procedure
12126>>>    
12126>>>    
12126>>>    
12126>>>    // The revsion of a CLI Connectivity Kit
12126>>>    Function CKRevision Returns String
12128>>>        String  sDriverID
12128>>>        String  sRevision
12128>>>        String  sVoid
12128>>>        Integer iRetval
12128>>>        
12128>>>        Get psDriverID to sDriverID
12129>>>        If (sDRiverID <> "") Begin
12131>>>            Move (Repeat(" ", 255)) to sRevision
12132>>>            Call_Driver 0 sDRiverID Function CLI_CKREVISION Callback 0 Passing sRevision sVoid 0 Result iRetval
12137>>>        End
12137>>>>
12137>>>        
12137>>>        Function_Return sRevision
12138>>>    End_Function
12139>>>    
12139>>>    
12139>>>    
12139>>>    // Extarct the Nth part of a a.b.c.d revsion string.
12139>>>    // Returns : The part version number or -1 if there is no such part number.
12139>>>    //
12139>>>    Function ExtractPartFromRevision Integer iPartNum String sRevision Returns Integer
12141>>>        Integer iPartRev
12141>>>        Integer iCurrentPart
12141>>>        Integer iSeparatorPos
12141>>>        
12141>>>        If (iPartNum > 4) ;            Function_Return -1
12144>>>        
12144>>>        Move 0 to iCurrentPart
12145>>>        Repeat
12145>>>>
12145>>>            Move (Pos(".", sRevision)) to iSeparatorPos
12146>>>            If (iSeparatorPos > 0) Begin
12148>>>                Move (Left(sRevision, iSeparatorPos - 1)) to iPartRev
12149>>>                Move (Right(sRevision, Length(sRevision) - iSeparatorPos)) to sRevision
12150>>>                Increment iCurrentPart
12151>>>            End
12151>>>>
12151>>>            Else If (sRevision <> "") Begin
12154>>>                Move sRevision to iPartRev
12155>>>                Move "" to sRevision
12156>>>                Increment iCurrentPart
12157>>>            End
12157>>>>
12157>>>            Else ;                Move -1 to iPartRev
12159>>>        Until (iCurrentPart >= iPartNum or iPartRev = -1)
12161>>>        
12161>>>        Function_Return iPartRev
12162>>>    End_Function
12163>>>    
12163>>>    
12163>>>    
12163>>>    // Returns the major revision of the CK
12163>>>    //
12163>>>    Function CKMajorRevision Returns Integer
12165>>>        Function_Return (ExtractPartFromRevision (Self, 1, CKRevision(Self)))
12166>>>    End_Function
12167>>>    
12167>>>    
12167>>>    
12167>>>    // Returns the minor revision of the CK
12167>>>    //
12167>>>    Function CKMinorRevision Returns Integer
12169>>>        Function_Return (ExtractPartFromRevision (Self, 2, CKRevision(Self)))
12170>>>    End_Function
12171>>>    
12171>>>    
12171>>>    
12171>>>    // Returns the release revision of the CK
12171>>>    //
12171>>>    Function CKReleaseRevision Returns Integer
12173>>>        Function_Return (ExtractPartFromRevision (Self, 3, CKRevision(Self)))
12174>>>    End_Function
12175>>>    
12175>>>    
12175>>>    
12175>>>    // Returns the major revision of the CK
12175>>>    //
12175>>>    Function CKBuildRevision Returns Integer
12177>>>        Function_Return (ExtractPartFromRevision (Self, 4, CKRevision(Self)))
12178>>>    End_Function
12179>>>    
12179>>>    
12179>>>    
12179>>>    // Determines if the CK conforms to a passed minimal revsion.
12179>>>    //
12179>>>    Function IsMinimalRevision Integer iMajor Integer iMinor Integer iRelease Integer iBuild Returns Integer
12181>>>        If (iMajor < CKMajorRevision(Self)) ;            Function_Return (True)
12184>>>        Else If (iMajor = CKMajorRevision(Self)) Begin
12187>>>            If (iMinor < CKMinorRevision(Self)) ;                Function_Return (True)
12190>>>            Else If (iMinor = CKMinorRevision(Self)) Begin
12193>>>                If (iRelease < CKReleaseRevision(Self)) ;                    Function_Return (True)
12196>>>                Else If (iRelease = CKReleaseRevision(Self) and iBuild <= CKBuildRevision(Self)) ;                    Function_Return (True)
12200>>>            End
12200>>>>
12200>>>        End
12200>>>>
12200>>>        
12200>>>        Function_Return (False)
12201>>>    End_Function
12202>>>    
12202>>>    
12202>>>    
12202>>>    // Returns the Connectiivty Kit registration name.
12202>>>    //
12202>>>    Function RegistrationName Returns String
12204>>>        String  sRegistration
12204>>>        String  sDRiverId
12204>>>        String  sVoid
12204>>>        Integer iRetval
12204>>>        
12204>>>        Get psDriverID to sDriverID
12205>>>        If (sDRiverID <> "") Begin
12207>>>            Move (Repeat(" ", 255)) to sRegistration
12208>>>            Call_Driver 0 sDRiverID Function CLI_GETREGNAME Callback 0 Passing sRegistration sVoid 0 Result iRetval
12213>>>        End
12213>>>>
12213>>>        
12213>>>        Function_Return sRegistration
12214>>>    End_Function
12215>>>    
12215>>>    // Returns the Connectiivty Kit serial number.
12215>>>    //
12215>>>    Function SerialNumber Returns Integer
12217>>>        String  sDRiverId
12217>>>        String  sVoid
12217>>>        Integer iRetval
12217>>>        
12217>>>        Get psDriverID to sDriverID
12218>>>        If (sDRiverID <> "") Begin
12220>>>            Call_Driver 0 sDRiverID Function CLI_GETSERIALNUM Callback 0 Passing sVoid sVoid 0 Result iRetval
12225>>>        End
12225>>>>
12225>>>        
12225>>>        Function_Return iRetval
12226>>>    End_Function
12227>>>    
12227>>>    
12227>>>    // Returns the Connectiivty Kit maximum number of users.
12227>>>    //
12227>>>    Function MaxUsers Returns Integer
12229>>>        String  sDRiverId
12229>>>        String  sVoid
12229>>>        Integer iRetval
12229>>>        
12229>>>        Get psDriverID to sDriverID
12230>>>        If (sDRiverID <> "") Begin
12232>>>            Call_Driver 0 sDRiverID Function CLI_GETMAXUSERS Callback 0 Passing sVoid sVoid 0 Result iRetval
12237>>>        End
12237>>>>
12237>>>        
12237>>>        Function_Return iRetval
12238>>>    End_Function
12239>>>    
12239>>>    
12239>>>    
12239>>>    // Dump the current status of the drver in the passed disk file.
12239>>>    //
12239>>>    Procedure DumpStatus String sFileName
12241>>>        String  sVoid
12241>>>        String  sDriverID
12241>>>        Integer iVoid
12241>>>        
12241>>>        Get psDriverID to sDriverID
12242>>>        If (sDriverID <> "") ;            Call_Driver 0 sDriverID Function CLI_DUMPSTATUS Callback 0 Passing sFileName sVoid iVoid Result iVoid
12249>>>    End_Procedure
12250>>>    
12250>>>    
12250>>>    
12250>>>    // Reset all driver level configurable attributes to the
12250>>>    // default value and then reread the configuration.
12250>>>    //
12250>>>    Procedure ReadConfiguration
12252>>>        String  sVoid
12252>>>        String  sDriverID
12252>>>        Integer iVoid
12252>>>        
12252>>>        Get psDriverID to sDriverID
12253>>>        If (sDriverID <> "") ;            Call_Driver 0 sDriverID Function CLI_READCONFIGURATION Callback 0 Passing sVoid sVoid iVoid Result iVoid
12260>>>    End_Procedure
12261>>>    
12261>>>    
12261>>>    
12261>>>    // Convert a text to the corresponding
12261>>>    // Generate_Record_ID_Method attribute value
12261>>>    //
12261>>>    Function TextToRIMValue String sText Returns Integer
12263>>>        If (sText = "None") ;            Function_Return RIM_NONE
12266>>>        Else If (sText = "Identity Column") ;            Function_Return RIM_IDENTITY_COLUMN
12270>>>        Else If (sText = "Dispenser Table") ;            Function_Return RIM_DISPENSER_TABLE
12274>>>        Else If (sText = "External") ;            Function_Return RIM_EXTERNAL
12278>>>    End_Function
12279>>>    
12279>>>    
12279>>>    
12279>>>    // Convert a Generate_Record_ID_Method attribute value to the
12279>>>    // corresponding text.
12279>>>    //
12279>>>    Function RIMValueToText Integer iAttrValue Returns String
12281>>>        If (iAttrValue = RIM_NONE) ;            Function_Return "None"
12284>>>        Else If (iAttrValue = RIM_IDENTITY_COLUMN) ;            Function_Return "Identity Column"
12288>>>        Else If (iAttrValue = RIM_DISPENSER_TABLE) ;            Function_Return "Dispenser Table"
12292>>>        Else If (iAttrValue = RIM_EXTERNAL) ;            Function_Return "External"
12296>>>    End_Function
12297>>>    
12297>>>    
12297>>>    
12297>>>    // Convert a text to the corresponding
12297>>>    // Generate_Record_ID_Method attribute value
12297>>>    //
12297>>>    Function TextToROValue String sText Returns Integer
12299>>>        If (sText = "No") ;            Function_Return RO_NO
12302>>>        Else If (sText = "Ignore Change") ;            Function_Return RO_IGNORECHANGE
12306>>>        Else If (sText = "Accept Change") ;            Function_Return RO_ACCEPTCHANGE
12310>>>        Else If (sText = "Error On Change") ;            Function_Return RO_ERRORONCHANGE
12314>>>    End_Function
12315>>>    
12315>>>    
12315>>>    
12315>>>    // Convert a Generate_Record_ID_Method attribute value to the
12315>>>    // corresponding text.
12315>>>    //
12315>>>    Function ROValueToText Integer iAttrValue Returns String
12317>>>        If (iAttrValue = RO_NO) ;            Function_Return "No"
12320>>>        Else If (iAttrValue = RO_IGNORECHANGE) ;            Function_Return "Ignore Change"
12324>>>        Else If (iAttrValue = RO_ACCEPTCHANGE) ;            Function_Return "Accept Change"
12328>>>        Else If (iAttrValue = RO_ERRORONCHANGE) ;            Function_Return "Error On Change"
12332>>>    End_Function
12333>>>    
12333>>>    
12333>>>    
12333>>>    // Return the text f the last error geneated by the driver.
12333>>>    //
12333>>>    Function LastDriverError Returns String
12335>>>        String  sDriverID
12335>>>        String  sLastError
12335>>>        String  sLastErrorLength
12335>>>        Integer iLastErrorLength
12335>>>        Integer iVoid
12335>>>        
12335>>>        // Initialize
12335>>>        Move "" to sLastError
12336>>>        
12336>>>        Get psDriverID to sDriverID
12337>>>        If (sDriverID <> "") Begin
12339>>>            // Get the text of the last error
12339>>>            Move (Repeat(Character(" "), 14)) to sLastErrorlength
12340>>>            Call_Driver 0 sDriverID Function CLI_GETDRIVERATTRIBUTE Callback 0 Passing sLastErrorLength iVoid DRVR_LASTERRORTEXTLENGTH Result iVoid
12345>>>            Move (Left(sLastErrorLength, Pos(Character(0), sLastErrorLength) - 1)) to iLastErrorLength
12346>>>            
12346>>>            If (iLastErrorLength > 0) Begin
12348>>>                Move (Repeat(Character(" "), iLastErrorLength + 1)) to sLastError
12349>>>                Call_Driver 0 sDriverID Function CLI_GETDRIVERATTRIBUTE Callback 0 Passing sLastError iVoid DRVR_LASTERRORTEXT Result iVoid
12354>>>                Move (Left(sLastError, Pos(Character(0), sLastError) - 1)) to sLastError
12355>>>            End
12355>>>>
12355>>>        End
12355>>>>
12355>>>        
12355>>>        Function_Return sLastError
12356>>>    End_Function
12357>>>    
12357>>>    
12357>>>    
12357>>>    // Enumerate the tables in a database
12357>>>    //
12357>>>    Function EnumerateTables String sLogin Returns Integer
12359>>>        String  sDriver
12359>>>        String  sVoid
12359>>>        Integer iNumTables
12359>>>        Integer iVoid
12359>>>        
12359>>>        Get psDriverID to sDriver
12360>>>        If (sDriver <> "") ;            Call_Driver 0 sDriver Function CLI_ENUMERATE_TABLES Callback 0 Passing sLogin sVoid iVoid Result iNumTables
12367>>>        
12367>>>        Function_Return iNumTables
12368>>>    End_Function
12369>>>    
12369>>>    
12369>>>    
12369>>>    // Returns the name of the table enumerated at the given position
12369>>>    //
12369>>>    Function TableName Integer iIndex Returns String
12371>>>        String  sDriver
12371>>>        String  sTableName
12371>>>        String  sVoid
12371>>>        Integer iVoid
12371>>>        
12371>>>        Get psDriverID to sDriver
12372>>>        If (sDriver <> "") Begin
12374>>>            Move (Repeat(" ", 255)) to sTableName
12375>>>            Call_Driver 0 sDriver Function CLI_TABLENAME Callback 0 Passing sTableName sVoid iIndex Result iVoid
12380>>>        End
12380>>>>
12380>>>        
12380>>>        Function_Return sTableName
12381>>>    End_Function
12382>>>    
12382>>>    
12382>>>    
12382>>>    // Returns the name of the schema of the table enumerated at the given position
12382>>>    //
12382>>>    Function SchemaName Integer iIndex Returns String
12384>>>        String  sDriver
12384>>>        String  sSchemaName
12384>>>        String  sVoid
12384>>>        Integer iVoid
12384>>>        
12384>>>        Get psDriverID to sDriver
12385>>>        If (sDriver <> "") Begin
12387>>>            Move (Repeat(" ", 255)) to sSchemaName
12388>>>            Call_Driver 0 sDriver Function CLI_TABLESCHEMA Callback 0 Passing sSchemaName sVoid iIndex Result iVoid
12393>>>        End
12393>>>>
12393>>>        
12393>>>        Function_Return sSchemaName
12394>>>    End_Function
12395>>>    
12395>>>    // Returns the type of the table enumerated at the given position.
12395>>>    // Types can be "TABLE", "VIEW", "SYSTEM TABLE", "GLOBAL TEMPORARY",
12395>>>    // "LOCAL TEMPORARY", "ALIAS", "SYNONYM"
12395>>>    Function TableType Integer iIndex Returns String
12397>>>        String  sDriver
12397>>>        String  sTableType
12397>>>        String  sVoid
12397>>>        Integer iVoid
12397>>>        
12397>>>        Get psDriverID to sDriver
12398>>>        If (sDriver <> "") Begin
12400>>>            Move (Repeat(" ", 25)) to sTableType
12401>>>            Call_Driver 0 sDriver Function CLI_TABLETYPE Callback 0 Passing sTableType sVoid iIndex Result iVoid
12406>>>        End
12406>>>>
12406>>>        
12406>>>        Function_Return sTableType
12407>>>    End_Function
12408>>>    
12408>>>    
12408>>>    // Returns the comment of the table enumerated at the given position
12408>>>    //
12408>>>    Function TableComment Integer iIndex Returns String
12410>>>        String  sDriver
12410>>>        String  sTableComment
12410>>>        String  sVoid
12410>>>        Integer iVoid
12410>>>        
12410>>>        Get psDriverID to sDriver
12411>>>        If (sDriver <> "") Begin
12413>>>            Move (Repeat(" ", 1024)) to sTableComment
12414>>>            Call_Driver 0 sDriver Function CLI_TABLECOMMENT Callback 0 Passing sTableComment sVoid iIndex Result iVoid
12419>>>        End
12419>>>>
12419>>>        
12419>>>        Function_Return sTableComment
12420>>>    End_Function
12421>>>    
12421>>>    // Enumerate the columns in a table
12421>>>    //
12421>>>    Function EnumerateColumns String sLogin String sTableName Returns Integer
12423>>>        String  sDriver
12423>>>        Integer iNumColumns
12423>>>        Integer iVoid
12423>>>        
12423>>>        Get psDriverID to sDriver
12424>>>        If (sDriver <> "") ;            Call_Driver 0 sDriver Function CLI_ENUMERATE_COLUMNS Callback 0 Passing sLogin sTablename iVoid Result iNumColumns
12431>>>        
12431>>>        Function_Return iNumColumns
12432>>>    End_Function
12433>>>    
12433>>>    
12433>>>    
12433>>>    // Returns the name of the column enumerated at the given position
12433>>>    //
12433>>>    Function ColumnName Integer iIndex Returns String
12435>>>        String  sDriver
12435>>>        String  sColumnName
12435>>>        String  sVoid
12435>>>        Integer iVoid
12435>>>        
12435>>>        Get psDriverID to sDriver
12436>>>        If (sDriver <> "") Begin
12438>>>            Move (Repeat(" ", 255)) to sColumnName
12439>>>            Call_Driver 0 sDriver Function CLI_COLUMNNAME Callback 0 Passing sColumnName sVoid iIndex Result iVoid
12444>>>        End
12444>>>>
12444>>>        
12444>>>        Function_Return sColumnName
12445>>>    End_Function
12446>>>    
12446>>>    // Convert a DataFlex date to a SQL date using the dummy zero date value.
12446>>>    //
12446>>>    Function CLIDFDateToSQLDate String sDriver Date dDFDate Returns String
12448>>>        
12448>>>        Integer iDriverIndex
12448>>>        
12448>>>        String sSQLDate
12448>>>        Integer iOrgDateFmt
12448>>>        Integer iOrgDateSep
12448>>>        
12448>>>        // Change date format to military, SQL dates are military dates
12448>>>        Get_Attribute DF_DATE_FORMAT to iOrgDateFmt
12451>>>        Get_Attribute DF_DATE_SEPARATOR to iOrgDateSep
12454>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_MILITARY
12457>>>        Set_Attribute DF_DATE_SEPARATOR to (Ascii('-'))
12460>>>        
12460>>>        If (Integer(dDFDate = 0)) Begin
12462>>>            // Return the dummy zero date
12462>>>            Get DriverIndex sDriver to iDriverIndex
12463>>>            If (iDriverIndex <> 0) Begin
12465>>>                Get_Attribute DF_DRIVER_DUMMY_ZERO_DATE_VALUE of iDriverIndex to sSQLDate
12468>>>            End
12468>>>>
12468>>>            Else Begin
12469>>>                Move '0001-01-01' to sSQLDate
12470>>>            End
12470>>>>
12470>>>        End
12470>>>>
12470>>>        Else Begin
12471>>>            Move dDFDate to sSQLDate
12472>>>        End
12472>>>>
12472>>>        
12472>>>        // Change date format back to original
12472>>>        Set_Attribute DF_DATE_FORMAT to iOrgDateFmt
12475>>>        Set_Attribute DF_DATE_SEPARATOR to iOrgDateSep
12478>>>        
12478>>>        Function_Return sSQLDate
12479>>>    End_Function
12480>>>    
12480>>>    
12480>>>    
12480>>>    // Convert a SQL date to a DataFlex date using the dummy zero date value.
12480>>>    Function CLISQLDateToDFDate String sDriver String sSQLDate Returns Date
12482>>>        
12482>>>        Integer iDriverIndex
12482>>>        
12482>>>        Date dDFDate
12482>>>        String sDummyDateValue
12482>>>        Integer iOrgDateFmt
12482>>>        Integer iOrgDateSep
12482>>>        
12482>>>        // Change date format to military, SQL dates are military dates
12482>>>        Get_Attribute DF_DATE_FORMAT to iOrgDateFmt
12485>>>        Get_Attribute DF_DATE_SEPARATOR to iOrgDateSep
12488>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_MILITARY
12491>>>        Set_Attribute DF_DATE_SEPARATOR to (Ascii('-'))
12494>>>        
12494>>>        // We only need to convert if the date is the dummy zero date value
12494>>>        Get DriverIndex sDriver to iDriverIndex
12495>>>        If (iDriverIndex <> 0) Begin
12497>>>            Get_Attribute DF_DRIVER_DUMMY_ZERO_DATE_VALUE of iDriverIndex to sDummyDateValue
12500>>>        End
12500>>>>
12500>>>        Else Begin
12501>>>            Move '0001-01-01' to sDummyDateValue
12502>>>        End
12502>>>>
12502>>>        If (sDummyDateValue = sSQLDate) ;            Move 0 to dDFDate
12505>>>        Else ;            Move sSQLDate to dDFDate
12507>>>        
12507>>>        // Change date format back to original
12507>>>        Set_Attribute DF_DATE_FORMAT to iOrgDateFmt
12510>>>        Set_Attribute DF_DATE_SEPARATOR to iOrgDateSep
12513>>>        
12513>>>        Function_Return dDFDate
12514>>>    End_Function
12515>>>    
12515>>>    Function DriverIndex String sDriver Returns Integer
12517>>>        
12517>>>        String  sCurrentDriver
12517>>>        Integer iNumberOfDrivers iDriver iCount
12517>>>        
12517>>>        Move 0 to iDriver
12518>>>        
12518>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
12521>>>        For iCount from 1 to iNumberOfDrivers
12527>>>>
12527>>>            
12527>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
12530>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriver) ) Begin
12532>>>                Move iCount to iDriver
12533>>>            End
12533>>>>
12533>>>        Loop
12534>>>>
12534>>>        
12534>>>        Function_Return iDriver
12535>>>        
12535>>>    End_Function
12536>>>    
12536>>>    
12536>>>    // Redirect an exisitng connection. The existing connection
12536>>>    // will point to another database but all tables will stay
12536>>>    // open!
12536>>>    Function RedirectConnection String sOldConnection String sNewConnection Returns Integer
12538>>>        String  sDriver
12538>>>        String  sVoid
12538>>>        Integer iResult
12538>>>        Integer iVoid
12538>>>        
12538>>>        Get psDriverID to sDriver
12539>>>        If (sDriver <> "") Begin
12541>>>            Call_Driver 0 sDriver Function CLI_REDIRECTCONNECTION Callback 0 Passing sOldConnection sNewConnection iVoid Result iResult
12546>>>        End
12546>>>>
12546>>>        Function_Return iResult
12547>>>    End_Function
12548>>>    
12548>>>    // Redirect a connection of a connection ID
12548>>>    // sConnectionId must contain a valid ConnectionId ("DFCONNID=MyID")
12548>>>    // sConnectString must contain a valid connectstring ("SERVER=MyServer;DATABASE=MyDatabase;UID=MyName;PWD=MyPassword")
12548>>>    //
12548>>>    // RedirectIDConnectString will redirect from the old connection (Server/Database the connectionId currently points to)
12548>>>    // to the new connection (Server/Database specified in sConnectString)
12548>>>    // All opened tables will be moved from old connection to new connection. (Tables must have identical structure in both connections)
12548>>>    //
12548>>>    // If bKeepLoggedIn = false, the new connection will be logged in, the old connection will be logged out
12548>>>    // If bKeepLoggedIn = true, connections will remain open and re-used on next redirectIdConnection
12548>>>    //
12548>>>    // Returns:
12548>>>    //     0 when the redirection was successful.
12548>>>    //     1 if the connection ID does not exist or can not be found.
12548>>>    //     2 login into the new connection failed.
12548>>>    //
12548>>>    Function RedirectIdConnectString String sConnectionId String sConnectString Boolean bKeepLoggedIn Returns Integer
12550>>>        String  sDriver
12550>>>        String  sVoid
12550>>>        Integer iResult
12550>>>        
12550>>>        Integer iOption
12550>>>        
12550>>>        // iOption
12550>>>        // 0 = RedirectConnection
12550>>>        // 1 = RedirectIdConnectString
12550>>>        // 2 = RedirectIdConnectStringKeepLoggedIn
12550>>>        If (bKeepLoggedIn) Begin
12552>>>            Move 2 to iOption
12553>>>        End
12553>>>>
12553>>>        Else Begin
12554>>>            Move 1 to iOption
12555>>>        End
12555>>>>
12555>>>        
12555>>>        Get psDriverID to sDriver
12556>>>        If (sDriver <> "") Begin
12558>>>            Call_Driver 0 sDriver Function CLI_REDIRECTCONNECTION Callback 0 Passing sConnectionId sConnectString iOption Result iResult
12563>>>        End
12563>>>>
12563>>>        Function_Return iResult
12564>>>    End_Function
12565>>>    
12565>>>    
12565>>>    // Create a DataFlex side connection id that can be used later on.
12565>>>    //
12565>>>    Function CreateConnectionID String sID String sConnStr Integer iOpt Returns Integer
12567>>>        String  sDriver
12567>>>        Integer iResult
12567>>>        Integer iOptions
12567>>>        
12567>>>        Get psDriverID to sDriver
12568>>>        If (Num_Arguments = 2) ;            Move 0 to iOptions
12571>>>        Else ;            Move iOpt to iOptions
12573>>>        If (sDriver <> "") Begin
12575>>>            Call_Driver 0 sDriver Function CLI_CREATECONNECTIONID Callback 0 Passing sID sConnStr iOptions Result iResult
12580>>>        End
12580>>>>
12580>>>        Function_Return iResult
12581>>>    End_Function
12582>>>    
12582>>>    
12582>>>    
12582>>>    // Delete a DataFlex side connection id.
12582>>>    //
12582>>>    Function DeleteConnectionID String sID Integer iIndex Returns Integer
12584>>>        String  sDriver
12584>>>        Integer iResult
12584>>>        String sVoid
12584>>>        
12584>>>        Get psDriverID to sDriver
12585>>>        If (sDriver <> "") Begin
12587>>>            Call_Driver 0 sDriver Function CLI_DELETECONNECTIONID Callback 0 Passing sID sVoid iIndex Result iResult
12592>>>        End
12592>>>>
12592>>>        Function_Return iResult
12593>>>    End_Function
12594>>>    
12594>>>End_Class
12595>Use vWin32fh.pkg
Including file: vWin32fh.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\vwin32fh\vWin32fh.pkg)
12595>>>// This code is part of VDF GUIdance
12595>>>// Visit us @ http://www.vdf-guidance.com
12595>>>// e-Mail us @ info@vdf-guidance.com
12595>>>// VDF GUIdance is a mutual project of
12595>>>// Frank Vandervelpen - Vandervelpen Systems and
12595>>>// Wil van Antwerpen  - Antwise Solutions
12595>>>// All software source code should be used <<AS IS>> without any warranty.
12595>>>//
12595>>>//
12595>>>// *** Windows 32bit file handling wrapper class ***
12595>>>//
12595>>>
12595>>>
12595>>>Use File_Dlg.pkg      // Contains OpenDialog class definition
12595>>>Use cvFileDialogs.pkg
Including file: cvFileDialogs.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\vwin32fh\cvFileDialogs.pkg)
12595>>>>>//***************************************************************************
12595>>>>>//*
12595>>>>>//* Class:        cvSaveAsDialog
12595>>>>>//* Package Name: cvFileDialogs.pkg
12595>>>>>//*
12595>>>>>//***************************************************************************
12595>>>>>
12595>>>>>Use File_dlg.pkg
12595>>>>>
12595>>>>>// *WvA: 13-01-1999 Created
12595>>>>>// The Class cSelectFile_Dialog is created to support the function Select_File
12595>>>>>// This function opens the Windows standard file open dialog and returns the selected
12595>>>>>// file_name.
12595>>>>>Class cvSelectFile_Dialog is an OpenDialog
12596>>>>>
12596>>>>>    Procedure Construct_Object Integer iImage_Id
12598>>>>>        Forward Send Construct_Object iImage_Id
12600>>>>>        Set HideReadOnly_State to True
12601>>>>>    End_Procedure
12602>>>>>
12602>>>>>    Function SelectedFileName Returns String
12604>>>>>        String sFileName
12604>>>>>        Move "" to sFileName
12605>>>>>        If (Show_Dialog(Self)) Begin
12607>>>>>            Move (RTrim(File_Name(Self))) to sFileName
12608>>>>>        End
12608>>>>>>
12608>>>>>        Function_Return sFileName
12609>>>>>    End_Function
12610>>>>>End_Class
12611>>>>>
12611>>>>>// *WvA: 13-01-1999 Created
12611>>>>>// This function opens the Windows standard file open dialog and returns the selected
12611>>>>>// file_name. Returns '' if the user didn't make a selection.
12611>>>>>// **WvA: 17-10-2003 Cleaned up and added code to destroy the dynamically created
12611>>>>>//                   file-open dialog
12611>>>>>Function vSelect_File Global String sSupportedFileTypes String sCaptionText String sInitialFolder Returns String
12613>>>>>    String sSelectedFile
12613>>>>>    Integer hoOpenFileDialog
12613>>>>>
12613>>>>>    Object oOpenFileDialog is a cvSelectFile_Dialog
12615>>>>>
12615>>>>>        Set Dialog_Caption    to sCaptionText
12616>>>>>        Set Filter_String     to sSupportedFileTypes
12617>>>>>        Set Initial_Folder    to sInitialFolder
12618>>>>>
12618>>>>>        Move Self       to hoOpenFileDialog
12619>>>>>    End_Object
12620>>>>>
12620>>>>>    Get SelectedFileName of hoOpenFileDialog to sSelectedFile
12621>>>>>    Send Destroy_Object to hoOpenFileDialog
12622>>>>>    Function_Return sSelectedFile
12623>>>>>End_Function
12624>>>>>
12624>>>>>Class cvSaveAsDialog is a SaveAsDialog
12625>>>>>
12625>>>>>    Procedure Construct_Object
12627>>>>>        Forward Send Construct_Object
12629>>>>>        Set HideReadOnly_State to True
12630>>>>>    End_Procedure
12631>>>>>
12631>>>>>    Function SelectedFileName Returns String
12633>>>>>        String sFileName
12633>>>>>        Move "" to sFileName
12634>>>>>        If (Show_Dialog(Self)) Begin
12636>>>>>            Move (RTrim(File_Name(Self))) to sFileName
12637>>>>>        End
12637>>>>>>
12637>>>>>        Function_Return sFileName
12638>>>>>    End_Function
12639>>>>>
12639>>>>>End_Class
12640>>>>>
12640>>>>>// Added optional default filename as suggested by Nils
12640>>>>>Function vSelectSaveFile Global String sSupportedFileTypes String sCaptionText String sInitialFolder String sDefaultFileName Returns String
12642>>>>>    String sSelectedFile
12642>>>>>    Integer hoDialog
12642>>>>>
12642>>>>>    Move "" to sSelectedFile
12643>>>>>    Get Create (RefClass(cvSaveAsDialog)) to hoDialog
12644>>>>>    If (hoDialog) Begin
12646>>>>>    //Set NoChangeDir_State Of hoDialog To True
12646>>>>>        Set Dialog_Caption    of hoDialog to sCaptionText
12647>>>>>        Set Filter_String     of hoDialog to sSupportedFileTypes
12648>>>>>        Set Initial_Folder    of hoDialog to sInitialFolder
12649>>>>>        If (Num_Arguments = 4) Begin
12651>>>>>            Set File_Title        of hoDialog to sDefaultFileName
12652>>>>>        End
12652>>>>>>
12652>>>>>        Get SelectedFileName  of hoDialog to sSelectedFile
12653>>>>>        Send Destroy of hoDialog
12654>>>>>    End
12654>>>>>>
12654>>>>>    Function_Return sSelectedFile
12655>>>>>End_Function
12656>>>Use Seq_chnl.pkg
12656>>>
12656>>>Use windows.pkg
12656>>>Use Dll.pkg
12656>>>
12656>>>Use vWin32fhW.pkg     // WinAPI Unicode version
Including file: vwin32fhW.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\vwin32fh\vwin32fhW.pkg)
12656>>>>>// This code is part of VDF GUIdance
12656>>>>>// Visit us @ http://www.vdf-guidance.com
12656>>>>>// e-Mail us @ info@vdf-guidance.com
12656>>>>>// VDF GUIdance is a mutual project of
12656>>>>>// Frank Vandervelpen - Vandervelpen Systems and
12656>>>>>// Wil van Antwerpen  - Antwise Solutions
12656>>>>>// All software source code should be used <<AS IS>> without any warranty.
12656>>>>>//
12656>>>>>//
12656>>>>>// *** Windows 32bit file handling wrapper class ***
12656>>>>>// Unicode variant
12656>>>>>
12656>>>>>Use vWin32fhW.h       // Header file with WinAPI Unicode declarations
Including file: vwin32fhW.h    (C:\Projects\DF20\DbUpdateFramework\Libraries\vwin32fh\vwin32fhW.h)
12656>>>>>>>//TH-Header
12656>>>>>>>//*****************************************************************************************
12656>>>>>>>// Copyright (c)  2004 KURANT Project
12656>>>>>>>// All rights reserved.
12656>>>>>>>//
12656>>>>>>>// $FileName    : G:\Projects\vWin32fh\vWin32fh.h
12656>>>>>>>// $ProjectName : Windows 32 bits file handling
12656>>>>>>>// $Authors     : Wil van Antwerpen
12656>>>>>>>// $Created     : 19.02.2004  19:25
12656>>>>>>>// $Type        : BSD (as in do with it whatever you like)
12656>>>>>>>//
12656>>>>>>>// Contents:
12656>>>>>>>//  This file contains the Windows API external function call definitions and
12656>>>>>>>//  constants as they are used in the vWin32fh package.
12656>>>>>>>//*****************************************************************************************
12656>>>>>>>//TH-RevisionStart
12656>>>>>>>//TH-RevisionEnd
12656>>>>>>>
12656>>>>>>>Define CS_DDE_ERR_FILE_NOT_FOUND  For "The specified file was not found.\n"
12656>>>>>>>Define CS_DDE_ERR_PATH_NOT_FOUND  For "The specified path was not found.\n"
12656>>>>>>>Define CS_DDE_ERR_BAD_FORMAT      For "The .EXE file is invalid.\n"
12656>>>>>>>Define CS_DDE_ERR_ACCESSDENIED    For "The operating system denied access to the specified file.\n"
12656>>>>>>>Define CS_DDE_ERR_ASSOCINCOMPLETE For "The filename association is incomplete or invalid.\n"
12656>>>>>>>Define CS_DDE_ERR_DDEBUSY         For "The DDE transaction could not be completed because other DDE\ntransactions were being processed.\n"
12656>>>>>>>Define CS_DDE_ERR_DDEFAIL         For "The DDE transaction failed.\n"
12656>>>>>>>Define CS_DDE_ERR_DDETIMEOUT      For "The DDE transaction could not be completed,\nbecause the request timed out.\n"
12656>>>>>>>Define CS_DDE_ERR_DLLNOTFOUND     For "The specified dynamic-link library was not found.\n"
12656>>>>>>>Define CS_DDE_ERR_NOASSOC         For "There is no application associated with the given filename extension.\n"
12656>>>>>>>Define CS_DDE_ERR_OOM             For "There is not enough free memory available to complete the operation.\n"
12656>>>>>>>Define CS_DDE_ERR_PNF             For "The specified path was not found.\n"
12656>>>>>>>Define CS_DDE_ERR_SHARE           For "A sharing violation occurred.\n"
12656>>>>>>>Define CS_DDE_ERR_UNKNOWN_LINE1   For "Unknown DDE-error occurred.\nErrornumber"
12656>>>>>>>Define CS_DDE_ERR_UNKNOWN_LINE2   For ".\n"
12656>>>>>>>Define CS_DDE_ERR_HANDL_PAKTC     For "\nPress a key to continue...\n\n"
12656>>>>>>>Define CS_DDE_ERR_HANDL_CAPTION   For "a DDE-error occurred"
12656>>>>>>>
12656>>>>>>>
12656>>>>>>>Define vMax_Path     For |CI260
12656>>>>>>>Define vMinChar      For |CI$80
12656>>>>>>>Define vMaxChar      For |CI$7F
12656>>>>>>>Define vMinShort     For |CI$8000
12656>>>>>>>Define vMaxShort     For |CI$7FFF
12656>>>>>>>Define vMinLong      For |CI$80000000
12656>>>>>>>Define vMaxLong      For |CI$7FFFFFFF
12656>>>>>>>Define vMaxByte      For |CI$FF
12656>>>>>>>Define vMaxWord      For |CI$FFFF
12656>>>>>>>Define vMaxDword     For |CI$FFFFFFFF
12656>>>>>>>
12656>>>>>>>
12656>>>>>>>
12656>>>>>>>// For FindFirstFile
12656>>>>>>>Define vINVALID_HANDLE_VALUE   For |CI-1
12656>>>>>>>Define vINVALID_FILE_SIZE      For |CI$FFFFFFFF
12656>>>>>>>Define vERROR_NO_MORE_FILES    For |CI18
12656>>>>>>>
12656>>>>>>>// The defines below can be used to find out what kind of error has occurred if
12656>>>>>>>// the API-call ShellExecute is used.
12656>>>>>>>Define vERROR_FILE_NOT_FOUND   For |CI0002
12656>>>>>>>Define vERROR_PATH_NOT_FOUND   For |CI0003
12656>>>>>>>Define vERROR_BAD_FORMAT       For |CI0011
12656>>>>>>>Define vSE_ERR_ACCESSDENIED    For |CI0005
12656>>>>>>>Define vSE_ERR_ASSOCINCOMPLETE For |CI0027
12656>>>>>>>Define vSE_ERR_DDEBUSY         For |CI0030
12656>>>>>>>Define vSE_ERR_DDEFAIL         For |CI0029
12656>>>>>>>Define vSE_ERR_DDETIMEOUT      For |CI0028
12656>>>>>>>Define vSE_ERR_DLLNOTFOUND     For |CI0032
12656>>>>>>>Define vSE_ERR_FNF             For |CI0002
12656>>>>>>>Define vSE_ERR_NOASSOC         For |CI0031
12656>>>>>>>Define vSE_ERR_OOM             For |CI0008
12656>>>>>>>Define vSE_ERR_PNF             For |CI0003
12656>>>>>>>Define vSE_ERR_SHARE           For |CI0026
12656>>>>>>>
12656>>>>>>>
12656>>>>>>>// C-Structure
12656>>>>>>>//typedef struct _browseinfo {
12656>>>>>>>//    HWND hwndOwner;
12656>>>>>>>//    LPCITEMIDLIST pidlRoot;
12656>>>>>>>//    LPSTR pszDisplayName;
12656>>>>>>>//    LPCSTR lpszTitle;
12656>>>>>>>//    UINT ulFlags;
12656>>>>>>>//    BFFCALLBACK lpfn;
12656>>>>>>>//    LPARAM lParam;
12656>>>>>>>//    int iImage;
12656>>>>>>>//} BROWSEINFO, *PBROWSEINFO, *LPBROWSEINFO;
12656>>>>>>>
12656>>>>>>>//declare C structure struct_browseinfo
12656>>>>>>>//as documented in MSDN under Windows Shell API
12656>>>>>>>Struct tvBrowseInfo
12656>>>>>>>  Handle    hWndOwner
12656>>>>>>>  Pointer   pIDLRoot
12656>>>>>>>  Pointer   pszDisplayName
12656>>>>>>>  Pointer   lpszTitle
12656>>>>>>>  DWord     ulFlags
12656>>>>>>>  Pointer   lpfnCallback
12656>>>>>>>  LongPtr   lParam
12656>>>>>>>  DWord     iImage
12656>>>>>>>End_Struct // tvBrowseInfo
12656>>>>>>>
12656>>>>>>>// Browsing for directory.
12656>>>>>>>Define vBIF_RETURNONLYFSDIRS   For |CI$0001  // For finding a folder to start document searching
12656>>>>>>>Define vBIF_DONTGOBELOWDOMAIN  For |CI$0002  // For starting the Find Computer
12656>>>>>>>Define vBIF_STATUSTEXT         For |CI$0004  // Includes a status area in the dialog box.
12656>>>>>>>                                            // The callback function can set the status text by
12656>>>>>>>                                            // sending messages to the dialog box.
12656>>>>>>>Define vBIF_RETURNFSANCESTORS  For |CI$0008  // Only returns file system ancestors.
12656>>>>>>>
12656>>>>>>>Define vBIF_BROWSEFORCOMPUTER  For |CI$1000  // Browsing for Computers.
12656>>>>>>>Define vBIF_BROWSEFORPRINTER   For |CI$2000  // Browsing for Printers
12656>>>>>>>
12656>>>>>>>// message from browser
12656>>>>>>>//Define BFFM_INITIALIZED        1
12656>>>>>>>//Define BFFM_SELCHANGED         2
12656>>>>>>>
12656>>>>>>>// messages to browser
12656>>>>>>>//Define BFFM_SETSTATUSTEXT      (WM_USER + 100)
12656>>>>>>>//Define BFFM_ENABLEOK           (WM_USER + 101)
12656>>>>>>>//Define BFFM_SETSELECTION       (WM_USER + 102)
12656>>>>>>>
12656>>>>>>>
12656>>>>>>>External_function vWin32_SHBrowseForFolder "SHBrowseForFolderW" shell32.dll ;  Pointer lpsBrowseInfo Returns dWord
12657>>>>>>>
12657>>>>>>>External_function vWin32_SHGetPathFromIDList "SHGetPathFromIDListW" shell32.dll ;  Pointer pidList Pointer lpBuffer Returns dWord
12658>>>>>>>
12658>>>>>>>External_function vWin32_CoTaskMemFree "CoTaskMemFree" ole32.dll Pointer pV Returns Integer
12659>>>>>>>
12659>>>>>>>
12659>>>>>>>
12659>>>>>>>
12659>>>>>>>Struct tvSecurity_attributes
12659>>>>>>>  DWord   nLength
12659>>>>>>>  Pointer lpDescriptor
12659>>>>>>>  Integer bInheritHandle
12659>>>>>>>End_Struct // tvSecurity_attributes
12659>>>>>>>
12659>>>>>>>//nLength:
12659>>>>>>>// Specifies the size, in bytes, of this structure. Set this value to the size of the
12659>>>>>>>// SECURITY_ATTRIBUTES structure.
12659>>>>>>>// Windows NT: Some functions that use the SECURITY_ATTRIBUTES structure do not verify the
12659>>>>>>>// value of the nLength member. However, an application should still set it properly.
12659>>>>>>>// That ensures current, future, and cross-platform compatibility.
12659>>>>>>>//
12659>>>>>>>//lpSecurityDescriptor:
12659>>>>>>>// Points to a security descriptor for the object that controls the sharing of it.
12659>>>>>>>// If NULL is specified for this member, the object may be assigned the default security
12659>>>>>>>// descriptor of the calling process.
12659>>>>>>>//
12659>>>>>>>//bInheritHandle:
12659>>>>>>>// Specifies whether the returned handle is inherited when a new process is created.
12659>>>>>>>// If this member is TRUE, the new process inherits the handle.
12659>>>>>>>
12659>>>>>>>
12659>>>>>>>// BOOL CreateDirectory(
12659>>>>>>>//    LPCTSTR lpPathName,
12659>>>>>>>//    LPSECURITY_ATTRIBUTES lpSecurityAttributes  // pointer to a security descriptor
12659>>>>>>>//   );
12659>>>>>>>//
12659>>>>>>>// lpPathName
12659>>>>>>>//  Points to a null-terminated string that specifies the path of the directory
12659>>>>>>>//  to be created.
12659>>>>>>>//  There is a default string size limit for paths of MAX_PATH characters.
12659>>>>>>>//  This limit is related to how the CreateDirectory function parses paths.
12659>>>>>>>// lpSecurityAttributes
12659>>>>>>>//  Pointer to a SECURITY_ATTRIBUTES structure als called a security descriptor that
12659>>>>>>>//  determines whether the returned handle can be inherited by child processes.
12659>>>>>>>//  If lpSecurityAttributes is NULL, the handle cannot be inherited.
12659>>>>>>>// Returns:
12659>>>>>>>//  If the function succeeds, the return value is nonzero.
12659>>>>>>>//  If the function fails, the return value is zero. To get extended error information, call GetLastError.
12659>>>>>>>External_function vWin32_CreateDirectory "CreateDirectoryW" kernel32.dll ;  WString sPathName Pointer lpSecurity_Attributes Returns Integer
12660>>>>>>>
12660>>>>>>>
12660>>>>>>>// lpPathName
12660>>>>>>>//  Points to a null-terminated string that specifies the path of the directory
12660>>>>>>>//  to be removed.
12660>>>>>>>//  There is a default string size limit for paths of MAX_PATH characters.
12660>>>>>>>// Returns:
12660>>>>>>>//  If the function succeeds, the return value is nonzero.
12660>>>>>>>//  If the function fails, the return value is zero. To get extended error information, call GetLastError.
12660>>>>>>>External_function vWin32_RemoveDirectory "RemoveDirectoryW" kernel32.dll ;  WString sPathName Returns Integer
12661>>>>>>>
12661>>>>>>>
12661>>>>>>>
12661>>>>>>>// The ShellExecute function opens or prints a specified file. The file can be an
12661>>>>>>>// executable file or a document file.
12661>>>>>>>//
12661>>>>>>>// Operation can be one of the following:
12661>>>>>>>//    "OPEN"  The function opens the file specified by lpFile.
12661>>>>>>>//            The file can be an executable file or a document file.
12661>>>>>>>//            The file can be a folder to open.
12661>>>>>>>//    "PRINT" The function prints the file specified by lpFile.
12661>>>>>>>//            The file should be a document file. If the file is an executable file,
12661>>>>>>>//            the function opens the file, as if "open" had been specified.
12661>>>>>>>//  "EXPLORE" The function explores the folder specified by lpFile.
12661>>>>>>>//
12661>>>>>>>// Return Values:
12661>>>>>>>//
12661>>>>>>>// If the function succeeds, the return value is the instance handle of the application that
12661>>>>>>>// was run, or the handle of a dynamic data exchange (DDE) server application.
12661>>>>>>>// If the function fails, the return value is an error value that is less than or equal to 32.
12661>>>>>>>//
12661>>>>>>>// The following table lists these error values:
12661>>>>>>>// Public Const ERROR_FILE_NOT_FOUND = 2&
12661>>>>>>>// Public Const ERROR_PATH_NOT_FOUND = 3&
12661>>>>>>>// Public Const ERROR_BAD_FORMAT = 11&
12661>>>>>>>// Public Const SE_ERR_ACCESSDENIED = 5
12661>>>>>>>// Public Const SE_ERR_ASSOCINCOMPLETE = 27
12661>>>>>>>// Public Const SE_ERR_DDEBUSY = 30
12661>>>>>>>// Public Const SE_ERR_DDEFAIL = 29
12661>>>>>>>// Public Const SE_ERR_DDETIMEOUT = 28
12661>>>>>>>// Public Const SE_ERR_DLLNOTFOUND = 32
12661>>>>>>>// Public Const SE_ERR_FNF = 2
12661>>>>>>>// Public Const SE_ERR_NOASSOC = 31
12661>>>>>>>// Public Const SE_ERR_OOM = 8
12661>>>>>>>// Public Const SE_ERR_PNF = 3
12661>>>>>>>// Public Const SE_ERR_SHARE = 26
12661>>>>>>>
12661>>>>>>>
12661>>>>>>>
12661>>>>>>>// Code to open the program that is associated with the selected file.
12661>>>>>>>//
12661>>>>>>>// External function call used in Procedure DoStartDocument
12661>>>>>>>External_function vWin32_ShellExecute "ShellExecuteW" shell32.dll ;  Handle  hWnd ;  WString wsOperation ;  WString wsFile ;  WString wsParameters ;  WString wsDirectory ;  Dword   iShowCmd Returns Handle
12662>>>>>>>
12662>>>>>>>
12662>>>>>>>
12662>>>>>>>
12662>>>>>>>Define vFO_MOVE                For |CI$0001
12662>>>>>>>Define vFO_COPY                For |CI$0002
12662>>>>>>>Define vFO_DELETE              For |CI$0003
12662>>>>>>>Define vFO_RENAME              For |CI$0004
12662>>>>>>>
12662>>>>>>>Define vFOF_MULTIDESTFILES     For |CI$0001
12662>>>>>>>Define vFOF_CONFIRMMOUSE       For |CI$0002
12662>>>>>>>Define vFOF_SILENT             For |CI$0004  // don't create progress/report
12662>>>>>>>Define vFOF_RENAMEONCOLLISION  For |CI$0008
12662>>>>>>>Define vFOF_NOCONFIRMATION     For |CI$0010  // Don't prompt the user.
12662>>>>>>>Define vFOF_WANTMAPPINGHANDLE  For |CI$0020  // Fill in SHFILEOPSTRUCT.hNameMappings
12662>>>>>>>                                          // Must be freed using SHFreeNameMappings
12662>>>>>>>Define vFOF_ALLOWUNDO          For |CI$0040
12662>>>>>>>Define vFOF_FILESONLY          For |CI$0080  // on *.*, do only files
12662>>>>>>>Define vFOF_SIMPLEPROGRESS     For |CI$0100  // means don't show names of files
12662>>>>>>>Define vFOF_NOCONFIRMMKDIR     For |CI$0200  // don't confirm making any needed dirs
12662>>>>>>>
12662>>>>>>>Struct tvShFileOpStruct
12662>>>>>>>  Handle   hWnd
12662>>>>>>>  UInteger wFunc
12662>>>>>>>  Pointer  pFrom
12662>>>>>>>  Pointer  pTo
12662>>>>>>>  Short    fFlags
12662>>>>>>>  Integer  fAnyOperationsAborted
12662>>>>>>>  Pointer  hNameMappings
12662>>>>>>>  Pointer  lpszProgressTitle      // only used if FOF_SIMPLEPROGRESS
12662>>>>>>>End_Struct // tvShFileOpStruct
12662>>>>>>>
12662>>>>>>>// hwnd
12662>>>>>>>//   Handle of the dialog box to use to display information about the status of the operation.
12662>>>>>>>
12662>>>>>>>// wFunc
12662>>>>>>>//   Operation to perform. This member can be one of the following values:
12662>>>>>>>//     FO_COPY     Copies the files specified by pFrom to the location specified by pTo.
12662>>>>>>>//     FO_DELETE   Deletes the files specified by pFrom (pTo is ignored).
12662>>>>>>>//     FO_MOVE     Moves the files specified by pFrom to the location specified by pTo.
12662>>>>>>>//     FO_RENAME   Renames the files specified by pFrom.
12662>>>>>>>
12662>>>>>>>// pFrom
12662>>>>>>>//   Pointer to a buffer that specifies one or more source file names. Multiple names must
12662>>>>>>>//   be null-separated. The list of names must be double null-terminated.
12662>>>>>>>
12662>>>>>>>// pTo
12662>>>>>>>//   Pointer to a buffer that contains the name of the destination file or directory. The
12662>>>>>>>//   buffer can contain mutiple destination file names if the fFlags member specifies
12662>>>>>>>//   FOF_MULTIDESTFILES. Multiple names must be null-separated. The list of names must be
12662>>>>>>>//   double null-terminated.
12662>>>>>>>
12662>>>>>>>// fAnyOperationsAborted
12662>>>>>>>//   Value that receives TRUE if the user aborted any file operations before they
12662>>>>>>>//   were completed or FALSE otherwise.
12662>>>>>>>
12662>>>>>>>
12662>>>>>>>// Performs a copy, move, rename, or delete operation on a file system object.
12662>>>>>>>// This can be a file or a folder.
12662>>>>>>>// With thanks to Andrew S Kaplan
12662>>>>>>>External_function vWin32_SHFileOperation "SHFileOperationW" Shell32.dll ;        Pointer lpFileOp Returns Integer
12663>>>>>>>
12663>>>>>>>
12663>>>>>>>// Thanks To Oliver Nelson for posting this code on the newsgroups
12663>>>>>>>External_function vWin32_GetWindowsDirectory "GetWindowsDirectoryW" kernel32.dll ;                           Pointer lpBuffer Integer nSize Returns Integer
12664>>>>>>>
12664>>>>>>>
12664>>>>>>>
12664>>>>>>>// Courtesy Of Vincent Oorsprong
12664>>>>>>>//External_Function vWin32_GetTempFileName "GetTempFileNameA" Kernel32.Dll ;
12664>>>>>>>//   Pointer lpPathName ;
12664>>>>>>>//   Pointer lpPrefixString ;
12664>>>>>>>//   Integer uUnique ;
12664>>>>>>>//   Pointer lpTempFileName ;
12664>>>>>>>//   Returns Integer
12664>>>>>>>// **WvA: 28-04-2005 Changed string parameter type into pointers
12664>>>>>>>External_function vWin32_GetTempFileName "GetTempFileNameW" kernel32.dll WString sPath ;        WString sPrefix Integer iUnique Pointer lpTempFileName Returns Integer
12665>>>>>>>
12665>>>>>>>External_function vWin32_GetTempPath "GetTempPathW" Kernel32.Dll ;   Dword nBufferLength ;   Pointer lpBuffer ;   Returns Integer
12666>>>>>>>
12666>>>>>>>External_function vWin32_DeleteFile "DeleteFileW" Kernel32.Dll ;   WString sFileName ;   Returns Integer
12667>>>>>>>
12667>>>>>>>// from:
12667>>>>>>>// http://msdn.microsoft.com/library/default.asp?url=/library/en-us/shellcc/platform/shell/reference/enums/csidl.asp
12667>>>>>>>//
12667>>>>>>>Define vCSIDL_FLAG_CREATE       For |CI$8000 // IE5+, use this to create a special folder
12667>>>>>>>Define vCSIDL_ADMIN_TOOLS       For |CI$0030 // IE5+, The file system directory that is used to store administrative tools for an individual user
12667>>>>>>>Define vCSIDL_ALT_STARTUP       For |CI$001D // The file system directory that corresponds to the user's nonlocalized Startup program group
12667>>>>>>>Define vCSIDL_APPDATA           For |CI$001A // Version 4.71. The file system directory that serves as a common repository for application-specific data. A typical path is C:\Documents and Settings\<username>\Application Data
12667>>>>>>>Define vCSIDL_BITBUCKET         For |CI$000A // The virtual folder containing the objects in the user's Recycle Bin
12667>>>>>>>Define vCSIDL_CDBURN_AREA       For |CI$003B // IE6+ The file system directory acting as a staging area for files waiting to be written to CD. A typical path is C:\Documents and Settings\<username>\Local Settings\Application Data\Microsoft\CD Burning
12667>>>>>>>Define vCSIDL_COMMON_ADMINTOOLS For |CI$002F // IE5+ The file system directory containing administrative tools for all users of the computer
12667>>>>>>>Define vCSIDL_COMMON_ALTSTARTUP For |CI$001E // The file system directory that corresponds to the nonlocalized Startup program group for all users
12667>>>>>>>Define vCSIDL_COMMON_APPDATA    For |CI$0023 // IE5+ The file system directory containing application data for all users. A typical path is C:\Documents and Settings\All Users\Application Data
12667>>>>>>>Define vCSIDL_COMMON_DESKTOPDIRECTORY for |CI$0019 // WinNT+ Only, The file system directory that contains files and folders that appear on the desktop for all users. A typical path is C:\Documents and Settings\All Users\Desktop
12667>>>>>>>Define vCSIDL_COMMON_DOCUMENTS  For |CI$002E // IE5+ The file system directory that contains documents that are common to all users. A typical paths is C:\Documents and Settings\All Users\Documents
12667>>>>>>>Define vCSIDL_COMMON_FAVORITES  For |CI$001F // The file system directory that serves as a common repository for favorite items common to all users
12667>>>>>>>Define vCSIDL_COMMON_MUSIC      For |CI$0035 // IE6+ The file system directory that serves as a repository for music files common to all users. A typical path is C:\Documents and Settings\All Users\Documents\My Music
12667>>>>>>>Define vCSIDL_COMMON_PICTURES   For |CI$0036 // The file system directory that serves as a repository for image files common to all users. A typical path is C:\Documents and Settings\All Users\Documents\My Pictures
12667>>>>>>>Define vCSIDL_COMMON_PROGRAMS   For |CI$0017 // WinNT+ The file system directory that contains the directories for the common program groups that appear on the Start menu for all users. A typical path is C:\Documents and Settings\All Users\Start Menu\Programs
12667>>>>>>>Define vCSIDL_COMMON_STARTMENU  For |CI$0016 // WinNT+ The file system directory that contains the programs and folders that appear on the Start menu for all users. A typical path is C:\Documents and Settings\All Users\Start Menu
12667>>>>>>>Define vCSIDL_COMMON_STARTUP    For |CI$0018 // WinNT+ The file system directory that contains the programs that appear in the Startup folder for all users. A typical path is C:\Documents and Settings\All Users\Start Menu\Programs\Startup
12667>>>>>>>Define vCSIDL_COMMON_TEMPLATES  For |CI$002D // WinNT+ The file system directory that contains the templates that are available to all users. A typical path is C:\Documents and Settings\All Users\Templates
12667>>>>>>>Define vCSIDL_COMMON_VIDEO      For |CI$0037 // IE6+ The file system directory that serves as a repository for video files common to all users. A typical path is C:\Documents and Settings\All Users\Documents\My Videos
12667>>>>>>>Define vCSIDL_COMPUTERSNEARME   For |CI$003D // The folder representing other machines in your workgroup
12667>>>>>>>Define vCSIDL_CONNECTIONS       For |CI$0031 // The virtual folder representing Network Connections, containing network and dial-up connections
12667>>>>>>>Define vCSIDL_CONTROLS          For |CI$0003 // The virtual folder containing icons for the Control Panel applications
12667>>>>>>>Define vCSIDL_COOKIES           For |CI$0021 // The file system directory that serves as a common repository for Internet cookies. A typical path is C:\Documents and Settings\username\Cookies
12667>>>>>>>Define vCSIDL_DESKTOP           For |CI$0000 // The virtual folder representing the Windows desktop, the root of the namespace
12667>>>>>>>Define vCSIDL_DESKTOPDIRECTORY  For |CI$0010 // The file system directory used to physically store file objects on the desktop (not to be confused with the desktop folder itself). A typical path is C:\Documents and Settings\username\Desktop
12667>>>>>>>Define vCSIDL_DRIVES            For |CI$0011 // The virtual folder representing My Computer, containing everything on the local computer: storage devices, printers, and Control Panel. The folder may also contain mapped network drives
12667>>>>>>>Define vCSIDL_FAVORITES         For |CI$0006 // The file system directory that serves as a common repository for the user's favorite items. A typical path is C:\Documents and Settings\username\Favorites
12667>>>>>>>Define vCSIDL_FONTS             For |CI$0014 // A virtual folder containing fonts. A typical path is C:\Windows\Fonts
12667>>>>>>>Define vCSIDL_HISTORY           For |CI$0022 // The file system directory that serves as a common repository for Internet history items
12667>>>>>>>Define vCSIDL_INTERNET          For |CI$0001 // A virtual folder representing the Internet
12667>>>>>>>Define vCSIDL_INTERNET_CACHE    For |CI$0020 // Comctl4.72+, The file system directory that serves as a common repository for temporary Internet files. A typical path is C:\Documents and Settings\username\Local Settings\Temporary Internet Files
12667>>>>>>>Define vCSIDL_LOCAL_APPDATA     For |CI$001C // IE5+ The file system directory that serves as a data repository for local (nonroaming) applications. A typical path is C:\Documents and Settings\username\Local Settings\Application Data
12667>>>>>>>Define vCSIDL_MYDOCUMENTS       For |CI$000C // IE6+ The virtual folder representing the My Documents desktop item
12667>>>>>>>Define vCSIDL_MYMUSIC           For |CI$000D // The file system directory that serves as a common repository for music files. A typical path is C:\Documents and Settings\User\My Documents\My Music
12667>>>>>>>Define vCSIDL_MYPICTURES        For |CI$0027 // IE5+ The file system directory that serves as a common repository for image files. A typical path is C:\Documents and Settings\username\My Documents\My Pictures
12667>>>>>>>Define vCSIDL_MYVIDEO           For |CI$000E // IE6+ The file system directory that serves as a common repository for video files. A typical path is C:\Documents and Settings\username\My Documents\My Videos
12667>>>>>>>Define vCSIDL_NETHOOD           For |CI$0013 // A file system directory containing the link objects that may exist in the My Network Places virtual folder. It is not the same as CSIDL_NETWORK, which represents the network namespace root. A typical path is C:\Documents and Settings\username\NetHood
12667>>>>>>>Define vCSIDL_NETWORK           For |CI$0012 // A virtual folder representing Network Neighborhood, the root of the network namespace hierarchy
12667>>>>>>>Define vCSIDL_PERSONAL          For |CI$0005 // (Documents folder) IE6 The virtual folder representing the My Documents desktop item.
12667>>>>>>>                                             // This is equivalent to CSIDL_MYDOCUMENTS. Previous to Version 6.0. The file system directory used to physically store a user's common repository of documents. A typical path is C:\Documents and Settings\username\My Documents
12667>>>>>>>Define vCSIDL_PHOTOALBUMS       For |CI$0045 // Vista+ The virtual folder used to store photo albums, typically username\My Pictures\Photo Albums
12667>>>>>>>Define vCSIDL_PLAYLISTS         For |CI$003F // Vista+ The virtual folder used to store play albums, typically username\My Music\Playlists
12667>>>>>>>Define vCSIDL_PRINTERS          For |CI$0004 // The virtual folder containing installed printers
12667>>>>>>>Define vCSIDL_PRINTHOOD         For |CI$001B // The file system directory that contains the link objects that can exist in the Printers virtual folder. A typical path is C:\Documents and Settings\username\PrintHood
12667>>>>>>>Define vCSIDL_PROFILE           For |CI$0028 // IE5+ The user's profile folder. A typical path is C:\Documents and Settings\username
12667>>>>>>>Define vCSIDL_PROGRAM_FILES     For |CI$0026 // IE5+ The Program Files folder. A typical path is C:\Program Files
12667>>>>>>>Define vCSIDL_PROGRAM_FILESx86  for |CI$002A // The Program Files folder for x86 programs. A typical path is C:\Program Files (x86)
12667>>>>>>>Define vCSIDL_PROGRAM_FILES_COMMON For |CI$002B // IE5+, WinNT+ A folder for components that are shared across applications. A typical path is C:\Program Files\Common
12667>>>>>>>Define vCSIDL_PROGRAMS          For |CI$0002 // The file system directory that contains the user's program groups (which are themselves file system directories). A typical path is C:\Documents and Settings\username\Start Menu\Programs
12667>>>>>>>Define vCSIDL_RECENT            For |CI$0008 // The file system directory that contains shortcuts to the user's most recently used documents. A typical path is C:\Documents and Settings\username\My Recent Documents
12667>>>>>>>Define vCSIDL_RESOURCES         For |CI$0038 // undocumented
12667>>>>>>>Define vCSIDL_SAMPLE_MUSIC      For |CI$0040 // Vista+, The file system directory that contains sample music. A typical path is C:\Documents and Settings\username\My Documents\My Music\Sample Music
12667>>>>>>>Define vCSIDL_SAMPLE_PLAYLISTS  For |CI$0041 // Vista+, The file system directory that contains sample playlists. A typical path is C:\Documents and Settings\username\My Documents\My Music\Sample Playlists
12667>>>>>>>Define vCSIDL_SAMPLE_PICTURES   For |CI$0042 // Vista+, The file system directory that contains sample pictures. A typical path is C:\Documents and Settings\username\My Documents\My Pictures\Sample Pictures
12667>>>>>>>Define vCSIDL_SAMPLE_VIDEOS     For |CI$0043 // Vista+, The file system directory that contains sample videos. A typical path is C:\Documents and Settings\username\My Documents\My Videos\Sample Videos
12667>>>>>>>Define vCSIDL_SENDTO            For |CI$0009 // The file system directory that contains Send To menu items. A typical path is C:\Documents and Settings\username\SendTo
12667>>>>>>>Define vCSIDL_STARTMENU         For |CI$000B // The file system directory containing Start menu items. A typical path is C:\Documents and Settings\username\Start Menu
12667>>>>>>>Define vCSIDL_STARTUP           For |CI$0007 // The file system directory that corresponds to the user's Startup program group. The system starts these programs whenever any user logs onto Windows NT or starts Windows 95. A typical path is C:\Documents and Settings\username\Start Menu\Programs\Startup
12667>>>>>>>Define vCSIDL_SYSTEM            For |CI$0025 // The Windows System folder. A typical path is C:\Windows\System32
12667>>>>>>>Define vCSIDL_SYSTEMX86         For |CI$0029 //
12667>>>>>>>Define vCSIDL_TEMPLATES         For |CI$0015 // The file system directory that serves as a common repository for document templates. A typical path is C:\Documents and Settings\username\Templates
12667>>>>>>>Define vCSIDL_WINDOWS           For |CI$0024 // The Windows directory or SYSROOT. This corresponds to the %windir% or %SYSTEMROOT% environment variables. A typical path is C:\Windows
12667>>>>>>>
12667>>>>>>>
12667>>>>>>>//HRESULT SHGetFolderPath(
12667>>>>>>>//    HWND hwndOwner,
12667>>>>>>>//    int nFolder,
12667>>>>>>>//    HANDLE hToken,
12667>>>>>>>//    DWORD dwFlags,
12667>>>>>>>//    LPTSTR pszPath
12667>>>>>>>//);
12667>>>>>>>// This function is a superset of SHGetSpecialFolderPath, included with earlier versions of
12667>>>>>>>// the shell. It is implemented in a redistributable DLL, SHFolder.dll, that also simulates
12667>>>>>>>// many of the new shell folders on older platforms such as Windows 95, Windows 98, and
12667>>>>>>>// Windows NT 4.0. This DLL always calls the current platform's version of this function.
12667>>>>>>>// If that fails, it will try to simulate the appropriate behavior.
12667>>>>>>>//
12667>>>>>>>External_function vWin32_SHGetFolderPath "SHGetFolderPathW" SHFolder.Dll ;   Pointer hWnd ;   Integer nFolder ;   Pointer hToken ;   DWord   dwFlags ;   Pointer lpszPath ;   Returns Integer
12668>>>>>>>
12668>>>>>>>
12668>>>>>>>
12668>>>>>>>Struct tvWin32FindData
12668>>>>>>> Dword            dwFileAttributes
12668>>>>>>> Dword            ftCreationLowDateTime
12668>>>>>>> Dword            ftCreationHighDateTime
12668>>>>>>> dword            ftLastAccessLowDateTime
12668>>>>>>> Dword            ftLastAccessHighDateTime
12668>>>>>>> Dword            ftLastWriteLowDateTime
12668>>>>>>> Dword            ftLastWriteHighDateTime
12668>>>>>>> Dword            nFileSizeHigh
12668>>>>>>> Dword            nFileSizeLow
12668>>>>>>> Dword            dwReserved0
12668>>>>>>> Dword            dwReserved1
12668>>>>>>> Short[vMax_Path] cFileName
12668>>>>>>> Short[14]        cAlternateFileName
12668>>>>>>>End_Struct
12668>>>>>>>
12668>>>>>>>// Courtesy Of Vincent Oorsprong
12668>>>>>>>// lpFileName      : address of name of file to search for
12668>>>>>>>// lpFindFileData  : address of returned information
12668>>>>>>>External_function vWin32_FindFirstFile "FindFirstFileW"  Kernel32.dll WString sFileName ;          Pointer lpFindFileData Returns Handle
12669>>>>>>>
12669>>>>>>>// Courtesy Of Vincent Oorsprong
12669>>>>>>>// hFindFile       : handle of search
12669>>>>>>>// lpFindFileData  : address of structure for data on found file
12669>>>>>>>External_function vWin32_FindNextFile "FindNextFileW" Kernel32.dll Handle hFindFile ;          Pointer lpFindFileData Returns Integer
12670>>>>>>>
12670>>>>>>>
12670>>>>>>>// Courtesy Of Vincent Oorsprong
12670>>>>>>>//  hFindFile      : file search handle
12670>>>>>>>External_function vWin32_FindClose "FindClose" Kernel32.dll Handle hFindFile Returns Integer
12671>>>>>>>
12671>>>>>>>
12671>>>>>>>
12671>>>>>>>Struct tvFileTime
12671>>>>>>>  DWord dwLowDateTime
12671>>>>>>>  DWord dwHighDateTime
12671>>>>>>>End_Struct
12671>>>>>>>
12671>>>>>>>
12671>>>>>>>Struct tvSystemTime
12671>>>>>>>  UShort wYear
12671>>>>>>>  UShort wMonth
12671>>>>>>>  UShort wDayOfWeek
12671>>>>>>>  UShort wDay
12671>>>>>>>  UShort wHour
12671>>>>>>>  UShort wMinute
12671>>>>>>>  UShort wSecond
12671>>>>>>>  UShort wMilliSeconds
12671>>>>>>>End_Struct
12671>>>>>>>
12671>>>>>>>
12671>>>>>>>// Courtesy Of Vincent Oorsprong
12671>>>>>>>//  lpFileTime     : pointer to file time to convert
12671>>>>>>>//  lpSystemTime   : pointer to structure to receive system time
12671>>>>>>>External_function vWin32_FileTimeToSystemTime "FileTimeToSystemTime" Kernel32.Dll ;          Pointer lpFileTime Pointer lpsystemTime Returns Integer
12672>>>>>>>
12672>>>>>>>// Courtesy Of Vincent Oorsprong
12672>>>>>>>// This function formats the time in a picture-string passed
12672>>>>>>>//
12672>>>>>>>// Picture      Meaning
12672>>>>>>>//    h         Hours with no leading zero for single-digit hours; 12-hour clock
12672>>>>>>>//    hh        Hours with leading zero for single-digit hours; 12-hour clock
12672>>>>>>>//    H         Hours with no leading zero for single-digit hours; 24-hour clock
12672>>>>>>>//    HH        Hours with leading zero for single-digit hours; 24-hour clock
12672>>>>>>>//    m         Minutes with no leading zero for single-digit minutes
12672>>>>>>>//    mm        Minutes with leading zero for single-digit minutes
12672>>>>>>>//    s         Seconds with no leading zero for single-digit seconds
12672>>>>>>>//    ss        Seconds with leading zero for single-digit seconds
12672>>>>>>>//    t         One character time marker string, such as A or P
12672>>>>>>>//    tt        Multicharacter time marker string, such as AM or PM
12672>>>>>>>//
12672>>>>>>>// For example, to get the time string  "11:29:40 PM"
12672>>>>>>>//    use the following picture string: "hh" : "mm" : "ss tt"
12672>>>>>>>
12672>>>>>>>External_function vWin32_GetTimeFormat "GetTimeFormatW" Kernel32.Dll ;  Dword LCID Dword dwFlags Pointer lpsSystemTime Pointer lpFormat Pointer lpTimeStr ;  Integer cchTime Returns Integer
12673>>>>>>>
12673>>>>>>>
12673>>>>>>>// Courtesy Of Vincent Oorsprong
12673>>>>>>>// This function formats the date in a picture-string passed
12673>>>>>>>//
12673>>>>>>>// Picture      Meaning
12673>>>>>>>//    d         Day of month as digits with no leading zero for single-digit days.
12673>>>>>>>//    dd        Day of month as digits with leading zero for single-digit days.
12673>>>>>>>//    ddd       Day of week as a three-letter abbreviation. The function uses the
12673>>>>>>>//              LOCALE_SABBREVOAYMAME value associated with the specified locale.
12673>>>>>>>//    dddd      Day of week as its full name. The function uses the LOCALE_SDAYNAME
12673>>>>>>>//              value associated with the specified locale.
12673>>>>>>>//    M         Month as digits with no leading zero for single-digit months.
12673>>>>>>>//    MM        Month as digits with leading zero for single-digit months.
12673>>>>>>>//    MMM       Month as a three-letter abbreviation. The function uses the
12673>>>>>>>//              LOCALE_SABBREVMONTHNAME value associated with the specified locale.
12673>>>>>>>//    MMMM      Month as its full name. The function uses the LOCALE_SMONTHNAME value
12673>>>>>>>//              associated with the specified locale.
12673>>>>>>>//    y         Year as last two digits, but with no leading zero for years less than 10.
12673>>>>>>>//    yy        Year as last two digits, but with leading zero for years less than 10.
12673>>>>>>>//    yyyy      Year represented hy full four digits.
12673>>>>>>>//    gg        Period/era string. The function uses the CAL_SERASTRING value associated
12673>>>>>>>//              with the specified locale. This element is ignored if the date to be formatted
12673>>>>>>>//              does not have an associated era or period string.
12673>>>>>>>// For example, to get the date string  "Wed, Aug 31 94"
12673>>>>>>>// use the following picture string:    "ddd","MMM dd yy"
12673>>>>>>>
12673>>>>>>>External_function vWin32_GetDateFormat "GetDateFormatW" Kernel32.Dll ;  Dword LCID Dword dwFlags Pointer lpsSystemTime Pointer lpFormat Pointer lpDateStr ;  Integer cchDate Returns Integer
12674>>>>>>>
12674>>>>>>>Define LOCALE_NOUSEROVERRIDE    For |CI$80000000  //  do not use user overrides
12674>>>>>>>Define TIME_NOMIHUTESORSECONDS  For |CI$00000001  //  do not use minutes or seconds
12674>>>>>>>Define TIME_NOSECONDS           For |CI$00000002  //  do not use seconds
12674>>>>>>>Define TIME_NOTIMEMARKER        For |CI$00000004  //  do not use time marker
12674>>>>>>>Define TIME_FORCE24HOURFORMAT   For |CI$00000008  //  always use 24 hour format
12674>>>>>>>
12674>>>>>>>//  Date Flags for GetDateFormatW.
12674>>>>>>>//
12674>>>>>>>Define DATE_SHORTDATE           For |CI$00000001  //  use short date picture
12674>>>>>>>Define DATE_LONGDATE            For |CI$00000002  //  use long date picture
12674>>>>>>>Define DATE_USE_ALT_CALENDAR    For |CI$00000004  //  use alternate calendar (if any)
12674>>>>>>>
12674>>>>>>>
12674>>>>>>>External_function vWin32_SetLastError "SetLastError" Kernel32.Dll Dword dwLastError Returns Integer
12675>>>>>>>
12675>>>>>>>
12675>>>>>>>// **WvA: 20-02-2004
12675>>>>>>>// While i was testing the format capabilities i stumbled over a very
12675>>>>>>>// weird problem where it looks like that the integer value gets somehow translated
12675>>>>>>>// incorrectly into an unsigned integer.
12675>>>>>>>// I don't have the time to dive into this.. so added a workaround (and removed it again)
12675>>>>>>>// It does smell a bit fishy though
12675>>>>>>>// Tested it with the same results on both VDF7 and VDF9.1
12675>>>>>>>
12675>>>>>>>Define SHFMT_ID_DEFAULT        For |CI$0000FFFF // The default format ID
12675>>>>>>>Define SHFMT_OPT_DEFAULT       For |CI$00000000 // The default "Quick Format" option.
12675>>>>>>>Define SHFMT_OPT_FULL          For |CI$00000001 // Deselects the "Quick Format" option, providing a full format instead. This is useful when an unformatted disk is detected.
12675>>>>>>>Define SHFMT_OPT_SYSONLY       For |CI$00000002 // Selects the "Create an MS-DOS startup disk" option, creating a system boot disk.
12675>>>>>>>
12675>>>>>>>// Possible errors that can be returned by the shellformat function
12675>>>>>>>Define SHFMT_ERROR             For (|CI$FFFFFFFF+1) // An error occurred during the last format or no drive parameter passed. This does not indicate that the disk is unformatable.
12675>>>>>>>Define SHFMT_CANCEL            For (|CI$FFFFFFFE+1) // The last format was canceled.
12675>>>>>>>Define SHFMT_NOFORMAT          For (|CI$FFFFFFFD+1) // The drive cannot be formatted.
12675>>>>>>>
12675>>>>>>>
12675>>>>>>> // Courtesy Of Steve Walter,
12675>>>>>>> // USA Software, Inc
12675>>>>>>> // Format a disk
12675>>>>>>> // Called By:  Move (vWin32_ShFormatDrive(hWnd,0,$FFFF,1)) To dwReturn
12675>>>>>>>External_function vWin32_ShFormatDrive "SHFormatDrive" shell32.dll Handle hWnd ;         Integer iDrive Integer iFormatID Integer iOptions Returns DWORD
12676>>>>>>>
12676>>>>>>>// Michael Mullan.  I Wanted to create all the folders in one statement...
12676>>>>>>>
12676>>>>>>>// SHCreateDirectoryEx
12676>>>>>>>
12676>>>>>>>//    Note  This function is available through Microsoft Windows XP Service Pack 2 (SP2) and Windows Server 2003.
12676>>>>>>>//    It might be altered or unavailable in subsequent versions of Windows.
12676>>>>>>>//
12676>>>>>>>//    This function creates a file system folder whose fully qualified path is given by pszPath. If one or more
12676>>>>>>>//    of the intermediate folders do not exist, they are created as well. SHCreateDirectoryEx also verifies that
12676>>>>>>>//    the files are visible. If they are not visible, expect one of the following:
12676>>>>>>>//
12676>>>>>>>//        * If hwnd is set to a valid window handle, a message box is displayed warning the user that he or she
12676>>>>>>>//        might not be able to access the files. If the user chooses not to proceed, the function returns
12676>>>>>>>//        ERROR_CANCELLED.
12676>>>>>>>//        * If hwnd is set to NULL, no user interface is displayed and the function returns ERROR_CANCELLED.
12676>>>>>>>
12676>>>>>>>//        Returns ERROR_SUCCESS if successful. If the operation fails, other error codes can be returned,
12676>>>>>>>//        including those listed here. For values not specifically listed, see System Error Codes.
12676>>>>>>>//      161  ERROR_BAD_PATHNAME                The pszPath parameter was set to a relative path.
12676>>>>>>>//      206  ERROR_FILENAME_EXCED_RANGE     The path pointed to by pszPath is too long.
12676>>>>>>>//      3    ERROR_PATH_NOT_FOUND            The system cannot find the path pointed to by pszPath. The path may contain an invalid entry.
12676>>>>>>>//      80   ERROR_FILE_EXISTS                The directory exists.
12676>>>>>>>//      183  ERROR_ALREADY_EXISTS            The directory exists.
12676>>>>>>>//      1223 ERROR_CANCELLED                The user canceled the operation.
12676>>>>>>>
12676>>>>>>>//        int SHCreateDirectoryEx(
12676>>>>>>>//            HWND hwnd,
12676>>>>>>>//            LPCTSTR pszPath,
12676>>>>>>>//            const SECURITY_ATTRIBUTES *psa
12676>>>>>>>//        );
12676>>>>>>>
12676>>>>>>>External_function vWin32_SHCreateDirectoryEx "SHCreateDirectoryExW" shell32.dll Handle hWnd;                  WString wPath  Pointer lpSecurity_Attributes Returns Integer
12677>>>>>>>
12677>>>>>>> External_Function vWin32_PathIsDirectory "PathIsDirectoryW" SHLWAPI.DLL WString wPath Returns Integer
12678>>>>>
12678>>>>>
12678>>>>>
12678>>>>>// Does the directory exist? - No = false, Yes = True
12678>>>>>// This also works with UNC path encoding and wildcards
12678>>>>>Function vFolderExists Global String sFolderName Returns Boolean
12680>>>>>    Boolean bFolderExists
12680>>>>>    Boolean bStop
12680>>>>>    String  sFolder sTmp
12680>>>>>    Integer iCh
12680>>>>>
12680>>>>>    If (sFolderName = "") Begin
12682>>>>>        Function_Return False
12683>>>>>    End
12683>>>>>>
12683>>>>>
12683>>>>>    Move True  to bFolderExists
12684>>>>>    Move False to bStop
12685>>>>>    Move "dir:" to sFolder
12686>>>>>    Append sFolder sFolderName
12687>>>>>    Get Seq_New_Channel to iCh  // get free channel for input
12688>>>>>    If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
12690>>>>>        Error DFERR_PROGRAM "No I/O channel available for process (vFolderExists)"
12691>>>>>>
12691>>>>>        Function_Return False
12692>>>>>    End
12692>>>>>>
12692>>>>>    Direct_Input channel iCh sFolder
12694>>>>>    Repeat
12694>>>>>>
12694>>>>>        Readln channel iCh sTmp
12696>>>>>        Move (SeqEof) to bStop
12697>>>>>        If (Trim(sTmp)="") Begin
12699>>>>>            Move False to bFolderExists
12700>>>>>        End
12700>>>>>>
12700>>>>>        Else Begin
12701>>>>>            Move True to bFolderExists
12702>>>>>            Move True to bStop
12703>>>>>        End
12703>>>>>>
12703>>>>>    Until (bStop)
12705>>>>>    Close_Input channel iCh
12707>>>>>    Send Seq_Release_Channel iCh
12708>>>>>    Function_Return bFolderExists
12709>>>>>End_Function
12710>>>>>
12710>>>>>// returns folder name if a folder was selected, otherwise returns ""
12710>>>>>Function vSHBrowseForFolder Global String sDialogTitle Returns String
12712>>>>>    String  sPath
12712>>>>>    WString sFolder sTitle
12712>>>>>    Pointer lpItemIdList
12712>>>>>    Integer iFolderSelected iRetval
12712>>>>>    tvBrowseInfo BrowseInfo
12712>>>>>    tvBrowseInfo BrowseInfo
12712>>>>>
12712>>>>>    Move "" to sPath
12713>>>>>    If (sDialogTitle<>"") Begin
12715>>>>>        Move sDialogTitle to sTitle
12716>>>>>        // Torben Lund suggested converting the string with toansi. Doing it like that
12716>>>>>        // disables showing some commonly used ascii characters like ascii 137 (ë)
12716>>>>>        // These chars are correctly shown if no toansi is used.
12716>>>>>        // I can imagine that he wanted to path to be ANSI, but as long as it isa just
12716>>>>>        // selected it will always be valid.
12716>>>>>        Move (AddressOf(sTitle)) to BrowseInfo.lpszTitle
12717>>>>>    End
12717>>>>>>
12717>>>>>
12717>>>>>    Move vBIF_RETURNONLYFSDIRS to BrowseInfo.ulFlags
12718>>>>>
12718>>>>>    // Torben Lund added line below. Move handle of focus object to structure before
12718>>>>>    // calling function. Otherwise, the folderdialog will be started as a seperate task.
12718>>>>>    Move (window_handle(focus(desktop))) to BrowseInfo.hWndOwner
12719>>>>>
12719>>>>>    // null 128 chars into var (make space)
12719>>>>>    Move (Repeat(Character(0), vMAX_PATH)) to sFolder
12720>>>>>
12720>>>>>    // select folder
12720>>>>>    Move (vWin32_SHBrowseForFolder(AddressOf(BrowseInfo))) to lpItemIdList
12721>>>>>    // get selected folder name
12721>>>>>    Move (vWin32_SHGetPathFromIDList(lpItemIdList, AddressOf(sFolder))) to iFolderSelected
12722>>>>>
12722>>>>>    // release memory resources that are used by the ItemIdList
12722>>>>>    Move (vWin32_CoTaskMemFree(lpItemIdList)) to iRetval
12723>>>>>
12723>>>>>    If (iFolderSelected<>0) Begin
12725>>>>>        Move (CString(sFolder)) to sPath
12726>>>>>    End
12726>>>>>>
12726>>>>>    Function_Return  sPath
12727>>>>>End_Function
12728>>>>>
12728>>>>>// returns 0 if the folder is created.
12728>>>>>//         1 if the API-call returned an error.
12728>>>>>Function vCreateDirectory Global String sNewFolder Returns Integer
12730>>>>>    Integer  iRetval bFolderCreated
12730>>>>>    WString  sFolder
12730>>>>>    tvSecurity_attributes SA
12730>>>>>    tvSecurity_attributes SA
12730>>>>>
12730>>>>>    Move False to bFolderCreated
12731>>>>>    If (sNewFolder <> "") Begin
12733>>>>>        Move (SizeOfType(tvSecurity_attributes)) to SA.nLength
12734>>>>>        Move  0                                  to SA.lpDescriptor
12735>>>>>        Move  1                                  to SA.bInheritHandle
12736>>>>>        Move (sNewFolder+Character(0)) to sFolder
12737>>>>>        Move (vWin32_CreateDirectory(sFolder, AddressOf(SA))) to bFolderCreated
12738>>>>>    End
12738>>>>>>
12738>>>>>
12738>>>>>    If (bFolderCreated=false) Begin
12740>>>>>        Move 1 to iRetVal
12741>>>>>    End
12741>>>>>>
12741>>>>>    Function_Return iRetVal
12742>>>>>End_Function
12743>>>>>
12743>>>>>// **WvA: 03-02-2002 Function created.
12743>>>>>// With this function one can remove a directory.
12743>>>>>// returns 0 if the folder is removed.
12743>>>>>//         1 if the API-call returned an error (Use GetLastError API to get the details)
12743>>>>>//         2 if the folder did not exist
12743>>>>>//         3 if the sFolder parameter passed is equal to ""
12743>>>>>Function vRemoveDirectory Global String sFolder Returns Integer
12745>>>>>    Boolean bRemoved
12745>>>>>    WString sPath
12745>>>>>    Integer iRetval
12745>>>>>
12745>>>>>    Move 0     to iRetVal
12746>>>>>    Move False to bRemoved
12747>>>>>    Move (Trim(sFolder)) to sFolder
12748>>>>>    If (sFolder="") Begin
12750>>>>>        Move 3 to iRetVal
12751>>>>>    End
12751>>>>>>
12751>>>>>    If (vFolderExists(sFolder)=False) Begin
12753>>>>>        Move 2 to iRetVal
12754>>>>>    End
12754>>>>>>
12754>>>>>    If (iRetVal=0) Begin
12756>>>>>        // null MAX_PATH chars into var (make space)
12756>>>>>        Move (Repeat(Character(0), vMAX_PATH)) to sPath
12757>>>>>        //
12757>>>>>        Move (Insert(sFolder,sPath,1)) to sPath
12758>>>>>        Move (vWin32_RemoveDirectory(sPath)) to bRemoved
12759>>>>>    End
12759>>>>>>
12759>>>>>
12759>>>>>    If (iRetVal=0 And bRemoved=False) Begin
12761>>>>>        Move 1 to iRetVal
12762>>>>>    End
12762>>>>>>
12762>>>>>    Function_Return iRetVal
12763>>>>>End_Function
12764>>>>>
12764>>>>>// This will perform an operation on a file (e.g. open) with the application
12764>>>>>// registered in the Windows Registry to open that type of file (via its extension)
12764>>>>>// sOperation would be "OPEN" (it could also be "PRINT" etc).
12764>>>>>Procedure vShellExecute Global String sOperation String sDocument String sParameters String sPath
12766>>>>>    Handle  hInstance hWnd
12766>>>>>    // remove any leading/trailing spaces in the string
12766>>>>>    Move (Trim(sDocument)) to sDocument
12767>>>>>    Move (Trim(sPath))     to sPath
12768>>>>>    // Make the strings readable for windows API, by converting them to null-terminated
12768>>>>>    Append sOperation   (Character(0))
12769>>>>>    Append sDocument    (Character(0))
12770>>>>>    Append sParameters  (Character(0))
12771>>>>>    Append sPath        (Character(0))
12772>>>>>
12772>>>>>    Get Window_Handle to hWnd
12773>>>>>    Move (vWin32_ShellExecute (hWnd, sOperation, sDocument, sParameters, sPath, 1)) to hInstance
12774>>>>>    If (hInstance <= 32) Begin
12776>>>>>        Send vDDE_Error_Handler hInstance
12777>>>>>    End
12777>>>>>>
12777>>>>>End_Procedure
12778>>>>>
12778>>>>>Class cShellFileOperations is a Array
12779>>>>>
12779>>>>>    Procedure Construct_Object
12781>>>>>        Forward Send Construct_Object
12783>>>>>        Property Integer piDeleteFlags        0
12784>>>>>        Property Integer piCopyFlags          0
12785>>>>>        Property Integer piMoveFlags          0
12786>>>>>        Property Integer piRenameFlags        0
12787>>>>>
12787>>>>>        Set piDeleteFlags to (vFOF_SILENT Ior vFOF_NOCONFIRMATION)
12788>>>>>        Set piCopyFlags   to (vFOF_SILENT iOr vFOF_NOCONFIRMMKDIR Ior vFOF_NOCONFIRMATION)
12789>>>>>        Set piMoveFlags   to (vFOF_SILENT iOr vFOF_NOCONFIRMMKDIR iOr vFOF_NOCONFIRMATION)
12790>>>>>        Set piRenameFlags to (vFOF_SILENT Ior vFOF_NOCONFIRMATION)
12791>>>>>    End_Procedure
12792>>>>>
12792>>>>>    // This function uses the shell API to perform a file operation on the
12792>>>>>    // files supplied.
12792>>>>>    //
12792>>>>>    Function FileOperation String sSource String sDestination Integer eOperation Integer iFlags Returns Integer
12794>>>>>        Integer  iRetVal
12794>>>>>        Integer  iUserAbort
12794>>>>>        WString  wsSource wsDestination
12794>>>>>        tvShFileOpStruct FOS
12794>>>>>        tvShFileOpStruct FOS
12794>>>>>
12794>>>>>        Move (sSource+Character(0)+Character(0))      to wsSource
12795>>>>>        Move (sDestination+Character(0)+Character(0)) to wsDestination
12796>>>>>
12796>>>>>        If (eOperation <> vFO_DELETE) Begin
12798>>>>>            Move (AddressOf(wsDestination)) to FOS.pTo
12799>>>>>        End
12799>>>>>>
12799>>>>>
12799>>>>>        Move eOperation            to FOS.wFunc
12800>>>>>        Move (AddressOf(wsSource)) to FOS.pFrom
12801>>>>>        Move iFlags                to FOS.fFlags
12802>>>>>
12802>>>>>        Move (vWin32_SHFileOperation(AddressOf(FOS))) to iRetVal
12803>>>>>        Move FOS.fAnyOperationsAborted to iUserAbort
12804>>>>>        If (iUserAbort <> 0) Begin
12806>>>>>            Move 80 to iRetVal  // file Operation Aborted by USER
12807>>>>>        End
12807>>>>>>
12807>>>>>        Function_Return (iRetVal)
12808>>>>>    End_Function
12809>>>>>
12809>>>>>    Function sfoDeleteFile String sFileName Returns Integer
12811>>>>>        Integer  iRetVal
12811>>>>>        Integer  iFlags
12811>>>>>
12811>>>>>        Get piDeleteFlags to iFlags
12812>>>>>        Get FileOperation sFileName "" vFO_DELETE iFlags to iRetVal
12813>>>>>        Function_Return iRetVal
12814>>>>>    End_Function
12815>>>>>
12815>>>>>    Function sfoCopyFile String sSource String sDestination Returns Integer
12817>>>>>        Integer  iRetVal
12817>>>>>        Integer  iFlags
12817>>>>>
12817>>>>>        Get piCopyFlags to iFlags
12818>>>>>        Get FileOperation sSource sDestination vFO_COPY iFlags to iRetVal
12819>>>>>        Function_Return iRetVal
12820>>>>>    End_Function
12821>>>>>
12821>>>>>    Function sfoMoveFile String sSource String sDestination Returns Integer
12823>>>>>        Integer  iRetVal
12823>>>>>        Integer  iFlags
12823>>>>>
12823>>>>>        Get piMoveFlags to iFlags
12824>>>>>        Get FileOperation sSource sDestination vFO_MOVE iFlags to iRetVal
12825>>>>>        Function_Return iRetVal
12826>>>>>    End_Function
12827>>>>>
12827>>>>>    // Rename a file or folder
12827>>>>>    // Returns a nonzero value if the operation failed.
12827>>>>>    Function sfoRenameFile String sSource String sDestination Returns Integer
12829>>>>>        Integer  iRetVal
12829>>>>>        Integer  iFlags
12829>>>>>
12829>>>>>        Get piRenameFlags to iFlags
12830>>>>>        Get FileOperation sSource sDestination vFO_RENAME iFlags to iRetVal
12831>>>>>        Function_Return iRetVal
12832>>>>>    End_Function
12833>>>>>
12833>>>>>
12833>>>>>    //Example:
12833>>>>>    // Get sfoFormatDisk 'A' 0 To dReturnVal    // Formats drive A in QuickFormat
12833>>>>>    //                                          mode.
12833>>>>>
12833>>>>>End_Class
12834>>>>>
12834>>>>>Object oShellFileOperations is a cShellFileOperations
12836>>>>>End_Object
12837>>>>>
12837>>>>>// Restore to the old way of working with the shell file operations.
12837>>>>>// or.. to put lay man terms, allow any of the operations vDeleteFile
12837>>>>>// vCopyFile/vMoveFile/vRenameFile to have an UNDO
12837>>>>>Procedure vWin32fhCompatibilityMode
12839>>>>>    Integer hoSFO
12839>>>>>    Integer iFlags
12839>>>>>
12839>>>>>    Move (vFOF_SILENT Ior vFOF_NOCONFIRMATION Ior vFOF_ALLOWUNDO) to iFlags
12840>>>>>    Move (oShellFileOperations(Self)) to hoSFO
12841>>>>>
12841>>>>>    Set piDeleteFlags of hoSFO to iFlags
12842>>>>>    Set piCopyFlags   of hoSFO to iFlags
12843>>>>>    Set piMoveFlags   of hoSFO to iFlags
12844>>>>>    Set piRenameFlags of hoSFO to iFlags
12845>>>>>End_Procedure
12846>>>>>
12846>>>>>// Delete a file or folder
12846>>>>>// Returns a nonzero value if the operation failed.
12846>>>>>Function vDeleteFile Global String sFileName Returns Integer
12848>>>>>    Integer  iRetVal
12848>>>>>
12848>>>>>    Get sfoDeleteFile of (oShellFileOperations(Self)) sFileName to iRetVal
12849>>>>>    Function_Return iRetVal
12850>>>>>End_Function
12851>>>>>
12851>>>>>// Copy a file or folder
12851>>>>>// Returns a nonzero value if the operation failed.
12851>>>>>Function vCopyFile Global String sSource String sDestination Returns Integer
12853>>>>>    Integer  iRetVal
12853>>>>>
12853>>>>>    Get sfoCopyFile of (oShellFileOperations(Self)) sSource sDestination to iRetVal
12854>>>>>    Function_Return iRetVal
12855>>>>>End_Function
12856>>>>>
12856>>>>>// Move a file or folder
12856>>>>>// Returns a nonzero value if the operation failed.
12856>>>>>Function vMoveFile Global String sSource String sDestination Returns Integer
12858>>>>>    Integer  iRetVal
12858>>>>>
12858>>>>>    Get sfoMoveFile of (oShellFileOperations(Self)) sSource sDestination to iRetVal
12859>>>>>    Function_Return iRetVal
12860>>>>>End_Function
12861>>>>>
12861>>>>>// Rename a file or folder
12861>>>>>// Returns a nonzero value if the operation failed.
12861>>>>>Function vRenameFile Global String sSource String sDestination Returns Integer
12863>>>>>    Integer  iRetVal
12863>>>>>
12863>>>>>    Get sfoRenameFile of (oShellFileOperations(Self)) sSource sDestination to iRetVal
12864>>>>>    Function_Return iRetVal
12865>>>>>End_Function
12866>>>>>
12866>>>>>Function vGetWindowsDirectory Returns String
12868>>>>>    WString wDirectory
12868>>>>>    Integer iRetVal
12868>>>>>
12868>>>>>    Move (ZeroString(vMAX_PATH)) to wDirectory
12869>>>>>    Move (vWin32_GetWindowsDirectory(AddressOf(wDirectory), vMAX_PATH)) to iRetVal
12870>>>>>    If (iRetVal > vMAX_PATH) Begin
12872>>>>>        Move (ZeroString(iRetval)) to wDirectory
12873>>>>>        Move (vWin32_GetWindowsDirectory(AddressOf(wDirectory), iRetVal)) to iRetVal
12874>>>>>    End
12874>>>>>>
12874>>>>>    Function_Return (CString(wDirectory))
12875>>>>>End_Function
12876>>>>>
12876>>>>>Function vGetTempPath Returns String
12878>>>>>    Integer iRetVal
12878>>>>>    WString wTempPath
12878>>>>>
12878>>>>>    Move (ZeroString(vMAX_PATH)) to wTempPath
12879>>>>>    Move (vWin32_GetTempPath(vMAX_PATH, AddressOf(wTempPath))) to iRetVal
12880>>>>>    If (iRetVal > vMAX_PATH) Begin
12882>>>>>        Move (ZeroString(iRetval)) to wTempPath
12883>>>>>        Move (vWin32_GetTempPath(iRetVal, AddressOf(wTempPath))) to iRetVal
12884>>>>>    End
12884>>>>>>
12884>>>>>    Function_Return (CString(wTempPath))
12885>>>>>End_Function
12886>>>>>
12886>>>>>// Courtesy of Marco Kuipers
12886>>>>>Function vMakeTempFile Returns String
12888>>>>>    Integer iRetval
12888>>>>>    String  sTempPath
12888>>>>>    String  sTempFileName
12888>>>>>    String  sPrefixString
12888>>>>>    WString wsTempFileName
12888>>>>>
12888>>>>>    Get vGetTempPath to sTempPath
12889>>>>>    If (sTempPath = "") Begin
12891>>>>>        Get vGetWindowsDirectory to sTempPath  // first fallback
12892>>>>>        If (sTempPath<>"") Begin
12894>>>>>            Move (sTempPath+"\Temp\") to sTempPath
12895>>>>>        End
12895>>>>>>
12895>>>>>    End
12895>>>>>>
12895>>>>>
12895>>>>>    If (sTempPath = "") Begin
12897>>>>>        // second fallback we really do not want to get here as to be fair using current folder as temp
12897>>>>>        // makes little sense. Leaving this in as it was old behavior.
12897>>>>>        Get_Current_Directory to sTempPath
12898>>>>>    End
12898>>>>>>
12898>>>>>
12898>>>>>    Move (Trim(sTempPath)+Character(0)) to sTempPath
12899>>>>>    If (Length(sTempPath)>(vMax_Path-14)) Begin
12901>>>>>        Error DFERR_PROGRAM ("Temporary path"+sTempPath+"is too long, cannot create temporary files.")
12902>>>>>>
12902>>>>>    End
12902>>>>>>
12902>>>>>
12902>>>>>    Move (ZeroString(vMax_Path)) to wsTempFileName
12903>>>>>    Move ("tmp"+Character(0))    to sPrefixString
12904>>>>>    Move (vWin32_GetTempFileName (sTempPath, sPrefixString, 0, AddressOf(wsTempFileName))) to iRetval
12905>>>>>    If (iRetval = 0) Begin  // The api call returns 0 if an error occurs
12907>>>>>    //Get ShowLastError to iRetval
12907>>>>>        Move "" to sTempFileName
12908>>>>>    End
12908>>>>>>
12908>>>>>    Move (Cstring(wsTempFileName)) to sTempFileName
12909>>>>>    Function_Return sTempFileName
12910>>>>>End_Function
12911>>>>>
12911>>>>>// This function creates a uniquely named temporary file in folder sPath
12911>>>>>// The file created will have a prefix based on the first 3 characters in sPrefix
12911>>>>>// Note that you will have to cleanup the tempfile yourself as the function
12911>>>>>// does not take care of that.
12911>>>>>Function vCreateTempFileInPath String sPath String sPrefix Returns String
12913>>>>>    Integer iRetVal
12913>>>>>    String  sTempFileName
12913>>>>>    WString wTempFileName
12913>>>>>
12913>>>>>    Move (sPath+Character(0))   to sPath
12914>>>>>    Move (sPrefix+Character(0)) to sPrefix
12915>>>>>    Move (Pad("", vMAX_PATH))   to wTempFileName
12916>>>>>
12916>>>>>    Move (vWin32_GetTempFileName(sPath, sPrefix, 0, AddressOf(wTempFileName))) to iRetVal
12917>>>>>    Move (Trim(Cstring(wTempFileName))) to sTempFileName
12918>>>>>    Function_Return sTempFileName
12919>>>>>End_Function
12920>>>>>
12920>>>>>//
12920>>>>>// Get a specific shell folder for example to get the desktop folder
12920>>>>>// simply call this function and pass it vCSIDL_DESKTOP
12920>>>>>//
12920>>>>>Function vSHGetFolderPath Integer eFolder Returns String
12922>>>>>    Integer iVoid
12922>>>>>    Handle  hWnd
12922>>>>>    String  sFolder
12922>>>>>    WString wFolder
12922>>>>>
12922>>>>>    Move (Window_Handle(focus(desktop))) to hWnd
12923>>>>>    Move (Repeat(Character(0), vMAX_PATH)) to wFolder
12924>>>>>    Move (vWin32_SHGetFolderPath(hWnd,eFolder, 0, 0,AddressOf(wFolder))) To iVoid
12925>>>>>    Move (CString(wFolder)) to sFolder
12926>>>>>    Function_Return sFolder
12927>>>>>End_Function
12928>>>>>
12928>>>>>// Courtesy Of Vincent Oorsprong
12928>>>>>Function vConvertFileDateTime Global DWord dwLowDateTime DWord dwHighDateTime Returns String
12930>>>>>    String  sFileDateTime
12930>>>>>    WString wFormattedTime wFormattedDate
12930>>>>>    Integer iSuccess iLenCcTime iDataLength iLenCcDate
12930>>>>>    tvFileTime   FileTime
12930>>>>>    tvFileTime   FileTime
12930>>>>>    tvSystemTime SystemTime
12930>>>>>    tvSystemTime SystemTime
12930>>>>>
12930>>>>>    Move "" to sFileDateTime
12931>>>>>    Move dwLowDateTime  to FileTime.dwLowDateTime
12932>>>>>    Move dwHighDateTime to FileTime.dwHighDateTime
12933>>>>>
12933>>>>>    Move 0 to SystemTime.wYear
12934>>>>>
12934>>>>>    Move (vWin32_FileTimeToSystemTime (AddressOf(FileTime), AddressOf(SystemTime))) to iSuccess
12935>>>>>    If (iSuccess = 1) Begin
12937>>>>>        Move (ZeroString(255))               to wFormattedTime
12938>>>>>        Move (SizeOfWString(wFormattedTime)) to iLenCcTime
12939>>>>>        Move (vWin32_GetTimeFormat (LOCALE_USER_DEFAULT, 0, AddressOf(SystemTime), 0, AddressOf(wFormattedTime), iLenCcTime)) to iDataLength
12940>>>>>        Move (ZeroString(255))               to wFormattedDate
12941>>>>>        Move (SizeOfWString(wFormattedDate)) to iLenCcDate
12942>>>>>        Move (vWin32_GetDateFormat (LOCALE_USER_DEFAULT, 0, AddressOf(SystemTime), 0, AddressOf(wFormattedDate), iLenCcDate)) to iDataLength
12943>>>>>        Move (Cstring (wFormattedDate)  * Cstring (wFormattedTime)) to sFileDateTime
12944>>>>>    End
12944>>>>>>
12944>>>>>    Function_Return sFileDateTime
12945>>>>>End_Function
12946>>>>>
12946>>>>>// **WvA:
12946>>>>>// A windows replacement for the standard function FileExists.
12946>>>>>// This version will also return (true) for a file when it is open by an application.
12946>>>>>// Note that you can apply normal windows mask-signs in the filename such as * and ?
12946>>>>>// Example: Get vFilePathExists "C:\config.sy?"
12946>>>>>// This will return true if you have a file matching these conditions. (aka config.sys)
12946>>>>>Function vFilePathExists Global String sFilePathMask Returns Integer
12948>>>>>    String  sDirSep
12948>>>>>    Handle  hFindFile
12948>>>>>    Integer iVoid
12948>>>>>    tvWin32FindData FindData
12948>>>>>    tvWin32FindData FindData
12948>>>>>
12948>>>>>    Move vINVALID_HANDLE_VALUE to hFindFile
12949>>>>>    Move (Trim(sFilePathMask)) to sFilePathMask
12950>>>>>
12950>>>>>    If (Length(sFilePathMask)>0) Begin
12952>>>>>        // 2014-09-29 NGS Remove any trailing dir separators, as they make the function fail.
12952>>>>>        Move (sysconf(SYSCONF_DIR_SEPARATOR)) to sDirSep
12953>>>>>        While (Right(sFilePathMask, 1) = sDirSep)
12957>>>>>            Move (Left(sFilePathMask, Length(sFilePathMask) -1)) to sFilePathMask
12958>>>>>        Loop
12959>>>>>>
12959>>>>>
12959>>>>>        Move 0 to FindData.dwReserved0        // initialize the variable so we can get an address from it.
12960>>>>>        Move (vWin32_FindFirstFile (sFilePathMask, AddressOf(FindData))) to hFindFile
12961>>>>>        Move (vWin32_FindClose (hFindFile)) to iVoid
12962>>>>>    End
12962>>>>>>
12962>>>>>    Function_Return (hFindFile <> vINVALID_HANDLE_VALUE)
12963>>>>>End_Function
12964>>>>>
12964>>>>>
12964>>>>>//
12964>>>>>// Returns the amount of files in the folder (if it exists)
12964>>>>>// Returns -1 if folder doesn't exist.
12964>>>>>// The files "." and ".." are not counted.
12964>>>>>//
12964>>>>>Function vFolderFileCount Global String sFolderName Returns Integer
12966>>>>>    Boolean bFound
12966>>>>>    Handle  hFindFile
12966>>>>>    Integer iCount  iVoid
12966>>>>>    Integer iSuccess
12966>>>>>    String  sFileName
12966>>>>>    tvWin32FindData FindData
12966>>>>>    tvWin32FindData FindData
12966>>>>>
12966>>>>>    Move -1 to iCount
12967>>>>>    Get vFolderFormat sFolderName to sFolderName
12968>>>>>    Move (sFolderName+"*") to sFolderName // match any filename in the folder
12969>>>>>    Move 0 to FindData.dwReserved0        // initialize the variable so we can get an address from it.
12970>>>>>    Move (vWin32_FindFirstFile (sFolderName, AddressOf(FindData))) to hFindFile
12971>>>>>    Move (hFindFile<>vINVALID_HANDLE_VALUE) to bFound
12972>>>>>    If (bFound) Begin
12974>>>>>        Move 0 to iCount
12975>>>>>    End
12975>>>>>>
12975>>>>>    While (bFound)
12979>>>>>        Increment iCount
12980>>>>>        Move (PointerToWString(AddressOf(FindData.cFileName))) to sFileName
12981>>>>>        If (sFileName="." or sFileName="..") Begin
12983>>>>>            Decrement iCount
12984>>>>>        End
12984>>>>>>
12984>>>>>        Move (vWin32_FindNextFile(hFindFile, AddressOf(FindData))) to iSuccess
12985>>>>>        Move (iSuccess<>0) to bFound
12986>>>>>    Loop
12987>>>>>>
12987>>>>>    Move (vWin32_FindClose (hFindFile)) to iVoid
12988>>>>>    Function_Return iCount
12989>>>>>End_Function
12990>>>>>
12990>>>>>// Create the folder, including intermediate directories.
12990>>>>>// Don't panic if the folder already exists.
12990>>>>>// Michael Mullan June 2009.
12990>>>>>Function vshCreateDirectoryEX Global String sNewFolder Returns Integer
12992>>>>>    String  sFolder
12992>>>>>    Integer iRetval iFolderCreated
12992>>>>>    tvSecurity_attributes SA
12992>>>>>    tvSecurity_attributes SA
12992>>>>>
12992>>>>>    Move 0 to iFolderCreated
12993>>>>>
12993>>>>>    // null MAX_PATH chars into var (make space)
12993>>>>>    Move (Repeat(Character(0), vMAX_PATH)) to sFolder
12994>>>>>    If (sNewFolder <> "") Begin
12996>>>>>
12996>>>>>        Move (SizeOfType(tvSecurity_attributes)) to SA.nLength
12997>>>>>        Move  0  to SA.lpDescriptor
12998>>>>>        Move  1  to SA.bInheritHandle
12999>>>>>
12999>>>>>        //
12999>>>>>        Move (sNewFolder+"") to sFolder
13000>>>>>        Move (vWin32_SHCreateDirectoryEx(0,sFolder, AddressOf(SA))) to iFolderCreated
13001>>>>>    End
13001>>>>>>
13001>>>>>
13001>>>>>    If (iFolderCreated <> 0) Begin
13003>>>>>        Move 1 to iRetVal
13004>>>>>        Case Begin
13004>>>>>            Case (iFolderCreated = 161)
13006>>>>>                Error DFERR_OPERATOR ("Path " + sNewFolder + " is Not Valid (ERROR_BAD_PATHNAME)")
13007>>>>>>
13007>>>>>                Case Break
13008>>>>>            Case (iFolderCreated = 206)
13011>>>>>                Error DFERR_OPERATOR ("Path " + sNewFolder + " is Not Valid (ERROR_FILENAME_EXCED_RANGE)")
13012>>>>>>
13012>>>>>                Case Break
13013>>>>>            Case (iFolderCreated = 3)
13016>>>>>                Error DFERR_OPERATOR ("Path " + sNewFolder + " is Not Valid (ERROR_PATH_NOT_FOUND)")
13017>>>>>>
13017>>>>>                Case Break
13018>>>>>            Case (iFolderCreated = 80)
13021>>>>>                Move 0 to iRetval // "ERROR_FILE_EXISTS"     not really an error
13022>>>>>                Case Break
13023>>>>>            Case (iFolderCreated = 183)
13026>>>>>                Move 0 to iRetval //  "ERROR_ALREADY_EXISTS"     not really an error
13027>>>>>                Case Break
13028>>>>>            Case (iFolderCreated = 1223)
13031>>>>>                Error DFERR_OPERATOR ("Path " + sNewFolder + " is Not Valid (ERROR_CANCELLED)")
13032>>>>>>
13032>>>>>                Case Break
13033>>>>>            Case Else
13033>>>>>                Error DFERR_OPERATOR ("Folder Creation Error # " + String(ifoldercreated) + "\n" + sNewFolder + "(FILE_CREATION_ERROR)")
13034>>>>>>
13034>>>>>        Case End
13034>>>>>    End
13034>>>>>>
13034>>>>>    Function_Return iRetVal
13035>>>>>End_Function
13036>>>>>
13036>>>>>Function vWin32_APIFileSize Global String sFileName Returns Integer
13038>>>>>    DWord   dwFileSizeHigh dwFileSizeLow
13038>>>>>    Integer iFileSize iVoid
13038>>>>>    Handle  hFindFile
13038>>>>>    tvWin32FindData FindData
13038>>>>>    tvWin32FindData FindData
13038>>>>>
13038>>>>>    Move (sFileName+"") to sFileName
13039>>>>>    Move 0 to FindData.dwReserved0        // initialize the variable so we can get an address from it.
13040>>>>>    Move (vWin32_FindFirstFile (sFileName, AddressOf(FindData))) to hFindFile
13041>>>>>    If (hFindFile<>vINVALID_HANDLE_VALUE) Begin
13043>>>>>        Move FindData.nFileSizeHigh to dwFileSizeHigh
13044>>>>>        Move FindData.nFileSizeLow  to dwFileSizeLow
13045>>>>>    End
13045>>>>>>
13045>>>>>    Move (vWin32_FindClose(hFindFile)) to iVoid
13046>>>>>    Move ((dwFileSizeHigh * vMaxDword) + dwFileSizeLow) to iFileSize
13047>>>>>
13047>>>>>    Function_Return iFileSize
13048>>>>>End_Function
13049>>>>>
13049>>>>>//
13049>>>>>// Based on code in Peter Crook's Browse folder workspace
13049>>>>>// http://support.dataaccess.com/Forums/showthread.php?54383-Browse-for-Folder-package&p=282249#post282249
13049>>>>>//
13049>>>>>//=============================================================================
13049>>>>>// Verifies that a path is a valid directory.
13049>>>>>//
13049>>>>>// Returns TRUE if the path is a valid directory, or FALSE otherwise.
13049>>>>>//
13049>>>>>// Parameters:
13049>>>>>//      sPath - Address of the path to verify.
13049>>>>>//=============================================================================
13049>>>>>Function vPathIsDirectory Global String sPath Returns Boolean
13051>>>>>    Integer iResult
13051>>>>>    Boolean bRetVal
13051>>>>>
13051>>>>>    Move false to bRetVal
13052>>>>>    Move (sPath - Character (0)) to sPath
13053>>>>>    Move (vWin32_PathIsDirectory (sPath)) to iResult
13054>>>>>    If (iResult<>0) Begin
13056>>>>>        Move True to bRetVal
13057>>>>>    End
13057>>>>>>
13057>>>>>
13057>>>>>    Function_Return bRetVal
13058>>>>>End_Function
13059>>>>>
13059>>>
13059>>>//
13059>>>// Gets the string from the right of the last sStopChar in sFrom
13059>>>// If sStopChar has no occurences in the string an empty string is
13059>>>// returned.
13059>>>Function StringFromRightOfChar Global String sFrom String sStopChar Returns String
13061>>>    String  sRetVal
13061>>>    String  sChar
13061>>>    Integer iLength
13061>>>    Integer iPos
13061>>>    Boolean bStopChar
13061>>>    Move "" to sRetval
13062>>>    Move (Length(sFrom)) to iLength
13063>>>    If ((iLength>0) And (Pos(sStopChar,sFrom) <> 0)) Begin
13065>>>        Move iLength   to iPos
13066>>>        Move (False)   to bStopChar
13067>>>        While Not bStopChar
13071>>>            Move (Mid(sFrom,1,iPos)) to sChar
13072>>>            Decrement iPos
13073>>>            If ((sChar=sStopChar) Or (iPos<1)) Begin
13075>>>                Move (True) to bStopChar
13076>>>            End
13076>>>>
13076>>>            Else Begin
13077>>>                Move (sChar+sRetVal) to sRetVal
13078>>>            End
13078>>>>
13078>>>        Loop
13079>>>>
13079>>>    End
13079>>>>
13079>>>    Function_Return sRetVal
13080>>>End_Function
13081>>>
13081>>>// Pre:  sFileName contains the complete path of the file.
13081>>>// Post: returns the complete path of the file.
13081>>>// This function is inspired on function SEQ_ExtractPathFromFileName of Sture Andersen.
13081>>>Function ParseFolderName Global String sFileName Returns String
13083>>>    String sFile
13083>>>    String sFolderName
13083>>>    String sDirSep // this is "\" for windows, or "/" for unix
13083>>>
13083>>>    Move "" to sFolderName
13084>>>    Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
13085>>>    If sDirSep In sFileName Begin
13087>>>        Move (StringFromRightOfChar(sFileName,sDirSep)) to sFile
13088>>>        Move (Left(sFileName,Length(sFileName)-Length(sFile))) to sFolderName
13089>>>    End
13089>>>>
13089>>>    Else If ":" In sFileName Begin
13092>>>        Move (StringFromRightOfChar(sFileName,":")) to sFile
13093>>>        Move (Replace(sFile,sFileName,"")) to sFolderName
13094>>>    End
13094>>>>
13094>>>    Function_Return sFolderName
13095>>>End_Function
13096>>>
13096>>>// Pre:  sFileName contains the complete path of the file.
13096>>>// post: The returned filename has it's path removed, but will have a extension
13096>>>Function ParseFileName Global String sFileName Returns String
13098>>>    String sFolderName
13098>>>    String sDirSep // this is "\" for windows, or "/" for unix
13098>>>
13098>>>    Move (sysconf(SYSCONF_DIR_SEPARATOR)) to sDirSep
13099>>>    Get ParseFolderName sFileName to sFolderName
13100>>>    If (sFolderName <> "") Begin
13102>>>        Move (Replace(sFolderName,sFileName,"")) to sFileName
13103>>>    End
13103>>>>
13103>>>    Move (Replace(sDirSep,sFileName,"")) to sFileName
13104>>>    Function_Return sFilename
13105>>>End_Function
13106>>>
13106>>>// Pre:  sFileName may contain the complete path of the file.
13106>>>//       or contain multiple dots in the filename, so temp.gif.bak will
13106>>>//       return "bak" as the extension and not "gif"
13106>>>// Post: returns the extension only, this extension can be a valid unixlike extension
13106>>>//       such as "html" or "java"
13106>>>Function ParseFileExtension Global String sFileName Returns String
13108>>>    String  sFileExtension
13108>>>    Get ParseFileName sFileName to sFileName // takes care of corner case with path containing a ".". eg. c:\frank.cheng\hello
13109>>>    Get StringFromRightOfChar sFileName "." to sFileExtension
13110>>>    Function_Return sFileExtension
13111>>>End_Function
13112>>>
13112>>>Define CS_DDE_ERR_UNKNOWN_LINE2   For ".\n"
13112>>>
13112>>>Function DDE_Error_To_String Integer iErrorID Returns String
13114>>>    String sMessage
13114>>>    Case Begin
13114>>>        Case (iErrorID = vERROR_FILE_NOT_FOUND)
13116>>>            Move CS_DDE_ERR_FILE_NOT_FOUND to sMessage
13117>>>            Case Break
13118>>>        Case (iErrorID = vERROR_PATH_NOT_FOUND)
13121>>>            Move CS_DDE_ERR_PATH_NOT_FOUND to sMessage
13122>>>            Case Break
13123>>>        Case (iErrorID = vERROR_BAD_FORMAT)
13126>>>            Move CS_DDE_ERR_BAD_FORMAT to sMessage
13127>>>            Case Break
13128>>>        Case (iErrorID = vSE_ERR_ACCESSDENIED)
13131>>>            Move CS_DDE_ERR_ACCESSDENIED to sMessage
13132>>>            Case Break
13133>>>        Case (iErrorID = vSE_ERR_ASSOCINCOMPLETE)
13136>>>            Move CS_DDE_ERR_ASSOCINCOMPLETE to sMessage
13137>>>            Case Break
13138>>>        Case (iErrorID = vSE_ERR_DDEBUSY)
13141>>>            Move CS_DDE_ERR_DDEBUSY to sMessage
13142>>>            Case Break
13143>>>        Case (iErrorID = vSE_ERR_DDEFAIL)
13146>>>            Move CS_DDE_ERR_DDEFAIL to sMessage
13147>>>            Case Break
13148>>>        Case (iErrorID = vSE_ERR_DDETIMEOUT)
13151>>>            Move CS_DDE_ERR_DDETIMEOUT to sMessage
13152>>>            Case Break
13153>>>        Case (iErrorID = vSE_ERR_DLLNOTFOUND)
13156>>>            Move CS_DDE_ERR_DLLNOTFOUND to sMessage
13157>>>            Case Break
13158>>>        Case (iErrorID = vSE_ERR_NOASSOC)
13161>>>            Move CS_DDE_ERR_NOASSOC to sMessage
13162>>>            Case Break
13163>>>        Case ((iErrorID = vSE_ERR_OOM) Or (iErrorID = 0))
13166>>>            Move CS_DDE_ERR_OOM to sMessage
13167>>>            Case Break
13168>>>        Case (iErrorID = vSE_ERR_PNF)
13171>>>            Move CS_DDE_ERR_PNF to sMessage
13172>>>            Case Break
13173>>>        Case (iErrorID = vSE_ERR_SHARE)
13176>>>            Move CS_DDE_ERR_SHARE to sMessage
13177>>>            Case Break
13178>>>        Case Else
13178>>>            Move CS_DDE_ERR_UNKNOWN_LINE1 to sMessage
13179>>>            Move (sMessage*Trim(iErrorID)*CS_DDE_ERR_UNKNOWN_LINE2) to sMessage
13180>>>            Case Break
13181>>>    Case End
13181>>>    Function_Return sMessage
13182>>>End_Function
13183>>>
13183>>>Procedure vDDE_Error_Handler Integer iErrorID
13185>>>    String sMessage
13185>>>    Get DDE_Error_To_String iErrorID to sMessage
13186>>>    Append sMessage CS_DDE_ERR_HANDL_PAKTC //  "Press a key to continue..."
13187>>>    Send Stop_Box sMessage CS_DDE_ERR_HANDL_CAPTION
13188>>>End_Procedure
13189>>>
13189>>>
13189>>>// This function informs the user that he entered a yet unknown folder and
13189>>>// asks if he/she wants to create the folder (Yes/No)
13189>>>// Choice: "Yes" - this creates the folder
13189>>>//                 if successful, the function returns false
13189>>>//                 else it will be true.
13189>>>// Choice: "No"  - returns TRUE, This allows the programmer to take action
13189>>>//                 For example: to stop a save
13189>>>// Precondition: A foldername must be entered. We do not check for empty paths
13189>>>// This function returns a non-zero value if the folder isn't created afterwards
13189>>>Function vVerifyNewFolder Global String sFolderName Returns Integer
13191>>>    Integer bIsNotValid
13191>>>    Integer iUsers_Choice
13191>>>    String  sMessage
13191>>>
13191>>>    If (vFolderExists(sFolderName) Eq 0) Begin
13193>>>        Move "The folder '" to sMessage
13194>>>        Append sMessage sFolderName
13195>>>        Append sMessage "' does not yet exist,\n"
13196>>>        Append sMessage "Do you want to create it now?"
13197>>>        Get YesNo_Box sMessage "Confirm" MB_DefButton1 to iUsers_Choice
13198>>>        Case Begin
13198>>>            Case (iUsers_Choice = MBR_Yes)
13200>>>                Move (vCreateDirectory(sFolderName)) to bIsNotValid
13201>>>                If bIsNotValid Begin
13203>>>                    Move "An error occurred while trying to create folder '" to sMessage
13204>>>                    Append sMessage sFolderName "'.\n\n"
13206>>>                    Send Info_Box sMessage "Info"
13207>>>                End
13207>>>>
13207>>>                Case Break
13208>>>            Case (iUsers_Choice = MBR_No)
13211>>>                Move dfTrue to bIsNotValid // Cancel the save
13212>>>                Case Break
13213>>>        Case End
13213>>>    End
13213>>>>
13213>>>    Function_Return bIsNotValid
13214>>>End_Function
13215>>>
13215>>>// **WvA
13215>>>// Formats a foldername by first trimming it and after that by sticking a
13215>>>// directory separator (/\) to the end if it doesn't have one there already.
13215>>>// The folder may contain a drive letter or UNC encoding.
13215>>>Function vFolderFormat Global String sFolderName Returns String
13217>>>    String sDirSep
13217>>>    Move (sysconf(SYSCONF_DIR_SEPARATOR)) to sDirSep  // normally \ (backslash)
13218>>>    Move (Trim(sFolderName)) to sFolderName
13219>>>    If (Right(sFolderName,1)<>sDirSep) Begin
13221>>>        Move (sFolderName+sDirSep) to sFolderName
13222>>>    End
13222>>>>
13222>>>    Function_Return sFolderName
13223>>>End_Function
13224>>>
13224>>>//
13224>>>// Gets the parent path of the currently supplied path
13224>>>// Returns "" when we are at the root folder.
13224>>>//
13224>>>Function vParentPath Global String sPath Returns String
13226>>>    String sStrip sDirSep
13226>>>
13226>>>    Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
13227>>>    Move (Trim(sPath)) to sPath
13228>>>    If (Right(sPath,1) = sDirSep) Begin
13230>>>        Move (Left(sPath,Length(sPath)-1)) to sPath
13231>>>    End
13231>>>>
13231>>>    If (Pos(sDirSep, sPath)) Begin
13233>>>        Move (StringFromRightOfChar(sPath, sDirSep)) to sStrip
13234>>>        Move (Left(sPath,Length(sPath)-Length(sStrip))) to sPath
13235>>>    End
13235>>>>
13235>>>    Else Begin
13236>>>        Move "" to sPath
13237>>>    End
13237>>>>
13237>>>    Function_Return sPath
13238>>>End_Function
13239>Use oEditContextMenu.pkg
Including file: oEditContextMenu.pkg    (C:\Program Files\DataFlex 24.0\Pkg\oEditContextMenu.pkg)
13239>>>Use cCJStandardMenuItemClasses.pkg
Including file: cCJStandardMenuItemClasses.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJStandardMenuItemClasses.pkg)
13239>>>>>Use Dfpanel.pkg
Including file: Dfpanel.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfpanel.pkg)
13239>>>>>>>Use Windows.pkg
13239>>>>>>>Use dfcolor.pkg
13239>>>>>>>
13239>>>>>>>//  Used when help object makes a request to the object requesting help.
13239>>>>>>>Use HelpSystemConstants.pkg
13239>>>>>>>
13239>>>>>>>Enumeration_List
13239>>>>>>>    Define amTop
13239>>>>>>>    Define amBottom
13239>>>>>>>    Define amLeft
13239>>>>>>>    Define amRight
13239>>>>>>>End_Enumeration_List
13239>>>>>>>
13239>>>>>>>Use DFAStBar.pkg  // df application status bar
Including file: Dfastbar.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfastbar.pkg)
13239>>>>>>>>>Register_Procedure Add_Border_Object
13239>>>>>>>>>Register_Procedure Remove_Border_Object
13239>>>>>>>>>
13239>>>>>>>>>Use DFStatBr.pkg
Including file: Dfstatbr.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfstatbr.pkg)
13239>>>>>>>>>>>Use windows.pkg
13239>>>>>>>>>>>Use CommCtrl.pkg
13239>>>>>>>>>>>Use WinGDI.pkg
13239>>>>>>>>>>>
13239>>>>>>>>>>>
13239>>>>>>>>>>>
13239>>>>>>>>>>>
13239>>>>>>>>>>>
13239>>>>>>>>>>>
13239>>>>>>>>>>>Class BasicStatusBar is a dfBaseList
13240>>>>>>>>>>>    Procedure Construct_Object
13242>>>>>>>>>>>        Forward Send Construct_Object
13244>>>>>>>>>>>        Property Integer Private.Simple_State False
13245>>>>>>>>>>>        
13245>>>>>>>>>>>        Property String  Private.Simple_Value ''
13246>>>>>>>>>>>        
13246>>>>>>>>>>>        Property Integer Tooltips_State False // this does nothing
13247>>>>>>>>>>>        Set Scroll_Bar_Visible_State to False
13248>>>>>>>>>>>        Set Border_Style             to Border_None
13249>>>>>>>>>>>        Set External_class_Name "cObsoleteBasicStatusBar" to "msctls_statusbar32"
13250>>>>>>>>>>>        Set Color to clDefault
13251>>>>>>>>>>>    End_Procedure
13252>>>>>>>>>>>    
13252>>>>>>>>>>>    Procedure End_Construct_Object
13254>>>>>>>>>>>        //If (Tooltips_State(self)) Set Window_Style To SBT_TOOLTIPS True
13254>>>>>>>>>>>        Forward Send End_Construct_Object
13256>>>>>>>>>>>    End_Procedure
13257>>>>>>>>>>>    
13257>>>>>>>>>>>    Procedure Set Simple_State Integer bState
13259>>>>>>>>>>>        Handle hWnd
13259>>>>>>>>>>>        Set Private.Simple_state to bState
13260>>>>>>>>>>>        Get Window_Handle to hWnd
13261>>>>>>>>>>>        If hWnd ;            Send Windows_Message SB_SIMPLE bState 0
13264>>>>>>>>>>>    End_Procedure
13265>>>>>>>>>>>    
13265>>>>>>>>>>>    Function Simple_State Returns Integer
13267>>>>>>>>>>>        Function_Return (Private.Simple_state(Self))
13268>>>>>>>>>>>    End_Function
13269>>>>>>>>>>>    
13269>>>>>>>>>>>    Procedure Set Simple_Value String sValue
13271>>>>>>>>>>>        Integer iVoid
13271>>>>>>>>>>>        Handle hWnd
13271>>>>>>>>>>>        WString wsValue
13271>>>>>>>>>>>        
13271>>>>>>>>>>>        Set Private.Simple_Value to sValue
13272>>>>>>>>>>>        
13272>>>>>>>>>>>        Get Window_Handle to hWnd
13273>>>>>>>>>>>        If hWnd Begin
13275>>>>>>>>>>>            Append sValue ( Character(0) )
13276>>>>>>>>>>>            Move sValue to wsValue
13277>>>>>>>>>>>            
13277>>>>>>>>>>>            Send Windows_Message SB_SETTEXT (255 + sbNORMAL) (AddressOf(wsValue))
13278>>>>>>>>>>>        End
13278>>>>>>>>>>>>
13278>>>>>>>>>>>        Set Simple_State to True
13279>>>>>>>>>>>    End_Procedure
13280>>>>>>>>>>>    
13280>>>>>>>>>>>    Function Simple_Value Returns String
13282>>>>>>>>>>>        Function_Return (private.Simple_value(Self))
13283>>>>>>>>>>>    End_Function
13284>>>>>>>>>>>    
13284>>>>>>>>>>>    Procedure Activate
13286>>>>>>>>>>>    End_Procedure
13287>>>>>>>>>>>    
13287>>>>>>>>>>>    Procedure Page_Object Integer iState
13289>>>>>>>>>>>        Handle hWnd
13289>>>>>>>>>>>        Get Window_handle to hWnd
13290>>>>>>>>>>>        Forward Send Page_Object iState
13292>>>>>>>>>>>        If (iState and hWnd = 0) ;            Send DoRestructure
13295>>>>>>>>>>>    End_Procedure
13296>>>>>>>>>>>    
13296>>>>>>>>>>>    Procedure Page Integer iState
13298>>>>>>>>>>>        Forward Send Page iState
13300>>>>>>>>>>>        If (iState=1) Begin
13302>>>>>>>>>>>            Send Windows_Message SB_SETBKCOLOR 0 (Color(Self))
13303>>>>>>>>>>>        End
13303>>>>>>>>>>>>
13303>>>>>>>>>>>    End_Procedure
13304>>>>>>>>>>>    
13304>>>>>>>>>>>    Procedure DoRestructure
13306>>>>>>>>>>>        Integer iLoop icItems iWidth icWidth iRetVal
13306>>>>>>>>>>>        Handle hWnd
13306>>>>>>>>>>>        Integer[] aItems
13307>>>>>>>>>>>        
13307>>>>>>>>>>>        Get Window_Handle to hWnd
13308>>>>>>>>>>>        If hWnd Begin
13310>>>>>>>>>>>            
13310>>>>>>>>>>>            Send Windows_Message SB_SIMPLE (Simple_State(Self)) 0
13311>>>>>>>>>>>            Set Simple_Value to (Simple_Value(Self))
13312>>>>>>>>>>>            
13312>>>>>>>>>>>            Get Item_Count to icItems
13313>>>>>>>>>>>            
13313>>>>>>>>>>>            For iLoop from 1 to (icItems -1)
13319>>>>>>>>>>>>
13319>>>>>>>>>>>                Get Message (iLoop -1) to iWidth
13320>>>>>>>>>>>                Move (icWidth + iWidth) to icWidth
13321>>>>>>>>>>>                Move (icWidth) to aItems[iLoop - 1]
13322>>>>>>>>>>>                
13322>>>>>>>>>>>                Set Value (iLoop -1) to (Value(Self, iLoop -1))
13323>>>>>>>>>>>            Loop
13324>>>>>>>>>>>>
13324>>>>>>>>>>>            // Now make the last item 'spring' to the end
13324>>>>>>>>>>>            Move -1 to aItems[icItems - 1]
13325>>>>>>>>>>>                        
13325>>>>>>>>>>>            Move (SendMessage(hWnd, SB_SETPARTS, icItems, AddressOf(aItems))) to iRetVal
13326>>>>>>>>>>>            For iLoop from 0 to (icItems -1)
13332>>>>>>>>>>>>
13332>>>>>>>>>>>                Set Value iLoop to (Value(Self, iLoop))
13333>>>>>>>>>>>            Loop
13334>>>>>>>>>>>>
13334>>>>>>>>>>>            
13334>>>>>>>>>>>        End
13334>>>>>>>>>>>>
13334>>>>>>>>>>>    End_Procedure
13335>>>>>>>>>>>    
13335>>>>>>>>>>>    Procedure Add_Item Integer iItemWidth String sValue // this is obsolete
13337>>>>>>>>>>>        Integer iRetVal icItems
13337>>>>>>>>>>>        Handle hWnd
13337>>>>>>>>>>>        
13337>>>>>>>>>>>        Forward Send Add_Item iItemWidth sValue
13339>>>>>>>>>>>        Get Item_Count to icItems
13340>>>>>>>>>>>        Set Value (icItems -1) to sValue
13341>>>>>>>>>>>        If (Window_Handle(Self)) ;            Send DoRestructure
13344>>>>>>>>>>>        Set Current_item to (icItems -1)
13345>>>>>>>>>>>    End_Procedure
13346>>>>>>>>>>>    
13346>>>>>>>>>>>    Procedure AddPane Integer iItemWidth String sValue Integer iStyle
13348>>>>>>>>>>>        Integer iRetVal icItem
13348>>>>>>>>>>>        Handle hWnd
13348>>>>>>>>>>>        
13348>>>>>>>>>>>        Send Add_Item iItemWidth sValue
13349>>>>>>>>>>>        Get Item_Count to icItem
13350>>>>>>>>>>>        Set Value (icItem -1) to sValue
13351>>>>>>>>>>>        Set Aux_Value (icItem -1) to iStyle
13352>>>>>>>>>>>        If (Window_Handle(Self)) ;            Send DoRestructure
13355>>>>>>>>>>>    End_Procedure
13356>>>>>>>>>>>    
13356>>>>>>>>>>>    Procedure AutoSizeLocate
13358>>>>>>>>>>>        Integer iSize iRetVal
13358>>>>>>>>>>>        Handle hWnd
13358>>>>>>>>>>>        Get Window_Handle to hWnd
13359>>>>>>>>>>>        Delegate Get GuiSize to iSize
13361>>>>>>>>>>>        If hWnd ;            Move (SendMessage(hWnd, WM_SIZE, 0, iSize)) to iRetVal
13364>>>>>>>>>>>    End_Procedure
13365>>>>>>>>>>>    
13365>>>>>>>>>>>    Procedure Set Item_Display_Style Integer iItem Integer iStyle  // this is obsolete, Use PaneStyle
13367>>>>>>>>>>>        If (num_arguments = 2) ;            Set Aux_Value iItem to iStyle
13370>>>>>>>>>>>        Else ;            Set Aux_Value (current_item(Self)) to iItem //iStyle passed as arg1
13372>>>>>>>>>>>    End_Procedure
13373>>>>>>>>>>>    
13373>>>>>>>>>>>    Function Item_Display_Style Integer iItem Returns Integer // this is obsolete, use PaneStyle
13375>>>>>>>>>>>        Function_Return (Aux_value(Self, iItem))
13376>>>>>>>>>>>    End_Function
13377>>>>>>>>>>>    
13377>>>>>>>>>>>    Procedure Set Value Integer iItem String sValue
13379>>>>>>>>>>>        Handle hWnd
13379>>>>>>>>>>>        Integer iRetVal iTextStyle iVoid
13379>>>>>>>>>>>        String sNull
13379>>>>>>>>>>>        WString wsValue
13379>>>>>>>>>>>        
13379>>>>>>>>>>>        Forward Set Value iItem to sValue
13381>>>>>>>>>>>        Get Window_Handle to hWnd
13382>>>>>>>>>>>        If hWnd Begin
13384>>>>>>>>>>>            Get Item_Display_Style iItem to iTextStyle
13385>>>>>>>>>>>            Append sValue ( Character(0) )
13386>>>>>>>>>>>            Move sValue to wsValue
13387>>>>>>>>>>>            Move (SendMessage(hWnd, SB_SETTEXT, iItem + iTextStyle, AddressOf(wsValue))) to iRetVal
13388>>>>>>>>>>>        End
13388>>>>>>>>>>>>
13388>>>>>>>>>>>        Set Simple_State to False
13389>>>>>>>>>>>    End_Procedure
13390>>>>>>>>>>>    
13390>>>>>>>>>>>    Function IsSimpleMode Returns Integer
13392>>>>>>>>>>>        Function_Return (WindowsMessage(SB_ISSIMPLE, 0, 0))
13393>>>>>>>>>>>    End_Function
13394>>>>>>>>>>>    
13394>>>>>>>>>>>    Procedure Notify Longptr wParam Longptr lParam
13396>>>>>>>>>>>        Integer iVoid iCode
13396>>>>>>>>>>>        Longptr iPane
13396>>>>>>>>>>>        tWinNmMouse NmMouse
13396>>>>>>>>>>>        tWinNmMouse NmMouse
13396>>>>>>>>>>>        
13396>>>>>>>>>>>        Move (CopyMemory(AddressOf(NmMouse), lParam, SizeOfType(tWinNmMouse))) to iVoid
13397>>>>>>>>>>>        
13397>>>>>>>>>>>        Move NmMouse.hdr.code   to iCode
13398>>>>>>>>>>>        Move NmMouse.dwItemSpec to iPane
13399>>>>>>>>>>>        
13399>>>>>>>>>>>        If (iCode = SBN_SIMPLEMODECHANGE) ;            Send OnSimpleModeChange
13402>>>>>>>>>>>        Else If (iCode = NM_CLICK) ;            Send OnClick            iPane
13406>>>>>>>>>>>        Else If (iCode = NM_DBLCLK) ;            Send OnDoubleClick      iPane
13410>>>>>>>>>>>        Else If (iCode = NM_RCLICK) ;            Send OnRightClick       iPane
13414>>>>>>>>>>>        Else If (iCode = NM_RDBLCLK) ;            Send OnDoubleRightClick iPane
13418>>>>>>>>>>>    End_Procedure
13419>>>>>>>>>>>    
13419>>>>>>>>>>>    //  This needs to be chagned to return the real GUISize of the status bar
13419>>>>>>>>>>>    //  by making API calls.
13419>>>>>>>>>>>    //
13419>>>>>>>>>>>    Function GuiSize Returns Integer
13421>>>>>>>>>>>        Handle hWnd
13421>>>>>>>>>>>        Integer cy cx iVoid
13421>>>>>>>>>>>        tWinRect Rect
13421>>>>>>>>>>>        tWinRect Rect
13421>>>>>>>>>>>        Get Window_Handle to hWnd
13422>>>>>>>>>>>        If hWnd Begin
13424>>>>>>>>>>>            Move (GetWindowRect(hWnd, AddressOf(Rect))) to iVoid
13425>>>>>>>>>>>            Move (Rect.right - Rect.left) to cx
13426>>>>>>>>>>>            Move (Rect.bottom - Rect.top) to cy
13427>>>>>>>>>>>        End
13427>>>>>>>>>>>>
13427>>>>>>>>>>>        Else Begin
13428>>>>>>>>>>>            Move 25 to cy
13429>>>>>>>>>>>            Move 19 to cx
13430>>>>>>>>>>>        End
13430>>>>>>>>>>>>
13430>>>>>>>>>>>        Function_Return ( cy*65536 + cx )
13431>>>>>>>>>>>    End_Function
13432>>>>>>>>>>>    
13432>>>>>>>>>>>    Function PaneTextWidth WString sText Returns Integer
13434>>>>>>>>>>>        Handle hWnd hDC
13434>>>>>>>>>>>        Integer bOK
13434>>>>>>>>>>>        tWinPoint Point
13434>>>>>>>>>>>        tWinPoint Point
13434>>>>>>>>>>>        
13434>>>>>>>>>>>        Get Window_Handle to hWnd
13435>>>>>>>>>>>        Move (GetDC(hWnd)) to hDC
13436>>>>>>>>>>>        
13436>>>>>>>>>>>        Move (GetTextExtentW(hDC, AddressOf(sText), length(sText), AddressOf(Point))) to bOk
13437>>>>>>>>>>>        
13437>>>>>>>>>>>        Move (ReleaseDC(hWnd, hDC)) to hDC
13438>>>>>>>>>>>        
13438>>>>>>>>>>>        Function_Return Point.x
13439>>>>>>>>>>>    End_Function
13440>>>>>>>>>>>    
13440>>>>>>>>>>>    Procedure Set PaneWidth Integer iPane Integer cxPane
13442>>>>>>>>>>>        Set Message iPane to cxPane
13443>>>>>>>>>>>    End_Procedure
13444>>>>>>>>>>>    
13444>>>>>>>>>>>    Function PaneWidth Integer iPane Returns Integer
13446>>>>>>>>>>>        Function_Return (Message(Self,iPane))
13447>>>>>>>>>>>    End_Function
13448>>>>>>>>>>>    
13448>>>>>>>>>>>    Procedure Set PaneStyle Integer iPane Integer iStyle
13450>>>>>>>>>>>        Set Aux_Value iPane to iStyle
13451>>>>>>>>>>>    End_Procedure
13452>>>>>>>>>>>    
13452>>>>>>>>>>>    Function PaneStyle Integer iPane Returns Integer
13454>>>>>>>>>>>        Function_Return (Aux_Value(Self,iPane))
13455>>>>>>>>>>>    End_Function
13456>>>>>>>>>>>    
13456>>>>>>>>>>>    Procedure Set PaneText Integer iPane String sText
13458>>>>>>>>>>>        Set Value iPane to sText
13459>>>>>>>>>>>    End_Procedure
13460>>>>>>>>>>>    
13460>>>>>>>>>>>    Function PaneText Integer iPane Returns String
13462>>>>>>>>>>>        Function_Return (Value(Self,iPane))
13463>>>>>>>>>>>    End_Function
13464>>>>>>>>>>>    
13464>>>>>>>>>>>    Function PaneCount Returns Integer
13466>>>>>>>>>>>        Function_Return (Item_Count(Self))
13467>>>>>>>>>>>    End_Function
13468>>>>>>>>>>>    
13468>>>>>>>>>>>    Procedure OnClick Longptr iPane
13470>>>>>>>>>>>    End_Procedure
13471>>>>>>>>>>>    
13471>>>>>>>>>>>    Procedure OnDoubleClick Longptr iPane
13473>>>>>>>>>>>    End_Procedure
13474>>>>>>>>>>>    
13474>>>>>>>>>>>    Procedure OnRightClick Longptr iPane
13476>>>>>>>>>>>    End_Procedure
13477>>>>>>>>>>>    
13477>>>>>>>>>>>    Procedure OnDoubleRightClick Longptr iPane
13479>>>>>>>>>>>    End_Procedure
13480>>>>>>>>>>>    
13480>>>>>>>>>>>    Procedure OnSimpleModeChange
13482>>>>>>>>>>>    End_Procedure
13483>>>>>>>>>>>End_Class
13484>>>>>>>>>>>
13484>>>>>>>>>
13484>>>>>>>>>Class AppStatusBar is a BasicStatusBar
13485>>>>>>>>>    
13485>>>>>>>>>    Procedure Construct_Object
13487>>>>>>>>>        Forward Send Construct_Object
13489>>>>>>>>>        Property Integer Status_Help_Item 0
13490>>>>>>>>>        Property Integer Menu_Simple_State TRUE
13491>>>>>>>>>        
13491>>>>>>>>>        // SET s/b private, Get is public
13491>>>>>>>>>        Property Integer Menu_status_State False // MUST start false
13492>>>>>>>>>        
13492>>>>>>>>>        Property Integer Old_Simple_State  false
13493>>>>>>>>>        
13493>>>>>>>>>        Property String  Old_Status_Value  ''
13494>>>>>>>>>        
13494>>>>>>>>>        Set Popup_State         To TRUE
13495>>>>>>>>>        Set Attach_Parent_State To TRUE
13496>>>>>>>>>        // register status-bar with container
13496>>>>>>>>>        Delegate Set StatusBar_id To self
13498>>>>>>>>>    End_Procedure
13499>>>>>>>>>    
13499>>>>>>>>>    Procedure Set Status_Help_Value String sHelp
13501>>>>>>>>>        Integer iPart
13501>>>>>>>>>        Get Status_Help_Item To iPart
13502>>>>>>>>>        Set Value iPart to sHelp
13503>>>>>>>>>    End_Procedure
13504>>>>>>>>>    
13504>>>>>>>>>    Function Status_Help_Value Returns String
13506>>>>>>>>>        Integer iPart
13506>>>>>>>>>        String sHelp
13506>>>>>>>>>        Get Status_Help_Item To iPart
13507>>>>>>>>>        Get Value iPart To sHelp
13508>>>>>>>>>        Function_Return sHelp
13509>>>>>>>>>    End_Procedure
13510>>>>>>>>>    
13510>>>>>>>>>    Procedure Initialize_Menu
13512>>>>>>>>>        Integer iState OldState
13512>>>>>>>>>        If Not (Menu_Status_state(self)) Begin
13514>>>>>>>>>            Get Simple_State to OldState
13515>>>>>>>>>            Set Old_Simple_State to OldState
13516>>>>>>>>>            If OldState ;                Set Old_Status_Value to (Simple_Value(self))
13519>>>>>>>>>            Else ;                Set Old_Status_Value to (Status_Help_Value(self))
13521>>>>>>>>>            Set Simple_State to (Menu_Simple_State(self))
13522>>>>>>>>>            Set Menu_Status_State to TRUE
13523>>>>>>>>>        End
13523>>>>>>>>>>
13523>>>>>>>>>    End_Procedure
13524>>>>>>>>>    
13524>>>>>>>>>    Procedure Exit_Menu
13526>>>>>>>>>        Integer OldState
13526>>>>>>>>>        String OldVal
13526>>>>>>>>>        If (Menu_Status_state(self)) Begin
13528>>>>>>>>>            Get Old_Simple_State to OldState
13529>>>>>>>>>            Set Simple_State     to OldState
13530>>>>>>>>>            Get old_status_Value to oldVal
13531>>>>>>>>>            If OldState ;                Set Simple_Value to OldVal
13534>>>>>>>>>            Else ;                Set Status_Help_Value to OldVal
13536>>>>>>>>>            Set Menu_Status_State to FALSE
13537>>>>>>>>>        End
13537>>>>>>>>>>
13537>>>>>>>>>    End_Procedure
13538>>>>>>>>>    
13538>>>>>>>>>    Procedure Show_Status_Help String sHelp
13540>>>>>>>>>        Integer iState
13540>>>>>>>>>        Get Simple_State to iState
13541>>>>>>>>>        If not iState ;            Set Status_Help_Value to sHelp
13544>>>>>>>>>        Else ;            Set Simple_Value      to sHelp
13546>>>>>>>>>    End_Procedure
13547>>>>>>>>>    
13547>>>>>>>>>    Function Current_Status_Help Returns String
13549>>>>>>>>>        Integer iState
13549>>>>>>>>>        String sHelp
13549>>>>>>>>>        Get Simple_State to iState
13550>>>>>>>>>        If not iState ;            Get Status_Help_Value to sHelp
13553>>>>>>>>>        Else ;            Get Simple_Value      to sHelp
13555>>>>>>>>>        Function_Return sHelp
13556>>>>>>>>>    End_Function
13557>>>>>>>>>    
13557>>>>>>>>>    Procedure Page_Object Integer bShow
13559>>>>>>>>>        Integer hoClient
13559>>>>>>>>>        Handle hHndl
13559>>>>>>>>>        Get Window_Handle to hHndl
13560>>>>>>>>>        Forward Send Page_Object bShow
13562>>>>>>>>>        If (bShow AND hHndl=0) Begin
13564>>>>>>>>>            Delegate Get Client_Id To hoClient
13566>>>>>>>>>            If hoClient ;                Send Add_Border_Object to hoClient self amBOTTOM
13569>>>>>>>>>        End
13569>>>>>>>>>>
13569>>>>>>>>>    End_Procedure
13570>>>>>>>>>    
13570>>>>>>>>>    Procedure Deactivating
13572>>>>>>>>>        Integer hoClient
13572>>>>>>>>>        Delegate Get Client_Id To hoClient
13574>>>>>>>>>        Forward Send DeActivating
13576>>>>>>>>>        If hoClient ;            Send Remove_Border_Object to hoClient self amBOTTOM
13579>>>>>>>>>    End_Procedure
13580>>>>>>>>>    
13580>>>>>>>>>End_Class
13581>>>>>>>Use DFABtBar.pkg  // df application button bar
Including file: Dfabtbar.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfabtbar.pkg)
13581>>>>>>>>>Register_Procedure Add_Border_Object
13581>>>>>>>>>Register_Procedure Remove_Border_Object
13581>>>>>>>>>
13581>>>>>>>>>Use Windows.pkg
13581>>>>>>>>>
13581>>>>>>>>>Class AppToolBar is a BasicToolBar
13582>>>>>>>>>    
13582>>>>>>>>>    Procedure Construct_Object
13584>>>>>>>>>        Forward Send Construct_Object
13586>>>>>>>>>        Set Scope_State         to True
13587>>>>>>>>>        Set Attach_Parent_State to True
13588>>>>>>>>>        Set Popup_State         to True
13589>>>>>>>>>        Set Client_Area_State   to True
13590>>>>>>>>>        Delegate Set ToolBar_Id to Self
13592>>>>>>>>>    End_Procedure
13593>>>>>>>>>    
13593>>>>>>>>>    Procedure Page Integer bState
13595>>>>>>>>>        Integer hoClient
13595>>>>>>>>>        Handle  hWnd
13595>>>>>>>>>        Get Window_Handle to hWnd
13596>>>>>>>>>        Forward Send Page bState
13598>>>>>>>>>        If (bState=1 and hWnd=0) Begin
13600>>>>>>>>>            Delegate Get Client_Id to hoClient
13602>>>>>>>>>            If hoClient ;                Send Add_Border_Object to hoClient Self amTOP
13605>>>>>>>>>        End
13605>>>>>>>>>>
13605>>>>>>>>>    End_Procedure
13606>>>>>>>>>    
13606>>>>>>>>>    Procedure Deactivating
13608>>>>>>>>>        Integer hoClient
13608>>>>>>>>>        Forward Send DeActivating
13610>>>>>>>>>        Delegate Get Client_Id to hoClient
13612>>>>>>>>>        If hoClient Begin
13614>>>>>>>>>            Send Remove_Border_Object to hoClient Self amTOP
13615>>>>>>>>>        End
13615>>>>>>>>>>
13615>>>>>>>>>    End_Procedure
13616>>>>>>>>>    
13616>>>>>>>>>    Procedure Set GuiSize Integer cy Integer cx
13618>>>>>>>>>        Forward Set GuiSize to cy cx
13620>>>>>>>>>    End_Procedure
13621>>>>>>>>>    
13621>>>>>>>>>    // Container_Handle:
13621>>>>>>>>>    // JvH: - This function was put in to allow support for combo-form & other
13621>>>>>>>>>    // controls in the toolbar.
13621>>>>>>>>>    Function Container_Handle Returns Handle
13623>>>>>>>>>        Function_Return (window_handle(Self))
13624>>>>>>>>>    End_Function
13625>>>>>>>>>End_Class
13626>>>>>>>>>
13626>>>>>>>Use DFAClnt.pkg   // df application Client
Including file: Dfaclnt.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfaclnt.pkg)
13626>>>>>>>>>Use Windows.pkg
13626>>>>>>>>>Use Set.pkg
Including file: set.pkg    (C:\Program Files\DataFlex 24.0\Pkg\set.pkg)
13626>>>>>>>>>>>Use VDFBase.pkg
13626>>>>>>>>>>>
13626>>>>>>>>>>>Class Set is an ARRAY
13627>>>>>>>>>>>    
13627>>>>>>>>>>>    Function Find_Element String ElemStr Returns Integer
13629>>>>>>>>>>>        Integer ndx retVal ArrMax
13629>>>>>>>>>>>        String ArrVal
13629>>>>>>>>>>>        Get item_count to ArrMax
13630>>>>>>>>>>>        Move -1 to retVal
13631>>>>>>>>>>>        Move 0 to ndx
13632>>>>>>>>>>>        While (ndx < ArrMax and retVal = -1)
13636>>>>>>>>>>>            Get array_value  ndx to ArrVal
13637>>>>>>>>>>>            If (ArrVal = ElemStr) ;                Move ndx to retVal
13640>>>>>>>>>>>            Move (ndx + 1) to ndx
13641>>>>>>>>>>>        loop
13642>>>>>>>>>>>>
13642>>>>>>>>>>>        Function_Return retVal
13643>>>>>>>>>>>    End_Function
13644>>>>>>>>>>>    
13644>>>>>>>>>>>    Procedure Add_Element String Elem_Str Returns Integer
13646>>>>>>>>>>>        Integer Ret_Val
13646>>>>>>>>>>>        
13646>>>>>>>>>>>        Get Find_Element Elem_Str to Ret_Val
13647>>>>>>>>>>>        
13647>>>>>>>>>>>        If (Ret_Val < 0) ;            Get Item_Count to Ret_Val
13650>>>>>>>>>>>        
13650>>>>>>>>>>>        Set Array_Value  Ret_Val to Elem_Str
13651>>>>>>>>>>>        
13651>>>>>>>>>>>        Procedure_Return Ret_Val
13652>>>>>>>>>>>    End_Procedure
13653>>>>>>>>>>>    
13653>>>>>>>>>>>    Procedure Remove_Element String sElement
13655>>>>>>>>>>>        Integer iIndex
13655>>>>>>>>>>>        Get Find_Element sElement to iIndex
13656>>>>>>>>>>>        If (iIndex > -1) ;            Send delete_item iIndex
13659>>>>>>>>>>>    End_Procedure
13660>>>>>>>>>>>    
13660>>>>>>>>>>>    
13660>>>>>>>>>>>End_Class
13661>>>>>>>>>>>
13661>>>>>>>>>>>//
13661>>>>>>>>>>>// global function to create set instances at random
13661>>>>>>>>>>>//
13661>>>>>>>>>>>Function make_set for cDesktop Returns Integer
13663>>>>>>>>>>>    Integer retval
13663>>>>>>>>>>>    Object SetTemplate is a Set
13665>>>>>>>>>>>        Move Self to retval
13666>>>>>>>>>>>    End_Object
13667>>>>>>>>>>>    Function_Return retval
13668>>>>>>>>>>>End_Function
13669>>>>>>>>>>>
13669>>>>>>>>>>>
13669>>>>>>>>>>>
13669>>>>>>>>>Use Dfpanel.pkg
13669>>>>>>>>>
13669>>>>>>>>>Class AppClientArea is a MdiClientArea
13670>>>>>>>>>    
13670>>>>>>>>>    Procedure Construct_Object
13672>>>>>>>>>        Forward Send Construct_Object
13674>>>>>>>>>        
13674>>>>>>>>>        Property Integer Auto_Arrange_Icons_State True
13675>>>>>>>>>        
13675>>>>>>>>>        Property Integer Private.Client_Scrollbar_State   True
13676>>>>>>>>>        
13676>>>>>>>>>        Delegate Set Client_Id to Self
13678>>>>>>>>>        // keep track of all child dialog objects (views)
13678>>>>>>>>>        
13678>>>>>>>>>        Object Mdi_Dialogs is a Set
13680>>>>>>>>>        End_Object
13681>>>>>>>>>        
13681>>>>>>>>>        Property Integer Private.Last_Dialog_Item -1
13682>>>>>>>>>    End_Procedure
13683>>>>>>>>>    
13683>>>>>>>>>    Procedure Set Client_Scrollbar_State Integer bState
13685>>>>>>>>>        Set Scroll_bar_Visible_State to bState
13686>>>>>>>>>        Set Private.Client_Scrollbar_State to bState
13687>>>>>>>>>    End_Procedure
13688>>>>>>>>>    
13688>>>>>>>>>    Function Client_Scrollbar_State Returns Integer
13690>>>>>>>>>        Function_Return (Private.Client_Scrollbar_State(Self))
13691>>>>>>>>>    End_Function
13692>>>>>>>>>    
13692>>>>>>>>>    Procedure Add_Mdi_Dialog Integer Id#
13694>>>>>>>>>        Send Add_element to (mdi_dialogs(Self)) Id#
13695>>>>>>>>>    End_Procedure
13696>>>>>>>>>    
13696>>>>>>>>>    Procedure Remove_Mdi_Dialog Integer Id#
13698>>>>>>>>>        Integer obj#
13698>>>>>>>>>        Move (mdi_dialogs(Self)) to Obj#
13699>>>>>>>>>        If Obj# ;            Send Remove_element to (mdi_dialogs(Obj#)) Id#
13702>>>>>>>>>    End_Procedure
13703>>>>>>>>>    
13703>>>>>>>>>    Function Next_Mdi_Dialog Integer FindFirst Returns Integer
13705>>>>>>>>>        Integer Id# Item# Obj#
13705>>>>>>>>>        Get Private.Last_dialog_item to Item#
13706>>>>>>>>>        If FindFirst ;            Move -1 to Item#
13709>>>>>>>>>        Increment Item#
13710>>>>>>>>>        Set Private.Last_dialog_item to Item#
13711>>>>>>>>>        Move (Mdi_dialogs(Self)) to Obj#
13712>>>>>>>>>        If (Item_count(Obj#)>Item#) ;            Get Value of Obj# Item# to Id#
13715>>>>>>>>>        Function_Return Id#
13716>>>>>>>>>    End_Function
13717>>>>>>>>>    
13717>>>>>>>>>    Procedure Set GuiSize Integer cy Integer cx
13719>>>>>>>>>        Forward Set GuiSize to cy cx
13721>>>>>>>>>        If (active_state(Self) and Auto_Arrange_Icons_State(Self)) ;            Send Arrange_icons
13724>>>>>>>>>    End_Procedure
13725>>>>>>>>>    
13725>>>>>>>>>    Procedure Private.Adjust_MDI_Margins Integer cy Integer cx Integer BorderFlag
13727>>>>>>>>>        Integer cMargin
13727>>>>>>>>>        If (BorderFlag = amTOP) Begin
13729>>>>>>>>>            Get mdi_top_margin to cMargin
13730>>>>>>>>>            Set mdi_top_margin to (cMargin + cy)
13731>>>>>>>>>        End
13731>>>>>>>>>>
13731>>>>>>>>>        Else If (BorderFlag = amBOTTOM) Begin
13734>>>>>>>>>            Get mdi_bottom_margin to cMargin
13735>>>>>>>>>            Set mdi_bottom_margin to (cMargin + cy)
13736>>>>>>>>>        End
13736>>>>>>>>>>
13736>>>>>>>>>        Else If (BorderFlag = amLEFT) Begin
13739>>>>>>>>>            Get mdi_left_margin to cMargin
13740>>>>>>>>>            Set mdi_left_margin to (cMargin + cx)
13741>>>>>>>>>        End
13741>>>>>>>>>>
13741>>>>>>>>>        Else If (BorderFlag = amRIGHT) Begin
13744>>>>>>>>>            Get mdi_right_margin to cMargin
13745>>>>>>>>>            Set mdi_right_margin to (cMargin + cx)
13746>>>>>>>>>        End
13746>>>>>>>>>>
13746>>>>>>>>>    End_Procedure
13747>>>>>>>>>    
13747>>>>>>>>>    Procedure Add_Border_Object Integer hoBorder Integer BorderFlag
13749>>>>>>>>>        Integer cy cx
13749>>>>>>>>>        Move (hi(GuiSize(hoBorder)))  to cy
13750>>>>>>>>>        Move (low(GuiSize(hoBorder))) to cx
13751>>>>>>>>>        
13751>>>>>>>>>        Send Private.Adjust_MDI_Margins cy cx BorderFlag
13752>>>>>>>>>    End_Procedure
13753>>>>>>>>>    
13753>>>>>>>>>    Procedure Remove_Border_Object Integer hoBorder Integer BorderFlag
13755>>>>>>>>>        Integer cy cx
13755>>>>>>>>>        Move (-(hi(GuiSize(hoBorder))))  to cy
13756>>>>>>>>>        Move (-(low(GuiSize(hoBorder)))) to cx
13757>>>>>>>>>        
13757>>>>>>>>>        Send Private.Adjust_MDI_Margins cy cx BorderFlag
13758>>>>>>>>>    End_Procedure
13759>>>>>>>>>    
13759>>>>>>>>>    //
13759>>>>>>>>>    // default behavior of mdi client is to passively pass these
13759>>>>>>>>>    // message on to their mdi dialogs (views)
13759>>>>>>>>>    //
13759>>>>>>>>>    Function Verify_Exit_Application Returns Integer
13761>>>>>>>>>        Integer rVal Id#
13761>>>>>>>>>        Get Next_Mdi_Dialog True to Id#
13762>>>>>>>>>        While (Id# and Rval=0)
13766>>>>>>>>>            Get Verify_Exit_application of Id# to rVal
13767>>>>>>>>>            If not rval ;                Get Next_Mdi_Dialog False to Id#
13770>>>>>>>>>        End
13771>>>>>>>>>>
13771>>>>>>>>>        Function_Return rval
13772>>>>>>>>>    End_Function
13773>>>>>>>>>    
13773>>>>>>>>>    Procedure Notify_Exit_Application
13775>>>>>>>>>        Integer Id#
13775>>>>>>>>>        Get Next_Mdi_Dialog True to Id#
13776>>>>>>>>>        While Id#
13780>>>>>>>>>            Send Notify_Exit_Application to Id#
13781>>>>>>>>>            Get Next_Mdi_Dialog False to Id#
13782>>>>>>>>>        End
13783>>>>>>>>>>
13783>>>>>>>>>    End_Procedure
13784>>>>>>>>>    
13784>>>>>>>>>    Procedure Make_all_ViewMode Integer Mode
13786>>>>>>>>>        Integer Id#
13786>>>>>>>>>        Get Next_Mdi_Dialog True to Id#
13787>>>>>>>>>        While Id#
13791>>>>>>>>>            If (active_State(Id#)) ;                Set View_Mode of Id# to Mode
13794>>>>>>>>>            Get Next_Mdi_Dialog False to Id#
13795>>>>>>>>>        End
13796>>>>>>>>>>
13796>>>>>>>>>    End_Procedure
13797>>>>>>>>>    
13797>>>>>>>>>    Procedure Minimize_all_Windows
13799>>>>>>>>>        Send Make_All_ViewMode VIEWMODE_ICONIZE
13800>>>>>>>>>    End_Procedure
13801>>>>>>>>>    
13801>>>>>>>>>    Procedure Restore_all_Windows
13803>>>>>>>>>        Send Make_All_ViewMode VIEWMODE_NORMAL
13804>>>>>>>>>    End_Procedure
13805>>>>>>>>>    
13805>>>>>>>>>    // The framework has used activate_about for years to activate an about
13805>>>>>>>>>    // dialog. As of 12.1, we have a sub-class for this and providing the
13805>>>>>>>>>    // required message makes things work better. It is expected that a
13805>>>>>>>>>    // developer will augment this in their clientarea to call the about
13805>>>>>>>>>    // object that they created.
13805>>>>>>>>>    Procedure Activate_About
13807>>>>>>>>>    End_Procedure
13808>>>>>>>>>    
13808>>>>>>>>>    
13808>>>>>>>>>End_Class
13809>>>>>>>Use DFADlg.pkg    // df application Dialog
Including file: Dfadlg.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfadlg.pkg)
13809>>>>>>>>>Use LanguageText.pkg
13809>>>>>>>>>Use Windows.pkg
13809>>>>>>>>>Use dfConfrm.pkg
Including file: Dfconfrm.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfconfrm.pkg)
13809>>>>>>>>>>>Use LanguageText.pkg
13809>>>>>>>>>>>Use msgbox.pkg
13809>>>>>>>>>>>
13809>>>>>>>>>>>// General purpose confirm function. Added to all classes
13809>>>>>>>>>>>//
13809>>>>>>>>>>>Function Confirm for cUIObject String item_name Returns Integer
13811>>>>>>>>>>>    Integer rval
13811>>>>>>>>>>>    Move (YesNo_Box(item_name, C_$Confirm, MB_DEFBUTTON1 )) to rval
13812>>>>>>>>>>>    Function_Return (rval<>MBR_YES)
13813>>>>>>>>>>>End_function
13814>>>>>>>>>>>
13814>>>>>>>>>>>Function Save_Confirmation for cUIObject Returns integer
13816>>>>>>>>>>>    Function_return (confirm(self, C_$SaveThisRecord))
13817>>>>>>>>>>>End_function
13818>>>>>>>>>>>
13818>>>>>>>>>>>Function Delete_Confirmation for cUIObject Returns integer
13820>>>>>>>>>>>    Function_return (confirm(self, C_$DeleteThisRecord))
13821>>>>>>>>>>>End_function
13822>>>>>>>>>>>
13822>>>>>>>>>>>Function Line_Save_Confirmation for cUIObject Returns Integer
13824>>>>>>>>>>>    Function_return (confirm(self, C_$SaveThisLine))
13825>>>>>>>>>>>End_function
13826>>>>>>>>>>>
13826>>>>>>>>>>>Function Line_Delete_Confirmation for cUIObject Returns Integer
13828>>>>>>>>>>>    Function_return (confirm(self, C_$DeleteThisLine))
13829>>>>>>>>>>>End_function
13830>>>>>>>>>>>
13830>>>>>>>>>>>Function Data_Loss_Confirmation for cUIObject Returns integer
13832>>>>>>>>>>>    Function_return (confirm(self, C_$AbandonChanges))
13833>>>>>>>>>>>End_function
13834>>>>>>>>>>>
13834>>>>>>>>>>>Function Exit_Loss_Confirmation for cUIObject Returns integer
13836>>>>>>>>>>>    Integer tmp
13836>>>>>>>>>>>    get Should_save_recursive to tmp
13837>>>>>>>>>>>    If (tmp <> 0) ;        Function_Return (confirm(Self, C_$ChangesExistAbandon))
13840>>>>>>>>>>>End_function
13841>>>>>>>>>>>
13841>>>>>>>>>>>Function No_Confirmation for cUIObject Returns integer
13843>>>>>>>>>>>End_function
13844>>>>>>>>>>>
13844>>>>>>>>>>>Function Should_Save for cUIObject returns integer
13846>>>>>>>>>>>end_function
13847>>>>>>>>>>>
13847>>>>>>>>>>>Function Should_Save_Recursive for cUIObject returns integer
13849>>>>>>>>>>>    Integer rVal
13849>>>>>>>>>>>    Get Should_Save to Rval // changes in this object???
13850>>>>>>>>>>>    If (rVal = 0) ;        Broadcast Get Should_Save_Recursive to Rval // check w/ kids
13854>>>>>>>>>>>    Function_return rVal
13855>>>>>>>>>>>End_Function
13856>>>>>>>>>>>
13856>>>>>>>>>>>
13856>>>>>>>>>Use GlobalFunctionsProcedures.pkg
13856>>>>>>>>>Use tWinStructs.pkg
13856>>>>>>>>>Use Dfpanel.pkg
13856>>>>>>>>>
13856>>>>>>>>>
13856>>>>>>>>>// as of 15.0, moved some of dbViews features up to this level. Load/Save Environment showing view name
13856>>>>>>>>>Class AppDialog is a MdiDialog
13857>>>>>>>>>    
13857>>>>>>>>>    Procedure Construct_Object
13859>>>>>>>>>        Forward Send Construct_Object
13861>>>>>>>>>        
13861>>>>>>>>>        // This can be used to stop this view from loading and saving its environment.
13861>>>>>>>>>        Property Boolean pbDisableSaveEnvironment False
13862>>>>>>>>>        
13862>>>>>>>>>        // set true to auto-activate the view. This does not work if the object is deferred.
13862>>>>>>>>>        // this is a design time property which is applied during end_construct_object. This should
13862>>>>>>>>>        Property Boolean pbAutoActivate False
13863>>>>>>>>>        
13863>>>>>>>>>        // used to keep track of window placment when deactivated object is reactivated.
13863>>>>>>>>>        Property tWinWindowPlacement pWindowPlacement
13864>>>>>>>>>    End_Procedure
13865>>>>>>>>>    
13865>>>>>>>>>    Procedure End_Construct_Object
13867>>>>>>>>>        Boolean bAutoActivate
13867>>>>>>>>>        Delegate Send Add_Mdi_Dialog Self
13869>>>>>>>>>        Forward Send End_Construct_Object
13871>>>>>>>>>        // if auto-activate, add this to he the panel's array of objects to be acivated.
13871>>>>>>>>>        Get pbAutoActivate to bAutoActivate
13872>>>>>>>>>        If bAutoActivate Begin
13874>>>>>>>>>            Delegate Send AddAutoActivateView Self
13876>>>>>>>>>        End
13876>>>>>>>>>>
13876>>>>>>>>>    End_Procedure
13877>>>>>>>>>    
13877>>>>>>>>>    Procedure Destroy_Object
13879>>>>>>>>>        Integer obj
13879>>>>>>>>>        Move Self to obj
13880>>>>>>>>>        Delegate Send Remove_Mdi_Dialog obj
13882>>>>>>>>>        Forward Send Destroy_Object
13884>>>>>>>>>    End_Procedure
13885>>>>>>>>>    
13885>>>>>>>>>    // Augmented to save view position
13885>>>>>>>>>    Procedure Notify_Exit_Application
13887>>>>>>>>>        Send Save_Environment
13888>>>>>>>>>    End_Procedure
13889>>>>>>>>>    
13889>>>>>>>>>    Function View_Changed Returns Integer
13891>>>>>>>>>    End_Function
13892>>>>>>>>>    
13892>>>>>>>>>    //
13892>>>>>>>>>    // Augment exit_application_check to see if view is changed. If changed,
13892>>>>>>>>>    // display exit message as required
13892>>>>>>>>>    
13892>>>>>>>>>    Function Verify_Exit_Application Returns Integer
13894>>>>>>>>>        Integer Fail
13894>>>>>>>>>        Get View_Changed to Fail // Ask for changes in Data-sets
13895>>>>>>>>>        If fail ; // ok a change exist...activate changed view.            Get confirm (SFormat(C_$ChangesExistExit, Label(Self)) ) to fail
13898>>>>>>>>>        Function_Return fail
13899>>>>>>>>>    End_Function
13900>>>>>>>>>    
13900>>>>>>>>>    // Activates the view. If view is minimized it restores it first
13900>>>>>>>>>    // works with both popup_state T and F
13900>>>>>>>>>    
13900>>>>>>>>>    Procedure Activate_View Returns Integer
13902>>>>>>>>>        Integer rVal
13902>>>>>>>>>        If ( View_mode(Self)=VIEWMODE_ICONIZE ) ;            Set view_mode to viewmode_normal
13905>>>>>>>>>        If (Popup_state(Self)) ;    // support both popup and            Get Msg_Popup to rVal
13908>>>>>>>>>        Else ;            Get Msg_Activate to rVal
13910>>>>>>>>>        Procedure_Return rVal
13911>>>>>>>>>    End_Procedure
13912>>>>>>>>>    
13912>>>>>>>>>    
13912>>>>>>>>>    // augmented to load last view position
13912>>>>>>>>>    
13912>>>>>>>>>    Procedure Add_Focus Integer hoBase Returns Integer
13914>>>>>>>>>        Integer iRetVal bState
13914>>>>>>>>>        Get Visible_State to bState
13915>>>>>>>>>        Set Visible_State to False
13916>>>>>>>>>        Forward Get Msg_Add_Focus hoBase to iRetVal
13918>>>>>>>>>        If (iRetVal=0) Begin
13920>>>>>>>>>            Send Load_Environment
13921>>>>>>>>>        End
13921>>>>>>>>>>
13921>>>>>>>>>        Set Visible_State to bState
13922>>>>>>>>>        Procedure_Return iRetVal
13923>>>>>>>>>    End_Procedure
13924>>>>>>>>>    
13924>>>>>>>>>    // This is augmented to send save_environment during a view close (was in close_panel)
13924>>>>>>>>>    // we set view_mode to normal if it is zoomed. This is needed to make the MDI stuff work
13924>>>>>>>>>    // properly with the save/load environment. The Saved environment data will make it zoom if needed.
13924>>>>>>>>>    //
13924>>>>>>>>>    Procedure Deactivate Integer eDeactivateScope Returns Integer
13926>>>>>>>>>        Integer eArea iFail
13926>>>>>>>>>        Boolean bPreserveEnvironment
13926>>>>>>>>>        Move (If(num_arguments=0, Area_Type, eDeactivateScope)) to eArea // in case no param is passed
13927>>>>>>>>>        If (eArea<>0) Begin
13929>>>>>>>>>            Forward Get msg_deactivate eArea to iFail
13931>>>>>>>>>        End
13931>>>>>>>>>>
13931>>>>>>>>>        Else Begin
13932>>>>>>>>>            Send Save_Environment
13933>>>>>>>>>            Forward Get msg_deactivate eArea to iFail
13935>>>>>>>>>            
13935>>>>>>>>>            // this works around a problem where maximized MDI views get saved but don't come back
13935>>>>>>>>>            // correctly when loaded again without exiting. It turns out the the MDI client restores
13935>>>>>>>>>            // the view sometimes without telling view_mode. If view_mode is normal, it always works.
13935>>>>>>>>>            // This must happen after the view is deactivated!
13935>>>>>>>>>            
13935>>>>>>>>>            If ghoApplication Begin
13937>>>>>>>>>                Get pbPreserveEnvironment of ghoApplication to bPreserveEnvironment
13938>>>>>>>>>            End
13938>>>>>>>>>>
13938>>>>>>>>>            // do these checks to have as small of an effect as possible.
13938>>>>>>>>>            If (bPreserveEnvironment and iFail=0 and view_mode(Self)=Viewmode_Zoom) Begin
13940>>>>>>>>>                Set View_Mode to Viewmode_Normal
13941>>>>>>>>>            End
13941>>>>>>>>>>
13941>>>>>>>>>        End
13941>>>>>>>>>>
13941>>>>>>>>>        Procedure_Return iFail
13942>>>>>>>>>    End_Procedure
13943>>>>>>>>>    
13943>>>>>>>>>    // Save the window placement information for this to the application object
13943>>>>>>>>>    
13943>>>>>>>>>    Procedure Save_Environment
13945>>>>>>>>>        tWinWindowPlacement WindowPlacement
13945>>>>>>>>>        tWinWindowPlacement WindowPlacement
13945>>>>>>>>>        Boolean bSuccess bCancel
13945>>>>>>>>>        Get pbDisableSaveEnvironment to bCancel
13946>>>>>>>>>        If not bCancel Begin
13948>>>>>>>>>            
13948>>>>>>>>>            // save environment to the object, in case it is reactivated during the same run.
13948>>>>>>>>>            Move (SizeOfType(tWinWindowPlacement)) to WindowPlacement.length
13949>>>>>>>>>            Move (GetWindowPlacement(Window_Handle(Self), addressof(WindowPlacement))) to bSuccess
13950>>>>>>>>>            If bSuccess Begin
13952>>>>>>>>>                // if minimized, assume restored, as we don't want to restart minimized!
13952>>>>>>>>>                If (WindowPlacement.showCmd = SW_SHOWMINIMIZED) Begin
13954>>>>>>>>>                    Move SW_SHOWNORMAL to WindowPlacement.showCmd
13955>>>>>>>>>                End
13955>>>>>>>>>>
13955>>>>>>>>>                Set pWindowPlacement to WindowPlacement
13956>>>>>>>>>            End
13956>>>>>>>>>>
13956>>>>>>>>>            // also save environment to the application object, so it can be used when reloaded
13956>>>>>>>>>            If ghoApplication ;                Send DoSaveEnvironment of ghoApplication Self False
13959>>>>>>>>>        End
13959>>>>>>>>>>
13959>>>>>>>>>    End_Procedure
13960>>>>>>>>>    
13960>>>>>>>>>    // Load the window placement information for this from the application object
13960>>>>>>>>>    
13960>>>>>>>>>    Procedure Load_Environment
13962>>>>>>>>>        tWinWindowPlacement WindowPlacement
13962>>>>>>>>>        tWinWindowPlacement WindowPlacement
13962>>>>>>>>>        Boolean bSuccess bCancel
13962>>>>>>>>>        Get pbDisableSaveEnvironment to bCancel
13963>>>>>>>>>        If not bCancel Begin
13965>>>>>>>>>            // if view has alrady been activated and deactivated use the setting from windowplacement saved in the object
13965>>>>>>>>>            Get pWindowPlacement to WindowPlacement
13966>>>>>>>>>            //  if length is zero, assume it has never been used before (never deactivated).
13966>>>>>>>>>            If (WindowPlacement.length>0) Begin
13968>>>>>>>>>                Move (SetWindowPlacement(Window_Handle(Self), AddressOf(WindowPlacement))) to bSuccess
13969>>>>>>>>>            End
13969>>>>>>>>>>
13969>>>>>>>>>            Else Begin
13970>>>>>>>>>                If ghoApplication ;                    Send DoLoadEnvironment of ghoApplication Self False
13973>>>>>>>>>            End
13973>>>>>>>>>>
13973>>>>>>>>>        End
13973>>>>>>>>>>
13973>>>>>>>>>    End_Procedure
13974>>>>>>>>>    
13974>>>>>>>>>    Procedure Entering_Scope Returns Integer
13976>>>>>>>>>        Integer rVal
13976>>>>>>>>>        Forward Get MSG_Entering_Scope to rVal
13978>>>>>>>>>        If not rVal ;            Send Show_View_Name (Label(Self))
13981>>>>>>>>>    End_Procedure
13982>>>>>>>>>    
13982>>>>>>>>>    Procedure Exiting_Scope Integer whereto Returns Integer
13984>>>>>>>>>        Integer rVal
13984>>>>>>>>>        Forward Get MSG_Exiting_Scope whereto to rVal
13986>>>>>>>>>        If not rVal ;            Send Show_View_Name ''
13989>>>>>>>>>    End_Procedure
13990>>>>>>>>>    
13990>>>>>>>>>    Procedure Show_view_Name String sHelp
13992>>>>>>>>>        Integer rVal Id
13992>>>>>>>>>        Get Statusbar_id to id
13993>>>>>>>>>        If Id ;            Send Show_View_Name to Id sHelp
13996>>>>>>>>>    End_Procedure
13997>>>>>>>>>    
13997>>>>>>>>>    // force object to be modal and then pop it up. Upon complettion restore it to a normal view
13997>>>>>>>>>    Procedure Popup_Modal Returns Integer
13999>>>>>>>>>        
13999>>>>>>>>>        Integer OldBMS OldAPS OldPS OldRS OldSS OldMDIState
13999>>>>>>>>>        Integer OldLoc OldAutoLoc OldKeyPath OldDisableSaveEnv OldMin OldMax
13999>>>>>>>>>        Integer rVal
13999>>>>>>>>>        
13999>>>>>>>>>        // If object is active we can't do anything. -1 means already active
13999>>>>>>>>>        If (Active_State(Self)) ;            Procedure_Return -1
14002>>>>>>>>>        
14002>>>>>>>>>        // Remember all important modal property settings.
14002>>>>>>>>>        Get Block_mouse_State to OldBMS
14003>>>>>>>>>        Get Attach_parent_State to OldAPS
14004>>>>>>>>>        Get Popup_State to OldPS
14005>>>>>>>>>        Get Ring_State to OldRS
14006>>>>>>>>>        Get Scope_State to OldSS
14007>>>>>>>>>        Get MDI_State to OldMDIState
14008>>>>>>>>>        Get Key_Path to OldKeyPath
14009>>>>>>>>>        Get Location to OldLoc
14010>>>>>>>>>        Get Maximize_Icon to OldMax
14011>>>>>>>>>        Get Minimize_Icon to OldMin
14012>>>>>>>>>        Get Auto_Locate_State to OldAutoLoc
14013>>>>>>>>>        Get pbDisableSaveEnvironment to OldDisableSaveEnv
14014>>>>>>>>>        
14014>>>>>>>>>        // set propertie required to make this a modal dialog
14014>>>>>>>>>        Set pbDisableSaveEnvironment to True
14015>>>>>>>>>        Set MDI_State to False
14016>>>>>>>>>        Set Auto_Locate_State to True
14017>>>>>>>>>        Set Key_path to Desktop
14018>>>>>>>>>        Set Block_mouse_state to True
14019>>>>>>>>>        Set Attach_parent_state to False
14020>>>>>>>>>        // we used to set Exit_Application_Local_State to True - as of 19.1 we don't
14020>>>>>>>>>        Set Popup_State to True
14021>>>>>>>>>        Set Ring_State to True
14022>>>>>>>>>        Set Scope_State to True
14023>>>>>>>>>        Set Minimize_Icon to False
14024>>>>>>>>>        Set Maximize_Icon to False
14025>>>>>>>>>        
14025>>>>>>>>>        Get Msg_Popup to rVal
14026>>>>>>>>>        If rval ;            Move -2 to rVal      // did not activate
14029>>>>>>>>>        Else ;            Move StrMark to rVal // StrMark keeps track of UI value
14031>>>>>>>>>        // if 0- a stop_ui, if >0, ret value
14031>>>>>>>>>        // restore all expected properties
14031>>>>>>>>>        Set Auto_Locate_State to OldAutoLoc
14032>>>>>>>>>        Set Location to (hi(OldLoc)) (Low(OldLoc))
14033>>>>>>>>>        Set pbDisableSaveEnvironment to OldDisableSaveEnv
14034>>>>>>>>>        Set MDI_State to OldMDIState
14035>>>>>>>>>        Set Maximize_Icon to OldMax
14036>>>>>>>>>        Set Minimize_Icon to OldMin
14037>>>>>>>>>        Set Block_mouse_State   to OldBMS
14038>>>>>>>>>        Set Attach_parent_State to OldAPS
14039>>>>>>>>>        Set Popup_State         to OldPS
14040>>>>>>>>>        Set Ring_State          to OldRS
14041>>>>>>>>>        Set Scope_State         to OldSS
14042>>>>>>>>>        Procedure_Return rVal
14043>>>>>>>>>        
14043>>>>>>>>>    End_Procedure
14044>>>>>>>>>    
14044>>>>>>>>>End_Class
14045>>>>>>>>>
14045>>>>>>>>>// logically this is required
14045>>>>>>>>>//{ DesignerClass=cDTView }
14045>>>>>>>>>Class View is an AppDialog
14046>>>>>>>>>End_Class
14047>>>>>>>>>
14047>>>>>>>
14047>>>>>>>
14047>>>>>>>Register_Function pbPreserveEnvironment Returns Boolean
14047>>>>>>>Register_Procedure Set phoMainPanel Handle hoMain
14047>>>>>>>Register_Procedure DoSaveEnvironment Handle hoContainer Boolean bProgram
14047>>>>>>>Register_Procedure DoLoadEnvironment Handle hoContainer Boolean bProgram
14047>>>>>>>Register_Procedure Set pbVisible Boolean bVisible
14047>>>>>>>Register_Function  pbVisible Returns Boolean
14047>>>>>>>
14047>>>>>>>
14047>>>>>>>
14047>>>>>>>Class AppPanel is a BasicPanel
14048>>>>>>>    //
14048>>>>>>>    //  Panel defaults. Use windows MDI color
14048>>>>>>>    //
14048>>>>>>>    //
14048>>>>>>>    Procedure Construct_Object
14050>>>>>>>        Forward Send Construct_Object
14052>>>>>>>        
14052>>>>>>>        Property Integer Auto_Activate_State True
14053>>>>>>>        
14053>>>>>>>        // Support status for toolbar and status bar. For now we support
14053>>>>>>>        // 0=Hide, 1=Show,
14053>>>>>>>        //
14053>>>>>>>        Property Integer Private.ToolBar_State  1
14054>>>>>>>        
14054>>>>>>>        Property Integer Private.StatusBar_State  1
14055>>>>>>>        
14055>>>>>>>        Property Handle[] phoAutoActivateViews
14056>>>>>>>        
14056>>>>>>>        Set Scope_State to True
14057>>>>>>>        Set Mdi_State to True
14058>>>>>>>        
14058>>>>>>>        Set Size to 274 479
14059>>>>>>>        Set pbSizeToClientArea  to False
14060>>>>>>>    End_Procedure
14061>>>>>>>    
14061>>>>>>>    Procedure Set Auto_Arrange_Icons_State Integer bState
14063>>>>>>>        Integer hoClient
14063>>>>>>>        Get Client_id to hoClient
14064>>>>>>>        If (hoClient and hoClient<>Self ) ;            Set Auto_Arrange_Icons_State of hoClient to bState
14067>>>>>>>    End_Procedure
14068>>>>>>>    
14068>>>>>>>    Function Auto_Arrange_Icons_State Returns Integer
14070>>>>>>>        Integer hoClient bState
14070>>>>>>>        Get Client_id to hoClient
14071>>>>>>>        If (hoClient and hoClient<>Self ) ;            Get Auto_Arrange_Icons_State of hoClient to bState
14074>>>>>>>        Function_Return bState
14075>>>>>>>    End_Function
14076>>>>>>>    
14076>>>>>>>    Procedure Toggle_Auto_Arrange_Icons
14078>>>>>>>        Set Auto_Arrange_Icons_State ;            to (not(Auto_Arrange_Icons_State(Self)))
14079>>>>>>>    End_Procedure
14080>>>>>>>    
14080>>>>>>>    Procedure Set Client_Scrollbar_State Integer bState
14082>>>>>>>        Integer hoClient
14082>>>>>>>        Get Client_id to hoClient
14083>>>>>>>        If (hoClient and hoClient<>Self ) ;            Set Client_Scrollbar_State of hoClient to bState
14086>>>>>>>    End_Procedure
14087>>>>>>>    
14087>>>>>>>    Function Client_Scrollbar_State Returns Integer
14089>>>>>>>        Integer hoClient bState
14089>>>>>>>        Get Client_id to hoClient
14090>>>>>>>        If (hoClient and hoClient<>Self ) ;            Get Client_Scrollbar_State of hoClient to bState
14093>>>>>>>        Function_Return bState
14094>>>>>>>    End_Function
14095>>>>>>>    
14095>>>>>>>    Procedure Toggle_Client_Scrollbar_State
14097>>>>>>>        Set Client_Scrollbar_State ;            to (not(Client_Scrollbar_State(Self)))
14098>>>>>>>    End_Procedure
14099>>>>>>>    
14099>>>>>>>    Function ToolBar_State Returns Integer
14101>>>>>>>        Function_Return (private.Toolbar_State(Self))
14102>>>>>>>    End_Function
14103>>>>>>>    
14103>>>>>>>    Procedure Set Toolbar_State Integer bState
14105>>>>>>>        Integer hoToolBar
14105>>>>>>>        Handle hoCommandBars
14105>>>>>>>        If (bState<>toolbar_State(Self)) Begin
14107>>>>>>>            Set private.toolbar_State to bState
14108>>>>>>>            
14108>>>>>>>            Get phoCommandBars to hoCommandbars
14109>>>>>>>            If hoCommandbars ;                Procedure_Return
14112>>>>>>>            
14112>>>>>>>            If (Window_Handle(Self)) Begin
14114>>>>>>>                Get toolBar_ID to hoToolBar
14115>>>>>>>                If hoToolBar ;                    Send Activate_Component hoToolBar bState (Focus_Mode(hoToolbar))
14118>>>>>>>            End
14118>>>>>>>>
14118>>>>>>>        End
14118>>>>>>>>
14118>>>>>>>    End_Procedure
14119>>>>>>>    
14119>>>>>>>    Procedure Toggle_Toolbar
14121>>>>>>>        Set Toolbar_State to (not(Toolbar_State(Self)))
14122>>>>>>>    End_Procedure
14123>>>>>>>    
14123>>>>>>>    Function StatusBar_State Returns Integer
14125>>>>>>>        Handle hoCommandBars hoStatusBar
14125>>>>>>>        Boolean bState
14125>>>>>>>        Get phoCommandBars to hoCommandbars
14126>>>>>>>        If hoCommandbars Begin
14128>>>>>>>            Get Statusbar_ID to hoStatusBar
14129>>>>>>>            If hoStatusBar Begin
14131>>>>>>>                Get pbVisible of hoStatusBar to bState
14132>>>>>>>            End
14132>>>>>>>>
14132>>>>>>>        End
14132>>>>>>>>
14132>>>>>>>        Else Begin
14133>>>>>>>            Get private.Statusbar_state to bState
14134>>>>>>>        End
14134>>>>>>>>
14134>>>>>>>        Function_Return bState
14135>>>>>>>    End_Function
14136>>>>>>>    
14136>>>>>>>    Procedure Set Statusbar_State Integer bState
14138>>>>>>>        Handle hoStatusBar hoCommandBars
14138>>>>>>>        If (bState<>Statusbar_State(Self)) Begin
14140>>>>>>>            Set private.Statusbar_State to bState
14141>>>>>>>            Get Statusbar_ID to hoStatusBar
14142>>>>>>>            
14142>>>>>>>            Get phoCommandBars to hoCommandbars
14143>>>>>>>            If hoCommandbars Begin
14145>>>>>>>                If hoStatusBar Begin
14147>>>>>>>                    Set pbVisible of hoStatusBar to bState
14148>>>>>>>                End
14148>>>>>>>>
14148>>>>>>>            End
14148>>>>>>>>
14148>>>>>>>            Else Begin
14149>>>>>>>                If (Window_Handle(Self)) Begin
14151>>>>>>>                    If hoStatusBar ;                        Send Activate_Component hoStatusBar bState  nonfocusable
14154>>>>>>>                End
14154>>>>>>>>
14154>>>>>>>            End
14154>>>>>>>>
14154>>>>>>>        End
14154>>>>>>>>
14154>>>>>>>    End_Procedure
14155>>>>>>>    
14155>>>>>>>    Procedure Toggle_Statusbar
14157>>>>>>>        Set Statusbar_State to (not(statusbar_State(Self)))
14158>>>>>>>    End_Procedure
14159>>>>>>>    
14159>>>>>>>    Procedure AutoSizeLocate
14161>>>>>>>    End_Procedure
14162>>>>>>>    
14162>>>>>>>    Procedure Size_Components
14164>>>>>>>        Integer iToolBar iStatBar //iClient
14164>>>>>>>        Integer iSizeToolBar
14164>>>>>>>        Handle hoCommandbars
14164>>>>>>>        
14164>>>>>>>        Get phoCommandBars to hoCommandbars
14165>>>>>>>        If hoCommandbars ;            Procedure_Return
14168>>>>>>>        
14168>>>>>>>        If not (Window_Handle(Self)) ;            Procedure_Return
14171>>>>>>>        
14171>>>>>>>        Get ToolBar_id   to iToolBar
14172>>>>>>>        Get StatusBar_id to iStatBar
14173>>>>>>>        //Get Client_id    To iClient
14173>>>>>>>        
14173>>>>>>>        If (iToolBar and Window_Handle(iToolbar)) Begin
14175>>>>>>>            //Send AutoSizeLocate To iToolBar
14175>>>>>>>            Get GuiSize of iToolbar to iSizeToolbar
14176>>>>>>>            Set GUIsize of iToolbar to (hi(iSizeToolbar)) (low(iSizeToolbar)) // forces auto resize - don't change size
14177>>>>>>>            //set GUIsize of iToolbar to 28 800 // forces auto resize
14177>>>>>>>        End
14177>>>>>>>>
14177>>>>>>>        
14177>>>>>>>        If (iStatBar and Window_Handle(iStatBar)) Begin
14179>>>>>>>            Send AutoSizeLocate to iStatBar
14180>>>>>>>        End
14180>>>>>>>>
14180>>>>>>>    End_Procedure
14181>>>>>>>    
14181>>>>>>>    Procedure Activate_Component Integer Obj Integer st Integer focusmode
14183>>>>>>>        Integer act
14183>>>>>>>        If not Obj ;            Procedure_Return
14186>>>>>>>        Get Active_State of Obj to act
14187>>>>>>>        If (st and act=0) Begin
14189>>>>>>>            Set Focus_Mode of obj to focusable
14190>>>>>>>            Send Add_focus to obj Self
14191>>>>>>>            Set Focus_Mode of obj to focusmode
14192>>>>>>>        End
14192>>>>>>>>
14192>>>>>>>        Else If (st=0 and act) ;            Send deactivate to obj
14196>>>>>>>    End_Procedure
14197>>>>>>>    
14197>>>>>>>    Procedure Add_Components
14199>>>>>>>        Integer hClient
14199>>>>>>>        Handle hoCommandbars
14199>>>>>>>        Get phoCommandBars to hoCommandbars
14200>>>>>>>        If not hoCommandbars Begin
14202>>>>>>>            Get Client_id to hClient
14203>>>>>>>            If (hClient and hClient<>Self ) ; // this forces the client to start at a                Set mdi_top_margin of hClient to (mdi_top_margin(hClient)) // proper size when maximized w/ no components.
14206>>>>>>>            Send Activate_Component (Toolbar_Id(Self)) ;                (Toolbar_State(Self)) nonfocusable
14207>>>>>>>            Send Activate_Component (Statusbar_Id(Self)) ;                (Statusbar_State(Self)) nonfocusable
14208>>>>>>>            Send Size_Components
14209>>>>>>>        End
14209>>>>>>>>
14209>>>>>>>    End_Procedure
14210>>>>>>>    
14210>>>>>>>    Procedure Activate Returns Integer
14212>>>>>>>        Integer bFail
14212>>>>>>>        Forward Get MSG_activate to bFail
14214>>>>>>>        //If NOT bFail Send Add_Components
14214>>>>>>>        Send Add_Components
14215>>>>>>>        Set Main_Window to Self
14216>>>>>>>        Procedure_Return bFail
14217>>>>>>>    End_Procedure
14218>>>>>>>    
14218>>>>>>>    Procedure Client_Message Integer Msg_Id
14220>>>>>>>        Integer hoClient
14220>>>>>>>        Get Client_id to hoClient
14221>>>>>>>        If (hoClient and hoClient <> Self) ;            Send Msg_id to hoClient
14224>>>>>>>    End_Procedure
14225>>>>>>>    
14225>>>>>>>    Procedure Arrange_Icons
14227>>>>>>>        Send Client_Message Current_Message
14228>>>>>>>    End_Procedure
14229>>>>>>>    
14229>>>>>>>    Procedure Cascade_Windows
14231>>>>>>>        Send Client_Message Current_Message
14232>>>>>>>    End_Procedure
14233>>>>>>>    
14233>>>>>>>    Procedure Tile_Windows_Horizontal
14235>>>>>>>        Send Client_Message Current_Message
14236>>>>>>>    End_Procedure
14237>>>>>>>    
14237>>>>>>>    Procedure Tile_Windows_Vertical
14239>>>>>>>        Send Client_Message Current_Message
14240>>>>>>>    End_Procedure
14241>>>>>>>    
14241>>>>>>>    Procedure Set GuiSize Integer sizy Integer sizx
14243>>>>>>>        Forward Set GUISize to sizy sizx
14245>>>>>>>        If BuildingObjectId ;            Procedure_Return
14248>>>>>>>        Send Size_Components
14249>>>>>>>    End_Procedure
14250>>>>>>>    
14250>>>>>>>    //  Returns false to indicate that this is not a DEO. This is used by
14250>>>>>>>    //  delegation to figure out if you are within a DEO and should therefore
14250>>>>>>>    //  send a DEO message. DEO view clients set this true
14250>>>>>>>    //
14250>>>>>>>    Function Is_Function Integer MsgId Integer ObjId Integer DelegateFg Returns Integer
14252>>>>>>>        Integer DelMode rVal Id
14252>>>>>>>        Move ( If(DelegateFg,Self,ObjId) ) to Id
14253>>>>>>>        Get Delegation_mode of Id to DelMode
14254>>>>>>>        Set Delegation_mode of Id to No_Delegate_or_Error
14255>>>>>>>        Get MsgId of ObjId to rVal
14256>>>>>>>        Set Delegation_mode of Id to DelMode
14257>>>>>>>        Function_Return rVal
14258>>>>>>>    End_Function
14259>>>>>>>    
14259>>>>>>>    // In this class this should return an id or nothing (no delegation).
14259>>>>>>>    // Note, if no context exists return a 0 or ''.
14259>>>>>>>    //
14259>>>>>>>    Function Help_Context Integer Context_Type Returns String
14261>>>>>>>        Integer ID
14261>>>>>>>        String  rVal
14261>>>>>>>        
14261>>>>>>>        If (Context_Type = HELP_CONTEXT_ID) ;            Get Help_ID to rVal
14264>>>>>>>        Else If (Context_Type = HELP_CONTEXT_KEYWORD) ;            Get Help_Keyword to rVal
14268>>>>>>>        Else If (Context_Type = HELP_CONTEXT_ID_OR_KEY) Begin
14271>>>>>>>            Get Help_ID to ID
14272>>>>>>>            If (ID = 0) ;                Get Help_Keyword to rVal
14275>>>>>>>            Move ID to rVal
14276>>>>>>>            If (rval = '') ;                Move 0 to rVal
14279>>>>>>>        End
14279>>>>>>>>
14279>>>>>>>        Else If (Context_Type = HELP_CONTEXT_DATAFILE) ;            Move '' to rVal
14283>>>>>>>        
14283>>>>>>>        Function_Return rVal
14284>>>>>>>    End_Function
14285>>>>>>>    
14285>>>>>>>    // Get context based on eContext. If no content found, Don't delegate with panels --- end the search (added to 11.1. See help_mx.pkg)
14285>>>>>>>    //
14285>>>>>>>    Function HtmlHelpContext Integer eContext String ByRef sContext Returns Integer
14287>>>>>>>        Integer eContextFound
14287>>>>>>>        Get HtmlHelpObjectContext eContext (&sContext) to eContextFound // context for this one object
14288>>>>>>>        Function_Return eContextFound
14289>>>>>>>    End_Function
14290>>>>>>>    
14290>>>>>>>    
14290>>>>>>>    // When verify_exit_appliction is received by default just
14290>>>>>>>    // send this message to the Mdi-client Id.
14290>>>>>>>    //
14290>>>>>>>    Function Verify_Exit_Application Returns Integer
14292>>>>>>>        Integer Id rVal
14292>>>>>>>        Get Client_Id to id
14293>>>>>>>        If (Id and Id<>Self) ;            Get Verify_Exit_application of Id to rVal
14296>>>>>>>        Function_Return Rval
14297>>>>>>>    End_Function
14298>>>>>>>    
14298>>>>>>>    // When exit notifiction is received by default just
14298>>>>>>>    // send this message to the Mdi-client Id.
14298>>>>>>>    //
14298>>>>>>>    Procedure Notify_Exit_Application
14300>>>>>>>        Send Client_Message Current_Message
14301>>>>>>>        
14301>>>>>>>        Forward Send Notify_Exit_Application
14303>>>>>>>    End_Procedure
14304>>>>>>>    
14304>>>>>>>    Procedure Minimize_all_Windows
14306>>>>>>>        Send Client_Message Current_Message
14307>>>>>>>    End_Procedure
14308>>>>>>>    
14308>>>>>>>    Procedure Restore_all_Windows
14310>>>>>>>        Send Client_Message Current_Message
14311>>>>>>>    End_Procedure
14312>>>>>>>    
14312>>>>>>>    // augmented to  activate if required
14312>>>>>>>    //
14312>>>>>>>    Procedure End_Construct_Object
14314>>>>>>>        Forward Send End_Construct_object
14316>>>>>>>        If (Auto_activate_state(Self)) ;            Send Activate
14319>>>>>>>    End_Procedure
14320>>>>>>>    
14320>>>>>>>    Procedure Add_Focus Handle hoParent Returns Integer
14322>>>>>>>        Integer iError i iViews
14322>>>>>>>        Handle[] hoAutoActivateViews
14323>>>>>>>        Forward Get msg_Add_Focus hoParent to iError
14325>>>>>>>        If (iError=0) Begin
14327>>>>>>>            Get phoAutoActivateViews to hoAutoActivateViews
14328>>>>>>>            Move (SizeOfArray(hoAutoActivateViews)) to iViews
14329>>>>>>>            For i from 0 to (iViews-1)
14335>>>>>>>>
14335>>>>>>>                Send Activate_View of hoAutoActivateViews[i]
14336>>>>>>>            Loop
14337>>>>>>>>
14337>>>>>>>        End
14337>>>>>>>>
14337>>>>>>>    End_Procedure
14338>>>>>>>    
14338>>>>>>>    // adds a view to the array of views to be autoactivated
14338>>>>>>>    
14338>>>>>>>    Procedure AddAutoActivateView Handle hoView
14340>>>>>>>        Handle[] hoAutoActivateViews
14341>>>>>>>        Get phoAutoActivateViews to hoAutoActivateViews
14342>>>>>>>        Move hoView to hoAutoActivateViews[SizeOfArray(hoAutoActivateViews)]
14343>>>>>>>        Set phoAutoActivateViews to hoAutoActivateViews
14344>>>>>>>    End_Procedure
14345>>>>>>>    
14345>>>>>>>End_Class
14346>>>>>>>
14346>>>>>>>
14346>>>>>>>Use DFCursor.pkg
Including file: Dfcursor.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfcursor.pkg)
14346>>>>>>>>>//  create a desktop object named Cursor_control that understands
14346>>>>>>>>>//   Send Cursor_Wait to (cursor_Control(self))
14346>>>>>>>>>//            creates hourclass cursor
14346>>>>>>>>>//   Send Cursor_ready to (cursor_Control(self))
14346>>>>>>>>>//            restores regular cursor
14346>>>>>>>>>//
14346>>>>>>>>>Use Cursor.pkg
Including file: Cursor.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Cursor.pkg)
14346>>>>>>>>>>>Use Windows.pkg
14346>>>>>>>>>>>Use WinUser.pkg
14346>>>>>>>>>>>
14346>>>>>>>>>>>// Standard Cursor IDs
14346>>>>>>>>>>>
14346>>>>>>>>>>>
14346>>>>>>>>>>>
14346>>>>>>>>>>>
14346>>>>>>>>>>>
14346>>>>>>>>>>>Class CursorShape is a DFBaseToolPanel //BasicPanel
14347>>>>>>>>>>>    
14347>>>>>>>>>>>    Procedure Construct_Object
14349>>>>>>>>>>>        Forward Send Construct_Object
14351>>>>>>>>>>>        
14351>>>>>>>>>>>        Property Handle ClassCursorHandle 0
14352>>>>>>>>>>>        Set Visible_State to False
14353>>>>>>>>>>>        Set Size to 1 1
14354>>>>>>>>>>>    End_Procedure
14355>>>>>>>>>>>    
14355>>>>>>>>>>>    Procedure Set Cursor Integer CursorType
14357>>>>>>>>>>>        Handle CursorID hWnd
14357>>>>>>>>>>>        Longptr retval lpCursorType
14357>>>>>>>>>>>        Get Window_Handle to hWnd
14358>>>>>>>>>>>        If (CursorType = 0) Begin
14360>>>>>>>>>>>            Send Release_Mouse_Capture
14361>>>>>>>>>>>            Move (SetClassLongPtr(hWnd, GCL_HCURSOR, ClassCursorHandle(Self))) to retval
14362>>>>>>>>>>>            Set ClassCursorHandle to 0
14363>>>>>>>>>>>            Send Page_Object False
14364>>>>>>>>>>>        End
14364>>>>>>>>>>>>
14364>>>>>>>>>>>        Else Begin
14365>>>>>>>>>>>            Send Page_Object True
14366>>>>>>>>>>>            Get Window_Handle to hWnd
14367>>>>>>>>>>>            If (ClassCursorHandle(Self) = 0) ;                Set ClassCursorHandle to (GetClassLongPtr(hWnd, GCL_HCURSOR))
14370>>>>>>>>>>>            
14370>>>>>>>>>>>            Move CursorType to lpCursorType    // Move to Longptr type to avoid conversion from integer to pointer in the next line
14371>>>>>>>>>>>            Move (LoadCursorW(0,lpCursorType)) to CursorID
14372>>>>>>>>>>>            
14372>>>>>>>>>>>            Move (SetClassLongPtr(hWnd, GCL_HCURSOR, CursorID )) to retval
14373>>>>>>>>>>>            Move (SetCursor(CursorID)) to retval
14374>>>>>>>>>>>            Send Set_Mouse_Capture
14375>>>>>>>>>>>        End
14375>>>>>>>>>>>>
14375>>>>>>>>>>>    End_Procedure
14376>>>>>>>>>>>    
14376>>>>>>>>>>>    Procedure Mouse_Up
14378>>>>>>>>>>>        Handle retval
14378>>>>>>>>>>>        Send Set_Mouse_Capture
14379>>>>>>>>>>>        Move (SetCursor(GetClassLongPtr(Window_Handle(Self), GCL_HCURSOR))) to retval
14380>>>>>>>>>>>    End_Procedure
14381>>>>>>>>>>>    
14381>>>>>>>>>>>    Procedure Cursor_Wait
14383>>>>>>>>>>>        Set cursor to IDC_WAIT
14384>>>>>>>>>>>    End_Procedure
14385>>>>>>>>>>>    
14385>>>>>>>>>>>    Procedure Cursor_Ready
14387>>>>>>>>>>>        Set cursor to 0
14388>>>>>>>>>>>    End_Procedure
14389>>>>>>>>>>>    
14389>>>>>>>>>>>    
14389>>>>>>>>>>>End_Class
14390>>>>>>>>>
14390>>>>>>>>>Object Cursor_Control is a CursorShape
14392>>>>>>>>>End_Object
14393>>>>>>>>>
14393>>>>>>>
14393>>>>>>>//  Main DEO High level main Panel Class
14393>>>>>>>//
14393>>>>>>>Class Panel is a AppPanel
14394>>>>>>>    
14394>>>>>>>    Procedure Construct_Object
14396>>>>>>>        String St
14396>>>>>>>        Integer iVal
14396>>>>>>>        DWord dwState
14396>>>>>>>        Forward Send Construct_Object
14398>>>>>>>        
14398>>>>>>>        // defaults to hourglass...end_construct will remove
14398>>>>>>>        Send Cursor_wait to (Cursor_Control(Self)) // hourglass
14399>>>>>>>        
14399>>>>>>>        Set private_pbEnvironmentProgram to True
14400>>>>>>>    End_Procedure
14401>>>>>>>    
14401>>>>>>>    
14401>>>>>>>    // This sends the message register_active_view to all child objects.
14401>>>>>>>    // It passes the object ID of the object that is requesting this
14401>>>>>>>    // information. The flag BCast_Focus determines if this should
14401>>>>>>>    // broadcast or broadcast_focus
14401>>>>>>>    //
14401>>>>>>>    Procedure Notify_All_Views Integer Msg Integer obj Integer Bcast_Focus
14403>>>>>>>        Integer clobj
14403>>>>>>>        Get Client_ID to clObj
14404>>>>>>>        If (ClObj = 0) ;            Move Self to ClObj
14407>>>>>>>        If BCast_Focus ;            Broadcast_Focus Send Msg to Clobj obj
14411>>>>>>>        Else ;            Broadcast       Send Msg to Clobj obj
14414>>>>>>>    End_Procedure
14415>>>>>>>    
14415>>>>>>>
14415>>>>>>>    
14415>>>>>>>    // augmented to remove hourglass
14415>>>>>>>    //
14415>>>>>>>    Procedure End_Construct_Object
14417>>>>>>>        // if application object exists, we need to tell that object that we are the main panel
14417>>>>>>>        If ghoApplication ;            Set phoMainPanel of ghoApplication to Self
14420>>>>>>>        Forward Send End_Construct_object
14422>>>>>>>        Send Cursor_ready to (Cursor_Control(Self)) // restore
14423>>>>>>>    End_Procedure
14424>>>>>>>    
14424>>>>>>>    Procedure Page Integer iState
14426>>>>>>>        Forward Send Page iState
14428>>>>>>>        If (iState =1) Begin
14430>>>>>>>            Send Load_Environment
14431>>>>>>>        End
14431>>>>>>>>
14431>>>>>>>    End_Procedure
14432>>>>>>>    
14432>>>>>>>End_Class
14433>>>>>>>
14433>>>>>>>//  Main DEO High level main MDI Client Class
14433>>>>>>>//
14433>>>>>>>//  Currently there is nothing special about this class but it was
14433>>>>>>>//  created because it is logically correct. Extensions may go here in
14433>>>>>>>//  the futire
14433>>>>>>>Class ClientArea is a AppClientArea
14434>>>>>>>End_Class
14435>>>>>>>
14435>>>>>Use cCJCommandBarSystem.pkg
Including file: cCJCommandBarSystem.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJCommandBarSystem.pkg)
14435>>>>>>>Use Windows.pkg
14435>>>>>>>Use cRegistry.pkg
14435>>>>>>>Use cCJCommandBars.pkg // loads CodeJock class
Including file: cCJCommandBars.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJCommandBars.pkg)
14435>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v22.0.0\Bin\Codejock.CommandBars.Unicode.x64.v22.0.0.ocx
14435>>>>>>>>>Use FlexCom20.pkg
Including file: FlexCOM20.pkg    (C:\Program Files\DataFlex 24.0\Pkg\FlexCOM20.pkg)
14435>>>>>>>>>>>// Full Flexcom support for automation (cComAutomationObject),
14435>>>>>>>>>>>// activeX (cComActiveXControl and document objects (cComDocumentObject)
14435>>>>>>>>>>>Use FlexCOM20_Base.pkg // defines basic flexcom symbols and class cComAutomationObject
Including file: FlexCOM20_Base.pkg    (C:\Program Files\DataFlex 24.0\Pkg\FlexCOM20_Base.pkg)
14435>>>>>>>>>>>>>// Flexcom support for automation (cComAutomationObject).
14435>>>>>>>>>>>>>// If you want activeX and document objects use FlexCom20.pkg
14435>>>>>>>>>>>>>Use VdfBase.pkg
14435>>>>>>>>>>>>>Use ComTypes.pkg
Including file: ComTypes.pkg    (C:\Program Files\DataFlex 24.0\Pkg\ComTypes.pkg)
14435>>>>>>>>>>>>>>>Use Variant.pkg
14435>>>>>>>>>>>>>>>
14435>>>>>>>>>>>>>>>
14435>>>>>>>>>>>>>
14435>>>>>>>>>>>>>
14435>>>>>>>>>>>>>
14435>>>>>>>>>>>>>//Enumerations for the peAutoCreate property
14435>>>>>>>>>>>>>//acNoAutoCreate - Do not automatically instantiate the COM object upon VDF object creation.
14435>>>>>>>>>>>>>//You must manually instantiate the COM object using CreateComObject. This is the default
14435>>>>>>>>>>>>>//for cComAutomation.
14435>>>>>>>>>>>>>Define acNoAutoCreate for 0
14435>>>>>>>>>>>>>//acAutoCreate - Automatically instantiate the COM object upon VDF object creation.
14435>>>>>>>>>>>>>//You won't need to manually instantiate the COM object. This is the default
14435>>>>>>>>>>>>>//for cComActiveXControl
14435>>>>>>>>>>>>>Define acAutoCreate for 1
14435>>>>>>>>>>>>>//acDeferredAutoCreate - Automatically instantiate the COM object during Page_Object,
14435>>>>>>>>>>>>>//and automatically destroy the COM object during Page_Delete. Use this setting only
14435>>>>>>>>>>>>>//if acAutoCreate causes problems.
14435>>>>>>>>>>>>>Define acDeferredAutoCreate for 2
14435>>>>>>>>>>>>>
14435>>>>>>>>>>>>>Class cComAutomationObject is a DFComAutomationObject
14436>>>>>>>>>>>>>    Procedure Construct_Object
14438>>>>>>>>>>>>>        Forward Send Construct_Object
14440>>>>>>>>>>>>>        Send RegisterComEvents
14441>>>>>>>>>>>>>    End_Procedure
14442>>>>>>>>>>>>>    
14442>>>>>>>>>>>>>    // It is expected that the Com class will augment this with useful event definitions
14442>>>>>>>>>>>>>    Procedure RegisterComEvents
14444>>>>>>>>>>>>>    End_Procedure
14445>>>>>>>>>>>>>    
14445>>>>>>>>>>>>>    // Attach the DF object to com automation object via progId.
14445>>>>>>>>>>>>>    // returns: Boolean bSuccess if Ok, If not ok, pcComObject is set to null
14445>>>>>>>>>>>>>    Function AttachActiveObject Returns Boolean
14447>>>>>>>>>>>>>        String sProgId
14447>>>>>>>>>>>>>        Variant vComObject
14447>>>>>>>>>>>>>        Boolean bSuccess
14447>>>>>>>>>>>>>        Get psProgID to sProgId
14448>>>>>>>>>>>>>        Get ComActiveObject sProgId to vComObject
14449>>>>>>>>>>>>>        Set pvComObject to vComObject
14450>>>>>>>>>>>>>        Move (not(IsNullComObject(vComObject))) to bSuccess // success of variant is not null
14451>>>>>>>>>>>>>        Function_Return bSuccess
14452>>>>>>>>>>>>>    End_Function
14453>>>>>>>>>>>>>    
14453>>>>>>>>>>>>>    // returns true if the control is created.
14453>>>>>>>>>>>>>    Function IsComObjectCreated Returns Boolean
14455>>>>>>>>>>>>>        Variant vComObject
14455>>>>>>>>>>>>>        Get pvComObject to vComObject
14456>>>>>>>>>>>>>        Function_Return (not(IsNullComObject(vComObject)))
14457>>>>>>>>>>>>>    End_Function
14458>>>>>>>>>>>>>    
14458>>>>>>>>>>>>>End_Class
14459>>>>>>>>>>>>>
14459>>>>>>>>>>>>>
14459>>>>>>>>>>>
14459>>>>>>>>>>>Use Windows.pkg
14459>>>>>>>>>>>
14459>>>>>>>>>>>Class cComDocumentObject is a DFComDocumentObject
14460>>>>>>>>>>>
14460>>>>>>>>>>>
14460>>>>>>>>>>>    Procedure Construct_Object
14462>>>>>>>>>>>        Forward Send Construct_Object
14464>>>>>>>>>>>        Send RegisterComEvents
14465>>>>>>>>>>>        Send Define_Standard_Object_Mixin
14466>>>>>>>>>>>        Send Define_Shadow_Mixin
14467>>>>>>>>>>>    End_Procedure
14468>>>>>>>>>>>
14468>>>>>>>>>>>    Import_Class_Protocol Standard_Object_Mixin
14469>>>>>>>>>>>    Import_Class_Protocol Shadow_Mixin
14470>>>>>>>>>>>
14470>>>>>>>>>>>    
14470>>>>>>>>>>>    // It is expected that the Com class will augment this with useful event definitions
14470>>>>>>>>>>>    Procedure RegisterComEvents
14472>>>>>>>>>>>    End_Procedure
14473>>>>>>>>>>>    
14473>>>>>>>>>>>    // returns true if the control is created.
14473>>>>>>>>>>>    Function IsComObjectCreated Returns Boolean
14475>>>>>>>>>>>        Variant vComObject
14475>>>>>>>>>>>        Get pvComObject to vComObject
14476>>>>>>>>>>>        Function_Return (not(IsNullComObject(vComObject)))
14477>>>>>>>>>>>    End_Function
14478>>>>>>>>>>>
14478>>>>>>>>>>>
14478>>>>>>>>>>>End_Class
14479>>>>>>>>>>>
14479>>>>>>>>>>>Class cComActiveXControl is a DFComActiveXControl
14480>>>>>>>>>>>
14480>>>>>>>>>>>    Procedure Construct_Object
14482>>>>>>>>>>>        Forward Send Construct_Object
14484>>>>>>>>>>>        Send RegisterComEvents
14485>>>>>>>>>>>
14485>>>>>>>>>>>
14485>>>>>>>>>>>        Send Define_Standard_Object_Mixin
14486>>>>>>>>>>>        Send Define_Single_Item_Navigate_Mixin
14487>>>>>>>>>>>        Send Define_Dflabel_Mixin
14488>>>>>>>>>>>
14488>>>>>>>>>>>        // internal: set true object is notified that the OCX value has changed.
14488>>>>>>>>>>>        Property Boolean pbPrivateControlChanging False
14489>>>>>>>>>>>        // Class sets this true when making a local (externally triggered) change. This is
14489>>>>>>>>>>>        // set when a Set Value change is made to prevent recursion
14489>>>>>>>>>>>        Property Boolean pbPrivateControlRefresh False
14490>>>>>>>>>>>        
14490>>>>>>>>>>>        // added to eumlate a single item form support
14490>>>>>>>>>>>        Property Boolean pbPrivateItem_Changed_State False
14491>>>>>>>>>>>        
14491>>>>>>>>>>>        // This keeps track of value, even when control is not created
14491>>>>>>>>>>>        Property String psPrivateValue ''
14492>>>>>>>>>>>        
14492>>>>>>>>>>>        // If set true, then the control will attempt to bind the value property in the object to the
14492>>>>>>>>>>>        // comValue in the control. It will try to keep these values in synch at all times. This allows a
14492>>>>>>>>>>>        // control to be used as a Form style value control. the default is true. Even when true if the
14492>>>>>>>>>>>        // get/set ComValue methods are not set up to do anything, this will do nothing.
14492>>>>>>>>>>>        Property Boolean pbBindValue True
14493>>>>>>>>>>>        
14493>>>>>>>>>>>    End_Procedure
14494>>>>>>>>>>>    
14494>>>>>>>>>>>    // It is expected that the Com class will augment this with useful event definitions
14494>>>>>>>>>>>    Procedure RegisterComEvents
14496>>>>>>>>>>>    End_Procedure
14497>>>>>>>>>>>
14497>>>>>>>>>>>    
14497>>>>>>>>>>>    // returns true if the control is created.
14497>>>>>>>>>>>    Function IsComObjectCreated Returns Boolean
14499>>>>>>>>>>>        Variant vComObject
14499>>>>>>>>>>>        Get pvComObject to vComObject
14500>>>>>>>>>>>        Function_Return (not(IsNullComObject(vComObject)))
14501>>>>>>>>>>>    End_Function
14502>>>>>>>>>>>    
14502>>>>>>>>>>>
14502>>>>>>>>>>>    Import_Class_Protocol Standard_Object_Mixin
14503>>>>>>>>>>>    Import_Class_Protocol Single_Item_Navigate_Mixin
14504>>>>>>>>>>>    Import_Class_Protocol Dflabel_Mixin
14505>>>>>>>>>>>
14505>>>>>>>>>>>    // added to eumlate a single item form support
14505>>>>>>>>>>>    Function Item_Count Returns Integer
14507>>>>>>>>>>>        Function_Return 1
14508>>>>>>>>>>>    End_Function
14509>>>>>>>>>>>    
14509>>>>>>>>>>>    // added to eumlate a single item form support
14509>>>>>>>>>>>    Procedure Set Item_Changed_State Integer iItem Integer iState
14511>>>>>>>>>>>        Set pbPrivateItem_changed_state to iState
14512>>>>>>>>>>>        If (iState and changed_state(Self)=False) ;            Set changed_state to True
14515>>>>>>>>>>>    End_Procedure
14516>>>>>>>>>>>    
14516>>>>>>>>>>>    Function Item_Changed_State Integer iItem Returns Integer
14518>>>>>>>>>>>        Function_Return (pbPrivateItem_changed_state(Self))
14519>>>>>>>>>>>    End_Function
14520>>>>>>>>>>>    
14520>>>>>>>>>>>    
14520>>>>>>>>>>>    // augment to set the label's appearance
14520>>>>>>>>>>>    Procedure Shadow_Display
14522>>>>>>>>>>>        Forward Send Shadow_display
14524>>>>>>>>>>>        Send Label_Shadow_Display
14525>>>>>>>>>>>    End_Procedure
14526>>>>>>>>>>>    
14526>>>>>>>>>>>    // Created to simulate get/Set value.
14526>>>>>>>>>>>    Procedure Set Value Integer iItem String sVal
14528>>>>>>>>>>>        If not (pbPrivateControlChanging(Self)) ;            Send OnRefreshControl sVal
14531>>>>>>>>>>>        Set psPrivateValue to sVal
14532>>>>>>>>>>>        Send OnChange
14533>>>>>>>>>>>        //Set changed_state to True
14533>>>>>>>>>>>        Set item_changed_state 0 to True
14534>>>>>>>>>>>    End_Procedure
14535>>>>>>>>>>>    
14535>>>>>>>>>>>    Function Value Integer iItem Returns String
14537>>>>>>>>>>>        Function_Return (psPrivateValue(Self))
14538>>>>>>>>>>>        //function_return (Controlvalue(self))
14538>>>>>>>>>>>    End_Function
14539>>>>>>>>>>>    
14539>>>>>>>>>>>    Procedure OnChange
14541>>>>>>>>>>>    End_Procedure
14542>>>>>>>>>>>    
14542>>>>>>>>>>>    
14542>>>>>>>>>>>    // It is expected that the sub-class will provide functionality
14542>>>>>>>>>>>    // for these messages. This gets and sets the value of the actual
14542>>>>>>>>>>>    // window control. These should only be used to synchronize the window
14542>>>>>>>>>>>    // control and the DF side. Do not use for any other purpose.
14542>>>>>>>>>>>    Procedure Set ControlValue String sVal
14544>>>>>>>>>>>    End_Procedure
14545>>>>>>>>>>>    
14545>>>>>>>>>>>    Function ControlValue Returns String
14547>>>>>>>>>>>    End_Function
14548>>>>>>>>>>>    
14548>>>>>>>>>>>    Procedure OnCreate
14550>>>>>>>>>>>        // if we are binding value to comValue, do so upon creation
14550>>>>>>>>>>>        If (pbBindValue(Self)) ;            Set ControlValue to (Value(Self))
14553>>>>>>>>>>>        Forward Send OnCreate
14555>>>>>>>>>>>    End_Procedure
14556>>>>>>>>>>>    
14556>>>>>>>>>>>    // Notification that the control is about to be activated in place. The COM component is
14556>>>>>>>>>>>    // created but OnCreate is not yet fired (this happens after the InPlaceActivate).
14556>>>>>>>>>>>    Procedure OnBeforeInPlaceActivate
14558>>>>>>>>>>>        Forward Send OnBeforeInPlaceActivate
14560>>>>>>>>>>>    End_Procedure
14561>>>>>>>>>>>    
14561>>>>>>>>>>>    // Notification that the control's value has been changed
14561>>>>>>>>>>>    // externally by the program (via set value). Use to synchronize
14561>>>>>>>>>>>    // OCX control value.
14561>>>>>>>>>>>    Procedure OnRefreshControl String sVal
14563>>>>>>>>>>>        Boolean bOld
14563>>>>>>>>>>>        If (pbBindValue(Self) and pbPrivateControlChanging(Self)=0 and IsComObjectCreated(Self)) Begin
14565>>>>>>>>>>>            Get pbPrivateControlRefresh to bOld
14566>>>>>>>>>>>            Set pbPrivateControlRefresh to True
14567>>>>>>>>>>>            Set ControlValue to sval
14568>>>>>>>>>>>            Set pbPrivateControlRefresh to bOld
14569>>>>>>>>>>>        End
14569>>>>>>>>>>>>
14569>>>>>>>>>>>    End_Procedure
14570>>>>>>>>>>>    
14570>>>>>>>>>>>    // notification that the control has changed its value. Used to
14570>>>>>>>>>>>    // synchronize the object with the change.
14570>>>>>>>>>>>    Procedure OnControlValueChanged
14572>>>>>>>>>>>        String sVal
14572>>>>>>>>>>>        Boolean bOld
14572>>>>>>>>>>>        If (pbBindValue(Self) and pbPrivateControlRefresh(Self)=0) Begin
14574>>>>>>>>>>>            Get pbPrivateControlChanging to bOld
14575>>>>>>>>>>>            Set pbPrivateControlChanging to True
14576>>>>>>>>>>>            Get ControlValue to sVal
14577>>>>>>>>>>>            Set Value to sVal
14578>>>>>>>>>>>            Set Item_Changed_State 0 to True
14579>>>>>>>>>>>            Set pbPrivateControlChanging to bOld
14580>>>>>>>>>>>        End
14580>>>>>>>>>>>>
14580>>>>>>>>>>>    End_Procedure
14581>>>>>>>>>>>    
14581>>>>>>>>>>>    Procedure Delete_Data
14583>>>>>>>>>>>        Forward Send Delete_Data
14585>>>>>>>>>>>        Set Value to ''
14586>>>>>>>>>>>        Set Changed_state to False
14587>>>>>>>>>>>        Set Item_changed_state 0 to False
14588>>>>>>>>>>>    End_Procedure
14589>>>>>>>>>>>
14589>>>>>>>>>>>
14589>>>>>>>>>>>End_Class
14590>>>>>>>>>>>
14590>>>>>>>>>>>
14590>>>>>>>>>
14590>>>>>>>>>// Changes to Imported package
14590>>>>>>>>>//     OLEXTPxx to XTPxx
14590>>>>>>>>>//     OLExtpxx to xtpxx
14590>>>>>>>>>//     OLESTDxxx and OLEXPxxxx to STD/XP
14590>>>>>>>>>//     OLEOLE to OLE
14590>>>>>>>>>//     OLESBPS to SBPS
14590>>>>>>>>>//     OLETPM to TPM
14590>>>>>>>>>//     cCom classes to cCJ
14590>>>>>>>>>//     cCJAutomationObject back to cComAutomationObject
14590>>>>>>>>>//     cCJActiveXControl back to cComActiveXControl
14590>>>>>>>>>//     cCJTabToolBar to cCJComTabToolBar
14590>>>>>>>>>//     cCJTabControlItem to cCJComTabControlItem
14590>>>>>>>>>//     cCJStatusBar to cCJComStatusBar
14590>>>>>>>>>//     cCJStatusBarPane to cCJComStatusBarPane
14590>>>>>>>>>//     cCJMenuBar to cCJComMenuBar
14590>>>>>>>>>//     remove OnComUpdate from cCJCommandBars
14590>>>>>>>>>//     Use statements as noted below (classes moved to these files)
14590>>>>>>>>>//     Set classlibrary of all cComAutomation objects to Windows (for class doc)
14590>>>>>>>>>
14590>>>>>>>>>// These have been extracted from this class and moved into seperate packages
14590>>>>>>>>>// because other Codejock classes use these.
14590>>>>>>>>>Use cCJColorManager.pkg     // cCJColorManager
Including file: cCJColorManager.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJColorManager.pkg)
14590>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
14590>>>>>>>>>>>Use FlexCom20.pkg
14590>>>>>>>>>>>
14590>>>>>>>>>>>Define XTPColorManagerColor for Integer
14590>>>>>>>>>>>    Define STDCOLOR_BACKGROUND for 1
14590>>>>>>>>>>>    Define STDCOLOR_ACTIVECAPTION for 2
14590>>>>>>>>>>>    Define STDCOLOR_INACTIVECAPTION for 3
14590>>>>>>>>>>>    Define STDCOLOR_MENU for 4
14590>>>>>>>>>>>    Define STDCOLOR_WINDOW for 5
14590>>>>>>>>>>>    Define STDCOLOR_WINDOWFRAME for 6
14590>>>>>>>>>>>    Define STDCOLOR_MENUTEXT for 7
14590>>>>>>>>>>>    Define STDCOLOR_WINDOWTEXT for 8
14590>>>>>>>>>>>    Define STDCOLOR_CAPTIONTEXT for 9
14590>>>>>>>>>>>    Define STDCOLOR_ACTIVEBORDER for 10
14590>>>>>>>>>>>    Define STDCOLOR_INACTIVEBORDER for 11
14590>>>>>>>>>>>    Define STDCOLOR_APPWORKSPACE for 12
14590>>>>>>>>>>>    Define STDCOLOR_HIGHLIGHT for 13
14590>>>>>>>>>>>    Define STDCOLOR_HIGHLIGHTTEXT for 14
14590>>>>>>>>>>>    Define STDCOLOR_BTNFACE for 15
14590>>>>>>>>>>>    Define STDCOLOR_BTNSHADOW for 16
14590>>>>>>>>>>>    Define STDCOLOR_GRAYTEXT for 17
14590>>>>>>>>>>>    Define STDCOLOR_BTNTEXT for 18
14590>>>>>>>>>>>    Define STDCOLOR_INACTIVECAPTIONTEXT for 19
14590>>>>>>>>>>>    Define STDCOLOR_BTNHIGHLIGHT for 20
14590>>>>>>>>>>>    Define STDCOLOR_3DDKSHADOW for 21
14590>>>>>>>>>>>    Define STDCOLOR_3DLIGHT for 22
14590>>>>>>>>>>>    Define STDCOLOR_INFOTEXT for 23
14590>>>>>>>>>>>    Define STDCOLOR_INFOBK for 24
14590>>>>>>>>>>>    Define STDCOLOR_HOTLIGHT for 26
14590>>>>>>>>>>>    Define STDCOLOR_GRADIENTACTIVECAPTION for 27
14590>>>>>>>>>>>    Define STDCOLOR_GRADIENTINACTIVECAPTION for 28
14590>>>>>>>>>>>    Define XPCOLOR_TOOLBAR_FACE for 30
14590>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT for 31
14590>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_BORDER for 32
14590>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_PUSHED for 33
14590>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_CHECKED for 36
14590>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_CHECKED_BORDER for 37
14590>>>>>>>>>>>    Define XPCOLOR_ICONSHADDOW for 34
14590>>>>>>>>>>>    Define XPCOLOR_GRAYTEXT for 35
14590>>>>>>>>>>>    Define XPCOLOR_TOOLBAR_GRIPPER for 38
14590>>>>>>>>>>>    Define XPCOLOR_SEPARATOR for 39
14590>>>>>>>>>>>    Define XPCOLOR_DISABLED for 40
14590>>>>>>>>>>>    Define XPCOLOR_MENUBAR_FACE for 41
14590>>>>>>>>>>>    Define XPCOLOR_MENUBAR_EXPANDED for 42
14590>>>>>>>>>>>    Define XPCOLOR_MENUBAR_BORDER for 43
14590>>>>>>>>>>>    Define XPCOLOR_MENUBAR_TEXT for 44
14590>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_TEXT for 45
14590>>>>>>>>>>>    Define XPCOLOR_TOOLBAR_TEXT for 46
14590>>>>>>>>>>>    Define XPCOLOR_PUSHED_TEXT for 47
14590>>>>>>>>>>>    Define XPCOLOR_TAB_INACTIVE_BACK for 48
14590>>>>>>>>>>>    Define XPCOLOR_TAB_INACTIVE_TEXT for 49
14590>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_PUSHED_BORDER for 50
14590>>>>>>>>>>>    Define XPCOLOR_3DFACE for 51
14590>>>>>>>>>>>    Define XPCOLOR_3DSHADOW for 52
14590>>>>>>>>>>>    Define XPCOLOR_FRAME for 54
14590>>>>>>>>>>>    Define XPCOLOR_SPLITTER_FACE for 55
14590>>>>>>>>>>>    Define XPCOLOR_LABEL for 56
14590>>>>>>>>>>>    Define XPCOLOR_STATICFRAME for 57
14590>>>>>>>>>>>
14590>>>>>>>>>>>Define XTPCurrentSystemTheme for Integer
14590>>>>>>>>>>>    // No known theme in use
14590>>>>>>>>>>>    Define xtpSystemThemeUnknown for 0
14590>>>>>>>>>>>    // Blue theme in use
14590>>>>>>>>>>>    Define xtpSystemThemeBlue for 1
14590>>>>>>>>>>>    // Olive theme in use
14590>>>>>>>>>>>    Define xtpSystemThemeOlive for 2
14590>>>>>>>>>>>    // Silver theme in use
14590>>>>>>>>>>>    Define xtpSystemThemeSilver for 3
14590>>>>>>>>>>>    // Silver theme in use
14590>>>>>>>>>>>    Define xtpSystemThemeRoyale for 4
14590>>>>>>>>>>>    // Silver theme in use
14590>>>>>>>>>>>    Define xtpSystemThemeAero for 5
14590>>>>>>>>>>>    // Use OS theme.
14590>>>>>>>>>>>    Define xtpSystemThemeAuto for 6
14590>>>>>>>>>>>
14590>>>>>>>>>>>
14590>>>>>>>>>>>// CLSID: {C0DE2200-DE43-4B56-BCEB-E14B825CF245}
14590>>>>>>>>>>>Class cCJIColorManager is a Mixin
14591>>>>>>>>>>>
14591>>>>>>>>>>>    Function ComSystemTheme Returns XTPCurrentSystemTheme
14593>>>>>>>>>>>        XTPCurrentSystemTheme retVal
14593>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
14594>>>>>>>>>>>        Function_Return retVal
14595>>>>>>>>>>>    End_Function
14596>>>>>>>>>>>
14596>>>>>>>>>>>    Procedure Set ComSystemTheme XTPCurrentSystemTheme value
14598>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
14599>>>>>>>>>>>    End_Procedure
14600>>>>>>>>>>>
14600>>>>>>>>>>>    Function ComEnableLunaBlueForRoyaleTheme Returns Boolean
14602>>>>>>>>>>>        Boolean retVal
14602>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
14603>>>>>>>>>>>        Function_Return retVal
14604>>>>>>>>>>>    End_Function
14605>>>>>>>>>>>
14605>>>>>>>>>>>    Procedure Set ComEnableLunaBlueForRoyaleTheme Boolean value
14607>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
14608>>>>>>>>>>>    End_Procedure
14609>>>>>>>>>>>
14609>>>>>>>>>>>    Function ComColor XTPColorManagerColor llIndex Returns OLE_COLOR
14611>>>>>>>>>>>        Handle hDispatchDriver
14611>>>>>>>>>>>        OLE_COLOR retVal
14611>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14612>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14613>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
14614>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_I4 to retVal
14615>>>>>>>>>>>        Function_Return retVal
14616>>>>>>>>>>>    End_Function
14617>>>>>>>>>>>
14617>>>>>>>>>>>    Procedure ComSetColor XTPColorManagerColor llIndex OLE_COLOR llColor
14619>>>>>>>>>>>        Handle hDispatchDriver
14619>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14620>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14621>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
14622>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
14623>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1 OLE_VT_VOID
14624>>>>>>>>>>>    End_Procedure
14625>>>>>>>>>>>
14625>>>>>>>>>>>    Function ComGetCurrentSystemTheme Returns XTPCurrentSystemTheme
14627>>>>>>>>>>>        Handle hDispatchDriver
14627>>>>>>>>>>>        XTPCurrentSystemTheme retVal
14627>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14628>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
14629>>>>>>>>>>>        Function_Return retVal
14630>>>>>>>>>>>    End_Function
14631>>>>>>>>>>>End_Class
14632>>>>>>>>>>>
14632>>>>>>>>>>>// CoClass
14632>>>>>>>>>>>// CLSID: {C0DE2200-F3FE-46E7-BB64-DB033F439F8B}
14632>>>>>>>>>>>Class cCJColorManager is a cComAutomationObject
14633>>>>>>>>>>>    Import_Class_Protocol cCJIColorManager
14634>>>>>>>>>>>
14634>>>>>>>>>>>    Procedure Construct_Object
14636>>>>>>>>>>>        Forward Send Construct_Object
14638>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
14639>>>>>>>>>>>    End_Procedure
14640>>>>>>>>>>>End_Class
14641>>>>>>>>>>>
14641>>>>>>>>>Use cCJImageManager.pkg     // cCJImageManagerIcons, cCJImageManagerIcon, cCJImageManager, cCJImageManagerIconSet
Including file: cCJImageManager.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJImageManager.pkg)
14641>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
14641>>>>>>>>>>>Use FlexCom20.pkg
14641>>>>>>>>>>>
14641>>>>>>>>>>>// Image State
14641>>>>>>>>>>>Define XTPImageState for Integer
14641>>>>>>>>>>>    Define xtpImageNormal for 0
14641>>>>>>>>>>>    Define xtpImageDisabled for 1
14641>>>>>>>>>>>    Define xtpImageHot for 2
14641>>>>>>>>>>>    Define xtpImageChecked for 3
14641>>>>>>>>>>>    Define xtpImagePressed for 4
14641>>>>>>>>>>>
14641>>>>>>>>>>>// CLSID: {C0DE2200-CD87-48F0-AD57-63682A2F3FCC}
14641>>>>>>>>>>>Class cCJIImageManagerIcons is a Mixin
14642>>>>>>>>>>>
14642>>>>>>>>>>>    Function ComDrawReverted Returns Boolean
14644>>>>>>>>>>>        Boolean retVal
14644>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
14645>>>>>>>>>>>        Function_Return retVal
14646>>>>>>>>>>>    End_Function
14647>>>>>>>>>>>
14647>>>>>>>>>>>    Procedure Set ComDrawReverted Boolean value
14649>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
14650>>>>>>>>>>>    End_Procedure
14651>>>>>>>>>>>
14651>>>>>>>>>>>    Function ComMaskColor Returns OLE_COLOR
14653>>>>>>>>>>>        OLE_COLOR retVal
14653>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
14654>>>>>>>>>>>        Function_Return retVal
14655>>>>>>>>>>>    End_Function
14656>>>>>>>>>>>
14656>>>>>>>>>>>    Procedure Set ComMaskColor OLE_COLOR value
14658>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
14659>>>>>>>>>>>    End_Procedure
14660>>>>>>>>>>>
14660>>>>>>>>>>>    Function ComCount Returns Integer
14662>>>>>>>>>>>        Handle hDispatchDriver
14662>>>>>>>>>>>        Integer retVal
14662>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14663>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
14664>>>>>>>>>>>        Function_Return retVal
14665>>>>>>>>>>>    End_Function
14666>>>>>>>>>>>
14666>>>>>>>>>>>    Procedure ComAddIcon Longptr llHandle Integer llCommand XTPImageState llimageState
14668>>>>>>>>>>>        Handle hDispatchDriver
14668>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14669>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
14670>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llHandle
14671>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14672>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14673>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 2 OLE_VT_VOID
14674>>>>>>>>>>>    End_Procedure
14675>>>>>>>>>>>
14675>>>>>>>>>>>    Procedure ComLoadIcon String llPath Integer llCommand XTPImageState llimageState
14677>>>>>>>>>>>        Handle hDispatchDriver
14677>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14678>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
14679>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14680>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14681>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14682>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
14683>>>>>>>>>>>    End_Procedure
14684>>>>>>>>>>>
14684>>>>>>>>>>>    Procedure ComAddBitmap Longptr llHandle Variant llCommands XTPImageState llimageState Boolean llAlpha
14686>>>>>>>>>>>        Handle hDispatchDriver
14686>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14687>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14688>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llHandle
14689>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llCommands
14690>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14691>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llAlpha
14692>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
14693>>>>>>>>>>>    End_Procedure
14694>>>>>>>>>>>
14694>>>>>>>>>>>    Procedure ComLoadBitmap String llPath Variant llCommands XTPImageState llimageState
14696>>>>>>>>>>>        Handle hDispatchDriver
14696>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14697>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
14698>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14699>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llCommands
14700>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14701>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
14702>>>>>>>>>>>    End_Procedure
14703>>>>>>>>>>>
14703>>>>>>>>>>>    Procedure ComLoadBitmapFromResource Longptr llModule Integer llResource Variant llCommands XTPImageState llimageState
14705>>>>>>>>>>>        Handle hDispatchDriver
14705>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14706>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14707>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llModule
14708>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llResource
14709>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llCommands
14710>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14711>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
14712>>>>>>>>>>>    End_Procedure
14713>>>>>>>>>>>
14713>>>>>>>>>>>    Procedure ComLoadIconFromResource Longptr llModule Integer llResource Integer llCommand XTPImageState llimageState
14715>>>>>>>>>>>        Handle hDispatchDriver
14715>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14716>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14717>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llModule
14718>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llResource
14719>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14720>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14721>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
14722>>>>>>>>>>>    End_Procedure
14723>>>>>>>>>>>
14723>>>>>>>>>>>    Function ComLoadVectorIcon String llPath Integer llnIDCommand Integer llnWidth XTPImageState llimageState Returns Boolean
14725>>>>>>>>>>>        Handle hDispatchDriver
14725>>>>>>>>>>>        Boolean retVal
14725>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14726>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14727>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14728>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIDCommand
14729>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnWidth
14730>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14731>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 17 OLE_VT_BOOL to retVal
14732>>>>>>>>>>>        Function_Return retVal
14733>>>>>>>>>>>    End_Function
14734>>>>>>>>>>>
14734>>>>>>>>>>>    Function ComLoadVectorIconCode String llCode Integer llnIDCommand Integer llnWidth XTPImageState llimageState Returns Boolean
14736>>>>>>>>>>>        Handle hDispatchDriver
14736>>>>>>>>>>>        Boolean retVal
14736>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14737>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14738>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCode
14739>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIDCommand
14740>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnWidth
14741>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14742>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 18 OLE_VT_BOOL to retVal
14743>>>>>>>>>>>        Function_Return retVal
14744>>>>>>>>>>>    End_Function
14745>>>>>>>>>>>
14745>>>>>>>>>>>    Function ComLoadVectorIconFromResource BigInt llModule String llResourceType Integer llResource Integer llnIDCommand Integer llnWidth XTPImageState llimageState Returns Boolean
14747>>>>>>>>>>>        Handle hDispatchDriver
14747>>>>>>>>>>>        Boolean retVal
14747>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14748>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 6
14749>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I8 llModule
14750>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llResourceType
14751>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llResource
14752>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIDCommand
14753>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnWidth
14754>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14755>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 19 OLE_VT_BOOL to retVal
14756>>>>>>>>>>>        Function_Return retVal
14757>>>>>>>>>>>    End_Function
14758>>>>>>>>>>>
14758>>>>>>>>>>>    Procedure ComRemoveAll
14760>>>>>>>>>>>        Handle hDispatchDriver
14760>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14761>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
14762>>>>>>>>>>>    End_Procedure
14763>>>>>>>>>>>
14763>>>>>>>>>>>    Procedure ComAddIcons Variant llIcons
14765>>>>>>>>>>>        Handle hDispatchDriver
14765>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14766>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14767>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llIcons
14768>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
14769>>>>>>>>>>>    End_Procedure
14770>>>>>>>>>>>
14770>>>>>>>>>>>    Procedure ComRemoveIcon Integer llCommand
14772>>>>>>>>>>>        Handle hDispatchDriver
14772>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14773>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14774>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14775>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 10 OLE_VT_VOID
14776>>>>>>>>>>>    End_Procedure
14777>>>>>>>>>>>
14777>>>>>>>>>>>    Function ComIsAlphaIconsSupported Returns Boolean
14779>>>>>>>>>>>        Handle hDispatchDriver
14779>>>>>>>>>>>        Boolean retVal
14779>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14780>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_BOOL to retVal
14781>>>>>>>>>>>        Function_Return retVal
14782>>>>>>>>>>>    End_Function
14783>>>>>>>>>>>
14783>>>>>>>>>>>    Procedure ComRefreshAll
14785>>>>>>>>>>>        Handle hDispatchDriver
14785>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14786>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 12 OLE_VT_VOID
14787>>>>>>>>>>>    End_Procedure
14788>>>>>>>>>>>
14788>>>>>>>>>>>    Function ComGetImage Integer llCommand Integer llWidth Returns Variant
14790>>>>>>>>>>>        Handle hDispatchDriver
14790>>>>>>>>>>>        Variant retVal
14790>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14791>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14792>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14793>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
14794>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_DISPATCH to retVal
14795>>>>>>>>>>>        Function_Return retVal
14796>>>>>>>>>>>    End_Function
14797>>>>>>>>>>>
14797>>>>>>>>>>>    Function Com_NewEnum Returns Variant
14799>>>>>>>>>>>        Handle hDispatchDriver
14799>>>>>>>>>>>        Variant retVal
14799>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14800>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
14801>>>>>>>>>>>        Function_Return retVal
14802>>>>>>>>>>>    End_Function
14803>>>>>>>>>>>
14803>>>>>>>>>>>    Procedure ComDoPropExchange Variant llpPX
14805>>>>>>>>>>>        Handle hDispatchDriver
14805>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14806>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14807>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpPX
14808>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
14809>>>>>>>>>>>    End_Procedure
14810>>>>>>>>>>>End_Class
14811>>>>>>>>>>>
14811>>>>>>>>>>>// CoClass
14811>>>>>>>>>>>// CLSID: {C0DE2200-4290-47A7-8B05-90AC979F12D5}
14811>>>>>>>>>>>Class cCJImageManagerIcons is a cComAutomationObject
14812>>>>>>>>>>>    Import_Class_Protocol cCJIImageManagerIcons
14813>>>>>>>>>>>
14813>>>>>>>>>>>    Procedure Construct_Object
14815>>>>>>>>>>>        Forward Send Construct_Object
14817>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
14818>>>>>>>>>>>    End_Procedure
14819>>>>>>>>>>>End_Class
14820>>>>>>>>>>>
14820>>>>>>>>>>>// CLSID: {C0DE2200-7540-4926-8D3D-82A953AE7B7B}
14820>>>>>>>>>>>// Dispatch interface for ImageManager Control
14820>>>>>>>>>>>Class cCJ_DImageManager is a Mixin
14821>>>>>>>>>>>
14821>>>>>>>>>>>    Function ComIcons Returns Variant
14823>>>>>>>>>>>        Variant retVal
14823>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_DISPATCH to retVal
14824>>>>>>>>>>>        Function_Return retVal
14825>>>>>>>>>>>    End_Function
14826>>>>>>>>>>>
14826>>>>>>>>>>>    Procedure Set ComIcons Variant value
14828>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_DISPATCH to value
14829>>>>>>>>>>>    End_Procedure
14830>>>>>>>>>>>
14830>>>>>>>>>>>    Function ComIsAlphaIconsSupported Returns Boolean
14832>>>>>>>>>>>        Handle hDispatchDriver
14832>>>>>>>>>>>        Boolean retVal
14832>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14833>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
14834>>>>>>>>>>>        Function_Return retVal
14835>>>>>>>>>>>    End_Function
14836>>>>>>>>>>>
14836>>>>>>>>>>>    Procedure ComAboutBox
14838>>>>>>>>>>>        Handle hDispatchDriver
14838>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14839>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
14840>>>>>>>>>>>    End_Procedure
14841>>>>>>>>>>>End_Class
14842>>>>>>>>>>>
14842>>>>>>>>>>>// CLSID: {C0DE2200-E0F3-48CF-BD1D-5305A4F46C99}
14842>>>>>>>>>>>// Event interface for ImageManager Control
14842>>>>>>>>>>>Class cCJ_DImageManagerEvents is a Mixin
14843>>>>>>>>>>>
14843>>>>>>>>>>>    Procedure RegisterComEvents
14845>>>>>>>>>>>    End_Procedure
14846>>>>>>>>>>>End_Class
14847>>>>>>>>>>>
14847>>>>>>>>>>>// CoClass
14847>>>>>>>>>>>// ProgID: Codejock.ImageManager.22.0.0
14847>>>>>>>>>>>// CLSID: {C0DE2200-3949-47B3-B687-85E8DDA2AEDB}
14847>>>>>>>>>>>// Xtreme ImageManager Control
14847>>>>>>>>>>>Class cCJImageManager is a cComActiveXControl
14848>>>>>>>>>>>    Import_Class_Protocol cCJ_DImageManager
14849>>>>>>>>>>>    Import_Class_Protocol cCJ_DImageManagerEvents
14850>>>>>>>>>>>
14850>>>>>>>>>>>    Procedure Construct_Object
14852>>>>>>>>>>>        Forward Send Construct_Object
14854>>>>>>>>>>>        Set psProgID to "{C0DE2200-3949-47B3-B687-85E8DDA2AEDB}"
14855>>>>>>>>>>>        Set psEventId to "{C0DE2200-E0F3-48CF-BD1D-5305A4F46C99}"
14856>>>>>>>>>>>        Set peAutoCreate to acAutoCreate
14857>>>>>>>>>>>    End_Procedure
14858>>>>>>>>>>>End_Class
14859>>>>>>>>>>>
14859>>>>>>>>>>>// CLSID: {C0DE2200-AE6D-46A8-BC77-CEE7D5CE9ED7}
14859>>>>>>>>>>>Class cCJImageManagerIcon is a cComAutomationObject
14860>>>>>>>>>>>
14860>>>>>>>>>>>    Function ComId Returns Integer
14862>>>>>>>>>>>        Handle hDispatchDriver
14862>>>>>>>>>>>        Integer retVal
14862>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14863>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
14864>>>>>>>>>>>        Function_Return retVal
14865>>>>>>>>>>>    End_Function
14866>>>>>>>>>>>
14866>>>>>>>>>>>    Function ComWidth Returns Integer
14868>>>>>>>>>>>        Handle hDispatchDriver
14868>>>>>>>>>>>        Integer retVal
14868>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14869>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
14870>>>>>>>>>>>        Function_Return retVal
14871>>>>>>>>>>>    End_Function
14872>>>>>>>>>>>
14872>>>>>>>>>>>    Function ComHeight Returns Integer
14874>>>>>>>>>>>        Handle hDispatchDriver
14874>>>>>>>>>>>        Integer retVal
14874>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14875>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
14876>>>>>>>>>>>        Function_Return retVal
14877>>>>>>>>>>>    End_Function
14878>>>>>>>>>>>
14878>>>>>>>>>>>    Function ComScaled Returns Boolean
14880>>>>>>>>>>>        Handle hDispatchDriver
14880>>>>>>>>>>>        Boolean retVal
14880>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14881>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_BOOL to retVal
14882>>>>>>>>>>>        Function_Return retVal
14883>>>>>>>>>>>    End_Function
14884>>>>>>>>>>>
14884>>>>>>>>>>>    Function ComAlpha Returns Boolean
14886>>>>>>>>>>>        Handle hDispatchDriver
14886>>>>>>>>>>>        Boolean retVal
14886>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14887>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_BOOL to retVal
14888>>>>>>>>>>>        Function_Return retVal
14889>>>>>>>>>>>    End_Function
14890>>>>>>>>>>>
14890>>>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
14892>>>>>>>>>>>        Handle hDispatchDriver
14892>>>>>>>>>>>        OLE_HANDLE retVal
14892>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14893>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_I4 to retVal
14894>>>>>>>>>>>        Function_Return retVal
14895>>>>>>>>>>>    End_Function
14896>>>>>>>>>>>
14896>>>>>>>>>>>    Procedure ComDraw OLE_HANDLE llhDC Integer llx Integer lly Integer llcx Integer llcy XTPImageState llstate
14898>>>>>>>>>>>        Handle hDispatchDriver
14898>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14899>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 6
14900>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhDC
14901>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
14902>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
14903>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
14904>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
14905>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llstate
14906>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
14907>>>>>>>>>>>    End_Procedure
14908>>>>>>>>>>>
14908>>>>>>>>>>>    Function ComCreatePicture XTPImageState llstate Returns Variant
14910>>>>>>>>>>>        Handle hDispatchDriver
14910>>>>>>>>>>>        Variant retVal
14910>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14911>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14912>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llstate
14913>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_DISPATCH to retVal
14914>>>>>>>>>>>        Function_Return retVal
14915>>>>>>>>>>>    End_Function
14916>>>>>>>>>>>
14916>>>>>>>>>>>    Function ComScale Integer llWidth Returns Variant
14918>>>>>>>>>>>        Handle hDispatchDriver
14918>>>>>>>>>>>        Variant retVal
14918>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14919>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14920>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
14921>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_DISPATCH to retVal
14922>>>>>>>>>>>        Function_Return retVal
14923>>>>>>>>>>>    End_Function
14924>>>>>>>>>>>End_Class
14925>>>>>>>>>>>
14925>>>>>>>>>>>// CLSID: {C0DE2200-374B-4AED-9306-0B7AC4343BCC}
14925>>>>>>>>>>>Class cCJImageManagerIconSet is a cComAutomationObject
14926>>>>>>>>>>>
14926>>>>>>>>>>>    Function ComId Returns Integer
14928>>>>>>>>>>>        Handle hDispatchDriver
14928>>>>>>>>>>>        Integer retVal
14928>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14929>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
14930>>>>>>>>>>>        Function_Return retVal
14931>>>>>>>>>>>    End_Function
14932>>>>>>>>>>>
14932>>>>>>>>>>>    Function ComCount Returns Integer
14934>>>>>>>>>>>        Handle hDispatchDriver
14934>>>>>>>>>>>        Integer retVal
14934>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14935>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
14936>>>>>>>>>>>        Function_Return retVal
14937>>>>>>>>>>>    End_Function
14938>>>>>>>>>>>
14938>>>>>>>>>>>    Function ComGetImage Integer llWidth Returns Variant
14940>>>>>>>>>>>        Handle hDispatchDriver
14940>>>>>>>>>>>        Variant retVal
14940>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14941>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14942>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
14943>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_DISPATCH to retVal
14944>>>>>>>>>>>        Function_Return retVal
14945>>>>>>>>>>>    End_Function
14946>>>>>>>>>>>
14946>>>>>>>>>>>    Function Com_NewEnum Returns Variant
14948>>>>>>>>>>>        Handle hDispatchDriver
14948>>>>>>>>>>>        Variant retVal
14948>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14949>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
14950>>>>>>>>>>>        Function_Return retVal
14951>>>>>>>>>>>    End_Function
14952>>>>>>>>>>>End_Class
14953>>>>>>>>>>>
14953>>>>>>>>>Use cCJPropExchange.pkg     // cCJPropExchange
Including file: cCJPropExchange.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJPropExchange.pkg)
14953>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
14953>>>>>>>>>>>Use FlexCom20.pkg
14953>>>>>>>>>>>
14953>>>>>>>>>>>// CLSID: {C0DE2200-1659-4A68-B826-DAFCAB16E824}
14953>>>>>>>>>>>Class cCJPropExchange is a cComAutomationObject
14954>>>>>>>>>>>
14954>>>>>>>>>>>    Function ComValue Returns Variant
14956>>>>>>>>>>>        Variant retVal
14956>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 0 OLE_VT_VARIANT to retVal
14957>>>>>>>>>>>        Function_Return retVal
14958>>>>>>>>>>>    End_Function
14959>>>>>>>>>>>
14959>>>>>>>>>>>    Procedure Set ComValue Variant value
14961>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 0 OLE_VT_VARIANT to value
14962>>>>>>>>>>>    End_Procedure
14963>>>>>>>>>>>
14963>>>>>>>>>>>    Function ComEncoding Returns String
14965>>>>>>>>>>>        String retVal
14965>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
14966>>>>>>>>>>>        Function_Return retVal
14967>>>>>>>>>>>    End_Function
14968>>>>>>>>>>>
14968>>>>>>>>>>>    Procedure Set ComEncoding String value
14970>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
14971>>>>>>>>>>>    End_Procedure
14972>>>>>>>>>>>
14972>>>>>>>>>>>    Function ComCreateAsXML Boolean llLoading String llSection Returns Boolean
14974>>>>>>>>>>>        Handle hDispatchDriver
14974>>>>>>>>>>>        Boolean retVal
14974>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14975>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14976>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLoading
14977>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llSection
14978>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BOOL to retVal
14979>>>>>>>>>>>        Function_Return retVal
14980>>>>>>>>>>>    End_Function
14981>>>>>>>>>>>
14981>>>>>>>>>>>    Function ComCreateAsRegistry Boolean llLoading String llSection Returns Boolean
14983>>>>>>>>>>>        Handle hDispatchDriver
14983>>>>>>>>>>>        Boolean retVal
14983>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14984>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14985>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLoading
14986>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llSection
14987>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
14988>>>>>>>>>>>        Function_Return retVal
14989>>>>>>>>>>>    End_Function
14990>>>>>>>>>>>
14990>>>>>>>>>>>    Function ComCreateAsBinaryFile Boolean llLoading String llPath Returns Boolean
14992>>>>>>>>>>>        Handle hDispatchDriver
14992>>>>>>>>>>>        Boolean retVal
14992>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14993>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14994>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLoading
14995>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14996>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BOOL to retVal
14997>>>>>>>>>>>        Function_Return retVal
14998>>>>>>>>>>>    End_Function
14999>>>>>>>>>>>
14999>>>>>>>>>>>    Function ComLoadFromFile String llPath Returns Boolean
15001>>>>>>>>>>>        Handle hDispatchDriver
15001>>>>>>>>>>>        Boolean retVal
15001>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15002>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
15003>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
15004>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_BOOL to retVal
15005>>>>>>>>>>>        Function_Return retVal
15006>>>>>>>>>>>    End_Function
15007>>>>>>>>>>>
15007>>>>>>>>>>>    Procedure ComSaveToFile String llPath
15009>>>>>>>>>>>        Handle hDispatchDriver
15009>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15010>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
15011>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
15012>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
15013>>>>>>>>>>>    End_Procedure
15014>>>>>>>>>>>
15014>>>>>>>>>>>    Function ComGetSection String llSection Returns Variant
15016>>>>>>>>>>>        Handle hDispatchDriver
15016>>>>>>>>>>>        Variant retVal
15016>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15017>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
15018>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llSection
15019>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_DISPATCH to retVal
15020>>>>>>>>>>>        Function_Return retVal
15021>>>>>>>>>>>    End_Function
15022>>>>>>>>>>>
15022>>>>>>>>>>>    Procedure ComExchangeString String llPropName String ByRef llValue String llDefaultValue
15024>>>>>>>>>>>        Handle hDispatchDriver
15024>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15025>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
15026>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPropName
15027>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_BSTR) llValue
15028>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llDefaultValue
15029>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
15030>>>>>>>>>>>    End_Procedure
15031>>>>>>>>>>>
15031>>>>>>>>>>>    Procedure ComExchangeInt String llPropName Integer ByRef llValue Integer llDefaultValue
15033>>>>>>>>>>>        Handle hDispatchDriver
15033>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15034>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
15035>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPropName
15036>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llValue
15037>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llDefaultValue
15038>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
15039>>>>>>>>>>>    End_Procedure
15040>>>>>>>>>>>
15040>>>>>>>>>>>    Function ComLoading Returns Boolean
15042>>>>>>>>>>>        Handle hDispatchDriver
15042>>>>>>>>>>>        Boolean retVal
15042>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15043>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_BOOL to retVal
15044>>>>>>>>>>>        Function_Return retVal
15045>>>>>>>>>>>    End_Function
15046>>>>>>>>>>>
15046>>>>>>>>>>>    Function ComValid Returns Boolean
15048>>>>>>>>>>>        Handle hDispatchDriver
15048>>>>>>>>>>>        Boolean retVal
15048>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15049>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
15050>>>>>>>>>>>        Function_Return retVal
15051>>>>>>>>>>>    End_Function
15052>>>>>>>>>>>
15052>>>>>>>>>>>    Procedure ComEmptySection
15054>>>>>>>>>>>        Handle hDispatchDriver
15054>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15055>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
15056>>>>>>>>>>>    End_Procedure
15057>>>>>>>>>>>End_Class
15058>>>>>>>>>>>
15058>>>>>>>>>Use cCJTooltipContext.pkg   // cCJToolTipContext
Including file: cCJTooltipContext.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJTooltipContext.pkg)
15058>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
15058>>>>>>>>>>>Use FlexCom20.pkg
15058>>>>>>>>>>>
15058>>>>>>>>>>>// ToolTip Style
15058>>>>>>>>>>>Define XTPToolTipStyle for Integer
15058>>>>>>>>>>>    Define xtpToolTipStandard for 0
15058>>>>>>>>>>>    Define xtpToolTipBalloon for 1
15058>>>>>>>>>>>    Define xtpToolTipOffice for 2
15058>>>>>>>>>>>    Define xtpToolTipRTF for 3
15058>>>>>>>>>>>    Define xtpToolTipLuna for 4
15058>>>>>>>>>>>    Define xtpToolTipResource for 5
15058>>>>>>>>>>>    Define xtpToolTipHTML for 6
15058>>>>>>>>>>>    Define xtpToolTipMarkup for 7
15058>>>>>>>>>>>    Define xtpToolTipOffice2013 for 8
15058>>>>>>>>>>>    Define xtpToolTipOffice2016 for 8
15058>>>>>>>>>>>
15058>>>>>>>>>>>// ToolTip Icon
15058>>>>>>>>>>>Define XTPToolTipIcon for Integer
15058>>>>>>>>>>>    Define xtpToolTipIconNone for 0
15058>>>>>>>>>>>    Define xtpToolTipIconInfo for 1
15058>>>>>>>>>>>    Define xtpToolTipIconWarning for 2
15058>>>>>>>>>>>    Define xtpToolTipIconError for 3
15058>>>>>>>>>>>
15058>>>>>>>>>>>// CLSID: {C0DE2200-BFB7-4925-9BB5-D3A0DDA469AF}
15058>>>>>>>>>>>Class cCJIToolTipContext is a Mixin
15059>>>>>>>>>>>
15059>>>>>>>>>>>    Function ComStyle Returns XTPToolTipStyle
15061>>>>>>>>>>>        XTPToolTipStyle retVal
15061>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
15062>>>>>>>>>>>        Function_Return retVal
15063>>>>>>>>>>>    End_Function
15064>>>>>>>>>>>
15064>>>>>>>>>>>    Procedure Set ComStyle XTPToolTipStyle value
15066>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
15067>>>>>>>>>>>    End_Procedure
15068>>>>>>>>>>>
15068>>>>>>>>>>>    Function ComMaxTipWidth Returns Integer
15070>>>>>>>>>>>        Integer retVal
15070>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
15071>>>>>>>>>>>        Function_Return retVal
15072>>>>>>>>>>>    End_Function
15073>>>>>>>>>>>
15073>>>>>>>>>>>    Procedure Set ComMaxTipWidth Integer value
15075>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
15076>>>>>>>>>>>    End_Procedure
15077>>>>>>>>>>>
15077>>>>>>>>>>>    Function ComTipBkColor Returns OLE_COLOR
15079>>>>>>>>>>>        OLE_COLOR retVal
15079>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
15080>>>>>>>>>>>        Function_Return retVal
15081>>>>>>>>>>>    End_Function
15082>>>>>>>>>>>
15082>>>>>>>>>>>    Procedure Set ComTipBkColor OLE_COLOR value
15084>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
15085>>>>>>>>>>>    End_Procedure
15086>>>>>>>>>>>
15086>>>>>>>>>>>    Function ComTipTextColor Returns OLE_COLOR
15088>>>>>>>>>>>        OLE_COLOR retVal
15088>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
15089>>>>>>>>>>>        Function_Return retVal
15090>>>>>>>>>>>    End_Function
15091>>>>>>>>>>>
15091>>>>>>>>>>>    Procedure Set ComTipTextColor OLE_COLOR value
15093>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
15094>>>>>>>>>>>    End_Procedure
15095>>>>>>>>>>>
15095>>>>>>>>>>>    Function ComFont Returns Variant
15097>>>>>>>>>>>        Variant retVal
15097>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
15098>>>>>>>>>>>        Function_Return retVal
15099>>>>>>>>>>>    End_Function
15100>>>>>>>>>>>
15100>>>>>>>>>>>    Procedure Set ComFont Variant value
15102>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
15103>>>>>>>>>>>    End_Procedure
15104>>>>>>>>>>>
15104>>>>>>>>>>>    Function ComShowOfficeBorder Returns Boolean
15106>>>>>>>>>>>        Boolean retVal
15106>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
15107>>>>>>>>>>>        Function_Return retVal
15108>>>>>>>>>>>    End_Function
15109>>>>>>>>>>>
15109>>>>>>>>>>>    Procedure Set ComShowOfficeBorder Boolean value
15111>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
15112>>>>>>>>>>>    End_Procedure
15113>>>>>>>>>>>
15113>>>>>>>>>>>    Function ComShowShadow Returns Boolean
15115>>>>>>>>>>>        Boolean retVal
15115>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
15116>>>>>>>>>>>        Function_Return retVal
15117>>>>>>>>>>>    End_Function
15118>>>>>>>>>>>
15118>>>>>>>>>>>    Procedure Set ComShowShadow Boolean value
15120>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
15121>>>>>>>>>>>    End_Procedure
15122>>>>>>>>>>>
15122>>>>>>>>>>>    Function ComImageDPIScaling Returns Boolean
15124>>>>>>>>>>>        Boolean retVal
15124>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
15125>>>>>>>>>>>        Function_Return retVal
15126>>>>>>>>>>>    End_Function
15127>>>>>>>>>>>
15127>>>>>>>>>>>    Procedure Set ComImageDPIScaling Boolean value
15129>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
15130>>>>>>>>>>>    End_Procedure
15131>>>>>>>>>>>
15131>>>>>>>>>>>    Procedure ComShowTitleAndDescription Boolean llShowTitleAndDescription XTPToolTipIcon llIconTitle
15133>>>>>>>>>>>        Handle hDispatchDriver
15133>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15134>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
15135>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShowTitleAndDescription
15136>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIconTitle
15137>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 2 OLE_VT_VOID
15138>>>>>>>>>>>    End_Procedure
15139>>>>>>>>>>>
15139>>>>>>>>>>>    Function ComIsBalloonStyleSupported Returns Boolean
15141>>>>>>>>>>>        Handle hDispatchDriver
15141>>>>>>>>>>>        Boolean retVal
15141>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15142>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_BOOL to retVal
15143>>>>>>>>>>>        Function_Return retVal
15144>>>>>>>>>>>    End_Function
15145>>>>>>>>>>>
15145>>>>>>>>>>>    Procedure ComSetMargin Integer llLeft Integer llTop Integer llRight Integer llBottom
15147>>>>>>>>>>>        Handle hDispatchDriver
15147>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15148>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
15149>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
15150>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
15151>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
15152>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
15153>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
15154>>>>>>>>>>>    End_Procedure
15155>>>>>>>>>>>
15155>>>>>>>>>>>    Procedure ComShowImage Boolean llShowImage Integer llImageBase
15157>>>>>>>>>>>        Handle hDispatchDriver
15157>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15158>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
15159>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShowImage
15160>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llImageBase
15161>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
15162>>>>>>>>>>>    End_Procedure
15163>>>>>>>>>>>
15163>>>>>>>>>>>    Procedure ComSetVectorIconSize Integer llcx Integer llcy
15165>>>>>>>>>>>        Handle hDispatchDriver
15165>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15166>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
15167>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
15168>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
15169>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 12 OLE_VT_VOID
15170>>>>>>>>>>>    End_Procedure
15171>>>>>>>>>>>End_Class
15172>>>>>>>>>>>
15172>>>>>>>>>>>// CoClass
15172>>>>>>>>>>>// CLSID: {C0DE2200-8C00-4F05-AF87-9F05BCB55475}
15172>>>>>>>>>>>Class cCJToolTipContext is a cComAutomationObject
15173>>>>>>>>>>>    Import_Class_Protocol cCJIToolTipContext
15174>>>>>>>>>>>
15174>>>>>>>>>>>    Procedure Construct_Object
15176>>>>>>>>>>>        Forward Send Construct_Object
15178>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
15179>>>>>>>>>>>    End_Procedure
15180>>>>>>>>>>>End_Class
15181>>>>>>>>>>>
15181>>>>>>>>>Use cCJTabControlItem.pkg   // cCJTabManagerMargin, cCJTabManagerColorSet, cCJTabManager, cCJTabControlItem
Including file: cCJTabControlItem.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJTabControlItem.pkg)
15181>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
15181>>>>>>>>>>>Use FlexCom20.pkg
15181>>>>>>>>>>>
15181>>>>>>>>>>>Define XTPTabAppearanceStyle for Integer
15181>>>>>>>>>>>    Define xtpTabAppearancePropertyPage for 0
15181>>>>>>>>>>>    Define xtpTabAppearancePropertyPageSelected for 1
15181>>>>>>>>>>>    Define xtpTabAppearancePropertyPageFlat for 2
15181>>>>>>>>>>>    Define xtpTabAppearancePropertyPage2003 for 3
15181>>>>>>>>>>>    Define xtpTabAppearanceStateButtons for 4
15181>>>>>>>>>>>    Define xtpTabAppearanceFlat for 6
15181>>>>>>>>>>>    Define xtpTabThemeExcel2003 for 7
15181>>>>>>>>>>>    Define xtpTabAppearanceVisio for 8
15181>>>>>>>>>>>    Define xtpTabAppearancePropertyPage2007 for 10
15181>>>>>>>>>>>    Define xtpTabAppearancePropertyPageAccess2007 for 11
15181>>>>>>>>>>>    Define xtpTabThemeVisualStudio2003 for 5
15181>>>>>>>>>>>    Define xtpTabThemeVisualStudio2005 for 9
15181>>>>>>>>>>>    Define xtpTabThemeVisualStudio2010 for 12
15181>>>>>>>>>>>    Define xtpTabThemeVisualStudio2012 for 13
15181>>>>>>>>>>>    Define xtpTabThemeVisualStudio2015 for 15
15181>>>>>>>>>>>    Define xtpTabThemeNativeWindows10 for 16
15181>>>>>>>>>>>    Define xtpTabThemeVisualStudio2017 for 17
15181>>>>>>>>>>>    Define xtpTabThemeVisualStudio2019 for 18
15181>>>>>>>>>>>    Define xtpTabThemeVisualStudio2022 for 19
15181>>>>>>>>>>>    Define xtpTabThemeOffice2013 for 14
15181>>>>>>>>>>>    Define xtpTabThemeOffice2016 for 14
15181>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio for 5
15181>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2003 for 5
15181>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2005 for 9
15181>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2010 for 12
15181>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2012 for 13
15181>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2015 for 15
15181>>>>>>>>>>>    Define xtpTabAppearanceNativeWindows10 for 16
15181>>>>>>>>>>>    Define xtpTabAppearanceExcel for 7
15181>>>>>>>>>>>
15181>>>>>>>>>>>Define XTPTabColorStyle for Integer
15181>>>>>>>>>>>    Define xtpTabColorDefault for 1
15181>>>>>>>>>>>    Define xtpTabColorOffice2003 for 4
15181>>>>>>>>>>>    Define xtpTabColorWinNative for 8
15181>>>>>>>>>>>    Define xtpTabColorResource for 32
15181>>>>>>>>>>>    Define xtpTabColorOffice2007Access for 128
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2003 for 2
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2005 for 16
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2008 for 64
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2010 for 256
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2012 for 512
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2012Dark for 1024
15181>>>>>>>>>>>    Define xtpTabColorOffice2013 for 2048
15181>>>>>>>>>>>    Define xtpTabColorOffice2016 for 2048
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2015 for 4096
15181>>>>>>>>>>>    Define xtpTabColorNativeWindows10 for 8192
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2017 for 16384
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2019 for 32768
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2022 for 65536
15181>>>>>>>>>>>    Define xtpTabColorAll for -1
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio for 2
15181>>>>>>>>>>>    Define xtpTabColorWinXP for 8
15181>>>>>>>>>>>    Define xtpTabColorWhidbey for 16
15181>>>>>>>>>>>    Define xtpTabColorAccess2007 for 128
15181>>>>>>>>>>>    Define xtpTabColorOffice2007 for 32
15181>>>>>>>>>>>
15181>>>>>>>>>>>Define XTPTabOneNoteColor for Integer
15181>>>>>>>>>>>    Define xtpTabColorBlue for 16777216
15181>>>>>>>>>>>    Define xtpTabColorYellow for 16777217
15181>>>>>>>>>>>    Define xtpTabColorGreen for 16777218
15181>>>>>>>>>>>    Define xtpTabColorRed for 16777219
15181>>>>>>>>>>>    Define xtpTabColorPurple for 16777220
15181>>>>>>>>>>>    Define xtpTabColorCyan for 16777221
15181>>>>>>>>>>>    Define xtpTabColorOrange for 16777222
15181>>>>>>>>>>>    Define xtpTabColorMagenta for 16777223
15181>>>>>>>>>>>
15181>>>>>>>>>>>Define XTPTabPosition for Integer
15181>>>>>>>>>>>    Define xtpTabPositionTop for 0
15181>>>>>>>>>>>    Define xtpTabPositionLeft for 1
15181>>>>>>>>>>>    Define xtpTabPositionBottom for 2
15181>>>>>>>>>>>    Define xtpTabPositionRight for 3
15181>>>>>>>>>>>
15181>>>>>>>>>>>Define XTPTabLayoutStyle for Integer
15181>>>>>>>>>>>    Define xtpTabLayoutAutoSize for 0
15181>>>>>>>>>>>    Define xtpTabLayoutSizeToFit for 1
15181>>>>>>>>>>>    Define xtpTabLayoutFixed for 2
15181>>>>>>>>>>>    Define xtpTabLayoutCompressed for 3
15181>>>>>>>>>>>    Define xtpTabLayoutMultiRow for 4
15181>>>>>>>>>>>    Define xtpTabLayoutRotated for 5
15181>>>>>>>>>>>
15181>>>>>>>>>>>Define XTPTabClientFrame for Integer
15181>>>>>>>>>>>    Define xtpTabFrameBorder for 0
15181>>>>>>>>>>>    Define xtpTabFrameSingleLine for 1
15181>>>>>>>>>>>    Define xtpTabFrameNone for 2
15181>>>>>>>>>>>
15181>>>>>>>>>>>Define XTPTabToolTipBehaviour for Integer
15181>>>>>>>>>>>    Define xtpTabToolTipNever for 0
15181>>>>>>>>>>>    Define xtpTabToolTipAlways for 1
15181>>>>>>>>>>>    Define xtpTabToolTipShrinkedOnly for 2
15181>>>>>>>>>>>
15181>>>>>>>>>>>Define XTPTabDrawTextFormat for Integer
15181>>>>>>>>>>>    Define xtpTabDrawTextLeft for 0
15181>>>>>>>>>>>    Define xtpTabDrawTextCenter for 1
15181>>>>>>>>>>>    Define xtpTabDrawTextRight for 2
15181>>>>>>>>>>>    Define xtpTabDrawTextVCenter for 4
15181>>>>>>>>>>>
15181>>>>>>>>>>>// CLSID: {C0DE2200-B4E9-45C7-AAF6-EF340E785590}
15181>>>>>>>>>>>Class cCJITabManagerMargin is a Mixin
15182>>>>>>>>>>>
15182>>>>>>>>>>>    Function ComLeft Returns Integer
15184>>>>>>>>>>>        Integer retVal
15184>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
15185>>>>>>>>>>>        Function_Return retVal
15186>>>>>>>>>>>    End_Function
15187>>>>>>>>>>>
15187>>>>>>>>>>>    Procedure Set ComLeft Integer value
15189>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
15190>>>>>>>>>>>    End_Procedure
15191>>>>>>>>>>>
15191>>>>>>>>>>>    Function ComTop Returns Integer
15193>>>>>>>>>>>        Integer retVal
15193>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
15194>>>>>>>>>>>        Function_Return retVal
15195>>>>>>>>>>>    End_Function
15196>>>>>>>>>>>
15196>>>>>>>>>>>    Procedure Set ComTop Integer value
15198>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
15199>>>>>>>>>>>    End_Procedure
15200>>>>>>>>>>>
15200>>>>>>>>>>>    Function ComRight Returns Integer
15202>>>>>>>>>>>        Integer retVal
15202>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
15203>>>>>>>>>>>        Function_Return retVal
15204>>>>>>>>>>>    End_Function
15205>>>>>>>>>>>
15205>>>>>>>>>>>    Procedure Set ComRight Integer value
15207>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
15208>>>>>>>>>>>    End_Procedure
15209>>>>>>>>>>>
15209>>>>>>>>>>>    Function ComBottom Returns Integer
15211>>>>>>>>>>>        Integer retVal
15211>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
15212>>>>>>>>>>>        Function_Return retVal
15213>>>>>>>>>>>    End_Function
15214>>>>>>>>>>>
15214>>>>>>>>>>>    Procedure Set ComBottom Integer value
15216>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
15217>>>>>>>>>>>    End_Procedure
15218>>>>>>>>>>>
15218>>>>>>>>>>>    Procedure ComSetRect Integer llLeft Integer llTop Integer llRight Integer llBottom
15220>>>>>>>>>>>        Handle hDispatchDriver
15220>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15221>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
15222>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
15223>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
15224>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
15225>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
15226>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
15227>>>>>>>>>>>    End_Procedure
15228>>>>>>>>>>>End_Class
15229>>>>>>>>>>>
15229>>>>>>>>>>>// CoClass
15229>>>>>>>>>>>// CLSID: {C0DE2200-90EE-4D24-8F7A-DA71BDEC35A8}
15229>>>>>>>>>>>Class cCJTabManagerMargin is a cComAutomationObject
15230>>>>>>>>>>>    Import_Class_Protocol cCJITabManagerMargin
15231>>>>>>>>>>>
15231>>>>>>>>>>>    Procedure Construct_Object
15233>>>>>>>>>>>        Forward Send Construct_Object
15235>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
15236>>>>>>>>>>>    End_Procedure
15237>>>>>>>>>>>End_Class
15238>>>>>>>>>>>
15238>>>>>>>>>>>// CLSID: {C0DE2200-ED71-4B4E-91CF-8444D6244F56}
15238>>>>>>>>>>>Class cCJITabPaintManagerColorSet is a Mixin
15239>>>>>>>>>>>
15239>>>>>>>>>>>    Function ComHeaderFaceLight Returns OLE_COLOR
15241>>>>>>>>>>>        OLE_COLOR retVal
15241>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
15242>>>>>>>>>>>        Function_Return retVal
15243>>>>>>>>>>>    End_Function
15244>>>>>>>>>>>
15244>>>>>>>>>>>    Procedure Set ComHeaderFaceLight OLE_COLOR value
15246>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
15247>>>>>>>>>>>    End_Procedure
15248>>>>>>>>>>>
15248>>>>>>>>>>>    Function ComHeaderFaceDark Returns OLE_COLOR
15250>>>>>>>>>>>        OLE_COLOR retVal
15250>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
15251>>>>>>>>>>>        Function_Return retVal
15252>>>>>>>>>>>    End_Function
15253>>>>>>>>>>>
15253>>>>>>>>>>>    Procedure Set ComHeaderFaceDark OLE_COLOR value
15255>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
15256>>>>>>>>>>>    End_Procedure
15257>>>>>>>>>>>
15257>>>>>>>>>>>    Function ComFrameBorder Returns OLE_COLOR
15259>>>>>>>>>>>        OLE_COLOR retVal
15259>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
15260>>>>>>>>>>>        Function_Return retVal
15261>>>>>>>>>>>    End_Function
15262>>>>>>>>>>>
15262>>>>>>>>>>>    Procedure Set ComFrameBorder OLE_COLOR value
15264>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
15265>>>>>>>>>>>    End_Procedure
15266>>>>>>>>>>>
15266>>>>>>>>>>>    Function ComControlFace Returns OLE_COLOR
15268>>>>>>>>>>>        OLE_COLOR retVal
15268>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
15269>>>>>>>>>>>        Function_Return retVal
15270>>>>>>>>>>>    End_Function
15271>>>>>>>>>>>
15271>>>>>>>>>>>    Procedure Set ComControlFace OLE_COLOR value
15273>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
15274>>>>>>>>>>>    End_Procedure
15275>>>>>>>>>>>
15275>>>>>>>>>>>    Function ComBorderHighlight Returns OLE_COLOR
15277>>>>>>>>>>>        OLE_COLOR retVal
15277>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
15278>>>>>>>>>>>        Function_Return retVal
15279>>>>>>>>>>>    End_Function
15280>>>>>>>>>>>
15280>>>>>>>>>>>    Procedure Set ComBorderHighlight OLE_COLOR value
15282>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
15283>>>>>>>>>>>    End_Procedure
15284>>>>>>>>>>>
15284>>>>>>>>>>>    Function ComButtonSelected Returns OLE_COLOR
15286>>>>>>>>>>>        OLE_COLOR retVal
15286>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
15287>>>>>>>>>>>        Function_Return retVal
15288>>>>>>>>>>>    End_Function
15289>>>>>>>>>>>
15289>>>>>>>>>>>    Procedure Set ComButtonSelected OLE_COLOR value
15291>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
15292>>>>>>>>>>>    End_Procedure
15293>>>>>>>>>>>
15293>>>>>>>>>>>    Function ComButtonNormal Returns OLE_COLOR
15295>>>>>>>>>>>        OLE_COLOR retVal
15295>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to retVal
15296>>>>>>>>>>>        Function_Return retVal
15297>>>>>>>>>>>    End_Function
15298>>>>>>>>>>>
15298>>>>>>>>>>>    Procedure Set ComButtonNormal OLE_COLOR value
15300>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to value
15301>>>>>>>>>>>    End_Procedure
15302>>>>>>>>>>>
15302>>>>>>>>>>>    Function ComNormalText Returns OLE_COLOR
15304>>>>>>>>>>>        OLE_COLOR retVal
15304>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
15305>>>>>>>>>>>        Function_Return retVal
15306>>>>>>>>>>>    End_Function
15307>>>>>>>>>>>
15307>>>>>>>>>>>    Procedure Set ComNormalText OLE_COLOR value
15309>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
15310>>>>>>>>>>>    End_Procedure
15311>>>>>>>>>>>
15311>>>>>>>>>>>    Function ComPressedText Returns OLE_COLOR
15313>>>>>>>>>>>        OLE_COLOR retVal
15313>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
15314>>>>>>>>>>>        Function_Return retVal
15315>>>>>>>>>>>    End_Function
15316>>>>>>>>>>>
15316>>>>>>>>>>>    Procedure Set ComPressedText OLE_COLOR value
15318>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
15319>>>>>>>>>>>    End_Procedure
15320>>>>>>>>>>>
15320>>>>>>>>>>>    Function ComSelectedText Returns OLE_COLOR
15322>>>>>>>>>>>        OLE_COLOR retVal
15322>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
15323>>>>>>>>>>>        Function_Return retVal
15324>>>>>>>>>>>    End_Function
15325>>>>>>>>>>>
15325>>>>>>>>>>>    Procedure Set ComSelectedText OLE_COLOR value
15327>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
15328>>>>>>>>>>>    End_Procedure
15329>>>>>>>>>>>
15329>>>>>>>>>>>    Function ComHighlightText Returns OLE_COLOR
15331>>>>>>>>>>>        OLE_COLOR retVal
15331>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_I4 to retVal
15332>>>>>>>>>>>        Function_Return retVal
15333>>>>>>>>>>>    End_Function
15334>>>>>>>>>>>
15334>>>>>>>>>>>    Procedure Set ComHighlightText OLE_COLOR value
15336>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_I4 to value
15337>>>>>>>>>>>    End_Procedure
15338>>>>>>>>>>>
15338>>>>>>>>>>>    Function ComDisabledText Returns OLE_COLOR
15340>>>>>>>>>>>        OLE_COLOR retVal
15340>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_I4 to retVal
15341>>>>>>>>>>>        Function_Return retVal
15342>>>>>>>>>>>    End_Function
15343>>>>>>>>>>>
15343>>>>>>>>>>>    Procedure Set ComDisabledText OLE_COLOR value
15345>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_I4 to value
15346>>>>>>>>>>>    End_Procedure
15347>>>>>>>>>>>
15347>>>>>>>>>>>    Function ComTabExcelSelectedLeftInnerBorder Returns OLE_COLOR
15349>>>>>>>>>>>        OLE_COLOR retVal
15349>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to retVal
15350>>>>>>>>>>>        Function_Return retVal
15351>>>>>>>>>>>    End_Function
15352>>>>>>>>>>>
15352>>>>>>>>>>>    Procedure Set ComTabExcelSelectedLeftInnerBorder OLE_COLOR value
15354>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to value
15355>>>>>>>>>>>    End_Procedure
15356>>>>>>>>>>>
15356>>>>>>>>>>>    Function ComTabExcelSelectedTopInnerBorder Returns OLE_COLOR
15358>>>>>>>>>>>        OLE_COLOR retVal
15358>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_I4 to retVal
15359>>>>>>>>>>>        Function_Return retVal
15360>>>>>>>>>>>    End_Function
15361>>>>>>>>>>>
15361>>>>>>>>>>>    Procedure Set ComTabExcelSelectedTopInnerBorder OLE_COLOR value
15363>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_I4 to value
15364>>>>>>>>>>>    End_Procedure
15365>>>>>>>>>>>
15365>>>>>>>>>>>    Function ComTabExcelSelectedRightInnerBorder Returns OLE_COLOR
15367>>>>>>>>>>>        OLE_COLOR retVal
15367>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
15368>>>>>>>>>>>        Function_Return retVal
15369>>>>>>>>>>>    End_Function
15370>>>>>>>>>>>
15370>>>>>>>>>>>    Procedure Set ComTabExcelSelectedRightInnerBorder OLE_COLOR value
15372>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
15373>>>>>>>>>>>    End_Procedure
15374>>>>>>>>>>>
15374>>>>>>>>>>>    Function ComTabExcelSelectedLeftOuterBorder Returns OLE_COLOR
15376>>>>>>>>>>>        OLE_COLOR retVal
15376>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_I4 to retVal
15377>>>>>>>>>>>        Function_Return retVal
15378>>>>>>>>>>>    End_Function
15379>>>>>>>>>>>
15379>>>>>>>>>>>    Procedure Set ComTabExcelSelectedLeftOuterBorder OLE_COLOR value
15381>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_I4 to value
15382>>>>>>>>>>>    End_Procedure
15383>>>>>>>>>>>
15383>>>>>>>>>>>    Function ComTabExcelSelectedRightOuterBorder Returns OLE_COLOR
15385>>>>>>>>>>>        OLE_COLOR retVal
15385>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_I4 to retVal
15386>>>>>>>>>>>        Function_Return retVal
15387>>>>>>>>>>>    End_Function
15388>>>>>>>>>>>
15388>>>>>>>>>>>    Procedure Set ComTabExcelSelectedRightOuterBorder OLE_COLOR value
15390>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_I4 to value
15391>>>>>>>>>>>    End_Procedure
15392>>>>>>>>>>>
15392>>>>>>>>>>>    Function ComTabExcelSelectedTopOuterBorder Returns OLE_COLOR
15394>>>>>>>>>>>        OLE_COLOR retVal
15394>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
15395>>>>>>>>>>>        Function_Return retVal
15396>>>>>>>>>>>    End_Function
15397>>>>>>>>>>>
15397>>>>>>>>>>>    Procedure Set ComTabExcelSelectedTopOuterBorder OLE_COLOR value
15399>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
15400>>>>>>>>>>>    End_Procedure
15401>>>>>>>>>>>
15401>>>>>>>>>>>    Function ComTabExcelNormalLeftInnerBorder Returns OLE_COLOR
15403>>>>>>>>>>>        OLE_COLOR retVal
15403>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_I4 to retVal
15404>>>>>>>>>>>        Function_Return retVal
15405>>>>>>>>>>>    End_Function
15406>>>>>>>>>>>
15406>>>>>>>>>>>    Procedure Set ComTabExcelNormalLeftInnerBorder OLE_COLOR value
15408>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_I4 to value
15409>>>>>>>>>>>    End_Procedure
15410>>>>>>>>>>>
15410>>>>>>>>>>>    Function ComTabExcelNormalTopInnerBorder Returns OLE_COLOR
15412>>>>>>>>>>>        OLE_COLOR retVal
15412>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_I4 to retVal
15413>>>>>>>>>>>        Function_Return retVal
15414>>>>>>>>>>>    End_Function
15415>>>>>>>>>>>
15415>>>>>>>>>>>    Procedure Set ComTabExcelNormalTopInnerBorder OLE_COLOR value
15417>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_I4 to value
15418>>>>>>>>>>>    End_Procedure
15419>>>>>>>>>>>
15419>>>>>>>>>>>    Function ComTabExcelNormalRightInnerBorder Returns OLE_COLOR
15421>>>>>>>>>>>        OLE_COLOR retVal
15421>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
15422>>>>>>>>>>>        Function_Return retVal
15423>>>>>>>>>>>    End_Function
15424>>>>>>>>>>>
15424>>>>>>>>>>>    Procedure Set ComTabExcelNormalRightInnerBorder OLE_COLOR value
15426>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
15427>>>>>>>>>>>    End_Procedure
15428>>>>>>>>>>>
15428>>>>>>>>>>>    Function ComTabExcelNormalLeftOuterBorder Returns OLE_COLOR
15430>>>>>>>>>>>        OLE_COLOR retVal
15430>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
15431>>>>>>>>>>>        Function_Return retVal
15432>>>>>>>>>>>    End_Function
15433>>>>>>>>>>>
15433>>>>>>>>>>>    Procedure Set ComTabExcelNormalLeftOuterBorder OLE_COLOR value
15435>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
15436>>>>>>>>>>>    End_Procedure
15437>>>>>>>>>>>
15437>>>>>>>>>>>    Function ComTabExcelNormalRightOuterBorder Returns OLE_COLOR
15439>>>>>>>>>>>        OLE_COLOR retVal
15439>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
15440>>>>>>>>>>>        Function_Return retVal
15441>>>>>>>>>>>    End_Function
15442>>>>>>>>>>>
15442>>>>>>>>>>>    Procedure Set ComTabExcelNormalRightOuterBorder OLE_COLOR value
15444>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
15445>>>>>>>>>>>    End_Procedure
15446>>>>>>>>>>>
15446>>>>>>>>>>>    Function ComTabExcelNormalTopOuterBorder Returns OLE_COLOR
15448>>>>>>>>>>>        OLE_COLOR retVal
15448>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to retVal
15449>>>>>>>>>>>        Function_Return retVal
15450>>>>>>>>>>>    End_Function
15451>>>>>>>>>>>
15451>>>>>>>>>>>    Procedure Set ComTabExcelNormalTopOuterBorder OLE_COLOR value
15453>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to value
15454>>>>>>>>>>>    End_Procedure
15455>>>>>>>>>>>
15455>>>>>>>>>>>    Function ComTabPropertyPageHighlight Returns OLE_COLOR
15457>>>>>>>>>>>        OLE_COLOR retVal
15457>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to retVal
15458>>>>>>>>>>>        Function_Return retVal
15459>>>>>>>>>>>    End_Function
15460>>>>>>>>>>>
15460>>>>>>>>>>>    Procedure Set ComTabPropertyPageHighlight OLE_COLOR value
15462>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to value
15463>>>>>>>>>>>    End_Procedure
15464>>>>>>>>>>>
15464>>>>>>>>>>>    Function ComTabPropertyPageShadow Returns OLE_COLOR
15466>>>>>>>>>>>        OLE_COLOR retVal
15466>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_I4 to retVal
15467>>>>>>>>>>>        Function_Return retVal
15468>>>>>>>>>>>    End_Function
15469>>>>>>>>>>>
15469>>>>>>>>>>>    Procedure Set ComTabPropertyPageShadow OLE_COLOR value
15471>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_I4 to value
15472>>>>>>>>>>>    End_Procedure
15473>>>>>>>>>>>
15473>>>>>>>>>>>    Function ComTabPropertyPageDarkShadow Returns OLE_COLOR
15475>>>>>>>>>>>        OLE_COLOR retVal
15475>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_I4 to retVal
15476>>>>>>>>>>>        Function_Return retVal
15477>>>>>>>>>>>    End_Function
15478>>>>>>>>>>>
15478>>>>>>>>>>>    Procedure Set ComTabPropertyPageDarkShadow OLE_COLOR value
15480>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_I4 to value
15481>>>>>>>>>>>    End_Procedure
15482>>>>>>>>>>>
15482>>>>>>>>>>>    Function ComTabPropertyPage2003DarkShadow Returns OLE_COLOR
15484>>>>>>>>>>>        OLE_COLOR retVal
15484>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
15485>>>>>>>>>>>        Function_Return retVal
15486>>>>>>>>>>>    End_Function
15487>>>>>>>>>>>
15487>>>>>>>>>>>    Procedure Set ComTabPropertyPage2003DarkShadow OLE_COLOR value
15489>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
15490>>>>>>>>>>>    End_Procedure
15491>>>>>>>>>>>
15491>>>>>>>>>>>    Function ComTabPropertyPage2003FrameBorder Returns OLE_COLOR
15493>>>>>>>>>>>        OLE_COLOR retVal
15493>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to retVal
15494>>>>>>>>>>>        Function_Return retVal
15495>>>>>>>>>>>    End_Function
15496>>>>>>>>>>>
15496>>>>>>>>>>>    Procedure Set ComTabPropertyPage2003FrameBorder OLE_COLOR value
15498>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to value
15499>>>>>>>>>>>    End_Procedure
15500>>>>>>>>>>>
15500>>>>>>>>>>>    Function ComTabPropertyPage2003BorderLeftHighlight Returns OLE_COLOR
15502>>>>>>>>>>>        OLE_COLOR retVal
15502>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
15503>>>>>>>>>>>        Function_Return retVal
15504>>>>>>>>>>>    End_Function
15505>>>>>>>>>>>
15505>>>>>>>>>>>    Procedure Set ComTabPropertyPage2003BorderLeftHighlight OLE_COLOR value
15507>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
15508>>>>>>>>>>>    End_Procedure
15509>>>>>>>>>>>
15509>>>>>>>>>>>    Function ComTabPropertyPage2003BorderTopHighlight Returns OLE_COLOR
15511>>>>>>>>>>>        OLE_COLOR retVal
15511>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
15512>>>>>>>>>>>        Function_Return retVal
15513>>>>>>>>>>>    End_Function
15514>>>>>>>>>>>
15514>>>>>>>>>>>    Procedure Set ComTabPropertyPage2003BorderTopHighlight OLE_COLOR value
15516>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
15517>>>>>>>>>>>    End_Procedure
15518>>>>>>>>>>>
15518>>>>>>>>>>>    Function ComTabStateButtonFaceLight Returns OLE_COLOR
15520>>>>>>>>>>>        OLE_COLOR retVal
15520>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
15521>>>>>>>>>>>        Function_Return retVal
15522>>>>>>>>>>>    End_Function
15523>>>>>>>>>>>
15523>>>>>>>>>>>    Procedure Set ComTabStateButtonFaceLight OLE_COLOR value
15525>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
15526>>>>>>>>>>>    End_Procedure
15527>>>>>>>>>>>
15527>>>>>>>>>>>    Function ComTabStateButtonFaceDark Returns OLE_COLOR
15529>>>>>>>>>>>        OLE_COLOR retVal
15529>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_I4 to retVal
15530>>>>>>>>>>>        Function_Return retVal
15531>>>>>>>>>>>    End_Function
15532>>>>>>>>>>>
15532>>>>>>>>>>>    Procedure Set ComTabStateButtonFaceDark OLE_COLOR value
15534>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_I4 to value
15535>>>>>>>>>>>    End_Procedure
15536>>>>>>>>>>>
15536>>>>>>>>>>>    Function ComTabStateButtonBorderTopLeft Returns OLE_COLOR
15538>>>>>>>>>>>        OLE_COLOR retVal
15538>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_I4 to retVal
15539>>>>>>>>>>>        Function_Return retVal
15540>>>>>>>>>>>    End_Function
15541>>>>>>>>>>>
15541>>>>>>>>>>>    Procedure Set ComTabStateButtonBorderTopLeft OLE_COLOR value
15543>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_I4 to value
15544>>>>>>>>>>>    End_Procedure
15545>>>>>>>>>>>
15545>>>>>>>>>>>    Function ComTabStateButtonBorderBottomRight Returns OLE_COLOR
15547>>>>>>>>>>>        OLE_COLOR retVal
15547>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 35 OLE_VT_I4 to retVal
15548>>>>>>>>>>>        Function_Return retVal
15549>>>>>>>>>>>    End_Function
15550>>>>>>>>>>>
15550>>>>>>>>>>>    Procedure Set ComTabStateButtonBorderBottomRight OLE_COLOR value
15552>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 35 OLE_VT_I4 to value
15553>>>>>>>>>>>    End_Procedure
15554>>>>>>>>>>>
15554>>>>>>>>>>>    Function ComPaneFace Returns OLE_COLOR
15556>>>>>>>>>>>        OLE_COLOR retVal
15556>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_I4 to retVal
15557>>>>>>>>>>>        Function_Return retVal
15558>>>>>>>>>>>    End_Function
15559>>>>>>>>>>>
15559>>>>>>>>>>>    Procedure Set ComPaneFace OLE_COLOR value
15561>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_I4 to value
15562>>>>>>>>>>>    End_Procedure
15563>>>>>>>>>>>
15563>>>>>>>>>>>    Function ComButtonHighlighted Returns OLE_COLOR
15565>>>>>>>>>>>        OLE_COLOR retVal
15565>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_I4 to retVal
15566>>>>>>>>>>>        Function_Return retVal
15567>>>>>>>>>>>    End_Function
15568>>>>>>>>>>>
15568>>>>>>>>>>>    Procedure Set ComButtonHighlighted OLE_COLOR value
15570>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_I4 to value
15571>>>>>>>>>>>    End_Procedure
15572>>>>>>>>>>>
15572>>>>>>>>>>>    Function ComPressedButton Returns OLE_COLOR
15574>>>>>>>>>>>        OLE_COLOR retVal
15574>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_I4 to retVal
15575>>>>>>>>>>>        Function_Return retVal
15576>>>>>>>>>>>    End_Function
15577>>>>>>>>>>>
15577>>>>>>>>>>>    Procedure Set ComPressedButton OLE_COLOR value
15579>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_I4 to value
15580>>>>>>>>>>>    End_Procedure
15581>>>>>>>>>>>
15581>>>>>>>>>>>    Function ComHighlightedCloseButton Returns OLE_COLOR
15583>>>>>>>>>>>        OLE_COLOR retVal
15583>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
15584>>>>>>>>>>>        Function_Return retVal
15585>>>>>>>>>>>    End_Function
15586>>>>>>>>>>>
15586>>>>>>>>>>>    Procedure Set ComHighlightedCloseButton OLE_COLOR value
15588>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
15589>>>>>>>>>>>    End_Procedure
15590>>>>>>>>>>>
15590>>>>>>>>>>>    Function ComSelectedPressedButton Returns OLE_COLOR
15592>>>>>>>>>>>        OLE_COLOR retVal
15592>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_I4 to retVal
15593>>>>>>>>>>>        Function_Return retVal
15594>>>>>>>>>>>    End_Function
15595>>>>>>>>>>>
15595>>>>>>>>>>>    Procedure Set ComSelectedPressedButton OLE_COLOR value
15597>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_I4 to value
15598>>>>>>>>>>>    End_Procedure
15599>>>>>>>>>>>
15599>>>>>>>>>>>    Function ComSelectedHighlightedButton Returns OLE_COLOR
15601>>>>>>>>>>>        OLE_COLOR retVal
15601>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 41 OLE_VT_I4 to retVal
15602>>>>>>>>>>>        Function_Return retVal
15603>>>>>>>>>>>    End_Function
15604>>>>>>>>>>>
15604>>>>>>>>>>>    Procedure Set ComSelectedHighlightedButton OLE_COLOR value
15606>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 41 OLE_VT_I4 to value
15607>>>>>>>>>>>    End_Procedure
15608>>>>>>>>>>>
15608>>>>>>>>>>>    Function ComButtonBorder Returns OLE_COLOR
15610>>>>>>>>>>>        OLE_COLOR retVal
15610>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 42 OLE_VT_I4 to retVal
15611>>>>>>>>>>>        Function_Return retVal
15612>>>>>>>>>>>    End_Function
15613>>>>>>>>>>>
15613>>>>>>>>>>>    Procedure Set ComButtonBorder OLE_COLOR value
15615>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 42 OLE_VT_I4 to value
15616>>>>>>>>>>>    End_Procedure
15617>>>>>>>>>>>
15617>>>>>>>>>>>    Function ComButtonBorderHot Returns OLE_COLOR
15619>>>>>>>>>>>        OLE_COLOR retVal
15619>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 43 OLE_VT_I4 to retVal
15620>>>>>>>>>>>        Function_Return retVal
15621>>>>>>>>>>>    End_Function
15622>>>>>>>>>>>
15622>>>>>>>>>>>    Procedure Set ComButtonBorderHot OLE_COLOR value
15624>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 43 OLE_VT_I4 to value
15625>>>>>>>>>>>    End_Procedure
15626>>>>>>>>>>>
15626>>>>>>>>>>>    Function ComHighlightCloseText Returns OLE_COLOR
15628>>>>>>>>>>>        OLE_COLOR retVal
15628>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 44 OLE_VT_I4 to retVal
15629>>>>>>>>>>>        Function_Return retVal
15630>>>>>>>>>>>    End_Function
15631>>>>>>>>>>>
15631>>>>>>>>>>>    Procedure Set ComHighlightCloseText OLE_COLOR value
15633>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 44 OLE_VT_I4 to value
15634>>>>>>>>>>>    End_Procedure
15635>>>>>>>>>>>
15635>>>>>>>>>>>    Function ComSelectedPressedText Returns OLE_COLOR
15637>>>>>>>>>>>        OLE_COLOR retVal
15637>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_I4 to retVal
15638>>>>>>>>>>>        Function_Return retVal
15639>>>>>>>>>>>    End_Function
15640>>>>>>>>>>>
15640>>>>>>>>>>>    Procedure Set ComSelectedPressedText OLE_COLOR value
15642>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_I4 to value
15643>>>>>>>>>>>    End_Procedure
15644>>>>>>>>>>>
15644>>>>>>>>>>>    Function ComSelectedHighlightedText Returns OLE_COLOR
15646>>>>>>>>>>>        OLE_COLOR retVal
15646>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_I4 to retVal
15647>>>>>>>>>>>        Function_Return retVal
15648>>>>>>>>>>>    End_Function
15649>>>>>>>>>>>
15649>>>>>>>>>>>    Procedure Set ComSelectedHighlightedText OLE_COLOR value
15651>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_I4 to value
15652>>>>>>>>>>>    End_Procedure
15653>>>>>>>>>>>
15653>>>>>>>>>>>    Function ComActiveFilesGlyph Returns OLE_COLOR
15655>>>>>>>>>>>        OLE_COLOR retVal
15655>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 47 OLE_VT_I4 to retVal
15656>>>>>>>>>>>        Function_Return retVal
15657>>>>>>>>>>>    End_Function
15658>>>>>>>>>>>
15658>>>>>>>>>>>    Procedure Set ComActiveFilesGlyph OLE_COLOR value
15660>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 47 OLE_VT_I4 to value
15661>>>>>>>>>>>    End_Procedure
15662>>>>>>>>>>>
15662>>>>>>>>>>>    Function ComActiveFilesGlyphHighlighted Returns OLE_COLOR
15664>>>>>>>>>>>        OLE_COLOR retVal
15664>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 48 OLE_VT_I4 to retVal
15665>>>>>>>>>>>        Function_Return retVal
15666>>>>>>>>>>>    End_Function
15667>>>>>>>>>>>
15667>>>>>>>>>>>    Procedure Set ComActiveFilesGlyphHighlighted OLE_COLOR value
15669>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 48 OLE_VT_I4 to value
15670>>>>>>>>>>>    End_Procedure
15671>>>>>>>>>>>
15671>>>>>>>>>>>    Function ComActiveFilesGlyphPressed Returns OLE_COLOR
15673>>>>>>>>>>>        OLE_COLOR retVal
15673>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 49 OLE_VT_I4 to retVal
15674>>>>>>>>>>>        Function_Return retVal
15675>>>>>>>>>>>    End_Function
15676>>>>>>>>>>>
15676>>>>>>>>>>>    Procedure Set ComActiveFilesGlyphPressed OLE_COLOR value
15678>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 49 OLE_VT_I4 to value
15679>>>>>>>>>>>    End_Procedure
15680>>>>>>>>>>>
15680>>>>>>>>>>>    Function ComActiveFilesBack Returns OLE_COLOR
15682>>>>>>>>>>>        OLE_COLOR retVal
15682>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to retVal
15683>>>>>>>>>>>        Function_Return retVal
15684>>>>>>>>>>>    End_Function
15685>>>>>>>>>>>
15685>>>>>>>>>>>    Procedure Set ComActiveFilesBack OLE_COLOR value
15687>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to value
15688>>>>>>>>>>>    End_Procedure
15689>>>>>>>>>>>
15689>>>>>>>>>>>    Function ComActiveFilesBackHighlighted Returns OLE_COLOR
15691>>>>>>>>>>>        OLE_COLOR retVal
15691>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_I4 to retVal
15692>>>>>>>>>>>        Function_Return retVal
15693>>>>>>>>>>>    End_Function
15694>>>>>>>>>>>
15694>>>>>>>>>>>    Procedure Set ComActiveFilesBackHighlighted OLE_COLOR value
15696>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_I4 to value
15697>>>>>>>>>>>    End_Procedure
15698>>>>>>>>>>>
15698>>>>>>>>>>>    Function ComActiveFilesBackPressed Returns OLE_COLOR
15700>>>>>>>>>>>        OLE_COLOR retVal
15700>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
15701>>>>>>>>>>>        Function_Return retVal
15702>>>>>>>>>>>    End_Function
15703>>>>>>>>>>>
15703>>>>>>>>>>>    Procedure Set ComActiveFilesBackPressed OLE_COLOR value
15705>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
15706>>>>>>>>>>>    End_Procedure
15707>>>>>>>>>>>End_Class
15708>>>>>>>>>>>
15708>>>>>>>>>>>// CoClass
15708>>>>>>>>>>>// CLSID: {C0DE2200-494B-4521-B709-C324C2C09578}
15708>>>>>>>>>>>Class cCJTabPaintManagerColorSet is a cComAutomationObject
15709>>>>>>>>>>>    Import_Class_Protocol cCJITabPaintManagerColorSet
15710>>>>>>>>>>>
15710>>>>>>>>>>>    Procedure Construct_Object
15712>>>>>>>>>>>        Forward Send Construct_Object
15714>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
15715>>>>>>>>>>>    End_Procedure
15716>>>>>>>>>>>End_Class
15717>>>>>>>>>>>
15717>>>>>>>>>>>// CLSID: {C0DE2200-9CE6-4D40-B6C5-3B9425FBB55A}
15717>>>>>>>>>>>Class cCJITabPaintManager is a Mixin
15718>>>>>>>>>>>
15718>>>>>>>>>>>    Function ComAppearance Returns XTPTabAppearanceStyle
15720>>>>>>>>>>>        XTPTabAppearanceStyle retVal
15720>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
15721>>>>>>>>>>>        Function_Return retVal
15722>>>>>>>>>>>    End_Function
15723>>>>>>>>>>>
15723>>>>>>>>>>>    Procedure Set ComAppearance XTPTabAppearanceStyle value
15725>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
15726>>>>>>>>>>>    End_Procedure
15727>>>>>>>>>>>
15727>>>>>>>>>>>    Function ComColor Returns XTPTabColorStyle
WARNING: 4543 Redefining function return type for GET_COMCOLOR with INTEGER (first defined as UINTEGER) ON LINE: 832 (15727) OF FILE: C:\Program Files\DataFlex 24.0\Pkg\cCJTabControlItem.pkg
15729>>>>>>>>>>>        XTPTabColorStyle retVal
15729>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
15730>>>>>>>>>>>        Function_Return retVal
15731>>>>>>>>>>>    End_Function
15732>>>>>>>>>>>
15732>>>>>>>>>>>    Procedure Set ComColor XTPTabColorStyle value
15734>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
15735>>>>>>>>>>>    End_Procedure
15736>>>>>>>>>>>
15736>>>>>>>>>>>    Function ComLayout Returns XTPTabLayoutStyle
15738>>>>>>>>>>>        XTPTabLayoutStyle retVal
15738>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
15739>>>>>>>>>>>        Function_Return retVal
15740>>>>>>>>>>>    End_Function
15741>>>>>>>>>>>
15741>>>>>>>>>>>    Procedure Set ComLayout XTPTabLayoutStyle value
15743>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
15744>>>>>>>>>>>    End_Procedure
15745>>>>>>>>>>>
15745>>>>>>>>>>>    Function ComPosition Returns XTPTabPosition
15747>>>>>>>>>>>        XTPTabPosition retVal
15747>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
15748>>>>>>>>>>>        Function_Return retVal
15749>>>>>>>>>>>    End_Function
15750>>>>>>>>>>>
15750>>>>>>>>>>>    Procedure Set ComPosition XTPTabPosition value
15752>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
15753>>>>>>>>>>>    End_Procedure
15754>>>>>>>>>>>
15754>>>>>>>>>>>    Function ComBoldSelected Returns Boolean
15756>>>>>>>>>>>        Boolean retVal
15756>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
15757>>>>>>>>>>>        Function_Return retVal
15758>>>>>>>>>>>    End_Function
15759>>>>>>>>>>>
15759>>>>>>>>>>>    Procedure Set ComBoldSelected Boolean value
15761>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
15762>>>>>>>>>>>    End_Procedure
15763>>>>>>>>>>>
15763>>>>>>>>>>>    Function ComHotTracking Returns Boolean
15765>>>>>>>>>>>        Boolean retVal
15765>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
15766>>>>>>>>>>>        Function_Return retVal
15767>>>>>>>>>>>    End_Function
15768>>>>>>>>>>>
15768>>>>>>>>>>>    Procedure Set ComHotTracking Boolean value
15770>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
15771>>>>>>>>>>>    End_Procedure
15772>>>>>>>>>>>
15772>>>>>>>>>>>    Function ComShowIcons Returns Boolean
15774>>>>>>>>>>>        Boolean retVal
15774>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
15775>>>>>>>>>>>        Function_Return retVal
15776>>>>>>>>>>>    End_Function
15777>>>>>>>>>>>
15777>>>>>>>>>>>    Procedure Set ComShowIcons Boolean value
15779>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
15780>>>>>>>>>>>    End_Procedure
15781>>>>>>>>>>>
15781>>>>>>>>>>>    Function ComDisableLunaColors Returns Boolean
15783>>>>>>>>>>>        Boolean retVal
15783>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
15784>>>>>>>>>>>        Function_Return retVal
15785>>>>>>>>>>>    End_Function
15786>>>>>>>>>>>
15786>>>>>>>>>>>    Procedure Set ComDisableLunaColors Boolean value
15788>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
15789>>>>>>>>>>>    End_Procedure
15790>>>>>>>>>>>
15790>>>>>>>>>>>    Function ComOneNoteColors Returns Boolean
15792>>>>>>>>>>>        Boolean retVal
15792>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
15793>>>>>>>>>>>        Function_Return retVal
15794>>>>>>>>>>>    End_Function
15795>>>>>>>>>>>
15795>>>>>>>>>>>    Procedure Set ComOneNoteColors Boolean value
15797>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
15798>>>>>>>>>>>    End_Procedure
15799>>>>>>>>>>>
15799>>>>>>>>>>>    Function ComClientFrame Returns XTPTabClientFrame
15801>>>>>>>>>>>        XTPTabClientFrame retVal
15801>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_I4 to retVal
15802>>>>>>>>>>>        Function_Return retVal
15803>>>>>>>>>>>    End_Function
15804>>>>>>>>>>>
15804>>>>>>>>>>>    Procedure Set ComClientFrame XTPTabClientFrame value
15806>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_I4 to value
15807>>>>>>>>>>>    End_Procedure
15808>>>>>>>>>>>
15808>>>>>>>>>>>    Function ComStaticFrame Returns Boolean
15810>>>>>>>>>>>        Boolean retVal
15810>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
15811>>>>>>>>>>>        Function_Return retVal
15812>>>>>>>>>>>    End_Function
15813>>>>>>>>>>>
15813>>>>>>>>>>>    Procedure Set ComStaticFrame Boolean value
15815>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
15816>>>>>>>>>>>    End_Procedure
15817>>>>>>>>>>>
15817>>>>>>>>>>>    Function ComDrawTextPathEllipsis Returns Boolean
15819>>>>>>>>>>>        Boolean retVal
15819>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
15820>>>>>>>>>>>        Function_Return retVal
15821>>>>>>>>>>>    End_Function
15822>>>>>>>>>>>
15822>>>>>>>>>>>    Procedure Set ComDrawTextPathEllipsis Boolean value
15824>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
15825>>>>>>>>>>>    End_Procedure
15826>>>>>>>>>>>
15826>>>>>>>>>>>    Function ComDrawTextNoPrefix Returns Boolean
15828>>>>>>>>>>>        Boolean retVal
15828>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
15829>>>>>>>>>>>        Function_Return retVal
15830>>>>>>>>>>>    End_Function
15831>>>>>>>>>>>
15831>>>>>>>>>>>    Procedure Set ComDrawTextNoPrefix Boolean value
15833>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
15834>>>>>>>>>>>    End_Procedure
15835>>>>>>>>>>>
15835>>>>>>>>>>>    Function ComFont Returns Variant
15837>>>>>>>>>>>        Variant retVal
15837>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
15838>>>>>>>>>>>        Function_Return retVal
15839>>>>>>>>>>>    End_Function
15840>>>>>>>>>>>
15840>>>>>>>>>>>    Procedure Set ComFont Variant value
15842>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
15843>>>>>>>>>>>    End_Procedure
15844>>>>>>>>>>>
15844>>>>>>>>>>>    Function ComMultiRowFixedSelection Returns Boolean
15846>>>>>>>>>>>        Boolean retVal
15846>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
15847>>>>>>>>>>>        Function_Return retVal
15848>>>>>>>>>>>    End_Function
15849>>>>>>>>>>>
15849>>>>>>>>>>>    Procedure Set ComMultiRowFixedSelection Boolean value
15851>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
15852>>>>>>>>>>>    End_Procedure
15853>>>>>>>>>>>
15853>>>>>>>>>>>    Function ComMultiRowJustified Returns Boolean
15855>>>>>>>>>>>        Boolean retVal
15855>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_BOOL to retVal
15856>>>>>>>>>>>        Function_Return retVal
15857>>>>>>>>>>>    End_Function
15858>>>>>>>>>>>
15858>>>>>>>>>>>    Procedure Set ComMultiRowJustified Boolean value
15860>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_BOOL to value
15861>>>>>>>>>>>    End_Procedure
15862>>>>>>>>>>>
15862>>>>>>>>>>>    Function ComToolTipBehaviour Returns XTPTabToolTipBehaviour
15864>>>>>>>>>>>        XTPTabToolTipBehaviour retVal
15864>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
15865>>>>>>>>>>>        Function_Return retVal
15866>>>>>>>>>>>    End_Function
15867>>>>>>>>>>>
15867>>>>>>>>>>>    Procedure Set ComToolTipBehaviour XTPTabToolTipBehaviour value
15869>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
15870>>>>>>>>>>>    End_Procedure
15871>>>>>>>>>>>
15871>>>>>>>>>>>    Function ComSelectTabOnDragOver Returns Integer
15873>>>>>>>>>>>        Integer retVal
15873>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to retVal
15874>>>>>>>>>>>        Function_Return retVal
15875>>>>>>>>>>>    End_Function
15876>>>>>>>>>>>
15876>>>>>>>>>>>    Procedure Set ComSelectTabOnDragOver Integer value
15878>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to value
15879>>>>>>>>>>>    End_Procedure
15880>>>>>>>>>>>
15880>>>>>>>>>>>    Function ComFillBackground Returns Boolean
15882>>>>>>>>>>>        Boolean retVal
15882>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_BOOL to retVal
15883>>>>>>>>>>>        Function_Return retVal
15884>>>>>>>>>>>    End_Function
15885>>>>>>>>>>>
15885>>>>>>>>>>>    Procedure Set ComFillBackground Boolean value
15887>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_BOOL to value
15888>>>>>>>>>>>    End_Procedure
15889>>>>>>>>>>>
15889>>>>>>>>>>>    Function ComRotateImageOnVerticalDraw Returns Boolean
15891>>>>>>>>>>>        Boolean retVal
15891>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
15892>>>>>>>>>>>        Function_Return retVal
15893>>>>>>>>>>>    End_Function
15894>>>>>>>>>>>
15894>>>>>>>>>>>    Procedure Set ComRotateImageOnVerticalDraw Boolean value
15896>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
15897>>>>>>>>>>>    End_Procedure
15898>>>>>>>>>>>
15898>>>>>>>>>>>    Function ComFixedTabWidth Returns Integer
15900>>>>>>>>>>>        Integer retVal
15900>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_I4 to retVal
15901>>>>>>>>>>>        Function_Return retVal
15902>>>>>>>>>>>    End_Function
15903>>>>>>>>>>>
15903>>>>>>>>>>>    Procedure Set ComFixedTabWidth Integer value
15905>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_I4 to value
15906>>>>>>>>>>>    End_Procedure
15907>>>>>>>>>>>
15907>>>>>>>>>>>    Function ComMinTabWidth Returns Integer
15909>>>>>>>>>>>        Integer retVal
15909>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
15910>>>>>>>>>>>        Function_Return retVal
15911>>>>>>>>>>>    End_Function
15912>>>>>>>>>>>
15912>>>>>>>>>>>    Procedure Set ComMinTabWidth Integer value
15914>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
15915>>>>>>>>>>>    End_Procedure
15916>>>>>>>>>>>
15916>>>>>>>>>>>    Function ComMaxTabWidth Returns Integer
15918>>>>>>>>>>>        Integer retVal
15918>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to retVal
15919>>>>>>>>>>>        Function_Return retVal
15920>>>>>>>>>>>    End_Function
15921>>>>>>>>>>>
15921>>>>>>>>>>>    Procedure Set ComMaxTabWidth Integer value
15923>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to value
15924>>>>>>>>>>>    End_Procedure
15925>>>>>>>>>>>
15925>>>>>>>>>>>    Function ComDrawTextFormat Returns XTPTabDrawTextFormat
15927>>>>>>>>>>>        XTPTabDrawTextFormat retVal
15927>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
15928>>>>>>>>>>>        Function_Return retVal
15929>>>>>>>>>>>    End_Function
15930>>>>>>>>>>>
15930>>>>>>>>>>>    Procedure Set ComDrawTextFormat XTPTabDrawTextFormat value
15932>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
15933>>>>>>>>>>>    End_Procedure
15934>>>>>>>>>>>
15934>>>>>>>>>>>    Function ComShowTabs Returns Boolean
15936>>>>>>>>>>>        Boolean retVal
15936>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to retVal
15937>>>>>>>>>>>        Function_Return retVal
15938>>>>>>>>>>>    End_Function
15939>>>>>>>>>>>
15939>>>>>>>>>>>    Procedure Set ComShowTabs Boolean value
15941>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to value
15942>>>>>>>>>>>    End_Procedure
15943>>>>>>>>>>>
15943>>>>>>>>>>>    Function ComClearTypeTextQuality Returns Boolean
15945>>>>>>>>>>>        Boolean retVal
15945>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_BOOL to retVal
15946>>>>>>>>>>>        Function_Return retVal
15947>>>>>>>>>>>    End_Function
15948>>>>>>>>>>>
15948>>>>>>>>>>>    Procedure Set ComClearTypeTextQuality Boolean value
15950>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_BOOL to value
15951>>>>>>>>>>>    End_Procedure
15952>>>>>>>>>>>
15952>>>>>>>>>>>    Function ComVerticalTextTopToBottom Returns Boolean
15954>>>>>>>>>>>        Boolean retVal
15954>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
15955>>>>>>>>>>>        Function_Return retVal
15956>>>>>>>>>>>    End_Function
15957>>>>>>>>>>>
15957>>>>>>>>>>>    Procedure Set ComVerticalTextTopToBottom Boolean value
15959>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
15960>>>>>>>>>>>    End_Procedure
15961>>>>>>>>>>>
15961>>>>>>>>>>>    Function ComMultiRowTabsOptimization Returns Boolean
15963>>>>>>>>>>>        Boolean retVal
15963>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_BOOL to retVal
15964>>>>>>>>>>>        Function_Return retVal
15965>>>>>>>>>>>    End_Function
15966>>>>>>>>>>>
15966>>>>>>>>>>>    Procedure Set ComMultiRowTabsOptimization Boolean value
15968>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_BOOL to value
15969>>>>>>>>>>>    End_Procedure
15970>>>>>>>>>>>
15970>>>>>>>>>>>    Function ComIsColorSupported XTPTabColorStyle llColor Returns Boolean
15972>>>>>>>>>>>        Handle hDispatchDriver
15972>>>>>>>>>>>        Boolean retVal
15972>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15973>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
15974>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
15975>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_BOOL to retVal
15976>>>>>>>>>>>        Function_Return retVal
15977>>>>>>>>>>>    End_Function
15978>>>>>>>>>>>
15978>>>>>>>>>>>    Function ComClientMargin Returns Variant
15980>>>>>>>>>>>        Handle hDispatchDriver
15980>>>>>>>>>>>        Variant retVal
15980>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15981>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_DISPATCH to retVal
15982>>>>>>>>>>>        Function_Return retVal
15983>>>>>>>>>>>    End_Function
15984>>>>>>>>>>>
15984>>>>>>>>>>>    Function ComControlMargin Returns Variant
15986>>>>>>>>>>>        Handle hDispatchDriver
15986>>>>>>>>>>>        Variant retVal
15986>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15987>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
15988>>>>>>>>>>>        Function_Return retVal
15989>>>>>>>>>>>    End_Function
15990>>>>>>>>>>>
15990>>>>>>>>>>>    Function ComHeaderMargin Returns Variant
15992>>>>>>>>>>>        Handle hDispatchDriver
15992>>>>>>>>>>>        Variant retVal
15992>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15993>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 15 OLE_VT_DISPATCH to retVal
15994>>>>>>>>>>>        Function_Return retVal
15995>>>>>>>>>>>    End_Function
15996>>>>>>>>>>>
15996>>>>>>>>>>>    Function ComButtonMargin Returns Variant
15998>>>>>>>>>>>        Handle hDispatchDriver
15998>>>>>>>>>>>        Variant retVal
15998>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15999>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
16000>>>>>>>>>>>        Function_Return retVal
16001>>>>>>>>>>>    End_Function
16002>>>>>>>>>>>
16002>>>>>>>>>>>    Function ComColorSet Returns Variant
16004>>>>>>>>>>>        Handle hDispatchDriver
16004>>>>>>>>>>>        Variant retVal
16004>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16005>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 19 OLE_VT_DISPATCH to retVal
16006>>>>>>>>>>>        Function_Return retVal
16007>>>>>>>>>>>    End_Function
16008>>>>>>>>>>>
16008>>>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
16010>>>>>>>>>>>        Handle hDispatchDriver
16010>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16011>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16012>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
16013>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
16014>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
16015>>>>>>>>>>>    End_Procedure
16016>>>>>>>>>>>End_Class
16017>>>>>>>>>>>
16017>>>>>>>>>>>// CoClass
16017>>>>>>>>>>>// CLSID: {C0DE2200-BDD4-4257-8CF4-A2AB1674C51E}
16017>>>>>>>>>>>Class cCJTabPaintManager is a cComAutomationObject
16018>>>>>>>>>>>    Import_Class_Protocol cCJITabPaintManager
16019>>>>>>>>>>>
16019>>>>>>>>>>>    Procedure Construct_Object
16021>>>>>>>>>>>        Forward Send Construct_Object
16023>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
16024>>>>>>>>>>>    End_Procedure
16025>>>>>>>>>>>End_Class
16026>>>>>>>>>>>
16026>>>>>>>>>>>// CLSID: {C0DE2200-9479-48D5-A14D-077A9FD5D276}
16026>>>>>>>>>>>Class cCJITabControlItem is a Mixin
16027>>>>>>>>>>>
16027>>>>>>>>>>>    Function ComCaption Returns String
16029>>>>>>>>>>>        String retVal
16029>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
16030>>>>>>>>>>>        Function_Return retVal
16031>>>>>>>>>>>    End_Function
16032>>>>>>>>>>>
16032>>>>>>>>>>>    Procedure Set ComCaption String value
16034>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
16035>>>>>>>>>>>    End_Procedure
16036>>>>>>>>>>>
16036>>>>>>>>>>>    Function ComTag Returns Variant
16038>>>>>>>>>>>        Variant retVal
16038>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_VARIANT to retVal
16039>>>>>>>>>>>        Function_Return retVal
16040>>>>>>>>>>>    End_Function
16041>>>>>>>>>>>
16041>>>>>>>>>>>    Procedure Set ComTag Variant value
16043>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_VARIANT to value
16044>>>>>>>>>>>    End_Procedure
16045>>>>>>>>>>>
16045>>>>>>>>>>>    Function ComSelected Returns Boolean
16047>>>>>>>>>>>        Boolean retVal
16047>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
16048>>>>>>>>>>>        Function_Return retVal
16049>>>>>>>>>>>    End_Function
16050>>>>>>>>>>>
16050>>>>>>>>>>>    Procedure Set ComSelected Boolean value
16052>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
16053>>>>>>>>>>>    End_Procedure
16054>>>>>>>>>>>
16054>>>>>>>>>>>    Function ComImage Returns Integer
16056>>>>>>>>>>>        Integer retVal
16056>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
16057>>>>>>>>>>>        Function_Return retVal
16058>>>>>>>>>>>    End_Function
16059>>>>>>>>>>>
16059>>>>>>>>>>>    Procedure Set ComImage Integer value
16061>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
16062>>>>>>>>>>>    End_Procedure
16063>>>>>>>>>>>
16063>>>>>>>>>>>    Function ComColor Returns OLE_COLOR
16065>>>>>>>>>>>        OLE_COLOR retVal
16065>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
16066>>>>>>>>>>>        Function_Return retVal
16067>>>>>>>>>>>    End_Function
16068>>>>>>>>>>>
16068>>>>>>>>>>>    Procedure Set ComColor OLE_COLOR value
16070>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
16071>>>>>>>>>>>    End_Procedure
16072>>>>>>>>>>>
16072>>>>>>>>>>>    Function ComVisible Returns Boolean
16074>>>>>>>>>>>        Boolean retVal
16074>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
16075>>>>>>>>>>>        Function_Return retVal
16076>>>>>>>>>>>    End_Function
16077>>>>>>>>>>>
16077>>>>>>>>>>>    Procedure Set ComVisible Boolean value
16079>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
16080>>>>>>>>>>>    End_Procedure
16081>>>>>>>>>>>
16081>>>>>>>>>>>    Function ComEnabled Returns Boolean
16083>>>>>>>>>>>        Boolean retVal
16083>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
16084>>>>>>>>>>>        Function_Return retVal
16085>>>>>>>>>>>    End_Function
16086>>>>>>>>>>>
16086>>>>>>>>>>>    Procedure Set ComEnabled Boolean value
16088>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
16089>>>>>>>>>>>    End_Procedure
16090>>>>>>>>>>>
16090>>>>>>>>>>>    Function ComToolTip Returns String
16092>>>>>>>>>>>        String retVal
16092>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
16093>>>>>>>>>>>        Function_Return retVal
16094>>>>>>>>>>>    End_Function
16095>>>>>>>>>>>
16095>>>>>>>>>>>    Procedure Set ComToolTip String value
16097>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
16098>>>>>>>>>>>    End_Procedure
16099>>>>>>>>>>>
16099>>>>>>>>>>>    Function ComClosable Returns Boolean
16101>>>>>>>>>>>        Boolean retVal
16101>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
16102>>>>>>>>>>>        Function_Return retVal
16103>>>>>>>>>>>    End_Function
16104>>>>>>>>>>>
16104>>>>>>>>>>>    Procedure Set ComClosable Boolean value
16106>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
16107>>>>>>>>>>>    End_Procedure
16108>>>>>>>>>>>
16108>>>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
16110>>>>>>>>>>>        OLE_HANDLE retVal
16110>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to retVal
16111>>>>>>>>>>>        Function_Return retVal
16112>>>>>>>>>>>    End_Function
16113>>>>>>>>>>>
16113>>>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
16115>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to value
16116>>>>>>>>>>>    End_Procedure
16117>>>>>>>>>>>
16117>>>>>>>>>>>    Function ComIndex Returns Integer
16119>>>>>>>>>>>        Handle hDispatchDriver
16119>>>>>>>>>>>        Integer retVal
16119>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16120>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
16121>>>>>>>>>>>        Function_Return retVal
16122>>>>>>>>>>>    End_Function
16123>>>>>>>>>>>
16123>>>>>>>>>>>    Procedure ComMove Integer llIndex
16125>>>>>>>>>>>        Handle hDispatchDriver
16125>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16126>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16127>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
16128>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
16129>>>>>>>>>>>    End_Procedure
16130>>>>>>>>>>>
16130>>>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
16132>>>>>>>>>>>        Handle hDispatchDriver
16132>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16133>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16134>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
16135>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
16136>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
16137>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
16138>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
16139>>>>>>>>>>>    End_Procedure
16140>>>>>>>>>>>
16140>>>>>>>>>>>    Procedure ComEnsureVisible
16142>>>>>>>>>>>        Handle hDispatchDriver
16142>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16143>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
16144>>>>>>>>>>>    End_Procedure
16145>>>>>>>>>>>End_Class
16146>>>>>>>>>>>
16146>>>>>>>>>>>// CoClass
16146>>>>>>>>>>>// CLSID: {C0DE2200-9808-4CBF-BAC2-F2455C8C8A46}
16146>>>>>>>>>>>Class cCJComTabControlItem is a cComAutomationObject
16147>>>>>>>>>>>    Import_Class_Protocol cCJITabControlItem
16148>>>>>>>>>>>
16148>>>>>>>>>>>    Procedure Construct_Object
16150>>>>>>>>>>>        Forward Send Construct_Object
16152>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
16153>>>>>>>>>>>    End_Procedure
16154>>>>>>>>>>>End_Class
16155>>>>>>>>>>>
16155>>>>>>>>>Use cCJDataObject.pkg       // cCJDataObjectFile, cCJDataObject
Including file: cCJDataObject.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJDataObject.pkg)
16155>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
16155>>>>>>>>>>>Use FlexCom20.pkg
16155>>>>>>>>>>>
16155>>>>>>>>>>>// CLSID: {C0DE2200-604D-4242-954B-DF38BBFA8BE3}
16155>>>>>>>>>>>Class cCJDataObjectFiles is a cComAutomationObject
16156>>>>>>>>>>>
16156>>>>>>>>>>>    Function ComItem Integer llIndex Returns String
16158>>>>>>>>>>>        Handle hDispatchDriver
16158>>>>>>>>>>>        String retVal
16158>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16159>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16160>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
16161>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_BSTR to retVal
16162>>>>>>>>>>>        Function_Return retVal
16163>>>>>>>>>>>    End_Function
16164>>>>>>>>>>>
16164>>>>>>>>>>>    Function ComCount Returns Integer
16166>>>>>>>>>>>        Handle hDispatchDriver
16166>>>>>>>>>>>        Integer retVal
16166>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16167>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
16168>>>>>>>>>>>        Function_Return retVal
16169>>>>>>>>>>>    End_Function
16170>>>>>>>>>>>
16170>>>>>>>>>>>    Function Com_NewEnum Returns Variant
16172>>>>>>>>>>>        Handle hDispatchDriver
16172>>>>>>>>>>>        Variant retVal
16172>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16173>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
16174>>>>>>>>>>>        Function_Return retVal
16175>>>>>>>>>>>    End_Function
16176>>>>>>>>>>>End_Class
16177>>>>>>>>>>>
16177>>>>>>>>>>>// CLSID: {C0DE2200-300E-4EB2-AE9B-6F1BA025DF31}
16177>>>>>>>>>>>Class cCJDataObject is a cComAutomationObject
16178>>>>>>>>>>>
16178>>>>>>>>>>>    Function ComGetFormat Integer llFormat Returns Boolean
16180>>>>>>>>>>>        Handle hDispatchDriver
16180>>>>>>>>>>>        Boolean retVal
16180>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16181>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16182>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llFormat
16183>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
16184>>>>>>>>>>>        Function_Return retVal
16185>>>>>>>>>>>    End_Function
16186>>>>>>>>>>>
16186>>>>>>>>>>>    Function ComFiles Returns Variant
16188>>>>>>>>>>>        Handle hDispatchDriver
16188>>>>>>>>>>>        Variant retVal
16188>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16189>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
16190>>>>>>>>>>>        Function_Return retVal
16191>>>>>>>>>>>    End_Function
16192>>>>>>>>>>>
16192>>>>>>>>>>>    Function ComGetData Integer llFormat Returns Variant
16194>>>>>>>>>>>        Handle hDispatchDriver
16194>>>>>>>>>>>        Variant retVal
16194>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16195>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16196>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llFormat
16197>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_VARIANT to retVal
16198>>>>>>>>>>>        Function_Return retVal
16199>>>>>>>>>>>    End_Function
16200>>>>>>>>>>>
16200>>>>>>>>>>>    Procedure ComSetData Variant llvValue Variant llFormat
16202>>>>>>>>>>>        Handle hDispatchDriver
16202>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16203>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16204>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llvValue
16205>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormat
16206>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
16207>>>>>>>>>>>    End_Procedure
16208>>>>>>>>>>>
16208>>>>>>>>>>>    Procedure ComClear
16210>>>>>>>>>>>        Handle hDispatchDriver
16210>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16211>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
16212>>>>>>>>>>>    End_Procedure
16213>>>>>>>>>>>End_Class
16214>>>>>>>>>>>
16214>>>>>>>>>Use cCJResourceImages.pkg   // cCJResourceImages
Including file: cCJResourceImages.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJResourceImages.pkg)
16214>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
16214>>>>>>>>>>>Use FlexCom20.pkg
16214>>>>>>>>>>>
16214>>>>>>>>>>>// CLSID: {C0DE2200-FDDA-45CE-BBFB-C5E3EE3C4E7B}
16214>>>>>>>>>>>Class cCJResourceImages is a cComAutomationObject
16215>>>>>>>>>>>
16215>>>>>>>>>>>    Function ComLoadFromFile String llDllFileName String llIniFileName Returns Boolean
16217>>>>>>>>>>>        Handle hDispatchDriver
16217>>>>>>>>>>>        Boolean retVal
16217>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16218>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16219>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llDllFileName
16220>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llIniFileName
16221>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BOOL to retVal
16222>>>>>>>>>>>        Function_Return retVal
16223>>>>>>>>>>>    End_Function
16224>>>>>>>>>>>
16224>>>>>>>>>>>    Function ComDllFileName Returns String
16226>>>>>>>>>>>        Handle hDispatchDriver
16226>>>>>>>>>>>        String retVal
16226>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16227>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BSTR to retVal
16228>>>>>>>>>>>        Function_Return retVal
16229>>>>>>>>>>>    End_Function
16230>>>>>>>>>>>
16230>>>>>>>>>>>    Function ComIniFileName Returns String
16232>>>>>>>>>>>        Handle hDispatchDriver
16232>>>>>>>>>>>        String retVal
16232>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16233>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BSTR to retVal
16234>>>>>>>>>>>        Function_Return retVal
16235>>>>>>>>>>>    End_Function
16236>>>>>>>>>>>
16236>>>>>>>>>>>    Function ComGetColor String llSection String llKeyName Returns OLE_COLOR
16238>>>>>>>>>>>        Handle hDispatchDriver
16238>>>>>>>>>>>        OLE_COLOR retVal
16238>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16239>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16240>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llSection
16241>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llKeyName
16242>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
16243>>>>>>>>>>>        Function_Return retVal
16244>>>>>>>>>>>    End_Function
16245>>>>>>>>>>>End_Class
16246>>>>>>>>>>>
16246>>>>>>>>>Use cCJMarkupContext.pkg    // cCJMarkupContext
Including file: cCJMarkupContext.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJMarkupContext.pkg)
16246>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
16246>>>>>>>>>>>Use FlexCom20.pkg
16246>>>>>>>>>>>
16246>>>>>>>>>>>// Possible rendering smoothing modes
16246>>>>>>>>>>>Define XTPMarkupSmoothingMode for Integer
16246>>>>>>>>>>>    Define xtpMarkupSmoothingDefault for 0
16246>>>>>>>>>>>    Define xtpMarkupSmoothingNone for 1
16246>>>>>>>>>>>    Define xtpMarkupSmoothingHighSpeed for 2
16246>>>>>>>>>>>    Define xtpMarkupSmoothingHighQuality for 3
16246>>>>>>>>>>>    Define xtpMarkupSmoothingAntiAlias for 4
16246>>>>>>>>>>>
16246>>>>>>>>>>>// CLSID: {C0DE2200-D073-4043-AA8C-62B5BD8E522D}
16246>>>>>>>>>>>Class cCJMarkupContext is a cComAutomationObject
16247>>>>>>>>>>>
16247>>>>>>>>>>>    Function ComEnableGdiPlus Returns Boolean
16249>>>>>>>>>>>        Boolean retVal
16249>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
16250>>>>>>>>>>>        Function_Return retVal
16251>>>>>>>>>>>    End_Function
16252>>>>>>>>>>>
16252>>>>>>>>>>>    Procedure Set ComEnableGdiPlus Boolean value
16254>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
16255>>>>>>>>>>>    End_Procedure
16256>>>>>>>>>>>
16256>>>>>>>>>>>    Function ComDpiAware Returns Boolean
16258>>>>>>>>>>>        Boolean retVal
16258>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 43 OLE_VT_BOOL to retVal
16259>>>>>>>>>>>        Function_Return retVal
16260>>>>>>>>>>>    End_Function
16261>>>>>>>>>>>
16261>>>>>>>>>>>    Procedure Set ComDpiAware Boolean value
16263>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 43 OLE_VT_BOOL to value
16264>>>>>>>>>>>    End_Procedure
16265>>>>>>>>>>>
16265>>>>>>>>>>>    Function ComIcons Returns Variant
16267>>>>>>>>>>>        Variant retVal
16267>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_DISPATCH to retVal
16268>>>>>>>>>>>        Function_Return retVal
16269>>>>>>>>>>>    End_Function
16270>>>>>>>>>>>
16270>>>>>>>>>>>    Procedure Set ComIcons Variant value
16272>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_DISPATCH to value
16273>>>>>>>>>>>    End_Procedure
16274>>>>>>>>>>>
16274>>>>>>>>>>>    Function ComDefaultSmoothingMode Returns XTPMarkupSmoothingMode
16276>>>>>>>>>>>        XTPMarkupSmoothingMode retVal
16276>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 44 OLE_VT_I4 to retVal
16277>>>>>>>>>>>        Function_Return retVal
16278>>>>>>>>>>>    End_Function
16279>>>>>>>>>>>
16279>>>>>>>>>>>    Procedure Set ComDefaultSmoothingMode XTPMarkupSmoothingMode value
16281>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 44 OLE_VT_I4 to value
16282>>>>>>>>>>>    End_Procedure
16283>>>>>>>>>>>
16283>>>>>>>>>>>    Function ComDefaultTextSmoothingEnabled Returns Boolean
16285>>>>>>>>>>>        Boolean retVal
16285>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_BOOL to retVal
16286>>>>>>>>>>>        Function_Return retVal
16287>>>>>>>>>>>    End_Function
16288>>>>>>>>>>>
16288>>>>>>>>>>>    Procedure Set ComDefaultTextSmoothingEnabled Boolean value
16290>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_BOOL to value
16291>>>>>>>>>>>    End_Procedure
16292>>>>>>>>>>>
16292>>>>>>>>>>>    Procedure ComSetMethod Variant llHandler String llMethod
16294>>>>>>>>>>>        Handle hDispatchDriver
16294>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16295>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16296>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llHandler
16297>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llMethod
16298>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1 OLE_VT_VOID
16299>>>>>>>>>>>    End_Procedure
16300>>>>>>>>>>>
16300>>>>>>>>>>>    Procedure ComSetHandler Variant llHandler
16302>>>>>>>>>>>        Handle hDispatchDriver
16302>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16303>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16304>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llHandler
16305>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
16306>>>>>>>>>>>    End_Procedure
16307>>>>>>>>>>>
16307>>>>>>>>>>>    Function ComValidateXML String llText Returns String
16309>>>>>>>>>>>        Handle hDispatchDriver
16309>>>>>>>>>>>        String retVal
16309>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16310>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16311>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
16312>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_BSTR to retVal
16313>>>>>>>>>>>        Function_Return retVal
16314>>>>>>>>>>>    End_Function
16315>>>>>>>>>>>
16315>>>>>>>>>>>    Function ComToolTipContext Returns Variant
16317>>>>>>>>>>>        Handle hDispatchDriver
16317>>>>>>>>>>>        Variant retVal
16317>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16318>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 39 OLE_VT_DISPATCH to retVal
16319>>>>>>>>>>>        Function_Return retVal
16320>>>>>>>>>>>    End_Function
16321>>>>>>>>>>>
16321>>>>>>>>>>>    Procedure ComFreezeUpdates
16323>>>>>>>>>>>        Handle hDispatchDriver
16323>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16324>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 41 OLE_VT_VOID
16325>>>>>>>>>>>    End_Procedure
16326>>>>>>>>>>>
16326>>>>>>>>>>>    Procedure ComUnfreezeUpdates
16328>>>>>>>>>>>        Handle hDispatchDriver
16328>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16329>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 42 OLE_VT_VOID
16330>>>>>>>>>>>    End_Procedure
16331>>>>>>>>>>>End_Class
16332>>>>>>>>>>>
16332>>>>>>>>>
16332>>>>>>>>>Define XTPFrameShadowManagerFlags for Integer
16332>>>>>>>>>    Define xtpFrameShadowsDisabled for 1
16332>>>>>>>>>    Define xtpFrameShadowsInvisible for 2
16332>>>>>>>>>    Define xtpFrameShadowsNotResizeable for 4
16332>>>>>>>>>    Define xtpFrameShadowsDisabledInTSS for 8
16332>>>>>>>>>    Define xtpFrameShadowsInvisibleInTSS for 16
16332>>>>>>>>>
16332>>>>>>>>>Define XTPApplicationAmbientProperty for Integer
16332>>>>>>>>>    // Ambient accent color value. -1 should be used to specify a default accent color value determined individually by each suscribed client.
16332>>>>>>>>>    Define xtpApplicationAccentColor for 0
16332>>>>>>>>>    // Ambient state color value. -1 should be used to specify a default state color value determined individually by each suscribed client.
16332>>>>>>>>>    Define xtpApplicationStateColor for 1
16332>>>>>>>>>
16332>>>>>>>>>Define OLEDropConstants for Integer
16332>>>>>>>>>    Define xtpOLEDropNone for 0
16332>>>>>>>>>    Define xtpOLEDropManual for 1
16332>>>>>>>>>
16332>>>>>>>>>Define OLEDragConstants for Integer
16332>>>>>>>>>    Define xtpOLEDragManual for 0
16332>>>>>>>>>    Define xtpOLEDragAutomatic for 1
16332>>>>>>>>>
16332>>>>>>>>>Define XTPWorkspaceCommand for Integer
16332>>>>>>>>>    // Used to move a TabControlItem to the next tab group.
16332>>>>>>>>>    Define XTP_ID_WORKSPACE_MOVEPREVIOUS for 9155
16332>>>>>>>>>    // Used to move a TabControlItem to the previous tab group.
16332>>>>>>>>>    Define XTP_ID_WORKSPACE_MOVENEXT for 9156
16332>>>>>>>>>    // Used to create a new horizontal tab group.
16332>>>>>>>>>    Define XTP_ID_WORKSPACE_NEWHORIZONTAL for 9157
16332>>>>>>>>>    // Used to create a new vertical tab group.
16332>>>>>>>>>    Define XTP_ID_WORKSPACE_NEWVERTICAL for 9158
16332>>>>>>>>>
16332>>>>>>>>>Define XTPCommandBarStyle for Integer
16332>>>>>>>>>    Define XTP_CBRS_GRIPPER for 4194304
16332>>>>>>>>>
16332>>>>>>>>>Define XTPControlNotify for Integer
16332>>>>>>>>>    Define XTP_EN_SPINUP for 4104
16332>>>>>>>>>    Define XTP_EN_SPINDOWN for 4105
16332>>>>>>>>>    Define XTP_EN_BUDDYBUTTONCLICK for 4106
16332>>>>>>>>>    Define XTP_GN_PREVIEWSTART for 4112
16332>>>>>>>>>    Define XTP_GN_PREVIEWCANCEL for 4113
16332>>>>>>>>>    Define XTP_GN_PREVIEWAPPLY for 4114
16332>>>>>>>>>    Define XTP_GN_PREVIEWCHANGE for 4115
16332>>>>>>>>>    Define XTP_GN_STARTDRAG for 4116
16332>>>>>>>>>    Define XTP_GN_SELCHANGE for 4117
16332>>>>>>>>>    Define XTP_EN_CHANGE for 768
16332>>>>>>>>>    Define XTP_EN_SETFOCUS for 256
16332>>>>>>>>>    Define XTP_EN_KILLFOCUS for 512
16332>>>>>>>>>    Define XTP_CBN_EDITCHANGE for 5
16332>>>>>>>>>    Define XTP_CBN_SETFOCUS for 3
16332>>>>>>>>>    Define XTP_CBN_KILLFOCUS for 4
16332>>>>>>>>>    Define XTP_CBN_CLOSEUP for 8
16332>>>>>>>>>    Define XTP_CBN_DROPDOWN for 7
16332>>>>>>>>>    Define XTP_BS_TABCHANGED for 4352
16332>>>>>>>>>
16332>>>>>>>>>// Bar Position
16332>>>>>>>>>Define XTPBarPosition for Integer
16332>>>>>>>>>    // Docked at top.
16332>>>>>>>>>    Define xtpBarTop for 0
16332>>>>>>>>>    // Docked at bottom.
16332>>>>>>>>>    Define xtpBarBottom for 1
16332>>>>>>>>>    // Docked at left.
16332>>>>>>>>>    Define xtpBarLeft for 2
16332>>>>>>>>>    // Docked at right.
16332>>>>>>>>>    Define xtpBarRight for 3
16332>>>>>>>>>    // Floated.
16332>>>>>>>>>    Define xtpBarFloating for 4
16332>>>>>>>>>    // Popuped.
16332>>>>>>>>>    Define xtpBarPopup for 5
16332>>>>>>>>>    // List box.
16332>>>>>>>>>    Define xtpBarListBox for 6
16332>>>>>>>>>    // ComboBoxGalleryPopup.
16332>>>>>>>>>    Define xtpBarComboBoxGalleryPopup for 8
16332>>>>>>>>>
16332>>>>>>>>>// Type of CommandBars
16332>>>>>>>>>Define XTPBarType for Integer
16332>>>>>>>>>    // Command bar is menu bar.
16332>>>>>>>>>    Define xtpBarTypeMenuBar for 0
16332>>>>>>>>>    // Command bar is toolbar.
16332>>>>>>>>>    Define xtpBarTypeNormal for 1
16332>>>>>>>>>    // Command bar is popup.
16332>>>>>>>>>    Define xtpBarTypePopup for 2
16332>>>>>>>>>    // Command bar is ribbon.
16332>>>>>>>>>    Define xtpBarTypeRibbon for 3
16332>>>>>>>>>
16332>>>>>>>>>// Control Type
16332>>>>>>>>>Define XTPControlType for Integer
16332>>>>>>>>>    // Type not defined.
16332>>>>>>>>>    Define xtpControlError for 0
16332>>>>>>>>>    // Button type.
16332>>>>>>>>>    Define xtpControlButton for 1
16332>>>>>>>>>    // Popup type.
16332>>>>>>>>>    Define xtpControlPopup for 2
16332>>>>>>>>>    // Button popup.
16332>>>>>>>>>    Define xtpControlButtonPopup for 3
16332>>>>>>>>>    // Split button popup.
16332>>>>>>>>>    Define xtpControlSplitButtonPopup for 4
16332>>>>>>>>>    // Combo box button.
16332>>>>>>>>>    Define xtpControlComboBox for 5
16332>>>>>>>>>    // Edit control
16332>>>>>>>>>    Define xtpControlEdit for 6
16332>>>>>>>>>    // Custom control
16332>>>>>>>>>    Define xtpControlCustom for 7
16332>>>>>>>>>    // Label control
16332>>>>>>>>>    Define xtpControlLabel for 8
16332>>>>>>>>>    // CheckBox control
16332>>>>>>>>>    Define xtpControlCheckBox for 9
16332>>>>>>>>>    // Gallery control
16332>>>>>>>>>    Define xtpControlGallery for 10
16332>>>>>>>>>    // Radio Button control
16332>>>>>>>>>    Define xtpControlRadioButton for 11
16332>>>>>>>>>
16332>>>>>>>>>// Button Styles
16332>>>>>>>>>Define XTPButtonStyle for Integer
16332>>>>>>>>>    // Automatic style.
16332>>>>>>>>>    Define xtpButtonAutomatic for 0
16332>>>>>>>>>    // Button draw only caption.
16332>>>>>>>>>    Define xtpButtonCaption for 1
16332>>>>>>>>>    // Button draw only icon.
16332>>>>>>>>>    Define xtpButtonIcon for 2
16332>>>>>>>>>    // Button draw icon and caption.
16332>>>>>>>>>    Define xtpButtonIconAndCaption for 3
16332>>>>>>>>>    // Button draw icon and draw caption below icon.
16332>>>>>>>>>    Define xtpButtonIconAndCaptionBelow for 4
16332>>>>>>>>>    // Button draw icon, caption and description for popup bar.
16332>>>>>>>>>    Define xtpButtonCaptionAndDescription for 5
16332>>>>>>>>>
16332>>>>>>>>>// Control Flags
16332>>>>>>>>>Define XTPControlFlags for Integer
16332>>>>>>>>>    // Control is right aligned.
16332>>>>>>>>>    Define xtpFlagRightAlign for 1
16332>>>>>>>>>    // Control does not have focus.  The control will be skipped when performing actions such as tabbing through the controls in the command bar.
16332>>>>>>>>>    Define xtpFlagSkipFocus for 2
16332>>>>>>>>>    // To Pop up child bar left.  The popup will start from the right side of the control that was clicked and be displayed right-to-left. 
16332>>>>>>>>>    Define xtpFlagLeftPopup for 4
16332>>>>>>>>>    // Control is manually updated.
16332>>>>>>>>>    Define xtpFlagManualUpdate for 8
16332>>>>>>>>>    // Used to disable customization.  The user will not be able to move or edit the control.
16332>>>>>>>>>    Define xtpFlagNoMovable for 16
16332>>>>>>>>>    // Used to stretch a control to fill the maximum available width if the control is in the ActiveMenuBar.  This has no effect on controls in the toolbar.
16332>>>>>>>>>    Define xtpFlagControlStretched for 32
16332>>>>>>>>>    // Show tooltip always.
16332>>>>>>>>>    Define xtpFlagShowPopupBarTip for 64
16332>>>>>>>>>    // Wrap row for toolbar or popup bar.
16332>>>>>>>>>    Define xtpFlagWrapRow for 128
16332>>>>>>>>>    // Control is on the right side of Ribbon tabs.
16332>>>>>>>>>    Define xtpFlagRibbonTabBackground for 256
16332>>>>>>>>>
16332>>>>>>>>>// Combo Styles
16332>>>>>>>>>Define XTPComboStyle for Integer
16332>>>>>>>>>    // Normal combobox.
16332>>>>>>>>>    Define xtpComboNormal for 0
16332>>>>>>>>>    // Combobox with label.
16332>>>>>>>>>    Define xtpComboLabel for 1
16332>>>>>>>>>
16332>>>>>>>>>// Gallery Resizable style
16332>>>>>>>>>Define XTPGalleryResizable for Integer
16332>>>>>>>>>    // xtpAllowResizeWidth
16332>>>>>>>>>    Define xtpAllowResizeWidth for 1
16332>>>>>>>>>    // xtpAllowResizeHeight
16332>>>>>>>>>    Define xtpAllowResizeHeight for 2
16332>>>>>>>>>
16332>>>>>>>>>// Visual Themes
16332>>>>>>>>>Define XTPVisualTheme for Integer
16332>>>>>>>>>    // Office 2000 theme.
16332>>>>>>>>>    Define xtpThemeOffice2000 for 0
16332>>>>>>>>>    // Office XP theme.
16332>>>>>>>>>    Define xtpThemeOfficeXP for 1
16332>>>>>>>>>    // Office 2003 theme.
16332>>>>>>>>>    Define xtpThemeOffice2003 for 2
16332>>>>>>>>>    // Windows XP themes support.
16332>>>>>>>>>    Define xtpThemeNativeWinXP for 3
16332>>>>>>>>>    // VisualStudio 2005 theme.
16332>>>>>>>>>    Define xtpThemeWhidbey for 4
16332>>>>>>>>>    // Office 2007 theme.
16332>>>>>>>>>    Define xtpThemeResource for 5
16332>>>>>>>>>    // Ribbon theme.
16332>>>>>>>>>    Define xtpThemeRibbon for 6
16332>>>>>>>>>    // VisualStudio2008 theme.
16332>>>>>>>>>    Define xtpThemeVisualStudio2008 for 7
16332>>>>>>>>>    // VisualStudio6 theme.
16332>>>>>>>>>    Define xtpThemeVisualStudio6 for 8
16332>>>>>>>>>    // VisualStudio2010 theme.
16332>>>>>>>>>    Define xtpThemeVisualStudio2010 for 9
16332>>>>>>>>>    // Office 2007 System theme.
16332>>>>>>>>>    Define xtpThemeOffice2007System for 11
16332>>>>>>>>>    // Office 2013 theme.
16332>>>>>>>>>    Define xtpThemeOffice2013 for 12
16332>>>>>>>>>    // Office 2016 theme.
16332>>>>>>>>>    Define xtpThemeOffice2016 for 12
16332>>>>>>>>>    // VisualStudio2012 theme. Uses INI file
16332>>>>>>>>>    Define xtpThemeVisualStudio2012 for 13
16332>>>>>>>>>    // VisualStudio2012 Light theme.
16332>>>>>>>>>    Define xtpThemeVisualStudio2012Light for 14
16332>>>>>>>>>    // VisualStudio2012 Dark theme.
16332>>>>>>>>>    Define xtpThemeVisualStudio2012Dark for 15
16332>>>>>>>>>    // VisualStudio2015 theme.
16332>>>>>>>>>    Define xtpThemeVisualStudio2015 for 16
16332>>>>>>>>>    // Windows 10 theme.
16332>>>>>>>>>    Define xtpThemeNativeWindows10 for 17
16332>>>>>>>>>    // VisualStudio2017 theme.
16332>>>>>>>>>    Define xtpThemeVisualStudio2017 for 18
16332>>>>>>>>>    // VisualStudio2019 theme.
16332>>>>>>>>>    Define xtpThemeVisualStudio2019 for 19
16332>>>>>>>>>    // VisualStudio2022 theme.
16332>>>>>>>>>    Define xtpThemeVisualStudio2022 for 20
16332>>>>>>>>>
16332>>>>>>>>>// Backstage Separator Visual Themes
16332>>>>>>>>>Define XTPBackstageSeparatorControlAppearanceStyle for Integer
16332>>>>>>>>>    Define xtpSeparatorAppearanceResource for 6
16332>>>>>>>>>    Define xtpSeparatorAppearanceOffice2013 for 12
16332>>>>>>>>>    Define xtpSeparatorAppearanceOffice2016 for 12
16332>>>>>>>>>    Define xtpSeparatorAppearanceVisualStudio2015 for 16
16332>>>>>>>>>    Define xtpSeparatorAppearanceVisualStudio2017 for 17
16332>>>>>>>>>    Define xtpSeparatorAppearanceVisualStudio2019 for 18
16332>>>>>>>>>    Define xtpSeparatorAppearanceVisualStudio2022 for 19
16332>>>>>>>>>
16332>>>>>>>>>// Backstage Button Control Visual Themes
16332>>>>>>>>>Define XTPBackstageButtonControlAppearanceStyle for Integer
16332>>>>>>>>>    Define xtpAppearanceStandard for 0
16332>>>>>>>>>    Define xtpAppearanceFlat for 1
16332>>>>>>>>>    Define xtpAppearanceUltraFlat for 2
16332>>>>>>>>>    Define xtpAppearanceOffice2000 for 3
16332>>>>>>>>>    Define xtpAppearanceOfficeXP for 4
16332>>>>>>>>>    Define xtpAppearanceOffice2003 for 5
16332>>>>>>>>>    Define xtpAppearanceOffice2007 for 6
16332>>>>>>>>>    Define xtpAppearanceResource for 7
16332>>>>>>>>>    Define xtpAppearanceNativeWinXP for 8
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2005 for 9
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2008 for 10
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2010 for 11
16332>>>>>>>>>    Define xtpAppearanceOffice2013 for 12
16332>>>>>>>>>    Define xtpAppearanceOffice2016 for 12
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2012 for 13
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2012Light for 14
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2012Dark for 15
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2015 for 16
16332>>>>>>>>>    Define xtpAppearanceNativeWindows10 for 17
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2017 for 18
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2019 for 19
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2022 for 20
16332>>>>>>>>>
16332>>>>>>>>>Define XTPRibbonBackstageStyle for Integer
16332>>>>>>>>>    // Backstage like in Office 2010.
16332>>>>>>>>>    Define xtpRibbonBackstageOffice2010Style for 0
16332>>>>>>>>>    // Backstage like in Office 2013/2016.
16332>>>>>>>>>    Define xtpRibbonBackstageOffice2013Style for 1
16332>>>>>>>>>    // Backstage like in Office 2013/2016.
16332>>>>>>>>>    Define xtpRibbonBackstageOffice2016Style for 1
16332>>>>>>>>>
16332>>>>>>>>>// ScrollBar Style
16332>>>>>>>>>Define XTPScrollBarStyle for Integer
16332>>>>>>>>>    Define xtpScrollStyleDefault for 0
16332>>>>>>>>>    Define xtpScrollStyleStandard for 1
16332>>>>>>>>>    Define xtpScrollStyleFlat for 2
16332>>>>>>>>>    Define xtpScrollStyleSystem for 3
16332>>>>>>>>>    Define xtpScrollStyleOffice for 4
16332>>>>>>>>>    Define xtpScrollStyleOffice2007Light for 5
16332>>>>>>>>>    Define xtpScrollStyleOffice2007Dark for 6
16332>>>>>>>>>    Define xtpScrollStyleSlider for 7
16332>>>>>>>>>
16332>>>>>>>>>Define XTPControlCustomVerticalOptions for Integer
16332>>>>>>>>>    Define xtpVerticalHide for 0
16332>>>>>>>>>    Define xtpVerticalShow for 1
16332>>>>>>>>>    Define xtpVerticalButton for 2
16332>>>>>>>>>
16332>>>>>>>>>// Text Orientation
16332>>>>>>>>>Define XTPBarTextOrientation for Integer
16332>>>>>>>>>    Define xtpBarTextAuto for 0
16332>>>>>>>>>    Define xtpBarTextVertical for 1
16332>>>>>>>>>    Define xtpBarTextHorizontal for 2
16332>>>>>>>>>
16332>>>>>>>>>// Edit Style
16332>>>>>>>>>Define XTPCommandBarEditStyle for Integer
16332>>>>>>>>>    Define xtpEditStyleLeft for 0
16332>>>>>>>>>    Define xtpEditStyleCenter for 1
16332>>>>>>>>>    Define xtpEditStyleRight for 2
16332>>>>>>>>>    Define xtpEditStyleLowerCase for 16
16332>>>>>>>>>    Define xtpEditStylePassword for 32
16332>>>>>>>>>
16332>>>>>>>>>Define OLETextImageRelationStyle for Integer
16332>>>>>>>>>    Define xtpOverlay for 0
16332>>>>>>>>>    Define xtpImageAboveText for 1
16332>>>>>>>>>    Define xtpTextAboveImage for 2
16332>>>>>>>>>    Define xtpImageBeforeText for 3
16332>>>>>>>>>    Define xtpTextBeforeImage for 4
16332>>>>>>>>>
16332>>>>>>>>>Define OLEPushButtonStyle for Integer
16332>>>>>>>>>    Define xtpButtonNormal for 0
16332>>>>>>>>>    Define xtpButtonDropDown for 1
16332>>>>>>>>>    Define xtpButtonDropDownRight for 2
16332>>>>>>>>>    Define xtpButtonSplitDropDown for 3
16332>>>>>>>>>    Define xtpButtonDropDownNoGlyph for 4
16332>>>>>>>>>
16332>>>>>>>>>Define OLEAlignmentStyle for Integer
16332>>>>>>>>>    Define xtpAlignLeft for 0
16332>>>>>>>>>    Define xtpAlignRight for 1
16332>>>>>>>>>    Define xtpAlignCenter for 2
16332>>>>>>>>>    Define xtpAlignMiddle for 0
16332>>>>>>>>>    Define xtpAlignTop for 4
16332>>>>>>>>>    Define xtpAlignBottom for 8
16332>>>>>>>>>
16332>>>>>>>>>// Docking Flags
16332>>>>>>>>>Define XTPToolBarFlags for Integer
16332>>>>>>>>>    // Allows docking at the top of the client area. 
16332>>>>>>>>>    Define xtpFlagAlignTop for 1
16332>>>>>>>>>    // Allows docking at the bottom of the client area. 
16332>>>>>>>>>    Define xtpFlagAlignBottom for 2
16332>>>>>>>>>    // Allows docking on the left side of the client area. 
16332>>>>>>>>>    Define xtpFlagAlignLeft for 4
16332>>>>>>>>>    // Allows docking on the left side of the client area. 
16332>>>>>>>>>    Define xtpFlagAlignRight for 8
16332>>>>>>>>>    // Allows docking on any side of the client area. 
16332>>>>>>>>>    Define xtpFlagAlignAny for 15
16332>>>>>>>>>    // Allows floating. 
16332>>>>>>>>>    Define xtpFlagFloating for 16
16332>>>>>>>>>    // Allow to hide wrapped controls.
16332>>>>>>>>>    Define xtpFlagHideWrap for 32
16332>>>>>>>>>    // Bar is stretched.
16332>>>>>>>>>    Define xtpFlagStretched for 64
16332>>>>>>>>>    // Bar is stretched, but not fill whole row
16332>>>>>>>>>    Define xtpFlagStretchedShared for 1048576
16332>>>>>>>>>    // Enables smart layout
16332>>>>>>>>>    Define xtpFlagSmartLayout for 2097152
16332>>>>>>>>>
16332>>>>>>>>>// MenuBar flags
16332>>>>>>>>>Define XTPMenuBarFlags for Integer
16332>>>>>>>>>    // To hide minimize box.
16332>>>>>>>>>    Define xtpFlagHideMinimizeBox for 256
16332>>>>>>>>>    // To hide maximize box.
16332>>>>>>>>>    Define xtpFlagHideMaximizeBox for 512
16332>>>>>>>>>    // To hide close button.
16332>>>>>>>>>    Define xtpFlagHideClose for 4096
16332>>>>>>>>>    // To add system MDI popup bar.
16332>>>>>>>>>    Define xtpFlagHideMDIButtons for 4864
16332>>>>>>>>>    Define xtpFlagAddMDISysPopup for 8192
16332>>>>>>>>>
16332>>>>>>>>>// Animation
16332>>>>>>>>>Define XTPAnimationType for Integer
16332>>>>>>>>>    // As defined in the 'Display' settings.
16332>>>>>>>>>    Define xtpAnimateWindowsDefault for 0
16332>>>>>>>>>    // Any of the first three in random selection.
16332>>>>>>>>>    Define xtpAnimateRandom for 1
16332>>>>>>>>>    // Unfold top to bottom.
16332>>>>>>>>>    Define xtpAnimateUnfold for 2
16332>>>>>>>>>    // Slide in from left.
16332>>>>>>>>>    Define xtpAnimateSlide for 3
16332>>>>>>>>>    // Fade-in.
16332>>>>>>>>>    Define xtpAnimateFade for 4
16332>>>>>>>>>    // No animation.
16332>>>>>>>>>    Define xtpAnimateNone for 5
16332>>>>>>>>>
16332>>>>>>>>>// Status Pane Styles
16332>>>>>>>>>Define XTPStatusPaneStyle for Integer
16332>>>>>>>>>    // When this flag is applied, the border will be removed from the indicated statusbar pane.
16332>>>>>>>>>    Define SBPS_NOBORDERS for 256
16332>>>>>>>>>    // When this flag is applied, the indicated statusbar pane will be disabled.
16332>>>>>>>>>    Define SBPS_DISABLED for 67108864
16332>>>>>>>>>    // The pane will stretched, it will not have a static width.
16332>>>>>>>>>    Define SBPS_STRETCH for 134217728
16332>>>>>>>>>
16332>>>>>>>>>// Tracking Flags
16332>>>>>>>>>Define XTPTrackPopupFlags for Integer
16332>>>>>>>>>    // Returns the Id of the control instead of triggering the execute event.  The execute event will not be triggered.
16332>>>>>>>>>    Define TPM_RETURNCMD for 256
16332>>>>>>>>>    // Allows you to choose a menu item using a right click.
16332>>>>>>>>>    Define TPM_RIGHTBUTTON for 2
16332>>>>>>>>>    // Right aligns the menu starting from the x and y coordinates.
16332>>>>>>>>>    Define TPM_RIGHTALIGN for 8
16332>>>>>>>>>    // Use the TPM_RECURSE flag to display a menu when another menu is already displayed. This is intended to support context menus within a menu.
16332>>>>>>>>>    Define TPM_RECURSE for 1
16332>>>>>>>>>
16332>>>>>>>>>// Control's Hide Flags
16332>>>>>>>>>Define XTPControlHideFlags for Integer
16332>>>>>>>>>    // Control is visible.
16332>>>>>>>>>    Define xtpNoHide for 0
16332>>>>>>>>>    // Control is hidden by generic reason.
16332>>>>>>>>>    Define xtpHideGeneric for 1
16332>>>>>>>>>    // Control is hidden by wrap.
16332>>>>>>>>>    Define xtpHideWrap for 2
16332>>>>>>>>>    // Control is hidden by docking position.
16332>>>>>>>>>    Define xtpHideDockingPosition for 4
16332>>>>>>>>>    // Control is hidden by scrolling.
16332>>>>>>>>>    Define xtpHideScroll for 8
16332>>>>>>>>>    // Control is hidden by customize settings.
16332>>>>>>>>>    Define xtpHideCustomize for 16
16332>>>>>>>>>    // If the control is rarely used and it is not visible because the intelligent menus option on and the command is a hidden command.
16332>>>>>>>>>    Define xtpHideExpand for 32
16332>>>>>>>>>    // Control is hidden because active template excluded from its list.
16332>>>>>>>>>    Define xtpHideDocTemplate for 64
16332>>>>>>>>>    // Control is hidden because inactive ribbon tab.
16332>>>>>>>>>    Define xtpHideRibbonTab for 128
16332>>>>>>>>>
16332>>>>>>>>>Define XTPKeyboardCuesShow for Integer
16332>>>>>>>>>    // Show keyboard cues always
16332>>>>>>>>>    Define xtpKeyboardCuesShowAlways for 0
16332>>>>>>>>>    // Never show keyboard cues
16332>>>>>>>>>    Define xtpKeyboardCuesShowNever for 1
16332>>>>>>>>>    // System defined
16332>>>>>>>>>    Define xtpKeyboardCuesShowWindowsDefault for 2
16332>>>>>>>>>
16332>>>>>>>>>Define XTPKeyboardCuesUse for Integer
16332>>>>>>>>>    // Activate only menu by using underlines
16332>>>>>>>>>    Define xtpKeyboardCuesUseMenuOnly for 0
16332>>>>>>>>>    // Activate menu and toolbars by using underlines
16332>>>>>>>>>    Define xtpKeyboardCuesUseAll for 1
16332>>>>>>>>>    // No using underlines
16332>>>>>>>>>    Define xtpKeyboardCuesUseNone for 2
16332>>>>>>>>>    // Only if Ampersant exists option
16332>>>>>>>>>    Define xtpKeyboardCuesUseAmpersandOnly for 4
16332>>>>>>>>>
16332>>>>>>>>>// Workspace Buttons
16332>>>>>>>>>Define XTPWorkspaceButtons for Integer
16332>>>>>>>>>    // To hide arrow buttons.
16332>>>>>>>>>    Define xtpWorkspaceHideArrows for 1
16332>>>>>>>>>    // To hide close button.
16332>>>>>>>>>    Define xtpWorkspaceHideClose for 2
16332>>>>>>>>>    // To hide arrow and close buttons.
16332>>>>>>>>>    Define xtpWorkspaceHideAll for 3
16332>>>>>>>>>    // To show active file button.
16332>>>>>>>>>    Define xtpWorkspaceShowActiveFiles for 4
16332>>>>>>>>>    // To hide arrow buttons always
16332>>>>>>>>>    Define xtpWorkspaceHideArrowsAlways for 9
16332>>>>>>>>>    // To show close button for all tabs
16332>>>>>>>>>    Define xtpWorkspaceShowCloseTab for 16
16332>>>>>>>>>    // To show close button for selected tabs.
16332>>>>>>>>>    Define xtpWorkspaceShowCloseSelectedTab for 32
16332>>>>>>>>>
16332>>>>>>>>>// Workspace New Tab Position
16332>>>>>>>>>Define XTPWorkspaceNewTabPosition for Integer
16332>>>>>>>>>    // New tab will be created after all tabs
16332>>>>>>>>>    Define xtpWorkspaceNewTabRightMost for 0
16332>>>>>>>>>    // New tab will be created before all tabs
16332>>>>>>>>>    Define xtpWorkspaceNewTabLeftMost for 1
16332>>>>>>>>>    // New tab will be created after active tab
16332>>>>>>>>>    Define xtpWorkspaceNewTabNextToActive for 2
16332>>>>>>>>>
16332>>>>>>>>>// Scale Mode
16332>>>>>>>>>Define XTPScaleMode for Integer
16332>>>>>>>>>    // Auto scale mode
16332>>>>>>>>>    Define xtpScaleAuto for 0
16332>>>>>>>>>    // Pixels scale mode
16332>>>>>>>>>    Define xtpScalePixel for 1
16332>>>>>>>>>    // Twips scale mode
16332>>>>>>>>>    Define xtpScaleTwip for 2
16332>>>>>>>>>
16332>>>>>>>>>Define XTPTextAlignment for Integer
16332>>>>>>>>>    Define xtpAlignmentLeft for 0
16332>>>>>>>>>    Define xtpAlignmentCenter for 1
16332>>>>>>>>>    Define xtpAlignmentRight for 2
16332>>>>>>>>>
16332>>>>>>>>>Define XTPShellAutoCompleteFlags for Integer
16332>>>>>>>>>    Define xtpShellAutoCompleteFileSystem for 1
16332>>>>>>>>>    Define xtpShellAutoCompleteFileSysOnly for 16
16332>>>>>>>>>    Define xtpShellAutoCompleteUrlAll for 6
16332>>>>>>>>>    Define xtpShellAutoCompleteUrlHistory for 2
16332>>>>>>>>>    Define xtpShellAutoCompleteUrlMRU for 4
16332>>>>>>>>>    Define xtpShellAutoCompleteAll for 7
16332>>>>>>>>>
16332>>>>>>>>>Define XTPRibbonTabContextColor for UInteger
16332>>>>>>>>>    Define xtpRibbonTabContextColorNone for 0
16332>>>>>>>>>    Define xtpRibbonTabContextColorBlue for 1
16332>>>>>>>>>    Define xtpRibbonTabContextColorYellow for 2
16332>>>>>>>>>    Define xtpRibbonTabContextColorGreen for 3
16332>>>>>>>>>    Define xtpRibbonTabContextColorRed for 4
16332>>>>>>>>>    Define xtpRibbonTabContextColorPurple for 5
16332>>>>>>>>>    Define xtpRibbonTabContextColorCyan for 6
16332>>>>>>>>>    Define xtpRibbonTabContextColorOrange for 7
16332>>>>>>>>>
16332>>>>>>>>>Define XTPCommandBarsSpecialCommands for Integer
16332>>>>>>>>>    Define XTP_ID_RIBBONCONTROLTAB for 9604
16332>>>>>>>>>    Define XTP_ID_RIBBONCUSTOMIZE for 9607
16332>>>>>>>>>    Define XTP_ID_CUSTOMIZE_ADDORREMOVE for 9122
16332>>>>>>>>>    Define XTP_ID_CUSTOMIZE_RESET for 9123
16332>>>>>>>>>    Define XTP_ID_TOOLBAR_EXPAND for 9148
16332>>>>>>>>>    Define XTP_ID_TOOLBAR_HIDE for 9149
16332>>>>>>>>>    Define XTP_ID_WORKSPACE_CANCEL for 9159
16332>>>>>>>>>    Define XTP_ID_WINDOWLIST for 35000
16332>>>>>>>>>    Define XTP_ID_CUSTOMIZE for 35001
16332>>>>>>>>>    Define XTP_ID_WORKSPACE_ACTIONS for 35002
16332>>>>>>>>>    Define XTP_ID_TOOLBARLIST for 59392
16332>>>>>>>>>    Define XTP_ID_FILE_MRU for 35003
16332>>>>>>>>>
16332>>>>>>>>>Define XTPSliderCommand for Integer
16332>>>>>>>>>    Define XTP_SB_LINELEFT for 0
16332>>>>>>>>>    Define XTP_SB_LINERIGHT for 1
16332>>>>>>>>>    Define XTP_SB_PAGELEFT for 2
16332>>>>>>>>>    Define XTP_SB_PAGERIGHT for 3
16332>>>>>>>>>    Define XTP_SB_THUMBTRACK for 5
16332>>>>>>>>>    Define XTP_SB_LEFT for 6
16332>>>>>>>>>    Define XTP_SB_RIGHT for 7
16332>>>>>>>>>    Define XTP_SB_ENDSCROLL for 8
16332>>>>>>>>>
16332>>>>>>>>>Define XTPPrintOrientation for Integer
16332>>>>>>>>>    Define xtpOrientationPortrait for 1
16332>>>>>>>>>    Define xtpOrientationLandscape for 2
16332>>>>>>>>>
16332>>>>>>>>>Define XTPBackImage for Integer
16332>>>>>>>>>    Define XTPNone for 0
16332>>>>>>>>>    Define XTPCalligraphy for 1
16332>>>>>>>>>    Define XTPCirclesAndStripes for 2
16332>>>>>>>>>    Define XTPCircuit for 3
16332>>>>>>>>>    Define XTPClouds for 4
16332>>>>>>>>>    Define XTPDoodleCircles for 5
16332>>>>>>>>>    Define XTPDoodleDiamonds for 6
16332>>>>>>>>>    Define XTPGeometry for 7
16332>>>>>>>>>    Define XTPLunchBox for 8
16332>>>>>>>>>    Define XTPSchoolSupplies for 9
16332>>>>>>>>>    Define XTPSpring for 10
16332>>>>>>>>>    Define XTPStars for 11
16332>>>>>>>>>    Define XTPStraws for 12
16332>>>>>>>>>    Define XTPTreeRings for 13
16332>>>>>>>>>    Define XTPUnderWater for 14
16332>>>>>>>>>
16332>>>>>>>>>// CLSID: {C0DE2200-87E4-460A-8491-32BD8DE3269C}
16332>>>>>>>>>Class cCJIFrameShadow is a Mixin
16333>>>>>>>>>
16333>>>>>>>>>    Function ComOuterSize Returns Integer
16335>>>>>>>>>        Integer retVal
16335>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
16336>>>>>>>>>        Function_Return retVal
16337>>>>>>>>>    End_Function
16338>>>>>>>>>
16338>>>>>>>>>    Procedure Set ComOuterSize Integer value
16340>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
16341>>>>>>>>>    End_Procedure
16342>>>>>>>>>
16342>>>>>>>>>    Function ComInnerSize Returns Integer
16344>>>>>>>>>        Integer retVal
16344>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
16345>>>>>>>>>        Function_Return retVal
16346>>>>>>>>>    End_Function
16347>>>>>>>>>
16347>>>>>>>>>    Procedure Set ComInnerSize Integer value
16349>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
16350>>>>>>>>>    End_Procedure
16351>>>>>>>>>
16351>>>>>>>>>    Function ComOffsetX Returns OLE_XSIZE_PIXELS
16353>>>>>>>>>        OLE_XSIZE_PIXELS retVal
16353>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
16354>>>>>>>>>        Function_Return retVal
16355>>>>>>>>>    End_Function
16356>>>>>>>>>
16356>>>>>>>>>    Procedure Set ComOffsetX OLE_XSIZE_PIXELS value
16358>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
16359>>>>>>>>>    End_Procedure
16360>>>>>>>>>
16360>>>>>>>>>    Function ComOffsetY Returns OLE_YSIZE_PIXELS
16362>>>>>>>>>        OLE_YSIZE_PIXELS retVal
16362>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
16363>>>>>>>>>        Function_Return retVal
16364>>>>>>>>>    End_Function
16365>>>>>>>>>
16365>>>>>>>>>    Procedure Set ComOffsetY OLE_YSIZE_PIXELS value
16367>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
16368>>>>>>>>>    End_Procedure
16369>>>>>>>>>
16369>>>>>>>>>    Function ComColor Returns OLE_COLOR
16371>>>>>>>>>        OLE_COLOR retVal
16371>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
16372>>>>>>>>>        Function_Return retVal
16373>>>>>>>>>    End_Function
16374>>>>>>>>>
16374>>>>>>>>>    Procedure Set ComColor OLE_COLOR value
16376>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
16377>>>>>>>>>    End_Procedure
16378>>>>>>>>>
16378>>>>>>>>>    Function ComTransparency Returns Short
16380>>>>>>>>>        Short retVal
16380>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I2 to retVal
16381>>>>>>>>>        Function_Return retVal
16382>>>>>>>>>    End_Function
16383>>>>>>>>>
16383>>>>>>>>>    Procedure Set ComTransparency Short value
16385>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I2 to value
16386>>>>>>>>>    End_Procedure
16387>>>>>>>>>
16387>>>>>>>>>    Function ComBlendingFactors Returns Variant
16389>>>>>>>>>        Variant retVal
16389>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_VARIANT to retVal
16390>>>>>>>>>        Function_Return retVal
16391>>>>>>>>>    End_Function
16392>>>>>>>>>
16392>>>>>>>>>    Procedure Set ComBlendingFactors Variant value
16394>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_VARIANT to value
16395>>>>>>>>>    End_Procedure
16396>>>>>>>>>
16396>>>>>>>>>    Function ComBlendingPositions Returns Variant
16398>>>>>>>>>        Variant retVal
16398>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_VARIANT to retVal
16399>>>>>>>>>        Function_Return retVal
16400>>>>>>>>>    End_Function
16401>>>>>>>>>
16401>>>>>>>>>    Procedure Set ComBlendingPositions Variant value
16403>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_VARIANT to value
16404>>>>>>>>>    End_Procedure
16405>>>>>>>>>
16405>>>>>>>>>    Function ComClipOwner Returns Boolean
16407>>>>>>>>>        Boolean retVal
16407>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
16408>>>>>>>>>        Function_Return retVal
16409>>>>>>>>>    End_Function
16410>>>>>>>>>
16410>>>>>>>>>    Procedure Set ComClipOwner Boolean value
16412>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
16413>>>>>>>>>    End_Procedure
16414>>>>>>>>>
16414>>>>>>>>>    Function ComOwner Returns OLE_HANDLE
16416>>>>>>>>>        Handle hDispatchDriver
16416>>>>>>>>>        OLE_HANDLE retVal
16416>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16417>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_I4 to retVal
16418>>>>>>>>>        Function_Return retVal
16419>>>>>>>>>    End_Function
16420>>>>>>>>>
16420>>>>>>>>>    Procedure ComFreezeUpdates Boolean llfreeze
16422>>>>>>>>>        Handle hDispatchDriver
16422>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16423>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16424>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llfreeze
16425>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 10 OLE_VT_VOID
16426>>>>>>>>>    End_Procedure
16427>>>>>>>>>
16427>>>>>>>>>    Procedure ComShow
16429>>>>>>>>>        Handle hDispatchDriver
16429>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16430>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
16431>>>>>>>>>    End_Procedure
16432>>>>>>>>>
16432>>>>>>>>>    Procedure ComHide
16434>>>>>>>>>        Handle hDispatchDriver
16434>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16435>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 12 OLE_VT_VOID
16436>>>>>>>>>    End_Procedure
16437>>>>>>>>>
16437>>>>>>>>>    Procedure ComUpdatePosition
16439>>>>>>>>>        Handle hDispatchDriver
16439>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16440>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
16441>>>>>>>>>    End_Procedure
16442>>>>>>>>>
16442>>>>>>>>>    Procedure ComSetBlendingOptions Variant llfactors Variant llpositions
16444>>>>>>>>>        Handle hDispatchDriver
16444>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16445>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16446>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llfactors
16447>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpositions
16448>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
16449>>>>>>>>>    End_Procedure
16450>>>>>>>>>End_Class
16451>>>>>>>>>
16451>>>>>>>>>// CoClass
16451>>>>>>>>>// CLSID: {C0DE2200-5B81-4C3C-A68E-3F0FF3771B6E}
16451>>>>>>>>>Class cCJFrameShadow is a cComAutomationObject
16452>>>>>>>>>    Import_Class_Protocol cCJIFrameShadow
16453>>>>>>>>>
16453>>>>>>>>>    Procedure Construct_Object
16455>>>>>>>>>        Forward Send Construct_Object
16457>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
16458>>>>>>>>>    End_Procedure
16459>>>>>>>>>End_Class
16460>>>>>>>>>
16460>>>>>>>>>// CLSID: {C0DE2200-F2DA-4617-AD07-FE7F08C16C0B}
16460>>>>>>>>>Class cCJIFrameShadows is a Mixin
16461>>>>>>>>>
16461>>>>>>>>>    Function Com_NewEnum Returns Variant
16463>>>>>>>>>        Handle hDispatchDriver
16463>>>>>>>>>        Variant retVal
16463>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16464>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
16465>>>>>>>>>        Function_Return retVal
16466>>>>>>>>>    End_Function
16467>>>>>>>>>End_Class
16468>>>>>>>>>
16468>>>>>>>>>// CoClass
16468>>>>>>>>>// CLSID: {C0DE2200-B4D6-492D-931A-9A39D207DE99}
16468>>>>>>>>>Class cCJFrameShadows is a cComAutomationObject
16469>>>>>>>>>    Import_Class_Protocol cCJIFrameShadows
16470>>>>>>>>>
16470>>>>>>>>>    Procedure Construct_Object
16472>>>>>>>>>        Forward Send Construct_Object
16474>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
16475>>>>>>>>>    End_Procedure
16476>>>>>>>>>End_Class
16477>>>>>>>>>
16477>>>>>>>>>// CLSID: {C0DE2200-9BF8-4337-959A-4629C9286C7A}
16477>>>>>>>>>Class cCJIFrameShadowManager is a Mixin
16478>>>>>>>>>
16478>>>>>>>>>    Function ComFlags Returns Integer
16480>>>>>>>>>        Integer retVal
16480>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
16481>>>>>>>>>        Function_Return retVal
16482>>>>>>>>>    End_Function
16483>>>>>>>>>
16483>>>>>>>>>    Procedure Set ComFlags Integer value
16485>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
16486>>>>>>>>>    End_Procedure
16487>>>>>>>>>
16487>>>>>>>>>    Function ComDefaultOuterSize Returns Integer
16489>>>>>>>>>        Integer retVal
16489>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
16490>>>>>>>>>        Function_Return retVal
16491>>>>>>>>>    End_Function
16492>>>>>>>>>
16492>>>>>>>>>    Procedure Set ComDefaultOuterSize Integer value
16494>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
16495>>>>>>>>>    End_Procedure
16496>>>>>>>>>
16496>>>>>>>>>    Function ComDefaultInnerSize Returns Integer
16498>>>>>>>>>        Integer retVal
16498>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
16499>>>>>>>>>        Function_Return retVal
16500>>>>>>>>>    End_Function
16501>>>>>>>>>
16501>>>>>>>>>    Procedure Set ComDefaultInnerSize Integer value
16503>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
16504>>>>>>>>>    End_Procedure
16505>>>>>>>>>
16505>>>>>>>>>    Function ComDefaultOffsetX Returns OLE_XSIZE_PIXELS
16507>>>>>>>>>        OLE_XSIZE_PIXELS retVal
16507>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
16508>>>>>>>>>        Function_Return retVal
16509>>>>>>>>>    End_Function
16510>>>>>>>>>
16510>>>>>>>>>    Procedure Set ComDefaultOffsetX OLE_XSIZE_PIXELS value
16512>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
16513>>>>>>>>>    End_Procedure
16514>>>>>>>>>
16514>>>>>>>>>    Function ComDefaultOffsetY Returns OLE_YSIZE_PIXELS
16516>>>>>>>>>        OLE_YSIZE_PIXELS retVal
16516>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
16517>>>>>>>>>        Function_Return retVal
16518>>>>>>>>>    End_Function
16519>>>>>>>>>
16519>>>>>>>>>    Procedure Set ComDefaultOffsetY OLE_YSIZE_PIXELS value
16521>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
16522>>>>>>>>>    End_Procedure
16523>>>>>>>>>
16523>>>>>>>>>    Function ComDefaultColor Returns OLE_COLOR
16525>>>>>>>>>        OLE_COLOR retVal
16525>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
16526>>>>>>>>>        Function_Return retVal
16527>>>>>>>>>    End_Function
16528>>>>>>>>>
16528>>>>>>>>>    Procedure Set ComDefaultColor OLE_COLOR value
16530>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
16531>>>>>>>>>    End_Procedure
16532>>>>>>>>>
16532>>>>>>>>>    Function ComDefaultTransparency Returns Short
16534>>>>>>>>>        Short retVal
16534>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I2 to retVal
16535>>>>>>>>>        Function_Return retVal
16536>>>>>>>>>    End_Function
16537>>>>>>>>>
16537>>>>>>>>>    Procedure Set ComDefaultTransparency Short value
16539>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I2 to value
16540>>>>>>>>>    End_Procedure
16541>>>>>>>>>
16541>>>>>>>>>    Function ComDefaultClipOwner Returns Boolean
16543>>>>>>>>>        Boolean retVal
16543>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
16544>>>>>>>>>        Function_Return retVal
16545>>>>>>>>>    End_Function
16546>>>>>>>>>
16546>>>>>>>>>    Procedure Set ComDefaultClipOwner Boolean value
16548>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
16549>>>>>>>>>    End_Procedure
16550>>>>>>>>>
16550>>>>>>>>>    Function ComDefaultBlendingFactors Returns Variant
16552>>>>>>>>>        Handle hDispatchDriver
16552>>>>>>>>>        Variant retVal
16552>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16553>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_VARIANT to retVal
16554>>>>>>>>>        Function_Return retVal
16555>>>>>>>>>    End_Function
16556>>>>>>>>>
16556>>>>>>>>>    Function ComDefaultBlendingPositions Returns Variant
16558>>>>>>>>>        Handle hDispatchDriver
16558>>>>>>>>>        Variant retVal
16558>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16559>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_VARIANT to retVal
16560>>>>>>>>>        Function_Return retVal
16561>>>>>>>>>    End_Function
16562>>>>>>>>>
16562>>>>>>>>>    Function ComIsShadowSupported Returns Boolean
16564>>>>>>>>>        Handle hDispatchDriver
16564>>>>>>>>>        Boolean retVal
16564>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16565>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_BOOL to retVal
16566>>>>>>>>>        Function_Return retVal
16567>>>>>>>>>    End_Function
16568>>>>>>>>>
16568>>>>>>>>>    Function ComEnableShadow OLE_HANDLE llhWnd OLE_COLOR llColor Integer llOuterSize Integer llInnerSize Integer llxOffset Integer llyOffset Short llTransparency Returns Variant
16570>>>>>>>>>        Handle hDispatchDriver
16570>>>>>>>>>        Variant retVal
16570>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16571>>>>>>>>>        Send PrepareParams to hDispatchDriver 7
16572>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16573>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
16574>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llOuterSize
16575>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llInnerSize
16576>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llxOffset
16577>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llyOffset
16578>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llTransparency
16579>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
16580>>>>>>>>>        Function_Return retVal
16581>>>>>>>>>    End_Function
16582>>>>>>>>>
16582>>>>>>>>>    Procedure ComDisableShadow OLE_HANDLE llhWnd
16584>>>>>>>>>        Handle hDispatchDriver
16584>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16585>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16586>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16587>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 12 OLE_VT_VOID
16588>>>>>>>>>    End_Procedure
16589>>>>>>>>>
16589>>>>>>>>>    Function ComIsShadowEnabled OLE_HANDLE llhWnd Returns Boolean
16591>>>>>>>>>        Handle hDispatchDriver
16591>>>>>>>>>        Boolean retVal
16591>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16592>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16593>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16594>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
16595>>>>>>>>>        Function_Return retVal
16596>>>>>>>>>    End_Function
16597>>>>>>>>>
16597>>>>>>>>>    Function ComGetShadow OLE_HANDLE llhWnd Returns Variant
16599>>>>>>>>>        Handle hDispatchDriver
16599>>>>>>>>>        Variant retVal
16599>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16600>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16601>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16602>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
16603>>>>>>>>>        Function_Return retVal
16604>>>>>>>>>    End_Function
16605>>>>>>>>>
16605>>>>>>>>>    Procedure ComFreezeUpdates Boolean llfreeze
16607>>>>>>>>>        Handle hDispatchDriver
16607>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16608>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16609>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llfreeze
16610>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
16611>>>>>>>>>    End_Procedure
16612>>>>>>>>>
16612>>>>>>>>>    Procedure ComSetGlobalOuterSize Integer llsize
16614>>>>>>>>>        Handle hDispatchDriver
16614>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16615>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16616>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llsize
16617>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
16618>>>>>>>>>    End_Procedure
16619>>>>>>>>>
16619>>>>>>>>>    Procedure ComSetGlobalInnerSize Integer llsize
16621>>>>>>>>>        Handle hDispatchDriver
16621>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16622>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16623>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llsize
16624>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
16625>>>>>>>>>    End_Procedure
16626>>>>>>>>>
16626>>>>>>>>>    Procedure ComSetGlobalOffset OLE_XSIZE_PIXELS llOffsetX OLE_YSIZE_PIXELS llOffsetY
16628>>>>>>>>>        Handle hDispatchDriver
16628>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16629>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16630>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llOffsetX
16631>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llOffsetY
16632>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
16633>>>>>>>>>    End_Procedure
16634>>>>>>>>>
16634>>>>>>>>>    Procedure ComSetGlobalColor OLE_COLOR llColor
16636>>>>>>>>>        Handle hDispatchDriver
16636>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16637>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16638>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
16639>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 19 OLE_VT_VOID
16640>>>>>>>>>    End_Procedure
16641>>>>>>>>>
16641>>>>>>>>>    Procedure ComSetGlobalTransparency Short llTransparency
16643>>>>>>>>>        Handle hDispatchDriver
16643>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16644>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16645>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llTransparency
16646>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
16647>>>>>>>>>    End_Procedure
16648>>>>>>>>>
16648>>>>>>>>>    Procedure ComSetDefaultBlendingOptions Variant llfactors Variant llpositions
16650>>>>>>>>>        Handle hDispatchDriver
16650>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16651>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16652>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llfactors
16653>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpositions
16654>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
16655>>>>>>>>>    End_Procedure
16656>>>>>>>>>
16656>>>>>>>>>    Procedure ComSetGlobalBlendingOptions Variant llfactors Variant llpositions
16658>>>>>>>>>        Handle hDispatchDriver
16658>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16659>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16660>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llfactors
16661>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpositions
16662>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
16663>>>>>>>>>    End_Procedure
16664>>>>>>>>>
16664>>>>>>>>>    Procedure ComSetGlobalClipOwner Boolean llclip
16666>>>>>>>>>        Handle hDispatchDriver
16666>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16667>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16668>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llclip
16669>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
16670>>>>>>>>>    End_Procedure
16671>>>>>>>>>
16671>>>>>>>>>    Function ComFrameShadows Returns Variant
16673>>>>>>>>>        Handle hDispatchDriver
16673>>>>>>>>>        Variant retVal
16673>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16674>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 23 OLE_VT_DISPATCH to retVal
16675>>>>>>>>>        Function_Return retVal
16676>>>>>>>>>    End_Function
16677>>>>>>>>>End_Class
16678>>>>>>>>>
16678>>>>>>>>>// CoClass
16678>>>>>>>>>// CLSID: {C0DE2200-DDA7-45FD-8AE8-B1A88391344D}
16678>>>>>>>>>Class cCJFrameShadowManager is a cComAutomationObject
16679>>>>>>>>>    Import_Class_Protocol cCJIFrameShadowManager
16680>>>>>>>>>
16680>>>>>>>>>    Procedure Construct_Object
16682>>>>>>>>>        Forward Send Construct_Object
16684>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
16685>>>>>>>>>    End_Procedure
16686>>>>>>>>>End_Class
16687>>>>>>>>>
16687>>>>>>>>>// CLSID: {C0DE2200-B997-432B-AB4F-439341A769E5}
16687>>>>>>>>>// Dispatch interface for CommandBars Control
16687>>>>>>>>>Class cCJ_DCommandBars is a Mixin
16688>>>>>>>>>
16688>>>>>>>>>    Function ComVisualTheme Returns XTPVisualTheme
16690>>>>>>>>>        XTPVisualTheme retVal
16690>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
16691>>>>>>>>>        Function_Return retVal
16692>>>>>>>>>    End_Function
16693>>>>>>>>>
16693>>>>>>>>>    Procedure Set ComVisualTheme XTPVisualTheme value
16695>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
16696>>>>>>>>>    End_Procedure
16697>>>>>>>>>
16697>>>>>>>>>    Function ComIcons Returns Variant
16699>>>>>>>>>        Variant retVal
16699>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
16700>>>>>>>>>        Function_Return retVal
16701>>>>>>>>>    End_Function
16702>>>>>>>>>
16702>>>>>>>>>    Procedure Set ComIcons Variant value
16704>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
16705>>>>>>>>>    End_Procedure
16706>>>>>>>>>
16706>>>>>>>>>    Function ComScaleMode Returns XTPScaleMode
16708>>>>>>>>>        XTPScaleMode retVal
16708>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
16709>>>>>>>>>        Function_Return retVal
16710>>>>>>>>>    End_Function
16711>>>>>>>>>
16711>>>>>>>>>    Procedure Set ComScaleMode XTPScaleMode value
16713>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
16714>>>>>>>>>    End_Procedure
16715>>>>>>>>>
16715>>>>>>>>>    Function ComRightToLeft Returns Boolean
16717>>>>>>>>>        Boolean retVal
16717>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to retVal
16718>>>>>>>>>        Function_Return retVal
16719>>>>>>>>>    End_Function
16720>>>>>>>>>
16720>>>>>>>>>    Procedure Set ComRightToLeft Boolean value
16722>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to value
16723>>>>>>>>>    End_Procedure
16724>>>>>>>>>
16724>>>>>>>>>    Function ComIsAllCaps Returns Boolean
16726>>>>>>>>>        Boolean retVal
16726>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_BOOL to retVal
16727>>>>>>>>>        Function_Return retVal
16728>>>>>>>>>    End_Function
16729>>>>>>>>>
16729>>>>>>>>>    Procedure Set ComIsAllCaps Boolean value
16731>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_BOOL to value
16732>>>>>>>>>    End_Procedure
16733>>>>>>>>>
16733>>>>>>>>>    Function ComIsAllowFrameTransparency Returns Boolean
16735>>>>>>>>>        Boolean retVal
16735>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_BOOL to retVal
16736>>>>>>>>>        Function_Return retVal
16737>>>>>>>>>    End_Function
16738>>>>>>>>>
16738>>>>>>>>>    Procedure Set ComIsAllowFrameTransparency Boolean value
16740>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_BOOL to value
16741>>>>>>>>>    End_Procedure
16742>>>>>>>>>
16742>>>>>>>>>    Function ComFontHeight Returns Integer
16744>>>>>>>>>        Integer retVal
16744>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 73 OLE_VT_I4 to retVal
16745>>>>>>>>>        Function_Return retVal
16746>>>>>>>>>    End_Function
16747>>>>>>>>>
16747>>>>>>>>>    Procedure Set ComFontHeight Integer value
16749>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 73 OLE_VT_I4 to value
16750>>>>>>>>>    End_Procedure
16751>>>>>>>>>
16751>>>>>>>>>    Function ComReCreateReparented Returns Boolean
16753>>>>>>>>>        Boolean retVal
16753>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
16754>>>>>>>>>        Function_Return retVal
16755>>>>>>>>>    End_Function
16756>>>>>>>>>
16756>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
16758>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
16759>>>>>>>>>    End_Procedure
16760>>>>>>>>>
16760>>>>>>>>>    Function ComCount Returns Integer
16762>>>>>>>>>        Handle hDispatchDriver
16762>>>>>>>>>        Integer retVal
16762>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16763>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
16764>>>>>>>>>        Function_Return retVal
16765>>>>>>>>>    End_Function
16766>>>>>>>>>
16766>>>>>>>>>    // Returns a specific item.
16766>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
16768>>>>>>>>>        Handle hDispatchDriver
16768>>>>>>>>>        Variant retVal
16768>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16769>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16770>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
16771>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
16772>>>>>>>>>        Function_Return retVal
16773>>>>>>>>>    End_Function
16774>>>>>>>>>
16774>>>>>>>>>    Function Com_NewEnum Returns Variant
16776>>>>>>>>>        Handle hDispatchDriver
16776>>>>>>>>>        Variant retVal
16776>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16777>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
16778>>>>>>>>>        Function_Return retVal
16779>>>>>>>>>    End_Function
16780>>>>>>>>>
16780>>>>>>>>>    Function ComAdd String llName XTPBarPosition llPosition Returns Variant
16782>>>>>>>>>        Handle hDispatchDriver
16782>>>>>>>>>        Variant retVal
16782>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16783>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16784>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
16785>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
16786>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
16787>>>>>>>>>        Function_Return retVal
16788>>>>>>>>>    End_Function
16789>>>>>>>>>
16789>>>>>>>>>    Procedure ComAddImageList Variant llImageList
16791>>>>>>>>>        Handle hDispatchDriver
16791>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16792>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16793>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llImageList
16794>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
16795>>>>>>>>>    End_Procedure
16796>>>>>>>>>
16796>>>>>>>>>    Function ComActiveMenuBar Returns Variant
16798>>>>>>>>>        Handle hDispatchDriver
16798>>>>>>>>>        Variant retVal
16798>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16799>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
16800>>>>>>>>>        Function_Return retVal
16801>>>>>>>>>    End_Function
16802>>>>>>>>>
16802>>>>>>>>>    Procedure ComGetClientRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
16804>>>>>>>>>        Handle hDispatchDriver
16804>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16805>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16806>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
16807>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
16808>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
16809>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
16810>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
16811>>>>>>>>>    End_Procedure
16812>>>>>>>>>
16812>>>>>>>>>    Procedure ComRecalcLayout
16814>>>>>>>>>        Handle hDispatchDriver
16814>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16815>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
16816>>>>>>>>>    End_Procedure
16817>>>>>>>>>
16817>>>>>>>>>    Function ComKeyBindings Returns Variant
16819>>>>>>>>>        Handle hDispatchDriver
16819>>>>>>>>>        Variant retVal
16819>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16820>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_DISPATCH to retVal
16821>>>>>>>>>        Function_Return retVal
16822>>>>>>>>>    End_Function
16823>>>>>>>>>
16823>>>>>>>>>    Procedure ComAddIconHandle Longptr llIcon Integer llCommand Integer llimageState Boolean llAlpha
16825>>>>>>>>>        Handle hDispatchDriver
16825>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16826>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16827>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llIcon
16828>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
16829>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
16830>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llAlpha
16831>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
16832>>>>>>>>>    End_Procedure
16833>>>>>>>>>
16833>>>>>>>>>    Function ComOptions Returns Variant
16835>>>>>>>>>        Handle hDispatchDriver
16835>>>>>>>>>        Variant retVal
16835>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16836>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
16837>>>>>>>>>        Function_Return retVal
16838>>>>>>>>>    End_Function
16839>>>>>>>>>
16839>>>>>>>>>    Procedure ComSaveCommandBars Variant llRegistryKey Variant llAppName Variant llSection
16841>>>>>>>>>        Handle hDispatchDriver
16841>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16842>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
16843>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRegistryKey
16844>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llAppName
16845>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSection
16846>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
16847>>>>>>>>>    End_Procedure
16848>>>>>>>>>
16848>>>>>>>>>    Procedure ComLoadCommandBars Variant llRegistryKey Variant llAppName Variant llSection
16850>>>>>>>>>        Handle hDispatchDriver
16850>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16851>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
16852>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRegistryKey
16853>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llAppName
16854>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSection
16855>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
16856>>>>>>>>>    End_Procedure
16857>>>>>>>>>
16857>>>>>>>>>    Procedure ComLoadDesignerBars Variant llFileNameOrResource Variant llInstance
16859>>>>>>>>>        Handle hDispatchDriver
16859>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16860>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16861>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFileNameOrResource
16862>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llInstance
16863>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
16864>>>>>>>>>    End_Procedure
16865>>>>>>>>>
16865>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
16867>>>>>>>>>        Handle hDispatchDriver
16867>>>>>>>>>        Variant retVal
16867>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16868>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16869>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
16870>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
16871>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
16872>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
16873>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
16874>>>>>>>>>        Function_Return retVal
16875>>>>>>>>>    End_Function
16876>>>>>>>>>
16876>>>>>>>>>    Procedure ComAboutBox
16878>>>>>>>>>        Handle hDispatchDriver
16878>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16879>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
16880>>>>>>>>>    End_Procedure
16881>>>>>>>>>
16881>>>>>>>>>    Procedure ComDockToolBar Variant llToolBar Integer llx Integer lly XTPBarPosition llPosition
16883>>>>>>>>>        Handle hDispatchDriver
16883>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16884>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16885>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llToolBar
16886>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
16887>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
16888>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
16889>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
16890>>>>>>>>>    End_Procedure
16891>>>>>>>>>
16891>>>>>>>>>    Function ComGetSpecialColor XTPColorManagerColor llIndex Returns OLE_COLOR
16893>>>>>>>>>        Handle hDispatchDriver
16893>>>>>>>>>        OLE_COLOR retVal
16893>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16894>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16895>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
16896>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 19 OLE_VT_I4 to retVal
16897>>>>>>>>>        Function_Return retVal
16898>>>>>>>>>    End_Function
16899>>>>>>>>>
16899>>>>>>>>>    Function ComShowTabWorkspace Boolean llShow Returns Variant
16901>>>>>>>>>        Handle hDispatchDriver
16901>>>>>>>>>        Variant retVal
16901>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16902>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16903>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShow
16904>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
16905>>>>>>>>>        Function_Return retVal
16906>>>>>>>>>    End_Function
16907>>>>>>>>>
16907>>>>>>>>>    Procedure ComMoveAlignedControl Variant llControl Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
16909>>>>>>>>>        Handle hDispatchDriver
16909>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16910>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
16911>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llControl
16912>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
16913>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
16914>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
16915>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
16916>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
16917>>>>>>>>>    End_Procedure
16918>>>>>>>>>
16918>>>>>>>>>    Function ComTabWorkspace Returns Variant
16920>>>>>>>>>        Handle hDispatchDriver
16920>>>>>>>>>        Variant retVal
16920>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16921>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 22 OLE_VT_DISPATCH to retVal
16922>>>>>>>>>        Function_Return retVal
16923>>>>>>>>>    End_Function
16924>>>>>>>>>
16924>>>>>>>>>    Procedure ComLoadStateFromString String llProfile Boolean llRestoreControls Boolean llRestoreOptions Boolean llSilent
16926>>>>>>>>>        Handle hDispatchDriver
16926>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16927>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16928>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
16929>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRestoreControls
16930>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRestoreOptions
16931>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSilent
16932>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
16933>>>>>>>>>    End_Procedure
16934>>>>>>>>>
16934>>>>>>>>>    Function ComSaveStateToString Boolean llSaveControls Boolean llSaveOnlyCustomized Boolean llSaveOptions Returns String
16936>>>>>>>>>        Handle hDispatchDriver
16936>>>>>>>>>        String retVal
16936>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16937>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
16938>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveControls
16939>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveOnlyCustomized
16940>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveOptions
16941>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 24 OLE_VT_BSTR to retVal
16942>>>>>>>>>        Function_Return retVal
16943>>>>>>>>>    End_Function
16944>>>>>>>>>
16944>>>>>>>>>    Function ComStatusBar Returns Variant
16946>>>>>>>>>        Handle hDispatchDriver
16946>>>>>>>>>        Variant retVal
16946>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16947>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 25 OLE_VT_DISPATCH to retVal
16948>>>>>>>>>        Function_Return retVal
16949>>>>>>>>>    End_Function
16950>>>>>>>>>
16950>>>>>>>>>    Function ComMessageBar Returns Variant
16952>>>>>>>>>        Handle hDispatchDriver
16952>>>>>>>>>        Variant retVal
16952>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16953>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 28 OLE_VT_DISPATCH to retVal
16954>>>>>>>>>        Function_Return retVal
16955>>>>>>>>>    End_Function
16956>>>>>>>>>
16956>>>>>>>>>    Procedure ComEnableCustomization Boolean llEnable
16958>>>>>>>>>        Handle hDispatchDriver
16958>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16959>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16960>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
16961>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 26 OLE_VT_VOID
16962>>>>>>>>>    End_Procedure
16963>>>>>>>>>
16963>>>>>>>>>    Function ComDesignerControls Returns Variant
16965>>>>>>>>>        Handle hDispatchDriver
16965>>>>>>>>>        Variant retVal
16965>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16966>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 27 OLE_VT_DISPATCH to retVal
16967>>>>>>>>>        Function_Return retVal
16968>>>>>>>>>    End_Function
16969>>>>>>>>>
16969>>>>>>>>>    Procedure ComEnableDefaultResetCustomizedToolbarChoice Boolean llEnable Boolean llDefaultYes
16971>>>>>>>>>        Handle hDispatchDriver
16971>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16972>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16973>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
16974>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llDefaultYes
16975>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 72 OLE_VT_VOID
16976>>>>>>>>>    End_Procedure
16977>>>>>>>>>
16977>>>>>>>>>    Function ComGetDispatch Returns Variant
16979>>>>>>>>>        Handle hDispatchDriver
16979>>>>>>>>>        Variant retVal
16979>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16980>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 31 OLE_VT_DISPATCH to retVal
16981>>>>>>>>>        Function_Return retVal
16982>>>>>>>>>    End_Function
16983>>>>>>>>>
16983>>>>>>>>>    Procedure ComSetMDIClient OLE_HANDLE llhWnd
16985>>>>>>>>>        Handle hDispatchDriver
16985>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16986>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16987>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16988>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
16989>>>>>>>>>    End_Procedure
16990>>>>>>>>>
16990>>>>>>>>>    Function ComGlobalSettings Returns Variant
16992>>>>>>>>>        Handle hDispatchDriver
16992>>>>>>>>>        Variant retVal
16992>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16993>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_DISPATCH to retVal
16994>>>>>>>>>        Function_Return retVal
16995>>>>>>>>>    End_Function
16996>>>>>>>>>
16996>>>>>>>>>    Procedure ComClosePopups
16998>>>>>>>>>        Handle hDispatchDriver
16998>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16999>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 34 OLE_VT_VOID
17000>>>>>>>>>    End_Procedure
17001>>>>>>>>>
17001>>>>>>>>>    Procedure ComSetSpecialColor XTPColorManagerColor llIndex OLE_COLOR llColor
17003>>>>>>>>>        Handle hDispatchDriver
17003>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17004>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
17005>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
17006>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
17007>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
17008>>>>>>>>>    End_Procedure
17009>>>>>>>>>
17009>>>>>>>>>    Function ComAddDialogBar String llName XTPBarPosition llPosition Returns Variant
17011>>>>>>>>>        Handle hDispatchDriver
17011>>>>>>>>>        Variant retVal
17011>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17012>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
17013>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
17014>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
17015>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 36 OLE_VT_DISPATCH to retVal
17016>>>>>>>>>        Function_Return retVal
17017>>>>>>>>>    End_Function
17018>>>>>>>>>
17018>>>>>>>>>    Procedure ComLoadStateFromXMLString String llProfile String llstate Variant llOptions
17020>>>>>>>>>        Handle hDispatchDriver
17020>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17021>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
17022>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
17023>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstate
17024>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
17025>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
17026>>>>>>>>>    End_Procedure
17027>>>>>>>>>
17027>>>>>>>>>    Function ComSaveStateToXMLString String llProfile Variant llOptions Returns String
17029>>>>>>>>>        Handle hDispatchDriver
17029>>>>>>>>>        String retVal
17029>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17030>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
17031>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
17032>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
17033>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 38 OLE_VT_BSTR to retVal
17034>>>>>>>>>        Function_Return retVal
17035>>>>>>>>>    End_Function
17036>>>>>>>>>
17036>>>>>>>>>    Function ComCreateStateOptions Returns Variant
17038>>>>>>>>>        Handle hDispatchDriver
17038>>>>>>>>>        Variant retVal
17038>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17039>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 39 OLE_VT_DISPATCH to retVal
17040>>>>>>>>>        Function_Return retVal
17041>>>>>>>>>    End_Function
17042>>>>>>>>>
17042>>>>>>>>>    Procedure ComDoPropExchange Variant llpPX Variant llOptions
17044>>>>>>>>>        Handle hDispatchDriver
17044>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17045>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
17046>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpPX
17047>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
17048>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 45 OLE_VT_VOID
17049>>>>>>>>>    End_Procedure
17050>>>>>>>>>
17050>>>>>>>>>    Function ComCustomizedControl Returns Variant
17052>>>>>>>>>        Handle hDispatchDriver
17052>>>>>>>>>        Variant retVal
17052>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17053>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_DISPATCH to retVal
17054>>>>>>>>>        Function_Return retVal
17055>>>>>>>>>    End_Function
17056>>>>>>>>>
17056>>>>>>>>>    // Deletes all of the toolbars
17056>>>>>>>>>    Procedure ComDeleteAll
17058>>>>>>>>>        Handle hDispatchDriver
17058>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17059>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 41 OLE_VT_VOID
17060>>>>>>>>>    End_Procedure
17061>>>>>>>>>
17061>>>>>>>>>    Function ComToolTipContext Returns Variant
17063>>>>>>>>>        Handle hDispatchDriver
17063>>>>>>>>>        Variant retVal
17063>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17064>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 42 OLE_VT_DISPATCH to retVal
17065>>>>>>>>>        Function_Return retVal
17066>>>>>>>>>    End_Function
17067>>>>>>>>>
17067>>>>>>>>>    Function ComTrackingMode Returns Boolean
17069>>>>>>>>>        Handle hDispatchDriver
17069>>>>>>>>>        Boolean retVal
17069>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17070>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_BOOL to retVal
17071>>>>>>>>>        Function_Return retVal
17072>>>>>>>>>    End_Function
17073>>>>>>>>>
17073>>>>>>>>>    Function ComFocusedCommandBar Returns Variant
17075>>>>>>>>>        Handle hDispatchDriver
17075>>>>>>>>>        Variant retVal
17075>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17076>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_DISPATCH to retVal
17077>>>>>>>>>        Function_Return retVal
17078>>>>>>>>>    End_Function
17079>>>>>>>>>
17079>>>>>>>>>    Function ComAddMenuBar String llName Returns Variant
17081>>>>>>>>>        Handle hDispatchDriver
17081>>>>>>>>>        Variant retVal
17081>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17082>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17083>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
17084>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 47 OLE_VT_DISPATCH to retVal
17085>>>>>>>>>        Function_Return retVal
17086>>>>>>>>>    End_Function
17087>>>>>>>>>
17087>>>>>>>>>    Function ComAddTabToolBar String llName Returns Variant
17089>>>>>>>>>        Handle hDispatchDriver
17089>>>>>>>>>        Variant retVal
17089>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17090>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17091>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
17092>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 48 OLE_VT_DISPATCH to retVal
17093>>>>>>>>>        Function_Return retVal
17094>>>>>>>>>    End_Function
17095>>>>>>>>>
17095>>>>>>>>>    Function ComAddRibbonBar String llName Returns Variant
17097>>>>>>>>>        Handle hDispatchDriver
17097>>>>>>>>>        Variant retVal
17097>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17098>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17099>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
17100>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 49 OLE_VT_DISPATCH to retVal
17101>>>>>>>>>        Function_Return retVal
17102>>>>>>>>>    End_Function
17103>>>>>>>>>
17103>>>>>>>>>    Procedure ComAttachToWindow OLE_HANDLE llhWnd
17105>>>>>>>>>        Handle hDispatchDriver
17105>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17106>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17107>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17108>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 50 OLE_VT_VOID
17109>>>>>>>>>    End_Procedure
17110>>>>>>>>>
17110>>>>>>>>>    Procedure ComShowCustomizeDialog Integer llActiveTab
17112>>>>>>>>>        Handle hDispatchDriver
17112>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17113>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17114>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llActiveTab
17115>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 51 OLE_VT_VOID
17116>>>>>>>>>    End_Procedure
17117>>>>>>>>>
17117>>>>>>>>>    Procedure ComEnableOffice2007Frame Boolean llEnable
17119>>>>>>>>>        Handle hDispatchDriver
17119>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17120>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17121>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
17122>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 52 OLE_VT_VOID
17123>>>>>>>>>    End_Procedure
17124>>>>>>>>>
17124>>>>>>>>>    Procedure ComEnableFrameTheme Boolean llEnable
17126>>>>>>>>>        Handle hDispatchDriver
17126>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17127>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17128>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
17129>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 90 OLE_VT_VOID
17130>>>>>>>>>    End_Procedure
17131>>>>>>>>>
17131>>>>>>>>>    Procedure ComEnableActions
17133>>>>>>>>>        Handle hDispatchDriver
17133>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17134>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 53 OLE_VT_VOID
17135>>>>>>>>>    End_Procedure
17136>>>>>>>>>
17136>>>>>>>>>    Function ComActions Returns Variant
17138>>>>>>>>>        Handle hDispatchDriver
17138>>>>>>>>>        Variant retVal
17138>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17139>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 54 OLE_VT_DISPATCH to retVal
17140>>>>>>>>>        Function_Return retVal
17141>>>>>>>>>    End_Function
17142>>>>>>>>>
17142>>>>>>>>>    Function ComPaintManager Returns Variant
17144>>>>>>>>>        Handle hDispatchDriver
17144>>>>>>>>>        Variant retVal
17144>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17145>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 55 OLE_VT_DISPATCH to retVal
17146>>>>>>>>>        Function_Return retVal
17147>>>>>>>>>    End_Function
17148>>>>>>>>>
17148>>>>>>>>>    Function ComCreateGalleryItems Integer llId Returns Variant
17150>>>>>>>>>        Handle hDispatchDriver
17150>>>>>>>>>        Variant retVal
17150>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17151>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17152>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17153>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 56 OLE_VT_DISPATCH to retVal
17154>>>>>>>>>        Function_Return retVal
17155>>>>>>>>>    End_Function
17156>>>>>>>>>
17156>>>>>>>>>    Procedure ComEnableOffice2007FrameHandle OLE_HANDLE llhWnd
17158>>>>>>>>>        Handle hDispatchDriver
17158>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17159>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17160>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17161>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 57 OLE_VT_VOID
17162>>>>>>>>>    End_Procedure
17163>>>>>>>>>
17163>>>>>>>>>    Procedure ComEnableFrameThemeHandle OLE_HANDLE llhWnd
17165>>>>>>>>>        Handle hDispatchDriver
17165>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17166>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17167>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17168>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 100 OLE_VT_VOID
17169>>>>>>>>>    End_Procedure
17170>>>>>>>>>
17170>>>>>>>>>    Function ComCreateCommandBarControl String llClassName Returns Variant
17172>>>>>>>>>        Handle hDispatchDriver
17172>>>>>>>>>        Variant retVal
17172>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17173>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17174>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
17175>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 58 OLE_VT_DISPATCH to retVal
17176>>>>>>>>>        Function_Return retVal
17177>>>>>>>>>    End_Function
17178>>>>>>>>>
17178>>>>>>>>>    Function ComCreateCommandBar String llClassName Returns Variant
17180>>>>>>>>>        Handle hDispatchDriver
17180>>>>>>>>>        Variant retVal
17180>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17181>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17182>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
17183>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 59 OLE_VT_DISPATCH to retVal
17184>>>>>>>>>        Function_Return retVal
17185>>>>>>>>>    End_Function
17186>>>>>>>>>
17186>>>>>>>>>    Function ComContextHelp Returns Integer
17188>>>>>>>>>        Handle hDispatchDriver
17188>>>>>>>>>        Integer retVal
17188>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17189>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 60 OLE_VT_I4 to retVal
17190>>>>>>>>>        Function_Return retVal
17191>>>>>>>>>    End_Function
17192>>>>>>>>>
17192>>>>>>>>>    Function ComContextMenus Returns Variant
17194>>>>>>>>>        Handle hDispatchDriver
17194>>>>>>>>>        Variant retVal
17194>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17195>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 61 OLE_VT_DISPATCH to retVal
17196>>>>>>>>>        Function_Return retVal
17197>>>>>>>>>    End_Function
17198>>>>>>>>>
17198>>>>>>>>>    Procedure ComOLEDrag
17200>>>>>>>>>        Handle hDispatchDriver
17200>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17201>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 62 OLE_VT_VOID
17202>>>>>>>>>    End_Procedure
17203>>>>>>>>>
17203>>>>>>>>>    Function ComAddMiniToolBar String llName Returns Variant
17205>>>>>>>>>        Handle hDispatchDriver
17205>>>>>>>>>        Variant retVal
17205>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17206>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17207>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
17208>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 63 OLE_VT_DISPATCH to retVal
17209>>>>>>>>>        Function_Return retVal
17210>>>>>>>>>    End_Function
17211>>>>>>>>>
17211>>>>>>>>>    Function ComRecentFileList Returns Variant
17213>>>>>>>>>        Handle hDispatchDriver
17213>>>>>>>>>        Variant retVal
17213>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17214>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 64 OLE_VT_DISPATCH to retVal
17215>>>>>>>>>        Function_Return retVal
17216>>>>>>>>>    End_Function
17217>>>>>>>>>
17217>>>>>>>>>    Procedure ComDisableOffice2007FrameHandle OLE_HANDLE llhWnd
17219>>>>>>>>>        Handle hDispatchDriver
17219>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17220>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17221>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17222>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 65 OLE_VT_VOID
17223>>>>>>>>>    End_Procedure
17224>>>>>>>>>
17224>>>>>>>>>    Procedure ComDisableFrameThemeHandle OLE_HANDLE llhWnd
17226>>>>>>>>>        Handle hDispatchDriver
17226>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17227>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17228>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17229>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 110 OLE_VT_VOID
17230>>>>>>>>>    End_Procedure
17231>>>>>>>>>
17231>>>>>>>>>    Procedure ComAddCustomBar Variant llCommandBar String llName XTPBarPosition llPosition
17233>>>>>>>>>        Handle hDispatchDriver
17233>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17234>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
17235>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llCommandBar
17236>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
17237>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
17238>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 66 OLE_VT_VOID
17239>>>>>>>>>    End_Procedure
17240>>>>>>>>>
17240>>>>>>>>>    Procedure ComEnableToolbarComposition Boolean llEnable
17242>>>>>>>>>        Handle hDispatchDriver
17242>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17243>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17244>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
17245>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 67 OLE_VT_VOID
17246>>>>>>>>>    End_Procedure
17247>>>>>>>>>
17247>>>>>>>>>    Procedure ComSetAllCaps Boolean llSetAllCaps
17249>>>>>>>>>        Handle hDispatchDriver
17249>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17250>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17251>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllCaps
17252>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 68 OLE_VT_VOID
17253>>>>>>>>>    End_Procedure
17254>>>>>>>>>
17254>>>>>>>>>    Procedure ComAllowFrameTransparency Boolean llSetAllowTransparency
17256>>>>>>>>>        Handle hDispatchDriver
17256>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17257>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17258>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllowTransparency
17259>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 70 OLE_VT_VOID
17260>>>>>>>>>    End_Procedure
17261>>>>>>>>>
17261>>>>>>>>>    Function ComSetOfficeSetBackImage XTPBackImage llBackImage Returns Boolean
17263>>>>>>>>>        Handle hDispatchDriver
17263>>>>>>>>>        Boolean retVal
17263>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17264>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17265>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBackImage
17266>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 80 OLE_VT_BOOL to retVal
17267>>>>>>>>>        Function_Return retVal
17268>>>>>>>>>    End_Function
17269>>>>>>>>>End_Class
17270>>>>>>>>>
17270>>>>>>>>>// CLSID: {C0DE2200-1D1A-4AFA-8DFF-8798A2181226}
17270>>>>>>>>>// Event interface for CommandBars Control
17270>>>>>>>>>Class cCJ_DCommandBarsEvents is a Mixin
17271>>>>>>>>>
17271>>>>>>>>>    Procedure OnComExecute Variant llControl
17273>>>>>>>>>    End_Procedure
17274>>>>>>>>>
17274>>>>>>>>>//    { MethodType=Event }
17274>>>>>>>>>//    Procedure OnComUpdate Variant llControl
17274>>>>>>>>>//    End_Procedure
17274>>>>>>>>>
17274>>>>>>>>>    Procedure OnComResize
17276>>>>>>>>>    End_Procedure
17277>>>>>>>>>
17277>>>>>>>>>    Procedure OnComGetClientBordersWidth Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
17279>>>>>>>>>    End_Procedure
17280>>>>>>>>>
17280>>>>>>>>>    Procedure OnComControlSelected Variant llControl
17282>>>>>>>>>    End_Procedure
17283>>>>>>>>>
17283>>>>>>>>>    Procedure OnComInitCommandsPopup Variant llCommandBar
17285>>>>>>>>>    End_Procedure
17286>>>>>>>>>
17286>>>>>>>>>    Procedure OnComResizeClient Integer llLeft Integer llTop Integer llRight Integer llBottom
17288>>>>>>>>>    End_Procedure
17289>>>>>>>>>
17289>>>>>>>>>    Procedure OnComSpecialColorChanged
17291>>>>>>>>>    End_Procedure
17292>>>>>>>>>
17292>>>>>>>>>    Procedure OnComRepositionAlignedControls Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
17294>>>>>>>>>    End_Procedure
17295>>>>>>>>>
17295>>>>>>>>>    Procedure OnComCustomization Variant llOptions
17297>>>>>>>>>    End_Procedure
17298>>>>>>>>>
17298>>>>>>>>>    Procedure OnComToolBarVisibleChanged Variant llToolBar
17300>>>>>>>>>    End_Procedure
17301>>>>>>>>>
17301>>>>>>>>>    Procedure OnComControlRButtonUp Variant llControl
17303>>>>>>>>>    End_Procedure
17304>>>>>>>>>
17304>>>>>>>>>    Procedure OnComCustomizationDone
17306>>>>>>>>>    End_Procedure
17307>>>>>>>>>
17307>>>>>>>>>    Procedure OnComCommandBarKeyDown Variant llCommandBar Integer ByRef llKeyCode Short llShift
17309>>>>>>>>>    End_Procedure
17310>>>>>>>>>
17310>>>>>>>>>    Procedure OnComToolBarContextMenu Variant llToolBar Variant llContextMenu
17312>>>>>>>>>    End_Procedure
17313>>>>>>>>>
17313>>>>>>>>>    Procedure OnComTrackingModeChanged Variant llCommandBar Boolean llMode
17315>>>>>>>>>    End_Procedure
17316>>>>>>>>>
17316>>>>>>>>>    Procedure OnComCustomizationResetToolBar Variant llToolBar
17318>>>>>>>>>    End_Procedure
17319>>>>>>>>>
17319>>>>>>>>>    Procedure OnComCustomizationAddToolBar Variant llToolBar
17321>>>>>>>>>    End_Procedure
17322>>>>>>>>>
17322>>>>>>>>>    Procedure OnComCustomizationDeleteToolBar Variant llToolBar
17324>>>>>>>>>    End_Procedure
17325>>>>>>>>>
17325>>>>>>>>>    Procedure OnComControlNotify Variant llControl Integer llCode Variant llNotifyData Variant llHandled
17327>>>>>>>>>    End_Procedure
17328>>>>>>>>>
17328>>>>>>>>>    Procedure OnComGetActiveDocumentID Integer ByRef llId
17330>>>>>>>>>    End_Procedure
17331>>>>>>>>>
17331>>>>>>>>>    Procedure OnComCustomizationResetAll
17333>>>>>>>>>    End_Procedure
17334>>>>>>>>>
17334>>>>>>>>>    Procedure OnComMessageBarClosed Variant llMessageBar
17336>>>>>>>>>    End_Procedure
17337>>>>>>>>>
17337>>>>>>>>>    Procedure OnComOLEStartDrag Variant llData Integer ByRef llAllowedEffects
17339>>>>>>>>>    End_Procedure
17340>>>>>>>>>
17340>>>>>>>>>    Procedure OnComOLECompleteDrag Integer ByRef llEffect
17342>>>>>>>>>    End_Procedure
17343>>>>>>>>>
17343>>>>>>>>>    Procedure OnComReCreated
17345>>>>>>>>>    End_Procedure
17346>>>>>>>>>
17346>>>>>>>>>    Procedure RegisterComEvents
17348>>>>>>>>>        Send RegisterComEvent 1 msg_OnComExecute
17349>>>>>>>>>//        Send RegisterComEvent 2 msg_OnComUpdate
17349>>>>>>>>>        Send RegisterComEvent 3 msg_OnComResize
17350>>>>>>>>>        Send RegisterComEvent 4 msg_OnComGetClientBordersWidth
17351>>>>>>>>>        Send RegisterComEvent 5 msg_OnComControlSelected
17352>>>>>>>>>        Send RegisterComEvent 6 msg_OnComInitCommandsPopup
17353>>>>>>>>>        Send RegisterComEvent 7 msg_OnComResizeClient
17354>>>>>>>>>        Send RegisterComEvent 8 msg_OnComSpecialColorChanged
17355>>>>>>>>>        Send RegisterComEvent 9 msg_OnComRepositionAlignedControls
17356>>>>>>>>>        Send RegisterComEvent 10 msg_OnComCustomization
17357>>>>>>>>>        Send RegisterComEvent 11 msg_OnComToolBarVisibleChanged
17358>>>>>>>>>        Send RegisterComEvent 12 msg_OnComControlRButtonUp
17359>>>>>>>>>        Send RegisterComEvent 13 msg_OnComCustomizationDone
17360>>>>>>>>>        Send RegisterComEvent -602 msg_OnComCommandBarKeyDown
17361>>>>>>>>>        Send RegisterComEvent 14 msg_OnComToolBarContextMenu
17362>>>>>>>>>        Send RegisterComEvent 15 msg_OnComTrackingModeChanged
17363>>>>>>>>>        Send RegisterComEvent 16 msg_OnComCustomizationResetToolBar
17364>>>>>>>>>        Send RegisterComEvent 17 msg_OnComCustomizationAddToolBar
17365>>>>>>>>>        Send RegisterComEvent 18 msg_OnComCustomizationDeleteToolBar
17366>>>>>>>>>        Send RegisterComEvent 19 msg_OnComControlNotify
17367>>>>>>>>>        Send RegisterComEvent 20 msg_OnComGetActiveDocumentID
17368>>>>>>>>>        Send RegisterComEvent 21 msg_OnComCustomizationResetAll
17369>>>>>>>>>        Send RegisterComEvent 22 msg_OnComMessageBarClosed
17370>>>>>>>>>        Send RegisterComEvent 303 msg_OnComOLEStartDrag
17371>>>>>>>>>        Send RegisterComEvent 304 msg_OnComOLECompleteDrag
17372>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
17373>>>>>>>>>    End_Procedure
17374>>>>>>>>>End_Class
17375>>>>>>>>>
17375>>>>>>>>>// CoClass
17375>>>>>>>>>// ProgID: Codejock.CommandBars.22.0.0
17375>>>>>>>>>// CLSID: {C0DE2200-1C4D-4DE8-BC4A-5240617D4930}
17375>>>>>>>>>// Xtreme CommandBars Control
17375>>>>>>>>>Class cCJCommandBars is a cComActiveXControl
17376>>>>>>>>>    Import_Class_Protocol cCJ_DCommandBars
17377>>>>>>>>>    Import_Class_Protocol cCJ_DCommandBarsEvents
17378>>>>>>>>>
17378>>>>>>>>>    Procedure Construct_Object
17380>>>>>>>>>        Forward Send Construct_Object
17382>>>>>>>>>        Set psProgID to "{C0DE2200-1C4D-4DE8-BC4A-5240617D4930}"
17383>>>>>>>>>        Set psEventId to "{C0DE2200-1D1A-4AFA-8DFF-8798A2181226}"
17384>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2022 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v22.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
17385>>>>>>>>>        Set peAutoCreate to acAutoCreate
17386>>>>>>>>>    End_Procedure
17387>>>>>>>>>End_Class
17388>>>>>>>>>
17388>>>>>>>>>// CLSID: {C0DE2200-D68C-4339-A284-4C7DB1FB2903}
17388>>>>>>>>>Class cCJIRibbonGroup is a Mixin
17389>>>>>>>>>
17389>>>>>>>>>    Function ComCaption Returns String
17391>>>>>>>>>        String retVal
17391>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BSTR to retVal
17392>>>>>>>>>        Function_Return retVal
17393>>>>>>>>>    End_Function
17394>>>>>>>>>
17394>>>>>>>>>    Procedure Set ComCaption String value
17396>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BSTR to value
17397>>>>>>>>>    End_Procedure
17398>>>>>>>>>
17398>>>>>>>>>    Function ComShowOptionButton Returns Boolean
17400>>>>>>>>>        Boolean retVal
17400>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
17401>>>>>>>>>        Function_Return retVal
17402>>>>>>>>>    End_Function
17403>>>>>>>>>
17403>>>>>>>>>    Procedure Set ComShowOptionButton Boolean value
17405>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
17406>>>>>>>>>    End_Procedure
17407>>>>>>>>>
17407>>>>>>>>>    Function ComId Returns Integer
17409>>>>>>>>>        Integer retVal
17409>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
17410>>>>>>>>>        Function_Return retVal
17411>>>>>>>>>    End_Function
17412>>>>>>>>>
17412>>>>>>>>>    Procedure Set ComId Integer value
17414>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
17415>>>>>>>>>    End_Procedure
17416>>>>>>>>>
17416>>>>>>>>>    Function ComIconId Returns Integer
17418>>>>>>>>>        Integer retVal
17418>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
17419>>>>>>>>>        Function_Return retVal
17420>>>>>>>>>    End_Function
17421>>>>>>>>>
17421>>>>>>>>>    Procedure Set ComIconId Integer value
17423>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
17424>>>>>>>>>    End_Procedure
17425>>>>>>>>>
17425>>>>>>>>>    Function ComVisible Returns Boolean
17427>>>>>>>>>        Boolean retVal
17427>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
17428>>>>>>>>>        Function_Return retVal
17429>>>>>>>>>    End_Function
17430>>>>>>>>>
17430>>>>>>>>>    Procedure Set ComVisible Boolean value
17432>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
17433>>>>>>>>>    End_Procedure
17434>>>>>>>>>
17434>>>>>>>>>    Function ComControlsGrouping Returns Boolean
17436>>>>>>>>>        Boolean retVal
17436>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
17437>>>>>>>>>        Function_Return retVal
17438>>>>>>>>>    End_Function
17439>>>>>>>>>
17439>>>>>>>>>    Procedure Set ComControlsGrouping Boolean value
17441>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
17442>>>>>>>>>    End_Procedure
17443>>>>>>>>>
17443>>>>>>>>>    Function ComControlsCentering Returns Boolean
17445>>>>>>>>>        Boolean retVal
17445>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
17446>>>>>>>>>        Function_Return retVal
17447>>>>>>>>>    End_Function
17448>>>>>>>>>
17448>>>>>>>>>    Procedure Set ComControlsCentering Boolean value
17450>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
17451>>>>>>>>>    End_Procedure
17452>>>>>>>>>
17452>>>>>>>>>    Function ComAllowReduce Returns Integer
17454>>>>>>>>>        Integer retVal
17454>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to retVal
17455>>>>>>>>>        Function_Return retVal
17456>>>>>>>>>    End_Function
17457>>>>>>>>>
17457>>>>>>>>>    Procedure Set ComAllowReduce Integer value
17459>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to value
17460>>>>>>>>>    End_Procedure
17461>>>>>>>>>
17461>>>>>>>>>    Function ComAutoArrangeEditCaption Returns Boolean
17463>>>>>>>>>        Boolean retVal
17463>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
17464>>>>>>>>>        Function_Return retVal
17465>>>>>>>>>    End_Function
17466>>>>>>>>>
17466>>>>>>>>>    Procedure Set ComAutoArrangeEditCaption Boolean value
17468>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
17469>>>>>>>>>    End_Procedure
17470>>>>>>>>>
17470>>>>>>>>>    Function ComRibbonBar Returns Variant
17472>>>>>>>>>        Handle hDispatchDriver
17472>>>>>>>>>        Variant retVal
17472>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17473>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
17474>>>>>>>>>        Function_Return retVal
17475>>>>>>>>>    End_Function
17476>>>>>>>>>
17476>>>>>>>>>    Function ComGroups Returns Variant
17478>>>>>>>>>        Handle hDispatchDriver
17478>>>>>>>>>        Variant retVal
17478>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17479>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_DISPATCH to retVal
17480>>>>>>>>>        Function_Return retVal
17481>>>>>>>>>    End_Function
17482>>>>>>>>>
17482>>>>>>>>>    // Gets the number of controls in the collection.
17482>>>>>>>>>    Function ComCount Returns Integer
17484>>>>>>>>>        Handle hDispatchDriver
17484>>>>>>>>>        Integer retVal
17484>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17485>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
17486>>>>>>>>>        Function_Return retVal
17487>>>>>>>>>    End_Function
17488>>>>>>>>>
17488>>>>>>>>>    // Gets an item from the collection by its index.
17488>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
17490>>>>>>>>>        Handle hDispatchDriver
17490>>>>>>>>>        Variant retVal
17490>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17491>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17492>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
17493>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
17494>>>>>>>>>        Function_Return retVal
17495>>>>>>>>>    End_Function
17496>>>>>>>>>
17496>>>>>>>>>    Function Com_NewEnum Returns Variant
17498>>>>>>>>>        Handle hDispatchDriver
17498>>>>>>>>>        Variant retVal
17498>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17499>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
17500>>>>>>>>>        Function_Return retVal
17501>>>>>>>>>    End_Function
17502>>>>>>>>>
17502>>>>>>>>>    // Adds a new command bar control to the collection.
17502>>>>>>>>>    Function ComAdd XTPControlType llType Integer llId String llCaption Variant llBefore Variant llTemporary Returns Variant
17504>>>>>>>>>        Handle hDispatchDriver
17504>>>>>>>>>        Variant retVal
17504>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17505>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
17506>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llType
17507>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17508>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
17509>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
17510>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llTemporary
17511>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
17512>>>>>>>>>        Function_Return retVal
17513>>>>>>>>>    End_Function
17514>>>>>>>>>
17514>>>>>>>>>    // Deletes all of the command bar controls from the collection
17514>>>>>>>>>    Procedure ComDeleteAll
17516>>>>>>>>>        Handle hDispatchDriver
17516>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17517>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
17518>>>>>>>>>    End_Procedure
17519>>>>>>>>>
17519>>>>>>>>>    Procedure ComDeleteAt Integer llIndex
17521>>>>>>>>>        Handle hDispatchDriver
17521>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17522>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17523>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
17524>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
17525>>>>>>>>>    End_Procedure
17526>>>>>>>>>
17526>>>>>>>>>    Function ComControlGroupPopup Returns Variant
17528>>>>>>>>>        Handle hDispatchDriver
17528>>>>>>>>>        Variant retVal
17528>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17529>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_DISPATCH to retVal
17530>>>>>>>>>        Function_Return retVal
17531>>>>>>>>>    End_Function
17532>>>>>>>>>
17532>>>>>>>>>    Function ComControlGroupOption Returns Variant
17534>>>>>>>>>        Handle hDispatchDriver
17534>>>>>>>>>        Variant retVal
17534>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17535>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_DISPATCH to retVal
17536>>>>>>>>>        Function_Return retVal
17537>>>>>>>>>    End_Function
17538>>>>>>>>>
17538>>>>>>>>>    Function ComIndex Returns Integer
17540>>>>>>>>>        Handle hDispatchDriver
17540>>>>>>>>>        Integer retVal
17540>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17541>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_I4 to retVal
17542>>>>>>>>>        Function_Return retVal
17543>>>>>>>>>    End_Function
17544>>>>>>>>>
17544>>>>>>>>>    Procedure ComAddControl Variant llControl Variant llBefore
17546>>>>>>>>>        Handle hDispatchDriver
17546>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17547>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
17548>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llControl
17549>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
17550>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 108 OLE_VT_VOID
17551>>>>>>>>>    End_Procedure
17552>>>>>>>>>
17552>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
17554>>>>>>>>>        Handle hDispatchDriver
17554>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17555>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
17556>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
17557>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
17558>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
17559>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
17560>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 110 OLE_VT_VOID
17561>>>>>>>>>    End_Procedure
17562>>>>>>>>>End_Class
17563>>>>>>>>>
17563>>>>>>>>>// CoClass
17563>>>>>>>>>// CLSID: {C0DE2200-73F4-4849-A08C-8A64228AA2E3}
17563>>>>>>>>>Class cCJRibbonGroup is a cComAutomationObject
17564>>>>>>>>>    Import_Class_Protocol cCJIRibbonGroup
17565>>>>>>>>>
17565>>>>>>>>>    Procedure Construct_Object
17567>>>>>>>>>        Forward Send Construct_Object
17569>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17570>>>>>>>>>    End_Procedure
17571>>>>>>>>>End_Class
17572>>>>>>>>>
17572>>>>>>>>>// CLSID: {C0DE2200-D3DB-49F4-AC22-14AA249772CB}
17572>>>>>>>>>Class cCJICustomizeOptions is a Mixin
17573>>>>>>>>>
17573>>>>>>>>>    Function ComShowKeyboardPage Returns Boolean
17575>>>>>>>>>        Boolean retVal
17575>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
17576>>>>>>>>>        Function_Return retVal
17577>>>>>>>>>    End_Function
17578>>>>>>>>>
17578>>>>>>>>>    Procedure Set ComShowKeyboardPage Boolean value
17580>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
17581>>>>>>>>>    End_Procedure
17582>>>>>>>>>
17582>>>>>>>>>    Function ComShowOptionsPage Returns Boolean
17584>>>>>>>>>        Boolean retVal
17584>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to retVal
17585>>>>>>>>>        Function_Return retVal
17586>>>>>>>>>    End_Function
17587>>>>>>>>>
17587>>>>>>>>>    Procedure Set ComShowOptionsPage Boolean value
17589>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to value
17590>>>>>>>>>    End_Procedure
17591>>>>>>>>>
17591>>>>>>>>>    Function ComShowRibbonQuickAccessPage Returns Boolean
17593>>>>>>>>>        Boolean retVal
17593>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
17594>>>>>>>>>        Function_Return retVal
17595>>>>>>>>>    End_Function
17596>>>>>>>>>
17596>>>>>>>>>    Procedure Set ComShowRibbonQuickAccessPage Boolean value
17598>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
17599>>>>>>>>>    End_Procedure
17600>>>>>>>>>
17600>>>>>>>>>    Function ComShowMenusPage Returns Boolean
17602>>>>>>>>>        Boolean retVal
17602>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
17603>>>>>>>>>        Function_Return retVal
17604>>>>>>>>>    End_Function
17605>>>>>>>>>
17605>>>>>>>>>    Procedure Set ComShowMenusPage Boolean value
17607>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
17608>>>>>>>>>    End_Procedure
17609>>>>>>>>>
17609>>>>>>>>>    Function ComShowToolbarsPage Returns Boolean
17611>>>>>>>>>        Boolean retVal
17611>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
17612>>>>>>>>>        Function_Return retVal
17613>>>>>>>>>    End_Function
17614>>>>>>>>>
17614>>>>>>>>>    Procedure Set ComShowToolbarsPage Boolean value
17616>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
17617>>>>>>>>>    End_Procedure
17618>>>>>>>>>
17618>>>>>>>>>    Function ComShowCommandsPage Returns Boolean
17620>>>>>>>>>        Boolean retVal
17620>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
17621>>>>>>>>>        Function_Return retVal
17622>>>>>>>>>    End_Function
17623>>>>>>>>>
17623>>>>>>>>>    Procedure Set ComShowCommandsPage Boolean value
17625>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
17626>>>>>>>>>    End_Procedure
17627>>>>>>>>>
17627>>>>>>>>>    Function ComAllowNewToolbars Returns Boolean
17629>>>>>>>>>        Boolean retVal
17629>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
17630>>>>>>>>>        Function_Return retVal
17631>>>>>>>>>    End_Function
17632>>>>>>>>>
17632>>>>>>>>>    Procedure Set ComAllowNewToolbars Boolean value
17634>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
17635>>>>>>>>>    End_Procedure
17636>>>>>>>>>
17636>>>>>>>>>    Function ComResizableSheet Returns Boolean
17638>>>>>>>>>        Boolean retVal
17638>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
17639>>>>>>>>>        Function_Return retVal
17640>>>>>>>>>    End_Function
17641>>>>>>>>>
17641>>>>>>>>>    Procedure Set ComResizableSheet Boolean value
17643>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
17644>>>>>>>>>    End_Procedure
17645>>>>>>>>>
17645>>>>>>>>>    Function ComShowRibbonCustomizePage Returns Boolean
17647>>>>>>>>>        Boolean retVal
17647>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
17648>>>>>>>>>        Function_Return retVal
17649>>>>>>>>>    End_Function
17650>>>>>>>>>
17650>>>>>>>>>    Procedure Set ComShowRibbonCustomizePage Boolean value
17652>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
17653>>>>>>>>>    End_Procedure
17654>>>>>>>>>
17654>>>>>>>>>    Function ComShowListNavigation Returns Boolean
17656>>>>>>>>>        Boolean retVal
17656>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
17657>>>>>>>>>        Function_Return retVal
17658>>>>>>>>>    End_Function
17659>>>>>>>>>
17659>>>>>>>>>    Procedure Set ComShowListNavigation Boolean value
17661>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
17662>>>>>>>>>    End_Procedure
17663>>>>>>>>>
17663>>>>>>>>>    Function ComCustomIcons Returns Variant
17665>>>>>>>>>        Handle hDispatchDriver
17665>>>>>>>>>        Variant retVal
17665>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17666>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_DISPATCH to retVal
17667>>>>>>>>>        Function_Return retVal
17668>>>>>>>>>    End_Function
17669>>>>>>>>>
17669>>>>>>>>>    Function ComContextMenu Returns Variant
17671>>>>>>>>>        Handle hDispatchDriver
17671>>>>>>>>>        Variant retVal
17671>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17672>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
17673>>>>>>>>>        Function_Return retVal
17674>>>>>>>>>    End_Function
17675>>>>>>>>>
17675>>>>>>>>>    Procedure ComAddPage Integer llnIndex OLE_HANDLE llhWnd String llCaption
17677>>>>>>>>>        Handle hDispatchDriver
17677>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17678>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
17679>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIndex
17680>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17681>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
17682>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
17683>>>>>>>>>    End_Procedure
17684>>>>>>>>>End_Class
17685>>>>>>>>>
17685>>>>>>>>>// CoClass
17685>>>>>>>>>// CLSID: {C0DE2200-FD32-4169-88A0-04275EAF79C5}
17685>>>>>>>>>Class cCJCustomizeOptions is a cComAutomationObject
17686>>>>>>>>>    Import_Class_Protocol cCJICustomizeOptions
17687>>>>>>>>>
17687>>>>>>>>>    Procedure Construct_Object
17689>>>>>>>>>        Forward Send Construct_Object
17691>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17692>>>>>>>>>    End_Procedure
17693>>>>>>>>>End_Class
17694>>>>>>>>>
17694>>>>>>>>>// CLSID: {C0DE2200-AA66-4C26-8B79-FF0DD9DF0E68}
17694>>>>>>>>>Class cCJIStateOptions is a Mixin
17695>>>>>>>>>
17695>>>>>>>>>    Function ComSerializeControls Returns Boolean
17697>>>>>>>>>        Boolean retVal
17697>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
17698>>>>>>>>>        Function_Return retVal
17699>>>>>>>>>    End_Function
17700>>>>>>>>>
17700>>>>>>>>>    Procedure Set ComSerializeControls Boolean value
17702>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
17703>>>>>>>>>    End_Procedure
17704>>>>>>>>>
17704>>>>>>>>>    Function ComSaveOnlyCustomized Returns Boolean
17706>>>>>>>>>        Boolean retVal
17706>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to retVal
17707>>>>>>>>>        Function_Return retVal
17708>>>>>>>>>    End_Function
17709>>>>>>>>>
17709>>>>>>>>>    Procedure Set ComSaveOnlyCustomized Boolean value
17711>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to value
17712>>>>>>>>>    End_Procedure
17713>>>>>>>>>
17713>>>>>>>>>    Function ComLoadSilent Returns Boolean
17715>>>>>>>>>        Boolean retVal
17715>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
17716>>>>>>>>>        Function_Return retVal
17717>>>>>>>>>    End_Function
17718>>>>>>>>>
17718>>>>>>>>>    Procedure Set ComLoadSilent Boolean value
17720>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
17721>>>>>>>>>    End_Procedure
17722>>>>>>>>>
17722>>>>>>>>>    Function ComSaveOriginalControls Returns Boolean
17724>>>>>>>>>        Boolean retVal
17724>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
17725>>>>>>>>>        Function_Return retVal
17726>>>>>>>>>    End_Function
17727>>>>>>>>>
17727>>>>>>>>>    Procedure Set ComSaveOriginalControls Boolean value
17729>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
17730>>>>>>>>>    End_Procedure
17731>>>>>>>>>
17731>>>>>>>>>    Function ComSerializeOptions Returns Boolean
17733>>>>>>>>>        Boolean retVal
17733>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
17734>>>>>>>>>        Function_Return retVal
17735>>>>>>>>>    End_Function
17736>>>>>>>>>
17736>>>>>>>>>    Procedure Set ComSerializeOptions Boolean value
17738>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
17739>>>>>>>>>    End_Procedure
17740>>>>>>>>>
17740>>>>>>>>>    Function ComSerializeImages Returns Boolean
17742>>>>>>>>>        Boolean retVal
17742>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
17743>>>>>>>>>        Function_Return retVal
17744>>>>>>>>>    End_Function
17745>>>>>>>>>
17745>>>>>>>>>    Procedure Set ComSerializeImages Boolean value
17747>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
17748>>>>>>>>>    End_Procedure
17749>>>>>>>>>
17749>>>>>>>>>    Function ComSerializeLayout Returns Boolean
17751>>>>>>>>>        Boolean retVal
17751>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
17752>>>>>>>>>        Function_Return retVal
17753>>>>>>>>>    End_Function
17754>>>>>>>>>
17754>>>>>>>>>    Procedure Set ComSerializeLayout Boolean value
17756>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
17757>>>>>>>>>    End_Procedure
17758>>>>>>>>>
17758>>>>>>>>>    Function ComSerializeDesignerControls Returns Boolean
17760>>>>>>>>>        Boolean retVal
17760>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
17761>>>>>>>>>        Function_Return retVal
17762>>>>>>>>>    End_Function
17763>>>>>>>>>
17763>>>>>>>>>    Procedure Set ComSerializeDesignerControls Boolean value
17765>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
17766>>>>>>>>>    End_Procedure
17767>>>>>>>>>
17767>>>>>>>>>    Function ComSerializeActions Returns Boolean
17769>>>>>>>>>        Boolean retVal
17769>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
17770>>>>>>>>>        Function_Return retVal
17771>>>>>>>>>    End_Function
17772>>>>>>>>>
17772>>>>>>>>>    Procedure Set ComSerializeActions Boolean value
17774>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
17775>>>>>>>>>    End_Procedure
17776>>>>>>>>>End_Class
17777>>>>>>>>>
17777>>>>>>>>>// CoClass
17777>>>>>>>>>// CLSID: {C0DE2200-A205-49F6-975D-F02D82C565D1}
17777>>>>>>>>>Class cCJStateOptions is a cComAutomationObject
17778>>>>>>>>>    Import_Class_Protocol cCJIStateOptions
17779>>>>>>>>>
17779>>>>>>>>>    Procedure Construct_Object
17781>>>>>>>>>        Forward Send Construct_Object
17783>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17784>>>>>>>>>    End_Procedure
17785>>>>>>>>>End_Class
17786>>>>>>>>>
17786>>>>>>>>>// CLSID: {C0DE2200-DFBD-4175-90D5-D84AB2790950}
17786>>>>>>>>>Class cCJICommandBarAction is a Mixin
17787>>>>>>>>>
17787>>>>>>>>>    Function ComCaption Returns String
17789>>>>>>>>>        String retVal
17789>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
17790>>>>>>>>>        Function_Return retVal
17791>>>>>>>>>    End_Function
17792>>>>>>>>>
17792>>>>>>>>>    Procedure Set ComCaption String value
17794>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
17795>>>>>>>>>    End_Procedure
17796>>>>>>>>>
17796>>>>>>>>>    Function ComDescriptionText Returns String
17798>>>>>>>>>        String retVal
17798>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
17799>>>>>>>>>        Function_Return retVal
17800>>>>>>>>>    End_Function
17801>>>>>>>>>
17801>>>>>>>>>    Procedure Set ComDescriptionText String value
17803>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
17804>>>>>>>>>    End_Procedure
17805>>>>>>>>>
17805>>>>>>>>>    Function ComId Returns Integer
17807>>>>>>>>>        Integer retVal
17807>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
17808>>>>>>>>>        Function_Return retVal
17809>>>>>>>>>    End_Function
17810>>>>>>>>>
17810>>>>>>>>>    Procedure Set ComId Integer value
17812>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
17813>>>>>>>>>    End_Procedure
17814>>>>>>>>>
17814>>>>>>>>>    Function ComShortcutText Returns String
17816>>>>>>>>>        String retVal
17816>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
17817>>>>>>>>>        Function_Return retVal
17818>>>>>>>>>    End_Function
17819>>>>>>>>>
17819>>>>>>>>>    Procedure Set ComShortcutText String value
17821>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
17822>>>>>>>>>    End_Procedure
17823>>>>>>>>>
17823>>>>>>>>>    Function ComTooltipText Returns String
17825>>>>>>>>>        String retVal
17825>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
17826>>>>>>>>>        Function_Return retVal
17827>>>>>>>>>    End_Function
17828>>>>>>>>>
17828>>>>>>>>>    Procedure Set ComTooltipText String value
17830>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
17831>>>>>>>>>    End_Procedure
17832>>>>>>>>>
17832>>>>>>>>>    Function ComVisible Returns Boolean
17834>>>>>>>>>        Boolean retVal
17834>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
17835>>>>>>>>>        Function_Return retVal
17836>>>>>>>>>    End_Function
17837>>>>>>>>>
17837>>>>>>>>>    Procedure Set ComVisible Boolean value
17839>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
17840>>>>>>>>>    End_Procedure
17841>>>>>>>>>
17841>>>>>>>>>    Function ComEnabled Returns Boolean
17843>>>>>>>>>        Boolean retVal
17843>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
17844>>>>>>>>>        Function_Return retVal
17845>>>>>>>>>    End_Function
17846>>>>>>>>>
17846>>>>>>>>>    Procedure Set ComEnabled Boolean value
17848>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
17849>>>>>>>>>    End_Procedure
17850>>>>>>>>>
17850>>>>>>>>>    Function ComChecked Returns Boolean
17852>>>>>>>>>        Boolean retVal
17852>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
17853>>>>>>>>>        Function_Return retVal
17854>>>>>>>>>    End_Function
17855>>>>>>>>>
17855>>>>>>>>>    Procedure Set ComChecked Boolean value
17857>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
17858>>>>>>>>>    End_Procedure
17859>>>>>>>>>
17859>>>>>>>>>    Function ComIconId Returns Integer
17861>>>>>>>>>        Integer retVal
17861>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
17862>>>>>>>>>        Function_Return retVal
17863>>>>>>>>>    End_Function
17864>>>>>>>>>
17864>>>>>>>>>    Procedure Set ComIconId Integer value
17866>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
17867>>>>>>>>>    End_Procedure
17868>>>>>>>>>
17868>>>>>>>>>    Function ComCategory Returns String
17870>>>>>>>>>        String retVal
17870>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
17871>>>>>>>>>        Function_Return retVal
17872>>>>>>>>>    End_Function
17873>>>>>>>>>
17873>>>>>>>>>    Procedure Set ComCategory String value
17875>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
17876>>>>>>>>>    End_Procedure
17877>>>>>>>>>
17877>>>>>>>>>    Function ComTag Returns Variant
17879>>>>>>>>>        Variant retVal
17879>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_VARIANT to retVal
17880>>>>>>>>>        Function_Return retVal
17881>>>>>>>>>    End_Function
17882>>>>>>>>>
17882>>>>>>>>>    Procedure Set ComTag Variant value
17884>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_VARIANT to value
17885>>>>>>>>>    End_Procedure
17886>>>>>>>>>
17886>>>>>>>>>    Function ComEditHint Returns String
17888>>>>>>>>>        String retVal
17888>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 55 OLE_VT_BSTR to retVal
17889>>>>>>>>>        Function_Return retVal
17890>>>>>>>>>    End_Function
17891>>>>>>>>>
17891>>>>>>>>>    Procedure Set ComEditHint String value
17893>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 55 OLE_VT_BSTR to value
17894>>>>>>>>>    End_Procedure
17895>>>>>>>>>
17895>>>>>>>>>    Function ComKeyboardTip Returns String
17897>>>>>>>>>        String retVal
17897>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 56 OLE_VT_BSTR to retVal
17898>>>>>>>>>        Function_Return retVal
17899>>>>>>>>>    End_Function
17900>>>>>>>>>
17900>>>>>>>>>    Procedure Set ComKeyboardTip String value
17902>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 56 OLE_VT_BSTR to value
17903>>>>>>>>>    End_Procedure
17904>>>>>>>>>
17904>>>>>>>>>    Function ComKey Returns String
17906>>>>>>>>>        String retVal
17906>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 57 OLE_VT_BSTR to retVal
17907>>>>>>>>>        Function_Return retVal
17908>>>>>>>>>    End_Function
17909>>>>>>>>>
17909>>>>>>>>>    Procedure Set ComKey String value
17911>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 57 OLE_VT_BSTR to value
17912>>>>>>>>>    End_Procedure
17913>>>>>>>>>
17913>>>>>>>>>    Function ComCustomShortcutText Returns String
17915>>>>>>>>>        String retVal
17915>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 58 OLE_VT_BSTR to retVal
17916>>>>>>>>>        Function_Return retVal
17917>>>>>>>>>    End_Function
17918>>>>>>>>>
17918>>>>>>>>>    Procedure Set ComCustomShortcutText String value
17920>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 58 OLE_VT_BSTR to value
17921>>>>>>>>>    End_Procedure
17922>>>>>>>>>End_Class
17923>>>>>>>>>
17923>>>>>>>>>// CoClass
17923>>>>>>>>>// CLSID: {C0DE2200-61DB-4DC7-86B4-61B534FE96BA}
17923>>>>>>>>>Class cCJCommandBarAction is a cComAutomationObject
17924>>>>>>>>>    Import_Class_Protocol cCJICommandBarAction
17925>>>>>>>>>
17925>>>>>>>>>    Procedure Construct_Object
17927>>>>>>>>>        Forward Send Construct_Object
17929>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17930>>>>>>>>>    End_Procedure
17931>>>>>>>>>End_Class
17932>>>>>>>>>
17932>>>>>>>>>// CLSID: {C0DE2200-092D-462D-9934-277EAB35A27D}
17932>>>>>>>>>Class cCJICommandBarActions is a Mixin
17933>>>>>>>>>
17933>>>>>>>>>    // Gets the number of controls in the collection.
17933>>>>>>>>>    Function ComCount Returns Integer
17935>>>>>>>>>        Handle hDispatchDriver
17935>>>>>>>>>        Integer retVal
17935>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17936>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
17937>>>>>>>>>        Function_Return retVal
17938>>>>>>>>>    End_Function
17939>>>>>>>>>
17939>>>>>>>>>    // Gets an item from the collection by its index.
17939>>>>>>>>>    Function ComAction Integer llId Returns Variant
17941>>>>>>>>>        Handle hDispatchDriver
17941>>>>>>>>>        Variant retVal
17941>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17942>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17943>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17944>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
17945>>>>>>>>>        Function_Return retVal
17946>>>>>>>>>    End_Function
17947>>>>>>>>>
17947>>>>>>>>>    Function Com_NewEnum Returns Variant
17949>>>>>>>>>        Handle hDispatchDriver
17949>>>>>>>>>        Variant retVal
17949>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17950>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
17951>>>>>>>>>        Function_Return retVal
17952>>>>>>>>>    End_Function
17953>>>>>>>>>
17953>>>>>>>>>    // Adds a new command bar control to the collection.
17953>>>>>>>>>    Function ComAdd Integer llId String llCaption String llTooltipText String llDescriptionText String llCategory Returns Variant
17955>>>>>>>>>        Handle hDispatchDriver
17955>>>>>>>>>        Variant retVal
17955>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17956>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
17957>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17958>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
17959>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTooltipText
17960>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llDescriptionText
17961>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCategory
17962>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
17963>>>>>>>>>        Function_Return retVal
17964>>>>>>>>>    End_Function
17965>>>>>>>>>
17965>>>>>>>>>    Procedure ComDeleteAll
17967>>>>>>>>>        Handle hDispatchDriver
17967>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17968>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
17969>>>>>>>>>    End_Procedure
17970>>>>>>>>>
17970>>>>>>>>>    Procedure ComDelete Integer llId
17972>>>>>>>>>        Handle hDispatchDriver
17972>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17973>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17974>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17975>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
17976>>>>>>>>>    End_Procedure
17977>>>>>>>>>End_Class
17978>>>>>>>>>
17978>>>>>>>>>// CoClass
17978>>>>>>>>>// CLSID: {C0DE2200-3543-4D3E-88F9-4F8822200142}
17978>>>>>>>>>Class cCJCommandBarActions is a cComAutomationObject
17979>>>>>>>>>    Import_Class_Protocol cCJICommandBarActions
17980>>>>>>>>>
17980>>>>>>>>>    Procedure Construct_Object
17982>>>>>>>>>        Forward Send Construct_Object
17984>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17985>>>>>>>>>    End_Procedure
17986>>>>>>>>>End_Class
17987>>>>>>>>>
17987>>>>>>>>>// CLSID: {C0DE2200-9E07-4079-924A-4CB1C11FC700}
17987>>>>>>>>>Class cCJICommandBarControl is a Mixin
17988>>>>>>>>>
17988>>>>>>>>>    Function ComChecked Returns Boolean
17990>>>>>>>>>        Boolean retVal
17990>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
17991>>>>>>>>>        Function_Return retVal
17992>>>>>>>>>    End_Function
17993>>>>>>>>>
17993>>>>>>>>>    Procedure Set ComChecked Boolean value
17995>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
17996>>>>>>>>>    End_Procedure
17997>>>>>>>>>
17997>>>>>>>>>    Function ComBeginGroup Returns Boolean
17999>>>>>>>>>        Boolean retVal
17999>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
18000>>>>>>>>>        Function_Return retVal
18001>>>>>>>>>    End_Function
18002>>>>>>>>>
18002>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
18004>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
18005>>>>>>>>>    End_Procedure
18006>>>>>>>>>
18006>>>>>>>>>    Function ComCaption Returns String
18008>>>>>>>>>        String retVal
18008>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
18009>>>>>>>>>        Function_Return retVal
18010>>>>>>>>>    End_Function
18011>>>>>>>>>
18011>>>>>>>>>    Procedure Set ComCaption String value
18013>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
18014>>>>>>>>>    End_Procedure
18015>>>>>>>>>
18015>>>>>>>>>    Function ComDescriptionText Returns String
18017>>>>>>>>>        String retVal
18017>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
18018>>>>>>>>>        Function_Return retVal
18019>>>>>>>>>    End_Function
18020>>>>>>>>>
18020>>>>>>>>>    Procedure Set ComDescriptionText String value
18022>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
18023>>>>>>>>>    End_Procedure
18024>>>>>>>>>
18024>>>>>>>>>    Function ComId Returns Integer
18026>>>>>>>>>        Integer retVal
18026>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
18027>>>>>>>>>        Function_Return retVal
18028>>>>>>>>>    End_Function
18029>>>>>>>>>
18029>>>>>>>>>    Procedure Set ComId Integer value
18031>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
18032>>>>>>>>>    End_Procedure
18033>>>>>>>>>
18033>>>>>>>>>    Function ComParameter Returns String
18035>>>>>>>>>        String retVal
18035>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
18036>>>>>>>>>        Function_Return retVal
18037>>>>>>>>>    End_Function
18038>>>>>>>>>
18038>>>>>>>>>    Procedure Set ComParameter String value
18040>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
18041>>>>>>>>>    End_Procedure
18042>>>>>>>>>
18042>>>>>>>>>    Function ComShortcutText Returns String
18044>>>>>>>>>        String retVal
18044>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
18045>>>>>>>>>        Function_Return retVal
18046>>>>>>>>>    End_Function
18047>>>>>>>>>
18047>>>>>>>>>    Procedure Set ComShortcutText String value
18049>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
18050>>>>>>>>>    End_Procedure
18051>>>>>>>>>
18051>>>>>>>>>    Function ComCustomShortcutText Returns String
18053>>>>>>>>>        String retVal
18053>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
18054>>>>>>>>>        Function_Return retVal
18055>>>>>>>>>    End_Function
18056>>>>>>>>>
18056>>>>>>>>>    Procedure Set ComCustomShortcutText String value
18058>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
18059>>>>>>>>>    End_Procedure
18060>>>>>>>>>
18060>>>>>>>>>    Function ComTooltipText Returns String
18062>>>>>>>>>        String retVal
18062>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
18063>>>>>>>>>        Function_Return retVal
18064>>>>>>>>>    End_Function
18065>>>>>>>>>
18065>>>>>>>>>    Procedure Set ComTooltipText String value
18067>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
18068>>>>>>>>>    End_Procedure
18069>>>>>>>>>
18069>>>>>>>>>    Function ComVisible Returns Boolean
18071>>>>>>>>>        Boolean retVal
18071>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
18072>>>>>>>>>        Function_Return retVal
18073>>>>>>>>>    End_Function
18074>>>>>>>>>
18074>>>>>>>>>    Procedure Set ComVisible Boolean value
18076>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
18077>>>>>>>>>    End_Procedure
18078>>>>>>>>>
18078>>>>>>>>>    Function ComEnabled Returns Boolean
18080>>>>>>>>>        Boolean retVal
18080>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
18081>>>>>>>>>        Function_Return retVal
18082>>>>>>>>>    End_Function
18083>>>>>>>>>
18083>>>>>>>>>    Procedure Set ComEnabled Boolean value
18085>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
18086>>>>>>>>>    End_Procedure
18087>>>>>>>>>
18087>>>>>>>>>    Function ComIconId Returns Integer
18089>>>>>>>>>        Integer retVal
18089>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
18090>>>>>>>>>        Function_Return retVal
18091>>>>>>>>>    End_Function
18092>>>>>>>>>
18092>>>>>>>>>    Procedure Set ComIconId Integer value
18094>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
18095>>>>>>>>>    End_Procedure
18096>>>>>>>>>
18096>>>>>>>>>    Function ComDefaultItem Returns Boolean
18098>>>>>>>>>        Boolean retVal
18098>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
18099>>>>>>>>>        Function_Return retVal
18100>>>>>>>>>    End_Function
18101>>>>>>>>>
18101>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
18103>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
18104>>>>>>>>>    End_Procedure
18105>>>>>>>>>
18105>>>>>>>>>    Function ComFlags Returns XTPControlFlags
18107>>>>>>>>>        XTPControlFlags retVal
18107>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
18108>>>>>>>>>        Function_Return retVal
18109>>>>>>>>>    End_Function
18110>>>>>>>>>
18110>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
18112>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
18113>>>>>>>>>    End_Procedure
18114>>>>>>>>>
18114>>>>>>>>>    Function ComCategory Returns String
18116>>>>>>>>>        String retVal
18116>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
18117>>>>>>>>>        Function_Return retVal
18118>>>>>>>>>    End_Function
18119>>>>>>>>>
18119>>>>>>>>>    Procedure Set ComCategory String value
18121>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
18122>>>>>>>>>    End_Procedure
18123>>>>>>>>>
18123>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
18125>>>>>>>>>        XTPControlHideFlags retVal
18125>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
18126>>>>>>>>>        Function_Return retVal
18127>>>>>>>>>    End_Function
18128>>>>>>>>>
18128>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
18130>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
18131>>>>>>>>>    End_Procedure
18132>>>>>>>>>
18132>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
18134>>>>>>>>>        Boolean retVal
18134>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
18135>>>>>>>>>        Function_Return retVal
18136>>>>>>>>>    End_Function
18137>>>>>>>>>
18137>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
18139>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
18140>>>>>>>>>    End_Procedure
18141>>>>>>>>>
18141>>>>>>>>>    Function ComAction Returns Variant
18143>>>>>>>>>        Variant retVal
18143>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
18144>>>>>>>>>        Function_Return retVal
18145>>>>>>>>>    End_Function
18146>>>>>>>>>
18146>>>>>>>>>    Procedure Set ComAction Variant value
18148>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
18149>>>>>>>>>    End_Procedure
18150>>>>>>>>>
18150>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
18152>>>>>>>>>        Integer retVal
18152>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
18153>>>>>>>>>        Function_Return retVal
18154>>>>>>>>>    End_Function
18155>>>>>>>>>
18155>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
18157>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
18158>>>>>>>>>    End_Procedure
18159>>>>>>>>>
18159>>>>>>>>>    Function ComWidth Returns Integer
18161>>>>>>>>>        Integer retVal
18161>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
18162>>>>>>>>>        Function_Return retVal
18163>>>>>>>>>    End_Function
18164>>>>>>>>>
18164>>>>>>>>>    Procedure Set ComWidth Integer value
18166>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
18167>>>>>>>>>    End_Procedure
18168>>>>>>>>>
18168>>>>>>>>>    Function ComHeight Returns Integer
18170>>>>>>>>>        Integer retVal
18170>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
18171>>>>>>>>>        Function_Return retVal
18172>>>>>>>>>    End_Function
18173>>>>>>>>>
18173>>>>>>>>>    Procedure Set ComHeight Integer value
18175>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
18176>>>>>>>>>    End_Procedure
18177>>>>>>>>>
18177>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
18179>>>>>>>>>        XTPButtonStyle retVal
18179>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
18180>>>>>>>>>        Function_Return retVal
18181>>>>>>>>>    End_Function
18182>>>>>>>>>
18182>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
18184>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
18185>>>>>>>>>    End_Procedure
18186>>>>>>>>>
18186>>>>>>>>>    Function ComKeyboardTip Returns String
18188>>>>>>>>>        String retVal
18188>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
18189>>>>>>>>>        Function_Return retVal
18190>>>>>>>>>    End_Function
18191>>>>>>>>>
18191>>>>>>>>>    Procedure Set ComKeyboardTip String value
18193>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
18194>>>>>>>>>    End_Procedure
18195>>>>>>>>>
18195>>>>>>>>>    Function ComControls Returns Variant
18197>>>>>>>>>        Handle hDispatchDriver
18197>>>>>>>>>        Variant retVal
18197>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18198>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
18199>>>>>>>>>        Function_Return retVal
18200>>>>>>>>>    End_Function
18201>>>>>>>>>
18201>>>>>>>>>    Function ComParent Returns Variant
18203>>>>>>>>>        Handle hDispatchDriver
18203>>>>>>>>>        Variant retVal
18203>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18204>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
18205>>>>>>>>>        Function_Return retVal
18206>>>>>>>>>    End_Function
18207>>>>>>>>>
18207>>>>>>>>>    Function ComIndex Returns Integer
18209>>>>>>>>>        Handle hDispatchDriver
18209>>>>>>>>>        Integer retVal
18209>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18210>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
18211>>>>>>>>>        Function_Return retVal
18212>>>>>>>>>    End_Function
18213>>>>>>>>>
18213>>>>>>>>>    Function ComType Returns XTPControlType
18215>>>>>>>>>        Handle hDispatchDriver
18215>>>>>>>>>        XTPControlType retVal
18215>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18216>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
18217>>>>>>>>>        Function_Return retVal
18218>>>>>>>>>    End_Function
18219>>>>>>>>>
18219>>>>>>>>>    Procedure ComDelete
18221>>>>>>>>>        Handle hDispatchDriver
18221>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18222>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
18223>>>>>>>>>    End_Procedure
18224>>>>>>>>>
18224>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
18226>>>>>>>>>        Handle hDispatchDriver
18226>>>>>>>>>        Variant retVal
18226>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18227>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18228>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
18229>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
18230>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
18231>>>>>>>>>        Function_Return retVal
18232>>>>>>>>>    End_Function
18233>>>>>>>>>
18233>>>>>>>>>    Procedure ComSetFocus
18235>>>>>>>>>        Handle hDispatchDriver
18235>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18236>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
18237>>>>>>>>>    End_Procedure
18238>>>>>>>>>
18238>>>>>>>>>    Procedure ComExecute
18240>>>>>>>>>        Handle hDispatchDriver
18240>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18241>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
18242>>>>>>>>>    End_Procedure
18243>>>>>>>>>
18243>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
18245>>>>>>>>>        Handle hDispatchDriver
18245>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18246>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
18247>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
18248>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
18249>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
18250>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
18251>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
18252>>>>>>>>>    End_Procedure
18253>>>>>>>>>
18253>>>>>>>>>    Function ComRibbonGroup Returns Variant
18255>>>>>>>>>        Handle hDispatchDriver
18255>>>>>>>>>        Variant retVal
18255>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18256>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
18257>>>>>>>>>        Function_Return retVal
18258>>>>>>>>>    End_Function
18259>>>>>>>>>
18259>>>>>>>>>    Procedure ComReset
18261>>>>>>>>>        Handle hDispatchDriver
18261>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18262>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
18263>>>>>>>>>    End_Procedure
18264>>>>>>>>>
18264>>>>>>>>>    Function ComTop Returns Integer
18266>>>>>>>>>        Handle hDispatchDriver
18266>>>>>>>>>        Integer retVal
18266>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18267>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
18268>>>>>>>>>        Function_Return retVal
18269>>>>>>>>>    End_Function
18270>>>>>>>>>
18270>>>>>>>>>    Function ComLeft Returns Integer
18272>>>>>>>>>        Handle hDispatchDriver
18272>>>>>>>>>        Integer retVal
18272>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18273>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
18274>>>>>>>>>        Function_Return retVal
18275>>>>>>>>>    End_Function
18276>>>>>>>>>
18276>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
18278>>>>>>>>>        Handle hDispatchDriver
18278>>>>>>>>>        Variant retVal
18278>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18279>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
18280>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
18281>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
18282>>>>>>>>>        Function_Return retVal
18283>>>>>>>>>    End_Function
18284>>>>>>>>>
18284>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
18286>>>>>>>>>        Handle hDispatchDriver
18286>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18287>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18288>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
18289>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
18290>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
18291>>>>>>>>>    End_Procedure
18292>>>>>>>>>
18292>>>>>>>>>    Function ComCommandBar Returns Variant
18294>>>>>>>>>        Handle hDispatchDriver
18294>>>>>>>>>        Variant retVal
18294>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18295>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 50 OLE_VT_DISPATCH to retVal
18296>>>>>>>>>        Function_Return retVal
18297>>>>>>>>>    End_Function
18298>>>>>>>>>End_Class
18299>>>>>>>>>
18299>>>>>>>>>// CoClass
18299>>>>>>>>>// CLSID: {C0DE2200-C60A-4893-B9E5-CD2EABBCBFF7}
18299>>>>>>>>>Class cCJCommandBarControl is a cComAutomationObject
18300>>>>>>>>>    Import_Class_Protocol cCJICommandBarControl
18301>>>>>>>>>
18301>>>>>>>>>    Procedure Construct_Object
18303>>>>>>>>>        Forward Send Construct_Object
18305>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
18306>>>>>>>>>    End_Procedure
18307>>>>>>>>>End_Class
18308>>>>>>>>>
18308>>>>>>>>>// CLSID: {C0DE2200-1E0F-446D-B92B-BEDBEF77302F}
18308>>>>>>>>>Class cCJICommandBarButton is a Mixin
18309>>>>>>>>>
18309>>>>>>>>>    Function ComChecked Returns Boolean
18311>>>>>>>>>        Boolean retVal
18311>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
18312>>>>>>>>>        Function_Return retVal
18313>>>>>>>>>    End_Function
18314>>>>>>>>>
18314>>>>>>>>>    Procedure Set ComChecked Boolean value
18316>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
18317>>>>>>>>>    End_Procedure
18318>>>>>>>>>
18318>>>>>>>>>    Function ComBeginGroup Returns Boolean
18320>>>>>>>>>        Boolean retVal
18320>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
18321>>>>>>>>>        Function_Return retVal
18322>>>>>>>>>    End_Function
18323>>>>>>>>>
18323>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
18325>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
18326>>>>>>>>>    End_Procedure
18327>>>>>>>>>
18327>>>>>>>>>    Function ComCaption Returns String
18329>>>>>>>>>        String retVal
18329>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
18330>>>>>>>>>        Function_Return retVal
18331>>>>>>>>>    End_Function
18332>>>>>>>>>
18332>>>>>>>>>    Procedure Set ComCaption String value
18334>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
18335>>>>>>>>>    End_Procedure
18336>>>>>>>>>
18336>>>>>>>>>    Function ComDescriptionText Returns String
18338>>>>>>>>>        String retVal
18338>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
18339>>>>>>>>>        Function_Return retVal
18340>>>>>>>>>    End_Function
18341>>>>>>>>>
18341>>>>>>>>>    Procedure Set ComDescriptionText String value
18343>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
18344>>>>>>>>>    End_Procedure
18345>>>>>>>>>
18345>>>>>>>>>    Function ComId Returns Integer
18347>>>>>>>>>        Integer retVal
18347>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
18348>>>>>>>>>        Function_Return retVal
18349>>>>>>>>>    End_Function
18350>>>>>>>>>
18350>>>>>>>>>    Procedure Set ComId Integer value
18352>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
18353>>>>>>>>>    End_Procedure
18354>>>>>>>>>
18354>>>>>>>>>    Function ComParameter Returns String
18356>>>>>>>>>        String retVal
18356>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
18357>>>>>>>>>        Function_Return retVal
18358>>>>>>>>>    End_Function
18359>>>>>>>>>
18359>>>>>>>>>    Procedure Set ComParameter String value
18361>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
18362>>>>>>>>>    End_Procedure
18363>>>>>>>>>
18363>>>>>>>>>    Function ComShortcutText Returns String
18365>>>>>>>>>        String retVal
18365>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
18366>>>>>>>>>        Function_Return retVal
18367>>>>>>>>>    End_Function
18368>>>>>>>>>
18368>>>>>>>>>    Procedure Set ComShortcutText String value
18370>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
18371>>>>>>>>>    End_Procedure
18372>>>>>>>>>
18372>>>>>>>>>    Function ComCustomShortcutText Returns String
18374>>>>>>>>>        String retVal
18374>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
18375>>>>>>>>>        Function_Return retVal
18376>>>>>>>>>    End_Function
18377>>>>>>>>>
18377>>>>>>>>>    Procedure Set ComCustomShortcutText String value
18379>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
18380>>>>>>>>>    End_Procedure
18381>>>>>>>>>
18381>>>>>>>>>    Function ComTooltipText Returns String
18383>>>>>>>>>        String retVal
18383>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
18384>>>>>>>>>        Function_Return retVal
18385>>>>>>>>>    End_Function
18386>>>>>>>>>
18386>>>>>>>>>    Procedure Set ComTooltipText String value
18388>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
18389>>>>>>>>>    End_Procedure
18390>>>>>>>>>
18390>>>>>>>>>    Function ComVisible Returns Boolean
18392>>>>>>>>>        Boolean retVal
18392>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
18393>>>>>>>>>        Function_Return retVal
18394>>>>>>>>>    End_Function
18395>>>>>>>>>
18395>>>>>>>>>    Procedure Set ComVisible Boolean value
18397>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
18398>>>>>>>>>    End_Procedure
18399>>>>>>>>>
18399>>>>>>>>>    Function ComEnabled Returns Boolean
18401>>>>>>>>>        Boolean retVal
18401>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
18402>>>>>>>>>        Function_Return retVal
18403>>>>>>>>>    End_Function
18404>>>>>>>>>
18404>>>>>>>>>    Procedure Set ComEnabled Boolean value
18406>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
18407>>>>>>>>>    End_Procedure
18408>>>>>>>>>
18408>>>>>>>>>    Function ComIconId Returns Integer
18410>>>>>>>>>        Integer retVal
18410>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
18411>>>>>>>>>        Function_Return retVal
18412>>>>>>>>>    End_Function
18413>>>>>>>>>
18413>>>>>>>>>    Procedure Set ComIconId Integer value
18415>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
18416>>>>>>>>>    End_Procedure
18417>>>>>>>>>
18417>>>>>>>>>    Function ComDefaultItem Returns Boolean
18419>>>>>>>>>        Boolean retVal
18419>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
18420>>>>>>>>>        Function_Return retVal
18421>>>>>>>>>    End_Function
18422>>>>>>>>>
18422>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
18424>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
18425>>>>>>>>>    End_Procedure
18426>>>>>>>>>
18426>>>>>>>>>    Function ComFlags Returns XTPControlFlags
18428>>>>>>>>>        XTPControlFlags retVal
18428>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
18429>>>>>>>>>        Function_Return retVal
18430>>>>>>>>>    End_Function
18431>>>>>>>>>
18431>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
18433>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
18434>>>>>>>>>    End_Procedure
18435>>>>>>>>>
18435>>>>>>>>>    Function ComCategory Returns String
18437>>>>>>>>>        String retVal
18437>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
18438>>>>>>>>>        Function_Return retVal
18439>>>>>>>>>    End_Function
18440>>>>>>>>>
18440>>>>>>>>>    Procedure Set ComCategory String value
18442>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
18443>>>>>>>>>    End_Procedure
18444>>>>>>>>>
18444>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
18446>>>>>>>>>        XTPControlHideFlags retVal
18446>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
18447>>>>>>>>>        Function_Return retVal
18448>>>>>>>>>    End_Function
18449>>>>>>>>>
18449>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
18451>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
18452>>>>>>>>>    End_Procedure
18453>>>>>>>>>
18453>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
18455>>>>>>>>>        Boolean retVal
18455>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
18456>>>>>>>>>        Function_Return retVal
18457>>>>>>>>>    End_Function
18458>>>>>>>>>
18458>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
18460>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
18461>>>>>>>>>    End_Procedure
18462>>>>>>>>>
18462>>>>>>>>>    Function ComAction Returns Variant
18464>>>>>>>>>        Variant retVal
18464>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
18465>>>>>>>>>        Function_Return retVal
18466>>>>>>>>>    End_Function
18467>>>>>>>>>
18467>>>>>>>>>    Procedure Set ComAction Variant value
18469>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
18470>>>>>>>>>    End_Procedure
18471>>>>>>>>>
18471>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
18473>>>>>>>>>        Integer retVal
18473>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
18474>>>>>>>>>        Function_Return retVal
18475>>>>>>>>>    End_Function
18476>>>>>>>>>
18476>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
18478>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
18479>>>>>>>>>    End_Procedure
18480>>>>>>>>>
18480>>>>>>>>>    Function ComWidth Returns Integer
18482>>>>>>>>>        Integer retVal
18482>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
18483>>>>>>>>>        Function_Return retVal
18484>>>>>>>>>    End_Function
18485>>>>>>>>>
18485>>>>>>>>>    Procedure Set ComWidth Integer value
18487>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
18488>>>>>>>>>    End_Procedure
18489>>>>>>>>>
18489>>>>>>>>>    Function ComHeight Returns Integer
18491>>>>>>>>>        Integer retVal
18491>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
18492>>>>>>>>>        Function_Return retVal
18493>>>>>>>>>    End_Function
18494>>>>>>>>>
18494>>>>>>>>>    Procedure Set ComHeight Integer value
18496>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
18497>>>>>>>>>    End_Procedure
18498>>>>>>>>>
18498>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
18500>>>>>>>>>        XTPButtonStyle retVal
18500>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
18501>>>>>>>>>        Function_Return retVal
18502>>>>>>>>>    End_Function
18503>>>>>>>>>
18503>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
18505>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
18506>>>>>>>>>    End_Procedure
18507>>>>>>>>>
18507>>>>>>>>>    Function ComKeyboardTip Returns String
18509>>>>>>>>>        String retVal
18509>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
18510>>>>>>>>>        Function_Return retVal
18511>>>>>>>>>    End_Function
18512>>>>>>>>>
18512>>>>>>>>>    Procedure Set ComKeyboardTip String value
18514>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
18515>>>>>>>>>    End_Procedure
18516>>>>>>>>>
18516>>>>>>>>>    Function ComStyleEx Returns XTPButtonStyle
18518>>>>>>>>>        XTPButtonStyle retVal
18518>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 220 OLE_VT_I4 to retVal
18519>>>>>>>>>        Function_Return retVal
18520>>>>>>>>>    End_Function
18521>>>>>>>>>
18521>>>>>>>>>    Procedure Set ComStyleEx XTPButtonStyle value
18523>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 220 OLE_VT_I4 to value
18524>>>>>>>>>    End_Procedure
18525>>>>>>>>>
18525>>>>>>>>>    Function ComControls Returns Variant
18527>>>>>>>>>        Handle hDispatchDriver
18527>>>>>>>>>        Variant retVal
18527>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18528>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
18529>>>>>>>>>        Function_Return retVal
18530>>>>>>>>>    End_Function
18531>>>>>>>>>
18531>>>>>>>>>    Function ComParent Returns Variant
18533>>>>>>>>>        Handle hDispatchDriver
18533>>>>>>>>>        Variant retVal
18533>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18534>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
18535>>>>>>>>>        Function_Return retVal
18536>>>>>>>>>    End_Function
18537>>>>>>>>>
18537>>>>>>>>>    Function ComIndex Returns Integer
18539>>>>>>>>>        Handle hDispatchDriver
18539>>>>>>>>>        Integer retVal
18539>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18540>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
18541>>>>>>>>>        Function_Return retVal
18542>>>>>>>>>    End_Function
18543>>>>>>>>>
18543>>>>>>>>>    Function ComType Returns XTPControlType
18545>>>>>>>>>        Handle hDispatchDriver
18545>>>>>>>>>        XTPControlType retVal
18545>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18546>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
18547>>>>>>>>>        Function_Return retVal
18548>>>>>>>>>    End_Function
18549>>>>>>>>>
18549>>>>>>>>>    Procedure ComDelete
18551>>>>>>>>>        Handle hDispatchDriver
18551>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18552>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
18553>>>>>>>>>    End_Procedure
18554>>>>>>>>>
18554>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
18556>>>>>>>>>        Handle hDispatchDriver
18556>>>>>>>>>        Variant retVal
18556>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18557>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18558>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
18559>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
18560>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
18561>>>>>>>>>        Function_Return retVal
18562>>>>>>>>>    End_Function
18563>>>>>>>>>
18563>>>>>>>>>    Procedure ComSetFocus
18565>>>>>>>>>        Handle hDispatchDriver
18565>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18566>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
18567>>>>>>>>>    End_Procedure
18568>>>>>>>>>
18568>>>>>>>>>    Procedure ComExecute
18570>>>>>>>>>        Handle hDispatchDriver
18570>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18571>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
18572>>>>>>>>>    End_Procedure
18573>>>>>>>>>
18573>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
18575>>>>>>>>>        Handle hDispatchDriver
18575>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18576>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
18577>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
18578>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
18579>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
18580>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
18581>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
18582>>>>>>>>>    End_Procedure
18583>>>>>>>>>
18583>>>>>>>>>    Function ComRibbonGroup Returns Variant
18585>>>>>>>>>        Handle hDispatchDriver
18585>>>>>>>>>        Variant retVal
18585>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18586>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
18587>>>>>>>>>        Function_Return retVal
18588>>>>>>>>>    End_Function
18589>>>>>>>>>
18589>>>>>>>>>    Procedure ComReset
18591>>>>>>>>>        Handle hDispatchDriver
18591>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18592>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
18593>>>>>>>>>    End_Procedure
18594>>>>>>>>>
18594>>>>>>>>>    Function ComTop Returns Integer
18596>>>>>>>>>        Handle hDispatchDriver
18596>>>>>>>>>        Integer retVal
18596>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18597>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
18598>>>>>>>>>        Function_Return retVal
18599>>>>>>>>>    End_Function
18600>>>>>>>>>
18600>>>>>>>>>    Function ComLeft Returns Integer
18602>>>>>>>>>        Handle hDispatchDriver
18602>>>>>>>>>        Integer retVal
18602>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18603>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
18604>>>>>>>>>        Function_Return retVal
18605>>>>>>>>>    End_Function
18606>>>>>>>>>
18606>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
18608>>>>>>>>>        Handle hDispatchDriver
18608>>>>>>>>>        Variant retVal
18608>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18609>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
18610>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
18611>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
18612>>>>>>>>>        Function_Return retVal
18613>>>>>>>>>    End_Function
18614>>>>>>>>>
18614>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
18616>>>>>>>>>        Handle hDispatchDriver
18616>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18617>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18618>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
18619>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
18620>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
18621>>>>>>>>>    End_Procedure
18622>>>>>>>>>End_Class
18623>>>>>>>>>
18623>>>>>>>>>// CoClass
18623>>>>>>>>>// CLSID: {C0DE2200-AACD-4E77-8B1E-42B463760513}
18623>>>>>>>>>Class cCJCommandBarButton is a cComAutomationObject
18624>>>>>>>>>    Import_Class_Protocol cCJICommandBarButton
18625>>>>>>>>>
18625>>>>>>>>>    Procedure Construct_Object
18627>>>>>>>>>        Forward Send Construct_Object
18629>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
18630>>>>>>>>>    End_Procedure
18631>>>>>>>>>End_Class
18632>>>>>>>>>
18632>>>>>>>>>// CLSID: {C0DE2200-D452-4856-BAA4-17E86BD08CBA}
18632>>>>>>>>>Class cCJICommandBarPopup is a Mixin
18633>>>>>>>>>
18633>>>>>>>>>    Function ComChecked Returns Boolean
18635>>>>>>>>>        Boolean retVal
18635>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
18636>>>>>>>>>        Function_Return retVal
18637>>>>>>>>>    End_Function
18638>>>>>>>>>
18638>>>>>>>>>    Procedure Set ComChecked Boolean value
18640>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
18641>>>>>>>>>    End_Procedure
18642>>>>>>>>>
18642>>>>>>>>>    Function ComBeginGroup Returns Boolean
18644>>>>>>>>>        Boolean retVal
18644>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
18645>>>>>>>>>        Function_Return retVal
18646>>>>>>>>>    End_Function
18647>>>>>>>>>
18647>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
18649>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
18650>>>>>>>>>    End_Procedure
18651>>>>>>>>>
18651>>>>>>>>>    Function ComCaption Returns String
18653>>>>>>>>>        String retVal
18653>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
18654>>>>>>>>>        Function_Return retVal
18655>>>>>>>>>    End_Function
18656>>>>>>>>>
18656>>>>>>>>>    Procedure Set ComCaption String value
18658>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
18659>>>>>>>>>    End_Procedure
18660>>>>>>>>>
18660>>>>>>>>>    Function ComDescriptionText Returns String
18662>>>>>>>>>        String retVal
18662>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
18663>>>>>>>>>        Function_Return retVal
18664>>>>>>>>>    End_Function
18665>>>>>>>>>
18665>>>>>>>>>    Procedure Set ComDescriptionText String value
18667>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
18668>>>>>>>>>    End_Procedure
18669>>>>>>>>>
18669>>>>>>>>>    Function ComId Returns Integer
18671>>>>>>>>>        Integer retVal
18671>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
18672>>>>>>>>>        Function_Return retVal
18673>>>>>>>>>    End_Function
18674>>>>>>>>>
18674>>>>>>>>>    Procedure Set ComId Integer value
18676>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
18677>>>>>>>>>    End_Procedure
18678>>>>>>>>>
18678>>>>>>>>>    Function ComParameter Returns String
18680>>>>>>>>>        String retVal
18680>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
18681>>>>>>>>>        Function_Return retVal
18682>>>>>>>>>    End_Function
18683>>>>>>>>>
18683>>>>>>>>>    Procedure Set ComParameter String value
18685>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
18686>>>>>>>>>    End_Procedure
18687>>>>>>>>>
18687>>>>>>>>>    Function ComShortcutText Returns String
18689>>>>>>>>>        String retVal
18689>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
18690>>>>>>>>>        Function_Return retVal
18691>>>>>>>>>    End_Function
18692>>>>>>>>>
18692>>>>>>>>>    Procedure Set ComShortcutText String value
18694>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
18695>>>>>>>>>    End_Procedure
18696>>>>>>>>>
18696>>>>>>>>>    Function ComCustomShortcutText Returns String
18698>>>>>>>>>        String retVal
18698>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
18699>>>>>>>>>        Function_Return retVal
18700>>>>>>>>>    End_Function
18701>>>>>>>>>
18701>>>>>>>>>    Procedure Set ComCustomShortcutText String value
18703>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
18704>>>>>>>>>    End_Procedure
18705>>>>>>>>>
18705>>>>>>>>>    Function ComTooltipText Returns String
18707>>>>>>>>>        String retVal
18707>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
18708>>>>>>>>>        Function_Return retVal
18709>>>>>>>>>    End_Function
18710>>>>>>>>>
18710>>>>>>>>>    Procedure Set ComTooltipText String value
18712>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
18713>>>>>>>>>    End_Procedure
18714>>>>>>>>>
18714>>>>>>>>>    Function ComVisible Returns Boolean
18716>>>>>>>>>        Boolean retVal
18716>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
18717>>>>>>>>>        Function_Return retVal
18718>>>>>>>>>    End_Function
18719>>>>>>>>>
18719>>>>>>>>>    Procedure Set ComVisible Boolean value
18721>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
18722>>>>>>>>>    End_Procedure
18723>>>>>>>>>
18723>>>>>>>>>    Function ComEnabled Returns Boolean
18725>>>>>>>>>        Boolean retVal
18725>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
18726>>>>>>>>>        Function_Return retVal
18727>>>>>>>>>    End_Function
18728>>>>>>>>>
18728>>>>>>>>>    Procedure Set ComEnabled Boolean value
18730>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
18731>>>>>>>>>    End_Procedure
18732>>>>>>>>>
18732>>>>>>>>>    Function ComIconId Returns Integer
18734>>>>>>>>>        Integer retVal
18734>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
18735>>>>>>>>>        Function_Return retVal
18736>>>>>>>>>    End_Function
18737>>>>>>>>>
18737>>>>>>>>>    Procedure Set ComIconId Integer value
18739>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
18740>>>>>>>>>    End_Procedure
18741>>>>>>>>>
18741>>>>>>>>>    Function ComDefaultItem Returns Boolean
18743>>>>>>>>>        Boolean retVal
18743>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
18744>>>>>>>>>        Function_Return retVal
18745>>>>>>>>>    End_Function
18746>>>>>>>>>
18746>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
18748>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
18749>>>>>>>>>    End_Procedure
18750>>>>>>>>>
18750>>>>>>>>>    Function ComFlags Returns XTPControlFlags
18752>>>>>>>>>        XTPControlFlags retVal
18752>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
18753>>>>>>>>>        Function_Return retVal
18754>>>>>>>>>    End_Function
18755>>>>>>>>>
18755>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
18757>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
18758>>>>>>>>>    End_Procedure
18759>>>>>>>>>
18759>>>>>>>>>    Function ComCategory Returns String
18761>>>>>>>>>        String retVal
18761>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
18762>>>>>>>>>        Function_Return retVal
18763>>>>>>>>>    End_Function
18764>>>>>>>>>
18764>>>>>>>>>    Procedure Set ComCategory String value
18766>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
18767>>>>>>>>>    End_Procedure
18768>>>>>>>>>
18768>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
18770>>>>>>>>>        XTPControlHideFlags retVal
18770>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
18771>>>>>>>>>        Function_Return retVal
18772>>>>>>>>>    End_Function
18773>>>>>>>>>
18773>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
18775>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
18776>>>>>>>>>    End_Procedure
18777>>>>>>>>>
18777>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
18779>>>>>>>>>        Boolean retVal
18779>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
18780>>>>>>>>>        Function_Return retVal
18781>>>>>>>>>    End_Function
18782>>>>>>>>>
18782>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
18784>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
18785>>>>>>>>>    End_Procedure
18786>>>>>>>>>
18786>>>>>>>>>    Function ComAction Returns Variant
18788>>>>>>>>>        Variant retVal
18788>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
18789>>>>>>>>>        Function_Return retVal
18790>>>>>>>>>    End_Function
18791>>>>>>>>>
18791>>>>>>>>>    Procedure Set ComAction Variant value
18793>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
18794>>>>>>>>>    End_Procedure
18795>>>>>>>>>
18795>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
18797>>>>>>>>>        Integer retVal
18797>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
18798>>>>>>>>>        Function_Return retVal
18799>>>>>>>>>    End_Function
18800>>>>>>>>>
18800>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
18802>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
18803>>>>>>>>>    End_Procedure
18804>>>>>>>>>
18804>>>>>>>>>    Function ComWidth Returns Integer
18806>>>>>>>>>        Integer retVal
18806>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
18807>>>>>>>>>        Function_Return retVal
18808>>>>>>>>>    End_Function
18809>>>>>>>>>
18809>>>>>>>>>    Procedure Set ComWidth Integer value
18811>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
18812>>>>>>>>>    End_Procedure
18813>>>>>>>>>
18813>>>>>>>>>    Function ComHeight Returns Integer
18815>>>>>>>>>        Integer retVal
18815>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
18816>>>>>>>>>        Function_Return retVal
18817>>>>>>>>>    End_Function
18818>>>>>>>>>
18818>>>>>>>>>    Procedure Set ComHeight Integer value
18820>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
18821>>>>>>>>>    End_Procedure
18822>>>>>>>>>
18822>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
18824>>>>>>>>>        XTPButtonStyle retVal
18824>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
18825>>>>>>>>>        Function_Return retVal
18826>>>>>>>>>    End_Function
18827>>>>>>>>>
18827>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
18829>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
18830>>>>>>>>>    End_Procedure
18831>>>>>>>>>
18831>>>>>>>>>    Function ComKeyboardTip Returns String
18833>>>>>>>>>        String retVal
18833>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
18834>>>>>>>>>        Function_Return retVal
18835>>>>>>>>>    End_Function
18836>>>>>>>>>
18836>>>>>>>>>    Procedure Set ComKeyboardTip String value
18838>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
18839>>>>>>>>>    End_Procedure
18840>>>>>>>>>
18840>>>>>>>>>    Function ComCommandBar Returns Variant
18842>>>>>>>>>        Variant retVal
18842>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
18843>>>>>>>>>        Function_Return retVal
18844>>>>>>>>>    End_Function
18845>>>>>>>>>
18845>>>>>>>>>    Procedure Set ComCommandBar Variant value
18847>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
18848>>>>>>>>>    End_Procedure
18849>>>>>>>>>
18849>>>>>>>>>    Function ComControls Returns Variant
18851>>>>>>>>>        Handle hDispatchDriver
18851>>>>>>>>>        Variant retVal
18851>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18852>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
18853>>>>>>>>>        Function_Return retVal
18854>>>>>>>>>    End_Function
18855>>>>>>>>>
18855>>>>>>>>>    Function ComParent Returns Variant
18857>>>>>>>>>        Handle hDispatchDriver
18857>>>>>>>>>        Variant retVal
18857>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18858>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
18859>>>>>>>>>        Function_Return retVal
18860>>>>>>>>>    End_Function
18861>>>>>>>>>
18861>>>>>>>>>    Function ComIndex Returns Integer
18863>>>>>>>>>        Handle hDispatchDriver
18863>>>>>>>>>        Integer retVal
18863>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18864>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
18865>>>>>>>>>        Function_Return retVal
18866>>>>>>>>>    End_Function
18867>>>>>>>>>
18867>>>>>>>>>    Function ComType Returns XTPControlType
18869>>>>>>>>>        Handle hDispatchDriver
18869>>>>>>>>>        XTPControlType retVal
18869>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18870>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
18871>>>>>>>>>        Function_Return retVal
18872>>>>>>>>>    End_Function
18873>>>>>>>>>
18873>>>>>>>>>    Procedure ComDelete
18875>>>>>>>>>        Handle hDispatchDriver
18875>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18876>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
18877>>>>>>>>>    End_Procedure
18878>>>>>>>>>
18878>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
18880>>>>>>>>>        Handle hDispatchDriver
18880>>>>>>>>>        Variant retVal
18880>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18881>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18882>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
18883>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
18884>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
18885>>>>>>>>>        Function_Return retVal
18886>>>>>>>>>    End_Function
18887>>>>>>>>>
18887>>>>>>>>>    Procedure ComSetFocus
18889>>>>>>>>>        Handle hDispatchDriver
18889>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18890>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
18891>>>>>>>>>    End_Procedure
18892>>>>>>>>>
18892>>>>>>>>>    Procedure ComExecute
18894>>>>>>>>>        Handle hDispatchDriver
18894>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18895>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
18896>>>>>>>>>    End_Procedure
18897>>>>>>>>>
18897>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
18899>>>>>>>>>        Handle hDispatchDriver
18899>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18900>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
18901>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
18902>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
18903>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
18904>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
18905>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
18906>>>>>>>>>    End_Procedure
18907>>>>>>>>>
18907>>>>>>>>>    Function ComRibbonGroup Returns Variant
18909>>>>>>>>>        Handle hDispatchDriver
18909>>>>>>>>>        Variant retVal
18909>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18910>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
18911>>>>>>>>>        Function_Return retVal
18912>>>>>>>>>    End_Function
18913>>>>>>>>>
18913>>>>>>>>>    Procedure ComReset
18915>>>>>>>>>        Handle hDispatchDriver
18915>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18916>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
18917>>>>>>>>>    End_Procedure
18918>>>>>>>>>
18918>>>>>>>>>    Function ComTop Returns Integer
18920>>>>>>>>>        Handle hDispatchDriver
18920>>>>>>>>>        Integer retVal
18920>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18921>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
18922>>>>>>>>>        Function_Return retVal
18923>>>>>>>>>    End_Function
18924>>>>>>>>>
18924>>>>>>>>>    Function ComLeft Returns Integer
18926>>>>>>>>>        Handle hDispatchDriver
18926>>>>>>>>>        Integer retVal
18926>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18927>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
18928>>>>>>>>>        Function_Return retVal
18929>>>>>>>>>    End_Function
18930>>>>>>>>>
18930>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
18932>>>>>>>>>        Handle hDispatchDriver
18932>>>>>>>>>        Variant retVal
18932>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18933>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
18934>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
18935>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
18936>>>>>>>>>        Function_Return retVal
18937>>>>>>>>>    End_Function
18938>>>>>>>>>
18938>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
18940>>>>>>>>>        Handle hDispatchDriver
18940>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18941>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18942>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
18943>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
18944>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
18945>>>>>>>>>    End_Procedure
18946>>>>>>>>>End_Class
18947>>>>>>>>>
18947>>>>>>>>>// CoClass
18947>>>>>>>>>// CLSID: {C0DE2200-BB71-4F79-9A7A-11ED146C387C}
18947>>>>>>>>>Class cCJCommandBarPopup is a cComAutomationObject
18948>>>>>>>>>    Import_Class_Protocol cCJICommandBarPopup
18949>>>>>>>>>
18949>>>>>>>>>    Procedure Construct_Object
18951>>>>>>>>>        Forward Send Construct_Object
18953>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
18954>>>>>>>>>    End_Procedure
18955>>>>>>>>>End_Class
18956>>>>>>>>>
18956>>>>>>>>>// CLSID: {C0DE2200-06D0-4869-8168-9CCBAA22C0EB}
18956>>>>>>>>>Class cCJICommandBarGalleryItem is a Mixin
18957>>>>>>>>>
18957>>>>>>>>>    Function ComId Returns Integer
18959>>>>>>>>>        Integer retVal
18959>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
18960>>>>>>>>>        Function_Return retVal
18961>>>>>>>>>    End_Function
18962>>>>>>>>>
18962>>>>>>>>>    Procedure Set ComId Integer value
18964>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
18965>>>>>>>>>    End_Procedure
18966>>>>>>>>>
18966>>>>>>>>>    Function ComImageIndex Returns Integer
18968>>>>>>>>>        Integer retVal
18968>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
18969>>>>>>>>>        Function_Return retVal
18970>>>>>>>>>    End_Function
18971>>>>>>>>>
18971>>>>>>>>>    Procedure Set ComImageIndex Integer value
18973>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
18974>>>>>>>>>    End_Procedure
18975>>>>>>>>>
18975>>>>>>>>>    Function ComCaption Returns String
18977>>>>>>>>>        String retVal
18977>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
18978>>>>>>>>>        Function_Return retVal
18979>>>>>>>>>    End_Function
18980>>>>>>>>>
18980>>>>>>>>>    Procedure Set ComCaption String value
18982>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
18983>>>>>>>>>    End_Procedure
18984>>>>>>>>>
18984>>>>>>>>>    Function ComToolTip Returns String
18986>>>>>>>>>        String retVal
18986>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
18987>>>>>>>>>        Function_Return retVal
18988>>>>>>>>>    End_Function
18989>>>>>>>>>
18989>>>>>>>>>    Procedure Set ComToolTip String value
18991>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
18992>>>>>>>>>    End_Procedure
18993>>>>>>>>>
18993>>>>>>>>>    Function ComTag Returns Variant
18995>>>>>>>>>        Variant retVal
18995>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_VARIANT to retVal
18996>>>>>>>>>        Function_Return retVal
18997>>>>>>>>>    End_Function
18998>>>>>>>>>
18998>>>>>>>>>    Procedure Set ComTag Variant value
19000>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_VARIANT to value
19001>>>>>>>>>    End_Procedure
19002>>>>>>>>>
19002>>>>>>>>>    Function ComItemWidth Returns Integer
19004>>>>>>>>>        Integer retVal
19004>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
19005>>>>>>>>>        Function_Return retVal
19006>>>>>>>>>    End_Function
19007>>>>>>>>>
19007>>>>>>>>>    Procedure Set ComItemWidth Integer value
19009>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
19010>>>>>>>>>    End_Procedure
19011>>>>>>>>>
19011>>>>>>>>>    Function ComItemHeight Returns Integer
19013>>>>>>>>>        Integer retVal
19013>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
19014>>>>>>>>>        Function_Return retVal
19015>>>>>>>>>    End_Function
19016>>>>>>>>>
19016>>>>>>>>>    Procedure Set ComItemHeight Integer value
19018>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
19019>>>>>>>>>    End_Procedure
19020>>>>>>>>>
19020>>>>>>>>>    Function ComDescriptionText Returns String
19022>>>>>>>>>        String retVal
19022>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
19023>>>>>>>>>        Function_Return retVal
19024>>>>>>>>>    End_Function
19025>>>>>>>>>
19025>>>>>>>>>    Procedure Set ComDescriptionText String value
19027>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
19028>>>>>>>>>    End_Procedure
19029>>>>>>>>>
19029>>>>>>>>>    Function ComEnabled Returns Boolean
19031>>>>>>>>>        Boolean retVal
19031>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
19032>>>>>>>>>        Function_Return retVal
19033>>>>>>>>>    End_Function
19034>>>>>>>>>
19034>>>>>>>>>    Procedure Set ComEnabled Boolean value
19036>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
19037>>>>>>>>>    End_Procedure
19038>>>>>>>>>
19038>>>>>>>>>    Function ComIndex Returns Integer
19040>>>>>>>>>        Handle hDispatchDriver
19040>>>>>>>>>        Integer retVal
19040>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19041>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
19042>>>>>>>>>        Function_Return retVal
19043>>>>>>>>>    End_Function
19044>>>>>>>>>
19044>>>>>>>>>    Function ComLabel Returns Boolean
19046>>>>>>>>>        Handle hDispatchDriver
19046>>>>>>>>>        Boolean retVal
19046>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19047>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_BOOL to retVal
19048>>>>>>>>>        Function_Return retVal
19049>>>>>>>>>    End_Function
19050>>>>>>>>>End_Class
19051>>>>>>>>>
19051>>>>>>>>>// CoClass
19051>>>>>>>>>// CLSID: {C0DE2200-9D8C-4025-AAD4-73D8D15E7FED}
19051>>>>>>>>>Class cCJCommandBarGalleryItem is a cComAutomationObject
19052>>>>>>>>>    Import_Class_Protocol cCJICommandBarGalleryItem
19053>>>>>>>>>
19053>>>>>>>>>    Procedure Construct_Object
19055>>>>>>>>>        Forward Send Construct_Object
19057>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
19058>>>>>>>>>    End_Procedure
19059>>>>>>>>>End_Class
19060>>>>>>>>>
19060>>>>>>>>>// CLSID: {C0DE2200-0AFA-4EC8-A49E-4DC7671C4AC7}
19060>>>>>>>>>Class cCJICommandBarGalleryItems is a Mixin
19061>>>>>>>>>
19061>>>>>>>>>    Function ComIcons Returns Variant
19063>>>>>>>>>        Variant retVal
19063>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_DISPATCH to retVal
19064>>>>>>>>>        Function_Return retVal
19065>>>>>>>>>    End_Function
19066>>>>>>>>>
19066>>>>>>>>>    Procedure Set ComIcons Variant value
19068>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_DISPATCH to value
19069>>>>>>>>>    End_Procedure
19070>>>>>>>>>
19070>>>>>>>>>    Function ComItemWidth Returns Integer
19072>>>>>>>>>        Integer retVal
19072>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to retVal
19073>>>>>>>>>        Function_Return retVal
19074>>>>>>>>>    End_Function
19075>>>>>>>>>
19075>>>>>>>>>    Procedure Set ComItemWidth Integer value
19077>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to value
19078>>>>>>>>>    End_Procedure
19079>>>>>>>>>
19079>>>>>>>>>    Function ComItemHeight Returns Integer
19081>>>>>>>>>        Integer retVal
19081>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
19082>>>>>>>>>        Function_Return retVal
19083>>>>>>>>>    End_Function
19084>>>>>>>>>
19084>>>>>>>>>    Procedure Set ComItemHeight Integer value
19086>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
19087>>>>>>>>>    End_Procedure
19088>>>>>>>>>
19088>>>>>>>>>    Function ComClipItems Returns Boolean
19090>>>>>>>>>        Boolean retVal
19090>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
19091>>>>>>>>>        Function_Return retVal
19092>>>>>>>>>    End_Function
19093>>>>>>>>>
19093>>>>>>>>>    Procedure Set ComClipItems Boolean value
19095>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
19096>>>>>>>>>    End_Procedure
19097>>>>>>>>>
19097>>>>>>>>>    Function ComEnableMarkup Returns Boolean
19099>>>>>>>>>        Boolean retVal
19099>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
19100>>>>>>>>>        Function_Return retVal
19101>>>>>>>>>    End_Function
19102>>>>>>>>>
19102>>>>>>>>>    Procedure Set ComEnableMarkup Boolean value
19104>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
19105>>>>>>>>>    End_Procedure
19106>>>>>>>>>
19106>>>>>>>>>    Function ComAddItem Integer llId String llCaption Returns Variant
19108>>>>>>>>>        Handle hDispatchDriver
19108>>>>>>>>>        Variant retVal
19108>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19109>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
19110>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
19111>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
19112>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
19113>>>>>>>>>        Function_Return retVal
19114>>>>>>>>>    End_Function
19115>>>>>>>>>
19115>>>>>>>>>    Function ComAddLabel String llCaption Returns Variant
19117>>>>>>>>>        Handle hDispatchDriver
19117>>>>>>>>>        Variant retVal
19117>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19118>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19119>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
19120>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
19121>>>>>>>>>        Function_Return retVal
19122>>>>>>>>>    End_Function
19123>>>>>>>>>
19123>>>>>>>>>    Function ComAddSeparator Returns Variant
19125>>>>>>>>>        Handle hDispatchDriver
19125>>>>>>>>>        Variant retVal
19125>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19126>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
19127>>>>>>>>>        Function_Return retVal
19128>>>>>>>>>    End_Function
19129>>>>>>>>>
19129>>>>>>>>>    // Gets the number of controls in the collection.
19129>>>>>>>>>    Function ComCount Returns Integer
19131>>>>>>>>>        Handle hDispatchDriver
19131>>>>>>>>>        Integer retVal
19131>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19132>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
19133>>>>>>>>>        Function_Return retVal
19134>>>>>>>>>    End_Function
19135>>>>>>>>>
19135>>>>>>>>>    // Gets an item from the collection by its index.
19135>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
19137>>>>>>>>>        Handle hDispatchDriver
19137>>>>>>>>>        Variant retVal
19137>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19138>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19139>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
19140>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
19141>>>>>>>>>        Function_Return retVal
19142>>>>>>>>>    End_Function
19143>>>>>>>>>
19143>>>>>>>>>    Function Com_NewEnum Returns Variant
19145>>>>>>>>>        Handle hDispatchDriver
19145>>>>>>>>>        Variant retVal
19145>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19146>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
19147>>>>>>>>>        Function_Return retVal
19148>>>>>>>>>    End_Function
19149>>>>>>>>>
19149>>>>>>>>>    // Deletes all of the command bar controls from the collection
19149>>>>>>>>>    Procedure ComDeleteAll
19151>>>>>>>>>        Handle hDispatchDriver
19151>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19152>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
19153>>>>>>>>>    End_Procedure
19154>>>>>>>>>
19154>>>>>>>>>    Procedure ComDeleteAt Integer llIndex
19156>>>>>>>>>        Handle hDispatchDriver
19156>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19157>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19158>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
19159>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 10 OLE_VT_VOID
19160>>>>>>>>>    End_Procedure
19161>>>>>>>>>
19161>>>>>>>>>    Function ComMarkupContext Returns Variant
19163>>>>>>>>>        Handle hDispatchDriver
19163>>>>>>>>>        Variant retVal
19163>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19164>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_DISPATCH to retVal
19165>>>>>>>>>        Function_Return retVal
19166>>>>>>>>>    End_Function
19167>>>>>>>>>End_Class
19168>>>>>>>>>
19168>>>>>>>>>// CLSID: {C0DE2200-7BE8-42EC-870C-8849F5540F14}
19168>>>>>>>>>Class cCJICommandBarGalleryItemsEvents is a Mixin
19169>>>>>>>>>
19169>>>>>>>>>    Procedure OnComDrawItem OLE_HANDLE llhDC Variant llGallery Variant llItem Integer llx Integer lly Integer llcx Integer llcy Boolean llEnabled Boolean llSelected Boolean llPressed Boolean llChecked Variant llHandled
19171>>>>>>>>>    End_Procedure
19172>>>>>>>>>
19172>>>>>>>>>    Procedure RegisterComEvents
19174>>>>>>>>>        Send RegisterComEvent 1 msg_OnComDrawItem
19175>>>>>>>>>    End_Procedure
19176>>>>>>>>>End_Class
19177>>>>>>>>>
19177>>>>>>>>>// CoClass
19177>>>>>>>>>// CLSID: {C0DE2200-BA48-4451-B04D-5304909AE543}
19177>>>>>>>>>Class cCJCommandBarGalleryItems is a cComAutomationObject
19178>>>>>>>>>    Import_Class_Protocol cCJICommandBarGalleryItems
19179>>>>>>>>>    Import_Class_Protocol cCJICommandBarGalleryItemsEvents
19180>>>>>>>>>
19180>>>>>>>>>    Procedure Construct_Object
19182>>>>>>>>>        Forward Send Construct_Object
19184>>>>>>>>>        Set psEventId to "{C0DE2200-7BE8-42EC-870C-8849F5540F14}"
19185>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
19186>>>>>>>>>    End_Procedure
19187>>>>>>>>>End_Class
19188>>>>>>>>>
19188>>>>>>>>>// CLSID: {C0DE2200-55CC-4D4C-A6CF-260F62044127}
19188>>>>>>>>>Class cCJICommandBarGallery is a Mixin
19189>>>>>>>>>
19189>>>>>>>>>    Function ComChecked Returns Boolean
19191>>>>>>>>>        Boolean retVal
19191>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
19192>>>>>>>>>        Function_Return retVal
19193>>>>>>>>>    End_Function
19194>>>>>>>>>
19194>>>>>>>>>    Procedure Set ComChecked Boolean value
19196>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
19197>>>>>>>>>    End_Procedure
19198>>>>>>>>>
19198>>>>>>>>>    Function ComBeginGroup Returns Boolean
19200>>>>>>>>>        Boolean retVal
19200>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
19201>>>>>>>>>        Function_Return retVal
19202>>>>>>>>>    End_Function
19203>>>>>>>>>
19203>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
19205>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
19206>>>>>>>>>    End_Procedure
19207>>>>>>>>>
19207>>>>>>>>>    Function ComCaption Returns String
19209>>>>>>>>>        String retVal
19209>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
19210>>>>>>>>>        Function_Return retVal
19211>>>>>>>>>    End_Function
19212>>>>>>>>>
19212>>>>>>>>>    Procedure Set ComCaption String value
19214>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
19215>>>>>>>>>    End_Procedure
19216>>>>>>>>>
19216>>>>>>>>>    Function ComDescriptionText Returns String
19218>>>>>>>>>        String retVal
19218>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
19219>>>>>>>>>        Function_Return retVal
19220>>>>>>>>>    End_Function
19221>>>>>>>>>
19221>>>>>>>>>    Procedure Set ComDescriptionText String value
19223>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
19224>>>>>>>>>    End_Procedure
19225>>>>>>>>>
19225>>>>>>>>>    Function ComId Returns Integer
19227>>>>>>>>>        Integer retVal
19227>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
19228>>>>>>>>>        Function_Return retVal
19229>>>>>>>>>    End_Function
19230>>>>>>>>>
19230>>>>>>>>>    Procedure Set ComId Integer value
19232>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
19233>>>>>>>>>    End_Procedure
19234>>>>>>>>>
19234>>>>>>>>>    Function ComParameter Returns String
19236>>>>>>>>>        String retVal
19236>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
19237>>>>>>>>>        Function_Return retVal
19238>>>>>>>>>    End_Function
19239>>>>>>>>>
19239>>>>>>>>>    Procedure Set ComParameter String value
19241>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
19242>>>>>>>>>    End_Procedure
19243>>>>>>>>>
19243>>>>>>>>>    Function ComShortcutText Returns String
19245>>>>>>>>>        String retVal
19245>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
19246>>>>>>>>>        Function_Return retVal
19247>>>>>>>>>    End_Function
19248>>>>>>>>>
19248>>>>>>>>>    Procedure Set ComShortcutText String value
19250>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
19251>>>>>>>>>    End_Procedure
19252>>>>>>>>>
19252>>>>>>>>>    Function ComCustomShortcutText Returns String
19254>>>>>>>>>        String retVal
19254>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
19255>>>>>>>>>        Function_Return retVal
19256>>>>>>>>>    End_Function
19257>>>>>>>>>
19257>>>>>>>>>    Procedure Set ComCustomShortcutText String value
19259>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
19260>>>>>>>>>    End_Procedure
19261>>>>>>>>>
19261>>>>>>>>>    Function ComTooltipText Returns String
19263>>>>>>>>>        String retVal
19263>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
19264>>>>>>>>>        Function_Return retVal
19265>>>>>>>>>    End_Function
19266>>>>>>>>>
19266>>>>>>>>>    Procedure Set ComTooltipText String value
19268>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
19269>>>>>>>>>    End_Procedure
19270>>>>>>>>>
19270>>>>>>>>>    Function ComVisible Returns Boolean
19272>>>>>>>>>        Boolean retVal
19272>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
19273>>>>>>>>>        Function_Return retVal
19274>>>>>>>>>    End_Function
19275>>>>>>>>>
19275>>>>>>>>>    Procedure Set ComVisible Boolean value
19277>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
19278>>>>>>>>>    End_Procedure
19279>>>>>>>>>
19279>>>>>>>>>    Function ComEnabled Returns Boolean
19281>>>>>>>>>        Boolean retVal
19281>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
19282>>>>>>>>>        Function_Return retVal
19283>>>>>>>>>    End_Function
19284>>>>>>>>>
19284>>>>>>>>>    Procedure Set ComEnabled Boolean value
19286>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
19287>>>>>>>>>    End_Procedure
19288>>>>>>>>>
19288>>>>>>>>>    Function ComIconId Returns Integer
19290>>>>>>>>>        Integer retVal
19290>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
19291>>>>>>>>>        Function_Return retVal
19292>>>>>>>>>    End_Function
19293>>>>>>>>>
19293>>>>>>>>>    Procedure Set ComIconId Integer value
19295>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
19296>>>>>>>>>    End_Procedure
19297>>>>>>>>>
19297>>>>>>>>>    Function ComDefaultItem Returns Boolean
19299>>>>>>>>>        Boolean retVal
19299>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
19300>>>>>>>>>        Function_Return retVal
19301>>>>>>>>>    End_Function
19302>>>>>>>>>
19302>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
19304>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
19305>>>>>>>>>    End_Procedure
19306>>>>>>>>>
19306>>>>>>>>>    Function ComFlags Returns XTPControlFlags
19308>>>>>>>>>        XTPControlFlags retVal
19308>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
19309>>>>>>>>>        Function_Return retVal
19310>>>>>>>>>    End_Function
19311>>>>>>>>>
19311>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
19313>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
19314>>>>>>>>>    End_Procedure
19315>>>>>>>>>
19315>>>>>>>>>    Function ComCategory Returns String
19317>>>>>>>>>        String retVal
19317>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
19318>>>>>>>>>        Function_Return retVal
19319>>>>>>>>>    End_Function
19320>>>>>>>>>
19320>>>>>>>>>    Procedure Set ComCategory String value
19322>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
19323>>>>>>>>>    End_Procedure
19324>>>>>>>>>
19324>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
19326>>>>>>>>>        XTPControlHideFlags retVal
19326>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
19327>>>>>>>>>        Function_Return retVal
19328>>>>>>>>>    End_Function
19329>>>>>>>>>
19329>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
19331>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
19332>>>>>>>>>    End_Procedure
19333>>>>>>>>>
19333>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
19335>>>>>>>>>        Boolean retVal
19335>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
19336>>>>>>>>>        Function_Return retVal
19337>>>>>>>>>    End_Function
19338>>>>>>>>>
19338>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
19340>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
19341>>>>>>>>>    End_Procedure
19342>>>>>>>>>
19342>>>>>>>>>    Function ComAction Returns Variant
19344>>>>>>>>>        Variant retVal
19344>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
19345>>>>>>>>>        Function_Return retVal
19346>>>>>>>>>    End_Function
19347>>>>>>>>>
19347>>>>>>>>>    Procedure Set ComAction Variant value
19349>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
19350>>>>>>>>>    End_Procedure
19351>>>>>>>>>
19351>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
19353>>>>>>>>>        Integer retVal
19353>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
19354>>>>>>>>>        Function_Return retVal
19355>>>>>>>>>    End_Function
19356>>>>>>>>>
19356>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
19358>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
19359>>>>>>>>>    End_Procedure
19360>>>>>>>>>
19360>>>>>>>>>    Function ComWidth Returns Integer
19362>>>>>>>>>        Integer retVal
19362>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
19363>>>>>>>>>        Function_Return retVal
19364>>>>>>>>>    End_Function
19365>>>>>>>>>
19365>>>>>>>>>    Procedure Set ComWidth Integer value
19367>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
19368>>>>>>>>>    End_Procedure
19369>>>>>>>>>
19369>>>>>>>>>    Function ComHeight Returns Integer
19371>>>>>>>>>        Integer retVal
19371>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
19372>>>>>>>>>        Function_Return retVal
19373>>>>>>>>>    End_Function
19374>>>>>>>>>
19374>>>>>>>>>    Procedure Set ComHeight Integer value
19376>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
19377>>>>>>>>>    End_Procedure
19378>>>>>>>>>
19378>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
19380>>>>>>>>>        XTPButtonStyle retVal
19380>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
19381>>>>>>>>>        Function_Return retVal
19382>>>>>>>>>    End_Function
19383>>>>>>>>>
19383>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
19385>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
19386>>>>>>>>>    End_Procedure
19387>>>>>>>>>
19387>>>>>>>>>    Function ComKeyboardTip Returns String
19389>>>>>>>>>        String retVal
19389>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
19390>>>>>>>>>        Function_Return retVal
19391>>>>>>>>>    End_Function
19392>>>>>>>>>
19392>>>>>>>>>    Procedure Set ComKeyboardTip String value
19394>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
19395>>>>>>>>>    End_Procedure
19396>>>>>>>>>
19396>>>>>>>>>    Function ComCommandBar Returns Variant
19398>>>>>>>>>        Variant retVal
19398>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
19399>>>>>>>>>        Function_Return retVal
19400>>>>>>>>>    End_Function
19401>>>>>>>>>
19401>>>>>>>>>    Procedure Set ComCommandBar Variant value
19403>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
19404>>>>>>>>>    End_Procedure
19405>>>>>>>>>
19405>>>>>>>>>    Function ComItems Returns Variant
19407>>>>>>>>>        Variant retVal
19407>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_DISPATCH to retVal
19408>>>>>>>>>        Function_Return retVal
19409>>>>>>>>>    End_Function
19410>>>>>>>>>
19410>>>>>>>>>    Procedure Set ComItems Variant value
19412>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_DISPATCH to value
19413>>>>>>>>>    End_Procedure
19414>>>>>>>>>
19414>>>>>>>>>    Function ComSelectedItem Returns Variant
19416>>>>>>>>>        Variant retVal
19416>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_DISPATCH to retVal
19417>>>>>>>>>        Function_Return retVal
19418>>>>>>>>>    End_Function
19419>>>>>>>>>
19419>>>>>>>>>    Procedure Set ComSelectedItem Variant value
19421>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_DISPATCH to value
19422>>>>>>>>>    End_Procedure
19423>>>>>>>>>
19423>>>>>>>>>    Function ComCheckedItem Returns Integer
19425>>>>>>>>>        Integer retVal
19425>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
19426>>>>>>>>>        Function_Return retVal
19427>>>>>>>>>    End_Function
19428>>>>>>>>>
19428>>>>>>>>>    Procedure Set ComCheckedItem Integer value
19430>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
19431>>>>>>>>>    End_Procedure
19432>>>>>>>>>
19432>>>>>>>>>    Function ComShowBorders Returns Boolean
19434>>>>>>>>>        Boolean retVal
19434>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BOOL to retVal
19435>>>>>>>>>        Function_Return retVal
19436>>>>>>>>>    End_Function
19437>>>>>>>>>
19437>>>>>>>>>    Procedure Set ComShowBorders Boolean value
19439>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BOOL to value
19440>>>>>>>>>    End_Procedure
19441>>>>>>>>>
19441>>>>>>>>>    Function ComShowLabels Returns Boolean
19443>>>>>>>>>        Boolean retVal
19443>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 54 OLE_VT_BOOL to retVal
19444>>>>>>>>>        Function_Return retVal
19445>>>>>>>>>    End_Function
19446>>>>>>>>>
19446>>>>>>>>>    Procedure Set ComShowLabels Boolean value
19448>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 54 OLE_VT_BOOL to value
19449>>>>>>>>>    End_Procedure
19450>>>>>>>>>
19450>>>>>>>>>    Function ComShowScrollBar Returns Boolean
19452>>>>>>>>>        Boolean retVal
19452>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 55 OLE_VT_BOOL to retVal
19453>>>>>>>>>        Function_Return retVal
19454>>>>>>>>>    End_Function
19455>>>>>>>>>
19455>>>>>>>>>    Procedure Set ComShowScrollBar Boolean value
19457>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 55 OLE_VT_BOOL to value
19458>>>>>>>>>    End_Procedure
19459>>>>>>>>>
19459>>>>>>>>>    Function ComScrollPos Returns Integer
19461>>>>>>>>>        Integer retVal
19461>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 56 OLE_VT_I4 to retVal
19462>>>>>>>>>        Function_Return retVal
19463>>>>>>>>>    End_Function
19464>>>>>>>>>
19464>>>>>>>>>    Procedure Set ComScrollPos Integer value
19466>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 56 OLE_VT_I4 to value
19467>>>>>>>>>    End_Procedure
19468>>>>>>>>>
19468>>>>>>>>>    Function ComResizable Returns XTPGalleryResizable
19470>>>>>>>>>        XTPGalleryResizable retVal
19470>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 62 OLE_VT_I4 to retVal
19471>>>>>>>>>        Function_Return retVal
19472>>>>>>>>>    End_Function
19473>>>>>>>>>
19473>>>>>>>>>    Procedure Set ComResizable XTPGalleryResizable value
19475>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 62 OLE_VT_I4 to value
19476>>>>>>>>>    End_Procedure
19477>>>>>>>>>
19477>>>>>>>>>    Function ComEnableTransparency Returns Boolean
19479>>>>>>>>>        Boolean retVal
19479>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 63 OLE_VT_BOOL to retVal
19480>>>>>>>>>        Function_Return retVal
19481>>>>>>>>>    End_Function
19482>>>>>>>>>
19482>>>>>>>>>    Procedure Set ComEnableTransparency Boolean value
19484>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 63 OLE_VT_BOOL to value
19485>>>>>>>>>    End_Procedure
19486>>>>>>>>>
19486>>>>>>>>>    Function ComControls Returns Variant
19488>>>>>>>>>        Handle hDispatchDriver
19488>>>>>>>>>        Variant retVal
19488>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19489>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
19490>>>>>>>>>        Function_Return retVal
19491>>>>>>>>>    End_Function
19492>>>>>>>>>
19492>>>>>>>>>    Function ComParent Returns Variant
19494>>>>>>>>>        Handle hDispatchDriver
19494>>>>>>>>>        Variant retVal
19494>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19495>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
19496>>>>>>>>>        Function_Return retVal
19497>>>>>>>>>    End_Function
19498>>>>>>>>>
19498>>>>>>>>>    Function ComIndex Returns Integer
19500>>>>>>>>>        Handle hDispatchDriver
19500>>>>>>>>>        Integer retVal
19500>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19501>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
19502>>>>>>>>>        Function_Return retVal
19503>>>>>>>>>    End_Function
19504>>>>>>>>>
19504>>>>>>>>>    Function ComType Returns XTPControlType
19506>>>>>>>>>        Handle hDispatchDriver
19506>>>>>>>>>        XTPControlType retVal
19506>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19507>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
19508>>>>>>>>>        Function_Return retVal
19509>>>>>>>>>    End_Function
19510>>>>>>>>>
19510>>>>>>>>>    Procedure ComDelete
19512>>>>>>>>>        Handle hDispatchDriver
19512>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19513>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
19514>>>>>>>>>    End_Procedure
19515>>>>>>>>>
19515>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
19517>>>>>>>>>        Handle hDispatchDriver
19517>>>>>>>>>        Variant retVal
19517>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19518>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
19519>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
19520>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
19521>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
19522>>>>>>>>>        Function_Return retVal
19523>>>>>>>>>    End_Function
19524>>>>>>>>>
19524>>>>>>>>>    Procedure ComSetFocus
19526>>>>>>>>>        Handle hDispatchDriver
19526>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19527>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
19528>>>>>>>>>    End_Procedure
19529>>>>>>>>>
19529>>>>>>>>>    Procedure ComExecute
19531>>>>>>>>>        Handle hDispatchDriver
19531>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19532>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
19533>>>>>>>>>    End_Procedure
19534>>>>>>>>>
19534>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
19536>>>>>>>>>        Handle hDispatchDriver
19536>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19537>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
19538>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
19539>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
19540>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
19541>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
19542>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
19543>>>>>>>>>    End_Procedure
19544>>>>>>>>>
19544>>>>>>>>>    Function ComRibbonGroup Returns Variant
19546>>>>>>>>>        Handle hDispatchDriver
19546>>>>>>>>>        Variant retVal
19546>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19547>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
19548>>>>>>>>>        Function_Return retVal
19549>>>>>>>>>    End_Function
19550>>>>>>>>>
19550>>>>>>>>>    Procedure ComReset
19552>>>>>>>>>        Handle hDispatchDriver
19552>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19553>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
19554>>>>>>>>>    End_Procedure
19555>>>>>>>>>
19555>>>>>>>>>    Function ComTop Returns Integer
19557>>>>>>>>>        Handle hDispatchDriver
19557>>>>>>>>>        Integer retVal
19557>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19558>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
19559>>>>>>>>>        Function_Return retVal
19560>>>>>>>>>    End_Function
19561>>>>>>>>>
19561>>>>>>>>>    Function ComLeft Returns Integer
19563>>>>>>>>>        Handle hDispatchDriver
19563>>>>>>>>>        Integer retVal
19563>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19564>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
19565>>>>>>>>>        Function_Return retVal
19566>>>>>>>>>    End_Function
19567>>>>>>>>>
19567>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
19569>>>>>>>>>        Handle hDispatchDriver
19569>>>>>>>>>        Variant retVal
19569>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19570>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19571>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
19572>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
19573>>>>>>>>>        Function_Return retVal
19574>>>>>>>>>    End_Function
19575>>>>>>>>>
19575>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
19577>>>>>>>>>        Handle hDispatchDriver
19577>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19578>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
19579>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
19580>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
19581>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
19582>>>>>>>>>    End_Procedure
19583>>>>>>>>>
19583>>>>>>>>>    Procedure ComSetItemsMargin Integer llLeft Integer llTop Integer llRight Integer llBottom
19585>>>>>>>>>        Handle hDispatchDriver
19585>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19586>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
19587>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
19588>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
19589>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
19590>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
19591>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 59 OLE_VT_VOID
19592>>>>>>>>>    End_Procedure
19593>>>>>>>>>
19593>>>>>>>>>    Procedure ComEnsureVisible Integer llIndex
19595>>>>>>>>>        Handle hDispatchDriver
19595>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19596>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19597>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
19598>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 61 OLE_VT_VOID
19599>>>>>>>>>    End_Procedure
19600>>>>>>>>>End_Class
19601>>>>>>>>>
19601>>>>>>>>>// CoClass
19601>>>>>>>>>// CLSID: {C0DE2200-AD3D-450F-A51C-F3928CA3D480}
19601>>>>>>>>>Class cCJCommandBarGallery is a cComAutomationObject
19602>>>>>>>>>    Import_Class_Protocol cCJICommandBarGallery
19603>>>>>>>>>
19603>>>>>>>>>    Procedure Construct_Object
19605>>>>>>>>>        Forward Send Construct_Object
19607>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
19608>>>>>>>>>    End_Procedure
19609>>>>>>>>>End_Class
19610>>>>>>>>>
19610>>>>>>>>>// CLSID: {C0DE2200-1A6F-478C-8C8D-38C067A2BC1F}
19610>>>>>>>>>Class cCJICommandBarComboBox is a Mixin
19611>>>>>>>>>
19611>>>>>>>>>    Function ComChecked Returns Boolean
19613>>>>>>>>>        Boolean retVal
19613>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
19614>>>>>>>>>        Function_Return retVal
19615>>>>>>>>>    End_Function
19616>>>>>>>>>
19616>>>>>>>>>    Procedure Set ComChecked Boolean value
19618>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
19619>>>>>>>>>    End_Procedure
19620>>>>>>>>>
19620>>>>>>>>>    Function ComBeginGroup Returns Boolean
19622>>>>>>>>>        Boolean retVal
19622>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
19623>>>>>>>>>        Function_Return retVal
19624>>>>>>>>>    End_Function
19625>>>>>>>>>
19625>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
19627>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
19628>>>>>>>>>    End_Procedure
19629>>>>>>>>>
19629>>>>>>>>>    Function ComCaption Returns String
19631>>>>>>>>>        String retVal
19631>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
19632>>>>>>>>>        Function_Return retVal
19633>>>>>>>>>    End_Function
19634>>>>>>>>>
19634>>>>>>>>>    Procedure Set ComCaption String value
19636>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
19637>>>>>>>>>    End_Procedure
19638>>>>>>>>>
19638>>>>>>>>>    Function ComDescriptionText Returns String
19640>>>>>>>>>        String retVal
19640>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
19641>>>>>>>>>        Function_Return retVal
19642>>>>>>>>>    End_Function
19643>>>>>>>>>
19643>>>>>>>>>    Procedure Set ComDescriptionText String value
19645>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
19646>>>>>>>>>    End_Procedure
19647>>>>>>>>>
19647>>>>>>>>>    Function ComId Returns Integer
19649>>>>>>>>>        Integer retVal
19649>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
19650>>>>>>>>>        Function_Return retVal
19651>>>>>>>>>    End_Function
19652>>>>>>>>>
19652>>>>>>>>>    Procedure Set ComId Integer value
19654>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
19655>>>>>>>>>    End_Procedure
19656>>>>>>>>>
19656>>>>>>>>>    Function ComParameter Returns String
19658>>>>>>>>>        String retVal
19658>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
19659>>>>>>>>>        Function_Return retVal
19660>>>>>>>>>    End_Function
19661>>>>>>>>>
19661>>>>>>>>>    Procedure Set ComParameter String value
19663>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
19664>>>>>>>>>    End_Procedure
19665>>>>>>>>>
19665>>>>>>>>>    Function ComShortcutText Returns String
19667>>>>>>>>>        String retVal
19667>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
19668>>>>>>>>>        Function_Return retVal
19669>>>>>>>>>    End_Function
19670>>>>>>>>>
19670>>>>>>>>>    Procedure Set ComShortcutText String value
19672>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
19673>>>>>>>>>    End_Procedure
19674>>>>>>>>>
19674>>>>>>>>>    Function ComCustomShortcutText Returns String
19676>>>>>>>>>        String retVal
19676>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
19677>>>>>>>>>        Function_Return retVal
19678>>>>>>>>>    End_Function
19679>>>>>>>>>
19679>>>>>>>>>    Procedure Set ComCustomShortcutText String value
19681>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
19682>>>>>>>>>    End_Procedure
19683>>>>>>>>>
19683>>>>>>>>>    Function ComTooltipText Returns String
19685>>>>>>>>>        String retVal
19685>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
19686>>>>>>>>>        Function_Return retVal
19687>>>>>>>>>    End_Function
19688>>>>>>>>>
19688>>>>>>>>>    Procedure Set ComTooltipText String value
19690>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
19691>>>>>>>>>    End_Procedure
19692>>>>>>>>>
19692>>>>>>>>>    Function ComVisible Returns Boolean
19694>>>>>>>>>        Boolean retVal
19694>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
19695>>>>>>>>>        Function_Return retVal
19696>>>>>>>>>    End_Function
19697>>>>>>>>>
19697>>>>>>>>>    Procedure Set ComVisible Boolean value
19699>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
19700>>>>>>>>>    End_Procedure
19701>>>>>>>>>
19701>>>>>>>>>    Function ComEnabled Returns Boolean
19703>>>>>>>>>        Boolean retVal
19703>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
19704>>>>>>>>>        Function_Return retVal
19705>>>>>>>>>    End_Function
19706>>>>>>>>>
19706>>>>>>>>>    Procedure Set ComEnabled Boolean value
19708>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
19709>>>>>>>>>    End_Procedure
19710>>>>>>>>>
19710>>>>>>>>>    Function ComIconId Returns Integer
19712>>>>>>>>>        Integer retVal
19712>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
19713>>>>>>>>>        Function_Return retVal
19714>>>>>>>>>    End_Function
19715>>>>>>>>>
19715>>>>>>>>>    Procedure Set ComIconId Integer value
19717>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
19718>>>>>>>>>    End_Procedure
19719>>>>>>>>>
19719>>>>>>>>>    Function ComDefaultItem Returns Boolean
19721>>>>>>>>>        Boolean retVal
19721>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
19722>>>>>>>>>        Function_Return retVal
19723>>>>>>>>>    End_Function
19724>>>>>>>>>
19724>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
19726>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
19727>>>>>>>>>    End_Procedure
19728>>>>>>>>>
19728>>>>>>>>>    Function ComFlags Returns XTPControlFlags
19730>>>>>>>>>        XTPControlFlags retVal
19730>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
19731>>>>>>>>>        Function_Return retVal
19732>>>>>>>>>    End_Function
19733>>>>>>>>>
19733>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
19735>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
19736>>>>>>>>>    End_Procedure
19737>>>>>>>>>
19737>>>>>>>>>    Function ComCategory Returns String
19739>>>>>>>>>        String retVal
19739>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
19740>>>>>>>>>        Function_Return retVal
19741>>>>>>>>>    End_Function
19742>>>>>>>>>
19742>>>>>>>>>    Procedure Set ComCategory String value
19744>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
19745>>>>>>>>>    End_Procedure
19746>>>>>>>>>
19746>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
19748>>>>>>>>>        XTPControlHideFlags retVal
19748>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
19749>>>>>>>>>        Function_Return retVal
19750>>>>>>>>>    End_Function
19751>>>>>>>>>
19751>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
19753>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
19754>>>>>>>>>    End_Procedure
19755>>>>>>>>>
19755>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
19757>>>>>>>>>        Boolean retVal
19757>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
19758>>>>>>>>>        Function_Return retVal
19759>>>>>>>>>    End_Function
19760>>>>>>>>>
19760>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
19762>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
19763>>>>>>>>>    End_Procedure
19764>>>>>>>>>
19764>>>>>>>>>    Function ComAction Returns Variant
19766>>>>>>>>>        Variant retVal
19766>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
19767>>>>>>>>>        Function_Return retVal
19768>>>>>>>>>    End_Function
19769>>>>>>>>>
19769>>>>>>>>>    Procedure Set ComAction Variant value
19771>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
19772>>>>>>>>>    End_Procedure
19773>>>>>>>>>
19773>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
19775>>>>>>>>>        Integer retVal
19775>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
19776>>>>>>>>>        Function_Return retVal
19777>>>>>>>>>    End_Function
19778>>>>>>>>>
19778>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
19780>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
19781>>>>>>>>>    End_Procedure
19782>>>>>>>>>
19782>>>>>>>>>    Function ComWidth Returns Integer
19784>>>>>>>>>        Integer retVal
19784>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
19785>>>>>>>>>        Function_Return retVal
19786>>>>>>>>>    End_Function
19787>>>>>>>>>
19787>>>>>>>>>    Procedure Set ComWidth Integer value
19789>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
19790>>>>>>>>>    End_Procedure
19791>>>>>>>>>
19791>>>>>>>>>    Function ComHeight Returns Integer
19793>>>>>>>>>        Integer retVal
19793>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
19794>>>>>>>>>        Function_Return retVal
19795>>>>>>>>>    End_Function
19796>>>>>>>>>
19796>>>>>>>>>    Procedure Set ComHeight Integer value
19798>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
19799>>>>>>>>>    End_Procedure
19800>>>>>>>>>
19800>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
19802>>>>>>>>>        XTPButtonStyle retVal
19802>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
19803>>>>>>>>>        Function_Return retVal
19804>>>>>>>>>    End_Function
19805>>>>>>>>>
19805>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
19807>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
19808>>>>>>>>>    End_Procedure
19809>>>>>>>>>
19809>>>>>>>>>    Function ComKeyboardTip Returns String
19811>>>>>>>>>        String retVal
19811>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
19812>>>>>>>>>        Function_Return retVal
19813>>>>>>>>>    End_Function
19814>>>>>>>>>
19814>>>>>>>>>    Procedure Set ComKeyboardTip String value
19816>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
19817>>>>>>>>>    End_Procedure
19818>>>>>>>>>
19818>>>>>>>>>    Function ComCommandBar Returns Variant
19820>>>>>>>>>        Variant retVal
19820>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
19821>>>>>>>>>        Function_Return retVal
19822>>>>>>>>>    End_Function
19823>>>>>>>>>
19823>>>>>>>>>    Procedure Set ComCommandBar Variant value
19825>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
19826>>>>>>>>>    End_Procedure
19827>>>>>>>>>
19827>>>>>>>>>    Function ComDropDownWidth Returns Integer
19829>>>>>>>>>        Integer retVal
19829>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
19830>>>>>>>>>        Function_Return retVal
19831>>>>>>>>>    End_Function
19832>>>>>>>>>
19832>>>>>>>>>    Procedure Set ComDropDownWidth Integer value
19834>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
19835>>>>>>>>>    End_Procedure
19836>>>>>>>>>
19836>>>>>>>>>    Function ComDropDownListStyle Returns Boolean
19838>>>>>>>>>        Boolean retVal
19838>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BOOL to retVal
19839>>>>>>>>>        Function_Return retVal
19840>>>>>>>>>    End_Function
19841>>>>>>>>>
19841>>>>>>>>>    Procedure Set ComDropDownListStyle Boolean value
19843>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BOOL to value
19844>>>>>>>>>    End_Procedure
19845>>>>>>>>>
19845>>>>>>>>>    Function ComListIndex Returns Integer
19847>>>>>>>>>        Integer retVal
19847>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_I4 to retVal
19848>>>>>>>>>        Function_Return retVal
19849>>>>>>>>>    End_Function
19850>>>>>>>>>
19850>>>>>>>>>    Procedure Set ComListIndex Integer value
19852>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_I4 to value
19853>>>>>>>>>    End_Procedure
19854>>>>>>>>>
19854>>>>>>>>>    Function ComText Returns String
19856>>>>>>>>>        String retVal
19856>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 59 OLE_VT_BSTR to retVal
19857>>>>>>>>>        Function_Return retVal
19858>>>>>>>>>    End_Function
19859>>>>>>>>>
19859>>>>>>>>>    Procedure Set ComText String value
19861>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 59 OLE_VT_BSTR to value
19862>>>>>>>>>    End_Procedure
19863>>>>>>>>>
19863>>>>>>>>>    Function ComEditHint Returns String
19865>>>>>>>>>        String retVal
19865>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 67 OLE_VT_BSTR to retVal
19866>>>>>>>>>        Function_Return retVal
19867>>>>>>>>>    End_Function
19868>>>>>>>>>
19868>>>>>>>>>    Procedure Set ComEditHint String value
19870>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 67 OLE_VT_BSTR to value
19871>>>>>>>>>    End_Procedure
19872>>>>>>>>>
19872>>>>>>>>>    Function ComAutoComplete Returns Boolean
19874>>>>>>>>>        Boolean retVal
19874>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 68 OLE_VT_BOOL to retVal
19875>>>>>>>>>        Function_Return retVal
19876>>>>>>>>>    End_Function
19877>>>>>>>>>
19877>>>>>>>>>    Procedure Set ComAutoComplete Boolean value
19879>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 68 OLE_VT_BOOL to value
19880>>>>>>>>>    End_Procedure
19881>>>>>>>>>
19881>>>>>>>>>    Function ComShellAutoComplete Returns XTPShellAutoCompleteFlags
19883>>>>>>>>>        XTPShellAutoCompleteFlags retVal
19883>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_I4 to retVal
19884>>>>>>>>>        Function_Return retVal
19885>>>>>>>>>    End_Function
19886>>>>>>>>>
19886>>>>>>>>>    Procedure Set ComShellAutoComplete XTPShellAutoCompleteFlags value
19888>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_I4 to value
19889>>>>>>>>>    End_Procedure
19890>>>>>>>>>
19890>>>>>>>>>    Function ComEditIconId Returns Integer
19892>>>>>>>>>        Integer retVal
19892>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_I4 to retVal
19893>>>>>>>>>        Function_Return retVal
19894>>>>>>>>>    End_Function
19895>>>>>>>>>
19895>>>>>>>>>    Procedure Set ComEditIconId Integer value
19897>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_I4 to value
19898>>>>>>>>>    End_Procedure
19899>>>>>>>>>
19899>>>>>>>>>    Function ComEditStyle Returns XTPCommandBarEditStyle
19901>>>>>>>>>        XTPCommandBarEditStyle retVal
19901>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_I4 to retVal
19902>>>>>>>>>        Function_Return retVal
19903>>>>>>>>>    End_Function
19904>>>>>>>>>
19904>>>>>>>>>    Procedure Set ComEditStyle XTPCommandBarEditStyle value
19906>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_I4 to value
19907>>>>>>>>>    End_Procedure
19908>>>>>>>>>
19908>>>>>>>>>    Function ComDropDownItemCount Returns Integer
19910>>>>>>>>>        Integer retVal
19910>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 72 OLE_VT_I4 to retVal
19911>>>>>>>>>        Function_Return retVal
19912>>>>>>>>>    End_Function
19913>>>>>>>>>
19913>>>>>>>>>    Procedure Set ComDropDownItemCount Integer value
19915>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 72 OLE_VT_I4 to value
19916>>>>>>>>>    End_Procedure
19917>>>>>>>>>
19917>>>>>>>>>    Function ComThemedItems Returns Boolean
19919>>>>>>>>>        Boolean retVal
19919>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 73 OLE_VT_BOOL to retVal
19920>>>>>>>>>        Function_Return retVal
19921>>>>>>>>>    End_Function
19922>>>>>>>>>
19922>>>>>>>>>    Procedure Set ComThemedItems Boolean value
19924>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 73 OLE_VT_BOOL to value
19925>>>>>>>>>    End_Procedure
19926>>>>>>>>>
19926>>>>>>>>>    Function ComListIconId Returns Integer
19928>>>>>>>>>        Integer retVal
19928>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 74 OLE_VT_I4 to retVal
19929>>>>>>>>>        Function_Return retVal
19930>>>>>>>>>    End_Function
19931>>>>>>>>>
19931>>>>>>>>>    Procedure Set ComListIconId Integer value
19933>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 74 OLE_VT_I4 to value
19934>>>>>>>>>    End_Procedure
19935>>>>>>>>>
19935>>>>>>>>>    Function ComTextLimit Returns Integer
19937>>>>>>>>>        Integer retVal
19937>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 80 OLE_VT_I4 to retVal
19938>>>>>>>>>        Function_Return retVal
19939>>>>>>>>>    End_Function
19940>>>>>>>>>
19940>>>>>>>>>    Procedure Set ComTextLimit Integer value
19942>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 80 OLE_VT_I4 to value
19943>>>>>>>>>    End_Procedure
19944>>>>>>>>>
19944>>>>>>>>>    Function ComControls Returns Variant
19946>>>>>>>>>        Handle hDispatchDriver
19946>>>>>>>>>        Variant retVal
19946>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19947>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
19948>>>>>>>>>        Function_Return retVal
19949>>>>>>>>>    End_Function
19950>>>>>>>>>
19950>>>>>>>>>    Function ComParent Returns Variant
19952>>>>>>>>>        Handle hDispatchDriver
19952>>>>>>>>>        Variant retVal
19952>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19953>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
19954>>>>>>>>>        Function_Return retVal
19955>>>>>>>>>    End_Function
19956>>>>>>>>>
19956>>>>>>>>>    Function ComIndex Returns Integer
19958>>>>>>>>>        Handle hDispatchDriver
19958>>>>>>>>>        Integer retVal
19958>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19959>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
19960>>>>>>>>>        Function_Return retVal
19961>>>>>>>>>    End_Function
19962>>>>>>>>>
19962>>>>>>>>>    Function ComType Returns XTPControlType
19964>>>>>>>>>        Handle hDispatchDriver
19964>>>>>>>>>        XTPControlType retVal
19964>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19965>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
19966>>>>>>>>>        Function_Return retVal
19967>>>>>>>>>    End_Function
19968>>>>>>>>>
19968>>>>>>>>>    Procedure ComDelete
19970>>>>>>>>>        Handle hDispatchDriver
19970>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19971>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
19972>>>>>>>>>    End_Procedure
19973>>>>>>>>>
19973>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
19975>>>>>>>>>        Handle hDispatchDriver
19975>>>>>>>>>        Variant retVal
19975>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19976>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
19977>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
19978>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
19979>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
19980>>>>>>>>>        Function_Return retVal
19981>>>>>>>>>    End_Function
19982>>>>>>>>>
19982>>>>>>>>>    Procedure ComSetFocus
19984>>>>>>>>>        Handle hDispatchDriver
19984>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19985>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
19986>>>>>>>>>    End_Procedure
19987>>>>>>>>>
19987>>>>>>>>>    Procedure ComExecute
19989>>>>>>>>>        Handle hDispatchDriver
19989>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19990>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
19991>>>>>>>>>    End_Procedure
19992>>>>>>>>>
19992>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
19994>>>>>>>>>        Handle hDispatchDriver
19994>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19995>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
19996>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
19997>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
19998>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
19999>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
20000>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
20001>>>>>>>>>    End_Procedure
20002>>>>>>>>>
20002>>>>>>>>>    Function ComRibbonGroup Returns Variant
20004>>>>>>>>>        Handle hDispatchDriver
20004>>>>>>>>>        Variant retVal
20004>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20005>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
20006>>>>>>>>>        Function_Return retVal
20007>>>>>>>>>    End_Function
20008>>>>>>>>>
20008>>>>>>>>>    Procedure ComReset
20010>>>>>>>>>        Handle hDispatchDriver
20010>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20011>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
20012>>>>>>>>>    End_Procedure
20013>>>>>>>>>
20013>>>>>>>>>    Function ComTop Returns Integer
20015>>>>>>>>>        Handle hDispatchDriver
20015>>>>>>>>>        Integer retVal
20015>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20016>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
20017>>>>>>>>>        Function_Return retVal
20018>>>>>>>>>    End_Function
20019>>>>>>>>>
20019>>>>>>>>>    Function ComLeft Returns Integer
20021>>>>>>>>>        Handle hDispatchDriver
20021>>>>>>>>>        Integer retVal
20021>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20022>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
20023>>>>>>>>>        Function_Return retVal
20024>>>>>>>>>    End_Function
20025>>>>>>>>>
20025>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
20027>>>>>>>>>        Handle hDispatchDriver
20027>>>>>>>>>        Variant retVal
20027>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20028>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20029>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
20030>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
20031>>>>>>>>>        Function_Return retVal
20032>>>>>>>>>    End_Function
20033>>>>>>>>>
20033>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
20035>>>>>>>>>        Handle hDispatchDriver
20035>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20036>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20037>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
20038>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
20039>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
20040>>>>>>>>>    End_Procedure
20041>>>>>>>>>
20041>>>>>>>>>    Procedure ComAddItem String llText Variant llIndex
20043>>>>>>>>>        Handle hDispatchDriver
20043>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20044>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20045>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
20046>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llIndex
20047>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 51 OLE_VT_VOID
20048>>>>>>>>>    End_Procedure
20049>>>>>>>>>
20049>>>>>>>>>    Function ComList Integer llIndex Returns String
20051>>>>>>>>>        Handle hDispatchDriver
20051>>>>>>>>>        String retVal
20051>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20052>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20053>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
20054>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 55 OLE_VT_BSTR to retVal
20055>>>>>>>>>        Function_Return retVal
20056>>>>>>>>>    End_Function
20057>>>>>>>>>
20057>>>>>>>>>    Procedure ComClear
20059>>>>>>>>>        Handle hDispatchDriver
20059>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20060>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 56 OLE_VT_VOID
20061>>>>>>>>>    End_Procedure
20062>>>>>>>>>
20062>>>>>>>>>    Function ComListCount Returns Integer
20064>>>>>>>>>        Handle hDispatchDriver
20064>>>>>>>>>        Integer retVal
20064>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20065>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 57 OLE_VT_I4 to retVal
20066>>>>>>>>>        Function_Return retVal
20067>>>>>>>>>    End_Function
20068>>>>>>>>>
20068>>>>>>>>>    Procedure ComRemoveItem Integer llnIndex
20070>>>>>>>>>        Handle hDispatchDriver
20070>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20071>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20072>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIndex
20073>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 58 OLE_VT_VOID
20074>>>>>>>>>    End_Procedure
20075>>>>>>>>>
20075>>>>>>>>>    Function ComFindItem String llText Returns Integer
20077>>>>>>>>>        Handle hDispatchDriver
20077>>>>>>>>>        Integer retVal
20077>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20078>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20079>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
20080>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 61 OLE_VT_I4 to retVal
20081>>>>>>>>>        Function_Return retVal
20082>>>>>>>>>    End_Function
20083>>>>>>>>>
20083>>>>>>>>>    Function ComItemData Integer llIndex Returns Integer
20085>>>>>>>>>        Handle hDispatchDriver
20085>>>>>>>>>        Integer retVal
20085>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20086>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20087>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
20088>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 62 OLE_VT_I4 to retVal
20089>>>>>>>>>        Function_Return retVal
20090>>>>>>>>>    End_Function
20091>>>>>>>>>
20091>>>>>>>>>    Procedure Set ComItemData Integer llIndex Integer value
20093>>>>>>>>>        Handle hDispatchDriver
20093>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20094>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20095>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
20096>>>>>>>>>        Set ComProperty of hDispatchDriver 62 OLE_VT_I4 to value
20097>>>>>>>>>    End_Procedure
20098>>>>>>>>>
20098>>>>>>>>>    Function ComEditHandle Returns OLE_HANDLE
20100>>>>>>>>>        Handle hDispatchDriver
20100>>>>>>>>>        OLE_HANDLE retVal
20100>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20101>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 63 OLE_VT_I4 to retVal
20102>>>>>>>>>        Function_Return retVal
20103>>>>>>>>>    End_Function
20104>>>>>>>>>
20104>>>>>>>>>    Function ComHasFocus Returns Boolean
20106>>>>>>>>>        Handle hDispatchDriver
20106>>>>>>>>>        Boolean retVal
20106>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20107>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 66 OLE_VT_BOOL to retVal
20108>>>>>>>>>        Function_Return retVal
20109>>>>>>>>>    End_Function
20110>>>>>>>>>End_Class
20111>>>>>>>>>
20111>>>>>>>>>// CoClass
20111>>>>>>>>>// CLSID: {C0DE2200-B90A-44F8-86C2-B28D4540ABFA}
20111>>>>>>>>>Class cCJCommandBarComboBox is a cComAutomationObject
20112>>>>>>>>>    Import_Class_Protocol cCJICommandBarComboBox
20113>>>>>>>>>
20113>>>>>>>>>    Procedure Construct_Object
20115>>>>>>>>>        Forward Send Construct_Object
20117>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
20118>>>>>>>>>    End_Procedure
20119>>>>>>>>>End_Class
20120>>>>>>>>>
20120>>>>>>>>>// CLSID: {C0DE2200-5C60-475B-A774-4B22FAC0B9EC}
20120>>>>>>>>>Class cCJICommandBarCheckBox is a Mixin
20121>>>>>>>>>
20121>>>>>>>>>    Function ComChecked Returns Integer
20123>>>>>>>>>        Integer retVal
20123>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_I4 to retVal
20124>>>>>>>>>        Function_Return retVal
20125>>>>>>>>>    End_Function
20126>>>>>>>>>
20126>>>>>>>>>    Procedure Set ComChecked Integer value
20128>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_I4 to value
20129>>>>>>>>>    End_Procedure
20130>>>>>>>>>
20130>>>>>>>>>    Function ComBeginGroup Returns Boolean
20132>>>>>>>>>        Boolean retVal
20132>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
20133>>>>>>>>>        Function_Return retVal
20134>>>>>>>>>    End_Function
20135>>>>>>>>>
20135>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
20137>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
20138>>>>>>>>>    End_Procedure
20139>>>>>>>>>
20139>>>>>>>>>    Function ComCaption Returns String
20141>>>>>>>>>        String retVal
20141>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
20142>>>>>>>>>        Function_Return retVal
20143>>>>>>>>>    End_Function
20144>>>>>>>>>
20144>>>>>>>>>    Procedure Set ComCaption String value
20146>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
20147>>>>>>>>>    End_Procedure
20148>>>>>>>>>
20148>>>>>>>>>    Function ComDescriptionText Returns String
20150>>>>>>>>>        String retVal
20150>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
20151>>>>>>>>>        Function_Return retVal
20152>>>>>>>>>    End_Function
20153>>>>>>>>>
20153>>>>>>>>>    Procedure Set ComDescriptionText String value
20155>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
20156>>>>>>>>>    End_Procedure
20157>>>>>>>>>
20157>>>>>>>>>    Function ComId Returns Integer
20159>>>>>>>>>        Integer retVal
20159>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
20160>>>>>>>>>        Function_Return retVal
20161>>>>>>>>>    End_Function
20162>>>>>>>>>
20162>>>>>>>>>    Procedure Set ComId Integer value
20164>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
20165>>>>>>>>>    End_Procedure
20166>>>>>>>>>
20166>>>>>>>>>    Function ComParameter Returns String
20168>>>>>>>>>        String retVal
20168>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
20169>>>>>>>>>        Function_Return retVal
20170>>>>>>>>>    End_Function
20171>>>>>>>>>
20171>>>>>>>>>    Procedure Set ComParameter String value
20173>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
20174>>>>>>>>>    End_Procedure
20175>>>>>>>>>
20175>>>>>>>>>    Function ComShortcutText Returns String
20177>>>>>>>>>        String retVal
20177>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
20178>>>>>>>>>        Function_Return retVal
20179>>>>>>>>>    End_Function
20180>>>>>>>>>
20180>>>>>>>>>    Procedure Set ComShortcutText String value
20182>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
20183>>>>>>>>>    End_Procedure
20184>>>>>>>>>
20184>>>>>>>>>    Function ComCustomShortcutText Returns String
20186>>>>>>>>>        String retVal
20186>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
20187>>>>>>>>>        Function_Return retVal
20188>>>>>>>>>    End_Function
20189>>>>>>>>>
20189>>>>>>>>>    Procedure Set ComCustomShortcutText String value
20191>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
20192>>>>>>>>>    End_Procedure
20193>>>>>>>>>
20193>>>>>>>>>    Function ComTooltipText Returns String
20195>>>>>>>>>        String retVal
20195>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
20196>>>>>>>>>        Function_Return retVal
20197>>>>>>>>>    End_Function
20198>>>>>>>>>
20198>>>>>>>>>    Procedure Set ComTooltipText String value
20200>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
20201>>>>>>>>>    End_Procedure
20202>>>>>>>>>
20202>>>>>>>>>    Function ComVisible Returns Boolean
20204>>>>>>>>>        Boolean retVal
20204>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
20205>>>>>>>>>        Function_Return retVal
20206>>>>>>>>>    End_Function
20207>>>>>>>>>
20207>>>>>>>>>    Procedure Set ComVisible Boolean value
20209>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
20210>>>>>>>>>    End_Procedure
20211>>>>>>>>>
20211>>>>>>>>>    Function ComEnabled Returns Boolean
20213>>>>>>>>>        Boolean retVal
20213>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
20214>>>>>>>>>        Function_Return retVal
20215>>>>>>>>>    End_Function
20216>>>>>>>>>
20216>>>>>>>>>    Procedure Set ComEnabled Boolean value
20218>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
20219>>>>>>>>>    End_Procedure
20220>>>>>>>>>
20220>>>>>>>>>    Function ComIconId Returns Integer
20222>>>>>>>>>        Integer retVal
20222>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
20223>>>>>>>>>        Function_Return retVal
20224>>>>>>>>>    End_Function
20225>>>>>>>>>
20225>>>>>>>>>    Procedure Set ComIconId Integer value
20227>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
20228>>>>>>>>>    End_Procedure
20229>>>>>>>>>
20229>>>>>>>>>    Function ComDefaultItem Returns Boolean
20231>>>>>>>>>        Boolean retVal
20231>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
20232>>>>>>>>>        Function_Return retVal
20233>>>>>>>>>    End_Function
20234>>>>>>>>>
20234>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
20236>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
20237>>>>>>>>>    End_Procedure
20238>>>>>>>>>
20238>>>>>>>>>    Function ComFlags Returns XTPControlFlags
20240>>>>>>>>>        XTPControlFlags retVal
20240>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
20241>>>>>>>>>        Function_Return retVal
20242>>>>>>>>>    End_Function
20243>>>>>>>>>
20243>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
20245>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
20246>>>>>>>>>    End_Procedure
20247>>>>>>>>>
20247>>>>>>>>>    Function ComCategory Returns String
20249>>>>>>>>>        String retVal
20249>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
20250>>>>>>>>>        Function_Return retVal
20251>>>>>>>>>    End_Function
20252>>>>>>>>>
20252>>>>>>>>>    Procedure Set ComCategory String value
20254>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
20255>>>>>>>>>    End_Procedure
20256>>>>>>>>>
20256>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
20258>>>>>>>>>        XTPControlHideFlags retVal
20258>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
20259>>>>>>>>>        Function_Return retVal
20260>>>>>>>>>    End_Function
20261>>>>>>>>>
20261>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
20263>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
20264>>>>>>>>>    End_Procedure
20265>>>>>>>>>
20265>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
20267>>>>>>>>>        Boolean retVal
20267>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
20268>>>>>>>>>        Function_Return retVal
20269>>>>>>>>>    End_Function
20270>>>>>>>>>
20270>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
20272>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
20273>>>>>>>>>    End_Procedure
20274>>>>>>>>>
20274>>>>>>>>>    Function ComAction Returns Variant
20276>>>>>>>>>        Variant retVal
20276>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
20277>>>>>>>>>        Function_Return retVal
20278>>>>>>>>>    End_Function
20279>>>>>>>>>
20279>>>>>>>>>    Procedure Set ComAction Variant value
20281>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
20282>>>>>>>>>    End_Procedure
20283>>>>>>>>>
20283>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
20285>>>>>>>>>        Integer retVal
20285>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
20286>>>>>>>>>        Function_Return retVal
20287>>>>>>>>>    End_Function
20288>>>>>>>>>
20288>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
20290>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
20291>>>>>>>>>    End_Procedure
20292>>>>>>>>>
20292>>>>>>>>>    Function ComWidth Returns Integer
20294>>>>>>>>>        Integer retVal
20294>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
20295>>>>>>>>>        Function_Return retVal
20296>>>>>>>>>    End_Function
20297>>>>>>>>>
20297>>>>>>>>>    Procedure Set ComWidth Integer value
20299>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
20300>>>>>>>>>    End_Procedure
20301>>>>>>>>>
20301>>>>>>>>>    Function ComHeight Returns Integer
20303>>>>>>>>>        Integer retVal
20303>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
20304>>>>>>>>>        Function_Return retVal
20305>>>>>>>>>    End_Function
20306>>>>>>>>>
20306>>>>>>>>>    Procedure Set ComHeight Integer value
20308>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
20309>>>>>>>>>    End_Procedure
20310>>>>>>>>>
20310>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
20312>>>>>>>>>        XTPButtonStyle retVal
20312>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
20313>>>>>>>>>        Function_Return retVal
20314>>>>>>>>>    End_Function
20315>>>>>>>>>
20315>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
20317>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
20318>>>>>>>>>    End_Procedure
20319>>>>>>>>>
20319>>>>>>>>>    Function ComKeyboardTip Returns String
20321>>>>>>>>>        String retVal
20321>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
20322>>>>>>>>>        Function_Return retVal
20323>>>>>>>>>    End_Function
20324>>>>>>>>>
20324>>>>>>>>>    Procedure Set ComKeyboardTip String value
20326>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
20327>>>>>>>>>    End_Procedure
20328>>>>>>>>>
20328>>>>>>>>>    Function ComControls Returns Variant
20330>>>>>>>>>        Handle hDispatchDriver
20330>>>>>>>>>        Variant retVal
20330>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20331>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
20332>>>>>>>>>        Function_Return retVal
20333>>>>>>>>>    End_Function
20334>>>>>>>>>
20334>>>>>>>>>    Function ComParent Returns Variant
20336>>>>>>>>>        Handle hDispatchDriver
20336>>>>>>>>>        Variant retVal
20336>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20337>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
20338>>>>>>>>>        Function_Return retVal
20339>>>>>>>>>    End_Function
20340>>>>>>>>>
20340>>>>>>>>>    Function ComIndex Returns Integer
20342>>>>>>>>>        Handle hDispatchDriver
20342>>>>>>>>>        Integer retVal
20342>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20343>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
20344>>>>>>>>>        Function_Return retVal
20345>>>>>>>>>    End_Function
20346>>>>>>>>>
20346>>>>>>>>>    Function ComType Returns XTPControlType
20348>>>>>>>>>        Handle hDispatchDriver
20348>>>>>>>>>        XTPControlType retVal
20348>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20349>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
20350>>>>>>>>>        Function_Return retVal
20351>>>>>>>>>    End_Function
20352>>>>>>>>>
20352>>>>>>>>>    Procedure ComDelete
20354>>>>>>>>>        Handle hDispatchDriver
20354>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20355>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
20356>>>>>>>>>    End_Procedure
20357>>>>>>>>>
20357>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
20359>>>>>>>>>        Handle hDispatchDriver
20359>>>>>>>>>        Variant retVal
20359>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20360>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20361>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
20362>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
20363>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
20364>>>>>>>>>        Function_Return retVal
20365>>>>>>>>>    End_Function
20366>>>>>>>>>
20366>>>>>>>>>    Procedure ComSetFocus
20368>>>>>>>>>        Handle hDispatchDriver
20368>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20369>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
20370>>>>>>>>>    End_Procedure
20371>>>>>>>>>
20371>>>>>>>>>    Procedure ComExecute
20373>>>>>>>>>        Handle hDispatchDriver
20373>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20374>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
20375>>>>>>>>>    End_Procedure
20376>>>>>>>>>
20376>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
20378>>>>>>>>>        Handle hDispatchDriver
20378>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20379>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
20380>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
20381>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
20382>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
20383>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
20384>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
20385>>>>>>>>>    End_Procedure
20386>>>>>>>>>
20386>>>>>>>>>    Function ComRibbonGroup Returns Variant
20388>>>>>>>>>        Handle hDispatchDriver
20388>>>>>>>>>        Variant retVal
20388>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20389>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
20390>>>>>>>>>        Function_Return retVal
20391>>>>>>>>>    End_Function
20392>>>>>>>>>
20392>>>>>>>>>    Procedure ComReset
20394>>>>>>>>>        Handle hDispatchDriver
20394>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20395>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
20396>>>>>>>>>    End_Procedure
20397>>>>>>>>>
20397>>>>>>>>>    Function ComTop Returns Integer
20399>>>>>>>>>        Handle hDispatchDriver
20399>>>>>>>>>        Integer retVal
20399>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20400>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
20401>>>>>>>>>        Function_Return retVal
20402>>>>>>>>>    End_Function
20403>>>>>>>>>
20403>>>>>>>>>    Function ComLeft Returns Integer
20405>>>>>>>>>        Handle hDispatchDriver
20405>>>>>>>>>        Integer retVal
20405>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20406>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
20407>>>>>>>>>        Function_Return retVal
20408>>>>>>>>>    End_Function
20409>>>>>>>>>
20409>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
20411>>>>>>>>>        Handle hDispatchDriver
20411>>>>>>>>>        Variant retVal
20411>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20412>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20413>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
20414>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
20415>>>>>>>>>        Function_Return retVal
20416>>>>>>>>>    End_Function
20417>>>>>>>>>
20417>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
20419>>>>>>>>>        Handle hDispatchDriver
20419>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20420>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20421>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
20422>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
20423>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
20424>>>>>>>>>    End_Procedure
20425>>>>>>>>>End_Class
20426>>>>>>>>>
20426>>>>>>>>>// CoClass
20426>>>>>>>>>// CLSID: {C0DE2200-6975-465C-B19C-FFA0021AAA05}
20426>>>>>>>>>Class cCJCommandBarCheckBox is a cComAutomationObject
20427>>>>>>>>>    Import_Class_Protocol cCJICommandBarCheckBox
20428>>>>>>>>>
20428>>>>>>>>>    Procedure Construct_Object
20430>>>>>>>>>        Forward Send Construct_Object
20432>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
20433>>>>>>>>>    End_Procedure
20434>>>>>>>>>End_Class
20435>>>>>>>>>
20435>>>>>>>>>// CLSID: {C0DE2200-7A03-46D9-B095-9FB1F825530D}
20435>>>>>>>>>Class cCJICommandBarEdit is a Mixin
20436>>>>>>>>>
20436>>>>>>>>>    Function ComChecked Returns Boolean
20438>>>>>>>>>        Boolean retVal
20438>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
20439>>>>>>>>>        Function_Return retVal
20440>>>>>>>>>    End_Function
20441>>>>>>>>>
20441>>>>>>>>>    Procedure Set ComChecked Boolean value
20443>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
20444>>>>>>>>>    End_Procedure
20445>>>>>>>>>
20445>>>>>>>>>    Function ComBeginGroup Returns Boolean
20447>>>>>>>>>        Boolean retVal
20447>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
20448>>>>>>>>>        Function_Return retVal
20449>>>>>>>>>    End_Function
20450>>>>>>>>>
20450>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
20452>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
20453>>>>>>>>>    End_Procedure
20454>>>>>>>>>
20454>>>>>>>>>    Function ComCaption Returns String
20456>>>>>>>>>        String retVal
20456>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
20457>>>>>>>>>        Function_Return retVal
20458>>>>>>>>>    End_Function
20459>>>>>>>>>
20459>>>>>>>>>    Procedure Set ComCaption String value
20461>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
20462>>>>>>>>>    End_Procedure
20463>>>>>>>>>
20463>>>>>>>>>    Function ComDescriptionText Returns String
20465>>>>>>>>>        String retVal
20465>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
20466>>>>>>>>>        Function_Return retVal
20467>>>>>>>>>    End_Function
20468>>>>>>>>>
20468>>>>>>>>>    Procedure Set ComDescriptionText String value
20470>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
20471>>>>>>>>>    End_Procedure
20472>>>>>>>>>
20472>>>>>>>>>    Function ComId Returns Integer
20474>>>>>>>>>        Integer retVal
20474>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
20475>>>>>>>>>        Function_Return retVal
20476>>>>>>>>>    End_Function
20477>>>>>>>>>
20477>>>>>>>>>    Procedure Set ComId Integer value
20479>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
20480>>>>>>>>>    End_Procedure
20481>>>>>>>>>
20481>>>>>>>>>    Function ComParameter Returns String
20483>>>>>>>>>        String retVal
20483>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
20484>>>>>>>>>        Function_Return retVal
20485>>>>>>>>>    End_Function
20486>>>>>>>>>
20486>>>>>>>>>    Procedure Set ComParameter String value
20488>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
20489>>>>>>>>>    End_Procedure
20490>>>>>>>>>
20490>>>>>>>>>    Function ComShortcutText Returns String
20492>>>>>>>>>        String retVal
20492>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
20493>>>>>>>>>        Function_Return retVal
20494>>>>>>>>>    End_Function
20495>>>>>>>>>
20495>>>>>>>>>    Procedure Set ComShortcutText String value
20497>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
20498>>>>>>>>>    End_Procedure
20499>>>>>>>>>
20499>>>>>>>>>    Function ComCustomShortcutText Returns String
20501>>>>>>>>>        String retVal
20501>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
20502>>>>>>>>>        Function_Return retVal
20503>>>>>>>>>    End_Function
20504>>>>>>>>>
20504>>>>>>>>>    Procedure Set ComCustomShortcutText String value
20506>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
20507>>>>>>>>>    End_Procedure
20508>>>>>>>>>
20508>>>>>>>>>    Function ComTooltipText Returns String
20510>>>>>>>>>        String retVal
20510>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
20511>>>>>>>>>        Function_Return retVal
20512>>>>>>>>>    End_Function
20513>>>>>>>>>
20513>>>>>>>>>    Procedure Set ComTooltipText String value
20515>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
20516>>>>>>>>>    End_Procedure
20517>>>>>>>>>
20517>>>>>>>>>    Function ComVisible Returns Boolean
20519>>>>>>>>>        Boolean retVal
20519>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
20520>>>>>>>>>        Function_Return retVal
20521>>>>>>>>>    End_Function
20522>>>>>>>>>
20522>>>>>>>>>    Procedure Set ComVisible Boolean value
20524>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
20525>>>>>>>>>    End_Procedure
20526>>>>>>>>>
20526>>>>>>>>>    Function ComEnabled Returns Boolean
20528>>>>>>>>>        Boolean retVal
20528>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
20529>>>>>>>>>        Function_Return retVal
20530>>>>>>>>>    End_Function
20531>>>>>>>>>
20531>>>>>>>>>    Procedure Set ComEnabled Boolean value
20533>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
20534>>>>>>>>>    End_Procedure
20535>>>>>>>>>
20535>>>>>>>>>    Function ComIconId Returns Integer
20537>>>>>>>>>        Integer retVal
20537>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
20538>>>>>>>>>        Function_Return retVal
20539>>>>>>>>>    End_Function
20540>>>>>>>>>
20540>>>>>>>>>    Procedure Set ComIconId Integer value
20542>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
20543>>>>>>>>>    End_Procedure
20544>>>>>>>>>
20544>>>>>>>>>    Function ComDefaultItem Returns Boolean
20546>>>>>>>>>        Boolean retVal
20546>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
20547>>>>>>>>>        Function_Return retVal
20548>>>>>>>>>    End_Function
20549>>>>>>>>>
20549>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
20551>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
20552>>>>>>>>>    End_Procedure
20553>>>>>>>>>
20553>>>>>>>>>    Function ComFlags Returns XTPControlFlags
20555>>>>>>>>>        XTPControlFlags retVal
20555>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
20556>>>>>>>>>        Function_Return retVal
20557>>>>>>>>>    End_Function
20558>>>>>>>>>
20558>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
20560>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
20561>>>>>>>>>    End_Procedure
20562>>>>>>>>>
20562>>>>>>>>>    Function ComCategory Returns String
20564>>>>>>>>>        String retVal
20564>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
20565>>>>>>>>>        Function_Return retVal
20566>>>>>>>>>    End_Function
20567>>>>>>>>>
20567>>>>>>>>>    Procedure Set ComCategory String value
20569>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
20570>>>>>>>>>    End_Procedure
20571>>>>>>>>>
20571>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
20573>>>>>>>>>        XTPControlHideFlags retVal
20573>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
20574>>>>>>>>>        Function_Return retVal
20575>>>>>>>>>    End_Function
20576>>>>>>>>>
20576>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
20578>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
20579>>>>>>>>>    End_Procedure
20580>>>>>>>>>
20580>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
20582>>>>>>>>>        Boolean retVal
20582>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
20583>>>>>>>>>        Function_Return retVal
20584>>>>>>>>>    End_Function
20585>>>>>>>>>
20585>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
20587>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
20588>>>>>>>>>    End_Procedure
20589>>>>>>>>>
20589>>>>>>>>>    Function ComAction Returns Variant
20591>>>>>>>>>        Variant retVal
20591>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
20592>>>>>>>>>        Function_Return retVal
20593>>>>>>>>>    End_Function
20594>>>>>>>>>
20594>>>>>>>>>    Procedure Set ComAction Variant value
20596>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
20597>>>>>>>>>    End_Procedure
20598>>>>>>>>>
20598>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
20600>>>>>>>>>        Integer retVal
20600>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
20601>>>>>>>>>        Function_Return retVal
20602>>>>>>>>>    End_Function
20603>>>>>>>>>
20603>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
20605>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
20606>>>>>>>>>    End_Procedure
20607>>>>>>>>>
20607>>>>>>>>>    Function ComWidth Returns Integer
20609>>>>>>>>>        Integer retVal
20609>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
20610>>>>>>>>>        Function_Return retVal
20611>>>>>>>>>    End_Function
20612>>>>>>>>>
20612>>>>>>>>>    Procedure Set ComWidth Integer value
20614>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
20615>>>>>>>>>    End_Procedure
20616>>>>>>>>>
20616>>>>>>>>>    Function ComHeight Returns Integer
20618>>>>>>>>>        Integer retVal
20618>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
20619>>>>>>>>>        Function_Return retVal
20620>>>>>>>>>    End_Function
20621>>>>>>>>>
20621>>>>>>>>>    Procedure Set ComHeight Integer value
20623>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
20624>>>>>>>>>    End_Procedure
20625>>>>>>>>>
20625>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
20627>>>>>>>>>        XTPButtonStyle retVal
20627>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
20628>>>>>>>>>        Function_Return retVal
20629>>>>>>>>>    End_Function
20630>>>>>>>>>
20630>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
20632>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
20633>>>>>>>>>    End_Procedure
20634>>>>>>>>>
20634>>>>>>>>>    Function ComKeyboardTip Returns String
20636>>>>>>>>>        String retVal
20636>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
20637>>>>>>>>>        Function_Return retVal
20638>>>>>>>>>    End_Function
20639>>>>>>>>>
20639>>>>>>>>>    Procedure Set ComKeyboardTip String value
20641>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
20642>>>>>>>>>    End_Procedure
20643>>>>>>>>>
20643>>>>>>>>>    Function ComShowLabel Returns Boolean
20645>>>>>>>>>        Boolean retVal
20645>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_BOOL to retVal
20646>>>>>>>>>        Function_Return retVal
20647>>>>>>>>>    End_Function
20648>>>>>>>>>
20648>>>>>>>>>    Procedure Set ComShowLabel Boolean value
20650>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_BOOL to value
20651>>>>>>>>>    End_Procedure
20652>>>>>>>>>
20652>>>>>>>>>    Function ComText Returns String
20654>>>>>>>>>        String retVal
20654>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 59 OLE_VT_BSTR to retVal
20655>>>>>>>>>        Function_Return retVal
20656>>>>>>>>>    End_Function
20657>>>>>>>>>
20657>>>>>>>>>    Procedure Set ComText String value
20659>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 59 OLE_VT_BSTR to value
20660>>>>>>>>>    End_Procedure
20661>>>>>>>>>
20661>>>>>>>>>    Function ComReadOnly Returns Boolean
20663>>>>>>>>>        Boolean retVal
20663>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_BOOL to retVal
20664>>>>>>>>>        Function_Return retVal
20665>>>>>>>>>    End_Function
20666>>>>>>>>>
20666>>>>>>>>>    Procedure Set ComReadOnly Boolean value
20668>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_BOOL to value
20669>>>>>>>>>    End_Procedure
20670>>>>>>>>>
20670>>>>>>>>>    Function ComEditHint Returns String
20672>>>>>>>>>        String retVal
20672>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 67 OLE_VT_BSTR to retVal
20673>>>>>>>>>        Function_Return retVal
20674>>>>>>>>>    End_Function
20675>>>>>>>>>
20675>>>>>>>>>    Procedure Set ComEditHint String value
20677>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 67 OLE_VT_BSTR to value
20678>>>>>>>>>    End_Procedure
20679>>>>>>>>>
20679>>>>>>>>>    Function ComShellAutoComplete Returns XTPShellAutoCompleteFlags
20681>>>>>>>>>        XTPShellAutoCompleteFlags retVal
20681>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_I4 to retVal
20682>>>>>>>>>        Function_Return retVal
20683>>>>>>>>>    End_Function
20684>>>>>>>>>
20684>>>>>>>>>    Procedure Set ComShellAutoComplete XTPShellAutoCompleteFlags value
20686>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_I4 to value
20687>>>>>>>>>    End_Procedure
20688>>>>>>>>>
20688>>>>>>>>>    Function ComEditIconId Returns Integer
20690>>>>>>>>>        Integer retVal
20690>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_I4 to retVal
20691>>>>>>>>>        Function_Return retVal
20692>>>>>>>>>    End_Function
20693>>>>>>>>>
20693>>>>>>>>>    Procedure Set ComEditIconId Integer value
20695>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_I4 to value
20696>>>>>>>>>    End_Procedure
20697>>>>>>>>>
20697>>>>>>>>>    Function ComEditStyle Returns XTPCommandBarEditStyle
20699>>>>>>>>>        XTPCommandBarEditStyle retVal
20699>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_I4 to retVal
20700>>>>>>>>>        Function_Return retVal
20701>>>>>>>>>    End_Function
20702>>>>>>>>>
20702>>>>>>>>>    Procedure Set ComEditStyle XTPCommandBarEditStyle value
20704>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_I4 to value
20705>>>>>>>>>    End_Procedure
20706>>>>>>>>>
20706>>>>>>>>>    Function ComShowSpinButtons Returns Boolean
20708>>>>>>>>>        Boolean retVal
20708>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 72 OLE_VT_BOOL to retVal
20709>>>>>>>>>        Function_Return retVal
20710>>>>>>>>>    End_Function
20711>>>>>>>>>
20711>>>>>>>>>    Procedure Set ComShowSpinButtons Boolean value
20713>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 72 OLE_VT_BOOL to value
20714>>>>>>>>>    End_Procedure
20715>>>>>>>>>
20715>>>>>>>>>    Function ComBuddyButtonId Returns Integer
20717>>>>>>>>>        Integer retVal
20717>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 81 OLE_VT_I4 to retVal
20718>>>>>>>>>        Function_Return retVal
20719>>>>>>>>>    End_Function
20720>>>>>>>>>
20720>>>>>>>>>    Procedure Set ComBuddyButtonId Integer value
20722>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 81 OLE_VT_I4 to value
20723>>>>>>>>>    End_Procedure
20724>>>>>>>>>
20724>>>>>>>>>    Function ComTextLimit Returns Integer
20726>>>>>>>>>        Integer retVal
20726>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 80 OLE_VT_I4 to retVal
20727>>>>>>>>>        Function_Return retVal
20728>>>>>>>>>    End_Function
20729>>>>>>>>>
20729>>>>>>>>>    Procedure Set ComTextLimit Integer value
20731>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 80 OLE_VT_I4 to value
20732>>>>>>>>>    End_Procedure
20733>>>>>>>>>
20733>>>>>>>>>    Function ComNumericOnly Returns Boolean
20735>>>>>>>>>        Boolean retVal
20735>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 82 OLE_VT_BOOL to retVal
20736>>>>>>>>>        Function_Return retVal
20737>>>>>>>>>    End_Function
20738>>>>>>>>>
20738>>>>>>>>>    Procedure Set ComNumericOnly Boolean value
20740>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 82 OLE_VT_BOOL to value
20741>>>>>>>>>    End_Procedure
20742>>>>>>>>>
20742>>>>>>>>>    Function ComControls Returns Variant
20744>>>>>>>>>        Handle hDispatchDriver
20744>>>>>>>>>        Variant retVal
20744>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20745>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
20746>>>>>>>>>        Function_Return retVal
20747>>>>>>>>>    End_Function
20748>>>>>>>>>
20748>>>>>>>>>    Function ComParent Returns Variant
20750>>>>>>>>>        Handle hDispatchDriver
20750>>>>>>>>>        Variant retVal
20750>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20751>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
20752>>>>>>>>>        Function_Return retVal
20753>>>>>>>>>    End_Function
20754>>>>>>>>>
20754>>>>>>>>>    Function ComIndex Returns Integer
20756>>>>>>>>>        Handle hDispatchDriver
20756>>>>>>>>>        Integer retVal
20756>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20757>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
20758>>>>>>>>>        Function_Return retVal
20759>>>>>>>>>    End_Function
20760>>>>>>>>>
20760>>>>>>>>>    Function ComType Returns XTPControlType
20762>>>>>>>>>        Handle hDispatchDriver
20762>>>>>>>>>        XTPControlType retVal
20762>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20763>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
20764>>>>>>>>>        Function_Return retVal
20765>>>>>>>>>    End_Function
20766>>>>>>>>>
20766>>>>>>>>>    Procedure ComDelete
20768>>>>>>>>>        Handle hDispatchDriver
20768>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20769>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
20770>>>>>>>>>    End_Procedure
20771>>>>>>>>>
20771>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
20773>>>>>>>>>        Handle hDispatchDriver
20773>>>>>>>>>        Variant retVal
20773>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20774>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20775>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
20776>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
20777>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
20778>>>>>>>>>        Function_Return retVal
20779>>>>>>>>>    End_Function
20780>>>>>>>>>
20780>>>>>>>>>    Procedure ComSetFocus
20782>>>>>>>>>        Handle hDispatchDriver
20782>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20783>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
20784>>>>>>>>>    End_Procedure
20785>>>>>>>>>
20785>>>>>>>>>    Procedure ComExecute
20787>>>>>>>>>        Handle hDispatchDriver
20787>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20788>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
20789>>>>>>>>>    End_Procedure
20790>>>>>>>>>
20790>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
20792>>>>>>>>>        Handle hDispatchDriver
20792>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20793>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
20794>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
20795>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
20796>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
20797>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
20798>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
20799>>>>>>>>>    End_Procedure
20800>>>>>>>>>
20800>>>>>>>>>    Function ComRibbonGroup Returns Variant
20802>>>>>>>>>        Handle hDispatchDriver
20802>>>>>>>>>        Variant retVal
20802>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20803>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
20804>>>>>>>>>        Function_Return retVal
20805>>>>>>>>>    End_Function
20806>>>>>>>>>
20806>>>>>>>>>    Procedure ComReset
20808>>>>>>>>>        Handle hDispatchDriver
20808>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20809>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
20810>>>>>>>>>    End_Procedure
20811>>>>>>>>>
20811>>>>>>>>>    Function ComTop Returns Integer
20813>>>>>>>>>        Handle hDispatchDriver
20813>>>>>>>>>        Integer retVal
20813>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20814>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
20815>>>>>>>>>        Function_Return retVal
20816>>>>>>>>>    End_Function
20817>>>>>>>>>
20817>>>>>>>>>    Function ComLeft Returns Integer
20819>>>>>>>>>        Handle hDispatchDriver
20819>>>>>>>>>        Integer retVal
20819>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20820>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
20821>>>>>>>>>        Function_Return retVal
20822>>>>>>>>>    End_Function
20823>>>>>>>>>
20823>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
20825>>>>>>>>>        Handle hDispatchDriver
20825>>>>>>>>>        Variant retVal
20825>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20826>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20827>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
20828>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
20829>>>>>>>>>        Function_Return retVal
20830>>>>>>>>>    End_Function
20831>>>>>>>>>
20831>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
20833>>>>>>>>>        Handle hDispatchDriver
20833>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20834>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20835>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
20836>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
20837>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
20838>>>>>>>>>    End_Procedure
20839>>>>>>>>>
20839>>>>>>>>>    Function ComEditHandle Returns OLE_HANDLE
20841>>>>>>>>>        Handle hDispatchDriver
20841>>>>>>>>>        OLE_HANDLE retVal
20841>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20842>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 63 OLE_VT_I4 to retVal
20843>>>>>>>>>        Function_Return retVal
20844>>>>>>>>>    End_Function
20845>>>>>>>>>
20845>>>>>>>>>    Function ComHasFocus Returns Boolean
20847>>>>>>>>>        Handle hDispatchDriver
20847>>>>>>>>>        Boolean retVal
20847>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20848>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 66 OLE_VT_BOOL to retVal
20849>>>>>>>>>        Function_Return retVal
20850>>>>>>>>>    End_Function
20851>>>>>>>>>End_Class
20852>>>>>>>>>
20852>>>>>>>>>// CoClass
20852>>>>>>>>>// CLSID: {C0DE2200-45B6-4F4B-A120-6D59A69B2F1D}
20852>>>>>>>>>Class cCJCommandBarEdit is a cComAutomationObject
20853>>>>>>>>>    Import_Class_Protocol cCJICommandBarEdit
20854>>>>>>>>>
20854>>>>>>>>>    Procedure Construct_Object
20856>>>>>>>>>        Forward Send Construct_Object
20858>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
20859>>>>>>>>>    End_Procedure
20860>>>>>>>>>End_Class
20861>>>>>>>>>
20861>>>>>>>>>// CLSID: {C0DE2200-CB1F-40FD-B073-4BC151A5205F}
20861>>>>>>>>>Class cCJICommandBarControlCustom is a Mixin
20862>>>>>>>>>
20862>>>>>>>>>    Function ComChecked Returns Boolean
20864>>>>>>>>>        Boolean retVal
20864>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
20865>>>>>>>>>        Function_Return retVal
20866>>>>>>>>>    End_Function
20867>>>>>>>>>
20867>>>>>>>>>    Procedure Set ComChecked Boolean value
20869>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
20870>>>>>>>>>    End_Procedure
20871>>>>>>>>>
20871>>>>>>>>>    Function ComBeginGroup Returns Boolean
20873>>>>>>>>>        Boolean retVal
20873>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
20874>>>>>>>>>        Function_Return retVal
20875>>>>>>>>>    End_Function
20876>>>>>>>>>
20876>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
20878>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
20879>>>>>>>>>    End_Procedure
20880>>>>>>>>>
20880>>>>>>>>>    Function ComCaption Returns String
20882>>>>>>>>>        String retVal
20882>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
20883>>>>>>>>>        Function_Return retVal
20884>>>>>>>>>    End_Function
20885>>>>>>>>>
20885>>>>>>>>>    Procedure Set ComCaption String value
20887>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
20888>>>>>>>>>    End_Procedure
20889>>>>>>>>>
20889>>>>>>>>>    Function ComDescriptionText Returns String
20891>>>>>>>>>        String retVal
20891>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
20892>>>>>>>>>        Function_Return retVal
20893>>>>>>>>>    End_Function
20894>>>>>>>>>
20894>>>>>>>>>    Procedure Set ComDescriptionText String value
20896>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
20897>>>>>>>>>    End_Procedure
20898>>>>>>>>>
20898>>>>>>>>>    Function ComId Returns Integer
20900>>>>>>>>>        Integer retVal
20900>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
20901>>>>>>>>>        Function_Return retVal
20902>>>>>>>>>    End_Function
20903>>>>>>>>>
20903>>>>>>>>>    Procedure Set ComId Integer value
20905>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
20906>>>>>>>>>    End_Procedure
20907>>>>>>>>>
20907>>>>>>>>>    Function ComParameter Returns String
20909>>>>>>>>>        String retVal
20909>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
20910>>>>>>>>>        Function_Return retVal
20911>>>>>>>>>    End_Function
20912>>>>>>>>>
20912>>>>>>>>>    Procedure Set ComParameter String value
20914>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
20915>>>>>>>>>    End_Procedure
20916>>>>>>>>>
20916>>>>>>>>>    Function ComShortcutText Returns String
20918>>>>>>>>>        String retVal
20918>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
20919>>>>>>>>>        Function_Return retVal
20920>>>>>>>>>    End_Function
20921>>>>>>>>>
20921>>>>>>>>>    Procedure Set ComShortcutText String value
20923>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
20924>>>>>>>>>    End_Procedure
20925>>>>>>>>>
20925>>>>>>>>>    Function ComCustomShortcutText Returns String
20927>>>>>>>>>        String retVal
20927>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
20928>>>>>>>>>        Function_Return retVal
20929>>>>>>>>>    End_Function
20930>>>>>>>>>
20930>>>>>>>>>    Procedure Set ComCustomShortcutText String value
20932>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
20933>>>>>>>>>    End_Procedure
20934>>>>>>>>>
20934>>>>>>>>>    Function ComTooltipText Returns String
20936>>>>>>>>>        String retVal
20936>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
20937>>>>>>>>>        Function_Return retVal
20938>>>>>>>>>    End_Function
20939>>>>>>>>>
20939>>>>>>>>>    Procedure Set ComTooltipText String value
20941>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
20942>>>>>>>>>    End_Procedure
20943>>>>>>>>>
20943>>>>>>>>>    Function ComVisible Returns Boolean
20945>>>>>>>>>        Boolean retVal
20945>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
20946>>>>>>>>>        Function_Return retVal
20947>>>>>>>>>    End_Function
20948>>>>>>>>>
20948>>>>>>>>>    Procedure Set ComVisible Boolean value
20950>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
20951>>>>>>>>>    End_Procedure
20952>>>>>>>>>
20952>>>>>>>>>    Function ComEnabled Returns Boolean
20954>>>>>>>>>        Boolean retVal
20954>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
20955>>>>>>>>>        Function_Return retVal
20956>>>>>>>>>    End_Function
20957>>>>>>>>>
20957>>>>>>>>>    Procedure Set ComEnabled Boolean value
20959>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
20960>>>>>>>>>    End_Procedure
20961>>>>>>>>>
20961>>>>>>>>>    Function ComIconId Returns Integer
20963>>>>>>>>>        Integer retVal
20963>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
20964>>>>>>>>>        Function_Return retVal
20965>>>>>>>>>    End_Function
20966>>>>>>>>>
20966>>>>>>>>>    Procedure Set ComIconId Integer value
20968>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
20969>>>>>>>>>    End_Procedure
20970>>>>>>>>>
20970>>>>>>>>>    Function ComDefaultItem Returns Boolean
20972>>>>>>>>>        Boolean retVal
20972>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
20973>>>>>>>>>        Function_Return retVal
20974>>>>>>>>>    End_Function
20975>>>>>>>>>
20975>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
20977>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
20978>>>>>>>>>    End_Procedure
20979>>>>>>>>>
20979>>>>>>>>>    Function ComFlags Returns XTPControlFlags
20981>>>>>>>>>        XTPControlFlags retVal
20981>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
20982>>>>>>>>>        Function_Return retVal
20983>>>>>>>>>    End_Function
20984>>>>>>>>>
20984>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
20986>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
20987>>>>>>>>>    End_Procedure
20988>>>>>>>>>
20988>>>>>>>>>    Function ComCategory Returns String
20990>>>>>>>>>        String retVal
20990>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
20991>>>>>>>>>        Function_Return retVal
20992>>>>>>>>>    End_Function
20993>>>>>>>>>
20993>>>>>>>>>    Procedure Set ComCategory String value
20995>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
20996>>>>>>>>>    End_Procedure
20997>>>>>>>>>
20997>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
20999>>>>>>>>>        XTPControlHideFlags retVal
20999>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
21000>>>>>>>>>        Function_Return retVal
21001>>>>>>>>>    End_Function
21002>>>>>>>>>
21002>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
21004>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
21005>>>>>>>>>    End_Procedure
21006>>>>>>>>>
21006>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
21008>>>>>>>>>        Boolean retVal
21008>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
21009>>>>>>>>>        Function_Return retVal
21010>>>>>>>>>    End_Function
21011>>>>>>>>>
21011>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
21013>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
21014>>>>>>>>>    End_Procedure
21015>>>>>>>>>
21015>>>>>>>>>    Function ComAction Returns Variant
21017>>>>>>>>>        Variant retVal
21017>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
21018>>>>>>>>>        Function_Return retVal
21019>>>>>>>>>    End_Function
21020>>>>>>>>>
21020>>>>>>>>>    Procedure Set ComAction Variant value
21022>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
21023>>>>>>>>>    End_Procedure
21024>>>>>>>>>
21024>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
21026>>>>>>>>>        Integer retVal
21026>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
21027>>>>>>>>>        Function_Return retVal
21028>>>>>>>>>    End_Function
21029>>>>>>>>>
21029>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
21031>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
21032>>>>>>>>>    End_Procedure
21033>>>>>>>>>
21033>>>>>>>>>    Function ComWidth Returns Integer
21035>>>>>>>>>        Integer retVal
21035>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
21036>>>>>>>>>        Function_Return retVal
21037>>>>>>>>>    End_Function
21038>>>>>>>>>
21038>>>>>>>>>    Procedure Set ComWidth Integer value
21040>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
21041>>>>>>>>>    End_Procedure
21042>>>>>>>>>
21042>>>>>>>>>    Function ComHeight Returns Integer
21044>>>>>>>>>        Integer retVal
21044>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
21045>>>>>>>>>        Function_Return retVal
21046>>>>>>>>>    End_Function
21047>>>>>>>>>
21047>>>>>>>>>    Procedure Set ComHeight Integer value
21049>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
21050>>>>>>>>>    End_Procedure
21051>>>>>>>>>
21051>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
21053>>>>>>>>>        XTPButtonStyle retVal
21053>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
21054>>>>>>>>>        Function_Return retVal
21055>>>>>>>>>    End_Function
21056>>>>>>>>>
21056>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
21058>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
21059>>>>>>>>>    End_Procedure
21060>>>>>>>>>
21060>>>>>>>>>    Function ComKeyboardTip Returns String
21062>>>>>>>>>        String retVal
21062>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
21063>>>>>>>>>        Function_Return retVal
21064>>>>>>>>>    End_Function
21065>>>>>>>>>
21065>>>>>>>>>    Procedure Set ComKeyboardTip String value
21067>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
21068>>>>>>>>>    End_Procedure
21069>>>>>>>>>
21069>>>>>>>>>    Function ComHandle Returns Integer
21071>>>>>>>>>        Integer retVal
21071>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to retVal
21072>>>>>>>>>        Function_Return retVal
21073>>>>>>>>>    End_Function
21074>>>>>>>>>
21074>>>>>>>>>    Procedure Set ComHandle Integer value
21076>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to value
21077>>>>>>>>>    End_Procedure
21078>>>>>>>>>
21078>>>>>>>>>    Function ComVerticalOptions Returns XTPControlCustomVerticalOptions
21080>>>>>>>>>        XTPControlCustomVerticalOptions retVal
21080>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
21081>>>>>>>>>        Function_Return retVal
21082>>>>>>>>>    End_Function
21083>>>>>>>>>
21083>>>>>>>>>    Procedure Set ComVerticalOptions XTPControlCustomVerticalOptions value
21085>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
21086>>>>>>>>>    End_Procedure
21087>>>>>>>>>
21087>>>>>>>>>    Function ComControls Returns Variant
21089>>>>>>>>>        Handle hDispatchDriver
21089>>>>>>>>>        Variant retVal
21089>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21090>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
21091>>>>>>>>>        Function_Return retVal
21092>>>>>>>>>    End_Function
21093>>>>>>>>>
21093>>>>>>>>>    Function ComParent Returns Variant
21095>>>>>>>>>        Handle hDispatchDriver
21095>>>>>>>>>        Variant retVal
21095>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21096>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
21097>>>>>>>>>        Function_Return retVal
21098>>>>>>>>>    End_Function
21099>>>>>>>>>
21099>>>>>>>>>    Function ComIndex Returns Integer
21101>>>>>>>>>        Handle hDispatchDriver
21101>>>>>>>>>        Integer retVal
21101>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21102>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
21103>>>>>>>>>        Function_Return retVal
21104>>>>>>>>>    End_Function
21105>>>>>>>>>
21105>>>>>>>>>    Function ComType Returns XTPControlType
21107>>>>>>>>>        Handle hDispatchDriver
21107>>>>>>>>>        XTPControlType retVal
21107>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21108>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
21109>>>>>>>>>        Function_Return retVal
21110>>>>>>>>>    End_Function
21111>>>>>>>>>
21111>>>>>>>>>    Procedure ComDelete
21113>>>>>>>>>        Handle hDispatchDriver
21113>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21114>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
21115>>>>>>>>>    End_Procedure
21116>>>>>>>>>
21116>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
21118>>>>>>>>>        Handle hDispatchDriver
21118>>>>>>>>>        Variant retVal
21118>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21119>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21120>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
21121>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
21122>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
21123>>>>>>>>>        Function_Return retVal
21124>>>>>>>>>    End_Function
21125>>>>>>>>>
21125>>>>>>>>>    Procedure ComSetFocus
21127>>>>>>>>>        Handle hDispatchDriver
21127>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21128>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
21129>>>>>>>>>    End_Procedure
21130>>>>>>>>>
21130>>>>>>>>>    Procedure ComExecute
21132>>>>>>>>>        Handle hDispatchDriver
21132>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21133>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
21134>>>>>>>>>    End_Procedure
21135>>>>>>>>>
21135>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
21137>>>>>>>>>        Handle hDispatchDriver
21137>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21138>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
21139>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
21140>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
21141>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
21142>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
21143>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
21144>>>>>>>>>    End_Procedure
21145>>>>>>>>>
21145>>>>>>>>>    Function ComRibbonGroup Returns Variant
21147>>>>>>>>>        Handle hDispatchDriver
21147>>>>>>>>>        Variant retVal
21147>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21148>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
21149>>>>>>>>>        Function_Return retVal
21150>>>>>>>>>    End_Function
21151>>>>>>>>>
21151>>>>>>>>>    Procedure ComReset
21153>>>>>>>>>        Handle hDispatchDriver
21153>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21154>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
21155>>>>>>>>>    End_Procedure
21156>>>>>>>>>
21156>>>>>>>>>    Function ComTop Returns Integer
21158>>>>>>>>>        Handle hDispatchDriver
21158>>>>>>>>>        Integer retVal
21158>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21159>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
21160>>>>>>>>>        Function_Return retVal
21161>>>>>>>>>    End_Function
21162>>>>>>>>>
21162>>>>>>>>>    Function ComLeft Returns Integer
21164>>>>>>>>>        Handle hDispatchDriver
21164>>>>>>>>>        Integer retVal
21164>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21165>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
21166>>>>>>>>>        Function_Return retVal
21167>>>>>>>>>    End_Function
21168>>>>>>>>>
21168>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
21170>>>>>>>>>        Handle hDispatchDriver
21170>>>>>>>>>        Variant retVal
21170>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21171>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21172>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
21173>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
21174>>>>>>>>>        Function_Return retVal
21175>>>>>>>>>    End_Function
21176>>>>>>>>>
21176>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
21178>>>>>>>>>        Handle hDispatchDriver
21178>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21179>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21180>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
21181>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
21182>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
21183>>>>>>>>>    End_Procedure
21184>>>>>>>>>
21184>>>>>>>>>    Procedure ComSetSize Integer llcx Integer llcy
21186>>>>>>>>>        Handle hDispatchDriver
21186>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21187>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21188>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
21189>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
21190>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 51 OLE_VT_VOID
21191>>>>>>>>>    End_Procedure
21192>>>>>>>>>End_Class
21193>>>>>>>>>
21193>>>>>>>>>// CoClass
21193>>>>>>>>>// CLSID: {C0DE2200-1B47-4246-A360-CC5F34ABCE35}
21193>>>>>>>>>Class cCJCommandBarControlCustom is a cComAutomationObject
21194>>>>>>>>>    Import_Class_Protocol cCJICommandBarControlCustom
21195>>>>>>>>>
21195>>>>>>>>>    Procedure Construct_Object
21197>>>>>>>>>        Forward Send Construct_Object
21199>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21200>>>>>>>>>    End_Procedure
21201>>>>>>>>>End_Class
21202>>>>>>>>>
21202>>>>>>>>>// CLSID: {C0DE2200-27BF-4CB1-9ABF-1788D9835223}
21202>>>>>>>>>Class cCJICommandBarControls is a Mixin
21203>>>>>>>>>
21203>>>>>>>>>    // Gets the number of controls in the collection.
21203>>>>>>>>>    Function ComCount Returns Integer
21205>>>>>>>>>        Handle hDispatchDriver
21205>>>>>>>>>        Integer retVal
21205>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21206>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
21207>>>>>>>>>        Function_Return retVal
21208>>>>>>>>>    End_Function
21209>>>>>>>>>
21209>>>>>>>>>    // Gets an item from the collection by its index.
21209>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
21211>>>>>>>>>        Handle hDispatchDriver
21211>>>>>>>>>        Variant retVal
21211>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21212>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21213>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
21214>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
21215>>>>>>>>>        Function_Return retVal
21216>>>>>>>>>    End_Function
21217>>>>>>>>>
21217>>>>>>>>>    Function Com_NewEnum Returns Variant
21219>>>>>>>>>        Handle hDispatchDriver
21219>>>>>>>>>        Variant retVal
21219>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21220>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
21221>>>>>>>>>        Function_Return retVal
21222>>>>>>>>>    End_Function
21223>>>>>>>>>
21223>>>>>>>>>    // Adds a new command bar control to the collection.
21223>>>>>>>>>    Function ComAdd XTPControlType llType Integer llId String llCaption Variant llBefore Variant llTemporary Returns Variant
21225>>>>>>>>>        Handle hDispatchDriver
21225>>>>>>>>>        Variant retVal
21225>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21226>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
21227>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llType
21228>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
21229>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
21230>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
21231>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llTemporary
21232>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
21233>>>>>>>>>        Function_Return retVal
21234>>>>>>>>>    End_Function
21235>>>>>>>>>
21235>>>>>>>>>    // Gets the popup control representing the parent of the command bar
21235>>>>>>>>>    Function ComParent Returns Variant
21237>>>>>>>>>        Handle hDispatchDriver
21237>>>>>>>>>        Variant retVal
21237>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21238>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_DISPATCH to retVal
21239>>>>>>>>>        Function_Return retVal
21240>>>>>>>>>    End_Function
21241>>>>>>>>>
21241>>>>>>>>>    // Finds the specified control
21241>>>>>>>>>    Function ComFind Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
21243>>>>>>>>>        Handle hDispatchDriver
21243>>>>>>>>>        Variant retVal
21243>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21244>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
21245>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
21246>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
21247>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
21248>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
21249>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
21250>>>>>>>>>        Function_Return retVal
21251>>>>>>>>>    End_Function
21252>>>>>>>>>
21252>>>>>>>>>    // Deletes all of the command bar controls from the collection
21252>>>>>>>>>    Procedure ComDeleteAll
21254>>>>>>>>>        Handle hDispatchDriver
21254>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21255>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
21256>>>>>>>>>    End_Procedure
21257>>>>>>>>>
21257>>>>>>>>>    // Recreates original controls
21257>>>>>>>>>    Procedure ComCreateOriginalControls
21259>>>>>>>>>        Handle hDispatchDriver
21259>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21260>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
21261>>>>>>>>>    End_Procedure
21262>>>>>>>>>
21262>>>>>>>>>    // Retrieve original controls
21262>>>>>>>>>    Function ComOriginalControls Returns Variant
21264>>>>>>>>>        Handle hDispatchDriver
21264>>>>>>>>>        Variant retVal
21264>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21265>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_DISPATCH to retVal
21266>>>>>>>>>        Function_Return retVal
21267>>>>>>>>>    End_Function
21268>>>>>>>>>
21268>>>>>>>>>    Procedure ComAddControl Variant llControl Variant llBefore
21270>>>>>>>>>        Handle hDispatchDriver
21270>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21271>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21272>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llControl
21273>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
21274>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
21275>>>>>>>>>    End_Procedure
21276>>>>>>>>>End_Class
21277>>>>>>>>>
21277>>>>>>>>>// CoClass
21277>>>>>>>>>// CLSID: {C0DE2200-A08C-49CB-8B78-58D990C00C51}
21277>>>>>>>>>Class cCJCommandBarControls is a cComAutomationObject
21278>>>>>>>>>    Import_Class_Protocol cCJICommandBarControls
21279>>>>>>>>>
21279>>>>>>>>>    Procedure Construct_Object
21281>>>>>>>>>        Forward Send Construct_Object
21283>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21284>>>>>>>>>    End_Procedure
21285>>>>>>>>>End_Class
21286>>>>>>>>>
21286>>>>>>>>>// CLSID: {C0DE2200-0E35-48A5-BDED-924880DAF1B2}
21286>>>>>>>>>Class cCJIKeyBinding is a Mixin
21287>>>>>>>>>
21287>>>>>>>>>    Function ComCommand Returns Integer
21289>>>>>>>>>        Integer retVal
21289>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
21290>>>>>>>>>        Function_Return retVal
21291>>>>>>>>>    End_Function
21292>>>>>>>>>
21292>>>>>>>>>    Procedure Set ComCommand Integer value
21294>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
21295>>>>>>>>>    End_Procedure
21296>>>>>>>>>
21296>>>>>>>>>    Function ComShortcutText Returns String
21298>>>>>>>>>        String retVal
21298>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
21299>>>>>>>>>        Function_Return retVal
21300>>>>>>>>>    End_Function
21301>>>>>>>>>
21301>>>>>>>>>    Procedure Set ComShortcutText String value
21303>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
21304>>>>>>>>>    End_Procedure
21305>>>>>>>>>End_Class
21306>>>>>>>>>
21306>>>>>>>>>// CoClass
21306>>>>>>>>>// CLSID: {C0DE2200-EA68-4E0D-946F-45694C26F6BA}
21306>>>>>>>>>Class cCJKeyBinding is a cComAutomationObject
21307>>>>>>>>>    Import_Class_Protocol cCJIKeyBinding
21308>>>>>>>>>
21308>>>>>>>>>    Procedure Construct_Object
21310>>>>>>>>>        Forward Send Construct_Object
21312>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21313>>>>>>>>>    End_Procedure
21314>>>>>>>>>End_Class
21315>>>>>>>>>
21315>>>>>>>>>// CLSID: {C0DE2200-7369-4EAB-9B25-1D5C52916D86}
21315>>>>>>>>>Class cCJIKeyBindings is a Mixin
21316>>>>>>>>>
21316>>>>>>>>>    Function ComUseSystemKeyNameText Returns Boolean
21318>>>>>>>>>        Boolean retVal
21318>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
21319>>>>>>>>>        Function_Return retVal
21320>>>>>>>>>    End_Function
21321>>>>>>>>>
21321>>>>>>>>>    Procedure Set ComUseSystemKeyNameText Boolean value
21323>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
21324>>>>>>>>>    End_Procedure
21325>>>>>>>>>
21325>>>>>>>>>    Function ComAllowDoubleKeyShortcuts Returns Boolean
21327>>>>>>>>>        Boolean retVal
21327>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
21328>>>>>>>>>        Function_Return retVal
21329>>>>>>>>>    End_Function
21330>>>>>>>>>
21330>>>>>>>>>    Procedure Set ComAllowDoubleKeyShortcuts Boolean value
21332>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
21333>>>>>>>>>    End_Procedure
21334>>>>>>>>>
21334>>>>>>>>>    Function ComEnabled Returns Boolean
21336>>>>>>>>>        Boolean retVal
21336>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
21337>>>>>>>>>        Function_Return retVal
21338>>>>>>>>>    End_Function
21339>>>>>>>>>
21339>>>>>>>>>    Procedure Set ComEnabled Boolean value
21341>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
21342>>>>>>>>>    End_Procedure
21343>>>>>>>>>
21343>>>>>>>>>    Function ComDisableOnCapture Returns Boolean
21345>>>>>>>>>        Boolean retVal
21345>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
21346>>>>>>>>>        Function_Return retVal
21347>>>>>>>>>    End_Function
21348>>>>>>>>>
21348>>>>>>>>>    Procedure Set ComDisableOnCapture Boolean value
21350>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
21351>>>>>>>>>    End_Procedure
21352>>>>>>>>>
21352>>>>>>>>>    Function ComEnableCustomShortcutText Returns Boolean
21354>>>>>>>>>        Boolean retVal
21354>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
21355>>>>>>>>>        Function_Return retVal
21356>>>>>>>>>    End_Function
21357>>>>>>>>>
21357>>>>>>>>>    Procedure Set ComEnableCustomShortcutText Boolean value
21359>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
21360>>>>>>>>>    End_Procedure
21361>>>>>>>>>
21361>>>>>>>>>    Procedure ComAdd Integer llfVirt Integer llKey Integer llCommand
21363>>>>>>>>>        Handle hDispatchDriver
21363>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21364>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
21365>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llfVirt
21366>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llKey
21367>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21368>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1 OLE_VT_VOID
21369>>>>>>>>>    End_Procedure
21370>>>>>>>>>
21370>>>>>>>>>    Procedure ComAddShortcut Integer llCommand String llShortcut
21372>>>>>>>>>        Handle hDispatchDriver
21372>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21373>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21374>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21375>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llShortcut
21376>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
21377>>>>>>>>>    End_Procedure
21378>>>>>>>>>
21378>>>>>>>>>    Procedure ComDeleteAll
21380>>>>>>>>>        Handle hDispatchDriver
21380>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21381>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 2 OLE_VT_VOID
21382>>>>>>>>>    End_Procedure
21383>>>>>>>>>
21383>>>>>>>>>    Procedure ComSetKeyNameText Integer llKey String llKeyName
21385>>>>>>>>>        Handle hDispatchDriver
21385>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21386>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21387>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llKey
21388>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llKeyName
21389>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
21390>>>>>>>>>    End_Procedure
21391>>>>>>>>>
21391>>>>>>>>>    Procedure ComDelete Integer llCommand
21393>>>>>>>>>        Handle hDispatchDriver
21393>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21394>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21395>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21396>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
21397>>>>>>>>>    End_Procedure
21398>>>>>>>>>
21398>>>>>>>>>    Function ComCount Returns Integer
21400>>>>>>>>>        Handle hDispatchDriver
21400>>>>>>>>>        Integer retVal
21400>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21401>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_I4 to retVal
21402>>>>>>>>>        Function_Return retVal
21403>>>>>>>>>    End_Function
21404>>>>>>>>>
21404>>>>>>>>>    Function Com_NewEnum Returns Variant
21406>>>>>>>>>        Handle hDispatchDriver
21406>>>>>>>>>        Variant retVal
21406>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21407>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
21408>>>>>>>>>        Function_Return retVal
21409>>>>>>>>>    End_Function
21410>>>>>>>>>
21410>>>>>>>>>    // Gets an item from the collection by its Id.
21410>>>>>>>>>    Function ComShortcut Integer llIndex Returns Variant
21412>>>>>>>>>        Handle hDispatchDriver
21412>>>>>>>>>        Variant retVal
21412>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21413>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21414>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
21415>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
21416>>>>>>>>>        Function_Return retVal
21417>>>>>>>>>    End_Function
21418>>>>>>>>>
21418>>>>>>>>>    Function ComFindShortcut Integer llCommand Returns Variant
21420>>>>>>>>>        Handle hDispatchDriver
21420>>>>>>>>>        Variant retVal
21420>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21421>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21422>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21423>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
21424>>>>>>>>>        Function_Return retVal
21425>>>>>>>>>    End_Function
21426>>>>>>>>>End_Class
21427>>>>>>>>>
21427>>>>>>>>>// CLSID: {C0DE2200-B842-4945-A2F6-CA4237496689}
21427>>>>>>>>>Class cCJIKeyBindingsEvents is a Mixin
21428>>>>>>>>>
21428>>>>>>>>>    Procedure OnComBeforeTranslate Integer llCommand Variant llCancel
21430>>>>>>>>>    End_Procedure
21431>>>>>>>>>
21431>>>>>>>>>    Procedure OnComBeforeAdd Integer llfVirt Integer llKey Integer llCommand Variant llCancel
21433>>>>>>>>>    End_Procedure
21434>>>>>>>>>
21434>>>>>>>>>    Procedure OnComBeforeRemove Integer llfVirt Integer llKey Integer llCommand Variant llCancel
21436>>>>>>>>>    End_Procedure
21437>>>>>>>>>
21437>>>>>>>>>    Procedure RegisterComEvents
21439>>>>>>>>>        Send RegisterComEvent 1 msg_OnComBeforeTranslate
21440>>>>>>>>>        Send RegisterComEvent 2 msg_OnComBeforeAdd
21441>>>>>>>>>        Send RegisterComEvent 3 msg_OnComBeforeRemove
21442>>>>>>>>>    End_Procedure
21443>>>>>>>>>End_Class
21444>>>>>>>>>
21444>>>>>>>>>// CoClass
21444>>>>>>>>>// CLSID: {C0DE2200-6BDA-418D-9440-2D141B5D653C}
21444>>>>>>>>>Class cCJKeyBindings is a cComAutomationObject
21445>>>>>>>>>    Import_Class_Protocol cCJIKeyBindings
21446>>>>>>>>>    Import_Class_Protocol cCJIKeyBindingsEvents
21447>>>>>>>>>
21447>>>>>>>>>    Procedure Construct_Object
21449>>>>>>>>>        Forward Send Construct_Object
21451>>>>>>>>>        Set psEventId to "{C0DE2200-B842-4945-A2F6-CA4237496689}"
21452>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21453>>>>>>>>>    End_Procedure
21454>>>>>>>>>End_Class
21455>>>>>>>>>
21455>>>>>>>>>// CLSID: {C0DE2200-48B2-4CCF-B8D7-CFD6A679F837}
21455>>>>>>>>>Class cCJICommandBarsOptions is a Mixin
21456>>>>>>>>>
21456>>>>>>>>>    Function ComAlwaysShowFullMenus Returns Boolean
21458>>>>>>>>>        Boolean retVal
21458>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
21459>>>>>>>>>        Function_Return retVal
21460>>>>>>>>>    End_Function
21461>>>>>>>>>
21461>>>>>>>>>    Procedure Set ComAlwaysShowFullMenus Boolean value
21463>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
21464>>>>>>>>>    End_Procedure
21465>>>>>>>>>
21465>>>>>>>>>    Function ComShowFullAfterDelay Returns Boolean
21467>>>>>>>>>        Boolean retVal
21467>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to retVal
21468>>>>>>>>>        Function_Return retVal
21469>>>>>>>>>    End_Function
21470>>>>>>>>>
21470>>>>>>>>>    Procedure Set ComShowFullAfterDelay Boolean value
21472>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to value
21473>>>>>>>>>    End_Procedure
21474>>>>>>>>>
21474>>>>>>>>>    Function ComToolBarScreenTips Returns Boolean
21476>>>>>>>>>        Boolean retVal
21476>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
21477>>>>>>>>>        Function_Return retVal
21478>>>>>>>>>    End_Function
21479>>>>>>>>>
21479>>>>>>>>>    Procedure Set ComToolBarScreenTips Boolean value
21481>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
21482>>>>>>>>>    End_Procedure
21483>>>>>>>>>
21483>>>>>>>>>    Function ComToolBarAccelTips Returns Boolean
21485>>>>>>>>>        Boolean retVal
21485>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
21486>>>>>>>>>        Function_Return retVal
21487>>>>>>>>>    End_Function
21488>>>>>>>>>
21488>>>>>>>>>    Procedure Set ComToolBarAccelTips Boolean value
21490>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
21491>>>>>>>>>    End_Procedure
21492>>>>>>>>>
21492>>>>>>>>>    Function ComLargeIcons Returns Boolean
21494>>>>>>>>>        Boolean retVal
21494>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
21495>>>>>>>>>        Function_Return retVal
21496>>>>>>>>>    End_Function
21497>>>>>>>>>
21497>>>>>>>>>    Procedure Set ComLargeIcons Boolean value
21499>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
21500>>>>>>>>>    End_Procedure
21501>>>>>>>>>
21501>>>>>>>>>    Function ComUseFadedIcons Returns Boolean
21503>>>>>>>>>        Boolean retVal
21503>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
21504>>>>>>>>>        Function_Return retVal
21505>>>>>>>>>    End_Function
21506>>>>>>>>>
21506>>>>>>>>>    Procedure Set ComUseFadedIcons Boolean value
21508>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
21509>>>>>>>>>    End_Procedure
21510>>>>>>>>>
21510>>>>>>>>>    Function ComUseDisabledIcons Returns Boolean
21512>>>>>>>>>        Boolean retVal
21512>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
21513>>>>>>>>>        Function_Return retVal
21514>>>>>>>>>    End_Function
21515>>>>>>>>>
21515>>>>>>>>>    Procedure Set ComUseDisabledIcons Boolean value
21517>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
21518>>>>>>>>>    End_Procedure
21519>>>>>>>>>
21519>>>>>>>>>    Function ComIconsWithShadow Returns Boolean
21521>>>>>>>>>        Boolean retVal
21521>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
21522>>>>>>>>>        Function_Return retVal
21523>>>>>>>>>    End_Function
21524>>>>>>>>>
21524>>>>>>>>>    Procedure Set ComIconsWithShadow Boolean value
21526>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
21527>>>>>>>>>    End_Procedure
21528>>>>>>>>>
21528>>>>>>>>>    Function ComShowExpandButtonAlways Returns Boolean
21530>>>>>>>>>        Boolean retVal
21530>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
21531>>>>>>>>>        Function_Return retVal
21532>>>>>>>>>    End_Function
21533>>>>>>>>>
21533>>>>>>>>>    Procedure Set ComShowExpandButtonAlways Boolean value
21535>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
21536>>>>>>>>>    End_Procedure
21537>>>>>>>>>
21537>>>>>>>>>    Function ComAnimation Returns XTPAnimationType
21539>>>>>>>>>        XTPAnimationType retVal
21539>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_I4 to retVal
21540>>>>>>>>>        Function_Return retVal
21541>>>>>>>>>    End_Function
21542>>>>>>>>>
21542>>>>>>>>>    Procedure Set ComAnimation XTPAnimationType value
21544>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_I4 to value
21545>>>>>>>>>    End_Procedure
21546>>>>>>>>>
21546>>>>>>>>>    Function ComLunaColors Returns Boolean
21548>>>>>>>>>        Boolean retVal
21548>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
21549>>>>>>>>>        Function_Return retVal
21550>>>>>>>>>    End_Function
21551>>>>>>>>>
21551>>>>>>>>>    Procedure Set ComLunaColors Boolean value
21553>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
21554>>>>>>>>>    End_Procedure
21555>>>>>>>>>
21555>>>>>>>>>    Function ComUseSharedImageList Returns Boolean
21557>>>>>>>>>        Boolean retVal
21557>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
21558>>>>>>>>>        Function_Return retVal
21559>>>>>>>>>    End_Function
21560>>>>>>>>>
21560>>>>>>>>>    Procedure Set ComUseSharedImageList Boolean value
21562>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
21563>>>>>>>>>    End_Procedure
21564>>>>>>>>>
21564>>>>>>>>>    Function ComSyncFloatingToolbars Returns Boolean
21566>>>>>>>>>        Boolean retVal
21566>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_BOOL to retVal
21567>>>>>>>>>        Function_Return retVal
21568>>>>>>>>>    End_Function
21569>>>>>>>>>
21569>>>>>>>>>    Procedure Set ComSyncFloatingToolbars Boolean value
21571>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_BOOL to value
21572>>>>>>>>>    End_Procedure
21573>>>>>>>>>
21573>>>>>>>>>    Function ComFloatToolbarsByDoubleClick Returns Boolean
21575>>>>>>>>>        Boolean retVal
21575>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
21576>>>>>>>>>        Function_Return retVal
21577>>>>>>>>>    End_Function
21578>>>>>>>>>
21578>>>>>>>>>    Procedure Set ComFloatToolbarsByDoubleClick Boolean value
21580>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
21581>>>>>>>>>    End_Procedure
21582>>>>>>>>>
21582>>>>>>>>>    Function ComAutoHideUnusedPopups Returns Boolean
21584>>>>>>>>>        Boolean retVal
21584>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_BOOL to retVal
21585>>>>>>>>>        Function_Return retVal
21586>>>>>>>>>    End_Function
21587>>>>>>>>>
21587>>>>>>>>>    Procedure Set ComAutoHideUnusedPopups Boolean value
21589>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_BOOL to value
21590>>>>>>>>>    End_Procedure
21591>>>>>>>>>
21591>>>>>>>>>    Function ComShowPopupBarToolTips Returns Boolean
21593>>>>>>>>>        Boolean retVal
21593>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
21594>>>>>>>>>        Function_Return retVal
21595>>>>>>>>>    End_Function
21596>>>>>>>>>
21596>>>>>>>>>    Procedure Set ComShowPopupBarToolTips Boolean value
21598>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
21599>>>>>>>>>    End_Procedure
21600>>>>>>>>>
21600>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
21602>>>>>>>>>        Boolean retVal
21602>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
21603>>>>>>>>>        Function_Return retVal
21604>>>>>>>>>    End_Function
21605>>>>>>>>>
21605>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
21607>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
21608>>>>>>>>>    End_Procedure
21609>>>>>>>>>
21609>>>>>>>>>    Function ComUpdatePeriod Returns Integer
21611>>>>>>>>>        Integer retVal
21611>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_I4 to retVal
21612>>>>>>>>>        Function_Return retVal
21613>>>>>>>>>    End_Function
21614>>>>>>>>>
21614>>>>>>>>>    Procedure Set ComUpdatePeriod Integer value
21616>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_I4 to value
21617>>>>>>>>>    End_Procedure
21618>>>>>>>>>
21618>>>>>>>>>    Function ComAltDragCustomization Returns Boolean
21620>>>>>>>>>        Boolean retVal
21620>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
21621>>>>>>>>>        Function_Return retVal
21622>>>>>>>>>    End_Function
21623>>>>>>>>>
21623>>>>>>>>>    Procedure Set ComAltDragCustomization Boolean value
21625>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
21626>>>>>>>>>    End_Procedure
21627>>>>>>>>>
21627>>>>>>>>>    Function ComFont Returns Variant
21629>>>>>>>>>        Variant retVal
21629>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
21630>>>>>>>>>        Function_Return retVal
21631>>>>>>>>>    End_Function
21632>>>>>>>>>
21632>>>>>>>>>    Procedure Set ComFont Variant value
21634>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
21635>>>>>>>>>    End_Procedure
21636>>>>>>>>>
21636>>>>>>>>>    Function ComMaxPopupWidth Returns Real
21638>>>>>>>>>        Real retVal
21638>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_R8 to retVal
21639>>>>>>>>>        Function_Return retVal
21640>>>>>>>>>    End_Function
21641>>>>>>>>>
21641>>>>>>>>>    Procedure Set ComMaxPopupWidth Real value
21643>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_R8 to value
21644>>>>>>>>>    End_Procedure
21645>>>>>>>>>
21645>>>>>>>>>    Function ComKeyboardCuesShow Returns XTPKeyboardCuesShow
21647>>>>>>>>>        XTPKeyboardCuesShow retVal
21647>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to retVal
21648>>>>>>>>>        Function_Return retVal
21649>>>>>>>>>    End_Function
21650>>>>>>>>>
21650>>>>>>>>>    Procedure Set ComKeyboardCuesShow XTPKeyboardCuesShow value
21652>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to value
21653>>>>>>>>>    End_Procedure
21654>>>>>>>>>
21654>>>>>>>>>    Function ComKeyboardCuesUse Returns XTPKeyboardCuesUse
21656>>>>>>>>>        XTPKeyboardCuesUse retVal
21656>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to retVal
21657>>>>>>>>>        Function_Return retVal
21658>>>>>>>>>    End_Function
21659>>>>>>>>>
21659>>>>>>>>>    Procedure Set ComKeyboardCuesUse XTPKeyboardCuesUse value
21661>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to value
21662>>>>>>>>>    End_Procedure
21663>>>>>>>>>
21663>>>>>>>>>    Function ComFloatingBarCaptionFont Returns Variant
21665>>>>>>>>>        Variant retVal
21665>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_DISPATCH to retVal
21666>>>>>>>>>        Function_Return retVal
21667>>>>>>>>>    End_Function
21668>>>>>>>>>
21668>>>>>>>>>    Procedure Set ComFloatingBarCaptionFont Variant value
21670>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_DISPATCH to value
21671>>>>>>>>>    End_Procedure
21672>>>>>>>>>
21672>>>>>>>>>    Function ComComboBoxFont Returns Variant
21674>>>>>>>>>        Variant retVal
21674>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_DISPATCH to retVal
21675>>>>>>>>>        Function_Return retVal
21676>>>>>>>>>    End_Function
21677>>>>>>>>>
21677>>>>>>>>>    Procedure Set ComComboBoxFont Variant value
21679>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_DISPATCH to value
21680>>>>>>>>>    End_Procedure
21681>>>>>>>>>
21681>>>>>>>>>    Function ComOfficeStyleDisabledIcons Returns Boolean
21683>>>>>>>>>        Boolean retVal
21683>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_BOOL to retVal
21684>>>>>>>>>        Function_Return retVal
21685>>>>>>>>>    End_Function
21686>>>>>>>>>
21686>>>>>>>>>    Procedure Set ComOfficeStyleDisabledIcons Boolean value
21688>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_BOOL to value
21689>>>>>>>>>    End_Procedure
21690>>>>>>>>>
21690>>>>>>>>>    Function ComExpandHoverDelay Returns Integer
21692>>>>>>>>>        Integer retVal
21692>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to retVal
21693>>>>>>>>>        Function_Return retVal
21694>>>>>>>>>    End_Function
21695>>>>>>>>>
21695>>>>>>>>>    Procedure Set ComExpandHoverDelay Integer value
21697>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to value
21698>>>>>>>>>    End_Procedure
21699>>>>>>>>>
21699>>>>>>>>>    Function ComExpandDelay Returns Integer
21701>>>>>>>>>        Integer retVal
21701>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
21702>>>>>>>>>        Function_Return retVal
21703>>>>>>>>>    End_Function
21704>>>>>>>>>
21704>>>>>>>>>    Procedure Set ComExpandDelay Integer value
21706>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
21707>>>>>>>>>    End_Procedure
21708>>>>>>>>>
21708>>>>>>>>>    Function ComUseAltNumPadKeys Returns Boolean
21710>>>>>>>>>        Boolean retVal
21710>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to retVal
21711>>>>>>>>>        Function_Return retVal
21712>>>>>>>>>    End_Function
21713>>>>>>>>>
21713>>>>>>>>>    Procedure Set ComUseAltNumPadKeys Boolean value
21715>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to value
21716>>>>>>>>>    End_Procedure
21717>>>>>>>>>
21717>>>>>>>>>    Function ComUseSystemSaveBitsStyle Returns Boolean
21719>>>>>>>>>        Boolean retVal
21719>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_BOOL to retVal
21720>>>>>>>>>        Function_Return retVal
21721>>>>>>>>>    End_Function
21722>>>>>>>>>
21722>>>>>>>>>    Procedure Set ComUseSystemSaveBitsStyle Boolean value
21724>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_BOOL to value
21725>>>>>>>>>    End_Procedure
21726>>>>>>>>>
21726>>>>>>>>>    Function ComWrapLargePopups Returns Boolean
21728>>>>>>>>>        Boolean retVal
21728>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
21729>>>>>>>>>        Function_Return retVal
21730>>>>>>>>>    End_Function
21731>>>>>>>>>
21731>>>>>>>>>    Procedure Set ComWrapLargePopups Boolean value
21733>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
21734>>>>>>>>>    End_Procedure
21735>>>>>>>>>
21735>>>>>>>>>    Function ComShowKeyboardTips Returns Boolean
21737>>>>>>>>>        Boolean retVal
21737>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_BOOL to retVal
21738>>>>>>>>>        Function_Return retVal
21739>>>>>>>>>    End_Function
21740>>>>>>>>>
21740>>>>>>>>>    Procedure Set ComShowKeyboardTips Boolean value
21742>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_BOOL to value
21743>>>>>>>>>    End_Procedure
21744>>>>>>>>>
21744>>>>>>>>>    Function ComShowContextMenuAccelerators Returns Boolean
21746>>>>>>>>>        Boolean retVal
21746>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 35 OLE_VT_BOOL to retVal
21747>>>>>>>>>        Function_Return retVal
21748>>>>>>>>>    End_Function
21749>>>>>>>>>
21749>>>>>>>>>    Procedure Set ComShowContextMenuAccelerators Boolean value
21751>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 35 OLE_VT_BOOL to value
21752>>>>>>>>>    End_Procedure
21753>>>>>>>>>
21753>>>>>>>>>    // Synchronizes the activation of the mini-frame windows to the activation of its parent window
21753>>>>>>>>>    Function ComSyncActiveFloatingFrames Returns Boolean
21755>>>>>>>>>        Boolean retVal
21755>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
21756>>>>>>>>>        Function_Return retVal
21757>>>>>>>>>    End_Function
21758>>>>>>>>>
21758>>>>>>>>>    // Synchronizes the activation of the mini-frame windows to the activation of its parent window
21758>>>>>>>>>    Procedure Set ComSyncActiveFloatingFrames Boolean value
21760>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
21761>>>>>>>>>    End_Procedure
21762>>>>>>>>>
21762>>>>>>>>>    Function ComShowMiniToolbarTips Returns Boolean
21764>>>>>>>>>        Boolean retVal
21764>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
21765>>>>>>>>>        Function_Return retVal
21766>>>>>>>>>    End_Function
21767>>>>>>>>>
21767>>>>>>>>>    Procedure Set ComShowMiniToolbarTips Boolean value
21769>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
21770>>>>>>>>>    End_Procedure
21771>>>>>>>>>
21771>>>>>>>>>    // Color value for VisualStudio 2015 (and above) state color, usually applied to frame border and status bar
21771>>>>>>>>>    Function ComVSStateColor Returns OLE_COLOR
21773>>>>>>>>>        OLE_COLOR retVal
21773>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_I4 to retVal
21774>>>>>>>>>        Function_Return retVal
21775>>>>>>>>>    End_Function
21776>>>>>>>>>
21776>>>>>>>>>    // Color value for VisualStudio 2015 (and above) state color, usually applied to frame border and status bar
21776>>>>>>>>>    Procedure Set ComVSStateColor OLE_COLOR value
21778>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_I4 to value
21779>>>>>>>>>    End_Procedure
21780>>>>>>>>>
21780>>>>>>>>>    Function ComShowPopupButtonsSelectedToolbarOnly Returns Boolean
21782>>>>>>>>>        Boolean retVal
21782>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to retVal
21783>>>>>>>>>        Function_Return retVal
21784>>>>>>>>>    End_Function
21785>>>>>>>>>
21785>>>>>>>>>    Procedure Set ComShowPopupButtonsSelectedToolbarOnly Boolean value
21787>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to value
21788>>>>>>>>>    End_Procedure
21789>>>>>>>>>
21789>>>>>>>>>    Procedure ComSetIconSize Boolean llLargeIcons Integer llcx Integer llcy
21791>>>>>>>>>        Handle hDispatchDriver
21791>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21792>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
21793>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLargeIcons
21794>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
21795>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
21796>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
21797>>>>>>>>>    End_Procedure
21798>>>>>>>>>
21798>>>>>>>>>    Function ComGetIconWidth Boolean llLargeIcons Returns Integer
21800>>>>>>>>>        Handle hDispatchDriver
21800>>>>>>>>>        Integer retVal
21800>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21801>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21802>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLargeIcons
21803>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
21804>>>>>>>>>        Function_Return retVal
21805>>>>>>>>>    End_Function
21806>>>>>>>>>
21806>>>>>>>>>    Function ComGetIconHeight Boolean llLargeIcons Returns Integer
21808>>>>>>>>>        Handle hDispatchDriver
21808>>>>>>>>>        Integer retVal
21808>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21809>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21810>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLargeIcons
21811>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
21812>>>>>>>>>        Function_Return retVal
21813>>>>>>>>>    End_Function
21814>>>>>>>>>
21814>>>>>>>>>    Procedure ComAddHiddenCommand Integer llCommand
21816>>>>>>>>>        Handle hDispatchDriver
21816>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21817>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21818>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21819>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 10 OLE_VT_VOID
21820>>>>>>>>>    End_Procedure
21821>>>>>>>>>
21821>>>>>>>>>    Procedure ComSetPopupIconSize Integer llcx Integer llcy
21823>>>>>>>>>        Handle hDispatchDriver
21823>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21824>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21825>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
21826>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
21827>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
21828>>>>>>>>>    End_Procedure
21829>>>>>>>>>
21829>>>>>>>>>    Function ComGetPopupIconWidth Returns Integer
21831>>>>>>>>>        Handle hDispatchDriver
21831>>>>>>>>>        Integer retVal
21831>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21832>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 41 OLE_VT_I4 to retVal
21833>>>>>>>>>        Function_Return retVal
21834>>>>>>>>>    End_Function
21835>>>>>>>>>
21835>>>>>>>>>    Function ComGetPopupIconHeight Returns Integer
21837>>>>>>>>>        Handle hDispatchDriver
21837>>>>>>>>>        Integer retVal
21837>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21838>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 42 OLE_VT_I4 to retVal
21839>>>>>>>>>        Function_Return retVal
21840>>>>>>>>>    End_Function
21841>>>>>>>>>
21841>>>>>>>>>    Procedure ComRemoveHiddenCommands
21843>>>>>>>>>        Handle hDispatchDriver
21843>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21844>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 36 OLE_VT_VOID
21845>>>>>>>>>    End_Procedure
21846>>>>>>>>>
21846>>>>>>>>>    Procedure ComSetDPIScallingOptions Boolean llbScaleGalleryItems Boolean llbScaleToolbarIcons
21848>>>>>>>>>        Handle hDispatchDriver
21848>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21849>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21850>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llbScaleGalleryItems
21851>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llbScaleToolbarIcons
21852>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 39 OLE_VT_VOID
21853>>>>>>>>>    End_Procedure
21854>>>>>>>>>
21854>>>>>>>>>    Function ComIsDPIScallingEnabled Returns Boolean
21856>>>>>>>>>        Handle hDispatchDriver
21856>>>>>>>>>        Boolean retVal
21856>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21857>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_BOOL to retVal
21858>>>>>>>>>        Function_Return retVal
21859>>>>>>>>>    End_Function
21860>>>>>>>>>End_Class
21861>>>>>>>>>
21861>>>>>>>>>// CoClass
21861>>>>>>>>>// CLSID: {C0DE2200-A0EA-4D8E-8A73-49D5D084F527}
21861>>>>>>>>>Class cCJCommandBarsOptions is a cComAutomationObject
21862>>>>>>>>>    Import_Class_Protocol cCJICommandBarsOptions
21863>>>>>>>>>
21863>>>>>>>>>    Procedure Construct_Object
21865>>>>>>>>>        Forward Send Construct_Object
21867>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21868>>>>>>>>>    End_Procedure
21869>>>>>>>>>End_Class
21870>>>>>>>>>
21870>>>>>>>>>// CLSID: {C0DE2200-0690-4528-8656-E33E61F39377}
21870>>>>>>>>>Class cCJICommandBar is a Mixin
21871>>>>>>>>>
21871>>>>>>>>>    Function ComTitle Returns String
21873>>>>>>>>>        String retVal
21873>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
21874>>>>>>>>>        Function_Return retVal
21875>>>>>>>>>    End_Function
21876>>>>>>>>>
21876>>>>>>>>>    Procedure Set ComTitle String value
21878>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
21879>>>>>>>>>    End_Procedure
21880>>>>>>>>>
21880>>>>>>>>>    Function ComVisible Returns Boolean
21882>>>>>>>>>        Boolean retVal
21882>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
21883>>>>>>>>>        Function_Return retVal
21884>>>>>>>>>    End_Function
21885>>>>>>>>>
21885>>>>>>>>>    Procedure Set ComVisible Boolean value
21887>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
21888>>>>>>>>>    End_Procedure
21889>>>>>>>>>
21889>>>>>>>>>    Function ComPosition Returns XTPBarPosition
21891>>>>>>>>>        XTPBarPosition retVal
21891>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
21892>>>>>>>>>        Function_Return retVal
21893>>>>>>>>>    End_Function
21894>>>>>>>>>
21894>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
21896>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
21897>>>>>>>>>    End_Procedure
21898>>>>>>>>>
21898>>>>>>>>>    Function ComBarID Returns Integer
21900>>>>>>>>>        Integer retVal
21900>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
21901>>>>>>>>>        Function_Return retVal
21902>>>>>>>>>    End_Function
21903>>>>>>>>>
21903>>>>>>>>>    Procedure Set ComBarID Integer value
21905>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
21906>>>>>>>>>    End_Procedure
21907>>>>>>>>>
21907>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
21909>>>>>>>>>        Boolean retVal
21909>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
21910>>>>>>>>>        Function_Return retVal
21911>>>>>>>>>    End_Function
21912>>>>>>>>>
21912>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
21914>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
21915>>>>>>>>>    End_Procedure
21916>>>>>>>>>
21916>>>>>>>>>    Function ComWidth Returns Integer
21918>>>>>>>>>        Integer retVal
21918>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
21919>>>>>>>>>        Function_Return retVal
21920>>>>>>>>>    End_Function
21921>>>>>>>>>
21921>>>>>>>>>    Procedure Set ComWidth Integer value
21923>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
21924>>>>>>>>>    End_Procedure
21925>>>>>>>>>
21925>>>>>>>>>    Function ComCloseable Returns Boolean
21927>>>>>>>>>        Boolean retVal
21927>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
21928>>>>>>>>>        Function_Return retVal
21929>>>>>>>>>    End_Function
21930>>>>>>>>>
21930>>>>>>>>>    Procedure Set ComCloseable Boolean value
21932>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
21933>>>>>>>>>    End_Procedure
21934>>>>>>>>>
21934>>>>>>>>>    Function ComEnableAnimation Returns Boolean
21936>>>>>>>>>        Boolean retVal
21936>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
21937>>>>>>>>>        Function_Return retVal
21938>>>>>>>>>    End_Function
21939>>>>>>>>>
21939>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
21941>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
21942>>>>>>>>>    End_Procedure
21943>>>>>>>>>
21943>>>>>>>>>    Function ComShowGripper Returns Boolean
21945>>>>>>>>>        Boolean retVal
21945>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
21946>>>>>>>>>        Function_Return retVal
21947>>>>>>>>>    End_Function
21948>>>>>>>>>
21948>>>>>>>>>    Procedure Set ComShowGripper Boolean value
21950>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
21951>>>>>>>>>    End_Procedure
21952>>>>>>>>>
21952>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
21954>>>>>>>>>        XTPButtonStyle retVal
21954>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
21955>>>>>>>>>        Function_Return retVal
21956>>>>>>>>>    End_Function
21957>>>>>>>>>
21957>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
21959>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
21960>>>>>>>>>    End_Procedure
21961>>>>>>>>>
21961>>>>>>>>>    Function ComCustomizable Returns Boolean
21963>>>>>>>>>        Boolean retVal
21963>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
21964>>>>>>>>>        Function_Return retVal
21965>>>>>>>>>    End_Function
21966>>>>>>>>>
21966>>>>>>>>>    Procedure Set ComCustomizable Boolean value
21968>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
21969>>>>>>>>>    End_Procedure
21970>>>>>>>>>
21970>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
21972>>>>>>>>>        Boolean retVal
21972>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
21973>>>>>>>>>        Function_Return retVal
21974>>>>>>>>>    End_Function
21975>>>>>>>>>
21975>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
21977>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
21978>>>>>>>>>    End_Procedure
21979>>>>>>>>>
21979>>>>>>>>>    Function ComDoubleGripper Returns Boolean
21981>>>>>>>>>        Boolean retVal
21981>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
21982>>>>>>>>>        Function_Return retVal
21983>>>>>>>>>    End_Function
21984>>>>>>>>>
21984>>>>>>>>>    Procedure Set ComDoubleGripper Boolean value
21986>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
21987>>>>>>>>>    End_Procedure
21988>>>>>>>>>
21988>>>>>>>>>    Function ComShowExpandButton Returns Boolean
21990>>>>>>>>>        Boolean retVal
21990>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
21991>>>>>>>>>        Function_Return retVal
21992>>>>>>>>>    End_Function
21993>>>>>>>>>
21993>>>>>>>>>    Procedure Set ComShowExpandButton Boolean value
21995>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
21996>>>>>>>>>    End_Procedure
21997>>>>>>>>>
21997>>>>>>>>>    Function ComSelectedControl Returns Variant
21999>>>>>>>>>        Variant retVal
21999>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
22000>>>>>>>>>        Function_Return retVal
22001>>>>>>>>>    End_Function
22002>>>>>>>>>
22002>>>>>>>>>    Procedure Set ComSelectedControl Variant value
22004>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
22005>>>>>>>>>    End_Procedure
22006>>>>>>>>>
22006>>>>>>>>>    Function ComCustomizeDialogPresent Returns Boolean
22008>>>>>>>>>        Boolean retVal
22008>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to retVal
22009>>>>>>>>>        Function_Return retVal
22010>>>>>>>>>    End_Function
22011>>>>>>>>>
22011>>>>>>>>>    Procedure Set ComCustomizeDialogPresent Boolean value
22013>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to value
22014>>>>>>>>>    End_Procedure
22015>>>>>>>>>
22015>>>>>>>>>    Function ComTextOrientation Returns XTPBarTextOrientation
22017>>>>>>>>>        XTPBarTextOrientation retVal
22017>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_I4 to retVal
22018>>>>>>>>>        Function_Return retVal
22019>>>>>>>>>    End_Function
22020>>>>>>>>>
22020>>>>>>>>>    Procedure Set ComTextOrientation XTPBarTextOrientation value
22022>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_I4 to value
22023>>>>>>>>>    End_Procedure
22024>>>>>>>>>
22024>>>>>>>>>    Function ComType Returns XTPBarType
22026>>>>>>>>>        Handle hDispatchDriver
22026>>>>>>>>>        XTPBarType retVal
22026>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22027>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
22028>>>>>>>>>        Function_Return retVal
22029>>>>>>>>>    End_Function
22030>>>>>>>>>
22030>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
22032>>>>>>>>>        Handle hDispatchDriver
22032>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22033>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22034>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
22035>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
22036>>>>>>>>>    End_Procedure
22037>>>>>>>>>
22037>>>>>>>>>    Function ComBuiltIn Returns Boolean
22039>>>>>>>>>        Handle hDispatchDriver
22039>>>>>>>>>        Boolean retVal
22039>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22040>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
22041>>>>>>>>>        Function_Return retVal
22042>>>>>>>>>    End_Function
22043>>>>>>>>>
22043>>>>>>>>>    Procedure ComDelete
22045>>>>>>>>>        Handle hDispatchDriver
22045>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22046>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
22047>>>>>>>>>    End_Procedure
22048>>>>>>>>>
22048>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
22050>>>>>>>>>        Handle hDispatchDriver
22050>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22051>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22052>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
22053>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
22054>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
22055>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
22056>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
22057>>>>>>>>>    End_Procedure
22058>>>>>>>>>
22058>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
22060>>>>>>>>>        Handle hDispatchDriver
22060>>>>>>>>>        OLE_HANDLE retVal
22060>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22061>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
22062>>>>>>>>>        Function_Return retVal
22063>>>>>>>>>    End_Function
22064>>>>>>>>>
22064>>>>>>>>>    Function ComCommandBars Returns Variant
22066>>>>>>>>>        Handle hDispatchDriver
22066>>>>>>>>>        Variant retVal
22066>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22067>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
22068>>>>>>>>>        Function_Return retVal
22069>>>>>>>>>    End_Function
22070>>>>>>>>>
22070>>>>>>>>>    Function ComControls Returns Variant
22072>>>>>>>>>        Handle hDispatchDriver
22072>>>>>>>>>        Variant retVal
22072>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22073>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
22074>>>>>>>>>        Function_Return retVal
22075>>>>>>>>>    End_Function
22076>>>>>>>>>
22076>>>>>>>>>    Function ComShowPopup Variant llFlags Variant llx Variant lly Returns Integer
22078>>>>>>>>>        Handle hDispatchDriver
22078>>>>>>>>>        Integer retVal
22078>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22079>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
22080>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFlags
22081>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llx
22082>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lly
22083>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_I4 to retVal
22084>>>>>>>>>        Function_Return retVal
22085>>>>>>>>>    End_Function
22086>>>>>>>>>
22086>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
22088>>>>>>>>>        Handle hDispatchDriver
22088>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22089>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22090>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
22091>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
22092>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
22093>>>>>>>>>    End_Procedure
22094>>>>>>>>>
22094>>>>>>>>>    Function ComGetIconWidth Returns Integer
22096>>>>>>>>>        Handle hDispatchDriver
22096>>>>>>>>>        Integer retVal
22096>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22097>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
22098>>>>>>>>>        Function_Return retVal
22099>>>>>>>>>    End_Function
22100>>>>>>>>>
22100>>>>>>>>>    Function ComGetIconHeight Returns Integer
22102>>>>>>>>>        Handle hDispatchDriver
22102>>>>>>>>>        Integer retVal
22102>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22103>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
22104>>>>>>>>>        Function_Return retVal
22105>>>>>>>>>    End_Function
22106>>>>>>>>>
22106>>>>>>>>>    Procedure ComSetTearOffPopup String llCaption Integer llId Integer llWidth
22108>>>>>>>>>        Handle hDispatchDriver
22108>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22109>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
22110>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
22111>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22112>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
22113>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
22114>>>>>>>>>    End_Procedure
22115>>>>>>>>>
22115>>>>>>>>>    Function ComParent Returns Variant
22117>>>>>>>>>        Handle hDispatchDriver
22117>>>>>>>>>        Variant retVal
22117>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22118>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
22119>>>>>>>>>        Function_Return retVal
22120>>>>>>>>>    End_Function
22121>>>>>>>>>
22121>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
22123>>>>>>>>>        Handle hDispatchDriver
22123>>>>>>>>>        Variant retVal
22123>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22124>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22125>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
22126>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
22127>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
22128>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
22129>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
22130>>>>>>>>>        Function_Return retVal
22131>>>>>>>>>    End_Function
22132>>>>>>>>>
22132>>>>>>>>>    Procedure ComSetPopupToolBar Boolean llToolBarType
22134>>>>>>>>>        Handle hDispatchDriver
22134>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22135>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22136>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llToolBarType
22137>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
22138>>>>>>>>>    End_Procedure
22139>>>>>>>>>
22139>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
22141>>>>>>>>>        Handle hDispatchDriver
22141>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22142>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22143>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22144>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22145>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
22146>>>>>>>>>    End_Procedure
22147>>>>>>>>>
22147>>>>>>>>>    Procedure ComModifyStyle XTPCommandBarStyle llRemove XTPCommandBarStyle llAdd
22149>>>>>>>>>        Handle hDispatchDriver
22149>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22150>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22151>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22152>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22153>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
22154>>>>>>>>>    End_Procedure
22155>>>>>>>>>
22155>>>>>>>>>    Procedure ComRedrawBar
22157>>>>>>>>>        Handle hDispatchDriver
22157>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22158>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
22159>>>>>>>>>    End_Procedure
22160>>>>>>>>>
22160>>>>>>>>>    Procedure ComRecalcLayout
22162>>>>>>>>>        Handle hDispatchDriver
22162>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22163>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
22164>>>>>>>>>    End_Procedure
22165>>>>>>>>>
22165>>>>>>>>>    Procedure ComReset
22167>>>>>>>>>        Handle hDispatchDriver
22167>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22168>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
22169>>>>>>>>>    End_Procedure
22170>>>>>>>>>End_Class
22171>>>>>>>>>
22171>>>>>>>>>// CoClass
22171>>>>>>>>>// CLSID: {C0DE2200-231A-4BE6-AA1B-9BA4B04CA048}
22171>>>>>>>>>Class cCJCommandBar is a cComAutomationObject
22172>>>>>>>>>    Import_Class_Protocol cCJICommandBar
22173>>>>>>>>>
22173>>>>>>>>>    Procedure Construct_Object
22175>>>>>>>>>        Forward Send Construct_Object
22177>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22178>>>>>>>>>    End_Procedure
22179>>>>>>>>>End_Class
22180>>>>>>>>>
22180>>>>>>>>>// CLSID: {C0DE2200-E7D2-4506-8D3F-D986E0B345D4}
22180>>>>>>>>>Class cCJIMenuBarMDIMenu is a Mixin
22181>>>>>>>>>
22181>>>>>>>>>    Function ComCaption Returns String
22183>>>>>>>>>        String retVal
22183>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
22184>>>>>>>>>        Function_Return retVal
22185>>>>>>>>>    End_Function
22186>>>>>>>>>
22186>>>>>>>>>    Procedure Set ComCaption String value
22188>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
22189>>>>>>>>>    End_Procedure
22190>>>>>>>>>
22190>>>>>>>>>    Function ComDescription Returns String
22192>>>>>>>>>        String retVal
22192>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
22193>>>>>>>>>        Function_Return retVal
22194>>>>>>>>>    End_Function
22195>>>>>>>>>
22195>>>>>>>>>    Procedure Set ComDescription String value
22197>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
22198>>>>>>>>>    End_Procedure
22199>>>>>>>>>
22199>>>>>>>>>    Function ComId Returns Integer
22201>>>>>>>>>        Handle hDispatchDriver
22201>>>>>>>>>        Integer retVal
22201>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22202>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
22203>>>>>>>>>        Function_Return retVal
22204>>>>>>>>>    End_Function
22205>>>>>>>>>
22205>>>>>>>>>    Function ComControls Returns Variant
22207>>>>>>>>>        Handle hDispatchDriver
22207>>>>>>>>>        Variant retVal
22207>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22208>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
22209>>>>>>>>>        Function_Return retVal
22210>>>>>>>>>    End_Function
22211>>>>>>>>>End_Class
22212>>>>>>>>>
22212>>>>>>>>>// CoClass
22212>>>>>>>>>// CLSID: {C0DE2200-B93E-44AD-B277-1B0F84A20CBA}
22212>>>>>>>>>Class cCJComMenuBarMDIMenu is a cComAutomationObject
22213>>>>>>>>>    Import_Class_Protocol cCJIMenuBarMDIMenu
22214>>>>>>>>>
22214>>>>>>>>>    Procedure Construct_Object
22216>>>>>>>>>        Forward Send Construct_Object
22218>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22219>>>>>>>>>    End_Procedure
22220>>>>>>>>>End_Class
22221>>>>>>>>>
22221>>>>>>>>>// CLSID: {C0DE2200-3D4B-41E3-B659-0F8E354111DF}
22221>>>>>>>>>Class cCJIMenuBarMDIMenus is a Mixin
22222>>>>>>>>>
22222>>>>>>>>>    // Gets the number of menus in the collection.
22222>>>>>>>>>    Function ComCount Returns Integer
22224>>>>>>>>>        Handle hDispatchDriver
22224>>>>>>>>>        Integer retVal
22224>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22225>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
22226>>>>>>>>>        Function_Return retVal
22227>>>>>>>>>    End_Function
22228>>>>>>>>>
22228>>>>>>>>>    // Gets an item from the collection by its Id.
22228>>>>>>>>>    Function ComItem Integer llId Returns Variant
22230>>>>>>>>>        Handle hDispatchDriver
22230>>>>>>>>>        Variant retVal
22230>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22231>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22232>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22233>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
22234>>>>>>>>>        Function_Return retVal
22235>>>>>>>>>    End_Function
22236>>>>>>>>>
22236>>>>>>>>>    Function Com_NewEnum Returns Variant
22238>>>>>>>>>        Handle hDispatchDriver
22238>>>>>>>>>        Variant retVal
22238>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22239>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
22240>>>>>>>>>        Function_Return retVal
22241>>>>>>>>>    End_Function
22242>>>>>>>>>
22242>>>>>>>>>    Function ComAdd Integer llId String llCaption String llDescription Returns Variant
22244>>>>>>>>>        Handle hDispatchDriver
22244>>>>>>>>>        Variant retVal
22244>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22245>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
22246>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22247>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
22248>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llDescription
22249>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
22250>>>>>>>>>        Function_Return retVal
22251>>>>>>>>>    End_Function
22252>>>>>>>>>
22252>>>>>>>>>    // Deletes all of the menus from the collection
22252>>>>>>>>>    Procedure ComDeleteAll
22254>>>>>>>>>        Handle hDispatchDriver
22254>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22255>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
22256>>>>>>>>>    End_Procedure
22257>>>>>>>>>End_Class
22258>>>>>>>>>
22258>>>>>>>>>// CoClass
22258>>>>>>>>>// CLSID: {C0DE2200-84B8-4930-8B30-5E56EC7F9860}
22258>>>>>>>>>Class cCJComMenuBarMDIMenus is a cComAutomationObject
22259>>>>>>>>>    Import_Class_Protocol cCJIMenuBarMDIMenus
22260>>>>>>>>>
22260>>>>>>>>>    Procedure Construct_Object
22262>>>>>>>>>        Forward Send Construct_Object
22264>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22265>>>>>>>>>    End_Procedure
22266>>>>>>>>>End_Class
22267>>>>>>>>>
22267>>>>>>>>>// CLSID: {C0DE2200-FED3-4FBC-B204-59C231E6092B}
22267>>>>>>>>>Class cCJIMenuBar is a Mixin
22268>>>>>>>>>
22268>>>>>>>>>    Function ComTitle Returns String
22270>>>>>>>>>        String retVal
22270>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
22271>>>>>>>>>        Function_Return retVal
22272>>>>>>>>>    End_Function
22273>>>>>>>>>
22273>>>>>>>>>    Procedure Set ComTitle String value
22275>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
22276>>>>>>>>>    End_Procedure
22277>>>>>>>>>
22277>>>>>>>>>    Function ComVisible Returns Boolean
22279>>>>>>>>>        Boolean retVal
22279>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
22280>>>>>>>>>        Function_Return retVal
22281>>>>>>>>>    End_Function
22282>>>>>>>>>
22282>>>>>>>>>    Procedure Set ComVisible Boolean value
22284>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
22285>>>>>>>>>    End_Procedure
22286>>>>>>>>>
22286>>>>>>>>>    Function ComPosition Returns XTPBarPosition
22288>>>>>>>>>        XTPBarPosition retVal
22288>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
22289>>>>>>>>>        Function_Return retVal
22290>>>>>>>>>    End_Function
22291>>>>>>>>>
22291>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
22293>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
22294>>>>>>>>>    End_Procedure
22295>>>>>>>>>
22295>>>>>>>>>    Function ComBarID Returns Integer
22297>>>>>>>>>        Integer retVal
22297>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
22298>>>>>>>>>        Function_Return retVal
22299>>>>>>>>>    End_Function
22300>>>>>>>>>
22300>>>>>>>>>    Procedure Set ComBarID Integer value
22302>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
22303>>>>>>>>>    End_Procedure
22304>>>>>>>>>
22304>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
22306>>>>>>>>>        Boolean retVal
22306>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
22307>>>>>>>>>        Function_Return retVal
22308>>>>>>>>>    End_Function
22309>>>>>>>>>
22309>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
22311>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
22312>>>>>>>>>    End_Procedure
22313>>>>>>>>>
22313>>>>>>>>>    Function ComWidth Returns Integer
22315>>>>>>>>>        Integer retVal
22315>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
22316>>>>>>>>>        Function_Return retVal
22317>>>>>>>>>    End_Function
22318>>>>>>>>>
22318>>>>>>>>>    Procedure Set ComWidth Integer value
22320>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
22321>>>>>>>>>    End_Procedure
22322>>>>>>>>>
22322>>>>>>>>>    Function ComCloseable Returns Boolean
22324>>>>>>>>>        Boolean retVal
22324>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
22325>>>>>>>>>        Function_Return retVal
22326>>>>>>>>>    End_Function
22327>>>>>>>>>
22327>>>>>>>>>    Procedure Set ComCloseable Boolean value
22329>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
22330>>>>>>>>>    End_Procedure
22331>>>>>>>>>
22331>>>>>>>>>    Function ComEnableAnimation Returns Boolean
22333>>>>>>>>>        Boolean retVal
22333>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
22334>>>>>>>>>        Function_Return retVal
22335>>>>>>>>>    End_Function
22336>>>>>>>>>
22336>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
22338>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
22339>>>>>>>>>    End_Procedure
22340>>>>>>>>>
22340>>>>>>>>>    Function ComShowGripper Returns Boolean
22342>>>>>>>>>        Boolean retVal
22342>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
22343>>>>>>>>>        Function_Return retVal
22344>>>>>>>>>    End_Function
22345>>>>>>>>>
22345>>>>>>>>>    Procedure Set ComShowGripper Boolean value
22347>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
22348>>>>>>>>>    End_Procedure
22349>>>>>>>>>
22349>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
22351>>>>>>>>>        XTPButtonStyle retVal
22351>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
22352>>>>>>>>>        Function_Return retVal
22353>>>>>>>>>    End_Function
22354>>>>>>>>>
22354>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
22356>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
22357>>>>>>>>>    End_Procedure
22358>>>>>>>>>
22358>>>>>>>>>    Function ComCustomizable Returns Boolean
22360>>>>>>>>>        Boolean retVal
22360>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
22361>>>>>>>>>        Function_Return retVal
22362>>>>>>>>>    End_Function
22363>>>>>>>>>
22363>>>>>>>>>    Procedure Set ComCustomizable Boolean value
22365>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
22366>>>>>>>>>    End_Procedure
22367>>>>>>>>>
22367>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
22369>>>>>>>>>        Boolean retVal
22369>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
22370>>>>>>>>>        Function_Return retVal
22371>>>>>>>>>    End_Function
22372>>>>>>>>>
22372>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
22374>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
22375>>>>>>>>>    End_Procedure
22376>>>>>>>>>
22376>>>>>>>>>    Function ComShowExpandButton Returns Boolean
22378>>>>>>>>>        Boolean retVal
22378>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
22379>>>>>>>>>        Function_Return retVal
22380>>>>>>>>>    End_Function
22381>>>>>>>>>
22381>>>>>>>>>    Procedure Set ComShowExpandButton Boolean value
22383>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
22384>>>>>>>>>    End_Procedure
22385>>>>>>>>>
22385>>>>>>>>>    Function ComSelectedControl Returns Variant
22387>>>>>>>>>        Variant retVal
22387>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
22388>>>>>>>>>        Function_Return retVal
22389>>>>>>>>>    End_Function
22390>>>>>>>>>
22390>>>>>>>>>    Procedure Set ComSelectedControl Variant value
22392>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
22393>>>>>>>>>    End_Procedure
22394>>>>>>>>>
22394>>>>>>>>>    Function ComCustomizeDialogPresent Returns Boolean
22396>>>>>>>>>        Boolean retVal
22396>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to retVal
22397>>>>>>>>>        Function_Return retVal
22398>>>>>>>>>    End_Function
22399>>>>>>>>>
22399>>>>>>>>>    Procedure Set ComCustomizeDialogPresent Boolean value
22401>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to value
22402>>>>>>>>>    End_Procedure
22403>>>>>>>>>
22403>>>>>>>>>    Function ComType Returns XTPBarType
22405>>>>>>>>>        Handle hDispatchDriver
22405>>>>>>>>>        XTPBarType retVal
22405>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22406>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
22407>>>>>>>>>        Function_Return retVal
22408>>>>>>>>>    End_Function
22409>>>>>>>>>
22409>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
22411>>>>>>>>>        Handle hDispatchDriver
22411>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22412>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22413>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
22414>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
22415>>>>>>>>>    End_Procedure
22416>>>>>>>>>
22416>>>>>>>>>    Function ComBuiltIn Returns Boolean
22418>>>>>>>>>        Handle hDispatchDriver
22418>>>>>>>>>        Boolean retVal
22418>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22419>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
22420>>>>>>>>>        Function_Return retVal
22421>>>>>>>>>    End_Function
22422>>>>>>>>>
22422>>>>>>>>>    Procedure ComDelete
22424>>>>>>>>>        Handle hDispatchDriver
22424>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22425>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
22426>>>>>>>>>    End_Procedure
22427>>>>>>>>>
22427>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
22429>>>>>>>>>        Handle hDispatchDriver
22429>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22430>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22431>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
22432>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
22433>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
22434>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
22435>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
22436>>>>>>>>>    End_Procedure
22437>>>>>>>>>
22437>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
22439>>>>>>>>>        Handle hDispatchDriver
22439>>>>>>>>>        OLE_HANDLE retVal
22439>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22440>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
22441>>>>>>>>>        Function_Return retVal
22442>>>>>>>>>    End_Function
22443>>>>>>>>>
22443>>>>>>>>>    Function ComCommandBars Returns Variant
22445>>>>>>>>>        Handle hDispatchDriver
22445>>>>>>>>>        Variant retVal
22445>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22446>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
22447>>>>>>>>>        Function_Return retVal
22448>>>>>>>>>    End_Function
22449>>>>>>>>>
22449>>>>>>>>>    Function ComControls Returns Variant
22451>>>>>>>>>        Handle hDispatchDriver
22451>>>>>>>>>        Variant retVal
22451>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22452>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
22453>>>>>>>>>        Function_Return retVal
22454>>>>>>>>>    End_Function
22455>>>>>>>>>
22455>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
22457>>>>>>>>>        Handle hDispatchDriver
22457>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22458>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22459>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
22460>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
22461>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
22462>>>>>>>>>    End_Procedure
22463>>>>>>>>>
22463>>>>>>>>>    Function ComGetIconWidth Returns Integer
22465>>>>>>>>>        Handle hDispatchDriver
22465>>>>>>>>>        Integer retVal
22465>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22466>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
22467>>>>>>>>>        Function_Return retVal
22468>>>>>>>>>    End_Function
22469>>>>>>>>>
22469>>>>>>>>>    Function ComGetIconHeight Returns Integer
22471>>>>>>>>>        Handle hDispatchDriver
22471>>>>>>>>>        Integer retVal
22471>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22472>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
22473>>>>>>>>>        Function_Return retVal
22474>>>>>>>>>    End_Function
22475>>>>>>>>>
22475>>>>>>>>>    Function ComParent Returns Variant
22477>>>>>>>>>        Handle hDispatchDriver
22477>>>>>>>>>        Variant retVal
22477>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22478>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
22479>>>>>>>>>        Function_Return retVal
22480>>>>>>>>>    End_Function
22481>>>>>>>>>
22481>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
22483>>>>>>>>>        Handle hDispatchDriver
22483>>>>>>>>>        Variant retVal
22483>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22484>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22485>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
22486>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
22487>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
22488>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
22489>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
22490>>>>>>>>>        Function_Return retVal
22491>>>>>>>>>    End_Function
22492>>>>>>>>>
22492>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
22494>>>>>>>>>        Handle hDispatchDriver
22494>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22495>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22496>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22497>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22498>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
22499>>>>>>>>>    End_Procedure
22500>>>>>>>>>
22500>>>>>>>>>    Procedure ComModifyStyle XTPCommandBarStyle llRemove XTPCommandBarStyle llAdd
22502>>>>>>>>>        Handle hDispatchDriver
22502>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22503>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22504>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22505>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22506>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
22507>>>>>>>>>    End_Procedure
22508>>>>>>>>>
22508>>>>>>>>>    Procedure ComRedrawBar
22510>>>>>>>>>        Handle hDispatchDriver
22510>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22511>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
22512>>>>>>>>>    End_Procedure
22513>>>>>>>>>
22513>>>>>>>>>    Procedure ComRecalcLayout
22515>>>>>>>>>        Handle hDispatchDriver
22515>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22516>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
22517>>>>>>>>>    End_Procedure
22518>>>>>>>>>
22518>>>>>>>>>    Procedure ComReset
22520>>>>>>>>>        Handle hDispatchDriver
22520>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22521>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
22522>>>>>>>>>    End_Procedure
22523>>>>>>>>>
22523>>>>>>>>>    Function ComMDIMenus Returns Variant
22525>>>>>>>>>        Handle hDispatchDriver
22525>>>>>>>>>        Variant retVal
22525>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22526>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 130 OLE_VT_DISPATCH to retVal
22527>>>>>>>>>        Function_Return retVal
22528>>>>>>>>>    End_Function
22529>>>>>>>>>
22529>>>>>>>>>    Procedure ComSwitchMDIMenu Integer llId
22531>>>>>>>>>        Handle hDispatchDriver
22531>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22532>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22533>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22534>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 131 OLE_VT_VOID
22535>>>>>>>>>    End_Procedure
22536>>>>>>>>>End_Class
22537>>>>>>>>>
22537>>>>>>>>>// CoClass
22537>>>>>>>>>// CLSID: {C0DE2200-603B-4AB7-B560-A2E43ADB22FC}
22537>>>>>>>>>Class cCJComMenuBar is a cComAutomationObject
22538>>>>>>>>>    Import_Class_Protocol cCJIMenuBar
22539>>>>>>>>>
22539>>>>>>>>>    Procedure Construct_Object
22541>>>>>>>>>        Forward Send Construct_Object
22543>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22544>>>>>>>>>    End_Procedure
22545>>>>>>>>>End_Class
22546>>>>>>>>>
22546>>>>>>>>>// CLSID: {C0DE2200-9D11-4373-B444-BC1F646D2B4D}
22546>>>>>>>>>Class cCJICommandBarsContextMenus is a Mixin
22547>>>>>>>>>
22547>>>>>>>>>    // Gets the number of menus in the collection.
22547>>>>>>>>>    Function ComCount Returns Integer
22549>>>>>>>>>        Handle hDispatchDriver
22549>>>>>>>>>        Integer retVal
22549>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22550>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
22551>>>>>>>>>        Function_Return retVal
22552>>>>>>>>>    End_Function
22553>>>>>>>>>
22553>>>>>>>>>    // Gets an item from the collection by its index.
22553>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
22555>>>>>>>>>        Handle hDispatchDriver
22555>>>>>>>>>        Variant retVal
22555>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22556>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22557>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22558>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
22559>>>>>>>>>        Function_Return retVal
22560>>>>>>>>>    End_Function
22561>>>>>>>>>
22561>>>>>>>>>    Function Com_NewEnum Returns Variant
22563>>>>>>>>>        Handle hDispatchDriver
22563>>>>>>>>>        Variant retVal
22563>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22564>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
22565>>>>>>>>>        Function_Return retVal
22566>>>>>>>>>    End_Function
22567>>>>>>>>>
22567>>>>>>>>>    // Adds a new command bar to the collection.
22567>>>>>>>>>    Function ComAdd Integer llId String llCaption Returns Variant
22569>>>>>>>>>        Handle hDispatchDriver
22569>>>>>>>>>        Variant retVal
22569>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22570>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22571>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22572>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
22573>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
22574>>>>>>>>>        Function_Return retVal
22575>>>>>>>>>    End_Function
22576>>>>>>>>>
22576>>>>>>>>>    // Finds the specified menu
22576>>>>>>>>>    Function ComFind Integer llId Returns Variant
22578>>>>>>>>>        Handle hDispatchDriver
22578>>>>>>>>>        Variant retVal
22578>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22579>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22580>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22581>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
22582>>>>>>>>>        Function_Return retVal
22583>>>>>>>>>    End_Function
22584>>>>>>>>>
22584>>>>>>>>>    // Deletes all of the menus from the collection
22584>>>>>>>>>    Procedure ComDeleteAll
22586>>>>>>>>>        Handle hDispatchDriver
22586>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22587>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
22588>>>>>>>>>    End_Procedure
22589>>>>>>>>>
22589>>>>>>>>>    // Adds a new command bar to the collection.
22589>>>>>>>>>    Procedure ComAddPopup Variant llPopupBar
22591>>>>>>>>>        Handle hDispatchDriver
22591>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22592>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22593>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llPopupBar
22594>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
22595>>>>>>>>>    End_Procedure
22596>>>>>>>>>End_Class
22597>>>>>>>>>
22597>>>>>>>>>// CoClass
22597>>>>>>>>>// CLSID: {C0DE2200-E6F6-4FC8-8273-AD15CCF8D293}
22597>>>>>>>>>Class cCJCommandBarsContextMenus is a cComAutomationObject
22598>>>>>>>>>    Import_Class_Protocol cCJICommandBarsContextMenus
22599>>>>>>>>>
22599>>>>>>>>>    Procedure Construct_Object
22601>>>>>>>>>        Forward Send Construct_Object
22603>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22604>>>>>>>>>    End_Procedure
22605>>>>>>>>>End_Class
22606>>>>>>>>>
22606>>>>>>>>>// CLSID: {C0DE2200-37BE-497E-A56D-D0CBDF0B3F97}
22606>>>>>>>>>Class cCJITabToolBar is a Mixin
22607>>>>>>>>>
22607>>>>>>>>>    Function ComTitle Returns String
22609>>>>>>>>>        String retVal
22609>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
22610>>>>>>>>>        Function_Return retVal
22611>>>>>>>>>    End_Function
22612>>>>>>>>>
22612>>>>>>>>>    Procedure Set ComTitle String value
22614>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
22615>>>>>>>>>    End_Procedure
22616>>>>>>>>>
22616>>>>>>>>>    Function ComVisible Returns Boolean
22618>>>>>>>>>        Boolean retVal
22618>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
22619>>>>>>>>>        Function_Return retVal
22620>>>>>>>>>    End_Function
22621>>>>>>>>>
22621>>>>>>>>>    Procedure Set ComVisible Boolean value
22623>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
22624>>>>>>>>>    End_Procedure
22625>>>>>>>>>
22625>>>>>>>>>    Function ComPosition Returns XTPBarPosition
22627>>>>>>>>>        XTPBarPosition retVal
22627>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
22628>>>>>>>>>        Function_Return retVal
22629>>>>>>>>>    End_Function
22630>>>>>>>>>
22630>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
22632>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
22633>>>>>>>>>    End_Procedure
22634>>>>>>>>>
22634>>>>>>>>>    Function ComBarID Returns Integer
22636>>>>>>>>>        Integer retVal
22636>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
22637>>>>>>>>>        Function_Return retVal
22638>>>>>>>>>    End_Function
22639>>>>>>>>>
22639>>>>>>>>>    Procedure Set ComBarID Integer value
22641>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
22642>>>>>>>>>    End_Procedure
22643>>>>>>>>>
22643>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
22645>>>>>>>>>        Boolean retVal
22645>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
22646>>>>>>>>>        Function_Return retVal
22647>>>>>>>>>    End_Function
22648>>>>>>>>>
22648>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
22650>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
22651>>>>>>>>>    End_Procedure
22652>>>>>>>>>
22652>>>>>>>>>    Function ComWidth Returns Integer
22654>>>>>>>>>        Integer retVal
22654>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
22655>>>>>>>>>        Function_Return retVal
22656>>>>>>>>>    End_Function
22657>>>>>>>>>
22657>>>>>>>>>    Procedure Set ComWidth Integer value
22659>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
22660>>>>>>>>>    End_Procedure
22661>>>>>>>>>
22661>>>>>>>>>    Function ComCloseable Returns Boolean
22663>>>>>>>>>        Boolean retVal
22663>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
22664>>>>>>>>>        Function_Return retVal
22665>>>>>>>>>    End_Function
22666>>>>>>>>>
22666>>>>>>>>>    Procedure Set ComCloseable Boolean value
22668>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
22669>>>>>>>>>    End_Procedure
22670>>>>>>>>>
22670>>>>>>>>>    Function ComEnableAnimation Returns Boolean
22672>>>>>>>>>        Boolean retVal
22672>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
22673>>>>>>>>>        Function_Return retVal
22674>>>>>>>>>    End_Function
22675>>>>>>>>>
22675>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
22677>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
22678>>>>>>>>>    End_Procedure
22679>>>>>>>>>
22679>>>>>>>>>    Function ComShowGripper Returns Boolean
22681>>>>>>>>>        Boolean retVal
22681>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
22682>>>>>>>>>        Function_Return retVal
22683>>>>>>>>>    End_Function
22684>>>>>>>>>
22684>>>>>>>>>    Procedure Set ComShowGripper Boolean value
22686>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
22687>>>>>>>>>    End_Procedure
22688>>>>>>>>>
22688>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
22690>>>>>>>>>        XTPButtonStyle retVal
22690>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
22691>>>>>>>>>        Function_Return retVal
22692>>>>>>>>>    End_Function
22693>>>>>>>>>
22693>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
22695>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
22696>>>>>>>>>    End_Procedure
22697>>>>>>>>>
22697>>>>>>>>>    Function ComCustomizable Returns Boolean
22699>>>>>>>>>        Boolean retVal
22699>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
22700>>>>>>>>>        Function_Return retVal
22701>>>>>>>>>    End_Function
22702>>>>>>>>>
22702>>>>>>>>>    Procedure Set ComCustomizable Boolean value
22704>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
22705>>>>>>>>>    End_Procedure
22706>>>>>>>>>
22706>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
22708>>>>>>>>>        Boolean retVal
22708>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
22709>>>>>>>>>        Function_Return retVal
22710>>>>>>>>>    End_Function
22711>>>>>>>>>
22711>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
22713>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
22714>>>>>>>>>    End_Procedure
22715>>>>>>>>>
22715>>>>>>>>>    Function ComDoubleGripper Returns Boolean
22717>>>>>>>>>        Boolean retVal
22717>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
22718>>>>>>>>>        Function_Return retVal
22719>>>>>>>>>    End_Function
22720>>>>>>>>>
22720>>>>>>>>>    Procedure Set ComDoubleGripper Boolean value
22722>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
22723>>>>>>>>>    End_Procedure
22724>>>>>>>>>
22724>>>>>>>>>    Function ComShowExpandButton Returns Boolean
22726>>>>>>>>>        Boolean retVal
22726>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
22727>>>>>>>>>        Function_Return retVal
22728>>>>>>>>>    End_Function
22729>>>>>>>>>
22729>>>>>>>>>    Procedure Set ComShowExpandButton Boolean value
22731>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
22732>>>>>>>>>    End_Procedure
22733>>>>>>>>>
22733>>>>>>>>>    Function ComSelectedControl Returns Variant
22735>>>>>>>>>        Variant retVal
22735>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
22736>>>>>>>>>        Function_Return retVal
22737>>>>>>>>>    End_Function
22738>>>>>>>>>
22738>>>>>>>>>    Procedure Set ComSelectedControl Variant value
22740>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
22741>>>>>>>>>    End_Procedure
22742>>>>>>>>>
22742>>>>>>>>>    Function ComCustomizeDialogPresent Returns Boolean
22744>>>>>>>>>        Boolean retVal
22744>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to retVal
22745>>>>>>>>>        Function_Return retVal
22746>>>>>>>>>    End_Function
22747>>>>>>>>>
22747>>>>>>>>>    Procedure Set ComCustomizeDialogPresent Boolean value
22749>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to value
22750>>>>>>>>>    End_Procedure
22751>>>>>>>>>
22751>>>>>>>>>    Function ComMinimumWidth Returns Integer
22753>>>>>>>>>        Integer retVal
22753>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 104 OLE_VT_I4 to retVal
22754>>>>>>>>>        Function_Return retVal
22755>>>>>>>>>    End_Function
22756>>>>>>>>>
22756>>>>>>>>>    Procedure Set ComMinimumWidth Integer value
22758>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 104 OLE_VT_I4 to value
22759>>>>>>>>>    End_Procedure
22760>>>>>>>>>
22760>>>>>>>>>    Function ComAllowReorder Returns Boolean
22762>>>>>>>>>        Boolean retVal
22762>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_BOOL to retVal
22763>>>>>>>>>        Function_Return retVal
22764>>>>>>>>>    End_Function
22765>>>>>>>>>
22765>>>>>>>>>    Procedure Set ComAllowReorder Boolean value
22767>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_BOOL to value
22768>>>>>>>>>    End_Procedure
22769>>>>>>>>>
22769>>>>>>>>>    Function ComType Returns XTPBarType
22771>>>>>>>>>        Handle hDispatchDriver
22771>>>>>>>>>        XTPBarType retVal
22771>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22772>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
22773>>>>>>>>>        Function_Return retVal
22774>>>>>>>>>    End_Function
22775>>>>>>>>>
22775>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
22777>>>>>>>>>        Handle hDispatchDriver
22777>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22778>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22779>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
22780>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
22781>>>>>>>>>    End_Procedure
22782>>>>>>>>>
22782>>>>>>>>>    Function ComBuiltIn Returns Boolean
22784>>>>>>>>>        Handle hDispatchDriver
22784>>>>>>>>>        Boolean retVal
22784>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22785>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
22786>>>>>>>>>        Function_Return retVal
22787>>>>>>>>>    End_Function
22788>>>>>>>>>
22788>>>>>>>>>    Procedure ComDelete
22790>>>>>>>>>        Handle hDispatchDriver
22790>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22791>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
22792>>>>>>>>>    End_Procedure
22793>>>>>>>>>
22793>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
22795>>>>>>>>>        Handle hDispatchDriver
22795>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22796>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22797>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
22798>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
22799>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
22800>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
22801>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
22802>>>>>>>>>    End_Procedure
22803>>>>>>>>>
22803>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
22805>>>>>>>>>        Handle hDispatchDriver
22805>>>>>>>>>        OLE_HANDLE retVal
22805>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22806>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
22807>>>>>>>>>        Function_Return retVal
22808>>>>>>>>>    End_Function
22809>>>>>>>>>
22809>>>>>>>>>    Function ComCommandBars Returns Variant
22811>>>>>>>>>        Handle hDispatchDriver
22811>>>>>>>>>        Variant retVal
22811>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22812>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
22813>>>>>>>>>        Function_Return retVal
22814>>>>>>>>>    End_Function
22815>>>>>>>>>
22815>>>>>>>>>    Function ComControls Returns Variant
22817>>>>>>>>>        Handle hDispatchDriver
22817>>>>>>>>>        Variant retVal
22817>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22818>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
22819>>>>>>>>>        Function_Return retVal
22820>>>>>>>>>    End_Function
22821>>>>>>>>>
22821>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
22823>>>>>>>>>        Handle hDispatchDriver
22823>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22824>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22825>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
22826>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
22827>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
22828>>>>>>>>>    End_Procedure
22829>>>>>>>>>
22829>>>>>>>>>    Function ComGetIconWidth Returns Integer
22831>>>>>>>>>        Handle hDispatchDriver
22831>>>>>>>>>        Integer retVal
22831>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22832>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
22833>>>>>>>>>        Function_Return retVal
22834>>>>>>>>>    End_Function
22835>>>>>>>>>
22835>>>>>>>>>    Function ComGetIconHeight Returns Integer
22837>>>>>>>>>        Handle hDispatchDriver
22837>>>>>>>>>        Integer retVal
22837>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22838>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
22839>>>>>>>>>        Function_Return retVal
22840>>>>>>>>>    End_Function
22841>>>>>>>>>
22841>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
22843>>>>>>>>>        Handle hDispatchDriver
22843>>>>>>>>>        Variant retVal
22843>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22844>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22845>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
22846>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
22847>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
22848>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
22849>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
22850>>>>>>>>>        Function_Return retVal
22851>>>>>>>>>    End_Function
22852>>>>>>>>>
22852>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
22854>>>>>>>>>        Handle hDispatchDriver
22854>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22855>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22856>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22857>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22858>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
22859>>>>>>>>>    End_Procedure
22860>>>>>>>>>
22860>>>>>>>>>    Procedure ComModifyStyle XTPCommandBarStyle llRemove XTPCommandBarStyle llAdd
22862>>>>>>>>>        Handle hDispatchDriver
22862>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22863>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22864>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22865>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22866>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
22867>>>>>>>>>    End_Procedure
22868>>>>>>>>>
22868>>>>>>>>>    Procedure ComRedrawBar
22870>>>>>>>>>        Handle hDispatchDriver
22870>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22871>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
22872>>>>>>>>>    End_Procedure
22873>>>>>>>>>
22873>>>>>>>>>    Procedure ComRecalcLayout
22875>>>>>>>>>        Handle hDispatchDriver
22875>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22876>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
22877>>>>>>>>>    End_Procedure
22878>>>>>>>>>
22878>>>>>>>>>    Procedure ComReset
22880>>>>>>>>>        Handle hDispatchDriver
22880>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22881>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
22882>>>>>>>>>    End_Procedure
22883>>>>>>>>>
22883>>>>>>>>>    Function ComInsertCategory Integer llIndex String llCategory Returns Variant
22885>>>>>>>>>        Handle hDispatchDriver
22885>>>>>>>>>        Variant retVal
22885>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22886>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22887>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22888>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCategory
22889>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
22890>>>>>>>>>        Function_Return retVal
22891>>>>>>>>>    End_Function
22892>>>>>>>>>
22892>>>>>>>>>    Function ComCategoryCount Returns Integer
22894>>>>>>>>>        Handle hDispatchDriver
22894>>>>>>>>>        Integer retVal
22894>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22895>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
22896>>>>>>>>>        Function_Return retVal
22897>>>>>>>>>    End_Function
22898>>>>>>>>>
22898>>>>>>>>>    Function ComCategory Integer llIndex Returns Variant
22900>>>>>>>>>        Handle hDispatchDriver
22900>>>>>>>>>        Variant retVal
22900>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22901>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22902>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22903>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
22904>>>>>>>>>        Function_Return retVal
22905>>>>>>>>>    End_Function
22906>>>>>>>>>
22906>>>>>>>>>    Function Com_NewEnum Returns Variant
22908>>>>>>>>>        Handle hDispatchDriver
22908>>>>>>>>>        Variant retVal
22908>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22909>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
22910>>>>>>>>>        Function_Return retVal
22911>>>>>>>>>    End_Function
22912>>>>>>>>>
22912>>>>>>>>>    Procedure ComRemoveCategory Integer llIndex
22914>>>>>>>>>        Handle hDispatchDriver
22914>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22915>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22916>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22917>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 102 OLE_VT_VOID
22918>>>>>>>>>    End_Procedure
22919>>>>>>>>>
22919>>>>>>>>>    Function ComTabPaintManager Returns Variant
22921>>>>>>>>>        Handle hDispatchDriver
22921>>>>>>>>>        Variant retVal
22921>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22922>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_DISPATCH to retVal
22923>>>>>>>>>        Function_Return retVal
22924>>>>>>>>>    End_Function
22925>>>>>>>>>
22925>>>>>>>>>    Procedure ComUpdateTabs
22927>>>>>>>>>        Handle hDispatchDriver
22927>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22928>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 105 OLE_VT_VOID
22929>>>>>>>>>    End_Procedure
22930>>>>>>>>>End_Class
22931>>>>>>>>>
22931>>>>>>>>>// CLSID: {C0DE2200-8B30-4FE9-8F91-C1B573CF9AD5}
22931>>>>>>>>>Class cCJITabToolBarEvents is a Mixin
22932>>>>>>>>>
22932>>>>>>>>>    Procedure OnComSelectedChanged Variant llItem
22934>>>>>>>>>    End_Procedure
22935>>>>>>>>>
22935>>>>>>>>>    Procedure OnComBeforeItemClick Variant llItem Variant llCancel
22937>>>>>>>>>    End_Procedure
22938>>>>>>>>>
22938>>>>>>>>>    Procedure RegisterComEvents
22940>>>>>>>>>        Send RegisterComEvent 1 msg_OnComSelectedChanged
22941>>>>>>>>>        Send RegisterComEvent 4 msg_OnComBeforeItemClick
22942>>>>>>>>>    End_Procedure
22943>>>>>>>>>End_Class
22944>>>>>>>>>
22944>>>>>>>>>// CoClass
22944>>>>>>>>>// CLSID: {C0DE2200-37BA-4711-934F-C9612B6E00E5}
22944>>>>>>>>>Class cCJComTabToolBar is a cComAutomationObject
22945>>>>>>>>>    Import_Class_Protocol cCJITabToolBar
22946>>>>>>>>>    Import_Class_Protocol cCJITabToolBarEvents
22947>>>>>>>>>
22947>>>>>>>>>    Procedure Construct_Object
22949>>>>>>>>>        Forward Send Construct_Object
22951>>>>>>>>>        Set psEventId to "{C0DE2200-8B30-4FE9-8F91-C1B573CF9AD5}"
22952>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22953>>>>>>>>>    End_Procedure
22954>>>>>>>>>End_Class
22955>>>>>>>>>
22955>>>>>>>>>// CLSID: {C0DE2200-60E7-4964-8F11-5D62D28407B9}
22955>>>>>>>>>Class cCJIRibbonGroups is a Mixin
22956>>>>>>>>>
22956>>>>>>>>>    Function ComInsertGroup Integer llIndex String llCaption Integer llId Returns Variant
22958>>>>>>>>>        Handle hDispatchDriver
22958>>>>>>>>>        Variant retVal
22958>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22959>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
22960>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22961>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
22962>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22963>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
22964>>>>>>>>>        Function_Return retVal
22965>>>>>>>>>    End_Function
22966>>>>>>>>>
22966>>>>>>>>>    Function ComGroupCount Returns Integer
22968>>>>>>>>>        Handle hDispatchDriver
22968>>>>>>>>>        Integer retVal
22968>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22969>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
22970>>>>>>>>>        Function_Return retVal
22971>>>>>>>>>    End_Function
22972>>>>>>>>>
22972>>>>>>>>>    Function ComGroup Integer llIndex Returns Variant
22974>>>>>>>>>        Handle hDispatchDriver
22974>>>>>>>>>        Variant retVal
22974>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22975>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22976>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22977>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
22978>>>>>>>>>        Function_Return retVal
22979>>>>>>>>>    End_Function
22980>>>>>>>>>
22980>>>>>>>>>    Function Com_NewEnum Returns Variant
22982>>>>>>>>>        Handle hDispatchDriver
22982>>>>>>>>>        Variant retVal
22982>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22983>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
22984>>>>>>>>>        Function_Return retVal
22985>>>>>>>>>    End_Function
22986>>>>>>>>>
22986>>>>>>>>>    Function ComAddGroup String llCaption Integer llId Returns Variant
22988>>>>>>>>>        Handle hDispatchDriver
22988>>>>>>>>>        Variant retVal
22988>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22989>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22990>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
22991>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22992>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_DISPATCH to retVal
22993>>>>>>>>>        Function_Return retVal
22994>>>>>>>>>    End_Function
22995>>>>>>>>>
22995>>>>>>>>>    Procedure ComRemoveGroup Integer llIndex
22997>>>>>>>>>        Handle hDispatchDriver
22997>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22998>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22999>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
23000>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 103 OLE_VT_VOID
23001>>>>>>>>>    End_Procedure
23002>>>>>>>>>
23002>>>>>>>>>    Procedure ComRemoveAll
23004>>>>>>>>>        Handle hDispatchDriver
23004>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23005>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 104 OLE_VT_VOID
23006>>>>>>>>>    End_Procedure
23007>>>>>>>>>
23007>>>>>>>>>    Function ComRibbonTab Returns Variant
23009>>>>>>>>>        Handle hDispatchDriver
23009>>>>>>>>>        Variant retVal
23009>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23010>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_DISPATCH to retVal
23011>>>>>>>>>        Function_Return retVal
23012>>>>>>>>>    End_Function
23013>>>>>>>>>End_Class
23014>>>>>>>>>
23014>>>>>>>>>// CoClass
23014>>>>>>>>>// CLSID: {C0DE2200-1A42-4B87-9E48-28934AC041E5}
23014>>>>>>>>>Class cCJRibbonGroups is a cComAutomationObject
23015>>>>>>>>>    Import_Class_Protocol cCJIRibbonGroups
23016>>>>>>>>>
23016>>>>>>>>>    Procedure Construct_Object
23018>>>>>>>>>        Forward Send Construct_Object
23020>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
23021>>>>>>>>>    End_Procedure
23022>>>>>>>>>End_Class
23023>>>>>>>>>
23023>>>>>>>>>// CLSID: {C0DE2200-0A27-4B80-857D-192A539AE88D}
23023>>>>>>>>>Class cCJIRibbonTab is a Mixin
23024>>>>>>>>>
23024>>>>>>>>>    Function ComCaption Returns String
23026>>>>>>>>>        String retVal
23026>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
23027>>>>>>>>>        Function_Return retVal
23028>>>>>>>>>    End_Function
23029>>>>>>>>>
23029>>>>>>>>>    Procedure Set ComCaption String value
23031>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
23032>>>>>>>>>    End_Procedure
23033>>>>>>>>>
23033>>>>>>>>>    Function ComTag Returns Variant
23035>>>>>>>>>        Variant retVal
23035>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_VARIANT to retVal
23036>>>>>>>>>        Function_Return retVal
23037>>>>>>>>>    End_Function
23038>>>>>>>>>
23038>>>>>>>>>    Procedure Set ComTag Variant value
23040>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_VARIANT to value
23041>>>>>>>>>    End_Procedure
23042>>>>>>>>>
23042>>>>>>>>>    Function ComSelected Returns Boolean
23044>>>>>>>>>        Boolean retVal
23044>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
23045>>>>>>>>>        Function_Return retVal
23046>>>>>>>>>    End_Function
23047>>>>>>>>>
23047>>>>>>>>>    Procedure Set ComSelected Boolean value
23049>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
23050>>>>>>>>>    End_Procedure
23051>>>>>>>>>
23051>>>>>>>>>    Function ComImage Returns Integer
23053>>>>>>>>>        Integer retVal
23053>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
23054>>>>>>>>>        Function_Return retVal
23055>>>>>>>>>    End_Function
23056>>>>>>>>>
23056>>>>>>>>>    Procedure Set ComImage Integer value
23058>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
23059>>>>>>>>>    End_Procedure
23060>>>>>>>>>
23060>>>>>>>>>    Function ComVisible Returns Boolean
23062>>>>>>>>>        Boolean retVal
23062>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
23063>>>>>>>>>        Function_Return retVal
23064>>>>>>>>>    End_Function
23065>>>>>>>>>
23065>>>>>>>>>    Procedure Set ComVisible Boolean value
23067>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
23068>>>>>>>>>    End_Procedure
23069>>>>>>>>>
23069>>>>>>>>>    Function ComEnabled Returns Boolean
23071>>>>>>>>>        Boolean retVal
23071>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
23072>>>>>>>>>        Function_Return retVal
23073>>>>>>>>>    End_Function
23074>>>>>>>>>
23074>>>>>>>>>    Procedure Set ComEnabled Boolean value
23076>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
23077>>>>>>>>>    End_Procedure
23078>>>>>>>>>
23078>>>>>>>>>    Function ComToolTip Returns String
23080>>>>>>>>>        String retVal
23080>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
23081>>>>>>>>>        Function_Return retVal
23082>>>>>>>>>    End_Function
23083>>>>>>>>>
23083>>>>>>>>>    Procedure Set ComToolTip String value
23085>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
23086>>>>>>>>>    End_Procedure
23087>>>>>>>>>
23087>>>>>>>>>    Function ComKeyboardTip Returns String
23089>>>>>>>>>        String retVal
23089>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BSTR to retVal
23090>>>>>>>>>        Function_Return retVal
23091>>>>>>>>>    End_Function
23092>>>>>>>>>
23092>>>>>>>>>    Procedure Set ComKeyboardTip String value
23094>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BSTR to value
23095>>>>>>>>>    End_Procedure
23096>>>>>>>>>
23096>>>>>>>>>    Function ComId Returns Integer
23098>>>>>>>>>        Integer retVal
23098>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to retVal
23099>>>>>>>>>        Function_Return retVal
23100>>>>>>>>>    End_Function
23101>>>>>>>>>
23101>>>>>>>>>    Procedure Set ComId Integer value
23103>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to value
23104>>>>>>>>>    End_Procedure
23105>>>>>>>>>
23105>>>>>>>>>    Function ComColor Returns XTPRibbonTabContextColor
23107>>>>>>>>>        XTPRibbonTabContextColor retVal
23107>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_I4 to retVal
23108>>>>>>>>>        Function_Return retVal
23109>>>>>>>>>    End_Function
23110>>>>>>>>>
23110>>>>>>>>>    Procedure Set ComColor XTPRibbonTabContextColor value
23112>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_I4 to value
23113>>>>>>>>>    End_Procedure
23114>>>>>>>>>
23114>>>>>>>>>    Function ComContextCaption Returns String
23116>>>>>>>>>        String retVal
23116>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_BSTR to retVal
23117>>>>>>>>>        Function_Return retVal
23118>>>>>>>>>    End_Function
23119>>>>>>>>>
23119>>>>>>>>>    Procedure Set ComContextCaption String value
23121>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_BSTR to value
23122>>>>>>>>>    End_Procedure
23123>>>>>>>>>
23123>>>>>>>>>    Function ComCustomizeCaption Returns String
23125>>>>>>>>>        String retVal
23125>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 54 OLE_VT_BSTR to retVal
23126>>>>>>>>>        Function_Return retVal
23127>>>>>>>>>    End_Function
23128>>>>>>>>>
23128>>>>>>>>>    Procedure Set ComCustomizeCaption String value
23130>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 54 OLE_VT_BSTR to value
23131>>>>>>>>>    End_Procedure
23132>>>>>>>>>
23132>>>>>>>>>    Function ComIndex Returns Integer
23134>>>>>>>>>        Handle hDispatchDriver
23134>>>>>>>>>        Integer retVal
23134>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23135>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
23136>>>>>>>>>        Function_Return retVal
23137>>>>>>>>>    End_Function
23138>>>>>>>>>
23138>>>>>>>>>    Procedure ComMove Integer llIndex
23140>>>>>>>>>        Handle hDispatchDriver
23140>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23141>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23142>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
23143>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
23144>>>>>>>>>    End_Procedure
23145>>>>>>>>>
23145>>>>>>>>>    Function ComRibbonBar Returns Variant
23147>>>>>>>>>        Handle hDispatchDriver
23147>>>>>>>>>        Variant retVal
23147>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23148>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
23149>>>>>>>>>        Function_Return retVal
23150>>>>>>>>>    End_Function
23151>>>>>>>>>
23151>>>>>>>>>    Function ComGroups Returns Variant
23153>>>>>>>>>        Handle hDispatchDriver
23153>>>>>>>>>        Variant retVal
23153>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23154>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_DISPATCH to retVal
23155>>>>>>>>>        Function_Return retVal
23156>>>>>>>>>    End_Function
23157>>>>>>>>>
23157>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
23159>>>>>>>>>        Handle hDispatchDriver
23159>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23160>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23161>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
23162>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
23163>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
23164>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
23165>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 110 OLE_VT_VOID
23166>>>>>>>>>    End_Procedure
23167>>>>>>>>>End_Class
23168>>>>>>>>>
23168>>>>>>>>>// CoClass
23168>>>>>>>>>// CLSID: {C0DE2200-D924-4C08-92F8-D2B03CE65E1E}
23168>>>>>>>>>Class cCJRibbonTab is a cComAutomationObject
23169>>>>>>>>>    Import_Class_Protocol cCJIRibbonTab
23170>>>>>>>>>
23170>>>>>>>>>    Procedure Construct_Object
23172>>>>>>>>>        Forward Send Construct_Object
23174>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
23175>>>>>>>>>    End_Procedure
23176>>>>>>>>>End_Class
23177>>>>>>>>>
23177>>>>>>>>>// CLSID: {C0DE2200-AF64-4A71-94AE-1160A10E487A}
23177>>>>>>>>>Class cCJIRibbonBar is a Mixin
23178>>>>>>>>>
23178>>>>>>>>>    Function ComTitle Returns String
23180>>>>>>>>>        String retVal
23180>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
23181>>>>>>>>>        Function_Return retVal
23182>>>>>>>>>    End_Function
23183>>>>>>>>>
23183>>>>>>>>>    Procedure Set ComTitle String value
23185>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
23186>>>>>>>>>    End_Procedure
23187>>>>>>>>>
23187>>>>>>>>>    Function ComVisible Returns Boolean
23189>>>>>>>>>        Boolean retVal
23189>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
23190>>>>>>>>>        Function_Return retVal
23191>>>>>>>>>    End_Function
23192>>>>>>>>>
23192>>>>>>>>>    Procedure Set ComVisible Boolean value
23194>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
23195>>>>>>>>>    End_Procedure
23196>>>>>>>>>
23196>>>>>>>>>    Function ComPosition Returns XTPBarPosition
23198>>>>>>>>>        XTPBarPosition retVal
23198>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
23199>>>>>>>>>        Function_Return retVal
23200>>>>>>>>>    End_Function
23201>>>>>>>>>
23201>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
23203>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
23204>>>>>>>>>    End_Procedure
23205>>>>>>>>>
23205>>>>>>>>>    Function ComBarID Returns Integer
23207>>>>>>>>>        Integer retVal
23207>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
23208>>>>>>>>>        Function_Return retVal
23209>>>>>>>>>    End_Function
23210>>>>>>>>>
23210>>>>>>>>>    Procedure Set ComBarID Integer value
23212>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
23213>>>>>>>>>    End_Procedure
23214>>>>>>>>>
23214>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
23216>>>>>>>>>        Boolean retVal
23216>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
23217>>>>>>>>>        Function_Return retVal
23218>>>>>>>>>    End_Function
23219>>>>>>>>>
23219>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
23221>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
23222>>>>>>>>>    End_Procedure
23223>>>>>>>>>
23223>>>>>>>>>    Function ComWidth Returns Integer
23225>>>>>>>>>        Integer retVal
23225>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
23226>>>>>>>>>        Function_Return retVal
23227>>>>>>>>>    End_Function
23228>>>>>>>>>
23228>>>>>>>>>    Procedure Set ComWidth Integer value
23230>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
23231>>>>>>>>>    End_Procedure
23232>>>>>>>>>
23232>>>>>>>>>    Function ComCloseable Returns Boolean
23234>>>>>>>>>        Boolean retVal
23234>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
23235>>>>>>>>>        Function_Return retVal
23236>>>>>>>>>    End_Function
23237>>>>>>>>>
23237>>>>>>>>>    Procedure Set ComCloseable Boolean value
23239>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
23240>>>>>>>>>    End_Procedure
23241>>>>>>>>>
23241>>>>>>>>>    Function ComEnableAnimation Returns Boolean
23243>>>>>>>>>        Boolean retVal
23243>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
23244>>>>>>>>>        Function_Return retVal
23245>>>>>>>>>    End_Function
23246>>>>>>>>>
23246>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
23248>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
23249>>>>>>>>>    End_Procedure
23250>>>>>>>>>
23250>>>>>>>>>    Function ComShowGripper Returns Boolean
23252>>>>>>>>>        Boolean retVal
23252>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
23253>>>>>>>>>        Function_Return retVal
23254>>>>>>>>>    End_Function
23255>>>>>>>>>
23255>>>>>>>>>    Procedure Set ComShowGripper Boolean value
23257>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
23258>>>>>>>>>    End_Procedure
23259>>>>>>>>>
23259>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
23261>>>>>>>>>        XTPButtonStyle retVal
23261>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
23262>>>>>>>>>        Function_Return retVal
23263>>>>>>>>>    End_Function
23264>>>>>>>>>
23264>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
23266>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
23267>>>>>>>>>    End_Procedure
23268>>>>>>>>>
23268>>>>>>>>>    Function ComCustomizable Returns Boolean
23270>>>>>>>>>        Boolean retVal
23270>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
23271>>>>>>>>>        Function_Return retVal
23272>>>>>>>>>    End_Function
23273>>>>>>>>>
23273>>>>>>>>>    Procedure Set ComCustomizable Boolean value
23275>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
23276>>>>>>>>>    End_Procedure
23277>>>>>>>>>
23277>>>>>>>>>    Function ComSelectedControl Returns Variant
23279>>>>>>>>>        Variant retVal
23279>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
23280>>>>>>>>>        Function_Return retVal
23281>>>>>>>>>    End_Function
23282>>>>>>>>>
23282>>>>>>>>>    Procedure Set ComSelectedControl Variant value
23284>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
23285>>>>>>>>>    End_Procedure
23286>>>>>>>>>
23286>>>>>>>>>    Function ComGroupsVisible Returns Boolean
23288>>>>>>>>>        Boolean retVal
23288>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 104 OLE_VT_BOOL to retVal
23289>>>>>>>>>        Function_Return retVal
23290>>>>>>>>>    End_Function
23291>>>>>>>>>
23291>>>>>>>>>    Procedure Set ComGroupsVisible Boolean value
23293>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 104 OLE_VT_BOOL to value
23294>>>>>>>>>    End_Procedure
23295>>>>>>>>>
23295>>>>>>>>>    Function ComSelectedTab Returns Variant
23297>>>>>>>>>        Variant retVal
23297>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 105 OLE_VT_DISPATCH to retVal
23298>>>>>>>>>        Function_Return retVal
23299>>>>>>>>>    End_Function
23300>>>>>>>>>
23300>>>>>>>>>    Procedure Set ComSelectedTab Variant value
23302>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 105 OLE_VT_DISPATCH to value
23303>>>>>>>>>    End_Procedure
23304>>>>>>>>>
23304>>>>>>>>>    Function ComMinimumVisibleWidth Returns Integer
23306>>>>>>>>>        Integer retVal
23306>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_I4 to retVal
23307>>>>>>>>>        Function_Return retVal
23308>>>>>>>>>    End_Function
23309>>>>>>>>>
23309>>>>>>>>>    Procedure Set ComMinimumVisibleWidth Integer value
23311>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_I4 to value
23312>>>>>>>>>    End_Procedure
23313>>>>>>>>>
23313>>>>>>>>>    Function ComShowQuickAccessBelowRibbon Returns Boolean
23315>>>>>>>>>        Boolean retVal
23315>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 110 OLE_VT_BOOL to retVal
23316>>>>>>>>>        Function_Return retVal
23317>>>>>>>>>    End_Function
23318>>>>>>>>>
23318>>>>>>>>>    Procedure Set ComShowQuickAccessBelowRibbon Boolean value
23320>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 110 OLE_VT_BOOL to value
23321>>>>>>>>>    End_Procedure
23322>>>>>>>>>
23322>>>>>>>>>    Function ComShowQuickAccess Returns Boolean
23324>>>>>>>>>        Boolean retVal
23324>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 115 OLE_VT_BOOL to retVal
23325>>>>>>>>>        Function_Return retVal
23326>>>>>>>>>    End_Function
23327>>>>>>>>>
23327>>>>>>>>>    Procedure Set ComShowQuickAccess Boolean value
23329>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 115 OLE_VT_BOOL to value
23330>>>>>>>>>    End_Procedure
23331>>>>>>>>>
23331>>>>>>>>>    Function ComAllowQuickAccessDuplicates Returns Boolean
23333>>>>>>>>>        Boolean retVal
23333>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 116 OLE_VT_BOOL to retVal
23334>>>>>>>>>        Function_Return retVal
23335>>>>>>>>>    End_Function
23336>>>>>>>>>
23336>>>>>>>>>    Procedure Set ComAllowQuickAccessDuplicates Boolean value
23338>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 116 OLE_VT_BOOL to value
23339>>>>>>>>>    End_Procedure
23340>>>>>>>>>
23340>>>>>>>>>    Function ComAllowMinimize Returns Boolean
23342>>>>>>>>>        Boolean retVal
23342>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 117 OLE_VT_BOOL to retVal
23343>>>>>>>>>        Function_Return retVal
23344>>>>>>>>>    End_Function
23345>>>>>>>>>
23345>>>>>>>>>    Procedure Set ComAllowMinimize Boolean value
23347>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 117 OLE_VT_BOOL to value
23348>>>>>>>>>    End_Procedure
23349>>>>>>>>>
23349>>>>>>>>>    Function ComMinimized Returns Boolean
23351>>>>>>>>>        Boolean retVal
23351>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 118 OLE_VT_BOOL to retVal
23352>>>>>>>>>        Function_Return retVal
23353>>>>>>>>>    End_Function
23354>>>>>>>>>
23354>>>>>>>>>    Procedure Set ComMinimized Boolean value
23356>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 118 OLE_VT_BOOL to value
23357>>>>>>>>>    End_Procedure
23358>>>>>>>>>
23358>>>>>>>>>    Function ComFontHeight Returns Integer
23360>>>>>>>>>        Integer retVal
23360>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 119 OLE_VT_I4 to retVal
23361>>>>>>>>>        Function_Return retVal
23362>>>>>>>>>    End_Function
23363>>>>>>>>>
23363>>>>>>>>>    Procedure Set ComFontHeight Integer value
23365>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 119 OLE_VT_I4 to value
23366>>>>>>>>>    End_Procedure
23367>>>>>>>>>
23367>>>>>>>>>    Function ComTabsVisible Returns Boolean
23369>>>>>>>>>        Boolean retVal
23369>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_BOOL to retVal
23370>>>>>>>>>        Function_Return retVal
23371>>>>>>>>>    End_Function
23372>>>>>>>>>
23372>>>>>>>>>    Procedure Set ComTabsVisible Boolean value
23374>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_BOOL to value
23375>>>>>>>>>    End_Procedure
23376>>>>>>>>>
23376>>>>>>>>>    Function ComShowCaptionAlways Returns Boolean
23378>>>>>>>>>        Boolean retVal
23378>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 123 OLE_VT_BOOL to retVal
23379>>>>>>>>>        Function_Return retVal
23380>>>>>>>>>    End_Function
23381>>>>>>>>>
23381>>>>>>>>>    Procedure Set ComShowCaptionAlways Boolean value
23383>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 123 OLE_VT_BOOL to value
23384>>>>>>>>>    End_Procedure
23385>>>>>>>>>
23385>>>>>>>>>    Function ComAllowQuickAccessCustomization Returns Boolean
23387>>>>>>>>>        Boolean retVal
23387>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 124 OLE_VT_BOOL to retVal
23388>>>>>>>>>        Function_Return retVal
23389>>>>>>>>>    End_Function
23390>>>>>>>>>
23390>>>>>>>>>    Procedure Set ComAllowQuickAccessCustomization Boolean value
23392>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 124 OLE_VT_BOOL to value
23393>>>>>>>>>    End_Procedure
23394>>>>>>>>>
23394>>>>>>>>>    Function ComGroupsHeight Returns Integer
23396>>>>>>>>>        Integer retVal
23396>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 125 OLE_VT_I4 to retVal
23397>>>>>>>>>        Function_Return retVal
23398>>>>>>>>>    End_Function
23399>>>>>>>>>
23399>>>>>>>>>    Procedure Set ComGroupsHeight Integer value
23401>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 125 OLE_VT_I4 to value
23402>>>>>>>>>    End_Procedure
23403>>>>>>>>>
23403>>>>>>>>>    Function ComClientHeight Returns Integer
23405>>>>>>>>>        Integer retVal
23405>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 126 OLE_VT_I4 to retVal
23406>>>>>>>>>        Function_Return retVal
23407>>>>>>>>>    End_Function
23408>>>>>>>>>
23408>>>>>>>>>    Procedure Set ComClientHeight Integer value
23410>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 126 OLE_VT_I4 to value
23411>>>>>>>>>    End_Procedure
23412>>>>>>>>>
23412>>>>>>>>>    Function ComQuickAccessEmptyIconId Returns Integer
23414>>>>>>>>>        Integer retVal
23414>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 130 OLE_VT_I4 to retVal
23415>>>>>>>>>        Function_Return retVal
23416>>>>>>>>>    End_Function
23417>>>>>>>>>
23417>>>>>>>>>    Procedure Set ComQuickAccessEmptyIconId Integer value
23419>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 130 OLE_VT_I4 to value
23420>>>>>>>>>    End_Procedure
23421>>>>>>>>>
23421>>>>>>>>>    Function ComSystemButton Returns Variant
23423>>>>>>>>>        Variant retVal
23423>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 128 OLE_VT_DISPATCH to retVal
23424>>>>>>>>>        Function_Return retVal
23425>>>>>>>>>    End_Function
23426>>>>>>>>>
23426>>>>>>>>>    Procedure Set ComSystemButton Variant value
23428>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 128 OLE_VT_DISPATCH to value
23429>>>>>>>>>    End_Procedure
23430>>>>>>>>>
23430>>>>>>>>>    Function ComType Returns XTPBarType
23432>>>>>>>>>        Handle hDispatchDriver
23432>>>>>>>>>        XTPBarType retVal
23432>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23433>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
23434>>>>>>>>>        Function_Return retVal
23435>>>>>>>>>    End_Function
23436>>>>>>>>>
23436>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
23438>>>>>>>>>        Handle hDispatchDriver
23438>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23439>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23440>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
23441>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
23442>>>>>>>>>    End_Procedure
23443>>>>>>>>>
23443>>>>>>>>>    Function ComBuiltIn Returns Boolean
23445>>>>>>>>>        Handle hDispatchDriver
23445>>>>>>>>>        Boolean retVal
23445>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23446>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
23447>>>>>>>>>        Function_Return retVal
23448>>>>>>>>>    End_Function
23449>>>>>>>>>
23449>>>>>>>>>    Procedure ComDelete
23451>>>>>>>>>        Handle hDispatchDriver
23451>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23452>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
23453>>>>>>>>>    End_Procedure
23454>>>>>>>>>
23454>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
23456>>>>>>>>>        Handle hDispatchDriver
23456>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23457>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23458>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
23459>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
23460>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
23461>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
23462>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
23463>>>>>>>>>    End_Procedure
23464>>>>>>>>>
23464>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
23466>>>>>>>>>        Handle hDispatchDriver
23466>>>>>>>>>        OLE_HANDLE retVal
23466>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23467>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
23468>>>>>>>>>        Function_Return retVal
23469>>>>>>>>>    End_Function
23470>>>>>>>>>
23470>>>>>>>>>    Function ComCommandBars Returns Variant
23472>>>>>>>>>        Handle hDispatchDriver
23472>>>>>>>>>        Variant retVal
23472>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23473>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
23474>>>>>>>>>        Function_Return retVal
23475>>>>>>>>>    End_Function
23476>>>>>>>>>
23476>>>>>>>>>    Function ComControls Returns Variant
23478>>>>>>>>>        Handle hDispatchDriver
23478>>>>>>>>>        Variant retVal
23478>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23479>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
23480>>>>>>>>>        Function_Return retVal
23481>>>>>>>>>    End_Function
23482>>>>>>>>>
23482>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
23484>>>>>>>>>        Handle hDispatchDriver
23484>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23485>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
23486>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
23487>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
23488>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
23489>>>>>>>>>    End_Procedure
23490>>>>>>>>>
23490>>>>>>>>>    Function ComGetIconWidth Returns Integer
23492>>>>>>>>>        Handle hDispatchDriver
23492>>>>>>>>>        Integer retVal
23492>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23493>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
23494>>>>>>>>>        Function_Return retVal
23495>>>>>>>>>    End_Function
23496>>>>>>>>>
23496>>>>>>>>>    Function ComGetIconHeight Returns Integer
23498>>>>>>>>>        Handle hDispatchDriver
23498>>>>>>>>>        Integer retVal
23498>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23499>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
23500>>>>>>>>>        Function_Return retVal
23501>>>>>>>>>    End_Function
23502>>>>>>>>>
23502>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
23504>>>>>>>>>        Handle hDispatchDriver
23504>>>>>>>>>        Variant retVal
23504>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23505>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23506>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
23507>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
23508>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
23509>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
23510>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
23511>>>>>>>>>        Function_Return retVal
23512>>>>>>>>>    End_Function
23513>>>>>>>>>
23513>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
23515>>>>>>>>>        Handle hDispatchDriver
23515>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23516>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
23517>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
23518>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
23519>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
23520>>>>>>>>>    End_Procedure
23521>>>>>>>>>
23521>>>>>>>>>    Procedure ComRedrawBar
23523>>>>>>>>>        Handle hDispatchDriver
23523>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23524>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
23525>>>>>>>>>    End_Procedure
23526>>>>>>>>>
23526>>>>>>>>>    Procedure ComRecalcLayout
23528>>>>>>>>>        Handle hDispatchDriver
23528>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23529>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
23530>>>>>>>>>    End_Procedure
23531>>>>>>>>>
23531>>>>>>>>>    Procedure ComReset
23533>>>>>>>>>        Handle hDispatchDriver
23533>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23534>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
23535>>>>>>>>>    End_Procedure
23536>>>>>>>>>
23536>>>>>>>>>    Function ComInsertTab Integer llIndex String llCaption Returns Variant
23538>>>>>>>>>        Handle hDispatchDriver
23538>>>>>>>>>        Variant retVal
23538>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23539>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
23540>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
23541>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
23542>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
23543>>>>>>>>>        Function_Return retVal
23544>>>>>>>>>    End_Function
23545>>>>>>>>>
23545>>>>>>>>>    Function ComTabCount Returns Integer
23547>>>>>>>>>        Handle hDispatchDriver
23547>>>>>>>>>        Integer retVal
23547>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23548>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
23549>>>>>>>>>        Function_Return retVal
23550>>>>>>>>>    End_Function
23551>>>>>>>>>
23551>>>>>>>>>    Function ComTab Integer llIndex Returns Variant
23553>>>>>>>>>        Handle hDispatchDriver
23553>>>>>>>>>        Variant retVal
23553>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23554>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23555>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
23556>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
23557>>>>>>>>>        Function_Return retVal
23558>>>>>>>>>    End_Function
23559>>>>>>>>>
23559>>>>>>>>>    Function Com_NewEnum Returns Variant
23561>>>>>>>>>        Handle hDispatchDriver
23561>>>>>>>>>        Variant retVal
23561>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23562>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
23563>>>>>>>>>        Function_Return retVal
23564>>>>>>>>>    End_Function
23565>>>>>>>>>
23565>>>>>>>>>    Function ComRibbonPaintManager Returns Variant
23567>>>>>>>>>        Handle hDispatchDriver
23567>>>>>>>>>        Variant retVal
23567>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23568>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_DISPATCH to retVal
23569>>>>>>>>>        Function_Return retVal
23570>>>>>>>>>    End_Function
23571>>>>>>>>>
23571>>>>>>>>>    Function ComTabPaintManager Returns Variant
23573>>>>>>>>>        Handle hDispatchDriver
23573>>>>>>>>>        Variant retVal
23573>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23574>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_DISPATCH to retVal
23575>>>>>>>>>        Function_Return retVal
23576>>>>>>>>>    End_Function
23577>>>>>>>>>
23577>>>>>>>>>    Procedure ComEnableFrameTheme
23579>>>>>>>>>        Handle hDispatchDriver
23579>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23580>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 107 OLE_VT_VOID
23581>>>>>>>>>    End_Procedure
23582>>>>>>>>>
23582>>>>>>>>>    Function ComAddSystemButton Returns Variant
23584>>>>>>>>>        Handle hDispatchDriver
23584>>>>>>>>>        Variant retVal
23584>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23585>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_DISPATCH to retVal
23586>>>>>>>>>        Function_Return retVal
23587>>>>>>>>>    End_Function
23588>>>>>>>>>
23588>>>>>>>>>    Function ComQuickAccessControls Returns Variant
23590>>>>>>>>>        Handle hDispatchDriver
23590>>>>>>>>>        Variant retVal
23590>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23591>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 109 OLE_VT_DISPATCH to retVal
23592>>>>>>>>>        Function_Return retVal
23593>>>>>>>>>    End_Function
23594>>>>>>>>>
23594>>>>>>>>>    Function ComFindTab Integer llId Returns Variant
23596>>>>>>>>>        Handle hDispatchDriver
23596>>>>>>>>>        Variant retVal
23596>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23597>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23598>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
23599>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_DISPATCH to retVal
23600>>>>>>>>>        Function_Return retVal
23601>>>>>>>>>    End_Function
23602>>>>>>>>>
23602>>>>>>>>>    Function ComFindGroup Integer llId Returns Variant
23604>>>>>>>>>        Handle hDispatchDriver
23604>>>>>>>>>        Variant retVal
23604>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23605>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23606>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
23607>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 112 OLE_VT_DISPATCH to retVal
23608>>>>>>>>>        Function_Return retVal
23609>>>>>>>>>    End_Function
23610>>>>>>>>>
23610>>>>>>>>>    Procedure ComRemoveAllTabs
23612>>>>>>>>>        Handle hDispatchDriver
23612>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23613>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 113 OLE_VT_VOID
23614>>>>>>>>>    End_Procedure
23615>>>>>>>>>
23615>>>>>>>>>    Procedure ComRemoveTab Integer llIndex
23617>>>>>>>>>        Handle hDispatchDriver
23617>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23618>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23619>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
23620>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 114 OLE_VT_VOID
23621>>>>>>>>>    End_Procedure
23622>>>>>>>>>
23622>>>>>>>>>    Function ComControlQuickAccess Returns Variant
23624>>>>>>>>>        Handle hDispatchDriver
23624>>>>>>>>>        Variant retVal
23624>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23625>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 120 OLE_VT_DISPATCH to retVal
23626>>>>>>>>>        Function_Return retVal
23627>>>>>>>>>    End_Function
23628>>>>>>>>>
23628>>>>>>>>>    Function ComControlSystemButton Returns Variant
23630>>>>>>>>>        Handle hDispatchDriver
23630>>>>>>>>>        Variant retVal
23630>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23631>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 121 OLE_VT_DISPATCH to retVal
23632>>>>>>>>>        Function_Return retVal
23633>>>>>>>>>    End_Function
23634>>>>>>>>>End_Class
23635>>>>>>>>>
23635>>>>>>>>>// CoClass
23635>>>>>>>>>// CLSID: {C0DE2200-34D1-4EBB-B58C-454DB52012D9}
23635>>>>>>>>>Class cCJRibbonBar is a cComAutomationObject
23636>>>>>>>>>    Import_Class_Protocol cCJIRibbonBar
23637>>>>>>>>>
23637>>>>>>>>>    Procedure Construct_Object
23639>>>>>>>>>        Forward Send Construct_Object
23641>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
23642>>>>>>>>>    End_Procedure
23643>>>>>>>>>End_Class
23644>>>>>>>>>
23644>>>>>>>>>// CLSID: {C0DE2200-46A4-4F99-83D8-C6D3C2B390FC}
23644>>>>>>>>>Class cCJIDialogBar is a Mixin
23645>>>>>>>>>
23645>>>>>>>>>    Function ComTitle Returns String
23647>>>>>>>>>        String retVal
23647>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
23648>>>>>>>>>        Function_Return retVal
23649>>>>>>>>>    End_Function
23650>>>>>>>>>
23650>>>>>>>>>    Procedure Set ComTitle String value
23652>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
23653>>>>>>>>>    End_Procedure
23654>>>>>>>>>
23654>>>>>>>>>    Function ComVisible Returns Boolean
23656>>>>>>>>>        Boolean retVal
23656>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
23657>>>>>>>>>        Function_Return retVal
23658>>>>>>>>>    End_Function
23659>>>>>>>>>
23659>>>>>>>>>    Procedure Set ComVisible Boolean value
23661>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
23662>>>>>>>>>    End_Procedure
23663>>>>>>>>>
23663>>>>>>>>>    Function ComPosition Returns XTPBarPosition
23665>>>>>>>>>        XTPBarPosition retVal
23665>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
23666>>>>>>>>>        Function_Return retVal
23667>>>>>>>>>    End_Function
23668>>>>>>>>>
23668>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
23670>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
23671>>>>>>>>>    End_Procedure
23672>>>>>>>>>
23672>>>>>>>>>    Function ComBarID Returns Integer
23674>>>>>>>>>        Integer retVal
23674>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
23675>>>>>>>>>        Function_Return retVal
23676>>>>>>>>>    End_Function
23677>>>>>>>>>
23677>>>>>>>>>    Procedure Set ComBarID Integer value
23679>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
23680>>>>>>>>>    End_Procedure
23681>>>>>>>>>
23681>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
23683>>>>>>>>>        Boolean retVal
23683>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
23684>>>>>>>>>        Function_Return retVal
23685>>>>>>>>>    End_Function
23686>>>>>>>>>
23686>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
23688>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
23689>>>>>>>>>    End_Procedure
23690>>>>>>>>>
23690>>>>>>>>>    Function ComWidth Returns Integer
23692>>>>>>>>>        Integer retVal
23692>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
23693>>>>>>>>>        Function_Return retVal
23694>>>>>>>>>    End_Function
23695>>>>>>>>>
23695>>>>>>>>>    Procedure Set ComWidth Integer value
23697>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
23698>>>>>>>>>    End_Procedure
23699>>>>>>>>>
23699>>>>>>>>>    Function ComCloseable Returns Boolean
23701>>>>>>>>>        Boolean retVal
23701>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
23702>>>>>>>>>        Function_Return retVal
23703>>>>>>>>>    End_Function
23704>>>>>>>>>
23704>>>>>>>>>    Procedure Set ComCloseable Boolean value
23706>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
23707>>>>>>>>>    End_Procedure
23708>>>>>>>>>
23708>>>>>>>>>    Function ComEnableAnimation Returns Boolean
23710>>>>>>>>>        Boolean retVal
23710>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
23711>>>>>>>>>        Function_Return retVal
23712>>>>>>>>>    End_Function
23713>>>>>>>>>
23713>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
23715>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
23716>>>>>>>>>    End_Procedure
23717>>>>>>>>>
23717>>>>>>>>>    Function ComShowGripper Returns Boolean
23719>>>>>>>>>        Boolean retVal
23719>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
23720>>>>>>>>>        Function_Return retVal
23721>>>>>>>>>    End_Function
23722>>>>>>>>>
23722>>>>>>>>>    Procedure Set ComShowGripper Boolean value
23724>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
23725>>>>>>>>>    End_Procedure
23726>>>>>>>>>
23726>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
23728>>>>>>>>>        XTPButtonStyle retVal
23728>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
23729>>>>>>>>>        Function_Return retVal
23730>>>>>>>>>    End_Function
23731>>>>>>>>>
23731>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
23733>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
23734>>>>>>>>>    End_Procedure
23735>>>>>>>>>
23735>>>>>>>>>    Function ComCaption Returns String
23737>>>>>>>>>        String retVal
23737>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BSTR to retVal
23738>>>>>>>>>        Function_Return retVal
23739>>>>>>>>>    End_Function
23740>>>>>>>>>
23740>>>>>>>>>    Procedure Set ComCaption String value
23742>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BSTR to value
23743>>>>>>>>>    End_Procedure
23744>>>>>>>>>
23744>>>>>>>>>    Function ComResizable Returns Boolean
23746>>>>>>>>>        Boolean retVal
23746>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BOOL to retVal
23747>>>>>>>>>        Function_Return retVal
23748>>>>>>>>>    End_Function
23749>>>>>>>>>
23749>>>>>>>>>    Procedure Set ComResizable Boolean value
23751>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BOOL to value
23752>>>>>>>>>    End_Procedure
23753>>>>>>>>>
23753>>>>>>>>>    Function ComChildHandle Returns OLE_HANDLE
23755>>>>>>>>>        OLE_HANDLE retVal
23755>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 103 OLE_VT_I4 to retVal
23756>>>>>>>>>        Function_Return retVal
23757>>>>>>>>>    End_Function
23758>>>>>>>>>
23758>>>>>>>>>    Procedure Set ComChildHandle OLE_HANDLE value
23760>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 103 OLE_VT_I4 to value
23761>>>>>>>>>    End_Procedure
23762>>>>>>>>>
23762>>>>>>>>>    Function ComShowCaption Returns Boolean
23764>>>>>>>>>        Boolean retVal
23764>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 105 OLE_VT_BOOL to retVal
23765>>>>>>>>>        Function_Return retVal
23766>>>>>>>>>    End_Function
23767>>>>>>>>>
23767>>>>>>>>>    Procedure Set ComShowCaption Boolean value
23769>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 105 OLE_VT_BOOL to value
23770>>>>>>>>>    End_Procedure
23771>>>>>>>>>
23771>>>>>>>>>    Function ComCaptionPopup Returns Boolean
23773>>>>>>>>>        Boolean retVal
23773>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_BOOL to retVal
23774>>>>>>>>>        Function_Return retVal
23775>>>>>>>>>    End_Function
23776>>>>>>>>>
23776>>>>>>>>>    Procedure Set ComCaptionPopup Boolean value
23778>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_BOOL to value
23779>>>>>>>>>    End_Procedure
23780>>>>>>>>>
23780>>>>>>>>>    Function ComType Returns XTPBarType
23782>>>>>>>>>        Handle hDispatchDriver
23782>>>>>>>>>        XTPBarType retVal
23782>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23783>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
23784>>>>>>>>>        Function_Return retVal
23785>>>>>>>>>    End_Function
23786>>>>>>>>>
23786>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
23788>>>>>>>>>        Handle hDispatchDriver
23788>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23789>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23790>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
23791>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
23792>>>>>>>>>    End_Procedure
23793>>>>>>>>>
23793>>>>>>>>>    Function ComBuiltIn Returns Boolean
23795>>>>>>>>>        Handle hDispatchDriver
23795>>>>>>>>>        Boolean retVal
23795>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23796>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
23797>>>>>>>>>        Function_Return retVal
23798>>>>>>>>>    End_Function
23799>>>>>>>>>
23799>>>>>>>>>    Procedure ComDelete
23801>>>>>>>>>        Handle hDispatchDriver
23801>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23802>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
23803>>>>>>>>>    End_Procedure
23804>>>>>>>>>
23804>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
23806>>>>>>>>>        Handle hDispatchDriver
23806>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23807>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23808>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
23809>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
23810>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
23811>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
23812>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
23813>>>>>>>>>    End_Procedure
23814>>>>>>>>>
23814>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
23816>>>>>>>>>        Handle hDispatchDriver
23816>>>>>>>>>        OLE_HANDLE retVal
23816>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23817>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
23818>>>>>>>>>        Function_Return retVal
23819>>>>>>>>>    End_Function
23820>>>>>>>>>
23820>>>>>>>>>    Function ComCommandBars Returns Variant
23822>>>>>>>>>        Handle hDispatchDriver
23822>>>>>>>>>        Variant retVal
23822>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23823>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
23824>>>>>>>>>        Function_Return retVal
23825>>>>>>>>>    End_Function
23826>>>>>>>>>
23826>>>>>>>>>    Function ComCaptionPopupBar Returns Variant
23828>>>>>>>>>        Handle hDispatchDriver
23828>>>>>>>>>        Variant retVal
23828>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23829>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_DISPATCH to retVal
23830>>>>>>>>>        Function_Return retVal
23831>>>>>>>>>    End_Function
23832>>>>>>>>>
23832>>>>>>>>>    Procedure ComSetSize Integer llcx Integer llcy
23834>>>>>>>>>        Handle hDispatchDriver
23834>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23835>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
23836>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
23837>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
23838>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 104 OLE_VT_VOID
23839>>>>>>>>>    End_Procedure
23840>>>>>>>>>End_Class
23841>>>>>>>>>
23841>>>>>>>>>// CoClass
23841>>>>>>>>>// CLSID: {C0DE2200-C898-4A0B-8D36-A9566203A013}
23841>>>>>>>>>Class cCJDialogBar is a cComAutomationObject
23842>>>>>>>>>    Import_Class_Protocol cCJIDialogBar
23843>>>>>>>>>
23843>>>>>>>>>    Procedure Construct_Object
23845>>>>>>>>>        Forward Send Construct_Object
23847>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
23848>>>>>>>>>    End_Procedure
23849>>>>>>>>>End_Class
23850>>>>>>>>>
23850>>>>>>>>>// CLSID: {C0DE2200-CF7B-4042-BA6F-20F9A96E8AD1}
23850>>>>>>>>>Class cCJIPaintManager is a Mixin
23851>>>>>>>>>
23851>>>>>>>>>    Function ComEnableAnimation Returns Boolean
23853>>>>>>>>>        Boolean retVal
23853>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
23854>>>>>>>>>        Function_Return retVal
23855>>>>>>>>>    End_Function
23856>>>>>>>>>
23856>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
23858>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
23859>>>>>>>>>    End_Procedure
23860>>>>>>>>>
23860>>>>>>>>>    Function ComFlatToolBar Returns Boolean
23862>>>>>>>>>        Boolean retVal
23862>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to retVal
23863>>>>>>>>>        Function_Return retVal
23864>>>>>>>>>    End_Function
23865>>>>>>>>>
23865>>>>>>>>>    Procedure Set ComFlatToolBar Boolean value
23867>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to value
23868>>>>>>>>>    End_Procedure
23869>>>>>>>>>
23869>>>>>>>>>    Function ComFlatMenuBar Returns Boolean
23871>>>>>>>>>        Boolean retVal
23871>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
23872>>>>>>>>>        Function_Return retVal
23873>>>>>>>>>    End_Function
23874>>>>>>>>>
23874>>>>>>>>>    Procedure Set ComFlatMenuBar Boolean value
23876>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
23877>>>>>>>>>    End_Procedure
23878>>>>>>>>>
23878>>>>>>>>>    Function ComClearTypeTextQuality Returns Boolean
23880>>>>>>>>>        Boolean retVal
23880>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
23881>>>>>>>>>        Function_Return retVal
23882>>>>>>>>>    End_Function
23883>>>>>>>>>
23883>>>>>>>>>    Procedure Set ComClearTypeTextQuality Boolean value
23885>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
23886>>>>>>>>>    End_Procedure
23887>>>>>>>>>
23887>>>>>>>>>    Function ComShowShadow Returns Boolean
23889>>>>>>>>>        Boolean retVal
23889>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
23890>>>>>>>>>        Function_Return retVal
23891>>>>>>>>>    End_Function
23892>>>>>>>>>
23892>>>>>>>>>    Procedure Set ComShowShadow Boolean value
23894>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
23895>>>>>>>>>    End_Procedure
23896>>>>>>>>>
23896>>>>>>>>>    Function ComThemedStatusBar Returns Boolean
23898>>>>>>>>>        Boolean retVal
23898>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
23899>>>>>>>>>        Function_Return retVal
23900>>>>>>>>>    End_Function
23901>>>>>>>>>
23901>>>>>>>>>    Procedure Set ComThemedStatusBar Boolean value
23903>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
23904>>>>>>>>>    End_Procedure
23905>>>>>>>>>
23905>>>>>>>>>    Function ComThickCheckMark Returns Boolean
23907>>>>>>>>>        Boolean retVal
23907>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
23908>>>>>>>>>        Function_Return retVal
23909>>>>>>>>>    End_Function
23910>>>>>>>>>
23910>>>>>>>>>    Procedure Set ComThickCheckMark Boolean value
23912>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
23913>>>>>>>>>    End_Procedure
23914>>>>>>>>>
23914>>>>>>>>>    Function ComSelectImageInPopupBar Returns Boolean
23916>>>>>>>>>        Boolean retVal
23916>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
23917>>>>>>>>>        Function_Return retVal
23918>>>>>>>>>    End_Function
23919>>>>>>>>>
23919>>>>>>>>>    Procedure Set ComSelectImageInPopupBar Boolean value
23921>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
23922>>>>>>>>>    End_Procedure
23923>>>>>>>>>
23923>>>>>>>>>    Function ComThemedCheckBox Returns Boolean
23925>>>>>>>>>        Boolean retVal
23925>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
23926>>>>>>>>>        Function_Return retVal
23927>>>>>>>>>    End_Function
23928>>>>>>>>>
23928>>>>>>>>>    Procedure Set ComThemedCheckBox Boolean value
23930>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
23931>>>>>>>>>    End_Procedure
23932>>>>>>>>>
23932>>>>>>>>>    Function ComAutoResizeIcons Returns Boolean
23934>>>>>>>>>        Boolean retVal
23934>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
23935>>>>>>>>>        Function_Return retVal
23936>>>>>>>>>    End_Function
23937>>>>>>>>>
23937>>>>>>>>>    Procedure Set ComAutoResizeIcons Boolean value
23939>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
23940>>>>>>>>>    End_Procedure
23941>>>>>>>>>
23941>>>>>>>>>    Procedure ComRefreshMetrics
23943>>>>>>>>>        Handle hDispatchDriver
23943>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23944>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
23945>>>>>>>>>    End_Procedure
23946>>>>>>>>>
23946>>>>>>>>>    Procedure ComFillWorkspace OLE_HANDLE llhDC Integer llx Integer lly Integer llcx Integer llcy
23948>>>>>>>>>        Handle hDispatchDriver
23948>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23949>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
23950>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhDC
23951>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
23952>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
23953>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
23954>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
23955>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
23956>>>>>>>>>    End_Procedure
23957>>>>>>>>>
23957>>>>>>>>>    Procedure ComDrawRectangle OLE_HANDLE llhDC Integer llx Integer lly Integer llcx Integer llcy Boolean llSelected Boolean llPressed Boolean llEnabled Boolean llChecked Boolean llPopuped XTPBarType llbarType XTPBarPosition llbarPosition
23959>>>>>>>>>        Handle hDispatchDriver
23959>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23960>>>>>>>>>        Send PrepareParams to hDispatchDriver 12
23961>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhDC
23962>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
23963>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
23964>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
23965>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
23966>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSelected
23967>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llPressed
23968>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnabled
23969>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llChecked
23970>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llPopuped
23971>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbarType
23972>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbarPosition
23973>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
23974>>>>>>>>>    End_Procedure
23975>>>>>>>>>
23975>>>>>>>>>    Function ComGetRectangleTextColor Boolean llSelected Boolean llPressed Boolean llEnabled Boolean llChecked Boolean llPopuped XTPBarType llbarType XTPBarPosition llbarPosition Returns OLE_COLOR
23977>>>>>>>>>        Handle hDispatchDriver
23977>>>>>>>>>        OLE_COLOR retVal
23977>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23978>>>>>>>>>        Send PrepareParams to hDispatchDriver 7
23979>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSelected
23980>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llPressed
23981>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnabled
23982>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llChecked
23983>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llPopuped
23984>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbarType
23985>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbarPosition
23986>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_I4 to retVal
23987>>>>>>>>>        Function_Return retVal
23988>>>>>>>>>    End_Function
23989>>>>>>>>>
23989>>>>>>>>>    Procedure ComLoadFrameIcon Longptr llModule String llPath Integer llWidth Integer llHeight
23991>>>>>>>>>        Handle hDispatchDriver
23991>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23992>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23993>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llModule
23994>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
23995>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
23996>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llHeight
23997>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
23998>>>>>>>>>    End_Procedure
23999>>>>>>>>>End_Class
24000>>>>>>>>>
24000>>>>>>>>>// CoClass
24000>>>>>>>>>// CLSID: {C0DE2200-90B7-46EE-8786-A54278B0A559}
24000>>>>>>>>>Class cCJPaintManager is a cComAutomationObject
24001>>>>>>>>>    Import_Class_Protocol cCJIPaintManager
24002>>>>>>>>>
24002>>>>>>>>>    Procedure Construct_Object
24004>>>>>>>>>        Forward Send Construct_Object
24006>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
24007>>>>>>>>>    End_Procedure
24008>>>>>>>>>End_Class
24009>>>>>>>>>
24009>>>>>>>>>// CLSID: {C0DE2200-2F2F-4C05-92CF-6AEB0BFA0E6D}
24009>>>>>>>>>Class cCJITabWorkspace is a Mixin
24010>>>>>>>>>
24010>>>>>>>>>    Function ComFlags Returns XTPWorkspaceButtons
24012>>>>>>>>>        XTPWorkspaceButtons retVal
24012>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
24013>>>>>>>>>        Function_Return retVal
24014>>>>>>>>>    End_Function
24015>>>>>>>>>
24015>>>>>>>>>    Procedure Set ComFlags XTPWorkspaceButtons value
24017>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
24018>>>>>>>>>    End_Procedure
24019>>>>>>>>>
24019>>>>>>>>>    Function ComAllowReorder Returns Boolean
24021>>>>>>>>>        Boolean retVal
24021>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
24022>>>>>>>>>        Function_Return retVal
24023>>>>>>>>>    End_Function
24024>>>>>>>>>
24024>>>>>>>>>    Procedure Set ComAllowReorder Boolean value
24026>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
24027>>>>>>>>>    End_Procedure
24028>>>>>>>>>
24028>>>>>>>>>    Function ComAutoTheme Returns Boolean
24030>>>>>>>>>        Boolean retVal
24030>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
24031>>>>>>>>>        Function_Return retVal
24032>>>>>>>>>    End_Function
24033>>>>>>>>>
24033>>>>>>>>>    Procedure Set ComAutoTheme Boolean value
24035>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
24036>>>>>>>>>    End_Procedure
24037>>>>>>>>>
24037>>>>>>>>>    Function ComThemedBackColor Returns Boolean
24039>>>>>>>>>        Boolean retVal
24039>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
24040>>>>>>>>>        Function_Return retVal
24041>>>>>>>>>    End_Function
24042>>>>>>>>>
24042>>>>>>>>>    Procedure Set ComThemedBackColor Boolean value
24044>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
24045>>>>>>>>>    End_Procedure
24046>>>>>>>>>
24046>>>>>>>>>    Function ComUseSplitterTracker Returns Boolean
24048>>>>>>>>>        Boolean retVal
24048>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
24049>>>>>>>>>        Function_Return retVal
24050>>>>>>>>>    End_Function
24051>>>>>>>>>
24051>>>>>>>>>    Procedure Set ComUseSplitterTracker Boolean value
24053>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
24054>>>>>>>>>    End_Procedure
24055>>>>>>>>>
24055>>>>>>>>>    Function ComHorizGroupSplitting Returns Boolean
24057>>>>>>>>>        Boolean retVal
24057>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
24058>>>>>>>>>        Function_Return retVal
24059>>>>>>>>>    End_Function
24060>>>>>>>>>
24060>>>>>>>>>    Procedure Set ComHorizGroupSplitting Boolean value
24062>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
24063>>>>>>>>>    End_Procedure
24064>>>>>>>>>
24064>>>>>>>>>    Function ComNewTabPosition Returns XTPWorkspaceNewTabPosition
24066>>>>>>>>>        XTPWorkspaceNewTabPosition retVal
24066>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to retVal
24067>>>>>>>>>        Function_Return retVal
24068>>>>>>>>>    End_Function
24069>>>>>>>>>
24069>>>>>>>>>    Procedure Set ComNewTabPosition XTPWorkspaceNewTabPosition value
24071>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to value
24072>>>>>>>>>    End_Procedure
24073>>>>>>>>>
24073>>>>>>>>>    Function ComRightToLeft Returns Boolean
24075>>>>>>>>>        Boolean retVal
24075>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
24076>>>>>>>>>        Function_Return retVal
24077>>>>>>>>>    End_Function
24078>>>>>>>>>
24078>>>>>>>>>    Procedure Set ComRightToLeft Boolean value
24080>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
24081>>>>>>>>>    End_Procedure
24082>>>>>>>>>
24082>>>>>>>>>    Function ComIgnoreFlickersOnActivate Returns Boolean
24084>>>>>>>>>        Boolean retVal
24084>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_BOOL to retVal
24085>>>>>>>>>        Function_Return retVal
24086>>>>>>>>>    End_Function
24087>>>>>>>>>
24087>>>>>>>>>    Procedure Set ComIgnoreFlickersOnActivate Boolean value
24089>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_BOOL to value
24090>>>>>>>>>    End_Procedure
24091>>>>>>>>>
24091>>>>>>>>>    Function ComAutoUpdateTabCaption Returns Boolean
24093>>>>>>>>>        Boolean retVal
24093>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_BOOL to retVal
24094>>>>>>>>>        Function_Return retVal
24095>>>>>>>>>    End_Function
24096>>>>>>>>>
24096>>>>>>>>>    Procedure Set ComAutoUpdateTabCaption Boolean value
24098>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_BOOL to value
24099>>>>>>>>>    End_Procedure
24100>>>>>>>>>
24100>>>>>>>>>    Function ComEnableMarkup Returns Boolean
24102>>>>>>>>>        Boolean retVal
24102>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
24103>>>>>>>>>        Function_Return retVal
24104>>>>>>>>>    End_Function
24105>>>>>>>>>
24105>>>>>>>>>    Procedure Set ComEnableMarkup Boolean value
24107>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
24108>>>>>>>>>    End_Procedure
24109>>>>>>>>>
24109>>>>>>>>>    Function ComPaintManager Returns Variant
24111>>>>>>>>>        Handle hDispatchDriver
24111>>>>>>>>>        Variant retVal
24111>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24112>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
24113>>>>>>>>>        Function_Return retVal
24114>>>>>>>>>    End_Function
24115>>>>>>>>>
24115>>>>>>>>>    Procedure ComEnableGroups
24117>>>>>>>>>        Handle hDispatchDriver
24117>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24118>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
24119>>>>>>>>>    End_Procedure
24120>>>>>>>>>
24120>>>>>>>>>    Procedure ComRefresh
24122>>>>>>>>>        Handle hDispatchDriver
24122>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24123>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
24124>>>>>>>>>    End_Procedure
24125>>>>>>>>>
24125>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
24127>>>>>>>>>        Handle hDispatchDriver
24127>>>>>>>>>        Variant retVal
24127>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24128>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24129>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24130>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
24131>>>>>>>>>        Function_Return retVal
24132>>>>>>>>>    End_Function
24133>>>>>>>>>
24133>>>>>>>>>    Function Com_NewEnum Returns Variant
24135>>>>>>>>>        Handle hDispatchDriver
24135>>>>>>>>>        Variant retVal
24135>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24136>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
24137>>>>>>>>>        Function_Return retVal
24138>>>>>>>>>    End_Function
24139>>>>>>>>>
24139>>>>>>>>>    Function ComItemCount Returns Integer
24141>>>>>>>>>        Handle hDispatchDriver
24141>>>>>>>>>        Integer retVal
24141>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24142>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
24143>>>>>>>>>        Function_Return retVal
24144>>>>>>>>>    End_Function
24145>>>>>>>>>
24145>>>>>>>>>    Function ComHitTest Integer llx Integer lly Returns Variant
24147>>>>>>>>>        Handle hDispatchDriver
24147>>>>>>>>>        Variant retVal
24147>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24148>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24149>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
24150>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
24151>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_DISPATCH to retVal
24152>>>>>>>>>        Function_Return retVal
24153>>>>>>>>>    End_Function
24154>>>>>>>>>
24154>>>>>>>>>    Function ComSelected Returns Variant
24156>>>>>>>>>        Handle hDispatchDriver
24156>>>>>>>>>        Variant retVal
24156>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24157>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_DISPATCH to retVal
24158>>>>>>>>>        Function_Return retVal
24159>>>>>>>>>    End_Function
24160>>>>>>>>>
24160>>>>>>>>>    Procedure ComDoWorkspaceCommand XTPWorkspaceCommand llId
24162>>>>>>>>>        Handle hDispatchDriver
24162>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24163>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24164>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24165>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
24166>>>>>>>>>    End_Procedure
24167>>>>>>>>>
24167>>>>>>>>>    Function ComIsWorkspaceCommandEnabled XTPWorkspaceCommand llId Returns Boolean
24169>>>>>>>>>        Handle hDispatchDriver
24169>>>>>>>>>        Boolean retVal
24169>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24170>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24171>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24172>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_BOOL to retVal
24173>>>>>>>>>        Function_Return retVal
24174>>>>>>>>>    End_Function
24175>>>>>>>>>
24175>>>>>>>>>    Function ComToolTipContext Returns Variant
24177>>>>>>>>>        Handle hDispatchDriver
24177>>>>>>>>>        Variant retVal
24177>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24178>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
24179>>>>>>>>>        Function_Return retVal
24180>>>>>>>>>    End_Function
24181>>>>>>>>>
24181>>>>>>>>>    Function ComGroupCount Returns Integer
24183>>>>>>>>>        Handle hDispatchDriver
24183>>>>>>>>>        Integer retVal
24183>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24184>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_I4 to retVal
24185>>>>>>>>>        Function_Return retVal
24186>>>>>>>>>    End_Function
24187>>>>>>>>>
24187>>>>>>>>>    Function ComFindItem OLE_HANDLE llhWnd Returns Variant
24189>>>>>>>>>        Handle hDispatchDriver
24189>>>>>>>>>        Variant retVal
24189>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24190>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24191>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
24192>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 21 OLE_VT_DISPATCH to retVal
24193>>>>>>>>>        Function_Return retVal
24194>>>>>>>>>    End_Function
24195>>>>>>>>>
24195>>>>>>>>>    Function ComFindGroup Variant llpItem Returns Integer
24197>>>>>>>>>        Handle hDispatchDriver
24197>>>>>>>>>        Integer retVal
24197>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24198>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24199>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpItem
24200>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 22 OLE_VT_I4 to retVal
24201>>>>>>>>>        Function_Return retVal
24202>>>>>>>>>    End_Function
24203>>>>>>>>>
24203>>>>>>>>>    Procedure ComCreateGroup Variant llItem Boolean llHoriz
24205>>>>>>>>>        Handle hDispatchDriver
24205>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24206>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24207>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llItem
24208>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llHoriz
24209>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
24210>>>>>>>>>    End_Procedure
24211>>>>>>>>>
24211>>>>>>>>>    Procedure ComMoveToGroup Variant llItem Integer llGroup
24213>>>>>>>>>        Handle hDispatchDriver
24213>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24214>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24215>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llItem
24216>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llGroup
24217>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 24 OLE_VT_VOID
24218>>>>>>>>>    End_Procedure
24219>>>>>>>>>
24219>>>>>>>>>    Function ComGroupSplitter Integer llGroup Returns Real
24221>>>>>>>>>        Handle hDispatchDriver
24221>>>>>>>>>        Real retVal
24221>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24222>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24223>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llGroup
24224>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 27 OLE_VT_R8 to retVal
24225>>>>>>>>>        Function_Return retVal
24226>>>>>>>>>    End_Function
24227>>>>>>>>>
24227>>>>>>>>>    Procedure Set ComGroupSplitter Integer llGroup Real value
24229>>>>>>>>>        Handle hDispatchDriver
24229>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24230>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24231>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llGroup
24232>>>>>>>>>        Set ComProperty of hDispatchDriver 27 OLE_VT_R8 to value
24233>>>>>>>>>    End_Procedure
24234>>>>>>>>>
24234>>>>>>>>>    Procedure ComShowNewWindowTab Boolean llShow Integer llCommand
24236>>>>>>>>>        Handle hDispatchDriver
24236>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24237>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24238>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShow
24239>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
24240>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
24241>>>>>>>>>    End_Procedure
24242>>>>>>>>>
24242>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
24244>>>>>>>>>        Handle hDispatchDriver
24244>>>>>>>>>        OLE_HANDLE retVal
24244>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24245>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
24246>>>>>>>>>        Function_Return retVal
24247>>>>>>>>>    End_Function
24248>>>>>>>>>End_Class
24249>>>>>>>>>
24249>>>>>>>>>// CLSID: {C0DE2200-9AF2-433A-BA6D-8D7B12B76E12}
24249>>>>>>>>>Class cCJITabWorkspaceEvents is a Mixin
24250>>>>>>>>>
24250>>>>>>>>>    Procedure OnComRClick Variant llItem
24252>>>>>>>>>    End_Procedure
24253>>>>>>>>>
24253>>>>>>>>>    Procedure OnComNewItem Variant llItem
24255>>>>>>>>>    End_Procedure
24256>>>>>>>>>
24256>>>>>>>>>    Procedure OnComSelectedChanged Variant llItem
24258>>>>>>>>>    End_Procedure
24259>>>>>>>>>
24259>>>>>>>>>    Procedure OnComBeforeItemClick Variant llItem
24261>>>>>>>>>    End_Procedure
24262>>>>>>>>>
24262>>>>>>>>>    Procedure RegisterComEvents
24264>>>>>>>>>        Send RegisterComEvent 1 msg_OnComRClick
24265>>>>>>>>>        Send RegisterComEvent 2 msg_OnComNewItem
24266>>>>>>>>>        Send RegisterComEvent 3 msg_OnComSelectedChanged
24267>>>>>>>>>        Send RegisterComEvent 4 msg_OnComBeforeItemClick
24268>>>>>>>>>    End_Procedure
24269>>>>>>>>>End_Class
24270>>>>>>>>>
24270>>>>>>>>>// CoClass
24270>>>>>>>>>// CLSID: {C0DE2200-C1B2-4583-B022-37367FE0CF90}
24270>>>>>>>>>Class cCJTabWorkspace is a cComAutomationObject
24271>>>>>>>>>    Import_Class_Protocol cCJITabWorkspace
24272>>>>>>>>>    Import_Class_Protocol cCJITabWorkspaceEvents
24273>>>>>>>>>
24273>>>>>>>>>    Procedure Construct_Object
24275>>>>>>>>>        Forward Send Construct_Object
24277>>>>>>>>>        Set psEventId to "{C0DE2200-9AF2-433A-BA6D-8D7B12B76E12}"
24278>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
24279>>>>>>>>>    End_Procedure
24280>>>>>>>>>End_Class
24281>>>>>>>>>
24281>>>>>>>>>// CLSID: {C0DE2200-7A0A-447D-9CDC-8F63E7E5AF55}
24281>>>>>>>>>// Dispatch interface for StatusBar Control
24281>>>>>>>>>Class cCJIStatusBar is a Mixin
24282>>>>>>>>>
24282>>>>>>>>>    Function ComVisible Returns Boolean
24284>>>>>>>>>        Boolean retVal
24284>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
24285>>>>>>>>>        Function_Return retVal
24286>>>>>>>>>    End_Function
24287>>>>>>>>>
24287>>>>>>>>>    Procedure Set ComVisible Boolean value
24289>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
24290>>>>>>>>>    End_Procedure
24291>>>>>>>>>
24291>>>>>>>>>    Function ComIdleText Returns String
24293>>>>>>>>>        String retVal
24293>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
24294>>>>>>>>>        Function_Return retVal
24295>>>>>>>>>    End_Function
24296>>>>>>>>>
24296>>>>>>>>>    Procedure Set ComIdleText String value
24298>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
24299>>>>>>>>>    End_Procedure
24300>>>>>>>>>
24300>>>>>>>>>    Function ComDrawDisabledText Returns Boolean
24302>>>>>>>>>        Boolean retVal
24302>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
24303>>>>>>>>>        Function_Return retVal
24304>>>>>>>>>    End_Function
24305>>>>>>>>>
24305>>>>>>>>>    Procedure Set ComDrawDisabledText Boolean value
24307>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
24308>>>>>>>>>    End_Procedure
24309>>>>>>>>>
24309>>>>>>>>>    Function ComMinHeight Returns Integer
24311>>>>>>>>>        Integer retVal
24311>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to retVal
24312>>>>>>>>>        Function_Return retVal
24313>>>>>>>>>    End_Function
24314>>>>>>>>>
24314>>>>>>>>>    Procedure Set ComMinHeight Integer value
24316>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to value
24317>>>>>>>>>    End_Procedure
24318>>>>>>>>>
24318>>>>>>>>>    Function ComFont Returns Variant
24320>>>>>>>>>        Variant retVal
24320>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
24321>>>>>>>>>        Function_Return retVal
24322>>>>>>>>>    End_Function
24323>>>>>>>>>
24323>>>>>>>>>    Procedure Set ComFont Variant value
24325>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
24326>>>>>>>>>    End_Procedure
24327>>>>>>>>>
24327>>>>>>>>>    Function ComShowSizeGripper Returns Boolean
24329>>>>>>>>>        Boolean retVal
24329>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BOOL to retVal
24330>>>>>>>>>        Function_Return retVal
24331>>>>>>>>>    End_Function
24332>>>>>>>>>
24332>>>>>>>>>    Procedure Set ComShowSizeGripper Boolean value
24334>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BOOL to value
24335>>>>>>>>>    End_Procedure
24336>>>>>>>>>
24336>>>>>>>>>    Function ComRibbonDividerIndex Returns Integer
24338>>>>>>>>>        Integer retVal
24338>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_I4 to retVal
24339>>>>>>>>>        Function_Return retVal
24340>>>>>>>>>    End_Function
24341>>>>>>>>>
24341>>>>>>>>>    Procedure Set ComRibbonDividerIndex Integer value
24343>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_I4 to value
24344>>>>>>>>>    End_Procedure
24345>>>>>>>>>
24345>>>>>>>>>    Function ComEnableMarkup Returns Boolean
24347>>>>>>>>>        Boolean retVal
24347>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
24348>>>>>>>>>        Function_Return retVal
24349>>>>>>>>>    End_Function
24350>>>>>>>>>
24350>>>>>>>>>    Procedure Set ComEnableMarkup Boolean value
24352>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
24353>>>>>>>>>    End_Procedure
24354>>>>>>>>>
24354>>>>>>>>>    Function ComIsAllCaps Returns Boolean
24356>>>>>>>>>        Boolean retVal
24356>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to retVal
24357>>>>>>>>>        Function_Return retVal
24358>>>>>>>>>    End_Function
24359>>>>>>>>>
24359>>>>>>>>>    Procedure Set ComIsAllCaps Boolean value
24361>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to value
24362>>>>>>>>>    End_Procedure
24363>>>>>>>>>
24363>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
24365>>>>>>>>>        Handle hDispatchDriver
24365>>>>>>>>>        OLE_HANDLE retVal
24365>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24366>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
24367>>>>>>>>>        Function_Return retVal
24368>>>>>>>>>    End_Function
24369>>>>>>>>>
24369>>>>>>>>>    Function ComAddPane Integer llId Returns Variant
24371>>>>>>>>>        Handle hDispatchDriver
24371>>>>>>>>>        Variant retVal
24371>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24372>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24373>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24374>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
24375>>>>>>>>>        Function_Return retVal
24376>>>>>>>>>    End_Function
24377>>>>>>>>>
24377>>>>>>>>>    Procedure ComSetPaneText Integer llIndex String llText
24379>>>>>>>>>        Handle hDispatchDriver
24379>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24380>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24381>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24382>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
24383>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
24384>>>>>>>>>    End_Procedure
24385>>>>>>>>>
24385>>>>>>>>>    Procedure ComSetPaneWidth Integer llIndex Integer llWidth
24387>>>>>>>>>        Handle hDispatchDriver
24387>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24388>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24389>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24390>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
24391>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
24392>>>>>>>>>    End_Procedure
24393>>>>>>>>>
24393>>>>>>>>>    Procedure ComSetPaneStyle Integer llIndex XTPStatusPaneStyle llStyle
24395>>>>>>>>>        Handle hDispatchDriver
24395>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24396>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24397>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24398>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llStyle
24399>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
24400>>>>>>>>>    End_Procedure
24401>>>>>>>>>
24401>>>>>>>>>    Function ComPane Integer llIndex Returns Variant
24403>>>>>>>>>        Handle hDispatchDriver
24403>>>>>>>>>        Variant retVal
24403>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24404>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24405>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24406>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
24407>>>>>>>>>        Function_Return retVal
24408>>>>>>>>>    End_Function
24409>>>>>>>>>
24409>>>>>>>>>    Function Com_NewEnum Returns Variant
24411>>>>>>>>>        Handle hDispatchDriver
24411>>>>>>>>>        Variant retVal
24411>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24412>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
24413>>>>>>>>>        Function_Return retVal
24414>>>>>>>>>    End_Function
24415>>>>>>>>>
24415>>>>>>>>>    Procedure ComRemoveAll
24417>>>>>>>>>        Handle hDispatchDriver
24417>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24418>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
24419>>>>>>>>>    End_Procedure
24420>>>>>>>>>
24420>>>>>>>>>    Function ComPaneCount Returns Integer
24422>>>>>>>>>        Handle hDispatchDriver
24422>>>>>>>>>        Integer retVal
24422>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24423>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_I4 to retVal
24424>>>>>>>>>        Function_Return retVal
24425>>>>>>>>>    End_Function
24426>>>>>>>>>
24426>>>>>>>>>    Function ComInsertPane Integer llIndex Integer llId Returns Variant
24428>>>>>>>>>        Handle hDispatchDriver
24428>>>>>>>>>        Variant retVal
24428>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24429>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24430>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24431>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24432>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_DISPATCH to retVal
24433>>>>>>>>>        Function_Return retVal
24434>>>>>>>>>    End_Function
24435>>>>>>>>>
24435>>>>>>>>>    Function ComFindPane Integer llId Returns Variant
24437>>>>>>>>>        Handle hDispatchDriver
24437>>>>>>>>>        Variant retVal
24437>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24438>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24439>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24440>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
24441>>>>>>>>>        Function_Return retVal
24442>>>>>>>>>    End_Function
24443>>>>>>>>>
24443>>>>>>>>>    Function ComHitTest Integer llx Integer lly Returns Variant
24445>>>>>>>>>        Handle hDispatchDriver
24445>>>>>>>>>        Variant retVal
24445>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24446>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24447>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
24448>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
24449>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
24450>>>>>>>>>        Function_Return retVal
24451>>>>>>>>>    End_Function
24452>>>>>>>>>
24452>>>>>>>>>    Function ComToolTipContext Returns Variant
24454>>>>>>>>>        Handle hDispatchDriver
24454>>>>>>>>>        Variant retVal
24454>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24455>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 15 OLE_VT_DISPATCH to retVal
24456>>>>>>>>>        Function_Return retVal
24457>>>>>>>>>    End_Function
24458>>>>>>>>>
24458>>>>>>>>>    Function ComAddSwitchPane Integer llId Returns Variant
24460>>>>>>>>>        Handle hDispatchDriver
24460>>>>>>>>>        Variant retVal
24460>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24461>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24462>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24463>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 17 OLE_VT_DISPATCH to retVal
24464>>>>>>>>>        Function_Return retVal
24465>>>>>>>>>    End_Function
24466>>>>>>>>>
24466>>>>>>>>>    Function ComAddSliderPane Integer llId Returns Variant
24468>>>>>>>>>        Handle hDispatchDriver
24468>>>>>>>>>        Variant retVal
24468>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24469>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24470>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24471>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 18 OLE_VT_DISPATCH to retVal
24472>>>>>>>>>        Function_Return retVal
24473>>>>>>>>>    End_Function
24474>>>>>>>>>
24474>>>>>>>>>    Function ComAddProgressPane Integer llId Returns Variant
24476>>>>>>>>>        Handle hDispatchDriver
24476>>>>>>>>>        Variant retVal
24476>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24477>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24478>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24479>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 21 OLE_VT_DISPATCH to retVal
24480>>>>>>>>>        Function_Return retVal
24481>>>>>>>>>    End_Function
24482>>>>>>>>>
24482>>>>>>>>>    Procedure ComEnableCustomization Boolean llEnable
24484>>>>>>>>>        Handle hDispatchDriver
24484>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24485>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24486>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24487>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
24488>>>>>>>>>    End_Procedure
24489>>>>>>>>>
24489>>>>>>>>>    Procedure ComSetAllCaps Boolean llSetAllCaps
24491>>>>>>>>>        Handle hDispatchDriver
24491>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24492>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24493>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllCaps
24494>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
24495>>>>>>>>>    End_Procedure
24496>>>>>>>>>End_Class
24497>>>>>>>>>
24497>>>>>>>>>// CLSID: {C0DE2200-4037-4B66-82A3-D948409E11A6}
24497>>>>>>>>>Class cCJIStatusBarEvents is a Mixin
24498>>>>>>>>>
24498>>>>>>>>>    Procedure OnComMouseDown Short llButton Short llShift Integer llx Integer lly
24500>>>>>>>>>    End_Procedure
24501>>>>>>>>>
24501>>>>>>>>>    Procedure OnComMouseUp Short llButton Short llShift Integer llx Integer lly
24503>>>>>>>>>    End_Procedure
24504>>>>>>>>>
24504>>>>>>>>>    Procedure OnComPaneDblClick Variant llPane
24506>>>>>>>>>    End_Procedure
24507>>>>>>>>>
24507>>>>>>>>>    Procedure OnComPaneClick Variant llPane
24509>>>>>>>>>    End_Procedure
24510>>>>>>>>>
24510>>>>>>>>>    Procedure OnComSwitchPaneClick Variant llPane Integer llSwitch
24512>>>>>>>>>    End_Procedure
24513>>>>>>>>>
24513>>>>>>>>>    Procedure OnComSliderPaneClick Variant llPane XTPSliderCommand llCommand Integer llPos
24515>>>>>>>>>    End_Procedure
24516>>>>>>>>>
24516>>>>>>>>>    Procedure RegisterComEvents
24518>>>>>>>>>        Send RegisterComEvent -605 msg_OnComMouseDown
24519>>>>>>>>>        Send RegisterComEvent -607 msg_OnComMouseUp
24520>>>>>>>>>        Send RegisterComEvent 1 msg_OnComPaneDblClick
24521>>>>>>>>>        Send RegisterComEvent 2 msg_OnComPaneClick
24522>>>>>>>>>        Send RegisterComEvent 3 msg_OnComSwitchPaneClick
24523>>>>>>>>>        Send RegisterComEvent 4 msg_OnComSliderPaneClick
24524>>>>>>>>>    End_Procedure
24525>>>>>>>>>End_Class
24526>>>>>>>>>
24526>>>>>>>>>// CoClass
24526>>>>>>>>>// CLSID: {C0DE2200-0AC9-4997-B4D7-75B0F2E7E4BD}
24526>>>>>>>>>// Xtreme StatusBar Control
24526>>>>>>>>>Class cCJComStatusBar is a cComAutomationObject
24527>>>>>>>>>    Import_Class_Protocol cCJIStatusBar
24528>>>>>>>>>    Import_Class_Protocol cCJIStatusBarEvents
24529>>>>>>>>>
24529>>>>>>>>>    Procedure Construct_Object
24531>>>>>>>>>        Forward Send Construct_Object
24533>>>>>>>>>        Set psEventId to "{C0DE2200-4037-4B66-82A3-D948409E11A6}"
24534>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
24535>>>>>>>>>    End_Procedure
24536>>>>>>>>>End_Class
24537>>>>>>>>>
24537>>>>>>>>>// CLSID: {C0DE2200-97D0-43D4-BEE8-9E2511D89F64}
24537>>>>>>>>>// Dispatch interface for CommandBars Control
24537>>>>>>>>>Class cCJ_DCommandBarsFrame is a Mixin
24538>>>>>>>>>
24538>>>>>>>>>    Function ComVisualTheme Returns XTPVisualTheme
24540>>>>>>>>>        XTPVisualTheme retVal
24540>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
24541>>>>>>>>>        Function_Return retVal
24542>>>>>>>>>    End_Function
24543>>>>>>>>>
24543>>>>>>>>>    Procedure Set ComVisualTheme XTPVisualTheme value
24545>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
24546>>>>>>>>>    End_Procedure
24547>>>>>>>>>
24547>>>>>>>>>    Function ComIcons Returns Variant
24549>>>>>>>>>        Variant retVal
24549>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
24550>>>>>>>>>        Function_Return retVal
24551>>>>>>>>>    End_Function
24552>>>>>>>>>
24552>>>>>>>>>    Procedure Set ComIcons Variant value
24554>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
24555>>>>>>>>>    End_Procedure
24556>>>>>>>>>
24556>>>>>>>>>    Function ComScaleMode Returns XTPScaleMode
24558>>>>>>>>>        XTPScaleMode retVal
24558>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
24559>>>>>>>>>        Function_Return retVal
24560>>>>>>>>>    End_Function
24561>>>>>>>>>
24561>>>>>>>>>    Procedure Set ComScaleMode XTPScaleMode value
24563>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
24564>>>>>>>>>    End_Procedure
24565>>>>>>>>>
24565>>>>>>>>>    Function ComRightToLeft Returns Boolean
24567>>>>>>>>>        Boolean retVal
24567>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to retVal
24568>>>>>>>>>        Function_Return retVal
24569>>>>>>>>>    End_Function
24570>>>>>>>>>
24570>>>>>>>>>    Procedure Set ComRightToLeft Boolean value
24572>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to value
24573>>>>>>>>>    End_Procedure
24574>>>>>>>>>
24574>>>>>>>>>    Function ComIsAllCaps Returns Boolean
24576>>>>>>>>>        Boolean retVal
24576>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_BOOL to retVal
24577>>>>>>>>>        Function_Return retVal
24578>>>>>>>>>    End_Function
24579>>>>>>>>>
24579>>>>>>>>>    Procedure Set ComIsAllCaps Boolean value
24581>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_BOOL to value
24582>>>>>>>>>    End_Procedure
24583>>>>>>>>>
24583>>>>>>>>>    Function ComIsAllowFrameTransparency Returns Boolean
24585>>>>>>>>>        Boolean retVal
24585>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_BOOL to retVal
24586>>>>>>>>>        Function_Return retVal
24587>>>>>>>>>    End_Function
24588>>>>>>>>>
24588>>>>>>>>>    Procedure Set ComIsAllowFrameTransparency Boolean value
24590>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_BOOL to value
24591>>>>>>>>>    End_Procedure
24592>>>>>>>>>
24592>>>>>>>>>    Function ComReCreateReparented Returns Boolean
24594>>>>>>>>>        Boolean retVal
24594>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
24595>>>>>>>>>        Function_Return retVal
24596>>>>>>>>>    End_Function
24597>>>>>>>>>
24597>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
24599>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
24600>>>>>>>>>    End_Procedure
24601>>>>>>>>>
24601>>>>>>>>>    Function ComCount Returns Integer
24603>>>>>>>>>        Handle hDispatchDriver
24603>>>>>>>>>        Integer retVal
24603>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24604>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
24605>>>>>>>>>        Function_Return retVal
24606>>>>>>>>>    End_Function
24607>>>>>>>>>
24607>>>>>>>>>    // Returns a specific item.
24607>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
24609>>>>>>>>>        Handle hDispatchDriver
24609>>>>>>>>>        Variant retVal
24609>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24610>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24611>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24612>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
24613>>>>>>>>>        Function_Return retVal
24614>>>>>>>>>    End_Function
24615>>>>>>>>>
24615>>>>>>>>>    Function Com_NewEnum Returns Variant
24617>>>>>>>>>        Handle hDispatchDriver
24617>>>>>>>>>        Variant retVal
24617>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24618>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
24619>>>>>>>>>        Function_Return retVal
24620>>>>>>>>>    End_Function
24621>>>>>>>>>
24621>>>>>>>>>    Function ComAdd String llName XTPBarPosition llPosition Returns Variant
24623>>>>>>>>>        Handle hDispatchDriver
24623>>>>>>>>>        Variant retVal
24623>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24624>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24625>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24626>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
24627>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
24628>>>>>>>>>        Function_Return retVal
24629>>>>>>>>>    End_Function
24630>>>>>>>>>
24630>>>>>>>>>    Procedure ComAddImageList Variant llImageList
24632>>>>>>>>>        Handle hDispatchDriver
24632>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24633>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24634>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llImageList
24635>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
24636>>>>>>>>>    End_Procedure
24637>>>>>>>>>
24637>>>>>>>>>    Function ComActiveMenuBar Returns Variant
24639>>>>>>>>>        Handle hDispatchDriver
24639>>>>>>>>>        Variant retVal
24639>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24640>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
24641>>>>>>>>>        Function_Return retVal
24642>>>>>>>>>    End_Function
24643>>>>>>>>>
24643>>>>>>>>>    Procedure ComGetClientRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
24645>>>>>>>>>        Handle hDispatchDriver
24645>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24646>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24647>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
24648>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
24649>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
24650>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
24651>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
24652>>>>>>>>>    End_Procedure
24653>>>>>>>>>
24653>>>>>>>>>    Procedure ComRecalcLayout
24655>>>>>>>>>        Handle hDispatchDriver
24655>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24656>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
24657>>>>>>>>>    End_Procedure
24658>>>>>>>>>
24658>>>>>>>>>    Function ComKeyBindings Returns Variant
24660>>>>>>>>>        Handle hDispatchDriver
24660>>>>>>>>>        Variant retVal
24660>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24661>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_DISPATCH to retVal
24662>>>>>>>>>        Function_Return retVal
24663>>>>>>>>>    End_Function
24664>>>>>>>>>
24664>>>>>>>>>    Procedure ComAddIconHandle Integer llIcon Integer llCommand Integer llimageState Boolean llAlpha
24666>>>>>>>>>        Handle hDispatchDriver
24666>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24667>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24668>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIcon
24669>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
24670>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
24671>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llAlpha
24672>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
24673>>>>>>>>>    End_Procedure
24674>>>>>>>>>
24674>>>>>>>>>    Function ComOptions Returns Variant
24676>>>>>>>>>        Handle hDispatchDriver
24676>>>>>>>>>        Variant retVal
24676>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24677>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
24678>>>>>>>>>        Function_Return retVal
24679>>>>>>>>>    End_Function
24680>>>>>>>>>
24680>>>>>>>>>    Procedure ComSaveCommandBars Variant llRegistryKey Variant llAppName Variant llSection
24682>>>>>>>>>        Handle hDispatchDriver
24682>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24683>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
24684>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRegistryKey
24685>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llAppName
24686>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSection
24687>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
24688>>>>>>>>>    End_Procedure
24689>>>>>>>>>
24689>>>>>>>>>    Procedure ComLoadCommandBars Variant llRegistryKey Variant llAppName Variant llSection
24691>>>>>>>>>        Handle hDispatchDriver
24691>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24692>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
24693>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRegistryKey
24694>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llAppName
24695>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSection
24696>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
24697>>>>>>>>>    End_Procedure
24698>>>>>>>>>
24698>>>>>>>>>    Procedure ComLoadDesignerBars Variant llFileNameOrResource Variant llInstance
24700>>>>>>>>>        Handle hDispatchDriver
24700>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24701>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24702>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFileNameOrResource
24703>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llInstance
24704>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
24705>>>>>>>>>    End_Procedure
24706>>>>>>>>>
24706>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
24708>>>>>>>>>        Handle hDispatchDriver
24708>>>>>>>>>        Variant retVal
24708>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24709>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24710>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
24711>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
24712>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
24713>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
24714>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
24715>>>>>>>>>        Function_Return retVal
24716>>>>>>>>>    End_Function
24717>>>>>>>>>
24717>>>>>>>>>    Procedure ComAboutBox
24719>>>>>>>>>        Handle hDispatchDriver
24719>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24720>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
24721>>>>>>>>>    End_Procedure
24722>>>>>>>>>
24722>>>>>>>>>    Procedure ComDockToolBar Variant llToolBar Integer llx Integer lly XTPBarPosition llPosition
24724>>>>>>>>>        Handle hDispatchDriver
24724>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24725>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24726>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llToolBar
24727>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
24728>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
24729>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
24730>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
24731>>>>>>>>>    End_Procedure
24732>>>>>>>>>
24732>>>>>>>>>    Function ComGetSpecialColor XTPColorManagerColor llIndex Returns OLE_COLOR
24734>>>>>>>>>        Handle hDispatchDriver
24734>>>>>>>>>        OLE_COLOR retVal
24734>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24735>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24736>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24737>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 19 OLE_VT_I4 to retVal
24738>>>>>>>>>        Function_Return retVal
24739>>>>>>>>>    End_Function
24740>>>>>>>>>
24740>>>>>>>>>    Function ComShowTabWorkspace Boolean llShow Returns Variant
24742>>>>>>>>>        Handle hDispatchDriver
24742>>>>>>>>>        Variant retVal
24742>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24743>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24744>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShow
24745>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
24746>>>>>>>>>        Function_Return retVal
24747>>>>>>>>>    End_Function
24748>>>>>>>>>
24748>>>>>>>>>    Procedure ComMoveAlignedControl Variant llControl Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
24750>>>>>>>>>        Handle hDispatchDriver
24750>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24751>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
24752>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llControl
24753>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
24754>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
24755>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
24756>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
24757>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
24758>>>>>>>>>    End_Procedure
24759>>>>>>>>>
24759>>>>>>>>>    Function ComTabWorkspace Returns Variant
24761>>>>>>>>>        Handle hDispatchDriver
24761>>>>>>>>>        Variant retVal
24761>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24762>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 22 OLE_VT_DISPATCH to retVal
24763>>>>>>>>>        Function_Return retVal
24764>>>>>>>>>    End_Function
24765>>>>>>>>>
24765>>>>>>>>>    Procedure ComLoadStateFromString String llProfile Boolean llRestoreControls Boolean llRestoreOptions Boolean llSilent
24767>>>>>>>>>        Handle hDispatchDriver
24767>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24768>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24769>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
24770>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRestoreControls
24771>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRestoreOptions
24772>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSilent
24773>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
24774>>>>>>>>>    End_Procedure
24775>>>>>>>>>
24775>>>>>>>>>    Function ComSaveStateToString Boolean llSaveControls Boolean llSaveOnlyCustomized Boolean llSaveOptions Returns String
24777>>>>>>>>>        Handle hDispatchDriver
24777>>>>>>>>>        String retVal
24777>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24778>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
24779>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveControls
24780>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveOnlyCustomized
24781>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveOptions
24782>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 24 OLE_VT_BSTR to retVal
24783>>>>>>>>>        Function_Return retVal
24784>>>>>>>>>    End_Function
24785>>>>>>>>>
24785>>>>>>>>>    Function ComStatusBar Returns Variant
24787>>>>>>>>>        Handle hDispatchDriver
24787>>>>>>>>>        Variant retVal
24787>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24788>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 25 OLE_VT_DISPATCH to retVal
24789>>>>>>>>>        Function_Return retVal
24790>>>>>>>>>    End_Function
24791>>>>>>>>>
24791>>>>>>>>>    Function ComMessageBar Returns Variant
24793>>>>>>>>>        Handle hDispatchDriver
24793>>>>>>>>>        Variant retVal
24793>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24794>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 28 OLE_VT_DISPATCH to retVal
24795>>>>>>>>>        Function_Return retVal
24796>>>>>>>>>    End_Function
24797>>>>>>>>>
24797>>>>>>>>>    Procedure ComEnableCustomization Boolean llEnable
24799>>>>>>>>>        Handle hDispatchDriver
24799>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24800>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24801>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24802>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 26 OLE_VT_VOID
24803>>>>>>>>>    End_Procedure
24804>>>>>>>>>
24804>>>>>>>>>    Function ComDesignerControls Returns Variant
24806>>>>>>>>>        Handle hDispatchDriver
24806>>>>>>>>>        Variant retVal
24806>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24807>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 27 OLE_VT_DISPATCH to retVal
24808>>>>>>>>>        Function_Return retVal
24809>>>>>>>>>    End_Function
24810>>>>>>>>>
24810>>>>>>>>>    Procedure ComEnableDefaultResetCustomizedToolbarChoice Boolean llEnable Boolean llDefaultYes
24812>>>>>>>>>        Handle hDispatchDriver
24812>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24813>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24814>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24815>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llDefaultYes
24816>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 72 OLE_VT_VOID
24817>>>>>>>>>    End_Procedure
24818>>>>>>>>>
24818>>>>>>>>>    Function ComGetDispatch Returns Variant
24820>>>>>>>>>        Handle hDispatchDriver
24820>>>>>>>>>        Variant retVal
24820>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24821>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 31 OLE_VT_DISPATCH to retVal
24822>>>>>>>>>        Function_Return retVal
24823>>>>>>>>>    End_Function
24824>>>>>>>>>
24824>>>>>>>>>    Procedure ComSetMDIClient OLE_HANDLE llhWnd
24826>>>>>>>>>        Handle hDispatchDriver
24826>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24827>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24828>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
24829>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
24830>>>>>>>>>    End_Procedure
24831>>>>>>>>>
24831>>>>>>>>>    Function ComGlobalSettings Returns Variant
24833>>>>>>>>>        Handle hDispatchDriver
24833>>>>>>>>>        Variant retVal
24833>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24834>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_DISPATCH to retVal
24835>>>>>>>>>        Function_Return retVal
24836>>>>>>>>>    End_Function
24837>>>>>>>>>
24837>>>>>>>>>    Procedure ComClosePopups
24839>>>>>>>>>        Handle hDispatchDriver
24839>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24840>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 34 OLE_VT_VOID
24841>>>>>>>>>    End_Procedure
24842>>>>>>>>>
24842>>>>>>>>>    Procedure ComSetSpecialColor XTPColorManagerColor llIndex OLE_COLOR llColor
24844>>>>>>>>>        Handle hDispatchDriver
24844>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24845>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24846>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24847>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
24848>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
24849>>>>>>>>>    End_Procedure
24850>>>>>>>>>
24850>>>>>>>>>    Function ComAddDialogBar String llName XTPBarPosition llPosition Returns Variant
24852>>>>>>>>>        Handle hDispatchDriver
24852>>>>>>>>>        Variant retVal
24852>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24853>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24854>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24855>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
24856>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 36 OLE_VT_DISPATCH to retVal
24857>>>>>>>>>        Function_Return retVal
24858>>>>>>>>>    End_Function
24859>>>>>>>>>
24859>>>>>>>>>    Procedure ComLoadStateFromXMLString String llProfile String llstate Variant llOptions
24861>>>>>>>>>        Handle hDispatchDriver
24861>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24862>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
24863>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
24864>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstate
24865>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
24866>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
24867>>>>>>>>>    End_Procedure
24868>>>>>>>>>
24868>>>>>>>>>    Function ComSaveStateToXMLString String llProfile Variant llOptions Returns String
24870>>>>>>>>>        Handle hDispatchDriver
24870>>>>>>>>>        String retVal
24870>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24871>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24872>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
24873>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
24874>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 38 OLE_VT_BSTR to retVal
24875>>>>>>>>>        Function_Return retVal
24876>>>>>>>>>    End_Function
24877>>>>>>>>>
24877>>>>>>>>>    Function ComCreateStateOptions Returns Variant
24879>>>>>>>>>        Handle hDispatchDriver
24879>>>>>>>>>        Variant retVal
24879>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24880>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 39 OLE_VT_DISPATCH to retVal
24881>>>>>>>>>        Function_Return retVal
24882>>>>>>>>>    End_Function
24883>>>>>>>>>
24883>>>>>>>>>    Procedure ComDoPropExchange Variant llpPX Variant llOptions
24885>>>>>>>>>        Handle hDispatchDriver
24885>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24886>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24887>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpPX
24888>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
24889>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 45 OLE_VT_VOID
24890>>>>>>>>>    End_Procedure
24891>>>>>>>>>
24891>>>>>>>>>    Function ComCustomizedControl Returns Variant
24893>>>>>>>>>        Handle hDispatchDriver
24893>>>>>>>>>        Variant retVal
24893>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24894>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_DISPATCH to retVal
24895>>>>>>>>>        Function_Return retVal
24896>>>>>>>>>    End_Function
24897>>>>>>>>>
24897>>>>>>>>>    // Deletes all of the toolbars
24897>>>>>>>>>    Procedure ComDeleteAll
24899>>>>>>>>>        Handle hDispatchDriver
24899>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24900>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 41 OLE_VT_VOID
24901>>>>>>>>>    End_Procedure
24902>>>>>>>>>
24902>>>>>>>>>    Function ComToolTipContext Returns Variant
24904>>>>>>>>>        Handle hDispatchDriver
24904>>>>>>>>>        Variant retVal
24904>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24905>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 42 OLE_VT_DISPATCH to retVal
24906>>>>>>>>>        Function_Return retVal
24907>>>>>>>>>    End_Function
24908>>>>>>>>>
24908>>>>>>>>>    Function ComTrackingMode Returns Boolean
24910>>>>>>>>>        Handle hDispatchDriver
24910>>>>>>>>>        Boolean retVal
24910>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24911>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_BOOL to retVal
24912>>>>>>>>>        Function_Return retVal
24913>>>>>>>>>    End_Function
24914>>>>>>>>>
24914>>>>>>>>>    Function ComFocusedCommandBar Returns Variant
24916>>>>>>>>>        Handle hDispatchDriver
24916>>>>>>>>>        Variant retVal
24916>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24917>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_DISPATCH to retVal
24918>>>>>>>>>        Function_Return retVal
24919>>>>>>>>>    End_Function
24920>>>>>>>>>
24920>>>>>>>>>    Function ComAddMenuBar String llName Returns Variant
24922>>>>>>>>>        Handle hDispatchDriver
24922>>>>>>>>>        Variant retVal
24922>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24923>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24924>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24925>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 47 OLE_VT_DISPATCH to retVal
24926>>>>>>>>>        Function_Return retVal
24927>>>>>>>>>    End_Function
24928>>>>>>>>>
24928>>>>>>>>>    Function ComAddTabToolBar String llName Returns Variant
24930>>>>>>>>>        Handle hDispatchDriver
24930>>>>>>>>>        Variant retVal
24930>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24931>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24932>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24933>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 48 OLE_VT_DISPATCH to retVal
24934>>>>>>>>>        Function_Return retVal
24935>>>>>>>>>    End_Function
24936>>>>>>>>>
24936>>>>>>>>>    Function ComAddRibbonBar String llName Returns Variant
24938>>>>>>>>>        Handle hDispatchDriver
24938>>>>>>>>>        Variant retVal
24938>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24939>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24940>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24941>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 49 OLE_VT_DISPATCH to retVal
24942>>>>>>>>>        Function_Return retVal
24943>>>>>>>>>    End_Function
24944>>>>>>>>>
24944>>>>>>>>>    Procedure ComAttachToWindow OLE_HANDLE llhWnd
24946>>>>>>>>>        Handle hDispatchDriver
24946>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24947>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24948>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
24949>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 50 OLE_VT_VOID
24950>>>>>>>>>    End_Procedure
24951>>>>>>>>>
24951>>>>>>>>>    Procedure ComShowCustomizeDialog Integer llActiveTab
24953>>>>>>>>>        Handle hDispatchDriver
24953>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24954>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24955>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llActiveTab
24956>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 51 OLE_VT_VOID
24957>>>>>>>>>    End_Procedure
24958>>>>>>>>>
24958>>>>>>>>>    Procedure ComEnableOffice2007Frame Boolean llEnable
24960>>>>>>>>>        Handle hDispatchDriver
24960>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24961>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24962>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24963>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 52 OLE_VT_VOID
24964>>>>>>>>>    End_Procedure
24965>>>>>>>>>
24965>>>>>>>>>    Procedure ComEnableFrameTheme Boolean llEnable
24967>>>>>>>>>        Handle hDispatchDriver
24967>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24968>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24969>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24970>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 90 OLE_VT_VOID
24971>>>>>>>>>    End_Procedure
24972>>>>>>>>>
24972>>>>>>>>>    Procedure ComEnableActions
24974>>>>>>>>>        Handle hDispatchDriver
24974>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24975>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 53 OLE_VT_VOID
24976>>>>>>>>>    End_Procedure
24977>>>>>>>>>
24977>>>>>>>>>    Function ComActions Returns Variant
24979>>>>>>>>>        Handle hDispatchDriver
24979>>>>>>>>>        Variant retVal
24979>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24980>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 54 OLE_VT_DISPATCH to retVal
24981>>>>>>>>>        Function_Return retVal
24982>>>>>>>>>    End_Function
24983>>>>>>>>>
24983>>>>>>>>>    Function ComPaintManager Returns Variant
24985>>>>>>>>>        Handle hDispatchDriver
24985>>>>>>>>>        Variant retVal
24985>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24986>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 55 OLE_VT_DISPATCH to retVal
24987>>>>>>>>>        Function_Return retVal
24988>>>>>>>>>    End_Function
24989>>>>>>>>>
24989>>>>>>>>>    Function ComCreateGalleryItems Integer llId Returns Variant
24991>>>>>>>>>        Handle hDispatchDriver
24991>>>>>>>>>        Variant retVal
24991>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24992>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24993>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24994>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 56 OLE_VT_DISPATCH to retVal
24995>>>>>>>>>        Function_Return retVal
24996>>>>>>>>>    End_Function
24997>>>>>>>>>
24997>>>>>>>>>    Procedure ComEnableOffice2007FrameHandle OLE_HANDLE llhWnd
24999>>>>>>>>>        Handle hDispatchDriver
24999>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25000>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25001>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
25002>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 57 OLE_VT_VOID
25003>>>>>>>>>    End_Procedure
25004>>>>>>>>>
25004>>>>>>>>>    Procedure ComEnableFrameThemeHandle OLE_HANDLE llhWnd
25006>>>>>>>>>        Handle hDispatchDriver
25006>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25007>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25008>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
25009>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 100 OLE_VT_VOID
25010>>>>>>>>>    End_Procedure
25011>>>>>>>>>
25011>>>>>>>>>    Function ComCreateCommandBarControl String llClassName Returns Variant
25013>>>>>>>>>        Handle hDispatchDriver
25013>>>>>>>>>        Variant retVal
25013>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25014>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25015>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
25016>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 58 OLE_VT_DISPATCH to retVal
25017>>>>>>>>>        Function_Return retVal
25018>>>>>>>>>    End_Function
25019>>>>>>>>>
25019>>>>>>>>>    Function ComCreateCommandBar String llClassName Returns Variant
25021>>>>>>>>>        Handle hDispatchDriver
25021>>>>>>>>>        Variant retVal
25021>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25022>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25023>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
25024>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 59 OLE_VT_DISPATCH to retVal
25025>>>>>>>>>        Function_Return retVal
25026>>>>>>>>>    End_Function
25027>>>>>>>>>
25027>>>>>>>>>    Function ComContextHelp Returns Integer
25029>>>>>>>>>        Handle hDispatchDriver
25029>>>>>>>>>        Integer retVal
25029>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25030>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 60 OLE_VT_I4 to retVal
25031>>>>>>>>>        Function_Return retVal
25032>>>>>>>>>    End_Function
25033>>>>>>>>>
25033>>>>>>>>>    Function ComContextMenus Returns Variant
25035>>>>>>>>>        Handle hDispatchDriver
25035>>>>>>>>>        Variant retVal
25035>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25036>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 61 OLE_VT_DISPATCH to retVal
25037>>>>>>>>>        Function_Return retVal
25038>>>>>>>>>    End_Function
25039>>>>>>>>>
25039>>>>>>>>>    Procedure ComOLEDrag
25041>>>>>>>>>        Handle hDispatchDriver
25041>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25042>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 62 OLE_VT_VOID
25043>>>>>>>>>    End_Procedure
25044>>>>>>>>>
25044>>>>>>>>>    Function ComAddMiniToolBar String llName Returns Variant
25046>>>>>>>>>        Handle hDispatchDriver
25046>>>>>>>>>        Variant retVal
25046>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25047>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25048>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
25049>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 63 OLE_VT_DISPATCH to retVal
25050>>>>>>>>>        Function_Return retVal
25051>>>>>>>>>    End_Function
25052>>>>>>>>>
25052>>>>>>>>>    Function ComRecentFileList Returns Variant
25054>>>>>>>>>        Handle hDispatchDriver
25054>>>>>>>>>        Variant retVal
25054>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25055>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 64 OLE_VT_DISPATCH to retVal
25056>>>>>>>>>        Function_Return retVal
25057>>>>>>>>>    End_Function
25058>>>>>>>>>
25058>>>>>>>>>    Procedure ComDisableOffice2007FrameHandle OLE_HANDLE llhWnd
25060>>>>>>>>>        Handle hDispatchDriver
25060>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25061>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25062>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
25063>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 65 OLE_VT_VOID
25064>>>>>>>>>    End_Procedure
25065>>>>>>>>>
25065>>>>>>>>>    Procedure ComDisableFrameThemeHandle OLE_HANDLE llhWnd
25067>>>>>>>>>        Handle hDispatchDriver
25067>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25068>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25069>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
25070>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 110 OLE_VT_VOID
25071>>>>>>>>>    End_Procedure
25072>>>>>>>>>
25072>>>>>>>>>    Procedure ComAddCustomBar Variant llCommandBar String llName XTPBarPosition llPosition
25074>>>>>>>>>        Handle hDispatchDriver
25074>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25075>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
25076>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llCommandBar
25077>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
25078>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
25079>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 66 OLE_VT_VOID
25080>>>>>>>>>    End_Procedure
25081>>>>>>>>>
25081>>>>>>>>>    Procedure ComEnableToolbarComposition Boolean llEnable
25083>>>>>>>>>        Handle hDispatchDriver
25083>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25084>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25085>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
25086>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 67 OLE_VT_VOID
25087>>>>>>>>>    End_Procedure
25088>>>>>>>>>
25088>>>>>>>>>    Procedure ComSetAllCaps Boolean llSetAllCaps
25090>>>>>>>>>        Handle hDispatchDriver
25090>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25091>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25092>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllCaps
25093>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 68 OLE_VT_VOID
25094>>>>>>>>>    End_Procedure
25095>>>>>>>>>
25095>>>>>>>>>    Procedure ComAllowFrameTransparency Boolean llSetAllowTransparency
25097>>>>>>>>>        Handle hDispatchDriver
25097>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25098>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25099>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllowTransparency
25100>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 70 OLE_VT_VOID
25101>>>>>>>>>    End_Procedure
25102>>>>>>>>>
25102>>>>>>>>>    Function ComSetOfficeSetBackImage XTPBackImage llBackImage Returns Boolean
25104>>>>>>>>>        Handle hDispatchDriver
25104>>>>>>>>>        Boolean retVal
25104>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25105>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25106>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBackImage
25107>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 80 OLE_VT_BOOL to retVal
25108>>>>>>>>>        Function_Return retVal
25109>>>>>>>>>    End_Function
25110>>>>>>>>>End_Class
25111>>>>>>>>>
25111>>>>>>>>>// CLSID: {C0DE2200-D2EF-4119-BBBB-8314B5794E11}
25111>>>>>>>>>// Event interface for CommandBars Control
25111>>>>>>>>>Class cCJ_DCommandBarsFrameEvents is a Mixin
25112>>>>>>>>>
25112>>>>>>>>>    Procedure OnComExecute Variant llControl
25114>>>>>>>>>    End_Procedure
25115>>>>>>>>>
25115>>>>>>>>>    Procedure OnComUpdate Variant llControl
25117>>>>>>>>>    End_Procedure
25118>>>>>>>>>
25118>>>>>>>>>    Procedure OnComResize
25120>>>>>>>>>    End_Procedure
25121>>>>>>>>>
25121>>>>>>>>>    Procedure OnComGetClientBordersWidth Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
25123>>>>>>>>>    End_Procedure
25124>>>>>>>>>
25124>>>>>>>>>    Procedure OnComControlSelected Variant llControl
25126>>>>>>>>>    End_Procedure
25127>>>>>>>>>
25127>>>>>>>>>    Procedure OnComInitCommandsPopup Variant llCommandBar
25129>>>>>>>>>    End_Procedure
25130>>>>>>>>>
25130>>>>>>>>>    Procedure OnComResizeClient Integer llLeft Integer llTop Integer llRight Integer llBottom
25132>>>>>>>>>    End_Procedure
25133>>>>>>>>>
25133>>>>>>>>>    Procedure OnComSpecialColorChanged
25135>>>>>>>>>    End_Procedure
25136>>>>>>>>>
25136>>>>>>>>>    Procedure OnComRepositionAlignedControls Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
25138>>>>>>>>>    End_Procedure
25139>>>>>>>>>
25139>>>>>>>>>    Procedure OnComCustomization Variant llOptions
25141>>>>>>>>>    End_Procedure
25142>>>>>>>>>
25142>>>>>>>>>    Procedure OnComToolBarVisibleChanged Variant llToolBar
25144>>>>>>>>>    End_Procedure
25145>>>>>>>>>
25145>>>>>>>>>    Procedure OnComControlRButtonUp Variant llControl
25147>>>>>>>>>    End_Procedure
25148>>>>>>>>>
25148>>>>>>>>>    Procedure OnComCustomizationDone
25150>>>>>>>>>    End_Procedure
25151>>>>>>>>>
25151>>>>>>>>>    Procedure OnComCommandBarKeyDown Variant llCommandBar Integer ByRef llKeyCode Short llShift
25153>>>>>>>>>    End_Procedure
25154>>>>>>>>>
25154>>>>>>>>>    Procedure OnComToolBarContextMenu Variant llToolBar Variant llContextMenu
25156>>>>>>>>>    End_Procedure
25157>>>>>>>>>
25157>>>>>>>>>    Procedure OnComTrackingModeChanged Variant llCommandBar Boolean llMode
25159>>>>>>>>>    End_Procedure
25160>>>>>>>>>
25160>>>>>>>>>    Procedure OnComCustomizationResetToolBar Variant llToolBar
25162>>>>>>>>>    End_Procedure
25163>>>>>>>>>
25163>>>>>>>>>    Procedure OnComCustomizationAddToolBar Variant llToolBar
25165>>>>>>>>>    End_Procedure
25166>>>>>>>>>
25166>>>>>>>>>    Procedure OnComCustomizationDeleteToolBar Variant llToolBar
25168>>>>>>>>>    End_Procedure
25169>>>>>>>>>
25169>>>>>>>>>    Procedure OnComControlNotify Variant llControl Integer llCode Variant llNotifyData Variant llHandled
25171>>>>>>>>>    End_Procedure
25172>>>>>>>>>
25172>>>>>>>>>    Procedure OnComGetActiveDocumentID Integer ByRef llId
25174>>>>>>>>>    End_Procedure
25175>>>>>>>>>
25175>>>>>>>>>    Procedure OnComCustomizationResetAll
25177>>>>>>>>>    End_Procedure
25178>>>>>>>>>
25178>>>>>>>>>    Procedure OnComMessageBarClosed Variant llMessageBar
25180>>>>>>>>>    End_Procedure
25181>>>>>>>>>
25181>>>>>>>>>    Procedure OnComOLEStartDrag Variant llData Integer ByRef llAllowedEffects
25183>>>>>>>>>    End_Procedure
25184>>>>>>>>>
25184>>>>>>>>>    Procedure OnComOLECompleteDrag Integer ByRef llEffect
25186>>>>>>>>>    End_Procedure
25187>>>>>>>>>
25187>>>>>>>>>    Procedure OnComReCreated
25189>>>>>>>>>    End_Procedure
25190>>>>>>>>>
25190>>>>>>>>>    Procedure RegisterComEvents
25192>>>>>>>>>        Send RegisterComEvent 1 msg_OnComExecute
25193>>>>>>>>>        Send RegisterComEvent 2 msg_OnComUpdate
25194>>>>>>>>>        Send RegisterComEvent 3 msg_OnComResize
25195>>>>>>>>>        Send RegisterComEvent 4 msg_OnComGetClientBordersWidth
25196>>>>>>>>>        Send RegisterComEvent 5 msg_OnComControlSelected
25197>>>>>>>>>        Send RegisterComEvent 6 msg_OnComInitCommandsPopup
25198>>>>>>>>>        Send RegisterComEvent 7 msg_OnComResizeClient
25199>>>>>>>>>        Send RegisterComEvent 8 msg_OnComSpecialColorChanged
25200>>>>>>>>>        Send RegisterComEvent 9 msg_OnComRepositionAlignedControls
25201>>>>>>>>>        Send RegisterComEvent 10 msg_OnComCustomization
25202>>>>>>>>>        Send RegisterComEvent 11 msg_OnComToolBarVisibleChanged
25203>>>>>>>>>        Send RegisterComEvent 12 msg_OnComControlRButtonUp
25204>>>>>>>>>        Send RegisterComEvent 13 msg_OnComCustomizationDone
25205>>>>>>>>>        Send RegisterComEvent -602 msg_OnComCommandBarKeyDown
25206>>>>>>>>>        Send RegisterComEvent 14 msg_OnComToolBarContextMenu
25207>>>>>>>>>        Send RegisterComEvent 15 msg_OnComTrackingModeChanged
25208>>>>>>>>>        Send RegisterComEvent 16 msg_OnComCustomizationResetToolBar
25209>>>>>>>>>        Send RegisterComEvent 17 msg_OnComCustomizationAddToolBar
25210>>>>>>>>>        Send RegisterComEvent 18 msg_OnComCustomizationDeleteToolBar
25211>>>>>>>>>        Send RegisterComEvent 19 msg_OnComControlNotify
25212>>>>>>>>>        Send RegisterComEvent 20 msg_OnComGetActiveDocumentID
25213>>>>>>>>>        Send RegisterComEvent 21 msg_OnComCustomizationResetAll
25214>>>>>>>>>        Send RegisterComEvent 22 msg_OnComMessageBarClosed
25215>>>>>>>>>        Send RegisterComEvent 303 msg_OnComOLEStartDrag
25216>>>>>>>>>        Send RegisterComEvent 304 msg_OnComOLECompleteDrag
25217>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25218>>>>>>>>>    End_Procedure
25219>>>>>>>>>End_Class
25220>>>>>>>>>
25220>>>>>>>>>// CoClass
25220>>>>>>>>>// ProgID: Codejock.CommandBarsFrame.22.0.0
25220>>>>>>>>>// CLSID: {C0DE2200-148B-45F5-9679-3E0DBBC92C13}
25220>>>>>>>>>// Xtreme CommandBars Frame Control
25220>>>>>>>>>Class cCJCommandBarsFrame is a cComActiveXControl
25221>>>>>>>>>    Import_Class_Protocol cCJ_DCommandBarsFrame
25222>>>>>>>>>    Import_Class_Protocol cCJ_DCommandBarsFrameEvents
25223>>>>>>>>>
25223>>>>>>>>>    Procedure Construct_Object
25225>>>>>>>>>        Forward Send Construct_Object
25227>>>>>>>>>        Set psProgID to "{C0DE2200-148B-45F5-9679-3E0DBBC92C13}"
25228>>>>>>>>>        Set psEventId to "{C0DE2200-D2EF-4119-BBBB-8314B5794E11}"
25229>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2022 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v22.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
25230>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25231>>>>>>>>>    End_Procedure
25232>>>>>>>>>End_Class
25233>>>>>>>>>
25233>>>>>>>>>// CLSID: {C0DE2200-41E3-4369-89EF-1C084E3A21A8}
25233>>>>>>>>>// Dispatch interface for ImageManagerPropPage
25233>>>>>>>>>Class cCJ_DImageManagerPropPage is a Mixin
25234>>>>>>>>>End_Class
25235>>>>>>>>>
25235>>>>>>>>>// CoClass
25235>>>>>>>>>// CLSID: {C0DE2200-62EF-44E0-8471-69E91C8B026C}
25235>>>>>>>>>// Image manager property page
25235>>>>>>>>>Class cCJImageManagerPropPage is a cComAutomationObject
25236>>>>>>>>>    Import_Class_Protocol cCJ_DImageManagerPropPage
25237>>>>>>>>>
25237>>>>>>>>>    Procedure Construct_Object
25239>>>>>>>>>        Forward Send Construct_Object
25241>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
25242>>>>>>>>>    End_Procedure
25243>>>>>>>>>End_Class
25244>>>>>>>>>
25244>>>>>>>>>// CLSID: {C0DE2200-3B80-4CED-A441-19E468F8D087}
25244>>>>>>>>>// Dispatch interface for PrintPreview Control
25244>>>>>>>>>Class cCJ_DPrintPreview is a Mixin
25245>>>>>>>>>
25245>>>>>>>>>    Function ComPrintView Returns Variant
25247>>>>>>>>>        Variant retVal
25247>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_UNKNOWN to retVal
25248>>>>>>>>>        Function_Return retVal
25249>>>>>>>>>    End_Function
25250>>>>>>>>>
25250>>>>>>>>>    Procedure Set ComPrintView Variant value
25252>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_UNKNOWN to value
25253>>>>>>>>>    End_Procedure
25254>>>>>>>>>
25254>>>>>>>>>    Function ComTitle Returns String
25256>>>>>>>>>        String retVal
25256>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
25257>>>>>>>>>        Function_Return retVal
25258>>>>>>>>>    End_Function
25259>>>>>>>>>
25259>>>>>>>>>    Procedure Set ComTitle String value
25261>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
25262>>>>>>>>>    End_Procedure
25263>>>>>>>>>
25263>>>>>>>>>    Function ComVisualTheme Returns XTPVisualTheme
25265>>>>>>>>>        XTPVisualTheme retVal
25265>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
25266>>>>>>>>>        Function_Return retVal
25267>>>>>>>>>    End_Function
25268>>>>>>>>>
25268>>>>>>>>>    Procedure Set ComVisualTheme XTPVisualTheme value
25270>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
25271>>>>>>>>>    End_Procedure
25272>>>>>>>>>
25272>>>>>>>>>    Function ComZoomState Returns Integer
25274>>>>>>>>>        Integer retVal
25274>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
25275>>>>>>>>>        Function_Return retVal
25276>>>>>>>>>    End_Function
25277>>>>>>>>>
25277>>>>>>>>>    Procedure Set ComZoomState Integer value
25279>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
25280>>>>>>>>>    End_Procedure
25281>>>>>>>>>
25281>>>>>>>>>    Function ComToolBarVisible Returns Boolean
25283>>>>>>>>>        Boolean retVal
25283>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
25284>>>>>>>>>        Function_Return retVal
25285>>>>>>>>>    End_Function
25286>>>>>>>>>
25286>>>>>>>>>    Procedure Set ComToolBarVisible Boolean value
25288>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
25289>>>>>>>>>    End_Procedure
25290>>>>>>>>>
25290>>>>>>>>>    Function ComOrientation Returns XTPPrintOrientation
25292>>>>>>>>>        XTPPrintOrientation retVal
25292>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
25293>>>>>>>>>        Function_Return retVal
25294>>>>>>>>>    End_Function
25295>>>>>>>>>
25295>>>>>>>>>    Procedure Set ComOrientation XTPPrintOrientation value
25297>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
25298>>>>>>>>>    End_Procedure
25299>>>>>>>>>
25299>>>>>>>>>    Function ComBackColor Returns OLE_COLOR
25301>>>>>>>>>        OLE_COLOR retVal
25301>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to retVal
25302>>>>>>>>>        Function_Return retVal
25303>>>>>>>>>    End_Function
25304>>>>>>>>>
25304>>>>>>>>>    Procedure Set ComBackColor OLE_COLOR value
25306>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to value
25307>>>>>>>>>    End_Procedure
25308>>>>>>>>>
25308>>>>>>>>>    Function ComShowBorder Returns Boolean
25310>>>>>>>>>        Boolean retVal
25310>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
25311>>>>>>>>>        Function_Return retVal
25312>>>>>>>>>    End_Function
25313>>>>>>>>>
25313>>>>>>>>>    Procedure Set ComShowBorder Boolean value
25315>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
25316>>>>>>>>>    End_Procedure
25317>>>>>>>>>
25317>>>>>>>>>    Function ComReCreateReparented Returns Boolean
25319>>>>>>>>>        Boolean retVal
25319>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
25320>>>>>>>>>        Function_Return retVal
25321>>>>>>>>>    End_Function
25322>>>>>>>>>
25322>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
25324>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
25325>>>>>>>>>    End_Procedure
25326>>>>>>>>>
25326>>>>>>>>>    Function ComCreateMarkupPrintView String llMarkupText Returns Variant
25328>>>>>>>>>        Handle hDispatchDriver
25328>>>>>>>>>        Variant retVal
25328>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25329>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25330>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llMarkupText
25331>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_UNKNOWN to retVal
25332>>>>>>>>>        Function_Return retVal
25333>>>>>>>>>    End_Function
25334>>>>>>>>>
25334>>>>>>>>>    Procedure ComShowPrintDialog
25336>>>>>>>>>        Handle hDispatchDriver
25336>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25337>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
25338>>>>>>>>>    End_Procedure
25339>>>>>>>>>
25339>>>>>>>>>    Function ComCreateRichEditPrintView String llText Returns Variant
25341>>>>>>>>>        Handle hDispatchDriver
25341>>>>>>>>>        Variant retVal
25341>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25342>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25343>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
25344>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_UNKNOWN to retVal
25345>>>>>>>>>        Function_Return retVal
25346>>>>>>>>>    End_Function
25347>>>>>>>>>
25347>>>>>>>>>    Function ComToolBar Returns Variant
25349>>>>>>>>>        Handle hDispatchDriver
25349>>>>>>>>>        Variant retVal
25349>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25350>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_DISPATCH to retVal
25351>>>>>>>>>        Function_Return retVal
25352>>>>>>>>>    End_Function
25353>>>>>>>>>
25353>>>>>>>>>    Procedure ComPrintDirect OLE_HANDLE llhDC
25355>>>>>>>>>        Handle hDispatchDriver
25355>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25356>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25357>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhDC
25358>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
25359>>>>>>>>>    End_Procedure
25360>>>>>>>>>
25360>>>>>>>>>    Procedure ComAboutBox
25362>>>>>>>>>        Handle hDispatchDriver
25362>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25363>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
25364>>>>>>>>>    End_Procedure
25365>>>>>>>>>End_Class
25366>>>>>>>>>
25366>>>>>>>>>// CLSID: {C0DE2200-DC0C-498B-9B3E-FEC9F5C31D94}
25366>>>>>>>>>// Event interface for PrintPreview Control
25366>>>>>>>>>Class cCJ_DPrintPreviewEvents is a Mixin
25367>>>>>>>>>
25367>>>>>>>>>    Procedure OnComCloseClick
25369>>>>>>>>>    End_Procedure
25370>>>>>>>>>
25370>>>>>>>>>    Procedure OnComPrintClick
25372>>>>>>>>>    End_Procedure
25373>>>>>>>>>
25373>>>>>>>>>    Procedure OnComReCreated
25375>>>>>>>>>    End_Procedure
25376>>>>>>>>>
25376>>>>>>>>>    Procedure RegisterComEvents
25378>>>>>>>>>        Send RegisterComEvent 1 msg_OnComCloseClick
25379>>>>>>>>>        Send RegisterComEvent 2 msg_OnComPrintClick
25380>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25381>>>>>>>>>    End_Procedure
25382>>>>>>>>>End_Class
25383>>>>>>>>>
25383>>>>>>>>>// CoClass
25383>>>>>>>>>// ProgID: Codejock.PrintPreview.22.0.0
25383>>>>>>>>>// CLSID: {C0DE2200-7F9D-4B69-95D0-249FC10AEF31}
25383>>>>>>>>>// PrintPreview Control
25383>>>>>>>>>Class cCJPrintPreview is a cComActiveXControl
25384>>>>>>>>>    Import_Class_Protocol cCJ_DPrintPreview
25385>>>>>>>>>    Import_Class_Protocol cCJ_DPrintPreviewEvents
25386>>>>>>>>>
25386>>>>>>>>>    Procedure Construct_Object
25388>>>>>>>>>        Forward Send Construct_Object
25390>>>>>>>>>        Set psProgID to "{C0DE2200-7F9D-4B69-95D0-249FC10AEF31}"
25391>>>>>>>>>        Set psEventId to "{C0DE2200-DC0C-498B-9B3E-FEC9F5C31D94}"
25392>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25393>>>>>>>>>    End_Procedure
25394>>>>>>>>>End_Class
25395>>>>>>>>>
25395>>>>>>>>>// CLSID: {C0DE2200-7F27-46D2-91A1-0442FD6DA0DD}
25395>>>>>>>>>// Dispatch interface for PushButton Control
25395>>>>>>>>>Class cCJ_DBackstageButton is a Mixin
25396>>>>>>>>>
25396>>>>>>>>>    Function ComValue Returns Boolean
25398>>>>>>>>>        Boolean retVal
25398>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 0 OLE_VT_BOOL to retVal
25399>>>>>>>>>        Function_Return retVal
25400>>>>>>>>>    End_Function
25401>>>>>>>>>
25401>>>>>>>>>    Procedure Set ComValue Boolean value
25403>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 0 OLE_VT_BOOL to value
25404>>>>>>>>>    End_Procedure
25405>>>>>>>>>
25405>>>>>>>>>    Function ComCaption Returns String
25407>>>>>>>>>        String retVal
25407>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -518 OLE_VT_BSTR to retVal
25408>>>>>>>>>        Function_Return retVal
25409>>>>>>>>>    End_Function
25410>>>>>>>>>
25410>>>>>>>>>    Procedure Set ComCaption String value
25412>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -518 OLE_VT_BSTR to value
25413>>>>>>>>>    End_Procedure
25414>>>>>>>>>
25414>>>>>>>>>    Function ComFont Returns Variant
25416>>>>>>>>>        Variant retVal
25416>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
25417>>>>>>>>>        Function_Return retVal
25418>>>>>>>>>    End_Function
25419>>>>>>>>>
25419>>>>>>>>>    Procedure Set ComFont Variant value
25421>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
25422>>>>>>>>>    End_Procedure
25423>>>>>>>>>
25423>>>>>>>>>    Function ComBackColor Returns OLE_COLOR
25425>>>>>>>>>        OLE_COLOR retVal
25425>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to retVal
25426>>>>>>>>>        Function_Return retVal
25427>>>>>>>>>    End_Function
25428>>>>>>>>>
25428>>>>>>>>>    Procedure Set ComBackColor OLE_COLOR value
25430>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to value
25431>>>>>>>>>    End_Procedure
25432>>>>>>>>>
25432>>>>>>>>>    Function ComForeColor Returns OLE_COLOR
25434>>>>>>>>>        OLE_COLOR retVal
25434>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -513 OLE_VT_I4 to retVal
25435>>>>>>>>>        Function_Return retVal
25436>>>>>>>>>    End_Function
25437>>>>>>>>>
25437>>>>>>>>>    Procedure Set ComForeColor OLE_COLOR value
25439>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -513 OLE_VT_I4 to value
25440>>>>>>>>>    End_Procedure
25441>>>>>>>>>
25441>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
25443>>>>>>>>>        OLE_HANDLE retVal
25443>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -515 OLE_VT_I4 to retVal
25444>>>>>>>>>        Function_Return retVal
25445>>>>>>>>>    End_Function
25446>>>>>>>>>
25446>>>>>>>>>    Procedure Set ComHWnd OLE_HANDLE value
25448>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -515 OLE_VT_I4 to value
25449>>>>>>>>>    End_Procedure
25450>>>>>>>>>
25450>>>>>>>>>    Function ComEnabled Returns Boolean
25452>>>>>>>>>        Boolean retVal
25452>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -514 OLE_VT_BOOL to retVal
25453>>>>>>>>>        Function_Return retVal
25454>>>>>>>>>    End_Function
25455>>>>>>>>>
25455>>>>>>>>>    Procedure Set ComEnabled Boolean value
25457>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -514 OLE_VT_BOOL to value
25458>>>>>>>>>    End_Procedure
25459>>>>>>>>>
25459>>>>>>>>>    Function ComDefault Returns Boolean
25461>>>>>>>>>        Boolean retVal
25461>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1745027088 OLE_VT_BOOL to retVal
25462>>>>>>>>>        Function_Return retVal
25463>>>>>>>>>    End_Function
25464>>>>>>>>>
25464>>>>>>>>>    Procedure Set ComDefault Boolean value
25466>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1745027088 OLE_VT_BOOL to value
25467>>>>>>>>>    End_Procedure
25468>>>>>>>>>
25468>>>>>>>>>    Function ComFlatStyle Returns Boolean
25470>>>>>>>>>        Boolean retVal
25470>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
25471>>>>>>>>>        Function_Return retVal
25472>>>>>>>>>    End_Function
25473>>>>>>>>>
25473>>>>>>>>>    Procedure Set ComFlatStyle Boolean value
25475>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
25476>>>>>>>>>    End_Procedure
25477>>>>>>>>>
25477>>>>>>>>>    Function ComAppearance Returns XTPBackstageButtonControlAppearanceStyle
25479>>>>>>>>>        XTPBackstageButtonControlAppearanceStyle retVal
25479>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
25480>>>>>>>>>        Function_Return retVal
25481>>>>>>>>>    End_Function
25482>>>>>>>>>
25482>>>>>>>>>    Procedure Set ComAppearance XTPBackstageButtonControlAppearanceStyle value
25484>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
25485>>>>>>>>>    End_Procedure
25486>>>>>>>>>
25486>>>>>>>>>    Function ComTextAlignment Returns OLEAlignmentStyle
25488>>>>>>>>>        OLEAlignmentStyle retVal
25488>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to retVal
25489>>>>>>>>>        Function_Return retVal
25490>>>>>>>>>    End_Function
25491>>>>>>>>>
25491>>>>>>>>>    Procedure Set ComTextAlignment OLEAlignmentStyle value
25493>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to value
25494>>>>>>>>>    End_Procedure
25495>>>>>>>>>
25495>>>>>>>>>    Function ComMultiLine Returns Boolean
25497>>>>>>>>>        Boolean retVal
25497>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
25498>>>>>>>>>        Function_Return retVal
25499>>>>>>>>>    End_Function
25500>>>>>>>>>
25500>>>>>>>>>    Procedure Set ComMultiLine Boolean value
25502>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
25503>>>>>>>>>    End_Procedure
25504>>>>>>>>>
25504>>>>>>>>>    Function ComChecked Returns Boolean
25506>>>>>>>>>        Boolean retVal
25506>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
25507>>>>>>>>>        Function_Return retVal
25508>>>>>>>>>    End_Function
25509>>>>>>>>>
25509>>>>>>>>>    Procedure Set ComChecked Boolean value
25511>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
25512>>>>>>>>>    End_Procedure
25513>>>>>>>>>
25513>>>>>>>>>    Function ComIcon Returns Variant
25515>>>>>>>>>        Variant retVal
25515>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_DISPATCH to retVal
25516>>>>>>>>>        Function_Return retVal
25517>>>>>>>>>    End_Function
25518>>>>>>>>>
25518>>>>>>>>>    Procedure Set ComIcon Variant value
25520>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_DISPATCH to value
25521>>>>>>>>>    End_Procedure
25522>>>>>>>>>
25522>>>>>>>>>    Function ComRightToLeft Returns Boolean
25524>>>>>>>>>        Boolean retVal
25524>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -611 OLE_VT_BOOL to retVal
25525>>>>>>>>>        Function_Return retVal
25526>>>>>>>>>    End_Function
25527>>>>>>>>>
25527>>>>>>>>>    Procedure Set ComRightToLeft Boolean value
25529>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -611 OLE_VT_BOOL to value
25530>>>>>>>>>    End_Procedure
25531>>>>>>>>>
25531>>>>>>>>>    Function ComImageAlignment Returns OLEAlignmentStyle
25533>>>>>>>>>        OLEAlignmentStyle retVal
25533>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_I4 to retVal
25534>>>>>>>>>        Function_Return retVal
25535>>>>>>>>>    End_Function
25536>>>>>>>>>
25536>>>>>>>>>    Procedure Set ComImageAlignment OLEAlignmentStyle value
25538>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_I4 to value
25539>>>>>>>>>    End_Procedure
25540>>>>>>>>>
25540>>>>>>>>>    Function ComTextImageRelation Returns OLETextImageRelationStyle
25542>>>>>>>>>        OLETextImageRelationStyle retVal
25542>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
25543>>>>>>>>>        Function_Return retVal
25544>>>>>>>>>    End_Function
25545>>>>>>>>>
25545>>>>>>>>>    Procedure Set ComTextImageRelation OLETextImageRelationStyle value
25547>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
25548>>>>>>>>>    End_Procedure
25549>>>>>>>>>
25549>>>>>>>>>    Function ComImageGap Returns Integer
25551>>>>>>>>>        Integer retVal
25551>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
25552>>>>>>>>>        Function_Return retVal
25553>>>>>>>>>    End_Function
25554>>>>>>>>>
25554>>>>>>>>>    Procedure Set ComImageGap Integer value
25556>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
25557>>>>>>>>>    End_Procedure
25558>>>>>>>>>
25558>>>>>>>>>    Function ComBorderGap Returns Integer
25560>>>>>>>>>        Integer retVal
25560>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
25561>>>>>>>>>        Function_Return retVal
25562>>>>>>>>>    End_Function
25563>>>>>>>>>
25563>>>>>>>>>    Procedure Set ComBorderGap Integer value
25565>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
25566>>>>>>>>>    End_Procedure
25567>>>>>>>>>
25567>>>>>>>>>    Function ComStyle Returns OLEPushButtonStyle
25569>>>>>>>>>        OLEPushButtonStyle retVal
25569>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to retVal
25570>>>>>>>>>        Function_Return retVal
25571>>>>>>>>>    End_Function
25572>>>>>>>>>
25572>>>>>>>>>    Procedure Set ComStyle OLEPushButtonStyle value
25574>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to value
25575>>>>>>>>>    End_Procedure
25576>>>>>>>>>
25576>>>>>>>>>    Function ComEnableMarkup Returns Boolean
25578>>>>>>>>>        Boolean retVal
25578>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
25579>>>>>>>>>        Function_Return retVal
25580>>>>>>>>>    End_Function
25581>>>>>>>>>
25581>>>>>>>>>    Procedure Set ComEnableMarkup Boolean value
25583>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
25584>>>>>>>>>    End_Procedure
25585>>>>>>>>>
25585>>>>>>>>>    // Returns/Sets whether this control can act as an OLE drop target.
25585>>>>>>>>>    Function ComOLEDropMode Returns OLEDropConstants
25587>>>>>>>>>        OLEDropConstants retVal
25587>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
25588>>>>>>>>>        Function_Return retVal
25589>>>>>>>>>    End_Function
25590>>>>>>>>>
25590>>>>>>>>>    // Returns/Sets whether this control can act as an OLE drop target.
25590>>>>>>>>>    Procedure Set ComOLEDropMode OLEDropConstants value
25592>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
25593>>>>>>>>>    End_Procedure
25594>>>>>>>>>
25594>>>>>>>>>    Function ComControlToolTip Returns String
25596>>>>>>>>>        String retVal
25596>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_BSTR to retVal
25597>>>>>>>>>        Function_Return retVal
25598>>>>>>>>>    End_Function
25599>>>>>>>>>
25599>>>>>>>>>    Procedure Set ComControlToolTip String value
25601>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_BSTR to value
25602>>>>>>>>>    End_Procedure
25603>>>>>>>>>
25603>>>>>>>>>    Function ComShowShadow Returns Boolean
25605>>>>>>>>>        Boolean retVal
25605>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 78 OLE_VT_BOOL to retVal
25606>>>>>>>>>        Function_Return retVal
25607>>>>>>>>>    End_Function
25608>>>>>>>>>
25608>>>>>>>>>    Procedure Set ComShowShadow Boolean value
25610>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 78 OLE_VT_BOOL to value
25611>>>>>>>>>    End_Procedure
25612>>>>>>>>>
25612>>>>>>>>>    Function ComTabStyle Returns Boolean
25614>>>>>>>>>        Boolean retVal
25614>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 79 OLE_VT_BOOL to retVal
25615>>>>>>>>>        Function_Return retVal
25616>>>>>>>>>    End_Function
25617>>>>>>>>>
25617>>>>>>>>>    Procedure Set ComTabStyle Boolean value
25619>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 79 OLE_VT_BOOL to value
25620>>>>>>>>>    End_Procedure
25621>>>>>>>>>
25621>>>>>>>>>    Function ComReCreateReparented Returns Boolean
25623>>>>>>>>>        Boolean retVal
25623>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
25624>>>>>>>>>        Function_Return retVal
25625>>>>>>>>>    End_Function
25626>>>>>>>>>
25626>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
25628>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
25629>>>>>>>>>    End_Procedure
25630>>>>>>>>>
25630>>>>>>>>>    Function ComMarkupContext Returns Variant
25632>>>>>>>>>        Handle hDispatchDriver
25632>>>>>>>>>        Variant retVal
25632>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25633>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_DISPATCH to retVal
25634>>>>>>>>>        Function_Return retVal
25635>>>>>>>>>    End_Function
25636>>>>>>>>>
25636>>>>>>>>>    Procedure ComAboutBox
25638>>>>>>>>>        Handle hDispatchDriver
25638>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25639>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
25640>>>>>>>>>    End_Procedure
25641>>>>>>>>>
25641>>>>>>>>>    Function ComToolTipContext Returns Variant
25643>>>>>>>>>        Handle hDispatchDriver
25643>>>>>>>>>        Variant retVal
25643>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25644>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 71 OLE_VT_DISPATCH to retVal
25645>>>>>>>>>        Function_Return retVal
25646>>>>>>>>>    End_Function
25647>>>>>>>>>
25647>>>>>>>>>    Procedure ComVectorImageHeight Integer llHeight
25649>>>>>>>>>        Handle hDispatchDriver
25649>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25650>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25651>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llHeight
25652>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 72 OLE_VT_VOID
25653>>>>>>>>>    End_Procedure
25654>>>>>>>>>
25654>>>>>>>>>    Procedure ComVectorImageWidth Integer llWidth
25656>>>>>>>>>        Handle hDispatchDriver
25656>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25657>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25658>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
25659>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 73 OLE_VT_VOID
25660>>>>>>>>>    End_Procedure
25661>>>>>>>>>End_Class
25662>>>>>>>>>
25662>>>>>>>>>// CLSID: {C0DE2200-8784-4B18-976D-F889C1F8B1E9}
25662>>>>>>>>>// Event interface for PushButton Control
25662>>>>>>>>>Class cCJ_DBackstageButtonEvents is a Mixin
25663>>>>>>>>>
25663>>>>>>>>>    Procedure OnComClick
25665>>>>>>>>>    End_Procedure
25666>>>>>>>>>
25666>>>>>>>>>    Procedure OnComMouseDown Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly
25668>>>>>>>>>    End_Procedure
25669>>>>>>>>>
25669>>>>>>>>>    Procedure OnComMouseMove Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly
25671>>>>>>>>>    End_Procedure
25672>>>>>>>>>
25672>>>>>>>>>    Procedure OnComMouseUp Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly
25674>>>>>>>>>    End_Procedure
25675>>>>>>>>>
25675>>>>>>>>>    Procedure OnComKeyDown Short ByRef llKeyCode Short llShift
25677>>>>>>>>>    End_Procedure
25678>>>>>>>>>
25678>>>>>>>>>    Procedure OnComKeyPress Short ByRef llKeyAscii
25680>>>>>>>>>    End_Procedure
25681>>>>>>>>>
25681>>>>>>>>>    Procedure OnComKeyUp Short ByRef llKeyCode Short llShift
25683>>>>>>>>>    End_Procedure
25684>>>>>>>>>
25684>>>>>>>>>    Procedure OnComDropDown
25686>>>>>>>>>    End_Procedure
25687>>>>>>>>>
25687>>>>>>>>>    Procedure OnComOLEDragOver Variant llData Integer ByRef llEffect Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly Short llstate
25689>>>>>>>>>    End_Procedure
25690>>>>>>>>>
25690>>>>>>>>>    Procedure OnComOLEDragDrop Variant llData Integer ByRef llEffect Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly
25692>>>>>>>>>    End_Procedure
25693>>>>>>>>>
25693>>>>>>>>>    Procedure OnComReCreated
25695>>>>>>>>>    End_Procedure
25696>>>>>>>>>
25696>>>>>>>>>    Procedure RegisterComEvents
25698>>>>>>>>>        Send RegisterComEvent -600 msg_OnComClick
25699>>>>>>>>>        Send RegisterComEvent -605 msg_OnComMouseDown
25700>>>>>>>>>        Send RegisterComEvent -606 msg_OnComMouseMove
25701>>>>>>>>>        Send RegisterComEvent -607 msg_OnComMouseUp
25702>>>>>>>>>        Send RegisterComEvent -602 msg_OnComKeyDown
25703>>>>>>>>>        Send RegisterComEvent -603 msg_OnComKeyPress
25704>>>>>>>>>        Send RegisterComEvent -604 msg_OnComKeyUp
25705>>>>>>>>>        Send RegisterComEvent 1 msg_OnComDropDown
25706>>>>>>>>>        Send RegisterComEvent 300 msg_OnComOLEDragOver
25707>>>>>>>>>        Send RegisterComEvent 301 msg_OnComOLEDragDrop
25708>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25709>>>>>>>>>    End_Procedure
25710>>>>>>>>>End_Class
25711>>>>>>>>>
25711>>>>>>>>>// CoClass
25711>>>>>>>>>// ProgID: Codejock.BackstageButton.22.0.0
25711>>>>>>>>>// CLSID: {C0DE2200-ADD1-404B-9432-25BECBA0755F}
25711>>>>>>>>>// PushButton Control
25711>>>>>>>>>Class cCJBackstageButton is a cComActiveXControl
25712>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageButton
25713>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageButtonEvents
25714>>>>>>>>>
25714>>>>>>>>>    Procedure Construct_Object
25716>>>>>>>>>        Forward Send Construct_Object
25718>>>>>>>>>        Set psProgID to "{C0DE2200-ADD1-404B-9432-25BECBA0755F}"
25719>>>>>>>>>        Set psEventId to "{C0DE2200-8784-4B18-976D-F889C1F8B1E9}"
25720>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2022 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v22.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
25721>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25722>>>>>>>>>    End_Procedure
25723>>>>>>>>>End_Class
25724>>>>>>>>>
25724>>>>>>>>>// CLSID: {C0DE2200-B473-4662-B8AD-C5F3FB64C028}
25724>>>>>>>>>// Dispatch interface for BackstageButtonPropPage
25724>>>>>>>>>Class cCJ_DBackstageButtonPropPage is a Mixin
25725>>>>>>>>>End_Class
25726>>>>>>>>>
25726>>>>>>>>>// CoClass
25726>>>>>>>>>// CLSID: {C0DE2200-3CE1-4C9B-B764-D85C63DBEC21}
25726>>>>>>>>>// Backstage button property page
25726>>>>>>>>>Class cCJBackstageButtonPropPage is a cComAutomationObject
25727>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageButtonPropPage
25728>>>>>>>>>
25728>>>>>>>>>    Procedure Construct_Object
25730>>>>>>>>>        Forward Send Construct_Object
25732>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
25733>>>>>>>>>    End_Procedure
25734>>>>>>>>>End_Class
25735>>>>>>>>>
25735>>>>>>>>>// CLSID: {C0DE2200-E970-416D-838B-AFF30EDC1D51}
25735>>>>>>>>>// Dispatch interface for BackstageSeparator Control
25735>>>>>>>>>Class cCJ_DBackstageSeparator is a Mixin
25736>>>>>>>>>
25736>>>>>>>>>    Function ComVertical Returns Boolean
25738>>>>>>>>>        Boolean retVal
25738>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
25739>>>>>>>>>        Function_Return retVal
25740>>>>>>>>>    End_Function
25741>>>>>>>>>
25741>>>>>>>>>    Procedure Set ComVertical Boolean value
25743>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
25744>>>>>>>>>    End_Procedure
25745>>>>>>>>>
25745>>>>>>>>>    Function ComAppearance Returns XTPBackstageSeparatorControlAppearanceStyle
25747>>>>>>>>>        XTPBackstageSeparatorControlAppearanceStyle retVal
25747>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
25748>>>>>>>>>        Function_Return retVal
25749>>>>>>>>>    End_Function
25750>>>>>>>>>
25750>>>>>>>>>    Procedure Set ComAppearance XTPBackstageSeparatorControlAppearanceStyle value
25752>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
25753>>>>>>>>>    End_Procedure
25754>>>>>>>>>
25754>>>>>>>>>    Function ComMarkupText Returns String
25756>>>>>>>>>        String retVal
25756>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -518 OLE_VT_BSTR to retVal
25757>>>>>>>>>        Function_Return retVal
25758>>>>>>>>>    End_Function
25759>>>>>>>>>
25759>>>>>>>>>    Procedure Set ComMarkupText String value
25761>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -518 OLE_VT_BSTR to value
25762>>>>>>>>>    End_Procedure
25763>>>>>>>>>
25763>>>>>>>>>    Function ComReCreateReparented Returns Boolean
25765>>>>>>>>>        Boolean retVal
25765>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
25766>>>>>>>>>        Function_Return retVal
25767>>>>>>>>>    End_Function
25768>>>>>>>>>
25768>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
25770>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
25771>>>>>>>>>    End_Procedure
25772>>>>>>>>>
25772>>>>>>>>>    Procedure ComAboutBox
25774>>>>>>>>>        Handle hDispatchDriver
25774>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25775>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
25776>>>>>>>>>    End_Procedure
25777>>>>>>>>>End_Class
25778>>>>>>>>>
25778>>>>>>>>>// CLSID: {C0DE2200-A9B6-458C-8DBE-71B544CD06B4}
25778>>>>>>>>>// Event interface for BackstageSeparator Control
25778>>>>>>>>>Class cCJ_DBackstageSeparatorEvents is a Mixin
25779>>>>>>>>>
25779>>>>>>>>>    Procedure OnComReCreated
25781>>>>>>>>>    End_Procedure
25782>>>>>>>>>
25782>>>>>>>>>    Procedure RegisterComEvents
25784>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25785>>>>>>>>>    End_Procedure
25786>>>>>>>>>End_Class
25787>>>>>>>>>
25787>>>>>>>>>// CoClass
25787>>>>>>>>>// ProgID: Codejock.BackstageSeparator.22.0.0
25787>>>>>>>>>// CLSID: {C0DE2200-C3CB-4192-B015-BFF56164ED07}
25787>>>>>>>>>// BackstageSeparator Control
25787>>>>>>>>>Class cCJBackstageSeparator is a cComActiveXControl
25788>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageSeparator
25789>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageSeparatorEvents
25790>>>>>>>>>
25790>>>>>>>>>    Procedure Construct_Object
25792>>>>>>>>>        Forward Send Construct_Object
25794>>>>>>>>>        Set psProgID to "{C0DE2200-C3CB-4192-B015-BFF56164ED07}"
25795>>>>>>>>>        Set psEventId to "{C0DE2200-A9B6-458C-8DBE-71B544CD06B4}"
25796>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2022 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v22.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
25797>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25798>>>>>>>>>    End_Procedure
25799>>>>>>>>>End_Class
25800>>>>>>>>>
25800>>>>>>>>>// CLSID: {C0DE2200-0694-4EE0-870A-558EE7DE4BF3}
25800>>>>>>>>>// Dispatch interface for BackstageListBox Control
25800>>>>>>>>>Class cCJ_DBackstageListBox is a Mixin
25801>>>>>>>>>
25801>>>>>>>>>    // Set True to allow using standard icons from shell. By default False.
25801>>>>>>>>>    Function ComUseShellIcons Returns Boolean
25803>>>>>>>>>        Boolean retVal
25803>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
25804>>>>>>>>>        Function_Return retVal
25805>>>>>>>>>    End_Function
25806>>>>>>>>>
25806>>>>>>>>>    // Set True to allow using standard icons from shell. By default False.
25806>>>>>>>>>    Procedure Set ComUseShellIcons Boolean value
25808>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
25809>>>>>>>>>    End_Procedure
25810>>>>>>>>>
25810>>>>>>>>>    Function ComVisualTheme Returns XTPVisualTheme
25812>>>>>>>>>        XTPVisualTheme retVal
25812>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
25813>>>>>>>>>        Function_Return retVal
25814>>>>>>>>>    End_Function
25815>>>>>>>>>
25815>>>>>>>>>    Procedure Set ComVisualTheme XTPVisualTheme value
25817>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
25818>>>>>>>>>    End_Procedure
25819>>>>>>>>>
25819>>>>>>>>>    Function ComShowScrollBarAlways Returns Boolean
25821>>>>>>>>>        Boolean retVal
25821>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
25822>>>>>>>>>        Function_Return retVal
25823>>>>>>>>>    End_Function
25824>>>>>>>>>
25824>>>>>>>>>    Procedure Set ComShowScrollBarAlways Boolean value
25826>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
25827>>>>>>>>>    End_Procedure
25828>>>>>>>>>
25828>>>>>>>>>    Function ComReCreateReparented Returns Boolean
25830>>>>>>>>>        Boolean retVal
25830>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
25831>>>>>>>>>        Function_Return retVal
25832>>>>>>>>>    End_Function
25833>>>>>>>>>
25833>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
25835>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
25836>>>>>>>>>    End_Procedure
25837>>>>>>>>>
25837>>>>>>>>>    Function ComItems Returns Variant
25839>>>>>>>>>        Handle hDispatchDriver
25839>>>>>>>>>        Variant retVal
25839>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25840>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
25841>>>>>>>>>        Function_Return retVal
25842>>>>>>>>>    End_Function
25843>>>>>>>>>
25843>>>>>>>>>    Function ComGallery Returns Variant
25845>>>>>>>>>        Handle hDispatchDriver
25845>>>>>>>>>        Variant retVal
25845>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25846>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
25847>>>>>>>>>        Function_Return retVal
25848>>>>>>>>>    End_Function
25849>>>>>>>>>
25849>>>>>>>>>    Function ComIcons Returns Variant
25851>>>>>>>>>        Handle hDispatchDriver
25851>>>>>>>>>        Variant retVal
25851>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25852>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_DISPATCH to retVal
25853>>>>>>>>>        Function_Return retVal
25854>>>>>>>>>    End_Function
25855>>>>>>>>>
25855>>>>>>>>>    Function ComToolTipContext Returns Variant
25857>>>>>>>>>        Handle hDispatchDriver
25857>>>>>>>>>        Variant retVal
25857>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25858>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
25859>>>>>>>>>        Function_Return retVal
25860>>>>>>>>>    End_Function
25861>>>>>>>>>
25861>>>>>>>>>    Procedure ComCreateRecentFileListItems Variant llRecentFileList
25863>>>>>>>>>        Handle hDispatchDriver
25863>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25864>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25865>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llRecentFileList
25866>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
25867>>>>>>>>>    End_Procedure
25868>>>>>>>>>
25868>>>>>>>>>    Function ComPaintManager Returns Variant
25870>>>>>>>>>        Handle hDispatchDriver
25870>>>>>>>>>        Variant retVal
25870>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25871>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
25872>>>>>>>>>        Function_Return retVal
25873>>>>>>>>>    End_Function
25874>>>>>>>>>
25874>>>>>>>>>    Function ComHitTest OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly Returns Variant
25876>>>>>>>>>        Handle hDispatchDriver
25876>>>>>>>>>        Variant retVal
25876>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25877>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
25878>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
25879>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
25880>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 17 OLE_VT_DISPATCH to retVal
25881>>>>>>>>>        Function_Return retVal
25882>>>>>>>>>    End_Function
25883>>>>>>>>>
25883>>>>>>>>>    Procedure ComAboutBox
25885>>>>>>>>>        Handle hDispatchDriver
25885>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25886>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
25887>>>>>>>>>    End_Procedure
25888>>>>>>>>>End_Class
25889>>>>>>>>>
25889>>>>>>>>>// CLSID: {C0DE2200-B56F-4C5C-A7C1-BFD597BE6386}
25889>>>>>>>>>// Event interface for BackstageListBox Control
25889>>>>>>>>>Class cCJ_DBackstageListBoxEvents is a Mixin
25890>>>>>>>>>
25890>>>>>>>>>    Procedure OnComItemClick Variant llItem
25892>>>>>>>>>    End_Procedure
25893>>>>>>>>>
25893>>>>>>>>>    Procedure OnComMouseDown Short llButton Short llShift Integer llx Integer lly
25895>>>>>>>>>    End_Procedure
25896>>>>>>>>>
25896>>>>>>>>>    Procedure OnComMouseUp Short llButton Short llShift Integer llx Integer lly
25898>>>>>>>>>    End_Procedure
25899>>>>>>>>>
25899>>>>>>>>>    Procedure OnComReCreated
25901>>>>>>>>>    End_Procedure
25902>>>>>>>>>
25902>>>>>>>>>    Procedure RegisterComEvents
25904>>>>>>>>>        Send RegisterComEvent 1 msg_OnComItemClick
25905>>>>>>>>>        Send RegisterComEvent -605 msg_OnComMouseDown
25906>>>>>>>>>        Send RegisterComEvent -607 msg_OnComMouseUp
25907>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25908>>>>>>>>>    End_Procedure
25909>>>>>>>>>End_Class
25910>>>>>>>>>
25910>>>>>>>>>// CoClass
25910>>>>>>>>>// ProgID: Codejock.BackstageListBox.22.0.0
25910>>>>>>>>>// CLSID: {C0DE2200-52D8-4364-BFDC-C828980023B0}
25910>>>>>>>>>// BackstageListBox Control
25910>>>>>>>>>Class cCJBackstageListBox is a cComActiveXControl
25911>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageListBox
25912>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageListBoxEvents
25913>>>>>>>>>
25913>>>>>>>>>    Procedure Construct_Object
25915>>>>>>>>>        Forward Send Construct_Object
25917>>>>>>>>>        Set psProgID to "{C0DE2200-52D8-4364-BFDC-C828980023B0}"
25918>>>>>>>>>        Set psEventId to "{C0DE2200-B56F-4C5C-A7C1-BFD597BE6386}"
25919>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2022 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v22.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
25920>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25921>>>>>>>>>    End_Procedure
25922>>>>>>>>>End_Class
25923>>>>>>>>>
25923>>>>>>>>>// CLSID: {C0DE2200-FEBF-4C62-BD49-AC6556035154}
25923>>>>>>>>>// Global Global Settings
25923>>>>>>>>>Class cCJICommandBarsGlobalSettings is a Mixin
25924>>>>>>>>>
25924>>>>>>>>>    Function ComResourceFile Returns String
25926>>>>>>>>>        String retVal
25926>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BSTR to retVal
25927>>>>>>>>>        Function_Return retVal
25928>>>>>>>>>    End_Function
25929>>>>>>>>>
25929>>>>>>>>>    Procedure Set ComResourceFile String value
25931>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BSTR to value
25932>>>>>>>>>    End_Procedure
25933>>>>>>>>>
25933>>>>>>>>>    Function ComLicense Returns String
25935>>>>>>>>>        String retVal
25935>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to retVal
25936>>>>>>>>>        Function_Return retVal
25937>>>>>>>>>    End_Function
25938>>>>>>>>>
25938>>>>>>>>>    Procedure Set ComLicense String value
25940>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to value
25941>>>>>>>>>    End_Procedure
25942>>>>>>>>>
25942>>>>>>>>>    Function ComTitle Returns String
25944>>>>>>>>>        String retVal
25944>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to retVal
25945>>>>>>>>>        Function_Return retVal
25946>>>>>>>>>    End_Function
25947>>>>>>>>>
25947>>>>>>>>>    Procedure Set ComTitle String value
25949>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to value
25950>>>>>>>>>    End_Procedure
25951>>>>>>>>>
25951>>>>>>>>>    Function ComReCreateReparentedControls Returns Boolean
25953>>>>>>>>>        Boolean retVal
25953>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 109 OLE_VT_BOOL to retVal
25954>>>>>>>>>        Function_Return retVal
25955>>>>>>>>>    End_Function
25956>>>>>>>>>
25956>>>>>>>>>    Procedure Set ComReCreateReparentedControls Boolean value
25958>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 109 OLE_VT_BOOL to value
25959>>>>>>>>>    End_Procedure
25960>>>>>>>>>
25960>>>>>>>>>    Function ComApp Returns Variant
25962>>>>>>>>>        Variant retVal
25962>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_DISPATCH to retVal
25963>>>>>>>>>        Function_Return retVal
25964>>>>>>>>>    End_Function
25965>>>>>>>>>
25965>>>>>>>>>    Procedure Set ComApp Variant value
25967>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_DISPATCH to value
25968>>>>>>>>>    End_Procedure
25969>>>>>>>>>
25969>>>>>>>>>    Function ComCompanyName Returns String
25971>>>>>>>>>        String retVal
25971>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
25972>>>>>>>>>        Function_Return retVal
25973>>>>>>>>>    End_Function
25974>>>>>>>>>
25974>>>>>>>>>    Procedure Set ComCompanyName String value
25976>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
25977>>>>>>>>>    End_Procedure
25978>>>>>>>>>
25978>>>>>>>>>    Function ComColorManager Returns Variant
25980>>>>>>>>>        Handle hDispatchDriver
25980>>>>>>>>>        Variant retVal
25980>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25981>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_DISPATCH to retVal
25982>>>>>>>>>        Function_Return retVal
25983>>>>>>>>>    End_Function
25984>>>>>>>>>
25984>>>>>>>>>    Function ComFrameShadowManager Returns Variant
25986>>>>>>>>>        Handle hDispatchDriver
25986>>>>>>>>>        Variant retVal
25986>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25987>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10003000 OLE_VT_DISPATCH to retVal
25988>>>>>>>>>        Function_Return retVal
25989>>>>>>>>>    End_Function
25990>>>>>>>>>
25990>>>>>>>>>    Function ComVersion Returns String
25992>>>>>>>>>        Handle hDispatchDriver
25992>>>>>>>>>        String retVal
25992>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25993>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_BSTR to retVal
25994>>>>>>>>>        Function_Return retVal
25995>>>>>>>>>    End_Function
25996>>>>>>>>>
25996>>>>>>>>>    Function ComUnicode Returns Boolean
25998>>>>>>>>>        Handle hDispatchDriver
25998>>>>>>>>>        Boolean retVal
25998>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25999>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_BOOL to retVal
26000>>>>>>>>>        Function_Return retVal
26001>>>>>>>>>    End_Function
26002>>>>>>>>>
26002>>>>>>>>>    Function ComOcxPath Returns String
26004>>>>>>>>>        Handle hDispatchDriver
26004>>>>>>>>>        String retVal
26004>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26005>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_BSTR to retVal
26006>>>>>>>>>        Function_Return retVal
26007>>>>>>>>>    End_Function
26008>>>>>>>>>
26008>>>>>>>>>    Function ComGetAmbientProperty XTPApplicationAmbientProperty llproperty Returns Variant
26010>>>>>>>>>        Handle hDispatchDriver
26010>>>>>>>>>        Variant retVal
26010>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26011>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
26012>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llproperty
26013>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_VARIANT to retVal
26014>>>>>>>>>        Function_Return retVal
26015>>>>>>>>>    End_Function
26016>>>>>>>>>
26016>>>>>>>>>    Procedure ComSetAmbientProperty XTPApplicationAmbientProperty llproperty Variant llValue
26018>>>>>>>>>        Handle hDispatchDriver
26018>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26019>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26020>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llproperty
26021>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llValue
26022>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 112 OLE_VT_VOID
26023>>>>>>>>>    End_Procedure
26024>>>>>>>>>
26024>>>>>>>>>    Function ComCreatePropExchange Returns Variant
26026>>>>>>>>>        Handle hDispatchDriver
26026>>>>>>>>>        Variant retVal
26026>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26027>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 107 OLE_VT_DISPATCH to retVal
26028>>>>>>>>>        Function_Return retVal
26029>>>>>>>>>    End_Function
26030>>>>>>>>>
26030>>>>>>>>>    Function ComIcons Returns Variant
26032>>>>>>>>>        Handle hDispatchDriver
26032>>>>>>>>>        Variant retVal
26032>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26033>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_DISPATCH to retVal
26034>>>>>>>>>        Function_Return retVal
26035>>>>>>>>>    End_Function
26036>>>>>>>>>
26036>>>>>>>>>    Function ComResourceImages Returns Variant
26038>>>>>>>>>        Handle hDispatchDriver
26038>>>>>>>>>        Variant retVal
26038>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26039>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_DISPATCH to retVal
26040>>>>>>>>>        Function_Return retVal
26041>>>>>>>>>    End_Function
26042>>>>>>>>>End_Class
26043>>>>>>>>>
26043>>>>>>>>>// CoClass
26043>>>>>>>>>// ProgID: Codejock.CommandBarsGlobalSettings.22.0.0
26043>>>>>>>>>// CLSID: {C0DE2200-D18F-4F58-8647-38F1AD3314C3}
26043>>>>>>>>>// Command Bars Settings
26043>>>>>>>>>Class cCJCommandBarsGlobalSettings is a cComAutomationObject
26044>>>>>>>>>    Import_Class_Protocol cCJICommandBarsGlobalSettings
26045>>>>>>>>>
26045>>>>>>>>>    Procedure Construct_Object
26047>>>>>>>>>        Forward Send Construct_Object
26049>>>>>>>>>        Set psProgID to "{C0DE2200-D18F-4F58-8647-38F1AD3314C3}"
26050>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
26051>>>>>>>>>    End_Procedure
26052>>>>>>>>>End_Class
26053>>>>>>>>>
26053>>>>>>>>>// CLSID: {C0DE2200-F9CE-44F1-8991-0F6B7C19336B}
26053>>>>>>>>>Class cCJIResourceImageList is a cComAutomationObject
26054>>>>>>>>>
26054>>>>>>>>>    Function ComAddBitmap OLE_HANDLE llHandle Integer llnID Returns Boolean
26056>>>>>>>>>        Handle hDispatchDriver
26056>>>>>>>>>        Boolean retVal
26056>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26057>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26058>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llHandle
26059>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnID
26060>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BOOL to retVal
26061>>>>>>>>>        Function_Return retVal
26062>>>>>>>>>    End_Function
26063>>>>>>>>>
26063>>>>>>>>>    Function ComLoadBitmap String llPath Integer llnID Returns Boolean
26065>>>>>>>>>        Handle hDispatchDriver
26065>>>>>>>>>        Boolean retVal
26065>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26066>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26067>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
26068>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnID
26069>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
26070>>>>>>>>>        Function_Return retVal
26071>>>>>>>>>    End_Function
26072>>>>>>>>>
26072>>>>>>>>>    Function ComRemove Integer llnID Returns Boolean
26074>>>>>>>>>        Handle hDispatchDriver
26074>>>>>>>>>        Boolean retVal
26074>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26075>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
26076>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnID
26077>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BOOL to retVal
26078>>>>>>>>>        Function_Return retVal
26079>>>>>>>>>    End_Function
26080>>>>>>>>>
26080>>>>>>>>>    Procedure ComRemoveAll
26082>>>>>>>>>        Handle hDispatchDriver
26082>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26083>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
26084>>>>>>>>>    End_Procedure
26085>>>>>>>>>End_Class
26086>>>>>>>>>
26086>>>>>>>>>// CLSID: {C0DE2200-ED8F-4CE1-9E36-403876BEE557}
26086>>>>>>>>>Class cCJXtremePrinterInfo is a cComAutomationObject
26087>>>>>>>>>
26087>>>>>>>>>    Function ComDeviceName Returns String
26089>>>>>>>>>        Handle hDispatchDriver
26089>>>>>>>>>        String retVal
26089>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26090>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BSTR to retVal
26091>>>>>>>>>        Function_Return retVal
26092>>>>>>>>>    End_Function
26093>>>>>>>>>
26093>>>>>>>>>    Function ComDriverName Returns String
26095>>>>>>>>>        Handle hDispatchDriver
26095>>>>>>>>>        String retVal
26095>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26096>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BSTR to retVal
26097>>>>>>>>>        Function_Return retVal
26098>>>>>>>>>    End_Function
26099>>>>>>>>>
26099>>>>>>>>>    Function ComPortName Returns String
26101>>>>>>>>>        Handle hDispatchDriver
26101>>>>>>>>>        String retVal
26101>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26102>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BSTR to retVal
26103>>>>>>>>>        Function_Return retVal
26104>>>>>>>>>    End_Function
26105>>>>>>>>>End_Class
26106>>>>>>>>>
26106>>>>>>>>>// CLSID: {C0DE2200-8BC5-4677-9999-0A29B44F3B23}
26106>>>>>>>>>Class cCJXtremePrintPreviewOptions is a cComAutomationObject
26107>>>>>>>>>
26107>>>>>>>>>    Function ComTitle Returns String
26109>>>>>>>>>        String retVal
26109>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
26110>>>>>>>>>        Function_Return retVal
26111>>>>>>>>>    End_Function
26112>>>>>>>>>
26112>>>>>>>>>    Procedure Set ComTitle String value
26114>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
26115>>>>>>>>>    End_Procedure
26116>>>>>>>>>End_Class
26117>>>>>>>>>
26117>>>>>>>>>// CLSID: {C0DE2200-E75C-4A50-A908-F36D35F098D2}
26117>>>>>>>>>Class cCJPrintPageHeaderFooter is a cComAutomationObject
26118>>>>>>>>>
26118>>>>>>>>>    Function ComFont Returns Variant
26120>>>>>>>>>        Variant retVal
26120>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
26121>>>>>>>>>        Function_Return retVal
26122>>>>>>>>>    End_Function
26123>>>>>>>>>
26123>>>>>>>>>    Procedure Set ComFont Variant value
26125>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
26126>>>>>>>>>    End_Procedure
26127>>>>>>>>>
26127>>>>>>>>>    Function ComFormatString Returns String
26129>>>>>>>>>        String retVal
26129>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
26130>>>>>>>>>        Function_Return retVal
26131>>>>>>>>>    End_Function
26132>>>>>>>>>
26132>>>>>>>>>    Procedure Set ComFormatString String value
26134>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
26135>>>>>>>>>    End_Procedure
26136>>>>>>>>>
26136>>>>>>>>>    Function ComTextLeft Returns String
26138>>>>>>>>>        String retVal
26138>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
26139>>>>>>>>>        Function_Return retVal
26140>>>>>>>>>    End_Function
26141>>>>>>>>>
26141>>>>>>>>>    Procedure Set ComTextLeft String value
26143>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
26144>>>>>>>>>    End_Procedure
26145>>>>>>>>>
26145>>>>>>>>>    Function ComTextCenter Returns String
26147>>>>>>>>>        String retVal
26147>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
26148>>>>>>>>>        Function_Return retVal
26149>>>>>>>>>    End_Function
26150>>>>>>>>>
26150>>>>>>>>>    Procedure Set ComTextCenter String value
26152>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
26153>>>>>>>>>    End_Procedure
26154>>>>>>>>>
26154>>>>>>>>>    Function ComTextRight Returns String
26156>>>>>>>>>        String retVal
26156>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
26157>>>>>>>>>        Function_Return retVal
26158>>>>>>>>>    End_Function
26159>>>>>>>>>
26159>>>>>>>>>    Procedure Set ComTextRight String value
26161>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
26162>>>>>>>>>    End_Procedure
26163>>>>>>>>>
26163>>>>>>>>>    Procedure ComClear
26165>>>>>>>>>        Handle hDispatchDriver
26165>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26166>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 50 OLE_VT_VOID
26167>>>>>>>>>    End_Procedure
26168>>>>>>>>>End_Class
26169>>>>>>>>>
26169>>>>>>>>>// CLSID: {C0DE2200-0E2C-47FC-BFB7-46E70C561AA8}
26169>>>>>>>>>Class cCJPrintInfo is a cComAutomationObject
26170>>>>>>>>>
26170>>>>>>>>>    Function ComContinuePrinting Returns Boolean
26172>>>>>>>>>        Boolean retVal
26172>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
26173>>>>>>>>>        Function_Return retVal
26174>>>>>>>>>    End_Function
26175>>>>>>>>>
26175>>>>>>>>>    Procedure Set ComContinuePrinting Boolean value
26177>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
26178>>>>>>>>>    End_Procedure
26179>>>>>>>>>
26179>>>>>>>>>    Function ComMaxPage Returns Integer
26181>>>>>>>>>        Integer retVal
26181>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26182>>>>>>>>>        Function_Return retVal
26183>>>>>>>>>    End_Function
26184>>>>>>>>>
26184>>>>>>>>>    Procedure Set ComMaxPage Integer value
26186>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26187>>>>>>>>>    End_Procedure
26188>>>>>>>>>
26188>>>>>>>>>    Function ComPreviewMode Returns Boolean
26190>>>>>>>>>        Handle hDispatchDriver
26190>>>>>>>>>        Boolean retVal
26190>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26191>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BOOL to retVal
26192>>>>>>>>>        Function_Return retVal
26193>>>>>>>>>    End_Function
26194>>>>>>>>>
26194>>>>>>>>>    Function ComCurrentPage Returns Integer
26196>>>>>>>>>        Handle hDispatchDriver
26196>>>>>>>>>        Integer retVal
26196>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26197>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26198>>>>>>>>>        Function_Return retVal
26199>>>>>>>>>    End_Function
26200>>>>>>>>>
26200>>>>>>>>>    Function ComPrintRectLeft Returns Integer
26202>>>>>>>>>        Handle hDispatchDriver
26202>>>>>>>>>        Integer retVal
26202>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26203>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26204>>>>>>>>>        Function_Return retVal
26205>>>>>>>>>    End_Function
26206>>>>>>>>>
26206>>>>>>>>>    Function ComPrintRectTop Returns Integer
26208>>>>>>>>>        Handle hDispatchDriver
26208>>>>>>>>>        Integer retVal
26208>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26209>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_I4 to retVal
26210>>>>>>>>>        Function_Return retVal
26211>>>>>>>>>    End_Function
26212>>>>>>>>>
26212>>>>>>>>>    Function ComPrintRectRight Returns Integer
26214>>>>>>>>>        Handle hDispatchDriver
26214>>>>>>>>>        Integer retVal
26214>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26215>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
26216>>>>>>>>>        Function_Return retVal
26217>>>>>>>>>    End_Function
26218>>>>>>>>>
26218>>>>>>>>>    Function ComPrintRectBottom Returns Integer
26220>>>>>>>>>        Handle hDispatchDriver
26220>>>>>>>>>        Integer retVal
26220>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26221>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_I4 to retVal
26222>>>>>>>>>        Function_Return retVal
26223>>>>>>>>>    End_Function
26224>>>>>>>>>End_Class
26225>>>>>>>>>
26225>>>>>>>>>// CLSID: {C0DE2200-A5D8-4569-8690-592295C5583A}
26225>>>>>>>>>Class cCJComStatusBarPane is a cComAutomationObject
26226>>>>>>>>>
26226>>>>>>>>>    Function ComWidth Returns Integer
26228>>>>>>>>>        Integer retVal
26228>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26229>>>>>>>>>        Function_Return retVal
26230>>>>>>>>>    End_Function
26231>>>>>>>>>
26231>>>>>>>>>    Procedure Set ComWidth Integer value
26233>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26234>>>>>>>>>    End_Procedure
26235>>>>>>>>>
26235>>>>>>>>>    Function ComStyle Returns XTPStatusPaneStyle
26237>>>>>>>>>        XTPStatusPaneStyle retVal
26237>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
26238>>>>>>>>>        Function_Return retVal
26239>>>>>>>>>    End_Function
26240>>>>>>>>>
26240>>>>>>>>>    Procedure Set ComStyle XTPStatusPaneStyle value
26242>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
26243>>>>>>>>>    End_Procedure
26244>>>>>>>>>
26244>>>>>>>>>    Function ComVisible Returns Boolean
26246>>>>>>>>>        Boolean retVal
26246>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
26247>>>>>>>>>        Function_Return retVal
26248>>>>>>>>>    End_Function
26249>>>>>>>>>
26249>>>>>>>>>    Procedure Set ComVisible Boolean value
26251>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
26252>>>>>>>>>    End_Procedure
26253>>>>>>>>>
26253>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
26255>>>>>>>>>        OLE_HANDLE retVal
26255>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
26256>>>>>>>>>        Function_Return retVal
26257>>>>>>>>>    End_Function
26258>>>>>>>>>
26258>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
26260>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
26261>>>>>>>>>    End_Procedure
26262>>>>>>>>>
26262>>>>>>>>>    Function ComToolTip Returns String
26264>>>>>>>>>        String retVal
26264>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
26265>>>>>>>>>        Function_Return retVal
26266>>>>>>>>>    End_Function
26267>>>>>>>>>
26267>>>>>>>>>    Procedure Set ComToolTip String value
26269>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
26270>>>>>>>>>    End_Procedure
26271>>>>>>>>>
26271>>>>>>>>>    Function ComBeginGroup Returns Boolean
26273>>>>>>>>>        Boolean retVal
26273>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
26274>>>>>>>>>        Function_Return retVal
26275>>>>>>>>>    End_Function
26276>>>>>>>>>
26276>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
26278>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
26279>>>>>>>>>    End_Procedure
26280>>>>>>>>>
26280>>>>>>>>>    Function ComCaption Returns String
26282>>>>>>>>>        String retVal
26282>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to retVal
26283>>>>>>>>>        Function_Return retVal
26284>>>>>>>>>    End_Function
26285>>>>>>>>>
26285>>>>>>>>>    Procedure Set ComCaption String value
26287>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to value
26288>>>>>>>>>    End_Procedure
26289>>>>>>>>>
26289>>>>>>>>>    Function ComEnabled Returns Boolean
26291>>>>>>>>>        Boolean retVal
26291>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
26292>>>>>>>>>        Function_Return retVal
26293>>>>>>>>>    End_Function
26294>>>>>>>>>
26294>>>>>>>>>    Procedure Set ComEnabled Boolean value
26296>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
26297>>>>>>>>>    End_Procedure
26298>>>>>>>>>
26298>>>>>>>>>    Function ComCustomizable Returns Boolean
26300>>>>>>>>>        Boolean retVal
26300>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
26301>>>>>>>>>        Function_Return retVal
26302>>>>>>>>>    End_Function
26303>>>>>>>>>
26303>>>>>>>>>    Procedure Set ComCustomizable Boolean value
26305>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
26306>>>>>>>>>    End_Procedure
26307>>>>>>>>>
26307>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
26309>>>>>>>>>        XTPControlHideFlags retVal
26309>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
26310>>>>>>>>>        Function_Return retVal
26311>>>>>>>>>    End_Function
26312>>>>>>>>>
26312>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
26314>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
26315>>>>>>>>>    End_Procedure
26316>>>>>>>>>
26316>>>>>>>>>    Function ComDark Returns Boolean
26318>>>>>>>>>        Boolean retVal
26318>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
26319>>>>>>>>>        Function_Return retVal
26320>>>>>>>>>    End_Function
26321>>>>>>>>>
26321>>>>>>>>>    Procedure Set ComDark Boolean value
26323>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
26324>>>>>>>>>    End_Procedure
26325>>>>>>>>>
26325>>>>>>>>>    Function ComText Returns String
26327>>>>>>>>>        String retVal
26327>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
26328>>>>>>>>>        Function_Return retVal
26329>>>>>>>>>    End_Function
26330>>>>>>>>>
26330>>>>>>>>>    Procedure Set ComText String value
26332>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
26333>>>>>>>>>    End_Procedure
26334>>>>>>>>>
26334>>>>>>>>>    Function ComTextColor Returns OLE_COLOR
26336>>>>>>>>>        OLE_COLOR retVal
26336>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -513 OLE_VT_I4 to retVal
26337>>>>>>>>>        Function_Return retVal
26338>>>>>>>>>    End_Function
26339>>>>>>>>>
26339>>>>>>>>>    Procedure Set ComTextColor OLE_COLOR value
26341>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -513 OLE_VT_I4 to value
26342>>>>>>>>>    End_Procedure
26343>>>>>>>>>
26343>>>>>>>>>    Function ComTextGrayColor Returns OLE_COLOR
26345>>>>>>>>>        OLE_COLOR retVal
26345>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to retVal
26346>>>>>>>>>        Function_Return retVal
26347>>>>>>>>>    End_Function
26348>>>>>>>>>
26348>>>>>>>>>    Procedure Set ComTextGrayColor OLE_COLOR value
26350>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to value
26351>>>>>>>>>    End_Procedure
26352>>>>>>>>>
26352>>>>>>>>>    Function ComBackgroundColor Returns OLE_COLOR
26354>>>>>>>>>        OLE_COLOR retVal
26354>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to retVal
26355>>>>>>>>>        Function_Return retVal
26356>>>>>>>>>    End_Function
26357>>>>>>>>>
26357>>>>>>>>>    Procedure Set ComBackgroundColor OLE_COLOR value
26359>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to value
26360>>>>>>>>>    End_Procedure
26361>>>>>>>>>
26361>>>>>>>>>    Function ComFont Returns Variant
26363>>>>>>>>>        Variant retVal
26363>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
26364>>>>>>>>>        Function_Return retVal
26365>>>>>>>>>    End_Function
26366>>>>>>>>>
26366>>>>>>>>>    Procedure Set ComFont Variant value
26368>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
26369>>>>>>>>>    End_Procedure
26370>>>>>>>>>
26370>>>>>>>>>    Function ComIconIndex Returns Integer
26372>>>>>>>>>        Integer retVal
26372>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
26373>>>>>>>>>        Function_Return retVal
26374>>>>>>>>>    End_Function
26375>>>>>>>>>
26375>>>>>>>>>    Procedure Set ComIconIndex Integer value
26377>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
26378>>>>>>>>>    End_Procedure
26379>>>>>>>>>
26379>>>>>>>>>    Function ComAlignment Returns XTPTextAlignment
26381>>>>>>>>>        XTPTextAlignment retVal
26381>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
26382>>>>>>>>>        Function_Return retVal
26383>>>>>>>>>    End_Function
26384>>>>>>>>>
26384>>>>>>>>>    Procedure Set ComAlignment XTPTextAlignment value
26386>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
26387>>>>>>>>>    End_Procedure
26388>>>>>>>>>
26388>>>>>>>>>    Function ComButton Returns Boolean
26390>>>>>>>>>        Boolean retVal
26390>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
26391>>>>>>>>>        Function_Return retVal
26392>>>>>>>>>    End_Function
26393>>>>>>>>>
26393>>>>>>>>>    Procedure Set ComButton Boolean value
26395>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
26396>>>>>>>>>    End_Procedure
26397>>>>>>>>>
26397>>>>>>>>>    Function ComValue Returns String
26399>>>>>>>>>        String retVal
26399>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BSTR to retVal
26400>>>>>>>>>        Function_Return retVal
26401>>>>>>>>>    End_Function
26402>>>>>>>>>
26402>>>>>>>>>    Procedure Set ComValue String value
26404>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BSTR to value
26405>>>>>>>>>    End_Procedure
26406>>>>>>>>>
26406>>>>>>>>>    Function ComChecked Returns Boolean
26408>>>>>>>>>        Boolean retVal
26408>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
26409>>>>>>>>>        Function_Return retVal
26410>>>>>>>>>    End_Function
26411>>>>>>>>>
26411>>>>>>>>>    Procedure Set ComChecked Boolean value
26413>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
26414>>>>>>>>>    End_Procedure
26415>>>>>>>>>
26415>>>>>>>>>    Function ComId Returns Integer
26417>>>>>>>>>        Handle hDispatchDriver
26417>>>>>>>>>        Integer retVal
26417>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26418>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26419>>>>>>>>>        Function_Return retVal
26420>>>>>>>>>    End_Function
26421>>>>>>>>>
26421>>>>>>>>>    Function ComIndex Returns Integer
26423>>>>>>>>>        Handle hDispatchDriver
26423>>>>>>>>>        Integer retVal
26423>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26424>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26425>>>>>>>>>        Function_Return retVal
26426>>>>>>>>>    End_Function
26427>>>>>>>>>
26427>>>>>>>>>    Procedure ComRemove
26429>>>>>>>>>        Handle hDispatchDriver
26429>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26430>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
26431>>>>>>>>>    End_Procedure
26432>>>>>>>>>
26432>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
26434>>>>>>>>>        Handle hDispatchDriver
26434>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26435>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26436>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
26437>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
26438>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
26439>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
26440>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
26441>>>>>>>>>    End_Procedure
26442>>>>>>>>>
26442>>>>>>>>>    Procedure ComRedrawPane
26444>>>>>>>>>        Handle hDispatchDriver
26444>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26445>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 333 OLE_VT_VOID
26446>>>>>>>>>    End_Procedure
26447>>>>>>>>>
26447>>>>>>>>>    Procedure ComSetPadding Integer llLeft Integer llTop Integer llRight Integer llBottom
26449>>>>>>>>>        Handle hDispatchDriver
26449>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26450>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26451>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
26452>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
26453>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
26454>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
26455>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
26456>>>>>>>>>    End_Procedure
26457>>>>>>>>>
26457>>>>>>>>>    Procedure ComSetMargins Integer llLeft Integer llTop Integer llRight Integer llBottom
26459>>>>>>>>>        Handle hDispatchDriver
26459>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26460>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26461>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
26462>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
26463>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
26464>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
26465>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
26466>>>>>>>>>    End_Procedure
26467>>>>>>>>>End_Class
26468>>>>>>>>>
26468>>>>>>>>>// CLSID: {C0DE2200-80B8-4E1B-878E-FFF8347C96EE}
26468>>>>>>>>>Class cCJStatusBarSwitchPane is a cComAutomationObject
26469>>>>>>>>>
26469>>>>>>>>>    Function ComWidth Returns Integer
26471>>>>>>>>>        Integer retVal
26471>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26472>>>>>>>>>        Function_Return retVal
26473>>>>>>>>>    End_Function
26474>>>>>>>>>
26474>>>>>>>>>    Procedure Set ComWidth Integer value
26476>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26477>>>>>>>>>    End_Procedure
26478>>>>>>>>>
26478>>>>>>>>>    Function ComStyle Returns XTPStatusPaneStyle
26480>>>>>>>>>        XTPStatusPaneStyle retVal
26480>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
26481>>>>>>>>>        Function_Return retVal
26482>>>>>>>>>    End_Function
26483>>>>>>>>>
26483>>>>>>>>>    Procedure Set ComStyle XTPStatusPaneStyle value
26485>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
26486>>>>>>>>>    End_Procedure
26487>>>>>>>>>
26487>>>>>>>>>    Function ComVisible Returns Boolean
26489>>>>>>>>>        Boolean retVal
26489>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
26490>>>>>>>>>        Function_Return retVal
26491>>>>>>>>>    End_Function
26492>>>>>>>>>
26492>>>>>>>>>    Procedure Set ComVisible Boolean value
26494>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
26495>>>>>>>>>    End_Procedure
26496>>>>>>>>>
26496>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
26498>>>>>>>>>        OLE_HANDLE retVal
26498>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
26499>>>>>>>>>        Function_Return retVal
26500>>>>>>>>>    End_Function
26501>>>>>>>>>
26501>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
26503>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
26504>>>>>>>>>    End_Procedure
26505>>>>>>>>>
26505>>>>>>>>>    Function ComToolTip Returns String
26507>>>>>>>>>        String retVal
26507>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
26508>>>>>>>>>        Function_Return retVal
26509>>>>>>>>>    End_Function
26510>>>>>>>>>
26510>>>>>>>>>    Procedure Set ComToolTip String value
26512>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
26513>>>>>>>>>    End_Procedure
26514>>>>>>>>>
26514>>>>>>>>>    Function ComBeginGroup Returns Boolean
26516>>>>>>>>>        Boolean retVal
26516>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
26517>>>>>>>>>        Function_Return retVal
26518>>>>>>>>>    End_Function
26519>>>>>>>>>
26519>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
26521>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
26522>>>>>>>>>    End_Procedure
26523>>>>>>>>>
26523>>>>>>>>>    Function ComCaption Returns String
26525>>>>>>>>>        String retVal
26525>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to retVal
26526>>>>>>>>>        Function_Return retVal
26527>>>>>>>>>    End_Function
26528>>>>>>>>>
26528>>>>>>>>>    Procedure Set ComCaption String value
26530>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to value
26531>>>>>>>>>    End_Procedure
26532>>>>>>>>>
26532>>>>>>>>>    Function ComEnabled Returns Boolean
26534>>>>>>>>>        Boolean retVal
26534>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
26535>>>>>>>>>        Function_Return retVal
26536>>>>>>>>>    End_Function
26537>>>>>>>>>
26537>>>>>>>>>    Procedure Set ComEnabled Boolean value
26539>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
26540>>>>>>>>>    End_Procedure
26541>>>>>>>>>
26541>>>>>>>>>    Function ComCustomizable Returns Boolean
26543>>>>>>>>>        Boolean retVal
26543>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
26544>>>>>>>>>        Function_Return retVal
26545>>>>>>>>>    End_Function
26546>>>>>>>>>
26546>>>>>>>>>    Procedure Set ComCustomizable Boolean value
26548>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
26549>>>>>>>>>    End_Procedure
26550>>>>>>>>>
26550>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
26552>>>>>>>>>        XTPControlHideFlags retVal
26552>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
26553>>>>>>>>>        Function_Return retVal
26554>>>>>>>>>    End_Function
26555>>>>>>>>>
26555>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
26557>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
26558>>>>>>>>>    End_Procedure
26559>>>>>>>>>
26559>>>>>>>>>    Function ComDark Returns Boolean
26561>>>>>>>>>        Boolean retVal
26561>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
26562>>>>>>>>>        Function_Return retVal
26563>>>>>>>>>    End_Function
26564>>>>>>>>>
26564>>>>>>>>>    Procedure Set ComDark Boolean value
26566>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
26567>>>>>>>>>    End_Procedure
26568>>>>>>>>>
26568>>>>>>>>>    Function ComChecked Returns Integer
26570>>>>>>>>>        Integer retVal
26570>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to retVal
26571>>>>>>>>>        Function_Return retVal
26572>>>>>>>>>    End_Function
26573>>>>>>>>>
26573>>>>>>>>>    Procedure Set ComChecked Integer value
26575>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to value
26576>>>>>>>>>    End_Procedure
26577>>>>>>>>>
26577>>>>>>>>>    Function ComId Returns Integer
26579>>>>>>>>>        Handle hDispatchDriver
26579>>>>>>>>>        Integer retVal
26579>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26580>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26581>>>>>>>>>        Function_Return retVal
26582>>>>>>>>>    End_Function
26583>>>>>>>>>
26583>>>>>>>>>    Function ComIndex Returns Integer
26585>>>>>>>>>        Handle hDispatchDriver
26585>>>>>>>>>        Integer retVal
26585>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26586>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26587>>>>>>>>>        Function_Return retVal
26588>>>>>>>>>    End_Function
26589>>>>>>>>>
26589>>>>>>>>>    Procedure ComRemove
26591>>>>>>>>>        Handle hDispatchDriver
26591>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26592>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
26593>>>>>>>>>    End_Procedure
26594>>>>>>>>>
26594>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
26596>>>>>>>>>        Handle hDispatchDriver
26596>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26597>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26598>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
26599>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
26600>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
26601>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
26602>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
26603>>>>>>>>>    End_Procedure
26604>>>>>>>>>
26604>>>>>>>>>    Procedure ComRedrawPane
26606>>>>>>>>>        Handle hDispatchDriver
26606>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26607>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 333 OLE_VT_VOID
26608>>>>>>>>>    End_Procedure
26609>>>>>>>>>
26609>>>>>>>>>    Procedure ComAddSwitch Integer llId String llToolTip
26611>>>>>>>>>        Handle hDispatchDriver
26611>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26612>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26613>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26614>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llToolTip
26615>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 120 OLE_VT_VOID
26616>>>>>>>>>    End_Procedure
26617>>>>>>>>>
26617>>>>>>>>>    Procedure ComRemoveSwitch Integer llId
26619>>>>>>>>>        Handle hDispatchDriver
26619>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26620>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
26621>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26622>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 121 OLE_VT_VOID
26623>>>>>>>>>    End_Procedure
26624>>>>>>>>>
26624>>>>>>>>>    Procedure ComEnableSwitch Integer llId Boolean llEnable
26626>>>>>>>>>        Handle hDispatchDriver
26626>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26627>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26628>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26629>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
26630>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 123 OLE_VT_VOID
26631>>>>>>>>>    End_Procedure
26632>>>>>>>>>
26632>>>>>>>>>    Function ComSwitchTooltip Integer llId Returns String
26634>>>>>>>>>        Handle hDispatchDriver
26634>>>>>>>>>        String retVal
26634>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26635>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
26636>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26637>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 124 OLE_VT_BSTR to retVal
26638>>>>>>>>>        Function_Return retVal
26639>>>>>>>>>    End_Function
26640>>>>>>>>>
26640>>>>>>>>>    Procedure Set ComSwitchTooltip Integer llId String value
26642>>>>>>>>>        Handle hDispatchDriver
26642>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26643>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26644>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26645>>>>>>>>>        Set ComProperty of hDispatchDriver 124 OLE_VT_BSTR to value
26646>>>>>>>>>    End_Procedure
26647>>>>>>>>>End_Class
26648>>>>>>>>>
26648>>>>>>>>>// CLSID: {C0DE2200-C7DE-43D1-A36D-48CDD92DA1F7}
26648>>>>>>>>>Class cCJStatusBarSliderPane is a cComAutomationObject
26649>>>>>>>>>
26649>>>>>>>>>    Function ComWidth Returns Integer
26651>>>>>>>>>        Integer retVal
26651>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26652>>>>>>>>>        Function_Return retVal
26653>>>>>>>>>    End_Function
26654>>>>>>>>>
26654>>>>>>>>>    Procedure Set ComWidth Integer value
26656>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26657>>>>>>>>>    End_Procedure
26658>>>>>>>>>
26658>>>>>>>>>    Function ComStyle Returns XTPStatusPaneStyle
26660>>>>>>>>>        XTPStatusPaneStyle retVal
26660>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
26661>>>>>>>>>        Function_Return retVal
26662>>>>>>>>>    End_Function
26663>>>>>>>>>
26663>>>>>>>>>    Procedure Set ComStyle XTPStatusPaneStyle value
26665>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
26666>>>>>>>>>    End_Procedure
26667>>>>>>>>>
26667>>>>>>>>>    Function ComVisible Returns Boolean
26669>>>>>>>>>        Boolean retVal
26669>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
26670>>>>>>>>>        Function_Return retVal
26671>>>>>>>>>    End_Function
26672>>>>>>>>>
26672>>>>>>>>>    Procedure Set ComVisible Boolean value
26674>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
26675>>>>>>>>>    End_Procedure
26676>>>>>>>>>
26676>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
26678>>>>>>>>>        OLE_HANDLE retVal
26678>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
26679>>>>>>>>>        Function_Return retVal
26680>>>>>>>>>    End_Function
26681>>>>>>>>>
26681>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
26683>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
26684>>>>>>>>>    End_Procedure
26685>>>>>>>>>
26685>>>>>>>>>    Function ComToolTip Returns String
26687>>>>>>>>>        String retVal
26687>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
26688>>>>>>>>>        Function_Return retVal
26689>>>>>>>>>    End_Function
26690>>>>>>>>>
26690>>>>>>>>>    Procedure Set ComToolTip String value
26692>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
26693>>>>>>>>>    End_Procedure
26694>>>>>>>>>
26694>>>>>>>>>    Function ComBeginGroup Returns Boolean
26696>>>>>>>>>        Boolean retVal
26696>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
26697>>>>>>>>>        Function_Return retVal
26698>>>>>>>>>    End_Function
26699>>>>>>>>>
26699>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
26701>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
26702>>>>>>>>>    End_Procedure
26703>>>>>>>>>
26703>>>>>>>>>    Function ComCaption Returns String
26705>>>>>>>>>        String retVal
26705>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to retVal
26706>>>>>>>>>        Function_Return retVal
26707>>>>>>>>>    End_Function
26708>>>>>>>>>
26708>>>>>>>>>    Procedure Set ComCaption String value
26710>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to value
26711>>>>>>>>>    End_Procedure
26712>>>>>>>>>
26712>>>>>>>>>    Function ComEnabled Returns Boolean
26714>>>>>>>>>        Boolean retVal
26714>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
26715>>>>>>>>>        Function_Return retVal
26716>>>>>>>>>    End_Function
26717>>>>>>>>>
26717>>>>>>>>>    Procedure Set ComEnabled Boolean value
26719>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
26720>>>>>>>>>    End_Procedure
26721>>>>>>>>>
26721>>>>>>>>>    Function ComCustomizable Returns Boolean
26723>>>>>>>>>        Boolean retVal
26723>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
26724>>>>>>>>>        Function_Return retVal
26725>>>>>>>>>    End_Function
26726>>>>>>>>>
26726>>>>>>>>>    Procedure Set ComCustomizable Boolean value
26728>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
26729>>>>>>>>>    End_Procedure
26730>>>>>>>>>
26730>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
26732>>>>>>>>>        XTPControlHideFlags retVal
26732>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
26733>>>>>>>>>        Function_Return retVal
26734>>>>>>>>>    End_Function
26735>>>>>>>>>
26735>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
26737>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
26738>>>>>>>>>    End_Procedure
26739>>>>>>>>>
26739>>>>>>>>>    Function ComDark Returns Boolean
26741>>>>>>>>>        Boolean retVal
26741>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
26742>>>>>>>>>        Function_Return retVal
26743>>>>>>>>>    End_Function
26744>>>>>>>>>
26744>>>>>>>>>    Procedure Set ComDark Boolean value
26746>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
26747>>>>>>>>>    End_Procedure
26748>>>>>>>>>
26748>>>>>>>>>    Function ComMin Returns Integer
26750>>>>>>>>>        Integer retVal
26750>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 120 OLE_VT_I4 to retVal
26751>>>>>>>>>        Function_Return retVal
26752>>>>>>>>>    End_Function
26753>>>>>>>>>
26753>>>>>>>>>    Procedure Set ComMin Integer value
26755>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 120 OLE_VT_I4 to value
26756>>>>>>>>>    End_Procedure
26757>>>>>>>>>
26757>>>>>>>>>    Function ComMax Returns Integer
26759>>>>>>>>>        Integer retVal
26759>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 121 OLE_VT_I4 to retVal
26760>>>>>>>>>        Function_Return retVal
26761>>>>>>>>>    End_Function
26762>>>>>>>>>
26762>>>>>>>>>    Procedure Set ComMax Integer value
26764>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 121 OLE_VT_I4 to value
26765>>>>>>>>>    End_Procedure
26766>>>>>>>>>
26766>>>>>>>>>    Function ComValue Returns Integer
26768>>>>>>>>>        Integer retVal
26768>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to retVal
26769>>>>>>>>>        Function_Return retVal
26770>>>>>>>>>    End_Function
26771>>>>>>>>>
26771>>>>>>>>>    Procedure Set ComValue Integer value
26773>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to value
26774>>>>>>>>>    End_Procedure
26775>>>>>>>>>
26775>>>>>>>>>    Function ComId Returns Integer
26777>>>>>>>>>        Handle hDispatchDriver
26777>>>>>>>>>        Integer retVal
26777>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26778>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26779>>>>>>>>>        Function_Return retVal
26780>>>>>>>>>    End_Function
26781>>>>>>>>>
26781>>>>>>>>>    Function ComIndex Returns Integer
26783>>>>>>>>>        Handle hDispatchDriver
26783>>>>>>>>>        Integer retVal
26783>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26784>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26785>>>>>>>>>        Function_Return retVal
26786>>>>>>>>>    End_Function
26787>>>>>>>>>
26787>>>>>>>>>    Procedure ComRemove
26789>>>>>>>>>        Handle hDispatchDriver
26789>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26790>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
26791>>>>>>>>>    End_Procedure
26792>>>>>>>>>
26792>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
26794>>>>>>>>>        Handle hDispatchDriver
26794>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26795>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26796>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
26797>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
26798>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
26799>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
26800>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
26801>>>>>>>>>    End_Procedure
26802>>>>>>>>>
26802>>>>>>>>>    Procedure ComRedrawPane
26804>>>>>>>>>        Handle hDispatchDriver
26804>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26805>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 333 OLE_VT_VOID
26806>>>>>>>>>    End_Procedure
26807>>>>>>>>>
26807>>>>>>>>>    Procedure ComSetTooltipPart XTPSliderCommand llCommand String llToolTip
26809>>>>>>>>>        Handle hDispatchDriver
26809>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26810>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26811>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
26812>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llToolTip
26813>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 123 OLE_VT_VOID
26814>>>>>>>>>    End_Procedure
26815>>>>>>>>>
26815>>>>>>>>>    Procedure ComSetTicks Variant llTicks
26817>>>>>>>>>        Handle hDispatchDriver
26817>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26818>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
26819>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llTicks
26820>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 124 OLE_VT_VOID
26821>>>>>>>>>    End_Procedure
26822>>>>>>>>>End_Class
26823>>>>>>>>>
26823>>>>>>>>>// CLSID: {C0DE2200-A19C-4749-A1F2-991D33618081}
26823>>>>>>>>>Class cCJStatusBarProgressPane is a cComAutomationObject
26824>>>>>>>>>
26824>>>>>>>>>    Function ComWidth Returns Integer
26826>>>>>>>>>        Integer retVal
26826>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26827>>>>>>>>>        Function_Return retVal
26828>>>>>>>>>    End_Function
26829>>>>>>>>>
26829>>>>>>>>>    Procedure Set ComWidth Integer value
26831>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26832>>>>>>>>>    End_Procedure
26833>>>>>>>>>
26833>>>>>>>>>    Function ComStyle Returns XTPStatusPaneStyle
26835>>>>>>>>>        XTPStatusPaneStyle retVal
26835>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
26836>>>>>>>>>        Function_Return retVal
26837>>>>>>>>>    End_Function
26838>>>>>>>>>
26838>>>>>>>>>    Procedure Set ComStyle XTPStatusPaneStyle value
26840>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
26841>>>>>>>>>    End_Procedure
26842>>>>>>>>>
26842>>>>>>>>>    Function ComVisible Returns Boolean
26844>>>>>>>>>        Boolean retVal
26844>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
26845>>>>>>>>>        Function_Return retVal
26846>>>>>>>>>    End_Function
26847>>>>>>>>>
26847>>>>>>>>>    Procedure Set ComVisible Boolean value
26849>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
26850>>>>>>>>>    End_Procedure
26851>>>>>>>>>
26851>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
26853>>>>>>>>>        OLE_HANDLE retVal
26853>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
26854>>>>>>>>>        Function_Return retVal
26855>>>>>>>>>    End_Function
26856>>>>>>>>>
26856>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
26858>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
26859>>>>>>>>>    End_Procedure
26860>>>>>>>>>
26860>>>>>>>>>    Function ComToolTip Returns String
26862>>>>>>>>>        String retVal
26862>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
26863>>>>>>>>>        Function_Return retVal
26864>>>>>>>>>    End_Function
26865>>>>>>>>>
26865>>>>>>>>>    Procedure Set ComToolTip String value
26867>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
26868>>>>>>>>>    End_Procedure
26869>>>>>>>>>
26869>>>>>>>>>    Function ComBeginGroup Returns Boolean
26871>>>>>>>>>        Boolean retVal
26871>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
26872>>>>>>>>>        Function_Return retVal
26873>>>>>>>>>    End_Function
26874>>>>>>>>>
26874>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
26876>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
26877>>>>>>>>>    End_Procedure
26878>>>>>>>>>
26878>>>>>>>>>    Function ComCaption Returns String
26880>>>>>>>>>        String retVal
26880>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to retVal
26881>>>>>>>>>        Function_Return retVal
26882>>>>>>>>>    End_Function
26883>>>>>>>>>
26883>>>>>>>>>    Procedure Set ComCaption String value
26885>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to value
26886>>>>>>>>>    End_Procedure
26887>>>>>>>>>
26887>>>>>>>>>    Function ComEnabled Returns Boolean
26889>>>>>>>>>        Boolean retVal
26889>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
26890>>>>>>>>>        Function_Return retVal
26891>>>>>>>>>    End_Function
26892>>>>>>>>>
26892>>>>>>>>>    Procedure Set ComEnabled Boolean value
26894>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
26895>>>>>>>>>    End_Procedure
26896>>>>>>>>>
26896>>>>>>>>>    Function ComCustomizable Returns Boolean
26898>>>>>>>>>        Boolean retVal
26898>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
26899>>>>>>>>>        Function_Return retVal
26900>>>>>>>>>    End_Function
26901>>>>>>>>>
26901>>>>>>>>>    Procedure Set ComCustomizable Boolean value
26903>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
26904>>>>>>>>>    End_Procedure
26905>>>>>>>>>
26905>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
26907>>>>>>>>>        XTPControlHideFlags retVal
26907>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
26908>>>>>>>>>        Function_Return retVal
26909>>>>>>>>>    End_Function
26910>>>>>>>>>
26910>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
26912>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
26913>>>>>>>>>    End_Procedure
26914>>>>>>>>>
26914>>>>>>>>>    Function ComDark Returns Boolean
26916>>>>>>>>>        Boolean retVal
26916>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
26917>>>>>>>>>        Function_Return retVal
26918>>>>>>>>>    End_Function
26919>>>>>>>>>
26919>>>>>>>>>    Procedure Set ComDark Boolean value
26921>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
26922>>>>>>>>>    End_Procedure
26923>>>>>>>>>
26923>>>>>>>>>    Function ComMin Returns Integer
26925>>>>>>>>>        Integer retVal
26925>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 120 OLE_VT_I4 to retVal
26926>>>>>>>>>        Function_Return retVal
26927>>>>>>>>>    End_Function
26928>>>>>>>>>
26928>>>>>>>>>    Procedure Set ComMin Integer value
26930>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 120 OLE_VT_I4 to value
26931>>>>>>>>>    End_Procedure
26932>>>>>>>>>
26932>>>>>>>>>    Function ComMax Returns Integer
26934>>>>>>>>>        Integer retVal
26934>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 121 OLE_VT_I4 to retVal
26935>>>>>>>>>        Function_Return retVal
26936>>>>>>>>>    End_Function
26937>>>>>>>>>
26937>>>>>>>>>    Procedure Set ComMax Integer value
26939>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 121 OLE_VT_I4 to value
26940>>>>>>>>>    End_Procedure
26941>>>>>>>>>
26941>>>>>>>>>    Function ComValue Returns Integer
26943>>>>>>>>>        Integer retVal
26943>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to retVal
26944>>>>>>>>>        Function_Return retVal
26945>>>>>>>>>    End_Function
26946>>>>>>>>>
26946>>>>>>>>>    Procedure Set ComValue Integer value
26948>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to value
26949>>>>>>>>>    End_Procedure
26950>>>>>>>>>
26950>>>>>>>>>    Function ComId Returns Integer
26952>>>>>>>>>        Handle hDispatchDriver
26952>>>>>>>>>        Integer retVal
26952>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26953>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26954>>>>>>>>>        Function_Return retVal
26955>>>>>>>>>    End_Function
26956>>>>>>>>>
26956>>>>>>>>>    Function ComIndex Returns Integer
26958>>>>>>>>>        Handle hDispatchDriver
26958>>>>>>>>>        Integer retVal
26958>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26959>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26960>>>>>>>>>        Function_Return retVal
26961>>>>>>>>>    End_Function
26962>>>>>>>>>
26962>>>>>>>>>    Procedure ComRemove
26964>>>>>>>>>        Handle hDispatchDriver
26964>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26965>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
26966>>>>>>>>>    End_Procedure
26967>>>>>>>>>
26967>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
26969>>>>>>>>>        Handle hDispatchDriver
26969>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26970>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26971>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
26972>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
26973>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
26974>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
26975>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
26976>>>>>>>>>    End_Procedure
26977>>>>>>>>>
26977>>>>>>>>>    Procedure ComRedrawPane
26979>>>>>>>>>        Handle hDispatchDriver
26979>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26980>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 333 OLE_VT_VOID
26981>>>>>>>>>    End_Procedure
26982>>>>>>>>>
26982>>>>>>>>>    Procedure ComRedrawProgress
26984>>>>>>>>>        Handle hDispatchDriver
26984>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26985>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 334 OLE_VT_VOID
26986>>>>>>>>>    End_Procedure
26987>>>>>>>>>End_Class
26988>>>>>>>>>
26988>>>>>>>>>// CLSID: {C0DE2200-481B-4769-ABB2-56F0D7F7BB9E}
26988>>>>>>>>>// Dispatch interface for MessageBar Control
26988>>>>>>>>>Class cCJMessageBar is a cComAutomationObject
26989>>>>>>>>>
26989>>>>>>>>>    Function ComVisible Returns Boolean
26991>>>>>>>>>        Boolean retVal
26991>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
26992>>>>>>>>>        Function_Return retVal
26993>>>>>>>>>    End_Function
26994>>>>>>>>>
26994>>>>>>>>>    Procedure Set ComVisible Boolean value
26996>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
26997>>>>>>>>>    End_Procedure
26998>>>>>>>>>
26998>>>>>>>>>    Function ComMessage Returns String
27000>>>>>>>>>        String retVal
27000>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
27001>>>>>>>>>        Function_Return retVal
27002>>>>>>>>>    End_Function
27003>>>>>>>>>
27003>>>>>>>>>    Procedure Set ComMessage String value
27005>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
27006>>>>>>>>>    End_Procedure
27007>>>>>>>>>
27007>>>>>>>>>    Function ComHeight Returns Integer
27009>>>>>>>>>        Integer retVal
27009>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
27010>>>>>>>>>        Function_Return retVal
27011>>>>>>>>>    End_Function
27012>>>>>>>>>
27012>>>>>>>>>    Procedure Set ComHeight Integer value
27014>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
27015>>>>>>>>>    End_Procedure
27016>>>>>>>>>
27016>>>>>>>>>    Procedure ComAddButton Integer llId String llCaption String llToolTip
27018>>>>>>>>>        Handle hDispatchDriver
27018>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27019>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
27020>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
27021>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
27022>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llToolTip
27023>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
27024>>>>>>>>>    End_Procedure
27025>>>>>>>>>
27025>>>>>>>>>    Procedure ComRemoveButtons
27027>>>>>>>>>        Handle hDispatchDriver
27027>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27028>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
27029>>>>>>>>>    End_Procedure
27030>>>>>>>>>
27030>>>>>>>>>    Procedure ComAddCloseButton String llToolTip
27032>>>>>>>>>        Handle hDispatchDriver
27032>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27033>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27034>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llToolTip
27035>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
27036>>>>>>>>>    End_Procedure
27037>>>>>>>>>End_Class
27038>>>>>>>>>
27038>>>>>>>>>// CLSID: {C0DE2200-789A-40D9-B564-7577DA549319}
27038>>>>>>>>>Class cCJRibbonBarSystemButton is a cComAutomationObject
27039>>>>>>>>>
27039>>>>>>>>>    Function ComChecked Returns Boolean
27041>>>>>>>>>        Boolean retVal
27041>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
27042>>>>>>>>>        Function_Return retVal
27043>>>>>>>>>    End_Function
27044>>>>>>>>>
27044>>>>>>>>>    Procedure Set ComChecked Boolean value
27046>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
27047>>>>>>>>>    End_Procedure
27048>>>>>>>>>
27048>>>>>>>>>    Function ComBeginGroup Returns Boolean
27050>>>>>>>>>        Boolean retVal
27050>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
27051>>>>>>>>>        Function_Return retVal
27052>>>>>>>>>    End_Function
27053>>>>>>>>>
27053>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
27055>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
27056>>>>>>>>>    End_Procedure
27057>>>>>>>>>
27057>>>>>>>>>    Function ComCaption Returns String
27059>>>>>>>>>        String retVal
27059>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
27060>>>>>>>>>        Function_Return retVal
27061>>>>>>>>>    End_Function
27062>>>>>>>>>
27062>>>>>>>>>    Procedure Set ComCaption String value
27064>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
27065>>>>>>>>>    End_Procedure
27066>>>>>>>>>
27066>>>>>>>>>    Function ComDescriptionText Returns String
27068>>>>>>>>>        String retVal
27068>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
27069>>>>>>>>>        Function_Return retVal
27070>>>>>>>>>    End_Function
27071>>>>>>>>>
27071>>>>>>>>>    Procedure Set ComDescriptionText String value
27073>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
27074>>>>>>>>>    End_Procedure
27075>>>>>>>>>
27075>>>>>>>>>    Function ComId Returns Integer
27077>>>>>>>>>        Integer retVal
27077>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
27078>>>>>>>>>        Function_Return retVal
27079>>>>>>>>>    End_Function
27080>>>>>>>>>
27080>>>>>>>>>    Procedure Set ComId Integer value
27082>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
27083>>>>>>>>>    End_Procedure
27084>>>>>>>>>
27084>>>>>>>>>    Function ComParameter Returns String
27086>>>>>>>>>        String retVal
27086>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
27087>>>>>>>>>        Function_Return retVal
27088>>>>>>>>>    End_Function
27089>>>>>>>>>
27089>>>>>>>>>    Procedure Set ComParameter String value
27091>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
27092>>>>>>>>>    End_Procedure
27093>>>>>>>>>
27093>>>>>>>>>    Function ComShortcutText Returns String
27095>>>>>>>>>        String retVal
27095>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
27096>>>>>>>>>        Function_Return retVal
27097>>>>>>>>>    End_Function
27098>>>>>>>>>
27098>>>>>>>>>    Procedure Set ComShortcutText String value
27100>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
27101>>>>>>>>>    End_Procedure
27102>>>>>>>>>
27102>>>>>>>>>    Function ComCustomShortcutText Returns String
27104>>>>>>>>>        String retVal
27104>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
27105>>>>>>>>>        Function_Return retVal
27106>>>>>>>>>    End_Function
27107>>>>>>>>>
27107>>>>>>>>>    Procedure Set ComCustomShortcutText String value
27109>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
27110>>>>>>>>>    End_Procedure
27111>>>>>>>>>
27111>>>>>>>>>    Function ComTooltipText Returns String
27113>>>>>>>>>        String retVal
27113>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
27114>>>>>>>>>        Function_Return retVal
27115>>>>>>>>>    End_Function
27116>>>>>>>>>
27116>>>>>>>>>    Procedure Set ComTooltipText String value
27118>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
27119>>>>>>>>>    End_Procedure
27120>>>>>>>>>
27120>>>>>>>>>    Function ComVisible Returns Boolean
27122>>>>>>>>>        Boolean retVal
27122>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
27123>>>>>>>>>        Function_Return retVal
27124>>>>>>>>>    End_Function
27125>>>>>>>>>
27125>>>>>>>>>    Procedure Set ComVisible Boolean value
27127>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
27128>>>>>>>>>    End_Procedure
27129>>>>>>>>>
27129>>>>>>>>>    Function ComEnabled Returns Boolean
27131>>>>>>>>>        Boolean retVal
27131>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
27132>>>>>>>>>        Function_Return retVal
27133>>>>>>>>>    End_Function
27134>>>>>>>>>
27134>>>>>>>>>    Procedure Set ComEnabled Boolean value
27136>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
27137>>>>>>>>>    End_Procedure
27138>>>>>>>>>
27138>>>>>>>>>    Function ComIconId Returns Integer
27140>>>>>>>>>        Integer retVal
27140>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
27141>>>>>>>>>        Function_Return retVal
27142>>>>>>>>>    End_Function
27143>>>>>>>>>
27143>>>>>>>>>    Procedure Set ComIconId Integer value
27145>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
27146>>>>>>>>>    End_Procedure
27147>>>>>>>>>
27147>>>>>>>>>    Function ComDefaultItem Returns Boolean
27149>>>>>>>>>        Boolean retVal
27149>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
27150>>>>>>>>>        Function_Return retVal
27151>>>>>>>>>    End_Function
27152>>>>>>>>>
27152>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
27154>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
27155>>>>>>>>>    End_Procedure
27156>>>>>>>>>
27156>>>>>>>>>    Function ComFlags Returns XTPControlFlags
27158>>>>>>>>>        XTPControlFlags retVal
27158>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
27159>>>>>>>>>        Function_Return retVal
27160>>>>>>>>>    End_Function
27161>>>>>>>>>
27161>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
27163>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
27164>>>>>>>>>    End_Procedure
27165>>>>>>>>>
27165>>>>>>>>>    Function ComCategory Returns String
27167>>>>>>>>>        String retVal
27167>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
27168>>>>>>>>>        Function_Return retVal
27169>>>>>>>>>    End_Function
27170>>>>>>>>>
27170>>>>>>>>>    Procedure Set ComCategory String value
27172>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
27173>>>>>>>>>    End_Procedure
27174>>>>>>>>>
27174>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
27176>>>>>>>>>        XTPControlHideFlags retVal
27176>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
27177>>>>>>>>>        Function_Return retVal
27178>>>>>>>>>    End_Function
27179>>>>>>>>>
27179>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
27181>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
27182>>>>>>>>>    End_Procedure
27183>>>>>>>>>
27183>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
27185>>>>>>>>>        Boolean retVal
27185>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
27186>>>>>>>>>        Function_Return retVal
27187>>>>>>>>>    End_Function
27188>>>>>>>>>
27188>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
27190>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
27191>>>>>>>>>    End_Procedure
27192>>>>>>>>>
27192>>>>>>>>>    Function ComAction Returns Variant
27194>>>>>>>>>        Variant retVal
27194>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
27195>>>>>>>>>        Function_Return retVal
27196>>>>>>>>>    End_Function
27197>>>>>>>>>
27197>>>>>>>>>    Procedure Set ComAction Variant value
27199>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
27200>>>>>>>>>    End_Procedure
27201>>>>>>>>>
27201>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
27203>>>>>>>>>        Integer retVal
27203>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
27204>>>>>>>>>        Function_Return retVal
27205>>>>>>>>>    End_Function
27206>>>>>>>>>
27206>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
27208>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
27209>>>>>>>>>    End_Procedure
27210>>>>>>>>>
27210>>>>>>>>>    Function ComWidth Returns Integer
27212>>>>>>>>>        Integer retVal
27212>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
27213>>>>>>>>>        Function_Return retVal
27214>>>>>>>>>    End_Function
27215>>>>>>>>>
27215>>>>>>>>>    Procedure Set ComWidth Integer value
27217>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
27218>>>>>>>>>    End_Procedure
27219>>>>>>>>>
27219>>>>>>>>>    Function ComHeight Returns Integer
27221>>>>>>>>>        Integer retVal
27221>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
27222>>>>>>>>>        Function_Return retVal
27223>>>>>>>>>    End_Function
27224>>>>>>>>>
27224>>>>>>>>>    Procedure Set ComHeight Integer value
27226>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
27227>>>>>>>>>    End_Procedure
27228>>>>>>>>>
27228>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
27230>>>>>>>>>        XTPButtonStyle retVal
27230>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
27231>>>>>>>>>        Function_Return retVal
27232>>>>>>>>>    End_Function
27233>>>>>>>>>
27233>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
27235>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
27236>>>>>>>>>    End_Procedure
27237>>>>>>>>>
27237>>>>>>>>>    Function ComKeyboardTip Returns String
27239>>>>>>>>>        String retVal
27239>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
27240>>>>>>>>>        Function_Return retVal
27241>>>>>>>>>    End_Function
27242>>>>>>>>>
27242>>>>>>>>>    Procedure Set ComKeyboardTip String value
27244>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
27245>>>>>>>>>    End_Procedure
27246>>>>>>>>>
27246>>>>>>>>>    Function ComCommandBar Returns Variant
27248>>>>>>>>>        Variant retVal
27248>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
27249>>>>>>>>>        Function_Return retVal
27250>>>>>>>>>    End_Function
27251>>>>>>>>>
27251>>>>>>>>>    Procedure Set ComCommandBar Variant value
27253>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
27254>>>>>>>>>    End_Procedure
27255>>>>>>>>>
27255>>>>>>>>>    Function ComCloseOnDblClick Returns Boolean
27257>>>>>>>>>        Boolean retVal
27257>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_BOOL to retVal
27258>>>>>>>>>        Function_Return retVal
27259>>>>>>>>>    End_Function
27260>>>>>>>>>
27260>>>>>>>>>    Procedure Set ComCloseOnDblClick Boolean value
27262>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_BOOL to value
27263>>>>>>>>>    End_Procedure
27264>>>>>>>>>
27264>>>>>>>>>    Function ComControls Returns Variant
27266>>>>>>>>>        Handle hDispatchDriver
27266>>>>>>>>>        Variant retVal
27266>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27267>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
27268>>>>>>>>>        Function_Return retVal
27269>>>>>>>>>    End_Function
27270>>>>>>>>>
27270>>>>>>>>>    Function ComParent Returns Variant
27272>>>>>>>>>        Handle hDispatchDriver
27272>>>>>>>>>        Variant retVal
27272>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27273>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
27274>>>>>>>>>        Function_Return retVal
27275>>>>>>>>>    End_Function
27276>>>>>>>>>
27276>>>>>>>>>    Function ComIndex Returns Integer
27278>>>>>>>>>        Handle hDispatchDriver
27278>>>>>>>>>        Integer retVal
27278>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27279>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
27280>>>>>>>>>        Function_Return retVal
27281>>>>>>>>>    End_Function
27282>>>>>>>>>
27282>>>>>>>>>    Function ComType Returns XTPControlType
27284>>>>>>>>>        Handle hDispatchDriver
27284>>>>>>>>>        XTPControlType retVal
27284>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27285>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
27286>>>>>>>>>        Function_Return retVal
27287>>>>>>>>>    End_Function
27288>>>>>>>>>
27288>>>>>>>>>    Procedure ComDelete
27290>>>>>>>>>        Handle hDispatchDriver
27290>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27291>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
27292>>>>>>>>>    End_Procedure
27293>>>>>>>>>
27293>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
27295>>>>>>>>>        Handle hDispatchDriver
27295>>>>>>>>>        Variant retVal
27295>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27296>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
27297>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
27298>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
27299>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
27300>>>>>>>>>        Function_Return retVal
27301>>>>>>>>>    End_Function
27302>>>>>>>>>
27302>>>>>>>>>    Procedure ComSetFocus
27304>>>>>>>>>        Handle hDispatchDriver
27304>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27305>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
27306>>>>>>>>>    End_Procedure
27307>>>>>>>>>
27307>>>>>>>>>    Procedure ComExecute
27309>>>>>>>>>        Handle hDispatchDriver
27309>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27310>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
27311>>>>>>>>>    End_Procedure
27312>>>>>>>>>
27312>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
27314>>>>>>>>>        Handle hDispatchDriver
27314>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27315>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
27316>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
27317>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
27318>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
27319>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
27320>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
27321>>>>>>>>>    End_Procedure
27322>>>>>>>>>
27322>>>>>>>>>    Function ComRibbonGroup Returns Variant
27324>>>>>>>>>        Handle hDispatchDriver
27324>>>>>>>>>        Variant retVal
27324>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27325>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
27326>>>>>>>>>        Function_Return retVal
27327>>>>>>>>>    End_Function
27328>>>>>>>>>
27328>>>>>>>>>    Procedure ComReset
27330>>>>>>>>>        Handle hDispatchDriver
27330>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27331>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
27332>>>>>>>>>    End_Procedure
27333>>>>>>>>>
27333>>>>>>>>>    Function ComTop Returns Integer
27335>>>>>>>>>        Handle hDispatchDriver
27335>>>>>>>>>        Integer retVal
27335>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27336>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
27337>>>>>>>>>        Function_Return retVal
27338>>>>>>>>>    End_Function
27339>>>>>>>>>
27339>>>>>>>>>    Function ComLeft Returns Integer
27341>>>>>>>>>        Handle hDispatchDriver
27341>>>>>>>>>        Integer retVal
27341>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27342>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
27343>>>>>>>>>        Function_Return retVal
27344>>>>>>>>>    End_Function
27345>>>>>>>>>
27345>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
27347>>>>>>>>>        Handle hDispatchDriver
27347>>>>>>>>>        Variant retVal
27347>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27348>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27349>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
27350>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
27351>>>>>>>>>        Function_Return retVal
27352>>>>>>>>>    End_Function
27353>>>>>>>>>
27353>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
27355>>>>>>>>>        Handle hDispatchDriver
27355>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27356>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
27357>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
27358>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
27359>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
27360>>>>>>>>>    End_Procedure
27361>>>>>>>>>End_Class
27362>>>>>>>>>
27362>>>>>>>>>// CLSID: {C0DE2200-01E8-43E6-BC94-A31B89077DC4}
27362>>>>>>>>>Class cCJRibbonPaintManager is a cComAutomationObject
27363>>>>>>>>>
27363>>>>>>>>>    Function ComCaptionFont Returns Variant
27365>>>>>>>>>        Variant retVal
27365>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
27366>>>>>>>>>        Function_Return retVal
27367>>>>>>>>>    End_Function
27368>>>>>>>>>
27368>>>>>>>>>    Procedure Set ComCaptionFont Variant value
27370>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
27371>>>>>>>>>    End_Procedure
27372>>>>>>>>>
27372>>>>>>>>>    Function ComHotTrackingGroups Returns Boolean
27374>>>>>>>>>        Boolean retVal
27374>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BOOL to retVal
27375>>>>>>>>>        Function_Return retVal
27376>>>>>>>>>    End_Function
27377>>>>>>>>>
27377>>>>>>>>>    Procedure Set ComHotTrackingGroups Boolean value
27379>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BOOL to value
27380>>>>>>>>>    End_Procedure
27381>>>>>>>>>
27381>>>>>>>>>    Function ComWindowCaptionFont Returns Variant
27383>>>>>>>>>        Variant retVal
27383>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_DISPATCH to retVal
27384>>>>>>>>>        Function_Return retVal
27385>>>>>>>>>    End_Function
27386>>>>>>>>>
27386>>>>>>>>>    Procedure Set ComWindowCaptionFont Variant value
27388>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_DISPATCH to value
27389>>>>>>>>>    End_Procedure
27390>>>>>>>>>End_Class
27391>>>>>>>>>
27391>>>>>>>>>// CLSID: {C0DE2200-F6FB-49A2-A8C7-C5BD794C3C3B}
27391>>>>>>>>>Class cCJMiniToolBar is a cComAutomationObject
27392>>>>>>>>>
27392>>>>>>>>>    Function ComTitle Returns String
27394>>>>>>>>>        String retVal
27394>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
27395>>>>>>>>>        Function_Return retVal
27396>>>>>>>>>    End_Function
27397>>>>>>>>>
27397>>>>>>>>>    Procedure Set ComTitle String value
27399>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
27400>>>>>>>>>    End_Procedure
27401>>>>>>>>>
27401>>>>>>>>>    Function ComVisible Returns Boolean
27403>>>>>>>>>        Boolean retVal
27403>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
27404>>>>>>>>>        Function_Return retVal
27405>>>>>>>>>    End_Function
27406>>>>>>>>>
27406>>>>>>>>>    Procedure Set ComVisible Boolean value
27408>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
27409>>>>>>>>>    End_Procedure
27410>>>>>>>>>
27410>>>>>>>>>    Function ComPosition Returns XTPBarPosition
27412>>>>>>>>>        XTPBarPosition retVal
27412>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
27413>>>>>>>>>        Function_Return retVal
27414>>>>>>>>>    End_Function
27415>>>>>>>>>
27415>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
27417>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
27418>>>>>>>>>    End_Procedure
27419>>>>>>>>>
27419>>>>>>>>>    Function ComBarID Returns Integer
27421>>>>>>>>>        Integer retVal
27421>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
27422>>>>>>>>>        Function_Return retVal
27423>>>>>>>>>    End_Function
27424>>>>>>>>>
27424>>>>>>>>>    Procedure Set ComBarID Integer value
27426>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
27427>>>>>>>>>    End_Procedure
27428>>>>>>>>>
27428>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
27430>>>>>>>>>        Boolean retVal
27430>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
27431>>>>>>>>>        Function_Return retVal
27432>>>>>>>>>    End_Function
27433>>>>>>>>>
27433>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
27435>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
27436>>>>>>>>>    End_Procedure
27437>>>>>>>>>
27437>>>>>>>>>    Function ComWidth Returns Integer
27439>>>>>>>>>        Integer retVal
27439>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
27440>>>>>>>>>        Function_Return retVal
27441>>>>>>>>>    End_Function
27442>>>>>>>>>
27442>>>>>>>>>    Procedure Set ComWidth Integer value
27444>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
27445>>>>>>>>>    End_Procedure
27446>>>>>>>>>
27446>>>>>>>>>    Function ComCloseable Returns Boolean
27448>>>>>>>>>        Boolean retVal
27448>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
27449>>>>>>>>>        Function_Return retVal
27450>>>>>>>>>    End_Function
27451>>>>>>>>>
27451>>>>>>>>>    Procedure Set ComCloseable Boolean value
27453>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
27454>>>>>>>>>    End_Procedure
27455>>>>>>>>>
27455>>>>>>>>>    Function ComEnableAnimation Returns Boolean
27457>>>>>>>>>        Boolean retVal
27457>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
27458>>>>>>>>>        Function_Return retVal
27459>>>>>>>>>    End_Function
27460>>>>>>>>>
27460>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
27462>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
27463>>>>>>>>>    End_Procedure
27464>>>>>>>>>
27464>>>>>>>>>    Function ComShowGripper Returns Boolean
27466>>>>>>>>>        Boolean retVal
27466>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
27467>>>>>>>>>        Function_Return retVal
27468>>>>>>>>>    End_Function
27469>>>>>>>>>
27469>>>>>>>>>    Procedure Set ComShowGripper Boolean value
27471>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
27472>>>>>>>>>    End_Procedure
27473>>>>>>>>>
27473>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
27475>>>>>>>>>        XTPButtonStyle retVal
27475>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
27476>>>>>>>>>        Function_Return retVal
27477>>>>>>>>>    End_Function
27478>>>>>>>>>
27478>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
27480>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
27481>>>>>>>>>    End_Procedure
27482>>>>>>>>>
27482>>>>>>>>>    Function ComCustomizable Returns Boolean
27484>>>>>>>>>        Boolean retVal
27484>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
27485>>>>>>>>>        Function_Return retVal
27486>>>>>>>>>    End_Function
27487>>>>>>>>>
27487>>>>>>>>>    Procedure Set ComCustomizable Boolean value
27489>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
27490>>>>>>>>>    End_Procedure
27491>>>>>>>>>
27491>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
27493>>>>>>>>>        Boolean retVal
27493>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
27494>>>>>>>>>        Function_Return retVal
27495>>>>>>>>>    End_Function
27496>>>>>>>>>
27496>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
27498>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
27499>>>>>>>>>    End_Procedure
27500>>>>>>>>>
27500>>>>>>>>>    Function ComCustomControlKeyboardInteraction Returns Boolean
27502>>>>>>>>>        Boolean retVal
27502>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 302 OLE_VT_BOOL to retVal
27503>>>>>>>>>        Function_Return retVal
27504>>>>>>>>>    End_Function
27505>>>>>>>>>
27505>>>>>>>>>    Procedure Set ComCustomControlKeyboardInteraction Boolean value
27507>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 302 OLE_VT_BOOL to value
27508>>>>>>>>>    End_Procedure
27509>>>>>>>>>
27509>>>>>>>>>    Function ComSelectedControl Returns Variant
27511>>>>>>>>>        Variant retVal
27511>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
27512>>>>>>>>>        Function_Return retVal
27513>>>>>>>>>    End_Function
27514>>>>>>>>>
27514>>>>>>>>>    Procedure Set ComSelectedControl Variant value
27516>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
27517>>>>>>>>>    End_Procedure
27518>>>>>>>>>
27518>>>>>>>>>    Function ComType Returns XTPBarType
27520>>>>>>>>>        Handle hDispatchDriver
27520>>>>>>>>>        XTPBarType retVal
27520>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27521>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
27522>>>>>>>>>        Function_Return retVal
27523>>>>>>>>>    End_Function
27524>>>>>>>>>
27524>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
27526>>>>>>>>>        Handle hDispatchDriver
27526>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27527>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27528>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
27529>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
27530>>>>>>>>>    End_Procedure
27531>>>>>>>>>
27531>>>>>>>>>    Function ComBuiltIn Returns Boolean
27533>>>>>>>>>        Handle hDispatchDriver
27533>>>>>>>>>        Boolean retVal
27533>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27534>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
27535>>>>>>>>>        Function_Return retVal
27536>>>>>>>>>    End_Function
27537>>>>>>>>>
27537>>>>>>>>>    Procedure ComDelete
27539>>>>>>>>>        Handle hDispatchDriver
27539>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27540>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
27541>>>>>>>>>    End_Procedure
27542>>>>>>>>>
27542>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
27544>>>>>>>>>        Handle hDispatchDriver
27544>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27545>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
27546>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
27547>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
27548>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
27549>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
27550>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
27551>>>>>>>>>    End_Procedure
27552>>>>>>>>>
27552>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
27554>>>>>>>>>        Handle hDispatchDriver
27554>>>>>>>>>        OLE_HANDLE retVal
27554>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27555>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
27556>>>>>>>>>        Function_Return retVal
27557>>>>>>>>>    End_Function
27558>>>>>>>>>
27558>>>>>>>>>    Function ComCommandBars Returns Variant
27560>>>>>>>>>        Handle hDispatchDriver
27560>>>>>>>>>        Variant retVal
27560>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27561>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
27562>>>>>>>>>        Function_Return retVal
27563>>>>>>>>>    End_Function
27564>>>>>>>>>
27564>>>>>>>>>    Function ComControls Returns Variant
27566>>>>>>>>>        Handle hDispatchDriver
27566>>>>>>>>>        Variant retVal
27566>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27567>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
27568>>>>>>>>>        Function_Return retVal
27569>>>>>>>>>    End_Function
27570>>>>>>>>>
27570>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
27572>>>>>>>>>        Handle hDispatchDriver
27572>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27573>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
27574>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
27575>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
27576>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
27577>>>>>>>>>    End_Procedure
27578>>>>>>>>>
27578>>>>>>>>>    Function ComGetIconWidth Returns Integer
27580>>>>>>>>>        Handle hDispatchDriver
27580>>>>>>>>>        Integer retVal
27580>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27581>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
27582>>>>>>>>>        Function_Return retVal
27583>>>>>>>>>    End_Function
27584>>>>>>>>>
27584>>>>>>>>>    Function ComGetIconHeight Returns Integer
27586>>>>>>>>>        Handle hDispatchDriver
27586>>>>>>>>>        Integer retVal
27586>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27587>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
27588>>>>>>>>>        Function_Return retVal
27589>>>>>>>>>    End_Function
27590>>>>>>>>>
27590>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
27592>>>>>>>>>        Handle hDispatchDriver
27592>>>>>>>>>        Variant retVal
27592>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27593>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
27594>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
27595>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
27596>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
27597>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
27598>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
27599>>>>>>>>>        Function_Return retVal
27600>>>>>>>>>    End_Function
27601>>>>>>>>>
27601>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
27603>>>>>>>>>        Handle hDispatchDriver
27603>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27604>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
27605>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
27606>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
27607>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
27608>>>>>>>>>    End_Procedure
27609>>>>>>>>>
27609>>>>>>>>>    Procedure ComRedrawBar
27611>>>>>>>>>        Handle hDispatchDriver
27611>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27612>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
27613>>>>>>>>>    End_Procedure
27614>>>>>>>>>
27614>>>>>>>>>    Procedure ComRecalcLayout
27616>>>>>>>>>        Handle hDispatchDriver
27616>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27617>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
27618>>>>>>>>>    End_Procedure
27619>>>>>>>>>
27619>>>>>>>>>    Procedure ComReset
27621>>>>>>>>>        Handle hDispatchDriver
27621>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27622>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
27623>>>>>>>>>    End_Procedure
27624>>>>>>>>>
27624>>>>>>>>>    Function ComPopupContextMenu Variant llPopupBar Variant llFlags Variant llx Variant lly Returns Integer
27626>>>>>>>>>        Handle hDispatchDriver
27626>>>>>>>>>        Integer retVal
27626>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27627>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
27628>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llPopupBar
27629>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFlags
27630>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llx
27631>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lly
27632>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_I4 to retVal
27633>>>>>>>>>        Function_Return retVal
27634>>>>>>>>>    End_Function
27635>>>>>>>>>
27635>>>>>>>>>    Function ComPopupMiniToolBar Variant llFlags Variant llx Variant lly Returns Integer
27637>>>>>>>>>        Handle hDispatchDriver
27637>>>>>>>>>        Integer retVal
27637>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27638>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
27639>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFlags
27640>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llx
27641>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lly
27642>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_I4 to retVal
27643>>>>>>>>>        Function_Return retVal
27644>>>>>>>>>    End_Function
27645>>>>>>>>>End_Class
27646>>>>>>>>>
27646>>>>>>>>>// CLSID: {C0DE2200-CBD0-4AF0-9D33-EB56AB0648D8}
27646>>>>>>>>>Class cCJRecentFileList is a cComAutomationObject
27647>>>>>>>>>
27647>>>>>>>>>    Function ComMaxSize Returns Integer
27649>>>>>>>>>        Integer retVal
27649>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
27650>>>>>>>>>        Function_Return retVal
27651>>>>>>>>>    End_Function
27652>>>>>>>>>
27652>>>>>>>>>    Procedure Set ComMaxSize Integer value
27654>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
27655>>>>>>>>>    End_Procedure
27656>>>>>>>>>
27656>>>>>>>>>    Function ComPinable Returns Boolean
27658>>>>>>>>>        Boolean retVal
27658>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
27659>>>>>>>>>        Function_Return retVal
27660>>>>>>>>>    End_Function
27661>>>>>>>>>
27661>>>>>>>>>    Procedure Set ComPinable Boolean value
27663>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
27664>>>>>>>>>    End_Procedure
27665>>>>>>>>>
27665>>>>>>>>>    Function Com_NewEnum Returns Variant
27667>>>>>>>>>        Handle hDispatchDriver
27667>>>>>>>>>        Variant retVal
27667>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27668>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
27669>>>>>>>>>        Function_Return retVal
27670>>>>>>>>>    End_Function
27671>>>>>>>>>
27671>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
27673>>>>>>>>>        Handle hDispatchDriver
27673>>>>>>>>>        Variant retVal
27673>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27674>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27675>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
27676>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
27677>>>>>>>>>        Function_Return retVal
27678>>>>>>>>>    End_Function
27679>>>>>>>>>
27679>>>>>>>>>    Function ComAdd String llPathName Returns Variant
27681>>>>>>>>>        Handle hDispatchDriver
27681>>>>>>>>>        Variant retVal
27681>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27682>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27683>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPathName
27684>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
27685>>>>>>>>>        Function_Return retVal
27686>>>>>>>>>    End_Function
27687>>>>>>>>>
27687>>>>>>>>>    Function ComCount Returns Integer
27689>>>>>>>>>        Handle hDispatchDriver
27689>>>>>>>>>        Integer retVal
27689>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27690>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
27691>>>>>>>>>        Function_Return retVal
27692>>>>>>>>>    End_Function
27693>>>>>>>>>
27693>>>>>>>>>    Procedure ComRemove Integer llIndex
27695>>>>>>>>>        Handle hDispatchDriver
27695>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27696>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27697>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
27698>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
27699>>>>>>>>>    End_Procedure
27700>>>>>>>>>End_Class
27701>>>>>>>>>
27701>>>>>>>>>// CLSID: {C0DE2200-214E-44E4-854E-A40882ECD0FF}
27701>>>>>>>>>Class cCJRecentFileListItem is a cComAutomationObject
27702>>>>>>>>>
27702>>>>>>>>>    Function ComCaption Returns String
27704>>>>>>>>>        String retVal
27704>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
27705>>>>>>>>>        Function_Return retVal
27706>>>>>>>>>    End_Function
27707>>>>>>>>>
27707>>>>>>>>>    Procedure Set ComCaption String value
27709>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
27710>>>>>>>>>    End_Procedure
27711>>>>>>>>>
27711>>>>>>>>>    Function ComTag Returns String
27713>>>>>>>>>        String retVal
27713>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
27714>>>>>>>>>        Function_Return retVal
27715>>>>>>>>>    End_Function
27716>>>>>>>>>
27716>>>>>>>>>    Procedure Set ComTag String value
27718>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
27719>>>>>>>>>    End_Procedure
27720>>>>>>>>>
27720>>>>>>>>>    Function ComIconId Returns Integer
27722>>>>>>>>>        Integer retVal
27722>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
27723>>>>>>>>>        Function_Return retVal
27724>>>>>>>>>    End_Function
27725>>>>>>>>>
27725>>>>>>>>>    Procedure Set ComIconId Integer value
27727>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
27728>>>>>>>>>    End_Procedure
27729>>>>>>>>>
27729>>>>>>>>>    Function ComPinned Returns Boolean
27731>>>>>>>>>        Boolean retVal
27731>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
27732>>>>>>>>>        Function_Return retVal
27733>>>>>>>>>    End_Function
27734>>>>>>>>>
27734>>>>>>>>>    Procedure Set ComPinned Boolean value
27736>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
27737>>>>>>>>>    End_Procedure
27738>>>>>>>>>
27738>>>>>>>>>    Function ComPathName Returns String
27740>>>>>>>>>        Handle hDispatchDriver
27740>>>>>>>>>        String retVal
27740>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27741>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_BSTR to retVal
27742>>>>>>>>>        Function_Return retVal
27743>>>>>>>>>    End_Function
27744>>>>>>>>>End_Class
27745>>>>>>>>>
27745>>>>>>>>>// CLSID: {C0DE2200-DE30-460B-B55A-40D9D5229C79}
27745>>>>>>>>>Class cCJCommandBarSlider is a cComAutomationObject
27746>>>>>>>>>
27746>>>>>>>>>    Function ComChecked Returns Boolean
27748>>>>>>>>>        Boolean retVal
27748>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
27749>>>>>>>>>        Function_Return retVal
27750>>>>>>>>>    End_Function
27751>>>>>>>>>
27751>>>>>>>>>    Procedure Set ComChecked Boolean value
27753>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
27754>>>>>>>>>    End_Procedure
27755>>>>>>>>>
27755>>>>>>>>>    Function ComBeginGroup Returns Boolean
27757>>>>>>>>>        Boolean retVal
27757>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
27758>>>>>>>>>        Function_Return retVal
27759>>>>>>>>>    End_Function
27760>>>>>>>>>
27760>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
27762>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
27763>>>>>>>>>    End_Procedure
27764>>>>>>>>>
27764>>>>>>>>>    Function ComCaption Returns String
27766>>>>>>>>>        String retVal
27766>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
27767>>>>>>>>>        Function_Return retVal
27768>>>>>>>>>    End_Function
27769>>>>>>>>>
27769>>>>>>>>>    Procedure Set ComCaption String value
27771>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
27772>>>>>>>>>    End_Procedure
27773>>>>>>>>>
27773>>>>>>>>>    Function ComDescriptionText Returns String
27775>>>>>>>>>        String retVal
27775>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
27776>>>>>>>>>        Function_Return retVal
27777>>>>>>>>>    End_Function
27778>>>>>>>>>
27778>>>>>>>>>    Procedure Set ComDescriptionText String value
27780>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
27781>>>>>>>>>    End_Procedure
27782>>>>>>>>>
27782>>>>>>>>>    Function ComId Returns Integer
27784>>>>>>>>>        Integer retVal
27784>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
27785>>>>>>>>>        Function_Return retVal
27786>>>>>>>>>    End_Function
27787>>>>>>>>>
27787>>>>>>>>>    Procedure Set ComId Integer value
27789>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
27790>>>>>>>>>    End_Procedure
27791>>>>>>>>>
27791>>>>>>>>>    Function ComParameter Returns String
27793>>>>>>>>>        String retVal
27793>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
27794>>>>>>>>>        Function_Return retVal
27795>>>>>>>>>    End_Function
27796>>>>>>>>>
27796>>>>>>>>>    Procedure Set ComParameter String value
27798>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
27799>>>>>>>>>    End_Procedure
27800>>>>>>>>>
27800>>>>>>>>>    Function ComShortcutText Returns String
27802>>>>>>>>>        String retVal
27802>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
27803>>>>>>>>>        Function_Return retVal
27804>>>>>>>>>    End_Function
27805>>>>>>>>>
27805>>>>>>>>>    Procedure Set ComShortcutText String value
27807>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
27808>>>>>>>>>    End_Procedure
27809>>>>>>>>>
27809>>>>>>>>>    Function ComCustomShortcutText Returns String
27811>>>>>>>>>        String retVal
27811>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
27812>>>>>>>>>        Function_Return retVal
27813>>>>>>>>>    End_Function
27814>>>>>>>>>
27814>>>>>>>>>    Procedure Set ComCustomShortcutText String value
27816>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
27817>>>>>>>>>    End_Procedure
27818>>>>>>>>>
27818>>>>>>>>>    Function ComTooltipText Returns String
27820>>>>>>>>>        String retVal
27820>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
27821>>>>>>>>>        Function_Return retVal
27822>>>>>>>>>    End_Function
27823>>>>>>>>>
27823>>>>>>>>>    Procedure Set ComTooltipText String value
27825>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
27826>>>>>>>>>    End_Procedure
27827>>>>>>>>>
27827>>>>>>>>>    Function ComVisible Returns Boolean
27829>>>>>>>>>        Boolean retVal
27829>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
27830>>>>>>>>>        Function_Return retVal
27831>>>>>>>>>    End_Function
27832>>>>>>>>>
27832>>>>>>>>>    Procedure Set ComVisible Boolean value
27834>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
27835>>>>>>>>>    End_Procedure
27836>>>>>>>>>
27836>>>>>>>>>    Function ComEnabled Returns Boolean
27838>>>>>>>>>        Boolean retVal
27838>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
27839>>>>>>>>>        Function_Return retVal
27840>>>>>>>>>    End_Function
27841>>>>>>>>>
27841>>>>>>>>>    Procedure Set ComEnabled Boolean value
27843>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
27844>>>>>>>>>    End_Procedure
27845>>>>>>>>>
27845>>>>>>>>>    Function ComIconId Returns Integer
27847>>>>>>>>>        Integer retVal
27847>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
27848>>>>>>>>>        Function_Return retVal
27849>>>>>>>>>    End_Function
27850>>>>>>>>>
27850>>>>>>>>>    Procedure Set ComIconId Integer value
27852>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
27853>>>>>>>>>    End_Procedure
27854>>>>>>>>>
27854>>>>>>>>>    Function ComDefaultItem Returns Boolean
27856>>>>>>>>>        Boolean retVal
27856>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
27857>>>>>>>>>        Function_Return retVal
27858>>>>>>>>>    End_Function
27859>>>>>>>>>
27859>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
27861>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
27862>>>>>>>>>    End_Procedure
27863>>>>>>>>>
27863>>>>>>>>>    Function ComFlags Returns XTPControlFlags
27865>>>>>>>>>        XTPControlFlags retVal
27865>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
27866>>>>>>>>>        Function_Return retVal
27867>>>>>>>>>    End_Function
27868>>>>>>>>>
27868>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
27870>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
27871>>>>>>>>>    End_Procedure
27872>>>>>>>>>
27872>>>>>>>>>    Function ComCategory Returns String
27874>>>>>>>>>        String retVal
27874>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
27875>>>>>>>>>        Function_Return retVal
27876>>>>>>>>>    End_Function
27877>>>>>>>>>
27877>>>>>>>>>    Procedure Set ComCategory String value
27879>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
27880>>>>>>>>>    End_Procedure
27881>>>>>>>>>
27881>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
27883>>>>>>>>>        XTPControlHideFlags retVal
27883>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
27884>>>>>>>>>        Function_Return retVal
27885>>>>>>>>>    End_Function
27886>>>>>>>>>
27886>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
27888>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
27889>>>>>>>>>    End_Procedure
27890>>>>>>>>>
27890>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
27892>>>>>>>>>        Boolean retVal
27892>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
27893>>>>>>>>>        Function_Return retVal
27894>>>>>>>>>    End_Function
27895>>>>>>>>>
27895>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
27897>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
27898>>>>>>>>>    End_Procedure
27899>>>>>>>>>
27899>>>>>>>>>    Function ComAction Returns Variant
27901>>>>>>>>>        Variant retVal
27901>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
27902>>>>>>>>>        Function_Return retVal
27903>>>>>>>>>    End_Function
27904>>>>>>>>>
27904>>>>>>>>>    Procedure Set ComAction Variant value
27906>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
27907>>>>>>>>>    End_Procedure
27908>>>>>>>>>
27908>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
27910>>>>>>>>>        Integer retVal
27910>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
27911>>>>>>>>>        Function_Return retVal
27912>>>>>>>>>    End_Function
27913>>>>>>>>>
27913>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
27915>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
27916>>>>>>>>>    End_Procedure
27917>>>>>>>>>
27917>>>>>>>>>    Function ComWidth Returns Integer
27919>>>>>>>>>        Integer retVal
27919>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
27920>>>>>>>>>        Function_Return retVal
27921>>>>>>>>>    End_Function
27922>>>>>>>>>
27922>>>>>>>>>    Procedure Set ComWidth Integer value
27924>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
27925>>>>>>>>>    End_Procedure
27926>>>>>>>>>
27926>>>>>>>>>    Function ComHeight Returns Integer
27928>>>>>>>>>        Integer retVal
27928>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
27929>>>>>>>>>        Function_Return retVal
27930>>>>>>>>>    End_Function
27931>>>>>>>>>
27931>>>>>>>>>    Procedure Set ComHeight Integer value
27933>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
27934>>>>>>>>>    End_Procedure
27935>>>>>>>>>
27935>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
27937>>>>>>>>>        XTPButtonStyle retVal
27937>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
27938>>>>>>>>>        Function_Return retVal
27939>>>>>>>>>    End_Function
27940>>>>>>>>>
27940>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
27942>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
27943>>>>>>>>>    End_Procedure
27944>>>>>>>>>
27944>>>>>>>>>    Function ComKeyboardTip Returns String
27946>>>>>>>>>        String retVal
27946>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
27947>>>>>>>>>        Function_Return retVal
27948>>>>>>>>>    End_Function
27949>>>>>>>>>
27949>>>>>>>>>    Procedure Set ComKeyboardTip String value
27951>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
27952>>>>>>>>>    End_Procedure
27953>>>>>>>>>
27953>>>>>>>>>    Function ComPos Returns Integer
27955>>>>>>>>>        Integer retVal
27955>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
27956>>>>>>>>>        Function_Return retVal
27957>>>>>>>>>    End_Function
27958>>>>>>>>>
27958>>>>>>>>>    Procedure Set ComPos Integer value
27960>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
27961>>>>>>>>>    End_Procedure
27962>>>>>>>>>
27962>>>>>>>>>    Function ComMin Returns Integer
27964>>>>>>>>>        Integer retVal
27964>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to retVal
27965>>>>>>>>>        Function_Return retVal
27966>>>>>>>>>    End_Function
27967>>>>>>>>>
27967>>>>>>>>>    Procedure Set ComMin Integer value
27969>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to value
27970>>>>>>>>>    End_Procedure
27971>>>>>>>>>
27971>>>>>>>>>    Function ComMax Returns Integer
27973>>>>>>>>>        Integer retVal
27973>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to retVal
27974>>>>>>>>>        Function_Return retVal
27975>>>>>>>>>    End_Function
27976>>>>>>>>>
27976>>>>>>>>>    Procedure Set ComMax Integer value
27978>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to value
27979>>>>>>>>>    End_Procedure
27980>>>>>>>>>
27980>>>>>>>>>    Function ComControls Returns Variant
27982>>>>>>>>>        Handle hDispatchDriver
27982>>>>>>>>>        Variant retVal
27982>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27983>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
27984>>>>>>>>>        Function_Return retVal
27985>>>>>>>>>    End_Function
27986>>>>>>>>>
27986>>>>>>>>>    Function ComParent Returns Variant
27988>>>>>>>>>        Handle hDispatchDriver
27988>>>>>>>>>        Variant retVal
27988>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27989>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
27990>>>>>>>>>        Function_Return retVal
27991>>>>>>>>>    End_Function
27992>>>>>>>>>
27992>>>>>>>>>    Function ComIndex Returns Integer
27994>>>>>>>>>        Handle hDispatchDriver
27994>>>>>>>>>        Integer retVal
27994>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27995>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
27996>>>>>>>>>        Function_Return retVal
27997>>>>>>>>>    End_Function
27998>>>>>>>>>
27998>>>>>>>>>    Function ComType Returns XTPControlType
28000>>>>>>>>>        Handle hDispatchDriver
28000>>>>>>>>>        XTPControlType retVal
28000>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28001>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
28002>>>>>>>>>        Function_Return retVal
28003>>>>>>>>>    End_Function
28004>>>>>>>>>
28004>>>>>>>>>    Procedure ComDelete
28006>>>>>>>>>        Handle hDispatchDriver
28006>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28007>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
28008>>>>>>>>>    End_Procedure
28009>>>>>>>>>
28009>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
28011>>>>>>>>>        Handle hDispatchDriver
28011>>>>>>>>>        Variant retVal
28011>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28012>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28013>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
28014>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
28015>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
28016>>>>>>>>>        Function_Return retVal
28017>>>>>>>>>    End_Function
28018>>>>>>>>>
28018>>>>>>>>>    Procedure ComSetFocus
28020>>>>>>>>>        Handle hDispatchDriver
28020>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28021>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
28022>>>>>>>>>    End_Procedure
28023>>>>>>>>>
28023>>>>>>>>>    Procedure ComExecute
28025>>>>>>>>>        Handle hDispatchDriver
28025>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28026>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
28027>>>>>>>>>    End_Procedure
28028>>>>>>>>>
28028>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
28030>>>>>>>>>        Handle hDispatchDriver
28030>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28031>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
28032>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
28033>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
28034>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
28035>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
28036>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
28037>>>>>>>>>    End_Procedure
28038>>>>>>>>>
28038>>>>>>>>>    Function ComRibbonGroup Returns Variant
28040>>>>>>>>>        Handle hDispatchDriver
28040>>>>>>>>>        Variant retVal
28040>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28041>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
28042>>>>>>>>>        Function_Return retVal
28043>>>>>>>>>    End_Function
28044>>>>>>>>>
28044>>>>>>>>>    Procedure ComReset
28046>>>>>>>>>        Handle hDispatchDriver
28046>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28047>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
28048>>>>>>>>>    End_Procedure
28049>>>>>>>>>
28049>>>>>>>>>    Function ComTop Returns Integer
28051>>>>>>>>>        Handle hDispatchDriver
28051>>>>>>>>>        Integer retVal
28051>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28052>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
28053>>>>>>>>>        Function_Return retVal
28054>>>>>>>>>    End_Function
28055>>>>>>>>>
28055>>>>>>>>>    Function ComLeft Returns Integer
28057>>>>>>>>>        Handle hDispatchDriver
28057>>>>>>>>>        Integer retVal
28057>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28058>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
28059>>>>>>>>>        Function_Return retVal
28060>>>>>>>>>    End_Function
28061>>>>>>>>>
28061>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
28063>>>>>>>>>        Handle hDispatchDriver
28063>>>>>>>>>        Variant retVal
28063>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28064>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
28065>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
28066>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
28067>>>>>>>>>        Function_Return retVal
28068>>>>>>>>>    End_Function
28069>>>>>>>>>
28069>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
28071>>>>>>>>>        Handle hDispatchDriver
28071>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28072>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28073>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
28074>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
28075>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
28076>>>>>>>>>    End_Procedure
28077>>>>>>>>>End_Class
28078>>>>>>>>>
28078>>>>>>>>>// CLSID: {C0DE2200-138E-4B16-8812-997A65E84AE6}
28078>>>>>>>>>Class cCJCommandBarProgress is a cComAutomationObject
28079>>>>>>>>>
28079>>>>>>>>>    Function ComChecked Returns Boolean
28081>>>>>>>>>        Boolean retVal
28081>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
28082>>>>>>>>>        Function_Return retVal
28083>>>>>>>>>    End_Function
28084>>>>>>>>>
28084>>>>>>>>>    Procedure Set ComChecked Boolean value
28086>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
28087>>>>>>>>>    End_Procedure
28088>>>>>>>>>
28088>>>>>>>>>    Function ComBeginGroup Returns Boolean
28090>>>>>>>>>        Boolean retVal
28090>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
28091>>>>>>>>>        Function_Return retVal
28092>>>>>>>>>    End_Function
28093>>>>>>>>>
28093>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
28095>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
28096>>>>>>>>>    End_Procedure
28097>>>>>>>>>
28097>>>>>>>>>    Function ComCaption Returns String
28099>>>>>>>>>        String retVal
28099>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
28100>>>>>>>>>        Function_Return retVal
28101>>>>>>>>>    End_Function
28102>>>>>>>>>
28102>>>>>>>>>    Procedure Set ComCaption String value
28104>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
28105>>>>>>>>>    End_Procedure
28106>>>>>>>>>
28106>>>>>>>>>    Function ComDescriptionText Returns String
28108>>>>>>>>>        String retVal
28108>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
28109>>>>>>>>>        Function_Return retVal
28110>>>>>>>>>    End_Function
28111>>>>>>>>>
28111>>>>>>>>>    Procedure Set ComDescriptionText String value
28113>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
28114>>>>>>>>>    End_Procedure
28115>>>>>>>>>
28115>>>>>>>>>    Function ComId Returns Integer
28117>>>>>>>>>        Integer retVal
28117>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
28118>>>>>>>>>        Function_Return retVal
28119>>>>>>>>>    End_Function
28120>>>>>>>>>
28120>>>>>>>>>    Procedure Set ComId Integer value
28122>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
28123>>>>>>>>>    End_Procedure
28124>>>>>>>>>
28124>>>>>>>>>    Function ComParameter Returns String
28126>>>>>>>>>        String retVal
28126>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
28127>>>>>>>>>        Function_Return retVal
28128>>>>>>>>>    End_Function
28129>>>>>>>>>
28129>>>>>>>>>    Procedure Set ComParameter String value
28131>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
28132>>>>>>>>>    End_Procedure
28133>>>>>>>>>
28133>>>>>>>>>    Function ComShortcutText Returns String
28135>>>>>>>>>        String retVal
28135>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
28136>>>>>>>>>        Function_Return retVal
28137>>>>>>>>>    End_Function
28138>>>>>>>>>
28138>>>>>>>>>    Procedure Set ComShortcutText String value
28140>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
28141>>>>>>>>>    End_Procedure
28142>>>>>>>>>
28142>>>>>>>>>    Function ComCustomShortcutText Returns String
28144>>>>>>>>>        String retVal
28144>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
28145>>>>>>>>>        Function_Return retVal
28146>>>>>>>>>    End_Function
28147>>>>>>>>>
28147>>>>>>>>>    Procedure Set ComCustomShortcutText String value
28149>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
28150>>>>>>>>>    End_Procedure
28151>>>>>>>>>
28151>>>>>>>>>    Function ComTooltipText Returns String
28153>>>>>>>>>        String retVal
28153>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
28154>>>>>>>>>        Function_Return retVal
28155>>>>>>>>>    End_Function
28156>>>>>>>>>
28156>>>>>>>>>    Procedure Set ComTooltipText String value
28158>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
28159>>>>>>>>>    End_Procedure
28160>>>>>>>>>
28160>>>>>>>>>    Function ComVisible Returns Boolean
28162>>>>>>>>>        Boolean retVal
28162>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
28163>>>>>>>>>        Function_Return retVal
28164>>>>>>>>>    End_Function
28165>>>>>>>>>
28165>>>>>>>>>    Procedure Set ComVisible Boolean value
28167>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
28168>>>>>>>>>    End_Procedure
28169>>>>>>>>>
28169>>>>>>>>>    Function ComEnabled Returns Boolean
28171>>>>>>>>>        Boolean retVal
28171>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
28172>>>>>>>>>        Function_Return retVal
28173>>>>>>>>>    End_Function
28174>>>>>>>>>
28174>>>>>>>>>    Procedure Set ComEnabled Boolean value
28176>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
28177>>>>>>>>>    End_Procedure
28178>>>>>>>>>
28178>>>>>>>>>    Function ComIconId Returns Integer
28180>>>>>>>>>        Integer retVal
28180>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
28181>>>>>>>>>        Function_Return retVal
28182>>>>>>>>>    End_Function
28183>>>>>>>>>
28183>>>>>>>>>    Procedure Set ComIconId Integer value
28185>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
28186>>>>>>>>>    End_Procedure
28187>>>>>>>>>
28187>>>>>>>>>    Function ComDefaultItem Returns Boolean
28189>>>>>>>>>        Boolean retVal
28189>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
28190>>>>>>>>>        Function_Return retVal
28191>>>>>>>>>    End_Function
28192>>>>>>>>>
28192>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
28194>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
28195>>>>>>>>>    End_Procedure
28196>>>>>>>>>
28196>>>>>>>>>    Function ComFlags Returns XTPControlFlags
28198>>>>>>>>>        XTPControlFlags retVal
28198>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
28199>>>>>>>>>        Function_Return retVal
28200>>>>>>>>>    End_Function
28201>>>>>>>>>
28201>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
28203>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
28204>>>>>>>>>    End_Procedure
28205>>>>>>>>>
28205>>>>>>>>>    Function ComCategory Returns String
28207>>>>>>>>>        String retVal
28207>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
28208>>>>>>>>>        Function_Return retVal
28209>>>>>>>>>    End_Function
28210>>>>>>>>>
28210>>>>>>>>>    Procedure Set ComCategory String value
28212>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
28213>>>>>>>>>    End_Procedure
28214>>>>>>>>>
28214>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
28216>>>>>>>>>        XTPControlHideFlags retVal
28216>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
28217>>>>>>>>>        Function_Return retVal
28218>>>>>>>>>    End_Function
28219>>>>>>>>>
28219>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
28221>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
28222>>>>>>>>>    End_Procedure
28223>>>>>>>>>
28223>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
28225>>>>>>>>>        Boolean retVal
28225>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
28226>>>>>>>>>        Function_Return retVal
28227>>>>>>>>>    End_Function
28228>>>>>>>>>
28228>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
28230>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
28231>>>>>>>>>    End_Procedure
28232>>>>>>>>>
28232>>>>>>>>>    Function ComAction Returns Variant
28234>>>>>>>>>        Variant retVal
28234>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
28235>>>>>>>>>        Function_Return retVal
28236>>>>>>>>>    End_Function
28237>>>>>>>>>
28237>>>>>>>>>    Procedure Set ComAction Variant value
28239>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
28240>>>>>>>>>    End_Procedure
28241>>>>>>>>>
28241>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
28243>>>>>>>>>        Integer retVal
28243>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
28244>>>>>>>>>        Function_Return retVal
28245>>>>>>>>>    End_Function
28246>>>>>>>>>
28246>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
28248>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
28249>>>>>>>>>    End_Procedure
28250>>>>>>>>>
28250>>>>>>>>>    Function ComWidth Returns Integer
28252>>>>>>>>>        Integer retVal
28252>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
28253>>>>>>>>>        Function_Return retVal
28254>>>>>>>>>    End_Function
28255>>>>>>>>>
28255>>>>>>>>>    Procedure Set ComWidth Integer value
28257>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
28258>>>>>>>>>    End_Procedure
28259>>>>>>>>>
28259>>>>>>>>>    Function ComHeight Returns Integer
28261>>>>>>>>>        Integer retVal
28261>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
28262>>>>>>>>>        Function_Return retVal
28263>>>>>>>>>    End_Function
28264>>>>>>>>>
28264>>>>>>>>>    Procedure Set ComHeight Integer value
28266>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
28267>>>>>>>>>    End_Procedure
28268>>>>>>>>>
28268>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
28270>>>>>>>>>        XTPButtonStyle retVal
28270>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
28271>>>>>>>>>        Function_Return retVal
28272>>>>>>>>>    End_Function
28273>>>>>>>>>
28273>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
28275>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
28276>>>>>>>>>    End_Procedure
28277>>>>>>>>>
28277>>>>>>>>>    Function ComKeyboardTip Returns String
28279>>>>>>>>>        String retVal
28279>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
28280>>>>>>>>>        Function_Return retVal
28281>>>>>>>>>    End_Function
28282>>>>>>>>>
28282>>>>>>>>>    Procedure Set ComKeyboardTip String value
28284>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
28285>>>>>>>>>    End_Procedure
28286>>>>>>>>>
28286>>>>>>>>>    Function ComPos Returns Integer
28288>>>>>>>>>        Integer retVal
28288>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
28289>>>>>>>>>        Function_Return retVal
28290>>>>>>>>>    End_Function
28291>>>>>>>>>
28291>>>>>>>>>    Procedure Set ComPos Integer value
28293>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
28294>>>>>>>>>    End_Procedure
28295>>>>>>>>>
28295>>>>>>>>>    Function ComMin Returns Integer
28297>>>>>>>>>        Integer retVal
28297>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to retVal
28298>>>>>>>>>        Function_Return retVal
28299>>>>>>>>>    End_Function
28300>>>>>>>>>
28300>>>>>>>>>    Procedure Set ComMin Integer value
28302>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to value
28303>>>>>>>>>    End_Procedure
28304>>>>>>>>>
28304>>>>>>>>>    Function ComMax Returns Integer
28306>>>>>>>>>        Integer retVal
28306>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to retVal
28307>>>>>>>>>        Function_Return retVal
28308>>>>>>>>>    End_Function
28309>>>>>>>>>
28309>>>>>>>>>    Procedure Set ComMax Integer value
28311>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to value
28312>>>>>>>>>    End_Procedure
28313>>>>>>>>>
28313>>>>>>>>>    Function ComControls Returns Variant
28315>>>>>>>>>        Handle hDispatchDriver
28315>>>>>>>>>        Variant retVal
28315>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28316>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
28317>>>>>>>>>        Function_Return retVal
28318>>>>>>>>>    End_Function
28319>>>>>>>>>
28319>>>>>>>>>    Function ComParent Returns Variant
28321>>>>>>>>>        Handle hDispatchDriver
28321>>>>>>>>>        Variant retVal
28321>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28322>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
28323>>>>>>>>>        Function_Return retVal
28324>>>>>>>>>    End_Function
28325>>>>>>>>>
28325>>>>>>>>>    Function ComIndex Returns Integer
28327>>>>>>>>>        Handle hDispatchDriver
28327>>>>>>>>>        Integer retVal
28327>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28328>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
28329>>>>>>>>>        Function_Return retVal
28330>>>>>>>>>    End_Function
28331>>>>>>>>>
28331>>>>>>>>>    Function ComType Returns XTPControlType
28333>>>>>>>>>        Handle hDispatchDriver
28333>>>>>>>>>        XTPControlType retVal
28333>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28334>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
28335>>>>>>>>>        Function_Return retVal
28336>>>>>>>>>    End_Function
28337>>>>>>>>>
28337>>>>>>>>>    Procedure ComDelete
28339>>>>>>>>>        Handle hDispatchDriver
28339>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28340>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
28341>>>>>>>>>    End_Procedure
28342>>>>>>>>>
28342>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
28344>>>>>>>>>        Handle hDispatchDriver
28344>>>>>>>>>        Variant retVal
28344>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28345>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28346>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
28347>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
28348>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
28349>>>>>>>>>        Function_Return retVal
28350>>>>>>>>>    End_Function
28351>>>>>>>>>
28351>>>>>>>>>    Procedure ComSetFocus
28353>>>>>>>>>        Handle hDispatchDriver
28353>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28354>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
28355>>>>>>>>>    End_Procedure
28356>>>>>>>>>
28356>>>>>>>>>    Procedure ComExecute
28358>>>>>>>>>        Handle hDispatchDriver
28358>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28359>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
28360>>>>>>>>>    End_Procedure
28361>>>>>>>>>
28361>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
28363>>>>>>>>>        Handle hDispatchDriver
28363>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28364>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
28365>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
28366>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
28367>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
28368>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
28369>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
28370>>>>>>>>>    End_Procedure
28371>>>>>>>>>
28371>>>>>>>>>    Function ComRibbonGroup Returns Variant
28373>>>>>>>>>        Handle hDispatchDriver
28373>>>>>>>>>        Variant retVal
28373>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28374>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
28375>>>>>>>>>        Function_Return retVal
28376>>>>>>>>>    End_Function
28377>>>>>>>>>
28377>>>>>>>>>    Procedure ComReset
28379>>>>>>>>>        Handle hDispatchDriver
28379>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28380>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
28381>>>>>>>>>    End_Procedure
28382>>>>>>>>>
28382>>>>>>>>>    Function ComTop Returns Integer
28384>>>>>>>>>        Handle hDispatchDriver
28384>>>>>>>>>        Integer retVal
28384>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28385>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
28386>>>>>>>>>        Function_Return retVal
28387>>>>>>>>>    End_Function
28388>>>>>>>>>
28388>>>>>>>>>    Function ComLeft Returns Integer
28390>>>>>>>>>        Handle hDispatchDriver
28390>>>>>>>>>        Integer retVal
28390>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28391>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
28392>>>>>>>>>        Function_Return retVal
28393>>>>>>>>>    End_Function
28394>>>>>>>>>
28394>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
28396>>>>>>>>>        Handle hDispatchDriver
28396>>>>>>>>>        Variant retVal
28396>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28397>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
28398>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
28399>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
28400>>>>>>>>>        Function_Return retVal
28401>>>>>>>>>    End_Function
28402>>>>>>>>>
28402>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
28404>>>>>>>>>        Handle hDispatchDriver
28404>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28405>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28406>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
28407>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
28408>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
28409>>>>>>>>>    End_Procedure
28410>>>>>>>>>End_Class
28411>>>>>>>>>
28411>>>>>>>>>// CLSID: {C0DE2200-939E-46A8-B81A-507496C30A68}
28411>>>>>>>>>Class cCJCommandBarScrollBar is a cComAutomationObject
28412>>>>>>>>>
28412>>>>>>>>>    Function ComChecked Returns Boolean
28414>>>>>>>>>        Boolean retVal
28414>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
28415>>>>>>>>>        Function_Return retVal
28416>>>>>>>>>    End_Function
28417>>>>>>>>>
28417>>>>>>>>>    Procedure Set ComChecked Boolean value
28419>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
28420>>>>>>>>>    End_Procedure
28421>>>>>>>>>
28421>>>>>>>>>    Function ComBeginGroup Returns Boolean
28423>>>>>>>>>        Boolean retVal
28423>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
28424>>>>>>>>>        Function_Return retVal
28425>>>>>>>>>    End_Function
28426>>>>>>>>>
28426>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
28428>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
28429>>>>>>>>>    End_Procedure
28430>>>>>>>>>
28430>>>>>>>>>    Function ComCaption Returns String
28432>>>>>>>>>        String retVal
28432>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
28433>>>>>>>>>        Function_Return retVal
28434>>>>>>>>>    End_Function
28435>>>>>>>>>
28435>>>>>>>>>    Procedure Set ComCaption String value
28437>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
28438>>>>>>>>>    End_Procedure
28439>>>>>>>>>
28439>>>>>>>>>    Function ComDescriptionText Returns String
28441>>>>>>>>>        String retVal
28441>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
28442>>>>>>>>>        Function_Return retVal
28443>>>>>>>>>    End_Function
28444>>>>>>>>>
28444>>>>>>>>>    Procedure Set ComDescriptionText String value
28446>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
28447>>>>>>>>>    End_Procedure
28448>>>>>>>>>
28448>>>>>>>>>    Function ComId Returns Integer
28450>>>>>>>>>        Integer retVal
28450>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
28451>>>>>>>>>        Function_Return retVal
28452>>>>>>>>>    End_Function
28453>>>>>>>>>
28453>>>>>>>>>    Procedure Set ComId Integer value
28455>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
28456>>>>>>>>>    End_Procedure
28457>>>>>>>>>
28457>>>>>>>>>    Function ComParameter Returns String
28459>>>>>>>>>        String retVal
28459>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
28460>>>>>>>>>        Function_Return retVal
28461>>>>>>>>>    End_Function
28462>>>>>>>>>
28462>>>>>>>>>    Procedure Set ComParameter String value
28464>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
28465>>>>>>>>>    End_Procedure
28466>>>>>>>>>
28466>>>>>>>>>    Function ComShortcutText Returns String
28468>>>>>>>>>        String retVal
28468>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
28469>>>>>>>>>        Function_Return retVal
28470>>>>>>>>>    End_Function
28471>>>>>>>>>
28471>>>>>>>>>    Procedure Set ComShortcutText String value
28473>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
28474>>>>>>>>>    End_Procedure
28475>>>>>>>>>
28475>>>>>>>>>    Function ComCustomShortcutText Returns String
28477>>>>>>>>>        String retVal
28477>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
28478>>>>>>>>>        Function_Return retVal
28479>>>>>>>>>    End_Function
28480>>>>>>>>>
28480>>>>>>>>>    Procedure Set ComCustomShortcutText String value
28482>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
28483>>>>>>>>>    End_Procedure
28484>>>>>>>>>
28484>>>>>>>>>    Function ComTooltipText Returns String
28486>>>>>>>>>        String retVal
28486>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
28487>>>>>>>>>        Function_Return retVal
28488>>>>>>>>>    End_Function
28489>>>>>>>>>
28489>>>>>>>>>    Procedure Set ComTooltipText String value
28491>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
28492>>>>>>>>>    End_Procedure
28493>>>>>>>>>
28493>>>>>>>>>    Function ComVisible Returns Boolean
28495>>>>>>>>>        Boolean retVal
28495>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
28496>>>>>>>>>        Function_Return retVal
28497>>>>>>>>>    End_Function
28498>>>>>>>>>
28498>>>>>>>>>    Procedure Set ComVisible Boolean value
28500>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
28501>>>>>>>>>    End_Procedure
28502>>>>>>>>>
28502>>>>>>>>>    Function ComEnabled Returns Boolean
28504>>>>>>>>>        Boolean retVal
28504>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
28505>>>>>>>>>        Function_Return retVal
28506>>>>>>>>>    End_Function
28507>>>>>>>>>
28507>>>>>>>>>    Procedure Set ComEnabled Boolean value
28509>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
28510>>>>>>>>>    End_Procedure
28511>>>>>>>>>
28511>>>>>>>>>    Function ComIconId Returns Integer
28513>>>>>>>>>        Integer retVal
28513>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
28514>>>>>>>>>        Function_Return retVal
28515>>>>>>>>>    End_Function
28516>>>>>>>>>
28516>>>>>>>>>    Procedure Set ComIconId Integer value
28518>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
28519>>>>>>>>>    End_Procedure
28520>>>>>>>>>
28520>>>>>>>>>    Function ComDefaultItem Returns Boolean
28522>>>>>>>>>        Boolean retVal
28522>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
28523>>>>>>>>>        Function_Return retVal
28524>>>>>>>>>    End_Function
28525>>>>>>>>>
28525>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
28527>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
28528>>>>>>>>>    End_Procedure
28529>>>>>>>>>
28529>>>>>>>>>    Function ComFlags Returns XTPControlFlags
28531>>>>>>>>>        XTPControlFlags retVal
28531>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
28532>>>>>>>>>        Function_Return retVal
28533>>>>>>>>>    End_Function
28534>>>>>>>>>
28534>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
28536>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
28537>>>>>>>>>    End_Procedure
28538>>>>>>>>>
28538>>>>>>>>>    Function ComCategory Returns String
28540>>>>>>>>>        String retVal
28540>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
28541>>>>>>>>>        Function_Return retVal
28542>>>>>>>>>    End_Function
28543>>>>>>>>>
28543>>>>>>>>>    Procedure Set ComCategory String value
28545>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
28546>>>>>>>>>    End_Procedure
28547>>>>>>>>>
28547>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
28549>>>>>>>>>        XTPControlHideFlags retVal
28549>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
28550>>>>>>>>>        Function_Return retVal
28551>>>>>>>>>    End_Function
28552>>>>>>>>>
28552>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
28554>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
28555>>>>>>>>>    End_Procedure
28556>>>>>>>>>
28556>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
28558>>>>>>>>>        Boolean retVal
28558>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
28559>>>>>>>>>        Function_Return retVal
28560>>>>>>>>>    End_Function
28561>>>>>>>>>
28561>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
28563>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
28564>>>>>>>>>    End_Procedure
28565>>>>>>>>>
28565>>>>>>>>>    Function ComAction Returns Variant
28567>>>>>>>>>        Variant retVal
28567>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
28568>>>>>>>>>        Function_Return retVal
28569>>>>>>>>>    End_Function
28570>>>>>>>>>
28570>>>>>>>>>    Procedure Set ComAction Variant value
28572>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
28573>>>>>>>>>    End_Procedure
28574>>>>>>>>>
28574>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
28576>>>>>>>>>        Integer retVal
28576>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
28577>>>>>>>>>        Function_Return retVal
28578>>>>>>>>>    End_Function
28579>>>>>>>>>
28579>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
28581>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
28582>>>>>>>>>    End_Procedure
28583>>>>>>>>>
28583>>>>>>>>>    Function ComWidth Returns Integer
28585>>>>>>>>>        Integer retVal
28585>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
28586>>>>>>>>>        Function_Return retVal
28587>>>>>>>>>    End_Function
28588>>>>>>>>>
28588>>>>>>>>>    Procedure Set ComWidth Integer value
28590>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
28591>>>>>>>>>    End_Procedure
28592>>>>>>>>>
28592>>>>>>>>>    Function ComHeight Returns Integer
28594>>>>>>>>>        Integer retVal
28594>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
28595>>>>>>>>>        Function_Return retVal
28596>>>>>>>>>    End_Function
28597>>>>>>>>>
28597>>>>>>>>>    Procedure Set ComHeight Integer value
28599>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
28600>>>>>>>>>    End_Procedure
28601>>>>>>>>>
28601>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
28603>>>>>>>>>        XTPButtonStyle retVal
28603>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
28604>>>>>>>>>        Function_Return retVal
28605>>>>>>>>>    End_Function
28606>>>>>>>>>
28606>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
28608>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
28609>>>>>>>>>    End_Procedure
28610>>>>>>>>>
28610>>>>>>>>>    Function ComKeyboardTip Returns String
28612>>>>>>>>>        String retVal
28612>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
28613>>>>>>>>>        Function_Return retVal
28614>>>>>>>>>    End_Function
28615>>>>>>>>>
28615>>>>>>>>>    Procedure Set ComKeyboardTip String value
28617>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
28618>>>>>>>>>    End_Procedure
28619>>>>>>>>>
28619>>>>>>>>>    Function ComPos Returns Integer
28621>>>>>>>>>        Integer retVal
28621>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
28622>>>>>>>>>        Function_Return retVal
28623>>>>>>>>>    End_Function
28624>>>>>>>>>
28624>>>>>>>>>    Procedure Set ComPos Integer value
28626>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
28627>>>>>>>>>    End_Procedure
28628>>>>>>>>>
28628>>>>>>>>>    Function ComMin Returns Integer
28630>>>>>>>>>        Integer retVal
28630>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to retVal
28631>>>>>>>>>        Function_Return retVal
28632>>>>>>>>>    End_Function
28633>>>>>>>>>
28633>>>>>>>>>    Procedure Set ComMin Integer value
28635>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to value
28636>>>>>>>>>    End_Procedure
28637>>>>>>>>>
28637>>>>>>>>>    Function ComMax Returns Integer
28639>>>>>>>>>        Integer retVal
28639>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to retVal
28640>>>>>>>>>        Function_Return retVal
28641>>>>>>>>>    End_Function
28642>>>>>>>>>
28642>>>>>>>>>    Procedure Set ComMax Integer value
28644>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to value
28645>>>>>>>>>    End_Procedure
28646>>>>>>>>>
28646>>>>>>>>>    Function ComScrollBarStyle Returns XTPScrollBarStyle
28648>>>>>>>>>        XTPScrollBarStyle retVal
28648>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 204 OLE_VT_I4 to retVal
28649>>>>>>>>>        Function_Return retVal
28650>>>>>>>>>    End_Function
28651>>>>>>>>>
28651>>>>>>>>>    Procedure Set ComScrollBarStyle XTPScrollBarStyle value
28653>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 204 OLE_VT_I4 to value
28654>>>>>>>>>    End_Procedure
28655>>>>>>>>>
28655>>>>>>>>>    Function ComControls Returns Variant
28657>>>>>>>>>        Handle hDispatchDriver
28657>>>>>>>>>        Variant retVal
28657>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28658>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
28659>>>>>>>>>        Function_Return retVal
28660>>>>>>>>>    End_Function
28661>>>>>>>>>
28661>>>>>>>>>    Function ComParent Returns Variant
28663>>>>>>>>>        Handle hDispatchDriver
28663>>>>>>>>>        Variant retVal
28663>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28664>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
28665>>>>>>>>>        Function_Return retVal
28666>>>>>>>>>    End_Function
28667>>>>>>>>>
28667>>>>>>>>>    Function ComIndex Returns Integer
28669>>>>>>>>>        Handle hDispatchDriver
28669>>>>>>>>>        Integer retVal
28669>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28670>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
28671>>>>>>>>>        Function_Return retVal
28672>>>>>>>>>    End_Function
28673>>>>>>>>>
28673>>>>>>>>>    Function ComType Returns XTPControlType
28675>>>>>>>>>        Handle hDispatchDriver
28675>>>>>>>>>        XTPControlType retVal
28675>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28676>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
28677>>>>>>>>>        Function_Return retVal
28678>>>>>>>>>    End_Function
28679>>>>>>>>>
28679>>>>>>>>>    Procedure ComDelete
28681>>>>>>>>>        Handle hDispatchDriver
28681>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28682>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
28683>>>>>>>>>    End_Procedure
28684>>>>>>>>>
28684>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
28686>>>>>>>>>        Handle hDispatchDriver
28686>>>>>>>>>        Variant retVal
28686>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28687>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28688>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
28689>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
28690>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
28691>>>>>>>>>        Function_Return retVal
28692>>>>>>>>>    End_Function
28693>>>>>>>>>
28693>>>>>>>>>    Procedure ComSetFocus
28695>>>>>>>>>        Handle hDispatchDriver
28695>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28696>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
28697>>>>>>>>>    End_Procedure
28698>>>>>>>>>
28698>>>>>>>>>    Procedure ComExecute
28700>>>>>>>>>        Handle hDispatchDriver
28700>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28701>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
28702>>>>>>>>>    End_Procedure
28703>>>>>>>>>
28703>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
28705>>>>>>>>>        Handle hDispatchDriver
28705>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28706>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
28707>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
28708>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
28709>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
28710>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
28711>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
28712>>>>>>>>>    End_Procedure
28713>>>>>>>>>
28713>>>>>>>>>    Function ComRibbonGroup Returns Variant
28715>>>>>>>>>        Handle hDispatchDriver
28715>>>>>>>>>        Variant retVal
28715>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28716>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
28717>>>>>>>>>        Function_Return retVal
28718>>>>>>>>>    End_Function
28719>>>>>>>>>
28719>>>>>>>>>    Procedure ComReset
28721>>>>>>>>>        Handle hDispatchDriver
28721>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28722>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
28723>>>>>>>>>    End_Procedure
28724>>>>>>>>>
28724>>>>>>>>>    Function ComTop Returns Integer
28726>>>>>>>>>        Handle hDispatchDriver
28726>>>>>>>>>        Integer retVal
28726>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28727>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
28728>>>>>>>>>        Function_Return retVal
28729>>>>>>>>>    End_Function
28730>>>>>>>>>
28730>>>>>>>>>    Function ComLeft Returns Integer
28732>>>>>>>>>        Handle hDispatchDriver
28732>>>>>>>>>        Integer retVal
28732>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28733>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
28734>>>>>>>>>        Function_Return retVal
28735>>>>>>>>>    End_Function
28736>>>>>>>>>
28736>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
28738>>>>>>>>>        Handle hDispatchDriver
28738>>>>>>>>>        Variant retVal
28738>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28739>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
28740>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
28741>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
28742>>>>>>>>>        Function_Return retVal
28743>>>>>>>>>    End_Function
28744>>>>>>>>>
28744>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
28746>>>>>>>>>        Handle hDispatchDriver
28746>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28747>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28748>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
28749>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
28750>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
28751>>>>>>>>>    End_Procedure
28752>>>>>>>>>End_Class
28753>>>>>>>>>
28753>>>>>>>>>// CLSID: {C0DE2200-C46D-4A11-B782-A5A3684189A4}
28753>>>>>>>>>Class cCJCommandBarPopupColor is a cComAutomationObject
28754>>>>>>>>>
28754>>>>>>>>>    Function ComChecked Returns Boolean
28756>>>>>>>>>        Boolean retVal
28756>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
28757>>>>>>>>>        Function_Return retVal
28758>>>>>>>>>    End_Function
28759>>>>>>>>>
28759>>>>>>>>>    Procedure Set ComChecked Boolean value
28761>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
28762>>>>>>>>>    End_Procedure
28763>>>>>>>>>
28763>>>>>>>>>    Function ComBeginGroup Returns Boolean
28765>>>>>>>>>        Boolean retVal
28765>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
28766>>>>>>>>>        Function_Return retVal
28767>>>>>>>>>    End_Function
28768>>>>>>>>>
28768>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
28770>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
28771>>>>>>>>>    End_Procedure
28772>>>>>>>>>
28772>>>>>>>>>    Function ComCaption Returns String
28774>>>>>>>>>        String retVal
28774>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
28775>>>>>>>>>        Function_Return retVal
28776>>>>>>>>>    End_Function
28777>>>>>>>>>
28777>>>>>>>>>    Procedure Set ComCaption String value
28779>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
28780>>>>>>>>>    End_Procedure
28781>>>>>>>>>
28781>>>>>>>>>    Function ComDescriptionText Returns String
28783>>>>>>>>>        String retVal
28783>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
28784>>>>>>>>>        Function_Return retVal
28785>>>>>>>>>    End_Function
28786>>>>>>>>>
28786>>>>>>>>>    Procedure Set ComDescriptionText String value
28788>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
28789>>>>>>>>>    End_Procedure
28790>>>>>>>>>
28790>>>>>>>>>    Function ComId Returns Integer
28792>>>>>>>>>        Integer retVal
28792>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
28793>>>>>>>>>        Function_Return retVal
28794>>>>>>>>>    End_Function
28795>>>>>>>>>
28795>>>>>>>>>    Procedure Set ComId Integer value
28797>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
28798>>>>>>>>>    End_Procedure
28799>>>>>>>>>
28799>>>>>>>>>    Function ComParameter Returns String
28801>>>>>>>>>        String retVal
28801>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
28802>>>>>>>>>        Function_Return retVal
28803>>>>>>>>>    End_Function
28804>>>>>>>>>
28804>>>>>>>>>    Procedure Set ComParameter String value
28806>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
28807>>>>>>>>>    End_Procedure
28808>>>>>>>>>
28808>>>>>>>>>    Function ComShortcutText Returns String
28810>>>>>>>>>        String retVal
28810>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
28811>>>>>>>>>        Function_Return retVal
28812>>>>>>>>>    End_Function
28813>>>>>>>>>
28813>>>>>>>>>    Procedure Set ComShortcutText String value
28815>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
28816>>>>>>>>>    End_Procedure
28817>>>>>>>>>
28817>>>>>>>>>    Function ComCustomShortcutText Returns String
28819>>>>>>>>>        String retVal
28819>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
28820>>>>>>>>>        Function_Return retVal
28821>>>>>>>>>    End_Function
28822>>>>>>>>>
28822>>>>>>>>>    Procedure Set ComCustomShortcutText String value
28824>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
28825>>>>>>>>>    End_Procedure
28826>>>>>>>>>
28826>>>>>>>>>    Function ComTooltipText Returns String
28828>>>>>>>>>        String retVal
28828>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
28829>>>>>>>>>        Function_Return retVal
28830>>>>>>>>>    End_Function
28831>>>>>>>>>
28831>>>>>>>>>    Procedure Set ComTooltipText String value
28833>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
28834>>>>>>>>>    End_Procedure
28835>>>>>>>>>
28835>>>>>>>>>    Function ComVisible Returns Boolean
28837>>>>>>>>>        Boolean retVal
28837>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
28838>>>>>>>>>        Function_Return retVal
28839>>>>>>>>>    End_Function
28840>>>>>>>>>
28840>>>>>>>>>    Procedure Set ComVisible Boolean value
28842>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
28843>>>>>>>>>    End_Procedure
28844>>>>>>>>>
28844>>>>>>>>>    Function ComEnabled Returns Boolean
28846>>>>>>>>>        Boolean retVal
28846>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
28847>>>>>>>>>        Function_Return retVal
28848>>>>>>>>>    End_Function
28849>>>>>>>>>
28849>>>>>>>>>    Procedure Set ComEnabled Boolean value
28851>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
28852>>>>>>>>>    End_Procedure
28853>>>>>>>>>
28853>>>>>>>>>    Function ComIconId Returns Integer
28855>>>>>>>>>        Integer retVal
28855>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
28856>>>>>>>>>        Function_Return retVal
28857>>>>>>>>>    End_Function
28858>>>>>>>>>
28858>>>>>>>>>    Procedure Set ComIconId Integer value
28860>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
28861>>>>>>>>>    End_Procedure
28862>>>>>>>>>
28862>>>>>>>>>    Function ComDefaultItem Returns Boolean
28864>>>>>>>>>        Boolean retVal
28864>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
28865>>>>>>>>>        Function_Return retVal
28866>>>>>>>>>    End_Function
28867>>>>>>>>>
28867>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
28869>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
28870>>>>>>>>>    End_Procedure
28871>>>>>>>>>
28871>>>>>>>>>    Function ComFlags Returns XTPControlFlags
28873>>>>>>>>>        XTPControlFlags retVal
28873>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
28874>>>>>>>>>        Function_Return retVal
28875>>>>>>>>>    End_Function
28876>>>>>>>>>
28876>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
28878>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
28879>>>>>>>>>    End_Procedure
28880>>>>>>>>>
28880>>>>>>>>>    Function ComCategory Returns String
28882>>>>>>>>>        String retVal
28882>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
28883>>>>>>>>>        Function_Return retVal
28884>>>>>>>>>    End_Function
28885>>>>>>>>>
28885>>>>>>>>>    Procedure Set ComCategory String value
28887>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
28888>>>>>>>>>    End_Procedure
28889>>>>>>>>>
28889>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
28891>>>>>>>>>        XTPControlHideFlags retVal
28891>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
28892>>>>>>>>>        Function_Return retVal
28893>>>>>>>>>    End_Function
28894>>>>>>>>>
28894>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
28896>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
28897>>>>>>>>>    End_Procedure
28898>>>>>>>>>
28898>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
28900>>>>>>>>>        Boolean retVal
28900>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
28901>>>>>>>>>        Function_Return retVal
28902>>>>>>>>>    End_Function
28903>>>>>>>>>
28903>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
28905>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
28906>>>>>>>>>    End_Procedure
28907>>>>>>>>>
28907>>>>>>>>>    Function ComAction Returns Variant
28909>>>>>>>>>        Variant retVal
28909>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
28910>>>>>>>>>        Function_Return retVal
28911>>>>>>>>>    End_Function
28912>>>>>>>>>
28912>>>>>>>>>    Procedure Set ComAction Variant value
28914>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
28915>>>>>>>>>    End_Procedure
28916>>>>>>>>>
28916>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
28918>>>>>>>>>        Integer retVal
28918>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
28919>>>>>>>>>        Function_Return retVal
28920>>>>>>>>>    End_Function
28921>>>>>>>>>
28921>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
28923>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
28924>>>>>>>>>    End_Procedure
28925>>>>>>>>>
28925>>>>>>>>>    Function ComWidth Returns Integer
28927>>>>>>>>>        Integer retVal
28927>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
28928>>>>>>>>>        Function_Return retVal
28929>>>>>>>>>    End_Function
28930>>>>>>>>>
28930>>>>>>>>>    Procedure Set ComWidth Integer value
28932>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
28933>>>>>>>>>    End_Procedure
28934>>>>>>>>>
28934>>>>>>>>>    Function ComHeight Returns Integer
28936>>>>>>>>>        Integer retVal
28936>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
28937>>>>>>>>>        Function_Return retVal
28938>>>>>>>>>    End_Function
28939>>>>>>>>>
28939>>>>>>>>>    Procedure Set ComHeight Integer value
28941>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
28942>>>>>>>>>    End_Procedure
28943>>>>>>>>>
28943>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
28945>>>>>>>>>        XTPButtonStyle retVal
28945>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
28946>>>>>>>>>        Function_Return retVal
28947>>>>>>>>>    End_Function
28948>>>>>>>>>
28948>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
28950>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
28951>>>>>>>>>    End_Procedure
28952>>>>>>>>>
28952>>>>>>>>>    Function ComKeyboardTip Returns String
28954>>>>>>>>>        String retVal
28954>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
28955>>>>>>>>>        Function_Return retVal
28956>>>>>>>>>    End_Function
28957>>>>>>>>>
28957>>>>>>>>>    Procedure Set ComKeyboardTip String value
28959>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
28960>>>>>>>>>    End_Procedure
28961>>>>>>>>>
28961>>>>>>>>>    Function ComColor Returns OLE_COLOR
28963>>>>>>>>>        OLE_COLOR retVal
28963>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
28964>>>>>>>>>        Function_Return retVal
28965>>>>>>>>>    End_Function
28966>>>>>>>>>
28966>>>>>>>>>    Procedure Set ComColor OLE_COLOR value
28968>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
28969>>>>>>>>>    End_Procedure
28970>>>>>>>>>
28970>>>>>>>>>    Function ComCommandBar Returns Variant
28972>>>>>>>>>        Variant retVal
28972>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
28973>>>>>>>>>        Function_Return retVal
28974>>>>>>>>>    End_Function
28975>>>>>>>>>
28975>>>>>>>>>    Procedure Set ComCommandBar Variant value
28977>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
28978>>>>>>>>>    End_Procedure
28979>>>>>>>>>
28979>>>>>>>>>    Function ComControls Returns Variant
28981>>>>>>>>>        Handle hDispatchDriver
28981>>>>>>>>>        Variant retVal
28981>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28982>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
28983>>>>>>>>>        Function_Return retVal
28984>>>>>>>>>    End_Function
28985>>>>>>>>>
28985>>>>>>>>>    Function ComParent Returns Variant
28987>>>>>>>>>        Handle hDispatchDriver
28987>>>>>>>>>        Variant retVal
28987>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28988>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
28989>>>>>>>>>        Function_Return retVal
28990>>>>>>>>>    End_Function
28991>>>>>>>>>
28991>>>>>>>>>    Function ComIndex Returns Integer
28993>>>>>>>>>        Handle hDispatchDriver
28993>>>>>>>>>        Integer retVal
28993>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28994>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
28995>>>>>>>>>        Function_Return retVal
28996>>>>>>>>>    End_Function
28997>>>>>>>>>
28997>>>>>>>>>    Function ComType Returns XTPControlType
28999>>>>>>>>>        Handle hDispatchDriver
28999>>>>>>>>>        XTPControlType retVal
28999>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29000>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
29001>>>>>>>>>        Function_Return retVal
29002>>>>>>>>>    End_Function
29003>>>>>>>>>
29003>>>>>>>>>    Procedure ComDelete
29005>>>>>>>>>        Handle hDispatchDriver
29005>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29006>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
29007>>>>>>>>>    End_Procedure
29008>>>>>>>>>
29008>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
29010>>>>>>>>>        Handle hDispatchDriver
29010>>>>>>>>>        Variant retVal
29010>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29011>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
29012>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
29013>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
29014>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
29015>>>>>>>>>        Function_Return retVal
29016>>>>>>>>>    End_Function
29017>>>>>>>>>
29017>>>>>>>>>    Procedure ComSetFocus
29019>>>>>>>>>        Handle hDispatchDriver
29019>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29020>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
29021>>>>>>>>>    End_Procedure
29022>>>>>>>>>
29022>>>>>>>>>    Procedure ComExecute
29024>>>>>>>>>        Handle hDispatchDriver
29024>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29025>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
29026>>>>>>>>>    End_Procedure
29027>>>>>>>>>
29027>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
29029>>>>>>>>>        Handle hDispatchDriver
29029>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29030>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
29031>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
29032>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
29033>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
29034>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
29035>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
29036>>>>>>>>>    End_Procedure
29037>>>>>>>>>
29037>>>>>>>>>    Function ComRibbonGroup Returns Variant
29039>>>>>>>>>        Handle hDispatchDriver
29039>>>>>>>>>        Variant retVal
29039>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29040>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
29041>>>>>>>>>        Function_Return retVal
29042>>>>>>>>>    End_Function
29043>>>>>>>>>
29043>>>>>>>>>    Procedure ComReset
29045>>>>>>>>>        Handle hDispatchDriver
29045>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29046>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
29047>>>>>>>>>    End_Procedure
29048>>>>>>>>>
29048>>>>>>>>>    Function ComTop Returns Integer
29050>>>>>>>>>        Handle hDispatchDriver
29050>>>>>>>>>        Integer retVal
29050>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29051>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
29052>>>>>>>>>        Function_Return retVal
29053>>>>>>>>>    End_Function
29054>>>>>>>>>
29054>>>>>>>>>    Function ComLeft Returns Integer
29056>>>>>>>>>        Handle hDispatchDriver
29056>>>>>>>>>        Integer retVal
29056>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29057>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
29058>>>>>>>>>        Function_Return retVal
29059>>>>>>>>>    End_Function
29060>>>>>>>>>
29060>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
29062>>>>>>>>>        Handle hDispatchDriver
29062>>>>>>>>>        Variant retVal
29062>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29063>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
29064>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
29065>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
29066>>>>>>>>>        Function_Return retVal
29067>>>>>>>>>    End_Function
29068>>>>>>>>>
29068>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
29070>>>>>>>>>        Handle hDispatchDriver
29070>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29071>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
29072>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
29073>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
29074>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
29075>>>>>>>>>    End_Procedure
29076>>>>>>>>>End_Class
29077>>>>>>>>>
29077>>>>>>>>>// CLSID: {C0DE2200-0835-494F-8FFB-1516C2D7D943}
29077>>>>>>>>>Class cCJCommandBarControlColorSelector is a cComAutomationObject
29078>>>>>>>>>
29078>>>>>>>>>    Function ComChecked Returns Boolean
29080>>>>>>>>>        Boolean retVal
29080>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
29081>>>>>>>>>        Function_Return retVal
29082>>>>>>>>>    End_Function
29083>>>>>>>>>
29083>>>>>>>>>    Procedure Set ComChecked Boolean value
29085>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
29086>>>>>>>>>    End_Procedure
29087>>>>>>>>>
29087>>>>>>>>>    Function ComBeginGroup Returns Boolean
29089>>>>>>>>>        Boolean retVal
29089>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
29090>>>>>>>>>        Function_Return retVal
29091>>>>>>>>>    End_Function
29092>>>>>>>>>
29092>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
29094>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
29095>>>>>>>>>    End_Procedure
29096>>>>>>>>>
29096>>>>>>>>>    Function ComCaption Returns String
29098>>>>>>>>>        String retVal
29098>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
29099>>>>>>>>>        Function_Return retVal
29100>>>>>>>>>    End_Function
29101>>>>>>>>>
29101>>>>>>>>>    Procedure Set ComCaption String value
29103>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
29104>>>>>>>>>    End_Procedure
29105>>>>>>>>>
29105>>>>>>>>>    Function ComDescriptionText Returns String
29107>>>>>>>>>        String retVal
29107>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
29108>>>>>>>>>        Function_Return retVal
29109>>>>>>>>>    End_Function
29110>>>>>>>>>
29110>>>>>>>>>    Procedure Set ComDescriptionText String value
29112>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
29113>>>>>>>>>    End_Procedure
29114>>>>>>>>>
29114>>>>>>>>>    Function ComId Returns Integer
29116>>>>>>>>>        Integer retVal
29116>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
29117>>>>>>>>>        Function_Return retVal
29118>>>>>>>>>    End_Function
29119>>>>>>>>>
29119>>>>>>>>>    Procedure Set ComId Integer value
29121>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
29122>>>>>>>>>    End_Procedure
29123>>>>>>>>>
29123>>>>>>>>>    Function ComParameter Returns String
29125>>>>>>>>>        String retVal
29125>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
29126>>>>>>>>>        Function_Return retVal
29127>>>>>>>>>    End_Function
29128>>>>>>>>>
29128>>>>>>>>>    Procedure Set ComParameter String value
29130>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
29131>>>>>>>>>    End_Procedure
29132>>>>>>>>>
29132>>>>>>>>>    Function ComShortcutText Returns String
29134>>>>>>>>>        String retVal
29134>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
29135>>>>>>>>>        Function_Return retVal
29136>>>>>>>>>    End_Function
29137>>>>>>>>>
29137>>>>>>>>>    Procedure Set ComShortcutText String value
29139>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
29140>>>>>>>>>    End_Procedure
29141>>>>>>>>>
29141>>>>>>>>>    Function ComCustomShortcutText Returns String
29143>>>>>>>>>        String retVal
29143>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
29144>>>>>>>>>        Function_Return retVal
29145>>>>>>>>>    End_Function
29146>>>>>>>>>
29146>>>>>>>>>    Procedure Set ComCustomShortcutText String value
29148>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
29149>>>>>>>>>    End_Procedure
29150>>>>>>>>>
29150>>>>>>>>>    Function ComTooltipText Returns String
29152>>>>>>>>>        String retVal
29152>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
29153>>>>>>>>>        Function_Return retVal
29154>>>>>>>>>    End_Function
29155>>>>>>>>>
29155>>>>>>>>>    Procedure Set ComTooltipText String value
29157>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
29158>>>>>>>>>    End_Procedure
29159>>>>>>>>>
29159>>>>>>>>>    Function ComVisible Returns Boolean
29161>>>>>>>>>        Boolean retVal
29161>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
29162>>>>>>>>>        Function_Return retVal
29163>>>>>>>>>    End_Function
29164>>>>>>>>>
29164>>>>>>>>>    Procedure Set ComVisible Boolean value
29166>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
29167>>>>>>>>>    End_Procedure
29168>>>>>>>>>
29168>>>>>>>>>    Function ComEnabled Returns Boolean
29170>>>>>>>>>        Boolean retVal
29170>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
29171>>>>>>>>>        Function_Return retVal
29172>>>>>>>>>    End_Function
29173>>>>>>>>>
29173>>>>>>>>>    Procedure Set ComEnabled Boolean value
29175>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
29176>>>>>>>>>    End_Procedure
29177>>>>>>>>>
29177>>>>>>>>>    Function ComIconId Returns Integer
29179>>>>>>>>>        Integer retVal
29179>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
29180>>>>>>>>>        Function_Return retVal
29181>>>>>>>>>    End_Function
29182>>>>>>>>>
29182>>>>>>>>>    Procedure Set ComIconId Integer value
29184>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
29185>>>>>>>>>    End_Procedure
29186>>>>>>>>>
29186>>>>>>>>>    Function ComDefaultItem Returns Boolean
29188>>>>>>>>>        Boolean retVal
29188>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
29189>>>>>>>>>        Function_Return retVal
29190>>>>>>>>>    End_Function
29191>>>>>>>>>
29191>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
29193>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
29194>>>>>>>>>    End_Procedure
29195>>>>>>>>>
29195>>>>>>>>>    Function ComFlags Returns XTPControlFlags
29197>>>>>>>>>        XTPControlFlags retVal
29197>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
29198>>>>>>>>>        Function_Return retVal
29199>>>>>>>>>    End_Function
29200>>>>>>>>>
29200>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
29202>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
29203>>>>>>>>>    End_Procedure
29204>>>>>>>>>
29204>>>>>>>>>    Function ComCategory Returns String
29206>>>>>>>>>        String retVal
29206>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
29207>>>>>>>>>        Function_Return retVal
29208>>>>>>>>>    End_Function
29209>>>>>>>>>
29209>>>>>>>>>    Procedure Set ComCategory String value
29211>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
29212>>>>>>>>>    End_Procedure
29213>>>>>>>>>
29213>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
29215>>>>>>>>>        XTPControlHideFlags retVal
29215>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
29216>>>>>>>>>        Function_Return retVal
29217>>>>>>>>>    End_Function
29218>>>>>>>>>
29218>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
29220>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
29221>>>>>>>>>    End_Procedure
29222>>>>>>>>>
29222>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
29224>>>>>>>>>        Boolean retVal
29224>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
29225>>>>>>>>>        Function_Return retVal
29226>>>>>>>>>    End_Function
29227>>>>>>>>>
29227>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
29229>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
29230>>>>>>>>>    End_Procedure
29231>>>>>>>>>
29231>>>>>>>>>    Function ComAction Returns Variant
29233>>>>>>>>>        Variant retVal
29233>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
29234>>>>>>>>>        Function_Return retVal
29235>>>>>>>>>    End_Function
29236>>>>>>>>>
29236>>>>>>>>>    Procedure Set ComAction Variant value
29238>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
29239>>>>>>>>>    End_Procedure
29240>>>>>>>>>
29240>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
29242>>>>>>>>>        Integer retVal
29242>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
29243>>>>>>>>>        Function_Return retVal
29244>>>>>>>>>    End_Function
29245>>>>>>>>>
29245>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
29247>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
29248>>>>>>>>>    End_Procedure
29249>>>>>>>>>
29249>>>>>>>>>    Function ComWidth Returns Integer
29251>>>>>>>>>        Integer retVal
29251>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
29252>>>>>>>>>        Function_Return retVal
29253>>>>>>>>>    End_Function
29254>>>>>>>>>
29254>>>>>>>>>    Procedure Set ComWidth Integer value
29256>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
29257>>>>>>>>>    End_Procedure
29258>>>>>>>>>
29258>>>>>>>>>    Function ComHeight Returns Integer
29260>>>>>>>>>        Integer retVal
29260>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
29261>>>>>>>>>        Function_Return retVal
29262>>>>>>>>>    End_Function
29263>>>>>>>>>
29263>>>>>>>>>    Procedure Set ComHeight Integer value
29265>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
29266>>>>>>>>>    End_Procedure
29267>>>>>>>>>
29267>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
29269>>>>>>>>>        XTPButtonStyle retVal
29269>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
29270>>>>>>>>>        Function_Return retVal
29271>>>>>>>>>    End_Function
29272>>>>>>>>>
29272>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
29274>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
29275>>>>>>>>>    End_Procedure
29276>>>>>>>>>
29276>>>>>>>>>    Function ComKeyboardTip Returns String
29278>>>>>>>>>        String retVal
29278>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
29279>>>>>>>>>        Function_Return retVal
29280>>>>>>>>>    End_Function
29281>>>>>>>>>
29281>>>>>>>>>    Procedure Set ComKeyboardTip String value
29283>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
29284>>>>>>>>>    End_Procedure
29285>>>>>>>>>
29285>>>>>>>>>    Function ComColor Returns OLE_COLOR
29287>>>>>>>>>        OLE_COLOR retVal
29287>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
29288>>>>>>>>>        Function_Return retVal
29289>>>>>>>>>    End_Function
29290>>>>>>>>>
29290>>>>>>>>>    Procedure Set ComColor OLE_COLOR value
29292>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
29293>>>>>>>>>    End_Procedure
29294>>>>>>>>>
29294>>>>>>>>>    Function ComControls Returns Variant
29296>>>>>>>>>        Handle hDispatchDriver
29296>>>>>>>>>        Variant retVal
29296>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29297>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
29298>>>>>>>>>        Function_Return retVal
29299>>>>>>>>>    End_Function
29300>>>>>>>>>
29300>>>>>>>>>    Function ComParent Returns Variant
29302>>>>>>>>>        Handle hDispatchDriver
29302>>>>>>>>>        Variant retVal
29302>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29303>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29304>>>>>>>>>        Function_Return retVal
29305>>>>>>>>>    End_Function
29306>>>>>>>>>
29306>>>>>>>>>    Function ComIndex Returns Integer
29308>>>>>>>>>        Handle hDispatchDriver
29308>>>>>>>>>        Integer retVal
29308>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29309>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
29310>>>>>>>>>        Function_Return retVal
29311>>>>>>>>>    End_Function
29312>>>>>>>>>
29312>>>>>>>>>    Function ComType Returns XTPControlType
29314>>>>>>>>>        Handle hDispatchDriver
29314>>>>>>>>>        XTPControlType retVal
29314>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29315>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
29316>>>>>>>>>        Function_Return retVal
29317>>>>>>>>>    End_Function
29318>>>>>>>>>
29318>>>>>>>>>    Procedure ComDelete
29320>>>>>>>>>        Handle hDispatchDriver
29320>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29321>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
29322>>>>>>>>>    End_Procedure
29323>>>>>>>>>
29323>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
29325>>>>>>>>>        Handle hDispatchDriver
29325>>>>>>>>>        Variant retVal
29325>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29326>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
29327>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
29328>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
29329>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
29330>>>>>>>>>        Function_Return retVal
29331>>>>>>>>>    End_Function
29332>>>>>>>>>
29332>>>>>>>>>    Procedure ComSetFocus
29334>>>>>>>>>        Handle hDispatchDriver
29334>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29335>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
29336>>>>>>>>>    End_Procedure
29337>>>>>>>>>
29337>>>>>>>>>    Procedure ComExecute
29339>>>>>>>>>        Handle hDispatchDriver
29339>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29340>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
29341>>>>>>>>>    End_Procedure
29342>>>>>>>>>
29342>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
29344>>>>>>>>>        Handle hDispatchDriver
29344>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29345>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
29346>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
29347>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
29348>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
29349>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
29350>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
29351>>>>>>>>>    End_Procedure
29352>>>>>>>>>
29352>>>>>>>>>    Function ComRibbonGroup Returns Variant
29354>>>>>>>>>        Handle hDispatchDriver
29354>>>>>>>>>        Variant retVal
29354>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29355>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
29356>>>>>>>>>        Function_Return retVal
29357>>>>>>>>>    End_Function
29358>>>>>>>>>
29358>>>>>>>>>    Procedure ComReset
29360>>>>>>>>>        Handle hDispatchDriver
29360>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29361>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
29362>>>>>>>>>    End_Procedure
29363>>>>>>>>>
29363>>>>>>>>>    Function ComTop Returns Integer
29365>>>>>>>>>        Handle hDispatchDriver
29365>>>>>>>>>        Integer retVal
29365>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29366>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
29367>>>>>>>>>        Function_Return retVal
29368>>>>>>>>>    End_Function
29369>>>>>>>>>
29369>>>>>>>>>    Function ComLeft Returns Integer
29371>>>>>>>>>        Handle hDispatchDriver
29371>>>>>>>>>        Integer retVal
29371>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29372>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
29373>>>>>>>>>        Function_Return retVal
29374>>>>>>>>>    End_Function
29375>>>>>>>>>
29375>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
29377>>>>>>>>>        Handle hDispatchDriver
29377>>>>>>>>>        Variant retVal
29377>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29378>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
29379>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
29380>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
29381>>>>>>>>>        Function_Return retVal
29382>>>>>>>>>    End_Function
29383>>>>>>>>>
29383>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
29385>>>>>>>>>        Handle hDispatchDriver
29385>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29386>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
29387>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
29388>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
29389>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
29390>>>>>>>>>    End_Procedure
29391>>>>>>>>>End_Class
29392>>>>>>>>>
29392>>>>>>>>>// CLSID: {C0DE2200-9D54-40A3-B626-83FB0F80B8F4}
29392>>>>>>>>>Class cCJRibbonBackstageView is a cComAutomationObject
29393>>>>>>>>>
29393>>>>>>>>>    Function ComStyle Returns XTPRibbonBackstageStyle
29395>>>>>>>>>        XTPRibbonBackstageStyle retVal
29395>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1102 OLE_VT_I4 to retVal
29396>>>>>>>>>        Function_Return retVal
29397>>>>>>>>>    End_Function
29398>>>>>>>>>
29398>>>>>>>>>    Procedure Set ComStyle XTPRibbonBackstageStyle value
29400>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1102 OLE_VT_I4 to value
29401>>>>>>>>>    End_Procedure
29402>>>>>>>>>
29402>>>>>>>>>    Function ComControls Returns Variant
29404>>>>>>>>>        Handle hDispatchDriver
29404>>>>>>>>>        Variant retVal
29404>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29405>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29406>>>>>>>>>        Function_Return retVal
29407>>>>>>>>>    End_Function
29408>>>>>>>>>
29408>>>>>>>>>    Function ComAddCommand Integer llId String llCaption Returns Variant
29410>>>>>>>>>        Handle hDispatchDriver
29410>>>>>>>>>        Variant retVal
29410>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29411>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
29412>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
29413>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
29414>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1000 OLE_VT_DISPATCH to retVal
29415>>>>>>>>>        Function_Return retVal
29416>>>>>>>>>    End_Function
29417>>>>>>>>>
29417>>>>>>>>>    Function ComAddTab Integer llId String llCaption OLE_HANDLE llControlPaneHwnd Returns Variant
29419>>>>>>>>>        Handle hDispatchDriver
29419>>>>>>>>>        Variant retVal
29419>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29420>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
29421>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
29422>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
29423>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llControlPaneHwnd
29424>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1001 OLE_VT_DISPATCH to retVal
29425>>>>>>>>>        Function_Return retVal
29426>>>>>>>>>    End_Function
29427>>>>>>>>>
29427>>>>>>>>>    Procedure ComClose
29429>>>>>>>>>        Handle hDispatchDriver
29429>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29430>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1002 OLE_VT_VOID
29431>>>>>>>>>    End_Procedure
29432>>>>>>>>>
29432>>>>>>>>>    Procedure ComSetTheme XTPVisualTheme llTheme
29434>>>>>>>>>        Handle hDispatchDriver
29434>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29435>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
29436>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTheme
29437>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1003 OLE_VT_VOID
29438>>>>>>>>>    End_Procedure
29439>>>>>>>>>
29439>>>>>>>>>    Function ComAddMenuSeparator Returns Variant
29441>>>>>>>>>        Handle hDispatchDriver
29441>>>>>>>>>        Variant retVal
29441>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29442>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1004 OLE_VT_DISPATCH to retVal
29443>>>>>>>>>        Function_Return retVal
29444>>>>>>>>>    End_Function
29445>>>>>>>>>
29445>>>>>>>>>    Function ComGetForeColor Returns OLE_COLOR
29447>>>>>>>>>        Handle hDispatchDriver
29447>>>>>>>>>        OLE_COLOR retVal
29447>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29448>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1100 OLE_VT_I4 to retVal
29449>>>>>>>>>        Function_Return retVal
29450>>>>>>>>>    End_Function
29451>>>>>>>>>
29451>>>>>>>>>    Function ComGetBackColor Returns OLE_COLOR
29453>>>>>>>>>        Handle hDispatchDriver
29453>>>>>>>>>        OLE_COLOR retVal
29453>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29454>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1101 OLE_VT_I4 to retVal
29455>>>>>>>>>        Function_Return retVal
29456>>>>>>>>>    End_Function
29457>>>>>>>>>End_Class
29458>>>>>>>>>
29458>>>>>>>>>// CLSID: {C0DE2200-2F93-41B3-B097-2DA852A25BFC}
29458>>>>>>>>>Class cCJRibbonBackstageCommand is a cComAutomationObject
29459>>>>>>>>>
29459>>>>>>>>>    Function ComCaption Returns String
29461>>>>>>>>>        String retVal
29461>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
29462>>>>>>>>>        Function_Return retVal
29463>>>>>>>>>    End_Function
29464>>>>>>>>>
29464>>>>>>>>>    Procedure Set ComCaption String value
29466>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
29467>>>>>>>>>    End_Procedure
29468>>>>>>>>>
29468>>>>>>>>>    Function ComDescriptionText Returns String
29470>>>>>>>>>        String retVal
29470>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
29471>>>>>>>>>        Function_Return retVal
29472>>>>>>>>>    End_Function
29473>>>>>>>>>
29473>>>>>>>>>    Procedure Set ComDescriptionText String value
29475>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
29476>>>>>>>>>    End_Procedure
29477>>>>>>>>>
29477>>>>>>>>>    Function ComId Returns Integer
29479>>>>>>>>>        Integer retVal
29479>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
29480>>>>>>>>>        Function_Return retVal
29481>>>>>>>>>    End_Function
29482>>>>>>>>>
29482>>>>>>>>>    Procedure Set ComId Integer value
29484>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
29485>>>>>>>>>    End_Procedure
29486>>>>>>>>>
29486>>>>>>>>>    Function ComParameter Returns String
29488>>>>>>>>>        String retVal
29488>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
29489>>>>>>>>>        Function_Return retVal
29490>>>>>>>>>    End_Function
29491>>>>>>>>>
29491>>>>>>>>>    Procedure Set ComParameter String value
29493>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
29494>>>>>>>>>    End_Procedure
29495>>>>>>>>>
29495>>>>>>>>>    Function ComEnabled Returns Boolean
29497>>>>>>>>>        Boolean retVal
29497>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
29498>>>>>>>>>        Function_Return retVal
29499>>>>>>>>>    End_Function
29500>>>>>>>>>
29500>>>>>>>>>    Procedure Set ComEnabled Boolean value
29502>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
29503>>>>>>>>>    End_Procedure
29504>>>>>>>>>
29504>>>>>>>>>    Function ComVisible Returns Boolean
29506>>>>>>>>>        Boolean retVal
29506>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
29507>>>>>>>>>        Function_Return retVal
29508>>>>>>>>>    End_Function
29509>>>>>>>>>
29509>>>>>>>>>    Procedure Set ComVisible Boolean value
29511>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
29512>>>>>>>>>    End_Procedure
29513>>>>>>>>>
29513>>>>>>>>>    Function ComIconId Returns Integer
29515>>>>>>>>>        Integer retVal
29515>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
29516>>>>>>>>>        Function_Return retVal
29517>>>>>>>>>    End_Function
29518>>>>>>>>>
29518>>>>>>>>>    Procedure Set ComIconId Integer value
29520>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
29521>>>>>>>>>    End_Procedure
29522>>>>>>>>>
29522>>>>>>>>>    Function ComAction Returns Variant
29524>>>>>>>>>        Variant retVal
29524>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
29525>>>>>>>>>        Function_Return retVal
29526>>>>>>>>>    End_Function
29527>>>>>>>>>
29527>>>>>>>>>    Procedure Set ComAction Variant value
29529>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
29530>>>>>>>>>    End_Procedure
29531>>>>>>>>>
29531>>>>>>>>>    Function ComControls Returns Variant
29533>>>>>>>>>        Handle hDispatchDriver
29533>>>>>>>>>        Variant retVal
29533>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29534>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
29535>>>>>>>>>        Function_Return retVal
29536>>>>>>>>>    End_Function
29537>>>>>>>>>
29537>>>>>>>>>    Function ComParent Returns Variant
29539>>>>>>>>>        Handle hDispatchDriver
29539>>>>>>>>>        Variant retVal
29539>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29540>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29541>>>>>>>>>        Function_Return retVal
29542>>>>>>>>>    End_Function
29543>>>>>>>>>
29543>>>>>>>>>    Function ComIndex Returns Integer
29545>>>>>>>>>        Handle hDispatchDriver
29545>>>>>>>>>        Integer retVal
29545>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29546>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
29547>>>>>>>>>        Function_Return retVal
29548>>>>>>>>>    End_Function
29549>>>>>>>>>
29549>>>>>>>>>    Procedure ComDelete
29551>>>>>>>>>        Handle hDispatchDriver
29551>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29552>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
29553>>>>>>>>>    End_Procedure
29554>>>>>>>>>End_Class
29555>>>>>>>>>
29555>>>>>>>>>// CLSID: {C0DE2200-FCAC-4EF3-B27E-2E8A04B170E4}
29555>>>>>>>>>Class cCJRibbonBackstageTab is a cComAutomationObject
29556>>>>>>>>>
29556>>>>>>>>>    Function ComCaption Returns String
29558>>>>>>>>>        String retVal
29558>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
29559>>>>>>>>>        Function_Return retVal
29560>>>>>>>>>    End_Function
29561>>>>>>>>>
29561>>>>>>>>>    Procedure Set ComCaption String value
29563>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
29564>>>>>>>>>    End_Procedure
29565>>>>>>>>>
29565>>>>>>>>>    Function ComDescriptionText Returns String
29567>>>>>>>>>        String retVal
29567>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
29568>>>>>>>>>        Function_Return retVal
29569>>>>>>>>>    End_Function
29570>>>>>>>>>
29570>>>>>>>>>    Procedure Set ComDescriptionText String value
29572>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
29573>>>>>>>>>    End_Procedure
29574>>>>>>>>>
29574>>>>>>>>>    Function ComId Returns Integer
29576>>>>>>>>>        Integer retVal
29576>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
29577>>>>>>>>>        Function_Return retVal
29578>>>>>>>>>    End_Function
29579>>>>>>>>>
29579>>>>>>>>>    Procedure Set ComId Integer value
29581>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
29582>>>>>>>>>    End_Procedure
29583>>>>>>>>>
29583>>>>>>>>>    Function ComParameter Returns String
29585>>>>>>>>>        String retVal
29585>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
29586>>>>>>>>>        Function_Return retVal
29587>>>>>>>>>    End_Function
29588>>>>>>>>>
29588>>>>>>>>>    Procedure Set ComParameter String value
29590>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
29591>>>>>>>>>    End_Procedure
29592>>>>>>>>>
29592>>>>>>>>>    Function ComEnabled Returns Boolean
29594>>>>>>>>>        Boolean retVal
29594>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
29595>>>>>>>>>        Function_Return retVal
29596>>>>>>>>>    End_Function
29597>>>>>>>>>
29597>>>>>>>>>    Procedure Set ComEnabled Boolean value
29599>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
29600>>>>>>>>>    End_Procedure
29601>>>>>>>>>
29601>>>>>>>>>    Function ComVisible Returns Boolean
29603>>>>>>>>>        Boolean retVal
29603>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
29604>>>>>>>>>        Function_Return retVal
29605>>>>>>>>>    End_Function
29606>>>>>>>>>
29606>>>>>>>>>    Procedure Set ComVisible Boolean value
29608>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
29609>>>>>>>>>    End_Procedure
29610>>>>>>>>>
29610>>>>>>>>>    Function ComIconId Returns Integer
29612>>>>>>>>>        Integer retVal
29612>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
29613>>>>>>>>>        Function_Return retVal
29614>>>>>>>>>    End_Function
29615>>>>>>>>>
29615>>>>>>>>>    Procedure Set ComIconId Integer value
29617>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
29618>>>>>>>>>    End_Procedure
29619>>>>>>>>>
29619>>>>>>>>>    Function ComDefaultItem Returns Boolean
29621>>>>>>>>>        Boolean retVal
29621>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
29622>>>>>>>>>        Function_Return retVal
29623>>>>>>>>>    End_Function
29624>>>>>>>>>
29624>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
29626>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
29627>>>>>>>>>    End_Procedure
29628>>>>>>>>>
29628>>>>>>>>>    Function ComAction Returns Variant
29630>>>>>>>>>        Variant retVal
29630>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
29631>>>>>>>>>        Function_Return retVal
29632>>>>>>>>>    End_Function
29633>>>>>>>>>
29633>>>>>>>>>    Procedure Set ComAction Variant value
29635>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
29636>>>>>>>>>    End_Procedure
29637>>>>>>>>>
29637>>>>>>>>>    Function ComControls Returns Variant
29639>>>>>>>>>        Handle hDispatchDriver
29639>>>>>>>>>        Variant retVal
29639>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29640>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
29641>>>>>>>>>        Function_Return retVal
29642>>>>>>>>>    End_Function
29643>>>>>>>>>
29643>>>>>>>>>    Function ComParent Returns Variant
29645>>>>>>>>>        Handle hDispatchDriver
29645>>>>>>>>>        Variant retVal
29645>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29646>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29647>>>>>>>>>        Function_Return retVal
29648>>>>>>>>>    End_Function
29649>>>>>>>>>
29649>>>>>>>>>    Function ComIndex Returns Integer
29651>>>>>>>>>        Handle hDispatchDriver
29651>>>>>>>>>        Integer retVal
29651>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29652>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
29653>>>>>>>>>        Function_Return retVal
29654>>>>>>>>>    End_Function
29655>>>>>>>>>
29655>>>>>>>>>    Procedure ComDelete
29657>>>>>>>>>        Handle hDispatchDriver
29657>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29658>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
29659>>>>>>>>>    End_Procedure
29660>>>>>>>>>End_Class
29661>>>>>>>>>
29661>>>>>>>>>// CLSID: {C0DE2200-3890-484C-A9B0-978E6AA0AA8D}
29661>>>>>>>>>Class cCJRibbonBackstageMenuSeparator is a cComAutomationObject
29662>>>>>>>>>
29662>>>>>>>>>    Function ComId Returns Integer
29664>>>>>>>>>        Integer retVal
29664>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
29665>>>>>>>>>        Function_Return retVal
29666>>>>>>>>>    End_Function
29667>>>>>>>>>
29667>>>>>>>>>    Procedure Set ComId Integer value
29669>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
29670>>>>>>>>>    End_Procedure
29671>>>>>>>>>
29671>>>>>>>>>    Function ComVisible Returns Boolean
29673>>>>>>>>>        Boolean retVal
29673>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
29674>>>>>>>>>        Function_Return retVal
29675>>>>>>>>>    End_Function
29676>>>>>>>>>
29676>>>>>>>>>    Procedure Set ComVisible Boolean value
29678>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
29679>>>>>>>>>    End_Procedure
29680>>>>>>>>>
29680>>>>>>>>>    Function ComDefaultItem Returns Boolean
29682>>>>>>>>>        Boolean retVal
29682>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
29683>>>>>>>>>        Function_Return retVal
29684>>>>>>>>>    End_Function
29685>>>>>>>>>
29685>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
29687>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
29688>>>>>>>>>    End_Procedure
29689>>>>>>>>>
29689>>>>>>>>>    Function ComControls Returns Variant
29691>>>>>>>>>        Handle hDispatchDriver
29691>>>>>>>>>        Variant retVal
29691>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29692>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
29693>>>>>>>>>        Function_Return retVal
29694>>>>>>>>>    End_Function
29695>>>>>>>>>
29695>>>>>>>>>    Function ComParent Returns Variant
29697>>>>>>>>>        Handle hDispatchDriver
29697>>>>>>>>>        Variant retVal
29697>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29698>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29699>>>>>>>>>        Function_Return retVal
29700>>>>>>>>>    End_Function
29701>>>>>>>>>
29701>>>>>>>>>    Function ComIndex Returns Integer
29703>>>>>>>>>        Handle hDispatchDriver
29703>>>>>>>>>        Integer retVal
29703>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29704>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
29705>>>>>>>>>        Function_Return retVal
29706>>>>>>>>>    End_Function
29707>>>>>>>>>
29707>>>>>>>>>    Procedure ComDelete
29709>>>>>>>>>        Handle hDispatchDriver
29709>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29710>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
29711>>>>>>>>>    End_Procedure
29712>>>>>>>>>End_Class
29713>>>>>>>>>
29713>>>>>>>Use tWinStructs.pkg
29713>>>>>>>Use Winkern.pkg
29713>>>>>>>
29713>>>>>>>// idle timer used for updates.
29713>>>>>>>Class cCJIdleHandler is a cIdleHandler
29714>>>>>>>    Procedure OnIdle
29716>>>>>>>        Delegate Send Update
29718>>>>>>>    End_Procedure
29719>>>>>>>End_Class
29720>>>>>>>
29720>>>>>>>// xtpThemeOffice2007 was removed by CJ
29720>>>>>>>Define xtpThemeOffice2007 for xtpThemeResource
29720>>>>>>>
29720>>>>>>>// define custom theme names. We use these to turn these into usable
29720>>>>>>>// themes and their dll/ini files. This is in addition to whatever codejock provides
29720>>>>>>>
29720>>>>>>>Enum_List
29720>>>>>>>    Define xtpThemeOffice2007Aqua for 1024
29720>>>>>>>    Define xtpThemeOffice2007Blue
29720>>>>>>>    Define xtpThemeOffice2007Black
29720>>>>>>>    Define xtpThemeOffice2007Silver
29720>>>>>>>    
29720>>>>>>>    Define xtpThemeWindows10Dark
29720>>>>>>>//    Define xtpThemeNativeWindows10 -- already defined in cCJCommandBars.pkg
29720>>>>>>>    
29720>>>>>>>    Define xtpThemeOffice2010
29720>>>>>>>    Define xtpThemeOffice2010Blue
29720>>>>>>>    Define xtpThemeOffice2010Black
29720>>>>>>>    Define xtpThemeOffice2010Silver
29720>>>>>>>    
29720>>>>>>>    Define xtpThemeOffice2013Word
29720>>>>>>>    Define xtpThemeOffice2013Outlook
29720>>>>>>>    Define xtpThemeOffice2013Excel
29720>>>>>>>    Define xtpThemeOffice2013PowerPoint
29720>>>>>>>    Define xtpThemeOffice2013Access
29720>>>>>>>    Define xtpThemeOffice2013Publisher
29720>>>>>>>    Define xtpThemeOffice2013OneNote
29720>>>>>>>    
29720>>>>>>>    Define xtpThemeOffice2016Access
29720>>>>>>>    Define xtpThemeOffice2016AccessBlack
29720>>>>>>>    Define xtpThemeOffice2016Excel
29720>>>>>>>    Define xtpThemeOffice2016OneNote
29720>>>>>>>    Define xtpThemeOffice2016Outlook
29720>>>>>>>    Define xtpThemeOffice2016Publisher
29720>>>>>>>    Define xtpThemeOffice2016PowerPoint
29720>>>>>>>    Define xtpThemeOffice2016Word
29720>>>>>>>    
29720>>>>>>>    Define xtpThemeWindows7
29720>>>>>>>    
29720>>>>>>>    Define xtpThemeVisualStudio2015Blue    
29720>>>>>>>    Define xtpThemeVisualStudio2015Dark
29720>>>>>>>    Define xtpThemeVisualStudio2015Light
29720>>>>>>>    
29720>>>>>>>    Define xtpThemeVisualStudio2017Blue
29720>>>>>>>    Define xtpThemeVisualStudio2017BlueExtra
29720>>>>>>>    Define xtpThemeVisualStudio2017Dark
29720>>>>>>>    Define xtpThemeVisualStudio2017Light
29720>>>>>>>    
29720>>>>>>>    Define xtpThemeVisualStudio2019Blue
29720>>>>>>>    Define xtpThemeVisualStudio2019BlueExtra
29720>>>>>>>    Define xtpThemeVisualStudio2019Dark
29720>>>>>>>    Define xtpThemeVisualStudio2019Light
29720>>>>>>>    
29720>>>>>>>    Define xtpThemeVisualStudio2022Blue
29720>>>>>>>    Define xtpThemeVisualStudio2022BlueExtra
29720>>>>>>>    Define xtpThemeVisualStudio2022Dark
29720>>>>>>>    Define xtpThemeVisualStudio2022Light
29720>>>>>>>End_Enum_List
29720>>>>>>>
29720>>>>>>>// Used for key bindings along with the VK_ defintions
29720>>>>>>>Define xtpKey_None for 0
29720>>>>>>>Define xtpKey_Shift for 4
29720>>>>>>>Define xtpKey_Ctrl for 8
29720>>>>>>>Define xtpKey_Alt for 16
29720>>>>>>>
29720>>>>>>>Define ID_CommandBarsAutoStart for 20001 // start for auto assigned menu items
29720>>>>>>>Define ID_StatusBarsAutoStart  for 10001 // start for auto assigned status panes
29720>>>>>>>Define ID_CommandBarIDAutoStart for 5000 // start for auto assigned commandbar BarIds
29720>>>>>>>Define ID_ImageAutoStart for 5000 // start for auto assigned image ids
29720>>>>>>>
29720>>>>>>>// options for loading and saving command bar layout
29720>>>>>>>Enum_List
29720>>>>>>>    Define rlNoSaveRestore         // don't load or save anything
29720>>>>>>>    Define rlSaveRestoreLayout     // just load and save the layout (position of toolbars)
29720>>>>>>>    Define rlSaveRestoreFullLayout // load/save layout plus addition info such as theme, large icons, etc.
29720>>>>>>>    Define rlSaveRestoreAll        // load and save layout and the controls (useful if you customize)
29720>>>>>>>End_Enum_List
29720>>>>>>>
29720>>>>>>>Enum_List
29720>>>>>>>    Define stNoStretch
29720>>>>>>>    Define stStretch
29720>>>>>>>    Define stStretchShared
29720>>>>>>>End_Enum_List
29720>>>>>>>
29720>>>>>>>// special StatusBar Id valus (piID) values for statusbar panes.
29720>>>>>>>Enum_List
29720>>>>>>>    Define sbpIDAutoAssign for -1    // ID will be auto assigned during pane's end_construct_Object
29720>>>>>>>    Define sbpIDIdlePane   for 0     // Used to display idle text and the DescriptionText of controls on mouse over.
29720>>>>>>>    Define sbpIDCapslock   for 59137 // Indicates whether CAPS Lock is on or off.
29720>>>>>>>    Define sbpIDNumLock    for 59138 // Indicates whether Num Lock is on or off.
29720>>>>>>>    Define sbpIDScrollLock for 59139 // Indicates whether Scroll Lock is on or off
29720>>>>>>>End_Enum_List
29720>>>>>>>
29720>>>>>>>// this keeps track of a global commandbars, which should be the Main menu's commandBars object
29720>>>>>>>// context menus use this to attach to commandbars
29720>>>>>>>Global_Variable Integer ghoCommandBars
29720>>>>>>>Move 0 to ghoCommandBars
29721>>>>>>>
29721>>>>>>>
29721>>>>>>>// DEOFocus is used by the cCJDeoMenuItemClassess and DEOInformation messages. It allows for
29721>>>>>>>// customization of the focus message which is used by FlexTron.
29721>>>>>>>Function DEOAdjustFocus Returns Handle
29723>>>>>>>    Function_Return Self
29724>>>>>>>End_Function
29725>>>>>>>
29725>>>>>>>Function DEOFocus for cUIObject Returns Handle
29727>>>>>>>    Handle hoFocus
29727>>>>>>>    
29727>>>>>>>    Get Focus of desktop to hoFocus
29728>>>>>>>    If (hoFocus) ;        Get DEOAdjustFocus of hoFocus to hoFocus
29731>>>>>>>    
29731>>>>>>>    Function_Return hoFocus
29732>>>>>>>End_Function
29733>>>>>>>
29733>>>>>>>Function DEOFocus for Desktop Returns Handle
29735>>>>>>>    Handle hoFocus
29735>>>>>>>    
29735>>>>>>>    Get Focus to hoFocus
29736>>>>>>>    If (hoFocus) ;        Get DEOAdjustFocus of hoFocus to hoFocus
29739>>>>>>>    
29739>>>>>>>    Function_Return hoFocus
29740>>>>>>>End_Function
29741>>>>>>>
29741>>>>>>>
29741>>>>>>>
29741>>>>>>>
29741>>>>>>>Class cCJCommandBarSystem is a cCJCommandBars
29742>>>>>>>    
29742>>>>>>>    Procedure Construct_Object
29744>>>>>>>        Handle hoTimer hoMain
29744>>>>>>>        Forward Send Construct_Object
29746>>>>>>>        
29746>>>>>>>        // do we save/restore command bars and if so how
29746>>>>>>>        Property Integer peRestoreLayout rlNoSaveRestore
29747>>>>>>>        
29747>>>>>>>        // This allows developers to control when a load layout should not be used
29747>>>>>>>        // because it is out of date. Just keep incrementing this value when you change
29747>>>>>>>        // something that is not compatible
29747>>>>>>>        Property Integer piLayoutBuild 1
29748>>>>>>>        
29748>>>>>>>        // Name used to save a store commandbars. Can be changed to create
29748>>>>>>>        // custom setups.
29748>>>>>>>        Property String  psLayoutSection "CommandBars"
29749>>>>>>>        
29749>>>>>>>        // if true this expects client area and a panel. Auto assigned
29749>>>>>>>        Property Boolean pbMDIMenu False
29750>>>>>>>        
29750>>>>>>>        Property Handle phoStatusBar 0 // assigned automatically
29751>>>>>>>        
29751>>>>>>>        Property Integer pePrivateVisualTheme xtpThemeWhidbey
29752>>>>>>>        Property Boolean pbPrivateEnableCustomization False
29753>>>>>>>        Property Boolean pbPrivateAltDragCustomization False
29754>>>>>>>        Property Integer pePrivateAnimation xtpAnimateWindowsDefault
29755>>>>>>>        Property Boolean pbPrivateLargeIcons False
29756>>>>>>>        Property Boolean pbPrivateShowTextBelowIcons False
29757>>>>>>>        Property Boolean pbPrivateAlwaysShowFullMenus True
29758>>>>>>>        Property Boolean pbPrivateShowFullAfterDelay True
29759>>>>>>>        Property Boolean pbPrivateOfficeStyleDisabledIcons False
29760>>>>>>>        Property Boolean pbPrivateIconsWithShadow True
29761>>>>>>>        Property Boolean pbPrivateToolBarScreenTips True
29762>>>>>>>        Property Boolean pbPrivateShowPopupBarToolTips False
29763>>>>>>>        Property Boolean pbPrivateToolBarAccelTips True
29764>>>>>>>        Property Boolean pbPrivateAutoHideUnusedPopups False
29765>>>>>>>        Property Boolean pbPrivateShowExpandButtonAlways False
29766>>>>>>>        Property Boolean pbPrivateSyncFloatingToolbars True
29767>>>>>>>        Property Boolean pbPrivateFloatToolbarsByDoubleClick False
29768>>>>>>>        Property Boolean pbPrivateAutoResizeIcons False
29769>>>>>>>        
29769>>>>>>>        Property Boolean pbCustomizeShowKeyboardPage False
29770>>>>>>>        Property Boolean pbCustomizeShowOptionsPage False
29771>>>>>>>        
29771>>>>>>>        // This is design-time only.
29771>>>>>>>        Property Boolean pbTabbedWorkspaces False
29772>>>>>>>        // This is mostly design-time only.
29772>>>>>>>        Property Boolean pbCenterTabbedViews True
29773>>>>>>>        Property Handle phoPrivateActions           (Create(Self,U_cCJCommandBarActions))
29774>>>>>>>        Property Handle phoPrivateDesignerControls  (Create(Self,U_cCJCommandBarControls))
29775>>>>>>>        Property Handle phoPrivateKeyBindings       (Create(Self,U_cCJKeyBindings))
29776>>>>>>>        Property Handle phoPrivateOptions           (Create(Self,U_cCJCommandBarsOptions))
29777>>>>>>>        Property Boolean pbPrivateTimerUpdate True
29778>>>>>>>        
29778>>>>>>>        // array of all registered actions (i.e., actions that have a DF object and are COM instanciated)
29778>>>>>>>        Property Handle[] phoRegisteredActions
29779>>>>>>>        
29779>>>>>>>        // array of actions that should actively updated via timer refresh
29779>>>>>>>        Property Handle[] phoActiveUpdates
29780>>>>>>>        
29780>>>>>>>        // array of action IDs that can be reused. We do this because we cannot destroy actions
29780>>>>>>>        Property Integer[] piActionIdPool
29781>>>>>>>        
29781>>>>>>>        // last auto assigned BarId
29781>>>>>>>        Property Integer piLastBarId ID_CommandBarIDAutoStart
29782>>>>>>>        
29782>>>>>>>        // last auto assigned image ID
29782>>>>>>>        Property Integer piLastImageId ID_ImageAutoStart
29783>>>>>>>        
29783>>>>>>>        // used to determine of Load should occur. When the count changes in the
29783>>>>>>>        // the action IDs or barIds it is not safe to reload things.
29783>>>>>>>        Property Integer piLastAssignedDesignTimeID 0
29784>>>>>>>        Property Integer piLastAssignedDesignTimeBarID 0
29785>>>>>>>        
29785>>>>>>>        Property Handle phoTimer 0
29786>>>>>>>        
29786>>>>>>>        Get Create U_cCJIdleHandler to hoTimer
29787>>>>>>>        Set phoTimer to hoTimer
29788>>>>>>>        
29788>>>>>>>        Get Main_Panel_id to hoMain
29789>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
29790>>>>>>>        Set peNeighborhood to nhPublic
29791>>>>>>>        // if commandbar is part of a focusable ring (like a view) we never want it to
29791>>>>>>>        // take the focus
29791>>>>>>>        Set Skip_State to True
29792>>>>>>>        
29792>>>>>>>        Send AssignMDIMenu // determine if this is an MDI commandbar.
29793>>>>>>>    End_Procedure
29794>>>>>>>    
29794>>>>>>>    
29794>>>>>>>    // this will figure out if this is an MDI menu and assign the ghoCommandBars
29794>>>>>>>    // global variable if needed.
29794>>>>>>>    // We assume it is MDI if the main_panel_id is commandbars parent and it is MDI style
29794>>>>>>>    Procedure AssignMDIMenu
29796>>>>>>>        Handle hoMain hoParent
29796>>>>>>>        Boolean bIsMdi
29796>>>>>>>        Get parent to hoParent
29797>>>>>>>        Get Main_Panel_Id to hoMain
29798>>>>>>>        Move (hoMain and hoMain=hoParent and  MDI_State(hoMain)) to bIsMdi
29799>>>>>>>        Set pbMDIMenu to bIsMdi
29800>>>>>>>        If bIsMdi Begin
29802>>>>>>>            Set phoCommandBars of hoMain to Self
29803>>>>>>>            Move Self to ghoCommandBars
29804>>>>>>>        End
29804>>>>>>>>
29804>>>>>>>    End_Procedure
29805>>>>>>>    
29805>>>>>>>    Function IsMDIMenu Returns Boolean
29807>>>>>>>        Boolean bMDI
29807>>>>>>>        Get pbMDIMenu to bMDI
29808>>>>>>>        Function_Return bMDI
29809>>>>>>>    End_Function
29810>>>>>>>    
29810>>>>>>>    // returns the ClientArea DF object if this is an MDI style system.
29810>>>>>>>    Function ClientAreaObject Returns Handle
29812>>>>>>>        Boolean bMDI
29812>>>>>>>        Handle hoClientArea
29812>>>>>>>        Get IsMDIMenu to bMDI
29813>>>>>>>        If (bMDI) Begin
29815>>>>>>>            Get Client_Id of (Parent(Self)) to hoClientArea
29816>>>>>>>        End
29816>>>>>>>>
29816>>>>>>>        Function_Return hoClientArea
29817>>>>>>>    End_Function
29818>>>>>>>    
29818>>>>>>>    // Generic Get and Set property that is used to get and set a DF/COM options property.
29818>>>>>>>    // can be used by any integer or boolean property
29818>>>>>>>    
29818>>>>>>>    Procedure SetComOptionsProperty Handle hmPrivateProperty Handle hmCOMProperty Integer iValue
29820>>>>>>>        Handle hoOptions
29820>>>>>>>        Set hmPrivateProperty to iValue
29821>>>>>>>        If (IsComObjectCreated(Self)) Begin
29823>>>>>>>            Get OptionsObject to hoOptions
29824>>>>>>>            Set hmCOMProperty of hoOptions to iValue
29825>>>>>>>        End
29825>>>>>>>>
29825>>>>>>>    End_Procedure
29826>>>>>>>    
29826>>>>>>>    Function GetComOptionsProperty Handle hmPrivateProperty Handle hmCOMProperty Returns Integer
29828>>>>>>>        Handle hoOptions
29828>>>>>>>        Integer iValue
29828>>>>>>>        If (IsComObjectCreated(Self)) Begin
29830>>>>>>>            Get OptionsObject to hoOptions
29831>>>>>>>            Get hmCOMProperty of hoOptions to iValue
29832>>>>>>>        End
29832>>>>>>>>
29832>>>>>>>        Else Begin
29833>>>>>>>            Get hmPrivateProperty to iValue
29834>>>>>>>        End
29834>>>>>>>>
29834>>>>>>>        Function_Return iValue
29835>>>>>>>    End_Function
29836>>>>>>>    
29836>>>>>>>    // You can call this to handle whatever Theme or Custom theme you have. This is
29836>>>>>>>    // called by Set peVisualTheme
29836>>>>>>>    Procedure ApplyVisualTheme Integer eTheme String sDll String sIni
29838>>>>>>>        Boolean bOk
29838>>>>>>>        Integer iOldAuto
29838>>>>>>>        If (sDll<>"") Begin
29840>>>>>>>            Get LoadResourceImagesFromFile sDll sIni to bOk
29841>>>>>>>            If (not(bOk)) Begin
29843>>>>>>>                Error DFERR_PROGRAM (SFormat("Cannot load Theme resource file %1 %2",sDll,sIni))
29844>>>>>>>>
29844>>>>>>>            End
29844>>>>>>>>
29844>>>>>>>        End
29844>>>>>>>>
29844>>>>>>>        Get pbAutoResizeIcons to iOldAuto
29845>>>>>>>        Set ComVisualTheme to eTheme
29846>>>>>>>        Set pbAutoResizeIcons to iOldAuto
29847>>>>>>>    End_Procedure
29848>>>>>>>    
29848>>>>>>>    
29848>>>>>>>    // This converts our themes to themes that can be used by Codejock and its system
29848>>>>>>>    // of using dlls and inis for some themes. This will change over time and can be
29848>>>>>>>    // augmented for custom values
29848>>>>>>>    Procedure VisualThemeParams Integer ByRef eTheme String ByRef sDll String ByRef sIni
29850>>>>>>>        Case Begin
29850>>>>>>>            Case (eTheme=xtpThemeNativeWindows10)
29852>>>>>>>                Move "Windows10.dll" to sDll
29853>>>>>>>                Move "Windows10Light.ini" to sIni
29854>>>>>>>                Move xtpThemeResource to eTheme
29855>>>>>>>                Case Break
29856>>>>>>>            Case (eTheme=xtpThemeWindows10Dark)
29859>>>>>>>                Move "Windows10.dll" to sDll
29860>>>>>>>                Move "Windows10Dark.ini" to sIni
29861>>>>>>>                Move xtpThemeResource to eTheme
29862>>>>>>>                Case Break
29863>>>>>>>            Case (eTheme=xtpThemeOffice2007)
29866>>>>>>>            Case (eTheme=xtpThemeResource)
29869>>>>>>>            Case (eTheme=xtpThemeOffice2007Blue)
29872>>>>>>>                Move "Office2007.dll" to sDll
29873>>>>>>>                Move "Office2007Blue.ini" to sIni
29874>>>>>>>                Move xtpThemeResource to eTheme
29875>>>>>>>                Case Break
29876>>>>>>>            Case (eTheme=xtpThemeOffice2007Aqua)
29879>>>>>>>                Move "Office2007.dll" to sDll
29880>>>>>>>                Move "Office2007Aqua.ini" to sIni
29881>>>>>>>                Move xtpThemeResource to eTheme
29882>>>>>>>                Case Break
29883>>>>>>>            Case (eTheme=xtpThemeOffice2007Black)
29886>>>>>>>                Move "Office2007.dll" to sDll
29887>>>>>>>                Move "Office2007Black.ini" to sIni
29888>>>>>>>                Move xtpThemeResource to eTheme
29889>>>>>>>                Case Break
29890>>>>>>>            Case (eTheme=xtpThemeOffice2007Silver)
29893>>>>>>>                Move "Office2007.dll" to sDll
29894>>>>>>>                Move "Office2007Silver.ini" to sIni
29895>>>>>>>                Move xtpThemeResource to eTheme
29896>>>>>>>                Case Break
29897>>>>>>>            
29897>>>>>>>            Case (eTheme=xtpThemeOffice2010Blue)
29900>>>>>>>            Case (eTheme=xtpThemeOffice2010)
29903>>>>>>>                Move "Office2010.dll" to sDll
29904>>>>>>>                Move "Office2010Blue.ini" to sIni
29905>>>>>>>                Move xtpThemeResource to eTheme
29906>>>>>>>                Case Break
29907>>>>>>>            Case (eTheme=xtpThemeOffice2010Black)
29910>>>>>>>                Move "Office2010.dll" to sDll
29911>>>>>>>                Move "Office2010Black.ini" to sIni
29912>>>>>>>                Move xtpThemeResource to eTheme
29913>>>>>>>                Case Break
29914>>>>>>>            Case (eTheme=xtpThemeOffice2010Silver)
29917>>>>>>>                Move "Office2010.dll" to sDll
29918>>>>>>>                Move "Office2010Silver.ini" to sIni
29919>>>>>>>                Move xtpThemeResource to eTheme
29920>>>>>>>                Case Break
29921>>>>>>>            
29921>>>>>>>            Case (eTheme=xtpThemeOffice2013)
29924>>>>>>>            Case (eTheme=xtpThemeOffice2013Word)
29927>>>>>>>                Move "Office2013.dll" to sDll
29928>>>>>>>                Move "Office2013Word.ini" to sIni
29929>>>>>>>                Move xtpThemeOffice2013 to eTheme
29930>>>>>>>                Case Break
29931>>>>>>>            Case (eTheme=xtpThemeOffice2013Excel)
29934>>>>>>>                Move "Office2013.dll" to sDll
29935>>>>>>>                Move "Office2013Excel.ini" to sIni
29936>>>>>>>                Move xtpThemeOffice2013 to eTheme
29937>>>>>>>                Case Break
29938>>>>>>>            Case (eTheme=xtpThemeOffice2013PowerPoint)
29941>>>>>>>                Move "Office2013.dll" to sDll
29942>>>>>>>                Move "Office2013PowerPoint.ini" to sIni
29943>>>>>>>                Move xtpThemeOffice2013 to eTheme
29944>>>>>>>                Case Break
29945>>>>>>>            Case (eTheme=xtpThemeOffice2013OutLook)
29948>>>>>>>                Move "Office2013.dll" to sDll
29949>>>>>>>                Move "Office2013OutLook.ini" to sIni
29950>>>>>>>                Move xtpThemeOffice2013 to eTheme
29951>>>>>>>                Case Break
29952>>>>>>>            Case (eTheme=xtpThemeOffice2013Publisher)
29955>>>>>>>                Move "Office2013.dll" to sDll
29956>>>>>>>                Move "Office2013Publisher.ini" to sIni
29957>>>>>>>                Move xtpThemeOffice2013 to eTheme
29958>>>>>>>                Case Break
29959>>>>>>>            Case (eTheme=xtpThemeOffice2013Access)
29962>>>>>>>                Move "Office2013.dll" to sDll
29963>>>>>>>                Move "Office2013Access.ini" to sIni
29964>>>>>>>                Move xtpThemeOffice2013 to eTheme
29965>>>>>>>                Case Break
29966>>>>>>>            Case (eTheme=xtpThemeOffice2013OneNote)
29969>>>>>>>                Move "Office2013.dll" to sDll
29970>>>>>>>                Move "Office2013OneNote.ini" to sIni
29971>>>>>>>                Move xtpThemeOffice2013 to eTheme
29972>>>>>>>                Case Break
29973>>>>>>>                
29973>>>>>>>            Case (eTheme=xtpThemeOffice2016Access)
29976>>>>>>>                Move "Office2016.dll" to sDll
29977>>>>>>>                Move "Office2016AccessWhite.ini" to sIni
29978>>>>>>>                Move xtpThemeOffice2013 to eTheme
29979>>>>>>>                Case Break
29980>>>>>>>            Case (eTheme=xtpThemeOffice2016Excel)
29983>>>>>>>                Move "Office2016.dll" to sDll
29984>>>>>>>                Move "Office2016ExcelWhite.ini" to sIni
29985>>>>>>>                Move xtpThemeOffice2013 to eTheme
29986>>>>>>>                Case Break
29987>>>>>>>            Case (eTheme=xtpThemeOffice2016OneNote)
29990>>>>>>>                Move "Office2016.dll" to sDll
29991>>>>>>>                Move "Office2016OneNoteWhite.ini" to sIni
29992>>>>>>>                Move xtpThemeOffice2013 to eTheme
29993>>>>>>>                Case Break
29994>>>>>>>            Case (eTheme=xtpThemeOffice2016Outlook)
29997>>>>>>>                Move "Office2016.dll" to sDll
29998>>>>>>>                Move "Office2016OutlookWhite.ini" to sIni
29999>>>>>>>                Move xtpThemeOffice2013 to eTheme
30000>>>>>>>                Case Break
30001>>>>>>>            Case (eTheme=xtpThemeOffice2016Publisher)
30004>>>>>>>                Move "Office2016.dll" to sDll
30005>>>>>>>                Move "Office2016PublisherWhite.ini" to sIni
30006>>>>>>>                Move xtpThemeOffice2013 to eTheme
30007>>>>>>>                Case Break
30008>>>>>>>            Case (eTheme=xtpThemeOffice2016PowerPoint)
30011>>>>>>>                Move "Office2016.dll" to sDll
30012>>>>>>>                Move "Office2016PowerPointWhite.ini" to sIni
30013>>>>>>>                Move xtpThemeOffice2013 to eTheme
30014>>>>>>>                Case Break
30015>>>>>>>            Case (eTheme=xtpThemeOffice2016Word)
30018>>>>>>>                Move "Office2016.dll" to sDll
30019>>>>>>>                Move "Office2016WordWhite.ini" to sIni
30020>>>>>>>                Move xtpThemeOffice2013 to eTheme
30021>>>>>>>                Case Break
30022>>>>>>>            
30022>>>>>>>            Case (eTheme=xtpThemeWindows7)
30025>>>>>>>                Move "Windows7.dll" to sDll
30026>>>>>>>                Move "Windows7Blue.ini" to sIni
30027>>>>>>>                Move xtpThemeResource to eTheme
30028>>>>>>>                Case Break
30029>>>>>>>            
30029>>>>>>>            Case (eTheme=xtpThemeVisualStudio2012)
30032>>>>>>>            Case (eTheme=xtpThemeVisualStudio2012Light)
30035>>>>>>>                Move "VisualStudio2012.dll" to sDll
30036>>>>>>>                Move "VisualStudio2012Light.ini" to sIni
30037>>>>>>>                Move xtpThemeVisualStudio2012 to eTheme
30038>>>>>>>                Case Break
30039>>>>>>>            Case (eTheme=xtpThemeVisualStudio2012Dark)
30042>>>>>>>                Move "VisualStudio2012.dll" to sDll
30043>>>>>>>                Move "VisualStudio2012Dark.ini" to sIni
30044>>>>>>>                Move xtpThemeVisualStudio2012Dark to eTheme
30045>>>>>>>                Case Break
30046>>>>>>>            
30046>>>>>>>            Case (eTheme=xtpThemeVisualStudio2015)
30049>>>>>>>            Case (eTheme=xtpThemeVisualStudio2015Blue)
30052>>>>>>>                Move "VisualStudio2015.dll" to sDll
30053>>>>>>>                Move "VisualStudio2015Blue.ini" to sIni
30054>>>>>>>                Move xtpThemeVisualStudio2015 to eTheme
30055>>>>>>>                Case Break
30056>>>>>>>            Case (eTheme=xtpThemeVisualStudio2015Light)
30059>>>>>>>                Move "VisualStudio2015.dll" to sDll
30060>>>>>>>                Move "VisualStudio2015Light.ini" to sIni
30061>>>>>>>                Move xtpThemeVisualStudio2015 to eTheme
30062>>>>>>>                Case Break
30063>>>>>>>            Case (eTheme=xtpThemeVisualStudio2015Dark)
30066>>>>>>>                Move "VisualStudio2015.dll" to sDll
30067>>>>>>>                Move "VisualStudio2015Dark.ini" to sIni
30068>>>>>>>                Move xtpThemeVisualStudio2015Dark to eTheme
30069>>>>>>>                Case Break
30070>>>>>>>
30070>>>>>>>            Case (eTheme=xtpThemeVisualStudio2017)
30073>>>>>>>            Case (eTheme=xtpThemeVisualStudio2017Blue)
30076>>>>>>>                Move "VisualStudio2017.dll" to sDll
30077>>>>>>>                Move "VisualStudio2017Blue.ini" to sIni
30078>>>>>>>                Move xtpThemeVisualStudio2017 to eTheme
30079>>>>>>>                Case Break
30080>>>>>>>            Case (eTheme=xtpThemeVisualStudio2017Light)
30083>>>>>>>                Move "VisualStudio2017.dll" to sDll
30084>>>>>>>                Move "VisualStudio2017Light.ini" to sIni
30085>>>>>>>                Move xtpThemeVisualStudio2017 to eTheme
30086>>>>>>>                Case Break
30087>>>>>>>            Case (eTheme=xtpThemeVisualStudio2017Dark)
30090>>>>>>>                Move "VisualStudio2017.dll" to sDll
30091>>>>>>>                Move "VisualStudio2017Dark.ini" to sIni
30092>>>>>>>                Move xtpThemeVisualStudio2017 to eTheme
30093>>>>>>>                Case Break
30094>>>>>>>                
30094>>>>>>>            Case (eTheme=xtpThemeVisualStudio2019)
30097>>>>>>>            Case (eTheme=xtpThemeVisualStudio2019Blue)
30100>>>>>>>                Move "VisualStudio2019.dll" to sDll
30101>>>>>>>                Move "VisualStudio2019Blue.ini" to sIni
30102>>>>>>>                Move xtpThemeVisualStudio2019 to eTheme
30103>>>>>>>                Case Break
30104>>>>>>>            Case (eTheme=xtpThemeVisualStudio2019BlueExtra)
30107>>>>>>>                Move "VisualStudio2019.dll" to sDll
30108>>>>>>>                Move "VisualStudio2019BlueExtra.ini" to sIni
30109>>>>>>>                Move xtpThemeVisualStudio2019BlueExtra to eTheme
30110>>>>>>>                Case Break
30111>>>>>>>            Case (eTheme=xtpThemeVisualStudio2019Light)
30114>>>>>>>                Move "VisualStudio2019.dll" to sDll
30115>>>>>>>                Move "VisualStudio2019Light.ini" to sIni
30116>>>>>>>                Move xtpThemeVisualStudio2019 to eTheme
30117>>>>>>>                Case Break
30118>>>>>>>            Case (eTheme=xtpThemeVisualStudio2019Dark)
30121>>>>>>>                Move "VisualStudio2019.dll" to sDll
30122>>>>>>>                Move "VisualStudio2019Dark.ini" to sIni
30123>>>>>>>                Move xtpThemeVisualStudio2019Dark to eTheme
30124>>>>>>>                Case Break
30125>>>>>>>                
30125>>>>>>>            Case (eTheme=xtpThemeVisualStudio2022)
30128>>>>>>>            Case (eTheme=xtpThemeVisualStudio2022Blue)
30131>>>>>>>                Move "VisualStudio2022.dll" to sDll
30132>>>>>>>                Move "VisualStudio2022Blue.ini" to sIni
30133>>>>>>>                Move xtpThemeVisualStudio2022 to eTheme
30134>>>>>>>                Case Break
30135>>>>>>>            Case (eTheme=xtpThemeVisualStudio2022BlueExtra)
30138>>>>>>>                Move "VisualStudio2022.dll" to sDll
30139>>>>>>>                Move "VisualStudio2022BlueExtra.ini" to sIni
30140>>>>>>>                Move xtpThemeVisualStudio2022BlueExtra to eTheme
30141>>>>>>>                Case Break
30142>>>>>>>            Case (eTheme=xtpThemeVisualStudio2022Light)
30145>>>>>>>                Move "VisualStudio2022.dll" to sDll
30146>>>>>>>                Move "VisualStudio2022Light.ini" to sIni
30147>>>>>>>                Move xtpThemeVisualStudio2022 to eTheme
30148>>>>>>>                Case Break
30149>>>>>>>            Case (eTheme=xtpThemeVisualStudio2022Dark)
30152>>>>>>>                Move "VisualStudio2022.dll" to sDll
30153>>>>>>>                Move "VisualStudio2022Dark.ini" to sIni
30154>>>>>>>                Move xtpThemeVisualStudio2022Dark to eTheme
30155>>>>>>>                Case Break
30156>>>>>>>            Case Else
30156>>>>>>>                Move "" to sDll
30157>>>>>>>                Move "" to sIni
30158>>>>>>>        Case End
30158>>>>>>>    End_Procedure
30159>>>>>>>    
30159>>>>>>>    
30159>>>>>>>    Procedure Set peVisualTheme Integer eValue
30161>>>>>>>        String sDll sIni
30161>>>>>>>        Integer iOldAuto
30161>>>>>>>        Set pePrivateVisualTheme to eValue
30162>>>>>>>        If (IsComObjectCreated(Self)) Begin
30164>>>>>>>            Send VisualThemeParams (&eValue) (&sDll) (&sIni)
30165>>>>>>>            Send ApplyVisualTheme eValue sDll sIni
30166>>>>>>>        End
30166>>>>>>>>
30166>>>>>>>    End_Procedure
30167>>>>>>>    
30167>>>>>>>    Function peVisualTheme Returns Integer
30169>>>>>>>        Integer eValue
30169>>>>>>>        // always returns our version of the theme because we have custom values
30169>>>>>>>        // If you need the actual theme use ComVisualTheme
30169>>>>>>>        Get pePrivateVisualTheme to eValue
30170>>>>>>>        Function_Return eValue
30171>>>>>>>    End_Function
30172>>>>>>>    
30172>>>>>>>    Procedure Set pbEnableCustomization Boolean bValue
30174>>>>>>>        Set pbPrivateEnableCustomization to bValue
30175>>>>>>>        If (IsComObjectCreated(Self)) Begin
30177>>>>>>>            Send ComEnableCustomization bValue
30178>>>>>>>        End
30178>>>>>>>>
30178>>>>>>>    End_Procedure
30179>>>>>>>    
30179>>>>>>>    Function pbEnableCustomization Returns Boolean
30181>>>>>>>        Boolean bValue
30181>>>>>>>        Get pbPrivateEnableCustomization to bValue
30182>>>>>>>        Function_Return bValue
30183>>>>>>>    End_Function
30184>>>>>>>    
30184>>>>>>>    
30184>>>>>>>    // these are set in the cCJCommandBars's Option object
30184>>>>>>>    
30184>>>>>>>    Procedure Set peAnimation Integer eValue
30186>>>>>>>        Send SetComOptionsProperty set_pePrivateAnimation set_ComAnimation eValue
30187>>>>>>>    End_Procedure
30188>>>>>>>    
30188>>>>>>>    Function peAnimation Returns Integer
30190>>>>>>>        Integer eValue
30190>>>>>>>        Get GetComOptionsProperty get_pePrivateAnimation get_ComAnimation to eValue
30191>>>>>>>        Function_Return eValue
30192>>>>>>>    End_Function
30193>>>>>>>    
30193>>>>>>>    
30193>>>>>>>    Procedure Set pbAlwaysShowFullMenus Boolean bValue
30195>>>>>>>        Send SetComOptionsProperty set_pbPrivateAlwaysShowFullMenus set_ComAlwaysShowFullMenus bValue
30196>>>>>>>    End_Procedure
30197>>>>>>>    
30197>>>>>>>    Function pbAlwaysShowFullMenus Returns Boolean
30199>>>>>>>        Boolean bValue
30199>>>>>>>        Get GetComOptionsProperty get_pbPrivateAlwaysShowFullMenus get_ComAlwaysShowFullMenus to bValue
30200>>>>>>>        Function_Return bValue
30201>>>>>>>    End_Function
30202>>>>>>>    
30202>>>>>>>    Procedure Set pbShowFullAfterDelay Boolean bValue
30204>>>>>>>        Send SetComOptionsProperty set_pbPrivateShowFullAfterDelay set_ComShowFullAfterDelay bValue
30205>>>>>>>    End_Procedure
30206>>>>>>>    
30206>>>>>>>    Function pbShowFullAfterDelay Returns Boolean
30208>>>>>>>        Boolean bValue
30208>>>>>>>        Get GetComOptionsProperty get_pbPrivateShowFullAfterDelay get_ComShowFullAfterDelay to bValue
30209>>>>>>>        Function_Return bValue
30210>>>>>>>    End_Function
30211>>>>>>>    
30211>>>>>>>    Procedure Set pbAutoHideUnusedPopups Boolean bValue
30213>>>>>>>        Send SetComOptionsProperty set_pbPrivateAutoHideUnusedPopups set_ComAutoHideUnusedPopups bValue
30214>>>>>>>    End_Procedure
30215>>>>>>>    
30215>>>>>>>    Function pbAutoHideUnusedPopups Returns Boolean
30217>>>>>>>        Boolean bValue
30217>>>>>>>        Get GetComOptionsProperty get_pbPrivateAutoHideUnusedPopups get_ComAutoHideUnusedPopups to bValue
30218>>>>>>>        Function_Return bValue
30219>>>>>>>    End_Function
30220>>>>>>>    
30220>>>>>>>    Procedure Set pbToolBarScreenTips Boolean bValue
30222>>>>>>>        Send SetComOptionsProperty set_pbPrivateToolBarScreenTips set_ComToolBarScreenTips bValue
30223>>>>>>>    End_Procedure
30224>>>>>>>    
30224>>>>>>>    Function pbToolBarScreenTips Returns Boolean
30226>>>>>>>        Boolean bValue
30226>>>>>>>        Get GetComOptionsProperty get_pbPrivateToolBarScreenTips get_ComToolBarScreenTips to bValue
30227>>>>>>>        Function_Return bValue
30228>>>>>>>    End_Function
30229>>>>>>>    
30229>>>>>>>    Procedure Set pbShowPopupBarToolTips Boolean bValue
30231>>>>>>>        Send SetComOptionsProperty set_pbPrivateShowPopupBarToolTips set_ComShowPopupBarToolTips bValue
30232>>>>>>>    End_Procedure
30233>>>>>>>    
30233>>>>>>>    Function pbShowPopupBarToolTips Returns Boolean
30235>>>>>>>        Boolean bValue
30235>>>>>>>        Get GetComOptionsProperty get_pbPrivateShowPopupBarToolTips get_ComShowPopupBarToolTips to bValue
30236>>>>>>>        Function_Return bValue
30237>>>>>>>    End_Function
30238>>>>>>>    
30238>>>>>>>    Procedure Set pbToolBarAccelTips Boolean bValue
30240>>>>>>>        Send SetComOptionsProperty set_pbPrivateToolBarAccelTips set_ComToolBarAccelTips bValue
30241>>>>>>>    End_Procedure
30242>>>>>>>    
30242>>>>>>>    Function pbToolBarAccelTips Returns Boolean
30244>>>>>>>        Boolean bValue
30244>>>>>>>        Get GetComOptionsProperty get_pbPrivateToolBarAccelTips get_ComToolBarAccelTips to bValue
30245>>>>>>>        Function_Return bValue
30246>>>>>>>    End_Function
30247>>>>>>>    
30247>>>>>>>    Procedure Set pbShowExpandButtonAlways Boolean bValue
30249>>>>>>>        Send SetComOptionsProperty set_pbPrivateShowExpandButtonAlways set_ComShowExpandButtonAlways bValue
30250>>>>>>>    End_Procedure
30251>>>>>>>    
30251>>>>>>>    Function pbShowExpandButtonAlways Returns Boolean
30253>>>>>>>        Boolean bValue
30253>>>>>>>        Get GetComOptionsProperty get_pbPrivateShowExpandButtonAlways get_ComShowExpandButtonAlways to bValue
30254>>>>>>>        Function_Return bValue
30255>>>>>>>    End_Function
30256>>>>>>>    
30256>>>>>>>    Procedure Set pbLargeIcons Boolean bValue
30258>>>>>>>        Send SetComOptionsProperty set_pbPrivateLargeIcons set_ComLargeIcons bValue
30259>>>>>>>    End_Procedure
30260>>>>>>>    
30260>>>>>>>    Function pbLargeIcons Returns Boolean
30262>>>>>>>        Boolean bValue
30262>>>>>>>        Get GetComOptionsProperty get_pbPrivateLargeIcons get_ComLargeIcons to bValue
30263>>>>>>>        Function_Return bValue
30264>>>>>>>    End_Function
30265>>>>>>>    
30265>>>>>>>    Procedure Set pbSyncFloatingToolbars Boolean bValue
30267>>>>>>>        Send SetComOptionsProperty set_pbPrivateSyncFloatingToolbars set_ComSyncFloatingToolbars bValue
30268>>>>>>>    End_Procedure
30269>>>>>>>    
30269>>>>>>>    Function pbSyncFloatingToolbars Returns Boolean
30271>>>>>>>        Boolean bValue
30271>>>>>>>        Get GetComOptionsProperty get_pbPrivateSyncFloatingToolbars get_ComSyncFloatingToolbars to bValue
30272>>>>>>>        Function_Return bValue
30273>>>>>>>    End_Function
30274>>>>>>>    
30274>>>>>>>    Procedure Set pbFloatToolbarsByDoubleClick Boolean bValue
30276>>>>>>>        Send SetComOptionsProperty set_pbPrivateFloatToolbarsByDoubleClick set_ComFloatToolbarsByDoubleClick bValue
30277>>>>>>>    End_Procedure
30278>>>>>>>    
30278>>>>>>>    Function pbFloatToolbarsByDoubleClick Returns Boolean
30280>>>>>>>        Boolean bValue
30280>>>>>>>        Get GetComOptionsProperty get_pbPrivateFloatToolbarsByDoubleClick get_ComFloatToolbarsByDoubleClick to bValue
30281>>>>>>>        Function_Return bValue
30282>>>>>>>    End_Function
30283>>>>>>>    
30283>>>>>>>    Procedure Set pbShowTextBelowIcons Boolean bValue
30285>>>>>>>        Send SetComOptionsProperty set_pbPrivateShowTextBelowIcons set_ComShowTextBelowIcons bValue
30286>>>>>>>    End_Procedure
30287>>>>>>>    
30287>>>>>>>    Function pbShowTextBelowIcons Returns Boolean
30289>>>>>>>        Boolean bValue
30289>>>>>>>        Get GetComOptionsProperty get_pbPrivateShowTextBelowIcons get_ComShowTextBelowIcons to bValue
30290>>>>>>>        Function_Return bValue
30291>>>>>>>    End_Function
30292>>>>>>>    
30292>>>>>>>    Procedure Set pbAltDragCustomization Boolean bValue
30294>>>>>>>        Send SetComOptionsProperty set_pbPrivateAltDragCustomization set_ComAltDragCustomization bValue
30295>>>>>>>    End_Procedure
30296>>>>>>>    
30296>>>>>>>    Function pbAltDragCustomization Returns Boolean
30298>>>>>>>        Boolean bValue
30298>>>>>>>        Get GetComOptionsProperty get_pbPrivateAltDragCustomization get_ComAltDragCustomization to bValue
30299>>>>>>>        Function_Return bValue
30300>>>>>>>    End_Function
30301>>>>>>>    
30301>>>>>>>    Procedure Set pbOfficeStyleDisabledIcons Boolean bValue
30303>>>>>>>        Send SetComOptionsProperty set_pbPrivateOfficeStyleDisabledIcons set_ComOfficeStyleDisabledIcons bValue
30304>>>>>>>    End_Procedure
30305>>>>>>>    
30305>>>>>>>    Function pbOfficeStyleDisabledIcons Returns Boolean
30307>>>>>>>        Boolean bValue
30307>>>>>>>        Get GetComOptionsProperty get_pbPrivateOfficeStyleDisabledIcons get_ComOfficeStyleDisabledIcons to bValue
30308>>>>>>>        Function_Return bValue
30309>>>>>>>    End_Function
30310>>>>>>>    
30310>>>>>>>    Procedure Set pbIconsWithShadow Boolean bValue
30312>>>>>>>        Send SetComOptionsProperty set_pbPrivateIconsWithShadow set_ComIconsWithShadow bValue
30313>>>>>>>    End_Procedure
30314>>>>>>>    
30314>>>>>>>    Function pbIconsWithShadow Returns Boolean
30316>>>>>>>        Boolean bValue
30316>>>>>>>        Get GetComOptionsProperty get_pbPrivateIconsWithShadow get_ComIconsWithShadow to bValue
30317>>>>>>>        Function_Return bValue
30318>>>>>>>    End_Function
30319>>>>>>>    
30319>>>>>>>    Procedure Set pbTimerUpdate Boolean bValue
30321>>>>>>>        Handle hoTimer
30321>>>>>>>        Set pbPrivateTimerUpdate to bValue
30322>>>>>>>        If (IsComObjectCreated(Self)) Begin
30324>>>>>>>            Get phoTimer to hoTimer
30325>>>>>>>            Set pbEnabled of hoTimer to bValue
30326>>>>>>>        End
30326>>>>>>>>
30326>>>>>>>    End_Procedure
30327>>>>>>>    
30327>>>>>>>    Function pbTimerUpdate Returns Boolean
30329>>>>>>>        Boolean bValue
30329>>>>>>>        Get pbPrivateTimerUpdate to bValue
30330>>>>>>>        Function_Return bValue
30331>>>>>>>    End_Function
30332>>>>>>>    
30332>>>>>>>    
30332>>>>>>>    Procedure Set pbAutoResizeIcons Boolean bValue
30334>>>>>>>        Handle hoPaint
30334>>>>>>>        Variant vPaint
30334>>>>>>>        
30334>>>>>>>        Set pbPrivateAutoResizeIcons to bValue
30335>>>>>>>        If (IsComObjectCreated(Self)) Begin
30337>>>>>>>            Get Create (RefClass(cCJPaintManager)) to hoPaint
30338>>>>>>>            Get ComPaintManager to vPaint
30339>>>>>>>            Set pvComObject of hoPaint to vPaint
30340>>>>>>>            Set ComAutoResizeIcons of hoPaint to bValue
30341>>>>>>>            Send Destroy of hoPaint
30342>>>>>>>        End
30342>>>>>>>>
30342>>>>>>>    End_Procedure
30343>>>>>>>    
30343>>>>>>>    Function pbAutoResizeIcons Returns Boolean
30345>>>>>>>        Boolean bValue
30345>>>>>>>        Get pbPrivateAutoResizeIcons to bValue
30346>>>>>>>        Function_Return bValue
30347>>>>>>>    End_Function
30348>>>>>>>    
30348>>>>>>>    
30348>>>>>>>    // returns the CommandBars object handle, which is this object. All menu objects
30348>>>>>>>    // within a command bar will get this via delegation. The exception is context menus (and
30348>>>>>>>    // children of context menus) which uses the global commandbars variable instead.
30348>>>>>>>    Function CommandBarSystemObject Returns Handle
30350>>>>>>>        Function_Return Self
30351>>>>>>>    End_Function
30352>>>>>>>    
30352>>>>>>>    // these are here to make life easier. These return a df-object attached to
30352>>>>>>>    // the following collecions and child objects. These are used enough that
30352>>>>>>>    // an easy access to them was provided.
30352>>>>>>>    
30352>>>>>>>    Function ActionsCollection Returns Handle
30354>>>>>>>        Handle hoPrivate
30354>>>>>>>        Variant vCom
30354>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30356>>>>>>>            Function_Return 0
30357>>>>>>>        End
30357>>>>>>>>
30357>>>>>>>        
30357>>>>>>>        Get phoPrivateActions to hoPrivate
30358>>>>>>>        Get ComActions of hoPrivate to vCom
30359>>>>>>>        Set pvComObject of hoPrivate to vCom
30360>>>>>>>        Function_Return hoPrivate
30361>>>>>>>    End_Function
30362>>>>>>>    
30362>>>>>>>    Function DesignerControlsCollection Returns Handle
30364>>>>>>>        Handle hoPrivate
30364>>>>>>>        Variant vCom
30364>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30366>>>>>>>            Function_Return 0
30367>>>>>>>        End
30367>>>>>>>>
30367>>>>>>>        
30367>>>>>>>        Get phoPrivateDesignerControls to hoPrivate
30368>>>>>>>        Get ComDesignerControls to vCom
30369>>>>>>>        Set pvComObject of hoPrivate to vCom
30370>>>>>>>        Function_Return hoPrivate
30371>>>>>>>    End_Function
30372>>>>>>>    
30372>>>>>>>    Function KeyBindingsCollection Returns Handle
30374>>>>>>>        Handle hoPrivate
30374>>>>>>>        Variant vCom
30374>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30376>>>>>>>            Function_Return 0
30377>>>>>>>        End
30377>>>>>>>>
30377>>>>>>>        
30377>>>>>>>        Get phoPrivateKeyBindings to hoPrivate
30378>>>>>>>        Get ComKeyBindings to vCom
30379>>>>>>>        Set pvComObject of hoPrivate to vCom
30380>>>>>>>        Function_Return hoPrivate
30381>>>>>>>    End_Function
30382>>>>>>>    
30382>>>>>>>    Function OptionsObject Returns Handle
30384>>>>>>>        Handle hoPrivate
30384>>>>>>>        Variant vCom
30384>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30386>>>>>>>            Function_Return 0
30387>>>>>>>        End
30387>>>>>>>>
30387>>>>>>>        
30387>>>>>>>        Get phoPrivateOptions to hoPrivate
30388>>>>>>>        Get ComOptions to vCom
30389>>>>>>>        Set pvComObject of hoPrivate to vCom
30390>>>>>>>        Function_Return hoPrivate
30391>>>>>>>    End_Function
30392>>>>>>>    
30392>>>>>>>    
30392>>>>>>>    // when a commandbars is deactivated, this is called.
30392>>>>>>>    // save layout as needed
30392>>>>>>>    // release all of the action objects in the various arrays
30392>>>>>>>    // make sure that all DF objects are released.
30392>>>>>>>    // One oddity is that at this point the object is deactivated and this causes the
30392>>>>>>>    // statubar's visibleState to always be false. We correct for this in the statusbar's pbVisible
30392>>>>>>>    Procedure ReleaseComObject
30394>>>>>>>        Handle[] hoObjects hoEmpty
30396>>>>>>>        Handle hoTimer hoObj
30396>>>>>>>        Integer i iCount
30396>>>>>>>        Variant vTab
30396>>>>>>>        
30396>>>>>>>        Get phoTimer to hoTimer
30397>>>>>>>        Set pbEnabled of hoTimer to False
30398>>>>>>>        
30398>>>>>>>        Send SaveEnvironment // save layout if needed
30399>>>>>>>        
30399>>>>>>>        // clear the active updates array
30399>>>>>>>        Set phoActiveUpdates to hoEmpty
30400>>>>>>>        
30400>>>>>>>        // release all actions attached to DF objects. This will release actions
30400>>>>>>>        // in context menus
30400>>>>>>>        Get phoRegisteredActions to hoObjects
30401>>>>>>>        Move (SizeOfArray(hoObjects)) to iCount
30402>>>>>>>        For i from 0 to (iCount-1)
30408>>>>>>>>
30408>>>>>>>            // it's possible that we've got actions that have been already been destroyed during shut down (context menus)
30408>>>>>>>            Get Object_Id of hoObjects[i] to hoObj
30409>>>>>>>            If hoObj Begin
30411>>>>>>>                Send ReleaseComObject of hoObj
30412>>>>>>>            End
30412>>>>>>>>
30412>>>>>>>        Loop
30413>>>>>>>>
30413>>>>>>>        Set phoRegisteredActions to hoEmpty
30414>>>>>>>        
30414>>>>>>>        // this should not be needed, but it can't hurt.
30414>>>>>>>        Broadcast Recursive_up Send ReleaseComObject
30416>>>>>>>        Send OnRelease
30417>>>>>>>        Forward Send ReleaseComObject
30419>>>>>>>    End_Procedure
30420>>>>>>>    
30420>>>>>>>    Procedure OnCreateTabbedWorkspace Handle hoTabWorkspace Handle hoTabPaintManager
30422>>>>>>>    End_Procedure
30423>>>>>>>    
30423>>>>>>>    // This sets all of the commandbars properties and the options properties
30423>>>>>>>    Procedure CreateCommandBars
30425>>>>>>>        Handle hWND hoClient hoMain hoOptions hoImageManager hoCommandBar hoTimer hoPaint
30425>>>>>>>        Variant vToolbarObject vImageManager vPaint
30425>>>>>>>        Integer eVisualTheme eAnimation
30425>>>>>>>        Integer iLast
30425>>>>>>>        Boolean bMDIMEnu
30425>>>>>>>        Boolean bEnableCustomization bAltDragCustomization bLargeIcons bShowTextBelowIcons bAlwaysShowFullMenus bShowFullAfterDelay
30425>>>>>>>        Boolean bToolBarScreenTips bToolBarAccelTips bShowPopupBarToolTips bAutoHideUnusedPopups
30425>>>>>>>        Boolean bOfficeStyleDisabledIcons bFloatToolbarsByDoubleClick bSyncFloatingToolbars bShowExpandButtonAlways bIconsWithShadow
30425>>>>>>>        Boolean bTimer bAutoResizeIcons bTabbedWorkspaces
30425>>>>>>>        
30425>>>>>>>        Get pePrivateVisualTheme to eVisualTheme
30426>>>>>>>        Get pbPrivateEnableCustomization to bEnableCustomization
30427>>>>>>>        Get pbPrivateAltDragCustomization to bAltDragCustomization
30428>>>>>>>        Get pePrivateAnimation to eAnimation
30429>>>>>>>        Get pbPrivateLargeIcons to bLargeIcons
30430>>>>>>>        Get pbPrivateShowTextBelowIcons to bShowTextBelowIcons
30431>>>>>>>        Get pbPrivateAlwaysShowFullMenus to bAlwaysShowFullMenus
30432>>>>>>>        Get pbPrivateShowFullAfterDelay to bShowFullAfterDelay
30433>>>>>>>        Get pbPrivateToolBarScreenTips to bToolBarScreenTips
30434>>>>>>>        Get pbPrivateToolBarAccelTips to bToolBarAccelTips
30435>>>>>>>        Get pbPrivateShowPopupBarToolTips to bShowPopupBarToolTips
30436>>>>>>>        Get pbPrivateOfficeStyleDisabledIcons to bOfficeStyleDisabledIcons
30437>>>>>>>        Get pbPrivateIconsWithShadow to bIconsWithShadow
30438>>>>>>>        Get pbPrivateFloatToolbarsByDoubleClick to bFloatToolbarsByDoubleClick
30439>>>>>>>        Get pbPrivateSyncFloatingToolbars   to bSyncFloatingToolbars
30440>>>>>>>        Get pbPrivateShowExpandButtonAlways to bShowExpandButtonAlways
30441>>>>>>>        Get pbPrivateAutoHideUnusedPopups   to bAutoHideUnusedPopups
30442>>>>>>>        Get pbPrivateAutoResizeIcons        to bAutoResizeIcons
30443>>>>>>>        Get pbTabbedWorkspaces to bTabbedWorkspaces
30444>>>>>>>        
30444>>>>>>>        // attach to parent window. This should actually happen automatically
30444>>>>>>>        Get Parent to hoMain
30445>>>>>>>        Get Window_Handle of hoMain to hWND
30446>>>>>>>        Send ComAttachToWindow hWND
30447>>>>>>>        
30447>>>>>>>        // if an MDI menu, find and set the client area
30447>>>>>>>        Get pbMDIMenu to bMDIMenu
30448>>>>>>>        If bMDIMEnu Begin
30450>>>>>>>            Get ClientAreaObject to hoClient
30451>>>>>>>            If hoClient Begin
30453>>>>>>>                If not (Active_State(hoClient)) Begin
30455>>>>>>>                    Send Add_Focus of hoClient hoMain
30456>>>>>>>                End
30456>>>>>>>>
30456>>>>>>>                Get Window_Handle of hoClient to hWND
30457>>>>>>>                Send ComSetMDIClient hWND
30458>>>>>>>            End
30458>>>>>>>>
30458>>>>>>>        End
30458>>>>>>>>
30458>>>>>>>        
30458>>>>>>>        // make sure the first command bar is a main menu
30458>>>>>>>        Get Create U_cCJCommandBar to hoCommandBar
30459>>>>>>>        Get ComAddMenuBar "Main menu" to vToolbarObject
30460>>>>>>>        Set pvComObject of hoCommandBar to vToolbarObject
30461>>>>>>>        Set ComVisible of hoCommandBar to False
30462>>>>>>>        Send Destroy of hoCommandBar
30463>>>>>>>        
30463>>>>>>>        
30463>>>>>>>        // the following are set directly in the object
30463>>>>>>>        Set ComScaleMode to  xtpScalePixel
30464>>>>>>>        //Set ComVisualTheme to eVisualTheme
30464>>>>>>>        Set peVisualTheme to eVisualTheme
30465>>>>>>>        Send ComEnableCustomization bEnableCustomization
30466>>>>>>>        
30466>>>>>>>        // the following are set in the options object
30466>>>>>>>        Get OptionsObject to hoOptions
30467>>>>>>>        // event is completely disabled
30467>>>>>>>        //Set ComUpdatePeriod of hoOptions to 0 // we don't use this method, shut off the timer
30467>>>>>>>        Set ComAltDragCustomization of hoOptions to bAltDragCustomization
30468>>>>>>>        Set ComAnimation of hoOptions to eAnimation
30469>>>>>>>        Set ComLargeIcons of hoOptions to bLargeIcons
30470>>>>>>>        Set ComShowTextBelowIcons of hoOptions to bShowTextBelowIcons
30471>>>>>>>        Set ComShowFullAfterDelay of hoOptions to bShowFullAfterDelay
30472>>>>>>>        Set ComAlwaysShowFullMenus of hoOptions to bAlwaysShowFullMenus
30473>>>>>>>        Set ComToolBarAccelTips of hoOptions to  bToolBarAccelTips
30474>>>>>>>        Set ComToolBarScreenTips of hoOptions to bToolBarScreenTips
30475>>>>>>>        Set ComShowPopupBarToolTips of hoOptions to bShowPopupBarToolTips
30476>>>>>>>        Set ComOfficeStyleDisabledIcons of hoOptions to bOfficeStyleDisabledIcons
30477>>>>>>>        Set ComIconsWithShadow of hoOptions to bIconsWithShadow
30478>>>>>>>        Set ComFloatToolbarsByDoubleClick of hoOptions to bFloatToolbarsByDoubleClick
30479>>>>>>>        Set ComSyncFloatingToolbars of hoOptions to bSyncFloatingToolbars
30480>>>>>>>        Set ComShowExpandButtonAlways of hoOptions to bShowExpandButtonAlways
30481>>>>>>>        Get ComAutoHideUnusedPopups of hoOptions to bAutoHideUnusedPopups
30482>>>>>>>        
30482>>>>>>>        // the following are set in the paint object
30482>>>>>>>        Get Create (RefClass(cCJPaintManager)) to hoPaint
30483>>>>>>>        Get ComPaintManager to vPaint
30484>>>>>>>        Set pvComObject of hoPaint to vPaint
30485>>>>>>>        Set ComAutoResizeIcons of hoPaint to bAutoResizeIcons
30486>>>>>>>        Send Destroy of hoPaint
30487>>>>>>>        
30487>>>>>>>        Send ComEnableActions
30488>>>>>>>        
30488>>>>>>>        // We must explicitly create an image list collection and add it to the object
30488>>>>>>>        Get Create U_cCJImageManager to hoImageManager
30489>>>>>>>        Send CreateComObject of hoImageManager
30490>>>>>>>        Get ComIcons of hoImageManager to vImageManager
30491>>>>>>>        Set ComIcons to vImageManager
30492>>>>>>>        Send destroy of hoImageManager
30493>>>>>>>        // as of 18.3 it appears we must explicitly set this or you get fuzzy images
30493>>>>>>>        Send ComSetDPIScallingOptions of hoOptions False False
30494>>>>>>>        
30494>>>>>>>        // if tabbed workspace, enable it.
30494>>>>>>>        If (bTabbedWorkspaces) Begin
30496>>>>>>>            Send EnableTabbedWorkspace
30497>>>>>>>        End
30497>>>>>>>>
30497>>>>>>>        
30497>>>>>>>        
30497>>>>>>>        // event sent before any child objects are created.
30497>>>>>>>        Send OnCreateCommandBars
30498>>>>>>>        
30498>>>>>>>        // this creates all of the actions and items
30498>>>>>>>        Broadcast Send CreateComInstance
30500>>>>>>>        
30500>>>>>>>        // we keep track of the last action Id and last bar Id auto assigned.
30500>>>>>>>        // We use this to determine if a load environment can be safely done.
30500>>>>>>>        // Anything auto-assigned after this is considered to be dynamic.
30500>>>>>>>        Get LastAssignedId to iLast
30501>>>>>>>        Set piLastAssignedDesignTimeId to iLast
30502>>>>>>>        Get piLastBarId to iLast
30503>>>>>>>        Set piLastAssignedDesignTimeBarId to iLast
30504>>>>>>>        
30504>>>>>>>        Send LoadEnvironment // load layout if needed
30505>>>>>>>        
30505>>>>>>>        Get pbTimerUpdate to bTimer
30506>>>>>>>        If bTimer Begin
30508>>>>>>>            Get phoTimer to hoTimer
30509>>>>>>>            Set pbEnabled of hoTimer to True
30510>>>>>>>        End
30510>>>>>>>>
30510>>>>>>>        
30510>>>>>>>        Send ComRecalcLayout
30511>>>>>>>    End_Procedure
30512>>>>>>>    
30512>>>>>>>    // enable tabbed workspaces. This should only happen when the CON commandbars are
30512>>>>>>>    // being created as part of CreateCommandBars when pbTabbedWorkspaces is true.
30512>>>>>>>    // Use OnCreateTabbedWorkspace to customize
30512>>>>>>>    Procedure EnableTabbedWorkspace
30514>>>>>>>        Variant vTab vPaint
30514>>>>>>>        Handle hoTab hoPaint
30514>>>>>>>        Integer iFgs
30514>>>>>>>        
30514>>>>>>>        Get Create (RefClass(cCJTabWorkspace)) to hoTab
30515>>>>>>>        Get ComShowTabWorkspace True to vTab
30516>>>>>>>        Set pvComObject of hoTab to vTab
30517>>>>>>>        Send ComEnableGroups of hoTab
30518>>>>>>>        Get ComFlags of hoTab to iFgs
30519>>>>>>>        Set ComFlags of hoTab to (iFgs ior xtpWorkspaceShowCloseTab ior xtpWorkspaceShowActiveFiles)
30520>>>>>>>        Get ComPaintManager of hoTab to vPaint
30521>>>>>>>        Get Create (RefClass(cCJTabPaintManager)) to hoPaint
30522>>>>>>>        Set pvComObject of hoPaint to vPaint
30523>>>>>>>        Set ComShowIcons of hoPaint to False
30524>>>>>>>        // event to customize tabbed workspace
30524>>>>>>>        Send OnCreateTabbedWorkspace hoTab hoPaint
30525>>>>>>>        Send Destroy of hoPaint
30526>>>>>>>        Send Destroy of hoTab
30527>>>>>>>    End_Procedure
30528>>>>>>>    
30528>>>>>>>    // Perform an Update. This can be called manually or via the timer
30528>>>>>>>    // it send update to the Statusbar and to all active actions
30528>>>>>>>    Procedure Update
30530>>>>>>>        Handle[] hoActions
30531>>>>>>>        Handle hoStatusBar
30531>>>>>>>        Integer i iActions
30531>>>>>>>        Variant vAction
30531>>>>>>>        If (IsComObjectCreated(Self)) Begin
30533>>>>>>>            Send OnUpdate // update event for commandbars
30534>>>>>>>            Get phoActiveUpdates to hoActions
30535>>>>>>>            Move (SizeOfArray(hoActions)) to iActions
30536>>>>>>>            For i from 0 to (iActions-1)
30542>>>>>>>>
30542>>>>>>>                Send Update of hoActions[i]
30543>>>>>>>            Loop
30544>>>>>>>>
30544>>>>>>>            Get phoStatusBar to hoStatusBar
30545>>>>>>>            If (hoStatusBar) Begin
30547>>>>>>>                Send Update of hoStatusBar
30548>>>>>>>            End
30548>>>>>>>>
30548>>>>>>>        End
30548>>>>>>>>
30548>>>>>>>    End_Procedure
30549>>>>>>>    
30549>>>>>>>    Procedure UpdateAllActions
30551>>>>>>>        Handle[] hoActions
30552>>>>>>>        Integer i iActions
30552>>>>>>>        Variant vAction
30552>>>>>>>        Get phoRegisteredActions to hoActions
30553>>>>>>>        Move (SizeOfArray(hoActions)) to iActions
30554>>>>>>>        For i from 0 to (iActions-1)
30560>>>>>>>>
30560>>>>>>>            Send Update of hoActions[i]
30561>>>>>>>        Loop
30562>>>>>>>>
30562>>>>>>>    End_Procedure
30563>>>>>>>    
30563>>>>>>>    Function LastAssignedId Returns Integer
30565>>>>>>>        Integer[] iActionIdPool
30566>>>>>>>        Integer iId iCount
30566>>>>>>>        Get piActionIdPool to iActionIdPool
30567>>>>>>>        Move (SizeOfArray(iActionIdPool)) to iCount
30568>>>>>>>        If (iCount=0) Begin
30570>>>>>>>            Move ID_CommandBarsAutoStart to iId
30571>>>>>>>        End
30571>>>>>>>>
30571>>>>>>>        Else Begin
30572>>>>>>>            Move (iActionIdPool[0]) to iId
30573>>>>>>>        End
30573>>>>>>>>
30573>>>>>>>        Function_Return iId
30574>>>>>>>    End_Function
30575>>>>>>>    
30575>>>>>>>    Function AssignID Returns Integer // auto assign an Id. Callend in end_construct_object if needed
30577>>>>>>>        Integer[] iActionIdPool
30578>>>>>>>        Integer iId iCount
30578>>>>>>>        Get piActionIdPool to iActionIdPool
30579>>>>>>>        Move (SizeOfArray(iActionIdPool)) to iCount
30580>>>>>>>        If (iCount=0) Begin
30582>>>>>>>            Move ID_CommandBarsAutoStart to iId
30583>>>>>>>            Move iId to iActionIdPool[0]
30584>>>>>>>        End
30584>>>>>>>>
30584>>>>>>>        Else If (iCount=1) Begin
30587>>>>>>>            Move (iActionIdPool[0]+1) to iId
30588>>>>>>>            Move iId to iActionIdPool[0]
30589>>>>>>>        End
30589>>>>>>>>
30589>>>>>>>        Else Begin
30590>>>>>>>            Move iActionIdPool[iCount-1] to iId
30591>>>>>>>            Move (ResizeArray(iActionIdPool,iCount-1)) to iActionIdPool
30592>>>>>>>        End
30592>>>>>>>>
30592>>>>>>>        Set piActionIdPool to iActionIdPool
30593>>>>>>>        Function_Return iId
30594>>>>>>>    End_Function
30595>>>>>>>    
30595>>>>>>>    Procedure ReleaseID Integer iId // might be needed to maintain a pool of actions
30597>>>>>>>        Integer[] iActionIdPool
30598>>>>>>>        Integer iCount iIndex
30598>>>>>>>        Get piActionIdPool to iActionIdPool
30599>>>>>>>        // we must make sure that an action is never added to the pool more than once.
30599>>>>>>>        // this first value is a trick value (the highest number) so we allow a hit on
30599>>>>>>>        // that one. So -1 or 0 is ok
30599>>>>>>>        If (SearchArray(iId,iActionIdPool)<=0) Begin
30601>>>>>>>            Move (SizeOfArray(iActionIdPool)) to iCount
30602>>>>>>>            Move iId to iActionIdPool[iCount]
30603>>>>>>>            Set piActionIdPool to iActionIdPool
30604>>>>>>>        End
30604>>>>>>>>
30604>>>>>>>        Else Begin
30605>>>>>>>            Error DFERR_PROGRAM "Assert: Duplicate released ID in commandbars"
30606>>>>>>>>
30606>>>>>>>        End
30606>>>>>>>>
30606>>>>>>>    End_Procedure
30607>>>>>>>    
30607>>>>>>>    Function AssignBarId Returns Integer
30609>>>>>>>        Integer iId
30609>>>>>>>        Get piLastBarId to iId
30610>>>>>>>        Increment iId
30611>>>>>>>        Set piLastBarId to iId
30612>>>>>>>        Function_Return iId
30613>>>>>>>    End_Function
30614>>>>>>>    
30614>>>>>>>    Procedure AddActiveAction Handle hoAction
30616>>>>>>>        Handle[] hoActiveActions
30617>>>>>>>        Get phoActiveUpdates to hoActiveActions
30618>>>>>>>        If (SearchArray(hoAction,hoActiveActions)=-1) Begin
30620>>>>>>>            Move hoAction to hoActiveActions[SizeOfArray(hoActiveActions)]
30621>>>>>>>            Set phoActiveUpdates to hoActiveActions
30622>>>>>>>        End
30622>>>>>>>>
30622>>>>>>>    End_Procedure
30623>>>>>>>    
30623>>>>>>>    Procedure RegisterAction Handle hoAction
30625>>>>>>>        Boolean bActive
30625>>>>>>>        Handle[] hoActions
30626>>>>>>>        Get phoRegisteredActions to hoActions
30627>>>>>>>        Move hoAction to hoActions[SizeOfArray(hoActions)]
30628>>>>>>>        Set phoRegisteredActions to hoActions
30629>>>>>>>        Get pbActiveUpdate of hoAction to bActive
30630>>>>>>>        If bActive Begin
30632>>>>>>>            Send AddActiveAction hoAction
30633>>>>>>>        End
30633>>>>>>>>
30633>>>>>>>    End_Procedure
30634>>>>>>>    
30634>>>>>>>    // remove action from list of active actions.
30634>>>>>>>    Procedure RemoveActiveAction Handle hoAction
30636>>>>>>>        Handle[] hoActiveActions
30637>>>>>>>        Integer iIndex
30637>>>>>>>        Get phoActiveUpdates to hoActiveActions
30638>>>>>>>        Move (SearchArray(hoAction,hoActiveActions)) to iIndex
30639>>>>>>>        If (iIndex<>-1) Begin
30641>>>>>>>            Move (RemoveFromArray(hoActiveActions,iIndex)) to hoActiveActions
30642>>>>>>>            Set phoActiveUpdates to hoActiveActions
30643>>>>>>>        End
30643>>>>>>>>
30643>>>>>>>    End_Procedure
30644>>>>>>>    
30644>>>>>>>    // remove action from list of registered actions.
30644>>>>>>>    Procedure RemoveRegisteredAction Handle hoAction
30646>>>>>>>        Handle[] hoActiveActions
30647>>>>>>>        Boolean bActive
30647>>>>>>>        Integer iIndex i iCount
30647>>>>>>>        Get phoRegisteredActions to hoActiveActions
30648>>>>>>>        Move (SearchArray(hoAction,hoActiveActions)) to iIndex
30649>>>>>>>        If (iIndex<>-1) Begin
30651>>>>>>>            Move (SizeOfArray(hoActiveActions)) to iCount
30652>>>>>>>            For i from iIndex to (iCount-2)
30658>>>>>>>>
30658>>>>>>>                Move hoActiveActions[i+1] to hoActiveActions[i]
30659>>>>>>>            Loop
30660>>>>>>>>
30660>>>>>>>            Move (ResizeArray(hoActiveActions,iCount-1)) to hoActiveActions
30661>>>>>>>            Set phoRegisteredActions to hoActiveActions
30662>>>>>>>        End
30662>>>>>>>>
30662>>>>>>>        Get pbActiveUpdate of hoAction to bActive
30663>>>>>>>        If bActive Begin
30665>>>>>>>            Send RemoveActiveAction hoAction
30666>>>>>>>        End
30666>>>>>>>>
30666>>>>>>>    End_Procedure
30667>>>>>>>    
30667>>>>>>>    // Retrieves a populated tGrpIconDir struct for the passed icon name. The data is populated
30667>>>>>>>    // from the icon group resource related to the passed icon name.
30667>>>>>>>    // sIcon        - is the name of the icon file e.g. "cut.ico" - this must be an icon resource compiled
30667>>>>>>>    //                into the running application.
30667>>>>>>>    // GroupIconDir - [out] This is the tWinGrpIconDir struct that is populated and passed back
30667>>>>>>>    // Returns      - True of the icon group data could be read otherwise returns false.
30667>>>>>>>    Function GetIconGroupData String sIcon tWinGrpIconDir ByRef GroupIconDir Returns Boolean
30669>>>>>>>        Handle hResInfo hResData
30669>>>>>>>        Pointer lpType lpIconInfo lpDest
30669>>>>>>>        Integer iIcon icIcon
30669>>>>>>>        Longptr iStructSize
30669>>>>>>>        Boolean bOK
30669>>>>>>>        tWinGrpIconDirEntry GroupIconDirEntry
30669>>>>>>>        tWinGrpIconDirEntry GroupIconDirEntry
30669>>>>>>>        
30669>>>>>>>        // Retrieve information about the icon group resource
30669>>>>>>>        Move (FindResource(GetModuleHandleW(0), Utf8ToAnsi(sIcon), RT_GROUP_ICON)) to hResInfo   // get the resource info handle for the icon group resource
30670>>>>>>>        If (hResInfo = 0) ;            Function_Return False
30673>>>>>>>        
30673>>>>>>>        Move (LoadResource(GetModuleHandleW(0), hResInfo)) to hResData               // get the resource data handle from the resource info handle
30674>>>>>>>        If (hResData = 0) ;            Function_Return False
30677>>>>>>>        
30677>>>>>>>        Move (LockResource(hResData)) to lpIconInfo                                 // pointer to tGrpIconDir struct
30678>>>>>>>        If (lpIconInfo = 0) ;            Function_Return False
30681>>>>>>>        
30681>>>>>>>        // Copy the resource information into our Group Icon Dir Struct
30681>>>>>>>        Move (AddressOf(GroupIconDir)) to lpDest
30682>>>>>>>        Move (MemCopy(lpDest, lpIconInfo, 6)) to bOK     // copy the base data
30683>>>>>>>        If (not(bOK)) ;            Function_Return False
30686>>>>>>>        
30686>>>>>>>        Move GroupIconDir.idCount to icIcon                            // get the number of IconDirEntry members
30687>>>>>>>        Move GroupIconDirEntry to GroupIconDir.idEntries[icIcon-1]     // create the empty IconDirEntry array
30688>>>>>>>        Move (SizeOfType(tWinGrpIconDirEntry)) to iStructSize
30689>>>>>>>        Move (lpIconInfo + 6) to lpIconInfo    // advance the memory pointer to the start of the array
30690>>>>>>>        
30690>>>>>>>        For iIcon from 0 to (icIcon-1)    // copy each array member one by one
30696>>>>>>>>
30696>>>>>>>            Move (AddressOf(GroupIconDir.idEntries[iIcon])) to lpDest
30697>>>>>>>            Move (MemCopy(lpDest, lpIconInfo, iStructSize)) to bOK     // copy the base data
30698>>>>>>>            If (not(bOK)) ;                Function_Return False
30701>>>>>>>            
30701>>>>>>>            // advance the memory pointer to the start of the next array member
30701>>>>>>>            Move (lpIconInfo + iStructSize) to lpIconInfo
30702>>>>>>>        Loop
30703>>>>>>>>
30703>>>>>>>        
30703>>>>>>>        Function_Return True
30704>>>>>>>    End_Function
30705>>>>>>>    
30705>>>>>>>    // Loads all icon image resources that belong to the icon group of the passed icon name.
30705>>>>>>>    // The entire icon group is added to the commandbar's icons collection with the same icon ID.
30705>>>>>>>    // sIcon        - Name of the resource group icon we are loading e.g. "Save.ico"
30705>>>>>>>    // iID          - CJ Commandbar ID to be assigned to the icons that we load
30705>>>>>>>    // hoImageIcons - Handle to the command bar's cCJImageManagerIcons object where the icon will be added
30705>>>>>>>    // eImageType   - The commandbar image type, e.g. xtpImageNormal
30705>>>>>>>    // Boolean      - Returns True if successful, otherwise returns False
30705>>>>>>>    Function LoadIconGroupFromResource String sIcon Integer iID Handle hoImageIcons Integer eImageType Returns Boolean
30707>>>>>>>        Integer iIcon
30707>>>>>>>        tWinGrpIconDir GroupIconDir
30707>>>>>>>        tWinGrpIconDir GroupIconDir
30707>>>>>>>        Boolean bRetValue
30707>>>>>>>        
30707>>>>>>>        Get GetIconGroupData sIcon (&GroupIconDir) to bRetValue
30708>>>>>>>        
30708>>>>>>>        If (bRetValue) Begin
30710>>>>>>>            // Iterate the icon entries...
30710>>>>>>>            For iIcon from 0 to (GroupIconDir.idCount-1)
30716>>>>>>>>
30716>>>>>>>                Send ComLoadIconFromResource of hoImageIcons (GetModuleHandleW(0)) GroupIconDir.idEntries[iIcon].nID iID eImageType
30717>>>>>>>            Loop
30718>>>>>>>>
30718>>>>>>>        End
30718>>>>>>>>
30718>>>>>>>        
30718>>>>>>>        Function_Return bRetValue
30719>>>>>>>    End_Function
30720>>>>>>>    
30720>>>>>>>    
30720>>>>>>>    // Adds an image to imagelist. Pass if bmp or icon, the image name and the Id and image type (normal, disabled, etc.)
30720>>>>>>>    // With Bitmaps this will first look for the resource then search for the file in the file path.
30720>>>>>>>    // With Icons it checks for the file first (explained below)
30720>>>>>>>    // return Image Id if success
30720>>>>>>>    Function AddImageType Boolean bIsIcon String sImage Integer iId Integer eImageType Returns Integer
30722>>>>>>>        Handle hBitmap
30722>>>>>>>        Variant vImageManager
30722>>>>>>>        Handle hoImageIcons
30722>>>>>>>        Integer iVoid
30722>>>>>>>        Boolean bOk
30722>>>>>>>        String sFileImage
30722>>>>>>>        
30722>>>>>>>        If (iId=0) Begin
30724>>>>>>>            Get piLastImageId to iId
30725>>>>>>>            Increment iId
30726>>>>>>>            Set piLastImageId to iId
30727>>>>>>>        End
30727>>>>>>>>
30727>>>>>>>        
30727>>>>>>>        Get CreateNamed (RefClass(cCJImageManagerIcons)) "oImageManagerIcons" to hoImageIcons
30728>>>>>>>        Get ComIcons to vImageManager
30729>>>>>>>        Set pvComObject of hoImageIcons to vImageManager
30730>>>>>>>        
30730>>>>>>>        If bIsIcon Begin
30732>>>>>>>            Get LoadIconGroupFromResource sImage iId hoImageIcons eImageType to bOk
30733>>>>>>>            
30733>>>>>>>            If (not(bOk)) Begin
30735>>>>>>>                Get_File_Path sImage to sFileImage // find path in DFPATH, if appropriate
30736>>>>>>>                If (sFileImage<>"") Begin
30738>>>>>>>                    Send ComLoadIcon of hoImageIcons sFileImage iId eImageType
30739>>>>>>>                    Move True to bOk
30740>>>>>>>                End
30740>>>>>>>>
30740>>>>>>>            End
30740>>>>>>>>
30740>>>>>>>        End
30740>>>>>>>>
30740>>>>>>>        Else Begin
30741>>>>>>>            // if a bitmap - load from resource first then from file
30741>>>>>>>            Move (LoadImage(GetModuleHandleW(0), sImage, IMAGE_BITMAP, 0, 0, 0)) to hBitmap
30742>>>>>>>            
30742>>>>>>>            If (hBitmap=0) Begin // the bitmap was not in the EXE resource
30744>>>>>>>                Get_File_Path sImage to sFileImage // find path in DFPATH, if appropriate
30745>>>>>>>                
30745>>>>>>>                If (sFileImage <>"") Begin // The image was found!
30747>>>>>>>                    Send ComLoadBitmap of hoImageIcons sFileImage iId eImageType
30748>>>>>>>                    Move True to bOk
30749>>>>>>>                End
30749>>>>>>>>
30749>>>>>>>            End
30749>>>>>>>>
30749>>>>>>>            
30749>>>>>>>            If hBitmap Begin
30751>>>>>>>                Send ComAddBitmap of hoImageIcons hBitmap iId eImageType False
30752>>>>>>>                Move (DeleteObject(hBitmap)) to iVoid
30753>>>>>>>                Move True to bOk
30754>>>>>>>            End
30754>>>>>>>>
30754>>>>>>>        End
30754>>>>>>>>
30754>>>>>>>        
30754>>>>>>>        Send Destroy of hoImageIcons
30755>>>>>>>        
30755>>>>>>>        Function_Return (If(bOk, iId, 0))
30756>>>>>>>    End_Function
30757>>>>>>>    
30757>>>>>>>    // Adds an image to imagelist.
30757>>>>>>>    // We assume that this is an icon unless the .bmp extension is passed.
30757>>>>>>>    // return True if success
30757>>>>>>>    Function AddImage String sImage Integer iId Integer eImageType Returns Integer
30759>>>>>>>        Boolean bIsIcon
30759>>>>>>>        // Command Bars support many graphics formats including .bmp, .gif, .jpg etc.
30759>>>>>>>        // These are all non-icon formats...
30759>>>>>>>        Move (Right(Lowercase(sImage), 4) = ".ico") to bIsIcon
30760>>>>>>>        Get AddImageType bIsIcon sImage iId eImageType to iId
30761>>>>>>>        Function_Return iId
30762>>>>>>>    End_Function
30763>>>>>>>    
30763>>>>>>>    // Create a StateOptions object and set it as needed. This is used to save and
30763>>>>>>>    // load settings. You could augment this to customize as needed.
30763>>>>>>>    Function CreateStateOptions Integer eLayout Returns Handle
30765>>>>>>>        Handle hoStateOptions
30765>>>>>>>        Variant vStateOptions
30765>>>>>>>        
30765>>>>>>>        Get Create U_cCJStateOptions to hoStateOptions
30766>>>>>>>        Get ComCreateStateOptions to vStateOptions
30767>>>>>>>        Set pvComObject of hoStateOptions to vStateOptions
30768>>>>>>>        
30768>>>>>>>        Set ComLoadSilent of hoStateOptions to True
30769>>>>>>>        
30769>>>>>>>        // If True, only CommandBars that have been customized will be saved.
30769>>>>>>>        Set ComSaveOnlyCustomized of hoStateOptions to True
30770>>>>>>>        
30770>>>>>>>        // If True, the original state of the CommandBars is saved along with the customized state
30770>>>>>>>        // For example, if a button on a toolbar is moved, then both the original and modified states will be saved.
30770>>>>>>>        Set ComSaveOriginalControls of hoStateOptions to True
30771>>>>>>>        
30771>>>>>>>        Set ComSerializeDesignerControls of hoStateOptions to False
30772>>>>>>>        
30772>>>>>>>        // If True, the controls in the CommandBars will be saved. If False, no controls will be saved,
30772>>>>>>>        // regardless of the other settings.
30772>>>>>>>        Set ComSerializeControls of hoStateOptions to (eLayout=rlSaveRestoreAll)
30773>>>>>>>        
30773>>>>>>>        // If True, the images stored in the ImageManager will be saved.
30773>>>>>>>        Set ComSerializeImages of hoStateOptions to False
30774>>>>>>>        
30774>>>>>>>        // If True, the layout of the CommandBars will be saved. The Layout includes information such as
30774>>>>>>>        // bar position, location, and size.
30774>>>>>>>        Set ComSerializeLayout of hoStateOptions to (eLayout<>rlNoSaveRestore)
30775>>>>>>>        
30775>>>>>>>        // If True, the setting on the Keyboard and Options pages of the Customize dialog will
30775>>>>>>>        // be saved. This includes shortcut keys and CommandBar options like large icons and full menus.
30775>>>>>>>        Set ComSerializeOptions of hoStateOptions to (eLayout=rlSaveRestoreAll or eLayout=rlSaveRestoreFullLayout)
30776>>>>>>>        
30776>>>>>>>        // in our model, actions are never saved.
30776>>>>>>>        Set ComSerializeActions of hoStateOptions to False
30777>>>>>>>        
30777>>>>>>>        Function_Return hoStateOptions
30778>>>>>>>    End_Function
30779>>>>>>>    
30779>>>>>>>    Function CreatePropExchangeObject Returns Handle
30781>>>>>>>        Handle hoPropExchange hoGlobal
30781>>>>>>>        Variant vPropExchange vGlobal
30781>>>>>>>        
30781>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30783>>>>>>>            Error DFERR_PROGRAM "Cannot exchange Commands bars data. COM object not created"
30784>>>>>>>>
30784>>>>>>>            Function_Return 0
30785>>>>>>>        End
30785>>>>>>>>
30785>>>>>>>        
30785>>>>>>>        Get Create U_cCJCommandBarsGlobalSettings to hoGlobal
30786>>>>>>>        Get ComGlobalSettings to vGlobal
30787>>>>>>>        Set pvComObject of hoGlobal to vGlobal
30788>>>>>>>        Get ComCreatePropExchange of hoGlobal to vPropExchange
30789>>>>>>>        Get Create U_cCJPropExchange to hoPropExchange
30790>>>>>>>        Set pvComObject of hoPropExchange to vPropExchange
30791>>>>>>>        Send Destroy of hoGlobal
30792>>>>>>>        Function_Return hoPropExchange
30793>>>>>>>    End_Function
30794>>>>>>>    
30794>>>>>>>    // exchange the current commandbar layout with the prop exchange object.
30794>>>>>>>    // pass the exchange object and the section name to save this under. The exchange
30794>>>>>>>    // object contains information if this is a save or load (ComLoading).
30794>>>>>>>    // can be called by any exchange object allowing developers to save a commandbar
30794>>>>>>>    // structure as part of other information they may be saving and loading
30794>>>>>>>    
30794>>>>>>>    Procedure ExchangeLayout Handle hoExchange String sSection Integer eLayout
30796>>>>>>>        Variant vSection vOptions
30796>>>>>>>        Handle hoExchangePref hoStatusBar  hoStateOptions
30796>>>>>>>        Integer iLast iLastBar iStatusBarVisible iBuild iIDBuild iIDCount iIDBarCount
30796>>>>>>>        Boolean bLoad bSerializeControls
30796>>>>>>>        
30796>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30798>>>>>>>            Error DFERR_PROGRAM "Cannot exchange Commands bars data. COM object not created"
30799>>>>>>>>
30799>>>>>>>            Procedure_Return
30800>>>>>>>        End
30800>>>>>>>>
30800>>>>>>>        
30800>>>>>>>        Get phoStatusBar to hoStatusBar
30801>>>>>>>        Get ComLoading of hoExchange to bLoad
30802>>>>>>>        Get piLastAssignedDesignTimeId to iLast
30803>>>>>>>        Get piLastAssignedDesignTimeBarId to iLastBar
30804>>>>>>>        Get piLayoutBuild to iBuild
30805>>>>>>>        
30805>>>>>>>        Get CreateStateOptions eLayout to hoStateOptions
30806>>>>>>>        Get ComSerializeControls of hoStateOptions to bSerializeControls
30807>>>>>>>        Get pvComObject of hoStateOptions to vOptions
30808>>>>>>>        
30808>>>>>>>        Get Create U_cCJPropExchange to hoExchangePref
30809>>>>>>>        
30809>>>>>>>        Get ComGetSection of hoExchange sSection to vSection
30810>>>>>>>        Set pvComObject of hoExchangePref to vSection
30811>>>>>>>        
30811>>>>>>>        If (not(bLoad)) Begin
30813>>>>>>>            
30813>>>>>>>            Send ComDoPropExchange vSection vOptions
30814>>>>>>>            Send ComExchangeInt of hoExchangePref "IDCount" (&iLast) 0
30815>>>>>>>            Send ComExchangeInt of hoExchangePref "BarIDCount" (&iLastBar) 0
30816>>>>>>>            If (hoStatusBar) Begin
30818>>>>>>>                Get pbVisible of hoStatusBar to iStatusBarVisible
30819>>>>>>>                Send ComExchangeInt of hoExchangePref "IsStatusBarVisible" (&iStatusBarVisible) 1
30820>>>>>>>            End
30820>>>>>>>>
30820>>>>>>>            Send ComExchangeInt of hoExchangePref "Build" (&iBuild) 0
30821>>>>>>>        End
30821>>>>>>>>
30821>>>>>>>        Else Begin
30822>>>>>>>            // get the build from the data. If it is not what we expect, don't load - it is out of date
30822>>>>>>>            Send ComExchangeInt of hoExchangePref "Build" (&iIDBuild) 0
30823>>>>>>>            If (iIDBuild=iBuild) Begin
30825>>>>>>>                Send ComExchangeInt of hoExchangePref "IDCount" (&iIDCount) 0
30826>>>>>>>                Send ComExchangeInt of hoExchangePref "BarIDCount" (&iIDBarCount) 0
30827>>>>>>>                If (hoStatusBar) Begin
30829>>>>>>>                    Send ComExchangeInt of hoExchangePref "IsStatusBarVisible" (&iStatusBarVisible) 1
30830>>>>>>>                    Set pbVisible of hoStatusBar to iStatusBarVisible
30831>>>>>>>                End
30831>>>>>>>>
30831>>>>>>>                
30831>>>>>>>                // do the load if we serialize controls and the control count is ok
30831>>>>>>>                // and if the barId count is ok
30831>>>>>>>                If ((not(bSerializeControls) or iLast=iIDCount) and iLastBar=iIDBarCount) Begin
30833>>>>>>>                    Send ComDoPropExchange vSection vOptions
30834>>>>>>>                End
30834>>>>>>>>
30834>>>>>>>                Send ComRecalcLayout
30835>>>>>>>            End
30835>>>>>>>>
30835>>>>>>>        End
30835>>>>>>>>
30835>>>>>>>        
30835>>>>>>>        Send destroy of hoExchangePref
30836>>>>>>>        Send Destroy of hoStateOptions
30837>>>>>>>    End_Procedure
30838>>>>>>>    
30838>>>>>>>    
30838>>>>>>>    // saves and loads commands info to the registry.
30838>>>>>>>    // While this is private. It provides a good model for how to do this kind of thing.
30838>>>>>>>    Function LoadLayoutFromRegistry Integer eLayout String sKey Returns Boolean
30840>>>>>>>        Handle hoExchange
30840>>>>>>>        Boolean bOk
30840>>>>>>>        String sSection sFullKey
30840>>>>>>>        
30840>>>>>>>        If (eLayout=rlNoSaveRestore) Begin
30842>>>>>>>            Function_Return True
30843>>>>>>>        End
30843>>>>>>>>
30843>>>>>>>        
30843>>>>>>>        Move ("HKEY_CURRENT_USER\" - sKey) to sFullKey
30844>>>>>>>        Get psLayoutSection to sSection
30845>>>>>>>        Get CreatePropExchangeObject to hoExchange
30846>>>>>>>        
30846>>>>>>>        Get ComCreateAsRegistry of hoExchange True sFullKey to bOk
30847>>>>>>>        
30847>>>>>>>        If not (bOk) Begin
30849>>>>>>>            Error DFERR_PROGRAM "Assert: Cannot load from registry"
30850>>>>>>>>
30850>>>>>>>        End
30850>>>>>>>>
30850>>>>>>>        
30850>>>>>>>        If bOk Begin
30852>>>>>>>            Send ExchangeLayout hoExchange sSection eLayout
30853>>>>>>>            Send ComRecalcLayout
30854>>>>>>>        End
30854>>>>>>>>
30854>>>>>>>        Send destroy of hoExchange
30855>>>>>>>        Function_Return bOk
30856>>>>>>>    End_Function
30857>>>>>>>    
30857>>>>>>>    
30857>>>>>>>    Procedure SaveLayoutToRegistry Integer eLayout String sKey
30859>>>>>>>        Handle hoExchange hoRegistry
30859>>>>>>>        Boolean bOk bExists bVoid
30859>>>>>>>        String sSection sFullKey sShortKey
30859>>>>>>>        
30859>>>>>>>        If (eLayout=rlNoSaveRestore) Begin
30861>>>>>>>            Procedure_Return
30862>>>>>>>        End
30862>>>>>>>>
30862>>>>>>>        
30862>>>>>>>        Move ("HKEY_CURRENT_USER\" - sKey) to sFullKey
30863>>>>>>>        Get psLayoutSection to sSection
30864>>>>>>>        Move (sKey - "\" - sSection) to sShortKey
30865>>>>>>>        
30865>>>>>>>        If (sKey="" or sSection="") Begin
30867>>>>>>>            Error DFERR_PROGRAM "Assert: Registry Key or Section name is invalid"
30868>>>>>>>>
30868>>>>>>>        End
30868>>>>>>>>
30868>>>>>>>        
30868>>>>>>>        Get CreatePropExchangeObject to hoExchange
30869>>>>>>>        Get ComCreateAsRegistry of hoExchange False sFullKey to bOk
30870>>>>>>>        
30870>>>>>>>        If not (bOk) Begin
30872>>>>>>>            Error DFERR_PROGRAM "Assert: Cannot save layout to registry"
30873>>>>>>>>
30873>>>>>>>        End
30873>>>>>>>>
30873>>>>>>>        
30873>>>>>>>        If bOk Begin
30875>>>>>>>            // delete the existing registry information for this section
30875>>>>>>>            Get Create U_cRegistry to hoRegistry
30876>>>>>>>            Set pbLazyWrite of hoRegistry to False
30877>>>>>>>            Get KeyExists of hoRegistry sShortKey to bExists
30878>>>>>>>            If bExists Begin
30880>>>>>>>                Get DeleteKey of hoRegistry sShortKey to bVoid
30881>>>>>>>            End
30881>>>>>>>>
30881>>>>>>>            Send Destroy of hoRegistry
30882>>>>>>>            
30882>>>>>>>            Send ExchangeLayout hoExchange sSection eLayout
30883>>>>>>>        End
30883>>>>>>>>
30883>>>>>>>        
30883>>>>>>>        Send destroy of hoExchange
30884>>>>>>>    End_Procedure
30885>>>>>>>    
30885>>>>>>>    
30885>>>>>>>    Function LoadLayoutFromXML Integer eLayout String sFileName Returns Boolean
30887>>>>>>>        Handle hoExchange
30887>>>>>>>        String sSection
30887>>>>>>>        Boolean bOk
30887>>>>>>>        
30887>>>>>>>        If (eLayout=rlNoSaveRestore) Begin
30889>>>>>>>            Function_Return True
30890>>>>>>>        End
30890>>>>>>>>
30890>>>>>>>        
30890>>>>>>>        Get psLayoutSection to sSection
30891>>>>>>>        Get CreatePropExchangeObject to hoExchange
30892>>>>>>>        
30892>>>>>>>        Get ComCreateAsXML of hoExchange True "Settings" to bOk
30893>>>>>>>        
30893>>>>>>>        If not (bOk) Begin
30895>>>>>>>            Error DFERR_PROGRAM "Assert: Cannot load layout from XML"
30896>>>>>>>>
30896>>>>>>>        End
30896>>>>>>>>
30896>>>>>>>        
30896>>>>>>>        If bOk Begin
30898>>>>>>>            Get ComLoadFromFile of hoExchange sFileName to bOk
30899>>>>>>>            If bOk Begin
30901>>>>>>>                Send ExchangeLayout hoExchange sSection eLayout
30902>>>>>>>                Send ComRecalcLayout
30903>>>>>>>            End
30903>>>>>>>>
30903>>>>>>>        End
30903>>>>>>>>
30903>>>>>>>        Send destroy of hoExchange
30904>>>>>>>        Function_Return bOk
30905>>>>>>>    End_Function
30906>>>>>>>    
30906>>>>>>>    Procedure SaveLayoutToXML Integer eLayout String sFileName
30908>>>>>>>        Handle hoExchange
30908>>>>>>>        String sSection
30908>>>>>>>        Boolean bOk
30908>>>>>>>        
30908>>>>>>>        If (eLayout=rlNoSaveRestore) Begin
30910>>>>>>>            Procedure_Return
30911>>>>>>>        End
30911>>>>>>>>
30911>>>>>>>        
30911>>>>>>>        Get psLayoutSection to sSection
30912>>>>>>>        Get CreatePropExchangeObject to hoExchange
30913>>>>>>>        
30913>>>>>>>        Get ComCreateAsXML of hoExchange False "Settings" to bOk
30914>>>>>>>        
30914>>>>>>>        If not (bOk) Begin
30916>>>>>>>            Error DFERR_PROGRAM "Assert: Cannot save XML layout"
30917>>>>>>>>
30917>>>>>>>        End
30917>>>>>>>>
30917>>>>>>>        
30917>>>>>>>        If bOk Begin
30919>>>>>>>            Send ExchangeLayout hoExchange sSection eLayout
30920>>>>>>>            Send ComSaveToFile of hoExchange sFileName
30921>>>>>>>        End
30921>>>>>>>>
30921>>>>>>>        Send destroy of hoExchange
30922>>>>>>>    End_Procedure
30923>>>>>>>    
30923>>>>>>>    // needed in case where no application object is present
30923>>>>>>>    Register_Function pbPreserveEnvironment Returns Boolean
30923>>>>>>>    Register_Function RegistryKeyString Returns String
30923>>>>>>>    
30923>>>>>>>    // Standard SaveEnvironment Behavior. This is called when the commandbar system
30923>>>>>>>    // is closed. It will save environment if:
30923>>>>>>>    // 1) application Object exists and pbPreserveEnvironment is true
30923>>>>>>>    // 2) peRestoreLayout is not rlNoSaveRestore
30923>>>>>>>    // This is good for augmentation if you wish to change the standard save
30923>>>>>>>    Procedure SaveEnvironment
30925>>>>>>>        Handle eLayout
30925>>>>>>>        String sKey
30925>>>>>>>        Boolean bPreserveEnvironment
30925>>>>>>>        
30925>>>>>>>        If (ghoApplication=0) Begin
30927>>>>>>>            Procedure_Return
30928>>>>>>>        End
30928>>>>>>>>
30928>>>>>>>        Get pbPreserveEnvironment of ghoApplication to bPreserveEnvironment
30929>>>>>>>        If bPreserveEnvironment Begin
30931>>>>>>>            Get peRestoreLayout to eLayout
30932>>>>>>>            Get RegistryKeyString of ghoApplication to sKey
30933>>>>>>>            Send SaveLayoutToRegistry eLayout sKey
30934>>>>>>>        End
30934>>>>>>>>
30934>>>>>>>    End_Procedure
30935>>>>>>>    
30935>>>>>>>    
30935>>>>>>>    // Standard LoadEnvironment Behavior. This is called when the commandbar system
30935>>>>>>>    // is created. It will load environment if:
30935>>>>>>>    // 1) application Object exists and pbPreserveEnvironment is true
30935>>>>>>>    // 2) peRestoreLayout is not rlNoSaveRestore
30935>>>>>>>    // This is good for augmentation if you wish to change the standard load.
30935>>>>>>>    
30935>>>>>>>    Procedure LoadEnvironment
30937>>>>>>>        Handle eLayout
30937>>>>>>>        String sKey
30937>>>>>>>        Boolean bOk bPreserveEnvironment
30937>>>>>>>        
30937>>>>>>>        If (ghoApplication=0) Begin
30939>>>>>>>            Procedure_Return
30940>>>>>>>        End
30940>>>>>>>>
30940>>>>>>>        Get pbPreserveEnvironment of ghoApplication to bPreserveEnvironment
30941>>>>>>>        If bPreserveEnvironment Begin
30943>>>>>>>            Get peRestoreLayout to eLayout
30944>>>>>>>            Get RegistryKeyString of ghoApplication to sKey
30945>>>>>>>            Get LoadLayoutFromRegistry eLayout sKey to bOk
30946>>>>>>>        End
30946>>>>>>>>
30946>>>>>>>    End_Procedure
30947>>>>>>>    
30947>>>>>>>    
30947>>>>>>>    Procedure RestoreLayout
30949>>>>>>>        Variant vToolBarObject
30949>>>>>>>        Send ComDeleteAll
30950>>>>>>>        Get ComAddMenuBar "Main menu" to vToolbarObject
30951>>>>>>>        //Broadcast Send CreateComCommandBarInstance
30951>>>>>>>        Broadcast Send CreateComInstance
30953>>>>>>>        Send ComRecalcLayout
30954>>>>>>>    End_Procedure
30955>>>>>>>    
30955>>>>>>>    // used to dock a commandbar, on the same row and to the right of another commandbar
30955>>>>>>>    // used by pbDockNextTo property in toolbars
30955>>>>>>>    Procedure DockNextTo Variant vBarToDock Variant vBarOnLeft
30957>>>>>>>        Integer iLeft iTop iRight iBottom iPosition
30957>>>>>>>        Handle hoBarOnLeft
30957>>>>>>>        Get Create U_cCJCommandBar to hoBarOnLeft
30958>>>>>>>        Set pvComObject of hoBarOnLeft to vBarOnLeft
30959>>>>>>>        Send ComRecalcLayout
30960>>>>>>>        Send ComGetWindowRect of hoBarOnLeft (&iLeft) (&iTop) (&iRight) (&iBottom)
30961>>>>>>>        Get ComPosition of hoBarOnLeft to iPosition
30962>>>>>>>        Send ComDockToolBar vBarToDock (iLeft+1) ((iBottom + iTop)/2) iPosition
30963>>>>>>>        Send Destroy of hoBarOnLeft
30964>>>>>>>    End_Procedure
30965>>>>>>>    
30965>>>>>>>    // This only works if this command bar is placed inside of BasicPanel or if the
30965>>>>>>>    // command bar is in a modal dialog that is placed inside of a Panel
30965>>>>>>>    Function Is_Function Integer iMsgId Integer hoObjId Boolean bDelegateFg Returns Boolean
30967>>>>>>>        Boolean bOk
30967>>>>>>>        Handle hoMain
30967>>>>>>>        // this should get resolved via delegation
30967>>>>>>>        Get Main_Panel_id to hoMain
30968>>>>>>>        If (hoObjId>Desktop and hoMain) ;            Get Is_Function of hoMain iMsgId hoObjId bDelegateFg to bOk
30971>>>>>>>        Function_Return bOk
30972>>>>>>>    End_Function
30973>>>>>>>    
30973>>>>>>>    // these must be registered if you are using this with a non-db application. If you are using this
30973>>>>>>>    // with a non-db application, you should not be calling the DEOInformation method as you will get
30973>>>>>>>    // a runtime programming error.
30973>>>>>>>    
30973>>>>>>>    Register_Function Server Returns Integer
30973>>>>>>>    Register_Function DEO_Object Returns Integer
30973>>>>>>>    Register_Function DEO_Control_Object Returns Integer
30973>>>>>>>    Register_Function File_Field_Index Integer iFile Integer iField Returns Integer
30973>>>>>>>    
30973>>>>>>>    // returns information about the Focus object. If it returns True its a DEO. If a DEO the
30973>>>>>>>    // server, hasRecord, changed and hasindex info will all be returned by ref.
30973>>>>>>>    // If false, these are all unchanged.
30973>>>>>>>    Function DEOInformation Handle ByRef hoServer Boolean ByRef bHasRecord Boolean ByRef bChanged Boolean ByRef bHasIndex Returns Boolean
30975>>>>>>>        Handle hoFocus
30975>>>>>>>        Boolean bISDeo bIsControl
30975>>>>>>>        Integer iFile iField
30975>>>>>>>        Get DEOFocus of desktop to hoFocus
30976>>>>>>>        Get Is_Function Get_Deo_Object hoFocus True to bIsDeo
30977>>>>>>>        If bISDEO Begin
30979>>>>>>>            Move False to bHasRecord
30980>>>>>>>            Move False to bChanged
30981>>>>>>>            Move False to bHasIndex
30982>>>>>>>            Get Server of hoFocus to hoServer
30983>>>>>>>            If hoServer Begin
30985>>>>>>>                Get HasRecord of hoServer to bHasRecord
30986>>>>>>>                Get Should_Save of hoServer to bChanged
30987>>>>>>>                Get Is_Function Get_DEO_Control_Object hoFocus False to bIsControl
30988>>>>>>>                If (bIsControl) Begin
30990>>>>>>>                    Get Data_File of hoFocus to iFile
30991>>>>>>>                    Get Data_Field of hoFocus to iField
30992>>>>>>>                    Move ( iFile>0 and File_Field_Index(hoServer,iFile,iField)>-1) to bHasIndex
30993>>>>>>>                End
30993>>>>>>>>
30993>>>>>>>            End
30993>>>>>>>>
30993>>>>>>>        End
30993>>>>>>>>
30993>>>>>>>        Function_Return bISDeo
30994>>>>>>>    End_Function
30995>>>>>>>    
30995>>>>>>>    // Find all controls within this control with the passed Id.
30995>>>>>>>    Procedure ControlsInControl Integer iId Handle hoControl Variant[] ByRef ArrayOfvControls
30997>>>>>>>        Variant vCommandBar
30997>>>>>>>        Handle  hoCommandBar
30997>>>>>>>        Integer eType
30997>>>>>>>        Get ComType of hoControl to eType
30998>>>>>>>        If (eType=xtpControlPopup or eType=xtpControlButtonPopup or eType=xtpControlSplitButtonPopup) Begin
31000>>>>>>>            Get Create U_cCJCommandBar to hoCommandbar
31001>>>>>>>            Get ComCommandBar of hoControl to vCommandBar
31002>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
31003>>>>>>>            Send ControlsInCommandBar iId hoCommandBar (&ArrayOfvControls)
31004>>>>>>>            Send Destroy of hoCommandBar
31005>>>>>>>        End
31005>>>>>>>>
31005>>>>>>>    End_Procedure
31006>>>>>>>    
31006>>>>>>>    // Find all controls within this commandbar with the passed Id.
31006>>>>>>>    Procedure ControlsInCommandBar Integer iId Handle hoCommandBar Variant[] ByRef ArrayOfvControls
31008>>>>>>>        Variant vNewControl  vNewControls
31008>>>>>>>        Handle  hoNewControl hoNewControls
31008>>>>>>>        Integer iControls i  iNewId
31008>>>>>>>        
31008>>>>>>>        Get Create U_cCJCommandBarControls to hoNewControls
31009>>>>>>>        Get Create U_cCJCommandBarPopup to hoNewControl
31010>>>>>>>        
31010>>>>>>>        Get ComControls of hoCommandBar to vNewControls
31011>>>>>>>        Set pvComObject of hoNewControls to vNewControls
31012>>>>>>>        
31012>>>>>>>        Get ComCount of hoNewControls to iControls
31013>>>>>>>        For i from 1 to iControls
31019>>>>>>>>
31019>>>>>>>            Get ComItem of hoNewControls i to  vNewControl
31020>>>>>>>            Set pvComObject of hoNewControl to vNewControl
31021>>>>>>>            
31021>>>>>>>            Get ComId of hoNewControl to iNewId
31022>>>>>>>            If (iNewId=iId) Begin
31024>>>>>>>                Move vNewControl to ArrayOfvControls[SizeOfArray(ArrayOfvControls)]
31025>>>>>>>            End
31025>>>>>>>>
31025>>>>>>>            
31025>>>>>>>            Send ControlsInControl iId hoNewControl (&ArrayOfvControls)
31026>>>>>>>        Loop
31027>>>>>>>>
31027>>>>>>>        
31027>>>>>>>        Send Destroy of hoNewControl
31028>>>>>>>        Send Destroy of hoNewControls
31029>>>>>>>    End_Procedure
31030>>>>>>>    
31030>>>>>>>    // Find all controls within the commandbarsystem with the passed Id.
31030>>>>>>>    // This can be used to search for Ids within a popup menu item. You only need to use
31030>>>>>>>    // this is there is a chance that there will be more than one control with this id.
31030>>>>>>>    Function FindControls Integer iId Returns Variant[]
31032>>>>>>>        Variant[] ArrayOfvControls
31033>>>>>>>        Variant vCommandBar
31033>>>>>>>        Integer iCommandBars i
31033>>>>>>>        Handle hoCommandBar
31033>>>>>>>        
31033>>>>>>>        Get Create U_cCJCommandBar to hoCommandbar
31034>>>>>>>        Get ComCount to iCommandBars
31035>>>>>>>        For i from 1 to iCommandBars
31041>>>>>>>>
31041>>>>>>>            Get ComItem i to vCommandBar
31042>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
31043>>>>>>>            Send ControlsInCommandBar iId hoCommandBar (&ArrayOfvControls)
31044>>>>>>>        Loop
31045>>>>>>>>
31045>>>>>>>        Send Destroy of hoCommandBar
31046>>>>>>>        Function_Return ArrayOfvControls
31047>>>>>>>    End_Function
31048>>>>>>>    
31048>>>>>>>    
31048>>>>>>>    
31048>>>>>>>    // this sends update to the action of all of the child menu items. Note these are the children
31048>>>>>>>    // of visual control, not the children of the action. This is used to enable, disable all
31048>>>>>>>    // menu items, etc.
31048>>>>>>>    
31048>>>>>>>    Procedure PopupInit Handle hoCommandBar Handle hoCommandBarControls
31050>>>>>>>        Handle hoControl hoAction hoItem
31050>>>>>>>        Variant vAction vControl
31050>>>>>>>        Integer i iCount
31050>>>>>>>        
31050>>>>>>>        Get Create U_cCJCommandBarControl to hoControl
31051>>>>>>>        Get Create U_cCJCommandBarAction to hoAction
31052>>>>>>>        
31052>>>>>>>        Get ComCount of hoCommandBarControls to iCount
31053>>>>>>>        // for each control we must find its action and set the action, which in
31053>>>>>>>        // turn will set this control (and any other control there might be with that action).
31053>>>>>>>        For i from 1 to iCount
31059>>>>>>>>
31059>>>>>>>            Get ComItem of hoCommandBarControls i to vControl
31060>>>>>>>            Set pvComObject of hoControl to vControl
31061>>>>>>>            Get ComAction of hoControl to vAction
31062>>>>>>>            // it is possible that there will be no action, in which case do nothing
31062>>>>>>>            If not (IsNullComObject(vAction)) Begin
31064>>>>>>>                Set pvComObject of hoAction to vAction
31065>>>>>>>                Get ComTag of hoAction to hoItem
31066>>>>>>>                If hoItem Begin
31068>>>>>>>                    Send Update of hoItem
31069>>>>>>>                End
31069>>>>>>>>
31069>>>>>>>            End
31069>>>>>>>>
31069>>>>>>>        Loop
31070>>>>>>>>
31070>>>>>>>        
31070>>>>>>>        Send Destroy of hoAction
31071>>>>>>>        Send Destroy of hoControl
31072>>>>>>>    End_Procedure
31073>>>>>>>    
31073>>>>>>>    
31073>>>>>>>    Procedure OnCreate
31075>>>>>>>        Forward Send OnCreate
31077>>>>>>>        Send CreateCommandBars
31078>>>>>>>    End_Procedure
31079>>>>>>>    
31079>>>>>>>    Procedure OnCreateCommandBars
31081>>>>>>>    End_Procedure
31082>>>>>>>    
31082>>>>>>>    Procedure OnRelease
31084>>>>>>>    End_Procedure
31085>>>>>>>    
31085>>>>>>>    Procedure OnUpdate
31087>>>>>>>    End_Procedure
31088>>>>>>>    
31088>>>>>>>    Procedure OnComExecute Variant llControl
31090>>>>>>>        Handle hoControl hoAction hoActionPointer
31090>>>>>>>        Variant vAction
31090>>>>>>>        Get Create U_cCJCommandBarControl to hoControl
31091>>>>>>>        Get Create U_cCJCommandBarAction to hoAction
31092>>>>>>>        
31092>>>>>>>        Set pvComObject of hoControl to llControl
31093>>>>>>>        Get ComAction of hoControl to vAction
31094>>>>>>>        // There should always be an action but it is possible that all
31094>>>>>>>        // CJ controls will not use this. (colorselector). So we must test.
31094>>>>>>>        If not (IsNullComObject(vAction)) Begin
31096>>>>>>>            Set pvComObject of hoAction to vAction
31097>>>>>>>            Get ComTag of hoAction to hoActionPointer
31098>>>>>>>        End
31098>>>>>>>>
31098>>>>>>>        Send Destroy of hoAction
31099>>>>>>>        Send Destroy of hoControl
31100>>>>>>>        
31100>>>>>>>        If hoActionPointer Begin
31102>>>>>>>            Send Execute of hoActionPointer llControl
31103>>>>>>>        End
31103>>>>>>>>
31103>>>>>>>        Else Begin
31104>>>>>>>            // if for some reason there is no action COM and/or DF object
31104>>>>>>>            // we allow this to be handled by this class as an unhandled
31104>>>>>>>            // execute
31104>>>>>>>            Send OnUnhandledExecute llControl
31105>>>>>>>        End
31105>>>>>>>>
31105>>>>>>>        
31105>>>>>>>    End_Procedure
31106>>>>>>>    
31106>>>>>>>    // this happens when the execute control either has no COM action
31106>>>>>>>    // or it has no DF action object. In such a case, we don't do anything other than
31106>>>>>>>    // call this method. Note that there may be a valid action but fo rsome reason
31106>>>>>>>    // the ComAction property did not get properly assigned by CJ. This seems to happen
31106>>>>>>>    // with the color selector object.
31106>>>>>>>    Procedure OnUnhandledExecute Variant llControl
31108>>>>>>>    End_Procedure
31109>>>>>>>    
31109>>>>>>>    
31109>>>>>>>    Procedure OnComControlSelected Variant llControl
31111>>>>>>>        Handle hoControl hoAction hoActionPointer
31111>>>>>>>        Variant vAction
31111>>>>>>>        If (not(IsNullComObject(llControl))) Begin
31113>>>>>>>            Get Create U_cCJCommandBarControl to hoControl
31114>>>>>>>            Get Create U_cCJCommandBarAction to hoAction
31115>>>>>>>            
31115>>>>>>>            Set pvComObject of hoControl to llControl
31116>>>>>>>            Get ComAction of hoControl to vAction
31117>>>>>>>            If (not(IsNullComObject(vAction))) Begin
31119>>>>>>>                Set pvComObject of hoAction to vAction
31120>>>>>>>                Get ComTag of hoAction to hoActionPointer
31121>>>>>>>            End
31121>>>>>>>>
31121>>>>>>>            Send Destroy of hoAction
31122>>>>>>>            Send Destroy of hoControl
31123>>>>>>>            
31123>>>>>>>            If hoActionPointer Begin
31125>>>>>>>                Send OnSelected of hoActionPointer llControl
31126>>>>>>>            End
31126>>>>>>>>
31126>>>>>>>            Else Begin
31127>>>>>>>                Send OnUnhandledControlSelected llControl
31128>>>>>>>            End
31128>>>>>>>>
31128>>>>>>>        End
31128>>>>>>>>
31128>>>>>>>        
31128>>>>>>>    End_Procedure
31129>>>>>>>    
31129>>>>>>>    Procedure OnUnhandledControlSelected Variant llControl
31131>>>>>>>    End_Procedure
31132>>>>>>>    
31132>>>>>>>    Procedure OnComInitCommandsPopup Variant llCommandBar
31134>>>>>>>        Handle hoCommandBar hoAction hoActionPointer hoCommandBarControl hoCommandBarControls
31134>>>>>>>        Variant vAction vCommandBarControl vCommandBarControls
31134>>>>>>>        Integer eType
31134>>>>>>>        
31134>>>>>>>        Get Create U_cCJCommandbar to hoCommandBar
31135>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
31136>>>>>>>        
31136>>>>>>>        Set pvComObject of hoCommandBar to llCommandBar
31137>>>>>>>        Get ComControls of hoCommandBar to vCommandBarControls
31138>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
31139>>>>>>>        
31139>>>>>>>        Get ComType of hoCommandBar to eType
31140>>>>>>>        
31140>>>>>>>        // if no parent it's a context menu. This is not handled here. It is handled by
31140>>>>>>>        // the context menu during the popup
31140>>>>>>>        Get ComParent of hoCommandBar to vCommandBarControl
31141>>>>>>>        If (not(IsNullComObject(vCommandBarControl))) Begin
31143>>>>>>>            // set all the child objects enabled and disabled
31143>>>>>>>            Send PopupInit hoCommandBar hoCommandBarControls
31144>>>>>>>            
31144>>>>>>>            Get Create U_cCJCommandbarControl to hoCommandBarControl
31145>>>>>>>            Get Create U_cCJCommandbarAction to hoAction
31146>>>>>>>            
31146>>>>>>>            Set pvComObject of hoCommandBarControl to vCommandBarControl
31147>>>>>>>            Get ComAction of hoCommandBarControl to vAction
31148>>>>>>>            // builtin menus like customize may not have actions
31148>>>>>>>            If not (IsNullComObject(vAction)) Begin
31150>>>>>>>                Set pvComObject of hoAction to vAction
31151>>>>>>>                Get ComTag of hoAction to hoActionPointer
31152>>>>>>>            End
31152>>>>>>>>
31152>>>>>>>            
31152>>>>>>>            Send Destroy of hoAction
31153>>>>>>>            Send Destroy of hoCommandBarControl
31154>>>>>>>            
31154>>>>>>>            If hoActionPointer Begin
31156>>>>>>>                Send OnPopupInit of hoActionPointer vCommandBarControl hoCommandBarControls
31157>>>>>>>            End
31157>>>>>>>>
31157>>>>>>>            Else Begin
31158>>>>>>>                Send OnUnhandledInitCommandsPopup llCommandBar
31159>>>>>>>            End
31159>>>>>>>>
31159>>>>>>>        End
31159>>>>>>>>
31159>>>>>>>        
31159>>>>>>>        Send Destroy of hoCommandBarControls
31160>>>>>>>        Send Destroy of hoCommandBar
31161>>>>>>>        
31161>>>>>>>    End_Procedure
31162>>>>>>>    
31162>>>>>>>    Procedure OnUnhandledInitCommandsPopup Variant llCommandBar
31164>>>>>>>    End_Procedure
31165>>>>>>>    
31165>>>>>>>    
31165>>>>>>>    Procedure OnComCustomization Variant vCustomizeOptions
31167>>>>>>>        Handle hoCustomize
31167>>>>>>>        Boolean bShowKeyboardPage bShowOptionsPage
31167>>>>>>>        
31167>>>>>>>        // directly support setting of keyboard and option tab pages.
31167>>>>>>>        // any other customization should be done by developer
31167>>>>>>>        Get pbCustomizeShowKeyboardPage to bShowKeyboardPage
31168>>>>>>>        Get pbCustomizeShowOptionsPage to bShowOptionsPage
31169>>>>>>>        Get Create U_cCJCustomizeOptions to hoCustomize
31170>>>>>>>        Set pvComObject of hoCustomize to vCustomizeOptions
31171>>>>>>>        Set ComShowKeyboardPage of hoCustomize to bShowKeyboardPage
31172>>>>>>>        Set ComShowOptionsPage of hoCustomize to bShowOptionsPage
31173>>>>>>>        Send Destroy of hoCustomize
31174>>>>>>>        
31174>>>>>>>        Forward Send OnComCustomization vCustomizeOptions
31176>>>>>>>    End_Procedure
31177>>>>>>>    
31177>>>>>>>    
31177>>>>>>>    // we do it this way so function DFBinPath is always created. Makes Compiler happy
31177>>>>>>>    Function DFBinPath Returns String
31179>>>>>>>        String sRoot
31179>>>>>>>        Get DFBinPath of ghoApplication to sRoot
31180>>>>>>>        Function_Return sRoot
31181>>>>>>>    End_Function
31182>>>>>>>    
31182>>>>>>>    
31182>>>>>>>    // returns the path for the ResourceImages, which is bin\styles (as of 19)
31182>>>>>>>    //
31182>>>>>>>    Function ResourceImagesPath Returns String
31184>>>>>>>        String sPath
31184>>>>>>>        If ghoApplication Begin
31186>>>>>>>            Get DFBinPath to sPath
31187>>>>>>>            Move (sPath +"\styles") to sPath
31188>>>>>>>        End
31188>>>>>>>>
31188>>>>>>>        Else Begin
31189>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
31190>>>>>>>>
31190>>>>>>>        End
31190>>>>>>>>
31190>>>>>>>        Function_Return sPath
31191>>>>>>>    End_Function
31192>>>>>>>    
31192>>>>>>>    // Loads theme images for File and Ini. This is used with peVisualTheme=xtpThemeResource
31192>>>>>>>    // which must be set *after* this is called.
31192>>>>>>>    //
31192>>>>>>>    // If the sFile is passed relative, it expects the dll to be placed in \Programs
31192>>>>>>>    // which the developer must do.
31192>>>>>>>    //
31192>>>>>>>    // Normally you'd call this within OnCreateCommandBars as follows:
31192>>>>>>>    //    Procedure OnCreateCommandBars
31192>>>>>>>    //        Boolean bOk
31192>>>>>>>    //        Forward Send OnCreateCommandBars
31192>>>>>>>    //        Get LoadResourceImagesFromFile "Office2010.dll" "Office2010Black.ini" to bOk
31192>>>>>>>    //        Set peVisualTheme to xtpThemeResource
31192>>>>>>>    //    End_Procedure
31192>>>>>>>    
31192>>>>>>>    Function LoadResourceImagesFromFile String sFile String sIni Returns Boolean
31194>>>>>>>        Handle hoGlobal hoRes
31194>>>>>>>        Variant vGlobal vRes
31194>>>>>>>        Boolean bOk
31194>>>>>>>        String sDir
31194>>>>>>>        Get Create (RefClass(cCJCommandBarsGlobalSettings)) to hoGlobal
31195>>>>>>>        Send CreateComObject of hoGlobal
31196>>>>>>>        If (not(IsFileNameQualified(sFile))) Begin
31198>>>>>>>            Get ResourceImagesPath to sDir
31199>>>>>>>            Move (sDir + "\"+ sFile) to sFile
31200>>>>>>>        End
31200>>>>>>>>
31200>>>>>>>        Get ComResourceImages of hoGlobal to vRes
31201>>>>>>>        Get Create (RefClass(cCJResourceImages)) to hoRes
31202>>>>>>>        Set pvComObject of hoRes to vRes
31203>>>>>>>        Get ComLoadFromFile of hoRes sFile sIni to bOk
31204>>>>>>>        Send Destroy of hoRes
31205>>>>>>>        Send Destroy of hoGlobal
31206>>>>>>>        Function_Return bOk
31207>>>>>>>    End_Function
31208>>>>>>>    
31208>>>>>>>End_Class
31209>>>>>>>
31209>>>>>>>Class cCJCommandBarMixin is a Mixin
31210>>>>>>>    
31210>>>>>>>    Procedure Define_cCJCommandBarMixin
31212>>>>>>>        
31212>>>>>>>        Property Integer piBarID            0
31213>>>>>>>        
31213>>>>>>>        Property Boolean pbDockNextTo             True
31214>>>>>>>        
31214>>>>>>>        Property Integer peBarPosition xtpBarTop
31215>>>>>>>        
31215>>>>>>>        Property Boolean pbEnableDocking           True
31216>>>>>>>        Property Boolean pbHideWrap                False
31217>>>>>>>        Property Integer peStretched               stNoStretch
31218>>>>>>>        
31218>>>>>>>        Property Boolean pbPrivateCloseable        True
31219>>>>>>>        Property Boolean pbPrivateCustomizable     True
31220>>>>>>>        Property Boolean pbPrivateEnableAnimation  False
31221>>>>>>>        Property Boolean pbPrivateShowExpandButton True
31222>>>>>>>        Property String  psPrivateTitle            "Toolbar"
31223>>>>>>>        Property Boolean pbPrivateVisible          True
31224>>>>>>>        Property Integer piPrivateWidth            0
31225>>>>>>>        Property Boolean pbPrivateGripper          True
31226>>>>>>>        
31226>>>>>>>        Set peNeighborhood to nhNo
31227>>>>>>>        
31227>>>>>>>    End_Procedure
31228>>>>>>>    
31228>>>>>>>    // Generic Get and Set property that is used to get and set a DF/COM property.
31228>>>>>>>    // can be used by any integer or boolean property
31228>>>>>>>    
31228>>>>>>>    Procedure SetComProperty Handle hmPrivateProperty Handle hmCOMProperty Integer iValue
31230>>>>>>>        Set hmPrivateProperty to iValue
31231>>>>>>>        If (IsComObjectCreated(Self)) Begin
31233>>>>>>>            Set hmCOMProperty to iValue
31234>>>>>>>        End
31234>>>>>>>>
31234>>>>>>>    End_Procedure
31235>>>>>>>    
31235>>>>>>>    Function GetComProperty Handle hmPrivateProperty Handle hmCOMProperty Returns Integer
31237>>>>>>>        Integer iValue
31237>>>>>>>        If (IsComObjectCreated(Self)) Begin
31239>>>>>>>            Get hmCOMProperty to iValue
31240>>>>>>>        End
31240>>>>>>>>
31240>>>>>>>        Else Begin
31241>>>>>>>            Get hmPrivateProperty to iValue
31242>>>>>>>        End
31242>>>>>>>>
31242>>>>>>>        Function_Return iValue
31243>>>>>>>    End_Function
31244>>>>>>>    
31244>>>>>>>    Procedure Set pbCloseable Boolean bValue
31246>>>>>>>        Send SetComProperty set_pbPrivateCloseable set_ComCloseable bValue
31247>>>>>>>    End_Procedure
31248>>>>>>>    
31248>>>>>>>    Function pbCloseable Returns Boolean
31250>>>>>>>        Boolean bValue
31250>>>>>>>        Get GetComProperty get_pbPrivateCloseable get_ComCloseable to bValue
31251>>>>>>>        Function_Return bValue
31252>>>>>>>    End_Function
31253>>>>>>>    
31253>>>>>>>    Procedure Set pbCustomizable Boolean bValue
31255>>>>>>>        Send SetComProperty set_pbPrivateCustomizable set_ComCustomizable bValue
31256>>>>>>>    End_Procedure
31257>>>>>>>    
31257>>>>>>>    Function pbCustomizable Returns Boolean
31259>>>>>>>        Boolean bValue
31259>>>>>>>        Get GetComProperty get_pbPrivateCustomizable get_ComCustomizable to bValue
31260>>>>>>>        Function_Return bValue
31261>>>>>>>    End_Function
31262>>>>>>>    
31262>>>>>>>    Procedure Set pbEnableAnimation Boolean bValue
31264>>>>>>>        Send SetComProperty set_pbPrivateEnableAnimation set_ComEnableAnimation bValue
31265>>>>>>>    End_Procedure
31266>>>>>>>    
31266>>>>>>>    Function pbEnableAnimation Returns Boolean
31268>>>>>>>        Boolean bValue
31268>>>>>>>        Get GetComProperty get_pbPrivateEnableAnimation get_ComEnableAnimation to bValue
31269>>>>>>>        Function_Return bValue
31270>>>>>>>    End_Function
31271>>>>>>>    
31271>>>>>>>    Procedure Set pbShowExpandButton Boolean bValue
31273>>>>>>>        Send SetComProperty set_pbPrivateShowExpandButton set_ComShowExpandButton bValue
31274>>>>>>>    End_Procedure
31275>>>>>>>    
31275>>>>>>>    Function pbShowExpandButton Returns Boolean
31277>>>>>>>        Boolean bValue
31277>>>>>>>        Get GetComProperty get_pbPrivateShowExpandButton get_ComShowExpandButton to bValue
31278>>>>>>>        Function_Return bValue
31279>>>>>>>    End_Function
31280>>>>>>>    
31280>>>>>>>    Procedure Set pbVisible Boolean bValue
31282>>>>>>>        Send SetComProperty set_pbPrivateVisible set_ComVisible bValue
31283>>>>>>>    End_Procedure
31284>>>>>>>    
31284>>>>>>>    Function pbVisible Returns Boolean
31286>>>>>>>        Boolean bValue
31286>>>>>>>        Get GetComProperty get_pbPrivateVisible get_ComVisible to bValue
31287>>>>>>>        Function_Return bValue
31288>>>>>>>    End_Function
31289>>>>>>>    
31289>>>>>>>    Procedure Set piWidth Integer iValue
31291>>>>>>>        Send SetComProperty set_piPrivateWidth set_ComWidth iValue
31292>>>>>>>    End_Procedure
31293>>>>>>>    
31293>>>>>>>    Function piWidth Returns Integer
31295>>>>>>>        Integer iValue
31295>>>>>>>        Get GetComProperty get_piPrivateWidth get_ComWidth to iValue
31296>>>>>>>        Function_Return iValue
31297>>>>>>>    End_Function
31298>>>>>>>    
31298>>>>>>>    Procedure Set pbGripper Boolean bValue
31300>>>>>>>        Set pbPrivateGripper to bValue
31301>>>>>>>        If (IsComObjectCreated(Self)) Begin
31303>>>>>>>            Send ComModifyStyle (If(not(bValue),xtp_CBRS_GRIPPER,0)) (If(bValue,xtp_CBRS_GRIPPER,0))
31304>>>>>>>        End
31304>>>>>>>>
31304>>>>>>>    End_Procedure
31305>>>>>>>    
31305>>>>>>>    Function pbGripper Returns Boolean
31307>>>>>>>        Boolean bValue
31307>>>>>>>        Get pbPrivateGripper to bValue
31308>>>>>>>        Function_Return bValue
31309>>>>>>>    End_Function
31310>>>>>>>    
31310>>>>>>>    Procedure Set psTitle String sValue
31312>>>>>>>        Set psPrivateTitle to sValue
31313>>>>>>>        If (IsComObjectCreated(Self)) Begin
31315>>>>>>>            Set ComTitle to sValue
31316>>>>>>>        End
31316>>>>>>>>
31316>>>>>>>    End_Procedure
31317>>>>>>>    
31317>>>>>>>    Function psTitle Returns String
31319>>>>>>>        String sValue
31319>>>>>>>        If (IsComObjectCreated(Self)) Begin
31321>>>>>>>            Get ComTitle to sValue
31322>>>>>>>        End
31322>>>>>>>>
31322>>>>>>>        Else Begin
31323>>>>>>>            Get psPrivateTitle to sValue
31324>>>>>>>        End
31324>>>>>>>>
31324>>>>>>>        Function_Return sValue
31325>>>>>>>    End_Function
31326>>>>>>>    
31326>>>>>>>    Procedure InitComInstance
31328>>>>>>>        Handle hoCommandBars hoNextTo
31328>>>>>>>        Variant vCommandBar vNextTo
31328>>>>>>>        String sTitle
31328>>>>>>>        Integer iBarId iWidth iDockFgs iBars eBarPosition
31328>>>>>>>        Integer eNextToPosition eNextToType iDockingFlags eStretched
31328>>>>>>>        Boolean bCloseable bCustomizable bEnableAnimation bShowExpandButton
31328>>>>>>>        Boolean bEnableDocking bHideWrap
31328>>>>>>>        Boolean bGripper bDockNextTo bNextToVisible
31328>>>>>>>        
31328>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31329>>>>>>>        
31329>>>>>>>        Get psPrivateTitle to sTitle
31330>>>>>>>        Get pbPrivateCloseable to bCloseable
31331>>>>>>>        Get pbPrivateCustomizable to bCustomizable
31332>>>>>>>        Get pbPrivateEnableAnimation to bEnableAnimation
31333>>>>>>>        Get pbPrivateShowExpandButton to bShowExpandButton
31334>>>>>>>        Get piPrivateWidth to iWidth
31335>>>>>>>        Get pbEnableDocking to bEnableDocking
31336>>>>>>>        Get pbHideWrap to bHideWrap
31337>>>>>>>        Get peStretched to eStretched
31338>>>>>>>        
31338>>>>>>>        Get pbPrivateGripper to bGripper
31339>>>>>>>        Get piBarId to iBarId
31340>>>>>>>        Get pbDockNextTo to bDockNextTo
31341>>>>>>>        Get peBarPosition to eBarPosition
31342>>>>>>>        
31342>>>>>>>        
31342>>>>>>>        Get CreateCommandBar to vCommandBar
31343>>>>>>>        
31343>>>>>>>        Set pvComObject to vCommandBar
31344>>>>>>>        Set ComTitle to sTitle
31345>>>>>>>        Set ComCloseable to bCloseable
31346>>>>>>>        Set ComCustomizable to bCustomizable
31347>>>>>>>        Set ComEnableAnimation to bEnableAnimation
31348>>>>>>>        Set ComShowExpandButton to bShowExpandButton
31349>>>>>>>        
31349>>>>>>>        Send ComModifyStyle (If(not(bGripper),xtp_CBRS_GRIPPER,0)) (If(bGripper,xtp_CBRS_GRIPPER,0))
31350>>>>>>>        
31350>>>>>>>        If (iBarId<>0) Begin
31352>>>>>>>            Set ComBarID to iBarId
31353>>>>>>>        End
31353>>>>>>>>
31353>>>>>>>        Else Begin
31354>>>>>>>            Get ComBarId to iBarId
31355>>>>>>>            Set piBarID to iBarId
31356>>>>>>>        End
31356>>>>>>>>
31356>>>>>>>        
31356>>>>>>>        // enabled docking is determiend by iORing flags. We simplify docking to allow all or
31356>>>>>>>        // none. In addition we support hidewrap and the two stretched flags.
31356>>>>>>>        If bEnableDocking Begin
31358>>>>>>>            Move (iDockingFlags ior xtpFlagAlignAny ior xtpFlagFloating) to iDockingFlags
31359>>>>>>>        End
31359>>>>>>>>
31359>>>>>>>        If bHideWrap Begin
31361>>>>>>>            Move (iDockingFlags ior xtpFlagHideWrap) to iDockingFlags
31362>>>>>>>        End
31362>>>>>>>>
31362>>>>>>>        If (eStretched=stStretch) Begin
31364>>>>>>>            Move (iDockingFlags ior xtpFlagStretched) to iDockingFlags
31365>>>>>>>        End
31365>>>>>>>>
31365>>>>>>>        Else If (eStretched=stStretchShared) Begin
31368>>>>>>>            Move (iDockingFlags ior xtpFlagStretchedShared) to iDockingFlags
31369>>>>>>>        End
31369>>>>>>>>
31369>>>>>>>        Send ComEnableDocking iDockingFlags
31370>>>>>>>        
31370>>>>>>>        If (iWidth>0) Begin
31372>>>>>>>            Set ComWidth to iWidth
31373>>>>>>>        End
31373>>>>>>>>
31373>>>>>>>        
31373>>>>>>>        // if we DockNextTo we want to doc "next" to the last command bar that is located
31373>>>>>>>        // in the same position (e.g. top, bottom, left, right). "Next" is relative to the position
31373>>>>>>>        // where top/bottom is Right-of and let/right is below. Menubars are excluded from this logic
31373>>>>>>>        // if we DockNextTo we want to doc "next" to the last command bar that is located
31373>>>>>>>        // in the same position (e.g. top, bottom, left, right). "Next" is relative to the position
31373>>>>>>>        // where top/bottom is Right-of and let/right is below. Menubars are excluded from this logic
31373>>>>>>>        If bDockNextTo Begin
31375>>>>>>>            Get ComCount of hoCommandBars to iBars
31376>>>>>>>            Get Create U_cCJCommandBar to hoNextTo
31377>>>>>>>            While (iBars>1)
31381>>>>>>>                Get ComItem of hoCommandBars (iBars-1) to vNextTo
31382>>>>>>>                Set pvComObject of hoNextTo to vNextTo
31383>>>>>>>                Get ComVisible of hoNextTo to bNextToVisible
31384>>>>>>>                Get ComPosition of hoNextTo to eNextToPosition
31385>>>>>>>                Get ComType of hoNextTo to eNextToType
31386>>>>>>>                If (bNextToVisible and eNextToType=xtpBarTypeNormal and eNextToPosition=eBarPosition) Begin
31388>>>>>>>                    Send DockNextTo vCommandBar vNextTo
31389>>>>>>>                    Move 0 to iBars
31390>>>>>>>                End
31390>>>>>>>>
31390>>>>>>>                Decrement iBars
31391>>>>>>>            Loop
31392>>>>>>>>
31392>>>>>>>            Send Destroy of hoNextTo
31393>>>>>>>        End
31393>>>>>>>>
31393>>>>>>>        
31393>>>>>>>    End_Procedure
31394>>>>>>>    
31394>>>>>>>    // This is called when the commandbar is created and is bound to the commandbar object.
31394>>>>>>>    Procedure OnCreate
31396>>>>>>>    End_Procedure
31397>>>>>>>    
31397>>>>>>>    Procedure End_Construct_Object
31399>>>>>>>        Integer iID
31399>>>>>>>        Handle hoCommandBars
31399>>>>>>>        Get piBarId to iID
31400>>>>>>>        If (iID=0) Begin
31402>>>>>>>            Get CommandBarSystemObject to hoCommandBars
31403>>>>>>>            Get AssignBarId of hoCommandBars to iId
31404>>>>>>>            Set piBarId to iID
31405>>>>>>>        End
31405>>>>>>>>
31405>>>>>>>        Forward Send End_Construct_Object
31407>>>>>>>    End_Procedure
31408>>>>>>>    
31408>>>>>>>End_Class
31409>>>>>>>
31409>>>>>>>
31409>>>>>>>
31409>>>>>>>
31409>>>>>>>
31409>>>>>>>Class cCJAbstractCommandBar is a cCJCommandBar
31410>>>>>>>    
31410>>>>>>>    Import_Class_Protocol cCJCommandBarMixin
31411>>>>>>>    
31411>>>>>>>    Procedure Construct_Object
31413>>>>>>>        Forward Send Construct_Object
31415>>>>>>>        Send Define_cCJCommandBarMixin
31416>>>>>>>    End_Procedure
31417>>>>>>>    
31417>>>>>>>    // Must be defined in a sub-class
31417>>>>>>>    Function CreateCommandBar Returns Variant
31419>>>>>>>        Error DFERR_PROGRAM "Assert: CreateCommandBar not defined in superclass"
31420>>>>>>>>
31420>>>>>>>    End_Function
31421>>>>>>>    
31421>>>>>>>    Procedure CreateComInstance
31423>>>>>>>        Handle hoCommandBarControls
31423>>>>>>>        Variant vCommandBarControls
31423>>>>>>>        
31423>>>>>>>        Send InitComInstance // creates control and returns it attached
31424>>>>>>>        Send OnCreate
31425>>>>>>>        
31425>>>>>>>        
31425>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
31426>>>>>>>        Get ComControls to vCommandBarControls
31427>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
31428>>>>>>>        
31428>>>>>>>        Broadcast Send CreateComInstance hoCommandBarControls
31430>>>>>>>        
31430>>>>>>>        // after this command bar and all its children are created, we set this as the reset point.
31430>>>>>>>        Send ComCreateOriginalControls of hoCommandBarControls
31431>>>>>>>        
31431>>>>>>>        Send Destroy of hoCommandBarControls
31432>>>>>>>        
31432>>>>>>>    End_Procedure
31433>>>>>>>    
31433>>>>>>>End_Class
31434>>>>>>>
31434>>>>>>>Class cCJMenuBar is a cCJAbstractCommandBar
31435>>>>>>>    
31435>>>>>>>    Procedure Construct_object
31437>>>>>>>        Forward Send Construct_Object
31439>>>>>>>        Set piBarId to 1 // menu is always 1
31440>>>>>>>        Set psTitle to "Main Menu"
31441>>>>>>>        Set pbCloseable to False
31442>>>>>>>        Set pbGripper to False
31443>>>>>>>        Set pbEnableDocking to False
31444>>>>>>>        Set pbHideWrap to False
31445>>>>>>>        Set peStretched to stStretch
31446>>>>>>>        Set pbCustomizable to False
31447>>>>>>>        
31447>>>>>>>    End_Procedure
31448>>>>>>>    
31448>>>>>>>    Function CreateCommandBar Returns Variant
31450>>>>>>>        Variant vCommandBar
31450>>>>>>>        Handle hoCommandBars
31450>>>>>>>        Integer eBarPosition
31450>>>>>>>        Get peBarPosition to eBarPosition
31451>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31452>>>>>>>        Get ComActiveMenuBar of hoCommandBars to vCommandBar
31453>>>>>>>        Set pvComObject to vCommandBar
31454>>>>>>>        Set ComPosition to eBarPosition
31455>>>>>>>        Function_Return vCommandBar
31456>>>>>>>    End_Function
31457>>>>>>>    
31457>>>>>>>    
31457>>>>>>>    Procedure CreateComInstance
31459>>>>>>>        // Menubar is invisible by default to allow applications to not force the default menubar on
31459>>>>>>>        // applications that do not have them declared in their application. Here is where we set
31459>>>>>>>        // Visible back to true because if this code is executed then the application really does have
31459>>>>>>>        // a menubar. We do this as late as possible in the process because Set ComVisible is a little
31459>>>>>>>        // fragile if the COM controls are not all set up correctly.
31459>>>>>>>        //17.1
31459>>>>>>>        Boolean bVisible
31459>>>>>>>        Forward Send CreateComInstance
31461>>>>>>>        Get pbPrivateVisible to bVisible
31462>>>>>>>        Set ComVisible to bVisible
31463>>>>>>>    End_Procedure
31464>>>>>>>    
31464>>>>>>>End_Class
31465>>>>>>>
31465>>>>>>>Class cCJToolbar is a cCJAbstractCommandBar
31466>>>>>>>    
31466>>>>>>>    Function CreateCommandBar Returns Variant
31468>>>>>>>        Variant vCommandBar
31468>>>>>>>        Handle hoCommandBars
31468>>>>>>>        Integer eBarPosition
31468>>>>>>>        Get peBarPosition to eBarPosition
31469>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31470>>>>>>>        Get ComAdd of hoCommandBars "Toolbar" eBarPosition to vCommandBar
31471>>>>>>>        Function_Return vCommandBar
31472>>>>>>>    End_Function
31473>>>>>>>    
31473>>>>>>>End_Class
31474>>>>>>>
31474>>>>>>>
31474>>>>>>>Class cCJTabToolBar is a cCJComTabToolBar
31475>>>>>>>    
31475>>>>>>>    Import_Class_Protocol cCJCommandBarMixin
31476>>>>>>>    
31476>>>>>>>    Procedure Construct_Object
31478>>>>>>>        Forward Send Construct_Object
31480>>>>>>>        Send Define_cCJCommandBarMixin
31481>>>>>>>        Property Boolean pbPrivateAllowReorder   False
31482>>>>>>>        
31482>>>>>>>    End_Procedure
31483>>>>>>>    
31483>>>>>>>    Procedure Set pbAllowReorder Boolean bValue
31485>>>>>>>        Send SetComProperty set_pbPrivateAllowReorder set_ComAllowReorder bValue
31486>>>>>>>    End_Procedure
31487>>>>>>>    
31487>>>>>>>    Function pbAllowReorder Returns Boolean
31489>>>>>>>        Boolean bValue
31489>>>>>>>        Get GetComProperty get_pbPrivateAllowReorder get_ComAllowReorder to bValue
31490>>>>>>>        Function_Return bValue
31491>>>>>>>    End_Function
31492>>>>>>>    
31492>>>>>>>    
31492>>>>>>>    Function CreateCommandBar Returns Variant
31494>>>>>>>        Variant vCommandBar
31494>>>>>>>        Handle hoCommandBars
31494>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31495>>>>>>>        Get ComAddTabToolBar of hoCommandBars "TabToolbar" to vCommandBar
31496>>>>>>>        Function_Return vCommandBar
31497>>>>>>>    End_Function
31498>>>>>>>    
31498>>>>>>>    Procedure CreateComInstance
31500>>>>>>>        Handle hoCommandBarControls
31500>>>>>>>        Variant vCommandBarControls
31500>>>>>>>        Boolean bAllowReorder
31500>>>>>>>        Get pbPrivateAllowReorder to bAllowReorder
31501>>>>>>>        
31501>>>>>>>        Send InitComInstance // creates control and returns it attached
31502>>>>>>>        
31502>>>>>>>        Set ComAllowReorder to bAllowReorder
31503>>>>>>>        
31503>>>>>>>        Send OnCreate
31504>>>>>>>        
31504>>>>>>>        
31504>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
31505>>>>>>>        Get ComControls to vCommandBarControls
31506>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
31507>>>>>>>        
31507>>>>>>>        
31507>>>>>>>        Broadcast Send CreateComInstance Self // we pass attached tabmenubar control to tab children
31509>>>>>>>        
31509>>>>>>>        // after this command bar and all its children are created, we set this as the reset point.
31509>>>>>>>        Send ComCreateOriginalControls of hoCommandBarControls
31510>>>>>>>        Send ComUpdateTabs
31511>>>>>>>        Send ComRedrawBar
31512>>>>>>>        Send ComRecalcLayout
31513>>>>>>>        Send Destroy of hoCommandBarControls
31514>>>>>>>        
31514>>>>>>>        //  Commandbars are static and do not change based on loading and editing
31514>>>>>>>        // If so, we will keep the objects bound. If this does not work we will need to
31514>>>>>>>        // use the AttachComObject method.
31514>>>>>>>        
31514>>>>>>>    End_Procedure
31515>>>>>>>    
31515>>>>>>>    Function FindByCategory String sName Returns Variant
31517>>>>>>>        Boolean bAttached bOk
31517>>>>>>>        Handle hoItem
31517>>>>>>>        Variant vItem
31517>>>>>>>        Integer i iCount
31517>>>>>>>        String sCat
31517>>>>>>>        
31517>>>>>>>        Move (IsComObjectCreated(Self)) to bAttached
31518>>>>>>>        If not bAttached Begin
31520>>>>>>>            Error DFERR_PROGRAM "Assert: Find by Category commandbar not attached"
31521>>>>>>>>
31521>>>>>>>            Function_Return (NullComObject())
31522>>>>>>>        End
31522>>>>>>>>
31522>>>>>>>        
31522>>>>>>>        Get Create U_cCJComTabControlItem to hoItem
31523>>>>>>>        Get ComCategoryCount to iCount
31524>>>>>>>        For i from 0 to (iCount-1)
31530>>>>>>>>
31530>>>>>>>            Get ComCategory i to vItem
31531>>>>>>>            Set pvComObject of hoItem to vItem
31532>>>>>>>            Get ComCaption of hoItem to sCat
31533>>>>>>>            Move (sCat=sName) to bOk
31534>>>>>>>            If bOk ;                Break
31537>>>>>>>        Loop
31538>>>>>>>>
31538>>>>>>>        Send destroy of hoItem
31539>>>>>>>        If not bOk Begin
31541>>>>>>>            Move (NullComObject()) to vItem
31542>>>>>>>        End
31542>>>>>>>>
31542>>>>>>>        Function_Return vItem
31543>>>>>>>    End_Function
31544>>>>>>>    
31544>>>>>>>End_Class
31545>>>>>>>
31545>>>>>>>
31545>>>>>>>Class cCJTabControlItem is a cCJComTabControlItem
31546>>>>>>>    
31546>>>>>>>    Procedure Construct_Object
31548>>>>>>>        Forward Send Construct_Object
31550>>>>>>>        Property String psCategory ""
31551>>>>>>>        Property String psToolTip ""
31552>>>>>>>        Property String psImage ""
31553>>>>>>>        Set peNeighborhood to nhNo
31554>>>>>>>    End_Procedure
31555>>>>>>>    
31555>>>>>>>    Procedure CreateComInstance Handle hoTabToolBar
31557>>>>>>>        Handle hoCommandBars hoCommandBarControls  hoControl
31557>>>>>>>        Variant vCommandBarControls vTab vControl
31557>>>>>>>        String sCategory sTip sImage
31557>>>>>>>        Integer iCount i iNewCount iId
31557>>>>>>>        Boolean bOk
31557>>>>>>>        
31557>>>>>>>        Get psCategory to sCategory
31558>>>>>>>        Get psToolTip to sTip
31559>>>>>>>        Get psImage to sImage
31560>>>>>>>        
31560>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31561>>>>>>>        
31561>>>>>>>        Get ComCategoryCount of hoTabToolBar to iCount
31562>>>>>>>        Get ComInsertCategory of hoTabToolbar iCount sCategory to vTab
31563>>>>>>>        Set pvComObject to vTab
31564>>>>>>>        
31564>>>>>>>        Set ComToolTip to sTip
31565>>>>>>>        
31565>>>>>>>        If (sImage<>"") Begin
31567>>>>>>>            Get AddImage of hoCommandBars sImage 0 xtpImageNormal to iId
31568>>>>>>>            Set ComImage to iId
31569>>>>>>>        End
31569>>>>>>>>
31569>>>>>>>        
31569>>>>>>>        If (iCount=0) Begin
31571>>>>>>>            Set ComSelected to True
31572>>>>>>>        End
31572>>>>>>>>
31572>>>>>>>        
31572>>>>>>>        Send OnCreate
31573>>>>>>>        
31573>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
31574>>>>>>>        Get ComControls of hoTabToolBar to vCommandBarControls
31575>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
31576>>>>>>>        
31576>>>>>>>        // before creating the child com controls, get the count of controls
31576>>>>>>>        Get ComCount of hoCommandBarControls to iCount
31577>>>>>>>        
31577>>>>>>>        Broadcast Send CreateComInstance hoCommandBarControls
31579>>>>>>>        
31579>>>>>>>        // get the new count of controls. The difference are the new controls.
31579>>>>>>>        Get ComCount of hoCommandBarControls to iNewCount
31580>>>>>>>        
31580>>>>>>>        Get create U_cCJCommandBarControl to hoControl
31581>>>>>>>        For i from (iCount+1) to iNewCount
31587>>>>>>>>
31587>>>>>>>            Get ComItem of hoCommandBarControls i to vControl
31588>>>>>>>            Set pvComObject of hoControl to vControl
31589>>>>>>>            Set ComCategory of hoControl to sCategory
31590>>>>>>>        Loop
31591>>>>>>>>
31591>>>>>>>        Send Destroy of hoControl
31592>>>>>>>        Send Destroy of hoCommandBarControls
31593>>>>>>>        
31593>>>>>>>    End_Procedure
31594>>>>>>>    
31594>>>>>>>    Procedure OnCreate
31596>>>>>>>    End_Procedure
31597>>>>>>>    
31597>>>>>>>End_Class
31598>>>>>>>
31598>>>>>>>
31598>>>>>>>
31598>>>>>>>Class cCJContextMenu is a cCJCommandBar
31599>>>>>>>    
31599>>>>>>>    Procedure Construct_Object
31601>>>>>>>        Forward Send Construct_Object
31603>>>>>>>        Property Boolean pbEnableAnimation  False
31604>>>>>>>        Property Boolean pbControlDoubleGripper    False
31605>>>>>>>        Property Boolean pbControlPopupToolBar   False
31606>>>>>>>        
31606>>>>>>>        Property Handle phoCommandBars 0
31607>>>>>>>        
31607>>>>>>>        // this is set using SetPopupLocation.
31607>>>>>>>        Property tWinPoint pLocation
31608>>>>>>>    End_Procedure
31609>>>>>>>    
31609>>>>>>>    
31609>>>>>>>    // context menus use a differnt logic for finding the commandbars. Normally it will just attach to
31609>>>>>>>    // the global commandbars. However, a developer can choose attach this to a different commandbars by
31609>>>>>>>    // setting phoCommandBars.
31609>>>>>>>    Function CommandBarSystemObject Returns Handle
31611>>>>>>>        Handle hoCommandBars
31611>>>>>>>        Get phoCommandBars to hoCommandBars
31612>>>>>>>        If (hoCommandBars=0) Begin
31614>>>>>>>            Move ghoCommandBars to hoCommandBars
31615>>>>>>>        End
31615>>>>>>>>
31615>>>>>>>        Function_Return hoCommandBars
31616>>>>>>>    End_Function
31617>>>>>>>    
31617>>>>>>>    Function CreateCommandBar Returns Variant
31619>>>>>>>        Variant vCommandBar
31619>>>>>>>        Handle hoCommandBars
31619>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31620>>>>>>>        Get ComAdd of hoCommandBars "Context Toolbar" xtpBarPopup to vCommandBar
31621>>>>>>>        Function_Return vCommandBar
31622>>>>>>>    End_Function
31623>>>>>>>    
31623>>>>>>>    Procedure CreatePopupComInstance
31625>>>>>>>        Handle hoCommandBars hoCommandBarControls
31625>>>>>>>        Variant vCommandBar vCommandBarControls
31625>>>>>>>        Boolean bEnableAnimation bDoubleGripper bPopupToolBar
31625>>>>>>>        
31625>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31626>>>>>>>        Get pbEnableAnimation to bEnableAnimation
31627>>>>>>>        Get pbControlDoubleGripper to bDoubleGripper
31628>>>>>>>        Get pbControlPopupToolBar  to bPopupToolBar
31629>>>>>>>        
31629>>>>>>>        Get CreateCommandBar to vCommandBar
31630>>>>>>>        Set pvComObject to vCommandBar
31631>>>>>>>        
31631>>>>>>>        Set ComEnableAnimation to bEnableAnimation
31632>>>>>>>        Set ComDoubleGripper to bDoubleGripper
31633>>>>>>>        Send ComSetPopupToolBar bPopupToolBar
31634>>>>>>>        
31634>>>>>>>        Send OnCreate
31635>>>>>>>        
31635>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
31636>>>>>>>        Get ComControls to vCommandBarControls
31637>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
31638>>>>>>>        
31638>>>>>>>        Broadcast Send CreateComInstance hoCommandBarControls
31640>>>>>>>        
31640>>>>>>>        // This does the same thing OnComPopupInit does.
31640>>>>>>>        
31640>>>>>>>        // this does all of the inital setting of enabled, etc.
31640>>>>>>>        Send PopupInit of hoCommandBars Self hoCommandBarControls
31641>>>>>>>        // user event to do whatever
31641>>>>>>>        Send OnPopupInit vCommandBar hoCommandBarControls
31642>>>>>>>        
31642>>>>>>>        Send Destroy of hoCommandBarControls
31643>>>>>>>        
31643>>>>>>>        // we keep the control attached with popups or we lose it.
31643>>>>>>>    End_Procedure
31644>>>>>>>    
31644>>>>>>>    
31644>>>>>>>    Procedure Popup
31646>>>>>>>        Handle hoCommandBars
31646>>>>>>>        Integer iLoc iId iRet
31646>>>>>>>        tWinPoint Pt PtZero
31646>>>>>>>        tWinPoint Pt PtZero
31646>>>>>>>        
31646>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31647>>>>>>>        If (hoCommandBars=0) Begin
31649>>>>>>>            Error DFERR_PROGRAM "Context menu not attached to commandbars"
31650>>>>>>>>
31650>>>>>>>            Procedure_Return
31651>>>>>>>        End
31651>>>>>>>>
31651>>>>>>>        
31651>>>>>>>        // this will create the context menu and return it attached.
31651>>>>>>>        Send CreatePopupComInstance
31652>>>>>>>        
31652>>>>>>>        // see if location has been set before popup by SetPopupLocation
31652>>>>>>>        Get pLocation to pt
31653>>>>>>>        If (pt.x=0 and Pt.y=0) Begin
31655>>>>>>>            Move (GetCursorPos(addressOf(Pt))) to iRet    // Get the mouse location (this technique supports -ve co-ordinates
31656>>>>>>>        End
31656>>>>>>>>
31656>>>>>>>        Else Begin
31657>>>>>>>            // if set, we use the setting and clear this location for the next popup
31657>>>>>>>            Set pLocation to PtZero
31658>>>>>>>        End
31658>>>>>>>>
31658>>>>>>>        
31658>>>>>>>        Get ComShowPopup OLE_VT_Empty Pt.x Pt.y to iID
31659>>>>>>>        
31659>>>>>>>        // This releases all actions (which will still exist on the COM side)
31659>>>>>>>        // and controls (controls should already be released on both DF and COM side)
31659>>>>>>>        Broadcast Recursive_up Send ReleaseComObject
31661>>>>>>>        Send ReleaseComObject // after popup CJ deletes the controls, so we release this
31662>>>>>>>    End_Procedure
31663>>>>>>>    
31663>>>>>>>    Procedure OnCreate
31665>>>>>>>    End_Procedure
31666>>>>>>>    
31666>>>>>>>    // before called, self and all items IsEnabled, IsChecked and IsVisible are called
31666>>>>>>>    // the first param is of no interest as it is this object which is already attached
31666>>>>>>>    Procedure OnPopupInit Variant vCommandBarControl Handle hoCommandBarControls
31668>>>>>>>    End_Procedure
31669>>>>>>>    
31669>>>>>>>    // This can be called before popup to select a custom popup location. If not called
31669>>>>>>>    // the location is determined in Popup by looking at the mouse position. This must be
31669>>>>>>>    // called before each popup
31669>>>>>>>    Procedure SetPopupLocation Integer iY Integer iX
31671>>>>>>>        tWinPoint pt
31671>>>>>>>        tWinPoint pt
31671>>>>>>>        Move iX to pt.x
31672>>>>>>>        Move iy to pt.y
31673>>>>>>>        Set pLocation to pt
31674>>>>>>>    End_Procedure
31675>>>>>>>    
31675>>>>>>>End_Class
31676>>>>>>>
31676>>>>>>>// used for the Customize dialog
31676>>>>>>>// This provides a way to add controls to the config menu that are not defined
31676>>>>>>>// elsewhere in the menu
31676>>>>>>>
31676>>>>>>>Class cCJDesignerMenu is a cObject
31677>>>>>>>    
31677>>>>>>>    Procedure Construct_Object
31679>>>>>>>        Forward Send Construct_Object
31681>>>>>>>        Set peNeighborhood to nhNo
31682>>>>>>>    End_Procedure
31683>>>>>>>    
31683>>>>>>>    // Get the Controls Collection for the designer and call all children
31683>>>>>>>    Procedure CreateComInstance
31685>>>>>>>        Handle hoCommandBarControls
31685>>>>>>>        Get DesignerControlsCollection to hoCommandBarControls
31686>>>>>>>        Broadcast Send CreateComInstance hoCommandBarControls
31688>>>>>>>    End_Procedure
31689>>>>>>>    
31689>>>>>>>End_Class
31690>>>>>>>
31690>>>>>>>// This creates an action object. It will normally not be directly instanciated but will be used
31690>>>>>>>// as the superclass of the cCJMenuItem class.
31690>>>>>>>
31690>>>>>>>
31690>>>>>>>Class cCJAction is a cCJCommandBarAction
31691>>>>>>>    
31691>>>>>>>    Procedure Construct_Object
31693>>>>>>>        Forward Send Construct_Object
31695>>>>>>>        
31695>>>>>>>        // normally auto assigned. It can be manually assigned.
31695>>>>>>>        Property Integer piId 0
31696>>>>>>>        
31696>>>>>>>        // determins if this action should be updated by the timer. You only set this true if
31696>>>>>>>        // the checked state, enabled state or visible state will be changed by other actions
31696>>>>>>>        // within the program.
31696>>>>>>>        Property Boolean pbPrivateActiveUpdate False
31697>>>>>>>        
31697>>>>>>>        Property Boolean pbPrivateChecked False
31698>>>>>>>        Property Boolean pbPrivateEnabled True
31699>>>>>>>        Property Boolean pbPrivateVisible True
31700>>>>>>>        Property String  psPrivateCaption ""
31701>>>>>>>        Property String  psPrivateCategory C_$CategoryOther
31702>>>>>>>        Property String  psPrivateDescriptionText ""
31703>>>>>>>        Property String  psPrivateTooltipText ""
31704>>>>>>>        Property String  psPrivateShortcutText ""
31705>>>>>>>        Property Integer piPrivateShortCutKey 0
31706>>>>>>>        
31706>>>>>>>        // These are just initial values, if the developer needs to dynamically change
31706>>>>>>>        // images they should use the ComIconId to select the item they need from the image list
31706>>>>>>>        
31706>>>>>>>        // normally only psImage needs to be set
31706>>>>>>>        Property String psImage ""
31707>>>>>>>        Property String psImageDisabled ""
31708>>>>>>>        Property String psImageHot ""
31709>>>>>>>        Property String psImageChecked ""
31710>>>>>>>        Property String psImagePressed ""
31711>>>>>>>        
31711>>>>>>>        Property Integer piPrivateIconId 0
31712>>>>>>>        
31712>>>>>>>        Set peNeighborhood to nhNo
31713>>>>>>>    End_Procedure
31714>>>>>>>    
31714>>>>>>>    
31714>>>>>>>    Procedure Set pbChecked Boolean bValue
31716>>>>>>>        Set pbPrivateChecked to bValue
31717>>>>>>>        If (IsComObjectCreated(Self)) Begin
31719>>>>>>>            Set ComChecked to bValue
31720>>>>>>>        End
31720>>>>>>>>
31720>>>>>>>    End_Procedure
31721>>>>>>>    
31721>>>>>>>    Function pbChecked Returns Boolean
31723>>>>>>>        Boolean bValue
31723>>>>>>>        If (IsComObjectCreated(Self)) Begin
31725>>>>>>>            Get ComChecked to bValue
31726>>>>>>>        End
31726>>>>>>>>
31726>>>>>>>        Else Begin
31727>>>>>>>            Get pbPrivateChecked to bValue
31728>>>>>>>        End
31728>>>>>>>>
31728>>>>>>>        Function_Return bValue
31729>>>>>>>    End_Function
31730>>>>>>>    
31730>>>>>>>    Procedure Set pbEnabled Boolean bValue
31732>>>>>>>        Set pbPrivateEnabled to bValue
31733>>>>>>>        If (IsComObjectCreated(Self)) Begin
31735>>>>>>>            Set ComEnabled to bValue
31736>>>>>>>        End
31736>>>>>>>>
31736>>>>>>>    End_Procedure
31737>>>>>>>    
31737>>>>>>>    Function pbEnabled Returns Boolean
31739>>>>>>>        Boolean bValue
31739>>>>>>>        If (IsComObjectCreated(Self)) Begin
31741>>>>>>>            Get ComEnabled to bValue
31742>>>>>>>        End
31742>>>>>>>>
31742>>>>>>>        Else Begin
31743>>>>>>>            Get pbPrivateEnabled to bValue
31744>>>>>>>        End
31744>>>>>>>>
31744>>>>>>>        Function_Return bValue
31745>>>>>>>    End_Function
31746>>>>>>>    
31746>>>>>>>    Procedure Set pbVisible Boolean bValue
31748>>>>>>>        Set pbPrivateVisible to bValue
31749>>>>>>>        If (IsComObjectCreated(Self)) Begin
31751>>>>>>>            Set ComVisible to bValue
31752>>>>>>>        End
31752>>>>>>>>
31752>>>>>>>    End_Procedure
31753>>>>>>>    
31753>>>>>>>    Function pbVisible Returns Boolean
31755>>>>>>>        Boolean bValue
31755>>>>>>>        If (IsComObjectCreated(Self)) Begin
31757>>>>>>>            Get ComVisible to bValue
31758>>>>>>>        End
31758>>>>>>>>
31758>>>>>>>        Else Begin
31759>>>>>>>            Get pbPrivateVisible to bValue
31760>>>>>>>        End
31760>>>>>>>>
31760>>>>>>>        Function_Return bValue
31761>>>>>>>    End_Function
31762>>>>>>>    
31762>>>>>>>    
31762>>>>>>>    Procedure Set psCaption String sValue
31764>>>>>>>        Set psPrivateCaption to sValue
31765>>>>>>>        If (IsComObjectCreated(Self)) Begin
31767>>>>>>>            Set ComCaption to sValue
31768>>>>>>>        End
31768>>>>>>>>
31768>>>>>>>    End_Procedure
31769>>>>>>>    
31769>>>>>>>    Function psCaption Returns String
31771>>>>>>>        String sValue
31771>>>>>>>        If (IsComObjectCreated(Self)) Begin
31773>>>>>>>            Get ComCaption to sValue
31774>>>>>>>        End
31774>>>>>>>>
31774>>>>>>>        Else Begin
31775>>>>>>>            Get psPrivateCaption to sValue
31776>>>>>>>        End
31776>>>>>>>>
31776>>>>>>>        Function_Return sValue
31777>>>>>>>    End_Function
31778>>>>>>>    
31778>>>>>>>    Procedure Set psCategory String sValue
31780>>>>>>>        Set psPrivateCategory to sValue
31781>>>>>>>        If (IsComObjectCreated(Self)) Begin
31783>>>>>>>            Set ComCategory to sValue
31784>>>>>>>        End
31784>>>>>>>>
31784>>>>>>>    End_Procedure
31785>>>>>>>    
31785>>>>>>>    Function psCategory Returns String
31787>>>>>>>        String sValue
31787>>>>>>>        If (IsComObjectCreated(Self)) Begin
31789>>>>>>>            Get ComCategory to sValue
31790>>>>>>>        End
31790>>>>>>>>
31790>>>>>>>        Else Begin
31791>>>>>>>            Get psPrivateCategory to sValue
31792>>>>>>>        End
31792>>>>>>>>
31792>>>>>>>        Function_Return sValue
31793>>>>>>>    End_Function
31794>>>>>>>    
31794>>>>>>>    Procedure Set psDescription String sValue
31796>>>>>>>        Set psPrivateDescriptionText to sValue
31797>>>>>>>        If (IsComObjectCreated(Self)) Begin
31799>>>>>>>            Set ComDescriptionText to sValue
31800>>>>>>>        End
31800>>>>>>>>
31800>>>>>>>    End_Procedure
31801>>>>>>>    
31801>>>>>>>    Function psDescription Returns String
31803>>>>>>>        String sValue
31803>>>>>>>        If (IsComObjectCreated(Self)) Begin
31805>>>>>>>            Get ComDescriptionText to sValue
31806>>>>>>>        End
31806>>>>>>>>
31806>>>>>>>        Else Begin
31807>>>>>>>            Get psPrivateDescriptionText to sValue
31808>>>>>>>        End
31808>>>>>>>>
31808>>>>>>>        Function_Return sValue
31809>>>>>>>    End_Function
31810>>>>>>>    
31810>>>>>>>    Procedure Set psToolTip String sValue
31812>>>>>>>        Set psPrivateToolTipText to sValue
31813>>>>>>>        If (IsComObjectCreated(Self)) Begin
31815>>>>>>>            Set ComToolTipText to sValue
31816>>>>>>>        End
31816>>>>>>>>
31816>>>>>>>    End_Procedure
31817>>>>>>>    
31817>>>>>>>    Function psToolTip Returns String
31819>>>>>>>        String sValue
31819>>>>>>>        If (IsComObjectCreated(Self)) Begin
31821>>>>>>>            Get ComToolTipText to sValue
31822>>>>>>>        End
31822>>>>>>>>
31822>>>>>>>        Else Begin
31823>>>>>>>            Get psPrivateToolTipText to sValue
31824>>>>>>>        End
31824>>>>>>>>
31824>>>>>>>        Function_Return sValue
31825>>>>>>>    End_Function
31826>>>>>>>    
31826>>>>>>>    Procedure Set psShortcut String sValue
31828>>>>>>>        Set psPrivateShortcutText to sValue
31829>>>>>>>        If (IsComObjectCreated(Self)) Begin
31831>>>>>>>            Set ComShortcutText to sValue
31832>>>>>>>        End
31832>>>>>>>>
31832>>>>>>>    End_Procedure
31833>>>>>>>    
31833>>>>>>>    Function psShortcut Returns String
31835>>>>>>>        String sValue
31835>>>>>>>        If (IsComObjectCreated(Self)) Begin
31837>>>>>>>            Get ComShortcutText to sValue
31838>>>>>>>        End
31838>>>>>>>>
31838>>>>>>>        Else Begin
31839>>>>>>>            Get psPrivateShortcutText to sValue
31840>>>>>>>        End
31840>>>>>>>>
31840>>>>>>>        Function_Return sValue
31841>>>>>>>    End_Function
31842>>>>>>>    
31842>>>>>>>    
31842>>>>>>>    Procedure Set piShortCutKey Integer iExtra Integer iKey
31844>>>>>>>        Set piPrivateShortCutKey to (iKey + (iExtra*65536))
31845>>>>>>>        If (IsComObjectCreated(Self)) Begin
31847>>>>>>>            Send BindKey iExtra iKey
31848>>>>>>>        End
31848>>>>>>>>
31848>>>>>>>    End_Procedure
31849>>>>>>>    
31849>>>>>>>    Function piShortCutKey Returns Integer
31851>>>>>>>        Integer iValue
31851>>>>>>>        Get piPrivateShortCutKey to iValue
31852>>>>>>>        Function_Return iValue
31853>>>>>>>    End_Function
31854>>>>>>>    
31854>>>>>>>    Procedure BindKey Integer iExtra Integer iKey
31856>>>>>>>        Integer iId
31856>>>>>>>        Handle hoKeyBindings hoCommandBars
31856>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31857>>>>>>>        Get piId to iId
31858>>>>>>>        If (iId=0) Begin
31860>>>>>>>            Error DFERR_PROGRAM "Assert: action Id zero in keybinding"
31861>>>>>>>>
31861>>>>>>>            Procedure_Return
31862>>>>>>>        End
31862>>>>>>>>
31862>>>>>>>        Get KeyBindingsCollection of hoCommandBars to hoKeyBindings
31863>>>>>>>        
31863>>>>>>>        Send ComAdd of hoKeyBindings iExtra iKey iId
31864>>>>>>>    End_Procedure
31865>>>>>>>    
31865>>>>>>>    Procedure Set pbActiveUpdate Boolean bValue
31867>>>>>>>        Handle hoCommandBars
31867>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31868>>>>>>>        Set pbPrivateActiveUpdate to bValue
31869>>>>>>>        If (IsComObjectCreated(Self)) Begin
31871>>>>>>>            If bValue Begin
31873>>>>>>>                Send AddActiveAction of hoCommandBars Self
31874>>>>>>>            End
31874>>>>>>>>
31874>>>>>>>            Else Begin
31875>>>>>>>                Send RemoveActiveAction of hoCommandBars Self
31876>>>>>>>            End
31876>>>>>>>>
31876>>>>>>>        End
31876>>>>>>>>
31876>>>>>>>    End_Procedure
31877>>>>>>>    
31877>>>>>>>    Function pbActiveUpdate Returns Integer
31879>>>>>>>        Boolean bValue
31879>>>>>>>        Get pbPrivateActiveUpdate to bValue
31880>>>>>>>        Function_Return bValue
31881>>>>>>>    End_Function
31882>>>>>>>    
31882>>>>>>>    // normally this is zero and not changed. When zero the imageId used will be
31882>>>>>>>    // the statusbarId and this is the ID that is used when the psImage method is used.
31882>>>>>>>    // Using psImage is preferred as it adds the icon and assigns it to the object.
31882>>>>>>>    // This can be used to change icons. Note 0=use StatusbarId
31882>>>>>>>    Procedure Set piIconId Integer iValue
31884>>>>>>>        Set piPrivateIconId to iValue
31885>>>>>>>        If (IsComObjectCreated(Self)) Begin
31887>>>>>>>            Set ComIconId to iValue
31888>>>>>>>        End
31888>>>>>>>>
31888>>>>>>>    End_Procedure
31889>>>>>>>    
31889>>>>>>>    Function piIconId Returns Integer
31891>>>>>>>        Integer iValue
31891>>>>>>>        If (IsComObjectCreated(Self)) Begin
31893>>>>>>>            Get ComIconId to iValue
31894>>>>>>>        End
31894>>>>>>>>
31894>>>>>>>        Else Begin
31895>>>>>>>            Get piPrivateIconId to iValue
31896>>>>>>>        End
31896>>>>>>>>
31896>>>>>>>        Function_Return iValue
31897>>>>>>>    End_Function
31898>>>>>>>    
31898>>>>>>>    
31898>>>>>>>    
31898>>>>>>>    // For augmentation. Return true if the item should be visible
31898>>>>>>>    Function IsVisible Returns Boolean
31900>>>>>>>        Boolean bBool
31900>>>>>>>        Get pbVisible to bBool
31901>>>>>>>        Function_Return bBool
31902>>>>>>>    End_Function
31903>>>>>>>    
31903>>>>>>>    // For augmentation. Return true if the item should be enabled
31903>>>>>>>    Function IsEnabled Returns Boolean
31905>>>>>>>        Boolean bBool
31905>>>>>>>        Get pbEnabled to bBool
31906>>>>>>>        Function_Return bBool
31907>>>>>>>    End_Function
31908>>>>>>>    
31908>>>>>>>    // For augmentation. Return true if the item should be checked
31908>>>>>>>    Function IsChecked Returns Boolean
31910>>>>>>>        Boolean bBool
31910>>>>>>>        Get pbChecked to bBool
31911>>>>>>>        Function_Return bBool
31912>>>>>>>    End_Function
31913>>>>>>>    
31913>>>>>>>    Procedure CreateComAction
31915>>>>>>>        Variant vID vAction
31915>>>>>>>        Handle hoCommandBars hoActions
31915>>>>>>>        Handle[] hoActiveActions
31916>>>>>>>        String sCaption sToolTip sDescriptionText sCategory  sShortCutText
31916>>>>>>>        String sIcon sIconDisabled sIconHot sIconChecked sIconPressed
31916>>>>>>>        Integer iId iShortCut iIconId iAssignedId
31916>>>>>>>        Boolean bVisible bChecked bEnabled bOk
31916>>>>>>>        
31916>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31917>>>>>>>        Get piId to iID
31918>>>>>>>        If (iId=0) Begin
31920>>>>>>>            // this can happen with context menus defined before the Commandbars is created
31920>>>>>>>            Get AssignId of hoCommandBars to iID
31921>>>>>>>            Set piId to iID
31922>>>>>>>        End
31922>>>>>>>>
31922>>>>>>>        
31922>>>>>>>        Get psPrivateCaption to sCaption
31923>>>>>>>        Get psPrivateTooltipText to sToolTip
31924>>>>>>>        Get psPrivateShortcutText to sShortCutText
31925>>>>>>>        Get psPrivateDescriptionText to sDescriptionText
31926>>>>>>>        Get psPrivateCategory to sCategory
31927>>>>>>>        Get pbPrivateVisible to bVisible
31928>>>>>>>        Get pbPrivateChecked to bChecked
31929>>>>>>>        Get pbPrivateEnabled to bEnabled
31930>>>>>>>        Get piPrivateShortCutKey to iShortCut
31931>>>>>>>        Get psImage to sIcon
31932>>>>>>>        Get psImageDisabled to sIconDisabled
31933>>>>>>>        Get psImageHot to sIconHot
31934>>>>>>>        Get psImageChecked to sIconChecked
31935>>>>>>>        Get psImagePressed to sIconPressed
31936>>>>>>>        Get piPrivateIconId to iIconId
31937>>>>>>>        
31937>>>>>>>        Get CommandBarSystemObject to hoCommandBars // via delegation
31938>>>>>>>        Get ActionsCollection of hoCommandBars to hoActions
31939>>>>>>>        Get ComAdd of hoActions iID sCaption sToolTip sDescriptionText sCategory to vAction
31940>>>>>>>        Set pvComObject to vAction
31941>>>>>>>        Set ComEnabled to bEnabled
31942>>>>>>>        Set ComVisible to bVisible
31943>>>>>>>        Set ComChecked to bChecked
31944>>>>>>>        Set ComShortcutText to sShortCutText
31945>>>>>>>        Set piIconId to iIconId
31946>>>>>>>        Set ComTag to Self // used as back pointer from com object to DF object
31947>>>>>>>        
31947>>>>>>>        If (sIcon<>"") Begin
31949>>>>>>>            Get AddImage of hoCommandBars sIcon iId xtpImageNormal to iAssignedId
31950>>>>>>>        End
31950>>>>>>>>
31950>>>>>>>        If (sIconDisabled<>"") Begin
31952>>>>>>>            Get AddImage of hoCommandBars sIconDisabled iId xtpImageDisabled to iAssignedId
31953>>>>>>>        End
31953>>>>>>>>
31953>>>>>>>        If (sIconHot<>"") Begin
31955>>>>>>>            Get AddImage of hoCommandBars sIconHot iId xtpImageHot to iAssignedId
31956>>>>>>>        End
31956>>>>>>>>
31956>>>>>>>        If (sIconChecked<>"") Begin
31958>>>>>>>            Get AddImage of hoCommandBars sIconChecked iId xtpImageChecked to iAssignedId
31959>>>>>>>        End
31959>>>>>>>>
31959>>>>>>>        If (sIconPressed<>"") Begin
31961>>>>>>>            Get AddImage of hoCommandBars sIconPressed iId xtpImagePressed to iAssignedId
31962>>>>>>>        End
31962>>>>>>>>
31962>>>>>>>        
31962>>>>>>>        If (iShortCut<>0) Begin
31964>>>>>>>            Send BindKey (hi(iShortCut)) (low(iShortCut))
31965>>>>>>>        End
31965>>>>>>>>
31965>>>>>>>        
31965>>>>>>>        Send OnCreateAction
31966>>>>>>>        
31966>>>>>>>        Send RegisterAction of hoCommandBars Self
31967>>>>>>>        
31967>>>>>>>    End_Procedure
31968>>>>>>>    
31968>>>>>>>    // called during initial activation to set all default actions.
31968>>>>>>>    Procedure CreateComInstance
31970>>>>>>>        Send CreateComAction
31971>>>>>>>        // actions are flat. You don't look for child actions
31971>>>>>>>    End_Procedure
31972>>>>>>>    
31972>>>>>>>    // find the first control that matches this action's ID. This searches the entire
31972>>>>>>>    // commandbar system and "first" is just the first one it happens to find.
31972>>>>>>>    Function FindFirstControl Returns Variant
31974>>>>>>>        Variant vControl
31974>>>>>>>        Integer iId
31974>>>>>>>        Handle hoCommandBars hoCommandBar
31974>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31975>>>>>>>        Get piId to iId
31976>>>>>>>        Get ComFindControl of hoCommandBars xtpControlError iId Nothing True to vControl
31977>>>>>>>        If (IsNullComObject(vControl)) Begin
31979>>>>>>>            // if not found this could be from our context menu. ComFindControl does not search
31979>>>>>>>            // the active context menu. We will test the focused command bar to see if we can
31979>>>>>>>            // find the object in there. This may create a duplicate search but it will not matter.
31979>>>>>>>            Get ComFocusedCommandBar of hoCommandBars to vControl
31980>>>>>>>            If (not(IsNullComObject(vControl))) Begin
31982>>>>>>>                Get Create U_cCJCommandBar to hoCommandBar
31983>>>>>>>                Set pvComObject of hoCommandBar to vControl
31984>>>>>>>                Get ComFindControl of hoCommandBar xtpControlError iId Nothing True to vControl
31985>>>>>>>                Send Destroy of hoCommandBar
31986>>>>>>>            End
31986>>>>>>>>
31986>>>>>>>        End
31986>>>>>>>>
31986>>>>>>>        Function_Return vControl
31987>>>>>>>    End_Function
31988>>>>>>>    
31988>>>>>>>    // delete all com controls for this action
31988>>>>>>>    Procedure DeleteAllControlsForAction
31990>>>>>>>        Handle hoCommandBars hoControl
31990>>>>>>>        Variant vControl
31990>>>>>>>        Get Create U_cCJCommandBarControl to hoControl
31991>>>>>>>        Repeat
31991>>>>>>>>
31991>>>>>>>            Get FindFirstControl to vControl
31992>>>>>>>            If not (IsNullComObject(vControl)) Begin
31994>>>>>>>                Set pvComObject of hoControl to vControl
31995>>>>>>>                Send ComDelete to hoControl
31996>>>>>>>            End
31996>>>>>>>>
31996>>>>>>>        Until (IsNullComObject(vControl))
31998>>>>>>>        Send Destroy of hoControl
31999>>>>>>>    End_Procedure
32000>>>>>>>    
32000>>>>>>>    // find all controls owned by this action anywhere in the commandbar system
32000>>>>>>>    // returns a variant array. This is only needed if you expect that there will be
32000>>>>>>>    // multiple hits such as could happen if you allow end user editing.
32000>>>>>>>    // This was created because there is no COM message to do this. This is pretty low level
32000>>>>>>>    // (like ComFindControl) and will not be used much.
32000>>>>>>>    Function FindAllControls Returns Variant[]
32002>>>>>>>        Variant[] ArrayofvControls
32003>>>>>>>        Integer iId
32003>>>>>>>        Handle hoCommandBars
32003>>>>>>>        Get CommandBarSystemObject to hoCommandBars
32004>>>>>>>        Get piId to iId
32005>>>>>>>        Get FindControls of hoCommandBars iId to ArrayofvControls
32006>>>>>>>        Function_Return ArrayofvControls
32007>>>>>>>    End_Function
32008>>>>>>>    
32008>>>>>>>    // Return the class for the passed control type. Good for augmentation
32008>>>>>>>    Function ClassForControlType Integer eType Returns Integer
32010>>>>>>>        Integer iClass
32010>>>>>>>        Case Begin
32010>>>>>>>            Case (eType=xtpControlButton)
32012>>>>>>>            Case (eType=xtpControlCheckBox)
32015>>>>>>>            Case (eType=xtpControlRadioButton)
32018>>>>>>>            Case (eType=xtpControlLabel)
32021>>>>>>>                Move U_cCJCommandBarButton to eType
32022>>>>>>>                Case Break
32023>>>>>>>            Case (eType=xtpControlPopup)
32026>>>>>>>            Case (eType=xtpControlButtonPopup)
32029>>>>>>>            Case (eType=xtpControlSplitButtonPopup)
32032>>>>>>>                Move U_cCJCommandBarPopup to eType
32033>>>>>>>                Case Break
32034>>>>>>>            Case (eType=xtpControlComboBox)
32037>>>>>>>                Move U_cCJCommandBarComboBox to eType
32038>>>>>>>                Case Break
32039>>>>>>>            Case (eType=xtpControlCustom)
32042>>>>>>>                Move U_cCJCommandBarControlCustom to eType
32043>>>>>>>                Case Break
32044>>>>>>>            Case (eType=xtpControlEdit)
32047>>>>>>>                Move U_cCJCommandBarEdit to eType
32048>>>>>>>                Case Break
32049>>>>>>>            Case (eType=xtpControlGallery)
32052>>>>>>>                Move U_cCJCommandBarGallery to eType
32053>>>>>>>                Case Break
32054>>>>>>>            Case Else
32054>>>>>>>                Move U_cCJCommandBarControl to eType
32055>>>>>>>        Case End
32055>>>>>>>        Function_Return eType
32056>>>>>>>    End_Function
32057>>>>>>>    
32057>>>>>>>    // Creates a DF object of the proper type and binds it to the COM object.
32057>>>>>>>    Function CreateProxyControl Variant vControl Returns Handle
32059>>>>>>>        Handle hoObj
32059>>>>>>>        Integer eType iClass
32059>>>>>>>        Get Create U_cCJCommandBarControl to hoObj
32060>>>>>>>        Set pvComObject of hoObj to vControl
32061>>>>>>>        Get ComType of hoObj to eType
32062>>>>>>>        Send Destroy of hoObj
32063>>>>>>>        Move 0 to hoObj
32064>>>>>>>        Get ClassForControlType eType to iCLass
32065>>>>>>>        If (iClass<>0) Begin
32067>>>>>>>            Get Create iClass to hoObj
32068>>>>>>>            Set pvComObject of hoObj to vControl
32069>>>>>>>        End
32069>>>>>>>>
32069>>>>>>>        Function_Return hoObj
32070>>>>>>>    End_Function
32071>>>>>>>    
32071>>>>>>>    // use this to find the COM control and return a DF object. You must call this if
32071>>>>>>>    // you don't already have the control pointer. You should only call this if you know that
32071>>>>>>>    // there will only be one control attached to the action. Make no assumption about what "First" means. It's
32071>>>>>>>    // the first one the COM control finds.
32071>>>>>>>    Function CreateFirstProxyControl Returns Handle
32073>>>>>>>        Variant vControl
32073>>>>>>>        Handle hoControl
32073>>>>>>>        Get FindFirstControl to vControl
32074>>>>>>>        If (not(IsNullComObject(vControl))) Begin
32076>>>>>>>            Get CreateProxyControl vControl to hoControl
32077>>>>>>>        End
32077>>>>>>>>
32077>>>>>>>        Function_Return hoControl
32078>>>>>>>    End_Function
32079>>>>>>>    
32079>>>>>>>    
32079>>>>>>>    // when a manual destroy is sent we need to do some cleanup.
32079>>>>>>>    // If an active action, it must be removed from the active action array
32079>>>>>>>    // All menu controls for this action will be removed, wherever they are within the system
32079>>>>>>>    // The Action Id will be added back to the pool for reuse. This is needed because the com
32079>>>>>>>    // action is not destroyed (there is no interface for this).
32079>>>>>>>    Procedure Destroy
32081>>>>>>>        Handle hoCommandBars
32081>>>>>>>        Integer iId
32081>>>>>>>        Variant vControl
32081>>>>>>>        
32081>>>>>>>        Get piId to iId
32082>>>>>>>        // if no com object then this never got activated or another action object is
32082>>>>>>>        // used for this (which doesn't really make sense).
32082>>>>>>>        If (iId>0) Begin
32084>>>>>>>            Get CommandBarSystemObject to hoCommandBars
32085>>>>>>>            If (IsComObjectCreated(Self)) Begin
32087>>>>>>>                Send DeleteAllControlsForAction
32088>>>>>>>            End
32088>>>>>>>>
32088>>>>>>>            Send ReleaseId of hoCommandBars (piId(Self))
32089>>>>>>>        End
32089>>>>>>>>
32089>>>>>>>        Forward Send Destroy
32091>>>>>>>    End_Procedure
32092>>>>>>>    
32092>>>>>>>    // if the action is being released we must remove it from the action pool. This is needed for
32092>>>>>>>    // context menus which whose actions get created and released with each invocation. This will also
32092>>>>>>>    // happen when an object is destroyed. If the com object is created, destroy will send ReleaseComObject
32092>>>>>>>    Procedure ReleaseComObject
32094>>>>>>>        Integer iId
32094>>>>>>>        Handle hoCommandBars
32094>>>>>>>        Get piId to iId
32095>>>>>>>        If (iId>0 and IsComObjectCreated(Self)) Begin
32097>>>>>>>            Get CommandBarSystemObject to hoCommandBars
32098>>>>>>>            Send RemoveRegisteredAction of hoCommandBars Self
32099>>>>>>>        End
32099>>>>>>>>
32099>>>>>>>        Forward Send ReleaseComObject
32101>>>>>>>    End_Procedure
32102>>>>>>>    
32102>>>>>>>    
32102>>>>>>>    // called when this action is selected. Only send OnExecute if the
32102>>>>>>>    // action is enabled.
32102>>>>>>>    Procedure Execute Variant vCommandBarControl
32104>>>>>>>        Boolean bIsEnabled
32104>>>>>>>        Variant vObject
32104>>>>>>>        Get IsEnabled to bIsEnabled
32105>>>>>>>        If bIsEnabled Begin
32107>>>>>>>            // we will allow no parameter being passed. In such a case the developer probably sent
32107>>>>>>>            // execute themselves and did not pass a com pointer (which you don't normally care about)
32107>>>>>>>            // if this happens just pass a null com object to the OnExecute.
32107>>>>>>>            If (Num_Arguments=0) Begin
32109>>>>>>>                Move (NullComObject()) to vObject
32110>>>>>>>            End
32110>>>>>>>>
32110>>>>>>>            Else Begin
32111>>>>>>>                Move vCommandBarControl to vObject
32112>>>>>>>            End
32112>>>>>>>>
32112>>>>>>>            Send OnExecute vObject
32113>>>>>>>            Send Update
32114>>>>>>>        End
32114>>>>>>>>
32114>>>>>>>    End_Procedure
32115>>>>>>>    
32115>>>>>>>    // Updates the action. Can be called by timer when active update or
32115>>>>>>>    // called when a menu pops up
32115>>>>>>>    Procedure Update
32117>>>>>>>        Set pbVisible to (IsVisible(Self))
32118>>>>>>>        Set pbEnabled to (IsEnabled(Self))
32119>>>>>>>        Set pbChecked to (IsChecked(Self))
32120>>>>>>>        Send OnUpdate
32121>>>>>>>    End_Procedure
32122>>>>>>>    
32122>>>>>>>    // Event called to update the action
32122>>>>>>>    Procedure OnUpdate
32124>>>>>>>    End_Procedure
32125>>>>>>>    
32125>>>>>>>    // before this is called IsEnabled is called
32125>>>>>>>    Procedure OnExecute Variant vCommandBarControl
32127>>>>>>>    End_Procedure
32128>>>>>>>    
32128>>>>>>>    // when hover over
32128>>>>>>>    Procedure OnSelected Variant vCommandBarControl
32130>>>>>>>    End_Procedure
32131>>>>>>>    
32131>>>>>>>    // creation of action.
32131>>>>>>>    Procedure OnCreateAction
32133>>>>>>>    End_Procedure
32134>>>>>>>    
32134>>>>>>>    // before called, self and all items IsEnabled, IsChecked and IsVisible are called
32134>>>>>>>    Procedure OnPopupInit Variant vCommandBarControl Handle hoCommandBarControls
32136>>>>>>>    End_Procedure
32137>>>>>>>    
32137>>>>>>>    Procedure End_Construct_Object
32139>>>>>>>        Integer iID
32139>>>>>>>        Handle hoCommandBars
32139>>>>>>>        Get piId to iID
32140>>>>>>>        // if the ID is 0, auto-assign it.
32140>>>>>>>        If (iID=0) Begin
32142>>>>>>>            Get CommandBarSystemObject to hoCommandBars
32143>>>>>>>            // context menus may not be able to assign an id until they are created.
32143>>>>>>>            If (hoCommandBars<>0) Begin
32145>>>>>>>                Get AssignId of hoCommandBars to iID
32146>>>>>>>                Set piId to iID
32147>>>>>>>            End
32147>>>>>>>>
32147>>>>>>>        End
32147>>>>>>>>
32147>>>>>>>        Forward Send End_Construct_Object
32149>>>>>>>    End_Procedure
32150>>>>>>>    
32150>>>>>>>    
32150>>>>>>>End_Class
32151>>>>>>>
32151>>>>>>>// can be used by all controls. Menu, toolbar and popups.
32151>>>>>>>
32151>>>>>>>
32151>>>>>>>Class cCJMenuItem is a cCJAction
32152>>>>>>>    
32152>>>>>>>    Procedure Construct_Object
32154>>>>>>>        Forward Send Construct_Object
32156>>>>>>>        
32156>>>>>>>        // note that these properties are design time and initalize time only properties
32156>>>>>>>        Property Integer peControlType xtpControlButton
32157>>>>>>>        
32157>>>>>>>        Property Integer peControlStyle xtpButtonAutomatic
32158>>>>>>>        
32158>>>>>>>        Property Boolean pbControlBeginGroup   False
32159>>>>>>>        Property Boolean pbControlCloseSubMenu True
32160>>>>>>>        Property Boolean pbControlFlagRightAlign False
32161>>>>>>>        Property Boolean pbControlFlagLeftPopup  False
32162>>>>>>>        Property Boolean pbControlFlagNoMovable  False
32163>>>>>>>        Property Boolean pbControlFlagControlStretched False
32164>>>>>>>        Property Boolean pbControlFlagShowPopupBarToolTip False
32165>>>>>>>        Property Boolean pbControlFlagWrapRow False
32166>>>>>>>        Property Boolean pbControlDoubleGripper    False
32167>>>>>>>        Property Boolean pbControlPopupToolBar   False
32168>>>>>>>        
32168>>>>>>>        Property Boolean pbAddToDesignerMenu False
32169>>>>>>>        
32169>>>>>>>        // Used to redirect an action to a different object.
32169>>>>>>>        Property Integer phoAction Self
32170>>>>>>>        
32170>>>>>>>        Property Boolean pbInCreateTempInstance False
32171>>>>>>>        
32171>>>>>>>    End_Procedure
32172>>>>>>>    
32172>>>>>>>    // returns true if the control is a popup type - i.e., it will have child menu items. Good for Augmentation
32172>>>>>>>    Function IsPopup Returns Boolean
32174>>>>>>>        Integer eType
32174>>>>>>>        Get peControlType to eType
32175>>>>>>>        Function_Return (eType=xtpControlPopup or eType=xtpControlButtonPopup or eType=xtpControlSplitButtonPopup)
32176>>>>>>>    End_Function
32177>>>>>>>    
32177>>>>>>>    
32177>>>>>>>    
32177>>>>>>>    // must create action and then the visual control
32177>>>>>>>    Procedure CreateComInstance Handle hoControls
32179>>>>>>>        Variant vNewControl vNewControls vCommandBar
32179>>>>>>>        Handle hoNewControl hoNewControls hoCommandBar hoAction hoDesignerControls
32179>>>>>>>        Integer iId
32179>>>>>>>        Boolean bPopup
32179>>>>>>>        
32179>>>>>>>        Send AssignAction
32180>>>>>>>        Get CreateComControl hoControls to vNewControl
32181>>>>>>>        If (IsNullComObject(vNewControl)) Begin
32183>>>>>>>            Procedure_Return
32184>>>>>>>        End
32184>>>>>>>>
32184>>>>>>>        
32184>>>>>>>        Get piId to iId
32185>>>>>>>        
32185>>>>>>>        Get Create U_cCJCommandBarPopup to hoNewControl
32186>>>>>>>        Get Create U_cCJCommandBar to hoCommandbar
32187>>>>>>>        Get Create U_cCJCommandBarControls to hoNewControls
32188>>>>>>>        
32188>>>>>>>        Set pvComObject of hoNewControl to vNewControl
32189>>>>>>>        
32189>>>>>>>        Get IsPopup to bPopup
32190>>>>>>>        If (bPopup) Begin
32192>>>>>>>            
32192>>>>>>>            Get ComCommandBar of hoNewControl to vCommandBar
32193>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
32194>>>>>>>            Get ComControls of hoCommandBar to vNewControls
32195>>>>>>>            Set pvComObject of hoNewControls to vNewControls
32196>>>>>>>            
32196>>>>>>>            Broadcast Send CreateComInstance hoNewControls
32198>>>>>>>            
32198>>>>>>>        End
32198>>>>>>>>
32198>>>>>>>        
32198>>>>>>>        // if add to designer, create another instance of this control and add it to the designer
32198>>>>>>>        // controls. This uses the same action as the regular control. We do this after the child controls
32198>>>>>>>        // are created so that menus will contain all of their children.
32198>>>>>>>        If (pbAddToDesignerMenu(Self)) Begin
32200>>>>>>>            Get DesignerControlsCollection to hoDesignerControls
32201>>>>>>>            // if a designer control for this action already exists, we will not add it again.
32201>>>>>>>            Get ComFind of hoDesignerControls xtpControlError iId Nothing True to vNewControl
32202>>>>>>>            If (IsNullComObject(vNewControl)) Begin
32204>>>>>>>                Get CreateComControl hoDesignerControls to vNewControl
32205>>>>>>>                Set pvComObject of hoNewControl to vNewControl
32206>>>>>>>                If (bPopup) Begin
32208>>>>>>>                    Get ComCommandBar of hoNewControl to vCommandBar
32209>>>>>>>                    Set pvComObject of hoCommandBar to vCommandBar
32210>>>>>>>                    Get ComControls of hoCommandBar to vNewControls
32211>>>>>>>                    Set pvComObject of hoNewControls to vNewControls
32212>>>>>>>                    // note that it is safe to do this because the actions will not get
32212>>>>>>>                    // created again. Only the controls will get created.
32212>>>>>>>                    Broadcast Send CreateComInstance hoNewControls
32214>>>>>>>                End
32214>>>>>>>>
32214>>>>>>>            End
32214>>>>>>>>
32214>>>>>>>        End
32214>>>>>>>>
32214>>>>>>>        
32214>>>>>>>        Send Destroy of hoNewControls
32215>>>>>>>        Send Destroy of hoCommandBar
32216>>>>>>>        Send Destroy of hoNewControl
32217>>>>>>>        
32217>>>>>>>    End_Procedure
32218>>>>>>>    
32218>>>>>>>    // handle action for this menu-item. If the item is the action, make sure a com instance is created
32218>>>>>>>    // if this is not the action, attach to the action which should be created
32218>>>>>>>    // lots of assertions if there is a problem
32218>>>>>>>    Procedure AssignAction
32220>>>>>>>        Handle hoAction
32220>>>>>>>        Integer iId
32220>>>>>>>        
32220>>>>>>>        Get phoAction to hoAction
32221>>>>>>>        
32221>>>>>>>        If not hoAction Begin
32223>>>>>>>            Error DFERR_PROGRAM "Assert: action object is not assigned for menu item"
32224>>>>>>>>
32224>>>>>>>            Procedure_Return
32225>>>>>>>        End
32225>>>>>>>>
32225>>>>>>>        
32225>>>>>>>        // If the action object is self (normal) then we create an action com object if needed.
32225>>>>>>>        // it is possible that the action will already be created. If so, do nothing.
32225>>>>>>>        If (hoAction=Self) Begin
32227>>>>>>>            If not (IsComObjectCreated(Self)) Begin
32229>>>>>>>                Send CreateComAction
32230>>>>>>>            End
32230>>>>>>>>
32230>>>>>>>            Get piId to iId
32231>>>>>>>        End
32231>>>>>>>>
32231>>>>>>>        // if the action is some other object, we will assume it has already been created and just assign
32231>>>>>>>        // its id.
32231>>>>>>>        Else Begin
32232>>>>>>>            Get piId of hoAction to iId
32233>>>>>>>            Set piId to iId
32234>>>>>>>        End
32234>>>>>>>>
32234>>>>>>>        
32234>>>>>>>        If (iId=0) Begin
32236>>>>>>>            Error DFERR_PROGRAM "Assert: Action ID is zero"
32237>>>>>>>>
32237>>>>>>>            Procedure_Return
32238>>>>>>>        End
32238>>>>>>>>
32238>>>>>>>        
32238>>>>>>>        If not (IsComObjectCreated(hoAction)) Begin
32240>>>>>>>            Error  DFERR_PROGRAM "Assert: Action com object not created"
32241>>>>>>>>
32241>>>>>>>            Procedure_Return
32242>>>>>>>        End
32242>>>>>>>>
32242>>>>>>>    End_Procedure
32243>>>>>>>    
32243>>>>>>>    Function AddDynamicControl Handle hoControls Returns Variant
32245>>>>>>>        Variant vNewControl vCommandBar vNewControls
32245>>>>>>>        Boolean bOldTemp bPopup
32245>>>>>>>        Handle hoNewControl  hoCommandBar hoNewControls
32245>>>>>>>        
32245>>>>>>>        Get pbInCreateTempInstance to bOldTemp
32246>>>>>>>        Set pbInCreateTempInstance to True
32247>>>>>>>        
32247>>>>>>>        Send AssignAction
32248>>>>>>>        Get CreateComControl hoControls to vNewControl // if null, an assertion will be declared
32249>>>>>>>        
32249>>>>>>>        Get IsPopup to bPopup
32250>>>>>>>        If (bPopup) Begin
32252>>>>>>>            
32252>>>>>>>            Get Create U_cCJCommandBarPopup to hoNewControl
32253>>>>>>>            Get Create U_cCJCommandBar to hoCommandbar
32254>>>>>>>            Get Create U_cCJCommandBarControls to hoNewControls
32255>>>>>>>            
32255>>>>>>>            Set pvComObject of hoNewControl to vNewControl
32256>>>>>>>            
32256>>>>>>>            Get ComCommandBar of hoNewControl to vCommandBar
32257>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
32258>>>>>>>            Get ComControls of hoCommandBar to vNewControls
32259>>>>>>>            Set pvComObject of hoNewControls to vNewControls
32260>>>>>>>            
32260>>>>>>>            Broadcast Send CreateComInstance hoNewControls
32262>>>>>>>            
32262>>>>>>>            Send Destroy of hoNewControls
32263>>>>>>>            Send Destroy of hoCommandBar
32264>>>>>>>            Send Destroy of hoNewControl
32265>>>>>>>            
32265>>>>>>>        End
32265>>>>>>>>
32265>>>>>>>        
32265>>>>>>>        
32265>>>>>>>        Set pbInCreateTempInstance to bOldTemp
32266>>>>>>>        
32266>>>>>>>        Function_Return vNewControl
32267>>>>>>>    End_Function
32268>>>>>>>    
32268>>>>>>>    // used to actually create the desired control and add it to the passed commandbars
32268>>>>>>>    Function CreateCommandBarControl Handle hoControls Integer eType Integer iId Boolean bInCreateTempInstance Returns Variant
32270>>>>>>>        Variant vControl
32270>>>>>>>        Get ComAdd of hoControls eType iId "" Nothing bInCreateTempInstance to vControl
32271>>>>>>>        Function_Return vControl
32272>>>>>>>    End_Function
32273>>>>>>>    
32273>>>>>>>    // create the menu item control. Return a DataFlex object for this control
32273>>>>>>>    // This assumes that an action ID exiss and that a com action object is created.
32273>>>>>>>    
32273>>>>>>>    Function CreateComControl Handle hoControls Returns Variant
32275>>>>>>>        Handle hoObj hoCommandBar hoCommandBars
32275>>>>>>>        Variant vControl vCommandbar
32275>>>>>>>        Integer iId eType eStyle eFlags iClass
32275>>>>>>>        Boolean bPopup bBegin bClose bDoubleGripper bPopupToolBar
32275>>>>>>>        Boolean bFlagStretch bFlagLeftPopup bFlagNoMove bFlagRightAlign bFlagShowTip bFlagWrap
32275>>>>>>>        Boolean bInCreateTempInstance
32275>>>>>>>        
32275>>>>>>>        
32275>>>>>>>        Get pbInCreateTempInstance to bInCreateTempInstance
32276>>>>>>>        
32276>>>>>>>        Get piId to iId
32277>>>>>>>        Get peControlType to eType
32278>>>>>>>        Get peControlStyle to eStyle
32279>>>>>>>        Get pbControlBeginGroup to bBegin
32280>>>>>>>        Get pbControlCloseSubMenu to bClose
32281>>>>>>>        Get pbControlFlagControlStretched to bFlagStretch
32282>>>>>>>        Get pbControlFlagLeftPopup to bFlagLeftPopup
32283>>>>>>>        Get pbControlFlagNoMovable to bFlagNoMove
32284>>>>>>>        Get pbControlFlagRightAlign to bFlagRightAlign
32285>>>>>>>        Get pbControlFlagShowPopupBarToolTip to bFlagShowTip
32286>>>>>>>        Get pbControlDoubleGripper to bDoubleGripper
32287>>>>>>>        Get pbControlPopupToolBar to bPopupToolBar
32288>>>>>>>        Get pbControlFlagWrapRow to bFlagWrap
32289>>>>>>>        // assemble the COMFlags from the flag properties.
32289>>>>>>>        Move (If(bFlagStretch,xtpFlagControlStretched,0) + ;            If(bFlagLeftPopup,xtpFlagLeftPopup,0) +;            If(bFlagNoMove,xtpFlagNoMovable,0) +;            If(bFlagRightAlign,xtpFlagRightAlign,0) +;            If(bFlagShowTip,xtpFlagShowPopupBarTip,0) +;            If(bFlagWrap,xtpFlagWrapRow,0) ) to eFlags
32290>>>>>>>        
32290>>>>>>>        Get CreateCommandBarControl hoControls eType iId bInCreateTempInstance to vControl
32291>>>>>>>        
32291>>>>>>>        If (IsNullComObject(vControl)) Begin
32293>>>>>>>            Error DFERR_PROGRAM ("Assert: could not create com control: Type" - String(eType) - ", iId=" - String(iId))
32294>>>>>>>>
32294>>>>>>>            Function_Return vControl
32295>>>>>>>        End
32295>>>>>>>>
32295>>>>>>>        
32295>>>>>>>        Get IsPopup to bPopup
32296>>>>>>>        Get ClassForControlType eType to iClass
32297>>>>>>>        Get Create iClass to hoObj
32298>>>>>>>        Set pvComObject of hoObj to vControl
32299>>>>>>>        Set ComStyle of hoObj to eStyle
32300>>>>>>>        Set ComBeginGroup of hoObj to bBegin
32301>>>>>>>        Set ComCloseSubMenuOnClick of hoObj to bClose
32302>>>>>>>        Set ComFlags of hoObj to eFlags
32303>>>>>>>        
32303>>>>>>>        If bPopup Begin
32305>>>>>>>            Get Create U_cCJCommandBar to hoCommandbar
32306>>>>>>>            Get ComCommandBar of hoObj to vCommandBar
32307>>>>>>>            
32307>>>>>>>            // it appears that it is possible to have a popup that does not get assigned
32307>>>>>>>            // a commandbar. If that happens we will add a commandbar to the control
32307>>>>>>>            // the hard way.
32307>>>>>>>            If (IsNullComObject(vCommandbar)) Begin
32309>>>>>>>                Get CommandBarSystemObject to hoCommandBars
32310>>>>>>>                Get ComAdd of hoCommandBars "Popup" xtpBarPopup to vCommandBar
32311>>>>>>>                Set ComCommandBar of hoObj to vCommandBar
32312>>>>>>>            End
32312>>>>>>>>
32312>>>>>>>            
32312>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
32313>>>>>>>            
32313>>>>>>>            If (bDoubleGripper) Begin
32315>>>>>>>                Set ComDoubleGripper of hoCommandBar to True
32316>>>>>>>            End
32316>>>>>>>>
32316>>>>>>>            If (bPopupToolBar) Begin
32318>>>>>>>                Send ComSetPopupToolBar of hoCommandBar True
32319>>>>>>>            End
32319>>>>>>>>
32319>>>>>>>            
32319>>>>>>>            Send Destroy of hoCommandBar
32320>>>>>>>        End
32320>>>>>>>>
32320>>>>>>>        
32320>>>>>>>        Send OnCreateControl hoObj
32321>>>>>>>        
32321>>>>>>>        Send destroy of hoObj
32322>>>>>>>        
32322>>>>>>>        Function_Return vControl
32323>>>>>>>        
32323>>>>>>>    End_Function
32324>>>>>>>    
32324>>>>>>>    Procedure OnCreateControl Handle hoObj
32326>>>>>>>    End_Procedure
32327>>>>>>>    
32327>>>>>>>End_Class
32328>>>>>>>
32328>>>>>>>
32328>>>>>>>Class cCJStatusBar is a cCJComStatusBar
32329>>>>>>>    
32329>>>>>>>    Procedure Construct_Object
32331>>>>>>>        Boolean bMDI
32331>>>>>>>        Handle hoCommandBars
32331>>>>>>>        Forward Send Construct_Object
32333>>>>>>>        
32333>>>>>>>        Property Boolean pbPrivateDrawDisabledText True
32334>>>>>>>        Property String  psPrivateIdleText ''
32335>>>>>>>        Property Boolean pbPrivateVisible True
32336>>>>>>>        
32336>>>>>>>        Property Integer piStatusBarId ID_StatusBarsAutoStart
32337>>>>>>>        
32337>>>>>>>        Property Integer phoViewPane 0
32338>>>>>>>        
32338>>>>>>>        Set peNeighborhood to nhNo
32339>>>>>>>        
32339>>>>>>>        
32339>>>>>>>    End_Procedure
32340>>>>>>>    
32340>>>>>>>    // Remove the references to the statusbar when it is about to be destroyed.
32340>>>>>>>    Procedure Destroy_Object
32342>>>>>>>        Handle hoCommandBars
32342>>>>>>>        Boolean bMDI
32342>>>>>>>        Get CommandBarSystemObject to hoCommandBars
32343>>>>>>>        // if this is an MDI command bar, reset the main Status bar
32343>>>>>>>        Get pbMDIMenu of hoCommandBars to bMDI
32344>>>>>>>        If bMDI Begin
32346>>>>>>>            Set Statusbar_Id to 0
32347>>>>>>>        End
32347>>>>>>>>
32347>>>>>>>        Set phoStatusBar of hoCommandBars to 0
32348>>>>>>>        Forward Send Destroy_Object
32350>>>>>>>    End_Procedure
32351>>>>>>>    
32351>>>>>>>    Procedure Set pbDrawDisabledText Boolean bValue
32353>>>>>>>        Set pbPrivateDrawDisabledText to bValue
32354>>>>>>>        If (IsComObjectCreated(Self)) Begin
32356>>>>>>>            Set ComDrawDisabledText to bValue
32357>>>>>>>        End
32357>>>>>>>>
32357>>>>>>>    End_Procedure
32358>>>>>>>    
32358>>>>>>>    Function pbDrawDisabledText Returns Boolean
32360>>>>>>>        Boolean bValue
32360>>>>>>>        If (IsComObjectCreated(Self)) Begin
32362>>>>>>>            Get ComDrawDisabledText to bValue
32363>>>>>>>        End
32363>>>>>>>>
32363>>>>>>>        Else Begin
32364>>>>>>>            Get pbPrivateDrawDisabledText to bValue
32365>>>>>>>        End
32365>>>>>>>>
32365>>>>>>>        Function_Return bValue
32366>>>>>>>    End_Function
32367>>>>>>>    
32367>>>>>>>    Procedure Set pbVisible Boolean bValue
32369>>>>>>>        Set pbPrivateVisible to bValue
32370>>>>>>>        If (IsComObjectCreated(Self)) Begin
32372>>>>>>>            Set ComVisible to bValue
32373>>>>>>>        End
32373>>>>>>>>
32373>>>>>>>    End_Procedure
32374>>>>>>>    
32374>>>>>>>    Function pbVisible Returns Boolean
32376>>>>>>>        Boolean bValue
32376>>>>>>>        // for some reason visible state of statusbar is set false when
32376>>>>>>>        // commandbarsystem is not active. So we also check active_state
32376>>>>>>>        If (IsComObjectCreated(Self) and Active_State(Self)) Begin
32378>>>>>>>            Get ComVisible to bValue
32379>>>>>>>        End
32379>>>>>>>>
32379>>>>>>>        Else Begin
32380>>>>>>>            Get pbPrivateVisible to bValue
32381>>>>>>>        End
32381>>>>>>>>
32381>>>>>>>        Function_Return bValue
32382>>>>>>>    End_Function
32383>>>>>>>    
32383>>>>>>>    Procedure Set psIdleText String sValue
32385>>>>>>>        Set psPrivateIdleText to sValue
32386>>>>>>>        If (IsComObjectCreated(Self)) Begin
32388>>>>>>>            Set ComIdleText to sValue
32389>>>>>>>        End
32389>>>>>>>>
32389>>>>>>>    End_Procedure
32390>>>>>>>    
32390>>>>>>>    Function psIdleText Returns String
32392>>>>>>>        String sValue
32392>>>>>>>        If (IsComObjectCreated(Self)) Begin
32394>>>>>>>            Get ComIdleText to sValue
32395>>>>>>>        End
32395>>>>>>>>
32395>>>>>>>        Else Begin
32396>>>>>>>            Get psPrivateIdleText to sValue
32397>>>>>>>        End
32397>>>>>>>>
32397>>>>>>>        Function_Return sValue
32398>>>>>>>    End_Function
32399>>>>>>>    
32399>>>>>>>    
32399>>>>>>>    Procedure CreateComInstance
32401>>>>>>>        Handle hoCommandBars
32401>>>>>>>        Variant vStatusBar
32401>>>>>>>        String sTitle
32401>>>>>>>        Integer iBarId iWidth iDockFgs
32401>>>>>>>        Boolean bDrawDisabledText bVisible bMDI
32401>>>>>>>        String  sIdleText
32401>>>>>>>        
32401>>>>>>>        // if already created, we don't do anything. This could happen during
32401>>>>>>>        // a restore
32401>>>>>>>        If (IsComObjectCreated(Self)) Begin
32403>>>>>>>            Procedure_Return
32404>>>>>>>        End
32404>>>>>>>>
32404>>>>>>>        
32404>>>>>>>        Get CommandBarSystemObject to hoCommandBars
32405>>>>>>>        
32405>>>>>>>        // if this is an MDI command bar, we will define this as the main Status bar
32405>>>>>>>        Get pbMDIMenu of hoCommandBars to bMDI
32406>>>>>>>        If bMDI Begin
32408>>>>>>>            Set Statusbar_Id to Self
32409>>>>>>>        End
32409>>>>>>>>
32409>>>>>>>        Set phoStatusBar of hoCommandBars to Self
32410>>>>>>>        
32410>>>>>>>        Get pbPrivateDrawDisabledText to bDrawDisabledText
32411>>>>>>>        Get pbPrivateVisible to bVisible
32412>>>>>>>        Get psPrivateIdleText to sIdleText
32413>>>>>>>        Get ComStatusBar of hoCommandBars to vStatusBar
32414>>>>>>>        Set pvComObject to vStatusBar
32415>>>>>>>        Set ComDrawDisabledText to bDrawDisabledText
32416>>>>>>>        Set ComVisible to bVisible
32417>>>>>>>        Set ComIdleText to sIdleText
32418>>>>>>>        
32418>>>>>>>        Send OnCreate
32419>>>>>>>        
32419>>>>>>>        Broadcast Send CreateComInstance Self
32421>>>>>>>        
32421>>>>>>>    End_Procedure
32422>>>>>>>    
32422>>>>>>>    // display "main" status help. Usually provided from DD.
32422>>>>>>>    Procedure Show_Status_Help String sStatusHelp
32424>>>>>>>        Set psIdleText to sStatusHelp
32425>>>>>>>    End_Procedure
32426>>>>>>>    
32426>>>>>>>    // show the view name in the pane if a phoViewPane exists
32426>>>>>>>    Procedure Show_View_Name String sName
32428>>>>>>>        Handle hoPane
32428>>>>>>>        Get phoViewPane to hoPane
32429>>>>>>>        If (hoPane) Begin
32431>>>>>>>            Set psText of hoPane to sName
32432>>>>>>>        End
32432>>>>>>>>
32432>>>>>>>    End_Procedure
32433>>>>>>>    
32433>>>>>>>    // legacy from old status bar
32433>>>>>>>    Procedure Exit_Menu
32435>>>>>>>    End_Procedure
32436>>>>>>>    
32436>>>>>>>    // returns an array of all pane objects (these are the DF objects, if additional COM panes were
32436>>>>>>>    // created they are not here)
32436>>>>>>>    Function PaneObjects Returns Handle[]
32438>>>>>>>        Handle[] hoPanes
32439>>>>>>>        Broadcast Send RegisterStatusPaneObject (&hoPanes)
32441>>>>>>>        Function_Return hoPanes
32442>>>>>>>    End_Function
32443>>>>>>>    
32443>>>>>>>    // Find the DF object for the passed COM object. Returns 0 if none found
32443>>>>>>>    Function FindPaneObject Variant vPane Returns Handle
32445>>>>>>>        Handle hoPane
32445>>>>>>>        Handle[] hoPanes
32446>>>>>>>        Integer i iPanes iId
32446>>>>>>>        Get Create U_cCJComStatusBarPane to hoPane
32447>>>>>>>        Set pvComObject of hoPane to vPane
32448>>>>>>>        Get ComId of hoPane to iId
32449>>>>>>>        Send destroy of hoPane
32450>>>>>>>        Get PaneObjects to hoPanes // get all df pane objects
32451>>>>>>>        Move (SizeOfArray(hoPanes)) to iPanes
32452>>>>>>>        For i from 0 to (iPanes-1)
32458>>>>>>>>
32458>>>>>>>            If (iId=piId(hoPanes[i])) Begin // search for DF object with same ID as com object
32460>>>>>>>                Function_Return hoPanes[i]
32461>>>>>>>            End
32461>>>>>>>>
32461>>>>>>>        Loop
32462>>>>>>>>
32462>>>>>>>        Function_Return 0
32463>>>>>>>    End_Function
32464>>>>>>>    
32464>>>>>>>    // this returns the width, in pixels, needed to display a string.
32464>>>>>>>    Function PaneTextWidth WString sText Returns Integer
32466>>>>>>>        Handle hWnd hDC
32466>>>>>>>        Integer bOK
32466>>>>>>>        tWinPoint Point
32466>>>>>>>        tWinPoint Point
32466>>>>>>>        
32466>>>>>>>        Get Window_Handle to hWnd
32467>>>>>>>        Move (GetDC(hWnd)) to hDC
32468>>>>>>>        
32468>>>>>>>        Move (GetTextExtentW(hDC, AddressOf(sText), length(sText), AddressOf(Point))) to bOk
32469>>>>>>>        
32469>>>>>>>        Move (ReleaseDC(hWnd, hDC)) to hDC
32470>>>>>>>        Function_Return Point.x
32471>>>>>>>    End_Function
32472>>>>>>>    
32472>>>>>>>    Procedure Update
32474>>>>>>>        Send OnUpdate
32475>>>>>>>    End_Procedure
32476>>>>>>>    
32476>>>>>>>    Procedure OnUpdate
32478>>>>>>>    End_Procedure
32479>>>>>>>    
32479>>>>>>>    Procedure OnCreate
32481>>>>>>>    End_Procedure
32482>>>>>>>    
32482>>>>>>>    Procedure OnComPaneClick Variant llPane
32484>>>>>>>        Handle hoPane
32484>>>>>>>        Get FindPaneObject llPane to hoPane
32485>>>>>>>        If hoPane Begin
32487>>>>>>>            Send onClick of hoPane
32488>>>>>>>        End
32488>>>>>>>>
32488>>>>>>>    End_Procedure
32489>>>>>>>    
32489>>>>>>>    Procedure OnComPaneDblClick Variant llPane
32491>>>>>>>        Handle hoPane
32491>>>>>>>        Get FindPaneObject llPane to hoPane
32492>>>>>>>        If hoPane Begin
32494>>>>>>>            Send onDblClick of hoPane
32495>>>>>>>        End
32495>>>>>>>>
32495>>>>>>>    End_Procedure
32496>>>>>>>    
32496>>>>>>>End_Class
32497>>>>>>>
32497>>>>>>>
32497>>>>>>>Class cCJStatusBarPane is a cCJComStatusBarPane
32498>>>>>>>    
32498>>>>>>>    Procedure Construct_Object
32500>>>>>>>        Forward Send Construct_Object
32502>>>>>>>        Property Integer pePrivateAlignment xtpAlignmentLeft
32503>>>>>>>        Property Integer piPrivateBackGroundColor clNone
32504>>>>>>>        Property Integer piPrivateTextColor clNone
32505>>>>>>>        Property String  psPrivateText ''
32506>>>>>>>        Property String  psPrivateTooltip ''
32507>>>>>>>        Property Boolean pbPrivateVisible True
32508>>>>>>>        Property Integer piPrivateWidth 0
32509>>>>>>>        Property Integer pbPrivateStyleNoBorders False
32510>>>>>>>        Property Integer pbPrivateStyleDisabled False
32511>>>>>>>        Property Integer pbPrivateStyleStretch False
32512>>>>>>>        Property Integer  piPrivateIconId 0
32513>>>>>>>        
32513>>>>>>>        Property String  psImage ''
32514>>>>>>>        
32514>>>>>>>        Property Integer piId sbpIDAutoAssign
32515>>>>>>>        
32515>>>>>>>        Set peNeighborhood to nhNo
32516>>>>>>>    End_Procedure
32517>>>>>>>    
32517>>>>>>>    Procedure Set pbVisible Boolean bValue
32519>>>>>>>        Set pbPrivateVisible to bValue
32520>>>>>>>        If (IsComObjectCreated(Self)) Begin
32522>>>>>>>            Set ComVisible to bValue
32523>>>>>>>        End
32523>>>>>>>>
32523>>>>>>>    End_Procedure
32524>>>>>>>    
32524>>>>>>>    Function pbVisible Returns Boolean
32526>>>>>>>        Boolean bValue
32526>>>>>>>        If (IsComObjectCreated(Self)) Begin
32528>>>>>>>            Get ComVisible to bValue
32529>>>>>>>        End
32529>>>>>>>>
32529>>>>>>>        Else Begin
32530>>>>>>>            Get pbPrivateVisible to bValue
32531>>>>>>>        End
32531>>>>>>>>
32531>>>>>>>        Function_Return bValue
32532>>>>>>>    End_Function
32533>>>>>>>    
32533>>>>>>>    Procedure Set piBackgroundColor Integer iValue
32535>>>>>>>        Set piPrivateBackgroundColor to iValue
32536>>>>>>>        If (IsComObjectCreated(Self)) Begin
32538>>>>>>>            Set ComBackgroundColor to iValue
32539>>>>>>>        End
32539>>>>>>>>
32539>>>>>>>    End_Procedure
32540>>>>>>>    
32540>>>>>>>    Function piBackgroundColor Returns Integer
32542>>>>>>>        Integer iValue
32542>>>>>>>        If (IsComObjectCreated(Self)) Begin
32544>>>>>>>            Get ComBackgroundColor to iValue
32545>>>>>>>        End
32545>>>>>>>>
32545>>>>>>>        Else Begin
32546>>>>>>>            Get piPrivateBackgroundColor to iValue
32547>>>>>>>        End
32547>>>>>>>>
32547>>>>>>>        Function_Return iValue
32548>>>>>>>    End_Function
32549>>>>>>>    
32549>>>>>>>    Procedure Set piTextColor Integer iValue
32551>>>>>>>        Set piPrivateTextColor to iValue
32552>>>>>>>        If (IsComObjectCreated(Self)) Begin
32554>>>>>>>            Set ComTextColor to iValue
32555>>>>>>>        End
32555>>>>>>>>
32555>>>>>>>    End_Procedure
32556>>>>>>>    
32556>>>>>>>    Function piTextColor Returns Integer
32558>>>>>>>        Integer iValue
32558>>>>>>>        If (IsComObjectCreated(Self)) Begin
32560>>>>>>>            Get ComTextColor to iValue
32561>>>>>>>        End
32561>>>>>>>>
32561>>>>>>>        Else Begin
32562>>>>>>>            Get piPrivateTextColor to iValue
32563>>>>>>>        End
32563>>>>>>>>
32563>>>>>>>        Function_Return iValue
32564>>>>>>>    End_Function
32565>>>>>>>    
32565>>>>>>>    Procedure Set piWidth Integer iValue
32567>>>>>>>        Set piPrivateWidth to iValue
32568>>>>>>>        If (IsComObjectCreated(Self)) Begin
32570>>>>>>>            Set ComWidth to iValue
32571>>>>>>>        End
32571>>>>>>>>
32571>>>>>>>    End_Procedure
32572>>>>>>>    
32572>>>>>>>    Function piWidth Returns Integer
32574>>>>>>>        Integer iValue
32574>>>>>>>        If (IsComObjectCreated(Self)) Begin
32576>>>>>>>            Get ComWidth to iValue
32577>>>>>>>        End
32577>>>>>>>>
32577>>>>>>>        Else Begin
32578>>>>>>>            Get piPrivateWidth to iValue
32579>>>>>>>        End
32579>>>>>>>>
32579>>>>>>>        Function_Return iValue
32580>>>>>>>    End_Function
32581>>>>>>>    
32581>>>>>>>    Procedure Set peAlignment Integer eValue
32583>>>>>>>        Set pePrivateAlignment to eValue
32584>>>>>>>        If (IsComObjectCreated(Self)) Begin
32586>>>>>>>            Set ComAlignment to eValue
32587>>>>>>>        End
32587>>>>>>>>
32587>>>>>>>    End_Procedure
32588>>>>>>>    
32588>>>>>>>    Function peAlignment Returns Integer
32590>>>>>>>        Integer eValue
32590>>>>>>>        If (IsComObjectCreated(Self)) Begin
32592>>>>>>>            Get ComAlignment to eValue
32593>>>>>>>        End
32593>>>>>>>>
32593>>>>>>>        Else Begin
32594>>>>>>>            Get pePrivateAlignment to eValue
32595>>>>>>>        End
32595>>>>>>>>
32595>>>>>>>        Function_Return eValue
32596>>>>>>>    End_Function
32597>>>>>>>    
32597>>>>>>>    Procedure SetPaneStyle Integer iMask Boolean bValue Handle hmMessage
32599>>>>>>>        Integer eValue
32599>>>>>>>        Set hmMessage to bValue
32600>>>>>>>        If (IsComObjectCreated(Self)) Begin
32602>>>>>>>            Set ComStyle to eValue
32603>>>>>>>            If (bValue) Begin
32605>>>>>>>                Move (AddBitValue(iMask,eValue)) to eValue
32606>>>>>>>            End
32606>>>>>>>>
32606>>>>>>>            Else Begin
32607>>>>>>>                Move (RemoveBitValue(iMask,eValue)) to eValue
32608>>>>>>>            End
32608>>>>>>>>
32608>>>>>>>            Set ComStyle to eValue
32609>>>>>>>        End
32609>>>>>>>>
32609>>>>>>>    End_Procedure
32610>>>>>>>    
32610>>>>>>>    Function GetPaneStyle Integer iMask Handle hmMessage Returns Boolean
32612>>>>>>>        Integer eValue
32612>>>>>>>        Boolean bValue
32612>>>>>>>        If (IsComObjectCreated(Self)) Begin
32614>>>>>>>            Get ComStyle to eValue
32615>>>>>>>            Move (eValue iand iMask) to bValue
32616>>>>>>>        End
32616>>>>>>>>
32616>>>>>>>        Else Begin
32617>>>>>>>            Get hmMessage to bValue
32618>>>>>>>        End
32618>>>>>>>>
32618>>>>>>>        Function_Return bValue
32619>>>>>>>    End_Function
32620>>>>>>>    
32620>>>>>>>    Procedure Set pbStyleNoBorders Boolean bValue
32622>>>>>>>        Send SetPaneStyle SBPS_NOBORDERS bValue set_pbPrivateStyleNoBorders
32623>>>>>>>    End_Procedure
32624>>>>>>>    
32624>>>>>>>    Function pbStyleNoBorders Returns Boolean
32626>>>>>>>        Boolean bValue
32626>>>>>>>        Get GetPaneStyle SBPS_NOBORDERS get_pbPrivateStyleNoBorders to bValue
32627>>>>>>>        Function_Return bValue
32628>>>>>>>    End_Function
32629>>>>>>>    
32629>>>>>>>    Procedure Set pbStyleDisabled Boolean bValue
32631>>>>>>>        Send SetPaneStyle SBPS_DISABLED bValue set_pbPrivateStyleDisabled
32632>>>>>>>    End_Procedure
32633>>>>>>>    
32633>>>>>>>    Function pbStyleDisabled Returns Boolean
32635>>>>>>>        Boolean bValue
32635>>>>>>>        Get GetPaneStyle SBPS_DISABLED get_pbPrivateStyleDisabled to bValue
32636>>>>>>>        Function_Return bValue
32637>>>>>>>    End_Function
32638>>>>>>>    
32638>>>>>>>    Procedure Set pbStyleStretch Boolean bValue
32640>>>>>>>        Send SetPaneStyle SBPS_STRETCH bValue Set_pbPrivateStyleStretch
32641>>>>>>>    End_Procedure
32642>>>>>>>    
32642>>>>>>>    Function pbStyleStretch Returns Boolean
32644>>>>>>>        Boolean bValue
32644>>>>>>>        Get GetPaneStyle SBPS_STRETCH get_pbPrivateStyleStretch to bValue
32645>>>>>>>        Function_Return bValue
32646>>>>>>>    End_Function
32647>>>>>>>    
32647>>>>>>>    
32647>>>>>>>    Procedure Set psText String sValue
32649>>>>>>>        Set psPrivateText to sValue
32650>>>>>>>        If (IsComObjectCreated(Self)) Begin
32652>>>>>>>            Set ComText to sValue
32653>>>>>>>        End
32653>>>>>>>>
32653>>>>>>>    End_Procedure
32654>>>>>>>    
32654>>>>>>>    Function psText Returns String
32656>>>>>>>        String sValue
32656>>>>>>>        If (IsComObjectCreated(Self)) Begin
32658>>>>>>>            Get ComText to sValue
32659>>>>>>>        End
32659>>>>>>>>
32659>>>>>>>        Else Begin
32660>>>>>>>            Get psPrivateText to sValue
32661>>>>>>>        End
32661>>>>>>>>
32661>>>>>>>        Function_Return sValue
32662>>>>>>>    End_Function
32663>>>>>>>    
32663>>>>>>>    Procedure Set psToolTip String sValue
32665>>>>>>>        Set psPrivateToolTip to sValue
32666>>>>>>>        If (IsComObjectCreated(Self)) Begin
32668>>>>>>>            Set ComToolTip to sValue
32669>>>>>>>        End
32669>>>>>>>>
32669>>>>>>>    End_Procedure
32670>>>>>>>    
32670>>>>>>>    Function psToolTip Returns String
32672>>>>>>>        String sValue
32672>>>>>>>        If (IsComObjectCreated(Self)) Begin
32674>>>>>>>            Get ComToolTip to sValue
32675>>>>>>>        End
32675>>>>>>>>
32675>>>>>>>        Else Begin
32676>>>>>>>            Get psPrivateToolTip to sValue
32677>>>>>>>        End
32677>>>>>>>>
32677>>>>>>>        Function_Return sValue
32678>>>>>>>    End_Function
32679>>>>>>>    
32679>>>>>>>    // normally this is zero and not changed. When zero the imageId used will be
32679>>>>>>>    // the statusbarId and this is the ID that is used when the psImage method is used.
32679>>>>>>>    // Using psImage is preferred as it adds the icon and assigns it to the object.
32679>>>>>>>    // This can be used to change icons. Note 0=use StatusbarId
32679>>>>>>>    Procedure Set piIconId Integer iValue
32681>>>>>>>        Set piPrivateIconId to iValue
32682>>>>>>>        If (IsComObjectCreated(Self)) Begin
32684>>>>>>>            Set ComIconIndex to iValue
32685>>>>>>>        End
32685>>>>>>>>
32685>>>>>>>    End_Procedure
32686>>>>>>>    
32686>>>>>>>    Function piIconId Returns Integer
32688>>>>>>>        Integer iValue
32688>>>>>>>        If (IsComObjectCreated(Self)) Begin
32690>>>>>>>            Get ComIconIndex to iValue
32691>>>>>>>        End
32691>>>>>>>>
32691>>>>>>>        Else Begin
32692>>>>>>>            Get piPrivateIconId to iValue
32693>>>>>>>        End
32693>>>>>>>>
32693>>>>>>>        Function_Return iValue
32694>>>>>>>    End_Function
32695>>>>>>>    
32695>>>>>>>    Procedure CreateComInstance Handle hoStatusBar
32697>>>>>>>        Variant vStatusBarPane
32697>>>>>>>        String sImage sText sToolTip
32697>>>>>>>        Integer iWidth eAlignment eStyle iBackGroundColor iTextColor iId iIconId iNewIconid
32697>>>>>>>        Boolean  bVisible bOk bStyleStretch bStyleDisabled bStyleNoBorders
32697>>>>>>>        Handle hoCommandBars
32697>>>>>>>        
32697>>>>>>>        Get CommandBarSystemObject to hoCommandBars
32698>>>>>>>        
32698>>>>>>>        Get pePrivateAlignment to eAlignment
32699>>>>>>>        Get pbPrivateVisible to bVisible
32700>>>>>>>        Get psPrivateText to sText
32701>>>>>>>        Get psPrivateTooltip to sToolTip
32702>>>>>>>        Get piPrivateBackGroundColor to iBackGroundColor
32703>>>>>>>        Get piPrivateTextColor to iTextColor
32704>>>>>>>        Get psImage to sImage
32705>>>>>>>        Get piPrivateWidth to iWidth
32706>>>>>>>        Get pbPrivateStyleStretch to bStyleStretch
32707>>>>>>>        Get pbPrivateStyleNoBorders to bStyleNoBorders
32708>>>>>>>        Get pbPrivateStyleDisabled to bStyleDisabled
32709>>>>>>>        Get piPrivateIconId to iIconId
32710>>>>>>>        
32710>>>>>>>        Get piId to iId
32711>>>>>>>        
32711>>>>>>>        // this check is added because a duplicate ID throws an exception error
32711>>>>>>>        Get ComFindPane of hoStatusBar iId to vStatusBarPane
32712>>>>>>>        If (not(IsNullComObject(vStatusBarPane))) Begin
32714>>>>>>>            Error DFERR_PROGRAM ("Cannot add status pane. Duplicate Id (" - String(iId) - ")")
32715>>>>>>>>
32715>>>>>>>            Procedure_Return
32716>>>>>>>        End
32716>>>>>>>>
32716>>>>>>>        
32716>>>>>>>        Get ComAddPane of hoStatusBar iId to vStatusBarPane
32717>>>>>>>        Set pvComObject to vStatusBarPane
32718>>>>>>>        Set ComAlignment to eAlignment
32719>>>>>>>        If (sText<>"") Begin
32721>>>>>>>            Set ComText to sText
32722>>>>>>>        End
32722>>>>>>>>
32722>>>>>>>        Set ComToolTip to sToolTip
32723>>>>>>>        If (iBackGroundColor<>clNone) Begin
32725>>>>>>>            Set ComBackgroundColor to iBackGroundColor
32726>>>>>>>        End
32726>>>>>>>>
32726>>>>>>>        If (iTextColor<>clNone) Begin
32728>>>>>>>            Set ComTextColor to iTextColor
32729>>>>>>>        End
32729>>>>>>>>
32729>>>>>>>        
32729>>>>>>>        Move (If(bStyleDisabled,SBPS_DISABLED,0) + ;            If(bStyleNoBorders,SBPS_NOBORDERS,0) + ;            If(bStyleStretch,SBPS_STRETCH,0)) to eStyle
32730>>>>>>>        Set ComStyle to eStyle
32731>>>>>>>        
32731>>>>>>>        If (sImage<>"") Begin
32733>>>>>>>            Get AddImage of hoCommandBars sImage iId xtpImageNormal to iNewIconid
32734>>>>>>>            Set ComIconIndex to iId
32735>>>>>>>        End
32735>>>>>>>>
32735>>>>>>>        If (iIconId<>0) Begin
32737>>>>>>>            Set ComIconIndex to iIconId
32738>>>>>>>        End
32738>>>>>>>>
32738>>>>>>>        
32738>>>>>>>        Set ComVisible to bVisible
32739>>>>>>>        Set ComWidth to iWidth
32740>>>>>>>        
32740>>>>>>>        Send OnCreate
32741>>>>>>>        
32741>>>>>>>    End_Procedure
32742>>>>>>>    
32742>>>>>>>    Procedure RegisterStatusPaneObject Handle[] ByRef hoPanes
32744>>>>>>>        Move Self to hoPanes[SizeOfArray(hoPanes)]
32745>>>>>>>    End_Procedure
32746>>>>>>>    
32746>>>>>>>    // auto assign an Id for the status bar. Called in end_construct_object if needed
32746>>>>>>>    Function AssignStatusBarID Returns Integer
32748>>>>>>>        Integer iId
32748>>>>>>>        Get piStatusBarId  to iId
32749>>>>>>>        Set piStatusBarId to (iId + 1)
32750>>>>>>>        Function_Return iId
32751>>>>>>>    End_Function
32752>>>>>>>    
32752>>>>>>>    Procedure OnCreate
32754>>>>>>>    End_Procedure
32755>>>>>>>    
32755>>>>>>>    Procedure OnClick
32757>>>>>>>    End_Procedure
32758>>>>>>>    
32758>>>>>>>    Procedure OnDblClick
32760>>>>>>>    End_Procedure
32761>>>>>>>    
32761>>>>>>>    Procedure End_Construct_Object
32763>>>>>>>        Integer iID
32763>>>>>>>        Get piId to iID
32764>>>>>>>        If (iID=sbpIDAutoAssign) Begin
32766>>>>>>>            Get AssignStatusBarID to iID
32767>>>>>>>            Set piId to iID
32768>>>>>>>        End
32768>>>>>>>>
32768>>>>>>>        Forward Send End_Construct_Object
32770>>>>>>>    End_Procedure
32771>>>>>>>    
32771>>>>>>>End_Class
32772>>>>>>>
32772>>>>>Use LanguageText.pkg
32772>>>>>
32772>>>>>
32772>>>>>Class cCJUndoMenuItem is a cCJMenuItem
32773>>>>>    
32773>>>>>    Procedure Construct_Object
32775>>>>>        Forward Send Construct_Object
32777>>>>>        Set psCaption   to C_$CaptionUndo
32778>>>>>        Set psToolTip to C_$ToolTipUndo
32779>>>>>        Set psDescription to C_$DescUndo
32780>>>>>        Set psImage to "ActionUndo.ico"
32781>>>>>        Set pbActiveUpdate to True
32782>>>>>        Set psCategory to C_$CategoryEdit
32783>>>>>        Set psShortcut to C_$Key_Ctrl_Z
32784>>>>>    End_Procedure
32785>>>>>    
32785>>>>>    Procedure OnExecute Variant vCommandBarControl
32787>>>>>        Send Undo of (focus(Self))
32788>>>>>    End_Procedure
32789>>>>>    
32789>>>>>    Function IsEnabled Returns Boolean
32791>>>>>        Boolean bEnabled
32791>>>>>        Get CanUndo of (Focus(Self)) to bEnabled
32792>>>>>        Function_Return bEnabled
32793>>>>>    End_Function
32794>>>>>    
32794>>>>>End_Class
32795>>>>>
32795>>>>>
32795>>>>>Class cCJDeleteEditMenuItem is a cCJMenuItem
32796>>>>>    
32796>>>>>    Procedure Construct_Object
32798>>>>>        Forward Send Construct_Object
32800>>>>>        Set psCaption   to C_$CaptionDelete
32801>>>>>        Set psToolTip to C_$ToolTipDelete
32802>>>>>        Set psDescription to C_$DescDelete
32803>>>>>        Set psImage to "actionDelete.ico"
32804>>>>>        Set psShortcut to C_$Key_Delete
32805>>>>>        Set pbActiveUpdate to True
32806>>>>>        Set psCategory to C_$CategoryEdit
32807>>>>>    End_Procedure
32808>>>>>    
32808>>>>>    
32808>>>>>    Procedure OnExecute Variant vCommandBarControl
32810>>>>>        Send Delete of (focus(Self))
32811>>>>>    End_Procedure
32812>>>>>    
32812>>>>>    Function IsEnabled Returns Boolean
32814>>>>>        Boolean bEnabled
32814>>>>>        Get CanDelete of (Focus(Self)) to bEnabled
32815>>>>>        Function_Return bEnabled
32816>>>>>    End_Function
32817>>>>>    
32817>>>>>End_Class
32818>>>>>
32818>>>>>
32818>>>>>Class cCJCutMenuItem is a cCJMenuItem
32819>>>>>    
32819>>>>>    Procedure Construct_Object
32821>>>>>        Forward Send Construct_Object
32823>>>>>        Set psCaption   to C_$CaptionCut
32824>>>>>        Set psToolTip to C_$TooltipCut
32825>>>>>        Set psDescription to C_$DescCut
32826>>>>>        Set psImage to "actionCut.ico"
32827>>>>>        Set psShortcut to C_$Key_Ctrl_X
32828>>>>>        Set pbActiveUpdate to True
32829>>>>>        Set psCategory to C_$CategoryEdit
32830>>>>>    End_Procedure
32831>>>>>    
32831>>>>>    
32831>>>>>    Procedure OnExecute Variant vCommandBarControl
32833>>>>>        Send Cut of (focus(Self))
32834>>>>>    End_Procedure
32835>>>>>    
32835>>>>>    Function IsEnabled Returns Boolean
32837>>>>>        Boolean bEnabled
32837>>>>>        Get CanCut of (Focus(Self)) to bEnabled
32838>>>>>        Function_Return bEnabled
32839>>>>>    End_Function
32840>>>>>    
32840>>>>>End_Class
32841>>>>>
32841>>>>>
32841>>>>>Class cCJCopyMenuItem is a cCJMenuItem
32842>>>>>    
32842>>>>>    Procedure Construct_Object
32844>>>>>        Forward Send Construct_Object
32846>>>>>        Set psCaption   to C_$CaptionCopy
32847>>>>>        Set psToolTip to C_$ToolTipCopy
32848>>>>>        Set psDescription to C_$DescCopy
32849>>>>>        Set psImage to "actionCopy.ico"
32850>>>>>        Set psShortcut to C_$Key_Ctrl_C
32851>>>>>        Set pbActiveUpdate to True
32852>>>>>        Set psCategory to C_$CategoryEdit
32853>>>>>    End_Procedure
32854>>>>>    
32854>>>>>    
32854>>>>>    Procedure OnExecute Variant vCommandBarControl
32856>>>>>        Send Copy of (focus(Self))
32857>>>>>    End_Procedure
32858>>>>>    
32858>>>>>    Function IsEnabled Returns Boolean
32860>>>>>        Boolean bEnabled
32860>>>>>        Get CanCopy of (Focus(Self)) to bEnabled
32861>>>>>        Function_Return bEnabled
32862>>>>>    End_Function
32863>>>>>    
32863>>>>>End_Class
32864>>>>>
32864>>>>>
32864>>>>>Class cCJPasteMenuItem is a cCJMenuItem
32865>>>>>    
32865>>>>>    Procedure Construct_Object
32867>>>>>        Forward Send Construct_Object
32869>>>>>        Set psCaption   to C_$CaptionPaste
32870>>>>>        Set psToolTip to C_$ToolTipPaste
32871>>>>>        Set psDescription to C_$DescPaste
32872>>>>>        Set psImage to "actionPaste.ico"
32873>>>>>        Set pbActiveUpdate to True
32874>>>>>        Set psShortcut to C_$Key_Ctrl_V
32875>>>>>        Set psCategory to C_$CategoryEdit
32876>>>>>    End_Procedure
32877>>>>>    
32877>>>>>    
32877>>>>>    Procedure OnExecute Variant vCommandBarControl
32879>>>>>        Send Paste of (focus(Self))
32880>>>>>    End_Procedure
32881>>>>>    
32881>>>>>    Function IsEnabled Returns Boolean
32883>>>>>        Boolean bEnabled
32883>>>>>        Get CanPaste of (Focus(Self)) to bEnabled
32884>>>>>        Function_Return bEnabled
32885>>>>>    End_Function
32886>>>>>    
32886>>>>>End_Class
32887>>>>>
32887>>>>>Class cCJSelectAllMenuItem is a cCJMenuItem
32888>>>>>    
32888>>>>>    Procedure Construct_Object
32890>>>>>        Forward Send Construct_Object
32892>>>>>        Set psCaption   to C_$CaptionSelectAll
32893>>>>>        Set psToolTip to C_$ToolTipSelectAll
32894>>>>>        Set psDescription to C_$DescSelectAll
32895>>>>>        Set pbActiveUpdate to True
32896>>>>>        Set psShortcut to C_$Key_Ctrl_A
32897>>>>>        Set psCategory to C_$CategoryEdit
32898>>>>>    End_Procedure
32899>>>>>    
32899>>>>>    
32899>>>>>    Procedure OnExecute Variant vCommandBarControl
32901>>>>>        Send Select_All of (focus(Self))
32902>>>>>    End_Procedure
32903>>>>>    
32903>>>>>    Function IsEnabled Returns Boolean
32905>>>>>        Boolean bEnabled
32905>>>>>        Get CanSelect of (Focus(Self)) to bEnabled
32906>>>>>        Function_Return bEnabled
32907>>>>>    End_Function
32908>>>>>    
32908>>>>>End_Class
32909>>>>>
32909>>>>>
32909>>>>>Class cCJExitMenuItem is a cCJMenuItem
32910>>>>>    
32910>>>>>    Procedure Construct_Object
32912>>>>>        Forward Send Construct_Object
32914>>>>>        Set psCaption to C_$CaptionExit
32915>>>>>        Set psToolTip to C_$ToolTipExit
32916>>>>>        Set psDescription to C_$ToolTipExit
32917>>>>>        Set psShortcut to C_$Key_Alt_F4
32918>>>>>        Set psCategory to C_$CategoryFile
32919>>>>>    End_Procedure
32920>>>>>    
32920>>>>>    Procedure OnExecute Variant vCommandBarControl
32922>>>>>        Send Exit_Application of Desktop
32923>>>>>    End_Procedure
32924>>>>>    
32924>>>>>End_Class
32925>>>>>
32925>>>>>Class cCJHelpMenuItem is a cCJMenuItem
32926>>>>>    
32926>>>>>    Procedure Construct_Object
32928>>>>>        Forward Send Construct_Object
32930>>>>>        Set psCaption to C_$CaptionHelp
32931>>>>>        Set psDescription to C_$ToolTipHelp
32932>>>>>        Set psToolTip to C_$DescHelp
32933>>>>>        Set psImage to "ActionHelp.ico"
32934>>>>>        Set psShortcut to "F1"
32935>>>>>        Set psCategory to C_$CategoryHelp
32936>>>>>    End_Procedure
32937>>>>>    
32937>>>>>    Procedure OnExecute Variant vCommandBarControl
32939>>>>>        Send Help of (Focus(Self))
32940>>>>>    End_Procedure
32941>>>>>    
32941>>>>>End_Class
32942>>>>>
32942>>>>>Class cCJStatusbarMenuItem is a cCJMenuItem
32943>>>>>    
32943>>>>>    Procedure Construct_Object
32945>>>>>        Forward Send Construct_Object
32947>>>>>        Set psCaption to C_$CaptionAddStatusbar
32948>>>>>        Set psToolTip to C_$ToolTipAddStatusbar
32949>>>>>        Set psDescription to  C_$DescAddStatusbar
32950>>>>>        Set psCategory to C_$CategoryWindow
32951>>>>>    End_Procedure
32952>>>>>    
32952>>>>>    Procedure OnExecute Variant vCommandBarControl
32954>>>>>        Handle hoCommandBars hoClientArea
32954>>>>>        Get CommandBarSystemObject to hoCommandBars
32955>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32956>>>>>        If hoClientArea Begin
32958>>>>>            // the clientarea's parent panel has message
32958>>>>>            Send Toggle_StatusBar of (Parent(hoClientArea))
32959>>>>>        End
32959>>>>>>
32959>>>>>    End_Procedure
32960>>>>>    
32960>>>>>    Function IsChecked Returns Boolean
32962>>>>>        Boolean bOn
32962>>>>>        Handle hoCommandBars hoClientArea
32962>>>>>        Get CommandBarSystemObject to hoCommandBars
32963>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32964>>>>>        If hoClientArea Begin
32966>>>>>            // the clientarea's parent panel has message
32966>>>>>            Get StatusBar_State of (Parent(hoClientArea)) to bOn
32967>>>>>        End
32967>>>>>>
32967>>>>>        Function_Return bOn
32968>>>>>    End_Function
32969>>>>>End_Class
32970>>>>>
32970>>>>>Class cCJAutoArrangeIconsMenuItem is a cCJMenuItem
32971>>>>>    
32971>>>>>    Procedure Construct_Object
32973>>>>>        Forward Send Construct_Object
32975>>>>>        Set psCaption to C_$CaptionAutoArrangeIcons
32976>>>>>        Set psToolTip to C_$ToolTipAutoArrangeIcons
32977>>>>>        Set psDescription to C_$DescAutoArrangeIcons
32978>>>>>        Set psCategory to C_$CategoryWindow
32979>>>>>    End_Procedure
32980>>>>>    
32980>>>>>    Procedure OnExecute Variant vCommandBarControl
32982>>>>>        Handle hoCommandBars hoClientArea
32982>>>>>        Get CommandBarSystemObject to hoCommandBars
32983>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32984>>>>>        If hoClientArea Begin
32986>>>>>            // the clientarea's parent panel has message
32986>>>>>            Send Toggle_Auto_Arrange_Icons of (Parent(hoClientArea))
32987>>>>>        End
32987>>>>>>
32987>>>>>    End_Procedure
32988>>>>>    
32988>>>>>    Function IsChecked Returns Boolean
32990>>>>>        Boolean bOn
32990>>>>>        Handle hoCommandBars hoClientArea
32990>>>>>        Get CommandBarSystemObject to hoCommandBars
32991>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32992>>>>>        If hoClientArea Begin
32994>>>>>            // the clientarea's parent panel has message
32994>>>>>            Get Auto_Arrange_Icons_State of (Parent(hoClientArea)) to bOn
32995>>>>>        End
32995>>>>>>
32995>>>>>        Function_Return bOn
32996>>>>>    End_Function
32997>>>>>End_Class
32998>>>>>
32998>>>>>Class cCJRestoreMenusMenuItem is a cCJMenuItem
32999>>>>>    
32999>>>>>    Procedure Construct_Object
33001>>>>>        Forward Send Construct_Object
33003>>>>>        Set psCaption to C_$CaptionRestoreMenus
33004>>>>>        Set psToolTip to C_$ToolTipRestoreMenus
33005>>>>>        Set psDescription to C_$DescRestoreMenus
33006>>>>>        Set psCategory to C_$CategoryWindow
33007>>>>>    End_Procedure
33008>>>>>    
33008>>>>>    Procedure OnExecute Variant vCommandBarControl
33010>>>>>        Handle hoCommandBars
33010>>>>>        Get CommandBarSystemObject to hoCommandBars
33011>>>>>        Send RestoreLayout of hoCommandBars
33012>>>>>    End_Procedure
33013>>>>>    
33013>>>>>End_Class
33014>>>>>
33014>>>>>Class cCJCascadeMenuItem is a cCJMenuItem
33015>>>>>    
33015>>>>>    Procedure Construct_Object
33017>>>>>        Forward Send Construct_Object
33019>>>>>        Set psCaption to C_$CaptionCascade
33020>>>>>        Set psToolTip to C_$ToolTipCascade
33021>>>>>        Set psDescription to  C_$DescCascade
33022>>>>>        Set psImage to "ActionCascade.ico"
33023>>>>>        Set psCategory to C_$CategoryWindow
33024>>>>>    End_Procedure
33025>>>>>    
33025>>>>>    Procedure OnExecute Variant vCommandBarControl
33027>>>>>        Handle hoCommandBars hoClientArea
33027>>>>>        Get CommandBarSystemObject to hoCommandBars
33028>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
33029>>>>>        If hoClientArea Begin
33031>>>>>            Send Cascade_Windows of hoClientArea
33032>>>>>        End
33032>>>>>>
33032>>>>>    End_Procedure
33033>>>>>End_Class
33034>>>>>
33034>>>>>Class cCJTileHorizontally is a cCJMenuItem
33035>>>>>    
33035>>>>>    Procedure Construct_Object
33037>>>>>        Forward Send Construct_Object
33039>>>>>        Set psCaption to C_$CaptionTileHorizontally
33040>>>>>        Set psToolTip to C_$ToolTipTileHorizontally
33041>>>>>        Set psDescription to  C_$DescTileHorizontally
33042>>>>>        Set psImage to "ActionTileHorizontally.ico"
33043>>>>>        Set psCategory to C_$CategoryWindow
33044>>>>>    End_Procedure
33045>>>>>    
33045>>>>>    Procedure OnExecute Variant vCommandBarControl
33047>>>>>        Handle hoCommandBars hoClientArea
33047>>>>>        Get CommandBarSystemObject to hoCommandBars
33048>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
33049>>>>>        If hoClientArea Begin
33051>>>>>            Send Tile_Windows_Horizontal of hoClientArea
33052>>>>>        End
33052>>>>>>
33052>>>>>    End_Procedure
33053>>>>>End_Class
33054>>>>>
33054>>>>>Class cCJTileVertically is a cCJMenuItem
33055>>>>>    
33055>>>>>    Procedure Construct_Object
33057>>>>>        Forward Send Construct_Object
33059>>>>>        Set psCaption to C_$CaptionTileVertically
33060>>>>>        Set psToolTip to C_$ToolTipTileVertically
33061>>>>>        Set psDescription to  C_$DescTileVertically
33062>>>>>        Set psImage to "ActionTileVertically.ico"
33063>>>>>        Set psCategory to C_$CategoryWindow
33064>>>>>    End_Procedure
33065>>>>>    
33065>>>>>    Procedure OnExecute Variant vCommandBarControl
33067>>>>>        Handle hoCommandBars hoClientArea
33067>>>>>        Get CommandBarSystemObject to hoCommandBars
33068>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
33069>>>>>        If hoClientArea Begin
33071>>>>>            Send Tile_Windows_Vertical of hoClientArea
33072>>>>>        End
33072>>>>>>
33072>>>>>    End_Procedure
33073>>>>>End_Class
33074>>>>>
33074>>>>>Class cCJMinimizeWindowsMenuItem is a cCJMenuItem
33075>>>>>    
33075>>>>>    Procedure Construct_Object
33077>>>>>        Forward Send Construct_Object
33079>>>>>        Set psCaption to C_$CaptionMinimizeWindows
33080>>>>>        Set psToolTip to C_$ToolTipMinimizeWindows
33081>>>>>        Set psDescription to  C_$DescMinimizeWindows
33082>>>>>        Set psCategory to C_$CategoryWindow
33083>>>>>    End_Procedure
33084>>>>>    
33084>>>>>    Procedure OnExecute Variant vCommandBarControl
33086>>>>>        Handle hoCommandBars hoClientArea
33086>>>>>        Get CommandBarSystemObject to hoCommandBars
33087>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
33088>>>>>        If hoClientArea Begin
33090>>>>>            // the clientarea's parent panel has message
33090>>>>>            Send Minimize_all_Windows of (Parent(hoClientArea))
33091>>>>>        End
33091>>>>>>
33091>>>>>    End_Procedure
33092>>>>>End_Class
33093>>>>>
33093>>>>>
33093>>>>>Class cCJRestoreWindowsMenuItem is a cCJMenuItem
33094>>>>>    
33094>>>>>    Procedure Construct_Object
33096>>>>>        Forward Send Construct_Object
33098>>>>>        Set psCaption to C_$CaptionRestoreWindows
33099>>>>>        Set psToolTip to C_$ToolTipRestoreWindows
33100>>>>>        Set psDescription to  C_$DescRestoreWindows
33101>>>>>        Set psCategory to C_$CategoryWindow
33102>>>>>    End_Procedure
33103>>>>>    
33103>>>>>    Procedure OnExecute Variant vCommandBarControl
33105>>>>>        Handle hoCommandBars hoClientArea
33105>>>>>        Get CommandBarSystemObject to hoCommandBars
33106>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
33107>>>>>        If hoClientArea Begin
33109>>>>>            // the clientarea's parent panel has message
33109>>>>>            Send Restore_all_Windows of (Parent(hoClientArea))
33110>>>>>        End
33110>>>>>>
33110>>>>>    End_Procedure
33111>>>>>End_Class
33112>>>>>
33112>>>>>Class cCJArrangeIconsMenuItem is a cCJMenuItem
33113>>>>>    
33113>>>>>    Procedure Construct_Object
33115>>>>>        Forward Send Construct_Object
33117>>>>>        Set psCaption to C_$CaptionArrangeIcons
33118>>>>>        Set psToolTip to C_$ToolTipArrangeIcons
33119>>>>>        Set psDescription to  C_$DescArrangeIcons
33120>>>>>        Set psCategory to C_$CategoryWindow
33121>>>>>    End_Procedure
33122>>>>>    
33122>>>>>    Procedure OnExecute Variant vCommandBarControl
33124>>>>>        Handle hoCommandBars hoClientArea
33124>>>>>        Get CommandBarSystemObject to hoCommandBars
33125>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
33126>>>>>        If hoClientArea Begin
33128>>>>>            Send Arrange_Icons of hoClientArea
33129>>>>>        End
33129>>>>>>
33129>>>>>    End_Procedure
33130>>>>>    
33130>>>>>End_Class
33131>>>
33131>>>Object oEditContextMenu is a cCJContextMenu
33133>>>    
33133>>>    Move Self to Default_Form_Floating_Menu_ID
33134>>>    
33134>>>    Object oUndoMenuItem is a cCJUndoMenuItem
33136>>>    End_Object
33137>>>    
33137>>>    Object oCutMenuItem is a cCJCutMenuItem
33139>>>        Set pbControlBeginGroup to True
33140>>>    End_Object
33141>>>    
33141>>>    Object oCopyMenuItem is a cCJCopyMenuItem
33143>>>    End_Object
33144>>>
33144>>>    Object oPasteMenuItem is a cCJPasteMenuItem
33146>>>    End_Object
33147>>>
33147>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
33149>>>    End_Object
33150>>>
33150>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
33152>>>        Set pbControlBeginGroup to True
33153>>>    End_Object
33154>>>
33154>>>End_Object
33155>>>
33155>Use cDbUpdateFunctionLibrary.pkg
Including file: cDbUpdateFunctionLibrary.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cDbUpdateFunctionLibrary.pkg)
33155>>>//****************************************************************************
33155>>>// $Module type: Class
33155>>>// $Module name: cDbUpdateFunctionLibrary
33155>>>// $Author     : Nils Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
33155>>>// Web-site    : http://www.rdctools.com
33155>>>// Created     : 2014-09-05 @ 09:50 (Military date format: YY-MM-DD)
33155>>>//
33155>>>// Description : The class consists of a function library for database manipulations, aka make changes to a database.
33155>>>//               It has top level functions that uses the DataFlex db API, _but_ also specialized
33155>>>//               functions to make db changes to Sql databases with DAW drivers,
33155>>>//               with the help of Sql-scripts.
33155>>>//
33155>>>// $Rev History:
33155>>>//    2014-09-05  Module header created
33155>>>//
33155>>>//****************************************************************************
33155>>>//
33155>>>// Martin Moleman on SQL Server and DateTime2 (Don't use DataTime any longer !)
33155>>>// One remark about your change: I would not change to datetime2(7) (7 decimals) but to
33155>>>// datetime2(3) (3 decimals = milliseconds) or If you don't need the milliseconds datetime2(0).
33155>>>// The reason is that the DataFlex DateTime type only allows 3 decimals. When using 7
33155>>>// decimals you may Get truncation that again may cause problems with finding.
33155>>>//
33155>>>// Important! The conversion from DateTime to Date or datetime2 will also convert all dummy zero Date values from 1753-01-01 to 0001-01-01.
33155>>>// This is important to realize. The conversion will actually change the data in the database (done by the driver)
33155>>>
33155>>>
33155>>>// DF_DATABASE_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA
33155>>>// Determines for all DataFlex data types, which SQL native types will be used when creating new columns.
33155>>>// Set_Attribute DF_DATABASE_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA of {driverNumber} {databaseHandle} ;
33155>>>// to {MAP_DF_TO_SQL_TYPE_SQL2000|MAP_DF_TO_SQL_TYPE_SQL2005|MAP_DF_TO_SQL_TYPE_SQL2008|MAP_DF_TO_SQL_TYPE_SQL2012}
33155>>>//
33155>>>Use cBaseDbUpdateFuncLib.pkg
Including file: cBaseDbUpdateFuncLib.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cBaseDbUpdateFuncLib.pkg)
33155>>>>>//****************************************************************************
33155>>>>>// $Module type: Class
33155>>>>>// $Module name: cBaseDbUpdateFuncLib
33155>>>>>// $Author     : Nils Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
33155>>>>>// Web-site    : http://www.rdctools.com
33155>>>>>// Created     : 2023-11-06 @ 09:50 (Military date format: YY-MM-DD)
33155>>>>>//
33155>>>>>// Description : The class consists of the basis/parent for the cDbUpdateFunctionLibrary class
33155>>>>>//               It contains helper functions for the cDbUpdateFunctionLibrary class
33155>>>>>//
33155>>>>>// $Rev History:
33155>>>>>//    2023-11-06  Module header created
33155>>>>>//
33155>>>>>//****************************************************************************
33155>>>>>Use cApplication.pkg
33155>>>>>Use seq_chnl.pkg
33155>>>>>Use GlobalFunctionsProcedures.pkg
33155>>>>>Use Datadict.pkg                        // Declaration of DF_FILE_SQL_TABLE_NAME
Including file: Datadict.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Datadict.pkg)
33155>>>>>>>Use VDFBase.pkg
33155>>>>>>>Use LanguageText.pkg // language support VDF pkg replacement strings
33155>>>>>>>
33155>>>>>>>Register_Procedure File_Field_Value_Changed
33155>>>>>>>Register_Procedure File_Field_Mask_Changed
33155>>>>>>>Register_Procedure File_Field_Label_Changed
33155>>>>>>>Register_Procedure File_Field_Option_Changed
33155>>>>>>>Register_Function  Extended_DEO_State Returns Integer
33155>>>>>>>Register_Function  Entry_Refresh_State Returns Integer
33155>>>>>>>Register_Procedure Set Entry_Refresh_State Integer iState
33155>>>>>>>Register_Function  Allow_Foreign_New_Save_State Returns Integer
33155>>>>>>>Register_Function  Server Returns Integer
33155>>>>>>>
33155>>>>>>>Use Data_Set.pkg
Including file: Data_set.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Data_set.pkg)
33155>>>>>>>>>Use VDFBase.pkg
33155>>>>>>>>>Use fndmodes.pkg
Including file: fndmodes.pkg    (C:\Program Files\DataFlex 24.0\Pkg\fndmodes.pkg)
33155>>>>>>>>>>>//
33155>>>>>>>>>>>// special find modes
33155>>>>>>>>>>>//
33155>>>>>>>>>>>Define NEXT_RECORD  for 5 // find-next
33155>>>>>>>>>>>Define FIRST_RECORD for 6 // find-first
33155>>>>>>>>>>>Define LAST_RECORD  for 7 // find-last 
33155>>>>>>>>>Use refmodes.pkg
Including file: refmodes.pkg    (C:\Program Files\DataFlex 24.0\Pkg\refmodes.pkg)
33155>>>>>>>>>>>//
33155>>>>>>>>>>>// constants for REFRESH message parameter values
33155>>>>>>>>>>>//
33155>>>>>>>>>>>Define MODE_CLEAR             for 1  //notification from origin of clear
33155>>>>>>>>>>>Define MODE_FIND_OR_CLEAR_SET for 2  //notification from find or clear
33155>>>>>>>>>>>Define MODE_CLEAR_ALL         for 3  //notification from clear-all
33155>>>>>>>>>>>Define MODE_DELETE            for 4  //notification after successful delete
33155>>>>>>>>>>>Define MODE_SAVE              for 5  //notification after successful save
33155>>>>>>>>>>>
33155>>>>>>>>>
33155>>>>>>>>>
33155>>>>>>>>>//
33155>>>>>>>>>//Global integer status values
33155>>>>>>>>>//
33155>>>>>>>>>Define OPERATION_MODE   for |VI99  //status of data-sets in application
33155>>>>>>>>>Define OPERATION_ORIGIN for |VI108 //origin of current of data-set operation
33155>>>>>>>>>
33155>>>>>>>>>//
33155>>>>>>>>>//Constants for Operation_Mode global int values
33155>>>>>>>>>//
33155>>>>>>>>>Define MODE_WAITING  for 0  //wait-mode
33155>>>>>>>>>Define MODE_FINDING  for 1  //find-mode
33155>>>>>>>>>Define MODE_CLEARING for 2  //clear-mode
33155>>>>>>>>>Define MODE_CREATING for 3  //create-mode
33155>>>>>>>>>Define MODE_SAVING   for 4  //save-mode
33155>>>>>>>>>Define MODE_DELETING for 5  //delete-mode
33155>>>>>>>>>Define MODE_ABORTING for 6  //abort-mode
33155>>>>>>>>>Define MODE_VALIDATING for 7  //request_validate-mode : added for VDF7
33155>>>>>>>>>Define MODE_CLEARINGALL for 8 //clear-all mode (added in VDF8)
33155>>>>>>>>>
33155>>>>>>>>>//   The Data_Set class is implemented as a subclass of Entry_Client, with
33155>>>>>>>>>//   a C language handler providing the majority of new behavior.  The
33155>>>>>>>>>//   Data_Set class is intended to be a grouping agent for data-entry objects
33155>>>>>>>>>//   and a container for subordinate Data_Sets.
33155>>>>>>>>>//
33155>>>>>>>>>Use BaseData_Set.pkg
33155>>>>>>>>>
33155>>>>>>>>>// Data_Set class definition, public class layer. (Extra class layer needed
33155>>>>>>>>>// to augment C-based (Constrain) procedure(s).)
33155>>>>>>>>>
33155>>>>>>>>>Class DataSet is a BaseData_Set
33156>>>>>>>>>    
33156>>>>>>>>>    
33156>>>>>>>>>    // maintain old name for the time being to maximize compatability
33156>>>>>>>>>    // between character mode and windows versions. Developers should be
33156>>>>>>>>>    // able to move DS classes back and forth without changes.
33156>>>>>>>>>    Replace_Class_Name Data_Set DataSet
33156>>>>>>>>>    
33156>>>>>>>>>    Procedure Construct_Object //Integer Img#
33158>>>>>>>>>        Forward Send Construct_Object No_Image //Img#
33160>>>>>>>>>        
33160>>>>>>>>>        Property Integer Constrain_File 0
33161>>>>>>>>>        Property Integer Auto_Fill_State False
33162>>>>>>>>>        Property Integer Change_Disabled_State  False
33163>>>>>>>>>        // RT sets this inside of Mark_components a part of old entry_client DSO behavior. Now it is never used
33163>>>>>>>>>        Property Integer Component_State False
33164>>>>>>>>>        
33164>>>>>>>>>    End_Procedure
33165>>>>>>>>>    
33165>>>>>>>>>    
33165>>>>>>>>>    //
33165>>>>>>>>>    // This may be called by legacy DSO and DDO code
33165>>>>>>>>>    //
33165>>>>>>>>>    // IMPORTANT NOTE of change for 8.2:
33165>>>>>>>>>    //         DO NOT call or augment this anymore.
33165>>>>>>>>>    //
33165>>>>>>>>>    //         for sending: Find all cases of Field_main_index and change it to File_Field_Index
33165>>>>>>>>>    //
33165>>>>>>>>>    //         for augmenting: In DSOs - replace Field_main_index with File_field_index
33165>>>>>>>>>    //                         In DDOs - replace Field_main_Index with Field_Index and do not pass
33165>>>>>>>>>    //                                   the file parameter.
33165>>>>>>>>>    //                                   See DDOs Field_index and File_field_Index for more
33165>>>>>>>>>    //
33165>>>>>>>>>    Function Field_Main_Index Integer file Integer Field Returns Integer
33167>>>>>>>>>        Integer dataType fldNdx retval ordr
33167>>>>>>>>>        Move -1 to retval      //field has no main index (default)
33168>>>>>>>>>        If (file <> 0) Begin
33170>>>>>>>>>//      FIELD_DEF file field to dataType fldNdx
33170>>>>>>>>>            Get_Attribute DF_FIELD_INDEX of file Field to fldNdx // main index field
33173>>>>>>>>>            If (fldNdx > 0 or Field = 0) ;                Move fldNdx to retval //field has main index
33176>>>>>>>>>        End
33176>>>>>>>>>>
33176>>>>>>>>>        If (file = main_file(Self)) Begin
33178>>>>>>>>>            Get ordering to ordr
33179>>>>>>>>>            If (ordr >= 0) ;                Move ordr to retval  //ordering takes precedence over main index
33182>>>>>>>>>        End
33182>>>>>>>>>>
33182>>>>>>>>>        Function_Return retval
33183>>>>>>>>>    End_Function
33184>>>>>>>>>    
33184>>>>>>>>>    // This allows packages that still use data-sets instead of DDOs to use this
33184>>>>>>>>>    // message syntax.
33184>>>>>>>>>    // Note that this will never get here if the DD class is used as
33184>>>>>>>>>    // it has its own handler for this. It only is called if DSOs are used in which
33184>>>>>>>>>    // case it calls the old message field_main_index above.
33184>>>>>>>>>    // DDO based objects will NEVER call this code
33184>>>>>>>>>    //
33184>>>>>>>>>    Function File_Field_Index Integer iFile Integer iField Returns Integer
33186>>>>>>>>>        Function_Return (Field_main_Index(Self,iFile,iField))
33187>>>>>>>>>    End_Function
33188>>>>>>>>>    
33188>>>>>>>>>    
33188>>>>>>>>>    Procedure Item_Find Integer eFindMode ;            Integer iFile Integer iField ;            Integer bDoEntryUpdate Integer bShowFindErr Integer bDeferred
33190>>>>>>>>>        
33190>>>>>>>>>        RowID   riRow
33190>>>>>>>>>        Integer iIndex
33190>>>>>>>>>        Handle  hoServer
33190>>>>>>>>>        Integer iSegments iSeg iSegFld iSegFldMainIndex
33190>>>>>>>>>        Boolean bChanged bDoCheck bOk
33190>>>>>>>>>        
33190>>>>>>>>>        //Get Field_Main_Index iFile iField to iIndex
33190>>>>>>>>>        Get File_Field_Index iFile iField to iIndex
33191>>>>>>>>>        If (iIndex<>-1) Begin
33193>>>>>>>>>            // get prior rowId before it get cleared
33193>>>>>>>>>            Move (GetRowID(iFile)) to riRow
33194>>>>>>>>>            //  'hold' buffer to prepare for entry_update
33194>>>>>>>>>            Set_Attribute DF_FILE_STATUS of iFile to DF_FILE_INACTIVE
33197>>>>>>>>>            If bDoEntryUpdate Begin
33199>>>>>>>>>                Send Request_Entry_Update iFile 1  //entUpdt all DEOs as required
33200>>>>>>>>>                
33200>>>>>>>>>                // If the buffer is cleared (no record and no changed data) then we want
33200>>>>>>>>>                // to do a constrained_clear which will force the buffer to get cleared
33200>>>>>>>>>                // according to the rules of the current constraints.
33200>>>>>>>>>                //Get_field_value iFile 0 to iRec
33200>>>>>>>>>                //Move (GetRowID(iFile)) to riRow // 12.1 moved above the set file inactive
33200>>>>>>>>>                
33200>>>>>>>>>                // If there was an active record to begin with we consider this changed (not cleared)
33200>>>>>>>>>                If (not(IsNullRowId(riRow))) Begin
33202>>>>>>>>>                    Move True to bChanged
33203>>>>>>>>>                End
33203>>>>>>>>>>
33203>>>>>>>>>                Else Begin
33204>>>>>>>>>                    // or, if the record was already changed or the entry_update created a change
33204>>>>>>>>>                    // we consider this changed
33204>>>>>>>>>                    Get_Attribute DF_FILE_CHANGED of iFile to bChanged
33207>>>>>>>>>                End
33207>>>>>>>>>>
33207>>>>>>>>>                
33207>>>>>>>>>                If not bChanged Begin
33209>>>>>>>>>                    // if buffer is unchanged, do a constrained clear. It is unchanged if there was not
33209>>>>>>>>>                    // active record, the record was unchanged, and the update didn't change anything.
33209>>>>>>>>>                    Constrained_Clear eFindMode iFile by iIndex
33212>>>>>>>>>                End
33212>>>>>>>>>>
33212>>>>>>>>>                Else If (eFindMode=GE or eFindMode=LE and iIndex>0) Begin
33215>>>>>>>>>                    
33215>>>>>>>>>                    // If mode is GE or LE we need to do some extra processing. We want to clear
33215>>>>>>>>>                    // all index segemnt fields that occur after this field in the index. This way
33215>>>>>>>>>                    // dbList searches and find ge searches (f9) will always find the first record
33215>>>>>>>>>                    // that matches the data in the field being searched. This was if an index like
33215>>>>>>>>>                    // customer.name x customer.number where you had 10 identical names "john" typing
33215>>>>>>>>>                    // john will find the first record, because customer.number will get cleared.
33215>>>>>>>>>                    // Note we can no do this with GT or LT or you'd get stuck in fields
33215>>>>>>>>>                    
33215>>>>>>>>>                    // check all fields for index. Once you find the iField field, clear all
33215>>>>>>>>>                    // fields that follow it. Only do this if the other fields do not use the
33215>>>>>>>>>                    // same index as its primary index (in which case we assume the data is intentional).
33215>>>>>>>>>                    // This should handle most cases.
33215>>>>>>>>>                    Get_Attribute DF_INDEX_NUMBER_SEGMENTS of iFile iIndex to iSegments
33218>>>>>>>>>                    For iSeg from 1 to iSegments
33224>>>>>>>>>>
33224>>>>>>>>>                        Get_Attribute DF_INDEX_SEGMENT_FIELD of iFile iIndex iSeg to iSegFld
33227>>>>>>>>>                        If not bDoCheck Begin
33229>>>>>>>>>                            If (iSegFld=iField) ;                                Move True to bDoCheck // marked after we find the find field in the index
33232>>>>>>>>>                        End
33232>>>>>>>>>>
33232>>>>>>>>>                        Else Begin // we get here after we've found the main field segment
33233>>>>>>>>>                            // if main index if this segment is same as our find index, do nothing
33233>>>>>>>>>                            Get File_Field_Index iFile iSegFld to iSegFldMainIndex
33234>>>>>>>>>                            If (iSegFldMainIndex<>iIndex) ;                                Set_Field_Value iFile iSegFld to ''
33239>>>>>>>>>                        End
33239>>>>>>>>>>
33239>>>>>>>>>                    Loop
33240>>>>>>>>>>
33240>>>>>>>>>                End
33240>>>>>>>>>>
33240>>>>>>>>>                
33240>>>>>>>>>                Get Which_Data_Set iFile to hoServer
33241>>>>>>>>>                If (hoServer and iFile=main_file(hoServer)) ;                    Send Attach_Main_File to hoServer
33244>>>>>>>>>                Else ;                    Attach iFile
33246>>>>>>>>>            End
33246>>>>>>>>>>
33246>>>>>>>>>            
33246>>>>>>>>>            Move False to Err
33247>>>>>>>>>            
33247>>>>>>>>>            If (Is_SuperFind_Required(Self,iFile)) ;                Send Request_SuperFind eFindMode iFile iField
33250>>>>>>>>>            Else If bDeferred ;                Send Request_Read eFindMode iFile iIndex
33254>>>>>>>>>            Else ;                Send Request_Find eFindMode iFile iIndex
33256>>>>>>>>>            
33256>>>>>>>>>            If (not(Found) and not(err)) Begin
33258>>>>>>>>>                // refind original record (or leave it cleared if not record)
33258>>>>>>>>>                Move (FindByRowId(iFile,riRow)) to bOk
33259>>>>>>>>>                
33259>>>>>>>>>                If bShowFindErr ;                    Error (If(eFindMode<2, DFERR_FIND_PRIOR_BEG_OF_FILE, DFERR_FIND_PAST_END_OF_FILE))
33262>>>>>>>>>                Move False to Found
33263>>>>>>>>>            End
33263>>>>>>>>>>
33263>>>>>>>>>        End
33263>>>>>>>>>>
33263>>>>>>>>>        Else ;            If bShowFindErr ;                Error DFERR_FIELD_NOT_INDEXED
33267>>>>>>>>>    End_Procedure
33268>>>>>>>>>    
33268>>>>>>>>>    
33268>>>>>>>>>    // We only care about should_saves of DEOs and not DSOs when
33268>>>>>>>>>    // exiting the app. Create a handler for data set class. We still
33268>>>>>>>>>    // broadcast in case we've got nested deos in the dso (hopefully not).
33268>>>>>>>>>    //
33268>>>>>>>>>    Function Exit_Application_Check Returns Integer
33270>>>>>>>>>        Integer rVal
33270>>>>>>>>>        Broadcast Get Exit_Application_Check to Rval // check w/ kids
33272>>>>>>>>>        Function_Return rVal
33273>>>>>>>>>    End_Function
33274>>>>>>>>>    
33274>>>>>>>>>    Procedure Constrain
33276>>>>>>>>>        Integer iFile
33276>>>>>>>>>        Send OnConstrain
33277>>>>>>>>>        Forward Send Constrain
33279>>>>>>>>>        Get Constrain_File to iFile
33280>>>>>>>>>        If iFile ;            Constrain (Main_file(Self)) relates to iFile
33283>>>>>>>>>    End_Procedure
33284>>>>>>>>>    
33284>>>>>>>>>    Procedure OnConstrain
33286>>>>>>>>>    End_Procedure
33287>>>>>>>>>    
33287>>>>>>>>>    // Less confusing Message for adding Updating servers
33287>>>>>>>>>    //
33287>>>>>>>>>    Procedure Set DDO_Server Handle ObjId
33289>>>>>>>>>        Send Attach_Server ObjId
33290>>>>>>>>>    End_Procedure
33291>>>>>>>>>    
33291>>>>>>>>>    // This is called when a view takes or retakes the
33291>>>>>>>>>    // focus. If DD not in use, do nothing.
33291>>>>>>>>>    //
33291>>>>>>>>>    Procedure Refind_DD_Records
33293>>>>>>>>>        If (in_use_state(Self)) ;            Send refind_records
33296>>>>>>>>>    End_Procedure
33297>>>>>>>>>    
33297>>>>>>>>>    // this returns true if the data-set is changed AND there are attached
33297>>>>>>>>>    // DEO objects. Without this you can get "changes exist" condition reported
33297>>>>>>>>>    // that the user will have no way of saving.
33297>>>>>>>>>    //
33297>>>>>>>>>    Function Data_Set_Should_Save Returns Integer
33299>>>>>>>>>        Function_Return (Should_Save(Self) and ;            Data_Set_User_interface_count(Self))
33300>>>>>>>>>    End_Function
33301>>>>>>>>>    
33301>>>>>>>>>    // returns 0 indicating that this is not DD enabled. DataDictionary objects will return 1.
33301>>>>>>>>>    // Add DSOs and DDOs must understand this message
33301>>>>>>>>>    
33301>>>>>>>>>    Function Extended_DSO_State Returns Integer
33303>>>>>>>>>        Function_Return 0
33304>>>>>>>>>    End_Function
33305>>>>>>>>>    
33305>>>>>>>>>    
33305>>>>>>>>>End_Class
33306>>>>>>>>>
33306>>>>>>>>>
33306>>>>>>>>>
33306>>>>>>>Use DDValtbl.pkg  // validation table classes
Including file: Ddvaltbl.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Ddvaltbl.pkg)
33306>>>>>>>>>//  Validation Table Support for Extended Data-Sets. Fields may
33306>>>>>>>>>//  attached to validation tables which can then be used for
33306>>>>>>>>>//  validation (if Validate_state is true) or list loading.
33306>>>>>>>>>//  Developers can create their own validation tables as long as they
33306>>>>>>>>>//  conform to the following external interface:
33306>>>>>>>>>//
33306>>>>>>>>>// Properties
33306>>>>>>>>>//   Static_State       - if list must be rebuilt each validation, load
33306>>>>>>>>>//   Allow_Blank_state  - If Blank or 0 is a valid response
33306>>>>>>>>>//   Validate_State     - should table be used for validation
33306>>>>>>>>>//   Table_Loaded_State - is the validation table initialized?
33306>>>>>>>>>//
33306>>>>>>>>>// Methods
33306>>>>>>>>>//  Get Validate_Value sValue to iVal - if iVal=0, it is legal
33306>>>>>>>>>//  Send Fill_list                    - fills a static list
33306>>>>>>>>>//  Send Request_Fill_From_List iObject iMessage
33306>>>>>>>>>//        This is a callback that will fill an external list by sending
33306>>>>>>>>>//        the passed message (iMessage) back to the requesting object
33306>>>>>>>>>//        (iObject). It will send this message for each item in the
33306>>>>>>>>>//        validation table. It always passes back four params. Those are:
33306>>>>>>>>>//                     iItem - Item count being passed back
33306>>>>>>>>>//                     sData - The Database value of the item
33306>>>>>>>>>//                     sDesc - The Value's description, "" if none
33306>>>>>>>>>//                     iFile - File number associated with the item (if any)
33306>>>>>>>>>//                     iRec  - Record associated with the item (if any)
33306>>>>>>>>>// Developers can create classes of any complexity to support validation
33306>>>>>>>>>// tables. We have provided the following four classes.
33306>>>>>>>>>//
33306>>>>>>>>>//  ValidationTable is an Array
33306>>>>>>>>>//           Provides simple one dimensional table support. The table must be
33306>>>>>>>>>//           loaded manually by creating fill_list and sending the message
33306>>>>>>>>>//           Add_Table_Value (send Add_Table_Value Value). If list is static
33306>>>>>>>>>//           it is filled once. If non-static it is filled each time it is
33306>>>>>>>>>//           requested to validate or fill a foreign lis.
33306>>>>>>>>>//
33306>>>>>>>>>//  DescriptionValidationTable is a ValidationTable
33306>>>>>>>>>//           Provides a more complex three dimension array allowing the
33306>>>>>>>>>//           object to store a data value, description value and a record
33306>>>>>>>>>//           number. The developer must fill this list using the Add_table_
33306>>>>>>>>>//           value message passing up to three values (data, desc, record).
33306>>>>>>>>>//
33306>>>>>>>>>//  FileValidationTable is a DescriptionValidationTable
33306>>>>>>>>>//           Provides a data aware table. This can be used to load data from
33306>>>>>>>>>//           data-files, from data-sets. If you use data-sets you can place
33306>>>>>>>>>//           constraints within the data-set. You must define the file-number,
33306>>>>>>>>>//           data-set (if any), the file index, the file's data field, and
33306>>>>>>>>>//           the file's description field. You can also define an optional
33306>>>>>>>>>//           "Type". All records are constrained to this type (with or with-
33306>>>>>>>>>//           data-sets). If is assumed that this file has an optimized finding
33306>>>>>>>>>//           index.
33306>>>>>>>>>//
33306>>>>>>>>>//  CodeValidationTable is a FileValidationTable
33306>>>>>>>>>//           Used for Code lists. Simply set Type_Value to the "type"
33306>>>>>>>>>//
33306>>>>>>>>>Use VDFBase.pkg
33306>>>>>>>>>
33306>>>>>>>>>
33306>>>>>>>>>Class ValidationTable is an Array
33307>>>>>>>>>    
33307>>>>>>>>>    Procedure Construct_Object
33309>>>>>>>>>        Forward Send Construct_Object
33311>>>>>>>>>        Property Integer Static_State        True
33312>>>>>>>>>        
33312>>>>>>>>>        Property Integer Table_Loaded_State  False
33313>>>>>>>>>        
33313>>>>>>>>>        Property Integer Validate_State      True
33314>>>>>>>>>        Property Integer Allow_Blank_State   False
33315>>>>>>>>>        Property Integer Main_File           0
33316>>>>>>>>>        Property String  Table_Title         DD_VALIDATION_LIST_TITLE
33317>>>>>>>>>        
33317>>>>>>>>>        Property Integer Number_Elements     1
33318>>>>>>>>>        
33318>>>>>>>>>        // System maintained. Sub-classes use these
33318>>>>>>>>>        // These are SET by Next_Code_Record. You may GET their values
33318>>>>>>>>>        
33318>>>>>>>>>        Property String  Current_Code            ''
33319>>>>>>>>>        
33319>>>>>>>>>        Property String  Current_Description     ''
33320>>>>>>>>>        
33320>>>>>>>>>        Property RowID Current_RowId
33321>>>>>>>>>    End_Procedure
33322>>>>>>>>>    
33322>>>>>>>>>    Function Data_Item_Count Returns Integer
33324>>>>>>>>>        Function_Return (Item_Count(Self))
33325>>>>>>>>>    End_Function
33326>>>>>>>>>    
33326>>>>>>>>>    Function Data_Value Integer iItem Returns String
33328>>>>>>>>>        Function_Return (Value(Self,iItem))
33329>>>>>>>>>    End_Function
33330>>>>>>>>>    
33330>>>>>>>>>    Procedure Set Data_Value Integer iItem String sValue
33332>>>>>>>>>        Set Value  iItem to sValue
33333>>>>>>>>>    End_Procedure
33334>>>>>>>>>    
33334>>>>>>>>>    Function Data_Description Integer iItem Returns String
33336>>>>>>>>>        Function_Return ''
33337>>>>>>>>>    End_Function
33338>>>>>>>>>    
33338>>>>>>>>>    Procedure Set Data_Description Integer iItem String sValue
33340>>>>>>>>>    End_Procedure
33341>>>>>>>>>    
33341>>>>>>>>>    Function Data_RowId Integer iItem Returns RowID
33343>>>>>>>>>        Function_Return (NullRowId())
33344>>>>>>>>>    End_Function
33345>>>>>>>>>    
33345>>>>>>>>>    Procedure Set Data_RowId Integer iItem RowID riValue
33347>>>>>>>>>    End_Procedure
33348>>>>>>>>>    
33348>>>>>>>>>    
33348>>>>>>>>>    Procedure Add_Table_Value String sValue
33350>>>>>>>>>        Set Data_Value  (Data_Item_Count(Self)) to sValue
33351>>>>>>>>>    End_Procedure
33352>>>>>>>>>    
33352>>>>>>>>>    Function Validate_Value String sCode Returns Integer
33354>>>>>>>>>        Integer iMax
33354>>>>>>>>>        Integer iCnt
33354>>>>>>>>>        If (sCode = '');            Function_Return (not(Allow_Blank_State(Self)))
33357>>>>>>>>>        If (Table_Loaded_State(Self)=0 or Static_State(Self)=0) Begin
33359>>>>>>>>>            Send Delete_Data
33360>>>>>>>>>            Send Fill_list
33361>>>>>>>>>            Set Table_Loaded_State to True
33362>>>>>>>>>        End
33362>>>>>>>>>>
33362>>>>>>>>>        Get Data_Item_Count to iMax
33363>>>>>>>>>        Decrement iMax
33364>>>>>>>>>        For iCnt from 0 to iMax
33370>>>>>>>>>>
33370>>>>>>>>>            If (sCode=Data_Value(Self,iCnt)) Begin
33372>>>>>>>>>                Set Current_Code        to sCode
33373>>>>>>>>>                Set Current_Description to (Data_Description(Self,iCnt))
33374>>>>>>>>>                Set Current_RowId       to (Data_RowId(Self,iCnt))
33375>>>>>>>>>                Function_Return 0
33376>>>>>>>>>            End
33376>>>>>>>>>>
33376>>>>>>>>>        Loop
33377>>>>>>>>>>
33377>>>>>>>>>        Function_Return 1 // 0=OK
33378>>>>>>>>>    End_Function
33379>>>>>>>>>    
33379>>>>>>>>>    Function Find_Code_Description String sCode Returns String
33381>>>>>>>>>        If (sCode='' or ;            (sCode<>Current_Code(Self) and ;            Validate_Value(Self,sCode) ) );            Function_Return ''
33384>>>>>>>>>        Function_Return (Current_Description(Self))
33385>>>>>>>>>    End_Function
33386>>>>>>>>>    
33386>>>>>>>>>    
33386>>>>>>>>>    //  The deveveloper (or a sub-class) must fill this list. It is done
33386>>>>>>>>>    //  by finding the item and sending the Message:
33386>>>>>>>>>    //    Send Add_Table_Value sValue {sDescr}
33386>>>>>>>>>    //
33386>>>>>>>>>    Procedure Fill_List
33388>>>>>>>>>        Set Table_Loaded_State to True
33389>>>>>>>>>    End_Procedure
33390>>>>>>>>>    
33390>>>>>>>>>    Procedure Request_Fill_From_List Integer iObj Integer iMsg
33392>>>>>>>>>        Integer iMax
33392>>>>>>>>>        Integer iCnt
33392>>>>>>>>>        Integer iFile
33392>>>>>>>>>        
33392>>>>>>>>>        If (iObj=0 or iMsg=0) ;            Procedure_Return
33395>>>>>>>>>        
33395>>>>>>>>>        If (Table_Loaded_State(Self)=0 or Static_State(Self)=0) Begin
33397>>>>>>>>>            Send Delete_Data
33398>>>>>>>>>            Send Fill_list
33399>>>>>>>>>            Set Table_Loaded_State to True
33400>>>>>>>>>        End
33400>>>>>>>>>>
33400>>>>>>>>>        Get Main_File to iFile
33401>>>>>>>>>        Get Data_Item_Count to iMax
33402>>>>>>>>>        Decrement iMax
33403>>>>>>>>>        For iCnt from 0 to iMax
33409>>>>>>>>>>
33409>>>>>>>>>            Send iMsg to iObj iCnt (Data_Value(Self,iCnt)) ;                (Data_Description(Self,iCnt)) iFile ;                (Data_RowId(Self,iCnt))
33410>>>>>>>>>        Loop
33411>>>>>>>>>>
33411>>>>>>>>>    End_Procedure
33412>>>>>>>>>    
33412>>>>>>>>>    
33412>>>>>>>>>    // returns all data in a two dimension variant array.
33412>>>>>>>>>    // [i][0] = data
33412>>>>>>>>>    // [i][1] = description
33412>>>>>>>>>    // This can be used by Crystal CDO classes (this is why a variant array is used)
33412>>>>>>>>>    Function TableData Returns Variant[][]
33414>>>>>>>>>        Variant[][2] vData
33415>>>>>>>>>        Integer iMax i
33415>>>>>>>>>        If (Table_Loaded_State(Self)=0 or Static_State(Self)=0) Begin
33417>>>>>>>>>            Send Delete_Data
33418>>>>>>>>>            Send Fill_list
33419>>>>>>>>>            Set Table_Loaded_State to True
33420>>>>>>>>>        End
33420>>>>>>>>>>
33420>>>>>>>>>        Get Data_Item_Count to iMax
33421>>>>>>>>>        For i from 0 to (iMax-1)
33427>>>>>>>>>>
33427>>>>>>>>>            Get Data_Value       i to vData[i][0]
33428>>>>>>>>>            Get Data_Description i to vData[i][1]
33429>>>>>>>>>        Loop
33430>>>>>>>>>>
33430>>>>>>>>>        Function_Return vData
33431>>>>>>>>>    End_Function
33432>>>>>>>>>    
33432>>>>>>>>>End_Class
33433>>>>>>>>>
33433>>>>>>>>>
33433>>>>>>>>>
33433>>>>>>>>>Class DescriptionValidationTable is an ValidationTable
33434>>>>>>>>>    
33434>>>>>>>>>    Procedure Construct_Object
33436>>>>>>>>>        Forward Send Construct_Object
33438>>>>>>>>>        Set Number_Elements to 2
33439>>>>>>>>>    End_Procedure
33440>>>>>>>>>    
33440>>>>>>>>>    Function Data_Item_Count Returns Integer
33442>>>>>>>>>        Function_Return (item_count(Self)/3)
33443>>>>>>>>>    End_Function
33444>>>>>>>>>    
33444>>>>>>>>>    Function Data_Value Integer iItem Returns String
33446>>>>>>>>>        Function_Return (Value(Self,iItem*3))
33447>>>>>>>>>    End_Function
33448>>>>>>>>>    
33448>>>>>>>>>    Procedure Set Data_Value Integer iItem String sValue
33450>>>>>>>>>        Set Value  (iItem*3) to sValue
33451>>>>>>>>>    End_Procedure
33452>>>>>>>>>    
33452>>>>>>>>>    Function Data_Description Integer iItem Returns String
33454>>>>>>>>>        Function_Return (Value(Self,iItem*3+1))
33455>>>>>>>>>    End_Function
33456>>>>>>>>>    
33456>>>>>>>>>    Procedure Set Data_Description Integer iItem String sValue
33458>>>>>>>>>        Set Value  (iItem*3+1) to sValue
33459>>>>>>>>>    End_Procedure
33460>>>>>>>>>    
33460>>>>>>>>>    Function Data_RowId Integer iItem Returns RowID
33462>>>>>>>>>        String sRowId
33462>>>>>>>>>        Get Value (iItem*3+2) to sRowId
33463>>>>>>>>>        Function_Return (DeSerializeRowId(sRowId))
33464>>>>>>>>>    End_Function
33465>>>>>>>>>    
33465>>>>>>>>>    Procedure Set Data_RowId Integer iItem RowID riValue
33467>>>>>>>>>        Set Value  (iItem*3+2) to (SerializeRowId(riValue))
33468>>>>>>>>>    End_Procedure
33469>>>>>>>>>    
33469>>>>>>>>>    Procedure Add_Table_Value String sData String sDescr RowID riRec
33471>>>>>>>>>        String  sVal
33471>>>>>>>>>        RowID   riRecVal
33471>>>>>>>>>        Integer iCnt
33471>>>>>>>>>        Get Data_Item_Count to iCnt
33472>>>>>>>>>        Set Data_Value iCnt to sData
33473>>>>>>>>>        
33473>>>>>>>>>        // If one param passed use it for both display and database values
33473>>>>>>>>>        If (num_arguments <= 1);            Move sData  to sVal
33476>>>>>>>>>        Else ;            Move sDescr to sVal
33478>>>>>>>>>        Set Data_Description iCnt to sVal
33479>>>>>>>>>        
33479>>>>>>>>>        If (num_arguments <= 2) ;            Move (NullRowId()) to riRecVal
33482>>>>>>>>>        Else ;            Move riRec        to riRecVal
33484>>>>>>>>>        Set Data_RowId iCnt to riRecVal
33485>>>>>>>>>    End_Procedure
33486>>>>>>>>>End_Class
33487>>>>>>>>>
33487>>>>>>>>>
33487>>>>>>>>>Class FileValidationTable is an DescriptionValidationTable
33488>>>>>>>>>    
33488>>>>>>>>>    Procedure Construct_Object
33490>>>>>>>>>        Forward Send Construct_Object
33492>>>>>>>>>        Property Integer No_Fill_State     False // this is never used and is obsolete. (JJT)
33493>>>>>>>>>        Property Integer Ordering          1   // Indx1 is a good guess.
33494>>>>>>>>>        Property String  Type_Value        ''  // default these two to
33495>>>>>>>>>        Property Integer Type_Field        0   // Undefined (none).
33496>>>>>>>>>        Property Integer Code_Field        1   // Fld 1=code, 2=descr
33497>>>>>>>>>        Property Integer Description_Field 2   // are good guesses.
33498>>>>>>>>>        
33498>>>>>>>>>        Property Integer Code_Load_Object  0   // or (Code_Loader(Self))
33499>>>>>>>>>    End_Procedure
33500>>>>>>>>>    
33500>>>>>>>>>    Function Table_Loaded_State Returns Integer
33502>>>>>>>>>        Integer iRVal
33502>>>>>>>>>        Get No_fill_State to iRVal // if true, table always is loaded
33503>>>>>>>>>        If not iRval ;            Forward Get table_loaded_State to iRVal
33507>>>>>>>>>        Function_Return iRval
33508>>>>>>>>>    End_Function
33509>>>>>>>>>    
33509>>>>>>>>>    Function Validate_Value String sCode Returns Integer
33511>>>>>>>>>        Integer iRVal
33511>>>>>>>>>        Integer iDSO
33511>>>>>>>>>        Get Code_Load_Object  to iDSO
33512>>>>>>>>>        // we use standard validate, if code is blank, OR if
33512>>>>>>>>>        //   1. if no code DSO or the code DSO exists but is not busy.
33512>>>>>>>>>        //   2. AND it is not no-fill
33512>>>>>>>>>        //   3. AND it is static
33512>>>>>>>>>        // Else we find the record directly
33512>>>>>>>>>        // Note that the operation mode is busy during request_validate (the
33512>>>>>>>>>        // ddo does this). WHen operation mode is busy we must not use
33512>>>>>>>>>        // the code dso (must find manually).
33512>>>>>>>>>        If (sCode='' or ;            ( (iDSO=0 or Operation_Mode=0)    and ; // if no code DSO or DSO not busy            No_Fill_State(Self)=0 and ;            Static_State(Self) ) ) ;            Forward Get Validate_Value sCode to iRVal
33516>>>>>>>>>        Else If (sCode<>Current_Code(Self)) ;            Get Find_Value sCode to iRVal
33520>>>>>>>>>        Function_Return iRVal // OK
33521>>>>>>>>>    End_Function
33522>>>>>>>>>    
33522>>>>>>>>>    Procedure Initialize_File
33524>>>>>>>>>        Integer iFile iCodeField iDescField iDSO iIndex iTypeField
33524>>>>>>>>>        Get Code_Load_Object  to iDSO
33525>>>>>>>>>        Get Main_File         to iFile
33526>>>>>>>>>        Get Code_Field        to iCodeField
33527>>>>>>>>>        Get Description_Field to iDescField
33528>>>>>>>>>        Get Ordering          to iIndex
33529>>>>>>>>>        Get Type_Field        to iTypeField
33530>>>>>>>>>        If (iDSO and Operation_Mode=0) ;            Send Initialize_File to iDSO ;            iFile iIndex iCodeField iDescField ;            iTypeField (Type_Value(Self))
33533>>>>>>>>>        Else Begin
33534>>>>>>>>>            Clear iFile
33535>>>>>>>>>            // if Type exists, seed the type value
33535>>>>>>>>>            If iTypeField ;                Set_Field_Value iFile iTypeField to (Type_Value(Self))
33540>>>>>>>>>        End
33540>>>>>>>>>>
33540>>>>>>>>>    End_Procedure
33541>>>>>>>>>    
33541>>>>>>>>>    Function Find_Value String Code Returns Integer
33543>>>>>>>>>        Integer iFile iCodeField iDescField iDSO iIndex iTypeField
33543>>>>>>>>>        Get Code_Load_Object  to iDSO
33544>>>>>>>>>        Get Main_File         to iFile
33545>>>>>>>>>        Get Ordering          to iIndex
33546>>>>>>>>>        Get Code_Field        to iCodeField
33547>>>>>>>>>        Get Description_Field to iDescField
33548>>>>>>>>>        Get Type_Field        to iTypeField
33549>>>>>>>>>        Send Initialize_File
33550>>>>>>>>>        //
33550>>>>>>>>>        Set_Field_Value iFile iCodeField to Code
33553>>>>>>>>>        If (iDSO and Operation_Mode=0) ;            Send Request_Find to iDSO EQ iFile iIndex
33556>>>>>>>>>        Else ;            Vfind iFile iIndex EQ
33559>>>>>>>>>        If not (Found) ;            Function_Return 1
33562>>>>>>>>>        // Set properties Current_code and Current_Description
33562>>>>>>>>>        Send Store_Current_Data iFile iCodeField iDescField
33563>>>>>>>>>        Function_Return 0
33564>>>>>>>>>    End_Function
33565>>>>>>>>>    
33565>>>>>>>>>    // internal
33565>>>>>>>>>    Procedure Store_Current_Data Integer iFile Integer iCodeField Integer iDescField
33567>>>>>>>>>        String sVal
33567>>>>>>>>>        Get_Field_Value iFile iCodeField to sVal
33570>>>>>>>>>        Set Current_Code to (trim(sVal))
33571>>>>>>>>>        If iDescField Begin
33573>>>>>>>>>            Get_Field_Value iFile iDescField to sVal
33576>>>>>>>>>            Set Current_Description to (trim(sVal))
33577>>>>>>>>>        End
33577>>>>>>>>>>
33577>>>>>>>>>        Set Current_RowId to (GetRowId(iFile))
33578>>>>>>>>>    End_Procedure
33579>>>>>>>>>    
33579>>>>>>>>>    Function Next_Code_Record Returns Boolean
33581>>>>>>>>>        Integer iFile iCodeField iDescField iIndex
33581>>>>>>>>>        Integer iTypeField
33581>>>>>>>>>        String sTypeValue sFoundTypeValue
33581>>>>>>>>>        Boolean bFound
33581>>>>>>>>>        Handle hoDSO
33581>>>>>>>>>        Get Code_Load_Object  to hoDSO
33582>>>>>>>>>        Get Description_Field to iDescField
33583>>>>>>>>>        Get Code_Field        to iCodeField
33584>>>>>>>>>        Get Main_File         to iFile
33585>>>>>>>>>        
33585>>>>>>>>>        If hoDSO Begin
33587>>>>>>>>>            Get Next_Code_record of hoDSO to bFound
33588>>>>>>>>>        End
33588>>>>>>>>>>
33588>>>>>>>>>        Else Begin
33589>>>>>>>>>            Get Ordering to iIndex
33590>>>>>>>>>            Vfind iFile iIndex GT
33592>>>>>>>>>            Move (Found) to bFound
33593>>>>>>>>>            If bFound Begin
33595>>>>>>>>>                // if found see if we are at the end of the valid list of types
33595>>>>>>>>>                Get Type_Field to iTypeField
33596>>>>>>>>>                Get Type_Value to sTypeValue
33597>>>>>>>>>                If ((iTypeField<>0) and (sTypeValue<>"")) Begin
33599>>>>>>>>>                    Get_Field_Value iFile iTypeField to sFoundTypeValue
33602>>>>>>>>>                    Move (Trim(sTypeValue)=Trim(sFoundTypeValue)) to bFound
33603>>>>>>>>>                End
33603>>>>>>>>>>
33603>>>>>>>>>            End
33603>>>>>>>>>>
33603>>>>>>>>>        End
33603>>>>>>>>>>
33603>>>>>>>>>        If bFound Begin
33605>>>>>>>>>            Send Store_Current_Data iFile iCodeField iDescField
33606>>>>>>>>>        End
33606>>>>>>>>>>
33606>>>>>>>>>        Function_Return bFound
33607>>>>>>>>>    End_Function
33608>>>>>>>>>    
33608>>>>>>>>>    Procedure Fill_List
33610>>>>>>>>>        RowID riId
33610>>>>>>>>>        Boolean bFound
33610>>>>>>>>>        String sCode sDesc
33610>>>>>>>>>        If (Static_State(Self)=0 or No_Fill_State(Self)) ;            Procedure_Return
33613>>>>>>>>>        //
33613>>>>>>>>>        Send Delete_Data
33614>>>>>>>>>        Send Initialize_File
33615>>>>>>>>>        Get Next_Code_Record to bFound
33616>>>>>>>>>        While bFound
33620>>>>>>>>>            Get Current_Code        to sCode
33621>>>>>>>>>            Get Current_Description to sDesc
33622>>>>>>>>>            Get Current_RowId       to riId
33623>>>>>>>>>            Send Add_Table_Value sCode sDesc riId
33624>>>>>>>>>            Get Next_Code_Record to bFound
33625>>>>>>>>>        Loop
33626>>>>>>>>>>
33626>>>>>>>>>        Set Table_Loaded_State to True
33627>>>>>>>>>    End_Procedure
33628>>>>>>>>>    
33628>>>>>>>>>    Procedure Request_Fill_From_List Integer iObj Integer iMsg
33630>>>>>>>>>        Integer iItem
33630>>>>>>>>>        Integer iFile
33630>>>>>>>>>        RowID   riId
33630>>>>>>>>>        Boolean bFound
33630>>>>>>>>>        String sCode sDesc
33630>>>>>>>>>        
33630>>>>>>>>>        If (iObj=0 or iMsg=0) ;            Procedure_Return
33633>>>>>>>>>        
33633>>>>>>>>>        If (Static_State(Self) and No_Fill_State(Self)=0 ) ;            Forward Send Request_Fill_From_List iObj iMsg
33637>>>>>>>>>        Else Begin
33638>>>>>>>>>            Get Main_File to iFile
33639>>>>>>>>>            Send Initialize_File
33640>>>>>>>>>            Get Next_Code_Record to bFound
33641>>>>>>>>>            While bFound
33645>>>>>>>>>                Get Current_Code        to sCode
33646>>>>>>>>>                Get Current_Description to sDesc
33647>>>>>>>>>                Get Current_RowId       to riId
33648>>>>>>>>>                Send iMSG to iObj iItem sCode sDesc iFile riId
33649>>>>>>>>>                Increment iItem
33650>>>>>>>>>                Get Next_Code_Record to bFound
33651>>>>>>>>>            Loop
33652>>>>>>>>>>
33652>>>>>>>>>        End
33652>>>>>>>>>>
33652>>>>>>>>>    End_Procedure
33653>>>>>>>>>End_Class
33654>>>>>>>>>
33654>>>>>>>>>Use CodeLoad.pkg
Including file: codeload.pkg    (C:\Program Files\DataFlex 24.0\Pkg\codeload.pkg)
33654>>>>>>>>>>>// Interface:
33654>>>>>>>>>>>//
33654>>>>>>>>>>>//  Procedure Initialize_File Integer File# Integer Index# Integer Code# ;
33654>>>>>>>>>>>//                            Integer Desc# Integer Type# String Type
33654>>>>>>>>>>>//
33654>>>>>>>>>>>//      This initializes the data-set for finding. You MUST pass all five
33654>>>>>>>>>>>//      parameters here. They are:
33654>>>>>>>>>>>//          File#  -  main file to use
33654>>>>>>>>>>>//         Index#  - Index to use for finding
33654>>>>>>>>>>>//          Code#  - field number of the code
33654>>>>>>>>>>>//          Desc#  - field number of the code's description
33654>>>>>>>>>>>//          Type#  - field number of the constraining Type (0 if none)
33654>>>>>>>>>>>//           Type  - the constrain type value ('' = allow all records)
33654>>>>>>>>>>>//
33654>>>>>>>>>>>//      You MUST send this message before finding records. Alternately,
33654>>>>>>>>>>>//      you could set the individual properties and send rebuild_constraints
33654>>>>>>>>>>>//      and CLEAR to initalize the file (see code on how to do this).
33654>>>>>>>>>>>//
33654>>>>>>>>>>>//    Get Next_Code_record to ret_Int
33654>>>>>>>>>>>//
33654>>>>>>>>>>>//      Returns the next record number. 0 if no more. If record exists it
33654>>>>>>>>>>>//      sets the value of Current_Code and Crnt_Description.
33654>>>>>>>>>>>//
33654>>>>>>>>>>>//    Get Current_Code to Ret_String
33654>>>>>>>>>>>//    Get Crnt_Description to Ret_String
33654>>>>>>>>>>>//
33654>>>>>>>>>>>//      Returns the code and description of the last valid record found
33654>>>>>>>>>>>//      with the Next_Code_Record Message
33654>>>>>>>>>>>//
33654>>>>>>>>>>>//   Sample Usage:  This was created primarily to be used by the
33654>>>>>>>>>>>//                  radio-entry-form classes. In particular those using
33654>>>>>>>>>>>//                  the "code" look up file. Look at those packages if
33654>>>>>>>>>>>//                  you wish to use them yourself.
33654>>>>>>>>>>>//
33654>>>>>>>>>>>Use Data_Set.pkg
33654>>>>>>>>>>>
33654>>>>>>>>>>>Class Code_Loader_Data_Set is a DataSet
33655>>>>>>>>>>>    
33655>>>>>>>>>>>    Procedure Construct_Object Integer Img#
33657>>>>>>>>>>>        Forward Send Construct_Object Img#
33659>>>>>>>>>>>        // These should be set by the Initialize_File message
33659>>>>>>>>>>>        Property String  Type_Value           '' // assume no defaults.
33660>>>>>>>>>>>        Property Integer Type_Field           0  // These values should be
33661>>>>>>>>>>>        Property Integer Code_Field           0  // set by initialize_file
33662>>>>>>>>>>>        Property Integer Description_Field    0  //
33663>>>>>>>>>>>        
33663>>>>>>>>>>>        // These are SET by Next_Code_Record. You may GET their values
33663>>>>>>>>>>>        Property String  Current_Code         ''
33664>>>>>>>>>>>        Property String  Current_Description  ''
33665>>>>>>>>>>>    End_Procedure
33666>>>>>>>>>>>    
33666>>>>>>>>>>>    // If a Type exists (not a '') and there is a type field and a
33666>>>>>>>>>>>    // main_file constrain to the type. Else no constraints
33666>>>>>>>>>>>    Procedure OnConstrain
33668>>>>>>>>>>>        String sType
33668>>>>>>>>>>>        Integer iFile iField
33668>>>>>>>>>>>        Get Type_Value to sType
33669>>>>>>>>>>>        Get Main_File  to iFile
33670>>>>>>>>>>>        Get Type_Field to iField
33671>>>>>>>>>>>        If (sType<>'' and iFile<>0 and iField<>0) ;            Vconstrain iFile iField eq sType
33676>>>>>>>>>>>    End_Procedure
33677>>>>>>>>>>>    
33677>>>>>>>>>>>    //  This initializes the data-set for finding. You MUST pass all five
33677>>>>>>>>>>>    //  parameters here. They are:
33677>>>>>>>>>>>    //     File#  -  main file to use
33677>>>>>>>>>>>    //    Index#  - Index to use for finding
33677>>>>>>>>>>>    //     Code#  - field number of the code
33677>>>>>>>>>>>    //     Desc#  - field number of the code's description
33677>>>>>>>>>>>    //     Type#  - field number of the constraining Type (0 if none)
33677>>>>>>>>>>>    //      Type  - the constrain type value ('' = allow all records)
33677>>>>>>>>>>>    //
33677>>>>>>>>>>>    Procedure Initialize_File Integer File# Integer Index# Integer Code# ;            Integer Desc# Integer Type# String Type
33679>>>>>>>>>>>        // note: all params are required!
33679>>>>>>>>>>>        Set Main_File         to File#
33680>>>>>>>>>>>        Set Ordering          to Index#
33681>>>>>>>>>>>        Set Code_Field        to Code#
33682>>>>>>>>>>>        Set Description_Field to Desc#
33683>>>>>>>>>>>        Set Type_Field        to Type#
33684>>>>>>>>>>>        Set Type_Value        to Type
33685>>>>>>>>>>>        //
33685>>>>>>>>>>>        Send Rebuild_Constraints // set up constraints
33686>>>>>>>>>>>        Send Clear               // initialize the file
33687>>>>>>>>>>>    End_Procedure
33688>>>>>>>>>>>    
33688>>>>>>>>>>>    //  Find the next record: Return 0 if no record, 1 if record exists
33688>>>>>>>>>>>    //   if record exists set Current_Code and Current_Description
33688>>>>>>>>>>>    //
33688>>>>>>>>>>>    Function Next_Code_Record Returns Boolean
33690>>>>>>>>>>>        Integer iFile iField
33690>>>>>>>>>>>        String sValue
33690>>>>>>>>>>>        Send Request_Find GT (Main_File(Self)) (Ordering(Self))
33691>>>>>>>>>>>        If not (Found) ;            Function_Return False
33694>>>>>>>>>>>        // Set properties Current_code and Current_Description
33694>>>>>>>>>>>        Get Main_File to iFile
33695>>>>>>>>>>>        
33695>>>>>>>>>>>        Get Code_Field to iField
33696>>>>>>>>>>>        Get_Field_Value iFile iField to sValue
33699>>>>>>>>>>>        Set Current_Code to sValue
33700>>>>>>>>>>>        
33700>>>>>>>>>>>        Get Description_Field to iField
33701>>>>>>>>>>>        Get_Field_Value iFile iField to sValue
33704>>>>>>>>>>>        Set Current_Description to sValue
33705>>>>>>>>>>>        Function_Return True
33706>>>>>>>>>>>    End_Function
33707>>>>>>>>>>>    
33707>>>>>>>>>>>End_Class
33708>>>>>>>>>Use cCodeMaintOpen_Mixin.pkg
Including file: cCodeMaintOpen_Mixin.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCodeMaintOpen_Mixin.pkg)
33708>>>>>>>>>>>// Mixin class to support transistion support for CodeType and CodeMast files.
33708>>>>>>>>>>>// These files used to be in filelist and they used to reside at 207 and 208 and they
33708>>>>>>>>>>>// were always opened with "open as"
33708>>>>>>>>>>>// We want these to be in the filelist at 253 and 254. These open methods will attempt to open these files
33708>>>>>>>>>>>// as such. If these are old files (not in filelist or wrong number) they will get loaded with the old
33708>>>>>>>>>>>// open as - thus keeping this backwards compatible.
33708>>>>>>>>>>>// By adding to filelist, we can sort the files and we can open them as other database sources.
33708>>>>>>>>>>>Use VDFBase.pkg
33708>>>>>>>>>>>
33708>>>>>>>>>>>Declare_Datafile CodeType
Including file: CodeType.fd    (C:\Projects\DF20\DbUpdateFramework\DDSrc\CodeType.fd)
33708>>>>>>>>>>>Declare_Datafile CodeMast
Including file: CodeMast.fd    (C:\Projects\DF20\DbUpdateFramework\DDSrc\CodeMast.fd)
33708>>>>>>>>>>>Define C_Expected_CodeType_FileNumber for 253  // and the logical name must be CODETYPE
33708>>>>>>>>>>>Define C_Expected_CodeMast_FileNumber for 254  // and the logical name must be CODEMAST
33708>>>>>>>>>>>
33708>>>>>>>>>>>Class cCodeMaintOpen_Mixin is a Mixin
33709>>>>>>>>>>>    
33709>>>>>>>>>>>    Procedure OpenCodeMast
33711>>>>>>>>>>>        String sName
33711>>>>>>>>>>>        If (Codemast.File_number=C_Expected_CodeMast_FileNumber) Begin
33713>>>>>>>>>>>            Get_Attribute DF_FILE_LOGICAL_NAME of Codemast.File_number to sName
33716>>>>>>>>>>>            If (uppercase(trim(sName))="CODEMAST") Begin
33718>>>>>>>>>>>                Open CodeMast
33720>>>>>>>>>>>                Procedure_Return
33721>>>>>>>>>>>            End
33721>>>>>>>>>>>>
33721>>>>>>>>>>>        End
33721>>>>>>>>>>>>
33721>>>>>>>>>>>        Open "CodeMast" as Codemast.File_number
33723>>>>>>>>>>>    End_Procedure
33724>>>>>>>>>>>    
33724>>>>>>>>>>>    Procedure OpenCodeType
33726>>>>>>>>>>>        String sName
33726>>>>>>>>>>>        If (Codetype.File_number=C_Expected_CodeType_FileNumber) Begin
33728>>>>>>>>>>>            Get_Attribute DF_FILE_LOGICAL_NAME of CodeType.File_number to sName
33731>>>>>>>>>>>            If (uppercase(trim(sName))="CODETYPE") Begin
33733>>>>>>>>>>>                Open CodeType
33735>>>>>>>>>>>                Procedure_Return
33736>>>>>>>>>>>            End
33736>>>>>>>>>>>>
33736>>>>>>>>>>>        End
33736>>>>>>>>>>>>
33736>>>>>>>>>>>        Open "CodeType" as CodeType.File_number
33738>>>>>>>>>>>    End_Procedure
33739>>>>>>>>>>>    
33739>>>>>>>>>>>End_Class
33740>>>>>>>>>
33740>>>>>>>>>//
33740>>>>>>>>>//  This is the object we need for loading files.
33740>>>>>>>>>//
33740>>>>>>>>>Object Code_loader is a Code_loader_Data_Set no_Image
33742>>>>>>>>>End_Object
33743>>>>>>>>>
33743>>>>>>>>>
33743>>>>>>>>>Class CodeValidationTable is an FileValidationTable
33744>>>>>>>>>    
33744>>>>>>>>>    // supports opening of file in reserved filelist area.
33744>>>>>>>>>    Import_Class_Protocol cCodeMaintOpen_Mixin
33745>>>>>>>>>    
33745>>>>>>>>>    Procedure Construct_Object
33747>>>>>>>>>        Forward Send Construct_Object
33749>>>>>>>>>        
33749>>>>>>>>>        Send OpenCodeMast                       // methods supports w/ filelist (new) and without (old)
33750>>>>>>>>>        
33750>>>>>>>>>        Set Main_File to CodeMast.File_Number   // name of file is CODEMAST
33751>>>>>>>>>        Set Ordering to 1                       // Index 1: Types x Code
33752>>>>>>>>>        Set Type_Field to 1                     // Fld 1: Type
33753>>>>>>>>>        Set Code_Field to 2                     // Fld 2: Code
33754>>>>>>>>>        Set Description_Field to 3              // Fld 3: Description
33755>>>>>>>>>        Set Code_load_Object to (Code_Loader(Self))
33756>>>>>>>>>    End_Procedure
33757>>>>>>>>>    
33757>>>>>>>>>End_Class
33758>>>>>>>
33758>>>>>>>// Used to by DDOConstraintFindMeta to return constraint expression info in a friendlier fashion
33758>>>>>>>Struct tDDOConstraintFindMeta
33758>>>>>>>    Integer iJumpInSegments
33758>>>>>>>    Boolean bJumpOut
33758>>>>>>>    Boolean bPreRelate
33758>>>>>>>    Boolean bPostRelate
33758>>>>>>>End_Struct
33758>>>>>>>
33758>>>>>>>// used by webapp resynchs
33758>>>>>>>Struct tDDChangedParentInfo
33758>>>>>>>    Integer iTable
33758>>>>>>>    Boolean bSwitched
33758>>>>>>>End_Struct
33758>>>>>>>
33758>>>>>>>// used by webapp resynchs
33758>>>>>>>Struct tDDChangedInfo
33758>>>>>>>    Boolean bChanged
33758>>>>>>>    tDDChangedParentInfo[] ParentChanged
33758>>>>>>>    tDDChangedParentInfo[] ParentChanged
33758>>>>>>>End_Struct
33758>>>>>>>
33758>>>>>>>Enum_List
33758>>>>>>>    Define CONST_EXP_JUMPOUT     for 1
33758>>>>>>>    Define CONST_EXP_PRE_RELATE  for 2
33758>>>>>>>    Define CONST_EXP_POST_RELATE for 4
33758>>>>>>>End_Enum_List
33758>>>>>>>
33758>>>>>>>// Constraint Find Types
33758>>>>>>>Enum_List
33758>>>>>>>    Define CONST_VALUE for 0    // Constrain File.Field eq sValue
33758>>>>>>>    Define CONST_CHILD          // Constrain File Relates to iOtherFile
33758>>>>>>>    Define CONST_FIELD          // Constrain File.field eq OtherFile.OtherField
33758>>>>>>>    Define CONST_EXP            // Constrain File as (Expression) - expression is internal
33758>>>>>>>    Define CONST_RELATES        // Sames a CONST_CHILD - should never be used
33758>>>>>>>End_Enum_List
33758>>>>>>>
33758>>>>>>>// Constraint Find Modes
33758>>>>>>>Enum_List
33758>>>>>>>    Define CONST_LT for 0
33758>>>>>>>    Define CONST_LE for 1
33758>>>>>>>    Define CONST_EQ for 2
33758>>>>>>>    Define CONST_GE for 3
33758>>>>>>>    Define CONST_GT for 4
33758>>>>>>>    Define CONST_NE for 5
33758>>>>>>>    Define CONST_Matches for 6       // a matches not capable of a jump in e.g., "?A*"
33758>>>>>>>    Define CONST_Contains for 7      // a contains
33758>>>>>>>    Define CONST_MatchesJumpIn for 9 // a matches which is capable of a jump in e.g., "A*"
33758>>>>>>>    // note that BETWEEN is actually two constraints a GE and LE
33758>>>>>>>End_Enum_List
33758>>>>>>>
33758>>>>>>>// Struct used to DDOConstraints to return current constraints in an array
33758>>>>>>>Struct tConstraintDef
33758>>>>>>>    Integer eType // constraint Find type
33758>>>>>>>    Integer eMode // constrain file mode
33758>>>>>>>    Integer iFile
33758>>>>>>>    Integer iField
33758>>>>>>>    String sValue
33758>>>>>>>    Integer iOtherFile
33758>>>>>>>    Integer iOtherField
33758>>>>>>>End_Struct
33758>>>>>>>
33758>>>>>>>// values passed to OnPre/PostFind to indicate the operation type
33758>>>>>>>Enum_List
33758>>>>>>>    Define DDFindRequestFind    // request_find
33758>>>>>>>    Define DDFindFindByRowRec   // FindByRowId, Find_By_Recnum
33758>>>>>>>    Define DDFindRequestAssign  // Request_assign
33758>>>>>>>    Define DDFindClear          // Clear (note Clear_All doesn't do this)
33758>>>>>>>End_Enum_List
33758>>>>>>>
33758>>>>>>>
33758>>>>>>>// these are private
33758>>>>>>>Define DD_RememberLast for "_REMEMBER$LAST_"
33758>>>>>>>Use tDDRemembered.pkg
Including file: tDDRemembered.pkg    (C:\Program Files\DataFlex 24.0\Pkg\tDDRemembered.pkg)
33758>>>>>>>>>// DDRemember Struct used for DataDictionary Class
33758>>>>>>>>>
33758>>>>>>>>>// private
33758>>>>>>>>>
33758>>>>>>>>>Struct tDDRemembered
33758>>>>>>>>>    Integer iField // searches are performed on this segement - it must be first
33758>>>>>>>>>    String sDefault
33758>>>>>>>>>    String sLastValue
33758>>>>>>>>>End_Struct
33758>>>>>>>>>
33758>>>>>>>
33758>>>>>>>// Used to assign a global validation_object. This can be used for
33758>>>>>>>// automatic prompt object on non-relational validations (checks, validation_
33758>>>>>>>// tables, etc.)
33758>>>>>>>Integer DD_Global_Validation_Prompt_Object
33758>>>>>>>Move 0 to DD_Global_Validation_Prompt_Object
33759>>>>>>>
33759>>>>>>>// Used for Dso traversal marking - Private (do not use)
33759>>>>>>>Integer   DD_Current_Mark_Id
33759>>>>>>>Move 0 to DD_Current_Mark_Id
33760>>>>>>>
33760>>>>>>>// Used to validate DSO structures during Save and deletes
33760>>>>>>>Enumeration_List
33760>>>>>>>    Define DD_VALIDATE_STRUCTURE_ALWAYS // Validate each save/delete operation.
33760>>>>>>>    Define DD_VALIDATE_STRUCTURE_NEVER  // Never validate these operations.
33760>>>>>>>    Define DD_VALIDATE_STRUCTURE_ONCE   // Validate Once (first save or delete).
33760>>>>>>>End_Enumeration_List
33760>>>>>>>
33760>>>>>>>// Used as a start for error handing in DSOs. Only affects errors that go
33760>>>>>>>// through operation_not_allowed and Field_Error. Used by Error_Report_Mode
33760>>>>>>>Enumeration_List
33760>>>>>>>    Define DD_ERROR_REPORT              // Report Error on screen
33760>>>>>>>    Define DD_ERROR_NO_REPORT           // Show no Error..
33760>>>>>>>End_Enumeration_List
33760>>>>>>>
33760>>>>>>>Enumeration_List
33760>>>>>>>    Define DD_Lock_on_All             for  7  // 111
33760>>>>>>>    Define DD_Lock_on_New_Save_Delete for  5  // 101
33760>>>>>>>    Define DD_Lock_on_Delete          for  4  // 100
33760>>>>>>>    Define DD_Lock_on_Save            for  2  // 010
33760>>>>>>>    Define DD_Lock_on_New_Save        for  1  // 001
33760>>>>>>>End_Enumeration_List
33760>>>>>>>
33760>>>>>>>
33760>>>>>>>Define DD_DEFAULT_ERROR_NUMBER  for 999
33760>>>>>>>
33760>>>>>>>
33760>>>>>>>
33760>>>>>>>
33760>>>>>>>// The next replaces will be used to indicate default item-options
33760>>>>>>>// instead of a fieldnumber which is normally used.
33760>>>>>>>
33760>>>>>>>// these are the DD bits that pertain to DEO Item options.
33760>>>>>>>Define DD_DEO_MASK for (DD_NOENTER ior DD_SKIPFOUND ior DD_CAPSLOCK ior DD_ZERO_SUPPRESS ior DD_AUTORETURN ior DD_AUTOBACK ior DD_AUTOCLEAR)
33760>>>>>>>
33760>>>>>>>
33760>>>>>>>// Special parameter options that can get passed to Set Field_Options. The
33760>>>>>>>// purpose is to clear all fields or the remaining passed parameters. Normally,
33760>>>>>>>// these are not used so it does not matter if their interface is a bit odd.
33760>>>>>>>Enumeration_List
33760>>>>>>>    Define DD_CLEAR_FIELD_OPTIONS      for -1
33760>>>>>>>    Define DD_CLEAR_ALL_FIELD_OPTIONS  for -2
33760>>>>>>>End_Enumeration_List
33760>>>>>>>
33760>>>>>>>// used to keep track of extra server file information.
33760>>>>>>>Struct tDDServerInformation
33760>>>>>>>    Integer iParent             // parent file number
33760>>>>>>>    Boolean bAllowNullParent    // does this DD (child) allow a null parent
33760>>>>>>>    Integer bParentNoSwitchIfCommitted // does this DD (child) allow switching committed parents
33760>>>>>>>    Boolean bNoCascadeDelete           // when a child record exists should cascade delete stop the action
33760>>>>>>>    Boolean bCascadeDeleteNullTheParent // when a child record exists that is null parent allowed, should we delete or null the parent
33760>>>>>>>End_Struct
33760>>>>>>>
33760>>>>>>>Use DDExtFld.pkg // adds extended field/pointer support
Including file: DDExtFld.pkg    (C:\Program Files\DataFlex 24.0\Pkg\DDExtFld.pkg)
33760>>>>>>>>>// This is used by the DataDictionary class and provides a method for
33760>>>>>>>>>// windows DDs (for now) to support local buffers for text and binary buffers.
33760>>>>>>>>>// Field objects are created within the DD by sending the message:
33760>>>>>>>>>// The DD interface is:
33760>>>>>>>>>//
33760>>>>>>>>>//      Get  Field_Object iField to hExtFieldObject
33760>>>>>>>>>//      Send DefineExtendedField iField
33760>>>>>>>>>//      Send DefineAllExtendedFields
33760>>>>>>>>>//      Send ExtendedFieldsUpdate bSave
33760>>>>>>>>>//      Send ExtendedFieldsRefresh bCleared
33760>>>>>>>>>//      Set  File_Field_Current_Pointer_Value iFile iField iLen to pValue
33760>>>>>>>>>//      Set  Field_Current_Pointer_Value iField iLen to pValue
33760>>>>>>>>>//      Set  File_Field_Pointer_Entry iFile iField iLen bShowErr to pValue
33760>>>>>>>>>//      Set  Field_Pointer_Entry iField iOpts iLen bShowErr to pValue
33760>>>>>>>>>//      Get  File_Field_Current_Pointer_Value iFile iField to pData
33760>>>>>>>>>//      Get  Field_Current_Pointer_Value iField to pData
33760>>>>>>>>>//
33760>>>>>>>>>// Once object is identified, the following interface can be used
33760>>>>>>>>>//      Get FieldPointer of hExtFieldObject to iMemoryPointer
33760>>>>>>>>>//      Get FieldLength  of hExtFieldObject to iLen
33760>>>>>>>>>//      Get File_Number  of hExtFieldObject to iFile
33760>>>>>>>>>//      Get Field_Number of hExtFieldObject to iFile
33760>>>>>>>>>//      Set Update_Save_State of hExtFieldObject to bState         // be careful!
33760>>>>>>>>>//      Set Update_Find_State of hExtFieldObject to bState         // be careful
33760>>>>>>>>>//      Set FieldRefresh_Save_State of hExtFieldObject to bState   // be careful
33760>>>>>>>>>//
33760>>>>>>>>>
33760>>>>>>>>>//
33760>>>>>>>>>//  DD structure:
33760>>>>>>>>>//       DD Object           (property Field_objects points to child)
33760>>>>>>>>>//           FieldObjects    (array of field#s and field objs)
33760>>>>>>>>>//              FieldObject1 (heap alloc for each field)
33760>>>>>>>>>//              FieldObjectn
33760>>>>>>>>>//
33760>>>>>>>>>
33760>>>>>>>>>//
33760>>>>>>>>>// This is used to create a single extended field object.
33760>>>>>>>>>//
33760>>>>>>>>>// Interface
33760>>>>>>>>>//      Get FieldPointer to iMemoryPointer
33760>>>>>>>>>//      Get FieldLength  to iLen
33760>>>>>>>>>//      Get File_Number  to iFile
33760>>>>>>>>>//      Get Field_Number to iFile
33760>>>>>>>>>//      get/Set Update_Save_State to bState         // be careful!
33760>>>>>>>>>//      get/Set Update_Find_State to bState         // be careful
33760>>>>>>>>>//      get/Set FieldRefresh_Save_State to bState   // be careful
33760>>>>>>>>>//      get/set FieldChangedState
33760>>>>>>>>>//      send defineField  iFile iField
33760>>>>>>>>>//      Send FieldUpdate  bSave
33760>>>>>>>>>//      Send FieldRefresh bCleared bClearFieldChange
33760>>>>>>>>>//      Set  Field_pEntry iOpts iLen to pValue
33760>>>>>>>>>//      Set  Field_pValue iLen to pValue
33760>>>>>>>>>//
33760>>>>>>>>>Use VDFBase.pkg
33760>>>>>>>>>
33760>>>>>>>>>Class FieldObject is a cObject
33761>>>>>>>>>    
33761>>>>>>>>>    Procedure Construct_Object
33763>>>>>>>>>        Forward Send construct_object
33765>>>>>>>>>        // these are all set by DefineField and should not be changed
33765>>>>>>>>>        Property Integer File_Number        0
33766>>>>>>>>>        Property Integer Field_Number       0
33767>>>>>>>>>        Property Integer FieldLength        0
33768>>>>>>>>>        
33768>>>>>>>>>        // maintained by object
33768>>>>>>>>>        Property UChar[] pFieldArray
33769>>>>>>>>>        
33769>>>>>>>>>        // these can be changed, with care, by the developer
33769>>>>>>>>>        Property Integer Update_Save_State  True
33770>>>>>>>>>        Property Integer Update_Find_State  False // usually no point for finds
33771>>>>>>>>>        Property Integer FieldRefresh_State True
33772>>>>>>>>>        
33772>>>>>>>>>        // hopefully never used
33772>>>>>>>>>        Property Pointer pLegacyFieldPointer       0
33773>>>>>>>>>        
33773>>>>>>>>>    End_Procedure
33774>>>>>>>>>    
33774>>>>>>>>>    Procedure Set FieldChangedState Integer bState
33776>>>>>>>>>        Integer iField
33776>>>>>>>>>        Get Field_Number to iField
33777>>>>>>>>>        Delegate Set Field_Changed_state iField to bState
33779>>>>>>>>>    End_Procedure
33780>>>>>>>>>    
33780>>>>>>>>>    Function FieldChangedState Returns Integer
33782>>>>>>>>>        Integer iField  bState
33782>>>>>>>>>        Get Field_Number to iField
33783>>>>>>>>>        Delegate Get Field_Changed_state iField to bState
33785>>>>>>>>>        Function_Return bState
33786>>>>>>>>>    End_Function
33787>>>>>>>>>    
33787>>>>>>>>>    // return the field option specified
33787>>>>>>>>>    Function IsSaveNoPut Returns Boolean
33789>>>>>>>>>        Integer iField
33789>>>>>>>>>        Boolean  bState
33789>>>>>>>>>        Get Field_Number to iField
33790>>>>>>>>>        Delegate Get FieldSaveNoPut iField to bState
33792>>>>>>>>>        Function_Return bState
33793>>>>>>>>>    End_Function
33794>>>>>>>>>    
33794>>>>>>>>>    // for object: define file, field, fieldlength and allocate heap memory
33794>>>>>>>>>    //             and set memory pointer
33794>>>>>>>>>    Procedure DefineField Integer iFile Integer iField
33796>>>>>>>>>        Integer iFldLen
33796>>>>>>>>>        Set File_Number  to iFile
33797>>>>>>>>>        Set Field_Number to iField
33798>>>>>>>>>        Get_Attribute DF_FIELD_LENGTH of iFile iField to iFldLen
33801>>>>>>>>>        Set FieldLength  to iFldLen
33802>>>>>>>>>    End_Procedure
33803>>>>>>>>>    
33803>>>>>>>>>    // Move from the DD Buffer to the file buffer
33803>>>>>>>>>    Procedure FieldUpdate Integer bSave
33805>>>>>>>>>        Integer iFile iField iFieldLen
33805>>>>>>>>>        UChar[] FieldArray
33806>>>>>>>>>        Integer iType
33806>>>>>>>>>        Boolean bNoPut
33806>>>>>>>>>        
33806>>>>>>>>>        // if bSave, part of save which means only update if changed
33806>>>>>>>>>        // if not bsave, part of find. You usually would not update this. You
33806>>>>>>>>>        // don't index on these types of fields
33806>>>>>>>>>        If ( (bSave and Update_Save_State(Self) and FieldChangedState(Self)) or ;            (not(bSave) and Update_Find_state(Self) ) ) Begin
33808>>>>>>>>>            // if save, we must respect DD_NoPut
33808>>>>>>>>>            If (bSave) Begin
33810>>>>>>>>>                // we are looking at the DD's field buffer itemoptions for, which
33810>>>>>>>>>                // should be set appropriately before a save. This setting has any
33810>>>>>>>>>                // changes made to support dd_commit
33810>>>>>>>>>                Get IsSaveNoPut to bNoPut
33811>>>>>>>>>                If bNoPut Begin
33813>>>>>>>>>                    Procedure_Return
33814>>>>>>>>>                End
33814>>>>>>>>>>
33814>>>>>>>>>            End
33814>>>>>>>>>>
33814>>>>>>>>>            Get pFieldArray to FieldArray
33815>>>>>>>>>            Get File_Number to iFile
33816>>>>>>>>>            Get Field_Number to iField
33817>>>>>>>>>            If iFile Begin
33819>>>>>>>>>                Set_Field_Value iFile iField to FieldArray // LENGTH iFieldLen
33822>>>>>>>>>            End
33822>>>>>>>>>>
33822>>>>>>>>>        End
33822>>>>>>>>>>
33822>>>>>>>>>    End_Procedure
33823>>>>>>>>>    
33823>>>>>>>>>    // Move from File buffer to local DD Buffer
33823>>>>>>>>>    // bCleared determines if this is a find or a clear.
33823>>>>>>>>>    // bClearFieldChange determines if we should clear the FieldChangedState.
33823>>>>>>>>>    Procedure FieldRefresh Boolean bCleared Boolean bClearFieldChange
33825>>>>>>>>>        Integer iFile iField
33825>>>>>>>>>        Integer bOk
33825>>>>>>>>>        UChar[] FieldArray
33826>>>>>>>>>        If (FieldRefresh_state(Self)) Begin
33828>>>>>>>>>            //Get FieldPointer to pField
33828>>>>>>>>>            Get File_Number to iFile
33829>>>>>>>>>            Get Field_Number to iField
33830>>>>>>>>>            // move from file buffer to memory pointed to by pField
33830>>>>>>>>>            If (iFile) Begin
33832>>>>>>>>>                If not bCleared Begin
33834>>>>>>>>>                    Get_Field_Value iFile iField to FieldArray
33837>>>>>>>>>                End
33837>>>>>>>>>>
33837>>>>>>>>>                Set Field_UCValue to FieldArray
33838>>>>>>>>>            End
33838>>>>>>>>>>
33838>>>>>>>>>        End
33838>>>>>>>>>>
33838>>>>>>>>>        If bClearFieldChange Begin
33840>>>>>>>>>            Set FieldChangedstate to False
33841>>>>>>>>>        End
33841>>>>>>>>>>
33841>>>>>>>>>    End_Procedure
33842>>>>>>>>>    
33842>>>>>>>>>    Procedure Set Field_pEntry Integer iOpts Integer iLen Integer bShowErr Pointer pValue
33844>>>>>>>>>        Integer iFile iField iFldLen iMemLen
33844>>>>>>>>>        Integer bChanged
33844>>>>>>>>>        UChar[] FieldArray
33845>>>>>>>>>        
33845>>>>>>>>>        // currently we do nothing with bShowErr because we don't checkfor errors!
33845>>>>>>>>>        
33845>>>>>>>>>        // if No-enter or Displayonly, this shouldn't be changed. For now we will
33845>>>>>>>>>        // let NoPut through, since a user might need it for finding.
33845>>>>>>>>>        If (iOpts iand DD_NOENTER) ;            Procedure_Return
33848>>>>>>>>>        
33848>>>>>>>>>        // maybe in the future
33848>>>>>>>>>        // Force a caplsock if required
33848>>>>>>>>>        //If (iOpts IAND DD_CAPSLOCK) Move (Uppercase(sValue)) to sValue
33848>>>>>>>>>        
33848>>>>>>>>>        Get File_Number  to iFile
33849>>>>>>>>>        Get Field_Number to iField
33850>>>>>>>>>        If (iFile) Begin
33852>>>>>>>>>            Get Is_pValueChanged iLen pValue to bChanged
33853>>>>>>>>>            If ( bChanged or (iOpts iand DD_FORCEPUT) ) Begin
33855>>>>>>>>>                Set Field_pValue iLen to pValue
33856>>>>>>>>>            End
33856>>>>>>>>>>
33856>>>>>>>>>            
33856>>>>>>>>>            
33856>>>>>>>>>            // Set changed state if changed and it is not No_put. This
33856>>>>>>>>>            // is an improvement on DEOs which would set changed-state for
33856>>>>>>>>>            // a no-put. This way, finds use the changed value but saves will
33856>>>>>>>>>            // not trigger a phony data loss
33856>>>>>>>>>            //If ( bChanged ) ;
33856>>>>>>>>>            If ( bChanged and not(iOpts iand DD_NOPUT) ) ;                Set FieldChangedState to True
33859>>>>>>>>>            
33859>>>>>>>>>            // The following is really highly unlikely!!!
33859>>>>>>>>>            // perform autofinds if needed. Note that required checking will occur as
33859>>>>>>>>>            // part of validation.
33859>>>>>>>>>            // We will only autofind if the field value is changed. This is consistent with
33859>>>>>>>>>            // DEOs which do not autofind on unchanged values. This provides optimizations
33859>>>>>>>>>            // when a parent record is already loaded.
33859>>>>>>>>>            If (bChanged or FieldChangedState(Self)) Begin
33861>>>>>>>>>                If (iOpts iand DD_AUTOFIND) ;                    Delegate Send File_Field_AutoFind iFile iField EQ
33865>>>>>>>>>                Else If (iOpts iand DD_AUTOFIND_GE) ;                    Delegate Send File_Field_AutoFind iFile iField GE
33870>>>>>>>>>            End
33870>>>>>>>>>>
33870>>>>>>>>>        End
33870>>>>>>>>>>
33870>>>>>>>>>        
33870>>>>>>>>>    End_Procedure
33871>>>>>>>>>    
33871>>>>>>>>>    // convert pointer to UChar[]
33871>>>>>>>>>    Function PointerToUCharArray Pointer pValue Integer iLen Returns UChar[]
33873>>>>>>>>>        UChar[] FieldArray
33874>>>>>>>>>        Boolean bOk
33874>>>>>>>>>        Move (ResizeArray(FieldArray,iLen)) to FieldArray
33875>>>>>>>>>        Move (MemCopy(AddressOf(FieldArray),pValue,iLen)) to bOK
33876>>>>>>>>>        Function_Return FieldArray
33877>>>>>>>>>    End_Function
33878>>>>>>>>>    
33878>>>>>>>>>    // Raw update of pValue
33878>>>>>>>>>    Procedure Set Field_UCValue UChar[] FieldArray
33880>>>>>>>>>        Set pFieldArray to FieldArray
33881>>>>>>>>>        Send DestroyLegacyFieldHeap
33882>>>>>>>>>    End_Procedure
33883>>>>>>>>>    
33883>>>>>>>>>    // Raw update of pValue
33883>>>>>>>>>    Procedure Set Field_pValue Integer iLen Pointer pValue
33885>>>>>>>>>        UChar[] FieldArray
33886>>>>>>>>>        Get PointerToUCharArray pValue iLen to FieldArray
33887>>>>>>>>>        Set Field_UCValue to FieldArray
33888>>>>>>>>>    End_Procedure
33889>>>>>>>>>    
33889>>>>>>>>>    Function Is_pValueChanged Integer iLen Pointer pValue Returns Boolean
33891>>>>>>>>>        Boolean bChanged
33891>>>>>>>>>        UChar[] FieldArray
33892>>>>>>>>>        Integer iFldLen
33892>>>>>>>>>        Get pFieldArray to FieldArray
33893>>>>>>>>>        Move (SizeOfArray(FieldArray)) to iFldLen
33894>>>>>>>>>        If (iLen <> SizeOfArray(FieldArray)) Begin
33896>>>>>>>>>            Move True to bChanged
33897>>>>>>>>>        End
33897>>>>>>>>>>
33897>>>>>>>>>        Else If (iLen) Begin // check for empty pointer
33900>>>>>>>>>            Move (MemCompare(AddressOf(FieldArray),pValue,iLen)) to bChanged
33901>>>>>>>>>        End
33901>>>>>>>>>>
33901>>>>>>>>>        Function_Return bChanged
33902>>>>>>>>>    End_Function
33903>>>>>>>>>    
33903>>>>>>>>>    // returns data as UChar array - best way to access the data
33903>>>>>>>>>    Function FieldArray Returns UChar[]
33905>>>>>>>>>        UChar[] FieldArray
33906>>>>>>>>>        Get pFieldArray to FieldArray
33907>>>>>>>>>        Function_Return FieldArray
33908>>>>>>>>>    End_Function
33909>>>>>>>>>    
33909>>>>>>>>>    // legacy method. Hopefully this is never called.
33909>>>>>>>>>    Function FieldPointer Returns Pointer
33911>>>>>>>>>        Pointer pValue pOldValue
33911>>>>>>>>>        Integer iLen
33911>>>>>>>>>        UChar[] FieldArray
33912>>>>>>>>>        Boolean bOk
33912>>>>>>>>>        Get pFieldArray to FieldArray
33913>>>>>>>>>        Move (SizeOfArray(FieldArray)) to iLen
33914>>>>>>>>>        Move (Alloc(iLen)) to pValue
33915>>>>>>>>>        Move (MemCopy(pValue,AddressOf(FieldArray),iLen)) to bOk
33916>>>>>>>>>        Send DestroyLegacyFieldHeap
33917>>>>>>>>>        Set pLegacyFieldPointer to pValue
33918>>>>>>>>>        Function_Return pValue
33919>>>>>>>>>    End_Function
33920>>>>>>>>>    
33920>>>>>>>>>    Procedure DestroyLegacyFieldHeap
33922>>>>>>>>>        Integer bOK
33922>>>>>>>>>        Pointer pField
33922>>>>>>>>>        Get pLegacyFieldPointer to pField
33923>>>>>>>>>        If (pField ) Begin
33925>>>>>>>>>            Move (Free(pField)) to bOk
33926>>>>>>>>>            Set pLegacyFieldPointer to 0
33927>>>>>>>>>        End
33927>>>>>>>>>>
33927>>>>>>>>>    End_Procedure
33928>>>>>>>>>    
33928>>>>>>>>>    // augment to release heap allocation
33928>>>>>>>>>    Procedure Destroy_Object
33930>>>>>>>>>        Send DestroyLegacyFieldHeap
33931>>>>>>>>>        Forward Send Destroy_object
33933>>>>>>>>>    End_Procedure
33934>>>>>>>>>    
33934>>>>>>>>>End_Class
33935>>>>>>>>>
33935>>>>>>>>>// This contains all extended field objects.
33935>>>>>>>>>// The array contains a list of all objects where item=field#
33935>>>>>>>>>// and item+1=field object.
33935>>>>>>>>>//
33935>>>>>>>>>// Interface is:
33935>>>>>>>>>//     Get Field_object iField to hFldObj
33935>>>>>>>>>//     Send DefineFieldObject iField
33935>>>>>>>>>//     Send ExtendedFieldsUpdate bSave
33935>>>>>>>>>//     Send ExtendedFieldsRefresh bCleared
33935>>>>>>>>>//
33935>>>>>>>>>Class FieldObjects is an Array
33936>>>>>>>>>    
33936>>>>>>>>>    // return object Id for iField. 0 if none.
33936>>>>>>>>>    Function Field_Object Integer iField Returns Integer
33938>>>>>>>>>        Integer iItm iCnt
33938>>>>>>>>>        Get Item_Count to iCnt
33939>>>>>>>>>        Move 0 to iItm
33940>>>>>>>>>        While iItm lt iCnt
33944>>>>>>>>>            If (Value(Self,iItm)=iField) ;                Function_Return (Value(Self,iItm+1))
33947>>>>>>>>>            Increment iItm
33948>>>>>>>>>            Increment iItm
33949>>>>>>>>>        Loop
33950>>>>>>>>>>
33950>>>>>>>>>        Function_Return 0
33951>>>>>>>>>    End_Function
33952>>>>>>>>>    
33952>>>>>>>>>    // define an extended object for field
33952>>>>>>>>>    Procedure DefineFieldObject Integer iField
33954>>>>>>>>>        Integer hFld
33954>>>>>>>>>        Integer iCnt  iFile
33954>>>>>>>>>        Boolean bInUse
33954>>>>>>>>>        Boolean bHasRecord
33954>>>>>>>>>        Delegate Get Main_File to iFile
33956>>>>>>>>>        Get Field_Object iField to hFld // this shouldn't exist yet
33957>>>>>>>>>        If not hFld Begin
33959>>>>>>>>>            Get Create U_FieldObject to hFld
33960>>>>>>>>>            Send DefineField to hFld iFile iField
33961>>>>>>>>>            Get Item_Count to iCnt          // add to array
33962>>>>>>>>>            Set Value  iCnt to iField   // Pos   = field#
33963>>>>>>>>>            Set Value  (iCnt+1) to hFld // Pos+1 = field object
33964>>>>>>>>>            Delegate Get In_Use_State to bInUse
33966>>>>>>>>>            If bInUse Begin
33968>>>>>>>>>                Delegate Send Refind_Records
33970>>>>>>>>>                Delegate Get HasRecord to bHasRecord
33972>>>>>>>>>                // updating the newly created field with the file buffer contents we don't
33972>>>>>>>>>                // want to change the field's changed state, which might have been set already.
33972>>>>>>>>>                Send FieldRefresh of hFld (not(bHasRecord)) False
33973>>>>>>>>>            End
33973>>>>>>>>>>
33973>>>>>>>>>        End
33973>>>>>>>>>>
33973>>>>>>>>>    End_Procedure
33974>>>>>>>>>    
33974>>>>>>>>>    // update all extended fields. Field buffer <-- DD buffer
33974>>>>>>>>>    Procedure ExtendedFieldsUpdate Integer bSave
33976>>>>>>>>>        Integer iItm iCnt
33976>>>>>>>>>        Get Item_Count to iCnt
33977>>>>>>>>>        Move 0 to iItm
33978>>>>>>>>>        While iItm lt iCnt
33982>>>>>>>>>            Increment iItm
33983>>>>>>>>>            Send FieldUpdate to (Value(Self,iItm)) bSave
33984>>>>>>>>>            Increment iItm
33985>>>>>>>>>        Loop
33986>>>>>>>>>>
33986>>>>>>>>>    End_Procedure
33987>>>>>>>>>    
33987>>>>>>>>>    // refresh all extended fields. Field buffer --> DD buffer
33987>>>>>>>>>    Procedure ExtendedFieldsRefresh Boolean bCleared
33989>>>>>>>>>        Integer iItm iCnt
33989>>>>>>>>>        Get Item_Count to iCnt
33990>>>>>>>>>        Move 0 to iItm
33991>>>>>>>>>        While iItm lt iCnt
33995>>>>>>>>>            Increment iItm
33996>>>>>>>>>            Send FieldRefresh to (Value(Self,iItm)) bCleared True
33997>>>>>>>>>            Increment iItm
33998>>>>>>>>>        Loop
33999>>>>>>>>>>
33999>>>>>>>>>    End_Procedure
34000>>>>>>>>>    
34000>>>>>>>>>    //
34000>>>>>>>>>    // these are sent from the child field object. We need to direct them
34000>>>>>>>>>    // to the DDO (the parent).
34000>>>>>>>>>    Procedure Set Field_Changed_State Integer iField Integer bState
34002>>>>>>>>>        Delegate Set Field_Changed_state iField to bState
34004>>>>>>>>>    End_Procedure
34005>>>>>>>>>    
34005>>>>>>>>>    Function Field_Changed_State Integer iField Returns Integer
34007>>>>>>>>>        Integer bState
34007>>>>>>>>>        Delegate Get Field_Changed_state iField to bState
34009>>>>>>>>>        Function_Return bState
34010>>>>>>>>>    End_Function
34011>>>>>>>>>    
34011>>>>>>>>>    Procedure File_Field_AutoFind Integer iFile Integer iField Integer iMode
34013>>>>>>>>>        Delegate Send File_field_AutoFind iFile iField iMode
34015>>>>>>>>>    End_Procedure
34016>>>>>>>>>    
34016>>>>>>>>>    Function FieldSaveNoPut Integer iField Returns Boolean
34018>>>>>>>>>        Boolean bIsCommited bNoPut
34018>>>>>>>>>        Delegate Get IsCommitted to bIsCommited
34020>>>>>>>>>        // we don't know if this is foreign or not (DDOs never do by themselves). We
34020>>>>>>>>>        // will test for regular. This should never be an issue as the DEO itself
34020>>>>>>>>>        // will be DisplayOnly as needed (we don't have indexed NoEnter=T/Noput=F issues)
34020>>>>>>>>>        Delegate Get FieldNoPut iField bIsCommited False to bNoPut
34022>>>>>>>>>        Function_Return bNoPut
34023>>>>>>>>>    End_Function
34024>>>>>>>>>    
34024>>>>>>>>>    Procedure Destroy_Object
34026>>>>>>>>>        Delegate Set Field_Objects to 0
34028>>>>>>>>>        Forward Send Destroy_object
34030>>>>>>>>>    End_Procedure
34031>>>>>>>>>    
34031>>>>>>>>>    
34031>>>>>>>>>End_Class
34032>>>>>>>// for text and binary. Must support Address Type
34032>>>>>>>
34032>>>>>>>
34032>>>>>>>// we need these from CLI.pkg for DAW drivers. These values must match what is defined
34032>>>>>>>// in cli.pkg
34032>>>>>>>Define DF_FILE_SQL_FILTER for 611
34032>>>>>>>Define DF_FILE_SQL_FILTER_ACTIVE for 624
34032>>>>>>>Define DF_FILE_SQL_FILTER_EQ for 636
34032>>>>>>>// same a CLI.pkg DF_FILE_TABLE_NAME but with a different name
34032>>>>>>>// used to avoid naming conflict. Must match cli.pkg df_file_table_name
34032>>>>>>>Define DF_FILE_SQL_TABLE_NAME for 609
34032>>>>>>>
34032>>>>>>>Define DF_FIELD_SQL_COLUMN_NAME         for 723
34032>>>>>>>
34032>>>>>>>Define DF_DATABASE_IDENTIFIER_QUOTE     for 1085
34032>>>>>>>Define DF_FILE_DATABASE_ID              for 622
34032>>>>>>>
34032>>>>>>>// Class helper for SQL/driver assistance.
34032>>>>>>>// This can only be used within a DataDictionary Class as it expects that
34032>>>>>>>// certain properties can be Get and Set via delegation.
34032>>>>>>>Class cDAWSQLDriverHelper is a cObject
34033>>>>>>>    
34033>>>>>>>    Function DriverIndex String sDriver Returns Integer
34035>>>>>>>        String  sCurrentDriver
34035>>>>>>>        Integer iNumberOfDrivers iDriver iCount
34035>>>>>>>        Move 0 to iDriver
34036>>>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
34039>>>>>>>        For iCount from 1 to iNumberOfDrivers
34045>>>>>>>>
34045>>>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
34048>>>>>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriver) ) Begin
34050>>>>>>>                Function_Return iCount
34051>>>>>>>            End
34051>>>>>>>>
34051>>>>>>>        Loop
34052>>>>>>>>
34052>>>>>>>        Function_Return 0
34053>>>>>>>    End_Function
34054>>>>>>>    
34054>>>>>>>    
34054>>>>>>>    // returns true if this table supports SQL filter interface
34054>>>>>>>    Function SupportsSQLFilters Returns Boolean
34056>>>>>>>        String sDriver
34056>>>>>>>        Integer iFile iDriver iConformance
34056>>>>>>>        Delegate Get Main_File to iFile
34058>>>>>>>        Get_Attribute DF_FILE_DRIVER of iFile to sDriver
34061>>>>>>>        Get DriverIndex sDriver to iDriver
34062>>>>>>>        If (iDriver) Begin
34064>>>>>>>            Get_Attribute DF_DRIVER_CONFORMANCE of iDriver to iConformance
34067>>>>>>>        End
34067>>>>>>>>
34067>>>>>>>        Function_Return (iConformance iand 4)
34068>>>>>>>    End_Function
34069>>>>>>>    
34069>>>>>>>    // SQL Helper functions that return SQL Filters strings that can be used in a where clause
34069>>>>>>>    
34069>>>>>>>    // Escape character to escape LIKE wildcards
34069>>>>>>>    
34069>>>>>>>    
34069>>>>>>>    Function SQLEscapedStr String sSQL Returns String
34071>>>>>>>        String sEscapedSQL
34071>>>>>>>        // Replace one single quote by 2 single quotes
34071>>>>>>>        Move (Replaces("'",sSQL,"''")) to sEscapedSQL
34072>>>>>>>        Function_Return sEscapedSQL
34073>>>>>>>    End_Function
34074>>>>>>>    
34074>>>>>>>    
34074>>>>>>>    Function SQLEscapeLikeWildcards String sSQL Returns String
34076>>>>>>>        
34076>>>>>>>        // Escape the wildcard characters than can be used in a LIKE
34076>>>>>>>        If (Pos("%",sSQL)) ;            Move (Replaces("%",sSQL,(SQL_LIKE_ESC + "%"))) to sSQL
34079>>>>>>>        If (Pos("_",sSQL)) ;            Move (Replaces("_",sSQL,(SQL_LIKE_ESC + "_"))) to sSQL
34082>>>>>>>        
34082>>>>>>>        Function_Return sSQL
34083>>>>>>>    End_Function
34084>>>>>>>    
34084>>>>>>>    
34084>>>>>>>    
34084>>>>>>>    // Creates an SQL Like Filter for this field and search target
34084>>>>>>>    Function SQLStrLike Integer iField String sSearch Returns String
34086>>>>>>>        String sFilter sOrigFilter sField
34086>>>>>>>        Integer iFile
34086>>>>>>>        Integer iHasLikeEscape
34086>>>>>>>        String  sPrefix
34086>>>>>>>        
34086>>>>>>>        Delegate Get Main_File to iFile
34088>>>>>>>        Delegate Get psSQLFilter to sOrigFilter
34090>>>>>>>        Get SQLStrFieldName iField to sField
34091>>>>>>>        Get SQLEscapedStr sSearch to sSearch
34092>>>>>>>        
34092>>>>>>>        Move (Pos(SQL_LIKE_ESC,sSearch)) to iHasLikeEscape
34093>>>>>>>        If (not(iHasLikeEscape)) Begin
34095>>>>>>>            Get SQLEscapeLikeWildcards sSearch to sSearch
34096>>>>>>>        End
34096>>>>>>>>
34096>>>>>>>        
34096>>>>>>>        // Add the N prefix to properly handle Unicode data
34096>>>>>>>        Move 'N' to sPrefix
34097>>>>>>>        Move (sField + " LIKE " + sPrefix + "'%" + sSearch + "%'") to sFilter
34098>>>>>>>        
34098>>>>>>>        If (not(iHasLikeEscape)) Begin
34100>>>>>>>            If (Pos(SQL_LIKE_ESC,sFilter)) Begin
34102>>>>>>>                Move (sFilter + " ESCAPE '" + SQL_LIKE_ESC + "' "  ) to sFilter
34103>>>>>>>            End
34103>>>>>>>>
34103>>>>>>>        End
34103>>>>>>>>
34103>>>>>>>        
34103>>>>>>>        Function_Return sFilter
34104>>>>>>>    End_Function
34105>>>>>>>    
34105>>>>>>>    // Appends two Filters with an AND clause. Both or either can be empty
34105>>>>>>>    Function SQLStrAppend String sOrigFilter String sFilter Returns String
34107>>>>>>>        If (sOrigFilter<>"" and sFilter<>"") Begin
34109>>>>>>>            Move ( "(" + sOrigFilter + ") AND (" + sFilter + ")") to sFilter
34110>>>>>>>        End
34110>>>>>>>>
34110>>>>>>>        Else If (sFilter="") Begin
34113>>>>>>>            Move sOrigFilter to sFilter
34114>>>>>>>        End
34114>>>>>>>>
34114>>>>>>>        Function_Return sFilter
34115>>>>>>>    End_Function
34116>>>>>>>    
34116>>>>>>>    // Appends two filters with an or clause. Both or either can be empty.
34116>>>>>>>    // This may be used in OnConstrain methods when building SQL WHERE clauses in string values.
34116>>>>>>>    Function SQLStrAppendOr String sOrigFilter String sFilter Returns String
34118>>>>>>>        If (sOrigFilter<>"" and sFilter<>"") Begin
34120>>>>>>>            Move ("(" + sOrigFilter + ") OR (" + sFilter + ")") to sFilter
34121>>>>>>>        End
34121>>>>>>>>
34121>>>>>>>        Else If (sFilter="") Begin
34124>>>>>>>            Move sOrigFilter to sFilter
34125>>>>>>>        End
34125>>>>>>>>
34125>>>>>>>          Function_Return sFilter 
34126>>>>>>>    End_Function
34127>>>>>>>
34127>>>>>>>
34127>>>>>>>    Function SQLIdentifierQuote Handle hTable Returns String
34129>>>>>>>
34129>>>>>>>        String  sDriver        
34129>>>>>>>        Integer iDriverIndex
34129>>>>>>>        Handle  hDatabase
34129>>>>>>>        String  sIdentifierQuote
34129>>>>>>>        
34129>>>>>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriver
34132>>>>>>>        
34132>>>>>>>        Get DriverIndex sDriver to iDriverIndex        
34133>>>>>>>        If (iDriverIndex) Begin
34135>>>>>>>            Get_Attribute DF_FILE_DATABASE_ID of hTable to hDatabase            
34138>>>>>>>            If (hDatabase) Begin
34140>>>>>>>                Get_Attribute DF_DATABASE_IDENTIFIER_QUOTE of iDriverIndex hDatabase to sIdentifierQuote
34143>>>>>>>            End
34143>>>>>>>>
34143>>>>>>>        End
34143>>>>>>>>
34143>>>>>>>        
34143>>>>>>>        Function_Return sIdentifierQuote
34144>>>>>>>        
34144>>>>>>>    End_Function
34145>>>>>>>
34145>>>>>>>
34145>>>>>>>
34145>>>>>>>    // returns the name of the File and Field suitable for an SQL where statement ("Table"."Column")
34145>>>>>>>    Function SQLStrFileFieldName Integer iField Returns String
34147>>>>>>>        String sFile sField
34147>>>>>>>        Integer iFile
34147>>>>>>>        String  sIdentifierQuote
34147>>>>>>>        
34147>>>>>>>        Get Main_File to iFile
34148>>>>>>>        Get_Attribute DF_FILE_SQL_TABLE_NAME of iFile to sFile
34151>>>>>>>        Get_Attribute DF_FIELD_SQL_COLUMN_NAME of iFile iField to sField
34154>>>>>>>        Get SQLIdentifierQuote iFile to sIdentifierQuote
34155>>>>>>>        
34155>>>>>>>        Function_Return (sIdentifierQuote + sFile + sIdentifierQuote + '.' + sIdentifierQuote + sField + sIdentifierQuote ) 
34156>>>>>>>    End_Function
34157>>>>>>>
34157>>>>>>>    // returns the name of the Field suitable for an SQL where statement ("Column")
34157>>>>>>>    Function SQLStrFieldName Integer iField Returns String
34159>>>>>>>        String sField 
34159>>>>>>>        Integer iFile
34159>>>>>>>        String sIdentifierQuote
34159>>>>>>>        Get Main_File to iFile
34160>>>>>>>        Get_Attribute DF_FIELD_SQL_COLUMN_NAME of iFile iField to sField
34163>>>>>>>        
34163>>>>>>>        Get SQLIdentifierQuote iFile to sIdentifierQuote
34164>>>>>>>        
34164>>>>>>>        Function_Return (sIdentifierQuote + sField + sIdentifierQuote ) 
34165>>>>>>>
34165>>>>>>>    End_Function
34166>>>>>>>
34166>>>>>>>    // returns the name of the Schema and File and Field suitable for an SQL where statement ("Schema"."Table"."Column")
34166>>>>>>>    Function SQLStrSchemaFileFieldName Integer iField Returns String
34168>>>>>>>        String sFile sField sSchema
34168>>>>>>>        Integer iFile
34168>>>>>>>        String sIdentifierQuote
34168>>>>>>>        
34168>>>>>>>        Get Main_File to iFile
34169>>>>>>>        Get_Attribute DF_FILE_SQL_TABLE_NAME of iFile to sFile
34172>>>>>>>        Get_Attribute DF_FIELD_SQL_COLUMN_NAME of iFile iField to sField
34175>>>>>>>        Get_Attribute DF_FILE_OWNER of iFile to sSchema
34178>>>>>>>
34178>>>>>>>        Get SQLIdentifierQuote iFile to sIdentifierQuote
34179>>>>>>>            
34179>>>>>>>        If (Trim(sSchema) <> "") ;            Function_Return (sIdentifierQuote + sSchema + sIdentifierQuote + '.' + sIdentifierQuote + sFile + sIdentifierQuote + '.' + sIdentifierQuote + sField + sIdentifierQuote ) 
34182>>>>>>>        Else ;            Function_Return (sIdentifierQuote + sFile + sIdentifierQuote + '.' + sIdentifierQuote + sField + sIdentifierQuote ) 
34184>>>>>>>            
34184>>>>>>>            
34184>>>>>>>            
34184>>>>>>>    End_Function
34185>>>>>>>    
34185>>>>>>>    //  returns the name of a file suitable for a SQL statement
34185>>>>>>>    Function SQLStrFileName Integer iField Returns String
34187>>>>>>>        String sFile
34187>>>>>>>        Integer iFile
34187>>>>>>>        String sIdentifierQuote
34187>>>>>>>        
34187>>>>>>>        Get Main_File to iFile
34188>>>>>>>        Get_Attribute DF_FILE_SQL_TABLE_NAME of iFile to sFile
34191>>>>>>>        
34191>>>>>>>        Get SQLIdentifierQuote iFile to sIdentifierQuote
34192>>>>>>>        
34192>>>>>>>        Function_Return (sIdentifierQuote + sFile + sIdentifierQuote)
34193>>>>>>>    End_Function
34194>>>>>>>    
34194>>>>>>>    // called before an SQL Filter find. Make sure that any global and table attributes are
34194>>>>>>>    // stored.
34194>>>>>>>    Procedure StoreDefaultSQLFilters
34196>>>>>>>        String sOldFilter
34196>>>>>>>        Boolean bOldFilterActive bOldFilterEQ
34196>>>>>>>        Integer iMain
34196>>>>>>>        Get Main_File to iMain
34197>>>>>>>        Get_Attribute DF_FILE_SQL_FILTER of iMain to sOldFilter
34200>>>>>>>        Get_Attribute DF_FILE_SQL_FILTER_ACTIVE of iMain to bOldFilterActive
34203>>>>>>>        Get_Attribute DF_FILE_SQL_FILTER_EQ of iMain to bOldFilterEQ
34206>>>>>>>        Delegate Set psOldFilter to sOldFilter
34208>>>>>>>        Delegate Set pbOldFilterActive to bOldFilterActive
34210>>>>>>>        Delegate Set pbOldFilterEq to bOldFilterEQ
34212>>>>>>>    End_Procedure
34213>>>>>>>    
34213>>>>>>>    // called after an SQL find. Must restore the global and table SQL filter attributes
34213>>>>>>>    Procedure RestoreDefaultSQLFilters
34215>>>>>>>        String sOldFilter
34215>>>>>>>        Boolean bOldFilterActive bOldFilterEQ
34215>>>>>>>        Integer iMain
34215>>>>>>>        Delegate Get Main_File to iMain
34217>>>>>>>        Delegate Get psOldFilter to sOldFilter
34219>>>>>>>        Delegate Get pbOldFilterActive to bOldFilterActive
34221>>>>>>>        Delegate Get pbOldFilterEq to bOldFilterEQ
34223>>>>>>>        Set_Attribute DF_FILE_SQL_FILTER of iMain to sOldFilter
34226>>>>>>>        Set_Attribute DF_FILE_SQL_FILTER_ACTIVE of iMain to bOldFilterActive
34229>>>>>>>        Set_Attribute DF_FILE_SQL_FILTER_EQ of iMain to bOldFilterEQ
34232>>>>>>>    End_Procedure
34233>>>>>>>    
34233>>>>>>>    // applies the passed SQL filter. If empty, it should make sure that no filter
34233>>>>>>>    // is applied. If non-empty it should set the filter active, set the filter string
34233>>>>>>>    // and make sure this is applied to all finds (including find EQ)
34233>>>>>>>    Procedure ApplySQLFilterStr String sFilter
34235>>>>>>>        Integer iMain
34235>>>>>>>        Delegate Get Main_File to iMain
34237>>>>>>>        If (sFilter<>"") Begin
34239>>>>>>>            Set_Attribute DF_FILE_SQL_FILTER_ACTIVE of iMain to True
34242>>>>>>>            Set_Attribute DF_FILE_SQL_FILTER of iMain to sFilter
34245>>>>>>>            Set_Attribute DF_FILE_SQL_FILTER_EQ of iMain to True
34248>>>>>>>        End
34248>>>>>>>>
34248>>>>>>>        Else Begin
34249>>>>>>>            Set_Attribute DF_FILE_SQL_FILTER_ACTIVE of iMain to False
34252>>>>>>>        End
34252>>>>>>>>
34252>>>>>>>    End_Procedure
34253>>>>>>>    
34253>>>>>>>End_Class
34254>>>>>>>
34254>>>>>>>// Every data_set will have a object based on this class. It will hold
34254>>>>>>>// the values for the fields, the entry_options and the messages IDs of the
34254>>>>>>>// iEntry, iExit and iValidate messages for each field.
34254>>>>>>>// It is assumed that an object of this class will always be used as a
34254>>>>>>>// child object of a Data_Set object.
34254>>>>>>>//
34254>>>>>>>// Currently the fieldtypes Overlap, Text and Binary are *not* supported.
34254>>>>>>>//
34254>>>>>>>// ITEM-PROPERTY   ASSIGNED-FUNCTION
34254>>>>>>>//
34254>>>>>>>// Value           The value of the field. Will be updated whenever the
34254>>>>>>>//                 value of a field changes due to data-entry or a found
34254>>>>>>>//                 record.
34254>>>>>>>// Data_File       Contains the filenumber. Is the same for every item.
34254>>>>>>>// Data_Field      Contains the fieldnumber for the item. Is equal to the
34254>>>>>>>//                 items' itemnumber.
34254>>>>>>>// Item_Options    Used to store the standard item-options of a field.
34254>>>>>>>// Aux_Value       Used to store the foreign-item-options of a field.
34254>>>>>>>Class cRecordBuffer is an cDDBuffer
34255>>>>>>>    
34255>>>>>>>    // This procedure will be called from the Data_Set when the Main_File is
34255>>>>>>>    // being set. It will create an item for each field of the file in this
34255>>>>>>>    // object. Fields of the types DF_OVERLAP, DF_TEXT and DF_BINARY are
34255>>>>>>>    // currently not added.
34255>>>>>>>    Procedure Create_Items Integer iFile
34257>>>>>>>        Integer iField_Count iField
34257>>>>>>>        
34257>>>>>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iFile to iField_Count
34260>>>>>>>        Set Main_File to iFile
34261>>>>>>>        Send Delete_Data
34262>>>>>>>        Set Item_Count to (iField_Count+1)
34263>>>>>>>        For iField from 0 to iField_Count
34269>>>>>>>>
34269>>>>>>>            // will skip recnum (field 0) if non-recnum table
34269>>>>>>>            // will set to skip if binary, text or overlap
34269>>>>>>>            Set Data_Field iField to iField
34270>>>>>>>        Loop
34271>>>>>>>>
34271>>>>>>>    End_Procedure
34272>>>>>>>    
34272>>>>>>>    // when an alias is created, we want to clear any values that will not be applied to
34272>>>>>>>    // this alias DD such as prompt and zoom objects (which would point to the superclass master)
34272>>>>>>>    Procedure ReDefineAliasItems Integer iFile
34274>>>>>>>        Integer i iItems
34274>>>>>>>        
34274>>>>>>>        Set Main_File to iFile
34275>>>>>>>        Get item_count to iItems
34276>>>>>>>        For i from 0 to (iItems-1)
34282>>>>>>>>
34282>>>>>>>            Set Prompt_Object i to 0
34283>>>>>>>            Set Zoom_Object i to 0
34284>>>>>>>        Loop
34285>>>>>>>>
34285>>>>>>>    End_Procedure
34286>>>>>>>    
34286>>>>>>>    
34286>>>>>>>    // This procedure will be called from the parent Data_Set whenever the
34286>>>>>>>    // Data_Set changes its Current_Record property, or after a Save, Delete or Clear operation.
34286>>>>>>>    // We use this event to store the values of the fields in our local record buffer.
34286>>>>>>>    Procedure OnNewCurrentRecord RowID riOld RowID riNew
34288>>>>>>>        Integer iMain_File
34288>>>>>>>        Integer iOldState
34288>>>>>>>        tDDRemembered[] DefaultValues
34288>>>>>>>        tDDRemembered[] DefaultValues
34289>>>>>>>        Boolean bRetain bInReSync
34289>>>>>>>        Integer iFld iFlds iIndex
34289>>>>>>>        Handle hoDD
34289>>>>>>>        
34289>>>>>>>        Get Parent to hoDD
34290>>>>>>>        Delegate Get Main_File to iMain_File
34292>>>>>>>        
34292>>>>>>>        If not (IsNullRowId(riNew)) ;            Send Entry_Display
34295>>>>>>>        Else Begin            
34296>>>>>>>            If (OPERATION_ORIGIN) Begin
34298>>>>>>>                // This gets set by webapp during a resync. During resyncs, you don't want to rely
34298>>>>>>>                // on the values in the buffers (as they may not be yours), so you cannot do retain of rememberlast.
34298>>>>>>>                // Fortunately, you don't need to, as this information is not needed during a resync.
34298>>>>>>>                Get pbInResync of operation_origin to bInResync
34299>>>>>>>            End
34299>>>>>>>>
34299>>>>>>>            
34299>>>>>>>            // If we have any 17.0 Remember last value items, we must add those items to our array.
34299>>>>>>>            // Only do this if this is the operation origin or a parent (i.e., skip if a child DDO).
34299>>>>>>>            // Also skip if a resync. See above
34299>>>>>>>            If ( not(bInReSync) and ;                ( (Operation_Origin=hoDD) or ;                ( OPERATION_ORIGIN and (Which_data_set(Operation_Origin,iMain_File)<>0) ) ) ) Begin
34301>>>>>>>                Delegate Get pDDDefaults to DefaultValues
34303>>>>>>>                Move (SizeOfArray(DefaultValues)) to iFlds
34304>>>>>>>                For iFld from 0 to (iFlds-1)
34310>>>>>>>>
34310>>>>>>>                    Move (DefaultValues[iFld].sDefault=DD_RememberLast) to bRetain // if this is a dynamically assigned remember-last
34311>>>>>>>                    If bRetain Begin
34313>>>>>>>                        Get Value DefaultValues[iFld].iField to DefaultValues[iFld].sLastValue
34314>>>>>>>                    End
34314>>>>>>>>
34314>>>>>>>                    Else Begin
34315>>>>>>>                        Move '' to DefaultValues[iFld].sLastValue
34316>>>>>>>                    End
34316>>>>>>>>
34316>>>>>>>                Loop
34317>>>>>>>>
34317>>>>>>>                Delegate Set pDDDefaults to DefaultValues
34319>>>>>>>            End
34319>>>>>>>>
34319>>>>>>>            
34319>>>>>>>            // we must do this to make retains not set changed_state
34319>>>>>>>            Delegate Get Change_Disabled_State to iOldState
34321>>>>>>>            Delegate Set Change_Disabled_State to True
34323>>>>>>>            // If mode is anything other than clear, we do a clear all (clear keeps retains, clear all does not)
34323>>>>>>>            // Also do clear all if the DDO is foreign.
34323>>>>>>>            
34323>>>>>>>            // If bInReSync, we never use retains, as the buffer is not ours yet.
34323>>>>>>>            // The Entry_Clear, Entry_Clear_All parameter is bIgnoreRetains.
34323>>>>>>>            // When True, retain and retain_all states are ignored and cleared.
34323>>>>>>>            If (Operation_Mode=MODE_CLEARING and ;                ( (Operation_Origin=parent(Self)) or ;                (Which_data_set(Operation_Origin,iMain_File)<>0) ) ) Begin
34325>>>>>>>                    Send Entry_Clear bInReSync
34326>>>>>>>            End
34326>>>>>>>>
34326>>>>>>>            Else Begin
34327>>>>>>>                Send Entry_Clear_all bInResync
34328>>>>>>>            End
34328>>>>>>>>
34328>>>>>>>            Delegate Set Change_Disabled_State to iOldState
34330>>>>>>>            Set Changed_State to False
34331>>>>>>>        End
34331>>>>>>>>
34331>>>>>>>    End_Procedure
34332>>>>>>>    
34332>>>>>>>    // Make sure to set the Changed_State of the Data_Set to TRUE when a
34332>>>>>>>    // field value changes and it's not during the Setting of the Defaults.
34332>>>>>>>    Procedure Set Changed_State Integer iState
34334>>>>>>>        Integer iNoChange
34334>>>>>>>        // Server.pkg in dso already knows this property
34334>>>>>>>        Delegate Get Change_disabled_State to iNoChange
34336>>>>>>>        If not iNoChange Begin
34338>>>>>>>            Forward Set Changed_State to iState
34340>>>>>>>            Delegate Set Changed_State to iState
34342>>>>>>>        End
34342>>>>>>>>
34342>>>>>>>    End_Procedure
34343>>>>>>>    
34343>>>>>>>End_Class
34344>>>>>>>
34344>>>>>>>
34344>>>>>>>// Objects of this class will be used to store all kinds of attributes
34344>>>>>>>// which belong to a field.
34344>>>>>>>//
34344>>>>>>>// FA_MIN_VALUE
34344>>>>>>>// Used to store the mininum value of field.
34344>>>>>>>//
34344>>>>>>>// FA_MAX_VALUE
34344>>>>>>>// Used to store the maximum value of a field.
34344>>>>>>>//
34344>>>>>>>// FA_CHECK_VALUE
34344>>>>>>>// Used to store a string which contains all possible values of a field.
34344>>>>>>>//
34344>>>>>>>// FA_CHECKBOX_TRUE
34344>>>>>>>// Used to store the TRUE value for a checkbox field
34344>>>>>>>//
34344>>>>>>>// FA_CHECKBOX_FALSE
34344>>>>>>>// Used to store the FALSE value of a checkbox field
34344>>>>>>>//
34344>>>>>>>// FA_TABLE_OBJECT
34344>>>>>>>// Stores object Id of a validation table.
34344>>>>>>>//
34344>>>>>>>// FA_ERROR_MESSAGE
34344>>>>>>>// Used to store a error text which will be shown to a user when a fields
34344>>>>>>>// value violates one of the rules defined for it.
34344>>>>>>>// This field may contain the special strings @MIN, @MAX and @CHECK. When
34344>>>>>>>// these are used, these will be replaced by the actual value of MIN_VALUE,
34344>>>>>>>// MAX_VALUE or CHECK_VALUE.
34344>>>>>>>//
34344>>>>>>>
34344>>>>>>>
34344>>>>>>>// Validation Types
34344>>>>>>>Enumeration_List
34344>>>>>>>    Define FA_VALIDATION_TYPE_NONE
34344>>>>>>>    Define FA_VALIDATION_TYPE_RANGE
34344>>>>>>>    Define FA_VALIDATION_TYPE_CHECK
34344>>>>>>>    Define FA_VALIDATION_TYPE_CHECKBOX
34344>>>>>>>    Define FA_VALIDATION_TYPE_TABLE
34344>>>>>>>End_Enumeration_List
34344>>>>>>>
34344>>>>>>>
34344>>>>>>>Class Field_Attributes is a Array
34345>>>>>>>    
34345>>>>>>>    Procedure Construct_Object
34347>>>>>>>        Forward Send Construct_Object
34349>>>>>>>        // Private: This replaces the use of arrays to get at this value. This
34349>>>>>>>        // allows us to find specific validation types (like checkboxes) more
34349>>>>>>>        // quickly than scanning an array
34349>>>>>>>        Property String Private.Validation_Types     ''
34350>>>>>>>    End_Procedure
34351>>>>>>>    
34351>>>>>>>    // Returns the extended validation type for the passed field.
34351>>>>>>>    Function Field_Validation_Type Integer iField Returns Integer
34353>>>>>>>        Integer iType
34353>>>>>>>        If iField ;            Move (mid(Private.Validation_Types(Self),1,iField)) to iType
34356>>>>>>>        Else ;            Move FA_VALIDATION_TYPE_NONE to iType
34358>>>>>>>        Function_Return iType
34359>>>>>>>    End_Function
34360>>>>>>>    
34360>>>>>>>    Procedure Set Field_Validation_Type Integer iField String sType
34362>>>>>>>        Integer iType
34362>>>>>>>        String sTypes
34362>>>>>>>        If iField Begin
34364>>>>>>>            Get Private.Validation_Types to sTypes
34365>>>>>>>            Set Private.Validation_Types to (Overstrike(sType, sTypes, iField))
34366>>>>>>>        End
34366>>>>>>>>
34366>>>>>>>    End_Procedure
34367>>>>>>>    
34367>>>>>>>    // Set any defaults required by this class when the main file is created.
34367>>>>>>>    // Create a string which contains all validation types. Set all to
34367>>>>>>>    // No extended validation type.
34367>>>>>>>    Procedure Create_Items
34369>>>>>>>        String  sType
34369>>>>>>>        Integer iCount
34369>>>>>>>        Delegate Get Field_Count to iCOunt
34371>>>>>>>        Move FA_VALIDATION_TYPE_NONE to sType
34372>>>>>>>        Set Private.Validation_Types to (Repeat(sType,iCount))
34373>>>>>>>    End_Procedure
34374>>>>>>>    
34374>>>>>>>    // Return field number of next field matching the passed validation type.
34374>>>>>>>    // Pass validation type and last position checked. Return 0 if no match
34374>>>>>>>    Function Next_Validation_Type String sType Integer iOffset Returns Integer
34376>>>>>>>        String sTypes
34376>>>>>>>        Integer iPos
34376>>>>>>>        Get Private.Validation_Types to sTypes
34377>>>>>>>        Move (Pos(sType, mid(sTypes,255,iOffset+1))) to iPos
34378>>>>>>>        If iPos ;            Add iOffset to iPos
34381>>>>>>>        Function_Return iPos
34382>>>>>>>    End_Function
34383>>>>>>>    
34383>>>>>>>    // This procedure will be called by the Extended_Data_Set to set the
34383>>>>>>>    // errornumber and message which will be triggered when it needs to.
34383>>>>>>>    Procedure Set Field_Error Integer iField Integer iErr String sMsg
34385>>>>>>>        Integer iBase
34385>>>>>>>        Move (iField * FA_COUNT) to iBase
34386>>>>>>>        Set Value (iBase + FA_ERROR_NUMBER) to iErr
34387>>>>>>>        Set Value (iBase + FA_ERROR_MESSAGE) to sMsg
34388>>>>>>>    End_Procedure
34389>>>>>>>    
34389>>>>>>>    // Used to retreive the error number and message for a particular field
34389>>>>>>>    Function Field_Error_Number Integer iField Returns Integer
34391>>>>>>>        Integer iErr
34391>>>>>>>        Get Value (iField*FA_COUNT + FA_ERROR_NUMBER)  to iErr
34392>>>>>>>        Function_Return iErr
34393>>>>>>>    End_Function
34394>>>>>>>    
34394>>>>>>>    Function Field_Error_Message Integer iField Returns String
34396>>>>>>>        String sValue
34396>>>>>>>        Get Value (iField*FA_COUNT + FA_ERROR_MESSAGE) to sValue
34397>>>>>>>        Function_Return sValue
34398>>>>>>>    End_Function
34399>>>>>>>    
34399>>>>>>>    
34399>>>>>>>    // This function manages the validation of a field against its extended
34399>>>>>>>    // validations.
34399>>>>>>>    Function Validate_Field Integer iField Returns Integer
34401>>>>>>>        Integer iType
34401>>>>>>>        Integer iResult
34401>>>>>>>        Get Field_Validation_Type iField to iType
34402>>>>>>>        If (iType = FA_VALIDATION_TYPE_RANGE) ;            Get Validate_Field_Range iField to iResult
34405>>>>>>>        Else If (iType = FA_VALIDATION_TYPE_CHECK) ;            Get Validate_Field_Check iField to iResult
34409>>>>>>>        Else If (iType = FA_VALIDATION_TYPE_CHECKBOX) ;            Get Validate_Field_Checkbox iField to iResult
34413>>>>>>>        Else If (iType = FA_VALIDATION_TYPE_TABLE) ;            Get Validate_Field_Table iField to iResult
34417>>>>>>>        Function_Return iResult
34418>>>>>>>    End_Function
34419>>>>>>>    
34419>>>>>>>    // All extended validations know how to send callback messages (iMsg) to
34419>>>>>>>    // the calling object (iObj). This allows external lists to get filled w/
34419>>>>>>>    // the contents of a range. Used by combo boxes, spinners, etc.
34419>>>>>>>    Procedure Field_Fill_List Integer iField Integer iObj Integer iMsg
34421>>>>>>>        Integer iType
34421>>>>>>>        Integer iResult
34421>>>>>>>        Get Field_Validation_Type iField to iType
34422>>>>>>>        If (iType = FA_VALIDATION_TYPE_RANGE) ;            Send Field_Fill_List_Field_Range iField iObj iMsg
34425>>>>>>>        Else If (iType = FA_VALIDATION_TYPE_CHECK) ;            Send Field_Fill_List_Field_Check iField iObj iMsg
34429>>>>>>>        Else If (iType = FA_VALIDATION_TYPE_CHECKBOX) ;            Send Field_Fill_List_Field_Checkbox iField iObj iMsg
34433>>>>>>>        Else If (iType = FA_VALIDATION_TYPE_TABLE) ;            Send Field_Fill_List_Field_Table iField iObj iMsg
34437>>>>>>>    End_Procedure
34438>>>>>>>    
34438>>>>>>>    // Return the id of the validation table if one exists. Otherwise return
34438>>>>>>>    // a zero.
34438>>>>>>>    Function Field_Table_Object Integer iField Returns Integer
34440>>>>>>>        Integer iType
34440>>>>>>>        Integer iObj
34440>>>>>>>        Integer iBase
34440>>>>>>>        Move (iField * FA_COUNT) to iBase
34441>>>>>>>        Get Field_Validation_Type iField to iType
34442>>>>>>>        If (iType = FA_VALIDATION_TYPE_TABLE) ;            Get Value (iBase + FA_TABLE_OBJECT) to iObj
34445>>>>>>>        Function_Return iObj
34446>>>>>>>    End_Function
34447>>>>>>>    
34447>>>>>>>    // Procedure to set the range for a field. It will automatically set the
34447>>>>>>>    // validation type of the field as well.
34447>>>>>>>    Procedure Set Field_Value_Range Integer iField String sMin String sMax
34449>>>>>>>        Integer iBase
34449>>>>>>>        Move (iField * FA_COUNT) to iBase
34450>>>>>>>        Set Value (iBase + FA_MIN_VALUE) to sMin
34451>>>>>>>        Set Value (iBase + FA_MAX_VALUE) to sMax
34452>>>>>>>        Set Field_Validation_Type iField to FA_VALIDATION_TYPE_RANGE
34453>>>>>>>    End_Procedure
34454>>>>>>>    
34454>>>>>>>    // Function to check a fields value agains a given check string.
34454>>>>>>>    Function Validate_Field_Range Integer iField Returns Integer
34456>>>>>>>        String  sMin
34456>>>>>>>        String  sMax
34456>>>>>>>        String  sValue
34456>>>>>>>        Integer iField_Type
34456>>>>>>>        Integer iResult
34456>>>>>>>        Integer iFile
34456>>>>>>>        Integer iBase
34456>>>>>>>        Move (iField * FA_COUNT) to iBase
34457>>>>>>>        Get Value (iBase + FA_MIN_VALUE) to sMin
34458>>>>>>>        Get Value (iBase + FA_MAX_VALUE) to sMax
34459>>>>>>>        Delegate Get Field_Current_Value iField to sValue
34461>>>>>>>        Delegate Get Main_File to iFile
34463>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iField_Type
34466>>>>>>>        Move 0 to iResult
34467>>>>>>>        If (iField_Type=DF_ASCII) ;            Move (sValue < sMin or sValue > sMax) to iResult
34470>>>>>>>        Else If (iField_Type=DF_BCD) ;            Move (Number(sValue) < Number(sMin) or ;            Number(sValue) > Number(sMax)) to iResult
34474>>>>>>>        Else If (iField_Type=DF_DATE) ;            Move (Date(sValue) < Date(sMin) or Date(sValue) > Date(sMax)) to iResult
34478>>>>>>>        Else If (iField_Type=DF_DATETIME) ;            Move (Cast(sValue,DateTime) < Cast(sMin,DateTime) or Cast(sValue,DateTime) > Cast(sMax,DateTime)) to iResult
34482>>>>>>>        If iResult Begin
34484>>>>>>>            Delegate Send Field_Error iField DD_INVALID_RANGE sMin sMax
34486>>>>>>>            Function_Return 1
34487>>>>>>>        End
34487>>>>>>>>
34487>>>>>>>    End_Function
34488>>>>>>>    
34488>>>>>>>    // Callback to provide all valid value for this validation.
34488>>>>>>>    // Just call back with the two range values
34488>>>>>>>    Procedure Field_Fill_List_Field_Range Integer iField Integer iObj Integer iMsg
34490>>>>>>>        String  sMin
34490>>>>>>>        String  sMax
34490>>>>>>>        Integer iBase
34490>>>>>>>        Move (iField * FA_COUNT) to iBase
34491>>>>>>>        Get Value (iBase + FA_MIN_VALUE) to sMin
34492>>>>>>>        Get Value (iBase + FA_MAX_VALUE) to sMax
34493>>>>>>>        Send iMsg to iObj 0 sMin '' 0 (NullrowId())
34494>>>>>>>        Send iMsg to iObj 1 sMax '' 0 (NullrowId())
34495>>>>>>>    End_Procedure
34496>>>>>>>    
34496>>>>>>>    // Procedure to set the check for a field. It will automatically set the
34496>>>>>>>    // validation type of the field as well.
34496>>>>>>>    Procedure Set Field_Value_Check Integer iField String sCheck
34498>>>>>>>        Integer iBase
34498>>>>>>>        Move (iField * FA_COUNT) to iBase
34499>>>>>>>        Set Value (iBase + FA_CHECK_VALUE) to sCheck
34500>>>>>>>        //Set Value iBase to FA_VALIDATION_TYPE_CHECK
34500>>>>>>>        Set Field_Validation_Type iField to FA_VALIDATION_TYPE_CHECK
34501>>>>>>>    End_Procedure
34502>>>>>>>    
34502>>>>>>>    // Function to check a fields value agains a given check string.
34502>>>>>>>    Function Validate_Field_Check Integer iField Returns Integer
34504>>>>>>>        String  sCheck
34504>>>>>>>        String  sValue
34504>>>>>>>        Integer iBase
34504>>>>>>>        Integer iPos
34504>>>>>>>        Integer iLength
34504>>>>>>>        Integer iResult
34504>>>>>>>        Integer iFile
34504>>>>>>>        Move (iField * FA_COUNT) to iBase
34505>>>>>>>        Get Value (iBase + FA_CHECK_VALUE) to sCheck
34506>>>>>>>        Delegate Get Field_Current_Value iField to sValue
34508>>>>>>>        Delegate Get Main_File to iFile
34510>>>>>>>        Get_Attribute DF_FIELD_LENGTH of iFile iField to iLength
34513>>>>>>>        Move (Pad( sValue,iLength)) to sValue
34514>>>>>>>        // Replace the seperation characters with two of them so the user
34514>>>>>>>        // can't bypass the check by entering a seperation character.
34514>>>>>>>        Move (Replaces("|", sValue, "||")) to sValue
34515>>>>>>>        // Report an error if rules are violated.
34515>>>>>>>        Move (Pos( sValue, sCheck)) to iPos
34516>>>>>>>        If not iPos Begin
34518>>>>>>>            Delegate Send Field_Error iField DD_INVALID_CHECK sCheck
34520>>>>>>>            Function_Return 1
34521>>>>>>>        End
34521>>>>>>>>
34521>>>>>>>    End_Function
34522>>>>>>>    
34522>>>>>>>    // Callback to provide all valid value for this validation.
34522>>>>>>>    // Call back with all valid check values
34522>>>>>>>    Procedure Field_Fill_List_Field_Check Integer iField Integer iObj Integer iMsg
34524>>>>>>>        String  sCheck
34524>>>>>>>        Integer iBase
34524>>>>>>>        Integer iPos
34524>>>>>>>        Integer iItem
34524>>>>>>>        Move (iField * FA_COUNT) to iBase
34525>>>>>>>        Get Value (iBase + FA_CHECK_VALUE) to sCheck
34526>>>>>>>        Append sCheck "|"
34527>>>>>>>        Move (Pos( "|", sCheck)) to iPos
34528>>>>>>>        While iPos
34532>>>>>>>            If (iPos > 1) Begin
34534>>>>>>>                Send iMsg to iObj iItem (Left(sCheck,iPos-1)) '' 0 (NullrowId())
34535>>>>>>>                Increment iItem
34536>>>>>>>            End
34536>>>>>>>>
34536>>>>>>>            Move (Mid( sCheck, 255, iPos+1))  to sCheck
34537>>>>>>>            Move (Pos( "|", sCheck)) to iPos
34538>>>>>>>        Loop
34539>>>>>>>>
34539>>>>>>>    End_Procedure
34540>>>>>>>    
34540>>>>>>>    // Procedure to set up a checkbox field. We will store the TRUE and FALSE
34540>>>>>>>    // Values in the extended array.
34540>>>>>>>    Procedure Set Field_CheckBox_Values Integer iField String sTrue String sFalse
34542>>>>>>>        Integer iBase
34542>>>>>>>        Move (iField * FA_COUNT) to iBase
34543>>>>>>>        Set Value (iBase + FA_CHECKBOX_TRUE) to sTrue
34544>>>>>>>        Set Value (iBase + FA_CHECKBOX_FALSE) to sFalse
34545>>>>>>>        Set Field_Validation_Type iField to FA_VALIDATION_TYPE_CHECKBOX
34546>>>>>>>    End_Procedure
34547>>>>>>>    
34547>>>>>>>    // Return the Value associated with the field and its select-state.
34547>>>>>>>    Function Field_CheckBox_Value Integer iField Integer iState Returns String
34549>>>>>>>        Integer iBase
34549>>>>>>>        Integer iType
34549>>>>>>>        String sValue
34549>>>>>>>        Move (iField * FA_COUNT) to iBase
34550>>>>>>>        Get Field_Validation_Type iField to iType
34551>>>>>>>        If (iType <> FA_VALIDATION_TYPE_CHECKBOX) ;            Move iState to sValue
34554>>>>>>>        Else ;            Get Value (iBase + If(iState,FA_CHECKBOX_TRUE,FA_CHECKBOX_FALSE));            to sValue
34556>>>>>>>        Function_Return sValue
34557>>>>>>>    End_Function
34558>>>>>>>    
34558>>>>>>>    // Return the select_state based on the passed value and field
34558>>>>>>>    Function Field_Value_Select_State Integer iField String sValue Returns Integer
34560>>>>>>>        Integer iBase
34560>>>>>>>        Integer iType
34560>>>>>>>        String  sTrue
34560>>>>>>>        Integer iState
34560>>>>>>>        Integer iFile
34560>>>>>>>        Integer iField_Type
34560>>>>>>>        Move (iField * FA_COUNT) to iBase
34561>>>>>>>        Get Field_Validation_Type iField to iType
34562>>>>>>>        Get Value (iBase + FA_CHECKBOX_TRUE) to sTrue
34563>>>>>>>        If (iType <> FA_VALIDATION_TYPE_CHECKBOX) ;            Move (not(sValue=0 or sValue='')) to iState
34566>>>>>>>        Else Begin
34567>>>>>>>            Delegate Get Main_File to iFile
34569>>>>>>>            Get_Attribute DF_FIELD_TYPE of iFile iField to iField_Type
34572>>>>>>>            If (iField_Type = DF_BCD) ;                Move (Number(sValue)=Number(sTrue)) to iState
34575>>>>>>>            Else ; // DF_ASCII                Move (sValue=sTrue) to iState
34577>>>>>>>        End
34577>>>>>>>>
34577>>>>>>>        Function_Return iState
34578>>>>>>>    End_Function
34579>>>>>>>    
34579>>>>>>>    
34579>>>>>>>    // Check that the buffer value is one of the two checkbox values.
34579>>>>>>>    Function Validate_Field_Checkbox Integer iField Returns Integer
34581>>>>>>>        String  sTrue
34581>>>>>>>        String  sFalse
34581>>>>>>>        String  sValue
34581>>>>>>>        Integer iField_Type
34581>>>>>>>        Integer iResult
34581>>>>>>>        Integer iFile
34581>>>>>>>        Integer iBase
34581>>>>>>>        Move (iField * FA_COUNT) to iBase
34582>>>>>>>        Get Value (iBase + FA_CHECKBOX_TRUE) to sTrue
34583>>>>>>>        Get Value (iBase + FA_CHECKBOX_FALSE) to sFalse
34584>>>>>>>        Delegate Get Field_Current_Value iField to sValue
34586>>>>>>>        Delegate Get Main_File to iFile
34588>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iField_Type
34591>>>>>>>        Move 0 to iResult
34592>>>>>>>        If (iField_Type = DF_BCD) ;            Move (Number(sValue)=Number(sTrue) or ;            Number(sValue)=Number(sFalse)) to iResult
34595>>>>>>>        Else ; // DF_ASCII            Move (sValue=sTrue or sValue=sFalse) to iResult
34597>>>>>>>        If not iResult Begin
34599>>>>>>>            Delegate Send Field_Error iField DD_INVALID_CHECKBOX sTrue sFalse
34601>>>>>>>            Function_Return 1
34602>>>>>>>        End
34602>>>>>>>>
34602>>>>>>>    End_Function
34603>>>>>>>    
34603>>>>>>>    // Callback to provide all valid value for this validation.
34603>>>>>>>    // Just call back with the two true and false values
34603>>>>>>>    Procedure Field_Fill_List_Field_Checkbox Integer iField Integer iObj Integer iMsg
34605>>>>>>>        String  sTrue
34605>>>>>>>        String  sFalse
34605>>>>>>>        Integer iBase
34605>>>>>>>        Move (iField * FA_COUNT) to iBase
34606>>>>>>>        Get Value (iBase + FA_CHECKBOX_TRUE) to sTrue
34607>>>>>>>        Get Value (iBase + FA_CHECKBOX_FALSE) to sFalse
34608>>>>>>>        Send iMsg to iObj 0 sTrue '' 0 (NullrowId())
34609>>>>>>>        Send iMsg to iObj 1 sFalse '' 0 (NullrowId())
34610>>>>>>>    End_Procedure
34611>>>>>>>    
34611>>>>>>>    // The object keeps track of a validation table object. This table object
34611>>>>>>>    // can be any type of object must at a minimum understand a small message
34611>>>>>>>    // protocol (see xvaltbl.pkg for info)
34611>>>>>>>    Procedure Set Field_Value_Table Integer iField Integer iObj
34613>>>>>>>        Integer iBase
34613>>>>>>>        Move (iField * FA_COUNT) to iBase
34614>>>>>>>        Set Value (iBase + FA_TABLE_OBJECT) to iObj
34615>>>>>>>        Set Field_Validation_Type iField to FA_VALIDATION_TYPE_TABLE
34616>>>>>>>    End_Procedure
34617>>>>>>>    
34617>>>>>>>    // This valdates against a validation table if appropriate (if a table
34617>>>>>>>    // exists and the table's validate_State is T). It validates by passing
34617>>>>>>>    // the message validate_value to the validation table object
34617>>>>>>>    Function Validate_Field_Table Integer iField Returns Integer
34619>>>>>>>        Integer iBase
34619>>>>>>>        Integer iTableObj
34619>>>>>>>        String  sValue
34619>>>>>>>        Integer iResult
34619>>>>>>>        Move (iField * FA_COUNT) to iBase
34620>>>>>>>        Get Value (iBase + FA_TABLE_OBJECT) to iTableObj
34621>>>>>>>        If (iTableObj and Validate_State(iTableObj) ) Begin
34623>>>>>>>            Delegate Get Field_Current_Value iField to sValue
34625>>>>>>>            Get Validate_Value of iTableOBj sValue to iResult
34626>>>>>>>            If iResult ;                Delegate Send Field_Error iField DD_INVALID_VALUE_TABLE
34630>>>>>>>        End
34630>>>>>>>>
34630>>>>>>>        Function_Return iResult
34631>>>>>>>    End_Function
34632>>>>>>>    
34632>>>>>>>    // Callback to provide all valid value for this validation.
34632>>>>>>>    // Pass the request on to the validation table. This is the most common
34632>>>>>>>    // use of this.
34632>>>>>>>    Procedure Field_Fill_List_Field_Table Integer iField Integer iObj Integer iMsg
34634>>>>>>>        Integer iBase
34634>>>>>>>        Integer iTableObj
34634>>>>>>>        Move (iField * FA_COUNT) to iBase
34635>>>>>>>        Get Value (iBase + FA_TABLE_OBJECT) to iTableObj
34636>>>>>>>        If iTableObj ;            Send Request_Fill_From_List to iTableObj iObj iMsg
34639>>>>>>>    End_Procedure
34640>>>>>>>    
34640>>>>>>>    // Often extended valditation types can provide automatic prompt
34640>>>>>>>    // objects. If the extended type supports a prompt object and there is
34640>>>>>>>    // a global validation_list object, we will use it
34640>>>>>>>    Function Prompt_Object Integer iField Returns Integer
34642>>>>>>>        Integer iType
34642>>>>>>>        Integer iObj
34642>>>>>>>        Get Field_Validation_Type iField to iType
34643>>>>>>>        If not (iType=FA_VALIDATION_TYPE_NONE or iType=FA_VALIDATION_TYPE_RANGE) ;            Move DD_Global_Validation_Prompt_Object to iObj
34646>>>>>>>        Function_Return iObj
34647>>>>>>>    End_Function
34648>>>>>>>    
34648>>>>>>>    
34648>>>>>>>End_Class
34649>>>>>>>
34649>>>>>>>
34649>>>>>>>
34649>>>>>>>// use to keep track of file field pairs such as system file file/field
34649>>>>>>>Struct tDDFileField
34649>>>>>>>    Integer iFile
34649>>>>>>>    Integer iField
34649>>>>>>>End_Struct
34649>>>>>>>
34649>>>>>>>Class Field_Mask_Array is an Array
34650>>>>>>>    
34650>>>>>>>    Function Array_Name Integer iField Integer iType Returns String
34652>>>>>>>        String sName
34652>>>>>>>        Move (iField*FMA_COUNT+iType) to iField
34653>>>>>>>        If (Item_Count(Self)>iField) ;            Get value iField to sName
34656>>>>>>>        // sometimes an array value that is undefined returns a 0, we must change this to ''
34656>>>>>>>        If (sName = '0') ;            Move '' to sName
34659>>>>>>>        Function_Return sName
34660>>>>>>>    End_Function
34661>>>>>>>    
34661>>>>>>>    
34661>>>>>>>    Procedure Set Field_Mask_Type Integer iField Integer iType
34663>>>>>>>        Set Value (iField*FMA_COUNT+FMA_MASK_TYPE) to iType
34664>>>>>>>    End_Procedure
34665>>>>>>>    
34665>>>>>>>    Function Field_Mask_Type Integer iField Returns Integer
34667>>>>>>>        Integer iType
34667>>>>>>>        Move (iField*FMA_COUNT+FMA_MASK_TYPE) to iField
34668>>>>>>>        If (Item_Count(Self)>iField) ;            Get value iField to iType
34671>>>>>>>        Function_Return iType
34672>>>>>>>    End_Function
34673>>>>>>>    
34673>>>>>>>    Procedure Set Field_Mask_Value_State Integer iField Integer iState
34675>>>>>>>        Set Value (iField*FMA_COUNT+FMA_MASK_VALUE_STATE) to iState
34676>>>>>>>    End_Procedure
34677>>>>>>>    
34677>>>>>>>    Function Field_Mask_Value_State Integer iField Returns Integer
34679>>>>>>>        Integer iState
34679>>>>>>>        Move (iField*FMA_COUNT+FMA_MASK_VALUE_STATE) to iField
34680>>>>>>>        If (Item_Count(Self)>iField) ;            Get value iField to iState
34683>>>>>>>        Function_Return iState
34684>>>>>>>    End_Function
34685>>>>>>>    
34685>>>>>>>    Procedure Set Field_Mask Integer iField String sMask
34687>>>>>>>        Set Value (iField*FMA_COUNT+FMA_MASK) to sMask
34688>>>>>>>    End_Procedure
34689>>>>>>>    
34689>>>>>>>    Function Field_Mask Integer iField Returns String
34691>>>>>>>        Function_Return (Array_Name(Self,iField,FMA_MASK))
34692>>>>>>>    End_Function
34693>>>>>>>    
34693>>>>>>>    Procedure Set Field_Label_Short Integer iField String sName
34695>>>>>>>        Set Value (iField*FMA_COUNT+FMA_SHORT_NAME) to sName
34696>>>>>>>    End_Procedure
34697>>>>>>>    
34697>>>>>>>    Function Field_Label_Short Integer iField Returns String
34699>>>>>>>        Function_Return (Array_Name(Self,iField,FMA_SHORT_NAME))
34700>>>>>>>    End_Function
34701>>>>>>>    
34701>>>>>>>    Procedure Set Field_Label_Long Integer iField String sName
34703>>>>>>>        Set Value (iField*FMA_COUNT+FMA_LONG_NAME) to sName
34704>>>>>>>    End_Procedure
34705>>>>>>>    
34705>>>>>>>    Function Field_Label_Long Integer iField Returns String
34707>>>>>>>        Function_Return (Array_Name(Self,iField,FMA_LONG_NAME))
34708>>>>>>>    End_Function
34709>>>>>>>    
34709>>>>>>>    Procedure Set Field_Class_Name Integer iField String sName
34711>>>>>>>        Set Value (iField*FMA_COUNT+FMA_CLASS_NAME) to sName
34712>>>>>>>    End_Procedure
34713>>>>>>>    
34713>>>>>>>    Function Field_Class_Name Integer iField Returns String
34715>>>>>>>        Function_Return (Array_Name(Self,iField,FMA_CLASS_NAME))
34716>>>>>>>    End_Function
34717>>>>>>>    
34717>>>>>>>    Procedure Set Field_WebPrompt_Object Integer iField Handle hoPrompt
34719>>>>>>>        Set Value (iField*FMA_COUNT+FMA_WEBPROMPTOBJECT) to hoPrompt
34720>>>>>>>    End_Procedure
34721>>>>>>>    
34721>>>>>>>    Function Field_WebPrompt_Object Integer iField Returns Handle
34723>>>>>>>        Function_Return (Array_Name(Self,iField,FMA_WEBPROMPTOBJECT))
34724>>>>>>>    End_Function
34725>>>>>>>    
34725>>>>>>>End_Class
34726>>>>>>>
34726>>>>>>>Class DataDictionary is a DataSet
34727>>>>>>>    
34727>>>>>>>    Procedure Construct_Object
34729>>>>>>>        Forward Send Construct_Object
34731>>>>>>>        
34731>>>>>>>        Property String  Existing_Key_Value                           ""
34732>>>>>>>        Property Integer Protect_Key_State                            True
34733>>>>>>>        
34733>>>>>>>        Property String  Key_Fields                                   ""
34734>>>>>>>        
34734>>>>>>>        // These are added to support the checking of DSO connections
34734>>>>>>>        // during deletes and saves. Only the first two properties are Public
34734>>>>>>>        Property Integer Validate_Save_Structure_Mode   DD_Validate_Structure_Once
34735>>>>>>>        Property Integer Validate_Delete_Structure_Mode DD_Validate_Structure_Once
34736>>>>>>>        Property Integer Save_Structure_Validated_State              False
34737>>>>>>>        Property Integer Cascade_Delete_Structure_Validated_State    False
34738>>>>>>>        Property Integer No_Cascade_Delete_Structure_Validated_State False
34739>>>>>>>        
34739>>>>>>>        Property Integer Last_Mark_Sequence_Id                       0
34740>>>>>>>        
34740>>>>>>>        // These are added for optimized traversal of
34740>>>>>>>        // entry-update and validation and maybe more
34740>>>>>>>        Property String  Visited_Fields          ""
34741>>>>>>>        Property Integer Visited_State           False
34742>>>>>>>        // means will be part of a downward delete (cascade deletable). This only has meaning
34742>>>>>>>        // when cascade_delete_state is True
34742>>>>>>>        Property Boolean DownDelete_State        False
34743>>>>>>>        
34743>>>>>>>        // these are set by the define_auto_increment, which is obsolete and has been replaced
34743>>>>>>>        // the Set Field_auto_increment method.
34743>>>>>>>        Property Integer Auto_Increment_Source_File  0
34744>>>>>>>        Property Integer Auto_Increment_Source_Field 0
34745>>>>>>>        Property Integer Auto_Increment_Dest_Field   0
34746>>>>>>>        
34746>>>>>>>        // used by the set Field_auto_increment method
34746>>>>>>>        // these are split into two arrays to make searching for the field easier
34746>>>>>>>        // the arrays should always be synched.
34746>>>>>>>        Property Integer[] pAutoIncrementFields
34747>>>>>>>        Property tDDFileField[] pAutoIncrementSysFileFields
34748>>>>>>>        
34748>>>>>>>        // Error Reporting Related
34748>>>>>>>        // If DD_Error_No_Report errors would be supressed (only ERR gets set)
34748>>>>>>>        Property Integer Error_Report_Mode           DD_Error_Report
34749>>>>>>>        
34749>>>>>>>        // During validation, this is the field being validated.
34749>>>>>>>        Property Integer Current_Validate_Field      0
34750>>>>>>>        
34750>>>>>>>        // when errors are redirected locally this maintains the original handler.
34750>>>>>>>        Property Integer Old_Error_Object_Id         0
34751>>>>>>>        
34751>>>>>>>        // Must be provided if local error handler is to be created
34751>>>>>>>        Property Integer Error_Processing_State      0
34752>>>>>>>        
34752>>>>>>>        // These should be changed most carefully and possible only and the
34752>>>>>>>        // DSO level. These allow you to defeat full field validation which
34752>>>>>>>        // makes it easier to corrupt data! Validate_DEO_Only_State limits
34752>>>>>>>        // save validation to DEOs (which is what data-sets have always done).
34752>>>>>>>        // Validate_foreign_File_State will skip validation under the following
34752>>>>>>>        // conditions: 1) DSO if for a parent (it did not originate the save).
34752>>>>>>>        //
34752>>>>>>>        Property Integer Validate_DEOs_Only_State    False
34753>>>>>>>        Property Integer Validate_Foreign_File_State True
34754>>>>>>>        // if set true, a field validation requested started with this
34754>>>>>>>        // DD will check all fields, even in an error is encountered
34754>>>>>>>        Property Integer Validate_All_Fields_State   False
34755>>>>>>>        
34755>>>>>>>        // If true, all entry updates will occur through the DD. Else
34755>>>>>>>        // saves occur through the DD and find occur through the DEOs
34755>>>>>>>        Property Integer EntryUpdateLocalState True // changed from false to true in 17.0
34756>>>>>>>        
34756>>>>>>>        // can be used by Refind_records method (remote refind of recs). Obsolete. Use prFindRowId
34756>>>>>>>        Property Integer Find_Record_Id 0
34757>>>>>>>        
34757>>>>>>>        // can be used by Refind_records method (remote refind of recs)
34757>>>>>>>        Property RowID prFindRowId (NullRowId())
34758>>>>>>>        // can be used by Refind_records method (remote refind of recs)
34758>>>>>>>        Property tDDChangedInfo pDDChangedInfo
34759>>>>>>>        
34759>>>>>>>        // Private: Id of field_objects container. This is not created until needed
34759>>>>>>>        Property Integer Field_Objects 0
34760>>>>>>>        
34760>>>>>>>        // Public: If set the DDO will never be foreign, allowing
34760>>>>>>>        // you to create new parents when a child is saved. This would
34760>>>>>>>        // normally only be set within the DDO and not the class. This would be
34760>>>>>>>        // used where a child table wants to save the parent (header) when the
34760>>>>>>>        // first child is saved. It would disable the foreign key and index
34760>>>>>>>        // find_Req and required settings (as well as any displayonly).
34760>>>>>>>        Property Integer Allow_Foreign_New_Save_State False
34761>>>>>>>        
34761>>>>>>>        Set pbDDAttach to True // set false to get (very) old attach_main_file_behavior
34762>>>>>>>        Set pbSmartRelate to True // Only relate if parent is attached via a DDO
34763>>>>>>>        
34763>>>>>>>        // If this is an alias file, this is the master file it is based on
34763>>>>>>>        Property Handle piMasterTable 0
34764>>>>>>>        
34764>>>>>>>        Property tDDServerInformation[] pServerInformation
34765>>>>>>>        
34765>>>>>>>        Property tDDRemembered[] pDDDefaults
34766>>>>>>>        
34766>>>>>>>        Property Boolean pbInSuperFind False
34767>>>>>>>        
34767>>>>>>>        // Create the local buffer.
34767>>>>>>>        Object Record_Buffer is a cRecordBuffer
34769>>>>>>>        End_Object
34770>>>>>>>        
34770>>>>>>>        // Create the extended field attributes array.
34770>>>>>>>        Object Field_Attributes is a Field_Attributes
34772>>>>>>>        End_Object
34773>>>>>>>        
34773>>>>>>>        // Create an array to maintain Status help values for each field
34773>>>>>>>        Object Statushelp_Array is an array
34775>>>>>>>        End_Object
34776>>>>>>>        
34776>>>>>>>        Object FieldMask_Array is an Field_Mask_array
34778>>>>>>>        End_Object
34779>>>>>>>        
34779>>>>>>>        
34779>>>>>>>        // keep track of all system/unknown files that must be set to
34779>>>>>>>        // default for smart file mode to work right.
34779>>>>>>>        Object System_File_obj is an Array
34781>>>>>>>        End_Object
34782>>>>>>>        
34782>>>>>>>        // used during Request_Validate
34782>>>>>>>        Property Handle[] pDDsWithFindReqErrors
34783>>>>>>>        
34783>>>>>>>        // Apply SQL filters in constrained finds
34783>>>>>>>        Property Boolean pbUseDDSQLFilters False
34784>>>>>>>        // If pbUseDDSQLFilters is true, this determines if the table global filter should be applied as well
34784>>>>>>>        Property Boolean pbApplyGlobalSQLFilters False
34785>>>>>>>        // Filter which will get applied before each DDO constrained find. If "", no filter is applied
34785>>>>>>>        Property String psSQLFilter ""
34786>>>>>>>        
34786>>>>>>>        // Old values for SQL Filters which are pushed and popped by StoreSQLDefaultFilters and RestoreSQLDefaultFilters
34786>>>>>>>        Property String psOldFilter ""
34787>>>>>>>        Property Boolean pbOldFilterActive
34788>>>>>>>        Property Boolean pbOldFilterEq
34789>>>>>>>        
34789>>>>>>>        // used to point to the composite child object that provides the SQL
34789>>>>>>>        // interfaces for a driver. This can be used with DAW drivers. Other drivers may require
34789>>>>>>>        // that you sub-class your DD and create a different object based on a custom class
34789>>>>>>>        Property Handle phoSQLHelper (Create(Self,RefClass(cDAWSQLDriverHelper)))
34790>>>>>>>        
34790>>>>>>>        
34790>>>>>>>        Property Handle pbInResync False
34791>>>>>>>        
34791>>>>>>>        Property Integer piPrimaryIndex -1      // Indicates the unique index used by the webapp view state system (-1 defaults to the primary key or recnum for embedded).
34792>>>>>>>        
34792>>>>>>>        Set Smart_FileMode_State to True  // extended DSOs should default to true
34793>>>>>>>        
34793>>>>>>>        Send Define_Fields // Developer Hook - define all field rules
34794>>>>>>>    End_Procedure
34795>>>>>>>    
34795>>>>>>>    // Returns 1 to indicate that this is a DD class.
34795>>>>>>>    Function Extended_DSO_State Returns Integer
34797>>>>>>>        Function_Return 1
34798>>>>>>>    End_Function
34799>>>>>>>    
34799>>>>>>>    
34799>>>>>>>    // Used to set up all XDS functions and rules. Called by construct_object
34799>>>>>>>    // and considered a bit more user friendly.
34799>>>>>>>    Procedure Define_Fields
34801>>>>>>>    End_Procedure
34802>>>>>>>    
34802>>>>>>>    
34802>>>>>>>    
34802>>>>>>>    // This message has been augmented to create a local recordbuffer for a
34802>>>>>>>    // file. We cannot do this earlier because we need the file to count the
34802>>>>>>>    // number of necessary fields.
34802>>>>>>>    Procedure Set Main_File Integer iFile
34804>>>>>>>        Integer iCurrent_File iMaster
34804>>>>>>>        Get piMasterTable to iMaster
34805>>>>>>>        If iMaster Begin
34807>>>>>>>            // is an alias condition
34807>>>>>>>            Forward Set Main_File to iFile
34809>>>>>>>            Send ReDefineAliasItems to (Record_Buffer(Self)) iFile
34810>>>>>>>        End
34810>>>>>>>>
34810>>>>>>>        Else If iFile Begin
34813>>>>>>>            Get Main_File to iCurrent_File
34814>>>>>>>            If (iCurrent_File and iCurrent_File <> iFile) Begin
34816>>>>>>>                Send Data_Set_Error -1 DFERR_PROGRAM DD_CANNOT_CHANGE_MAIN_FILE
34817>>>>>>>                Procedure_Return
34818>>>>>>>            End
34818>>>>>>>>
34818>>>>>>>            Forward Set Main_File to iFile
34820>>>>>>>            Send Create_Items to (Record_Buffer(Self)) iFile
34821>>>>>>>            Send Create_Items to (Field_Attributes(Self))
34822>>>>>>>        End
34822>>>>>>>>
34822>>>>>>>    End_Procedure
34823>>>>>>>    
34823>>>>>>>    // This procedure will update the Key_Fields property to include or
34823>>>>>>>    // excluded the fieldnumber passed in the list of fieldnumbers which make
34823>>>>>>>    // up an keyvalue.
34823>>>>>>>    Procedure Set Key_Field_State Integer iField Integer iState
34825>>>>>>>        String  sKeys
34825>>>>>>>        Set Key_Field_State of Record_Buffer iField to iState
34826>>>>>>>        Get Key_Fields to sKeys
34827>>>>>>>        Set Key_Fields to (Overstrike(If(iState, "X", " "), sKeys, iField))
34828>>>>>>>    End_Procedure
34829>>>>>>>    
34829>>>>>>>    // Will return TRUE if the field passed has been defined as a key.
34829>>>>>>>    Function Key_Field_State Integer iField Returns Integer
34831>>>>>>>        Integer iState
34831>>>>>>>        Get Key_Field_State of Record_Buffer iField to iState
34832>>>>>>>        Function_Return iState
34833>>>>>>>    End_Function
34834>>>>>>>    
34834>>>>>>>    // Returns complete key value.
34834>>>>>>>    Function Key_Value Returns String
34836>>>>>>>        String  sKeys
34836>>>>>>>        String  sKey_Value
34836>>>>>>>        String  sValue
34836>>>>>>>        Integer iField
34836>>>>>>>        Get Key_Fields to sKeys
34837>>>>>>>        Move "" to sKey_Value
34838>>>>>>>        Repeat
34838>>>>>>>>
34838>>>>>>>            Move (Pos( "X",sKeys)) to iField
34839>>>>>>>            If iField Begin
34841>>>>>>>                Get Field_Current_Value iField to sValue
34842>>>>>>>                Append sKey_Value sValue
34843>>>>>>>                Move (Overstrike(" ", sKeys, iField)) to sKeys
34844>>>>>>>            End
34844>>>>>>>>
34844>>>>>>>        Until not iField
34846>>>>>>>        Function_Return sKey_Value
34847>>>>>>>    End_Function
34848>>>>>>>    
34848>>>>>>>    // This procedure will be called whenever the Data_Set changes its
34848>>>>>>>    // Current_Record property, or after a Save, Delete or Clear operation.
34848>>>>>>>    // We send this message to the Record_Buffer object to update its values.
34848>>>>>>>    Procedure New_Current_Record Integer iOld Integer iNew
34850>>>>>>>        // does nothing, but exists if developer is using this for some purpose. Is called after
34850>>>>>>>        // OnNewCurrentRecord (if recnum based table)
34850>>>>>>>    End_Procedure
34851>>>>>>>    
34851>>>>>>>    Procedure OnNewCurrentRecord RowID riOld RowID riNew
34853>>>>>>>        Integer iObj
34853>>>>>>>        Integer iOldst
34853>>>>>>>        Integer iFoc
34853>>>>>>>        Integer iIsExt
34853>>>>>>>        Forward Send OnNewCurrentRecord riOld riNew
34855>>>>>>>        Move (Record_Buffer(Self)) to iObj
34856>>>>>>>        If iObj Begin
34858>>>>>>>            Send OnNewCurrentRecord of iObj riOld riNew
34859>>>>>>>            // must also refresh all defined extended fields
34859>>>>>>>            Send ExtendedFieldsRefresh (IsNullRowId(riNew)) // pass bCleared (true if a clear)
34860>>>>>>>            Get Focus of Desktop to iFoc
34861>>>>>>>            Get Extended_DEO_State of iFoc to iIsExt     // if focus is deo item
34862>>>>>>>            If iIsExt Begin                               // disable the state so
34864>>>>>>>                Get Entry_Refresh_State of iFoc to iOldSt // value will come
34865>>>>>>>                Set Entry_Refresh_State of iFoc to True   // from Local buffer.
34866>>>>>>>            End
34866>>>>>>>>
34866>>>>>>>            Set Existing_Key_Value to (Key_Value(Self))
34867>>>>>>>            If iIsExt ;                Set Entry_Refresh_State of iFoc to iOldSt
34870>>>>>>>            // Only set defaults when the record is new
34870>>>>>>>            If (IsNullRowId(riNew)) ;                Send Prepare_Default_Values
34873>>>>>>>        End
34873>>>>>>>>
34873>>>>>>>    End_Procedure
34874>>>>>>>    
34874>>>>>>>    // Shuts off change mode and sends initialize_default_values which is
34874>>>>>>>    // a user hook routine.
34874>>>>>>>    Procedure Prepare_Default_Values
34876>>>>>>>        Integer iOldState
34876>>>>>>>        Get Change_disabled_State to iOldState
34877>>>>>>>        Set Change_disabled_State to True
34878>>>>>>>        Send Private_Field_Defaults
34879>>>>>>>        // set defaults if this is the main DDO or the DDO is
34879>>>>>>>        // flagged as supporting saving new records when foreign (a parent)
34879>>>>>>>        If (Operation_Origin=Self or ;            Allow_Foreign_New_Save_State(Self)) ;            Send Field_Defaults
34882>>>>>>>        Send AssignDynamicDefaults
34883>>>>>>>        Set Change_disabled_State to iOldState
34884>>>>>>>    End_Procedure
34885>>>>>>>    
34885>>>>>>>    // Set all checkbox fields to default to False data value.
34885>>>>>>>    Procedure Private_Field_Defaults
34887>>>>>>>        Integer iField
34887>>>>>>>        Repeat
34887>>>>>>>>
34887>>>>>>>            Get Next_Validation_Type of (Field_Attributes(Self)) ;                FA_VALIDATION_TYPE_CHECKBOX iField to iField
34888>>>>>>>            If (iField = 0) ;                Procedure_Return
34891>>>>>>>            Set Field_Select_State  iField to False
34892>>>>>>>            Set Field_Changed_State iField to True
34893>>>>>>>        Loop
34894>>>>>>>>
34894>>>>>>>    End_Procedure
34895>>>>>>>    
34895>>>>>>>    // Will be called after a clear operation to let the application
34895>>>>>>>    // programmer set the default values for the record. This should be done
34895>>>>>>>    // by sending SET Field_Current_Value.
34895>>>>>>>    Procedure Field_Defaults
34897>>>>>>>    End_Procedure
34898>>>>>>>    
34898>>>>>>>    // Pass type and string value and see if this is valid data for this
34898>>>>>>>    // type. Currently we check for numbers and dates. Return non-zero
34898>>>>>>>    // if invalid.
34898>>>>>>>    Function IsDataInvalid Integer iType String sValue Returns Integer
34900>>>>>>>        Date    dVal
34900>>>>>>>        DateTime dtVal
34900>>>>>>>        Number  nVal
34900>>>>>>>        Integer bOK
34900>>>>>>>        Boolean bInvalid
34900>>>>>>>        
34900>>>>>>>        Move False to bInvalid
34901>>>>>>>        If (iType=DF_BCD or iType=DF_DATE or iType=DF_DATETIME) Begin
34903>>>>>>>            If (iType=DF_DATE) Begin
34905>>>>>>>                MoveTrapErr sValue to dVal
34906>>>>>>>                Move (Err) to bInvalid
34907>>>>>>>            End
34907>>>>>>>>
34907>>>>>>>            Else If (iType=DF_DATETIME) Begin
34910>>>>>>>                MoveTrapErr sValue to dtVal
34911>>>>>>>                Move (Err) to bInvalid
34912>>>>>>>//          Move (not(IsDateValid(dtVal))) to bInvalid //jjt-uncomment when working
34912>>>>>>>            End
34912>>>>>>>>
34912>>>>>>>            Else Begin
34913>>>>>>>                MoveTrapErr sValue to nVal // this may gen an error.
34914>>>>>>>                Move (Err) to bInvalid
34915>>>>>>>            End
34915>>>>>>>>
34915>>>>>>>            Move False to Err
34916>>>>>>>        End
34916>>>>>>>>
34916>>>>>>>        Function_Return bInvalid
34917>>>>>>>    End_Function
34918>>>>>>>    
34918>>>>>>>    // Return 1 if the passed DEO is part of the DDs list of connected DEOs
34918>>>>>>>    // First check if server of DEO is this DD. If so, we are owned. If not
34918>>>>>>>    // we must check the DD's UI DEO list.
34918>>>>>>>    // The passed object MUST be a valid DEO or an error will occur.
34918>>>>>>>    Function IsDEOOwned Integer iDEO Returns Integer
34920>>>>>>>        Integer iMax iCount
34920>>>>>>>        // if DEOs server is same as current DD it is owned. This is the
34920>>>>>>>        // fast check
34920>>>>>>>        If (Server(iDEO)=Self) ;            Function_Return 1
34923>>>>>>>        // else see if the DEO is in the DD's DEO list
34923>>>>>>>        Get Data_Set_User_Interface_Count to iMax
34924>>>>>>>        Decrement iMax
34925>>>>>>>        For iCount from 0 to iMax
34931>>>>>>>>
34931>>>>>>>            If (Data_Set_User_Interface(Self,iCount)=iDEO) ;                Function_Return 1
34934>>>>>>>        Loop
34935>>>>>>>>
34935>>>>>>>        Function_Return 0
34936>>>>>>>    End_Function
34937>>>>>>>    
34937>>>>>>>    // This procedure changes the field value of the given field in the
34937>>>>>>>    // record-buffer object.
34937>>>>>>>    // It also sends Field_Value_Changed to notify every the attached DEOs.
34937>>>>>>>    // This has been optimized so this message is only sent when data is
34937>>>>>>>    // actually changed.
34937>>>>>>>    Procedure Set Field_Current_Value Integer iField String sValue
34939>>>>>>>        Integer iObj
34939>>>>>>>        String sOldVal
34939>>>>>>>        Integer iChanged
34939>>>>>>>        Integer iType
34939>>>>>>>        Integer iFile
34939>>>>>>>        Integer iFocObj
34939>>>>>>>        Integer iCrnt
34939>>>>>>>        Integer bInvalid
34939>>>>>>>        Integer iIdentity
34939>>>>>>>        Address pData
34939>>>>>>>        Integer iLen
34939>>>>>>>        
34939>>>>>>>        Get Main_File to iFile
34940>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
34943>>>>>>>        
34943>>>>>>>        // Overlap fields are not supported directly in DDs. It is expected
34943>>>>>>>        // that you will use the underlying fields instead
34943>>>>>>>        If (iType = DF_OVERLAP) Begin
34945>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_OVERLAP_ERROR
34946>>>>>>>            Procedure_Return
34947>>>>>>>        End
34947>>>>>>>>
34947>>>>>>>        
34947>>>>>>>        If (iType=DF_TEXT or iType=DF_BINARY) Begin // if text or binary direct to pointer
34949>>>>>>>            Move sValue to sValue // intentional code: make sure passed sValue is a really string
34950>>>>>>>            Move (SizeOfString(sValue)) to iLen // length to copy
34951>>>>>>>            Move (AddressOf(sValue)) to pData   // first byte of string
34952>>>>>>>            // will gen error if ext. field does not exist
34952>>>>>>>            Set Field_Current_Pointer_Value iField iLen to pData
34953>>>>>>>            Procedure_Return
34954>>>>>>>        End
34954>>>>>>>>
34954>>>>>>>        
34954>>>>>>>        
34954>>>>>>>        // If date or number, force conversion so any error is detected before
34954>>>>>>>        // the buffer is updated. We don't want the record buffer to contain
34954>>>>>>>        // invalid data
34954>>>>>>>        Get IsDataInvalid iType sValue to bInvalid
34955>>>>>>>        If bInvalid ;         // If an error occurred we have            Procedure_Return  // a bad number or a bad date. Do no more!
34958>>>>>>>        
34958>>>>>>>        Move (Record_Buffer(Self)) to iObj
34959>>>>>>>        Get Value of iObj iField to sOldVal
34960>>>>>>>        
34960>>>>>>>        Set Value of iObj iField to sValue
34961>>>>>>>        
34961>>>>>>>        // Augmented to handle non DF databases JJT
34961>>>>>>>        // Some tables may use some field other then recnum for their record identity.
34961>>>>>>>        // This will be dfrecnum or some other numeric field. When this happens the DD have
34961>>>>>>>        // to field buffers for the same value. When an update occurs from the DD to the DB buffer
34961>>>>>>>        // an update can occur twice. If the values are the same, this does not matter. Else the highest
34961>>>>>>>        // field value will get the update (not recnum). So if someone changes recnum but not its real field
34961>>>>>>>        // finding may not work right. The DD is updated when a record is found and the API keeps the two values
34961>>>>>>>        // the same. If the user changes recnum, the real field does not get changed. That is what we are fixing
34961>>>>>>>        // here. Note that: 1) this has no effect on Dataflex databases (or any DB that has a 0 field recnum).
34961>>>>>>>        // 2) this type of update is rarely seen anyway (you have to change just the recnum and perform an entry_update).
34961>>>>>>>        //
34961>>>>>>>        // if field is recnum and record identity is not 0, we must also update the other field.
34961>>>>>>>        If (iField=0) Begin
34963>>>>>>>            Get_Attribute DF_FILE_RECORD_IDENTITY of iFile to iIdentity
34966>>>>>>>            If (iIdentity>0) ;                Set Value of iObj iIdentity to sValue
34969>>>>>>>        End
34969>>>>>>>>
34969>>>>>>>        
34969>>>>>>>        // When data-sets are working they should not update the
34969>>>>>>>        // DEOs.
34969>>>>>>>        
34969>>>>>>>        // prior to vdf7, we stopped all operation modes of non-zero. We now allow
34969>>>>>>>        // validates to pass through and we have a new operation mode for this. This
34969>>>>>>>        // should be ok, since we already allowed navigation validation through - we just
34969>>>>>>>        // stopped request_validate validations.
34969>>>>>>>        If (Operation_Mode=0 or Operation_Mode=MODE_VALIDATING) Begin
34971>>>>>>>            If (iType=DF_BCD) ;                Move (Number(sValue)<>Number(sOldVal)) to iChanged
34974>>>>>>>            Else If (iType=DF_DATE) ;                Move (Date(sValue)<>Date(sOldVal)) to iChanged
34978>>>>>>>            Else If (iType=DF_DATETIME) ;                Move (Cast(sValue,DateTime)<>Cast(sOldVal,DateTime)) to iChanged
34982>>>>>>>            Else ;                Move (sValue<>sOldVal) to iChanged
34984>>>>>>>            // if changed, notify all DEOs of this change
34984>>>>>>>            If iChanged ;                Send Field_Value_Changed iField sValue
34987>>>>>>>            Else Begin
34988>>>>>>>                // If here the set value did not change the contents of the DD.
34988>>>>>>>                // However, it is possible that the current focus DEO may contain
34988>>>>>>>                // a different value than the one we are setting. In such a case
34988>>>>>>>                // we must re-synchronize the DEO. Only the one DEO can be affected
34988>>>>>>>                // because it is the current focus deo/item that can contain a value
34988>>>>>>>                // that is not yet updated in the DD. This fixes a bug where the
34988>>>>>>>                // iexit was setting a value which was different from what was in
34988>>>>>>>                // the DEO but was the same as the old DD value (iExit is called
34988>>>>>>>                // before the DD is re-synched with the DEO). This could happen
34988>>>>>>>                // also by sending this message directly with a different value in
34988>>>>>>>                // the DEO focus item.
34988>>>>>>>                Get Focus of Desktop to iFocObj
34989>>>>>>>                // similar logic to Get Field_Current_Value. We check that the DEO
34989>>>>>>>                // is extended, that entry_refresh is not disabled and that the
34989>>>>>>>                // DEO's server is this DD.
34989>>>>>>>                If ( Extended_DEO_State(iFocObj) and ;                    (Entry_Refresh_State(iFocObj)=0)) Begin
34991>>>>>>>                    Get Current_item of iFocObj to iCrnt
34992>>>>>>>                    // If Focus DEO has same file and field and it is not checkbox
34992>>>>>>>                    // we must set its value. Set local value directly sets the value
34992>>>>>>>                    // in the DEO item. If we used value we'd get recursion!
34992>>>>>>>                    If ( Data_File(iFocObj,iCrnt)=iFile and ;                        Data_Field(iFocObj,iCrnt)=iField and ;                        IsDEOOwned(Self,iFocObj) and ;                        Checkbox_item_State(iFocObj,iCrnt)=0 ) ;                        Send File_Field_Value_Changed to iFocObj iFile iField sValue True
34995>>>>>>>                    //Set Local_Value of iFocObj iCrnt to sValue
34995>>>>>>>                End
34995>>>>>>>>
34995>>>>>>>            End
34995>>>>>>>>
34995>>>>>>>        End
34995>>>>>>>>
34995>>>>>>>    End_Procedure
34996>>>>>>>    
34996>>>>>>>    // Sets Field_Current_Value and Sets Field_Changed_State for passed field.
34996>>>>>>>    Procedure Set Field_Changed_Value Integer iField String sValue
34998>>>>>>>        Set Field_Changed_State iField to True
34999>>>>>>>        Set Field_Current_Value iField to sValue
35000>>>>>>>    End_Procedure
35001>>>>>>>    
35001>>>>>>>    
35001>>>>>>>    // This should only be set by a DEO that is changing a NoPut value. This should only happen when NoEnter=F
35001>>>>>>>    // for indexed findable noput deos. With foreign-field noputs we may store the value and update them
35001>>>>>>>    // for finds but we don't want them for saves. The cDDBuffer class handles this but it needs to
35001>>>>>>>    // know if this was a DEO NoPut update. DDOs have always allowed you to directly update foreign NoPut
35001>>>>>>>    // fields when the change did not come from a DEO.
35001>>>>>>>    Procedure Set Field_NoPutValueChangedByDeo Integer iField Boolean bChange
35003>>>>>>>        Set Item_ChangedByDeo of Record_Buffer iField to bChange
35004>>>>>>>    End_Procedure
35005>>>>>>>    
35005>>>>>>>    Procedure Set File_Field_NoPutValueChangedByDeo Integer iFile Integer iField Boolean bChange
35007>>>>>>>        Integer iDSO
35007>>>>>>>        Get Data_set iFile to iDSO
35008>>>>>>>        If iDSO Begin
35010>>>>>>>            Set Field_NoPutValueChangedByDeo of iDSO iField to bChange
35011>>>>>>>        End
35011>>>>>>>>
35011>>>>>>>    End_Procedure
35012>>>>>>>    
35012>>>>>>>    // Returns the value from the record buffer for the field of which the
35012>>>>>>>    // fieldnumber has been passed.
35012>>>>>>>    // If the file/field requested is the focus file/field the use the DEO's
35012>>>>>>>    // value.
35012>>>>>>>    Function Field_Current_Value Integer iField Returns String
35014>>>>>>>        Integer iType
35014>>>>>>>        Integer iFile
35014>>>>>>>        String  sValue
35014>>>>>>>        Integer iFoc
35014>>>>>>>        Integer iCrnt
35014>>>>>>>        Integer iFldSize iVoid
35014>>>>>>>        UChar[] UCData
35015>>>>>>>        
35015>>>>>>>        Get Focus of desktop to iFoc
35016>>>>>>>        Get Main_File to iFile
35017>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
35020>>>>>>>        
35020>>>>>>>        // Overlap fields are not supported directly in DDs. It is expected
35020>>>>>>>        // that you will use the underlying fields instead
35020>>>>>>>        If (iType=DF_OVERLAP) Begin
35022>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_OVERLAP_ERROR
35023>>>>>>>            Function_Return ''
35024>>>>>>>        End
35024>>>>>>>>
35024>>>>>>>        
35024>>>>>>>        If (iType=DF_TEXT or iType=DF_BINARY) Begin // if overlap, text or binary direct to pointer
35026>>>>>>>            Get Field_Current_UCAValue iField to UCData
35027>>>>>>>            
35027>>>>>>>            // we assume a string is passed here. If we return to a string the
35027>>>>>>>            // pointer message will convert this to a string. Check that max string
35027>>>>>>>            // length is not larger than Max_Argument_Size has been removed.
35027>>>>>>>            Move (SizeOfArray(UCData)) to iFldSize
35028>>>>>>>            Move (UCharArrayToString(UCData)) to sValue
35029>>>>>>>            // This function has always returned the value as a 0 delimited string.
35029>>>>>>>            // Therefore trim at first zero. This means that you should not use this method
35029>>>>>>>            // with Binary types as embedded zeros will cause a truncation.
35029>>>>>>>            Move (CString(sValue)) to sValue
35030>>>>>>>            Function_Return sValue
35031>>>>>>>        End
35031>>>>>>>>
35031>>>>>>>        
35031>>>>>>>        // This was extended to also make sure that the focus's server
35031>>>>>>>        // is this DD. This prevent the (very unlikely) case of a focus
35031>>>>>>>        // file/field being the right file/field but for a different view.
35031>>>>>>>        // 12.1: Also check operation mode, if within an operation assume that the
35031>>>>>>>        // ddos have the information they need from the deos. During a refresh we don't
35031>>>>>>>        // the data to be taken from a DEO - the DD buffer has the information you want. Note that
35031>>>>>>>        // we also changed all methods that set operation_mode to update the DD with the current
35031>>>>>>>        // DEO field, so the buffer is always correct.
35031>>>>>>>        If ( (OPERATION_MODE=MODE_WAITING) and ;            Extended_DEO_State(iFoc) and (Entry_Refresh_State(iFoc)=0) ) Begin
35033>>>>>>>            Get Current_item of iFoc to iCrnt
35034>>>>>>>            If ( Data_File(iFoc,iCrnt)=iFile and Data_Field(iFoc,iCrnt)=iField and ;                IsDEOOwned(Self,iFoc) and ;                (Checkbox_item_State(iFoc,iCrnt)=0) ) Begin
35036>>>>>>>                Get Data_Value of iFoc iCrnt to sValue
35037>>>>>>>            End
35037>>>>>>>>
35037>>>>>>>            Else Begin
35038>>>>>>>                Get Value of (Record_Buffer(Self)) iField to sValue
35039>>>>>>>            End
35039>>>>>>>>
35039>>>>>>>        End
35039>>>>>>>>
35039>>>>>>>        Else Begin
35040>>>>>>>            Get Value of (Record_Buffer(Self)) iField to sValue
35041>>>>>>>        End
35041>>>>>>>>
35041>>>>>>>        
35041>>>>>>>        // cast value to the proper datatype
35041>>>>>>>        If (iType=DF_BCD) Begin
35043>>>>>>>            Function_Return (Number(sValue))
35044>>>>>>>        End
35044>>>>>>>>
35044>>>>>>>        Else If (iType=DF_DATE) Begin
35047>>>>>>>            Function_Return (Date(sValue))
35048>>>>>>>        End
35048>>>>>>>>
35048>>>>>>>        Else If (iType=DF_DATETIME) Begin
35051>>>>>>>            Function_Return (Cast(sValue,DateTime))
35052>>>>>>>        End
35052>>>>>>>>
35052>>>>>>>        // else return as string
35052>>>>>>>        Function_Return sValue
35053>>>>>>>    End_Function
35054>>>>>>>    
35054>>>>>>>    // This sets a default value without setting the DSO's changed_State
35054>>>>>>>    Procedure Set Field_Default_Value Integer iField String sValue
35056>>>>>>>        Integer iOldState
35056>>>>>>>        Get Change_disabled_State to iOldState
35057>>>>>>>        Set Change_disabled_State to True
35058>>>>>>>        Set Field_Changed_Value iField to sValue
35059>>>>>>>        Set Change_disabled_State to iOldState
35060>>>>>>>    End_Procedure
35061>>>>>>>    
35061>>>>>>>    Procedure Set File_Field_default_Value Integer iFile Integer iField String sValue
35063>>>>>>>        Integer iDSO
35063>>>>>>>        Get Data_set iFile to iDSO
35064>>>>>>>        If iDSO ;            Set Field_default_Value of iDSO iField to sValue
35067>>>>>>>    End_Procedure
35068>>>>>>>    
35068>>>>>>>    // Methods to set and get the value of a field. When set all DSOs and
35068>>>>>>>    // DEOs are notified.
35068>>>>>>>    Procedure Set File_Field_Current_Value Integer iFile Integer iField String sValue
35070>>>>>>>        Integer iDSO
35070>>>>>>>        Get Data_set iFile to iDSO
35071>>>>>>>        If iDSO ;            Set Field_Current_Value of iDSO iField to sValue
35074>>>>>>>    End_Procedure
35075>>>>>>>    
35075>>>>>>>    Procedure Set File_Field_Changed_Value Integer iFile Integer iField String sValue
35077>>>>>>>        Integer iDSO
35077>>>>>>>        Get Data_set iFile to iDSO
35078>>>>>>>        If iDSO ;            Set Field_Changed_Value of iDSO iField to sValue
35081>>>>>>>    End_Procedure
35082>>>>>>>    
35082>>>>>>>    Function File_Field_Current_Value Integer iFile Integer iField Returns String
35084>>>>>>>        Integer iDSO
35084>>>>>>>        String sValue
35084>>>>>>>        Get Data_set iFile to iDSO
35085>>>>>>>        If iDSO ;            Get Field_Current_Value of iDSO iField to sValue
35088>>>>>>>        Function_Return sValue
35089>>>>>>>    End_Function
35090>>>>>>>    
35090>>>>>>>    // This procedure will notify every attached DEO that the value of a
35090>>>>>>>    // field has been changed. Every DEO needs to update its value to reflect
35090>>>>>>>    // the new value.
35090>>>>>>>    Procedure Field_Value_Changed Integer iField String sValue
35092>>>>>>>        Integer iMax
35092>>>>>>>        Integer iCount
35092>>>>>>>        Integer iDEO
35092>>>>>>>        Integer iMain_File
35092>>>>>>>        Integer iNoChange
35092>>>>>>>        Get Change_Disabled_State to iNoChange
35093>>>>>>>        Get Main_File to iMain_File
35094>>>>>>>        Get Data_Set_User_Interface_Count to iMax
35095>>>>>>>        Decrement iMax
35096>>>>>>>        For iCount from 0 to iMax
35102>>>>>>>>
35102>>>>>>>            Get Data_Set_User_Interface iCount to iDEO
35103>>>>>>>            If (Extended_DEO_State(iDEO) ) Begin
35105>>>>>>>                Send File_Field_Value_Changed to iDEO iMain_File iField sValue iNoChange
35106>>>>>>>            End
35106>>>>>>>>
35106>>>>>>>        Loop
35107>>>>>>>>
35107>>>>>>>    End_Procedure
35108>>>>>>>    
35108>>>>>>>    // Gets/Sets Field_Changed_State of the passed field. Will Set Changed_
35108>>>>>>>    // state if appropriate (if change_disabled_state is false)
35108>>>>>>>    Function Field_Changed_State Integer iField Returns Integer
35110>>>>>>>        Function_Return ;            (Item_Changed_State(Record_Buffer(Self), iField))
35111>>>>>>>    End_Function
35112>>>>>>>    
35112>>>>>>>    
35112>>>>>>>    // Handle NoPut here. If the field is noput set the field_changed_State but do not set the
35112>>>>>>>    // DD's changed_state. As of 17.0, we changed the rule so that noput DEOs always update the DD.
35112>>>>>>>    // They set the field_Current_value and they set the field_changed_state. If noput they will
35112>>>>>>>    // not set changed_state. This now makes windows and web consistent.
35112>>>>>>>    Procedure Set Field_Changed_State Integer iField Integer iState
35114>>>>>>>        Boolean bNoPut bOldSt bIsCommitted
35114>>>>>>>        
35114>>>>>>>        Get Field_Option iField DD_NOPUT to bNoPut
35115>>>>>>>        If not bNoPut Begin // if not noput, see if this is a committed and therefore noput
35117>>>>>>>            Get IsCommitted to bIsCommitted
35118>>>>>>>            If bIsCommitted Begin
35120>>>>>>>                Get IsFieldCommitted iField to bNoPut
35121>>>>>>>            End
35121>>>>>>>>
35121>>>>>>>        End
35121>>>>>>>>
35121>>>>>>>        
35121>>>>>>>        If bNoPut Begin
35123>>>>>>>            Get Change_disabled_State to bOldSt
35124>>>>>>>            Set Change_disabled_State to True
35125>>>>>>>        End
35125>>>>>>>>
35125>>>>>>>        
35125>>>>>>>        Set Item_Changed_State of (Record_Buffer(Self)) iField to iState
35126>>>>>>>        // the cDDBuffer class item_changed_state does not attempt to set
35126>>>>>>>        // changed_state, so we do it here. This will allow for future
35126>>>>>>>        // greater flexibilities.
35126>>>>>>>        If (iState) Begin
35128>>>>>>>            Set Changed_State of (Record_Buffer(Self)) to True
35129>>>>>>>        End
35129>>>>>>>>
35129>>>>>>>        If bNoPut Begin
35131>>>>>>>            Set Change_disabled_State to bOldSt
35132>>>>>>>        End
35132>>>>>>>>
35132>>>>>>>        
35132>>>>>>>    End_Procedure
35133>>>>>>>    
35133>>>>>>>    // As above, but passes both file and field
35133>>>>>>>    Function File_Field_Changed_State Integer iFile Integer iField Returns Integer
35135>>>>>>>        Integer iDSO
35135>>>>>>>        Get Data_Set iFile to iDSO
35136>>>>>>>        If iDSO ;            Function_Return (Field_Changed_State(iDSO, iField))
35139>>>>>>>    End_Function
35140>>>>>>>    
35140>>>>>>>    Procedure Set File_Field_Changed_State Integer iFile Integer iField Integer iState
35142>>>>>>>        Integer iDSO
35142>>>>>>>        Get Data_Set iFile to iDSO
35143>>>>>>>        If iDSO ;            Set Field_Changed_State of iDSO iField to iState
35146>>>>>>>    End_Procedure
35147>>>>>>>    
35147>>>>>>>    // This simulates entering a value into a field from a keyboard. Pass the
35147>>>>>>>    // Field and DD Options and the value. It is up to you to pass the proper
35147>>>>>>>    // DD options. This is normally sent by File_Field_Entry and you are
35147>>>>>>>    // advised to use that message and not this one.
35147>>>>>>>    Procedure Set Field_Entry Integer iField Integer iOpts Integer bShowErr String sValue
35149>>>>>>>        Integer iFile
35149>>>>>>>        Integer iType
35149>>>>>>>        Integer bChanged
35149>>>>>>>        Integer bInvalid
35149>>>>>>>        Integer hObj
35149>>>>>>>        String sOldVal
35149>>>>>>>        Address pData
35149>>>>>>>        Integer iLen
35149>>>>>>>        
35149>>>>>>>        Get Main_File to iFile
35150>>>>>>>        
35150>>>>>>>        // if No-enter or Displayonly, this shouldn't be changed. We will
35150>>>>>>>        // let NoPut through, since a user might need it for finding.
35150>>>>>>>        If (iOpts iand DD_NOENTER) ;            Procedure_Return
35153>>>>>>>        
35153>>>>>>>        // Force a caplsock if required
35153>>>>>>>        If (iOpts iand DD_CAPSLOCK) ;            Move (Uppercase(sValue)) to sValue
35156>>>>>>>        
35156>>>>>>>        // If date or number, force conversion so any error is detected before
35156>>>>>>>        // the buffer is updated. We don't want the record buffer to contain
35156>>>>>>>        // invalid data
35156>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
35159>>>>>>>        
35159>>>>>>>        // Overlap fields are not supported directly in DDs. It is expected
35159>>>>>>>        // that you will use the underlying fields instead
35159>>>>>>>        If (iType = DF_OVERLAP) Begin
35161>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_OVERLAP_ERROR
35162>>>>>>>            Procedure_Return
35163>>>>>>>        End
35163>>>>>>>>
35163>>>>>>>        
35163>>>>>>>        If (iType=DF_TEXT or iType=DF_BINARY) Begin // if text or binary direct to pointer
35165>>>>>>>            Move sValue to sValue // intentional code: make sure passed sValue is a really string
35166>>>>>>>            Move (SizeOfString(sValue)) to iLen // length to copy
35167>>>>>>>            Move (AddressOf(sValue)) to pData   // first byte of string
35168>>>>>>>            // will gen error if ext. field does not exist
35168>>>>>>>            Set Field_Pointer_Entry iField iOpts iLen bShowErr to pData
35169>>>>>>>            Procedure_Return
35170>>>>>>>        End
35170>>>>>>>>
35170>>>>>>>        
35170>>>>>>>        Get IsDataInvalid iType sValue to bInvalid
35171>>>>>>>        If bInvalid Begin     // If an error occurred we have
35173>>>>>>>            If bShowErr ;                Send Data_set_error iField (If(iType=DF_DATE or iType=DF_DATETIME, DFERR_ENTER_VALID_DATE, DFERR_BAD_ENTRY)) ;                (" ("-sValue-")")
35176>>>>>>>            Procedure_Return  // a bad number or a bad date. Do no more!
35177>>>>>>>        End
35177>>>>>>>>
35177>>>>>>>        // update the value only if the value is changed.
35177>>>>>>>        Move (Record_Buffer(Self)) to hObj
35178>>>>>>>        Get Value of hObj iField to sOldVal
35179>>>>>>>        If (iType=DF_BCD) ;            Move (Number(sValue)<>Number(sOldVal)) to bChanged
35182>>>>>>>        Else If (iType=DF_DATE) ;            Move (Date(sValue)<>Date(sOldVal)) to bChanged
35186>>>>>>>        Else If (iType=DF_DATETIME) ;            Move (Cast(sValue,DateTime)<>Cast(sOldVal,DateTime)) to bChanged
35190>>>>>>>        Else ;            Move (sValue<>sOldVal) to bChanged
35192>>>>>>>        
35192>>>>>>>        // if changed or force put, update the value.
35192>>>>>>>        If ( bChanged or (iOpts iand DD_FORCEPUT) ) ;            Set Field_Current_Value iField to sValue
35195>>>>>>>        
35195>>>>>>>        // Set changed state if changed. This is an improvement on DEOs which would set changed-state for
35195>>>>>>>        // a no-put. Set Field_Changed_State will not set Changed_state if it is noput
35195>>>>>>>        If ( bChanged) Begin
35197>>>>>>>            Set Field_Changed_State iField to True
35198>>>>>>>            // if noput (but not noenter) we must tell the DDO that this should not be
35198>>>>>>>            // updated during a save.
35198>>>>>>>            If (iOpts iand DD_NOPUT) Begin
35200>>>>>>>                Set Field_NoPutValueChangedByDeo iField to True
35201>>>>>>>            End
35201>>>>>>>>
35201>>>>>>>        End
35201>>>>>>>>
35201>>>>>>>        
35201>>>>>>>        // perform autofinds if needed. Note that required checking will occur as
35201>>>>>>>        // part of validation.
35201>>>>>>>        // We will only autofind if the field value is changed. This is consistent with
35201>>>>>>>        // DEOs which do not autofind on unchanged values. This provides optimizations
35201>>>>>>>        // when a parent record is already loaded.
35201>>>>>>>        If (bChanged or Field_Changed_state(Self,iField)) Begin
35203>>>>>>>            // note that autofind is 1 and _ge is 100000001 (8th bit set). So order of
35203>>>>>>>            // testing is important and make sure we test for exact bit match. Must first
35203>>>>>>>            // test _GE and the EQ (because EQ bit is part of GE)
35203>>>>>>>            If ((iOpts iand DD_AUTOFIND_GE)=DD_AUTOFIND_GE) ;                Send File_Field_AutoFind iFile iField GE
35206>>>>>>>            Else If ((iOpts iand DD_AUTOFIND)=DD_AUTOFIND) ;                Send File_Field_AutoFind iFile iField EQ
35210>>>>>>>        End
35210>>>>>>>>
35210>>>>>>>        
35210>>>>>>>    End_Procedure
35211>>>>>>>    
35211>>>>>>>    // This returns file-field options for a Field_Entry type of environment.
35211>>>>>>>    // It will strip autofind from main-file DDs but leave foreign field alone.
35211>>>>>>>    // This is needed for Field_entry. Otherwise adding a field value to an autofind
35211>>>>>>>    // for save or find causes an autofind to trigger first which either causes the
35211>>>>>>>    // wrong rec to save or for a double find.
35211>>>>>>>    Function File_Field_Entry_Options Integer iFile Integer iField Returns Integer
35213>>>>>>>        Integer iOpts
35213>>>>>>>        // this will get the appropriate field and foreign field opts
35213>>>>>>>        Get File_Field_Options iFile iField to iOpts
35214>>>>>>>        // If the main file (not foreign) we will strip autofind. Autofind should not
35214>>>>>>>        // be an automatic part of main file entry while it should with foreign fields.
35214>>>>>>>        If (iFile=Main_File(Self)) Begin
35216>>>>>>>            // note that autofind is 1 and _ge is 100000001 (8th bit set). So order of
35216>>>>>>>            // testing is important and make sure we test for exact bit match. Must first
35216>>>>>>>            // test _GE and the EQ (because EQ bit is part of GE)
35216>>>>>>>            If ((iOpts iand DD_AUTOFIND_GE)=DD_AUTOFIND_GE) ;                Move (iOpts - DD_AUTOFIND_GE) to iOpts
35219>>>>>>>            Else If ((iOpts iand DD_AUTOFIND)=DD_AUTOFIND)  ;                Move (iOpts - DD_AUTOFIND)    to iOpts
35223>>>>>>>        End
35223>>>>>>>>
35223>>>>>>>        Function_Return iOpts
35224>>>>>>>    End_Function
35225>>>>>>>    
35225>>>>>>>    // This simulates entering a value into a field from a keyboard. The DD
35225>>>>>>>    // receiving this message determines if it is Main or Foreign (just like
35225>>>>>>>    // server). It will do an uppercase, will respect No_Enter and DisplayOnly
35225>>>>>>>    // and will do a autofind if required. It does not do a field validation.
35225>>>>>>>    Procedure Set File_Field_Entry Integer iFile Integer iField Integer bShowErr String sValue
35227>>>>>>>        Integer iOpts
35227>>>>>>>        Integer hDD
35227>>>>>>>        Get Data_Set iFile to hDD
35228>>>>>>>        If hDD Begin
35230>>>>>>>            // this will get the appropriate field and foreign field opts
35230>>>>>>>            Get File_Field_Entry_Options iFile iField to iOpts
35231>>>>>>>            Set Field_Entry of hDD iField iOpts bShowErr to sValue
35232>>>>>>>        End
35232>>>>>>>>
35232>>>>>>>    End_Procedure
35233>>>>>>>    
35233>>>>>>>    // return object ID of extended field, 0 if none
35233>>>>>>>    Function Field_Object Integer iField Returns Integer
35235>>>>>>>        Integer hoFlds hoField
35235>>>>>>>        Boolean bAutoAssign
35235>>>>>>>        Get Field_Objects to hoFlds
35236>>>>>>>        If hoFlds Begin
35238>>>>>>>            Get Field_Object of hoFlds iField to hoField
35239>>>>>>>        End
35239>>>>>>>>
35239>>>>>>>        If not hoField Begin
35241>>>>>>>            Send DefineExtendedField iField // will create field_objects and Field_Object as needed
35242>>>>>>>            Get Field_Objects to hoFlds
35243>>>>>>>            Get Field_Object of hoFlds iField to hoField
35244>>>>>>>        End
35244>>>>>>>>
35244>>>>>>>        Function_Return hoField
35245>>>>>>>    End_Function
35246>>>>>>>    
35246>>>>>>>    // This is the same as Field_entry except the value is passed via a
35246>>>>>>>    // pointer. If data-type is extended (text/binary) it will use and an
35246>>>>>>>    // extended field object to handle this. If date/number/string we will
35246>>>>>>>    // convert this to a string and use Field_Entry. It is the caller's
35246>>>>>>>    // responsibility to pass a valid pointer to valid data...else !@#$%^&^
35246>>>>>>>    // If an extended Field object is needed and not defined, an error is
35246>>>>>>>    // returned. If pointer is null, assume empty string passed (this is a
35246>>>>>>>    // change as of 8.3 - it used to ignore null pointers)
35246>>>>>>>    Procedure Set Field_Pointer_Entry Integer iField Integer iOpts Integer iLen Integer bShowErr Address pData
35248>>>>>>>        Integer hFld
35248>>>>>>>        String  sValue
35248>>>>>>>        Integer iFile
35248>>>>>>>        Integer iType
35248>>>>>>>        
35248>>>>>>>        Get Main_file to iFile
35249>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
35252>>>>>>>        
35252>>>>>>>        // Overlap fields are not supported directly in DDs. It is expected
35252>>>>>>>        // that you will use the underlying fields instead
35252>>>>>>>        If (iType = DF_OVERLAP) ;            Send Data_set_Error iField DFERR_PROGRAM  DD_EXTENDED_OVERLAP_ERROR
35255>>>>>>>        Else If (iType=DF_TEXT or iType=DF_BINARY) Begin
35258>>>>>>>            Get Field_Object iField to hFld // the object that handles this large text
35259>>>>>>>            If hFld ;                Set Field_pEntry of hFld iOpts iLen bShowErr to pData
35262>>>>>>>            Else ;                Send Data_set_Error iField DFERR_PROGRAM  DD_EXTENDED_FIELD_NOT_DEFINED
35264>>>>>>>        End
35264>>>>>>>>
35264>>>>>>>        Else Begin
35265>>>>>>>            // if number,date or string convert the pointer data to
35265>>>>>>>            // string data and do a normal entry with it.
35265>>>>>>>            Move (PointerToString(pData)) to sValue
35266>>>>>>>            Set Field_Entry iField iOpts bShowErr to sValue
35267>>>>>>>        End
35267>>>>>>>>
35267>>>>>>>    End_Procedure
35268>>>>>>>    
35268>>>>>>>    // This is the same as File_Field_entry except the value is passed via a
35268>>>>>>>    // pointer. See Field_Pointer_Entry for more on this
35268>>>>>>>    Procedure Set File_Field_Pointer_Entry Integer iFile Integer iField Integer iLen Integer bShowErr Address pData
35270>>>>>>>        Integer iOpts
35270>>>>>>>        Integer hDD
35270>>>>>>>        Get Data_Set iFile to hDD
35271>>>>>>>        If hDD Begin
35273>>>>>>>            // this will get the appropriate field and foreign field opts
35273>>>>>>>            Get File_Field_Entry_Options iFile iField to iOpts
35274>>>>>>>            Set Field_Pointer_Entry of hDD iField iOpts iLen bShowErr to pData
35275>>>>>>>        End
35275>>>>>>>>
35275>>>>>>>    End_Procedure
35276>>>>>>>    
35276>>>>>>>    // This is the same as Field_Current_Value except the value is passed via
35276>>>>>>>    // a pointer. If data-type is extended (text/binary) it will use and an
35276>>>>>>>    // extended field object to handle this. If date/number/string we will
35276>>>>>>>    // convert this to a string and use Field_Entry. It is the caller's
35276>>>>>>>    // responsibility to pass a valid pointer to valid data...else !@#$%^&^
35276>>>>>>>    // If an extended Field object is needed and not defined, an error is
35276>>>>>>>    // returned. If pointer is null, assume empty string passed (this is a
35276>>>>>>>    // change as of 8.3 - it used to ignore null pointers)
35276>>>>>>>    Procedure Set Field_Current_Pointer_Value Integer iField Integer iLen Address pData
35278>>>>>>>        Integer hFld
35278>>>>>>>        String  sValue
35278>>>>>>>        Integer iFile iType iCrnt
35278>>>>>>>        Handle iFocObj
35278>>>>>>>        Boolean bChanged
35278>>>>>>>        
35278>>>>>>>        Get Main_file to iFile
35279>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
35282>>>>>>>        
35282>>>>>>>        // Overlap fields are not supported directly in DDs. It is expected
35282>>>>>>>        // that you will use the underlying fields instead
35282>>>>>>>        If (iType = DF_OVERLAP) Begin
35284>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_OVERLAP_ERROR
35285>>>>>>>            Procedure_Return
35286>>>>>>>        End
35286>>>>>>>>
35286>>>>>>>        
35286>>>>>>>        If (iType<>DF_TEXT and iType<>DF_BINARY) Begin
35288>>>>>>>            // if number,date or string convert the pointer data to
35288>>>>>>>            // string data and do a normal entry with it.
35288>>>>>>>            Move (PointerToString(pData)) to sValue  // create string from pointer data
35289>>>>>>>            Set Field_Current_Value iField to sValue
35290>>>>>>>            Procedure_Return
35291>>>>>>>        End
35291>>>>>>>>
35291>>>>>>>        
35291>>>>>>>        Get Field_Object iField to hFld // the object that handles this large text
35292>>>>>>>        If not hFld Begin
35294>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_FIELD_NOT_DEFINED
35295>>>>>>>            Procedure_Return
35296>>>>>>>        End
35296>>>>>>>>
35296>>>>>>>        
35296>>>>>>>        Get Is_pValueChanged of hFld iLen pData to bChanged
35297>>>>>>>        If bChanged Begin
35299>>>>>>>            Set Field_pValue of hFld iLen to pData
35300>>>>>>>            Send Field_Pointer_Value_Changed iField pData
35301>>>>>>>        End
35301>>>>>>>>
35301>>>>>>>        Else Begin
35302>>>>>>>            // If here the set value did not change the contents of the DD.
35302>>>>>>>            // However, it is possible that the current focus DEO may contain
35302>>>>>>>            // a different value than the one we are setting. In such a case
35302>>>>>>>            // we must re-synchronize the DEO. Only the one DEO can be affected
35302>>>>>>>            // because it is the current focus deo/item that can contain a value
35302>>>>>>>            // that is not yet updated in the DD. This fixes a bug where the
35302>>>>>>>            // iexit was setting a value which was different from what was in
35302>>>>>>>            // the DEO but was the same as the old DD value (iExit is called
35302>>>>>>>            // before the DD is re-synched with the DEO). This could happen
35302>>>>>>>            // also by sending this message directly with a different value in
35302>>>>>>>            // the DEO focus item.
35302>>>>>>>            Get Focus of Desktop to iFocObj
35303>>>>>>>            // similar logic to Get Field_Pointer_Current_Value. We check that the DEO
35303>>>>>>>            // is extended, that entry_refresh is not disabled and that the
35303>>>>>>>            // DEO's server is this DD.
35303>>>>>>>            If ( Extended_DEO_State(iFocObj) and (Entry_Refresh_State(iFocObj)=0)) Begin
35305>>>>>>>                // If Focus DEO has same file and field and it is not checkbox
35305>>>>>>>                // we must set its value. Set local value directly sets the value
35305>>>>>>>                // in the DEO item. If we used value we'd get recursion!
35305>>>>>>>                Get Current_item of iFocObj to iCrnt
35306>>>>>>>                If ( Data_File(iFocObj,iCrnt)=iFile and ;                    Data_Field(iFocObj,iCrnt)=iField and ;                    IsDEOOwned(Self,iFocObj) ) Begin
35308>>>>>>>                    Send File_Field_Pointer_Value_Changed to iFocObj iFile iField pData True
35309>>>>>>>                End
35309>>>>>>>>
35309>>>>>>>            End
35309>>>>>>>>
35309>>>>>>>        End
35309>>>>>>>>
35309>>>>>>>    End_Procedure
35310>>>>>>>    
35310>>>>>>>    // This is never called but it needed for the compiler. Required for apps DDs that don't compile in a DEO interface
35310>>>>>>>    Procedure File_Field_Pointer_Value_Changed Integer iFile Integer iField Address pValue Integer iChangeDisabled
35312>>>>>>>    End_Procedure
35313>>>>>>>    
35313>>>>>>>    Procedure Field_Pointer_Value_Changed Integer iField Address pValue
35315>>>>>>>        Integer iMax
35315>>>>>>>        Integer iCount
35315>>>>>>>        Integer iDEO
35315>>>>>>>        Integer iMain_File
35315>>>>>>>        Integer iNoChange
35315>>>>>>>        Get Change_Disabled_State to iNoChange
35316>>>>>>>        Get Main_File to iMain_File
35317>>>>>>>        Get Data_Set_User_Interface_Count to iMax
35318>>>>>>>        Decrement iMax
35319>>>>>>>        For iCount from 0 to iMax
35325>>>>>>>>
35325>>>>>>>            Get Data_Set_User_Interface iCount to iDEO
35326>>>>>>>            If (Extended_DEO_State(iDEO) ) Begin
35328>>>>>>>                Send File_Field_Pointer_Value_Changed to iDEO iMain_File iField pValue iNoChange
35329>>>>>>>            End
35329>>>>>>>>
35329>>>>>>>        Loop
35330>>>>>>>>
35330>>>>>>>    End_Procedure
35331>>>>>>>    
35331>>>>>>>    // This is the same as File_Field_Current_Value except the value is passed
35331>>>>>>>    // via a pointer. See Field_current_Pointer_Value for more on this
35331>>>>>>>    Procedure Set File_Field_Current_Pointer_Value Integer iFile Integer iField Integer iLen Address pData
35333>>>>>>>        Integer hDD
35333>>>>>>>        Get Data_Set iFile to hDD
35334>>>>>>>        If hDD ;            Set Field_Current_Pointer_Value of hDD iField iLen to pData
35337>>>>>>>    End_Procedure
35338>>>>>>>    
35338>>>>>>>    // This returns the data pointer to the extended field. At this point
35338>>>>>>>    // this is the data. Be careful if you change the data, be even more
35338>>>>>>>    // careful if you change the pointer (don't do it!!!!)
35338>>>>>>>    Function Field_Current_Pointer_Value Integer iField Returns Address
35340>>>>>>>        Integer hFld
35340>>>>>>>        Handle iFoc
35340>>>>>>>        
35340>>>>>>>        Get Field_Object iField to hFld // the object that handles this large text
35341>>>>>>>        If not hFld Begin
35343>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_FIELD_NOT_DEFINED
35344>>>>>>>            Function_Return 0
35345>>>>>>>        End
35345>>>>>>>>
35345>>>>>>>        
35345>>>>>>>        
35345>>>>>>>        // This was extended to also make sure that the focus's server
35345>>>>>>>        // is this DD. This prevent the (very unlikely) case of a focus
35345>>>>>>>        // file/field being the right file/field but for a different view.
35345>>>>>>>        // 12.1: Also check operation mode, if within an operation assume that the
35345>>>>>>>        // ddos have the information they need from the deos. During a refresh we don't
35345>>>>>>>        // the data to be taken from a DEO - the DD buffer has the information you want. Note that
35345>>>>>>>        // we also changed all methods that set operation_mode to update the DD with the current
35345>>>>>>>        // DEO field, so the buffer is always correct.
35345>>>>>>>        Get Focus of Desktop to iFoc
35346>>>>>>>        If ( (OPERATION_MODE=MODE_WAITING) and ;            Extended_DEO_State(iFoc) and (Entry_Refresh_State(iFoc)=0) ) Begin
35348>>>>>>>            If ( Data_File(iFoc,0)=Main_File(Self) and Data_Field(iFoc,0)=iField and ;                IsDEOOwned(Self,iFoc) ) Begin
35350>>>>>>>                Send Update_Focus_Field
35351>>>>>>>            End
35351>>>>>>>>
35351>>>>>>>        End
35351>>>>>>>>
35351>>>>>>>        
35351>>>>>>>        Function_Return (FieldPointer(hFld))
35352>>>>>>>    End_Function
35353>>>>>>>    
35353>>>>>>>    
35353>>>>>>>    Function Field_Current_UCAValue Integer iField Returns UChar[]
35355>>>>>>>        Integer hFld
35355>>>>>>>        Handle iFoc
35355>>>>>>>        UChar[] Data
35356>>>>>>>        
35356>>>>>>>        Get Field_Object iField to hFld // the object that handles this large text
35357>>>>>>>        If not hFld Begin
35359>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_FIELD_NOT_DEFINED
35360>>>>>>>            Function_Return 0
35361>>>>>>>        End
35361>>>>>>>>
35361>>>>>>>        
35361>>>>>>>        
35361>>>>>>>        // This was extended to also make sure that the focus's server
35361>>>>>>>        // is this DD. This prevent the (very unlikely) case of a focus
35361>>>>>>>        // file/field being the right file/field but for a different view.
35361>>>>>>>        // 12.1: Also check operation mode, if within an operation assume that the
35361>>>>>>>        // ddos have the information they need from the deos. During a refresh we don't
35361>>>>>>>        // the data to be taken from a DEO - the DD buffer has the information you want. Note that
35361>>>>>>>        // we also changed all methods that set operation_mode to update the DD with the current
35361>>>>>>>        // DEO field, so the buffer is always correct.
35361>>>>>>>        Get Focus of Desktop to iFoc
35362>>>>>>>        If ( (OPERATION_MODE=MODE_WAITING) and ;            Extended_DEO_State(iFoc) and (Entry_Refresh_State(iFoc)=0) ) Begin
35364>>>>>>>            If ( Data_File(iFoc,0)=Main_File(Self) and Data_Field(iFoc,0)=iField and ;                IsDEOOwned(Self,iFoc) ) Begin
35366>>>>>>>                Send Update_Focus_Field
35367>>>>>>>            End
35367>>>>>>>>
35367>>>>>>>        End
35367>>>>>>>>
35367>>>>>>>        Get FieldArray of hFld to Data
35368>>>>>>>        Function_Return Data
35369>>>>>>>    End_Function
35370>>>>>>>    
35370>>>>>>>    Function File_Field_Current_Pointer_Value Integer iFile Integer iField Returns Address
35372>>>>>>>        Address pValue
35372>>>>>>>        Integer hDD
35372>>>>>>>        Get Data_Set iFile to hDD
35373>>>>>>>        If hDD Begin
35375>>>>>>>            Get Field_Current_Pointer_Value of hDD iField to pValue // return pointer to first byte of
35376>>>>>>>            Function_Return pValue                                  // data
35377>>>>>>>        End
35377>>>>>>>>
35377>>>>>>>    End_Function
35378>>>>>>>    
35378>>>>>>>    Procedure Set Field_Current_UCAValue Integer iField UChar[] Data
35380>>>>>>>        Set Field_Current_Pointer_Value iField (SizeOfArray(Data)) to (AddressOf(Data))
35381>>>>>>>    End_Procedure
35382>>>>>>>    
35382>>>>>>>    Procedure Set File_Field_Current_UCAValue Integer iFile Integer iField UChar[] Data
35384>>>>>>>        Integer hDD
35384>>>>>>>        Get Data_Set iFile to hDD
35385>>>>>>>        If hDD Begin
35387>>>>>>>            Set Field_Current_UCAValue of hDD iField to Data
35388>>>>>>>        End
35388>>>>>>>>
35388>>>>>>>    End_Procedure
35389>>>>>>>    
35389>>>>>>>    Function File_Field_Current_UCAValue Integer iFile Integer iField Returns UChar[]
35391>>>>>>>        UChar[] UCValue
35392>>>>>>>        Handle hDD
35392>>>>>>>        Get Data_Set iFile to hDD
35393>>>>>>>        If hDD Begin
35395>>>>>>>            Get Field_Current_UCAValue of hDD iField to UCValue // return pointer to first byte of
35396>>>>>>>            Function_Return UCValue                              // data
35397>>>>>>>        End
35397>>>>>>>>
35397>>>>>>>    End_Function
35398>>>>>>>    
35398>>>>>>>    // Create an extended field object for the passed field. .
35398>>>>>>>    // If field already exists, do nothing. This should only be used with
35398>>>>>>>    // text and binary fields.
35398>>>>>>>    Procedure DefineExtendedField Integer iField
35400>>>>>>>        Integer hFlds
35400>>>>>>>        Get Field_Objects to hFlds // this may not be created yet.
35401>>>>>>>        If not hFlds Begin         // if not created, create extended-fields wrapper
35403>>>>>>>            Object ExtendedFieldObjects is a FieldObjects
35405>>>>>>>                Move Self to hFlds
35406>>>>>>>            End_Object
35407>>>>>>>            Set Field_Objects to hFlds
35408>>>>>>>        End
35408>>>>>>>>
35408>>>>>>>        Send DefineFieldObject to hFlds iField
35409>>>>>>>    End_Procedure
35410>>>>>>>    
35410>>>>>>>    // create extended DD fields for all text and binary files
35410>>>>>>>    Procedure DefineAllExtendedFields
35412>>>>>>>        Integer iCount iType iField iFile
35412>>>>>>>        Get Main_file to iFile
35413>>>>>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iFile to iCount
35416>>>>>>>        For iField from 1 to iCount
35422>>>>>>>>
35422>>>>>>>            Get_Attribute DF_FIELD_TYPE of iFile iField to iType
35425>>>>>>>            If (iType=DF_TEXT or iType=DF_BINARY) ; // if text or binary                Send DefineExtendedField iField
35428>>>>>>>        Loop
35429>>>>>>>>
35429>>>>>>>    End_Procedure
35430>>>>>>>    
35430>>>>>>>    // Update Extended fields to FileBuffer.  DD-Fields ---> FileBuffer
35430>>>>>>>    // Private
35430>>>>>>>    Procedure ExtendedFieldsUpdate Integer bSave
35432>>>>>>>        Integer hFlds
35432>>>>>>>        Get Field_Objects to hFlds
35433>>>>>>>        If hFlds ;            Send ExtendedFieldsUpdate to hFlds bSave
35436>>>>>>>    End_Procedure
35437>>>>>>>    
35437>>>>>>>    // Refresh Extended field from FileBuffer.  DD-Fields <--- FileBuffer
35437>>>>>>>    // Private
35437>>>>>>>    Procedure ExtendedFieldsRefresh Boolean bCleared
35439>>>>>>>        Integer hFlds
35439>>>>>>>        Get Field_Objects to hFlds
35440>>>>>>>        If hFlds ;            Send ExtendedFieldsRefresh to hFlds bCleared
35443>>>>>>>    End_Procedure
35444>>>>>>>    
35444>>>>>>>    // This procedure can be used to set the Item_Options of a field. This can
35444>>>>>>>    // be passed any number of arguments.
35444>>>>>>>    // Support the following special first parameters:
35444>>>>>>>    //      DD_CLEAR_FIELD_OPTIONS     - clear all following passed otpions
35444>>>>>>>    //      DD_CLEAR_ALL_FIELD_OPTIONS - clear all options
35444>>>>>>>    Procedure Set Field_Options Integer iField Integer iArg1 // plus unknown arguments
35446>>>>>>>        Integer iObj
35446>>>>>>>        Integer iOptions
35446>>>>>>>        Integer iOption
35446>>>>>>>        Integer iArg
35446>>>>>>>        Integer iClear
35446>>>>>>>        Integer iType
35446>>>>>>>        Move (Record_Buffer(Self)) to iObj
35447>>>>>>>        Get Item_Options of iObj iField to iOptions
35448>>>>>>>        //
35448>>>>>>>        For iArg from 2 to Num_Arguments
35454>>>>>>>>
35454>>>>>>>            Move iArg& to iOption // tricky way to parse passed arguments
35455>>>>>>>            
35455>>>>>>>            If (iOption = DD_CLEAR_ALL_FIELD_OPTIONS) ;                Move 0 to iOptions
35458>>>>>>>            Else If (iOption = DD_CLEAR_FIELD_OPTIONS) ;                Move 1 to iClear
35462>>>>>>>            Else If not iClear ;                Move (iOptions ior iOption) to iOptions
35466>>>>>>>            Else ; // only unset bits already set! Note multiple bits can be passed                Move (iOptions - (iOptions iand iOption)) to iOptions
35468>>>>>>>        Loop
35469>>>>>>>>
35469>>>>>>>        //
35469>>>>>>>        //Get_Attribute DF_FIELD_TYPE of (Main_File(self)) iField to iType
35469>>>>>>>        //If (iType=DF_TEXT or iType=DF_BINARY) ;            // if text of binary
35469>>>>>>>        //    Move (iOptions iOR DD_DISPLAYONLY) to iOptions // make sure DO is set
35469>>>>>>>        
35469>>>>>>>        Set Item_Options of iObj iField to iOptions
35470>>>>>>>    End_Procedure
35471>>>>>>>    
35471>>>>>>>    // This function returns all the item_options which have been set for
35471>>>>>>>    // a field. The value from the Record_Buffer object will be binary or'ed
35471>>>>>>>    // with constand Default_Item_Options and the DD_AUTOCLEAR constants when
35471>>>>>>>    // the Autoclear_State of the field has been set.
35471>>>>>>>    // Keep in mind that Autoclear is *not* kept in the Item_Options
35471>>>>>>>    // property.
35471>>>>>>>    Function Field_Options Integer iField Returns Integer
35473>>>>>>>        Function_Return (Item_Options(Record_Buffer(Self), iField))
35474>>>>>>>    End_Function
35475>>>>>>>    
35475>>>>>>>    Function Field_Option Integer iField Integer iOption Returns Integer
35477>>>>>>>        Integer iOptions
35477>>>>>>>        Integer iState
35477>>>>>>>        Get Item_Options of (Record_Buffer(Self)) iField to iOptions
35478>>>>>>>        // All bits must match for it to be True (e.g., displayonly requires noput & noenter)
35478>>>>>>>        Move ((iOptions iand iOption)=iOption) to iState
35479>>>>>>>        Function_Return iState
35480>>>>>>>    End_Function
35481>>>>>>>    
35481>>>>>>>    
35481>>>>>>>    Procedure Set Foreign_Field_Options Integer iField Integer iArg1 // Integer iOption
35483>>>>>>>        Integer iObj
35483>>>>>>>        Integer iOptions
35483>>>>>>>        Integer iOption
35483>>>>>>>        Integer iArg
35483>>>>>>>        Integer iClear
35483>>>>>>>        
35483>>>>>>>        
35483>>>>>>>        Move (Record_Buffer(Self)) to iObj
35484>>>>>>>        Get Aux_Value of iObj iField to iOptions
35485>>>>>>>        //
35485>>>>>>>        For iArg from 2 to Num_Arguments
35491>>>>>>>>
35491>>>>>>>            Move iArg& to iOption // tricky way to parse passed arguments
35492>>>>>>>            If (iOption = DD_CLEAR_ALL_FIELD_OPTIONS) ;                Move 0 to iOptions
35495>>>>>>>            Else If (iOption = DD_CLEAR_FIELD_OPTIONS) ;                Move 1 to iClear
35499>>>>>>>            Else If not iClear ;                Move (iOptions ior iOption) to iOptions
35503>>>>>>>            Else ; // only unset bits already set! Note multiple bits can be passed                Move (iOptions - (iOptions iand iOption)) to iOptions
35505>>>>>>>        Loop
35506>>>>>>>>
35506>>>>>>>        //
35506>>>>>>>        Set Aux_Value of iObj iField to iOptions
35507>>>>>>>    End_Procedure
35508>>>>>>>    
35508>>>>>>>    Function Foreign_Field_Options Integer iField Returns Integer
35510>>>>>>>        Integer iOpts
35510>>>>>>>        Get ForeignFieldOptions of Record_Buffer iField to iOpts
35511>>>>>>>        Function_Return iOpts
35512>>>>>>>    End_Function
35513>>>>>>>    
35513>>>>>>>    Procedure Set Foreign_Field_Option Integer iField Integer iOption Integer bSet
35515>>>>>>>        If bSet Begin
35517>>>>>>>            Set Foreign_Field_Options iField to iOption
35518>>>>>>>        End
35518>>>>>>>>
35518>>>>>>>        Else Begin
35519>>>>>>>            Set Foreign_Field_Options iField to DD_CLEAR_FIELD_OPTIONS iOption
35520>>>>>>>        End
35520>>>>>>>>
35520>>>>>>>    End_Procedure
35521>>>>>>>    
35521>>>>>>>    Function Foreign_Field_Option Integer iField Integer iOption Returns Integer
35523>>>>>>>        Integer iOptions
35523>>>>>>>        Integer iState
35523>>>>>>>        Get Foreign_Field_Options iField to iOptions
35524>>>>>>>        Move ((iOptions iand iOption)=iOption) to iState
35525>>>>>>>        Function_Return iState
35526>>>>>>>    End_Function
35527>>>>>>>    
35527>>>>>>>    // This procedure is being used by DEOs when they need to copy the item-
35527>>>>>>>    // options from the Data_Set. When the filenumber being passed is not
35527>>>>>>>    // equal to the Main_File of this Data_Set, then the Foreign_Field_Options
35527>>>>>>>    // will be applied.
35527>>>>>>>    Function File_Field_Options Integer iFile Integer iField Returns Integer
35529>>>>>>>        Integer iDSO
35529>>>>>>>        Integer iMain_File
35529>>>>>>>        Integer iOpts
35529>>>>>>>        Integer iRB
35529>>>>>>>        Integer iType
35529>>>>>>>        Get Main_File to iMain_File
35530>>>>>>>        If (iFile <> iMain_File) ;            Get Data_Set iFile to iDSO
35533>>>>>>>        Else ;            Move Self to iDSO
35535>>>>>>>        If iDSO Begin
35537>>>>>>>            Get Field_Options of iDSO iField to iOpts
35538>>>>>>>            // we consider the item to be foreign if the DDO main file is different than the one
35538>>>>>>>            // passed and we do not allow foreign (parent) new records to be saved.
35538>>>>>>>            If (iFile<>iMain_File and Allow_Foreign_New_Save_State(iDSO)=0) ; // Add Foreign_Field_Options                Move (iOpts ior Foreign_Field_Options(iDSO, iField)) to iOpts
35541>>>>>>>            Function_Return iOpts
35542>>>>>>>        End
35542>>>>>>>>
35542>>>>>>>    End_Function
35543>>>>>>>    
35543>>>>>>>    
35543>>>>>>>    // Procedure to set the message to be sent on item entry.
35543>>>>>>>    Procedure Set Field_Entry_msg Integer iField Integer iMsg
35545>>>>>>>        Set Item_Entry_MSG of (Record_Buffer(Self)) iField to iMsg
35546>>>>>>>    End_Procedure
35547>>>>>>>    
35547>>>>>>>    // Function to return the message to be sent on item entry.
35547>>>>>>>    Function Field_Entry_msg Integer iField Returns Integer
35549>>>>>>>        Function_Return (Item_Entry_MSG(Record_Buffer(Self), iField))
35550>>>>>>>    End_Function
35551>>>>>>>    
35551>>>>>>>    
35551>>>>>>>    // Procedure to send the message to be sent on item exit.
35551>>>>>>>    Procedure Set Field_Exit_msg Integer iField Integer iMsg
35553>>>>>>>        Set Item_Exit_MSG of (Record_Buffer(Self)) iField to iMsg
35554>>>>>>>    End_Procedure
35555>>>>>>>    
35555>>>>>>>    // Function to return the message to be set on item exit.
35555>>>>>>>    Function Field_Exit_msg Integer iField Returns Integer
35557>>>>>>>        Function_Return (Item_Exit_MSG(Record_Buffer(Self), iField))
35558>>>>>>>    End_Function
35559>>>>>>>    
35559>>>>>>>    // Procedure to set the message to be sent on item validation.
35559>>>>>>>    Procedure Set Field_Validate_msg Integer iField Integer iMsg
35561>>>>>>>        Set Item_Validate_MSG of (Record_Buffer(Self)) iField to iMsg
35562>>>>>>>    End_Procedure
35563>>>>>>>    
35563>>>>>>>    // Function to return the message to be set on item validation.
35563>>>>>>>    Function Field_Validate_msg Integer iField Returns Integer
35565>>>>>>>        Function_Return (Item_Validate_MSG(Record_Buffer(Self), iField))
35566>>>>>>>    End_Function
35567>>>>>>>    
35567>>>>>>>    
35567>>>>>>>    // Used to Get/Set the Prompt_Object for a Field.
35567>>>>>>>    Procedure Set Field_Prompt_Object Integer iField Integer iObj
35569>>>>>>>        Set Prompt_Object of (Record_Buffer(Self)) iField to iObj
35570>>>>>>>    End_Procedure
35571>>>>>>>    
35571>>>>>>>    Function Field_Prompt_Object Integer iField Returns Integer
35573>>>>>>>        Integer iObj
35573>>>>>>>        Get Prompt_Object of (Record_Buffer(Self)) iField to iObj
35574>>>>>>>        If (iObj = 0) ;            Get Prompt_Object of (Field_Attributes(Self)) iField to iObj
35577>>>>>>>        Function_Return iObj
35578>>>>>>>    End_Function
35579>>>>>>>    
35579>>>>>>>    Procedure Set Field_Zoom_Object Integer iField Integer iObj
35581>>>>>>>        Set Zoom_Object of (Record_Buffer(Self)) iField to iObj
35582>>>>>>>    End_Procedure
35583>>>>>>>    
35583>>>>>>>    Function Field_Zoom_Object Integer iField Returns Integer
35585>>>>>>>        Function_Return (Zoom_Object(Record_Buffer(Self), iField))
35586>>>>>>>    End_Function
35587>>>>>>>    
35587>>>>>>>    
35587>>>>>>>    Procedure Set Field_WebPrompt_Object Integer iField Handle hoObj
35589>>>>>>>        Set Field_WebPrompt_Object of FieldMask_Array iField to hoObj
35590>>>>>>>    End_Procedure
35591>>>>>>>    
35591>>>>>>>    Function Field_WebPrompt_Object Integer iField Returns Handle
35593>>>>>>>        Handle hoPrompt
35593>>>>>>>        Get Field_WebPrompt_Object of FieldMask_Array iField to hoPrompt
35594>>>>>>>        Function_Return hoPrompt
35595>>>>>>>    End_Function
35596>>>>>>>    
35596>>>>>>>    
35596>>>>>>>    // Used to Get/Set the Prompt_Object for a Field.
35596>>>>>>>    Function File_Field_Prompt_Object Integer iFile Integer iField Returns Integer
35598>>>>>>>        Integer iObj
35598>>>>>>>        Get File_Field_Property iFile iField GET_Field_Prompt_Object to iObj
35599>>>>>>>        Function_Return iObj
35600>>>>>>>    End_Function
35601>>>>>>>    
35601>>>>>>>    Function File_Field_Zoom_Object Integer iFile Integer iField Returns Integer
35603>>>>>>>        Integer iObj
35603>>>>>>>        Get File_Field_Property iFile iField GET_Field_Zoom_Object to iObj
35604>>>>>>>        Function_Return iObj
35605>>>>>>>    End_Function
35606>>>>>>>    
35606>>>>>>>    Function File_Field_WebPrompt_Object Integer iFile Integer iField Returns Handle
35608>>>>>>>        Handle hoPrompt
35608>>>>>>>        Get File_Field_Property iFile iField GET_Field_WebPrompt_Object to hoPrompt
35609>>>>>>>        Function_Return hoPrompt
35610>>>>>>>    End_Function
35611>>>>>>>    
35611>>>>>>>    // Return the extended validation type for this field.
35611>>>>>>>    Function Field_Validation_Type Integer iField Returns Integer
35613>>>>>>>        Integer iType
35613>>>>>>>        Get Field_Validation_Type of (Field_Attributes(Self)) iField ;            to iType
35614>>>>>>>        Function_Return iType
35615>>>>>>>    End_Function
35616>>>>>>>    
35616>>>>>>>    // Procedure to define a valid value range for a field.
35616>>>>>>>    Procedure Set Field_Value_Range Integer iField String sMin String sMax
35618>>>>>>>        Set Field_Value_Range of (Field_Attributes(Self)) iField ;            to sMin sMax
35619>>>>>>>    End_Procedure
35620>>>>>>>    
35620>>>>>>>    
35620>>>>>>>    // Procedure to define a validate table for a field.
35620>>>>>>>    Procedure Set Field_Value_Table Integer iField Integer iObj
35622>>>>>>>        Set Field_Value_Table of (Field_Attributes(Self)) iField ;            to iObj
35623>>>>>>>    End_Procedure
35624>>>>>>>    
35624>>>>>>>    // This provides a callback to the calling object (iObj) by passing this
35624>>>>>>>    // object the message iMsg for each item in the table. Note this works for
35624>>>>>>>    // all extended validation types (range, check, etc.)
35624>>>>>>>    Procedure Field_Fill_List Integer iField Integer iObj Integer iMsg
35626>>>>>>>        Send Field_Fill_list to (Field_Attributes(Self)) ;            iField iObj iMsg
35627>>>>>>>    End_Procedure
35628>>>>>>>    
35628>>>>>>>    Procedure File_Field_Fill_List Integer iFile Integer iField ;            Integer iObj Integer iMsg
35630>>>>>>>        Integer iDSO
35630>>>>>>>        Get Data_set iFile to iDSO
35631>>>>>>>        If iDSO ;            Send Field_Fill_list to iDSO iField iObj iMsg
35634>>>>>>>    End_Procedure
35635>>>>>>>    
35635>>>>>>>    // Returns the ID if any of the validation table for this object.
35635>>>>>>>    Function Field_Table_Object Integer iField Returns Integer
35637>>>>>>>        Integer iRval
35637>>>>>>>        Get Field_Table_Object of (Field_Attributes(Self)) iField to iRVal
35638>>>>>>>        Function_Return iRVal
35639>>>>>>>    End_Function
35640>>>>>>>    
35640>>>>>>>    Function File_Field_Table_Object Integer iFile Integer iField Returns Integer
35642>>>>>>>        Integer iDSO
35642>>>>>>>        Get Data_set iFile to iDSO
35643>>>>>>>        If iDSO ;            Function_Return (Field_Table_Object(iDSO,iField))
35646>>>>>>>    End_Function
35647>>>>>>>    
35647>>>>>>>    // Returns code description value for the passed string for the
35647>>>>>>>    // passed validation table object. Normally use field_value_description
35647>>>>>>>    Function Validation_Table_Description Integer iObj String sVal Returns String
35649>>>>>>>        String sDesc
35649>>>>>>>        If iObj ;            Get Find_Code_Description of iObj sVal to sDesc
35652>>>>>>>        Function_Return sDesc
35653>>>>>>>    End_Function
35654>>>>>>>    
35654>>>>>>>    // Returns the description value for the field's code value. This only
35654>>>>>>>    // works if you have a validation table - else it returns the field value
35654>>>>>>>    Function Field_Current_Description Integer iField Returns String
35656>>>>>>>        String sDesc
35656>>>>>>>        String sVal
35656>>>>>>>        Integer iObj
35656>>>>>>>        Get Field_Current_Value iField to sVal
35657>>>>>>>        Get Field_Table_Object iField to iObj
35658>>>>>>>        If iObj Begin
35660>>>>>>>            Get Validation_Table_Description iObj sVal to sDesc
35661>>>>>>>            If (sDesc="") ;                Move sVal to sDesc // if desc is blank, use value
35664>>>>>>>        End
35664>>>>>>>>
35664>>>>>>>        Else ;            Move sVal to sDesc
35666>>>>>>>        Function_Return sDesc
35667>>>>>>>    End_Function
35668>>>>>>>    
35668>>>>>>>    Function File_Field_Current_Description Integer iFile Integer iField Returns String
35670>>>>>>>        Integer iDSO
35670>>>>>>>        Get Data_set iFile to iDSO
35671>>>>>>>        If iDSO ;            Function_Return (Field_Current_Description(iDSO,iField))
35674>>>>>>>    End_Function
35675>>>>>>>    
35675>>>>>>>    // Required Messaging to Support Checkbox items in DEOs
35675>>>>>>>    //  Defines a field as a two item field and defines True and False values
35675>>>>>>>    Procedure Set Field_CheckBox_Values Integer iField String sTrue String sFalse
35677>>>>>>>        Set Field_CheckBox_Values of (Field_Attributes(Self)) iField ;            to sTrue sFalse
35678>>>>>>>    End_Procedure
35679>>>>>>>    
35679>>>>>>>    //    Returns a field's select_State based on the pased value
35679>>>>>>>    Function Field_Value_Select_State Integer iField String sValue Returns Integer
35681>>>>>>>        Function_Return (Field_Value_Select_State(Field_Attributes(Self),iField,sValue))
35682>>>>>>>    End_Function
35683>>>>>>>    
35683>>>>>>>    //    Returns a field's select_State based on the DD buffer contents
35683>>>>>>>    Function Field_Select_State Integer iField Returns Integer
35685>>>>>>>        String sValue
35685>>>>>>>        Get Field_Current_Value iField to sValue
35686>>>>>>>        Function_Return (Field_Value_Select_State(Self,iField,sValue))
35687>>>>>>>    End_Function
35688>>>>>>>    
35688>>>>>>>    //   Returns a file/field' select_State based on contents of DD buffer
35688>>>>>>>    Function File_Field_Select_State Integer iFile Integer iField Returns Integer
35690>>>>>>>        Integer iDSO
35690>>>>>>>        Get Data_set iFile to iDSO
35691>>>>>>>        If iDSO ;            Function_Return (Field_Select_State(iDSO,iField))
35694>>>>>>>    End_Function
35695>>>>>>>    
35695>>>>>>>    //   Returns a file/field' select_State based on passed value
35695>>>>>>>    Function File_Field_Value_Select_State Integer iFile Integer iField ;            String sValue Returns Integer
35697>>>>>>>        Integer iDSO
35697>>>>>>>        Get Data_set iFile to iDSO
35698>>>>>>>        If iDSO ;            Function_Return (Field_Value_Select_State(iDSO,iField,sValue))
35701>>>>>>>    End_Function
35702>>>>>>>    
35702>>>>>>>    // get the actual database value that corresponds to the boolean value
35702>>>>>>>    // passed.
35702>>>>>>>    Function Field_CheckBox_Value Integer iField Integer iState Returns String
35704>>>>>>>        Function_Return (Field_Checkbox_Value(Field_Attributes(Self),iField,iState))
35705>>>>>>>    End_Function
35706>>>>>>>    
35706>>>>>>>    Function File_Field_CheckBox_Value Integer iFile Integer iField Integer iState Returns String
35708>>>>>>>        Integer iDSO
35708>>>>>>>        Get Data_set iFile to iDSO
35709>>>>>>>        If iDSO ;            Function_Return (Field_Checkbox_Value(iDSO,iField,iState))
35712>>>>>>>    End_Function
35713>>>>>>>    
35713>>>>>>>    // Set the buffer's value based on the state passed. This notifies DEOs
35713>>>>>>>    Procedure Set Field_Select_State Integer iField Integer iState
35715>>>>>>>        String sValue
35715>>>>>>>        Get Field_Checkbox_Value iField iState to sValue
35716>>>>>>>        Set Field_Current_Value iField to sValue
35717>>>>>>>    End_Procedure
35718>>>>>>>    
35718>>>>>>>    // Set the buffer's value based on the state passed. This notifies DEOs
35718>>>>>>>    // if needed (set Field_Current_Value does this). First finds proper file
35718>>>>>>>    // DSO
35718>>>>>>>    Procedure Set File_Field_Select_State Integer iFile Integer iField Integer iState
35720>>>>>>>        Integer iDSO
35720>>>>>>>        Get Data_set iFile to iDSO
35721>>>>>>>        If iDSO ;            Set Field_Select_State of iDSO iField to iState
35724>>>>>>>    End_Procedure
35725>>>>>>>    
35725>>>>>>>    // Procedure to define a check string for a field.
35725>>>>>>>    Procedure Set Field_Value_Check Integer iField String sCheck
35727>>>>>>>        Set Field_Value_Check of (Field_Attributes(Self)) iField ;            to sCheck
35728>>>>>>>    End_Procedure
35729>>>>>>>    
35729>>>>>>>    // This function will be called indirectly by DEOs when an item is being
35729>>>>>>>    // entered, exited or needs validation. The first argument holds the
35729>>>>>>>    // fieldnumber for the field and the second holds the id of the message
35729>>>>>>>    // which can be send to retrieve the message which needs to be send for
35729>>>>>>>    // this Field/Event combination. The value of the second argument can be
35729>>>>>>>    // GET_Field_Entry_MSG, GET_Field_Exit_MSG or GET_Field_Validate_MSG.
35729>>>>>>>    Function Exec_Field_Message Integer iField Integer iMsg_ID Returns Integer
35731>>>>>>>        Integer iMsg
35731>>>>>>>        Integer iResult
35731>>>>>>>        String  sValue
35731>>>>>>>        Get iMsg_ID iField to iMsg
35732>>>>>>>        If iMsg Begin
35734>>>>>>>            Get Field_Current_Value iField to sValue
35735>>>>>>>            Get iMsg iField sValue to iResult
35736>>>>>>>        End
35736>>>>>>>>
35736>>>>>>>        Function_Return iResult
35737>>>>>>>    End_Function
35738>>>>>>>    
35738>>>>>>>    
35738>>>>>>>    // This function will be called from within DEOs when an item is being
35738>>>>>>>    // entered, exited or needs validation. The first argument holds the
35738>>>>>>>    // file number, the second argument holds the field and the third
35738>>>>>>>    // holds the id of the message  which can be send to retrieve the message
35738>>>>>>>    // which needs to be send for this File/Field/Event combination.
35738>>>>>>>    // The value of the second argument can be  GET_Field_Entry_MSG,
35738>>>>>>>    // GET_Field_Exit_MSG or GET_Field_Validate_MSG.
35738>>>>>>>    // This will redirect to the proper data-set object.
35738>>>>>>>    Function Exec_File_Field_Message Integer iFile Integer iField Integer iMsg_ID Returns Integer
35740>>>>>>>        Integer iDSO
35740>>>>>>>        Integer iResult
35740>>>>>>>        Get Data_set iFile to iDSO
35741>>>>>>>        If iDSO ;            Get Exec_Field_Message of iDSO iField iMsg_ID to iResult
35744>>>>>>>        Function_Return iResult
35745>>>>>>>    End_Function
35746>>>>>>>    
35746>>>>>>>    // Find the data-set whose main_file is the same as File#. The message
35746>>>>>>>    // Which_data_set includes updating parent files, we will throw those out.
35746>>>>>>>    // This has been augmented to search down the DDO tree if we do not find
35746>>>>>>>    // the DD with our quick C Which_Data_set search
35746>>>>>>>    Function Data_Set Integer iFile Returns Integer
35748>>>>>>>        Integer iTmp
35748>>>>>>>        Integer iDSO
35748>>>>>>>        Get Main_File to iTmp
35749>>>>>>>        If (iTmp = iFile) ;            Function_Return Self
35752>>>>>>>        Get Which_Data_Set iFile to iDSO
35753>>>>>>>        If iDSO Begin
35755>>>>>>>            // check that DS's main-file is the File (and not a parent file)
35755>>>>>>>            Get Main_File of iDSO to iTmp
35756>>>>>>>            If (iTmp = iFile) ;                Function_Return iDSO
35759>>>>>>>        End
35759>>>>>>>>
35759>>>>>>>        
35759>>>>>>>        // This really should have succeeded by now. If not we need to do a
35759>>>>>>>        // downward sweep looking for DD. This will be a slower process since it
35759>>>>>>>        // involves flex level DDO structure traversal. We should very rarely ever
35759>>>>>>>        // get to this point. If we do, it takes longer!
35759>>>>>>>        
35759>>>>>>>        // Unlike other traversals we will mark and check in a single
35759>>>>>>>        // step.
35759>>>>>>>        // This Mark_Id creates a sequence Id for this clear. This way
35759>>>>>>>        // DSOs only get cleared one time during this process.
35759>>>>>>>        Send IncrementCurrentMarkId
35760>>>>>>>        Get Private.Data_set iFile to iDSO // this does the recursive downward search
35761>>>>>>>        Function_Return iDSO
35762>>>>>>>    End_Function
35763>>>>>>>    
35763>>>>>>>    Function Private.Data_Set Integer iFile Returns Integer
35765>>>>>>>        Integer iMax
35765>>>>>>>        Integer iDSO hDD
35765>>>>>>>        Integer iCount
35765>>>>>>>        
35765>>>>>>>        If (iFile=Main_file(Self)) ;            Function_Return Self
35768>>>>>>>        
35768>>>>>>>        // We are only looking at sequence ID.
35768>>>>>>>        Set Last_Mark_Sequence_id to DD_Current_mark_id
35769>>>>>>>        
35769>>>>>>>        // recurse Down first, since we already tried upward direction.
35769>>>>>>>        Get Data_Set_Client_Count to iMax
35770>>>>>>>        Decrement iMax
35771>>>>>>>        For iCount from 0 to iMax
35777>>>>>>>>
35777>>>>>>>            Get Data_Set_Client iCount to iDSO
35778>>>>>>>            // If already cleared during this sequence...do nothing
35778>>>>>>>            If (Last_Mark_Sequence_id(iDSO)<>DD_Current_mark_id) Begin
35780>>>>>>>                Get Private.Data_Set of iDSO iFile to hDD
35781>>>>>>>                If hDD ;                    Function_Return hDD // when found...get out
35784>>>>>>>            End
35784>>>>>>>>
35784>>>>>>>        Loop
35785>>>>>>>>
35785>>>>>>>        // recurse up server list next. We do this 2nd because it is
35785>>>>>>>        // the less likely path for success.
35785>>>>>>>        Get Data_Set_Server_Count to iMax
35786>>>>>>>        Decrement iMax
35787>>>>>>>        For iCount from 0 to iMax
35793>>>>>>>>
35793>>>>>>>            Get Data_Set_Server iCount to iDSO
35794>>>>>>>            // If already cleared during this sequence...do nothing
35794>>>>>>>            If (Last_Mark_Sequence_id(iDSO)<>DD_Current_mark_id) Begin
35796>>>>>>>                Get Private.Data_Set of iDSO iFile to hDD
35797>>>>>>>                If hDD ;                    Function_Return hDD // when found...get out
35800>>>>>>>            End
35800>>>>>>>>
35800>>>>>>>        Loop
35801>>>>>>>>
35801>>>>>>>        Function_Return 0 // if here, our traversal has failed.
35802>>>>>>>    End_Function
35803>>>>>>>    
35803>>>>>>>    // These methods can be used to set/get a field property in a flexible
35803>>>>>>>    // way. The first two argument are the file- and fieldnumber followed by
35803>>>>>>>    // the ID of the message that should be send. The last argument should
35803>>>>>>>    // be the value to set or the variable to store the value in.
35803>>>>>>>    Procedure Set File_Field_Property Integer iFile Integer iField Integer iMsg String sValue
35805>>>>>>>        Integer iDSO
35805>>>>>>>        Get Data_Set iFile to iDSO
35806>>>>>>>        If iDSO Begin
35808>>>>>>>            Set iMsg of iDSO iField to sValue
35809>>>>>>>            Procedure_Return sValue
35810>>>>>>>        End
35810>>>>>>>>
35810>>>>>>>    End_Procedure
35811>>>>>>>    
35811>>>>>>>    Function File_Field_Property Integer iFile Integer iField Integer iMsg Returns Integer
35813>>>>>>>        Integer iDSO
35813>>>>>>>        String  sValue
35813>>>>>>>        Get Data_Set iFile to iDSO
35814>>>>>>>        If iDSO Begin
35816>>>>>>>            Get iMsg of iDSO iField to sValue
35817>>>>>>>            Function_Return sValue
35818>>>>>>>        End
35818>>>>>>>>
35818>>>>>>>    End_Function
35819>>>>>>>    
35819>>>>>>>    // This procedure will return the number of fields in the object
35819>>>>>>>    Function Field_Count Returns Integer
35821>>>>>>>        Function_Return (Item_Count(Record_Buffer(Self)) - 1)
35822>>>>>>>    End_Function
35823>>>>>>>    
35823>>>>>>>    // This procedure will clear all flags in the visited_fields string so
35823>>>>>>>    // that all field will be validated on the next requests.
35823>>>>>>>    Procedure Clear_Visited_Fields
35825>>>>>>>        // this clears field visitation marks
35825>>>>>>>        Set Visited_Fields to (Repeat(" ", Field_Count(Self)))
35826>>>>>>>    End_Procedure
35827>>>>>>>    
35827>>>>>>>    // Private.Initialize_Visited
35827>>>>>>>    // This procedure will be called when validations (and perhaps other
35827>>>>>>>    // events) is requested. It clears the visited marks and then proceeds
35827>>>>>>>    // to clear the marks up the server tree.
35827>>>>>>>    // This is passed two parameters: Up_and_down, If true upward and downward
35827>>>>>>>    // initialize. If Clear_Fields also clear the field string
35827>>>>>>>    Procedure Private.Initialize_Visited Integer Up_and_Down Integer Clear_Fields
35829>>>>>>>        Integer iMax
35829>>>>>>>        Integer iDSO
35829>>>>>>>        Integer iCount
35829>>>>>>>        
35829>>>>>>>        // recurse up server list first. Only recurse up
35829>>>>>>>        Get Data_Set_Server_Count to iMax
35830>>>>>>>        Decrement iMax
35831>>>>>>>        For iCount from 0 to iMax
35837>>>>>>>>
35837>>>>>>>            Get Data_Set_Server iCount to iDSO
35838>>>>>>>            // If already cleared during this sequence...do nothing
35838>>>>>>>            If (Last_Mark_Sequence_id(iDSO)<>DD_Current_mark_id) ;                Send Private.Initialize_Visited to iDSO False Clear_Fields
35841>>>>>>>        Loop
35842>>>>>>>>
35842>>>>>>>        
35842>>>>>>>        If Clear_Fields ;            Send Clear_Visited_Fields // clear all markers in this object
35845>>>>>>>        // this clears the visited mark for the entire object
35845>>>>>>>        Set Visited_State to False
35846>>>>>>>        Set DownDelete_State to False
35847>>>>>>>        Set Last_Mark_Sequence_id to DD_Current_mark_id
35848>>>>>>>        
35848>>>>>>>        // If Up_and_Down recurse Down server list
35848>>>>>>>        If Up_and_Down Begin
35850>>>>>>>            Get Data_Set_Client_Count to iMax
35851>>>>>>>            Decrement iMax // **EK** This line was missing
35852>>>>>>>            For iCount from 0 to iMax
35858>>>>>>>>
35858>>>>>>>                Get Data_Set_Client iCount to iDSO
35859>>>>>>>                // If already cleared during this sequence...do nothing
35859>>>>>>>                If (Last_Mark_Sequence_id(iDSO)<>DD_Current_mark_id) ;                    Send Private.Initialize_Visited to iDSO True Clear_Fields
35862>>>>>>>            Loop
35863>>>>>>>>
35863>>>>>>>        End
35863>>>>>>>>
35863>>>>>>>    End_Procedure
35864>>>>>>>    
35864>>>>>>>    
35864>>>>>>>    // Clears Visited marks and (maybe) field visited marks in all required
35864>>>>>>>    // DSOs. If Up_and_Down is TRUE DSOs are marked up and Down (delete style)
35864>>>>>>>    // propagation. If False, DSOs are marked up (save style). This does not
35864>>>>>>>    // have a mode to mark ALL DSOs in a structure. (Not needed so far).
35864>>>>>>>    // If Clear_Fields is T the field string marker is also cleared.
35864>>>>>>>    // The method of using the global integer DD_Current_Mark_ID is an opt-
35864>>>>>>>    // imizer. This is private - do not tamper with it!
35864>>>>>>>    // Note that Intialize_Visited does not always Clear all DDOs in the structure. When
35864>>>>>>>    // Up_and_Down is true, it is marking all DDOs that will participate in a cascade delete
35864>>>>>>>    // which may not be all DDOs in the structure. If you want to initialize all DDOs use InitializeAllVisited
35864>>>>>>>    Procedure Initialize_Visited Integer Up_and_Down Integer Clear_Fields
35866>>>>>>>        Send IncrementCurrentMarkId
35867>>>>>>>        Send Private.Initialize_Visited Up_and_Down Clear_Fields
35868>>>>>>>    End_Procedure
35869>>>>>>>    
35869>>>>>>>    Procedure InitializeAllVisited2
35871>>>>>>>        Integer iMax iCount
35871>>>>>>>        Handle hoDSO
35871>>>>>>>        
35871>>>>>>>        Set Visited_State to False
35872>>>>>>>        Set Last_Mark_Sequence_id to DD_Current_mark_id // marks this as visited
35873>>>>>>>        
35873>>>>>>>        // recurse up server list.
35873>>>>>>>        Get Data_Set_Server_Count to iMax
35874>>>>>>>        For iCount from 0 to (iMax-1)
35880>>>>>>>>
35880>>>>>>>            Get Data_Set_Server iCount to hoDSO
35881>>>>>>>            // If already cleared during this sequence...do nothing
35881>>>>>>>            If (Last_Mark_Sequence_id(hoDSO)<>DD_Current_mark_id) ;                Send InitializeAllVisited2 of hoDSO
35884>>>>>>>        Loop
35885>>>>>>>>
35885>>>>>>>        
35885>>>>>>>        // recurse down client list.
35885>>>>>>>        Get Data_Set_Client_Count to iMax
35886>>>>>>>        For iCount from 0 to (iMax-1)
35892>>>>>>>>
35892>>>>>>>            Get Data_Set_Client iCount to hoDSO
35893>>>>>>>            // If already cleared during this sequence...do nothing
35893>>>>>>>            If (Last_Mark_Sequence_id(hoDSO)<>DD_Current_mark_id) ;                Send InitializeAllVisited2 to hoDSO
35896>>>>>>>        Loop
35897>>>>>>>>
35897>>>>>>>    End_Procedure
35898>>>>>>>    
35898>>>>>>>    // clears visited flag for *all* ddos in the structure.
35898>>>>>>>    Procedure InitializeAllVisited
35900>>>>>>>        Send IncrementCurrentMarkId
35901>>>>>>>        Send InitializeAllVisited2
35902>>>>>>>    End_Procedure
35903>>>>>>>    
35903>>>>>>>    
35903>>>>>>>    // Internal recursive message to check file connections. Called from
35903>>>>>>>    // Valid_connections only. Private message
35903>>>>>>>    Function Private.Valid_Structure Integer Up_And_Down Returns Integer
35905>>>>>>>        Integer iRval iCount iMax
35905>>>>>>>        Handle iDSO iPDSO
35905>>>>>>>        Integer iPMax iPCount iPMain
35905>>>>>>>        Boolean bUpDown bNull bCascadeNull bDown
35905>>>>>>>        
35905>>>>>>>        // Check Current Connections
35905>>>>>>>        Get Valid_Servers to iRval           // always check servers
35906>>>>>>>        If (iRval=0 and Up_and_Down) ;       // check Clients if required            Get Valid_Clients to iRval
35909>>>>>>>        Set Visited_State to True
35910>>>>>>>        
35910>>>>>>>        // Ask Server data-sets to check their server connections
35910>>>>>>>        If not iRval Begin // check up
35912>>>>>>>            Get Data_Set_Server_Count to iMax
35913>>>>>>>            Decrement iMax
35914>>>>>>>            For iCount from 0 to iMax
35920>>>>>>>>
35920>>>>>>>                Get Data_Set_Server iCount to iDSO
35921>>>>>>>                If not (Visited_state(iDSO)) ;                    Get Private.Valid_Structure of iDSO False to iRVal
35924>>>>>>>            Until iRval
35926>>>>>>>        End
35926>>>>>>>>
35926>>>>>>>        
35926>>>>>>>        // If required, Ask Clients to check their server and client connections
35926>>>>>>>        //
35926>>>>>>>        If (iRval=0 and Up_and_Down) Begin // check down
35928>>>>>>>            Get Data_Set_Client_Count to iMax
35929>>>>>>>            Decrement iMax
35930>>>>>>>            For iCount from 0 to iMax
35936>>>>>>>>
35936>>>>>>>                Get Data_Set_Client iCount to iDSO
35937>>>>>>>                If not (Visited_state(iDSO)) Begin
35939>>>>>>>                    Get Data_Set_Server_Count of iDSO to iPMax
35940>>>>>>>                    // test if all deletable parents for a non parent null allowed/cascade delete null
35940>>>>>>>                    For iPCount from 0 to (iPMax-1)
35946>>>>>>>>
35946>>>>>>>                        Get Data_Set_Server of iDSO iPCount to iPDSO
35947>>>>>>>                        Get DownDelete_State of iPDSO to bDown
35948>>>>>>>                        If (bDown) Begin
35950>>>>>>>                            Get Main_File of iPDSO to iPMain
35951>>>>>>>                            Get IsNullParentAllowed of iDSO iPMain to bNull
35952>>>>>>>                            Get IsCascadeDeleteNull of iDSO iPMain to bCascadeNull
35953>>>>>>>                            Move (not(bNull) or not(bCascadeNull)) to bUpDown
35954>>>>>>>                        End
35954>>>>>>>>
35954>>>>>>>                    Until bUpDown
35956>>>>>>>                    Get Private.Valid_Structure of iDSO bUpDown to iRVal
35957>>>>>>>                End
35957>>>>>>>>
35957>>>>>>>            Until iRval
35959>>>>>>>        End
35959>>>>>>>>
35959>>>>>>>        
35959>>>>>>>        Function_Return iRVal
35960>>>>>>>        
35960>>>>>>>    End_Function
35961>>>>>>>    
35961>>>>>>>    // Validate data-set updating connections against required connections
35961>>>>>>>    // Pass: Up_and_down=T if we should check Server and Client connections
35961>>>>>>>    //                  =F is we only check servers
35961>>>>>>>    // Ret: 0 if ok, Missing File# if not ok.
35961>>>>>>>    // Up_And_Down should be true when testing for cascade delete structures and
35961>>>>>>>    // false when testing for save / delete-no-cascade structures
35961>>>>>>>    Function Valid_Structure Integer Up_And_Down Returns Integer
35963>>>>>>>        Send Initialize_Visited Up_and_Down False // False=don't clear field marks
35964>>>>>>>        If (Up_And_Down) Begin
35966>>>>>>>            Send MarkDDOsForCascadeDelete
35967>>>>>>>        End
35967>>>>>>>>
35967>>>>>>>        Function_Return (Private.Valid_Structure(Self,Up_and_Down))
35968>>>>>>>    End_Function
35969>>>>>>>    
35969>>>>>>>    // mark all DDOs which are part of this deletes cascade delete tree
35969>>>>>>>    // mark this and all clients as Downward deletable. This includes
35969>>>>>>>    // cacscade delete and cascade set to null (not for cascade_delete_state=F)
35969>>>>>>>    Procedure MarkDDOsForCascadeDelete
35971>>>>>>>        Integer iMax  iCount
35971>>>>>>>        Boolean bDown
35971>>>>>>>        Handle hoDDO
35971>>>>>>>        Set DownDelete_State to True
35972>>>>>>>        Get Data_Set_Client_Count to iMax
35973>>>>>>>        For iCount from 0 to (iMax-1)
35979>>>>>>>>
35979>>>>>>>            Get Data_Set_Client iCount to hoDDO
35980>>>>>>>            Get DownDelete_State of hoDDO to bDown
35981>>>>>>>            If not bDown Begin // circular DDO test - never do this
35983>>>>>>>                Send MarkDDOsForCascadeDelete of hoDDO
35984>>>>>>>            End
35984>>>>>>>>
35984>>>>>>>        Loop
35985>>>>>>>>
35985>>>>>>>    End_Procedure
35986>>>>>>>    
35986>>>>>>>    
35986>>>>>>>    // This function will execute the validation message for each field within
35986>>>>>>>    // this object. If DoAllFG is true all items are validated. If false
35986>>>>>>>    // only unvisited items are checked.
35986>>>>>>>    // Added bNoStop, If true, all items are validated. It is up to you to
35986>>>>>>>    // do something with the possible cascade of errors
35986>>>>>>>    // if the err returns DFERR_ENTER_VALID_REC_ID we will not continue
35986>>>>>>>    // the validation (the other fields will be bad). This works best if the
35986>>>>>>>    // findreq appears as one of the first fields in the file (which is almost
35986>>>>>>>    // always the case
35986>>>>>>>    Function Validate_Fields Integer DoAllFg Integer bNoStop Returns Integer
35988>>>>>>>        Integer iRetval
35988>>>>>>>        Integer iMax
35988>>>>>>>        Integer iCount
35988>>>>>>>        Integer iFile
35988>>>>>>>        Integer iErr
35988>>>>>>>        String  sVS
35988>>>>>>>        Get Visited_Fields to sVS
35989>>>>>>>        Get Field_Count to iMax
35990>>>>>>>        Get Main_File to iFile
35991>>>>>>>        For iCount from 1 to iMax
35997>>>>>>>>
35997>>>>>>>            If (DoAllFG or Mid(sVS, 1, iCount)=" ") Begin
35999>>>>>>>                Get Validate_Field iCount to iErr
36000>>>>>>>                If iErr Begin
36002>>>>>>>                    Move iErr to iRetVal
36003>>>>>>>                    // error occurred. If not no-stop or the error is
36003>>>>>>>                    // a findreq error - we are done.
36003>>>>>>>                    If (not(bNoStop) or iRetVal=DFERR_ENTER_VALID_REC_ID) ;                        Function_Return iRetVal
36006>>>>>>>                End
36006>>>>>>>>
36006>>>>>>>            End
36006>>>>>>>>
36006>>>>>>>        Loop
36007>>>>>>>>
36007>>>>>>>        Function_Return iRetval
36008>>>>>>>    End_Function
36009>>>>>>>    
36009>>>>>>>    // 17.0 - added support for null-parents. If null parents allowed, req lets it through
36009>>>>>>>    Function Validate_Required Integer iField Returns Integer
36011>>>>>>>        Boolean bNull bErr
36011>>>>>>>        
36011>>>>>>>        Move (trim(Field_Current_Value(Self,iField))='') to bErr
36012>>>>>>>        If bErr ;            Send Data_set_Error iField DFERR_ENTRY_REQUIRED ""
36015>>>>>>>        Function_Return bErr
36016>>>>>>>    End_Function
36017>>>>>>>    
36017>>>>>>>    // return true if we should skip validation for this field. This can happen with Null allowed parents.
36017>>>>>>>    // if this is foreign, new and has no changes and is null allowed we will skip.
36017>>>>>>>    Function SkipValidate Integer iField Returns Boolean
36019>>>>>>>        Boolean bSkip bFieldChanged bEmpty
36019>>>>>>>        String sValue
36019>>>>>>>        
36019>>>>>>>        If (OPERATION_ORIGIN<>Self and not(HasRecord(Self)) and not(changed_state(Self))) Begin
36021>>>>>>>            // We must also check field_changed_state and only skip if this is not changed.
36021>>>>>>>            Get Field_Changed_State iField to bFieldChanged
36022>>>>>>>            // Retain and remember may set field_changed_state to true even when empty. If this field is changed
36022>>>>>>>            // but its value is empty we assume it is a candidate for Null checking, so we will set field-changed to false
36022>>>>>>>            If bFieldChanged Begin
36024>>>>>>>                Get Field_Current_Value iField to sValue
36025>>>>>>>                Get IsEmptyField iField sValue to bEmpty
36026>>>>>>>                If bEmpty Begin
36028>>>>>>>                    Move False to bFieldChanged
36029>>>>>>>                End
36029>>>>>>>>
36029>>>>>>>            End
36029>>>>>>>>
36029>>>>>>>            If (not(bFieldChanged)) Begin
36031>>>>>>>                // we must find the child that points to this DD, starting with operation_origin. If a child
36031>>>>>>>                // is found, it will be in array position 1 (0 is self, 1 is child)
36031>>>>>>>                Get IsNullParentOrAncestor to bSkip
36032>>>>>>>            End
36032>>>>>>>>
36032>>>>>>>        End
36032>>>>>>>>
36032>>>>>>>        Function_Return bSkip
36033>>>>>>>    End_Function
36034>>>>>>>    
36034>>>>>>>    
36034>>>>>>>    // This will tell us if this DD can be treated as either a null parent
36034>>>>>>>    // or an ancestor of a null parent. This should only be called for a DD
36034>>>>>>>    // that is a candidate for this meaning that it does not have a change.
36034>>>>>>>    // We will test if its child allows this parent to be null or if this
36034>>>>>>>    // is in the path of an allowed null parent. We assume that parents of
36034>>>>>>>    // null parents will also be null. This is used to test if validations are
36034>>>>>>>    // needed.
36034>>>>>>>    Function IsNullParentOrAncestor Returns Boolean
36036>>>>>>>        Handle[] hoDDs
36037>>>>>>>        Integer i iSize iMain
36037>>>>>>>        Boolean bNullAllowed
36037>>>>>>>        // gets an array where 0 is self, 1 is parent, 2 is grandparent, and the
36037>>>>>>>        // last item is the operation_origin.
36037>>>>>>>        Send DDOServerPath of operation_origin Self (&hoDDs)
36038>>>>>>>        Move (SizeOfArray(hoDDs)) to iSize
36039>>>>>>>        If (iSize) Begin
36041>>>>>>>            // see if the immediate child allows this to be null.
36041>>>>>>>            Get Main_File to iMain
36042>>>>>>>            Get IsNullParentAllowed of hoDDs[1] iMain to bNullAllowed
36043>>>>>>>            
36043>>>>>>>            // if null not allowed, see if this is an ancestor to a null allowed
36043>>>>>>>            // parent where all DDs in this path are unchanged. For example:
36043>>>>>>>            // G.DD <- P.DD <- C.DD where we C.DD allows P.DD to be null and we
36043>>>>>>>            // want to test if G.DD needs validation
36043>>>>>>>            Move 1 to i
36044>>>>>>>            While (not(bNullAllowed) and (i+1<iSize) and not(changed_state(hoDDs[i])) )
36048>>>>>>>                Get Main_File of hoDDs[i] to iMain
36049>>>>>>>                Get IsNullParentAllowed of hoDDs[i+1] iMain to bNullAllowed
36050>>>>>>>                Increment i
36051>>>>>>>            Loop
36052>>>>>>>>
36052>>>>>>>            
36052>>>>>>>        End
36052>>>>>>>>
36052>>>>>>>        Function_Return bNullAllowed
36053>>>>>>>    End_Function
36054>>>>>>>    
36054>>>>>>>    
36054>>>>>>>    Function Validate_FindReq Integer iField Returns Integer
36056>>>>>>>        Integer bErr iOpts
36056>>>>>>>        // if no current record, we have not found the required record.
36056>>>>>>>        Move (not(HasRecord(Self))) to bErr
36057>>>>>>>        // We also need to check if the field is changed. If the field is changed and this
36057>>>>>>>        // is an autofind field, this indicates that an autofind was attempted and failed. We
36057>>>>>>>        // can't jut rely on current_record because a failed autofind restores the old current
36057>>>>>>>        // record. For this to work, DEOs must set the DD field's changed_state to true on
36057>>>>>>>        // no-put fields (dd_deomx.pkg was changed to do this).
36057>>>>>>>        If (not(bErr) and field_changed_state(Self,iField)) Begin
36059>>>>>>>            Get Field_Options iField to iOpts
36060>>>>>>>            Move ( ((iOpts iand DD_AUTOFIND)=DD_AUTOFIND) or ;                ((iOpts iand DD_AUTOFIND_GE)=DD_AUTOFIND_GE) ) ;                to bErr
36061>>>>>>>        End
36061>>>>>>>>
36061>>>>>>>        If bErr ;            Send Data_set_Error iField DFERR_ENTER_VALID_REC_ID ""
36064>>>>>>>        Function_Return bErr
36065>>>>>>>    End_Function
36066>>>>>>>    
36066>>>>>>>    // This function will be called to validate a field.
36066>>>>>>>    // mark field currently being validated
36066>>>>>>>    // Altered to Check DD options (required, findreq)
36066>>>>>>>    Function Validate_Field Integer iField Returns Integer
36068>>>>>>>        Integer iResult
36068>>>>>>>        Integer iMsg
36068>>>>>>>        Integer iObj
36068>>>>>>>        String  sValue
36068>>>>>>>        Integer iFile
36068>>>>>>>        Integer iOpts iMain
36068>>>>>>>        Boolean bSkipValidate
36068>>>>>>>        Handle[] hoDDs
36069>>>>>>>        
36069>>>>>>>        Set Current_Validate_Field to iField
36070>>>>>>>        
36070>>>>>>>        // test if we should skip validation on this field
36070>>>>>>>        Get SkipValidate iField to bSkipValidate
36071>>>>>>>        
36071>>>>>>>        If (not(bSkipValidate)) Begin
36073>>>>>>>            
36073>>>>>>>            Move (Record_Buffer(Self)) to iObj
36074>>>>>>>            Get Main_File to iFile
36075>>>>>>>            
36075>>>>>>>            // Check for DD option failures: required, find_required
36075>>>>>>>            // "File_field" gets regular and foreign fields as needed
36075>>>>>>>            //Get File_Field_Options iFile iField to iOpts
36075>>>>>>>            Get Field_Options iField to iOpts  // get reg options
36076>>>>>>>            // if this is not the DDO that started the validation, we will assume that
36076>>>>>>>            // this is foreign. Operation_origin is set in Request_Validate
36076>>>>>>>            // If foreign (as defined above) and we do not allow new saves when
36076>>>>>>>            // foreign, we will consider this to be foreign and add foreign options
36076>>>>>>>            If (Operation_Origin<>Self and ;                Allow_Foreign_New_Save_State(Self)=0)  ;                Move (iOpts ior Foreign_Field_Options(Self, iField)) to iOpts
36079>>>>>>>            
36079>>>>>>>            
36079>>>>>>>            // Check for FindReq first. If it fails, set iResult to DFERR_ENTER_VALID_REC_ID so
36079>>>>>>>            // the calling function knows that a findreq failed. Always do this validation first
36079>>>>>>>            If (iOpts iand DD_FINDREQ) ;                Get Validate_FindReq  iField to iResult
36082>>>>>>>            If iResult Begin
36084>>>>>>>                Send AddDDHasFindReqError
36085>>>>>>>                Move DFERR_ENTER_VALID_REC_ID to iResult
36086>>>>>>>            End
36086>>>>>>>>
36086>>>>>>>            Else Begin
36087>>>>>>>                
36087>>>>>>>                If (iOpts iand DD_REQUIRED) ;                    Get Validate_Required iField to iResult
36090>>>>>>>                
36090>>>>>>>                If (iResult=0) Begin
36092>>>>>>>                    // First execute the user defined validation message
36092>>>>>>>                    Get Item_Validate_MSG of iObj iField to iMsg
36093>>>>>>>                    If iMsg Begin
36095>>>>>>>                        Get Field_Current_Value iField to sValue
36096>>>>>>>                        Get iMsg iField sValue to iResult
36097>>>>>>>                    End
36097>>>>>>>>
36097>>>>>>>                End
36097>>>>>>>>
36097>>>>>>>                
36097>>>>>>>                // Check for keys
36097>>>>>>>                If (iResult=0 and Key_Field_State(Self, iField)) ;                    Get Validate_Key_Field iField to iResult
36100>>>>>>>                
36100>>>>>>>                // Do extended validations
36100>>>>>>>                If (iResult=0) ;                    Get Validate_Field of (Field_Attributes(Self)) iField to iResult
36103>>>>>>>            End
36103>>>>>>>>
36103>>>>>>>        End
36103>>>>>>>>
36103>>>>>>>        
36103>>>>>>>        Set Current_Validate_Field to 0
36104>>>>>>>        // Mark this field being validated
36104>>>>>>>        Get Visited_Fields to sValue
36105>>>>>>>        Set Visited_Fields to (Overstrike("X", sValue, iField))
36106>>>>>>>        
36106>>>>>>>        Function_Return iResult
36107>>>>>>>        
36107>>>>>>>    End_Function
36108>>>>>>>    
36108>>>>>>>    
36108>>>>>>>    // This function will be called to validate a field.
36108>>>>>>>    Function File_Field_Validate_Field Integer iFile Integer iField Returns Integer
36110>>>>>>>        Integer iDSO
36110>>>>>>>        Integer iResult
36110>>>>>>>        Integer hOldOrigin
36110>>>>>>>        Get Data_Set iFile to iDSO
36111>>>>>>>        If not iDSO ;            Function_Return 0
36114>>>>>>>        
36114>>>>>>>        // This function is only called by the DEOs.
36114>>>>>>>        // It is possible for validate_item when called as part of
36114>>>>>>>        // request_validate to get called more than once
36114>>>>>>>        // when a field is foreign (it is attached to both its DDO and the
36114>>>>>>>        // child-main ddo). This makes sure the validation is only called once.
36114>>>>>>>        // (vdf7 change: previously we set OpMode to Mode_Saving and checked that, now we have
36114>>>>>>>        // a mode just for request_validate).
36114>>>>>>>        If (Operation_Mode=MODE_VALIDATING and ;         // if from request_validate            Mid(Visited_Fields(iDSO), 1, iField)="X" ) ; // and already marked            Function_Return 0                         // skip it
36117>>>>>>>        
36117>>>>>>>        Move Operation_origin to hOldOrigin
36118>>>>>>>        
36118>>>>>>>        // if from request_validate operation_origin will be set and should not
36118>>>>>>>        // be reset here.
36118>>>>>>>        If (OPERATION_ORIGIN=0) Begin
36120>>>>>>>            Move Self to Operation_Origin
36121>>>>>>>        End
36121>>>>>>>>
36121>>>>>>>        
36121>>>>>>>        Get Validate_Field of iDSO iField to iResult
36122>>>>>>>        Move hOldOrigin to Operation_Origin
36123>>>>>>>        Function_Return iResult
36124>>>>>>>    End_Function
36125>>>>>>>    
36125>>>>>>>    // This function will be called to check if a key has been changed.
36125>>>>>>>    Function Validate_Key_Field Integer iField Returns Integer
36127>>>>>>>        String  sOld_Value
36127>>>>>>>        String  sNew_Value
36127>>>>>>>        String  sKeys
36127>>>>>>>        Integer iState
36127>>>>>>>        Boolean bMultiKeys
36127>>>>>>>        Get Protect_Key_State to iState
36128>>>>>>>        If iState Begin
36130>>>>>>>            Get Key_Value to sNew_Value
36131>>>>>>>            // Only check existing records.
36131>>>>>>>            If (HasRecord(Self)) Begin
36133>>>>>>>                Get Existing_Key_Value to sOld_Value
36134>>>>>>>                If (sNew_Value <> sOld_Value) Begin
36136>>>>>>>                    // we have an error. If there is only one key field we know
36136>>>>>>>                    // where the field is and we can report that field. If we have
36136>>>>>>>                    // multiple key fields, we don't really know where the offending key change
36136>>>>>>>                    // is, so we will not report a field.
36136>>>>>>>                    Get Key_Fields to sKeys
36137>>>>>>>                    Move (Pos("X",sKeys)<>RightPos("X",sKeys)) to bMultiKeys
36138>>>>>>>                    Send Data_set_Error (If(bMultiKeys, -1, iField)) 0 DD_TEXT_NO_KEY_CHANGE_ALLOWED
36139>>>>>>>                    Function_Return 1
36140>>>>>>>                End
36140>>>>>>>>
36140>>>>>>>            End
36140>>>>>>>>
36140>>>>>>>        End
36140>>>>>>>>
36140>>>>>>>    End_Function
36141>>>>>>>    
36141>>>>>>>    
36141>>>>>>>    // During request_validate process tell us if this DD has had a find_request error. This
36141>>>>>>>    // is handled by the DD that originated the request_validate. Very private
36141>>>>>>>    Function DDHasFindReqError Returns Boolean
36143>>>>>>>        Handle[] DDsWithFindReqErrors
36144>>>>>>>        Integer iIndex
36144>>>>>>>        If (OPERATION_ORIGIN) Begin
36146>>>>>>>            Get pDDsWithFindReqErrors of OPERATION_ORIGIN to DDsWithFindReqErrors
36147>>>>>>>            Move (SearchArray(Self,DDsWithFindReqErrors)) to iIndex
36148>>>>>>>            Function_Return (iIndex<>-1)
36149>>>>>>>        End
36149>>>>>>>>
36149>>>>>>>    End_Function
36150>>>>>>>    
36150>>>>>>>    // During a request_validate a find_request error has occurred. Add this DD
36150>>>>>>>    // to list of DDs that have this error. This is handled by the DD that
36150>>>>>>>    // originated the request_validate.  Very private
36150>>>>>>>    Procedure AddDDHasFindReqError
36152>>>>>>>        Handle[] DDsWithFindReqErrors
36153>>>>>>>        If (OPERATION_ORIGIN) Begin
36155>>>>>>>            Get pDDsWithFindReqErrors of OPERATION_ORIGIN to DDsWithFindReqErrors
36156>>>>>>>            Move Self to DDsWithFindReqErrors[SizeOfArray(DDsWithFindReqErrors)]
36157>>>>>>>            Set pDDsWithFindReqErrors of OPERATION_ORIGIN to DDsWithFindReqErrors
36158>>>>>>>        End
36158>>>>>>>>
36158>>>>>>>    End_Procedure
36159>>>>>>>    
36159>>>>>>>    // This function will execute the validation message for each field of the
36159>>>>>>>    // data set and all of its parents in parent first order.
36159>>>>>>>    // Pass: DoALLFg bNoStop
36159>>>>>>>    // Added bNoStop, If true, all items are validated. It is up to you to
36159>>>>>>>    // do something with the possible cascade of errors
36159>>>>>>>    Function Validate_Data_Sets Integer DoAllFg Integer bNoStop Returns Integer
36161>>>>>>>        Integer iDSO
36161>>>>>>>        Integer iRetval
36161>>>>>>>        Integer iCount
36161>>>>>>>        Integer iMax
36161>>>>>>>        Integer bErr
36161>>>>>>>        Boolean bDDHasFindReqError
36161>>>>>>>        // ShowLn "Validate_Data_Sets in Data_Set in " (Name(self))
36161>>>>>>>        // Validate if not foreign, or foreign new saves allowed, or
36161>>>>>>>        // foreign validation is supported (it normally is)
36161>>>>>>>        If (Operation_Origin=Self or ;            Allow_Foreign_New_Save_State(Self) or ;            Validate_Foreign_File_State(Self)) Begin
36163>>>>>>>            
36163>>>>>>>            If (bNoStop) Begin
36165>>>>>>>                // if do all, it is possible that this DD as a find-req error. If so there is no
36165>>>>>>>                // need to look for more errors in this DD or its parents. This makes the do all checking
36165>>>>>>>                // a little more intelligent and doesn't return a bunch of errors when it is not needed
36165>>>>>>>                Get DDHasFindReqError to bDDHasFindReqError
36166>>>>>>>            End
36166>>>>>>>>
36166>>>>>>>            
36166>>>>>>>            If (not(bDDHasFindReqError)) Begin
36168>>>>>>>                Get Data_Set_Server_Count to iMax
36169>>>>>>>                Decrement iMax
36170>>>>>>>                For iCount from 0 to iMax
36176>>>>>>>>
36176>>>>>>>                    Get Data_Set_Server iCount to iDSO
36177>>>>>>>                    If not (Visited_state(iDSO)) Begin
36179>>>>>>>                        Get Validate_Data_Sets of iDSO DoAllFg bNoStop to bErr
36180>>>>>>>                        If bErr Begin
36182>>>>>>>                            Move bErr to iRetVal
36183>>>>>>>                            If bNoStop ;                                Move 0 to bErr
36186>>>>>>>                        End
36186>>>>>>>>
36186>>>>>>>                    End
36186>>>>>>>>
36186>>>>>>>                Until bErr
36188>>>>>>>                If not bErr Begin
36190>>>>>>>                    Get Validate_Fields DoAllFg bNoStop to bErr
36191>>>>>>>                    If bErr ;                        Move bErr to iRetVal
36194>>>>>>>                End
36194>>>>>>>>
36194>>>>>>>            End
36194>>>>>>>>
36194>>>>>>>        End
36194>>>>>>>>
36194>>>>>>>        Set Visited_State to True
36195>>>>>>>        Function_Return iRetval
36196>>>>>>>    End_Function
36197>>>>>>>    
36197>>>>>>>    // This tests the DDO and all "up" DDOs to see if a switched parent / commit test even needs to be
36197>>>>>>>    // tested. This is called by the top ValidateSwitchedCommittedParents to see if a switch parent test
36197>>>>>>>    // even needs to be applied before it has to refinds records.
36197>>>>>>>    // Return true is there is nothing to test (i.e., the shortcut worked).
36197>>>>>>>    Function IsCommittedRecursiveUpParentChangeAllowed Returns Boolean
36199>>>>>>>        Boolean bAllowed bCommitted bVisited bHasRecord
36199>>>>>>>        Integer iServers iSrvr iParent
36199>>>>>>>        Handle hoSrvr
36199>>>>>>>        
36199>>>>>>>        
36199>>>>>>>        // optimization. We only test committed parents if one parent does not allow changing committed records.
36199>>>>>>>        // This avoids extra finds and relates when not needed
36199>>>>>>>        Set Visited_State to True
36200>>>>>>>        Get Data_Set_Server_Count to iServers
36201>>>>>>>        Get IsCommitted to bCommitted
36202>>>>>>>        Move 0 to iSrvr
36203>>>>>>>        Move True to bAllowed
36204>>>>>>>        While (iSrvr<iServers and bAllowed)
36208>>>>>>>            Get Data_Set_Server iSrvr to hoSrvr
36209>>>>>>>            Get Main_File of hoSrvr to iParent
36210>>>>>>>            // if committed and parent change not allowed, we are done
36210>>>>>>>            If (bCommitted) Begin
36212>>>>>>>                Get IsCommittedParentChangeAllowed iParent to bAllowed
36213>>>>>>>            End
36213>>>>>>>>
36213>>>>>>>            // if still allowed, check all parents
36213>>>>>>>            If (bAllowed) Begin
36215>>>>>>>                Get Visited_State of hoSrvr to bVisited
36216>>>>>>>                If not bVisited Begin
36218>>>>>>>                    Get IsCommittedRecursiveUpParentChangeAllowed of hoSrvr to bAllowed
36219>>>>>>>                End
36219>>>>>>>>
36219>>>>>>>            End
36219>>>>>>>>
36219>>>>>>>            Increment iSrvr
36220>>>>>>>        Loop
36221>>>>>>>>
36221>>>>>>>        Function_Return bAllowed
36222>>>>>>>    End_Function
36223>>>>>>>    
36223>>>>>>>    
36223>>>>>>>    // special validate-save check for changed committed parent. If the record is committed
36223>>>>>>>    // and it has a switched parent and this is not allowed, we have an error. This should rarely happen because the
36223>>>>>>>    // DEOs should guard aginst this. This is a recursive routine that requires special attention the first time through.
36223>>>>>>>    // When called from the we must refind the original record and all original parents. This way we can compare these parent
36223>>>>>>>    // rowids to the DD row id (if different, they've changed). At the end we must restore the DD records. Because this takes time
36223>>>>>>>    // we only even do this if this is committed and there is a chance that there are changed parents
36223>>>>>>>    
36223>>>>>>>    Function ValidateSwitchedCommittedParents Boolean bTop Returns Boolean
36225>>>>>>>        Integer iServers iSrvr iMain iParent iPMain
36225>>>>>>>        Handle hoSrvr
36225>>>>>>>        RowID riCrnt riParent riPCrnt
36225>>>>>>>        Boolean bChanged bCommitted bAllowed bErr bParentChanged bVisited
36225>>>>>>>        Boolean bHasRecord bPHasRecord bFound
36225>>>>>>>        
36225>>>>>>>        
36225>>>>>>>        // Shortcut optimization. This tests for any committed DDO with a parent that doesn't allow a switch
36225>>>>>>>        // return true if there is any reason to actually test any DDO up the tree for a parent change
36225>>>>>>>        If bTop Begin
36227>>>>>>>            // init visited nodes, these will be tested and set in IsCommittedRecursiveUpParentChangeAllowed
36227>>>>>>>            Send Initialize_Visited False False //false=up only, true=clear fields
36228>>>>>>>            Get IsCommittedRecursiveUpParentChangeAllowed to bAllowed
36229>>>>>>>            If bAllowed Begin
36231>>>>>>>                Function_Return False // if all are allowed, we have nothing to test - its ok
36232>>>>>>>            End
36232>>>>>>>>
36232>>>>>>>        End
36232>>>>>>>>
36232>>>>>>>        
36232>>>>>>>        Get Main_File to iMain
36233>>>>>>>        Get CurrentRowId to riCrnt
36234>>>>>>>        Get Data_Set_Server_Count to iServers
36235>>>>>>>        Get HasRecord to bHasRecord
36236>>>>>>>        
36236>>>>>>>        If (bHasRecord and (bTop or not(IsSameRowID(GetRowID(iMain),riCrnt))) ) Begin
36238>>>>>>>            // this refinds the main record and, most importantly, relates all original parents on up
36238>>>>>>>            // We now have the original parents which we can test to see if they are changed.
36238>>>>>>>            Get ReadByRowIdEx iMain riCrnt to bFound
36239>>>>>>>            If not bFound Begin
36241>>>>>>>                Error DFERR_CANT_REFIND_RECORD
36242>>>>>>>>
36242>>>>>>>                Function_Return True
36243>>>>>>>            End
36243>>>>>>>>
36243>>>>>>>        End
36243>>>>>>>>
36243>>>>>>>        
36243>>>>>>>        If (bTop) Begin
36245>>>>>>>            // If at start, init visited nodes, these will be tested and set during recursive calls to this function
36245>>>>>>>            Send Initialize_Visited False False // false=up only, true=clear fields
36246>>>>>>>        End
36246>>>>>>>>
36246>>>>>>>        
36246>>>>>>>        Set Visited_State to True
36247>>>>>>>        Get IsCommitted to bCommitted
36248>>>>>>>        If bCommitted Begin
36250>>>>>>>            // Parent_Changed_State tells us a parent is changed but not which one. Look at each child to see if it is changed.
36250>>>>>>>            // First see any any of the parents are changed.
36250>>>>>>>            Get Parent_Changed_State to bChanged
36251>>>>>>>            If bChanged Begin
36253>>>>>>>                // Parent_Changed_State tells us a parent is changed but not which one. Look at each child to see if it is changed.
36253>>>>>>>                Move 0 to iSrvr
36254>>>>>>>                While (iSrvr<iServers and not(bErr))
36258>>>>>>>                    Get Data_Set_Server iSrvr to hoSrvr
36259>>>>>>>                    Get Main_File of hoSrvr to iParent
36260>>>>>>>                    Get CurrentRowId of hoSrvr to riParent
36261>>>>>>>                    Move (not(IsSameRowID(GetRowID(iParent),riParent))) to bParentChanged // is parent changed?
36262>>>>>>>                    If bParentChanged Begin
36264>>>>>>>                        Get IsCommittedParentChangeAllowed iParent to bAllowed // is changing committed parent allowed?
36265>>>>>>>                        If not bAllowed Begin
36267>>>>>>>                            Move True to bErr
36268>>>>>>>                            If bErr Begin
36270>>>>>>>                                Send Data_Set_Error of hoSrvr -1 0 DD_CANNOT_SWITCH_PARENT
36271>>>>>>>                            End
36271>>>>>>>>
36271>>>>>>>                        End
36271>>>>>>>>
36271>>>>>>>                    End
36271>>>>>>>>
36271>>>>>>>                    Increment iSrvr
36272>>>>>>>                Loop
36273>>>>>>>>
36273>>>>>>>            End
36273>>>>>>>>
36273>>>>>>>        End
36273>>>>>>>>
36273>>>>>>>        
36273>>>>>>>        // no error in immediate we must continue this check up the parent tree.
36273>>>>>>>        Move 0 to iSrvr
36274>>>>>>>        While (iSrvr<iServers and not(bErr))
36278>>>>>>>            Get Data_Set_Server iSrvr to hoSrvr
36279>>>>>>>            Get Visited_State of hoSrvr to bVisited
36280>>>>>>>            If (not(bVisited)) Begin
36282>>>>>>>                
36282>>>>>>>                // if new record, we need to refind parent records from here since you cannot
36282>>>>>>>                // have done a find/relate on a new record.
36282>>>>>>>                If (not(bHasRecord)) Begin
36284>>>>>>>                    Get HasRecord of hoSrvr to bPHasRecord
36285>>>>>>>                    If (bPHasRecord) Begin
36287>>>>>>>                        Get Main_File of hoSrvr to iPMain
36288>>>>>>>                        Get CurrentRowId of hoSrvr to riPCrnt
36289>>>>>>>                        If (not(IsNullRowID(riPCrnt))) Begin
36291>>>>>>>                            Get ReadByRowIdEx of hoSrvr iPMain riPCrnt to bFound
36292>>>>>>>                            If not bFound Begin
36294>>>>>>>                                Error DFERR_CANT_REFIND_RECORD
36295>>>>>>>>
36295>>>>>>>                                Function_Return True
36296>>>>>>>                            End
36296>>>>>>>>
36296>>>>>>>                        End
36296>>>>>>>>
36296>>>>>>>                    End
36296>>>>>>>>
36296>>>>>>>                End
36296>>>>>>>>
36296>>>>>>>                
36296>>>>>>>                Get ValidateSwitchedCommittedParents of hoSrvr False to bErr // call recursively up the parent tree
36297>>>>>>>            End
36297>>>>>>>>
36297>>>>>>>            Increment iSrvr
36298>>>>>>>        Loop
36299>>>>>>>>
36299>>>>>>>        
36299>>>>>>>        If bTop Begin // if back to the top, make sure our buffers are correct.
36301>>>>>>>            Send Refind_Records
36302>>>>>>>        End
36302>>>>>>>>
36302>>>>>>>        
36302>>>>>>>        Function_Return bErr
36303>>>>>>>    End_Function
36304>>>>>>>    
36304>>>>>>>    Procedure Entry_Update_Data_Sets Integer iFile Integer iAll
36306>>>>>>>        
36306>>>>>>>        Handle hoBuff hoDSO
36306>>>>>>>        Boolean bCommit bIsFind bVisited bIsForeign
36306>>>>>>>        Integer iMax iCount iItems iOpts iChanges
36306>>>>>>>        
36306>>>>>>>        
36306>>>>>>>        Move record_buffer to hoBuff
36307>>>>>>>        Move (OPERATION_MODE<>MODE_SAVING) to bIsFind
36308>>>>>>>        
36308>>>>>>>        // first recurse to all parent ddos
36308>>>>>>>        Get Data_Set_Server_Count to iMax
36309>>>>>>>        Decrement iMax
36310>>>>>>>        For iCount from 0 to iMax
36316>>>>>>>>
36316>>>>>>>            Get Data_Set_Server iCount to hoDSO
36317>>>>>>>            Get Visited_State of hoDSO to bVisited
36318>>>>>>>            If not (bVisited) Begin
36320>>>>>>>                Send Entry_Update_Data_Sets to hoDSO iFile iAll
36321>>>>>>>            End
36321>>>>>>>>
36321>>>>>>>        Loop
36322>>>>>>>>
36322>>>>>>>        
36322>>>>>>>        // if find, we only do this if the main file is the same as the find file
36322>>>>>>>        If (not(bIsFind) or iFile=Main_File(Self)) Begin
36324>>>>>>>            If (not(bIsFind)) Begin
36326>>>>>>>                // if a save, we care if it is committed.
36326>>>>>>>                Get IsCommitted to bCommit
36327>>>>>>>            End
36327>>>>>>>>
36327>>>>>>>            
36327>>>>>>>            // pass if Find (True) or save (False). We only care about commit on saves
36327>>>>>>>            // The setting of bIsForeign is an approximation. Foreign is really a DEO and and not
36327>>>>>>>            // a DD concept - in fact, at this point we don't really know. For example, a save in a header/dtl
36327>>>>>>>            // detail DEO (ordrdtl grid)has header DEOs that are not really foreign. This test errs on the side
36327>>>>>>>            // of assuming it's foreign. This would cause problems with incorrect parent NoPuts except we also
36327>>>>>>>            // set a flag, Field_NoPutValueChangedByDeo, when a field is changed via a NoPut DEO. The DD will still update
36327>>>>>>>            // foreign NoPuts unless this field flag is set.
36327>>>>>>>            Move (OPERATION_ORIGIN<>Self and Allow_Foreign_New_Save_State(Self)=0) to bIsForeign
36328>>>>>>>            Send Entry_Update of hoBuff bIsFind (If(bCommit,1,0) + If(bIsForeign,2,0))
36329>>>>>>>            
36329>>>>>>>            // also move data from extended dd fields to buffer
36329>>>>>>>            Send ExtendedFieldsUpdate (not(bIsFind))
36330>>>>>>>        End
36330>>>>>>>>
36330>>>>>>>        Set Visited_State to True
36331>>>>>>>        
36331>>>>>>>    End_Procedure
36332>>>>>>>    
36332>>>>>>>    // is this field NoPut based passed Commit and Foreign flags.
36332>>>>>>>    Function FieldNoPut Integer iField Boolean bIsCommited Boolean bIsForeign Returns Boolean
36334>>>>>>>        Boolean bNoPut
36334>>>>>>>        // this uses runtime logic - the same use for moving DD Buffer to Field Buffer
36334>>>>>>>        Get IsFieldDDNoPut of Record_Buffer iField (If(bIsCommited,1,0) + If(bIsForeign,2,0)) to bNoPut
36335>>>>>>>        Function_Return bNoPut
36336>>>>>>>    End_Function
36337>>>>>>>    
36337>>>>>>>    
36337>>>>>>>    // Check that Server data-sets exist for all required server file numbers
36337>>>>>>>    Function Valid_Servers Returns Integer
36339>>>>>>>        Integer iRval
36339>>>>>>>        Integer iCount
36339>>>>>>>        Integer iMax
36339>>>>>>>        Integer iDSO
36339>>>>>>>        Integer iPos
36339>>>>>>>        Integer iFile
36339>>>>>>>        String  sFiles
36339>>>>>>>        
36339>>>>>>>        // First assemble a string of all server file#s in ','##',' format
36339>>>>>>>        Move ',' to sFiles
36340>>>>>>>        Get Data_Set_Server_Count to iMax
36341>>>>>>>        Decrement iMax
36342>>>>>>>        For iCount from 0 to iMax
36348>>>>>>>>
36348>>>>>>>            Get Data_Set_Server iCount to iDSO
36349>>>>>>>            Move ( sFiles + String(Main_file(iDSO)) + ",") to sFiles
36350>>>>>>>        Loop
36351>>>>>>>>
36351>>>>>>>        
36351>>>>>>>        // Make sure each required File exists
36351>>>>>>>        Get Server_File_Count to iMax
36352>>>>>>>        Decrement iMax
36353>>>>>>>        For iCount from 0 to iMax
36359>>>>>>>>
36359>>>>>>>            Get Server_File iCount to iFile
36360>>>>>>>            Move (Pos ( ','+String(iFile)+',' , sFiles)) to iPos
36361>>>>>>>            If (iPos = 0) ;                Move iFile to iRVal
36364>>>>>>>        Until iRval
36366>>>>>>>        Function_Return iRVal
36367>>>>>>>    End_Function
36368>>>>>>>    
36368>>>>>>>    
36368>>>>>>>    // Check that Client data-sets exist for all required Client file numbers
36368>>>>>>>    Function Valid_Clients Returns Integer
36370>>>>>>>        Integer iRval
36370>>>>>>>        Integer iCount
36370>>>>>>>        Integer iMax
36370>>>>>>>        Integer iDSO
36370>>>>>>>        Integer iPos
36370>>>>>>>        Integer iFile
36370>>>>>>>        String  sFiles
36370>>>>>>>        
36370>>>>>>>        // First assemble a string of all Client file#s in ','##',' format
36370>>>>>>>        Move ',' to sFiles
36371>>>>>>>        Get Data_Set_Client_Count to iMax
36372>>>>>>>        Decrement iMax
36373>>>>>>>        For iCount from 0 to iMax
36379>>>>>>>>
36379>>>>>>>            Get Data_Set_Client iCount to iDSO
36380>>>>>>>            Move ( sFiles + String(Main_file(iDSO))+",") to sFiles
36381>>>>>>>        Loop
36382>>>>>>>>
36382>>>>>>>        
36382>>>>>>>        // Make sure each required File exists
36382>>>>>>>        Get Client_File_Count to iMax
36383>>>>>>>        Decrement iMax
36384>>>>>>>        For iCount from 0 to iMax
36390>>>>>>>>
36390>>>>>>>            Get Client_File iCount to iFile
36391>>>>>>>            Move (Pos( ','+String(iFile)+',', sFiles)) to iPos
36392>>>>>>>            If (iPos = 0) ;                Move iFile to iRVal
36395>>>>>>>        Until iRval
36397>>>>>>>        Function_Return iRVal
36398>>>>>>>    End_Function
36399>>>>>>>    
36399>>>>>>>    
36399>>>>>>>    // Validates save updating connections. If error returns file# that is
36399>>>>>>>    // expected and missing. If no error Set Validated_Save_connectio_State
36399>>>>>>>    // indicating that the connection validation has occurred and is ok
36399>>>>>>>    Function Validate_Save_Structure Integer ForceFg Returns Integer
36401>>>>>>>        Integer iRval
36401>>>>>>>        Integer iMode
36401>>>>>>>        If not ForceFg Begin
36403>>>>>>>            Get Validate_Save_Structure_Mode to iMode
36404>>>>>>>            Move ( iMode=DD_VALIDATE_STRUCTURE_ALWAYS or ;                (iMode=DD_VALIDATE_STRUCTURE_ONCE and ;                Save_Structure_Validated_state(Self)=0 ) ) ;                to ForceFg
36405>>>>>>>        End
36405>>>>>>>>
36405>>>>>>>        If ForceFg Begin
36407>>>>>>>            Get Valid_Structure False to iRval
36408>>>>>>>            If (iRVal = 0) ;                Set Save_Structure_Validated_State to True
36411>>>>>>>        End
36411>>>>>>>>
36411>>>>>>>        Function_Return iRVal
36412>>>>>>>    End_Function
36413>>>>>>>    
36413>>>>>>>    // Validates Delete Structure. If cascade_state is true this must check
36413>>>>>>>    // up and down the tree. If no cascade_state just check up the tree.  If
36413>>>>>>>    // Ok, set Validated_Delete_no_Cascade_Connection_State and and or
36413>>>>>>>    // Validated_Delete_Cascade_Connection_State
36413>>>>>>>    // Pass: ForceFg - if TRUE force the validation.
36413>>>>>>>    Function Validate_Delete_Structure Integer ForceFg Returns Integer
36415>>>>>>>        Integer iCascade
36415>>>>>>>        Integer iMode
36415>>>>>>>        Integer iSt
36415>>>>>>>        Integer iRval
36415>>>>>>>        Get Cascade_delete_State to iCascade
36416>>>>>>>        If not ForceFg Begin
36418>>>>>>>            Get Validate_Delete_Structure_Mode to iMode
36419>>>>>>>            If (iMode=DD_VALIDATE_STRUCTURE_ONCE and iCascade );                Get Cascade_Delete_Structure_Validated_state to iSt
36422>>>>>>>            Else ;                Get No_Cascade_Delete_Structure_Validated_state to iSt
36424>>>>>>>            Move ( iMode=DD_VALIDATE_STRUCTURE_ALWAYS or ;                (iMode=DD_VALIDATE_STRUCTURE_ONCE and iSt=0) ) to ForceFg
36425>>>>>>>        End
36425>>>>>>>>
36425>>>>>>>        
36425>>>>>>>        If ForceFg Begin
36427>>>>>>>            Get Valid_Structure iCascade to iRval
36428>>>>>>>            If (iRval = 0) Begin
36430>>>>>>>                Set No_Cascade_Delete_Structure_Validated_State to True
36431>>>>>>>                If iCascade ;                    Set Cascade_Delete_Structure_Validated_State to True
36434>>>>>>>            End
36434>>>>>>>>
36434>>>>>>>        End
36434>>>>>>>>
36434>>>>>>>        Function_Return iRval
36435>>>>>>>    End_Function
36436>>>>>>>    
36436>>>>>>>    
36436>>>>>>>    // This procedure will be called whenever the Data_Set wants its DEOs to
36436>>>>>>>    // write their values to the record buffer. The value of OPERATION_MODE
36436>>>>>>>    // determines if this is for finding an record or before saving a record.
36436>>>>>>>    // We use this event to tell our Record_Buffer to update the
36436>>>>>>>    // global record buffer.
36436>>>>>>>    // Modified to visit all server DSOs
36436>>>>>>>    // Note that this is only sent to the DSO starting the operation.
36436>>>>>>>    // We must manually send this to all server data-sets ourselves
36436>>>>>>>    // Note that during a DSO save this will get passed iFile=0 and iAll=3
36436>>>>>>>    // Changed to Support EntryUpdateLocalState (private)
36436>>>>>>>    // as of 17.0, EntryUpdateLocalState is True which means that entry_updates
36436>>>>>>>    // for finds now through the DD Buffer (saves always did).
36436>>>>>>>    Procedure Request_Entry_Update Integer iFile Integer iAll
36438>>>>>>>        If ((Operation_Mode=MODE_SAVING and iAll=3) or (EntryUpdateLocalState(Self)) ) Begin //3=dso save
36440>>>>>>>            If (OPERATION_MODE=MODE_WAITING) Begin
36442>>>>>>>                // we will only not be in an operation if we are doing a find with EntryUpdateLocalState
36442>>>>>>>                // set to true. In such a case make this a finding. I am not this is actually needed
36442>>>>>>>                Send Update_Focus_Field_For_Operation MODE_FINDING
36443>>>>>>>            End
36443>>>>>>>>
36443>>>>>>>            Else Begin
36444>>>>>>>                // if here we already have an operation_mode so there is no need to do anything special
36444>>>>>>>                Send Update_Focus_Field // Make sure buffer has latest focus item changes
36445>>>>>>>            End
36445>>>>>>>>
36445>>>>>>>            Send Initialize_Visited False False // Clear up, do not clear fields
36446>>>>>>>            Send Entry_Update_Data_Sets iFile iAll
36447>>>>>>>        End
36447>>>>>>>>
36447>>>>>>>        Forward Send Request_Entry_Update iFile iAll
36449>>>>>>>    End_Procedure
36450>>>>>>>    
36450>>>>>>>    
36450>>>>>>>    
36450>>>>>>>    // Forces the focus field to get update its value with the data-set.
36450>>>>>>>    // This insures that the DSO and DEO contain the same values.
36450>>>>>>>    Procedure Update_Focus_Field
36452>>>>>>>        Integer iFocObj
36452>>>>>>>        Get Focus of desktop to iFocObj
36453>>>>>>>        If (Extended_DEO_State(iFocObj)) ;            Send Update_Focus_Field to iFocObj
36456>>>>>>>    End_Procedure
36457>>>>>>>    
36457>>>>>>>    // very internal. Used to set Operation_mode and Operation_origin before the
36457>>>>>>>    // update. A developer can use this in the DEO to know what state the update is in.
36457>>>>>>>    // This was created because a DEO value change will trigger an OnChange event and you
36457>>>>>>>    // can look at this and know that this is part of a DD operation.
36457>>>>>>>    // This is *only* called by the DD operations in this class and the change is made for as
36457>>>>>>>    // small of a period as possible.
36457>>>>>>>    Procedure Update_Focus_Field_For_Operation Integer iOperationMode
36459>>>>>>>        Integer iOldMode iOldOrigin
36459>>>>>>>        
36459>>>>>>>        Move OPERATION_MODE to iOldMode
36460>>>>>>>        Move OPERATION_ORIGIN to iOldOrigin
36461>>>>>>>        Move iOperationMode to OPERATION_MODE
36462>>>>>>>        Move Self to OPERATION_ORIGIN
36463>>>>>>>        Send Update_Focus_Field
36464>>>>>>>        Move iOldMode to OPERATION_MODE
36465>>>>>>>        Move iOldOrigin to OPERATION_ORIGIN
36466>>>>>>>    End_Procedure
36467>>>>>>>    
36467>>>>>>>    
36467>>>>>>>    // Augment to validate all field values that do not get
36467>>>>>>>    // validated as part of the item validation process. The advantage
36467>>>>>>>    // of item validation (over only field validation) is that an error
36467>>>>>>>    // returns you to the offending item.
36467>>>>>>>    Function Request_Validate Returns Integer
36469>>>>>>>        Integer iRetval iOldOrigin iOldMode iRetVal2
36469>>>>>>>        Handle[] DDsWithFindReqErrors
36470>>>>>>>        
36470>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
36472>>>>>>>            Send Update_Focus_Field_For_Operation MODE_VALIDATING // added 12.1/15.1
36473>>>>>>>        End
36473>>>>>>>>
36473>>>>>>>        Move Operation_Origin to iOldOrigin
36474>>>>>>>        Move Self to Operation_Origin
36475>>>>>>>        Move Operation_Mode to iOldMode
36476>>>>>>>        // clear all find req DD markers at the origin of the validate request. When request validates occur
36476>>>>>>>        // they will get added to this array and can be tested to see of such an error has occurred.
36476>>>>>>>        Set pDDsWithFindReqErrors to DDsWithFindReqErrors
36477>>>>>>>        // Prior to VDF7, we set this to Mode_Saving. We now have a special mode just for request_validate.
36477>>>>>>>        // We do this because:
36477>>>>>>>        //   1) because it is useful (more detail never hurts) and
36477>>>>>>>        //   2) we will allow set_field_current_value to update when mode_validation is set
36477>>>>>>>        Move MODE_VALIDATING to Operation_Mode
36478>>>>>>>        Send Initialize_Visited False True //false=up only, true=clear fields
36479>>>>>>>        Forward Get Request_Validate to iRetval // normal deo validate
36481>>>>>>>        // If DEO validation failed, do not validate other fields unless Validate_All_Fields is set
36481>>>>>>>        If ( (iRetval=0 or (Validate_All_Fields_State(Self))) and Validate_DEOs_Only_State(Self)=0) Begin
36483>>>>>>>            Get Validate_Data_Sets False (Validate_All_Fields_State(Self)) to iRetval2
36484>>>>>>>            Move (iRetval or iRetVal2) to iRetval
36485>>>>>>>        End
36485>>>>>>>>
36485>>>>>>>        
36485>>>>>>>        If (iRetval=0) Begin
36487>>>>>>>            Get ValidateSwitchedCommittedParents True to iRetval
36488>>>>>>>        End
36488>>>>>>>>
36488>>>>>>>        
36488>>>>>>>        Move iOldMode   to Operation_Mode
36489>>>>>>>        Move iOldOrigin to Operation_Origin
36490>>>>>>>        Function_Return iRetval
36491>>>>>>>    End_Function
36492>>>>>>>    
36492>>>>>>>    Function Request_Validate_All Returns Integer
36494>>>>>>>        Integer bOld iRetVal
36494>>>>>>>        Get Validate_All_Fields_State to bOld
36495>>>>>>>        Set Validate_All_Fields_State to True
36496>>>>>>>        Get request_validate to iretVal
36497>>>>>>>        Set Validate_All_Fields_State to bOld
36498>>>>>>>        Function_Return iRetval
36499>>>>>>>    End_Function
36500>>>>>>>    
36500>>>>>>>    
36500>>>>>>>    
36500>>>>>>>    // Like Item_find except entry-update is forced through the DD, not DEO
36500>>>>>>>    Procedure File_Field_Find Integer iFindMode Integer iFile Integer iField ;            Integer bEntUpdt  Integer bShowErr Integer bDfrd
36502>>>>>>>        Integer bOld
36502>>>>>>>        Get EntryUpdateLocalState to bOld
36503>>>>>>>        Set EntryUpdateLocalState to True
36504>>>>>>>        Send Item_Find iFindMode iFile iField bEntUpdt bShowErr bDfrd
36505>>>>>>>        Set EntryUpdateLocalState to bOld
36506>>>>>>>    End_Procedure
36507>>>>>>>    
36507>>>>>>>    // Autofind for requestd file, field and mode.
36507>>>>>>>    //    If mode not passed, EQ is assummed
36507>>>>>>>    Procedure File_Field_AutoFind Integer iFile Integer iField Integer iFindMode
36509>>>>>>>        Integer eMode
36509>>>>>>>        If iFile  Begin
36511>>>>>>>            // if no 3rd argument, default to autofind
36511>>>>>>>            Move (If(Num_Arguments<3,EQ,iFindMode)) to eMode
36512>>>>>>>            Send File_Field_Find eMode iFile iField True False False
36513>>>>>>>        End
36513>>>>>>>>
36513>>>>>>>    End_Procedure
36514>>>>>>>    
36514>>>>>>>    // Autofind in default mode (does not set changed states). Can be used
36514>>>>>>>    // within Clear and Clear_all to autofind parents. Parent values can be
36514>>>>>>>    // maintained using retainAll option
36514>>>>>>>    Procedure File_Field_Default_AutoFind Integer iFile Integer iField
36516>>>>>>>        Integer iOldState
36516>>>>>>>        Handle  hoDD
36516>>>>>>>        Get Data_set iFile to hoDD
36517>>>>>>>        If hoDD Begin
36519>>>>>>>            Get Change_disabled_State of hoDD to iOldState
36520>>>>>>>            Set Change_disabled_State of hoDD to True
36521>>>>>>>            Send File_Field_AutoFind  of hoDD iFile iField EQ
36522>>>>>>>            Set Change_disabled_State of hoDD to iOldState
36523>>>>>>>            Set changed_state to False
36524>>>>>>>        End
36524>>>>>>>>
36524>>>>>>>    End_Procedure
36525>>>>>>>    
36525>>>>>>>    // File_Index_find
36525>>>>>>>    // Like item_find except you pass the index you want to find with and
36525>>>>>>>    // ent-update occurs through DDO buffers not deo buffers.
36525>>>>>>>    // This is currently private and is only used by web-applications
36525>>>>>>>    Procedure File_Index_Find Integer iFindMode Integer iFile Integer iIndex ;            Integer bEntUpdt  Integer bShowErr Integer bDfrd
36527>>>>>>>        Integer bOld
36527>>>>>>>        RowID riRec
36527>>>>>>>        Integer wasChanged hDD iOldStat
36527>>>>>>>        Boolean bOk
36527>>>>>>>        
36527>>>>>>>        Get Data_Set iFile to hDD
36528>>>>>>>        If (hDD=0) Begin
36530>>>>>>>            Error DFERR_PROGRAM C_$CannotFindDD
36531>>>>>>>>
36531>>>>>>>            Procedure_Return
36532>>>>>>>        End
36532>>>>>>>>
36532>>>>>>>        
36532>>>>>>>        Get EntryUpdateLocalState to bOld
36533>>>>>>>        Set EntryUpdateLocalState to True
36534>>>>>>>        
36534>>>>>>>        //  'hold' buffer to prepare for entry_update
36534>>>>>>>        Move (getRowId(iFile)) to riRec
36535>>>>>>>        Get_Attribute DF_FILE_STATUS of iFile to iOldStat
36538>>>>>>>        Set_Attribute DF_FILE_STATUS of iFile to DF_FILE_INACTIVE
36541>>>>>>>        
36541>>>>>>>        If bEntUpdt Begin
36543>>>>>>>            Send Request_Entry_Update to hDD iFile 1  //entUpdt all DEOs as required
36544>>>>>>>            
36544>>>>>>>            //
36544>>>>>>>            // we really only need to know if any segment of the index changed
36544>>>>>>>            // but since we don't have field-changed flags, we look at the
36544>>>>>>>            // whole recbuf - this is consistent with 2.3b and 3.0 non-dataset
36544>>>>>>>            // behavior.
36544>>>>>>>            //
36544>>>>>>>            Move (iOldStat<>DF_FILE_INACTIVE) to wasChanged
36545>>>>>>>            If not wasChanged ;                Get_Attribute DF_FILE_CHANGED of iFile to wasChanged
36550>>>>>>>            If not wasChanged ;                Constrained_Clear iFindMode iFile by iIndex
36555>>>>>>>            
36555>>>>>>>        End
36555>>>>>>>>
36555>>>>>>>        Move False to Err
36556>>>>>>>        If bDfrd ;            Send Request_Read iFindMode iFile iIndex
36559>>>>>>>        Else ;            Send Request_Find iFindMode iFile iIndex
36561>>>>>>>        If (not(Found) and  not(err)) Begin
36563>>>>>>>            // refind original record (or leave it cleared if not record)
36563>>>>>>>            Move (FindByRowId(iFile,riRec)) to bOk
36564>>>>>>>            
36564>>>>>>>            If bShowErr ;                Error (If(iFindMode<2, DFERR_FIND_PRIOR_BEG_OF_FILE, DFERR_FIND_PAST_END_OF_FILE))
36567>>>>>>>            Move False to Err
36568>>>>>>>        End
36568>>>>>>>>
36568>>>>>>>        Set EntryUpdateLocalState to bOld
36569>>>>>>>    End_Procedure
36570>>>>>>>    
36570>>>>>>>    // This does a refind of all records based on the contents of the
36570>>>>>>>    // refine_record_id property.
36570>>>>>>>    // This would be used after clearing the DDs and loading the local rencum
36570>>>>>>>    // buffer with recnums. This can be used by remote DEOs (BPOs).
36570>>>>>>>    //
36570>>>>>>>    // Find all existing records. This must be done in bottom-up, breadth
36570>>>>>>>    // first order. i.e., Start with the passed DD, find it and then find for
36570>>>>>>>    // parents. Only find if the record is non-zero and it is different than
36570>>>>>>>    // the current_record.
36570>>>>>>>    // This order will allow us to support changed parents.
36570>>>>>>>    // Don't use this if you do not understand what it does.
36570>>>>>>>    // Private.Find_Records is a helper. We will keep this private because
36570>>>>>>>    // it is rather specialized and only used by WebApp.
36570>>>>>>>    Procedure Find_Records
36572>>>>>>>        Send Initialize_Visited False False // Clear up, do not clear fields
36573>>>>>>>        Send Private.Find_Records           // refind all records in upward sweep
36574>>>>>>>    End_Procedure
36575>>>>>>>    
36575>>>>>>>    
36575>>>>>>>    Procedure Private.Find_Records
36577>>>>>>>        Integer hPrnt
36577>>>>>>>        Integer iMax
36577>>>>>>>        Integer iCount
36577>>>>>>>        RowID riRec
36577>>>>>>>        Integer iRec iMain
36577>>>>>>>        // works with both recId and rowId. Only one should ever be set.
36577>>>>>>>        // find(clear) record, if needed
36577>>>>>>>        Get Main_File to iMain
36578>>>>>>>        // assume that either prFindRowId or Find_record_id has a value - never both
36578>>>>>>>        // also assume Find_record_id only has values when you are using a recnum table
36578>>>>>>>        Get prFindRowId to riRec
36579>>>>>>>        If not (IsNullRowId(riRec)) Begin
36581>>>>>>>            If not (IsSameRowId(riRec, CurrentRowId(Self) ) ) Begin
36583>>>>>>>                Send FindByRowId iMain riRec // find an Relate all parents
36584>>>>>>>            End
36584>>>>>>>>
36584>>>>>>>            Set prFindRowId to (NullRowId())  // reset refind rec back to zero.
36585>>>>>>>        End
36585>>>>>>>>
36585>>>>>>>        Else Begin
36586>>>>>>>            // if this has a recnum, it better be a recnum table or an error will occur.
36586>>>>>>>            // This is not being tested for a recnum table on purpose. If someone is setting Find_record_id
36586>>>>>>>            // on a non-recnum table, they doing something wrong. An Error will be a good thing.
36586>>>>>>>            Get Find_Record_Id to iRec
36587>>>>>>>            If iRec Begin
36589>>>>>>>                If (iRec<>Current_record(Self)) Begin
36591>>>>>>>                    Send Find_By_Recnum iMain iRec // find an Relate all parents
36592>>>>>>>                End
36592>>>>>>>>
36592>>>>>>>                Set Find_record_id to 0 // reset refind rec back to zero.
36593>>>>>>>            End
36593>>>>>>>>
36593>>>>>>>        End
36593>>>>>>>>
36593>>>>>>>        Set Visited_State to True
36594>>>>>>>        
36594>>>>>>>        // recurse and do the same to all parent files
36594>>>>>>>        // in almost all cases, there will be no new finding here since the relate has
36594>>>>>>>        // found the records. If the record is different than the relate, we have
36594>>>>>>>        // a switched parent state (should_save will be set appropriately).
36594>>>>>>>        Get Data_Set_Server_Count to iMax
36595>>>>>>>        Decrement iMax
36596>>>>>>>        For iCount from 0 to iMax
36602>>>>>>>>
36602>>>>>>>            Get Data_Set_Server iCount to hPrnt
36603>>>>>>>            If not (Visited_state(hPrnt)) ;                Send Private.Find_Records to hPrnt
36606>>>>>>>        Loop
36607>>>>>>>>
36607>>>>>>>    End_Procedure
36608>>>>>>>    
36608>>>>>>>    // This Mark_Id creates a sequence Id for this clear. This way
36608>>>>>>>    // DDOs only get cleared one time during this process.
36608>>>>>>>    Procedure IncrementCurrentMarkId
36610>>>>>>>        If (DD_Current_Mark_ID>65536) Begin
36612>>>>>>>            Move 0 to DD_Current_Mark_id
36613>>>>>>>        End
36613>>>>>>>>
36613>>>>>>>        Increment DD_Current_Mark_id
36614>>>>>>>    End_Procedure
36615>>>>>>>    
36615>>>>>>>    
36615>>>>>>>    // private use by new webapp framework as of 18.2.
36615>>>>>>>    // pass bStart as True if this is the start of the resynch.
36615>>>>>>>    Function ReSyncRecords Boolean bStart Returns Handle
36617>>>>>>>        RowID riRowId riCrnt
36617>>>>>>>        Boolean bOk bOldReSync bVisited
36617>>>>>>>        Handle hoOtherDDO hoBadDDO hoBadPrntDDO
36617>>>>>>>        Integer iMax iCount iMain
36617>>>>>>>
36617>>>>>>>        If bStart Begin
36619>>>>>>>            Send InitializeAllVisited
36620>>>>>>>        End
36620>>>>>>>>
36620>>>>>>>        
36620>>>>>>>        // we want depth first traversal. Make sure children are handled before parents
36620>>>>>>>        // Recursively traverse Children, Find by RowId, Recursively traverse Parents
36620>>>>>>>        // Use visited_state logic to avoid multiple visits caused by diamond DDO strutures
36620>>>>>>>        
36620>>>>>>>        //mark first so we don't visit this coming back up.
36620>>>>>>>        Set Visited_State to True
36621>>>>>>>        
36621>>>>>>>        // traverse downward first
36621>>>>>>>        Get Data_Set_Client_Count to iMax
36622>>>>>>>        For iCount from 0 to (iMax-1)
36628>>>>>>>>
36628>>>>>>>            Get Data_Set_Client iCount to hoOtherDDO
36629>>>>>>>            Get Visited_State of hoOtherDDO to bVisited
36630>>>>>>>            If not bVisited Begin
36632>>>>>>>                Get ReSyncRecords of hoOtherDDO False to hoBadPrntDDO
36633>>>>>>>                If (hoBadPrntDDO and not(hoBadDDO)) Begin
36635>>>>>>>                    Move hoBadPrntDDO to hoBadDDO
36636>>>>>>>                End
36636>>>>>>>>
36636>>>>>>>            End
36636>>>>>>>>
36636>>>>>>>        Loop
36637>>>>>>>>
36637>>>>>>>        
36637>>>>>>>        // Find record for DD. It might already be correct if child has already
36637>>>>>>>        // related it in. If not correct after a relate, this has been switched by this
36637>>>>>>>        // user or switched by another user, in which case it will be swtitched back
36637>>>>>>>        // (DDOs have always worked this way).
36637>>>>>>>        Get prFindRowId to riRowId
36638>>>>>>>        Get Main_File to iMain
36639>>>>>>>        Get CurrentRowId to riCrnt
36640>>>>>>>        If ( not(IsSameRowId(riRowID, riCrnt)) ) Begin
36642>>>>>>>            Get pbInReSync to bOldReSync
36643>>>>>>>            Set pbInReSync to True
36644>>>>>>>            
36644>>>>>>>            If (IsNullRowId(riRowID)) Begin
36646>>>>>>>                Send Clear
36647>>>>>>>            End
36647>>>>>>>>
36647>>>>>>>            Else Begin
36648>>>>>>>                Get FindByRowIdExNoAutoFill iMain riRowId to bOk
36649>>>>>>>                If not bOk Begin
36651>>>>>>>                    Move Self to hoBadDDO
36652>>>>>>>                End
36652>>>>>>>>
36652>>>>>>>            End
36652>>>>>>>>
36652>>>>>>>            Set pbInReSync to bOldReSync
36653>>>>>>>        End
36653>>>>>>>>
36653>>>>>>>        
36653>>>>>>>        // finally traverse to parents
36653>>>>>>>        Get Data_Set_Server_Count to iMax
36654>>>>>>>        For iCount from 0 to (iMax-1)
36660>>>>>>>>
36660>>>>>>>            Get Data_Set_Server iCount to hoOtherDDO
36661>>>>>>>            Get Visited_State of hoOtherDDO to bVisited
36662>>>>>>>            If not bVisited Begin
36664>>>>>>>                Get ReSyncRecords of hoOtherDDO False to hoBadPrntDDO
36665>>>>>>>                If (hoBadPrntDDO and not(hoBadDDO)) Begin
36667>>>>>>>                    Move hoBadPrntDDO to hoBadDDO
36668>>>>>>>                End
36668>>>>>>>>
36668>>>>>>>            End
36668>>>>>>>>
36668>>>>>>>        Loop
36669>>>>>>>>
36669>>>>>>>        
36669>>>>>>>        If bStart Begin
36671>>>>>>>            Send InitializeAllVisited
36672>>>>>>>            Send ResetChangedStates
36673>>>>>>>        End
36673>>>>>>>>
36673>>>>>>>        
36673>>>>>>>        Function_Return hoBadDDO
36674>>>>>>>    End_Function
36675>>>>>>>    
36675>>>>>>>
36675>>>>>>>    Procedure ResetChangedStates
36677>>>>>>>        Boolean bVisited
36677>>>>>>>        Handle hoOtherDDO
36677>>>>>>>        Integer iMax iCount
36677>>>>>>>        tDDChangedInfo DDChangedInfo
36677>>>>>>>        tDDChangedInfo DDChangedInfo
36677>>>>>>>                
36677>>>>>>>        // we want depth first traversal.
36677>>>>>>>        //mark first so we don't visit this coming back up.
36677>>>>>>>        Set Visited_State to True
36678>>>>>>>        
36678>>>>>>>        // traverse downward first
36678>>>>>>>        Get Data_Set_Client_Count to iMax
36679>>>>>>>        For iCount from 0 to (iMax-1)
36685>>>>>>>>
36685>>>>>>>            Get Data_Set_Client iCount to hoOtherDDO
36686>>>>>>>            Get Visited_State of hoOtherDDO to bVisited
36687>>>>>>>            If not bVisited Begin
36689>>>>>>>                Send ResetChangedStates of hoOtherDDO
36690>>>>>>>            End
36690>>>>>>>>
36690>>>>>>>        Loop
36691>>>>>>>>
36691>>>>>>>        
36691>>>>>>>        // Set changed states for this DDO
36691>>>>>>>        Get pDDChangedInfo to DDChangedInfo
36692>>>>>>>        Set Changed_State to False // clears changed_state and parent_changed_states            
36693>>>>>>>        Set Changed_State to DDChangedInfo.bChanged            
36694>>>>>>>        For iCount from 0 to (SizeOfArray(DDChangedInfo.ParentChanged)-1)
36700>>>>>>>>
36700>>>>>>>            Send SetParentDDOSwitched DDChangedInfo.ParentChanged[iCount].iTable DDChangedInfo.ParentChanged[iCount].bSwitched
36701>>>>>>>        Loop
36702>>>>>>>>
36702>>>>>>>        
36702>>>>>>>        // finally traverse to parents
36702>>>>>>>        Get Data_Set_Server_Count to iMax
36703>>>>>>>        For iCount from 0 to (iMax-1)
36709>>>>>>>>
36709>>>>>>>            Get Data_Set_Server iCount to hoOtherDDO
36710>>>>>>>            Get Visited_State of hoOtherDDO to bVisited
36711>>>>>>>            If not bVisited Begin
36713>>>>>>>                Send ResetChangedStates of hoOtherDDO
36714>>>>>>>            End
36714>>>>>>>>
36714>>>>>>>        Loop
36715>>>>>>>>
36715>>>>>>>        
36715>>>>>>>    End_Procedure
36716>>>>>>>
36716>>>>>>>    // private use by new webapp framework (pre 18.2)
36716>>>>>>>    Function ReSyncRecord Returns Boolean
36718>>>>>>>        RowID riRowId
36718>>>>>>>        Boolean bOk bOldReSync
36718>>>>>>>        Handle hPrnt
36718>>>>>>>        Integer iMax iCount iMain
36718>>>>>>>        
36718>>>>>>>        Get pbInReSync to bOldReSync
36719>>>>>>>        
36719>>>>>>>        Get prFindRowId to riRowId
36720>>>>>>>        Get Main_File to iMain
36721>>>>>>>        If not (IsSameRowId(riRowID, CurrentRowId(Self) ) ) Begin
36723>>>>>>>            If (IsNullRowId(riRowID)) Begin
36725>>>>>>>                Set pbInReSync to True
36726>>>>>>>                Send Clear
36727>>>>>>>                Set pbInReSync to bOldReSync
36728>>>>>>>            End
36728>>>>>>>>
36728>>>>>>>            Else Begin
36729>>>>>>>                Set pbInReSync to True
36730>>>>>>>                Get FindByRowIdExNoAutoFill iMain riRowId to bOk
36731>>>>>>>                Set pbInReSync to bOldReSync
36732>>>>>>>                If not bOk Begin
36734>>>>>>>                    Function_Return False
36735>>>>>>>                End
36735>>>>>>>>
36735>>>>>>>            End
36735>>>>>>>>
36735>>>>>>>            
36735>>>>>>>            // check that the relate found all the parent records we expect.
36735>>>>>>>            // This should be correct unless a parent has been switched. Constrained
36735>>>>>>>            // parents, by definition, should already be correct. See **Note** below
36735>>>>>>>            Get Data_Set_Server_Count to iMax
36736>>>>>>>            For iCount from 0 to (iMax-1)
36742>>>>>>>>
36742>>>>>>>                Get Data_Set_Server iCount to hPrnt
36743>>>>>>>                If (Constrain_File(Self)<>Main_File(hPrnt) and ;                    not (IsSameRowID(prFindRowId(hPrnt),CurrentRowId(hPrnt)))) Begin
36745>>>>>>>                    // the parent is either wrong or not processed yet. Either way
36745>>>>>>>                    // make it right.
36745>>>>>>>                    Get ReSyncRecord of hPrnt to bOk
36746>>>>>>>                    If not bOk Begin
36748>>>>>>>                        Function_Return False
36749>>>>>>>                    End
36749>>>>>>>>
36749>>>>>>>                End
36749>>>>>>>>
36749>>>>>>>            Loop
36750>>>>>>>>
36750>>>>>>>        End
36750>>>>>>>>
36750>>>>>>>        
36750>>>>>>>        Function_Return True
36751>>>>>>>    End_Function
36752>>>>>>>    
36752>>>>>>>    // **Note** - dealing with changed parents and diamonds during a resync.
36752>>>>>>>    // If there is not a relates-to contraint between DD and child it is possible
36752>>>>>>>    // that the child find's relate will change the just found parent DD.
36752>>>>>>>    // Assuming this is not a structure bug, it means the parent is changed parent and that
36752>>>>>>>    // change must occur after the child record has been found and related. Therefore we add
36752>>>>>>>    // check after each child find to see if an parent is incorrect. If it is, either it is a
36752>>>>>>>    // switched parent or we haven't processed it yet. If the record is fine it
36752>>>>>>>    // just does nothing. For example (where *=relates-to):
36752>>>>>>>    //     W
36752>>>>>>>    //   */  \*
36752>>>>>>>    //   X    Y
36752>>>>>>>    //    \  /*
36752>>>>>>>    //     Z
36752>>>>>>>    // Assume you found a Z and changed its parent X.
36752>>>>>>>    // The refind order can be: WXZY or WYZX
36752>>>>>>>    // If WXZY the refound parent will be lost because Z will relate after the X
36752>>>>>>>    // find and replace it with the original parent. To control this we add this check
36752>>>>>>>    // after child Z has done its work. We only need to do this when child DDOs exist
36752>>>>>>>    // that are not constrained. This can change the order that DDOs are resynced but it
36752>>>>>>>    // should not matter.
36752>>>>>>>    
36752>>>>>>>    
36752>>>>>>>    
36752>>>>>>>    // Private use by new webapp framework
36752>>>>>>>    Procedure ReSyncClearAll
36754>>>>>>>        Boolean bOldReSync
36754>>>>>>>        Get pbInReSync to bOldReSync
36755>>>>>>>        // we need this to stop RememberLast and retains. We don't want those during a resyc clear
36755>>>>>>>        Set pbInReSync to True
36756>>>>>>>        Send Clear_All
36757>>>>>>>        Set pbInReSync to bOldReSync
36758>>>>>>>    End_Procedure
36759>>>>>>>    
36759>>>>>>>    // returns table name for error display. By default it returns the logical name
36759>>>>>>>    // can be augmented to return other information
36759>>>>>>>    Function ErrorMessageTableName Integer iTable Returns String
36761>>>>>>>        String sTable
36761>>>>>>>        Get_Attribute DF_FILE_LOGICAL_NAME of iTable to sTable
36764>>>>>>>        Function_Return sTable
36765>>>>>>>    End_Function
36766>>>>>>>    
36766>>>>>>>    
36766>>>>>>>    // Augmented to test updating connections.
36766>>>>>>>    // If error report it.
36766>>>>>>>    Procedure Request_Save
36768>>>>>>>        Integer iRval
36768>>>>>>>        String sTable
36768>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
36770>>>>>>>            Send Update_Focus_Field_For_Operation MODE_SAVING // added in 12.1/15.1
36771>>>>>>>            Get Validate_Save_Structure False to iRval
36772>>>>>>>            If iRval Begin
36774>>>>>>>                Get ErrorMessageTableName iRval to sTable
36775>>>>>>>                Move (String(iRval) * "(" - sTable -")") to sTable
36776>>>>>>>                Send Data_Set_Error -1 DFERR_PROGRAM DD_INVALID_SAVE_STRUCTURE sTable
36777>>>>>>>                Procedure_Return
36778>>>>>>>            End
36778>>>>>>>>
36778>>>>>>>        End
36778>>>>>>>>
36778>>>>>>>        Forward Send Request_Save
36780>>>>>>>    End_Procedure
36781>>>>>>>    
36781>>>>>>>    // Augmented to test updating connections.
36781>>>>>>>    // If error report it.
36781>>>>>>>    Procedure Request_Delete
36783>>>>>>>        Integer iRval
36783>>>>>>>        String sTable
36783>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
36785>>>>>>>            Send Update_Focus_Field_For_Operation MODE_DELETING // added to 12.1/15.1
36786>>>>>>>            Get Validate_Delete_Structure False to iRval
36787>>>>>>>            If iRval Begin
36789>>>>>>>                Get ErrorMessageTableName iRval to sTable
36790>>>>>>>                Move (String(iRval) * "(" - sTable -")") to sTable
36791>>>>>>>                Send data_Set_Error -1 DFERR_PROGRAM DD_INVALID_DELETE_STRUCTURE sTable
36792>>>>>>>                Procedure_Return
36793>>>>>>>            End
36793>>>>>>>>
36793>>>>>>>        End
36793>>>>>>>>
36793>>>>>>>        Forward Send Request_Delete
36795>>>>>>>    End_Procedure
36796>>>>>>>    
36796>>>>>>>    // Set status-line help for the passed field. This could have been named
36796>>>>>>>    // Set Field_Status_Help but this keeps this message interface consistent
36796>>>>>>>    // with the rest of DF for windows.
36796>>>>>>>    Procedure Set Status_Help Integer iField String sVal
36798>>>>>>>        Set Value of (StatusHelp_Array(Self)) iField to sVal
36799>>>>>>>    End_Procedure
36800>>>>>>>    
36800>>>>>>>    // Get status-line help for the passed field. This could have been named
36800>>>>>>>    // Get Field_Status_Help but this keeps this message interface consistent
36800>>>>>>>    // with the rest of DF for windows.
36800>>>>>>>    Function Status_Help Integer iField Returns String
36802>>>>>>>        String sHelp
36802>>>>>>>        Integer iObj
36802>>>>>>>        Move (StatusHelp_Array(Self)) to iObj
36803>>>>>>>        If (Item_Count(iObj)>iField) Begin
36805>>>>>>>            Get value of iObj iField to sHelp
36806>>>>>>>            If (sHelp = '0') ;                Move '' to shelp
36809>>>>>>>        End
36809>>>>>>>>
36809>>>>>>>        Function_Return shelp
36810>>>>>>>    End_Function
36811>>>>>>>    
36811>>>>>>>    // Get status-line help for the passed file and field. This is called
36811>>>>>>>    // by DEOs (or any other object) that needs help for a particular file
36811>>>>>>>    // and field.
36811>>>>>>>    Function File_Field_Status_Help Integer iFile Integer iField Returns String
36813>>>>>>>        Integer iDSO
36813>>>>>>>        String sValue
36813>>>>>>>        Get Data_set iFile to iDSO
36814>>>>>>>        If iDSO ;            Get Status_Help of iDSO iField to sValue
36817>>>>>>>        Function_Return sValue
36818>>>>>>>    End_Function
36819>>>>>>>    
36819>>>>>>>    // Allows user to set a mask type. Legal value is any of the current mask
36819>>>>>>>    // window types. 0 Means undefined.
36819>>>>>>>    Procedure Set Field_Mask_Type Integer iField Integer iType
36821>>>>>>>        Set Field_Mask_Type of (FieldMask_Array(Self)) iField to iType
36822>>>>>>>    End_Procedure
36823>>>>>>>    
36823>>>>>>>    Function Field_Mask_Type Integer iField Returns Integer
36825>>>>>>>        Function_Return (Field_Mask_Type(FieldMask_Array(Self),iField))
36826>>>>>>>    End_Function
36827>>>>>>>    
36827>>>>>>>    Function File_Field_Mask_Type Integer iFile Integer iField Returns Integer
36829>>>>>>>        Integer iDSO
36829>>>>>>>        Get Data_set iFile to iDSO
36830>>>>>>>        If iDSO ;            Function_Return (Field_Mask_Type(iDSO,iField))
36833>>>>>>>    End_Function
36834>>>>>>>    
36834>>>>>>>    // If TRUE the value returned by DEO will contain mask characters.
36834>>>>>>>    // Currently not supported.
36834>>>>>>>    Procedure Set Field_Mask_Value_State Integer iField Integer iState
36836>>>>>>>        Set Field_Mask_Value_State of (FieldMask_Array(Self)) iField to iState
36837>>>>>>>    End_Procedure
36838>>>>>>>    
36838>>>>>>>    Function Field_Mask_Value_State Integer iField Returns Integer
36840>>>>>>>        Function_Return (Field_Mask_Value_State(FieldMask_Array(Self),iField))
36841>>>>>>>    End_Function
36842>>>>>>>    
36842>>>>>>>    Function File_Field_Mask_Value_State Integer iFile Integer iField Returns Integer
36844>>>>>>>        Integer iDSO
36844>>>>>>>        Get Data_set iFile to iDSO
36845>>>>>>>        If iDSO ;            Function_Return (Field_Mask_Value_State(iDSO,iField))
36848>>>>>>>    End_Function
36849>>>>>>>    
36849>>>>>>>    // Allows user to set a mask strinng. Legal value is any of the current
36849>>>>>>>    // masks. Note an empty string with a valid mask type implies that the
36849>>>>>>>    // system should figure it out by itself.
36849>>>>>>>    Procedure Set Field_Mask Integer iField String sMask
36851>>>>>>>        Set Field_Mask of (FieldMask_Array(Self)) iField to sMask
36852>>>>>>>        If (Data_Set_User_Interface_Count(Self)) ;            Send Field_Mask_Changed iField sMask
36855>>>>>>>    End_Procedure
36856>>>>>>>    
36856>>>>>>>    Function Field_Mask Integer iField Returns String
36858>>>>>>>        Function_Return (Field_Mask(FieldMask_Array(Self),iField))
36859>>>>>>>    End_Function
36860>>>>>>>    
36860>>>>>>>    Function File_Field_Mask Integer iFile Integer iField Returns String
36862>>>>>>>        Integer iDSO
36862>>>>>>>        String sValue
36862>>>>>>>        Get Data_set iFile to iDSO
36863>>>>>>>        If iDSO ;            Get Field_Mask of iDSO iField to sValue
36866>>>>>>>        Function_Return sValue
36867>>>>>>>    End_Function
36868>>>>>>>    
36868>>>>>>>    // Short for field. This is normally used by grid headers.
36868>>>>>>>    Procedure Set Field_Label_Short Integer iField String sName
36870>>>>>>>        Set Field_Label_Short of (FieldMask_Array(Self)) iField to sName
36871>>>>>>>        If (Data_Set_User_Interface_Count(Self)) ;            Send Field_Label_Changed iField 0 sName
36874>>>>>>>    End_Procedure
36875>>>>>>>    
36875>>>>>>>    Function Field_Label_Short Integer iField Returns String
36877>>>>>>>        Function_Return (Field_Label_Short(FieldMask_Array(Self),iField))
36878>>>>>>>    End_Function
36879>>>>>>>    
36879>>>>>>>    Function File_Field_Label_Short Integer iFile Integer iField Returns String
36881>>>>>>>        Integer iDSO
36881>>>>>>>        String sValue
36881>>>>>>>        Get Data_set iFile to iDSO
36882>>>>>>>        If iDSO ;            Get Field_Label_Short of iDSO iField to sValue
36885>>>>>>>        Function_Return sValue
36886>>>>>>>    End_Function
36887>>>>>>>    
36887>>>>>>>    // Full Name for field. This is normally used by form labels
36887>>>>>>>    Procedure Set Field_Label_Long Integer iField String sName
36889>>>>>>>        Set Field_Label_Long of (FieldMask_Array(Self)) iField to sName
36890>>>>>>>        If (Data_Set_User_Interface_Count(Self)) ;            Send Field_Label_Changed iField 1 sName
36893>>>>>>>    End_Procedure
36894>>>>>>>    
36894>>>>>>>    Function Field_Label_Long Integer iField Returns String
36896>>>>>>>        Function_Return (Field_Label_Long(FieldMask_Array(Self),iField))
36897>>>>>>>    End_Function
36898>>>>>>>    
36898>>>>>>>    Function File_Field_Label_Long Integer iFile Integer iField Returns String
36900>>>>>>>        Integer iDSO
36900>>>>>>>        String sValue
36900>>>>>>>        Get Data_set iFile to iDSO
36901>>>>>>>        If iDSO ;            Get Field_Label_Long of iDSO iField to sValue
36904>>>>>>>        Function_Return sValue
36905>>>>>>>    End_Function
36906>>>>>>>    
36906>>>>>>>    // This is not really a DD attribute (it is in the API) but it is
36906>>>>>>>    // appropriate to be accessed from the DD
36906>>>>>>>    Function Field_Label_Tag Integer iField Returns String
36908>>>>>>>        String sName
36908>>>>>>>        Integer iFile
36908>>>>>>>        Get Main_File to iFile
36909>>>>>>>        If iFile ;            Get_Attribute DF_FIELD_NAME of iFile iField to sName
36914>>>>>>>        Function_Return sName
36915>>>>>>>    End_Function
36916>>>>>>>    
36916>>>>>>>    Function SmartCase String sName Returns String
36918>>>>>>>        Integer iPos iNewPos
36918>>>>>>>        String sRight
36918>>>>>>>        Move (Replaces("_",lowercase(sName)," ")) to sName
36919>>>>>>>        Move (Trim (Replaces(".",sName," "))) to sName
36920>>>>>>>        Move 1 to iPos
36921>>>>>>>        Repeat
36921>>>>>>>>
36921>>>>>>>            Move (mid(sName,255,iPos+1)) to sRight
36922>>>>>>>            Move (left(sName,iPos-1) + Uppercase(mid(sName,1,iPos)) + sRight) to sName
36923>>>>>>>            Move (Pos( " ", sRight)) to iNewPos
36924>>>>>>>            If (iNewPos = 0) ;                Break
36927>>>>>>>            Add (iNewPos+1) to iPos
36928>>>>>>>        Loop
36929>>>>>>>>
36929>>>>>>>        Function_Return sName
36930>>>>>>>    End_Function
36931>>>>>>>    
36931>>>>>>>    Enumeration_List
36931>>>>>>>        Define DD_LABEL_SHORT
36931>>>>>>>        Define DD_LABEL_LONG
36931>>>>>>>        Define DD_LABEL_TAG
36931>>>>>>>    End_Enumeration_List
36931>>>>>>>    
36931>>>>>>>    // Handy function to get the label for a field. Three "types" are
36931>>>>>>>    // supported:
36931>>>>>>>    // DD_LABEL_SHORT  use short, if none use long, if none use smart tag
36931>>>>>>>    // DD_LABEL_LONG   use long, if none use smart tag
36931>>>>>>>    // DD_LABEL_TAG    use smart tag
36931>>>>>>>    // If you want an explicit field name use oneof the other messages.
36931>>>>>>>    Function Field_Label Integer iField Integer iType Returns String
36933>>>>>>>        Integer iServer
36933>>>>>>>        String sValue
36933>>>>>>>        If (iType = DD_LABEL_SHORT) ;  // 0 = Short            Get Field_Label_Short iField to sValue
36936>>>>>>>        If (iType = DD_LABEL_LONG or (iType=DD_LABEL_SHORT and sValue='')) ;            Get Field_Label_Long iField to sValue
36939>>>>>>>        If (iType = DD_LABEL_TAG or sValue="") Begin
36941>>>>>>>            Get Field_Label_Tag iField to sValue
36942>>>>>>>            Get SmartCase sValue to sValue
36943>>>>>>>        End
36943>>>>>>>>
36943>>>>>>>        Function_Return sValue
36944>>>>>>>    End_Function
36945>>>>>>>    
36945>>>>>>>    Function File_Field_Label Integer iFile Integer iField Integer iType Returns String
36947>>>>>>>        Integer iDSO
36947>>>>>>>        String sValue
36947>>>>>>>        Get Data_set iFile to iDSO
36948>>>>>>>        If iDSO ;            Get Field_Label of iDSO iField iType to sValue
36951>>>>>>>        Function_Return sValue
36952>>>>>>>    End_Function
36953>>>>>>>    
36953>>>>>>>    // Normally this will not be used by a running program. However, it
36953>>>>>>>    // could be possible to create classes dynamically at runtime, in which
36953>>>>>>>    // case these messages could be useful. No File_Field is provided. If the
36953>>>>>>>    // person knows enough to create dynamic classes they can find the DD.
36953>>>>>>>    Procedure Set Field_Class_Name Integer iField String sName
36955>>>>>>>        Set Field_Class_Name of (FieldMask_Array(Self)) iField to sName
36956>>>>>>>    End_Procedure
36957>>>>>>>    
36957>>>>>>>    Function Field_Class_Name Integer iField Returns String
36959>>>>>>>        Function_Return (Field_Class_Name(FieldMask_Array(Self),iField))
36960>>>>>>>    End_Function
36961>>>>>>>    
36961>>>>>>>    // This procedure should be used to set a specific error number and
36961>>>>>>>    // message for a particular field. This can be used with the Field_error
36961>>>>>>>    // message to generate this error during a validation.
36961>>>>>>>    Procedure Set Field_Error Integer iField Integer iErr String sMsg
36963>>>>>>>        Set Field_Error of (Field_Attributes(Self)) iField to iErr sMsg
36964>>>>>>>    End_Procedure
36965>>>>>>>    
36965>>>>>>>    // Used to retreive the error number and message for a particular field
36965>>>>>>>    Function Field_Error_Number Integer iField Returns Integer
36967>>>>>>>        Function_Return (Field_Error_Number(Field_Attributes(Self),iField))
36968>>>>>>>    End_Function
36969>>>>>>>    
36969>>>>>>>    Function Field_Error_Message Integer iField Returns String
36971>>>>>>>        Function_Return (Field_Error_Message(Field_Attributes(Self),iField))
36972>>>>>>>    End_Function
36973>>>>>>>    
36973>>>>>>>    // This procedure is used to declare an error on a standard field
36973>>>>>>>    // validation violation like Range or Check.
36973>>>>>>>    // Can pass 1 to 4 params:
36973>>>>>>>    // iField -                  Standard usage. Generates field as defined
36973>>>>>>>    //                           for this field. If field=-1, General error
36973>>>>>>>    // iField SDefault           If no field error mess (or field=-1) use
36973>>>>>>>    //                           the default message
36973>>>>>>>    // iField sDefault sParam1 {sParam2} Replace occurances of @PARAM1 and
36973>>>>>>>    //                           @PARAM2 in text with these values
36973>>>>>>>    Procedure Field_Error Integer iField String sDefault ;            String sParam1 String sParam2
36975>>>>>>>        Integer iErr
36975>>>>>>>        String  sMess
36975>>>>>>>        If (iField >= 0) Begin
36977>>>>>>>            Get Field_Error_Number  iField to iErr
36978>>>>>>>            Get Field_Error_Message iField to sMess
36979>>>>>>>        End
36979>>>>>>>>
36979>>>>>>>        If (sMess="" and Num_Arguments>1) ;            Move sDefault to sMess
36982>>>>>>>        If (Num_Arguments = 4) ;            Send Data_Set_Error iField iErr sMess sParam1 sParam2
36985>>>>>>>        Else If (Num_Arguments = 3) ;            Send Data_Set_Error iField iErr sMess sParam1
36989>>>>>>>        Else ;            Send Data_Set_Error iField iErr sMess
36991>>>>>>>    End_Procedure
36992>>>>>>>    
36992>>>>>>>    // Procedure Data_Set_Error
36992>>>>>>>    // This procedure is used to declare a data-set error. Pass error number
36992>>>>>>>    // and optional error message text.
36992>>>>>>>    // If iErr is 0, use the default error number.
36992>>>>>>>    // sParam1 and sParam2 are optional. If passed they are used as text
36992>>>>>>>    // replacements for @PARAM1 and @PARAM2.
36992>>>>>>>    // We pass iField (even though we don't use it) so that augmentations
36992>>>>>>>    // could support error logging down to a field level. If a non-field error
36992>>>>>>>    // is required the developer should pass negative values (e.g., -1)
36992>>>>>>>    // This will redirect errors locally if not already redirected
36992>>>>>>>    //
36992>>>>>>>    // Altered to additionally support %1 %2 replacements as well as
36992>>>>>>>    // replacements for @PARAM1 and @PARAM2. (vdf8.2)
36992>>>>>>>    Procedure Data_set_error Integer iField Integer iErr String sMess ;            String sParam1 String sParam2
36994>>>>>>>        Integer iOldField
36994>>>>>>>        Get Current_validate_field to iOldField
36995>>>>>>>        If (iField <> 0) ;            Set Current_Validate_field to iField
36998>>>>>>>        
36998>>>>>>>        If (iErr = 0) ; // if no error is passes, used a default error            Move DD_DEFAULT_ERROR_NUMBER to iErr
37001>>>>>>>        
37001>>>>>>>        If (sMess > "") Begin
37003>>>>>>>            
37003>>>>>>>            // Support message replacements.. Up to two values
37003>>>>>>>            // altered to support @Param1/2 and %1 %2 messages
37003>>>>>>>            If (Num_Arguments>3) Begin
37005>>>>>>>                Move (Replaces("@PARAM1", sMess, sParam1)) to sMess
37006>>>>>>>                If (Num_Arguments>4) Begin
37008>>>>>>>                    Move (Replaces("@PARAM2", sMess, sParam2)) to sMess
37009>>>>>>>                    Move (SFormat(sMess,sParam1,sParam2)) to sMess
37010>>>>>>>                End
37010>>>>>>>>
37010>>>>>>>                Else Begin
37011>>>>>>>                    Move (SFormat(sMess,sParam1)) to sMess
37012>>>>>>>                End
37012>>>>>>>>
37012>>>>>>>            End
37012>>>>>>>>
37012>>>>>>>            Move Self to ghoErrorSource
37013>>>>>>>            Error iErr sMess
37014>>>>>>>>
37014>>>>>>>            Move 0 to ghoErrorSource
37015>>>>>>>        End
37015>>>>>>>>
37015>>>>>>>        Else ;            Send Operation_Not_Allowed iErr
37017>>>>>>>        Set Current_validate_field to iOldField
37018>>>>>>>        Move True to Err // make sure Err is still set
37019>>>>>>>    End_Procedure
37020>>>>>>>    
37020>>>>>>>    // Augment to support Error_Report_Mode. Allows errors without error mess
37020>>>>>>>    // This will redirect errors locally if not already redirected
37020>>>>>>>    Procedure Operation_Not_Allowed Integer iErr
37022>>>>>>>        Integer bOK
37022>>>>>>>        Move Self to ghoErrorSource
37023>>>>>>>        Forward Send Operation_Not_Allowed iErr
37025>>>>>>>        Move 0 to ghoErrorSource
37026>>>>>>>    End_Procedure
37027>>>>>>>    
37027>>>>>>>    // Local error handler. When errors are redirected to the DD this proce-
37027>>>>>>>    // dure handles the errors. If error_report_mode is NO-report it sets
37027>>>>>>>    // the err indicator and returns. Else it redirects the error to the
37027>>>>>>>    // main error handler first moving its ID to ghoErrorSource. This way the
37027>>>>>>>    // handler knows who sent this message and will get additional error info
37027>>>>>>>    // by calling Get Extended_error_message
37027>>>>>>>    Procedure Error_Report Integer iError Integer iLine String ErrMsg
37029>>>>>>>        Integer hoErrId
37029>>>>>>>        Integer bRedirect
37029>>>>>>>        If (Error_Processing_State(Self)) ;  // this prevents recursion            Procedure_Return
37032>>>>>>>        Set Error_Processing_State to True
37033>>>>>>>        
37033>>>>>>>        // if no report mode, just set the err indicator to true.
37033>>>>>>>        If (Error_Report_Mode(Self)=DD_ERROR_NO_REPORT) ;            Move True to Err
37036>>>>>>>        Else Begin
37037>>>>>>>            Get Old_error_object_id to hoErrId  // the original error handler
37038>>>>>>>            If hoErrId Begin
37040>>>>>>>                Move (ghoErrorSource=0) to bRedirect
37041>>>>>>>                If bRedirect ;                    Move Self to ghoErrorSource // error handler can use this
37044>>>>>>>                Move hoErrID to Error_object_id
37045>>>>>>>                Send Error_Report to hoErrId iError iLine ErrMsg
37046>>>>>>>                Move Self to Error_object_id
37047>>>>>>>                If bRedirect ;                    Move 0 to ghoErrorSource
37050>>>>>>>            End
37050>>>>>>>>
37050>>>>>>>            Else ;                Send error_report of desktop iError iLine ErrMsg
37052>>>>>>>            //else forward send error_report iError iLine ErrMsg
37052>>>>>>>        End
37052>>>>>>>>
37052>>>>>>>        Set Error_Processing_State to False
37053>>>>>>>    End_Procedure
37054>>>>>>>    
37054>>>>>>>    // This is called (by the system error handler) to get additional informa-
37054>>>>>>>    // tion about the error. Returns a multi line string with each line
37054>>>>>>>    // separated by a "\n". Return the file number, name, and if possible
37054>>>>>>>    // the field number and name.
37054>>>>>>>    Function Extended_Error_Message Returns String
37056>>>>>>>        String sExtMess
37056>>>>>>>        String sFile
37056>>>>>>>        Integer iFile iField
37056>>>>>>>        Get main_file to iFile
37057>>>>>>>        Get Current_Validate_Field to iField
37058>>>>>>>        Get ErrorMessageTableName iFile to sFile
37059>>>>>>>        Move (DD_FILE_TEXT* String(iFile) * "-" * sFile) to sExtMess
37060>>>>>>>        If (iField > 0) ;            Append sExtMess "\n" ;            (DD_FIELD_TEXT* String(iField) * "-" * Field_Label(Self,iField,DD_LABEL_LONG))
37064>>>>>>>        Set Current_Validate_Field to 0
37065>>>>>>>        Function_Return sExtMess
37066>>>>>>>    End_Function
37067>>>>>>>    
37067>>>>>>>    Function Extended_Error_File Returns Integer
37069>>>>>>>        Function_Return (Main_File(Self))
37070>>>>>>>    End_Function
37071>>>>>>>    
37071>>>>>>>    Function Extended_Error_Field Returns Integer
37073>>>>>>>        Function_Return (Current_Validate_Field(Self))
37074>>>>>>>    End_Function
37075>>>>>>>    
37075>>>>>>>    
37075>>>>>>>    // The following messages are used to control smart file mode exception
37075>>>>>>>    // handling. The message "Send Add_system_File file# Fg" allows you to
37075>>>>>>>    // add system files (or any other files not known to the dso structure)
37075>>>>>>>    // within define_fields. This allows you to not have to augment the msg
37075>>>>>>>    // reset_filemodes_for_lock. The only truly public messages here are
37075>>>>>>>    // Add_system_file and Remove_system_File (which s/b rarely used).
37075>>>>>>>    
37075>>>>>>>    // Adds a system file for smart_file_mode handling. A second optional
37075>>>>>>>    // parameter may be passed to determine of the sys file should only be
37075>>>>>>>    // locked during a new save (and not during a delete or a save of an
37075>>>>>>>    // existing record). It is expected that this will be the only public
37075>>>>>>>    // message used to control smart filemode. All of the remaining sys file
37075>>>>>>>    // messages are considered advanced.
37075>>>>>>>    Procedure Add_System_File Integer iFile Integer iLock_Mode
37077>>>>>>>        Integer iobj iCnt iMode
37077>>>>>>>        If (Num_arguments = 1) ;            Move DD_Lock_on_All to iMode
37080>>>>>>>        Else ;            Move iLock_Mode     to iMode
37082>>>>>>>        Move (system_file_obj(Self)) to iObj
37083>>>>>>>        Get Item_Count  of iObj to iCnt
37084>>>>>>>        Set Array_Value of iObj iCnt to iFile
37085>>>>>>>        Increment iCnt
37086>>>>>>>        Set Array_Value of iObj iCnt to iMode
37087>>>>>>>    End_Procedure
37088>>>>>>>    
37088>>>>>>>    // Return number of system files
37088>>>>>>>    Function System_File_Count Returns Integer
37090>>>>>>>        Function_Return (Item_Count(System_File_Obj(Self))/2)
37091>>>>>>>    End_Function
37092>>>>>>>    
37092>>>>>>>    // Returns system file number for passed item.
37092>>>>>>>    Function System_File_Number Integer iItem Returns Integer
37094>>>>>>>        Function_Return (Integer_Value(System_File_Obj(Self),iItem*2))
37095>>>>>>>    End_Function
37096>>>>>>>    
37096>>>>>>>    // Returns system flag to determine if file is only used during a new
37096>>>>>>>    // save (and not during an exiting save or a delete).
37096>>>>>>>    Function System_File_Lock_Mode Integer iItem Returns Integer
37098>>>>>>>        Function_Return (Integer_Value(System_File_Obj(Self),iItem*2+1))
37099>>>>>>>    End_Function
37100>>>>>>>    
37100>>>>>>>    // Removes a system_file for smart_file_Mode handling. This remvoes the
37100>>>>>>>    // first occurance of the file (S/b the only occurance). We assume that
37100>>>>>>>    // this will be rarely used.
37100>>>>>>>    Procedure Remove_System_File Integer iFile
37102>>>>>>>        Integer iobj iCnt iItmCnt
37102>>>>>>>        Get System_file_Count to iItmCnt
37103>>>>>>>        Decrement iItmCnt
37104>>>>>>>        For iCnt from 0 to iItmCnt
37110>>>>>>>>
37110>>>>>>>            If (System_File_Number(Self,iCnt)=iFile) Begin
37112>>>>>>>                Move (system_file_obj(Self)) to iObj
37113>>>>>>>                Move (iCnt*2) to iCnt
37114>>>>>>>                Send Delete_Item to iObj iCnt
37115>>>>>>>                Send Delete_Item to iObj iCnt
37116>>>>>>>                Procedure_Return
37117>>>>>>>            End
37117>>>>>>>>
37117>>>>>>>        Loop
37118>>>>>>>>
37118>>>>>>>    End_Procedure
37119>>>>>>>    
37119>>>>>>>    // These set messages, add_client_file, add_server_file and add_system_file
37119>>>>>>>    // were added to more easily support visual DD class modeling. They do the
37119>>>>>>>    // same thing the Send counterpart messages do
37119>>>>>>>    
37119>>>>>>>    Procedure Set Add_Client_File Integer iFile
37121>>>>>>>        Send Add_Client_File iFile
37122>>>>>>>    End_Procedure
37123>>>>>>>    
37123>>>>>>>    Procedure Set Add_Server_File Integer iFile
37125>>>>>>>        Send Add_Server_File iFile
37126>>>>>>>    End_Procedure
37127>>>>>>>    
37127>>>>>>>    Procedure Set Add_System_File Integer iFile Integer iLock_Mode
37129>>>>>>>        // allow no arguments because the old message allowed this
37129>>>>>>>        If (Num_arguments=1) Begin
37131>>>>>>>            Send Add_System_File iFile
37132>>>>>>>        End
37132>>>>>>>>
37132>>>>>>>        Else Begin
37133>>>>>>>            Send Add_System_File iFile iLock_Mode
37134>>>>>>>        End
37134>>>>>>>>
37134>>>>>>>    End_Procedure
37135>>>>>>>    
37135>>>>>>>    // The Set Field_Auto_Increment method replaces the need to use the Define_Auto_Incrmement
37135>>>>>>>    // command. This models more easily and it supports multiple auto-increment fields
37135>>>>>>>    Procedure Set Field_Auto_Increment Integer iField Integer iSysFile Integer iSysField
37137>>>>>>>        Integer[] AutoIncFields
37138>>>>>>>        tDDFileField[] SysFileFields
37138>>>>>>>        tDDFileField[] SysFileFields
37139>>>>>>>        Integer iIndex
37139>>>>>>>        
37139>>>>>>>        If (iField=0 or (iSysFile<>0 and iSysField=0)) Begin
37141>>>>>>>            Error DFERR_PROGRAM "Auto-increment source or destination field is 0"
37142>>>>>>>>
37142>>>>>>>            Procedure_Return
37143>>>>>>>        End
37143>>>>>>>>
37143>>>>>>>        // setting the sysfile to 0 is valid. It can be used to clear an existing sysfile
37143>>>>>>>        If (iSysFile=0) Begin
37145>>>>>>>            Move 0 to iSysField
37146>>>>>>>        End
37146>>>>>>>>
37146>>>>>>>        Get pAutoIncrementFields to AutoIncFields
37147>>>>>>>        Get pAutoIncrementSysFileFields to SysFileFields
37148>>>>>>>        // the destination field array is a list of fields that have auto-incr info. There
37148>>>>>>>        // can only be zero or one entry per field arranged in no defined order.
37148>>>>>>>        // see if field is already defined. If not add this to the end.
37148>>>>>>>        Move (SearchArray(iField,AutoIncFields)) to iIndex
37149>>>>>>>        If (iIndex=-1) Begin
37151>>>>>>>            Move (SizeOfArray(SysFileFields)) to iIndex
37152>>>>>>>        End
37152>>>>>>>>
37152>>>>>>>        Move iField    to AutoIncFields[iIndex]
37153>>>>>>>        Move iSysFile  to SysFileFields[iIndex].iFile
37154>>>>>>>        Move iSysField to SysFileFields[iIndex].iField
37155>>>>>>>        Set pAutoIncrementFields to AutoIncFields
37156>>>>>>>        Set pAutoIncrementSysFileFields to SysFileFields
37157>>>>>>>    End_Procedure
37158>>>>>>>    
37158>>>>>>>    // Get auto-increment system file/field value for a field. There really should be no
37158>>>>>>>    // reason to ever need this. Field is returned byref
37158>>>>>>>    Function Field_Auto_Increment Integer iField Integer ByRef iSysField Returns Integer
37160>>>>>>>        Integer iSysFile
37160>>>>>>>        Integer[] AutoIncFields
37161>>>>>>>        tDDFileField[] SysFileFields
37161>>>>>>>        tDDFileField[] SysFileFields
37162>>>>>>>        Integer iIndex
37162>>>>>>>        
37162>>>>>>>        Get pAutoIncrementFields to AutoIncFields
37163>>>>>>>        Move (SearchArray(iField,AutoIncFields)) to iIndex
37164>>>>>>>        If (iIndex>-1) Begin
37166>>>>>>>            Get pAutoIncrementSysFileFields to SysFileFields
37167>>>>>>>            Move SysFileFields[iIndex].iFile to iSysFile
37168>>>>>>>            Move SysFileFields[iIndex].iField to iSysField
37169>>>>>>>        End
37169>>>>>>>>
37169>>>>>>>        Else Begin
37170>>>>>>>            Move 0 to iSysFile
37171>>>>>>>            Move 0 to iSysField
37172>>>>>>>        End
37172>>>>>>>>
37172>>>>>>>        Function_Return iSysFile
37173>>>>>>>    End_Function
37174>>>>>>>    
37174>>>>>>>    
37174>>>>>>>    // Augmented to set any system files defined via the Add_System_file
37174>>>>>>>    // message. This allows us to hide this procedure for the vast majority
37174>>>>>>>    // of cases.
37174>>>>>>>    Procedure Reset_Filemodes_For_Lock
37176>>>>>>>        Boolean bNewRec
37176>>>>>>>        Integer  iItmCnt iCnt iMode iFile
37176>>>>>>>        Integer iMain iMaster iOpts
37176>>>>>>>        Handle hoDD
37176>>>>>>>        
37176>>>>>>>        Forward Send Reset_Filemodes_for_lock
37178>>>>>>>        
37178>>>>>>>        Get System_File_Count to iItmCnt
37179>>>>>>>        If iItmCnt Begin
37181>>>>>>>            Move (not(HasRecord(Self))) to bNewRec
37182>>>>>>>            Decrement iItmCnt
37183>>>>>>>            For iCnt from 0 to iItmCnt
37189>>>>>>>>
37189>>>>>>>                Get System_File_Number         iCnt to iFile
37190>>>>>>>                Get System_File_Lock_Mode iCnt to iMode
37191>>>>>>>                If ( (iMode=DD_Lock_on_All) or ;                    (Operation_Mode=MODE_DELETING and (iMode iand DD_Lock_on_Delete) ) or ;                    (Operation_Mode=MODE_SAVING and ( (iMode iand DD_Lock_on_Save) or ;                    ( (iMode iand DD_Lock_on_New_Save) and bNewRec) ) ) ) Begin
37193>>>>>>>                    Set_Attribute DF_FILE_MODE of iFile to DF_FILEMODE_DEFAULT
37196>>>>>>>                End
37196>>>>>>>>
37196>>>>>>>            Loop
37197>>>>>>>>
37197>>>>>>>        End
37197>>>>>>>>
37197>>>>>>>        
37197>>>>>>>        // augment to support DD magnaged alias tables.
37197>>>>>>>        // If an alias, set the alias to the proper alias no locks only if
37197>>>>>>>        // the master file is actually part of this DDO structure. This allows you
37197>>>>>>>        // to use alias files without the master being present (or even open). This will work without needing
37197>>>>>>>        // to set the Master|Alias DF_FILE_ALIAS attributes. If the file is master and part of the DDO structure
37197>>>>>>>        // it will already have its No_locks attribute cleared. If not part of the DD, its not needed.
37197>>>>>>>        //
37197>>>>>>>        Get MasterForAlias to iMaster
37198>>>>>>>        If iMaster Begin
37200>>>>>>>            Get Main_File to iMain
37201>>>>>>>            Get Data_Set iMaster to hoDD // is the master in the DD structure
37202>>>>>>>            If hoDD Begin
37204>>>>>>>                Get_Attribute DF_FILE_MODE of iMain to iOpts
37207>>>>>>>                Set_Attribute DF_FILE_MODE of iMain to (iOpts ior DF_FILEMODE_NO_LOCKS)
37210>>>>>>>                // note this will be reset to what it was when the transaction ends
37210>>>>>>>            End
37210>>>>>>>>
37210>>>>>>>        End
37210>>>>>>>>
37210>>>>>>>        
37210>>>>>>>    End_Procedure
37211>>>>>>>    
37211>>>>>>>    // Augmented to handle auto-increment fields if defined. The value from
37211>>>>>>>    // the auto-incre sys file is incremented, saved and moved to the new
37211>>>>>>>    // record. As of 17.0 this is no longer in Creating, which is called after
37211>>>>>>>    // AutoIncrement.
37211>>>>>>>    Procedure AutoIncrement
37213>>>>>>>        Integer iSrcFile iSrcField i iAutoFields
37213>>>>>>>        Integer iDestFile iDestField
37213>>>>>>>        Number nNum
37213>>>>>>>        Integer[] AutoIncFields
37214>>>>>>>        tDDFileField[] AutoIncSysFileFields
37214>>>>>>>        tDDFileField[] AutoIncSysFileFields
37215>>>>>>>        Handle hoOwner
37215>>>>>>>        
37215>>>>>>>        Forward Send AutoIncrement
37217>>>>>>>        
37217>>>>>>>        // this supports the older Define_Auto_Increment logic. Only one is supported
37217>>>>>>>        // this is exists for backwards compatibility
37217>>>>>>>        Get Auto_Increment_Source_File to iSrcFile
37218>>>>>>>        If iSrcFile Begin // do we have auto increment?
37220>>>>>>>            Get Auto_Increment_Source_Field  to iSrcField
37221>>>>>>>            Get Auto_Increment_Dest_Field    to iDestField
37222>>>>>>>            If (iSrcField and iDestField) Begin  // just in case of error
37224>>>>>>>                Get Main_file to iDestFile
37225>>>>>>>                Get_Field_Value iSrcFile iSrcField to nNum
37228>>>>>>>                Move (nNum+1) to nNum
37229>>>>>>>                Set_Field_Value iSrcFile  iSrcField  to nNum
37232>>>>>>>                Set_Field_Value iDestFile iDestField to nNum
37235>>>>>>>                // if the file's DD is a parent file in the structure, this will get saved as part of normal operations
37235>>>>>>>                // if the DD is not a parent file, it is a sysfile and we must save it
37235>>>>>>>                Get Which_Data_Set iSrcFile to hoOwner
37236>>>>>>>                If not hoOwner Begin
37238>>>>>>>                    SaveRecord iSrcFile
37239>>>>>>>                End
37239>>>>>>>>
37239>>>>>>>            End
37239>>>>>>>>
37239>>>>>>>        End
37239>>>>>>>>
37239>>>>>>>        // this supports the newer set syntax which support multiple fields. It is expected that you will
37239>>>>>>>        // use one syntax of the other, not both. If you use the old syntax, you cannot use the new one
37239>>>>>>>        Else Begin
37240>>>>>>>            Get pAutoIncrementFields to AutoIncFields
37241>>>>>>>            Move (SizeOfArray(AutoIncFields)) to iAutoFields
37242>>>>>>>            If (iAutoFields>0) Begin
37244>>>>>>>                Get pAutoIncrementSysFileFields to AutoIncSysFileFields
37245>>>>>>>                Get Main_file to iDestFile
37246>>>>>>>                For i from 0 to (iAutoFields-1)
37252>>>>>>>>
37252>>>>>>>                    // it is legal to set the sysfile to 0, this means it has been cleared and is not used
37252>>>>>>>                    If (AutoIncSysFileFields[i].iFile>0) Begin
37254>>>>>>>                        // we assume both the fields are valid and that they've already been tested when added
37254>>>>>>>                        Get_Field_Value AutoIncSysFileFields[i].iFile AutoIncSysFileFields[i].iField to nNum
37257>>>>>>>                        Move (nNum+1) to nNum
37258>>>>>>>                        Set_Field_Value AutoIncSysFileFields[i].iFile AutoIncSysFileFields[i].iField to nNum
37261>>>>>>>                        Set_Field_Value iDestFile AutoIncFields[i] to nNum
37264>>>>>>>                        // if the file's DD is a parent file in the structure, this will get saved as part of normal operations
37264>>>>>>>                        // if the DD is not a parent file, it is a sysfile and we must save it
37264>>>>>>>                        Get Which_Data_Set AutoIncSysFileFields[i].iFile to hoOwner
37265>>>>>>>                        If not hoOwner Begin
37267>>>>>>>                            SaveRecord AutoIncSysFileFields[i].iFile
37268>>>>>>>                        End
37268>>>>>>>>
37268>>>>>>>                    End
37268>>>>>>>>
37268>>>>>>>                Loop
37269>>>>>>>>
37269>>>>>>>            End
37269>>>>>>>>
37269>>>>>>>        End
37269>>>>>>>>
37269>>>>>>>        
37269>>>>>>>    End_Procedure
37270>>>>>>>    
37270>>>>>>>    // Augmented to fix a bug in the data-set C code. When a record is saved
37270>>>>>>>    // as part of a delete operation OnNewCurrentRecord is not called. It
37270>>>>>>>    // should be. We will do this in flex code for now.
37270>>>>>>>    Procedure Save_Main_File
37272>>>>>>>        RowID riRec
37272>>>>>>>        Integer iRec iMain
37272>>>>>>>        Boolean bRecnumTable bChanged
37272>>>>>>>        
37272>>>>>>>        Get Main_File to iMain
37273>>>>>>>        Get_Attribute DF_FILE_CHANGED of iMain to bChanged
37276>>>>>>>        If bChanged Begin
37278>>>>>>>            Send OnSaveRecord // OnSaveRecord sent if there is something to save
37279>>>>>>>        End
37279>>>>>>>>
37279>>>>>>>        
37279>>>>>>>        Forward Send Save_Main_File
37281>>>>>>>        
37281>>>>>>>        If (Operation_Mode = MODE_DELETING) Begin  // during a delete the crnt
37283>>>>>>>            Get CurrentRowId to riRec             // rec of parents do not change
37284>>>>>>>            Send OnNewCurrentRecord riRec riRec  // so old and new are the same.
37285>>>>>>>            // for backwards compatibility reasons, we also send new_current_record if appropriate
37285>>>>>>>            Get_Attribute DF_FILE_RECNUM_TABLE of iMain to bRecnumTable
37288>>>>>>>            If (bRecnumTable) Begin
37290>>>>>>>                Get_Field_Value iMain 0 to iRec
37293>>>>>>>                Send New_Current_Record iRec iRec
37294>>>>>>>            End
37294>>>>>>>>
37294>>>>>>>        End
37294>>>>>>>>
37294>>>>>>>    End_Procedure
37295>>>>>>>    
37295>>>>>>>    // Augmented to not clear if a system-file. The auto-latching of views
37295>>>>>>>    // may cause a sys file DD to get cleared. This corrects this. This really
37295>>>>>>>    // belongs in Data_set (C) but we will not risk this for now.
37295>>>>>>>    Procedure Clear_Main_File
37297>>>>>>>        Integer iFile iIsSys
37297>>>>>>>        Get Main_File to iFile
37298>>>>>>>        If iFile Begin
37300>>>>>>>            Get_Attribute DF_FILE_IS_SYSTEM_FILE of iFile to iIsSys
37303>>>>>>>            If iIsSys ;                Procedure_Return
37306>>>>>>>        End
37306>>>>>>>>
37306>>>>>>>        Forward Send Clear_main_file
37308>>>>>>>    End_Procedure
37309>>>>>>>    
37309>>>>>>>    // Executes a request_find on the mainfile. This is easier that having to
37309>>>>>>>    // pass file number all the time. Useful for batch operations.
37309>>>>>>>    // If Index is 0, use find_by_recnum (it handles a recnum of 0 better)
37309>>>>>>>    Procedure Find Integer iMode Integer iIndex
37311>>>>>>>        Integer iFile
37311>>>>>>>        Integer iRec
37311>>>>>>>        Get Main_file to iFile
37312>>>>>>>        If (iIndex<>0 or iMode<>EQ) ;            Send request_find iMode iFile iIndex
37315>>>>>>>        Else Begin
37316>>>>>>>            // this would never happen with row ID
37316>>>>>>>            Get_Field_Value iFile 0 to iRec // get recnum value
37319>>>>>>>            Send find_by_recnum iFile iRec
37320>>>>>>>        End
37320>>>>>>>>
37320>>>>>>>    End_Procedure
37321>>>>>>>    
37321>>>>>>>    // So many people make the mistake of using requeset_clear and request_
37321>>>>>>>    // clear_all that will support these are alteratives to clear and
37321>>>>>>>    // clear_all. The preferred messages remain Clear and Clear_all.
37321>>>>>>>    // This would not work if you nested DEOs within DSOs (no-one does).
37321>>>>>>>    Procedure Request_Clear
37323>>>>>>>        Send Clear
37324>>>>>>>    End_Procedure
37325>>>>>>>    
37325>>>>>>>    Procedure Request_Clear_All
37327>>>>>>>        Send Clear_All
37328>>>>>>>    End_Procedure
37329>>>>>>>    
37329>>>>>>>    // we want changed_state to always go through the
37329>>>>>>>    // Record_buffer object. From there it is sent to
37329>>>>>>>    // here. So if state or RB does not match we must
37329>>>>>>>    // send to the RB object...it will delegate to here
37329>>>>>>>    
37329>>>>>>>    Procedure Set Changed_State Integer bState
37331>>>>>>>        Integer hRB
37331>>>>>>>        Move (record_buffer(Self)) to hRB
37332>>>>>>>        If (hRB and changed_state(hRB)<>bState) ;            Set changed_state of hRB to bState
37335>>>>>>>        Else ;            Forward Set changed_state to bState
37338>>>>>>>    End_Procedure
37339>>>>>>>    
37339>>>>>>>    // this lets us use the new attach logic
37339>>>>>>>    
37339>>>>>>>    // This is a smarter attach than the normal attach command. It only attaches data from a parent
37339>>>>>>>    // if 1) the DDO parent is connected to the structure and 2) if there is a record to attach. It will
37339>>>>>>>    // not attach empty records into a child. This should make the finding (and saving) more sensible when
37339>>>>>>>    // partial DD structures are used. For example, often a report does not all of the parent DDOs - however if
37339>>>>>>>    // they are not provided, finding can get messed up because blank data is being moved into the child before a
37339>>>>>>>    // find. This has been a problem since 3.0. This should just make it go away.
37339>>>>>>>    // as of 17.0, we get the related field info through the local DSO if needed
37339>>>>>>>    
37339>>>>>>>    // as if 18.1 this is only called when there is an attachable relationship. This gives us a chance to do any
37339>>>>>>>    // customizations and to cancel the attach. We've left this to the flex level so we can fine tune attaches.
37339>>>>>>>    Function ShouldFieldAttach Integer iField Handle hoRelDD Returns Boolean
37341>>>>>>>        Boolean bDoAttach bChanged
37341>>>>>>>        Integer iFile iStat iRelFile iType
37341>>>>>>>        String sValue
37341>>>>>>>        
37341>>>>>>>        Get Main_File to iFile
37342>>>>>>>        Get Main_File of hoRelDD to iRelFile
37343>>>>>>>        
37343>>>>>>>        // before we attach check if Find mode and relfile is new and unchanged..if so skip.
37343>>>>>>>        // If operation_mode is 0, this is probably a Find (item_find sends attach_main_file for some reason).
37343>>>>>>>        Move True to bDoAttach
37344>>>>>>>        If (Operation_mode=MODE_FINDING or OPERATION_MODE=0) Begin
37346>>>>>>>            // we can test the file status to see if we have a record or not. If we have a record, we attach
37346>>>>>>>            Get_Attribute DF_FILE_STATUS  of iRelFile to iStat
37349>>>>>>>            If (iStat=DF_FILE_INACTIVE) Begin
37351>>>>>>>                // if no record, we need to look for changes. We can't just look at the file's changed state because the DD
37351>>>>>>>                // may have set defaults, which have been moved to the buffer. We should be able to check the DD's changed state
37351>>>>>>>                // because this is not set with default values. When doing a find entry_update this should be ok. If this were
37351>>>>>>>                // a save, this would cause problems (but this is not a save). Prior to 17.0 this was not an issue with windows
37351>>>>>>>                // applications because find entry_updates were done at the DEO level (unlike web applications).
37351>>>>>>>                Get Changed_State of hoRelDD to bChanged
37352>>>>>>>                Move bChanged to bDoAttach
37353>>>>>>>                
37353>>>>>>>                // special Triumph workaround for Item_Find with blank inner segment. They were counting on the item_find attach_main_file
37353>>>>>>>                // which would slip through the "no-attach on find when parent is empty optimization". This was needed to force a string segment
37353>>>>>>>                // that was "" to get filled with spaces from the parent field. The child field was set to "" because of a constrained_clear
37353>>>>>>>                // in Item_find. This workaround is as narrow as possible. If an item_find attach_main_file (operation_mode=0) and this is
37353>>>>>>>                // an empty parent (bOk was just set to False), and the field is DF_Ascii and the child value is empty (no trailing spaces)
37353>>>>>>>                // then force an attach. Since the parent should be "", we can just Set_Field_value to "", which fills the field buffer.
37353>>>>>>>                // There is no real logic as to why this is being done other than to make it work like it used to with the least
37353>>>>>>>                // amount of side-effects.
37353>>>>>>>                If (not(bDoAttach) and OPERATION_MODE=0) Begin
37355>>>>>>>                    Get_Attribute DF_FIELD_TYPE of iFile iField to iType
37358>>>>>>>                    If (iType=DF_ASCII) Begin
37360>>>>>>>                        Get_Field_Value iFile iField to sValue
37363>>>>>>>                        // if no spaces, this probably was cleared via constrained_clear in Item_Find. We should update
37363>>>>>>>                        If (Ascii(Left(sValue,1))=0) Begin
37365>>>>>>>                            Set_Field_Value iFile iField to ""
37368>>>>>>>                        End
37368>>>>>>>>
37368>>>>>>>                    End
37368>>>>>>>>
37368>>>>>>>                End
37368>>>>>>>>
37368>>>>>>>                
37368>>>>>>>            End
37368>>>>>>>>
37368>>>>>>>        End
37368>>>>>>>>
37368>>>>>>>        Function_Return bDoAttach
37369>>>>>>>    End_Function
37370>>>>>>>    
37370>>>>>>>    // Notify all DEOs that a mask has changed.
37370>>>>>>>    //        this message is sent by set Field_Mask
37370>>>>>>>    Procedure Field_Mask_Changed Integer iField String sMask
37372>>>>>>>        Integer i iDEOs iDEO
37372>>>>>>>        Integer iMain_File
37372>>>>>>>        Get Main_File to iMain_File
37373>>>>>>>        Get Data_Set_User_Interface_Count to iDEOs
37374>>>>>>>        Decrement iDEOs
37375>>>>>>>        For i from 0 to iDEOs
37381>>>>>>>>
37381>>>>>>>            Get Data_Set_User_Interface i to iDEO
37382>>>>>>>            If (Extended_DEO_State(iDEO)) ;                Send File_Field_Mask_Changed to iDEO ;                iMain_File iField sMask
37385>>>>>>>        Loop
37386>>>>>>>>
37386>>>>>>>    End_Procedure
37387>>>>>>>    
37387>>>>>>>    // Notify all DEOs that a label has changed.
37387>>>>>>>    //   This message is sent by Set Field_Label_long & Field_Label_Short
37387>>>>>>>    Procedure Field_label_Changed Integer iField Boolean bLong String sLabel
37389>>>>>>>        Integer i iDEOs iDEO
37389>>>>>>>        Integer iMain_File
37389>>>>>>>        Get Main_File to iMain_File
37390>>>>>>>        Get Data_Set_User_Interface_Count to iDEOs
37391>>>>>>>        Decrement iDEOs
37392>>>>>>>        For i from 0 to iDEOs
37398>>>>>>>>
37398>>>>>>>            Get Data_Set_User_Interface i to iDEO
37399>>>>>>>            If (Extended_DEO_State(iDEO)) ;                Send File_Field_Label_Changed to iDEO ;                iMain_File iField bLong sLabel
37402>>>>>>>        Loop
37403>>>>>>>>
37403>>>>>>>    End_Procedure
37404>>>>>>>    
37404>>>>>>>    // Notify all DEOs that a field option has changed.
37404>>>>>>>    //   This message is sent by Set Field_Option
37404>>>>>>>    Procedure Field_Option_Changed Integer iField Integer iOptions Boolean bClear
37406>>>>>>>        Integer i iDEOs iDEO
37406>>>>>>>        Integer iMain_File
37406>>>>>>>        Get Main_File to iMain_File
37407>>>>>>>        Get Data_Set_User_Interface_Count to iDEOs
37408>>>>>>>        Decrement iDEOs
37409>>>>>>>        For i from 0 to iDEOs
37415>>>>>>>>
37415>>>>>>>            Get Data_Set_User_Interface i to iDEO
37416>>>>>>>            If (Extended_DEO_State(iDEO)) ;                Send File_Field_Option_Changed of iDEO ;                iMain_File iField iOptions bClear
37419>>>>>>>        Loop
37420>>>>>>>>
37420>>>>>>>    End_Procedure
37421>>>>>>>    
37421>>>>>>>    
37421>>>>>>>    //   Set, clear or toggle a field option
37421>>>>>>>    //   Multiple options can be passed as an expression
37421>>>>>>>    //   (e.g. Set Field_option 2 (dd_Retain IOR dd_NoEnter).
37421>>>>>>>    //   Unlike set Field_options this notifies DEOs of changes
37421>>>>>>>    // supports setting and clearing. e.g.:
37421>>>>>>>    //    Set Field_Option Field Customer.Name DD_NoEnter to True
37421>>>>>>>    // This new syntax is now the recommended syntax but the older syntax without
37421>>>>>>>    // the last parameter is supported (where true is the default). The old syntax is
37421>>>>>>>    // only supported for compatibility. This means that Field_Option_Clear should
37421>>>>>>>    // also be replaced with Field_Option
37421>>>>>>>    Procedure Set Field_Option Integer iField Integer iOption Boolean bSet
37423>>>>>>>        Boolean bSetTrue
37423>>>>>>>        Move (If(num_arguments>2, bSet, True)) to bSetTrue // support for old deprecated syntax
37424>>>>>>>        If bSetTrue Begin
37426>>>>>>>            Set Field_options iField to iOption
37427>>>>>>>        End
37427>>>>>>>>
37427>>>>>>>        Else Begin
37428>>>>>>>            Set Field_options iField to DD_CLEAR_FIELD_OPTIONS iOption
37429>>>>>>>        End
37429>>>>>>>>
37429>>>>>>>        If (Data_Set_User_Interface_Count(Self)) Begin
37431>>>>>>>            Send Field_Option_Changed iField iOption (not(bSetTrue))
37432>>>>>>>        End
37432>>>>>>>>
37432>>>>>>>    End_Procedure
37433>>>>>>>    
37433>>>>>>>    Procedure Set File_Field_Option Integer iFile Integer iField Integer iOption Boolean bSet
37435>>>>>>>        Handle hoDD
37435>>>>>>>        Boolean bSetTrue
37435>>>>>>>        Move (If(num_arguments>3, bSet, True)) to bSetTrue // support for old deprecated syntax
37436>>>>>>>        Get Data_set iFile to hoDD
37437>>>>>>>        If hoDD Begin
37439>>>>>>>            Set Field_Option of hoDD iField iOption to bSetTrue
37440>>>>>>>        End
37440>>>>>>>>
37440>>>>>>>        
37440>>>>>>>    End_Procedure
37441>>>>>>>    
37441>>>>>>>    Procedure Set Field_Option_Clear Integer iField Integer iOptions
37443>>>>>>>        Set Field_Option iField iOptions to False
37444>>>>>>>    End_Procedure
37445>>>>>>>    
37445>>>>>>>    Procedure Set File_Field_Option_Clear Integer iFile Integer iField Integer iOptions
37447>>>>>>>        Set File_Field_Option iFile iField iOptions to False
37448>>>>>>>    End_Procedure
37449>>>>>>>    
37449>>>>>>>    Procedure Set Field_Option_Toggle Integer iField Integer iOption
37451>>>>>>>        Integer iOldOption
37451>>>>>>>        Get Field_Options iField to iOldOption
37452>>>>>>>        // if old and new have overlapping bits, we assume clear
37452>>>>>>>        Set Field_Option iField iOption to ((iOldOption iand iOption)=0)
37453>>>>>>>    End_Procedure
37454>>>>>>>    
37454>>>>>>>    Procedure Set File_Field_Option_Toggle Integer iFile Integer iField Integer iOption
37456>>>>>>>        Handle hoDD
37456>>>>>>>        Get Data_set iFile to hoDD
37457>>>>>>>        If hoDD ;            Set Field_Option_Toggle of hoDD iField to iOption
37460>>>>>>>    End_Procedure
37461>>>>>>>    
37461>>>>>>>    // This returns the main index for a field. This replaces the DSO message Field_Main_index which
37461>>>>>>>    // should no longer be used by DDOs. The old message has the problem that the DDO or DSO using
37461>>>>>>>    // this message may not be the owner of the field. So augmenting the owner DDO did not insure that
37461>>>>>>>    // all requests for this index would go through it. Now you can augment Field_Index and always
37461>>>>>>>    // be sure that any DDO requesting an index for a file (via file_field_index) will always go to
37461>>>>>>>    // the owner object.
37461>>>>>>>    Function Field_Index Integer iField Returns Integer
37463>>>>>>>        Integer iFile iIndex iOrder
37463>>>>>>>        // ordering takes precendence
37463>>>>>>>        Get ordering to iOrder
37464>>>>>>>        If (iOrder>=0);            Move iOrder to iIndex  //ordering takes precedence over main index
37467>>>>>>>        Else Begin
37468>>>>>>>            Get Main_file to iFile
37469>>>>>>>            Get_Attribute DF_FIELD_INDEX of iFile iField to iIndex // main index field
37472>>>>>>>            If (iIndex=0 and iField>0) ; // If field is not recnum and there is no index, the                Move -1 to iIndex        // field has no main index
37475>>>>>>>        End
37475>>>>>>>>
37475>>>>>>>        Function_Return iIndex
37476>>>>>>>    End_Function
37477>>>>>>>    
37477>>>>>>>    // In all cases, this message should be sent instead of Field_Main_Index. If
37477>>>>>>>    // augmentation was used in Field_Main_Index, use Field_Index to insure the owner object
37477>>>>>>>    // is called.
37477>>>>>>>    
37477>>>>>>>    Function File_Field_Index Integer iFile Integer iField Returns Integer
37479>>>>>>>        Integer iIndex
37479>>>>>>>        Handle hoDD
37479>>>>>>>        Get Data_set iFile to hoDD
37480>>>>>>>        If (hoDD) ;            Get Field_Index of hoDD iField to iIndex
37483>>>>>>>        Else ;            Move -1 to iIndex
37485>>>>>>>        Function_Return iIndex
37486>>>>>>>    End_Function
37487>>>>>>>    
37487>>>>>>>    // 12/1 change: Make sure all of the major DD operations update the DD with the value in
37487>>>>>>>    // the focus field. After the actual find, save, clar or delete, the DD buffer contains information that
37487>>>>>>>    // is not yet reflected in the DEOs (before refresh is called) we want to make sure that we
37487>>>>>>>    // don't try to get data from the DEO. Get Field_Current_Value now checks if operation_mode is
37487>>>>>>>    // non-zero. If it is, it always gets from the DD buffer.
37487>>>>>>>    
37487>>>>>>>    Procedure Clear
37489>>>>>>>        Boolean bOpOk
37489>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37490>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37492>>>>>>>            Send Update_Focus_Field_For_Operation MODE_CLEARING
37493>>>>>>>        End
37493>>>>>>>>
37493>>>>>>>        If (bOpOk) Begin
37495>>>>>>>            Send OnPreFind DDFindClear
37496>>>>>>>        End
37496>>>>>>>>
37496>>>>>>>        Forward Send Clear
37498>>>>>>>        If (bOpOk) Begin
37500>>>>>>>            Send DefaultParentAutofinds
37501>>>>>>>            Send OnPostFind DDFindClear True
37502>>>>>>>        End
37502>>>>>>>>
37502>>>>>>>    End_Procedure
37503>>>>>>>    
37503>>>>>>>    Procedure Clear_All
37505>>>>>>>        Boolean bOpOk
37505>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37506>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37508>>>>>>>            Send Update_Focus_Field_For_Operation MODE_CLEARINGALL
37509>>>>>>>        End
37509>>>>>>>>
37509>>>>>>>        Forward Send clear_all
37511>>>>>>>        If (bOpOk) Begin
37513>>>>>>>            Send DefaultParentAutofinds
37514>>>>>>>        End
37514>>>>>>>>
37514>>>>>>>    End_Procedure
37515>>>>>>>    
37515>>>>>>>    Procedure Request_Assign Integer iFile
37517>>>>>>>        Handle hoDD
37517>>>>>>>        Boolean bFound
37517>>>>>>>        Boolean bOpOk
37517>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37518>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37520>>>>>>>            Send Update_Focus_Field_For_Operation MODE_FINDING
37521>>>>>>>        End
37521>>>>>>>>
37521>>>>>>>        
37521>>>>>>>        If (bOpOk) Begin
37523>>>>>>>            If (num_arguments=0 or iFile=0) Begin
37525>>>>>>>                Move Self to hoDD
37526>>>>>>>            End
37526>>>>>>>>
37526>>>>>>>            Else Begin
37527>>>>>>>                Get Data_Set iFile to hoDD
37528>>>>>>>            End
37528>>>>>>>>
37528>>>>>>>            If hoDD Begin
37530>>>>>>>                Send OnPreFind of hoDD DDFindRequestAssign
37531>>>>>>>            End
37531>>>>>>>>
37531>>>>>>>        End
37531>>>>>>>>
37531>>>>>>>        
37531>>>>>>>        If (num_arguments=0) Begin
37533>>>>>>>            Forward Send Request_Assign
37535>>>>>>>        End
37535>>>>>>>>
37535>>>>>>>        Else Begin
37536>>>>>>>            Forward Send Request_Assign iFile
37538>>>>>>>        End
37538>>>>>>>>
37538>>>>>>>        
37538>>>>>>>        If (bOpOk) Begin
37540>>>>>>>            If (hoDD) Begin
37542>>>>>>>                Move (Found) to bFound
37543>>>>>>>                Send OnPostFind of hoDD DDFindRequestAssign bFound
37544>>>>>>>                Move bFound to Found
37545>>>>>>>            End
37545>>>>>>>>
37545>>>>>>>        End
37545>>>>>>>>
37545>>>>>>>    End_Procedure
37546>>>>>>>    
37546>>>>>>>    
37546>>>>>>>    Procedure Find_By_Recnum Integer iFile Integer iRecord
37548>>>>>>>        Handle hoDD
37548>>>>>>>        Boolean bFound
37548>>>>>>>        Boolean bOpOk
37548>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37549>>>>>>>        Send Update_Focus_Field_For_Operation MODE_FINDING
37550>>>>>>>        
37550>>>>>>>        If (bOpOk) Begin
37552>>>>>>>            Get Data_Set iFile to hoDD
37553>>>>>>>            If hoDD Begin
37555>>>>>>>                Send OnPreFind of hoDD DDFindFindByRowRec
37556>>>>>>>            End
37556>>>>>>>>
37556>>>>>>>        End
37556>>>>>>>>
37556>>>>>>>        
37556>>>>>>>        Forward Send Find_By_Recnum iFile iRecord
37558>>>>>>>        
37558>>>>>>>        If (bOpOk) Begin
37560>>>>>>>            If (hoDD) Begin
37562>>>>>>>                Move (Found) to bFound
37563>>>>>>>                Send OnPostFind of hoDD DDFindFindByRowRec bFound
37564>>>>>>>                Move bFound to Found
37565>>>>>>>            End
37565>>>>>>>>
37565>>>>>>>        End
37565>>>>>>>>
37565>>>>>>>    End_Procedure
37566>>>>>>>    
37566>>>>>>>    Procedure FindByRowId Integer iFile RowID riRowId
37568>>>>>>>        Handle hoDD
37568>>>>>>>        Boolean bFound
37568>>>>>>>        Boolean bOpOk
37568>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37569>>>>>>>        Send Update_Focus_Field_For_Operation MODE_FINDING
37570>>>>>>>        
37570>>>>>>>        If (bOpOk) Begin
37572>>>>>>>            Get Data_Set iFile to hoDD
37573>>>>>>>            If hoDD Begin
37575>>>>>>>                Send OnPreFind of hoDD DDFindFindByRowRec
37576>>>>>>>            End
37576>>>>>>>>
37576>>>>>>>        End
37576>>>>>>>>
37576>>>>>>>        
37576>>>>>>>        Forward Send FindByRowId iFile riRowId
37578>>>>>>>        
37578>>>>>>>        If (bOpOk) Begin
37580>>>>>>>            If (hoDD) Begin
37582>>>>>>>                Move (Found) to bFound
37583>>>>>>>                Send OnPostFind of hoDD DDFindFindByRowRec bFound
37584>>>>>>>                Move bFound to Found
37585>>>>>>>            End
37585>>>>>>>>
37585>>>>>>>        End
37585>>>>>>>>
37585>>>>>>>    End_Procedure
37586>>>>>>>    
37586>>>>>>>    Function FindByRowIdEx Integer iFile RowID riRowId Returns Boolean
37588>>>>>>>        Handle hoDD
37588>>>>>>>        Boolean bFound bSuccess
37588>>>>>>>        Boolean bOpOk
37588>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37589>>>>>>>        Send Update_Focus_Field_For_Operation MODE_FINDING
37590>>>>>>>        
37590>>>>>>>        If (bOpOk) Begin
37592>>>>>>>            Get Data_Set iFile to hoDD
37593>>>>>>>            If hoDD Begin
37595>>>>>>>                Send OnPreFind of hoDD DDFindFindByRowRec
37596>>>>>>>            End
37596>>>>>>>>
37596>>>>>>>        End
37596>>>>>>>>
37596>>>>>>>        
37596>>>>>>>        Forward Get FindByRowIdEx iFile riRowId to bSuccess
37598>>>>>>>        
37598>>>>>>>        If (bOpOk) Begin
37600>>>>>>>            If (hoDD) Begin
37602>>>>>>>                Move (Found) to bFound
37603>>>>>>>                Send OnPostFind of hoDD DDFindFindByRowRec bFound
37604>>>>>>>                Move bFound to Found
37605>>>>>>>            End
37605>>>>>>>>
37605>>>>>>>        End
37605>>>>>>>>
37605>>>>>>>        Function_Return bSuccess
37606>>>>>>>    End_Function
37607>>>>>>>    
37607>>>>>>>    Function FindByRowIdExNoAutoFill Integer iFile RowID riRowId Returns Boolean
37609>>>>>>>        Handle hoDD
37609>>>>>>>        Boolean bFound bSuccess
37609>>>>>>>        Boolean bOpOk
37609>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37610>>>>>>>        Send Update_Focus_Field_For_Operation MODE_FINDING
37611>>>>>>>        
37611>>>>>>>        If (bOpOk) Begin
37613>>>>>>>            Get Data_Set iFile to hoDD
37614>>>>>>>            If hoDD Begin
37616>>>>>>>                Send OnPreFind of hoDD DDFindFindByRowRec
37617>>>>>>>            End
37617>>>>>>>>
37617>>>>>>>        End
37617>>>>>>>>
37617>>>>>>>        
37617>>>>>>>        Forward Get FindByRowIdExNoAutoFill iFile riRowId to bSuccess
37619>>>>>>>        
37619>>>>>>>        If (bOpOk) Begin
37621>>>>>>>            If (hoDD) Begin
37623>>>>>>>                Move (Found) to bFound
37624>>>>>>>                Send OnPostFind of hoDD DDFindFindByRowRec bFound
37625>>>>>>>                Move bFound to Found
37626>>>>>>>            End
37626>>>>>>>>
37626>>>>>>>        End
37626>>>>>>>>
37626>>>>>>>        Function_Return bSuccess
37627>>>>>>>    End_Function
37628>>>>>>>    
37628>>>>>>>    
37628>>>>>>>    Procedure Request_Find Integer eFindMode Integer iFile Integer iIndex
37630>>>>>>>        Handle hoDD
37630>>>>>>>        Boolean bFound
37630>>>>>>>        Boolean bOpOk
37630>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37631>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37633>>>>>>>            Send Update_Focus_Field_For_Operation MODE_FINDING
37634>>>>>>>        End
37634>>>>>>>>
37634>>>>>>>        
37634>>>>>>>        If (bOpOk) Begin
37636>>>>>>>            Get Data_Set iFile to hoDD
37637>>>>>>>            If hoDD Begin
37639>>>>>>>                Send OnPreFind of hoDD DDFindRequestFind
37640>>>>>>>            End
37640>>>>>>>>
37640>>>>>>>        End
37640>>>>>>>>
37640>>>>>>>        
37640>>>>>>>        Forward Send Request_Find eFindMode iFile iIndex
37642>>>>>>>        
37642>>>>>>>        If (bOpOk) Begin
37644>>>>>>>            If (hoDD) Begin
37646>>>>>>>                Move (Found) to bFound
37647>>>>>>>                Send OnPostFind of hoDD DDFindRequestFind bFound
37648>>>>>>>                Move bFound to Found
37649>>>>>>>            End
37649>>>>>>>>
37649>>>>>>>        End
37649>>>>>>>>
37649>>>>>>>    End_Procedure
37650>>>>>>>    
37650>>>>>>>    Procedure OnPreFind Integer eMessage
37652>>>>>>>    End_Procedure
37653>>>>>>>    
37653>>>>>>>    Procedure OnPostFind Integer eMessage Boolean bFound
37655>>>>>>>    End_Procedure
37656>>>>>>>    
37656>>>>>>>    
37656>>>>>>>    
37656>>>>>>>    Procedure Request_Superfind Integer eFindMode Integer iFile Integer iField
37658>>>>>>>        Boolean bInSuperFind
37658>>>>>>>        // we need to set pbInSuperFind so Entry_update in the DEOs will know that
37658>>>>>>>        // they should perform an entry_update. Superfind entry_updates have never gone through
37658>>>>>>>        // the DD's field buffer.
37658>>>>>>>        Get pbInSuperFind to bInSuperFind
37659>>>>>>>        Set pbInSuperFind to True
37660>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37662>>>>>>>            Send Update_Focus_Field_For_Operation MODE_FINDING
37663>>>>>>>        End
37663>>>>>>>>
37663>>>>>>>        Forward Send Request_Superfind eFindMode iFile iField
37665>>>>>>>        Set pbInSuperFind to bInSuperFind
37666>>>>>>>    End_Procedure
37667>>>>>>>    
37667>>>>>>>    // Augmented to return true if a non-constrained parent DD has a change. This way
37667>>>>>>>    // Should_Save_row only filters changes in a consrained parent.
37667>>>>>>>    
37667>>>>>>>    Function Should_Save_Row Returns Boolean
37669>>>>>>>        Boolean bShouldSaveRow bShouldSave bRelatesToConstraint
37669>>>>>>>        Integer iServers iServer iServerFile
37669>>>>>>>        Handle hoServerDD
37669>>>>>>>        Forward Get Should_Save_Row to bShouldSaveRow // will be true if this DD is changed or has a changed parent.
37671>>>>>>>        Get Should_Save to bShouldSave // will be true if there is a change anywhere up the entire save structure
37672>>>>>>>        If (not(bShouldSaveRow) and bShouldSave) Begin
37674>>>>>>>            // If here we have a changed in an server but not the this DD. We need a further refinement. If the server
37674>>>>>>>            // change is in a constrained server, we don't consider this a change because you can switch rows without losing
37674>>>>>>>            // data (with RT changes made for 17.0).
37674>>>>>>>            Get Data_Set_Server_Count to iServers
37675>>>>>>>            For iServer from 0 to (iServers-1)
37681>>>>>>>>
37681>>>>>>>                Get Data_Set_Server iServer to hoServerDD
37682>>>>>>>                Get Should_Save of hoServerDD to bShouldSave
37683>>>>>>>                If bShouldSave Begin
37685>>>>>>>                    Get Main_File of hoServerDD to iServerFile
37686>>>>>>>                    Get IsRelatesToConstrained iServerFile to bRelatesToConstraint
37687>>>>>>>                    If not bRelatesToConstraint Begin
37689>>>>>>>                        Function_Return True
37690>>>>>>>                    End
37690>>>>>>>>
37690>>>>>>>                End
37690>>>>>>>>
37690>>>>>>>            Loop
37691>>>>>>>>
37691>>>>>>>        End
37691>>>>>>>>
37691>>>>>>>        Function_Return bShouldSaveRow
37692>>>>>>>    End_Function
37693>>>>>>>    
37693>>>>>>>    // returns true if any relates-to constraining server needs a save. Normally there will be
37693>>>>>>>    // one or zero related-to parents. If Should_Save_Row returns false it is possible that there
37693>>>>>>>    // is a change up the relates-to constrained branch. If so, this will return True. This can be
37693>>>>>>>    // used to better determine the changed status of your DDO sructure
37693>>>>>>>    Function ShouldSaveConstrainedToServer Returns Boolean
37695>>>>>>>        Boolean bShouldSave bRelatesToConstraint
37695>>>>>>>        Integer iServers iServer iServerFile
37695>>>>>>>        Handle hoServerDD
37695>>>>>>>        Get Data_Set_Server_Count to iServers
37696>>>>>>>        For iServer from 0 to (iServers-1)
37702>>>>>>>>
37702>>>>>>>            Get Data_Set_Server iServer to hoServerDD
37703>>>>>>>            Get Main_File of hoServerDD to iServerFile
37704>>>>>>>            Get IsRelatesToConstrained iServerFile to bRelatesToConstraint
37705>>>>>>>            If bRelatesToConstraint Begin
37707>>>>>>>                Get Should_Save of hoServerDD to bShouldSave
37708>>>>>>>                If bShouldSave Begin
37710>>>>>>>                    Function_Return True
37711>>>>>>>                End
37711>>>>>>>>
37711>>>>>>>            End
37711>>>>>>>>
37711>>>>>>>        Loop
37712>>>>>>>>
37712>>>>>>>        Function_Return False
37713>>>>>>>    End_Function
37714>>>>>>>    
37714>>>>>>>    Function FindServerInformationElement Integer iFile Returns Integer
37716>>>>>>>        tDDServerInformation[] ServerInformation
37716>>>>>>>        tDDServerInformation[] ServerInformation
37717>>>>>>>        tDDServerInformation ServerSearch
37717>>>>>>>        tDDServerInformation ServerSearch
37717>>>>>>>        Integer iIndex
37717>>>>>>>        Move iFile to ServerSearch.iParent
37718>>>>>>>        Get pServerInformation to ServerInformation
37719>>>>>>>        Function_Return (SearchArray(ServerSearch,ServerInformation))
37720>>>>>>>    End_Function
37721>>>>>>>    
37721>>>>>>>    Procedure AddServerData Integer iFile Integer eParam Boolean bValue
37723>>>>>>>        tDDServerInformation[] ServerInformation
37723>>>>>>>        tDDServerInformation[] ServerInformation
37724>>>>>>>        Integer iIndex
37724>>>>>>>        Handle hoDDO
37724>>>>>>>        
37724>>>>>>>        Get pServerInformation to ServerInformation
37725>>>>>>>        Get FindServerInformationElement iFile to iIndex
37726>>>>>>>        If (iIndex=-1) Begin
37728>>>>>>>            Move (SizeOfArray(ServerInformation)) to iIndex
37729>>>>>>>            Move iFile to ServerInformation[iIndex].iParent
37730>>>>>>>            // defaults must always be false!
37730>>>>>>>            Move False to ServerInformation[iIndex].bParentNoSwitchIfCommitted
37731>>>>>>>            Move False to ServerInformation[iIndex].bAllowNullParent
37732>>>>>>>            Move False to ServerInformation[iIndex].bNoCascadeDelete
37733>>>>>>>            Move False to ServerInformation[iIndex].bCascadeDeleteNullTheParent
37734>>>>>>>        End
37734>>>>>>>>
37734>>>>>>>        
37734>>>>>>>        If (eParam=0) Begin
37736>>>>>>>            If (bValue<>ServerInformation[iIndex].bAllowNullParent) Begin
37738>>>>>>>                Move bValue to ServerInformation[iIndex].bAllowNullParent
37739>>>>>>>                Send AdjustDeleteValidateStructure iFile
37740>>>>>>>            End
37740>>>>>>>>
37740>>>>>>>        End
37740>>>>>>>>
37740>>>>>>>        Else If (eParam=1) Begin
37743>>>>>>>            Move bValue to ServerInformation[iIndex].bParentNoSwitchIfCommitted
37744>>>>>>>        End
37744>>>>>>>>
37744>>>>>>>        Else If (eParam=2) Begin
37747>>>>>>>            Move bValue to ServerInformation[iIndex].bNoCascadeDelete
37748>>>>>>>        End
37748>>>>>>>>
37748>>>>>>>        Else Begin // (3)
37749>>>>>>>            If (bValue<>ServerInformation[iIndex].bCascadeDeleteNullTheParent) Begin
37751>>>>>>>                Move bValue to ServerInformation[iIndex].bCascadeDeleteNullTheParent
37752>>>>>>>                Send AdjustDeleteValidateStructure iFile
37753>>>>>>>            End
37753>>>>>>>>
37753>>>>>>>        End
37753>>>>>>>>
37753>>>>>>>        Set pServerInformation to ServerInformation
37754>>>>>>>    End_Procedure
37755>>>>>>>    
37755>>>>>>>    Function GetServerData Integer iFile Integer eParam Returns Boolean
37757>>>>>>>        Boolean bValue
37757>>>>>>>        tDDServerInformation[] ServerInformation
37757>>>>>>>        tDDServerInformation[] ServerInformation
37758>>>>>>>        Integer iIndex
37758>>>>>>>        Get pServerInformation to ServerInformation
37759>>>>>>>        Get FindServerInformationElement iFile to iIndex
37760>>>>>>>        // when not found in array, we want to make sure that we return false. Therefore
37760>>>>>>>        // false should always be the default.
37760>>>>>>>        If (iIndex<>-1) Begin
37762>>>>>>>            If (eParam=0) Begin
37764>>>>>>>                Move ServerInformation[iIndex].bAllowNullParent to bValue
37765>>>>>>>            End
37765>>>>>>>>
37765>>>>>>>            Else If (eParam=1) Begin
37768>>>>>>>                Move ServerInformation[iIndex].bParentNoSwitchIfCommitted to bValue
37769>>>>>>>            End
37769>>>>>>>>
37769>>>>>>>            Else If (eParam=2) Begin
37772>>>>>>>                Move ServerInformation[iIndex].bNoCascadeDelete to bValue
37773>>>>>>>            End
37773>>>>>>>>
37773>>>>>>>            Else Begin
37774>>>>>>>                Move ServerInformation[iIndex].bCascadeDeleteNullTheParent to bValue
37775>>>>>>>            End
37775>>>>>>>>
37775>>>>>>>        End
37775>>>>>>>>
37775>>>>>>>        Function_Return bValue
37776>>>>>>>    End_Function
37777>>>>>>>    
37777>>>>>>>    Procedure AdjustDeleteValidateStructure2
37779>>>>>>>        Integer iCount i
37779>>>>>>>        Handle hoDDO
37779>>>>>>>        Boolean bVisited
37779>>>>>>>        Set Visited_State to True
37780>>>>>>>        Set Cascade_Delete_Structure_Validated_State to False
37781>>>>>>>        Get Data_Set_Server_Count to iCount
37782>>>>>>>        For i from 0 to (iCount-1)
37788>>>>>>>>
37788>>>>>>>            Get Data_Set_Server i to hoDDO
37789>>>>>>>            Get Visited_State of hoDDO to bVisited
37790>>>>>>>            If (not(bVisited)) Begin
37792>>>>>>>                Send AdjustDeleteValidateStructure2 of hoDDO
37793>>>>>>>            End
37793>>>>>>>>
37793>>>>>>>        Loop
37794>>>>>>>>
37794>>>>>>>    End_Procedure
37795>>>>>>>    
37795>>>>>>>    // This is called in the unlikely case that NullParent/CascadeNull are set dynamically. It
37795>>>>>>>    // tells the parent DDO to recheck its validate-delete structure and it tells all ancestors of
37795>>>>>>>    // this parent to do the same. If called while DDOs are being created (via a class setting) there
37795>>>>>>>    // will not be a connected parent for iFile, which is fine.
37795>>>>>>>    Procedure AdjustDeleteValidateStructure Integer iFile
37797>>>>>>>        Handle hoDDO
37797>>>>>>>        Get Which_Data_Set iFile to hoDDO
37798>>>>>>>        If hoDDO Begin
37800>>>>>>>            Send Initialize_Visited of hoDDO False False
37801>>>>>>>            Send AdjustDeleteValidateStructure2 of hoDDO
37802>>>>>>>        End
37802>>>>>>>>
37802>>>>>>>    End_Procedure
37803>>>>>>>    
37803>>>>>>>    // Used to add a null parent to the list of parents that allow this
37803>>>>>>>    Procedure Set ParentNullAllowed Integer iParent Boolean bAllowed
37805>>>>>>>        Send AddServerData iParent 0 bAllowed
37806>>>>>>>    End_Procedure
37807>>>>>>>    
37807>>>>>>>    // returns true if null parent allowed for this parent file
37807>>>>>>>    Function ParentNullAllowed Integer iParent Returns Boolean
37809>>>>>>>        Boolean bValue
37809>>>>>>>        Get GetServerData iParent 0 to bValue
37810>>>>>>>        Function_Return bValue
37811>>>>>>>    End_Function
37812>>>>>>>    
37812>>>>>>>    // returns true if null parent allowed for this parent file. This is the function
37812>>>>>>>    // that can be used for augmentation. This is the methid that is called by the runtime
37812>>>>>>>    // to determine if a null parent is allowed
37812>>>>>>>    Function IsNullParentAllowed Integer iServer Returns Boolean
37814>>>>>>>        Boolean bAllowed
37814>>>>>>>        Get ParentNullAllowed iServer to bAllowed
37815>>>>>>>        Function_Return bAllowed
37816>>>>>>>    End_Function
37817>>>>>>>    
37817>>>>>>>    Procedure Set ParentNoSwitchIfCommitted Integer iParent Boolean bAllowed
37819>>>>>>>        Send AddServerData iParent 1 bAllowed
37820>>>>>>>    End_Procedure
37821>>>>>>>    
37821>>>>>>>    Function ParentNoSwitchIfCommitted Integer iParent Returns Boolean
37823>>>>>>>        Boolean bValue
37823>>>>>>>        Get GetServerData iParent 1 to bValue
37824>>>>>>>        Function_Return bValue
37825>>>>>>>    End_Function
37826>>>>>>>    
37826>>>>>>>    
37826>>>>>>>    Procedure Set CascadeDeleteAllowed Integer iParent Boolean bAllowed
37828>>>>>>>        Send AddServerData iParent 2 (not(bAllowed))
37829>>>>>>>    End_Procedure
37830>>>>>>>    
37830>>>>>>>    Function CascadeDeleteAllowed Integer iParent Returns Boolean
37832>>>>>>>        Boolean bValue
37832>>>>>>>        Get GetServerData iParent 2 to bValue // note that False=allowed
37833>>>>>>>        Function_Return (not(bValue))
37834>>>>>>>    End_Function
37835>>>>>>>    
37835>>>>>>>    Function IsCascadeDeleteAllowed Integer iServer Returns Boolean
37837>>>>>>>        Boolean bAllowed
37837>>>>>>>        Get CascadeDeleteAllowed iServer to bAllowed
37838>>>>>>>        Function_Return bAllowed
37839>>>>>>>    End_Function
37840>>>>>>>    
37840>>>>>>>    Procedure Set CascadeDeleteNull Integer iParent Boolean bAllowed
37842>>>>>>>        Send AddServerData iParent 3 bAllowed
37843>>>>>>>    End_Procedure
37844>>>>>>>    
37844>>>>>>>    Function CascadeDeleteNull Integer iParent Returns Boolean
37846>>>>>>>        Boolean bValue
37846>>>>>>>        Get GetServerData iParent 3 to bValue
37847>>>>>>>        Function_Return bValue
37848>>>>>>>    End_Function
37849>>>>>>>    
37849>>>>>>>    Function IsCascadeDeleteNull Integer iServer Returns Boolean
37851>>>>>>>        Boolean bAllowed
37851>>>>>>>        Get CascadeDeleteNull iServer to bAllowed
37852>>>>>>>        Function_Return bAllowed
37853>>>>>>>    End_Function
37854>>>>>>>    
37854>>>>>>>    // return an array with the server path from this DD to passed top. The top will be
37854>>>>>>>    // in 0 and its child in 1, grand-child in 2, etc. If empty, no path was found. To start
37854>>>>>>>    // this process the byref hoDDs array MUST be empty
37854>>>>>>>    Procedure DDOServerPath Handle hoTop Handle[] ByRef hoDDs
37856>>>>>>>        Handle hoServer
37856>>>>>>>        Integer iServers iServer
37856>>>>>>>        If (hoTop=Self) Begin
37858>>>>>>>            Move Self to hoDDs[SizeOfArray(hoDDs)]
37859>>>>>>>            Procedure_Return
37860>>>>>>>        End
37860>>>>>>>>
37860>>>>>>>        Get Data_Set_Server_Count to iServers
37861>>>>>>>        For iServer from 0 to (iServers-1)
37867>>>>>>>>
37867>>>>>>>            Get Data_Set_Server iServer to hoServer
37868>>>>>>>            Send DDOServerPath of hoServer hoTop (&hoDDs)
37869>>>>>>>            If (SizeOfArray(hoDDs)) Begin
37871>>>>>>>                Move Self to hoDDs[SizeOfArray(hoDDs)]
37872>>>>>>>                Procedure_Return
37873>>>>>>>            End
37873>>>>>>>>
37873>>>>>>>        Loop
37874>>>>>>>>
37874>>>>>>>    End_Procedure
37875>>>>>>>    
37875>>>>>>>    // returns True if the value passed can be considered empty for this field.
37875>>>>>>>    Function IsEmptyField Integer iField String sValue Returns Boolean
37877>>>>>>>        Integer iFile iDataType iValidationType
37877>>>>>>>        Number nNum
37877>>>>>>>        Boolean bInvalid bChecked
37877>>>>>>>        Get Main_File to iFile
37878>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iDataType
37881>>>>>>>        Get IsDataInvalid iDataType sValue to bInvalid
37882>>>>>>>        If bInvalid Begin
37884>>>>>>>            Function_Return True
37885>>>>>>>        End
37885>>>>>>>>
37885>>>>>>>        
37885>>>>>>>        // DDs set checkbox fields to the False value as default. We must test its select_state
37885>>>>>>>        Get Field_Validation_Type of (Field_Attributes(Self)) iField to iValidationType
37886>>>>>>>        If (iValidationType=FA_VALIDATION_TYPE_CHECKBOX) Begin
37888>>>>>>>            Get Field_Select_State iField to bChecked
37889>>>>>>>            If not bChecked Begin
37891>>>>>>>                Function_Return True
37892>>>>>>>            End
37892>>>>>>>>
37892>>>>>>>        End
37892>>>>>>>>
37892>>>>>>>        
37892>>>>>>>        If ((iDataType=DF_BCD or iDataType=DF_DATE) and (Number(sValue)=0)) Begin
37894>>>>>>>            Move "" to sValue
37895>>>>>>>        End
37895>>>>>>>>
37895>>>>>>>        Else If (iDataType=DF_DATETIME and IsNullDateTime(cast(sValue,DateTime))) Begin
37898>>>>>>>            Move "" to sValue
37899>>>>>>>        End
37899>>>>>>>>
37899>>>>>>>        Function_Return (sValue="")
37900>>>>>>>    End_Function
37901>>>>>>>    
37901>>>>>>>    
37901>>>>>>>    // is the record committed
37901>>>>>>>    Function IsCommitted Returns Boolean
37903>>>>>>>        Boolean bHasRecord
37903>>>>>>>        Get HasRecord to bHasRecord
37904>>>>>>>        Function_Return bHasRecord
37905>>>>>>>    End_Function
37906>>>>>>>    
37906>>>>>>>    // is the field committed. It assumes the record is already committed
37906>>>>>>>    Function IsFieldCommitted Integer iField Returns Boolean
37908>>>>>>>        Boolean bIsCommitted
37908>>>>>>>        Get Field_Option iField DD_COMMIT to bIsCommitted
37909>>>>>>>        Function_Return bIsCommitted
37910>>>>>>>    End_Function
37911>>>>>>>    
37911>>>>>>>    // is a parent change allowed for this parent server.
37911>>>>>>>    Function IsCommittedParentChangeAllowed Integer iServer Returns Boolean
37913>>>>>>>        Boolean bNoSwitch
37913>>>>>>>        Get ParentNoSwitchIfCommitted iServer to bNoSwitch
37914>>>>>>>        Function_Return (not(bNoSwitch))
37915>>>>>>>    End_Function
37916>>>>>>>    
37916>>>>>>>    // Are we allowed to find with this file when it is used as a parent?
37916>>>>>>>    // Check all child DDOs and see if any are committed and do not allow switching parents when committed.
37916>>>>>>>    //  The rules for each child are switching is ok If:
37916>>>>>>>    // 1. the child is not committed,
37916>>>>>>>    // 2. it has a relates-to constraint (Find will change child which is ok)
37916>>>>>>>    // 3. if IsCommittedParentChangeAllowed allowed.
37916>>>>>>>    //
37916>>>>>>>    Function AllowParentFind Returns Boolean
37918>>>>>>>        Integer iClients iClient iMain
37918>>>>>>>        Handle hoChild
37918>>>>>>>        Boolean bIsCommitted
37918>>>>>>>        Get Data_Set_Client_Count to iClients
37919>>>>>>>        For iClient from 0 to (iClients-1)
37925>>>>>>>>
37925>>>>>>>            Get Data_Set_Client iClient to hoChild
37926>>>>>>>            Get IsCommitted of hoChild to bIsCommitted
37927>>>>>>>            If bIsCommitted Begin
37929>>>>>>>                Get Main_File to iMain
37930>>>>>>>                Get IsRelatesToConstrained of hoChild iMain to bIsCommitted
37931>>>>>>>                If not bIsCommitted Begin
37933>>>>>>>                    Get IsCommittedParentChangeAllowed of hoChild iMain to bIsCommitted
37934>>>>>>>                    If (not(bIsCommitted)) Begin
37936>>>>>>>                        Function_Return False
37937>>>>>>>                    End
37937>>>>>>>>
37937>>>>>>>                End
37937>>>>>>>>
37937>>>>>>>            End
37937>>>>>>>>
37937>>>>>>>        Loop
37938>>>>>>>>
37938>>>>>>>        Function_Return True
37939>>>>>>>    End_Function
37940>>>>>>>    
37940>>>>>>>    // aumgented to do nothing if there is no index (instead of annoying error message) and
37940>>>>>>>    // to do nothing if a find is not allowed because it is a no switch parent of a committed child.
37940>>>>>>>    Procedure Item_Find Integer eFindMode ;            Integer iFile Integer iField ;            Integer bDoEntryUpdate Integer bShowFindErr Integer bDeferred
37942>>>>>>>        
37942>>>>>>>        Integer iIndex iMain
37942>>>>>>>        Handle  hoOwner
37942>>>>>>>        Boolean bOk
37942>>>>>>>        
37942>>>>>>>        Get File_Field_Index iFile iField to iIndex
37943>>>>>>>        If (iIndex=-1)  Begin
37945>>>>>>>            Procedure_Return
37946>>>>>>>        End
37946>>>>>>>>
37946>>>>>>>        Get Main_File to iMain
37947>>>>>>>        If (iMain<>iFile) Begin
37949>>>>>>>            Get Which_Data_Set iFile to hoOwner
37950>>>>>>>            If hoOwner Begin
37952>>>>>>>                Get AllowParentFind of hoOwner to bOk
37953>>>>>>>                If not bOk Begin
37955>>>>>>>                    Procedure_Return
37956>>>>>>>                End
37956>>>>>>>>
37956>>>>>>>            End
37956>>>>>>>>
37956>>>>>>>        End
37956>>>>>>>>
37956>>>>>>>        
37956>>>>>>>        If not bDeferred Begin
37958>>>>>>>            Send Refind_Records // make sure the buffers are correct before the find
37959>>>>>>>        End
37959>>>>>>>>
37959>>>>>>>        
37959>>>>>>>        Forward Send Item_Find eFindMode iFile iField bDoEntryUpdate bShowFindErr bDeferred
37961>>>>>>>    End_Procedure
37962>>>>>>>    
37962>>>>>>>    
37962>>>>>>>    Function Field_CommitNoEnterOnIndex Integer iField Returns Boolean
37964>>>>>>>        Function_Return False
37965>>>>>>>    End_Function
37966>>>>>>>    
37966>>>>>>>    // Return the committed options for this field based on the committed status or this record,
37966>>>>>>>    // the committed status of the field and whether, if committed, it should be noput or noput+noenter
37966>>>>>>>    Function File_Field_Committed_Options Integer iFile Integer iField Returns Integer
37968>>>>>>>        Boolean bIsCommitted bNoEnter
37968>>>>>>>        Integer iNewOpts iIndex
37968>>>>>>>        Handle hoOwner
37968>>>>>>>        
37968>>>>>>>        Get Which_Data_Set iFile to hoOwner
37969>>>>>>>        If not hoOwner ;            Function_Return 0
37972>>>>>>>        
37972>>>>>>>        Get File_Field_Index iFile iField to iIndex
37973>>>>>>>        Get IsCommitted of hoOwner to bIsCommitted
37974>>>>>>>        If bIsCommitted Begin
37976>>>>>>>            Get IsFieldCommitted of hoOwner iField to bIsCommitted
37977>>>>>>>            If bIsCommitted Begin
37979>>>>>>>                Move True to bNoEnter
37980>>>>>>>                If (iIndex<>-1) Begin
37982>>>>>>>                    Get Field_CommitNoEnterOnIndex iField to bNoEnter
37983>>>>>>>                End
37983>>>>>>>>
37983>>>>>>>                // if committed, it is noput and, if non-indexed, also noenter
37983>>>>>>>                Move (If(bNoEnter,DD_DISPLAYONLY,DD_NOPUT)) to iNewOpts
37984>>>>>>>            End
37984>>>>>>>>
37984>>>>>>>        End
37984>>>>>>>>
37984>>>>>>>        // if a finding parent field, we want to know if you are allowed to switch parents as we will assume
37984>>>>>>>        // that this field is used for finding.
37984>>>>>>>        If (hoOwner<>Self and iIndex>-1) Begin
37986>>>>>>>            Get AllowParentFind of hoOwner to bIsCommitted
37987>>>>>>>            If not bIsCommitted Begin
37989>>>>>>>                Move DD_DISPLAYONLY to iNewOpts
37990>>>>>>>            End
37990>>>>>>>>
37990>>>>>>>        End
37990>>>>>>>>
37990>>>>>>>        
37990>>>>>>>        Function_Return iNewOpts
37991>>>>>>>    End_Function
37992>>>>>>>    
37992>>>>>>>    // Returns the current field-field options based on regular options, foreign field status
37992>>>>>>>    // plus committed record status
37992>>>>>>>    Function File_Field_DynamicEntryOptions Integer iFile Integer iField Returns Integer
37994>>>>>>>        Integer iCOpts iFOpts
37994>>>>>>>        If (iFile=0) Begin
37996>>>>>>>            Function_Return 0
37997>>>>>>>        End
37997>>>>>>>>
37997>>>>>>>        Get File_Field_Options iFile iField to iFOpts            // regular options (handles regular and foreign)
37998>>>>>>>        Get File_Field_Committed_Options iFile iField to iCOpts  // possible NoPut, NoEnter additions
37999>>>>>>>        Function_Return (iFOpts ior iCOpts)
38000>>>>>>>    End_Function
38001>>>>>>>    
38001>>>>>>>    Function DDRememberedFieldIndex Integer iField Returns Integer
38003>>>>>>>        tDDRemembered[] DefaultValues
38003>>>>>>>        tDDRemembered[] DefaultValues
38004>>>>>>>        tDDRemembered SearchItem
38004>>>>>>>        tDDRemembered SearchItem
38004>>>>>>>        Integer iIndex
38004>>>>>>>        Get pDDDefaults to DefaultValues
38005>>>>>>>        Move iField to SearchItem.iField
38006>>>>>>>        Move (SearchArray(SearchItem,DefaultValues)) to iIndex
38007>>>>>>>        Function_Return iIndex
38008>>>>>>>    End_Function
38009>>>>>>>    
38009>>>>>>>    // Interface used to set or clear a dynamic default (remembered) value for a DD field. If the
38009>>>>>>>    // value passed is empty ("" or as empty as defined by the data-type) it is cleared. If the value
38009>>>>>>>    // is DD_RememberLast, it will use the last value before a clear as the default, else it uses the
38009>>>>>>>    // passed value as the default
38009>>>>>>>    Procedure Set Field_RememberedValue Integer iField String sValue
38011>>>>>>>        tDDRemembered[] DefaultValues
38011>>>>>>>        tDDRemembered[] DefaultValues
38012>>>>>>>        Integer iIndex
38012>>>>>>>        Boolean bNull
38012>>>>>>>        Get DDRememberedFieldIndex iField to iIndex
38013>>>>>>>        Get pDDDefaults to DefaultValues
38014>>>>>>>        If (sValue<>DD_RememberLast) Begin // if it is rememberlast, we know it is not null
38016>>>>>>>            Get IsEmptyField iField sValue to bNull
38017>>>>>>>        End
38017>>>>>>>>
38017>>>>>>>        If (not(bNull)) Begin
38019>>>>>>>            If (iIndex=-1) Begin
38021>>>>>>>                Move (SizeOfArray(DefaultValues)) to iIndex
38022>>>>>>>                Move iField to DefaultValues[iIndex].iField
38023>>>>>>>            End
38023>>>>>>>>
38023>>>>>>>            Move sValue to DefaultValues[iIndex].sDefault
38024>>>>>>>            Set pDDDefaults to DefaultValues
38025>>>>>>>        End
38025>>>>>>>>
38025>>>>>>>        Else If  (iIndex<>-1) Begin
38028>>>>>>>            Set pDDDefaults to (RemoveFromArray(DefaultValues,iIndex))
38029>>>>>>>        End
38029>>>>>>>>
38029>>>>>>>    End_Procedure
38030>>>>>>>    
38030>>>>>>>    // get the remembered value as per rules above
38030>>>>>>>    Function Field_RememberedValue Integer iField Returns String
38032>>>>>>>        tDDRemembered[] DefaultValues
38032>>>>>>>        tDDRemembered[] DefaultValues
38033>>>>>>>        Integer iIndex
38033>>>>>>>        Get DDRememberedFieldIndex iField to iIndex
38034>>>>>>>        If (iIndex<>-1) Begin
38036>>>>>>>            Get pDDDefaults to DefaultValues
38037>>>>>>>            Function_Return DefaultValues[iIndex].sDefault
38038>>>>>>>        End
38038>>>>>>>>
38038>>>>>>>        Function_Return ''
38039>>>>>>>    End_Function
38040>>>>>>>    
38040>>>>>>>    Procedure AssignDynamicDefaults
38042>>>>>>>        Integer iField iFields iFile
38042>>>>>>>        tDDRemembered[] DefaultValues
38042>>>>>>>        tDDRemembered[] DefaultValues
38043>>>>>>>        Boolean bMain
38043>>>>>>>        String sValue
38043>>>>>>>        
38043>>>>>>>        Get Main_File to iFile
38044>>>>>>>        Get pDDDefaults to DefaultValues
38045>>>>>>>        Move (SizeOfArray(DefaultValues)) to iFields
38046>>>>>>>        For iField from 0 to (iFields-1)
38052>>>>>>>>
38052>>>>>>>            If ( DefaultValues[iField].sDefault<>"") Begin
38054>>>>>>>                If (DefaultValues[iField].sDefault=DD_RememberLast) Begin
38056>>>>>>>                    Move DefaultValues[iField].sLastValue to sValue
38057>>>>>>>                End
38057>>>>>>>>
38057>>>>>>>                Else Begin
38058>>>>>>>                    Move DefaultValues[iField].sDefault to sValue
38059>>>>>>>                End
38059>>>>>>>>
38059>>>>>>>                Set Field_Changed_Value DefaultValues[iField].iField to sValue
38060>>>>>>>            End
38060>>>>>>>>
38060>>>>>>>        Loop
38061>>>>>>>>
38061>>>>>>>    End_Procedure
38062>>>>>>>    
38062>>>>>>>    // Clears all remembered defaults for this DD.
38062>>>>>>>    Procedure ClearRememberedDefaults
38064>>>>>>>        tDDRemembered[] DefaultValues
38064>>>>>>>        tDDRemembered[] DefaultValues
38065>>>>>>>        Set pDDDefaults to DefaultValues
38066>>>>>>>    End_Procedure
38067>>>>>>>    
38067>>>>>>>    Procedure PrivateClearAllRememberedDefaults
38069>>>>>>>        Integer iCount iMax
38069>>>>>>>        Handle hoDD
38069>>>>>>>        Boolean bVisisted
38069>>>>>>>        
38069>>>>>>>        Set Visited_State to True
38070>>>>>>>        
38070>>>>>>>        Get Data_Set_Server_Count to iMax
38071>>>>>>>        Decrement iMax
38072>>>>>>>        For iCount from 0 to iMax
38078>>>>>>>>
38078>>>>>>>            Get Data_Set_Server iCount to hoDD
38079>>>>>>>            Get Visited_State of hoDD to bVisisted
38080>>>>>>>            If not (bVisisted) Begin
38082>>>>>>>                Send PrivateClearAllRememberedDefaults of hoDD
38083>>>>>>>            End
38083>>>>>>>>
38083>>>>>>>        Loop
38084>>>>>>>>
38084>>>>>>>        
38084>>>>>>>        Send ClearRememberedDefaults
38085>>>>>>>        
38085>>>>>>>        Get Data_Set_Client_Count to iMax
38086>>>>>>>        Decrement iMax
38087>>>>>>>        For iCount from 0 to iMax
38093>>>>>>>>
38093>>>>>>>            Get Data_Set_Client iCount to hoDD
38094>>>>>>>            Get Visited_State of hoDD to bVisisted
38095>>>>>>>            If not (bVisisted) Begin
38097>>>>>>>                Send PrivateClearAllRememberedDefaults of hoDD
38098>>>>>>>            End
38098>>>>>>>>
38098>>>>>>>        Loop
38099>>>>>>>>
38099>>>>>>>        
38099>>>>>>>    End_Procedure
38100>>>>>>>    
38100>>>>>>>    // Clears all remembered defaults for all DDs in this structure.
38100>>>>>>>    Procedure ClearAllRememberedDefaults
38102>>>>>>>        Send InitializeAllVisited
38103>>>>>>>        Send PrivateClearAllRememberedDefaults
38104>>>>>>>    End_Procedure
38105>>>>>>>    
38105>>>>>>>    // This is called after a clear or clear all is sent to this DD. It does autofinds as needed
38105>>>>>>>    // for any parent DDs. It does this if the parent is not a relates to contraining parent, if
38105>>>>>>>    // a field has an index, it has a changed value and it is autofind or autofind_ge.
38105>>>>>>>    Procedure DefaultParentAutofinds
38107>>>>>>>        Integer i iServers iField iFields iFile iIndex iOpts
38107>>>>>>>        Boolean bDoAutoFind bRelates bIsEmptyField
38107>>>>>>>        String sValue
38107>>>>>>>        Handle hoServer
38107>>>>>>>        Get Data_Set_Server_Count to iServers
38108>>>>>>>        For i from 0 to (iServers-1)
38114>>>>>>>>
38114>>>>>>>            Get Data_Set_Server i to hoServer
38115>>>>>>>            Get Main_File of hoServer to iFile
38116>>>>>>>            Get IsRelatesToConstrained iFile to bRelates
38117>>>>>>>            // never autofind on a relates-to constraining parent
38117>>>>>>>            If not (bRelates) Begin
38119>>>>>>>                
38119>>>>>>>                Get Field_Count of hoServer to iFields
38120>>>>>>>                Move False to bDoAutoFind
38121>>>>>>>                Move 1 to iField
38122>>>>>>>                While (not(bDoAutoFind) and (iField<=iFields))
38126>>>>>>>                    Get_Attribute DF_FIELD_INDEX of iFile iField to iIndex
38129>>>>>>>                    If (iIndex>0) Begin
38131>>>>>>>                        Get Field_Changed_State of hoServer iField to bDoAutoFind
38132>>>>>>>                        If bDoAutoFind Begin
38134>>>>>>>                            Get Field_Current_Value of hoServer iField to sValue
38135>>>>>>>                            Get IsEmptyField of hoServer iField sValue to bIsEmptyField
38136>>>>>>>                            Move (not(bIsEmptyField)) to bDoAutoFind
38137>>>>>>>                            If bDoAutoFind Begin
38139>>>>>>>                                Get File_Field_Options iFile iField to iOpts
38140>>>>>>>                                // if this is a retain or retainall we don't do this because we want
38140>>>>>>>                                // to maintain backwards compatibility
38140>>>>>>>                                Move ( (iOpts iand DD_AUTOFIND or iOpts iand DD_AUTOFIND_GE) and ;                                    not( iOpts iand DD_RETAIN or iOpts iand DD_RETAINALL) ) to bDoAutoFind
38141>>>>>>>                                If bDoAutoFind Begin
38143>>>>>>>                                    Send File_Field_Default_AutoFind iFile iField
38144>>>>>>>                                    Set Changed_State to False // clears parent changed state
38145>>>>>>>                                End
38145>>>>>>>>
38145>>>>>>>                            End
38145>>>>>>>>
38145>>>>>>>                        End
38145>>>>>>>>
38145>>>>>>>                    End
38145>>>>>>>>
38145>>>>>>>                    Increment iField
38146>>>>>>>                Loop
38147>>>>>>>>
38147>>>>>>>                
38147>>>>>>>                // Only check for grandparent autofinds if this parent did not do a an autofind
38147>>>>>>>                // Doing an autofind on an autofind parent's parent is just too confusing
38147>>>>>>>                If not bDoAutoFind Begin
38149>>>>>>>                    Send DefaultParentAutofinds of hoServer
38150>>>>>>>                End
38150>>>>>>>>
38150>>>>>>>            End
38150>>>>>>>>
38150>>>>>>>        Loop
38151>>>>>>>>
38151>>>>>>>    End_Procedure
38152>>>>>>>    
38152>>>>>>>    // Set this DD to be an alias, passing the file number of the alias
38152>>>>>>>    // This can only be called once per instance and the Main_File must already have been set
38152>>>>>>>    // most likely in a superclass.
38152>>>>>>>    // This sets Main_File to the alias, stores the original master file (accessed via MasterForAlias).
38152>>>>>>>    // It also clears all existing relatonships. Normally we expect the alias class to set
38152>>>>>>>    // sets pbUseDDRelates and pbNoCascadeDeleteStrict to true. We don't do that automatically so that
38152>>>>>>>    // the Studio's property panel will show the correct values. When an alias is defined using the
38152>>>>>>>    // studio it will set these two properties.
38152>>>>>>>    // This means you must set any required relationships yourself
38152>>>>>>>    Procedure Set Alias_File Integer iTable
38154>>>>>>>        Integer iMain iMaster iFieldsM iFieldsA
38154>>>>>>>        Get Main_File to iMain
38155>>>>>>>        Get MasterForAlias to iMaster
38156>>>>>>>        
38156>>>>>>>        If (iTable=0 and iMaster) Begin
38158>>>>>>>            Error DFERR_PROGRAM "Cannot unset alias table"
38159>>>>>>>>
38159>>>>>>>            Procedure_Return
38160>>>>>>>        End
38160>>>>>>>>
38160>>>>>>>        If (iTable=iMain) Begin
38162>>>>>>>            Error DFERR_PROGRAM "Cannot set alias table to self"
38163>>>>>>>>
38163>>>>>>>            Procedure_Return
38164>>>>>>>        End
38164>>>>>>>>
38164>>>>>>>        If (iMaster) Begin
38166>>>>>>>            Error DFERR_PROGRAM "Cannot redefine alias table"
38167>>>>>>>>
38167>>>>>>>            Procedure_Return
38168>>>>>>>        End
38168>>>>>>>>
38168>>>>>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iMain to iFieldsM
38171>>>>>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iTable to iFieldsA
38174>>>>>>>        If (iFieldsA<>iFieldsM) Begin
38176>>>>>>>            Error DFERR_PROGRAM "Alias and Master file are not based on the same table"
38177>>>>>>>>
38177>>>>>>>            Procedure_Return
38178>>>>>>>        End
38178>>>>>>>>
38178>>>>>>>        
38178>>>>>>>        Set piMasterTable to iMain
38179>>>>>>>        Set Main_File to iTable
38180>>>>>>>        Send DefineAsAlias
38181>>>>>>>    End_Procedure
38182>>>>>>>    
38182>>>>>>>    Procedure DefineAsAlias
38184>>>>>>>        Integer i iFile
38184>>>>>>>        
38184>>>>>>>        // We expect he developer to set these properties to True
38184>>>>>>>        //Set pbUseDDRelates to True
38184>>>>>>>        //Set pbNoCascadeDeleteStrict to True
38184>>>>>>>        
38184>>>>>>>        Send ClearDDRelates
38185>>>>>>>        Get Client_File_Count to i
38186>>>>>>>        While i
38190>>>>>>>            Decrement i
38191>>>>>>>            Get Client_File i to iFile
38192>>>>>>>            Send Remove_Client_File iFile
38193>>>>>>>        Loop
38194>>>>>>>>
38194>>>>>>>        Get Server_File_Count to i
38195>>>>>>>        While i
38199>>>>>>>            Decrement i
38200>>>>>>>            Get Server_File i to iFile
38201>>>>>>>            Send Remove_Server_File iFile
38202>>>>>>>        Loop
38203>>>>>>>>
38203>>>>>>>    End_Procedure
38204>>>>>>>    
38204>>>>>>>    Function MasterForAlias Returns Integer
38206>>>>>>>        Integer iMaster
38206>>>>>>>        Get piMasterTable to iMaster
38207>>>>>>>        Function_Return iMaster
38208>>>>>>>    End_Function
38209>>>>>>>    
38209>>>>>>>    Function IsAlias Returns Boolean
38211>>>>>>>        Integer iMaster
38211>>>>>>>        Get piMasterTable to iMaster
38212>>>>>>>        Function_Return (iMaster<>0)
38213>>>>>>>    End_Function
38214>>>>>>>    
38214>>>>>>>    
38214>>>>>>>    Procedure OnSaveRecord
38216>>>>>>>    End_Procedure
38217>>>>>>>    
38217>>>>>>>    Procedure StoreDefaultSQLFilters
38219>>>>>>>        Handle hoSQLHelper
38219>>>>>>>        Get phoSQLHelper to hoSQLHelper
38220>>>>>>>        Send StoreDefaultSQLFilters of hoSQLHelper
38221>>>>>>>    End_Procedure
38222>>>>>>>    
38222>>>>>>>    Procedure RestoreDefaultSQLFilters
38224>>>>>>>        Handle hoSQLHelper
38224>>>>>>>        Get phoSQLHelper to hoSQLHelper
38225>>>>>>>        Send RestoreDefaultSQLFilters of hoSQLHelper
38226>>>>>>>    End_Procedure
38227>>>>>>>    
38227>>>>>>>    Procedure ApplySQLFilterStr String sFilter
38229>>>>>>>        Handle hoSQLHelper
38229>>>>>>>        Get phoSQLHelper to hoSQLHelper
38230>>>>>>>        Send ApplySQLFilterStr of hoSQLHelper sFilter
38231>>>>>>>    End_Procedure
38232>>>>>>>    
38232>>>>>>>    Procedure ApplySQLFilter
38234>>>>>>>        String sNewFilter sOldFilter
38234>>>>>>>        Boolean bApplyGlobalSQLFilters bOldFilterActive
38234>>>>>>>        Get psSQLFilter to sNewFilter
38235>>>>>>>        // if we have am active  table filter we can either ignore it or and it to the where clause
38235>>>>>>>        // pbApplyGlobalSQLFilters determines what to do.
38235>>>>>>>        Get pbApplyGlobalSQLFilters to bApplyGlobalSQLFilters
38236>>>>>>>        Get pbOldFilterActive to bOldFilterActive
38237>>>>>>>        If (bApplyGlobalSQLFilters and bOldFilterActive) Begin
38239>>>>>>>            Get psOldFilter to sOldFilter
38240>>>>>>>            Get SQLStrAppend sOldFilter sNewFilter to sNewFilter
38241>>>>>>>        End
38241>>>>>>>>
38241>>>>>>>        Send ApplySQLFilterStr sNewFilter
38242>>>>>>>    End_Procedure
38243>>>>>>>    
38243>>>>>>>    Procedure Data_Set_PreFind
38245>>>>>>>        Boolean bUseDDSQLFilters
38245>>>>>>>        String sOldDDFilter
38245>>>>>>>        Get pbUseDDSQLFilters to bUseDDSQLFilters
38246>>>>>>>        If bUseDDSQLFilters Begin
38248>>>>>>>            
38248>>>>>>>            Send StoreDefaultSQLFilters
38249>>>>>>>            
38249>>>>>>>            // this can get called during cascade deletes. In such a case we will
38249>>>>>>>            // never explicitly not apply an SQL filters because it could violate relational integrity
38249>>>>>>>            If (OPERATION_MODE=MODE_DELETING) Begin
38251>>>>>>>                Get psSQLFilter to sOldDDFilter
38252>>>>>>>                Set psSQLFilter to "" // make sure there is no filter applied
38253>>>>>>>            End
38253>>>>>>>>
38253>>>>>>>            
38253>>>>>>>            Send ApplySQLFilter
38254>>>>>>>            
38254>>>>>>>            If (OPERATION_MODE=MODE_DELETING) Begin
38256>>>>>>>                Set psSQLFilter to sOldDDFilter
38257>>>>>>>            End
38257>>>>>>>>
38257>>>>>>>        End
38257>>>>>>>>
38257>>>>>>>    End_Procedure
38258>>>>>>>    
38258>>>>>>>    Procedure Data_Set_PostFind
38260>>>>>>>        Boolean bUseDDSQLFilters
38260>>>>>>>        Get pbUseDDSQLFilters to bUseDDSQLFilters
38261>>>>>>>        If bUseDDSQLFilters Begin
38263>>>>>>>            Send RestoreDefaultSQLFilters
38264>>>>>>>        End
38264>>>>>>>>
38264>>>>>>>    End_Procedure
38265>>>>>>>    
38265>>>>>>>    
38265>>>>>>>    // returns active constraints in atConstraintDef array.
38265>>>>>>>    // Should be called after constraints are built
38265>>>>>>>    // typically right after Rebuild_Constraints
38265>>>>>>>    
38265>>>>>>>    Function DDOConstraints Returns tConstraintDef[]
38267>>>>>>>        tConstraintDef[] Constraints
38267>>>>>>>        tConstraintDef[] Constraints
38268>>>>>>>        Integer i iCount i1
38268>>>>>>>        Get DATA_SET_CONSTRAINT_COUNT to iCount
38269>>>>>>>        For i from 0 to (iCount-1)
38275>>>>>>>>
38275>>>>>>>            Get DATA_SET_CONSTRAINT_INFO i 0 to i1 // type / mode
38276>>>>>>>            Move (Hi(i1)) to  Constraints[i].eType
38277>>>>>>>            Move (Low(i1)) to  Constraints[i].eMode
38278>>>>>>>            Get DATA_SET_CONSTRAINT_INFO i 1 to i1 // file / field
38279>>>>>>>            Move (Hi(i1)) to  Constraints[i].iFile
38280>>>>>>>            Move (Low(i1)) to  Constraints[i].iField
38281>>>>>>>            Get DATA_SET_CONSTRAINT_INFO i 2 to i1 // other file /field
38282>>>>>>>            Move (Hi(i1)) to  Constraints[i].iOtherFile
38283>>>>>>>            Move (Low(i1)) to  Constraints[i].iOtherField
38284>>>>>>>            Get DATA_SET_CONSTRAINT_INFO_Value i  to Constraints[i].sValue
38285>>>>>>>        Loop
38286>>>>>>>>
38286>>>>>>>        Function_Return Constraints
38287>>>>>>>    End_Function
38288>>>>>>>    
38288>>>>>>>    // returns constraint finding information about the current find. This tells us what kinds
38288>>>>>>>    // of constraint find "expressions" are used. This will actually do a cosntrained find
38288>>>>>>>    // initialization much like Establish_Find_Direction, which means it can change the values in
38288>>>>>>>    // the file buffer to assist with a jump-in.
38288>>>>>>>    Function DDOConstraintFindMeta Integer eMode Integer iOrder Returns tDDOConstraintFindMeta
38290>>>>>>>        tDDOConstraintFindMeta FindMeta
38290>>>>>>>        tDDOConstraintFindMeta FindMeta
38290>>>>>>>        Integer i
38290>>>>>>>        Get Data_Set_Constraint_Exps eMode iOrder to i
38291>>>>>>>        Move (Hi(i)) to FindMeta.iJumpInSegments
38292>>>>>>>        Move (i iand CONST_EXP_JUMPOUT) to FindMeta.bJumpOut
38293>>>>>>>        Move (i iand CONST_EXP_PRE_RELATE) to FindMeta.bPreRelate
38294>>>>>>>        Move (i iand CONST_EXP_POST_RELATE) to FindMeta.bPostRelate
38295>>>>>>>        Function_Return FindMeta
38296>>>>>>>    End_Function
38297>>>>>>>    
38297>>>>>>>    // this tells you if the current find or read requires a relate to evaluate the DF constraint.
38297>>>>>>>    // If false you could use this to set no_relate_state to false for the find/read process and then
38297>>>>>>>    // restore it when complete. Be careful using this.
38297>>>>>>>    Function DDOConstraintNeedsRelate Integer iOrder Returns Boolean
38299>>>>>>>        tDDOConstraintFindMeta FindMeta
38299>>>>>>>        tDDOConstraintFindMeta FindMeta
38299>>>>>>>        Get DDOConstraintFindMeta (GE) iOrder to FindMeta
38300>>>>>>>        Function_Return FindMeta.bPostRelate
38301>>>>>>>    End_Function
38302>>>>>>>    
38302>>>>>>>    // returns true if this table supports SQL filter interface
38302>>>>>>>    Function SupportsSQLFilters Returns Boolean
38304>>>>>>>        Boolean bSupports
38304>>>>>>>        Handle hoSQLHelper
38304>>>>>>>        Get phoSQLHelper to hoSQLHelper
38305>>>>>>>        Get SupportsSQLFilters of hoSQLHelper to bSupports
38306>>>>>>>        Function_Return bSupports
38307>>>>>>>    End_Function
38308>>>>>>>    
38308>>>>>>>    // SQL Helper functions that return SQL Filters strings that can be used in a where clause
38308>>>>>>>    
38308>>>>>>>    // Creates an SQL Like Filter for this field and search target
38308>>>>>>>    Function SQLStrLike Integer iField String sSearch Returns String
38310>>>>>>>        String sFilter
38310>>>>>>>        Handle hoSQLHelper
38310>>>>>>>        Get phoSQLHelper to hoSQLHelper
38311>>>>>>>        Get SQLStrLike of hoSQLHelper iField sSearch to sFilter
38312>>>>>>>        Function_Return sFilter
38313>>>>>>>    End_Function
38314>>>>>>>    
38314>>>>>>>    // Appends two Filters with an AND clause. Both or either can be empty
38314>>>>>>>    Function SQLStrAppend String sOrigFilter String sFilter Returns String
38316>>>>>>>        Handle hoSQLHelper
38316>>>>>>>        Get phoSQLHelper to hoSQLHelper
38317>>>>>>>        Get SQLStrAppend of hoSQLHelper sOrigFilter sFilter to sFilter
38318>>>>>>>        Function_Return sFilter
38319>>>>>>>    End_Function
38320>>>>>>>    
38320>>>>>>>    // Appends two Filters with an AND clause. Both or either can be empty
38320>>>>>>>    Function SQLStrAppendOr String sOrigFilter String sFilter Returns String
38322>>>>>>>        Handle hoSQLHelper
38322>>>>>>>        Get phoSQLHelper to hoSQLHelper
38323>>>>>>>        Get SQLStrAppendOr of hoSQLHelper sOrigFilter sFilter to sFilter
38324>>>>>>>        Function_Return sFilter
38325>>>>>>>    End_Function
38326>>>>>>>
38326>>>>>>>    // returns the name of the File and Field suitable for an SQL where statement
38326>>>>>>>    Function SQLStrFileFieldName Integer iField Returns String
38328>>>>>>>        String sName
38328>>>>>>>        Handle hoSQLHelper
38328>>>>>>>        Get phoSQLHelper to hoSQLHelper
38329>>>>>>>        Get SQLStrFileFieldName of hoSQLHelper iField to sName
38330>>>>>>>        Function_Return sName
38331>>>>>>>    End_Function
38332>>>>>>>
38332>>>>>>>    // returns the name of the Field suitable for an SQL where statement
38332>>>>>>>    Function SQLStrFieldName Integer iField Returns String
38334>>>>>>>        String sName
38334>>>>>>>        Handle hoSQLHelper
38334>>>>>>>        Get phoSQLHelper to hoSQLHelper
38335>>>>>>>        Get SQLStrFieldName of hoSQLHelper iField to sName
38336>>>>>>>        Function_Return sName
38337>>>>>>>    End_Function
38338>>>>>>>
38338>>>>>>>    // returns the name of the Schema and File and Field suitable for an SQL where statement
38338>>>>>>>    Function SQLStrSchemaFileFieldName Integer iField Returns String
38340>>>>>>>        String sName
38340>>>>>>>        Handle hoSQLHelper
38340>>>>>>>        Get phoSQLHelper to hoSQLHelper
38341>>>>>>>        Get SQLStrSchemaFileFieldName of hoSQLHelper iField to sName
38342>>>>>>>        Function_Return sName
38343>>>>>>>    End_Function
38344>>>>>>>    
38344>>>>>>>    //  returns the name of a file suitable for a SQL statement
38344>>>>>>>    Function SQLStrFileName Integer iField Returns String
38346>>>>>>>        String sName
38346>>>>>>>        Handle hoSQLHelper
38346>>>>>>>        Get phoSQLHelper to hoSQLHelper
38347>>>>>>>        Get SQLStrFileName of hoSQLHelper iField to sName
38348>>>>>>>        Function_Return sName
38349>>>>>>>    End_Function
38350>>>>>>>    
38350>>>>>>>    // creates escaped SQL string by replacing single quote with two single quotes
38350>>>>>>>    Function SQLEscapedStr String sSQL Returns String
38352>>>>>>>        Handle hoSQLHelper
38352>>>>>>>        Get phoSQLHelper to hoSQLHelper
38353>>>>>>>        Get SQLEscapedStr of hoSQLHelper sSQL to sSQL
38354>>>>>>>        Function_Return sSQL
38355>>>>>>>    End_Function
38356>>>>>>>    
38356>>>>>>>    // Returns:
38356>>>>>>>    //       The record id string based on piPrimaryIndex.
38356>>>>>>>    Function PrimaryRecordId Returns String
38358>>>>>>>        Integer iIndex iFile iSegments iSegment iField
38358>>>>>>>        String sVal sId
38358>>>>>>>        
38358>>>>>>>        Get Main_File to iFile
38359>>>>>>>        Get piPrimaryIndex to iIndex
38360>>>>>>>        
38360>>>>>>>        If (iIndex < 0) Begin
38362>>>>>>>            Get_Attribute DF_FILE_PRIMARY_INDEX of iFile to iIndex
38365>>>>>>>        End
38365>>>>>>>>
38365>>>>>>>        
38365>>>>>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of iFile iIndex to iSegments
38368>>>>>>>        For iSegment from 1 to iSegments
38374>>>>>>>>
38374>>>>>>>            Get_Attribute DF_INDEX_SEGMENT_FIELD of iFile iIndex iSegment to iField
38377>>>>>>>            
38377>>>>>>>            Get_Field_Value iFile iField to sVal
38380>>>>>>>            Move (Trim(sVal)) to sVal
38381>>>>>>>            
38381>>>>>>>            //  Encode join sign for multi segment indexes
38381>>>>>>>            If (iSegments > 1) Begin
38383>>>>>>>                Move (Replaces("_", sVal, "~5F~")) to sVal
38384>>>>>>>            End
38384>>>>>>>>
38384>>>>>>>            
38384>>>>>>>            If (iSegment = 1) Begin
38386>>>>>>>                Move sVal to sId
38387>>>>>>>            End
38387>>>>>>>>
38387>>>>>>>            Else Begin
38388>>>>>>>                Move (sId + "_" + sVal) to sId
38389>>>>>>>            End
38389>>>>>>>>
38389>>>>>>>            
38389>>>>>>>        Loop
38390>>>>>>>>
38390>>>>>>>        
38390>>>>>>>        Function_Return sId
38391>>>>>>>    End_Function
38392>>>>>>>    
38392>>>>>>>    
38392>>>>>>>    // Finds a record on the global buffer based on the record id.
38392>>>>>>>    //
38392>>>>>>>    // Params:
38392>>>>>>>    //       sRecordId   Record id generated by PrimaryRecordId.
38392>>>>>>>    Function FindByPrimaryRecordId String sRecordId Returns Boolean
38394>>>>>>>        Integer iIndex iFile iSegments iSegment iField
38394>>>>>>>        String[] aValues
38395>>>>>>>        String sVal
38395>>>>>>>        Boolean bTrapped
38395>>>>>>>        
38395>>>>>>>        Get Main_File to iFile
38396>>>>>>>        Get piPrimaryIndex to iIndex
38397>>>>>>>        
38397>>>>>>>        If (iIndex < 0) Begin
38399>>>>>>>            Get_Attribute DF_FILE_PRIMARY_INDEX of iFile to iIndex
38402>>>>>>>        End
38402>>>>>>>>
38402>>>>>>>        
38402>>>>>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of iFile iIndex to iSegments
38405>>>>>>>        
38405>>>>>>>        If (iSegments > 1) Begin
38407>>>>>>>            Move (StrSplitToArray(sRecordId, "_")) to aValues
38408>>>>>>>        End
38408>>>>>>>>
38408>>>>>>>        Else Begin
38409>>>>>>>            Move sRecordId to aValues[0]
38410>>>>>>>        End
38410>>>>>>>>
38410>>>>>>>        
38410>>>>>>>        If (iSegments = SizeOfArray(aValues)) Begin
38412>>>>>>>            Clear iFile
38413>>>>>>>            
38413>>>>>>>            Send Ignore_Error of Error_Object_Id 56
38414>>>>>>>            Send Ignore_Error of Error_Object_Id 11
38415>>>>>>>            
38415>>>>>>>            For iSegment from 1 to iSegments
38421>>>>>>>>
38421>>>>>>>                Get_Attribute DF_INDEX_SEGMENT_FIELD of iFile iIndex iSegment to iField
38424>>>>>>>                
38424>>>>>>>                Move aValues[iSegment - 1] to sVal
38425>>>>>>>                If (iSegments > 1) Begin
38427>>>>>>>                    Move (Replaces("~5F~", sVal, "_")) to sVal
38428>>>>>>>                End
38428>>>>>>>>
38428>>>>>>>                
38428>>>>>>>                Set_Field_Value iFile iField to sVal
38431>>>>>>>            Loop
38432>>>>>>>>
38432>>>>>>>            Send Trap_Error of Error_Object_Id 56
38433>>>>>>>            Send Trap_Error of Error_Object_Id 11
38434>>>>>>>            
38434>>>>>>>            Vfind iFile iIndex EQ
38436>>>>>>>            
38436>>>>>>>            Function_Return (Found)
38437>>>>>>>        End
38437>>>>>>>>
38437>>>>>>>        
38437>>>>>>>        Function_Return False
38438>>>>>>>    End_Function
38439>>>>>>>    
38439>>>>>>>    // Converts a RecordId to a RowId by finding it on the global buffer.
38439>>>>>>>    //
38439>>>>>>>    // Params:
38439>>>>>>>    //       sRecordId   Record id based on piPrimaryIndex.
38439>>>>>>>    //       rRowId      (ByRef) Will be filled with the rowid.
38439>>>>>>>    // Returns:
38439>>>>>>>    //       True if the record id was valid.
38439>>>>>>>    Function RecordIdToRowId String sRecordId RowID ByRef rRowId Returns Boolean
38441>>>>>>>        Boolean bFound
38441>>>>>>>        
38441>>>>>>>        Get FindByPrimaryRecordId sRecordId to bFound
38442>>>>>>>        If (bFound) Begin
38444>>>>>>>            Move (GetRowID(Main_File(Self))) to rRowId
38445>>>>>>>        End
38445>>>>>>>>
38445>>>>>>>        Else Begin
38446>>>>>>>            Move (NullRowID()) to rRowId
38447>>>>>>>        End
38447>>>>>>>>
38447>>>>>>>        
38447>>>>>>>        Function_Return bFound
38448>>>>>>>    End_Function
38449>>>>>>>    
38449>>>>>>>    // Converts a RowId into a record ID. Note that it performs a find on the global buffer.
38449>>>>>>>    //
38449>>>>>>>    // Params:
38449>>>>>>>    //       riRowId     RowID.
38449>>>>>>>    // Returns:
38449>>>>>>>    //       Record id based on piPrimaryIndex.
38449>>>>>>>    Function RowIdToRecordId RowID riRowId Returns String
38451>>>>>>>        Boolean bFound
38451>>>>>>>        String sRecId
38451>>>>>>>        
38451>>>>>>>        If (not(IsNullRowID(riRowId))) Begin
38453>>>>>>>            Move (FindByRowID(Main_File(Self), riRowId)) to bFound
38454>>>>>>>            
38454>>>>>>>            If (bFound) Begin
38456>>>>>>>                Get PrimaryRecordId to sRecId
38457>>>>>>>            End
38457>>>>>>>>
38457>>>>>>>        End
38457>>>>>>>>
38457>>>>>>>        
38457>>>>>>>        Function_Return sRecId
38458>>>>>>>    End_Function
38459>>>>>>>End_Class
38460>>>>>>>
38460>>>>>>>// This message will be send as a notification message from an
38460>>>>>>>// Extended_Data_Set whenever a fieldvalue has been changed.
38460>>>>>>>// It has been defined FOR cUIObject or Desktop  here so that attached
38460>>>>>>>// DEO which do not know anything about Extended_Data_Sets don't get
38460>>>>>>>// frustrated.
38460>>>>>>>// All focusable objects and DEOs must understand this. This should be
38460>>>>>>>// changed at some point in the future.
38460>>>>>>>Function Extended_DEO_State for cUIObject Returns Integer
38462>>>>>>>End_Function
38463>>>>>>>
38463>>>>>>>
38463>>>>>>>// this command is now obsolete. use Set Field_auto_increment
38463>>>>>>>
38463>>>>>Use Dfcursor.pkg
38463>>>>>Use DUFStatusPanel.pkg
Including file: DUFStatusPanel.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\DUFStatusPanel.pkg)
38463>>>>>>>// StatPnl.pkg - creates the standard status_panel object.
38463>>>>>>>//
38463>>>>>>>//
38463>>>>>>>// This is the default Status Panel object used by any of the Visual DataFlex classes that
38463>>>>>>>// invoke the standard status panel. The standard has always been that the package name
38463>>>>>>>// is StatPnl.pkg and the name of the object is Status_Panel. As of 12.0, there are major
38463>>>>>>>// changes in the way the status panel operates The Sentinel based external status panel used in
38463>>>>>>>// prior revisions has been replace with status panel that is part of the application.
38463>>>>>>>// This should work much better and faster than the old sentinel based solution.
38463>>>>>>>// While the way this operates has changed, the interface has not and therefore this should work
38463>>>>>>>// with most applications.
38463>>>>>>>//
38463>>>>>>>// As of 12.0, we have added a global handle that contains the object ID of this status panel.
38463>>>>>>>// This variable ghoStatusPanel can be used in place of the object name Status_Panel. This provides
38463>>>>>>>// a cleaner more robust interface.
38463>>>>>>>//
38463>>>>>>>//
38463>>>>>>>// Compatibility Note:
38463>>>>>>>//
38463>>>>>>>// When used in the standard way, this change will require no changes. A developer will only need to
38463>>>>>>>// change their code if they've modified the sentinel program, which was a difficult thing to do.
38463>>>>>>>//
38463>>>>>>>// If for some reason you application will not work using this as a replacement for the old status
38463>>>>>>>// panel, you've probably done something special with the old status-panel. If you don't want to
38463>>>>>>>// figure out how to use the new one and you want to continue using the old one you are going to need
38463>>>>>>>// to add some code to include the old status panel in your application. Add the following to your project (your src).
38463>>>>>>>//
38463>>>>>>>// Use StatPnl.pkg    // Make sure you load the new status panel object first. this is not optional!
38463>>>>>>>// Use OldStatPnl.pkg // load the old status panel. Status_Panel is now this old object
38463>>>>>>>//
38463>>>>>>>// If you do this, you will lose access to the new status-panel via Status_Panel. However, you
38463>>>>>>>// can still access the new object via the ghoStatusPanel handle.
38463>>>>>>>//
38463>>>>>>>//
38463>>>>>>>// Creating your own Status Panel objects
38463>>>>>>>//
38463>>>>>>>// If a developer wishes to create a custom panel, they should use this package as their template.
38463>>>>>>>// This panel can be visually modeled and changed any way you wish. Just save your new custom panel
38463>>>>>>>// with a different file and object name and direct your status panel request to the new object.
38463>>>>>>>//
38463>>>>>>>// If the new panel changes the interface and updates objects that are not currently defined, you
38463>>>>>>>// want to make sure you send the message ProcessEvents after you've updated the object. This allows
38463>>>>>>>// the object to paint when inside of a tight loop. For example, if you wanted to add a progress
38463>>>>>>>// bar (cProgressBar) you would want to Send ProcessEvents after you update the progress bar.
38463>>>>>>>// e.g.
38463>>>>>>>//       Procedure UpdateStatusBar
38463>>>>>>>//           Send DoAdvance of oProgressBar
38463>>>>>>>//           Send ProcessEvents
38463>>>>>>>//       End_Procedure
38463>>>>>>>//
38463>>>>>>>// of course, if you use the standard interfaces in status bar and your forward send these
38463>>>>>>>// messages this will be done for you.
38463>>>>>>>//
38463>>>>>>>// the standard Interface for status panels are:
38463>>>>>>>//
38463>>>>>>>// Send Initialize_StatusPanel - initializes values for caption, title & message
38463>>>>>>>// Send Start_StatusPanel      - start the status panel
38463>>>>>>>// Send Stop_StatusPanel       - stop the status panel
38463>>>>>>>// Send Update_StatusPanel     - update the status panel's action area
38463>>>>>>>// Get  Check_StatusPanel      - check for cancel (if cancel or pbCancel is set, close the panel)
38463>>>>>>>//
38463>>>>>>>// Get/Set Caption_Text - updates the caption bar
38463>>>>>>>// Get/Set Title_Text   - updates the title area
38463>>>>>>>// Get/Set Message_Text - updates the Message area
38463>>>>>>>// Get/Set Action_Text  - updates the action area
38463>>>>>>>// Get/Set Button_Text  - updates the button area
38463>>>>>>>//
38463>>>>>>>// Get/Set Allow_cancel_state - determines if panel can be canceled
38463>>>>>>>// Send EnableCancelButton - code you should provide to enable/disable cancel button
38463>>>>>>>//
38463>>>>>>>// ghoStatusPanel - global handle that points to the standard status panel.
38463>>>>>>>Use cProcessStatusPanel.pkg
38463>>>>>>>Use cCJSkinFramework.pkg
Including file: cCJSkinFramework.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJSkinFramework.pkg)
38463>>>>>>>>>Use windows.pkg
38463>>>>>>>>>Use cCJComSkinFramework.pkg
Including file: cCJComSkinFramework.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJComSkinFramework.pkg)
38463>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v22.0.0\Bin\Codejock.SkinFramework.Unicode.x64.v22.0.0.ocx
38463>>>>>>>>>>>Use FlexCom20.pkg
38463>>>>>>>>>>>
38463>>>>>>>>>>>// Changes to Imported package
38463>>>>>>>>>>>//     OLEXTPxx to XTPxx
38463>>>>>>>>>>>//     OLExtpxx to xtpxx
38463>>>>>>>>>>>//     OLESkinFramework to SkinFramework
38463>>>>>>>>>>>//     OLESTDxxx and OLEXPxxxx to STD/XP
38463>>>>>>>>>>>//     cCom classes to cCJ
38463>>>>>>>>>>>//     cCJAutomationObject back to cComAutomationObject
38463>>>>>>>>>>>//     cCJActiveXControl back to cComActiveXControl
38463>>>>>>>>>>>//     cCJSkinFramework to cCJComSkinFramework
38463>>>>>>>>>>>//     Use statements as noted below (classes moved to these files)
38463>>>>>>>>>>>//     Set classlibrary of all cComAutomation objects to Windows (for class doc)
38463>>>>>>>>>>>
38463>>>>>>>>>>>// These have been extracted from this class and moved into seperate packages
38463>>>>>>>>>>>// because other Codejock classes use these.
38463>>>>>>>>>>>Use cCJColorManager.pkg     // cCJColorManager
38463>>>>>>>>>>>
38463>>>>>>>>>>>
38463>>>>>>>>>>>Define SkinFrameworkApplyOptions for Integer
38463>>>>>>>>>>>    Define xtpSkinApplyMetrics for 1
38463>>>>>>>>>>>    Define xtpSkinApplyFrame for 2
38463>>>>>>>>>>>    Define xtpSkinApplyColors for 4
38463>>>>>>>>>>>    Define xtpSkinApplyMenus for 8
38463>>>>>>>>>>>
38463>>>>>>>>>>>// CLSID: {C0DE2200-28D7-4F2C-87A7-7266367B4655}
38463>>>>>>>>>>>// Dispatch interface for SkinFramework Control
38463>>>>>>>>>>>Class cCJ_DSkinFramework is a Mixin
38464>>>>>>>>>>>
38464>>>>>>>>>>>    Function ComApplyOptions Returns SkinFrameworkApplyOptions
38466>>>>>>>>>>>        SkinFrameworkApplyOptions retVal
38466>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
38467>>>>>>>>>>>        Function_Return retVal
38468>>>>>>>>>>>    End_Function
38469>>>>>>>>>>>
38469>>>>>>>>>>>    Procedure Set ComApplyOptions SkinFrameworkApplyOptions value
38471>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
38472>>>>>>>>>>>    End_Procedure
38473>>>>>>>>>>>
38473>>>>>>>>>>>    Function ComAutoApplyNewWindows Returns Boolean
38475>>>>>>>>>>>        Boolean retVal
38475>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
38476>>>>>>>>>>>        Function_Return retVal
38477>>>>>>>>>>>    End_Function
38478>>>>>>>>>>>
38478>>>>>>>>>>>    Procedure Set ComAutoApplyNewWindows Boolean value
38480>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
38481>>>>>>>>>>>    End_Procedure
38482>>>>>>>>>>>
38482>>>>>>>>>>>    Function ComAutoApplyNewThreads Returns Boolean
38484>>>>>>>>>>>        Boolean retVal
38484>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
38485>>>>>>>>>>>        Function_Return retVal
38486>>>>>>>>>>>    End_Function
38487>>>>>>>>>>>
38487>>>>>>>>>>>    Procedure Set ComAutoApplyNewThreads Boolean value
38489>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
38490>>>>>>>>>>>    End_Procedure
38491>>>>>>>>>>>
38491>>>>>>>>>>>    Function ComLoadSkin String llResourcePath String llIniFileName Returns Boolean
38493>>>>>>>>>>>        Handle hDispatchDriver
38493>>>>>>>>>>>        Boolean retVal
38493>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38494>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38495>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llResourcePath
38496>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llIniFileName
38497>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
38498>>>>>>>>>>>        Function_Return retVal
38499>>>>>>>>>>>    End_Function
38500>>>>>>>>>>>
38500>>>>>>>>>>>    Procedure ComApplyWindow OLE_HANDLE llhWnd
38502>>>>>>>>>>>        Handle hDispatchDriver
38502>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38503>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38504>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
38505>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
38506>>>>>>>>>>>    End_Procedure
38507>>>>>>>>>>>
38507>>>>>>>>>>>    Procedure ComEnableThemeDialogTexture OLE_HANDLE llhWnd Integer llFlags
38509>>>>>>>>>>>        Handle hDispatchDriver
38509>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38510>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38511>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
38512>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llFlags
38513>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
38514>>>>>>>>>>>    End_Procedure
38515>>>>>>>>>>>
38515>>>>>>>>>>>    Procedure ComRemoveWindow OLE_HANDLE llhWnd
38517>>>>>>>>>>>        Handle hDispatchDriver
38517>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38518>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38519>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
38520>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
38521>>>>>>>>>>>    End_Procedure
38522>>>>>>>>>>>
38522>>>>>>>>>>>    Procedure ComRemoveAllWindows
38524>>>>>>>>>>>        Handle hDispatchDriver
38524>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38525>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
38526>>>>>>>>>>>    End_Procedure
38527>>>>>>>>>>>
38527>>>>>>>>>>>    Procedure ComAddWindowClass String llClassName String llBaseClassName
38529>>>>>>>>>>>        Handle hDispatchDriver
38529>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38530>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38531>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
38532>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llBaseClassName
38533>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
38534>>>>>>>>>>>    End_Procedure
38535>>>>>>>>>>>
38535>>>>>>>>>>>    Procedure ComRemoveWindowClass String llClassName
38537>>>>>>>>>>>        Handle hDispatchDriver
38537>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38538>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38539>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
38540>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
38541>>>>>>>>>>>    End_Procedure
38542>>>>>>>>>>>
38542>>>>>>>>>>>    Function ComEnumerateSkinDirectory String llPath Boolean llRecursive Returns Variant
38544>>>>>>>>>>>        Handle hDispatchDriver
38544>>>>>>>>>>>        Variant retVal
38544>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38545>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38546>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
38547>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRecursive
38548>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
38549>>>>>>>>>>>        Function_Return retVal
38550>>>>>>>>>>>    End_Function
38551>>>>>>>>>>>
38551>>>>>>>>>>>    Function ComEnumerateSkinFile String llPath Returns Variant
38553>>>>>>>>>>>        Handle hDispatchDriver
38553>>>>>>>>>>>        Variant retVal
38553>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38554>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38555>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
38556>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
38557>>>>>>>>>>>        Function_Return retVal
38558>>>>>>>>>>>    End_Function
38559>>>>>>>>>>>
38559>>>>>>>>>>>    Function ComGetColor XTPColorManagerColor llIndex Returns OLE_COLOR
38561>>>>>>>>>>>        Handle hDispatchDriver
38561>>>>>>>>>>>        OLE_COLOR retVal
38561>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38562>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38563>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
38564>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_I4 to retVal
38565>>>>>>>>>>>        Function_Return retVal
38566>>>>>>>>>>>    End_Function
38567>>>>>>>>>>>
38567>>>>>>>>>>>    Procedure ComExcludeModule String llModuleName
38569>>>>>>>>>>>        Handle hDispatchDriver
38569>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38570>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38571>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llModuleName
38572>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
38573>>>>>>>>>>>    End_Procedure
38574>>>>>>>>>>>
38574>>>>>>>>>>>    Function ComCreateSchema String llResourcePath String llIniFileName Returns Variant
38576>>>>>>>>>>>        Handle hDispatchDriver
38576>>>>>>>>>>>        Variant retVal
38576>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38577>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38578>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llResourcePath
38579>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llIniFileName
38580>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
38581>>>>>>>>>>>        Function_Return retVal
38582>>>>>>>>>>>    End_Function
38583>>>>>>>>>>>
38583>>>>>>>>>>>    Procedure ComSetWindowTheme OLE_HANDLE llhWnd Variant llSchema
38585>>>>>>>>>>>        Handle hDispatchDriver
38585>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38586>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38587>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
38588>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llSchema
38589>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
38590>>>>>>>>>>>    End_Procedure
38591>>>>>>>>>>>
38591>>>>>>>>>>>    Procedure ComAboutBox
38593>>>>>>>>>>>        Handle hDispatchDriver
38593>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38594>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
38595>>>>>>>>>>>    End_Procedure
38596>>>>>>>>>>>End_Class
38597>>>>>>>>>>>
38597>>>>>>>>>>>// CLSID: {C0DE2200-4463-4030-B324-AC6A8075FEC8}
38597>>>>>>>>>>>// Event interface for SkinFramework Control
38597>>>>>>>>>>>Class cCJ_DSkinFrameworkEvents is a Mixin
38598>>>>>>>>>>>
38598>>>>>>>>>>>    Procedure RegisterComEvents
38600>>>>>>>>>>>    End_Procedure
38601>>>>>>>>>>>End_Class
38602>>>>>>>>>>>
38602>>>>>>>>>>>// CoClass
38602>>>>>>>>>>>// ProgID: Codejock.SkinFramework.22.0.0
38602>>>>>>>>>>>// CLSID: {C0DE2200-2217-42EE-B1B0-82C890431F17}
38602>>>>>>>>>>>// SkinFramework Control
38602>>>>>>>>>>>Class cCJComSkinFramework is a cComActiveXControl
38603>>>>>>>>>>>    Import_Class_Protocol cCJ_DSkinFramework
38604>>>>>>>>>>>    Import_Class_Protocol cCJ_DSkinFrameworkEvents
38605>>>>>>>>>>>
38605>>>>>>>>>>>    Procedure Construct_Object
38607>>>>>>>>>>>        Forward Send Construct_Object
38609>>>>>>>>>>>        Set psProgID to "{C0DE2200-2217-42EE-B1B0-82C890431F17}"
38610>>>>>>>>>>>        Set psEventId to "{C0DE2200-4463-4030-B324-AC6A8075FEC8}"
38611>>>>>>>>>>>        Set psLicenseKey to ("Skin Framework Control Copyright (c) 1998-2022 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.SkinFramework.ActiveX.v22.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: GGE-OLD-QQR-EJS")
38612>>>>>>>>>>>        Set peAutoCreate to acAutoCreate
38613>>>>>>>>>>>    End_Procedure
38614>>>>>>>>>>>End_Class
38615>>>>>>>>>>>
38615>>>>>>>>>>>// CLSID: {C0DE2200-CA9A-4AA9-8601-0AB7F551AA3D}
38615>>>>>>>>>>>// SkinFramework Global Settings
38615>>>>>>>>>>>Class cCJISkinFrameworkGlobalSettings is a Mixin
38616>>>>>>>>>>>
38616>>>>>>>>>>>    Function ComLicense Returns String
38618>>>>>>>>>>>        String retVal
38618>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to retVal
38619>>>>>>>>>>>        Function_Return retVal
38620>>>>>>>>>>>    End_Function
38621>>>>>>>>>>>
38621>>>>>>>>>>>    Procedure Set ComLicense String value
38623>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to value
38624>>>>>>>>>>>    End_Procedure
38625>>>>>>>>>>>
38625>>>>>>>>>>>    Function ComTitle Returns String
38627>>>>>>>>>>>        String retVal
38627>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to retVal
38628>>>>>>>>>>>        Function_Return retVal
38629>>>>>>>>>>>    End_Function
38630>>>>>>>>>>>
38630>>>>>>>>>>>    Procedure Set ComTitle String value
38632>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to value
38633>>>>>>>>>>>    End_Procedure
38634>>>>>>>>>>>
38634>>>>>>>>>>>    // Set this value to True to force using legacy SkinFramework core that has been in use up to version 19
38634>>>>>>>>>>>    Function ComUseLegacyCore Returns Boolean
38636>>>>>>>>>>>        Boolean retVal
38636>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 110 OLE_VT_BOOL to retVal
38637>>>>>>>>>>>        Function_Return retVal
38638>>>>>>>>>>>    End_Function
38639>>>>>>>>>>>
38639>>>>>>>>>>>    // Set this value to True to force using legacy SkinFramework core that has been in use up to version 19
38639>>>>>>>>>>>    Procedure Set ComUseLegacyCore Boolean value
38641>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 110 OLE_VT_BOOL to value
38642>>>>>>>>>>>    End_Procedure
38643>>>>>>>>>>>
38643>>>>>>>>>>>    Function ComVersion Returns String
38645>>>>>>>>>>>        Handle hDispatchDriver
38645>>>>>>>>>>>        String retVal
38645>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38646>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_BSTR to retVal
38647>>>>>>>>>>>        Function_Return retVal
38648>>>>>>>>>>>    End_Function
38649>>>>>>>>>>>
38649>>>>>>>>>>>    Function ComUnicode Returns Boolean
38651>>>>>>>>>>>        Handle hDispatchDriver
38651>>>>>>>>>>>        Boolean retVal
38651>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38652>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_BOOL to retVal
38653>>>>>>>>>>>        Function_Return retVal
38654>>>>>>>>>>>    End_Function
38655>>>>>>>>>>>
38655>>>>>>>>>>>    Function ComOcxPath Returns String
38657>>>>>>>>>>>        Handle hDispatchDriver
38657>>>>>>>>>>>        String retVal
38657>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38658>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_BSTR to retVal
38659>>>>>>>>>>>        Function_Return retVal
38660>>>>>>>>>>>    End_Function
38661>>>>>>>>>>>End_Class
38662>>>>>>>>>>>
38662>>>>>>>>>>>// CoClass
38662>>>>>>>>>>>// ProgID: Codejock.SkinFrameworkGlobalSettings.22.0.0
38662>>>>>>>>>>>// CLSID: {C0DE2200-F744-4373-B38D-29CE83EF0EE5}
38662>>>>>>>>>>>// SkinFramework Global Settings
38662>>>>>>>>>>>Class cCJComSkinFrameworkGlobalSettings is a cComAutomationObject
38663>>>>>>>>>>>    Import_Class_Protocol cCJISkinFrameworkGlobalSettings
38664>>>>>>>>>>>
38664>>>>>>>>>>>    Procedure Construct_Object
38666>>>>>>>>>>>        Forward Send Construct_Object
38668>>>>>>>>>>>        Set psProgID to "{C0DE2200-F744-4373-B38D-29CE83EF0EE5}"
38669>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
38670>>>>>>>>>>>    End_Procedure
38671>>>>>>>>>>>End_Class
38672>>>>>>>>>>>
38672>>>>>>>>>>>// CLSID: {C0DE2200-1038-498E-A936-361F08B4C4AA}
38672>>>>>>>>>>>Class cCJSkinIniFile is a cComAutomationObject
38673>>>>>>>>>>>
38673>>>>>>>>>>>    Function ComColorScheme Returns String
38675>>>>>>>>>>>        String retVal
38675>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
38676>>>>>>>>>>>        Function_Return retVal
38677>>>>>>>>>>>    End_Function
38678>>>>>>>>>>>
38678>>>>>>>>>>>    Procedure Set ComColorScheme String value
38680>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
38681>>>>>>>>>>>    End_Procedure
38682>>>>>>>>>>>
38682>>>>>>>>>>>    Function ComFontSize Returns String
38684>>>>>>>>>>>        String retVal
38684>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
38685>>>>>>>>>>>        Function_Return retVal
38686>>>>>>>>>>>    End_Function
38687>>>>>>>>>>>
38687>>>>>>>>>>>    Procedure Set ComFontSize String value
38689>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
38690>>>>>>>>>>>    End_Procedure
38691>>>>>>>>>>>
38691>>>>>>>>>>>    Function ComIniFileName Returns String
38693>>>>>>>>>>>        String retVal
38693>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
38694>>>>>>>>>>>        Function_Return retVal
38695>>>>>>>>>>>    End_Function
38696>>>>>>>>>>>
38696>>>>>>>>>>>    Procedure Set ComIniFileName String value
38698>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
38699>>>>>>>>>>>    End_Procedure
38700>>>>>>>>>>>End_Class
38701>>>>>>>>>>>
38701>>>>>>>>>>>// CLSID: {C0DE2200-4834-499E-95B4-30E0C3F43A10}
38701>>>>>>>>>>>Class cCJSkinDescription is a cComAutomationObject
38702>>>>>>>>>>>
38702>>>>>>>>>>>    Function ComName Returns String
38704>>>>>>>>>>>        String retVal
38704>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
38705>>>>>>>>>>>        Function_Return retVal
38706>>>>>>>>>>>    End_Function
38707>>>>>>>>>>>
38707>>>>>>>>>>>    Procedure Set ComName String value
38709>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
38710>>>>>>>>>>>    End_Procedure
38711>>>>>>>>>>>
38711>>>>>>>>>>>    Function ComPath Returns String
38713>>>>>>>>>>>        String retVal
38713>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
38714>>>>>>>>>>>        Function_Return retVal
38715>>>>>>>>>>>    End_Function
38716>>>>>>>>>>>
38716>>>>>>>>>>>    Procedure Set ComPath String value
38718>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
38719>>>>>>>>>>>    End_Procedure
38720>>>>>>>>>>>
38720>>>>>>>>>>>    Function ComCount Returns Integer
38722>>>>>>>>>>>        Handle hDispatchDriver
38722>>>>>>>>>>>        Integer retVal
38722>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38723>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
38724>>>>>>>>>>>        Function_Return retVal
38725>>>>>>>>>>>    End_Function
38726>>>>>>>>>>>
38726>>>>>>>>>>>    Function ComIniFile Integer llIndex Returns Variant
38728>>>>>>>>>>>        Handle hDispatchDriver
38728>>>>>>>>>>>        Variant retVal
38728>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38729>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38730>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
38731>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
38732>>>>>>>>>>>        Function_Return retVal
38733>>>>>>>>>>>    End_Function
38734>>>>>>>>>>>
38734>>>>>>>>>>>    Function Com_NewEnum Returns Variant
38736>>>>>>>>>>>        Handle hDispatchDriver
38736>>>>>>>>>>>        Variant retVal
38736>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38737>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
38738>>>>>>>>>>>        Function_Return retVal
38739>>>>>>>>>>>    End_Function
38740>>>>>>>>>>>End_Class
38741>>>>>>>>>>>
38741>>>>>>>>>>>// CLSID: {C0DE2200-FB37-4B08-A2B9-F6F8B253D697}
38741>>>>>>>>>>>Class cCJSkinDescriptions is a cComAutomationObject
38742>>>>>>>>>>>
38742>>>>>>>>>>>    Function ComCount Returns Integer
38744>>>>>>>>>>>        Handle hDispatchDriver
38744>>>>>>>>>>>        Integer retVal
38744>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38745>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
38746>>>>>>>>>>>        Function_Return retVal
38747>>>>>>>>>>>    End_Function
38748>>>>>>>>>>>
38748>>>>>>>>>>>    Function ComSkin Integer llIndex Returns Variant
38750>>>>>>>>>>>        Handle hDispatchDriver
38750>>>>>>>>>>>        Variant retVal
38750>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38751>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38752>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
38753>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
38754>>>>>>>>>>>        Function_Return retVal
38755>>>>>>>>>>>    End_Function
38756>>>>>>>>>>>
38756>>>>>>>>>>>    Function Com_NewEnum Returns Variant
38758>>>>>>>>>>>        Handle hDispatchDriver
38758>>>>>>>>>>>        Variant retVal
38758>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38759>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
38760>>>>>>>>>>>        Function_Return retVal
38761>>>>>>>>>>>    End_Function
38762>>>>>>>>>>>End_Class
38763>>>>>>>>>>>
38763>>>>>>>>>>>// CLSID: {C0DE2200-C56F-43C0-BCF1-8193B35FE4C4}
38763>>>>>>>>>>>Class cCJSkinSchema is a cComAutomationObject
38764>>>>>>>>>>>
38764>>>>>>>>>>>    Function ComGetColor XTPColorManagerColor llIndex Returns OLE_COLOR
38766>>>>>>>>>>>        Handle hDispatchDriver
38766>>>>>>>>>>>        OLE_COLOR retVal
38766>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38767>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38768>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
38769>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
38770>>>>>>>>>>>        Function_Return retVal
38771>>>>>>>>>>>    End_Function
38772>>>>>>>>>>>End_Class
38773>>>>>>>>>Use cApplication.pkg
38773>>>>>>>>>
38773>>>>>>>>>Struct tSkinInformation
38773>>>>>>>>>    String sName     // description of the skin
38773>>>>>>>>>    String sSkinfile // file path. Can be relative or full
38773>>>>>>>>>    String sSkinIni  // section name
38773>>>>>>>>>End_Struct
38773>>>>>>>>>
38773>>>>>>>>>
38773>>>>>>>>>Class cCJSkinFramework is a cCJComSkinFramework
38774>>>>>>>>>    
38774>>>>>>>>>    Procedure Construct_Object
38776>>>>>>>>>        Forward Send Construct_Object
38778>>>>>>>>>        
38778>>>>>>>>>        Property String psSkinFile ""
38779>>>>>>>>>        Property String psSkinIni ""
38780>>>>>>>>>        Property Boolean pbLoadPreference False
38781>>>>>>>>>        
38781>>>>>>>>>        Set peAutoCreate to acAutoCreate
38782>>>>>>>>>        
38782>>>>>>>>>        Move Self to ghoSkinFramework
38783>>>>>>>>>    End_Procedure
38784>>>>>>>>>    
38784>>>>>>>>>    // return the default skin path, which is the programs directory.
38784>>>>>>>>>    // This requires an application object.
38784>>>>>>>>>    // If you want to different skin path, override this.
38784>>>>>>>>>    Function SkinPath Returns String
38786>>>>>>>>>        String sPath sPaths
38786>>>>>>>>>        Handle hoWorkspace
38786>>>>>>>>>        If ghoApplication Begin
38788>>>>>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
38789>>>>>>>>>            Get psProgramPath of hoWorkspace to sPaths
38790>>>>>>>>>            Get PathAtIndex of hoWorkspace sPaths 1 to sPath
38791>>>>>>>>>        End
38791>>>>>>>>>>
38791>>>>>>>>>        Else Begin
38792>>>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
38793>>>>>>>>>>
38793>>>>>>>>>        End
38793>>>>>>>>>>
38793>>>>>>>>>        Function_Return sPath
38794>>>>>>>>>    End_Function
38795>>>>>>>>>    
38795>>>>>>>>>    // Returns the Qualified name of psSkinFile. If the file is already qualified it just
38795>>>>>>>>>    // returns itself. If it is not, it uses SkinPath to get the path.
38795>>>>>>>>>    Function SkinQFile Returns String
38797>>>>>>>>>        String sFile sPath sSep
38797>>>>>>>>>        Boolean bQualified
38797>>>>>>>>>        Get psSkinFile to sFile
38798>>>>>>>>>        If not (IsFileNameQualified(sFile)) Begin
38800>>>>>>>>>            Get SkinPath to sPath
38801>>>>>>>>>            Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sSep
38802>>>>>>>>>            Move (sPath - sSep - sFile) to sFile
38803>>>>>>>>>        End
38803>>>>>>>>>>
38803>>>>>>>>>        Function_Return sFile
38804>>>>>>>>>    End_Function
38805>>>>>>>>>    
38805>>>>>>>>>    // defines the default VDF window class mapping.
38805>>>>>>>>>    Procedure OnAddVDFWindowClasses
38807>>>>>>>>>        Send ComAddWindowClass "DFlistbox"               "ListBox"
38808>>>>>>>>>        Send ComAddWindowClass "DFentry"                 "Edit"
38809>>>>>>>>>        Send ComAddWindowClass "DFtextbox"               "Edit"
38810>>>>>>>>>        Send ComAddWindowClass "DFRichEditCtrl"          "Edit"
38811>>>>>>>>>        Send ComAddWindowClass "DFcombobox"              "ComboBox"
38812>>>>>>>>>        Send ComAddWindowClass "DFformlist"              "Edit"
38813>>>>>>>>>        Send ComAddWindowClass "DFFormListHeader"        "SysHeader32"
38814>>>>>>>>>        Send ComAddWindowClass "DFbutton"                "Button"
38815>>>>>>>>>        Send ComAddWindowClass "HPromptBtn"              "Button"
38816>>>>>>>>>        Send ComAddWindowClass "Hspinbtn"                "msctls_updown32"
38817>>>>>>>>>        Send ComAddWindowClass "DFSysTabControl32"       "SysTabControl32"
38818>>>>>>>>>        Send ComAddWindowClass "DFMDIClient"             "MDIClient"
38819>>>>>>>>>        Send ComAddWindowClass "DFedit"                  "edit"
38820>>>>>>>>>        Send ComAddWindowClass "DFlistedit"              "edit"
38821>>>>>>>>>        Send ComAddWindowClass "DFscrollbar"             "scrollbar"
38822>>>>>>>>>        Send ComAddWindowClass "DFgroup"                 "Button"
38823>>>>>>>>>        Send ComAddWindowClass "DFComboGrid"             "ComboBox"
38824>>>>>>>>>        // External class
38824>>>>>>>>>        Send ComAddWindowClass "cVdfAnimation"           "SysAnimate32"
38825>>>>>>>>>        Send ComAddWindowClass "cVdfProgressBar"         "msctls_progress32"
38826>>>>>>>>>        Send ComAddWindowClass "cVdfStatusBar"           "msctls_statusbar32"
38827>>>>>>>>>        Send ComAddWindowClass "cVdfToolbar"             "ToolbarWindow32"
38828>>>>>>>>>        Send ComAddWindowClass "cObsoleteVdfProgressBar" "msctls_progress32"
38829>>>>>>>>>        Send ComAddWindowClass "cVdfTrackBar"            "msctls_trackbar32"
38830>>>>>>>>>        Send ComAddWindowClass "cObsoleteBasicStatusBar" "msctls_statusbar32"
38831>>>>>>>>>        Send ComAddWindowClass "cVdfTreeView"            "SysTreeView32"
38832>>>>>>>>>    End_Procedure
38833>>>>>>>>>    
38833>>>>>>>>>    // Used to support developer designed class mappings (e.g. COM controls)
38833>>>>>>>>>    Procedure OnAddCustomWindowClasses
38835>>>>>>>>>    End_Procedure
38836>>>>>>>>>    
38836>>>>>>>>>    // called when object is created during end_construct_object.
38836>>>>>>>>>    Procedure OnCreate
38838>>>>>>>>>        Integer iOpts
38838>>>>>>>>>        Boolean bUseWindowsFont
38838>>>>>>>>>        Forward Send OnCreate
38840>>>>>>>>>        
38840>>>>>>>>>        // if we are using the windows fonts we will disable the apply metrics which
38840>>>>>>>>>        // never really looked good anyway. This test only exists or legacy purposes
38840>>>>>>>>>        Get pbUseWindowsFont of Desktop to bUseWindowsFont
38841>>>>>>>>>        If bUseWindowsFont Begin
38843>>>>>>>>>            Get ComApplyOptions to iOpts
38844>>>>>>>>>            Set ComApplyOptions to (RemoveBitValue(xtpSkinApplyMetrics, iOpts))
38845>>>>>>>>>        End
38845>>>>>>>>>>
38845>>>>>>>>>        
38845>>>>>>>>>        // this works around a CJ issue where skins applied to other threads causes an exception upon close down.
38845>>>>>>>>>        // We saw this with our mssql driver but it could occur elsewhere. This has been reported in the CJ newsgroup
38845>>>>>>>>>        // and this was the suggested workaround.
38845>>>>>>>>>        Set ComAutoApplyNewThreads to False
38846>>>>>>>>>        
38846>>>>>>>>>        Send OnAddVDFWindowClasses
38847>>>>>>>>>        Send OnAddCustomWindowClasses
38848>>>>>>>>>        
38848>>>>>>>>>        // if preferences are used, it will set psSkinFile and psSkinIni
38848>>>>>>>>>        If (pbLoadPreference(Self)) Begin
38850>>>>>>>>>            Send LoadSkinPreference
38851>>>>>>>>>        End
38851>>>>>>>>>>
38851>>>>>>>>>        // if a skin file name exists, we apply the skin.
38851>>>>>>>>>        If (psSkinFile(Self)<>"") Begin
38853>>>>>>>>>            Send ApplySkin
38854>>>>>>>>>        End
38854>>>>>>>>>>
38854>>>>>>>>>    End_Procedure
38855>>>>>>>>>    
38855>>>>>>>>>    // called by framework as part of application exit.
38855>>>>>>>>>    Procedure Broadcast_Notify_Exit_Application
38857>>>>>>>>>        Send Notify_Exit_Application
38858>>>>>>>>>    End_Procedure
38859>>>>>>>>>    
38859>>>>>>>>>    Procedure Notify_Exit_Application
38861>>>>>>>>>        If (pbLoadPreference(Self)) Begin
38863>>>>>>>>>            Send SaveSkinPreference
38864>>>>>>>>>        End
38864>>>>>>>>>>
38864>>>>>>>>>    End_Procedure
38865>>>>>>>>>    
38865>>>>>>>>>    Procedure NotifyPreApplySkin
38867>>>>>>>>>        Broadcast Send OnPreApplySkin of Desktop True
38869>>>>>>>>>    End_Procedure
38870>>>>>>>>>    
38870>>>>>>>>>    Procedure NotifyPostApplySkin
38872>>>>>>>>>        Broadcast Send OnPostApplySkin of Desktop True
38874>>>>>>>>>    End_Procedure
38875>>>>>>>>>    
38875>>>>>>>>>    // returns an array of all skins in the path. If path is "", use the default path.
38875>>>>>>>>>    // If the default path is used, returns the file names as relative names, else use full path.
38875>>>>>>>>>    Function EnumerateSkins String sPath Boolean bRecursive Returns tSkinInformation[]
38877>>>>>>>>>        tSkinInformation[] Skins
38877>>>>>>>>>        tSkinInformation[] Skins
38878>>>>>>>>>        String sSkinName sSkinFile sDefaultPath sSep
38878>>>>>>>>>        Variant vSkinDescriptions vSkinDescription vSkinIniFile
38878>>>>>>>>>        Handle hSkinDescriptions hSkinDescription hSkinIniFile
38878>>>>>>>>>        Integer iSkinsCount iSkinFilesCount iNumSkins iNumSkinFiles iArrayItem
38878>>>>>>>>>        Integer iPos iDfltLen
38878>>>>>>>>>        Boolean bUseRelativePath
38878>>>>>>>>>        
38878>>>>>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sSep
38879>>>>>>>>>        
38879>>>>>>>>>        Get SkinPath to sDefaultPath
38880>>>>>>>>>        If (sPath="") Begin
38882>>>>>>>>>            Move sDefaultPath to sPath
38883>>>>>>>>>        End
38883>>>>>>>>>>
38883>>>>>>>>>        Move (Uppercase(sDefaultPath)) to sDefaultPath
38884>>>>>>>>>        Move (Length(sDefaultPath)) to iDfltLen
38885>>>>>>>>>        Move (sDefaultPath=Uppercase(sPath)) to bUseRelativePath
38886>>>>>>>>>        
38886>>>>>>>>>        Get ComEnumerateSkinDirectory sPath bRecursive to vSkinDescriptions
38887>>>>>>>>>        If (not(IsNullComObject(vSkinDescriptions))) Begin
38889>>>>>>>>>            
38889>>>>>>>>>            Get Create U_cCJSkinDescriptions to hSkinDescriptions
38890>>>>>>>>>            Get Create U_cCJSkinDescription to hSkinDescription
38891>>>>>>>>>            Get Create U_cCJSkinIniFile to hSkinIniFile
38892>>>>>>>>>            
38892>>>>>>>>>            Set pvComObject of hSkinDescriptions to vSkinDescriptions
38893>>>>>>>>>            Get ComCount of hSkinDescriptions to iNumSkinFiles
38894>>>>>>>>>            
38894>>>>>>>>>            For iSkinFilesCount from 0 to (iNumSkinFiles-1)
38900>>>>>>>>>>
38900>>>>>>>>>                Get ComSkin of hSkinDescriptions iSkinFilesCount to vSkinDescription
38901>>>>>>>>>                Set pvComObject of hSkinDescription to vSkinDescription
38902>>>>>>>>>                
38902>>>>>>>>>                Get ComCount of hSkinDescription to iNumSkins
38903>>>>>>>>>                
38903>>>>>>>>>                For iSkinsCount from 0 to (iNumSkins-1)
38909>>>>>>>>>>
38909>>>>>>>>>                    Get ComIniFile of hSkinDescription iSkinsCount to vSkinIniFile
38910>>>>>>>>>                    Set pvComObject of hSkinIniFile to vSkinIniFile
38911>>>>>>>>>                    
38911>>>>>>>>>                    Get ComName of hSkinDescription to Skins[iArrayItem].sName
38912>>>>>>>>>                    Get ComPath of hSkinDescription to sSkinFile
38913>>>>>>>>>                    If bUseRelativePath Begin
38915>>>>>>>>>                        Move (pos(sDefaultPath,uppercase(sSkinFile))) to iPos
38916>>>>>>>>>                        If iPos Begin
38918>>>>>>>>>                            Move (Remove(sSkinFile,iPos,iDfltLen)) to sSkinFile
38919>>>>>>>>>                            While (Left(sSkinFile,1)=sSep)
38923>>>>>>>>>                                Move (Remove(sSkinFile,1,1)) to sSkinFile
38924>>>>>>>>>                            Loop
38925>>>>>>>>>>
38925>>>>>>>>>                        End
38925>>>>>>>>>>
38925>>>>>>>>>                    End
38925>>>>>>>>>>
38925>>>>>>>>>                    Move sSkinFile to Skins[iArrayItem].sSkinfile
38926>>>>>>>>>                    Get ComIniFileName of hSkinIniFile to Skins[iArrayItem].sSkinIni
38927>>>>>>>>>                    
38927>>>>>>>>>                    Increment iArrayItem
38928>>>>>>>>>                Loop
38929>>>>>>>>>>
38929>>>>>>>>>            Loop
38930>>>>>>>>>>
38930>>>>>>>>>            
38930>>>>>>>>>            Send Destroy of hSkinDescriptions
38931>>>>>>>>>            Send Destroy of hSkinDescription
38932>>>>>>>>>            Send Destroy of hSkinIniFile
38933>>>>>>>>>            
38933>>>>>>>>>        End
38933>>>>>>>>>>
38933>>>>>>>>>        Function_Return Skins
38934>>>>>>>>>    End_Function
38935>>>>>>>>>    
38935>>>>>>>>>    // Save the skin preference. This requires an application object.
38935>>>>>>>>>    // Only do this if the application object allows it.
38935>>>>>>>>>    // This is called during startup if pbLoadPreference is True
38935>>>>>>>>>    // Suitable for override
38935>>>>>>>>>    Procedure SaveSkinPreference
38937>>>>>>>>>        String sSkin sIni
38937>>>>>>>>>        If ghoApplication Begin
38939>>>>>>>>>            If (pbPreserveEnvironment(ghoApplication)) Begin
38941>>>>>>>>>                Get psSkinFile to sSkin
38942>>>>>>>>>                Get psSkinIni to sIni
38943>>>>>>>>>                Send WriteString of ghoApplication "Preferences" "SkinFile" sSkin
38944>>>>>>>>>                Send WriteString of ghoApplication "Preferences" "SkinIni" sIni
38945>>>>>>>>>            End
38945>>>>>>>>>>
38945>>>>>>>>>        End
38945>>>>>>>>>>
38945>>>>>>>>>        Else Begin
38946>>>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
38947>>>>>>>>>>
38947>>>>>>>>>        End
38947>>>>>>>>>>
38947>>>>>>>>>    End_Procedure
38948>>>>>>>>>    
38948>>>>>>>>>    // Load the skin preference. This requires an application object.
38948>>>>>>>>>    // Only do this if the application object allows it.
38948>>>>>>>>>    // This is called during startup if pbLoadPreference is True
38948>>>>>>>>>    // Suitable for override
38948>>>>>>>>>    Procedure LoadSkinPreference
38950>>>>>>>>>        String sSkin sIni
38950>>>>>>>>>        Boolean bExists
38950>>>>>>>>>        If ghoApplication Begin
38952>>>>>>>>>            If (pbPreserveEnvironment(ghoApplication)) Begin
38954>>>>>>>>>                Get ValueExists of ghoApplication "Preferences" "SkinFile" to bExists
38955>>>>>>>>>                If bExists Begin
38957>>>>>>>>>                    Get ReadString of ghoApplication "Preferences" "SkinFile" "" to sSkin
38958>>>>>>>>>                    Get ReadString of ghoApplication "Preferences" "SkinIni" "" to sIni
38959>>>>>>>>>                    Set psSkinFile to sSkin
38960>>>>>>>>>                    Set psSkinIni to sIni
38961>>>>>>>>>                End
38961>>>>>>>>>>
38961>>>>>>>>>            End
38961>>>>>>>>>>
38961>>>>>>>>>        End
38961>>>>>>>>>>
38961>>>>>>>>>        Else Begin
38962>>>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
38963>>>>>>>>>>
38963>>>>>>>>>        End
38963>>>>>>>>>>
38963>>>>>>>>>    End_Procedure
38964>>>>>>>>>    
38964>>>>>>>>>    // Can be called to apply the current skin.
38964>>>>>>>>>    Procedure ApplySkin
38966>>>>>>>>>        Boolean bOk
38966>>>>>>>>>        String sSkin sIni
38966>>>>>>>>>        If (IsComObjectCreated(Self)) Begin
38968>>>>>>>>>            Get SkinQFile to sSkin
38969>>>>>>>>>            Get psSkinIni to sIni
38970>>>>>>>>>            
38970>>>>>>>>>            Send NotifyPreApplySkin
38971>>>>>>>>>            // when skins are used we don't want to use built in Visual Styles
38971>>>>>>>>>            Send EnableVisualStyles of Desktop (sSkin="")
38972>>>>>>>>>            Get ComLoadSkin sSkin sIni to bOK
38973>>>>>>>>>            If (sSkin<>"" and not(bOk)) Begin
38975>>>>>>>>>                // if not ok, no skin was appied. Enable visual styles
38975>>>>>>>>>                Send EnableVisualStyles of Desktop True
38976>>>>>>>>>            End
38976>>>>>>>>>>
38976>>>>>>>>>            Send NotifyPostApplySkin
38977>>>>>>>>>        End
38977>>>>>>>>>>
38977>>>>>>>>>    End_Procedure
38978>>>>>>>>>    
38978>>>>>>>>>    
38978>>>>>>>>>End_Class
38979>>>>>>>Use cProgressBar.pkg
Including file: cProgressBar.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cProgressBar.pkg)
38979>>>>>>>>>Use Windows.pkg
38979>>>>>>>>>Use cWinControl.pkg
Including file: cWinControl.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cWinControl.pkg)
38979>>>>>>>>>>>Use Windows.pkg
38979>>>>>>>>>>>
38979>>>>>>>>>>>// Key State Masks for Mouse Messages
38979>>>>>>>>>>>
38979>>>>>>>>>>>Define MK_LBUTTON  for |CI$0001
38979>>>>>>>>>>>Define MK_RBUTTON  for |CI$0002
38979>>>>>>>>>>>Define MK_SHIFT    for |CI$0004
38979>>>>>>>>>>>Define MK_CONTROL  for |CI$0008
38979>>>>>>>>>>>Define MK_MBUTTON  for |CI$0010
38979>>>>>>>>>>>Define MK_XBUTTON1 for |CI$0020
38979>>>>>>>>>>>Define MK_XBUTTON2 for |CI$0040
38979>>>>>>>>>>>
38979>>>>>>>>>>>Enum_List // Mouse Key Flags
38979>>>>>>>>>>>    Define mkLeft    for MK_LBUTTON
38979>>>>>>>>>>>    Define mkMiddle  for MK_MBUTTON
38979>>>>>>>>>>>    Define mkRight   for MK_RBUTTON
38979>>>>>>>>>>>    Define mkX1      for MK_XBUTTON1
38979>>>>>>>>>>>    Define mkX2      for MK_XBUTTON2
38979>>>>>>>>>>>    Define mkShift   for MK_SHIFT
38979>>>>>>>>>>>    Define mkControl for MK_CONTROL
38979>>>>>>>>>>>End_Enum_List
38979>>>>>>>>>>>
38979>>>>>>>>>>>Enum_List // Mouse Buttons. Used in OnMouseXXX messages
38979>>>>>>>>>>>    Define mbLeft
38979>>>>>>>>>>>    Define mbMiddle
38979>>>>>>>>>>>    Define mbRight
38979>>>>>>>>>>>    Define mbX1
38979>>>>>>>>>>>    Define mbX2
38979>>>>>>>>>>>End_Enum_List
38979>>>>>>>>>>>
38979>>>>>>>>>>>Class cWinControl is a DfBaseControl
38980>>>>>>>>>>>    Procedure Construct_Object
38982>>>>>>>>>>>        Forward Send Construct_Object
38984>>>>>>>>>>>        Property Integer private_pbEnabled True
38985>>>>>>>>>>>        Property Integer private_pbVisible True
38986>>>>>>>>>>>    End_Procedure
38987>>>>>>>>>>>    
38987>>>>>>>>>>>    Procedure End_Construct_Object
38989>>>>>>>>>>>        Forward Send End_Construct_Object
38991>>>>>>>>>>>        
38991>>>>>>>>>>>        Set External_Message WM_LBUTTONDOWN   to msg_OnWmLButtonDown
38992>>>>>>>>>>>        Set External_Message WM_MBUTTONDOWN   to msg_OnWmMButtonDown
38993>>>>>>>>>>>        Set External_Message WM_RBUTTONDOWN   to msg_OnWmRButtonDown
38994>>>>>>>>>>>        Set External_Message WM_LBUTTONUP     to msg_OnWmLButtonUp
38995>>>>>>>>>>>        Set External_Message WM_MBUTTONUP     to msg_OnWmMButtonUp
38996>>>>>>>>>>>        Set External_Message WM_RBUTTONUP     to msg_OnWmRButtonUp
38997>>>>>>>>>>>        Set External_Message WM_LBUTTONDBLCLK to msg_OnWmLButtonDblClk
38998>>>>>>>>>>>        Set External_Message WM_MBUTTONDBLCLK to msg_OnWmMButtonDblClk
38999>>>>>>>>>>>        Set External_Message WM_RBUTTONDBLCLK to msg_OnWmRButtonDblClk
39000>>>>>>>>>>>        Set External_Message WM_MOUSEMOVE     to msg_OnWmMouseMove
39001>>>>>>>>>>>    End_Procedure
39002>>>>>>>>>>>    
39002>>>>>>>>>>>    Procedure Notify Longptr wParam Longptr lParam
39004>>>>>>>>>>>        //Intentionally cancelled
39004>>>>>>>>>>>    End_Procedure
39005>>>>>>>>>>>    
39005>>>>>>>>>>>    Procedure Command Longptr wParam Longptr lParam
39007>>>>>>>>>>>        //Intentionally cancelled
39007>>>>>>>>>>>    End_Procedure
39008>>>>>>>>>>>    
39008>>>>>>>>>>>    Procedure DoRecreateWindow
39010>>>>>>>>>>>        // Recreates the window
39010>>>>>>>>>>>        If (Window_Handle(Self)) Begin
39012>>>>>>>>>>>            // attempt to do this without disturbing the focus tree.
39012>>>>>>>>>>>            Send Page_delete // prior to 8.3 this was Send Page_Object 0
39013>>>>>>>>>>>            Send Page 1      //                       Send Page_Object 1
39014>>>>>>>>>>>        End
39014>>>>>>>>>>>>
39014>>>>>>>>>>>    End_Procedure
39015>>>>>>>>>>>    
39015>>>>>>>>>>>    Procedure DoUpdateWindow
39017>>>>>>>>>>>        // Forces windows to update the window by bypassing WM_PAINT
39017>>>>>>>>>>>        Handle hWnd
39017>>>>>>>>>>>        
39017>>>>>>>>>>>        Get Window_Handle to hWnd
39018>>>>>>>>>>>        If hWnd ;            Move (UpdateWindow(hWnd)) to hWnd
39021>>>>>>>>>>>    End_Procedure
39022>>>>>>>>>>>    
39022>>>>>>>>>>>    Procedure Page Integer iState
39024>>>>>>>>>>>        Set Window_Style to WS_DISABLED (private_pbEnabled(Self) =False)
39025>>>>>>>>>>>        Set Window_Style to WS_VISIBLE (private_pbVisible(Self))
39026>>>>>>>>>>>        Forward Send Page iState
39028>>>>>>>>>>>    End_Procedure
39029>>>>>>>>>>>    
39029>>>>>>>>>>>    Procedure OnWmLButtonUp Integer wParam Integer lParam
39031>>>>>>>>>>>        Integer x y eButton
39031>>>>>>>>>>>        
39031>>>>>>>>>>>        Move (Hi(lParam))  to y
39032>>>>>>>>>>>        Move (Low(lParam)) to x
39033>>>>>>>>>>>        
39033>>>>>>>>>>>        Send OnMouseUp mbLeft x y wParam
39034>>>>>>>>>>>    End_Procedure
39035>>>>>>>>>>>    
39035>>>>>>>>>>>    Procedure OnWmMButtonUp Integer wParam Integer lParam
39037>>>>>>>>>>>        Integer x y eButton
39037>>>>>>>>>>>        
39037>>>>>>>>>>>        Move (Hi(lParam))  to y
39038>>>>>>>>>>>        Move (Low(lParam)) to x
39039>>>>>>>>>>>        
39039>>>>>>>>>>>        Send OnMouseUp mbMiddle x y wParam
39040>>>>>>>>>>>    End_Procedure
39041>>>>>>>>>>>    
39041>>>>>>>>>>>    Procedure OnWmRButtonUp Integer wParam Integer lParam
39043>>>>>>>>>>>        Integer x y eButton
39043>>>>>>>>>>>        
39043>>>>>>>>>>>        Move (Hi(lParam))  to y
39044>>>>>>>>>>>        Move (Low(lParam)) to x
39045>>>>>>>>>>>        
39045>>>>>>>>>>>        Send OnMouseUp mbRight x y wParam
39046>>>>>>>>>>>    End_Procedure
39047>>>>>>>>>>>    
39047>>>>>>>>>>>    Procedure OnWmLButtonDown Integer wParam Integer lParam
39049>>>>>>>>>>>        Integer x y eButton fKeys
39049>>>>>>>>>>>        
39049>>>>>>>>>>>        Move (Hi(lParam))  to y
39050>>>>>>>>>>>        Move (Low(lParam)) to x
39051>>>>>>>>>>>        
39051>>>>>>>>>>>        Send OnMouseDown mbLeft x y wParam
39052>>>>>>>>>>>    End_Procedure
39053>>>>>>>>>>>    Procedure OnWmMButtonDown Integer wParam Integer lParam
39055>>>>>>>>>>>        Integer x y eButton
39055>>>>>>>>>>>        
39055>>>>>>>>>>>        Move (Hi(lParam))  to y
39056>>>>>>>>>>>        Move (Low(lParam)) to x
39057>>>>>>>>>>>        
39057>>>>>>>>>>>        Send OnMouseDown mbMiddle x y wParam
39058>>>>>>>>>>>    End_Procedure
39059>>>>>>>>>>>    Procedure OnWmRButtonDown Integer wParam Integer lParam
39061>>>>>>>>>>>        Integer x y eButton
39061>>>>>>>>>>>        
39061>>>>>>>>>>>        Move (Hi(lParam))  to y
39062>>>>>>>>>>>        Move (Low(lParam)) to x
39063>>>>>>>>>>>        
39063>>>>>>>>>>>        Send OnMouseDown mbRight x y wParam
39064>>>>>>>>>>>    End_Procedure
39065>>>>>>>>>>>    
39065>>>>>>>>>>>    Procedure OnWmLButtonDblClk Integer wParam Integer lParam
39067>>>>>>>>>>>        Integer x y eButton
39067>>>>>>>>>>>        
39067>>>>>>>>>>>        Move (Hi(lParam))  to y
39068>>>>>>>>>>>        Move (Low(lParam)) to x
39069>>>>>>>>>>>        
39069>>>>>>>>>>>        Send OnMouseDoubleClick mbLeft x y wParam
39070>>>>>>>>>>>    End_Procedure
39071>>>>>>>>>>>    Procedure OnWmMButtonDblClk Integer wParam Integer lParam
39073>>>>>>>>>>>        Integer x y eButton
39073>>>>>>>>>>>        
39073>>>>>>>>>>>        Move (Hi(lParam))  to y
39074>>>>>>>>>>>        Move (Low(lParam)) to x
39075>>>>>>>>>>>        
39075>>>>>>>>>>>        Send OnMouseDoubleClick mbMiddle x y wParam
39076>>>>>>>>>>>    End_Procedure
39077>>>>>>>>>>>    Procedure OnWmRButtonDblClk Integer wParam Integer lParam
39079>>>>>>>>>>>        Integer x y eButton
39079>>>>>>>>>>>        
39079>>>>>>>>>>>        Move (Hi(lParam))  to y
39080>>>>>>>>>>>        Move (Low(lParam)) to x
39081>>>>>>>>>>>        
39081>>>>>>>>>>>        Send OnMouseDoubleClick mbRight x y wParam
39082>>>>>>>>>>>    End_Procedure
39083>>>>>>>>>>>    
39083>>>>>>>>>>>    Procedure OnWmMouseMove Integer wParam Integer lParam
39085>>>>>>>>>>>        Integer x y eButton
39085>>>>>>>>>>>        
39085>>>>>>>>>>>        Move (Hi(lParam))  to y
39086>>>>>>>>>>>        Move (Low(lParam)) to x
39087>>>>>>>>>>>        
39087>>>>>>>>>>>        Send OnMouseMove x y wParam
39088>>>>>>>>>>>    End_Procedure
39089>>>>>>>>>>>    
39089>>>>>>>>>>>    Procedure OnMouseDown Integer eButton Integer x Integer y Integer fKeys
39091>>>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
39091>>>>>>>>>>>        //String sButton
39091>>>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
39091>>>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
39091>>>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
39091>>>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
39091>>>>>>>>>>>        
39091>>>>>>>>>>>        //If (eButton = mbLeft) Move 'Left Button' To sButton
39091>>>>>>>>>>>        //If (eButton = mbRight) Move 'Right Button' To sButton
39091>>>>>>>>>>>        //Showln 'OnMouseDown ' sButton ' ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
39091>>>>>>>>>>>    End_Procedure
39092>>>>>>>>>>>    
39092>>>>>>>>>>>    Procedure OnMouseUp Integer eButton Integer x Integer y Integer fKeys
39094>>>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
39094>>>>>>>>>>>        //String sButton
39094>>>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
39094>>>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
39094>>>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
39094>>>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
39094>>>>>>>>>>>        
39094>>>>>>>>>>>        //If (eButton = mbLeft) Move 'Left Button' To sButton
39094>>>>>>>>>>>        //If (eButton = mbRight) Move 'Right Button' To sButton
39094>>>>>>>>>>>        //Showln 'OnMouseUp ' sButton ' ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
39094>>>>>>>>>>>    End_Procedure
39095>>>>>>>>>>>    
39095>>>>>>>>>>>    Procedure OnMouseDoubleClick Integer eButton Integer x Integer y Integer fKeys
39097>>>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
39097>>>>>>>>>>>        //String sButton
39097>>>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
39097>>>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
39097>>>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
39097>>>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
39097>>>>>>>>>>>        
39097>>>>>>>>>>>        //If (eButton = mbLeft) Move 'Left Button' To sButton
39097>>>>>>>>>>>        //If (eButton = mbRight) Move 'Right Button' To sButton
39097>>>>>>>>>>>        //Showln 'OnMouseDblClk ' sButton ' ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
39097>>>>>>>>>>>    End_Procedure
39098>>>>>>>>>>>    
39098>>>>>>>>>>>    Procedure OnMouseMove Integer x Integer y Integer fKeys
39100>>>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
39100>>>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
39100>>>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
39100>>>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
39100>>>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
39100>>>>>>>>>>>        
39100>>>>>>>>>>>        //Showln 'OnMouseMove ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
39100>>>>>>>>>>>    End_Procedure
39101>>>>>>>>>>>    
39101>>>>>>>>>>>    Procedure Set pbEnabled Boolean bEnabled
39103>>>>>>>>>>>        Handle hWnd
39103>>>>>>>>>>>        
39103>>>>>>>>>>>        If (bEnabled <> private_pbEnabled(Self)) Begin
39105>>>>>>>>>>>            Set private_pbEnabled to bEnabled
39106>>>>>>>>>>>            Get Window_Handle to hWnd
39107>>>>>>>>>>>            If hWnd ;                Move (EnableWindow(hWnd, bEnabled)) to hWnd
39110>>>>>>>>>>>        End
39110>>>>>>>>>>>>
39110>>>>>>>>>>>    End_Procedure
39111>>>>>>>>>>>    Function pbEnabled Returns Boolean
39113>>>>>>>>>>>        Function_Return (private_pbEnabled(Self))
39114>>>>>>>>>>>    End_Function
39115>>>>>>>>>>>    
39115>>>>>>>>>>>    Procedure Set pbVisible Boolean bVisible
39117>>>>>>>>>>>        Handle  hWnd
39117>>>>>>>>>>>        Integer iVoid
39117>>>>>>>>>>>        
39117>>>>>>>>>>>        If (bVisible <> private_pbVisible(Self)) Begin
39119>>>>>>>>>>>            Set private_pbVisible to bVisible
39120>>>>>>>>>>>            Get Window_Handle to hWnd
39121>>>>>>>>>>>            If hWnd ;                Move (ShowWindow(hWnd, If (bVisible, SW_SHOWNA, SW_HIDE))) to iVoid
39124>>>>>>>>>>>        End
39124>>>>>>>>>>>>
39124>>>>>>>>>>>    End_Procedure
39125>>>>>>>>>>>    Function pbVisible Returns Boolean
39127>>>>>>>>>>>        Function_Return (private_pbVisible(Self))
39128>>>>>>>>>>>    End_Function
39129>>>>>>>>>>>    
39129>>>>>>>>>>>End_Class
39130>>>>>>>>>Use CommCtrl.pkg
39130>>>>>>>>>
39130>>>>>>>>>//{ OverrideProperty=pbEnabled DesignTime=False }
39130>>>>>>>>>Class cProgressBar is a cWinControl
39131>>>>>>>>>    
39131>>>>>>>>>    Procedure Construct_Object
39133>>>>>>>>>        Forward Send Construct_Object
39135>>>>>>>>>        Property Integer private_piMinimum
39136>>>>>>>>>        Property Integer private_piMaximum   100
39137>>>>>>>>>        Property Integer private_piAdvanceBy 10
39138>>>>>>>>>        Property Integer private_piPosition
39139>>>>>>>>>        Property Integer private_pbVertical  False
39140>>>>>>>>>        Property Integer private_pbSmooth    False
39141>>>>>>>>>        Property Integer private_piBackColor clDefault
39142>>>>>>>>>        Property Integer private_piBarColor  clDefault
39143>>>>>>>>>        
39143>>>>>>>>>        Send Define_ToolTip_Support_Mixin
39144>>>>>>>>>        
39144>>>>>>>>>        Set External_Class_Name 'cVdfProgressBar' to 'msctls_progress32'
39145>>>>>>>>>        Set Focus_Mode to NonFocusable
39146>>>>>>>>>        Set Skip_State to True
39147>>>>>>>>>        Set pbUseFormWindowHandle to False     // Must come after Define_ToolTip_Support_Mixin
39148>>>>>>>>>    End_Procedure
39149>>>>>>>>>    
39149>>>>>>>>>    Import_Class_Protocol ToolTip_Support_Mixin
39150>>>>>>>>>    
39150>>>>>>>>>    Procedure Set piMinimum Integer iMin
39152>>>>>>>>>        Integer iMax
39152>>>>>>>>>        
39152>>>>>>>>>        Set private_piMinimum to iMin
39153>>>>>>>>>        Get private_piMaximum to iMax
39154>>>>>>>>>        Send Windows_Message PBM_SETRANGE32 iMin iMax
39155>>>>>>>>>    End_Procedure
39156>>>>>>>>>    Function piMinimum Returns Integer
39158>>>>>>>>>        If (Window_Handle(Self));            Function_Return (WindowsMessage(PBM_GETRANGE, 1, 0))
39161>>>>>>>>>        Else;            Function_Return (private_piMinimum(Self))
39163>>>>>>>>>    End_Function
39164>>>>>>>>>    
39164>>>>>>>>>    Procedure Set piMaximum Integer iMax
39166>>>>>>>>>        Integer iMin
39166>>>>>>>>>        
39166>>>>>>>>>        Set private_piMaximum to iMax
39167>>>>>>>>>        Get private_piMinimum to iMin
39168>>>>>>>>>        Send Windows_Message PBM_SETRANGE32 iMin iMax
39169>>>>>>>>>    End_Procedure
39170>>>>>>>>>    Function piMaximum Returns Integer
39172>>>>>>>>>        If (Window_Handle(Self));            Function_Return (WindowsMessage(PBM_GETRANGE, 0, 0))
39175>>>>>>>>>        Else;            Function_Return (private_piMaximum(Self))
39177>>>>>>>>>    End_Function
39178>>>>>>>>>    
39178>>>>>>>>>    Procedure Set piAdvanceBy Integer iAdvanceBy
39180>>>>>>>>>        Set private_piAdvanceBy to iAdvanceBy
39181>>>>>>>>>        Send Windows_Message PBM_SETSTEP iAdvanceBy 0
39182>>>>>>>>>    End_Procedure
39183>>>>>>>>>    Function piAdvanceBy Returns Integer
39185>>>>>>>>>        Function_Return (private_piAdvanceBy(Self))
39186>>>>>>>>>    End_Function
39187>>>>>>>>>    
39187>>>>>>>>>    Procedure Set piPosition Integer iPos
39189>>>>>>>>>        Set private_piPosition to iPos
39190>>>>>>>>>        Send Windows_Message PBM_SETPOS iPos 0
39191>>>>>>>>>    End_Procedure
39192>>>>>>>>>    
39192>>>>>>>>>    Function piPosition Returns Integer
39194>>>>>>>>>        If (Window_Handle(Self));            Function_Return (WindowsMessage(PBM_GETPOS, 0, 0))
39197>>>>>>>>>        Else;            Function_Return (private_piPosition(Self))
39199>>>>>>>>>    End_Function
39200>>>>>>>>>    
39200>>>>>>>>>    Procedure Set pbVertical Boolean bVertical
39202>>>>>>>>>        If (private_pbVertical(Self) <> bVertical) Begin
39204>>>>>>>>>            Set private_pbVertical to bVertical
39205>>>>>>>>>            Send DoRecreateWindow
39206>>>>>>>>>        End
39206>>>>>>>>>>
39206>>>>>>>>>    End_Procedure
39207>>>>>>>>>    
39207>>>>>>>>>    Function pbVertical Returns Boolean
39209>>>>>>>>>        Function_Return (private_pbVertical(Self))
39210>>>>>>>>>    End_Function
39211>>>>>>>>>    
39211>>>>>>>>>    Procedure Set pbSmooth Boolean bSmooth
39213>>>>>>>>>        If (private_pbSmooth(Self) <> bSmooth) Begin
39215>>>>>>>>>            Set private_pbSmooth to bSmooth
39216>>>>>>>>>            Send DoRecreateWindow
39217>>>>>>>>>        End
39217>>>>>>>>>>
39217>>>>>>>>>    End_Procedure
39218>>>>>>>>>    Function pbSmooth Returns Boolean
39220>>>>>>>>>        Function_Return (private_pbSmooth(Self))
39221>>>>>>>>>    End_Function
39222>>>>>>>>>    
39222>>>>>>>>>    Procedure Set piBackColor Integer rgbColor
39224>>>>>>>>>        Set private_piBackColor to rgbColor
39225>>>>>>>>>        Send Windows_Message PBM_SETBKCOLOR 0 rgbColor
39226>>>>>>>>>    End_Procedure
39227>>>>>>>>>    Function piBackColor Returns Integer
39229>>>>>>>>>        Function_Return (private_piBackColor(Self))
39230>>>>>>>>>    End_Function
39231>>>>>>>>>    
39231>>>>>>>>>    Procedure Set piBarColor Integer rgbColor
39233>>>>>>>>>        Set private_piBarColor to rgbColor
39234>>>>>>>>>        Send Windows_Message PBM_SETBARCOLOR 0 rgbColor
39235>>>>>>>>>    End_Procedure
39236>>>>>>>>>    Function piBarColor Returns Integer
39238>>>>>>>>>        Function_Return (private_piBarColor(Self))
39239>>>>>>>>>    End_Function
39240>>>>>>>>>    
39240>>>>>>>>>    Procedure DoAdvance
39242>>>>>>>>>        Send Windows_Message PBM_STEPIT 0 0
39243>>>>>>>>>    End_Procedure
39244>>>>>>>>>    
39244>>>>>>>>>    Procedure DoAdvanceBy  Integer iAdvanceBy
39246>>>>>>>>>        Send Windows_Message PBM_DELTAPOS iAdvanceBy 0
39247>>>>>>>>>    End_Procedure
39248>>>>>>>>>    
39248>>>>>>>>>    Procedure private_DoInitWindow
39250>>>>>>>>>        Set piBarColor  to (private_piBarColor(Self))
39251>>>>>>>>>        Set piBackColor to (private_piBackColor(Self))
39252>>>>>>>>>        Set piAdvanceBy to (private_piAdvanceBy(Self))
39253>>>>>>>>>        Set piMinimum   to (private_piMinimum(Self))
39254>>>>>>>>>        Set piMaximum   to (private_piMaximum(Self))
39255>>>>>>>>>        Set piPosition  to (private_piPosition(Self))
39256>>>>>>>>>    End_Procedure
39257>>>>>>>>>    
39257>>>>>>>>>    Procedure Page_Object Integer iState
39259>>>>>>>>>        Handle hWnd
39259>>>>>>>>>        
39259>>>>>>>>>        Get Window_Handle to hWnd
39260>>>>>>>>>        If (hWnd=0 and iState) Begin
39262>>>>>>>>>            Set Window_Style to PBS_VERTICAL (private_pbVertical(Self))
39263>>>>>>>>>            Set Window_Style to PBS_SMOOTH   (private_pbSmooth(Self))
39264>>>>>>>>>            Forward Send Page_Object True
39266>>>>>>>>>        End
39266>>>>>>>>>>
39266>>>>>>>>>        Else ;            Forward Send Page_Object iState
39269>>>>>>>>>        
39269>>>>>>>>>        // Handle tooltip support....
39269>>>>>>>>>        If (iState = 0) Begin
39271>>>>>>>>>            Send RequestDeleteToolTip
39272>>>>>>>>>        End
39272>>>>>>>>>>
39272>>>>>>>>>        Else Begin
39273>>>>>>>>>            Send RequestAddToolTip
39274>>>>>>>>>        End
39274>>>>>>>>>>
39274>>>>>>>>>    End_Procedure
39275>>>>>>>>>    
39275>>>>>>>>>    Procedure Page Integer iState
39277>>>>>>>>>        Forward Send Page iState
39279>>>>>>>>>        If (iState =1);            Send private_DoInitWindow
39282>>>>>>>>>    End_Procedure
39283>>>>>>>>>    
39283>>>>>>>>>    // Called by Page_Object. Handles tooltip creation. We use a dedicated
39283>>>>>>>>>    // method to perform AddToolTip because it is often the case that Page_Object
39283>>>>>>>>>    // is implemented in a mixin class.
39283>>>>>>>>>    Procedure RequestAddToolTip
39285>>>>>>>>>        Send AddToolTip
39286>>>>>>>>>    End_Procedure
39287>>>>>>>>>    
39287>>>>>>>>>    
39287>>>>>>>>>    // Called by Page_Object. Handles tooltip removal.
39287>>>>>>>>>    Procedure RequestDeleteToolTip
39289>>>>>>>>>        Send DeleteToolTip
39290>>>>>>>>>    End_Procedure
39291>>>>>>>>>End_Class
39292>>>>>>>Use Windows.pkg
39292>>>>>>>Use DUFLanguageConstants.inc
Including file: DUFLanguageConstants.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\DUFLanguageConstants.inc)
39292>>>>>>>>>// *** The Database Update Framework Include file for Languages ***
39292>>>>>>>>>// Language constant declarations for all classes included in "DUF - The Database Update Framework"
39292>>>>>>>>>// They have all been placed in this central spot to make translations to various languages more convenient.
39292>>>>>>>>>//
39292>>>>>>>>>Use LanguageText.Pkg
39292>>>>>>>>>
39292>>>>>>>>>    // *** cSQLConnectionsIniFile.pkg Class Language Constants ***
39292>>>>>>>>>    Define CS_DUF_DuplicateConnectionIDPre  for "Cannot register connection ID"
39292>>>>>>>>>    Define CS_DUF_DuplicateConnectionIDPost for "This ID already exists."
39292>>>>>>>>>    // *** cSQLConnectionsHandler.pkg Class Language Constants ***
39292>>>>>>>>>    Define CS_DUF_SetupErrorcConnection     for "Cannot login to the database server as the cConnection hasn't been setup properly. Can't continue. Program will now exit."
39292>>>>>>>>>    Define CS_DUF_CannotLoginToServer       for "Could not login to the database server. Can't continue. Program will now exit."
39292>>>>>>>>>    Define CS_DUF_ErrorText                 for "\n\nError Text:"
39292>>>>>>>>>    // *** cDbUpdateFunctionLibrary.pkg Class Language Constants ***
39292>>>>>>>>>    Define CS_DUF_ConnectError              for "SQL error. Could not connect to the SQL database manager"
39292>>>>>>>>>    Define CS_DUF_AttachError               for "Could not attach to the database:"
39292>>>>>>>>>    Define CS_DUF_DeletingIndex             for "Deleting index"
39292>>>>>>>>>    Define CS_DUF_CopyingData               for "Copying data"
39292>>>>>>>>>    Define CS_DUF_CreatingIndex             for "Creating index"
39292>>>>>>>>>    Define CS_DUF_LoginToDbServerFailed     for  "Login failed to the database server. The following connect string was used:\n"
39292>>>>>>>>>    Define CS_DUF_DoYouWantToExit           for "Do you want to stop the database update and exit?"  
39292>>>>>>>>>    Define CS_DUF_NoIntFilesFound           for "No .int files found! Nothing was changed."
39292>>>>>>>>>    // *** cDbUpdateVersion.pkg Class Language Constants ***
39292>>>>>>>>>    Define CS_DUF_UpdateVersion             for "Updating database"
39292>>>>>>>>>    Define CS_DUF_UpdateFromVersion         for "from version"
39292>>>>>>>>>    Define CS_DUF_UpdateToVersion           for "to version:"
39292>>>>>>>>>    Define CS_DUF_DbUpdateTableMissing      for "Cannot open the 'DbVersion' table that is used when updating the database! Cannot continue!"
39292>>>>>>>>>    // *** cDbUpdateHandler.inc Language Constants ***
39292>>>>>>>>>    Define CS_DUF_DatabaseInUseShort        for "There are others using the application/database. Are you sure you still want to update the database?"
39292>>>>>>>>>    Define CS_DUF_DatabaseNeedsUpdate       for ("The database needs to be updated." + "\n\nATTENTION! The database may not be in use while this work is performed. Make sure that nobody else is using the application before clicking 'Yes' below.\n\n" + "Start update now?")
39292>>>>>>>>>    Define CS_DUF_HeaderUpdateText          for "Important!"
39292>>>>>>>>>    Define CS_DUF_DatabaseInUseText         for "There are others using the application/database or at least one table could NOT be opened exclusively. Please close all other applications using the database and try again. The Application will now close."
39292>>>>>>>>>    Define CS_DUF_WorkingHeaderText         for "Working!"
39292>>>>>>>>>    Define CS_DUF_WorkingUpdateText         for "The database is being updated. Please wait..."
39292>>>>>>>>>    Define CS_DUF_DatabaseUpdatedText       for "Ready! The database was updated."
39292>>>>>>>>>    Define CS_DUF_DatabaseCheckedText       for "Ready! The database was checked but no updates was needed."
39292>>>>>>>>>    Define CS_DUF_DbUpdatedErrorText        for "One or more errors occured while the database was updated. Please check the logfile in the data-folder.\n\nThe program will now close."
39292>>>>>>>>>    Define CS_DUF_UpdateInProgressTxt       for ("System locked!\n\nThe database is being updated. Please try again later...\n\n" * "The program will now close.")
39292>>>>>>>>>    // *** cDbUpdateHandler.pkg Class Language Constants ***
39292>>>>>>>>>    Define CS_DUF_DatabaseConnStringSpec    for "The database specified in the connection string: '"
39292>>>>>>>>>    Define CS_DUF_DatabaseDoesntExist       for "' doesn't exist!\n\nYou need to create it with a database management software or by using the 'SqlDatabaseCreate' function, which can be used in the 'OnPreUpdate' event of the cDbUpdateHandler object.\n\nThe program will now exit."
39292>>>>>>>>>    // *** cDbUpdateLogFile.pkg Class Language Constants ***   
39292>>>>>>>>>    Define CS_DUF_LogFileNotFound           for "Could not locate the log file:\n\n"
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>Use Statpnl.pkg
39292>>>>>>>
39292>>>>>>>
39292>>>>>>>    Global_Variable Handle ghoProgressBar // will contain the ID of the embedded progress bar.
39292>>>>>>>
39292>>>>>>>    Global_Variable Handle ghoProgressBarOverall // will contain the ID of the embedded progress bar with overall results
39292>>>>>>>
39292>>>>>>>Object Status_Panel is a cProcessStatusPanel
39294>>>>>>>    Set Size to 152 222
39295>>>>>>>    Set Border_Style to Border_Dialog
39296>>>>>>>    Set Icon to "Default.ico"
39297>>>>>>>    Move Self to ghoStatusPanel // this can be used throughout the applicaton to access this object
39298>>>>>>>
39298>>>>>>>    Property Boolean Cancel_Button_Visible_State True
39300>>>>>>>
39300>>>>>>>    Procedure Activate
39303>>>>>>>        Integer iSizeBefore
39303>>>>>>>        Get GuiSize to iSizeBefore
39304>>>>>>>        Forward Send Activate
39306>>>>>>>        Set GuiSize to (Hi(iSizeBefore)) (Low(iSizeBefore))
39307>>>>>>>    End_Procedure
39308>>>>>>>
39308>>>>>>>    Procedure End_Construct_Object
39311>>>>>>>        Forward Send End_Construct_Object
39313>>>>>>>        Set Label of oTitleTxt      to ""
39314>>>>>>>        Set Label of oTableNameTxt  to ""
39315>>>>>>>        Set Label of oMessageTxt    to ""
39316>>>>>>>        Set Label of oActionTxt     to ""
39317>>>>>>>    End_Procedure
39318>>>>>>>
39318>>>>>>>    Object oTitleTxt is a TextBox
39320>>>>>>>        Set Location to 5 21
39321>>>>>>>        Set Size to 8 179
39322>>>>>>>        Set Auto_Size_State to False
39323>>>>>>>        Set Justification_Mode  to jMode_Center
39324>>>>>>>        Set Label to "This is the Title Text"
39325>>>>>>>    End_Object
39326>>>>>>>
39326>>>>>>>    Object oTableNameTxt is a TextBox
39328>>>>>>>        Set Size to 19 204
39329>>>>>>>        Set Location to 18 9
39330>>>>>>>        Set Auto_Size_State to False
39331>>>>>>>        Set Justification_Mode to JMode_Left
39332>>>>>>>        Set Label to "This is the TableName Text"
39333>>>>>>>    End_Object
39334>>>>>>>
39334>>>>>>>    Object oMessageTxt is a TextBox
39336>>>>>>>        Set Location to 39 9
39337>>>>>>>        Set Size to 19 204
39338>>>>>>>        Set Auto_Size_State to False
39339>>>>>>>        Set Justification_Mode to JMode_Left
39340>>>>>>>        Set Label to "This is the Message text"
39341>>>>>>>    End_Object
39342>>>>>>>
39342>>>>>>>    Object oActionTxt is a TextBox
39344>>>>>>>        Set Size to 16 204
39345>>>>>>>        Set Location to 60 9
39346>>>>>>>        Set Auto_Size_State to False
39347>>>>>>>        Set Justification_Mode to JMode_Left
39348>>>>>>>        Set Label to "This is the Action Text"
39349>>>>>>>    End_Object
39350>>>>>>>
39350>>>>>>>    Object oStopButton is a Button
39352>>>>>>>        Set Location to 123 82
39353>>>>>>>        Set Label to C_$Cancel
39354>>>>>>>
39354>>>>>>>        Procedure OnClick 
39357>>>>>>>            Integer iRetval
39357>>>>>>>            Get YesNo_Box CS_DUF_DoYouWantToExit to iRetval
39358>>>>>>>            If (iRetval = MBR_Yes) Begin
39360>>>>>>>                Send Exit_Application
39361>>>>>>>            End
39361>>>>>>>>
39361>>>>>>>        End_Procedure
39362>>>>>>>
39362>>>>>>>    End_Object
39363>>>>>>>
39363>>>>>>>    Object oPercentage_tb is a TextBox
39365>>>>>>>        Set Location to 74 196
39366>>>>>>>        Set Size to 10 25
39367>>>>>>>//        Set Label to "% Done"
39367>>>>>>>    End_Object
39368>>>>>>>
39368>>>>>>>    Object oCopyRight is a TextBox
39370>>>>>>>        Set Location to 140 21
39371>>>>>>>        Set Size to 9 197
39372>>>>>>>        Set FontPointHeight to 8
39373>>>>>>>        Set Auto_Size_State to False
39374>>>>>>>        Set Justification_Mode  to jMode_Center
39375>>>>>>>        Set Label to "Copyright 2001-2024 RDC Tools International"
39376>>>>>>>    End_Object
39377>>>>>>>
39377>>>>>>>    Object oProgressBar is a cProgressBar
39379>>>>>>>        Set Size to 10 179
39380>>>>>>>        Set Location to 83 22
39381>>>>>>>        Set pbVisible to True // default
39382>>>>>>>        Move Self to ghoProgressBar // this can be used throughout your application to access the progress bar
39383>>>>>>>    End_Object
39384>>>>>>>
39384>>>>>>>    Procedure Set Progress_Bar_Visible_State Boolean bVisible
39387>>>>>>>        Set pbVisible of ghoProgressBar to bVisible
39388>>>>>>>    End_Procedure
39389>>>>>>>
39389>>>>>>>    Function Progress_Bar_Visible_State Returns Boolean
39392>>>>>>>        Boolean bVisible
39392>>>>>>>        Get pbVisible of ghoProgressBar to bVisible
39393>>>>>>>        Function_Return (bVisible)
39394>>>>>>>    End_Function
39395>>>>>>>
39395>>>>>>>    Object oProgressBarOverall is a cProgressBar
39397>>>>>>>        Set Size to 10 179
39398>>>>>>>        Set Location to 107 22
39399>>>>>>>        Set pbVisible to True // default
39400>>>>>>>        Move Self to ghoProgressBarOverall // this can be used throughout your application to access the progress bar
39401>>>>>>>    End_Object
39402>>>>>>>
39402>>>>>>>    Object oOverallProgress_tb is a TextBox
39404>>>>>>>        Set Size to 10 65
39405>>>>>>>        Set Location to 95 24
39406>>>>>>>        Set Label to "Overall Progress"
39407>>>>>>>    End_Object
39408>>>>>>>
39408>>>>>>>    Procedure Set Progress_Bar_Overall_Visible_State Boolean bVisible
39411>>>>>>>        Set pbVisible of ghoProgressBarOverall to bVisible 
39412>>>>>>>        Set Visible_State of oOverallProgress_tb to bVisible
39413>>>>>>>    End_Procedure
39414>>>>>>>
39414>>>>>>>    Function Progress_Bar_Overall_Visible_State Returns Boolean
39417>>>>>>>        Boolean bVisible
39417>>>>>>>        Get pbVisible of ghoProgressBarOverall to bVisible
39418>>>>>>>        Function_Return (bVisible)
39419>>>>>>>    End_Function
39420>>>>>>>
39420>>>>>>>    // These messages bind the standard cProcessStatusPanel interface to the actual
39420>>>>>>>    // objects defined within this instance of the status panel.
39420>>>>>>>
39420>>>>>>>    // note: all of the messages that change text should be forwarded
39420>>>>>>>    // as the forwarded messages allows the panel to paint when in a tight loop
39420>>>>>>>
39420>>>>>>>    Procedure Set Message_Text String sText
39423>>>>>>>        Set Label of oMessageTxt to sText
39424>>>>>>>        Forward Set Message_Text to sText
39426>>>>>>>    End_Procedure
39427>>>>>>>
39427>>>>>>>    Function Message_Text Returns String
39430>>>>>>>        Function_Return (Label(oMessageTxt))
39431>>>>>>>    End_Function
39432>>>>>>>
39432>>>>>>>    Procedure Set Action_Text String sText
39435>>>>>>>        Set Label of oActionTxt to sText
39436>>>>>>>        Forward Set Action_Text to sText
39438>>>>>>>    End_Procedure
39439>>>>>>>
39439>>>>>>>    Function Action_Text Returns String
39442>>>>>>>        Function_Return (Label(oActionTxt))
39443>>>>>>>    End_Function
39444>>>>>>>
39444>>>>>>>    Procedure Set Button_Text String sText
39447>>>>>>>        Set Label of oStopButton to sText
39448>>>>>>>        Forward Set Button_Text to sText
39450>>>>>>>    End_Procedure
39451>>>>>>>
39451>>>>>>>    Function Button_Text Returns String
39454>>>>>>>        Function_Return (Label(oStopButton))
39455>>>>>>>    End_Function
39456>>>>>>>
39456>>>>>>>    Procedure Set Title_Text String sText
39459>>>>>>>        Set Label of oTitleTxt to sText
39460>>>>>>>        Forward Set Title_Text to sText
39462>>>>>>>    End_Procedure
39463>>>>>>>
39463>>>>>>>    Function Title_Text Returns String
39466>>>>>>>        Function_Return (Label(oTitleTxt))
39467>>>>>>>    End_Function
39468>>>>>>>
39468>>>>>>>    Procedure Set TableName_Text String sText
39471>>>>>>>        Set Label of oTableNameTxt to sText
39472>>>>>>>    End_Procedure
39473>>>>>>>
39473>>>>>>>    Function TableName_Text Returns String
39476>>>>>>>        Function_Return (Label(oTableNameTxt))
39477>>>>>>>    End_Function
39478>>>>>>>
39478>>>>>>>    Procedure Set License_Text String sText
39481>>>>>>>//        Set Label of oLicense_txt to sText
39481>>>>>>>    End_Procedure 
39482>>>>>>>    
39482>>>>>>>    Procedure Set piMaximum Integer iSize
39485>>>>>>>        Set piMaximum of ghoProgressBar to iSize
39486>>>>>>>    End_Procedure  
39487>>>>>>>    
39487>>>>>>>    Procedure Set piAdvanceBy Integer iCount
39490>>>>>>>        Set piAdvanceBy of ghoProgressBar to iCount
39491>>>>>>>    End_Procedure
39492>>>>>>>
39492>>>>>>>    Procedure DoAdvance
39495>>>>>>>        Send DoAdvance of ghoProgressBar
39496>>>>>>>    End_Procedure
39497>>>>>>>
39497>>>>>>>    Procedure Set piPosition Integer iPos
39500>>>>>>>        Set piPosition of ghoProgressBar to iPos
39501>>>>>>>    End_Procedure
39502>>>>>>>    
39502>>>>>>>    // gets called when status panel is activated passing whether a button
39502>>>>>>>    // should appear
39502>>>>>>>    Procedure EnableCancelButton Boolean bEnable
39505>>>>>>>        Boolean bVisible
39505>>>>>>>        Get Cancel_Button_Visible_State to bVisible
39506>>>>>>>        If (bEnable = False) Begin
39508>>>>>>>            Set Visible_State of oStopButton to bVisible
39509>>>>>>>        End
39509>>>>>>>>
39509>>>>>>>        Set Enabled_State of oStopButton to bEnable
39510>>>>>>>    End_Procedure
39511>>>>>>>
39511>>>>>>>    Procedure Reset_StatusPanel
39514>>>>>>>        Set Allow_Cancel_State of ghoStatusPanel to True
39515>>>>>>>        Set Cancel_Button_Visible_State of ghoStatusPanel to True
39516>>>>>>>        Set Progress_Bar_Visible_State  of ghoStatusPanel to True
39517>>>>>>>        Set Progress_Bar_Overall_Visible_State of ghoProgressBarOverall to False
39518>>>>>>>    End_Procedure
39519>>>>>>>
39519>>>>>>>//    Object oProgressBar is a cProgressBar
39519>>>>>>>//        Move Self to ghoProgressBar
39519>>>>>>>//        Set Location to 1 25
39519>>>>>>>//        Set Size to 9 173
39519>>>>>>>//        Set piMinimum        to 0
39519>>>>>>>//        Set piMaximum        to 2000
39519>>>>>>>//        Set piAdvanceBy      to 100
39519>>>>>>>//        Set pbSmooth to True
39519>>>>>>>//
39519>>>>>>>//        // For some weird reason the application skin makes the coloring of the progressbar
39519>>>>>>>//        // to malfunction. By telling the CodeJock SkinFramework to skip this object, the
39519>>>>>>>//        // color will show correctly.
39519>>>>>>>//        Procedure Page Integer iPageObject
39519>>>>>>>//            Handle hWin
39519>>>>>>>//            Forward Send Page iPageObject
39519>>>>>>>//            If (ghoSkinFramework <> 0) Begin
39519>>>>>>>//                Get Window_Handle to hWin
39519>>>>>>>//                Send ComRemoveWindow of ghoSkinFramework hWin
39519>>>>>>>//            End
39519>>>>>>>//        End_Procedure
39519>>>>>>>//    End_Object
39519>>>>>>>
39519>>>>>>>End_Object
39520>>>>>>>
39520>>>>>Use cDbUpdateFunctionLibrary_Mixin.pkg  // Properties used by the cDbUpdateFunctionLibrary class.
Including file: cDbUpdateFunctionLibrary_Mixin.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cDbUpdateFunctionLibrary_Mixin.pkg)
39520>>>>>>>// *** Mixin Class For the cDbUpdateFunctionLibrary Class ***
39520>>>>>>>//
39520>>>>>>>// We need to create a mixin class for the library.
39520>>>>>>>// Why? Because we import the library to the cDbUpdateVersion class; that imports
39520>>>>>>>// all messages (functions & procedures) but all Properties are "lost", aka not imported by
39520>>>>>>>// the Import_Class_Protocol command. So we need a way to create our properties somewhere else...
39520>>>>>>>// Note: This class should _not_ have a construct_object defined.
39520>>>>>>>//
39520>>>>>>>Use VdfBase.pkg
39520>>>>>>>Use WinUuid.pkg
Including file: WinUuid.pkg    (C:\Program Files\DataFlex 24.0\Pkg\WinUuid.pkg)
39520>>>>>>>>>Use Unicode.Pkg
39520>>>>>>>>>
39520>>>>>>>>>External_Function WinAPI_UuidCreate "UuidCreate" Rpcrt4.dll ;    Pointer Uuid ;    Returns Integer
39521>>>>>>>>>
39521>>>>>>>>>External_Function WinAPI_UuidToString  "UuidToStringW" Rpcrt4.dll ;    Pointer pUuid ;    Pointer lpUUIDString ;    Returns Integer
39522>>>>>>>>>
39522>>>>>>>>>External_Function WinAPI_UuidCreateSequential "UuidCreateSequential" Rpcrt4.dll ;    Pointer pUuid ;    Returns Integer
39523>>>>>>>>>
39523>>>>>>>>>External_Function WinAPI_RpcStringFree "RpcStringFreeW" Rpcrt4.dll ;    Pointer pStr ;    Returns Integer
39524>>>>>>>>>
39524>>>>>>>>>
39524>>>>>>>>>// Returns a 'random' Universally Unique Identifier string as a 32 digit hex number.
39524>>>>>>>>>Function RandomHexUUID Global Returns String
39526>>>>>>>>>    Pointer pUUID pUUIDStr
39526>>>>>>>>>    Integer iRetval iOffset iChar
39526>>>>>>>>>    String sUUID
39526>>>>>>>>>    
39526>>>>>>>>>    Move (Alloc(16)) to pUUID
39527>>>>>>>>>    
39527>>>>>>>>>    Move (WinAPI_UuidCreate (pUUID)) to iRetval
39528>>>>>>>>>    
39528>>>>>>>>>    If (iRetval = 0) Begin
39530>>>>>>>>>        Move 0 to pUUIDStr
39531>>>>>>>>>        
39531>>>>>>>>>        Move (WinAPI_UuidToString (pUUID, AddressOf(pUUIDStr))) to iRetval
39532>>>>>>>>>        If (iRetval = 0) Begin
39534>>>>>>>>>            Move (PointerToWString(pUUIDStr)) to sUUID
39535>>>>>>>>>            Move (WinAPI_RpcStringFree (AddressOf (pUUIDStr))) to iRetval
39536>>>>>>>>>            
39536>>>>>>>>>            Move (Uppercase (sUUID)) to sUUID
39537>>>>>>>>>        End
39537>>>>>>>>>>
39537>>>>>>>>>    End
39537>>>>>>>>>>
39537>>>>>>>>>    
39537>>>>>>>>>    Move (Free(pUUID)) to iRetval
39538>>>>>>>>>    
39538>>>>>>>>>    Function_Return sUUID
39539>>>>>>>>>End_Function
39540>>>>>>>>>
39540>>>>>>>>>
39540>>>>>>>>>// Returns a sequential Universally Unique Identifier string as a 32 digit hex number.
39540>>>>>>>>>Function SeqHexUUID Global Returns String
39542>>>>>>>>>    Pointer pUUID pUUIDStr
39542>>>>>>>>>    Integer iRetval iOffset iChar
39542>>>>>>>>>    String sUUID
39542>>>>>>>>>    
39542>>>>>>>>>    Move (Alloc(16)) to pUUID
39543>>>>>>>>>    
39543>>>>>>>>>    Move (WinAPI_UuidCreateSequential (pUUID)) to iRetval
39544>>>>>>>>>    
39544>>>>>>>>>    If (iRetval = 0) Begin
39546>>>>>>>>>        Move 0 to pUUIDStr
39547>>>>>>>>>        
39547>>>>>>>>>        Move (WinAPI_UuidToString (pUUID, AddressOf(pUUIDStr))) to iRetval
39548>>>>>>>>>        If (iRetval = 0) Begin
39550>>>>>>>>>            Move (PointerToWString(pUUIDStr)) to sUUID
39551>>>>>>>>>            Move (WinAPI_RpcStringFree (AddressOf (pUUIDStr))) to iRetval
39552>>>>>>>>>            
39552>>>>>>>>>            Move (Uppercase (sUUID)) to sUUID
39553>>>>>>>>>        End
39553>>>>>>>>>>
39553>>>>>>>>>    End
39553>>>>>>>>>>
39553>>>>>>>>>    
39553>>>>>>>>>    Move (Free(pUUID)) to iRetval
39554>>>>>>>>>    
39554>>>>>>>>>    Function_Return sUUID
39555>>>>>>>>>End_Function
39556>>>>>>>Use cli.pkg
39556>>>>>>>Use sql.pkg
Including file: sql.pkg    (C:\Program Files\DataFlex 24.0\Pkg\sql.pkg)
39556>>>>>>>>>// Embedded SQL classes for use with Data Access Worldwide CLI    
39556>>>>>>>>>// Connectivty Kits.                                              
39556>>>>>>>>>Use CLI.pkg
39556>>>>>>>>>
39556>>>>>>>>>// Global storage for results
39556>>>>>>>>>Integer SQLResult
39556>>>>>>>>>
39556>>>>>>>>>// Embedded SQL function constants
39556>>>>>>>>>Define FUNC_SQLCONNECT             for 1000000
39556>>>>>>>>>Define FUNC_SQLFILECONNECT         for 1000001
39556>>>>>>>>>Define FUNC_SQLDISCONNECT          for 1000002
39556>>>>>>>>>Define FUNC_SQLOPEN                for 1000003
39556>>>>>>>>>Define FUNC_SQLCLOSE               for 1000004
39556>>>>>>>>>Define FUNC_SQLPREPARE             for 1000005
39556>>>>>>>>>Define FUNC_SQLEXECUTE             for 1000006
39556>>>>>>>>>Define FUNC_SQLEXECDIRECT          for 1000007
39556>>>>>>>>>Define FUNC_SQLFETCH               for 1000008
39556>>>>>>>>>Define FUNC_SQLCOLUMNINFO          for 1000009
39556>>>>>>>>>Define FUNC_SQLCOLUMNVALUE         for 1000010
39556>>>>>>>>>Define FUNC_SQLBINDFILE            for 1000011
39556>>>>>>>>>Define FUNC_SQLGETDATA             for 1000012
39556>>>>>>>>>Define FUNC_SQLCOLSTRINGATTRIBLEN  for 1000013
39556>>>>>>>>>Define FUNC_SQLCOLSTRINGATTRIB     for 1000014
39556>>>>>>>>>Define FUNC_SQLCOLINTATTRIB        for 1000015
39556>>>>>>>>>Define FUNC_SQLSTMTINTATTRIB       for 1000016
39556>>>>>>>>>Define FUNC_SQLSETPROCNAME         for 1000017
39556>>>>>>>>>Define FUNC_SQLSETPROCARG          for 1000018
39556>>>>>>>>>Define FUNC_SQLCALL                for 1000019
39556>>>>>>>>>Define FUNC_SQLGETPROCARGLEN       for 1000020
39556>>>>>>>>>Define FUNC_SQLGETPROCARG          for 1000021
39556>>>>>>>>>Define FUNC_SQLGETPROCRETVALLEN    for 1000022
39556>>>>>>>>>Define FUNC_SQLGETPROCRETVAL       for 1000023
39556>>>>>>>>>Define FUNC_SQLNEXTRESULTSET       for 1000024
39556>>>>>>>>>Define FUNC_SQLBUFFERSTATUS        for 1000025
39556>>>>>>>>>Define FUNC_SQLSETPROCSCHEMA       for 1000026
39556>>>>>>>>>Define FUNC_SQLGETMESSAGE          for 1000027
39556>>>>>>>>>Define FUNC_SQLSETSTMTINTATTRIB    for 1000028
39556>>>>>>>>>
39556>>>>>>>>>// Embedded SQL statement attribute constants
39556>>>>>>>>>Define SQLSTMTATTRIB_COLUMNCOUNT    for 1
39556>>>>>>>>>Define SQLSTMTATTRIB_ROWCOUNT       for 2
39556>>>>>>>>>Define SQLSTMTATTRIB_ROWCOUNT_TYPE  for 3
39556>>>>>>>>>Define SQLSTMTATTRIB_NUMMESSAGES    for 4
39556>>>>>>>>>Define SQLSTMTATTRIB_CURSOR_TYPE    for 5
39556>>>>>>>>>
39556>>>>>>>>>// Embedded SQL possible values for SQLSTMTATTRIB_CURSOR_TYPE
39556>>>>>>>>>Define SQL_CURSOR_FORWARD_ONLY      for 0
39556>>>>>>>>>Define SQL_CURSOR_KEYSET_DRIVEN     for 1
39556>>>>>>>>>Define SQL_CURSOR_DYNAMIC           for 2
39556>>>>>>>>>Define SQL_CURSOR_STATIC            for 3
39556>>>>>>>>>
39556>>>>>>>>>
39556>>>>>>>>>// Embedded SQL column attribute constants
39556>>>>>>>>>Define SQLCOLATTRIB_SIZE           for 1
39556>>>>>>>>>Define SQLCOLATTRIB_LENGTH         for 1
39556>>>>>>>>>Define SQLCOLATTRIB_PRECISION      for 2
39556>>>>>>>>>Define SQLCOLATTRIB_LABEL          for 3
39556>>>>>>>>>Define SQLCOLATTRIB_BASECOLUMNNAME for 4
39556>>>>>>>>>Define SQLCOLATTRIB_BASETABLENAME  for 5
39556>>>>>>>>>Define SQLCOLATTRIB_SQLTYPE        for 6
39556>>>>>>>>>Define SQLCOLATTRIB_NULLABLE       for 7
39556>>>>>>>>>Define SQLCOLATTRIB_DFTYPE         for 8
39556>>>>>>>>>
39556>>>>>>>>>
39556>>>>>>>>>// Types used for conversion with ConvertToXml
39556>>>>>>>>>Define esqlTime      for 8
39556>>>>>>>>>Define esqlDatetime  for 9
39556>>>>>>>>>
39556>>>>>>>>>// Global variables holding last executed embedded SQL connection and statement handles.
39556>>>>>>>>>Integer giLastSQLhdbc
39556>>>>>>>>>Integer giLastSQLhstmt
39556>>>>>>>>>
39556>>>>>>>>>Move -1 to giLastSQLhdbc
39557>>>>>>>>>Move -1 to giLastSQLhstmt
39558>>>>>>>>>
39558>>>>>>>>>Struct tSQLColumn
39558>>>>>>>>>    Integer iSQLType
39558>>>>>>>>>    Integer iSQLSize
39558>>>>>>>>>    Integer iSQLPrecision
39558>>>>>>>>>    Integer iVariableDataType
39558>>>>>>>>>End_Struct
39558>>>>>>>>>
39558>>>>>>>>>// Statement object for embedded sql                           
39558>>>>>>>>>//   An object is created for each statement. These will be children    
39558>>>>>>>>>//   of cSQLConnection objects which manage the create and destruction  
39558>>>>>>>>>//   of these.                                                          
39558>>>>>>>>>
39558>>>>>>>>>Class cSQLStatement is a cObject
39559>>>>>>>>>    
39559>>>>>>>>>    Procedure Construct_object
39561>>>>>>>>>        Forward Send Construct_object
39563>>>>>>>>>        
39563>>>>>>>>>        Property Handle  phCLIStatementHandle   0
39564>>>>>>>>>        Property Handle  phCLIConnectionHandle  0
39565>>>>>>>>>        Property String  psDriverID             ""
39566>>>>>>>>>        
39566>>>>>>>>>        Property Integer piLastColumn      0
39567>>>>>>>>>        Property Integer piLastArgument    0
39568>>>>>>>>>        Property Integer piBindFile        0
39569>>>>>>>>>        
39569>>>>>>>>>        Property Integer piColumnCount     0
39570>>>>>>>>>        
39570>>>>>>>>>        // True if there is at least 1 column with a variable length data type
39570>>>>>>>>>        Property Integer piHasVariableDataType  0
39571>>>>>>>>>        
39571>>>>>>>>>        // Max size of buffer for variable length data. Default 16000
39571>>>>>>>>>        Property Integer piMaxVariableBufferLength 16000
39572>>>>>>>>>        
39572>>>>>>>>>        // Allocated buffer for SQLGetData.
39572>>>>>>>>>        Property WString psVariableBuffer  ""
39573>>>>>>>>>        
39573>>>>>>>>>        // Allocated size of psVariableBuffer
39573>>>>>>>>>        Property Integer piVariableBufferLength 0
39574>>>>>>>>>        
39574>>>>>>>>>        // Stores column properties of a result set.
39574>>>>>>>>>        Property tSQLColumn[] paSQLColumns
39575>>>>>>>>>        
39575>>>>>>>>>        // piFetchResult is set by SQLFetchRowValues and SQLFetchResultSetValues
39575>>>>>>>>>        //   0    = Fetch returned no data.
39575>>>>>>>>>        //   <> 0 = Row fetched
39575>>>>>>>>>        Property Integer piFetchResult     0
39576>>>>>>>>>        
39576>>>>>>>>>        
39576>>>>>>>>>        Property String psDummyZeroDate              '0001-01-01'
39577>>>>>>>>>        Property String psDummyZeroDateMssqlDatetime '1753-01-01'
39578>>>>>>>>>        
39578>>>>>>>>>    End_Procedure
39579>>>>>>>>>    
39579>>>>>>>>>    // Store basic information about the statement.
39579>>>>>>>>>    Procedure StoreStatementInfo Handle hCLIStatementHandle String sDrvrId Handle hCLIConnectionHandle
39581>>>>>>>>>        
39581>>>>>>>>>        Set phCLIStatementHandle   to hCLIStatementHandle
39582>>>>>>>>>        Set phCLIConnectionHandle  to hCLIConnectionHandle
39583>>>>>>>>>        Set psDriverID             to sDrvrId
39584>>>>>>>>>        
39584>>>>>>>>>    End_Procedure
39585>>>>>>>>>    
39585>>>>>>>>>    
39585>>>>>>>>>    // Destroy the cSQLStatement object
39585>>>>>>>>>    Procedure DestroySQLStatement
39587>>>>>>>>>        Send Destroy
39588>>>>>>>>>    End_Procedure
39589>>>>>>>>>    
39589>>>>>>>>>    // Handle an error that has occurred while checking properties.
39589>>>>>>>>>    Procedure HandleError Integer ihstmt Integer ihdbc String sDrvrId String sOriginMsg
39591>>>>>>>>>        Integer iErrHandle
39591>>>>>>>>>        Integer iErrNum
39591>>>>>>>>>        String  sLocationInfo
39591>>>>>>>>>        
39591>>>>>>>>>        // Get the DataFlex statement identifier
39591>>>>>>>>>        Move Self to iErrHandle
39592>>>>>>>>>        
39592>>>>>>>>>        // Determine error number
39592>>>>>>>>>        If (ihstmt = 0) ;            Move CLIERR_SQLINVALID_CLI_STMT_HANDLE to iErrNum
39595>>>>>>>>>        Else If (ihdbc = 0) ;            Move CLIERR_SQLINVALID_CLI_CONN_HANDLE to iErrNum
39599>>>>>>>>>        Else If (sDrvrId = "") ;            Move CLIERR_SQLINVALID_DRIVER_ID to iErrNum
39603>>>>>>>>>        Else ;            Move CLIERR_SQL_ERROR to iErrNum
39605>>>>>>>>>        
39605>>>>>>>>>        // Create location ifnormation
39605>>>>>>>>>        Move "[" to sLocationInfo
39606>>>>>>>>>        If (sOriginMsg <> "") Begin
39608>>>>>>>>>            Move (Append(sLocationInfo, sOriginMsg)) to sLocationInfo
39609>>>>>>>>>            Move (Append(sLocationInfo, ", "))       to sLocationInfo
39610>>>>>>>>>        End
39610>>>>>>>>>>
39610>>>>>>>>>        Move (Append(sLocationInfo, "DataFlex hstmt = ")) to sLocationInfo
39611>>>>>>>>>        Move (Append(sLocationInfo, iErrHandle))          to sLocationInfo
39612>>>>>>>>>        Move (Append(sLocationInfo, "]"))                 to sLocationInfo
39613>>>>>>>>>        
39613>>>>>>>>>        // Generate the error
39613>>>>>>>>>        Error iErrNum sLocationInfo
39614>>>>>>>>>>
39614>>>>>>>>>    End_Procedure
39615>>>>>>>>>    
39615>>>>>>>>>    // Handle general error not related to the properties
39615>>>>>>>>>    Procedure StmtError Integer iErrNum String sErrText String sOriginMsg
39617>>>>>>>>>        Integer iErrHandle
39617>>>>>>>>>        String  sLocationInfo
39617>>>>>>>>>        
39617>>>>>>>>>        // Get the DataFlex statement identifier
39617>>>>>>>>>        Move Self to iErrHandle
39618>>>>>>>>>        
39618>>>>>>>>>        // Create location information
39618>>>>>>>>>        Move "[" to sLocationInfo
39619>>>>>>>>>        If (sOriginMsg <> "") Begin
39621>>>>>>>>>            Move (Append(sLocationInfo, sOriginMsg)) to sLocationInfo
39622>>>>>>>>>            Move (Append(sLocationInfo, ", "))       to sLocationInfo
39623>>>>>>>>>        End
39623>>>>>>>>>>
39623>>>>>>>>>        If (sErrtext <> "") Begin
39625>>>>>>>>>            Move (Append(sLocationInfo, sErrtext)) to sLocationInfo
39626>>>>>>>>>            Move (Append(sLocationInfo, ", "))     to sLocationInfo
39627>>>>>>>>>        End
39627>>>>>>>>>>
39627>>>>>>>>>        Move (Append(sLocationInfo, "DataFlex hstmt = ")) to sLocationInfo
39628>>>>>>>>>        Move (Append(sLocationInfo, iErrHandle))          to sLocationInfo
39629>>>>>>>>>        Move (Append(sLocationInfo, "]"))                 to sLocationInfo
39630>>>>>>>>>        
39630>>>>>>>>>        // Generate the error
39630>>>>>>>>>        Error iErrNum sLocationInfo
39631>>>>>>>>>>
39631>>>>>>>>>    End_Procedure
39632>>>>>>>>>    
39632>>>>>>>>>    // Handle an illegal attribute error
39632>>>>>>>>>    Procedure SQLIllegalAttribute String sErrText String sOriginMsg
39634>>>>>>>>>        Integer bReport
39634>>>>>>>>>        
39634>>>>>>>>>        Get_Attribute DF_REPORT_UNSUPPORTED_ATTRIBUTES to bReport
39637>>>>>>>>>        If (bReport) ;            Send StmtError CLIERR_SQLINVALID_ATTRIBUTE sErrtext sOriginMsg
39640>>>>>>>>>    End_Procedure
39641>>>>>>>>>    
39641>>>>>>>>>    // Check if a column number is legal
39641>>>>>>>>>    Function SQLPrivateColumnIsLegal Integer ihdbc String sDrvrId Integer ihstmt Integer iCol Returns Integer
39643>>>>>>>>>        Integer bLegal
39643>>>>>>>>>        Integer iNumColumns
39643>>>>>>>>>        
39643>>>>>>>>>        Get SQLPrivateStmtAttribute SQLSTMTATTRIB_COLUMNCOUNT ihdbc sDrvrId ihstmt to iNumColumns
39644>>>>>>>>>        If (iCol > 0 and iCol <= iNumColumns) ;            Move DFTRUE to bLegal
39647>>>>>>>>>        Else ;            Move DFFALSE to bLegal
39649>>>>>>>>>        
39649>>>>>>>>>        Function_Return bLegal
39650>>>>>>>>>    End_Function
39651>>>>>>>>>    
39651>>>>>>>>>    
39651>>>>>>>>>    
39651>>>>>>>>>    // Close a statement and free all alllocated resources
39651>>>>>>>>>    Procedure SQLClose
39653>>>>>>>>>        Integer ihdbc
39653>>>>>>>>>        Integer ihstmt
39653>>>>>>>>>        Integer iVoid
39653>>>>>>>>>        String  sDrvrId
39653>>>>>>>>>        String  sEmpty
39653>>>>>>>>>        
39653>>>>>>>>>        // Initialize
39653>>>>>>>>>        Move "" to sEmpty
39654>>>>>>>>>        
39654>>>>>>>>>        // Get the cli handles
39654>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39655>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39656>>>>>>>>>        Get psDriverId            to sDrvrId
39657>>>>>>>>>        
39657>>>>>>>>>        // Free the CLI handle
39657>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39659>>>>>>>>>            // Call the driver function to close
39659>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCLOSE ;                Callback Self ;                Passing ihdbc sEmpty ihstmt ;                Result iVoid
39664>>>>>>>>>            
39664>>>>>>>>>            Move -1 to giLastSQLhstmt
39665>>>>>>>>>            // Free the DataFlex handle
39665>>>>>>>>>            Send DestroySQLStatement
39666>>>>>>>>>        End
39666>>>>>>>>>>
39666>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLClose"
39668>>>>>>>>>    End_Procedure
39669>>>>>>>>>    
39669>>>>>>>>>    // Prepare a statement for execution
39669>>>>>>>>>    Procedure SQLPrepare String sStatement
39671>>>>>>>>>        Integer ihdbc
39671>>>>>>>>>        Integer ihstmt
39671>>>>>>>>>        Integer iVoid
39671>>>>>>>>>        String  sDrvrId
39671>>>>>>>>>        
39671>>>>>>>>>        // Get the cli handles
39671>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39672>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39673>>>>>>>>>        Get psDriverId            to sDrvrId
39674>>>>>>>>>        
39674>>>>>>>>>        // Prepare
39674>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39676>>>>>>>>>            // Call the driver function to prepare
39676>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLPREPARE ;                Callback Self ;                Passing ihdbc sStatement ihstmt ;                Result iVoid
39681>>>>>>>>>            Set piLastArgument to 0
39682>>>>>>>>>
39682>>>>>>>>>        End
39682>>>>>>>>>>
39682>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLPrepare"
39684>>>>>>>>>    End_Procedure
39685>>>>>>>>>    
39685>>>>>>>>>    Procedure SQLGetStatementAttributes
39687>>>>>>>>>        Integer ihdbc ihstmt iNumColumns iCol iMaxSize
39687>>>>>>>>>        String sMaxValue
39687>>>>>>>>>        tSQLColumn[] aSQLColumns
39687>>>>>>>>>        tSQLColumn[] aSQLColumns
39688>>>>>>>>>        
39688>>>>>>>>>        Integer iSqlType
39688>>>>>>>>>        Integer iSQLSize
39688>>>>>>>>>        Integer iSQLprecision
39688>>>>>>>>>        Integer iVariableDataType
39688>>>>>>>>>        
39688>>>>>>>>>        String  sDrvrId
39688>>>>>>>>>        
39688>>>>>>>>>        Integer iHasVariableDataType
39688>>>>>>>>>        
39688>>>>>>>>>        Move 0 to iHasVariableDataType
39689>>>>>>>>>        
39689>>>>>>>>>        
39689>>>>>>>>>        // Get the cli handles
39689>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39690>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39691>>>>>>>>>        Get psDriverId            to sDrvrId
39692>>>>>>>>>        
39692>>>>>>>>>        Get SQLPrivateStmtAttribute SQLSTMTATTRIB_COLUMNCOUNT ihdbc sDrvrId ihstmt to iNumColumns
39693>>>>>>>>>        
39693>>>>>>>>>        Set piColumnCount to iNumColumns
39694>>>>>>>>>        
39694>>>>>>>>>        // Fill columns array
39694>>>>>>>>>        For iCol from 1 to iNumColumns
39700>>>>>>>>>>
39700>>>>>>>>>            Move 0 to iVariableDataType
39701>>>>>>>>>            
39701>>>>>>>>>            Get SQLPrivateColAttribute iCol SQLCOLATTRIB_SQLTYPE ihdbc sDrvrId ihstmt to iSQLType
39702>>>>>>>>>            Get SQLPrivateColAttribute iCol SQLCOLATTRIB_SIZE ihdbc sDrvrId ihstmt to iSQLSize
39703>>>>>>>>>            Get SQLPrivateColAttribute iCol SQLCOLATTRIB_PRECISION ihdbc sDrvrId ihstmt to iSQLPrecision
39704>>>>>>>>>            
39704>>>>>>>>>            If ( (iSQLType = SQL_LONGVARCHAR) or (iSQLType = SQL_WLONGVARCHAR) ) Begin
39706>>>>>>>>>                // text type
39706>>>>>>>>>                Move 1 to iVariableDataType
39707>>>>>>>>>            End
39707>>>>>>>>>>
39707>>>>>>>>>            Else Begin
39708>>>>>>>>>                If (sDrvrId = "MSSQLDRV") Begin
39710>>>>>>>>>                    // SQL Server varchar(max) and nvarchar(max) types return Size = 0
39710>>>>>>>>>                    If ( ((iSQLType = SQL_VARCHAR) and (iSQLSize = 0) ) or ;                        ((iSQLType = SQL_WVARCHAR) and (iSQLSize = 0) ) ) Begin
39712>>>>>>>>>                        
39712>>>>>>>>>                        Move 1 to iVariableDataType
39713>>>>>>>>>                    End
39713>>>>>>>>>>
39713>>>>>>>>>                End
39713>>>>>>>>>>
39713>>>>>>>>>            End
39713>>>>>>>>>>
39713>>>>>>>>>            
39713>>>>>>>>>            Move iSqlType           to aSQLColumns[iCol].iSQLType
39714>>>>>>>>>            Move iSQLSize           to aSQLColumns[iCol].iSQLSize
39715>>>>>>>>>            Move iSQLPrecision      to aSQLColumns[iCol].iSQLPrecision
39716>>>>>>>>>            Move iVariableDataType  to aSQLColumns[iCol].iVariableDataType
39717>>>>>>>>>            
39717>>>>>>>>>            If (not(iVariableDataType)) Begin
39719>>>>>>>>>                If (iSQLSize > iMaxSize) Begin
39721>>>>>>>>>                    Move iSQLSize to iMaxSize
39722>>>>>>>>>                End
39722>>>>>>>>>>
39722>>>>>>>>>            End
39722>>>>>>>>>>
39722>>>>>>>>>            Else Begin
39723>>>>>>>>>                Move 1 to iHasVariableDataType
39724>>>>>>>>>            End
39724>>>>>>>>>>
39724>>>>>>>>>            
39724>>>>>>>>>        Loop
39725>>>>>>>>>>
39725>>>>>>>>>        
39725>>>>>>>>>        Set paSQLColumns   to aSQLColumns
39726>>>>>>>>>        Set piHasVariableDataType to iHasVariableDataType
39727>>>>>>>>>        
39727>>>>>>>>>    End_Procedure
39728>>>>>>>>>    
39728>>>>>>>>>    // Execute a prepared statement
39728>>>>>>>>>    Procedure SQLExecute
39730>>>>>>>>>        Integer ihdbc
39730>>>>>>>>>        Integer ihstmt
39730>>>>>>>>>        Integer iVoid
39730>>>>>>>>>        String  sDrvrId
39730>>>>>>>>>        String  sEmpty
39730>>>>>>>>>        
39730>>>>>>>>>        // Initialize
39730>>>>>>>>>        Move "" to sEmpty
39731>>>>>>>>>        
39731>>>>>>>>>        // Get the cli handles
39731>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39732>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39733>>>>>>>>>        Get psDriverId            to sDrvrId
39734>>>>>>>>>        
39734>>>>>>>>>        // Execute
39734>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39736>>>>>>>>>            // Call the driver function to execute
39736>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLEXECUTE ;                Callback Self ;                Passing ihdbc sEmpty ihstmt ;                Result iVoid
39741>>>>>>>>>            Send SQLGetStatementAttributes
39742>>>>>>>>>            Set piLastArgument to 0
39743>>>>>>>>>        End
39743>>>>>>>>>>
39743>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLExecute"
39745>>>>>>>>>    End_Procedure
39746>>>>>>>>>    
39746>>>>>>>>>    
39746>>>>>>>>>    
39746>>>>>>>>>    // Prepare and execute a statement
39746>>>>>>>>>    Procedure SQLExecDirect String sStatement
39748>>>>>>>>>        Integer ihdbc
39748>>>>>>>>>        Integer ihstmt
39748>>>>>>>>>        Integer iVoid
39748>>>>>>>>>        String  sDrvrId
39748>>>>>>>>>        
39748>>>>>>>>>        // Get the cli handles
39748>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39749>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39750>>>>>>>>>        Get psDriverId            to sDrvrId
39751>>>>>>>>>        
39751>>>>>>>>>        // ExecDirect
39751>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39753>>>>>>>>>            // Call the driver function to execdirect
39753>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLEXECDIRECT ;                Callback Self ;                Passing ihdbc sStatement ihstmt ;                Result iVoid
39758>>>>>>>>>            Send SQLGetStatementAttributes
39759>>>>>>>>>        End
39759>>>>>>>>>>
39759>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLExecDirect"
39761>>>>>>>>>    End_Procedure
39762>>>>>>>>>    
39762>>>>>>>>>    // Fetch the next row
39762>>>>>>>>>    // Returns  : 0   = No more data
39762>>>>>>>>>    //<>0 = Success
39762>>>>>>>>>    Function SQLFetch Returns Integer
39764>>>>>>>>>        Integer ihdbc
39764>>>>>>>>>        Integer ihstmt
39764>>>>>>>>>        Integer iResult
39764>>>>>>>>>        String  sDrvrId
39764>>>>>>>>>        String  sEmpty
39764>>>>>>>>>        
39764>>>>>>>>>        // Initialize
39764>>>>>>>>>        Move "" to sEmpty
39765>>>>>>>>>        Move 0  to iResult
39766>>>>>>>>>        
39766>>>>>>>>>        // Get the cli handles
39766>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39767>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39768>>>>>>>>>        Get psDriverId            to sDrvrId
39769>>>>>>>>>        
39769>>>>>>>>>        // Fetch
39769>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39771>>>>>>>>>            Move False to Err
39772>>>>>>>>>            
39772>>>>>>>>>            // Call the driver function to fetch
39772>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLFETCH Callback Self Passing ihdbc sEmpty ihstmt Result iResult
39777>>>>>>>>>            
39777>>>>>>>>>            // If something went wrong, adjust the result
39777>>>>>>>>>            If (Err) ;                Move 0 to iResult
39780>>>>>>>>>            
39780>>>>>>>>>            Set piLastcolumn to 0
39781>>>>>>>>>        End
39781>>>>>>>>>>
39781>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLFetch"
39783>>>>>>>>>        
39783>>>>>>>>>        Function_Return iResult
39784>>>>>>>>>    End_Function
39785>>>>>>>>>    
39785>>>>>>>>>    // Fetch the next row and return an array with all column values
39785>>>>>>>>>    // Returns  : Array of strings with all column values
39785>>>>>>>>>    // Sets piFetchResult property
39785>>>>>>>>>    //   0    = No more data
39785>>>>>>>>>    //   <> 0 = Success
39785>>>>>>>>>    Function SQLFetchRowValues Returns String[]
39787>>>>>>>>>        
39787>>>>>>>>>        String[] asValues
39788>>>>>>>>>        
39788>>>>>>>>>        tSQLColumn[] aSQLColumns
39788>>>>>>>>>        tSQLColumn[] aSQLColumns
39789>>>>>>>>>        
39789>>>>>>>>>        Integer ihdbc
39789>>>>>>>>>        Integer ihstmt
39789>>>>>>>>>        Integer iResult iVoid
39789>>>>>>>>>        Integer iColCount iCol
39789>>>>>>>>>        String  sDrvrId
39789>>>>>>>>>        String  sEmpty
39789>>>>>>>>>        Longptr pResultWStr
39789>>>>>>>>>        WString wVariableResult
39789>>>>>>>>>        Integer iHasVariableDataType
39789>>>>>>>>>        Integer iLen
39789>>>>>>>>>        Integer iVariableBufferLength
39789>>>>>>>>>        
39789>>>>>>>>>        // Initialize
39789>>>>>>>>>        Move "" to sEmpty
39790>>>>>>>>>        Move 0  to iResult
39791>>>>>>>>>        
39791>>>>>>>>>        // Get the cli handles
39791>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39792>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39793>>>>>>>>>        Get psDriverId            to sDrvrId
39794>>>>>>>>>        
39794>>>>>>>>>        Get paSQLColumns to aSQLColumns
39795>>>>>>>>>        Get piColumnCount to iColCount
39796>>>>>>>>>        Get piHasVariableDataType to iHasVariableDataType
39797>>>>>>>>>        
39797>>>>>>>>>        If (iHasVariableDataType) Begin
39799>>>>>>>>>            
39799>>>>>>>>>            Get piVariableBufferLength      to iVariableBufferLength
39800>>>>>>>>>            Get piMaxVariableBufferLength   to iLen
39801>>>>>>>>>            
39801>>>>>>>>>            If (iLen > iVariableBufferLength) Begin
39803>>>>>>>>>                // Allocate
39803>>>>>>>>>                Move (Repeat(' ', iLen)) to wVariableResult
39804>>>>>>>>>                
39804>>>>>>>>>                Set piVariableBufferLength to iLen
39805>>>>>>>>>                Set psVariableBuffer       to wVariableResult
39806>>>>>>>>>                
39806>>>>>>>>>                Get piVariableBufferLength to iVariableBufferLength
39807>>>>>>>>>            End
39807>>>>>>>>>>
39807>>>>>>>>>        End
39807>>>>>>>>>>
39807>>>>>>>>>        
39807>>>>>>>>>        // Fetch
39807>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39809>>>>>>>>>            Move (False) to Err
39810>>>>>>>>>            
39810>>>>>>>>>            // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
39810>>>>>>>>>            // in the next FUNC_SQLCOLUMNVALUE call.
39810>>>>>>>>>            // If hdbc and hstmt have not changed since the last call we don't have to set it.
39810>>>>>>>>>            If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
39812>>>>>>>>>                // Setup function arguments
39812>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO Callback 0 Passing ihdbc iCol ihstmt Result iVoid
39817>>>>>>>>>                Move ihstmt to giLastSQLhstmt
39818>>>>>>>>>                Move ihdbc to giLastSQLhdbc
39819>>>>>>>>>            End
39819>>>>>>>>>>
39819>>>>>>>>>            
39819>>>>>>>>>            // Call the driver function to fetch
39819>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLFETCH Callback 0 Passing ihdbc sEmpty ihstmt Result iResult
39824>>>>>>>>>            
39824>>>>>>>>>            // If something went wrong, adjust the result
39824>>>>>>>>>            If (Err) ;                Move 0 to iResult
39827>>>>>>>>>            
39827>>>>>>>>>            If (iResult) Begin
39829>>>>>>>>>                For iCol from 1 to iColCount
39835>>>>>>>>>>
39835>>>>>>>>>                    
39835>>>>>>>>>                    If (not(aSQLColumns[iCol].iVariableDataType)) Begin
39837>>>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNVALUE ;                            Callback 0 ;                            Passing sEmpty sEmpty iCol ;                            Result pResultWStr
39842>>>>>>>>>                            
39842>>>>>>>>>                        If (pResultWStr) Begin
39844>>>>>>>>>                            Move (CString(PointerToWString(pResultWStr))) to asValues[iCol - 1]
39845>>>>>>>>>                        End
39845>>>>>>>>>>
39845>>>>>>>>>                        Else Begin
39846>>>>>>>>>                            Move "" to asValues[iCol - 1]
39847>>>>>>>>>                        End
39847>>>>>>>>>>
39847>>>>>>>>>                        
39847>>>>>>>>>                    End
39847>>>>>>>>>>
39847>>>>>>>>>                    Else Begin
39848>>>>>>>>>                        Get psVariableBuffer       to wVariableResult
39849>>>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLGETDATA ;                            Callback 0 ;                            Passing iCol iVariableBufferLength (AddressOf(wVariableResult));                            Result iVoid
39854>>>>>>>>>                        
39854>>>>>>>>>                        Move (CString(wVariableResult)) to asValues[iCol - 1]
39855>>>>>>>>>                    End
39855>>>>>>>>>>
39855>>>>>>>>>                    
39855>>>>>>>>>                Loop
39856>>>>>>>>>>
39856>>>>>>>>>            End
39856>>>>>>>>>>
39856>>>>>>>>>        End
39856>>>>>>>>>>
39856>>>>>>>>>        Else Begin
39857>>>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLFetchRowValues"
39858>>>>>>>>>        End
39858>>>>>>>>>>
39858>>>>>>>>>        
39858>>>>>>>>>        Set piFetchResult to iResult
39859>>>>>>>>>        
39859>>>>>>>>>        Function_Return asValues
39860>>>>>>>>>        
39860>>>>>>>>>    End_Function
39861>>>>>>>>>    
39861>>>>>>>>>    // Fetch a complete result set.
39861>>>>>>>>>    // Returns  : 2-dimensional array of strings with result set
39861>>>>>>>>>    // Sets piFetchResult property
39861>>>>>>>>>    //   0    = No more data
39861>>>>>>>>>    //   <> 0 = Success
39861>>>>>>>>>    Function SQLFetchResultsetValues Returns String[][]
39863>>>>>>>>>        
39863>>>>>>>>>        String[][] asValues
39864>>>>>>>>>        
39864>>>>>>>>>        Integer ihdbc ihstmt iResult iVoid iColCount iCol iRow
39864>>>>>>>>>        String sDrvrId sEmpty sMax
39864>>>>>>>>>        Longptr pResultWStr
39864>>>>>>>>>        WString wResult
39864>>>>>>>>>        
39864>>>>>>>>>        tSQLColumn[] aSQLColumns
39864>>>>>>>>>        tSQLColumn[] aSQLColumns
39865>>>>>>>>>        WString  wVariableResult
39865>>>>>>>>>        Integer iHasVariableDataType
39865>>>>>>>>>        Integer iLen
39865>>>>>>>>>        Integer iVariableBufferLength
39865>>>>>>>>>        
39865>>>>>>>>>        // Initialize
39865>>>>>>>>>        Move "" to sEmpty
39866>>>>>>>>>        Move 0  to iResult
39867>>>>>>>>>        
39867>>>>>>>>>        // Get the cli handles
39867>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39868>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39869>>>>>>>>>        Get psDriverId            to sDrvrId
39870>>>>>>>>>        
39870>>>>>>>>>        // Fetch
39870>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39872>>>>>>>>>            Move False to Err
39873>>>>>>>>>            
39873>>>>>>>>>            // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
39873>>>>>>>>>            // in the next FUNC_SQLCOLUMNVALUE call.
39873>>>>>>>>>            // If hdbc and hstmt have not changed since the last call we don't have to set it.
39873>>>>>>>>>            If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
39875>>>>>>>>>                // Setup function arguments
39875>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO Callback 0 Passing ihdbc iCol ihstmt Result iVoid
39880>>>>>>>>>                Move ihstmt to giLastSQLhstmt
39881>>>>>>>>>                Move ihdbc to giLastSQLhdbc
39882>>>>>>>>>            End
39882>>>>>>>>>>
39882>>>>>>>>>            
39882>>>>>>>>>            Get piColumnCount to iColCount
39883>>>>>>>>>            If (iColCount) Begin
39885>>>>>>>>>                Get paSQLColumns to aSQLColumns
39886>>>>>>>>>                Get piHasVariableDataType to iHasVariableDataType
39887>>>>>>>>>                If (iHasVariableDataType) Begin
39889>>>>>>>>>                    Get piVariableBufferLength      to iVariableBufferLength
39890>>>>>>>>>                    Get piMaxVariableBufferLength   to iLen
39891>>>>>>>>>                    If (iLen > iVariableBufferLength) Begin
39893>>>>>>>>>                        // Allocate
39893>>>>>>>>>                        Move (Repeat(' ', iLen)) to wVariableResult
39894>>>>>>>>>                        
39894>>>>>>>>>                        Set piVariableBufferLength to iLen
39895>>>>>>>>>                        Set psVariableBuffer       to wVariableResult
39896>>>>>>>>>                        
39896>>>>>>>>>                        Get piVariableBufferLength to iVariableBufferLength
39897>>>>>>>>>                    End
39897>>>>>>>>>>
39897>>>>>>>>>                    Else Begin
39898>>>>>>>>>                        Set psVariableBuffer       to wVariableResult
39899>>>>>>>>>                    End
39899>>>>>>>>>>
39899>>>>>>>>>                End
39899>>>>>>>>>>
39899>>>>>>>>>                
39899>>>>>>>>>                // Call the driver function to fetch
39899>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLFETCH Callback Self Passing ihdbc sEmpty ihstmt Result iResult
39904>>>>>>>>>                If (Err) ;                    Move 0 to iResult
39907>>>>>>>>>                
39907>>>>>>>>>                While (iResult <> 0)
39911>>>>>>>>>                    
39911>>>>>>>>>                    For iCol from 1 to (iColCount)
39917>>>>>>>>>>
39917>>>>>>>>>                        
39917>>>>>>>>>                        If (not(aSQLColumns[iCol].iVariableDataType)) Begin
39919>>>>>>>>>                            
39919>>>>>>>>>                            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNVALUE ;                                Callback 0 ;                                Passing sEmpty sEmpty iCol ;                                Result pResultWStr
39924>>>>>>>>>                            
39924>>>>>>>>>                            If (pResultWStr) Begin
39926>>>>>>>>>                                Move (CString(PointerToWString(pResultWStr))) to asValues[iRow][iCol - 1]
39927>>>>>>>>>                            End
39927>>>>>>>>>>
39927>>>>>>>>>                            Else Begin
39928>>>>>>>>>                                Move "" to asValues[iRow][iCol - 1]
39929>>>>>>>>>                            End
39929>>>>>>>>>>
39929>>>>>>>>>                        End
39929>>>>>>>>>>
39929>>>>>>>>>                        Else Begin
39930>>>>>>>>>                            //Variable data
39930>>>>>>>>>                            Move wVariableResult to wResult
39931>>>>>>>>>                            Call_Driver 0 sDrvrId Function FUNC_SQLGETDATA ;                                Callback 0 ;                                Passing iCol iVariableBufferLength (AddressOf(wResult)) ;                                Result iVoid
39936>>>>>>>>>                            
39936>>>>>>>>>                            Move (CString(wResult)) to asValues[iRow][iCol - 1]
39937>>>>>>>>>                        End
39937>>>>>>>>>>
39937>>>>>>>>>                    Loop
39938>>>>>>>>>>
39938>>>>>>>>>                    
39938>>>>>>>>>                    Increment iRow
39939>>>>>>>>>                    
39939>>>>>>>>>                    // Call the driver function to fetch
39939>>>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLFETCH Callback Self Passing ihdbc sEmpty ihstmt Result iResult
39944>>>>>>>>>                    If (Err) ;                        Move 0 to iResult
39947>>>>>>>>>                    
39947>>>>>>>>>                Loop
39948>>>>>>>>>>
39948>>>>>>>>>            End
39948>>>>>>>>>>
39948>>>>>>>>>        End
39948>>>>>>>>>>
39948>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLFetchResultsetValues"
39950>>>>>>>>>        
39950>>>>>>>>>        Set piFetchResult to iResult
39951>>>>>>>>>        
39951>>>>>>>>>        Function_Return asValues
39952>>>>>>>>>    End_Function
39953>>>>>>>>>    
39953>>>>>>>>>    // Get the next column
39953>>>>>>>>>    Function SQLNextColumn Returns String
39955>>>>>>>>>        Integer iCol
39955>>>>>>>>>        String  sResult
39955>>>>>>>>>        
39955>>>>>>>>>        Get piLastColumn to iCol
39956>>>>>>>>>        Increment iCol
39957>>>>>>>>>        Get SQLColumnValue iCol to sResult
39958>>>>>>>>>        Set piLastColumn to iCol
39959>>>>>>>>>        
39959>>>>>>>>>        Function_Return sResult
39960>>>>>>>>>    End_Function
39961>>>>>>>>>    
39961>>>>>>>>>    
39961>>>>>>>>>    // Returns the native type of a column
39961>>>>>>>>>    Function SQLColumnType Integer iCol Returns Integer
39963>>>>>>>>>        Integer ihdbc
39963>>>>>>>>>        Integer ihstmt
39963>>>>>>>>>        String  sDrvrId
39963>>>>>>>>>        Integer iSQLType
39963>>>>>>>>>        Integer iColumns
39963>>>>>>>>>        
39963>>>>>>>>>        tSQLColumn[] aSQLColumns
39963>>>>>>>>>        tSQLColumn[] aSQLColumns
39964>>>>>>>>>        
39964>>>>>>>>>        // Get the cli handles
39964>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39965>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39966>>>>>>>>>        Get psDriverId            to sDrvrId
39967>>>>>>>>>        
39967>>>>>>>>>        // Get the value
39967>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39969>>>>>>>>>            
39969>>>>>>>>>            Get paSQLColumns   to aSQLColumns
39970>>>>>>>>>            Move (SizeOfArray(aSQLColumns)) to iColumns
39971>>>>>>>>>            
39971>>>>>>>>>            If (iCol >= 1 and iCol <= iColumns) Begin
39973>>>>>>>>>                Move aSQLColumns[iCol].iSQLType to iSQLType
39974>>>>>>>>>            End
39974>>>>>>>>>>
39974>>>>>>>>>            Else Begin
39975>>>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLColumnType"
39976>>>>>>>>>            End
39976>>>>>>>>>>
39976>>>>>>>>>        End
39976>>>>>>>>>>
39976>>>>>>>>>        Else Begin
39977>>>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLColumnType"
39978>>>>>>>>>        End
39978>>>>>>>>>>
39978>>>>>>>>>        
39978>>>>>>>>>        Function_Return iSQLType
39979>>>>>>>>>    End_Function
39980>>>>>>>>>    
39980>>>>>>>>>    // Returns the size (max length) of a column
39980>>>>>>>>>    Function SQLColumnSize Integer iCol Returns Integer
39982>>>>>>>>>        Integer ihdbc
39982>>>>>>>>>        Integer ihstmt
39982>>>>>>>>>        String  sDrvrId
39982>>>>>>>>>        Integer iSQLSize
39982>>>>>>>>>        Integer iColumns
39982>>>>>>>>>        
39982>>>>>>>>>        tSQLColumn[] aSQLColumns
39982>>>>>>>>>        tSQLColumn[] aSQLColumns
39983>>>>>>>>>        
39983>>>>>>>>>        // Get the cli handles
39983>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39984>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39985>>>>>>>>>        Get psDriverId            to sDrvrId
39986>>>>>>>>>        
39986>>>>>>>>>        // Get the value
39986>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39988>>>>>>>>>            
39988>>>>>>>>>            Get paSQLColumns   to aSQLColumns
39989>>>>>>>>>            Move (SizeOfArray(aSQLColumns)) to iColumns
39990>>>>>>>>>            
39990>>>>>>>>>            If (iCol >= 1 and iCol <= iColumns) Begin
39992>>>>>>>>>                Move aSQLColumns[iCol].iSQLSize to iSQLSize
39993>>>>>>>>>            End
39993>>>>>>>>>>
39993>>>>>>>>>            Else Begin
39994>>>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLColumnSize"
39995>>>>>>>>>            End
39995>>>>>>>>>>
39995>>>>>>>>>        End
39995>>>>>>>>>>
39995>>>>>>>>>        Else Begin
39996>>>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLColumnSize"
39997>>>>>>>>>        End
39997>>>>>>>>>>
39997>>>>>>>>>        
39997>>>>>>>>>        Function_Return iSQLSize
39998>>>>>>>>>    End_Function
39999>>>>>>>>>    
39999>>>>>>>>>    //  Returns 1 for variable length datatypes.
39999>>>>>>>>>    //  For example SQL Server varchar(max) or text type
39999>>>>>>>>>    //  The data of variable length datatype columns should be retrieved with SQLGetData
39999>>>>>>>>>    Function SQLColumnVariableDatatype Integer iCol Returns Integer
40001>>>>>>>>>        Integer ihdbc
40001>>>>>>>>>        Integer ihstmt
40001>>>>>>>>>        String  sDrvrId
40001>>>>>>>>>        Integer iVariableDataType
40001>>>>>>>>>        Integer iColumns
40001>>>>>>>>>        
40001>>>>>>>>>        tSQLColumn[] aSQLColumns
40001>>>>>>>>>        tSQLColumn[] aSQLColumns
40002>>>>>>>>>        
40002>>>>>>>>>        // Get the cli handles
40002>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40003>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40004>>>>>>>>>        Get psDriverId            to sDrvrId
40005>>>>>>>>>        
40005>>>>>>>>>        // Get the value
40005>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40007>>>>>>>>>            
40007>>>>>>>>>            Get paSQLColumns   to aSQLColumns
40008>>>>>>>>>            Move (SizeOfArray(aSQLColumns)) to iColumns
40009>>>>>>>>>            
40009>>>>>>>>>            If (iCol >= 1 and iCol <= iColumns) Begin
40011>>>>>>>>>                Move aSQLColumns[iCol].iVariableDataType to iVariableDataType
40012>>>>>>>>>            End
40012>>>>>>>>>>
40012>>>>>>>>>            Else Begin
40013>>>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLColumnVariableDatatype"
40014>>>>>>>>>            End
40014>>>>>>>>>>
40014>>>>>>>>>        End
40014>>>>>>>>>>
40014>>>>>>>>>        Else Begin
40015>>>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLColumnVariableDatatype"
40016>>>>>>>>>        End
40016>>>>>>>>>>
40016>>>>>>>>>        
40016>>>>>>>>>        Function_Return iVariableDataType
40017>>>>>>>>>    End_Function
40018>>>>>>>>>    
40018>>>>>>>>>    
40018>>>>>>>>>    // Return the value of a column in a fetched row of a given
40018>>>>>>>>>    // statement.
40018>>>>>>>>>    Function SQLColumnValue Integer iCol Returns String
40020>>>>>>>>>        Integer ihdbc
40020>>>>>>>>>        Integer ihstmt
40020>>>>>>>>>        String  sDrvrId sResult
40020>>>>>>>>>        Longptr pResultWStr
40020>>>>>>>>>        
40020>>>>>>>>>        Integer iVoid
40020>>>>>>>>>        Integer iColSize
40020>>>>>>>>>        Integer iColPrecision
40020>>>>>>>>>        String  sEmpty
40020>>>>>>>>>        Integer bLegalColumn
40020>>>>>>>>>        
40020>>>>>>>>>        // Initialize
40020>>>>>>>>>        Move "" to sResult
40021>>>>>>>>>        
40021>>>>>>>>>        // Get the cli handles
40021>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40022>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40023>>>>>>>>>        Get psDriverId            to sDrvrId
40024>>>>>>>>>        
40024>>>>>>>>>        // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
40024>>>>>>>>>        // in the next FUNC_SQLCOLUMNVALUE call.
40024>>>>>>>>>        // If hdbc and hstmt have not changed since the last call we don't have to set it.
40024>>>>>>>>>        If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
40026>>>>>>>>>            // Setup function arguments
40026>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback 0 ;                Passing ihdbc iCol ihstmt ;                Result iVoid
40031>>>>>>>>>            Move ihstmt to giLastSQLhstmt
40032>>>>>>>>>            Move ihdbc to giLastSQLhdbc
40033>>>>>>>>>        End
40033>>>>>>>>>>
40033>>>>>>>>>        
40033>>>>>>>>>        If (iCol >= 1 and iCol <= piColumnCount(Self)) Begin
40035>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNVALUE ;                Callback 0 ;                Passing sResult sEmpty iCol ;                Result pResultWStr
40040>>>>>>>>>            
40040>>>>>>>>>            If (pResultWStr) Begin
40042>>>>>>>>>                Move (PointerToWString(pResultWStr)) to sResult
40043>>>>>>>>>            End
40043>>>>>>>>>>
40043>>>>>>>>>            Else Begin
40044>>>>>>>>>                Move "" to sResult
40045>>>>>>>>>            End
40045>>>>>>>>>>
40045>>>>>>>>>        End
40045>>>>>>>>>>
40045>>>>>>>>>        Else Begin
40046>>>>>>>>>            Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLColumnValue"
40047>>>>>>>>>        End
40047>>>>>>>>>>
40047>>>>>>>>>        
40047>>>>>>>>>        Function_Return sResult
40048>>>>>>>>>        
40048>>>>>>>>>    End_Function
40049>>>>>>>>>    
40049>>>>>>>>>    // Add a file to the files used to place the statement result in.
40049>>>>>>>>>    Procedure SQLBindFile Integer iFileNum
40051>>>>>>>>>        Integer ihdbc
40051>>>>>>>>>        Integer ihstmt
40051>>>>>>>>>        Integer iVoid
40051>>>>>>>>>        String  sDrvrId
40051>>>>>>>>>        String  sFileType
40051>>>>>>>>>        Integer bIsOpen
40051>>>>>>>>>        
40051>>>>>>>>>        // Get the cli handles
40051>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40052>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40053>>>>>>>>>        Get psDriverId            to sDrvrId
40054>>>>>>>>>        
40054>>>>>>>>>        // If a file number is not passed see if we can use the statement's
40054>>>>>>>>>        // default file number which is usually set with SetFileConnection
40054>>>>>>>>>        If (iFileNum = 0) Begin
40056>>>>>>>>>            Get piBindFile to iFileNum
40057>>>>>>>>>            If (iFileNum = 0) Begin
40059>>>>>>>>>                // Logic error, if 0 is passed as filenumber, piBindFile should be set.
40059>>>>>>>>>                Send StmtError CLIERR_SQLINVALID_BIND_FILE "piBindFile should be set" "SQLBindFile"
40060>>>>>>>>>                
40060>>>>>>>>>                Move 0 to SQLResult
40061>>>>>>>>>                Procedure_Return
40062>>>>>>>>>            End
40062>>>>>>>>>>
40062>>>>>>>>>        End
40062>>>>>>>>>>
40062>>>>>>>>>        
40062>>>>>>>>>        // Bind the file
40062>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40064>>>>>>>>>            // Chek if the file is open
40064>>>>>>>>>            Get_Attribute DF_FILE_OPENED of iFileNum to bIsOpen
40067>>>>>>>>>            If (bIsOpen) Begin
40069>>>>>>>>>                // Check if the file has the correct type
40069>>>>>>>>>                Get_Attribute DF_FILE_DRIVER of iFileNum to sFileType
40072>>>>>>>>>                If (sFileType = sDrvrId) Begin
40074>>>>>>>>>                    // Call the driver function to add a file to a statement
40074>>>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLBINDFILE ;                        Callback Self ;                        Passing ihdbc iFileNum ihstmt ;                        Result iVoid
40079>>>>>>>>>                End
40079>>>>>>>>>>
40079>>>>>>>>>                Else ;                    Send StmtError CLIERR_SQLINVALID_BIND_FILE ("File" * String(iFileNum) * "type incompatible with statement ("  + sFileType + ")") "SQLBindFile"
40081>>>>>>>>>            End
40081>>>>>>>>>>
40081>>>>>>>>>            Else ;                Send StmtError CLIERR_SQLINVALID_BIND_FILE ("File not open (number =" * String(iFileNum) + ")") "SQLBindFile"
40083>>>>>>>>>        End
40083>>>>>>>>>>
40083>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLBindFile"
40085>>>>>>>>>    End_Procedure
40086>>>>>>>>>    
40086>>>>>>>>>    
40086>>>>>>>>>    
40086>>>>>>>>>    // Get data of a column.                                  
40086>>>>>>>>>    Function SQLGetData Integer iCol Integer iLen Returns String
40088>>>>>>>>>        Integer ihdbc
40088>>>>>>>>>        Integer ihstmt
40088>>>>>>>>>        Integer iVoid
40088>>>>>>>>>        Integer iColSize
40088>>>>>>>>>        Integer iResult
40088>>>>>>>>>        String  sDrvrId
40088>>>>>>>>>        WString wResult
40088>>>>>>>>>        String  sEmpty
40088>>>>>>>>>        Integer bLegalColumn
40088>>>>>>>>>        
40088>>>>>>>>>        Integer iVariableBufferLength
40088>>>>>>>>>        
40088>>>>>>>>>        // Initialize
40088>>>>>>>>>        Move "" to sEmpty
40089>>>>>>>>>        Move 0 to iResult
40090>>>>>>>>>        
40090>>>>>>>>>        // Get the cli handles
40090>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40091>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40092>>>>>>>>>        Get psDriverId            to sDrvrId
40093>>>>>>>>>        
40093>>>>>>>>>        // Get the data
40093>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40095>>>>>>>>>            // Check if the column exists
40095>>>>>>>>>            If (iCol >= 1 and iCol <= piColumnCount(Self)) Begin
40097>>>>>>>>>                If (iLen = 0) Begin
40099>>>>>>>>>                    Get SQLColumnValue iCol to wResult
40100>>>>>>>>>                End
40100>>>>>>>>>>
40100>>>>>>>>>                Else Begin
40101>>>>>>>>>                    // Add 1 for string terminator
40101>>>>>>>>>                    Move (iLen + 1) to iLen
40102>>>>>>>>>                    
40102>>>>>>>>>                    Get piVariableBufferLength to iVariableBufferLength
40103>>>>>>>>>                    If (iLen > iVariableBufferLength) Begin
40105>>>>>>>>>                        // Allocate
40105>>>>>>>>>                        Move (Repeat(' ', iLen)) to wResult
40106>>>>>>>>>                        
40106>>>>>>>>>                        Set piVariableBufferLength to iLen
40107>>>>>>>>>                        Set psVariableBuffer       to wResult
40108>>>>>>>>>                    End
40108>>>>>>>>>>
40108>>>>>>>>>                    Else Begin
40109>>>>>>>>>                        Get psVariableBuffer       to wResult
40110>>>>>>>>>                    End
40110>>>>>>>>>>
40110>>>>>>>>>                    
40110>>>>>>>>>                    
40110>>>>>>>>>                    // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
40110>>>>>>>>>                    // in the next FUNC_SQLCOLUMNVALUE call.
40110>>>>>>>>>                    // If hdbc and hstmt have not changed since the last call we don't have to set it.
40110>>>>>>>>>                    If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
40112>>>>>>>>>                        // Setup function arguments
40112>>>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                            Callback 0 ;                            Passing ihdbc iCol ihstmt ;                            Result iVoid
40117>>>>>>>>>                        Move ihstmt to giLastSQLhstmt
40118>>>>>>>>>                        Move ihdbc to giLastSQLhdbc
40119>>>>>>>>>                    End
40119>>>>>>>>>>
40119>>>>>>>>>                    
40119>>>>>>>>>                    Move False to Err
40120>>>>>>>>>                    // Call the driver function to get the data
40120>>>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLGETDATA ;                        Callback Self ;                        Passing iCol iLen (AddressOf(wResult)) ;                        Result iResult
40125>>>>>>>>>                    
40125>>>>>>>>>                    // If something went wrong, adjust the result
40125>>>>>>>>>                    If (Err) Begin
40127>>>>>>>>>                        Move 0 to iResult
40128>>>>>>>>>                    End
40128>>>>>>>>>>
40128>>>>>>>>>                    
40128>>>>>>>>>                    // SQL_NO_TOTAL (-4) Not all data retrieved. Unknown how much is left. 
40128>>>>>>>>>                    If (iResult = -4) Begin
40130>>>>>>>>>                        Move (SizeOfWString(wResult)) to iResult
40131>>>>>>>>>                    End
40131>>>>>>>>>>
40131>>>>>>>>>                End
40131>>>>>>>>>>
40131>>>>>>>>>            End
40131>>>>>>>>>>
40131>>>>>>>>>            Else Begin
40132>>>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLGetData"
40133>>>>>>>>>            End
40133>>>>>>>>>>
40133>>>>>>>>>        End
40133>>>>>>>>>>
40133>>>>>>>>>        Else Begin
40134>>>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLGetData"
40135>>>>>>>>>        End
40135>>>>>>>>>>
40135>>>>>>>>>        
40135>>>>>>>>>        // Fill global result
40135>>>>>>>>>        If (iResult > 0) Begin
40137>>>>>>>>>            Move 1 to SQLResult // SQLResult == 1 : Something was found
40138>>>>>>>>>        End
40138>>>>>>>>>>
40138>>>>>>>>>        Else Begin
40139>>>>>>>>>           Move 0 to SQLResult // SQLResult == 0 : no (more) data found
40140>>>>>>>>>        End
40140>>>>>>>>>>
40140>>>>>>>>>        
40140>>>>>>>>>        Function_Return (CString(wResult))
40141>>>>>>>>>    End_Function
40142>>>>>>>>>
40142>>>>>>>>>    // SQLGetDataToUChar (SQLGetData returning uchar array)
40142>>>>>>>>>    // Use for binary data and for character data containing Unicode non-bmp characters
40142>>>>>>>>>    Function SQLGetDataToUChar Integer iCol Integer iLen Returns UChar[]
40144>>>>>>>>>        Integer ihdbc
40144>>>>>>>>>        Integer ihstmt
40144>>>>>>>>>        Integer iVoid
40144>>>>>>>>>        Integer iColSize
40144>>>>>>>>>        Integer iResult
40144>>>>>>>>>        String  sDrvrId
40144>>>>>>>>>        UChar[] uaResult
40145>>>>>>>>>        
40145>>>>>>>>>        Integer iSQLType
40145>>>>>>>>>        Integer iBinaryType
40145>>>>>>>>>        Integer iLenArray
40145>>>>>>>>>        Integer iResizeSize
40145>>>>>>>>>        
40145>>>>>>>>>        Move 0 to iResult
40146>>>>>>>>>        
40146>>>>>>>>>        // Get the cli handles
40146>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40147>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40148>>>>>>>>>        Get psDriverId            to sDrvrId
40149>>>>>>>>>        
40149>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40151>>>>>>>>>            // Check if the column exists
40151>>>>>>>>>            If (iCol >= 1 and iCol <= piColumnCount(Self)) Begin
40153>>>>>>>>>                            
40153>>>>>>>>>                Get SQLColumnType iCol to iSQLType
40154>>>>>>>>>                If ( (iSQLType = SQL_BINARY) or (iSQLType = SQL_VARBINARY) or (iSQLType = SQL_LONGVARBINARY) ) Begin
40156>>>>>>>>>                    Move 1 to iBinaryType
40157>>>>>>>>>                End
40157>>>>>>>>>>
40157>>>>>>>>>                Else Begin
40158>>>>>>>>>                    Move 0 to iBinaryType 
40159>>>>>>>>>                End
40159>>>>>>>>>>
40159>>>>>>>>>    
40159>>>>>>>>>                If (iBinaryType) Begin
40161>>>>>>>>>                    Move (ResizeArray(uaResult,iLen)) to uaResult
40162>>>>>>>>>                End
40162>>>>>>>>>>
40162>>>>>>>>>                Else Begin
40163>>>>>>>>>                    // Character type
40163>>>>>>>>>                    // returned as wstring (2 bytes per character)
40163>>>>>>>>>                    // Add 1 for string terminator
40163>>>>>>>>>                    Move (iLen + 1) to iLen
40164>>>>>>>>>                    Move (iLen * 2) to iLenArray // wstring 2 bytes per char
40165>>>>>>>>>                    Move (ResizeArray(uaResult,iLenArray)) to uaResult
40166>>>>>>>>>                End
40166>>>>>>>>>>
40166>>>>>>>>>
40166>>>>>>>>>                // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
40166>>>>>>>>>                // in the next FUNC_SQLCOLUMNVALUE call.
40166>>>>>>>>>                If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
40168>>>>>>>>>                    // Setup function arguments
40168>>>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                        Callback 0 ;                        Passing ihdbc iCol ihstmt ;                        Result iVoid
40173>>>>>>>>>                    Move ihstmt to giLastSQLhstmt
40174>>>>>>>>>                    Move ihdbc to giLastSQLhdbc
40175>>>>>>>>>                End
40175>>>>>>>>>>
40175>>>>>>>>>                
40175>>>>>>>>>                Move False to Err
40176>>>>>>>>>                
40176>>>>>>>>>                // Call the driver function to get the data
40176>>>>>>>>>                // iResult will be the length of the data in bytes 
40176>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLGETDATA ;                    Callback Self ;                    Passing iCol iLen (AddressOf(uaResult[0])) ;                    Result iResult
40181>>>>>>>>>                
40181>>>>>>>>>                // If something went wrong, adjust the result
40181>>>>>>>>>                If (Err) Begin
40183>>>>>>>>>                    Move 0 to iResult
40184>>>>>>>>>                End
40184>>>>>>>>>>
40184>>>>>>>>>                
40184>>>>>>>>>                // SQL_NO_TOTAL (-4) Not all data retrieved. Unknown how much is left. 
40184>>>>>>>>>                If (iResult = -4) Begin
40186>>>>>>>>>                    Move (SizeOfArray(uaResult)) to iResult
40187>>>>>>>>>                End
40187>>>>>>>>>>
40187>>>>>>>>>                
40187>>>>>>>>>                If (iBinaryType) Begin
40189>>>>>>>>>                    If (iResult < iLen) Begin
40191>>>>>>>>>                        Move (ResizeArray(uaResult,iResult)) to uaResult
40192>>>>>>>>>                    End
40192>>>>>>>>>>
40192>>>>>>>>>                End
40192>>>>>>>>>>
40192>>>>>>>>>                Else Begin
40193>>>>>>>>>                    // Character data
40193>>>>>>>>>                    //   iResult has length of data in bytes (without zero terminator)
40193>>>>>>>>>                    //   uaResult will have data + zero terminator
40193>>>>>>>>>                    If (iResult < (iLenArray - 2) ) Begin
40195>>>>>>>>>                        // Received less than requested, strip off trailing zeroes.
40195>>>>>>>>>                        Move iResult to iResizeSize
40196>>>>>>>>>                    End
40196>>>>>>>>>>
40196>>>>>>>>>                    Else Begin
40197>>>>>>>>>                        // Strip off zero terminator
40197>>>>>>>>>                        Move (iLenArray - 2) to iResizeSize
40198>>>>>>>>>                    End
40198>>>>>>>>>>
40198>>>>>>>>>                    
40198>>>>>>>>>                    Move (ResizeArray(uaResult,iResizeSize)) to uaResult
40199>>>>>>>>>                    
40199>>>>>>>>>                End
40199>>>>>>>>>>
40199>>>>>>>>>            End
40199>>>>>>>>>>
40199>>>>>>>>>            Else Begin
40200>>>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLGetData"
40201>>>>>>>>>            End
40201>>>>>>>>>>
40201>>>>>>>>>        End
40201>>>>>>>>>>
40201>>>>>>>>>        Else Begin
40202>>>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLGetData"
40203>>>>>>>>>        End
40203>>>>>>>>>>
40203>>>>>>>>>        
40203>>>>>>>>>        // Fill global result
40203>>>>>>>>>        If (iResult > 0) Begin
40205>>>>>>>>>            Move 1 to SQLResult // SQLResult == 1 : Something was found
40206>>>>>>>>>        End
40206>>>>>>>>>>
40206>>>>>>>>>        Else Begin
40207>>>>>>>>>           Move 0 to SQLResult // SQLResult == 0 : no (more) data found
40208>>>>>>>>>        End
40208>>>>>>>>>>
40208>>>>>>>>>        
40208>>>>>>>>>        Function_Return uaResult
40209>>>>>>>>>
40209>>>>>>>>>    End_Function
40210>>>>>>>>>    
40210>>>>>>>>>    
40210>>>>>>>>>    // Map a column name to a number, if the name id not found no
40210>>>>>>>>>    // error is generated the returned number will be 0 (zero) in
40210>>>>>>>>>    // that case
40210>>>>>>>>>    Function SQLColumnMap String sColname Returns Integer
40212>>>>>>>>>        Integer ihdbc
40212>>>>>>>>>        Integer ihstmt
40212>>>>>>>>>        Integer iNumColumns
40212>>>>>>>>>        Integer iColCount
40212>>>>>>>>>        Integer iColNum
40212>>>>>>>>>        String  sDrvrId
40212>>>>>>>>>        String  sCurColName
40212>>>>>>>>>        
40212>>>>>>>>>        // Get the cli handles
40212>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40213>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40214>>>>>>>>>        Get psDriverId            to sDrvrId
40215>>>>>>>>>        
40215>>>>>>>>>        // Get the number by looping through the column names
40215>>>>>>>>>        Move 0 to iColNum
40216>>>>>>>>>        Get SQLPrivateStmtAttribute SQLSTMTATTRIB_COLUMNCOUNT ihdbc sDrvrId ihstmt to iNumColumns
40217>>>>>>>>>        For iColCount from 1 to iNumColumns
40223>>>>>>>>>>
40223>>>>>>>>>            Get SQLPrivateColAttribute iColCount SQLCOLATTRIB_LABEL ihdbc sDrvrId ihstmt to sCurColName
40224>>>>>>>>>            If (Uppercase(Trim(sColName)) = Uppercase(Trim(sCurColName))) ;                Move iColCount to iColNum
40227>>>>>>>>>            
40227>>>>>>>>>            If (iColNum) ;                Break
40230>>>>>>>>>        Loop
40231>>>>>>>>>>
40231>>>>>>>>>        
40231>>>>>>>>>        Function_Return iColNum
40232>>>>>>>>>    End_Function
40233>>>>>>>>>    
40233>>>>>>>>>    
40233>>>>>>>>>    // SQLStmtAttribute
40233>>>>>>>>>    // Moved to SQLGetStatementAttribute. 
40233>>>>>>>>>    // This function is still here for backward compatibility.
40233>>>>>>>>>
40233>>>>>>>>>    Function SQLStmtAttribute Integer iAttribId Returns String
40235>>>>>>>>>        String  sResult
40235>>>>>>>>>
40235>>>>>>>>>        Get SQLGetStmtAttribute iAttribId to sResult        
40236>>>>>>>>>        
40236>>>>>>>>>        Function_Return sResult
40237>>>>>>>>>    End_Function
40238>>>>>>>>>
40238>>>>>>>>> 
40238>>>>>>>>>   Function SQLGetStmtAttribute Integer iAttribId Returns String
40240>>>>>>>>>        Integer ihdbc
40240>>>>>>>>>        Integer ihstmt
40240>>>>>>>>>        String  sResult
40240>>>>>>>>>        String  sDrvrId
40240>>>>>>>>>        
40240>>>>>>>>>        // Initialize
40240>>>>>>>>>        Move "" to sResult
40241>>>>>>>>>        
40241>>>>>>>>>        // Get the cli handles
40241>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40242>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40243>>>>>>>>>        Get psDriverId            to sDrvrId
40244>>>>>>>>>        
40244>>>>>>>>>        // Get the attribute
40244>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") ;            Get SQLPrivateStmtAttribute iAttribId ihdbc sDrvrId ihstmt to sResult
40247>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLGetStmtAttribute"
40249>>>>>>>>>        
40249>>>>>>>>>        Function_Return sResult
40250>>>>>>>>>    End_Function
40251>>>>>>>>>
40251>>>>>>>>>    
40251>>>>>>>>>    Procedure SQLSetStmtAttribute Integer iAttribId String sAttribValue 
40253>>>>>>>>>
40253>>>>>>>>>        Integer ihdbc
40253>>>>>>>>>        Integer ihstmt
40253>>>>>>>>>        String  sDrvrId
40253>>>>>>>>>        
40253>>>>>>>>>        Integer iLen
40253>>>>>>>>>        Integer bLegalAttrib
40253>>>>>>>>>        Integer iVoid
40253>>>>>>>>>        Integer iAttribValue
40253>>>>>>>>>
40253>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40254>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40255>>>>>>>>>        Get psDriverId            to sDrvrId
40256>>>>>>>>>        
40256>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40258>>>>>>>>>            Case Begin
40258>>>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_CURSOR_TYPE)
40260>>>>>>>>>                    Move DFTRUE to bLegalAttrib
40261>>>>>>>>>                    Break
40262>>>>>>>>>                    
40262>>>>>>>>>                Case Else
40262>>>>>>>>>                    Move DFFALSE to bLegalAttrib
40263>>>>>>>>>                    Send SQLIllegalAttribute ("Attribute is = " + String(iAttribId) + ")") "SQLSetStmtAttribute"
40264>>>>>>>>>            Case End
40264>>>>>>>>>
40264>>>>>>>>>            If (bLegalAttrib) Begin
40266>>>>>>>>>                If (iAttribId = SQLSTMTATTRIB_CURSOR_TYPE) Begin
40268>>>>>>>>>                    
40268>>>>>>>>>                    Move sAttribValue to iAttribValue // Check numeric?
40269>>>>>>>>>                    Case Begin
40269>>>>>>>>>                        Case (iAttribValue = SQL_CURSOR_FORWARD_ONLY)
40271>>>>>>>>>                        Case (iAttribValue = SQL_CURSOR_DYNAMIC)
40274>>>>>>>>>                        Case (iAttribValue = SQL_CURSOR_KEYSET_DRIVEN)
40277>>>>>>>>>                        Case (iAttribValue = SQL_CURSOR_STATIC)
40280>>>>>>>>>                            Break
40281>>>>>>>>>                            
40281>>>>>>>>>                        Case Else
40281>>>>>>>>>                            Move DFFALSE to bLegalAttrib
40282>>>>>>>>>                            Send StmtError CLIERR_SQLINVALID_ATTRIBUTE (SFormat("Invalid value for SQLSTMTATTRIB_CURSOR_TYPE: %1", iAttribValue)) "SQLSetStmtAttribute"
40283>>>>>>>>>
40283>>>>>>>>>                    Case End
40283>>>>>>>>>                End
40283>>>>>>>>>>
40283>>>>>>>>>            End
40283>>>>>>>>>>
40283>>>>>>>>>
40283>>>>>>>>>            
40283>>>>>>>>>            If (bLegalAttrib) Begin
40285>>>>>>>>>                
40285>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                    Callback Self ;                    Passing ihdbc iVoid ihstmt ;                    Result iVoid
40290>>>>>>>>>                
40290>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLSETSTMTINTATTRIB ;                    Callback Self ;                    Passing iAttribId iAttribValue 0 ;                    Result iVoid
40295>>>>>>>>>            End
40295>>>>>>>>>>
40295>>>>>>>>>        End
40295>>>>>>>>>>
40295>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLPrivateStmtAttribute"
40297>>>>>>>>>        
40297>>>>>>>>>        
40297>>>>>>>>>        
40297>>>>>>>>>    End_Procedure
40298>>>>>>>>>    
40298>>>>>>>>>    
40298>>>>>>>>>    
40298>>>>>>>>>    Function SQLPrivateStmtAttribute Integer iAttribId Integer ihdbc String sDrvrId Integer ihstmt Returns String
40300>>>>>>>>>        String  sResult
40300>>>>>>>>>        Integer iLen
40300>>>>>>>>>        Integer bLegalAttrib
40300>>>>>>>>>        
40300>>>>>>>>>        // Initialize
40300>>>>>>>>>        Move ""     to sResult
40301>>>>>>>>>        
40301>>>>>>>>>        // Get the attribute
40301>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40303>>>>>>>>>            Case Begin
40303>>>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_COLUMNCOUNT)
40305>>>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_ROWCOUNT)
40308>>>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_ROWCOUNT_TYPE)
40311>>>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_NUMMESSAGES)
40314>>>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_CURSOR_TYPE)
40317>>>>>>>>>                    Move DFTRUE to bLegalAttrib
40318>>>>>>>>>                    Break
40319>>>>>>>>>                    
40319>>>>>>>>>                Case Else
40319>>>>>>>>>                    Move DFFALSE to bLegalAttrib
40320>>>>>>>>>                    Send SQLIllegalAttribute ("Attribute is = " + String(iAttribId) + ")") "SQLPrivateStmtAttribute"
40321>>>>>>>>>            Case End
40321>>>>>>>>>            
40321>>>>>>>>>            If (bLegalAttrib) Begin
40323>>>>>>>>>                // Setup function arguments
40323>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLSTMTINTATTRIB ;                    Callback Self ;                    Passing ihdbc iAttribId ihstmt ;                    Result sResult
40328>>>>>>>>>            End
40328>>>>>>>>>>
40328>>>>>>>>>        End
40328>>>>>>>>>>
40328>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLPrivateStmtAttribute"
40330>>>>>>>>>        
40330>>>>>>>>>        Function_Return sResult
40331>>>>>>>>>    End_Function
40332>>>>>>>>>    
40332>>>>>>>>>    
40332>>>>>>>>>    
40332>>>>>>>>>    // Get a column's attribute
40332>>>>>>>>>    Function SQLColAttribute Integer iCol Integer iAttribId Returns String
40334>>>>>>>>>        Integer ihdbc
40334>>>>>>>>>        Integer ihstmt
40334>>>>>>>>>        String  sResult
40334>>>>>>>>>        String  sDrvrId
40334>>>>>>>>>        
40334>>>>>>>>>        // Initialize
40334>>>>>>>>>        Move "" to sResult
40335>>>>>>>>>        
40335>>>>>>>>>        // Get the cli handles
40335>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40336>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40337>>>>>>>>>        Get psDriverId            to sDrvrId
40338>>>>>>>>>        
40338>>>>>>>>>        // Get the attribute
40338>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") ;            Get SQLPrivateColAttribute iCol iAttribId ihdbc sDrvrId ihstmt to sResult
40341>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLColAttribute"
40343>>>>>>>>>        
40343>>>>>>>>>        Function_Return sResult
40344>>>>>>>>>    End_Function
40345>>>>>>>>>    
40345>>>>>>>>>    Function SQLPrivateColAttribute Integer iCol Integer iAttribId Integer ihdbc String sDrvrId Integer ihstmt Returns String
40347>>>>>>>>>        String  sResult
40347>>>>>>>>>        String  sEmpty
40347>>>>>>>>>        Integer bIsStringAttribute
40347>>>>>>>>>        Integer iLen
40347>>>>>>>>>        Integer iVoid
40347>>>>>>>>>        Integer bLegalAttrib
40347>>>>>>>>>        Integer bLegalColumn
40347>>>>>>>>>        
40347>>>>>>>>>        // Initialize
40347>>>>>>>>>        Move "" to sResult
40348>>>>>>>>>        Move "" to sEmpty
40349>>>>>>>>>        Move 0  to iLen
40350>>>>>>>>>        
40350>>>>>>>>>        // Get the attribute
40350>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40352>>>>>>>>>            Get SQLPrivateColumnIsLegal ihdbc sDrvrId ihstmt iCol to bLegalColumn
40353>>>>>>>>>            If (bLegalColumn) Begin
40355>>>>>>>>>                // Determine the atributes type
40355>>>>>>>>>                Case Begin
40355>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_SIZE)
40357>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_LENGTH)
40360>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_PRECISION)
40363>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_SQLTYPE)
40366>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_NULLABLE)
40369>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_DFTYPE)
40372>>>>>>>>>                        Move DFFALSE to bIsStringAttribute
40373>>>>>>>>>                        Move DFTRUE to bLegalAttrib
40374>>>>>>>>>                        Break
40375>>>>>>>>>                        
40375>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_LABEL)
40378>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_BASECOLUMNNAME)
40381>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_BASETABLENAME)
40384>>>>>>>>>                        Move DFTRUE to bIsStringAttribute
40385>>>>>>>>>                        Move DFTRUE to bLegalAttrib
40386>>>>>>>>>                        Break
40387>>>>>>>>>                        
40387>>>>>>>>>                    Case Else
40387>>>>>>>>>                        Move DFFALSE to bLegalAttrib
40388>>>>>>>>>                        Send SQLIllegalAttribute ("Attribute is = " + String(iAttribId) + ")") "SQLPrivateColAttribute"
40389>>>>>>>>>                Case End
40389>>>>>>>>>                
40389>>>>>>>>>                If (bLegalAttrib) Begin
40391>>>>>>>>>                    // Setup function arguments
40391>>>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                        Callback Self ;                        Passing ihdbc iCol ihstmt ;                        Result iVoid
40396>>>>>>>>>                    
40396>>>>>>>>>                    If (bIsStringAttribute) Begin
40398>>>>>>>>>                        // Call the driver function to get the data length
40398>>>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLCOLSTRINGATTRIBLEN ;                            Callback Self ;                            Passing sEmpty sEmpty iAttribId ;                            Result iLen
40403>>>>>>>>>                        
40403>>>>>>>>>                        If (iLen) Begin
40405>>>>>>>>>                            // Allocate
40405>>>>>>>>>                            Move (Repeat(' ', iLen)) to sResult
40406>>>>>>>>>                            
40406>>>>>>>>>                            // Call the driver function to get the name
40406>>>>>>>>>                            Call_Driver 0 sDrvrId Function FUNC_SQLCOLSTRINGATTRIB ;                                Callback Self ;                                Passing sResult sEmpty iAttribId ;                                Result iVoid
40411>>>>>>>>>                        End
40411>>>>>>>>>>
40411>>>>>>>>>                    End
40411>>>>>>>>>>
40411>>>>>>>>>                    Else Begin
40412>>>>>>>>>                        // get the attribute
40412>>>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLCOLINTATTRIB ;                            Callback Self ;                            Passing sEmpty sEmpty iAttribId ;                            Result sResult
40417>>>>>>>>>                    End
40417>>>>>>>>>>
40417>>>>>>>>>                End
40417>>>>>>>>>>
40417>>>>>>>>>            End
40417>>>>>>>>>>
40417>>>>>>>>>            Else ;                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLPrivateColAttribute"
40419>>>>>>>>>        End
40419>>>>>>>>>>
40419>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLPrivateColAttribute"
40421>>>>>>>>>        
40421>>>>>>>>>        Function_Return sResult
40422>>>>>>>>>    End_Function
40423>>>>>>>>>    
40423>>>>>>>>>    
40423>>>>>>>>>    // Preapre for calling a stored procedure, pass the procedure name.
40423>>>>>>>>>    Procedure SQLSetProcedureName String sProcName String sSchemaArg
40425>>>>>>>>>        Integer ihdbc
40425>>>>>>>>>        Integer ihstmt
40425>>>>>>>>>        String  sDrvrId
40425>>>>>>>>>        Integer iVoid
40425>>>>>>>>>        String  sSchema
40425>>>>>>>>>        String  sEmpty
40425>>>>>>>>>        
40425>>>>>>>>>        // Initialize
40425>>>>>>>>>        Move "" to sEmpty
40426>>>>>>>>>        
40426>>>>>>>>>        // Get the cli handles
40426>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40427>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40428>>>>>>>>>        Get psDriverId            to sDrvrId
40429>>>>>>>>>        
40429>>>>>>>>>        // Call the procedure
40429>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40431>>>>>>>>>            If (Num_Arguments >= 2) ;                Move sSchemaArg to sSchema
40434>>>>>>>>>            Else ;                Move "" to sSchema
40436>>>>>>>>>            
40436>>>>>>>>>            If (sSchema <> "") Begin
40438>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLSETPROCSCHEMA ;                    Callback Self ;                    Passing ihdbc sSchema ihstmt ;                    Result iVoid
40443>>>>>>>>>            End
40443>>>>>>>>>>
40443>>>>>>>>>            
40443>>>>>>>>>            // Call the procedure
40443>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLSETPROCNAME ;                Callback Self ;                Passing ihdbc sProcName ihstmt ;                Result iVoid
40448>>>>>>>>>            
40448>>>>>>>>>            Set piLastArgument to 0
40449>>>>>>>>>        End
40449>>>>>>>>>>
40449>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLSetProcedurename"
40451>>>>>>>>>    End_Procedure
40452>>>>>>>>>    
40452>>>>>>>>>    // Pass the next argument
40452>>>>>>>>>    Procedure SQLSetNextArgument String sArgument
40454>>>>>>>>>        Integer iArgnum
40454>>>>>>>>>        
40454>>>>>>>>>        Get piLastArgument to iArgnum
40455>>>>>>>>>        Increment iArgnum
40456>>>>>>>>>        Send SQLSetArgument iArgnum sArgument
40457>>>>>>>>>        Set piLastArgument to iArgnum
40458>>>>>>>>>    End_Procedure
40459>>>>>>>>>    
40459>>>>>>>>>    
40459>>>>>>>>>    
40459>>>>>>>>>    // Set the next argument
40459>>>>>>>>>    Procedure SQLSetArgument Integer iArgnum String sArgument
40461>>>>>>>>>        Integer ihdbc
40461>>>>>>>>>        Integer ihstmt
40461>>>>>>>>>        String  sDrvrId
40461>>>>>>>>>        Integer iVoid
40461>>>>>>>>>        String  sEmpty
40461>>>>>>>>>        
40461>>>>>>>>>        // Initialize
40461>>>>>>>>>        Move "" to sEmpty
40462>>>>>>>>>        
40462>>>>>>>>>        // Get the cli handles
40462>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40463>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40464>>>>>>>>>        Get psDriverId            to sDrvrId
40465>>>>>>>>>        
40465>>>>>>>>>        // Call the procedure
40465>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40467>>>>>>>>>            // Pass the information
40467>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback Self ;                Passing ihdbc iArgnum ihstmt ;                Result iVoid
40472>>>>>>>>>            
40472>>>>>>>>>            // Pass the argument
40472>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLSETPROCARG ;                Callback Self ;                Passing sArgument sEmpty 0 ;                Result iVoid
40477>>>>>>>>>        End
40477>>>>>>>>>>
40477>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLSetArgument"
40479>>>>>>>>>    End_Procedure
40480>>>>>>>>>    
40480>>>>>>>>>    Procedure SQLSetNextParameter String sParamValue Integer iParamType
40482>>>>>>>>>        Integer iParamNum 
40482>>>>>>>>>        Integer iType
40482>>>>>>>>>        
40482>>>>>>>>>        If (num_arguments < 2) Begin
40484>>>>>>>>>            Move typeString to iType
40485>>>>>>>>>        End
40485>>>>>>>>>>
40485>>>>>>>>>        Else Begin
40486>>>>>>>>>            Move iParamType to iType
40487>>>>>>>>>        End
40487>>>>>>>>>>
40487>>>>>>>>>        
40487>>>>>>>>>        Get piLastArgument to iParamNum
40488>>>>>>>>>        Increment iParamNum
40489>>>>>>>>>        Send SQLSetParameter iParamNum sParamValue iType
40490>>>>>>>>>        Set piLastArgument to iParamNum
40491>>>>>>>>>    End_Procedure
40492>>>>>>>>>
40492>>>>>>>>>    Procedure SQLSetParameter Integer iParamNum String sParamValue Integer iParamType
40494>>>>>>>>>        
40494>>>>>>>>>        Integer ihdbc
40494>>>>>>>>>        Integer ihstmt
40494>>>>>>>>>        String  sDrvrId
40494>>>>>>>>>        Integer iVoid
40494>>>>>>>>>        String  sEmpty
40494>>>>>>>>>        Integer iType
40494>>>>>>>>>        
40494>>>>>>>>>        If (num_arguments < 3) Begin
40496>>>>>>>>>            Move typeString to iType
40497>>>>>>>>>        End
40497>>>>>>>>>>
40497>>>>>>>>>        Else Begin
40498>>>>>>>>>            Move iParamType to iType
40499>>>>>>>>>        End
40499>>>>>>>>>>
40499>>>>>>>>>        
40499>>>>>>>>>        Case Begin
40499>>>>>>>>>            Case (iType = typeDate )    
40501>>>>>>>>>
40501>>>>>>>>>                If (sParamValue <> "") Begin
40503>>>>>>>>>                    ConvertToXml typeDate sParamValue to sParamValue
40504>>>>>>>>>                End
40504>>>>>>>>>>
40504>>>>>>>>>                
40504>>>>>>>>>                Break
40505>>>>>>>>>
40505>>>>>>>>>            Case (iType = typeDatetime )    
40508>>>>>>>>>
40508>>>>>>>>>                If (sParamValue <> "") Begin
40510>>>>>>>>>                    ConvertToXml esqlDatetime sParamValue to sParamValue
40511>>>>>>>>>                    Move (Replace('T',sParamValue,' ')) to sParamValue 
40512>>>>>>>>>                End
40512>>>>>>>>>>
40512>>>>>>>>>
40512>>>>>>>>>                Break
40513>>>>>>>>>
40513>>>>>>>>>            Case (iType = typeNumber )    
40516>>>>>>>>>
40516>>>>>>>>>                If (sParamValue <> "") Begin
40518>>>>>>>>>                    ConvertToXml typeNumber sParamValue to sParamValue
40519>>>>>>>>>                End
40519>>>>>>>>>>
40519>>>>>>>>>                
40519>>>>>>>>>                Break
40520>>>>>>>>>            
40520>>>>>>>>>            Case (iType = typeTime )    
40523>>>>>>>>>
40523>>>>>>>>>                If (sParamValue <> "") Begin
40525>>>>>>>>>                    ConvertToXml esqlTime sParamValue to sParamValue
40526>>>>>>>>>                End
40526>>>>>>>>>>
40526>>>>>>>>>                
40526>>>>>>>>>                Break
40527>>>>>>>>>                
40527>>>>>>>>>            Case Else
40527>>>>>>>>>                    // sParamValue is a string type or a type that must be passed as a string
40527>>>>>>>>>                    Break
40528>>>>>>>>>                
40528>>>>>>>>>        Case End
40528>>>>>>>>>        
40528>>>>>>>>>        
40528>>>>>>>>>        // Initialize
40528>>>>>>>>>        Move "" to sEmpty
40529>>>>>>>>>        
40529>>>>>>>>>        // Get the cli handles
40529>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40530>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40531>>>>>>>>>        Get psDriverId            to sDrvrId
40532>>>>>>>>>        
40532>>>>>>>>>        // Call the procedure
40532>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40534>>>>>>>>>            // Pass the information
40534>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback Self ;                Passing ihdbc iParamnum ihstmt ;                Result iVoid
40539>>>>>>>>>            
40539>>>>>>>>>            // Pass the argument
40539>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLSETPROCARG ;                Callback Self ;                Passing sParamValue sEmpty 0 ;                Result iVoid
40544>>>>>>>>>        End
40544>>>>>>>>>>
40544>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLSetParameter"
40546>>>>>>>>>    End_Procedure
40547>>>>>>>>>    
40547>>>>>>>>>    
40547>>>>>>>>>    // Call a stored procedure
40547>>>>>>>>>    Procedure SQLCall
40549>>>>>>>>>        Integer ihdbc
40549>>>>>>>>>        Integer ihstmt
40549>>>>>>>>>        String  sDrvrId
40549>>>>>>>>>        Integer iVoid
40549>>>>>>>>>        String  sEmpty
40549>>>>>>>>>        
40549>>>>>>>>>        // Initialize
40549>>>>>>>>>        Move "" to sEmpty
40550>>>>>>>>>        
40550>>>>>>>>>        // Get the cli handles
40550>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40551>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40552>>>>>>>>>        Get psDriverId            to sDrvrId
40553>>>>>>>>>        
40553>>>>>>>>>        // Call the procedure
40553>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40555>>>>>>>>>            // Call the procedure
40555>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCALL ;                Callback Self ;                Passing ihdbc sEmpty ihstmt ;                Result iVoid
40560>>>>>>>>>            
40560>>>>>>>>>            Send SQLGetStatementAttributes
40561>>>>>>>>>            Set piLastArgument to 0
40562>>>>>>>>>        End
40562>>>>>>>>>>
40562>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLCall"
40564>>>>>>>>>    End_Procedure
40565>>>>>>>>>    
40565>>>>>>>>>    
40565>>>>>>>>>    // Get the next argument
40565>>>>>>>>>    Function SQLGetNextArgument Returns String
40567>>>>>>>>>        Integer iArgnum
40567>>>>>>>>>        String  sResult
40567>>>>>>>>>        
40567>>>>>>>>>        Get piLastArgument to iArgnum
40568>>>>>>>>>        Increment iArgnum
40569>>>>>>>>>        Get SQLGetArgument iArgnum to sResult
40570>>>>>>>>>        Set piLastArgument to iArgnum
40571>>>>>>>>>        
40571>>>>>>>>>        Function_Return sResult
40572>>>>>>>>>    End_Function
40573>>>>>>>>>    
40573>>>>>>>>>    
40573>>>>>>>>>    
40573>>>>>>>>>    // Get the specified argument from a procedure
40573>>>>>>>>>    Function SQLGetArgument Integer iArgnum Returns String
40575>>>>>>>>>        Integer ihdbc
40575>>>>>>>>>        Integer ihstmt
40575>>>>>>>>>        String  sDrvrId
40575>>>>>>>>>        Integer iVoid
40575>>>>>>>>>        String  sEmpty
40575>>>>>>>>>        String  sArgument
40575>>>>>>>>>        Integer iLen
40575>>>>>>>>>        
40575>>>>>>>>>        // Initialize
40575>>>>>>>>>        Move "" to sEmpty
40576>>>>>>>>>        Move "" to sArgument
40577>>>>>>>>>        
40577>>>>>>>>>        // Get the cli handles
40577>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40578>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40579>>>>>>>>>        Get psDriverId            to sDrvrId
40580>>>>>>>>>        
40580>>>>>>>>>        // Call the procedure
40580>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40582>>>>>>>>>            // Pass the information
40582>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback Self ;                Passing ihdbc iArgnum ihstmt ;                Result iVoid
40587>>>>>>>>>            
40587>>>>>>>>>            // Get the length
40587>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLGETPROCARGLEN ;                Callback Self ;                Passing sEmpty sEmpty 0 ;                Result iLen
40592>>>>>>>>>            
40592>>>>>>>>>            If (iLen) Begin
40594>>>>>>>>>                // Allocate
40594>>>>>>>>>                Move (Repeat(' ', iLen)) to sArgument
40595>>>>>>>>>                
40595>>>>>>>>>                // Pass the argument
40595>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLGETPROCARG ;                    Callback Self ;                    Passing sArgument sEmpty 0 ;                    Result iVoid
40600>>>>>>>>>            End
40600>>>>>>>>>>
40600>>>>>>>>>        End
40600>>>>>>>>>>
40600>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLGetArgument"
40602>>>>>>>>>        
40602>>>>>>>>>        Function_Return sArgument
40603>>>>>>>>>    End_Function
40604>>>>>>>>>    
40604>>>>>>>>>    
40604>>>>>>>>>    // Get the return value of a stored function
40604>>>>>>>>>    Function SQLReturnValue Returns String
40606>>>>>>>>>        Integer ihdbc
40606>>>>>>>>>        Integer ihstmt
40606>>>>>>>>>        String  sDrvrId
40606>>>>>>>>>        Integer iVoid
40606>>>>>>>>>        String  sEmpty
40606>>>>>>>>>        String  sRetval
40606>>>>>>>>>        Integer iLen
40606>>>>>>>>>        
40606>>>>>>>>>        // Initialize
40606>>>>>>>>>        Move "" to sEmpty
40607>>>>>>>>>        Move "" to sRetval
40608>>>>>>>>>        
40608>>>>>>>>>        // Get the cli handles
40608>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40609>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40610>>>>>>>>>        Get psDriverId            to sDrvrId
40611>>>>>>>>>        
40611>>>>>>>>>        // Call the procedure
40611>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40613>>>>>>>>>            // Get the length
40613>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLGETPROCRETVALLEN ;                Callback Self ;                Passing ihdbc sEmpty ihstmt  ;                Result iLen
40618>>>>>>>>>            
40618>>>>>>>>>            If (iLen) Begin
40620>>>>>>>>>                // Allocate
40620>>>>>>>>>                Move (Repeat(' ', iLen)) to sRetval
40621>>>>>>>>>                
40621>>>>>>>>>                // Pass the argument
40621>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLGETPROCRETVAL ;                    Callback Self ;                    Passing ihdbc sRetval ihstmt ;                    Result iVoid
40626>>>>>>>>>            End
40626>>>>>>>>>>
40626>>>>>>>>>        End
40626>>>>>>>>>>
40626>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLReturnValue"
40628>>>>>>>>>        
40628>>>>>>>>>        Function_Return sRetval
40629>>>>>>>>>    End_Function
40630>>>>>>>>>    
40630>>>>>>>>>    
40630>>>>>>>>>    // Switch to the next set
40630>>>>>>>>>    // Returns : 0   = No more result sets
40630>>>>>>>>>    //     <>0 = Switched to next set
40630>>>>>>>>>    Function SQLNextResultSet Returns Integer
40632>>>>>>>>>        Integer ihdbc
40632>>>>>>>>>        Integer ihstmt
40632>>>>>>>>>        String  sDrvrId
40632>>>>>>>>>        Integer iResult
40632>>>>>>>>>        String  sEmpty
40632>>>>>>>>>        
40632>>>>>>>>>        // Initialize
40632>>>>>>>>>        Move "" to sEmpty
40633>>>>>>>>>        Move 0  to iResult
40634>>>>>>>>>        
40634>>>>>>>>>        // Get the cli handles
40634>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40635>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40636>>>>>>>>>        Get psDriverId            to sDrvrId
40637>>>>>>>>>        
40637>>>>>>>>>        // Call the procedure
40637>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40639>>>>>>>>>            // Get the length
40639>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLNEXTRESULTSET ;                Callback Self ;                Passing ihdbc sEmpty ihstmt  ;                Result iResult
40644>>>>>>>>>            
40644>>>>>>>>>            Send SQLGetStatementAttributes
40645>>>>>>>>>            Set piLastArgument to 0
40646>>>>>>>>>        End
40646>>>>>>>>>>
40646>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLNextResultSet"
40648>>>>>>>>>        
40648>>>>>>>>>        Function_Return iResult
40649>>>>>>>>>    End_Function
40650>>>>>>>>>    
40650>>>>>>>>>    
40650>>>>>>>>>    // Setup a file that will be acivated after a succesfull
40650>>>>>>>>>    //fetch on the statement
40650>>>>>>>>>    Procedure SQLFetchActivatesBuffer Integer iFileNum Integer bState
40652>>>>>>>>>        Integer ihdbc
40652>>>>>>>>>        Integer ihstmt
40652>>>>>>>>>        String  sDrvrId
40652>>>>>>>>>        Integer iResult
40652>>>>>>>>>        Integer bIsOpen
40652>>>>>>>>>        Integer iVoid
40652>>>>>>>>>        String  sFileType
40652>>>>>>>>>        
40652>>>>>>>>>        // Check if file is open
40652>>>>>>>>>        Get_Attribute DF_FILE_OPENED of iFileNum to bIsOpen
40655>>>>>>>>>        If (bIsOpen) Begin
40657>>>>>>>>>            // Get the cli handles
40657>>>>>>>>>            Get phCLIStatementHandle  to ihstmt
40658>>>>>>>>>            Get phCLIConnectionHandle to ihdbc
40659>>>>>>>>>            Get psDriverId            to sDrvrId
40660>>>>>>>>>            
40660>>>>>>>>>            // Call the procedure
40660>>>>>>>>>            If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40662>>>>>>>>>                // Check if the file has the correct type
40662>>>>>>>>>                Get_Attribute DF_FILE_DRIVER of iFileNum to sFileType
40665>>>>>>>>>                If (sFileType = sDrvrId) Begin
40667>>>>>>>>>                    // Setup the buffer
40667>>>>>>>>>                    Call_Driver iFileNum sDrvrId Function FUNC_SQLBUFFERSTATUS ;                        Callback Self ;                        Passing ihdbc bState ihstmt  ;                        Result iVoid
40672>>>>>>>>>                End
40672>>>>>>>>>>
40672>>>>>>>>>                Else ;                    Send StmtError CLIERR_SQLINVALID_BIND_FILE ("File" * String(iFileNum) * "type incompatible with statement ("  + sFileType + ")") "SQLBindFile"
40674>>>>>>>>>            End
40674>>>>>>>>>>
40674>>>>>>>>>            Else ;                Send HandleError ihstmt ihdbc sDrvrId "SQLFetchActivatesBuffer"
40676>>>>>>>>>        End
40676>>>>>>>>>>
40676>>>>>>>>>        Else ;            Send StmtError CLIERR_SQLINVALID_BUFFER ("File not open (number =" * String(iFileNum) + ")") "SQLFetchActivatesBuffer"
40678>>>>>>>>>    End_Procedure
40679>>>>>>>>>    
40679>>>>>>>>>    
40679>>>>>>>>>    
40679>>>>>>>>>    Function SQLGetMessage Integer iMessageNum Returns String
40681>>>>>>>>>        Integer ihdbc
40681>>>>>>>>>        Integer ihstmt
40681>>>>>>>>>        String  sDrvrId
40681>>>>>>>>>        String  sMessage
40681>>>>>>>>>        Integer iVoid
40681>>>>>>>>>        
40681>>>>>>>>>        // Initialize
40681>>>>>>>>>        Move "" to sMessage
40682>>>>>>>>>        
40682>>>>>>>>>        // Get the cli handles
40682>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40683>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40684>>>>>>>>>        Get psDriverId            to sDrvrId
40685>>>>>>>>>        
40685>>>>>>>>>        // Call the procedure
40685>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40687>>>>>>>>>            // Setup function arguments
40687>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback Self ;                Passing ihdbc iMessageNum ihstmt ;                Result iVoid
40692>>>>>>>>>            
40692>>>>>>>>>            Move (Repeat(' ', 1024)) to sMessage
40693>>>>>>>>>            // Get the length
40693>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLGETMESSAGE ;                Callback Self ;                Passing iVoid sMessage iVoid ;                Result iVoid
40698>>>>>>>>>        End
40698>>>>>>>>>>
40698>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLGetDiagRec"
40700>>>>>>>>>        
40700>>>>>>>>>        Function_Return sMessage
40701>>>>>>>>>    End_Function
40702>>>>>>>>>    
40702>>>>>>>>>    
40702>>>>>>>>>    
40702>>>>>>>>>    // Remove the component identifier from a diagnostic message
40702>>>>>>>>>    Function RemoveComponentIdentifier String sDiagMessage Returns String
40704>>>>>>>>>        While (Left(sDiagMessage, 1) = "[")
40708>>>>>>>>>            Move (Right(sDiagMessage, Length(sDiagMessage) - Pos("]", sDiagMessage))) to sDiagMessage
40709>>>>>>>>>        Loop
40710>>>>>>>>>>
40710>>>>>>>>>        
40710>>>>>>>>>        Function_Return sDiagMessage
40711>>>>>>>>>    End_Function
40712>>>>>>>>>    
40712>>>>>>>>>    
40712>>>>>>>>>    
40712>>>>>>>>>    // Convert a DataFlex date to a SQL Date. Use dummy zero dates.
40712>>>>>>>>>    Function DFDateToSQLDate Date dDFDate Integer iSQLType Returns String
40714>>>>>>>>>        
40714>>>>>>>>>        Integer iType
40714>>>>>>>>>        String  sSQLDate
40714>>>>>>>>>        Integer iOrgDateFmt
40714>>>>>>>>>        Integer iOrgDateSep
40714>>>>>>>>>        
40714>>>>>>>>>        String sDriverId
40714>>>>>>>>>        String sDummyZeroDate
40714>>>>>>>>>        String sDummyZeroDateMssqlDatetime
40714>>>>>>>>>        
40714>>>>>>>>>        // Change date format to military, SQL dates are military dates
40714>>>>>>>>>        Get_Attribute DF_DATE_FORMAT to iOrgDateFmt
40717>>>>>>>>>        Get_Attribute DF_DATE_SEPARATOR to iOrgDateSep
40720>>>>>>>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_MILITARY
40723>>>>>>>>>        Set_Attribute DF_DATE_SEPARATOR to (Ascii('-'))
40726>>>>>>>>>        
40726>>>>>>>>>        // We only need to convert if the date is 0
40726>>>>>>>>>        If (Integer(dDFDate = 0)) Begin
40728>>>>>>>>>            
40728>>>>>>>>>            If (num_arguments < 2) Begin
40730>>>>>>>>>                Move SQL_TYPE_TIMESTAMP to iType
40731>>>>>>>>>            End
40731>>>>>>>>>>
40731>>>>>>>>>            Else Begin
40732>>>>>>>>>                Move iSQLType to iType
40733>>>>>>>>>            End
40733>>>>>>>>>>
40733>>>>>>>>>            
40733>>>>>>>>>            
40733>>>>>>>>>            Get psDriverID to sDriverId
40734>>>>>>>>>            Get psDummyZeroDate to sDummyZeroDate
40735>>>>>>>>>            
40735>>>>>>>>>            If ( (iType = SQL_TYPE_TIMESTAMP) and (sDriverID = 'MSSQLDRV') ) Begin
40737>>>>>>>>>                Get psDummyZeroDateMssqlDatetime to sDummyZeroDateMssqlDatetime
40738>>>>>>>>>                Move sDummyZeroDateMssqlDatetime to sSQLDate
40739>>>>>>>>>            End
40739>>>>>>>>>>
40739>>>>>>>>>            Else Begin
40740>>>>>>>>>                Move sDummyZeroDate to sSQLDate
40741>>>>>>>>>            End
40741>>>>>>>>>>
40741>>>>>>>>>            
40741>>>>>>>>>        End
40741>>>>>>>>>>
40741>>>>>>>>>        Else Begin
40742>>>>>>>>>            Move dDFDate to sSQLDate
40743>>>>>>>>>        End
40743>>>>>>>>>>
40743>>>>>>>>>        
40743>>>>>>>>>        // Change date format back to original
40743>>>>>>>>>        Set_Attribute DF_DATE_FORMAT to iOrgDateFmt
40746>>>>>>>>>        Set_Attribute DF_DATE_SEPARATOR to iOrgDateSep
40749>>>>>>>>>        
40749>>>>>>>>>        Function_Return sSQLDate
40750>>>>>>>>>    End_Function
40751>>>>>>>>>    
40751>>>>>>>>>    
40751>>>>>>>>>    // Convert a SQL date to a DataFlex Date. Use dummy zero dates.
40751>>>>>>>>>    Function SQLDateToDFDate String sSQLDate Returns Date
40753>>>>>>>>>        
40753>>>>>>>>>        Integer iType
40753>>>>>>>>>        Date    dDFDate
40753>>>>>>>>>        Integer iOrgDateFmt
40753>>>>>>>>>        Integer iOrgDateSep
40753>>>>>>>>>        
40753>>>>>>>>>        String  sDriverId
40753>>>>>>>>>        String  sDummyZeroDate
40753>>>>>>>>>        String  sDummyZeroDateMssqlDatetime
40753>>>>>>>>>        
40753>>>>>>>>>        Get psDriverID to sDriverId
40754>>>>>>>>>        
40754>>>>>>>>>        Get psDummyZeroDate to sDummyZeroDate
40755>>>>>>>>>        Get psDummyZeroDateMssqlDatetime to sDummyZeroDateMssqlDatetime
40756>>>>>>>>>        
40756>>>>>>>>>        Get_Attribute DF_DATE_FORMAT to iOrgDateFmt
40759>>>>>>>>>        Get_Attribute DF_DATE_SEPARATOR to iOrgDateSep
40762>>>>>>>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_MILITARY
40765>>>>>>>>>        Set_Attribute DF_DATE_SEPARATOR to (Ascii('-'))
40768>>>>>>>>>        
40768>>>>>>>>>        Move (Left(sSQLDate,10)) to sSQLDate
40769>>>>>>>>>        
40769>>>>>>>>>        If ( (sSQLDate = sDummyZeroDate) or ;            ( (sDriverId = 'MSSQLDRV') and (sSQLDate = sDummyZeroDateMssqlDatetime) ) )  Begin
40771>>>>>>>>>            Move 0 to dDFDate
40772>>>>>>>>>        End
40772>>>>>>>>>>
40772>>>>>>>>>        Else Begin
40773>>>>>>>>>            Move sSQLDate to dDFDate
40774>>>>>>>>>        End
40774>>>>>>>>>>
40774>>>>>>>>>        
40774>>>>>>>>>        // Change date format back to original
40774>>>>>>>>>        Set_Attribute DF_DATE_FORMAT to iOrgDateFmt
40777>>>>>>>>>        Set_Attribute DF_DATE_SEPARATOR to iOrgDateSep
40780>>>>>>>>>        
40780>>>>>>>>>        Function_Return dDFDate
40781>>>>>>>>>    End_Function
40782>>>>>>>>>    
40782>>>>>>>>>End_Class
40783>>>>>>>>>
40783>>>>>>>>>
40783>>>>>>>>>// Connection object for embedded SQL                          
40783>>>>>>>>>// This provides the ability to create a connection for a driver.     
40783>>>>>>>>>// It will contain child statement objects                            
40783>>>>>>>>>
40783>>>>>>>>>Class cSQLConnection is a cObject
40784>>>>>>>>>    
40784>>>>>>>>>    Procedure Construct_object
40786>>>>>>>>>        Forward Send Construct_object
40788>>>>>>>>>        
40788>>>>>>>>>        Property Integer phCLIConnectionHandle       0
40789>>>>>>>>>        
40789>>>>>>>>>        Property String  psDriverID        ""
40790>>>>>>>>>        Property Integer piBindFile        0
40791>>>>>>>>>        
40791>>>>>>>>>        Property String psDummyZeroDate              '0001-01-01'
40792>>>>>>>>>        Property String psDummyZeroDateMssqlDatetime '1753-01-01'
40793>>>>>>>>>        
40793>>>>>>>>>    End_Procedure
40794>>>>>>>>>    
40794>>>>>>>>>    
40794>>>>>>>>>    
40794>>>>>>>>>    // Store basic information about the connection
40794>>>>>>>>>    Procedure StoreConnectionInfo Handle hCLIConnectionHandle String sDrvrId
40796>>>>>>>>>        
40796>>>>>>>>>        String sDummyZeroDate
40796>>>>>>>>>        Integer iDriverIndex
40796>>>>>>>>>        
40796>>>>>>>>>        Set phCLIConnectionHandle to hCLIConnectionHandle
40797>>>>>>>>>        Set psDriverID            to sDrvrId
40798>>>>>>>>>        
40798>>>>>>>>>        Case Begin
40798>>>>>>>>>            Case (sDrvrId = "MSSQLDRV")
40800>>>>>>>>>                Set psDummyZeroDate to '0001-01-01'
40801>>>>>>>>>                Set psDummyZeroDateMssqlDatetime to '1753-01-01'
40802>>>>>>>>>                Break
40803>>>>>>>>>            Case (sDrvrId = "DB2_DRV")
40806>>>>>>>>>                Set psDummyZeroDate to '0001-01-01'
40807>>>>>>>>>                Break
40808>>>>>>>>>            Case (sDrvrId = "ODBC_DRV")
40811>>>>>>>>>                Get DriverIndex "ODBC_DRV" to iDriverIndex
40812>>>>>>>>>                If (iDriverIndex <> 0) Begin
40814>>>>>>>>>                    Get_Attribute DF_DRIVER_DUMMY_ZERO_DATE_VALUE of iDriverIndex to sDummyZeroDate
40817>>>>>>>>>                End
40817>>>>>>>>>>
40817>>>>>>>>>                Else Begin
40818>>>>>>>>>                    Move '0001-01-01' to sDummyZeroDate
40819>>>>>>>>>                End
40819>>>>>>>>>>
40819>>>>>>>>>
40819>>>>>>>>>                Set psDummyZeroDate to sDummyZeroDate
40820>>>>>>>>>                Break
40821>>>>>>>>>                
40821>>>>>>>>>        Case End
40821>>>>>>>>>        
40821>>>>>>>>>    End_Procedure
40822>>>>>>>>>    
40822>>>>>>>>>    Function DriverIndex String sDriver Returns Integer
40824>>>>>>>>>        
40824>>>>>>>>>        String  sCurrentDriver
40824>>>>>>>>>        Integer iNumberOfDrivers iDriver iCount
40824>>>>>>>>>        
40824>>>>>>>>>        Move 0 to iDriver
40825>>>>>>>>>        
40825>>>>>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
40828>>>>>>>>>        For iCount from 1 to iNumberOfDrivers
40834>>>>>>>>>>
40834>>>>>>>>>            
40834>>>>>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
40837>>>>>>>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriver) ) Begin
40839>>>>>>>>>                Move iCount to iDriver
40840>>>>>>>>>            End
40840>>>>>>>>>>
40840>>>>>>>>>        Loop
40841>>>>>>>>>>
40841>>>>>>>>>        
40841>>>>>>>>>        Function_Return iDriver
40842>>>>>>>>>        
40842>>>>>>>>>    End_Function
40843>>>>>>>>>
40843>>>>>>>>>    
40843>>>>>>>>>    // Destroy the SQLConnection object
40843>>>>>>>>>    Procedure DestroySQLConnection
40845>>>>>>>>>        Send Destroy
40846>>>>>>>>>    End_Procedure
40847>>>>>>>>>    
40847>>>>>>>>>    
40847>>>>>>>>>    // Connect to a database server
40847>>>>>>>>>    // Returns : 1 Succesfully connected
40847>>>>>>>>>    //           0 Not connected
40847>>>>>>>>>    Function SQLConnect String sDrvrID String sConnect Returns Integer
40849>>>>>>>>>        Integer ihdbc
40849>>>>>>>>>        String  sEmpty
40849>>>>>>>>>        
40849>>>>>>>>>        // Initialize
40849>>>>>>>>>        Move "" to sEmpty
40850>>>>>>>>>        Move 0  to ihdbc
40851>>>>>>>>>        
40851>>>>>>>>>        Move False to Err
40852>>>>>>>>>        
40852>>>>>>>>>        // Call the driver function to connect
40852>>>>>>>>>        Call_Driver 0 sDrvrId Function FUNC_SQLCONNECT ;            Callback Self ;            Passing sConnect sEmpty Self ;            Result ihdbc
40857>>>>>>>>>        
40857>>>>>>>>>        // If there was an error, make result invalid
40857>>>>>>>>>        If (Err) ;            Move 0 to ihdbc
40860>>>>>>>>>        
40860>>>>>>>>>        // Check result and store it
40860>>>>>>>>>        If (ihdbc <> 0) ;            Send StoreConnectionInfo ihdbc sDrvrId
40863>>>>>>>>>        
40863>>>>>>>>>        // Return success status
40863>>>>>>>>>        Function_Return (ihdbc <> 0)
40864>>>>>>>>>    End_Function
40865>>>>>>>>>    
40865>>>>>>>>>    
40865>>>>>>>>>    // Use a connection of an already open file
40865>>>>>>>>>    Function SQLFileConnect Integer iFileNum Returns Integer
40867>>>>>>>>>        Integer ihdbc
40867>>>>>>>>>        Integer bIsOpen
40867>>>>>>>>>        String  sDrvrId
40867>>>>>>>>>        String  sEmpty
40867>>>>>>>>>        
40867>>>>>>>>>        // Initialize
40867>>>>>>>>>        Move "" to sEmpty
40868>>>>>>>>>        Move 0  to ihdbc
40869>>>>>>>>>        
40869>>>>>>>>>        // Check if file is open
40869>>>>>>>>>        Get_Attribute DF_FILE_OPENED of iFileNum to bIsOpen
40872>>>>>>>>>        If (bIsOpen) Begin
40874>>>>>>>>>            // Fill the driver id, assume longest is 255 characters
40874>>>>>>>>>            Move (Repeat(' ', 255)) to sDrvrId
40875>>>>>>>>>            Get_Attribute DF_FILE_DRIVER of iFileNum to sDrvrId
40878>>>>>>>>>            
40878>>>>>>>>>            Move False to Err
40879>>>>>>>>>            
40879>>>>>>>>>            // Call the driver function to connect
40879>>>>>>>>>            Call_Driver iFileNum sDrvrId Function FUNC_SQLFILECONNECT ;                Callback Self ;                Passing sEmpty sEmpty 0 ;                Result ihdbc
40884>>>>>>>>>            
40884>>>>>>>>>            // If there was an error, make result invalid
40884>>>>>>>>>            If (Err) ;                Move 0 to ihdbc
40887>>>>>>>>>            
40887>>>>>>>>>            // Check result and store it
40887>>>>>>>>>            If (ihdbc <> 0) Begin
40889>>>>>>>>>                // Somehow Call_driver overwrites the sDrvrId variable, restore it here
40889>>>>>>>>>                Get_Attribute DF_FILE_DRIVER of iFileNum to sDrvrId
40892>>>>>>>>>                Send StoreConnectionInfo ihdbc sDrvrId
40893>>>>>>>>>                
40893>>>>>>>>>                // Set filenum so it can be used for fetching
40893>>>>>>>>>                Set piBindFile to iFileNum
40894>>>>>>>>>            End
40894>>>>>>>>>>
40894>>>>>>>>>        End
40894>>>>>>>>>>
40894>>>>>>>>>        
40894>>>>>>>>>        // Return success status
40894>>>>>>>>>        Function_Return (ihdbc <> 0)
40895>>>>>>>>>    End_Function
40896>>>>>>>>>    
40896>>>>>>>>>    
40896>>>>>>>>>    // Establish an embedded SQL connection that uses an existing connection from an earlier login or open.
40896>>>>>>>>>    // Existing connections are identified by there connectstring. (can be obtained with DF_DRIVER_SERVER_NAME attribute)
40896>>>>>>>>>    // If sConnectString exist in the list of existing connections, that connection will be used for embedded SQL.
40896>>>>>>>>>    // The connectstring must be an exact match, but can be case insensitive
40896>>>>>>>>>    // The connectstring can contain a connection id. For example: "DFCONNID=MyConnectionID"
40896>>>>>>>>>    // If no matching connectstring is found, this function will return 0
40896>>>>>>>>>    // This function will only work with CLI connectivity kits 6.2 or later
40896>>>>>>>>>    Function SQLConnectionConnect String sDrvrID String sConnectString Returns Integer
40898>>>>>>>>>        Integer ihdbc
40898>>>>>>>>>        String  sEmpty
40898>>>>>>>>>        Integer iFileNum
40898>>>>>>>>>        
40898>>>>>>>>>        // Initialize
40898>>>>>>>>>        Move "" to sEmpty
40899>>>>>>>>>        Move 0  to ihdbc
40900>>>>>>>>>        
40900>>>>>>>>>        Move False to Err
40901>>>>>>>>>        
40901>>>>>>>>>        // Call the driver function
40901>>>>>>>>>        //   Note we call FUNC_SQLFILECONNECT with iFileNum = 0.
40901>>>>>>>>>        //   This will perform SQLConnectionConnect instead of SQLFileConnect
40901>>>>>>>>>        Move 0 to iFileNum
40902>>>>>>>>>        Call_Driver iFileNum sDrvrId Function FUNC_SQLFILECONNECT ;            Callback Self ;            Passing sConnectString sEmpty Self ;            Result ihdbc
40907>>>>>>>>>        
40907>>>>>>>>>        // If there was an error, make result invalid
40907>>>>>>>>>        If (Err) ;            Move 0 to ihdbc
40910>>>>>>>>>        
40910>>>>>>>>>        // Check result and store it
40910>>>>>>>>>        If (ihdbc <> 0) ;            Send StoreConnectionInfo ihdbc sDrvrId
40913>>>>>>>>>        
40913>>>>>>>>>        // Return success status
40913>>>>>>>>>        Function_Return (ihdbc <> 0)
40914>>>>>>>>>    End_Function
40915>>>>>>>>>    
40915>>>>>>>>>    
40915>>>>>>>>>    // Disconnect from an embedded SQL server and free allocated
40915>>>>>>>>>    // resources
40915>>>>>>>>>    Procedure SQLDisconnect
40917>>>>>>>>>        Integer ihdbc
40917>>>>>>>>>        Integer iVoid
40917>>>>>>>>>        String  sDrvrId
40917>>>>>>>>>        String  sEmpty
40917>>>>>>>>>        
40917>>>>>>>>>        // Initialize
40917>>>>>>>>>        Move "" to sEmpty
40918>>>>>>>>>        
40918>>>>>>>>>        // Get the cli handle
40918>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40919>>>>>>>>>        Get psDriverId to sDrvrId
40920>>>>>>>>>        
40920>>>>>>>>>        // Free the CLI handle
40920>>>>>>>>>        If (ihdbc <> 0) Begin
40922>>>>>>>>>            // Call the driver function to disconnect
40922>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLDISCONNECT ;                Callback Self ;                Passing sEmpty sEmpty ihdbc ;                Result iVoid
40927>>>>>>>>>            
40927>>>>>>>>>            Move -1 to giLastSQLhdbc
40928>>>>>>>>>            
40928>>>>>>>>>            // Free the DataFlex handle
40928>>>>>>>>>            Send DestroySQLConnection
40929>>>>>>>>>        End
40929>>>>>>>>>>
40929>>>>>>>>>    End_Procedure
40930>>>>>>>>>    
40930>>>>>>>>>    // Create a cSQLStatement object
40930>>>>>>>>>    Function CreateSQLStatement Returns Handle
40932>>>>>>>>>        
40932>>>>>>>>>        Handle hoSQLStatement
40932>>>>>>>>>        Get Create (RefClass(cSQLStatement)) to hoSQLStatement
40933>>>>>>>>>        
40933>>>>>>>>>        // If the connection has a default Bind File, assign it to the
40933>>>>>>>>>        // statement object. The default is set when you open a file with a
40933>>>>>>>>>        // SetFileConnection command.
40933>>>>>>>>>        Set piBindFile of hoSQLStatement to (piBindFile(Self))
40934>>>>>>>>>        
40934>>>>>>>>>        Function_Return hoSQLStatement
40935>>>>>>>>>    End_Function
40936>>>>>>>>>    
40936>>>>>>>>>    
40936>>>>>>>>>    // Open a statement for use
40936>>>>>>>>>    Function SQLOpen Returns Handle
40938>>>>>>>>>        Handle  hoSQLStatement
40938>>>>>>>>>        Integer ihdbc
40938>>>>>>>>>        Integer ihstmt
40938>>>>>>>>>        Integer iVoid
40938>>>>>>>>>        String  sDrvrId
40938>>>>>>>>>        String  sEmpty
40938>>>>>>>>>        String  sDummyZeroDate
40938>>>>>>>>>        String  sDummyZeroDateMssqlDatetime
40938>>>>>>>>>        
40938>>>>>>>>>        // Initialize
40938>>>>>>>>>        Move "" to sEmpty
40939>>>>>>>>>        
40939>>>>>>>>>        // Get the cli handle to the connection
40939>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40940>>>>>>>>>        Get psDriverId  to sDrvrId
40941>>>>>>>>>        
40941>>>>>>>>>        // Allocate a new handle and populate it
40941>>>>>>>>>        If (ihdbc <> 0) Begin
40943>>>>>>>>>            // Create a new cSQLStatement object
40943>>>>>>>>>            Get CreateSQLStatement to hoSQLStatement
40944>>>>>>>>>            
40944>>>>>>>>>            // Call the driver function to allocate a cli statement handle
40944>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLOPEN ;                Callback Self ;                Passing hoSQLStatement sEmpty ihdbc ;                Result ihstmt
40949>>>>>>>>>            
40949>>>>>>>>>            // If unsuccessful destroy hoSQLStatement
40949>>>>>>>>>            If (ihstmt = 0) Begin
40951>>>>>>>>>                Send DestroySQLStatement of hoSQLStatement
40952>>>>>>>>>                Move 0 to hoSQLStatement
40953>>>>>>>>>            End
40953>>>>>>>>>>
40953>>>>>>>>>            Else Begin
40954>>>>>>>>>                Send StoreStatementInfo of hoSQLStatement ihstmt sDrvrId ihdbc
40955>>>>>>>>>                
40955>>>>>>>>>                // Store DummyZeroDate of hoSQLConnection in hoSQLStatement
40955>>>>>>>>>                Get psDummyZeroDate              to sDummyZeroDate
40956>>>>>>>>>                Get psDummyZeroDateMssqlDatetime to sDummyZeroDateMssqlDatetime
40957>>>>>>>>>                
40957>>>>>>>>>                Set psDummyZeroDate              of hoSQLStatement to sDummyZeroDate
40958>>>>>>>>>                Set psDummyZeroDateMssqlDatetime of hoSQLStatement to sDummyZeroDateMssqlDatetime
40959>>>>>>>>>                
40959>>>>>>>>>            End
40959>>>>>>>>>>
40959>>>>>>>>>        End
40959>>>>>>>>>>
40959>>>>>>>>>        
40959>>>>>>>>>        Function_Return hoSQLStatement
40960>>>>>>>>>    End_Function
40961>>>>>>>>>    
40961>>>>>>>>>End_Class
40962>>>>>>>>>
40962>>>>>>>>>// Manager for embedded SQL handles.                           
40962>>>>>>>>>// We want to be able to use multiple drivers and multiple            
40962>>>>>>>>>// connections within a driver and multiple statements within a       
40962>>>>>>>>>// connection. To allow this we have placed our own handle logic on   
40962>>>>>>>>>// top of the driver handle logic. This way we can handle the         
40962>>>>>>>>>// situation where two driver handles may be equal.                   
40962>>>>>>>>>
40962>>>>>>>>>Class cSQLHandleManager is a cObject
40963>>>>>>>>>    
40963>>>>>>>>>    Procedure Construct_object
40965>>>>>>>>>        Forward Send Construct_object
40967>>>>>>>>>        
40967>>>>>>>>>        Property String  psDefaultDriver      ""
40968>>>>>>>>>        Property String  psDefaultConnection  ""
40969>>>>>>>>>        
40969>>>>>>>>>    End_Procedure
40970>>>>>>>>>    
40970>>>>>>>>>    // Create a cSQLConnection object
40970>>>>>>>>>    Function CreateSQLConnection Returns Handle
40972>>>>>>>>>        Handle hoSQLConnection
40972>>>>>>>>>        Get Create (RefClass(cSQLConnection)) to hoSQLConnection
40973>>>>>>>>>        Function_Return hoSQLConnection
40974>>>>>>>>>    End_Function
40975>>>>>>>>>    
40975>>>>>>>>>    
40975>>>>>>>>>    // Store default connection information
40975>>>>>>>>>    Procedure SQLSetConnect String sDriver String sConnect
40977>>>>>>>>>        Set psDefaultDriver      to sDriver
40978>>>>>>>>>        Set psDefaultConnection  to sConnect
40979>>>>>>>>>    End_Procedure
40980>>>>>>>>>    
40980>>>>>>>>>    
40980>>>>>>>>>    // Make a connection to an embedded SQL server
40980>>>>>>>>>    // Returns : The DataFlex handle to the connection
40980>>>>>>>>>    Function SQLConnect String sDrvrID String sConnect Returns Integer
40982>>>>>>>>>        Handle hoSQLConnection
40982>>>>>>>>>        Integer bOK
40982>>>>>>>>>        
40982>>>>>>>>>        // Check arguments
40982>>>>>>>>>        If (sDrvrID = "" and sConnect = "") Begin
40984>>>>>>>>>            Get psDefaultDriver      to sDrvrId
40985>>>>>>>>>            Get psDefaultConnection  to sConnect
40986>>>>>>>>>        End
40986>>>>>>>>>>
40986>>>>>>>>>        
40986>>>>>>>>>        // Create a cSQLConnection object
40986>>>>>>>>>        Get CreateSQLConnection to hoSQLConnection
40987>>>>>>>>>        // Connect to the database
40987>>>>>>>>>        Get SQLConnect of hoSQLConnection sDrvrID sConnect to bOK
40988>>>>>>>>>        
40988>>>>>>>>>        // If connection to the database failed, destroy the cSQLConnection object and return a 0 handle
40988>>>>>>>>>        If (not(bOK)) Begin
40990>>>>>>>>>            Send DestroySQLConnection of hoSQLConnection
40991>>>>>>>>>            Move 0 to hoSQLConnection
40992>>>>>>>>>        End
40992>>>>>>>>>>
40992>>>>>>>>>        
40992>>>>>>>>>        Function_Return hoSQLConnection
40993>>>>>>>>>    End_Function
40994>>>>>>>>>    
40994>>>>>>>>>    
40994>>>>>>>>>    
40994>>>>>>>>>    // Make an existing connection available for use with Embedded SQL.
40994>>>>>>>>>    // The connection is identified by the number of a file
40994>>>>>>>>>    // that is open for that connection.
40994>>>>>>>>>    Function SQLFileConnect Integer iFileNum Returns Handle
40996>>>>>>>>>        Handle hoSQLConnection
40996>>>>>>>>>        Integer bOK
40996>>>>>>>>>        
40996>>>>>>>>>        // Create a cSQLConnection object
40996>>>>>>>>>        Get CreateSQLConnection to hoSQLConnection
40997>>>>>>>>>        Get SQLFileConnect of hoSQLConnection iFileNum to bOK
40998>>>>>>>>>        
40998>>>>>>>>>        // If connection to the database failed, destroy the cSQLConnection object and return a 0 handle
40998>>>>>>>>>        If (not(bOK)) Begin
41000>>>>>>>>>            Send DestroySQLConnection of hoSQLConnection
41001>>>>>>>>>            Move 0 to hoSQLConnection
41002>>>>>>>>>        End
41002>>>>>>>>>>
41002>>>>>>>>>        
41002>>>>>>>>>        Function_Return hoSQLConnection
41003>>>>>>>>>    End_Function
41004>>>>>>>>>    
41004>>>>>>>>>    // Establish an embedded SQL connection that uses an existing connection from an earlier login or open.
41004>>>>>>>>>    // Existing connections are identified by there connectstring. (can be obtained with DF_DRIVER_SERVER_NAME attribute)
41004>>>>>>>>>    // If sConnectString exist in the list of existing connections, that connection will be used for embedded SQL.
41004>>>>>>>>>    // The connectstrings must be an exact match, but can be case insensitive
41004>>>>>>>>>    // If no matching connectstring is found, this function will return 0
41004>>>>>>>>>    // This function will only work with CLI connectivity kits 6.2 or later
41004>>>>>>>>>    Function SQLConnectionConnect String sDrvrID String sConnectString Returns Integer
41006>>>>>>>>>        Handle hoSQLConnection
41006>>>>>>>>>        Integer bOK
41006>>>>>>>>>        
41006>>>>>>>>>        // Check arguments
41006>>>>>>>>>        If (sDrvrID = "" and sConnectString = "") Begin
41008>>>>>>>>>            Get psDefaultDriver      to sDrvrId
41009>>>>>>>>>            Get psDefaultConnection  to sConnectString
41010>>>>>>>>>        End
41010>>>>>>>>>>
41010>>>>>>>>>        
41010>>>>>>>>>        // Create a cSQLConnection object
41010>>>>>>>>>        Get CreateSQLConnection to hoSQLConnection
41011>>>>>>>>>        // Connect to the database
41011>>>>>>>>>        Get SQLConnectionConnect of hoSQLConnection sDrvrID sConnectString to bOK
41012>>>>>>>>>        
41012>>>>>>>>>        // If connection to the database failed, destroy the cSQLConnection object and return a 0 handle
41012>>>>>>>>>        If (not(bOK)) Begin
41014>>>>>>>>>            Send DestroySQLConnection of hoSQLConnection
41015>>>>>>>>>            Move 0 to hoSQLConnection
41016>>>>>>>>>        End
41016>>>>>>>>>>
41016>>>>>>>>>        
41016>>>>>>>>>        Function_Return hoSQLConnection
41017>>>>>>>>>    End_Function
41018>>>>>>>>>    
41018>>>>>>>>>    
41018>>>>>>>>>End_Class
41019>>>>>>>Use MSSqldrv.pkg
Including file: MSSqldrv.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\MSSqldrv.pkg)
41019>>>>>>>>>//     Package that declares MS SQL driver constants and functions.
41019>>>>>>>>>//     This package can be used by developers who want to add Data Access
41019>>>>>>>>>//     MS SQL Client specific code to a DataFlex application.
41019>>>>>>>>>
41019>>>>>>>>>Use Cli.pkg
41019>>>>>>>>>Use SQL.pkg
41019>>>>>>>>>
41019>>>>>>>>>//   Driver Indentification
41019>>>>>>>>>
41019>>>>>>>>>//   Error number constants
41019>>>>>>>>>
41019>>>>>>>>>
41019>>>>>>>>>//   Possible DF_DRIVER_SQLSERVER_CLIENT_VERSION values
41019>>>>>>>>>
41019>>>>>>>>>
41019>>>>>>>>>
41019>>>>>>>>>
41019>>>>>>>>>
41019>>>>>>>>>
41019>>>>>>>>>// SQL Server spcific types.
41019>>>>>>>>>Define SQL_SS_TIMESTAMPOFFSET   for   (-155) //SQL server datetimeoffset type */
41019>>>>>>>>>Define SQL_SS_TIME2             for   (-154) //SQL server time type */
41019>>>>>>>>>Define SQL_SS_XML               for   (-152) //SQL server xml type */
41019>>>>>>>>>Define SQL_SS_VARIANT           for   (-150) //SQL server variant type */
41019>>>>>>>>>
41019>>>>>>>>>// SQL Server spcific types.
41019>>>>>>>>>Define SQL_TYPE_TIMESTAMP2      for   (-200) //SQL server datetime2 type */
41019>>>>>>>>>Define SQL_VARCHARMAX           for   (-201) //SQL server varchar(max) type */
41019>>>>>>>>>Define SQL_WVARCHARMAX          for   (-202) //SQL server wvarchar(max) type */
41019>>>>>>>>>Define SQL_VARBINARYMAX         for   (-203) //SQL server varbinary(max) type */
41019>>>>>>>>>Define SQL_TYPE_MONEY           for   (-204) //SQL server money type */
41019>>>>>>>>>Define SQL_TYPE_SMALLMONEY      for   (-205) //SQL server smallmoney type */
41019>>>>>>>>>Define SQL_TYPE_SMALLDATETIME   for   (-206) //SQL server smalldatetype type */
41019>>>>>>>>>
41019>>>>>>>>>
41019>>>>>>>>>//   MSSQL_SetConstraint <FileNum> <ConstraintText>
41019>>>>>>>>>//
41019>>>>>>>>>//     Setup a constraint for a file.
41019>>>>>>>>>
41019>>>>>>>>>
41019>>>>>>>>>Class cMSSQLHandler is a cCLIHandler
41020>>>>>>>>>    
41020>>>>>>>>>    Procedure Construct_Object
41022>>>>>>>>>        Forward Send Construct_Object
41024>>>>>>>>>        
41024>>>>>>>>>        Set psDriverID to MSSQLDRV_ID
41025>>>>>>>>>    End_Procedure
41026>>>>>>>>>    
41026>>>>>>>>>    
41026>>>>>>>>>    
41026>>>>>>>>>    //   Extract the list from the out connect string.
41026>>>>>>>>>    Function ExtractList String sOutConnStr Integer hoStore Returns Integer
41028>>>>>>>>>        String  sItem
41028>>>>>>>>>        Integer iStart
41028>>>>>>>>>        Integer iEnd
41028>>>>>>>>>        
41028>>>>>>>>>        If (hoStore = 0) ;            Move Current_object to hoStore
41031>>>>>>>>>        
41031>>>>>>>>>        Send Delete_Data to hoStore
41032>>>>>>>>>        Move (Pos("{", sOutConnStr)) to iStart
41033>>>>>>>>>        While (iStart > 0)
41037>>>>>>>>>            Move (Right(sOutConnStr, Length(sOutConnStr) - iStart)) to sOutConnStr
41038>>>>>>>>>            If (Left(sOutConnStr, 1) = "}") ;                Move 0 to iStart
41041>>>>>>>>>            Else Begin
41042>>>>>>>>>                Move (Pos(",", sOutConnStr)) to iStart
41043>>>>>>>>>                Move (Pos("}", sOutConnStr)) to iEnd
41044>>>>>>>>>                If ((iStart = 0) or (iEnd < iStart)) ;                    Move iEnd to iStart
41047>>>>>>>>>                
41047>>>>>>>>>                If (iStart > 0) ;                    Set Value of hoStore  (Item_Count(Current_Object)) to (Left(sOutConnStr, iStart - 1))
41050>>>>>>>>>                
41050>>>>>>>>>                If (iStart = iEnd) ;                    Move 0 to iStart
41053>>>>>>>>>            End
41053>>>>>>>>>>
41053>>>>>>>>>        Loop
41054>>>>>>>>>>
41054>>>>>>>>>        
41054>>>>>>>>>        Function_Return (Item_Count(hoStore))
41055>>>>>>>>>    End_Procedure
41056>>>>>>>>>    
41056>>>>>>>>>    
41056>>>>>>>>>    
41056>>>>>>>>>    //   Call the driver's browse connect function
41056>>>>>>>>>    Function BrowseConnect String sInConnStr Returns String
41058>>>>>>>>>        String  sDriver
41058>>>>>>>>>        String  sOutConnStr
41058>>>>>>>>>        Integer iArg
41058>>>>>>>>>        Integer iRetval
41058>>>>>>>>>        
41058>>>>>>>>>        Get psDriverID to sDriver
41059>>>>>>>>>        If (sDriver <> "") Begin
41061>>>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
41062>>>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
41067>>>>>>>>>        End
41067>>>>>>>>>>
41067>>>>>>>>>        
41067>>>>>>>>>        Function_Return sOutConnStr
41068>>>>>>>>>    End_Function// BrowseConnect
41069>>>>>>>>>    
41069>>>>>>>>>    
41069>>>>>>>>>    Function BrowseConnectLocal String sInConnStr Returns String
41071>>>>>>>>>        String  sDriver
41071>>>>>>>>>        String  sOutConnStr
41071>>>>>>>>>        Integer iArg
41071>>>>>>>>>        Integer iRetval
41071>>>>>>>>>        
41071>>>>>>>>>        Move 1 to iArg // Browses only local
41072>>>>>>>>>        
41072>>>>>>>>>        Get psDriverID to sDriver
41073>>>>>>>>>        If (sDriver <> "") Begin
41075>>>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
41076>>>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
41081>>>>>>>>>        End
41081>>>>>>>>>>
41081>>>>>>>>>        
41081>>>>>>>>>        Function_Return sOutConnStr
41082>>>>>>>>>    End_Function// BrowseConnect
41083>>>>>>>>>    
41083>>>>>>>>>    
41083>>>>>>>>>    Function EnumerateServersNetworkOrLocal Integer iNetworkLocal  Returns Integer
41085>>>>>>>>>        String  sServerList
41085>>>>>>>>>        Integer iNumServers
41085>>>>>>>>>        Integer iDriver
41085>>>>>>>>>        Integer iClientVersion
41085>>>>>>>>>        String  sDriver
41085>>>>>>>>>        
41085>>>>>>>>>        Get DriverIndex MSSQLDRV_ID to iDriver
41086>>>>>>>>>        
41086>>>>>>>>>        If (iDriver) Begin
41088>>>>>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
41091>>>>>>>>>            
41091>>>>>>>>>            Get SqlServerClientDriverName iClientVersion to sDriver
41092>>>>>>>>>            
41092>>>>>>>>>            Move ("DRIVER={" + sDriver + "};") to sDriver
41093>>>>>>>>>            If (iNetworkLocal = 0) Begin
41095>>>>>>>>>                Get BrowseConnect sDriver to sServerList
41096>>>>>>>>>            End
41096>>>>>>>>>>
41096>>>>>>>>>            Else Begin
41097>>>>>>>>>                Get BrowseConnectLocal sDriver to sServerList
41098>>>>>>>>>            End
41098>>>>>>>>>>
41098>>>>>>>>>            Get ExtractList sServerList Current_object to iNumServers
41099>>>>>>>>>        End
41099>>>>>>>>>>
41099>>>>>>>>>        
41099>>>>>>>>>        Function_Return iNumServers
41100>>>>>>>>>    End_Function
41101>>>>>>>>>    
41101>>>>>>>>>    //   Enumerate the available SQL Server database servers
41101>>>>>>>>>    //   This function will return all SQL Server instances on the network.
41101>>>>>>>>>    //   This may take a long time.
41101>>>>>>>>>    //   To enumerate only local SQL Server instances use EnumerateServersLocal
41101>>>>>>>>>    Function EnumerateServers Returns Integer
41103>>>>>>>>>        Integer iNumServers
41103>>>>>>>>>        Integer iNetworkLocal
41103>>>>>>>>>        
41103>>>>>>>>>        Move 0 to iNetworkLocal // 0 = enumerate network servers
41104>>>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
41105>>>>>>>>>
41105>>>>>>>>>        Function_Return iNumServers
41106>>>>>>>>>    End_Function
41107>>>>>>>>>    
41107>>>>>>>>>    //   Enumerate the available SQL Server database servers
41107>>>>>>>>>    //   This function will return only return SQL Server instance on the local machine
41107>>>>>>>>>    //   To enumerate all SQL Server instances in a network use EnumerateServers
41107>>>>>>>>>    Function EnumerateServersLocal Returns Integer
41109>>>>>>>>>        Integer iNumServers
41109>>>>>>>>>        Integer iNetworkLocal
41109>>>>>>>>>        
41109>>>>>>>>>        Move 1 to iNetworkLocal // 1 = enumerate local servers
41110>>>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
41111>>>>>>>>>        
41111>>>>>>>>>        Function_Return iNumServers
41112>>>>>>>>>    End_Function
41113>>>>>>>>>    
41113>>>>>>>>>    //   Enumerate database in a given server.
41113>>>>>>>>>    Function EnumerateDatabases String sServer String sUser String sPassWord Returns Integer
41115>>>>>>>>>        Integer hoSQL
41115>>>>>>>>>        String  sConnect
41115>>>>>>>>>        String  sDatabase
41115>>>>>>>>>        Integer hdbc
41115>>>>>>>>>        Integer hstmt
41115>>>>>>>>>        Integer iFetchResult iDriver iClientVersion
41115>>>>>>>>>        
41115>>>>>>>>>        If (Num_Arguments < 3) ;            Move "" to sPassWord
41118>>>>>>>>>        If (Num_Arguments < 2) ;            Move "" to sUser
41121>>>>>>>>>        
41121>>>>>>>>>        If (sUser <> "") ;            Move ("SERVER=" + Trim(sServer) + ";UID=" + Trim(sUser) + ";PWD=" + Trim(sPassword) + ";") to sConnect
41124>>>>>>>>>        Else ;            Move ("SERVER=" + Trim(sServer) + ";Trusted_Connection=yes") to sConnect
41126>>>>>>>>>
41126>>>>>>>>>        Get DriverIndex MSSQLDRV_ID to iDriver
41127>>>>>>>>>        Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
41130>>>>>>>>>        If (iClientVersion >= 18) Begin
41132>>>>>>>>>            Append sConnect ";Encrypt=Optional;TrustServerCertificate=Yes"
41133>>>>>>>>>            Move (Replaces(" ", sConnect, "")) to sConnect
41134>>>>>>>>>        End
41134>>>>>>>>>>
41134>>>>>>>>>        
41134>>>>>>>>>        Object oEnumDBSQLmanager is a cSQLHandleManager
41136>>>>>>>>>            Move Current_Object to hoSQL
41137>>>>>>>>>        End_Object
41138>>>>>>>>>        
41138>>>>>>>>>        If (hoSQL <> 0) Begin
41140>>>>>>>>>            Get SQLConnect of hoSQL "MSSQLDRV" sConnect to hdbc
41141>>>>>>>>>            If (hdbc <> 0) Begin
41143>>>>>>>>>                Get SQLOpen of hdbc to hstmt
41144>>>>>>>>>                If (hstmt <> 0) Begin
41146>>>>>>>>>                    //   We could do a direct select on the sysdatabases table but we use
41146>>>>>>>>>                    //   the stored procedure sp_database instead. SQL Server recommends this
41146>>>>>>>>>                    //   approach in case meta data might change, the stored procedure will
41146>>>>>>>>>                    //   stay the same.
41146>>>>>>>>>                    Send SQLSetProcedureName to hstmt "sp_databases"
41147>>>>>>>>>                    Send SQLCall to hstmt
41148>>>>>>>>>                    Repeat
41148>>>>>>>>>>
41148>>>>>>>>>                        Get SQLFetch of hstmt to iFetchResult
41149>>>>>>>>>                        If (iFetchResult <> 0) Begin
41151>>>>>>>>>                            Get SQLColumnValue of hstmt 1 to sDatabase
41152>>>>>>>>>                            Set Value  (Item_Count(Current_Object)) to sDatabase
41153>>>>>>>>>                        End
41153>>>>>>>>>>
41153>>>>>>>>>                    Until (iFetchResult = 0)
41155>>>>>>>>>                    
41155>>>>>>>>>                    Send SQLClose to hstmt
41156>>>>>>>>>                End
41156>>>>>>>>>>
41156>>>>>>>>>                Send SQLDisconnect to hdbc
41157>>>>>>>>>            End
41157>>>>>>>>>>
41157>>>>>>>>>        End
41157>>>>>>>>>>
41157>>>>>>>>>        Send Destroy_Object to hoSQL
41158>>>>>>>>>        
41158>>>>>>>>>        Function_Return (Item_Count(Current_Object))
41159>>>>>>>>>    End_Function
41160>>>>>>>>>    
41160>>>>>>>>>    Function SqlServerClientVersionName Integer iClientVersion  Returns String
41162>>>>>>>>>        String  sSqlServerClientVersionName
41162>>>>>>>>>        
41162>>>>>>>>>        Case Begin
41162>>>>>>>>>            Case (iClientVersion = SQLSERVER2019CLIENT)
41164>>>>>>>>>                Move SQLSERVER2019CLIENTNAME to sSqlServerClientVersionName
41165>>>>>>>>>                Case Break
41166>>>>>>>>>            
41166>>>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
41169>>>>>>>>>                Move SQLSERVER2017CLIENTNAME to sSqlServerClientVersionName
41170>>>>>>>>>                Case Break
41171>>>>>>>>>                
41171>>>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
41174>>>>>>>>>                Move SQLSERVER2016CLIENTNAME to sSqlServerClientVersionName
41175>>>>>>>>>                Case Break
41176>>>>>>>>>            
41176>>>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
41179>>>>>>>>>                Move SQLSERVER2014CLIENTNAME to sSqlServerClientVersionName
41180>>>>>>>>>                Case Break
41181>>>>>>>>>            
41181>>>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
41184>>>>>>>>>                Move SQLSERVER2012CLIENTNAME to sSqlServerClientVersionName
41185>>>>>>>>>                Case Break
41186>>>>>>>>>            
41186>>>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
41189>>>>>>>>>                Move SQLSERVER2008CLIENTNAME to sSqlServerClientVersionName
41190>>>>>>>>>                Case Break
41191>>>>>>>>>            
41191>>>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
41194>>>>>>>>>                Move SQLSERVER2005CLIENTNAME to sSqlServerClientVersionName
41195>>>>>>>>>                Case Break
41196>>>>>>>>>            
41196>>>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
41199>>>>>>>>>                Move SQLSERVER2000CLIENTNAME to sSqlServerClientVersionName
41200>>>>>>>>>                Case Break
41201>>>>>>>>>            
41201>>>>>>>>>            Case Else
41201>>>>>>>>>                Move (SFormat("%1 (version %2) ",SQLSERVERUNKNOWNCLIENTNAME,iClientVersion)) to sSqlServerClientVersionName
41202>>>>>>>>>        Case End
41202>>>>>>>>>        
41202>>>>>>>>>        Function_Return sSqlServerClientVersionName
41203>>>>>>>>>    End_Function
41204>>>>>>>>>
41204>>>>>>>>>    Function SqlServerClientDriverName Integer iClientVersion  Returns String
41206>>>>>>>>>        String  sSqlServerClientDriverName
41206>>>>>>>>>        
41206>>>>>>>>>        Case Begin
41206>>>>>>>>>            Case (iClientVersion = SQLSERVER2019CLIENT)
41208>>>>>>>>>                Move SQLSERVER2019DRVRSTR to sSqlServerClientDriverName
41209>>>>>>>>>                Case Break
41210>>>>>>>>>
41210>>>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
41213>>>>>>>>>                Move SQLSERVER2017DRVRSTR to sSqlServerClientDriverName
41214>>>>>>>>>                Case Break
41215>>>>>>>>>                
41215>>>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
41218>>>>>>>>>                Move SQLSERVER2016DRVRSTR to sSqlServerClientDriverName
41219>>>>>>>>>                Case Break
41220>>>>>>>>>            
41220>>>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
41223>>>>>>>>>                Move SQLSERVER2014DRVRSTR to sSqlServerClientDriverName
41224>>>>>>>>>                Case Break
41225>>>>>>>>>            
41225>>>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
41228>>>>>>>>>                Move SQLSERVER2012DRVRSTR to sSqlServerClientDriverName
41229>>>>>>>>>                Case Break
41230>>>>>>>>>            
41230>>>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
41233>>>>>>>>>                Move SQLSERVER2008DRVRSTR to sSqlServerClientDriverName
41234>>>>>>>>>                Case Break
41235>>>>>>>>>            
41235>>>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
41238>>>>>>>>>                Move SQLSERVER2005DRVRSTR to sSqlServerClientDriverName
41239>>>>>>>>>                Case Break
41240>>>>>>>>>            
41240>>>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
41243>>>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
41244>>>>>>>>>                Case Break
41245>>>>>>>>>            
41245>>>>>>>>>            Case Else
41245>>>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
41246>>>>>>>>>        Case End
41246>>>>>>>>>        
41246>>>>>>>>>        Function_Return sSqlServerClientDriverName
41247>>>>>>>>>    End_Function
41248>>>>>>>>>    
41248>>>>>>>>>End_Class
41249>>>>>>>Use db2_drv.pkg
Including file: db2_drv.pkg    (C:\Program Files\DataFlex 24.0\Pkg\db2_drv.pkg)
41249>>>>>>>>>// DB2_DRV.PKG                                                          
41249>>>>>>>>>//   Package that declares DB2 driver constants and functions.          
41249>>>>>>>>>//   This package can be used by developers who want to add DB2 driver  
41249>>>>>>>>>//   specific code to a DataFlex application.                           
41249>>>>>>>>>
41249>>>>>>>>>Use Cli.pkg
41249>>>>>>>>>
41249>>>>>>>>>// Driver attributes
41249>>>>>>>>>
41249>>>>>>>>>
41249>>>>>>>>>// Driver Indentification
41249>>>>>>>>>
41249>>>>>>>>>// Error number constants
41249>>>>>>>>>
41249>>>>>>>>>// Call driver function identifiers
41249>>>>>>>>>
41249>>>>>>>>>// DB2 specific data types
41249>>>>>>>>>Define SQL_CLOB           for   (-99)
41249>>>>>>>>>Define SQL_BLOB           for   (-98)
41249>>>>>>>>>Define SQL_XML            for   (-370)
41249>>>>>>>>>// DB2 Graphic types are Unicode types
41249>>>>>>>>>Define SQL_GRAPHIC        for   (-95)
41249>>>>>>>>>Define SQL_VARGRAPHIC     for   (-96)
41249>>>>>>>>>Define SQL_LONGVARGRAPHIC for   (-97)
41249>>>>>>>>>Define SQL_DBCLOB         for   (-350)
41249>>>>>>>>>
41249>>>>>>>>>
41249>>>>>>>>>// Extra DB2 commands
41249>>>>>>>>>
41249>>>>>>>>>
41249>>>>>>>>>// DB2_SetConstraint <FileNum> <ConstraintText>                         
41249>>>>>>>>>//   Setup a constraint for a file.                                     
41249>>>>>>>>>
41249>>>>>>>>>
41249>>>>>>>>>
41249>>>>>>>>>Class cDB2Handler is a cCLIHandler
41250>>>>>>>>>    
41250>>>>>>>>>    Procedure Construct_Object
41252>>>>>>>>>        Forward Send Construct_Object
41254>>>>>>>>>        
41254>>>>>>>>>        Set psDriverID to DB2_DRV_ID
41255>>>>>>>>>    End_Procedure
41256>>>>>>>>>    
41256>>>>>>>>>    
41256>>>>>>>>>    
41256>>>>>>>>>    // Reset the datasource list to the beginning
41256>>>>>>>>>    Procedure SeedDataSources
41258>>>>>>>>>        String  sDriver
41258>>>>>>>>>        String  sVoid
41258>>>>>>>>>        Integer iRetval
41258>>>>>>>>>        
41258>>>>>>>>>        Get psDriverID to sDriver
41259>>>>>>>>>        If (sDriver <> "") ;            Call_Driver 0 sDRiver Function CLI_INITDATASOURCES Callback 0 Passing sVoid sVoid SQL_FETCH_ALL Result iRetval
41266>>>>>>>>>    End_Procedure
41267>>>>>>>>>    
41267>>>>>>>>>    
41267>>>>>>>>>    
41267>>>>>>>>>    // Call the driver's data sources function
41267>>>>>>>>>    Function DataSources Returns String
41269>>>>>>>>>        String  sDriver
41269>>>>>>>>>        String  sDataSource
41269>>>>>>>>>        String  sDescription
41269>>>>>>>>>        Integer iLength
41269>>>>>>>>>        Integer iRetval
41269>>>>>>>>>        
41269>>>>>>>>>        Get psDriverID to sDriver
41270>>>>>>>>>        If (sDriver <> "") Begin
41272>>>>>>>>>            Move 8192 to iLength
41273>>>>>>>>>            Move (Repeat(" ", iLength)) to sDataSource
41274>>>>>>>>>            Move (Repeat(" ", iLength)) to sDescription
41275>>>>>>>>>            Call_Driver 0 sDRiver Function CLI_DATASOURCES Callback 0 Passing sDataSource sDescription iLength Result iRetval
41280>>>>>>>>>        End
41280>>>>>>>>>>
41280>>>>>>>>>        
41280>>>>>>>>>        If (sDataSource <> "" or sDescription <> "") ;            Function_Return (sDataSource - (If(sDescription <> "", "," *  sDescription, "")))
41283>>>>>>>>>        Else ;            Function_Return ""
41285>>>>>>>>>    End_Function
41286>>>>>>>>>    
41286>>>>>>>>>End_Class
41287>>>>>>>Use odbc_drv.pkg
Including file: odbc_drv.pkg    (C:\Program Files\DataFlex 24.0\Pkg\odbc_drv.pkg)
41287>>>>>>>>>//   Package that declares ODBC driver constants and functions.         
41287>>>>>>>>>//   This package can be used by developers who want to add Data Access 
41287>>>>>>>>>//   ODBC Client specific code to a DataFlex application.               
41287>>>>>>>>>
41287>>>>>>>>>Use Cli.pkg
41287>>>>>>>>>
41287>>>>>>>>>// Driver Indentification
41287>>>>>>>>>
41287>>>>>>>>>// Error number constants
41287>>>>>>>>>
41287>>>>>>>>>// Call driver function identifiers
41287>>>>>>>>>
41287>>>>>>>>>Class cODBCHandler is a cCLIHandler
41288>>>>>>>>>    
41288>>>>>>>>>    Procedure Construct_Object
41290>>>>>>>>>        Forward Send Construct_Object
41292>>>>>>>>>        
41292>>>>>>>>>        Set psDriverID to ODBC_DRV_ID
41293>>>>>>>>>    End_Procedure
41294>>>>>>>>>    
41294>>>>>>>>>    
41294>>>>>>>>>    
41294>>>>>>>>>    // Setup the type of data sources returned by the datasources function
41294>>>>>>>>>    Procedure Set DataSourceType Integer iNewType
41296>>>>>>>>>        String  sDriver
41296>>>>>>>>>        String  sVoid
41296>>>>>>>>>        Integer iRetval
41296>>>>>>>>>        
41296>>>>>>>>>        Get psDriverID to sDriver
41297>>>>>>>>>        If (sDriver <> "") ;            Call_Driver 0 sDRiver Function CLI_INITDATASOURCES Callback 0 Passing sVoid sVoid iNewType Result iRetval
41304>>>>>>>>>    End_Procedure
41305>>>>>>>>>    
41305>>>>>>>>>    
41305>>>>>>>>>    // Call the driver's data sources function
41305>>>>>>>>>    Function DataSources Returns String
41307>>>>>>>>>        String  sDriver
41307>>>>>>>>>        String  sDataSource
41307>>>>>>>>>        String  sDescription
41307>>>>>>>>>        Integer iLength
41307>>>>>>>>>        Integer iRetval
41307>>>>>>>>>        
41307>>>>>>>>>        Get psDriverID to sDriver
41308>>>>>>>>>        If (sDriver <> "") Begin
41310>>>>>>>>>            Move 8192 to iLength
41311>>>>>>>>>            Move (Repeat(" ", iLength)) to sDataSource
41312>>>>>>>>>            Move (Repeat(" ", iLength)) to sDescription
41313>>>>>>>>>            Call_Driver 0 sDRiver Function CLI_DATASOURCES Callback 0 Passing sDataSource sDescription iLength Result iRetval
41318>>>>>>>>>        End
41318>>>>>>>>>>
41318>>>>>>>>>        
41318>>>>>>>>>        If (sDataSource <> "" or sDescription <> "") ;            Function_Return (sDataSource - (If(sDescription <> "", "," * sDescription, "")))
41321>>>>>>>>>        Else ;            Function_Return ""
41323>>>>>>>>>    End_Function
41324>>>>>>>>>    
41324>>>>>>>>>End_Class
41325>>>>>>>>>
41325>>>>>>>Use DFBTRDRV.PKG
Including file: DFBTRDRV.PKG    (C:\Program Files\DataFlex 24.0\Pkg\DFBTRDRV.PKG)
41325>>>>>>>>>// $File title : Package for the DataFlex Connectivity Kit for Pervasive.SQL
41325>>>>>>>>>// Notice      : This package contains constants and commands, used to call
41325>>>>>>>>>//               specific functions in the DFBTRDRV.
41325>>>>>>>>>Use Ui
41325>>>>>>>>>//
41325>>>>>>>>>// Driver Indentification
41325>>>>>>>>>//
41325>>>>>>>>>
41325>>>>>>>>>// Driver attributes
41325>>>>>>>>>//
41325>>>>>>>>>// Call_Driver functions ID's
41325>>>>>>>>>//
41325>>>>>>>>>//
41325>>>>>>>>>// DFBTRFN_CONVERT_FILE options
41325>>>>>>>>>//
41325>>>>>>>>>
41325>>>>>>>>>//
41325>>>>>>>>>// DFBTRFN_SET_OWNER options
41325>>>>>>>>>//
41325>>>>>>>>>
41325>>>>>>>>>//
41325>>>>>>>>>// DFBTRFN_SET_TRANSACTION_TYPE options
41325>>>>>>>>>//
41325>>>>>>>>>
41325>>>>>>>>>
41325>>>>>>>>>//
41325>>>>>>>>>// Command to create all vars which may be needed
41325>>>>>>>>>// in other commands.
41325>>>>>>>>>//
41325>>>>>>>>>
41325>>>>>>>>>
41325>>>>>>>>>
41325>>>>>>>>>//
41325>>>>>>>>>// Command to set the owner of a Btrieve file.
41325>>>>>>>>>// File must have been opened.
41325>>>>>>>>>// Filenumber needs to be passed.
41325>>>>>>>>>// To clear set the owner to "".
41325>>>>>>>>>// Examples:
41325>>>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret"
41325>>>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY CALLBACK MyCallBack
41325>>>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" ENCRYPT
41325>>>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY ENCRYPT CALLBACK MyCallBack
41325>>>>>>>>>// To clear:
41325>>>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to ""
41325>>>>>>>>>//
41325>>>>>>>>>
41325>>>>>>>>>
41325>>>>>>>>>
41325>>>>>>>>>//
41325>>>>>>>>>// Command to parse DFBTR_SET_OWNVER
41325>>>>>>>>>// options.
41325>>>>>>>>>//
41325>>>>>>>>>
41325>>>>>>>>>
41325>>>>>>>>>
41325>>>>>>>>>//
41325>>>>>>>>>// Command to parse for Callback
41325>>>>>>>>>//
41325>>>>>>>>>
41325>>>>>>>>>
41325>>>>>>>>>
41325>>>>>>>>>//
41325>>>>>>>>>// Command to clear the owner of a Btrieve file.
41325>>>>>>>>>// File must have been opened.
41325>>>>>>>>>// Filenumber needs to be passed.
41325>>>>>>>>>// Examples:
41325>>>>>>>>>//      DFBTR_CLEAR_OWNER MyFileNumber
41325>>>>>>>>>//
41325>>>>>>>>>
41325>>>>>>>>>
41325>>>>>>>>>
41325>>>>>>>>>//
41325>>>>>>>>>// Command to add a owner name to the internal list of ownernames
41325>>>>>>>>>// which will be tries when opening files.
41325>>>>>>>>>//
41325>>>>>>>>>
41325>>>>>>>>>
41325>>>>>>>>>
41325>>>>>>>>>//
41325>>>>>>>>>// Command to remove all owners from the internal list of ownernames
41325>>>>>>>>>//
41325>>>>>>>>>
41325>>>>>>>>>
41325>>>>>>>>>//
41325>>>>>>>>>// Command to set the owner name to be used when opening the DDF files.
41325>>>>>>>>>// The DDF owner is required when Pervasive.SQL security is turned on.
41325>>>>>>>>>// The DDF owner is equal to the password of the Master user in Pervasive.SQL
41325>>>>>>>>>// This command overwrites the DDF_OWNER setting in DFBTRDRV.INT
41325>>>>>>>>>//
41325>>>>>>>>>
41325>>>>>>>>>//
41325>>>>>>>>>// Command to change the transaction type.
41325>>>>>>>>>// Valid types are:
41325>>>>>>>>>//     DFBTRTT_NONE
41325>>>>>>>>>//     DFBTRTT_EXCLUSIVE
41325>>>>>>>>>//     DFBTRTT_CONCURRENT
41325>>>>>>>>>//
41325>>>>>>>>>//
41325>>>>>>>>>
41325>>>>>>>>>
41325>>>>>>>>>
41325>>>>>>>>>//
41325>>>>>>>>>// Command to get the current transaction type.
41325>>>>>>>>>//
41325>>>>>>>>>
41325>>>>>>>>>//
41325>>>>>>>>>// Command to set explicit_locking
41325>>>>>>>>>//
41325>>>>>>>>>
41325>>>>>>>>>//
41325>>>>>>>>>// Command to get explicit locking
41325>>>>>>>>>//
41325>>>>>>>>>
41325>>>>>>>>>//
41325>>>>>>>>>// Command to set detection for incompatible positive signs in numeric fields
41325>>>>>>>>>//
41325>>>>>>>>>
41325>>>>>>>>>//
41325>>>>>>>>>// Command to get detection for incompatible positive signs in numeric fields
41325>>>>>>>>>//
41325>>>>>>>>>
41325>>>>>>>>>// Purpose: An instance of this class can be used as a broker object to
41325>>>>>>>>>//          call several Dfbtrdrv releated methods.
41325>>>>>>>>>
41325>>>>>>>>>Class cDFBtrDrvHandler is an Array
41326>>>>>>>>>    
41326>>>>>>>>>    Procedure Construct_Object Integer iImage
41328>>>>>>>>>        Forward Send Construct_object iImage
41330>>>>>>>>>        
41330>>>>>>>>>        Property String  psDriverID "DFBTRDRV"
41331>>>>>>>>>    End_Procedure
41332>>>>>>>>>    
41332>>>>>>>>>    //  The revsion of a Dfbtrdrv Connectivity Kit
41332>>>>>>>>>    //
41332>>>>>>>>>    
41332>>>>>>>>>    Function CKRevision Returns String
41334>>>>>>>>>        String  sDriverID
41334>>>>>>>>>        String  sRevision
41334>>>>>>>>>        String  sVoid
41334>>>>>>>>>        Integer iRetval
41334>>>>>>>>>        
41334>>>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41334>>>>>>>>>        // This error would otherwise be raised when we have an older
41334>>>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
41334>>>>>>>>>        Send Ignore_error to Error_object_Id 20491
41335>>>>>>>>>        Get psDriverID to sDriverID
41336>>>>>>>>>        Move (Repeat(" ", 255)) to sRevision
41337>>>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKREVISION Callback 0 Passing sRevision sVoid 0 Result iRetval
41342>>>>>>>>>        Send Trap_Error to Error_object_Id 20491
41343>>>>>>>>>        If (Trim(sRevision) = "") Begin
41345>>>>>>>>>            // Unable to get the revision. return all zeroes.
41345>>>>>>>>>            Move "0.0.0.0" to sRevision
41346>>>>>>>>>        End
41346>>>>>>>>>>
41346>>>>>>>>>        Function_Return sRevision
41347>>>>>>>>>    End_Function
41348>>>>>>>>>    
41348>>>>>>>>>    Function CkUsesUri Returns Integer
41350>>>>>>>>>        String  sDriverID
41350>>>>>>>>>        String  sVoid1
41350>>>>>>>>>        String  sVoid2
41350>>>>>>>>>        Integer iRetval
41350>>>>>>>>>        
41350>>>>>>>>>        Get psDriverID to sDriverID
41351>>>>>>>>>        
41351>>>>>>>>>        Move 0 to iRetval
41352>>>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41352>>>>>>>>>        // This error would otherwise be raised when we have an older
41352>>>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKUSESURI function
41352>>>>>>>>>        Send Ignore_error to Error_object_Id 20491
41353>>>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKUSESURI Callback 0 Passing sVoid1 sVoid2 0 Result iRetval
41358>>>>>>>>>        Send Trap_Error to Error_object_Id 20491
41359>>>>>>>>>        
41359>>>>>>>>>        Function_Return iRetval
41360>>>>>>>>>    End_Function
41361>>>>>>>>>    
41361>>>>>>>>>    
41361>>>>>>>>>    
41361>>>>>>>>>    // Extract the Nth part of a a.b.c.d revsion string.
41361>>>>>>>>>    //
41361>>>>>>>>>    // Returns : The part version number or -1 if there is no such part number.
41361>>>>>>>>>    //
41361>>>>>>>>>    
41361>>>>>>>>>    Function ExtractPartFromRevision Integer iPartNum String sRevision Returns Integer
41363>>>>>>>>>        Integer iPartRev
41363>>>>>>>>>        Integer iCurrentPart
41363>>>>>>>>>        Integer iSeparatorPos
41363>>>>>>>>>        
41363>>>>>>>>>        If (iPartNum > 4) ;            Function_Return -1
41366>>>>>>>>>        
41366>>>>>>>>>        Move 0 to iCurrentPart
41367>>>>>>>>>        Repeat
41367>>>>>>>>>>
41367>>>>>>>>>            Move (Pos(".", sRevision)) to iSeparatorPos
41368>>>>>>>>>            If (iSeparatorPos > 0) Begin
41370>>>>>>>>>                Move (Left(sRevision, iSeparatorPos - 1)) to iPartRev
41371>>>>>>>>>                Move (Right(sRevision, Length(sRevision) - iSeparatorPos)) to sRevision
41372>>>>>>>>>                Increment iCurrentPart
41373>>>>>>>>>            End
41373>>>>>>>>>>
41373>>>>>>>>>            Else If (sRevision <> "") Begin
41376>>>>>>>>>                Move sRevision to iPartRev
41377>>>>>>>>>                Move "" to sRevision
41378>>>>>>>>>                Increment iCurrentPart
41379>>>>>>>>>            End
41379>>>>>>>>>>
41379>>>>>>>>>            Else ;                Move -1 to iPartRev
41381>>>>>>>>>        Until (iCurrentPart >= iPartNum or iPartRev = -1)
41383>>>>>>>>>        
41383>>>>>>>>>        Function_Return iPartRev
41384>>>>>>>>>    End_Function
41385>>>>>>>>>    
41385>>>>>>>>>    
41385>>>>>>>>>    
41385>>>>>>>>>    //
41385>>>>>>>>>    //  Returns the major revision of the CK
41385>>>>>>>>>    //
41385>>>>>>>>>    
41385>>>>>>>>>    Function CKMajorRevision Returns Integer
41387>>>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 1, CKRevision(Current_Object)))
41388>>>>>>>>>    End_Function
41389>>>>>>>>>    
41389>>>>>>>>>    
41389>>>>>>>>>    
41389>>>>>>>>>    //  Returns the minor revision of the CK
41389>>>>>>>>>    //
41389>>>>>>>>>    
41389>>>>>>>>>    Function CKMinorRevision Returns Integer
41391>>>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 2, CKRevision(Current_Object)))
41392>>>>>>>>>    End_Function
41393>>>>>>>>>    
41393>>>>>>>>>    
41393>>>>>>>>>    //  Returns the release revision of the CK
41393>>>>>>>>>    //
41393>>>>>>>>>    
41393>>>>>>>>>    Function CKReleaseRevision Returns Integer
41395>>>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 3, CKRevision(Current_Object)))
41396>>>>>>>>>    End_Function
41397>>>>>>>>>    
41397>>>>>>>>>    
41397>>>>>>>>>    //  Returns the major revision of the CK
41397>>>>>>>>>    //
41397>>>>>>>>>    
41397>>>>>>>>>    Function CKBuildRevision Returns Integer
41399>>>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 4, CKRevision(Current_Object)))
41400>>>>>>>>>    End_Function
41401>>>>>>>>>    
41401>>>>>>>>>    
41401>>>>>>>>>    //  Determines if the CK conforms to a passed minimal revsion.
41401>>>>>>>>>    //
41401>>>>>>>>>    
41401>>>>>>>>>    Function IsMinimalRevision Integer iMajor Integer iMinor Integer iRelease Integer iBuild Returns Integer
41403>>>>>>>>>        If (iMajor < CKMajorRevision(Current_object)) ;            Function_Return (True)
41406>>>>>>>>>        Else If (iMajor = CKMajorRevision(Current_object)) Begin
41409>>>>>>>>>            If (iMinor < CKMinorRevision(Current_object)) ;                Function_Return (True)
41412>>>>>>>>>            Else If (iMinor = CKMinorRevision(Current_object)) Begin
41415>>>>>>>>>                If (iRelease < CKReleaseRevision(Current_object)) ;                    Function_Return (True)
41418>>>>>>>>>                Else If (iRelease = CKReleaseRevision(Current_object) and iBuild <= CKBuildRevision(Current_object)) ;                    Function_Return (True)
41422>>>>>>>>>            End
41422>>>>>>>>>>
41422>>>>>>>>>        End
41422>>>>>>>>>>
41422>>>>>>>>>        
41422>>>>>>>>>        Function_Return (False)
41423>>>>>>>>>    End_Function
41424>>>>>>>>>    
41424>>>>>>>>>    //   Functions to query the Pervasive.SQL version:
41424>>>>>>>>>    //       PSQLRequesterVersionInfo    Integer iFileNum Returns String
41424>>>>>>>>>    //       PSQLLocalEngineVersionInfo  Integer iFileNum Returns String
41424>>>>>>>>>    //       PSQLServerEngineVersionInfo Integer iFileNum Returns String
41424>>>>>>>>>    //
41424>>>>>>>>>    //   All 3 functions return the version of a Pervasive.SQL component
41424>>>>>>>>>    //   in the following format:
41424>>>>>>>>>    //       <version>.<revision>.<type>
41424>>>>>>>>>    //   possible values for <type>:
41424>>>>>>>>>    //       9 for 32-bit Windows workstation/workgroup engine or Linux
41424>>>>>>>>>    //         server using Workgroup authentication mode
41424>>>>>>>>>    //       C for client cache engine
41424>>>>>>>>>    //       D for DOS workstation
41424>>>>>>>>>    //       N for client Requester
41424>>>>>>>>>    //       S for NetWare server
41424>>>>>>>>>    //       T for 32-bit Windows server engine
41424>>>>>>>>>    //       U for Linux server using PAM or BTPASSWD authentication
41424>>>>>>>>>    //
41424>>>>>>>>>    //   example:
41424>>>>>>>>>    //       8.50.T
41424>>>>>>>>>    //   will be returned for a Pervasive.SQL 8.5 Server Engine running on
41424>>>>>>>>>    //   32-bits Windows server.
41424>>>>>>>>>    //
41424>>>>>>>>>    //   The FileNumber parameter must specify an opened table or 0.
41424>>>>>>>>>    //   For PSQLServerEngineVersionInfo the FileNumber can not be 0.
41424>>>>>>>>>    //
41424>>>>>>>>>    //   If the version information is not available or can not be obtained
41424>>>>>>>>>    //   the functions will return "0.0.0"
41424>>>>>>>>>    
41424>>>>>>>>>    //  Returns the version information of the
41424>>>>>>>>>    //           Pervasive.SQL Client requester.
41424>>>>>>>>>    
41424>>>>>>>>>    Function PSQLRequesterVersionInfo Integer iFileNum Returns String
41426>>>>>>>>>        
41426>>>>>>>>>        String  sDriverID
41426>>>>>>>>>        String  sVersion
41426>>>>>>>>>        String  sVoid
41426>>>>>>>>>        Integer iRetval
41426>>>>>>>>>        
41426>>>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41426>>>>>>>>>        // This error would otherwise be raised when we have an older
41426>>>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
41426>>>>>>>>>        Send Ignore_error to Error_object_Id 20491
41427>>>>>>>>>        Get psDriverID to sDriverID
41428>>>>>>>>>        Move (Repeat(" ", 255)) to sVersion
41429>>>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLREQUESTERVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
41434>>>>>>>>>        Send Trap_Error to Error_object_Id 20491
41435>>>>>>>>>        If (Trim(sVersion) = "") Begin
41437>>>>>>>>>            // Unable to get the revision. return all zeroes.
41437>>>>>>>>>            Move "0.0.0" to sVersion
41438>>>>>>>>>        End
41438>>>>>>>>>>
41438>>>>>>>>>        Function_Return sVersion
41439>>>>>>>>>    End_Function
41440>>>>>>>>>    
41440>>>>>>>>>    //           Pervasive.SQL Engine
41440>>>>>>>>>    
41440>>>>>>>>>    Function PSQLLocalEngineVersionInfo Integer iFileNum Returns String
41442>>>>>>>>>        
41442>>>>>>>>>        String  sDriverID
41442>>>>>>>>>        String  sVersion
41442>>>>>>>>>        String  sVoid
41442>>>>>>>>>        Integer iRetval
41442>>>>>>>>>        
41442>>>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41442>>>>>>>>>        // This error would otherwise be raised when we have an older
41442>>>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
41442>>>>>>>>>        Send Ignore_error to Error_object_Id 20491
41443>>>>>>>>>        Get psDriverID to sDriverID
41444>>>>>>>>>        Move (Repeat(" ", 255)) to sVersion
41445>>>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLLOCALENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
41450>>>>>>>>>        Send Trap_Error to Error_object_Id 20491
41451>>>>>>>>>        If (Trim(sVersion) = "") Begin
41453>>>>>>>>>            // Unable to get the revision. return all zeroes.
41453>>>>>>>>>            Move "0.0.0" to sVersion
41454>>>>>>>>>        End
41454>>>>>>>>>>
41454>>>>>>>>>        Function_Return sVersion
41455>>>>>>>>>    End_Function
41456>>>>>>>>>    
41456>>>>>>>>>    //  Returns the version information of the
41456>>>>>>>>>    //           Pervasive.SQL Server Engine
41456>>>>>>>>>    
41456>>>>>>>>>    Function PSQLServerEngineVersionInfo Integer iFileNum Returns String
41458>>>>>>>>>        
41458>>>>>>>>>        String  sDriverID
41458>>>>>>>>>        String  sVersion
41458>>>>>>>>>        String  sVoid
41458>>>>>>>>>        Integer iRetval
41458>>>>>>>>>        
41458>>>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41458>>>>>>>>>        // This error would otherwise be raised when we have an older
41458>>>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
41458>>>>>>>>>        Send Ignore_error to Error_object_Id 20491
41459>>>>>>>>>        Get psDriverID to sDriverID
41460>>>>>>>>>        Move (Repeat(" ", 255)) to sVersion
41461>>>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLSERVERENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
41466>>>>>>>>>        Send Trap_Error to Error_object_Id 20491
41467>>>>>>>>>        If (Trim(sVersion) = "") Begin
41469>>>>>>>>>            // Unable to get the revision. return all zeroes.
41469>>>>>>>>>            Move "0.0.0" to sVersion
41470>>>>>>>>>        End
41470>>>>>>>>>>
41470>>>>>>>>>        Function_Return sVersion
41471>>>>>>>>>    End_Function
41472>>>>>>>>>    
41472>>>>>>>>>End_Class
41473>>>>>>>>>
41473>>>>>>>>>
41473>>>>>>>Use cSQLConnectionIniFile.inc
Including file: cSQLConnectionIniFile.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cSQLConnectionIniFile.inc)
41473>>>>>>>>>//****************************************************************************
41473>>>>>>>>>// $Module type: Include file
41473>>>>>>>>>// $Module name: cSQLConnectionIniFile.inc
41473>>>>>>>>>//
41473>>>>>>>>>// $Author     : Nils Svedmyr, RDC Tools International.
41473>>>>>>>>>// Copyright (c) 2012 RDC Tools International
41473>>>>>>>>>// E-mail      : support@rdctools.com
41473>>>>>>>>>// Web-site    : http://www.rdctools.com
41473>>>>>>>>>//
41473>>>>>>>>>// Created     : 2017-01-18 @ 13:04 (Military date format - Year-Month-Day)
41473>>>>>>>>>//
41473>>>>>>>>>// Note        : Header file with constant declarations for the cSQLConnectionIniFile class.
41473>>>>>>>>>//
41473>>>>>>>>>// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
41473>>>>>>>>>// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
41473>>>>>>>>>// This is free software; you can redistribute it and/or modify it under the terms of the
41473>>>>>>>>>// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
41473>>>>>>>>>// in the help folder for more details.
41473>>>>>>>>>//
41473>>>>>>>>>Use Winkern.pkg
41473>>>>>>>>>Use cIniFile.pkg
41473>>>>>>>>>    Use cCryptographerEx.pkg
Including file: cCryptographerEx.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCryptographerEx.pkg)
41473>>>>>>>>>>>Use VdfBase.pkg
41473>>>>>>>>>>>
41473>>>>>>>>>>>Use CryptographerConstants.pkg
Including file: CryptographerConstants.pkg    (C:\Program Files\DataFlex 24.0\Pkg\CryptographerConstants.pkg)
41473>>>>>>>>>>>>>//   Author  : Ulbe Stellema
41473>>>>>>>>>>>>>// Algorithm classes
41473>>>>>>>>>>>>>Define ALG_CLASS_ANY                    for |CI$00000000 // (0)
41473>>>>>>>>>>>>>Define ALG_CLASS_SIGNATURE              for |CI$00002000 // (1 << 13)
41473>>>>>>>>>>>>>Define ALG_CLASS_MSG_ENCRYPT            for |CI$00004000 // (2 << 13)
41473>>>>>>>>>>>>>Define ALG_CLASS_DATA_ENCRYPT           for |CI$00006000 // (3 << 13)
41473>>>>>>>>>>>>>Define ALG_CLASS_HASH                   for |CI$00008000 // (4 << 13)
41473>>>>>>>>>>>>>Define ALG_CLASS_KEY_EXCHANGE           for |CI$0000A000 // (5 << 13)
41473>>>>>>>>>>>>>Define ALG_CLASS_ALL                    for |CI$0000E000 // (7 << 13)
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// Algorithm types
41473>>>>>>>>>>>>>Define ALG_TYPE_ANY                     for |CI$00000000 // (0)
41473>>>>>>>>>>>>>Define ALG_TYPE_DSS                     for |CI$00000200 // (1 << 9)
41473>>>>>>>>>>>>>Define ALG_TYPE_RSA                     for |CI$00000400 // (2 << 9)
41473>>>>>>>>>>>>>Define ALG_TYPE_BLOCK                   for |CI$00000600 // (3 << 9)
41473>>>>>>>>>>>>>Define ALG_TYPE_STREAM                  for |CI$00000800 // (4 << 9)
41473>>>>>>>>>>>>>Define ALG_TYPE_DH                      for |CI$00000A00 // (5 << 9)
41473>>>>>>>>>>>>>Define ALG_TYPE_SECURECHANNEL           for |CI$00000C00 // (6 << 9)
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// Generic sub-ids
41473>>>>>>>>>>>>>Define ALG_SID_ANY                      for |CI$00000000 // (0)
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// RSA sub-ids
41473>>>>>>>>>>>>>Define ALG_SID_RSA_ANY                  for 0
41473>>>>>>>>>>>>>Define ALG_SID_RSA_PKCS                 for 1
41473>>>>>>>>>>>>>Define ALG_SID_RSA_MSATWORK             for 2
41473>>>>>>>>>>>>>Define ALG_SID_RSA_ENTRUST              for 3
41473>>>>>>>>>>>>>Define ALG_SID_RSA_PGP                  for 4
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// DSS sub-ids
41473>>>>>>>>>>>>>Define ALG_SID_DSS_ANY                  for 0
41473>>>>>>>>>>>>>Define ALG_SID_DSS_PKCS                 for 1
41473>>>>>>>>>>>>>Define ALG_SID_DSS_DMS                  for 2
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// DES sub_ids
41473>>>>>>>>>>>>>Define ALG_SID_DES                      for 1
41473>>>>>>>>>>>>>Define ALG_SID_3DES                     for 3
41473>>>>>>>>>>>>>Define ALG_SID_DESX                     for 4
41473>>>>>>>>>>>>>Define ALG_SID_IDEA                     for 5
41473>>>>>>>>>>>>>Define ALG_SID_CAST                     for 6
41473>>>>>>>>>>>>>Define ALG_SID_SAFERSK64                for 7
41473>>>>>>>>>>>>>Define ALG_SID_SAFERSK128               for 8
41473>>>>>>>>>>>>>Define ALG_SID_3DES_112                 for 9
41473>>>>>>>>>>>>>Define ALG_SID_CYLINK_MEK               for 12
41473>>>>>>>>>>>>>Define ALG_SID_RC5                      for 13
41473>>>>>>>>>>>>>Define ALG_SID_AES_128                  for 14
41473>>>>>>>>>>>>>Define ALG_SID_AES_192                  for 15
41473>>>>>>>>>>>>>Define ALG_SID_AES_256                  for 16
41473>>>>>>>>>>>>>Define ALG_SID_AES                      for 17
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// Fortezza sub-ids
41473>>>>>>>>>>>>>Define ALG_SID_SKIPJACK                 for 10
41473>>>>>>>>>>>>>Define ALG_SID_TEK                      for 11
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// RC2 sub-ids
41473>>>>>>>>>>>>>Define ALG_SID_RC2                      for 2
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// Stream cipher sub-ids
41473>>>>>>>>>>>>>Define ALG_SID_RC4                      for 1
41473>>>>>>>>>>>>>Define ALG_SID_SEAL                     for 2
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// Diffie-Hellman sub-ids
41473>>>>>>>>>>>>>Define ALG_SID_DH_SANDF                 for 1
41473>>>>>>>>>>>>>Define ALG_SID_DH_EPHEM                 for 2
41473>>>>>>>>>>>>>Define ALG_SID_AGREED_KEY_ANY           for 3
41473>>>>>>>>>>>>>Define ALG_SID_KEA                      for 4
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// Hash sub ids
41473>>>>>>>>>>>>>Define ALG_SID_MD2                      for 1
41473>>>>>>>>>>>>>Define ALG_SID_MD4                      for 2
41473>>>>>>>>>>>>>Define ALG_SID_MD5                      for 3
41473>>>>>>>>>>>>>Define ALG_SID_SHA                      for 4
41473>>>>>>>>>>>>>Define ALG_SID_SHA1                     for 4
41473>>>>>>>>>>>>>Define ALG_SID_MAC                      for 5
41473>>>>>>>>>>>>>Define ALG_SID_RIPEMD                   for 6
41473>>>>>>>>>>>>>Define ALG_SID_RIPEMD160                for 7
41473>>>>>>>>>>>>>Define ALG_SID_SSL3SHAMD5               for 8
41473>>>>>>>>>>>>>Define ALG_SID_HMAC                     for 9
41473>>>>>>>>>>>>>Define ALG_SID_TLS1PRF                  for 10
41473>>>>>>>>>>>>>Define ALG_SID_HASH_REPLACE_OWF         for 11
41473>>>>>>>>>>>>>Define ALG_SID_SHA_256                  for 12
41473>>>>>>>>>>>>>Define ALG_SID_SHA_384                  for 13
41473>>>>>>>>>>>>>Define ALG_SID_SHA_512                  for 14
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// secure channel sub ids
41473>>>>>>>>>>>>>Define ALG_SID_SSL3_MASTER              for 1
41473>>>>>>>>>>>>>Define ALG_SID_SCHANNEL_MASTER_HASH     for 2
41473>>>>>>>>>>>>>Define ALG_SID_SCHANNEL_MAC_KEY         for 3
41473>>>>>>>>>>>>>Define ALG_SID_PCT1_MASTER              for 4
41473>>>>>>>>>>>>>Define ALG_SID_SSL2_MASTER              for 5
41473>>>>>>>>>>>>>Define ALG_SID_TLS1_MASTER              for 6
41473>>>>>>>>>>>>>Define ALG_SID_SCHANNEL_ENC_KEY         for 7
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// algorithm identifier definitions
41473>>>>>>>>>>>>>Define CALG_MD2                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD2)
41473>>>>>>>>>>>>>Define CALG_MD4                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD4)
41473>>>>>>>>>>>>>Define CALG_MD5                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD5)
41473>>>>>>>>>>>>>Define CALG_SHA                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA)
41473>>>>>>>>>>>>>Define CALG_SHA1                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA1)
41473>>>>>>>>>>>>>Define CALG_MAC                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MAC)
41473>>>>>>>>>>>>>Define CALG_RSA_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
41473>>>>>>>>>>>>>Define CALG_DSS_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_DSS ior ALG_SID_DSS_ANY)
41473>>>>>>>>>>>>>Define CALG_NO_SIGN                     for (ALG_CLASS_SIGNATURE ior ALG_TYPE_ANY ior ALG_SID_ANY)
41473>>>>>>>>>>>>>Define CALG_RSA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
41473>>>>>>>>>>>>>Define CALG_DES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DES)
41473>>>>>>>>>>>>>Define CALG_3DES_112                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES_112)
41473>>>>>>>>>>>>>Define CALG_3DES                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES)
41473>>>>>>>>>>>>>Define CALG_DESX                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DESX)
41473>>>>>>>>>>>>>Define CALG_RC2                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC2)
41473>>>>>>>>>>>>>Define CALG_RC4                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_RC4)
41473>>>>>>>>>>>>>Define CALG_SEAL                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_SEAL)
41473>>>>>>>>>>>>>Define CALG_DH_SF                       for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_SANDF)
41473>>>>>>>>>>>>>Define CALG_DH_EPHEM                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_EPHEM)
41473>>>>>>>>>>>>>Define CALG_AGREEDKEY_ANY               for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_AGREED_KEY_ANY)
41473>>>>>>>>>>>>>Define CALG_KEA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_KEA)
41473>>>>>>>>>>>>>Define CALG_HUGHES_MD5                  for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_ANY ior ALG_SID_MD5)
41473>>>>>>>>>>>>>Define CALG_SKIPJACK                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_SKIPJACK)
41473>>>>>>>>>>>>>Define CALG_TEK                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_TEK)
41473>>>>>>>>>>>>>Define CALG_CYLINK_MEK                  for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_CYLINK_MEK)
41473>>>>>>>>>>>>>Define CALG_SSL3_SHAMD5                 for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SSL3SHAMD5)
41473>>>>>>>>>>>>>Define CALG_SSL3_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL3_MASTER)
41473>>>>>>>>>>>>>Define CALG_SCHANNEL_MASTER_HASH        for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MASTER_HASH)
41473>>>>>>>>>>>>>Define CALG_SCHANNEL_MAC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MAC_KEY)
41473>>>>>>>>>>>>>Define CALG_SCHANNEL_ENC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_ENC_KEY)
41473>>>>>>>>>>>>>Define CALG_PCT1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_PCT1_MASTER)
41473>>>>>>>>>>>>>Define CALG_SSL2_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL2_MASTER)
41473>>>>>>>>>>>>>Define CALG_TLS1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_TLS1_MASTER)
41473>>>>>>>>>>>>>Define CALG_RC5                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC5)
41473>>>>>>>>>>>>>Define CALG_HMAC                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HMAC)
41473>>>>>>>>>>>>>Define CALG_TLS1PRF                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_TLS1PRF)
41473>>>>>>>>>>>>>Define CALG_HASH_REPLACE_OWF            for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HASH_REPLACE_OWF)
41473>>>>>>>>>>>>>Define CALG_AES_128                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_128)
41473>>>>>>>>>>>>>Define CALG_AES_192                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_192)
41473>>>>>>>>>>>>>Define CALG_AES_256                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_256)
41473>>>>>>>>>>>>>Define CALG_AES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES)
41473>>>>>>>>>>>>>Define CALG_SHA_256                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_256)
41473>>>>>>>>>>>>>Define CALG_SHA_384                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_384)
41473>>>>>>>>>>>>>Define CALG_SHA_512                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_512)
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// Providers
41473>>>>>>>>>>>>>Define MS_DEF_PROV                      for "Microsoft Base Cryptographic Provider v1.0"
41473>>>>>>>>>>>>>Define MS_ENHANCED_PROV                 for "Microsoft Enhanced Cryptographic Provider v1.0"
41473>>>>>>>>>>>>>Define MS_STRONG_PROV                   for "Microsoft Strong Cryptographic Provider"
41473>>>>>>>>>>>>>Define MS_DEF_RSA_SIG_PROV              for "Microsoft RSA Signature Cryptographic Provider"
41473>>>>>>>>>>>>>Define MS_DEF_RSA_SCHANNEL_PROV         for "Microsoft RSA SChannel Cryptographic Provider"
41473>>>>>>>>>>>>>Define MS_DEF_DSS_PROV                  for "Microsoft Base DSS Cryptographic Provider"
41473>>>>>>>>>>>>>Define MS_DEF_DSS_DH_PROV               for "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
41473>>>>>>>>>>>>>Define MS_ENH_DSS_DH_PROV               for "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
41473>>>>>>>>>>>>>Define MS_DEF_DH_SCHANNEL_PROV          for "Microsoft DH SChannel Cryptographic Provider"
41473>>>>>>>>>>>>>Define MS_SCARD_PROV                    for "Microsoft Base Smart Card Crypto Provider"
41473>>>>>>>>>>>>>Define MS_ENH_RSA_AES_PROV              for "Microsoft Enhanced RSA and AES Cryptographic Provider"
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// dwFlags definitions for CryptAcquireContext
41473>>>>>>>>>>>>>Define CRYPT_VERIFYCONTEXT              for |CI$F0000000
41473>>>>>>>>>>>>>Define CRYPT_NEWKEYSET                  for |CI$00000008
41473>>>>>>>>>>>>>Define CRYPT_DELETEKEYSET               for |CI$00000010
41473>>>>>>>>>>>>>Define CRYPT_MACHINE_KEYSET             for |CI$00000020
41473>>>>>>>>>>>>>Define CRYPT_SILENT                     for |CI$00000040
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// dwFlag definitions for CryptGenKey
41473>>>>>>>>>>>>>Define CRYPT_EXPORTABLE                 for |CI$00000001
41473>>>>>>>>>>>>>Define CRYPT_USER_PROTECTED             for |CI$00000002
41473>>>>>>>>>>>>>Define CRYPT_CREATE_SALT                for |CI$00000004
41473>>>>>>>>>>>>>Define CRYPT_UPDATE_KEY                 for |CI$00000008
41473>>>>>>>>>>>>>Define CRYPT_NO_SALT                    for |CI$00000010
41473>>>>>>>>>>>>>Define CRYPT_PREGEN                     for |CI$00000040
41473>>>>>>>>>>>>>Define CRYPT_RECIPIENT                  for |CI$00000010
41473>>>>>>>>>>>>>Define CRYPT_INITIATOR                  for |CI$00000040
41473>>>>>>>>>>>>>Define CRYPT_ONLINE                     for |CI$00000080
41473>>>>>>>>>>>>>Define CRYPT_SF                         for |CI$00000100
41473>>>>>>>>>>>>>Define CRYPT_CREATE_IV                  for |CI$00000200
41473>>>>>>>>>>>>>Define CRYPT_KEK                        for |CI$00000400
41473>>>>>>>>>>>>>Define CRYPT_DATA_KEY                   for |CI$00000800
41473>>>>>>>>>>>>>Define CRYPT_VOLATILE                   for |CI$00001000
41473>>>>>>>>>>>>>Define CRYPT_SGCKEY                     for |CI$00002000
41473>>>>>>>>>>>>>Define CRYPT_ARCHIVABLE                 for |CI$00004000
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// Provider types
41473>>>>>>>>>>>>>Define PROV_RSA_FULL                    for 1
41473>>>>>>>>>>>>>Define PROV_RSA_SIG                     for 2
41473>>>>>>>>>>>>>Define PROV_DSS                         for 3
41473>>>>>>>>>>>>>Define PROV_FORTEZZA                    for 4
41473>>>>>>>>>>>>>Define PROV_MS_EXCHANGE                 for 5
41473>>>>>>>>>>>>>Define PROV_SSL                         for 6
41473>>>>>>>>>>>>>Define PROV_RSA_SCHANNEL                for 12
41473>>>>>>>>>>>>>Define PROV_DSS_DH                      for 13
41473>>>>>>>>>>>>>Define PROV_EC_ECDSA_SIG                for 14
41473>>>>>>>>>>>>>Define PROV_EC_ECNRA_SIG                for 15
41473>>>>>>>>>>>>>Define PROV_EC_ECDSA_FULL               for 16
41473>>>>>>>>>>>>>Define PROV_EC_ECNRA_FULL               for 17
41473>>>>>>>>>>>>>Define PROV_DH_SCHANNEL                 for 18
41473>>>>>>>>>>>>>Define PROV_SPYRUS_LYNKS                for 20
41473>>>>>>>>>>>>>Define PROV_RNG                         for 21
41473>>>>>>>>>>>>>Define PROV_INTEL_SEC                   for 22
41473>>>>>>>>>>>>>Define PROV_REPLACE_OWF                 for 23
41473>>>>>>>>>>>>>Define PROV_RSA_AES                     for 24
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// KP_MODE
41473>>>>>>>>>>>>>// KP_MODE
41473>>>>>>>>>>>>>Define CRYPT_MODE_CBC                   for 1       // Cipher block chaining
41473>>>>>>>>>>>>>Define CRYPT_MODE_ECB                   for 2       // Electronic code book
41473>>>>>>>>>>>>>Define CRYPT_MODE_OFB                   for 3       // Output feedback mode
41473>>>>>>>>>>>>>Define CRYPT_MODE_CFB                   for 4       // Cipher feedback mode
41473>>>>>>>>>>>>>Define CRYPT_MODE_CTS                   for 5       // Ciphertext stealing mode
41473>>>>>>>>>>>>>Define CRYPT_MODE_CBCI                  for 6       // ANSI CBC Interleaved
41473>>>>>>>>>>>>>Define CRYPT_MODE_CFBP                  for 7       // ANSI CFB Pipelined
41473>>>>>>>>>>>>>Define CRYPT_MODE_OFBP                  for 8       // ANSI OFB Pipelined
41473>>>>>>>>>>>>>Define CRYPT_MODE_CBCOFM                for 9       // ANSI CBC + OF Masking
41473>>>>>>>>>>>>>Define CRYPT_MODE_CBCOFMI               for 10      // ANSI CBC + OFM Interleaved
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// dwParam definitions for CryptGetKeyParam
41473>>>>>>>>>>>>>Define KP_IV                            for 1       // Initialization vector
41473>>>>>>>>>>>>>Define KP_SALT                          for 2       // Salt value
41473>>>>>>>>>>>>>Define KP_PADDING                       for 3       // Padding values
41473>>>>>>>>>>>>>Define KP_MODE                          for 4       // Mode of the cipher
41473>>>>>>>>>>>>>Define KP_MODE_BITS                     for 5       // Number of bits to feedback
41473>>>>>>>>>>>>>Define KP_PERMISSIONS                   for 6       // Key permissions DWORD
41473>>>>>>>>>>>>>Define KP_ALGID                         for 7       // Key algorithm
41473>>>>>>>>>>>>>Define KP_BLOCKLEN                      for 8       // Block size of the cipher
41473>>>>>>>>>>>>>Define KP_KEYLEN                        for 9       // Length of key in bits
41473>>>>>>>>>>>>>Define KP_SALT_EX                       for 10      // Length of salt in bytes
41473>>>>>>>>>>>>>Define KP_P                             for 11      // DSS/Diffie-Hellman P value
41473>>>>>>>>>>>>>Define KP_G                             for 12      // DSS/Diffie-Hellman G value
41473>>>>>>>>>>>>>Define KP_Q                             for 13      // DSS Q value
41473>>>>>>>>>>>>>Define KP_X                             for 14      // Diffie-Hellman X value
41473>>>>>>>>>>>>>Define KP_Y                             for 15      // Y value
41473>>>>>>>>>>>>>Define KP_RA                            for 16      // Fortezza RA value
41473>>>>>>>>>>>>>Define KP_RB                            for 17      // Fortezza RB value
41473>>>>>>>>>>>>>Define KP_INFO                          for 18      // for putting information into an RSA envelope
41473>>>>>>>>>>>>>Define KP_EFFECTIVE_KEYLEN              for 19      // setting and getting RC2 effective key length
41473>>>>>>>>>>>>>Define KP_SCHANNEL_ALG                  for 20      // for setting the Secure Channel algorithms
41473>>>>>>>>>>>>>Define KP_CLIENT_RANDOM                 for 21      // for setting the Secure Channel client random data
41473>>>>>>>>>>>>>Define KP_SERVER_RANDOM                 for 22      // for setting the Secure Channel server random data
41473>>>>>>>>>>>>>Define KP_RP                            for 23
41473>>>>>>>>>>>>>Define KP_PRECOMP_MD5                   for 24
41473>>>>>>>>>>>>>Define KP_PRECOMP_SHA                   for 25
41473>>>>>>>>>>>>>Define KP_CERTIFICATE                   for 26      // for setting Secure Channel certificate data (PCT1)
41473>>>>>>>>>>>>>Define KP_CLEAR_KEY                     for 27      // for setting Secure Channel clear key data (PCT1)
41473>>>>>>>>>>>>>Define KP_PUB_EX_LEN                    for 28
41473>>>>>>>>>>>>>Define KP_PUB_EX_VAL                    for 29
41473>>>>>>>>>>>>>Define KP_KEYVAL                        for 30
41473>>>>>>>>>>>>>Define KP_ADMIN_PIN                     for 31
41473>>>>>>>>>>>>>Define KP_KEYEXCHANGE_PIN               for 32
41473>>>>>>>>>>>>>Define KP_SIGNATURE_PIN                 for 33
41473>>>>>>>>>>>>>Define KP_PREHASH                       for 34
41473>>>>>>>>>>>>>Define KP_ROUNDS                        for 35
41473>>>>>>>>>>>>>Define KP_OAEP_PARAMS                   for 36      // for setting OAEP params on RSA keys
41473>>>>>>>>>>>>>Define KP_CMS_KEY_INFO                  for 37
41473>>>>>>>>>>>>>Define KP_CMS_DH_KEY_INFO               for 38
41473>>>>>>>>>>>>>Define KP_PUB_PARAMS                    for 39      // for setting public parameters
41473>>>>>>>>>>>>>Define KP_VERIFY_PARAMS                 for 40      // for verifying DSA and DH parameters
41473>>>>>>>>>>>>>Define KP_HIGHEST_VERSION               for 41      // for TLS protocol version setting
41473>>>>>>>>>>>>>Define KP_GET_USE_COUNT                 for 42      // for use with PP_CRYPT_COUNT_KEY_USE contexts
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// dwParam definitions for CryptGetHashParam
41473>>>>>>>>>>>>>Define HP_ALGID                         for |CI$0001  // Hash algorithm
41473>>>>>>>>>>>>>Define HP_HASHVAL                       for |CI$0002  // Hash value
41473>>>>>>>>>>>>>Define HP_HASHSIZE                      for |CI$0004  // Hash value size
41473>>>>>>>>>>>>>Define HP_HMAC_INFO                     for |CI$0005  // information for creating an HMA
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// key BLOB types
41473>>>>>>>>>>>>>Define KEYSTATEBLOB                     for |CI$0C
41473>>>>>>>>>>>>>Define OPAQUEKEYBLOB                    for |CI$09
41473>>>>>>>>>>>>>Define PLAINTEXTKEYBLOB                 for |CI$08
41473>>>>>>>>>>>>>Define PRIVATEKEYBLOB                   for |CI$07
41473>>>>>>>>>>>>>Define PUBLICKEYBLOB                    for |CI$06
41473>>>>>>>>>>>>>Define PUBLICKEYBLOBEX                  for |CI$0A
41473>>>>>>>>>>>>>Define SIMPLEBLOB                       for |CI$01
41473>>>>>>>>>>>>>Define SYMMETRICWRAPKEYBLOB             for |CI$0B
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>Define CUR_BLOB_VERSION                 for 2
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// KP_PADDING
41473>>>>>>>>>>>>>Define PKCS5_PADDING                    for 1       // PKCS 5 (sec 6.2) padding method
41473>>>>>>>>>>>>>Define RANDOM_PADDING                   for 2
41473>>>>>>>>>>>>>Define ZERO_PADDING                     for 3
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>//  Structure cryptimportkey
41473>>>>>>>>>>>>>Struct PUBLICKEYSTRUC
41473>>>>>>>>>>>>>    UChar    bType
41473>>>>>>>>>>>>>    UChar    bVersion
41473>>>>>>>>>>>>>    UShort   reserved
41473>>>>>>>>>>>>>    UInteger aiKeyAlg
41473>>>>>>>>>>>>>End_Struct
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>Struct tPLAINTEXTKEYBLOB
41473>>>>>>>>>>>>>    PUBLICKEYSTRUC hdr
41473>>>>>>>>>>>>>    PUBLICKEYSTRUC hdr
41473>>>>>>>>>>>>>    UInteger       dwKeySize
41473>>>>>>>>>>>>>//    UChar[]        rgbKeyData
41473>>>>>>>>>>>>>End_Struct
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>//  Structure for specifying the inner and outer strings when calculating HMAC hash (use with CryptSetHashParam)
41473>>>>>>>>>>>>>Struct HMAC_INFO
41473>>>>>>>>>>>>>    UInteger HashAlgid
41473>>>>>>>>>>>>>    Pointer pbInnerString
41473>>>>>>>>>>>>>    DWord cbInnerString
41473>>>>>>>>>>>>>    Pointer pbOuterString
41473>>>>>>>>>>>>>    DWord cbOuterString
41473>>>>>>>>>>>>>End_Struct
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>Struct BLOBHEADER
41473>>>>>>>>>>>>>    UChar   bType
41473>>>>>>>>>>>>>    UChar   bVersion
41473>>>>>>>>>>>>>    Short   reserved
41473>>>>>>>>>>>>>    Integer aiKeyAlg
41473>>>>>>>>>>>>>End_Struct
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>Struct CryptoBlob
41473>>>>>>>>>>>>>    BLOBHEADER  header
41473>>>>>>>>>>>>>    BLOBHEADER  header
41473>>>>>>>>>>>>>    Integer     cbKeySize
41473>>>>>>>>>>>>>    UChar[32]   rgbKeyData
41473>>>>>>>>>>>>>End_Struct
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>
41473>>>>>>>>>>>>>// Note: lpContainer and lpProvider refer to WString types.
41473>>>>>>>>>>>>>External_Function CryptAcquireContextW "CryptAcquireContextW" advapi32.dll ;    Pointer phProv ;    Pointer lpContainer ;    Pointer lpProvider ;    Integer dwProvType ;    Integer dwFlags ;    Returns Boolean
41474>>>>>>>>>>>>>
41474>>>>>>>>>>>>>// Compatibilty wrapper Function CryptAcquireContext
41474>>>>>>>>>>>>>Function CryptAcquireContext Global ;    Pointer phProv ;    Pointer szContainer ;    Pointer szProvider ;    Integer dwProvType ;    Integer dwFlags ;    Returns Boolean
41476>>>>>>>>>>>>>    
41476>>>>>>>>>>>>>    Boolean bResult
41476>>>>>>>>>>>>>    UWide   uwContainer uwProvider
41476>>>>>>>>>>>>>    UWide   uwContainer uwProvider
41476>>>>>>>>>>>>>
41476>>>>>>>>>>>>>    Send StringToWide szContainer (&uwContainer)
41477>>>>>>>>>>>>>    Send StringToWide szProvider (&uwProvider)
41478>>>>>>>>>>>>>    
41478>>>>>>>>>>>>>    Move (CryptAcquireContextW (phProv, uwContainer.lpUText, uwProvider.lpUText, dwProvType, dwFlags)) to bResult                   
41479>>>>>>>>>>>>>
41479>>>>>>>>>>>>>    Function_Return bResult
41480>>>>>>>>>>>>>End_Function
41481>>>>>>>>>>>>>
41481>>>>>>>>>>>>>External_Function CryptReleaseContext "CryptReleaseContext" advapi32.dll ;    Handle hProv ;    Integer dwFlags ;    Returns Boolean
41482>>>>>>>>>>>>>
41482>>>>>>>>>>>>>External_Function CryptCreateHash "CryptCreateHash" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hKey ;    Integer dwFlags ;    Pointer phHash ;    Returns Boolean
41483>>>>>>>>>>>>>
41483>>>>>>>>>>>>>External_Function CryptDestroyHash "CryptDestroyHash" advapi32.dll ;    Handle hHash ;    Returns Boolean
41484>>>>>>>>>>>>>
41484>>>>>>>>>>>>>External_Function CryptHashData "CryptHashData" advapi32.dll ;    Handle hHash ;    Pointer pbData ;    Integer dwDataLen ;    Integer dwFlags ;    Returns Boolean
41485>>>>>>>>>>>>>
41485>>>>>>>>>>>>>External_Function CryptDeriveKey "CryptDeriveKey" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hBaseData ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
41486>>>>>>>>>>>>>
41486>>>>>>>>>>>>>External_Function CryptGetHashParam "CryptGetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    DWord dwFlags ;    Returns Integer
41487>>>>>>>>>>>>>
41487>>>>>>>>>>>>>External_Function CryptDestroyKey "CryptDestroyKey" advapi32.dll ;    Handle hKey ;    Returns Boolean
41488>>>>>>>>>>>>>
41488>>>>>>>>>>>>>External_Function CryptImportKey "CryptImportKey" advapi32.dll ;    Handle hProv ;    Pointer pbData ;    Integer dwDataLen ;    Handle hPubKey ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
41489>>>>>>>>>>>>>
41489>>>>>>>>>>>>>External_Function CryptGetKeyParam "CryptGetKeyParam" advapi32.dll ;    Handle hKey ;    Integer dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwFlags ;    Returns Boolean
41490>>>>>>>>>>>>>    
41490>>>>>>>>>>>>>External_Function CryptSetKeyParam "CryptSetKeyParam" advapi32.dll ;    Handle   hKey ;    UInteger dwParam ;    Pointer  pbdata ;    UInteger dwFlags ;    Returns  Boolean
41491>>>>>>>>>>>>>
41491>>>>>>>>>>>>>External_Function CryptEncrypt "CryptEncrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwBufLen ;    Returns Boolean
41492>>>>>>>>>>>>>
41492>>>>>>>>>>>>>External_Function CryptDecrypt "CryptDecrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Returns Boolean
41493>>>>>>>>>>>>>
41493>>>>>>>>>>>>>External_Function CryptGenRandom "CryptGenRandom" advapi32.dll ;    Handle hProv ;    DWord dwLen ;    Pointer pbBuffer ;    Returns Boolean
41494>>>>>>>>>>>>>    
41494>>>>>>>>>>>>>External_Function CryptSetHashParam "CryptSetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Integer dwFlags ;    Returns Boolean
41495>>>>>>>>>>>>>    
41495>>>>>>>>>>>>>External_Function CryptGenKey "CryptGenKey" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
41496>>>>>>>>>>>>>    
41496>>>>>>>>>>>>>External_Function CryptExportKey "CryptExportKey" advapi32.dll ;    Handle hKey ;    Handle hExpKey ;    Integer dwBlobType ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Returns Boolean
41497>>>>>>>>>>>
41497>>>>>>>>>>>Class cCryptographerEx is a cObject
41498>>>>>>>>>>>    
41498>>>>>>>>>>>    Procedure Construct_Object
41500>>>>>>>>>>>        Forward Send Construct_Object
41502>>>>>>>>>>>        
41502>>>>>>>>>>>        Property String     psProvider  MS_ENHANCED_PROV
41503>>>>>>>>>>>        Property Integer    piProvider  PROV_RSA_FULL
41504>>>>>>>>>>>        Property Integer    piCipher    CALG_RC4
41505>>>>>>>>>>>        Property Integer    piHash      CALG_MD5
41506>>>>>>>>>>>        
41506>>>>>>>>>>>        // Private properties
41506>>>>>>>>>>>        Property Handle     Private_phProv
41507>>>>>>>>>>>        
41507>>>>>>>>>>>        // Block cipher properties
41507>>>>>>>>>>>        Property UChar[]    paKey
41508>>>>>>>>>>>        Property UChar[]    paIV
41509>>>>>>>>>>>        Property Integer    piKeyAlg        PLAINTEXTKEYBLOB
41510>>>>>>>>>>>        Property Integer    piKeyType       CALG_AES_256
41511>>>>>>>>>>>        Property Integer    piKeyPadding    PKCS5_PADDING
41512>>>>>>>>>>>        Property Integer    piKeyMode       CRYPT_MODE_CBC
41513>>>>>>>>>>>        Property Integer    piBlockSize     16
41514>>>>>>>>>>>    End_Procedure
41515>>>>>>>>>>>    
41515>>>>>>>>>>>    
41515>>>>>>>>>>>    // Acquire key container handle
41515>>>>>>>>>>>    Function AcquireContext Returns Handle
41517>>>>>>>>>>>        Integer iProvider
41517>>>>>>>>>>>        WString wProvider
41517>>>>>>>>>>>        Handle hProv
41517>>>>>>>>>>>        Boolean bOk
41517>>>>>>>>>>>        Pointer pProv
41517>>>>>>>>>>>        
41517>>>>>>>>>>>        Move 0 to hProv
41518>>>>>>>>>>>        Get piProvider to iProvider
41519>>>>>>>>>>>        Get psProvider to wProvider
41520>>>>>>>>>>>        
41520>>>>>>>>>>>        //  Determine address to be passed as provider
41520>>>>>>>>>>>        If (Trim(wProvider) <> "") Begin
41522>>>>>>>>>>>            Move (AddressOf(wProvider)) to pProv
41523>>>>>>>>>>>        End
41523>>>>>>>>>>>>
41523>>>>>>>>>>>        Else Begin
41524>>>>>>>>>>>            Move 0 to pProv
41525>>>>>>>>>>>        End
41525>>>>>>>>>>>>
41525>>>>>>>>>>>        
41525>>>>>>>>>>>        //  Acquire Crypto Context. Note: pProv is pointer to UTF16 string.
41525>>>>>>>>>>>        Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_VERIFYCONTEXT)) to bOk
41526>>>>>>>>>>>        If (not(bOk) or hProv = 0) Begin
41528>>>>>>>>>>>            Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_NEWKEYSET ior CRYPT_VERIFYCONTEXT)) to bOk
41529>>>>>>>>>>>        End
41529>>>>>>>>>>>>
41529>>>>>>>>>>>        
41529>>>>>>>>>>>        If (not(bOk) or hProv = 0) Begin
41531>>>>>>>>>>>            // Fallback to original
41531>>>>>>>>>>>            Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,0)) to bOk
41532>>>>>>>>>>>            
41532>>>>>>>>>>>            If (not(bOk) or hProv = 0) Begin
41534>>>>>>>>>>>                Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_NEWKEYSET)) to bOk
41535>>>>>>>>>>>            End
41535>>>>>>>>>>>>
41535>>>>>>>>>>>        End
41535>>>>>>>>>>>>
41535>>>>>>>>>>>        Set Private_phProv to hProv
41536>>>>>>>>>>>        
41536>>>>>>>>>>>        Function_Return hProv
41537>>>>>>>>>>>    End_Function
41538>>>>>>>>>>>    
41538>>>>>>>>>>>    // Releases key container handle
41538>>>>>>>>>>>    Function ReleaseContext Handle hProv Returns Boolean
41540>>>>>>>>>>>        Function_Return (CryptReleaseContext(hProv,0))
41541>>>>>>>>>>>    End_Function
41542>>>>>>>>>>>    
41542>>>>>>>>>>>    // Creates hash object
41542>>>>>>>>>>>    Function CreateHash Handle hProv Returns Handle
41544>>>>>>>>>>>        Integer iAlgorithm
41544>>>>>>>>>>>        Handle hHash
41544>>>>>>>>>>>        Boolean bOk
41544>>>>>>>>>>>        
41544>>>>>>>>>>>        Move 0 to hHash
41545>>>>>>>>>>>        Get piHash to iAlgorithm
41546>>>>>>>>>>>        Move (CryptCreateHash(hProv,iAlgorithm,0,0,AddressOf(hHash))) to bOk
41547>>>>>>>>>>>        
41547>>>>>>>>>>>        Function_Return hHash
41548>>>>>>>>>>>    End_Function
41549>>>>>>>>>>>    
41549>>>>>>>>>>>    // Destroys the hash object
41549>>>>>>>>>>>    Function DestroyHash Handle hHash Returns Boolean
41551>>>>>>>>>>>        Function_Return (CryptDestroyHash(hHash))
41552>>>>>>>>>>>    End_Function
41553>>>>>>>>>>>    
41553>>>>>>>>>>>    // Adds data to hash object
41553>>>>>>>>>>>    Function HashData Handle hHash UChar[] ucData Returns Boolean
41555>>>>>>>>>>>        Function_Return (CryptHashData(hHash,AddressOf(ucData), SizeOfArray(ucData),0))
41556>>>>>>>>>>>    End_Function
41557>>>>>>>>>>>    
41557>>>>>>>>>>>    // Generates session key
41557>>>>>>>>>>>    Function DeriveKey Handle hProv Handle hHash Returns Handle
41559>>>>>>>>>>>        Integer iAlgorithm
41559>>>>>>>>>>>        Handle hKey
41559>>>>>>>>>>>        Boolean bOk
41559>>>>>>>>>>>        
41559>>>>>>>>>>>        Move 0 to hKey
41560>>>>>>>>>>>        Get piCipher to iAlgorithm
41561>>>>>>>>>>>        Move (CryptDeriveKey(hProv,iAlgorithm,hHash,CRYPT_EXPORTABLE,AddressOf(hKey))) to bOk
41562>>>>>>>>>>>        
41562>>>>>>>>>>>        Function_Return hKey
41563>>>>>>>>>>>    End_Function
41564>>>>>>>>>>>    
41564>>>>>>>>>>>    // Imports a plain text key
41564>>>>>>>>>>>    Function ImportPlainTextKey Handle hProv UChar[] ucaKey Returns Handle
41566>>>>>>>>>>>        tPLAINTEXTKEYBLOB blobhead
41566>>>>>>>>>>>        tPLAINTEXTKEYBLOB blobhead
41566>>>>>>>>>>>        Boolean   bSuccess
41566>>>>>>>>>>>        Handle    hKey
41566>>>>>>>>>>>        Integer   iHeadSize iKeySize
41566>>>>>>>>>>>        UChar[]   ucaKeyblob
41567>>>>>>>>>>>        Integer iVoid
41567>>>>>>>>>>>        
41567>>>>>>>>>>>        Move (SizeOfType(tPLAINTEXTKEYBLOB)) to iHeadSize
41568>>>>>>>>>>>        Move (SizeOfArray(ucaKey)) to iKeySize
41569>>>>>>>>>>>        
41569>>>>>>>>>>>        Move PLAINTEXTKEYBLOB to blobhead.hdr.bType
41570>>>>>>>>>>>        Move CUR_BLOB_VERSION   to blobhead.hdr.bVersion
41571>>>>>>>>>>>        Get piCipher            to blobhead.hdr.aiKeyAlg
41572>>>>>>>>>>>        Move iKeySize           to blobhead.dwKeySize
41573>>>>>>>>>>>        
41573>>>>>>>>>>>        Move (ResizeArray(ucaKeyblob, iHeadSize)) to ucaKeyblob
41574>>>>>>>>>>>        Move (CopyMemory(AddressOf(ucaKeyblob), AddressOf(blobhead), iHeadSize)) to iVoid
41575>>>>>>>>>>>        Move (AppendArray(ucaKeyblob, ucaKey)) to ucaKeyblob
41576>>>>>>>>>>>        
41576>>>>>>>>>>>        Move 0 to hKey
41577>>>>>>>>>>>        Move (CryptImportKey(hProv, AddressOf(ucaKeyblob), SizeOfArray(ucaKeyblob), 0, 0, AddressOf(hKey))) to bSuccess
41578>>>>>>>>>>>        If (not(bSuccess)) Begin
41580>>>>>>>>>>>            Move (ShowLastError()) to iVoid
41581>>>>>>>>>>>        End
41581>>>>>>>>>>>>
41581>>>>>>>>>>>        
41581>>>>>>>>>>>        Function_Return hKey
41582>>>>>>>>>>>    End_Function
41583>>>>>>>>>>>    
41583>>>>>>>>>>>    // Destroys the key
41583>>>>>>>>>>>    Function DestroyKey Handle hKey Returns Boolean
41585>>>>>>>>>>>        Function_Return (CryptDestroyKey(hKey))
41586>>>>>>>>>>>    End_Function
41587>>>>>>>>>>>    
41587>>>>>>>>>>>    // Retrieves key data
41587>>>>>>>>>>>    Function KeyParameter Handle hKey Integer iQuery Returns Integer
41589>>>>>>>>>>>        Integer iBuffer iLen
41589>>>>>>>>>>>        Boolean bOk
41589>>>>>>>>>>>        
41589>>>>>>>>>>>        Move (SizeOfType(Integer)) to iLen
41590>>>>>>>>>>>        Move (CryptGetKeyParam(hKey,iQuery,AddressOf(iBuffer),AddressOf(iLen),0)) to bOk
41591>>>>>>>>>>>        Function_Return iBuffer
41592>>>>>>>>>>>    End_Function
41593>>>>>>>>>>>    
41593>>>>>>>>>>>    // Retrieves a hash value
41593>>>>>>>>>>>    Function HashValue Handle lhHash Returns UChar[]
41595>>>>>>>>>>>        UChar[] ucHash
41596>>>>>>>>>>>        Integer liResult
41596>>>>>>>>>>>        DWord   dwDataLen
41596>>>>>>>>>>>        
41596>>>>>>>>>>>        Move 0 to dwDataLen
41597>>>>>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,0,AddressOf(dwDataLen),0)) to liResult
41598>>>>>>>>>>>        If (liResult = 0) ;            Function_Return ""
41601>>>>>>>>>>>        
41601>>>>>>>>>>>        Move (ResizeArray(ucHash, dwDataLen, 0)) to ucHash
41602>>>>>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,AddressOf(ucHash),AddressOf(dwDataLen),0)) to liResult
41603>>>>>>>>>>>        If (liResult = 0) ;            Function_Return ""
41606>>>>>>>>>>>        
41606>>>>>>>>>>>        Function_Return ucHash
41607>>>>>>>>>>>    End_Function
41608>>>>>>>>>>>
41608>>>>>>>>>>>    // Encrypts data
41608>>>>>>>>>>>    Function Encrypt UChar[] ucPassword UChar[] ucData Returns UChar[]
41610>>>>>>>>>>>        Handle hProv hHash hKey
41610>>>>>>>>>>>        Integer iAlgorithm iDataLen iCipherLen iErr
41610>>>>>>>>>>>        Boolean bOk
41610>>>>>>>>>>>        
41610>>>>>>>>>>>        Get AcquireContext to hProv
41611>>>>>>>>>>>        If (hProv) Begin
41613>>>>>>>>>>>            Get CreateHash hProv to hHash
41614>>>>>>>>>>>            If (hHash) Begin
41616>>>>>>>>>>>                Get HashData hHash ucPassword to bOk
41617>>>>>>>>>>>                If (bOk) Begin
41619>>>>>>>>>>>                    Get piCipher to iAlgorithm
41620>>>>>>>>>>>                    Get DeriveKey hProv hHash to hKey
41621>>>>>>>>>>>                End
41621>>>>>>>>>>>>
41621>>>>>>>>>>>                Get DestroyHash hHash to bOk
41622>>>>>>>>>>>            End
41622>>>>>>>>>>>>
41622>>>>>>>>>>>            
41622>>>>>>>>>>>            If (hKey) Begin
41624>>>>>>>>>>>                //  First call to determine resulting data size
41624>>>>>>>>>>>                Move (SizeOfArray(ucData)) to iDataLen
41625>>>>>>>>>>>                Move (SizeOfArray(ucData)) to iCipherLen
41626>>>>>>>>>>>                Move (CryptEncrypt(hKey, 0, True, 0, 0, AddressOf(iCipherLen), iDataLen)) to bOk
41627>>>>>>>>>>>                
41627>>>>>>>>>>>                //  Reserve space in string
41627>>>>>>>>>>>                If (iDataLen < iCipherLen) Begin
41629>>>>>>>>>>>                    Move (ResizeArray(ucData, iCipherLen, 0)) to ucData
41630>>>>>>>>>>>                End
41630>>>>>>>>>>>>
41630>>>>>>>>>>>                
41630>>>>>>>>>>>                //  Call to really decrypt
41630>>>>>>>>>>>                Move (CryptEncrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iDataLen),SizeOfArray(ucData))) to bOk
41631>>>>>>>>>>>                //If (not(bOk)) Begin
41631>>>>>>>>>>>                //Move "" to sData
41631>>>>>>>>>>>                //Move (GetLastError()) to iErr
41631>>>>>>>>>>>                //End
41631>>>>>>>>>>>                
41631>>>>>>>>>>>                Get DestroyKey hKey to bOk
41632>>>>>>>>>>>            End 
41632>>>>>>>>>>>>
41632>>>>>>>>>>>            Get ReleaseContext hProv to bOk
41633>>>>>>>>>>>        End 
41633>>>>>>>>>>>>
41633>>>>>>>>>>>        Function_Return ucData
41634>>>>>>>>>>>    End_Function
41635>>>>>>>>>>>    
41635>>>>>>>>>>>    // Decrypts data
41635>>>>>>>>>>>    Function Decrypt UChar[] ucPassword UChar[] ucData Returns UChar[]
41637>>>>>>>>>>>        Handle hProv hHash hKey
41637>>>>>>>>>>>        Integer iAlgorithm iDataLen
41637>>>>>>>>>>>        Boolean bOk
41637>>>>>>>>>>>        
41637>>>>>>>>>>>        Get AcquireContext to hProv
41638>>>>>>>>>>>        If (hProv) Begin
41640>>>>>>>>>>>            Get CreateHash hProv to hHash
41641>>>>>>>>>>>            If (hHash) Begin
41643>>>>>>>>>>>                Get HashData hHash ucPassword to bOk
41644>>>>>>>>>>>                If (bOk) Begin
41646>>>>>>>>>>>                    Get piCipher to iAlgorithm
41647>>>>>>>>>>>                    Get DeriveKey hProv hHash to hKey
41648>>>>>>>>>>>                End
41648>>>>>>>>>>>>
41648>>>>>>>>>>>                Get DestroyHash hHash to bOk
41649>>>>>>>>>>>            End
41649>>>>>>>>>>>>
41649>>>>>>>>>>>            
41649>>>>>>>>>>>            If (hKey) Begin
41651>>>>>>>>>>>                Move (SizeOfArray(ucData)) to iDataLen
41652>>>>>>>>>>>                Move (CryptDecrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iDataLen))) to bOk
41653>>>>>>>>>>>                //  Resulting data can be shorter as the input string, in that case we shorten the result string
41653>>>>>>>>>>>                If (SizeOfArray (ucData) > iDataLen) Begin
41655>>>>>>>>>>>                    Move (ResizeArray(ucData, iDataLen)) to ucData
41656>>>>>>>>>>>                End
41656>>>>>>>>>>>>
41656>>>>>>>>>>>                
41656>>>>>>>>>>>                Get DestroyKey hKey to bOk
41657>>>>>>>>>>>            End
41657>>>>>>>>>>>>
41657>>>>>>>>>>>            Get ReleaseContext hProv to bOk
41658>>>>>>>>>>>        End
41658>>>>>>>>>>>>
41658>>>>>>>>>>>        Function_Return ucData
41659>>>>>>>>>>>    End_Function
41660>>>>>>>>>>>    
41660>>>>>>>>>>>    // Creates a key
41660>>>>>>>>>>>    Function CreateKey Handle hProv Returns Handle
41662>>>>>>>>>>>        Integer iAlg iType iByte iLength iSize
41662>>>>>>>>>>>        CryptoBlob keyBlob
41662>>>>>>>>>>>        CryptoBlob keyBlob
41662>>>>>>>>>>>        Boolean bOk
41662>>>>>>>>>>>        Handle hKey
41662>>>>>>>>>>>        UChar[] aKey
41663>>>>>>>>>>>
41663>>>>>>>>>>>        Get paKey to aKey
41664>>>>>>>>>>>        Get piKeyAlg to iAlg
41665>>>>>>>>>>>        Get piKeyType to iType
41666>>>>>>>>>>>        Move iAlg                   to keyBlob.header.bType
41667>>>>>>>>>>>        Move CUR_BLOB_VERSION       to keyBlob.header.bVersion
41668>>>>>>>>>>>        Move iType                  to keyBlob.header.aiKeyAlg
41669>>>>>>>>>>>        Move (SizeOfArray(aKey))    to keyBlob.cbKeySize
41670>>>>>>>>>>>        
41670>>>>>>>>>>>        Move (SizeOfArray(aKey)-1) to iLength
41671>>>>>>>>>>>        For iByte from 0 to iLength
41677>>>>>>>>>>>>
41677>>>>>>>>>>>            Move aKey[iByte] to keyBlob.rgbKeyData[iByte]
41678>>>>>>>>>>>        Loop
41679>>>>>>>>>>>>
41679>>>>>>>>>>>        
41679>>>>>>>>>>>        Move 0 to hKey
41680>>>>>>>>>>>        Move (CryptImportKey(hProv,AddressOf(keyBlob),SizeOfType(CryptoBlob),0,0,AddressOf(hKey))) to bOk
41681>>>>>>>>>>>        Function_Return hKey
41682>>>>>>>>>>>    End_Function
41683>>>>>>>>>>>    
41683>>>>>>>>>>>    // Sets the key parameters
41683>>>>>>>>>>>    Function SetKeyParameters Handle hKey Returns Boolean
41685>>>>>>>>>>>        Integer iPadding iMode
41685>>>>>>>>>>>        Boolean bOk
41685>>>>>>>>>>>        UChar[] aIV
41686>>>>>>>>>>>        
41686>>>>>>>>>>>        //Move (SizeOfArray(aIV)-1) to iLength
41686>>>>>>>>>>>        //For iByte from 0 to iLength
41686>>>>>>>>>>>        //    Move iByte to aIV[iByte]
41686>>>>>>>>>>>        //Loop
41686>>>>>>>>>>>
41686>>>>>>>>>>>        // Set initialization vector
41686>>>>>>>>>>>        Get paIV to aIV
41687>>>>>>>>>>>        Move (CryptSetKeyParam(hKey,KP_IV,AddressOf(aIV),0)) to bOk
41688>>>>>>>>>>>        If (bOk) Begin
41690>>>>>>>>>>>            // Set padding
41690>>>>>>>>>>>            Get piKeyPadding to iPadding
41691>>>>>>>>>>>            Move (CryptSetKeyParam(hKey,KP_PADDING,AddressOf(iPadding),0)) to bOk
41692>>>>>>>>>>>            If (bOk) Begin
41694>>>>>>>>>>>                // Set move
41694>>>>>>>>>>>                Get piKeyMode to iMode
41695>>>>>>>>>>>                Move (CryptSetKeyParam(hKey,KP_MODE,AddressOf(iMode),0)) to bOk
41696>>>>>>>>>>>            End
41696>>>>>>>>>>>>
41696>>>>>>>>>>>        End
41696>>>>>>>>>>>>
41696>>>>>>>>>>>        Function_Return bOk        
41697>>>>>>>>>>>    End_Function
41698>>>>>>>>>>>    
41698>>>>>>>>>>>    // Encrypts using block cipher
41698>>>>>>>>>>>    Function BlockEncrypt UChar[] ucData Returns UChar[]
41700>>>>>>>>>>>        Handle hProv hKey
41700>>>>>>>>>>>        Integer iLen iSize iBlocks
41700>>>>>>>>>>>        Boolean bOk
41700>>>>>>>>>>>        
41700>>>>>>>>>>>        Get AcquireContext to hProv
41701>>>>>>>>>>>        If (hProv) Begin
41703>>>>>>>>>>>            // Create key
41703>>>>>>>>>>>            Get CreateKey hProv to hKey
41704>>>>>>>>>>>            If (hKey) Begin
41706>>>>>>>>>>>                Get SetKeyParameters hKey to bOk
41707>>>>>>>>>>>                If (bOk) Begin
41709>>>>>>>>>>>                    // Buffer for block ciphers can be up to block length larger
41709>>>>>>>>>>>                    Get piBlockSize to iSize
41710>>>>>>>>>>>                    Move (SizeOfArray(ucData)) to iLen
41711>>>>>>>>>>>                    
41711>>>>>>>>>>>                    Move ((iLen/iSize)+1) to iBlocks
41712>>>>>>>>>>>                    Move (ResizeArray(ucData,iBlocks*iSize)) to ucData
41713>>>>>>>>>>>                    Move (CryptEncrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iLen),SizeOfArray(ucData))) to bOk
41714>>>>>>>>>>>                End
41714>>>>>>>>>>>>
41714>>>>>>>>>>>                Get DestroyKey hKey to bOk
41715>>>>>>>>>>>            End
41715>>>>>>>>>>>>
41715>>>>>>>>>>>            Get ReleaseContext hProv to bOk
41716>>>>>>>>>>>        End
41716>>>>>>>>>>>>
41716>>>>>>>>>>>        Function_Return ucData
41717>>>>>>>>>>>    End_Function
41718>>>>>>>>>>>    
41718>>>>>>>>>>>    // Decrypts using block cipher
41718>>>>>>>>>>>    Function BlockDecrypt UChar[] ucData Returns UChar[]
41720>>>>>>>>>>>        Handle hProv hKey
41720>>>>>>>>>>>        Integer iLen
41720>>>>>>>>>>>        Boolean bOk
41720>>>>>>>>>>>        
41720>>>>>>>>>>>        Get AcquireContext to hProv
41721>>>>>>>>>>>        If (hProv) Begin
41723>>>>>>>>>>>            // Create key
41723>>>>>>>>>>>            Get CreateKey hProv to hKey
41724>>>>>>>>>>>            If (hKey) Begin
41726>>>>>>>>>>>                Get SetKeyParameters hKey to bOk
41727>>>>>>>>>>>                If (bOk) Begin
41729>>>>>>>>>>>                    Move (SizeOfArray(ucData)) to iLen
41730>>>>>>>>>>>                    Move (CryptDecrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iLen))) to bOk
41731>>>>>>>>>>>                    Move (ResizeArray(ucData,iLen)) to ucData
41732>>>>>>>>>>>                End
41732>>>>>>>>>>>>
41732>>>>>>>>>>>                Get DestroyKey hKey to bOk
41733>>>>>>>>>>>            End
41733>>>>>>>>>>>>
41733>>>>>>>>>>>            Get ReleaseContext hProv to bOk
41734>>>>>>>>>>>        End
41734>>>>>>>>>>>>
41734>>>>>>>>>>>        Function_Return ucData
41735>>>>>>>>>>>    End_Function
41736>>>>>>>>>>>    
41736>>>>>>>>>>>    
41736>>>>>>>>>>>    //  Generates random data.
41736>>>>>>>>>>>    Function GenerateRandom Integer iBytes Returns UChar[]
41738>>>>>>>>>>>        Handle hProv
41738>>>>>>>>>>>        UChar[] uaResult
41739>>>>>>>>>>>        Boolean bRes
41739>>>>>>>>>>>        
41739>>>>>>>>>>>        Get AcquireContext to hProv
41740>>>>>>>>>>>        
41740>>>>>>>>>>>        Move (ResizeArray(uaResult, iBytes)) to uaResult
41741>>>>>>>>>>>        Move (CryptGenRandom(hProv, iBytes, AddressOf(uaResult))) to bRes
41742>>>>>>>>>>>        
41742>>>>>>>>>>>        Get ReleaseContext hProv to bRes
41743>>>>>>>>>>>        
41743>>>>>>>>>>>        Function_Return uaResult
41744>>>>>>>>>>>    End_Function
41745>>>>>>>>>>>    
41745>>>>>>>>>>>    //  Generates random data and does a base64 encoding to properly present it as a string.
41745>>>>>>>>>>>    Function GenerateRandomString Integer iLength Returns String
41747>>>>>>>>>>>        String sResult
41747>>>>>>>>>>>        UChar[] ucData
41748>>>>>>>>>>>        Pointer pBase64
41748>>>>>>>>>>>        Integer iVoid
41748>>>>>>>>>>>        
41748>>>>>>>>>>>        Get GenerateRandom iLength to ucData
41749>>>>>>>>>>>        
41749>>>>>>>>>>>        Move (Base64Encode(AddressOf(ucData), iLength)) to pBase64
41750>>>>>>>>>>>        Move (PointerToString(pBase64)) to sResult
41751>>>>>>>>>>>        Move (Free(pBase64)) to iVoid
41752>>>>>>>>>>>        
41752>>>>>>>>>>>        Function_Return (Left(sResult, iLength))
41753>>>>>>>>>>>    End_Function
41754>>>>>>>>>>>    
41754>>>>>>>>>>>End_Class
41755>>>>>>>>>Use Base64Functions.pkg
Including file: Base64Functions.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\Base64Functions.pkg)
41755>>>>>>>>>>>//> This package enables base64 encoding and decoding of strings:
41755>>>>>>>>>>>//>
41755>>>>>>>>>>>//>     Get EncodeString of oBase64Functions sValue to sValue
41755>>>>>>>>>>>//>     Get DecodeString of oBase64Functions sValue to sValue
41755>>>>>>>>>>>//>
41755>>>>>>>>>>>//> Remember to set the "max argument size" if dealing with very large
41755>>>>>>>>>>>//> strings.
41755>>>>>>>>>>>//>
41755>>>>>>>>>>>//> For 17.1 and later the functionality of this package is based on two functions (Base64Encode and
41755>>>>>>>>>>>//> Base64Decode) that are built into the runtime.
41755>>>>>>>>>>>//>
41755>>>>>>>>>>>//> But for versions up to and including 17.0 it's based on the vdfBase64.dll file that was obtained
41755>>>>>>>>>>>//> from DAE that have kindly allowed me to distribute it to other DF developers. Programs including
41755>>>>>>>>>>>//> this package will give off an error on start-up if vdfBase64.dll is not found in the /bin folder
41755>>>>>>>>>>>//> if the VDF runtime. You will find the DLL in the /programs folder of the StureApsPublicLib workspace
41755>>>>>>>>>>>
41755>>>>>>>>>>>Use VdfBase.pkg
41755>>>>>>>>>>>
41755>>>>>>>>>>>// Functions in vdfBase64.dll
41755>>>>>>>>>>>External_Function xxBase64Encode "vdfbase64Encode" vdfBase64.dll Pointer pBuffer Returns Integer
41756>>>>>>>>>>>External_Function xxBase64Decode "vdfbase64Decode" vdfBase64.dll Pointer pBuffer Returns Integer
41757>>>>>>>>>>>External_Function xxBase64Free   "vdfbase64Free"   vdfBase64.dll Pointer pBuffer Returns Integer
41758>>>>>>>>>>>
41758>>>>>>>>>>>// Structure
41758>>>>>>>>>>>Struct txxfBase64Buffer
41758>>>>>>>>>>>    Pointer pData
41758>>>>>>>>>>>    Integer iLength
41758>>>>>>>>>>>End_Struct 
41758>>>>>>>>>>>
41758>>>>>>>>>>>Global_Variable Integer oBase64Functions
41758>>>>>>>>>>>
41758>>>>>>>>>>>Object _oBase64Functions is a cObject
41760>>>>>>>>>>>    Move Self to oBase64Functions
41761>>>>>>>>>>>
41761>>>>>>>>>>>
41761>>>>>>>>>>>    Function EncodeString String sValue Returns String
41764>>>>>>>>>>>        Address pBase64
41764>>>>>>>>>>>        String sResult
41764>>>>>>>>>>>        Integer iVoid
41764>>>>>>>>>>>        Move (Base64Encode(AddressOf(sValue), Length(sValue))) to pBase64
41765>>>>>>>>>>>        Move (PointerToString(pBase64)) to sResult
41766>>>>>>>>>>>        Move (Free(pBase64)) to iVoid
41767>>>>>>>>>>>        Function_Return sResult
41768>>>>>>>>>>>    End_Function
41769>>>>>>>>>>>
41769>>>>>>>>>>>    Function DecodeString String sValue Returns String
41772>>>>>>>>>>>        Address pBinary
41772>>>>>>>>>>>        String sBinary
41772>>>>>>>>>>>        Integer iVoid iLen
41772>>>>>>>>>>>        Move (Base64Decode(AddressOf(sValue), &iLen)) to pBinary
41773>>>>>>>>>>>        Move (Repeat(Character(0), iLen)) to sBinary
41774>>>>>>>>>>>        Move (MemCopy(AddressOf(sBinary), pBinary, iLen)) to iVoid
41775>>>>>>>>>>>        Move (Free(pBinary)) to iVoid
41776>>>>>>>>>>>        Function_Return sBinary
41777>>>>>>>>>>>    End_Function
41778>>>>>>>>>>>
41778>>>>>>>>>>>End_Object
41779>>>>>>>>>Use MSSqldrv.pkg
41779>>>>>>>>>Use db2_drv.pkg
41779>>>>>>>>>Use odbc_drv.pkg
41779>>>>>>>>>Use DFBtrDrv.pkg
41779>>>>>>>>>Use vWin32fh.pkg
41779>>>>>>>>>
41779>>>>>>>>>Use DUFLanguageConstants.inc
41779>>>>>>>>>
41779>>>>>>>>>    Define DATAFLEX_ID for "DATAFLEX"
41779>>>>>>>>>
41779>>>>>>>>>// Create a new PSQL identifier for the Btrieve driver.
41779>>>>>>>>>    Define PSQLDRV_ID for "DFBTRDRV"
41779>>>>>>>>>
41779>>>>>>>>>// SQL Back-ends (iSQLDbType in the tSQLKeywords struct).
41779>>>>>>>>>// They can have slightly different SQL keywords.
41779>>>>>>>>>// Note: If a new type is added to the list,
41779>>>>>>>>>//       the struct array xxx must be adjusted
41779>>>>>>>>>//       so that it is filled with all SQL
41779>>>>>>>>>//       keywords for that new type.
41779>>>>>>>>>Enum_List  
41779>>>>>>>>>        Define EN_DbTypeDataFlex   for 0
41779>>>>>>>>>        Define EN_DbTypeMSSQL      for 1
41779>>>>>>>>>        Define EN_DbTypeMySQL      for 2
41779>>>>>>>>>        Define EN_DbTypeOracle     for 3
41779>>>>>>>>>        Define EN_DbTypeDB2        for 4
41779>>>>>>>>>        Define EN_DbTypePostgre    for 5
41779>>>>>>>>>        Define EN_DbTypePervasive  for 6
41779>>>>>>>>>End_Enum_List
41779>>>>>>>>>
41779>>>>>>>>>// We need to have our "own" constants for the standard DataFlex data types.
41779>>>>>>>>>// These can be used with SQL functions such as e.g. SQLColumnAdd, instead
41779>>>>>>>>>// of using one of the driver specific integer constants such as e.g. "SQL_VARCHAR".
41779>>>>>>>>>Define CS_DbTypeDataFlex    for "DataFlex Embedded"
41779>>>>>>>>>Define CS_DbTypeMSSQL       for "Microsoft SQL Server"
41779>>>>>>>>>Define CS_DbTypeMySQL       for "MySQL"
41779>>>>>>>>>Define CS_DbTypeOracle      for "Oracle"
41779>>>>>>>>>Define CS_DbTypeDB2         for "IBM DB2"
41779>>>>>>>>>Define CS_DbTypePostgre     for "PostgreSQL"
41779>>>>>>>>>Define CS_DbTypePervasive   for "Pervasive.SQL (Btrieve)"
41779>>>>>>>>>
41779>>>>>>>>>
41779>>>>>>>>>// SQLConnection.ini constants:
41779>>>>>>>>>    Define CS_SQLConnectionIDText       for "DFConnectionId"
41779>>>>>>>>>
41779>>>>>>>>>Define CS_SQLIniFileName                for "SQLConnections.ini"
41779>>>>>>>>>Define CS_SQLDF19IniFileName            for "DFConnId.ini"
41779>>>>>>>>>Define CS_SQLIniConnectionSection       for "SQL Connections" // Obsolete!
41779>>>>>>>>>Define CS_SQLIniSectionName             for "Connection"
41779>>>>>>>>>Define CS_SQLODBCIniSectionName         for "ODBC"
41779>>>>>>>>>
41779>>>>>>>>>// DF 19 ini-file settings:
41779>>>>>>>>>Define CS_SQLIniConnectionIdKeyword     for "Id"
41779>>>>>>>>>Define CS_SQLIniDriverKeyword           for "Driver"
41779>>>>>>>>>Define CS_SQLIniConnectionKeyWord       for "Connection"
41779>>>>>>>>>Define CS_SQLIniUIDKeyword              for "UID"
41779>>>>>>>>>Define CS_SQLIniPWDKeyword              for "PWD"
41779>>>>>>>>>Define CS_SQLIniDFPWDKeyword            for "DFPWD"
41779>>>>>>>>>Define CS_SQLIniServerKeyword           for "SERVER"
41779>>>>>>>>>Define CS_SQLIniDSNKeyword              for "DSN"
41779>>>>>>>>>Define CS_SQLIniFileDSNKeyword          for "FILEDSN"
41779>>>>>>>>>Define CS_SQLIniDatabaseKeyword         for "DATABASE"
41779>>>>>>>>>Define CS_SQLIniTrustedKeyword          for "Trusted_Connection" 
41779>>>>>>>>>Define CS_SQLIniDisabledKeyword         for "Disabled"
41779>>>>>>>>>
41779>>>>>>>>>// Database Update Framework extended settings:
41779>>>>>>>>>Define CS_SQLIniDbTypeKeyword           for "DbType"
41779>>>>>>>>>Define CS_SQLIniSchemaKeyword           for "Schema"
41779>>>>>>>>>Define CS_SQLIniBaseTableSpaceKeyword   for "Base Table Space"
41779>>>>>>>>>Define CS_SQLIniLongTableSpaceKeyword   for "Long Table Space"
41779>>>>>>>>>Define CS_SQLIniIndexTableSpaceKeyword  for "Index Table Space"
41779>>>>>>>>>Define CS_SQLIniSilentLoginKeyword      for "Silent Login"
41779>>>>>>>>>Define CS_SQLIniDisabledKeyword         for "Disabled"      // For compatability with DF19.
41779>>>>>>>>>
41779>>>>>>>>>Define CS_SQLIniConnectionPWD           for "PWD"
41779>>>>>>>>>Define CS_SQLIniConnectionYes           for "Yes"
41779>>>>>>>>>Define CS_SQLIniConnectionNo            for "No"
41779>>>>>>>>>
41779>>>>>>>>>Struct tSQLConnection
41779>>>>>>>>>    Boolean bEnabled                // 1. There can only be one active/enabled connection at a time.
41779>>>>>>>>>    String sConnectionID            // 2. The name of the connection ID.
41779>>>>>>>>>    Integer iDbType                 // 3. Database type; "MS-SQL Server", "DB2", "Oracle", "MySQL", "PostgreSQL"
41779>>>>>>>>>    String sDriverID                // 4. Name of the driver. E.g. MSSQLDRV, DB2_DRV, ODBC_DRV or PSQLDRV_ID.
41779>>>>>>>>>    String sServer                  // 5. SQL Server/DSN/ODBC source name. (In DF19 this is the "sString" member of the tConnection struct.)
41779>>>>>>>>>    String sDatabase                // 6. SQL Database
41779>>>>>>>>>    String sConnectionString        // 7. Full connection string as is needed by e.g. the login command.
41779>>>>>>>>>    Boolean bTrusted                // 8. Trusted connection (then is UID & PWD not used)
41779>>>>>>>>>    String sUserID                  // 9. User ID
41779>>>>>>>>>    String sPassword                // 10. Password
41779>>>>>>>>>    String sSchema                  // 11. DB2 (and perhaps ODBC specific)
41779>>>>>>>>>    String sBaseTableSpace          // 12. DB2 specific
41779>>>>>>>>>    String sLongTableSpace          // 13. DB2 specific
41779>>>>>>>>>    String sIndexTableSpace         // 14. DB2 specific
41779>>>>>>>>>    Boolean bSilentLogin            // 15. True=Silent login. (i.e. don't show Database login dialog if database login to fails). Same as driver "Options" parameter.
41779>>>>>>>>>    Boolean bError                  // 16. Set to true on error.
41779>>>>>>>>>    Boolean bDAWConnection          // 17. True if a DFConnId.ini file (from DAW) has been used instead of a DUF SQLConnections.ini file.
41779>>>>>>>>>End_Struct
41779>>>>>>>>>
41779>>>>>>>>>Struct tFilelist
41779>>>>>>>>>    String sRootName
41779>>>>>>>>>    String sLogicalName
41779>>>>>>>>>    String sDisplayName    
41779>>>>>>>>>    String sNoDriverRootname
41779>>>>>>>>>    String sDriver
41779>>>>>>>>>    Handle hTable
41779>>>>>>>>>    Boolean bIsSystemFile 
41779>>>>>>>>>    Boolean bErrorOpening
41779>>>>>>>>>    Boolean bIsAlias
41779>>>>>>>>>End_Struct
41779>>>>>>>>>
41779>>>>>>>>>Struct tFilelistLogicalName
41779>>>>>>>>>    String sLogicalName
41779>>>>>>>>>    String sNoDriverRootname
41779>>>>>>>>>    String sRootName
41779>>>>>>>>>    String sDisplayName    
41779>>>>>>>>>    String sDriver
41779>>>>>>>>>    Handle hTable
41779>>>>>>>>>    Boolean bIsSystemFile 
41779>>>>>>>>>    Boolean bErrorOpening
41779>>>>>>>>>    Boolean bIsAlias
41779>>>>>>>>>End_Struct
41779>>>>>>>Use cDbUpdateFunctionLibrary.inc
Including file: cDbUpdateFunctionLibrary.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cDbUpdateFunctionLibrary.inc)
41779>>>>>>>>>Use DUFLanguageConstants.inc
41779>>>>>>>>>
41779>>>>>>>>>Register_Function paSQLQueryMessages Returns String[]
41779>>>>>>>>>Register_Procedure Set paSQLQueryMessages String[] aSQLQueryMessages
41779>>>>>>>>>
41779>>>>>>>>>    Define CS_DatabaseUpdateFramework for " ***  The Database Update Framework (DUF) ***"
41779>>>>>>>>>
41779>>>>>>>>>
41779>>>>>>>>>    Define CS_OEM_Txt for "OEM"
41779>>>>>>>>>
41779>>>>>>>>>    Define CS_ANSI_Txt for "ANSI"
41779>>>>>>>>>
41779>>>>>>>>>    Define CS_DFCONNID for "DFCONNID"
41779>>>>>>>>>
41779>>>>>>>>>    Define CS_SERVER for "SERVER"
41779>>>>>>>>>
41779>>>>>>>>>    Define CS_SERVER_NAME for "SERVER_NAME"
41779>>>>>>>>>
41779>>>>>>>>>    Define CS_DRIVER_NAME for "DRIVER_NAME"
41779>>>>>>>>>
41779>>>>>>>>>    Define CS_DATABASE_NAME for "DATABASE_NAME"
41779>>>>>>>>>
41779>>>>>>>>>    Define CS_SCHEMA_NAME for "SCHEMA_NAME"
41779>>>>>>>>>
41779>>>>>>>>>    Define CS_TABLE_CHARACTER_FORMAT for "TABLE_CHARACTER_FORMAT"
41779>>>>>>>>>
41779>>>>>>>>>    Define CS_USE_DUMMY_ZERO_DATE for "USE_DUMMY_ZERO_DATE"
41779>>>>>>>>>
41779>>>>>>>>>    Define CS_SYSTEM_FILE for "SYSTEM_FILE"
41779>>>>>>>>>
41779>>>>>>>>>    Define CS_RECNUM_TABLE for "RECNUM_TABLE"
41779>>>>>>>>>
41779>>>>>>>>>    Define CS_PRIMARY_INDEX for "PRIMARY_INDEX"
41779>>>>>>>>>
41779>>>>>>>>>    Define CS_INDEX_NUMBER for "INDEX_NUMBER"
41779>>>>>>>>>
41779>>>>>>>>>    Define CS_INDEX_NAME for "INDEX_NAME"
41779>>>>>>>>>
41779>>>>>>>>>    Define CS_DUFLowestAllowedDateValue for "01/01/1753"
41779>>>>>>>>>    Define CS_DUFLowestSQLDateValue     for "1753-01-01"
41779>>>>>>>>>
41779>>>>>>>>>    Define CS_DUFBackupDataFolder for "BackupData"
41779>>>>>>>>>
41779>>>>>>>>>// Global handle to a cDatabaseUpdateHandler object
41779>>>>>>>>>    Global_Variable Handle ghoDbUpdateHandler    
41779>>>>>>>>>    Move 0 to ghoDbUpdateHandler
41780>>>>>>>>>
41780>>>>>>>>>    Global_Variable Handle ghoDbUpdateFunctionLibrary  
41780>>>>>>>>>    Move 0 to ghoDbUpdateFunctionLibrary
41781>>>>>>>>>
41781>>>>>>>>>Struct tSQLScriptArray
41781>>>>>>>>>    Boolean bError
41781>>>>>>>>>    Boolean bArgumentSizeChanged
41781>>>>>>>>>    Integer iOrgArgumentSize
41781>>>>>>>>>    String[] sSQLScriptArray
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>Struct tSqlErrorArray
41781>>>>>>>>>    String[]  sSqlErrorArray
41781>>>>>>>>>    String[]  sSqlStatementArray
41781>>>>>>>>>    Integer[] iSqlErrorArray
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>Struct tSqlColumnNew
41781>>>>>>>>>    String  sBaseColumnName
41781>>>>>>>>>    String  sBaseTableName
41781>>>>>>>>>    String  sLabel
41781>>>>>>>>>    Integer iSqlType
41781>>>>>>>>>    Integer iSize
41781>>>>>>>>>    Integer iPrecision
41781>>>>>>>>>    Integer iDFType
41781>>>>>>>>>    Integer iDFNativeType
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>Struct tColumnType
41781>>>>>>>>>    Integer iSQLType
41781>>>>>>>>>    String  sSQLType
41781>>>>>>>>>    Boolean bCanEditSize
41781>>>>>>>>>    Integer iDefaultSize
41781>>>>>>>>>    Integer iMinSize
41781>>>>>>>>>    Number  nMaxSize
41781>>>>>>>>>    String  sDataFlexType
41781>>>>>>>>>    Integer iDataFlexType
41781>>>>>>>>>    Boolean bNativeDataType
41781>>>>>>>>>    String  sPrecision
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>// Used to store/retreive SQL keywords in a struct array.
41781>>>>>>>>>// Various SQL back-ends can have slightly different
41781>>>>>>>>>// keywords.
41781>>>>>>>>>Struct tSQLKeyWords
41781>>>>>>>>>    Integer iSQLWord
41781>>>>>>>>>    Integer iSQLDbType
41781>>>>>>>>>    String  sSQLPhrase // Can be more than one word.
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>Struct tSQLRelation
41781>>>>>>>>>    Integer iFileNumber
41781>>>>>>>>>    Integer iFieldNumber
41781>>>>>>>>>    String  sFileName
41781>>>>>>>>>    String  sFieldName
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>Struct tSQLLoggedInUser
41781>>>>>>>>>    String sUser
41781>>>>>>>>>    String sProgram
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>// Used as a start for error handing. Used by Error_Report_Mode property
41781>>>>>>>>>Enumeration_List
41781>>>>>>>>>    Define DUF_ERROR_REPORT    // Report Error on screen
41781>>>>>>>>>    Define DUF_ERROR_NO_REPORT // Show no Error..
41781>>>>>>>>>End_Enumeration_List
41781>>>>>>>>>
41781>>>>>>>>>// We need to re-define the standard constants because several driver constants
41781>>>>>>>>>// have the same value and we need to be able to distinguish which data type to use when
41781>>>>>>>>>// SQL Back-ends (iSQLDbType in the tSQLKeywords struct).
41781>>>>>>>>>// They can have slightly different SQL keywords.
41781>>>>>>>>>// Note: If a new type is added to the list,
41781>>>>>>>>>//       the struct array xxx must be adjusted
41781>>>>>>>>>//       so that it is filled with all SQL
41781>>>>>>>>>//       keywords for that new type.
41781>>>>>>>>>Enum_List
41781>>>>>>>>>//    Define EN_DbTypeMSSQL
41781>>>>>>>>>//    Define EN_DbTypeMySQL
41781>>>>>>>>>//    Define EN_DbTypeOracle
41781>>>>>>>>>//    Define EN_DbTypeDB2
41781>>>>>>>>>//    Define EN_DbTypePostgre
41781>>>>>>>>>//    Define EN_DbTypeDataFlex // Embedded database.
41781>>>>>>>>>End_Enum_List
41781>>>>>>>>>
41781>>>>>>>>>// We need to have our "own" constants for the standard DataFlex data types.
41781>>>>>>>>>// These can be used with SQL functions such as e.g. SQLColumnAdd, instead
41781>>>>>>>>>// of using one of the driver specific integer constants such as e.g. "SQL_VARCHAR".
41781>>>>>>>>>Define CS_DbTypeMSSQL       for "Microsoft SQL Server"
41781>>>>>>>>>Define CS_DbTypeMySQL       for "MySQL"
41781>>>>>>>>>Define CS_DbTypeOracle      for "Oracle"
41781>>>>>>>>>Define CS_DbTypeDB2         for "IBM DB2"
41781>>>>>>>>>Define CS_DbTypePostgre     for "PostgreSQL"
41781>>>>>>>>>Define CS_DbTypeDataFlex    for "DataFlex Embedded"
41781>>>>>>>>>
41781>>>>>>>>>// We need to re-define the standard constants because several driver constants
41781>>>>>>>>>// have the same value and we need to be able to distinguish which data type to use when
41781>>>>>>>>>// e.g. creating a column with embedded SQL (ESQL).
41781>>>>>>>>>Enum_List
41781>>>>>>>>>    Define DF_ASCII_DUF     for -1500 // All of these are DF_xxx constant values - 1500
41781>>>>>>>>>    Define DF_BCD_DUF       for -1499
41781>>>>>>>>>    Define DF_DATE_DUF      for -1498
41781>>>>>>>>>    Define DF_TEXT_DUF      for -1495
41781>>>>>>>>>    Define DF_BINARY_DUF    for -1494
41781>>>>>>>>>    Define DF_DATETIME_DUF  for -1493
41781>>>>>>>>>End_Enum_List
41781>>>>>>>>>
41781>>>>>>>>>    Define SQL_TEXT for (DF_TEXT + 1024)
41781>>>>>>>>>
41781>>>>>>>>>Define SQL_CHARBIT          for (DF_BINARY + 1024)
41781>>>>>>>>>Define SQL_LONGVARCHARBIT   for (DF_BINARY + 1025)
41781>>>>>>>>>Define SQL_VARCHARBIT       for (DF_BINARY + 1026)
41781>>>>>>>>>
41781>>>>>>>>>// These are not defined pre DF 18:
41781>>>>>>>>>
41781>>>>>>>>>Struct tSQLIntTableInfo
41781>>>>>>>>>    String sDriverName
41781>>>>>>>>>    String sServerName
41781>>>>>>>>>    String sDatabaseName
41781>>>>>>>>>    String sSchemaName
41781>>>>>>>>>    Boolean bRecnumTable
41781>>>>>>>>>    Integer iPrimaryIndex
41781>>>>>>>>>    Integer iGenerateRecordIdMethod  // RIM_NONE, RIM_IDENTITY_COLUMN,  RIM_DISPENSER_TABLE, RIM_EXTERNAL
41781>>>>>>>>>    String sTableCharacterFormat
41781>>>>>>>>>    Boolean bUseDummyZeroDate
41781>>>>>>>>>    Integer iFileDummyUpdateColumn // Init value to -1 if not exists (value can be in range 1 - number of columns)
41781>>>>>>>>>    Integer iFileBlockSize         // Init value to -1 if not exists
41781>>>>>>>>>    Integer iFileMaxRowsFetched    // Init value to -1 if not exists
41781>>>>>>>>>    Integer iFileGetRidAfterCreate // Init value to -1. But is boolean!
41781>>>>>>>>>    Integer iFileJitBinding        // Init value to -1. But is boolean!
41781>>>>>>>>>    String sRefindAfterSave        // Yes or No (how to handle?)
41781>>>>>>>>>    String sSystemFile             // Yes or No (how to handle?)
41781>>>>>>>>>    String sFileIndexTablespace
41781>>>>>>>>>    String sFileLongTablespace
41781>>>>>>>>>    String sTableTablespace
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>Struct tSQLIntColumnInfo
41781>>>>>>>>>    Integer iFieldNumber
41781>>>>>>>>>    Integer iFieldIndex
41781>>>>>>>>>    Integer iFieldRelatedFile
41781>>>>>>>>>    Integer iFieldRelatedField
41781>>>>>>>>>    Integer iIndexNumber
41781>>>>>>>>>    Integer iIndexNumberSegments
41781>>>>>>>>>    Integer iIndexSegmentField1
41781>>>>>>>>>    Integer iIndexSegmentField2
41781>>>>>>>>>    Integer iIndexSegmentFieldn
41781>>>>>>>>>    String  sIndexName
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>Struct tAPIColumn
41781>>>>>>>>>    Integer iFieldNumber
41781>>>>>>>>>    String  sFieldName
41781>>>>>>>>>    Integer iType
41781>>>>>>>>>    String  sType
41781>>>>>>>>>    Integer iLength
41781>>>>>>>>>    Integer iPrecision
41781>>>>>>>>>    Integer iOptions
41781>>>>>>>>>    Boolean bIsSQLType
41781>>>>>>>>>    Boolean bAllowNULL
41781>>>>>>>>>    String  sDefaultValue
41781>>>>>>>>>    Boolean bShouldChange
41781>>>>>>>>>    Boolean bCancel
41781>>>>>>>>>    Boolean bError
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>Struct tAPIColumnCompare
41781>>>>>>>>>    Integer iFieldNumber
41781>>>>>>>>>    // FROM database:
41781>>>>>>>>>    Boolean bExistsFrom
41781>>>>>>>>>    String  sFieldNameFrom
41781>>>>>>>>>    Integer iTypeFrom
41781>>>>>>>>>    String  sTypeFrom
41781>>>>>>>>>    Integer iLengthFrom
41781>>>>>>>>>    Integer iPrecisionFrom
41781>>>>>>>>>    Integer iOptionsFrom
41781>>>>>>>>>    Boolean bIsSQLTypeFrom
41781>>>>>>>>>    Boolean bAllowNULLFrom
41781>>>>>>>>>    String  sDefaultValueFrom
41781>>>>>>>>>    Boolean bShouldChangeFrom
41781>>>>>>>>>    Boolean bCancelFrom
41781>>>>>>>>>    Boolean bErrorFrom
41781>>>>>>>>>    // TO database:
41781>>>>>>>>>    Boolean bExistsTo
41781>>>>>>>>>    Integer iFieldNumberTo
41781>>>>>>>>>    String  sFieldNameTo
41781>>>>>>>>>    Integer iTypeTo
41781>>>>>>>>>    String  sTypeTo
41781>>>>>>>>>    Integer iLengthTo
41781>>>>>>>>>    Integer iPrecisionTo
41781>>>>>>>>>    Integer iOptionsTo
41781>>>>>>>>>    Boolean bIsSQLTypeTo
41781>>>>>>>>>    Boolean bAllowNULLTo
41781>>>>>>>>>    String  sDefaultValueTo
41781>>>>>>>>>    Boolean bShouldChangeTo
41781>>>>>>>>>    Boolean bCancelTo
41781>>>>>>>>>    Boolean bErrorTo
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>Struct tAPIRelation
41781>>>>>>>>>    Handle  hTableFrom
41781>>>>>>>>>    Integer iColumnFrom
41781>>>>>>>>>    Handle  hTableTo
41781>>>>>>>>>    Integer iColumnTo
41781>>>>>>>>>    String  sLogicalNameFrom
41781>>>>>>>>>    String  sLogicalNameTo
41781>>>>>>>>>    String  sFieldNameFrom
41781>>>>>>>>>    String  sFieldNameTo
41781>>>>>>>>>    Boolean bShouldChange
41781>>>>>>>>>    Boolean bCancel
41781>>>>>>>>>    Boolean bError
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>Struct tAPIRelationCompare
41781>>>>>>>>>    // Common:
41781>>>>>>>>>    Handle  hTableFrom
41781>>>>>>>>>    Integer iColumnFrom
41781>>>>>>>>>    Handle  hTableTo
41781>>>>>>>>>    Integer iColumnTo
41781>>>>>>>>>    // FROM database:
41781>>>>>>>>>    Boolean bExistsFrom
41781>>>>>>>>>    String  sLogicalNameFrom_From
41781>>>>>>>>>    String  sLogicalNameTo_From
41781>>>>>>>>>    String  sFieldNameFrom_From
41781>>>>>>>>>    String  sFieldNameTo_From
41781>>>>>>>>>    Boolean bShouldChange_From
41781>>>>>>>>>    Boolean bCancel_From
41781>>>>>>>>>    Boolean bError_From
41781>>>>>>>>>    // TO database:
41781>>>>>>>>>    Boolean bExistsTo
41781>>>>>>>>>    String  sLogicalNameFrom_To
41781>>>>>>>>>    String  sLogicalNameTo_To
41781>>>>>>>>>    String  sFieldNameFrom_To
41781>>>>>>>>>    String  sFieldNameTo_To
41781>>>>>>>>>    Boolean bShouldChange_To
41781>>>>>>>>>    Boolean bCancel_To
41781>>>>>>>>>    Boolean bError_To
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>Struct tAPIIndexSegment
41781>>>>>>>>>    Integer iFieldNumber
41781>>>>>>>>>    String  sFieldName
41781>>>>>>>>>    Boolean bUppercase
41781>>>>>>>>>    Boolean bAscending
41781>>>>>>>>>    Boolean bShouldChange
41781>>>>>>>>>    Boolean bCancel
41781>>>>>>>>>    Boolean bError
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>Struct tAPIIndex
41781>>>>>>>>>    Integer iIndexNumber
41781>>>>>>>>>    Integer iPrimaryIndex
41781>>>>>>>>>    String  sSQLIndexName
41781>>>>>>>>>    Integer iSQLIndexType
41781>>>>>>>>>    Boolean bIsSQLClustered
41781>>>>>>>>>    Boolean bIsSQLPrimaryKey
41781>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArray
41781>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArray
41781>>>>>>>>>    Boolean bShouldChange
41781>>>>>>>>>    Boolean bCancel
41781>>>>>>>>>    Boolean bError
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>Struct tAPIIndexCompare
41781>>>>>>>>>    // Common:
41781>>>>>>>>>    Integer iIndexNumber
41781>>>>>>>>>    // FROM database:
41781>>>>>>>>>    Boolean bExistsFrom
41781>>>>>>>>>    Integer iPrimaryIndexFrom
41781>>>>>>>>>    String  sSQLIndexNameFrom
41781>>>>>>>>>    Integer iSQLIndexTypeFrom
41781>>>>>>>>>    Boolean bIsSQLClusteredFrom
41781>>>>>>>>>    Boolean bIsSQLPrimaryKeyFrom
41781>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArrayFrom
41781>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArrayFrom
41781>>>>>>>>>    Boolean bShouldChangeFrom
41781>>>>>>>>>    Boolean bCancelFrom
41781>>>>>>>>>    Boolean bErrorFrom
41781>>>>>>>>>    // TO database:
41781>>>>>>>>>    Boolean bExistsTo
41781>>>>>>>>>    Integer iPrimaryIndexTo
41781>>>>>>>>>    String  sSQLIndexNameTo
41781>>>>>>>>>    Integer iSQLIndexTypeTo
41781>>>>>>>>>    Boolean bIsSQLClusteredTo
41781>>>>>>>>>    Boolean bIsSQLPrimaryKeyTo
41781>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArrayTo
41781>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArrayTo
41781>>>>>>>>>    Boolean bShouldChangeTo
41781>>>>>>>>>    Boolean bCancelTo
41781>>>>>>>>>    Boolean bErrorTo
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>Struct tAPITableNameInfo
41781>>>>>>>>>    Integer iTableNumber
41781>>>>>>>>>    String  sRootName
41781>>>>>>>>>    String  sLogicalName
41781>>>>>>>>>    String  sDisplayName
41781>>>>>>>>>    String  sDriverID
41781>>>>>>>>>    Boolean bIsAlias
41781>>>>>>>>>    Boolean bIsSQL
41781>>>>>>>>>    Boolean bIsSystemFile
41781>>>>>>>>>    Boolean bShouldChange
41781>>>>>>>>>    Boolean bCancel
41781>>>>>>>>>    Boolean bError
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>Struct tAPITableNameInfoCompare
41781>>>>>>>>>    Integer iTableNumber
41781>>>>>>>>>    // FROM
41781>>>>>>>>>    Boolean bExistsFrom
41781>>>>>>>>>    String  sRootNameFrom
41781>>>>>>>>>    String  sLogicalNameFrom
41781>>>>>>>>>    String  sDisplayNameFrom
41781>>>>>>>>>    String  sDriverIDFrom
41781>>>>>>>>>    Boolean bIsAliasFrom
41781>>>>>>>>>    Boolean bIsSQLFrom
41781>>>>>>>>>    Boolean bIsSystemFileFrom
41781>>>>>>>>>    // TO database:
41781>>>>>>>>>    Boolean bExistsTo
41781>>>>>>>>>    String  sRootNameTo
41781>>>>>>>>>    String  sLogicalNameTo
41781>>>>>>>>>    String  sDisplayNameTo
41781>>>>>>>>>    String  sDriverIDTo
41781>>>>>>>>>    Boolean bIsAliasTo
41781>>>>>>>>>    Boolean bIsSQLTo
41781>>>>>>>>>    Boolean bIsSystemFileTo // *** Implement!
41781>>>>>>>>>    Boolean bShouldChange
41781>>>>>>>>>    Boolean bCancel
41781>>>>>>>>>    Boolean bError
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>Struct tAPITable
41781>>>>>>>>>    Handle hTable
41781>>>>>>>>>    Boolean bFromTable
41781>>>>>>>>>    Boolean bToTable
41781>>>>>>>>>    tAPITableNameInfo ApiTableInfo
41781>>>>>>>>>    tAPITableNameInfo ApiTableInfo
41781>>>>>>>>>    tAPIColumn[]      aApiColumns
41781>>>>>>>>>    tAPIColumn[]      aApiColumns
41781>>>>>>>>>    tAPIIndex[]       aApiIndexes
41781>>>>>>>>>    tAPIIndex[]       aApiIndexes
41781>>>>>>>>>    tAPIRelation[]    aApiRelations
41781>>>>>>>>>    tAPIRelation[]    aApiRelations
41781>>>>>>>>>    Boolean bShouldChange
41781>>>>>>>>>    Boolean bCancel
41781>>>>>>>>>    Boolean bError
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>Struct tAPITableCompare
41781>>>>>>>>>    Handle hTable
41781>>>>>>>>>    // FROM database:
41781>>>>>>>>>    Boolean bExistsFrom
41781>>>>>>>>>    // TO database:
41781>>>>>>>>>    Boolean bExistsTo
41781>>>>>>>>>    // Both:
41781>>>>>>>>>    tAPITableNameInfoCompare APITableNameInfoCompare
41781>>>>>>>>>    tAPITableNameInfoCompare APITableNameInfoCompare
41781>>>>>>>>>    tAPIColumnCompare[]     aAPIColumnsCompare
41781>>>>>>>>>    tAPIColumnCompare[]     aAPIColumnsCompare
41781>>>>>>>>>    tAPIIndexCompare[]      aAPIIndexesCompare
41781>>>>>>>>>    tAPIIndexCompare[]      aAPIIndexesCompare
41781>>>>>>>>>    tAPIRelationCompare[]   aAPIRelationsCompare
41781>>>>>>>>>    tAPIRelationCompare[]   aAPIRelationsCompare
41781>>>>>>>>>    Boolean bShouldChange   // Not implemented yet (!)
41781>>>>>>>>>    Boolean bCancel         // User cancel
41781>>>>>>>>>    Boolean bError          // Error occured while collecting data
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>Struct tAPITableBooleans
41781>>>>>>>>>    Boolean bApiTableUpdateAuto
41781>>>>>>>>>    Boolean bCompareDate_DateTime
41781>>>>>>>>>    Boolean bCompareIndexAscending
41781>>>>>>>>>    Boolean bCompareIndexUppercase
41781>>>>>>>>>    Boolean bCompareFilelistUppercase
41781>>>>>>>>>End_Struct
41781>>>>>>>>>
41781>>>>>>>>>Define C_tAPIColumn_None for 0
41781>>>>>>>>>Define C_tAPIColumn_Identity for 1
41781>>>>>>>>>
41781>>>>>>>>>// SQL Key-Word Constants:  CI_SQLSelect CI_SQLName CI_SQLFrom  CI_SQLSys
41781>>>>>>>>>// Used by the _SqlFindKeyWord function to return a proper keyword depending on the backend SQL,
41781>>>>>>>>>// i.e. one of the EN_DbTypeXXX members from the Enum_list above.
41781>>>>>>>>>// E.g. the CI_SQLAlterTable is only defined once, but the _SqlFindKeyWord function can return
41781>>>>>>>>>// different wording content depending on the EN_xxx value also passed to the function.
41781>>>>>>>>>Enum_List
41781>>>>>>>>>    Define CI_SQLAlterDatabase         //for "ALTER DATABASE"
41781>>>>>>>>>    Define CI_SQLSingle_User           //for "SINGLE_USER"
41781>>>>>>>>>    Define CI_SQLMulti_User            //for "USER_USER"
41781>>>>>>>>>    Define CI_SQLRollback              //for "ROLLBACK"
41781>>>>>>>>>    Define CI_SQLIMMEDIATE             //for "IMMEDIATE"
41781>>>>>>>>>    Define CI_SQLAlterTable            //for "ALTER TABLE"
41781>>>>>>>>>    Define CI_SQLAlterColumn           //for "ALTER COLUMN"
41781>>>>>>>>>    Define CI_SQLRenameColumn          //for "RENAME COLUMN"
41781>>>>>>>>>    Define CI_SQLColumn                //for "COLUMN"
41781>>>>>>>>>    Define CI_SQLSelect                //for "SELECT"
41781>>>>>>>>>    Define CI_SQLWhere                 //for "WHERE"
41781>>>>>>>>>    Define CI_SQLInfoSchema            //for "INFORMATION_SCHEMA.COLUMNS"
41781>>>>>>>>>    Define CI_SQLTable_Name            //for "TABLE_NAME"
41781>>>>>>>>>    Define CI_SQLTable                 //for "TABLE"
41781>>>>>>>>>    Define CI_SQLSys                   //for "SYS"
41781>>>>>>>>>    Define CI_SQLSp_Help               //for "SP_HELP"
41781>>>>>>>>>    Define CI_SQLFrom                  //for "FROM"
41781>>>>>>>>>    Define CI_SQLAdd                   //for "ADD"
41781>>>>>>>>>    Define CI_SQLDropColumn            //for "DROP"
41781>>>>>>>>>    Define CI_SQLCreateDatabase        //for "CREATE DATABASE"
41781>>>>>>>>>    Define CI_SQLDatabaseCollation     //for "COLLATE"
41781>>>>>>>>>    Define CI_SQLCreateTable           //for "CREATE TABLE"
41781>>>>>>>>>    Define CI_SQLDropTable             //for "DROP TABLE"
41781>>>>>>>>>    Define CI_SQLCreateView            //for "CREATE VIEW"
41781>>>>>>>>>    Define CI_SQLRenameTable           //for "RENAME TABLE"
41781>>>>>>>>>//    Define CI_SQLSelectFromWhereName   //for "SELECT name from [master].[dbo].[sysdatabases] where name"
41781>>>>>>>>>    Define CI_SQLDropView              //for "DROP VIEW"
41781>>>>>>>>>    Define CI_SQLSetNoCountOn          //for "SET NOCOUNT ON"
41781>>>>>>>>>    Define CI_SQLTo                    //for "TO"
41781>>>>>>>>>    Define CI_SQLGO                    //for "GO"
41781>>>>>>>>>    Define CI_SQLUse                   //for "USE"
41781>>>>>>>>>    Define CI_SQLDBO                   //for "DBO"
41781>>>>>>>>>
41781>>>>>>>>>    Define CI_SQLName                  //for "NAME"
41781>>>>>>>>>    Define CI_SQLMaster                //for "MASTER"
41781>>>>>>>>>    Define CI_SQLDatabases             //for "DATABASES"
41781>>>>>>>>>    Define CI_SQLSysIndexes            //for "SYS.INDEXES"
41781>>>>>>>>>    Define CI_SQLObjectID              //for "OBJECT_ID"
41781>>>>>>>>>    Define CI_SQLID                    //for "ID"
41781>>>>>>>>>    Define CI_SQLAND                   //for "AND"
41781>>>>>>>>>    Define CI_SQLUpdate                //for "UPDATE"
41781>>>>>>>>>    Define CI_SQLSet                   //for "SET"
41781>>>>>>>>>    Define CI_SQLWith                  //for "WITH"
41781>>>>>>>>>    Define CI_SQLNotNull               //for "NOT NULL"
41781>>>>>>>>>    Define CI_SQL_SAFE_UPDATES         //for "SQL_SAFE_UPDATES"  
41781>>>>>>>>>    Define CI_SQLDescription          //for "SELECT name, description from sys.fn_helpcollations()" (Enumerates all collates)
41781>>>>>>>>>End_Enum_List
41781>>>>>>>>>
41781>>>>>>>>>
41781>>>>>>>
41781>>>>>>>Class cDbUpdateFunctionLibrary_Mixin is a Mixin
41782>>>>>>>
41782>>>>>>>    Procedure CreateDbUpdateLibraryProperties
41784>>>>>>>        Handle hoSQLManagerMT
41784>>>>>>>
41784>>>>>>>        Property String private.psUseDatabase ""
41785>>>>>>>
41785>>>>>>>        // These are used by the Error routine to show the Table# & Field# if something goes wrong:
41785>>>>>>>        Property Handle  private.phCurrentTable 0
41786>>>>>>>        Property Integer private.piCurrentField 0
41787>>>>>>>
41787>>>>>>>        Property Handle phoCLIHandler      (Create(Self,RefClass(cCLIHandler)))
41788>>>>>>>        Property Handle phoSQLManager      (Create(Self,RefClass(cSQLHandleManager)))
41789>>>>>>>
41789>>>>>>>        Property Handle phoSQLManagerMT
41790>>>>>>>
41790>>>>>>>        Property Handle phoMSSQLHandler    (Create(Self,RefClass(cMSSQLHandler)))
41791>>>>>>>        Property Handle phoDB2SQLHandler   (Create(Self,RefClass(cDB2Handler)))
41792>>>>>>>        Property Handle phoODBCSQLHandler  (Create(Self,RefClass(cODBCHandler)))
41793>>>>>>>        Property Handle phoSQLConnectionHandler 0
41794>>>>>>>        Property tSQLKeyWords[] paSQLKeywordArray
41795>>>>>>>
41795>>>>>>>        Property Boolean pbHandleQueryErrors True
41796>>>>>>>
41796>>>>>>>        Property tSqlColumnNew[] paQueryColumns
41797>>>>>>>        Property String[] paSQLFetchResults
41798>>>>>>>
41798>>>>>>>        // Error handling
41798>>>>>>>        Property Integer Error_Report_Mode DUF_ERROR_REPORT
41799>>>>>>>        Property Boolean pbSqlError False
41800>>>>>>>        Property tSqlErrorArray paSqlErrorArray
41801>>>>>>>        Property Boolean pbProcessingError False
41802>>>>>>>
41802>>>>>>>        // Statistics on query
41802>>>>>>>        Property TimeSpan ptsTotalQueryTime
41803>>>>>>>        Property TimeSpan ptsQueryExec
41804>>>>>>>        Property TimeSpan ptsFetchResults
41805>>>>>>>        Property Integer piColumns 0
41806>>>>>>>        Property Integer piRows 0
41807>>>>>>>        Property Integer piRowType 0
41808>>>>>>>        Property String[] paQueryMessages
41809>>>>>>>        Property String psSQLStatementString
41810>>>>>>>
41810>>>>>>>        Property Integer[] paTableConvertExceptions
41811>>>>>>>
41811>>>>>>>        Property Integer[] paTableDateCorrectionExceptions
41812>>>>>>>
41812>>>>>>>        // Number of SQL statements (chunks) to be executed when executing a really big
41812>>>>>>>        // SQL file that has been compiled into the program. It is way faster to divide
41812>>>>>>>        // the statements in smaller chunks than to execute them all at the same time.
41812>>>>>>>        Property Integer piChunkMax 500
41813>>>>>>>
41813>>>>>>>        // Fill the paSQLKeywordArray array with values;
41813>>>>>>>        Send SetupSQLKeywordArray
41814>>>>>>>    End_Procedure
41815>>>>>>>
Including file: ParseKeyWord.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ParseKeyWord.pkg)
41815>>>>>>>>
41815>>>>>>>>Function ParseKeyWord String sConnect String sKeyWord Returns String
41817>>>>>>>>    Integer iStart iEnd
41817>>>>>>>>    String sRetval
41817>>>>>>>>
41817>>>>>>>>    Move (Trim(sConnect)) to sConnect
41818>>>>>>>>    Move (Pos(Uppercase(sKeyWord), Uppercase(sConnect)))  to iStart
41819>>>>>>>>    If (iStart = 0) Begin
41821>>>>>>>>        Function_Return ""
41822>>>>>>>>    End
41822>>>>>>>>>
41822>>>>>>>>    Move (Left(sConnect, (iStart -1 + Length(sKeyWord)))) to sRetval
41823>>>>>>>>    Move (Replace(sRetval, sConnect, "")) to sRetval
41824>>>>>>>>    If (sKeyWord = Uppercase(CS_SQLConnectionIDText)) Begin
41826>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
41827>>>>>>>>    End
41827>>>>>>>>>
41827>>>>>>>>    Else Begin
41828>>>>>>>>        Move (Pos(";", sRetval))          to iEnd
41829>>>>>>>>    End
41829>>>>>>>>>
41829>>>>>>>>    If (iEnd = 0 and (sRetval contains ",")) Begin
41831>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
41832>>>>>>>>        Decrement iEnd
41833>>>>>>>>    End
41833>>>>>>>>>
41833>>>>>>>>    If (iEnd <> 0) Begin
41835>>>>>>>>        Move (Left(sRetval, (iEnd -1)))   to sRetval
41836>>>>>>>>    End
41836>>>>>>>>>
41836>>>>>>>>    Move (Replace("=", sRetval, ""))      to sRetval
41837>>>>>>>>
41837>>>>>>>>    Function_Return (Trim(sRetval))
41838>>>>>>>>End_Function
41839>>>>>>>>
41839>>>>>>>>
41839>>>>>>>
41839>>>>>>>    // Custom array find function. It compares both the iSQLWord & iSQLDbType params.
41839>>>>>>>    Function CompareFindSQLKeyWords tSQLKeyWords SQLKeywords1 tSQLKeyWords SQLKeywords2 Returns Integer
41841>>>>>>>        If (SQLKeywords1.iSQLWord = SQLKeywords2.iSQLWord and SQLKeywords1.iSQLDbType = SQLKeywords2.iSQLDbType) Begin
41843>>>>>>>            Function_Return (EQ)
41844>>>>>>>        End
41844>>>>>>>>
41844>>>>>>>        Function_Return (GT)
41845>>>>>>>    End_Function
41846>>>>>>>
41846>>>>>>>    // Custom array sort function. It compares both the iSQLWord & iSQLDbType params.
41846>>>>>>>    Function CompareSortSQLKeyWords tSQLKeyWords SQLKeywords1 tSQLKeyWords SQLKeywords2 Returns Integer
41848>>>>>>>        If (SQLKeywords1.iSQLWord   < SQLKeywords2.iSQLWord and SQLKeywords1.iSQLDbType < SQLKeywords2.iSQLDbType) ;            Function_Return (LT)
41851>>>>>>>        If (SQLKeywords1.iSQLWord   > SQLKeywords2.iSQLWord and SQLKeywords1.iSQLDbType > SQLKeywords2.iSQLDbType) ;            Function_Return (GT)
41854>>>>>>>
41854>>>>>>>        Function_Return (EQ)
41855>>>>>>>    End_Function
41856>>>>>>>
41856>>>>>>>    Procedure Add_Element Integer iSQLKeywordConstant Integer iEN_dbType String sSQLKeyword
41858>>>>>>>        tSQLKeyWords[] SQLKeywordArray
41858>>>>>>>        tSQLKeyWords[] SQLKeywordArray
41859>>>>>>>        Integer iSize
41859>>>>>>>
41859>>>>>>>        Get paSQLKeywordArray to SQLKeywordArray
41860>>>>>>>        Move (SizeOfArray(SQLKeywordArray)) to iSize
41861>>>>>>>        Move iSQLKeywordConstant to SQLKeywordArray[iSize].iSQLWord
41862>>>>>>>        Move iEN_dbType          to SQLKeywordArray[iSize].iSQLDbType
41863>>>>>>>        Move sSQLKeyword         to SQLKeywordArray[iSize].sSQLPhrase
41864>>>>>>>
41864>>>>>>>        Set paSQLKeywordArray to SQLKeywordArray
41865>>>>>>>    End_Procedure
41866>>>>>>>
41866>>>>>>>    // Creates a struct array with all SQL keywords
41866>>>>>>>    // for all EN_xxx SQL back-ends. Various back-ends can
41866>>>>>>>    // have slightly different wording.
41866>>>>>>>    // If a new EN_dbTypexxx type is added; additions
41866>>>>>>>    // needs to be done for every keyword group below.
41866>>>>>>>    Procedure SetupSQLKeywordArray
41868>>>>>>>        tSQLKeyWords[] SQLKeywordArray SQLKeywordArraySorted
41868>>>>>>>        tSQLKeyWords[] SQLKeywordArray SQLKeywordArraySorted
41870>>>>>>>
41870>>>>>>>        // This should only be called once; but in case it is
41870>>>>>>>        // we delete the array first.
41870>>>>>>>        Set paSQLKeywordArray to SQLKeywordArray
41871>>>>>>>
41871>>>>>>>        // ToDo: *** Not all SQL Key-words has been checked for other backends than MS-SQL ***
41871>>>>>>>        //
41871>>>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypeMSSQL    "ALTER DATABASE"
41872>>>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypeMySQL    "ALTER DATABASE"
41873>>>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypeOracle   "ALTER DATABASE"
41874>>>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypeDB2      "ALTER DATABASE"
41875>>>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypePostgre  "ALTER DATABASE"
41876>>>>>>>
41876>>>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypeMSSQL    "SINGLE_USER"
41877>>>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypeMySQL    "SINGLE_USER"
41878>>>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypeOracle   "SINGLE_USER"
41879>>>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypeDB2      "SINGLE_USER"
41880>>>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypePostgre  "SINGLE_USER"
41881>>>>>>>
41881>>>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypeMSSQL    "MULTI_USER"
41882>>>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypeMySQL    "MULTI_USER"
41883>>>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypeOracle   "MULTI_USER"
41884>>>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypeDB2      "MULTI_USER"
41885>>>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypePostgre  "MULTI_USER"
41886>>>>>>>
41886>>>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypeMSSQL    "ROLLBACK"
41887>>>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypeMySQL    "ROLLBACK"
41888>>>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypeOracle   "ROLLBACK"
41889>>>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypeDB2      "ROLLBACK"
41890>>>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypePostgre  "ROLLBACK"
41891>>>>>>>
41891>>>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypeMSSQL    "IMMEDIATE"
41892>>>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypeMySQL    "IMMEDIATE"
41893>>>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypeOracle   "IMMEDIATE"
41894>>>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypeDB2      "IMMEDIATE"
41895>>>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypePostgre  "IMMEDIATE"
41896>>>>>>>
41896>>>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypeMSSQL    "ALTER TABLE"
41897>>>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypeMySQL    "ALTER TABLE"
41898>>>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypeOracle   "ALTER TABLE"
41899>>>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypeDB2      "ALTER TABLE"
41900>>>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypePostgre  "ALTER TABLE"
41901>>>>>>>
41901>>>>>>>        Send Add_Element CI_SQLAdd EN_dbTypeMSSQL           "ADD"
41902>>>>>>>        Send Add_Element CI_SQLAdd EN_dbTypeMySQL           "ADD"
41903>>>>>>>        Send Add_Element CI_SQLAdd EN_dbTypeOracle          "ADD"
41904>>>>>>>        Send Add_Element CI_SQLAdd EN_dbTypeDB2             "ADD"
41905>>>>>>>        Send Add_Element CI_SQLAdd EN_dbTypePostgre         "ADD"
41906>>>>>>>
41906>>>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypeMSSQL        "UPDATE"
41907>>>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypeMySQL        "UPDATE"
41908>>>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypeOracle       "UPDATE"
41909>>>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypeDB2          "UPDATE"
41910>>>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypePostgre      "UPDATE"
41911>>>>>>>
41911>>>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypeMSSQL       "NOT NULL"
41912>>>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypeMySQL       "NOT NULL"
41913>>>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypeOracle      "" // Seems like Oracle can't handle setting a new column to 'NOT NULL' if the table exists with data(!)
41914>>>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypeDB2         "DEFAULT NOT NULL"
41915>>>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypePostgre     "NOT NULL"
41916>>>>>>>
41916>>>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_DbTypeMSSQL   ""
41917>>>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_dbTypeMySQL   "SQL_SAFE_UPDATES"
41918>>>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_dbTypeOracle  ""
41919>>>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_dbTypeDB2     ""
41920>>>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_dbTypePostgre ""
41921>>>>>>>
41921>>>>>>>        Send Add_Element CI_SQLSet EN_dbTypeMSSQL           "SET"
41922>>>>>>>        Send Add_Element CI_SQLSet EN_dbTypeMySQL           "SET"
41923>>>>>>>        Send Add_Element CI_SQLSet EN_dbTypeOracle          "SET"
41924>>>>>>>        Send Add_Element CI_SQLSet EN_dbTypeDB2             "SET"
41925>>>>>>>        Send Add_Element CI_SQLSet EN_dbTypePostgre         "SET"
41926>>>>>>>
41926>>>>>>>        Send Add_Element CI_SQLWith EN_dbTypeMSSQL          "WITH"
41927>>>>>>>        Send Add_Element CI_SQLWith EN_dbTypeMySQL          "WITH"
41928>>>>>>>        Send Add_Element CI_SQLWith EN_dbTypeOracle         "WITH"
41929>>>>>>>        Send Add_Element CI_SQLWith EN_dbTypeDB2            "WITH"
41930>>>>>>>        Send Add_Element CI_SQLWith EN_dbTypePostgre        "WITH"
41931>>>>>>>
41931>>>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypeMSSQL    "CREATE DATABASE"
41932>>>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypeMySQL    "CREATE DATABASE"
41933>>>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypeOracle   "CREATE DATABASE"
41934>>>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypeDB2      "CREATE DATABASE"
41935>>>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypePostgre  "CREATE DATABASE"
41936>>>>>>>
41936>>>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypeMSSQL    "COLLATE"
41937>>>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypeMySQL    "COLLATE"
41938>>>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypeOracle   "COLLATE"
41939>>>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypeDB2      "COLLATE"
41940>>>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypePostgre  "COLLATE"
41941>>>>>>>
41941>>>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypeMSSQL    "CREATE VIEW"
41942>>>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypeMySQL    "CREATE VIEW"
41943>>>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypeOracle   "CREATE VIEW"
41944>>>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypeDB2      "CREATE VIEW"
41945>>>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypePostgre  "CREATE VIEW"
41946>>>>>>>
41946>>>>>>>        Send Add_Element CI_SQLDropView EN_dbTypeMSSQL      "DROP VIEW"
41947>>>>>>>        Send Add_Element CI_SQLDropView EN_dbTypeMySQL      "DROP VIEW"
41948>>>>>>>        Send Add_Element CI_SQLDropView EN_dbTypeOracle     "DROP VIEW"
41949>>>>>>>        Send Add_Element CI_SQLDropView EN_dbTypeDB2        "DROP VIEW"
41950>>>>>>>        Send Add_Element CI_SQLDropView EN_dbTypePostgre    "DROP VIEW"
41951>>>>>>>
41951>>>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypeMSSQL   "CREATE TABLE"
41952>>>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypeMySQL   "CREATE TABLE"
41953>>>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypeOracle  "CREATE TABLE"
41954>>>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypeDB2     "CREATE TABLE"
41955>>>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypePostgre "CREATE TABLE"
41956>>>>>>>
41956>>>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypeMSSQL     "DROP TABLE"
41957>>>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypeMySQL     "DROP TABLE"
41958>>>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypeOracle    "DROP TABLE"
41959>>>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypeDB2       "DROP TABLE"
41960>>>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypePostgre   "DROP TABLE"
41961>>>>>>>
41961>>>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypeMSSQL   "EXEC sp_rename"
41962>>>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypeMySQL   "RENAME TABLE"
41963>>>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypeOracle  "RENAME TABLE"
41964>>>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypeDB2     "RENAME TABLE"
41965>>>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypePostgre "RENAME TO"
41966>>>>>>>
41966>>>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypeMSSQL    "DROP COLUMN"
41967>>>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypeMySQL    "DROP COLUMN"
41968>>>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypeOracle   "DROP COLUMN"
41969>>>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypeDB2      "DROP COLUMN"
41970>>>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypePostgre  "DROP COLUMN"
41971>>>>>>>
41971>>>>>>>        Send Add_Element CI_SQLColumn EN_dbTypeMSSQL        "COLUMN"
41972>>>>>>>        Send Add_Element CI_SQLColumn EN_dbTypeMySQL        "COLUMN"
41973>>>>>>>        Send Add_Element CI_SQLColumn EN_dbTypeOracle       "COLUMN"
41974>>>>>>>        Send Add_Element CI_SQLColumn EN_dbTypeDB2          "COLUMN"
41975>>>>>>>        Send Add_Element CI_SQLColumn EN_dbTypePostgre      "COLUMN"
41976>>>>>>>
41976>>>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypeMSSQL   "ALTER COLUMN"
41977>>>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypeMySQL   "MODIFY"
41978>>>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypeOracle  "MODIFY"
41979>>>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypeDB2     "ALTER COLUMN"
41980>>>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypePostgre "ALTER COLUMN"
41981>>>>>>>
41981>>>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypeMSSQL   "EXEC sp_RENAME"
41982>>>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypeMySQL   "CHANGE"
41983>>>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypeOracle  "RENAME COLUMN"
41984>>>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypeDB2     "RENAME COLUMN"
41985>>>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypePostgre "RENAME COLUMN"
41986>>>>>>>
41986>>>>>>>        Send Add_Element CI_SQLSelect EN_dbTypeMSSQL        "SELECT"
41987>>>>>>>        Send Add_Element CI_SQLSelect EN_dbTypeMySQL        "SELECT"
41988>>>>>>>        Send Add_Element CI_SQLSelect EN_dbTypeOracle       "SELECT"
41989>>>>>>>        Send Add_Element CI_SQLSelect EN_dbTypeDB2          "SELECT"
41990>>>>>>>        Send Add_Element CI_SQLSelect EN_dbTypePostgre      "SELECT"
41991>>>>>>>
41991>>>>>>>        Send Add_Element CI_SQLWhere EN_dbTypeMSSQL         "WHERE"
41992>>>>>>>        Send Add_Element CI_SQLWhere EN_dbTypeMySQL         "WHERE"
41993>>>>>>>        Send Add_Element CI_SQLWhere EN_dbTypeOracle        "WHERE"
41994>>>>>>>        Send Add_Element CI_SQLWhere EN_dbTypeDB2           "WHERE"
41995>>>>>>>        Send Add_Element CI_SQLWhere EN_dbTypePostgre       "WHERE"
41996>>>>>>>
41996>>>>>>>        Send Add_Element CI_SQLFrom EN_dbTypeMSSQL          "FROM"
41997>>>>>>>        Send Add_Element CI_SQLFrom EN_dbTypeMySQL          "FROM"
41998>>>>>>>        Send Add_Element CI_SQLFrom EN_dbTypeOracle         "FROM"
41999>>>>>>>        Send Add_Element CI_SQLFrom EN_dbTypeDB2            "FROM"
42000>>>>>>>        Send Add_Element CI_SQLFrom EN_dbTypePostgre        "FROM"
42001>>>>>>>
42001>>>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypeMSSQL    "INFORMATION_SCHEMA.COLUMNS"
42002>>>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypeMySQL    "INFORMATION_SCHEMA.COLUMNS"
42003>>>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypeOracle   "INFORMATION_SCHEMA.COLUMNS"
42004>>>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypeDB2      "INFORMATION_SCHEMA.COLUMNS"
42005>>>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypePostgre  "INFORMATION_SCHEMA.COLUMNS"
42006>>>>>>>
42006>>>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypeMSSQL    "TABLE_NAME"
42007>>>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypeMySQL    "TABLE_NAME"
42008>>>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypeOracle   "TABLE_NAME"
42009>>>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypeDB2      "TABLE_NAME"
42010>>>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypePostgre  "TABLE_NAME"
42011>>>>>>>
42011>>>>>>>        Send Add_Element CI_SQLTable EN_dbTypeMSSQL         "TABLE"
42012>>>>>>>        Send Add_Element CI_SQLTable EN_dbTypeMySQL         "TABLE"
42013>>>>>>>        Send Add_Element CI_SQLTable EN_dbTypeOracle        "TABLE"
42014>>>>>>>        Send Add_Element CI_SQLTable EN_dbTypeDB2           "TABLE"
42015>>>>>>>        Send Add_Element CI_SQLTable EN_dbTypePostgre       "TABLE"
42016>>>>>>>
42016>>>>>>>        Send Add_Element CI_SQLSys EN_dbTypeMSSQL           "SYS"
42017>>>>>>>        Send Add_Element CI_SQLSys EN_dbTypeMySQL           "SYS"
42018>>>>>>>        Send Add_Element CI_SQLSys EN_dbTypeOracle          "SYS"
42019>>>>>>>        Send Add_Element CI_SQLSys EN_dbTypeDB2             "SYS"
42020>>>>>>>        Send Add_Element CI_SQLSys EN_dbTypePostgre         "SYS"
42021>>>>>>>
42021>>>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypeMSSQL       "SP_HELP"
42022>>>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypeMySQL       "SP_HELP"
42023>>>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypeOracle      "SP_HELP"
42024>>>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypeDB2         "SP_HELP"
42025>>>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypePostgre     "SP_HELP"
42026>>>>>>>
42026>>>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypeMSSQL      "SET NOCOUNT ON"
42027>>>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypeMySQL      "SET NOCOUNT ON"
42028>>>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypeOracle     "SET NOCOUNT ON"
42029>>>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypeDB2        "SET NOCOUNT ON"
42030>>>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypePostgre    "SET NOCOUNT ON"
42031>>>>>>>
42031>>>>>>>        Send Add_Element CI_SQLTo EN_dbTypeMSSQL            "TO"
42032>>>>>>>        Send Add_Element CI_SQLTo EN_dbTypeMySQL            "TO"
42033>>>>>>>        Send Add_Element CI_SQLTo EN_dbTypeOracle           "TO"
42034>>>>>>>        Send Add_Element CI_SQLTo EN_dbTypeDB2              "TO"
42035>>>>>>>        Send Add_Element CI_SQLTo EN_dbTypePostgre          "TO"
42036>>>>>>>
42036>>>>>>>        Send Add_Element CI_SQLGO EN_dbTypeMSSQL            "GO"
42037>>>>>>>        Send Add_Element CI_SQLGO EN_dbTypeMySQL            "GO"
42038>>>>>>>        Send Add_Element CI_SQLGO EN_dbTypeOracle           "GO"
42039>>>>>>>        Send Add_Element CI_SQLGO EN_dbTypeDB2              "GO"
42040>>>>>>>        Send Add_Element CI_SQLGO EN_dbTypePostgre          "GO"
42041>>>>>>>
42041>>>>>>>        Send Add_Element CI_SQLUse EN_dbTypeMSSQL           "USE"
42042>>>>>>>        Send Add_Element CI_SQLUse EN_dbTypeMySQL           "USE"
42043>>>>>>>        Send Add_Element CI_SQLUse EN_dbTypeOracle          "USE"
42044>>>>>>>        Send Add_Element CI_SQLUse EN_dbTypeDB2             "USE"
42045>>>>>>>        Send Add_Element CI_SQLUse EN_dbTypePostgre         "USE"
42046>>>>>>>
42046>>>>>>>        Send Add_Element CI_SQLDBO EN_dbTypeMSSQL           "dbo"
42047>>>>>>>        Send Add_Element CI_SQLDBO EN_dbTypeMySQL           "dbo"
42048>>>>>>>        Send Add_Element CI_SQLDBO EN_dbTypeOracle          "dbo"
42049>>>>>>>        Send Add_Element CI_SQLDBO EN_dbTypeDB2             "dbo"
42050>>>>>>>        Send Add_Element CI_SQLDBO EN_dbTypePostgre         "dbo"
42051>>>>>>>
42051>>>>>>>        Send Add_Element CI_SQLMaster EN_dbTypeMSSQL        "MASTER"
42052>>>>>>>        Send Add_Element CI_SQLMaster EN_dbTypeMySQL        "MASTER"
42053>>>>>>>        Send Add_Element CI_SQLMaster EN_dbTypeOracle       "MASTER"
42054>>>>>>>        Send Add_Element CI_SQLMaster EN_dbTypeDB2          "MASTER"
42055>>>>>>>        Send Add_Element CI_SQLMaster EN_dbTypePostgre      "MASTER"
42056>>>>>>>
42056>>>>>>>        Send Add_Element CI_SQLName EN_dbTypeMSSQL          "NAME"
42057>>>>>>>        Send Add_Element CI_SQLName EN_dbTypeMySQL          "NAME"
42058>>>>>>>        Send Add_Element CI_SQLName EN_dbTypeOracle         "NAME"
42059>>>>>>>        Send Add_Element CI_SQLName EN_dbTypeDB2            "NAME"
42060>>>>>>>        Send Add_Element CI_SQLName EN_dbTypePostgre        "NAME"
42061>>>>>>>
42061>>>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypeMSSQL     "DATABASES"
42062>>>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypeMySQL     "DATABASES"
42063>>>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypeOracle    "DATABASES"
42064>>>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypeDB2       "DATABASES"
42065>>>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypePostgre   "DATABASES"
42066>>>>>>>
42066>>>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypeMSSQL    "SYS.INDEXES"
42067>>>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypeMySQL    "SYS.INDEXES"
42068>>>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypeOracle   "SYS.INDEXES"
42069>>>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypeDB2      "SYS.INDEXES"
42070>>>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypePostgre  "SYS.INDEXES"
42071>>>>>>>
42071>>>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypeMSSQL      "OBJECT_ID"
42072>>>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypeMySQL      "OBJECT_ID"
42073>>>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypeOracle     "OBJECT_ID"
42074>>>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypeDB2        "OBJECT_ID"
42075>>>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypePostgre    "OBJECT_ID"
42076>>>>>>>
42076>>>>>>>        Send Add_Element CI_SQLID EN_dbTypeMSSQL            "ID"
42077>>>>>>>        Send Add_Element CI_SQLID EN_dbTypeMySQL            "ID"
42078>>>>>>>        Send Add_Element CI_SQLID EN_dbTypeOracle           "ID"
42079>>>>>>>        Send Add_Element CI_SQLID EN_dbTypeDB2              "ID"
42080>>>>>>>        Send Add_Element CI_SQLID EN_dbTypePostgre          "ID"
42081>>>>>>>
42081>>>>>>>        Send Add_Element CI_SQLAND EN_dbTypeMSSQL           "AND"
42082>>>>>>>        Send Add_Element CI_SQLAND EN_dbTypeMySQL           "AND"
42083>>>>>>>        Send Add_Element CI_SQLAND EN_dbTypeOracle          "AND"
42084>>>>>>>        Send Add_Element CI_SQLAND EN_dbTypeDB2             "AND"
42085>>>>>>>        Send Add_Element CI_SQLAND EN_dbTypePostgre         "AND"
42086>>>>>>>
42086>>>>>>>        Send Add_Element CI_SQLDescription EN_dbTypeMSSQL   "DESCRIPTION"
42087>>>>>>>        Send Add_Element CI_SQLDescription EN_dbTypeMySQL   "DESCRIPTION"
42088>>>>>>>        Send Add_Element CI_SQLDescription EN_dbTypeOracle  "DESCRIPTION"
42089>>>>>>>        Send Add_Element CI_SQLDescription EN_dbTypeDB2     "DESCRIPTION"
42090>>>>>>>        Send Add_Element CI_SQLDescription EN_dbTypePostgre "DESCRIPTION"
42091>>>>>>>
42091>>>>>>>        // In case we didn't put the above in order (and we don't need to); we sort the struct array.
42091>>>>>>>        Get paSQLKeywordArray to SQLKeywordArray
42092>>>>>>>        Move (SortArray(SQLKeywordArray, Self, (RefFunc(CompareSortSQLKeyWords)))) to SQLKeywordArraySorted
42093>>>>>>>        Set paSQLKeywordArray to SQLKeywordArraySorted
42094>>>>>>>
42094>>>>>>>    End_Procedure
42095>>>>>>>
42095>>>>>>>End_Class
42096>>>>>Use cSQLConnectionHandler.pkg
Including file: cSQLConnectionHandler.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cSQLConnectionHandler.pkg)
42096>>>>>>>//****************************************************************************
42096>>>>>>>// $Module type: Class
42096>>>>>>>// $Module name: cSQLConnectionHandler.pkg
42096>>>>>>>// $Author     : Nils Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
42096>>>>>>>// Web-site    : http://www.rdctools.com
42096>>>>>>>// Created     : 2015-08-11 @ 16:02 (Military date format: YY-MM-DD)
42096>>>>>>>//
42096>>>>>>>// Description : A handler class for using CLI connection ID's to login to a database server.
42096>>>>>>>//
42096>>>>>>>// $Rev History:
42096>>>>>>>//    2015-08-11  Module header created
42096>>>>>>>//    2016-09-26  Changed name of the objecthandle from ghoCreateConnectionID to ghoSQLConnectionHandler.
42096>>>>>>>//                Added a new structure for passing connection data back & forth.
42096>>>>>>>//                Added better error handling.
42096>>>>>>>//                Added a decompose message for the connection string.
42096>>>>>>>//    2017-01-09  Added support for Mertech drivers
42096>>>>>>>//                Big overhaul to comply better with "Managed Connections" (DF 19)
42096>>>>>>>//                These changes make the class compatible with DFConnId.ini (can read/write DAW connection ini-files)
42096>>>>>>>//    2017-02-12  Reworked the whole connection property interface.
42096>>>>>>>//                Now there is one struct property that is the at cencter of a connection.
42096>>>>>>>//    2023-11-06 *** REMOVED ALL SUPPORT FOR MERTECH DRIVERS ***
42096>>>>>>>//****************************************************************************
42096>>>>>>>Use cli.pkg
42096>>>>>>>Use MSSqldrv.pkg
42096>>>>>>>Use db2_drv.pkg
42096>>>>>>>Use odbc_drv.pkg
42096>>>>>>>Use cSQLConnectionIniFile.pkg
Including file: cSQLConnectionIniFile.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cSQLConnectionIniFile.pkg)
42096>>>>>>>>>//****************************************************************************
42096>>>>>>>>>// $Module type: Class
42096>>>>>>>>>// $Module name: cSQLConnectionIniFile.pkg
42096>>>>>>>>>//
42096>>>>>>>>>// $Author     : Nils Svedmyr, RDC Tools International.
42096>>>>>>>>>// Copyright (c) 2012 RDC Tools International
42096>>>>>>>>>// E-mail      : support@rdctools.com
42096>>>>>>>>>// Web-site    : http://www.rdctools.com
42096>>>>>>>>>//
42096>>>>>>>>>// Created     : 2012-09-20 @ 18:04 (Military date format - Year-Month-Day)
42096>>>>>>>>>//
42096>>>>>>>>>// Note        : The file must be USEd after declaration of the ghoApplication object, as it uses
42096>>>>>>>>>//               properties of that object.
42096>>>>>>>>>//
42096>>>>>>>>>// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
42096>>>>>>>>>// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
42096>>>>>>>>>// This is free software; you can redistribute it and/or modify it under the terms of the
42096>>>>>>>>>// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
42096>>>>>>>>>// in the help folder for more details.
42096>>>>>>>>>//
42096>>>>>>>>>Use cSQLConnectionIniFile.inc
42096>>>>>>>>>Use cDbUpdateDatabaseDriver.pkg
Including file: cDbUpdateDatabaseDriver.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cDbUpdateDatabaseDriver.pkg)
42096>>>>>>>>>>>Use cSQLConnectionIniFile.inc
42096>>>>>>>>>>>
42096>>>>>>>>>>>Class cDbUpdateGenericDatabaseDriver is a cObject
42097>>>>>>>>>>>    Procedure Construct_Object
42099>>>>>>>>>>>        Forward Send Construct_Object
42101>>>>>>>>>>>        Property String psDriverID DATAFLEX_ID
42102>>>>>>>>>>>    End_Procedure
42103>>>>>>>>>>>
42103>>>>>>>>>>>    Function ServerKeyword String sServer Returns String
42105>>>>>>>>>>>        String sRetval
42105>>>>>>>>>>>        If (Uppercase(sServer) contains ("." + CS_SQLIniDSNKeyword)) Begin
42107>>>>>>>>>>>            Move CS_SQLIniFileDSNKeyword to sRetval    
42108>>>>>>>>>>>        End                                        
42108>>>>>>>>>>>>
42108>>>>>>>>>>>        Else Begin
42109>>>>>>>>>>>            Move CS_SQLIniDSNKeyword to sRetval
42110>>>>>>>>>>>        End
42110>>>>>>>>>>>>
42110>>>>>>>>>>>            
42110>>>>>>>>>>>        Function_Return sRetval
42111>>>>>>>>>>>    End_Function
42112>>>>>>>>>>>
42112>>>>>>>>>>>    Function ConstructConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
42114>>>>>>>>>>>        String sConnect sServerKeyWord sDriverID
42114>>>>>>>>>>>        Integer iClientVersion
42114>>>>>>>>>>>        
42114>>>>>>>>>>>        Get psDriverID to sDriverID
42115>>>>>>>>>>>        Get ServerKeyword sServer to sServerKeyWord
42116>>>>>>>>>>>        Move (sConnect + sServerKeyWord + "=" + sServer) to sConnect
42117>>>>>>>>>>>        If (sServerKeyWord = CS_SQLIniDSNKeyword or sServerKeyWord = CS_SQLIniFileDSNKeyword) Begin
42119>>>>>>>>>>>            Move "" to sDatabase
42120>>>>>>>>>>>        End
42120>>>>>>>>>>>>
42120>>>>>>>>>>>        
42120>>>>>>>>>>>        If (sDatabase <> "") Begin
42122>>>>>>>>>>>            Move (sConnect + ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
42123>>>>>>>>>>>        End
42123>>>>>>>>>>>>
42123>>>>>>>>>>>        If (bTrusted = True) Begin
42125>>>>>>>>>>>            Move (sConnect + ";" + CS_SQLIniTrustedKeyword + "=Yes") to sConnect
42126>>>>>>>>>>>        End
42126>>>>>>>>>>>>
42126>>>>>>>>>>>        Else Begin
42127>>>>>>>>>>>            Move (sConnect + ";" + CS_SQLIniUIDKeyword + "=" + sUserID + ";" + CS_SQLIniPWDKeyword + "=" + sPassword) to sConnect
42128>>>>>>>>>>>        End
42128>>>>>>>>>>>>
42128>>>>>>>>>>>        
42128>>>>>>>>>>>        If (sDriverID = MSSQLDRV_ID) Begin
42130>>>>>>>>>>>            Get SQLClientVersionInteger MSSQLDRV_ID to iClientVersion
42131>>>>>>>>>>>            If (iClientVersion >= 18) Begin
42133>>>>>>>>>>>                Append sConnect ";Encrypt=Optional;TrustServerCertificate=Yes"
42134>>>>>>>>>>>                Move (Replaces(" ", sConnect, "")) to sConnect
42135>>>>>>>>>>>            End
42135>>>>>>>>>>>>
42135>>>>>>>>>>>        End
42135>>>>>>>>>>>>
42135>>>>>>>>>>>        
42135>>>>>>>>>>>        Function_Return sConnect
42136>>>>>>>>>>>    End_Function
42137>>>>>>>>>>>
42137>>>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
42139>>>>>>>>>>>        Boolean bLoginSuccessful
42139>>>>>>>>>>>        String sDriverID
42139>>>>>>>>>>>
42139>>>>>>>>>>>        Get psDriverID to sDriverID
42140>>>>>>>>>>>        If (sDriverID = DATAFLEX_ID or sDriverID = "") Begin
42142>>>>>>>>>>>            Function_Return True
42143>>>>>>>>>>>        End
42143>>>>>>>>>>>>
42143>>>>>>>>>>>        Move 0 to LastErr  // Do NOT use the Err flag, it will be set true by the login command although it is successful.
42144>>>>>>>>>>>        If (bTrusted = False and sDatabase <> "") Begin
42146>>>>>>>>>>>            Move (SFormat("SERVER=%1;DATABASE=%2", sServer, sDatabase)) to sServer
42147>>>>>>>>>>>            Login sServer sUserId sPassword sDriverID  
42149>>>>>>>>>>>        End
42149>>>>>>>>>>>>
42149>>>>>>>>>>>        Else Begin
42150>>>>>>>>>>>            Login sConnectionString "" "" sDriverID
42152>>>>>>>>>>>        End
42152>>>>>>>>>>>>
42152>>>>>>>>>>>        Move (LastErr = 0) to bLoginSuccessful
42153>>>>>>>>>>>        Function_Return bLoginSuccessful
42154>>>>>>>>>>>    End_Function
42155>>>>>>>>>>>
42155>>>>>>>>>>>    Function SQLClientVersionInteger String sDriverID Returns Integer
42157>>>>>>>>>>>        Integer iNumberOfDrivers iCount iDriver iClientVersion
42157>>>>>>>>>>>        String sDriver
42157>>>>>>>>>>>        
42157>>>>>>>>>>>        Move 0 to iDriver
42158>>>>>>>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
42161>>>>>>>>>>>        If (iNumberOfDrivers = 1) Begin
42163>>>>>>>>>>>            Load_Driver sDriverID
42164>>>>>>>>>>>            Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
42167>>>>>>>>>>>        End
42167>>>>>>>>>>>>
42167>>>>>>>>>>>        For iCount from 1 to iNumberOfDrivers
42173>>>>>>>>>>>>
42173>>>>>>>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sDriver
42176>>>>>>>>>>>            If (Uppercase(sDriver) = Uppercase(sDriverID)) Begin
42178>>>>>>>>>>>                Move iCount to iDriver
42179>>>>>>>>>>>                Move iNumberOfDrivers to iCount // We're done.
42180>>>>>>>>>>>            End
42180>>>>>>>>>>>>
42180>>>>>>>>>>>        Loop
42181>>>>>>>>>>>>
42181>>>>>>>>>>>    
42181>>>>>>>>>>>        // This info is (at current) only available for the MS SQL driver:
42181>>>>>>>>>>>        If (iDriver <> 0 and sDriverID = MSSQLDRV_ID) Begin
42183>>>>>>>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
42186>>>>>>>>>>>        End
42186>>>>>>>>>>>>
42186>>>>>>>>>>>        Function_Return iClientVersion
42187>>>>>>>>>>>    End_Function
42188>>>>>>>>>>>    
42188>>>>>>>>>>>End_Class
42189>>>>>>>>>>>
42189>>>>>>>>>>>Class cDbUpdateMSSQLDriver is a cDbUpdateGenericDatabaseDriver
42190>>>>>>>>>>>    Function ServerKeyword String sServer Returns String
42192>>>>>>>>>>>        Function_Return CS_SQLIniServerKeyword
42193>>>>>>>>>>>    End_Function
42194>>>>>>>>>>>
42194>>>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
42196>>>>>>>>>>>        Integer iClientVersion
42196>>>>>>>>>>>        String sConnect
42196>>>>>>>>>>>        Boolean bLoginSuccessful
42196>>>>>>>>>>>        
42196>>>>>>>>>>>        Move (sConnect * "SERVER=" + sServer) to sConnect
42197>>>>>>>>>>>        If (sDatabase <> "") Begin
42199>>>>>>>>>>>            Move (sConnect * ";DATABASE=" + sDatabase) to sConnect
42200>>>>>>>>>>>        End
42200>>>>>>>>>>>>
42200>>>>>>>>>>>        If (bTrusted = True) Begin
42202>>>>>>>>>>>            Move (sConnect * ";TRUSTED_CONNECTION=Yes") to sConnect
42203>>>>>>>>>>>        End
42203>>>>>>>>>>>>
42203>>>>>>>>>>>        Else Begin
42204>>>>>>>>>>>            Move (sConnect * ";UID=" + sUserID * ";PWD=" + sPassword) to sConnect
42205>>>>>>>>>>>        End
42205>>>>>>>>>>>>
42205>>>>>>>>>>>
42205>>>>>>>>>>>        Get SQLClientVersionInteger MSSQLDRV_ID to iClientVersion
42206>>>>>>>>>>>        If (iClientVersion >= 18) Begin
42208>>>>>>>>>>>            Append sConnect ";Encrypt=Optional;TrustServerCertificate=Yes"
42209>>>>>>>>>>>            Move (Replaces(" ", sConnect, "")) to sConnect
42210>>>>>>>>>>>        End
42210>>>>>>>>>>>>
42210>>>>>>>>>>>        
42210>>>>>>>>>>>        Login sConnect "" "" MSSQLDRV_ID
42212>>>>>>>>>>>
42212>>>>>>>>>>>        Move (not(Err)) to bLoginSuccessful
42213>>>>>>>>>>>        Function_Return bLoginSuccessful
42214>>>>>>>>>>>    End_Function
42215>>>>>>>>>>>
42215>>>>>>>>>>>    Function SQLClientVersionInteger String sDriverID Returns Integer
42217>>>>>>>>>>>        Integer iNumberOfDrivers iCount iDriver iClientVersion
42217>>>>>>>>>>>        String sDriver
42217>>>>>>>>>>>        
42217>>>>>>>>>>>        Move 0 to iDriver
42218>>>>>>>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
42221>>>>>>>>>>>        If (iNumberOfDrivers = 1) Begin
42223>>>>>>>>>>>            Load_Driver sDriverID
42224>>>>>>>>>>>            Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
42227>>>>>>>>>>>        End
42227>>>>>>>>>>>>
42227>>>>>>>>>>>        For iCount from 1 to iNumberOfDrivers
42233>>>>>>>>>>>>
42233>>>>>>>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sDriver
42236>>>>>>>>>>>            If (Uppercase(sDriver) = Uppercase(sDriverID)) Begin
42238>>>>>>>>>>>                Move iCount to iDriver
42239>>>>>>>>>>>                Move iNumberOfDrivers to iCount // We're done.
42240>>>>>>>>>>>            End
42240>>>>>>>>>>>>
42240>>>>>>>>>>>        Loop
42241>>>>>>>>>>>>
42241>>>>>>>>>>>    
42241>>>>>>>>>>>        // This info is (at current) only available for the MS SQL driver:
42241>>>>>>>>>>>        If (iDriver <> 0 and sDriverID = MSSQLDRV_ID) Begin
42243>>>>>>>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
42246>>>>>>>>>>>        End
42246>>>>>>>>>>>>
42246>>>>>>>>>>>        Function_Return iClientVersion
42247>>>>>>>>>>>    End_Function
42248>>>>>>>>>>>    
42248>>>>>>>>>>>End_Class
42249>>>>>>>>>>>
42249>>>>>>>>>>>Class cDbUpdateODBCDriver is a cDbUpdateGenericDatabaseDriver
42250>>>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
42252>>>>>>>>>>>        Boolean bLoginSuccessful
42252>>>>>>>>>>>        String sDriverID
42252>>>>>>>>>>>
42252>>>>>>>>>>>        Get psDriverID to sDriverID
42253>>>>>>>>>>>        Move (Trim(sDriverID)) to sDriverID
42254>>>>>>>>>>>        If (sDriverID = DATAFLEX_ID or sDriverID = "") Begin
42256>>>>>>>>>>>            Function_Return True
42257>>>>>>>>>>>        End
42257>>>>>>>>>>>>
42257>>>>>>>>>>>        Move 0 to LastErr  // Do NOT use the Err flag, it will be set true by the login command although it is successful.
42258>>>>>>>>>>>        If (bTrusted = False) Begin
42260>>>>>>>>>>>            If (Uppercase(sServer) contains ("." + String(CS_SQLIniDSNKeyword))) Begin
42262>>>>>>>>>>>                Move (CS_SQLIniFileDSNKeyword + "=" + sServer) to sServer
42263>>>>>>>>>>>            End
42263>>>>>>>>>>>>
42263>>>>>>>>>>>            Else If (not(Uppercase(sServer) contains CS_SQLIniDSNKeyword)) Begin
42266>>>>>>>>>>>                Move (CS_SQLIniDSNKeyword + "=" + sServer) to sServer
42267>>>>>>>>>>>            End
42267>>>>>>>>>>>>
42267>>>>>>>>>>>            Login sServer sUserId sPassword sDriverID  
42269>>>>>>>>>>>        End
42269>>>>>>>>>>>>
42269>>>>>>>>>>>        Else Begin
42270>>>>>>>>>>>            Login sConnectionString "" "" sDriverID
42272>>>>>>>>>>>        End
42272>>>>>>>>>>>>
42272>>>>>>>>>>>        Move (LastErr = 0) to bLoginSuccessful
42273>>>>>>>>>>>
42273>>>>>>>>>>>        Function_Return bLoginSuccessful
42274>>>>>>>>>>>    End_Function
42275>>>>>>>>>>>End_Class
42276>>>>>>>>>>>
42276>>>>>>>>>>>Class cDbUpdateDB2Driver is a cDbUpdateGenericDatabaseDriver
42277>>>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
42279>>>>>>>>>>>        Boolean bLoginSuccessful
42279>>>>>>>>>>>        String sDriverID
42279>>>>>>>>>>>
42279>>>>>>>>>>>        Move False to Err
42280>>>>>>>>>>>        Get psDriverID to sDriverID
42281>>>>>>>>>>>        If (not(Uppercase(sServer) contains CS_SQLIniDSNKeyword)) Begin
42283>>>>>>>>>>>            Move (CS_SQLIniDSNKeyword + "=" + sServer) to sServer
42284>>>>>>>>>>>        End
42284>>>>>>>>>>>>
42284>>>>>>>>>>>        Login sServer sUserId sPassword sDriverID
42286>>>>>>>>>>>
42286>>>>>>>>>>>        Move (not(Err)) to bLoginSuccessful
42287>>>>>>>>>>>        Function_Return bLoginSuccessful
42288>>>>>>>>>>>    End_Function
42289>>>>>>>>>>>End_Class
42290>>>>>>>>>>>
42290>>>>>>>>>>>Class cDbUpdatePSQLDriver is a cDbUpdateGenericDatabaseDriver
42291>>>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
42293>>>>>>>>>>>        Boolean bLoginSuccessful
42293>>>>>>>>>>>        String sDriverID
42293>>>>>>>>>>>
42293>>>>>>>>>>>        Move False to Err
42294>>>>>>>>>>>        Get psDriverID to sDriverID
42295>>>>>>>>>>>//        If (not(Uppercase(sServer) contains CS_SQLIniDSNKeyword)) Begin
42295>>>>>>>>>>>//            Move (CS_SQLIniDSNKeyword + "=" + sServer) to sServer
42295>>>>>>>>>>>//        End
42295>>>>>>>>>>>        Login sServer sUserId sPassword sDriverID
42297>>>>>>>>>>>
42297>>>>>>>>>>>        Move (not(Err)) to bLoginSuccessful
42298>>>>>>>>>>>        Function_Return bLoginSuccessful
42299>>>>>>>>>>>    End_Function
42300>>>>>>>>>>>End_Class
42301>>>>>>>>>>>
42301>>>>>>>>>>>Class cDbUpdateDataFlexDriver is a cDbUpdateGenericDatabaseDriver
42302>>>>>>>>>>>    Function ConstructConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
42304>>>>>>>>>>>        Function_Return ""
42305>>>>>>>>>>>    End_Function
42306>>>>>>>>>>>End_Class
42307>>>>>>>>>>>
42307>>>>>>>>>>>Class cDbUpdateDatabaseDriver is a cObject
42308>>>>>>>>>>>    Procedure Construct_Object
42310>>>>>>>>>>>        Forward Send Construct_Object
42312>>>>>>>>>>>        Property String psDriverID DATAFLEX_ID
42313>>>>>>>>>>>        Property Handle phoDriverSpecificObject 
42314>>>>>>>>>>>    End_Procedure
42315>>>>>>>>>>>
42315>>>>>>>>>>>    Function CreateDriver Returns Handle
42317>>>>>>>>>>>        String sDriverID sObjectName
42317>>>>>>>>>>>        Handle hoDriver hcDriverClass
42317>>>>>>>>>>>
42317>>>>>>>>>>>        Get psDriverID to sDriverID
42318>>>>>>>>>>>        Case Begin
42318>>>>>>>>>>>            Case (sDriverID = MSSQLDRV_ID)
42320>>>>>>>>>>>                Move (RefClass(cDbUpdateMSSQLDriver))    to hcDriverClass
42321>>>>>>>>>>>                Move "oDbUpdateMSSQLDriver" to sObjectName
42322>>>>>>>>>>>                Case Break
42323>>>>>>>>>>>            Case (sDriverID = ODBC_DRV_ID)
42326>>>>>>>>>>>                Move (RefClass(cDbUpdateODBCDriver))     to hcDriverClass
42327>>>>>>>>>>>                Move "oDbUpdateODBCDriver" to sObjectName
42328>>>>>>>>>>>                Case Break
42329>>>>>>>>>>>            Case (sDriverID = DB2_DRV_ID)
42332>>>>>>>>>>>                Move (RefClass(cDbUpdateDB2Driver))      to hcDriverClass
42333>>>>>>>>>>>                Move "oDbUpdateDB2Driver" to sObjectName
42334>>>>>>>>>>>                Case Break               
42335>>>>>>>>>>>            Case Else
42335>>>>>>>>>>>                // DATAFLEX_ID = Default driver
42335>>>>>>>>>>>                Move (RefClass(cDbUpdateDataFlexDriver)) to hcDriverClass
42336>>>>>>>>>>>                Move "oDbUpdateDataFlexDriver" to sObjectName
42337>>>>>>>>>>>                Move DATAFLEX_ID to sDriverID
42338>>>>>>>>>>>        Case End
42338>>>>>>>>>>>
42338>>>>>>>>>>>        Get Create hcDriverClass to hoDriver
42339>>>>>>>>>>>        Set Name of hoDriver to sObjectName
42340>>>>>>>>>>>        Set psDriverID of hoDriver to sDriverID
42341>>>>>>>>>>>        Set phoDriverSpecificObject to hoDriver
42342>>>>>>>>>>>
42342>>>>>>>>>>>        Function_Return hoDriver
42343>>>>>>>>>>>    End_Function
42344>>>>>>>>>>>
42344>>>>>>>>>>>    Procedure DestroyDriver
42346>>>>>>>>>>>        If (phoDriverSpecificObject(Self)) Begin
42348>>>>>>>>>>>            Send Destroy of (phoDriverSpecificObject(Self))
42349>>>>>>>>>>>        End
42349>>>>>>>>>>>>
42349>>>>>>>>>>>    End_Procedure
42350>>>>>>>>>>>
42350>>>>>>>>>>>    Function ConstructConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
42352>>>>>>>>>>>        String sConnect
42352>>>>>>>>>>>        Handle hoDriver
42352>>>>>>>>>>>
42352>>>>>>>>>>>        Get phoDriverSpecificObject to hoDriver
42353>>>>>>>>>>>        If (hoDriver = 0) Begin
42355>>>>>>>>>>>            Get CreateDriver to hoDriver
42356>>>>>>>>>>>        End
42356>>>>>>>>>>>>
42356>>>>>>>>>>>        Get ConstructConnectionString of hoDriver sServer sDatabase bTrusted sUserID sPassword to sConnect
42357>>>>>>>>>>>        Send DestroyDriver
42358>>>>>>>>>>>        Function_Return sConnect
42359>>>>>>>>>>>    End_Function
42360>>>>>>>>>>>
42360>>>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
42362>>>>>>>>>>>        Boolean bLoginSuccessful
42362>>>>>>>>>>>        Handle hoDriver
42362>>>>>>>>>>>
42362>>>>>>>>>>>        Get phoDriverSpecificObject to hoDriver
42363>>>>>>>>>>>        If (hoDriver = 0) Begin
42365>>>>>>>>>>>            Get CreateDriver to hoDriver
42366>>>>>>>>>>>        End
42366>>>>>>>>>>>>
42366>>>>>>>>>>>        Get DbLogin of hoDriver sConnectionString sServer sDatabase bTrusted sUserID sPassword to bLoginSuccessful
42367>>>>>>>>>>>        Send DestroyDriver
42368>>>>>>>>>>>        Function_Return bLoginSuccessful
42369>>>>>>>>>>>    End_Function
42370>>>>>>>>>>>
42370>>>>>>>>>>>End_Class
42371>>>>>>>>>
42371>>>>>>>>>    Use cLoginEncryption.pkg
Including file: cLoginEncryption.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cLoginEncryption.pkg)
42371>>>>>>>>>>>Use cCryptographerEx.pkg
42371>>>>>>>>>>>
42371>>>>>>>>>>>Class cLoginEncryption is a cObject
42372>>>>>>>>>>>    
42372>>>>>>>>>>>    Procedure Construct_Object
42374>>>>>>>>>>>        Forward Send Construct_Object
42376>>>>>>>>>>>        // this must be set to a multi (40ish) character random key
42376>>>>>>>>>>>        Property String psEncryptPassword ""
42377>>>>>>>>>>>        
42377>>>>>>>>>>>        Object oDataCrypter is a cCryptographerEx
42379>>>>>>>>>>>            Set piHash to CALG_SHA_256
42380>>>>>>>>>>>            Set piCipher to CALG_AES_256
42381>>>>>>>>>>>            Set psProvider to "" //  Not providing a specific provider gives the default provider for the provider type
42382>>>>>>>>>>>            Set piProvider to PROV_RSA_AES
42383>>>>>>>>>>>        End_Object
42384>>>>>>>>>>>    End_Procedure
42385>>>>>>>>>>>    
42385>>>>>>>>>>>    // This can be augmented to return a password encryption key using any
42385>>>>>>>>>>>    // hidden mechanism desired.
42385>>>>>>>>>>>    Function GetEncryptionPassword Returns String
42387>>>>>>>>>>>        String sPassword
42387>>>>>>>>>>>        Get psEncryptPassword to sPassword
42388>>>>>>>>>>>        Function_Return sPassword
42389>>>>>>>>>>>    End_Function
42390>>>>>>>>>>>    
42390>>>>>>>>>>>    // Encrypts a string into an unreadable hash that can later be decrypted using DecryptKey.
42390>>>>>>>>>>>    //
42390>>>>>>>>>>>    // Params:
42390>>>>>>>>>>>    //   sPlainText     String to encrypt.
42390>>>>>>>>>>>    // Returns:
42390>>>>>>>>>>>    //   Base64 encoded hash.
42390>>>>>>>>>>>    Function EncryptPassword String sPlainText Returns String
42392>>>>>>>>>>>        String sEncryptPassword sBase64
42392>>>>>>>>>>>        UChar[] ucBinary
42393>>>>>>>>>>>        Pointer pBase64
42393>>>>>>>>>>>        Integer iVoid
42393>>>>>>>>>>>        
42393>>>>>>>>>>>        //  Encrypt Key
42393>>>>>>>>>>>        Get GetEncryptionPassword to sEncryptPassword
42394>>>>>>>>>>>        If (sEncryptPassword = "") Begin
42396>>>>>>>>>>>            Error DFERR_PROGRAM "No encryption password set"
42397>>>>>>>>>>>>
42397>>>>>>>>>>>        End
42397>>>>>>>>>>>>
42397>>>>>>>>>>>        
42397>>>>>>>>>>>        Get Encrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) (StringToUCharArray(sPlainText)) to ucBinary
42398>>>>>>>>>>>        
42398>>>>>>>>>>>        If (SizeOfArray(ucBinary) = 0) Begin
42400>>>>>>>>>>>            Error DFERR_PROGRAM "Unable to encrypt database login password"
42401>>>>>>>>>>>>
42401>>>>>>>>>>>            Function_Return ""
42402>>>>>>>>>>>        End
42402>>>>>>>>>>>>
42402>>>>>>>>>>>        
42402>>>>>>>>>>>        //  Encode binary hash to Base64
42402>>>>>>>>>>>        Move (Base64Encode(AddressOf(ucBinary), SizeOfArray(ucBinary))) to pBase64
42403>>>>>>>>>>>        Move (PointerToString(pBase64)) to sBase64
42404>>>>>>>>>>>        Move (Free(pBase64)) to iVoid
42405>>>>>>>>>>>        
42405>>>>>>>>>>>        Function_Return sBase64
42406>>>>>>>>>>>    End_Function
42407>>>>>>>>>>>    
42407>>>>>>>>>>>    
42407>>>>>>>>>>>    // Decrypts the unreadable hash generated by EncryptKey into a readable string.
42407>>>>>>>>>>>    //
42407>>>>>>>>>>>    // Params:
42407>>>>>>>>>>>    //   sBase64EncryptedPassword       Base64 Encrypted password
42407>>>>>>>>>>>    // Returns:
42407>>>>>>>>>>>    //   Readable plain text password
42407>>>>>>>>>>>    Function DecryptPassword String sBase64EncryptedPassword Returns String
42409>>>>>>>>>>>        String sEncryptPassword
42409>>>>>>>>>>>        UChar[] ucBinary ucPlain
42411>>>>>>>>>>>        Boolean bIsHex
42411>>>>>>>>>>>        Integer iLen iVoid
42411>>>>>>>>>>>        Pointer pBinary
42411>>>>>>>>>>>        
42411>>>>>>>>>>>        If (sBase64EncryptedPassword <> "") Begin
42413>>>>>>>>>>>            //  Decode from Base64
42413>>>>>>>>>>>            Move (Base64Decode(AddressOf(sBase64EncryptedPassword), &iLen)) to pBinary
42414>>>>>>>>>>>            
42414>>>>>>>>>>>            Move (ResizeArray(ucBinary, iLen, 0)) to ucBinary
42415>>>>>>>>>>>            Move (MemCopy(AddressOf(ucBinary), pBinary, iLen)) to iVoid
42416>>>>>>>>>>>                        
42416>>>>>>>>>>>            Move (Free(pBinary)) to iVoid
42417>>>>>>>>>>>            
42417>>>>>>>>>>>            //  Encrypted binary hash to string
42417>>>>>>>>>>>            Get GetEncryptionPassword to sEncryptPassword
42418>>>>>>>>>>>            Get Decrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) ucBinary to ucPlain
42419>>>>>>>>>>>        End
42419>>>>>>>>>>>>
42419>>>>>>>>>>>        
42419>>>>>>>>>>>        Function_Return (UCharArrayToString(ucPlain))
42420>>>>>>>>>>>    End_Function
42421>>>>>>>>>>>End_Class
42422>>>>>>>>>
42422>>>>>>>>>Class cSQLConnectionIniFile is a cIniFile
42423>>>>>>>>>    Procedure Construct_Object
42425>>>>>>>>>        Forward Send Construct_Object
42427>>>>>>>>>
42427>>>>>>>>>        Property String Private_psIniFilePath
42428>>>>>>>>>        Property String Private_psIniFileName CS_SQLIniFileName
42429>>>>>>>>>        Property String psIniSectionName (CS_SQLIniSectionName + "1")
42430>>>>>>>>>
42430>>>>>>>>>        Property Boolean pbDFConnId False
42431>>>>>>>>>
42431>>>>>>>>>        // *** You really want to change this value! ***
42431>>>>>>>>>        // It is used when encrypting/decrypting passwords.
42431>>>>>>>>>        Property String psHashString "zx!2139(LI0+?ips7433"
42432>>>>>>>>>
42432>>>>>>>>>    End_Procedure
42433>>>>>>>>>
42433>>>>>>>>>    Procedure End_Construct_Object
42435>>>>>>>>>        Forward Send End_Construct_Object
42437>>>>>>>>>    End_Procedure
42438>>>>>>>>>
42438>>>>>>>>>    Procedure Set psIniFilePath String sPath
42440>>>>>>>>>        String sIniFile
42440>>>>>>>>>        Get vFolderFormat sPath to sPath
42441>>>>>>>>>        Set private_psIniFilePath to sPath
42442>>>>>>>>>        Get psIniFileName to sIniFile
42443>>>>>>>>>        Set psFileName to (sPath + sIniFile)
42444>>>>>>>>>    End_Procedure
42445>>>>>>>>>
42445>>>>>>>>>    Function psIniFilePath Returns String
42447>>>>>>>>>        Function_Return (private_psIniFilePath(Self))
42448>>>>>>>>>    End_Function
42449>>>>>>>>>
42449>>>>>>>>>    Procedure Set psIniFileName String sFileName
42451>>>>>>>>>        String sPath
42451>>>>>>>>>        Get psIniFilePath to sPath
42452>>>>>>>>>        Set psFileName to (sPath + sFileName)
42453>>>>>>>>>        Set private_psIniFileName to sFileName
42454>>>>>>>>>    End_Procedure
42455>>>>>>>>>
42455>>>>>>>>>    Function psIniFileName Returns String
42457>>>>>>>>>        Function_Return (private_psIniFileName(Self))
42458>>>>>>>>>    End_Function
42459>>>>>>>>>
42459>>>>>>>>>    // *** Generalized messages to Get & Set values of the ini file.
42459>>>>>>>>>    // Sets a value in the program's ini file (write)
42459>>>>>>>>>    // Pass a section name, the value name parameter and the value itself to be written.
42459>>>>>>>>>    Procedure Set IniFileValue String sSection String sValueName String sValue
42461>>>>>>>>>        String sIniFile sPath
42461>>>>>>>>>
42461>>>>>>>>>        Get psIniFilePath to sPath
42462>>>>>>>>>        Get psIniFileName to sIniFile
42463>>>>>>>>>        Move (sPath + sIniFile) to sIniFile
42464>>>>>>>>>        Set psFileName to sIniFile
42465>>>>>>>>>        Send WriteString sSection sValueName sValue
42466>>>>>>>>>    End_Procedure
42467>>>>>>>>>
42467>>>>>>>>>    // Get a value from program's ini-file (read)
42467>>>>>>>>>    // Pass a section name and the name of the value parameter & a default value.
42467>>>>>>>>>    // Returns the value
42467>>>>>>>>>    Function IniFileValue String sSection String sValueName String sDefaultValue Returns String
42469>>>>>>>>>        String sValue sIniFile sPath
42469>>>>>>>>>
42469>>>>>>>>>        Get psIniFilePath to sPath
42470>>>>>>>>>        Get psIniFileName to sIniFile
42471>>>>>>>>>        Move (sPath + sIniFile) to sIniFile
42472>>>>>>>>>        Set psFileName to sIniFile
42473>>>>>>>>>        Get ReadString sSection sValueName sDefaultValue to sValue
42474>>>>>>>>>
42474>>>>>>>>>        Function_Return sValue
42475>>>>>>>>>    End_Function
42476>>>>>>>>>
42476>>>>>>>>>    // Sort function that first sorts on bEnabled & then on the connection string.
42476>>>>>>>>>    Function SortActiveFirst tSQLConnection SQLConnectionRow1 tSQLConnection SQLConnectionRow2 Returns Integer
42478>>>>>>>>>        If (SQLConnectionRow1.bEnabled > SQLConnectionRow2.bEnabled) ;            Function_Return (LT)
42481>>>>>>>>>        If (SQLConnectionRow1.bEnabled < SQLConnectionRow2.bEnabled) ;            Function_Return (GT)
42484>>>>>>>>>
42484>>>>>>>>>        If (SQLConnectionRow1.sConnectionID < SQLConnectionRow2.sConnectionID) ;            Function_Return (LT)
42487>>>>>>>>>        If (SQLConnectionRow1.sConnectionID > SQLConnectionRow2.sConnectionID) ;            Function_Return (GT)
42490>>>>>>>>>
42490>>>>>>>>>        If (SQLConnectionRow1.iDbType < SQLConnectionRow2.iDbType) ;            Function_Return (LT)
42493>>>>>>>>>        If (SQLConnectionRow1.iDbType > SQLConnectionRow2.iDbType) ;            Function_Return (GT)
42496>>>>>>>>>
42496>>>>>>>>>        If (SQLConnectionRow1.sServer < SQLConnectionRow2.sServer) ;            Function_Return (LT)
42499>>>>>>>>>        If (SQLConnectionRow1.sServer > SQLConnectionRow2.sServer) ;            Function_Return (GT)
42502>>>>>>>>>
42502>>>>>>>>>        If (SQLConnectionRow1.sDatabase < SQLConnectionRow2.sDatabase) ;            Function_Return (LT)
42505>>>>>>>>>        If (SQLConnectionRow1.sDatabase > SQLConnectionRow2.sDatabase) ;            Function_Return (GT)
42508>>>>>>>>>
42508>>>>>>>>>        If (SQLConnectionRow1.sDriverID < SQLConnectionRow2.sDriverID) ;            Function_Return (LT)
42511>>>>>>>>>        If (SQLConnectionRow1.sDriverID > SQLConnectionRow2.sDriverID) ;            Function_Return (GT)
42514>>>>>>>>>
42514>>>>>>>>>        If (SQLConnectionRow1.sConnectionString < SQLConnectionRow2.sConnectionString) ;            Function_Return (LT)
42517>>>>>>>>>        If (SQLConnectionRow1.sConnectionString > SQLConnectionRow2.sConnectionString) ;            Function_Return (GT)
42520>>>>>>>>>
42520>>>>>>>>>        Function_Return (EQ)
42521>>>>>>>>>    End_Function
42522>>>>>>>>>
42522>>>>>>>>>    Function SQLIniFileNumberOfConnections Returns Integer
42524>>>>>>>>>        Handle hoSections
42524>>>>>>>>>        Integer iItems
42524>>>>>>>>>
42524>>>>>>>>>        Send ReadSections hoSections
42525>>>>>>>>>        Move (Item_Count(hoSections)) to iItems
42526>>>>>>>>>        Function_Return iItems
42527>>>>>>>>>    End_Function
42528>>>>>>>>>
42528>>>>>>>>>    // The normal connection string looks something like this;
42528>>>>>>>>>    // "SERVER=.\SQLEXPRESS; DATABASE=OrderEntry; TRUSTED_CONNECTION=Yes; ,0"
42528>>>>>>>>>    // ...but the full connection string looks like this;
42528>>>>>>>>>    // "DFConnectionId OrderEntry, SERVER=.\SQLEXPRESS; DATABASE=OrderEntry; TRUSTED_CONNECTION=Yes; ,0"
42528>>>>>>>>>//    Function SQLIniFileAddConnection String sFullConnectionString Returns Boolean
42528>>>>>>>>>//        String sSection
42528>>>>>>>>>//        Integer iCount
42528>>>>>>>>>//
42528>>>>>>>>>//        Move False to Err
42528>>>>>>>>>//        Get psIniSectionName to sSection
42528>>>>>>>>>//        Get SQLIniFileNumberOfConnections to iCount
42528>>>>>>>>>//        Increment iCount
42528>>>>>>>>>//        Set IniFileValue sSection (CS_SQLIniSectionName + String(iCount)) to sFullConnectionString
42528>>>>>>>>>//
42528>>>>>>>>>//        Function_Return (Err = False)
42528>>>>>>>>>//    End_Function
42528>>>>>>>>>
42528>>>>>>>>>    Function SQLIniFileDeleteAllConnections Returns Boolean
42530>>>>>>>>>        Integer iCount
42530>>>>>>>>>        Boolean bExists
42530>>>>>>>>>        String sSection
42530>>>>>>>>>
42530>>>>>>>>>        Move False to Err
42531>>>>>>>>>        Move 1 to iCount
42532>>>>>>>>>        Get psIniSectionName to sSection
42533>>>>>>>>>        Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists
42534>>>>>>>>>        While (bExists = True)
42538>>>>>>>>>            Send DeleteSection (CS_SQLIniSectionName + String(iCount))
42539>>>>>>>>>            Increment iCount
42540>>>>>>>>>            Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists
42541>>>>>>>>>        Loop
42542>>>>>>>>>>
42542>>>>>>>>>        Function_Return (Err = False)
42543>>>>>>>>>    End_Function
42544>>>>>>>>>
42544>>>>>>>>>    Function SQLIniFileDeleteConnection Integer iItem Returns Boolean
42546>>>>>>>>>        Integer iCount
42546>>>>>>>>>        String sSection
42546>>>>>>>>>        Boolean bExists
42546>>>>>>>>>
42546>>>>>>>>>        Move False to Err
42547>>>>>>>>>        Move 1 to iCount
42548>>>>>>>>>        Get psIniSectionName to sSection
42549>>>>>>>>>        Get KeyExists sSection CS_SQLIniConnectionIdKeyword to bExists
42550>>>>>>>>>        While (bExists = True)
42554>>>>>>>>>            If (iCount = iItem) Begin
42556>>>>>>>>>                Send DeleteSection sSection
42557>>>>>>>>>//                Set IniFileValue sSection (CS_SQLIniSectionName + String(iCount)) to ""
42557>>>>>>>>>                Move 9999 to iCount // Just some ridiculously high number to get out of the loop as we're done.
42558>>>>>>>>>            End
42558>>>>>>>>>>
42558>>>>>>>>>            Increment iCount
42559>>>>>>>>>            Get KeyExists sSection (CS_SQLIniSectionName + String(iCount)) to bExists
42560>>>>>>>>>        Loop
42561>>>>>>>>>>
42561>>>>>>>>>
42561>>>>>>>>>        Function_Return (Err = False)
42562>>>>>>>>>    End_Function
42563>>>>>>>>>
42563>>>>>>>>>    // Returns all connection details for the passed Connection ID as a tSQLConnection
42563>>>>>>>>>    // If it fails the returned struct member SQLConnection.bError = True.
42563>>>>>>>>>    Function SQLIniFileConnectionID String sConnectionID Returns tSQLConnection
42565>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42565>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42566>>>>>>>>>        tSQLConnection   SQLConnection
42566>>>>>>>>>        tSQLConnection   SQLConnection
42566>>>>>>>>>        Integer iIndex
42566>>>>>>>>>
42566>>>>>>>>>        Get SQLIniFileConnectionIDIndex sConnectionID to iIndex
42567>>>>>>>>>        If (iIndex = -1) Begin
42569>>>>>>>>>            Move True to SQLConnection.bError
42570>>>>>>>>>            Function_Return SQLConnection
42571>>>>>>>>>        End
42571>>>>>>>>>>
42571>>>>>>>>>
42571>>>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42572>>>>>>>>>        Move SQLConnectionsArray[iIndex -1] to SQLConnection
42573>>>>>>>>>
42573>>>>>>>>>        Function_Return SQLConnection
42574>>>>>>>>>    End_Function
42575>>>>>>>>>
42575>>>>>>>>>    // Returns -1 if the passed connection ID was not found, else the item number.
42575>>>>>>>>>    Function SQLIniFileConnectionIDIndex String sConnectionID Returns Integer
42577>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42577>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42578>>>>>>>>>        Integer iRetval iCount iSize
42578>>>>>>>>>        String sValue
42578>>>>>>>>>        Boolean bExists
42578>>>>>>>>>
42578>>>>>>>>>        Move -1 to iRetval
42579>>>>>>>>>
42579>>>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42580>>>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42581>>>>>>>>>        Decrement iSize
42582>>>>>>>>>        For iCount from 0 to iSize
42588>>>>>>>>>>
42588>>>>>>>>>            Move SQLConnectionsArray[iCount].sConnectionID to sValue
42589>>>>>>>>>            Move (Uppercase(sValue) = Uppercase(sConnectionID)) to bExists
42590>>>>>>>>>            If (bExists) Begin
42592>>>>>>>>>                Move (iCount + 1) to iRetval // The [ConnectionX] keys are one-based (starts at 1) but the loop starts at zero.
42593>>>>>>>>>                Move iSize to iCount         // We're done!
42594>>>>>>>>>            End
42594>>>>>>>>>>
42594>>>>>>>>>        Loop
42595>>>>>>>>>>
42595>>>>>>>>>
42595>>>>>>>>>        Function_Return iRetval
42596>>>>>>>>>    End_Function
42597>>>>>>>>>
42597>>>>>>>>>    // Checks if the passed sConnectionID exists more than once in the passed struct array.
42597>>>>>>>>>    // Used to check that ConnectionID's are unique.
42597>>>>>>>>>    Function IsConnectionIDDuplicate String sConnectionID Returns Boolean
42599>>>>>>>>>        Integer iCount iSize iItems
42599>>>>>>>>>        String sValue
42599>>>>>>>>>        Boolean bExists
42599>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42599>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42600>>>>>>>>>
42600>>>>>>>>>        Move 0 to iItems
42601>>>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42602>>>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42603>>>>>>>>>        Decrement iSize
42604>>>>>>>>>        For iCount from 0 to iSize
42610>>>>>>>>>>
42610>>>>>>>>>            Move SQLConnectionsArray[iCount].sConnectionID to sValue
42611>>>>>>>>>            Move (sValue = sConnectionID) to bExists
42612>>>>>>>>>            If (bExists) Begin
42614>>>>>>>>>                Increment iItems
42615>>>>>>>>>            End
42615>>>>>>>>>>
42615>>>>>>>>>        Loop
42616>>>>>>>>>>
42616>>>>>>>>>
42616>>>>>>>>>        Function_Return (iItems > 1)
42617>>>>>>>>>    End_Function
42618>>>>>>>>>
42618>>>>>>>>>    // To update the SQLConnections.ini file with a new default Connection ID.
42618>>>>>>>>>    Function SQLIniFileSetDefaultConnection String sConnectionID Returns Boolean
42620>>>>>>>>>        Boolean bOK
42620>>>>>>>>>        Integer iSize iCount
42620>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42620>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42621>>>>>>>>>        tSQLConnection SQLConnection
42621>>>>>>>>>        tSQLConnection SQLConnection
42621>>>>>>>>>        String sConnectionString
42621>>>>>>>>>
42621>>>>>>>>>        Move False to Err
42622>>>>>>>>>        Get psConnectionString to sConnectionString
42623>>>>>>>>>
42623>>>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42624>>>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42625>>>>>>>>>        Decrement iSize
42626>>>>>>>>>        // Set all current connection to inactive.
42626>>>>>>>>>        For iCount from 0 to iSize
42632>>>>>>>>>>
42632>>>>>>>>>            Move False to SQLConnectionsArray[iCount].bEnabled
42633>>>>>>>>>        Loop
42634>>>>>>>>>>
42634>>>>>>>>>
42634>>>>>>>>>        Get SQLIniFileConnectionID sConnectionID to SQLConnection
42635>>>>>>>>>        Move True              to SQLConnection.bEnabled
42636>>>>>>>>>        Move sConnectionString to SQLConnection.sConnectionString
42637>>>>>>>>>        Move (InsertInArray(SQLConnectionsArray, 0, SQLConnection)) to SQLConnectionsArray
42638>>>>>>>>>        Get SQLIniFileWriteConnections SQLConnectionsArray to bOK
42639>>>>>>>>>
42639>>>>>>>>>        Function_Return (bOK = True)
42640>>>>>>>>>    End_Function
42641>>>>>>>>>
42641>>>>>>>>>    // Used for updating an existing connection with new data.
42641>>>>>>>>>    // Returns True if successful.
42641>>>>>>>>>    Function SQLIniFileUpdateConnection tSQLConnection SQLConnection Returns Boolean
42643>>>>>>>>>        Boolean bOK
42643>>>>>>>>>        Integer iItem iSize iCount
42643>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42643>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42644>>>>>>>>>
42644>>>>>>>>>        Move False to Err
42645>>>>>>>>>        Move -1 to iItem
42646>>>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42647>>>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42648>>>>>>>>>        Decrement iSize
42649>>>>>>>>>        // Set all current connection to inactive.
42649>>>>>>>>>        For iCount from 0 to iSize
42655>>>>>>>>>>
42655>>>>>>>>>            Move False to SQLConnectionsArray[iCount].bEnabled
42656>>>>>>>>>            If (SQLConnectionsArray[iCount].sConnectionID = SQLConnection.sConnectionID) Begin
42658>>>>>>>>>                Move iCount to iItem
42659>>>>>>>>>            End
42659>>>>>>>>>>
42659>>>>>>>>>        Loop
42660>>>>>>>>>>
42660>>>>>>>>>
42660>>>>>>>>>        If (iItem <> -1) Begin
42662>>>>>>>>>            Move True to SQLConnection.bEnabled
42663>>>>>>>>>            Move SQLConnection to SQLConnectionsArray[iItem]
42664>>>>>>>>>            Get SQLIniFileWriteConnections SQLConnectionsArray to bOK
42665>>>>>>>>>        End
42665>>>>>>>>>>
42665>>>>>>>>>
42665>>>>>>>>>        Function_Return (bOK = True)
42666>>>>>>>>>    End_Function
42667>>>>>>>>>
42667>>>>>>>>>    Function SQLIniFileReadConnections Returns tSQLConnection[]
42669>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42669>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42670>>>>>>>>>        String sSection sValue
42670>>>>>>>>>        Integer iCount
42670>>>>>>>>>        Boolean bExists
42670>>>>>>>>>
42670>>>>>>>>>        Get psIniSectionName to sSection
42671>>>>>>>>>        Get SectionExists sSection to bExists
42672>>>>>>>>>        If (bExists = False) Begin
42674>>>>>>>>>            Function_Return SQLConnectionsArray
42675>>>>>>>>>        End
42675>>>>>>>>>>
42675>>>>>>>>>        Get SectionExists CS_SQLIniConnectionSection to bExists
42676>>>>>>>>>        If (bExists = True) Begin
42678>>>>>>>>>            Error DFERR_PROGRAM "Sorry, the format for the SQLConnections.ini file has been changed and this file has the old format that is no longer valid and thus cannot be read. You need to re-enter your connection(s)."
42679>>>>>>>>>>
42679>>>>>>>>>        End
42679>>>>>>>>>>
42679>>>>>>>>>
42679>>>>>>>>>        Move 1 to iCount // The section name "[ConnectionXX]" starts with "1"
42680>>>>>>>>>        Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists
42681>>>>>>>>>
42681>>>>>>>>>        While (bExists = True)                 
42685>>>>>>>>>            // 2018-07-14 Change to allow disabling all connections in test environment.
42685>>>>>>>>>            // We always put the enabled/active connection at the top
42685>>>>>>>>>//            Move (iCount = 1) to bEnabled
42685>>>>>>>>>//            Move bEnabled to SQLConnectionsArray[iCount].bEnabled
42685>>>>>>>>>
42685>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniConnectionIdKeyword ""        to SQLConnectionsArray[iCount].sConnectionID
42686>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDriverKeyword       ""        to SQLConnectionsArray[iCount].sDriverID
42687>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDisabledKeyword     ""        to sValue
42688>>>>>>>>>            Move (If(Uppercase(sValue) = "YES", False, True))                                               to SQLConnectionsArray[iCount].bEnabled
42689>>>>>>>>>
42689>>>>>>>>>            // The iDbType might be missing from the ini-file. This is e.g. the case when a DAW Managed Connection "DFConnId.ini" file is read.
42689>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDbTypeKeyword       "99"      to sValue
42690>>>>>>>>>            If (sValue = "99") Begin
42692>>>>>>>>>                Get SqlUtilDbTypeFromDriver SQLConnectionsArray[iCount].sDriverID to sValue
42693>>>>>>>>>            End
42693>>>>>>>>>>
42693>>>>>>>>>            Move sValue                                                                                     to SQLConnectionsArray[iCount].iDbType
42694>>>>>>>>>
42694>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniConnectionKeyWord   ""        to SQLConnectionsArray[iCount].sConnectionString
42695>>>>>>>>>            Get ParseKeyWord SQLConnectionsArray[iCount].sConnectionString (CS_SQLIniServerKeyword + "=")   to SQLConnectionsArray[iCount].sServer
42696>>>>>>>>>            If (SQLConnectionsArray[iCount].sServer = "") Begin
42698>>>>>>>>>                Get ParseKeyWord SQLConnectionsArray[iCount].sConnectionString (CS_SQLIniFileDSNKeyword +"=") to SQLConnectionsArray[iCount].sServer
42699>>>>>>>>>            End
42699>>>>>>>>>>
42699>>>>>>>>>            If (SQLConnectionsArray[iCount].sServer = "") Begin
42701>>>>>>>>>                Get ParseKeyWord SQLConnectionsArray[iCount].sConnectionString (CS_SQLIniDSNKeyword +"=")   to SQLConnectionsArray[iCount].sServer
42702>>>>>>>>>            End
42702>>>>>>>>>>
42702>>>>>>>>>
42702>>>>>>>>>            Get ParseKeyWord SQLConnectionsArray[iCount].sConnectionString (CS_SQLIniDatabaseKeyword + "=") to SQLConnectionsArray[iCount].sDatabase
42703>>>>>>>>>
42703>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniTrustedKeyword      ""        to sValue
42704>>>>>>>>>            Move (If(Uppercase(sValue) = "YES", True, False))                                               to SQLConnectionsArray[iCount].bTrusted
42705>>>>>>>>>
42705>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniUIDKeyword          ""        to SQLConnectionsArray[iCount].sUserID
42706>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDFPWDKeyword        ""        to sValue
42707>>>>>>>>>            If (pbDFConnId(Self) = False and sValue <> "") Begin
42709>>>>>>>>>                Get DecryptPassword sValue to sValue
42710>>>>>>>>>            End
42710>>>>>>>>>>
42710>>>>>>>>>            Move sValue                                                                                     to SQLConnectionsArray[iCount].sPassword
42711>>>>>>>>>
42711>>>>>>>>>            // Here we reconstruct the connection string to be complete with all params;
42711>>>>>>>>>            Get ConstructConnectionString SQLConnectionsArray[iCount].sDriverID SQLConnectionsArray[iCount].sServer SQLConnectionsArray[iCount].sDatabase ;                                          SQLConnectionsArray[iCount].bTrusted SQLConnectionsArray[iCount].sUserID SQLConnectionsArray[iCount].sPassword ;                                          to SQLConnectionsArray[iCount].sConnectionString
42712>>>>>>>>>
42712>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniSchemaKeyword          ""     to SQLConnectionsArray[iCount].sSchema
42713>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniBaseTableSpaceKeyword  ""     to SQLConnectionsArray[iCount].sBaseTableSpace
42714>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniLongTableSpaceKeyword  ""     to SQLConnectionsArray[iCount].sLongTableSpace
42715>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniIndexTableSpaceKeyword ""     to SQLConnectionsArray[iCount].sIndexTableSpace
42716>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniSilentLoginKeyword     ""     to sValue
42717>>>>>>>>>            Move (If(Uppercase(sValue) = "YES", True, False))                                               to SQLConnectionsArray[iCount].bSilentLogin
42718>>>>>>>>>
42718>>>>>>>>>            Increment iCount
42719>>>>>>>>>            Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists
42720>>>>>>>>>        Loop
42721>>>>>>>>>>
42721>>>>>>>>>
42721>>>>>>>>>        // Lastly, we remove the very first array item as it is empty (we started at 1 because that is the first [Connection#])
42721>>>>>>>>>        If (SizeOfArray(SQLConnectionsArray) > 0) Begin
42723>>>>>>>>>            Move (RemoveFromArray(SQLConnectionsArray, 0)) to SQLConnectionsArray
42724>>>>>>>>>        End
42724>>>>>>>>>>
42724>>>>>>>>>
42724>>>>>>>>>        Function_Return SQLConnectionsArray
42725>>>>>>>>>    End_Function
42726>>>>>>>>>
42726>>>>>>>>>    Function SQLIniFileWriteConnections tSQLConnection[] SQLConnectionsArray Returns Boolean
42728>>>>>>>>>        Integer iCount iSize
42728>>>>>>>>>        Boolean bOK
42728>>>>>>>>>        String sSection sValue
42728>>>>>>>>>
42728>>>>>>>>>        // First we need to _remove_ all current connections from the ini-file.
42728>>>>>>>>>        Move 0 to iCount
42729>>>>>>>>>        Get SQLIniFileDeleteAllConnections to bOK
42730>>>>>>>>>        If (bOK = False) Begin
42732>>>>>>>>>            Function_Return False
42733>>>>>>>>>        End
42733>>>>>>>>>>
42733>>>>>>>>>
42733>>>>>>>>>        Move False to Err
42734>>>>>>>>>        Get psIniSectionName to sSection
42735>>>>>>>>>        // Sorting will make sure we have the active connection record as the first connection item in the ini-file.
42735>>>>>>>>>        Move (SortArray(SQLConnectionsArray, Self, (RefFunc(SortActiveFirst)))) to SQLConnectionsArray
42736>>>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42737>>>>>>>>>        Decrement iSize
42738>>>>>>>>>
42738>>>>>>>>>        For iCount from 0 to iSize
42744>>>>>>>>>>
42744>>>>>>>>>            // DF 19 compatible settings:
42744>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniConnectionIdKeyword   to SQLConnectionsArray[iCount].sConnectionID
42745>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniDriverKeyword         to SQLConnectionsArray[iCount].sDriverID
42746>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniDisabledKeyword       to (If(SQLConnectionsArray[iCount].bEnabled = 0, "Yes", "No"))
42747>>>>>>>>>            
42747>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniUIDKeyword            to SQLConnectionsArray[iCount].sUserID
42748>>>>>>>>>
42748>>>>>>>>>            Move SQLConnectionsArray[iCount].sPassword to sValue
42749>>>>>>>>>            If (pbDFConnId(Self) = False and sValue <> "") Begin
42751>>>>>>>>>                Get EncryptPassword sValue to sValue
42752>>>>>>>>>            End
42752>>>>>>>>>>
42752>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniDFPWDKeyword          to sValue
42753>>>>>>>>>
42753>>>>>>>>>            If (SQLConnectionsArray[iCount].bTrusted = True) Begin
42755>>>>>>>>>                Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniTrustedKeyword    to CS_SQLIniConnectionYes
42756>>>>>>>>>            End
42756>>>>>>>>>>
42756>>>>>>>>>
42756>>>>>>>>>            Get ConstructShortConnectionString SQLConnectionsArray[iCount].sDriverID SQLConnectionsArray[iCount].sServer SQLConnectionsArray[iCount].sDatabase ;                                            to SQLConnectionsArray[iCount].sConnectionString
42757>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniConnectionKeyWord     to SQLConnectionsArray[iCount].sConnectionString
42758>>>>>>>>>
42758>>>>>>>>>            // The Database Update Framework extended settings:
42758>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniDbTypeKeyword          to SQLConnectionsArray[iCount].iDbType
42759>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniSchemaKeyword          to SQLConnectionsArray[iCount].sSchema
42760>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniBaseTableSpaceKeyword  to SQLConnectionsArray[iCount].sBaseTableSpace
42761>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniLongTableSpaceKeyword  to SQLConnectionsArray[iCount].sLongTableSpace
42762>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniIndexTableSpaceKeyword to SQLConnectionsArray[iCount].sIndexTableSpace
42763>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniSilentLoginKeyword     to (If(SQLConnectionsArray[iCount].bSilentLogin = 1, "Yes", "No"))
42764>>>>>>>>>        Loop
42765>>>>>>>>>>
42765>>>>>>>>>
42765>>>>>>>>>        Function_Return (bOK and Err = False)
42766>>>>>>>>>    End_Function
42767>>>>>>>>>
42767>>>>>>>>>    // *** DbType conversion routines - Converts between string/integer and driver ID values ***
42767>>>>>>>>>    //
42767>>>>>>>>>    // SQL utility function that returns a database type (string) constant
42767>>>>>>>>>    // corresponding to the passed iDbType.
42767>>>>>>>>>    Function SqlUtilDbTypeToString Integer iDbType Returns String
42769>>>>>>>>>        String sRetval
42769>>>>>>>>>        If (iDbType = EN_dbTypeMSSQL) Begin
42771>>>>>>>>>            Move CS_dbTypeMSSQL to sRetval
42772>>>>>>>>>        End
42772>>>>>>>>>>
42772>>>>>>>>>        If (iDbType = EN_dbTypeMySQL) Begin
42774>>>>>>>>>            Move CS_dbTypeMySQL to sRetval
42775>>>>>>>>>        End
42775>>>>>>>>>>
42775>>>>>>>>>        If (iDbType = EN_dbTypeOracle) Begin
42777>>>>>>>>>            Move CS_dbTypeOracle to sRetval
42778>>>>>>>>>        End
42778>>>>>>>>>>
42778>>>>>>>>>        If (iDbType = EN_dbTypeDB2) Begin
42780>>>>>>>>>            Move CS_dbTypeDB2 to sRetval
42781>>>>>>>>>        End
42781>>>>>>>>>>
42781>>>>>>>>>        If (iDbType = EN_dbTypePostgre) Begin
42783>>>>>>>>>            Move CS_dbTypePostgre to sRetval
42784>>>>>>>>>        End
42784>>>>>>>>>>
42784>>>>>>>>>        If (iDbType = EN_DbTypePervasive) Begin
42786>>>>>>>>>            Move CS_DbTypePervasive to sRetval
42787>>>>>>>>>        End
42787>>>>>>>>>>
42787>>>>>>>>>        Function_Return sRetval
42788>>>>>>>>>    End_Function
42789>>>>>>>>>
42789>>>>>>>>>    // SQL utility function that returns a database type constant (integer)
42789>>>>>>>>>    // corresponding to the passed sDbType string constant.
42789>>>>>>>>>    Function SqlUtilDbTypeToInteger String sDbType  Returns Integer
42791>>>>>>>>>        Integer iRetval
42791>>>>>>>>>        If (sDbType = CS_DbTypeDataFlex) Begin
42793>>>>>>>>>            Move EN_DbTypeDataFlex to iRetval
42794>>>>>>>>>        End
42794>>>>>>>>>>
42794>>>>>>>>>        If (sDbType = CS_dbTypeMSSQL) Begin
42796>>>>>>>>>            Move EN_dbTypeMSSQL to iRetval
42797>>>>>>>>>        End
42797>>>>>>>>>>
42797>>>>>>>>>        If (sDbType = CS_dbTypeMySQL) Begin
42799>>>>>>>>>            Move EN_dbTypeMySQL to iRetval
42800>>>>>>>>>        End
42800>>>>>>>>>>
42800>>>>>>>>>        If (sDbType = CS_dbTypeOracle) Begin
42802>>>>>>>>>            Move EN_dbTypeOracle to iRetval
42803>>>>>>>>>        End
42803>>>>>>>>>>
42803>>>>>>>>>        If (sDbType = CS_dbTypeDB2) Begin
42805>>>>>>>>>            Move EN_dbTypeDB2 to iRetval
42806>>>>>>>>>        End
42806>>>>>>>>>>
42806>>>>>>>>>        If (sDbType = CS_dbTypePostgre) Begin
42808>>>>>>>>>            Move EN_dbTypePostgre to iRetval
42809>>>>>>>>>        End
42809>>>>>>>>>>
42809>>>>>>>>>        If (sDbType = CS_DbTypePervasive) Begin
42811>>>>>>>>>            Move EN_DbTypePervasive to iRetval
42812>>>>>>>>>        End
42812>>>>>>>>>>
42812>>>>>>>>>        Function_Return iRetval
42813>>>>>>>>>    End_Function
42814>>>>>>>>>
42814>>>>>>>>>    // Pass an integer DbType and function returns the database type integer as a string value.
42814>>>>>>>>>    // Used e.g. when reading a connection ini-file to display the database type in
42814>>>>>>>>>    // the SQL Connection program's grid.
42814>>>>>>>>>    Function SqlUtilDbTypeIntegerToStringConstant Integer iDbType Returns String
42816>>>>>>>>>        String sRetval
42816>>>>>>>>>        If (iDbType = EN_dbTypeMSSQL) Begin
42818>>>>>>>>>            Move "EN_dbTypeMSSQL" to sRetval
42819>>>>>>>>>        End
42819>>>>>>>>>>
42819>>>>>>>>>        If (iDbType = EN_dbTypeMySQL) Begin
42821>>>>>>>>>            Move "EN_dbTypeMySQL" to sRetval
42822>>>>>>>>>        End
42822>>>>>>>>>>
42822>>>>>>>>>        If (iDbType = EN_dbTypeOracle) Begin
42824>>>>>>>>>            Move "EN_dbTypeOracle" to sRetval
42825>>>>>>>>>        End
42825>>>>>>>>>>
42825>>>>>>>>>        If (iDbType = EN_dbTypeDB2) Begin
42827>>>>>>>>>            Move "EN_dbTypeDB2" to sRetval
42828>>>>>>>>>        End
42828>>>>>>>>>>
42828>>>>>>>>>        If (iDbType = EN_dbTypePostgre) Begin
42830>>>>>>>>>            Move "EN_dbTypePostgre" to sRetval
42831>>>>>>>>>        End
42831>>>>>>>>>>
42831>>>>>>>>>        If (iDbType = EN_DbTypePervasive) Begin
42833>>>>>>>>>            Move "EN_dbTypePervasive" to sRetval
42834>>>>>>>>>        End
42834>>>>>>>>>>
42834>>>>>>>>>        Function_Return sRetval
42835>>>>>>>>>    End_Function
42836>>>>>>>>>
42836>>>>>>>>>    // Pass a driver id and the function will return
42836>>>>>>>>>    // a dbType as an integer. Obviously for the ODBC_DRV this doesn't
42836>>>>>>>>>    // quite work and always returns "MS SQL Server"
42836>>>>>>>>>    Function SqlUtilDbTypeFromDriver String sDriverID Returns Integer
42838>>>>>>>>>        Integer iRetval
42838>>>>>>>>>        If (sDriverID = MSSQLDRV_ID) Begin
42840>>>>>>>>>            Move EN_dbTypeMSSQL to iRetval
42841>>>>>>>>>        End
42841>>>>>>>>>>
42841>>>>>>>>>        If (sDriverID = ODBC_DRV_ID) Begin
42843>>>>>>>>>            Move EN_dbTypeMSSQL to iRetval
42844>>>>>>>>>        End
42844>>>>>>>>>>
42844>>>>>>>>>        If (sDriverID = DB2_DRV_ID) Begin
42846>>>>>>>>>            Move EN_dbTypeDB2 to iRetval
42847>>>>>>>>>        End
42847>>>>>>>>>>
42847>>>>>>>>>        If (sDriverID = DFBTRDRV_ID) Begin
42849>>>>>>>>>            Move EN_DbTypePervasive to iRetval
42850>>>>>>>>>        End
42850>>>>>>>>>>
42850>>>>>>>>>        Function_Return iRetval
42851>>>>>>>>>    End_Function
42852>>>>>>>>>
Including file: ParseKeyWord.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ParseKeyWord.pkg)
42852>>>>>>>>>>
42852>>>>>>>>>>Function ParseKeyWord String sConnect String sKeyWord Returns String
42854>>>>>>>>>>    Integer iStart iEnd
42854>>>>>>>>>>    String sRetval
42854>>>>>>>>>>
42854>>>>>>>>>>    Move (Trim(sConnect)) to sConnect
42855>>>>>>>>>>    Move (Pos(Uppercase(sKeyWord), Uppercase(sConnect)))  to iStart
42856>>>>>>>>>>    If (iStart = 0) Begin
42858>>>>>>>>>>        Function_Return ""
42859>>>>>>>>>>    End
42859>>>>>>>>>>>
42859>>>>>>>>>>    Move (Left(sConnect, (iStart -1 + Length(sKeyWord)))) to sRetval
42860>>>>>>>>>>    Move (Replace(sRetval, sConnect, "")) to sRetval
42861>>>>>>>>>>    If (sKeyWord = Uppercase(CS_SQLConnectionIDText)) Begin
42863>>>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
42864>>>>>>>>>>    End
42864>>>>>>>>>>>
42864>>>>>>>>>>    Else Begin
42865>>>>>>>>>>        Move (Pos(";", sRetval))          to iEnd
42866>>>>>>>>>>    End
42866>>>>>>>>>>>
42866>>>>>>>>>>    If (iEnd = 0 and (sRetval contains ",")) Begin
42868>>>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
42869>>>>>>>>>>        Decrement iEnd
42870>>>>>>>>>>    End
42870>>>>>>>>>>>
42870>>>>>>>>>>    If (iEnd <> 0) Begin
42872>>>>>>>>>>        Move (Left(sRetval, (iEnd -1)))   to sRetval
42873>>>>>>>>>>    End
42873>>>>>>>>>>>
42873>>>>>>>>>>    Move (Replace("=", sRetval, ""))      to sRetval
42874>>>>>>>>>>
42874>>>>>>>>>>    Function_Return (Trim(sRetval))
42875>>>>>>>>>>End_Function
42876>>>>>>>>>>
42876>>>>>>>>>>
42876>>>>>>>>>
42876>>>>>>>>>    Function ConstructConnectionString String sDriverID String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
42878>>>>>>>>>        String sConnect
42878>>>>>>>>>        Handle hoDriver
42878>>>>>>>>>
42878>>>>>>>>>        Get Create (RefClass(cDbUpdateDatabaseDriver)) to hoDriver 
42879>>>>>>>>>        Set Name of hoDriver to "oDbUpdateDatabaseDriver"
42880>>>>>>>>>        Set psDriverID of hoDriver to sDriverID
42881>>>>>>>>>        Get ConstructConnectionString of hoDriver sServer sDatabase bTrusted sUserID sPassword to sConnect
42882>>>>>>>>>        Send Destroy of hoDriver
42883>>>>>>>>>
42883>>>>>>>>>        Function_Return sConnect
42884>>>>>>>>>    End_Function
42885>>>>>>>>>
42885>>>>>>>>>    // Short connection string used when writing to ini-file. This is to be compatible with DF19 DFConnId.ini files that uses this short format.
42885>>>>>>>>>    Function ConstructShortConnectionString String sDriverID String sServer String sDatabase Returns String
42887>>>>>>>>>        String sConnect
42887>>>>>>>>>
42887>>>>>>>>>        Case Begin
42887>>>>>>>>>            Case (sDriverID = MSSQLDRV_ID)
42889>>>>>>>>>                Move (sConnect * CS_SQLIniServerKeyword + "=" + sServer) to sConnect
42890>>>>>>>>>                If (sDatabase <> "") Begin
42892>>>>>>>>>                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
42893>>>>>>>>>                End
42893>>>>>>>>>>
42893>>>>>>>>>                Case Break
42894>>>>>>>>>
42894>>>>>>>>>            Case (sDriverID = ODBC_DRV_ID)
42897>>>>>>>>>                If (Uppercase(sServer) contains ".DSN") Begin
42899>>>>>>>>>                    Move (CS_SQLIniFileDSNKeyword + "=" + sServer) to sConnect
42900>>>>>>>>>                End
42900>>>>>>>>>>
42900>>>>>>>>>                Else If (not(Uppercase(sServer) contains "DSN")) Begin
42903>>>>>>>>>                    Move (CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
42904>>>>>>>>>                End
42904>>>>>>>>>>
42904>>>>>>>>>
42904>>>>>>>>>                If (sDatabase <> "") Begin
42906>>>>>>>>>                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
42907>>>>>>>>>                End
42907>>>>>>>>>>
42907>>>>>>>>>                Case Break
42908>>>>>>>>>
42908>>>>>>>>>            Case (sDriverID = DB2_DRV_ID)
42911>>>>>>>>>                Move (sConnect * CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
42912>>>>>>>>>                If (sDatabase <> "") Begin
42914>>>>>>>>>                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
42915>>>>>>>>>                End
42915>>>>>>>>>>
42915>>>>>>>>>                Case Break
42916>>>>>>>>>
42916>>>>>>>>>            Case (sDriverID = DATAFLEX_ID)    // Dummy stub.
42919>>>>>>>>>                Break
42920>>>>>>>>>
42920>>>>>>>>>            Case Else
42920>>>>>>>>>                Move "" to sConnect
42921>>>>>>>>>        Case End
42921>>>>>>>>>
42921>>>>>>>>>        Function_Return sConnect
42922>>>>>>>>>    End_Function
42923>>>>>>>>>
42923>>>>>>>>>    // Use Base64
42923>>>>>>>>>    Function EncryptPassword String sPassword Returns String
42925>>>>>>>>>        String sRetval
42925>>>>>>>>>        Handle hoLoginEncryption
42925>>>>>>>>>
42925>>>>>>>>>        Get Create (RefClass(cLoginEncryption)) to hoLoginEncryption
42926>>>>>>>>>        Set psEncryptPassword of hoLoginEncryption to (psHashString(Self))
42927>>>>>>>>>        Get EncryptPassword of hoLoginEncryption sPassword to sRetval
42928>>>>>>>>>        Send Destroy of hoLoginEncryption
42929>>>>>>>>>          
42929>>>>>>>>>        Function_Return sRetval
42930>>>>>>>>>    End_Function
42931>>>>>>>>>
42931>>>>>>>>>    Function DecryptPassword String sPassword Returns String
42933>>>>>>>>>        String sRetval
42933>>>>>>>>>        Handle hoLoginEncryption
42933>>>>>>>>>
42933>>>>>>>>>        Get Create (RefClass(cLoginEncryption)) to hoLoginEncryption
42934>>>>>>>>>        Set psEncryptPassword of hoLoginEncryption to (psHashString(Self))
42935>>>>>>>>>        Get DecryptPassword of hoLoginEncryption sPassword to sRetval
42936>>>>>>>>>        Send Destroy of hoLoginEncryption
42937>>>>>>>>>
42937>>>>>>>>>        Function_Return sRetval
42938>>>>>>>>>    End_Function
42939>>>>>>>>>
42939>>>>>>>>>    // Returns the full path of the Application (no trailing "\")
42939>>>>>>>>>    Function ApplicationPath Returns String
42941>>>>>>>>>        String sApplicationFileName sPath
42941>>>>>>>>>        Integer iNumChars iRetval
42941>>>>>>>>>
42941>>>>>>>>>        Move (Repeat(Character(0), 1024))    to sApplicationFileName
42942>>>>>>>>>        Move (GetModuleFileName(0, AddressOf(sApplicationFileName), 1024)) to iNumChars
42943>>>>>>>>>        Move (CString(sApplicationFileName)) to sApplicationFileName
42944>>>>>>>>>        Move (PathRemoveFileSpec(AddressOf(sApplicationFileName))) to iRetval
42945>>>>>>>>>        Move (CString(sApplicationFileName)) to sPath
42946>>>>>>>>>
42946>>>>>>>>>        Function_Return sPath
42947>>>>>>>>>    End_Function
42948>>>>>>>>>
42948>>>>>>>>>    // Pass a filename including the extension. The return value
42948>>>>>>>>>    // will be the path of of the first found "sSearchFileName in the workspace.
42948>>>>>>>>>    // If not found in the workspace it will be search "globally" by the Get_File_Path command.
42948>>>>>>>>>    Function SearchLocallyThenGloballyForFile String sSearchFileName Returns String
42950>>>>>>>>>        Boolean bExists
42950>>>>>>>>>        Handle hoPaths hoIniFile
42950>>>>>>>>>        String[] asWorkSpaceFiles
42951>>>>>>>>>        String sProgramsPath sSection sFileName sRelativePath sRelativePaths sPath sDirSep sProgramsDir
42951>>>>>>>>>        Integer iSize iCount iPath iNoOfPaths iCountPath
42951>>>>>>>>>        
42951>>>>>>>>>        Get psIniFilePath to sProgramsPath
42952>>>>>>>>>        Get vFolderFormat sProgramsPath to sProgramsPath 
42953>>>>>>>>>        Move (Lowercase(sSearchFileName)) to sSearchFileName
42954>>>>>>>>>        Get vFilePathExists (sProgramsPath + sSearchFileName) to bExists   
42955>>>>>>>>>        If (bExists = True) Begin
42957>>>>>>>>>            Function_Return sProgramsPath
42958>>>>>>>>>        End                      
42958>>>>>>>>>>
42958>>>>>>>>>    
42958>>>>>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
42959>>>>>>>>>        If (Right(sProgramsPath, 1) ="\") Begin
42961>>>>>>>>>            Move (Left(sProgramsPath, Length(sProgramsPath) -1)) to sProgramsPath        
42962>>>>>>>>>        End                                              
42962>>>>>>>>>>
42962>>>>>>>>>        Get StringFromRightOfChar sProgramsPath sDirSep to sProgramsDir
42963>>>>>>>>>        
42963>>>>>>>>>        Move False to bExists
42964>>>>>>>>>        Get Create (RefClass(Array)) to hoPaths
42965>>>>>>>>>        Get WorkspaceIniFiles sProgramsPath to asWorkspaceFiles
42966>>>>>>>>>        Move (SizeOfArray(asWorkspaceFiles)) to iSize
42967>>>>>>>>>        Decrement iSize       
42968>>>>>>>>>        
42968>>>>>>>>>        For iCount from 0 to iSize
42974>>>>>>>>>>
42974>>>>>>>>>            Move asWorkspaceFiles[iCount] to sFileName
42975>>>>>>>>>            Get Create (Refclass(cIniFile)) to hoIniFile
42976>>>>>>>>>            Set psFileName of hoIniFile to sFileName
42977>>>>>>>>>            Send ReadSection of hoIniFile "Workspace" hoPaths
42978>>>>>>>>>            For iPath from 0 to (Item_Count(hoPaths) -1)
42984>>>>>>>>>>
42984>>>>>>>>>                Get Value of hoPaths iPath to sSection    
42985>>>>>>>>>                Get ReadString of hoIniFile "Workspace" sSection "" to sRelativePath 
42986>>>>>>>>>                // Check if there are more than one path specified;
42986>>>>>>>>>                Get CountOfPaths of (phoWorkspace(ghoApplication)) sRelativePath to iNoOfPaths
42987>>>>>>>>>                If (iNoOfPaths > 1) Begin         
42989>>>>>>>>>                    Move sRelativePath to sRelativePaths
42990>>>>>>>>>                    For iCountPath from 1 to iNoOfPaths
42996>>>>>>>>>>
42996>>>>>>>>>                        Get PathAtIndex of (phoWorkspace(ghoApplication)) sRelativePaths iCountPath to sRelativePath
42997>>>>>>>>>                        Get FullPathNames of (phoWorkspace(ghoApplication)) sRelativePath to sPath   
42998>>>>>>>>>                        Move (Replace((sDirSep + sProgramsDir + sDirSep), sPath, sDirSep)) to sPath
42999>>>>>>>>>                        Get vFolderFormat sPath to sPath
43000>>>>>>>>>                        Get vFilePathExists (sPath + sSearchFileName) to bExists
43001>>>>>>>>>                        If (bExists = True) Begin
43003>>>>>>>>>                            Move iNoOfPaths to iCountPath
43004>>>>>>>>>                            Move (Item_Count(hoPaths)) to iPath // We're done.
43005>>>>>>>>>                            Move iSize to iCount
43006>>>>>>>>>                        End                                                    
43006>>>>>>>>>>
43006>>>>>>>>>                    Loop
43007>>>>>>>>>>
43007>>>>>>>>>                End
43007>>>>>>>>>>
43007>>>>>>>>>                Else Begin
43008>>>>>>>>>                    Get FullPathNames of (phoWorkspace(ghoApplication)) sRelativePath to sPath   
43009>>>>>>>>>                    Move (Replace((sDirSep + sProgramsDir + sDirSep), sPath, sDirSep)) to sPath
43010>>>>>>>>>                    Get vFolderFormat sPath to sPath
43011>>>>>>>>>                    Get vFilePathExists (sPath + sSearchFileName) to bExists
43012>>>>>>>>>                    If (bExists = True) Begin
43014>>>>>>>>>                        Move (Item_Count(hoPaths)) to iPath // We're done.
43015>>>>>>>>>                        Move iSize to iCount
43016>>>>>>>>>                    End                                                    
43016>>>>>>>>>>
43016>>>>>>>>>                End
43016>>>>>>>>>>
43016>>>>>>>>>            Loop
43017>>>>>>>>>>
43017>>>>>>>>>            If (bExists = False) Begin
43019>>>>>>>>>                Move "" to sPath    
43020>>>>>>>>>            End
43020>>>>>>>>>>
43020>>>>>>>>>            Send Destroy of hoIniFile          
43021>>>>>>>>>        Loop        
43022>>>>>>>>>>
43022>>>>>>>>>        Send Destroy of hoPaths
43023>>>>>>>>>        
43023>>>>>>>>>        // Then not found in workspace, look for the file in DFSysPath;
43023>>>>>>>>>        If (sPath = "") Begin
43025>>>>>>>>>            Get_File_Path sSearchFileName to sFileName   
43026>>>>>>>>>            Get ParseFolderName sFileName to sPath
43027>>>>>>>>>        End                  
43027>>>>>>>>>>
43027>>>>>>>>>        
43027>>>>>>>>>        Function_Return sPath    
43028>>>>>>>>>    End_Function
43029>>>>>>>>>    
43029>>>>>>>>>    // Pass the path to the workspace Programs folder - returns a string array
43029>>>>>>>>>    // with one or more .ws file names.
43029>>>>>>>>>    // First checks if there is a .sws file - and if so reads the name of the
43029>>>>>>>>>    // workspace file (.ws) and returns it as a string array.
43029>>>>>>>>>    // If _no_ .sws file is found, enumerates the passed sProgramsPath variable
43029>>>>>>>>>    Function WorkspaceIniFiles String sProgramsPath Returns String[]
43031>>>>>>>>>        String[] asSWSFiles asWorkspaceFiles   
43033>>>>>>>>>        String sFile sHomePath sDirSep
43033>>>>>>>>>        Integer iCh iSize
43033>>>>>>>>>        Boolean bExists      
43033>>>>>>>>>        Handle hoIniFile 
43033>>>>>>>>>        
43033>>>>>>>>>        Move (ResizeArray(asSWSFiles, 0)) to asSWSFiles
43034>>>>>>>>>        Move (ResizeArray(asWorkspaceFiles, 0)) to asWorkspaceFiles
43035>>>>>>>>>        If (Right(sProgramsPath, 1) ="\") Begin
43037>>>>>>>>>            Move (Left(sProgramsPath, Length(sProgramsPath) -1)) to sProgramsPath        
43038>>>>>>>>>        End                                              
43038>>>>>>>>>>
43038>>>>>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
43039>>>>>>>>>        Get StringFromRightOfChar sProgramsPath sDirSep to sHomePath
43040>>>>>>>>>        Move (Replace(sHomePath, sProgramsPath, "")) to sHomePath
43041>>>>>>>>>        Get vFolderFormat sHomePath to sHomePath 
43042>>>>>>>>>        
43042>>>>>>>>>        // First check if theres an .sws file. If there is we will open it and
43042>>>>>>>>>        // read the name of the .ws file name.
43042>>>>>>>>>        File_Exist (sHomePath + "*.sws") bExists
43043>>>>>>>>>        If (bExists = True) Begin
43045>>>>>>>>>            Get Seq_Open_input_Channel ("dir:" + sHomePath + "*.sws") to iCh
43046>>>>>>>>>            If (iCh < 0) Begin
43048>>>>>>>>>                Function_Return asSWSFiles
43049>>>>>>>>>            End                                 
43049>>>>>>>>>>
43049>>>>>>>>>            
43049>>>>>>>>>            Repeat
43049>>>>>>>>>>
43049>>>>>>>>>                Readln channel iCh sFile
43051>>>>>>>>>                If (Trim(sFile) <> "") Begin
43053>>>>>>>>>                    Move sFile to asSWSFiles[SizeOfArray(asSWSFiles)]
43054>>>>>>>>>                End
43054>>>>>>>>>>
43054>>>>>>>>>            Until (SeqEof = True)
43056>>>>>>>>>            Send Seq_Close_Channel iCh    
43057>>>>>>>>>            
43057>>>>>>>>>            Move (SizeOfArray(asSWSFiles)) to iSize
43058>>>>>>>>>            If (iSize <> 0) Begin
43060>>>>>>>>>                Get Create (RefClass(cIniFile)) to hoIniFile  
43061>>>>>>>>>                // Use the file with that is last as it might have the DataFlex version in it,
43061>>>>>>>>>                // and thus is the latest one and it is more likely it is accurate (?)...
43061>>>>>>>>>                Move asSWSFiles[SizeOfArray(asSWSFiles) -1] to sFile
43062>>>>>>>>>                Set psFileName of hoIniFile to (sHomePath + sFile)
43063>>>>>>>>>                Get ReadString of hoIniFile "WorkspacePaths" "ConfigFile" "" to sFile
43064>>>>>>>>>                If (sFile <> "") Begin
43066>>>>>>>>>                    Move (Replace(".", sFile, sHomePath)) to sFile
43067>>>>>>>>>                    Move (Replace((sDirSep + String(sDirSep)), sFile, sDirSep)) to sFile
43068>>>>>>>>>                    File_Exist sFile bExists
43069>>>>>>>>>                    If (bExists = True) Begin
43071>>>>>>>>>                        Move sFile to asWorkspaceFiles[0] 
43072>>>>>>>>>                    End
43072>>>>>>>>>>
43072>>>>>>>>>                End
43072>>>>>>>>>>
43072>>>>>>>>>                Send Destroy of hoIniFile
43073>>>>>>>>>            End
43073>>>>>>>>>>
43073>>>>>>>>>        End
43073>>>>>>>>>>
43073>>>>>>>>>        
43073>>>>>>>>>        // If no .sws file exists, enumerate the .ws files from the Programs folder:    
43073>>>>>>>>>        If (SizeOfArray(asWorkspaceFiles) = 0) Begin
43075>>>>>>>>>            Get vFolderFormat sProgramsPath to sProgramsPath 
43076>>>>>>>>>            File_Exist (sProgramsPath + "*.ws") bExists
43077>>>>>>>>>            If (bExists = False) Begin
43079>>>>>>>>>                Function_Return asWorkspaceFiles
43080>>>>>>>>>            End
43080>>>>>>>>>>
43080>>>>>>>>>        
43080>>>>>>>>>            Get Seq_Open_input_Channel ("dir:" + sProgramsPath + "*.ws") to iCh
43081>>>>>>>>>            If (iCh < 0) Begin
43083>>>>>>>>>                Function_Return asWorkspaceFiles
43084>>>>>>>>>            End                                 
43084>>>>>>>>>>
43084>>>>>>>>>            
43084>>>>>>>>>            Repeat
43084>>>>>>>>>>
43084>>>>>>>>>                Readln channel iCh sFile
43086>>>>>>>>>                If (Trim(sFile) <> "") Begin
43088>>>>>>>>>                    Move sFile to asWorkspaceFiles[SizeOfArray(asWorkspaceFiles)]
43089>>>>>>>>>                End
43089>>>>>>>>>>
43089>>>>>>>>>            Until (SeqEof = True)
43091>>>>>>>>>            Send Seq_Close_Channel iCh
43092>>>>>>>>>        End
43092>>>>>>>>>>
43092>>>>>>>>>        
43092>>>>>>>>>        Function_Return asWorkspaceFiles
43093>>>>>>>>>    End_Function
43094>>>>>>>>>
43094>>>>>>>>>End_Class
43095>>>>>>>Use cDbUpdateDatabaseDriver.pkg
43095>>>>>>>Use vWin32fh.pkg
43095>>>>>>>
43095>>>>>>>// The cConnection class is the new SQL connections class for DF 19.
43095>>>>>>>// If an object of the cConnection class hasn't been instantiated we use a "dummy" class in its place.
43095>>>>>>>    Use cConnectionDUF.pkg
Including file: cConnectionDUF.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cConnectionDUF.pkg)
43095>>>>>>>>>// * Dummy class * that will only be used if DF 18.2 or less.
43095>>>>>>>>>//
43095>>>>>>>>>// The cConnection class is new to DF 19 and that DF 19 package/class
43095>>>>>>>>>// will be used automatically instead of this package
43095>>>>>>>>>// if the current DF version is 19 and up _and_ the class
43095>>>>>>>>>// has been instantianted in the cApplication object.
43095>>>>>>>>>//
43095>>>>>>>>>// If an object of the original cConnection class is placed in
43095>>>>>>>>>// the cApplication, that connection logic will be used instead
43095>>>>>>>>>// of the Database Update Framework's SQLConnections logic. Or more
43095>>>>>>>>>// correctly; "Managed Connection" settings will be read and applied
43095>>>>>>>>>// instead of those defined in the framework's SQLConnections.ini file.
43095>>>>>>>>>//
43095>>>>>>>>>Struct tConnection
43095>>>>>>>>>    String sId                // connection id
43095>>>>>>>>>    String sString            // server-string as added via the ini file
43095>>>>>>>>>    String sUID               // User Id
43095>>>>>>>>>    String sPWD               // non-encrypted password
43095>>>>>>>>>    Boolean bTrustedConnection // Trusted connection
43095>>>>>>>>>    Integer iOptions          // connection ID options (don't use)
43095>>>>>>>>>    String sDriver            // name of driver
43095>>>>>>>>>    Integer iDriverIndex      // loaded driver index (is 1 based, 0 if none)
43095>>>>>>>>>    String sConnectionString  // Full connection string assembled from various strings
43095>>>>>>>>>    String sSection           // this is usually the section name as it appears
43095>>>>>>>>>                              // in the connections ini file (e.g., [Connection1])
43095>>>>>>>>>    Boolean bDisabled         // if set, this is not an active Id
43095>>>>>>>>>End_Struct
43095>>>>>>>>>
43095>>>>>>>>>
43095>>>>>>>>>Class cConnection is a cObject
43096>>>>>>>>>
43096>>>>>>>>>    Procedure Construct_Object
43098>>>>>>>>>        Forward Send Construct_Object
43100>>>>>>>>>
43100>>>>>>>>>    End_Procedure
43101>>>>>>>>>
43101>>>>>>>>>    Function ConnectionIdInfo Returns tConnection
43103>>>>>>>>>        tConnection Connection
43103>>>>>>>>>        tConnection Connection
43103>>>>>>>>>        Function_Return Connection
43104>>>>>>>>>    End_Function
43105>>>>>>>>>
43105>>>>>>>>>    Function IsConnectionIdLoggedIn Returns Boolean
43107>>>>>>>>>        Function_Return False
43108>>>>>>>>>    End_Function
43109>>>>>>>>>
43109>>>>>>>>>    Function LoginConnectionId Returns String
43111>>>>>>>>>        Function_Return ""
43112>>>>>>>>>    End_Function
43113>>>>>>>>>
43113>>>>>>>>>    // get array of managed connections across all drivers
43113>>>>>>>>>    // returns array of connections in tConnection.
43113>>>>>>>>>    Function ConnectionIDs Returns tConnection[]
43115>>>>>>>>>        tConnection[] Connections
43115>>>>>>>>>        tConnection[] Connections
43116>>>>>>>>>        Function_Return Connections
43117>>>>>>>>>    End_Function
43118>>>>>>>>>
43118>>>>>>>>>    Function ConnectionIdIndex String sConnectionID Returns Integer
43120>>>>>>>>>        Function_Return 0
43121>>>>>>>>>    End_Function
43122>>>>>>>>>
43122>>>>>>>>>    Function RedirectConnectionId String sConnectionID String sServer String sUserId String sPw Boolean bTrusted Boolean bKeepOpen Returns Boolean
43124>>>>>>>>>        Function_Return False
43125>>>>>>>>>    End_Function
43126>>>>>>>>>
43126>>>>>>>>>End_Class
43127>>>>>>>
43127>>>>>>>// We're making references to this object handle so we need it defined
43127>>>>>>>// here as well as for the cDbUpdateHandler class
43127>>>>>>>
43127>>>>>>>    Global_Variable Handle ghoSQLConnectionHandler
43127>>>>>>>    Move 0 to ghoSQLConnectionHandler
43128>>>>>>>
43128>>>>>>>Class cSQLConnectionHandler is a cObject
43129>>>>>>>
43129>>>>>>>    Procedure Construct_Object
43131>>>>>>>        Handle ho
43131>>>>>>>        Forward Send Construct_Object
43133>>>>>>>        Move Self to ghoSQLConnectionHandler
43134>>>>>>>
43134>>>>>>>        Property Handle phoSQLConnectionIniFile 
43135>>>>>>>        Get  Create (RefClass(cSQLConnectionIniFile)) to ho
43136>>>>>>>        Set Name of ho to "oSQLConnectionIniFile"
43137>>>>>>>        Set phoSQLConnectionIniFile to ho
43138>>>>>>>        
43138>>>>>>>        // These properties are used by the cDbUpdateVersion and cDbUpdateFunctionLibrary classes,
43138>>>>>>>        // but put here so they can be set/get in both class objects. Those classes has "relay"
43138>>>>>>>        // methods to this class.
43138>>>>>>>        Property Boolean pbUseConnectionID True
43139>>>>>>>        Property Boolean pbToANSI          True
43140>>>>>>>        Property Boolean pbRecnum          True
43141>>>>>>>        Property Boolean pbCopyData        True
43142>>>>>>>        Property Boolean pbApiTableUpdateAuto    False
43143>>>>>>>        Property Boolean pbCompareDate_DateTime  False
43144>>>>>>>        Property Boolean pbCompareIndexAscending False
43145>>>>>>>        Property Boolean pbCompareIndexUppercase False
43146>>>>>>>
43146>>>>>>>        Property Boolean Private.pbUseDriverCacheFiles True
43147>>>>>>>        Property Boolean Private.pbIgnoreDriverUcaseSupport True
43148>>>>>>>        
43148>>>>>>>        // Driver default value settings:
43148>>>>>>>        // Note: When the object is created the corresponding values
43148>>>>>>>        // from the driver .int files are read.
43148>>>>>>>        // Sample: Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_NUMERIC of {driverNumber} to {StringVariable}
43148>>>>>>>        Property String psDriverDefaultValueASCII    ""
43149>>>>>>>        Property String psDriverDefaultValueBinary   ""
43150>>>>>>>        Property String psDriverDefaultValueDate     ""
43151>>>>>>>        Property String psDriverDefaultValueDateTime ""
43152>>>>>>>        Property String psDriverDefaultValueNumeric  ""
43153>>>>>>>        Property String psDriverDefaultValueText     ""
43154>>>>>>>
43154>>>>>>>        // Driver "nullability" settings:
43154>>>>>>>        // Note: When the object is created the corresponding values
43154>>>>>>>        // from the driver .int files are read.
43154>>>>>>>        // Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_ASCII of {driverNumber} to {BooleanVariable}
43154>>>>>>>        Property Boolean pbDriverDefaultNullableASCII    False
43155>>>>>>>        Property Boolean pbDriverDefaultNullableBinary   False
43156>>>>>>>        Property Boolean pbDriverDefaultNullableDate     False
43157>>>>>>>        Property Boolean pbDriverDefaultNullableDateTime False
43158>>>>>>>        Property Boolean pbDriverDefaultNullableNumeric  False
43159>>>>>>>        Property Boolean pbDriverDefaultNullableText     False
43160>>>>>>>
43160>>>>>>>        Property Boolean pbUseCacheFiles                 True
43161>>>>>>>
43161>>>>>>>        // *** This is the central point of connection data for the Database Update Framework ***
43161>>>>>>>        //     It is private because the get/set version also updates the DAW
43161>>>>>>>        //     driver interfaces.
43161>>>>>>>        //     There are also procedure/function pairs to set/get individual data members
43161>>>>>>>        //     of the struct they are all routed throu this struct property.
43161>>>>>>>        Property tSQLConnection Private.pSQLConnection
43162>>>>>>>
43162>>>>>>>    End_Procedure
43163>>>>>>>
43163>>>>>>>    Procedure End_Construct_Object
43165>>>>>>>        tSQLConnection SQLConnection
43165>>>>>>>        tSQLConnection SQLConnection
43165>>>>>>>
43165>>>>>>>        Forward Send End_Construct_Object
43167>>>>>>>
43167>>>>>>>        // Now is the time to read and apply SQL connection settings.
43167>>>>>>>        Get SetupSQLConnection True True to SQLConnection
43168>>>>>>>        Set Private.pSQLConnection to SQLConnection
43169>>>>>>>    End_Procedure
43170>>>>>>>
43170>>>>>>>    // *** Properties ***
43170>>>>>>>    // All connection related "properties" (get/set pairs) are really done by changing the
43170>>>>>>>    // private.pSQLConnection struct connection property. These "properties" are
43170>>>>>>>    // merely here for conveniance.
43170>>>>>>>    //
43170>>>>>>>    // The pSQLConnection get/set are here so we have a "central hub"
43170>>>>>>>    // where we update data to/from the DAW driver interfaces and this framework.
43170>>>>>>>    // This struct property contains all the connection data.
43170>>>>>>>    //
43170>>>>>>>    Procedure Set pSQLConnection tSQLConnection SQLConnection
43172>>>>>>>        Boolean bOK
43172>>>>>>>
43172>>>>>>>        Set Private.pSQLConnection to SQLConnection
43173>>>>>>>
43173>>>>>>>        // When starting a program we might not have a connection id yet:
43173>>>>>>>        If (SQLConnection.sDriverID = DATAFLEX_ID) Begin
43175>>>>>>>//        If (SQLConnection.sConnectionID = "" or SQLConnection.sDriverID = DATAFLEX_ID) Begin
43175>>>>>>>            Procedure_Return
43176>>>>>>>        End
43176>>>>>>>>
43176>>>>>>>
43176>>>>>>>        // If a DAW DFConnId.ini file was read instead of the DUF SQLConnections.ini file we should by now
43176>>>>>>>        // be logged in already and don't want to do it again.
43176>>>>>>>        If (SQLConnection.bDAWConnection = False) Begin
43178>>>>>>>            // After we have set the class property we need to tell the DAW
43178>>>>>>>            // driver interfaces about the change & make a new login.
43178>>>>>>>            Get SQLLogin SQLConnection to bOK
43179>>>>>>>            If (bOK = False) Begin
43181>>>>>>>                Error DFERR_PROGRAM "Login error."
43182>>>>>>>>
43182>>>>>>>            End
43182>>>>>>>>
43182>>>>>>>        End
43182>>>>>>>>
43182>>>>>>>
43182>>>>>>>        // Now is the time to setup our driver default values by reading the driver .int file:
43182>>>>>>>        Send SetupDriverDefaults SQLConnection.sDriverID
43183>>>>>>>
43183>>>>>>>    End_Procedure
43184>>>>>>>
43184>>>>>>>    // Similar to _SqlCheckCurrentDriver but generates no error and it doesn't
43184>>>>>>>    // attempt to load the driver.
43184>>>>>>>    // Returns true if the passed driver is SQL based.
43184>>>>>>>    Function IsSQLDriver String sDriverID Returns Boolean
43186>>>>>>>        Boolean bOK
43186>>>>>>>        Get IsDAWSQLDriver sDriverID to bOK
43187>>>>>>>        Function_Return bOK
43188>>>>>>>    End_Function
43189>>>>>>>
43189>>>>>>>    // Reads the driver .int file and sets class properties of the cDbUpdateFunctionLibrary accordingly.
43189>>>>>>>    Procedure SetupDriverDefaults String sDriverID
43191>>>>>>>        String sAttributeValue sServer
43191>>>>>>>        Integer iDriverID
43191>>>>>>>        Boolean bNULL bSQLDriver
43191>>>>>>>        Handle hDatabase
43191>>>>>>>        
43191>>>>>>>        Get IsSQLDriver sDriverID to bSQLDriver
43192>>>>>>>        If (bSQLDriver = False) Begin
43194>>>>>>>            Procedure_Return
43195>>>>>>>        End                                      
43195>>>>>>>>
43195>>>>>>>        
43195>>>>>>>        Get DriverIndex sDriverID to iDriverID  
43196>>>>>>>        // Note: These properties should be set in the cDbUpdateHandler object:
43196>>>>>>>        //       pbUseDriverCacheFiles and pbIgnoreDriverUcaseSupport
43196>>>>>>>        If (iDriverID <> 0) Begin
43198>>>>>>>            Set_Attribute DF_DRIVER_USE_CACHE of iDriverID to (Private.pbUseDriverCacheFiles(Self)) 
43201>>>>>>>            Set_Attribute DF_DRIVER_IGNORE_UCASE_SUPPORT of iDriverID to (Private.pbIgnoreDriverUcaseSupport(Self))
43204>>>>>>>        End
43204>>>>>>>>
43204>>>>>>>        
43204>>>>>>>        // ToDo: Testing!
43204>>>>>>>//        Get psServer of ghoDbUpdateFunctionLibrary to sServer
43204>>>>>>>//        Get SqlUtilDatabaseHandle of ghoDbUpdateFunctionLibrary sDriverID sServer to hDatabase
43204>>>>>>>//        Set_Attribute DF_DATABASE_IGNORE_WARNINGS of iDriverID hDatabase to True 
43204>>>>>>>
43204>>>>>>>        // Driver default values for various data types:
43204>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_ASCII of iDriverID      to sAttributeValue
43207>>>>>>>        Set psDriverDefaultValueASCII                                   to sAttributeValue
43208>>>>>>>
43208>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_BINARY of iDriverID     to sAttributeValue
43211>>>>>>>        Set psDriverDefaultValueBinary                                  to sAttributeValue
43212>>>>>>>
43212>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_DATE of iDriverID       to sAttributeValue
43215>>>>>>>        Set psDriverDefaultValueDate                                    to sAttributeValue
43216>>>>>>>
43216>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_DATETIME of iDriverID   to sAttributeValue
43219>>>>>>>        Set psDriverDefaultValueDateTime                                to sAttributeValue
43220>>>>>>>
43220>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_NUMERIC of iDriverID    to sAttributeValue
43223>>>>>>>        Set psDriverDefaultValueNumeric                                 to sAttributeValue
43224>>>>>>>
43224>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_TEXT of iDriverID       to sAttributeValue
43227>>>>>>>        Set psDriverDefaultValueText                                    to sAttributeValue
43228>>>>>>>
43228>>>>>>>        // The default setting for the "nullability" of newly created ASCII columns.
43228>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_ASCII      of iDriverID to bNULL
43231>>>>>>>        Set pbDriverDefaultNullableASCII to bNULL
43232>>>>>>>
43232>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_BINARY     of iDriverID to bNULL
43235>>>>>>>        Set pbDriverDefaultNullableBinary to bNULL
43236>>>>>>>
43236>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_DATE       of iDriverID to bNULL
43239>>>>>>>        Set pbDriverDefaultNullableDate to bNULL
43240>>>>>>>
43240>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_DATETIME   of iDriverID to bNULL
43243>>>>>>>        Set pbDriverDefaultNullableDateTime to bNULL
43244>>>>>>>
43244>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_NUMERIC    of iDriverID to bNULL
43247>>>>>>>        Set pbDriverDefaultNullableNumeric to bNULL
43248>>>>>>>
43248>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_TEXT       of iDriverID to bNULL
43251>>>>>>>        Set pbDriverDefaultNullableText to bNULL
43252>>>>>>>
43252>>>>>>>    End_Procedure
43253>>>>>>>
43253>>>>>>>    Function SQLLogin tSQLConnection SQLConnection Returns Boolean
43255>>>>>>>        Boolean bOK bIsDaw
43255>>>>>>>        String sConnectionString
43255>>>>>>>        Handle hoErrorObj hoDriver hoIniFile
43255>>>>>>>        Integer iDriverID
43255>>>>>>>
43255>>>>>>>        Move False to bOK
43256>>>>>>>        Get IsDAWSQLDriver SQLConnection.sDriverID to bIsDaw
43257>>>>>>>
43257>>>>>>>        Get phoSQLConnectionIniFile to hoIniFile
43258>>>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to sConnectionString
43259>>>>>>>        Get DriverIndex SQLConnection.sDriverID to iDriverID
43260>>>>>>>        If (iDriverID = 0) Begin
43262>>>>>>>            Move hoErrorObj to Error_Object_Id
43263>>>>>>>            Function_Return False
43264>>>>>>>        End
43264>>>>>>>>
43264>>>>>>>
43264>>>>>>>        Set_Attribute DF_DRIVER_SILENT_LOGIN of iDriverID to SQLConnection.bSilentLogin
43267>>>>>>>        Get Create (RefClass(cDbUpdateDatabaseDriver)) to hoDriver
43268>>>>>>>        Set psDriverID of hoDriver to SQLConnection.sDriverID
43269>>>>>>>        Get DbLogin    of hoDriver sConnectionString SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to bOK
43270>>>>>>>        Send Destroy   of hoDriver
43271>>>>>>>
43271>>>>>>>        Function_Return bOK
43272>>>>>>>    End_Function
43273>>>>>>>
43273>>>>>>>    Function pSQLConnection Returns tSQLConnection
43275>>>>>>>        tSQLConnection SQLConnection
43275>>>>>>>        tSQLConnection SQLConnection
43275>>>>>>>        Get Private.pSQLConnection to SQLConnection
43276>>>>>>>        Function_Return SQLConnection
43277>>>>>>>    End_Function
43278>>>>>>>
43278>>>>>>>    Procedure Set psConnectionID String sValue
43280>>>>>>>        tSQLConnection SQLConnection
43280>>>>>>>        tSQLConnection SQLConnection
43280>>>>>>>
43280>>>>>>>        Get Private.pSQLConnection to SQLConnection
43281>>>>>>>        If (SQLConnection.sConnectionID = "") Begin
43283>>>>>>>            Move sValue to SQLConnection.sConnectionID
43284>>>>>>>        End
43284>>>>>>>>
43284>>>>>>>
43284>>>>>>>        // Else we might want to change the current connection ID
43284>>>>>>>        Else If (SQLConnection.sConnectionID <> "" and SQLConnection.sConnectionID <> sValue) Begin
43287>>>>>>>            Move False to Err
43288>>>>>>>            Logout SQLConnection.sDriverID
43289>>>>>>>            // This will also make a login to the new server.
43289>>>>>>>            Get SQLIniFileConnectionID of (phoSQLConnectionIniFile(Self)) sValue to SQLConnection
43290>>>>>>>        End
43290>>>>>>>>
43290>>>>>>>        Set pSQLConnection to SQLConnection
43291>>>>>>>    End_Procedure
43292>>>>>>>
43292>>>>>>>    Function psConnectionID Returns String
43294>>>>>>>        tSQLConnection SQLConnection
43294>>>>>>>        tSQLConnection SQLConnection
43294>>>>>>>        Get Private.pSQLConnection to SQLConnection
43295>>>>>>>        Function_Return SQLConnection.sConnectionID
43296>>>>>>>    End_Function
43297>>>>>>>
43297>>>>>>>    // Note: If the psDriverID + other connection properties are to be changed,
43297>>>>>>>    //       the psDriverID *must* be the first property that is changed!
43297>>>>>>>    //       Otherwise errors might be raised by the driver when e.g. the format
43297>>>>>>>    //       for a connection string has the wrong format for that driver.
43297>>>>>>>    Procedure Set psDriverID String sValue
43299>>>>>>>        tSQLConnection SQLConnection
43299>>>>>>>        tSQLConnection SQLConnection
43299>>>>>>>        Get pSQLConnection to SQLConnection
43300>>>>>>>        Move sValue        to SQLConnection.sDriverID
43301>>>>>>>        Set pSQLConnection to SQLConnection
43302>>>>>>>        If (sValue <> DATAFLEX_ID) Begin
43304>>>>>>>            Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43305>>>>>>>        End
43305>>>>>>>>
43305>>>>>>>    End_Procedure
43306>>>>>>>
43306>>>>>>>    Function psDriverID Returns String
43308>>>>>>>        tSQLConnection SQLConnection
43308>>>>>>>        tSQLConnection SQLConnection
43308>>>>>>>        Get Private.pSQLConnection to SQLConnection
43309>>>>>>>        If (SQLConnection.sDriverID = "") Begin
43311>>>>>>>            Move DATAFLEX_ID to SQLConnection.sDriverID // Default is the DataFlex driver.
43312>>>>>>>        End
43312>>>>>>>>
43312>>>>>>>        Function_Return SQLConnection.sDriverID
43313>>>>>>>    End_Function
43314>>>>>>>
43314>>>>>>>    Procedure Set psConnectionString String sValue
43316>>>>>>>        tSQLConnection SQLConnection
43316>>>>>>>        tSQLConnection SQLConnection
43316>>>>>>>        Get Private.pSQLConnection to SQLConnection
43317>>>>>>>        Move sValue        to SQLConnection.sConnectionString
43318>>>>>>>        Set pSQLConnection to SQLConnection
43319>>>>>>>    End_Procedure
43320>>>>>>>
43320>>>>>>>    Function psConnectionString Returns String
43322>>>>>>>        tSQLConnection SQLConnection
43322>>>>>>>        tSQLConnection SQLConnection
43322>>>>>>>        Get Private.pSQLConnection to SQLConnection
43323>>>>>>>        Function_Return SQLConnection.sConnectionString
43324>>>>>>>    End_Function
43325>>>>>>>
43325>>>>>>>    Procedure Set psServer String sValue
43327>>>>>>>        tSQLConnection SQLConnection
43327>>>>>>>        tSQLConnection SQLConnection
43327>>>>>>>        Get Private.pSQLConnection to SQLConnection
43328>>>>>>>        Move sValue        to SQLConnection.sServer
43329>>>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43330>>>>>>>        Set pSQLConnection to SQLConnection
43331>>>>>>>    End_Procedure
43332>>>>>>>
43332>>>>>>>    Function psServer Returns String
43334>>>>>>>        tSQLConnection SQLConnection
43334>>>>>>>        tSQLConnection SQLConnection
43334>>>>>>>        Get Private.pSQLConnection to SQLConnection
43335>>>>>>>        Function_Return SQLConnection.sServer
43336>>>>>>>    End_Function
43337>>>>>>>
43337>>>>>>>    Procedure Set psDatabase String sValue
43339>>>>>>>        tSQLConnection SQLConnection
43339>>>>>>>        tSQLConnection SQLConnection
43339>>>>>>>        Get Private.pSQLConnection to SQLConnection
43340>>>>>>>        Move sValue        to SQLConnection.sDatabase
43341>>>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43342>>>>>>>        Set pSQLConnection to SQLConnection
43343>>>>>>>    End_Procedure
43344>>>>>>>
43344>>>>>>>    Function psDatabase Returns String
43346>>>>>>>        tSQLConnection SQLConnection
43346>>>>>>>        tSQLConnection SQLConnection
43346>>>>>>>        Get Private.pSQLConnection to SQLConnection
43347>>>>>>>        Function_Return SQLConnection.sDatabase
43348>>>>>>>    End_Function
43349>>>>>>>
43349>>>>>>>    Procedure Set psUserID String sValue
43351>>>>>>>        tSQLConnection SQLConnection
43351>>>>>>>        tSQLConnection SQLConnection
43351>>>>>>>        Get Private.pSQLConnection to SQLConnection
43352>>>>>>>        Move sValue        to SQLConnection.sUserID
43353>>>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43354>>>>>>>        Set pSQLConnection to SQLConnection
43355>>>>>>>    End_Procedure
43356>>>>>>>
43356>>>>>>>    Function psUserID Returns String
43358>>>>>>>        tSQLConnection SQLConnection
43358>>>>>>>        tSQLConnection SQLConnection
43358>>>>>>>        Get Private.pSQLConnection to SQLConnection
43359>>>>>>>        Function_Return SQLConnection.sUserID
43360>>>>>>>    End_Function
43361>>>>>>>
43361>>>>>>>    // This is the uncrypted password
43361>>>>>>>    Procedure Set psPassword String sValue
43363>>>>>>>        tSQLConnection SQLConnection
43363>>>>>>>        tSQLConnection SQLConnection
43363>>>>>>>        Get Private.pSQLConnection to SQLConnection
43364>>>>>>>        Move sValue        to SQLConnection.sPassword
43365>>>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43366>>>>>>>        Set pSQLConnection to SQLConnection
43367>>>>>>>    End_Procedure
43368>>>>>>>
43368>>>>>>>    Function psPassword Returns String
43370>>>>>>>        tSQLConnection SQLConnection
43370>>>>>>>        tSQLConnection SQLConnection
43370>>>>>>>        Get Private.pSQLConnection to SQLConnection
43371>>>>>>>        Function_Return SQLConnection.sPassword
43372>>>>>>>    End_Function
43373>>>>>>>
43373>>>>>>>    Procedure Set pbTrusted Boolean bValue
43375>>>>>>>        tSQLConnection SQLConnection
43375>>>>>>>        tSQLConnection SQLConnection
43375>>>>>>>        Get Private.pSQLConnection to SQLConnection
43376>>>>>>>        Move bValue        to SQLConnection.bTrusted
43377>>>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43378>>>>>>>        Set pSQLConnection to SQLConnection
43379>>>>>>>    End_Procedure
43380>>>>>>>
43380>>>>>>>    Function pbTrusted Returns Boolean
43382>>>>>>>        tSQLConnection SQLConnection
43382>>>>>>>        tSQLConnection SQLConnection
43382>>>>>>>        Get Private.pSQLConnection to SQLConnection
43383>>>>>>>        Function_Return SQLConnection.bTrusted
43384>>>>>>>    End_Function
43385>>>>>>>
43385>>>>>>>    // *** All of these properties are special to the Database Update Framework ***
43385>>>>>>>    //     Thus they are not propagated to the DAW classes and that is why
43385>>>>>>>    //     the Private.pSQLConnection property is set instead of the going throu
43385>>>>>>>    //     the central pSQLConnection "hub".
43385>>>>>>>    Procedure Set pbSilentLogin Boolean bValue
43387>>>>>>>        tSQLConnection SQLConnection
43387>>>>>>>        tSQLConnection SQLConnection
43387>>>>>>>        Get Private.pSQLConnection to SQLConnection
43388>>>>>>>        Move bValue to SQLConnection.bTrusted
43389>>>>>>>        Set Private.pSQLConnection to SQLConnection
43390>>>>>>>    End_Procedure
43391>>>>>>>
43391>>>>>>>    Function pbSilentLogin Returns Boolean
43393>>>>>>>        tSQLConnection SQLConnection
43393>>>>>>>        tSQLConnection SQLConnection
43393>>>>>>>        Get Private.pSQLConnection to SQLConnection
43394>>>>>>>        Function_Return SQLConnection.bSilentLogin
43395>>>>>>>    End_Function
43396>>>>>>>
43396>>>>>>>    Procedure Set piDbType Integer iValue
43398>>>>>>>        tSQLConnection SQLConnection
43398>>>>>>>        tSQLConnection SQLConnection
43398>>>>>>>        Get Private.pSQLConnection to SQLConnection
43399>>>>>>>        Move iValue to SQLConnection.iDbType
43400>>>>>>>        Set Private.pSQLConnection to SQLConnection
43401>>>>>>>    End_Procedure
43402>>>>>>>
43402>>>>>>>    Function piDbType Returns Integer
43404>>>>>>>        tSQLConnection SQLConnection
43404>>>>>>>        tSQLConnection SQLConnection
43404>>>>>>>        Get Private.pSQLConnection to SQLConnection
43405>>>>>>>        Function_Return SQLConnection.iDbType
43406>>>>>>>    End_Function
43407>>>>>>>
43407>>>>>>>    Procedure Set psBaseTableSpace String sValue
43409>>>>>>>        tSQLConnection SQLConnection
43409>>>>>>>        tSQLConnection SQLConnection
43409>>>>>>>        Get Private.pSQLConnection to SQLConnection
43410>>>>>>>        Move sValue to SQLConnection.sBaseTableSpace
43411>>>>>>>        Set Private.pSQLConnection to SQLConnection
43412>>>>>>>    End_Procedure
43413>>>>>>>
43413>>>>>>>    Function psBaseTableSpace Returns String
43415>>>>>>>        tSQLConnection SQLConnection
43415>>>>>>>        tSQLConnection SQLConnection
43415>>>>>>>        Get Private.pSQLConnection to SQLConnection
43416>>>>>>>        Function_Return SQLConnection.sBaseTableSpace
43417>>>>>>>    End_Function
43418>>>>>>>
43418>>>>>>>    Procedure Set psIndexTableSpace String sValue
43420>>>>>>>        tSQLConnection SQLConnection
43420>>>>>>>        tSQLConnection SQLConnection
43420>>>>>>>        Get Private.pSQLConnection to SQLConnection
43421>>>>>>>        Move sValue to SQLConnection.sIndexTableSpace
43422>>>>>>>        Set Private.pSQLConnection to SQLConnection
43423>>>>>>>    End_Procedure
43424>>>>>>>
43424>>>>>>>    Function psIndexTableSpace Returns String
43426>>>>>>>        tSQLConnection SQLConnection
43426>>>>>>>        tSQLConnection SQLConnection
43426>>>>>>>        Get Private.pSQLConnection to SQLConnection
43427>>>>>>>        Function_Return SQLConnection.sIndexTableSpace
43428>>>>>>>    End_Function
43429>>>>>>>
43429>>>>>>>    Procedure Set psLongTableSpace String sValue
43431>>>>>>>        tSQLConnection SQLConnection
43431>>>>>>>        tSQLConnection SQLConnection
43431>>>>>>>        Get Private.pSQLConnection to SQLConnection
43432>>>>>>>        Move sValue to SQLConnection.sLongTableSpace
43433>>>>>>>        Set Private.pSQLConnection to SQLConnection
43434>>>>>>>    End_Procedure
43435>>>>>>>
43435>>>>>>>    Function psLongTableSpace Returns String
43437>>>>>>>        tSQLConnection SQLConnection
43437>>>>>>>        tSQLConnection SQLConnection
43437>>>>>>>        Get Private.pSQLConnection to SQLConnection
43438>>>>>>>        Function_Return SQLConnection.sLongTableSpace
43439>>>>>>>    End_Function
43440>>>>>>>
43440>>>>>>>    Procedure Set psSchema String sValue
43442>>>>>>>        tSQLConnection SQLConnection
43442>>>>>>>        tSQLConnection SQLConnection
43442>>>>>>>        Get Private.pSQLConnection to SQLConnection
43443>>>>>>>        Move sValue to SQLConnection.sSchema
43444>>>>>>>        Set Private.pSQLConnection to SQLConnection
43445>>>>>>>    End_Procedure
43446>>>>>>>
43446>>>>>>>    Function psSchema Returns String
43448>>>>>>>        tSQLConnection SQLConnection
43448>>>>>>>        tSQLConnection SQLConnection
43448>>>>>>>        Get Private.pSQLConnection to SQLConnection
43449>>>>>>>        Function_Return SQLConnection.sSchema
43450>>>>>>>    End_Function
43451>>>>>>>
43451>>>>>>>    Procedure Set pbEnabled Boolean bValue
43453>>>>>>>        tSQLConnection SQLConnection
43453>>>>>>>        tSQLConnection SQLConnection
43453>>>>>>>        Get Private.pSQLConnection to SQLConnection
43454>>>>>>>        Move bValue to SQLConnection.bEnabled
43455>>>>>>>        Set Private.pSQLConnection to SQLConnection
43456>>>>>>>    End_Procedure
43457>>>>>>>
43457>>>>>>>    Function pbEnabled Returns Boolean
43459>>>>>>>        tSQLConnection SQLConnection
43459>>>>>>>        tSQLConnection SQLConnection
43459>>>>>>>        Get Private.pSQLConnection to SQLConnection
43460>>>>>>>        Function_Return SQLConnection.bEnabled
43461>>>>>>>    End_Function
43462>>>>>>>
43462>>>>>>>
43462>>>>>>>    // ************************************
43462>>>>>>>    Function SetupSQLConnection Boolean bReadDFConnSettings Boolean bReadSQLConnections Returns tSQLConnection
43464>>>>>>>        tSQLConnection SQLConnection
43464>>>>>>>        tSQLConnection SQLConnection
43464>>>>>>>
43464>>>>>>>        // If this object was created by the cDbUpdateHandler class we will
43464>>>>>>>        // deferr reading SQL connection values until later.
43464>>>>>>>        If (bReadDFConnSettings = True) Begin
43466>>>>>>>            // This is the new SQL login logic for DF 19 and up; "Managed Connections"
43466>>>>>>>            If (ghoConnection > 0) Begin
43468>>>>>>>                Get ReadcConnections to SQLConnection
43469>>>>>>>            End
43469>>>>>>>>
43469>>>>>>>
43469>>>>>>>            // In addition to the above; there might be other values set even if a cConnection
43469>>>>>>>            // object is used.
43469>>>>>>>            If (bReadSQLConnections = True) Begin
43471>>>>>>>                Get ReadSQLConnectionsIniSettings to SQLConnection
43472>>>>>>>            End
43472>>>>>>>>
43472>>>>>>>        End
43472>>>>>>>>
43472>>>>>>>
43472>>>>>>>        Function_Return SQLConnection
43473>>>>>>>    End_Function
43474>>>>>>>
43474>>>>>>>    // This is for the new cConnection class used by DF 19 and up (only).
43474>>>>>>>    Function ReadcConnections Returns tSQLConnection
43476>>>>>>>        tConnection Connection
43476>>>>>>>        tConnection Connection
43476>>>>>>>        tSQLConnection SQLConnection SQLConnectionEmpty
43476>>>>>>>        tSQLConnection SQLConnection SQLConnectionEmpty
43476>>>>>>>        Integer iRetval iDbType
43476>>>>>>>        Boolean bOK bConnected
43476>>>>>>>        String sConnectionID
43476>>>>>>>
43476>>>>>>>
43476>>>>>>>        Function_Return SQLConnection
43477>>>>>>>    End_Function
43478>>>>>>>
43478>>>>>>>    // Returns True if the psConnectionID has been set in the cDbUpateHandler object,
43478>>>>>>>    // or the DAW cConnect array of registered connection only contains one active/enabled
43478>>>>>>>    // connection id for a particular driver.
43478>>>>>>>    // So either the psConnectionID or the psDriverID can have been set in the cDbUpdateHandler
43478>>>>>>>    // object. We can then match a connection id from the DAW cConnect class array.
43478>>>>>>>    // Returns False if there are multiple connections that are enabled or the psConnectionID has
43478>>>>>>>    // been set in the cDbUpdateHandler object but it cannot be found amongst the registered
43478>>>>>>>    // connections of the DAW cConnect class.
43478>>>>>>>    Function IsSinglecConnection String ByRef sConnectionID Returns Boolean
43480>>>>>>>        tConnection[] ConnIdArray
43480>>>>>>>        tConnection[] ConnIdArray
43481>>>>>>>        Integer iCount iSize iConnectionIDCounter
43481>>>>>>>        Boolean bEnabled bFound
43481>>>>>>>        String sConnectionID2 sDriverID sDriverConn
43481>>>>>>>
43481>>>>>>>        Move False to bFound
43482>>>>>>>        If (ghoConnection > 0) Begin
43484>>>>>>>
43484>>>>>>>            // The property of the cDbUpdateHandler container object
43484>>>>>>>            Get psDriverID to sDriverID
43485>>>>>>>
43485>>>>>>>            Move 0 to iConnectionIDCounter
43486>>>>>>>            // This is the the DAW cConnect array with all registered connection id's.
43486>>>>>>>            Move (SizeOfArray(ConnIdArray)) to iSize
43487>>>>>>>            Decrement iSize
43488>>>>>>>            For iCount from 0 to iSize
43494>>>>>>>>
43494>>>>>>>                Move ConnIdArray[iCount].sDriver to sDriverConn
43495>>>>>>>                Move ConnIdArray[iCount].sId to sConnectionID2
43496>>>>>>>                Move (ConnIdArray[iCount].bDisabled = False) to bEnabled
43497>>>>>>>                // If no psConnectionID specified in the cDbUpdateHandler, we check if there is a driver
43497>>>>>>>                // connection in the DAW cConnect object _and_ that there is only one!
43497>>>>>>>                If (sConnectionID = "") Begin
43499>>>>>>>                    Move (sDriverID = sDriverConn and bEnabled = True) to bFound
43500>>>>>>>                End
43500>>>>>>>>
43500>>>>>>>                Else Begin
43501>>>>>>>                    If (Uppercase(sConnectionID) = Uppercase(sConnectionID2)) Begin
43503>>>>>>>                        Move iSize to iCount // Then we've found what we were looking for and we're out of here...
43504>>>>>>>                    End
43504>>>>>>>>
43504>>>>>>>                End
43504>>>>>>>>
43504>>>>>>>
43504>>>>>>>                If (bFound = True) Begin
43506>>>>>>>                    Increment iConnectionIDCounter
43507>>>>>>>                End
43507>>>>>>>>
43507>>>>>>>            Loop
43508>>>>>>>>
43508>>>>>>>            Move (iConnectionIDCounter <= 1 and sDriverConn <> "" and sConnectionID2 <> "") to bFound
43509>>>>>>>            If (bFound = True) Begin
43511>>>>>>>                Move sConnectionID2 to sConnectionID
43512>>>>>>>            End
43512>>>>>>>>
43512>>>>>>>        End
43512>>>>>>>>
43512>>>>>>>
43512>>>>>>>        // Special case; a cConnection object has been setup in the cApplication,
43512>>>>>>>        // but no DFConn.ini record has been created.
43512>>>>>>>        If (iSize = -1) Begin
43514>>>>>>>            Move True to bFound
43515>>>>>>>        End
43515>>>>>>>>
43515>>>>>>>
43515>>>>>>>        Function_Return bFound
43516>>>>>>>    End_Function
43517>>>>>>>
43517>>>>>>>    // Send on object creation to read the default connection string settings, and
43517>>>>>>>    // create a connection to the server.
43517>>>>>>>    Function ReadSQLConnectionsIniSettings Returns tSQLConnection
43519>>>>>>>        String sPath sFileName
43519>>>>>>>        Boolean bExists bActive
43519>>>>>>>        tSQLConnection[] SQLConnectionArray
43519>>>>>>>        tSQLConnection[] SQLConnectionArray
43520>>>>>>>        tSQLConnection SQLConnection SQLConnectionEmpty
43520>>>>>>>        tSQLConnection SQLConnection SQLConnectionEmpty
43520>>>>>>>        Handle hoIniFile
43520>>>>>>>        Integer iSize iCount iRetval
43520>>>>>>>
43520>>>>>>>        Get psIniFilePath to sPath
43521>>>>>>>        Get phoSQLConnectionIniFile to hoIniFile
43522>>>>>>>        If (sPath = "") Begin
43524>>>>>>>            Get ApplicationPath of hoIniFile to sPath
43525>>>>>>>            Set psIniFilePath   of hoIniFile to sPath
43526>>>>>>>        End
43526>>>>>>>>
43526>>>>>>>        Get vFolderFormat sPath to sPath
43527>>>>>>>        Get psIniFileName to sFileName
43528>>>>>>>        Get vFilePathExists (sPath + sFileName) to bExists
43529>>>>>>>
43529>>>>>>>        Get SQLIniFileReadConnections of hoIniFile to SQLConnectionArray
43530>>>>>>>        Move (SizeOfArray(SQLConnectionArray)) to iSize
43531>>>>>>>        If (iSize = 0) Begin
43533>>>>>>>            // This may have been set by the "ReadcConnections" function,
43533>>>>>>>            // if a cConnection object has been setup for DataFlex 19 or later
43533>>>>>>>            // in the cApplication object.
43533>>>>>>>            Get pSQLConnection to SQLConnection
43534>>>>>>>            If (SQLConnection.sConnectionID = "") Begin
43536>>>>>>>                Function_Return SQLConnectionEmpty
43537>>>>>>>            End
43537>>>>>>>>
43537>>>>>>>            Move SQLConnection to SQLConnectionArray[0] 
43538>>>>>>>            Move 1 to iSize
43539>>>>>>>        End
43539>>>>>>>>
43539>>>>>>>
43539>>>>>>>        Move False to bActive
43540>>>>>>>        // The first connection should be the one that is active, but all connections might have been disabled.
43540>>>>>>>        Decrement iSize
43541>>>>>>>        For iCount from 0 to iSize
43547>>>>>>>>
43547>>>>>>>            Move SQLConnectionArray[iCount] to SQLConnection
43548>>>>>>>            If (SQLConnection.bEnabled = True) Begin
43550>>>>>>>                Move True to bActive
43551>>>>>>>                Move iSize to iCount // We've found the enabled item, so we're out of here.
43552>>>>>>>            End
43552>>>>>>>>
43552>>>>>>>        Loop
43553>>>>>>>>
43553>>>>>>>
43553>>>>>>>        // In case all connections have been disabled, we're out of here.
43553>>>>>>>        If (bActive = False) Begin
43555>>>>>>>            Function_Return SQLConnectionEmpty
43556>>>>>>>        End
43556>>>>>>>>
43556>>>>>>>
43556>>>>>>>        Send CreateSQLConnection SQLConnection.sDriverID SQLConnection.sConnectionID ;             SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted ;             SQLConnection.sUserID SQLConnection.sPassword SQLConnection.bSilentLogin False
43557>>>>>>>
43557>>>>>>>        Set pSQLConnection to SQLConnection
43558>>>>>>>        Get AutoSetConnectionID to iRetval
43559>>>>>>>
43559>>>>>>>        Function_Return SQLConnection
43560>>>>>>>    End_Function
43561>>>>>>>
43561>>>>>>>    Procedure Set psIniFilePath String sPath
43563>>>>>>>        Set psIniFilePath of (phoSQLConnectionIniFile(Self)) to sPath
43564>>>>>>>    End_Procedure
43565>>>>>>>
43565>>>>>>>    Function psIniFilePath Returns String
43567>>>>>>>        String sRetval
43567>>>>>>>        Get psIniFilePath of (phoSQLConnectionIniFile(Self)) to sRetval
43568>>>>>>>        Function_Return sRetval
43569>>>>>>>    End_Function
43570>>>>>>>
43570>>>>>>>    Procedure Set psIniFileName String sFileName
43572>>>>>>>        Set psIniFileName of (phoSQLConnectionIniFile(Self)) to sFileName
43573>>>>>>>    End_Procedure
43574>>>>>>>
43574>>>>>>>    Function psIniFileName Returns String
43576>>>>>>>        String sRetval
43576>>>>>>>        Get psIniFileName of (phoSQLConnectionIniFile(Self)) to sRetval
43577>>>>>>>        Function_Return sRetval
43578>>>>>>>    End_Function
43579>>>>>>>
43579>>>>>>>    Procedure Set psIniSectionName String sSection
43581>>>>>>>        Set psIniSectionName of (phoSQLConnectionIniFile(Self)) to sSection
43582>>>>>>>    End_Procedure
43583>>>>>>>
43583>>>>>>>    Function psIniSectionName Returns String
43585>>>>>>>        String sRetval
43585>>>>>>>        Get psIniSectionName of (phoSQLConnectionIniFile(Self)) to sRetval
43586>>>>>>>        Function_Return sRetval
43587>>>>>>>    End_Function
43588>>>>>>>
43588>>>>>>>    Procedure Set IniFileValue String sSection String sValueName String sValue
43590>>>>>>>        Handle ho
43590>>>>>>>        Get phoSQLConnectionIniFile to ho
43591>>>>>>>        Set IniFileValue of ho to sSection sValueName sValue
43592>>>>>>>    End_Procedure
43593>>>>>>>
43593>>>>>>>    Function IniFileValue String sSection String sValueName String sDefaultValue Returns String
43595>>>>>>>        Handle ho
43595>>>>>>>        String sRetval
43595>>>>>>>        Get phoSQLConnectionIniFile to ho
43596>>>>>>>        Get IniFileValue of ho sSection sValueName sDefaultValue to sRetval
43597>>>>>>>        Function_Return sRetval
43598>>>>>>>    End_Function
43599>>>>>>>
43599>>>>>>>    Function SectionExists String sSection Returns Boolean
43601>>>>>>>        Handle ho
43601>>>>>>>        Boolean bRetval
43601>>>>>>>        Get phoSQLConnectionIniFile to ho
43602>>>>>>>        Get SectionExists of ho sSection to bRetval
43603>>>>>>>        Function_Return bRetval
43604>>>>>>>    End_Function
43605>>>>>>>
43605>>>>>>>    Function KeyExists String sSection String sKey Returns Boolean
43607>>>>>>>        Handle ho
43607>>>>>>>        Boolean bRetval
43607>>>>>>>        Get phoSQLConnectionIniFile to ho
43608>>>>>>>        Get KeyExists of ho sSection sKey to bRetval
43609>>>>>>>        Function_Return bRetval
43610>>>>>>>    End_Function
43611>>>>>>>
43611>>>>>>>    Function EncryptPassword String sPassword Returns String
43613>>>>>>>        Handle ho
43613>>>>>>>        String sRetval
43613>>>>>>>        Get phoSQLConnectionIniFile to ho
43614>>>>>>>        Get EncryptPassword of ho sPassword to sRetval
43615>>>>>>>        Function_Return sRetval
43616>>>>>>>    End_Function
43617>>>>>>>
43617>>>>>>>    Function DecryptPassword String sPassword Returns String
43619>>>>>>>        Handle ho
43619>>>>>>>        String sRetval
43619>>>>>>>        Get phoSQLConnectionIniFile to ho
43620>>>>>>>        Get DecryptPassword of ho sPassword to sRetval
43621>>>>>>>        Function_Return sRetval
43622>>>>>>>    End_Function
43623>>>>>>>
43623>>>>>>>    // *** Main Connection Message ***
43623>>>>>>>    Procedure CreateSQLConnection String sDriverID String sConnectionID String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Boolean bSilent Boolean bExitProgram
43625>>>>>>>        Handle hoDriver
43625>>>>>>>        String sConnectionString sError
43625>>>>>>>        Boolean bLoginSuccessful
43625>>>>>>>
43625>>>>>>>        Get ConstructConnectionString sDriverID sServer sDatabase bTrusted sUserID sPassword to sConnectionString
43626>>>>>>>        Get Create (RefClass(cDbUpdateDatabaseDriver)) to hoDriver
43627>>>>>>>        Set psDriverID of hoDriver to sDriverID
43628>>>>>>>        Get DbLogin of hoDriver sConnectionString sServer sDatabase bTrusted sUserID sPassword to bLoginSuccessful
43629>>>>>>>        If (bLoginSuccessful = False) Begin
43631>>>>>>>            Error DFERR_PROGRAM (CS_DUF_CannotLoginToServer * CS_DUF_ErrorText * String(sError) + "\nConnectionID = " * sConnectionID + "\nConnection String = " * sConnectionString)   
43632>>>>>>>>
43632>>>>>>>            If (bExitProgram = True) Begin
43634>>>>>>>                Send Exit_Application
43635>>>>>>>            End
43635>>>>>>>>
43635>>>>>>>        End
43635>>>>>>>>
43635>>>>>>>        Send Destroy of hoDriver
43636>>>>>>>    End_Procedure
43637>>>>>>>
43637>>>>>>>    Function RedirectConnection String sOldConnection String sNewConnection Returns Integer
43639>>>>>>>        Integer iRetval
43639>>>>>>>        Handle hoCLI
43639>>>>>>>        String sDriverID
43639>>>>>>>
43639>>>>>>>        Get psDriverID to sDriverID
43640>>>>>>>        Get Create (Refclass(cCLIHandler)) to hoCLI
43641>>>>>>>        If (hoCLI <> 0) Begin
43643>>>>>>>            Set psDriverID of hoCLI to sDriverID
43644>>>>>>>            Get RedirectConnection of hoCLI sOldConnection sNewConnection to iRetval
43645>>>>>>>            Send Destroy of hoCLI
43646>>>>>>>        End
43646>>>>>>>>
43646>>>>>>>
43646>>>>>>>        Function_Return iRetval
43647>>>>>>>    End_Function
43648>>>>>>>
43648>>>>>>>    Procedure CreateConnParamsFromConnectionString String sDriverID String sConnectionString
43650>>>>>>>        tSQLConnection SQLConnection
43650>>>>>>>        tSQLConnection SQLConnection
43650>>>>>>>
43650>>>>>>>        Set psDriverID to sDriverID
43651>>>>>>>        Get DeComposeConnectionString sDriverID sConnectionString to SQLConnection
43652>>>>>>>        Send CreateSQLConnection SQLConnection.sDriverID SQLConnection.sConnectionID SQLConnection.sServer;                                 SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword SQLConnection.bTrusted False
43653>>>>>>>    End_Procedure
43654>>>>>>>
43654>>>>>>>    // This is needed when e.g. the connection id we have specified in the program code
43654>>>>>>>    // also exists in e.g. the MSSQLDRV.ini file (can either be local in the Data folder
43654>>>>>>>    // or the one in the DataFlex Bin folder.)
43654>>>>>>>    // We then need to delete the current one before creating a new one.
43654>>>>>>>    // This is because the parameters may differ between the program code and the
43654>>>>>>>    // MSSQLDRV.ini file in a deployed environment. Also DataFlex will generate an error
43654>>>>>>>    // when one tries to create a Connection ID that already exists.
43654>>>>>>>    Procedure RemoveExistingConnectionID String sDriverID String sConnectionID
43656>>>>>>>        Integer iResult iDriver iNumConn iConn
43656>>>>>>>        Handle hoCLI
43656>>>>>>>        String sID
43656>>>>>>>
43656>>>>>>>        If (sDriverID = "" or sConnectionID = "") Begin
43658>>>>>>>            Procedure_Return
43659>>>>>>>        End
43659>>>>>>>>
43659>>>>>>>
43659>>>>>>>        Move 0 to iResult
43660>>>>>>>        Get Create (RefClass(cCLIHandler)) to hoCLI
43661>>>>>>>        If (hoCLI <> 0) Begin
43663>>>>>>>            Set psDriverID of hoCLI to sDriverID
43664>>>>>>>            Get DriverIndex sDriverID to iDriver
43665>>>>>>>            Get_Attribute DF_DRIVER_NUMBER_CONNECTION_IDS of iDriver to iNumConn
43668>>>>>>>            Decrement iNumConn
43669>>>>>>>            For iConn from 0 to iNumConn
43675>>>>>>>>
43675>>>>>>>                Get_Attribute DF_DRIVER_CONNECTION_ID of iDriver iConn to sID
43678>>>>>>>                If (Uppercase(sID) = Uppercase(sConnectionID)) Begin
43680>>>>>>>                    Get DeleteConnectionID of hoCLI sConnectionID -1 to iResult
43681>>>>>>>                End
43681>>>>>>>>
43681>>>>>>>            Loop
43682>>>>>>>>
43682>>>>>>>            Send Destroy of hoCLI
43683>>>>>>>        End
43683>>>>>>>>
43683>>>>>>>
43683>>>>>>>    End_Procedure
43684>>>>>>>
43684>>>>>>>    Function ExistingConnectionSettings String sDriverID String sConnectionID Returns tSQLConnection
43686>>>>>>>        Integer iResult iDriver iNumConn iConn
43686>>>>>>>        Handle hoCLI
43686>>>>>>>        String sID sConnectionString sVal sDatabase
43686>>>>>>>        tSQLConnection SQLConnection
43686>>>>>>>        tSQLConnection SQLConnection
43686>>>>>>>        Boolean bTrusted
43686>>>>>>>
43686>>>>>>>        Move 0 to iResult
43687>>>>>>>        Get Create (RefClass(cCLIHandler)) to hoCLI
43688>>>>>>>        If (hoCLI <> 0) Begin
43690>>>>>>>            Set psDriverID of hoCLI to sDriverID
43691>>>>>>>            Get DriverIndex sDriverID to iDriver
43692>>>>>>>            Get_Attribute DF_DRIVER_NUMBER_CONNECTION_IDS of iDriver to iNumConn
43695>>>>>>>            Decrement iNumConn
43696>>>>>>>            For iConn from 0 to iNumConn
43702>>>>>>>>
43702>>>>>>>                Get_Attribute DF_DRIVER_CONNECTION_ID of iDriver iConn to sID
43705>>>>>>>                If (Uppercase(sID) = Uppercase(sConnectionID)) Begin
43707>>>>>>>                    Move sDriverID                                                      to SQLConnection.sDriverID      // For completeness only...
43708>>>>>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID of iDriver iConn              to SQLConnection.sConnectionID  // For completeness only...
43711>>>>>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID_STRING of iDriver iConn       to sConnectionString
43714>>>>>>>                    Move sConnectionString                                              to SQLConnection.sConnectionString
43715>>>>>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID_OPTIONS of iDriver iConn      to SQLConnection.bSilentLogin
43718>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniServerKeyword + "=")   to SQLConnection.sServer
43719>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniDatabaseKeyword + "=") to SQLConnection.sDatabase
43720>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")      to SQLConnection.sUserID
43721>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")      to SQLConnection.sPassword
43722>>>>>>>
43722>>>>>>>                    Case Begin
43722>>>>>>>                        Case (sDriverID = MSSQLDRV_ID)
43724>>>>>>>                            Get ParseKeyWord sConnectionString (CS_SQLIniTrustedKeyword + "=") to sVal
43725>>>>>>>                            Move (If(Uppercase(sVal) = Uppercase(CS_SQLIniConnectionYes), True, False)) to bTrusted
43726>>>>>>>                            Move bTrusted                                               to SQLConnection.bTrusted
43727>>>>>>>                            Case Break
43728>>>>>>>                        Case (sDriverID = DB2_DRV_ID)
43731>>>>>>>                            Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=") to SQLConnection.sServer
43732>>>>>>>                            Case Break
43733>>>>>>>                        Case (sDriverID = ODBC_DRV_ID)
43736>>>>>>>                            Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=") to SQLConnection.sServer
43737>>>>>>>                            If (SQLConnection.sServer = "") Begin
43739>>>>>>>                                Get ParseKeyWord sConnectionString (CS_SQLIniFileDSNKeyword  + "=") to SQLConnection.sServer
43740>>>>>>>                            End
43740>>>>>>>>
43740>>>>>>>                            Case Break
43741>>>>>>>                        Case Else
43741>>>>>>>                            Error ("Wrong driver ID passed:" * sDriverID)
43742>>>>>>>>
43742>>>>>>>                            Case Break
43743>>>>>>>                    Case End
43743>>>>>>>                End
43743>>>>>>>>
43743>>>>>>>            Loop
43744>>>>>>>>
43744>>>>>>>            Send Destroy of hoCLI
43745>>>>>>>        End
43745>>>>>>>>
43745>>>>>>>
43745>>>>>>>        Function_Return SQLConnection
43746>>>>>>>    End_Function
43747>>>>>>>
43747>>>>>>>    Function DriverIndex String sDriverID Returns Integer
43749>>>>>>>        String  sCurrentDriver
43749>>>>>>>        Integer iNumberOfDrivers iDriver iCount
43749>>>>>>>
43749>>>>>>>        Move 0 to iDriver
43750>>>>>>>        Move 0 to iCount
43751>>>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
43754>>>>>>>        For iCount from 1 to iNumberOfDrivers
43760>>>>>>>>
43760>>>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
43763>>>>>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriverID) ) Begin
43765>>>>>>>                Function_Return iCount
43766>>>>>>>            End
43766>>>>>>>>
43766>>>>>>>        Loop
43767>>>>>>>>
43767>>>>>>>
43767>>>>>>>        // If driver not previously loaded; attempt to do so now.
43767>>>>>>>        If (iDriver = 0) Begin
43769>>>>>>>            Move 0 to LastErr
43770>>>>>>>            Load_Driver sDriverID
43771>>>>>>>            // If driver could not be loaded.
43771>>>>>>>            If (LastErr = DFERR_CANT_LOAD_DLL) Begin
43773>>>>>>>                Move -1 to iCount
43774>>>>>>>            End
43774>>>>>>>>
43774>>>>>>>        End
43774>>>>>>>>
43774>>>>>>>        Function_Return iCount
43775>>>>>>>    End_Function
43776>>>>>>>
43776>>>>>>>    // This will update connection settings of the cCLIHandler object with that passed struct values.
43776>>>>>>>    Procedure UpdateConnectionString tSQLConnection SQLConnection
43778>>>>>>>        String sDriverID sConnectionID sServer sDatabase sUserID sPassword
43778>>>>>>>        Boolean bTrusted bSilent
43778>>>>>>>        Integer iRetval
43778>>>>>>>
43778>>>>>>>        Move SQLConnection.sDriverID     to sDriverID
43779>>>>>>>        Move SQLConnection.sConnectionID to sConnectionID
43780>>>>>>>        Move SQLConnection.sServer       to sServer
43781>>>>>>>        Move SQLConnection.sDatabase     to sDatabase
43782>>>>>>>        Move SQLConnection.bTrusted      to bTrusted
43783>>>>>>>        Move SQLConnection.sUserID       to sUserID
43784>>>>>>>        Move SQLConnection.sPassword     to sPassword
43785>>>>>>>        Move SQLConnection.bSilentLogin  to bSilent
43786>>>>>>>
43786>>>>>>>        Send CreateSQLConnection sDriverID sConnectionID sServer sDatabase bTrusted sUserID sPassword bSilent False
43787>>>>>>>        // Note that this message will first delete the current ConnectionID if it exists; which is needed by the cCLIHandler logic.
43787>>>>>>>        Get AutoSetConnectionID to iRetval
43788>>>>>>>    End_Procedure
43789>>>>>>>
43789>>>>>>>    // Called when the object is constructed.
43789>>>>>>>    // It will check the psDriverID for a ConnectionID and save it
43789>>>>>>>    // as psConnectionID property. It is later used whenever a login to
43789>>>>>>>    // the database is needed.
43789>>>>>>>    Function AutoSetConnectionID Returns Boolean
43791>>>>>>>        String sConnectionID sDriverID sConnectionString
43791>>>>>>>        Integer iDriver iRetval
43791>>>>>>>        Handle hoCLI
43791>>>>>>>        Boolean bOK bSilent
43791>>>>>>>
43791>>>>>>>        Get pbSilentLogin      to bSilent
43792>>>>>>>        Get psConnectionID     to sConnectionID
43793>>>>>>>        Get psConnectionString to sConnectionString
43794>>>>>>>        // Get the driver Connection ID string & set the psConnectionString property.
43794>>>>>>>        Get psDriverID to sDriverID
43795>>>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
43796>>>>>>>        If (bOK = False) Begin
43798>>>>>>>            Function_Return False
43799>>>>>>>        End
43799>>>>>>>>
43799>>>>>>>
43799>>>>>>>        Get DriverIndex sDriverID          to iDriver
43800>>>>>>>        // If driver not loaded; load it.
43800>>>>>>>        If (iDriver = 0) Begin
43802>>>>>>>            Load_Driver sDriverID
43803>>>>>>>            Get DriverIndex sDriverID      to iDriver
43804>>>>>>>        End
43804>>>>>>>>
43804>>>>>>>        // This shouldn't be possible; unless the driver.dll file is missing or something...
43804>>>>>>>        If (iDriver = 0) Begin
43806>>>>>>>            Error DFERR_PROGRAM ("The database driver could not be loaded! Connection to database failed." * sDriverID)
43807>>>>>>>>
43807>>>>>>>            Function_Return False
43808>>>>>>>        End           
43808>>>>>>>>
43808>>>>>>>            Set_Attribute DF_DRIVER_LOGIN_ON_OPEN of iDriver to True
43811>>>>>>>        
43811>>>>>>>        Get Create (RefClass(cCLIHandler)) to hoCLI
43812>>>>>>>        Set psDriverID of hoCLI            to sDriverID
43813>>>>>>>        // Delete the connection first; in case it exists
43813>>>>>>>        Get DeleteConnectionID of hoCLI sConnectionID -1 to iRetval
43814>>>>>>>        Get CreateConnectionID of hoCLI sConnectionID sConnectionString bSilent to iRetval 
43815>>>>>>>        Send Destroy of hoCLI
43816>>>>>>>
43816>>>>>>>        Function_Return (iRetval = 0)
43817>>>>>>>    End_Function
43818>>>>>>>
43818>>>>>>>    Function _SqlCheckCurrentDriver String sDriverID Returns Boolean
43820>>>>>>>        Boolean bOK
43820>>>>>>>
43820>>>>>>>        Get IsDAWSQLDriver sDriverID to bOK
43821>>>>>>>
43821>>>>>>>        If (bOK = False) Begin
43823>>>>>>>            Error DFERR_PROGRAM "Driver needs to be one of MSSQLDRV_ID, DB2_DRV_ID or ODBC_DRV_ID"
43824>>>>>>>>
43824>>>>>>>            Function_Return False
43825>>>>>>>        End
43825>>>>>>>>
43825>>>>>>>
43825>>>>>>>        Function_Return True
43826>>>>>>>    End_Function
43827>>>>>>>
43827>>>>>>>    Function IsDAWSQLDriver String sDriverID Returns Boolean
43829>>>>>>>        Boolean bOK
43829>>>>>>>        Move (sDriverID = MSSQLDRV_ID or sDriverID = DB2_DRV_ID or sDriverID = ODBC_DRV_ID) to bOK
43830>>>>>>>        Function_Return bOK
43831>>>>>>>    End_Function
43832>>>>>>>
43832>>>>>>>    Function ConstructConnectionString String sDriverID String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
43834>>>>>>>        Handle hoIniFile
43834>>>>>>>        String sConnect
43834>>>>>>>
43834>>>>>>>        Get phoSQLConnectionIniFile to hoIniFile
43835>>>>>>>        Get ConstructConnectionString of hoIniFile sDriverID sServer sDatabase bTrusted sUserID sPassword to sConnect
43836>>>>>>>
43836>>>>>>>        Function_Return sConnect
43837>>>>>>>    End_Function
43838>>>>>>>
43838>>>>>>>    // Sample sConnString: "SERVER=(local)\SQLEXPRESS;UID=dbuser;PWD=secret;DATABASE=OrderEntry;, 0"
43838>>>>>>>    // Pass a complete driver connection string
43838>>>>>>>    // Returns the following as a struct:
43838>>>>>>>    //   sServer, sDatabase, sUser, sPassword & True if Trusted_Connection is used.
43838>>>>>>>    // Finally also returns a boolean TRUE if trusted_connection=yes, else false is returned.
43838>>>>>>>    //
43838>>>>>>>    Function DeComposeConnectionString String sDriverID String sConnectionString Returns tSQLConnection
43840>>>>>>>        tSQLConnection SQLConnection
43840>>>>>>>        tSQLConnection SQLConnection
43840>>>>>>>        String sValue sConnectionID sServer sDatabase sUserID sPassword
43840>>>>>>>        Boolean bTrusted bSilent bOK
43840>>>>>>>        Integer iPos
43840>>>>>>>
43840>>>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
43841>>>>>>>        If (bOK = False) Begin
43843>>>>>>>            Function_Return SQLConnection
43844>>>>>>>        End
43844>>>>>>>>
43844>>>>>>>
43844>>>>>>>        Move False to bTrusted
43845>>>>>>>        Move False to bSilent
43846>>>>>>>
43846>>>>>>>        Case Begin
43846>>>>>>>            Case (sDriverID = MSSQLDRV_ID)
43848>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniServerKeyword + "=")   to sServer
43849>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniDatabaseKeyword + "=") to sDatabase
43850>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniTrustedKeyword + "=")  to sValue
43851>>>>>>>                Move (If(Uppercase(sValue) = "YES", True, False))                   to bTrusted
43852>>>>>>>                If (bTrusted = False) Begin
43854>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")  to sUserID
43855>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")  to sPassword
43856>>>>>>>                End
43856>>>>>>>>
43856>>>>>>>                Case Break
43857>>>>>>>
43857>>>>>>>            Case (sDriverID = ODBC_DRV_ID)
43860>>>>>>>                If (uppercase(sConnectionString) contains ("." + CS_SQLIniDSNKeyword)) Begin
43862>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniFileDSNKeyword + "=")  to sServer
43863>>>>>>>                End
43863>>>>>>>>
43863>>>>>>>                Else Begin
43864>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=")      to sServer
43865>>>>>>>                End
43865>>>>>>>>
43865>>>>>>>
43865>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniTrustedKeyword + "=")  to sValue
43866>>>>>>>                Move (If(Uppercase(sValue) = "YES", True, False))                   to bTrusted
43867>>>>>>>                If (bTrusted = False) Begin
43869>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")  to sUserID
43870>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")  to sPassword
43871>>>>>>>                End
43871>>>>>>>>
43871>>>>>>>                Case Break
43872>>>>>>>
43872>>>>>>>            Case (sDriverID = DB2_DRV_ID)
43875>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=")      to sServer
43876>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")      to sUserID
43877>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")      to sPassword
43878>>>>>>>                Case Break
43879>>>>>>>
43879>>>>>>>            Case (sDriverID = DATAFLEX_ID)    // Dummy stub.
43882>>>>>>>                Break
43883>>>>>>>        Case End
43883>>>>>>>
43883>>>>>>>        Get ParseKeyWord sConnectionString (Uppercase(CS_SQLConnectionIDText))  to sConnectionID
43884>>>>>>>
43884>>>>>>>        // bSilent?
43884>>>>>>>        Move (Pos(",0", sConnectionString))                                     to iPos
43885>>>>>>>        If (iPos = 0) Begin
43887>>>>>>>            Move (Pos(",1", sConnectionString))                                 to iPos
43888>>>>>>>        End
43888>>>>>>>>
43888>>>>>>>        If (iPos = 0) Begin
43890>>>>>>>            Move "0"                                                            to sValue
43891>>>>>>>        End
43891>>>>>>>>
43891>>>>>>>        Else Begin
43892>>>>>>>            Move (Mid(sConnectionString, 1, (iPos +1)))                         to sValue
43893>>>>>>>        End
43893>>>>>>>>
43893>>>>>>>        Move (If(sValue = 1, True, False))                                      to bSilent
43894>>>>>>>
43894>>>>>>>        Move (Trim(sDriverID))                                                  to SQLConnection.sDriverID
43895>>>>>>>        Move (Trim(sConnectionID))                                              to SQLConnection.sConnectionID
43896>>>>>>>        Move (Trim(sConnectionString))                                          to SQLConnection.sConnectionString
43897>>>>>>>        Move (Trim(sServer))                                                    to SQLConnection.sServer
43898>>>>>>>        Move (Trim(sDatabase))                                                  to SQLConnection.sDatabase
43899>>>>>>>        Move bTrusted                                                           to SQLConnection.bTrusted
43900>>>>>>>        Move (Trim(sUserID))                                                    to SQLConnection.sUserID
43901>>>>>>>        Move (Trim(sPassword))                                                  to SQLConnection.sPassword
43902>>>>>>>        Move bSilent                                                            to SQLConnection.bSilentLogin
43903>>>>>>>
43903>>>>>>>        Function_Return SQLConnection
43904>>>>>>>    End_Function
43905>>>>>>>
Including file: ParseKeyWord.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ParseKeyWord.pkg)
43905>>>>>>>>
43905>>>>>>>>Function ParseKeyWord String sConnect String sKeyWord Returns String
43907>>>>>>>>    Integer iStart iEnd
43907>>>>>>>>    String sRetval
43907>>>>>>>>
43907>>>>>>>>    Move (Trim(sConnect)) to sConnect
43908>>>>>>>>    Move (Pos(Uppercase(sKeyWord), Uppercase(sConnect)))  to iStart
43909>>>>>>>>    If (iStart = 0) Begin
43911>>>>>>>>        Function_Return ""
43912>>>>>>>>    End
43912>>>>>>>>>
43912>>>>>>>>    Move (Left(sConnect, (iStart -1 + Length(sKeyWord)))) to sRetval
43913>>>>>>>>    Move (Replace(sRetval, sConnect, "")) to sRetval
43914>>>>>>>>    If (sKeyWord = Uppercase(CS_SQLConnectionIDText)) Begin
43916>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
43917>>>>>>>>    End
43917>>>>>>>>>
43917>>>>>>>>    Else Begin
43918>>>>>>>>        Move (Pos(";", sRetval))          to iEnd
43919>>>>>>>>    End
43919>>>>>>>>>
43919>>>>>>>>    If (iEnd = 0 and (sRetval contains ",")) Begin
43921>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
43922>>>>>>>>        Decrement iEnd
43923>>>>>>>>    End
43923>>>>>>>>>
43923>>>>>>>>    If (iEnd <> 0) Begin
43925>>>>>>>>        Move (Left(sRetval, (iEnd -1)))   to sRetval
43926>>>>>>>>    End
43926>>>>>>>>>
43926>>>>>>>>    Move (Replace("=", sRetval, ""))      to sRetval
43927>>>>>>>>
43927>>>>>>>>    Function_Return (Trim(sRetval))
43928>>>>>>>>End_Function
43929>>>>>>>>
43929>>>>>>>>
43929>>>>>>>
43929>>>>>>>    // To update the SQLSettings.ini file with updated connection data (SQLConnection struct data).
43929>>>>>>>    Function SQLIniFileSetDefaultConnection String sConnectionID Returns Boolean
43931>>>>>>>        Handle ho
43931>>>>>>>        Integer iIndex
43931>>>>>>>        Boolean bRetval bOK
43931>>>>>>>        tSQLConnection SQLConnection
43931>>>>>>>        tSQLConnection SQLConnection
43931>>>>>>>
43931>>>>>>>        Get pSQLConnection to SQLConnection
43932>>>>>>>        Get phoSQLConnectionIniFile to ho
43933>>>>>>>        Get SQLIniFileConnectionIDIndex of ho sConnectionID to iIndex
43934>>>>>>>        If (iIndex = -1) Begin
43936>>>>>>>            Function_Return False
43937>>>>>>>        End
43937>>>>>>>>
43937>>>>>>>
43937>>>>>>>        Get SQLIniFileUpdateConnection of ho SQLConnection to bRetval
43938>>>>>>>        Send UpdateConnectionString SQLConnection
43939>>>>>>>        If (ghoConnection > 0) Begin
43941>>>>>>>            Get ConnectionIdIndex of ghoConnection SQLConnection.sConnectionID to iIndex
43942>>>>>>>            If (iIndex <> -1) Begin
43944>>>>>>>                Get RedirectConnectionId of ghoConnection SQLConnection.sConnectionID (SQLConnection.sServer + ";" + CS_SQLIniDatabaseKeyword + "=" + SQLConnection.sDatabase) SQLConnection.sUserID SQLConnection.sPassword SQLConnection.bTrusted True to bOK
43945>>>>>>>            End
43945>>>>>>>>
43945>>>>>>>        End
43945>>>>>>>>
43945>>>>>>>
43945>>>>>>>        Function_Return bRetval
43946>>>>>>>    End_Function
43947>>>>>>>
43947>>>>>>>    Procedure Set pbDFConnid Boolean bState
43949>>>>>>>        Set pbDFConnid of (phoSQLConnectionIniFile(Self)) to bState
43950>>>>>>>    End_Procedure
43951>>>>>>>    
43951>>>>>>>    Function pbDFConnid Returns Boolean
43953>>>>>>>        Boolean bState
43953>>>>>>>        Get pbDFConnid of (phoSQLConnectionIniFile(Self)) to bState
43954>>>>>>>        Function_Return bState
43955>>>>>>>    End_Function
43956>>>>>>>
43956>>>>>>>End_Class
43957>>>>>Use vWin32fh.pkg
43957>>>>>Use Dfabout.pkg
Including file: DfAbout.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\DFAbout\DfAbout.pkg)
43957>>>>>>>Use LanguageText.pkg
43957>>>>>>>Use Windows.pkg
43957>>>>>>>Use Dfclient.pkg
Including file: Dfclient.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfclient.pkg)
43957>>>>>>>>>Use Windows.pkg
43957>>>>>>>>>Use DfPanel.pkg
43957>>>>>>>>>Use EnClient.pkg
Including file: Enclient.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Enclient.pkg)
43957>>>>>>>>>>>Use windows.pkg
43957>>>>>>>>>>>Use NESTING.pkg       //include DEO nesting standard support module
Including file: nesting.pkg    (C:\Program Files\DataFlex 24.0\Pkg\nesting.pkg)
43957>>>>>>>>>>>>>Use VDFBase.pkg
43957>>>>>>>>>>>>>
43957>>>>>>>>>>>>>Class nesting_mixin is a mixin
43958>>>>>>>>>>>>>    
43958>>>>>>>>>>>>>    //   Component_State indicates if this object has a parent object which is
43958>>>>>>>>>>>>>    //   also a data-entry object.
43958>>>>>>>>>>>>>    //
43958>>>>>>>>>>>>>    //   Has_Components_State indicates if this object has at least one child-
43958>>>>>>>>>>>>>    //   object which is also a data-entry object.
43958>>>>>>>>>>>>>    //
43958>>>>>>>>>>>>>    //   First_DEO and Last_DEO are used temporarily during the searches for
43958>>>>>>>>>>>>>    //   the first and last data-entry object children of this object (see
43958>>>>>>>>>>>>>    //   Find_First_DEO, Find_Last_DEO, Inquire_First_DEO and Inquire_Last_DEO).
43958>>>>>>>>>>>>>    //
43958>>>>>>>>>>>>>    Procedure define_nesting
43960>>>>>>>>>>>>>        Property Integer Component_State        0
43961>>>>>>>>>>>>>        Property Integer Has_Components_State   0
43962>>>>>>>>>>>>>        Property Integer First_DEO              0
43963>>>>>>>>>>>>>        Property Integer Last_DEO               0
43964>>>>>>>>>>>>>        
43964>>>>>>>>>>>>>        // Stop_ui support - Moved from its own mixin package.
43964>>>>>>>>>>>>>        Property Integer Stop_UI_State False
43965>>>>>>>>>>>>>        
43965>>>>>>>>>>>>>    End_Procedure
43966>>>>>>>>>>>>>    
43966>>>>>>>>>>>>>    
43966>>>>>>>>>>>>>    //   This procedure is used to locate the first data-entry object among
43966>>>>>>>>>>>>>    //   this object's siblings (its parent's children).
43966>>>>>>>>>>>>>    //
43966>>>>>>>>>>>>>    //   This procedure is typically invoked via the BROADCAST command from
43966>>>>>>>>>>>>>    //   the Find_First_DEO function of this object's parent.
43966>>>>>>>>>>>>>    //
43966>>>>>>>>>>>>>    Procedure inquire_first_DEO Integer obj# Integer recurseClients
43968>>>>>>>>>>>>>        If (focus_mode(Self) = FOCUSABLE) Begin
43970>>>>>>>>>>>>>            If (recurseClients and client_area_state(Self)) ;                Broadcast_Focus Send inquire_first_DEO obj# recurseClients
43974>>>>>>>>>>>>>            Else Begin
43975>>>>>>>>>>>>>                Set first_DEO of obj# to Self
43976>>>>>>>>>>>>>                Procedure_Return 1  //to stop broadcast, since this object answered
43977>>>>>>>>>>>>>            End
43977>>>>>>>>>>>>>>
43977>>>>>>>>>>>>>        End
43977>>>>>>>>>>>>>>
43977>>>>>>>>>>>>>    End_Procedure
43978>>>>>>>>>>>>>    
43978>>>>>>>>>>>>>    //   If this object is focusable, set Lastt_DEO to this object's id.
43978>>>>>>>>>>>>>    //
43978>>>>>>>>>>>>>    //   This procedure is used to locate the last data-entry object among
43978>>>>>>>>>>>>>    //   this object's siblings (its parent's children).
43978>>>>>>>>>>>>>    //
43978>>>>>>>>>>>>>    //   This procedure is typically invoked via the BROADCAST command from
43978>>>>>>>>>>>>>    //   the Find_Last_DEO function of this object's parent.
43978>>>>>>>>>>>>>    //
43978>>>>>>>>>>>>>    Procedure inquire_last_DEO Integer obj# Integer recurseClients
43980>>>>>>>>>>>>>        If (focus_mode(Self) = FOCUSABLE) Begin
43982>>>>>>>>>>>>>            If (recurseClients and client_area_state(Self)) ;                Broadcast_Focus Send inquire_last_DEO obj# recurseClients
43986>>>>>>>>>>>>>            Else ;                Set last_DEO of obj# to Self
43988>>>>>>>>>>>>>        End
43988>>>>>>>>>>>>>>
43988>>>>>>>>>>>>>    End_Procedure
43989>>>>>>>>>>>>>    
43989>>>>>>>>>>>>>    //   This function returns the object id of the first data-entry object
43989>>>>>>>>>>>>>    //   which is a child of this object, or 0.
43989>>>>>>>>>>>>>    //
43989>>>>>>>>>>>>>    //   This function 'searches' by broadcasting Inquire_First_DEO, which
43989>>>>>>>>>>>>>    //   returns a 1 to terminate the broadcast after the first data-entry
43989>>>>>>>>>>>>>    //   object has been located.
43989>>>>>>>>>>>>>    //
43989>>>>>>>>>>>>>    Function find_first_DEO Returns Integer
43991>>>>>>>>>>>>>        Set First_DEO to 0
43992>>>>>>>>>>>>>        Broadcast_Focus Send inquire_first_DEO Self False //sets First_DEO property
43994>>>>>>>>>>>>>        Function_Return (first_deo(Self))
43995>>>>>>>>>>>>>    End_Function
43996>>>>>>>>>>>>>    
43996>>>>>>>>>>>>>    
43996>>>>>>>>>>>>>    //   This function returns the object id of the last data-entry object
43996>>>>>>>>>>>>>    //   which is a child of this object, or 0.
43996>>>>>>>>>>>>>    //
43996>>>>>>>>>>>>>    //   This function 'searches' by broadcasting Inquire_Last_DEO, which sets
43996>>>>>>>>>>>>>    //   the property Last_DEO.  Thus, the last object reached by the broadcast
43996>>>>>>>>>>>>>    //   is the last value to be set into Last_DEO.
43996>>>>>>>>>>>>>    //
43996>>>>>>>>>>>>>    Function find_last_DEO Returns Integer
43998>>>>>>>>>>>>>        Set Last_DEO to 0
43999>>>>>>>>>>>>>        Broadcast_Focus Send inquire_last_DEO Self False //sets Last_DEO property
44001>>>>>>>>>>>>>        Function_Return (Last_DEO(Self))
44002>>>>>>>>>>>>>    End_Function
44003>>>>>>>>>>>>>    
44003>>>>>>>>>>>>>    //   Removes this object from the screen and focus-tree, and also removes
44003>>>>>>>>>>>>>    //   this object's children from the screen and focus-tree.
44003>>>>>>>>>>>>>    //
44003>>>>>>>>>>>>>    //   If no flag argument was passed, AREA_TYPE becomes the flag parameter.
44003>>>>>>>>>>>>>    //
44003>>>>>>>>>>>>>    //   Client-objects already automatically remove their children from the
44003>>>>>>>>>>>>>    //   focus-tree.
44003>>>>>>>>>>>>>    //
44003>>>>>>>>>>>>>    Procedure Deactivate Integer eDeactivateScope Returns Integer
44005>>>>>>>>>>>>>        Integer retval Fg
44005>>>>>>>>>>>>>        If (num_arguments > 0) ;            Move eDeactivateScope to Fg
44008>>>>>>>>>>>>>        Else ;            Move AREA_TYPE to Fg
44010>>>>>>>>>>>>>        Forward Get msg_deactivate fg to retval
44012>>>>>>>>>>>>>        
44012>>>>>>>>>>>>>        If ( not(retval) and (fg = 0) ) Begin
44014>>>>>>>>>>>>>            
44014>>>>>>>>>>>>>            // This broadcast no_stop is probably not ever used, but would be if a
44014>>>>>>>>>>>>>            // child was in the focus tree, but not as a focus-child. weird, but needs be here.
44014>>>>>>>>>>>>>            If ( client_Area_state(Self)=0) ;                Broadcast NO_STOP Send deactivate 0
44019>>>>>>>>>>>>>            
44019>>>>>>>>>>>>>            If ( Stop_UI_State(Self) ) ;                Send Stop_Ui
44022>>>>>>>>>>>>>        End
44022>>>>>>>>>>>>>>
44022>>>>>>>>>>>>>        Procedure_Return retval
44023>>>>>>>>>>>>>    End_Procedure
44024>>>>>>>>>>>>>    
44024>>>>>>>>>>>>>    //   This procedure marks an object as a child data-entry object, and
44024>>>>>>>>>>>>>    //   attempts to use its parent's Server if this object has no Server.
44024>>>>>>>>>>>>>    //   Typically sent via broadcast from parent DEO.
44024>>>>>>>>>>>>>    //
44024>>>>>>>>>>>>>    Procedure Mark_As_Component
44026>>>>>>>>>>>>>        Set Component_State to True
44027>>>>>>>>>>>>>        Delegate Set Has_Components_State to True
44029>>>>>>>>>>>>>    End_Procedure
44030>>>>>>>>>>>>>    
44030>>>>>>>>>>>>>    
44030>>>>>>>>>>>>>    //   This procedure marks child data-entry objects as components.
44030>>>>>>>>>>>>>    //
44030>>>>>>>>>>>>>    //   The child data-entry objects must understand Mark_As_Component as a
44030>>>>>>>>>>>>>    //   method of setting their Component_State to TRUE.
44030>>>>>>>>>>>>>    Procedure Mark_Components
44032>>>>>>>>>>>>>        Set Component_State to False
44033>>>>>>>>>>>>>        Broadcast Send Mark_As_Component
44035>>>>>>>>>>>>>    End_Procedure
44036>>>>>>>>>>>>>End_Class
44037>>>>>>>>>>>>>
44037>>>>>>>>>>>Use NAVIGATE.pkg      //include DEO navigation standard support module
Including file: navigate.pkg    (C:\Program Files\DataFlex 24.0\Pkg\navigate.pkg)
44037>>>>>>>>>>>>>
44037>>>>>>>>>>>>>
44037>>>>>>>>>>>>>
44037>>>>>>>>>>>>>Use VDFBase.pkg
44037>>>>>>>>>>>>>
44037>>>>>>>>>>>>>
44037>>>>>>>>>>>>>Register_Function verify_data_loss Returns Integer
44037>>>>>>>>>>>>>
44037>>>>>>>>>>>>>Class navigate_mixin is a mixin
44038>>>>>>>>>>>>>    
44038>>>>>>>>>>>>>    Procedure define_navigation
44040>>>>>>>>>>>>>        On_Key kBegin_of_Panel    Send Beginning_of_Panel PRIVATE
44041>>>>>>>>>>>>>        On_Key kCancel            Send Request_Cancel     PRIVATE
44042>>>>>>>>>>>>>        On_Key kEnd_of_Panel      Send End_of_Panel       PRIVATE
44043>>>>>>>>>>>>>        On_Key kExit_Function     Send Exit_Function      PRIVATE
44044>>>>>>>>>>>>>        On_Key kSwitch            Send Switch             PRIVATE
44045>>>>>>>>>>>>>        On_Key kSwitch_Back       Send Switch_Back        PRIVATE
44046>>>>>>>>>>>>>        Property Integer Auto_Top_Panel_State             True
44047>>>>>>>>>>>>>        Property Integer private.Verify_Exit_Msg          0
44048>>>>>>>>>>>>>    End_Procedure
44049>>>>>>>>>>>>>    
44049>>>>>>>>>>>>>    Function Verify_Exit_msg Returns Integer
44051>>>>>>>>>>>>>        Integer msg#
44051>>>>>>>>>>>>>        Get private.verify_exit_msg to msg#
44052>>>>>>>>>>>>>        If (msg# = 0 and Component_State(Self)) ;            Delegate Get verify_exit_msg to msg#
44056>>>>>>>>>>>>>        Function_Return msg#
44057>>>>>>>>>>>>>    End_Function
44058>>>>>>>>>>>>>    
44058>>>>>>>>>>>>>    
44058>>>>>>>>>>>>>    Procedure Set Verify_Exit_msg Integer msg#
44060>>>>>>>>>>>>>        Set private.verify_Exit_Msg to msg#
44061>>>>>>>>>>>>>    End_Procedure
44062>>>>>>>>>>>>>    
44062>>>>>>>>>>>>>    
44062>>>>>>>>>>>>>    Function Verify_Exit Returns Integer
44064>>>>>>>>>>>>>        Integer msg#
44064>>>>>>>>>>>>>        Get verify_Exit_msg to msg#
44065>>>>>>>>>>>>>        If (msg# <> 0) ;            Get msg# to msg#
44068>>>>>>>>>>>>>        Function_Return msg#
44069>>>>>>>>>>>>>    End_Function
44070>>>>>>>>>>>>>    
44070>>>>>>>>>>>>>    
44070>>>>>>>>>>>>>    
44070>>>>>>>>>>>>>    
44070>>>>>>>>>>>>>    //   The deactivate message-send passes AREA_FLAG, which means that we want
44070>>>>>>>>>>>>>    //   to deactivate the object in the focus tree which is either a scope
44070>>>>>>>>>>>>>    //   (i.e. Scope_State = TRUE) or a pop-up (i.e. PopUp_State = TRUE), and
44070>>>>>>>>>>>>>    //   which is closest to this object in an 'upward' direction (i.e.
44070>>>>>>>>>>>>>    //   client/parent, not child or sibling).
44070>>>>>>>>>>>>>    //
44070>>>>>>>>>>>>>    Procedure Request_Cancel
44072>>>>>>>>>>>>>        Integer foc#
44072>>>>>>>>>>>>>        If (verify_exit(Self) = 0) Begin
44074>>>>>>>>>>>>>            Send deactivate AREA_FLAG
44075>>>>>>>>>>>>>            Get focus of desktop to foc#
44076>>>>>>>>>>>>>            If (foc# and skip_State(foc#)) ;                Send switch to foc#
44079>>>>>>>>>>>>>        End
44079>>>>>>>>>>>>>>
44079>>>>>>>>>>>>>    End_Procedure
44080>>>>>>>>>>>>>    
44080>>>>>>>>>>>>>    
44080>>>>>>>>>>>>>    
44080>>>>>>>>>>>>>    Procedure Exit_Function
44082>>>>>>>>>>>>>        Send request_cancel
44083>>>>>>>>>>>>>    End_Procedure
44084>>>>>>>>>>>>>    
44084>>>>>>>>>>>>>End_Class
44085>>>>>>>>>>>>>
44085>>>>>>>>>>>>>
44085>>>>>>>>>>>>>
44085>>>>>>>>>>>Use SERVER.pkg        //include Server support module
Including file: Server.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Server.pkg)
44085>>>>>>>>>>>>>
44085>>>>>>>>>>>>>Use VDFBase.pkg
44085>>>>>>>>>>>>>Use brdcster.pkg
Including file: brdcster.pkg    (C:\Program Files\DataFlex 24.0\Pkg\brdcster.pkg)
44085>>>>>>>>>>>>>>>Use Set.pkg
44085>>>>>>>>>>>>>>>
44085>>>>>>>>>>>>>>>//   This class is defined as a subclass of Set with a C language handler
44085>>>>>>>>>>>>>>>//   providing additional behavior.
44085>>>>>>>>>>>>>>>//
44085>>>>>>>>>>>>>>>Class Broadcaster is a Set 0 0 Broadcast_Handler
44086>>>>>>>>>>>>>>>End_Class
44087>>>>>>>>>>>>>>>
44087>>>>>>>>>>>>>>>
44087>>>>>>>>>>>>>>>Function make_broadcaster for cDesktop Returns Integer
44089>>>>>>>>>>>>>>>    Integer obj#
44089>>>>>>>>>>>>>>>    Object broadcasterTemplate is a broadcaster
44091>>>>>>>>>>>>>>>        Move Self to obj#
44092>>>>>>>>>>>>>>>    End_Object
44093>>>>>>>>>>>>>>>    Function_Return obj#
44094>>>>>>>>>>>>>>>End_Function
44095>>>>>>>>>>>>>>>
44095>>>>>>>>>>>>>>>
44095>>>>>>>>>>>>>
44095>>>>>>>>>>>>>Register_Procedure Item_Find Integer mode Integer datafile Integer datafield ;    Integer entUpdtFlag Integer errFlag Integer dfrdFlag
44095>>>>>>>>>>>>>Register_Procedure Add_User_Interface Integer obj#
44095>>>>>>>>>>>>>Register_Procedure Remove_User_Interface Integer obj#
44095>>>>>>>>>>>>>Register_Procedure Clear
44095>>>>>>>>>>>>>Register_Function  Component_State Returns Integer
44095>>>>>>>>>>>>>Register_Function  Can_Delete Returns Integer
44095>>>>>>>>>>>>>Register_Object Element
44095>>>>>>>>>>>>>
44095>>>>>>>>>>>>>// Values for DSO_Detach_Mode
44095>>>>>>>>>>>>>//   DETACH_NEVER        = Never
44095>>>>>>>>>>>>>//   DETACH_IF_ALLOWED   = do if changed_state=F and DEO Static_Server
44095>>>>>>>>>>>>>//   DETACH_IF_NO_CHANGE = do if changed_state=F
44095>>>>>>>>>>>>>//   DETACH_ALWAYS       = do it no matter what
44095>>>>>>>>>>>>>
44095>>>>>>>>>>>>>Enumeration_List
44095>>>>>>>>>>>>>    Define Detach_Never
44095>>>>>>>>>>>>>    Define Detach_If_No_Change
44095>>>>>>>>>>>>>    Define Detach_Always
44095>>>>>>>>>>>>>    Define Detach_If_Allowed
44095>>>>>>>>>>>>>End_Enumeration_List
44095>>>>>>>>>>>>>
44095>>>>>>>>>>>>>
44095>>>>>>>>>>>>>Class server_mixin is a mixin
44096>>>>>>>>>>>>>    
44096>>>>>>>>>>>>>    //   Server is the object id of the database agent for this object.
44096>>>>>>>>>>>>>    //
44096>>>>>>>>>>>>>    //   Watched_Servers is a set of object ids for database agents whose state
44096>>>>>>>>>>>>>    //   must also be monitored by this object (but which never receive requests
44096>>>>>>>>>>>>>    //   directly from this object, unlike the Server).
44096>>>>>>>>>>>>>    //
44096>>>>>>>>>>>>>    //   Servers_Scanned determines if the items of this object have been
44096>>>>>>>>>>>>>    //   scanned to see if this object should be connected to other database
44096>>>>>>>>>>>>>    //   agents as 'just watching' (see Watched_Servers, above).
44096>>>>>>>>>>>>>    //
44096>>>>>>>>>>>>>    //   Auto_Fill_State determines if this object should always automatically
44096>>>>>>>>>>>>>    //   fill itself with data when it is activated.
44096>>>>>>>>>>>>>    //
44096>>>>>>>>>>>>>    //   Deferred_State determines if this object's browsing in database files
44096>>>>>>>>>>>>>    //   should be reflected immediately in this object's database agent (and
44096>>>>>>>>>>>>>    //   the agents' agents, etc.), or not.
44096>>>>>>>>>>>>>    //
44096>>>>>>>>>>>>>    //
44096>>>>>>>>>>>>>    Procedure define_server
44098>>>>>>>>>>>>>        Integer obj#
44098>>>>>>>>>>>>>        Property Integer private.Server           0
44099>>>>>>>>>>>>>        Property Integer Watched_Servers          0
44100>>>>>>>>>>>>>        // used to send Set Changed_State to "foreign" servers, while Watched_Servers
44100>>>>>>>>>>>>>        // is used for sending messages from the DDO to DEOs (there are more of them)
44100>>>>>>>>>>>>>        Property Integer ChangedStateWatched_Servers     0
44101>>>>>>>>>>>>>        Property Integer private.Servers_Scanned  0
44102>>>>>>>>>>>>>        
44102>>>>>>>>>>>>>        Property Integer Auto_Fill_State False
44103>>>>>>>>>>>>>        Property Boolean pbAutoFillOnInit True      // Used to tell DDO's that we want autofill on initialization when DEO is attaching
44104>>>>>>>>>>>>>        
44104>>>>>>>>>>>>>        Property Integer Deferred_State  False
44105>>>>>>>>>>>>>        
44105>>>>>>>>>>>>>        // added to support DEO request-delegation. This is set true
44105>>>>>>>>>>>>>        // if the server is explicitly set in this DEO (normally via a
44105>>>>>>>>>>>>>        // USING parameter).
44105>>>>>>>>>>>>>        Property Integer explicit_server_state False
44106>>>>>>>>>>>>>        
44106>>>>>>>>>>>>>        // Since this package's SET changed_state is using change_
44106>>>>>>>>>>>>>        // disabled_state we might as well define it here. This gets changed
44106>>>>>>>>>>>>>        // by Clear_mx to support setting of defaults without changing the
44106>>>>>>>>>>>>>        // objects changed_state.
44106>>>>>>>>>>>>>        
44106>>>>>>>>>>>>>        // This stops changed_state from getting changed. It allows item_changed_
44106>>>>>>>>>>>>>        // state to chagne without the object's changed_state getting changed.
44106>>>>>>>>>>>>>        // This should be considered protected (i.e., likely to change). The new
44106>>>>>>>>>>>>>        // messages Entry_Defaults and Set Default_Value are both public and use
44106>>>>>>>>>>>>>        // this. Try to use these messages instead of this property.
44106>>>>>>>>>>>>>        Property Integer Change_Disabled_State  False
44107>>>>>>>>>>>>>        
44107>>>>>>>>>>>>>        // If true DEO will not disconnect from server when deactivating.
44107>>>>>>>>>>>>>        // If true View should handles attaching and detaching.
44107>>>>>>>>>>>>>        Register_Function Default_static_server_state Returns Integer
44107>>>>>>>>>>>>>        Property Integer Static_Server_State  (Default_Static_Server_State(Self))
44108>>>>>>>>>>>>>        
44108>>>>>>>>>>>>>        // Properties to better support tables. If Refresh_dirty_state
44108>>>>>>>>>>>>>        // is true then the list object needs refreshing (because it was inactive
44108>>>>>>>>>>>>>        // and changes were made that were not updated). After add_focus is
44108>>>>>>>>>>>>>        // complete the add_focus_msg is sent (allows tables to initialize the
44108>>>>>>>>>>>>>        // list).
44108>>>>>>>>>>>>>        Property Integer Refresh_dirty_state  True // when not active/dirty
44109>>>>>>>>>>>>>        Property Integer Add_focus_msg        0    // by dflt no message
44110>>>>>>>>>>>>>        
44110>>>>>>>>>>>>>        // This will call a stub procedure which will be augmented (or replaced)
44110>>>>>>>>>>>>>        // by the xdeo mixins
44110>>>>>>>>>>>>>        Send Define_Extended_DEO_Mixin
44111>>>>>>>>>>>>>        
44111>>>>>>>>>>>>>    End_Procedure
44112>>>>>>>>>>>>>    
44112>>>>>>>>>>>>>    
44112>>>>>>>>>>>>>    Procedure remove_deo_from_server
44114>>>>>>>>>>>>>        Integer obj# isclient wsrvr
44114>>>>>>>>>>>>>        Get Server to obj#
44115>>>>>>>>>>>>>        // as of 17.0, containers will be added as a DEO so it receives the Refresh message
44115>>>>>>>>>>>>>        If (obj# <> 0) ;            Send remove_user_interface to obj# Self
44118>>>>>>>>>>>>>        Get Watched_Servers to wsrvr
44119>>>>>>>>>>>>>        If wsrvr ;            Send remove_user_interface to wsrvr Self True // TRUE for watchers
44122>>>>>>>>>>>>>        Set Refresh_dirty_state to True
44123>>>>>>>>>>>>>    End_Procedure
44124>>>>>>>>>>>>>    
44124>>>>>>>>>>>>>    
44124>>>>>>>>>>>>>    //   This function returns the object id of the database server which
44124>>>>>>>>>>>>>    //   encloses this object, if any.  Note that only the Data_Set class
44124>>>>>>>>>>>>>    //   defines this function to return anything other than 0.
44124>>>>>>>>>>>>>    //
44124>>>>>>>>>>>>>    //   This function is used with delegation to locate the Data_Set
44124>>>>>>>>>>>>>    //   which is the closest parent of this object.
44124>>>>>>>>>>>>>    //
44124>>>>>>>>>>>>>    Function Find_Server Returns Integer
44126>>>>>>>>>>>>>    End_Function
44127>>>>>>>>>>>>>    
44127>>>>>>>>>>>>>    Register_Function Server Returns Integer
44127>>>>>>>>>>>>>    
44127>>>>>>>>>>>>>    
44127>>>>>>>>>>>>>    //   This function returns the object id of the database agent of this object,
44127>>>>>>>>>>>>>    //   or 0.
44127>>>>>>>>>>>>>    Function Locate_Server Returns Integer
44129>>>>>>>>>>>>>        Function_Return (Server(Self))
44130>>>>>>>>>>>>>    End_Function
44131>>>>>>>>>>>>>    
44131>>>>>>>>>>>>>    
44131>>>>>>>>>>>>>    //   This function returns the object id of the database agent of this
44131>>>>>>>>>>>>>    //   object, or 0.
44131>>>>>>>>>>>>>    //   If this object's Server is 0, this object's parent's Server is
44131>>>>>>>>>>>>>    //   returned, if any.
44131>>>>>>>>>>>>>    //
44131>>>>>>>>>>>>>    // Notes
44131>>>>>>>>>>>>>    //
44131>>>>>>>>>>>>>    //   This function is used to allow nested data-entry objects to use the
44131>>>>>>>>>>>>>    //   database agent defined by their parent object.
44131>>>>>>>>>>>>>    //
44131>>>>>>>>>>>>>    Function Server Returns Integer
44133>>>>>>>>>>>>>        Integer obj#
44133>>>>>>>>>>>>>        Get private.Server to obj#
44134>>>>>>>>>>>>>        If (obj# = 0 and Component_State(Self)) ;            Function_Return (Locate_Server(parent(Self)))
44137>>>>>>>>>>>>>        Function_Return obj#
44138>>>>>>>>>>>>>    End_Function
44139>>>>>>>>>>>>>    
44139>>>>>>>>>>>>>    
44139>>>>>>>>>>>>>    //   This procedure sets the value of the Server property of this object,
44139>>>>>>>>>>>>>    //   notifying child-objects of the change, and destroying and creating
44139>>>>>>>>>>>>>    //   connections with database agents, as required.
44139>>>>>>>>>>>>>    //
44139>>>>>>>>>>>>>    //   If the Server of this object is changed while this object is inactive,
44139>>>>>>>>>>>>>    //   no notification of child-objects is required or performed.
44139>>>>>>>>>>>>>    Procedure Set Server Integer newVal
44141>>>>>>>>>>>>>        Integer oldVal
44141>>>>>>>>>>>>>        Set explicit_server_state to (newVal <> 0)
44142>>>>>>>>>>>>>        Get Server to oldVal
44143>>>>>>>>>>>>>        If (newVal <> 0) ;            Set private.Server to (object_id(newVal))
44146>>>>>>>>>>>>>        Else ;            Set private.Server to newVal
44148>>>>>>>>>>>>>        If (active_state(Self)) Begin
44150>>>>>>>>>>>>>            Broadcast Send server_changed oldVal newVal
44152>>>>>>>>>>>>>            If (oldVal <> 0) ;                Send remove_deo_from_server  //detach from current server
44155>>>>>>>>>>>>>            If (newval <> 0) ;                Send attach_deo_to_server    //attach to new server
44158>>>>>>>>>>>>>        End
44158>>>>>>>>>>>>>>
44158>>>>>>>>>>>>>    End_Procedure
44159>>>>>>>>>>>>>    
44159>>>>>>>>>>>>>    //   This procedure servers as notification of a change in the connection
44159>>>>>>>>>>>>>    //   of this object's parent to its database agent.  If this object uses
44159>>>>>>>>>>>>>    //   its parent's database agent by default (see the Server and Find_Server
44159>>>>>>>>>>>>>    //   functions, above), it must disconnect from the old agent and connect
44159>>>>>>>>>>>>>    //   with the new agent.
44159>>>>>>>>>>>>>    Procedure server_changed Integer oldVal Integer newVal
44161>>>>>>>>>>>>>        Integer oldSrvr
44161>>>>>>>>>>>>>        // as of 17.0, containers will be added as a DEO so it receives the Refresh message
44161>>>>>>>>>>>>>        Get private.Server to oldSrvr
44162>>>>>>>>>>>>>        If (oldSrvr = 0) Begin  //assumes Server(self) = oldVal by deleg
44164>>>>>>>>>>>>>            If (oldVal <> 0) ;                Send remove_user_interface to oldVal Self
44167>>>>>>>>>>>>>            If (newVal <> 0) ;                Send add_user_interface to newVal Self
44170>>>>>>>>>>>>>        End
44170>>>>>>>>>>>>>>
44170>>>>>>>>>>>>>    End_Procedure
44171>>>>>>>>>>>>>    
44171>>>>>>>>>>>>>    
44171>>>>>>>>>>>>>    //   This procedure empties the Watched_Servers broadcaster, after
44171>>>>>>>>>>>>>    //   detaching this object from all of the broadcaster's elements.
44171>>>>>>>>>>>>>    //   This procedure is invoked by Find_Servers_to_Watch, in preparation
44171>>>>>>>>>>>>>    //   for a scan. Deletes both sets of watched servers
44171>>>>>>>>>>>>>    //
44171>>>>>>>>>>>>>    Procedure delete_watched_servers
44173>>>>>>>>>>>>>        Integer vis#
44173>>>>>>>>>>>>>        
44173>>>>>>>>>>>>>        Get watched_servers to vis#
44174>>>>>>>>>>>>>        If vis# Begin
44176>>>>>>>>>>>>>            Send Remove_User_Interface to vis# Self True //detach from all, TRUE for watchers
44177>>>>>>>>>>>>>            Set broadcast_state of vis# to False
44178>>>>>>>>>>>>>            Send delete_Data to vis#                    //empty it
44179>>>>>>>>>>>>>            Set broadcast_state of vis# to True
44180>>>>>>>>>>>>>        End
44180>>>>>>>>>>>>>>
44180>>>>>>>>>>>>>        
44180>>>>>>>>>>>>>        Get ChangedStateWatched_Servers to vis#
44181>>>>>>>>>>>>>        If vis# Begin
44183>>>>>>>>>>>>>            Set broadcast_state of vis# to False
44184>>>>>>>>>>>>>            Send delete_Data to vis#                    //empty it
44185>>>>>>>>>>>>>            Set broadcast_state of vis# to True
44186>>>>>>>>>>>>>        End
44186>>>>>>>>>>>>>>
44186>>>>>>>>>>>>>    End_Procedure
44187>>>>>>>>>>>>>    
44187>>>>>>>>>>>>>    //   This procedure adds the specified object id (obj#) to this object's
44187>>>>>>>>>>>>>    //   set of database agents who are merely 'watched', and establishes a
44187>>>>>>>>>>>>>    //   connection between the database agent and this object.
44187>>>>>>>>>>>>>    Procedure add_watched_server Integer obj#
44189>>>>>>>>>>>>>        Integer vis# ndx
44189>>>>>>>>>>>>>        Get watched_servers to vis#
44190>>>>>>>>>>>>>        // if w server does not exist, first create it
44190>>>>>>>>>>>>>        If (Vis# = 0) Begin
44192>>>>>>>>>>>>>            Get Create of Desktop U_Broadcaster to Vis#
44193>>>>>>>>>>>>>            Set Watched_Servers to Vis#
44194>>>>>>>>>>>>>        End
44194>>>>>>>>>>>>>>
44194>>>>>>>>>>>>>        //
44194>>>>>>>>>>>>>        Set broadcast_state of vis# to False
44195>>>>>>>>>>>>>        Get find_element of vis# obj# to ndx
44196>>>>>>>>>>>>>        If (ndx < 0) ;            Send add_element to vis# obj#
44199>>>>>>>>>>>>>        Set broadcast_state of vis# to True
44200>>>>>>>>>>>>>        If (ndx lt 0 and active_State(Self)) ;            Send add_user_interface to obj# Self True // TRUE for watchers
44203>>>>>>>>>>>>>    End_Procedure
44204>>>>>>>>>>>>>    
44204>>>>>>>>>>>>>    Procedure add_ChangedStateWatched_Servers Integer obj#
44206>>>>>>>>>>>>>        Integer vis# ndx
44206>>>>>>>>>>>>>        Get ChangedStateWatched_Servers to vis#
44207>>>>>>>>>>>>>        If (Vis# = 0) Begin
44209>>>>>>>>>>>>>            Get Create of Desktop U_Broadcaster to Vis#
44210>>>>>>>>>>>>>            Set ChangedStateWatched_Servers to Vis#
44211>>>>>>>>>>>>>        End
44211>>>>>>>>>>>>>>
44211>>>>>>>>>>>>>        //
44211>>>>>>>>>>>>>        Set broadcast_state of vis# to False
44212>>>>>>>>>>>>>        Get find_element of vis# obj# to ndx
44213>>>>>>>>>>>>>        If (ndx < 0) ;            Send add_element to vis# obj#
44216>>>>>>>>>>>>>        Set broadcast_state of vis# to True
44217>>>>>>>>>>>>>    End_Procedure
44218>>>>>>>>>>>>>    
44218>>>>>>>>>>>>>    
44218>>>>>>>>>>>>>    //   This procedure removes the specified object id (obj#) from this object's
44218>>>>>>>>>>>>>    //   set of database agents who are merely 'watched', and destroys the
44218>>>>>>>>>>>>>    //   connection between the database agent and this object.
44218>>>>>>>>>>>>>    Procedure remove_watched_server Integer obj#
44220>>>>>>>>>>>>>        Integer vis# ndx
44220>>>>>>>>>>>>>        Get watched_servers to vis#
44221>>>>>>>>>>>>>        // Only if w server exists
44221>>>>>>>>>>>>>        If vis# Begin
44223>>>>>>>>>>>>>            Set broadcast_state of vis# to False
44224>>>>>>>>>>>>>            Get find_element of vis# obj# to ndx
44225>>>>>>>>>>>>>            If (ndx >= 0) ;                Send remove_element to vis# obj#
44228>>>>>>>>>>>>>            Set broadcast_state of vis# to True
44229>>>>>>>>>>>>>            If (ndx >= 0 and active_State(Self)) ;                Send remove_user_interface to obj# Self True // TRUE for watchers
44232>>>>>>>>>>>>>        End
44232>>>>>>>>>>>>>>
44232>>>>>>>>>>>>>    End_Procedure
44233>>>>>>>>>>>>>    
44233>>>>>>>>>>>>>    //   This procedure causes the scanning of this object's items' fields,
44233>>>>>>>>>>>>>    //   and the production of a set of database agents who should be 'watched'.
44233>>>>>>>>>>>>>    //   This procedure depends completely upon Find_Servers_To_Watch, below.
44233>>>>>>>>>>>>>    //
44233>>>>>>>>>>>>>    Procedure Scan_Servers
44235>>>>>>>>>>>>>        Send find_servers_to_watch False
44236>>>>>>>>>>>>>    End_Procedure
44237>>>>>>>>>>>>>    
44237>>>>>>>>>>>>>    //   This procedure scans the fields of this object's items to determine
44237>>>>>>>>>>>>>    //   what other database agents (data_sets) other than this object's Server
44237>>>>>>>>>>>>>    //   should be 'watched' (for data changes).
44237>>>>>>>>>>>>>    //   This procedure is invoked once per object, the first time the object
44237>>>>>>>>>>>>>    //   is activated.  If the data_file, data_field, and/or main_file of this
44237>>>>>>>>>>>>>    //   object are changed (don't change them while this object is active!),
44237>>>>>>>>>>>>>    //   set Private.Servers_Scanned to FALSE to force this object to scan
44237>>>>>>>>>>>>>    //   again (when it is next activated).
44237>>>>>>>>>>>>>    //
44237>>>>>>>>>>>>>    
44237>>>>>>>>>>>>>    // 17.0: The logic has been retooled to add more watched servers to the DDOs. This is done so
44237>>>>>>>>>>>>>    // DD operations will send Refresh to these additional watched-servers. There are two changes:
44237>>>>>>>>>>>>>    // 1. Containers are now made watched servers for the Server and all parent servers
44237>>>>>>>>>>>>>    // 2. Non-file.field DEOs (e.g., expressions) are made watched servers for the server (which it
44237>>>>>>>>>>>>>    //    already did and for all parent servers. Without this, parent entry_item expressions were not
44237>>>>>>>>>>>>>    //    getting updated
44237>>>>>>>>>>>>>    // Here is how watched-servers works.
44237>>>>>>>>>>>>>    // Each DEO attaches and detaches from its Server by sending Add_User_interface and Remove_User_interface
44237>>>>>>>>>>>>>    // to the server DD. Once attached, the DD knows about this DEO and sends messages to it as needed (Refresh,
44237>>>>>>>>>>>>>    // Entry_Update, etc.). In addition, a DEO may need to attach a parent DDO so that changes in that parent DD
44237>>>>>>>>>>>>>    // results in those messages being sent. This is needed if the binding table in entry_item refers to a parent
44237>>>>>>>>>>>>>    // table. So we need to send Add_User_interface and Remove_User_interface to that parent server as well. If a DEO
44237>>>>>>>>>>>>>    // has multiple, there could be multiple parent servers. As of 17.0, we are also attaching to parent servers if
44237>>>>>>>>>>>>>    // we are unsure about how the DEO is being used. If an expression is used, it might need to be updated when
44237>>>>>>>>>>>>>    // a parent (or any ancestor) changes. Each DEO keeps track of servers that it attaches to and this is referred
44237>>>>>>>>>>>>>    // to as the watched_server list. This list is maintained so the DEO knows which DDOs to attach and detach to.
44237>>>>>>>>>>>>>    
44237>>>>>>>>>>>>>    
44237>>>>>>>>>>>>>    Procedure find_servers_to_watch Integer tableFlag
44239>>>>>>>>>>>>>        Integer i file# obj# maxitems count p srvr# self# srvrfile
44239>>>>>>>>>>>>>        String fileStr fStr
44239>>>>>>>>>>>>>        Boolean bContainer bDoAll
44239>>>>>>>>>>>>>        
44239>>>>>>>>>>>>>        Get Client_Area_State to bContainer
44240>>>>>>>>>>>>>        Set private.Servers_Scanned to True
44241>>>>>>>>>>>>>        
44241>>>>>>>>>>>>>        Get Server to srvr#
44242>>>>>>>>>>>>>        
44242>>>>>>>>>>>>>        If (srvr#=0) Begin
44244>>>>>>>>>>>>>            Procedure_Return
44245>>>>>>>>>>>>>        End
44245>>>>>>>>>>>>>>
44245>>>>>>>>>>>>>        
44245>>>>>>>>>>>>>        Send delete_watched_servers  //empty Watched_Servers broadcaster first
44246>>>>>>>>>>>>>        
44246>>>>>>>>>>>>>        Get main_file of srvr# to srvrfile  // data-set's main-file
44247>>>>>>>>>>>>>        
44247>>>>>>>>>>>>>        If bContainer Begin
44249>>>>>>>>>>>>>            // containers should get added to all parent DDOs
44249>>>>>>>>>>>>>            Send WatchAllParentServers srvr#
44250>>>>>>>>>>>>>            Procedure_Return
44251>>>>>>>>>>>>>        End
44251>>>>>>>>>>>>>>
44251>>>>>>>>>>>>>        
44251>>>>>>>>>>>>>        If (tableFlag <> 0) ;            Get Prototype_Object to self# // tables
44254>>>>>>>>>>>>>        Else ;            Move Self to self# // forms and text windows
44256>>>>>>>>>>>>>        
44256>>>>>>>>>>>>>        Get item_count of self# to maxitems
44257>>>>>>>>>>>>>        Decrement maxitems
44258>>>>>>>>>>>>>        
44258>>>>>>>>>>>>>        // if no items do nothing
44258>>>>>>>>>>>>>        // if one item do quick check
44258>>>>>>>>>>>>>        // if multiple items do it the hard way
44258>>>>>>>>>>>>>        
44258>>>>>>>>>>>>>        If (maxitems<0) Begin
44260>>>>>>>>>>>>>            // if no items, which is unusual, we don't know what this DEO is so we will treat it like a container
44260>>>>>>>>>>>>>            // and add it as a watched server for all DDOs
44260>>>>>>>>>>>>>            Send WatchAllParentServers srvr#
44261>>>>>>>>>>>>>            Procedure_Return  // no items
44262>>>>>>>>>>>>>        End
44262>>>>>>>>>>>>>>
44262>>>>>>>>>>>>>        
44262>>>>>>>>>>>>>        If (maxitems=0) Begin // only 1 item - skip most of the nonsense
44264>>>>>>>>>>>>>            Get data_file of self# 0 to file#
44265>>>>>>>>>>>>>            // we need watched server if file exists, it is not the main file
44265>>>>>>>>>>>>>            // and is not an updating file (as opposed to updating data-set).
44265>>>>>>>>>>>>>            If (file#>0 and file#<>srvrfile) Begin
44267>>>>>>>>>>>>>                Get which_data_set of srvr# file# to obj#
44268>>>>>>>>>>>>>                If (obj# <> 0 and obj# <> srvr#) Begin
44270>>>>>>>>>>>>>                    Send add_Watched_server obj#
44271>>>>>>>>>>>>>                    Send add_ChangedStateWatched_Servers obj#
44272>>>>>>>>>>>>>                End
44272>>>>>>>>>>>>>>
44272>>>>>>>>>>>>>            End
44272>>>>>>>>>>>>>>
44272>>>>>>>>>>>>>            Else If (file#=0) Begin
44275>>>>>>>>>>>>>                // if no file (e.g., expression) we don't know when it changes so we tell all servers
44275>>>>>>>>>>>>>                // that this is a watcher
44275>>>>>>>>>>>>>                Send WatchAllParentServers srvr#
44276>>>>>>>>>>>>>            End
44276>>>>>>>>>>>>>>
44276>>>>>>>>>>>>>            If File# ;                Send Copy_Item_Options Srvr# file# (Data_Field(Self#,0)) Self# 0
44279>>>>>>>>>>>>>        End
44279>>>>>>>>>>>>>>
44279>>>>>>>>>>>>>        Else Begin  // multiple items - do what you must
44280>>>>>>>>>>>>>            Move -1 to count
44281>>>>>>>>>>>>>            Move "," to fileStr
44282>>>>>>>>>>>>>            If tableFlag Begin
44284>>>>>>>>>>>>>                Get main_file to file#
44285>>>>>>>>>>>>>                If (file# <> srvrfile) Begin    // only do this if mainfile is not the srvr file
44287>>>>>>>>>>>>>                    Append fileStr file# ","   //insert mainfile to be sure it's watched
44289>>>>>>>>>>>>>                    Increment count
44290>>>>>>>>>>>>>                End
44290>>>>>>>>>>>>>>
44290>>>>>>>>>>>>>            End
44290>>>>>>>>>>>>>>
44290>>>>>>>>>>>>>            For i from 0 to maxitems
44296>>>>>>>>>>>>>>
44296>>>>>>>>>>>>>                Get data_file of self# i to file#
44297>>>>>>>>>>>>>                If (file#=0) Begin
44299>>>>>>>>>>>>>                    // as soon as we don't know what the item is used for we will have
44299>>>>>>>>>>>>>                    // to attach to all parent DDOs.
44299>>>>>>>>>>>>>                    Move True to bDoAll
44300>>>>>>>>>>>>>                End
44300>>>>>>>>>>>>>>
44300>>>>>>>>>>>>>                If (file# > 0 and file#<>srvrfile and ;                    not(fileStr contains (","+String(file#)+",")) ) Begin
44302>>>>>>>>>>>>>                    Move (fileStr+String(file#) + ",") to fileStr
44303>>>>>>>>>>>>>                    Increment count
44304>>>>>>>>>>>>>                End
44304>>>>>>>>>>>>>>
44304>>>>>>>>>>>>>                If File# ;                    Send Copy_Item_Options Srvr# file# (Data_Field(Self#,i)) Self# i
44307>>>>>>>>>>>>>            Loop
44308>>>>>>>>>>>>>>
44308>>>>>>>>>>>>>            
44308>>>>>>>>>>>>>            // if an item's binding table is unknown, we watch all parent DDOs.
44308>>>>>>>>>>>>>            If bDoAll Begin
44310>>>>>>>>>>>>>                Send WatchAllParentServers srvr#
44311>>>>>>>>>>>>>            End
44311>>>>>>>>>>>>>>
44311>>>>>>>>>>>>>            Else Begin
44312>>>>>>>>>>>>>                If (count >= 0) Begin // any watched items?
44314>>>>>>>>>>>>>                    Move (Right(fileStr, length(fileStr) - 1))  to fileStr  //remove leading comma
44315>>>>>>>>>>>>>                    For i from 0 to count
44321>>>>>>>>>>>>>>
44321>>>>>>>>>>>>>                        Move (Pos( "," ,fileStr)) to p
44322>>>>>>>>>>>>>                        If (p > 1) Begin
44324>>>>>>>>>>>>>                            Move (Left( fileStr , p-1)) to fStr
44325>>>>>>>>>>>>>                            Move (Right( fileStr, length(fileStr) - p)) to fileStr
44326>>>>>>>>>>>>>                            Move fStr to file#
44327>>>>>>>>>>>>>                            Get which_data_set of srvr# file# to obj#
44328>>>>>>>>>>>>>                            If (obj# <> 0 and obj# <> srvr#) Begin
44330>>>>>>>>>>>>>                                Send add_Watched_server obj#
44331>>>>>>>>>>>>>                                Send add_ChangedStateWatched_Servers obj#
44332>>>>>>>>>>>>>                            End
44332>>>>>>>>>>>>>>
44332>>>>>>>>>>>>>                        End
44332>>>>>>>>>>>>>>
44332>>>>>>>>>>>>>                    Loop
44333>>>>>>>>>>>>>>
44333>>>>>>>>>>>>>                End
44333>>>>>>>>>>>>>>
44333>>>>>>>>>>>>>            End
44333>>>>>>>>>>>>>>
44333>>>>>>>>>>>>>        End
44333>>>>>>>>>>>>>>
44333>>>>>>>>>>>>>    End_Procedure
44334>>>>>>>>>>>>>    
44334>>>>>>>>>>>>>    // This does nothing. Other sub-classes (or later mixins) should add
44334>>>>>>>>>>>>>    // logic to this.
44334>>>>>>>>>>>>>    Procedure Copy_Item_Options Integer iDSO Integer iFile Integer iField ;            Integer iDEO Integer iItem
44336>>>>>>>>>>>>>    End_Procedure
44337>>>>>>>>>>>>>    
44337>>>>>>>>>>>>>    // This does little. Other sub-classes (or later mixins) should add
44337>>>>>>>>>>>>>    // logic to this.
44337>>>>>>>>>>>>>    Procedure Define_Extended_DEO_Mixin
44339>>>>>>>>>>>>>    End_Procedure
44340>>>>>>>>>>>>>    
44340>>>>>>>>>>>>>    
44340>>>>>>>>>>>>>    // created for Nesting support
44340>>>>>>>>>>>>>    Procedure Mark_As_Component
44342>>>>>>>>>>>>>        Integer ser#
44342>>>>>>>>>>>>>        Set Component_State to True
44343>>>>>>>>>>>>>        Delegate Set Has_Components_State to True
44345>>>>>>>>>>>>>        Get private.Server to ser#
44346>>>>>>>>>>>>>        If (ser# = 0) Begin
44348>>>>>>>>>>>>>            Delegate Get Locate_Server to ser#
44350>>>>>>>>>>>>>            If (ser# <> 0) ;                Set private.Server to ser#
44353>>>>>>>>>>>>>        End
44353>>>>>>>>>>>>>>
44353>>>>>>>>>>>>>    End_Procedure
44354>>>>>>>>>>>>>    
44354>>>>>>>>>>>>>    // This only gets called when the developer is killing this object. During application
44354>>>>>>>>>>>>>    // shut-down, only destroy_object is called. This augmentation destroys the watched broadcaster
44354>>>>>>>>>>>>>    // (which is sitting on the desktop). During program shut down we don't care if this is called
44354>>>>>>>>>>>>>    // because it is getting destroyed anyway. We are making the assumption that a developer controlled
44354>>>>>>>>>>>>>    // destroy will always be called with the watcher still existing.
44354>>>>>>>>>>>>>    
44354>>>>>>>>>>>>>    Procedure Destroy
44356>>>>>>>>>>>>>        Handle hoWatched
44356>>>>>>>>>>>>>        Set Changed_State to False //   is this really needed anymore???
44357>>>>>>>>>>>>>        // if non 0, The watched server, must still exist.
44357>>>>>>>>>>>>>        Get Watched_Servers to hoWatched
44358>>>>>>>>>>>>>        If hoWatched Begin
44360>>>>>>>>>>>>>            Set Broadcast_State of hoWatched to False
44361>>>>>>>>>>>>>            Send Destroy of hoWatched     // destroy the bcaster
44362>>>>>>>>>>>>>        End
44362>>>>>>>>>>>>>>
44362>>>>>>>>>>>>>        // if non 0, The bound watched server, must still exist.
44362>>>>>>>>>>>>>        Get ChangedStateWatched_Servers to hoWatched
44363>>>>>>>>>>>>>        If hoWatched Begin
44365>>>>>>>>>>>>>            Set Broadcast_State of hoWatched to False
44366>>>>>>>>>>>>>            Send Destroy of hoWatched     // destroy the bcaster
44367>>>>>>>>>>>>>        End
44367>>>>>>>>>>>>>>
44367>>>>>>>>>>>>>        Forward Send Destroy
44369>>>>>>>>>>>>>    End_Procedure
44370>>>>>>>>>>>>>    
44370>>>>>>>>>>>>>    
44370>>>>>>>>>>>>>    Function Should_Save Returns Integer
44372>>>>>>>>>>>>>        Integer Obj# Chngd
44372>>>>>>>>>>>>>        Get Server to Obj#
44373>>>>>>>>>>>>>        Get Changed_state to Chngd
44374>>>>>>>>>>>>>        Function_Return ( Chngd or (obj# <> 0 and Should_Save(obj#)) )
44375>>>>>>>>>>>>>    End_Function
44376>>>>>>>>>>>>>    
44376>>>>>>>>>>>>>    // Added server scan logic here instead of add_focus.
44376>>>>>>>>>>>>>    Procedure Attach_Deo_To_Server
44378>>>>>>>>>>>>>        Integer obj# isclient srvscn wsrvr
44378>>>>>>>>>>>>>        Get Server to obj#
44379>>>>>>>>>>>>>        Get client_area_state to isclient
44380>>>>>>>>>>>>>        If (obj# <> 0) ;            Send add_user_interface to obj# Self
44383>>>>>>>>>>>>>        Get private.Servers_Scanned to srvscn
44384>>>>>>>>>>>>>        If (srvscn = 0) ;            Send scan_servers
44387>>>>>>>>>>>>>        Get Watched_Servers to wsrvr
44388>>>>>>>>>>>>>        If wsrvr Send add_user_interface ;            to wsrvr Self True // TRUE for watchers
44391>>>>>>>>>>>>>        If (obj# <> 0 and isclient = 0) ;            Send update_dependent_items
44394>>>>>>>>>>>>>    End_Procedure
44395>>>>>>>>>>>>>    
44395>>>>>>>>>>>>>    // Removed server scan logic and moved it to attach-deo_to_server
44395>>>>>>>>>>>>>    Procedure Add_Focus Handle hoParent Returns Integer
44397>>>>>>>>>>>>>        Integer srvscn retval msg
44397>>>>>>>>>>>>>        //
44397>>>>>>>>>>>>>        // standard DEO behavior
44397>>>>>>>>>>>>>        //
44397>>>>>>>>>>>>>        Forward Get msg_Add_Focus hoParent to retval
44399>>>>>>>>>>>>>        If retval ;            Procedure_Return retval
44402>>>>>>>>>>>>>        
44402>>>>>>>>>>>>>        If (client_area_State(Self) = 0) ; //clients already broadcast            Broadcast NO_STOP Send add_focus Self
44407>>>>>>>>>>>>>        //
44407>>>>>>>>>>>>>        // server augmentation
44407>>>>>>>>>>>>>        //
44407>>>>>>>>>>>>>        If (focus_mode(Self) <> NO_ACTIVATE and Active_State(Self)) ;            Send attach_DEO_to_server
44410>>>>>>>>>>>>>        
44410>>>>>>>>>>>>>        // last thing to do is send custom message. With list deos
44410>>>>>>>>>>>>>        // msg is probably initialize_list. With non-list deos it
44410>>>>>>>>>>>>>        // is probably nothing
44410>>>>>>>>>>>>>        Get add_focus_msg to msg
44411>>>>>>>>>>>>>        If msg ;            Send msg
44414>>>>>>>>>>>>>    End_Procedure
44415>>>>>>>>>>>>>    
44415>>>>>>>>>>>>>    // Connect DEO to Server if Demanded (DoAllfg=t) or ;
44415>>>>>>>>>>>>>    // allowed  (static_server_State=t). Broadcast if children exist
44415>>>>>>>>>>>>>    Procedure Connect_DEOs_to_Servers Integer DoAllFg
44417>>>>>>>>>>>>>        If (DoAllfg or Static_Server_State(Self)) ;            Send Attach_Deo_to_Server
44420>>>>>>>>>>>>>        If (Has_Components_State(Self)) ;            Broadcast Send Connect_DEOs_to_Servers DoAllfg
44424>>>>>>>>>>>>>    End_Procedure
44425>>>>>>>>>>>>>    
44425>>>>>>>>>>>>>    // Disconnect DEOs from Servers according to rules. Broadcast
44425>>>>>>>>>>>>>    // to child components.
44425>>>>>>>>>>>>>    //
44425>>>>>>>>>>>>>    // Pass: DoAllMode
44425>>>>>>>>>>>>>    //    DETACH_NEVER        Never
44425>>>>>>>>>>>>>    //    DETACH_IF_NO_CHANGE Do if changed_state=F
44425>>>>>>>>>>>>>    //    DETACH_ALWAYS       Do it no matter what
44425>>>>>>>>>>>>>    //    DETACH_IF_ALLOWED   Do if changed_state=F and auto_attach
44425>>>>>>>>>>>>>    //                        (I don't think this will be needed!)
44425>>>>>>>>>>>>>    //
44425>>>>>>>>>>>>>    Procedure Disconnect_DEOs_from_Servers Integer DoAllMode
44427>>>>>>>>>>>>>        If (DoAllMode <> DETACH_NEVER) Begin
44429>>>>>>>>>>>>>            If ( DoAllMode=DETACH_ALWAYS or ; // do all no matter what                ( (Changed_state(Self)=0) and ;                ( (DoAllMode=DETACH_IF_NO_CHANGE) or  ;                (Static_Server_State(Self)) ) ) ) ;                Send Remove_deo_from_server
44432>>>>>>>>>>>>>            If (Has_Components_State(Self)) ;                Broadcast Send Disconnect_DEOs_from_Servers DoAllMode
44436>>>>>>>>>>>>>        End
44436>>>>>>>>>>>>>>
44436>>>>>>>>>>>>>    End_Procedure
44437>>>>>>>>>>>>>    
44437>>>>>>>>>>>>>    // Changed to not remove from server if static.
44437>>>>>>>>>>>>>    Procedure Remove_Object
44439>>>>>>>>>>>>>        Forward Send remove_object
44441>>>>>>>>>>>>>        // remove if not static and no changes
44441>>>>>>>>>>>>>        If ( Static_Server_State(Self)=0 and ;            Changed_State(Self)=0 ) ;  // only detach if unchanged!            Send remove_DEO_from_server
44444>>>>>>>>>>>>>    End_Procedure
44445>>>>>>>>>>>>>    
44445>>>>>>>>>>>>>    
44445>>>>>>>>>>>>>    // (JJT) Changed so that this respects Change_disabled_state. I don't
44445>>>>>>>>>>>>>    //       like this here but its the best I can think of. Therefore, all
44445>>>>>>>>>>>>>    //       objects using server.pkg must understand Change_disabled_state.
44445>>>>>>>>>>>>>    //
44445>>>>>>>>>>>>>    // (JJT) Checks deferred_state and if set do not change the
44445>>>>>>>>>>>>>    // changed state of the server object. This had been in datalist and is
44445>>>>>>>>>>>>>    // required to make deferred_state work right. Deferred_state was created
44445>>>>>>>>>>>>>    // to make selection-lists work correctly and as far as I am concerned it
44445>>>>>>>>>>>>>    // should be the only supported use of this. Therefore, I would not *ever*
44445>>>>>>>>>>>>>    // expect deferred_state to be set true in tables, entry_forms, or text_
44445>>>>>>>>>>>>>    // windows. Since deferred-state is known to this mixin the change
44445>>>>>>>>>>>>>    // belongs here - but I expect it to only ever change behaviors in
44445>>>>>>>>>>>>>    // selection-lists.
44445>>>>>>>>>>>>>    
44445>>>>>>>>>>>>>    
44445>>>>>>>>>>>>>    // Changed to not remove from server if static.
44445>>>>>>>>>>>>>    Procedure Set Changed_State Integer newVal
44447>>>>>>>>>>>>>        Integer srvr# wsrvr
44447>>>>>>>>>>>>>        If not (Change_Disabled_State(Self)) Begin
44449>>>>>>>>>>>>>            Forward Set Changed_State to newVal
44451>>>>>>>>>>>>>            Get server to srvr#
44452>>>>>>>>>>>>>            
44452>>>>>>>>>>>>>            // if deferred keep the server out of it.
44452>>>>>>>>>>>>>            If not (deferred_State(Self)) Begin
44454>>>>>>>>>>>>>                If (newVal and srvr#) Begin
44456>>>>>>>>>>>>>                    Set Changed_State of srvr# to True
44457>>>>>>>>>>>>>                    // We also set changed_state of all "foreign" servers. These
44457>>>>>>>>>>>>>                    // are the ones whose Data_File is a parent File
44457>>>>>>>>>>>>>                    Get ChangedStateWatched_Servers to wsrvr
44458>>>>>>>>>>>>>                    If wsrvr ;                        Set Changed_State of wSrvr to True
44461>>>>>>>>>>>>>                End
44461>>>>>>>>>>>>>>
44461>>>>>>>>>>>>>                
44461>>>>>>>>>>>>>                // Remove is changed-state=false, not active and not static
44461>>>>>>>>>>>>>                If ( not(newVal) and not(Active_State(Self)) and ;                    not(Static_Server_State(Self)) ) ;                    Send remove_DEO_from_Server
44464>>>>>>>>>>>>>            End
44464>>>>>>>>>>>>>>
44464>>>>>>>>>>>>>        End
44464>>>>>>>>>>>>>>
44464>>>>>>>>>>>>>    End_Procedure
44465>>>>>>>>>>>>>    
44465>>>>>>>>>>>>>    // When an object is created this sets the default value for
44465>>>>>>>>>>>>>    // Static_Server_state. If a parent DEO exists it will use its
44465>>>>>>>>>>>>>    // static_server_state property. An Entry_view_Client0 object sets
44465>>>>>>>>>>>>>    // this - this way view based daf programs will use the new behavior
44465>>>>>>>>>>>>>    // (although it can be disabled)  but non-daf programs will work like
44465>>>>>>>>>>>>>    // they always did.
44465>>>>>>>>>>>>>    Function Default_Static_Server_State Returns Integer
44467>>>>>>>>>>>>>        Integer rVal
44467>>>>>>>>>>>>>        // We delegate to get the actual (not default) static state
44467>>>>>>>>>>>>>        // Note: Can't check with component_state - it not defined yet
44467>>>>>>>>>>>>>        Delegate Get Static_Server_State to rVal
44469>>>>>>>>>>>>>        Function_Return rVal
44470>>>>>>>>>>>>>    End_Function
44471>>>>>>>>>>>>>    
44471>>>>>>>>>>>>>    // This adds every parent DDO for the passed DDO to the DEO's list of DDOs to watch.
44471>>>>>>>>>>>>>    // It adds the parents and then does this recursively up the DDO tree.
44471>>>>>>>>>>>>>    // This means that this DEO will respond to any DD change for any server. This does not
44471>>>>>>>>>>>>>    Procedure WatchAllParentServers Handle hoDDO
44473>>>>>>>>>>>>>        Handle hoSrvr
44473>>>>>>>>>>>>>        Integer iServer iServers
44473>>>>>>>>>>>>>        Get Data_Set_Server_Count of hoDDO to iServers
44474>>>>>>>>>>>>>        For iServer from 0 to (iServers-1)
44480>>>>>>>>>>>>>>
44480>>>>>>>>>>>>>            Get Data_Set_Server of hoDDO iServer to hoSrvr
44481>>>>>>>>>>>>>            Send Add_Watched_Server hoSrvr
44482>>>>>>>>>>>>>            Send WatchAllParentServers hoSrvr
44483>>>>>>>>>>>>>        Loop
44484>>>>>>>>>>>>>>
44484>>>>>>>>>>>>>    End_Procedure
44485>>>>>>>>>>>>>    
44485>>>>>>>>>>>>>    
44485>>>>>>>>>>>>>End_Class
44486>>>>>>>>>>>>>
44486>>>>>>>>>>>>>//
44486>>>>>>>>>>>>>// The use of using on an object name is no longer supported. We will check for it's usage in case
44486>>>>>>>>>>>>>// developer's use this in old code.
44486>>>>>>>>>>>>>// Insetad of using, one should use "Set Server"
44486>>>>>>>>>>>>>//
44486>>>>>>>>>>>>>
44486>>>>>>>>>>>Use VERIFY.pkg        //include Verification support module
Including file: verify.pkg    (C:\Program Files\DataFlex 24.0\Pkg\verify.pkg)
44486>>>>>>>>>>>>>Use VDFBase.pkg
44486>>>>>>>>>>>>>
44486>>>>>>>>>>>>>Register_Function Component_State Returns Integer
44486>>>>>>>>>>>>>
44486>>>>>>>>>>>>>
44486>>>>>>>>>>>>>Class verify_mixin is a mixin
44487>>>>>>>>>>>>>    Procedure define_verify
44489>>>>>>>>>>>>>        Property Integer private.Verify_Save_Msg      0
44490>>>>>>>>>>>>>        Property Integer private.Verify_Delete_Msg    0
44491>>>>>>>>>>>>>        Property Integer private.Verify_Data_Loss_Msg 0
44492>>>>>>>>>>>>>    End_Procedure
44493>>>>>>>>>>>>>    
44493>>>>>>>>>>>>>    
44493>>>>>>>>>>>>>    Procedure Set Verify_Save_msg Integer val
44495>>>>>>>>>>>>>        Set private.Verify_Save_Msg to val
44496>>>>>>>>>>>>>    End_Procedure
44497>>>>>>>>>>>>>    
44497>>>>>>>>>>>>>    Procedure Set Verify_Delete_msg Integer val
44499>>>>>>>>>>>>>        Set private.Verify_Delete_Msg to val
44500>>>>>>>>>>>>>    End_Procedure
44501>>>>>>>>>>>>>    
44501>>>>>>>>>>>>>    Procedure Set Verify_Data_Loss_msg Integer val
44503>>>>>>>>>>>>>        Set private.Verify_Data_Loss_Msg to val
44504>>>>>>>>>>>>>    End_Procedure
44505>>>>>>>>>>>>>    
44505>>>>>>>>>>>>>    Function Verify_Save_msg Returns Integer
44507>>>>>>>>>>>>>        Integer retval
44507>>>>>>>>>>>>>        Get private.Verify_Save_Msg to retval
44508>>>>>>>>>>>>>        If (retval = 0 and Component_State(Self)) ;            Delegate Get Verify_Save_Msg to retval
44512>>>>>>>>>>>>>        Function_Return retval
44513>>>>>>>>>>>>>    End_Function
44514>>>>>>>>>>>>>    
44514>>>>>>>>>>>>>    Function Verify_Delete_msg Returns Integer
44516>>>>>>>>>>>>>        Integer retval
44516>>>>>>>>>>>>>        Get private.Verify_Delete_Msg to retval
44517>>>>>>>>>>>>>        If (retval = 0 and Component_State(Self)) ;            Delegate Get Verify_Delete_Msg to retval
44521>>>>>>>>>>>>>        Function_Return retval
44522>>>>>>>>>>>>>    End_Function
44523>>>>>>>>>>>>>    
44523>>>>>>>>>>>>>    
44523>>>>>>>>>>>>>    Function Verify_Data_Loss_msg Returns Integer
44525>>>>>>>>>>>>>        Integer retval
44525>>>>>>>>>>>>>        Get private.Verify_Data_Loss_Msg to retval
44526>>>>>>>>>>>>>        If (retval = 0 and Component_State(Self)) ;            Delegate Get Verify_Data_Loss_Msg to retval
44530>>>>>>>>>>>>>        Function_Return retval
44531>>>>>>>>>>>>>    End_Function
44532>>>>>>>>>>>>>    
44532>>>>>>>>>>>>>    Function Verify_Save Returns Integer
44534>>>>>>>>>>>>>        Integer msg# retval
44534>>>>>>>>>>>>>        Get Verify_Save_Msg to msg#
44535>>>>>>>>>>>>>        If (msg# <> 0) Begin
44537>>>>>>>>>>>>>            Get msg# to retval
44538>>>>>>>>>>>>>            Function_Return retval
44539>>>>>>>>>>>>>        End
44539>>>>>>>>>>>>>>
44539>>>>>>>>>>>>>    End_Function
44540>>>>>>>>>>>>>    
44540>>>>>>>>>>>>>    Function Verify_Delete Returns Integer
44542>>>>>>>>>>>>>        Integer msg# retval
44542>>>>>>>>>>>>>        Get Verify_Delete_Msg to msg#
44543>>>>>>>>>>>>>        If (msg# <> 0) Begin
44545>>>>>>>>>>>>>            Get msg# to retval
44546>>>>>>>>>>>>>            Function_Return retval
44547>>>>>>>>>>>>>        End
44547>>>>>>>>>>>>>>
44547>>>>>>>>>>>>>    End_Function
44548>>>>>>>>>>>>>    
44548>>>>>>>>>>>>>    Function Verify_Data_Loss Returns Integer
44550>>>>>>>>>>>>>        Integer msg# retval
44550>>>>>>>>>>>>>        Get Verify_Data_Loss_Msg to msg#
44551>>>>>>>>>>>>>        If (msg# <> 0) Begin
44553>>>>>>>>>>>>>            Get msg# to retval
44554>>>>>>>>>>>>>            Function_Return retval
44555>>>>>>>>>>>>>        End
44555>>>>>>>>>>>>>>
44555>>>>>>>>>>>>>    End_Function
44556>>>>>>>>>>>>>    
44556>>>>>>>>>>>>>End_Class
44557>>>>>>>>>>>Use ACTIONBR.pkg      //include action-bar support module
Including file: Actionbr.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Actionbr.pkg)
44557>>>>>>>>>>>>>Use VDFBase.pkg
44557>>>>>>>>>>>>>
44557>>>>>>>>>>>>>Class Action_Bar_Mixin is a mixin
44558>>>>>>>>>>>>>    Procedure Define_Action_bar
44560>>>>>>>>>>>>>    End_Procedure
44561>>>>>>>>>>>>>    
44561>>>>>>>>>>>>>    Procedure Define_Access_Keys
44563>>>>>>>>>>>>>    End_Procedure
44564>>>>>>>>>>>>>    
44564>>>>>>>>>>>>>    Procedure Add_Action_bar
44566>>>>>>>>>>>>>    End_Procedure
44567>>>>>>>>>>>>>End_Class
44568>>>>>>>>>>>>>
44568>>>>>>>>>>>>>
44568>>>>>>>>>>>>>
44568>>>>>>>>>>>Use AutoLcMx.pkg   // Auto locate of popup mixin
44568>>>>>>>>>>>Use DEODlgMx.pkg   // DEO delegation support
Including file: deodlgmx.pkg    (C:\Program Files\DataFlex 24.0\Pkg\deodlgmx.pkg)
44568>>>>>>>>>>>>>Use VDFBase.pkg
44568>>>>>>>>>>>>>
44568>>>>>>>>>>>>>Enum_List
44568>>>>>>>>>>>>>    Define DELEGATE_NEVER
44568>>>>>>>>>>>>>    Define DELEGATE_SERVER
44568>>>>>>>>>>>>>    Define DELEGATE_ALWAYS
44568>>>>>>>>>>>>>End_Enum_List
44568>>>>>>>>>>>>>
44568>>>>>>>>>>>>>
44568>>>>>>>>>>>>>Register_Function component_state Returns Integer
44568>>>>>>>>>>>>>
44568>>>>>>>>>>>>>Class deo_delegate_mixin is a mixin
44569>>>>>>>>>>>>>    Procedure define_deo_delegate
44571>>>>>>>>>>>>>        
44571>>>>>>>>>>>>>        Property Integer DEO_Delegate_Mode     Delegate_Server
44572>>>>>>>>>>>>>        
44572>>>>>>>>>>>>>        Property Integer delegate_clear_state  True
44573>>>>>>>>>>>>>        
44573>>>>>>>>>>>>>        Property Integer delegate_delete_state True
44574>>>>>>>>>>>>>        
44574>>>>>>>>>>>>>        Property Integer delegate_find_state   False
44575>>>>>>>>>>>>>        
44575>>>>>>>>>>>>>        Property Integer delegate_save_state   True
44576>>>>>>>>>>>>>    End_Procedure
44577>>>>>>>>>>>>>    
44577>>>>>>>>>>>>>    Function should_delegate Returns Integer
44579>>>>>>>>>>>>>        Integer Mode Dlg_Obj
44579>>>>>>>>>>>>>        
44579>>>>>>>>>>>>>        Delegate Get Object_Id to Dlg_Obj
44581>>>>>>>>>>>>>        Get Deo_Delegate_Mode to Mode
44582>>>>>>>>>>>>>        Function_Return ( (((Mode = DELEGATE_SERVER) and ;            not(Explicit_Server_State(Self)) and ;            (Locate_Server(Self) <> Dlg_Obj)) or ; // don't delegate if the object to delegate to is a server.            (Mode = DELEGATE_ALWAYS)) and Component_State(Self))
44583>>>>>>>>>>>>>    End_Function
44584>>>>>>>>>>>>>    
44584>>>>>>>>>>>>>    Function Should_delegate_Clear Returns Integer
44586>>>>>>>>>>>>>        Function_Return (should_delegate(Self) and ;            delegate_clear_state(Self))
44587>>>>>>>>>>>>>    End_Function
44588>>>>>>>>>>>>>    
44588>>>>>>>>>>>>>    Function Should_delegate_Save Returns Integer
44590>>>>>>>>>>>>>        Function_Return (should_delegate(Self) and ;            delegate_Save_state(Self))
44591>>>>>>>>>>>>>    End_Function
44592>>>>>>>>>>>>>    
44592>>>>>>>>>>>>>    Function Should_delegate_Delete Returns Integer
44594>>>>>>>>>>>>>        Function_Return (should_delegate(Self) and ;            delegate_delete_state(Self))
44595>>>>>>>>>>>>>    End_Function
44596>>>>>>>>>>>>>    
44596>>>>>>>>>>>>>    Function Should_delegate_Find Returns Integer
44598>>>>>>>>>>>>>        Function_Return (should_delegate(Self) and ;            delegate_Find_state(Self))
44599>>>>>>>>>>>>>    End_Function
44600>>>>>>>>>>>>>    
44600>>>>>>>>>>>>>End_Class
44601>>>>>>>>>>>>>
44601>>>>>>>>>>>>>//  During a clear (or a save/delete which sends clear) object-validation is
44601>>>>>>>>>>>>>//  properly shut off. However, the false assumption had been made that the
44601>>>>>>>>>>>>>//  DEO request_clear/clear_all messages originated with the object that had
44601>>>>>>>>>>>>>//  the focus. This was never true and is now even less likely to be true
44601>>>>>>>>>>>>>//  with the request_??? delegation method. The proper solution is to shut
44601>>>>>>>>>>>>>//  off object-validation in the focus object. The problem here is that
44601>>>>>>>>>>>>>//  the focus object may not understand this message (text_windows, buttons,
44601>>>>>>>>>>>>>//  etc). The work-around for now is to make sure that all objects understand
44601>>>>>>>>>>>>>//  these message. We can not directly add an Object_Validation message to the
44601>>>>>>>>>>>>>//  desktop (Object class). Because this message is internal this didn't work.
44601>>>>>>>>>>>>>//  By default this does nothing. Objects using val_mx actually pass this on
44601>>>>>>>>>>>>>//  object_validation.
44601>>>>>>>>>>>>>
44601>>>>>>>>>>>>>Procedure Set Object_Item_validation for cUIObject Integer fg
44603>>>>>>>>>>>>>End_Procedure
44604>>>>>>>>>>>>>
44604>>>>>>>>>>>>>Function Object_Item_Validation for cUIObject Returns Integer
44606>>>>>>>>>>>>>End_Function
44607>>>>>>>>>>>
44607>>>>>>>>>>>Register_Procedure Refind_DD_Records
44607>>>>>>>>>>>
44607>>>>>>>>>>>Class Entry_Client_mixin is a mixin
44608>>>>>>>>>>>
44608>>>>>>>>>>>    Procedure Construct_Object Integer myImg
44610>>>>>>>>>>>        Forward Send construct_object myImg
44612>>>>>>>>>>>        Set Ring_State to False
44613>>>>>>>>>>>        Property Integer private.Changed_State 0
44614>>>>>>>>>>>        
44614>>>>>>>>>>>        // We need this property to fully emulate a DEO
44614>>>>>>>>>>>        // (Actually, entry_clients should realy support ALL the DEO messages!)
44614>>>>>>>>>>>        Property Integer Auto_Clear_DEO_State True
44615>>>>>>>>>>>        
44615>>>>>>>>>>>        Send define_nesting      //invoke DEO nesting standard support constructor
44616>>>>>>>>>>>        Send define_navigation   //invoke DEO navigation standard support constructor
44617>>>>>>>>>>>        Send define_server       //invoke Server support constructor
44618>>>>>>>>>>>        Send define_action_bar   //invoke action-bar support constructor
44619>>>>>>>>>>>        Send define_verify       //invoke Verification support constructor
44620>>>>>>>>>>>        Send define_DEO_Delegate
44621>>>>>>>>>>>        Send Define_Auto_Locate
44622>>>>>>>>>>>        
44622>>>>>>>>>>>    End_Procedure
44623>>>>>>>>>>>    
44623>>>>>>>>>>>    Import_Class_Protocol NESTING_Mixin
44624>>>>>>>>>>>    Import_Class_Protocol NAVIGATE_Mixin
44625>>>>>>>>>>>    Import_Class_Protocol SERVER_Mixin
44626>>>>>>>>>>>    Import_Class_Protocol VERIFY_Mixin
44627>>>>>>>>>>>    Import_Class_Protocol ACTION_BAR_Mixin
44628>>>>>>>>>>>    Import_Class_Protocol Auto_Locate_Mixin
44629>>>>>>>>>>>    Import_Class_Protocol Deo_Delegate_Mixin
44630>>>>>>>>>>>    
44630>>>>>>>>>>>    
44630>>>>>>>>>>>    //
44630>>>>>>>>>>>    // created for Server support
44630>>>>>>>>>>>    //
44630>>>>>>>>>>>    Procedure Display
44632>>>>>>>>>>>        Broadcast Send display
44634>>>>>>>>>>>    End_Procedure
44635>>>>>>>>>>>    
44635>>>>>>>>>>>    //
44635>>>>>>>>>>>    // created for Server support
44635>>>>>>>>>>>    //
44635>>>>>>>>>>>    Procedure Clear
44637>>>>>>>>>>>        Broadcast Send Clear
44639>>>>>>>>>>>    End_Procedure
44640>>>>>>>>>>>    
44640>>>>>>>>>>>    //
44640>>>>>>>>>>>    // created for Server support
44640>>>>>>>>>>>    //
44640>>>>>>>>>>>    Procedure Clear_Set
44642>>>>>>>>>>>        Broadcast Send clear_set
44644>>>>>>>>>>>    End_Procedure
44645>>>>>>>>>>>    
44645>>>>>>>>>>>    //
44645>>>>>>>>>>>    // created for property support
44645>>>>>>>>>>>    //
44645>>>>>>>>>>>    Function Changed_State Returns Integer
44647>>>>>>>>>>>        Integer retval
44647>>>>>>>>>>>        Get Private.Changed_State to retval
44648>>>>>>>>>>>        Function_Return retval
44649>>>>>>>>>>>    End_Function
44650>>>>>>>>>>>    
44650>>>>>>>>>>>    //
44650>>>>>>>>>>>    // cancelled from Server mixin
44650>>>>>>>>>>>    //
44650>>>>>>>>>>>    Procedure Set Changed_State Integer newVal
44652>>>>>>>>>>>    End_Procedure
44653>>>>>>>>>>>    
44653>>>>>>>>>>>    //
44653>>>>>>>>>>>    // created for EntItem convenience
44653>>>>>>>>>>>    //
44653>>>>>>>>>>>    Procedure Entry_Clear Integer file#
44655>>>>>>>>>>>        If (Has_Components_State(Self)) ;            Broadcast Send Entry_Clear file#
44659>>>>>>>>>>>    End_Procedure
44660>>>>>>>>>>>    
44660>>>>>>>>>>>    //
44660>>>>>>>>>>>    // created for EntItem convenience
44660>>>>>>>>>>>    //
44660>>>>>>>>>>>    Procedure Entry_Clear_All Integer file#
44662>>>>>>>>>>>        If (Has_Components_State(Self)) ;            Broadcast Send Entry_Clear_All file#
44666>>>>>>>>>>>    End_Procedure
44667>>>>>>>>>>>    
44667>>>>>>>>>>>    //
44667>>>>>>>>>>>    // created for EntItem convenience
44667>>>>>>>>>>>    //
44667>>>>>>>>>>>    Procedure Entry_Display Integer file# Integer flag
44669>>>>>>>>>>>        If (Has_Components_State(Self)) ;            Broadcast Send Entry_Display file# flag
44673>>>>>>>>>>>    End_Procedure
44674>>>>>>>>>>>    
44674>>>>>>>>>>>    Procedure End_Construct_Object
44676>>>>>>>>>>>        Send Mark_Components      // nesting
44677>>>>>>>>>>>        Send Define_Access_Keys 0 // action_bar_keys
44678>>>>>>>>>>>        Forward Send End_Construct_Object
44680>>>>>>>>>>>    End_Procedure
44681>>>>>>>>>>>    
44681>>>>>>>>>>>    // Added for deo delegate support
44681>>>>>>>>>>>    Procedure Request_Clear
44683>>>>>>>>>>>        Integer obj# retval foc
44683>>>>>>>>>>>        If (should_delegate_clear(Self)) ;            Delegate Send request_clear
44687>>>>>>>>>>>        Else Begin
44688>>>>>>>>>>>            Get Locate_Server to obj# // locate needed in case this is a DSO
44689>>>>>>>>>>>            If (should_save(Self) and ;                (Verify_Data_Loss(Self) <> 0)) ;                Procedure_Return
44692>>>>>>>>>>>            
44692>>>>>>>>>>>            Get Focus of desktop to Foc
44693>>>>>>>>>>>            Get Object_Item_Validation of Foc to retval
44694>>>>>>>>>>>            Set Object_Item_Validation of Foc to False
44695>>>>>>>>>>>            
44695>>>>>>>>>>>            If (obj# <> 0) ;                Send Clear to obj#
44698>>>>>>>>>>>            Else ;                Send entry_clear 0
44700>>>>>>>>>>>            If (Auto_Top_Panel_State(Self)) ;                Send beginning_of_panel
44703>>>>>>>>>>>            Set Object_Item_Validation of Foc to retval
44704>>>>>>>>>>>        End
44704>>>>>>>>>>>>
44704>>>>>>>>>>>    End_Procedure
44705>>>>>>>>>>>    
44705>>>>>>>>>>>    Procedure Request_Clear_All
44707>>>>>>>>>>>        Integer obj# retval foc
44707>>>>>>>>>>>        If (should_delegate_clear(Self)) ;            Delegate Send request_clear_all
44711>>>>>>>>>>>        Else Begin
44712>>>>>>>>>>>            Get Locate_Server to obj#
44713>>>>>>>>>>>            If (Should_Save(Self) and ;                (Verify_Data_Loss(Self) <> 0)) ;                Procedure_Return
44716>>>>>>>>>>>            
44716>>>>>>>>>>>            Get Focus of desktop to Foc
44717>>>>>>>>>>>            Get Object_Item_Validation of Foc to retval
44718>>>>>>>>>>>            Set Object_Item_Validation of Foc to False
44719>>>>>>>>>>>            
44719>>>>>>>>>>>            If (obj# <> 0) ;                Send clear_all to obj#
44722>>>>>>>>>>>            Else ;                Send entry_clear_all 0
44724>>>>>>>>>>>            If (Auto_Top_Panel_State(Self)) ;                Send beginning_of_panel
44727>>>>>>>>>>>            Set Object_Item_Validation of Foc to retval
44728>>>>>>>>>>>        End
44728>>>>>>>>>>>>
44728>>>>>>>>>>>    End_Procedure
44729>>>>>>>>>>>    
44729>>>>>>>>>>>    Procedure Request_Delete
44731>>>>>>>>>>>        Integer obj#
44731>>>>>>>>>>>        
44731>>>>>>>>>>>        If (should_delegate_delete(Self)) ;            Delegate Send request_delete
44735>>>>>>>>>>>        Else Begin
44736>>>>>>>>>>>            Move False to Err
44737>>>>>>>>>>>            Get Locate_Server to obj#
44738>>>>>>>>>>>            If (obj# <> 0 and can_delete(obj#) <> 0) Begin
44740>>>>>>>>>>>                If (Verify_Delete(Self) <> 0) ;                    Procedure_Return
44743>>>>>>>>>>>                Set changed_State to False
44744>>>>>>>>>>>                If (Deferred_State(Self)) ;                    Send Request_Assign to obj# 0  //0 means main_file of Server
44747>>>>>>>>>>>                Send Request_Delete to obj#
44748>>>>>>>>>>>                // ignore auto_clear_deo_state in deletes. Always clear deleted record
44748>>>>>>>>>>>                If (not(err)) ;                    Send Request_Clear
44751>>>>>>>>>>>            End
44751>>>>>>>>>>>>
44751>>>>>>>>>>>        End
44751>>>>>>>>>>>>
44751>>>>>>>>>>>    End_Procedure
44752>>>>>>>>>>>    
44752>>>>>>>>>>>    Procedure Request_Find Integer mode Integer entUpdtFlag
44754>>>>>>>>>>>        If (should_delegate_find(Self)) ;            Delegate Send request_find mode entUpdtFlag
44758>>>>>>>>>>>        Else Begin // for now don't support any default find behavior
44759>>>>>>>>>>>            // in clients
44759>>>>>>>>>>>            Procedure_Return
44760>>>>>>>>>>>        End
44760>>>>>>>>>>>>
44760>>>>>>>>>>>    End_Procedure
44761>>>>>>>>>>>    
44761>>>>>>>>>>>    Procedure Request_Save
44763>>>>>>>>>>>        Integer obj# retval
44763>>>>>>>>>>>        
44763>>>>>>>>>>>        If (should_delegate_save(Self)) ;            Delegate Send request_save
44767>>>>>>>>>>>        Else Begin
44768>>>>>>>>>>>            Get Locate_Server to obj#
44769>>>>>>>>>>>            
44769>>>>>>>>>>>            If (obj# <> 0 and not(Read_Only_State(obj#))) Begin
44771>>>>>>>>>>>                Move False to Err
44772>>>>>>>>>>>                
44772>>>>>>>>>>>                If (Should_Save(Self)) Begin
44774>>>>>>>>>>>                    Get Request_Validate of obj# to retval
44775>>>>>>>>>>>                    If (retval <> 0) ;                        Procedure_Return
44778>>>>>>>>>>>                    //
44778>>>>>>>>>>>                    // modification for Verify support
44778>>>>>>>>>>>                    //
44778>>>>>>>>>>>                    If (Verify_Save(Self) <> 0) ;                        Procedure_Return
44781>>>>>>>>>>>                    //
44781>>>>>>>>>>>                    // modification for Save support
44781>>>>>>>>>>>                    //
44781>>>>>>>>>>>                    If (Deferred_State(Self)) ;                        Send Request_Assign to obj# 0  //0 means main_file of server
44784>>>>>>>>>>>                    
44784>>>>>>>>>>>                    Send Request_Save to obj#
44785>>>>>>>>>>>                End
44785>>>>>>>>>>>>
44785>>>>>>>>>>>                //
44785>>>>>>>>>>>                If (not(err) and Auto_Clear_DEO_State(Self)) ;                    Send Request_Clear
44788>>>>>>>>>>>            End
44788>>>>>>>>>>>>
44788>>>>>>>>>>>        End
44788>>>>>>>>>>>>
44788>>>>>>>>>>>    End_Procedure
44789>>>>>>>>>>>    
44789>>>>>>>>>>>    // this allows us to save a record without it clearing regardless of
44789>>>>>>>>>>>    // the Auto_Clear_DEO_State value
44789>>>>>>>>>>>    //
44789>>>>>>>>>>>    Procedure Request_Save_No_Clear
44791>>>>>>>>>>>        Integer oldclr
44791>>>>>>>>>>>        If (should_delegate_save(Self)) ;            Delegate Send request_save_no_clear
44795>>>>>>>>>>>        Else Begin
44796>>>>>>>>>>>            Get Auto_Clear_DEO_State to OldClr  // whatever it was
44797>>>>>>>>>>>            Set Auto_Clear_DEO_State to False   // it is no NO!
44798>>>>>>>>>>>            Send request_save                   // do your magic
44799>>>>>>>>>>>            Set Auto_Clear_DEO_State to OldClr  // back to whatever it was
44800>>>>>>>>>>>        End
44800>>>>>>>>>>>>
44800>>>>>>>>>>>    End_Procedure
44801>>>>>>>>>>>    
44801>>>>>>>>>>>    Procedure Request_Superfind Integer mode
44803>>>>>>>>>>>        Integer ser# datafile
44803>>>>>>>>>>>        
44803>>>>>>>>>>>        If (should_delegate_find(Self)) ;            Delegate Send request_superfind mode
44807>>>>>>>>>>>        Else Begin
44808>>>>>>>>>>>            Procedure_Return
44809>>>>>>>>>>>        End
44809>>>>>>>>>>>>
44809>>>>>>>>>>>    End_Procedure
44810>>>>>>>>>>>    
44810>>>>>>>>>>>    //  Augment to Support AutoLocate.
44810>>>>>>>>>>>    //  This replaces (not augments) the procedure in actionbr. We need
44810>>>>>>>>>>>    //  to look into this (activating is very risky to augment activating
44810>>>>>>>>>>>    //  in mixins).
44810>>>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
44810>>>>>>>>>>>    Procedure Activating // Returns Integer
44812>>>>>>>>>>>        Integer InvokingId RVal
44812>>>>>>>>>>>        Get Focus of desktop to InvokingId
44813>>>>>>>>>>>        //
44813>>>>>>>>>>>        Forward Get MSG_activating to rVal   //  This is the standard
44815>>>>>>>>>>>        If rVal ;            Procedure_Return rVal        //  actionbr activating
44818>>>>>>>>>>>        Send Add_action_bar                  //  logic
44819>>>>>>>>>>>        If (Auto_Locate_State(Self) ) ;            Send Auto_Locate InvokingId
44822>>>>>>>>>>>    End_Procedure
44823>>>>>>>>>>>    
44823>>>>>>>>>>>    // add this so that all db clients delegate this message.
44823>>>>>>>>>>>    // this is used to catch sub-views (tabview). Tab views (sub
44823>>>>>>>>>>>    // views) will augment this to do something useful
44823>>>>>>>>>>>    Function SubView_Changed Returns Integer
44825>>>>>>>>>>>        Integer hObj
44825>>>>>>>>>>>        Broadcast Get SubView_Changed to hObj
44827>>>>>>>>>>>        Function_Return hObj
44828>>>>>>>>>>>    End_Function
44829>>>>>>>>>>>    
44829>>>>>>>>>>>    // these are needed to pass these on to possible tabview.
44829>>>>>>>>>>>    Function Opening_view_Recursive Returns Integer
44831>>>>>>>>>>>        Integer bFail
44831>>>>>>>>>>>        Broadcast Get Opening_View_Recursive to bFail
44833>>>>>>>>>>>        Function_Return bFail
44834>>>>>>>>>>>    End_Function
44835>>>>>>>>>>>    
44835>>>>>>>>>>>    // these are needed to pass these on to possible tabview.
44835>>>>>>>>>>>    Procedure Seed_Data_Sets_Recursive
44837>>>>>>>>>>>        Broadcast Send Seed_Data_Sets_Recursive
44839>>>>>>>>>>>    End_Procedure
44840>>>>>>>>>>>    
44840>>>>>>>>>>>    // as of 17.0, clients are added to a DDOs DEO list, which means they receive the messages
44840>>>>>>>>>>>    // Refresh, Validate_Items and Entry_Update. These are stubs. The Refresh message is the one
44840>>>>>>>>>>>    // that will be useful. A developer can use this to process DD changes within a view or other
44840>>>>>>>>>>>    // container
44840>>>>>>>>>>>    
44840>>>>>>>>>>>    Procedure Refresh Integer eMode
44842>>>>>>>>>>>    End_Procedure
44843>>>>>>>>>>>    
44843>>>>>>>>>>>    Function Validate_Items Returns Integer
44845>>>>>>>>>>>    End_Function
44846>>>>>>>>>>>    
44846>>>>>>>>>>>    Procedure Entry_Update Integer file# Integer flag
44848>>>>>>>>>>>    End_Procedure
44849>>>>>>>>>>>    
44849>>>>>>>>>>>    Function Data_File Integer iItem Returns Integer
44851>>>>>>>>>>>        Function_Return 0
44852>>>>>>>>>>>    End_Function
44853>>>>>>>>>>>    
44853>>>>>>>>>>>    Function Data_Field Integer iItem Returns Integer
44855>>>>>>>>>>>        Function_Return 0
44856>>>>>>>>>>>    End_Function
44857>>>>>>>>>>>    
44857>>>>>>>>>>>    
44857>>>>>>>>>>>End_Class
44858>>>>>>>>>>>
44858>>>>>>>>>>>
44858>>>>>>>>>>>Define DEFAULT_VIEW_LATCH_STATE         for 1
44858>>>>>>>>>>>Define DEFAULT_VIEW_STATIC_SERVER_STATE for 1
44858>>>>>>>>>>>Define DEFAULT_DSO_DETACH_MODE          for DETACH_IF_NO_CHANGE
44858>>>>>>>>>>>
44858>>>>>>>>>>>Class Entry_View_Client_mixin is a mixin
44859>>>>>>>>>>>    Procedure Construct_Object Integer img#
44861>>>>>>>>>>>        Forward Send construct_object img#
44863>>>>>>>>>>>        Property String View_Name ''  // default name...could be useful
44864>>>>>>>>>>>        Set scope_State to True         // defaults to a Scope
44865>>>>>>>>>>>        Set Attach_Parent_State to True // default...controls parentage better
44866>>>>>>>>>>>        Set Ring_State to True          // default to Ring...makes sense
44867>>>>>>>>>>>        
44867>>>>>>>>>>>        Property Integer DSO_Detach_Mode          Default_DSO_Detach_Mode
44868>>>>>>>>>>>        Property Integer DEO_Attach_All_State     False
44869>>>>>>>>>>>        
44869>>>>>>>>>>>        Property Integer View_Latch_State         True  // Default_View_Latch_State
44870>>>>>>>>>>>        Property Integer Main_DD                  0
44871>>>>>>>>>>>        // keeps track of main-file record when new view is entered!
44871>>>>>>>>>>>        
44871>>>>>>>>>>>        Property RowID priInitialRowId
44872>>>>>>>>>>>        
44872>>>>>>>>>>>        // when false activate will attempt to activate the scope_focus
44872>>>>>>>>>>>        // when true, activate activates first object.
44872>>>>>>>>>>>        Property Integer Auto_Top_View_State      False
44873>>>>>>>>>>>
44873>>>>>>>>>>>        // When activate is performed (as opposed to set current_scope) the
44873>>>>>>>>>>>        // first focusable object is activated. Should the first item of the
44873>>>>>>>>>>>        // first object become the current_item?
44873>>>>>>>>>>>        // If Top_View is true and Top_Item is false you get the old dac
44873>>>>>>>>>>>        // behaviors.
44873>>>>>>>>>>>        Property Integer Auto_Top_Item_State      True
44874>>>>>>>>>>>        
44874>>>>>>>>>>>        // When changing views this will keep track of the object that had
44874>>>>>>>>>>>        // the focus when this view (scope) was exited. This manages nested
44874>>>>>>>>>>>        // scopes within a view.
44874>>>>>>>>>>>        Property Integer private.Last_View_Focus  0
44875>>>>>>>>>>>        Property Integer wasNotinUse_State        False // internal use
44876>>>>>>>>>>>    End_Procedure
44877>>>>>>>>>>>    
44877>>>>>>>>>>>    // Augment exit_application_check. If a change
44877>>>>>>>>>>>    // is detected activate the changed view. This way the user sees what
44877>>>>>>>>>>>    // has been changed.
44877>>>>>>>>>>>    //
44877>>>>>>>>>>>    Function Exit_Application_Check Returns Integer
44879>>>>>>>>>>>        Integer rVal Obj
44879>>>>>>>>>>>        
44879>>>>>>>>>>>        Get Should_Save to Rval // changes in this object???
44880>>>>>>>>>>>        If (rVal = 0) ;            Broadcast Get Exit_Application_Check to Rval // check w/ kids
44884>>>>>>>>>>>        
44884>>>>>>>>>>>        If (rVal <> 0) Begin  // ok a change exist...activate changed view.
44886>>>>>>>>>>>            //
44886>>>>>>>>>>>            // before activating the changed view make sure that we are not
44886>>>>>>>>>>>            // trying to activate this on top of a modal object. Check the current
44886>>>>>>>>>>>            // focus and all of its parent record up to (but not including) the
44886>>>>>>>>>>>            // desktop. If any of these object are modal (have block_mouse_state
44886>>>>>>>>>>>            // set to true) then do not display the changed view.
44886>>>>>>>>>>>            //
44886>>>>>>>>>>>            Get Focus of desktop to Obj
44887>>>>>>>>>>>            While Obj Gt DESKTOP
44891>>>>>>>>>>>                If (Block_Mouse_State(Obj)) ;                    Function_Return rVal // if modal..exit
44894>>>>>>>>>>>                Get Parent of Obj to Obj
44895>>>>>>>>>>>            Loop
44896>>>>>>>>>>>>
44896>>>>>>>>>>>            Send Activate
44897>>>>>>>>>>>        End
44897>>>>>>>>>>>>
44897>>>>>>>>>>>        Function_Return rVal
44898>>>>>>>>>>>    End_Function
44899>>>>>>>>>>>    
44899>>>>>>>>>>>    Function Opening_view_Recursive Returns Integer
44901>>>>>>>>>>>        Integer main bFail
44901>>>>>>>>>>>        Set delegation_mode to delegate_to_parent
44902>>>>>>>>>>>        Get Main_DD to Main
44903>>>>>>>>>>>        Set WasNotInUse_State to ( Main and In_use_State(Main)=0 )
44904>>>>>>>>>>>        Get Opening_View to bFail
44905>>>>>>>>>>>        If not bFail ;            Broadcast Get Opening_View_Recursive to bFail
44909>>>>>>>>>>>        Function_Return bFail
44910>>>>>>>>>>>    End_Function
44911>>>>>>>>>>>    
44911>>>>>>>>>>>    Procedure Seed_Data_Sets_Recursive
44913>>>>>>>>>>>        Integer NotInUse
44913>>>>>>>>>>>        Set delegation_mode to delegate_to_parent
44914>>>>>>>>>>>        Get WasNotInUse_State to NotInUse
44915>>>>>>>>>>>        If NotInUse ;            Send Seed_Data_Sets  // if ok, we've got blank in-use DSO.
44918>>>>>>>>>>>        Set WasNotInUse_State to False
44919>>>>>>>>>>>        Broadcast Send Seed_Data_Sets_Recursive
44921>>>>>>>>>>>    End_Procedure
44922>>>>>>>>>>>    
44922>>>>>>>>>>>    
44922>>>>>>>>>>>    //  Augmented to send Opening_view. If add_focus fails it sends
44922>>>>>>>>>>>    //  closing_view to reverse effects of Opening_view
44922>>>>>>>>>>>    Procedure Add_Focus Handle hoParent Returns Integer
44924>>>>>>>>>>>        Integer rVal Main NotInUse
44924>>>>>>>>>>>        Get Opening_View_Recursive to rval
44925>>>>>>>>>>>        //
44925>>>>>>>>>>>        If (rVal = 0) Begin
44927>>>>>>>>>>>            // Connect DEOs and DSOs as required.
44927>>>>>>>>>>>            Send Connect_DEOs_to_Servers (DEO_Attach_All_State(Self))
44928>>>>>>>>>>>            Forward Get MSG_add_focus hoParent to rVal
44930>>>>>>>>>>>            Send Seed_Data_Sets_Recursive
44931>>>>>>>>>>>        End
44931>>>>>>>>>>>>
44931>>>>>>>>>>>        Procedure_Return rVal
44932>>>>>>>>>>>    End_Procedure
44933>>>>>>>>>>>    
44933>>>>>>>>>>>    // Augmented to Send Closing view
44933>>>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
44933>>>>>>>>>>>    Procedure Deactivating //Returns Integer
44935>>>>>>>>>>>        Integer rVal
44935>>>>>>>>>>>        Forward Get MSG_Deactivating to rVal
44937>>>>>>>>>>>        If (rVal = 0) ;            Send closing_View
44940>>>>>>>>>>>    End_Procedure
44941>>>>>>>>>>>    
44941>>>>>>>>>>>    //  Disconnect servers from deos according to rules.
44941>>>>>>>>>>>    //
44941>>>>>>>>>>>    Procedure Closing_View
44943>>>>>>>>>>>        Integer Mode
44943>>>>>>>>>>>        Get DSO_Detach_Mode to Mode
44944>>>>>>>>>>>        // If we had a View with no DEOs the DSOs would remain in use. We
44944>>>>>>>>>>>        // will take the extra step to set all DSOs in-use-states to false.
44944>>>>>>>>>>>        Send Disconnect_DEOs_from_Servers Mode
44945>>>>>>>>>>>        // we assume that only DSOs understand Set In_Use_State and that
44945>>>>>>>>>>>        // no delegation occurs as part of setting this to false.
44945>>>>>>>>>>>        If (Mode = DETACH_ALWAYS) ;            Broadcast Recursive Set In_use_State to False
44949>>>>>>>>>>>    End_Procedure
44950>>>>>>>>>>>    
44950>>>>>>>>>>>    // use to preload anything into DSOs. By default, if a Main_DD is
44950>>>>>>>>>>>    // defined, we will attempt to latch on
44950>>>>>>>>>>>    // the record that was in the buffer when the view was entered!
44950>>>>>>>>>>>    Procedure Seed_Data_Sets
44952>>>>>>>>>>>        Integer srvr# File#
44952>>>>>>>>>>>        Integer bFill
44952>>>>>>>>>>>        RowID   riInitalRowId
44952>>>>>>>>>>>        Boolean bFound
44952>>>>>>>>>>>        Get Main_DD to srvr#
44953>>>>>>>>>>>        // If no Main-dd we don't do anything automatically, you are on your
44953>>>>>>>>>>>        // own to seed the data-sets any way you want.
44953>>>>>>>>>>>        If Srvr# Begin
44955>>>>>>>>>>>            Get auto_fill_State of srvr# to bFill
44956>>>>>>>>>>>            // if not auto-fill and we've got a record, someone went to a lot of
44956>>>>>>>>>>>            // trouble to set up a record. Don't change it. Normally this would
44956>>>>>>>>>>>            // occur w/ selection lists (which are not auto-fill) that seed the
44956>>>>>>>>>>>            // list in advance.
44956>>>>>>>>>>>            If ( bFill=0 and HasRecord(srvr#) ) ;                Procedure_Return
44959>>>>>>>>>>>            Get priInitialRowId to riInitalRowId
44960>>>>>>>>>>>            If ( not(IsNullRowId(riInitalRowId)) and View_Latch_State(Self) ) Begin
44962>>>>>>>>>>>                // if initial record and we latch, refind it via DSO
44962>>>>>>>>>>>                // Find & relate record manually and then perform
44962>>>>>>>>>>>                // a request_assign. This will not work if the finding file is
44962>>>>>>>>>>>                // a constrained child file
44962>>>>>>>>>>>                Get Main_file of Srvr# to File#
44963>>>>>>>>>>>                // we can now do this in a single step
44963>>>>>>>>>>>                Get FindByRowIdEx of srvr# File# riInitalRowId to bFound
44964>>>>>>>>>>>            End
44964>>>>>>>>>>>>
44964>>>>>>>>>>>            Else ;                 // if no initial record, do a formal                If not bFill ;                Send Clear to Srvr# // clear
44968>>>>>>>>>>>            // If the srvr is auto-fill and there was no initial record we
44968>>>>>>>>>>>            // will chose to do nothing under the assumption that the server
44968>>>>>>>>>>>            // has already done an auto-fill and its guess is as good as
44968>>>>>>>>>>>            // anything we could come up with.
44968>>>>>>>>>>>        End
44968>>>>>>>>>>>>
44968>>>>>>>>>>>    End_Procedure
44969>>>>>>>>>>>    
44969>>>>>>>>>>>    //  Needed by view. Find the record number of the requested file.
44969>>>>>>>>>>>    //  If file = 0 use the main_file of Main_DD (if it exists).
44969>>>>>>>>>>>    Function FileRowId Integer iFile Returns RowID
44971>>>>>>>>>>>        Handle hoMain
44971>>>>>>>>>>>        RowID  riID
44971>>>>>>>>>>>        // if file not passed use main-file of main data set
44971>>>>>>>>>>>        If (iFile=0) Begin
44973>>>>>>>>>>>            Get Main_DD to hoMain
44974>>>>>>>>>>>            If hoMain Begin
44976>>>>>>>>>>>                Get main_file of hoMain to iFile
44977>>>>>>>>>>>            End
44977>>>>>>>>>>>>
44977>>>>>>>>>>>        End
44977>>>>>>>>>>>>
44977>>>>>>>>>>>        If iFile Begin
44979>>>>>>>>>>>            Move (GetRowId(iFile)) to riId
44980>>>>>>>>>>>        End
44980>>>>>>>>>>>>
44980>>>>>>>>>>>        Function_Return riId
44981>>>>>>>>>>>    End_Function
44982>>>>>>>>>>>    
44982>>>>>>>>>>>    // We maintain Last_View_Focus to control for nested scopes. A normal
44982>>>>>>>>>>>    // will have its scope_state true and no scoped children. However, a
44982>>>>>>>>>>>    // zoom might be scoped. We control this by keeping track of the scope when
44982>>>>>>>>>>>    // a scope is exited.
44982>>>>>>>>>>>    
44982>>>>>>>>>>>    Procedure Set Last_View_Focus Integer Foc
44984>>>>>>>>>>>        Set private.Last_View_Focus to Foc
44985>>>>>>>>>>>    End_Procedure
44986>>>>>>>>>>>    
44986>>>>>>>>>>>    // Returns The last scope in the view to have the focus. Before returning
44986>>>>>>>>>>>    // the value make sure that the scope object is active, else return 0
44986>>>>>>>>>>>    Function Last_View_Focus Returns Integer
44988>>>>>>>>>>>        Integer foc
44988>>>>>>>>>>>        Get private.Last_View_Focus to Foc
44989>>>>>>>>>>>        // if not a valid object or this object is not active make it 0
44989>>>>>>>>>>>        If (Foc<=DESKTOP or Active_state(Self)=0 or Active_State(Foc)=0) ;            Move 0 to Foc
44992>>>>>>>>>>>        Function_Return Foc
44993>>>>>>>>>>>    End_Function
44994>>>>>>>>>>>    
44994>>>>>>>>>>>    // Take care of any buffer initialization
44994>>>>>>>>>>>    Function Opening_View Returns Integer
44996>>>>>>>>>>>        Integer main
44996>>>>>>>>>>>        RowID riId
44996>>>>>>>>>>>        
44996>>>>>>>>>>>        // if a main DSO exists and it is not in use we must perform
44996>>>>>>>>>>>        // any required pre-seeding logic.
44996>>>>>>>>>>>        //Get Main_DD to Main
44996>>>>>>>>>>>        //If ( Main AND In_use_State(Main)=0 ) Begin
44996>>>>>>>>>>>        If ( wasNotinUse_State(Self))  Begin
44998>>>>>>>>>>>            // Always clear all file buffers and keep track of the record number
44998>>>>>>>>>>>            // that was in the main-dso's file-buffer.
44998>>>>>>>>>>>            // This is used by seed_data_sets to seed as required.
44998>>>>>>>>>>>            Get FileRowId 0 to riId
44999>>>>>>>>>>>            Set priInitialRowId to riId
45000>>>>>>>>>>>            //Set Initial_Main_record to Rec#
45000>>>>>>>>>>>            Send Prepare_Data_Sets         // allow custom setting
45001>>>>>>>>>>>            Broadcast Send clear_main_file // Send refind_records to main
45003>>>>>>>>>>>        End
45003>>>>>>>>>>>>
45003>>>>>>>>>>>    End_Function
45004>>>>>>>>>>>    
45004>>>>>>>>>>>    // only called if Main_DD exists and it is not yet in-use
45004>>>>>>>>>>>    Procedure Prepare_Data_Sets
45006>>>>>>>>>>>    End_Procedure
45007>>>>>>>>>>>    
45007>>>>>>>>>>>    // added to make the file buffers more reliable
45007>>>>>>>>>>>    Procedure Entering_Scope Returns Integer
45009>>>>>>>>>>>        Integer rVal
45009>>>>>>>>>>>        Forward Get MSG_entering_scope to rVal
45011>>>>>>>>>>>        // The refind is probably a feature that should always happen.
45011>>>>>>>>>>>        // The main-data-set was a way to make this backwards compatable.
45011>>>>>>>>>>>        // Maybe that made no sense.
45011>>>>>>>>>>>        If (rVal = 0) ;            Broadcast Send refind_DD_records // only refinds in-use DDs.
45015>>>>>>>>>>>        Procedure_Return rVal
45016>>>>>>>>>>>    End_Procedure
45017>>>>>>>>>>>    
45017>>>>>>>>>>>    // Augment to keep track of the scope that had the focus when this
45017>>>>>>>>>>>    // view was exited. Exiting_Scope seems to get called at the right
45017>>>>>>>>>>>    // times - only when focus is moved to an object outside of view's focus.
45017>>>>>>>>>>>    Procedure Exiting_Scope Handle hoNewScope
45019>>>>>>>>>>>        Integer rVal
45019>>>>>>>>>>>        Forward Get MSG_Exiting_Scope hoNewScope to rVal
45021>>>>>>>>>>>        If (rVal = 0) ;            Set Last_View_Focus to (Current_Scope(Self))
45024>>>>>>>>>>>    End_Procedure
45025>>>>>>>>>>>    
45025>>>>>>>>>>>    //  Augmented to allow views to take the focus without changing the
45025>>>>>>>>>>>    //  focus within the object. The property Auto_top_View_State controls
45025>>>>>>>>>>>    //  this. If true, always return to first object, first item. If false
45025>>>>>>>>>>>    //  return to current-item of scope focus (when possible).
45025>>>>>>>>>>>    //
45025>>>>>>>>>>>    Procedure Activate Returns Integer
45027>>>>>>>>>>>        Integer rVal Foc
45027>>>>>>>>>>>        If ( Auto_Top_View_State(Self)=0 and ; // Do we want behavior?            scope_state(Self) and ;           // s/b true.            Active_state(Self) ) Begin        // Only if active.
45029>>>>>>>>>>>            // Last_View_Focus is the last scope to have the focus.
45029>>>>>>>>>>>            // It should be active (if not the prop is 0).
45029>>>>>>>>>>>            // If for some reason the focus is 0, do a vanilla activate.
45029>>>>>>>>>>>            Get Last_View_Focus to Foc
45030>>>>>>>>>>>            If Foc ;                Set Current_Scope to Foc
45033>>>>>>>>>>>            Else ;                Forward Get Msg_Activate to rVal
45036>>>>>>>>>>>        End
45036>>>>>>>>>>>>
45036>>>>>>>>>>>        Else Begin
45037>>>>>>>>>>>            Forward Get Msg_Activate to rVal
45039>>>>>>>>>>>            // first Item of first object.
45039>>>>>>>>>>>            If ( Rval=0 and Auto_Top_Item_State(Self) ) ;                Send Beginning_of_Panel
45042>>>>>>>>>>>        End
45042>>>>>>>>>>>>
45042>>>>>>>>>>>        Procedure_Return rVal
45043>>>>>>>>>>>    End_Procedure
45044>>>>>>>>>>>    
45044>>>>>>>>>>>    // Views don't delegate to get this property. It uses system default
45044>>>>>>>>>>>    Function Default_Static_Server_State Returns Integer
45046>>>>>>>>>>>        Function_Return DEFAULT_VIEW_STATIC_SERVER_STATE
45047>>>>>>>>>>>    End_Function
45048>>>>>>>>>>>    
45048>>>>>>>>>>>End_Class
45049>>>>>>>>>>>
45049>>>>>>>>>>>//
45049>>>>>>>>>>>//  Client for Selection Lists.
45049>>>>>>>>>>>//
45049>>>>>>>>>>>//  Selection_lists and Pick_lists need to know if they should
45049>>>>>>>>>>>//  move their values out. With simple sel/pick lists it figures this
45049>>>>>>>>>>>//  out if the list is a popup object. (POPUP sets the property
45049>>>>>>>>>>>//  move_value_out_state to TRUE. If the sel\pick list needs to be
45049>>>>>>>>>>>//  encapulsated by a client the actual list object is no longer a
45049>>>>>>>>>>>//  popup (the client is). We need this special client to set the
45049>>>>>>>>>>>//  move_value_out_state of the list. It does this by broadcasting
45049>>>>>>>>>>>//  this to all objects. This only works if the sel/pick list object is
45049>>>>>>>>>>>//  a direct child of the client (which it always will be).
45049>>>>>>>>>>>//
45049>>>>>>>>>>>//  Also note that this class supports movable objects
45049>>>>>>>>>>>
45049>>>>>>>>>>>Register_Procedure Set Move_Value_Out_State Integer State
45049>>>>>>>>>>>
45049>>>>>>>>>>>// used to catch old obsolete syntax
45049>>>>>>>>>Use DFNav_mx.pkg // Navigation changes for DF DEOs
Including file: Dfnav_mx.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfnav_mx.pkg)
45049>>>>>>>>>>>Use VDFBase.pkg
45049>>>>>>>>>>>
45049>>>>>>>>>>>Class DFnavigate_mixin is a Mixin
45050>>>>>>>>>>>    
45050>>>>>>>>>>>    Procedure define_DFNavigation
45052>>>>>>>>>>>        
45052>>>>>>>>>>>        On_Key kSwitch            Send Switch_Next_Area   PRIVATE
45053>>>>>>>>>>>        On_Key kSwitch_Back       Send Switch_Prior_Area  PRIVATE
45054>>>>>>>>>>>        
45054>>>>>>>>>>>        //  Change Panel switching to view switching.
45054>>>>>>>>>>>        //  The messages Switch_next_view and Switch_Prior_View
45054>>>>>>>>>>>        //  need to be resolved (via delegation) in the view object.
45054>>>>>>>>>>>        //  This means that all dfentry object must be placed inside
45054>>>>>>>>>>>        //  of a view object. This might cause problems ... we will see.
45054>>>>>>>>>>>        
45054>>>>>>>>>>>    End_Procedure
45055>>>>>>>>>>>    
45055>>>>>>>>>>>    Procedure Close_Panel
45057>>>>>>>>>>>        Send Exit_Function
45058>>>>>>>>>>>    End_Procedure
45059>>>>>>>>>>>    
45059>>>>>>>>>>>End_Class
45060>>>>>>>>>Use dfConfrm.pkg
45060>>>>>>>>>Use Dfdbmdpn.pkg // adds obsolete pointerButton for dbModalPanel
Including file: Dfdbmdpn.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfdbmdpn.pkg)
45060>>>>>>>>>>>Use Windows.pkg
45060>>>>>>>>>>>
45060>>>>>>>>>>>Class PointerButton is a Button
45061>>>>>>>>>>>    
45061>>>>>>>>>>>    Procedure Construct_Object
45063>>>>>>>>>>>        Forward Send Construct_Object
45065>>>>>>>>>>>        Set focus_mode to pointer_Only
45066>>>>>>>>>>>    End_Procedure
45067>>>>>>>>>>>    
45067>>>>>>>>>>>    Procedure Command Integer i1 Integer i2
45069>>>>>>>>>>>        Send Redirect_Message
45070>>>>>>>>>>>    End_Procedure
45071>>>>>>>>>>>    
45071>>>>>>>>>>>    Procedure Redirect_Message Returns Integer
45073>>>>>>>>>>>        Integer msg obj rval
45073>>>>>>>>>>>        Get message 0 to Msg
45074>>>>>>>>>>>        Get Aux_Value 0 to obj
45075>>>>>>>>>>>        If Msg ;            Get Msg of ( If(obj, obj, Focus(desktop)) ) to rval
45078>>>>>>>>>>>        Procedure_Return rval
45079>>>>>>>>>>>    End_Procedure
45080>>>>>>>>>>>    
45080>>>>>>>>>>>End_Class
45081>>>>>>>>>Use Dfdafmac.pkg
Including file: Dfdafmac.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfdafmac.pkg)
45081>>>>>>>>>>>Use Windows.pkg
45081>>>>>>>>>>>Use dfcursor.pkg
45081>>>>>>>>>>>
45081>>>>>>>>>>>
45081>>>>>>>>>>>//  This expects to create a view INSIDE of another object
45081>>>>>>>>>>>//  (Like a panel)
45081>>>>>>>>>>>//
45081>>>>>>>>>>>
45081>>>>>>>>>>>
45081>>>>>>>>>>>Define DEFERRED_OBJECT for Deferred_View
45081>>>>>>>>>>>
45081>>>>>>>>>>>Class CD_Client is a Container
45082>>>>>>>>>>>    
45082>>>>>>>>>>>    Procedure Construct_Object
45084>>>>>>>>>>>        Forward Send Construct_Object
45086>>>>>>>>>>>        
45086>>>>>>>>>>>        Property Integer Created_object_id 0
45087>>>>>>>>>>>        
45087>>>>>>>>>>>        Set focus_mode to nonfocusable
45088>>>>>>>>>>>    End_Procedure
45089>>>>>>>>>>>    
45089>>>>>>>>>>>    Procedure Popup
45091>>>>>>>>>>>        Send Popup_Modal
45092>>>>>>>>>>>    End_Procedure
45093>>>>>>>>>>>    
45093>>>>>>>>>>>    Register_Function Destroy_Object_State Returns Integer
45093>>>>>>>>>>>    
45093>>>>>>>>>>>    // is augmented by object instance. Should never
45093>>>>>>>>>>>    // be called.
45093>>>>>>>>>>>    Function Popup_Handle Returns Handle
45095>>>>>>>>>>>        Error DFERR_PROGRAM "Improper use of CD_Popup_Object command"
45096>>>>>>>>>>>>
45096>>>>>>>>>>>    End_Function
45097>>>>>>>>>>>    
45097>>>>>>>>>>>    Procedure Popup_Modal Returns Integer
45099>>>>>>>>>>>        Integer iRet
45099>>>>>>>>>>>        Handle hoId
45099>>>>>>>>>>>        Boolean bDestroy
45099>>>>>>>>>>>        Get Popup_Handle to hoId
45100>>>>>>>>>>>        If hoId Begin
45102>>>>>>>>>>>            Get msg_Popup_Modal of hoId to iRet
45103>>>>>>>>>>>            Get Destroy_Object_State of hoId to bDestroy
45104>>>>>>>>>>>            If bDestroy Begin
45106>>>>>>>>>>>                Send Destroy of hoId
45107>>>>>>>>>>>                Set Created_Object_Id to 0
45108>>>>>>>>>>>            End
45108>>>>>>>>>>>>
45108>>>>>>>>>>>            Procedure_Return iRet
45109>>>>>>>>>>>        End
45109>>>>>>>>>>>>
45109>>>>>>>>>>>    End_Procedure
45110>>>>>>>>>>>    
45110>>>>>>>>>>>End_Class
45111>>>>>>>>>>>
45111>>>>>>>>>>>
45111>>>>>>>>>>>
45111>>>>>>>>>
45111>>>>>>>>>Register_Procedure DoSaveEnvironment Handle hoContainer Boolean bProgram
45111>>>>>>>>>Register_Procedure DoLoadEnvironment Handle hoContainer Boolean bProgram
45111>>>>>>>>>
45111>>>>>>>>>Register_Function Data_Set_Should_Save Returns Integer
45111>>>>>>>>>
45111>>>>>>>>>//
45111>>>>>>>>>//  Grouping classes: Used within views to group objects
45111>>>>>>>>>//
45111>>>>>>>>>//  dbContainer3d_
45111>>>>>>>>>//     dbContainer3d
45111>>>>>>>>>//
45111>>>>>>>>>Class dbContainer3d_ is a Container3d STARTMAC ECstart
45112>>>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
45112>>>>>>>>>    Import_Class_Protocol Entry_Client_mixin // mixin in CM DEO behaviors
45113>>>>>>>>>    
45113>>>>>>>>>    //  Defeat the activating augmentation for auto-locate
45113>>>>>>>>>    //
45113>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
45113>>>>>>>>>    Procedure Activating //Returns Integer
45115>>>>>>>>>        Integer RVal
45115>>>>>>>>>        Forward Get MSG_activating to rVal
45117>>>>>>>>>        Procedure_Return rVal
45118>>>>>>>>>    End_Procedure
45119>>>>>>>>>End_Class
45120>>>>>>>>>
45120>>>>>>>>>Class dbContainer3d is a dbContainer3d_
45121>>>>>>>>>    Procedure Construct_Object
45123>>>>>>>>>        Forward Send Construct_Object No_Image
45125>>>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
45126>>>>>>>>>    End_Procedure
45127>>>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
45128>>>>>>>>>End_Class
45129>>>>>>>>>
45129>>>>>>>>>//
45129>>>>>>>>>// Group Based containers
45129>>>>>>>>>//
45129>>>>>>>>>//  dbGroup_
45129>>>>>>>>>//     dbGroup
45129>>>>>>>>>//
45129>>>>>>>>>Class dbGroup_ is a Group STARTMAC ECstart
45130>>>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
45130>>>>>>>>>    
45130>>>>>>>>>    Import_Class_Protocol Entry_Client_mixin
45131>>>>>>>>>    
45131>>>>>>>>>    //  Defeat the activating augmentation for auto-locate
45131>>>>>>>>>    //
45131>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
45131>>>>>>>>>    Procedure Activating //Returns Integer
45133>>>>>>>>>        Integer RVal
45133>>>>>>>>>        Forward Get MSG_activating to rVal
45135>>>>>>>>>        Procedure_Return rVal
45136>>>>>>>>>    End_Procedure
45137>>>>>>>>>End_Class
45138>>>>>>>>>
45138>>>>>>>>>Class dbGroup is a dbGroup_
45139>>>>>>>>>    Procedure Construct_Object
45141>>>>>>>>>        Forward Send Construct_Object No_Image
45143>>>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
45144>>>>>>>>>    End_Procedure
45145>>>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
45146>>>>>>>>>End_Class
45147>>>>>>>>>
45147>>>>>>>>>
45147>>>>>>>>>//
45147>>>>>>>>>// Invisible Grouping object
45147>>>>>>>>>//
45147>>>>>>>>>//   dbContainer - invisible container
45147>>>>>>>>>//
45147>>>>>>>>>Class dbContainer is an dbContainer3d
45148>>>>>>>>>    Import_Class_Protocol NonVisual_Container_Mixin
45149>>>>>>>>>End_Class
45150>>>>>>>>>
45150>>>>>>>>>//
45150>>>>>>>>>// View Support (views are mdi dialogs)
45150>>>>>>>>>//
45150>>>>>>>>>//   dbAppClient_
45150>>>>>>>>>//     dbAppView_
45150>>>>>>>>>//       dbView
45150>>>>>>>>>//
45150>>>>>>>>>Class dbAppClient_ is a View  STARTMAC ECstart
45151>>>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
45151>>>>>>>>>    
45151>>>>>>>>>    Import_Class_Protocol Entry_Client_mixin
45152>>>>>>>>>    
45152>>>>>>>>>    //  Defeat the activating augmentation for auto-locate
45152>>>>>>>>>    //
45152>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
45152>>>>>>>>>    Procedure Activating //Returns Integer
45154>>>>>>>>>        Integer RVal
45154>>>>>>>>>        Forward Get MSG_activating to rVal
45156>>>>>>>>>        Procedure_Return rVal
45157>>>>>>>>>    End_Procedure
45158>>>>>>>>>End_Class
45159>>>>>>>>>
45159>>>>>>>>>Class dbAppView_ is a dbAppClient_
45160>>>>>>>>>    Import_Class_Protocol entry_view_Client_mixin
45161>>>>>>>>>End_Class
45162>>>>>>>>>
45162>>>>>>>>>Class dbView is a dbAppView_
45163>>>>>>>>>    
45163>>>>>>>>>    Procedure Construct_Object
45165>>>>>>>>>        Forward Send Construct_Object No_Image
45167>>>>>>>>>        
45167>>>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
45168>>>>>>>>>        // dialog views get activated as popup objects.
45168>>>>>>>>>        Set Dso_Detach_Mode to Detach_Always
45169>>>>>>>>>        
45169>>>>>>>>>        // set default verify messages. These are good defaults. The
45169>>>>>>>>>        // developer may wish to change these in their object or sub-class.
45169>>>>>>>>>        // Note: these messsages are defined in dfconfrm.pkg
45169>>>>>>>>>        Set Verify_Data_Loss_Msg   to (RefFunc(Data_Loss_Confirmation))
45170>>>>>>>>>        Set Verify_Delete_Msg      to (RefFunc(Delete_Confirmation))
45171>>>>>>>>>        Set Verify_Save_Msg        to (RefFunc(Save_Confirmation))
45172>>>>>>>>>        Set Verify_Exit_Msg        to (RefFunc(Exit_Loss_Confirmation))
45173>>>>>>>>>        //
45173>>>>>>>>>    End_Procedure
45174>>>>>>>>>    
45174>>>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
45175>>>>>>>>>    
45175>>>>>>>>>    //  Returns TRUE to indicate that this is a DEO. This is used by
45175>>>>>>>>>    //  delegation to figure out if you are within a DEO and should therefore
45175>>>>>>>>>    //  send a DEO message. DEO clients set this true
45175>>>>>>>>>    //
45175>>>>>>>>>    Function DEO_Object Returns Integer
45177>>>>>>>>>        Function_Return 1
45178>>>>>>>>>    End_Function
45179>>>>>>>>>    
45179>>>>>>>>>    //
45179>>>>>>>>>    //  Activate message for views that:
45179>>>>>>>>>    //  1. restores the view if it is minimized
45179>>>>>>>>>    //  2. Maintains the current scope's focus.
45179>>>>>>>>>    //
45179>>>>>>>>>    Procedure Activate_current_scope
45181>>>>>>>>>        If ( View_mode(Self)=VIEWMODE_ICONIZE ) ;            Set view_mode to viewmode_normal
45184>>>>>>>>>        Set Current_Scope to Self
45185>>>>>>>>>    End_Procedure
45186>>>>>>>>>    
45186>>>>>>>>>    // ------------deprecated....Use Object_label.
45186>>>>>>>>>    //  Pass full object name - return the relative name
45186>>>>>>>>>    //  e.g.,  Main.View.Obj1 --> Obj1
45186>>>>>>>>>    Function Local_Object_name String nm Returns String
45188>>>>>>>>>        Integer ps
45188>>>>>>>>>        Repeat
45188>>>>>>>>>>
45188>>>>>>>>>            Move (Pos( ".", nm)) to ps
45189>>>>>>>>>            If (ps = 0) ;                Function_Return nm
45192>>>>>>>>>            Increment ps
45193>>>>>>>>>            Move (Mid( Nm, 255, ps)) to Nm
45194>>>>>>>>>        Loop
45195>>>>>>>>>>
45195>>>>>>>>>    End_Function
45196>>>>>>>>>    
45196>>>>>>>>>    Function View_Changed Returns Integer
45198>>>>>>>>>        Integer Changed
45198>>>>>>>>>        // first see if any DDOs at this level are changed.
45198>>>>>>>>>        Broadcast Get Data_Set_Should_Save to Changed // Ask for changes in Data-sets
45200>>>>>>>>>        // if no changes, see if we have any sub-views that are changed
45200>>>>>>>>>        // This is used to catch tab-view pages.
45200>>>>>>>>>        If not Changed ;            Broadcast Get SubView_Changed to Changed
45204>>>>>>>>>        Function_Return Changed
45205>>>>>>>>>    End_Function
45206>>>>>>>>>    
45206>>>>>>>>>    Procedure Close_Client
45208>>>>>>>>>        Send Exit_Function
45209>>>>>>>>>    End_Procedure
45210>>>>>>>>>    
45210>>>>>>>>>End_Class
45211>>>>>>>>>
45211>>>>>>>>>
45211>>>>>>>>>
45211>>>>>>>>>//
45211>>>>>>>>>// ToolPanel Based Classes
45211>>>>>>>>>//
45211>>>>>>>>>//  dbFloatingPanel_
45211>>>>>>>>>//     dbFloatingPanel
45211>>>>>>>>>//        dbViewFloatingPanel
45211>>>>>>>>>//           dbViewToolPanel
45211>>>>>>>>>//           dbModalPanel <---this will get used
45211>>>>>>>>>//
45211>>>>>>>>>Class dbFloatingPanel_ is a FloatingPanel STARTMAC ECstart
45212>>>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
45212>>>>>>>>>    
45212>>>>>>>>>    Import_Class_Protocol Entry_Client_mixin
45213>>>>>>>>>    
45213>>>>>>>>>    //  Defeat the activating augmentation for auto-locate
45213>>>>>>>>>    //
45213>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
45213>>>>>>>>>    Procedure Activating //Returns Integer
45215>>>>>>>>>        Integer RVal
45215>>>>>>>>>        Forward Get MSG_activating to rVal
45217>>>>>>>>>        Procedure_Return rVal
45218>>>>>>>>>    End_Procedure
45219>>>>>>>>>End_Class
45220>>>>>>>>>
45220>>>>>>>>>Class dbFloatingPanel is a dbFloatingPanel_
45221>>>>>>>>>    Procedure Construct_Object
45223>>>>>>>>>        Forward Send Construct_Object No_Image
45225>>>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
45226>>>>>>>>>        Set Minimize_Icon to False
45227>>>>>>>>>        Set Maximize_Icon to False
45228>>>>>>>>>    End_Procedure
45229>>>>>>>>>    
45229>>>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
45230>>>>>>>>>    
45230>>>>>>>>>    //  Returns TRUE to indicate that this is a DEO. This is used by
45230>>>>>>>>>    //  delegation to figure out if you are within a DEO and should therefore
45230>>>>>>>>>    //  send a DEO message. DEO clients set this true
45230>>>>>>>>>    //
45230>>>>>>>>>    Function DEO_Object Returns Integer
45232>>>>>>>>>        Function_Return 1
45233>>>>>>>>>    End_Function
45234>>>>>>>>>    
45234>>>>>>>>>    // we Modify this not delegate and look for a parent verify exit msg if this msg is 0.
45234>>>>>>>>>    // We assume that toolpanels and dbModalPanels are self contained in terms of opening and closing
45234>>>>>>>>>    // and therefore should only use themselves to figure out if there is a verify exit msg. This is needed
45234>>>>>>>>>    // in case a db modal panel physically placed inside of another DEO.
45234>>>>>>>>>    Function Verify_Exit_msg Returns Integer
45236>>>>>>>>>        Integer msg#
45236>>>>>>>>>        Get private.verify_exit_msg to msg#
45237>>>>>>>>>        // don't look at parent DEOs like we do elsewhere.
45237>>>>>>>>>        //if (msg# = 0 AND Component_State(self)) ;
45237>>>>>>>>>        //    delegate get verify_exit_msg to msg#
45237>>>>>>>>>        Function_Return msg#
45238>>>>>>>>>    End_Function
45239>>>>>>>>>    
45239>>>>>>>>>End_Class
45240>>>>>>>>>
45240>>>>>>>>>Class dbViewFloatingPanel is a dbFloatingPanel
45241>>>>>>>>>    Import_Class_Protocol entry_view_Client_mixin
45242>>>>>>>>>End_Class
45243>>>>>>>>>
45243>>>>>>>>>Class dbViewToolPanel is a dbViewFloatingPanel
45244>>>>>>>>>    
45244>>>>>>>>>    Procedure Construct_Object
45246>>>>>>>>>        Forward Send Construct_Object No_Image
45248>>>>>>>>>        Set Extended_Window_Style to WS_EX_TOOLWINDOW True
45249>>>>>>>>>    End_Procedure
45250>>>>>>>>>    
45250>>>>>>>>>End_Class
45251>>>>>>>>>
45251>>>>>>>>>//  EntryModalPanel
45251>>>>>>>>>
45251>>>>>>>>>Class dbModalPanel is a dbViewFloatingPanel
45252>>>>>>>>>    Procedure Construct_Object
45254>>>>>>>>>        Forward Send Construct_Object No_Image
45256>>>>>>>>>        
45256>>>>>>>>>        Set Extended_Window_Style to WS_EX_DLGMODALFRAME True
45257>>>>>>>>>        Set Modal_State to True
45258>>>>>>>>>        
45258>>>>>>>>>        Property Integer List_Object  0
45259>>>>>>>>>        
45259>>>>>>>>>        Property Integer Button_Height     14
45260>>>>>>>>>        Property Integer Button_Width      50
45261>>>>>>>>>        
45261>>>>>>>>>        Property Integer Max_Text_Extent   0
45262>>>>>>>>>        
45262>>>>>>>>>        Object Button_Ids is an array
45264>>>>>>>>>        End_Object
45265>>>>>>>>>    End_Procedure
45266>>>>>>>>>    
45266>>>>>>>>>    Function Button_Count Returns Integer
45268>>>>>>>>>        Function_Return (Item_count(Button_Ids))
45269>>>>>>>>>    End_Function
45270>>>>>>>>>    
45270>>>>>>>>>    Procedure Add_Button String sLabel Integer hMsg Integer hoTo
45272>>>>>>>>>        Integer hoBtn tx
45272>>>>>>>>>        // 8.2 - use newer syntax for creating dynamic objects
45272>>>>>>>>>        Get Create U_PointerButton to hoBtn
45273>>>>>>>>>        Set peAnchors of hoBtn to anBottomRight
45274>>>>>>>>>        Set Value of hoBtn 0 to sLabel
45275>>>>>>>>>        Set Message of hoBtn 0 to hMsg
45276>>>>>>>>>        If (Num_Arguments>2) ;            Set aux_value of hoBtn 0 to hoTo
45279>>>>>>>>>        Get Text_Extent of hoBtn sLabel to tx
45280>>>>>>>>>        Move (low(tx)) to tx
45281>>>>>>>>>        Set Array_Value of Button_Ids (Button_Count(Self)) to hoBtn
45282>>>>>>>>>        If (tx > Max_Text_Extent(Self));            Set Max_Text_Extent to tx
45285>>>>>>>>>    End_Procedure
45286>>>>>>>>>    
45286>>>>>>>>>    Procedure Size_Buttons
45288>>>>>>>>>        Integer bheight bwidth nb obj Bobj bt mt gsiz gwd
45288>>>>>>>>>        
45288>>>>>>>>>        Get button_height to bheight
45289>>>>>>>>>        Get button_width  to bwidth
45290>>>>>>>>>        Get Button_count to nb
45291>>>>>>>>>        Decrement nb
45292>>>>>>>>>        
45292>>>>>>>>>        Move Button_ids to obj
45293>>>>>>>>>        
45293>>>>>>>>>        For bt from 0 to nb
45299>>>>>>>>>>
45299>>>>>>>>>            Get integer_value of obj bt to bobj // button id
45300>>>>>>>>>            Set Size of bobj to bheight bwidth       // set dflt size
45301>>>>>>>>>            If (bt = 0) Begin
45303>>>>>>>>>                Get Max_Text_Extent to mt
45304>>>>>>>>>                Add 8 to mt
45305>>>>>>>>>                Get guisize of bobj to gsiz
45306>>>>>>>>>                Move (low(gsiz)) to gwd
45307>>>>>>>>>                If (gwd < mt) Begin
45309>>>>>>>>>                    Set guisize of bobj to (hi(gsiz)) mt
45310>>>>>>>>>                    Send adjust_logicals to bobj
45311>>>>>>>>>                    Move (low(size(bobj))) to bwidth
45312>>>>>>>>>                    Set Button_width to bwidth
45313>>>>>>>>>                End
45313>>>>>>>>>>
45313>>>>>>>>>            End
45313>>>>>>>>>>
45313>>>>>>>>>        Loop
45314>>>>>>>>>>
45314>>>>>>>>>    End_Procedure
45315>>>>>>>>>    
45315>>>>>>>>>    Procedure Position_Child_Objects
45317>>>>>>>>>        Integer lsz psz wd pwd ht llc nb mt bobj obj cht col bt list_obj
45317>>>>>>>>>        Integer rmrgn swd
45317>>>>>>>>>        
45317>>>>>>>>>        If (not(pbSizeToClientArea(Self))) Begin
45319>>>>>>>>>            // if using old sizing, we have not changed anything for 14.0
45319>>>>>>>>>            If (caption_bar(Self)) ;                Move (Hi(Physical_fontsize(Self))+4+6) to cht
45322>>>>>>>>>            Else ;                Move 0 to cht
45324>>>>>>>>>            
45324>>>>>>>>>            Get GUISize to psz               // size of panel
45325>>>>>>>>>            Get List_Object to List_obj      // id of the list object
45326>>>>>>>>>            If list_obj Begin
45328>>>>>>>>>                Get GUISize of list_obj to lSz
45329>>>>>>>>>                Get GUIlocation of list_obj to llc
45330>>>>>>>>>                Move (low(llc)+low(lsz)+2) to rmrgn
45331>>>>>>>>>            End
45331>>>>>>>>>>
45331>>>>>>>>>            Else ;                Move (low(psz)-8) to rmrgn
45333>>>>>>>>>            
45333>>>>>>>>>            Get Button_count to nb        // number of buttons
45334>>>>>>>>>            
45334>>>>>>>>>            If (nb = 0) ;                Move ( hi(psz) - 4 - cht - 8) to ht
45337>>>>>>>>>            Else Begin
45338>>>>>>>>>                Move Button_ids to obj
45339>>>>>>>>>                Get integer_value of obj 0 to bobj
45340>>>>>>>>>                Get guisize of bobj to ht
45341>>>>>>>>>                Move (low(ht)) to wd
45342>>>>>>>>>                Move ( hi(ht)) to ht
45343>>>>>>>>>                Move 8 to swd // width of each space
45344>>>>>>>>>                If ( (rmrgn - ((wd+swd)*nb-swd)) < 0 ) ;                    Move 2 to swd
45347>>>>>>>>>                Move ( hi(psz) - ht - 4 - cht - 8) to ht
45348>>>>>>>>>                
45348>>>>>>>>>                Move (rmrgn-wd) to col
45349>>>>>>>>>                Decrement nb
45350>>>>>>>>>                While nb ge 0
45354>>>>>>>>>                    Get integer_value of obj nb to bobj
45355>>>>>>>>>                    Set GUIlocation of bobj to ht col
45356>>>>>>>>>                    Send Adjust_Logicals to bobj
45357>>>>>>>>>                    Move (col - swd - wd) to col
45358>>>>>>>>>                    Decrement nb
45359>>>>>>>>>                End
45360>>>>>>>>>>
45360>>>>>>>>>            End
45360>>>>>>>>>>
45360>>>>>>>>>            
45360>>>>>>>>>            If list_obj Begin
45362>>>>>>>>>                Get GUISize of list_obj to lSz
45363>>>>>>>>>                Get GUIlocation of list_obj to llc
45364>>>>>>>>>                Move ( ht - Hi(llc) - 12 ) to ht
45365>>>>>>>>>                Set GUIsize of list_obj to ht (low(lsz))
45366>>>>>>>>>                Send Adjust_Logicals to list_obj
45367>>>>>>>>>            End
45367>>>>>>>>>>
45367>>>>>>>>>        End
45367>>>>>>>>>>
45367>>>>>>>>>        Else Begin
45368>>>>>>>>>            
45368>>>>>>>>>            // this is still obsolete, but we will make it work with client sizing, which makes it simpler actually
45368>>>>>>>>>            // bote that 8 is used through out as the GUI spacing amount. This is legacy and will not be changed
45368>>>>>>>>>            
45368>>>>>>>>>            Get GUISize to psz               // size of panel
45369>>>>>>>>>            Get List_Object to List_obj      // id of the list object
45370>>>>>>>>>            If list_obj Begin
45372>>>>>>>>>                Get GUISize of list_obj to lSz
45373>>>>>>>>>                Get GUIlocation of list_obj to llc
45374>>>>>>>>>                Move (low(llc)+low(lsz)) to rmrgn
45375>>>>>>>>>            End
45375>>>>>>>>>>
45375>>>>>>>>>            Else Begin
45376>>>>>>>>>                Move (low(psz)-8) to rmrgn
45377>>>>>>>>>            End
45377>>>>>>>>>>
45377>>>>>>>>>            
45377>>>>>>>>>            Get Button_count to nb        // number of buttons
45378>>>>>>>>>            
45378>>>>>>>>>            If (nb = 0) ;                Move ( hi(psz) ) to ht
45381>>>>>>>>>            Else Begin
45382>>>>>>>>>                Move Button_ids to obj
45383>>>>>>>>>                Get integer_value of obj 0 to bobj
45384>>>>>>>>>                Get guisize of bobj to ht
45385>>>>>>>>>                Move (low(ht)) to wd
45386>>>>>>>>>                Move ( hi(ht)) to ht
45387>>>>>>>>>                Move 8 to swd // width of each space
45388>>>>>>>>>                Move ( hi(psz) - ht - 8) to ht
45389>>>>>>>>>                
45389>>>>>>>>>                Move (rmrgn-wd) to col
45390>>>>>>>>>                Decrement nb
45391>>>>>>>>>                While (nb>=0)
45395>>>>>>>>>                    Get integer_value of obj nb to bobj
45396>>>>>>>>>                    Set GUIlocation of bobj to ht col
45397>>>>>>>>>                    Send Adjust_Logicals to bobj
45398>>>>>>>>>                    Move (col - swd - wd) to col
45399>>>>>>>>>                    Decrement nb
45400>>>>>>>>>                End
45401>>>>>>>>>>
45401>>>>>>>>>            End
45401>>>>>>>>>>
45401>>>>>>>>>            
45401>>>>>>>>>            If list_obj Begin
45403>>>>>>>>>                Get GUISize of list_obj to lSz
45404>>>>>>>>>                Get GUIlocation of list_obj to llc
45405>>>>>>>>>                Move ( ht - Hi(llc) - 8 ) to ht
45406>>>>>>>>>                Set GUIsize of list_obj to ht (low(lsz))
45407>>>>>>>>>                Send Adjust_Logicals of list_obj
45408>>>>>>>>>            End
45408>>>>>>>>>>
45408>>>>>>>>>        End
45408>>>>>>>>>>
45408>>>>>>>>>    End_Procedure
45409>>>>>>>>>    
45409>>>>>>>>>    Procedure End_Construct_Object
45411>>>>>>>>>        Send Size_Buttons
45412>>>>>>>>>        Send Position_Child_Objects
45413>>>>>>>>>        Forward Send end_construct_object
45415>>>>>>>>>    End_Procedure
45416>>>>>>>>>    
45416>>>>>>>>>    Procedure Search
45418>>>>>>>>>        Integer Obj#
45418>>>>>>>>>        Get List_Object to obj#
45419>>>>>>>>>        If Obj# ;            Send Search to Obj#
45422>>>>>>>>>    End_Procedure
45423>>>>>>>>>    
45423>>>>>>>>>    // created for advanced CD_popup_object support. Returns the true handle of the
45423>>>>>>>>>    // popup object whether it is a regular object or a CD popup object.
45423>>>>>>>>>    Function Popup_Handle Returns Handle
45425>>>>>>>>>        Function_Return Self
45426>>>>>>>>>    End_Function
45427>>>>>>>>>    
45427>>>>>>>>>End_Class
45428>>>>>>>>>
45428>>>>>>>>>//
45428>>>>>>>>>// Panel Based Classes
45428>>>>>>>>>//
45428>>>>>>>>>//  dbPanel_
45428>>>>>>>>>//     dbPanel
45428>>>>>>>>>//        dbViewPanel_
45428>>>>>>>>>//           dbViewPanel
45428>>>>>>>>>//
45428>>>>>>>>>// None of these are likely to be used
45428>>>>>>>>>//
45428>>>>>>>>>
45428>>>>>>>>>Class dbPanel_ is a BasicPanel STARTMAC ECstart
45429>>>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
45429>>>>>>>>>    
45429>>>>>>>>>    Import_Class_Protocol Entry_Client_mixin
45430>>>>>>>>>    
45430>>>>>>>>>    //  Defeat the activating augmentation for auto-locate
45430>>>>>>>>>    //
45430>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
45430>>>>>>>>>    Procedure Activating //Returns Integer
45432>>>>>>>>>        Integer RVal
45432>>>>>>>>>        Forward Get MSG_activating to rVal
45434>>>>>>>>>        Procedure_Return rVal
45435>>>>>>>>>    End_Procedure
45436>>>>>>>>>End_Class
45437>>>>>>>>>
45437>>>>>>>>>Class dbPanel is a dbPanel_
45438>>>>>>>>>    Procedure Construct_Object
45440>>>>>>>>>        Forward Send Construct_Object No_Image
45442>>>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
45443>>>>>>>>>    End_Procedure
45444>>>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
45445>>>>>>>>>End_Class
45446>>>>>>>>>
45446>>>>>>>>>Class dbViewPanel_ is a dbPanel
45447>>>>>>>>>    Import_Class_Protocol entry_view_Client_mixin
45448>>>>>>>>>End_Class
45449>>>>>>>>>
45449>>>>>>>>>Class dbViewPanel is a dbViewPanel_
45450>>>>>>>>>    Procedure Construct_Object
45452>>>>>>>>>        Forward Send Construct_Object No_Image
45454>>>>>>>>>    End_Procedure
45455>>>>>>>>>    
45455>>>>>>>>>    //  Returns TRUE to indicate that this is a DEO. This is used by
45455>>>>>>>>>    //  delegation to figure out if you are within a DEO and should therefore
45455>>>>>>>>>    //  send a DEO message. DEO clients set this true
45455>>>>>>>>>    //
45455>>>>>>>>>    Function DEO_Object Returns Integer
45457>>>>>>>>>        Function_Return 1
45458>>>>>>>>>    End_Function
45459>>>>>>>>>End_Class
45460>>>>>>>Use DFbitmap.pkg
Including file: Dfbitmap.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfbitmap.pkg)
45460>>>>>>>>>Use LanguageText.pkg
45460>>>>>>>>>Use Windows.pkg
45460>>>>>>>>>Use File_Dlg.pkg
45460>>>>>>>>>
45460>>>>>>>>>Class BitmapContainer is a Container3D
45461>>>>>>>>>    
45461>>>>>>>>>    Procedure Construct_Object
45463>>>>>>>>>        Forward Send Construct_Object
45465>>>>>>>>>        
45465>>>>>>>>>        Property Integer Changed_State False
45466>>>>>>>>>        
45466>>>>>>>>>        // If true, double click sends Get Select_Bitmap which invokes
45466>>>>>>>>>        // an open file dialog
45466>>>>>>>>>        Property Integer Allow_Select_Bitmap_State  False
45467>>>>>>>>>        
45467>>>>>>>>>        // title for common file dialog
45467>>>>>>>>>        Property String Dialog_Caption C_$SelectBitmapFile
45468>>>>>>>>>        
45468>>>>>>>>>        // start-up directory for common file dialog
45468>>>>>>>>>        Property String Initial_Folder ""
45469>>>>>>>>>        
45469>>>>>>>>>        Send Define_ToolTip_Support_Mixin
45470>>>>>>>>>        
45470>>>>>>>>>        // this object should not take the focus
45470>>>>>>>>>        Set Focus_Mode to NonFocusable
45471>>>>>>>>>        Set Client_Area_State to False
45472>>>>>>>>>        Set pbUseFormWindowHandle to False   // must come after Define_ToolTip_Support_Mixin
45473>>>>>>>>>    End_Procedure
45474>>>>>>>>>    
45474>>>>>>>>>    Import_Class_Protocol ToolTip_Support_Mixin
45475>>>>>>>>>    
45475>>>>>>>>>    // Although this is not a client it should add child objects to
45475>>>>>>>>>    // the focus tree. Should only be textboxes!
45475>>>>>>>>>    //
45475>>>>>>>>>    Procedure Add_Focus Integer Obj
45477>>>>>>>>>        Forward Send Add_Focus Obj
45479>>>>>>>>>        Broadcast Send Add_Focus Self
45481>>>>>>>>>    End_Procedure
45482>>>>>>>>>    
45482>>>>>>>>>    // Popup an open file dialog and select a bitmap file. Returns file
45482>>>>>>>>>    // name
45482>>>>>>>>>    //
45482>>>>>>>>>    Function Select_Bitmap Returns String
45484>>>>>>>>>        String sFileName
45484>>>>>>>>>        String sPropVal
45484>>>>>>>>>        Integer iRet
45484>>>>>>>>>        Handle hoOpenFile
45484>>>>>>>>>        
45484>>>>>>>>>        Get Create U_OpenDialog to  hoOpenFile
45485>>>>>>>>>        // Mask will look like this: "Bitmaps (.bmp;*.rle)|*.bmp;*.rle|All Files (*.*)|*.*"
45485>>>>>>>>>        Set Filter_String  of hoOpenFile to (C_$Bitmaps * "(.bmp;*.rle)|*.bmp;*.rle|" + C_$AllFiles * "(*.*)|*.*")
45486>>>>>>>>>        Get Dialog_Caption to sPropVal
45487>>>>>>>>>        Set Dialog_Caption of hoOpenFile to sPropVal
45488>>>>>>>>>        Get Initial_Folder to sPropVal
45489>>>>>>>>>        Set Initial_Folder of hoOpenFile to sPropVal
45490>>>>>>>>>        Get Show_Dialog    of hoOpenFile  to iRet
45491>>>>>>>>>        If iRet ;            Get File_Name of hoOpenFile  to sFileName
45494>>>>>>>>>        Send Destroy of hoOpenFile
45495>>>>>>>>>        Function_Return sFileName
45496>>>>>>>>>    End_Function
45497>>>>>>>>>    
45497>>>>>>>>>    Procedure Invoke_Select_Bitmap
45499>>>>>>>>>        String sFileName
45499>>>>>>>>>        Get Select_Bitmap to sFileName
45500>>>>>>>>>        If (sFileName<>"") Begin
45502>>>>>>>>>            Set Bitmap to sFileName
45503>>>>>>>>>            Set Changed_State to True
45504>>>>>>>>>        End
45504>>>>>>>>>>
45504>>>>>>>>>    End_Procedure
45505>>>>>>>>>    
45505>>>>>>>>>    
45505>>>>>>>>>    // Augmented to invoke the filedialog to retrieve a new bitmap
45505>>>>>>>>>    Procedure Mouse_Click Integer i1 Integer i2
45507>>>>>>>>>        Forward Send Mouse_Click i1 i2
45509>>>>>>>>>        If (Allow_Select_Bitmap_State(Self)) Begin
45511>>>>>>>>>            Send Invoke_Select_Bitmap
45512>>>>>>>>>        End
45512>>>>>>>>>>
45512>>>>>>>>>    End_Procedure
45513>>>>>>>>>    
45513>>>>>>>>>    Procedure Page_Object Integer iState
45515>>>>>>>>>        Forward Send Page_Object iState
45517>>>>>>>>>        
45517>>>>>>>>>        // Handle tooltip support....
45517>>>>>>>>>        If (iState = 0) Begin
45519>>>>>>>>>            Send RequestDeleteToolTip
45520>>>>>>>>>        End
45520>>>>>>>>>>
45520>>>>>>>>>        Else Begin
45521>>>>>>>>>            Send RequestAddToolTip
45522>>>>>>>>>        End
45522>>>>>>>>>>
45522>>>>>>>>>    End_Procedure
45523>>>>>>>>>    
45523>>>>>>>>>    
45523>>>>>>>>>    // Called by Page_Object. Handles tooltip creation. We use a dedicated
45523>>>>>>>>>    // method to perform AddToolTip because it is often the case that Page_Object
45523>>>>>>>>>    // is implemented in a mixin class.
45523>>>>>>>>>    Procedure RequestAddToolTip
45525>>>>>>>>>        Send AddToolTip
45526>>>>>>>>>    End_Procedure
45527>>>>>>>>>    
45527>>>>>>>>>    
45527>>>>>>>>>    // Called by Page_Object. Handles tooltip removal.
45527>>>>>>>>>    Procedure RequestDeleteToolTip
45529>>>>>>>>>        Send DeleteToolTip
45530>>>>>>>>>    End_Procedure
45531>>>>>>>>>End_Class
45532>>>>>>>Use GlobalFunctionsProcedures.pkg
45532>>>>>>>Use cRichEdit.pkg
Including file: cRichEdit.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cRichEdit.pkg)
45532>>>>>>>>>Use Windows.pkg
45532>>>>>>>>>Use cEdit_Mixin.pkg
Including file: cEdit_mixin.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cEdit_mixin.pkg)
45532>>>>>>>>>>>// mixin used by both cRichEdit and cTextEdit
45532>>>>>>>>>>>Use Windows.pkg
45532>>>>>>>>>>>
45532>>>>>>>>>>>// for undoType and RedoType
45532>>>>>>>>>>>Enum_List
45532>>>>>>>>>>>    Define utUnknown
45532>>>>>>>>>>>    Define utTyping
45532>>>>>>>>>>>    Define utDelete
45532>>>>>>>>>>>    Define utDragDrop
45532>>>>>>>>>>>    Define utCut
45532>>>>>>>>>>>    Define utPaste
45532>>>>>>>>>>>End_Enum_List
45532>>>>>>>>>>>
45532>>>>>>>>>>>Class cEdit_Mixin is a Mixin
45533>>>>>>>>>>>    
45533>>>>>>>>>>>    Procedure Define_cEdit_Mixin
45535>>>>>>>>>>>        Send Define_Standard_Object_Mixin
45536>>>>>>>>>>>        Send Define_Dflabel_Mixin
45537>>>>>>>>>>>        Send Define_ToolTip_Support_Mixin
45538>>>>>>>>>>>        
45538>>>>>>>>>>>        Set Label_Offset to 1 0
45539>>>>>>>>>>>        Set Label_Justification_Mode to Jmode_Top
45540>>>>>>>>>>>        Set pbUseFormWindowHandle to False     // Must come after Define_ToolTip_Support_Mixin
45541>>>>>>>>>>>        Set Color     to clWindow      // should be the default...also system colors don't work
45542>>>>>>>>>>>        Set TextColor to clWindowText  // should be the default
45543>>>>>>>>>>>        
45543>>>>>>>>>>>        Property Boolean Changed_State False
45544>>>>>>>>>>>        
45544>>>>>>>>>>>        Property Integer pbSuppressChange False
45545>>>>>>>>>>>        
45545>>>>>>>>>>>        Property Integer piPriorEnabledColor 0 // private, used by shadow_display
45546>>>>>>>>>>>        
45546>>>>>>>>>>>        Send Define_Shadow_Mixin
45547>>>>>>>>>>>        
45547>>>>>>>>>>>        Property Integer Floating_Menu_Object Default_Form_Floating_Menu_Id
45548>>>>>>>>>>>        
45548>>>>>>>>>>>        On_Key kEnter Send default_key
45549>>>>>>>>>>>        
45549>>>>>>>>>>>        Set Disable_default_action_button_state to True
45550>>>>>>>>>>>        
45550>>>>>>>>>>>    End_Procedure
45551>>>>>>>>>>>    
45551>>>>>>>>>>>    Import_Class_Protocol Standard_Object_Mixin
45552>>>>>>>>>>>    Import_Class_Protocol Dflabel_Mixin
45553>>>>>>>>>>>    Import_Class_Protocol Shadow_Mixin
45554>>>>>>>>>>>    Import_Class_Protocol ToolTip_Support_Mixin
45555>>>>>>>>>>>    
45555>>>>>>>>>>>    // currently there is no built in context menu support (old edit has one).
45555>>>>>>>>>>>    Procedure Mouse_Down2 Integer iWindowNumber Integer iPosition
45557>>>>>>>>>>>        Integer obj rval
45557>>>>>>>>>>>        Forward Send mouse_down2 iWindowNumber iPosition
45559>>>>>>>>>>>        Get Floating_Menu_object to obj
45560>>>>>>>>>>>        If obj Begin
45562>>>>>>>>>>>            If (Focus(desktop)<>Self) Begin
45564>>>>>>>>>>>                Get msg_Activate to rval
45565>>>>>>>>>>>            End
45565>>>>>>>>>>>>
45565>>>>>>>>>>>            If (Focus(desktop)=Self) Begin
45567>>>>>>>>>>>                Send Popup to obj
45568>>>>>>>>>>>            End
45568>>>>>>>>>>>>
45568>>>>>>>>>>>        End
45568>>>>>>>>>>>>
45568>>>>>>>>>>>    End_Procedure
45569>>>>>>>>>>>    
45569>>>>>>>>>>>    Function Object_Shadow_State Returns Integer
45571>>>>>>>>>>>        Function_Return (Private.Shadow_State(Self))
45572>>>>>>>>>>>    End_Function
45573>>>>>>>>>>>    
45573>>>>>>>>>>>    // enables or disables an active window. Allows enabled_state to be used after object is paged
45573>>>>>>>>>>>    Procedure Enable_Window Integer iState
45575>>>>>>>>>>>        Handle hWnd
45575>>>>>>>>>>>        Get Window_Handle to hWnd
45576>>>>>>>>>>>        If hWnd ;            Move (EnableWindow(hWnd,iState)) to hWnd
45579>>>>>>>>>>>    End_Procedure
45580>>>>>>>>>>>    
45580>>>>>>>>>>>    Procedure Set Current_Shadow_State Integer iState
45582>>>>>>>>>>>        Set Private.Shadow_State to iState     // used by get object_shadow_state/enabled_state
45583>>>>>>>>>>>        Set Window_Style to WS_DISABLED iState // used to set style before the object is paged
45584>>>>>>>>>>>        Send Enable_Window (not(iState))       // used to enable/disable after object is paged
45585>>>>>>>>>>>    End_Procedure
45586>>>>>>>>>>>    
45586>>>>>>>>>>>    
45586>>>>>>>>>>>    Procedure Shadow_Display
45588>>>>>>>>>>>        // control will take care of shadowing itself
45588>>>>>>>>>>>        Send Label_Shadow_Display // if object has a label text box, handle disabling this
45589>>>>>>>>>>>    End_Procedure
45590>>>>>>>>>>>    
45590>>>>>>>>>>>    Procedure Set Item_Shadow_State Integer iItem Integer iState
45592>>>>>>>>>>>    End_Procedure
45593>>>>>>>>>>>    
45593>>>>>>>>>>>    Function Item_Shadow_State Integer iItem Returns Integer
45595>>>>>>>>>>>    End_Function
45596>>>>>>>>>>>    
45596>>>>>>>>>>>    Procedure OnChange
45598>>>>>>>>>>>    End_Procedure
45599>>>>>>>>>>>    
45599>>>>>>>>>>>    Procedure OnMaxText
45601>>>>>>>>>>>    End_Procedure
45602>>>>>>>>>>>    
45602>>>>>>>>>>>    Procedure Command Longptr wParam Longptr lParam
45604>>>>>>>>>>>        Integer iParam
45604>>>>>>>>>>>        Forward Send Command wParam lParam
45606>>>>>>>>>>>        Move (hi(wParam)) to iParam
45607>>>>>>>>>>>        If (iParam=EN_CHANGE) Begin
45609>>>>>>>>>>>            // if we are supressing change notification, do nothing.
45609>>>>>>>>>>>            If (pbSuppressChange(Self)) ;                Procedure_Return
45612>>>>>>>>>>>            If not (changed_state(Self)) Begin
45614>>>>>>>>>>>                Set Changed_state to True
45615>>>>>>>>>>>            End
45615>>>>>>>>>>>>
45615>>>>>>>>>>>            Send OnChange
45616>>>>>>>>>>>        End
45616>>>>>>>>>>>>
45616>>>>>>>>>>>        Else If (iParam=EN_MAXTEXT) Begin
45619>>>>>>>>>>>            Send OnMaxText
45620>>>>>>>>>>>        End
45620>>>>>>>>>>>>
45620>>>>>>>>>>>    End_Procedure
45621>>>>>>>>>>>    
45621>>>>>>>>>>>    // Some messages trigger the command message with a change event. In some circumstances we must suppress this.
45621>>>>>>>>>>>    // The delete_data message and the page message both do this.
45621>>>>>>>>>>>    
45621>>>>>>>>>>>    Procedure Delete_Data
45623>>>>>>>>>>>        Boolean bWas
45623>>>>>>>>>>>        Get pbSuppressChange to bWas
45624>>>>>>>>>>>        Set pbSuppressChange to True // Delete_Data sends command which triggers change. We suppress that here
45625>>>>>>>>>>>        Forward Send delete_data
45627>>>>>>>>>>>        Set changed_state to False
45628>>>>>>>>>>>        Send OnChange
45629>>>>>>>>>>>        Set pbSuppressChange to bWas
45630>>>>>>>>>>>    End_Procedure
45631>>>>>>>>>>>    
45631>>>>>>>>>>>    Procedure Page Integer iState
45633>>>>>>>>>>>        Boolean bWas
45633>>>>>>>>>>>        Get pbSuppressChange to bWas
45634>>>>>>>>>>>        Set pbSuppressChange to True  // Page sends command which triggers change. We suppress that here
45635>>>>>>>>>>>        Forward Send Page iState
45637>>>>>>>>>>>        Set pbSuppressChange to bWas
45638>>>>>>>>>>>    End_Procedure
45639>>>>>>>>>>>    
45639>>>>>>>>>>>    
45639>>>>>>>>>>>    Procedure AppendTextLn String sText
45641>>>>>>>>>>>        Send AppendText sText
45642>>>>>>>>>>>        Send AppendText (character(10))
45643>>>>>>>>>>>    End_Procedure
45644>>>>>>>>>>>    
45644>>>>>>>>>>>    // Called by Page_Object. Handles tooltip creation. We use a dedicated
45644>>>>>>>>>>>    // method to perform AddToolTip because it is often the case that Page_Object
45644>>>>>>>>>>>    // is implemented in a mixin class.
45644>>>>>>>>>>>    Procedure RequestAddToolTip
45646>>>>>>>>>>>        Send AddToolTip
45647>>>>>>>>>>>    End_Procedure
45648>>>>>>>>>>>    
45648>>>>>>>>>>>    
45648>>>>>>>>>>>    // Called by Page_Object. Handles tooltip removal.
45648>>>>>>>>>>>    Procedure RequestDeleteToolTip
45650>>>>>>>>>>>        Send DeleteToolTip
45651>>>>>>>>>>>    End_Procedure
45652>>>>>>>>>>>End_Class
45653>>>>>>>>>
45653>>>>>>>>>// constants used for RichEdit Properties
45653>>>>>>>>>// peAlignment
45653>>>>>>>>>Enum_List
45653>>>>>>>>>    Define alLeft   for 1
45653>>>>>>>>>    Define alRight  for 2
45653>>>>>>>>>    Define alCenter for 3
45653>>>>>>>>>End_Enum_List
45653>>>>>>>>>
45653>>>>>>>>>// peBullets
45653>>>>>>>>>Enum_List
45653>>>>>>>>>    Define buNone
45653>>>>>>>>>    Define buBullets
45653>>>>>>>>>    Define buArabicNumbers
45653>>>>>>>>>    Define buLowerLetters
45653>>>>>>>>>    Define buUpperLetters
45653>>>>>>>>>    Define buLowerRomans
45653>>>>>>>>>    Define buUpperRomans
45653>>>>>>>>>End_Enum_List
45653>>>>>>>>>
45653>>>>>>>>>// peBulletStyle
45653>>>>>>>>>Enum_List
45653>>>>>>>>>    Define busRightParen   for 0
45653>>>>>>>>>    Define busEncloseParen for 256
45653>>>>>>>>>    Define busPeriod       for 512
45653>>>>>>>>>    Define busNumberOnly   for 768
45653>>>>>>>>>    Define busNoDisplay    for 1024
45653>>>>>>>>>End_Enum_List
45653>>>>>>>>>
45653>>>>>>>>>// peLineSpacingType
45653>>>>>>>>>Enum_List
45653>>>>>>>>>    Define lstSingle
45653>>>>>>>>>    Define lstSingleAndOneHalf
45653>>>>>>>>>    Define lstDouble
45653>>>>>>>>>End_Enum_List
45653>>>>>>>>>
45653>>>>>>>>>Class cRichEdit is a DFBaseRichEdit
45654>>>>>>>>>    
45654>>>>>>>>>    Procedure Construct_Object
45656>>>>>>>>>        Forward Send Construct_Object
45658>>>>>>>>>        Send Define_cEdit_Mixin
45659>>>>>>>>>        
45659>>>>>>>>>        On_Key Key_Ctrl+Key_B Send ToggleBold
45660>>>>>>>>>        On_Key Key_Ctrl+Key_I Send ToggleItalics
45661>>>>>>>>>        On_Key Key_Ctrl+Key_U Send ToggleUnderline
45662>>>>>>>>>        
45662>>>>>>>>>    End_Procedure
45663>>>>>>>>>    
45663>>>>>>>>>    Import_Class_Protocol cEdit_Mixin
45664>>>>>>>>>    
45664>>>>>>>>>    Procedure ToggleBold
45666>>>>>>>>>        Set pbBold to (not(pbBold(Self)))
45667>>>>>>>>>    End_Procedure
45668>>>>>>>>>    
45668>>>>>>>>>    Procedure ToggleItalics
45670>>>>>>>>>        Set pbItalics to (not(pbItalics(Self)))
45671>>>>>>>>>    End_Procedure
45672>>>>>>>>>    
45672>>>>>>>>>    Procedure ToggleUnderline
45674>>>>>>>>>        Set pbUnderLine to (not(pbUnderLine(Self)))
45675>>>>>>>>>    End_Procedure
45676>>>>>>>>>    
45676>>>>>>>>>End_Class
45677>>>>>>>>>
45677>>>>>>>>>
45677>>>>>>>Use cTextEdit.pkg
Including file: cTextEdit.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cTextEdit.pkg)
45677>>>>>>>>>use Windows.pkg
45677>>>>>>>>>Use cEdit_Mixin.pkg
45677>>>>>>>>>
45677>>>>>>>>>Class cTextEdit is a DFBaseTextEdit
45678>>>>>>>>>    
45678>>>>>>>>>    Procedure Construct_Object
45680>>>>>>>>>        Forward Send Construct_Object
45682>>>>>>>>>        Send Define_cEdit_Mixin
45683>>>>>>>>>    End_Procedure
45684>>>>>>>>>    
45684>>>>>>>>>    Import_Class_Protocol cEdit_Mixin
45685>>>>>>>>>    
45685>>>>>>>>>End_Class
45686>>>>>>>>>
45686>>>>>>>>>
45686>>>>>>>>>
45686>>>>>>>Use cRichEdit.pkg
45686>>>>>>>Use gFormatNumbers.pkg
Including file: gFormatNumbers.pkg    (C:\Program Files\DataFlex 24.0\Pkg\gFormatNumbers.pkg)
45686>>>>>>>>>Use cFormatter.pkg
Including file: cFormatter.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cFormatter.pkg)
45686>>>>>>>>>>>Use VDFBase.pkg
45686>>>>>>>>>>>
45686>>>>>>>>>>>Class cFormatter is an cObject
45687>>>>>>>>>>>    
45687>>>>>>>>>>>    Procedure Construct_object
45689>>>>>>>>>>>        Integer iCh
45689>>>>>>>>>>>        Forward Send construct_object
45691>>>>>>>>>>>        Property String  psCurrencySymbol
45692>>>>>>>>>>>        Set psCurrencySymbol to (Default_Currency_Symbol())
45693>>>>>>>>>>>        
45693>>>>>>>>>>>        Property String  psLeft
45694>>>>>>>>>>>        Property String  psright
45695>>>>>>>>>>>        Property Integer pbThousandsSep
45696>>>>>>>>>>>        Property Integer piPoints
45697>>>>>>>>>>>        
45697>>>>>>>>>>>        Property String  psCurPosLeft
45698>>>>>>>>>>>        Property String  psCurPosright
45699>>>>>>>>>>>        Property Integer pbCurPosThousandsSep
45700>>>>>>>>>>>        Property Integer piCurPosPoints
45701>>>>>>>>>>>        
45701>>>>>>>>>>>        Property String  psCurNegLeft
45702>>>>>>>>>>>        Property String  psCurNegright
45703>>>>>>>>>>>        Property Integer pbCurNegThousandsSep
45704>>>>>>>>>>>        Property Integer piCurNegPoints
45705>>>>>>>>>>>        
45705>>>>>>>>>>>        Property String  psNumPosLeft
45706>>>>>>>>>>>        Property String  psNumPosright
45707>>>>>>>>>>>        Property Integer pbNumPosThousandsSep
45708>>>>>>>>>>>        Property Integer piNumPosPoints
45709>>>>>>>>>>>        
45709>>>>>>>>>>>        Property String  psNumNegLeft
45710>>>>>>>>>>>        Property String  psNumNegright
45711>>>>>>>>>>>        Property Integer pbNumNegThousandsSep
45712>>>>>>>>>>>        Property Integer piNumNegPoints
45713>>>>>>>>>>>        
45713>>>>>>>>>>>        Send SetFormat "$,#.##;($,#.##)" True  // currency
45714>>>>>>>>>>>        Send SetFormat  ",#.*"           False // numeric
45715>>>>>>>>>>>        
45715>>>>>>>>>>>    End_Procedure
45716>>>>>>>>>>>    
45716>>>>>>>>>>>    // internal
45716>>>>>>>>>>>    // parse passed format string and set temporary properties with result
45716>>>>>>>>>>>    Procedure ParseFormat String sFmt
45718>>>>>>>>>>>        
45718>>>>>>>>>>>        String sLeft sRight sDigit
45718>>>>>>>>>>>        Integer bSep iPos i iDigits
45718>>>>>>>>>>>        
45718>>>>>>>>>>>        // replace any literals. A "/" followed by anything.
45718>>>>>>>>>>>        // some literals are special. $ . , / #
45718>>>>>>>>>>>        Move (Replaces("/$",sFmt,Character(1)))    to sFmt
45719>>>>>>>>>>>        Move (Replaces("/.",sFmt,Character(2)))    to sFmt
45720>>>>>>>>>>>        Move (Replaces("/,",sFmt,Character(3)))    to sFmt
45721>>>>>>>>>>>        Move (Replaces("/"+"/",sFmt,Character(4))) to sFmt
45722>>>>>>>>>>>        Move (Replaces("/#",sFmt,Character(5)))    to sFmt
45723>>>>>>>>>>>        Move (Character(9)) to sDigit
45724>>>>>>>>>>>        Move (Replaces("#",sFmt,sDigit))           to sFmt
45725>>>>>>>>>>>        Move (Replaces("/",sFmt,""))               to sFmt // replace all others
45726>>>>>>>>>>>        
45726>>>>>>>>>>>        Move (Pos(",",sFmt))                 to bSep // if we have any , we use thousand seps
45727>>>>>>>>>>>        If bSep ;            Move (Replaces(",",sFmt,"")) to sFmt // remove all ,
45730>>>>>>>>>>>        
45730>>>>>>>>>>>        Move (Replaces("$",sFmt,psCurrencySymbol(Self))) to sFmt // replace any $ with currency symbol
45731>>>>>>>>>>>        
45731>>>>>>>>>>>        Move (Pos(".",sFmt)) to iPos                 // position of decimal
45732>>>>>>>>>>>        
45732>>>>>>>>>>>        // Move all the special literals back into place before parsing
45732>>>>>>>>>>>        Move (Replaces(Character(1),sFmt,"$")) to sFmt
45733>>>>>>>>>>>        Move (Replaces(Character(2),sFmt,".")) to sFmt
45734>>>>>>>>>>>        Move (Replaces(Character(3),sFmt,",")) to sFmt
45735>>>>>>>>>>>        Move (Replaces(Character(4),sFmt,"/")) to sFmt
45736>>>>>>>>>>>        Move (Replaces(Character(5),sFmt,"#")) to sFmt
45737>>>>>>>>>>>        
45737>>>>>>>>>>>        If (iPos>0) Begin                      // if we have a decimanl point
45739>>>>>>>>>>>            Move 1 to i                        // look for first non # to right and count the #s
45740>>>>>>>>>>>            If (mid(sFmt,1,iPos+i)="*") Begin  // the "*" is special. It means as many as you want
45742>>>>>>>>>>>                Move -2 to iDigits
45743>>>>>>>>>>>                Increment i
45744>>>>>>>>>>>            End
45744>>>>>>>>>>>>
45744>>>>>>>>>>>            While (mid(sFmt,1,iPos+i)=sDigit)
45748>>>>>>>>>>>                Increment i
45749>>>>>>>>>>>            Loop
45750>>>>>>>>>>>>
45750>>>>>>>>>>>            Move (Mid(sFmt,255,iPos+i)) to sRight // everything to the right of the last # is format stuff
45751>>>>>>>>>>>            If (iDigits=0) ;                Move (i-1) to iDigits
45754>>>>>>>>>>>            //
45754>>>>>>>>>>>            Move 1 to i                           // find the first non-# to the left of the point
45755>>>>>>>>>>>            While (mid(sFmt,1,iPos-i)=sDigit)     // everything to the left is format stuff
45759>>>>>>>>>>>                Increment i
45760>>>>>>>>>>>            Loop
45761>>>>>>>>>>>>
45761>>>>>>>>>>>            Move (left(sFmt,iPos-i)) to sLeft
45762>>>>>>>>>>>        End
45762>>>>>>>>>>>>
45762>>>>>>>>>>>        Else Begin                             // we have no decinal
45763>>>>>>>>>>>            Move 0 to iDigits                  // so points is none
45764>>>>>>>>>>>            Move (Pos(sDigit,sFmt)) to iPos    // find first #.
45765>>>>>>>>>>>            If (iPos=0) Begin                  // if none, entire string is left format stuff..wierd!
45767>>>>>>>>>>>                Move sFmt to sLeft
45768>>>>>>>>>>>                Move ""   to sRight
45769>>>>>>>>>>>            End
45769>>>>>>>>>>>>
45769>>>>>>>>>>>            Else Begin
45770>>>>>>>>>>>                Move (left(sFmt,iPos-1)) to sLeft // all char to left of first # is left format stuff
45771>>>>>>>>>>>                Move 1 to i
45772>>>>>>>>>>>                While (mid(sFmt,1,iPos+i)=sDigit) // find last #, all char to right is right format
45776>>>>>>>>>>>                    Increment i
45777>>>>>>>>>>>                Loop
45778>>>>>>>>>>>>
45778>>>>>>>>>>>                Move (Mid(sFmt,255,i+iPos)) to sRight
45779>>>>>>>>>>>            End
45779>>>>>>>>>>>>
45779>>>>>>>>>>>        End
45779>>>>>>>>>>>>
45779>>>>>>>>>>>        // set temporary format properties and exit
45779>>>>>>>>>>>        Set pbThousandsSep to bSep
45780>>>>>>>>>>>        Set psLeft         to sLeft
45781>>>>>>>>>>>        Set psRight        to sRight
45782>>>>>>>>>>>        Set piPoints       to iDigits
45783>>>>>>>>>>>    End_Procedure
45784>>>>>>>>>>>    
45784>>>>>>>>>>>    // Public: Sets a format string. Pass full format for Positve and negative in sFmt. Pass
45784>>>>>>>>>>>    //         bCurrency true is this is a currency format, false if a numeric format
45784>>>>>>>>>>>    //
45784>>>>>>>>>>>    //  e.g. Send SetFormat "$,#.##;($,#.##)" True
45784>>>>>>>>>>>    Procedure SetFormat String sFmt Integer bCurrency
45786>>>>>>>>>>>        String sPos sNeg
45786>>>>>>>>>>>        Integer iPos
45786>>>>>>>>>>>        
45786>>>>>>>>>>>        Move (Pos(";",sFmt)) to iPos
45787>>>>>>>>>>>        If iPos Begin
45789>>>>>>>>>>>            Move (left(sFmt,iPos-1))    to sPos
45790>>>>>>>>>>>            Move (mid(sFmt,255,iPos+1)) to sNeg
45791>>>>>>>>>>>        End
45791>>>>>>>>>>>>
45791>>>>>>>>>>>        Else Begin
45792>>>>>>>>>>>            Move sFmt         to sPos
45793>>>>>>>>>>>            Move ("-" + sFmt) to sNeg
45794>>>>>>>>>>>        End
45794>>>>>>>>>>>>
45794>>>>>>>>>>>        Send ParseFormat sPos
45795>>>>>>>>>>>        If bCurrency Begin
45797>>>>>>>>>>>            Set pbCurPosThousandsSep to (pbThousandsSep(Self))
45798>>>>>>>>>>>            Set psCurPosLeft         to (psLeft(Self))
45799>>>>>>>>>>>            Set psCurPosRight        to (psRight(Self))
45800>>>>>>>>>>>            Set piCurPosPoints       to (piPoints(Self))
45801>>>>>>>>>>>        End
45801>>>>>>>>>>>>
45801>>>>>>>>>>>        Else Begin
45802>>>>>>>>>>>            Set pbNumPosThousandsSep to (pbThousandsSep(Self))
45803>>>>>>>>>>>            Set psNumPosLeft         to (psLeft(Self))
45804>>>>>>>>>>>            Set psNumPosRight        to (psRight(Self))
45805>>>>>>>>>>>            Set piNumPosPoints       to (piPoints(Self))
45806>>>>>>>>>>>        End
45806>>>>>>>>>>>>
45806>>>>>>>>>>>        
45806>>>>>>>>>>>        Send ParseFormat sNeg
45807>>>>>>>>>>>        If bCurrency Begin
45809>>>>>>>>>>>            Set pbCurNegThousandsSep to (pbThousandsSep(Self))
45810>>>>>>>>>>>            Set psCurNegLeft         to (psLeft(Self))
45811>>>>>>>>>>>            Set psCurNegRight        to (psRight(Self))
45812>>>>>>>>>>>            Set piCurNegPoints       to (piPoints(Self))
45813>>>>>>>>>>>        End
45813>>>>>>>>>>>>
45813>>>>>>>>>>>        Else Begin
45814>>>>>>>>>>>            Set pbNumNegThousandsSep to (pbThousandsSep(Self))
45815>>>>>>>>>>>            Set psNumNegLeft         to (psLeft(Self))
45816>>>>>>>>>>>            Set psNumNegRight        to (psRight(Self))
45817>>>>>>>>>>>            Set piNumNegPoints       to (piPoints(Self))
45818>>>>>>>>>>>        End
45818>>>>>>>>>>>>
45818>>>>>>>>>>>    End_Procedure
45819>>>>>>>>>>>    
45819>>>>>>>>>>>    // low level formatting. Pass parameters
45819>>>>>>>>>>>    Function Format_Num Number nNumber Integer iPoints Integer bSep ;            String sPrefix String sSuffix Returns String
45821>>>>>>>>>>>        String  sLeft sRight sNumber sSep sDec
45821>>>>>>>>>>>        Integer iDec iLen iCh
45821>>>>>>>>>>>        
45821>>>>>>>>>>>        Get_Attribute DF_DECIMAL_SEPARATOR to iCh
45824>>>>>>>>>>>        Move (Character(iCh)) to sDec
45825>>>>>>>>>>>        
45825>>>>>>>>>>>        Move (abs(nNumber)) to sNumber
45826>>>>>>>>>>>        Move (Pos(sDec,sNumber)) to iDec
45827>>>>>>>>>>>        Move (If(iDec=0, sNumber, left(sNumber,iDec-1))) to sLeft
45828>>>>>>>>>>>        Move (If(iDec=0, "", mid(sNumber,255,iDec+1)))   to sRight
45829>>>>>>>>>>>        // format for decimal separator
45829>>>>>>>>>>>        If (iPoints>=0) ; // if -2, leave it alone, it should not be -1            Move (left(sRight+Repeat("0",iPoints),iPoints)) to sRight
45832>>>>>>>>>>>        
45832>>>>>>>>>>>        // format for thousand sep.
45832>>>>>>>>>>>        If bSep Begin
45834>>>>>>>>>>>            Get_Attribute DF_THOUSANDS_SEPARATOR to iCh
45837>>>>>>>>>>>            Move (Character(iCh)) to sSep
45838>>>>>>>>>>>            Move (Length(sLeft)) to iLen
45839>>>>>>>>>>>            While (iLen>3)
45843>>>>>>>>>>>                Move (insert(sSep,sLeft,iLen-2)) to sLeft
45844>>>>>>>>>>>                Move (iLen-3) to iLen
45845>>>>>>>>>>>            Loop
45846>>>>>>>>>>>>
45846>>>>>>>>>>>        End
45846>>>>>>>>>>>>
45846>>>>>>>>>>>        // if decimal points or -2 (allow anything) and there are points to show
45846>>>>>>>>>>>        If (iPoints>0 or (iPoints=-2 and sRight<>"")) ;            Move (sLeft + sDec + sright) to sLeft
45849>>>>>>>>>>>        Function_Return (sPrefix + sLeft+ sSuffix)
45850>>>>>>>>>>>    End_Function
45851>>>>>>>>>>>    
45851>>>>>>>>>>>    // Public: Format for currency
45851>>>>>>>>>>>    Function FormatCur Number nNumber Integer iPoints Returns String
45853>>>>>>>>>>>        String  sLeft sRight
45853>>>>>>>>>>>        Integer bSep
45853>>>>>>>>>>>        If (nNumber<0) Begin
45855>>>>>>>>>>>            Get pbCurNegThousandsSep to bSep
45856>>>>>>>>>>>            Get psCurNegLeft         to sLeft
45857>>>>>>>>>>>            Get psCurNegRight        to sRight
45858>>>>>>>>>>>            If (iPoints=-1) ;                Get piCurNegPoints       to iPoints
45861>>>>>>>>>>>        End
45861>>>>>>>>>>>>
45861>>>>>>>>>>>        Else Begin
45862>>>>>>>>>>>            Get pbCurPosThousandsSep to bSep
45863>>>>>>>>>>>            Get psCurPosLeft         to sLeft
45864>>>>>>>>>>>            Get psCurPosRight        to sRight
45865>>>>>>>>>>>            If (iPoints=-1) ;                Get piCurPosPoints       to iPoints
45868>>>>>>>>>>>        End
45868>>>>>>>>>>>>
45868>>>>>>>>>>>        Function_Return (Format_Num(Self, nNumber,iPoints,bSep,sLeft,sRight))
45869>>>>>>>>>>>    End_Function
45870>>>>>>>>>>>    
45870>>>>>>>>>>>    // Public: Format for numeric
45870>>>>>>>>>>>    Function FormatNum Number nNumber Integer iPoints Returns String
45872>>>>>>>>>>>        String  sLeft sRight
45872>>>>>>>>>>>        Integer bSep
45872>>>>>>>>>>>        If (nNumber<0) Begin
45874>>>>>>>>>>>            Get pbNumNegThousandsSep to bSep
45875>>>>>>>>>>>            Get psNumNegLeft         to sLeft
45876>>>>>>>>>>>            Get psNumNegRight        to sRight
45877>>>>>>>>>>>            If (iPoints=-1) ;                Get piNumNegPoints       to iPoints
45880>>>>>>>>>>>        End
45880>>>>>>>>>>>>
45880>>>>>>>>>>>        Else Begin
45881>>>>>>>>>>>            Get pbNumPosThousandsSep to bSep
45882>>>>>>>>>>>            Get psNumPosLeft         to sLeft
45883>>>>>>>>>>>            Get psNumPosRight        to sRight
45884>>>>>>>>>>>            If (iPoints=-1) ;                Get piNumPosPoints       to iPoints
45887>>>>>>>>>>>        End
45887>>>>>>>>>>>>
45887>>>>>>>>>>>        Function_Return (Format_Num(Self, nNumber,iPoints,bSep,sLeft,sRight))
45888>>>>>>>>>>>    End_Function
45889>>>>>>>>>>>    
45889>>>>>>>>>>>    
45889>>>>>>>>>>>    // Public: Format passing format string
45889>>>>>>>>>>>    Function FormatVal Number nNumber String sFmt Returns String
45891>>>>>>>>>>>        Integer iPos bIsNeg
45891>>>>>>>>>>>        String  sLeft sRight
45891>>>>>>>>>>>        Integer iPoints bSep
45891>>>>>>>>>>>        Move (nNumber<0) to bIsNeg
45892>>>>>>>>>>>        Move (Pos(";",sFmt)) to iPos
45893>>>>>>>>>>>        Case Begin
45893>>>>>>>>>>>            Case (iPos and not(bIsNeg)) ;                Move (left(sFmt,iPos-1))    to sFmt
45896>>>>>>>>>>>            Case (iPos and bIsNeg) ;                Move (mid(sFmt,255,iPos+1)) to sFmt
45900>>>>>>>>>>>            Case (not(iPos) and not(bIsNeg)) ;                Move sFmt                   to sFmt
45904>>>>>>>>>>>            Case Else ;                Move ("-" + sFmt)           to sFmt
45906>>>>>>>>>>>        Case End
45906>>>>>>>>>>>        Send ParseFormat sFmt
45907>>>>>>>>>>>        Get pbThousandsSep to bSep
45908>>>>>>>>>>>        Get psLeft         to sLeft
45909>>>>>>>>>>>        Get psRight        to sRight
45910>>>>>>>>>>>        Get piPoints       to iPoints
45911>>>>>>>>>>>        Function_Return (Format_Num(Self, nNumber,iPoints,bSep,sLeft,sRight))
45912>>>>>>>>>>>    End_Function
45913>>>>>>>>>>>    
45913>>>>>>>>>>>End_Class
45914>>>>>>>>>
45914>>>>>>>>>Global_Variable Handle ghoFormatter
45914>>>>>>>>>Get Create of desktop U_cFormatter to ghoFormatter
45915>>>>>>>>>
45915>>>>>>>>>Function FormatNumber Global Number nNum Integer iPoints Returns String
45917>>>>>>>>>    Function_Return (FormatNum(ghoFormatter, nNum,iPoints))
45918>>>>>>>>>End_Function
45919>>>>>>>>>
45919>>>>>>>>>Function FormatCurrency Global Number nNum Integer iPoints Returns String
45921>>>>>>>>>    Function_Return (FormatCur(ghoFormatter, nNum,iPoints))
45922>>>>>>>>>End_Function
45923>>>>>>>>>
45923>>>>>>>>>Function FormatValue Global Number nNum String sFmt Returns String
45925>>>>>>>>>    Function_Return (FormatVal(ghoFormatter, nNum,sFmt))
45926>>>>>>>>>End_Function
45927>>>>>>>>>
45927>>>>>>>>>Procedure SetCurrencyFormat Global String sFmt
45929>>>>>>>>>    Send SetFormat of ghoFormatter sFmt True
45930>>>>>>>>>End_Procedure
45931>>>>>>>>>
45931>>>>>>>>>Procedure SetNumberFormat Global String sFmt
45933>>>>>>>>>    Send SetFormat of ghoFormatter sFmt False
45934>>>>>>>>>End_Procedure
45935>>>>>>>>>
45935>>>>>>>>>
45935>>>>>>>Use tWinStructs.pkg
45935>>>>>>>
45935>>>>>>>Use cli.pkg
45935>>>>>>>Use DFBTRDRV.PKG
45935>>>>>>>Use MSSqldrv.pkg
45935>>>>>>>Use db2_drv.pkg
45935>>>>>>>Use odbc_drv.pkg
45935>>>>>>>Use seq_chnl.pkg
45935>>>>>>>
45935>>>>>>>Register_Function phoWorkspace Returns Handle
45935>>>>>>>Register_Function Help_filename Returns String
45935>>>>>>>Register_Function GetHelpFile Returns String
45935>>>>>>>Register_Function pbEnterKeyAsTabKey Returns Boolean
45935>>>>>>>
45935>>>>>>>// *** Constant Declarations: ***
45935>>>>>>>//
45935>>>>>>>
45935>>>>>>>
45935>>>>>>>
45935>>>>>>>
45935>>>>>>>
45935>>>>>>>
45935>>>>>>>// 2016-12-12, Samuel:  Added section for Portuguese
45935>>>>>>>
45935>>>>>>>
45935>>>>>>>
45935>>>>>>>
45935>>>>>>>
45935>>>>>>>
45935>>>>>>>
45935>>>>>>>
45935>>>>>>>
45935>>>>>>>// System icon menu constants. If the upper left hand
45935>>>>>>>// icon in dialogs is clicked, shadow all menu items except Move & Close.
45935>>>>>>>    Define SC_RESTORE  for |CI$F120
45935>>>>>>>    Define SC_MOVE     for |CI$F010
45935>>>>>>>    Define SC_SIZE     for |CI$F000
45935>>>>>>>    Define SC_MINIMIZE for |CI$F020
45935>>>>>>>    Define SC_MAXIMIZE for |CI$F030
45935>>>>>>>    Define SC_CLOSE    for |CI$F060
45935>>>>>>>    Define SC_KEYMENU  for |CI$F100
45935>>>>>>>    Define SC_NEXTWINDOW for |CI$F040
45935>>>>>>>    Define SC_PREVWINDOW for |CI$F050
45935>>>>>>>
45935>>>>>>>Define CS_SignProgram        for "signtool.exe"
45935>>>>>>>Define CS_TempCertBatchFile  for "certinfo.bat"
45935>>>>>>>Define CS_VerifyCredentials  for "verify"
45935>>>>>>>Define CS_VerifyFileParam    for "/a"
45935>>>>>>>Define CS_DefAuthVerPolicy   for "/pa"
45935>>>>>>>Define SEE_MASK_NOCLOSEPROCESS for 64 //(0x00000040)
45935>>>>>>>
45935>>>>>>>// *** Struct Declarations: ***
45935>>>>>>>Struct AboutSHELLEXECUTEINFO
45935>>>>>>>    DWord   cbSize
45935>>>>>>>    Integer fMask
45935>>>>>>>    Handle  hwnd
45935>>>>>>>    Pointer lpVerb
45935>>>>>>>    Pointer lpFile
45935>>>>>>>    Pointer lpParameters
45935>>>>>>>    Pointer lpDirectory
45935>>>>>>>    Integer nShow
45935>>>>>>>    Pointer hInstApp
45935>>>>>>>    Pointer lpIDList
45935>>>>>>>    Pointer lpClass
45935>>>>>>>    Handle  hkeyClass
45935>>>>>>>    DWord   dwHotKey
45935>>>>>>>    Handle  hIconMonitor // Union
45935>>>>>>>    //Handle  hMonitor     // Union
45935>>>>>>>    Handle  hProcess
45935>>>>>>>End_Struct
45935>>>>>>>
45935>>>>>>>
45935>>>>>>>// OBSOLETE STRUCTURE AND WINDOWS API CALL. KEPT FOR BACKWARDS COMPATIBILITY
45935>>>>>>>//Type MEMORYSTATUS
45935>>>>>>>//   Field MEMORYSTATUS.dwLength         as DWord // sizeof(MEMORYSTATUS)
45935>>>>>>>//   Field MEMORYSTATUS.dwMemoryLoad     as DWord // percent Of memory in use
45935>>>>>>>//   Field MEMORYSTATUS.dwTotalPhys      as DWord // bytes Of physical memory
45935>>>>>>>//   Field MEMORYSTATUS.dwAvailPhys      as DWord // free physical memory bytes
45935>>>>>>>//   Field MEMORYSTATUS.dwTotalPageFile  as DWord // bytes Of paging file
45935>>>>>>>//   Field MEMORYSTATUS.dwAvailPageFile  as DWord // free bytes Of paging file
45935>>>>>>>//   Field MEMORYSTATUS.dwTotalVirtual   as DWord // user bytes Of address space
45935>>>>>>>//   Field MEMORYSTATUS.dwAvailVirtual   as DWord // free user bytes
45935>>>>>>>//End_Type
45935>>>>>>>
45935>>>>>>>// *** External Function calls: ***
45935>>>>>>>//
45935>>>>>>>    External_Function GetSystemMenu "GetSystemMenu" User32.dll Handle hWnd Boolean bRevert Returns Handle
45936>>>>>>>
45936>>>>>>>    External_Function GetRemoveMenu "RemoveMenu" user32.dll Handle hWnd UInteger uPosition UInteger uFlags Returns Handle
45937>>>>>>>
45937>>>>>>>// Do not call directly, use the wrapper function instead
45937>>>>>>>External_Function WNetGetUserW "WNetGetUserW" MPR.DLL ;    Pointer lpName ;    Pointer lpUser_Name ;    Pointer lpLength ;    Returns DWord
45938>>>>>>>
45938>>>>>>>    // Wrapper Function WNetGetUser
45938>>>>>>>    Function WNetGetUser Global ;        Pointer lpName ;        Pointer lpUser_Name ;        Pointer lpLength ;        Returns DWord
45940>>>>>>>
45940>>>>>>>        DWord   dwResult
45940>>>>>>>        UWide   uwName uwUserName
45940>>>>>>>        UWide   uwName uwUserName
45940>>>>>>>
45940>>>>>>>        Send StringToWide lpName (&uwName)
45941>>>>>>>
45941>>>>>>>        Send WideSetBuffer lpUser_Name lpLength (&uwUserName)
45942>>>>>>>
45942>>>>>>>        Move (WNetGetUserW (uwName.lpUText, uwUserName.lpUText, lpLength)) to dwResult
45943>>>>>>>
45943>>>>>>>        Send WideToString (&uwUserName) lpUser_Name
45944>>>>>>>
45944>>>>>>>        Function_Return dwResult
45945>>>>>>>    End_Function
45946>>>>>>>
45946>>>>>>>
45946>>>>>>>    External_Function GlobalMemoryStatus "GlobalMemoryStatus" Kernel32.Dll Pointer lpsMemoryStatus Returns Integer
45947>>>>>>>
45947>>>>>>>    External_Function GlobalMemoryStatusEx "GlobalMemoryStatusEx" Kernel32.Dll Pointer lpMemoryStatus Returns Integer
45948>>>>>>>
45948>>>>>>>External_Function AboutShellExecuteEx "ShellExecuteEx" Shell32.dll Pointer pExecInfo Returns Integer
45949>>>>>>>
45949>>>>>>>External_Function AboutWaitForSingleObject "WaitForSingleObject" Kernel32.dll ;  Handle hHandle ;  DWord dwMilliseconds ;  Returns DWord
45950>>>>>>>
45950>>>>>>>External_Function AboutCloseHandle "CloseHandle" Kernel32.dll Handle hHandle Returns Integer
45951>>>>>>>
45951>>>>>>>// *** Global/Desktop Function Declarations: ***
45951>>>>>>>
45951>>>>>>>Function ComputerName Desktop Returns String
45953>>>>>>>    String sName
45953>>>>>>>    Get_Environment "COMPUTERNAME" to sName
45954>>>>>>>>
45954>>>>>>>    Function_Return sName
45955>>>>>>>End_Function
45956>>>>>>>
45956>>>>>>>Function Network_User_Name Desktop Returns String
45958>>>>>>>    WString wName
45958>>>>>>>    Integer iRetval iLength
45958>>>>>>>
45958>>>>>>>    Move 0 to iLength
45959>>>>>>>    Move (WNetGetUserW (0, 0, AddressOf (iLength))) to iRetval
45960>>>>>>>    Move (ZeroString(iLength)) to wName
45961>>>>>>>    Move (WNetGetUserW (0, AddressOf (wName), AddressOf (iLength))) to iRetval
45962>>>>>>>
45962>>>>>>>    If (iRetval = NO_ERROR) Begin
45964>>>>>>>        Function_Return (CString (wName))
45965>>>>>>>    End
45965>>>>>>>>
45965>>>>>>>
45965>>>>>>>    Function_Return "User Unknown"
45966>>>>>>>End_Function
45967>>>>>>>
45967>>>>>>>Function SQLClientVersion Desktop String sDriverID Integer iClient Returns String
45969>>>>>>>    String sClient sDriver sClientDriver
45969>>>>>>>    Integer iNumberOfDrivers iDriver iCount iClientVersion
45969>>>>>>>    Handle hoMsqlDrv
45969>>>>>>>
45969>>>>>>>    Move 0 to iDriver
45970>>>>>>>    Move "" to sClient
45971>>>>>>>    Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
45974>>>>>>>    For iCount from 1 to iNumberOfDrivers
45980>>>>>>>>
45980>>>>>>>        Get_Attribute DF_DRIVER_NAME of iCount to sDriver
45983>>>>>>>        If (Uppercase(sDriver) = Uppercase(sDriverID)) Begin
45985>>>>>>>            Move iCount to iDriver
45986>>>>>>>            Move iNumberOfDrivers to iCount // We're done.
45987>>>>>>>        End
45987>>>>>>>>
45987>>>>>>>    Loop
45988>>>>>>>>
45988>>>>>>>
45988>>>>>>>    // This info is (at current) only available for the MS SQL driver:
45988>>>>>>>    If (sDriverID = MSSQLDRV_ID) Begin
45990>>>>>>>        Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
45993>>>>>>>        Get Create (RefClass(cMSSQLHandler)) to hoMsqlDrv
45994>>>>>>>        Get SqlServerClientVersionName of hoMsqlDrv iClientVersion to sClientDriver
45995>>>>>>>        Send Destroy of hoMsqlDrv
45996>>>>>>>        Move (SFormat("MSSQLDRV Client Version: %1", sClientDriver)) to sClient
45997>>>>>>>    End
45997>>>>>>>>
45997>>>>>>>
45997>>>>>>>    Function_Return sClient
45998>>>>>>>End_Function
45999>>>>>>>
45999>>>>>>>// *** Class Declarations: ***
45999>>>>>>>//
45999>>>>>>>Class cBitmapContainerDFLink is a BitmapContainer
46000>>>>>>>    Procedure Mouse_Click Integer iWindowNumber Integer iPosition
46002>>>>>>>        Send Mouse_Up iWindowNumber iPosition
46003>>>>>>>    End_Procedure
46004>>>>>>>    Procedure Mouse_Up Integer iWindowNumber Integer iPosition
46006>>>>>>>        Forward Send Mouse_Up iWindowNumber iPosition
46008>>>>>>>        Send Show_HomePage "http://www.dataaccess.com/"
46009>>>>>>>    End_Procedure
46010>>>>>>>End_Class
46011>>>>>>>
46011>>>>>>>Class cCopyEditorContentButton is a Button
46012>>>>>>>    Procedure Construct_Object
46014>>>>>>>        Forward Send Construct_Object
46016>>>>>>>        Property Handle phoEditorHandle
46017>>>>>>>        Set psToolTip to C_$DescCopy
46018>>>>>>>    End_Procedure
46019>>>>>>>
46019>>>>>>>    Procedure CopyToWindowsClipboard
46021>>>>>>>        Handle hoEditor
46021>>>>>>>        Boolean bCanCopy
46021>>>>>>>        Address aEditorAddress
46021>>>>>>>
46021>>>>>>>        Get phoEditorHandle to hoEditor
46022>>>>>>>        Send Select_All of hoEditor
46023>>>>>>>        Get CanCopy of hoEditor to bCanCopy
46024>>>>>>>        If (bCanCopy = True) Begin
46026>>>>>>>            Get paValue of hoEditor to aEditorAddress
46027>>>>>>>            Send Copy   of hoEditor
46028>>>>>>>            // Remove the selection after text is copied to the clipboard.
46028>>>>>>>            Send Beginning_of_Data of hoEditor
46029>>>>>>>            Send Info_Box C_$CopyToClipboard_Text
46030>>>>>>>        End
46030>>>>>>>>
46030>>>>>>>    End_Procedure
46031>>>>>>>End_Class
46032>>>>>>>
46032>>>>>>>Class SysinfoDisplay is a cTextEdit
46033>>>>>>>    Procedure Construct_Object
46035>>>>>>>        Forward Send Construct_Object
46037>>>>>>>
46037>>>>>>>        Set Size to 100 245
46038>>>>>>>        Set Location to 6 6
46039>>>>>>>        Set Border_Style to Border_None
46040>>>>>>>        Set Read_Only_State to True
46041>>>>>>>        Set pbWrap to True
46042>>>>>>>        Set peAnchors to anAll
46043>>>>>>>    End_Procedure
46044>>>>>>>
46044>>>>>>>    // Augmented class message to adjust certain text strings that are wrong...
46044>>>>>>>
46044>>>>>>>    Procedure AppendTextLn String sText
46046>>>>>>>        String sWorkspaceWSFile
46046>>>>>>>
46046>>>>>>>        // Only works for English:
46046>>>>>>>        If (ghoApplication > 0) Begin
46048>>>>>>>            If (sText contains "Workspace Name") Begin
46050>>>>>>>                Move "Workspace Config Filename:" to sText
46051>>>>>>>                Get psWorkspaceWSFile of (phoWorkspace(ghoApplication)) to sWorkspaceWSFile
46052>>>>>>>                Move (sText * sWorkspaceWSFile) to sText
46053>>>>>>>            End
46053>>>>>>>>
46053>>>>>>>        End
46053>>>>>>>>
46053>>>>>>>        Send AppendText sText
46054>>>>>>>        Send AppendText (character(10))
46055>>>>>>>    End_Procedure
46056>>>>>>>
46056>>>>>>>    //    This method will show the name Of the current directory in the system
46056>>>>>>>    //    information box
46056>>>>>>>    Procedure Show_Current_Directory
46058>>>>>>>        String sDir
46058>>>>>>>
46058>>>>>>>        Get_Current_Directory To sDir
46059>>>>>>>
46059>>>>>>>        Send AppendTextLn (SFormat (C_$CurrentDirectory, sDir))
46060>>>>>>>    End_Procedure
46061>>>>>>>
46061>>>>>>>    Procedure Show_Windows_Directory
46063>>>>>>>        String sWindir
46063>>>>>>>
46063>>>>>>>        Get_Windows_Directory To sWindir
46064>>>>>>>
46064>>>>>>>        Send AppendTextLn (SFormat (C_$WindowsDirectory, sWindir))
46065>>>>>>>    End_Procedure
46066>>>>>>>
46066>>>>>>>    Procedure Show_Current_User
46068>>>>>>>        Send AppendTextLn (SFormat (C_$Computer_Name, ComputerName (Self)))
46069>>>>>>>        Send AppendTextLn (SFormat (C_$NetworkUserName, Network_User_Name (Self)))
46070>>>>>>>    End_Procedure
46071>>>>>>>
46071>>>>>>>    Procedure Show_Number_Format
46073>>>>>>>        Integer iFormat
46073>>>>>>>        String sFormatText
46073>>>>>>>
46073>>>>>>>        Get_Attribute DF_THOUSANDS_SEPARATOR to iFormat
46076>>>>>>>        Move (Character (iFormat)) To sFormatText
46077>>>>>>>        Send AppendTextLn (SFormat (C_$ThousandsSeparator, sFormatText, iFormat))
46078>>>>>>>
46078>>>>>>>        Get_Attribute DF_DECIMAL_SEPARATOR to iFormat
46081>>>>>>>        Move (Character (iFormat)) to sFormatText
46082>>>>>>>        Send AppendTextLn (SFormat (C_$DecimalSeparator, sFormatText))
46083>>>>>>>    End_Procedure
46084>>>>>>>
46084>>>>>>>    Procedure Show_Filelist_Name
46086>>>>>>>        String sFilename
46086>>>>>>>
46086>>>>>>>        Get_Attribute DF_FILELIST_NAME to sFilename
46089>>>>>>>
46089>>>>>>>        Send AppendTextLn (SFormat (C_$CurrentFilelist, sFilename))
46090>>>>>>>    End_Procedure
46091>>>>>>>
46091>>>>>>>    Procedure Show_Lock_Delay
46093>>>>>>>        Integer iLockdelay
46093>>>>>>>
46093>>>>>>>        Get_Attribute DF_LOCK_DELAY to iLockdelay
46096>>>>>>>
46096>>>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingDelay, iLockDelay))
46097>>>>>>>    End_Procedure
46098>>>>>>>
46098>>>>>>>    Procedure Show_Lock_Timeout
46100>>>>>>>        Integer iLockTimeout
46100>>>>>>>
46100>>>>>>>        Get_Attribute DF_LOCK_TIMEOUT to iLockTimeout
46103>>>>>>>
46103>>>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingTimeout, iLockTimeOut))
46104>>>>>>>    End_Procedure
46105>>>>>>>
46105>>>>>>>    Procedure Show_Screen_Size
46107>>>>>>>        Integer iYscreensize iXscreensize
46107>>>>>>>
46107>>>>>>>        Move (GetSystemMetrics (SM_CXSCREEN)) To iXscreensize
46108>>>>>>>        Move (GetSystemMetrics (SM_CYSCREEN)) To iYscreensize
46109>>>>>>>
46109>>>>>>>        Send AppendTextLn (SFormat (C_$VideoResolution, iXscreensize, iYscreensize))
46110>>>>>>>    End_Procedure
46111>>>>>>>
46111>>>>>>>    Procedure Show_Page_Size
46113>>>>>>>        Send AppendTextLn (SFormat (C_$PageEndFormFeed, Pageend, Pagefeed))
46114>>>>>>>    End_procedure
46115>>>>>>>
46115>>>>>>>    Procedure Show_Date
46117>>>>>>>        Date dToday
46117>>>>>>>
46117>>>>>>>        Move (CurrentDateTime()) to dToday
46118>>>>>>>
46118>>>>>>>        Send AppendTextLn (SFormat (C_$CurrentSystemDate, String (dToday)))
46119>>>>>>>    End_procedure
46120>>>>>>>
46120>>>>>>>    Procedure Show_Date_Format
46122>>>>>>>        Integer iDateFormat
46122>>>>>>>        String sDateFormat
46122>>>>>>>
46122>>>>>>>        Get_Attribute DF_DATE_FORMAT to iDateFormat
46125>>>>>>>        Case Begin
46125>>>>>>>            Case (iDateFormat = DF_DATE_USA)
46127>>>>>>>                Move C_$USA To sDateFormat
46128>>>>>>>                Case Break
46129>>>>>>>            Case (iDateFormat = DF_DATE_EUROPEAN)
46132>>>>>>>                Move C_$European To sDateFormat
46133>>>>>>>                Case Break
46134>>>>>>>            Case (iDateFormat = DF_DATE_MILITARY)
46137>>>>>>>                Move C_$Military To sDateFormat
46138>>>>>>>                Case Break
46139>>>>>>>            Case Else
46139>>>>>>>                Move C_$UnknownDateType To sDateFormat
46140>>>>>>>                Case Break
46141>>>>>>>        Case End
46141>>>>>>>
46141>>>>>>>        Send AppendTextLn (SFormat (C_$DateFormat, sDateformat))
46142>>>>>>>    End_Procedure
46143>>>>>>>
46143>>>>>>>    // 2013-08-14 NGS
46143>>>>>>>    // Unformatted numeric values shown doesn't look good. These looks much better.
46143>>>>>>>    Procedure Show_Systemresources
46145>>>>>>>        tWinMemoryStatusEx MemoryStatusInfo
46145>>>>>>>        tWinMemoryStatusEx MemoryStatusInfo
46145>>>>>>>        Integer iRetval
46145>>>>>>>        Number nValue
46145>>>>>>>        String sValue
46145>>>>>>>
46145>>>>>>>        Move (SizeOfType (tWinMemoryStatusEx)) to MemoryStatusInfo.dwLength
46146>>>>>>>        Move (GlobalMemoryStatusEx (AddressOf (MemoryStatusInfo))) to iRetval
46147>>>>>>>        If (iRetval = 0) Begin
46149>>>>>>>            Move (ShowLastError ()) to iRetval
46150>>>>>>>            Procedure_Return
46151>>>>>>>        End
46151>>>>>>>>
46151>>>>>>>
46151>>>>>>>        Send AppendTextLn ""
46152>>>>>>>        Move MemoryStatusInfo.ullTotalPhys to nValue
46153>>>>>>>
46153>>>>>>>        // Show memory in Gigabytes:
46153>>>>>>>        Move (nValue/1024/1024/1024) to nValue
46154>>>>>>>        Move (Round(nValue)) to nValue
46155>>>>>>>        Get FormatNumber nValue 2 to sValue
46156>>>>>>>        Send AppendTextLn (SFormat (C_$AvailableMemory, (sValue * "GB")))
46157>>>>>>>        Send AppendTextLn (SFormat (C_$MemoryUtilization, String(MemoryStatusInfo.dwMemoryLoad) * "%"))
46158>>>>>>>
46158>>>>>>>//        Send AppendTextLn (SFormat (C_$AvailablePhysicalMemory, Real (MemoryStatusInfo.ullAvailPhys) / Real (MemoryStatusInfo.ullTotalPhys) * 100.0))
46158>>>>>>>        Move (Real(MemoryStatusInfo.ullAvailPhys) / Real(MemoryStatusInfo.ullTotalPhys) * 100.0) to nValue
46159>>>>>>>        Move (Round(nValue)) to nValue
46160>>>>>>>        Get FormatNumber nValue 0 to sValue
46161>>>>>>>        Send AppendTextLn (SFormat (C_$AvailablePhysicalMemory, (sValue * "%")))
46162>>>>>>>
46162>>>>>>>//        Send AppendTextLn (SFormat (C_$AvailablePagefileSpace, Real (MemoryStatusInfo.ullAvailPageFile) / Real (MemoryStatusInfo.ullTotalPageFile) * 100.0))
46162>>>>>>>        Move (Real(MemoryStatusInfo.ullAvailPageFile) / Real(MemoryStatusInfo.ullTotalPageFile) * 100.0) to nValue
46163>>>>>>>        Move (Round(nValue)) to nValue
46164>>>>>>>        Get FormatNumber nValue 0 to sValue
46165>>>>>>>        Send AppendTextLn (SFormat (C_$AvailablePagefileSpace, (sValue * "%")))
46166>>>>>>>
46166>>>>>>>//        Send AppendTextLn (SFormat (C_$AvailableVirtualMemory, Real (MemoryStatusInfo.ullAvailVirtual) / Real (MemoryStatusInfo.ullTotalVirtual) * 100.0))
46166>>>>>>>        Move (Real(MemoryStatusInfo.ullAvailVirtual) / Real(MemoryStatusInfo.ullTotalVirtual) * 100.0) to nValue
46167>>>>>>>        Move (Round(nValue)) to nValue
46168>>>>>>>        Get FormatNumber nValue 0 to sValue
46169>>>>>>>        Send AppendTextLn (SFormat (C_$AvailableVirtualMemory, (sValue * "%")))
46170>>>>>>>
46170>>>>>>>        // Add an empty row after the memory information:
46170>>>>>>>        Send AppendTextLn ""
46171>>>>>>>    End_Procedure
46172>>>>>>>
46172>>>>>>>    Procedure Show_Registration
46174>>>>>>>        String sRegName
46174>>>>>>>        Integer iSN iUsersMax iUserCount
46174>>>>>>>
46174>>>>>>>        Registration sRegName iSN
46175>>>>>>>>
46175>>>>>>>        Get_Licensed_Max_Users to iUsersMax
46176>>>>>>>        Get_Current_User_Count to iUserCount
46177>>>>>>>
46177>>>>>>>        Send AppendTextLn (SFormat (C_$Serial, iSN))
46178>>>>>>>        Send AppendTextLn (SFormat (C_$RegName, sRegName))
46179>>>>>>>        Send AppendTextLn (SFormat (C_$Current_User_Count, iUserCount))
46180>>>>>>>        Send AppendTextLn (SFormat (C_$Max_Licensed_User_Count, iUsersMax))
46181>>>>>>>    End_Procedure
46182>>>>>>>
46182>>>>>>>    //****************************************************************************
46182>>>>>>>    // If workspaces are used, we will send the message EnumerateWorkspaceData
46182>>>>>>>    // To the workspace object passing the an object and message To send back
46182>>>>>>>    // To this object. It is expected that the workspace object will send this
46182>>>>>>>    // message for every line Of information it wants displayed (passing the
46182>>>>>>>    // information To be displayed
46182>>>>>>>    //****************************************************************************
46182>>>>>>>    Register_Procedure EnumerateWorkspaceData Integer hObjId Integer hmMessId
46182>>>>>>>
46182>>>>>>>    Procedure Show_ServicePack
46184>>>>>>>        String sKey sVersion sDataFlex
46184>>>>>>>        Handle hoRegistry
46184>>>>>>>        Boolean bExists bOpened
46184>>>>>>>
46184>>>>>>>        Move "DataFlex"        to sDataFlex
46185>>>>>>>
46185>>>>>>>        Get Create (RefClass(cRegistry)) to hoRegistry
46186>>>>>>>        Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
46187>>>>>>>        Set pfAccessRights of hoRegistry to KEY_READ
46188>>>>>>>        Get KeyExists of hoRegistry "SOFTWARE\Wow6432Node" to bExists
46189>>>>>>>
46189>>>>>>>        If (bExists) Begin
46191>>>>>>>            Move ("SOFTWARE\Wow6432Node\Data Access Worldwide\" + sDataFlex + "\" + SysConf (SYSCONF_DATAFLEX_REV)) to sKey
46192>>>>>>>        End
46192>>>>>>>>
46192>>>>>>>        Else Begin
46193>>>>>>>            Move ("SOFTWARE\Data Access Worldwide\"             + sDataFlex + "\" + SysConf (SYSCONF_DATAFLEX_REV)) to sKey
46194>>>>>>>        End
46194>>>>>>>>
46194>>>>>>>        Get KeyExists of hoRegistry sKey to bExists
46195>>>>>>>        If (bExists) Begin
46197>>>>>>>            Get OpenKey of hoRegistry sKey to bOpened
46198>>>>>>>            If (bOpened) Begin
46200>>>>>>>                Get ValueExists of hoRegistry "CurrentVersionDescription" to bExists
46201>>>>>>>                If (bExists) Begin
46203>>>>>>>                    Get ReadString of hoRegistry "CurrentVersionDescription" to sVersion
46204>>>>>>>                End
46204>>>>>>>>
46204>>>>>>>                Send CloseKey of hoRegistry
46205>>>>>>>            End
46205>>>>>>>>
46205>>>>>>>        End
46205>>>>>>>>
46205>>>>>>>        Send Destroy of hoRegistry
46206>>>>>>>
46206>>>>>>>        If (sVersion <> "") Begin
46208>>>>>>>           Send AppendTextLn sVersion
46209>>>>>>>           Send AppendTextLn ""
46210>>>>>>>        End
46210>>>>>>>>
46210>>>>>>>    End_Procedure
46211>>>>>>>
46211>>>>>>>    Procedure Show_WorkspaceInformation
46213>>>>>>>        Integer hoWorkspace
46213>>>>>>>
46213>>>>>>>        If (ghoApplication <> 0) Begin
46215>>>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
46216>>>>>>>            If (hoWorkspace <> 0) Begin
46218>>>>>>>                Send EnumerateWorkspaceData of hoWorkspace Self msg_AppendTextLn
46219>>>>>>>            End
46219>>>>>>>>
46219>>>>>>>        End
46219>>>>>>>>
46219>>>>>>>    End_Procedure
46220>>>>>>>
46220>>>>>>>    //****************************************************************************
46220>>>>>>>    // If connection ids are used, we will send the message EnumerateConnections
46220>>>>>>>    // to the connection manager object passing the an object and message to send
46220>>>>>>>    // back to this object. It is expected that the connection manager object will
46220>>>>>>>    // send this message for every line Of information it wants displayed (passing
46220>>>>>>>    // the information To be displayed
46220>>>>>>>    //****************************************************************************
46220>>>>>>>    Register_Procedure EnumerateConnections Integer hObjId Integer hmMessId
46220>>>>>>>
46220>>>>>>>    Procedure Show_ConnectionIdInformation
46222>>>>>>>        If (ghoConnection > 0) Begin
46224>>>>>>>            Send EnumerateConnections of ghoConnection Self (RefProc(AppendTextLn))
46225>>>>>>>            Send AppendTextLn ""
46226>>>>>>>        End
46226>>>>>>>>
46226>>>>>>>    End_Procedure
46227>>>>>>>
46227>>>>>>>    Function IsDAWSQLDriver String sDriverID Returns Boolean
46229>>>>>>>        Boolean bOK
46229>>>>>>>        Move (sDriverID = MSSQLDRV_ID or sDriverID = DB2_DRV_ID or sDriverID = ODBC_DRV_ID) to bOK
46230>>>>>>>        Function_Return bOK
46231>>>>>>>    End_Function
46232>>>>>>>
46232>>>>>>>    Procedure Show_ConnectionIdInformation
46234>>>>>>>        If (ghoConnection > 0) Begin
46236>>>>>>>            Send AppendTextLn ""
46237>>>>>>>            Send EnumerateConnections of ghoConnection Self (RefProc(AppendTextLn))
46238>>>>>>>        End
46238>>>>>>>>
46238>>>>>>>    End_Procedure
46239>>>>>>>    
46239>>>>>>>    Function VersionStr Integer iVer Integer iRev Integer iBld Returns String
46241>>>>>>>        Function_Return (String (iVer) - "." - String (iRev) - "." - String (iBld))
46242>>>>>>>    End_Function
46243>>>>>>>    
46243>>>>>>>    Procedure Show_Versions
46245>>>>>>>        Integer iVersion iRevision iBuild
46245>>>>>>>        
46245>>>>>>>        Version_Information iVersion iRevision iBuild
46247>>>>>>>        
46247>>>>>>>        Send AppendTextLn (SFormat (C_$RuntimeVersion, VersionStr(Self,iVersion,iRevision,iBuild) ))
46248>>>>>>>        Send AppendTextLn (SFormat (C_$PackageVersion, VersionStr(Self,PKG_VERSION, PKG_REVISION, PKG_BUILD) ))
46249>>>>>>>        Send AppendTextLn (SFormat (C_$FMACVersion, VersionStr(Self,FMAC_VERSION, FMAC_REVISION, FMAC_BUILD) ))
46250>>>>>>>    End_Procedure
46251>>>>>>>    
46251>>>>>>>    Procedure Show_Platform
46253>>>>>>>        Send AppendTextLn (SFormat (C_$Platform,"32-bit"))
46254>>>>>>>    End_Procedure
46255>>>>>>>    
46255>>>>>>>    Function CKRevisionNumber String sDriverID Returns String
46257>>>>>>>        Handle hoCLIHandler
46257>>>>>>>        Handle hoDFBtrDrvHandler
46257>>>>>>>        String sCKRevision
46257>>>>>>>        
46257>>>>>>>        
46257>>>>>>>        If (sDriverID = "MSSQLDRV" or sDriverID = "ODBC_DRV" or sDriverID = "DB2_DRV") Begin
46259>>>>>>>            Get Create (RefClass(cCLIHandler)) to hoCLIHandler
46260>>>>>>>            Set psDriverID of hoCLIHandler to sDriverID
46261>>>>>>>            Move (CKRevision(hoCLIHandler)) to sCKRevision
46262>>>>>>>            Send Destroy of hoCLIHandler
46263>>>>>>>        End
46263>>>>>>>>
46263>>>>>>>        Else Begin
46264>>>>>>>            If (sDriverID = "DFBTRDRV") Begin
46266>>>>>>>                Get Create (RefClass(cDFBtrDrvHandler)) to hoDFBtrDrvHandler
46267>>>>>>>                Set psDriverID of hoDFBtrDrvHandler to sDriverID
46268>>>>>>>                Move (CKRevision(hoDFBtrDrvHandler)) to sCKRevision
46269>>>>>>>                Send Destroy of hoDFBtrDrvHandler
46270>>>>>>>            End
46270>>>>>>>>
46270>>>>>>>        End
46270>>>>>>>>
46270>>>>>>>        
46270>>>>>>>        Function_Return sCKRevision
46271>>>>>>>    End_Function    
46272>>>>>>>    
46272>>>>>>>    Function IsDataAccessCK String sDriverID Returns Boolean
46274>>>>>>>        
46274>>>>>>>        If (sDriverID = "DATAFLEX") Begin
46276>>>>>>>            Function_Return False
46277>>>>>>>        End
46277>>>>>>>>
46277>>>>>>>        
46277>>>>>>>        Function_Return (sDriverID = "MSSQLDRV" or sDriverID = "ODBC_DRV" or sDriverID = "DB2_DRV" or sDriverID = "DFBTRDRV")
46278>>>>>>>    End_Function
46279>>>>>>>    
46279>>>>>>>    Procedure Show_Drivers
46281>>>>>>>        String sDriverID sVersion sClient sValue
46281>>>>>>>        Integer iNumberOfDrivers iDriver iClient iUsersMax iSerialNo iNumServers iCount
46281>>>>>>>        Handle hoCLIHandler hoBtrvHandler
46281>>>>>>>        Boolean bStudioLicense bIsDAWDriver
46281>>>>>>>
46281>>>>>>>        Move False to bStudioLicense
46282>>>>>>>
46282>>>>>>>        Get Create (RefClass(cCLIHandler))      to hoCLIHandler
46283>>>>>>>        Get Create (RefClass(cDFBtrDrvHandler)) to hoBtrvHandler
46284>>>>>>>
46284>>>>>>>        // For testing purposes:
46284>>>>>>>//        Send Ignore_Error of Error_Object_Id DFERR_CANT_LOAD_DLL
46284>>>>>>>//        Load_Driver MSSQLDRV_ID
46284>>>>>>>//        Load_Driver ODBC_DRV_ID
46284>>>>>>>//        Load_Driver DB2_DRV_ID
46284>>>>>>>//        Send Trap_Error of Error_Object_Id DFERR_CANT_LOAD_DLL
46284>>>>>>>//
46284>>>>>>>        Move False to Err
46285>>>>>>>
46285>>>>>>>        // Loop through all loaded drivers.
46285>>>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
46288>>>>>>>        If (iNumberOfDrivers > 1) Begin
46290>>>>>>>            Send AppendTextLn ""
46291>>>>>>>        End
46291>>>>>>>>
46291>>>>>>>        For iDriver from 1 to iNumberOfDrivers
46297>>>>>>>>
46297>>>>>>>            Send Ignore_Error of Error_Object_Id DFERR_BAD_PARAMETER
46298>>>>>>>            Get_Attribute DF_DRIVER_NAME of iDriver to sDriverID
46301>>>>>>>            Send Trap_Error of Error_Object_Id DFERR_BAD_PARAMETER
46302>>>>>>>            Get IsDAWSQLDriver  sDriverID to bIsDAWDriver
46303>>>>>>>
46303>>>>>>>            If (sDriverID = DFBTRDRV_ID or bIsDAWDriver = True) Begin
46305>>>>>>>
46305>>>>>>>                // Pervasive/Btrieve database
46305>>>>>>>                If (sDriverID = DFBTRDRV_ID) Begin
46307>>>>>>>                    Get CKRevision of hoBtrvHandler to sVersion
46308>>>>>>>                    Get PSQLLocalEngineVersionInfo of hoBtrvHandler 0 to sClient
46309>>>>>>>                    If (sClient <> "0.0.0") Begin
46311>>>>>>>                        Send AppendTextLn (SFormat (C_$Pervasive_Local_Engine_Version, sClient))
46312>>>>>>>                    End
46312>>>>>>>>
46312>>>>>>>                    Get PSQLServerEngineVersionInfo of hoBtrvHandler 0 to sClient
46313>>>>>>>                    If (sClient <> "0.0.0") Begin
46315>>>>>>>                        Send AppendTextLn (SFormat (C_$Pervasive_Server_Engine_Version, sClient))
46316>>>>>>>                    End
46316>>>>>>>>
46316>>>>>>>                End
46316>>>>>>>>
46316>>>>>>>
46316>>>>>>>                Else Begin
46317>>>>>>>                    Set psDriverID of hoCLIHandler to sDriverID
46318>>>>>>>                    Move 0 to iNumServers
46319>>>>>>>                    If (sDriverID <> DATAFLEX_ID) Begin
46321>>>>>>>                        Get_Attribute DF_DRIVER_NUMBER_SERVERS of iDriver to iNumServers
46324>>>>>>>                    End
46324>>>>>>>>
46324>>>>>>>
46324>>>>>>>                    If (bIsDAWDriver = True) Begin
46326>>>>>>>                        If (sDriverID = MSSQLDRV_ID) Begin
46328>>>>>>>                            Get SQLClientVersion sDriverID iClient to sClient
46329>>>>>>>                        End
46329>>>>>>>>
46329>>>>>>>                        Get CKRevision of hoCLIHandler to sVersion
46330>>>>>>>                    End
46330>>>>>>>>
46330>>>>>>>
46330>>>>>>>                    // If the serialnumber is = 0, it means that the
46330>>>>>>>                    // Studio licens is in use and there is no
46330>>>>>>>                    // number of max users defined because the driver is
46330>>>>>>>                    // relying on the info from the VDF license.
46330>>>>>>>                    If (bStudioLicense = False) Begin
46332>>>>>>>                        Get SerialNumber of hoCLIHandler to iSerialNo
46333>>>>>>>                        Move (iSerialNo = 0) to bStudioLicense
46334>>>>>>>                    End
46334>>>>>>>>
46334>>>>>>>                End
46334>>>>>>>>
46334>>>>>>>                Send AppendTextLn (SFormat (C_$DatabaseDriver, (sDriverID * "-" * (C_$Version + ": " + sVersion))))
46335>>>>>>>                If (sClient <> "" and sDriverID = MSSQLDRV_ID) Begin
46337>>>>>>>                    Send AppendTextLn (C_$SQL_Client_Text * sClient)
46338>>>>>>>                End
46338>>>>>>>>
46338>>>>>>>                If (iNumServers <> 0) Begin
46340>>>>>>>                    For iCount from 1 to iNumServers
46346>>>>>>>>
46346>>>>>>>                        Get_Attribute DF_DRIVER_SERVER_NAME of iDriver iCount to sValue
46349>>>>>>>                        If (not(sValue contains ";PWD=")) Begin
46351>>>>>>>                            Send AppendTextLn ("    " + C_$SQLServerText * sValue)
46352>>>>>>>                        End
46352>>>>>>>>
46352>>>>>>>                    Loop
46353>>>>>>>>
46353>>>>>>>                End
46353>>>>>>>>
46353>>>>>>>            End
46353>>>>>>>>
46353>>>>>>>        Loop
46354>>>>>>>>
46354>>>>>>>
46354>>>>>>>        Send AppendTextLn ""
46355>>>>>>>        If (bStudioLicense = False) Begin
46357>>>>>>>            Get MaxUsers of hoCLIHandler to iUsersMax
46358>>>>>>>            Send AppendTextLn (SFormat (C_$Max_DbDriver_Licensed_User_Count, iUsersMax))
46359>>>>>>>        End
46359>>>>>>>>
46359>>>>>>>        Else Begin
46360>>>>>>>            Send AppendTextLn C_$DF_Studio_License_Text
46361>>>>>>>        End
46361>>>>>>>>
46361>>>>>>>        Send Destroy of hoCLIHandler
46362>>>>>>>        Send Destroy of hoBtrvHandler
46363>>>>>>>    End_Procedure
46364>>>>>>>
46364>>>>>>>    Procedure Show_HelpFile
46366>>>>>>>        String sHelpFile
46366>>>>>>>        Integer eHelpType
46366>>>>>>>
46366>>>>>>>        If (ghoApplication <> 0) Begin
46368>>>>>>>            Get peHelpType Of ghoApplication To eHelpType
46369>>>>>>>            If (eHelpType = htHtmlHelp and ghoHtmlHelp) Begin
46371>>>>>>>                Get GetHelpFile Of ghoHtmlHelp To sHelpFile
46372>>>>>>>            End
46372>>>>>>>>
46372>>>>>>>            Else If (eHelpType = htWinHelp and Help_object_id) Begin
46375>>>>>>>                Get Help_filename Of Help_object_id To sHelpFile
46376>>>>>>>            End
46376>>>>>>>>
46376>>>>>>>            Else Begin
46377>>>>>>>                Move C_$ThereIsNoHelpfileDefined To sHelpFile
46378>>>>>>>            End
46378>>>>>>>>
46378>>>>>>>
46378>>>>>>>            Send AppendTextLn (SFormat (C_$HelpFile, sHelpFile))
46379>>>>>>>        End
46379>>>>>>>>
46379>>>>>>>    End_Procedure
46380>>>>>>>
46380>>>>>>>    Procedure Show_EnterAsTab
46382>>>>>>>        Boolean bEnterKeyAsTabKey
46382>>>>>>>        String sText
46382>>>>>>>
46382>>>>>>>        If (ghoApplication <> 0) Begin
46384>>>>>>>            Get pbEnterKeyAsTabKey Of ghoApplication To bEnterKeyAsTabKey
46385>>>>>>>            If (bEnterKeyAsTabKey) Begin
46387>>>>>>>                Move "True" To sText
46388>>>>>>>            End
46388>>>>>>>>
46388>>>>>>>            Else Begin
46389>>>>>>>                Move "False" To sText
46390>>>>>>>            End
46390>>>>>>>>
46390>>>>>>>            Send AppendTextLn (SFormat (C_$EnterKeyNavForward, sText))
46391>>>>>>>        End
46391>>>>>>>>
46391>>>>>>>    End_Procedure
46392>>>>>>>
46392>>>>>>>    //    During activation we will remove the old information and add the newly
46392>>>>>>>    //    found systeminformation
46392>>>>>>>    Procedure Add_Focus Integer hoRoot
46394>>>>>>>        Forward Send Add_Focus hoRoot
46396>>>>>>>
46396>>>>>>>        Send Delete_Data
46397>>>>>>>
46397>>>>>>>        Set Changed_State To False
46398>>>>>>>        Set Read_Only_State To True
46399>>>>>>>
46399>>>>>>>        Send Show_Registration
46400>>>>>>>        Send Show_Drivers
46401>>>>>>>        Send Show_ServicePack
46402>>>>>>>        Send Show_Versions
46403>>>>>>>        Send Show_Platform
46404>>>>>>>        Send AppendTextLn ""
46405>>>>>>>
46405>>>>>>>        If (ghoApplication <> 0) Begin
46407>>>>>>>            Send Show_WorkSpaceInformation
46408>>>>>>>            Send Show_HelpFile
46409>>>>>>>            Send AppendTextLn ""
46410>>>>>>>        End
46410>>>>>>>>
46410>>>>>>>        Else Begin
46411>>>>>>>            Send AppendTextLn ""
46412>>>>>>>        End
46412>>>>>>>>
46412>>>>>>>
46412>>>>>>>        If (ghoConnection <> 0) Begin
46414>>>>>>>            Send Show_ConnectionIdInformation
46415>>>>>>>        End
46415>>>>>>>>
46415>>>>>>>
46415>>>>>>>        Send Show_Current_User
46416>>>>>>>        Send Show_Windows_Directory
46417>>>>>>>        Send Show_Current_Directory
46418>>>>>>>
46418>>>>>>>        // This is already shown in the workspace details,
46418>>>>>>>        // unless no workspace object is present:
46418>>>>>>>        If (ghoApplication = 0) Begin
46420>>>>>>>            Send Show_Filelist_Name
46421>>>>>>>        End
46421>>>>>>>>
46421>>>>>>>
46421>>>>>>>        If (ghoApplication <> 0) Begin
46423>>>>>>>            Send AppendTextLn ""
46424>>>>>>>            Send Show_EnterAsTab
46425>>>>>>>        End
46425>>>>>>>>
46425>>>>>>>
46425>>>>>>>        Send Show_Screen_Size
46426>>>>>>>        Send Show_Page_Size
46427>>>>>>>        Send Show_Number_Format
46428>>>>>>>        Send Show_Date_Format
46429>>>>>>>        Send Show_Lock_Delay
46430>>>>>>>        Send Show_Lock_Timeout
46431>>>>>>>        Send Show_Date
46432>>>>>>>        Send Show_Systemresources
46433>>>>>>>        Send Beginning_of_Data
46434>>>>>>>
46434>>>>>>>        Set Icon to 'default.ico'
46435>>>>>>>    End_Procedure
46436>>>>>>>End_Class
46437>>>>>>>
46437>>>>>>>Class SysInfoDialog is a ModalPanel
46438>>>>>>>    Procedure Construct_Object
46440>>>>>>>        Forward Send Construct_Object
46442>>>>>>>
46442>>>>>>>        Set Label to C_$SystemInformation
46443>>>>>>>        Set Size to 140 267
46444>>>>>>>        Set Locate_Mode to CENTER_ON_PARENT
46445>>>>>>>        Set Border_Style to Border_Thick
46446>>>>>>>        Set Sysmenu_Icon to False
46447>>>>>>>
46447>>>>>>>        // "+1" will make the panel to paint correctly.
46447>>>>>>>        Set piMinSize to (Hi(Size(Self))) (Low(Size(Self)) +1)
46448>>>>>>>
46448>>>>>>>        // 2014-09-14 NGS
46448>>>>>>>        // Added a container object around the cTexteditor
46448>>>>>>>        // object to get a border around the text.
46448>>>>>>>        Object oSysinfoDisplayContainer is a Container3d
46450>>>>>>>            Set Location to 2 4
46451>>>>>>>            Set Size to 110 255
46452>>>>>>>            Set Border_Style to Border_ClientEdge
46453>>>>>>>            Set Color to clWhite
46454>>>>>>>            Set peAnchors to anAll
46455>>>>>>>
46455>>>>>>>            Object oSysinfoDisplay is a SysInfoDisplay
46457>>>>>>>            End_Object
46458>>>>>>>
46458>>>>>>>        End_Object
46459>>>>>>>
46459>>>>>>>        Object oCloseButton is a Button
46461>>>>>>>            Set Label to C_$Close
46462>>>>>>>            Set Location to 120 210
46463>>>>>>>            CompilerWarnings Off
46463>>>>>>>            Set Message Item 0 to msg_Close_Panel
46464>>>>>>>            CompilerWarnings On
46464>>>>>>>            Set Default_State To True
46465>>>>>>>            // In case someone likes to make the AboutDialog's Border_Style to thick,
46465>>>>>>>            // and changes its peAnchors, we might as well prepare this object
46465>>>>>>>            // for that situation.
46465>>>>>>>            Set peAnchors to anBottomRight
46466>>>>>>>        End_Object
46467>>>>>>>
46467>>>>>>>        Object oCopyButton is a cCopyEditorContentButton
46469>>>>>>>            On_Item C_$Copy Send CopyToWindowsClipboard
46470>>>>>>>            Set Size to 14 50
46471>>>>>>>            Set Location to 120 158
46472>>>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46472>>>>>>>            // we might as well prepare the object for it.
46472>>>>>>>            Set peAnchors to anBottomRight
46473>>>>>>>            Set phoEditorHandle to (oSysinfoDisplay(Self))
46474>>>>>>>        End_Object
46475>>>>>>>
46475>>>>>>>        On_Key kCancel Send Close_Panel
46476>>>>>>>    End_Procedure
46477>>>>>>>
46477>>>>>>>    Procedure Page Integer iPageObject
46479>>>>>>>        Handle hMenu
46479>>>>>>>        Integer iPrevState
46479>>>>>>>
46479>>>>>>>        Forward Send Page iPageObject
46481>>>>>>>
46481>>>>>>>        // Ok, this seems to have been fixed in VDF 17.1!
46481>>>>>>>        //
46481>>>>>>>    End_Procedure
46482>>>>>>>
46482>>>>>>>End_Class
46483>>>>>>>
46483>>>>>>>Class cAboutEdit is an cRichEdit
46484>>>>>>>    Procedure Construct_Object
46486>>>>>>>        Forward Send Construct_Object
46488>>>>>>>
46488>>>>>>>        Property String psContentText
46489>>>>>>>
46489>>>>>>>        Set Size to 77 153
46490>>>>>>>        Set Location to 8 60
46491>>>>>>>        Set Read_Only_State to True
46492>>>>>>>        Set Skip_State to True
46493>>>>>>>        // Font size is calculated in "Twips", which are 1/1440 of an inch,
46493>>>>>>>        // or 1/20 of a printer's point.
46493>>>>>>>        Set piRightMargin to (0.1 * 1440)
46494>>>>>>>        Set Border_Style  to Border_None
46495>>>>>>>    End_Procedure
46496>>>>>>>
46496>>>>>>>    // Adds a line of text to the edit object
46496>>>>>>>    Procedure Add_Line String sText
46498>>>>>>>        String sContentText
46498>>>>>>>        Get psContentText to sContentText
46499>>>>>>>        Move (sContentText + String(sText)) to sContentText
46500>>>>>>>        Set psContentText to sContentText
46501>>>>>>>    End_Procedure
46502>>>>>>>
46502>>>>>>>    // Compared to Add_Line above, this adds an extra empty line after the passed value.
46502>>>>>>>    // Note that we use a property psContentText and add to it,
46502>>>>>>>    // because the object isn't paged yet when we add these
46502>>>>>>>    // values and the COM edit object needs to be paged
46502>>>>>>>    // for the text to become visible. See Also: Procedure Page below.
46502>>>>>>>    Procedure Add_LineLn String sText
46504>>>>>>>        String sContentText sCR
46504>>>>>>>
46504>>>>>>>        Move (Character(10) + String(Character(13))) to sCR
46505>>>>>>>        Get psContentText to sContentText
46506>>>>>>>        Move (sContentText + String(sText) + sCR) to sContentText
46507>>>>>>>        Set psContentText to sContentText
46508>>>>>>>    End_Procedure
46509>>>>>>>
46509>>>>>>>    Procedure OnLinkClicked Integer iPositionStart Integer iPositionEnd
46511>>>>>>>        String sLinkText
46511>>>>>>>        Get TextRange iPositionStart iPositionEnd to sLinkText
46512>>>>>>>        Send Show_HomePage sLinkText
46513>>>>>>>    End_Procedure
46514>>>>>>>
46514>>>>>>>    Procedure Page Integer iPageObject
46516>>>>>>>        String sContentText
46516>>>>>>>
46516>>>>>>>        Forward Send Page iPageObject
46518>>>>>>>        Get psContentText to sContentText
46519>>>>>>>        Send AppendText sContentText
46520>>>>>>>        send Beginning_of_Data
46521>>>>>>>    End_Procedure
46522>>>>>>>
46522>>>>>>>End_Class
46523>>>>>>>
46523>>>>>>>Class AboutDialog is a ModalPanel
46524>>>>>>>    Procedure Construct_Object
46526>>>>>>>
46526>>>>>>>        Forward Send Construct_Object
46528>>>>>>>
46528>>>>>>>        Set Label to C_$About
46529>>>>>>>        Set Size to 118 230
46530>>>>>>>        Set Locate_Mode to CENTER_ON_PARENT
46531>>>>>>>        Set Border_Style to Border_Thick
46532>>>>>>>        Set piMinSize to (Hi(Size(Self))) (Low(Size(Self)))
46533>>>>>>>
46533>>>>>>>        Object oSysInfoDialog is a SysInfoDialog
46535>>>>>>>        End_Object
46536>>>>>>>
46536>>>>>>>        Object oBox is a Container3d
46538>>>>>>>            Set Border_Style to Border_Normal
46539>>>>>>>            Set Size to 90 220
46540>>>>>>>            Set Location to 4 5
46541>>>>>>>            Set Color to clWhite
46542>>>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46542>>>>>>>            // we might as well prepare the object for it.
46542>>>>>>>            Set peAnchors to anAll
46543>>>>>>>
46543>>>>>>>            Object oAboutGraphic is a BitmapContainer
46545>>>>>>>                Set Border_Style To Border_None
46546>>>>>>>                Set Bitmap_Style to Bitmap_Center
46547>>>>>>>                Set Color to clWhite
46548>>>>>>>                Set Size to 45 50
46549>>>>>>>                Set Location to 0 3
46550>>>>>>>            End_Object
46551>>>>>>>
46551>>>>>>>            Object oPoweredByDFGraphic is a cBitmapContainerDFLink
46553>>>>>>>                Set Border_Style to Border_None
46554>>>>>>>                Set Bitmap_Style to Bitmap_Center
46555>>>>>>>                Set Color to clWhite
46556>>>>>>>                Set Size to 30 55
46557>>>>>>>                Set Location to 50 3
46558>>>>>>>            End_Object
46559>>>>>>>
46559>>>>>>>            Object oInfoList_Editor is an cAboutEdit
46561>>>>>>>                // In case someone wants to set the AboutDialog's Border_Style to thick,
46561>>>>>>>                // we might as well prepare the object for it.
46561>>>>>>>                Set peAnchors to anAll
46562>>>>>>>            End_Object
46563>>>>>>>
46563>>>>>>>            // These objects are here for backwards compatability only.
46563>>>>>>>            // They are not used.
46563>>>>>>>            Object oProductName is a TextBox
46565>>>>>>>                Set Label To C_$ProductName
46566>>>>>>>                Set Size To 10 45
46567>>>>>>>                Set Location To 8 53
46568>>>>>>>                Set Visible_State to False
46569>>>>>>>                Set Focus_Mode to NonFocusable
46570>>>>>>>            End_Object
46571>>>>>>>
46571>>>>>>>            Object oVersion is a TextBox
46573>>>>>>>                Set Label To C_$Version
46574>>>>>>>                Set Size To 10 25
46575>>>>>>>                Set Location To 21 53
46576>>>>>>>                Set Visible_State to False
46577>>>>>>>                Set Focus_Mode to NonFocusable
46578>>>>>>>            End_Object
46579>>>>>>>
46579>>>>>>>            Object oCopyright is a TextBox
46581>>>>>>>                Set Label To C_$Copyright
46582>>>>>>>                Set Size To 10 31
46583>>>>>>>                Set Location To 34 53
46584>>>>>>>                Set Visible_State to False
46585>>>>>>>                Set Focus_Mode to NonFocusable
46586>>>>>>>            End_Object
46587>>>>>>>
46587>>>>>>>            Object oAuthor is a TextBox
46589>>>>>>>                Set Label To C_$Author
46590>>>>>>>                Set Size To 10 22
46591>>>>>>>                Set Location To 46 53
46592>>>>>>>                Set Visible_State to False
46593>>>>>>>                Set Focus_Mode to NonFocusable
46594>>>>>>>            End_Object
46595>>>>>>>
46595>>>>>>>        End_Object
46596>>>>>>>
46596>>>>>>>        Object oOKButton is a Button
46598>>>>>>>            On_Item C_$Close Send Close_Panel
46599>>>>>>>            Set Location to 98 176
46600>>>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46600>>>>>>>            // we might as well prepare the object for it.
46600>>>>>>>            Set peAnchors to anBottomRight
46601>>>>>>>        End_Object
46602>>>>>>>
46602>>>>>>>        Object oSysInfoButton is a Button
46604>>>>>>>            On_Item C_$SystemInfo Send Show_Sysinfo
46605>>>>>>>            Set Location to 98 123
46606>>>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46606>>>>>>>            // we might as well prepare the object for it.
46606>>>>>>>            Set peAnchors to anBottomRight
46607>>>>>>>        End_Object
46608>>>>>>>
46608>>>>>>>        Object oCopyButton is a cCopyEditorContentButton
46610>>>>>>>            On_Item C_$Copy Send CopyToWindowsClipboard
46611>>>>>>>            Set Size to 14 50
46612>>>>>>>            Set Location to 98 70
46613>>>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46613>>>>>>>            // we might as well prepare the object for it.
46613>>>>>>>            Set peAnchors to anBottomRight
46614>>>>>>>            Set phoEditorHandle to (oInfoList_Editor(Self))
46615>>>>>>>        End_Object
46616>>>>>>>
46616>>>>>>>        On_Key Kcancel Send KeyAction of oOKButton
46617>>>>>>>        Set Logo   to "DacAbout.bmp"  // Square bitmaps of 80x80 work best
46618>>>>>>>        Set LogoDF to "DF32.bmp"
46619>>>>>>>//        Set LogoVDF to "PoweredByOrange.bmp"
46619>>>>>>>    End_Procedure
46620>>>>>>>
46620>>>>>>>    Procedure Page Integer iPageObject
46622>>>>>>>        Handle hMenu
46622>>>>>>>        Integer iPrevState
46622>>>>>>>
46622>>>>>>>        Forward Send Page iPageObject
46624>>>>>>>        // Due to a bug in the ModalPanel class, we need to set the icon here:
46624>>>>>>>        Set Icon to "Default.ico"
46625>>>>>>>
46625>>>>>>>        // Shadow upper left corner menu items: (icon menu items)
46625>>>>>>>        Move (GetSystemMenu(Window_Handle(Self), False)) to hMenu
46626>>>>>>>        Move (EnableMenuItem(hMenu, SC_RESTORE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46627>>>>>>>        // The "Move" menu command may come in handy to have.
46627>>>>>>>        // Move (EnableMenuItem(hMenu, SC_MOVE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46627>>>>>>>        Move (EnableMenuItem(hMenu, SC_SIZE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46628>>>>>>>        Move (EnableMenuItem(hMenu, SC_MINIMIZE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46629>>>>>>>        Move (EnableMenuItem(hMenu, SC_MAXIMIZE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46630>>>>>>>        // The "Close" menu command may be good to have.
46630>>>>>>>        // Move (EnableMenuItem(hMenu, SC_CLOSE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46630>>>>>>>    End_Procedure
46631>>>>>>>
46631>>>>>>>    Procedure Set ProductName String sText
46633>>>>>>>        Set Value of oProductName to sText
46634>>>>>>>    End_Procedure
46635>>>>>>>
46635>>>>>>>    Procedure Set Copyright String sText
46637>>>>>>>        Set Value of oCopyright to sText
46638>>>>>>>    End_Procedure
46639>>>>>>>
46639>>>>>>>    Procedure Set Author String sText
46641>>>>>>>        Set Value of oAuthor to sText
46642>>>>>>>    End_Procedure
46643>>>>>>>
46643>>>>>>>    // This is used by the About object to display the compile date & time:
46643>>>>>>>    // Note: It relies on that each project (program) has been setup to use the "WriteDateTimeHeaderFile64.exe"
46643>>>>>>>    //       program as a pre-compile!
46643>>>>>>>    //       Add it here: "Before Compilation Process:" (See Studio's: Project - Project Properties - Compiler tab-page)
46643>>>>>>>    Include_Resource CompileHeader.h as res_CompileHeader type DF_RESOURCE_TYPE_LINE
46643>>>>>>>
46643>>>>>>>    Procedure Set Version String sVersion
46645>>>>>>>        Handle hoVersionInfo
46645>>>>>>>        Boolean bIncluded
46645>>>>>>>        Integer iMajor iMinor iRelease iBuild iPos
46645>>>>>>>        String sCertInfo sCompileDateAndTime
46645>>>>>>>
46645>>>>>>>        If (sVersion = "") Begin
46647>>>>>>>            // This automatically shows the program version of the program, if available.
46647>>>>>>>            // It will be displayed as the second item in the edit object.
46647>>>>>>>            If (ghoApplication <> 0) Begin
46649>>>>>>>                Get phoVersionInfo of ghoApplication to hoVersionInfo
46650>>>>>>>                If (hoVersionInfo <> 0) Begin
46652>>>>>>>                    Get pbIncluded of hoVersionInfo to bIncluded
46653>>>>>>>                    If (bIncluded) Begin
46655>>>>>>>                        Get piVersionMajor of hoVersionInfo to iMajor
46656>>>>>>>                        Get piVersionMinor of hoVersionInfo to iMinor
46657>>>>>>>                        Get piVersionRelease of hoVersionInfo to iRelease
46658>>>>>>>                        Get piVersionBuild of hoVersionInfo to iBuild
46659>>>>>>>                        Move (SFormat (C_$VERSION + ": %1.%2.%3.%4", iMajor, iMinor, iRelease, iBuild)) to sVersion
46660>>>>>>>                    End
46660>>>>>>>>
46660>>>>>>>                End
46660>>>>>>>>
46660>>>>>>>            End
46660>>>>>>>>
46660>>>>>>>        End
46660>>>>>>>>
46660>>>>>>>
46660>>>>>>>        // Display the compiled date as the next row in the edit object, after the program version.
46660>>>>>>>        Direct_Input "resource: res_CompileHeader"
46661>>>>>>>        Readln sCompileDateAndTime
46662>>>>>>>        Move (Pos('"', sCompileDateAndTime)) to iPos
46663>>>>>>>        If (iPos <> 0) Begin
46665>>>>>>>            Move (Mid(sCompileDateAndTime, Length(sCompileDateAndTime), (iPos + 1))) to sCompileDateAndTime
46666>>>>>>>            Move (Replaces('"', sCompileDateAndTime, '')) to sCompileDateAndTime
46667>>>>>>>        End
46667>>>>>>>>
46667>>>>>>>        Close_Input
46668>>>>>>>
46668>>>>>>>        If (sCompileDateAndTime <> "") Begin
46670>>>>>>>            Send Add_Lineln (sVersion + (Character(13)) + C_$Compile_Date * String(sCompileDateAndTime))
46671>>>>>>>        End
46671>>>>>>>>
46671>>>>>>>
46671>>>>>>>        Get IsProgramDigitallySigned to sCertInfo
46672>>>>>>>        If (sCertInfo <> "-1") Begin
46674>>>>>>>            If (sCertInfo <> "") Begin
46676>>>>>>>                Send Add_LineLn sCertInfo
46677>>>>>>>            End
46677>>>>>>>>
46677>>>>>>>            Else Begin
46678>>>>>>>//                Send Add_LineLn "The program has NOT been digitally signed, or there is a problem with the digical certificate."
46678>>>>>>>            End
46678>>>>>>>>
46678>>>>>>>        End
46678>>>>>>>>
46678>>>>>>>    End_Procedure
46679>>>>>>>
46679>>>>>>>    Function IsDate String sDate Returns Boolean
46681>>>>>>>        Boolean bIsDate
46681>>>>>>>        String sGoodCharacters sChar
46681>>>>>>>        Integer iCount iLength
46681>>>>>>>
46681>>>>>>>        Move True to bIsDate
46682>>>>>>>        Move "0123456789-/" to sGoodCharacters
46683>>>>>>>        Move (Length(sDate)) to iLength
46684>>>>>>>        For iCount from 1 to iLength
46690>>>>>>>>
46690>>>>>>>            Move (Left(sDate, 1)) to sChar
46691>>>>>>>            Move (Mid(sDate, 12, 2)) to sDate
46692>>>>>>>            Move (sGoodCharacters contains sChar) to bIsDate
46693>>>>>>>            If (bIsDate = False) Begin
46695>>>>>>>                Move iLength to iCount
46696>>>>>>>            End
46696>>>>>>>>
46696>>>>>>>        Loop
46697>>>>>>>>
46697>>>>>>>        Function_Return bIsDate
46698>>>>>>>    End_Function
46699>>>>>>>
46699>>>>>>>    Function GetCompileDate Returns Date
46701>>>>>>>        Date dCompileDate
46701>>>>>>>        String sAppFilename sProgram sData sCompileDate
46701>>>>>>>        Integer iChannel iPos iDateFormat iCount iSize
46701>>>>>>>        Boolean bIsValid   
46701>>>>>>>        
46701>>>>>>>        Move 0 to dCompileDate
46702>>>>>>>        // Get full path to the current running executable
46702>>>>>>>        Get GetApplicationFileName of ghoApplication to sAppFilename
46703>>>>>>>        Get GetApplicationName     of ghoApplication to sProgram
46704>>>>>>>
46704>>>>>>>        //Read the current file  up to where the data we're interesting in is (this was hand calced and so could vary)
46704>>>>>>>        Get Seq_Open_Input_Channel ("binary:" * sAppFilename) to iChannel
46705>>>>>>>
46705>>>>>>>        Read_Block channel iChannel sData 9000000   // This must be big enough to reach the compile date location
46707>>>>>>>        Move (Pos(sProgram, sData)) to iPos
46708>>>>>>>        If (iPos > 0) Begin
46710>>>>>>>            // The compile date is 10 characters long and starts 3 characters after the program name
46710>>>>>>>            Move (Mid(sData, 10, iPos + Length(sProgram) + 3)) to sCompileDate  // In US format
46711>>>>>>>
46711>>>>>>>            // If the current date format is non US, we need to temporary
46711>>>>>>>            // change the format and then move the string to the date variable.
46711>>>>>>>            Get_Attribute DF_DATE_FORMAT to iDateFormat
46714>>>>>>>            Set_Attribute DF_DATE_FORMAT to DF_DATE_USA  
46717>>>>>>>            Send Ignore_Error of Error_Object_Id 16 
46718>>>>>>>            If (Left(sCompileDate, 1) = "0") Begin
46720>>>>>>>                Move ("1" + String(sCompileDate)) to sCompileDate
46721>>>>>>>            End
46721>>>>>>>>
46721>>>>>>>            Move (Date(sCompileDate))    to dCompileDate
46722>>>>>>>            Send Trap_Error of Error_Object_Id 16
46723>>>>>>>            Set_Attribute DF_DATE_FORMAT to iDateFormat // Reset date format
46726>>>>>>>        End
46726>>>>>>>>
46726>>>>>>>        Else Begin
46727>>>>>>>            Error DFERR_PROGRAM "Compile Date location in .exe not found"
46728>>>>>>>>
46728>>>>>>>        End
46728>>>>>>>>
46728>>>>>>>
46728>>>>>>>        Send Seq_Close_Channel iChannel
46729>>>>>>>
46729>>>>>>>        Function_Return dCompileDate
46730>>>>>>>    End_Function
46731>>>>>>>
46731>>>>>>>    // A variant of the ShellExecute Win API, but it waits until the process that is started
46731>>>>>>>    // (the passed program), has been finished
46731>>>>>>>    // The DOS box does also _not_ flash briefly.
46731>>>>>>>    Procedure RunProgramWait String sProgram String sParameter
46733>>>>>>>        Handle hProcess
46733>>>>>>>        Integer iVoid
46733>>>>>>>        AboutSHELLEXECUTEINFO sInfo
46733>>>>>>>        AboutSHELLEXECUTEINFO sInfo
46733>>>>>>>
46733>>>>>>>        Move (SizeOfType(AboutSHELLEXECUTEINFO)) to sInfo.cbSize
46734>>>>>>>
46734>>>>>>>        Move SEE_MASK_NOCLOSEPROCESS to sInfo.fMask
46735>>>>>>>        Move SW_SHOW                 to sInfo.nShow
46736>>>>>>>
46736>>>>>>>        Move (AddressOf(sProgram))   to sInfo.lpFile
46737>>>>>>>        Move (AddressOf(sParameter)) to sInfo.lpParameters
46738>>>>>>>        // This will "hide" the DOS box from showing (no flasing box):
46738>>>>>>>        Move 0                       to sInfo.nShow
46739>>>>>>>
46739>>>>>>>        Move (AboutShellExecuteEx(AddressOf(sInfo))) to iVoid
46740>>>>>>>        Move sInfo.hProcess to hProcess
46741>>>>>>>        If (hProcess) Begin
46743>>>>>>>            Move (AboutWaitForSingleObject(hProcess, -1)) to iVoid
46744>>>>>>>            Move (AboutCloseHandle(hProcess)) to iVoid
46745>>>>>>>        End
46745>>>>>>>>
46745>>>>>>>    End_Procedure
46746>>>>>>>
46746>>>>>>>    Function AddFolderDelimiter String sPath Returns String
46748>>>>>>>        String sDirSep
46748>>>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
46749>>>>>>>        Move (Trim(sPath)) to sPath
46750>>>>>>>        If (Right(sPath, 1) <> sDirSep) Begin
46752>>>>>>>            Move (sPath + sDirSep) to sPath
46753>>>>>>>        End
46753>>>>>>>>
46753>>>>>>>        Function_Return sPath
46754>>>>>>>    End_Function
46755>>>>>>>
46755>>>>>>>    // Returns an empty string if the current program is not digitally signed,
46755>>>>>>>    // or there is a problem with the certificate.
46755>>>>>>>    // Note: A copy of the Microsoft signtool.exe program must reside in the Programs folder,
46755>>>>>>>    //       else nothing is shown in the About object. (Size 355 KB)
46755>>>>>>>    Function IsProgramDigitallySigned Returns String
46757>>>>>>>        Boolean bExists
46757>>>>>>>        String sPath sProgram sParams sRetval
46757>>>>>>>        Integer iCh
46757>>>>>>>
46757>>>>>>>        Move "" to sRetval
46758>>>>>>>        Get psProgramPath of (phoWorkspace(ghoApplication)) to sPath
46759>>>>>>>        Get AddFolderDelimiter sPath to sPath
46760>>>>>>>        File_Exist (sPath + CS_SignProgram) bExists
46761>>>>>>>        If (bExists = False) Begin
46763>>>>>>>            Function_Return "-1"
46764>>>>>>>        End
46764>>>>>>>>
46764>>>>>>>
46764>>>>>>>        Get GetApplicationFileName of ghoApplication to sProgram
46765>>>>>>>        Move (CS_VerifyCredentials * CS_DefAuthVerPolicy) to sParams
46766>>>>>>>        Move (sParams * '"' + sProgram + '"') to sParams
46767>>>>>>>        Move (sParams * String("| clip"))    to sParams
46768>>>>>>>        Get Seq_New_Channel to iCh
46769>>>>>>>        Direct_Output channel iCh (sPath + CS_TempCertBatchFile)
46771>>>>>>>            Writeln channel iCh ('"' + sPath + CS_SignProgram + '"' * sParams)
46774>>>>>>>        Close_Output channel iCh
46776>>>>>>>        // New ShellExecute based message that waits for the passed process to end.
46776>>>>>>>        Send RunProgramWait (sPath + CS_TempCertBatchFile) ""
46777>>>>>>>        Direct_Input channel iCh "CLIPBOARD:"
46779>>>>>>>            Readln channel iCh sRetval
46781>>>>>>>            Readln channel iCh sRetval
46783>>>>>>>            Readln channel iCh sRetval
46785>>>>>>>            Readln channel iCh sRetval
46787>>>>>>>        Close_Input channel iCh
46789>>>>>>>        Send Seq_Release_Channel iCh
46790>>>>>>>        If (Lowercase(sRetval) contains "authenticode") Begin
46792>>>>>>>            Move "This program has been digitally signed and the certificate is valid." to sRetval
46793>>>>>>>        End
46793>>>>>>>>
46793>>>>>>>        Else Begin
46794>>>>>>>            Move "" to sRetval
46795>>>>>>>        End
46795>>>>>>>>
46795>>>>>>>//        Get DeleteFile (sPath + CS_TempCertBatchFile) to iRetval
46795>>>>>>>        EraseFile (sPath + CS_TempCertBatchFile)
46796>>>>>>>>
46796>>>>>>>        Function_Return sRetval
46797>>>>>>>    End_Function
46798>>>>>>>
46798>>>>>>>    Procedure Add_LineLn String sValue
46800>>>>>>>        Send Add_LineLn of oInfoList_Editor sValue
46801>>>>>>>    End_Procedure
46802>>>>>>>
46802>>>>>>>    Procedure Add_Line String sValue
46804>>>>>>>        Send Add_Line of oInfoList_Editor sValue
46805>>>>>>>    End_Procedure
46806>>>>>>>
46806>>>>>>>    Procedure Set Logo string sLogo
46808>>>>>>>        // Square bitmaps of 80x80 work best
46808>>>>>>>        Set Bitmap of oAboutGraphic to sLogo
46809>>>>>>>    End_Procedure
46810>>>>>>>
46810>>>>>>>    Procedure Set LogoDF String sLogo
46812>>>>>>>        Set Bitmap of oPoweredByDFGraphic to sLogo
46813>>>>>>>    End_Procedure
46814>>>>>>>
46814>>>>>>>    Procedure Show_Sysinfo
46816>>>>>>>        Send Popup_Modal of oSysinfoDialog
46817>>>>>>>    End_Procedure
46818>>>>>>>
46818>>>>>>>    Procedure Show_HomePage String sWebpage
46820>>>>>>>        Handle hWnd
46820>>>>>>>        Get Window_Handle to hWnd
46821>>>>>>>        Runprogram Shell Background (Trim(sWebpage))
46822>>>>>>>    End_Procedure
46823>>>>>>>
46823>>>>>>>End_Class
46824>>>>>
46824>>>>>    Function piOrgErrorHandlerID Returns Integer
46826>>>>>    End_Function
46827>>>>>
46827>>>>>Register_Procedure Set Private.pbProcessingError Boolean bProcessingError
46827>>>>>
46827>>>>>Class cBaseDbUpdateFuncLib is a cObject
46828>>>>>    Import_Class_Protocol cDbUpdateFunctionLibrary_Mixin
Including file: ParseKeyWord.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ParseKeyWord.pkg)
46829>>>>>>
46829>>>>>>Function ParseKeyWord String sConnect String sKeyWord Returns String
46831>>>>>>    Integer iStart iEnd
46831>>>>>>    String sRetval
46831>>>>>>
46831>>>>>>    Move (Trim(sConnect)) to sConnect
46832>>>>>>    Move (Pos(Uppercase(sKeyWord), Uppercase(sConnect)))  to iStart
46833>>>>>>    If (iStart = 0) Begin
46835>>>>>>        Function_Return ""
46836>>>>>>    End
46836>>>>>>>
46836>>>>>>    Move (Left(sConnect, (iStart -1 + Length(sKeyWord)))) to sRetval
46837>>>>>>    Move (Replace(sRetval, sConnect, "")) to sRetval
46838>>>>>>    If (sKeyWord = Uppercase(CS_SQLConnectionIDText)) Begin
46840>>>>>>        Move (Pos(",", sRetval))          to iEnd
46841>>>>>>    End
46841>>>>>>>
46841>>>>>>    Else Begin
46842>>>>>>        Move (Pos(";", sRetval))          to iEnd
46843>>>>>>    End
46843>>>>>>>
46843>>>>>>    If (iEnd = 0 and (sRetval contains ",")) Begin
46845>>>>>>        Move (Pos(",", sRetval))          to iEnd
46846>>>>>>        Decrement iEnd
46847>>>>>>    End
46847>>>>>>>
46847>>>>>>    If (iEnd <> 0) Begin
46849>>>>>>        Move (Left(sRetval, (iEnd -1)))   to sRetval
46850>>>>>>    End
46850>>>>>>>
46850>>>>>>    Move (Replace("=", sRetval, ""))      to sRetval
46851>>>>>>
46851>>>>>>    Function_Return (Trim(sRetval))
46852>>>>>>End_Function
46853>>>>>>
46853>>>>>>
46853>>>>>    
46853>>>>>    Procedure Construct_Object
46855>>>>>        Handle ho
46855>>>>>        Forward Send Construct_Object
46857>>>>>        Move Self to ghoDbUpdateFunctionLibrary
46858>>>>>        
46858>>>>>        Send CreateDbUpdateLibraryProperties
46859>>>>>        Property String private.psCollation "Latin1_General_CS_AS"
46860>>>>>        Property String[] pasSQLDataTables
46861>>>>>        Property tFilelist[] pFileListArray  
46862>>>>>        Property tFilelist[] pErrorTables
46863>>>>>
46863>>>>>        // If no ghoSQLConnectionHandler object has been created prior to this object,
46863>>>>>        // we will create one as it is used for all ConnectionID, ConnectionString
46863>>>>>        // etc settings.
46863>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46865>>>>>            Get Create (RefClass(cSQLConnectionHandler)) to ho
46866>>>>>            Set Name of ho to "oSQLConnectionHandler"
46867>>>>>            Set phoSQLConnectionHandler to ho
46868>>>>>        End
46868>>>>>>
46868>>>>>
46868>>>>>    End_Procedure
46869>>>>>
46869>>>>>    Procedure End_Construct_Object
46871>>>>>        Forward Send End_Construct_Object
46873>>>>>
46873>>>>>    End_Procedure
46874>>>>>
46874>>>>>    // Latin1_General_CI_AS = General Insensitive collation
46874>>>>>    // Latin1_General_CS_AS = General Case Sensitive collation, AS= Accent Sensitive.
46874>>>>>    // For MS-SQL See: https://docs.microsoft.com/en-us/sql/t-sql/statements/windows-collation-name-transact-sql?view=sql-server-2017
46874>>>>>    // Good read about which collation to select:
46874>>>>>    // https://social.msdn.microsoft.com/Forums/sqlserver/en-US/bfdc32d3-3d36-4d63-8d87-6ee972fd8130/on-sqllatin1generalcp1cias-sql-server-2008-default-collation?forum=transactsql
46874>>>>>    Procedure Set psCollation String sCollation
46876>>>>>        Set private.psCollation to sCollation
46877>>>>>        If (ghoDbUpdateHandler > 0) Begin
46879>>>>>            Set psCollation of ghoDbUpdateHandler to sCollation
46880>>>>>        End
46880>>>>>>
46880>>>>>    End_Procedure
46881>>>>>
46881>>>>>    Function psCollation Returns String
46883>>>>>        String sCollation
46883>>>>>        If (ghoDbUpdateHandler > 0) Begin
46885>>>>>            Get psCollation of ghoDbUpdateHandler to sCollation
46886>>>>>        End   
46886>>>>>>
46886>>>>>        Else Begin
46887>>>>>            Get private.psCollation to sCollation
46888>>>>>        End
46888>>>>>>
46888>>>>>        Function_Return sCollation
46889>>>>>    End_Function
46890>>>>>
46890>>>>>    // Array sorting helper functions:
46890>>>>>    Function __UtilRelationArrayCompare tAPIRelation RelationCurrent tAPIRelation RelationNew Returns Integer
46892>>>>>        If (RelationCurrent.hTableFrom  = RelationNew.hTableFrom and ;            RelationCurrent.iColumnFrom = RelationNew.iColumnFrom and ;            RelationCurrent.hTableTo    = RelationNew.hTableTo and ;            RelationCurrent.iColumnTo   = RelationNew.iColumnTo) Begin
46894>>>>>            Function_Return (EQ)
46895>>>>>        End
46895>>>>>>
46895>>>>>
46895>>>>>        Function_Return (GT)
46896>>>>>    End_Function
46897>>>>>
46897>>>>>    Function __SearchRelationCompare tAPIRelationCompare RelationCompareCurrent tAPIRelationCompare RelationCompareNew Returns Integer
46899>>>>>        If (RelationCompareCurrent.hTableFrom  = RelationCompareNew.hTableFrom and ;            RelationCompareCurrent.iColumnFrom = RelationCompareNew.iColumnFrom and ;            RelationCompareCurrent.hTableTo    = RelationCompareNew.hTableTo and ;            RelationCompareCurrent.iColumnTo   = RelationCompareNew.iColumnTo) ;            Function_Return (EQ)
46902>>>>>
46902>>>>>        Function_Return (GT)
46903>>>>>    End_Function
46904>>>>>
46904>>>>>    // Compares the RootName, LogicalName & DisplayName and returns True if they are equal.
46904>>>>>    // Note that it first removes any driver prefixes in the rootname.
46904>>>>>    Function _ApiTableFilelistNamesCompare Boolean bCompareFilelistUppercase tAPITableNameInfo APITableInfo Returns Boolean
46906>>>>>        String sRootNameFrom sRootNameTo sDisplayNameTo sLogicalNameTo
46906>>>>>        Handle hTable
46906>>>>>        Boolean bIsSame
46906>>>>>
46906>>>>>        Move APITableInfo.iTableNumber      to hTable
46907>>>>>        Get _TableNameOnly APITableInfo.sRootName     to sRootNameFrom
46908>>>>>        Get_Attribute DF_FILE_ROOT_NAME     of hTable to sRootNameTo
46911>>>>>        Get _TableNoPrefix sRootNameTo                to sRootNameTo
46912>>>>>        Get_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalNameTo
46915>>>>>        Get_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayNameTo
46918>>>>>        Get _TableNoPrefix sDisplayNameTo             to sDisplayNameTo
46919>>>>>
46919>>>>>        If (bCompareFilelistUppercase = True) Begin
46921>>>>>            Move (Uppercase(sRootNameFrom) = Uppercase(sRootNameTo) and Uppercase(APITableInfo.sLogicalName) = Uppercase(sLogicalNameTo) and ;                  Uppercase(APITableInfo.sDisplayName) = Uppercase(sDisplayNameTo)) to bIsSame
46922>>>>>        End
46922>>>>>>
46922>>>>>        Else Begin
46923>>>>>            Move (sRootNameFrom = sRootNameTo and APITableInfo.sLogicalName = sLogicalNameTo and APITableInfo.sDisplayName = sDisplayNameTo) to bIsSame
46924>>>>>        End
46924>>>>>>
46924>>>>>
46924>>>>>        Function_Return bIsSame
46925>>>>>    End_Function
46926>>>>>
46926>>>>>    Function AutoSetConnectionID String sConnectionID Returns Boolean
46928>>>>>        Integer iRetval
46928>>>>>        Move 1 to iRetval
46929>>>>>        If (ghoSQLConnectionHandler <> 0) Begin
46931>>>>>            Set psConnectionID of ghoSQLConnectionHandler to sConnectionID
46932>>>>>            Get AutoSetConnectionID of ghoSQLConnectionHandler to iRetval
46933>>>>>        End
46933>>>>>>
46933>>>>>        Function_Return (iRetval = 0)
46934>>>>>    End_Function
46935>>>>>
46935>>>>>    Function _AddFolderDelimiter String sPath Returns String
46937>>>>>        String sDirSep
46937>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
46938>>>>>        Move (Trim(sPath)) to sPath
46939>>>>>        If (Right(sPath, 1) <> sDirSep) Begin
46941>>>>>            Move (sPath + sDirSep) to sPath
46942>>>>>        End
46942>>>>>>
46942>>>>>        Function_Return sPath
46943>>>>>    End_Function
46944>>>>>
46944>>>>>    Procedure _SqlColumnInfo Handle hoStmt
46946>>>>>        Integer i iCols iItem
46946>>>>>        tSqlColumnNew[] aQueryColumns
46946>>>>>        tSqlColumnNew[] aQueryColumns
46947>>>>>
46947>>>>>        Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_COLUMNCOUNT to iCols
46948>>>>>        For i from 1 to iCols
46954>>>>>>
46954>>>>>            Move (SizeOfArray(aQueryColumns)) to iItem
46955>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_BASECOLUMNNAME to aQueryColumns[iItem].sBaseColumnName
46956>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_BASETABLENAME  to aQueryColumns[iItem].sBaseTableName
46957>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_LABEL          to aQueryColumns[iItem].sLabel
46958>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_SQLTYPE        to aQueryColumns[iItem].iSqlType
46959>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_DFTYPE         to aQueryColumns[iItem].iDFType
46960>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_SIZE           to aQueryColumns[iItem].iSize
46961>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_PRECISION      to aQueryColumns[iItem].iPrecision
46962>>>>>        Loop
46963>>>>>>
46963>>>>>        Set piColumns to iCols
46964>>>>>        Set paQueryColumns to aQueryColumns
46965>>>>>    End_Procedure
46966>>>>>
46966>>>>>    // *** Property Messages ***
46966>>>>>    //
46966>>>>>    // These "properties" are settings for the cSQLConnectionHandler class, but have been
46966>>>>>    // "duplicated" here so connection properties can be relayed to the ghoSQLConnectionHandler object
46966>>>>>    //
46966>>>>>    Function pSQLConnection Returns tSQLConnection
46968>>>>>        tSQLConnection SQLConnection
46968>>>>>        tSQLConnection SQLConnection
46968>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46970>>>>>            // Note: No point in translating as the programmer will see this immediately after compiling the program...
46970>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46971>>>>>>
46971>>>>>            Function_Return
46972>>>>>        End
46972>>>>>>
46972>>>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
46973>>>>>        Function_Return SQLConnection
46974>>>>>    End_Function
46975>>>>>
46975>>>>>    // * Dummy function for the Studio's Code Explorer *
46975>>>>>    Function OTHER_CLASS_PROPERTIES Returns Boolean
46977>>>>>        Function_Return False
46978>>>>>    End_Function
46979>>>>>
46979>>>>>    Procedure Set psServer String sValue
46981>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46983>>>>>            // Note: No point in translating as the programmer will see this immediately after compiling the program...
46983>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46984>>>>>>
46984>>>>>            Procedure_Return
46985>>>>>        End
46985>>>>>>
46985>>>>>        Set psServer of ghoSQLConnectionHandler to sValue
46986>>>>>    End_Procedure
46987>>>>>
46987>>>>>    Function psServer Returns String
46989>>>>>        String sValue
46989>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46991>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46992>>>>>>
46992>>>>>            Function_Return
46993>>>>>        End
46993>>>>>>
46993>>>>>        Get psServer of ghoSQLConnectionHandler to sValue
46994>>>>>        Function_Return sValue
46995>>>>>    End_Function
46996>>>>>
46996>>>>>    Procedure Set psDatabase String sValue
46998>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47000>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47001>>>>>>
47001>>>>>            Procedure_Return
47002>>>>>        End
47002>>>>>>
47002>>>>>        Set psDatabase of ghoSQLConnectionHandler to sValue
47003>>>>>    End_Procedure
47004>>>>>
47004>>>>>    Function psDatabase Returns String
47006>>>>>        String sValue
47006>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47008>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47009>>>>>>
47009>>>>>            Function_Return
47010>>>>>        End
47010>>>>>>
47010>>>>>        Get psDatabase of ghoSQLConnectionHandler to sValue
47011>>>>>        Function_Return sValue
47012>>>>>    End_Function
47013>>>>>
47013>>>>>    Procedure Set psUserID String sValue
47015>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47017>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47018>>>>>>
47018>>>>>            Procedure_Return
47019>>>>>        End
47019>>>>>>
47019>>>>>        Set psUserID of ghoSQLConnectionHandler to sValue
47020>>>>>    End_Procedure
47021>>>>>
47021>>>>>    Function psUserID Returns String
47023>>>>>        String sValue
47023>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47025>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47026>>>>>>
47026>>>>>            Function_Return
47027>>>>>        End
47027>>>>>>
47027>>>>>        Get psUserID of ghoSQLConnectionHandler to sValue
47028>>>>>        Function_Return sValue
47029>>>>>    End_Function
47030>>>>>
47030>>>>>    Procedure Set psPassword String sValue
47032>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47034>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47035>>>>>>
47035>>>>>            Procedure_Return
47036>>>>>        End
47036>>>>>>
47036>>>>>        Set psPassword of ghoSQLConnectionHandler to sValue
47037>>>>>    End_Procedure
47038>>>>>
47038>>>>>    Function psPassword Returns String
47040>>>>>        String sValue
47040>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47042>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47043>>>>>>
47043>>>>>            Function_Return
47044>>>>>        End
47044>>>>>>
47044>>>>>        Get psPassword of ghoSQLConnectionHandler to sValue
47045>>>>>        Function_Return sValue
47046>>>>>    End_Function
47047>>>>>
47047>>>>>    Procedure Set pbTrusted Boolean bValue
47049>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47051>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47052>>>>>>
47052>>>>>            Procedure_Return
47053>>>>>        End
47053>>>>>>
47053>>>>>        Set pbTrusted of ghoSQLConnectionHandler to bValue
47054>>>>>    End_Procedure
47055>>>>>
47055>>>>>    Function pbTrusted Returns Boolean
47057>>>>>        Boolean bValue
47057>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47059>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47060>>>>>>
47060>>>>>            Function_Return
47061>>>>>        End
47061>>>>>>
47061>>>>>        Get pbTrusted of ghoSQLConnectionHandler to bValue
47062>>>>>        Function_Return bValue
47063>>>>>    End_Function
47064>>>>>
47064>>>>>    Procedure Set pbSilentLogin Boolean bValue
47066>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47068>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47069>>>>>>
47069>>>>>            Procedure_Return
47070>>>>>        End
47070>>>>>>
47070>>>>>        Set pbSilentLogin of ghoSQLConnectionHandler to bValue
47071>>>>>    End_Procedure
47072>>>>>
47072>>>>>    Function pbSilentLogin Returns Boolean
47074>>>>>        Boolean bValue
47074>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47076>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47077>>>>>>
47077>>>>>            Function_Return
47078>>>>>        End
47078>>>>>>
47078>>>>>        Get pbSilentLogin of ghoSQLConnectionHandler to bValue
47079>>>>>        Function_Return bValue
47080>>>>>    End_Function
47081>>>>>
47081>>>>>    Procedure Set psConnectionID String sValue
47083>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47085>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47086>>>>>>
47086>>>>>            Procedure_Return
47087>>>>>        End
47087>>>>>>
47087>>>>>        Set psConnectionID of ghoSQLConnectionHandler to sValue
47088>>>>>    End_Procedure
47089>>>>>
47089>>>>>    Function psConnectionID Returns String
47091>>>>>        String sValue
47091>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47093>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47094>>>>>>
47094>>>>>            Function_Return
47095>>>>>        End
47095>>>>>>
47095>>>>>        Get psConnectionID of ghoSQLConnectionHandler to sValue
47096>>>>>        Function_Return sValue
47097>>>>>    End_Function
47098>>>>>
47098>>>>>    Procedure Set psConnectionString String sValue
47100>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47102>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47103>>>>>>
47103>>>>>            Procedure_Return
47104>>>>>        End
47104>>>>>>
47104>>>>>        Set psConnectionString of ghoSQLConnectionHandler to sValue
47105>>>>>    End_Procedure
47106>>>>>
47106>>>>>    Function psConnectionString Returns String
47108>>>>>        String sValue
47108>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47110>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47111>>>>>>
47111>>>>>            Function_Return
47112>>>>>        End
47112>>>>>>
47112>>>>>        Get psConnectionString of ghoSQLConnectionHandler to sValue
47113>>>>>        Function_Return sValue
47114>>>>>    End_Function
47115>>>>>
47115>>>>>    // The normal connection string looks something like this;
47115>>>>>    // SERVER=.\SQLEXPRESS; DATABASE=OrderEntry; TRUSTED_CONNECTION=Yes; ,0
47115>>>>>    // ...and the full connection string looks like this;
47115>>>>>    // DFConnectionId OrderEntry, SERVER=.\SQLEXPRESS; DATABASE=OrderEntry; TRUSTED_CONNECTION=Yes; ,0
47115>>>>>    Function psFullConnectionString Returns String
47117>>>>>        String sConnectionID sConnectionString
47117>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47119>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47120>>>>>>
47120>>>>>            Function_Return
47121>>>>>        End
47121>>>>>>
47121>>>>>        Get psConnectionID     of ghoSQLConnectionHandler to sConnectionID
47122>>>>>        Move (Trim(sConnectionID)) to sConnectionID
47123>>>>>        Get psConnectionString of ghoSQLConnectionHandler to sConnectionString
47124>>>>>        Function_Return (CS_SQLConnectionIDText * sConnectionID + "," * String(sConnectionString))
47125>>>>>    End_Function
47126>>>>>
47126>>>>>    Function piConnectionOptions Returns Integer
47128>>>>>        Integer iValue
47128>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47130>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47131>>>>>>
47131>>>>>            Function_Return
47132>>>>>        End
47132>>>>>>
47132>>>>>        Get piConnectionOptions of ghoSQLConnectionHandler to iValue
47133>>>>>        Function_Return iValue
47134>>>>>    End_Function
47135>>>>>
47135>>>>>    Procedure Set psSchema String sValue
47137>>>>>        tSQLConnection SQLConnection
47137>>>>>        tSQLConnection SQLConnection
47137>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47139>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47140>>>>>>
47140>>>>>            Procedure_Return
47141>>>>>        End
47141>>>>>>
47141>>>>>        Set psSchema of ghoSQLConnectionHandler to sValue
47142>>>>>    End_Procedure
47143>>>>>
47143>>>>>    Function psSchema Returns String
47145>>>>>        String sRetval
47145>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47147>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47148>>>>>>
47148>>>>>            Function_Return
47149>>>>>        End
47149>>>>>>
47149>>>>>        Get psSchema of ghoSQLConnectionHandler to sRetval
47150>>>>>        Function_Return sRetval
47151>>>>>    End_Function
47152>>>>>
47152>>>>>    Procedure Set psBaseTableSpace String sValue
47154>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47156>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47157>>>>>>
47157>>>>>            Procedure_Return
47158>>>>>        End
47158>>>>>>
47158>>>>>        Set psBaseTableSpace of ghoSQLConnectionHandler to sValue
47159>>>>>    End_Procedure
47160>>>>>
47160>>>>>    Function psBaseTableSpace Returns String
47162>>>>>        String sRetval
47162>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47164>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47165>>>>>>
47165>>>>>            Function_Return
47166>>>>>        End
47166>>>>>>
47166>>>>>        Get psBaseTableSpace of ghoSQLConnectionHandler to sRetval
47167>>>>>        Function_Return sRetval
47168>>>>>    End_Function
47169>>>>>
47169>>>>>    Procedure Set psLongTableSpace String sValue
47171>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47173>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47174>>>>>>
47174>>>>>            Procedure_Return
47175>>>>>        End
47175>>>>>>
47175>>>>>        Set psLongTableSpace of ghoSQLConnectionHandler to sValue
47176>>>>>    End_Procedure
47177>>>>>
47177>>>>>    Function psLongTableSpace Returns String
47179>>>>>        String sRetval
47179>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47181>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47182>>>>>>
47182>>>>>            Function_Return
47183>>>>>        End
47183>>>>>>
47183>>>>>        Get psLongTableSpace of ghoSQLConnectionHandler to sRetval
47184>>>>>        Function_Return sRetval
47185>>>>>    End_Function
47186>>>>>
47186>>>>>    Procedure Set psIndexTableSpace String sValue
47188>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47190>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47191>>>>>>
47191>>>>>            Procedure_Return
47192>>>>>        End
47192>>>>>>
47192>>>>>        Set psIndexTableSpace of ghoSQLConnectionHandler to sValue
47193>>>>>    End_Procedure
47194>>>>>
47194>>>>>    Function psIndexTableSpace Returns String
47196>>>>>        String sRetval
47196>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47198>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47199>>>>>>
47199>>>>>            Function_Return
47200>>>>>        End
47200>>>>>>
47200>>>>>        Get psIndexTableSpace of ghoSQLConnectionHandler to sRetval
47201>>>>>        Function_Return sRetval
47202>>>>>    End_Function
47203>>>>>
47203>>>>>    Procedure Set pbUseConnectionID Boolean bState
47205>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47207>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47208>>>>>>
47208>>>>>            Procedure_Return
47209>>>>>        End
47209>>>>>>
47209>>>>>        Set pbUseConnectionID of ghoSQLConnectionHandler to bState
47210>>>>>    End_Procedure
47211>>>>>
47211>>>>>    Function pbUseConnectionID Returns Boolean
47213>>>>>        Boolean bState
47213>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47215>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47216>>>>>>
47216>>>>>            Function_Return
47217>>>>>        End
47217>>>>>>
47217>>>>>        Get pbUseConnectionID of ghoSQLConnectionHandler to bState
47218>>>>>        Function_Return bState
47219>>>>>    End_Function
47220>>>>>
47220>>>>>    Procedure Set pbToANSI Boolean bState
47222>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47224>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47225>>>>>>
47225>>>>>            Procedure_Return
47226>>>>>        End
47226>>>>>>
47226>>>>>        Set pbToANSI of ghoSQLConnectionHandler to bState
47227>>>>>    End_Procedure
47228>>>>>
47228>>>>>    Function pbToANSI Returns Boolean
47230>>>>>        Boolean bState
47230>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47232>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47233>>>>>>
47233>>>>>            Function_Return
47234>>>>>        End
47234>>>>>>
47234>>>>>        Get pbToANSI of ghoSQLConnectionHandler to bState
47235>>>>>        Function_Return bState
47236>>>>>    End_Function
47237>>>>>
47237>>>>>    Procedure Set pbRecnum Boolean bState
47239>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47241>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47242>>>>>>
47242>>>>>            Procedure_Return
47243>>>>>        End
47243>>>>>>
47243>>>>>        Set pbRecnum of ghoSQLConnectionHandler to bState
47244>>>>>    End_Procedure
47245>>>>>
47245>>>>>    Function pbRecnum Returns Boolean
47247>>>>>        Boolean bState
47247>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47249>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47250>>>>>>
47250>>>>>            Function_Return
47251>>>>>        End
47251>>>>>>
47251>>>>>        Get pbRecnum of ghoSQLConnectionHandler to bState
47252>>>>>        Function_Return bState
47253>>>>>    End_Function
47254>>>>>
47254>>>>>    Procedure Set pbCopyData Boolean bState
47256>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47258>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47259>>>>>>
47259>>>>>            Procedure_Return
47260>>>>>        End
47260>>>>>>
47260>>>>>        Set pbCopyData of ghoSQLConnectionHandler to bState
47261>>>>>    End_Procedure
47262>>>>>
47262>>>>>    Function pbCopyData Returns Boolean
47264>>>>>        Boolean bState
47264>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47266>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47267>>>>>>
47267>>>>>            Function_Return
47268>>>>>        End
47268>>>>>>
47268>>>>>        Get pbCopyData of ghoSQLConnectionHandler to bState
47269>>>>>        Function_Return bState
47270>>>>>    End_Function
47271>>>>>
47271>>>>>    Procedure Set pbApiTableUpdateAuto Boolean bState
47273>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47275>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47276>>>>>>
47276>>>>>            Procedure_Return
47277>>>>>        End
47277>>>>>>
47277>>>>>        Set pbApiTableUpdateAuto of ghoSQLConnectionHandler to bState
47278>>>>>    End_Procedure
47279>>>>>
47279>>>>>    Function pbApiTableUpdateAuto Returns Boolean
47281>>>>>        Boolean bState
47281>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47283>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47284>>>>>>
47284>>>>>            Function_Return
47285>>>>>        End
47285>>>>>>
47285>>>>>        Get pbApiTableUpdateAuto of ghoSQLConnectionHandler to bState
47286>>>>>        Function_Return bState
47287>>>>>    End_Function
47288>>>>>
47288>>>>>    Procedure Set pbCompareDate_DateTime Boolean bState
47290>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47292>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47293>>>>>>
47293>>>>>            Procedure_Return
47294>>>>>        End
47294>>>>>>
47294>>>>>        Set pbCompareDate_DateTime of ghoSQLConnectionHandler to bState
47295>>>>>    End_Procedure
47296>>>>>
47296>>>>>    Function pbCompareDate_DateTime Returns Boolean
47298>>>>>        Boolean bState
47298>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47300>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47301>>>>>>
47301>>>>>            Function_Return
47302>>>>>        End
47302>>>>>>
47302>>>>>        Get pbCompareDate_DateTime of ghoSQLConnectionHandler to bState
47303>>>>>        Function_Return bState
47304>>>>>    End_Function
47305>>>>>
47305>>>>>    Procedure Set pbCompareIndexAscending Boolean bState
47307>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47309>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47310>>>>>>
47310>>>>>            Procedure_Return
47311>>>>>        End
47311>>>>>>
47311>>>>>        Set pbCompareIndexAscending of ghoSQLConnectionHandler to bState
47312>>>>>    End_Procedure
47313>>>>>
47313>>>>>    Function pbCompareIndexAscending Returns Boolean
47315>>>>>        Boolean bState
47315>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47317>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47318>>>>>>
47318>>>>>            Function_Return
47319>>>>>        End
47319>>>>>>
47319>>>>>        Get pbCompareIndexAscending of ghoSQLConnectionHandler to bState
47320>>>>>        Function_Return bState
47321>>>>>    End_Function
47322>>>>>
47322>>>>>    Procedure Set pbCompareIndexUppercase Boolean bState
47324>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47326>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47327>>>>>>
47327>>>>>            Procedure_Return
47328>>>>>        End
47328>>>>>>
47328>>>>>        Set pbCompareIndexUppercase of ghoSQLConnectionHandler to bState
47329>>>>>    End_Procedure
47330>>>>>
47330>>>>>    Function pbCompareIndexUppercase Returns Boolean
47332>>>>>        Boolean bState
47332>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47334>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47335>>>>>>
47335>>>>>            Function_Return
47336>>>>>        End
47336>>>>>>
47336>>>>>        Get pbCompareIndexUppercase of ghoSQLConnectionHandler to bState
47337>>>>>        Function_Return bState
47338>>>>>    End_Function
47339>>>>>
47339>>>>>    Procedure Set psDriverDefaultValueASCII String sValue
47341>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47343>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47344>>>>>>
47344>>>>>            Procedure_Return
47345>>>>>        End
47345>>>>>>
47345>>>>>        Set psDriverDefaultValueASCII of ghoSQLConnectionHandler to sValue
47346>>>>>    End_Procedure
47347>>>>>
47347>>>>>    Function psDriverDefaultValueASCII Returns String
47349>>>>>        String sRetval
47349>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47351>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47352>>>>>>
47352>>>>>            Function_Return
47353>>>>>        End
47353>>>>>>
47353>>>>>        Get psDriverDefaultValueASCII of ghoSQLConnectionHandler to sRetval
47354>>>>>        Function_Return sRetval
47355>>>>>    End_Function
47356>>>>>
47356>>>>>    Procedure Set psDriverDefaultValueBinary String sValue
47358>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47360>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47361>>>>>>
47361>>>>>            Procedure_Return
47362>>>>>        End
47362>>>>>>
47362>>>>>        Set psDriverDefaultValueBinary of ghoSQLConnectionHandler to sValue
47363>>>>>    End_Procedure
47364>>>>>
47364>>>>>    Function psDriverDefaultValueBinary Returns String
47366>>>>>        String sRetval
47366>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47368>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47369>>>>>>
47369>>>>>            Function_Return
47370>>>>>        End
47370>>>>>>
47370>>>>>        Get psDriverDefaultValueBinary of ghoSQLConnectionHandler to sRetval
47371>>>>>        Function_Return sRetval
47372>>>>>    End_Function
47373>>>>>
47373>>>>>    Procedure Set psDriverDefaultValueDate String sValue
47375>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47377>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47378>>>>>>
47378>>>>>            Procedure_Return
47379>>>>>        End
47379>>>>>>
47379>>>>>        Set psDriverDefaultValueDate of ghoSQLConnectionHandler to sValue
47380>>>>>    End_Procedure
47381>>>>>
47381>>>>>    Function psDriverDefaultValueDate Returns String
47383>>>>>        String sRetval
47383>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47385>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47386>>>>>>
47386>>>>>            Function_Return
47387>>>>>        End
47387>>>>>>
47387>>>>>        Get psDriverDefaultValueDate of ghoSQLConnectionHandler to sRetval
47388>>>>>        Function_Return sRetval
47389>>>>>    End_Function
47390>>>>>
47390>>>>>    Procedure Set psDriverDefaultValueDateTime String sValue
47392>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47394>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47395>>>>>>
47395>>>>>            Procedure_Return
47396>>>>>        End
47396>>>>>>
47396>>>>>        Set psDriverDefaultValueDateTime of ghoSQLConnectionHandler to sValue
47397>>>>>    End_Procedure
47398>>>>>
47398>>>>>    Function psDriverDefaultValueDateTime Returns String
47400>>>>>        String sRetval
47400>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47402>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47403>>>>>>
47403>>>>>            Function_Return
47404>>>>>        End
47404>>>>>>
47404>>>>>        Get psDriverDefaultValueDateTime of ghoSQLConnectionHandler to sRetval
47405>>>>>        Function_Return sRetval
47406>>>>>    End_Function
47407>>>>>
47407>>>>>    Procedure Set psDriverDefaultValueNumeric String sValue
47409>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47411>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47412>>>>>>
47412>>>>>            Procedure_Return
47413>>>>>        End
47413>>>>>>
47413>>>>>        Set psDriverDefaultValueNumeric of ghoSQLConnectionHandler to sValue
47414>>>>>    End_Procedure
47415>>>>>
47415>>>>>    Function psDriverDefaultValueNumeric Returns String
47417>>>>>        String sRetval
47417>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47419>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47420>>>>>>
47420>>>>>            Function_Return
47421>>>>>        End
47421>>>>>>
47421>>>>>        Get psDriverDefaultValueNumeric of ghoSQLConnectionHandler to sRetval
47422>>>>>        Function_Return sRetval
47423>>>>>    End_Function
47424>>>>>
47424>>>>>    Procedure Set psDriverDefaultValueText String sValue
47426>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47428>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47429>>>>>>
47429>>>>>            Procedure_Return
47430>>>>>        End
47430>>>>>>
47430>>>>>        Set psDriverDefaultValueText of ghoSQLConnectionHandler to sValue
47431>>>>>    End_Procedure
47432>>>>>
47432>>>>>    Function psDriverDefaultValueText Returns String
47434>>>>>        String sRetval
47434>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47436>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47437>>>>>>
47437>>>>>            Function_Return
47438>>>>>        End
47438>>>>>>
47438>>>>>        Get psDriverDefaultValueText of ghoSQLConnectionHandler to sRetval
47439>>>>>        Function_Return sRetval
47440>>>>>    End_Function
47441>>>>>
47441>>>>>    Procedure Set pbDriverDefaultNullableASCII Boolean bState
47443>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47445>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47446>>>>>>
47446>>>>>            Procedure_Return
47447>>>>>        End
47447>>>>>>
47447>>>>>        Set pbDriverDefaultNullableASCII of ghoSQLConnectionHandler to bState
47448>>>>>    End_Procedure
47449>>>>>
47449>>>>>    Function pbDriverDefaultNullableASCII Returns Boolean
47451>>>>>        Boolean bState
47451>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47453>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47454>>>>>>
47454>>>>>            Function_Return
47455>>>>>        End
47455>>>>>>
47455>>>>>        Get pbDriverDefaultNullableASCII of ghoSQLConnectionHandler to bState
47456>>>>>        Function_Return bState
47457>>>>>    End_Function
47458>>>>>
47458>>>>>    Procedure Set pbDriverDefaultNullableBinary Boolean bState
47460>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47462>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47463>>>>>>
47463>>>>>            Procedure_Return
47464>>>>>        End
47464>>>>>>
47464>>>>>        Set pbDriverDefaultNullableBinary of ghoSQLConnectionHandler to bState
47465>>>>>    End_Procedure
47466>>>>>
47466>>>>>    Function pbDriverDefaultNullableBinary Returns Boolean
47468>>>>>        Boolean bState
47468>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47470>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47471>>>>>>
47471>>>>>            Function_Return
47472>>>>>        End
47472>>>>>>
47472>>>>>        Get pbDriverDefaultNullableBinary of ghoSQLConnectionHandler to bState
47473>>>>>        Function_Return bState
47474>>>>>    End_Function
47475>>>>>
47475>>>>>    Procedure Set pbDriverDefaultNullableDate Boolean bState
47477>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47479>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47480>>>>>>
47480>>>>>            Procedure_Return
47481>>>>>        End
47481>>>>>>
47481>>>>>        Set pbDriverDefaultNullableDate of ghoSQLConnectionHandler to bState
47482>>>>>    End_Procedure
47483>>>>>
47483>>>>>    Function pbDriverDefaultNullableDate Returns Boolean
47485>>>>>        Boolean bState
47485>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47487>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47488>>>>>>
47488>>>>>            Function_Return
47489>>>>>        End
47489>>>>>>
47489>>>>>        Get pbDriverDefaultNullableDate of ghoSQLConnectionHandler to bState
47490>>>>>        Function_Return bState
47491>>>>>    End_Function
47492>>>>>
47492>>>>>    Procedure Set pbDriverDefaultNullableDateTime Boolean bState
47494>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47496>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47497>>>>>>
47497>>>>>            Procedure_Return
47498>>>>>        End
47498>>>>>>
47498>>>>>        Set pbDriverDefaultNullableDateTime of ghoSQLConnectionHandler to bState
47499>>>>>    End_Procedure
47500>>>>>
47500>>>>>    Function pbDriverDefaultNullableDateTime Returns Boolean
47502>>>>>        Boolean bState
47502>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47504>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47505>>>>>>
47505>>>>>            Function_Return
47506>>>>>        End
47506>>>>>>
47506>>>>>        Get pbDriverDefaultNullableDateTime of ghoSQLConnectionHandler to bState
47507>>>>>        Function_Return bState
47508>>>>>    End_Function
47509>>>>>
47509>>>>>    Procedure Set pbDriverDefaultNullableNumeric Boolean bState
47511>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47513>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47514>>>>>>
47514>>>>>            Procedure_Return
47515>>>>>        End
47515>>>>>>
47515>>>>>        Set pbDriverDefaultNullableNumeric of ghoSQLConnectionHandler to bState
47516>>>>>    End_Procedure
47517>>>>>
47517>>>>>    Function pbDriverDefaultNullableNumeric Returns Boolean
47519>>>>>        Boolean bState
47519>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47521>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47522>>>>>>
47522>>>>>            Function_Return
47523>>>>>        End
47523>>>>>>
47523>>>>>        Get pbDriverDefaultNullableNumeric of ghoSQLConnectionHandler to bState
47524>>>>>        Function_Return bState
47525>>>>>    End_Function
47526>>>>>
47526>>>>>    Procedure Set pbDriverDefaultNullableText Boolean bState
47528>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47530>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47531>>>>>>
47531>>>>>            Procedure_Return
47532>>>>>        End
47532>>>>>>
47532>>>>>        Set pbDriverDefaultNullableText of ghoSQLConnectionHandler to bState
47533>>>>>    End_Procedure
47534>>>>>
47534>>>>>    Function pbDriverDefaultNullableText Returns Boolean
47536>>>>>        Boolean bState
47536>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47538>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47539>>>>>>
47539>>>>>            Function_Return
47540>>>>>        End
47540>>>>>>
47540>>>>>        Get pbDriverDefaultNullableText of ghoSQLConnectionHandler to bState
47541>>>>>        Function_Return bState
47542>>>>>    End_Function
47543>>>>>
47543>>>>>    // Note: If the psDriverID + other connection properties are to be changed,
47543>>>>>    //       the psDriverID *must* be the first property that gets changed!
47543>>>>>    //       Otherwise errors might be raised by the driver when e.g. the format
47543>>>>>    //       for a connection string has the wrong format for that driver.
47543>>>>>    Procedure Set psDriverID String sValue
47545>>>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
47546>>>>>        Delegate Set psDriverID to sValue
47548>>>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
47549>>>>>        Set psDriverID of ghoSQLConnectionHandler to sValue
47550>>>>>    End_Procedure
47551>>>>>
47551>>>>>    Function psDriverID Returns String
47553>>>>>        String sDriverID
47553>>>>>
47553>>>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
47554>>>>>        // This should get it from the parent object (when using the cDbUpdateHandler class)
47554>>>>>        Delegate Get psDriverID to sDriverID
47556>>>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
47557>>>>>        Move False to Err
47558>>>>>
47558>>>>>        // ...and in case it didn't use property of this class. Then the library is
47558>>>>>        // probably used as "utilites" from a special made program and
47558>>>>>        // the ghoSQLConnectionHandler must have been setup
47558>>>>>        If (sDriverID = "") Begin
47560>>>>>            Get psDriverID of ghoSQLConnectionHandler to sDriverID
47561>>>>>        End
47561>>>>>>
47561>>>>>        Function_Return sDriverID
47562>>>>>    End_Function
47563>>>>>
47563>>>>>    Procedure Set piDbType Integer iValue
47565>>>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
47566>>>>>        Delegate Set piDbType to iValue
47568>>>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
47569>>>>>        Set piDbType of ghoSQLConnectionHandler to iValue
47570>>>>>    End_Procedure
47571>>>>>
47571>>>>>    Function piDbType Returns Integer
47573>>>>>        Integer iRetval
47573>>>>>        Get piDbType of ghoSQLConnectionHandler to iRetval
47574>>>>>        Function_Return iRetval
47575>>>>>    End_Function
47576>>>>>
47576>>>>>    // Returns the index for the passed sTableName
47576>>>>>    // Returns >= 0 if successful. It is e.g. needed to get the SchemaName for a table.
47576>>>>>    Function _SqlUtilEnumerateTableIndex String sTableName String sDriverID Returns Integer
47578>>>>>        Integer iIndex iSize iCount iItem
47578>>>>>        String[] asTablesArray
47579>>>>>        String sDatabase sSchema sVal sConnectionString
47579>>>>>
47579>>>>>        Move -1 to iIndex
47580>>>>>        Get psConnectionString to sConnectionString
47581>>>>>        Get psDatabase to sDatabase
47582>>>>>        Get psSchema   to sSchema
47583>>>>>        Get _SqlUtilEnumerateTables sDriverID sDatabase sSchema to asTablesArray
47584>>>>>        Move (SearchArray(sTableName, asTablesArray, Desktop, (RefFunc(DFSTRICMP)))) to iItem
47585>>>>>        If (iItem <> -1) Begin
47587>>>>>            Move iItem to iIndex
47588>>>>>        End
47588>>>>>>
47588>>>>>        Function_Return iIndex
47589>>>>>    End_Function
47590>>>>>
47590>>>>>    // Returns all schemas as a string array for the passed driver id.
47590>>>>>    Function SqlUtilEnumerateSchemas String sDriverID Returns String[]
47592>>>>>        String[] sReturnArray
47593>>>>>        Boolean bOK
47593>>>>>
47593>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47594>>>>>        If (bOK = False) Begin
47596>>>>>            Function_Return sReturnArray
47597>>>>>        End
47597>>>>>>
47597>>>>>
47597>>>>>        Case Begin
47597>>>>>            Case (sDriverID = DB2_DRV_ID)
47599>>>>>                Get _SqlEnumerateEsqlDAW "select schemaname from syscat.schemata" 1 to sReturnArray
47600>>>>>                Case Break
47601>>>>>
47601>>>>>            Case Else
47601>>>>>                Error DFERR_PROGRAM "Unsupported driver passed to SqlUtilEnumerateSchemas function."
47602>>>>>>
47602>>>>>                Case Break
47603>>>>>        Case End
47603>>>>>
47603>>>>>        Function_Return sReturnArray
47604>>>>>    End_Function
47605>>>>>
47605>>>>>    // Returns a string array with all tables for the current database.
47605>>>>>    Function _SqlUtilEnumerateTables String sDriverID String sDatabase String sSchema Returns String[]
47607>>>>>        String[] asReturnArray
47608>>>>>        String sConnectionString sSelect
47608>>>>>        Integer iSize iCount iDbType
47608>>>>>        Boolean bOK
47608>>>>>
47608>>>>>        If (sDriverID = DATAFLEX_ID) Begin
47610>>>>>            Function_Return asReturnArray
47611>>>>>        End
47611>>>>>>
47611>>>>>
47611>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47612>>>>>        If (bOK = False) Begin
47614>>>>>            Function_Return asReturnArray
47615>>>>>        End
47615>>>>>>
47615>>>>>        If (sSchema = "") Begin
47617>>>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
47618>>>>>        End
47618>>>>>>
47618>>>>>
47618>>>>>        Get psConnectionString to sConnectionString
47619>>>>>
47619>>>>>        // We need to treat DAW's ODBC driver a bit different, as the output depends on
47619>>>>>        // the dbType.
47619>>>>>        Get piDbType to iDbType
47620>>>>>        If (sDriverID = ODBC_DRV_ID) Begin
47622>>>>>            If (iDbType = EN_DbTypeMSSQL) Begin
47624>>>>>                Move MSSQLDRV_ID to sDriverID
47625>>>>>            End
47625>>>>>>
47625>>>>>            If (iDbType = EN_DbTypeDB2) Begin
47627>>>>>                Move DB2_DRV_ID to sDriverID
47628>>>>>            End
47628>>>>>>
47628>>>>>            If (iDbType = EN_DbTypePostgre) Begin
47630>>>>>                Move ODBC_DRV_ID to sDriverID
47631>>>>>            End
47631>>>>>>
47631>>>>>        End
47631>>>>>>
47631>>>>>
47631>>>>>        Case Begin
47631>>>>>            Case (sDriverID = MSSQLDRV_ID)
47633>>>>>                Get _SqlTableArrayDAW to asReturnArray
47634>>>>>                Case Break
47635>>>>>
47635>>>>>            Case (sDriverID = DB2_DRV_ID)
47638>>>>>                Get _SqlTableArrayDAW to asReturnArray
47639>>>>>                Case Break
47640>>>>>
47640>>>>>            Case (sDriverID = ODBC_DRV_ID)
47643>>>>>                Get _SqlTableArrayDAW to asReturnArray
47644>>>>>                Case Break
47645>>>>>
47645>>>>>            Case Else
47645>>>>>                Error DFERR_PROGRAM "Unsupported driver passed to _SqlUtilEnumerateTables function."
47646>>>>>>
47646>>>>>                Case Break
47647>>>>>        Case End
47647>>>>>
47647>>>>>        Function_Return asReturnArray
47648>>>>>    End_Function
47649>>>>>
47649>>>>>    // Returns all table spaces as a string array for the passed driver id.
47649>>>>>    Function _SqlUtilEnumerateTablespaces String sDriverID Returns String[]
47651>>>>>        String[] sReturnArray
47652>>>>>        Boolean bOK
47652>>>>>
47652>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47653>>>>>        If (bOK = False) Begin
47655>>>>>            Function_Return sReturnArray
47656>>>>>        End
47656>>>>>>
47656>>>>>
47656>>>>>        Case Begin
47656>>>>>            Case (sDriverID = DB2_DRV_ID)
47658>>>>>                Get _SqlEnumerateEsqlDAW "select tablespace_name from dba_tablespaces" 1 to sReturnArray
47659>>>>>                Case Break
47660>>>>>
47660>>>>>            Case Else
47660>>>>>                Error DFERR_PROGRAM "Unsupported driver passed to _SqlUtilEnumerateTablespaces function."
47661>>>>>>
47661>>>>>                Case Break
47662>>>>>        Case End
47662>>>>>
47662>>>>>        Function_Return sReturnArray
47663>>>>>    End_Function
47664>>>>>
47664>>>>>    // Returns a string array with all table columns/fields for the passed table handle and driver id.
47664>>>>>    Function _SqlUtilEnumerateColumnsByHandle String sDriverID Handle hTable Returns String[]
47666>>>>>        String[] asReturnArray
47667>>>>>        String sRootName sTableName
47667>>>>>        
47667>>>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
47670>>>>>        Get _TableNameOnly sRootName to sTableName
47671>>>>>        Get _SqlUtilEnumerateColumns sDriverID sTableName to asReturnArray
47672>>>>>        Function_Return asReturnArray
47673>>>>>    End_Function
47674>>>>>
47674>>>>>    // Returns a string array with all table columns/fields for the passed table handle and driver id.
47674>>>>>    Function _SqlUtilEnumerateColumns String sDriverID String sTableName Returns String[]
47676>>>>>        String[] sReturnArray
47677>>>>>        String sConnectionString sSelect sSchema
47677>>>>>        Boolean bOK
47677>>>>>        Integer iDbType
47677>>>>>
47677>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47678>>>>>        If (bOK = False) Begin
47680>>>>>            Error DFERR_PROGRAM ("Unsupported driver. A list of table columns could not be retrieved for:" * sDriverID + ".")
47681>>>>>>
47681>>>>>            Function_Return sReturnArray
47682>>>>>        End
47682>>>>>>
47682>>>>>
47682>>>>>        Get psConnectionString to sConnectionString
47683>>>>>        Get psSchema to sSchema
47684>>>>>
47684>>>>>        // We need to treat DAW's ODBC driver a bit different, as the output depends on
47684>>>>>        // the dbType.
47684>>>>>        Get piDbType to iDbType
47685>>>>>
47685>>>>>        Case Begin
47685>>>>>            Case (sDriverID = ODBC_DRV_ID)
47687>>>>>                If (iDbType = EN_DbTypeMySQL) Begin
47689>>>>>                    Move ("SHOW COLUMNS FROM" * sTableName) to sSelect
47690>>>>>                End
47690>>>>>>
47690>>>>>                If (iDbType = EN_DbTypePostgre) Begin
47692>>>>>                    Move ("select column_name, data_type, character_maximum_length from INFORMATION_SCHEMA.COLUMNS where table_name = '" +sTableName + "'") to sSelect
47693>>>>>                End
47693>>>>>>
47693>>>>>                If (iDbType = EN_DbTypeMSSQL) Begin
47695>>>>>                    Move ("select name from sys.columns where [object_id] = object_id('dbo." + sTableName + "')") to sSelect
47696>>>>>                End
47696>>>>>>
47696>>>>>
47696>>>>>                Get _SqlEnumerateEsqlDAW sSelect 1 to sReturnArray
47697>>>>>                Case Break
47698>>>>>
47698>>>>>            Case (sDriverID = MSSQLDRV_ID)
47701>>>>>                Move ("select name from sys.columns where [object_id] = object_id('dbo." + sTableName + "')") to sSelect
47702>>>>>                Get _SqlEnumerateEsqlDAW sSelect 1 to sReturnArray
47703>>>>>                Case Break
47704>>>>>
47704>>>>>            Case (sDriverID = DB2_DRV_ID)
47707>>>>>                Move ("SELECT colname from syscat.columns WHERE tabschema = '" + sSchema + "'" * "AND tabname = '" + sTableName + "'") to sSelect
47708>>>>>                Get _SqlEnumerateEsqlDAW sSelect 1 to sReturnArray
47709>>>>>                Case Break
47710>>>>>
47710>>>>>            Case Else
47710>>>>>                Error DFERR_PROGRAM "Unsupported driver passed to _SqlUtilEnumerateColumns function."
47711>>>>>>
47711>>>>>                Case Break
47712>>>>>        Case End
47712>>>>>
47712>>>>>        Function_Return sReturnArray
47713>>>>>    End_Function
47714>>>>>
47714>>>>>
47714>>>>>    // Returns a string array with all table indexes for the passed table handle and driver id.
47714>>>>>    Function _SqlUtilEnumerateIndexes String sTableName String sDriverID Returns String[]
47716>>>>>        String[] asReturnArray asReturnArray2
47718>>>>>        String sConnectionString sSelect sSchema
47718>>>>>        Boolean bOK
47718>>>>>        Integer iCount iSize
47718>>>>>
47718>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47719>>>>>        If (bOK = False) Begin
47721>>>>>            Error DFERR_PROGRAM ("Unsupported driver. A list of table columns could not be retrieved for:" * sDriverID + ".")
47722>>>>>>
47722>>>>>            Function_Return asReturnArray
47723>>>>>        End
47723>>>>>>
47723>>>>>
47723>>>>>        Get psConnectionString to sConnectionString
47724>>>>>        Get psSchema to sSchema
47725>>>>>
47725>>>>>        Case Begin
47725>>>>>            Case (sDriverID = MSSQLDRV_ID)
47727>>>>>                Move ("select * from sys.indexes where object_id = (select object_id from sys.objects where name = '" + sTableName + "')") to sSelect
47728>>>>>                Get _SqlEnumerateEsqlDAW sSelect 2 to asReturnArray
47729>>>>>                Case Break
47730>>>>>
47730>>>>>            Case (sDriverID = DB2_DRV_ID)
47733>>>>>                Error "Not implemented yet! The select statement has not been finalized."
47734>>>>>>
47734>>>>>//                Move () to sSelect
47734>>>>>//                Get _SqlEnumerateEsqlDAW sSelect 2 to asReturnArray
47734>>>>>                Case Break
47735>>>>>
47735>>>>>            Case Else
47735>>>>>                Error DFERR_PROGRAM "Unsupported driver passed to _SqlUtilEnumerateIndexes function."
47736>>>>>>
47736>>>>>                Case Break
47737>>>>>        Case End
47737>>>>>
47737>>>>>        Move (SizeOfArray(asReturnArray)) to iSize
47738>>>>>        Decrement iSize
47739>>>>>        For iCount from 0 to iSize
47745>>>>>>
47745>>>>>            If (Trim(asReturnArray[iCount]) <> "") Begin
47747>>>>>                Move asReturnArray[iCount] to asReturnArray2[SizeOfArray(asReturnArray2)]
47748>>>>>            End
47748>>>>>>
47748>>>>>        Loop
47749>>>>>>
47749>>>>>
47749>>>>>        Function_Return asReturnArray2
47750>>>>>    End_Function
47751>>>>>
47751>>>>>    // Returns a string array with all table names the passed table handle has relation ships with.
47751>>>>>    // The format of the array is "TableName.FieldName"
47751>>>>>    Function _SqlUtilEnumerateRelations String sTableName String sDriverID Returns tSQLRelation[]
47753>>>>>        String[] sFileNameArray sFieldNameArray
47755>>>>>        tSQLRelation[] sRelationsArray
47755>>>>>        tSQLRelation[] sRelationsArray
47756>>>>>        String sConnectionString sSelect sSchema sFileName sFieldName
47756>>>>>        Boolean bOK
47756>>>>>        Integer iCount iSize iLength
47756>>>>>
47756>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47757>>>>>        If (bOK = False) Begin
47759>>>>>            Error DFERR_PROGRAM ("Unsupported driver. A list of table columns could not be retrieved for:" * sDriverID + ".")
47760>>>>>>
47760>>>>>            Function_Return sRelationsArray
47761>>>>>        End
47761>>>>>>
47761>>>>>
47761>>>>>        Get psConnectionString to sConnectionString
47762>>>>>        Get psSchema to sSchema
47763>>>>>
47763>>>>>        Case Begin
47763>>>>>            Case (sDriverID = MSSQLDRV_ID)
47765>>>>>                Move ("SELECT object_name(parent_object_id), object_name(referenced_object_id), name from sys.foreign_keys WHERE parent_object_id = object_id( '" + sTableName + "')") to sSelect
47766>>>>>                Get _SqlEnumerateEsqlDAW sSelect 2 to sFileNameArray
47767>>>>>                Get _SqlEnumerateEsqlDAW sSelect 3 to sFieldNameArray
47768>>>>>                Case Break
47769>>>>>
47769>>>>>            Case (sDriverID = DB2_DRV_ID)
47772>>>>>                Error "Not implemented yet! The select statement has not been finalized."
47773>>>>>>
47773>>>>>//                Move () to sSelect
47773>>>>>//                Get _SqlEnumerateEsqlDAW sSelect 2 to sReturnArray
47773>>>>>//                Get _SqlEnumerateEsqlDAW sSelect 3 to sFieldNameArray
47773>>>>>                Case Break
47774>>>>>
47774>>>>>            Case Else
47774>>>>>                Error DFERR_PROGRAM "Unsupported driver passed to the _SqlUtilEnumerateRelations function."
47775>>>>>>
47775>>>>>                Case Break
47776>>>>>        Case End
47776>>>>>
47776>>>>>        Move (Length(sTableName)) to iLength
47777>>>>>        Move (iLength + 4)        to iLength // The related to field key has the format "FK_TableName + FieldName"
47778>>>>>        Move (SizeOfArray(sFileNameArray)) to iSize
47779>>>>>        Decrement iSize
47780>>>>>        For iCount from 0 to iSize
47786>>>>>>
47786>>>>>            If (Trim(sFileNameArray[iCount]) <> "") Begin
47788>>>>>                Move sFileNameArray[iCount]         to sFileName
47789>>>>>                Move sFieldNameArray[iCount]        to sFieldName
47790>>>>>                Move (Mid(sFieldName, 99, iLength)) to sFieldName
47791>>>>>                Move sFileName  to sRelationsArray[iCount].sFileName
47792>>>>>                Move sFieldName to sRelationsArray[iCount].sFieldName
47793>>>>>            End
47793>>>>>>
47793>>>>>        Loop
47794>>>>>>
47794>>>>>
47794>>>>>        Function_Return sRelationsArray
47795>>>>>    End_Function
47796>>>>>
47796>>>>>    Function SqlUtilEnumerateLoggedInUsers String sDriverID String sDatabase Returns tSQLLoggedInUser[]
47798>>>>>        tSQLLoggedInUser[] SQLLoggedInUser
47798>>>>>        tSQLLoggedInUser[] SQLLoggedInUser
47799>>>>>        String[] sUsers sPrograms
47801>>>>>        String sSelect
47801>>>>>        Integer iSize iCount
47801>>>>>
47801>>>>>        Case Begin
47801>>>>>            Case (sDriverID = MSSQLDRV_ID)
47803>>>>>                Move ("SELECT RTRIM(SP.nt_username) AS Inlog, RTRIM(SP.program_name) as Programma from master.dbo.sysprocesses SP INNER JOIN master.dbo.sysdatabases SD ON SP.dbid = SD.dbid WHERE (SP.nt_username <> '') and (SP.nt_username <> 'SYSTEM') and (SD.name = '" ;                + sDatabase + "') ORDER by Inlog") to sSelect
47804>>>>>                Get _SqlEnumerateEsqlDAW sSelect 1 to sUsers
47805>>>>>                Get _SqlEnumerateEsqlDAW sSelect 2 to sPrograms
47806>>>>>                Case Break
47807>>>>>            Case Else
47807>>>>>                Error DFERR_PROGRAM ("Not implemented yet for this driver (" + sDriverID + ")")
47808>>>>>>
47808>>>>>        Case End
47808>>>>>
47808>>>>>        Move (SizeOfArray(sUsers)) to iSize
47809>>>>>        Decrement iSize
47810>>>>>        For iCount from 0 to iSize
47816>>>>>>
47816>>>>>            Move sUsers[iCount]    to SQLLoggedInUser[iCount].sUser
47817>>>>>            Move sPrograms[iCount] to SQLLoggedInUser[iCount].sProgram
47818>>>>>        Loop
47819>>>>>>
47819>>>>>
47819>>>>>        Function_Return SQLLoggedInUser
47820>>>>>    End_Function
47821>>>>>
47821>>>>>    // Returns an array with all ".int" files for the passed sDataPath, _except_ for the driver .int files;
47821>>>>>    // "MSSQLDRV.int", "DB2_DRV.int" & "ODBC_DRV.int".
47821>>>>>    Function SqlUtilEnumerateIntFiles String sDataPath Returns String[]
47823>>>>>        String[] sFilesData
47824>>>>>        Boolean bExists
47824>>>>>        Integer iCh
47824>>>>>        String sFileName sExt
47824>>>>>
47824>>>>>        Get vFolderExists sDataPath to bExists
47825>>>>>        If (bExists = True) Begin
47827>>>>>            Move (Utf8ToAnsi(Trim(sDataPath))) to sDataPath
47828>>>>>            Move ("dir:" + sDataPath)      to sDataPath
47829>>>>>            Get Seq_New_Channel to iCh  // get free channel for input
47830>>>>>            Direct_Input channel iCh sDataPath
47832>>>>>                Repeat
47832>>>>>>
47832>>>>>                    Readln channel iCh sFileName
47834>>>>>                    Get ParseFileExtension sFileName to sExt
47835>>>>>                    If (Uppercase(sExt) = "INT") Begin
47837>>>>>                        If (not(Uppercase(sFileName) contains "MSSQLDRV" and Uppercase(sFileName) contains "DB2_DRV" and Uppercase(sFileName) contains "ODBC_DRV")) Begin
47839>>>>>                            Move sFileName to sFilesData[SizeOfArray(sFilesData)]
47840>>>>>                        End
47840>>>>>>
47840>>>>>                    End
47840>>>>>>
47840>>>>>                Until (SeqEof = True)
47842>>>>>            Close_Input channel iCh
47844>>>>>            Send Seq_Release_Channel iCh
47845>>>>>        End
47845>>>>>>
47845>>>>>        Function_Return sFilesData
47846>>>>>    End_Function
47847>>>>>
47847>>>>>    // Only done for MSSQLDRV_ID so far...
47847>>>>>    Function _SqlEnumerateDatabaseCollations String sDriverID Returns String[]
47849>>>>>        String sSQL sConnectionID sConnectionString sSelect sName sPre
47849>>>>>        String sDescription sFrom sSys sValue sPrevious
47849>>>>>        Handle hStmt hoSQLManager hoSQLConnect
47849>>>>>        Integer iFetchResult iRows iColumn iPos
47849>>>>>        tSQLConnection SQLConnection
47849>>>>>        tSQLConnection SQLConnection
47849>>>>>        String[] asCollations
47850>>>>>        
47850>>>>>        If (sDriverID = "") Begin
47852>>>>>            Error DFERR_PROGRAM "The database driver ID was not passed as a parameter to the 'SqlDatabaseCollationChange' function"
47853>>>>>>
47853>>>>>            Function_Return asCollations
47854>>>>>        End
47854>>>>>>
47854>>>>>
47854>>>>>        // Only done for MSSQLDRV_ID so far...
47854>>>>>        If (sDriverID <> MSSQLDRV_ID) Begin
47856>>>>>            Function_Return asCollations
47857>>>>>        End                 
47857>>>>>>
47857>>>>>
47857>>>>>        Get phoSQLManager to hoSQLManager
47858>>>>>        Get psConnectionID     to sConnectionID
47859>>>>>        Get psConnectionString to sConnectionString
47860>>>>>        Move 0 to LastErr
47861>>>>>
47861>>>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
47862>>>>>        Get SqlConnect of hoSQLManager sDriverID sConnectionString to hoSQLConnect
47863>>>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
47864>>>>>        If (LastErr = CLIERR_LOGIN_UNSUCCESSFUL) Begin
47866>>>>>            Error DFERR_PROGRAM ("Login failed to the database server. The following connect string was used:\n" + sConnectionString)
47867>>>>>>
47867>>>>>            Function_Return asCollations
47868>>>>>        End
47868>>>>>>
47868>>>>>
47868>>>>>        Get SqlOpen of hoSQLConnect to hStmt
47869>>>>>
47869>>>>>        If (hStmt = 0) Begin
47871>>>>>            Send SqlDisconnect of hoSQLManager
47872>>>>>            Error DFERR_PROGRAM CS_DUF_ConnectError
47873>>>>>>
47873>>>>>            Function_Return asCollations
47874>>>>>        End
47874>>>>>>
47874>>>>>
47874>>>>>        Get _SqlFindKeyWord CI_SQLSelect      to sSelect
47875>>>>>        Get _SqlFindKeyWord CI_SQLName        to sName
47876>>>>>        Get _SqlFindKeyWord CI_SQLDescription to sDescription
47877>>>>>        Get _SqlFindKeyWord CI_SQLFrom        to sFrom
47878>>>>>        Get _SqlFindKeyWord CI_SQLSys         to sSys
47879>>>>>
47879>>>>>        // MS-SQL Syntax:  
47879>>>>>        // SELECT name, description
47879>>>>>        //   from sys.fn_helpcollations();
47879>>>>>        Move (sSelect  * String(sName) * String(",") * String(sDescription) * String(sFrom) * String(sSys) * String(".fn_helpcollations();")) to sSQL
47880>>>>>
47880>>>>>        Move 1 to iColumn
47881>>>>>        Send SqlExecDirect of hStmt sSQL
47882>>>>>        Get SqlStmtAttribute of hStmt SqlSTMTATTRIB_ROWCOUNT to iRows
47883>>>>>        Repeat
47883>>>>>>
47883>>>>>            Get SQLFetch of hStmt to iFetchResult
47884>>>>>            If (iFetchResult <> 0) Begin
47886>>>>>                Get SQLColumnValue of hStmt iColumn to sValue 
47887>>>>>                If (sValue <> sPrevious) Begin         
47889>>>>>                    // We need to skip all collations starting with "SQL" because they
47889>>>>>                    // are obsolete and for pre-SQL Server 2000.
47889>>>>>                    Move (Pos("SQL", Uppercase(sValue))) to iPos
47890>>>>>                    If (iPos <> 1) Begin
47892>>>>>                        Move (Trim(sValue)) to asCollations[SizeOfArray(asCollations)
47893>>>>>                    End
47893>>>>>>
47893>>>>>                End
47893>>>>>>
47893>>>>>                Move sValue to sPrevious
47894>>>>>            End
47894>>>>>>
47894>>>>>        Until (iFetchResult = 0)
47896>>>>>        Send SQLClose of hStmt
47897>>>>>        Send SQLDisconnect of hoSQLConnect
47898>>>>>
47898>>>>>        Function_Return asCollations
47899>>>>>    End_Function
47900>>>>>
47900>>>>>    // To enumerate SQL database resources with ESQL and return the result as a string array,
47900>>>>>    // for DAW drivers.
47900>>>>>    // Returns: A string array.
47900>>>>>    Function _SqlEnumerateEsqlDAW String sStmt Integer iColumn Returns String[]
47902>>>>>        String[] sReturnArray
47903>>>>>        String sValue sPrevious
47903>>>>>        Handle hoSQLHandler hoSQLConnect hstmt
47903>>>>>        Integer iFetchResult iRows
47903>>>>>        tSQLConnection SQLConnection
47903>>>>>        tSQLConnection SQLConnection
47903>>>>>
47903>>>>>        Get phoSQLManager to hoSQLHandler
47904>>>>>
47904>>>>>        If (hoSQLHandler <> 0) Begin
47906>>>>>            Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
47907>>>>>            Get SQLConnect of hoSQLHandler SQLConnection.sDriverID SQLConnection.sConnectionString to hoSQLConnect
47908>>>>>
47908>>>>>            If (hoSQLConnect <> 0) Begin
47910>>>>>                Get SQLOpen of hoSQLConnect to hstmt
47911>>>>>                If (hstmt <> 0) Begin
47913>>>>>                    Send SqlExecDirect of hstmt sStmt
47914>>>>>                    Get SqlStmtAttribute of hstmt SqlSTMTATTRIB_ROWCOUNT to iRows
47915>>>>>                    Repeat
47915>>>>>>
47915>>>>>                        Get SQLFetch of hstmt to iFetchResult
47916>>>>>                        If (iFetchResult <> 0) Begin
47918>>>>>                            Get SQLColumnValue of hstmt iColumn to sValue
47919>>>>>                            If (sValue <> sPrevious) Begin
47921>>>>>                                Move (Trim(sValue)) to sReturnArray[SizeOfArray(sReturnArray)
47922>>>>>                            End
47922>>>>>>
47922>>>>>                            Move sValue to sPrevious
47923>>>>>                        End
47923>>>>>>
47923>>>>>                    Until (iFetchResult = 0)
47925>>>>>                    Send SQLClose of hstmt
47926>>>>>                End
47926>>>>>>
47926>>>>>                Send SQLDisconnect of hoSQLConnect
47927>>>>>            End
47927>>>>>>
47927>>>>>        End
47927>>>>>>
47927>>>>>
47927>>>>>        Function_Return sReturnArray
47928>>>>>    End_Function
47929>>>>>
47929>>>>>    Function _SqlDatabasesArrayDB2 Returns String[]
47931>>>>>        String[] sReturnArray
47932>>>>>        String sDataSource
47932>>>>>        Handle hoSQLHandler
47932>>>>>        Integer iItem
47932>>>>>
47932>>>>>        Get phoDB2SQLHandler to hoSQLHandler
47933>>>>>        Send SeedDataSources of hoSQLHandler
47934>>>>>
47934>>>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
47935>>>>>
47935>>>>>        Repeat
47935>>>>>>
47935>>>>>            Get DataSources of hoSQLHandler to sDataSource
47936>>>>>            Move (Replaces(",", sDataSource, "")) to sDataSource
47937>>>>>            Move (Trim(sDataSource)) to sReturnArray[iItem]
47938>>>>>            Increment iItem
47939>>>>>        Until (sDataSource = "")
47941>>>>>
47941>>>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
47942>>>>>
47942>>>>>        Function_Return sReturnArray
47943>>>>>    End_Function
47944>>>>>
47944>>>>>    Function _SqlDatabaseSourcesArrayODBC Returns String[]
47946>>>>>        String[] sReturnArray
47947>>>>>        String sDataSource
47947>>>>>        Handle hoSQLHandler
47947>>>>>        Integer iItem
47947>>>>>
47947>>>>>        Get phoODBCSQLHandler to hoSQLHandler
47948>>>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
47949>>>>>
47949>>>>>        Send SeedDataSources of hoSQLHandler
47950>>>>>
47950>>>>>        Repeat
47950>>>>>>
47950>>>>>            Get DataSources of hoSQLHandler to sDataSource
47951>>>>>            If (Trim(sDataSource) <> "" and not(sDataSource contains "*.")) Begin
47953>>>>>                Move (Trim(sDataSource)) to sReturnArray[iItem]
47954>>>>>                Increment iItem
47955>>>>>            End
47955>>>>>>
47955>>>>>        Until (sDataSource = "")
47957>>>>>
47957>>>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
47958>>>>>
47958>>>>>        Function_Return sReturnArray
47959>>>>>    End_Function
47960>>>>>
47960>>>>>    Function _SqlDatabasesArrayODBC Returns tSQLIntTableInfo[]
47962>>>>>        String[] sDataSources
47963>>>>>        tSQLConnection SQLConnection
47963>>>>>        tSQLConnection SQLConnection
47963>>>>>        tSQLIntTableInfo[] sReturnArray
47963>>>>>        tSQLIntTableInfo[] sReturnArray
47964>>>>>        Integer iDataSources iCount iItem
47964>>>>>        String sConnection sServer sDatabase sKey sSubKey
47964>>>>>        Handle hoIniFile hoRegistry hoODBCDataSources
47964>>>>>        Boolean bExists bKeyOpened
47964>>>>>
47964>>>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
47965>>>>>        Move SQLConnection.sConnectionString to sConnection
47966>>>>>        Move SQLConnection.sServer           to sServer
47967>>>>>
47967>>>>>        // FileDSN - read DATABASE name from DSN ini-file
47967>>>>>        If (Uppercase(sServer) contains ("." + String(CS_SQLIniDSNKeyword))) Begin
47969>>>>>            Get Create (RefClass(cIniFile)) to hoIniFile
47970>>>>>            Set psFileName of hoIniFile to sServer
47971>>>>>            Get ReadString of hoIniFile CS_SQLODBCIniSectionName CS_SQLIniDatabaseKeyword "" to sDatabase
47972>>>>>            Move sDatabase to sReturnArray[0].sDatabaseName
47973>>>>>            Send Destroy of hoIniFile
47974>>>>>        End
47974>>>>>>
47974>>>>>
47974>>>>>        // DSN - read DATABASE name from the registry
47974>>>>>        Else Begin
47975>>>>>            Get Create (RefClass(cRegistry)) to hoRegistry
47976>>>>>
47976>>>>>            // We start with checking the "System DNS" area in the registry as it is the
47976>>>>>            // most probably place the info is kept that we're after.
47976>>>>>            Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
47977>>>>>            Set pfAccessRights of hoRegistry to Key_Read
47978>>>>>            Get KeyExists of hoRegistry "SOFTWARE\Wow6432Node" to bExists
47979>>>>>            If (bExists = True) Begin
47981>>>>>                Move "SOFTWARE\Wow6432Node\ODBC\ODBC.INI" to sKey
47982>>>>>            End
47982>>>>>>
47982>>>>>            Else Begin
47983>>>>>                Move "SOFTWARE\ODBC\ODBC.INI" to sKey
47984>>>>>            End
47984>>>>>>
47984>>>>>
47984>>>>>            Get KeyExists of hoRegistry sKey to bExists
47985>>>>>            If (bExists) Begin
47987>>>>>                Get OpenKey of hoRegistry sKey to bKeyOpened
47988>>>>>                If (bKeyOpened) Begin
47990>>>>>                    Get Create (RefClass(Array)) to hoODBCDataSources
47991>>>>>                    Get GetSubkeys of hoRegistry hoODBCDataSources to iDataSources
47992>>>>>                    If (iDataSources > 0) Begin
47994>>>>>                        Move (ResizeArray(sDataSources, iDataSources)) to sDataSources
47995>>>>>                        Decrement iDataSources
47996>>>>>                        for iCount from 0 to iDataSources
48002>>>>>>
48002>>>>>                            Get Value of hoODBCDataSources iCount to sDataSources[iCount]
48003>>>>>                        Loop
48004>>>>>>
48004>>>>>                        Move 0 to iItem
48005>>>>>                        for iCount from 0 to iDataSources
48011>>>>>>
48011>>>>>                            Move sDataSources[iCount] to sSubKey
48012>>>>>                            Get OpenKey of hoRegistry (sKey + "\" + String(sSubKey)) to bKeyOpened
48013>>>>>                            If (bKeyOpened = True) Begin
48015>>>>>                                Get ValueExists of hoRegistry CS_SQLIniDatabaseKeyword to bExists
48016>>>>>                                If (bExists = True) Begin
48018>>>>>                                    Move sSubKey to sReturnArray[iItem].sServerName
48019>>>>>                                    Get ReadString of hoRegistry CS_SQLIniDatabaseKeyword to sReturnArray[iItem].sDatabaseName
48020>>>>>                                    Increment iItem
48021>>>>>                                End
48021>>>>>>
48021>>>>>                            End
48021>>>>>>
48021>>>>>                        Loop
48022>>>>>>
48022>>>>>                    End
48022>>>>>>
48022>>>>>                    Send CloseKey of hoRegistry
48023>>>>>                    Send Destroy of hoODBCDataSources
48024>>>>>                End
48024>>>>>>
48024>>>>>            End
48024>>>>>>
48024>>>>>
48024>>>>>            // We then check the "User DNS" area in the registry.
48024>>>>>            Set phRootKey of hoRegistry to HKEY_CURRENT_USER
48025>>>>>            Set pfAccessRights of hoRegistry to Key_Read
48026>>>>>            Move "SOFTWARE\ODBC\ODBC.INI" to sKey
48027>>>>>            Get KeyExists of hoRegistry sKey to bExists
48028>>>>>
48028>>>>>            If (bExists) Begin
48030>>>>>                Get OpenKey of hoRegistry sKey to bKeyOpened
48031>>>>>                If (bKeyOpened) Begin
48033>>>>>                    Get Create (RefClass(Array)) to hoODBCDataSources
48034>>>>>                    Get GetSubkeys of hoRegistry hoODBCDataSources to iDataSources
48035>>>>>                    If (iDataSources > 0) Begin
48037>>>>>                        Move (ResizeArray(sDataSources, iDataSources)) to sDataSources
48038>>>>>                        Decrement iDataSources
48039>>>>>                        for iCount from 0 to iDataSources
48045>>>>>>
48045>>>>>                            Get Value of hoODBCDataSources iCount to sDataSources[iCount]
48046>>>>>                        Loop
48047>>>>>>
48047>>>>>                        for iCount from 0 to iDataSources
48053>>>>>>
48053>>>>>                            Move sDataSources[iCount] to sSubKey
48054>>>>>                            Get OpenKey of hoRegistry (sKey + "\" + String(sSubKey)) to bKeyOpened
48055>>>>>                            If (bKeyOpened = True) Begin
48057>>>>>                                Get ValueExists of hoRegistry CS_SQLIniDatabaseKeyword to bExists
48058>>>>>                                If (bExists = True) Begin
48060>>>>>                                    Move sSubKey to sReturnArray[iItem].sServerName
48061>>>>>                                    Get ReadString of hoRegistry CS_SQLIniDatabaseKeyword to sReturnArray[iItem].sDatabaseName
48062>>>>>                                    Increment iItem
48063>>>>>                                End
48063>>>>>>
48063>>>>>                            End
48063>>>>>>
48063>>>>>                        Loop
48064>>>>>>
48064>>>>>                    End
48064>>>>>>
48064>>>>>                    Send CloseKey of hoRegistry
48065>>>>>                    Send Destroy of hoODBCDataSources
48066>>>>>                End
48066>>>>>>
48066>>>>>            End
48066>>>>>>
48066>>>>>
48066>>>>>            Send Destroy of hoRegistry
48067>>>>>        End
48067>>>>>>
48067>>>>>
48067>>>>>        Function_Return sReturnArray
48068>>>>>    End_Function
48069>>>>>
48069>>>>>    // We might have a split Sql script where the info about which database to use is
48069>>>>>    // put on top of the Sql script, we then need to save it to be able to retrieve it later and
48069>>>>>    // insert it for scriplets to come after the first one.
48069>>>>>    Function _SqlFormatStatement String sStmt Returns String
48071>>>>>        String sUseDatabase sTmp sUseKeyWord sCreateViewKeyWord sDBOKeyWord sNoCountKeyWord sDriverID
48071>>>>>        Integer iStart iEnd iDbType
48071>>>>>        Boolean bOK
48071>>>>>
48071>>>>>        Get piDbType to iDbType
48072>>>>>        Get psDriverID to sDriverID
48073>>>>>        Get _SqlFindKeyWord CI_SQLUse          to sUseKeyWord
48074>>>>>        Get _SqlFindKeyWord CI_SQLSetNoCountOn to sNoCountKeyWord
48075>>>>>        Get _SqlFindKeyWord CI_SQLCreateView   to sCreateViewKeyWord
48076>>>>>        Get _SqlFindKeyWord CI_SQLDBO          to sDBOKeyWord
48077>>>>>        Move (Replaces(" ", sStmt, "")) to sTmp
48078>>>>>        If (Uppercase(sTmp) contains (sUseKeyWord +"[")) Begin
48080>>>>>            Move (Pos("[", (Uppercase(sTmp)))) to iStart
48081>>>>>            Move (Pos("]", sTmp)) to iEnd
48082>>>>>            Move (Mid(sTmp, (iEnd -iStart +1), iStart)) to sUseDatabase
48083>>>>>            Move (sUseKeyWord * sUseDatabase + " ") to sUseDatabase
48084>>>>>            Set Private.psUseDatabase to sUseDatabase
48085>>>>>        End
48085>>>>>>
48085>>>>>        Else Begin
48086>>>>>            Move (Uppercase(sStmt)) to sTmp
48087>>>>>
48087>>>>>            // A "Create View" statement _must_ be the very first words in a Sql statement.
48087>>>>>            If (not(sTmp contains sCreateViewKeyWord)) Begin
48089>>>>>                Get Private.psUseDatabase to sUseDatabase
48090>>>>>                Move (Insert(sUseDatabase, sStmt, 1)) to sStmt
48091>>>>>            End
48091>>>>>>
48091>>>>>
48091>>>>>            // This is a bit special to place here but was done so because it was easier that way.
48091>>>>>            // We will get an error when trying to create a view if it already exists.
48091>>>>>            // So to avoid such errors; we first remove it & then recreate it.
48091>>>>>            Else If (sTmp contains sCreateViewKeyWord) Begin
48094>>>>>                // Make sure we only have one space between statements/words.
48094>>>>>                Move (Replaces("  ", sTmp, " ")) to sTmp
48095>>>>>                Move (Replace(sCreateViewKeyWord, sTmp, "")) to sTmp
48096>>>>>                Move (Trim(sTmp)) to sTmp
48097>>>>>                Move (Pos(" ", sTmp)) to iEnd
48098>>>>>                Move (Left(sTmp, iEnd)) to sTmp
48099>>>>>                If ((not(sTmp contains ("[" + sDBOKeyWord + "]."))) and (not(sTmp contains (sDBOKeyWord + ".")))) Begin
48101>>>>>                    Move (sDBOKeyWord + "." + Trim(sTmp)) to sTmp
48102>>>>>                End
48102>>>>>>
48102>>>>>                Move (Trim(sTmp)) to sTmp
48103>>>>>                // Remove data view as it already exists!
48103>>>>>                Get _SqlViewRemove sDriverID sTmp to bOK
48104>>>>>            End
48104>>>>>>
48104>>>>>        End
48104>>>>>>
48104>>>>>
48104>>>>>        Function_Return sStmt
48105>>>>>    End_Function
48106>>>>>
48106>>>>>    // First deletes the data cache file and then drops the passed Sql data view.
48106>>>>>    Function _SqlViewRemove String sDataView Returns Boolean
48108>>>>>        String sDriverID sSQLString sDropViewKeyWord
48108>>>>>        Integer iRetval
48108>>>>>        Boolean bOK
48108>>>>>
48108>>>>>        Get psDriverID to sDriverID
48109>>>>>        Get _UtilDeleteCacheFile sDataView to iRetval
48110>>>>>
48110>>>>>        Get _SqlFindKeyWord CI_SQLDropView to sDropViewKeyWord
48111>>>>>        Move (sDropViewKeyWord * String(sDataView)) to sSQLString
48112>>>>>        Set psSQLStatementString to sSQLString
48113>>>>>
48113>>>>>        // As we don't check if the view exist or not, it might happen
48113>>>>>        // that it doesn't and that would through an error, so guard for that eventuality (just ignore it).
48113>>>>>        Move False to Err
48114>>>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
48115>>>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
48116>>>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
48117>>>>>        Move 0 to LastErr
48118>>>>>
48118>>>>>        // We also need to remove the cache-file since the table has been changed
48118>>>>>        Get _UtilDeleteCacheFile sDataView to bOK
48119>>>>>        Send ResetFillSQLTables
48120>>>>>
48120>>>>>        Function_Return (Err = False)
48121>>>>>    End_Function
48122>>>>>
48122>>>>>    // Returns the proper Sql language key word(s) for the passed SQL key-word constant
48122>>>>>    Function _SqlFindKeyWord Integer iSQLKeywordConstant Returns String
48124>>>>>        String sRetval
48124>>>>>        Integer iDbType iIndex
48124>>>>>        tSQLKeyWords[] SQLKeywordArray
48124>>>>>        tSQLKeyWords[] SQLKeywordArray
48125>>>>>        tSQLKeyWords   SQLKeyWords
48125>>>>>        tSQLKeyWords   SQLKeyWords
48125>>>>>
48125>>>>>        // Sql back-end type. E.g. MS-SQL, MySQL, Oracle, DB2...
48125>>>>>        Move "" to sRetval
48126>>>>>        Get piDbType to iDbType
48127>>>>>        Move iDbType             to SQLKeyWords.iSQLDbType
48128>>>>>        Move iSQLKeywordConstant to SQLKeyWords.iSQLWord
48129>>>>>
48129>>>>>        Get paSQLKeywordArray to SQLKeywordArray
48130>>>>>        Move (SearchArray(SQLKeyWords, SQLKeywordArray, Self, RefFunc(CompareFindSQLKeyWords))) to iIndex
48131>>>>>        If (iIndex >= 0) Begin
48133>>>>>            Move SQLKeywordArray[iIndex].sSQLPhrase to sRetval
48134>>>>>        End
48134>>>>>>
48134>>>>>
48134>>>>>        Function_Return sRetval
48135>>>>>    End_Function
48136>>>>>
48136>>>>>    // Function will "clean/sanitize" the script by removing all comments and blank lines.
48136>>>>>    Function _SqlUtilSanitizeScript tSQLScriptArray SqlScriptArray Returns tSQLScriptArray[]
48138>>>>>        String[] sSQLScriptArray
48139>>>>>        String sText sLine sTmp sCommentStart sCommentEnd sDashComment
48139>>>>>        Integer iSize iCount
48139>>>>>        Boolean bCommentStart bCommentEnd bDashComment
48139>>>>>
48139>>>>>        Move False to bCommentStart
48140>>>>>        Move False to bCommentEnd
48141>>>>>        Move False to bDashComment
48142>>>>>        Move "/*"  to sCommentStart   // These are the standard comment start & stop tokens...
48143>>>>>        Move "*/"  to sCommentEnd
48144>>>>>        Move "--"  to sDashComment    // ...but a comment can also start with two dashes "--".
48145>>>>>
48145>>>>>        Move (SizeOfArray(SqlScriptArray.sSQLScriptArray)) to iSize
48146>>>>>        Decrement iSize
48147>>>>>        Move "" to sText
48148>>>>>
48148>>>>>        for iCount from 0 to iSize
48154>>>>>>
48154>>>>>            Move SqlScriptArray.sSQLScriptArray[iCount] to sLine
48155>>>>>            Move (Trim(sLine)) to sTmp
48156>>>>>            If (sTmp <> "") Begin
48158>>>>>                Move (Left(sTmp, 2) = sDashComment) to bDashComment
48159>>>>>                If (bCommentStart = False) Begin
48161>>>>>                    Move (Left(sTmp, 2) = sCommentStart) to bCommentStart
48162>>>>>                    If (bCommentStart = False) Begin
48164>>>>>                    End
48164>>>>>>
48164>>>>>                End
48164>>>>>>
48164>>>>>                Move (sTmp contains sCommentEnd) to bCommentEnd
48165>>>>>                If (bCommentEnd = True) Begin
48167>>>>>                    Move False to bCommentStart
48168>>>>>                End
48168>>>>>>
48168>>>>>                If (bDashComment = False and bCommentStart = False and bCommentEnd = False) Begin
48170>>>>>                    Move sLine to sSQLScriptArray[SizeOfArray(sSQLScriptArray)]
48171>>>>>                End
48171>>>>>>
48171>>>>>            End
48171>>>>>>
48171>>>>>        Loop
48172>>>>>>
48172>>>>>
48172>>>>>        // Update the retval struct array:
48172>>>>>        Move sSQLScriptArray to SqlScriptArray.sSQLScriptArray
48173>>>>>        Function_Return SqlScriptArray
48174>>>>>    End_Function
48175>>>>>
48175>>>>>    // Helper function that builds a string like;
48175>>>>>    // "SELECT name from [Master].[sys].[databases] where name"
48175>>>>>    Function _SqlSelectFromWhereName Returns String
48177>>>>>        String sRetval sSelect sName sFrom sMaster sSys sDatabases sWhere sDBO
48177>>>>>
48177>>>>>        Get _SqlFindKeyWord CI_SQLSelect       to sSelect
48178>>>>>        Get _SqlFindKeyWord CI_SQLName         to sName
48179>>>>>        Get _SqlFindKeyWord CI_SQLDBO          to sDBO
48180>>>>>        Get _SqlFindKeyWord CI_SQLFrom         to sFrom
48181>>>>>        Get _SqlFindKeyWord CI_SQLMaster       to sMaster
48182>>>>>        Get _SqlFindKeyWord CI_SQLSys          to sSys
48183>>>>>        Get _SqlFindKeyWord CI_SQLDatabases    to sDatabases
48184>>>>>        Get _SqlFindKeyWord CI_SQLWhere        to sWhere
48185>>>>>        Move (sSelect * sName * sFrom * "[" + sMaster + "].[" + sDBO + "].[" + sSys + sDatabases + "]" * sWhere * sName) to sRetval
48186>>>>>        Function_Return sRetval
48187>>>>>    End_Function
48188>>>>>
48188>>>>>    // Helper function to create a SQL statement like;
48188>>>>>    // "SELECT * FROM SYS.INDEXES WHERE NAME = MyIndexName AND OBJECT_ID = OBJECT_ID([MySchmaName].[MyTableName])"
48188>>>>>    // Used for checking if an index exists.
48188>>>>>    Function _SqlQueryIfIndexExists String sSchemaName String sTableName String sIndexName Returns String
48190>>>>>        String sRetval sSelect sFrom sSysIndexes sWhere sObjectID sAnd sName
48190>>>>>
48190>>>>>        Get _SqlFindKeyWord CI_SQLSelect to sSelect
48191>>>>>        Get _SqlFindKeyWord CI_SQLFrom to sFrom
48192>>>>>        Get _SqlFindKeyWord CI_SQLSysIndexes to sSysIndexes
48193>>>>>        Get _SqlFindKeyWord CI_SQLWhere to sWhere
48194>>>>>        Get _SqlFindKeyWord CI_SQLObjectID to sObjectID
48195>>>>>        Get _SqlFindKeyWord CI_SQLAND to sAnd
48196>>>>>        Get _SqlFindKeyWord CI_SQLName to sName
48197>>>>>
48197>>>>>        Move (sSelect * String("*") * sFrom * sSysIndexes * sWhere * sName * "=" * sIndexName * sAnd * sObjectID * "=([" + sSchemaName + "].[" + sTableName + "])") to sRetval
48198>>>>>
48198>>>>>        Function_Return sRetval
48199>>>>>    End_Function
48200>>>>>
48200>>>>>    // Formats a columns iLenght & iDecimal parameters as SQL expects them in a string.
48200>>>>>    // E.g. (4,2), where 4 is the iLength and 2 the iDecimals param.
48200>>>>>    Function _SqlFormatLengthAndDecimalAsString Integer iLength Integer iDecimals Returns String
48202>>>>>        String sRetval
48202>>>>>        If (iLength <> 0) Begin
48204>>>>>            Move ("(" + String(iLength)) to sRetval
48205>>>>>            If (iDecimals <> 0) Begin
48207>>>>>                Move (sRetval + "," + String(iDecimals)) to sRetval
48208>>>>>            End
48208>>>>>>
48208>>>>>            Move (sRetval + ")") to sRetval
48209>>>>>        End
48209>>>>>>
48209>>>>>        Function_Return sRetval
48210>>>>>    End_Function
48211>>>>>
48211>>>>>    // Checks that the passed sDriverID is defined.
48211>>>>>    // Also checks if the driver has been loaded; else it gets loaded.
48211>>>>>    Function _SqlCheckCurrentDriver String sDriverID Returns Boolean
48213>>>>>        Boolean bOK
48213>>>>>        Integer iDriver
48213>>>>>
48213>>>>>        If (sDriverID = DATAFLEX_ID) Begin
48215>>>>>            Function_Return False
48216>>>>>        End
48216>>>>>>
48216>>>>>
48216>>>>>        Get IsDAWSQLDriver sDriverID to bOK
48217>>>>>
48217>>>>>        If (bOK = False) Begin
48219>>>>>            Error DFERR_PROGRAM "Driver needs to be one of MSSQLDRV, DB2_DRV, or ODBC_DRV"
48220>>>>>>
48220>>>>>            Function_Return False
48221>>>>>        End
48221>>>>>>
48221>>>>>
48221>>>>>        Get DriverIndex sDriverID to iDriver
48222>>>>>        If (iDriver = 0) Begin
48224>>>>>            Load_Driver sDriverID
48225>>>>>        End
48225>>>>>>
48225>>>>>
48225>>>>>        Function_Return True
48226>>>>>    End_Function
48227>>>>>
48227>>>>>    // Checks that the length parameter has been passed correctly.
48227>>>>>    // This is only of concern for certain SQL data types.
48227>>>>>    Function _SqlCheckLengthParamForDataType Integer iDataType Integer iLen Returns Boolean
48229>>>>>        Integer iLength
48229>>>>>        Boolean bOK bCheckTypeLength
48229>>>>>
48229>>>>>        If (num_arguments > 1) Begin
48231>>>>>            Move iLen to iLength
48232>>>>>        End
48232>>>>>>
48232>>>>>        Move (iDataType = SQL_DECIMAL   or iDataType = SQL_NUMERIC or iDataType = SQL_FLOAT   or iDataType = SQL_INTEGER or;              iDataType = SQL_VARBINARY or iDataType = SQL_BINARY  or iDataType = SQL_VARCHAR or iDataType = SQL_CHAR or;              iDataType = SQL_BIGINT    or iDataType = SQL_REAL) to bCheckTypeLength
48233>>>>>
48233>>>>>        If (bCheckTypeLength = True) Begin
48235>>>>>            Move (iLength > 0) to bOK
48236>>>>>        End
48236>>>>>>
48236>>>>>
48236>>>>>        Function_Return (bOK = True)
48237>>>>>    End_Function
48238>>>>>
48238>>>>>    Function _SqlProperTableName String sTableName Returns String
48240>>>>>        String sVal sSchema sDriverID
48240>>>>>        Integer iDbType
48240>>>>>
48240>>>>>        If (Trim(sTableName) = "") Begin
48242>>>>>            Function_Return ""
48243>>>>>        End
48243>>>>>>
48243>>>>>
48243>>>>>        Get psDriverID to sDriverID
48244>>>>>        Get piDbType   to iDbType
48245>>>>>        If (iDbType = EN_dbTypeOracle) Begin
48247>>>>>            Get psUserID to sSchema
48248>>>>>            // Not sure about this uppercasing but it seems like Oracle wants that?
48248>>>>>            Move (Uppercase(sSchema)) to sSchema
48249>>>>>            Move ('"' + sSchema + '"."' + sTableName + '"') to sTableName
48250>>>>>            Function_Return sTableName
48251>>>>>        End
48251>>>>>>
48251>>>>>        If (iDbType = EN_DbTypeMySQL) Begin
48253>>>>>            Get psDatabase to sVal
48254>>>>>            Move (sVal + "." + sTableName) to sTableName
48255>>>>>            Function_Return sTableName
48256>>>>>        End
48256>>>>>>
48256>>>>>        If (iDbType = EN_DbTypePostgre) Begin
48258>>>>>            Move ('"' + sTableName + '"') to sTableName
48259>>>>>            Function_Return sTableName
48260>>>>>        End
48260>>>>>>
48260>>>>>
48260>>>>>        Get psSchema to sSchema
48261>>>>>        If (sSchema = "") Begin
48263>>>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
48264>>>>>        End
48264>>>>>>
48264>>>>>
48264>>>>>        Move (Uppercase(sTableName)) to sVal
48265>>>>>        If (not(sVal contains (sSchema + "."))) Begin
48267>>>>>            If (iDbType = EN_dbTypeDB2) Begin
48269>>>>>                Move (Lowercase(sSchema) + "." + sTableName) to sTableName
48270>>>>>            End
48270>>>>>>
48270>>>>>            Else Begin
48271>>>>>                Move (sSchema + "." + sTableName) to sTableName
48272>>>>>            End
48272>>>>>>
48272>>>>>        End
48272>>>>>>
48272>>>>>
48272>>>>>        Function_Return sTableName
48273>>>>>    End_Function
48274>>>>>
48274>>>>>    // SQL column names can be case-sensitive. This function is used to check that
48274>>>>>    // the passed sFieldName has the correct spelling.
48274>>>>>    // Used with Embedded SQL statement calls.
48274>>>>>    // If the spelling or fieldname doesn't exist, the return value is "" (blank).
48274>>>>>    Function _SqlFindColumnName String sTableName String sColumnName Returns String
48276>>>>>        String sRetval sValue sDriverID
48276>>>>>        String[] sColumnNamesArray
48277>>>>>        Integer iCount iColumns
48277>>>>>
48277>>>>>        Move "" to sRetval
48278>>>>>        Get psDriverID to sDriverID
48279>>>>>        Get _SqlUtilEnumerateColumns sDriverID sTableName to sColumnNamesArray
48280>>>>>        Move (SizeOfArray(sColumnNamesArray)) to iColumns
48281>>>>>        Decrement iColumns
48282>>>>>
48282>>>>>        For iCount from 0 to iColumns
48288>>>>>>
48288>>>>>            Move sColumnNamesArray[iCount] to sValue
48289>>>>>            If (Uppercase(sColumnName) = Uppercase(sValue)) Begin
48291>>>>>                Move sValue to sRetval
48292>>>>>                Move iColumns to iCount // We're done.
48293>>>>>            End
48293>>>>>>
48293>>>>>        Loop
48294>>>>>>
48294>>>>>
48294>>>>>        Function_Return sRetval
48295>>>>>    End_Function
48296>>>>>
48296>>>>>    Function _SqlDatabasesArrayMSSQL Returns String[]
48298>>>>>        String[] sReturnArray
48299>>>>>        Handle hoSQLHandler
48299>>>>>        Integer iCount iSize iItem
48299>>>>>        String sServer
48299>>>>>        tSQLConnection SQLConnection
48299>>>>>        tSQLConnection SQLConnection
48299>>>>>
48299>>>>>        Get phoMSSQLHandler to hoSQLHandler
48300>>>>>        Send Delete_Data    of hoSQLHandler
48301>>>>>        Get pSQLConnection  of ghoSQLConnectionHandler to SQLConnection
48302>>>>>
48302>>>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
48303>>>>>        Get EnumerateDatabases of hoSQLHandler SQLConnection.sServer SQLConnection.sUserID SQLConnection.sPassword to iSize
48304>>>>>        Decrement iSize
48305>>>>>
48305>>>>>        For iCount from 0 to iSize
48311>>>>>>
48311>>>>>            Get String_Value of hoSQLHandler iCount to sServer
48312>>>>>            Move (Trim(sServer)) to sReturnArray[iItem]
48313>>>>>            Increment iItem
48314>>>>>        Loop
48315>>>>>>
48315>>>>>
48315>>>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
48316>>>>>
48316>>>>>        Function_Return sReturnArray
48317>>>>>    End_Function
48318>>>>>
48318>>>>>    Function _SqlTableArrayDAW Returns String[]
48320>>>>>        String[] asSQLTables
48321>>>>>        String sTable sTableType sSchema sDefSchema sComment sTableKeyWord sSysKeyWord sConnectionString
48321>>>>>        Handle hoSQLHandler
48321>>>>>        Integer iCount iSize iItem iPos
48321>>>>>        Boolean bOK
48321>>>>>        tSQLConnection SQLConnection
48321>>>>>        tSQLConnection SQLConnection
48321>>>>>
48321>>>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
48322>>>>>        If (SQLConnection.sConnectionString = "") Begin
48324>>>>>            Function_Return asSQLTables
48325>>>>>        End
48325>>>>>>
48325>>>>>
48325>>>>>        Move SQLConnection.sSchema      to sDefSchema
48326>>>>>        Move (Uppercase(sDefSchema))    to sDefSchema
48327>>>>>        Get _SqlFindKeyWord CI_SQLTable to sTableKeyWord
48328>>>>>        Get _SqlFindKeyWord CI_SQLSys   to sSysKeyWord
48329>>>>>
48329>>>>>        Get phoCLIHandler to hoSQLHandler
48330>>>>>        Set psDriverID    of hoSQLHandler to SQLConnection.sDriverID
48331>>>>>        Send Delete_Data  of hoSQLHandler
48332>>>>>
48332>>>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
48333>>>>>        Move SQLConnection.sConnectionString to sConnectionString
48334>>>>>        // 2020-03-14 This was not correct when testing a MS-SQL ODBC driver connection from CMOS.
48334>>>>>//        If (SQLConnection.sDriverID = ODBC_DRV_ID) Begin
48334>>>>>//            If (Uppercase(sConnectionString) contains CS_SQLIniDSNKeyword) Begin
48334>>>>>//                Move (Pos(";", sConnectionString)) to iPos
48334>>>>>//                If (iPos > 0) Begin
48334>>>>>//                    Move (Left(sConnectionString, (iPos - 1))) to sConnectionString
48334>>>>>//                    Move (Trim(sConnectionString)) to sConnectionString
48334>>>>>//                End
48334>>>>>//            End
48334>>>>>//        End
48334>>>>>
48334>>>>>        Get pasSQLDataTables to asSQLTables
48335>>>>>        If (SizeOfArray(asSQLTables) <> 0) Begin
48337>>>>>            Function_Return asSQLTables
48338>>>>>        End
48338>>>>>>
48338>>>>>
48338>>>>>        Get EnumerateTables of hoSQLHandler sConnectionString to iSize
48339>>>>>        Move False to Err
48340>>>>>        Move 0 to iItem
48341>>>>>
48341>>>>>        // Note that the enumeration starts from table no 1. (not zero)
48341>>>>>        For iCount from 1 to iSize
48347>>>>>>
48347>>>>>            Get TableName    of hoSQLHandler iCount to sTable
48348>>>>>            Get TableType    of hoSQLHandler iCount to sTableType
48349>>>>>            Get SchemaName   of hoSQLHandler iCount to sSchema
48350>>>>>            If (sSchema = "") Begin
48352>>>>>                Get _SqlFindKeyWord CI_SQLDBO to sSchema
48353>>>>>            End
48353>>>>>>
48353>>>>>            Get TableComment of hoSQLHandler iCount to sComment
48354>>>>>            Move (Trim(sTable)) to sTable
48355>>>>>            If (SQLConnection.sDriverID = DB2_DRV_ID) Begin
48357>>>>>                Move (sTable <> "" and Uppercase(sTableType) = sTableKeyWord and Uppercase(sSchema) = sDefSchema) to bOK
48358>>>>>            End
48358>>>>>>
48358>>>>>            Else Begin
48359>>>>>                Move (sTable <> "" and Uppercase(sTableType) = sTableKeyWord and Uppercase(sSchema) <> sSysKeyWord and Uppercase(sSchema) <> "SYSTOOLS") to bOK
48360>>>>>            End
48360>>>>>>
48360>>>>>            If (bOK = True) Begin
48362>>>>>                Move sTable to asSQLTables[iItem]
48363>>>>>                Increment iItem
48364>>>>>            End
48364>>>>>>
48364>>>>>        Loop
48365>>>>>>
48365>>>>>
48365>>>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
48366>>>>>
48366>>>>>        Set pasSQLDataTables to asSQLTables
48367>>>>>        Function_Return asSQLTables
48368>>>>>    End_Function
48369>>>>>
48369>>>>>    Function _SqlProcedureArrayDAW String sStmt String sArgument Returns String[]
48371>>>>>        String[] sReturnArray
48372>>>>>        String sValue
48372>>>>>        Handle hoSQLHandler hoSQLConnect hStmt
48372>>>>>        Integer iRetval iCols iFetchResult
48372>>>>>        tSQLConnection SQLConnection
48372>>>>>        tSQLConnection SQLConnection
48372>>>>>
48372>>>>>        Get phoSQLManager to hoSQLHandler
48373>>>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
48374>>>>>        Get SqlConnect of hoSQLHandler SQLConnection.sDriverID SQLConnection.sConnectionString to hoSQLConnect
48375>>>>>
48375>>>>>        If (hoSQLConnect <> 0) Begin
48377>>>>>            Get SqlOpen of hoSQLConnect to hStmt
48378>>>>>            If (hStmt <> 0) Begin
48380>>>>>                Send SqlSetProcedurename of hStmt sStmt
48381>>>>>                If (sArgument <> "") Begin
48383>>>>>                    Send SqlSetArgument  of hStmt 1 sArgument
48384>>>>>                End
48384>>>>>>
48384>>>>>
48384>>>>>                Send SqlCall             of hStmt
48385>>>>>                Get SqlReturnValue       of hStmt to iRetval
48386>>>>>                If (iRetval = 0) Begin
48388>>>>>                    Repeat
48388>>>>>>
48388>>>>>                        Get SqlStmtAttribute of hStmt SqlSTMTATTRIB_COLUMNCOUNT to iCols
48389>>>>>                        If (iCols > 0) Begin
48391>>>>>                            Repeat
48391>>>>>>
48391>>>>>                                Get SqlFetch of hStmt to iFetchResult
48392>>>>>                                If (iFetchResult <> 0) Begin
48394>>>>>                                    Get SqlColumnValue of hStmt 1 to sValue
48395>>>>>                                    Move (Trim(sValue)) to sReturnArray[SizeOfArray(sReturnArray)]
48396>>>>>                                End
48396>>>>>>
48396>>>>>                            Until (iFetchResult = 0)
48398>>>>>                        End
48398>>>>>>
48398>>>>>                        Get SqlNextResultSet of hStmt to iRetval
48399>>>>>                    Until (iRetval = 0)
48401>>>>>                    Send SqlClose of hStmt
48402>>>>>                End
48402>>>>>>
48402>>>>>            End
48402>>>>>>
48402>>>>>            Send SqlDisconnect of hoSQLConnect
48403>>>>>        End
48403>>>>>>
48403>>>>>        Function_Return sReturnArray
48404>>>>>    End_Function
48405>>>>>
48405>>>>>    Function _SqlUtilUpdateIntFile Integer hTable Returns Boolean
48407>>>>>        String sOrgFormat sNewFormat sRootName sTableName sPhysicalFileName sDriverID sDataPath
48407>>>>>        Boolean bOpened bOK
48407>>>>>
48407>>>>>        // ToDo: This needs further investigation but for now we just skip CodeMast & CodeType .int files update...
48407>>>>>        // For some reason this .int file update screws up of CodeMast & CodeType .int files
48407>>>>>        // which makes the program unable to run because they can't be opened.
48407>>>>>        // Also note that there is another helper function "UtilTableCreateCodeMastCodeTypeIntFiles" to create
48407>>>>>        // proper .int files for the two tables.
48407>>>>>//        If (Uppercase(sTableName) = "CODETYPE" or Uppercase(sTableName) = "CODEMAST") Begin
48407>>>>>//            Function_Return True
48407>>>>>//        End
48407>>>>>
48407>>>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
48410>>>>>        Get _TableNameOnly sRootName to sTableName
48411>>>>>        Move CS_OEM_Txt  to sOrgFormat
48412>>>>>        Move CS_ANSI_Txt to sNewFormat
48413>>>>>        Get AutoConnectionIDLogin to bOK
48414>>>>>
48414>>>>>        // It seems this can be called to quickly; causing a 13001 error "Cannot open cache file for write"
48414>>>>>//        Sleep 1  
48414>>>>>        Get _UtilDeleteCacheFile sTableName to bOK
48415>>>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
48418>>>>>        If (bOpened = False) Begin
48420>>>>>            Open hTable
48422>>>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpened
48425>>>>>        End
48425>>>>>>
48425>>>>>        If (bOpened = False) Begin
48427>>>>>            Function_Return False
48428>>>>>        End
48428>>>>>>
48428>>>>>
48428>>>>>        Get psDriverID to sDriverID
48429>>>>>
48429>>>>>        Move False to Err
48430>>>>>        Get_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sOrgFormat
48433>>>>>        Move (Uppercase(sOrgFormat)) to sOrgFormat
48434>>>>>        // Lets swap the OEM/ANSI format, just to make a change in Structure_Start below (and back),
48434>>>>>        // to "touch" the table so the driver feels there has been a change and updates the .int file.
48434>>>>>        Move (If(sOrgFormat = CS_OEM_Txt, CS_ANSI_Txt, CS_OEM_Txt)) to sNewFormat
48435>>>>>
48435>>>>>        Move False to Err
48436>>>>>
48436>>>>>        If (hTable > 0) Begin
48438>>>>>            Structure_Start hTable
48439>>>>>                Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sNewFormat
48442>>>>>                Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sOrgFormat
48445>>>>>            Structure_End hTable DF_STRUCTEND_OPT_FORCE "." ghoDbUpdateHandler
48447>>>>>        End
48447>>>>>>
48447>>>>>        Else Begin
48448>>>>>            Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sNewFormat
48451>>>>>            Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sOrgFormat
48454>>>>>        End
48454>>>>>>
48454>>>>>        Function_Return (Err = False)
48455>>>>>    End_Function
48456>>>>>
48456>>>>>    // Subfunction to the ApiTableUpdate function (et al)
48456>>>>>    Function _UtilTableCheckChangeFilelistNames tAPITableNameInfo APITableNameInfoFrom Boolean bIsSQLTableTo Returns Boolean
48458>>>>>        Handle hTable
48458>>>>>        String sConnectionID sRootName sLogicalName sDisplayName
48458>>>>>        Boolean bTableExists bSameTableNames bANSI bOK
48458>>>>>
48458>>>>>        Get _ApiTableFilelistNamesCompare True APITableNameInfoFrom to bSameTableNames
48459>>>>>        If (bSameTableNames = True) Begin
48461>>>>>            Function_Return True
48462>>>>>        End
48462>>>>>>
48462>>>>>
48462>>>>>        Move True to bOK
48463>>>>>        Move APITableNameInfoFrom.iTableNumber  to hTable
48464>>>>>        Set Private.phCurrentTable              to hTable
48465>>>>>        
48465>>>>>        Get_Attribute DF_FILE_ROOT_NAME         of hTable to sRootName
48468>>>>>        If (sRootName <> APITableNameInfoFrom.sRootName) Begin
48470>>>>>            Set_Attribute DF_FILE_ROOT_NAME     of hTable to APITableNameInfoFrom.sRootName
48473>>>>>        End
48473>>>>>>
48473>>>>>        
48473>>>>>        Get_Attribute DF_FILE_LOGICAL_NAME      of hTable to sLogicalName
48476>>>>>        If (sLogicalName <> APITableNameInfoFrom.sLogicalName) Begin
48478>>>>>            Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to APITableNameInfoFrom.sLogicalName
48481>>>>>        End
48481>>>>>>
48481>>>>>        
48481>>>>>        Get_Attribute DF_FILE_DISPLAY_NAME      of hTable to sDisplayName
48484>>>>>        If (sDisplayName <> APITableNameInfoFrom.sDisplayName) Begin
48486>>>>>            Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to APITableNameInfoFrom.sDisplayName
48489>>>>>        End
48489>>>>>>
48489>>>>>
48489>>>>>        If (APITableNameInfoFrom.bIsSQL = True) Begin
48491>>>>>            Get psConnectionID to sConnectionID
48492>>>>>            Get _UtilTableExists hTable to bTableExists
48493>>>>>            If (bTableExists = True) Begin
48495>>>>>                Get _SqlUtilUpdateIntFile hTable to bOK
48496>>>>>            End
48496>>>>>>
48496>>>>>            Else Begin
48497>>>>>                Get pbToANSI to bANSI
48498>>>>>                Get _SqlUtilCreateIntFile hTable APITableNameInfoFrom.sDriverID sConnectionID bANSI False True to bOK
48499>>>>>            End
48499>>>>>>
48499>>>>>        End
48499>>>>>>
48499>>>>>
48499>>>>>        Function_Return bOK
48500>>>>>    End_Function
48501>>>>>
48501>>>>>    // The table must already exist in the filelist for this function to work.
48501>>>>>    // It creates an .int file in the first Data folder of the psDataPath property. 
48501>>>>>    // It is important that the hTable can be opened.
48501>>>>>    Function _SqlUtilCreateIntFile Handle hTable String sDriverID String sConnectionID Boolean bAnsi Boolean bSysFile Boolean bBackup Returns Boolean
48503>>>>>        Boolean bOK bExists bUseConnectionID 
48503>>>>>        String sDataPath sRootName sLogicalName sPhysicalFileName sConnectionString sTableName sSchemaName sANSI_OEM 
48503>>>>>        String[] asIndexArray
48504>>>>>        Integer iCount iCh iSize iPos
48504>>>>>
48504>>>>>        Move (Trim(sConnectionID) <> "") to bUseConnectionID
48505>>>>>        Get psConnectionString to sConnectionString
48506>>>>>
48506>>>>>        Move CS_ANSI_Txt to sANSI_OEM
48507>>>>>        If (bANSI = False) Begin
48509>>>>>            Move CS_OEM_Txt to sANSI_OEM
48510>>>>>        End
48510>>>>>>
48510>>>>>
48510>>>>>        Get psDataPathFirstPart to sDataPath
48511>>>>>        Get vFolderExists sDataPath to bOK
48512>>>>>        If (bOK = False) Begin
48514>>>>>            Error DFERR_PROGRAM "Function _SqlUtilCreateIntFile; psDataPath not found!"
48515>>>>>>
48515>>>>>            Function_Return False
48516>>>>>        End
48516>>>>>>
48516>>>>>        Get vFolderFormat sDataPath to sDataPath
48517>>>>>
48517>>>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
48520>>>>>        Get _TableNameOnly sRootName to sTableName
48521>>>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
48524>>>>>        Move sLogicalName  to sPhysicalFileName
48525>>>>>        Move (sPhysicalFileName + ".int") to sPhysicalFileName
48526>>>>>
48526>>>>>        Get psSchema hTable to sSchemaName
48527>>>>>        If (sSchemaName = "") Begin
48529>>>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchemaName
48530>>>>>        End
48530>>>>>>
48530>>>>>        
48530>>>>>        If (bBackup = True) Begin
48532>>>>>            // If the .int file already exists; we rename it to "FileName" + ".bak"
48532>>>>>            Get vFilePathExists (sDataPath + sPhysicalFileName) to bExists
48533>>>>>            If (bExists = True) Begin
48535>>>>>                Get vRenameFile (sDataPath + sPhysicalFileName) (sDataPath + sPhysicalFileName + ".bak") to bOK
48536>>>>>            End
48536>>>>>>
48536>>>>>        End
48536>>>>>>
48536>>>>>
48536>>>>>        Get _UtilDeleteCacheFile sTableName to bOK
48537>>>>>        Get _SqlUtilEnumerateIndexes sTableName sDriverID to asIndexArray
48538>>>>>
48538>>>>>        Get Seq_Open_Output_Channel (sDataPath + sPhysicalFileName) to iCh
48539>>>>>            Writeln channel iCh CS_DRIVER_NAME     " " sDriverID
48544>>>>>            If (bUseConnectionID = True) Begin
48546>>>>>                Writeln channel iCh CS_SERVER_NAME " " CS_DFCONNID "=" sConnectionID
48553>>>>>            End
48553>>>>>>
48553>>>>>            Else Begin
48554>>>>>                Writeln channel iCh CS_SERVER_NAME " " CS_SERVER "=" sConnectionString
48561>>>>>            End
48561>>>>>>
48561>>>>>            Writeln channel iCh CS_DATABASE_NAME          " " sTableName
48566>>>>>            Writeln channel iCh CS_SCHEMA_NAME            " " (Lowercase(sSchemaName))
48571>>>>>            // There seems to be a new order how these are set from DF19.
48571>>>>>            If (bSysFile = True) Begin
48573>>>>>                Writeln channel iCh CS_RECNUM_TABLE       " " "NO"
48578>>>>>                Writeln channel iCh CS_SYSTEM_FILE        " " "YES"
48583>>>>>            End
48583>>>>>>
48583>>>>>            Writeln channel iCh CS_TABLE_CHARACTER_FORMAT " " sANSI_OEM
48588>>>>>            Writeln channel iCh CS_USE_DUMMY_ZERO_DATE    " " "YES" // ToDo: We maybe need to paramerize this setting?
48593>>>>>
48593>>>>>            If (bSysFile = False) Begin
48595>>>>>                Move (SizeOfArray(asIndexArray)) to iSize
48596>>>>>                Move (SortArray(asIndexArray)) to asIndexArray
48597>>>>>                If (iSize > 0) Begin
48599>>>>>                    Writeln channel iCh (CS_PRIMARY_INDEX * String("0"))
48602>>>>>                    Writeln channel iCh // Just an empty line
48604>>>>>                End
48604>>>>>>
48604>>>>>                Decrement iSize
48605>>>>>                for iCount from 0 to iSize
48611>>>>>>
48611>>>>>                    Writeln channel iCh (CS_INDEX_NUMBER * String(iCount))
48614>>>>>                    Writeln channel iCh (CS_INDEX_NAME   * String(asIndexArray[iCount]))
48617>>>>>                    Writeln channel iCh
48619>>>>>                Loop
48620>>>>>>
48620>>>>>            End
48620>>>>>>
48620>>>>>        Send Seq_Close_Channel iCh 
48621>>>>>        
48621>>>>>        Open hTable
48623>>>>>        Structure_Start hTable sDriverID
48624>>>>>        Structure_End hTable DF_STRUCTEND_OPT_FORCE
48626>>>>>
48626>>>>>        // Wait a sec for Windows to finish writing the file:
48626>>>>>//        Sleep 1
48626>>>>>
48626>>>>>        Function_Return (bOK = True)
48627>>>>>    End_Function 
48628>>>>>    
48628>>>>>    // Simplier version of the _SqlUtilCreateIntFile. It can be used if there is something wrong with the .int file and it needs
48628>>>>>    // to be refreshed by the driver. 
48628>>>>>    Function _SqlUtilRefreshIntFile Handle hTable String sDriverID String sConnectionID Boolean bAnsi Boolean bSysFile Returns Boolean        
48630>>>>>        String sOrgFormat sNewFormat
48630>>>>>        
48630>>>>>        Move False to Err
48631>>>>>        Open hTable
48633>>>>>        If (Err = True) Begin
48635>>>>>            Function_Return False
48636>>>>>        End
48636>>>>>>
48636>>>>>        
48636>>>>>        Structure_Start hTable
48637>>>>>        Structure_End hTable DF_STRUCTEND_OPT_FORCE "." ghoDbUpdateHandler
48639>>>>>    End_Function
48640>>>>>
48640>>>>>    Function _UtilDeleteCacheFile String sTableName Returns Boolean
48642>>>>>        String sDataPath sDriverID
48642>>>>>        Boolean bOK
48642>>>>>        Integer iPos
48642>>>>>
48642>>>>>        If (sTableName contains ".") Begin
48644>>>>>            Move (Pos(".", sTableName)) to iPos
48645>>>>>            Move (Mid(sTableName, Length(sTableName), (iPos +1))) to sTableName
48646>>>>>        End
48646>>>>>>
48646>>>>>
48646>>>>>        Get psDriverID to sDriverID
48647>>>>>        Get psDataPathFirstPart to sDataPath
48648>>>>>        // First delete the cache file:
48648>>>>>        Get vDeleteFile (sDataPath + sTableName + ".cch") to bOK
48649>>>>>
48649>>>>>        Function_Return bOK
48650>>>>>    End_Function
48651>>>>>
48651>>>>>    // Collects all tables from the SQL Database backend and sets the pasSQLTables property.
48651>>>>>    Procedure UtilFillSQLTables
48653>>>>>        String[] asSQLTables
48654>>>>>        String sDataBase
48654>>>>>        Integer iSize iCount
48654>>>>>
48654>>>>>        Get psDatabase to sDataBase
48655>>>>>        Get _SqlUtilEnumerateTables MSSQLDRV_ID sDataBase "" to asSQLTables
48656>>>>>        Set pasSQLDataTables to asSQLTables
48657>>>>>    End_Procedure  
48658>>>>>    
48658>>>>>    Procedure ResetFillSQLTables
48660>>>>>        String[] asSQLTables
48661>>>>>        Set pasSQLDataTables to asSQLTables
48662>>>>>    End_Procedure
48663>>>>>    
48663>>>>>    // This collects *all* filelist entries and sets the pFileListArray struct property.
48663>>>>>    Procedure UtilFillFileListStruct
48665>>>>>        tFilelist[] Tables
48665>>>>>        tFilelist[] Tables
48666>>>>>        String sRootName sLogicalName sDisplayName sDriver sNoDriverRootname
48666>>>>>        Handle hTable
48666>>>>>        Integer iItem iCount
48666>>>>>        Boolean bIsSystem bIsAlias bOpened
48666>>>>>        
48666>>>>>        Move 0 to iItem
48667>>>>>        Move 0 to hTable 
48668>>>>>        Repeat
48668>>>>>>
48668>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
48671>>>>>            // 0 = no more table in Filelist.cfg, 50 = Flexerrs.
48671>>>>>            If (hTable <> 0 and hTable <> 50) Begin  
48673>>>>>                Move False to Err
48674>>>>>                Move False to bIsSystem
48675>>>>>                Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
48678>>>>>                Get _DriverIDFromRootName sRootName to sDriver
48679>>>>>                Set Message_Text of ghoStatusPanel to ("Reading table" * String(hTable) * "RootName =" * sRootName)
48680>>>>>                Send DoAdvance of ghoProgressBar
48681>>>>>                Send Ignore_All of Error_Object_Id
48682>>>>>                Open hTable
48684>>>>>                Get_Attribute DF_FILE_OPENED         of hTable to bOpened
48687>>>>>                Get_Attribute DF_FILE_IS_SYSTEM_FILE of hTable to bIsSystem
48690>>>>>                Send Trap_All of Error_Object_Id
48691>>>>>                Close hTable
48692>>>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
48695>>>>>                Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
48698>>>>>                Get _TableNameOnly sRootName to sNoDriverRootname
48699>>>>>                Move hTable              to Tables[iItem].hTable
48700>>>>>                Move sRootName           to Tables[iItem].sRootName
48701>>>>>                Move sLogicalName        to Tables[iItem].sLogicalName
48702>>>>>                Move sDisplayName        to Tables[iItem].sDisplayName
48703>>>>>                Move sNoDriverRootname   to Tables[iItem].sNoDriverRootname
48704>>>>>                Move sDriver             to Tables[iItem].sDriver 
48705>>>>>                Move bIsSystem           to Tables[iItem].bIsSystemFile
48706>>>>>                Move (bOpened = False)   to Tables[iItem].bErrorOpening
48707>>>>>                Get _IsAliasTable hTable to Tables[iItem].bIsAlias 
48708>>>>>                Move False to Err
48709>>>>>                Increment iItem
48710>>>>>            End
48710>>>>>>
48710>>>>>        Until (hTable = 0)
48712>>>>>        
48712>>>>>        Set Message_Text of ghoStatusPanel to ""
48713>>>>>        Set pFileListArray to Tables
48714>>>>>    End_Procedure   
48715>>>>>    
48715>>>>>    // Special array search function for the tFilelistLogicalName struct.
48715>>>>>    // Used by e.g. UtilAliasToMasterTableHandle
48715>>>>>    Function CompareFileListTable tFilelistLogicalName FileListTable1 tFilelistLogicalName FileListTable2 Returns Integer
48717>>>>>        If (Lowercase(FileListTable1.sLogicalName) < Lowercase(FileListTable2.sLogicalName)) ;            Function_Return (LT)
48720>>>>>        If (Lowercase(FileListTable1.sLogicalName) > Lowercase(FileListTable2.sLogicalName)) ;            Function_Return (GT)
48723>>>>>
48723>>>>>        If (Lowercase(FileListTable1.sNoDriverRootname) < Lowercase(FileListTable2.sNoDriverRootname)) ;            Function_Return (LT)
48726>>>>>        If (Lowercase(FileListTable1.sNoDriverRootname) > Lowercase(FileListTable2.sNoDriverRootname)) ;            Function_Return (GT)
48729>>>>>            
48729>>>>>        Function_Return (EQ)
48730>>>>>    End_Function
48731>>>>>
48731>>>>>    // Finds the corresponding Master table for the passed Alias handle
48731>>>>>    Function UtilAliasToMasterTableHandle Handle hTable Returns Handle
48733>>>>>        Handle hMasterTable
48733>>>>>        String sDriver sRootNameAlias sNoDriverRootnameAlias
48733>>>>>        Boolean bIsAlias bFound bIsIntTable
48733>>>>>        Integer iSize iCount iItem 
48733>>>>>        tFilelistLogicalName[] FilelistLogicalTables
48733>>>>>        tFilelistLogicalName[] FilelistLogicalTables
48734>>>>>        tFilelistLogicalName FileListTable
48734>>>>>        tFilelistLogicalName FileListTable
48734>>>>>        
48734>>>>>        Get _IsAliasTable hTable to bIsAlias
48735>>>>>        If (bIsAlias = False) Begin
48737>>>>>            Function_Return 0
48738>>>>>        End
48738>>>>>>
48738>>>>>        
48738>>>>>        Move 0 to hMasterTable
48739>>>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootNameAlias 
48742>>>>>        Get _TableNameOnly sRootNameAlias to sNoDriverRootnameAlias
48743>>>>>        Get _IsIntEntry hTable to bIsIntTable
48744>>>>>        Get pFilelistLogicalTables  to FilelistLogicalTables
48745>>>>>        Move sNoDriverRootnameAlias to FileListTable.sLogicalName
48746>>>>>        Move sNoDriverRootnameAlias to FileListTable.sNoDriverRootname
48747>>>>>        Move (SearchArray(FileListTable, FilelistLogicalTables, Self, (RefFunc(CompareFileListTable)))) to iItem
48748>>>>>        If (iItem = -1) Begin
48750>>>>>            Function_Return 0
48751>>>>>        End
48751>>>>>>
48751>>>>>        Move (Lowercase(sNoDriverRootnameAlias) = Lowercase(FilelistLogicalTables[iItem].sNoDriverRootname) and Lowercase(FilelistLogicalTables[iItem].sNoDriverRootname) = Lowercase(FilelistLogicalTables[iItem].sLogicalName)) to bFound
48752>>>>>        If (bFound = True) Begin
48754>>>>>            Move FilelistLogicalTables[iItem].hTable to hMasterTable
48755>>>>>            Function_Return hMasterTable
48756>>>>>        End
48756>>>>>>
48756>>>>>        
48756>>>>>        Function_Return hMasterTable
48757>>>>>    End_Function
48758>>>>>     
48758>>>>>    Function pFilelistLogicalTables Returns tFilelistLogicalName
48760>>>>>        tFilelistLogicalName[] FilelistLogicalTables
48760>>>>>        tFilelistLogicalName[] FilelistLogicalTables
48761>>>>>        tFilelist[] FileListTables
48761>>>>>        tFilelist[] FileListTables
48762>>>>>        Integer iSize iCount
48762>>>>>        
48762>>>>>        Get pFileListArray to FileListTables
48763>>>>>        Move (SizeOfArray(FileListTables)) to iSize
48764>>>>>        Decrement iSize
48765>>>>>        for iCount from 0 to iSize
48771>>>>>>
48771>>>>>            Move FileListTables[iCount].bErrorOpening       to FilelistLogicalTables[iCount].bErrorOpening    
48772>>>>>            Move FileListTables[iCount].bIsAlias            to FilelistLogicalTables[iCount].bIsAlias
48773>>>>>            Move FileListTables[iCount].bIsSystemFile       to FilelistLogicalTables[iCount].bIsSystemFile
48774>>>>>            Move FileListTables[iCount].hTable              to FilelistLogicalTables[iCount].hTable
48775>>>>>            Move FileListTables[iCount].sDisplayName        to FilelistLogicalTables[iCount].sDisplayName
48776>>>>>            Move FileListTables[iCount].sDriver             to FilelistLogicalTables[iCount].sDriver
48777>>>>>            Move FileListTables[iCount].sLogicalName        to FilelistLogicalTables[iCount].sLogicalName
48778>>>>>            Move FileListTables[iCount].sNoDriverRootname   to FilelistLogicalTables[iCount].sNoDriverRootname
48779>>>>>            Move FileListTables[iCount].sRootName           to FilelistLogicalTables[iCount].sRootName
48780>>>>>        Loop
48781>>>>>>
48781>>>>>        Move (SortArray(FilelistLogicalTables)) to FilelistLogicalTables
48782>>>>>        Function_Return FilelistLogicalTables
48783>>>>>    End_Function 
48784>>>>>    
48784>>>>>    // Checks that the passed hTable number both exists in Filelist.cfg and
48784>>>>>    // that the embedded .dat file exists on disk _or_ that the SQL table exists
48784>>>>>    // if it is an SQL table
48784>>>>>    Function _UtilTableExists Handle hTable Returns Boolean
48786>>>>>        Boolean bExists bIsSQLTable
48786>>>>>        String sDataPath sRootName
48786>>>>>
48786>>>>>        Get _UtilTableNumberIsInUse hTable to bExists
48787>>>>>        If (bExists = False) Begin
48789>>>>>            Function_Return False
48790>>>>>        End
48790>>>>>>
48790>>>>>
48790>>>>>        Move False to bIsSQLTable
48791>>>>>        If (hTable > 0) Begin
48793>>>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
48796>>>>>            Move (sRootName contains ":") to bIsSQLTable
48797>>>>>        End
48797>>>>>>
48797>>>>>        If (bIsSQLTable = True) Begin
48799>>>>>            Get _UtilTableIsSql hTable to bExists
48800>>>>>            Function_Return bExists
48801>>>>>        End
48801>>>>>>
48801>>>>>        Else Begin
48802>>>>>            Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
48803>>>>>            Get vFolderFormat sDataPath to sDataPath
48804>>>>>            Get vFilePathExists (sDataPath + sRootName + ".dat") to bExists
48805>>>>>        End
48805>>>>>>
48805>>>>>
48805>>>>>        Function_Return bExists
48806>>>>>    End_Function
48807>>>>>
48807>>>>>    // Note: This variant uses the pasSQLDataTables property!
48807>>>>>    //       Thus, that property needs to have been initialized before
48807>>>>>    //       calling.
48807>>>>>    // It checks that the SQL table exists on the SQL end, *or*
48807>>>>>    // if embedded database, that the .dat file exists on disk.
48807>>>>>    Function _UtilTableExists_Ex Handle hTable Returns Boolean
48809>>>>>        Boolean bExists bIsSQLTable
48809>>>>>        String sDataPath sRootName
48809>>>>>
48809>>>>>        Get _UtilTableNumberIsInUse hTable to bExists
48810>>>>>        If (bExists = False) Begin
48812>>>>>            Function_Return False
48813>>>>>        End
48813>>>>>>
48813>>>>>
48813>>>>>        Move False to bIsSQLTable
48814>>>>>        If (hTable > 0) Begin
48816>>>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
48819>>>>>            Move (sRootName contains ":") to bIsSQLTable
48820>>>>>        End
48820>>>>>>
48820>>>>>        If (bIsSQLTable = True) Begin
48822>>>>>            Get _UtilTableIsSql_Ex hTable to bExists
48823>>>>>            Function_Return bExists
48824>>>>>        End
48824>>>>>>
48824>>>>>        Else Begin
48825>>>>>            Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
48826>>>>>            Get vFolderFormat sDataPath to sDataPath
48827>>>>>            Get vFilePathExists (sDataPath + sRootName + ".dat") to bExists
48828>>>>>        End
48828>>>>>>
48828>>>>>
48828>>>>>        Function_Return bExists
48829>>>>>    End_Function
48830>>>>>
48830>>>>>    // Pass a table handle
48830>>>>>    // Returns True if the table exists in filelist.cfg.
48830>>>>>    Function _UtilTableNumberIsInUse Handle hCheckTable Returns Boolean
48832>>>>>        Handle hTable
48832>>>>>        Boolean bFound
48832>>>>>
48832>>>>>        Move False to bFound
48833>>>>>        Move 0 to hTable
48834>>>>>        Repeat
48834>>>>>>
48834>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
48837>>>>>            If (hTable > 0) Begin
48839>>>>>                If (hTable = hCheckTable) Begin
48841>>>>>                    Move True to bFound
48842>>>>>                End
48842>>>>>>
48842>>>>>            End
48842>>>>>>
48842>>>>>            If (bFound = True) ;                Break
48845>>>>>        Until (hTable = 0)
48847>>>>>
48847>>>>>        Function_Return bFound
48848>>>>>    End_Function
48849>>>>>
48849>>>>>    // Returns number of tables in filelist.cfg.
48849>>>>>    Function _UtilNumberOfFileListTables Returns Boolean
48851>>>>>        Handle hTable
48851>>>>>        Integer iCount
48851>>>>>
48851>>>>>        Move 0 to iCount
48852>>>>>        Move 0 to hTable
48853>>>>>        Repeat
48853>>>>>>
48853>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
48856>>>>>            If (hTable > 0) Begin
48858>>>>>                Increment iCount
48859>>>>>            End
48859>>>>>>
48859>>>>>        Until (hTable = 0)
48861>>>>>
48861>>>>>        Function_Return iCount
48862>>>>>    End_Function
48863>>>>>
48863>>>>>    // DataFlex Embedded Database Data Types:
48863>>>>>    // Helper function for _UtilEnumerateColumnTypes
48863>>>>>    Function _UtilEnumerateDataFlexTypes Returns tColumnType[]
48865>>>>>        tColumnType[] ColumnType
48865>>>>>        tColumnType[] ColumnType
48866>>>>>        Integer i
48866>>>>>
48866>>>>>        Move DF_ASCII           to ColumnType[i].iSQLType
48867>>>>>        Move "ASCII"            to ColumnType[i].sSQLType
48868>>>>>        Move DF_ASCII           to ColumnType[i].iDataFlexType
48869>>>>>        Move "ASCII"            to ColumnType[i].sDataFlexType
48870>>>>>        Move "254"              to ColumnType[i].sPrecision
48871>>>>>        Increment i
48872>>>>>
48872>>>>>        Move DF_BCD             to ColumnType[i].iSQLType
48873>>>>>        Move "Numeric"          to ColumnType[i].sSQLType
48874>>>>>        Move DF_BCD             to ColumnType[i].iDataFlexType
48875>>>>>        Move "Numeric"          to ColumnType[i].sDataFlexType
48876>>>>>        Move "14.8"             to ColumnType[i].sPrecision
48877>>>>>        Increment i
48878>>>>>
48878>>>>>        Move DF_DATE            to ColumnType[i].iSQLType
48879>>>>>        Move "Date"             to ColumnType[i].sSQLType
48880>>>>>        Move DF_DATE            to ColumnType[i].iDataFlexType
48881>>>>>        Move "Date"             to ColumnType[i].sDataFlexType
48882>>>>>        Move "6.0"              to ColumnType[i].sPrecision
48883>>>>>        Move True               to ColumnType[i].bCanEditSize
48884>>>>>        Increment i
48885>>>>>
48885>>>>>        Move DF_TEXT            to ColumnType[i].iSQLType
48886>>>>>        Move "Text"             to ColumnType[i].sSQLType
48887>>>>>        Move DF_TEXT            to ColumnType[i].iDataFlexType
48888>>>>>        Move "Text"             to ColumnType[i].sDataFlexType
48889>>>>>        Move "16384"            to ColumnType[i].sPrecision
48890>>>>>        Increment i
48891>>>>>
48891>>>>>        Move DF_BINARY          to ColumnType[i].iSQLType
48892>>>>>        Move "Binary"           to ColumnType[i].sSQLType
48893>>>>>        Move DF_BINARY          to ColumnType[i].iDataFlexType
48894>>>>>        Move "Binary"           to ColumnType[i].sDataFlexType
48895>>>>>        Move "16384"            to ColumnType[i].sPrecision
48896>>>>>        Increment i
48897>>>>>
48897>>>>>        Move DF_DATETIME        to ColumnType[i].iSQLType
48898>>>>>        Move "DateTime"         to ColumnType[i].sSQLType
48899>>>>>        Move DF_DATETIME        to ColumnType[i].iDataFlexType
48900>>>>>        Move "DateTime"         to ColumnType[i].sDataFlexType
48901>>>>>        Move "23"               to ColumnType[i].sPrecision
48902>>>>>        Move True               to ColumnType[i].bCanEditSize
48903>>>>>        Increment i
48904>>>>>
48904>>>>>        Move DF_OVERLAP         to ColumnType[i].iSQLType
48905>>>>>        Move "Overlap"          to ColumnType[i].sSQLType
48906>>>>>        Move DF_OVERLAP         to ColumnType[i].iDataFlexType
48907>>>>>        Move "Overlap"          to ColumnType[i].sDataFlexType
48908>>>>>        Move "0.0"              to ColumnType[i].sPrecision
48909>>>>>
48909>>>>>        Function_Return ColumnType
48910>>>>>    End_Function
48911>>>>>
48911>>>>>    Function _UtilEnumerateDB2Types Returns tColumnType[]
48913>>>>>        tColumnType[] aColumnType
48913>>>>>        tColumnType[] aColumnType
48914>>>>>        Integer i
48914>>>>>
Including file: DB2_DRV_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\DB2_DRV_DriverDef.inc)
48914>>>>>>// Generated By The Database Update Framework
48914>>>>>>// Driver XML File: C:\Program Files\DataFlex 24.0\Lib\DB2_DRV_DriverDef.xml
48914>>>>>>// Driver COLUMN DATA TYPES
48914>>>>>>//
48914>>>>>>// Created: 2024-10-15 10:49:58,567
48914>>>>>>
48914>>>>>>            Move "bigint"                                to aColumnType[i].sSQLType
48915>>>>>>            Move -5                                      to aColumnType[i].iSQLType
48916>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48917>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48918>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
48919>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48920>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
48921>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
48922>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
48923>>>>>>            Move 14                                      to aColumnType[i].sPrecision
48924>>>>>>            Increment i
48925>>>>>>
48925>>>>>>            Move "blob"                                  to aColumnType[i].sSQLType
48926>>>>>>            Move -98                                     to aColumnType[i].iSQLType
48927>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48928>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48929>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
48930>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48931>>>>>>            Move 2147483647                              to aColumnType[i].nMaxSize
48932>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48933>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48934>>>>>>            Move 2147483647                              to aColumnType[i].sPrecision
48935>>>>>>            Increment i
48936>>>>>>
48936>>>>>>            Move "char"                                  to aColumnType[i].sSQLType
48937>>>>>>            Move 1                                       to aColumnType[i].iSQLType
48938>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48939>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48940>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48941>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48942>>>>>>            Move 254                                     to aColumnType[i].nMaxSize
48943>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48944>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48945>>>>>>            Move 254                                     to aColumnType[i].sPrecision
48946>>>>>>            Increment i
48947>>>>>>
48947>>>>>>            Move "char for bit data"                     to aColumnType[i].sSQLType
48948>>>>>>            Move -2                                      to aColumnType[i].iSQLType
48949>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48950>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48951>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48952>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48953>>>>>>            Move 254                                     to aColumnType[i].nMaxSize
48954>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48955>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48956>>>>>>            Move 254                                     to aColumnType[i].sPrecision
48957>>>>>>            Increment i
48958>>>>>>
48958>>>>>>            Move "clob"                                  to aColumnType[i].sSQLType
48959>>>>>>            Move -99                                     to aColumnType[i].iSQLType
48960>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48961>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48962>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
48963>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48964>>>>>>            Move 2147483647                              to aColumnType[i].nMaxSize
48965>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48966>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48967>>>>>>            Move 2147483647                              to aColumnType[i].sPrecision
48968>>>>>>            Increment i
48969>>>>>>
48969>>>>>>            Move "date"                                  to aColumnType[i].sSQLType
48970>>>>>>            Move 91                                      to aColumnType[i].iSQLType
48971>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
48972>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48973>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
48974>>>>>>            Move 0                                       to aColumnType[i].iMinSize
48975>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
48976>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48977>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48978>>>>>>            Move 1                                       to aColumnType[i].sPrecision
48979>>>>>>            Increment i
48980>>>>>>
48980>>>>>>            Move "dbclob"                                to aColumnType[i].sSQLType
48981>>>>>>            Move -350                                    to aColumnType[i].iSQLType
48982>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48983>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48984>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48985>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48986>>>>>>            Move 1073741823                              to aColumnType[i].nMaxSize
48987>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48988>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48989>>>>>>            Move 1073741823                              to aColumnType[i].sPrecision
48990>>>>>>            Increment i
48991>>>>>>
48991>>>>>>            Move "decimal"                               to aColumnType[i].sSQLType
48992>>>>>>            Move 3                                       to aColumnType[i].iSQLType
48993>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48994>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48995>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48996>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48997>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
48998>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
48999>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49000>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49001>>>>>>            Increment i
49002>>>>>>
49002>>>>>>            Move "double"                                to aColumnType[i].sSQLType
49003>>>>>>            Move 8                                       to aColumnType[i].iSQLType
49004>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49005>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49006>>>>>>            Move 192898100                               to aColumnType[i].iDefaultSize
49007>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49008>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49009>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49010>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49011>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49012>>>>>>            Increment i
49013>>>>>>
49013>>>>>>            Move "graphic"                               to aColumnType[i].sSQLType
49014>>>>>>            Move -95                                     to aColumnType[i].iSQLType
49015>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49016>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49017>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49018>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49019>>>>>>            Move 127                                     to aColumnType[i].nMaxSize
49020>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49021>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49022>>>>>>            Move 127                                     to aColumnType[i].sPrecision
49023>>>>>>            Increment i
49024>>>>>>
49024>>>>>>            Move "integer"                               to aColumnType[i].sSQLType
49025>>>>>>            Move 4                                       to aColumnType[i].iSQLType
49026>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49027>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49028>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49029>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49030>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49031>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49032>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49033>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49034>>>>>>            Increment i
49035>>>>>>
49035>>>>>>            Move "long varchar"                          to aColumnType[i].sSQLType
49036>>>>>>            Move -1                                      to aColumnType[i].iSQLType
49037>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49038>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49039>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49040>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49041>>>>>>            Move 32000                                   to aColumnType[i].nMaxSize
49042>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49043>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49044>>>>>>            Move 32000                                   to aColumnType[i].sPrecision
49045>>>>>>            Increment i
49046>>>>>>
49046>>>>>>            Move "long varchar for bit data"             to aColumnType[i].sSQLType
49047>>>>>>            Move -4                                      to aColumnType[i].iSQLType
49048>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49049>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49050>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49051>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49052>>>>>>            Move 32700                                   to aColumnType[i].nMaxSize
49053>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49054>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49055>>>>>>            Move 32700                                   to aColumnType[i].sPrecision
49056>>>>>>            Increment i
49057>>>>>>
49057>>>>>>            Move "long vargraphic"                       to aColumnType[i].sSQLType
49058>>>>>>            Move -97                                     to aColumnType[i].iSQLType
49059>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49060>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49061>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49062>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49063>>>>>>            Move 16350                                   to aColumnType[i].nMaxSize
49064>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49065>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49066>>>>>>            Move 16350                                   to aColumnType[i].sPrecision
49067>>>>>>            Increment i
49068>>>>>>
49068>>>>>>            Move "real"                                  to aColumnType[i].sSQLType
49069>>>>>>            Move 7                                       to aColumnType[i].iSQLType
49070>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49071>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49072>>>>>>            Move 192897884                               to aColumnType[i].iDefaultSize
49073>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49074>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49075>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49076>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49077>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49078>>>>>>            Increment i
49079>>>>>>
49079>>>>>>            Move "smallint"                              to aColumnType[i].sSQLType
49080>>>>>>            Move 5                                       to aColumnType[i].iSQLType
49081>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49082>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49083>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49084>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49085>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49086>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49087>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49088>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49089>>>>>>            Increment i
49090>>>>>>
49090>>>>>>            Move "time"                                  to aColumnType[i].sSQLType
49091>>>>>>            Move 92                                      to aColumnType[i].iSQLType
49092>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49093>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49094>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
49095>>>>>>            Move 0                                       to aColumnType[i].iMinSize
49096>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
49097>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49098>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49099>>>>>>            Move 1                                       to aColumnType[i].sPrecision
49100>>>>>>            Increment i
49101>>>>>>
49101>>>>>>            Move "timestamp"                             to aColumnType[i].sSQLType
49102>>>>>>            Move 93                                      to aColumnType[i].iSQLType
49103>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49104>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49105>>>>>>            Move 192898868                               to aColumnType[i].iDefaultSize
49106>>>>>>            Move 23                                      to aColumnType[i].iMinSize
49107>>>>>>            Move 23                                      to aColumnType[i].nMaxSize
49108>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49109>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49110>>>>>>            Move 23                                      to aColumnType[i].sPrecision
49111>>>>>>            Increment i
49112>>>>>>
49112>>>>>>            Move "varchar"                               to aColumnType[i].sSQLType
49113>>>>>>            Move 12                                      to aColumnType[i].iSQLType
49114>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49115>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49116>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49117>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49118>>>>>>            Move 32672                                   to aColumnType[i].nMaxSize
49119>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49120>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49121>>>>>>            Move 32672                                   to aColumnType[i].sPrecision
49122>>>>>>            Increment i
49123>>>>>>
49123>>>>>>            Move "varchar for bit data"                  to aColumnType[i].sSQLType
49124>>>>>>            Move -3                                      to aColumnType[i].iSQLType
49125>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49126>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49127>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49128>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49129>>>>>>            Move 32672                                   to aColumnType[i].nMaxSize
49130>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49131>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49132>>>>>>            Move 32672                                   to aColumnType[i].sPrecision
49133>>>>>>            Increment i
49134>>>>>>
49134>>>>>>            Move "vargraphic"                            to aColumnType[i].sSQLType
49135>>>>>>            Move -96                                     to aColumnType[i].iSQLType
49136>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49137>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49138>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49139>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49140>>>>>>            Move 16336                                   to aColumnType[i].nMaxSize
49141>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49142>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49143>>>>>>            Move 16336                                   to aColumnType[i].sPrecision
49144>>>>>>            Increment i
49145>>>>>>
49145>>>>>>            Move "xml"                                   to aColumnType[i].sSQLType
49146>>>>>>            Move -370                                    to aColumnType[i].iSQLType
49147>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49148>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49149>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49150>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49151>>>>>>            Move 2147483647                              to aColumnType[i].nMaxSize
49152>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49153>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49154>>>>>>            Move 2147483647                              to aColumnType[i].sPrecision
49155>>>>>>            Increment i
49156>>>>>>
49156>>>>>>
49156>>>>>//        Move SQL_DBCLOB         to ColumnType[i].iSQLType
49156>>>>>//        Move "DBCLOB"           to ColumnType[i].sSQLType
49156>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49156>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49156>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_BIGINT         to ColumnType[i].iSQLType
49156>>>>>//        Move "BIGINT"           to ColumnType[i].sSQLType
49156>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49156>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49156>>>>>//        Move "14.0"             to ColumnType[i].sPrecision
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_BLOB           to ColumnType[i].iSQLType
49156>>>>>//        Move "BLOB"             to ColumnType[i].sSQLType
49156>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49156>>>>>//        Move "BINARY"           to ColumnType[i].sDataFlexType
49156>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_CHAR           to ColumnType[i].iSQLType
49156>>>>>//        Move "CHAR"             to ColumnType[i].sSQLType
49156>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49156>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49156>>>>>//        Move "254"              to ColumnType[i].sPrecision
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        // ToDo: We need to change the sType when using this!
49156>>>>>//        Move SQL_CHARBIT            to ColumnType[i].iSQLType
49156>>>>>//        Move "CHAR FOR BIT DATA"    to ColumnType[i].sSQLType
49156>>>>>//        Move DF_BINARY              to ColumnType[i].iDataFlexType
49156>>>>>//        Move "Binary"               to ColumnType[i].sDataFlexType
49156>>>>>//        Move "254"                  to ColumnType[i].sPrecision
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_DATE           to ColumnType[i].iSQLType
49156>>>>>//        Move "DATE"             to ColumnType[i].sSQLType
49156>>>>>//        Move DF_DATE            to ColumnType[i].iDataFlexType
49156>>>>>//        Move "Date"             to ColumnType[i].sDataFlexType
49156>>>>>//        Move "6.0"              to ColumnType[i].sPrecision
49156>>>>>//        Move True               to ColumnType[i].bCanEditSize
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_CLOB           to ColumnType[i].iSQLType
49156>>>>>//        Move "CLOB"             to ColumnType[i].sSQLType
49156>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49156>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49156>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_DECIMAL        to ColumnType[i].iSQLType
49156>>>>>//        Move "DECIMAL"          to ColumnType[i].sSQLType
49156>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49156>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49156>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_DOUBLE         to ColumnType[i].iSQLType
49156>>>>>//        Move "DOUBLE"           to ColumnType[i].sSQLType
49156>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49156>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49156>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_FLOAT          to ColumnType[i].iSQLType
49156>>>>>//        Move "FLOAT"            to ColumnType[i].sSQLType
49156>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49156>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49156>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_GRAPHIC        to ColumnType[i].iSQLType
49156>>>>>//        Move "GRAPHIC"          to ColumnType[i].sSQLType
49156>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49156>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49156>>>>>//        Move "255"              to ColumnType[i].sPrecision
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_INTEGER        to ColumnType[i].iSQLType
49156>>>>>//        Move "INTEGER"          to ColumnType[i].sSQLType
49156>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49156>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49156>>>>>//        Move "9.0"              to ColumnType[i].sPrecision
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_LONGVARCHAR    to ColumnType[i].iSQLType
49156>>>>>//        Move "LONG VARCHAR"     to ColumnType[i].sSQLType
49156>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49156>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
49156>>>>>//        Move "32000"            to ColumnType[i].sPrecision
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_LONGVARCHARBIT to ColumnType[i].iSQLType
49156>>>>>//        Move "LONG VARCHAR BIT" to ColumnType[i].sSQLType
49156>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49156>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
49156>>>>>//        Move "32000"            to ColumnType[i].sPrecision
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_LONGVARGRAPHIC to ColumnType[i].iSQLType
49156>>>>>//        Move "LONG VARGRAPHIC"  to ColumnType[i].sSQLType
49156>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49156>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
49156>>>>>//        Move "32000"            to ColumnType[i].sPrecision
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_NUMERIC        to ColumnType[i].iSQLType
49156>>>>>//        Move "NUMERIC"          to ColumnType[i].sSQLType
49156>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49156>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49156>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_REAL           to ColumnType[i].iSQLType
49156>>>>>//        Move "REAL"             to ColumnType[i].sSQLType
49156>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49156>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49156>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_SMALLINT       to ColumnType[i].iSQLType
49156>>>>>//        Move "SMALLINT"         to ColumnType[i].sSQLType
49156>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49156>>>>>//        Move "NUMERIC"          to ColumnType[i].sDataFlexType
49156>>>>>//        Move "5.0"              to ColumnType[i].sPrecision
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_TIME           to ColumnType[i].iSQLType
49156>>>>>//        Move "TIME"             to ColumnType[i].sSQLType
49156>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49156>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49156>>>>>//        Move "19.0"             to ColumnType[i].sPrecision
49156>>>>>//        Move True               to ColumnType[i].bCanEditSize
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_TIMESTAMP      to ColumnType[i].iSQLType
49156>>>>>//        Move "TIMESTAMP"        to ColumnType[i].sSQLType
49156>>>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
49156>>>>>//        Move "DATETIME"         to ColumnType[i].sDataFlexType
49156>>>>>//        Move "23.6"             to ColumnType[i].sPrecision
49156>>>>>//        Move True               to ColumnType[i].bCanEditSize
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_VARCHAR        to ColumnType[i].iSQLType
49156>>>>>//        Move "VARCHAR"          to ColumnType[i].sSQLType
49156>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49156>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
49156>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        // ToDo: We need to change the sType when using this!
49156>>>>>//        Move SQL_VARCHARBIT         to ColumnType[i].iSQLType
49156>>>>>//        Move "VARCHAR FOR BIT DATA" to ColumnType[i].sSQLType
49156>>>>>//        Move DF_TEXT                to ColumnType[i].iDataFlexType
49156>>>>>//        Move "TEXT"                 to ColumnType[i].sDataFlexType
49156>>>>>//        Move "16384"                to ColumnType[i].sPrecision
49156>>>>>//        Increment i
49156>>>>>//
49156>>>>>//        Move SQL_VARGRAPHIC     to ColumnType[i].iSQLType
49156>>>>>//        Move "VARGRAPHIC"       to ColumnType[i].sSQLType
49156>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49156>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
49156>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49156>>>>>//
49156>>>>>//        Move SQL_XML            to ColumnType[i].iSQLType
49156>>>>>//        Move "XML"              to ColumnType[i].sSQLType
49156>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49156>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
49156>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49156>>>>>
49156>>>>>        Function_Return aColumnType
49157>>>>>    End_Function
49158>>>>>
49158>>>>>    // Microsoft SQL Server Database Data Types:
49158>>>>>    // Helper function for _UtilEnumerateColumnTypes
49158>>>>>    Function _UtilEnumerateMSSQLTypes String sDriverID Returns tColumnType[]
49160>>>>>        tColumnType[] aColumnType
49160>>>>>        tColumnType[] aColumnType
49161>>>>>        Integer i
49161>>>>>
49161>>>>>        If (sDriverID = MSSQLDRV_ID) Begin
Including file: MSSQLDRV_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\MSSQLDRV_DriverDef.inc)
49163>>>>>>// Generated By The Database Update Framework
49163>>>>>>// Driver XML File: C:\Program Files\DataFlex 24.0\Lib\MSSQLDRV_DriverDef.xml
49163>>>>>>// Driver COLUMN DATA TYPES
49163>>>>>>//
49163>>>>>>// Created: 2024-10-15 10:49:25,717
49163>>>>>>
49163>>>>>>            Move "bigint"                                to aColumnType[i].sSQLType
49164>>>>>>            Move -5                                      to aColumnType[i].iSQLType
49165>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49166>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49167>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49168>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49169>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49170>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49171>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49172>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49173>>>>>>            Increment i
49174>>>>>>
49174>>>>>>            Move "binary"                                to aColumnType[i].sSQLType
49175>>>>>>            Move -2                                      to aColumnType[i].iSQLType
49176>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49177>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49178>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49179>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49180>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
49181>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49182>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49183>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
49184>>>>>>            Increment i
49185>>>>>>
49185>>>>>>            Move "bit"                                   to aColumnType[i].sSQLType
49186>>>>>>            Move -7                                      to aColumnType[i].iSQLType
49187>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49188>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49189>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
49190>>>>>>            Move 0                                       to aColumnType[i].iMinSize
49191>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
49192>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49193>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49194>>>>>>            Move 1                                       to aColumnType[i].sPrecision
49195>>>>>>            Increment i
49196>>>>>>
49196>>>>>>            Move "char"                                  to aColumnType[i].sSQLType
49197>>>>>>            Move 1                                       to aColumnType[i].iSQLType
49198>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49199>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49200>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49201>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49202>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
49203>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49204>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49205>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
49206>>>>>>            Increment i
49207>>>>>>
49207>>>>>>            Move "date"                                  to aColumnType[i].sSQLType
49208>>>>>>            Move 91                                      to aColumnType[i].iSQLType
49209>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49210>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49211>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
49212>>>>>>            Move 0                                       to aColumnType[i].iMinSize
49213>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
49214>>>>>>            Move "DF_DATE"                               to aColumnType[i].sDataFlexType
49215>>>>>>            Move DF_DATE                                 to aColumnType[i].iDataFlexType
49216>>>>>>            Move 6                                       to aColumnType[i].sPrecision
49217>>>>>>            Increment i
49218>>>>>>
49218>>>>>>            Move "datetime"                              to aColumnType[i].sSQLType
49219>>>>>>            Move 93                                      to aColumnType[i].iSQLType
49220>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49221>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49222>>>>>>            Move 115808772                               to aColumnType[i].iDefaultSize
49223>>>>>>            Move 23                                      to aColumnType[i].iMinSize
49224>>>>>>            Move 23                                      to aColumnType[i].nMaxSize
49225>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49226>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49227>>>>>>            Move 23                                      to aColumnType[i].sPrecision
49228>>>>>>            Increment i
49229>>>>>>
49229>>>>>>            Move "datetime2"                             to aColumnType[i].sSQLType
49230>>>>>>            Move -200                                    to aColumnType[i].iSQLType
49231>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49232>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49233>>>>>>            Move 115808868                               to aColumnType[i].iDefaultSize
49234>>>>>>            Move 23                                      to aColumnType[i].iMinSize
49235>>>>>>            Move 23                                      to aColumnType[i].nMaxSize
49236>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49237>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49238>>>>>>            Move 23                                      to aColumnType[i].sPrecision
49239>>>>>>            Increment i
49240>>>>>>
49240>>>>>>            Move "datetimeoffset"                        to aColumnType[i].sSQLType
49241>>>>>>            Move -155                                    to aColumnType[i].iSQLType
49242>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49243>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49244>>>>>>            Move 115808964                               to aColumnType[i].iDefaultSize
49245>>>>>>            Move 34                                      to aColumnType[i].iMinSize
49246>>>>>>            Move 34                                      to aColumnType[i].nMaxSize
49247>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49248>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49249>>>>>>            Move 34                                      to aColumnType[i].sPrecision
49250>>>>>>            Increment i
49251>>>>>>
49251>>>>>>            Move "decimal"                               to aColumnType[i].sSQLType
49252>>>>>>            Move 3                                       to aColumnType[i].iSQLType
49253>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49254>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49255>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49256>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49257>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49258>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49259>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49260>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49261>>>>>>            Increment i
49262>>>>>>
49262>>>>>>            Move "float"                                 to aColumnType[i].sSQLType
49263>>>>>>            Move 6                                       to aColumnType[i].iSQLType
49264>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49265>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49266>>>>>>            Move 115808508                               to aColumnType[i].iDefaultSize
49267>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49268>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49269>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49270>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49271>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49272>>>>>>            Increment i
49273>>>>>>
49273>>>>>>            Move "image"                                 to aColumnType[i].sSQLType
49274>>>>>>            Move -4                                      to aColumnType[i].iSQLType
49275>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49276>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49277>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49278>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49279>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49280>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49281>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49282>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49283>>>>>>            Increment i
49284>>>>>>
49284>>>>>>            Move "int"                                   to aColumnType[i].sSQLType
49285>>>>>>            Move 4                                       to aColumnType[i].iSQLType
49286>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49287>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49288>>>>>>            Move 10                                      to aColumnType[i].iDefaultSize
49289>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49290>>>>>>            Move 10                                      to aColumnType[i].nMaxSize
49291>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49292>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49293>>>>>>            Move 10                                      to aColumnType[i].sPrecision
49294>>>>>>            Increment i
49295>>>>>>
49295>>>>>>            Move "money"                                 to aColumnType[i].sSQLType
49296>>>>>>            Move -204                                    to aColumnType[i].iSQLType
49297>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49298>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49299>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
49300>>>>>>            Move 0                                       to aColumnType[i].iMinSize
49301>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
49302>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49303>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49304>>>>>>            Move 1                                       to aColumnType[i].sPrecision
49305>>>>>>            Increment i
49306>>>>>>
49306>>>>>>            Move "nchar"                                 to aColumnType[i].sSQLType
49307>>>>>>            Move -8                                      to aColumnType[i].iSQLType
49308>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49309>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49310>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49311>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49312>>>>>>            Move 4000                                    to aColumnType[i].nMaxSize
49313>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49314>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49315>>>>>>            Move 4000                                    to aColumnType[i].sPrecision
49316>>>>>>            Increment i
49317>>>>>>
49317>>>>>>            Move "ntext"                                 to aColumnType[i].sSQLType
49318>>>>>>            Move -10                                     to aColumnType[i].iSQLType
49319>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49320>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49321>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49322>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49323>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49324>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49325>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49326>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49327>>>>>>            Increment i
49328>>>>>>
49328>>>>>>            Move "numeric"                               to aColumnType[i].sSQLType
49329>>>>>>            Move 2                                       to aColumnType[i].iSQLType
49330>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49331>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49332>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49333>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49334>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49335>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49336>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49337>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49338>>>>>>            Increment i
49339>>>>>>
49339>>>>>>            Move "nvarchar"                              to aColumnType[i].sSQLType
49340>>>>>>            Move -9                                      to aColumnType[i].iSQLType
49341>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49342>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49343>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49344>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49345>>>>>>            Move 4000                                    to aColumnType[i].nMaxSize
49346>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49347>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49348>>>>>>            Move 4000                                    to aColumnType[i].sPrecision
49349>>>>>>            Increment i
49350>>>>>>
49350>>>>>>            Move "nvarchar(max)"                         to aColumnType[i].sSQLType
49351>>>>>>            Move -202                                    to aColumnType[i].iSQLType
49352>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49353>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49354>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49355>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49356>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49357>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49358>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49359>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49360>>>>>>            Increment i
49361>>>>>>
49361>>>>>>            Move "real"                                  to aColumnType[i].sSQLType
49362>>>>>>            Move 7                                       to aColumnType[i].iSQLType
49363>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49364>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49365>>>>>>            Move 115809924                               to aColumnType[i].iDefaultSize
49366>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49367>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49368>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49369>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49370>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49371>>>>>>            Increment i
49372>>>>>>
49372>>>>>>            Move "smalldatetime"                         to aColumnType[i].sSQLType
49373>>>>>>            Move -206                                    to aColumnType[i].iSQLType
49374>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49375>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49376>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
49377>>>>>>            Move 0                                       to aColumnType[i].iMinSize
49378>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
49379>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49380>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49381>>>>>>            Move 1                                       to aColumnType[i].sPrecision
49382>>>>>>            Increment i
49383>>>>>>
49383>>>>>>            Move "smallint"                              to aColumnType[i].sSQLType
49384>>>>>>            Move 5                                       to aColumnType[i].iSQLType
49385>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49386>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49387>>>>>>            Move 5                                       to aColumnType[i].iDefaultSize
49388>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49389>>>>>>            Move 5                                       to aColumnType[i].nMaxSize
49390>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49391>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49392>>>>>>            Move 5                                       to aColumnType[i].sPrecision
49393>>>>>>            Increment i
49394>>>>>>
49394>>>>>>            Move "smallmoney"                            to aColumnType[i].sSQLType
49395>>>>>>            Move -205                                    to aColumnType[i].iSQLType
49396>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49397>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49398>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
49399>>>>>>            Move 0                                       to aColumnType[i].iMinSize
49400>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
49401>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49402>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49403>>>>>>            Move 1                                       to aColumnType[i].sPrecision
49404>>>>>>            Increment i
49405>>>>>>
49405>>>>>>            Move "text"                                  to aColumnType[i].sSQLType
49406>>>>>>            Move -1                                      to aColumnType[i].iSQLType
49407>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49408>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49409>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49410>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49411>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49412>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49413>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49414>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49415>>>>>>            Increment i
49416>>>>>>
49416>>>>>>            Move "time"                                  to aColumnType[i].sSQLType
49417>>>>>>            Move -154                                    to aColumnType[i].iSQLType
49418>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49419>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49420>>>>>>            Move 10                                      to aColumnType[i].iDefaultSize
49421>>>>>>            Move 10                                      to aColumnType[i].iMinSize
49422>>>>>>            Move 19                                      to aColumnType[i].nMaxSize
49423>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49424>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49425>>>>>>            Move 19                                      to aColumnType[i].sPrecision
49426>>>>>>            Increment i
49427>>>>>>
49427>>>>>>            Move "tinyint"                               to aColumnType[i].sSQLType
49428>>>>>>            Move -6                                      to aColumnType[i].iSQLType
49429>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49430>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49431>>>>>>            Move 3                                       to aColumnType[i].iDefaultSize
49432>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49433>>>>>>            Move 3                                       to aColumnType[i].nMaxSize
49434>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49435>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49436>>>>>>            Move 3                                       to aColumnType[i].sPrecision
49437>>>>>>            Increment i
49438>>>>>>
49438>>>>>>            Move "uniqueidentifier"                      to aColumnType[i].sSQLType
49439>>>>>>            Move -11                                     to aColumnType[i].iSQLType
49440>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49441>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49442>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
49443>>>>>>            Move 0                                       to aColumnType[i].iMinSize
49444>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
49445>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49446>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49447>>>>>>            Move 1                                       to aColumnType[i].sPrecision
49448>>>>>>            Increment i
49449>>>>>>
49449>>>>>>            Move "varbinary"                             to aColumnType[i].sSQLType
49450>>>>>>            Move -3                                      to aColumnType[i].iSQLType
49451>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49452>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49453>>>>>>            Move 8000                                    to aColumnType[i].iDefaultSize
49454>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49455>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
49456>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49457>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49458>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
49459>>>>>>            Increment i
49460>>>>>>
49460>>>>>>            Move "varbinary(max)"                        to aColumnType[i].sSQLType
49461>>>>>>            Move -203                                    to aColumnType[i].iSQLType
49462>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49463>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49464>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49465>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49466>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49467>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49468>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49469>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49470>>>>>>            Increment i
49471>>>>>>
49471>>>>>>            Move "varchar"                               to aColumnType[i].sSQLType
49472>>>>>>            Move 12                                      to aColumnType[i].iSQLType
49473>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49474>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49475>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49476>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49477>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
49478>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49479>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49480>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
49481>>>>>>            Increment i
49482>>>>>>
49482>>>>>>            Move "varchar(max)"                          to aColumnType[i].sSQLType
49483>>>>>>            Move -201                                    to aColumnType[i].iSQLType
49484>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49485>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49486>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49487>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49488>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49489>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49490>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49491>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49492>>>>>>            Increment i
49493>>>>>>
49493>>>>>>            Move "xml"                                   to aColumnType[i].sSQLType
49494>>>>>>            Move -152                                    to aColumnType[i].iSQLType
49495>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49496>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49497>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49498>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49499>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49500>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49501>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49502>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49503>>>>>>            Increment i
49504>>>>>>
49504>>>>>>
49504>>>>>
49504>>>>>//            Move SQL_BIGINT         to ColumnType[i].iSQLType
49504>>>>>//            Move "bigint"           to ColumnType[i].sSQLType
49504>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49504>>>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
49504>>>>>//            Move "14.0"             to ColumnType[i].sPrecision
49504>>>>>//            Move True               to ColumnType[i].bCanEditSize
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_BINARY         to ColumnType[i].iSQLType
49504>>>>>//            Move "binary"           to ColumnType[i].sSQLType
49504>>>>>//            Move DF_BINARY          to ColumnType[i].iDataFlexType
49504>>>>>//            Move "Binary"           to ColumnType[i].sDataFlexType
49504>>>>>//            Move "8000"             to ColumnType[i].sPrecision
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_BIT            to ColumnType[i].iSQLType
49504>>>>>//            Move "bit"              to ColumnType[i].sSQLType
49504>>>>>//            Move DF_ASCII           to ColumnType[i].iDataFlexType
49504>>>>>//            Move "ASCII"            to ColumnType[i].sDataFlexType
49504>>>>>//            Move "1.0"              to ColumnType[i].sPrecision // In SQL allows "1, 0, or NULL"
49504>>>>>//            Move True               to ColumnType[i].bCanEditSize
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_CHAR           to ColumnType[i].iSQLType
49504>>>>>//            Move "char"             to ColumnType[i].sSQLType
49504>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49504>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49504>>>>>//            Move "8000"             to ColumnType[i].sPrecision
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_DATE           to ColumnType[i].iSQLType
49504>>>>>//            Move "date"             to ColumnType[i].sSQLType
49504>>>>>//            Move DF_DATE            to ColumnType[i].iDataFlexType
49504>>>>>//            Move "Date"             to ColumnType[i].sDataFlexType
49504>>>>>//            Move "6.0"              to ColumnType[i].sPrecision
49504>>>>>//            Move True               to ColumnType[i].bCanEditSize
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_DATETIME       to ColumnType[i].iSQLType
49504>>>>>//            Move "datetime"         to ColumnType[i].sSQLType
49504>>>>>//            Move DF_DATETIME        to ColumnType[i].iDataFlexType
49504>>>>>//            Move "DateTime"         to ColumnType[i].sDataFlexType
49504>>>>>//            Move "23.3"             to ColumnType[i].sPrecision
49504>>>>>//            Move True               to ColumnType[i].bCanEditSize
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_TYPE_TIMESTAMP2 to ColumnType[i].iSQLType
49504>>>>>//            Move "datetime2"         to ColumnType[i].sSQLType
49504>>>>>//            Move DF_DATETIME         to ColumnType[i].iDataFlexType
49504>>>>>//            Move "DateTime"          to ColumnType[i].sDataFlexType
49504>>>>>//            Move "23.6"              to ColumnType[i].sPrecision
49504>>>>>//            Move True                to ColumnType[i].bCanEditSize
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_SS_TIMESTAMPOFFSET to ColumnType[i].iSQLType
49504>>>>>//            Move "datetimeoffset"       to ColumnType[i].sSQLType
49504>>>>>//            Move DF_DATETIME            to ColumnType[i].iDataFlexType
49504>>>>>//            Move "DateTime"             to ColumnType[i].sDataFlexType
49504>>>>>//            Move "34.0"                 to ColumnType[i].sPrecision
49504>>>>>//            Move True                   to ColumnType[i].bCanEditSize
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_DECIMAL        to ColumnType[i].iSQLType
49504>>>>>//            Move "decimal"          to ColumnType[i].sSQLType
49504>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49504>>>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
49504>>>>>//            Move "14.8"             to ColumnType[i].sPrecision
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_FLOAT          to ColumnType[i].iSQLType
49504>>>>>//            Move "float"            to ColumnType[i].sSQLType
49504>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49504>>>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
49504>>>>>//            Move "14.8"             to ColumnType[i].sPrecision
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_INTEGER        to ColumnType[i].iSQLType
49504>>>>>//            Move "int"              to ColumnType[i].sSQLType
49504>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49504>>>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
49504>>>>>//            Move "8.0"              to ColumnType[i].sPrecision
49504>>>>>//            Move True               to ColumnType[i].bCanEditSize
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_TYPE_MONEY     to ColumnType[i].iSQLType
49504>>>>>//            Move "money"            to ColumnType[i].sSQLType
49504>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49504>>>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
49504>>>>>//            Move "15.4"             to ColumnType[i].sPrecision // Studio 18.0 (!)
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_WCHAR          to ColumnType[i].iSQLType
49504>>>>>//            Move "nchar"            to ColumnType[i].sSQLType
49504>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49504>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49504>>>>>//            Move "4000"             to ColumnType[i].sPrecision
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_WLONGVARCHAR   to ColumnType[i].iSQLType
49504>>>>>//            Move "ntext"            to ColumnType[i].sSQLType
49504>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49504>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49504>>>>>//            Move "16384"            to ColumnType[i].sPrecision
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_NUMERIC        to ColumnType[i].iSQLType
49504>>>>>//            Move "numeric"          to ColumnType[i].sSQLType
49504>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49504>>>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
49504>>>>>//            Move "14.8"             to ColumnType[i].sPrecision
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_WVARCHAR       to ColumnType[i].iSQLType
49504>>>>>//            Move "nvarchar"         to ColumnType[i].sSQLType
49504>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49504>>>>>//            Move "Text"             to ColumnType[i].sDataFlexType
49504>>>>>//            Move "4000"             to ColumnType[i].sPrecision
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_VARCHARMAX     to ColumnType[i].iSQLType
49504>>>>>//            Move "nvarchar(max)"    to ColumnType[i].sSQLType
49504>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49504>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49504>>>>>//            Move "16384"            to ColumnType[i].sPrecision
49504>>>>>//            Move True               to ColumnType[i].bCanEditSize
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_REAL           to ColumnType[i].iSQLType
49504>>>>>//            Move "real"             to ColumnType[i].sSQLType
49504>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49504>>>>>//            Move "NUMERIC"          to ColumnType[i].sDataFlexType
49504>>>>>//            Move "14.8"             to ColumnType[i].sPrecision
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_TYPE_SMALLDATETIME to ColumnType[i].iSQLType
49504>>>>>//            Move "smalldatetime"        to ColumnType[i].sSQLType
49504>>>>>//            Move DF_DATETIME            to ColumnType[i].iDataFlexType
49504>>>>>//            Move "DATETIME"             to ColumnType[i].sDataFlexType
49504>>>>>//            Move "23.0"                 to ColumnType[i].sPrecision
49504>>>>>//            Move True                   to ColumnType[i].bCanEditSize
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_SMALLINT       to ColumnType[i].iSQLType
49504>>>>>//            Move "smallint"         to ColumnType[i].sSQLType
49504>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49504>>>>>//            Move "NUMERIC"          to ColumnType[i].sDataFlexType
49504>>>>>//            Move "4.0"              to ColumnType[i].sPrecision
49504>>>>>//            Move True               to ColumnType[i].bCanEditSize
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_TYPE_SMALLMONEY to ColumnType[i].iSQLType
49504>>>>>//            Move "smallmoney"        to ColumnType[i].sSQLType
49504>>>>>//            Move DF_BCD              to ColumnType[i].iDataFlexType
49504>>>>>//            Move "NUMERIC"           to ColumnType[i].sDataFlexType
49504>>>>>//            Move "10.0"              to ColumnType[i].sPrecision
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_TEXT           to ColumnType[i].iSQLType
49504>>>>>//            Move "text"             to ColumnType[i].sSQLType
49504>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49504>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49504>>>>>//            Move "8000"             to ColumnType[i].sPrecision
49504>>>>>//            Move True               to ColumnType[i].bCanEditSize
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_TIME           to ColumnType[i].iSQLType
49504>>>>>//            Move "time"             to ColumnType[i].sSQLType
49504>>>>>//            Move DF_ASCII           to ColumnType[i].iDataFlexType
49504>>>>>//            Move "ASCII"            to ColumnType[i].sDataFlexType
49504>>>>>//            Move "19.0"             to ColumnType[i].sPrecision
49504>>>>>//            Move True               to ColumnType[i].bCanEditSize
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_TINYINT        to ColumnType[i].iSQLType
49504>>>>>//            Move "tinyint"          to ColumnType[i].sSQLType
49504>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49504>>>>>//            Move "NUMERIC"          to ColumnType[i].sDataFlexType
49504>>>>>//            Move "2.0"              to ColumnType[i].sPrecision
49504>>>>>//            Move True               to ColumnType[i].bCanEditSize
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_GUID           to ColumnType[i].iSQLType
49504>>>>>//            Move "uniqueidentifier" to ColumnType[i].sSQLType
49504>>>>>//            Move DF_ASCII           to ColumnType[i].iDataFlexType
49504>>>>>//            Move "ASCII"            to ColumnType[i].sDataFlexType
49504>>>>>//            Move "36"               to ColumnType[i].sPrecision
49504>>>>>//            Move True               to ColumnType[i].bCanEditSize
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_VARBINARY      to ColumnType[i].iSQLType
49504>>>>>//            Move "varbinary"        to ColumnType[i].sSQLType
49504>>>>>//            Move DF_BINARY          to ColumnType[i].iDataFlexType
49504>>>>>//            Move "BINARY"           to ColumnType[i].sDataFlexType
49504>>>>>//            Move "16384"            to ColumnType[i].sPrecision
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_LONGVARBINARY  to ColumnType[i].iSQLType
49504>>>>>//            Move "varbinary(max)"   to ColumnType[i].sSQLType
49504>>>>>//            Move DF_BINARY          to ColumnType[i].iDataFlexType
49504>>>>>//            Move "BINARY"           to ColumnType[i].sDataFlexType
49504>>>>>//            Move "16384"            to ColumnType[i].sPrecision
49504>>>>>//            Move True               to ColumnType[i].bCanEditSize
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_VARCHAR        to ColumnType[i].iSQLType
49504>>>>>//            Move "varchar"          to ColumnType[i].sSQLType
49504>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType // ToDo: Under 255 = ASCII type! How to deal with this?
49504>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49504>>>>>//            Move "8000"             to ColumnType[i].sPrecision
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_LONGVARCHAR    to ColumnType[i].iSQLType
49504>>>>>//            Move "varchar(max)"     to ColumnType[i].sSQLType
49504>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49504>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49504>>>>>//            Move "16384"            to ColumnType[i].sPrecision
49504>>>>>//            Move True               to ColumnType[i].bCanEditSize
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_SS_XML         to ColumnType[i].iSQLType
49504>>>>>//            Move "xml"              to ColumnType[i].sSQLType
49504>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49504>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49504>>>>>//            Move "16384"            to ColumnType[i].sPrecision
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_TYPE_DATE      to ColumnType[i].iSQLType
49504>>>>>//            Move "DATE"             to ColumnType[i].sSQLType
49504>>>>>//            Move DF_DATE            to ColumnType[i].iDataFlexType
49504>>>>>//            Move "date"             to ColumnType[i].sDataFlexType
49504>>>>>//            Move "6.0"              to ColumnType[i].sPrecision
49504>>>>>//            Move True               to ColumnType[i].bCanEditSize
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_TYPE_TIME      to ColumnType[i].iSQLType
49504>>>>>//            Move "time"             to ColumnType[i].sSQLType
49504>>>>>//            Move DF_ASCII           to ColumnType[i].iDataFlexType
49504>>>>>//            Move "ASCII"            to ColumnType[i].sDataFlexType
49504>>>>>//            Move "8.7"              to ColumnType[i].sPrecision
49504>>>>>//            Move True               to ColumnType[i].bCanEditSize
49504>>>>>//            Increment i
49504>>>>>//
49504>>>>>//            Move SQL_TYPE_TIMESTAMP to ColumnType[i].iSQLType
49504>>>>>//            Move "datetime"         to ColumnType[i].sSQLType
49504>>>>>//            Move DF_DATETIME        to ColumnType[i].iDataFlexType
49504>>>>>//            Move "DateTime"         to ColumnType[i].sDataFlexType
49504>>>>>//            Move "23.6"             to ColumnType[i].sPrecision
49504>>>>>//            Move True               to ColumnType[i].bCanEditSize
49504>>>>>//            Increment i
49504>>>>>
49504>>>>>        End
49504>>>>>>
49504>>>>>
49504>>>>>        Function_Return aColumnType
49505>>>>>    End_Function
49506>>>>>
49506>>>>>    // MySQL Data Types
49506>>>>>    Function _UtilEnumerateMySQLTypes Returns tColumnType[]
49508>>>>>        tColumnType[] aColumnType
49508>>>>>        tColumnType[] aColumnType
49509>>>>>        Integer i
49509>>>>>
Including file: mdsmysql_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\mdsmysql_DriverDef.inc)
49509>>>>>>// Generated By The Database Update Framework
49509>>>>>>// Driver XML File: C:\Program Files (x86)\DataFlex 19.0\Bin\mdsmysql_DriverDef.xml
49509>>>>>>// Driver COLUMN DATA TYPES
49509>>>>>>//
49509>>>>>>// Created: 2018-03-14 23:46:49.593
49509>>>>>>
49509>>>>>>            Move "bigint"                                to aColumnType[i].sSQLType
49510>>>>>>            Move 8                                       to aColumnType[i].iSQLType
49511>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49512>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49513>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49514>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49515>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49516>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49517>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49518>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49519>>>>>>            Increment i
49520>>>>>>
49520>>>>>>            Move "bit"                                   to aColumnType[i].sSQLType
49521>>>>>>            Move 16                                      to aColumnType[i].iSQLType
49522>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49523>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49524>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49525>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49526>>>>>>            Move 64                                      to aColumnType[i].nMaxSize
49527>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49528>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49529>>>>>>            Move 64                                      to aColumnType[i].sPrecision
49530>>>>>>            Increment i
49531>>>>>>
49531>>>>>>            Move "blob"                                  to aColumnType[i].sSQLType
49532>>>>>>            Move 252                                     to aColumnType[i].iSQLType
49533>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49534>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49535>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49536>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49537>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49538>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49539>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49540>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49541>>>>>>            Increment i
49542>>>>>>
49542>>>>>>            Move "char"                                  to aColumnType[i].sSQLType
49543>>>>>>            Move 254                                     to aColumnType[i].iSQLType
49544>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49545>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49546>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49547>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49548>>>>>>            Move 255                                     to aColumnType[i].nMaxSize
49549>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49550>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49551>>>>>>            Move 255                                     to aColumnType[i].sPrecision
49552>>>>>>            Increment i
49553>>>>>>
49553>>>>>>            Move "date"                                  to aColumnType[i].sSQLType
49554>>>>>>            Move 10                                      to aColumnType[i].iSQLType
49555>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49556>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49557>>>>>>            Move 6                                       to aColumnType[i].iDefaultSize
49558>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49559>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49560>>>>>>            Move "DF_DATE"                               to aColumnType[i].sDataFlexType
49561>>>>>>            Move DF_DATE                                 to aColumnType[i].iDataFlexType
49562>>>>>>            Move 6                                       to aColumnType[i].sPrecision
49563>>>>>>            Increment i
49564>>>>>>
49564>>>>>>            Move "datetime"                              to aColumnType[i].sSQLType
49565>>>>>>            Move 12                                      to aColumnType[i].iSQLType
49566>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49567>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49568>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
49569>>>>>>            Move 6                                       to aColumnType[i].iMinSize
49570>>>>>>            Move 23                                      to aColumnType[i].nMaxSize
49571>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49572>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49573>>>>>>            Move 23                                      to aColumnType[i].sPrecision
49574>>>>>>            Increment i
49575>>>>>>
49575>>>>>>            Move "decimal"                               to aColumnType[i].sSQLType
49576>>>>>>            Move 246                                     to aColumnType[i].iSQLType
49577>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49578>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49579>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49580>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49581>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49582>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49583>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49584>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49585>>>>>>            Increment i
49586>>>>>>
49586>>>>>>            Move "decimal-MySQL4"                        to aColumnType[i].sSQLType
49587>>>>>>            Move 0                                       to aColumnType[i].iSQLType
49588>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49589>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49590>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49591>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49592>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49593>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49594>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49595>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49596>>>>>>            Increment i
49597>>>>>>
49597>>>>>>            Move "double"                                to aColumnType[i].sSQLType
49598>>>>>>            Move 5                                       to aColumnType[i].iSQLType
49599>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49600>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49601>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49602>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49603>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49604>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49605>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49606>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49607>>>>>>            Increment i
49608>>>>>>
49608>>>>>>            Move "enum"                                  to aColumnType[i].sSQLType
49609>>>>>>            Move 247                                     to aColumnType[i].iSQLType
49610>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49611>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49612>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49613>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49614>>>>>>            Move 255                                     to aColumnType[i].nMaxSize
49615>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49616>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49617>>>>>>            Move 255                                     to aColumnType[i].sPrecision
49618>>>>>>            Increment i
49619>>>>>>
49619>>>>>>            Move "float"                                 to aColumnType[i].sSQLType
49620>>>>>>            Move 4                                       to aColumnType[i].iSQLType
49621>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49622>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49623>>>>>>            Move 4                                       to aColumnType[i].iDefaultSize
49624>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49625>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49626>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49627>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49628>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49629>>>>>>            Increment i
49630>>>>>>
49630>>>>>>            Move "int"                                   to aColumnType[i].sSQLType
49631>>>>>>            Move 3                                       to aColumnType[i].iSQLType
49632>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49633>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49634>>>>>>            Move 10                                      to aColumnType[i].iDefaultSize
49635>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49636>>>>>>            Move 11                                      to aColumnType[i].nMaxSize
49637>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49638>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49639>>>>>>            Move 11                                      to aColumnType[i].sPrecision
49640>>>>>>            Increment i
49641>>>>>>
49641>>>>>>            Move "longblob"                              to aColumnType[i].sSQLType
49642>>>>>>            Move 251                                     to aColumnType[i].iSQLType
49643>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49644>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49645>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49646>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49647>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49648>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49649>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49650>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49651>>>>>>            Increment i
49652>>>>>>
49652>>>>>>            Move "longtext"                              to aColumnType[i].sSQLType
49653>>>>>>            Move -251                                    to aColumnType[i].iSQLType
49654>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49655>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49656>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49657>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49658>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49659>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49660>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49661>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49662>>>>>>            Increment i
49663>>>>>>
49663>>>>>>            Move "mediumblob"                            to aColumnType[i].sSQLType
49664>>>>>>            Move 250                                     to aColumnType[i].iSQLType
49665>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49666>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49667>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49668>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49669>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49670>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49671>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49672>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49673>>>>>>            Increment i
49674>>>>>>
49674>>>>>>            Move "mediumint"                             to aColumnType[i].sSQLType
49675>>>>>>            Move 9                                       to aColumnType[i].iSQLType
49676>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49677>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49678>>>>>>            Move 8                                       to aColumnType[i].iDefaultSize
49679>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49680>>>>>>            Move 9                                       to aColumnType[i].nMaxSize
49681>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49682>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49683>>>>>>            Move 9                                       to aColumnType[i].sPrecision
49684>>>>>>            Increment i
49685>>>>>>
49685>>>>>>            Move "mediumtext"                            to aColumnType[i].sSQLType
49686>>>>>>            Move -250                                    to aColumnType[i].iSQLType
49687>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49688>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49689>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49690>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49691>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49692>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49693>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49694>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49695>>>>>>            Increment i
49696>>>>>>
49696>>>>>>            Move "set"                                   to aColumnType[i].sSQLType
49697>>>>>>            Move 248                                     to aColumnType[i].iSQLType
49698>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49699>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49700>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49701>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49702>>>>>>            Move 255                                     to aColumnType[i].nMaxSize
49703>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49704>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49705>>>>>>            Move 255                                     to aColumnType[i].sPrecision
49706>>>>>>            Increment i
49707>>>>>>
49707>>>>>>            Move "smallint"                              to aColumnType[i].sSQLType
49708>>>>>>            Move 2                                       to aColumnType[i].iSQLType
49709>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49710>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49711>>>>>>            Move 5                                       to aColumnType[i].iDefaultSize
49712>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49713>>>>>>            Move 6                                       to aColumnType[i].nMaxSize
49714>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49715>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49716>>>>>>            Move 6                                       to aColumnType[i].sPrecision
49717>>>>>>            Increment i
49718>>>>>>
49718>>>>>>            Move "text"                                  to aColumnType[i].sSQLType
49719>>>>>>            Move -252                                    to aColumnType[i].iSQLType
49720>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49721>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49722>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49723>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49724>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49725>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49726>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49727>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49728>>>>>>            Increment i
49729>>>>>>
49729>>>>>>            Move "time"                                  to aColumnType[i].sSQLType
49730>>>>>>            Move 11                                      to aColumnType[i].iSQLType
49731>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49732>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49733>>>>>>            Move 10                                      to aColumnType[i].iDefaultSize
49734>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49735>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49736>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49737>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49738>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49739>>>>>>            Increment i
49740>>>>>>
49740>>>>>>            Move "timestamp"                             to aColumnType[i].sSQLType
49741>>>>>>            Move 7                                       to aColumnType[i].iSQLType
49742>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49743>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49744>>>>>>            Move 6                                       to aColumnType[i].iDefaultSize
49745>>>>>>            Move 6                                       to aColumnType[i].iMinSize
49746>>>>>>            Move 23                                      to aColumnType[i].nMaxSize
49747>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49748>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49749>>>>>>            Move 23                                      to aColumnType[i].sPrecision
49750>>>>>>            Increment i
49751>>>>>>
49751>>>>>>            Move "tinyblob"                              to aColumnType[i].sSQLType
49752>>>>>>            Move 249                                     to aColumnType[i].iSQLType
49753>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49754>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49755>>>>>>            Move 255                                     to aColumnType[i].iDefaultSize
49756>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49757>>>>>>            Move 255                                     to aColumnType[i].nMaxSize
49758>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49759>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49760>>>>>>            Move 255                                     to aColumnType[i].sPrecision
49761>>>>>>            Increment i
49762>>>>>>
49762>>>>>>            Move "tinyint"                               to aColumnType[i].sSQLType
49763>>>>>>            Move 1                                       to aColumnType[i].iSQLType
49764>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49765>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49766>>>>>>            Move 4                                       to aColumnType[i].iDefaultSize
49767>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49768>>>>>>            Move 4                                       to aColumnType[i].nMaxSize
49769>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49770>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49771>>>>>>            Move 4                                       to aColumnType[i].sPrecision
49772>>>>>>            Increment i
49773>>>>>>
49773>>>>>>            Move "tinytext"                              to aColumnType[i].sSQLType
49774>>>>>>            Move -249                                    to aColumnType[i].iSQLType
49775>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49776>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49777>>>>>>            Move 255                                     to aColumnType[i].iDefaultSize
49778>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49779>>>>>>            Move 255                                     to aColumnType[i].nMaxSize
49780>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49781>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49782>>>>>>            Move 255                                     to aColumnType[i].sPrecision
49783>>>>>>            Increment i
49784>>>>>>
49784>>>>>>            Move "varchar"                               to aColumnType[i].sSQLType
49785>>>>>>            Move 253                                     to aColumnType[i].iSQLType
49786>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49787>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49788>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49789>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49790>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49791>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49792>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49793>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49794>>>>>>            Increment i
49795>>>>>>
49795>>>>>>            Move "year"                                  to aColumnType[i].sSQLType
49796>>>>>>            Move 13                                      to aColumnType[i].iSQLType
49797>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49798>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49799>>>>>>            Move 4                                       to aColumnType[i].iDefaultSize
49800>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49801>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49802>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49803>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49804>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49805>>>>>>            Increment i
49806>>>>>>
49806>>>>>>
49806>>>>>
49806>>>>>//        Move eMySQL_LONGLONG    to ColumnType[i].iSQLType
49806>>>>>//        Move "bigint"           to ColumnType[i].sSQLType
49806>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49806>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49806>>>>>//        Move "14.0"             to ColumnType[i].sPrecision
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_BIT         to ColumnType[i].iSQLType
49806>>>>>//        Move "bit"              to ColumnType[i].sSQLType
49806>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49806>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49806>>>>>//        Move "4.0"              to ColumnType[i].sPrecision // In SQL allows "1, 0, or NULL"
49806>>>>>//        Move True               to ColumnType[i].bCanEditSize
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_BLOB        to ColumnType[i].iSQLType
49806>>>>>//        Move "blob"             to ColumnType[i].sSQLType
49806>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49806>>>>>//        Move "BINARY"           to ColumnType[i].sDataFlexType
49806>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_STRING      to ColumnType[i].iSQLType
49806>>>>>//        Move "char"             to ColumnType[i].sSQLType
49806>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49806>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
49806>>>>>//        Move "254"              to ColumnType[i].sPrecision
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_DATE        to ColumnType[i].iSQLType
49806>>>>>//        Move "date"             to ColumnType[i].sSQLType
49806>>>>>//        Move DF_DATE            to ColumnType[i].iDataFlexType
49806>>>>>//        Move "Date"             to ColumnType[i].sDataFlexType
49806>>>>>//        Move "6.0"              to ColumnType[i].sPrecision
49806>>>>>//        Move True               to ColumnType[i].bCanEditSize
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_DATETIME    to ColumnType[i].iSQLType
49806>>>>>//        Move "datetime"         to ColumnType[i].sSQLType
49806>>>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
49806>>>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
49806>>>>>//        Move "23.0"             to ColumnType[i].sPrecision
49806>>>>>//        Move True               to ColumnType[i].bCanEditSize
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_DECIMAL     to ColumnType[i].iSQLType
49806>>>>>//        Move "decimal"          to ColumnType[i].sSQLType
49806>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49806>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49806>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_DOUBLE      to ColumnType[i].iSQLType
49806>>>>>//        Move "double"           to ColumnType[i].sSQLType
49806>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49806>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49806>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_ENUM        to ColumnType[i].iSQLType
49806>>>>>//        Move "enum"             to ColumnType[i].sSQLType
49806>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49806>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49806>>>>>//        Move "254"              to ColumnType[i].sPrecision
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_FLOAT       to ColumnType[i].iSQLType
49806>>>>>//        Move "float"            to ColumnType[i].sSQLType
49806>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49806>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49806>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_INT24       to ColumnType[i].iSQLType
49806>>>>>//        Move "int"              to ColumnType[i].sSQLType
49806>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49806>>>>>//        Move "NUMERIC"          to ColumnType[i].sDataFlexType
49806>>>>>//        Move "11.0"             to ColumnType[i].sPrecision
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_LONG_BLOB   to ColumnType[i].iSQLType
49806>>>>>//        Move "longblob"         to ColumnType[i].sSQLType
49806>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49806>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
49806>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_LONG_TEXT   to ColumnType[i].iSQLType
49806>>>>>//        Move "longtext"         to ColumnType[i].sSQLType
49806>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49806>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49806>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_MEDIUM_BLOB to ColumnType[i].iSQLType
49806>>>>>//        Move "mediumblob"       to ColumnType[i].sSQLType
49806>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49806>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
49806>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_INT24       to ColumnType[i].iSQLType
49806>>>>>//        Move "mediumint"        to ColumnType[i].sSQLType
49806>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49806>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49806>>>>>//        Move "9.0"              to ColumnType[i].sPrecision
49806>>>>>//
49806>>>>>//        Move eMySQL_MEDIUM_TEXT to ColumnType[i].iSQLType
49806>>>>>//        Move "mediumtext"       to ColumnType[i].sSQLType
49806>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49806>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49806>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_SET         to ColumnType[i].iSQLType
49806>>>>>//        Move "set"              to ColumnType[i].sSQLType
49806>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49806>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49806>>>>>//        Move "254"              to ColumnType[i].sPrecision
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_SHORT       to ColumnType[i].iSQLType
49806>>>>>//        Move "smallint"         to ColumnType[i].sSQLType
49806>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49806>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49806>>>>>//        Move "6.0"              to ColumnType[i].sPrecision
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_TEXT        to ColumnType[i].iSQLType
49806>>>>>//        Move "text"             to ColumnType[i].sSQLType
49806>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49806>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49806>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_TIME        to ColumnType[i].iSQLType
49806>>>>>//        Move "time"             to ColumnType[i].sSQLType
49806>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49806>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49806>>>>>//        Move "10.0"             to ColumnType[i].sPrecision
49806>>>>>//        Move True               to ColumnType[i].bCanEditSize
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_TIMESTAMP   to ColumnType[i].iSQLType
49806>>>>>//        Move "timestamp"        to ColumnType[i].sSQLType
49806>>>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
49806>>>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
49806>>>>>//        Move "23.0"             to ColumnType[i].sPrecision
49806>>>>>//        Move True               to ColumnType[i].bCanEditSize
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_TINY_BLOB   to ColumnType[i].iSQLType
49806>>>>>//        Move "tinyblob"         to ColumnType[i].sSQLType
49806>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49806>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
49806>>>>>//        Move "254"              to ColumnType[i].sPrecision
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_TINY        to ColumnType[i].iSQLType
49806>>>>>//        Move "tinyint"          to ColumnType[i].sSQLType
49806>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49806>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49806>>>>>//        Move "4.0"              to ColumnType[i].sPrecision
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_TINY_TEXT   to ColumnType[i].iSQLType
49806>>>>>//        Move "tinytext"         to ColumnType[i].sSQLType
49806>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49806>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49806>>>>>//        Move "254"              to ColumnType[i].sPrecision
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_VAR_STRING  to ColumnType[i].iSQLType
49806>>>>>//        Move "varchar"          to ColumnType[i].sSQLType
49806>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49806>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49806>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49806>>>>>//        Increment i
49806>>>>>//
49806>>>>>//        Move eMySQL_YEAR        to ColumnType[i].iSQLType
49806>>>>>//        Move "year"             to ColumnType[i].sSQLType
49806>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49806>>>>>//        Move "NUMERIC"          to ColumnType[i].sDataFlexType
49806>>>>>//        Move "4.0"              to ColumnType[i].sPrecision
49806>>>>>//        Move True               to ColumnType[i].bCanEditSize
49806>>>>>//        Increment i
49806>>>>>
49806>>>>>        Function_Return aColumnType
49807>>>>>    End_Function
49808>>>>>
49808>>>>>    // Oracle Data Types
49808>>>>>    Function _UtilEnumerateOracleTypes Returns tColumnType[]
49810>>>>>        tColumnType[] aColumnType
49810>>>>>        tColumnType[] aColumnType
49811>>>>>        Integer i
49811>>>>>
Including file: ora_drv_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ora_drv_DriverDef.inc)
49811>>>>>>// Generated By The Database Update Framework
49811>>>>>>// Driver XML File: C:\Program Files (x86)\DataFlex 19.0\Bin\ora_drv_DriverDef.xml
49811>>>>>>// Driver COLUMN DATA TYPES
49811>>>>>>//
49811>>>>>>// Created: 2018-03-14 23:47:34.82
49811>>>>>>
49811>>>>>>            Move "blob"                                  to aColumnType[i].sSQLType
49812>>>>>>            Move 113                                     to aColumnType[i].iSQLType
49813>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49814>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49815>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49816>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49817>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49818>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49819>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49820>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49821>>>>>>            Increment i
49822>>>>>>
49822>>>>>>            Move "char"                                  to aColumnType[i].sSQLType
49823>>>>>>            Move 96                                      to aColumnType[i].iSQLType
49824>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49825>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49826>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49827>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49828>>>>>>            Move 2000                                    to aColumnType[i].nMaxSize
49829>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49830>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49831>>>>>>            Move 2000                                    to aColumnType[i].sPrecision
49832>>>>>>            Increment i
49833>>>>>>
49833>>>>>>            Move "clob"                                  to aColumnType[i].sSQLType
49834>>>>>>            Move 112                                     to aColumnType[i].iSQLType
49835>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49836>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49837>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49838>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49839>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49840>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49841>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49842>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49843>>>>>>            Increment i
49844>>>>>>
49844>>>>>>            Move "date"                                  to aColumnType[i].sSQLType
49845>>>>>>            Move 12                                      to aColumnType[i].iSQLType
49846>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49847>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49848>>>>>>            Move 6                                       to aColumnType[i].iDefaultSize
49849>>>>>>            Move 6                                       to aColumnType[i].iMinSize
49850>>>>>>            Move 23                                      to aColumnType[i].nMaxSize
49851>>>>>>            Move "DF_DATE"                               to aColumnType[i].sDataFlexType
49852>>>>>>            Move DF_DATE                                 to aColumnType[i].iDataFlexType
49853>>>>>>            Move 6                                       to aColumnType[i].sPrecision
49854>>>>>>            Increment i
49855>>>>>>
49855>>>>>>            Move "float"                                 to aColumnType[i].sSQLType
49856>>>>>>            Move 4                                       to aColumnType[i].iSQLType
49857>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49858>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49859>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49860>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49861>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49862>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49863>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49864>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49865>>>>>>            Increment i
49866>>>>>>
49866>>>>>>            Move "int"                                   to aColumnType[i].sSQLType
49867>>>>>>            Move 3                                       to aColumnType[i].iSQLType
49868>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49869>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49870>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49871>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49872>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49873>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49874>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49875>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49876>>>>>>            Increment i
49877>>>>>>
49877>>>>>>            Move "intervalds"                            to aColumnType[i].sSQLType
49878>>>>>>            Move 190                                     to aColumnType[i].iSQLType
49879>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49880>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49881>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
49882>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49883>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49884>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49885>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49886>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49887>>>>>>            Increment i
49888>>>>>>
49888>>>>>>            Move "intervalym"                            to aColumnType[i].sSQLType
49889>>>>>>            Move 189                                     to aColumnType[i].iSQLType
49890>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49891>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49892>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
49893>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49894>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49895>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49896>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49897>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49898>>>>>>            Increment i
49899>>>>>>
49899>>>>>>            Move "long"                                  to aColumnType[i].sSQLType
49900>>>>>>            Move 8                                       to aColumnType[i].iSQLType
49901>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49902>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49903>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49904>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49905>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49906>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49907>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49908>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49909>>>>>>            Increment i
49910>>>>>>
49910>>>>>>            Move "longraw"                               to aColumnType[i].sSQLType
49911>>>>>>            Move 24                                      to aColumnType[i].iSQLType
49912>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49913>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49914>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49915>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49916>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49917>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49918>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49919>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49920>>>>>>            Increment i
49921>>>>>>
49921>>>>>>            Move "nchar"                                 to aColumnType[i].sSQLType
49922>>>>>>            Move 286                                     to aColumnType[i].iSQLType
49923>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49924>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49925>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49926>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49927>>>>>>            Move 2000                                    to aColumnType[i].nMaxSize
49928>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49929>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49930>>>>>>            Move 2000                                    to aColumnType[i].sPrecision
49931>>>>>>            Increment i
49932>>>>>>
49932>>>>>>            Move "nclob"                                 to aColumnType[i].sSQLType
49933>>>>>>            Move 288                                     to aColumnType[i].iSQLType
49934>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49935>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49936>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49937>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49938>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49939>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49940>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49941>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49942>>>>>>            Increment i
49943>>>>>>
49943>>>>>>            Move "number"                                to aColumnType[i].sSQLType
49944>>>>>>            Move 2                                       to aColumnType[i].iSQLType
49945>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49946>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49947>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49948>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49949>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49950>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49951>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49952>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49953>>>>>>            Increment i
49954>>>>>>
49954>>>>>>            Move "nvarchar2"                             to aColumnType[i].sSQLType
49955>>>>>>            Move 287                                     to aColumnType[i].iSQLType
49956>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49957>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49958>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49959>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49960>>>>>>            Move 4000                                    to aColumnType[i].nMaxSize
49961>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49962>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49963>>>>>>            Move 4000                                    to aColumnType[i].sPrecision
49964>>>>>>            Increment i
49965>>>>>>
49965>>>>>>            Move "raw"                                   to aColumnType[i].sSQLType
49966>>>>>>            Move 23                                      to aColumnType[i].iSQLType
49967>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49968>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49969>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49970>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49971>>>>>>            Move 2000                                    to aColumnType[i].nMaxSize
49972>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49973>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49974>>>>>>            Move 2000                                    to aColumnType[i].sPrecision
49975>>>>>>            Increment i
49976>>>>>>
49976>>>>>>            Move "timestamp"                             to aColumnType[i].sSQLType
49977>>>>>>            Move 187                                     to aColumnType[i].iSQLType
49978>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49979>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49980>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
49981>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49982>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49983>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49984>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49985>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49986>>>>>>            Increment i
49987>>>>>>
49987>>>>>>            Move "timestampltz"                          to aColumnType[i].sSQLType
49988>>>>>>            Move 232                                     to aColumnType[i].iSQLType
49989>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49990>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49991>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
49992>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49993>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49994>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49995>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49996>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49997>>>>>>            Increment i
49998>>>>>>
49998>>>>>>            Move "timestamptz"                           to aColumnType[i].sSQLType
49999>>>>>>            Move 188                                     to aColumnType[i].iSQLType
50000>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
50001>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50002>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
50003>>>>>>            Move -1                                      to aColumnType[i].iMinSize
50004>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
50005>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
50006>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
50007>>>>>>            Move -1                                      to aColumnType[i].sPrecision
50008>>>>>>            Increment i
50009>>>>>>
50009>>>>>>            Move "varchar2"                              to aColumnType[i].sSQLType
50010>>>>>>            Move 1                                       to aColumnType[i].iSQLType
50011>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50012>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50013>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
50014>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50015>>>>>>            Move 4000                                    to aColumnType[i].nMaxSize
50016>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50017>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50018>>>>>>            Move 4000                                    to aColumnType[i].sPrecision
50019>>>>>>            Increment i
50020>>>>>>
50020>>>>>>
50020>>>>>
50020>>>>>//        Move eOracle_BLOB       to ColumnType[i].iSQLType
50020>>>>>//        Move "BLOB"             to ColumnType[i].sSQLType
50020>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
50020>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
50020>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50020>>>>>//        Increment i
50020>>>>>//
50020>>>>>//        Move eOracle_CHAR       to ColumnType[i].iSQLType
50020>>>>>//        Move "CHAR"             to ColumnType[i].sSQLType
50020>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
50020>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
50020>>>>>//        Move "2000"             to ColumnType[i].sPrecision
50020>>>>>//        Increment i
50020>>>>>//
50020>>>>>//        Move eOracle_CLOB       to ColumnType[i].iSQLType
50020>>>>>//        Move "CLOB"             to ColumnType[i].sSQLType
50020>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
50020>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
50020>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50020>>>>>//        Increment i
50020>>>>>//
50020>>>>>//        Move eOracle_DATE       to ColumnType[i].iSQLType
50020>>>>>//        Move "DATE"             to ColumnType[i].sSQLType
50020>>>>>//        Move DF_Date            to ColumnType[i].iDataFlexType
50020>>>>>//        Move "Date"             to ColumnType[i].sDataFlexType
50020>>>>>//        Move "6.0"              to ColumnType[i].sPrecision
50020>>>>>//        Move True               to ColumnType[i].bCanEditSize
50020>>>>>//        Increment i
50020>>>>>//
50020>>>>>//        Move eOracle_FLOAT      to ColumnType[i].iSQLType
50020>>>>>//        Move "FLOAT"            to ColumnType[i].sSQLType
50020>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
50020>>>>>//        Move "Number"           to ColumnType[i].sDataFlexType
50020>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
50020>>>>>//        Increment i
50020>>>>>//
50020>>>>>//        Move eOracle_INT        to ColumnType[i].iSQLType
50020>>>>>//        Move "INT"              to ColumnType[i].sSQLType
50020>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
50020>>>>>//        Move "Number"           to ColumnType[i].sDataFlexType
50020>>>>>//        Move "14.0"             to ColumnType[i].sPrecision
50020>>>>>//        Increment i
50020>>>>>//
50020>>>>>//        Move eOracle_INTERVALDS to ColumnType[i].iSQLType
50020>>>>>//        Move "INTERVALDAYTOSEC" to ColumnType[i].sSQLType
50020>>>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
50020>>>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
50020>>>>>//        Move "23.0"             to ColumnType[i].sPrecision
50020>>>>>//        Move True               to ColumnType[i].bCanEditSize
50020>>>>>//        Increment i
50020>>>>>//
50020>>>>>//        Move eOracle_INTERVALYM  to ColumnType[i].iSQLType
50020>>>>>//        Move "INTERVALYEARTOMON" to ColumnType[i].sSQLType
50020>>>>>//        Move DF_DATETIME         to ColumnType[i].iDataFlexType
50020>>>>>//        Move "DateTime"          to ColumnType[i].sDataFlexType
50020>>>>>//        Move "23.0"              to ColumnType[i].sPrecision
50020>>>>>//        Move True                to ColumnType[i].bCanEditSize
50020>>>>>//        Increment i
50020>>>>>//
50020>>>>>//        Move eOracle_RAW        to ColumnType[i].iSQLType
50020>>>>>//        Move "LONG"             to ColumnType[i].sSQLType
50020>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
50020>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
50020>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50020>>>>>//        Increment i
50020>>>>>//
50020>>>>>//        Move eOracle_LONGRAW    to ColumnType[i].iSQLType
50020>>>>>//        Move "LONG RAW"         to ColumnType[i].sSQLType
50020>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
50020>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
50020>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50020>>>>>//        Increment i
50020>>>>>//
50020>>>>>//        Move eOracle_NCHAR      to ColumnType[i].iSQLType
50020>>>>>//        Move "NCHAR"            to ColumnType[i].sSQLType
50020>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
50020>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
50020>>>>>//        Move "2000"             to ColumnType[i].sPrecision
50020>>>>>//        Increment i
50020>>>>>//
50020>>>>>//        Move eOracle_NCLOB      to ColumnType[i].iSQLType
50020>>>>>//        Move "NCLOB"            to ColumnType[i].sSQLType
50020>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
50020>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
50020>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50020>>>>>//        Increment i
50020>>>>>//
50020>>>>>//        Move eOracle_NUMBER     to ColumnType[i].iSQLType
50020>>>>>//        Move "NUMBER"           to ColumnType[i].sSQLType
50020>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
50020>>>>>//        Move "Number"           to ColumnType[i].sDataFlexType
50020>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
50020>>>>>//        Increment i
50020>>>>>//
50020>>>>>//        Move eOracle_NVARCHAR2  to ColumnType[i].iSQLType
50020>>>>>//        Move "NVARCHAR2"        to ColumnType[i].sSQLType
50020>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
50020>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
50020>>>>>//        Move "4000"             to ColumnType[i].sPrecision
50020>>>>>//        Increment i
50020>>>>>//
50020>>>>>//        Move eOracle_RAW        to ColumnType[i].iSQLType
50020>>>>>//        Move "RAW"              to ColumnType[i].sSQLType
50020>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
50020>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
50020>>>>>//        Move "2000"             to ColumnType[i].sPrecision
50020>>>>>//        Increment i
50020>>>>>//
50020>>>>>//        Move eOracle_ROWID      to ColumnType[i].iSQLType
50020>>>>>//        Move "ROWID"            to ColumnType[i].sSQLType
50020>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
50020>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
50020>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50020>>>>>//        Increment i
50020>>>>>//
50020>>>>>//        Move eOracle_TIMESTAMP  to ColumnType[i].iSQLType
50020>>>>>//        Move "TimeStamp"        to ColumnType[i].sSQLType
50020>>>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
50020>>>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
50020>>>>>//        Move "11.0"             to ColumnType[i].sPrecision
50020>>>>>//        Move True               to ColumnType[i].bCanEditSize
50020>>>>>//        Increment i
50020>>>>>//
50020>>>>>//        Move eOracle_TIMESTAMPLTZ   to ColumnType[i].iSQLType
50020>>>>>//        Move "TIMESTAMPLOCALTZ"     to ColumnType[i].sSQLType
50020>>>>>//        Move DF_DATETIME            to ColumnType[i].iDataFlexType
50020>>>>>//        Move "DateTime"             to ColumnType[i].sDataFlexType
50020>>>>>//        Move "13.0"                 to ColumnType[i].sPrecision
50020>>>>>//        Move True                   to ColumnType[i].bCanEditSize
50020>>>>>//        Increment i
50020>>>>>//
50020>>>>>//        Move eOracle_TIMESTAMPTZ    to ColumnType[i].iSQLType
50020>>>>>//        Move "TIMEZONETIMEZONE"     to ColumnType[i].sSQLType
50020>>>>>//        Move DF_DATETIME            to ColumnType[i].iDataFlexType
50020>>>>>//        Move "DateTime"             to ColumnType[i].sDataFlexType
50020>>>>>//        Move "11.0"                 to ColumnType[i].sPrecision
50020>>>>>//        Move True                   to ColumnType[i].bCanEditSize
50020>>>>>//        Increment i
50020>>>>>//
50020>>>>>//        Move eOracle_VARCHAR2   to ColumnType[i].iSQLType
50020>>>>>//        Move "VARCHAR"          to ColumnType[i].sSQLType
50020>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
50020>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
50020>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50020>>>>>
50020>>>>>        Function_Return aColumnType
50021>>>>>    End_Function
50022>>>>>
50022>>>>>    // PostgreSQL Data Types
50022>>>>>    Function _UtilEnumeratePostgreSQLTypes Returns tColumnType[]
50024>>>>>        tColumnType[] aColumnType
50024>>>>>        tColumnType[] aColumnType
50025>>>>>        Integer i
50025>>>>>
Including file: mdspgsql_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\mdspgsql_DriverDef.inc)
50025>>>>>>// Generated By The Database Update Framework
50025>>>>>>// Driver XML File: C:\Program Files (x86)\DataFlex 19.0\Bin\mdspgsql_DriverDef.xml
50025>>>>>>// Driver COLUMN DATA TYPES
50025>>>>>>//
50025>>>>>>// Created: 2018-03-14 23:47:02.984
50025>>>>>>
50025>>>>>>            Move "bigint"                                to aColumnType[i].sSQLType
50026>>>>>>            Move 20                                      to aColumnType[i].iSQLType
50027>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50028>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50029>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
50030>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50031>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
50032>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
50033>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
50034>>>>>>            Move 14                                      to aColumnType[i].sPrecision
50035>>>>>>            Increment i
50036>>>>>>
50036>>>>>>            Move "bit"                                   to aColumnType[i].sSQLType
50037>>>>>>            Move 1560                                    to aColumnType[i].iSQLType
50038>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50039>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50040>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
50041>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50042>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
50043>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
50044>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
50045>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
50046>>>>>>            Increment i
50047>>>>>>
50047>>>>>>            Move "boolean"                               to aColumnType[i].sSQLType
50048>>>>>>            Move 16                                      to aColumnType[i].iSQLType
50049>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
50050>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50051>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
50052>>>>>>            Move -1                                      to aColumnType[i].iMinSize
50053>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
50054>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50055>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50056>>>>>>            Move -1                                      to aColumnType[i].sPrecision
50057>>>>>>            Increment i
50058>>>>>>
50058>>>>>>            Move "bytea"                                 to aColumnType[i].sSQLType
50059>>>>>>            Move 17                                      to aColumnType[i].iSQLType
50060>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50061>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50062>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
50063>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50064>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
50065>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
50066>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
50067>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
50068>>>>>>            Increment i
50069>>>>>>
50069>>>>>>            Move "char"                                  to aColumnType[i].sSQLType
50070>>>>>>            Move 18                                      to aColumnType[i].iSQLType
50071>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50072>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50073>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
50074>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50075>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
50076>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50077>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50078>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
50079>>>>>>            Increment i
50080>>>>>>
50080>>>>>>            Move "citext"                                to aColumnType[i].sSQLType
50081>>>>>>            Move -25                                     to aColumnType[i].iSQLType
50082>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50083>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50084>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
50085>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50086>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
50087>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50088>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50089>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
50090>>>>>>            Increment i
50091>>>>>>
50091>>>>>>            Move "date"                                  to aColumnType[i].sSQLType
50092>>>>>>            Move 1082                                    to aColumnType[i].iSQLType
50093>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
50094>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50095>>>>>>            Move 6                                       to aColumnType[i].iDefaultSize
50096>>>>>>            Move -1                                      to aColumnType[i].iMinSize
50097>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
50098>>>>>>            Move "DF_DATE"                               to aColumnType[i].sDataFlexType
50099>>>>>>            Move DF_DATE                                 to aColumnType[i].iDataFlexType
50100>>>>>>            Move 6                                       to aColumnType[i].sPrecision
50101>>>>>>            Increment i
50102>>>>>>
50102>>>>>>            Move "double"                                to aColumnType[i].sSQLType
50103>>>>>>            Move 701                                     to aColumnType[i].iSQLType
50104>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50105>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50106>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
50107>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50108>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
50109>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50110>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50111>>>>>>            Move 14                                      to aColumnType[i].sPrecision
50112>>>>>>            Increment i
50113>>>>>>
50113>>>>>>            Move "integer"                               to aColumnType[i].sSQLType
50114>>>>>>            Move 23                                      to aColumnType[i].iSQLType
50115>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50116>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50117>>>>>>            Move 11                                      to aColumnType[i].iDefaultSize
50118>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50119>>>>>>            Move 11                                      to aColumnType[i].nMaxSize
50120>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
50121>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
50122>>>>>>            Move 11                                      to aColumnType[i].sPrecision
50123>>>>>>            Increment i
50124>>>>>>
50124>>>>>>            Move "money"                                 to aColumnType[i].sSQLType
50125>>>>>>            Move 790                                     to aColumnType[i].iSQLType
50126>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50127>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50128>>>>>>            Move 30                                      to aColumnType[i].iDefaultSize
50129>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50130>>>>>>            Move 30                                      to aColumnType[i].nMaxSize
50131>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
50132>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
50133>>>>>>            Move 30                                      to aColumnType[i].sPrecision
50134>>>>>>            Increment i
50135>>>>>>
50135>>>>>>            Move "numeric"                               to aColumnType[i].sSQLType
50136>>>>>>            Move 1700                                    to aColumnType[i].iSQLType
50137>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50138>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50139>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
50140>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50141>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
50142>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50143>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50144>>>>>>            Move 14                                      to aColumnType[i].sPrecision
50145>>>>>>            Increment i
50146>>>>>>
50146>>>>>>            Move "oid"                                   to aColumnType[i].sSQLType
50147>>>>>>            Move 26                                      to aColumnType[i].iSQLType
50148>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
50149>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50150>>>>>>            Move 20                                      to aColumnType[i].iDefaultSize
50151>>>>>>            Move -1                                      to aColumnType[i].iMinSize
50152>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
50153>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
50154>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
50155>>>>>>            Move -1                                      to aColumnType[i].sPrecision
50156>>>>>>            Increment i
50157>>>>>>
50157>>>>>>            Move "real"                                  to aColumnType[i].sSQLType
50158>>>>>>            Move 700                                     to aColumnType[i].iSQLType
50159>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50160>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50161>>>>>>            Move 6                                       to aColumnType[i].iDefaultSize
50162>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50163>>>>>>            Move 6                                       to aColumnType[i].nMaxSize
50164>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
50165>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
50166>>>>>>            Move 6                                       to aColumnType[i].sPrecision
50167>>>>>>            Increment i
50168>>>>>>
50168>>>>>>            Move "regproc"                               to aColumnType[i].sSQLType
50169>>>>>>            Move 24                                      to aColumnType[i].iSQLType
50170>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
50171>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50172>>>>>>            Move 64                                      to aColumnType[i].iDefaultSize
50173>>>>>>            Move -1                                      to aColumnType[i].iMinSize
50174>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
50175>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50176>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50177>>>>>>            Move -1                                      to aColumnType[i].sPrecision
50178>>>>>>            Increment i
50179>>>>>>
50179>>>>>>            Move "smallint"                              to aColumnType[i].sSQLType
50180>>>>>>            Move 21                                      to aColumnType[i].iSQLType
50181>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50182>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50183>>>>>>            Move 6                                       to aColumnType[i].iDefaultSize
50184>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50185>>>>>>            Move 6                                       to aColumnType[i].nMaxSize
50186>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
50187>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
50188>>>>>>            Move 6                                       to aColumnType[i].sPrecision
50189>>>>>>            Increment i
50190>>>>>>
50190>>>>>>            Move "text"                                  to aColumnType[i].sSQLType
50191>>>>>>            Move 25                                      to aColumnType[i].iSQLType
50192>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50193>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50194>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
50195>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50196>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
50197>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50198>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50199>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
50200>>>>>>            Increment i
50201>>>>>>
50201>>>>>>            Move "time"                                  to aColumnType[i].sSQLType
50202>>>>>>            Move 1083                                    to aColumnType[i].iSQLType
50203>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50204>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50205>>>>>>            Move 8                                       to aColumnType[i].iDefaultSize
50206>>>>>>            Move 8                                       to aColumnType[i].iMinSize
50207>>>>>>            Move 15                                      to aColumnType[i].nMaxSize
50208>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50209>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50210>>>>>>            Move 15                                      to aColumnType[i].sPrecision
50211>>>>>>            Increment i
50212>>>>>>
50212>>>>>>            Move "timestamp"                             to aColumnType[i].sSQLType
50213>>>>>>            Move 1114                                    to aColumnType[i].iSQLType
50214>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
50215>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50216>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
50217>>>>>>            Move -1                                      to aColumnType[i].iMinSize
50218>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
50219>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
50220>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
50221>>>>>>            Move -1                                      to aColumnType[i].sPrecision
50222>>>>>>            Increment i
50223>>>>>>
50223>>>>>>            Move "timestamptz"                           to aColumnType[i].sSQLType
50224>>>>>>            Move 1184                                    to aColumnType[i].iSQLType
50225>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
50226>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50227>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
50228>>>>>>            Move -1                                      to aColumnType[i].iMinSize
50229>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
50230>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50231>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50232>>>>>>            Move -1                                      to aColumnType[i].sPrecision
50233>>>>>>            Increment i
50234>>>>>>
50234>>>>>>            Move "uuid"                                  to aColumnType[i].sSQLType
50235>>>>>>            Move 2950                                    to aColumnType[i].iSQLType
50236>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
50237>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50238>>>>>>            Move 40                                      to aColumnType[i].iDefaultSize
50239>>>>>>            Move -1                                      to aColumnType[i].iMinSize
50240>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
50241>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50242>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50243>>>>>>            Move -1                                      to aColumnType[i].sPrecision
50244>>>>>>            Increment i
50245>>>>>>
50245>>>>>>            Move "varbit"                                to aColumnType[i].sSQLType
50246>>>>>>            Move 1562                                    to aColumnType[i].iSQLType
50247>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50248>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50249>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
50250>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50251>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
50252>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50253>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50254>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
50255>>>>>>            Increment i
50256>>>>>>
50256>>>>>>            Move "varchar"                               to aColumnType[i].sSQLType
50257>>>>>>            Move 1043                                    to aColumnType[i].iSQLType
50258>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50259>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50260>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
50261>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50262>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
50263>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50264>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50265>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
50266>>>>>>            Increment i
50267>>>>>>
50267>>>>>>
50267>>>>>
50267>>>>>//        Move ePgSQL_INT8        to ColumnType[i].iSQLType
50267>>>>>//        Move "bigint"           to ColumnType[i].sSQLType
50267>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
50267>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
50267>>>>>//        Move "14.0"             to ColumnType[i].sPrecision
50267>>>>>//        Move True               to ColumnType[i].bCanEditSize
50267>>>>>//        Increment i
50267>>>>>//
50267>>>>>//        Move ePgSQL_BIT         to ColumnType[i].iSQLType
50267>>>>>//        Move "bit"              to ColumnType[i].sSQLType
50267>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
50267>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
50267>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50267>>>>>//        Increment i
50267>>>>>//
50267>>>>>//        Move ePgSQL_BOOL        to ColumnType[i].iSQLType
50267>>>>>//        Move "boolean"          to ColumnType[i].sSQLType
50267>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
50267>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
50267>>>>>//        Move "1"                to ColumnType[i].sPrecision
50267>>>>>//        Increment i
50267>>>>>//
50267>>>>>//        Move ePgSQL_BYTEA       to ColumnType[i].iSQLType
50267>>>>>//        Move "bytea"            to ColumnType[i].sSQLType
50267>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
50267>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
50267>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50267>>>>>//        Increment i
50267>>>>>//
50267>>>>>//        Move ePgSQL_CHAR        to ColumnType[i].iSQLType
50267>>>>>//        Move "char"             to ColumnType[i].sSQLType
50267>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
50267>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
50267>>>>>//        Move "2000"             to ColumnType[i].sPrecision
50267>>>>>//        Increment i
50267>>>>>//
50267>>>>>//        Move ePgSQL_CITEXT      to ColumnType[i].iSQLType
50267>>>>>//        Move "citext"           to ColumnType[i].sSQLType
50267>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
50267>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
50267>>>>>//        Move "254"              to ColumnType[i].sPrecision
50267>>>>>//        Increment i
50267>>>>>//
50267>>>>>//        Move ePgSQL_DATE        to ColumnType[i].iSQLType
50267>>>>>//        Move "date"             to ColumnType[i].sSQLType
50267>>>>>//        Move DF_DATE            to ColumnType[i].iDataFlexType
50267>>>>>//        Move "Date"             to ColumnType[i].sDataFlexType
50267>>>>>//        Move "6.0"              to ColumnType[i].sPrecision
50267>>>>>//        Move True               to ColumnType[i].bCanEditSize
50267>>>>>//        Increment i
50267>>>>>//
50267>>>>>//        Move ePgSQL_FLOAT4      to ColumnType[i].iSQLType
50267>>>>>//        Move "decimal"          to ColumnType[i].sSQLType
50267>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
50267>>>>>//        Move "Decimal"          to ColumnType[i].sDataFlexType
50267>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
50267>>>>>//        Increment i
50267>>>>>//
50267>>>>>//        Move ePgSQL_FLOAT8      to ColumnType[i].iSQLType
50267>>>>>//        Move "double"           to ColumnType[i].sSQLType
50267>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
50267>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
50267>>>>>//        Move "22"               to ColumnType[i].sPrecision
50267>>>>>//        Increment i
50267>>>>>//
50267>>>>>//        Move ePgSQL_INT4        to ColumnType[i].iSQLType
50267>>>>>//        Move "integer"          to ColumnType[i].sSQLType
50267>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
50267>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
50267>>>>>//        Move "8.0"              to ColumnType[i].sPrecision
50267>>>>>//        Increment i
50267>>>>>//
50267>>>>>//        Move ePgSQL_MONEY       to ColumnType[i].iSQLType
50267>>>>>//        Move "money"            to ColumnType[i].sSQLType
50267>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
50267>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
50267>>>>>//        Move "8.0"              to ColumnType[i].sPrecision
50267>>>>>//        Increment i
50267>>>>>//
50267>>>>>//        Move ePgSQL_OID         to ColumnType[i].iSQLType
50267>>>>>//        Move "oid"              to ColumnType[i].sSQLType
50267>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
50267>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
50267>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50267>>>>>//        Increment i
50267>>>>>//
50267>>>>>//        Move ePgSQL_FLOAT4      to ColumnType[i].iSQLType
50267>>>>>//        Move "real"             to ColumnType[i].sSQLType
50267>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
50267>>>>>//        Move "Real"             to ColumnType[i].sDataFlexType
50267>>>>>//        Move "6.6"              to ColumnType[i].sPrecision
50267>>>>>//        Increment i
50267>>>>>//
50267>>>>>//        Move ePgSQL_REGPROC     to ColumnType[i].iSQLType
50267>>>>>//        Move "regproc"          to ColumnType[i].sSQLType
50267>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
50267>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
50267>>>>>//        Move "64"               to ColumnType[i].sPrecision
50267>>>>>//        Increment i
50267>>>>>//
50267>>>>>//        Move ePgSQL_INT2        to ColumnType[i].iSQLType
50267>>>>>//        Move "smallint"         to ColumnType[i].sSQLType
50267>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
50267>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
50267>>>>>//        Move "6.0"              to ColumnType[i].sPrecision
50267>>>>>//        Increment i
50267>>>>>//
50267>>>>>//        Move ePgSQL_TEXT        to ColumnType[i].iSQLType
50267>>>>>//        Move "text"             to ColumnType[i].sSQLType
50267>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
50267>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
50267>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50267>>>>>//        Increment i
50267>>>>>//
50267>>>>>//        Move ePgSQL_TIME        to ColumnType[i].iSQLType
50267>>>>>//        Move "time"             to ColumnType[i].sSQLType
50267>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
50267>>>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
50267>>>>>//        Move "15.0"             to ColumnType[i].sPrecision
50267>>>>>//        Increment i
50267>>>>>//
50267>>>>>//        Move ePgSQL_TIMESTAMP   to ColumnType[i].iSQLType
50267>>>>>//        Move "timestamp"        to ColumnType[i].sSQLType
50267>>>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
50267>>>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
50267>>>>>//        Move "23.0"             to ColumnType[i].sPrecision
50267>>>>>//        Move True               to ColumnType[i].bCanEditSize
50267>>>>>//        Increment i
50267>>>>>//
50267>>>>>//        Move ePgSQL_UUID        to ColumnType[i].iSQLType
50267>>>>>//        Move "uuid"             to ColumnType[i].sSQLType
50267>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
50267>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
50267>>>>>//        Move "40"               to ColumnType[i].sPrecision
50267>>>>>//        Move True               to ColumnType[i].bCanEditSize
50267>>>>>//        Increment i
50267>>>>>//
50267>>>>>//        Move ePgSQL_VARCHAR     to ColumnType[i].iSQLType
50267>>>>>//        Move "varchar"          to ColumnType[i].sSQLType
50267>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
50267>>>>>//        Move "DF_TEXT"          to ColumnType[i].sDataFlexType
50267>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50267>>>>>//        Increment i
50267>>>>>
50267>>>>>        Function_Return aColumnType
50268>>>>>    End_Function
50269>>>>>
50269>>>>>    // Internal usage. Use the UtilColumnTypeXXX functions instead.
50269>>>>>    Function _UtilColumnType String sDriverID Integer iDbType Integer iType String sType Boolean bIntegerInputType Returns tColumnType
50271>>>>>        Integer iValue iSize iCount iStart iItem
50271>>>>>        tColumnType[] ColumnTypeArray
50271>>>>>        tColumnType[] ColumnTypeArray
50272>>>>>        tColumnType RetvalType
50272>>>>>        tColumnType RetvalType
50272>>>>>        String sValue
50272>>>>>        Boolean bFrameworkDataFlexType
50272>>>>>
50272>>>>>        Move "Undefined" to RetvalType.sSQLType
50273>>>>>        Move -1999       to RetvalType.iSQLType
50274>>>>>
50274>>>>>        Move 0 to iStart
50275>>>>>        Move (Uppercase(sType)) to sType
50276>>>>>        Move (iType <= -1490) to bFrameworkDataFlexType
50277>>>>>        If (bFrameworkDataFlexType = True) Begin
50279>>>>>            Get _UtilDUFDataTypeToSqlTypeMapping sDriverID iDbType iType to RetvalType
50280>>>>>            Function_Return RetvalType
50281>>>>>        End
50281>>>>>>
50281>>>>>
50281>>>>>        Get _UtilEnumerateColumnTypes sDriverID iDbType to ColumnTypeArray
50282>>>>>        Move iType to RetvalType.iSQLType
50283>>>>>        Move sType to RetvalType.sSQLType 
50284>>>>>        Move (SearchArray(RetvalType, ColumnTypeArray)) to iItem
50285>>>>>        
50285>>>>>        If (iItem = -1) Begin
50287>>>>>            Get _UtilEnumerateDataFlexTypes to ColumnTypeArray
50288>>>>>            Move (SearchArray(RetvalType, ColumnTypeArray)) to iItem
50289>>>>>        End
50289>>>>>>
50289>>>>>        If (iItem <> -1) Begin
50291>>>>>            Move ColumnTypeArray[iItem].sSQLType       to RetvalType.sSQLType
50292>>>>>            Move ColumnTypeArray[iItem].iSQLType       to RetvalType.iSQLType
50293>>>>>            Move ColumnTypeArray[iItem].sDataFlexType  to RetvalType.sDataFlexType
50294>>>>>            Move ColumnTypeArray[iItem].iDataFlexType  to RetvalType.iDataFlexType
50295>>>>>            Move ColumnTypeArray[iItem].sPrecision     to RetvalType.sPrecision
50296>>>>>            Move ColumnTypeArray[iItem].bCanEditSize   to RetvalType.bCanEditSize
50297>>>>>        End
50297>>>>>>
50297>>>>>
50297>>>>>        Function_Return RetvalType
50298>>>>>    End_Function
50299>>>>>
50299>>>>>    // Returns a struct array with all data types for the passed driver & dbtype.
50299>>>>>    Function _UtilEnumerateColumnTypes String sDriverID Integer iDbType Returns tColumnType[]
50301>>>>>        tColumnType[] ColumnType
50301>>>>>        tColumnType[] ColumnType
50302>>>>>
50302>>>>>        // We need to treat DAW's ODBC driver a bit different, as the output depends on
50302>>>>>        // the dbType.
50302>>>>>        If (sDriverID = ODBC_DRV_ID) Begin
50304>>>>>            If (iDbType = EN_DbTypeMySQL) Begin
50306>>>>>                Move ODBC_DRV_ID to sDriverID
50307>>>>>            End
50307>>>>>>
50307>>>>>            If (iDbType = EN_DbTypeMSSQL) Begin
50309>>>>>                Move MSSQLDRV_ID to sDriverID
50310>>>>>            End
50310>>>>>>
50310>>>>>            If (iDbType = EN_DbTypeDB2) Begin
50312>>>>>                Move DB2_DRV_ID to sDriverID
50313>>>>>            End
50313>>>>>>
50313>>>>>            If (iDbType = EN_DbTypePostgre) Begin
50315>>>>>                Move ODBC_DRV_ID to sDriverID
50316>>>>>            End
50316>>>>>>
50316>>>>>        End
50316>>>>>>
50316>>>>>
50316>>>>>        Case Begin
50316>>>>>            Case (iDbType = EN_dbTypeDataFlex)
50318>>>>>                Get _UtilEnumerateDataFlexTypes to ColumnType
50319>>>>>                Case Break
50320>>>>>
50320>>>>>            Case (iDbType = EN_DbTypeDB2)
50323>>>>>                Get _UtilEnumerateDB2Types to ColumnType
50324>>>>>                Case Break
50325>>>>>
50325>>>>>            Case (iDbType = EN_DbTypeMSSQL)
50328>>>>>                Get _UtilEnumerateMSSQLTypes sDriverID to ColumnType
50329>>>>>                Case Break
50330>>>>>        Case End
50330>>>>>
50330>>>>>        Function_Return ColumnType
50331>>>>>    End_Function
50332>>>>>
50332>>>>>    // Returns a struct with the default column types for the SQL back-end and how they
50332>>>>>    // are mapped to a DUF data type.
50332>>>>>    Function _UtilDUFDataTypeToSqlTypeMapping String sDriverID Integer iDbType Integer iType Returns tColumnType
50334>>>>>        tColumnType ColumnType
50334>>>>>        tColumnType ColumnType
50334>>>>>        String sDataType
50334>>>>>        Integer iDriverID iCount
50334>>>>>
50334>>>>>        Move 0 to iCount
50335>>>>>        Get DriverIndex sDriverID to iDriverID
50336>>>>>
50336>>>>>        Case Begin
50336>>>>>            // DF_ASCII
50336>>>>>            Case (iType = DF_ASCII_DUF)
50338>>>>>                If (sDriverID = ODBC_DRV_ID) Begin
50340>>>>>                    Get_Attribute DF_DRIVER_MAP_DFASCII_TO_ODBCTYPE of iDriverID to sDataType
50343>>>>>                End
50343>>>>>>
50343>>>>>                Else Begin
50344>>>>>                    Get_Attribute DF_DRIVER_MAP_DFASCII_TO_SQLTYPE  of iDriverID to sDataType
50347>>>>>                End
50347>>>>>>
50347>>>>>                Move DF_ASCII    to ColumnType.iDataFlexType
50348>>>>>                Move "ASCII"     to ColumnType.sDataFlexType
50349>>>>>                Move sDataType   to ColumnType.sSQLType
50350>>>>>                Move DF_ASCII    to ColumnType.iSQLType
50351>>>>>                Move False       to ColumnType.bCanEditSize
50352>>>>>                Case Break
50353>>>>>
50353>>>>>            // DF_BINARY
50353>>>>>            Case (iType = DF_BINARY_DUF)
50356>>>>>                If (sDriverID = ODBC_DRV_ID) Begin
50358>>>>>                    Get_Attribute DF_DRIVER_MAP_DFBINARY_TO_ODBCTYPE of iDriverID to sDataType
50361>>>>>                End
50361>>>>>>
50361>>>>>                Else Begin
50362>>>>>                    Get_Attribute DF_DRIVER_MAP_DFBINARY_TO_SQLTYPE  of iDriverID to sDataType
50365>>>>>                End
50365>>>>>>
50365>>>>>                Move DF_BINARY   to ColumnType.iDataFlexType
50366>>>>>                Move "Binary"    to ColumnType.sDataFlexType
50367>>>>>                Move sDataType   to ColumnType.sSQLType
50368>>>>>                Move DF_BINARY   to ColumnType.iSQLType
50369>>>>>                Move False       to ColumnType.bCanEditSize
50370>>>>>                Case Break
50371>>>>>
50371>>>>>            // DF_DATE
50371>>>>>            Case (iType = DF_DATE_DUF)
50374>>>>>                If (sDriverID = ODBC_DRV_ID) Begin
50376>>>>>                    Get_Attribute DF_DRIVER_MAP_DFDATE_TO_ODBCTYPE of iDriverID to sDataType
50379>>>>>                End
50379>>>>>>
50379>>>>>                Else Begin
50380>>>>>                    Get_Attribute DF_DRIVER_MAP_DFDATE_TO_SQLTYPE  of iDriverID to sDataType
50383>>>>>                End
50383>>>>>>
50383>>>>>                Move DF_DATE     to ColumnType.iDataFlexType
50384>>>>>                Move "Date"      to ColumnType.sDataFlexType
50385>>>>>                Move sDataType   to ColumnType.sSQLType
50386>>>>>                Move DF_DATE     to ColumnType.iSQLType
50387>>>>>                Move True        to ColumnType.bCanEditSize
50388>>>>>                Case Break
50389>>>>>
50389>>>>>            // DF_DATETIME
50389>>>>>            Case (iType = DF_DATETIME_DUF)
50392>>>>>                If (sDriverID = ODBC_DRV_ID) Begin
50394>>>>>                    Get_Attribute DF_DRIVER_MAP_DFDATETIME_TO_ODBCTYPE of iDriverID to sDataType
50397>>>>>                End
50397>>>>>>
50397>>>>>                Else Begin
50398>>>>>                    Get_Attribute DF_DRIVER_MAP_DFDATETIME_TO_SQLTYPE  of iDriverID to sDataType
50401>>>>>                End
50401>>>>>>
50401>>>>>                Move DF_DATETIME to ColumnType.iDataFlexType
50402>>>>>                Move "DateTime"  to ColumnType.sDataFlexType
50403>>>>>                Move sDataType   to ColumnType.sSQLType
50404>>>>>                Move DF_DATETIME to ColumnType.iSQLType
50405>>>>>                Move True        to ColumnType.bCanEditSize
50406>>>>>                Case Break
50407>>>>>
50407>>>>>            // DF_NUMERIC
50407>>>>>            // *** Why is there no DF_DRIVER_MAP available for BCD/Numeric??? ***
50407>>>>>            // DF_BCD can in SQL be either of "SmallInt", "Int", or "Numeric", but
50407>>>>>            // we make them here all "Numeric"...
50407>>>>>            // If (sDriverID = ODBC_DRV_ID) Begin
50407>>>>>            //     Get_Attribute DF_DRIVER_MAP_DFDATE_TO_ODBCTYPE of iDriverID to sDataType
50407>>>>>            // End
50407>>>>>            // Else Begin
50407>>>>>            //     Get_Attribute DF_DRIVER_MAP_DFDATE_TO_SQLTYPE  of iDriverID to sDataType
50407>>>>>            // End
50407>>>>>            // ToDo: How should we find the best "Numeric" data type here?
50407>>>>>            Case (iType = DF_BCD_DUF)
50410>>>>>                Move DF_BCD      to ColumnType.iDataFlexType
50411>>>>>                Move "Numeric"   to ColumnType.sDataFlexType
50412>>>>>                Move "Numeric"   to ColumnType.sSQLType
50413>>>>>                Move SQL_NUMERIC to ColumnType.iSQLType
50414>>>>>                Move False       to ColumnType.bCanEditSize
50415>>>>>                Case Break
50416>>>>>
50416>>>>>            // DF_TEXT
50416>>>>>            Case (iType = DF_TEXT_DUF)
50419>>>>>                If (sDriverID = ODBC_DRV_ID) Begin
50421>>>>>                    Get_Attribute DF_DRIVER_MAP_DFTEXT_TO_ODBCTYPE of iDriverID to sDataType
50424>>>>>                End
50424>>>>>>
50424>>>>>                Else Begin
50425>>>>>                    Get_Attribute DF_DRIVER_MAP_DFTEXT_TO_SQLTYPE  of iDriverID to sDataType
50428>>>>>                End
50428>>>>>>
50428>>>>>                Move DF_TEXT     to ColumnType.iDataFlexType
50429>>>>>                Move "Text"      to ColumnType.sDataFlexType
50430>>>>>                Move sDataType   to ColumnType.sSQLType
50431>>>>>                Move DF_TEXT     to ColumnType.iSQLType
50432>>>>>                Move False       to ColumnType.bCanEditSize
50433>>>>>                Case Break
50434>>>>>
50434>>>>>            Case Else
50434>>>>>                Move -1999       to ColumnType.iDataFlexType
50435>>>>>                Move "Undefined" to ColumnType.sDataFlexType
50436>>>>>                Move "Undefined" to ColumnType.sSQLType
50437>>>>>                Move -1999       to ColumnType.iSQLType
50438>>>>>                Move True        to ColumnType.bCanEditSize
50439>>>>>
50439>>>>>        Case End
50439>>>>>
50439>>>>>        Function_Return ColumnType
50440>>>>>    End_Function
50441>>>>>
50441>>>>>    Function _AllTablesToConvert Returns Integer[]
50443>>>>>        Integer[] aTableConvertExceptions iTablesArray
50445>>>>>        Handle hTable
50445>>>>>        Integer iIndex
50445>>>>>        String sTableName
50445>>>>>        Boolean bFlexErrs
50445>>>>>
50445>>>>>        // a) Get the exception table array the developer has specified
50445>>>>>        Get paTableConvertExceptions to aTableConvertExceptions
50446>>>>>
50446>>>>>        // b) Add CodeMast, CodeType & DbVersion to exceptions
50446>>>>>        Repeat
50446>>>>>>
50446>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
50449>>>>>            If (hTable <> 0) Begin
50451>>>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
50454>>>>>                Move (Uppercase(sTableName) = "FLEXERRS")  to bFlexErrs
50455>>>>>                If (bFlexErrs = False) Begin
50457>>>>>                    If (Uppercase(sTableName) = "CODEMAST" or Uppercase(sTableName) = "CODETYPE" or Uppercase(sTableName) = "DBVERSION") Begin
50459>>>>>                        Move (SearchArray(hTable, aTableConvertExceptions)) to iIndex
50460>>>>>                        If (iIndex = -1) Begin
50462>>>>>                            Move hTable to aTableConvertExceptions[SizeOfArray(aTableConvertExceptions)]
50463>>>>>                        End
50463>>>>>>
50463>>>>>                    End
50463>>>>>>
50463>>>>>                End
50463>>>>>>
50463>>>>>            End
50463>>>>>>
50463>>>>>        Until (hTable = 0)
50465>>>>>
50465>>>>>        Move 0 to hTable
50466>>>>>
50466>>>>>        // c) Spin through filelist.cfg and add all tables except those from the exception array, to the return array.
50466>>>>>        Repeat
50466>>>>>>
50466>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
50469>>>>>            If (hTable > 0) Begin
50471>>>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
50474>>>>>                Move (Uppercase(sTableName) = "FLEXERRS")  to bFlexErrs
50475>>>>>                If (bFlexErrs = False) Begin
50477>>>>>                    Move (SearchArray(hTable, aTableConvertExceptions)) to iIndex
50478>>>>>                    If (iIndex = -1) Begin
50480>>>>>                        Move hTable to iTablesArray[SizeOfArray(iTablesArray)]
50481>>>>>                    End
50481>>>>>>
50481>>>>>                End
50481>>>>>>
50481>>>>>            End
50481>>>>>>
50481>>>>>        Until (hTable = 0)
50483>>>>>
50483>>>>>        Function_Return iTablesArray
50484>>>>>    End_Function
50485>>>>>
50485>>>>>    Function _AllTablesDateCorrections Returns Integer[]
50487>>>>>        Integer[] aTableDateCorrectionExceptions iTablesArray
50489>>>>>        Handle hTable
50489>>>>>        Integer iIndex
50489>>>>>        String sTableName
50489>>>>>        Boolean bFlexErrs
50489>>>>>
50489>>>>>        Get paTableDateCorrectionExceptions to aTableDateCorrectionExceptions
50490>>>>>        Move 0 to hTable
50491>>>>>
50491>>>>>        // Spin through filelist.cfg and add all tables except those from the exception array, to the return array.
50491>>>>>        Repeat
50491>>>>>>
50491>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
50494>>>>>            If (hTable > 0) Begin
50496>>>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
50499>>>>>                Move (Uppercase(sTableName) = "FLEXERRS")  to bFlexErrs
50500>>>>>                If (bFlexErrs = False) Begin
50502>>>>>                    Move (SearchArray(hTable, aTableDateCorrectionExceptions)) to iIndex
50503>>>>>                    If (iIndex = -1) Begin
50505>>>>>                        Move hTable to iTablesArray[SizeOfArray(iTablesArray)]
50506>>>>>                    End
50506>>>>>>
50506>>>>>                End
50506>>>>>>
50506>>>>>            End
50506>>>>>>
50506>>>>>        Until (hTable = 0)
50508>>>>>
50508>>>>>        Function_Return iTablesArray
50509>>>>>    End_Function
50510>>>>>
50510>>>>>    Function _AppendAPIColumn tAPIColumn[] aCurrent String sFieldName Integer iType Integer iLength Integer iPrecision Integer iOptions Returns tAPIColumn[]
50512>>>>>        tAPIColumn NewAPIColumn
50512>>>>>        tAPIColumn NewAPIColumn
50512>>>>>
50512>>>>>        Move sFieldName to NewAPIColumn.sFieldName
50513>>>>>        Move iType      to NewAPIColumn.iType
50514>>>>>        Move iLength    to NewAPIColumn.iLength
50515>>>>>        Move iPrecision to NewAPIColumn.iPrecision
50516>>>>>        Move iOptions   to NewAPIColumn.iOptions
50517>>>>>
50517>>>>>        Move NewAPIColumn to aCurrent[SizeOfArray(aCurrent)]
50518>>>>>
50518>>>>>        Function_Return aCurrent
50519>>>>>    End_Function
50520>>>>>
50520>>>>>    Function _UtilIndexAppendSegmentFieldNames tAPIIndexSegment[] APIIndexSegment Returns String
50522>>>>>        String sRetval sFieldName
50522>>>>>        Integer iCount iSize
50522>>>>>
50522>>>>>        Move (SizeOfArray(APIIndexSegment)) to iSize
50523>>>>>        Decrement iSize
50524>>>>>        For iCount from 0 to iSize
50530>>>>>>
50530>>>>>            Move APIIndexSegment[iCount].sFieldName to sFieldName
50531>>>>>            Move (sRetval * (String(sFieldName))) to sRetval
50532>>>>>        Loop
50533>>>>>>
50533>>>>>        Move (Trim(sRetval)) to sRetval
50534>>>>>
50534>>>>>        Function_Return sRetval
50535>>>>>    End_Function
50536>>>>>
50536>>>>>    // *** Miscellaneous other functions ***
50536>>>>>    // Some of which can be used by both "Sqlxxx" and "Apixxx" functions.
50536>>>>>    //
50536>>>>>
50536>>>>>    // Callback functionality used when e.g. calling driver functions directly.
50536>>>>>    Function Callback String sCallback_Text Integer iCallback_Type Returns Integer
50538>>>>>        Integer iPerc
50538>>>>>        Number nReady nTotal
50538>>>>>
50538>>>>>        Send DoAdvance of ghoProgressBar
50539>>>>>
50539>>>>>        If (sCallback_Text contains "Copy records") Begin
50541>>>>>            Move CS_DUF_CopyingData to sCallback_Text
50542>>>>>        End
50542>>>>>>
50542>>>>>        If (sCallback_Text contains "Dropping index" or sCallback_Text contains "Temporary delete of all indices of table") Begin
50544>>>>>            Move (Replace("Dropping index", sCallback_Text, CS_DUF_DeletingIndex)) to sCallback_Text
50545>>>>>            Move (Replace("Temporary delete of all indices of table", sCallback_Text, CS_DUF_DeletingIndex)) to sCallback_Text
50546>>>>>        End
50546>>>>>>
50546>>>>>        If (sCallback_Text contains "Creating index") Begin
50548>>>>>            Move (Replace("Creating index", sCallback_Text, CS_DUF_CreatingIndex)) to sCallback_Text
50549>>>>>        End
50549>>>>>>
50549>>>>>
50549>>>>>        Case Begin
50549>>>>>            Case (iCallback_Type = DF_Message_Text)
50551>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50552>>>>>                Set Action_Text  of ghoStatusPanel to ""
50553>>>>>                Case Break
50554>>>>>            Case (iCallback_Type = DF_Message_Heading_1)
50557>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50558>>>>>                Set Action_Text  of ghoStatusPanel to ""
50559>>>>>                Case Break
50560>>>>>            Case (iCallback_Type = DF_Message_Heading_2)
50563>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50564>>>>>                Set Action_Text  of ghoStatusPanel to ""
50565>>>>>                Case Break
50566>>>>>            Case (iCallback_Type = DF_Message_Heading_3)
50569>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50570>>>>>                Set Action_Text  of ghoStatusPanel to ""
50571>>>>>                Case Break
50572>>>>>            Case (iCallback_Type = DF_Message_Heading_4)
50575>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50576>>>>>                Set Action_Text  of ghoStatusPanel to ""
50577>>>>>                Case Break
50578>>>>>            Case (iCallback_Type = DF_Message_Heading_5)
50581>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50582>>>>>                Set Action_Text  of ghoStatusPanel to ""
50583>>>>>                Case Break
50584>>>>>            Case (iCallback_Type = DF_Message_Warning)
50587>>>>>                Send None
50588>>>>>                Case Break
50589>>>>>            Case (iCallback_Type = DF_Message_Progress_Title)
50592>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50593>>>>>                Set Action_Text  of ghoStatusPanel to ""
50594>>>>>                Case Break
50595>>>>>            Case (iCallback_Type = DF_Message_Progress_Value)
50598>>>>>                //*** Interpret numbers
50598>>>>>                Move (Left(sCallback_Text, (Pos(",", sCallback_Text) - 1)))                       to nReady
50599>>>>>                Move (Right(sCallback_Text, (Length(sCallback_Text) - Pos(",", sCallback_Text)))) to nTotal
50600>>>>>                Move ((nReady / nTotal) * 100)                                                    to iPerc
50601>>>>>                Set Action_Text of ghoStatusPanel to (String(iPerc) * String("% Done (Total Number of Records:") * String(nTotal) + ")")
50602>>>>>                Case Break
50603>>>>>            Case Else
50603>>>>>                Set Message_Text to ""
50604>>>>>                Set Action_Text  to ""
50605>>>>>        Case End
50605>>>>>
50605>>>>>        Send ProcessEvents of ghoStatusPanel
50606>>>>>        Function_Return False
50607>>>>>    End_Function
50608>>>>>
50608>>>>>    // * Dummy function for the Studio's Code Explorer *
50608>>>>>    Function PRIVATE_SUB_FUNCTIONS Returns Boolean
50610>>>>>        Function_Return False
50611>>>>>    End_Function
50612>>>>>
50612>>>>>    // *** Helper functions with compiled sql script code ***
50612>>>>>    //
50612>>>>>    // When dropping columns on some SQL back-ends they doesn't reclaim the space taken up by the columns dropped.
50612>>>>>    // For data types that are stored inline in the rows (int for example) it may even take up space on
50612>>>>>    // the new rows added after the alter statement. to get around this you need to create a clustered
50612>>>>>    // index on the table _or_ rebuild the clustered Index if it already has one. Rebuilding the index
50612>>>>>    // can be done with a REBUILD command after modifying the table. But be warned this can be slow on very big tables.
50612>>>>>    //   ALTER TABLE MyTable
50612>>>>>    //       REBUILD
50612>>>>>    Function _SqlUtilRemoveTableColumnMSSQL String sTableName String sColumnName Returns Boolean
50614>>>>>        Boolean bOK
50614>>>>>
50614>>>>>        If (Trim(sTableName) = "" or Trim(sColumnName) = "") Begin
50616>>>>>            Function_Return False
50617>>>>>        End
50617>>>>>>
50617>>>>>
50617>>>>>        SQLIncludeScriptFile ..\Scripts\DropConstraintAndColumnNameMSSQL.sql as DropConstraintAndColumnNameMSSQL.sql
50617>>>>>        Get _SqlUtilRemoveTableColumnByScript "DropConstraintAndColumnNameMSSQL.sql" sTableName sColumnName to bOK
50618>>>>>
50618>>>>>        Function_Return (bOK = True)
50619>>>>>    End_Function
50620>>>>>
50620>>>>>    // When dropping columns SQL Sever does not reclaim the space taken up by the columns dropped.
50620>>>>>    // For data types that are stored inline in the rows (int for example) it may even take up space on
50620>>>>>    // the new rows added after the alter statement. To get around this you need to create a clustered
50620>>>>>    // index on the table or rebuild the clustered Index if it already has one. Rebuilding the index
50620>>>>>    // can be done with a REBUILD command after modifying the table. But be warned this can be slow on very big tables.
50620>>>>>    //   ALTER TABLE MyTable
50620>>>>>    //       REBUILD
50620>>>>>    Function _SqlUtilRemoveTableColumnByScript String sMemScriptFile String sTableName String sColumnName Returns Boolean
50622>>>>>        tSQLScriptArray SQLScriptArray
50622>>>>>        tSQLScriptArray SQLScriptArray
50622>>>>>        String sDriverID
50622>>>>>        Boolean bOK
50622>>>>>        Integer iSize iCount
50622>>>>>
50622>>>>>        If (Trim(sTableName) = "" or Trim(sColumnName) = "") Begin
50624>>>>>            Function_Return False
50625>>>>>        End
50625>>>>>>
50625>>>>>
50625>>>>>        Get psDriverID to sDriverID
50626>>>>>        Get _SqlUtilReadResource sMemScriptFile to SQLScriptArray
50627>>>>>        If (SQLScriptArray.bError = True) Begin
50629>>>>>            Function_Return False
50630>>>>>        End
50630>>>>>>
50630>>>>>
50630>>>>>        Move (SizeOfArray(SQLScriptArray.sSQLScriptArray)) to iSize
50631>>>>>        Decrement iSize
50632>>>>>
50632>>>>>        For iCount from 0 to iSize
50638>>>>>>
50638>>>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "TABLE_NAME_XXX") Begin
50640>>>>>                Move (Replaces("TABLE_NAME_XXX",  SQLScriptArray.sSQLScriptArray[iCount], String(sTableName))) to SQLScriptArray.sSQLScriptArray[iCount]
50641>>>>>            End
50641>>>>>>
50641>>>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "COLUMN_NAME_XXX") Begin
50643>>>>>                Move (Replaces("COLUMN_NAME_XXX", SQLScriptArray.sSQLScriptArray[iCount], String(sColumnName))) to SQLScriptArray.sSQLScriptArray[iCount]
50644>>>>>            End
50644>>>>>>
50644>>>>>        Loop
50645>>>>>>
50645>>>>>
50645>>>>>        Get _SqlUtilExecuteEmbeddedScript SQLScriptArray sDriverID False "" to bOK
50646>>>>>
50646>>>>>        Function_Return (bOK = True)
50647>>>>>    End_Function
50648>>>>>
50648>>>>>    // Reads a SQL script file that has been compiled into the .exe program as a resource.
50648>>>>>    // Pass: The memory resource reference and a boolean True if you want to create the file on disk (in the Home folder).
50648>>>>>    // Returns: A tSQLScriptArray Struct with the Sql script as an uChar Array will be returned along with the a bError boolean.
50648>>>>>    Function _SqlUtilReadResource String sMemFileName Returns tSQLScriptArray
50650>>>>>        Integer iChannel iArgumentSize iCount
50650>>>>>        Number nByteCount
50650>>>>>        String sSQLScript
50650>>>>>        tSQLScriptArray SqlScriptArray
50650>>>>>        tSQLScriptArray SqlScriptArray
50650>>>>>        UChar[] uCharData
50651>>>>>
50651>>>>>        Move False to Err
50652>>>>>        Get Seq_New_Channel to iChannel
50653>>>>>        If (iChannel = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
50655>>>>>            Error DFERR_PROGRAM 'No channel available...'
50656>>>>>>
50656>>>>>            Move True to SqlScriptArray.bError
50657>>>>>            Function_Return SqlScriptArray
50658>>>>>        End
50658>>>>>>
50658>>>>>
50658>>>>>        // First decide the size of the script
50658>>>>>        Direct_Input channel iChannel ("Resource: " + sMemFileName)
50660>>>>>        Read_Block channel iChannel uCharData -1 // -1 means that all data should be read.
50662>>>>>        Close_Input channel iChannel
50664>>>>>
50664>>>>>        Move (SizeOfArray(uCharData)) to nByteCount
50665>>>>>        If (nByteCount  < 1) Begin
50667>>>>>            Send Seq_Release_Channel iChannel
50668>>>>>            Move True to SqlScriptArray.bError
50669>>>>>            Function_Return SqlScriptArray
50670>>>>>        End
50670>>>>>>
50670>>>>>
50670>>>>>        // If necessary change the string argument_size
50670>>>>>        // Read the script file from memory line-by-line
50670>>>>>        Direct_Input channel iChannel ("Resource: " + sMemFileName)
50672>>>>>            Move 0 to iCount
50673>>>>>            Repeat
50673>>>>>>
50673>>>>>                Readln channel iChannel sSQLScript
50675>>>>>                Move sSQLScript to SqlScriptArray.sSQLScriptArray[iCount]
50676>>>>>                Increment iCount
50677>>>>>            Until (SeqEof = True)
50679>>>>>        Close_Input channel iChannel
50681>>>>>        Send Seq_Release_Channel iChannel
50682>>>>>
50682>>>>>        // Finally "sanitize" the script by removing all comments.
50682>>>>>        Get _SqlUtilSanitizeScript SqlScriptArray to SqlScriptArray
50683>>>>>
50683>>>>>        Function_Return SqlScriptArray
50684>>>>>    End_Function
50685>>>>>
50685>>>>>    Function _SqlUtilExecuteEmbeddedScript tSQLScriptArray SQLScriptArray String sDriverID Boolean bCreateScriptFile String sMemFileName Boolean bShowProgr Returns Boolean
50687>>>>>        String sSQLVal sStmt sCR sGOKeyWord sNoCountKeyWord sMessage sExportFile
50687>>>>>        Handle hoSql hoSQLConnect hoStmt hoError
50687>>>>>        Integer i iMsgs iRows iRowType iCount iChunkCounter iChunkMax iOut iNextSet iMessage iPos
50687>>>>>        String[] sMsg aSQLQueryMessages
50689>>>>>        DateTime dtQueryExecStart dtQueryExecEnd
50689>>>>>        TimeSpan tsQuery
50689>>>>>        tSqlErrorArray aSqlErrorArray
50689>>>>>        tSqlErrorArray aSqlErrorArray
50689>>>>>        tSQLConnection SQLConnection
50689>>>>>        tSQLConnection SQLConnection
50689>>>>>        Boolean bShowProgress
50689>>>>>
50689>>>>>        If (num_arguments > 4) Begin
50691>>>>>            Move bShowProgr to bShowProgress
50692>>>>>        End
50692>>>>>>
50692>>>>>        Get phoSQLManager to hoSql
50693>>>>>
50693>>>>>        Get _SqlFindKeyWord CI_SQLGO to sGOKeyWord
50694>>>>>        // There seems to be a problem to pass strings when their value gets really big, aka
50694>>>>>        // above the argument_size level. It isn't clear when these problems starts but sooner
50694>>>>>        // or later SqlExecDirect stops working correctly with no error messages!
50694>>>>>        // To guard from this we set a max number of lines (iChunkMax) that can be processed
50694>>>>>        // at a time. Testing with the Create Chinook Database script; 500 seems like a number that works fine.
50694>>>>>        // A bonus of this is that it turns out that it is actually faster to run in chunks!
50694>>>>>        Get piChunkMax to iChunkMax
50695>>>>>        Move 0 to iChunkCounter
50696>>>>>        Move "" to sStmt
50697>>>>>
50697>>>>>        Get _SqlFindKeyWord CI_SQLSetNoCountOn to sNoCountKeyWord
50698>>>>>        Move (Character(13) + Character(10)) to sCR
50699>>>>>
50699>>>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
50700>>>>>
50700>>>>>        Get phoSQLManager  to hoSQL
50701>>>>>        If (sDriverID = ODBC_DRV_ID) Begin
50703>>>>>            If (Uppercase(SQLConnection.sConnectionString) contains CS_SQLIniDSNKeyword) Begin
50705>>>>>                Move (Pos(";", SQLConnection.sConnectionString)) to iPos
50706>>>>>                If (iPos > 0) Begin
50708>>>>>                    Move (Left(SQLConnection.sConnectionString, (iPos - 1))) to SQLConnection.sConnectionString
50709>>>>>                    Move (Trim(SQLConnection.sConnectionString)) to SQLConnection.sConnectionString
50710>>>>>                End
50710>>>>>>
50710>>>>>            End
50710>>>>>>
50710>>>>>        End
50710>>>>>>
50710>>>>>        Send SqlSetConnect of hoSQL sDriverID SQLConnection.sConnectionString
50711>>>>>        Get SqlConnect     of hoSQL "" "" to hoSQLConnect
50712>>>>>
50712>>>>>        If (hoSQLConnect <> 0) Begin
50714>>>>>            Move False to Err
50715>>>>>            Get SqlOpen of hoSQLConnect to hoStmt
50716>>>>>            If (hoStmt <> 0) Begin
50718>>>>>
50718>>>>>                // If the embedded resource should be written as a script file to disk:
50718>>>>>                If (bCreateScriptFile = True) Begin
50720>>>>>                    Get psHome of (phoWorkspace(ghoApplication)) to sExportFile
50721>>>>>                    Get vFolderFormat sExportFile to sExportFile
50722>>>>>                    Move (sExportFile + sMemFileName) to sExportFile
50723>>>>>                    Get Seq_New_Channel to iOut
50724>>>>>                    If (iOut <> DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
50726>>>>>                        Direct_Output channel iOut sExportFile
50728>>>>>                    End
50728>>>>>>
50728>>>>>                End
50728>>>>>>
50728>>>>>
50728>>>>>                // Record starting date/time stamp
50728>>>>>                Move (CurrentDateTime()) to dtQueryExecStart
50729>>>>>                // Turn on error handling if enabled
50729>>>>>                If (pbHandleQueryErrors(Self)) Begin
50731>>>>>                    Set pbSqlError to False
50732>>>>>                    Set paSqlErrorArray to aSqlErrorArray
50733>>>>>                    Move Error_Object_Id to hoError
50734>>>>>                    Move Self to Error_Object_Id
50735>>>>>                End
50735>>>>>>
50735>>>>>
50735>>>>>                Move (SizeOfArray(SQLScriptArray.sSQLScriptArray)) to iRows
50736>>>>>                Decrement iRows
50737>>>>>                If (sDriverID = MSSQLDRV_ID) Begin
50739>>>>>                    Move (sNoCountKeyWord + sCR) to sStmt
50740>>>>>                End
50740>>>>>>
50740>>>>>
50740>>>>>                for iCount from 0 to iRows
50746>>>>>>
50746>>>>>                    Move (SQLScriptArray.sSQLScriptArray[iCount]) to sSQLVal
50747>>>>>
50747>>>>>                    If (Uppercase(sSQLVal) <> sGOKeyWord) Begin
50749>>>>>                        If (sSQLVal <> "") Begin
50751>>>>>                            Move (sSQLVal + sCR) to sSQLVal
50752>>>>>                        End
50752>>>>>>
50752>>>>>                        Move (Append(sStmt, (sSQLVal))) to sStmt
50753>>>>>                    End
50753>>>>>>
50753>>>>>
50753>>>>>                    // - Each time we encounter a "GO" statement we execute it,
50753>>>>>                    // or if at the very end of the script.
50753>>>>>                    If (Uppercase(sSQLVal) = sGOKeyWord or iChunkCounter >= iChunkMax or iCount = iRows) Begin
50755>>>>>
50755>>>>>                        // - It turns out it can be at least 10 times faster to execute SQL statements in chunks,
50755>>>>>                        // instead of all in one go.
50755>>>>>                        Send SqlExecDirect of hoStmt sStmt
50756>>>>>
50756>>>>>                        If (bCreateScriptFile = True) Begin
50758>>>>>                            Write channel iOut sStmt
50760>>>>>                        End
50760>>>>>>
50760>>>>>                        Move "" to sStmt
50761>>>>>                        Move 0 to iChunkCounter
50762>>>>>                    End
50762>>>>>>
50762>>>>>                    Increment iChunkCounter
50763>>>>>                Loop
50764>>>>>>
50764>>>>>
50764>>>>>                Repeat
50764>>>>>>
50764>>>>>                    If (pbHandleQueryErrors(Self)) Begin
50766>>>>>                        Move hoError to Error_Object_Id
50767>>>>>                    End
50767>>>>>>
50767>>>>>                    Move (CurrentDateTime()) to dtQueryExecEnd
50768>>>>>
50768>>>>>                    Send _SqlColumnInfo hoStmt
50769>>>>>                    Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_ROWCOUNT to iRows
50770>>>>>                    Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_ROWCOUNT_TYPE to iRowType
50771>>>>>                    Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_NUMMESSAGES to iMsgs
50772>>>>>                    Set piRows    to iRows
50773>>>>>                    Set piRowType to iRowType
50774>>>>>
50774>>>>>                    If (iMsgs <> 0) Begin
50776>>>>>                        If (ghoDbUpdateHandler > 0) Begin
50778>>>>>                            Get paSQLQueryMessages of ghoDbUpdateHandler to aSQLQueryMessages
50779>>>>>                        End
50779>>>>>>
50779>>>>>                        for i from 1 to iMsgs
50785>>>>>>
50785>>>>>                            Get SqlGetMessage of hoStmt i to sMessage
50786>>>>>                            Get RemoveComponentIdentifier of hoStmt sMessage to sMessage
50787>>>>>                            If (bShowProgress = True) Begin
50789>>>>>                                If (Active_State(ghoStatusPanel)) Begin
50791>>>>>                                    Send Update_StatusPanel of ghoStatusPanel (Sformat("  SQLGetMessage iMessage %1 returned [%2]", iMessage, sMessage))
50792>>>>>                                End
50792>>>>>>
50792>>>>>                                Else Begin
50793>>>>>                                    Showln (Sformat("  SQLGetMessage iMessage %1 returned [%2]", iMessage, sMessage))
50795>>>>>                                End
50795>>>>>>
50795>>>>>                            End
50795>>>>>>
50795>>>>>                            Move sMessage to sMsg[SizeOfArray(sMsg)]
50796>>>>>                            Move sMessage to aSQLQueryMessages[SizeOfArray(aSQLQueryMessages)]
50797>>>>>                        Loop
50798>>>>>>
50798>>>>>
50798>>>>>
50798>>>>>                        If (ghoDbUpdateHandler > 0) Begin
50800>>>>>                            Set paSQLQueryMessages of ghoDbUpdateHandler to aSQLQueryMessages
50801>>>>>                        End
50801>>>>>>
50801>>>>>                        Set paQueryMessages to sMsg
50802>>>>>                    End
50802>>>>>>
50802>>>>>
50802>>>>>                    Get SQLNextResultSet of hoStmt to iNextSet
50803>>>>>                Until (iNextSet = 0)
50805>>>>>
50805>>>>>                Move (CurrentDateTime()) to dtQueryExecEnd
50806>>>>>            End
50806>>>>>>
50806>>>>>
50806>>>>>            Move (dtQueryExecEnd - dtQueryExecStart) to tsQuery
50807>>>>>            Set ptsQueryExec to tsQuery
50808>>>>>            Send SqlClose of hoStmt
50809>>>>>
50809>>>>>            If (bCreateScriptFile = True) Begin
50811>>>>>                Close_Output channel iOut
50813>>>>>                Send Seq_Release_Channel iOut
50814>>>>>            End
50814>>>>>>
50814>>>>>        End
50814>>>>>>
50814>>>>>        Send SqlDisconnect of hoSQLConnect
50815>>>>>
50815>>>>>        Function_Return (hoSQLConnect <> 0 and Err = False)
50816>>>>>    End_Function
50817>>>>>
50817>>>>>    Function _SqlUtilCreatePostGreSQLDatabaseByScript String sMemScriptFile String sDatabaseName Returns Boolean
50819>>>>>        tSQLScriptArray SQLScriptArray
50819>>>>>        tSQLScriptArray SQLScriptArray
50819>>>>>        String sDriverID sCollation
50819>>>>>        Boolean bOK
50819>>>>>        Integer iSize iCount
50819>>>>>
50819>>>>>        If (Trim(sDatabaseName) = "") Begin
50821>>>>>            Function_Return False
50822>>>>>        End
50822>>>>>>
50822>>>>>
50822>>>>>        Get psDriverID  to sDriverID
50823>>>>>        Get psCollation to sCollation
50824>>>>>        Get _SqlUtilReadResource sMemScriptFile to SQLScriptArray
50825>>>>>        If (SQLScriptArray.bError = True) Begin
50827>>>>>            Function_Return False
50828>>>>>        End
50828>>>>>>
50828>>>>>
50828>>>>>        Move (SizeOfArray(SQLScriptArray.sSQLScriptArray)) to iSize
50829>>>>>        Decrement iSize
50830>>>>>
50830>>>>>        For iCount from 0 to iSize
50836>>>>>>
50836>>>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "DATABASE_NAME_XXX") Begin
50838>>>>>                Move (Replaces("DATABASE_NAME_XXX",  SQLScriptArray.sSQLScriptArray[iCount], String(sDatabaseName))) to SQLScriptArray.sSQLScriptArray[iCount]
50839>>>>>            End
50839>>>>>>
50839>>>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "COLLATION_NAME_XXX") Begin
50841>>>>>                Move (Replaces("COLLATION_NAME_XXX", SQLScriptArray.sSQLScriptArray[iCount], String(sCollation))) to SQLScriptArray.sSQLScriptArray[iCount]
50842>>>>>            End
50842>>>>>>
50842>>>>>        Loop
50843>>>>>>
50843>>>>>
50843>>>>>        Get _SqlUtilExecuteEmbeddedScript SQLScriptArray sDriverID False "" to bOK
50844>>>>>
50844>>>>>        Function_Return (bOK = True)
50845>>>>>    End_Function
50846>>>>>
50846>>>>>    Function _SqlUtilCreateMySQLDatabaseByScript String sMemScriptFile String sDatabaseName Returns Boolean
50848>>>>>        tSQLScriptArray SQLScriptArray
50848>>>>>        tSQLScriptArray SQLScriptArray
50848>>>>>        String sDriverID sCollation
50848>>>>>        Boolean bOK
50848>>>>>        Integer iSize iCount
50848>>>>>
50848>>>>>        If (Trim(sDatabaseName) = "") Begin
50850>>>>>            Function_Return False
50851>>>>>        End
50851>>>>>>
50851>>>>>
50851>>>>>        Get psDriverID  to sDriverID
50852>>>>>        Get psCollation to sCollation
50853>>>>>        Get _SqlUtilReadResource sMemScriptFile to SQLScriptArray
50854>>>>>        If (SQLScriptArray.bError = True) Begin
50856>>>>>            Function_Return False
50857>>>>>        End
50857>>>>>>
50857>>>>>
50857>>>>>        Move (SizeOfArray(SQLScriptArray.sSQLScriptArray)) to iSize
50858>>>>>        Decrement iSize
50859>>>>>
50859>>>>>        For iCount from 0 to iSize
50865>>>>>>
50865>>>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "DATABASE_NAME_XXX") Begin
50867>>>>>                Move (Replaces("DATABASE_NAME_XXX",  SQLScriptArray.sSQLScriptArray[iCount], String(sDatabaseName))) to SQLScriptArray.sSQLScriptArray[iCount]
50868>>>>>            End
50868>>>>>>
50868>>>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "COLLATION_NAME_XXX") Begin
50870>>>>>                Move (Replaces("COLLATION_NAME_XXX", SQLScriptArray.sSQLScriptArray[iCount], String(sCollation))) to SQLScriptArray.sSQLScriptArray[iCount]
50871>>>>>            End
50871>>>>>>
50871>>>>>        Loop
50872>>>>>>
50872>>>>>        // ToDo: THIS FAILS BUT THE SQL SCRIPT WORKS IN MYSQL!
50872>>>>>        Get _SqlUtilExecuteEmbeddedScript SQLScriptArray sDriverID False "" to bOK
50873>>>>>
50873>>>>>        Function_Return (bOK = True)
50874>>>>>    End_Function
50875>>>>>
50875>>>>>    Function _StrToFieldNumber Integer iFile String sField Returns Integer
50877>>>>>        Integer iMax iPos
50877>>>>>        String sName
50877>>>>>
50877>>>>>        Move (Lowercase(sField)) to sField
50878>>>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iFile to iMax
50881>>>>>        For iPos from 0 to iMax
50887>>>>>>
50887>>>>>            Get_Attribute DF_FIELD_NAME of iFile iPos to sName
50890>>>>>            Move (Lowercase(sName)) to sName
50891>>>>>            If (sName = sField) Begin
50893>>>>>                Function_Return iPos
50894>>>>>            End
50894>>>>>>
50894>>>>>        Loop
50895>>>>>>
50895>>>>>        Function_Return -1
50896>>>>>    End_Function
50897>>>>>
50897>>>>>    // Checks if the passed connection id exists in the CLI interface.
50897>>>>>    // This might be needed by API-methods when a connection id is to be used and
50897>>>>>    // the connection id hasn't been established with the driver's CLI interface.
50897>>>>>    // NOTE: Only applicable for DAW drivers.
50897>>>>>    Function IsConnectionID String sConnectionID String sDriverID Returns Boolean
50899>>>>>        String sID sConnString
50899>>>>>        Integer iDriver iNumConn iCount
50899>>>>>        Handle hoCLI
50899>>>>>        Boolean bOK
50899>>>>>
50899>>>>>        Get IsDAWSQLDriver sDriverID to bOK
50900>>>>>        If (bOK = False) Begin
50902>>>>>            Error DFERR_PROGRAM "Connection ID's can only be used with DAW drivers."
50903>>>>>>
50903>>>>>            Function_Return False
50904>>>>>        End
50904>>>>>>
50904>>>>>
50904>>>>>        Move False to bOK
50905>>>>>        Get phoCLIHandler to hoCLI
50906>>>>>        If (hoCLI <> 0) Begin
50908>>>>>            Set psDriverID of hoCLI to sDriverID
50909>>>>>            Get DriverIndex of hoCLI sDriverID to iDriver
50910>>>>>
50910>>>>>            // If driver not loaded; load it.
50910>>>>>            If (iDriver = 0) Begin
50912>>>>>                Load_Driver sDriverID
50913>>>>>                Get DriverIndex sDriverID to iDriver
50914>>>>>            End
50914>>>>>>
50914>>>>>            If (iDriver <> 0) Begin
50916>>>>>                Get_Attribute DF_DRIVER_NUMBER_CONNECTION_IDS of iDriver to iNumConn
50919>>>>>                Decrement iNumConn
50920>>>>>                For iCount from 0 to iNumConn
50926>>>>>>
50926>>>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID_STRING of iDriver iCount to sConnString
50929>>>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID of iDriver iCount to sID
50932>>>>>                    If (sID = sConnectionID) Begin
50934>>>>>                        Move True to bOK
50935>>>>>                    End
50935>>>>>>
50935>>>>>                Loop
50936>>>>>>
50936>>>>>            End
50936>>>>>>
50936>>>>>        End
50936>>>>>>
50936>>>>>
50936>>>>>        Function_Return bOK
50937>>>>>    End_Function
50938>>>>>
50938>>>>>    Function IsDAWSQLDriver String sDriverID Returns Boolean
50940>>>>>        Boolean bOK
50940>>>>>        Move (sDriverID = MSSQLDRV_ID or sDriverID = DB2_DRV_ID or sDriverID = ODBC_DRV_ID or sDriverID = DFBTRDRV_ID) to bOK
50941>>>>>        Function_Return bOK
50942>>>>>    End_Function
50943>>>>>
50943>>>>>    Function IsMSSQLDriver Returns Boolean
50945>>>>>        Integer iDriverIndex
50945>>>>>        Get DriverIndex MSSQLDRV_ID to iDriverIndex
50946>>>>>        Function_Return (iDriverIndex <> 0)
50947>>>>>    End_Function
50948>>>>>
50948>>>>>    // Similar to _SqlCheckCurrentDriver but generates no error and it doesn't
50948>>>>>    // attempt to load the driver.
50948>>>>>    // Returns true if the passed driver is SQL based.
50948>>>>>    Function IsSQLDriver String sDriverID Returns Boolean
50950>>>>>        Boolean bOK
50950>>>>>        Get IsDAWSQLDriver sDriverID to bOK
50951>>>>>        Function_Return bOK
50952>>>>>    End_Function
50953>>>>>
50953>>>>>    // *** Error Handler ***
50953>>>>>    //
50953>>>>>    // Note: If the cDbUpdateHandler & cDbUpdateVersion classes are used this error handler is _not_
50953>>>>>    //       used. Instead the Error_Report in the cDbUpdateHandler i used.
50953>>>>>    Procedure Error_Report Integer iErrorNumber Integer iErrorLine String sErrorText
50955>>>>>        Integer iSize iErrorMode
50955>>>>>        tSqlErrorArray aSqlErrorArray
50955>>>>>        tSqlErrorArray aSqlErrorArray
50955>>>>>
50955>>>>>        If (pbProcessingError(Self)) Begin
50957>>>>>            Procedure_Return
50958>>>>>        End
50958>>>>>>
50958>>>>>
50958>>>>>        Get Error_Report_Mode to iErrorMode
50959>>>>>        If (iErrorMode = DUF_ERROR_NO_REPORT) Begin
50961>>>>>            Set Private.pbProcessingError to False
50962>>>>>            Procedure_Return
50963>>>>>        End
50963>>>>>>
50963>>>>>
50963>>>>>        Set pbProcessingError to True
50964>>>>>        Set pbSqlError to True
50965>>>>>        Get paSqlErrorArray      to aSqlErrorArray
50966>>>>>        Move (SizeOfArray(aSqlErrorArray.sSqlErrorArray)) to iSize
50967>>>>>        Move sErrorText          to aSqlErrorArray.sSqlErrorArray[iSize]
50968>>>>>        Get psSQLStatementString to aSqlErrorArray.sSqlStatementArray[iSize]
50969>>>>>        Move iErrorNumber        to aSqlErrorArray.iSqlErrorArray[iSize]
50970>>>>>        Set paSqlErrorArray      to aSqlErrorArray
50971>>>>>        Set pbProcessingError to False
50972>>>>>    End_Procedure
50973>>>>>
50973>>>>>    // *** Miscellanous Helper Functions ***
50973>>>>>    //
50973>>>>>    // Helper function. Takes a DF_FILE_ROOT_NAME value as parameter and
50973>>>>>    // returns the table name only; stripped of any prefix, path or filename extension.
50973>>>>>    Function _TableNameOnly String sTableName Returns String
50975>>>>>        Integer iPos
50975>>>>>        Move (Pos(":", sTableName)) to iPos
50976>>>>>        If (iPos <> 0) Begin
50978>>>>>            Move (Mid(sTableName, Length(sTableName), (iPos +1))) to sTableName
50979>>>>>        End  
50979>>>>>>
50979>>>>>        Move (Pos(".int", Lowercase(sTableName))) to iPos
50980>>>>>        If (iPos <> 0) Begin
50982>>>>>            Move (Left(sTableName, (iPos -1))) to sTableName
50983>>>>>        End  
50983>>>>>>
50983>>>>>        Function_Return sTableName
50984>>>>>    End_Function
50985>>>>>
50985>>>>>    // Removes any prefix from a table name.
50985>>>>>    // Example mssqldrv:mytable returns mytable
50985>>>>>    //         dbo.mytable returns mytable
50985>>>>>    Function _TableNoPrefix String sName Returns String
50987>>>>>        Integer iPos
50987>>>>>        Move (Pos(":", sName)) to iPos
50988>>>>>        If (iPos <> 0) Begin
50990>>>>>            Move (Mid(sName, Length(sName), (iPos + 1))) to sName
50991>>>>>        End
50991>>>>>>
50991>>>>>        Move (Pos(".", sName)) to iPos
50992>>>>>        If (iPos <> 0) Begin
50994>>>>>            Move (Mid(sName, Length(sName), (iPos + 1))) to sName
50995>>>>>        End
50995>>>>>>
50995>>>>>        Function_Return sName
50996>>>>>    End_Function
50997>>>>>    
50997>>>>>    Function _DriverIDFromRootName String sRootName Returns String
50999>>>>>        String sDriverID
50999>>>>>        Integer iPos
50999>>>>>        Move DATAFLEX_ID to sDriverID
51000>>>>>        Move (Pos(":", sRootName)) to iPos
51001>>>>>        If (iPos <> 0) Begin
51003>>>>>            Move (Left(sRootName, (iPos -1))) to sDriverID
51004>>>>>        End
51004>>>>>>
51004>>>>>        Function_Return sDriverID
51005>>>>>    End_Function
51006>>>>>    // Does the Rootname points to a .dat file?
51006>>>>>    Function _IsDatEntry Handle hTable Returns Boolean
51008>>>>>        Boolean bFound bIsIntEntry
51008>>>>>        String sRootName sNoDriverRootname sDriver
51008>>>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
51011>>>>>        Get _DriverIDFromRootName sRootName to sDriver
51012>>>>>        Get _TableNameOnly sRootName to sNoDriverRootname
51013>>>>>        Get _IsIntEntry hTable to bIsIntEntry
51014>>>>>        Move (bIsIntEntry = False and sDriver = DATAFLEX_ID) to bFound
51015>>>>>        Function_Return bFound
51016>>>>>    End_Function
51017>>>>>
51017>>>>>    // Checks that the RootName points to a .dat file and that the .dat file exists on disk.
51017>>>>>    Function _DatFileExists Handle hTable Returns Boolean
51019>>>>>        Boolean bExists
51019>>>>>        String sDataPath sRootName sNoDriverRootname
51019>>>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
51022>>>>>        Get _TableNameOnly sRootName to sNoDriverRootname
51023>>>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
51024>>>>>        File_Exist (sDataPath + "\" + sNoDriverRootname + ".dat") bExists
51025>>>>>        Function_Return bExists
51026>>>>>    End_Function
51027>>>>>    
51027>>>>>    // Does the Rootname contain a ".int" suffix.
51027>>>>>    Function _IsIntEntry Handle hTable Returns Boolean
51029>>>>>        Boolean bFound
51029>>>>>        String sRootName
51029>>>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
51032>>>>>        Move (Lowercase(sRootName) contains ".int") to bFound
51033>>>>>        Function_Return bFound
51034>>>>>    End_Function
51035>>>>>
51035>>>>>    // Checks to see if the .int file actually exists in the Data folder.
51035>>>>>    Function _IntFileExists Handle hTable Returns Boolean
51037>>>>>        Boolean bExists bIsIntFile
51037>>>>>        String sDataPath sIntFileName
51037>>>>>        Integer iPos
51037>>>>>        
51037>>>>>        Move False to bExists
51038>>>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
51039>>>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sIntFileName
51042>>>>>        Get _TableNameOnly sIntFileName to sIntFileName
51043>>>>>        Move (Pos(".int", Lowercase(sIntFileName))) to iPos
51044>>>>>        If (iPos = 0) Begin
51046>>>>>            Move (sIntFileName + ".int") to sIntFileName
51047>>>>>        End
51047>>>>>>
51047>>>>>        File_Exist (sDataPath + "\" + sIntFileName) bExists
51048>>>>>        Function_Return bExists    
51049>>>>>    End_Function
51050>>>>>        
51050>>>>>    // Returns True if the hTable's RootName has a driver <> DataFlex
51050>>>>>    Function _IsSQLEntry Handle hTable Returns Boolean
51052>>>>>        Boolean bFound bIsIntFile
51052>>>>>        String sLogicalName sRootName sNoDriverRootname sDriver
51052>>>>>        
51052>>>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
51055>>>>>        Get _DriverIDFromRootName sRootName to sDriver
51056>>>>>        Get _IsIntEntry hTable to bIsIntFile
51057>>>>>        Get _TableNameOnly sRootName to sNoDriverRootname
51058>>>>>        Move (bIsIntFile = True or sDriver <> DATAFLEX_ID) to bFound
51059>>>>>        Function_Return bFound
51060>>>>>    End_Function
51061>>>>>
51061>>>>>    // This is used in place of the DF_FILE_OPENED table attribute, because
51061>>>>>    // the table then needs to be open, which takes time.
51061>>>>>    Function _IsAliasTable Handle hTable Returns Boolean
51063>>>>>        Boolean bFound bIsIntTable
51063>>>>>        String sLogicalName sRootName sNoDriverRootname
51063>>>>>        
51063>>>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
51066>>>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
51069>>>>>        Get _TableNameOnly sRootName to sNoDriverRootname
51070>>>>>        Get _IsIntEntry hTable to bIsIntTable
51071>>>>>        // Do we have an Alias table?
51071>>>>>        Move (Lowercase(sLogicalName) <> Lowercase(sNoDriverRootname)) to bFound
51072>>>>>        Function_Return bFound
51073>>>>>    End_Function
51074>>>>>
51074>>>>>    // If the SQL table cannot be opened, we do this checking a bit different.
51074>>>>>    Function _IsSystemFile Handle hTable Returns Boolean
51076>>>>>        Boolean bIsSystem bIsSQL bExists
51076>>>>>        String sRootName sDataPath sDriver
51076>>>>>        String[] asIndexes
51077>>>>>        Move False to bIsSystem
51078>>>>>        
51078>>>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
51081>>>>>        Get _DriverIDFromRootName sRootName to sDriver
51082>>>>>        Get _TableNameOnly sRootName to sRootName
51083>>>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
51084>>>>>        Get _IsSQLEntry hTable to bIsSQL
51085>>>>>        If (bIsSQL = False) Begin
51087>>>>>            File_Exist (sDataPath + "\" + sRootName + ".dat") bExists
51088>>>>>            If (bExists = True) Begin
51090>>>>>                Open (sDataPath + "\" + sRootName + ".dat") as hTable
51092>>>>>                Get_Attribute DF_FILE_IS_SYSTEM_FILE of hTable to bIsSystem 
51095>>>>>                Close hTable
51096>>>>>            End
51096>>>>>>
51096>>>>>        End 
51096>>>>>>
51096>>>>>        Else Begin
51097>>>>>            Get _SqlUtilEnumerateIndexes sRootName sDriver to asIndexes
51098>>>>>            Move (SizeOfArray(asIndexes) = 0) to bIsSystem
51099>>>>>        End
51099>>>>>>
51099>>>>>        Function_Return bIsSystem
51100>>>>>    End_Function
51101>>>>>                          
51101>>>>>    // Removes any driver prefix and any .int suffix from the Rootname
51101>>>>>    // If any driver found, it will be placed in the ByRef param: sDriver.
51101>>>>>    Function _RemoveDriverFromRootName String sRootname String ByRef sDriver Returns String
51103>>>>>        String sNoDriverRootname
51103>>>>>        Integer iPos
51103>>>>>        
51103>>>>>        Move sRootname to sNoDriverRootname
51104>>>>>        Move (Pos(":", sRootname)) to iPos
51105>>>>>        If (iPos <> 0) Begin
51107>>>>>            Move (Left(sRootname, iPos -1)) to sDriver
51108>>>>>            Move (Mid(sRootname, Length(sRootname), iPos +1)) to sNoDriverRootname    
51109>>>>>        End
51109>>>>>>
51109>>>>>        Else Begin
51110>>>>>            Move DATAFLEX_ID to sDriver
51111>>>>>        End
51111>>>>>>
51111>>>>>        Move (Pos(".int", Lowercase(sNoDriverRootname))) to iPos
51112>>>>>        If (iPos <> 0) Begin
51114>>>>>            Move (Left(sNoDriverRootname, iPos -1)) to sNoDriverRootname
51115>>>>>        End
51115>>>>>>
51115>>>>>        Function_Return sNoDriverRootname    
51116>>>>>    End_Function
51117>>>>>
51117>>>>>    Function _CountFilelistSystemTables Returns Integer
51119>>>>>        tFilelist[] FileListTables
51119>>>>>        tFilelist[] FileListTables
51120>>>>>        Integer iCount iSize iItems
51120>>>>>        
51120>>>>>        Move 0 to iItems
51121>>>>>        Get pFileListArray to FileListTables
51122>>>>>        Move (SizeOfArray(FileListTables)) to iSize
51123>>>>>        If (iSize <> 0) Begin
51125>>>>>            Decrement iSize
51126>>>>>            for iCount from 0 to iSize
51132>>>>>>
51132>>>>>                If (FileListTables[iCount].bIsSystemFile = True) Begin
51134>>>>>                    Increment iItems
51135>>>>>                End
51135>>>>>>
51135>>>>>            Loop
51136>>>>>>
51136>>>>>        End
51136>>>>>>
51136>>>>>        Function_Return iItems    
51137>>>>>    End_Function
51138>>>>>
51138>>>>>    Function _CountFileListAliasTables Returns Integer
51140>>>>>        tFilelist[] FileListTables
51140>>>>>        tFilelist[] FileListTables
51141>>>>>        Integer iCount iSize iItems
51141>>>>>        
51141>>>>>        Move 0 to iItems
51142>>>>>        Get pFileListArray to FileListTables
51143>>>>>        Move (SizeOfArray(FileListTables)) to iSize
51144>>>>>        If (iSize <> 0) Begin
51146>>>>>            Decrement iSize
51147>>>>>            for iCount from 0 to iSize
51153>>>>>>
51153>>>>>                If (FileListTables[iCount].bIsAlias = True) Begin
51155>>>>>                    Increment iItems
51156>>>>>                End
51156>>>>>>
51156>>>>>            Loop
51157>>>>>>
51157>>>>>        End
51157>>>>>>
51157>>>>>        Function_Return iItems    
51158>>>>>    End_Function
51159>>>>>
51159>>>>>    Function _CountFileListMasterTables Returns Integer
51161>>>>>        String sRootName sLogicalName sDriver sNoDriverRootname
51161>>>>>        Handle hTable
51161>>>>>        Integer iSize iItems
51161>>>>>        Boolean bIsAlias bIsIntTable
51161>>>>>        
51161>>>>>        Move 0 to iItems
51162>>>>>        Move 0 to hTable 
51163>>>>>        Repeat
51163>>>>>>
51163>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
51166>>>>>            If (hTable <> 0 and hTable <> 50) Begin
51168>>>>>                Get _IsAliasTable hTable to bIsAlias
51169>>>>>                If (bIsAlias = False) Begin
51171>>>>>                    Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
51174>>>>>                    Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName                    
51177>>>>>                    Get _RemoveDriverFromRootName sRootName (&sDriver) to sNoDriverRootname
51178>>>>>                    Get _IsIntEntry hTable to bIsIntTable
51179>>>>>                    If (sDriver <> DATAFLEX_ID and Lowercase(sNoDriverRootname) = Lowercase(sLogicalName)) Begin
51181>>>>>                        Increment iItems
51182>>>>>                    End
51182>>>>>>
51182>>>>>                End
51182>>>>>>
51182>>>>>            End
51182>>>>>>
51182>>>>>        Until (hTable = 0)
51184>>>>>        
51184>>>>>        Function_Return iItems
51185>>>>>    End_Function
51186>>>>>
51186>>>>>    Function _CountFileListOpenErrors Returns Integer
51188>>>>>        tFilelist[] FileListTables
51188>>>>>        tFilelist[] FileListTables
51189>>>>>        Integer iCount iSize iItems
51189>>>>>        
51189>>>>>        Move 0 to iItems
51190>>>>>        Get pFileListArray to FileListTables
51191>>>>>        Move (SizeOfArray(FileListTables)) to iSize
51192>>>>>        If (iSize <> 0) Begin
51194>>>>>            Decrement iSize
51195>>>>>            for iCount from 0 to iSize
51201>>>>>>
51201>>>>>                If (FileListTables[iCount].bErrorOpening = True) Begin
51203>>>>>                    Increment iItems
51204>>>>>                End
51204>>>>>>
51204>>>>>            Loop
51205>>>>>>
51205>>>>>        End
51205>>>>>>
51205>>>>>        Function_Return iItems    
51206>>>>>    End_Function 
51207>>>>>
51207>>>>>    // Checks all Alias Filelist entries for errors,
51207>>>>>    // and return them as a string array of RootNames.
51207>>>>>    Function _CountFileListAliasErrors Returns tFilelist[]
51209>>>>>        Integer iCount iItem
51209>>>>>        Handle hTable
51209>>>>>        Boolean bIsAlias bOK
51209>>>>>        String sRootName
51209>>>>>        tFilelist[] FileListArray
51209>>>>>        tFilelist[] FileListArray
51210>>>>>        
51210>>>>>        Move 0 to iCount
51211>>>>>        Move 0 to hTable
51212>>>>>        Repeat
51212>>>>>>
51212>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
51215>>>>>            If (hTable <> 0 and hTable <> 50) Begin
51217>>>>>                Get _IsAliasTable hTable to bIsAlias
51218>>>>>                If (bIsAlias = True) Begin
51220>>>>>                    Get _FindAliasEntryError hTable to iItem
51221>>>>>                    If (iItem <> 0) Begin
51223>>>>>                        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
51226>>>>>                        Move hTable    to FileListArray[iCount].hTable
51227>>>>>                        Move sRootName to FileListArray[iCount].sRootName
51228>>>>>                    End
51228>>>>>>
51228>>>>>                    Add iItem to iCount
51229>>>>>                End
51229>>>>>>
51229>>>>>            End
51229>>>>>>
51229>>>>>        Until (hTable = 0)
51231>>>>>        
51231>>>>>        Function_Return FileListArray
51232>>>>>    End_Function
51233>>>>>
51233>>>>>    // Helper function for _CountFileListAliasErrors.
51233>>>>>    // Checks to see if an Alias Filelist entry is correct
51233>>>>>    // What it does:
51233>>>>>    //  1. Checks that the Filelist entry is an Alias table
51233>>>>>    //  2. If an Alias, checks if the RootName points to a valid Table
51233>>>>>    Function _FindAliasEntryError Handle hTable Returns Integer
51235>>>>>        Handle hMasterTable
51235>>>>>        String sDataPath sDriver sLogicalNameAlias sRootNameAlias sNoDriverRootnameAlias sLogicalNameMaster sRootNameMaster sNoDriverRootnameMaster
51235>>>>>        Boolean bOK bFound bIsAlias bIsAliasSQL bIsMasterSQL bIsIntFile
51235>>>>>        Integer iRetval
51235>>>>>        
51235>>>>>        Get _IsAliasTable hTable to bIsAlias
51236>>>>>        If (bIsAlias = False) Begin
51238>>>>>            Function_Return 0
51239>>>>>        End
51239>>>>>>
51239>>>>>        
51239>>>>>        Move 0 to iRetval
51240>>>>>        Move False to bOK
51241>>>>>        Move False to bIsAliasSQL
51242>>>>>        Move False to bIsMasterSQL
51243>>>>>
51243>>>>>        Get _IsIntEntry hTable to bIsIntFile
51244>>>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootNameAlias
51247>>>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalNameAlias
51250>>>>>        Get _TableNameOnly sRootNameAlias to sNoDriverRootnameAlias
51251>>>>>        Get UtilAliasToMasterTableHandle hTable to hMasterTable
51252>>>>>        Move (hMasterTable <> 0) to bOK
51253>>>>>        If (bOK = True) Begin
51255>>>>>            Get _IsSQLEntry hTable       to bIsAliasSQL
51256>>>>>            Get _IsSQLEntry hMasterTable to bIsMasterSQL 
51257>>>>>            Move (bIsAliasSQL = bIsMasterSQL) to bOK
51258>>>>>        End
51258>>>>>>
51258>>>>>        
51258>>>>>        // Checks that the .int file exists in the Data folder
51258>>>>>        If (bIsIntFile = True) Begin
51260>>>>>            Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
51261>>>>>            File_Exist (sDataPath + "\" + sNoDriverRootnameAlias) bOK
51262>>>>>        End
51262>>>>>>
51262>>>>>
51262>>>>>        If (bOK = False) Begin
51264>>>>>            Move 1 to iRetval
51265>>>>>        End
51265>>>>>>
51265>>>>>        Function_Return iRetval
51266>>>>>    End_Function
51267>>>>>        
51267>>>>>    // Returns the first datapath found in the psDataPath property.
51267>>>>>    // The returned path always ends with a "\"
51267>>>>>    Function psDataPathFirstPart Returns String
51269>>>>>        String sDataPath
51269>>>>>        Integer iCount
51269>>>>>
51269>>>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
51270>>>>>        Get CountOfPaths of (phoWorkspace(ghoApplication)) sDataPath to iCount
51271>>>>>        If (iCount > 1) Begin
51273>>>>>            Get PathAtIndex of (phoWorkspace(ghoApplication)) sDataPath 1 to sDataPath
51274>>>>>        End
51274>>>>>>
51274>>>>>        If (sDataPath <> "") Begin
51276>>>>>            Get vFolderFormat sDataPath to sDataPath
51277>>>>>        End
51277>>>>>>
51277>>>>>
51277>>>>>        Function_Return sDataPath
51278>>>>>    End_Function
51279>>>>>
51279>>>>>    Function psLogTextFileWithPath Returns String
51281>>>>>        String sFileName
51281>>>>>        Handle hoLogFile
51281>>>>>        Get phoLogFile to hoLogFile
51282>>>>>        Get psLogTextFileWithPath of hoLogFile to sFileName
51283>>>>>        Function_Return sFileName
51284>>>>>    End_Function
51285>>>>>
51285>>>>>    Function phoLogFile Returns Handle
51287>>>>>        Handle hoLogFile   
51287>>>>>        Boolean bErr
51287>>>>>        
51287>>>>>        Move Err to bErr
51288>>>>>        Move 0 to hoLogFile
51289>>>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT  
51290>>>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
51291>>>>>        Delegate Get phoLogFile to hoLogFile
51293>>>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
51294>>>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
51295>>>>>        Move bErr to Err
51296>>>>>        
51296>>>>>        Function_Return hoLogFile
51297>>>>>    End_Function
51298>>>>>
51298>>>>>    Function pnCurrentVersionUpdate Returns Number
51300>>>>>        Number nCurrentVersionUpdate
51300>>>>>
51300>>>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
51301>>>>>        Delegate Get pnCurrentVersionUpdate to nCurrentVersionUpdate
51303>>>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
51304>>>>>
51304>>>>>        Function_Return nCurrentVersionUpdate
51305>>>>>    End_Function
51306>>>>>
51306>>>>>    Procedure LogError String sText Boolean bError
51308>>>>>        Handle hoLogFile
51308>>>>>        Number nCurrentVersionUpdate
51308>>>>>
51308>>>>>        Get phoLogFile to hoLogFile
51309>>>>>        If (hoLogFile = 0) Begin
51311>>>>>            Procedure_Return
51312>>>>>        End
51312>>>>>>
51312>>>>>        Get pnCurrentVersionUpdate to nCurrentVersionUpdate
51313>>>>>
51313>>>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
51314>>>>>        Send LogError of hoLogFile nCurrentVersionUpdate 0 sText 0 bError
51315>>>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
51316>>>>>    End_Procedure
51317>>>>>
51317>>>>>    Function pbContinueOnError Returns Boolean
51319>>>>>        Boolean bContinueOnError
51319>>>>>        If (ghoDbUpdateHandler > 0) Begin
51321>>>>>            Get pbContinueOnError of ghoDbUpdateHandler to bContinueOnError
51322>>>>>        End
51322>>>>>>
51322>>>>>        Function_Return bContinueOnError
51323>>>>>    End_Function
51324>>>>>
51324>>>>>
51324>>>>>    Function _UtilUpdateTAGFile String sFullTAGFileName String sColumnName Returns Boolean
51326>>>>>        Integer iChIn iChOut // iCount
51326>>>>>        Boolean bExists
51326>>>>>        String sExistingColumn
51326>>>>>
51326>>>>>        Move False to bExists
51327>>>>>        Get Seq_New_Channel to iChIn
51328>>>>>        Get Seq_New_Channel to iChOut
51329>>>>>        If (iChIn = DF_SEQ_CHANNEL_NOT_AVAILABLE or iChOut = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
51331>>>>>            Function_Return True
51332>>>>>        End
51332>>>>>>
51332>>>>>
51332>>>>>        Move False to Err
51333>>>>>        // The following line should also use the channel attribute. (Thank you, Hans van de Laar)
51333>>>>>        Direct_Input channel iChIn ("'" + sFullTAGFileName + "'")
51335>>>>>        While (not(SeqEof))
51339>>>>>            Readln channel iChIn sExistingColumn
51341>>>>>            If (Uppercase(sExistingColumn) = Uppercase(sColumnName)) Begin
51343>>>>>                Move True to bExists
51344>>>>>            End
51344>>>>>>
51344>>>>>            If (Trim(sExistingColumn) = "") Begin
51346>>>>>                Move True to SeqEof
51347>>>>>            End
51347>>>>>>
51347>>>>>        Loop
51348>>>>>>
51348>>>>>        Close_Input channel iChIn
51350>>>>>        Send Seq_Release_Channel iChIn
51351>>>>>
51351>>>>>        If (bExists = False) Begin
51353>>>>>            Append_Output channel iChOut sFullTAGFileName
51355>>>>>            Writeln channel iChOut sColumnName
51358>>>>>            Close_Output channel iChOut
51360>>>>>            Send Seq_Release_Channel iChOut
51361>>>>>        End
51361>>>>>>
51361>>>>>
51361>>>>>        Function_Return (Err = False)
51362>>>>>    End_Function
51363>>>>>
51363>>>>>    // Changes source code files.
51363>>>>>    // Pass a file name with full path and a value to search for, together with the value
51363>>>>>    // to change to. Can e.g. be used for changing all .int files from using a fixed server name,
51363>>>>>    // to use a Connection ID.
51363>>>>>    // Sample: Get _UtilChangeSourceCodeLine "C:\DataFlex 18.2 Examples\Order Entry\Data\Order.int" "SERVER_NAME SERVER=(local)\SQLEXPRESS1" "SERVER_NAME DFCONNID=ChinookDb"
51363>>>>>    // Pass "True" for the bShowResult if you want to see the result while it works. Showln will then be used for output
51363>>>>>    // Returns True if no errors occured.
51363>>>>>    Function _UtilChangeSourceCodeLine String sFileName String sChangeFrom String sChangeTo Boolean bShowResult Returns Boolean
51365>>>>>        Integer iCh iRow iItems iCount
51365>>>>>        String sValue sRow
51365>>>>>        String[] sFileArray
51366>>>>>        Boolean bExists bIsActive bFileChange
51366>>>>>
51366>>>>>        Move False to Err
51367>>>>>        Move 0 to iRow
51368>>>>>        Move False to bFileChange
51369>>>>>
51369>>>>>        If (ghoStatusPanel <> 0) Begin
51371>>>>>            Get Active_state of ghoStatusPanel to bIsActive
51372>>>>>        End
51372>>>>>>
51372>>>>>
51372>>>>>        Get vFilePathExists sFileName to bExists
51373>>>>>        If (bExists = False) Begin
51375>>>>>            If (bShowResult = True) Begin
51377>>>>>                If (bIsActive = True) Begin
51379>>>>>                    Send Update_StatusPanel of ghoStatusPanel ("File does not exist:" * String(sFileName))
51380>>>>>                End
51380>>>>>>
51380>>>>>                Else Begin
51381>>>>>                    Showln "File does not exist: " sFileName
51384>>>>>                End
51384>>>>>>
51384>>>>>            End
51384>>>>>>
51384>>>>>            Function_Return False
51385>>>>>        End
51385>>>>>>
51385>>>>>
51385>>>>>        Get Seq_Open_Input_Channel sFileName to iCh
51386>>>>>        If (iCh < 1) Begin
51388>>>>>            Function_Return False
51389>>>>>        End
51389>>>>>>
51389>>>>>
51389>>>>>        If (bShowResult = True) Begin
51391>>>>>            If (ghoStatusPanel <> 0) Begin
51393>>>>>                Get Active_state of ghoStatusPanel to bIsActive
51394>>>>>                If (bIsActive = True) Begin
51396>>>>>                    Set Message_Text of ghoStatusPanel to sFileName
51397>>>>>                    Send Update_StatusPanel of ghoStatusPanel ("sChangeFrom =" * String(sChangeFrom) * "sChangeTo =" * String(sChangeTo))
51398>>>>>                    Send DoAdvance of ghoProgressBar
51399>>>>>                End
51399>>>>>>
51399>>>>>            End
51399>>>>>>
51399>>>>>            Else Begin
51400>>>>>                Showln ""
51402>>>>>                Showln "sFileName = " sFileName
51405>>>>>                Showln "sChangeFrom = " sChangeFrom " sChangeTo = " sChangeTo
51410>>>>>            End
51410>>>>>>
51410>>>>>        End
51410>>>>>>
51410>>>>>
51410>>>>>        While (not(SeqEof))
51414>>>>>            Readln channel iCh sRow
51416>>>>>            If (Uppercase(sRow) contains Uppercase(sChangeFrom)) Begin
51418>>>>>                // Change the whole line to the new connection id:
51418>>>>>                Move sChangeTo to sRow 
51419>>>>>                Move True to bFileChange
51420>>>>>            End
51420>>>>>>
51420>>>>>            Move sRow to sFileArray[iRow]
51421>>>>>            Increment iRow
51422>>>>>        Loop
51423>>>>>>
51423>>>>>        Send Seq_Close_Channel iCh
51424>>>>>
51424>>>>>//        Sleep 1 // Wait for Windows to close the file
51424>>>>>
51424>>>>>        Get Seq_Open_Output_Channel sFileName to iCh
51425>>>>>        If (iCh < 1) Begin
51427>>>>>            Function_Return False
51428>>>>>        End
51428>>>>>>
51428>>>>>        Move (SizeOfArray(sFileArray)) to iItems
51429>>>>>        Decrement iItems
51430>>>>>
51430>>>>>        for iCount from 0 to iItems
51436>>>>>>
51436>>>>>            Move sFileArray[iCount] to sValue
51437>>>>>            Writeln channel iCh sValue
51440>>>>>        Loop
51441>>>>>>
51441>>>>>        Send Seq_Close_Channel iCh
51442>>>>>
51442>>>>>        Function_Return bFileChange
51443>>>>>    End_Function
51444>>>>>
51444>>>>>    // This message creates an error log in the "Home" folder named "SQLErrorLog.txt",
51444>>>>>    // and opens it in "notepad.exe".
51444>>>>>    // Note: This is _not_ used by the cDbUpdateHandler & cDbUpdateVersion classes!
51444>>>>>    //       Instead the cDbUpdateLogFile's WriteErrorLog & ShowErrorLog are used.
51444>>>>>    Procedure _UtilShowErrorList
51446>>>>>        tSqlErrorArray aSqlErrorArray
51446>>>>>        tSqlErrorArray aSqlErrorArray
51446>>>>>        Integer iRows iCount iCh iErrorNum
51446>>>>>        String sPath sFileName sErrorTxt sStatement
51446>>>>>
51446>>>>>        Get psHome of (phoWorkspace(ghoApplication)) to sPath
51447>>>>>        Get vFolderFormat sPath to sPath
51448>>>>>        Move "SQLErrorLog.txt"  to sFileName
51449>>>>>        Get Seq_Open_Output_Channel (sPath + sFileName) to iCh
51450>>>>>            Get paSqlErrorArray to aSqlErrorArray
51451>>>>>            Move (SizeOfArray(aSqlErrorArray.sSqlErrorArray)) to iRows
51452>>>>>            If (iRows > 0) Begin
51454>>>>>                Decrement iRows
51455>>>>>                for iCount from 0 to iRows
51461>>>>>>
51461>>>>>                    Move aSqlErrorArray.sSqlErrorArray[iCount]      to sErrorTxt
51462>>>>>                    Move aSqlErrorArray.sSqlStatementArray[iCount]  to sStatement
51463>>>>>                    Move aSqlErrorArray.iSqlErrorArray[iCount]      to iErrorNum
51464>>>>>                    Writeln channel iCh "Error No: " iErrorNum " Error Text: " sErrorTxt
51470>>>>>                    Writeln channel iCh "SQL Statement: " sStatement
51474>>>>>                Loop
51475>>>>>>
51475>>>>>            End
51475>>>>>>
51475>>>>>        Send Seq_Close_Channel iCh
51476>>>>>
51476>>>>>        If (iRows > 0) Begin
51478>>>>>            Runprogram Shell Background (sPath + sFileName)
51479>>>>>        End
51479>>>>>>
51479>>>>>    End_Procedure
51480>>>>>
51480>>>>>    // For this to be returning a True value, the table number needs to be in the Filelist.cfg,
51480>>>>>    // and the table needs to exist as an SQL table.
51480>>>>>    Function _UtilTableIsSql Handle hTable Returns Boolean
51482>>>>>        String sRootName sDriverID
51482>>>>>        Boolean bIsSQL
51482>>>>>
51482>>>>>        Move False to bIsSQL
51483>>>>>        If (hTable > 0) Begin
51485>>>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
51488>>>>>            Get _UtilTableIsSqlByRootName sRootName to bIsSQL
51489>>>>>            If (bIsSQL = True) Begin
51491>>>>>                Get psDriverID to sDriverID
51492>>>>>                Get _TableNameOnly sRootName to sRootName
51493>>>>>                Get _SqlUtilCheckIfTableNameExists sRootName sDriverID to bIsSQL
51494>>>>>            End
51494>>>>>>
51494>>>>>        End
51494>>>>>>
51494>>>>>
51494>>>>>        Function_Return bIsSQL
51495>>>>>    End_Function
51496>>>>>
51496>>>>>    // Note: This version uses the pasSQLDataTables array(!)
51496>>>>>    //       Thus that property needs to have been initialized before
51496>>>>>    //       calling this function.
51496>>>>>    Function _UtilTableIsSql_Ex Handle hTable Returns Boolean
51498>>>>>        String sRootName sDriverID
51498>>>>>        Boolean bIsSQL
51498>>>>>
51498>>>>>        Move False to bIsSQL
51499>>>>>        If (hTable > 0) Begin
51501>>>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
51504>>>>>            Get _UtilTableIsSqlByRootName sRootName to bIsSQL
51505>>>>>            If (bIsSQL = True) Begin
51507>>>>>                Get psDriverID to sDriverID
51508>>>>>                Get _TableNameOnly sRootName to sRootName
51509>>>>>                Get _SqlUtilCheckIfTableNameExists_Ex sRootName sDriverID to bIsSQL
51510>>>>>            End
51510>>>>>>
51510>>>>>        End
51510>>>>>>
51510>>>>>
51510>>>>>        Function_Return bIsSQL
51511>>>>>    End_Function
51512>>>>>
51512>>>>>    Function _UtilTableIsSqlByRootName String sRootName Returns Boolean
51514>>>>>        Boolean bIsSQL
51514>>>>>        Move (sRootName contains ":") to bIsSQL
51515>>>>>        Function_Return bIsSQL
51516>>>>>    End_Function
51517>>>>>
51517>>>>>    // Checks if a table exists as an SQL table. Returns = True if it does.
51517>>>>>    Function _SqlUtilCheckIfTableNameExists String sTableName String sDriverID Returns Boolean
51519>>>>>        String sDatabase sSchema sVal
51519>>>>>        Boolean bExists
51519>>>>>        String[] asTablesArray
51520>>>>>        Integer iItem
51520>>>>>
51520>>>>>        Move False to bExists
51521>>>>>        Get psDatabase to sDatabase
51522>>>>>        Get psSchema   to sSchema
51523>>>>>        If (sDriverID = DATAFLEX_ID or sDatabase = "") Begin
51525>>>>>            Error DFERR_PROGRAM ("Function _SqlUtilCheckIfTableNameExists: psDatabase =" * String(sDatabase) * "psDriver =" * String(sDriverID))
51526>>>>>>
51526>>>>>            Function_Return False
51527>>>>>        End
51527>>>>>>
51527>>>>>        Get _SqlUtilEnumerateTables sDriverID sDatabase sSchema to asTablesArray
51528>>>>>        Move (SearchArray(sTableName, asTablesArray, Desktop, (RefFunc(DFSTRICMP)))) to iItem
51529>>>>>        If (iItem <> -1) Begin
51531>>>>>            Move True to bExists
51532>>>>>        End
51532>>>>>>
51532>>>>>        Function_Return bExists
51533>>>>>    End_Function
51534>>>>>
51534>>>>>    // Checks if a table exists as an SQL table. Returns = True if it does.
51534>>>>>    // This alternative is much faster as it first enumerates all SQL tables
51534>>>>>    Function _SqlUtilCheckIfTableNameExists_Ex String sTableName String sDriverID Returns Boolean
51536>>>>>        String sDatabase sSchema sVal
51536>>>>>        Boolean bExists
51536>>>>>        String[] asTablesArray
51537>>>>>        Integer iItem
51537>>>>>
51537>>>>>        Move False to bExists
51538>>>>>        Get psDatabase to sDatabase
51539>>>>>        Get psSchema   to sSchema
51540>>>>>        If (sDriverID = DATAFLEX_ID or sDatabase = "") Begin
51542>>>>>            Error DFERR_PROGRAM ("Function _SqlUtilCheckIfTableNameExists: psDatabase =" * String(sDatabase) * "psDriver =" * String(sDriverID))
51543>>>>>>
51543>>>>>            Function_Return False
51544>>>>>        End
51544>>>>>>
51544>>>>>        Get pasSQLDataTables to asTablesArray
51545>>>>>        Move (SearchArray(sTableName, asTablesArray, Desktop, (RefFunc(DFSTRICMP)))) to iItem
51546>>>>>        If (iItem <> -1) Begin
51548>>>>>            Move True to bExists
51549>>>>>        End
51549>>>>>>
51549>>>>>        Function_Return bExists
51550>>>>>    End_Function
51551>>>>>
51551>>>>>    // Checks that the passed hTable number both exists in Filelist.cfg and
51551>>>>>    // that the embedded .dat file exists on disk.
51551>>>>>    Function _UtilTableIsEmbedded Handle hTable Returns Boolean
51553>>>>>        Boolean bExists bIsEmbedded
51553>>>>>        String sDataPath sRootName
51553>>>>>
51553>>>>>        Get _UtilTableNumberIsInUse hTable to bExists
51554>>>>>        If (bExists = False) Begin
51556>>>>>            Function_Return False
51557>>>>>        End
51557>>>>>>
51557>>>>>
51557>>>>>        Move False to bIsEmbedded
51558>>>>>        If (hTable > 0) Begin
51560>>>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
51563>>>>>            Move (not(sRootName contains ":")) to bIsEmbedded
51564>>>>>        End
51564>>>>>>
51564>>>>>        If (bIsEmbedded = True) Begin
51566>>>>>            Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
51567>>>>>            Get vFolderFormat sDataPath to sDataPath
51568>>>>>            Get vFilePathExists (sDataPath + sRootName + ".dat") to bIsEmbedded
51569>>>>>        End
51569>>>>>>
51569>>>>>
51569>>>>>        Function_Return bIsEmbedded
51570>>>>>    End_Function
51571>>>>>
51571>>>>>    // Returns the DateTime of the passed file name was modified, with seconds (only) precision.
51571>>>>>    Function FileModTime String sFileName Returns DateTime
51573>>>>>        Date dDate
51573>>>>>        Integer iYY iHH iMM iSS
51573>>>>>        Boolean bExists
51573>>>>>        DateTime dtFileDateTime
51573>>>>>
51573>>>>>        Move (NullDateTime()) to dtFileDateTime
51574>>>>>        Get vFilePathExists sFileName to bExists
51575>>>>>        If (bExists = True) Begin
51577>>>>>            Get_File_Mod_Time sFileName to dDate iHH iMM iSS
51581>>>>>            Move dDate            to dtFileDateTime
51582>>>>>            Move (DateGetYear       (dtFileDateTime))      to iYY
51583>>>>>            Move (DateSetYear       (dtFileDateTime, iYY)) to dtFileDateTime
51584>>>>>            Move (DateSetHour       (dtFileDateTime, iHH)) to dtFileDateTime
51585>>>>>            Move (DateSetMinute     (dtFileDateTime, iMM)) to dtFileDateTime
51586>>>>>            Move (DateSetSecond     (dtFileDateTime, iSS)) to dtFileDateTime
51587>>>>>            Move (DateSetMillisecond(dtFileDateTime, 0))   to dtFileDateTime
51588>>>>>        End
51588>>>>>>
51588>>>>>
51588>>>>>        Function_Return dtFileDateTime
51589>>>>>    End_Function
51590>>>>>
51590>>>>>    // Returns True if the file passed as sFileName1 is newer than sFileName2.
51590>>>>>    Function IsFileTimeNewer String sFileName1 String sFileName2 Returns Boolean
51592>>>>>        Boolean bExists bIsNewer
51592>>>>>        DateTime dtFileDateTime1 dtFileDateTime2
51592>>>>>
51592>>>>>        Move False to bIsNewer
51593>>>>>        Get vFilePathExists sFileName1 to bExists
51594>>>>>        If (bExists = True) Begin
51596>>>>>            Get FileModTime sFileName1  to dtFileDateTime1
51597>>>>>            Get FileModTime sFileName2  to dtFileDateTime2
51598>>>>>            Move (dtFileDateTime1 > dtFileDateTime2) to bIsNewer
51599>>>>>        End
51599>>>>>>
51599>>>>>        Function_Return bIsNewer
51600>>>>>    End_Function
51601>>>>>
51601>>>>>End_Class
51602>>>
51602>>>Register_Function pbExitIfDebuggerActive Returns Boolean
51602>>>Class cDbUpdateFunctionLibrary is a cBaseDbUpdateFuncLib
51603>>>
51603>>>    Procedure Construct_Object
51605>>>        Forward Send Construct_Object
51607>>>        Move Self to ghoDbUpdateFunctionLibrary
51608>>>    End_Procedure
51609>>>
51609>>>    Procedure End_Construct_Object
51611>>>        Forward Send End_Construct_Object
51613>>>    End_Procedure
51614>>>
51614>>>    // *** SQL Messages for making changes to the SQL back-end ***
51614>>>    //
51614>>>    // * Dummy function for the Studio's Code Explorer *
51614>>>    Function SQL_DATABASE_FUNCTIONS Returns Boolean
51616>>>        Function_Return False
51617>>>    End_Function
51618>>>
51618>>>    // Function for creating a new *Database*.
51618>>>    // Note: This is for creating SQL DATABASES - not tables!
51618>>>    // Returns True if successful.
51618>>>    // ToDo: Currently only works for MS-SQL...
51618>>>    Function SqlDatabaseCreate String sDriverID String sDatabase Boolean bUpdateConnectionString Boolean bPermanantly Returns Boolean
51620>>>        String sSQL sSQL1 sConnectionID sConnectionString
51620>>>        String sCreateDatabaseKeyWord sSelectFromWhereName sCollation sCollateKeyWord
51620>>>        Handle hConnection hStmt hoSQLManager
51620>>>        Integer iFetchResult iDbType
51620>>>        Boolean bOK bExists
51620>>>
51620>>>        Get piDbType to iDbType
51621>>>        If (iDbType <> EN_DbTypeMSSQL and iDbType <> EN_DbTypeDB2 and iDbType <> EN_DbTypeMySQL and iDbType <> EN_DbTypePostgre) Begin
51623>>>            Error DFERR_PROGRAM "Sorry, the SqlDatabaseCreate function is currently only supported for MS-SQL, MySQL & PostGre and DB2 drivers"
51624>>>>
51624>>>            Function_Return False
51625>>>        End
51625>>>>
51625>>>
51625>>>        Get SqlUtilCheckIfDatabaseExists sDatabase to bExists
51626>>>        If (bExists = True) Begin
51628>>>            Function_Return True
51629>>>        End
51629>>>>
51629>>>
51629>>>        Get phoSQLManager to hoSQLManager
51630>>>
51630>>>        Get psConnectionID     to sConnectionID
51631>>>        Get psConnectionString to sConnectionString
51632>>>        Move 0 to LastErr
51633>>>
51633>>>        If (sDriverID = ODBC_DRV_ID) Begin
51635>>>            // If an ODBC data source (DSN) we cannot pass the UID & PWD; so strip them from the connection string.
51635>>>            // ToDo: 2018-08-11 I think this is wrong and the uid & pw should be there.
51635>>>//            If (Uppercase(sConnectionString) contains CS_SQLIniDSNKeyword) Begin
51635>>>//                Move (Pos(";", sConnectionString)) to iPos
51635>>>//                If (iPos > 0) Begin
51635>>>//                    Move (Left(sConnectionString, (iPos - 1))) to sConnectionString
51635>>>//                    Move (Trim(sConnectionString)) to sConnectionString
51635>>>//                End
51635>>>//            End
51635>>>        End
51635>>>>
51635>>>
51635>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
51636>>>        Get SqlConnect of hoSQLManager sDriverID sConnectionString to hConnection
51637>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
51638>>>        If (LastErr = CLIERR_LOGIN_UNSUCCESSFUL) Begin
51640>>>            Error DFERR_PROGRAM (CS_DUF_LoginToDbServerFailed + "\n" + sConnectionString)
51641>>>>
51641>>>            Function_Return False
51642>>>        End
51642>>>>
51642>>>
51642>>>        Get SqlOpen of hConnection to hStmt
51643>>>
51643>>>        If (hStmt = 0) Begin
51645>>>            Send SqlDisconnect of hoSQLManager
51646>>>            Error DFERR_PROGRAM CS_DUF_ConnectError
51647>>>>
51647>>>            Function_Return False
51648>>>        End
51648>>>>
51648>>>
51648>>>        Get psCollation to sCollation
51649>>>
51649>>>        Case Begin
51649>>>            Case (sDriverID = MSSQLDRV_ID)
51651>>>                Get _SqlFindKeyWord CI_SQLCreateDatabase to sCreateDatabaseKeyWord
51652>>>                Get _SqlSelectFromWhereName to sSelectFromWhereName
51653>>>                Move (sSelectFromWhereName + "='" + sDatabase + "'") to sSQL
51654>>>
51654>>>                // Check if database exists
51654>>>                Send SqlExecDirect of hStmt sSQL
51655>>>                Get SqlFetch of hStmt to iFetchResult
51656>>>                Send SqlClose of hStmt
51657>>>                Send SqlDisconnect of hConnection
51658>>>                // If database already exists we're out of here!
51658>>>                // Note that we return True as this is not an error.
51658>>>                If (iFetchResult > 0) Begin
51660>>>                    Function_Return True
51661>>>                End
51661>>>>
51661>>>                // Database doesn't exist, create it.
51661>>>                If (iFetchResult = 0) Begin
51663>>>                    Move (sCreateDatabaseKeyWord + " [" + sDatabase + "]") to sSQL1
51664>>>                    Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
51665>>>                    If (sCollation <> "") Begin
51667>>>                        Get _SqlFindKeyWord CI_SQLDatabaseCollation to sCollateKeyWord
51668>>>                        Move (sSQL1 * String(sCollateKeyWord) * String(sCollation)) to sSQL1
51669>>>                    End
51669>>>>
51669>>>                    Send SqlUtilExecuteQuery sSQL1 sDriverID
51670>>>                    Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
51671>>>                    If (LastErr = CLIERR_GENERAL_ERROR) Begin
51673>>>                        Function_Return False
51674>>>                    End
51674>>>>
51674>>>                    // We need to wait a short time for Sql to finish, especially Windows to write the new file to disk.
51674>>>                    Sleep 1
51675>>>                    Send SqlUtilExecuteQuery sSQL sDriverID
51676>>>                End
51676>>>>
51676>>>                Case Break
51677>>>
51677>>>            Case (iDbType = EN_DbTypeMySQL and sDriverID = ODBC_DRV_ID)
51680>>>                // ToDo: How should this be set/checked?
51680>>>//                If (Lowercase(Left(sCollation, 3)) <> "utf") Begin
51680>>>//                    Set psCollation to "utf8"
51680>>>//                End
51680>>>                SQLIncludeScriptFile ..\Scripts\CreateMySQLDatabase.sql as CreateMySQLDatabase.sql
51680>>>                Get _SqlUtilCreateMySQLDatabaseByScript "CreateMySQLDatabase.sql" sDatabase to bOK
51681>>>                Case Break
51682>>>
51682>>>            Case Else
51682>>>                Error DFERR_PROGRAM "Unsupported database type"
51683>>>>
51683>>>        Case End
51683>>>
51683>>>        If (Err = False) Begin
51685>>>            Send LogError ("The Database:" * String(sDatabase) * "was created successfully for driver:" * String(sDriverID)) False
51686>>>        End
51686>>>>
51686>>>        // If used in e.g. the cDbUpdateHandler we want to change the login database name to
51686>>>        // the one we just created.
51686>>>        If (bUpdateConnectionString = True and Err = False) Begin
51688>>>            Set psDatabase to sDatabase
51689>>>            //...and perhaps also the SQLConnections.ini file setting.
51689>>>            If (bPermanantly = True) Begin
51691>>>                If (ghoSQLConnectionHandler <> 0) Begin
51693>>>                    Get SQLIniFileSetDefaultConnection of ghoSQLConnectionHandler sConnectionID to bOK
51694>>>                End
51694>>>>
51694>>>            End
51694>>>>
51694>>>        End
51694>>>>
51694>>>
51694>>>        If (Err = False) Begin
51696>>>            Send ResetFillSQLTables
51697>>>        End
51697>>>>
51697>>>        Function_Return (Err = False)
51698>>>    End_Function
51699>>>
51699>>>    // Backs up an SQL database to a folder of choice. If no path is passed the SQL default backup folder
51699>>>    // will be used.
51699>>>    Function SqlDatabaseBackupToDisk String sDatabase String sBackupName String sPath Boolean bShowProg Returns Boolean
51701>>>        Boolean bOK bExists bShowProgress bErr
51701>>>        String sStatement sDriverID
51701>>>        tSQLScriptArray SQLScriptArray SQLScriptArrayPercentReady
51701>>>        tSQLScriptArray SQLScriptArray SQLScriptArrayPercentReady
51701>>>        Integer iDbType
51701>>>
51701>>>        If (sDatabase = "") Begin
51703>>>            Error DFERR_PROGRAM "The database name was not passed as a parameter to the 'SqlUtilBackupDatabaseToDisk' function"
51704>>>>
51704>>>            Function_Return False
51705>>>        End
51705>>>>
51705>>>        If (sBackupName = "") Begin
51707>>>            Error DFERR_PROGRAM "The database backup name was not passed as a parameter to the 'SqlUtilBackupDatabaseToDisk' function"
51708>>>>
51708>>>            Function_Return False
51709>>>        End
51709>>>>
51709>>>
51709>>>        // Create backup-folder if it doesn't exist
51709>>>        Get vFolderExists sPath to bExists
51710>>>        If (bExists = False) Begin
51712>>>            Get vCreateDirectory sPath to bErr
51713>>>            If (bErr = True) Begin
51715>>>                Error DFERR_PROGRAM ("Could not create database backup folder:" * sPath)
51716>>>>
51716>>>                Function_Return False
51717>>>            End
51717>>>>
51717>>>        End
51717>>>>
51717>>>        // Make sure the path ends with a back-slash
51717>>>        If (sPath <> "") Begin
51719>>>            Get vFolderFormat sPath to sPath
51720>>>        End
51720>>>>
51720>>>
51720>>>        Get psDriverID to sDriverID
51721>>>        Get piDbType   to iDbType
51722>>>        If (num_arguments > 3) Begin
51724>>>            Move bShowProg to bShowProgress
51725>>>        End
51725>>>>
51725>>>
51725>>>        Case Begin
51725>>>            Case (iDbType = EN_DbTypeMSSQL)
51727>>>                SQLIncludeScriptFile ..\Scripts\BackupMSSQLDatabase.sql as BackupMSSQLDatabase.sql
51727>>>                SQLIncludeScriptFile ..\Scripts\GetPercentageBackupCompletionMSSQL.sql as GetPercentageBackupCompletionMSSQL.sql
51727>>>                Get _SqlUtilReadResource  "BackupMSSQLDatabase.sql" sDriverID False to SQLScriptArray
51728>>>                Get _SqlUtilReadResource "GetPercentageBackupCompletionMSSQL.sql" sDriverID False to SQLScriptArrayPercentReady
51729>>>
51729>>>                Move SQLScriptArray.sSQLScriptArray[0] to sStatement
51730>>>                Move (Replaces("DATABASE_NAME_XXX", sStatement, sDatabase))   to sStatement
51731>>>                Move (Replaces("BACKUP_PATH_XXX",   sStatement, sPath))       to sStatement
51732>>>                Move (Replaces("BACKUP_NAME_XXX",   sStatement, sBackupName)) to sStatement
51733>>>                Move sStatement to SQLScriptArray.sSQLScriptArray[0]
51734>>>                Get _SqlUtilExecuteEmbeddedScript SQLScriptArray sDriverID False "" bShowProgress to bOK
51735>>>                Case Break
51736>>>            Case Else
51736>>>                Send Info_Box ("The SqlUtilBackupDatabaseToDisk function is currently not implemented for the driver:" * sDriverID + ". It would be great if you could spend a couple of minutes and add a little ESQL code snippet to make it work for that driver! Thanks for helping out.")
51737>>>        Case End
51737>>>
51737>>>        Function_Return bOK
51738>>>    End_Function
51739>>>
51739>>>    Function SqlDatabaseCollationQuery String sDatabase Boolean bSilent Returns String
51741>>>        String sStatement sDriverID sRetval //sPrevious
51741>>>        tSQLScriptArray SQLScriptArray SQLScriptArrayPercentReady
51741>>>        tSQLScriptArray SQLScriptArray SQLScriptArrayPercentReady
51741>>>        Integer iDbType iRows iFetchResult //iColumn
51741>>>        Handle hoSQLHandler hoSQLConnect hstmt
51741>>>        tSQLConnection SQLConnection
51741>>>        tSQLConnection SQLConnection
51741>>>
51741>>>        If (sDatabase = "") Begin
51743>>>            Error DFERR_PROGRAM "The database name was not passed as a parameter to the 'SqlUtilDatabaseCollation' function"
51744>>>>
51744>>>            Function_Return ""
51745>>>        End
51745>>>>
51745>>>
51745>>>        Move "" to sRetval
51746>>>        Get psDriverID to sDriverID
51747>>>        Get piDbType   to iDbType
51748>>>
51748>>>        Case Begin
51748>>>            Case (iDbType = EN_DbTypeMSSQL)
51750>>>                SQLIncludeScriptFile ..\Scripts\QueryMSSQLCollation.sql as QueryMSSQLCollation.sql
51750>>>                Get _SqlUtilReadResource "QueryMSSQLCollation.sql" sDriverID False to SQLScriptArray
51751>>>
51751>>>                Move SQLScriptArray.sSQLScriptArray[0] to sStatement
51752>>>                Move (Replaces("DATABASE_NAME_XXX", sStatement, sDatabase)) to sStatement
51753>>>                Get phoSQLManager to hoSQLHandler
51754>>>
51754>>>                If (hoSQLHandler <> 0) Begin
51756>>>                    Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
51757>>>                    Get SQLConnect of hoSQLHandler SQLConnection.sDriverID SQLConnection.sConnectionString to hoSQLConnect
51758>>>
51758>>>                    If (hoSQLConnect <> 0) Begin
51760>>>                        Get SQLOpen of hoSQLConnect to hstmt
51761>>>                        If (hstmt <> 0) Begin
51763>>>                            Send SqlExecDirect of hstmt sStatement
51764>>>                            Get SqlStmtAttribute of hstmt SqlSTMTATTRIB_ROWCOUNT to iRows
51765>>>                            Get SQLFetch of hstmt to iFetchResult
51766>>>                            If (iFetchResult <> 0) Begin
51768>>>                                Get SQLColumnValue of hstmt 2 to sRetval // Column 1 = Database Name, 2 = Collation Name.
51769>>>                            End
51769>>>>
51769>>>                            Send SQLClose of hstmt
51770>>>                        End
51770>>>>
51770>>>                        Send SQLDisconnect of hoSQLConnect
51771>>>                    End
51771>>>>
51771>>>                End
51771>>>>
51771>>>                Case Break
51772>>>            Case Else
51772>>>                If (bSilent = False) Begin
51774>>>                    Send Info_Box ("The SqlDatabaseCollationQuery function is currently not implemented for this driver:" * sDriverID + ". It would be great if you could spend a couple of minutes and create a little SQL code snippet and send it to RDC Tools to make this routine work for this driver! Thanks for helping out.")
51775>>>                End
51775>>>>
51775>>>        Case End
51775>>>
51775>>>        Function_Return sRetval
51776>>>    End_Function
51777>>>
51777>>>    Function SqlDatabaseCollationChange String sDatabase String sSQLCollation Returns Boolean
51779>>>        String sDriverID sSQL sConnectionID sConnectionString sSet sWith // sSQL1 
51779>>>        String sAlterDatabaseKeyWord sCollateKeyWord sSQLCollationCheck sSingle_User sMulti_User sRollback sImmediate
51779>>>        Handle hConnection hStmt hoSQLManager
51779>>>        Integer iDbType // iFetchResult
51779>>>
51779>>>        If (sDatabase = "") Begin
51781>>>            Error DFERR_PROGRAM "The database name was not passed as a parameter to the 'SqlDatabaseCollationChange' function"
51782>>>>
51782>>>            Function_Return False
51783>>>        End
51783>>>>
51783>>>
51783>>>        If (sSQLCollation = "") Begin
51785>>>            Error DFERR_PROGRAM "The SQL Collation name was not passed as a parameter to the 'SqlDatabaseCollationChange' function"
51786>>>>
51786>>>            Function_Return False
51787>>>        End
51787>>>>
51787>>>
51787>>>        Get psDriverID to sDriverID
51788>>>        Get piDbType   to iDbType
51789>>>
51789>>>        Get phoSQLManager to hoSQLManager
51790>>>        Get psConnectionID     to sConnectionID
51791>>>        Get psConnectionString to sConnectionString
51792>>>        Move 0 to LastErr
51793>>>
51793>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
51794>>>        Get SqlConnect of hoSQLManager sDriverID sConnectionString to hConnection
51795>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
51796>>>        If (LastErr = CLIERR_LOGIN_UNSUCCESSFUL) Begin
51798>>>            Error DFERR_PROGRAM ("Login failed to the database server. The following connect string was used:\n" + sConnectionString)
51799>>>>
51799>>>            Function_Return False
51800>>>        End
51800>>>>
51800>>>
51800>>>        Get SqlOpen of hConnection to hStmt
51801>>>
51801>>>        If (hStmt = 0) Begin
51803>>>            Send SqlDisconnect of hoSQLManager
51804>>>            Error DFERR_PROGRAM CS_DUF_ConnectError
51805>>>>
51805>>>            Function_Return False
51806>>>        End
51806>>>>
51806>>>
51806>>>        // Check if collation already exists
51806>>>        Get SqlDatabaseCollationQuery sDatabase False to sSQLCollationCheck
51807>>>        // If the current collate is the same as the new; do nothing.
51807>>>        If (sSQLCollation = sSQLCollationCheck) Begin
51809>>>            Function_Return True
51810>>>        End
51810>>>>
51810>>>
51810>>>        Get _SqlFindKeyWord CI_SQLSet               to sSet
51811>>>        Get _SqlFindKeyWord CI_SQLWith              to sWith
51812>>>        Get _SqlFindKeyWord CI_SQLSingle_User       to sSingle_User
51813>>>        Get _SqlFindKeyWord CI_SQLMulti_User        to sMulti_User
51814>>>        Get _SqlFindKeyWord CI_SQLRollback          to sRollback
51815>>>        Get _SqlFindKeyWord CI_SQLIMMEDIATE         to sImmediate
51816>>>        Get _SqlFindKeyWord CI_SQLAlterDatabase     to sAlterDatabaseKeyWord
51817>>>        Get _SqlFindKeyWord CI_SQLDatabaseCollation to sCollateKeyWord
51818>>>
51818>>>        // MS-SQL Syntax:
51818>>>        // ALTER DATABASE [database] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
51818>>>        // ALTER DATABASE [database] COLLATE SQL_1xCompat_CP850_CI_AS;
51818>>>        // ALTER DATABASE [database] SET MULTI_USER;
51818>>>        Move (              sAlterDatabaseKeyWord  * String(sDatabase) * String(sSet) * String(sSingle_User) * String(sWith) * String(sRollback) * String(sImmediate)) to sSQL
51819>>>        Move (sSQL * String(sAlterDatabaseKeyWord) * String(sDatabase) * String(sCollateKeyWord) * String(sSQLCollation)) to sSQL
51820>>>        Move (sSQL * String(sAlterDatabaseKeyWord) * String(sDatabase) * String(sSet) * String(sMulti_User)) to sSQL
51821>>>//        Move (sAlterDatabaseKeyWord * String(sDatabase) * String(sCollateKeyWord) * String(sSQLCollation)) to sSQL
51821>>>
51821>>>        Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
51822>>>        Send SqlUtilExecuteQuery sSQL sDriverID False
51823>>>        Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
51824>>>        If (LastErr = CLIERR_GENERAL_ERROR) Begin
51826>>>           Function_Return False
51827>>>        End
51827>>>>
51827>>>
51827>>>        Function_Return (Err = False)
51828>>>    End_Function
51829>>>
51829>>>
51829>>>    // * Dummy function for the Studio's Code Explorer *
51829>>>    Function SQL_TABLE_FUNCTIONS Returns Boolean
51831>>>        Function_Return False
51832>>>    End_Function
51833>>>
51833>>>    // Converts from SQL to Embedded (DataFlex .dat files).
51833>>>    // To convert from SQL -> SQL (e.g. from Oracle - > MS SQL)
51833>>>    //   first use SQLTableConvertToEmbedded in one cDbUpdateVersion object,
51833>>>    //   and then use the ApiTableConvertToSQL method in a second cDbUpdateVersion object.
51833>>>    // Note: To convert an embedded table to SQL use ApiTableConvertToSQL.
51833>>>    Function SqlTableConvertToEmbedded Handle hTable Boolean bCpyDat Returns Boolean
51835>>>        Handle hToTable
51835>>>        Boolean bOK bExists bOpened bCopyData
51835>>>        String sDriverID sPhysicalName sRootName sDisplayName
51835>>>        tSQLConnection SQLConnection
51835>>>        tSQLConnection SQLConnection
51835>>>        Integer iPos iMaxRecords
51835>>>
51835>>>        Get psDriverID to sDriverID
51836>>>        Get SqlUtilCheckIfTableHandleExists hTable sDriverID to bExists
51837>>>        If (bExists = False) Begin
51839>>>            Function_Return False
51840>>>        End
51840>>>>
51840>>>
51840>>>        If (num_arguments > 1) Begin
51842>>>            Move bCpyDat to bCopyData
51843>>>        End
51843>>>>
51843>>>        Else Begin
51844>>>            Move False to bCopyData
51845>>>        End
51845>>>>
51845>>>
51845>>>        Open hTable
51847>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
51850>>>        If (bOpened = False) Begin
51852>>>            Error DFERR_PROGRAM ("Could not open table number:" * String(hTable))
51853>>>>
51853>>>            Function_Return False
51854>>>        End
51854>>>>
51854>>>        Move 0 to hToTable
51855>>>
51855>>>        Move 16711679 to iMaxRecords
51856>>>        Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
51859>>>        Move (Pos(".", sDisplayName)) to iPos
51860>>>        If (iPos > 0) Begin
51862>>>            Move (Mid(sDisplayName, 200, (iPos +1))) to sDisplayName
51863>>>        End
51863>>>>
51863>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
51866>>>        Get _TableNameOnly sRootName                 to sRootName
51867>>>        Move (sRootName + ".dat")                    to sPhysicalName
51868>>>
51868>>>        If (ghoProgressBar <> 0) Begin
51870>>>            Send DoAdvance of ghoProgressBar
51871>>>            Set TableName_Text of ghoStatusPanel to ("Converting to Embedded - Table:" * String(sRootName) * "Number:" * String(hTable))
51872>>>        End
51872>>>>
51872>>>
51872>>>        Move False to Err
51873>>>
51873>>>        Structure_Start hToTable DATAFLEX_ID
51874>>>            Structure_Copy hTable to hToTable
51875>>>
51875>>>            Set_Attribute DF_FILE_PHYSICAL_NAME of hToTable to sPhysicalName
51878>>>            Set_Attribute DF_FILE_REUSE_DELETED of hToTable to DF_FILE_DELETED_REUSE
51881>>>            Set_Attribute DF_FILE_MULTIUSER     of hToTable to DF_FILE_USER_MULTI
51884>>>            Set_Attribute DF_FILE_TRANSACTION   of hToTable to DF_FILE_TRANSACTION_CLIENT_ATOMIC
51887>>>            Set_Attribute DF_FILE_MAX_RECORDS   of hToTable to iMaxRecords
51890>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
51891>>>
51891>>>        Structure_End hToTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
51893>>>
51893>>>        Set Action_Text of ghoStatusPanel to ""
51894>>>        Move (not(Err)) to bOK
51895>>>        If (bOK = True and bCopyData = True) Begin
51897>>>            Get ApiTableCopyData hTable sPhysicalName sRootName DATAFLEX_ID to bOK
51898>>>        End
51898>>>>
51898>>>
51898>>>        // This must be after copying data...
51898>>>        If (Err = False) Begin
51900>>>            Set_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
51903>>>            Set_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
51906>>>        End
51906>>>>
51906>>>        Move (not(Err)) to bOK
51907>>>
51907>>>        Function_Return (bOK = True)
51908>>>    End_Function
51909>>>
51909>>>    // Creates an SQL Table at the SQL end by its filelist number;
51909>>>    // Also creates a 'DUMMY' column because SQL doesn't like to create a table with no columns!
51909>>>    Function SqlTableCreate Integer hTable Returns Boolean
51911>>>        String sTableName sSQLString sPath sCreateTable sDriverID
51911>>>        Integer iDbType
51911>>>        Boolean bExists
51911>>>
51911>>>        Get psDriverID to sDriverID
51912>>>        Get UtilTableHandleToString hTable to sTableName
51913>>>        Get _SqlUtilCheckIfTableNameExists sTableName sDriverID to bExists
51914>>>        If (bExists = True) Begin
51916>>>            Function_Return False
51917>>>        End
51917>>>>
51917>>>
51917>>>        Get psDataPathFirstPart to sPath
51918>>>        Get vFilePathExists (sPath + String(sTableName) + ".int") to bExists
51919>>>
51919>>>        Get piDbType to iDbType
51920>>>        Get _SqlProperTableName sTableName to sTableName
51921>>>        Get _SqlFindKeyWord CI_SQLCreateTable iDbType to sCreateTable
51922>>>        Move (sCreateTable * String(sTableName) * "(Dummy Decimal(2,0))") to sSQLString
51923>>>
51923>>>        Move False to Err
51924>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
51925>>>
51925>>>        If (Err = False) Begin
51927>>>            Send ResetFillSQLTables
51928>>>        End
51928>>>>
51928>>>        Function_Return (Err = False)
51929>>>    End_Function
51930>>>
51930>>>    // Same as SqlTableCreate but creates an SQL Table at the SQL end by a table name;
51930>>>    // Also creates a 'DUMMY' column because SQL doesn't like to create a table with no columns!
51930>>>    Function SqlTableCreateByTableName String sTableName  Returns Boolean
51932>>>        String sSQLString sPath sCreateTable sDriverID
51932>>>        Integer iDbType
51932>>>        Boolean bExists
51932>>>
51932>>>        Get psDriverID to sDriverID
51933>>>        Get _SqlUtilCheckIfTableNameExists sTableName sDriverID to bExists
51934>>>        If (bExists = True) Begin
51936>>>            Function_Return False
51937>>>        End
51937>>>>
51937>>>
51937>>>        Get psDataPathFirstPart to sPath
51938>>>        Get vFilePathExists (sPath + String(sTableName) + ".int") to bExists
51939>>>        If (bExists = True) Begin
51941>>>            // ToDo: What should we do if an .int file already exists?
51941>>>        End
51941>>>>
51941>>>
51941>>>        Get piDbType to iDbType
51942>>>        Get _SqlProperTableName sTableName to sTableName
51943>>>        Get _SqlFindKeyWord CI_SQLCreateTable iDbType to sCreateTable
51944>>>        Move (sCreateTable * String(sTableName) * "(Dummy Decimal(2,0))") to sSQLString
51945>>>
51945>>>        Move False to Err
51946>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
51947>>>
51947>>>        If (Err = False) Begin
51949>>>            Send ResetFillSQLTables
51950>>>        End
51950>>>>
51950>>>        Function_Return (Err = False)
51951>>>    End_Function
51952>>>    
51952>>>    // ToDo: 2019-09-23 This needs to be finilized 
51952>>>    // It resets SQL constraints after a Structure_End, if necessary.
51952>>>    Function SqlTableRecreateConstraints Handle hTable Returns Boolean
51954>>>        Boolean bOK                                                            
51954>>>        String sStatement
51954>>>        Move "ALTER TABLE [dbo].[THREADS] ADD  DEFAULT ((0)) FOR [SEGMENTS]" to sStatement
51955>>>        Function_Return bOK
51956>>>    End_Function
51957>>>    
51957>>>    // First deletes the data cache file and then drops the passed SQL table.
51957>>>    // Note: The table needs to exist in filelist.cfg, and it must be possible to open it,
51957>>>    //       else try using the SqlTableRemoveByTableName message.
51957>>>    Function SqlTableRemove Handle hTable Returns Boolean
51959>>>        String sSQLString sPath sDropTable sTableName sDriverID
51959>>>        Integer iRetval iDbType
51959>>>        Boolean bExists bOK
51959>>>
51959>>>        Get psDriverID to sDriverID
51960>>>        Get UtilTableHandleToString hTable to sTableName
51961>>>        Get _SqlUtilCheckIfTableNameExists sTableName sDriverID to bExists
51962>>>        If (bExists = False) Begin
51964>>>            Function_Return False
51965>>>        End
51965>>>>
51965>>>
51965>>>        Get psDataPathFirstPart to sPath
51966>>>        Get _UtilDeleteCacheFile sTableName to iRetval
51967>>>
51967>>>        Get piDbType to iDbType
51968>>>        Get _SqlProperTableName sTableName to sTableName
51969>>>        Get _SqlFindKeyWord CI_SQLDropTable iDbType to sDropTable
51970>>>        Move (sDropTable * String(sTableName)) to sSQLString
51971>>>
51971>>>        Move False to Err
51972>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
51973>>>
51973>>>        // We also need to remove the cache-file since the table has been changed
51973>>>        Get _UtilDeleteCacheFile sTableName to bOK
51974>>>
51974>>>        If (Err = False) Begin
51976>>>            Send ResetFillSQLTables
51977>>>        End
51977>>>>
51977>>>        Function_Return (Err = False)
51978>>>    End_Function
51979>>>
51979>>>    // First deletes the data cache file and then drops the passed data table.
51979>>>    Function SqlTableRemoveByTableName String sTableName Returns Boolean
51981>>>        String sSQLString sPath sDropTable sVal sSchema sDriverID
51981>>>        Integer iRetval iDbType
51981>>>        Boolean bOK
51981>>>
51981>>>        Get psDriverID to sDriverID
51982>>>        Get psDataPathFirstPart to sPath
51983>>>        Get _UtilDeleteCacheFile sTableName to iRetval
51984>>>
51984>>>        Get piDbType to iDbType
51985>>>        Get _SqlFindKeyWord CI_SQLDropTable iDbType to sDropTable
51986>>>        Get psSchema to sSchema
51987>>>        If (sSchema = "") Begin
51989>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
51990>>>        End
51990>>>>
51990>>>        Move (Uppercase(sTableName)) to sVal
51991>>>        If (not(sVal contains (sSchema + "."))) Begin
51993>>>            Move (Lowercase(sSchema) + "." + sTableName) to sTableName
51994>>>        End
51994>>>>
51994>>>        Move (sDropTable * String(sTableName)) to sSQLString
51995>>>
51995>>>        Move False to Err
51996>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
51997>>>
51997>>>        // We also need to remove the cache-file since the table has been changed
51997>>>        Get _UtilDeleteCacheFile sTableName to bOK
51998>>>
51998>>>        Function_Return (Err = False)
51999>>>    End_Function
52000>>>
52000>>>    // *** Sql View Messages ***
52000>>>
52000>>>    // First deletes the data cache file and then drops the passed Sql data view.
52000>>>    Function SqlViewRemove String sDataView Returns Boolean
52002>>>        String sDriverID sSQLString sDropViewKeyWord
52002>>>        Integer iRetval
52002>>>        Boolean bOK
52002>>>
52002>>>        Get psDriverID to sDriverID
52003>>>        Get _UtilDeleteCacheFile sDataView to iRetval
52004>>>
52004>>>        Get _SqlFindKeyWord CI_SQLDropView to sDropViewKeyWord
52005>>>        Move (sDropViewKeyWord * String(sDataView)) to sSQLString
52006>>>        Set psSQLStatementString to sSQLString
52007>>>
52007>>>        // As we don't check if the view exist or not, it might happen
52007>>>        // that it doesn't and that would through an error, so guard for that eventuality (just ignore it).
52007>>>        Move False to Err
52008>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
52009>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
52010>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
52011>>>        Move 0 to LastErr
52012>>>
52012>>>        // We also need to remove the cache-file since the table has been changed
52012>>>        Get _UtilDeleteCacheFile sDataView to bOK
52013>>>
52013>>>        Function_Return (Err = False)
52014>>>    End_Function
52015>>>
52015>>>    Function SqlTableRename Handle hTable String sCurrentTableName String sNewtTableName Returns Boolean
52017>>>        Boolean bOK
52017>>>        Integer iDbType
52017>>>        String sDriverID sAlterTable sRenameTable sSQLTo sSQLString
52017>>>
52017>>>        Get psDriverID to sDriverID
52018>>>        Get piDbType   to iDbType
52019>>>
52019>>>        Case Begin
52019>>>            Case (iDbType = EN_DbTypeDB2)
52021>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
52022>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
52023>>>                Move (sRenameTable * sCurrentTableName * sSQLTo * String(sNewtTableName)) to sSQLString
52024>>>            Break
52025>>>
52025>>>            Case (iDbType = EN_DbTypeMSSQL)
52028>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
52029>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
52030>>>                Move (sRenameTable * "'" - sCurrentTableName - "', '" - String(sNewtTableName) - "'") to sSQLString
52031>>>            Break
52032>>>
52032>>>            Case (iDbType = EN_DbTypeOracle)
52035>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
52036>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
52037>>>                Move (sRenameTable * sCurrentTableName * sSQLTo * String(sNewtTableName)) to sSQLString
52038>>>            Break
52039>>>
52039>>>            Case (iDbType = EN_DbTypePostgre)
52042>>>                Get _SqlFindKeyWord CI_SQLAlterTable  to sAlterTable
52043>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
52044>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
52045>>>                Move (sAlterTable * sCurrentTableName * sRenameTable * sSQLTo * String(sNewtTableName)) to sSQLString
52046>>>            Break
52047>>>
52047>>>            Case (iDbType = EN_DbTypeMySQL)
52050>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
52051>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
52052>>>                Move (Replaces("-", sNewtTableName, "_")) to sNewtTableName
52053>>>                Move (sRenameTable * sCurrentTableName * sSQLTo * String(sNewtTableName)) to sSQLString
52054>>>            Break
52055>>>        Case End
52055>>>
52055>>>        Move False to Err
52056>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
52057>>>        Move (Err = False) to bOK
52058>>>
52058>>>        Function_Return bOK
52059>>>    End_Function
52060>>>
52060>>>    // * Dummy function for the Studio's Code Explorer *
52060>>>    Function SQL_COLUMN_FUNCTIONS Returns Boolean
52062>>>        Function_Return False
52063>>>    End_Function
52064>>>
52064>>>    // Sample: Get SqlColumnAdd MyTable.File_Number "NewColumnName" True "InitValue" DF_ASCII_DUF 35
52064>>>    Function SqlColumnAdd Integer hTable String sColumnName Integer iDataType Integer iLen Integer iDec Boolean bInitVal String sColVal Returns Boolean
52066>>>        Integer iLength iDecimals
52066>>>        String sColumnValue
52066>>>        String sTableName sDriverID
52066>>>        Boolean bOK bInitializeValue
52066>>>
52066>>>        Get psDriverID to sDriverID
52067>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52068>>>        If (bOK = False) Begin
52070>>>            Function_Return False
52071>>>        End
52071>>>>
52071>>>
52071>>>        Get UtilTableHandleToString hTable to sTableName
52072>>>        If (sTableName = "") Begin
52074>>>            Function_Return False
52075>>>        End
52075>>>>
52075>>>
52075>>>        If (num_arguments > 3) Begin
52077>>>            Move iLen     to iLength
52078>>>            Move iDec     to iDecimals
52079>>>            Move bInitVal to bInitializeValue
52080>>>            Move sColVal  to sColumnValue
52081>>>        End
52081>>>>
52081>>>
52081>>>        Get SqlColumnAddByTableName sTableName sColumnName iDataType iLen iDecimals bInitializeValue sColumnValue to bOK
52082>>>
52082>>>        Function_Return (bOK = True)
52083>>>    End_Function
52084>>>
52084>>>    // Sample: Get SqlColumnAddByTableName "MyTable" "NewColumnName" DF_ASCII_DUF 35 0 True "InitValue"
52084>>>    Function SqlColumnAddByTableName String sTableName String sColumnName Integer iDataType Integer iLen Integer iDec Boolean bInitVal String sColVal Returns Boolean
52086>>>        Integer iDbType iLength iDecimals iDriver
52086>>>        String sStmt sAlterTable sAddColumn sVal sDataType sLengthAndDecimals sColumnValue
52086>>>        String sDriverID sNotNull
52086>>>        Boolean bOK bInitializeValue bRetval bFixed bDriverIgnoreErrorState
52086>>>        Handle hTable
52086>>>
52086>>>        Get psDriverID to sDriverID
52087>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52088>>>        If (bOK = False) Begin
52090>>>            Function_Return True
52091>>>        End
52091>>>>
52091>>>
52091>>>        Get UtilTableNameToHandle sTableName to hTable
52092>>>        If (hTable = 0) Begin
52094>>>            Get NextFreeFilelistSlot to hTable
52095>>>        End
52095>>>>
52095>>>
52095>>>        Get piDbType to iDbType
52096>>>        // If a field/column already exists; we just ignore the request to not add unneccesary errors to the log.
52096>>>        Get _SqlFindColumnName sTableName sColumnName to sVal
52097>>>        If (Uppercase(sVal) = Uppercase(sColumnName)) Begin
52099>>>            Function_Return True
52100>>>        End
52100>>>>
52100>>>
52100>>>        Get DriverIndex sDriverID to iDriver
52101>>>        Get_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
52104>>>        Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to True
52107>>>
52107>>>        Get UtilColumnTypeToString sDriverID iDbType iDataType to sDataType
52108>>>        If (num_arguments > 3) Begin
52110>>>            Move iLen     to iLength
52111>>>            Move iDec     to iDecimals
52112>>>            Move bInitVal to bInitializeValue
52113>>>            Move sColVal  to sColumnValue
52114>>>        End
52114>>>>
52114>>>
52114>>>        Get _SqlProperTableName sTableName   to sTableName
52115>>>        Get _SqlFindKeyWord CI_SQLAlterTable to sAlterTable
52116>>>        Get _SqlFindKeyWord CI_SQLAdd        to sAddColumn
52117>>>        Get SQLUtilDefaultNullValue sDriverID iDbType iDataType to sNotNull
52118>>>
52118>>>        Get UtilColumnTypeFixed sDriverID iDbType iDataType to bFixed
52119>>>        If (bFixed = False) Begin
52121>>>            Get _SqlFormatLengthAndDecimalAsString iLength iDecimals to sLengthAndDecimals
52122>>>        End
52122>>>>
52122>>>        Move (sAlterTable * sTableName * sAddColumn * sColumnName * sDataType + sLengthAndDecimals * sNotNull) to sStmt
52123>>>
52123>>>        Move False to Err
52124>>>        Send SqlUtilExecuteQuery sStmt sDriverID
52125>>>
52125>>>        If (bInitializeValue = True and Err = False) Begin
52127>>>            Get SQLColumnUpdateValue hTable sColumnName sColumnValue to bRetval
52128>>>        End
52128>>>>
52128>>>
52128>>>        If (Err = False) Begin
52130>>>            Get SqlUtilAdjustAuxFiles hTable sTableName sColumnName to bOK
52131>>>        End
52131>>>>
52131>>>
52131>>>        Move (not(Err)) to bRetval
52132>>>
52132>>>        // We also need to remove the cache-file since the table has been changed
52132>>>        Get _UtilDeleteCacheFile sTableName to bOK
52133>>>        Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
52136>>>
52136>>>        Function_Return bRetval
52137>>>    End_Function
52138>>>
52138>>>    // To update all current rows for a table column with a common value.
52138>>>    Function SqlColumnUpdateValue Handle hTable String sColumnName String sColumnValue Returns Boolean
52140>>>        String sDriverID sTableName sUpdate sSet sNoCountOn sSqlSafe_Updates sStmt
52140>>>        Boolean bRetval bSQLDriver
52140>>>        Integer iCurrErr iDbType
52140>>>
52140>>>        Move False to bRetval
52141>>>        Get piDbType to iDbType
52142>>>        Get psDriverID to sDriverID
52143>>>        Get IsSQLDriver sDriverID to bSQLDriver
52144>>>        If (bSQLDriver = False) Begin
52146>>>            Function_Return bRetval
52147>>>        End
52147>>>>
52147>>>        Get UtilTableHandleToString hTable to sTableName
52148>>>
52148>>>        Move Err to iCurrErr
52149>>>        Move False to Err
52150>>>        Get _SqlFindKeyWord CI_SQLUpdate       to sUpdate
52151>>>        Get _SqlFindKeyWord CI_SQLSet          to sSet
52152>>>        Get _SqlFindKeyWord CI_SQLSetNoCountOn to sNoCountOn
52153>>>        // If MySQL and DAW's ODBC driver is used we need to do it slightly different.
52153>>>        If (iDbType = EN_DbTypeMySQL) Begin
52155>>>            Get _SqlFindKeyWord CI_SQL_SAFE_UPDATES to sSqlSafe_Updates
52156>>>            Move (sSet * sSqlSafe_Updates + "=0;" * sUpdate * sTableName * sSet * sColumnName + "='" + sColumnValue + "'") to sStmt
52157>>>        End
52157>>>>
52157>>>        Else Begin
52158>>>            Move (sNoCountOn * sUpdate * sTableName * sSet * sColumnName + "='" + sColumnValue + "'") to sStmt
52159>>>        End
52159>>>>
52159>>>
52159>>>        Send SqlUtilExecuteQuery sStmt sDriverID
52160>>>        Move (Err = False) to bRetval
52161>>>        Move iCurrErr to Err
52162>>>
52162>>>        Function_Return bRetval
52163>>>    End_Function
52164>>>
52164>>>    // The fourth & fifth arguments are optional, depending on the iDataType
52164>>>    // passed. For e.g. a DF_ASCII the iLen must be passed.                     // Optional: // Optional:
52164>>>    Function SqlColumnChange Handle hTable String sColumnName Integer iDataType Integer iLen Integer iDec Returns Boolean
52166>>>        String sDriverID sTableName
52166>>>        Boolean bOK
52166>>>
52166>>>        Get psDriverID to sDriverID
52167>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52168>>>        If (bOK = False) Begin
52170>>>            Function_Return False
52171>>>        End
52171>>>>
52171>>>
52171>>>        Get UtilTableHandleToString hTable to sTableName
52172>>>        Get SqlColumnChangeByTableName sTableName sColumnName iDataType iLen iDec to bOK
52173>>>
52173>>>        Function_Return (Err = False)
52174>>>    End_Function
52175>>>
52175>>>    // Same as SqlColumnChange but instead of passing a filelist number; pass the table name as a string.
52175>>>    // The fourth & fifth arguments are optional, depending on the iDataType
52175>>>    // passed. For e.g. a DF_ASCII the iLen must be passed.                     // Optional: // Optional:
52175>>>    Function SqlColumnChangeByTableName String sTableName String sColumnName Integer iDataType Integer iLen Integer iDec Returns Boolean
52177>>>        Integer iDbType iLength iDecimals
52177>>>        String sDriverID sStmt sAlterTable sAlterColumn sDataType sLengthAndDecimals sNotNull
52177>>>        Boolean bExists bOK bFixed
52177>>>        Handle hTable
52177>>>
52177>>>        Get psDriverID to sDriverID
52178>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52179>>>        If (bOK = False) Begin
52181>>>            Function_Return False
52182>>>        End
52182>>>>
52182>>>
52182>>>        Get UtilTableNameToHandle sTableName to hTable
52183>>>        If (hTable = 0) Begin
52185>>>            Get NextFreeFilelistSlot to hTable
52186>>>        End
52186>>>>
52186>>>        Get SQLUtilColumnExists sTableName sColumnName to bExists
52187>>>        If (bExists = False) Begin
52189>>>            Function_Return False
52190>>>        End
52190>>>>
52190>>>
52190>>>        If (num_arguments > 3) Begin
52192>>>            Move iLen to iLength
52193>>>        End
52193>>>>
52193>>>        If (num_arguments > 4) Begin
52195>>>            Move iDec to iDecimals
52196>>>        End
52196>>>>
52196>>>
52196>>>        Get piDbType to iDbType
52197>>>        Get UtilColumnTypeToString sDriverID iDbType iDataType to sDataType
52198>>>
52198>>>        Move False to Err
52199>>>        Get _SqlProperTableName sTableName    to sTableName
52200>>>        Get _SqlFindKeyWord CI_SQLAlterTable  to sAlterTable
52201>>>        Get _SqlFindKeyWord CI_SQLAlterColumn to sAlterColumn
52202>>>        Get SQLUtilDefaultNullValue sDriverID iDbType iDataType to sNotNull
52203>>>
52203>>>        Get UtilColumnTypeFixed sDriverID iDbType iDataType to bFixed
52204>>>        If (bFixed = False) Begin
52206>>>            Get _SqlFormatLengthAndDecimalAsString iLength iDecimals to sLengthAndDecimals
52207>>>        End
52207>>>>
52207>>>
52207>>>        Move (sAlterTable * sTableName * sAlterColumn * sColumnName * sDataType + sLengthAndDecimals * sNotNull) to sStmt
52208>>>        Send SqlUtilExecuteQuery sStmt sDriverID
52209>>>
52209>>>        // We also need to remove the cache-file since the table has been changed
52209>>>        Get _UtilDeleteCacheFile sTableName to bOK
52210>>>
52210>>>        Function_Return (Err = False)
52211>>>    End_Function
52212>>>
52212>>>    Function SqlColumnDefaultValue Handle hTable Integer iColumn String sValue Returns Boolean
52214>>>        Boolean bOK bErr bIsSQLDriver
52214>>>        String sDriverID
52214>>>        Integer iDataType
52214>>>
52214>>>        Get psDriverID to sDriverID
52215>>>        Get IsSQLDriver sDriverID to bIsSQLDriver
52216>>>        If (bIsSQLDriver = False) Begin
52218>>>            Function_Return False
52219>>>        End
52219>>>>
52219>>>
52219>>>        Move Err to bErr
52220>>>        Move False to bErr
52221>>>
52221>>>        // There seems to be a problem with the ODBC_DRV driver that sometimes
52221>>>        // inserts randomly character(10) and spaces, so we correct from that here:
52221>>>        Move (Replaces(Character(10), Trim(sValue), "")) to sValue
52222>>>        Get_Attribute DF_FIELD_TYPE of hTable iColumn to iDataType
52225>>>        If (iDataType = DF_BCD and Left(sValue, 1 <> "[")) Begin
52227>>>            Move ("[" + String(sValue) + "]") to sValue
52228>>>        End
52228>>>>
52228>>>
52228>>>        Set_Attribute DF_FIELD_DEFAULT_VALUE of hTable iColumn to sValue
52231>>>        Move (not(Err)) to bOK
52232>>>        Move bErr to Err
52233>>>
52233>>>        Function_Return bOK
52234>>>    End_Function
52235>>>
52235>>>    Function SqlColumnNullable Handle hTable Integer iColumn Boolean bNullable Returns Boolean
52237>>>        Boolean bOK bErr bCurrentState bOpen bIsSQLDriver
52237>>>        String sDriverID
52237>>>
52237>>>        Get psDriverID to sDriverID
52238>>>        Get IsSQLDriver sDriverID to bIsSQLDriver
52239>>>        If (bIsSQLDriver = False) Begin
52241>>>            Function_Return False
52242>>>        End
52242>>>>
52242>>>
52242>>>        Move Err to bErr
52243>>>        Move False to bErr
52244>>>        Get_Attribute DF_FIELD_NULL_ALLOWED of hTable iColumn to bCurrentState
52247>>>        If (bNullable = bCurrentState) Begin
52249>>>            Function_Return True
52250>>>        End
52250>>>>
52250>>>
52250>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
52253>>>        If (bOpen = False) Begin
52255>>>            Get AutoConnectionIDLogin to bOK
52256>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
52257>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_INTERMEDIATE_FILE
52258>>>            Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
52259>>>            Open hTable
52261>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
52262>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_INTERMEDIATE_FILE
52263>>>            Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
52264>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
52267>>>        End
52267>>>>
52267>>>        If (bOpen = True) Begin
52269>>>            Structure_Start hTable sDriverID
52270>>>                Set_Attribute DF_FIELD_NULL_ALLOWED of hTable iColumn to bNullable
52273>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
52274>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
52276>>>            Set Action_Text of ghoStatusPanel to ""
52277>>>        End
52277>>>>
52277>>>
52277>>>        Move (not(Err)) to bOK
52278>>>        Move bErr to Err
52279>>>
52279>>>        Function_Return bOK
52280>>>    End_Function
52281>>>
52281>>>    // Drop column by its table handle
52281>>>    Function SqlColumnRemove Handle hTable String sColumnName Returns Boolean
52283>>>        String sDriverID sTableName
52283>>>        Boolean bOK
52283>>>
52283>>>        Get psDriverID to sDriverID
52284>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52285>>>        If (bOK = False) Begin
52287>>>            Function_Return False
52288>>>        End
52288>>>>
52288>>>
52288>>>        Get UtilTableHandleToString hTable to sTableName
52289>>>        If (sTableName = "") Begin
52291>>>            Function_Return False
52292>>>        End
52292>>>>
52292>>>
52292>>>        Get SqlColumnRemoveByTableName sTableName sColumnName to bOK
52293>>>
52293>>>        Function_Return (bOK = True)
52294>>>    End_Function
52295>>>
52295>>>    // Drop column by its table name as a string.
52295>>>    Function SqlColumnRemoveByTableName String sTableName String sColumnName Returns Boolean
52297>>>        Integer iDbType iDriver
52297>>>        String sDriverID sStmt sAlterTable sDropColumn
52297>>>        Boolean bExists bOK bRetval bDriverIgnoreErrorState
52297>>>        Handle hTable
52297>>>
52297>>>        Get psDriverID to sDriverID
52298>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52299>>>        If (bOK = False) Begin
52301>>>            Function_Return False
52302>>>        End
52302>>>>
52302>>>
52302>>>        Get DriverIndex sDriverID to iDriver
52303>>>        Get_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
52306>>>        Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to True
52309>>>
52309>>>        Get UtilTableNameToHandle sTableName to hTable
52310>>>        If (hTable <> 0) Begin
52312>>>            Get SQLUtilColumnExists sTableName sColumnName to bExists
52313>>>            If (bExists = False) Begin
52315>>>                Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
52318>>>                Function_Return False
52319>>>            End
52319>>>>
52319>>>        End
52319>>>>
52319>>>
52319>>>        Get piDbType to iDbType
52320>>>        If (iDbType = EN_DbTypeMSSQL) Begin
52322>>>            Get _SqlUtilRemoveTableColumnMSSQL sTableName sColumnName to bOK
52323>>>            Get _UtilDeleteCacheFile sTableName to bOK
52324>>>            Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
52327>>>            Function_Return bOK
52328>>>        End
52328>>>>
52328>>>
52328>>>        Move False to Err
52329>>>        Get _SqlProperTableName sTableName    to sTableName
52330>>>        Get _SqlFindKeyWord CI_SQLAlterTable  to sAlterTable
52331>>>        Get _SqlFindKeyWord CI_SQLDropColumn  to sDropColumn
52332>>>
52332>>>        Move (sAlterTable * sTableName * sDropColumn * sColumnName) to sStmt
52333>>>        Send SqlUtilExecuteQuery sStmt sDriverID
52334>>>        Move (not(Err)) to bRetval
52335>>>
52335>>>        // We also need to remove the cache-file since the table has been changed
52335>>>        Get _UtilDeleteCacheFile sTableName to bOK
52336>>>        Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
52339>>>
52339>>>        Function_Return bRetval
52340>>>    End_Function
52341>>>
52341>>>    // Rename a field/column by table handle (filelist number)
52341>>>    Function SqlColumnRename Integer hTable String sColumnName String sNewColumnName Returns Boolean
52343>>>        String sDriverID sTableName
52343>>>        Boolean bOK
52343>>>
52343>>>        Get psDriverID to sDriverID
52344>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52345>>>        If (bOK = False) Begin
52347>>>            Function_Return False
52348>>>        End
52348>>>>
52348>>>
52348>>>        Get UtilTableHandleToString hTable to sTableName
52349>>>        Get SqlColumnRenameByTableName sTableName sColumnName sNewColumnName to bOK
52350>>>
52350>>>        Function_Return (Err = False)
52351>>>    End_Function
52352>>>
52352>>>    // Rename a field/column by table name.
52352>>>    Function SqlColumnRenameByTableName String sTableName String sColumnName String sNewColumnName Returns Boolean
52354>>>        Integer iDbType iDataType
52354>>>        String sDriverID sStmt sAlterTable sRenameColumn sVal sColumnKeyWord sOrgTableName sDatabase sDataType
52354>>>        Boolean bOK bRetval
52354>>>        Handle hTable
52354>>>
52354>>>        Move sTableName to sOrgTableName
52355>>>        Get psDriverID to sDriverID
52356>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52357>>>        If (bOK = False) Begin
52359>>>            Function_Return False
52360>>>        End
52360>>>>
52360>>>
52360>>>        Get _SqlFindColumnName sTableName sColumnName to sVal
52361>>>        If (sVal = "") Begin
52363>>>            Function_Return False
52364>>>        End
52364>>>>
52364>>>
52364>>>        Get piDbType to iDbType
52365>>>        Get _SqlFindKeyWord CI_SQLColumn       to sColumnKeyWord
52366>>>        Get _SqlProperTableName sTableName     to sTableName
52367>>>        Get _SqlFindKeyWord CI_SQLAlterTable   to sAlterTable
52368>>>        Get _SqlFindKeyWord CI_SQLRenameColumn to sRenameColumn
52369>>>
52369>>>        Case Begin
52369>>>            Case (iDbType = EN_dbTypeMSSQL)
52371>>>                Move (sRenameColumn * "'" + sTableName + "." + sColumnName + "'," * "'" + sNewColumnName + "'," * "'" + sColumnKeyWord + "'") to sStmt
52372>>>                Case Break
52373>>>            // Alter table "SYS"."Customer" rename column "Comments" to "NewColumnName"
52373>>>            Case (iDbType = EN_dbTypeOracle)
52376>>>                Move (sAlterTable * '"' + sTableName + '"' * sRenameColumn * '"' + sColumnName + '"' * "TO" * '"' + sNewColumnName + '"') to sStmt
52377>>>                Case Break
52378>>>            // ALTER TABLE Schema.TableName RENAME COLUMN "deptnumb" TO "deptnum"
52378>>>            Case (iDbType = EN_dbTypeDB2)
52381>>>                Move (sAlterTable *  sTableName * sRenameColumn * '"' + sColumnName + '"' * "TO" * '"' + sNewColumnName + '"') to sStmt
52382>>>                Case Break
52383>>>            // ALTER TABLE "Customer" RENAME COLUMN "Comments" TO "NewColumnName"
52383>>>            Case (iDbType = EN_dbTypePostgre)
52386>>>                Move sOrgTableName to sTableName
52387>>>                Move (sAlterTable * '"' + sTableName + '"' * sRenameColumn * '"' + sColumnName + '"' * "TO" * '"' + sNewColumnName + '"') to sStmt
52388>>>                Case Break
52389>>>            Case (iDbType = EN_dbTypeMySQL)
52392>>>                // ALTER TABLE orderentry.customer CHANGE Comments NewColumnName text // Note: The last token is the column type!
52392>>>                Move sOrgTableName to sTableName
52393>>>                Get psDatabase to sDatabase
52394>>>                Get UtilTableNameToHandle sTableName to hTable
52395>>>                If (hTable = 0) Begin
52397>>>                    Get UtilTableOpen hTable sTableName DF_SHARE to bOK
52398>>>                    If (bOK = False) Begin
52400>>>                        Function_Return False
52401>>>                    End
52401>>>>
52401>>>                    Get NextFreeFilelistSlot to hTable
52402>>>                End
52402>>>>
52402>>>                Else Begin
52403>>>                    Open hTable
52405>>>                End
52405>>>>
52405>>>                Get SQLColumnType sDriverID hTable sTableName sColumnName to iDataType
52406>>>                Get UtilColumnTypeToString sDriverID iDbType iDataType    to sDataType
52407>>>                Move (sAlterTable * sDatabase + "." + sTableName * sRenameColumn * sColumnName * sNewColumnName * sDataType) to sStmt
52408>>>                Case Break
52409>>>            Case Else
52409>>>                Move (sAlterTable * "'" + sTableName + "'" * sRenameColumn * "'" + sTableName + "." + sColumnName + "'" * "TO" * "'" + sNewColumnName + "'") to sStmt
52410>>>        Case End
52410>>>
52410>>>        Move False to Err
52411>>>        Send SqlUtilExecuteQuery sStmt sDriverID
52412>>>        Move (Err = False) to bRetval
52413>>>        // We also need to remove the cache-file since the table has been changed
52413>>>        Get _UtilDeleteCacheFile sTableName to bOK
52414>>>
52414>>>        Function_Return bRetval
52415>>>    End_Function
52416>>>
52416>>>    Function SqlColumnType String sDriverID Handle hTable String sTableName String sColumnName Returns Integer
52418>>>        Handle hoSQLHandler hSQLConnect hStmt
52418>>>        Integer iNumCols iCount iDataType
52418>>>        String sValue
52418>>>
52418>>>        Get phoSQLManager to hoSQLHandler
52419>>>        Get SQLFileConnect of hoSQLHandler hTable to hSQLConnect
52420>>>        If (hSQLConnect <> 0) Begin
52422>>>            Get SQLOpen of hSQLConnect to hStmt
52423>>>            If (hStmt <> 0) Begin
52425>>>                Send SQLExecDirect of hStmt ("select * from" * sTableName)
52426>>>
52426>>>                Get SQLStmtAttribute of hStmt SQLSTMTATTRIB_COLUMNCOUNT to iNumCols
52427>>>                For iCount from 1 to iNumCols
52433>>>>
52433>>>                    Get SQLColAttribute of hStmt iCount SQLCOLATTRIB_LABEL to sValue
52434>>>                    If (Lowercase(sValue) = Lowercase(sColumnName)) Begin
52436>>>                        Get SQLColAttribute of hStmt iCount SQLCOLATTRIB_SQLTYPE to iDataType
52437>>>                        Move iNumCols to iCount // We're out of here
52438>>>                    End
52438>>>>
52438>>>                Loop
52439>>>>
52439>>>
52439>>>                Send SQLClose of hStmt
52440>>>            End
52440>>>>
52440>>>            Send SQLDisconnect of hSQLConnect
52441>>>        End
52441>>>>
52441>>>
52441>>>        Function_Return iDataType
52442>>>    End_Function
52443>>>
52443>>>    // * Dummy function for the Studio's Code Explorer *
52443>>>    Function SQL_EXECUTE_FUNCTIONS Returns Boolean
52445>>>        Function_Return False
52446>>>    End_Function
52447>>>
52447>>>    Procedure SqlUtilExecuteQuery String sStmt String sDriverID Boolean bShowProgr
52449>>>        String sMessage // sConnectionString
52449>>>        Handle hoSqlHandler hoSQLConnect hoStmt hoError
52449>>>        Integer i iMsgs iFetchResult iRowType iRows iErr iMessage iLastErr
52449>>>        String[] sMsg aSQLQueryMessages aSQLFetchResults
52452>>>        DateTime dtQueryExecStart dtQueryExecEnd dtFetchStart dtFetchEnd
52452>>>        TimeSpan tsQuery tsFetch
52452>>>        tSqlErrorArray aSqlErrorArray
52452>>>        tSqlErrorArray aSqlErrorArray
52452>>>        Boolean bOK bShowProgress
52452>>>        tSQLConnection SQLConnection
52452>>>        tSQLConnection SQLConnection
52452>>>
52452>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52453>>>        If (bOK = False) Begin
52455>>>            Procedure_Return
52456>>>        End
52456>>>>
52456>>>
52456>>>        If (num_arguments > 2) Begin
52458>>>            Move bShowProgr to bShowProgress
52459>>>        End
52459>>>>
52459>>>
52459>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
52460>>>        Get phoSQLManager to hoSqlHandler
52461>>>        Send SqlSetConnect of hoSqlHandler sDriverID SQLConnection.sConnectionString
52462>>>        Get SqlConnect     of hoSqlHandler "" "" to hoSQLConnect
52463>>>
52463>>>        If (hoSQLConnect <> 0) Begin
52465>>>            Get SqlOpen of hoSQLConnect to hoStmt
52466>>>            If (hoStmt <> 0) Begin
52468>>>                // record starting date/time stamp
52468>>>                Move (CurrentDateTime()) to dtQueryExecStart
52469>>>                // turn on error handling if enabled
52469>>>                If (pbHandleQueryErrors(Self)) Begin
52471>>>                    Set pbSqlError to False
52472>>>                    Set paSqlErrorArray to aSqlErrorArray
52473>>>                    Move Error_Object_Id to hoError
52474>>>                    If (ghoDbUpdateHandler <> 0) Begin
52476>>>                        Move ghoDbUpdateHandler to Error_Object_Id
52477>>>                    End
52477>>>>
52477>>>                    Else Begin
52478>>>                        Move Self to Error_Object_Id
52479>>>                    End
52479>>>>
52479>>>                End
52479>>>>
52479>>>
52479>>>                // Before we execute the statement; save it so we can display the faulty statement in the error log.
52479>>>                Set psSQLStatementString to sStmt
52480>>>                Send Cursor_Wait of Cursor_Control
52481>>>                Send SqlExecDirect of hoStmt sStmt
52482>>>                Send Cursor_Ready of Cursor_Control
52483>>>
52483>>>                If (pbHandleQueryErrors(Self)) Begin
52485>>>                    Move hoError to Error_Object_Id
52486>>>                End
52486>>>>
52486>>>
52486>>>                Move 0 to iMsgs
52487>>>                Move Err to iErr
52488>>>                Move LastErr to iLastErr
52489>>>                Get SqlStmtAttribute of hoStmt SQLSTMTATTRIB_NUMMESSAGES   to iMsgs
52490>>>                Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_ROWCOUNT      to iRows
52491>>>                Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_ROWCOUNT_TYPE to iRowType
52492>>>                Send _SqlColumnInfo hoStmt
52493>>>                Send Ignore_Error of Error_Object_Id 12289
52494>>>                Set Error_Report_Mode to DUF_ERROR_NO_REPORT
52495>>>                Repeat
52495>>>>
52495>>>                    Get SqlFetch of hoStmt to iFetchResult
52496>>>                    If (iFetchResult <> 0) Begin
52498>>>                        Get SQLColumnValue of hoStmt 1 to aSQLFetchResults[SizeOfArray(aSQLFetchResults)]
52499>>>                    End
52499>>>>
52499>>>                Until (iFetchResult = 0)
52501>>>                Send Trap_Error of Error_Object_Id 12289
52502>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
52503>>>                Move iErr to Err
52504>>>                Move iLastErr to LastErr
52505>>>                Set paSQLFetchResults to aSQLFetchResults
52506>>>
52506>>>                Set piRows    to iRows
52507>>>                Set piRowType to iRowType
52508>>>                Move (CurrentDateTime()) to dtQueryExecEnd
52509>>>                Move (CurrentDateTime()) to dtFetchStart
52510>>>
52510>>>                If (iMsgs <> 0) Begin
52512>>>                    If (ghoDbUpdateHandler > 0) Begin
52514>>>                        Get paSQLQueryMessages of ghoDbUpdateHandler to aSQLQueryMessages
52515>>>                    End
52515>>>>
52515>>>                    For i from 1 to iMsgs
52521>>>>
52521>>>                        Get SqlGetMessage of hoStmt i to sMessage
52522>>>                        Get RemoveComponentIdentifier of hoStmt sMessage to sMessage
52523>>>                        If (bShowProgress = True) Begin
52525>>>                            If (Active_State(ghoStatusPanel)) Begin
52527>>>                                Send Update_StatusPanel of ghoStatusPanel (Sformat("  SQLGetMessage iMessage %1 returned [%2]",iMessage,sMessage))
52528>>>                            End
52528>>>>
52528>>>                            Else Begin
52529>>>                                Showln (Sformat("  SQLGetMessage iMessage %1 returned [%2]",iMessage,sMessage))
52531>>>                            End
52531>>>>
52531>>>                        End
52531>>>>
52531>>>                        Move sMessage to sMsg[SizeOfArray(sMsg)]
52532>>>                        Move sMessage to aSQLQueryMessages[SizeOfArray(aSQLQueryMessages)]
52533>>>                    Loop
52534>>>>
52534>>>                    If (ghoDbUpdateHandler > 0) Begin
52536>>>                        Set paSQLQueryMessages of ghoDbUpdateHandler to aSQLQueryMessages
52537>>>                    End
52537>>>>
52537>>>                    Set paQueryMessages to sMsg
52538>>>                End
52538>>>>
52538>>>                Else Begin
52539>>>                    If (bShowProgress = True) Begin
52541>>>                        Get paSqlErrorArray to aSqlErrorArray
52542>>>                        If (SizeOfArray(aSqlErrorArray.iSqlErrorArray)) Begin
52544>>>                            Move (SizeOfArray(aSqlErrorArray.iSqlErrorArray)) to iMsgs
52545>>>                            Decrement iMsgs
52546>>>                            For i from 0 to iMsgs
52552>>>>
52552>>>                                Showln "Embedded SQL Statement: " aSqlErrorArray.sSqlStatementArray[i]
52555>>>                                Showln "SQL Error Message     : " aSqlErrorArray.sSqlErrorArray[i]
52558>>>                            Loop
52559>>>>
52559>>>                        End
52559>>>>
52559>>>                    End
52559>>>>
52559>>>                End
52559>>>>
52559>>>                Move (CurrentDateTime()) to dtFetchEnd
52560>>>            End
52560>>>>
52560>>>            Move (dtQueryExecEnd - dtQueryExecStart) to tsQuery
52561>>>            Move (dtFetchStart - dtFetchEnd) to tsFetch
52562>>>            Set ptsQueryExec to tsQuery
52563>>>            Set ptsFetchResults to tsFetch
52564>>>            Send SqlClose of hoStmt
52565>>>        End
52565>>>>
52565>>>
52565>>>        Send SqlDisconnect of hoSQLConnect
52566>>>    End_Procedure
52567>>>
52567>>>    // *** Main message for executing an SQL script that has been compiled into the program as a resource ***
52567>>>    // Use the SQLIncludeScriptFile command to include an SQL script into the program.
52567>>>    // Returns False if no error occured.
52567>>>    Function SqlUtilExecuteResource String sMemFileName String sDriverID Boolean bCreateScriptFile Boolean bShowProgr Returns Boolean
52569>>>        Boolean bOK bShowProgress
52569>>>        tSQLScriptArray SQLScriptArray
52569>>>        tSQLScriptArray SQLScriptArray
52569>>>        DateTime dtTotalQueryStart dtTotalQueryEnd
52569>>>        TimeSpan tsTotalTime
52569>>>
52569>>>        Move (CurrentDateTime()) to dtTotalQueryStart
52570>>>        Get _SqlUtilReadResource sMemFileName to SQLScriptArray
52571>>>        If (SQLScriptArray.bError = True) Begin
52573>>>            Function_Return False
52574>>>        End
52574>>>>
52574>>>
52574>>>        If (num_arguments > 3) Begin
52576>>>            Move bShowProgr to bShowProgress
52577>>>        End
52577>>>>
52577>>>
52577>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
52578>>>        Get _SqlUtilExecuteEmbeddedScript SQLScriptArray sDriverID bCreateScriptFile sMemFileName bShowProgress to bOK
52579>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
52580>>>
52580>>>        Move (CurrentDateTime()) to dtTotalQueryEnd
52581>>>        Move (dtTotalQueryEnd - dtTotalQueryStart) to tsTotalTime
52582>>>        Set ptsTotalQueryTime to tsTotalTime
52583>>>
52583>>>        Function_Return bOK
52584>>>    End_Function
52585>>>
52585>>>    // * Dummy function for the Studio's Code Explorer *
52585>>>    Function SQL_UTILITY_FUNCTIONS Returns Boolean
52587>>>        Function_Return False
52588>>>    End_Function
52589>>>
52589>>>    // Does three things with auxilirary files;
52589>>>    // 1) Deletes the cache file in the first Data folder of the psDataPath property as the table at the SQL end has been changed.
52589>>>    // 2) Adds the sColumnName to the TableName.tag file in the first Data folder of the psDataPath property
52589>>>    // 3) Creates a new TableName.fd file if the DdSrc folder is available (if this is a development environment)
52589>>>    Function SqlUtilAdjustAuxFiles Handle hTable String sTableName String sColumnName Returns Boolean
52591>>>        String sDataPath sDDSrcPath sDriverID
52591>>>        Boolean bOK bExists
52591>>>        Integer iCount iCh iPos
52591>>>
52591>>>        // If table name equals e.g. "dbo.MyTable" we need to remove the prefix.
52591>>>        If (sTableName contains ".") Begin
52593>>>            Move (Pos(".", sTableName)) to iPos
52594>>>            Move (Mid(sTableName, 999, (iPos +1))) to sTableName
52595>>>        End
52595>>>>
52595>>>
52595>>>        Get psDriverID to sDriverID
52596>>>        Get psDataPathFirstPart to sDataPath
52597>>>        Get vFolderExists sDataPath to bOK
52598>>>        If (bOK = False) Begin
52600>>>            Error DFERR_PROGRAM "Function SqlUtilAdjustAuxFiles; psDataPath not found!"
52601>>>>
52601>>>            Function_Return False
52602>>>        End
52602>>>>
52602>>>
52602>>>        // First delete the cache file:
52602>>>        Get _UtilDeleteCacheFile sTableName to bOK
52603>>>
52603>>>        Get Seq_New_Channel to iCh
52604>>>        If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
52606>>>            Function_Return False
52607>>>        End
52607>>>>
52607>>>
52607>>>        Get vFilePathExists (sDataPath + sTableName + ".tag") to bExists
52608>>>        If (bExists = False) Begin
52610>>>            Function_Return False
52611>>>        End
52611>>>>
52611>>>
52611>>>        Get _SqlUtilUpdateIntFile hTable to bOK
52612>>>        // Add the new column name to the .tag filen (if it doesn't exist):
52612>>>        Get _UtilUpdateTAGFile (sDataPath + sTableName + ".tag") sColumnName to bOK
52613>>>
52613>>>        // If in development environment; output new .fd file:
52613>>>        Get psDdSrcPath of (phoWorkspace(ghoApplication)) to sDDSrcPath
52614>>>        Get CountOfPaths of (phoWorkspace(ghoApplication)) sDDSrcPath to iCount
52615>>>        If (iCount > 1) Begin
52617>>>            Get PathAtIndex of (phoWorkspace(ghoApplication)) sDDSrcPath 1 to sDDSrcPath
52618>>>        End
52618>>>>
52618>>>        Get vFolderExists sDDSrcPath to bExists
52619>>>        If (bExists = True) Begin
52621>>>            Get vFolderFormat sDDSrcPath to sDDSrcPath
52622>>>            Move False to Err
52623>>>            Get AutoConnectionIDLogin to bOK
52624>>>            If (hTable <> 0) Begin
52626>>>                Open hTable
52628>>>            End
52628>>>>
52628>>>            Else Begin
52629>>>                Get UtilTableOpen hTable sTableName DF_SHARE to bOK
52630>>>            End
52630>>>>
52630>>>
52630>>>            Get_Attribute DF_FILE_OPENED of hTable to bOK
52633>>>            If (bOK = True) Begin
52635>>>                Output_Aux_File DF_AUX_FILE_FD for hTable to (sDDSrcPath + sTableName + ".fd")
52637>>>            End
52637>>>>
52637>>>            If (Err = True) Begin
52639>>>                Move False to bOK
52640>>>            End
52640>>>>
52640>>>        End
52640>>>>
52640>>>
52640>>>        Function_Return (bOK = True)
52641>>>    End_Function
52642>>>
52642>>>    // Message for changing .int files to use connection ID's
52642>>>    //
52642>>>    // Changes all ".int" files for the passed sDataPath to use a sConnectionID,
52642>>>    // OR changes an existing connection id to a new id.
52642>>>    // Pass the full path to the data folder and the name of the connection id (string value).
52642>>>    // Pass a True for the bShowResult parameter to show work in progress (showln's).
52642>>>    Function SqlUtilChangeIntFilesToConnectionIDs String sDataPath String sConnectionID Boolean bShowResult Returns String[] 
52644>>>        String sFileName sDriverID sDriverFile sConnectionString sPath
52644>>>        String[] sFilesData asFileChanges
52646>>>        Boolean bOK bCancel bChange
52646>>>        Integer iSize iCount
52646>>>
52646>>>        Get SqlUtilEnumerateIntFiles sDataPath to sFilesData
52647>>>        Move (SizeOfArray(sFilesData))    to iSize
52648>>>        If (iSize = 0) Begin
52650>>>            If (ghoStatusPanel <> 0) Begin
52652>>>                If (Active_State(ghoStatusPanel)) Begin
52654>>>                    Send Stop_StatusPanel of ghoStatusPanel
52655>>>                End
52655>>>>
52655>>>            End
52655>>>>
52655>>>            Send Info_Box CS_DUF_NoIntFilesFound
52656>>>            Function_Return 0
52657>>>        End
52657>>>>
52657>>>
52657>>>        Move (Trim(sConnectionID)) to sConnectionID
52658>>>        Get vFolderFormat sDataPath to sDataPath
52659>>>        Decrement iSize
52660>>>        For iCount from 0 to iSize
52666>>>>
52666>>>            Move sFilesData[iCount] to sFileName
52667>>>            If (Lowercase(sFileName) <> "mssqldrv.int" and Lowercase(sFileName) <> "db2_drv.int" and Lowercase(sFileName) <> "odbc_drv.int") Begin
52669>>>            // This makes sure that we also can change an existing connection id to something new:
52669>>>            Get _UtilChangeSourceCodeLine (sDataPath + sFileName) (CS_SERVER_NAME * CS_SERVER) (CS_SERVER_NAME * CS_DFCONNID + "=" + sConnectionID) bShowResult to bChange
52670>>>            If (bChange = True) Begin
52672>>>                Move sFileName to asFileChanges[SizeOfArray(asFileChanges)]
52673>>>            End
52673>>>>
52673>>>            If (ghoStatusPanel <> 0) Begin
52675>>>                If (Active_State(ghoStatusPanel)) Begin
52677>>>                    Get Check_StatusPanel of ghoStatusPanel to bCancel
52678>>>                    If (bCancel = True) Begin
52680>>>                        Send Deactivate of ghoStatusPanel
52681>>>                        Function_Return asFileChanges
52682>>>                        End
52682>>>>
52682>>>                    End
52682>>>>
52682>>>                End
52682>>>>
52682>>>            End
52682>>>>
52682>>>        Loop
52683>>>>
52683>>>
52683>>>         // ToDo: Not sure at all we want to do this automatically:
52683>>>//        Get psDriverID to sDriverID
52683>>>//         // Finally also change the driver file e.g. MSSQLDRV.int file in the Data folder in case it has a "DFconnectionID xxxxID,SERVER..."
52683>>>//        Move "" to sFileName
52683>>>//        If (sDriverID = MSSQLDRV_ID) Begin
52683>>>//            Move "MSSQLDrv.int" to sFileName
52683>>>//        End
52683>>>//        If (sDriverID = DB2_DRV_ID) Begin
52683>>>//            Move "DB2_Drv.int" to sFileName
52683>>>//        End
52683>>>//        If (sDriverID = ODBC_DRV_ID) Begin
52683>>>//            Move "ODBC_Drv.int" to sFileName
52683>>>//        End
52683>>>//        If (sFileName <> "") Begin
52683>>>//            Move "" to sDriverFile
52683>>>//            Get_File_Path sFileName to sDriverFile
52683>>>//            Get ParseFolderName sDriverFile to sPath
52683>>>//            If (sDataPath <> sPath) Begin
52683>>>//                Move "" to sDriverFile
52683>>>//            End
52683>>>//            If (sDriverFile <> "") Begin
52683>>>//                Get psConnectionString to sConnectionString
52683>>>//                Get _UtilChangeSourceCodeLine sDriverFile CS_SQLConnectionIDText (CS_SQLConnectionIDText * String(sConnectionID) + "," * String(sConnectionString) * String(",0")) bShowResult to bOK
52683>>>//            End
52683>>>//        End     
52683>>>        
52683>>>        Function_Return asFileChanges
52684>>>    End_Function
52685>>>
52685>>>    // Checks if the database exists in SQL. Returns = True if it does.
52685>>>    Function SqlUtilCheckIfDatabaseExists String sDatabase Returns Boolean
52687>>>        String[] sDatabaseArray
52688>>>        String sVal sServer sDriverID
52688>>>        Integer iCount iSize iPos
52688>>>        Boolean bExists
52688>>>        tSQLConnection SQLConnection
52688>>>        tSQLConnection SQLConnection
52688>>>
52688>>>        Move False to bExists
52689>>>        Get psDriverID to sDriverID
52690>>>        // DB2 doesn't have a "Database" name, so we always return True.
52690>>>        If (sDriverID = DB2_DRV_ID) Begin
52692>>>            Function_Return bExists
52693>>>        End
52693>>>>
52693>>>
52693>>>        Get SqlUtilEnumerateDatabases sDriverID to sDatabaseArray
52694>>>        If (SizeOfArray(sDatabaseArray) = 0) Begin
52696>>>            Function_Return False
52697>>>        End
52697>>>>
52697>>>
52697>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
52698>>>        Move SQLConnection.sServer to sServer
52699>>>
52699>>>        // Special code to handle a FILEDSN that also can contain "/"
52699>>>        If (Uppercase(sServer) contains ("." + CS_SQLIniDSNKeyword)) Begin
52701>>>            Move sDatabaseArray[0] to sVal  // Dummy!
52702>>>        End
52702>>>>
52702>>>        Else If (sServer contains "/") Begin
52705>>>            Move (Pos("/", sServer)) to iPos
52706>>>            Move (Mid(sServer, 999, (iPos +1))) to sDatabase
52707>>>        End
52707>>>>
52707>>>
52707>>>        Move (SizeOfArray(sDatabaseArray)) to iSize
52708>>>        Decrement iSize
52709>>>        For iCount from 0 to iSize
52715>>>>
52715>>>            Move sDatabaseArray[iCount] to sVal
52716>>>            If (Uppercase(sVal) = Uppercase(sDatabase)) Begin
52718>>>                Move True to bExists
52719>>>                If (bExists = True) Begin
52721>>>                    Move iSize to iCount // We're done.
52722>>>                End
52722>>>>
52722>>>            End
52722>>>>
52722>>>        Loop
52723>>>>
52723>>>
52723>>>        Function_Return bExists
52724>>>    End_Function
52725>>>
52725>>>    // Checks if a table exists as an SQL table. Returns = True if it does.
52725>>>    Function SqlUtilCheckIfTableHandleExists Handle hTable String sDriverID Returns Boolean
52727>>>        String sDatabase sSchema sTableName sVal
52727>>>        Boolean bExists
52727>>>        String[] sTablesArray
52728>>>        Integer iSize iCount
52728>>>
52728>>>        Move False to bExists
52729>>>        Get UtilTableHandleToString hTable to sTableName
52730>>>        Get psDatabase to sDatabase
52731>>>        Get psSchema   to sSchema
52732>>>        Get _SqlUtilEnumerateTables sDriverID sDatabase sSchema to sTablesArray
52733>>>        Move (SizeOfArray(sTablesArray)) to iSize
52734>>>        Decrement iSize
52735>>>        For iCount from 0 to iSize
52741>>>>
52741>>>            Move sTablesArray[iCount] to sVal
52742>>>            If (Uppercase(sVal) = Uppercase(sTableName)) Begin
52744>>>                Move True to bExists
52745>>>                Move iSize to iCount // We're done!
52746>>>            End
52746>>>>
52746>>>        Loop
52747>>>>
52747>>>
52747>>>        Function_Return bExists
52748>>>    End_Function
52749>>>
52749>>>    Function SqlUtilCheckIfTableNameSpelling String sDriverID String sDatabase String sTableName String sSchema Returns String
52751>>>        String sVal sTableSpelledCorrectly
52751>>>        Boolean bExists
52751>>>        String[] sTablesArray
52752>>>        Integer iSize iCount
52752>>>
52752>>>        Move False to bExists
52753>>>        Move sTableName to sTableSpelledCorrectly
52754>>>        Get _SqlUtilEnumerateTables sDriverID sDatabase sSchema to sTablesArray
52755>>>        Move (SizeOfArray(sTablesArray)) to iSize
52756>>>        Decrement iSize
52757>>>        For iCount from 0 to iSize
52763>>>>
52763>>>            Move sTablesArray[iCount] to sVal
52764>>>            If (Uppercase(sVal) = Uppercase(sTableName)) Begin
52766>>>                Move sVal to sTableSpelledCorrectly
52767>>>                Move iSize to iCount // We're done!
52768>>>            End
52768>>>>
52768>>>        Loop
52769>>>>
52769>>>
52769>>>        Function_Return sTableSpelledCorrectly
52770>>>    End_Function
52771>>>
52771>>>    // ToDo: This index name function needs to be finished...
52771>>>    Function SqlUtilCheckIfIndexNameExists Handle hTable String sIndexName Returns Boolean
52773>>>        String sSchema sTableName sDriverID
52773>>>        Boolean bExists
52773>>>
52773>>>        Get psDriverID to sDriverID
52774>>>        Get psSchema to sSchema
52775>>>        Get UtilTableHandleToString hTable to sTableName
52776>>>
52776>>>        Function_Return bExists
52777>>>    End_Function
52778>>>
52778>>>    // Checks if a column/field name exists in a SQL table definition
52778>>>    // Returns True if it does
52778>>>    // Sample:
52778>>>    //   Get SQLUtilColumnExists "MySQLTable" "MyColumnName" to bExists
52778>>>    Function SqlUtilColumnExists String sTableName String sFieldName Returns Boolean
52780>>>        Integer iNumColumns iColumn
52780>>>        String sColumn sDriverID
52780>>>        String[] sColumnsArray
52781>>>        Boolean bExists bOK
52781>>>
52781>>>        Move False to bExists
52782>>>        Get AutoConnectionIDLogin to bOK
52783>>>        Get psDriverID to sDriverID
52784>>>
52784>>>        Get _SqlUtilEnumerateColumns sDriverID sTableName to sColumnsArray
52785>>>        Move (SizeOfArray(sColumnsArray)) to iNumColumns
52786>>>        Decrement iNumColumns
52787>>>        For iColumn from 0 to iNumColumns
52793>>>>
52793>>>            Move sColumnsArray[iColumn] to sColumn
52794>>>            If (Uppercase(sFieldName) = Uppercase(sColumn)) Begin
52796>>>                Move True to bExists
52797>>>                Move iNumColumns to iColumn // We're out of here
52798>>>            End
52798>>>>
52798>>>        Loop
52799>>>>
52799>>>
52799>>>        Function_Return bExists
52800>>>    End_Function
52801>>>
52801>>>    Function SqlUtilConvertColumnTypesToSQL2008 Handle hTable Returns Boolean
52803>>>        Integer iNumColumns iColumn iDFType iNativeType
52803>>>        Boolean bOpened bOK
52803>>>        String sColumnName sNativeTypeName
52803>>>
52803>>>        Get AutoConnectionIDLogin to bOK
52804>>>        Get OpenTableExclusive hTable to bOK
52805>>>        If (bOK = False) Begin
52807>>>            Function_Return False
52808>>>        End
52808>>>>
52808>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
52811>>>        If (bOpened = False) Begin
52813>>>            Error DFERR_PROGRAM ("Function SQLUtilConvertColumnTypesToSQL2008; Could not open table" * String(hTable))
52814>>>>
52814>>>            Function_Return False
52815>>>        End
52815>>>>
52815>>>
52815>>>        Move False to Err
52816>>>
52816>>>        Structure_Start hTable
52817>>>            Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
52820>>>
52820>>>            For iColumn from 1 to iNumColumns
52826>>>>
52826>>>                Get_Attribute DF_FIELD_TYPE             of hTable iColumn to iDfType
52829>>>                Get_Attribute DF_FIELD_NAME             of hTable iColumn to sColumnName
52832>>>                Get_Attribute DF_FIELD_NATIVE_TYPE      of hTable iColumn to iNativeType
52835>>>                Get_Attribute DF_FIELD_NATIVE_TYPE_Name of hTable iColumn to sNativeTypeName
52838>>>
52838>>>                Case Begin
52838>>>                    Case (iDFType = DF_DATE)
52840>>>                        If (iNativeType = SQL_TYPE_TIMESTAMP) Begin
52842>>>                            // Convert datetime to date
52842>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_TYPE_DATE
52845>>>                        End
52845>>>>
52845>>>                        Case Break
52846>>>                    Case (iDFType = DF_DATETIME)
52849>>>                        If (iNativeType = SQL_TYPE_TIMESTAMP) Begin
52851>>>                            // Convert datetime to datetime2
52851>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_TYPE_TIMESTAMP2
52854>>>                        End
52854>>>>
52854>>>                        Case Break
52855>>>                    Case (iDFType = DF_ASCII)
52858>>>                        If (iNativeType = SQL_CHAR) Begin
52860>>>                            // Convert char to varchar
52860>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_VARCHAR
52863>>>                        End
52863>>>>
52863>>>                        Case Break
52864>>>                    Case (iDFType = DF_TEXT)
52867>>>                        If (iNativeType = SQL_LONGVARCHAR) Begin
52869>>>                            // Convert text to varchar(max)
52869>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_VARCHAR
52872>>>                        End
52872>>>>
52872>>>                        Case Break
52873>>>                    Case (iDFType = DF_BINARY)
52876>>>                        If (iNativeType = SQL_LONGVARBINARY) Begin
52878>>>                            // Convert image to varbinary(max)
52878>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_VARBINARY
52881>>>                        End
52881>>>>
52881>>>                        Case Break
52882>>>                Case End
52882>>>            Loop
52883>>>>
52883>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
52884>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
52886>>>
52886>>>        Set Action_Text of ghoStatusPanel to ""
52887>>>        Function_Return (Err = False)
52888>>>    End_Function
52889>>>
52889>>>
52889>>>    // Will create an SQL table with the passed sTableName & sColumnName as Numeric 4.2 to keep
52889>>>    // the DbUpdateVersion database revision in.
52889>>>    // Also pass the file number of the current (embedded?) table number used in development.
52889>>>    // It will first create the SQL Table & column, then create the .int file and change Filelist.cfg
52889>>>    Function SqlUtilCreateDbVersionTable Handle hTable String sColumnName String sDriverID Returns Boolean
52891>>>        Boolean bOK bOpened
52891>>>        String sTableName sDataType sAlterTable sAddColumn sLengthAndDecimals sStmt
52891>>>
52891>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sTableName
52894>>>        Get _TableNameOnly sTableName to sTableName
52895>>>        If (sTableName = "") Begin
52897>>>            Function_Return False
52898>>>        End
52898>>>>
52898>>>
52898>>>        // This just creates the table and a "dummy" column.
52898>>>        Get SqlTableCreate hTable sDriverID to bOK
52899>>>        If (bOK = False) Begin
52901>>>            Function_Return False
52902>>>        End
52902>>>>
52902>>>
52902>>>        Close hTable
52903>>>        Move False to Err
52904>>>
52904>>>        Get _SqlFindKeyWord CI_SQLAlterTable to sAlterTable
52905>>>        Get _SqlFindKeyWord CI_SQLAdd        to sAddColumn
52906>>>        Move "Decimal" to sDataType
52907>>>        Get _SqlFormatLengthAndDecimalAsString 4 2 to sLengthAndDecimals
52908>>>
52908>>>        // Adds the "sColumnName" passed to the function
52908>>>        Move (sAlterTable * sTableName * sAddColumn * sColumnName * sDataType + sLengthAndDecimals) to sStmt
52909>>>        Send SqlUtilExecuteQuery sStmt sDriverID
52910>>>
52910>>>        // Now we can delete the dummy column:
52910>>>        Get SqlColumnRemoveByTableName sTableName "Dummy" to bOK
52911>>>
52911>>>        // Finally, we attach to the newly created table.
52911>>>        If (Err = False) Begin
52913>>>            Get ApiTableAttachToSQL hTable True to bOK
52914>>>        End
52914>>>>
52914>>>        Open hTable
52916>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
52919>>>
52919>>>        Function_Return (Err = False and bOK = True and bOpened = True)
52920>>>    End_Function
52921>>>
52921>>>    // Returns a handle to the SQL server associated with the passed driver ID.
52921>>>    // Pass e.g. the psServer property to determine the current connection server.
52921>>>    // Returns a handle to the database connection, or a zero (0) if it fails.
52921>>>    // This handle can be used to obtain attributes about the server, such as default
52921>>>    // column types.
52921>>>    Function SqlUtilDatabaseHandle String sDriverID String sServer Returns Handle
52923>>>        Handle hDatabase
52923>>>        Integer iDriver iServers iCount
52923>>>        String sValue
52923>>>
52923>>>        If (sServer = "") Begin
52925>>>            Function_Return 0
52926>>>        End
52926>>>>
52926>>>
52926>>>        Get DriverIndex sDriverID to iDriver
52927>>>        If (iDriver = 0) Begin
52929>>>            Function_Return 0
52930>>>        End
52930>>>>
52930>>>
52930>>>        Get_Attribute DF_DRIVER_NUMBER_SERVERS of iDriver to iServers
52933>>>        For iCount from 1 to iServers
52939>>>>
52939>>>            Get_Attribute DF_DRIVER_SERVER_NAME of iDriver iCount to sValue
52942>>>            If (Uppercase(sValue) contains Uppercase(sServer)) Begin
52944>>>                Get_Attribute DF_DATABASE_ID of iDriver iCount to hDatabase
52947>>>            End
52947>>>>
52947>>>        Loop
52948>>>>
52948>>>
52948>>>        Function_Return hDatabase
52949>>>    End_Function
52950>>>
52950>>>    // Removes all driver identifications (e.g. "MSSQLDRV:MyTable")
52950>>>    // from the passed filelist.
52950>>>    // Returns the number of tables affected.
52950>>>    Function SqlUtilFilelistRemoveDriverInfo String sFilelist Returns Integer
52952>>>        String sCurrentFileList sRootName sDisplayName sLogicalName sVal
52952>>>        Integer iRetval
52952>>>        Handle hTable
52952>>>
52952>>>        // We first save the current filelist as the passed filelist name
52952>>>        // may come from another workspace, to restore it when we're ready.
52952>>>        Get_Attribute DF_FILELIST_NAME to sCurrentFileList
52955>>>        Set_Attribute DF_FILELIST_NAME to sFilelist
52958>>>        Move 0 to hTable
52959>>>        Move 0 to iRetval
52960>>>
52960>>>        Repeat
52960>>>>
52960>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
52963>>>            If (hTable <> 0) Begin
52965>>>                Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
52968>>>                Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
52971>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
52974>>>                Move (Uppercase(sRootName)) to sVal
52975>>>                If (sVal contains MSSQLDRV_ID or sVal contains DB2_DRV_ID or sVal contains ODBC_DRV_ID) Begin
52977>>>                    // Prefixes:
52977>>>                    Move (Replace((MSSQLDRV_ID + ":"), sRootName, "")) to sRootName
52978>>>                    Move (Replace((DB2_DRV_ID  + ":"), sRootName, "")) to sRootName
52979>>>                    Move (Replace((ODBC_DRV_ID + ":"), sRootName, "")) to sRootName
52980>>>                    // Suffixes:
52980>>>                    Move (Replace(("." + MSSQLDRV_ID), sRootName, "")) to sRootName
52981>>>                    Move (Replace(("." + DB2_DRV_ID),  sRootName, "")) to sRootName
52982>>>                    Move (Replace(("." + ODBC_DRV_ID), sRootName, "")) to sRootName
52983>>>
52983>>>                    // Change Filelist entry:
52983>>>                    Set_Attribute DF_FILE_ROOT_NAME of hTable          to sRootName
52986>>>
52986>>>                    Move (Lowercase(sDisplayName)) to sVal
52987>>>                    If (sVal contains "dbo.") Begin
52989>>>                        Move (Replace("dbo.", sDisplayName, ""))       to sDisplayName
52990>>>
52990>>>                        // Change Filelist entry:
52990>>>                        Set_Attribute DF_FILE_DISPLAY_NAME of hTable   to sDisplayName
52993>>>                    End
52993>>>>
52993>>>                    Increment iRetval
52994>>>                End
52994>>>>
52994>>>            End
52994>>>>
52994>>>        Until (hTable = 0)
52996>>>
52996>>>        Set_Attribute DF_FILELIST_NAME to sCurrentFileList
52999>>>
52999>>>        Function_Return iRetval
53000>>>    End_Function
53001>>>
53001>>>    // To open all Sql based tables in Filelist.cfg
53001>>>    Procedure SqlUtilOpenAllTables
53003>>>        Handle hTable
53003>>>        String sRoot sDriverID
53003>>>        Boolean bOK
53003>>>
53003>>>        Move 0 to hTable
53004>>>        Move "" to sDriverID
53005>>>        Get AutoConnectionIDLogin to bOK
53006>>>
53006>>>        Repeat
53006>>>>
53006>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
53009>>>            If (hTable > 0) Begin
53011>>>                Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
53014>>>                If (sDriverID = MSSQLDRV_ID or sDriverID = DB2_DRV_ID or sDriverID = ODBC_DRV_ID) Begin
53016>>>                    Get_Attribute DF_FILE_ROOT_NAME of hTable to sRoot
53019>>>                    If (Uppercase(sRoot) contains ".INT" or Uppercase(sRoot) contains MSSQLDRV_ID or Uppercase(sRoot) contains DB2_DRV_ID or Uppercase(sRoot) contains ODBC_DRV_ID) Begin
53021>>>                        Open hTable
53023>>>                    End
53023>>>>
53023>>>                End
53023>>>>
53023>>>            End
53023>>>>
53023>>>
53023>>>        Until (hTable = 0)
53025>>>    End_Procedure
53026>>>
53026>>>//    Function SqlUtilSchemaName Handle hTable Returns String
53026>>>//        String sRetval sDriverID
53026>>>//        String sTableName
53026>>>//        Integer iDbType iIndex
53026>>>//        Boolean bOK
53026>>>//
53026>>>//        Get psDriverID to sDriverID
53026>>>//        Get _SqlCheckCurrentDriver sDriverID to bOK
53026>>>//        If (hTable = 0 or bOK = False) Begin
53026>>>//            Function_Return ""
53026>>>//        End
53026>>>//
53026>>>//        Move False to Err
53026>>>//        Get UtilTableHandleToString hTable to sTableName
53026>>>//        Get piDbType to iDbType
53026>>>//        Get _SqlUtilEnumerateTableIndex sTableName sDriverID to iIndex
53026>>>//        If (iIndex = -1) Begin
53026>>>//            Function_Return ""
53026>>>//        End
53026>>>//
53026>>>//        Function_Return sRetval
53026>>>//    End_Function
53026>>>
53026>>>    // Checks if the passed Table;
53026>>>    // 1) Already has a Filelist entry that points to SQL and
53026>>>    // 2) It has an .int file.
53026>>>    // If both is True it should already be connected to SQL
53026>>>    Function SqlUtilTableIsAttached String sDriverID Handle hTable Returns Boolean
53028>>>        Boolean bExists bRootName
53028>>>        String sRootName sDataPath
53028>>>
53028>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
53031>>>        Move (sRootName contains sDriverID) to bRootName
53032>>>
53032>>>        Get psDataPathFirstPart to sDataPath
53033>>>        Get vFolderExists sDataPath to bExists
53034>>>        If (bExists = False) Begin
53036>>>            // If the path doesn't exist it cannot have an .int file and we're done, although it shouldn't happen.
53036>>>            Function_Return False
53037>>>        End
53037>>>>
53037>>>
53037>>>        Get vFolderFormat sDataPath to sDataPath
53038>>>        Get _TableNameOnly sRootName to sRootName
53039>>>        Get vFilePathExists (sDataPath + sRootName + ".int") to bExists
53040>>>
53040>>>        Function_Return (bRootName = True and bExists = True)
53041>>>    End_Function
53042>>>
53042>>>    Function SqlUtilTableIsViewType String sDriverID Handle hTable Returns Boolean
53044>>>        Boolean bViewTableType bOpen bOK
53044>>>        Integer iTableCount iNumTables
53044>>>        String sTableName sOwner sTableType sEnumTableName sEnumSchemaName
53044>>>        Handle hoCliHandler
53044>>>        tSQLConnection SQLConnection
53044>>>        tSQLConnection SQLConnection
53044>>>
53044>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
53047>>>        If (bOpen = False) Begin
53049>>>            Get AutoConnectionIDLogin to bOK
53050>>>            Open hTable
53052>>>        End
53052>>>>
53052>>>
53052>>>        Get pSQLConnection to SQLConnection
53053>>>        Get phoCLIHandler to hoCliHandler
53054>>>        Set psDriverID of hoCliHandler to sDriverID
53055>>>
53055>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sTableName
53058>>>        Get _TableNameOnly sTableName to sTableName
53059>>>        Get_Attribute DF_FILE_OWNER     of hTable to sOwner
53062>>>        Get EnumerateTables of hoCliHandler SQLConnection.sConnectionString to iNumTables
53063>>>
53063>>>        For iTableCount from 1 to iNumTables
53069>>>>
53069>>>            Get TableName  of hoCliHandler iTableCount to sEnumTableName
53070>>>            Get SchemaName of hoCliHandler iTableCount to sEnumSchemaName
53071>>>            If ((Uppercase(sEnumTableName)  = Uppercase(sTableName)) and (Uppercase(sEnumSchemaName) = Uppercase(sOwner))) Begin
53073>>>                Get TableType of hoCliHandler iTableCount to sTableType
53074>>>                Move iNumTables to iTableCount // We're done.
53075>>>            End
53075>>>>
53075>>>        Loop
53076>>>>
53076>>>
53076>>>        Move (sTableType = "VIEW") to bViewTableType
53077>>>        If (bOpen = False) Begin
53079>>>            Close hTable
53080>>>        End
53080>>>>
53080>>>
53080>>>        Function_Return bViewTableType
53081>>>    End_Function
53082>>>
53082>>>    // *** DbType conversion routines - Converts between string/integer and driver ID values ***
53082>>>    //
53082>>>    // SQL utility function that returns a database type (string) constant
53082>>>    // corresponding to the passed iDbType.
53082>>>    Function SqlUtilDbTypeToString Integer iDbType Returns String
53084>>>        String sRetval
53084>>>        Get SqlUtilDbTypeToString of (phoSQLConnectionIniFile(ghoSQLConnectionHandler)) iDbType to sRetval
53085>>>        Function_Return sRetval
53086>>>    End_Function
53087>>>
53087>>>    // SQL utility function that returns a database type constant (integer)
53087>>>    // corresponding to the passed sDbType string constant.
53087>>>    Function SqlUtilDbTypeToInteger String sDbType Returns Integer
53089>>>        Integer iRetval
53089>>>        Get SqlUtilDbTypeToInteger of (phoSQLConnectionIniFile(ghoSQLConnectionHandler)) sDbType to iRetval
53090>>>        Function_Return iRetval
53091>>>    End_Function
53092>>>
53092>>>    // Pass an integer DbType and function returns the database type integer as a string value.
53092>>>    // Used e.g. when reading a connection ini-file to display the database type in
53092>>>    // the SQL Connection program's grid.
53092>>>    Function SqlUtilDbTypeIntegerToStringConstant Integer iDbType Returns String
53094>>>        String sRetval
53094>>>        Get SqlUtilDbTypeIntegerToStringConstant of (phoSQLConnectionIniFile(ghoSQLConnectionHandler)) iDbType to sRetval
53095>>>        Function_Return sRetval
53096>>>    End_Function
53097>>>
53097>>>    // Pass a driver name as a string and the function will return
53097>>>    // a dbType as an integer. Obviously for the ODBC_DRV this doesn't
53097>>>    // quite work and always returns "MS SQL Server"
53097>>>    Function SqlUtilDbTypeFromDriver String sDriverID Returns Integer
53099>>>        Integer iRetval
53099>>>        Get SqlUtilDbTypeFromDriver of (phoSQLConnectionIniFile(ghoSQLConnectionHandler)) sDriverID to iRetval
53100>>>        Function_Return iRetval
53101>>>    End_Function
53102>>>
53102>>>    // Returns a temp table name that consists of the RootName, an underscore and as much of a GUID
53102>>>    // that "fits" in the max allowed length for table names.
53102>>>    // Max number of characters allowed for table names;
53102>>>    // IBM DB2      = 128
53102>>>    // MS-SQL       = 128
53102>>>    // Oracle       = 128 (Version 12.2 and later. 30 characters for earlier versions)
53102>>>    // MySQL        = 64
53102>>>    // PostgreSQL   = 64
53102>>>    Function SqlUtilGUIDTempTableName String sRootName Returns String
53104>>>        String sGUIDName
53104>>>        Integer iDbType iLength
53104>>>
53104>>>        Get piDbType to iDbType
53105>>>        Move (RandomHexUUID()) to sGUIDName
53106>>>        Move (sRootName + "_" + sGUIDName) to sGUIDName
53107>>>        Move (Length(sGUIDName)) to iLength
53108>>>
53108>>>        Case Begin
53108>>>            Case (iDbType = EN_DbTypeDB2)
53110>>>            If (iLength > 128) Begin
53112>>>                Move (Left(sGUIDName, 128)) to sGUIDName
53113>>>            End
53113>>>>
53113>>>            Case Break
53114>>>
53114>>>            Case (iDbType = EN_DbTypeMSSQL)
53117>>>            If (iLength > 128) Begin
53119>>>                Move (Left(sGUIDName, 128)) to sGUIDName
53120>>>            End
53120>>>>
53120>>>            Case Break
53121>>>
53121>>>            Case (iDbType = EN_DbTypeOracle) // Note: We assume an Oracle version of 12.2 or later.
53124>>>            If (iLength > 128) Begin
53126>>>                Move (Left(sGUIDName, 128)) to sGUIDName
53127>>>            End
53127>>>>
53127>>>            Case Break
53128>>>
53128>>>            Case (iDbType = EN_DbTypeMySQL)
53131>>>            If (iLength > 64) Begin
53133>>>                Move (Left(sGUIDName, 64)) to sGUIDName
53134>>>            End
53134>>>>
53134>>>            Case Break
53135>>>
53135>>>            Case (iDbType = EN_DbTypePostgre)
53138>>>            If (iLength > 64) Begin
53140>>>                Move (Left(sGUIDName, 64)) to sGUIDName
53141>>>            End
53141>>>>
53141>>>        Case End
53141>>>
53141>>>        Function_Return sGUIDName
53142>>>    End_Function
53143>>>
53143>>>    // Reads a resource that has been embedded by the compiler and writes it to disk.
53143>>>    // Pass the memory resource file reference and the filename to be created,
53143>>>    // including full path.
53143>>>    Procedure SqlUtilCreateFileFromMemory String sMemFileName String sFileName
53145>>>        String sText
53145>>>        Integer iCh iSize iArgSize
53145>>>
53145>>>        Move ("Resource:" + sMemFileName) to sMemFileName
53146>>>        Get Seq_Open_Input_Channel sMemFileName to iCh
53147>>>        Get_Channel_Size iCh to iSize
53148>>>        Read_Block channel iCh sText iSize
53150>>>        Send Seq_Close_Channel iCh
53151>>>
53151>>>        Get Seq_Open_Output_Channel sFileName to iCh
53152>>>            Write channel iCh sText
53154>>>        Send Seq_Close_Channel iCh
53155>>>
53155>>>        // Wait for file to be written to disk.
53155>>>        Sleep 2
53156>>>    End_Procedure
53157>>>
53157>>>    Function SqlUtilDefaultNullValue String sDriverID Integer iDbType Integer iDataType Returns String
53159>>>        String sNotNull sRetval sDefaultValue
53159>>>        Boolean bOK
53159>>>
53159>>>        Get IsSQLDriver sDriverID to bOK
53160>>>        If (bOK = False) Begin
53162>>>            Function_Return ""
53163>>>        End
53163>>>>
53163>>>
53163>>>        Get UtilDataTypeDefaultValue sDriverID iDbType iDataType to sDefaultValue
53164>>>        Get _SqlFindKeyWord CI_SQLNotNull to sNotNull
53165>>>
53165>>>        Case Begin
53165>>>            Case (iDbType = EN_dbTypeMSSQL)
53167>>>                Move ("DEFAULT" * String(sDefaultValue) * String(sNotNull)) to sRetval
53168>>>                Case Break
53169>>>            Case (iDbType = EN_dbTypeMySQL)
53172>>>                Move (String(sNotNull) * "DEFAULT" * String(sDefaultValue)) to sRetval
53173>>>                Case Break
53174>>>            Case (iDbType = EN_dbTypePostgre)
53177>>>                Move (String(sNotNull) * "DEFAULT" * String(sDefaultValue)) to sRetval
53178>>>                Case Break
53179>>>            Case (iDbType = EN_dbTypeDB2)
53182>>>                Move (String(sNotNull))                                     to sRetval
53183>>>                Case Break
53184>>>
53184>>>            // Seems like Oracle can't handle setting a new column to 'NOT NULL' if the table exists with data(!)
53184>>>            // ToDo: We need to look deeper into how Oracle handles NULL
53184>>>            Case (iDbType = EN_dbTypeOracle)
53187>>>                Move  ""                                                    to sRetval
53188>>>                Case Break
53189>>>
53189>>>            Case Else
53189>>>                Move  ""                                                    to sRetval
53190>>>        Case End
53190>>>
53190>>>        Function_Return sRetval
53191>>>    End_Function
53192>>>
53192>>>    // * Dummy function for the Studio's Code Explorer *
53192>>>    Function SQL_ENUMERATION_FUNCTIONS Returns Boolean
53194>>>        Function_Return False
53195>>>    End_Function
53196>>>
53196>>>    // Enumerate SQL Servers.
53196>>>    // Pass a driver id. Returns a string array.
53196>>>    // The iDataSourceType (iDatSrcType) parameter is optional and is for the ODBC driver only.
53196>>>    // Note: Returns servers for MSSQLDRV; else data-sources on the machine.
53196>>>    Function SqlUtilEnumerateServers String sDriverID Integer iDatSrcType Returns String[]
53198>>>        String[] sReturnArray
53199>>>        Handle hoSQLHandler
53199>>>        String sServer
53199>>>        Integer iCount iNumItems iDataSourceType
53199>>>
53199>>>        If (num_arguments > 1) Begin
53201>>>            Move iDatSrcType to iDataSourceType
53202>>>        End
53202>>>>
53202>>>
53202>>>        Case Begin
53202>>>            Case (sDriverID = MSSQLDRV_ID)
53204>>>                Get phoMSSQLHandler to hoSQLHandler 
53205>>>                Get EnumerateServersLocal of hoSQLHandler to iNumItems
53206>>>                If (iNumItems = 0) Begin
53208>>>                    Get EnumerateServers of hoSQLHandler to iNumItems 
53209>>>                End
53209>>>>
53209>>>                For iCount from 0 to (iNumItems - 1)
53215>>>>
53215>>>                    Get String_Value of hoSQLHandler iCount to sServer
53216>>>                    Move (Trim(sServer)) to sReturnArray[iCount]
53217>>>                Loop
53218>>>>
53218>>>                Case Break
53219>>>
53219>>>            Case (sDriverID = DB2_DRV_ID)
53222>>>                Get phoDB2SQLHandler to hoSQLHandler
53223>>>                Send SeedDataSources of hoSQLHandler
53224>>>                Move 0 to iCount
53225>>>                Repeat
53225>>>>
53225>>>                    Get DataSources of hoSQLHandler to sServer
53226>>>                    If (sServer <> "") Begin
53228>>>                        Move (Replace(",", sServer, "")) to sServer
53229>>>                        Move sServer to sReturnArray[iCount]
53230>>>                    End
53230>>>>
53230>>>                    Increment iCount
53231>>>                Until (sServer = "")
53233>>>                Case Break
53234>>>
53234>>>            Case (sDriverID = ODBC_DRV_ID)
53237>>>                Get phoODBCSQLHandler to hoSQLHandler
53238>>>                Set DataSourceType of hoSQLHandler to iDataSourceType
53239>>>                Move 0 to iCount
53240>>>                Repeat
53240>>>>
53240>>>                    Get DataSources of hoSQLHandler to sServer
53241>>>                    If (sServer <> "") Begin
53243>>>                        Move (Replace(",", sServer, ", ")) to sServer
53244>>>                        Move sServer to sReturnArray[iCount]
53245>>>                    End
53245>>>>
53245>>>                    Increment iCount
53246>>>                Until (sServer = "")
53248>>>                Case Break
53249>>>
53249>>>            Case Else
53249>>>                Error DFERR_PROGRAM "Unsupported DriverID passed to SqlUtilEnumerateServers function"
53250>>>>
53250>>>        Case End
53250>>>
53250>>>        Function_Return sReturnArray
53251>>>    End_Function
53252>>>
53252>>>    // Returns all databases as a string array for the passed driver id.
53252>>>    Function SqlUtilEnumerateDatabases String sDriverID Returns String[]
53254>>>        String[] sReturnArray
53255>>>        String sServer sVal
53255>>>        tSQLIntTableInfo[] sReturnStructArray
53255>>>        tSQLIntTableInfo[] sReturnStructArray
53256>>>        tSQLConnection SQLConnection
53256>>>        tSQLConnection SQLConnection
53256>>>        Boolean bOK
53256>>>        Integer iCount iSize
53256>>>
53256>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
53257>>>        If (bOK = False) Begin
53259>>>            Function_Return sReturnArray
53260>>>        End
53260>>>>
53260>>>
53260>>>        Case Begin
53260>>>            Case (sDriverID = MSSQLDRV_ID)
53262>>>                Get _SqlDatabasesArrayMSSQL to sReturnArray
53263>>>                Case Break
53264>>>            Case (sDriverID = DB2_DRV_ID)
53267>>>                Get _SqlDatabasesArrayDB2 to sReturnArray
53268>>>                Case Break
53269>>>
53269>>>            // This is needed to be able to check if a database exists or not.
53269>>>            Case (sDriverID = ODBC_DRV_ID)
53272>>>                Get _SqlDatabasesArrayODBC to sReturnStructArray
53273>>>                If (SizeOfArray(sReturnStructArray)) Begin
53275>>>                    If (SizeOfArray(sReturnStructArray) = 1 and sReturnStructArray[0].sServerName = "") Begin
53277>>>                        // If a FILEDSN: (can only be one database name)
53277>>>                        Move sReturnStructArray[0].sDatabaseName to sReturnArray[0]
53278>>>                    End
53278>>>>
53278>>>                    Else Begin
53279>>>                        // Else the DSN's were read from the registry.
53279>>>                        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
53280>>>                        Move SQLConnection.sServer to sServer
53281>>>                        Move (SizeOfArray(sReturnStructArray)) to iSize
53282>>>                        Decrement iSize
53283>>>                        for iCount from 0 to iSize
53289>>>>
53289>>>                            Move (sReturnStructArray[iCount].sServerName) to sVal
53290>>>                            If (Uppercase(sServer) = Uppercase(sVal)) Begin
53292>>>                                Move sReturnStructArray[iCount].sDatabaseName to sReturnArray[0]
53293>>>                                Move iSize to iCount // We're done.
53294>>>                            End
53294>>>>
53294>>>                        Loop
53295>>>>
53295>>>                    End
53295>>>>
53295>>>                End
53295>>>>
53295>>>                Case Break
53296>>>
53296>>>            Case Else
53296>>>//                Error DFERR_PROGRAM "Unsupported DriverID passed to SqlUtilEnumerateDatabases function"
53296>>>        Case End
53296>>>
53296>>>        Function_Return sReturnArray
53297>>>    End_Function
53298>>>
53298>>>    
53298>>>    // *** Database API Functions: ***
53298>>>    // Instead of using Sql Scripts (ESQL), we can opt to use the DataFlex Database API's to
53298>>>    // make changes/updates to the database.
53298>>>
53298>>>    // * Dummy function for the Studio's Code Explorer *
53298>>>    Function API_TABLE_FUNCTIONS Returns Boolean
53300>>>        Function_Return False
53301>>>    End_Function
53302>>>
53302>>>    // This might not do what you think - Here's what it does:
53302>>>    // It checks that the passed hTable TableName in filelist.cfg is exactly the same as at the SQL back-end.
53302>>>    // If that is True; it creates an .int file for it and changes Filelist.cfg to point
53302>>>    // to the SQL table.
53302>>>    // Typical usage for this function is when an entry exists in the Filelist for a table and the table
53302>>>    // already exists in SQL.
53302>>>    // This is a bit fiddly as the DF_FILE_PHYSICAL_NAME attribute can only be set inside a
53302>>>    // Structure_Start ... Structure_End operation when creating a NEW table. Thus it cannot be set when
53302>>>    // restructuring an existing table.
53302>>>    Function ApiTableAttachToSql Handle hTable Boolean bUseConnID Returns Boolean
53304>>>        Boolean bExists bOpened bOK bSystemFile bUseConnectionID bIsAlias
53304>>>        String sDriverID sConnectionID sConnectionString sDisplayName sRootName sLogicalName sPhysicalName sSchema
53304>>>        Handle hToTable
53304>>>
53304>>>        Move True to bUseConnectionID
53305>>>        If (num_arguments > 1) Begin
53307>>>            Move bUseConnID to bUseConnectionID
53308>>>        End
53308>>>>
53308>>>
53308>>>        Get psDriverID to sDriverID
53309>>>        // If the table doesn't exist on the SQL back-end we do nothing.
53309>>>        Get SqlUtilCheckIfTableHandleExists hTable sDriverID to bExists
53310>>>        If (bExists = False) Begin
53312>>>            Function_Return False
53313>>>        End
53313>>>>
53313>>>
53313>>>        Get UtilTableIsAlias hTable to bIsAlias
53314>>>
53314>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
53315>>>        If (bOK = False) Begin
53317>>>            Function_Return False
53318>>>        End
53318>>>>
53318>>>
53318>>>        // Then we need to check that the function hasn't been called before; which in case
53318>>>        // we do nothing
53318>>>        Get SQLUtilTableIsAttached sDriverID hTable to bExists
53319>>>        If (bExists = True) Begin
53321>>>            Function_Return False
53322>>>        End
53322>>>>
53322>>>
53322>>>        Get psConnectionID     to sConnectionID
53323>>>        Get psConnectionString to sConnectionString
53324>>>        If (sConnectionID = "" or sConnectionString = "") Begin
53326>>>            Error DFERR_PROGRAM ("An SQL connection has NOT been setup correctly. Could not attach table:" * String(hTable) * "to SQL")
53327>>>>
53327>>>            Function_Return False
53328>>>        End
53328>>>>
53328>>>
53328>>>        Set Private.phCurrentTable to hTable
53329>>>        Get psSchema to sSchema
53330>>>        If (sSchema = "") Begin
53332>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
53333>>>        End
53333>>>>
53333>>>
53333>>>        // If we should use a connection id we need to check it exists;
53333>>>        // else we create it before attempting creating the table
53333>>>        If (bUseConnectionID = True) Begin
53335>>>            Get AutoConnectionIDLogin to bOK
53336>>>            If (bOk = False) Begin
53338>>>                Error DFERR_PROGRAM ("The Connection ID:" * sConnectionID * "could not be created and therefor the table can't be created.")
53339>>>>
53339>>>                Function_Return False
53340>>>            End
53340>>>>
53340>>>        End
53340>>>>
53340>>>
53340>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
53343>>>        Get _TableNameOnly sRootName to sRootName
53344>>>        If (sRootName = "") Begin
53346>>>            Function_Return False
53347>>>        End
53347>>>>
53347>>>        Move (sRootName + ".int")                    to sPhysicalName
53348>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
53351>>>        Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
53354>>>
53354>>>        // The Studio no longer adds the schema to the DISPLAY_NAME, so commented out.
53354>>>        //
53354>>>        // We don't want to change the display name if it starts with an ampersand ("@"),
53354>>>        // because then the table should not be visible to users.
53354>>>//        Move (Pos("@", sDisplayName)) to iPos
53354>>>//        If (iPos <> 1) Begin
53354>>>//            If (sDisplayName contains ".") Begin
53354>>>//                Move (Pos(".", sDisplayName)) to iPos
53354>>>//                Move (Mid(sDisplayName, 200 ,(iPos + 1))) to sDisplayName
53354>>>//                Move (sSchema + "." + sDisplayName)       to sDisplayName
53354>>>//            End
53354>>>//            If (not(Lowercase(sDisplayName) contains Lowercase(sSchema + "."))) Begin
53354>>>//                Move (Lowercase(sSchema) + "." + sDisplayName) to sDisplayName
53354>>>//            End
53354>>>//        End
53354>>>
53354>>>        If (bIsAlias = False) Begin
53356>>>            Get OpenTableExclusive hTable to bOpened
53357>>>            If (bOpened = False) Begin
53359>>>                Error DFERR_PROGRAM ("Function ApiTableAttachToSQL - Could not open table number:" * String(hTable) * sLogicalName)
53360>>>>
53360>>>                Function_Return False
53361>>>            End
53361>>>>
53361>>>        End
53361>>>>
53361>>>
53361>>>        If (ghoProgressBar <> 0) Begin
53363>>>            Send DoAdvance of ghoProgressBar
53364>>>            Set Message_Text of ghoStatusPanel to ""
53365>>>            Set TableName_Text of ghoStatusPanel to ("Attaching to SQL - Table:" * String(sLogicalName) * "Number:" * String(hTable) * "to SQL")
53366>>>        End
53366>>>>
53366>>>        // Note: The hToTable will get changed by the Structure_xxx command...
53366>>>        Move hTable to hToTable
53367>>>        Move False to Err
53368>>>
53368>>>        // We now create a stub .int file and after Structure_end and also change the Filelist.cfg,
53368>>>        // then we do a pseudo .int file change with the "_SqlUtilUpdateIntFile" function. After that we have
53368>>>        // a proper and updated .int file.
53368>>>        Get_Attribute DF_FILE_IS_SYSTEM_FILE of hTable to bSystemFile
53371>>>        Get _SqlUtilCreateIntFile hTable sDriverID sConnectionID True bSystemFile True to bOK
53372>>>
53372>>>        If (bIsAlias = False) Begin
53374>>>            Structure_Start hToTable sDriverID
53375>>>                Set Private.phCurrentTable to hTable
53376>>>                If (bUseConnectionID = True) Begin
53378>>>                    Set_Attribute DF_FILE_LOGIN     of hToTable to (CS_DFCONNID + "=" + sConnectionID)
53381>>>                End
53381>>>>
53381>>>                Else Begin
53382>>>                    Set_Attribute DF_FILE_LOGIN     of hToTable to sConnectionString
53385>>>                End
53385>>>>
53385>>>                Set_Attribute DF_FILE_OWNER         of hToTable to (Lowercase(sSchema))
53388>>>                // For unknown reason the above sometimes triggers an error and it doesn't help to try to trap the error; so we cheat...
53388>>>                Move False to Err
53389>>>                Move 0 to LastErr
53390>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
53391>>>            Structure_End hToTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
53393>>>            Set Action_Text of ghoStatusPanel to ""
53394>>>        End
53394>>>>
53394>>>
53394>>>        Move (not(Err)) to bOK
53395>>>        If (bOK = True) Begin
53397>>>            // The attributes set above will always trigger an error
53397>>>            // We also adjust the Filelist entries
53397>>>            Set_Attribute DF_FILE_ROOT_NAME    of hTable to (sDriverID + ":" + sRootName)
53400>>>            Set_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
53403>>>            Set_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
53406>>>
53406>>>            // This updates the .int file to make it up-to-date with the SQL back-end.
53406>>>            Get _SqlUtilUpdateIntFile hTable to bOK
53407>>>        End
53407>>>>
53407>>>
53407>>>        If (bOK = True) Begin
53409>>>            Send ResetFillSQLTables
53410>>>        End
53410>>>>
53410>>>        Function_Return (bOK = True)
53411>>>    End_Function
53412>>>
53412>>>    // Sample usage:
53412>>>    //    Get ApiTableChangeAttribute SysInfo.File_Number DF_FILE_IS_SYSTEM_FILE True to bOK
53412>>>    //    Get ApiTableChangeAttribute OrderHea.File_Number DF_FILE_REUSE_DELETED DF_FILE_DELETED_NOREUSE to bOK
53412>>>    Function ApiTableChangeAttribute Handle hTable Integer iAttribute Integer iValue Returns Boolean
53414>>>        Boolean bOK bIsSQLTable
53414>>>
53414>>>        Get AutoConnectionIDLogin to bOK
53415>>>        Move False to Err
53416>>>        Get OpenTableExclusive hTable to bOK
53417>>>        If (bOK = False) Begin
53419>>>            Function_Return False
53420>>>        End
53420>>>>
53420>>>
53420>>>        // ToDo: Add to all table change functions!
53420>>>            Get _UtilTableIsSql hTable to bIsSQLTable
53421>>>            If (bIsSQLTable = True) Begin
53423>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
53426>>>            End
53426>>>>
53426>>>
53426>>>        Set Private.phCurrentTable to hTable
53427>>>        Structure_Start hTable
53428>>>            Set_Attribute iAttribute of hTable to iValue
53431>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
53432>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
53434>>>
53434>>>        Set Action_Text of ghoStatusPanel to ""
53435>>>        Function_Return (Err = False)
53436>>>    End_Function
53437>>>
53437>>>    Function ApiTableMoveFileListEntry String sRootName String sLogicalName String sDisplayName Handle hFromSlot Handle hToSlot String sDriverID Returns Boolean
53439>>>        Boolean bOK
53439>>>        
53439>>>        Get ApiTableChangeFileListSlot sRootName sLogicalName sDisplayName hToSlot sDriverID to bOK
53440>>>        If (bOK = True) Begin
53442>>>            Get ApiTableChangeFileListSlot "" "" "" hFromSlot sDriverID to bOK
53443>>>        End
53443>>>>
53443>>>        
53443>>>        Function_Return (bOK = True)
53444>>>    End_Function
53445>>>    
53445>>>    // To use a filelist slot for the passed FileName, TableName & DisplayName,
53445>>>    // or to change the filelist slot names.
53445>>>    Function ApiTableChangeFileListSlot String sRootName String sLogicalName String sDisplayName Handle hTable String sDriverID Returns Boolean
53447>>>        String sFileListName
53447>>>        
53447>>>        Move False to Err
53448>>>
53448>>>        If (ghoProgressBar <> 0) Begin
53450>>>            Send DoAdvance of ghoProgressBar
53451>>>            Set TableName_Text of ghoStatusPanel to ("Changing Filelist slot for Table:" * String(sLogicalName) * "Number:" * String(hTable))
53452>>>        End
53452>>>>
53452>>>        // If all strings are empty it means that we should remove this entry from filelist.
53452>>>        If (sRootName = "" and sLogicalName = "" and sDisplayName = "") Begin
53454>>>            Set_Attribute DF_FILE_ROOT_NAME     of hTable to ""
53457>>>            Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to ""
53460>>>            Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to ""
53463>>>            Function_Return (Err = False) // And we're done.
53464>>>        End
53464>>>>
53464>>>
53464>>>        If (sDriverID <> DATAFLEX_ID) Begin
53466>>>//            Set_Attribute DF_FILE_ROOT_NAME of hTable to (sDriverID + ":" + sRootName)
53466>>>            Move (sDriverID + ":" + sRootName) to sRootName
53467>>>        End
53467>>>>
53467>>>//        Else Begin
53467>>>//            Set_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
53467>>>//        End
53467>>>//
53467>>>//        Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
53467>>>//        Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
53467>>>
53467>>>        Set_Attribute DF_FILE_ROOT_NAME     of hTable to sRootName
53470>>>        Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
53473>>>        Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
53476>>>        
53476>>>        Function_Return (Err = False)
53477>>>    End_Function
53478>>>
53478>>>    Function ApiTableChangeRecordLength Handle hTable Integer iRecordLength Returns Boolean
53480>>>        Boolean bOK
53480>>>
53480>>>        Get AutoConnectionIDLogin to bOK
53481>>>        Move False to Err
53482>>>        Get OpenTableExclusive hTable to bOK
53483>>>        If (bOK = False) Begin
53485>>>            Function_Return False
53486>>>        End
53486>>>>
53486>>>
53486>>>        Set Private.phCurrentTable to hTable
53487>>>        Structure_Start hTable
53488>>>            Set_Attribute DF_FILE_RECORD_LENGTH of hTable to iRecordLength
53491>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
53492>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
53494>>>
53494>>>        Set Action_Text of ghoStatusPanel to ""
53495>>>        Function_Return (Err = False)
53496>>>    End_Function
53497>>>
53497>>>    Function ApiTableChangeRelation Handle hTable Handle hToTable Integer iFromField Integer iToField Returns Boolean
53499>>>        Boolean bOK bIsSQLTable
53499>>>
53499>>>        Move False to Err
53500>>>        Get AutoConnectionIDLogin to bOK
53501>>>        Open hToTable
53503>>>        Get OpenTableExclusive hTable to bOK
53504>>>        If (bOK = False) Begin
53506>>>            Function_Return False
53507>>>        End
53507>>>>
53507>>>
53507>>>            Get _UtilTableIsSql hTable to bIsSQLTable
53508>>>            If (bIsSQLTable = True) Begin
53510>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
53513>>>            End
53513>>>>
53513>>>
53513>>>        Set Private.phCurrentTable to hTable
53514>>>        Structure_Start hTable
53515>>>            Set_Attribute DF_FIELD_RELATED_FILE  of hTable iFromField to hToTable
53518>>>            Set_Attribute DF_FIELD_RELATED_FIELD of hTable iFromField to iToField
53521>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
53522>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
53524>>>
53524>>>        Set Action_Text of ghoStatusPanel to ""
53525>>>        Function_Return (Err = False)
53526>>>    End_Function
53527>>>
53527>>>    Procedure ApiTableConvertAllAddException Integer hTable
53529>>>        Integer[] aTableConvertExceptions
53530>>>        Get paTableConvertExceptions to aTableConvertExceptions
53531>>>        Move hTable to aTableConvertExceptions[SizeOfArray(aTableConvertExceptions)]
53532>>>        Set paTableConvertExceptions to aTableConvertExceptions
53533>>>    End_Procedure
53534>>>
53534>>>    Procedure ApiTableDateCorrectionAddException Integer hTable
53536>>>        Integer[] aTableDateCorrectionExceptions
53537>>>        Get paTableDateCorrectionExceptions to aTableDateCorrectionExceptions
53538>>>        Move hTable to aTableDateCorrectionExceptions[SizeOfArray(aTableDateCorrectionExceptions)]
53539>>>        Set paTableDateCorrectionExceptions to aTableDateCorrectionExceptions
53540>>>    End_Procedure
53541>>>
53541>>>    Procedure ApiTableConvertALLToSql
53543>>>        Integer[] iTablesArray
53544>>>        Integer iSize iCount
53544>>>        Boolean bUseConnectionID bToANSI bRecnum bCopyData bOK bContinueOnError
53544>>>        String sDriverID
53544>>>
53544>>>        Get psDriverID to sDriverID
53545>>>        Get pbUseConnectionID to bUseConnectionID
53546>>>        Get pbToANSI          to bToANSI
53547>>>        Get pbRecnum          to bRecnum
53548>>>        Get pbCopyData        to bCopyData
53549>>>        If (ghoDbUpdateHandler > 0) Begin
53551>>>            Get pbContinueOnError to bContinueOnError
53552>>>        End
53552>>>>
53552>>>
53552>>>        Get _AllTablesToConvert to iTablesArray
53553>>>        Move (SizeOfArray(iTablesArray)) to iSize
53554>>>        Set pbVisible   of ghoProgressBarOverall to True
53555>>>        Set piPosition  of ghoProgressBarOverall to 0
53556>>>        Set piAdvanceBy of ghoProgressBarOverall to 1
53557>>>        Set piMaximum   of ghoProgressBarOverall to iSize
53558>>>
53558>>>        Decrement iSize
53559>>>        For iCount from 0 to iSize
53565>>>>
53565>>>            Set piPosition of ghoProgressBarOverall to iCount
53566>>>            Get ApiTableConvertToSQL_Ex iTablesArray[iCount] sDriverID bUseConnectionID bToANSI bRecnum bCopyData to bOK
53567>>>            // Probably the right logic here is to just continue trying to convert every table even
53567>>>            // if there was an error converting one table...
53567>>>            //If (bContinueOnError = False and bOK = False) Break
53567>>>        Loop
53568>>>>
53568>>>
53568>>>    End_Procedure
53569>>>
53569>>>    Procedure ApiTableAttachALLToSql
53571>>>        Integer[] iTablesArray
53572>>>        Integer iSize iCount
53572>>>        Boolean bUseConnectionID bToANSI bRecnum bCopyData bOK bContinueOnError
53572>>>        String sDriverID
53572>>>
53572>>>        Get psDriverID to sDriverID
53573>>>        Get pbUseConnectionID to bUseConnectionID
53574>>>        Get pbToANSI          to bToANSI
53575>>>        Get pbRecnum          to bRecnum
53576>>>        Get pbCopyData        to bCopyData
53577>>>        If (ghoDbUpdateHandler > 0) Begin
53579>>>            Get pbContinueOnError to bContinueOnError
53580>>>        End
53580>>>>
53580>>>
53580>>>        Get _AllTablesToConvert to iTablesArray
53581>>>        Move (SizeOfArray(iTablesArray)) to iSize
53582>>>        Decrement iSize
53583>>>        For iCount from 0 to iSize
53589>>>>
53589>>>            Get ApiTableAttachToSQL iTablesArray[iCount] bUseConnectionID to bOK
53590>>>        Loop
53591>>>>
53591>>>
53591>>>    End_Procedure
53592>>>
53592>>>    Function ApiTableConvertToSql_Ex Handle hTable String sDriverID Boolean bUseConnectionID Boolean bToAnsi Boolean bRecnum Boolean bCopyData Returns Boolean
53594>>>        Handle hToTable hoLogFile
53594>>>        Boolean bOK bExists bOpened bDAWDriver bContinueOnError bIsAlias
53594>>>        String sPhysicalName sRootName sLogicalName sDisplayName sConnectionID sConnectionString
53594>>>        String sANSI_OEM sSchema sBaseTableSpace sLongTableSpace sIndexTableSpace sDatabase sGUIDName sWarning
53594>>>        tSQLConnection SQLConnection
53594>>>        tSQLConnection SQLConnection
53594>>>        
53594>>>        // ToDo: Remake logic. Instead create the new table!?
53594>>>        Get _UtilTableExists hTable to bExists
53595>>>        If (bExists = False) Begin
53597>>>            Set Private.phCurrentTable to hTable
53598>>>            Error DFERR_PROGRAM "Table exists in Filelist.cfg but not on disk or SQL back-end.(Or Filelist.cfg contains a driver but the table doesn't exists on the SQL back-end)"
53599>>>>
53599>>>            Function_Return False
53600>>>        End
53600>>>>
53600>>>
53600>>>        Get UtilTableIsAlias hTable to bIsAlias
53601>>>        // If this is an Alias file there is nothing to convert to SQL.
53601>>>        // Instead we change the Filelist.cfg by adding the driver id to the rootname and create an .int file
53601>>>        If (bIsAlias = True) Begin
53603>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
53606>>>            If (sDriverID <> DATAFLEX_ID and not(sRootName contains ":")) Begin
53608>>>                Set_Attribute DF_FILE_ROOT_NAME of hTable to (sDriverID + ":" + sRootName)
53611>>>                Get psConnectionID to sConnectionID
53612>>>                Get _SqlUtilCreateIntFile hTable sDriverID sConnectionID True False False to bOK
53613>>>            End
53613>>>>
53613>>>            Function_Return True
53614>>>        End
53614>>>>
53614>>>
53614>>>        Set Private.phCurrentTable to hTable
53615>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
53618>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
53621>>>        Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
53624>>>
53624>>>        If (ghoProgressBar <> 0) Begin
53626>>>            Send DoAdvance of ghoProgressBar
53627>>>            Set TableName_Text of ghoStatusPanel to ("Checking Table:" * "Number:" * String(hTable) * String(sLogicalName))
53628>>>            Set Message_Text   of ghoStatusPanel to ""
53629>>>            Set Action_Text    of ghoStatusPanel to ""
53630>>>        End
53630>>>>
53630>>>
53630>>>        // Marco Kuipers suggestion;
53630>>>        // If Filelist.cfg points to an embedded .dat table and the table already exists as
53630>>>        // an SQL table; Instead of creating the table in SQL, attach it to the existing
53630>>>        // SQL table.
53630>>>        Get _UtilTableIsSql hTable to bOK
53631>>>        If (bOK = False) Begin
53633>>>            Get _SqlUtilCheckIfTableNameExists sLogicalName sDriverID to bExists
53634>>>            If (bExists = True) Begin
53636>>>//                Get SQLUtilGUIDTempTableName sLogicalName to sGUIDName
53636>>>//                Get SqlTableRename hTable sLogicalName sGUIDName to bOK
53636>>>                Get phoLogFile to hoLogFile
53637>>>                If (hoLogFile <> 0) Begin          
53639>>>                    Move ("WARNING! Function: ApiTableConvertToSQL_Ex. The table" * sLogicalName * "pointed to an embedded table in Filelist.cfg that already existed as an SQL table! The table was NOT converted to SQL but instead ATTACHED to the existing SQL table.") to sWarning
53640>>>//                    Move ("WARNING! Function: ApiTableConvertToSQL_Ex. The table" * sLogicalName * "pointed to an embedded table in Filelist.cfg that already existed as an SQL table! The existing SQL table was renamed to:" * String(sGUIDName) * "and then converted again.") to sWarning
53640>>>                    Send LogError sWarning False
53641>>>                End
53641>>>>
53641>>>                Else Begin
53642>>>                    Error DFERR_PROGRAM sWarning
53643>>>>
53643>>>                End                                                       
53643>>>>
53643>>>                Get ApiTableAttachToSql hTable bUseConnectionID to bOK
53644>>>                Function_Return bOK // We're done (We have attached to an existing SQL table instead of converting it.
53645>>>            End
53645>>>>
53645>>>        End
53645>>>>
53645>>>
53645>>>        // Does the rootname contain a driver?
53645>>>        If (sDriverID <> DATAFLEX_ID and (Uppercase(sRootName) contains sDriverID)) Begin
53647>>>            // Does the table already exist as an SQL table?
53647>>>            Get SqlUtilCheckIfTableHandleExists hTable sDriverID to bExists
53648>>>            // It can happen that the table is missing from Filelist.cfg but still
53648>>>            // exist on the SQL side, in case we want to search for the table by its name.
53648>>>            If (bExists = False) Begin
53650>>>                Get _SqlUtilCheckIfTableNameExists sLogicalName sDriverID to bExists
53651>>>            End
53651>>>>
53651>>>            If (bExists = True) Begin
53653>>>                Set TableName_Text of ghoStatusPanel to ""
53654>>>                Function_Return False
53655>>>            End
53655>>>>
53655>>>        End
53655>>>>
53655>>>        Move (If(bToAnsi = True, CS_ANSI_Txt, CS_OEM_Txt)) to sANSI_OEM
53656>>>
53656>>>        Get IsDAWSQLDriver sDriverID to bDAWDriver
53657>>>//        If (bUseConnectionID = True) Begin
53657>>>//            Move False to bUseConnectionID
53657>>>//        End
53657>>>
53657>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
53658>>>        Move SQLConnection.sSchema           to sSchema
53659>>>        If (sSchema = "") Begin
53661>>>            Get _SqlFindKeyWord CI_SQLDBO    to sSchema
53662>>>            Move (Lowercase(sSchema))        to sSchema
53663>>>        End
53663>>>>
53663>>>
53663>>>        Move SQLConnection.sDatabase         to sDatabase
53664>>>        Move SQLConnection.sConnectionID     to sConnectionID
53665>>>        Move SQLConnection.sConnectionString to sConnectionString
53666>>>        If (sConnectionID = "" or sConnectionString = "") Begin
53668>>>            Error DFERR_PROGRAM ("The SQL connection info has NOT been setup. Could not convert table:" * String(hTable) * "to SQL")
53669>>>>
53669>>>            Function_Return False
53670>>>        End
53670>>>>
53670>>>
53670>>>        Get AutoConnectionIDLogin to bOK
53671>>>        Open hTable
53673>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
53676>>>        If (bOpened = False) Begin
53678>>>            Error DFERR_PROGRAM ("Could not open table number:" * String(hTable))
53679>>>>
53679>>>            Function_Return False
53680>>>        End
53680>>>>
53680>>>
53680>>>        If (ghoProgressBar <> 0) Begin
53682>>>            Send DoAdvance of ghoProgressBar
53683>>>            Set TableName_Text of ghoStatusPanel to ("Converting to SQL - Table:" * String(sLogicalName) * "Number:" * String(hTable))
53684>>>        End
53684>>>>
53684>>>
53684>>>        Move 0 to hToTable
53685>>>        Get _TableNameOnly sRootName                 to sRootName
53686>>>        Move (sRootName + ".int")                    to sPhysicalName
53687>>>
53687>>>        Case Begin
53687>>>            Case (sDriverID = MSSQLDRV_ID)
53689>>>                Case Break
53690>>>            Case (sDriverID = ODBC_DRV_ID)
53693>>>                Case Break
53694>>>            Case (sDriverID = DB2_DRV_ID)
53697>>>                Move SQLConnection.sBaseTableSpace  to sBaseTableSpace
53698>>>                Move SQLConnection.sLongTableSpace  to sLongTableSpace
53699>>>                Move SQLConnection.sIndexTableSpace to sIndexTableSpace
53700>>>                Case Break
53701>>>            Case (sDriverID = DATAFLEX_ID)
53704>>>                Case Break
53705>>>            Case Else
53705>>>                Error DFERR_PROGRAM "Wrong database driver passed to the 'ApiTableConvertToSQL_Ex' function."
53706>>>>
53706>>>                Case Break
53707>>>        Case End
53707>>>
53707>>>        Move False to Err
53708>>>
53708>>>        Structure_Start hToTable sDriverID
53709>>>            Structure_Copy hTable to hToTable
53710>>>            Set_Attribute DF_FILE_PHYSICAL_NAME of hToTable to sPhysicalName
53713>>>
53713>>>            If (sDriverID <> DATAFLEX_ID) Begin
53715>>>                If (bUseConnectionID = True) Begin
53717>>>                    Set_Attribute DF_FILE_LOGIN of hToTable to (CS_DFCONNID + "=" + sConnectionID)
53720>>>                End
53720>>>>
53720>>>                Else Begin
53721>>>                    Set_Attribute DF_FILE_LOGIN of hToTable to sConnectionString
53724>>>                End
53724>>>>
53724>>>
53724>>>                Set_Attribute DF_FILE_RECNUM_TABLE of hToTable to bRecnum
53727>>>
53727>>>                If (sSchema <> "") Begin
53729>>>                    Set_Attribute DF_FILE_OWNER of hToTable to sSchema
53732>>>                End
53732>>>>
53732>>>
53732>>>                If (sDriverID = DB2_DRV_ID) Begin
53734>>>                    If (sLongTableSpace <> "") Begin
53736>>>                        Set_Attribute DF_FILE_LONG_TABLESPACE  of hToTable to sLongTableSpace
53739>>>                    End
53739>>>>
53739>>>                    If (sBaseTableSpace <> "") Begin
53741>>>                        Set_Attribute DF_FILE_TABLE_TABLESPACE of hToTable to sBaseTableSpace
53744>>>                    End
53744>>>>
53744>>>                    If (sIndexTableSpace <> "") Begin
53746>>>                        Set_Attribute DF_FILE_INDEX_TABLESPACE of hToTable to sIndexTableSpace
53749>>>                    End
53749>>>>
53749>>>                End
53749>>>>
53749>>>            End
53749>>>>
53749>>>
53749>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
53750>>>        Structure_End hToTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
53752>>>        Set Action_Text of ghoStatusPanel to ""
53753>>>
53753>>>        Move (not(Err)) to bOK
53754>>>
53754>>>        If (bOK = True and bCopyData = True) Begin
53756>>>            Get ApiTableCopyData hTable sPhysicalName sRootName sDriverID to bOK
53757>>>
53757>>>            If (ghoDbUpdateHandler > 0) Begin
53759>>>                Get pbContinueOnError to bContinueOnError
53760>>>            End
53760>>>>
53760>>>            // If the data copy failed we will keep the newly created SQL table but
53760>>>            // rename it by adding a GUID to the end of the table name
53760>>>            // - or as much as "fit" because different SQL back-ends have
53760>>>            // different rules how long a table name can be.
53760>>>            // The new table will probably contain data but something went
53760>>>            // wrong while converting the data from embedded to SQL.
53760>>>            If (bOK = False and bContinueOnError = False) Begin
53762>>>                Get SQLUtilGUIDTempTableName sLogicalName to sGUIDName
53763>>>                Get SqlTableRename hTable sLogicalName sGUIDName to bOK
53764>>>                Error DFERR_PROGRAM ("Copying of" * sLogicalName * " data failed due to bad data. Either duplicate records and/or bad e.g Date/DateTime data. The SQL table was renamed to:" * String(sGUIDName) * "and its Filelist.cfg entry was NOT changed.")
53765>>>>
53765>>>            End
53765>>>>
53765>>>        End
53765>>>>
53765>>>
53765>>>        // This must be after copying data...
53765>>>        If (Err = False) Begin
53767>>>            Set_Attribute DF_FILE_ROOT_NAME of hTable to (sDriverID + ":" + sRootName)
53770>>>            // It seems the Studio does not do this any more, so commented out.
53770>>>            // We also adjust the display name by prefixing it by the schema name;
53770>>>            //            If (not(Lowercase(sDisplayName) contains Lowercase(sSchema + "."))) Begin
53770>>>            //                // The max length for the display_name is 31 characters...
53770>>>            //                If (Length(sSchema + "." + sDisplayName) < 31) Begin
53770>>>            //                    Set_Attribute DF_FILE_DISPLAY_NAME of hTable to (Lowercase(sSchema) + "." + sDisplayName)
53770>>>            //                End
53770>>>            //            End
53770>>>        End
53770>>>>
53770>>>
53770>>>        Close hTable
53771>>>        Move (not(Err)) to bOK
53772>>>        If (bOK = True) Begin
53774>>>            Send ResetFillSQLTables
53775>>>        End
53775>>>>
53775>>>        Function_Return bOK
53776>>>    End_Function
53777>>>
53777>>>    // Calls a driver function directly to copy data from one table to another (table structures needs to be the same).
53777>>>    // It will first drop all indicies, copy the data and then recreate indicies.
53777>>>    // An error log file with the sRootname + ".err" will be created in the Data folder.
53777>>>    Function ApiTableCopyData Integer hFromTable String sPhysicalName String sRootName String sDriverID Returns Boolean
53779>>>        Boolean bOpened bOK
53779>>>        Integer hToTable iIndex iRetval iVoid iOrgFreq
53779>>>        String sErrorFile sEmpty sPath
53779>>>
53779>>>        Get_Attribute DF_FILE_NEXT_EMPTY of 0 to hToTable
53782>>>        Get AutoConnectionIDLogin to bOK
53783>>>        If (sDriverID = DATAFLEX_ID) Begin
53785>>>            Send IncreaseSortBufferSize
53786>>>//            Send SetAllIndexesToBatch hToTable
53786>>>        End
53786>>>>
53786>>>
53786>>>        Move False to Err
53787>>>        Open sPhysicalName as hToTable
53789>>>        Get_Attribute DF_FILE_OPENED of hToTable to bOpened
53792>>>        If (bOpened = False) Begin
53794>>>            Function_Return False
53795>>>        End
53795>>>>
53795>>>
53795>>>        If (ghoStatusPanel <> 0) Begin
53797>>>            Set TableName_Text of ghoStatusPanel to ("Copying Data for Table:" * sRootName * "Number:" * String(hFromTable))
53798>>>            Set piMinimum of ghoProgressBar to 0
53799>>>            Set piMaximum of ghoProgressBar to 100 // 100%
53800>>>        End
53800>>>>
53800>>>
53800>>>        Move "" to sEmpty
53801>>>        Move False to Err
53802>>>        Move True to bOK
53803>>>        Set Private.phCurrentTable to hToTable
53804>>>
53804>>>        // No need to get the record identifier
53804>>>        Set_Attribute DF_FILE_GET_RID_AFTER_CREATE of hToTable to False
53807>>>        Get_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
53810>>>        If (sDriverID <> DATAFLEX_ID) Begin
53812>>>            // Remove all indices to speed up copying of data:
53812>>>            Call_Driver hToTable sDriverID Function CLI_DROPINDICES Callback ghoDbUpdateHandler Passing sEmpty sEmpty iVoid Result iRetval
53817>>>            If (iRetval <> 0) Begin       
53819>>>                Error DFERR_PROGRAM ("Failed dropping indices for table Number:" * String(hToTable) * "Name:" * String(sRootName))
53820>>>>
53820>>>                Close hToTable
53821>>>                Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
53824>>>                Function_Return False
53825>>>            End
53825>>>>
53825>>>        End
53825>>>>
53825>>>
53825>>>        Move (sRootName + ".err") to sErrorFile
53826>>>        Move 0 to iIndex
53827>>>        Move False to Err
53828>>>
53828>>>        If (sDriverID = MSSQLDRV_ID) Begin
53830>>>            Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to 10
53833>>>            Call_Driver hToTable sDriverID Function CLI_BCP CallBack ghoDbUpdateHandler Passing iIndex sEmpty hFromTable Result iRetval
53838>>>            If (iRetval <> 0) Begin
53840>>>                Error DFERR_PROGRAM ("Failed copying data for table Number:" * String(hToTable) * "Name:" * String(sRootName))
53841>>>>
53841>>>                Close hToTable
53842>>>                Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
53845>>>                Function_Return False
53846>>>            End
53846>>>>
53846>>>        End
53846>>>>
53846>>>        Else Begin
53847>>>            Copy_Records hFromTable to hToTable using 0 Callback ghoDbUpdateHandler
53850>>>        End
53850>>>>
53850>>>
53850>>>        If (Err = False) Begin
53852>>>            Get psHome of (phoWorkspace(ghoApplication)) to sPath
53853>>>            Get vDeleteFile (sPath + sErrorFile) to iRetval
53854>>>        End
53854>>>>
53854>>>
53854>>>        If (sDriverID <> DATAFLEX_ID) Begin
53856>>>            // Recreate indices:
53856>>>            Call_Driver hToTable sDriverID Function CLI_CREATEINDICES Callback ghoDbUpdateHandler Passing sEmpty sEmpty iVoid Result iRetval
53861>>>            If (iRetval <> 0) Begin
53863>>>                Error DFERR_PROGRAM ("Failed creating indices for table Number:" * String(hToTable) * "Name:" * String(sRootName))
53864>>>>
53864>>>                Close hToTable
53865>>>                Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
53868>>>                Function_Return False
53869>>>            End
53869>>>>
53869>>>        End
53869>>>>
53869>>>
53869>>>        Close hToTable
53870>>>        Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
53873>>>
53873>>>        If (bOK = True) Begin
53875>>>            Move (not(Err)) to bOK
53876>>>        End
53876>>>>
53876>>>
53876>>>        If (ghoStatusPanel <> 0) Begin
53878>>>            Set TableName_Text of ghoStatusPanel to ""
53879>>>            Set Message_Text   of ghoStatusPanel to ""
53880>>>            Set Action_Text    of ghoStatusPanel to ""
53881>>>        End
53881>>>>
53881>>>
53881>>>        Function_Return (bOK = True)
53882>>>    End_Function
53883>>>
53883>>>    // The bANSI parameter's default value = True, meaning a table in ANSI format will be created.
53883>>>    // i.e. DF_FILE_TABLE_CHARACTER_FORMAT {"OEM"|"ANSI"}
53883>>>    Function ApiTableCreate Handle hTable String sRootName String sDisplayName String sLogicalName Boolean bUseConnectionID Boolean bANSI Boolean bRecnum tAPIColumn[] aColumnIn Returns Boolean
53885>>>        Handle hFile
53885>>>        String sConnectionID sPhysicalFile sANSI_OEM sVal sSchema sOriginalDriverID sDriverID sTableName
53885>>>        Integer iIdentityType iDataType iDbType iCount iSize
53885>>>        Boolean bOk bExists bSqlDriver bDeleteDummy bExistsInFilelist bSysFile
53885>>>        tSQLConnection SQLConnection
53885>>>        tSQLConnection SQLConnection
53885>>>        tAPIColumn[] aColumns
53885>>>        tAPIColumn[] aColumns
53886>>>        tColumnType ColumnType
53886>>>        tColumnType ColumnType
53886>>>
53886>>>        // First check if the passed filenumber already exists; in case we do nothing
53886>>>        Get _UtilTableExists hTable to bOk
53887>>>        If (bOk = True) Begin
53889>>>            Function_Return False
53890>>>        End
53890>>>>
53890>>>
53890>>>        Set Private.phCurrentTable to hTable
53891>>>        Move sLogicalName to sTableName
53892>>>        If (ghoProgressBar <> 0) Begin
53894>>>            Send DoAdvance of ghoProgressBar
53895>>>            Set TableName_Text of ghoStatusPanel to ("Creating Table:" * String(sTableName) * "Number:" * String(hTable) * String(sLogicalName))
53896>>>        End
53896>>>>
53896>>>
53896>>>        Get UtilTableLogicalNameIsInUse sTableName to bExistsInFilelist
53897>>>        Get psDriverID to sDriverID
53898>>>        Get IsSQLDriver sDriverID to bSqlDriver
53899>>>        Get piDbType to iDbType
53900>>>
53900>>>        // If no columns passed in, we need to create a "dummy" column
53900>>>        Move False to bDeleteDummy
53901>>>        If (Num_Arguments = 8) Begin
53903>>>            Move aColumnIn to aColumns
53904>>>        End
53904>>>>
53904>>>        If ((SizeOfArray(aColumns)) = 0) Begin
53906>>>            Get UtilDFDataTypeToSqlTypeMapping sDriverID iDbType DF_BCD to ColumnType
53907>>>            Move ColumnType.iSQLType to iDataType
53908>>>            If (bRecnum = False) Begin
53910>>>                Move C_tAPIColumn_Identity to iIdentityType
53911>>>            End
53911>>>>
53911>>>            Else Begin
53912>>>                Move C_tAPIColumn_None     to iIdentityType
53913>>>            End
53913>>>>
53913>>>            Get _AppendAPIColumn aColumns "temp" iDataType 10 0 iIdentityType to aColumns
53914>>>            Move True to bDeleteDummy
53915>>>        End
53915>>>>
53915>>>
53915>>>        // If columns have been passed as an array we need to check if an identity column
53915>>>        // has been specified (aColumns[iCounter].iOptions = C_tAPIColumn_Identity), and
53915>>>        // if so auto-set the bRecnum to FALSE. This is because else there would be
53915>>>        // two identity columns and SQL doesn't like that and throws an error.
53915>>>        If (bRecnum = True and (SizeOfArray(aColumns)) <> 0) Begin
53917>>>            Move (SizeOfArray(aColumns)) to iSize
53918>>>            Decrement iSize
53919>>>            for iCount from 0 to iSize
53925>>>>
53925>>>                If (aColumns[iCount].iOptions = C_tAPIColumn_Identity) Begin
53927>>>                    Move False to bRecnum
53928>>>                    Move iSize to iCount
53929>>>                End
53929>>>>
53929>>>            Loop
53930>>>>
53930>>>        End
53930>>>>
53930>>>
53930>>>        // If this is a SQL based driver we also check if the table exists
53930>>>        // in the SQL back end; in case we do nothing.
53930>>>        If (bSqlDriver = True) Begin
53932>>>            // Get all connection properties
53932>>>            Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
53933>>>            Move SQLConnection.sSchema to sSchema
53934>>>            If (sSchema = "") Begin
53936>>>                Get _SqlFindKeyWord CI_SQLDBO to sSchema
53937>>>            End
53937>>>>
53937>>>
53937>>>            Get SqlUtilCheckIfTableHandleExists hTable sDriverID to bExists
53938>>>            // It can happen that the table is missing from Filelist.cfg but still
53938>>>            // exist on the SQL side, in case we want to search for the table by its name.
53938>>>            If (bExists = False) Begin
53940>>>                Get _SqlUtilCheckIfTableNameExists sTableName sDriverID to bExists
53941>>>            End
53941>>>>
53941>>>            // If the table exists on the SQL back-end but not in Filelist.cfg,
53941>>>            // we will just add it to Filelist.cfg
53941>>>            If (bExists = True) Begin
53943>>>                If (bExistsInFilelist = False) Begin
53945>>>                    If (sDriverID <> DATAFLEX_ID and not(Uppercase(sRootName) contains sDriverID)) Begin
53947>>>                        Move (sDriverID + ":" + sRootName) to sRootName
53948>>>                    End
53948>>>>
53948>>>                    Set_Attribute DF_FILE_ROOT_NAME     of hTable to sRootName
53951>>>                    Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
53954>>>                    Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
53957>>>                    Move False to bSysFile
53958>>>                    Get _SqlUtilCreateIntFile hTable sDriverID SQLConnection.sConnectionID bANSI bSysFile False to bOK
53959>>>                End
53959>>>>
53959>>>                Function_Return False
53960>>>            End
53960>>>>
53960>>>        End
53960>>>>
53960>>>
53960>>>        Move CS_ANSI_Txt to sANSI_OEM
53961>>>        If (num_arguments > 6) Begin
53963>>>            If (bANSI = False) Begin
53965>>>                Move CS_OEM_Txt to sANSI_OEM
53966>>>            End
53966>>>>
53966>>>        End
53966>>>>
53966>>>
53966>>>        Move False to Err
53967>>>        If (sDriverID = DATAFLEX_ID) Begin
53969>>>            Move sRootName to sPhysicalFile
53970>>>        End
53970>>>>
53970>>>
53970>>>        If (sDriverID <> DATAFLEX_ID) Begin
53972>>>            Move SQLConnection.sConnectionID to sConnectionID
53973>>>
53973>>>            // If DAW driver and we should use a connection id we need to
53973>>>            // check if the connection ID exists; else we create it before attempting creating the table
53973>>>            If (bUseConnectionID = True) Begin
53975>>>                Get IsConnectionID sConnectionID sDriverID to bExists
53976>>>                If (bExists = False) Begin
53978>>>                    Get AutoSetConnectionID sConnectionID to bOk
53979>>>                    If (bOk = False) Begin
53981>>>                        Error DFERR_PROGRAM ("The Connection ID:" * sConnectionID * "could not be created and therefor the table can't be created.")
53982>>>>
53982>>>                        Function_Return False
53983>>>                    End
53983>>>>
53983>>>                End
53983>>>>
53983>>>            End
53983>>>>
53983>>>
53983>>>            If (sDriverID <> DATAFLEX_ID and (Uppercase(sRootName) contains sDriverID)) Begin
53985>>>                Move (sTableName + ".int") to sPhysicalFile
53986>>>            End
53986>>>>
53986>>>            Else Begin
53987>>>                Move (sRootName + ".int") to sPhysicalFile
53988>>>            End
53988>>>>
53988>>>            Move (Uppercase(sDisplayName)) to sVal
53989>>>//            If (not(sVal contains (sSchema + "."))) Begin
53989>>>//                Move (Lowercase(sSchema) + "." + sTableName) to sDisplayName
53989>>>//            End
53989>>>        End
53989>>>>
53989>>>        Move False to Err
53990>>>        Move 0 to hFile
53991>>>
53991>>>        Structure_Start hFile sDriverID
53992>>>            If (sDriverID <> DATAFLEX_ID) Begin
53994>>>                If (bUseConnectionID = True) Begin
53996>>>                    Set_Attribute DF_FILE_LOGIN                of hFile to (CS_DFCONNID + "=" + sConnectionID)
53999>>>                End
53999>>>>
53999>>>                Else Begin
54000>>>                    Set_Attribute DF_FILE_LOGIN                of hFile to SQLConnection.sConnectionString
54003>>>                End
54003>>>>
54003>>>                Set_Attribute DF_FILE_TABLE_NAME               of hFile to sTableName
54006>>>                Set_Attribute DF_FILE_USE_DUMMY_ZERO_DATE      of hFile to True
54009>>>                Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT   of hFile to sANSI_OEM
54012>>>                Set_Attribute DF_FILE_RECNUM_TABLE             of hFile to bRecnum
54015>>>
54015>>>                If (sSchema <> "") Begin
54017>>>                    Set_Attribute DF_FILE_OWNER                of hFile to sSchema
54020>>>                End
54020>>>>
54020>>>
54020>>>                If (sDriverID = DB2_DRV_ID) Begin
54022>>>                    If (SQLConnection.sLongTableSpace <> "") Begin
54024>>>                        Set_Attribute DF_FILE_LONG_TABLESPACE  of hFile to SQLConnection.sLongTableSpace
54027>>>                    End
54027>>>>
54027>>>                End
54027>>>>
54027>>>                If (sDriverID = DB2_DRV_ID) Begin
54029>>>                    If (SQLConnection.sBaseTableSpace <> "") Begin
54031>>>                        Set_Attribute DF_FILE_TABLE_TABLESPACE of hFile to SQLConnection.sBaseTableSpace
54034>>>                    End
54034>>>>
54034>>>                    If (SQLConnection.sIndexTableSpace <> "") Begin
54036>>>                        Set_Attribute DF_FILE_INDEX_TABLESPACE of hFile to SQLConnection.sIndexTableSpace
54039>>>                    End
54039>>>>
54039>>>                End
54039>>>>
54039>>>            End
54039>>>>
54039>>>
54039>>>            Set_Attribute DF_FILE_PHYSICAL_NAME of hFile to sPhysicalFile
54042>>>            Get ApiColumnsAddToTable hFile aColumns True to bOk
54043>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
54044>>>        Structure_End hFile DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54046>>>        Set Action_Text of ghoStatusPanel to ""
54047>>>
54047>>>        Move (not(Err)) to bOK
54048>>>        If (bOk = True) Begin
54050>>>            If (sDriverID <> DATAFLEX_ID and not(Uppercase(sRootName) contains sDriverID)) Begin
54052>>>                Move (sDriverID + ":" + sRootName) to sRootName
54053>>>            End
54053>>>>
54053>>>            Set_Attribute DF_FILE_ROOT_NAME     of hTable to sRootName
54056>>>            Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
54059>>>            Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
54062>>>
54062>>>            // Lastly we remove the temporary column we created above, if all went well.
54062>>>            If (bDeleteDummy) Begin
54064>>>                Get ApiColumnRemove hTable "temp" to bOk
54065>>>            End
54065>>>>
54065>>>        End
54065>>>>
54065>>>
54065>>>        If (bOk = True and sDriverID <> DATAFLEX_ID) Begin
54067>>>            Send ResetFillSQLTables
54068>>>        End
54068>>>>
54068>>>        Set TableName_Text of ghoStatusPanel to ""
54069>>>        Close hTable
54070>>>        Function_Return bOK
54071>>>    End_Function
54072>>>
54072>>>    Function ApiTableCreateAlias String sFileName String sDisplayName String sAliasName Integer iFilelistSlot Returns Boolean
54074>>>        Move False to Err
54075>>>        Set_Attribute DF_FILE_ROOT_NAME     of iFilelistSlot to sFileName
54078>>>        Set_Attribute DF_FILE_DISPLAY_NAME  of iFilelistSlot to sDisplayName
54081>>>        Set_Attribute DF_FILE_LOGICAL_NAME  of iFilelistSlot to sAliasName
54084>>>
54084>>>        Function_Return (Err = False)
54085>>>    End_Function
54086>>>
54086>>>    // ToDo: Needs to be revised
54086>>>    Procedure ApiTableCreateFromDEF String sPath String sFileName String sTableName String sDisplayName Integer iFilelistSlot
54088>>>        Handle hTable
54088>>>        String sDEFName sDataPath
54088>>>        Boolean bExists
54088>>>
54088>>>        // Do nothing if MSSQL Driver.
54088>>>//        Get IsMSSQLDriver to bExists
54088>>>//        If (bExists = True) Begin
54088>>>//            Procedure_Return
54088>>>//        End
54088>>>
54088>>>        Get psDataPathFirstPart to sDataPath
54089>>>        Get vFilePathExists (sDataPath + sFileName + ".dat") to bExists
54090>>>        If (bExists = True) Begin
54092>>>            // We also needs to check if it is an Alias file, in case the sFileName.dat exists, but it may
54092>>>            // still be missing from the filelist and needs to be added.
54092>>>            Get _UtilTableNumberIsInUse iFilelistSlot to bExists
54093>>>            If (bExists = True) Begin
54095>>>                Procedure_Return
54096>>>            End
54096>>>>
54096>>>            // Do _not_ use the DEF file if an alias, it will overwrite the base table data.
54096>>>            Else Begin
54097>>>                Set_Attribute DF_FILE_ROOT_NAME    of iFilelistSlot to sFileName
54100>>>                Set_Attribute DF_FILE_LOGICAL_NAME of iFilelistSlot to sTableName
54103>>>                Set_Attribute DF_FILE_DISPLAY_NAME of iFilelistSlot to sDisplayName
54106>>>                Procedure_Return
54107>>>            End
54107>>>>
54107>>>        End
54107>>>>
54107>>>
54107>>>        Move (sPath + sFileName + ".def") to sDEFName
54108>>>        Move 0 to hTable
54109>>>        Move False to Err
54110>>>
54110>>>        Structure_Start hTable DATAFLEX_ID
54111>>>            Load_Def sDEFName Onto hTable
54112>>>            Set_Attribute DF_FILE_PHYSICAL_NAME of hTable to sFileName
54115>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
54116>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54118>>>        Set Action_Text of ghoStatusPanel to ""
54119>>>
54119>>>        Move iFilelistSlot to hTable
54120>>>        Set_Attribute DF_FILE_ROOT_NAME    of hTable to sFileName
54123>>>        Set_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
54126>>>        Set_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
54129>>>
54129>>>    End_Procedure
54130>>>
54130>>>    Function ApiTableMoveToFileSlot Integer iFromFileSlot Integer iToFileSlot String sDriverID Returns Boolean
54132>>>        Boolean bTmp bErr bOK
54132>>>        String sTableName sDisplayName sFileName
54132>>>
54132>>>        // We preserve the value of the Err flag, by saving its current state and resetting it before end of function.
54132>>>        Move Err to bTmp
54133>>>        Move False to Err
54134>>>
54134>>>        Get AutoConnectionIDLogin to bOK
54135>>>        // First get the info for the current filelist slot:
54135>>>        Open iFromFileSlot
54137>>>        Get_Attribute DF_FILE_OPENED of iFromFileSlot to bOK
54140>>>        If (bOK = True) Begin
54142>>>            Get_Attribute DF_FILE_ROOT_NAME    of iFromFileSlot to sFileName
54145>>>            Get_Attribute DF_FILE_LOGICAL_NAME of iFromFileSlot to sTableName
54148>>>            Get_Attribute DF_FILE_DISPLAY_NAME of iFromFileSlot to sDisplayName
54151>>>
54151>>>            //...then move it.
54151>>>            Set_Attribute DF_FILE_ROOT_NAME    of iToFileSlot to sFileName
54154>>>            Set_Attribute DF_FILE_LOGICAL_NAME of iToFileSlot to sTableName
54157>>>            Set_Attribute DF_FILE_DISPLAY_NAME of iToFileSlot to sDisplayName
54160>>>
54160>>>            //...and finally remove the old filelist values.
54160>>>            Set_Attribute DF_FILE_ROOT_NAME    of iFromFileSlot to ""
54163>>>            Set_Attribute DF_FILE_LOGICAL_NAME of iFromFileSlot to ""
54166>>>            Set_Attribute DF_FILE_DISPLAY_NAME of iFromFileSlot to ""
54169>>>        End
54169>>>>
54169>>>        Close iFromFileSlot
54170>>>
54170>>>        Move Err to bErr
54171>>>        Move bTmp to Err
54172>>>        Function_Return (bErr = False)
54173>>>    End_Function
54174>>>
54174>>>    Function ApiTableRelate Handle hTableFrom Handle hTableTo Integer iColumnFrom Integer iColumnTo Returns Boolean
54176>>>        Handle hTable
54176>>>        Boolean bOK
54176>>>        String sDriverID
54176>>>
54176>>>        Get _UtilTableExists hTableFrom to bOK
54177>>>        If (bOK = False) Begin
54179>>>            Set Private.phCurrentTable to hTableFrom
54180>>>            Error DFERR_PROGRAM ("Func: ApiTableRelate. From Table:" * String(hTableFrom) * "exists in Filelist.cfg but not on disk or SQL back-end.")
54181>>>>
54181>>>            Function_Return False
54182>>>        End
54182>>>>
54182>>>
54182>>>        Get _UtilTableExists hTableTo to bOK
54183>>>        If (bOK = False) Begin
54185>>>            Set Private.phCurrentTable to hTableTo
54186>>>            Error DFERR_PROGRAM ("Func: ApiTableRelate. To Table:" * String(hTableTo) * "exists in Filelist.cfg but not on disk or SQL back-end.")
54187>>>>
54187>>>            Function_Return False
54188>>>        End
54188>>>>
54188>>>
54188>>>        Get AutoConnectionIDLogin to bOK
54189>>>        Get UtilTableOpen hTableFrom "" DF_EXCLUSIVE to bOK
54190>>>        If (bOK = False) Begin
54192>>>            Function_Return False
54193>>>        End
54193>>>>
54193>>>
54193>>>        Move False to Err
54194>>>        Open hTableTo
54196>>>
54196>>>        Move hTableFrom to hTable
54197>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
54200>>>        Set Private.phCurrentTable to hTable
54201>>>
54201>>>        Structure_Start hTable sDriverID
54202>>>            Set_Attribute DF_FIELD_RELATED_FILE of hTable iColumnFrom to hTableTo
54205>>>            If (iColumnTo <> 0) Begin
54207>>>                Set_Attribute DF_FIELD_RELATED_FIELD of hTable iColumnFrom to iColumnTo
54210>>>            End
54210>>>>
54210>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
54211>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54213>>>        Set Action_Text of ghoStatusPanel to ""
54214>>>
54214>>>        If (hTableTo > 0) Begin
54216>>>            Close hTableTo
54217>>>        End
54217>>>>
54217>>>
54217>>>        Function_Return (Err = False)
54218>>>    End_Function
54219>>>
54219>>>    // Removes the passed table name completely from disk, filelist (& Sql Server if an Sql-driver)
54219>>>    Function ApiTableRemove Handle hTable Returns Boolean
54221>>>        String sTableName sDriverID
54221>>>        Boolean bOk
54221>>>        String sDataPath
54221>>>
54221>>>        Get AutoConnectionIDLogin to bOK
54222>>>        Move False to Err
54223>>>        Get psDriverID to sDriverID
54224>>>        Get UtilTableHandleToString hTable sDriverID to sTableName
54225>>>        If (sTableName = "") Begin
54227>>>            Function_Return False
54228>>>        End
54228>>>>
54228>>>
54228>>>        Set Private.phCurrentTable to hTable
54229>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_DELETE_FILE
54230>>>        Delete_db sTableName
54231>>>        Send Trap_Error of Error_Object_Id DFERR_CANT_DELETE_FILE
54232>>>
54232>>>        If (sDriverID <> DATAFLEX_ID) Begin
54234>>>//            Get SqlTableRemoveByTableName sTableName to bOk  // We don't have to do this because the database is already removed by 'delete_db' above
54234>>>            Get psDataPathFirstPart to sDataPath
54235>>>            Get vDeleteFile (sDataPath + sTableName + ".int") to bOk
54236>>>        End
54236>>>>
54236>>>        // Also remove table from filelist.cfg in case the physical file didn't exist.
54236>>>        If (hTable <> 0) Begin
54238>>>            Set_Attribute DF_FILE_ROOT_NAME     of hTable to ""
54241>>>            Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to ""
54244>>>            Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to ""
54247>>>        End
54247>>>>
54247>>>
54247>>>        If (hTable <> 0 and sDriverID <> DATAFLEX_ID) Begin
54249>>>            Send ResetFillSQLTables
54250>>>        End
54250>>>>
54250>>>        Close hTable
54251>>>        Function_Return (hTable <> 0)
54252>>>    End_Function
54253>>>
54253>>>    Function ApiTableRemoveRelation Handle hTableFrom Integer iColumn Returns Boolean
54255>>>        Handle hTable
54255>>>        Boolean bOK
54255>>>
54255>>>        Get AutoConnectionIDLogin to bOK
54256>>>        Move False to Err
54257>>>        Open hTableFrom Mode DF_EXCLUSIVE
54259>>>        Move hTableFrom to hTable
54260>>>
54260>>>        Structure_Start hTable
54261>>>            Set_Attribute DF_FIELD_RELATED_FILE of hTable iColumn to 0
54264>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
54265>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54267>>>        Set Action_Text of ghoStatusPanel to ""
54268>>>
54268>>>        Close hTableFrom
54269>>>        Function_Return (Err = False)
54270>>>    End_Function
54271>>>
54271>>>    Function ApiTableRename Handle hTable String sRootName String sDisplayName String sLogicalName Returns Boolean
54273>>>        String sPhysicalName sRootNameTo sLogicalNameTo sDataPath sDriverID sSchema sPhysicalNameTo
54273>>>        Boolean bOK bExists bOpened
54273>>>        tAPITableNameInfo APITableNameInfo
54273>>>        tAPITableNameInfo APITableNameInfo
54273>>>
54273>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
54276>>>        If (bOpened = False) Begin
54278>>>            Get OpenTableExclusive hTable to bOpened
54279>>>            If (bOpened = False) Begin
54281>>>                Send UserError DFERR_PROGRAM ("Could not open table number:" * String(hTable) * "Table could not be updated.")
54282>>>                Function_Return False
54283>>>            End
54283>>>>
54283>>>        End
54283>>>>
54283>>>
54283>>>        Set Private.phCurrentTable to hTable
54284>>>        Move hTable         to APITableNameInfo.iTableNumber
54285>>>        Move sRootName      to APITableNameInfo.sRootName
54286>>>        Move sLogicalName   to APITableNameInfo.sLogicalName
54287>>>        Move sDisplayName   to APITableNameInfo.sDisplayName
54288>>>        Get _ApiTableFilelistNamesCompare True APITableNameInfo to bExists
54289>>>        If (bExists = True) Begin
54291>>>            Function_Return True
54292>>>        End
54292>>>>
54292>>>
54292>>>        Set Private.phCurrentTable to hTable
54293>>>        Move False to Err
54294>>>        Get psDataPathFirstPart to sDataPath
54295>>>        Get_Attribute DF_FILE_PHYSICAL_NAME of hTable to sPhysicalName
54298>>>        Get_Attribute DF_FILE_ROOT_NAME     of hTable to sRootNameTo
54301>>>        Get_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalNameTo
54304>>>
54304>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
54307>>>        Close hTable
54308>>>        If (sDriverID = DATAFLEX_ID) Begin
54310>>>            Get vFilePathExists (sDataPath + sRootNameTo + ".dat") to bExists
54311>>>            If (bExists = True) Begin
54313>>>                If (Uppercase(sRootName) <> Uppercase(sRootNameTo)) Begin
54315>>>                    Copy_db (sDataPath + sRootNameTo) to (sDataPath + sRootName)
54318>>>                    // We need a short break here before attempting to delete the physical old files or Windows
54318>>>                    // might report "File in use..." and the deletion will fail.
54318>>>                    Sleep 2
54319>>>                    Get vDeleteFile (sDataPath + sRootNameTo + ".*") to bOK
54320>>>                End
54320>>>>
54320>>>            End
54320>>>>
54320>>>        End
54320>>>>
54320>>>
54320>>>        If (sDriverID <> DATAFLEX_ID) Begin
54322>>>            If (not(sPhysicalName contains ".")) Begin
54324>>>                Move (sPhysicalName + String(".int")) to sPhysicalName
54325>>>            End
54325>>>>
54325>>>
54325>>>            // Change the table name in the .int file to the new table new:
54325>>>            Get _UtilChangeSourceCodeLine (sDataPath + sPhysicalName) (CS_DATABASE_NAME * String(sLogicalNameTo)) (CS_DATABASE_NAME * String(sLogicalName)) False to bOK
54326>>>            If (bOK = False) Begin
54328>>>                Function_Return False
54329>>>            End
54329>>>>
54329>>>
54329>>>            // Change table name at the SQL side:
54329>>>            Get psSchema to sSchema
54330>>>            Get SqlTableRename hTable sLogicalNameTo sLogicalName to bOK
54331>>>
54331>>>            Get _TableNameOnly sRootName to sPhysicalNameTo
54332>>>            // Remove cache file and Rename the physical file names:
54332>>>            Get vDeleteFile (sDataPath + sPhysicalNameTo + ".cch")                                  to bOK
54333>>>            Get vRenameFile (sDataPath + sPhysicalName)            (sDataPath + sRootName + ".int") to bOK
54334>>>            Get vRenameFile (sDataPath + sPhysicalNameTo + ".tag") (sDataPath + sRootName + ".tag") to bOK
54335>>>            Move (sDriverID + ":" + sRootName) to sRootName
54336>>>
54336>>>            // The Studio no longer adds the schema to the DISPLAY_NAME, so commented out.
54336>>>//            If (not(sDisplayName contains ".")) Begin
54336>>>//                Move (sSchema + "." + sDisplayName) to sDisplayName
54336>>>//            End
54336>>>        End
54336>>>>
54336>>>
54336>>>        Set_Attribute DF_FILE_ROOT_NAME     of hTable to sRootName
54339>>>        Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
54342>>>        Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
54345>>>
54345>>>        Function_Return (Err = False)
54346>>>    End_Function
54347>>>
54347>>>    Function ApiTableRenameAlias Integer hTable String sDisplayName String sLogicalName Returns Boolean
54349>>>        Move False to Err
54350>>>        Set Private.phCurrentTable to hTable
54351>>>        Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
54354>>>        Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
54357>>>
54357>>>        Function_Return (Err = False)
54358>>>    End_Function
54359>>>
54359>>>    Function ApiTableUpdate tAPITableNameInfo APITableNameInfoFrom tAPIColumn[] aColumnsFrom tAPIIndex[] aIndexesFrom tAPIRelation[] aRelationsFrom Returns Boolean
54361>>>        Handle hTable
54361>>>        String sTableName
54361>>>        String sDriverIDFrom sDriverIDTo sLogicalNameTo
54361>>>        Integer iDbType
54361>>>        Boolean bOk bOpened bApiTableUpdateAuto bLogicalNameOK bSysfile
54361>>>        Boolean bUseConnectionID bToANSI bRecnum bCopyData bCompareDate_DateTime bCompareIndexAscending bCompareIndexUppercase bTableExists
54361>>>        Boolean bIsSame bFilelistError bIsAliasFrom bIsSQLTableFrom bIsSQLTableTo
54361>>>        tSQLConnection SQLConnection
54361>>>        tSQLConnection SQLConnection
54361>>>        tAPITable      APITableFrom APITableTo
54361>>>        tAPITable      APITableFrom APITableTo
54361>>>        tColumnType    ColumnType
54361>>>        tColumnType    ColumnType
54361>>>        tAPIColumnCompare[]   aAPIColumnCompare
54361>>>        tAPIColumnCompare[]   aAPIColumnCompare
54362>>>        tAPIIndexCompare[]    aAPIIndexCompare
54362>>>        tAPIIndexCompare[]    aAPIIndexCompare
54363>>>        tAPIRelationCompare[] aAPIRelationCompare
54363>>>        tAPIRelationCompare[] aAPIRelationCompare
54364>>>
54364>>>        // We don't allow changes to the framework's DbVersion table.
54364>>>        If (Lowercase(sTableName) = "dbversion") Begin
54366>>>            Function_Return False
54367>>>        End
54367>>>>
54367>>>        
54367>>>        Move True to bOk
54368>>>        Move APITableNameInfoFrom.sDriverID     to sDriverIDFrom
54369>>>        Get piDbType                            to iDbType
54370>>>        Get pbRecnum                            to bRecnum
54371>>>        Get pbToANSI                            to bToANSI
54372>>>        Get pbCopyData                          to bCopyData
54373>>>        Get pbApiTableUpdateAuto                to bApiTableUpdateAuto
54374>>>        Get pbCompareDate_DateTime              to bCompareDate_DateTime
54375>>>        Get pbCompareIndexAscending             to bCompareIndexAscending
54376>>>        Get pbCompareIndexUppercase             to bCompareIndexUppercase
54377>>>        Get pbUseConnectionID                   to bUseConnectionID
54378>>>
54378>>>        Move APITableNameInfoFrom.iTableNumber  to hTable
54379>>>        Set Private.phCurrentTable              to hTable
54380>>>        Get _UtilTableExists  hTable            to bTableExists
54381>>>
54381>>>        If (ghoProgressBar <> 0) Begin
54383>>>            Send DoAdvance of ghoProgressBar
54384>>>            Set TableName_Text of ghoStatusPanel to ("Checking Table:" * "Number:" * String(hTable) * String(APITableNameInfoFrom.sLogicalName))
54385>>>            Set Message_Text   of ghoStatusPanel to ""
54386>>>            Set Action_Text    of ghoStatusPanel to ""
54387>>>        End
54387>>>>
54387>>>
54387>>>        Move APITableNameInfoFrom.bIsAlias      to bIsAliasFrom
54388>>>        Move APITableNameInfoFrom.bIsSQL        to bIsSQLTableFrom
54389>>>        Get _UtilTableIsSql hTable              to bIsSQLTableTo
54390>>>        Get UtilDriverFromTableNumber hTable    to sDriverIDTo
54391>>>        Move True                               to APITableFrom.bFromTable
54392>>>        Move hTable                             to APITableFrom.hTable
54393>>>        Move APITableNameInfoFrom               to APITableFrom.ApiTableInfo
54394>>>        Move aColumnsFrom                       to APITableFrom.aApiColumns
54395>>>        Move aIndexesFrom                       to APITableFrom.aApiIndexes
54396>>>        Move aRelationsFrom                     to APITableFrom.aApiRelations
54397>>>
54397>>>        // Check both the Filelist slot AND the LogicalName are the same! Else declare an error and break out of here!
54397>>>        If (bTableExists = True and sDriverIDTo <> DATAFLEX_ID) Begin
54399>>>            Get _SqlUtilCheckIfTableNameExists APITableFrom.ApiTableInfo.sLogicalName sDriverIDTo to bLogicalNameOK
54400>>>            Get SqlUtilCheckIfTableHandleExists hTable sDriverIDFrom to bOk
54401>>>            If (bOk = True and bLogicalNameOK = False) Begin
54403>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalNameTo
54406>>>                Error DFERR_PROGRAM ("The Filelist slot:" * String(hTable) * "exists on the client, but the Logical names are differnt! New Logical Name:" ;                                      * String(APITableFrom.ApiTableInfo.sLogicalName) * "existing Logical Name:" * String(sLogicalNameTo) * "- The file needs to be manually moved to another file slot (or removed) before this process can be started!")
54407>>>>
54407>>>                Function_Return False
54408>>>            End
54408>>>>
54408>>>        End
54408>>>>
54408>>>
54408>>>        If (bTableExists = True) Begin
54410>>>            If (bIsSQLTableTo = True) Begin
54412>>>                Get _UtilDeleteCacheFile APITableFrom.ApiTableInfo.sLogicalName to bOk
54413>>>            End
54413>>>>
54413>>>            Get OpenTableExclusive hTable to bOpened
54414>>>            If (bOpened = False) Begin
54416>>>                Send UserError DFERR_PROGRAM ("Could not open table number:" * String(hTable) * "Table could not be updated.")
54417>>>                Function_Return False
54418>>>            End
54418>>>>
54418>>>            Get UtilTableStructFill hTable False                                                        to APITableTo
54419>>>            Get UtilColumnCombineFromAndToArrays   APITableFrom.aApiColumns   APITableTo.aApiColumns    to aAPIColumnCompare
54420>>>            Get UtilIndexCombineFromAndToArrays    APITableFrom.aApiIndexes   APITableTo.aApiIndexes    to aAPIIndexCompare
54421>>>            Get UtilRelationCombineFromAndToArrays APITableFrom.aApiRelations APITableTo.aApiRelations  to aAPIRelationCompare
54422>>>        End
54422>>>>
54422>>>
54422>>>        Move True to bOk
54423>>>        Move False to Err
54424>>>        Case Begin
54424>>>            // Alias table:
54424>>>            Case (bIsAliasFrom = True)
54426>>>                // Do nothing. Get _UtilTableCheckChangeFilelistNames is called below
54426>>>                Case Break
54427>>>
54427>>>            Case (bIsSQLTableFrom = True and bIsSQLTableTo = False and bTableExists = True)
54430>>>                    Get ApiTableConvertToSql_Ex hTable sDriverIDFrom bUseConnectionID bToANSI bRecnum bCopyData to bOk
54431>>>                    If (bOk = True) Begin
54433>>>                        Send LogError ("DataFlex table:" * String(APITableNameInfoFrom.sLogicalName) * "successfully converted to use driver:" * String(sDriverIDFrom)) False
54434>>>                    End
54434>>>>
54434>>>                Case Break
54435>>>            // New Table:
54435>>>            Case (bTableExists = False)
54438>>>                Get ApiTableCreate      hTable APITableNameInfoFrom.sRootName APITableNameInfoFrom.sDisplayName APITableNameInfoFrom.sLogicalName bUseConnectionID bToANSI bRecnum aColumnsFrom to bOk
54439>>>                //LR 20191112 Begin: Make file a system file if bIsSystemFile = True
54439>>>                If (APITableNameInfoFrom.bIsSystemFile) Begin
54441>>>                    Get ApiTableChangeAttribute hTable DF_FILE_IS_SYSTEM_FILE True to bOK
54442>>>                End                                                                 
54442>>>>
54442>>>                Get UtilIndexesUpdate   hTable bIsSQLTableFrom bIsSQLTableTo APITableFrom.aApiIndexes APITableTo.aApiIndexes bCompareIndexUppercase bCompareIndexAscending  to bOk
54443>>>                Get UtilRelationsUpdate hTable APITableFrom.aApiRelations APITableTo.aApiRelations to bOk
54444>>>                Case Break
54445>>>
54445>>>            // Update table:
54445>>>            Case (bTableExists = True)
54448>>>                Get UtilTableCompare APITableFrom APITableTo False (&bFilelistError) to bIsSame
54449>>>                If (bIsSame = True) Begin
54451>>>                    Case Break
54452>>>                End
54452>>>>
54452>>>                If (bFilelistError = True) Begin
54454>>>                    Get ApiTableRename hTable APITableNameInfoFrom.sRootName APITableNameInfoFrom.sDisplayName APITableNameInfoFrom.sLogicalName to bOk
54455>>>                    If (bOk = False) Begin
54457>>>                        Case Break
54458>>>                    End
54458>>>>
54458>>>                End
54458>>>>
54458>>>
54458>>>                If (ghoProgressBar <> 0) Begin
54460>>>                    Send DoAdvance of ghoProgressBar
54461>>>                    Set TableName_Text of ghoStatusPanel to ("Updating Table:" * "Number:" * String(hTable) * String(APITableNameInfoFrom.sLogicalName))
54462>>>                End
54462>>>>
54462>>>
54462>>>                // Columns:
54462>>>                Move True to bOk
54463>>>                Get UtilColumnsCompare sDriverIDFrom sDriverIDTo bIsSQLTableFrom bIsSQLTableTo aAPIColumnCompare bCompareDate_DateTime to bIsSame
54464>>>                If (bIsSame = False) Begin
54466>>>                    Get ApiColumnsUpdate sDriverIDFrom hTable bIsSQLTableFrom APITableFrom.aApiColumns APITableTo.aApiColumns bCompareDate_DateTime to bOk
54467>>>                End
54467>>>>
54467>>>                If (bOk = False) Begin
54469>>>                    Case Break
54470>>>                End
54470>>>>
54470>>>
54470>>>                // Indexes:
54470>>>                Get UtilIndexesCompare bIsSQLTableFrom bIsSQLTableTo aAPIIndexCompare bCompareIndexUppercase bCompareIndexAscending to bIsSame
54471>>>                If (bIsSame = False) Begin
54473>>>                    Get UtilIndexesUpdate hTable bIsSQLTableFrom bIsSQLTableTo APITableFrom.aApiIndexes APITableTo.aApiIndexes bCompareIndexUppercase bCompareIndexAscending  to bOk
54474>>>                End
54474>>>>
54474>>>
54474>>>                // Relations:
54474>>>                Get UtilRelationsCompare hTable aAPIRelationCompare to bIsSame
54475>>>                If (bIsSame = False) Begin
54477>>>                    Get UtilRelationsUpdate hTable APITableFrom.aApiRelations APITableTo.aApiRelations to bOk
54478>>>                    If (bOk = False) Begin
54480>>>                        Case Break
54481>>>                    End
54481>>>>
54481>>>                End
54481>>>>
54481>>>
54481>>>                Case Break
54482>>>
54482>>>            Case Else
54482>>>                Error DFERR_PROGRAM "Unknown Case structure exit in Function ApiTableUpdate"
54483>>>>
54483>>>                Move False to bOk
54484>>>        Case End
54484>>>        
54484>>>        If (bOk = True) Begin
54486>>>            // Note: If the from table was SQL; we should either connect to an existing SQL to table,
54486>>>            // or convert an embedded table to SQL
54486>>>            If (bIsSQLTableFrom = True and bIsSQLTableTo = False) Begin
54488>>>                Get SqlUtilCheckIfTableHandleExists hTable sDriverIDFrom to bOk
54489>>>                If (bOk = False) Begin
54491>>>                    Get ApiTableConvertToSql_Ex hTable sDriverIDFrom bUseConnectionID bToANSI bRecnum bCopyData to bOK
54492>>>                End
54492>>>>
54492>>>            End
54492>>>>
54492>>>            Else If (bIsSQLTableFrom = False and bIsSQLTableTo = True) Begin
54495>>>                Get SqlTableConvertToEmbedded hTable True to bOk
54496>>>            End
54496>>>>
54496>>>            
54496>>>            // Filelist Names:
54496>>>            Get _UtilTableCheckChangeFilelistNames APITableNameInfoFrom to bOk
54497>>>        End
54497>>>>
54497>>>        
54497>>>        // Refresh .int file: 
54497>>>        If (bIsSQLTableTo = True) Begin
54499>>>            Open hTable
54501>>>            Structure_Start hTable
54502>>>            Structure_End hTable DF_STRUCTEND_OPT_FORCE "." ghoDbUpdateHandler
54504>>>            Send ResetFillSQLTables
54505>>>        End
54505>>>>
54505>>>
54505>>>        Set TableName_Text of ghoStatusPanel to ""
54506>>>
54506>>>        Function_Return bOK
54507>>>    End_Function
54508>>>
54508>>>    // * Dummy function for the Studio's Code Explorer *
54508>>>    Function API_COLUMN_FUNCTIONS Returns Boolean
54510>>>        Function_Return False
54511>>>    End_Function
54512>>>
54512>>>    // Adds a column name to the passed table number.
54512>>>    Function ApiColumnAdd Handle hTable String sFieldName Integer iType Integer iLength Integer iPrec Boolean bInitVal String sColVal Returns Boolean
54514>>>        Integer iColumn iCount iFile iPrecision iLastErr
54514>>>        Boolean bExists bOK bInitializeValue bRetval
54514>>>        String sDataPath sDdSrcPath sTableName sColumnValue sDriverID
54514>>>
54514>>>        Get UtilColumnExists hTable sFieldName to bExists
54515>>>        If (bExists = True) Begin
54517>>>            Function_Return False
54518>>>        End
54518>>>>
54518>>>
54518>>>        Move False to Err
54519>>>        If (num_arguments > 4) Begin
54521>>>            Move iPrec to iPrecision
54522>>>        End
54522>>>>
54522>>>        If (num_arguments > 6) Begin
54524>>>            Move bInitVal to bInitializeValue
54525>>>            Move sColVal  to sColumnValue
54526>>>        End
54526>>>>
54526>>>        If (iType < -1490) Begin
54528>>>            Move (iType + 1500) to iType
54529>>>        End
54529>>>>
54529>>>
54529>>>        Move hTable to iFile
54530>>>        Get psDriverID to sDriverID
54531>>>        Get AutoConnectionIDLogin to bOK
54532>>>        Move False to Err
54533>>>        Move LastErr to iLastErr
54534>>>        Get OpenTableExclusive iFile to bOK
54535>>>        Set Private.phCurrentTable to hTable
54536>>>
54536>>>        Structure_Start iFile sDriverID
54537>>>            Move 0 to iColumn
54538>>>            Set Private.piCurrentField to iColumn
54539>>>            Create_Field hTable At iColumn
54540>>>            Set_Attribute DF_FIELD_NAME      of iFile iColumn to sFieldName
54543>>>            Set_Attribute DF_FIELD_TYPE      of iFile iColumn to iType
54546>>>            Set_Attribute DF_FIELD_LENGTH    of iFile iColumn to (iLength + iPrecision)
54549>>>            Set_Attribute DF_FIELD_PRECISION of iFile iColumn to iPrecision
54552>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
54553>>>        Structure_End iFile DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54555>>>
54555>>>        Set Action_Text of ghoStatusPanel to ""
54556>>>
54556>>>        // If in development environment; create .fd file:
54556>>>        Open hTable
54558>>>        Get psDdSrcPath  of (phoWorkspace(ghoApplication)) to sDDSrcPath
54559>>>        Get CountOfPaths of (phoWorkspace(ghoApplication)) sDDSrcPath to iCount
54560>>>        If (iCount > 1) Begin
54562>>>            Get PathAtIndex of (phoWorkspace(ghoApplication)) sDDSrcPath 1 to sDDSrcPath
54563>>>        End
54563>>>>
54563>>>        Get vFolderExists sDDSrcPath to bExists
54564>>>        If (bExists = True) Begin
54566>>>            Get vFolderFormat sDDSrcPath to sDDSrcPath
54567>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sTableName
54570>>>            Get _TableNameOnly sTableName to sTableName
54571>>>            Output_Aux_File DF_AUX_FILE_FD for hTable to (sDDSrcPath + sTableName + ".fd")
54573>>>        End
54573>>>>
54573>>>        If (sDriverID = DATAFLEX_ID) Begin  // We only want a tag if DataFlex embedded db
54575>>>            Get psDataPath  of (phoWorkspace(ghoApplication)) to sDataPath
54576>>>            Get CountOfPaths of (phoWorkspace(ghoApplication)) sDataPath to iCount
54577>>>            If (iCount > 1) Begin
54579>>>                Get PathAtIndex of (phoWorkspace(ghoApplication)) sDataPath 1 to sDataPath
54580>>>            End
54580>>>>
54580>>>            Get vFolderFormat sDataPath to sDataPath
54581>>>            // Add the new column name to the .tag filen (if it doesn't exist):
54581>>>            // The following line should not be necexxary for the DataFlex driver. (Thank you, Hans van de Laar)
54581>>>            //Get UtilUpdateTAGFile (sDataPath + sTableName + ".tag") sFieldName to bOK
54581>>>        End
54581>>>>
54581>>>        // Check for a default value
54581>>>        If (bInitializeValue = True and sColumnValue <> "" and Err = False) Begin
54583>>>            Get ApiColumnUpdateValue hTable sFieldName sColumnValue to bRetval
54584>>>        End
54584>>>>
54584>>>        Close hTable
54585>>>
54585>>>        Function_Return (Err = False)
54586>>>    End_Function
54587>>>
54587>>>    // Adds a column name to the passed table number.
54587>>>    Function ApiColumnInsert String sDriverIDFrom Handle hTable Integer iColumn String sFieldName Integer iType Integer iLength Integer iPrec Boolean bIsSQLType Returns Boolean
54589>>>        Integer iCount iFile iPrecision iNumberOfFields iDbType
54589>>>        Boolean bExists bOK bIsDateType bIsSQLTypeTo
54589>>>        String sDdSrcPath sTableName
54589>>>
54589>>>        Get UtilColumnExists hTable sFieldName to bExists
54590>>>        Move False to Err
54591>>>        If (bExists = True) Begin
54593>>>            Function_Return False
54594>>>        End
54594>>>>
54594>>>        If (num_arguments > 4) Begin
54596>>>            Move iPrec to iPrecision
54597>>>        End
54597>>>>
54597>>>        If (iType < -1490) Begin
54599>>>            Move (iType + 1500) to iType
54600>>>        End
54600>>>>
54600>>>
54600>>>        Get AutoConnectionIDLogin to bOK
54601>>>        Move False to Err
54602>>>        Get _UtilTableIsSql hTable to bIsSQLTypeTo
54603>>>        // If one of the two tables are SQL and the other Embedded we need to "translate"
54603>>>        // data types between Embedded and SQL, else we can't compare the data types. 
54603>>>        Get piDbType to iDbType
54604>>>        If (bIsSQLTypeTo = False) Begin
54606>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iType iLength to iType
54607>>>            If (iType = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
54609>>>                Move DF_DATE to iType
54610>>>            End
54610>>>>
54610>>>        End
54610>>>>
54610>>>
54610>>>        // Structure_start will change the value of hTable...
54610>>>        Move hTable to iFile
54611>>>        Get OpenTableExclusive iFile to bOK
54612>>>        If (bOK = False) Begin
54614>>>            Function_Return False
54615>>>        End
54615>>>>
54615>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iFile to iNumberOfFields
54618>>>
54618>>>        // If the passed column number is higher than the current number of fields
54618>>>        // in the table, this means we should _not_ insert a field but rather add
54618>>>        // a new field to the end:
54618>>>        If (iColumn > iNumberOfFields) Begin
54620>>>            Move 0 to iColumn
54621>>>        End
54621>>>>
54621>>>
54621>>>        Set Private.phCurrentTable to hTable
54622>>>        Set Private.piCurrentField to iColumn
54623>>>
54623>>>        Structure_Start iFile
54624>>>            Create_Field iFile At iColumn
54625>>>            Set_Attribute DF_FIELD_NAME            of iFile iColumn to sFieldName
54628>>>            If (bIsSQLTypeTo = False) Begin
54630>>>                Set_Attribute DF_FIELD_TYPE        of iFile iColumn to iType
54633>>>            End
54633>>>>
54633>>>            Else Begin
54634>>>                Set_Attribute DF_FIELD_NATIVE_TYPE of iFile iColumn to iType
54637>>>            End
54637>>>>
54637>>>            Get UtilColumnIsDateType iType bIsSQLTypeTo to bIsDateType
54638>>>            If (bIsDateType = False) Begin
54640>>>                Set_Attribute DF_FIELD_LENGTH       of iFile iColumn to (iLength + iPrecision)
54643>>>                Set_Attribute DF_FIELD_PRECISION    of iFile iColumn to iPrecision
54646>>>            End
54646>>>>
54646>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
54647>>>        Structure_End iFile DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54649>>>
54649>>>        Set Action_Text of ghoStatusPanel to ""
54650>>>        // If in development environment; create .fd file:
54650>>>        Open hTable
54652>>>        Get psDdSrcPath of (phoWorkspace(ghoApplication)) to sDDSrcPath
54653>>>        Get CountOfPaths of (phoWorkspace(ghoApplication)) sDDSrcPath to iCount
54654>>>        If (iCount > 1) Begin
54656>>>            Get PathAtIndex of (phoWorkspace(ghoApplication)) sDDSrcPath 1 to sDDSrcPath
54657>>>        End
54657>>>>
54657>>>        Get vFolderExists sDDSrcPath to bExists
54658>>>        If (bExists = True) Begin
54660>>>            Get vFolderFormat sDDSrcPath to sDDSrcPath
54661>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sTableName
54664>>>            Get _TableNameOnly sTableName to sTableName
54665>>>            Output_Aux_File DF_AUX_FILE_FD for hTable to (sDDSrcPath + sTableName + ".fd")
54667>>>        End
54667>>>>
54667>>>
54667>>>        // Check for a default value
54667>>>        Close hTable
54668>>>
54668>>>        Function_Return (Err = False)
54669>>>    End_Function
54670>>>
54670>>>    // To update all records for a table column with a fixed value.
54670>>>    Function ApiColumnUpdateValue Handle hTable String sFieldName String sColumnValue Returns Boolean
54672>>>        Integer iRecs iCurrErr iField iRecord
54672>>>        Boolean bRetval bOpen
54672>>>
54672>>>        Move 0 to iRecs
54673>>>        Move False to bRetval
54674>>>        Move Err to iCurrErr
54675>>>        Move False to Err
54676>>>
54676>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
54679>>>        If (bOpen = False) Begin
54681>>>            Open hTable
54683>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
54686>>>            If (bOpen = False) Begin
54688>>>                Function_Return bRetval
54689>>>            End
54689>>>>
54689>>>        End
54689>>>>
54689>>>
54689>>>        Field_Map hTable sFieldName to iField
54691>>>        If (iField <> 0) Begin
54693>>>            Set Private.phCurrentTable to hTable
54694>>>            Set Private.piCurrentField to iField
54695>>>            Clear hTable
54696>>>            Repeat
54696>>>>
54696>>>                Vfind hTable 0 GT
54698>>>                If (Found) Begin
54700>>>                    If (ghoStatusPanel <> 0) Begin
54702>>>                        Get_Field_Value hTable 0 to iRecord
54705>>>                        Send Update_StatusPanel of ghoStatusPanel (CS_DUF_UpdateVersion * String(iRecord))
54706>>>                    End
54706>>>>
54706>>>                    Reread hTable
54710>>>                        Set_Field_Value hTable iField to sColumnValue
54713>>>                        SaveRecord hTable
54714>>>                    Unlock
54715>>>>
54715>>>                End
54715>>>>
54715>>>           Until (not(Found))
54717>>>        End
54717>>>>
54717>>>
54717>>>        Move (Err = False) to bRetval
54718>>>        Move iCurrErr to Err
54719>>>
54719>>>        Function_Return bRetval
54720>>>    End_Function
54721>>>
54721>>>    // Note: This can only be used from within a Structure_Start/End construct.
54721>>>    Function ApiColumnsAddToTable Handle hTable tAPIColumn[] aColumns Boolean bCreating Returns Boolean
54723>>>        Integer iCount iSize iColumn iType iDataFlexType iIndex iDbType
54723>>>        Boolean bFieldExists bNativeType bIsSQLDriver bIsDAWSqlDriver bIsSqlTable bRecnumTable bIsOpen bIsDateType
54723>>>        String sFieldName sDriverID sTableName sDefaultValue
54723>>>
54723>>>        Get psDriverID to sDriverID
54724>>>        Get piDbType to iDbType
54725>>>        Get UtilTableHandleToString hTable to sTableName
54726>>>        Get IsSQLDriver    sDriverID to bIsSQLDriver
54727>>>        Get IsDAWSQLDriver sDriverID to bIsDAWSqlDriver
54728>>>        Get _UtilTableIsSql hTable to bIsSqlTable
54729>>>        If (bIsSqlTable = False and bCreating = True and bIsSQLDriver = True) Begin
54731>>>            Move True to bIsSqlTable
54732>>>        End
54732>>>>
54732>>>        Move False to bIsOpen
54733>>>        If (hTable > 0) Begin
54735>>>            Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
54738>>>        End
54738>>>>
54738>>>        If (bIsOpen = True) Begin
54740>>>            Get_Attribute DF_FILE_RECNUM_TABLE of hTable to bRecnumTable
54743>>>        End
54743>>>>
54743>>>        Else Begin
54744>>>            Get pbRecnum to bRecnumTable
54745>>>        End
54745>>>>
54745>>>
54745>>>        Move False to Err
54746>>>        Move (SizeOfArray(aColumns)) to iSize
54747>>>        Decrement iSize
54748>>>        for iCount from 0 to iSize
54754>>>>
54754>>>            Move aColumns[iCount].sFieldName to sFieldName
54755>>>            If (hTable > 0) Begin
54757>>>                Set Error_Report_Mode to DUF_ERROR_NO_REPORT
54758>>>                Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
54759>>>                Get_Attribute DF_FIELD_NAME of hTable iColumn to sFieldName
54762>>>                Move (Trim(sFieldName) <> "") to bFieldExists
54763>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
54764>>>                Send Trap_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
54765>>>            End
54765>>>>
54765>>>            Else Begin
54766>>>                Move False to bFieldExists
54767>>>            End
54767>>>>
54767>>>
54767>>>            If (bFieldExists = False) Begin
54769>>>                Move 0 to iColumn
54770>>>                Create_Field hTable At iColumn
54771>>>            End
54771>>>>
54771>>>            Else Begin
54772>>>                Move iCount to iColumn
54773>>>            End
54773>>>>
54773>>>
54773>>>            Set Private.piCurrentField to iColumn
54774>>>
54774>>>            Move                                        iColumn to aColumns[iCount].iFieldNumber
54775>>>            Set_Attribute DF_FIELD_NAME       of hTable iColumn to aColumns[iCount].sFieldName
54778>>>
54778>>>            Move aColumns[iCount].iType to iType
54779>>>            Move (not(iType < -1490)) to bNativeType
54780>>>            If (iType < -1490) Begin
54782>>>                Move (iType + 1500) to iType
54783>>>            End
54783>>>>
54783>>>
54783>>>            If (bIsSqlTable = True) Begin
54785>>>                If (aColumns[iCount].bIsSQLType = True) Begin
54787>>>                    Get UtilSQLColumnTypeToDataFlexType sDriverID iDbType iType aColumns[iCount].iLength to iDataFlexType
54788>>>//                    Set_Attribute DF_FIELD_TYPE          of hTable iColumn to iDataFlexType
54788>>>                    Set_Attribute DF_FIELD_NATIVE_TYPE   of hTable iColumn to iType
54791>>>                    Set_Attribute DF_FIELD_NULL_ALLOWED  of hTable iColumn to aColumns[iCount].bAllowNULL
54794>>>
54794>>>                    Move aColumns[iCount].sDefaultValue                    to sDefaultValue
54795>>>                    If (iDataFlexType = DF_BCD and Left(String(sDefaultValue), 1) <> "[") Begin
54797>>>                        Move ("[" + String(sDefaultValue) + "]") to sDefaultValue
54798>>>                    End
54798>>>>
54798>>>                    Set_Attribute DF_FIELD_DEFAULT_VALUE of hTable iColumn to sDefaultValue
54801>>>
54801>>>                End
54801>>>>
54801>>>                Else Begin
54802>>>                    Set_Attribute DF_FIELD_TYPE        of hTable iColumn to iType
54805>>>                End
54805>>>>
54805>>>            End
54805>>>>
54805>>>            Else Begin
54806>>>                If (bCreating = False) Begin
54808>>>                    Get UtilSQLColumnTypeToDataFlexType sDriverID iDbType iType aColumns[iCount].iLength to iType
54809>>>                    If (iType = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
54811>>>                        Move DF_DATE to iType
54812>>>                    End
54812>>>>
54812>>>                End
54812>>>>
54812>>>                Set_Attribute DF_FIELD_TYPE of hTable iColumn to iType
54815>>>            End
54815>>>>
54815>>>
54815>>>            Get UtilColumnIsDateType iType bIsSqlTable to bIsDateType
54816>>>            If (bIsDateType = False) Begin
54818>>>                Set_Attribute DF_FIELD_LENGTH     of hTable iColumn to aColumns[iCount].iLength
54821>>>                Set_Attribute DF_FIELD_PRECISION  of hTable iColumn to aColumns[iCount].iPrecision
54824>>>            End
54824>>>>
54824>>>
54824>>>            If (aColumns[iCount].iOptions iand C_tAPIColumn_Identity) Begin
54826>>>                Move 0 to iIndex
54827>>>                Create_Index hTable at iIndex
54828>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to 1
54831>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD   of hTable iIndex 1 to iColumn
54834>>>                Set_Attribute DF_FILE_PRIMARY_INDEX    of hTable iIndex to 1
54837>>>
54837>>>                // If we have an identity table - we must create a primary_key table.
54837>>>                If (bIsSqlTable = True) Begin
54839>>>                        Set_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable iIndex to True
54842>>>                        Set_Attribute DF_FIELD_IS_IDENTITY of hTable iColumn to True
54845>>>                End
54845>>>>
54845>>>            End
54845>>>>
54845>>>        Loop
54846>>>>
54846>>>
54846>>>        Function_Return (Err = False)
54847>>>    End_Function
54848>>>
54848>>>    // Changes a field type, length and precision for the passed table number and field name
54848>>>    Function ApiColumnChange Handle hTable String sFieldNameFrom Integer iTypeFrom Integer iLengthFrom Integer iPrec Returns Boolean
54850>>>        Integer iColumn iPrecFrom iTypeTo iLengthTo iPrecTo
54850>>>        Boolean bOK bIsSqlTable
54850>>>        String sFieldNameTo
54850>>>
54850>>>        If (num_arguments > 4) Begin
54852>>>            Move iPrec to iPrecFrom
54853>>>        End
54853>>>>
54853>>>        If (iTypeFrom < -1490) Begin
54855>>>            Move (iTypeFrom + 1500) to iTypeFrom
54856>>>        End
54856>>>>
54856>>>
54856>>>        Get AutoConnectionIDLogin to bOK
54857>>>        Move False to Err
54858>>>        Get OpenTableExclusive hTable to bOK
54859>>>        If (bOK = False) Begin
54861>>>            Function_Return False
54862>>>        End
54862>>>>
54862>>>
54862>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
54863>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
54864>>>        Field_Map hTable sFieldNameFrom to iColumn
54866>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
54867>>>        Send Trap_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
54868>>>        If (Err = True) Begin
54870>>>            Function_Return False
54871>>>        End
54871>>>>
54871>>>
54871>>>        Get_Attribute DF_FIELD_NAME                  of hTable iColumn to sFieldNameTo
54874>>>        Get _UtilTableIsSql hTable to bIsSqlTable
54875>>>        If (bIsSqlTable = False) Begin
54877>>>            Get_Attribute DF_FIELD_TYPE              of hTable iColumn to iTypeTo
54880>>>        End
54880>>>>
54880>>>        Else Begin
54881>>>            Get_Attribute DF_FIELD_NATIVE_TYPE       of hTable iColumn to iTypeTo
54884>>>        End
54884>>>>
54884>>>        // Let the driver decide the other values;
54884>>>        Get_Attribute DF_FIELD_LENGTH                of hTable iColumn to iLengthTo
54887>>>        Get_Attribute DF_FIELD_PRECISION             of hTable iColumn to iPrecTo
54890>>>
54890>>>        If (sFieldNameFrom = sFieldNameTo and iTypeFrom = iTypeTo and iLengthFrom = iLengthTo and iPrecFrom = iPrecTo) Begin
54892>>>            Function_Return False
54893>>>        End
54893>>>>
54893>>>
54893>>>        Set Private.phCurrentTable to hTable
54894>>>        Set Private.piCurrentField to iColumn
54895>>>
54895>>>        Structure_Start hTable
54896>>>            Set_Attribute DF_FIELD_NAME              of hTable iColumn to sFieldNameFrom
54899>>>            If (bIsSqlTable = False) Begin
54901>>>                Set_Attribute DF_FIELD_TYPE          of hTable iColumn to iTypeFrom
54904>>>            End
54904>>>>
54904>>>            Else Begin
54905>>>                Set_Attribute DF_FIELD_NATIVE_TYPE   of hTable iColumn to iTypeFrom
54908>>>            End
54908>>>>
54908>>>            Set_Attribute DF_FIELD_LENGTH            of hTable iColumn to (iLengthFrom + iPrecFrom)
54911>>>            Set_Attribute DF_FIELD_PRECISION         of hTable iColumn to iPrecFrom
54914>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
54915>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54917>>>
54917>>>        Set Action_Text of ghoStatusPanel to ""
54918>>>        Function_Return (Err = False)
54919>>>    End_Function
54920>>>
54920>>>    // Changes a field type, length and precision for the passed table number and field name
54920>>>    Function ApiColumnChangeByColumnNumber String sDriverIDFrom Handle hTable Boolean bIsSQLTableFrom Boolean bIsSQLTableTo String sFieldNameFrom Integer iColumn Integer iTypeFrom Integer iLengthFrom Integer iPrec Integer iOpt Returns Boolean
54922>>>        Integer iPrecFrom iTypeTo iLengthTo iPrecTo iDbType iOptionFrom iOptionTo iDataFlexType iIndex
54922>>>        Boolean bOK bCompareDate_DateTime bSkip bRecnumTable bIsSameDataType
54922>>>        String sFieldNameTo sDriverIDTo
54922>>>        tColumnType ColumnType
54922>>>        tColumnType ColumnType
54922>>>
54922>>>        Get pbCompareDate_DateTime to bCompareDate_DateTime
54923>>>        Get piDbType to iDbType
54924>>>        If (num_arguments > 4) Begin
54926>>>            Move iPrec to iPrecFrom
54927>>>            Move iOpt  to iOptionFrom
54928>>>        End
54928>>>>
54928>>>        If (iTypeFrom < -1490) Begin
54930>>>            Move (iTypeFrom + 1500) to iTypeFrom
54931>>>        End
54931>>>>
54931>>>
54931>>>        Get AutoConnectionIDLogin to bOK
54932>>>        Move False to Err
54933>>>        Close hTable
54934>>>        Get OpenTableExclusive hTable to bOK
54935>>>        If (bOK = False) Begin
54937>>>            Function_Return False
54938>>>        End
54938>>>>
54938>>>
54938>>>        Get_Attribute DF_FILE_DRIVER                of hTable         to sDriverIDTo
54941>>>        Get_Attribute DF_FILE_RECNUM_TABLE          of hTable         to bRecnumTable
54944>>>        Get UtilSQLColumnTypeToDataFlexType sDriverIDTo iDbType iTypeTo iLengthTo to iDataFlexType
54945>>>        If (iDataFlexType = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
54947>>>            Move DF_DATE to iDataFlexType
54948>>>        End
54948>>>>
54948>>>        Get_Attribute DF_FIELD_NAME                 of hTable iColumn to sFieldNameTo
54951>>>
54951>>>        If (bIsSQLTableTo = True) Begin
54953>>>                Get_Attribute DF_FIELD_NATIVE_TYPE  of hTable iColumn to iTypeTo
54956>>>        End
54956>>>>
54956>>>        Else Begin
54957>>>            Get_Attribute DF_FIELD_TYPE             of hTable iColumn to iTypeTo
54960>>>        End
54960>>>>
54960>>>
54960>>>        Get_Attribute DF_FIELD_LENGTH               of hTable iColumn to iLengthTo
54963>>>        Get_Attribute DF_FIELD_PRECISION            of hTable iColumn to iPrecTo
54966>>>            Get_Attribute DF_FIELD_IS_IDENTITY      of hTable iColumn to iOptionTo
54969>>>
54969>>>        // If one of the two tables are SQL and the other Embedded we need to "translate"
54969>>>        // data types between Embedded and SQL, else we can't compare the data types.
54969>>>        If (bIsSQLTableFrom = True and bIsSQLTableTo = False) Begin
54971>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iTypeFrom iLengthFrom to iTypeTo
54972>>>            If (iTypeTo = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
54974>>>                Move DF_DATE to iTypeTo  
54975>>>            End
54975>>>>
54975>>>        End
54975>>>>
54975>>>        Else If (bIsSQLTableFrom = False and bIsSQLTableTo = True) Begin
54978>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDTo   iDbType iTypeTo   iLengthTo   to iTypeFrom
54979>>>        End
54979>>>>
54979>>>        Move (iTypeFrom = iTypeTo) to bIsSameDataType
54980>>>
54980>>>        If (bCompareDate_DateTime = False) Begin
54982>>>            Move ((iTypeFrom = SQL_TYPE_DATE or iTypeFrom = SQL_TYPE_TIME or iTypeFrom = SQL_TYPE_TIMESTAMP) and (iTypeTo = SQL_TYPE_DATE or iTypeTo = SQL_TYPE_TIME or iTypeTo = SQL_TYPE_TIMESTAMP)) to bSkip
54983>>>            If (bSkip = True) Begin
54985>>>                If (sFieldNameFrom = sFieldNameTo and iLengthFrom = iLengthTo and iPrecFrom = iPrecTo and iOptionFrom = iOptionTo) Begin
54987>>>                    Function_Return True
54988>>>                End
54988>>>>
54988>>>            End
54988>>>>
54988>>>        End
54988>>>>
54988>>>        Else If (sFieldNameFrom = sFieldNameTo and iTypeFrom = iTypeTo and iLengthFrom = iLengthTo and iPrecFrom = iPrecTo and iOptionFrom = iOptionTo) Begin
54991>>>            Function_Return True
54992>>>        End
54992>>>>
54992>>>
54992>>>        Set Private.phCurrentTable to hTable
54993>>>        Set Private.piCurrentField to iColumn
54994>>>
54994>>>        Structure_Start hTable
54995>>>            If (sFieldNameFrom <> sFieldNameTo) Begin
54997>>>                Set_Attribute DF_FIELD_NAME             of hTable iColumn to sFieldNameFrom
55000>>>            End
55000>>>>
55000>>>
55000>>>            If (bIsSameDataType = False) Begin
55002>>>                Set_Attribute DF_FIELD_TYPE             of hTable iColumn to iDataFlexType
55005>>>                If (bIsSQLTableTo = True) Begin
55007>>>                        Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to iTypeFrom
55010>>>                End
55010>>>>
55010>>>            End
55010>>>>
55010>>>
55010>>>            If (iLengthFrom <> iLengthTo) Begin
55012>>>                Set_Attribute DF_FIELD_LENGTH           of hTable iColumn to iLengthFrom
55015>>>            End
55015>>>>
55015>>>            If (iPrecFrom <> iPrecTo) Begin
55017>>>                Set_Attribute DF_FIELD_PRECISION        of hTable iColumn to iPrecFrom
55020>>>            End
55020>>>>
55020>>>
55020>>>            If (bIsSQLTableTo = True and iOptionFrom =  C_tAPIColumn_Identity and iOptionTo <> C_tAPIColumn_Identity) Begin
55022>>>                // Can't set a recnum table to "DF_FIELD_IS_IDENTITY"
55022>>>                If (bRecnumTable = True) Begin
55024>>>                    Set_Attribute DF_FILE_RECNUM_TABLE  of hTable to False
55027>>>                End
55027>>>>
55027>>>
55027>>>                // We might need to create an index here.
55027>>>                // To be able to set the DF_FIELD_IS_IDENTITY the index must already exist, but it might not at this stage.
55027>>>                // This should probably fix that problem and if an adjustment is needed, it will get done with the normal
55027>>>                // index update checking logic.
55027>>>                Get_Attribute DF_FIELD_INDEX               of hTable iColumn to iIndex
55030>>>                If (iIndex = 0 and Uppercase(sFieldNameTo) <> "RECNUM") Begin
55032>>>                    Create_Index hTable At iIndex
55033>>>                    Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex   to 1
55036>>>                End
55036>>>>
55036>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD       of hTable iIndex 1 to iColumn
55039>>>                Set_Attribute DF_FILE_PRIMARY_INDEX        of hTable          to iIndex
55042>>>                    Set_Attribute DF_FIELD_IS_IDENTITY     of hTable iColumn  to True
55045>>>                If (bIsSQLTableTo = True) Begin
55047>>>                        Set_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable iIndex   to True
55050>>>                End
55050>>>>
55050>>>            End
55050>>>>
55050>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
55051>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55053>>>
55053>>>        Set Action_Text of ghoStatusPanel to ""
55054>>>        Function_Return (Err = False)
55055>>>    End_Function
55056>>>
55056>>>    Function ApiColumnChangeMainIndex Handle hTable Integer iIndex Integer iColumn Returns Boolean
55058>>>        Boolean bOK
55058>>>
55058>>>        Get AutoConnectionIDLogin to bOK
55059>>>        Move False to Err
55060>>>        Get OpenTableExclusive hTable to bOK
55061>>>        If (bOK = False) Begin
55063>>>            Function_Return False
55064>>>        End
55064>>>>
55064>>>
55064>>>        Structure_Start hTable
55065>>>            Set_Attribute DF_FIELD_INDEX of hTable iColumn to iIndex
55068>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
55069>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55071>>>
55071>>>        Set Action_Text of ghoStatusPanel to ""
55072>>>        Function_Return (Err = False)
55073>>>    End_Function
55074>>>
55074>>>    // To move an existing field to another position in a table.
55074>>>    Function ApiColumnMove Handle hTable Integer iOld Integer iNew Boolean bIsSQLType Integer iLength Integer iPrecision Returns Boolean
55076>>>        String sColumn sDriverID
55076>>>        Integer iType iSQLType
55076>>>        Boolean bOK bIsDate
55076>>>
55076>>>        Close hTable
55077>>>        Get AutoConnectionIDLogin to bOK
55078>>>        Get OpenTableExclusive hTable to bOK
55079>>>        If (bOK = False) Begin
55081>>>            Function_Return False
55082>>>        End
55082>>>>
55082>>>
55082>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
55085>>>        If (sDriverID = DFBTRDRV_ID) Begin
55087>>>            Error DFERR_PROGRAM "Function 'ColumnMove' is not supported for the Pervasive database."
55088>>>>
55088>>>            Function_Return False
55089>>>        End
55089>>>>
55089>>>
55089>>>        Set Action_Text of ghoStatusPanel to "Restructures table..."
55090>>>        Get_Attribute DF_FIELD_NAME of hTable iOld to sColumn
55093>>>        Get_Attribute DF_FIELD_TYPE of hTable iOld to iType
55096>>>        If (bIsSQLType = True) Begin
55098>>>            Get_Attribute DF_FIELD_NATIVE_TYPE of hTable iOld to iSQLType
55101>>>            Get UtilColumnIsDateType iSQLType bIsSQLType  to bIsDate
55102>>>        End
55102>>>>
55102>>>        Else Begin
55103>>>            Get UtilColumnIsDateType iType bIsSQLType  to bIsDate
55104>>>        End
55104>>>>
55104>>>
55104>>>        Set Private.phCurrentTable to hTable
55105>>>        Set Private.piCurrentField to iOld
55106>>>
55106>>>        Move False to Err
55107>>>
55107>>>        Structure_Start hTable
55108>>>            Delete_Field hTable iOld
55109>>>            Create_Field hTable At iNew
55110>>>            
55110>>>            // This one is the crucial line:
55110>>>            Set_Attribute DF_FIELD_OLD_NUMBER of hTable iNew to iOld
55113>>>            Set_Attribute DF_FIELD_NAME of hTable iNew to sColumn
55116>>>            
55116>>>            // If SQL table it is important that we don't try to change the field type, as MS-SQL then will generate an error.
55116>>>            If (bIsSQLType = True and bIsDate = False) Begin
55118>>>                Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iNew to iSQLType
55121>>>            End
55121>>>>
55121>>>            If (bIsDate = False) Begin
55123>>>                Set_Attribute DF_FIELD_TYPE   of hTable iNew to iType
55126>>>                Set_Attribute DF_FIELD_LENGTH of hTable iNew to iLength
55129>>>            End
55129>>>>
55129>>>            If (iType = DF_BCD) Begin
55131>>>                Set_Attribute DF_FIELD_PRECISION of hTable iNew to iPrecision
55134>>>            End
55134>>>>
55134>>>
55134>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55136>>>
55136>>>        Set Action_Text of ghoStatusPanel to ""
55137>>>        Move (not(Err)) to bOK
55138>>>        Move False to Err
55139>>>        Move 0 to LastErr
55140>>>        Function_Return bOK
55141>>>    End_Function 
55142>>>    
55142>>>    // Deletes a column name for the passed table number (and column number).
55142>>>    Function ApiColumnRemove Handle hTable String sFieldName Returns Boolean
55144>>>        Integer iColumn
55144>>>        Boolean bOK
55144>>>
55144>>>        Get AutoConnectionIDLogin to bOK
55145>>>        Move False to Err
55146>>>        Close hTable
55147>>>        Get OpenTableExclusive hTable to bOK
55148>>>        If (bOK = False) Begin
55150>>>            Function_Return False
55151>>>        End
55151>>>>
55151>>>
55151>>>        If (not(Err)) Begin
55153>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55154>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
55155>>>            Field_Map hTable sFieldName to iColumn
55157>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
55158>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
55159>>>            If (iColumn = 0) Begin
55161>>>                Move 0 to LastErr
55162>>>                Function_Return False
55163>>>            End
55163>>>>
55163>>>            Move False to Err
55164>>>
55164>>>            Set Private.phCurrentTable to hTable
55165>>>            Set Private.piCurrentField to iColumn
55166>>>
55166>>>            Structure_Start hTable
55167>>>                Delete_Field hTable iColumn
55168>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
55169>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55171>>>            Set Action_Text of ghoStatusPanel to ""
55172>>>        End
55172>>>>
55172>>>        Else Begin
55173>>>            Error DFERR_PROGRAM ("The table number:" * String(hTable) * "could not be opened exclusiv. This indicates the table is in use!")
55174>>>>
55174>>>        End
55174>>>>
55174>>>
55174>>>        Function_Return (Err = False)
55175>>>    End_Function
55176>>>
55176>>>    // Renames a field for the passed table number & old field name & new field name
55176>>>    // Returns True if no errors occured.
55176>>>    // Sample usage:
55176>>>    //   Get ColumnRename Quote.File_Number "ID#" "ID" to bOK
55176>>>    Function ApiColumnRename Integer hTable String sOldFieldName String sNewFieldName Returns Boolean
55178>>>        Integer iField
55178>>>        Boolean bOK bExists bIsOpen
55178>>>
55178>>>        Get UtilColumnExists hTable sNewFieldName to bExists
55179>>>        If (bExists = True) Begin
55181>>>            Function_Return False
55182>>>        End
55182>>>>
55182>>>
55182>>>        // Note: The Field_Map command does _not_ work if the table has been
55182>>>        //       opened exclusively, so we first open it in normal mode.
55182>>>        Close hTable
55183>>>        Open hTable
55185>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
55188>>>        If (bIsOpen = False) Begin
55190>>>            Function_Return False
55191>>>        End
55191>>>>
55191>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55192>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
55193>>>        Field_Map hTable sOldFieldName to iField
55195>>>        Send Trap_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
55196>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
55197>>>
55197>>>        Get AutoConnectionIDLogin to bOK
55198>>>        Get OpenTableExclusive hTable to bOK
55199>>>        If (bOK = False) Begin
55201>>>            Function_Return False
55202>>>        End
55202>>>>
55202>>>
55202>>>        Move False to Err
55203>>>        Send Ignore_Error of Error_Object_Id DFERR_DUPLICATE_FIELDNAME
55204>>>        Set Private.phCurrentTable to hTable
55205>>>        Set Private.piCurrentField to iField
55206>>>
55206>>>        If (iField > 0) Begin
55208>>>            Structure_Start hTable
55209>>>                Set_Attribute DF_FIELD_NAME of hTable iField to sNewFieldName
55212>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
55213>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55215>>>        End
55215>>>>
55215>>>        Else Begin
55216>>>            Move 0 to LastErr
55217>>>            Move False to Err
55218>>>        End
55218>>>>
55218>>>
55218>>>        Set Action_Text of ghoStatusPanel to ""
55219>>>        Send Trap_Error of Error_Object_Id DFERR_DUPLICATE_FIELDNAME
55220>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
55221>>>
55221>>>        Function_Return (Err = False)
55222>>>    End_Function
55223>>>
55223>>>    Function UtilColumnsCheckForInserts Handle hTable tAPIColumnCompare[] aAPIColumnCompare Returns tAPIColumnCompare[]
55225>>>        tAPIColumnCompare[] aAPIColumnsToInsert
55225>>>        tAPIColumnCompare[] aAPIColumnsToInsert
55226>>>        Integer iSize iCount iItem iFieldTo iNumberOfFieldsTo iColumnNumber
55226>>>        Boolean bRenameField
55226>>>
55226>>>        Open hTable
55228>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55229>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
55230>>>        Move (SizeOfArray(aAPIColumnCompare)) to iSize
55231>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumberOfFieldsTo
55234>>>        Move (iSize max iNumberOfFieldsTo) to iSize
55235>>>        Decrement iSize
55236>>>        for iCount from 0 to iSize
55242>>>>
55242>>>            If (Uppercase(aAPIColumnCompare[iCount].sFieldNameFrom) <> Uppercase(aAPIColumnCompare[iCount].sFieldNameTo)) Begin
55244>>>                Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55245>>>
55245>>>                Field_Map hTable aAPIColumnCompare[iCount].sFieldNameFrom to iFieldTo
55247>>>                If (aAPIColumnCompare[iCount].bExistsFrom = True and iFieldTo = 0) Begin
55249>>>                    Get UtilColumnExistsWithOtherNumber aAPIColumnCompare iCount to iColumnNumber
55250>>>                    Get UtilColumnShouldBeRenamed aAPIColumnCompare[iCount]      to bRenameField
55251>>>                    If (iColumnNumber = -1 and bRenameField = False) Begin
55253>>>                        Move aAPIColumnCompare[iCount].iFieldNumber     to aAPIColumnsToInsert[iItem].iFieldNumber
55254>>>                        Move aAPIColumnCompare[iCount].sFieldNameFrom   to aAPIColumnsToInsert[iItem].sFieldNameFrom
55255>>>                        Move aAPIColumnCompare[iCount].iTypeFrom        to aAPIColumnsToInsert[iItem].iTypeFrom
55256>>>                        Move aAPIColumnCompare[iCount].sTypeFrom        to aAPIColumnsToInsert[iItem].sTypeFrom
55257>>>                        Move aAPIColumnCompare[iCount].iLengthFrom      to aAPIColumnsToInsert[iItem].iLengthFrom
55258>>>                        Move aAPIColumnCompare[iCount].iPrecisionFrom   to aAPIColumnsToInsert[iItem].iPrecisionFrom
55259>>>                        Move aAPIColumnCompare[iCount].bIsSQLTypeFrom   to aAPIColumnsToInsert[iItem].bIsSQLTypeFrom
55260>>>                        Move aAPIColumnCompare[iCount].bIsSQLTypeTo     to aAPIColumnsToInsert[iItem].bIsSQLTypeTo
55261>>>                        Move True                                       to aAPIColumnsToInsert[iItem].bExistsFrom
55262>>>                        Move False                                      to aAPIColumnsToInsert[iItem].bExistsTo
55263>>>                        Increment iItem
55264>>>                    End
55264>>>>
55264>>>                End
55264>>>>
55264>>>            End
55264>>>>
55264>>>        Loop
55265>>>>
55265>>>
55265>>>        Move False to Err
55266>>>        Move 0 to LastErr
55267>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
55268>>>        Function_Return aAPIColumnsToInsert
55269>>>    End_Function
55270>>>
55270>>>    Function UtilColumnsInsert String sDriverIDFrom Handle hTable tAPIColumnCompare[] aAPIColumnsToInsert Returns Boolean
55272>>>        Integer iSize iCount
55272>>>        Boolean bOK
55272>>>        tAPIColumn[] aColumnsTo
55272>>>        tAPIColumn[] aColumnsTo
55273>>>        tAPIColumnCompare[] aAPIColumnCompare
55273>>>        tAPIColumnCompare[] aAPIColumnCompare
55274>>>
55274>>>        Move (SizeOfArray(aAPIColumnsToInsert)) to iSize
55275>>>        If (iSize = 0) Begin
55277>>>            Function_Return True
55278>>>        End
55278>>>>
55278>>>
55278>>>        Move False to Err
55279>>>        Decrement iSize
55280>>>        for iCount from 0 to iSize
55286>>>>
55286>>>            Get ApiColumnInsert sDriverIDFrom hTable aAPIColumnsToInsert[iCount].iFieldNumber aAPIColumnsToInsert[iCount].sFieldNameFrom aAPIColumnsToInsert[iCount].iTypeFrom aAPIColumnsToInsert[iCount].iLengthFrom aAPIColumnsToInsert[iCount].iPrecisionFrom aAPIColumnsToInsert[iCount].bIsSQLTypeFrom to bOK
55287>>>        Loop
55288>>>>
55288>>>
55288>>>        Function_Return bOK
55289>>>    End_Function
55290>>>
55290>>>    // Returns a struct array with fields that has the same names but different field numbers.
55290>>>    Function UtilColumnsCheckForMoves Handle hTable tAPIColumnCompare[] aAPIColumnCompare Returns tAPIColumnCompare[]
55292>>>        tAPIColumnCompare[] aAPIColumnsToMove
55292>>>        tAPIColumnCompare[] aAPIColumnsToMove
55293>>>        Integer iSize iCount iItem iShouldMove
55293>>>
55293>>>        Move 0 to iItem
55294>>>        Move (SizeOfArray(aAPIColumnCompare)) to iSize
55295>>>        Decrement iSize
55296>>>        for iCount from 0 to iSize
55302>>>>
55302>>>            If (Uppercase(aAPIColumnCompare[iCount].sFieldNameFrom) <> Uppercase(aAPIColumnCompare[iCount].sFieldNameTo)) Begin
55304>>>                Get UtilColumnExistsWithOtherNumber aAPIColumnCompare iCount to iShouldMove
55305>>>                If (iShouldMove <> -1) Begin
55307>>>                    Move aAPIColumnCompare[iCount] to aAPIColumnsToMove[iItem]
55308>>>                    Move iShouldMove               to aAPIColumnsToMove[iItem].iFieldNumberTo
55309>>>                    Move aAPIColumnCompare[iShouldMove - 1].sFieldNameTo to aAPIColumnsToMove[iItem].sFieldNameTo
55310>>>                    Increment iItem
55311>>>                End
55311>>>>
55311>>>            End
55311>>>>
55311>>>        Loop
55312>>>>
55312>>>
55312>>>        Move False to Err
55313>>>        Move 0 to LastErr
55314>>>        Function_Return aAPIColumnsToMove
55315>>>    End_Function
55316>>>
55316>>>    Function UtilColumnsMove Handle hTable tAPIColumn[] aColumnsFrom tAPIColumn[] aColumnsTo tAPIColumnCompare[] aAPIColumnsToMove Returns Boolean
55318>>>        Integer iSize iCount
55318>>>        Boolean bOK
55318>>>        tAPIColumnCompare[] aAPIColumnCompare
55318>>>        tAPIColumnCompare[] aAPIColumnCompare
55319>>>
55319>>>        Move (SizeOfArray(aAPIColumnsToMove)) to iSize
55320>>>        If (iSize = 0) Begin
55322>>>            Function_Return True
55323>>>        End
55323>>>>
55323>>>
55323>>>        Move False to Err
55324>>>        Decrement iSize
55325>>>        for iCount from 0 to iSize
55331>>>>
55331>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55332>>>            If (aAPIColumnsToMove[iCount].bExistsFrom = True and aAPIColumnsToMove[iCount].bExistsTo = True) Begin
55334>>>                Get ApiColumnMove hTable aAPIColumnsToMove[iCount].iFieldNumberTo aAPIColumnsToMove[iCount].iFieldNumber aAPIColumnsToMove[iCount].bIsSQLTypeFrom aAPIColumnsToMove[iCount].iLengthFrom aAPIColumnsToMove[iCount].iPrecisionFrom to bOK
55335>>>                If (bOK = True) Begin
55337>>>                    Get UtilColumnsStructFill hTable to aColumnsTo
55338>>>                    Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
55339>>>                    Get UtilColumnsCheckForMoves hTable aAPIColumnCompare to aAPIColumnsToMove
55340>>>                    If (SizeOfArray(aAPIColumnsToMove)) Begin
55342>>>                        Move (SizeOfArray(aAPIColumnsToMove)) to iSize
55343>>>                        Decrement iSize
55344>>>                        Move 0 to iCount
55345>>>                    End
55345>>>>
55345>>>                End
55345>>>>
55345>>>                Else Begin
55346>>>                    Move iSize to iCount // We're out of here! Else there will be an error generated for each field.
55347>>>                End
55347>>>>
55347>>>            End
55347>>>>
55347>>>        Loop
55348>>>>
55348>>>
55348>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
55349>>>        If (LastErr = DFERR_ARRAY_INDEX_OUT_OF_BOUNDS) Begin
55351>>>            Move 0 to LastErr
55352>>>        End
55352>>>>
55352>>>        Function_Return bOK
55353>>>    End_Function
55354>>>
55354>>>    // Takes a tAPIColumnCompare struct as parameter and returns True if;
55354>>>    // - Field Numbers, Data Types, Lengths and Precisions are all equal.
55354>>>    // - The "FROM" field name is <> "TO" field name
55354>>>    // - The "FROM" field name also exists in the "TO" table; or the "TO" is part
55354>>>    //   of the "FROM" field name. E.g. "FROM" = LATEST_REPL_COST_DATE, "TO" = Latest_Repl_Cos would results in a TRUE.
55354>>>    Function UtilColumnShouldBeRenamed tAPIColumnCompare aAPIColumnCompare Returns Boolean
55356>>>        Boolean bShouldRename
55356>>>        String sFieldNameFrom sFieldNameTo
55356>>>
55356>>>        Move (Uppercase(aAPIColumnCompare.sFieldNameFrom)) to sFieldNameFrom
55357>>>        Move (Uppercase(aAPIColumnCompare.sFieldNameTo))   to sFieldNameTo
55358>>>        If (sFieldNameFrom = sFieldNameTo) Begin
55360>>>            Function_Return False
55361>>>        End
55361>>>>
55361>>>
55361>>>        Move (aAPIColumnCompare.bExistsFrom    = aAPIColumnCompare.bExistsTo      and ;              aAPIColumnCompare.iFieldNumber   = aAPIColumnCompare.iFieldNumberTo and ;              aAPIColumnCompare.iTypeFrom      = aAPIColumnCompare.iTypeTo        and ;              aAPIColumnCompare.iLengthFrom    = aAPIColumnCompare.iLengthTo      and ;              aAPIColumnCompare.iPrecisionFrom = aAPIColumnCompare.iPrecisionTo   and ;              aAPIColumnCompare.iOptionsFrom   = aAPIColumnCompare.iOptionsTo) to bShouldRename
55362>>>//        If (bShouldRename = False) Begin
55362>>>//            Function_Return False
55362>>>//        End
55362>>>//
55362>>>//        If (sFieldNameFrom contains sFieldNameTo) Begin
55362>>>//            Function_Return True
55362>>>//        End
55362>>>
55362>>>        Function_Return bShouldRename
55363>>>    End_Function
55364>>>
55364>>>    // Returns -1 if the passed iColumn number doesn't exist with the same name in the aAPIColumnCompare struct array.
55364>>>    // Else it returns the column/field number of the field that exists in another position.
55364>>>    Function UtilColumnExistsWithOtherNumber tAPIColumnCompare[] aAPIColumnCompare Integer iColumn Returns Integer
55366>>>        Integer iCount iSize iRetval
55366>>>        String sFieldNameFrom
55366>>>
55366>>>        Move -1 to iRetval
55367>>>        If (aAPIColumnCompare[iColumn].bExistsFrom = False or aAPIColumnCompare[iColumn].bExistsTo = False) Begin
55369>>>            Function_Return iRetval
55370>>>        End
55370>>>>
55370>>>
55370>>>        Move (Uppercase(aAPIColumnCompare[iColumn].sFieldNameFrom)) to sFieldNameFrom
55371>>>        Move (SizeOfArray(aAPIColumnCompare)) to iSize
55372>>>        Decrement iSize
55373>>>        for iCount from 0 to iSize
55379>>>>
55379>>>            // We're only interested in fields other than the passed field/column number:
55379>>>            If (iCount <> iColumn) Begin
55381>>>                If (Uppercase(aAPIColumnCompare[iCount].sFieldNameTo) = sFieldNameFrom) Begin
55383>>>                    Move (iCount + 1) to iRetval
55384>>>                End
55384>>>>
55384>>>            End
55384>>>>
55384>>>        Loop
55385>>>>
55385>>>
55385>>>        Move 0 to LastErr
55386>>>        Function_Return iRetval
55387>>>    End_Function
55388>>>
55388>>>    Function UtilColumnsCheckForRenames Handle hTable tAPIColumnCompare[] aAPIColumnCompare Returns tAPIColumnCompare[]
55390>>>        tAPIColumnCompare[] aAPIColumnsToRename
55390>>>        tAPIColumnCompare[] aAPIColumnsToRename
55391>>>        Integer iSize iCount iItem iFieldTo iShouldMove
55391>>>        Boolean bRenameField
55391>>>
55391>>>        Open hTable
55393>>>        Move 0 to iItem
55394>>>        Move (SizeOfArray(aAPIColumnCompare)) to iSize
55395>>>        Decrement iSize
55396>>>        for iCount from 0 to iSize
55402>>>>
55402>>>            If (Uppercase(aAPIColumnCompare[iCount].sFieldNameFrom) <> Uppercase(aAPIColumnCompare[iCount].sFieldNameTo)) Begin
55404>>>                // Check if the field exists in another position (other field number)
55404>>>                Get UtilColumnExistsWithOtherNumber aAPIColumnCompare iCount to iShouldMove
55405>>>                Get UtilColumnShouldBeRenamed aAPIColumnCompare[iCount] to bRenameField
55406>>>                If (aAPIColumnCompare[iCount].bExistsFrom = True and iShouldMove = -1 and bRenameField = True) Begin
55408>>>                    Move aAPIColumnCompare[iCount].iFieldNumber     to aAPIColumnsToRename[iItem].iFieldNumber
55409>>>                    Move iFieldTo                                   to aAPIColumnsToRename[iItem].iFieldNumberTo
55410>>>                    Move aAPIColumnCompare[iCount].sFieldNameFrom   to aAPIColumnsToRename[iItem].sFieldNameFrom
55411>>>                    Move aAPIColumnCompare[iCount].sFieldNameTo     to aAPIColumnsToRename[iItem].sFieldNameTo
55412>>>                    Increment iItem
55413>>>                End
55413>>>>
55413>>>            End
55413>>>>
55413>>>        Loop
55414>>>>
55414>>>
55414>>>        Move False to Err
55415>>>        Move 0 to LastErr
55416>>>        Function_Return aAPIColumnsToRename
55417>>>    End_Function
55418>>>
55418>>>    Function UtilColumnsRename Handle hTable tAPIColumnCompare[] aAPIColumnsToRename Returns Boolean
55420>>>        Integer iSize iCount
55420>>>        Boolean bOK
55420>>>        tAPIColumn[] aColumnsTo
55420>>>        tAPIColumn[] aColumnsTo
55421>>>        tAPIColumnCompare[] aAPIColumnCompare
55421>>>        tAPIColumnCompare[] aAPIColumnCompare
55422>>>
55422>>>        Move (SizeOfArray(aAPIColumnsToRename)) to iSize
55423>>>        If (iSize = 0) Begin
55425>>>            Function_Return True
55426>>>        End
55426>>>>
55426>>>
55426>>>        Move False to Err
55427>>>        Decrement iSize
55428>>>        For iCount from 0 to iSize
55434>>>>
55434>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55435>>>            Get ApiColumnRename hTable aAPIColumnsToRename[iCount].sFieldNameTo aAPIColumnsToRename[iCount].sFieldNameFrom to bOK
55436>>>        Loop
55437>>>>
55437>>>
55437>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
55438>>>        Function_Return bOK
55439>>>    End_Function
55440>>>
55440>>>    Function UtilColumnIsDateType Integer iType Boolean bIsSQLTableTo Returns Boolean
55442>>>        Boolean bDateType
55442>>>
55442>>>        If (bIsSQLTableTo = True) Begin
55444>>>            Move (iType = SQL_DATE or iType = SQL_TYPE_DATE or iType = SQL_TYPE_TIMESTAMP or iType = SQL_TYPE_TIMESTAMP2) to bDateType
55445>>>        End
55445>>>>
55445>>>        Else Begin
55446>>>            Move (iType = DF_DATE or iType = DF_DATETIME) to bDateType
55447>>>        End
55447>>>>
55447>>>
55447>>>        Function_Return bDateType
55448>>>    End_Function
55449>>>
55449>>>    Function ApiColumnsUpdate String sDriverIDFrom Handle hTable Boolean bIsSQLTableFrom tAPIColumn[] aColumnsFrom tAPIColumn[] aColumnsTo Boolean bCompareDate_DateTime Returns Boolean
55451>>>        Integer iCount iColumns iColumn iTypeFrom iTypeTo iDataFlexType iIndex iLengthFrom iLengthTo iPrecisionFrom iPrecisionTo iOptionFrom iOptionTo iDbType
55451>>>        Integer iCount2 iColumn2
55451>>>        Handle hFile
55451>>>        Boolean bFieldExistsFrom bFieldExistsTo bIsSQLDriver bIsSame bOK bSkip
55451>>>        Boolean bRecnum bIsSQLTableTo bRecnumTable bIsOpen bSkipTypeChange bIsDateType
55451>>>        String sFieldNameFrom sFieldNameTo sDriverIDTo sDefaultValue
55451>>>        tAPIColumnCompare[] aAPIColumnCompare aApiInsertColumns aAPIMoveColumns aAPIRenameColumns aAPIRemoveColumns
55451>>>        tAPIColumnCompare[] aAPIColumnCompare aApiInsertColumns aAPIMoveColumns aAPIRenameColumns aAPIRemoveColumns
55456>>>        tColumnType ColumnType
55456>>>        tColumnType ColumnType
55456>>>
55456>>>        Move False to Err
55457>>>        Close hTable
55458>>>        Get OpenTableExclusive hTable to bIsOpen
55459>>>        If (bIsOpen = False) Begin
55461>>>            Error DFERR_PROGRAM ("Function 'ApiColumnsUpdate'. Can't open table number:" * String(hTable))
55462>>>>
55462>>>            Function_Return False
55463>>>        End 
55463>>>>
55463>>>        
55463>>>        Get piDbType to iDbType
55464>>>        Get_Attribute DF_FILE_RECNUM_TABLE of hTable to bRecnumTable
55467>>>        Move bIsSQLTableFrom to bIsSQLDriver
55468>>>        Get _UtilTableIsSql hTable to bIsSQLTableTo
55469>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverIDTo
55472>>>
55472>>>        Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
55473>>>
55473>>>        // Before we start to change the table we need to do three things;
55473>>>        // 1) Insert any new fields
55473>>>        Get UtilColumnsCheckForInserts hTable aAPIColumnCompare to aApiInsertColumns
55474>>>        If (SizeOfArray(aApiInsertColumns)) Begin
55476>>>            Get UtilColumnsInsert sDriverIDFrom hTable aApiInsertColumns to bOK
55477>>>            If (bOK = False) Begin
55479>>>                Function_Return False
55480>>>            End
55480>>>>
55480>>>            // Update info with changes made.
55480>>>            Get UtilColumnsStructFill hTable to aColumnsTo
55481>>>            Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
55482>>>        End
55482>>>>
55482>>>
55482>>>        // 2) Move fields with same names
55482>>>        Get UtilColumnsCheckForMoves hTable aAPIColumnCompare to aAPIMoveColumns
55483>>>        If (SizeOfArray(aAPIMoveColumns)) Begin
55485>>>            Get UtilColumnsMove hTable aColumnsFrom aColumnsTo aAPIMoveColumns to bOK
55486>>>            If (bOK = False) Begin
55488>>>                Function_Return False
55489>>>            End
55489>>>>
55489>>>            Get UtilColumnsStructFill hTable to aColumnsTo
55490>>>            Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
55491>>>        End
55491>>>>
55491>>>        
55491>>>        // 3) Rename fields
55491>>>        Get UtilColumnsCheckForRenames hTable aAPIColumnCompare to aAPIRenameColumns
55492>>>        If (SizeOfArray(aAPIRenameColumns)) Begin
55494>>>            Get UtilColumnsRename hTable aAPIRenameColumns to bOK
55495>>>            If (bOK = False) Begin
55497>>>                Function_Return False
55498>>>            End
55498>>>>
55498>>>            Get UtilColumnsStructFill hTable to aColumnsTo
55499>>>            Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
55500>>>        End
55500>>>>
55500>>>
55500>>>        // Note: Fields will be removed if needed in the Structure_Start/End below.
55500>>>        // Get utilColumnsCheckForRemoves hTable aAPIColumnCompare to aAPIRemoveColumns
55500>>>
55500>>>        // If any of the fields were changed by "Insert", "Rename" or "Move", we need to compare the fields again:
55500>>>        If (SizeOfArray(aApiInsertColumns) or SizeOfArray(aAPIRenameColumns) or SizeOfArray(aAPIMoveColumns)) Begin
55502>>>            Get UtilColumnsCompare sDriverIDFrom sDriverIDTo bIsSQLTableFrom bIsSQLTableTo aAPIColumnCompare bCompareDate_DateTime to bIsSame
55503>>>            If (bIsSame = True) Begin
55505>>>                Function_Return True
55506>>>            End
55506>>>>
55506>>>        End
55506>>>>
55506>>>
55506>>>        Move False to Err
55507>>>        // We can now continue to make standard field changes:
55507>>>        Get OpenTableExclusive hTable to bIsOpen
55508>>>        Set Private.phCurrentTable to hTable
55509>>>        Move hTable to hFile
55510>>>        Structure_Start hFile sDriverIDTo
55511>>>
55511>>>            Move (SizeOfArray(aAPIColumnCompare)) to iColumns
55512>>>            Decrement iColumns
55513>>>            for iCount from 0 to iColumns
55519>>>>
55519>>>                Send DoAdvance of ghoProgressBar
55520>>>
55520>>>                Move aAPIColumnCompare[iCount].iFieldNumber to iColumn
55521>>>                Set Private.piCurrentField                  to iColumn
55522>>>                Get UtilColumnCompare sDriverIDFrom sDriverIDTo bIsSQLTableFrom aAPIColumnCompare[iCount].bIsSQLTypeTo aAPIColumnCompare[iCount] bCompareDate_DateTime to bIsSame
55523>>>                If (bIsSame = False) Begin
55525>>>
55525>>>                    Move aAPIColumnCompare[iCount].bExistsFrom          to bFieldExistsFrom
55526>>>                    If (bFieldExistsFrom = True) Begin
55528>>>                        Move aAPIColumnCompare[iCount].bExistsTo        to bFieldExistsTo
55529>>>                        Move aAPIColumnCompare[iCount].sFieldNameFrom   to sFieldNameFrom
55530>>>                        Move aAPIColumnCompare[iCount].iLengthFrom      to iLengthFrom
55531>>>                        Move aAPIColumnCompare[iCount].iPrecisionFrom   to iPrecisionFrom
55532>>>                        Move aAPIColumnCompare[iCount].iOptionsFrom     to iOptionFrom
55533>>>                        Move aAPIColumnCompare[iCount].iTypeFrom        to iTypeFrom
55534>>>
55534>>>                        Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iTypeFrom iLengthFrom to iDataFlexType
55535>>>                        If (iTypeFrom < -1490) Begin
55537>>>                            Move (iTypeFrom + 1500)                     to iTypeFrom
55538>>>                        End
55538>>>>
55538>>>
55538>>>                        // If one of the two tables are SQL and the other Embedded we need to "translate"
55538>>>                        // data types between Embedded and SQL, else we can't compare the data types.
55538>>>                        If (bIsSQLTableFrom = True and bIsSQLTableTo = False) Begin
55540>>>                            Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iTypeFrom iLengthFrom to iTypeFrom
55541>>>                            If (iTypeFrom = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
55543>>>                                Move DF_DATE to iTypeFrom
55544>>>                            End
55544>>>>
55544>>>                        End
55544>>>>
55544>>>                        Else If (bIsSQLTableFrom = False and bIsSQLTableTo = True) Begin
55547>>>                            Get UtilSqlColumnTypeToDataFlexType sDriverIDTo   iDbType iTypeTo   iLengthTo   to iTypeTo
55548>>>                        End
55548>>>>
55548>>>
55548>>>                        Move aAPIColumnCompare[iCount].sFieldNameTo to sFieldNameTo
55549>>>                        Move aAPIColumnCompare[iCount].iLengthTo    to iLengthTo
55550>>>                        Move aAPIColumnCompare[iCount].iPrecisionTo to iPrecisionTo
55551>>>                        Move aAPIColumnCompare[iCount].iOptionsTo   to iOptionTo
55552>>>                        Move aAPIColumnCompare[iCount].iTypeTo      to iTypeTo
55553>>>
55553>>>                        Move False to bSkipTypeChange
55554>>>                        If (bCompareDate_DateTime = False) Begin
55556>>>                            Move ((iTypeFrom = SQL_TYPE_DATE or iTypeFrom = SQL_TYPE_TIME or iTypeFrom = SQL_TYPE_TIMESTAMP) and (iTypeTo = SQL_TYPE_DATE or iTypeTo = SQL_TYPE_TIME or iTypeTo = SQL_TYPE_TIMESTAMP)) to bSkipTypeChange
55557>>>                        End
55557>>>>
55557>>>
55557>>>                        If (bFieldExistsTo = False) Begin
55559>>>                            Move 0 to iColumn
55560>>>                            Create_Field hFile At iColumn
55561>>>                            Set Private.piCurrentField to iColumn
55562>>>                        End
55562>>>>
55562>>>
55562>>>                        If (sFieldNameFrom <> sFieldNameTo) Begin
55564>>>                            Set_Attribute DF_FIELD_NAME of hFile iColumn to sFieldNameFrom
55567>>>                        End
55567>>>>
55567>>>
55567>>>                        // Note: In MS-SQL it is vital that *nothing* gets changed for e.g. a "datetime" column, else error: 22018 is generated by the SQL backend:
55567>>>                        //       "Explicit conversion from data type int to datetime2 is not allowed", which will make the update to fail, and all changes for the table is rollbacked. 
55567>>>                        If (bIsSQLTableFrom = True and bIsSQLTableTo = True and aAPIColumnCompare[iCount].iOptionsFrom <> C_tAPIColumn_Identity and bSkipTypeChange = False) Begin
55569>>>                            Set_Attribute DF_FIELD_NULL_ALLOWED  of hFile iColumn to aAPIColumnCompare[iCount].bAllowNULLFrom
55572>>>                            Move aAPIColumnCompare[iCount].sDefaultValueFrom to sDefaultValue
55573>>>                            If (iDataFlexType = DF_BCD and Left(String(sDefaultValue), 1) <> "[") Begin
55575>>>                                Move ("[" + String(sDefaultValue) + "]") to sDefaultValue
55576>>>                            End
55576>>>>
55576>>>                            Set_Attribute DF_FIELD_DEFAULT_VALUE of hFile iColumn to sDefaultValue
55579>>>                        End
55579>>>>
55579>>>
55579>>>                        If (bSkipTypeChange = False) Begin
55581>>>                            If (iTypeFrom <> iTypeTo) Begin
55583>>>                                If (bIsSQLTableTo = True) Begin
55585>>>                                    Set_Attribute DF_FIELD_NATIVE_TYPE of hFile iColumn to iTypeFrom
55588>>>                                End
55588>>>>
55588>>>                                Else Begin                                                   
55589>>>                                    If (iDataFlexType = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
55591>>>                                        Move DF_DATE to iDataFlexType  // Date
55592>>>                                    End
55592>>>>
55592>>>                                    Set_Attribute DF_FIELD_TYPE of hFile iColumn to iDataFlexType
55595>>>                                End
55595>>>>
55595>>>                            End
55595>>>>
55595>>>                        End
55595>>>>
55595>>>
55595>>>                        Get UtilColumnIsDateType iTypeFrom bIsSQLTableTo to bIsDateType
55596>>>                        // We can't set the length or precision for Date type columns (they are fixed).
55596>>>                        If (bIsDateType = False and iLengthFrom <> iLengthTo) Begin
55598>>>                            Set_Attribute DF_FIELD_LENGTH of hFile iColumn to iLengthFrom
55601>>>                        End
55601>>>>
55601>>>                        // We do want to set the precision for e.g. DateTime2 (can be 3 or 7, but DataFlex can just handle "3").
55601>>>                        If (iPrecisionFrom <> iPrecisionTo) Begin
55603>>>                            Set_Attribute DF_FIELD_PRECISION of hFile iColumn to iPrecisionFrom
55606>>>                        End
55606>>>>
55606>>>
55606>>>                        If (bIsSQLTableTo = True and iOptionFrom =  C_tAPIColumn_Identity and iOptionTo <> C_tAPIColumn_Identity) Begin
55608>>>                            // Can't set a recnum table to "DF_FIELD_IS_IDENTITY"
55608>>>                            If (bRecnumTable = True) Begin
55610>>>                                Set_Attribute DF_FILE_RECNUM_TABLE of hTable to False
55613>>>                            End
55613>>>>
55613>>>
55613>>>                            // We might need to create an index here.
55613>>>                            // To be able to set the DF_FIELD_IS_IDENTITY the index must already exist, but it might not at this stage.
55613>>>                            // This should probably fix that problem and if an adjustment is needed, it will get done with the normal
55613>>>                            // index update checking logic.
55613>>>                            Get_Attribute DF_FIELD_INDEX           of hFile iColumn to iIndex
55616>>>                            If (iIndex = 0 and Uppercase(sFieldNameTo) <> "RECNUM") Begin
55618>>>                                Create_Index hFile at iIndex
55619>>>                                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hFile iIndex to 1
55622>>>                            End
55622>>>>
55622>>>
55622>>>                            Set_Attribute DF_INDEX_SEGMENT_FIELD   of hFile iIndex 1 to iColumn
55625>>>                            Set_Attribute DF_FILE_PRIMARY_INDEX    of hFile          to iIndex
55628>>>                                // Note: The order here is crucial!
55628>>>                                Set_Attribute DF_INDEX_SQL_PRIMARY_KEY of hFile iIndex to True
55631>>>                                Set_Attribute DF_FIELD_IS_IDENTITY of hFile iColumn    to True
55634>>>                        End
55634>>>>
55634>>>                    End
55634>>>>
55634>>>                    Else Begin
55635>>>                        Delete_Field hFile iColumn
55636>>>                        Move (RemoveFromArray(aColumnsTo, iCount)) to aColumnsTo
55637>>>                        Move (SizeOfArray(aColumnsTo)) to iCount2
55638>>>                        Decrement iCount2
55639>>>                        // We need to adjust FieldNumbers in the array with one, as we just deleted a field,
55639>>>                        // starting with the array number we just deleted the field for.
55639>>>                        for iColumn2 from iCount to iCount2
55645>>>>
55645>>>                            Move (aColumnsTo[iColumn2].iFieldNumber - 1) to aColumnsTo[iColumn2].iFieldNumber
55646>>>                        Loop
55647>>>>
55647>>>                        Decrement iCount
55648>>>                        Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
55649>>>                        Move (SizeOfArray(aAPIColumnCompare)) to iColumns
55650>>>                        If (SizeOfArray(aColumnsFrom) = SizeOfArray(aColumnsTo)) Begin
55652>>>                            Move iColumns to iCount 
55653>>>                        End
55653>>>>
55653>>>                    End
55653>>>>
55653>>>                End 
55653>>>>
55653>>>                If (Err = True) Begin 
55655>>>                    Move False to bOK
55656>>>                    Move iColumns to iCount
55657>>>                End
55657>>>>
55657>>>            Loop
55658>>>>
55658>>>
55658>>>            Set Action_Text of ghoStatusPanel to "Restructuring table..."
55659>>>        Structure_End hFile DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55661>>>
55661>>>        Set Action_Text of ghoStatusPanel to ""
55662>>>        Function_Return (Not(Err))
55663>>>    End_Function
55664>>>
55664>>>    // * Dummy function for the Studio's Code Explorer *
55664>>>    Function API_INDEX_FUNCTIONS Returns Boolean
55666>>>        Function_Return False
55667>>>    End_Function
55668>>>
55668>>>    // Get ApiIndexCreate Customers.File_Number 1 2 0 1 -1 -1 -1 -1 -1 -1 -1 -1 to bOK
55668>>>    // Note: the "-1" can be left out as this function is overloaded to make it easier to call.
55668>>>    // Note: This doesn't set Descending attributes - Use function IndexChangeDirection to do that.
55668>>>    Function ApiIndexCreate Handle hTable Integer iIndex Integer iSegments Integer iSgmnt1 Integer iSgmnt2 Integer iSgmnt3 Integer iSgmnt4 Integer iSgmnt5 Integer iSgmnt6 Integer iSgmnt7 Integer iSgmnt8 Integer iSgmnt9 Integer iSgmnt10 Returns Boolean
55670>>>        Integer iTableNo iSegment1 iSegment2 iSegment3 iSegment4 iSegment5 iSegment6 iSegment7 iSegment8 iSegment9 iSegment10  iIndexSegments
55670>>>        String sDriverID
55670>>>        Boolean bOK bExists bIsSQLTable
55670>>>
55670>>>        Get AutoConnectionIDLogin to bOK
55671>>>        Get OpenTableExclusive hTable to bOK
55672>>>        If (bOK = False) Begin
55674>>>            Function_Return False
55675>>>        End
55675>>>>
55675>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
55678>>>
55678>>>            Get _UtilTableIsSql hTable to bIsSQLTable
55679>>>            If (bIsSQLTable = True) Begin
55681>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
55684>>>            End
55684>>>>
55684>>>
55684>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iIndexSegments
55687>>>        Move (iIndexSegments > 0) to bExists
55688>>>        If (bExists = True) Begin
55690>>>            Function_Return True
55691>>>        End
55691>>>>
55691>>>
55691>>>        Move -1 to iSegment1
55692>>>        Move -1 to iSegment2
55693>>>        Move -1 to iSegment3
55694>>>        Move -1 to iSegment4
55695>>>        Move -1 to iSegment5
55696>>>        Move -1 to iSegment6
55697>>>        Move -1 to iSegment7
55698>>>        Move -1 to iSegment8
55699>>>        Move -1 to iSegment9
55700>>>        Move -1 to iSegment10
55701>>>
55701>>>        If (num_arguments > 3) Begin
55703>>>            Move iSgmnt1 to iSegment1
55704>>>        End
55704>>>>
55704>>>        If (num_arguments > 4) Begin
55706>>>            Move iSgmnt2 to iSegment2
55707>>>        End
55707>>>>
55707>>>        If (num_arguments > 5) Begin
55709>>>            Move iSgmnt3 to iSegment3
55710>>>        End
55710>>>>
55710>>>        If (num_arguments > 6) Begin
55712>>>            Move iSgmnt4 to iSegment4
55713>>>        End
55713>>>>
55713>>>        If (num_arguments > 7) Begin
55715>>>            Move iSgmnt5 to iSegment5
55716>>>        End
55716>>>>
55716>>>        If (num_arguments > 8) Begin
55718>>>            Move iSgmnt6 to iSegment6
55719>>>        End
55719>>>>
55719>>>        If (num_arguments > 9) Begin
55721>>>            Move iSgmnt7 to iSegment7
55722>>>        End
55722>>>>
55722>>>        If (num_arguments > 10) Begin
55724>>>            Move iSgmnt8 to iSegment8
55725>>>        End
55725>>>>
55725>>>        If (num_arguments > 11) Begin
55727>>>            Move iSgmnt9 to iSegment9
55728>>>        End
55728>>>>
55728>>>        If (num_arguments > 12) Begin
55730>>>            Move iSgmnt10 to iSegment10
55731>>>        End
55731>>>>
55731>>>
55731>>>        Move False to Err
55732>>>        Move hTable to iTableNo
55733>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55734>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_PARAMETER
55735>>>        Send Ignore_Error of Error_Object_Id DFERR_NON_FATAL_RESTRUCTURE_ERROR
55736>>>
55736>>>        // We start by deleting the index, if it exists.
55736>>>        If (bExists = True) Begin
55738>>>            Structure_Start hTable sDriverID
55739>>>                Delete_Index iTableNo iIndex
55740>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
55741>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55743>>>        End
55743>>>>
55743>>>
55743>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
55744>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_PARAMETER
55745>>>        Send Trap_Error of Error_Object_Id DFERR_NON_FATAL_RESTRUCTURE_ERROR
55746>>>        Set Action_Text of ghoStatusPanel to ""
55747>>>        Move False to Err
55748>>>        Move 0 to LastErr
55749>>>
55749>>>        // Need to re-open if index deleted.
55749>>>        Move iTableNo to hTable
55750>>>        Get OpenTableExclusive hTable to bOK
55751>>>        If (bOK = False) Begin
55753>>>            Function_Return False
55754>>>        End
55754>>>>
55754>>>
55754>>>        Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
55755>>>        Structure_Start hTable sDriverID
55756>>>            Create_Index hTable At iIndex
55757>>>            Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iSegments
55760>>>
55760>>>            If (iSgmnt1 <> -1) Begin
55762>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 1 to iSegment1
55765>>>            End
55765>>>>
55765>>>            If (iSegment2 <> -1) Begin
55767>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 2 to iSegment2
55770>>>            End
55770>>>>
55770>>>            If (iSegment3 <> -1) Begin
55772>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 3 to iSegment3
55775>>>            End
55775>>>>
55775>>>            If (iSegment4 <> -1) Begin
55777>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 4 to iSegment4
55780>>>            End
55780>>>>
55780>>>            If (iSegment5 <> -1) Begin
55782>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 5 to iSegment5
55785>>>            End
55785>>>>
55785>>>            If (iSegment6 <> -1) Begin
55787>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 6 to iSegment6
55790>>>            End
55790>>>>
55790>>>            If (iSegment7 <> -1) Begin
55792>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 7 to iSegment7
55795>>>            End
55795>>>>
55795>>>            If (iSegment8 <> -1) Begin
55797>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 8 to iSegment8
55800>>>            End
55800>>>>
55800>>>            If (iSegment9 <> -1) Begin
55802>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 9 to iSegment9
55805>>>            End
55805>>>>
55805>>>            If (iSegment10 <> -1) Begin
55807>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 10 to iSegment10
55810>>>            End
55810>>>>
55810>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
55811>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55813>>>
55813>>>        Set Action_Text of ghoStatusPanel to ""
55814>>>        Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
55815>>>
55815>>>        Function_Return (Err = False)
55816>>>    End_Function
55817>>>
55817>>>    // Example:
55817>>>    // Get ApiIndexCreateEx hTable 1 (StrSplitToArray("1,5,6,7,8,2,3,4,10,9,11", ",")) to bOk
55817>>>    // Note: The StrSplitToArray function was introduced with DataFlex 18.2
55817>>>    Function ApiIndexCreateEx Handle hTable Integer iIndex Integer[] iSgmnts Returns Boolean
55819>>>        Integer iTableNo iNumSgmnt iNumSgmnts
55819>>>        String sDriverID
55819>>>        Boolean bOK bIsSQLTable
55819>>>
55819>>>        Get AutoConnectionIDLogin to bOK
55820>>>
55820>>>        Move False to Err
55821>>>        Move hTable to iTableNo
55822>>>        Get OpenTableExclusive hTable to bOK
55823>>>        If (bOK = False) Begin
55825>>>            Function_Return False
55826>>>        End
55826>>>>
55826>>>
55826>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
55829>>>            Get _UtilTableIsSql hTable to bIsSQLTable
55830>>>            If (bIsSQLTable = True) Begin
55832>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
55835>>>            End
55835>>>>
55835>>>
55835>>>        // We start by deleting the index
55835>>>        Structure_Start hTable sDriverID
55836>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55837>>>            Send Ignore_Error of Error_Object_Id DFERR_BAD_PARAMETER
55838>>>            Delete_Index iTableNo iIndex
55839>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
55840>>>            Send Trap_Error of Error_Object_Id DFERR_BAD_PARAMETER
55841>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE
55843>>>
55843>>>        Move False to Err
55844>>>        Move iTableNo to hTable
55845>>>        Get OpenTableExclusive hTable to bOK
55846>>>        If (bOK = False) Begin
55848>>>            Function_Return False
55849>>>        End
55849>>>>
55849>>>
55849>>>        Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
55850>>>        Structure_Start hTable sDriverID
55851>>>            Move (SizeOfArray(iSgmnts)) to iNumSgmnts
55852>>>
55852>>>            Create_Index hTable at iIndex
55853>>>            Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSgmnts
55856>>>
55856>>>            for iNumSgmnt from 0 to (iNumSgmnts - 1)
55862>>>>
55862>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex (iNumSgmnt + 1) to iSgmnts[iNumSgmnt]
55865>>>            Loop
55866>>>>
55866>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE
55868>>>
55868>>>        Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
55869>>>
55869>>>        Function_Return (Err = False)
55870>>>    End_Function
55871>>>
55871>>>    Function APIIndexCreateByFieldNames Handle hTable tAPIIndex APIIndex tAPIIndex[] APIIndexTo tAPIIndexSegment[] aIndexSegments Returns Boolean
55873>>>        Integer iCount iSegmentsFrom iFieldFrom iSegmentsTo iSQLIndexType iTableNo
55873>>>        String sDriverID sSQLIndexName
55873>>>        Boolean bOK bIsSQLTable bIsOpen bIsSQLPrimaryKey bIsSQLClustered bIsSQLTemporaryIndex bExists
55873>>>
55873>>>        Move (SizeOfArray(aIndexSegments)) to iSegmentsFrom
55874>>>        If (iSegmentsFrom = 0) Begin
55876>>>            Function_Return False
55877>>>        End
55877>>>>
55877>>>
55877>>>        Get AutoConnectionIDLogin to bOK
55878>>>        Move False to Err
55879>>>        Get OpenTableExclusive hTable to bIsOpen
55880>>>        If (bIsOpen = False) Begin
55882>>>            Function_Return False
55883>>>        End
55883>>>>
55883>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
55886>>>        Get _UtilTableIsSql hTable to bIsSQLTable
55887>>>            If (bIsSQLTable = True) Begin
55889>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
55892>>>            End
55892>>>>
55892>>>
55892>>>        Move 0     to iSegmentsTo
55893>>>        Move 0     to iSQLIndexType
55894>>>        Move ""    to sSQLIndexName
55895>>>        Move False to bIsSQLTemporaryIndex
55896>>>        Move False to bIsSQLPrimaryKey
55897>>>        Move False to bIsSQLClustered
55898>>>
55898>>>            Get UtilIndexTempRenameSQLName hTable APIIndex.sSQLIndexName sDriverID          to bOK
55899>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable APIIndex.iIndexNumber              to iSegmentsTo
55902>>>        Move (iSegmentsTo > 0) to bExists
55903>>>        If (bExists = True) Begin
55905>>>            If (bIsSQLTable = True and iSegmentsTo > 0) Begin
55907>>>//                Get_Attribute DF_INDEX_NAME of hTable APIIndex.iIndexNumber                 to sSQLIndexName
55907>>>                Move APIIndex.sSQLIndexName                                                 to sSQLIndexName
55908>>>                        Get_Attribute DF_INDEX_SQL_TYPE of hTable APIIndex.iIndexNumber         to iSQLIndexType
55911>>>                        Move (iSQLIndexType = DF_INDEX_TEMPORARY)                               to bIsSQLTemporaryIndex
55912>>>                    Get_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable APIIndex.iIndexNumber  to bIsSQLPrimaryKey
55915>>>                    Get_Attribute DF_INDEX_CLUSTERED       of hTable APIIndex.iIndexNumber  to bIsSQLClustered
55918>>>            End
55918>>>>
55918>>>        End
55918>>>>
55918>>>
55918>>>        Move hTable to iTableNo
55919>>>        Move False to Err
55920>>>        Move 0 to LastErr
55921>>>
55921>>>        Structure_Start hTable sDriverID
55922>>>            If (bExists = True) Begin
55924>>>                Delete_Index iTableNo APIIndex.iIndexNumber
55925>>>            End
55925>>>>
55925>>>
55925>>>            Create_Index hTable At APIIndex.iIndexNumber
55926>>>
55926>>>                If (bIsSQLTable = True) Begin // (DF_INDEX_SQL_TYPE = DF_INDEX_SERVER, DF_INDEX_CLIENT, DF_INDEX_SERVER_ONLY or DF_INDEX_TEMPORARY)
55928>>>                    Set_Attribute DF_INDEX_SQL_TYPE        of hTable APIIndex.iIndexNumber to APIIndex.iSQLIndexType
55931>>>                    Set_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable APIIndex.iIndexNumber to APIIndex.bIsSQLPrimaryKey
55934>>>                    Set_Attribute DF_INDEX_CLUSTERED       of hTable APIIndex.iIndexNumber to APIIndex.bIsSQLClustered
55937>>>                    Set_Attribute DF_INDEX_NAME            of hTable APIIndex.iIndexNumber to APIIndex.sSQLIndexName
55940>>>                End
55940>>>>
55940>>>
55940>>>                    Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable APIIndex.iIndexNumber to iSegmentsFrom
55943>>>
55943>>>            for iCount from 0 to (iSegmentsFrom -1)
55949>>>>
55949>>>                Move aIndexSegments[iCount].iFieldNumber to iFieldFrom
55950>>>                If (iFieldFrom <> -1 ) Begin
55952>>>                        Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable APIIndex.iIndexNumber (iCount +1) to iFieldFrom
55955>>>                        Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable APIIndex.iIndexNumber (iCount +1) to aIndexSegments[iCount].bAscending
55958>>>                        Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable APIIndex.iIndexNumber (iCount +1) to aIndexSegments[iCount].bUppercase
55961>>>                End
55961>>>>
55961>>>            Loop
55962>>>>
55962>>>
55962>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
55963>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55965>>>
55965>>>        Set Action_Text of ghoStatusPanel to ""
55966>>>
55966>>>        Function_Return (Err = False)
55967>>>    End_Function
55968>>>
55968>>>    // If an SQL index is to be renamed we need to check that the name doesn't exist already, but
55968>>>    // with another index number. If we find one we temporarily renames it by adding "TMP" to the SQL name.
55968>>>    Function UtilIndexTempRenameSQLName Handle hTable String sSQLIndexName String sDriverID Returns Boolean
55970>>>        Integer iLastIndex iCount iTableNo iSegments
55970>>>        String sSQLIndexNameCompare sTmpIndexName
55970>>>        Boolean bIsOpen bExists bIsSQLDriver 
55970>>>
55970>>>        Get IsSQLDriver sDriverID to bIsSQLDriver
55971>>>        
55971>>>        If (bIsSQLDriver = False) Begin
55973>>>            Function_Return False
55974>>>        End
55974>>>>
55974>>>
55974>>>        Move False to Err
55975>>>        Move hTable to iTableNo
55976>>>        Get_Attribute DF_FILE_LAST_INDEX_NUMBER of hTable to iLastIndex
55979>>>        for iCount from 0 to iLastIndex
55985>>>>
55985>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iCount to iSegments
55988>>>            Move (iSegments > 0) to bExists
55989>>>            If (bExists = True) Begin
55991>>>                Get_Attribute DF_INDEX_NAME of hTable iCount to sSQLIndexNameCompare
55994>>>                If (Lowercase(sSQLIndexName) = Lowercase(sSQLIndexNameCompare)) Begin
55996>>>                    Move (sSQLIndexNameCompare + String("_TMP")) to sTmpIndexName
55997>>>                    Structure_Start iTableNo sDriverID
55998>>>                        Set_Attribute DF_INDEX_NAME of iTableNo iCount to sTmpIndexName
56001>>>                    Structure_End iTableNo DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
56003>>>                    Open hTable
56005>>>                End
56005>>>>
56005>>>            End
56005>>>>
56005>>>        Loop
56006>>>>
56006>>>
56006>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
56009>>>        If (bIsOpen = False) Begin
56011>>>            Get OpenTableExclusive hTable to bIsOpen
56012>>>        End
56012>>>>
56012>>>        If (bIsOpen = False) Begin
56014>>>            Function_Return False
56015>>>        End
56015>>>>
56015>>>
56015>>>        Function_Return (Err = False)
56016>>>    End_Function
56017>>>
56017>>>    // Checks if an SQL Index name for the "FROM" database already exists in the TO database,
56017>>>    // but with another Index number. We can then not rename the SQL index name for the TO database table.
56017>>>    Function UtilIndexSQLIndexNameExists Handle hTable Integer iIndexNumberFrom String sSQLIndexNameFrom tAPIIndex[] APIIndexTo Returns Integer
56019>>>        Integer iSize iCount
56019>>>        Integer iRetVal
56019>>>
56019>>>        Move 0 to iRetVal
56020>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndexNumberFrom to iRetVal
56023>>>        If (iRetVal = 0) Begin
56025>>>            Function_Return 0
56026>>>        End
56026>>>>
56026>>>        Move (SizeOfArray(APIIndexTo)) to iSize
56027>>>        Decrement iSize
56028>>>        for iCount from 0 to iSize
56034>>>>
56034>>>            If (Uppercase(sSQLIndexNameFrom) = Uppercase(APIIndexTo[iCount].sSQLIndexName)) Begin
56036>>>                If (iIndexNumberFrom <> APIIndexTo[iCount].iIndexNumber) Begin
56038>>>                    Move APIIndexTo[iCount].iIndexNumber to iRetVal
56039>>>                End
56039>>>>
56039>>>            End
56039>>>>
56039>>>        Loop
56040>>>>
56040>>>
56040>>>        Function_Return iRetVal
56041>>>    End_Function
56042>>>
56042>>>    Function ApiIndexDeleteSegment Handle hTable Integer iIndex Integer iSegment Returns Boolean
56044>>>        Integer iNumSegments iCurSegment iSegmentCase iSegmentDirection iSegmentColumn
56044>>>        Boolean bIsSQLTable
56044>>>        
56044>>>            Get _UtilTableIsSql hTable to bIsSQLTable
56045>>>            If (bIsSQLTable = True) Begin
56047>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
56050>>>            End
56050>>>>
56050>>>
56050>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
56053>>>        If (iSegment = iNumSegments) Begin
56055>>>//            Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
56055>>>        End
56055>>>>
56055>>>
56055>>>        Else If (iSegment > 0 and iSegment < iNumSegments) Begin
56058>>>            for iCurSegment from iSegment to (iNumSegments - 1)
56064>>>>
56064>>>                //*** Move index segment attributes
56064>>>                Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment + 1) to iSegmentCase
56067>>>                Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment + 1) to iSegmentDirection
56070>>>                Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment + 1) to iSegmentColumn
56073>>>
56073>>>                Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment to iSegmentCase
56076>>>                Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment to iSegmentDirection
56079>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment to iSegmentColumn
56082>>>            Loop
56083>>>>
56083>>>
56083>>>            Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
56086>>>        End
56086>>>>
56086>>>
56086>>>        Function_Return (Err = False)
56087>>>    End_Function
56088>>>
56088>>>    Function APIIndexRemoveAllIndexes Handle hTable tAPIIndex[] APIIndex Returns Boolean
56090>>>        Integer iCount iSize iIndex
56090>>>        String sDriverID
56090>>>        Boolean bOK bIsSQLTable bIsOpen
56090>>>
56090>>>        Move (SizeOfArray(APIIndex)) to iSize
56091>>>        If (iSize = 0) Begin
56093>>>            Function_Return True
56094>>>        End
56094>>>>
56094>>>
56094>>>        Get AutoConnectionIDLogin to bOK
56095>>>        Move False to Err
56096>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
56099>>>        If (bIsOpen = False) Begin
56101>>>            Get OpenTableExclusive hTable to bIsOpen
56102>>>            If (bIsOpen = False) Begin
56104>>>                Function_Return False
56105>>>            End
56105>>>>
56105>>>        End
56105>>>>
56105>>>
56105>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
56108>>>        Get _UtilTableIsSql hTable to bIsSQLTable
56109>>>            If (bIsSQLTable = True) Begin
56111>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
56114>>>            End
56114>>>>
56114>>>
56114>>>        Move False to Err
56115>>>        Move 0 to LastErr
56116>>>        Decrement iSize
56117>>>
56117>>>        Structure_Start hTable sDriverID
56118>>>            for iCount from 0 to iSize
56124>>>>
56124>>>//                Move False to bIsSQLPrimaryKey
56124>>>//                #IF (!@ > 180)   // DF 18.1 and up
56124>>>//                    Set Error_Report_Mode to DUF_ERROR_NO_REPORT
56124>>>//                    Get_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable APIIndex[iCount].iIndexNumber to bIsSQLPrimaryKey
56124>>>//                    Set Error_Report_Mode to DUF_ERROR_REPORT
56124>>>//                #ENDIF
56124>>>                // We can't delete if this is a primary key index:
56124>>>//                If (bIsSQLPrimaryKey = False) Begin
56124>>>                    Move APIIndex[iCount].iIndexNumber to iIndex
56125>>>                    Delete_Index hTable iIndex
56126>>>//                    Set Error_Report_Mode to DUF_ERROR_REPORT
56126>>>//                End
56126>>>            Loop
56127>>>>
56127>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
56128>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
56130>>>//        Move False to Err
56130>>>        Move 0 to LastErr
56131>>>
56131>>>        Set Action_Text of ghoStatusPanel to ""
56132>>>        Function_Return (Err = False)
56133>>>    End_Function
56134>>>
56134>>>    Function ApiIndexChangeDirection Handle hTable Integer iIndex Integer iSegment Integer iDirection Returns Boolean
56136>>>        Boolean bOK
56136>>>
56136>>>        Get AutoConnectionIDLogin to bOK
56137>>>        Move False to Err
56138>>>        Get OpenTableExclusive hTable to bOK
56139>>>        If (bOK = False) Begin
56141>>>            Function_Return False
56142>>>        End
56142>>>>
56142>>>        Structure_Start hTable
56143>>>            Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iSegment to iDirection
56146>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
56147>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
56149>>>
56149>>>        Set Action_Text of ghoStatusPanel to ""
56150>>>        Function_Return (Err = False)
56151>>>    End_Function
56152>>>
56152>>>    Function ApiIndexChangeUppercase Handle hTable Integer iIndex Integer iSegment Boolean bUppercase Returns Boolean
56154>>>        Integer iCase
56154>>>        Boolean bOK
56154>>>
56154>>>        If (bUppercase = True) Begin
56156>>>            Move DF_CASE_IGNORED to iCase
56157>>>        End
56157>>>>
56157>>>        Else Begin
56158>>>            Move DF_CASE_USED to iCase
56159>>>        End
56159>>>>
56159>>>
56159>>>        Get AutoConnectionIDLogin to bOK
56160>>>        Move False to Err
56161>>>        Get OpenTableExclusive hTable to bOK
56162>>>        If (bOK = False) Begin
56164>>>            Function_Return False
56165>>>        End
56165>>>>
56165>>>        Structure_Start hTable
56166>>>            Set_Attribute DF_INDEX_SEGMENT_CASE of hTable iIndex iSegment to iCase
56169>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
56170>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
56172>>>
56172>>>        Set Action_Text of ghoStatusPanel to ""
56173>>>        Function_Return (Err = False)
56174>>>    End_Function
56175>>>
56175>>>    // To delete an index
56175>>>    Function ApiIndexRemove Handle hTable Integer iIndex Returns Boolean
56177>>>        Integer iTableNo iNumSegments
56177>>>        String sDriverID
56177>>>        Boolean bOK bIsSQLTable
56177>>>
56177>>>        Get AutoConnectionIDLogin to bOK
56178>>>        Move False to Err
56179>>>        Move hTable to iTableNo
56180>>>        Get OpenTableExclusive hTable to bOK
56181>>>        If (bOK = False) Begin
56183>>>            Function_Return False
56184>>>        End
56184>>>>
56184>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
56187>>>            Get _UtilTableIsSql hTable to bIsSQLTable
56188>>>            If (bIsSQLTable = True) Begin
56190>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
56193>>>            End
56193>>>>
56193>>>
56193>>>        // Check to see if the index exists or not...
56193>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
56196>>>        If (iNumSegments = 0) Begin
56198>>>            Function_Return True // Then nothing to do.
56199>>>        End
56199>>>>
56199>>>
56199>>>        Structure_Start hTable sDriverID
56200>>>            Send Ignore_Error of Error_Object_Id DFERR_BAD_PARAMETER
56201>>>            Delete_Index iTableNo iIndex
56202>>>            Send Trap_Error of Error_Object_Id DFERR_BAD_PARAMETER
56203>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
56204>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
56206>>>
56206>>>        Set Action_Text of ghoStatusPanel to ""
56207>>>        Function_Return (Err = False)
56208>>>    End_Function
56209>>>
56209>>>    // Delete an Index Segment
56209>>>    Function ApiIndexRemoveSegment Handle hTable Integer iIndex Integer iSegment Returns Boolean
56211>>>        Boolean bOK bSQLDriver bIndexTemporary bIsSQLTable
56211>>>        Integer iNumSegments iCurSegment iSegmentCase iSegmentDirection iSegmentColumn
56211>>>        Integer iIndexType
56211>>>        String sDriverID
56211>>>
56211>>>        Get AutoConnectionIDLogin to bOK
56212>>>        Move False to Err
56213>>>
56213>>>        Get OpenTableExclusive hTable to bOK
56214>>>        If (bOK = False) Begin
56216>>>            Function_Return False
56217>>>        End
56217>>>>
56217>>>
56217>>>            Get _UtilTableIsSql hTable to bIsSQLTable
56218>>>            If (bIsSQLTable = True) Begin
56220>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
56223>>>            End
56223>>>>
56223>>>
56223>>>        // Check to see if the index exists or not...
56223>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
56226>>>        If (iNumSegments = 0) Begin
56228>>>            Function_Return False
56229>>>        End
56229>>>>
56229>>>
56229>>>        Move False to bIndexTemporary
56230>>>        Get psDriverID to sDriverID
56231>>>        Get IsSQLDriver sDriverID to bSQLDriver
56232>>>        If (bSQLDriver) Begin
56234>>>           Get_Attribute DF_INDEX_TYPE of hTable iIndex to iIndexType
56237>>>                Get_Attribute DF_INDEX_TYPE to iIndexType
56240>>>                Move True to bIndexTemporary
56241>>>        End
56241>>>>
56241>>>
56241>>>        // If SQL and Temporary Index must not use Structure_Start/Structure_End
56241>>>        If (bSQLDriver = True and bIndexTemporary = True) Begin
56243>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
56246>>>            If (iSegment = iNumSegments) Begin
56248>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
56251>>>            End
56251>>>>
56251>>>            Else If (iSegment > 0 and iSegment < iNumSegments) Begin
56254>>>                For iCurSegment from iSegment to (iNumSegments - 1)
56260>>>>
56260>>>                    //*** Move index segment attributes
56260>>>                    Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment + 1) to iSegmentCase
56263>>>                    Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment + 1) to iSegmentDirection
56266>>>                    Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment + 1) to iSegmentColumn
56269>>>                    Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment       to iSegmentCase
56272>>>                    Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment       to iSegmentDirection
56275>>>                    Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment       to iSegmentColumn
56278>>>                Loop
56279>>>>
56279>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
56282>>>            End
56282>>>>
56282>>>        End
56282>>>>
56282>>>
56282>>>        Else Begin
56283>>>           Structure_Start hTable
56284>>>               Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
56287>>>               If (iSegment = iNumSegments) Begin
56289>>>                   Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
56292>>>               End
56292>>>>
56292>>>               Else If (iSegment > 0 and iSegment < iNumSegments) Begin
56295>>>                   for iCurSegment from iSegment to (iNumSegments - 1)
56301>>>>
56301>>>                       //*** Move index segment attributes
56301>>>                       Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment + 1) to iSegmentCase
56304>>>                       Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment + 1) to iSegmentDirection
56307>>>                       Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment + 1) to iSegmentColumn
56310>>>                       Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment       to iSegmentCase
56313>>>                       Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment       to iSegmentDirection
56316>>>                       Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment       to iSegmentColumn
56319>>>                   Loop
56320>>>>
56320>>>                   Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
56323>>>               End
56323>>>>
56323>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
56324>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
56326>>>            Set Action_Text of ghoStatusPanel to ""
56327>>>        End
56327>>>>
56327>>>
56327>>>        Function_Return (Err = False)
56328>>>    End_Function
56329>>>
56329>>>    // Add/Insert an Index Segment
56329>>>    Function ApiIndexInsertSegment Handle hTable Integer iIndex Integer iSegment Integer iSegmentColumn Integer iSegmentCase Integer iSegmentDirection Returns Boolean
56331>>>        Boolean bOK bSQLDriver bIndexTemporary bIsSQLTable
56331>>>        Integer iNumSegments iCurSegment iCurSegmentColumn iCurSegmentCase iCurSegmentDirection
56331>>>        Integer iIndexType
56331>>>        String sDriverId
56331>>>
56331>>>        Get AutoConnectionIDLogin to bOK
56332>>>        Move False to Err
56333>>>
56333>>>        Get OpenTableExclusive hTable to bOK
56334>>>        If (bOK = False) Begin
56336>>>            Function_Return False
56337>>>        End
56337>>>>
56337>>>
56337>>>            Get _UtilTableIsSql hTable to bIsSQLTable
56338>>>            If (bIsSQLTable = True) Begin
56340>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
56343>>>            End
56343>>>>
56343>>>
56343>>>        Move False to bIndexTemporary
56344>>>        // Check to see if the index exists or not...
56344>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
56347>>>        If (iNumSegments = 0) Begin
56349>>>            Function_Return False
56350>>>        End
56350>>>>
56350>>>
56350>>>        Get psDriverID to sDriverID
56351>>>        Get IsSQLDriver sDriverID to bSQLDriver
56352>>>        If (bSQLDriver) Begin
56354>>>           Get_Attribute DF_INDEX_TYPE of hTable iIndex to iIndexType
56357>>>                Get_Attribute DF_INDEX_TYPE to iIndexType
56360>>>                Move True to bIndexTemporary
56361>>>        End
56361>>>>
56361>>>
56361>>>        // If SQL and Temporary Index must not use Structure_Start/Structure_End
56361>>>        If (bSQLDriver = True and bIndexTemporary = True) Begin
56363>>>           Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
56366>>>
56366>>>           If (iSegment > iNumSegments) Begin
56368>>>               Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments + 1)
56371>>>               Move (iNumSegments + 1) to iCurSegment
56372>>>           End
56372>>>>
56372>>>           Else If (iSegment > 0 and iSegment <= iNumSegments) Begin
56375>>>               Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments + 1)
56378>>>               Move iNumSegments to iCurSegment
56379>>>
56379>>>               While (iCurSegment > iSegment)
56383>>>                   //*** Move index segment attributes
56383>>>                   Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment - 1) to iCurSegmentCase
56386>>>                   Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment - 1) to iCurSegmentDirection
56389>>>                   Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment - 1) to iSegmentColumn
56392>>>                   Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment       to iCurSegmentCase
56395>>>                   Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment       to iCurSegmentDirection
56398>>>                   Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment       to iCurSegmentColumn
56401>>>                   Decrement iCurSegment
56402>>>               Loop
56403>>>>
56403>>>
56403>>>               //*** Now set new segment attributes
56403>>>               Set_Attribute DF_INDEX_SEGMENT_CASE          of hTable iIndex iCurSegment       to iSegmentCase
56406>>>               Set_Attribute DF_INDEX_SEGMENT_DIRECTION     of hTable iIndex iCurSegment       to iSegmentDirection
56409>>>               Set_Attribute DF_INDEX_SEGMENT_FIELD         of hTable iIndex iCurSegment       to iSegment
56412>>>           End
56412>>>>
56412>>>        End
56412>>>>
56412>>>
56412>>>        Else Begin
56413>>>        Structure_Start hTable
56414>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
56417>>>
56417>>>            If (iSegment > iNumSegments) Begin
56419>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments + 1)
56422>>>                Move (iNumSegments + 1) to iCurSegment
56423>>>            End
56423>>>>
56423>>>            Else If (iSegment > 0 and iSegment <= iNumSegments) Begin
56426>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments + 1)
56429>>>                Move iNumSegments to iCurSegment
56430>>>
56430>>>                While (iCurSegment > iSegment)
56434>>>                    //*** Move index segment attributes
56434>>>                    Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment - 1) to iSegmentCase
56437>>>                    Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment - 1) to iSegmentDirection
56440>>>                    Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment - 1) to iSegmentColumn
56443>>>                    Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment       to iSegmentCase
56446>>>                    Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment       to iSegmentDirection
56449>>>                    Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment       to iSegmentColumn
56452>>>                    Decrement iCurSegment
56453>>>                Loop
56454>>>>
56454>>>
56454>>>                //*** Now set new segment attributes
56454>>>                Set_Attribute DF_INDEX_SEGMENT_CASE          of hTable iIndex iCurSegment       to iSegmentCase
56457>>>                Set_Attribute DF_INDEX_SEGMENT_DIRECTION     of hTable iIndex iCurSegment       to iSegmentDirection
56460>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD         of hTable iIndex iCurSegment       to iSegment
56463>>>            End
56463>>>>
56463>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
56464>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
56466>>>            Set Action_Text of ghoStatusPanel to ""
56467>>>        End
56467>>>>
56467>>>
56467>>>        Function_Return (Err = False)
56468>>>    End_Function
56469>>>
56469>>>    // * Dummy function for the Studio's Code Explorer *
56469>>>    Function TABLE_UTILITY_FUNCTIONS Returns Boolean
56471>>>        Function_Return False
56472>>>    End_Function  
56473>>>    
56473>>>    // Preparation message before an SQL onversion. It will check and wash all embedded data tables and prepare them
56473>>>    // for an SQL conversion.
56473>>>    Function UtilPrepareDataFolderForSQLConversion Boolean bMoveMiscFilesToBackup Boolean bFixALLBogusFilelistEntries Boolean bConvertTo30Format Boolean bRepairAndReindex Boolean bFixBogusDates Returns Boolean
56475>>>        Boolean bConvertTo30FormatbOK bRepairAndReindexOK bFixBogusDatesOK bMoveMiscFilesToBackupOK
56475>>>        
56475>>>        Move True to bConvertTo30FormatbOK
56476>>>        Move True to bRepairAndReindexOK
56477>>>        Move True to bFixBogusDatesOK
56478>>>        Move True to bMoveMiscFilesToBackupOK
56479>>>        
56479>>>        If (bMoveMiscFilesToBackup = True) Begin   
56481>>>            Set Message_Text of ghoStatusPanel to "Moving misc. files to backup..."
56482>>>            Get UtilMoveMiscFilesToBackupFolder to bMoveMiscFilesToBackupOK
56483>>>        End                                                                                
56483>>>>
56483>>>        If (bFixALLBogusFilelistEntries = True) Begin
56485>>>            Set Message_Text of ghoStatusPanel to "Fixing bogus Filelist.cfg entries..."
56486>>>            Get UtilTableFixALLBogusFilelistEntries to bFixALLBogusFilelistEntries
56487>>>        End
56487>>>>
56487>>>        If (bConvertTo30Format = True) Begin
56489>>>            Set Message_Text of ghoStatusPanel to "Converting .dat files from 2.3->..."
56490>>>            Get UtilTableConvertALLTablesFrom23Format to bConvertTo30FormatbOK
56491>>>        End                                                 
56491>>>>
56491>>>        If (bRepairAndReindex = True) Begin
56493>>>            Set Message_Text of ghoStatusPanel to "Repairing and reindexing..."
56494>>>            Get UtilTableRepairAndReindexALL to bRepairAndReindexOK
56495>>>        End  
56495>>>>
56495>>>        If (bFixBogusDates = True) Begin
56497>>>            Set Message_Text of ghoStatusPanel to "Fixing bogus date values..."
56498>>>            Get UtilTablesFixAllDateBogusValues True False to bFixBogusDatesOK
56499>>>        End                                    
56499>>>>
56499>>>        
56499>>>        Function_Return (bConvertTo30FormatbOK = True and bFixALLBogusFilelistEntries = True and bRepairAndReindexOK = True and bFixBogusDatesOK = True and bMoveMiscFilesToBackupOK = True)
56500>>>    End_Function
56501>>>
56501>>>    Function UtilTableConvertALLTablesFrom23Format Returns Boolean
56503>>>        Boolean bOK bFlexErrs bTemp
56503>>>        Handle hTable
56503>>>        String sTableName
56503>>>        Integer iCount iSize
56503>>>        
56503>>>        Move True to bOK
56504>>>        Move 0 to hTable    
56505>>>
56505>>>        Get UtilFilelistNoOfTables to iSize
56506>>>        Set pbVisible    of ghoProgressBarOverall to True
56507>>>        Set piPosition   of ghoProgressBarOverall to 0
56508>>>        Set piMaximum    of ghoProgressBarOverall to iSize
56509>>>        Set piAdvanceBy  of ghoProgressBarOverall to 1
56510>>>
56510>>>        Repeat
56510>>>>
56510>>>            Set Action_Text of ghoStatusPanel to "Checking if table is in 2.3 format..."
56511>>>            Set piPosition of ghoProgressBarOverall to iCount  
56512>>>            Increment iCount
56513>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
56516>>>            If (hTable > 0) Begin
56518>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
56521>>>                Move (Uppercase(sTableName) = "FLEXERRS")  to bFlexErrs
56522>>>                If (bFlexErrs = False) Begin
56524>>>                    Get UtilTableConvertFrom23Format hTable to bTemp
56525>>>                    If (bTemp = False) Begin
56527>>>                        Move False to bOK
56528>>>                    End
56528>>>>
56528>>>                End
56528>>>>
56528>>>            End
56528>>>>
56528>>>        Until (hTable = 0)
56530>>>        
56530>>>        Set Action_Text of ghoStatusPanel to ""
56531>>>        Function_Return bOK
56532>>>    End_Function
56533>>>    
56533>>>    // Converts an embedded table from 2.3 -> 3.0.
56533>>>    // Returns: FALSE only if the table can't be opened or the conversion fails.
56533>>>    // It will return a TRUE if successful or the table is an SQL table.
56533>>>    Function UtilTableConvertFrom23Format Handle hTable Returns Boolean
56535>>>        Boolean bOK bIsEmbedded bIsAlias
56535>>>        String sRevision
56535>>>        
56535>>>        Get AutoConnectionIDLogin to bOK
56536>>>        If (bOK = False) Begin
56538>>>            Function_Return True
56539>>>        End
56539>>>>
56539>>>        Get OpenTableExclusive hTable to bOK
56540>>>        If (bOK = False) Begin
56542>>>            Function_Return True
56543>>>        End
56543>>>>
56543>>>        Get _UtilTableIsEmbedded hTable to bIsEmbedded
56544>>>        If (bIsEmbedded = False) Begin
56546>>>            Function_Return True
56547>>>        End                             
56547>>>>
56547>>>        Get UtilTableIsAlias hTable to bIsAlias
56548>>>        If (bIsAlias = True) Begin
56550>>>            Function_Return True
56551>>>        End                     
56551>>>>
56551>>>        
56551>>>        Move False to Err
56552>>>        Get_Attribute DF_FILE_REVISION of hTable to sRevision
56555>>>        If (sRevision contains "2.3") Begin
56557>>>            Move False to Err
56558>>>            Set Private.phCurrentTable to hTable
56559>>>            Structure_Start hTable    
56560>>>                Set_Attribute DF_FILE_INTEGRITY_CHECK of hTable to True
56563>>>                Set Action_Text of ghoStatusPanel to "Restructures table to 3.0/4.0"
56564>>>            Structure_End hTable DF_STRUCTEND_OPT_FORCE "." ghoDbUpdateHandler
56566>>>            Set Action_Text of ghoStatusPanel to ""
56567>>>        End
56567>>>>
56567>>>        
56567>>>        Function_Return (Err = False)
56568>>>    End_Function
56569>>>
56569>>>    Function UtilTableFixALLBogusFilelistEntries Returns Boolean
56571>>>        Boolean bIgnore bExists bOK bResponse
56571>>>        Handle hTable   
56571>>>        String sTableName
56571>>>        
56571>>>        Move False to Err 
56572>>>        Move True to bOK
56573>>>        Move 0 to hTable
56574>>>        Repeat
56574>>>>
56574>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
56577>>>            If (hTable > 0) Begin
56579>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
56582>>>                Move (Uppercase(sTableName) = "FLEXERRS" or Uppercase(sTableName) = "CODETYPE" or Uppercase(sTableName) = "CODEMAST")  to bIgnore
56583>>>                If (bIgnore = False) Begin
56585>>>                    Get _UtilTableExists hTable to bExists
56586>>>                    If (bExists = False) Begin
56588>>>                        Get ApiTableChangeFileListSlot "" "" "" hTable DATAFLEX_ID to bResponse
56589>>>                        If (bResponse = False) Begin
56591>>>                            Move False to bOK
56592>>>                        End
56592>>>>
56592>>>                        
56592>>>                    End
56592>>>>
56592>>>                End
56592>>>>
56592>>>            End
56592>>>>
56592>>>        Until (hTable = 0)                     
56594>>>        
56594>>>        Set Action_Text of ghoStatusPanel to "" 
56595>>>        Function_Return bOK
56596>>>    End_Function
56597>>>    
56597>>>    // Replaces all date values with CS_DUFLowestAllowedDateValue for all tables in Filelist.cfg,
56597>>>    // _except_ those tables that has been excluded with the "ApiTableDateCorrectionAddException" message.
56597>>>    // If the passed bAllowZeroDates = True, date columns that are = 0 will not be changed.
56597>>>    // This is for prepairing embedded tables (*.dat) before an SQL conversion.
56597>>>    //
56597>>>    // The root of the problem is the following:
56597>>>    // The data type Date in SQL has a range of accepted values from 01-01-0001 through 12-31-9999
56597>>>    // while the data type DateTime has a range of accepted values from 01-01-1753 through 12-31-9999
56597>>>    // So if you happen to have a Date from before 1753, or an empty / NULL value - this will be outside
56597>>>    // the range that DateTime can handle and if you then try to change a Date column to a DateTime,
56597>>>    // an SQL error will be thrown;
56597>>>    // "The conversion of a date data type to a datetime data type resulted in an out-of-range value".
56597>>>    Function UtilTablesFixAllDateBogusValues Boolean bFixZeroDates Boolean bResetIndexesToOnLine Returns Boolean
56599>>>        Boolean bOK bIsAlias bIsSQL
56599>>>        Integer iCount iSize iDateSize
56599>>>        Handle hTable
56599>>>        String sLogicalName
56599>>>        Integer[] aTablesToCheck aDateFields
56601>>>
56601>>>        Get _AllTablesDateCorrections to aTablesToCheck
56602>>>        Move (SizeOfArray(aTablesToCheck)) to iSize
56603>>>        Set pbVisible    of ghoProgressBarOverall to True
56604>>>        Set piPosition   of ghoProgressBarOverall to 0
56605>>>        Set piMaximum    of ghoProgressBarOverall to iSize
56606>>>        Set piAdvanceBy  of ghoProgressBarOverall to 1
56607>>>
56607>>>        Move True to bOK
56608>>>        Decrement iSize
56609>>>        for iCount from 0 to iSize
56615>>>>
56615>>>            Move aTablesToCheck[iCount] to hTable
56616>>>            Set piPosition of ghoProgressBarOverall to iCount
56617>>>            Get UtilTableIsAlias hTable to bIsAlias
56618>>>            Get _UtilTableIsSql   hTable to bIsSQL
56619>>>
56619>>>            Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
56622>>>            Set TableName_Text of ghoStatusPanel to ("Processing Table Number:" * String(hTable) * "Name:" * String(sLogicalName))
56623>>>            Set Message_Text of ghoStatusPanel to "Fixing bogus date values..."
56624>>>
56624>>>            If (bIsAlias = False and bIsSQL = False) Begin
56626>>>                Get UtilCheckForDateFields hTable to aDateFields
56627>>>                Move (SizeOfArray(aDateFields)) to iDateSize
56628>>>                If (iDateSize > 0) Begin
56630>>>                    Get UtilTableCorrectBogusDateValues hTable aDateFields bFixZeroDates bResetIndexesToOnLine to bOK
56631>>>                    Close hTable
56632>>>                End
56632>>>>
56632>>>            End
56632>>>>
56632>>>        Loop
56633>>>>
56633>>>
56633>>>        Close DF_ALL
56634>>>        Function_Return bOK
56635>>>    End_Function
56636>>>
56636>>>    // Returns all fields of type Date or DateTime in an integer array with the field numbers.
56636>>>    Function UtilCheckForDateFields Handle hTable Returns Integer[]
56638>>>        Integer[] aDateFields aDateFieldsEmpty
56640>>>        Integer iSize iCount iType
56640>>>        Boolean bOpen bOK
56640>>>        
56640>>>        Get _UtilTableExists hTable to bOK
56641>>>        If (bOK = False) Begin
56643>>>            Set Private.phCurrentTable to hTable
56644>>>            Error DFERR_PROGRAM "Table exists in Filelist.cfg but not on disk or SQL back-end."
56645>>>>
56645>>>            Function_Return aDateFieldsEmpty
56646>>>        End
56646>>>>
56646>>>        Set Private.phCurrentTable to hTable
56647>>>        Set Private.piCurrentField to 0
56648>>>
56648>>>        Open hTable
56650>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
56653>>>        If (bOpen = False) Begin
56655>>>            Function_Return aDateFieldsEmpty
56656>>>        End
56656>>>>
56656>>>
56656>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iSize
56659>>>        For iCount from 1 to iSize
56665>>>>
56665>>>            Get_Attribute DF_FIELD_TYPE of hTable iCount to iType
56668>>>            If (iType = DF_DATE or iType = DF_DATETIME) Begin
56670>>>                Move iCount to aDateFields[SizeOfArray(aDateFields)]
56671>>>            End
56671>>>>
56671>>>        Loop
56672>>>>
56672>>>
56672>>>        Function_Return aDateFields
56673>>>    End_Function
56674>>>
56674>>>    // Loops through all records for the passed hTable, and checks that all Date values
56674>>>    // for the passed aDateFields array are OK. Else the Data value is set to CS_DUFLowestAllowedDateValue
56674>>>    // and the record is saved
56674>>>    // If the passed bAllowZeroDates = True, date columns that are = 0 will not be changed.
56674>>>    // Note: It first sets all indexes to BATCH and reset them at the end.
56674>>>    Function UtilTableCorrectBogusDateValues Handle hTable Integer[] aDateFields Boolean bFixZeroDates Boolean bResetIndexesToOnLine Returns Boolean
56676>>>        Integer iSize iCount iField iRecord iTotalRecords iDateFormat iDriverIndex
56676>>>        String sDriverID sDateMin
56676>>>        Boolean bCancel bFound bOK bChange bOpened bSaveChanges 
56676>>>        Date dDate dDateMin
56676>>>        Integer[] iaChangeField
56677>>>
56677>>>        Get _UtilTableExists hTable to bOK
56678>>>        // I believe we should just skip files not found and not report an error.
56678>>>        // This is because a filelist may have entries but no files/tables on disk, but
56678>>>        // this may be adjusted by other calls to DUF in a later update package. 
56678>>>        // Especially considering that this call is probably done at the very
56678>>>        // beginning of a DUF update.
56678>>>        If (bOK = False) Begin
56680>>>//            Set Private.phCurrentTable to hTable
56680>>>//            Error DFERR_PROGRAM "Table exists in Filelist.cfg but not on disk or SQL back-end."
56680>>>//            Function_Return False
56680>>>            Function_Return True
56681>>>        End
56681>>>>
56681>>>
56681>>>        // The CS_DUFLowestAllowedDateValue is defined as "01/01/1753", so we first set the
56681>>>        // date format to "USA" = "MM/DD/YYYY"
56681>>>        Get_Attribute DF_DATE_FORMAT to iDateFormat
56684>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_USA
56687>>>
56687>>>//        Send SetAllIndexesToBatch hTable True
56687>>>        Open hTable
56689>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
56692>>>        If (bOpened = False) Begin
56694>>>            Function_Return False
56695>>>        End
56695>>>>
56695>>>        
56695>>>        Set Private.phCurrentTable to hTable
56696>>>        Move 0 to iRecord
56697>>>        Move (SizeOfArray(aDateFields)) to iSize
56698>>>        Decrement iSize
56699>>>
56699>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
56702>>>        Get DriverIndex sDriverID to iDriverIndex
56703>>>        If (iDriverIndex <> 0) Begin
56705>>>            Get_Attribute DF_DRIVER_DUMMY_ZERO_DATE_VALUE of iDriverIndex to sDateMin
56708>>>            If (sDateMin = "") Begin
56710>>>                Move CS_DUFLowestAllowedDateValue to dDateMin
56711>>>            End
56711>>>>
56711>>>            Else Begin
56712>>>                If (IsDate(sDateMin)) Begin
56714>>>                    Move sDateMin to dDateMin
56715>>>                End
56715>>>>
56715>>>                Else Begin
56716>>>                    Move CS_DUFLowestAllowedDateValue to dDateMin
56717>>>                End
56717>>>>
56717>>>            End
56717>>>>
56717>>>        End
56717>>>>
56717>>>        Else Begin
56718>>>            Move CS_DUFLowestAllowedDateValue to dDateMin
56719>>>        End
56719>>>>
56719>>>
56719>>>        Get_Attribute DF_FILE_RECORDS_USED of hTable to iTotalRecords
56722>>>        Set piPosition   of ghoProgressBar to 0
56723>>>        Set piAdvanceBy  of ghoProgressBar to 100
56724>>>        Set piMaximum    of ghoProgressBar to iTotalRecords
56725>>>        Move False to Err
56726>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
56727>>>
56727>>>        Clear hTable
56728>>>        Repeat
56728>>>>
56728>>>            Vfind hTable 0 GT
56730>>>            Move Found to bFound
56731>>>            If (bFound = True) Begin
56733>>>                Move False to bSaveChanges
56734>>>                Move (ResizeArray(iaChangeField, 0)) to iaChangeField
56735>>>                Move (SizeOfArray(aDateFields)) to iSize
56736>>>                Decrement iSize
56737>>>                For iCount from 0 to iSize
56743>>>>
56743>>>                    Move aDateFields[iCount] to iField
56744>>>                    Get_Field_Value hTable iField to dDate
56747>>>                    If (bFixZeroDates = True) Begin
56749>>>                        Move (dDate = 0 or dDate < dDateMin) to bChange
56750>>>                    End
56750>>>>
56750>>>                    Else Begin
56751>>>                        Move (dDate <> 0 and dDate < dDateMin) to bChange
56752>>>                    End
56752>>>>
56752>>>                    If (bChange = True) Begin
56754>>>                        Move iField to iaChangeField[SizeOfArray(iaChangeField)]
56755>>>                    End
56755>>>>
56755>>>                Loop
56756>>>>
56756>>>
56756>>>                // Only change Date fields that needs to be changed.
56756>>>                If (SizeOfArray(iaChangeField)) Begin
56758>>>                    Reread hTable
56762>>>                        Move (SizeOfArray(iaChangeField)) to iSize
56763>>>                        Decrement iSize
56764>>>                        For iCount from 0 to iSize
56770>>>>
56770>>>                            Move iaChangeField[iCount] to iField
56771>>>                            Set Private.piCurrentField to iField
56772>>>                            Set_Field_Value hTable iField to dDateMin
56775>>>                        Loop
56776>>>>
56776>>>                        Move False to Err
56777>>>                        SaveRecord hTable
56778>>>                    Unlock
56779>>>>
56779>>>                End
56779>>>>
56779>>>
56779>>>                Increment iRecord
56780>>>                // Increment the StatusPanel counter and check the
56780>>>                // cancel status every 100 records rather than every
56780>>>                // record, it's way faster.
56780>>>                If (Mod(iRecord, 100) = 0) Begin
56782>>>                    Send DoAdvance of ghoProgressBar
56783>>>                    Set Action_Text of ghoStatusPanel to ("Record:" * String(iRecord))
56784>>>                    Get Check_StatusPanel of ghoStatusPanel to bCancel
56785>>>                End
56785>>>>
56785>>>            End
56785>>>>
56785>>>        Until (bFound = False)
56787>>>
56787>>>        Set_Attribute DF_DATE_FORMAT to iDateFormat
56790>>>        If (bResetIndexesToOnLine = True) Begin
56792>>>            Send SetAllIndexesToBatch hTable False
56793>>>        End
56793>>>>
56793>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
56794>>>
56794>>>        Function_Return (Err = False)
56795>>>    End_Function
56796>>>
56796>>>    // Compares the RootName, LogicalName & DisplayName and returns True if they are equal.
56796>>>    // Note that it first removes any driver prefixes in the rootname.
56796>>>    Function UtilTableInfoCompare Boolean bCompareFilelistUppercase tAPITableNameInfoCompare APITableInfoCompare Returns Boolean
56798>>>        Boolean bIsSame
56798>>>        String sRootNameFrom sRootNameTo sLogicalNameFrom sLogicalNameTo sDisplayNameFrom sDisplayNameTo
56798>>>
56798>>>        Get _TableNoPrefix APITableInfoCompare.sRootNameFrom    to sRootNameFrom
56799>>>        Get _TableNoPrefix APITableInfoCompare.sRootNameTo      to sRootNameTo
56800>>>        Move APITableInfoCompare.sLogicalNameFrom               to sLogicalNameFrom
56801>>>        Move APITableInfoCompare.sLogicalNameTo                 to sLogicalNameTo
56802>>>        Get _TableNoPrefix APITableInfoCompare.sDisplayNameFrom to sDisplayNameFrom
56803>>>        Get _TableNoPrefix APITableInfoCompare.sDisplayNameTo   to sDisplayNameTo
56804>>>
56804>>>        If (bCompareFilelistUppercase = True) Begin
56806>>>            Move (Uppercase(sRootNameFrom) = Uppercase(sRootNameTo) and Uppercase(sLogicalNameFrom) = Uppercase(sLogicalNameTo)) to bIsSame
56807>>>        End
56807>>>>
56807>>>        Else Begin
56808>>>            Move (sRootNameFrom = sRootNameTo and sLogicalNameFrom = sLogicalNameTo and sDisplayNameFrom = sDisplayNameTo) to bIsSame
56809>>>        End
56809>>>>
56809>>>        If (bIsSame = False) Begin
56811>>>            Function_Return False
56812>>>        End
56812>>>>
56812>>>
56812>>>        Move (APITableInfoCompare.bIsAliasFrom = APITableInfoCompare.bIsAliasTo) to bIsSame
56813>>>        If (bIsSame = False) Begin
56815>>>            Function_Return False
56816>>>        End
56816>>>>
56816>>>
56816>>>        Move (APITableInfoCompare.bIsSQLFrom = APITableInfoCompare.bIsSQLTo) to bIsSame
56817>>>        If (bIsSame = False) Begin
56819>>>            Function_Return False
56820>>>        End
56820>>>>
56820>>>
56820>>>        Move (APITableInfoCompare.bIsSystemFileFrom = APITableInfoCompare.bIsSystemFileTo) to bIsSame
56821>>>        If (bIsSame = False) Begin
56823>>>            Function_Return False
56824>>>        End
56824>>>>
56824>>>
56824>>>        Function_Return bIsSame
56825>>>    End_Function
56826>>>
56826>>>    Function UtilTableCompare tAPITable APITableFrom tAPITable APITableTo Boolean bCodeGenerateMode Boolean ByRef bFilelistError Returns Boolean
56828>>>        Handle hTableFrom hTableTo
56828>>>        Boolean bIsSame bIsSQLFrom bIsSQLTo
56828>>>        Boolean bCompareDate_DateTime bCompareIndexAscending bCompareIndexUppercase
56828>>>        String sRootName sDriverIDFrom sDriverIDTo
56828>>>        tAPIColumnCompare[]   aAPIColumnCompare
56828>>>        tAPIColumnCompare[]   aAPIColumnCompare
56829>>>        tAPIIndexCompare[]    aAPIIndexCompare
56829>>>        tAPIIndexCompare[]    aAPIIndexCompare
56830>>>        tAPIRelationCompare[] aAPIRelationCompare
56830>>>        tAPIRelationCompare[] aAPIRelationCompare
56831>>>
56831>>>        Move (IsSameStruct(APITableFrom, APITableTo)) to bIsSame
56832>>>        If (bIsSame = True) Begin
56834>>>            Function_Return True
56835>>>        End
56835>>>>
56835>>>
56835>>>        Move False to bFilelistError
56836>>>        Move True to bIsSame
56837>>>        Get pbCompareDate_DateTime  to bCompareDate_DateTime
56838>>>        Get pbCompareIndexAscending to bCompareIndexAscending
56839>>>        Get pbCompareIndexUppercase to bCompareIndexUppercase
56840>>>        Move APITableFrom.ApiTableInfo.iTableNumber to hTableFrom
56841>>>        Set Private.phCurrentTable to hTableFrom
56842>>>        
56842>>>        Move APITableTo.ApiTableInfo.iTableNumber   to hTableTo
56843>>>
56843>>>        Move APITableFrom.ApiTableInfo.sRootName to sRootName
56844>>>        Get _TableNameOnly sRootName             to sRootName
56845>>>        Move sRootName to APITableTo.ApiTableInfo.sRootName
56846>>>
56846>>>        // First we need to check that the logical table names are the same (so the order of tables in the Filelist.cfg is the same).
56846>>>        // bCodeGenerateMode = True = Code Generation mode.
56846>>>        If (bCodeGenerateMode = True) Begin
56848>>>            // If table doesn't exist in the TO database we want to create 'ApiTableUpdate' code for it.
56848>>>            If (Trim(Uppercase(APITableTo.ApiTableInfo.sLogicalName)) = "") Begin
56850>>>                Function_Return False
56851>>>            End
56851>>>>
56851>>>            Move (Trim(Uppercase(APITableFrom.ApiTableInfo.sLogicalName)) = Trim(Uppercase(APITableTo.ApiTableInfo.sLogicalName))) to bIsSame
56852>>>            If (bIsSame = False) Begin
56854>>>                Send UserError ("Yikes! There is a serious problem with the Filelist.cfg slot number:" * String(hTableFrom) + ".\nThe FROM table logical name is:" * String(APITableFrom.ApiTableInfo.sLogicalName) * "\nwhile the TO table logical name is:" * String(APITableTo.ApiTableInfo.sLogicalName) * ".\nThis needs to be fixed before you can generate code for this table number.")
56855>>>                Move True to bFilelistError
56856>>>                Function_Return False
56857>>>            End
56857>>>>
56857>>>        End
56857>>>>
56857>>>
56857>>>        If (bCodeGenerateMode = False) Begin
56859>>>            // Then we want to create this table
56859>>>            If (Trim(Uppercase(APITableTo.ApiTableInfo.sLogicalName)) = "") Begin
56861>>>                Function_Return False
56862>>>            End
56862>>>>
56862>>>
56862>>>            Move (Trim(Uppercase(APITableFrom.ApiTableInfo.sLogicalName)) = Trim(Uppercase(APITableTo.ApiTableInfo.sLogicalName))) to bIsSame
56863>>>            If (bIsSame = False) Begin
56865>>>                Error DFERR_PROGRAM ("'UtilTableCompare function' problem in Filelist.cfg! Table No:" * String(hTableFrom) + ".\nThe FROM table logical name is:" * String(APITableFrom.ApiTableInfo.sLogicalName) * "\nwhile the TO table logical name is:" * String(APITableTo.ApiTableInfo.sLogicalName) * "No changes was made for this entry.")
56866>>>>
56866>>>                Move True to bFilelistError
56867>>>                Function_Return False
56868>>>            End
56868>>>>
56868>>>        End
56868>>>>
56868>>>
56868>>>        // Check columns:
56868>>>        Move APITableFrom.ApiTableInfo.iTableNumber to hTableFrom
56869>>>        Move APITableFrom.ApiTableInfo.bIsSQL       to bIsSQLFrom
56870>>>        Move APITableFrom.ApiTableInfo.sDriverID    to sDriverIDFrom
56871>>>        Move APITableTo.ApiTableInfo.iTableNumber   to hTableTo
56872>>>        Move APITableTo.ApiTableInfo.bIsSQL         to bIsSQLTo
56873>>>        Move APITableTo.ApiTableInfo.sDriverID      to sDriverIDTo
56874>>>        Get UtilColumnsStructFill hTableTo          to APITableTo.aApiColumns
56875>>>        Get UtilColumnCombineFromAndToArrays APITableFrom.aApiColumns APITableTo.aApiColumns to aAPIColumnCompare
56876>>>        Get UtilColumnsCompare sDriverIDFrom sDriverIDTo bIsSQLFrom bIsSQLTo aAPIColumnCompare bCompareDate_DateTime to bIsSame
56877>>>        If (bIsSame = False) Begin
56879>>>            Function_Return False
56880>>>        End
56880>>>>
56880>>>
56880>>>        // ...then check indexes:
56880>>>        Get UtilIndexesStructFill hTableFrom to APITableTo.aApiIndexes
56881>>>        Get UtilIndexCombineFromAndToArrays APITableFrom.aApiIndexes APITableTo.aApiIndexes to aAPIIndexCompare
56882>>>        Get UtilIndexesCompare bIsSQLFrom bIsSQLTo aAPIIndexCompare bCompareIndexUppercase bCompareIndexAscending to bIsSame
56883>>>        If (bIsSame = False) Begin
56885>>>            Function_Return False
56886>>>        End
56886>>>>
56886>>>
56886>>>        // ...and finally relationships:
56886>>>        Get UtilRelationsStructFill hTableFrom to APITableTo.aApiRelations
56887>>>        Get UtilRelationCombineFromAndToArrays APITableFrom.aApiRelations APITableTo.aApiRelations to aAPIRelationCompare
56888>>>        Move (IsSameArray(APITableFrom.aApiRelations, APITableTo.aApiRelations)) to bIsSame
56889>>>        Get UtilRelationsCompare hTableFrom aAPIRelationCompare to bIsSame
56890>>>
56890>>>        Function_Return (bIsSame = True)
56891>>>    End_Function
56892>>>
56892>>>    // Similar to UtilTableCompare, but takes a tAPITableCompare struct array and a tAPITableBooleans struct as params.
56892>>>    Function UtilTableCompare_Ex tAPITableCompare APITableCompare tAPITableBooleans CompareTableBooleans Boolean bCodeGenerateMode Boolean ByRef bFilelistError Returns Boolean
56894>>>        Handle hTable
56894>>>        Boolean bIsSame bIsSQLFrom bIsSQLTo
56894>>>        String sRootName sDriverIDFrom sDriverIDTo
56894>>>
56894>>>        If (APITableCompare.APITableNameInfoCompare.bExistsFrom = False and APITableCompare.APITableNameInfoCompare.bExistsTo = False) Begin
56896>>>            Move True to bFilelistError
56897>>>            Function_Return False
56898>>>        End
56898>>>>
56898>>>
56898>>>        Move APITableCompare.hTable to hTable
56899>>>        Move True  to bIsSame
56900>>>        Move False to bFilelistError
56901>>>
56901>>>        If (APITableCompare.bExistsFrom = True) Begin
56903>>>            Move APITableCompare.APITableNameInfoCompare.sRootNameFrom to sRootName
56904>>>        End
56904>>>>
56904>>>        Else Begin
56905>>>            Move APITableCompare.APITableNameInfoCompare.sRootNameTo   to sRootName
56906>>>        End
56906>>>>
56906>>>        Get _TableNameOnly sRootName                                   to sRootName
56907>>>
56907>>>        Move APITableCompare.APITableNameInfoCompare.sDriverIDFrom     to sDriverIDFrom
56908>>>        Move APITableCompare.APITableNameInfoCompare.sDriverIDTo       to sDriverIDTo
56909>>>        Move APITableCompare.APITableNameInfoCompare.bIsSQLFrom        to bIsSQLFrom
56910>>>        Move APITableCompare.APITableNameInfoCompare.bIsSQLTo          to bIsSQLTo
56911>>>
56911>>>        // First we need to check that the logical table names are the same (so the order of tables in the Filelist.cfg are the same).
56911>>>        // bCodeGenerateMode = True = Code Generation mode.
56911>>>        If (bCodeGenerateMode = True) Begin
56913>>>            // If table doesn't exist in the TO database we want to create 'ApiTableUpdate' code for it.
56913>>>            If (APITableCompare.bExistsTo = False) Begin
56915>>>                Function_Return False
56916>>>            End
56916>>>>
56916>>>            Move (Uppercase(APITableCompare.APITableNameInfoCompare.sLogicalNameFrom) = Uppercase(APITableCompare.APITableNameInfoCompare.sLogicalNameTo)) to bIsSame
56917>>>            If (bIsSame = False) Begin
56919>>>                Send UserError ("Yikes! There is a problem with the Filelist.cfg slot number:" * String(hTable) + ;                    ".\nThe FROM table logical name is:" * String(APITableCompare.APITableNameInfoCompare.sLogicalNameFrom) * "\nwhile the TO table logical name is:" * ;                    String(APITableCompare.APITableNameInfoCompare.sLogicalNameTo) * ".\nThis needs to be fixed before you can generate code for this table number.")
56920>>>                Move True to bFilelistError
56921>>>                Function_Return False
56922>>>            End
56922>>>>
56922>>>        End
56922>>>>
56922>>>
56922>>>        If (bCodeGenerateMode = False) Begin
56924>>>            If (APITableCompare.bExistsTo = False) Begin
56926>>>                // Then we might want to create this table
56926>>>                Function_Return False
56927>>>            End
56927>>>>
56927>>>
56927>>>            Move (APITableCompare.APITableNameInfoCompare.bIsAliasFrom = APITableCompare.APITableNameInfoCompare.bIsAliasTo) to bIsSame
56928>>>            If (bIsSame = False) Begin
56930>>>                Function_Return False
56931>>>            End
56931>>>>
56931>>>
56931>>>            Move (APITableCompare.APITableNameInfoCompare.bIsSQLFrom = APITableCompare.APITableNameInfoCompare.bIsSQLTo) to bIsSame
56932>>>            If (bIsSame = False) Begin
56934>>>                Function_Return False
56935>>>            End
56935>>>>
56935>>>
56935>>>            Move (APITableCompare.APITableNameInfoCompare.bIsSystemFileFrom = APITableCompare.APITableNameInfoCompare.bIsSystemFileTo) to bIsSame
56936>>>            If (bIsSame = False) Begin
56938>>>                Function_Return False
56939>>>            End
56939>>>>
56939>>>
56939>>>            // Check table names et al.
56939>>>            Get UtilTableInfoCompare CompareTableBooleans.bCompareFilelistUppercase APITableCompare.APITableNameInfoCompare to bIsSame
56940>>>            If (bIsSame = False) Begin
56942>>>                Function_Return False
56943>>>            End
56943>>>>
56943>>>        End
56943>>>>
56943>>>
56943>>>        // Check Columns:
56943>>>        Get UtilColumnsCompare sDriverIDFrom sDriverIDTo bIsSQLFrom bIsSQLTo APITableCompare.aAPIColumnsCompare CompareTableBooleans.bCompareDate_DateTime to bIsSame
56944>>>        If (bIsSame = False) Begin
56946>>>            Function_Return False
56947>>>        End
56947>>>>
56947>>>
56947>>>        // ...then check Indexes:
56947>>>        Get UtilIndexesCompare bIsSQLFrom bIsSQLTo APITableCompare.aAPIIndexesCompare CompareTableBooleans.bCompareIndexUppercase CompareTableBooleans.bCompareIndexAscending to bIsSame
56948>>>        If (bIsSame = False) Begin
56950>>>            Function_Return False
56951>>>        End
56951>>>>
56951>>>
56951>>>        // ...and finally Relationships:
56951>>>        Get UtilRelationsCompare hTable APITableCompare.aAPIRelationsCompare to bIsSame
56952>>>
56952>>>        Function_Return (bIsSame = True)
56953>>>    End_Function
56954>>>
56954>>>    // To fill a complete Table array structure (tAPITable[]) with data.
56954>>>    // The data + filelist.cfg path, login et al must have been setup properly first.
56954>>>    // Pass a True as first parameter if the ghoStatusPanel is active and progress info should be shown.
56954>>>    // Pass a second True if this is a comparison and the text should either reflect "FROM" or "TO" database.
56954>>>    Function UtilTablesStructArrayFill Boolean bStatusPanel Boolean bCompareUtil Boolean bFromTables Returns tAPITable[]
56956>>>        tAPITableNameInfo ApiTableNameInfo
56956>>>        tAPITableNameInfo ApiTableNameInfo
56956>>>        tAPITable[]     aApiTables aApiTablesEmpty
56956>>>        tAPITable[]     aApiTables aApiTablesEmpty
56958>>>        tAPIColumn[]    aApiColumns
56958>>>        tAPIColumn[]    aApiColumns
56959>>>        tAPIIndex[]     aApiIndexes
56959>>>        tAPIIndex[]     aApiIndexes
56960>>>        tAPIRelation[]  aApiRelations
56960>>>        tAPIRelation[]  aApiRelations
56961>>>        Handle hTable
56961>>>        Integer iCount
56961>>>        Boolean bUserCancel bOK
56961>>>        String sLogicalName sMessageText
56961>>>
56961>>>        Get AutoConnectionIDLogin to bOK
56962>>>        Move 0 to hTable
56963>>>        If (bFromTables = True) Begin
56965>>>            Move "Reading 'FROM' Table Structure:" to sMessageText
56966>>>            If (bCompareUtil = True) Begin
56968>>>                Move (sMessageText * "(1 of 3)") to sMessageText
56969>>>            End
56969>>>>
56969>>>        End
56969>>>>
56969>>>        Else Begin
56970>>>            Move "Reading 'TO' Table Structure:" to sMessageText
56971>>>            If (bCompareUtil = True) Begin
56973>>>                Move (sMessageText * "(2 of 3)") to sMessageText
56974>>>            End
56974>>>>
56974>>>        End
56974>>>>
56974>>>        Set Message_Text of ghoStatusPanel to sMessageText
56975>>>
56975>>>        Get UtilFilelistNoOfTables to iCount
56976>>>        Set piMaximum of ghoProgressBar to iCount
56977>>>        Move 0 to iCount
56978>>>
56978>>>        Repeat
56978>>>>
56978>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
56981>>>            If (hTable > 0 and hTable <> 50) Begin
56983>>>
56983>>>                Open hTable
56985>>>                // ToDo: Needs to be revised
56985>>>                // For some reason tables may be reported as "unopened", while in
56985>>>                // fact the open was successful (!)
56985>>>//                Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
56985>>>//                If (bIsOpen = False) Begin
56985>>>//                    Move True to aApiTablesEmpty[0].bError
56985>>>//                    Move hTable to aApiTablesEmpty[0].ApiTableInfo.iTableNumber
56985>>>//                    Function_Return aApiTablesEmpty
56985>>>//                End
56985>>>
56985>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
56988>>>                Set piPosition of ghoProgressBar to iCount
56989>>>                Send DoAdvance of ghoProgressBarOverall
56990>>>                Set Action_Text of ghoStatusPanel to ("Number:" * String(hTable) * String(sLogicalName))
56991>>>
56991>>>                Get UtilTableStructFill hTable bFromTables to aApiTables[iCount]
56992>>>//                Close hTable DF_PERMANENT
56992>>>                Increment iCount
56993>>>            End
56993>>>>
56993>>>
56993>>>            If (bStatusPanel = True) Begin
56995>>>                Get Check_StatusPanel of ghoStatusPanel to bUserCancel
56996>>>                If (bUserCancel = True) Begin
56998>>>                    Move True to aApiTablesEmpty[0].bCancel
56999>>>                    Function_Return aApiTablesEmpty
57000>>>                End
57000>>>>
57000>>>            End
57000>>>>
57000>>>
57000>>>        Until (hTable = 0)
57002>>>
57002>>>        Function_Return aApiTables
57003>>>    End_Function
57004>>>
57004>>>    // Returns a 'single' table APITable struct.
57004>>>    Function UtilTableStructFill Handle hTable Boolean bFromTables Returns tAPITable
57006>>>        tAPITableNameInfo ApiTableNameInfo
57006>>>        tAPITableNameInfo ApiTableNameInfo
57006>>>        tAPITable         ApiTable ApiTableEmpty
57006>>>        tAPITable         ApiTable ApiTableEmpty
57006>>>        tAPIColumn[]     aApiColumns
57006>>>        tAPIColumn[]     aApiColumns
57007>>>        tAPIIndex[]      aApiIndexes
57007>>>        tAPIIndex[]      aApiIndexes
57008>>>        tAPIRelation[]   aApiRelations
57008>>>        tAPIRelation[]   aApiRelations
57009>>>        Boolean bIsOpen
57009>>>
57009>>>        Open hTable
57011>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
57014>>>        If (bIsOpen = False) Begin
57016>>>            Move True to ApiTableEmpty.bError
57017>>>            Move hTable to ApiTableEmpty.ApiTableInfo.iTableNumber
57018>>>            Function_Return ApiTableEmpty
57019>>>        End
57019>>>>
57019>>>
57019>>>        // Fill Table Name Info
57019>>>        Get UtilTableNameInfoStructFill hTable to ApiTableNameInfo
57020>>>
57020>>>        // Fill columns
57020>>>        Get UtilColumnsStructFill hTable to aApiColumns
57021>>>        If (SizeOfArray(aApiColumns)) Begin
57023>>>            If (aApiColumns[0].bCancel = True) Begin
57025>>>                Move True to ApiTableEmpty.bError
57026>>>                Move hTable to ApiTableEmpty.ApiTableInfo.iTableNumber
57027>>>                Function_Return ApiTableEmpty
57028>>>            End
57028>>>>
57028>>>        End
57028>>>>
57028>>>
57028>>>        // Fill indexes
57028>>>        Get UtilIndexesStructFill hTable to aApiIndexes
57029>>>        If (SizeOfArray(aApiIndexes)) Begin
57031>>>            If (aApiIndexes[0].bCancel = True) Begin
57033>>>                Move True to ApiTableEmpty.bError
57034>>>                Move hTable to ApiTableEmpty.ApiTableInfo.iTableNumber
57035>>>                Function_Return ApiTableEmpty
57036>>>            End
57036>>>>
57036>>>        End
57036>>>>
57036>>>
57036>>>        // Fill relationships
57036>>>        Get UtilRelationsStructFill hTable to aApiRelations
57037>>>        If (SizeOfArray(aApiRelations)) Begin
57039>>>            If (aApiRelations[0].bCancel = True) Begin
57041>>>                Move True to ApiTableEmpty.bError
57042>>>                Move hTable to ApiTableEmpty.ApiTableInfo.iTableNumber
57043>>>                Function_Return ApiTableEmpty
57044>>>            End
57044>>>>
57044>>>        End
57044>>>>
57044>>>
57044>>>        Move hTable             to ApiTable.hTable
57045>>>        Move bFromTables        to ApiTable.bFromTable
57046>>>        Move (not(bFromTables)) to ApiTable.bToTable
57047>>>
57047>>>        Move ApiTableNameInfo   to ApiTable.ApiTableInfo
57048>>>        Move aApiColumns        to ApiTable.aApiColumns
57049>>>        Move aApiIndexes        to ApiTable.aApiIndexes
57050>>>        Move aApiRelations      to ApiTable.aApiRelations
57051>>>
57051>>>        Function_Return ApiTable
57052>>>    End_Function
57053>>>
57053>>>    Function UtilTableNameInfoStructFill Handle hTable Returns tAPITableNameInfo
57055>>>        tAPITableNameInfo APITableNameInfo APITableNameInfoEmpty
57055>>>        tAPITableNameInfo APITableNameInfo APITableNameInfoEmpty
57055>>>        Boolean bIsOpen
57055>>>
57055>>>        Open hTable
57057>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
57060>>>        If (bIsOpen = False) Begin
57062>>>            Move True   to APITableNameInfoEmpty.bError
57063>>>            Move hTable to APITableNameInfoEmpty.iTableNumber
57064>>>            Function_Return APITableNameInfoEmpty
57065>>>        End
57065>>>>
57065>>>
57065>>>        Move hTable                                  to APITableNameInfo.iTableNumber
57066>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to APITableNameInfo.sRootName
57069>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to APITableNameInfo.sLogicalName
57072>>>        Get_Attribute DF_FILE_DISPLAY_NAME of hTable to APITableNameInfo.sDisplayName
57075>>>        Get_Attribute DF_FILE_DRIVER       of hTable to APITableNameInfo.sDriverID
57078>>>
57078>>>        Get UtilTableIsAlias                  hTable to APITableNameInfo.bIsAlias
57079>>>        Get _UtilTableIsSql                   hTable to APITableNameInfo.bIsSQL
57080>>>
57080>>>        Function_Return APITableNameInfo
57081>>>    End_Function
57082>>>
57082>>>    Function UtilFindTableArrayItem tAPITable[] ByRef aTableStructure String sLogicalTableName Returns Integer
57084>>>        Integer iSize iCount iItem
57084>>>        tAPITableNameInfo ApiTableNameInfo
57084>>>        tAPITableNameInfo ApiTableNameInfo
57084>>>
57084>>>        Move -1 to iItem
57085>>>        Move (SizeOfArray(aTableStructure)) to iSize
57086>>>        Decrement iSize
57087>>>        for iCount from 0 to iSize
57093>>>>
57093>>>            Move aTableStructure[iCount].ApiTableInfo to ApiTableNameInfo
57094>>>            If (Uppercase(ApiTableNameInfo.sLogicalName) = Uppercase(sLogicalTableName)) Begin
57096>>>                Move iCount to iItem
57097>>>                Move iSize  to iCount // We're done.
57098>>>            End
57098>>>>
57098>>>        Loop
57099>>>>
57099>>>
57099>>>        Function_Return iItem
57100>>>    End_Function
57101>>>
57101>>>    Function UtilTableArrayCompare tAPITable APITableFrom tAPITable APITableTo Returns Integer
57103>>>        If (APITableFrom.hTable  > APITableTo.hTable) ;            Function_Return (GT)
57106>>>        If (APITableFrom.hTable  < APITableTo.hTable) ;            Function_Return (LT)
57109>>>
57109>>>        If (APITableFrom.bFromTable = True)  ;            Function_Return (LT)
57112>>>        If (APITableFrom.bFromTable = False) ;            Function_Return (GT)
57115>>>
57115>>>        Function_Return (EQ)
57116>>>    End_Function
57117>>>
57117>>>    Function UtilTableCombineFromAndToArrays tAPITable[] aAPITableFrom tAPITable[] aAPITableTo Returns tAPITableCompare[]
57119>>>        Integer iCount iSize iSizeFrom iSizeTo iItemFrom iItemTo iItem
57119>>>        Handle hTable
57119>>>        tAPITable[] aAPITableFromAndTo
57119>>>        tAPITable[] aAPITableFromAndTo
57120>>>        tAPITable   APITableFrom APITableTo APITableEmpty
57120>>>        tAPITable   APITableFrom APITableTo APITableEmpty
57120>>>        tAPITableNameInfoCompare APITableNameInfoCompare
57120>>>        tAPITableNameInfoCompare APITableNameInfoCompare
57120>>>        tAPITableCompare[]    aAPITableCompare // This is the result set for this function
57120>>>        tAPITableCompare[]    aAPITableCompare // This is the result set for this function
57121>>>        tAPIColumnCompare[]   aAPIColumnCompare
57121>>>        tAPIColumnCompare[]   aAPIColumnCompare
57122>>>        tAPIIndexCompare[]    aAPIIndexCompare
57122>>>        tAPIIndexCompare[]    aAPIIndexCompare
57123>>>        tAPIRelationCompare[] aAPIRelationCompare
57123>>>        tAPIRelationCompare[] aAPIRelationCompare
57124>>>        tAPITableNameInfo ApiTableInfoEmpty ApiTableInfoFrom ApiTableInfoTo
57124>>>        tAPITableNameInfo ApiTableInfoEmpty ApiTableInfoFrom ApiTableInfoTo
57124>>>        tAPIColumn[]   aApiColumnsEmpty aApiColumnsFrom aApiColumnsTo
57124>>>        tAPIColumn[]   aApiColumnsEmpty aApiColumnsFrom aApiColumnsTo
57127>>>        tAPIIndex[]    aApiIndexEmpty aApiIndexFrom aApiIndexTo
57127>>>        tAPIIndex[]    aApiIndexEmpty aApiIndexFrom aApiIndexTo
57130>>>        tAPIRelation[] aApiRelationEmpty aApiRelationFrom aApiRelationTo
57130>>>        tAPIRelation[] aApiRelationEmpty aApiRelationFrom aApiRelationTo
57133>>>
57133>>>        Move (SizeOfArray(aAPITableFrom)) to iSizeFrom
57134>>>        Move (SizeOfArray(aAPITableTo))   to iSizeTo
57135>>>        If (iSizeFrom = 0 and iSizeTo = 0) Begin
57137>>>            Function_Return aAPITableCompare
57138>>>        End
57138>>>>
57138>>>
57138>>>        Move (AppendArray(aAPITableFrom, aAPITableTo)) to aAPITableFromAndTo
57139>>>        Move (SortArray(aAPITableFromAndTo, Self, RefFunc(UtilTableArrayCompare))) to aAPITableFromAndTo
57140>>>
57140>>>        Move 0 to iItem
57141>>>        Move (SizeOfArray(aAPITableFromAndTo)) to iSize
57142>>>        Decrement iSize
57143>>>        for iCount from 0 to iSize
57149>>>>
57149>>>
57149>>>            Move iCount to iItemFrom
57150>>>            Move iCount to iItemTo
57151>>>            Move APITableEmpty to APITableFrom
57152>>>            Move APITableEmpty to APITableTo
57153>>>
57153>>>            If (aAPITableFromAndTo[iCount].bFromTable = True) Begin
57155>>>                Move aAPITableFromAndTo[iCount]     to APITableFrom
57156>>>            End
57156>>>>
57156>>>            If (aAPITableFromAndTo[iCount].bToTable = True) Begin
57158>>>                Move aAPITableFromAndTo[iCount]     to APITableTo
57159>>>            End
57159>>>>
57159>>>            If (aAPITableFromAndTo[iCount].hTable = aAPITableFromAndTo[iCount + 1].hTable) Begin
57161>>>                Move aAPITableFromAndTo[iCount]     to APITableFrom
57162>>>                Move (iCount + 1) to iItemTo
57163>>>                Move aAPITableFromAndTo[iItemTo]    to APITableTo
57164>>>            End
57164>>>>
57164>>>            If (APITableFrom.hTable > APITableTo.hTable) Begin
57166>>>                Get FindTableNumber aAPITableTo APITableFrom.hTable to iItemTo
57167>>>                If (iItemTo <> -1) Begin
57169>>>                    Move aAPITableTo[iItemTo] to APITableTo
57170>>>                End
57170>>>>
57170>>>                Else Begin
57171>>>                    Move APITableEmpty to APITableTo
57172>>>                End
57172>>>>
57172>>>            End
57172>>>>
57172>>>
57172>>>            Move APITableFrom.ApiTableInfo  to ApiTableInfoFrom
57173>>>            Move APITableFrom.aApiColumns   to aApiColumnsFrom
57174>>>            Move APITableFrom.aApiIndexes   to aApiIndexFrom
57175>>>            Move APITableFrom.aApiRelations to aApiRelationFrom
57176>>>
57176>>>            Move APITableTo.ApiTableInfo    to ApiTableInfoTo
57177>>>            Move APITableTo.aApiColumns     to aApiColumnsTo
57178>>>            Move APITableTo.aApiIndexes     to aApiIndexTo
57179>>>            Move APITableTo.aApiRelations   to aApiRelationTo
57180>>>
57180>>>            Move aAPITableFromAndTo[iCount].hTable to hTable
57181>>>
57181>>>            If (hTable > 0) Begin
57183>>>
57183>>>                // Table info:
57183>>>                Get UtilTableINFOCombineFromAndToArrays ApiTableInfoFrom ApiTableInfoTo to APITableNameInfoCompare
57184>>>                Move APITableNameInfoCompare.iTableNumber                               to aAPITableCompare[iItem].hTable
57185>>>                Move APITableNameInfoCompare.bExistsFrom                                to aAPITableCompare[iItem].bExistsFrom
57186>>>                Move APITableNameInfoCompare.bExistsTo                                  to aAPITableCompare[iItem].bExistsTo
57187>>>                Move APITableNameInfoCompare                                            to aAPITableCompare[iItem].APITableNameInfoCompare
57188>>>
57188>>>                // Column info:
57188>>>                Get UtilColumnCombineFromAndToArrays aApiColumnsFrom aApiColumnsTo      to aAPIColumnCompare
57189>>>                Move aAPIColumnCompare                                                  to aAPITableCompare[iItem].aAPIColumnsCompare
57190>>>
57190>>>                // Index info:
57190>>>                Get UtilIndexCombineFromAndToArrays aApiIndexFrom aApiIndexTo           to aAPIIndexCompare
57191>>>                Move aAPIIndexCompare                                                   to aAPITableCompare[iItem].aAPIIndexesCompare
57192>>>
57192>>>                // Relation info:
57192>>>                Get UtilRelationCombineFromAndToArrays aApiRelationFrom aApiRelationTo  to aAPIRelationCompare
57193>>>                Move aAPIRelationCompare                                                to aAPITableCompare[iItem].aAPIRelationsCompare
57194>>>
57194>>>                Move False                                                              to aAPITableCompare[iItem].bShouldChange
57195>>>                Move False                                                              to aAPITableCompare[iItem].bCancel
57196>>>                Move False                                                              to aAPITableCompare[iItem].bError
57197>>>                If (iItemTo > iItemFrom) Begin
57199>>>                    Increment iCount
57200>>>                End
57200>>>>
57200>>>                Increment iItem
57201>>>            End
57201>>>>
57201>>>
57201>>>        Loop
57202>>>>
57202>>>
57202>>>        Function_Return aAPITableCompare
57203>>>    End_Function
57204>>>
57204>>>    Function FindTableNumber tAPITable[] ByRef aTableStructure Handle hTable Returns Integer
57206>>>        Integer iSize iCount iItem
57206>>>        tAPITableNameInfo ApiTableNameInfo
57206>>>        tAPITableNameInfo ApiTableNameInfo
57206>>>
57206>>>        Move -1 to iItem
57207>>>        Move (SizeOfArray(aTableStructure)) to iSize
57208>>>        Decrement iSize
57209>>>        For iCount from 0 to iSize
57215>>>>
57215>>>            Move aTableStructure[iCount].ApiTableInfo to ApiTableNameInfo
57216>>>            If (ApiTableNameInfo.iTableNumber = hTable) Begin
57218>>>                Move iCount to iItem
57219>>>                Move iSize  to iCount // We're done.
57220>>>            End
57220>>>>
57220>>>        Loop
57221>>>>
57221>>>
57221>>>        Function_Return iItem
57222>>>    End_Function
57223>>>
57223>>>    Function UtilTableInfoCombineFromAndToArrays tAPITableNameInfo APITableNameInfoFrom tAPITableNameInfo APITableNameInfoTo Returns tAPITableNameInfoCompare
57225>>>        tAPITableNameInfoCompare APITableNameInfoCompare
57225>>>        tAPITableNameInfoCompare APITableNameInfoCompare
57225>>>
57225>>>        If (APITableNameInfoFrom.iTableNumber = 0 and APITableNameInfoTo.iTableNumber = 0) Begin
57227>>>            Function_Return APITableNameInfoCompare
57228>>>        End
57228>>>>
57228>>>
57228>>>        // FROM database info:
57228>>>        If (APITableNameInfoFrom.iTableNumber > 0) Begin
57230>>>            Move APITableNameInfoFrom.iTableNumber  to APITableNameInfoCompare.iTableNumber
57231>>>            Move APITableNameInfoFrom.sRootName     to APITableNameInfoCompare.sRootNameFrom
57232>>>            Move APITableNameInfoFrom.sLogicalName  to APITableNameInfoCompare.sLogicalNameFrom
57233>>>            Move APITableNameInfoFrom.sDisplayName  to APITableNameInfoCompare.sDisplayNameFrom
57234>>>            Move APITableNameInfoFrom.sDriverID     to APITableNameInfoCompare.sDriverIDFrom
57235>>>            Move APITableNameInfoFrom.bIsAlias      to APITableNameInfoCompare.bIsAliasFrom
57236>>>            Move APITableNameInfoFrom.bIsSQL        to APITableNameInfoCompare.bIsSQLFrom
57237>>>            Move True                               to APITableNameInfoCompare.bExistsFrom
57238>>>        End
57238>>>>
57238>>>
57238>>>        // TO database info:
57238>>>        If (APITableNameInfoTo.iTableNumber > 0) Begin
57240>>>            Move APITableNameInfoTo.iTableNumber    to APITableNameInfoCompare.iTableNumber
57241>>>            Move APITableNameInfoTo.sRootName       to APITableNameInfoCompare.sRootNameTo
57242>>>            Move APITableNameInfoTo.sLogicalName    to APITableNameInfoCompare.sLogicalNameTo
57243>>>            Move APITableNameInfoTo.sDisplayName    to APITableNameInfoCompare.sDisplayNameTo
57244>>>            Move APITableNameInfoTo.sDriverID       to APITableNameInfoCompare.sDriverIDTo
57245>>>            Move APITableNameInfoTo.bIsAlias        to APITableNameInfoCompare.bIsAliasTo
57246>>>            Move APITableNameInfoTo.bIsSQL          to APITableNameInfoCompare.bIsSQLTo
57247>>>            Move True                               to APITableNameInfoCompare.bExistsTo
57248>>>        End
57248>>>>
57248>>>
57248>>>        Function_Return APITableNameInfoCompare
57249>>>    End_Function
57250>>>
57250>>>    // Note:
57250>>>    // The DF_FILE_TABLE_NAME attribute holds the name of the table at the back end. Depending on the back end, table
57250>>>    // names may be case sensitive, contain spaces or other special characters. This attribute is used to determine a table's
57250>>>    // back end name when using Embedded SQL. Since Embedded SQL works on the back end directly, the back end's name must be used.
57250>>>    // In most cases the back end name will be the same as the table name used in DataFlex.
57250>>>    // To do the opposite; To get the file handle from a table name string use the UtilTableNameToHandle function.
57250>>>    Function UtilTableHandleToString Handle hTable Returns String
57252>>>        String sTableName
57252>>>        Boolean bOpen bExists bOK
57252>>>
57252>>>        Get _UtilTableNumberIsInUse hTable to bExists
57253>>>        If (bExists = False) Begin
57255>>>            Function_Return ""
57256>>>        End
57256>>>>
57256>>>
57256>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
57257>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
57260>>>        If (bOpen = False) Begin
57262>>>            Get AutoConnectionIDLogin to bOK
57263>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57264>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_INTERMEDIATE_FILE
57265>>>            Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
57266>>>            Open hTable
57268>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57269>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_INTERMEDIATE_FILE
57270>>>            Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
57271>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
57274>>>        End
57274>>>>
57274>>>        If (bOpen = True) Begin
57276>>>            Send Ignore_Error of Error_Object_Id DFERR_UNSUPPORTED_ATTRIBUTE
57277>>>            Get_Attribute DF_FILE_TABLE_NAME of hTable to sTableName
57280>>>            // If blank it is an embedded table:
57280>>>            If (sTableName = "") Begin
57282>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
57285>>>                Move 0 to LastErr
57286>>>                Move False to Err
57287>>>            End
57287>>>>
57287>>>            Send Trap_Error of Error_Object_Id DFERR_UNSUPPORTED_ATTRIBUTE
57288>>>        End
57288>>>>
57288>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
57289>>>        Move 0 to LastErr
57290>>>
57290>>>        Function_Return sTableName
57291>>>    End_Function
57292>>>
57292>>>    // Returns the filenumber for the passed Table name from Filelist.cfg.
57292>>>    // Returns 0 if unsuccessful.
57292>>>    // To do the opposite; To get the string value from a table handle string use the UtilTableHandleToString function.
57292>>>    Function UtilTableNameToHandle String sTableName Returns Integer
57294>>>        String sValue sPrefixTableName sDriverID
57294>>>        Handle hTable hRetval
57294>>>
57294>>>        Get psDriverID to sDriverID
57295>>>        If (sDriverID <> DATAFLEX_ID and not(sTableName contains ":")) Begin
57297>>>            Move (sDriverID + ":" + sTableName) to sPrefixTableName
57298>>>        End
57298>>>>
57298>>>        Move 0 to hTable
57299>>>        Move 0 to hRetval
57300>>>        Repeat
57300>>>>
57300>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
57303>>>            If (hTable <> 0) Begin
57305>>>                Get_Attribute DF_FILE_ROOT_NAME of hTable to sValue
57308>>>                If (Uppercase(sValue) = Uppercase(sTableName) or Uppercase(sValue) = Uppercase(sPrefixTableName)) Begin
57310>>>                    Move hTable to hRetval
57311>>>                    Move 0 to hTable
57312>>>                End
57312>>>>
57312>>>            End
57312>>>>
57312>>>        Until (hTable = 0)
57314>>>
57314>>>        Function_Return hRetval
57315>>>    End_Function
57316>>>
57316>>>    // Use function to move all *.dat, *.k?? & *.hdr files to a "Data\Backup" folder
57316>>>    // _after_ all tables have successfully been converted to SQL (.int files)
57316>>>    Function UtilMoveAllEmbeddedToBackupFolder Returns Boolean
57318>>>        Boolean bOK bExists
57318>>>        String sDataPath sBackupFolder
57318>>>
57318>>>        Close DF_ALL DF_PERMANENT
57319>>>        Send DoAdvance of ghoProgressBar
57320>>>
57320>>>        Set Message_Text of ghoStatusPanel to "Moving Embedded (*.dat) files to Backup folder."
57321>>>        Move CS_DUFBackupDataFolder to sBackupFolder
57322>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
57323>>>        Get vFolderFormat sDataPath to sDataPath
57324>>>
57324>>>        Get vFilePathExists (sDataPath + sBackupFolder) to bExists
57325>>>        If (bExists = False) Begin
57327>>>            Get vCreateDirectory (sDataPath + sBackupFolder) to bOK
57328>>>            Get vFilePathExists (sDataPath + sBackupFolder) to bExists
57329>>>            If (bExists = False) Begin
57331>>>                Error DFERR_PROGRAM ("Could not create the the backup data folder to move all *.dat and *.k?? files to. You need to move them somewhere manually.")
57332>>>>
57332>>>                Function_Return False
57333>>>            End
57333>>>>
57333>>>        End
57333>>>>
57333>>>
57333>>>        Get vMoveFile (sDataPath + "*.dat") (sDataPath + sBackupFolder) to bOK
57334>>>        Get vMoveFile (sDataPath + "*.hdr") (sDataPath + sBackupFolder) to bOK
57335>>>        Get vMoveFile (sDataPath + "*.k??") (sDataPath + sBackupFolder) to bOK
57336>>>        Get vMoveFile (sDataPath + "*.vld") (sDataPath + sBackupFolder) to bOK
57337>>>        // We need to wait for Windows before we can copy files back
57337>>>        Sleep 2  
57338>>>        
57338>>>        //...except for these files that needs to be copied back to the Data folder:
57338>>>        Get vCopyFile (sBackupFolder + "\CodeMast.*")  sDataPath to bOK 
57339>>>        Get vCopyFile (sBackupFolder + "\CodeType.*")  sDataPath to bOK                                 
57340>>>        Get vCopyFile (sBackupFolder + "\Flexerrs.*")  sDataPath to bOK                                 
57341>>>        Get vCopyFile (sBackupFolder + "\DFErr001.*")  sDataPath to bOK                                 
57342>>>        Get vCopyFile (sBackupFolder + "\DFErr002.*")  sDataPath to bOK                                 
57343>>>        Get vCopyFile (sBackupFolder + "\DFErr003.*")  sDataPath to bOK                                 
57344>>>//            Get vCopyFile (sBackupFolder + "\DbVersion.*") sDataPath to bOK  
57344>>>        
57344>>>
57344>>>        Set Message_Text of ghoStatusPanel to ""
57345>>>        Function_Return True
57346>>>    End_Function
57347>>>    
57347>>>    Function UtilTableRepairAndReindexALL Returns Boolean
57349>>>        Boolean bOK bRetval
57349>>>        Handle hTable
57349>>>        Integer iSize iCount
57349>>>        
57349>>>        Move True to bOK
57350>>>        Get UtilFilelistNoOfTables to iSize
57351>>>        Set pbVisible    of ghoProgressBarOverall to True
57352>>>        Set piPosition   of ghoProgressBarOverall to 0
57353>>>        Set piMaximum    of ghoProgressBarOverall to iSize
57354>>>        Set piAdvanceBy  of ghoProgressBarOverall to 1
57355>>>
57355>>>        Repeat
57355>>>>
57355>>>            Set piPosition of ghoProgressBarOverall to iCount
57356>>>            Increment iCount
57357>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
57360>>>            If (hTable <> 0 and hTable <> 50) Begin // 50 = Flexerrs.
57362>>>                Get UtilTableRepairAndReindex hTable to bRetval
57363>>>                If (bRetval = False) Begin
57365>>>                    Move False to bOK
57366>>>                End
57366>>>>
57366>>>            End
57366>>>>
57366>>>        Until (hTable = 0)
57368>>>                
57368>>>        Function_Return bOK
57369>>>    End_Function           
57370>>>    
57370>>>    // Checks if an Embedded (DataFlex) data-file needs to be repaired.
57370>>>    // After the header has been repaired - also makes a re-index.  
57370>>>    // Returns TRUE if successful OR the table was an an ALIAS or SQL table in case we do nothing.
57370>>>    Function UtilTableRepairAndReindex Handle hTable Returns Boolean
57372>>>        Boolean bOK bIsAlias bIsEmbedded bIsOpen bBadExists
57372>>>        Integer iRetval
57372>>>        String sRootName sFileName sDataPath
57372>>>        
57372>>>        Move False to Err
57373>>>        Move 0 to LastErr 
57374>>>        Move True to bOK
57375>>>        
57375>>>        Get _UtilTableIsEmbedded hTable to bIsEmbedded
57376>>>        If (bIsEmbedded = False or hTable = 50) Begin // 50 = Flexerrs
57378>>>            Function_Return True
57379>>>        End
57379>>>>
57379>>>        Get UtilTableIsAlias hTable to bIsAlias 
57380>>>        If (bIsAlias = True) Begin
57382>>>            Function_Return True
57383>>>        End
57383>>>>
57383>>>        
57383>>>        // Check for bad file and remove if exists
57383>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
57386>>>        Set private.phCurrentTable to hTable  
57387>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT  
57388>>>        
57388>>>        // This is important! Else it can happen that the table can't be opened,
57388>>>        // with a "4077 - File in use" error.
57388>>>        Close DF_ALL DF_PERMANENT    
57389>>>        Open hTable
57391>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
57394>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
57395>>>        If (bIsOpen = False) Begin
57397>>>            Error DFERR_PROGRAM ("Could not open table to be repaired and reindexed:" * String(sRootName))
57398>>>>
57398>>>            Function_Return False        
57399>>>        End
57399>>>>
57399>>>
57399>>>        Get vFilePathExists (sRootName + ".BAD")  to bBadExists
57400>>>        If (bBadExists = True) Begin
57402>>>            Get_File_Path (sRootName + ".BAD") to sFileName
57403>>>            Get vDeleteFile sFileName to iRetval
57404>>>        End
57404>>>>
57404>>>        
57404>>>        Set TableName_Text of ghoStatusPanel to ("Repairing and reindex Table Name:" * sRootName * "Number:" * String(hTable))
57405>>>        
57405>>>        Move False to Err
57406>>>        // **** Repair and reindex the table. ****
57406>>>        Get UtilTableRepairEmbedded hTable sRootName to bOK
57407>>>
57407>>>        // Check for bad file: if it exists, something went wrong
57407>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
57408>>>        Get vFolderFormat sDataPath to sDataPath
57409>>>        Get vFilePathExists (sDataPath + sRootName + ".BAD") to bBadExists
57410>>>        If (bBadExists = True) Begin
57412>>>            Error DFERR_PROGRAM ("Error while sorting data. .BAD file created:"  * String(sRootName) + ".BAD")
57413>>>>
57413>>>            Move False to bOK
57414>>>        End
57414>>>>
57414>>>        Close hTable
57415>>>
57415>>>        Function_Return bOK
57416>>>    End_Function
57417>>>
57417>>>    // Repair and reindex the named DataFlex data-table.
57417>>>    // No checks are done if the passed table name is an embedded or SQL,
57417>>>    // so use with care (make sure you only pass embedded table names).
57417>>>    Function UtilTableRepairEmbedded Handle hTable String sTableName Returns Boolean
57419>>>        String sMode
57419>>>        Integer iVoid
57419>>>
57419>>>        Set Message_Text of ghoStatusPanel to "Repair/Reindex in progress..."
57420>>>        Move "0" to sMode   // 0=Reindex after repair!    
57421>>>        Close hTable        // The table needs to be closed, else error 4177 "Table in use".
57422>>>        Call_Driver 0 DATAFLEX_ID Function FLEX_REPAIR_FILE Callback ghoDbUpdateHandler Passing sTableName sMode 0 Result iVoid 
57427>>>        Set Message_Text of ghoStatusPanel to ""
57428>>>        Function_Return (iVoid = 0)
57429>>>    End_Function
57430>>>
57430>>>    // Returns _two_ arrays.
57430>>>    // Returns all files that are Master files in array ByRef iaFileIsMaster
57430>>>    // Also returns all files that are Alias files in a second array.
57430>>>    // IMPORTANT: All master & alias files _must_ have been included into
57430>>>    //            the DoSetAllMasterAndAlias message.
57430>>>    Function UtilTableAllMasterAndAliasFiles Integer[] ByRef iaFileIsMaster Returns Integer[]
57432>>>        Integer[] iaFileIsAlias
57433>>>        Integer hTable iFileAlias iSize
57433>>>        Boolean bOpen
57433>>>
57433>>>        Move 0 to hTable
57434>>>        Repeat
57434>>>>
57434>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
57437>>>            If (hTable <> 0) Begin
57439>>>                Open hTable
57441>>>                Get_Attribute DF_FILE_OPENED of hTable to bOpen
57444>>>                If (bOpen = True) Begin
57446>>>                    Get_Attribute DF_FILE_ALIAS of hTable to iFileAlias
57449>>>                    If (iFileAlias = DF_FILE_IS_MASTER) Begin
57451>>>                        Move (SizeOfArray(iaFileIsMaster)) to iSize
57452>>>                        Move hTable to iaFileIsMaster[iSize]
57453>>>                    End
57453>>>>
57453>>>                    Else If (iFileAlias = DF_FILE_IS_ALIAS) Begin
57456>>>                        Move (SizeOfArray(iaFileIsAlias)) to iSize
57457>>>                        Move hTable to iaFileIsAlias[iSize]
57458>>>                    End
57458>>>>
57458>>>                End
57458>>>>
57458>>>            End
57458>>>>
57458>>>        Until (hTable = 0)
57460>>>
57460>>>        Function_Return iaFileIsAlias
57461>>>    End_Function  
57462>>>    
57462>>>    // Is a repair of the data-header necessary? (Embedded tables only)
57462>>>    Function UtilTableRepairIsNeeded Handle hTable String sTableName Returns Integer
57464>>>        String sMode
57464>>>        Integer iRepairNeeded bIsOpen
57464>>>
57464>>>        Move "0" to sMode
57465>>>        Set private.phCurrentTable to hTable 
57466>>>        Close hTable
57467>>>        Open hTable
57469>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
57472>>>        Call_Driver hTable DATAFLEX_ID Function FLEX_GET_REPAIRS_NEEDED Callback 0 Passing sTableName sMode 0 Result iRepairNeeded
57477>>>
57477>>>        Function_Return iRepairNeeded
57478>>>    End_Function
57479>>>
57479>>>    // Helper function
57479>>>    // Takes two params:
57479>>>    //   1. An array with all master table numbers  (Function UtilTableAllMasterAndAliasFiles)
57479>>>    //   2. An array with all alias table numbers   (Function UtilTableAllMasterAndAliasFiles)
57479>>>    // Returns:
57479>>>    //  DF_FILE_ALIAS_DEFAULT if no master or alias
57479>>>    //  DF_FILE_IS_MASTER if master
57479>>>    //  DF_FILE_IS_ALIAS if alias
57479>>>    Function UtilTableIsMasterAlias Handle hTable Integer[] iaFileIsMaster Integer[] iaFileIsAlias Returns Integer
57481>>>        Integer i iSize
57481>>>
57481>>>        Move (SizeOfArray(iaFileIsMaster)) to iSize
57482>>>        Decrement iSize
57483>>>        for i from 0 to iSize
57489>>>>
57489>>>            If (hTable = iaFileIsMaster[i]) Begin
57491>>>                Function_Return DF_FILE_IS_MASTER
57492>>>            End
57492>>>>
57492>>>        Loop
57493>>>>
57493>>>
57493>>>        Move (SizeOfArray(iaFileIsAlias)) to iSize
57494>>>        Decrement iSize
57495>>>        for i from 0 to iSize
57501>>>>
57501>>>            If (hTable = iaFileIsAlias[i]) Begin
57503>>>                Function_Return DF_FILE_IS_ALIAS
57504>>>            End
57504>>>>
57504>>>        Loop
57505>>>>
57505>>>
57505>>>        Function_Return DF_FILE_ALIAS_DEFAULT
57506>>>    End_Function
57507>>>
57507>>>    // Determine the available indexes of a table.
57507>>>    //
57507>>>    // Arguments:
57507>>>    //   Handle hTable - The number of the table
57507>>>    //
57507>>>    // Returns:
57507>>>    //   String - A string to be used with the sort command
57507>>>    //   to re-index all indexes of a table.
57507>>>    Function UtilTableIndexString Handle hTable Returns String
57509>>>        String  sSortString
57509>>>        Integer iLastIndex iNumSegments iCount
57509>>>
57509>>>        Move "" to sSortString
57510>>>        Get_Attribute DF_FILE_LAST_INDEX_NUMBER of hTable to iLastIndex
57513>>>
57513>>>        for iCount from 1 to iLastIndex
57519>>>>
57519>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iCount to iNumSegments
57522>>>            If iNumSegments Begin
57524>>>                If (Length(sSortString)) ;                    Move (Append(sSortString, " ")) to sSortString
57527>>>                Move (Append(sSortString, iCount)) to sSortString
57528>>>            End
57528>>>>
57528>>>        Loop
57529>>>>
57529>>>
57529>>>        Function_Return sSortString
57530>>>    End_Function
57531>>>
57531>>>    
57531>>>    // * Dummy function for the Studio's Code Explorer *
57531>>>    Function API_COLUMN_UTILITY_FUNCTIONS Returns Boolean
57533>>>        Function_Return False
57534>>>    End_Function
57535>>>
57535>>>    // Compare multiple columns. (For 'FROM' & 'TO' tables)
57535>>>    Function UtilColumnsCompare String sDriverIDFrom String sDriverIDTo Boolean bIsSQLFrom Boolean bIsSQLTo tAPIColumnCompare[] aAPIColumnCompare Boolean bCompareDate_DataTime Returns Boolean
57537>>>        Boolean bIsSame
57537>>>        Integer iCount iColumns iColumn
57537>>>
57537>>>        Move True to bIsSame
57538>>>        Move (SizeOfArray(aAPIColumnCompare)) to iColumns
57539>>>        Set piMaximum of ghoProgressBar  to iColumns
57540>>>        Decrement iColumns
57541>>>
57541>>>        for iCount from 0 to iColumns
57547>>>>
57547>>>            Set piPosition of ghoProgressBar to iCount
57548>>>            Get UtilColumnCompare sDriverIDFrom sDriverIDTo bIsSQLFrom bIsSQLTo aAPIColumnCompare[iCount] bCompareDate_DataTime to bIsSame
57549>>>            If (bIsSame = False) Begin
57551>>>                Function_Return False
57552>>>            End
57552>>>>
57552>>>        Loop
57553>>>>
57553>>>
57553>>>        Function_Return (bIsSame = True)
57554>>>    End_Function
57555>>>
57555>>>    // Compares a single column (For 'FROM' & 'TO' tables)
57555>>>    Function UtilColumnCompare String sDriverIDFrom String sDriverIDTo Boolean bIsSQLFrom Boolean bIsSQLTo tAPIColumnCompare APIColumnCompare Boolean bCompareDate_DataTime Returns Boolean
57557>>>        Integer iFromType iToType iDbType
57557>>>        tColumnType ColumnType
57557>>>        tColumnType ColumnType
57557>>>        Boolean bIsDateTypeFrom bIsDateTypeTo
57557>>>
57557>>>        If (APIColumnCompare.bCancelFrom = True or APIColumnCompare.bCancelTo = True) Begin
57559>>>            Function_Return False
57560>>>        End
57560>>>>
57560>>>        If (APIColumnCompare.bExistsFrom = False or APIColumnCompare.bExistsTo = False) Begin
57562>>>            Function_Return False
57563>>>        End
57563>>>>
57563>>>        If (Uppercase(APIColumnCompare.sFieldNameFrom) <> Uppercase(APIColumnCompare.sFieldNameTo)) Begin
57565>>>            Function_Return False
57566>>>        End                                                                
57566>>>>
57566>>>
57566>>>        If (bIsSQLFrom = True and bIsSQLTo = True) Begin
57568>>>            If (APIColumnCompare.bAllowNULLFrom <> APIColumnCompare.bAllowNULLTo) Begin
57570>>>                Function_Return False
57571>>>            End
57571>>>>
57571>>>            If (APIColumnCompare.sDefaultValueFrom <> APIColumnCompare.sDefaultValueTo) Begin
57573>>>                If ((APIColumnCompare.sDefaultValueFrom = ""   and APIColumnCompare.sDefaultValueTo = "''") or ;                    (APIColumnCompare.sDefaultValueFrom = "''" and APIColumnCompare.sDefaultValueTo = "")) Begin
57575>>>                    End
57575>>>>
57575>>>                Else Begin
57576>>>                    Function_Return False
57577>>>                End
57577>>>>
57577>>>            End
57577>>>>
57577>>>        End
57577>>>>
57577>>>
57577>>>        Get piDbType                       to iDbType
57578>>>        Move APIColumnCompare.iTypeFrom    to iFromType
57579>>>        Move APIColumnCompare.iTypeTo      to iToType
57580>>>
57580>>>        // If one of the two tables are SQL and the other Embedded we need to "translate"
57580>>>        // data types between Embedded and SQL.
57580>>>        If (bIsSQLFrom = True and bIsSQLTo = False) Begin
57582>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iFromType APIColumnCompare.iLengthFrom to iFromType
57583>>>        End
57583>>>>
57583>>>        If (bIsSQLFrom = False and bIsSQLTo = True) Begin
57585>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDTo iDbType iToType APIColumnCompare.iLengthTo to iToType
57586>>>        End
57586>>>>
57586>>>
57586>>>        Get UtilColumnIsDateType iFromType bIsSQLFrom to bIsDateTypeFrom
57587>>>        Get UtilColumnIsDateType iToType   bIsSQLTo   to bIsDateTypeTo
57588>>>
57588>>>        // Make Date and DateTime comparison?
57588>>>        If (bCompareDate_DataTime = True) Begin
57590>>>            If (iFromType <> iToType) Begin
57592>>>                Function_Return False
57593>>>            End
57593>>>>
57593>>>        End
57593>>>>
57593>>>
57593>>>        // This is when not checking for Date/DateTime differences but all other other field types...
57593>>>        If (bCompareDate_DataTime = False and bIsDateTypeFrom = False) Begin
57595>>>            If (iFromType <> iToType) Begin
57597>>>                Function_Return False
57598>>>            End
57598>>>>
57598>>>        End
57598>>>>
57598>>>
57598>>>        // Only if the field is not a Date type (any of them) we compare length & precision.
57598>>>        If (bIsDateTypeFrom = False) Begin
57600>>>            If (APIColumnCompare.iLengthFrom <> APIColumnCompare.iLengthTo) Begin
57602>>>                Function_Return False
57603>>>            End
57603>>>>
57603>>>            If (APIColumnCompare.iPrecisionFrom <> APIColumnCompare.iPrecisionTo) Begin
57605>>>                Function_Return False
57606>>>            End
57606>>>>
57606>>>        End
57606>>>>
57606>>>
57606>>>        If (APIColumnCompare.iOptionsFrom <> APIColumnCompare.iOptionsTo) Begin
57608>>>            Function_Return False
57609>>>        End
57609>>>>
57609>>>
57609>>>        Function_Return True
57610>>>    End_Function
57611>>>
57611>>>    Function UtilColumnsStructFill Handle hTable Returns tAPIColumn[]
57613>>>        Integer iNumColumns iColumn iCount iOptions iDbType iType iCheckFieldNumber iDriverID
57613>>>        Boolean bIdentityKey bSqlDriver bIsOpen bExists bIsSqlTable bUserCancel
57613>>>        tAPIColumn[] APIColumns APIColumnsEmpty
57613>>>        tAPIColumn[] APIColumns APIColumnsEmpty
57615>>>        String sDriverID sRootName sLogicalName sDataType
57615>>>
57615>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
57616>>>        Get piDbType to iDbType
57617>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
57620>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
57623>>>
57623>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
57626>>>        If (bIsOpen = False) Begin
57628>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57629>>>            Open hTable
57631>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57632>>>            Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
57635>>>            If (bIsOpen = False) Begin
57637>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
57638>>>                Move True to APIColumnsEmpty[0].bError
57639>>>                Function_Return APIColumnsEmpty
57640>>>            End
57640>>>>
57640>>>        End
57640>>>>
57640>>>
57640>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
57643>>>        Get IsSQLDriver    sDriverID to bSqlDriver
57644>>>        Get _UtilTableIsSqlByRootName sRootName to bIsSqlTable
57645>>>        If (bIsSqlTable = True) Begin
57647>>>            Get _UtilTableExists hTable to bExists
57648>>>            If (bExists = False) Begin
57650>>>                Move True to APIColumnsEmpty[0].bError
57651>>>                Function_Return APIColumnsEmpty
57652>>>            End
57652>>>>
57652>>>        End
57652>>>>
57652>>>//        Get DriverIndex sDriverID to iDriverID
57652>>>//        If (sDriverID = MSSQLDRV_ID) Begin
57652>>>//            Set_Attribute DF_DRIVER_MAP_DFDATETIME_TO_SQLTYPE of iDriverId to 'datetime2'
57652>>>//        End
57652>>>
57652>>>        Move 0 to iCount
57653>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
57656>>>        Set piMaximum of ghoProgressBar to iNumColumns
57657>>>
57657>>>        for iColumn from 1 to iNumColumns
57663>>>>
57663>>>            Move 0 to iOptions
57664>>>            Move False to bIdentityKey
57665>>>            Move False to Err
57666>>>            Move 0     to LastErr
57667>>>            Move bIsSqlTable to APIColumns[iCount].bIsSQLType
57668>>>            Set piPosition of ghoProgressBar to iColumn
57669>>>
57669>>>            Send Ignore_Error of Error_Object_Id DFERR_UNSUPPORTED_ATTRIBUTE
57670>>>            If (bIsSqlTable = True) Begin 
57672>>>//                If (iType = DF_DATE) Begin
57672>>>//                    // Note: This is actually the same as SQL_DATETIME
57672>>>//                    Move SQL_DATE to iType
57672>>>//                    Move 3 to APIColumns[iCouknt].iPrecision
57672>>>//                End
57672>>>//                Else If (iType = DF_DATET Get_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to iTypeIME) Begin
57672>>>//                    // In modern MS-SQL databases SQL_DATETIME will be = to "datetime2".
57672>>>//                    // By default MS-SQL will create such a field with 7 (!) decimal places.
57672>>>//                    // This is just a waste because DataFlex will truncate that to 3 decimal
57672>>>//                    // places. Therefore, we hard-code the precision to be only thee decimals.
57672>>>//                    Move SQL_DATETIME to iType
57672>>>//                    Move 3 to APIColumns[iCount].iPrecision
57672>>>//                End
57672>>>//                Move iType                                                to APIColumns[iCount].iType
57672>>>                Get_Attribute DF_FIELD_NATIVE_TYPE      of hTable iColumn to APIColumns[iCount].iType
57675>>>                Get_Attribute DF_FIELD_NATIVE_TYPE_NAME of hTable iColumn to APIColumns[iCount].sType
57678>>>                Get_Attribute DF_FIELD_NULL_ALLOWED     of hTable iColumn to APIColumns[iCount].bAllowNULL
57681>>>                Get_Attribute DF_FIELD_DEFAULT_VALUE    of hTable iColumn to APIColumns[iCount].sDefaultValue
57684>>>            End
57684>>>>
57684>>>            Else Begin
57685>>>                Get_Attribute DF_FIELD_TYPE             of hTable iColumn to APIColumns[iCount].iType
57688>>>                Get UtilColumnTypeToString sDriverID iDbType APIColumns[iCount].iType to APIColumns[iCount].sType
57689>>>            End
57689>>>>
57689>>>
57689>>>            // If the array value is out of bounce it means that this column doesn't exist on the backend.
57689>>>            Get_Attribute DF_Field_Number of hTable iColumn to iCheckFieldNumber
57692>>>            Move (iCheckFieldNumber >= 0) to bExists
57693>>>            If (bExists = False) Begin
57695>>>                Move 0 to APIColumns[iCount].iType
57696>>>            End
57696>>>>
57696>>>            If (bExists = True) Begin
57698>>>                    Get_Attribute DF_FIELD_IS_IDENTITY of hTable iColumn to bIdentityKey
57701>>>            End
57701>>>>
57701>>>            Send Trap_Error of Error_Object_Id DFERR_UNSUPPORTED_ATTRIBUTE
57702>>>            If (bIdentityKey = True) Begin
57704>>>                Move C_tAPIColumn_Identity to APIColumns[iCount].iOptions
57705>>>            End
57705>>>>
57705>>>
57705>>>//            Else Begin
57705>>>//                Move False to Err
57705>>>//                Move 0     to LastErr
57705>>>//                If (bIsSqlTable = True) Begin
57705>>>//                    Get_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to APIColumns[iCount].iType
57705>>>//                End
57705>>>//                Else Begin
57705>>>//                    Get_Attribute DF_FIELD_TYPE        of hTable iColumn to APIColumns[iCount].iType
57705>>>//                    Get UtilColumnTypeToString sDriverID iDbType APIColumns[iCount].iType to APIColumns[iCount].sType
57705>>>//                End
57705>>>//                // If the array value is out of bounce it means that this column doesn't exist on the backend.
57705>>>//                Move (LastErr <> DFERR_ARRAY_INDEX_OUT_OF_BOUNDS) to bExists
57705>>>//                If (bExists = False) Begin
57705>>>//                    Move 0 to APIColumns[iCount].iType
57705>>>//                End
57705>>>//            End
57705>>>
57705>>>            If (bExists = True) Begin
57707>>>                Move iColumn to APIColumns[iCount].iFieldNumber
57708>>>                Get_Attribute DF_FIELD_NAME        of hTable iColumn to APIColumns[iCount].sFieldName
57711>>>                // ToDo: Can't use native_size as it can get way to big and causes "out of memory" problems.
57711>>>//                If (bIsSqlTable = True) Begin
57711>>>//                    Get_Attribute DF_FIELD_NATIVE_SIZE of hTable iColumn to APIColumns[iCount].iLength
57711>>>//                    Get_Attribute DF_FIELD_PRECISION   of hTable iColumn to APIColumns[iCount].iPrecision
57711>>>//                End
57711>>>                Get_Attribute DF_FIELD_LENGTH      of hTable iColumn to APIColumns[iCount].iLength 
57714>>>                If (APIColumns[iCount].iPrecision = 0) Begin
57716>>>                    Get_Attribute DF_FIELD_PRECISION   of hTable iColumn to APIColumns[iCount].iPrecision
57719>>>                End
57719>>>>
57719>>>
57719>>>                // If the length was zero we might have an Overlap(!) field.
57719>>>                // We then need check the DF_FIELD_TYPE if it really is and reset data for this array item.
57719>>>                If (APIColumns[iCount].iLength = 0) Begin
57721>>>                    Get_Attribute DF_FIELD_TYPE    of hTable iColumn to iType
57724>>>                    If (iType = DF_OVERLAP) Begin
57726>>>                        Move 0 to APIColumns[iCount].iFieldNumber
57727>>>                        Move 0 to APIColumns[iCount].iLength
57728>>>                        Move 0 to APIColumns[iCount].iOptions
57729>>>                        Move 0 to APIColumns[iCount].iPrecision
57730>>>                        Move DF_OVERLAP to APIColumns[iCount].iType
57731>>>                        Move "" to APIColumns[iCount].sFieldName
57732>>>                        Decrement iCount
57733>>>                    End
57733>>>>
57733>>>                End
57733>>>>
57733>>>            End
57733>>>>
57733>>>            Get Check_StatusPanel of ghoStatusPanel to bUserCancel
57734>>>            If (bUserCancel = True) Begin
57736>>>                Move True to APIColumnsEmpty[0].bCancel
57737>>>                Function_Return APIColumnsEmpty
57738>>>            End
57738>>>>
57738>>>            Increment iCount
57739>>>        Loop
57740>>>>
57740>>>
57740>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
57741>>>        Function_Return APIColumns
57742>>>    End_Function
57743>>>     
57743>>>    // ToDo: Shouldn't this be the other way round? The From bit last? That is what should be of interest??
57743>>>    // *** 
57743>>>    // This will return a struct array with the combined data for the passed FROM and TO column arrays.
57743>>>    // The combined data will be sorted on the first struct member: iFieldNumber
57743>>>    Function UtilColumnCombineFromAndToArrays tAPIColumn[] APIColumnFrom tAPIColumn[] APIColumnTo Returns tAPIIndexCompare[]
57745>>>        tAPIColumnCompare[] aAPIColumnCompare
57745>>>        tAPIColumnCompare[] aAPIColumnCompare
57746>>>        tAPIColumnCompare   APIColumnCompare
57746>>>        tAPIColumnCompare   APIColumnCompare
57746>>>        Integer iSizeFrom iSizeTo iSize iCount iItem
57746>>>
57746>>>        Move (SizeOfArray(APIColumnFrom)) to iSizeFrom
57747>>>        Decrement iSizeFrom
57748>>>        for iCount from 0 to iSizeFrom
57754>>>>
57754>>>            Move APIColumnFrom[iCount].iFieldNumber     to aAPIColumnCompare[iCount].iFieldNumber
57755>>>            Move APIColumnFrom[iCount].sFieldName       to aAPIColumnCompare[iCount].sFieldNameFrom
57756>>>            Move APIColumnFrom[iCount].iType            to aAPIColumnCompare[iCount].iTypeFrom
57757>>>            Move APIColumnFrom[iCount].sType            to aAPIColumnCompare[iCount].sTypeFrom
57758>>>            Move APIColumnFrom[iCount].iLength          to aAPIColumnCompare[iCount].iLengthFrom
57759>>>            Move APIColumnFrom[iCount].iPrecision       to aAPIColumnCompare[iCount].iPrecisionFrom
57760>>>            Move APIColumnFrom[iCount].iOptions         to aAPIColumnCompare[iCount].iOptionsFrom
57761>>>            Move APIColumnFrom[iCount].bIsSQLType       to aAPIColumnCompare[iCount].bIsSQLTypeFrom
57762>>>            Move APIColumnFrom[iCount].bAllowNULL       to aAPIColumnCompare[iCount].bAllowNULLFrom
57763>>>            Move APIColumnFrom[iCount].sDefaultValue    to aAPIColumnCompare[iCount].sDefaultValueFrom
57764>>>            Move APIColumnFrom[iCount].bShouldChange    to aAPIColumnCompare[iCount].bShouldChangeFrom
57765>>>            Move APIColumnFrom[iCount].bCancel          to aAPIColumnCompare[iCount].bCancelFrom
57766>>>            Move APIColumnFrom[iCount].bError           to aAPIColumnCompare[iCount].bErrorFrom
57767>>>            Move True                                   to aAPIColumnCompare[iCount].bExistsFrom
57768>>>        Loop
57769>>>>
57769>>>
57769>>>        Move (SizeOfArray(APIColumnTo)) to iSizeTo
57770>>>        Decrement iSizeTo
57771>>>        for iCount from 0 to iSizeTo
57777>>>>
57777>>>            Move APIColumnTo[iCount].iFieldNumber       to APIColumnCompare.iFieldNumber
57778>>>            // Search if the field number already exists in the "to" array; else add it. <
57778>>>            Move (SearchArray(APIColumnCompare, aAPIColumnCompare)) to iItem
57779>>>            If (iItem = -1) Begin
57781>>>                Move (SizeOfArray(aAPIColumnCompare))   to iItem
57782>>>            End
57782>>>>
57782>>>
57782>>>            Move APIColumnCompare.iFieldNumber          to aAPIColumnCompare[iItem].iFieldNumber
57783>>>            Move APIColumnTo[iCount].iFieldNumber       to aAPIColumnCompare[iItem].iFieldNumberTo
57784>>>            Move APIColumnTo[iCount].sFieldName         to aAPIColumnCompare[iItem].sFieldNameTo
57785>>>            Move APIColumnTo[iCount].iType              to aAPIColumnCompare[iItem].iTypeTo
57786>>>            Move APIColumnTo[iCount].sType              to aAPIColumnCompare[iItem].sTypeTo
57787>>>            Move APIColumnTo[iCount].iLength            to aAPIColumnCompare[iItem].iLengthTo
57788>>>            Move APIColumnTo[iCount].iPrecision         to aAPIColumnCompare[iItem].iPrecisionTo
57789>>>            Move APIColumnTo[iCount].iOptions           to aAPIColumnCompare[iItem].iOptionsTo
57790>>>            Move APIColumnTo[iCount].bIsSQLType         to aAPIColumnCompare[iItem].bIsSQLTypeTo
57791>>>            Move APIColumnTo[iCount].bAllowNULL         to aAPIColumnCompare[iItem].bAllowNULLTo
57792>>>            Move APIColumnTo[iCount].sDefaultValue      to aAPIColumnCompare[iItem].sDefaultValueTo
57793>>>            Move APIColumnTo[iCount].bShouldChange      to aAPIColumnCompare[iItem].bShouldChangeTo
57794>>>            Move APIColumnTo[iCount].bCancel            to aAPIColumnCompare[iItem].bCancelTo
57795>>>            Move APIColumnTo[iCount].bError             to aAPIColumnCompare[iItem].bErrorTo
57796>>>            Move True                                   to aAPIColumnCompare[iItem].bExistsTo
57797>>>        Loop
57798>>>>
57798>>>
57798>>>        Move (SortArray(aAPIColumnCompare)) to aAPIColumnCompare
57799>>>
57799>>>        Function_Return aAPIColumnCompare
57800>>>    End_Function
57801>>>
57801>>>    // Checks if a field name exists in a table definition
57801>>>    // Returns True if it does
57801>>>    // Sample:
57801>>>    //   Get UtilColumnExists MyTable.File_Number "MyColumnName" to iExists
57801>>>    Function UtilColumnExists Handle hTable String sFieldName Returns Boolean
57803>>>        Integer iNumColumns iColumn
57803>>>        String sColumn
57803>>>        Boolean bExists bOK bOpen
57803>>>
57803>>>        Get AutoConnectionIDLogin to bOK
57804>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57805>>>        Open hTable
57807>>>        Send Trap_Error   of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57808>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
57811>>>        If (bOpen = False) Begin
57813>>>            Function_Return False
57814>>>        End
57814>>>>
57814>>>
57814>>>        Move False to bExists
57815>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
57818>>>        for iColumn from 1 to iNumColumns
57824>>>>
57824>>>            Get_Attribute DF_FIELD_NAME of hTable iColumn to sColumn
57827>>>            If (Uppercase(sFieldName) = Uppercase(sColumn)) Begin
57829>>>                Move iNumColumns to iColumn
57830>>>                Move True to bExists
57831>>>            End
57831>>>>
57831>>>        Loop
57832>>>>
57832>>>        Close hTable
57833>>>
57833>>>        Function_Return bExists
57834>>>    End_Function
57835>>>
57835>>>    // Returns the field/column number for the passed FieldName as an integer.
57835>>>    Function UtilColumnNameToColumnNumber Handle hTable String sFieldName Returns Integer
57837>>>        Integer iNumColumns iColumn iRetval
57837>>>        String sColumn
57837>>>        Boolean bOK bOpen
57837>>>
57837>>>        Get AutoConnectionIDLogin to bOK
57838>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
57839>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57840>>>        Open hTable
57842>>>        Send Trap_Error   of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57843>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
57846>>>        If (bOpen = False) Begin
57848>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
57849>>>            Function_Return False
57850>>>        End
57850>>>>
57850>>>
57850>>>        Move 0 to iColumn
57851>>>        Move 0 to iRetval
57852>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
57855>>>        for iColumn from 1 to iNumColumns
57861>>>>
57861>>>            Get_Attribute DF_FIELD_NAME of hTable iColumn to sColumn
57864>>>            If (Uppercase(sFieldName) = Uppercase(sColumn)) Begin
57866>>>                Move iColumn to iRetval
57867>>>                Move iNumColumns to iColumn
57868>>>            End
57868>>>>
57868>>>        Loop
57869>>>>
57869>>>        Close hTable
57870>>>
57870>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
57871>>>        Function_Return iRetval
57872>>>    End_Function
57873>>>
57873>>>    // To convert between a data type string name and its integer constant declaration. E.g."VarChar" -> SQL_VarChar
57873>>>    // The reciprocal function is UtilColumnTypeToString.
57873>>>    Function UtilColumnTypeToInteger String sDriverID Integer iDbType String sDataType Returns Integer
57875>>>        tColumnType RetvalType
57875>>>        tColumnType RetvalType
57875>>>
57875>>>        Get _UtilColumnType sDriverID iDbType 0 sDataType False to RetvalType
57876>>>        Function_Return RetvalType.iSQLType
57877>>>    End_Function
57878>>>
57878>>>    // To convert between an integer data type constant and its string value. E.g. SQL_VarChar -> "VarChar".
57878>>>    // The reciprocal function is UtilColumnTypeToString.
57878>>>    Function UtilColumnTypeToString String sDriverID Integer iDbType Integer iDataType Returns String
57880>>>        tColumnType RetvalType
57880>>>        tColumnType RetvalType
57880>>>
57880>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
57881>>>        Function_Return RetvalType.sSQLType
57882>>>    End_Function
57883>>>
57883>>>    Function UtilColumnTypePrecision String sDriverID Integer iDbType Integer iDataType Returns String
57885>>>        tColumnType RetvalType
57885>>>        tColumnType RetvalType
57885>>>
57885>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
57886>>>        Function_Return RetvalType.sPrecision
57887>>>    End_Function
57888>>>
57888>>>    Function UtilColumnTypeFixed String sDriverID Integer iDbType Integer iDataType Returns Boolean
57890>>>        tColumnType RetvalType
57890>>>        tColumnType RetvalType
57890>>>
57890>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
57891>>>        // Nils 2019-02-15. This return value seems to have been wrong. The function should return False
57891>>>        // if the column type length is _not_ fixed.
57891>>>        Function_Return (RetvalType.bCanEditSize = False)
57892>>>    End_Function
57893>>>
57893>>>    Function UtilColumnTypePrecisionSize String sDriverID Integer iDbType Integer iDataType Returns Integer
57895>>>        tColumnType RetvalType
57895>>>        tColumnType RetvalType
57895>>>        String sValue
57895>>>        Integer iRetval iPos
57895>>>
57895>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
57896>>>        Move RetvalType.sPrecision to sValue
57897>>>        Move (Pos(".", sValue)) to iPos
57898>>>        If (iPos <> 0) Begin
57900>>>            Move (Left(sValue, (iPos -1))) to iRetval
57901>>>        End
57901>>>>
57901>>>        Else Begin
57902>>>            Move sValue to iRetval
57903>>>        End
57903>>>>
57903>>>        Function_Return iRetval
57904>>>    End_Function
57905>>>
57905>>>    Function UtilColumnTypePrecisionDec String sDriverID Integer iDbType Integer iDataType Returns Integer
57907>>>        tColumnType RetvalType
57907>>>        tColumnType RetvalType
57907>>>        String sValue
57907>>>        Integer iRetval iPos
57907>>>
57907>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
57908>>>        Move RetvalType.sPrecision to sValue
57909>>>        Move (Pos(".", sValue)) to iPos
57910>>>        If (iPos = 0) Begin
57912>>>            Function_Return 0
57913>>>        End
57913>>>>
57913>>>        Move (Mid(sValue, 99, (iPos + 1))) to iRetval
57914>>>
57914>>>        Function_Return iRetval
57915>>>    End_Function
57916>>>
57916>>>    // * Dummy function for the Studio's Code Explorer *
57916>>>    Function API_INDEX_UTILITY_FUNCTIONS Returns Boolean
57918>>>        Function_Return False
57919>>>    End_Function
57920>>>
57920>>>    // Compares multiple indexes for a 'FROM' and a 'TO' table.
57920>>>    Function UtilIndexesCompare Boolean bIsSQLTableFrom Boolean bIsSQLTableTo tAPIIndexCompare[] aAPIIndexCompare Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Boolean
57922>>>        Boolean bIsSame
57922>>>        Integer iCount iSize
57922>>>
57922>>>        Move True to bIsSame
57923>>>        Move (SizeOfArray(aAPIIndexCompare)) to iSize
57924>>>        Decrement iSize
57925>>>        For iCount from 0 to iSize
57931>>>>
57931>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
57932>>>            Send Ignore_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
57933>>>            Get UtilIndexCompare bIsSQLTableFrom bIsSQLTableTo aAPIIndexCompare[iCount] bCompareIndexUppercase bCompareIndexAscending to bIsSame
57934>>>            Send Trap_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
57935>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
57936>>>            If (bIsSame = False) Begin
57938>>>                Function_Return False
57939>>>            End
57939>>>>
57939>>>        Loop
57940>>>>
57940>>>
57940>>>        Function_Return bIsSame
57941>>>    End_Function
57942>>>
57942>>>    // Compares a single index for a 'FROM' and a 'TO' table.
57942>>>    Function UtilIndexCompare Boolean bIsSQLTableFrom Boolean bIsSQLTableTo tAPIIndexCompare APIIndexCompare Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Boolean
57944>>>        Boolean bIsSame
57944>>>        Integer iSegment
57944>>>
57944>>>        Move (APIIndexCompare.bExistsFrom = APIIndexCompare.bExistsTo) to bIsSame
57945>>>        If (bIsSame = False) Begin
57947>>>            Function_Return False
57948>>>        End
57948>>>>
57948>>>        Move (APIIndexCompare.iPrimaryIndexFrom = APIIndexCompare.iPrimaryIndexTo) to bIsSame
57949>>>        If (bIsSame = False) Begin
57951>>>            Function_Return False
57952>>>        End
57952>>>>
57952>>>
57952>>>        If (bIsSqlTableFrom = True and bIsSqlTableTo = True) Begin
57954>>>            // * We should probably not compare SQL index names?
57954>>>            // Move (Uppercase(aIndexFrom.sSQLIndexName) = Uppercase(aIndexTo.sSQLIndexName)) to bIsSame
57954>>>            // If (bIsSame = False) Begin   DF_INDEX_SERVER_ONLY
57954>>>            //     Function_Return False
57954>>>            // End
57954>>>            Move (APIIndexCompare.bIsSQLPrimaryKeyFrom = APIIndexCompare.bIsSQLPrimaryKeyTo) to bIsSame
57955>>>            If (bIsSame = False) Begin
57957>>>                Function_Return False
57958>>>            End
57958>>>>
57958>>>            Move (APIIndexCompare.bIsSQLClusteredFrom = APIIndexCompare.bIsSQLClusteredTo) to bIsSame
57959>>>            If (bIsSame = False) Begin
57961>>>                Function_Return False
57962>>>            End
57962>>>>
57962>>>            Move (APIIndexCompare.iSQLIndexTypeFrom = APIIndexCompare.iSQLIndexTypeTo) to bIsSame
57963>>>            If (bIsSame = False) Begin
57965>>>                Function_Return False
57966>>>            End
57966>>>>
57966>>>            Move (Uppercase(APIIndexCompare.sSQLIndexNameFrom) = Uppercase(APIIndexCompare.sSQLIndexNameTo)) to bIsSame
57967>>>            If (bIsSame = False) Begin
57969>>>                Function_Return False
57970>>>            End
57970>>>>
57970>>>        End
57970>>>>
57970>>>
57970>>>        Get UtilIndexSegmentsCompare APIIndexCompare.IndexSegmentArrayFrom APIIndexCompare.IndexSegmentArrayTo bCompareIndexUppercase bCompareIndexAscending to iSegment
57971>>>        Move (iSegment = -1) to bIsSame
57972>>>
57972>>>        Function_Return bIsSame
57973>>>    End_Function
57974>>>
57974>>>    // Compares each segment for the passed index.
57974>>>    // Returns -1 if same; else returns the index segment that differs.
57974>>>    Function UtilIndexSegmentsCompare tAPIIndexSegment[] aIndexSegmentFrom tAPIIndexSegment[] aIndexSegmentTo Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Integer
57976>>>        Integer iNumSegmentsFrom iNumSegmentsTo iNumSegments iSegment
57976>>>        Boolean bIsSame
57976>>>
57976>>>        Send Ignore_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
57977>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
57978>>>        Move (SizeOfArray(aIndexSegmentFrom))      to iNumSegmentsFrom
57979>>>        Move (SizeOfArray(aIndexSegmentTo))        to iNumSegmentsTo 
57980>>>        If (iNumSegmentsFrom <> iNumSegmentsTo) Begin
57982>>>            Function_Return -1
57983>>>        End
57983>>>>
57983>>>        Move (iNumSegmentsFrom max iNumSegmentsTo) to iNumSegments
57984>>>
57984>>>        Decrement iNumSegments
57985>>>        for iSegment from 0 to iNumSegments
57991>>>>
57991>>>            Move False to bIsSame
57992>>>            If (iSegment < iNumSegmentsFrom and iSegment < iNumSegmentsTo) Begin
57994>>>                Get UtilIndexSegmentCompare aIndexSegmentFrom[iSegment] aIndexSegmentTo[iSegment] bCompareIndexUppercase bCompareIndexAscending to bIsSame
57995>>>            End
57995>>>>
57995>>>            If (bIsSame = False) Begin
57997>>>                Send Trap_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
57998>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
57999>>>                Function_Return iSegment
58000>>>            End
58000>>>>
58000>>>        Loop
58001>>>>
58001>>>
58001>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
58002>>>        Function_Return -1 // This means bIsSame = True
58003>>>    End_Function
58004>>>
58004>>>    Function UtilIndexSegmentCompare tAPIIndexSegment aIndexSegmentFrom tAPIIndexSegment aIndexSegmentTo Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Integer
58006>>>        Boolean bIsSame
58006>>>
58006>>>        Move (aIndexSegmentFrom.iFieldNumber = aIndexSegmentTo.iFieldNumber) to bIsSame
58007>>>        If (bIsSame = False) Begin
58009>>>            Function_Return False
58010>>>        End
58010>>>>
58010>>>        If (bCompareIndexUppercase = True) Begin
58012>>>            Move (aIndexSegmentFrom.bUppercase = aIndexSegmentTo.bUppercase) to bIsSame
58013>>>            If (bIsSame = False) Begin
58015>>>                Function_Return False
58016>>>            End
58016>>>>
58016>>>        End
58016>>>>
58016>>>        If (bCompareIndexAscending = True) Begin
58018>>>            Move (aIndexSegmentFrom.bAscending = aIndexSegmentTo.bAscending) to bIsSame
58019>>>            If (bIsSame = False) Begin
58021>>>                Function_Return False
58022>>>            End
58022>>>>
58022>>>        End
58022>>>>
58022>>>
58022>>>        Function_Return True
58023>>>    End_Function
58024>>>
58024>>>    Function UtilIndexesUpdate Handle hTable Boolean bIsSQLTableFrom Boolean bIsSQLTableTo tAPIIndex[] aIndexesFrom tAPIIndex[] aIndexesTo Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Boolean
58026>>>        Boolean bIsSame bOK
58026>>>        Integer iSize iSizeTo iCount
58026>>>        tAPIIndexCompare[] aAPIIndexCompare
58026>>>        tAPIIndexCompare[] aAPIIndexCompare
58027>>>
58027>>>        Move (SizeOfArray(aIndexesFrom)) to iSize
58028>>>        If (iSize = 0) Begin
58030>>>            Function_Return True
58031>>>        End
58031>>>>
58031>>>        Move (SizeOfArray(aIndexesTo)) to iSizeTo
58032>>>        Get _UtilTableIsSql hTable to bIsSQLTableTo
58033>>>        Get UtilIndexCombineFromAndToArrays aIndexesFrom aIndexesTo to aAPIIndexCompare
58034>>>
58034>>>        For iCount from 0 to (iSize - 1)
58040>>>>
58040>>>            Get UtilIndexCompare bIsSQLTableFrom bIsSQLTableTo aAPIIndexCompare[iCount] bCompareIndexUppercase bCompareIndexAscending to bIsSame
58041>>>            If (bIsSame = False) Begin
58043>>>                Get APIIndexCreateByFieldNames hTable aIndexesFrom[iCount] aIndexesTo aIndexesFrom[iCount].IndexSegmentArray to bOK
58044>>>            End
58044>>>>
58044>>>        Loop
58045>>>>
58045>>>
58045>>>        // We probably should delete other indexes if they exists.
58045>>>        For iCount from (iSize +1) to iSizeTo
58051>>>>
58051>>>            Get ApiIndexRemove hTable iCount to bOK
58052>>>        Loop
58053>>>>
58053>>>
58053>>>        Function_Return bOK
58054>>>    End_Function
58055>>>
58055>>>    Function UtilIndexesStructFill Handle hTable Returns tAPIIndex[]
58057>>>        tAPIIndex[] APIIndexes
58057>>>        tAPIIndex[] APIIndexes
58058>>>        Integer iCount iIndex iIndexes iSegment iSegmentCount iNumSegments iColumn
58058>>>        String sDriverID
58058>>>        Boolean bDAWSQLDriver bIsOpen bIsSQLTable
58058>>>
58058>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
58059>>>        Get psDriverID to sDriverID
58060>>>        Get IsDAWSQLDriver sDriverID to bDAWSQLDriver
58061>>>        Get _UtilTableIsSql hTable to bIsSQLTable
58062>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
58065>>>        If (bIsOpen = False) Begin
58067>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
58068>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
58069>>>            Open hTable
58071>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
58072>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
58073>>>            Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
58076>>>            If (bIsOpen = False) Begin
58078>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
58079>>>                Move True to APIIndexes[0].bError
58080>>>                Function_Return APIIndexes
58081>>>            End
58081>>>>
58081>>>        End
58081>>>>
58081>>>
58081>>>        Move 0 to iCount
58082>>>        Get_Attribute DF_FILE_LAST_INDEX_NUMBER of hTable to iIndexes
58085>>>        For iIndex from 1 to iIndexes
58091>>>>
58091>>>            // This is a test that the index exists as there might be "holes" aka the index
58091>>>            // numbers doesn't not need to be consequitive:
58091>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
58094>>>            If (iNumSegments > 0) Begin
58096>>>
58096>>>                Move iIndex                                                     to APIIndexes[iCount].iIndexNumber
58097>>>                Get_Attribute DF_FILE_PRIMARY_INDEX of hTable                   to APIIndexes[iCount].iPrimaryIndex
58100>>>                If (bIsSQLTable = True) Begin
58102>>>                    Get_Attribute DF_INDEX_NAME         of hTable iIndex        to APIIndexes[iCount].sSQLIndexName
58105>>>                        Get_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable iIndex to APIIndexes[iCount].bIsSQLPrimaryKey
58108>>>                        Get_Attribute DF_INDEX_CLUSTERED of hTable iIndex       to APIIndexes[iCount].bIsSQLClustered
58111>>>                        Get_Attribute DF_INDEX_SQL_TYPE of hTable iIndex        to APIIndexes[iCount].iSQLIndexType // (DF_INDEX_SQL_TYPE = DF_INDEX_SERVER, DF_INDEX_CLIENT, DF_INDEX_SERVER_ONLY or DF_INDEX_TEMPORARY)
58114>>>                End
58114>>>>
58114>>>
58114>>>                Move 0 to iSegmentCount
58115>>>                Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
58118>>>                For iSegment from 1 to iNumSegments
58124>>>>
58124>>>                    Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iSegment to iColumn
58127>>>                    Move iColumn                                                       to APIIndexes[iCount].IndexSegmentArray[iSegmentCount].iFieldNumber
58128>>>                    Get_Attribute DF_FIELD_NAME              of hTable iColumn         to APIIndexes[iCount].IndexSegmentArray[iSegmentCount].sFieldName
58131>>>                    Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iSegment to APIIndexes[iCount].IndexSegmentArray[iSegmentCount].bUppercase
58134>>>                    Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iSegment to APIIndexes[iCount].IndexSegmentArray[iSegmentCount].bAscending
58137>>>                    Increment iSegmentCount
58138>>>                Loop
58139>>>>
58139>>>                Increment iCount
58140>>>            End
58140>>>>
58140>>>        Loop
58141>>>>
58141>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
58142>>>
58142>>>        Function_Return APIIndexes
58143>>>    End_Function
58144>>>
58144>>>    // This will return a struct array with the combined data for the passed FROM and TO index arrays.
58144>>>    // The combined data will be sorted on the first struct member: iIndexNumber
58144>>>    // This is needed because index numbers can start at any number. The range for a particular table might also
58144>>>    // have "holes" in the series of index numbers.
58144>>>    Function UtilIndexCombineFromAndToArrays tAPIIndex[] APIIndexFrom tAPIIndex[] APIIndexTo Returns tAPIIndexCompare[]
58146>>>        tAPIIndexCompare[] aAPIIndexCompare
58146>>>        tAPIIndexCompare[] aAPIIndexCompare
58147>>>        tAPIIndexCompare   APIIndexCompare
58147>>>        tAPIIndexCompare   APIIndexCompare
58147>>>        Integer iSizeFrom iSizeTo iSize iCount iItem
58147>>>
58147>>>        Move (SizeOfArray(APIIndexFrom)) to iSizeFrom
58148>>>        Move (SizeOfArray(APIIndexTo)) to iSizeTo
58149>>>        If (iSizeFrom = 0 and iSizeTo = 0) Begin
58151>>>            Function_Return aAPIIndexCompare
58152>>>        End
58152>>>>
58152>>>
58152>>>        Decrement iSizeFrom
58153>>>        for iCount from 0 to iSizeFrom
58159>>>>
58159>>>            Move APIIndexFrom[iCount].iIndexNumber      to aAPIIndexCompare[iCount].iIndexNumber
58160>>>            Move APIIndexFrom[iCount].iPrimaryIndex     to aAPIIndexCompare[iCount].iPrimaryIndexFrom
58161>>>            Move APIIndexFrom[iCount].sSQLIndexName     to aAPIIndexCompare[iCount].sSQLIndexNameFrom
58162>>>            Move APIIndexFrom[iCount].iSQLIndexType     to aAPIIndexCompare[iCount].iSQLIndexTypeFrom
58163>>>            Move APIIndexFrom[iCount].bIsSQLClustered   to aAPIIndexCompare[iCount].bIsSQLClusteredFrom
58164>>>            Move APIIndexFrom[iCount].bIsSQLPrimaryKey  to aAPIIndexCompare[iCount].bIsSQLPrimaryKeyFrom
58165>>>            Move APIIndexFrom[iCount].IndexSegmentArray to aAPIIndexCompare[iCount].IndexSegmentArrayFrom
58166>>>            Move APIIndexFrom[iCount].bShouldChange     to aAPIIndexCompare[iCount].bShouldChangeFrom
58167>>>            Move APIIndexFrom[iCount].bCancel           to aAPIIndexCompare[iCount].bCancelFrom
58168>>>            Move APIIndexFrom[iCount].bError            to aAPIIndexCompare[iCount].bErrorFrom
58169>>>            Move True                                   to aAPIIndexCompare[iCount].bExistsFrom
58170>>>        Loop
58171>>>>
58171>>>
58171>>>        Decrement iSizeTo
58172>>>        for iCount from 0 to iSizeTo
58178>>>>
58178>>>            Move APIIndexTo[iCount].iIndexNumber        to APIIndexCompare.iIndexNumber
58179>>>            // Search if the Index number already exists in the array; else add it.
58179>>>            Move (SearchArray(APIIndexCompare, aAPIIndexCompare)) to iItem
58180>>>            If (iItem = -1) Begin
58182>>>                Move (SizeOfArray(aAPIIndexCompare))    to iItem
58183>>>            End
58183>>>>
58183>>>
58183>>>            Move APIIndexCompare.iIndexNumber           to aAPIIndexCompare[iItem].iIndexNumber
58184>>>            Move APIIndexTo[iCount].iPrimaryIndex       to aAPIIndexCompare[iItem].iPrimaryIndexTo
58185>>>            Move APIIndexTo[iCount].sSQLIndexName       to aAPIIndexCompare[iItem].sSQLIndexNameTo
58186>>>            Move APIIndexTo[iCount].iSQLIndexType       to aAPIIndexCompare[iItem].iSQLIndexTypeTo
58187>>>            Move APIIndexTo[iCount].bIsSQLClustered     to aAPIIndexCompare[iItem].bIsSQLClusteredTo
58188>>>            Move APIIndexTo[iCount].bIsSQLPrimaryKey    to aAPIIndexCompare[iItem].bIsSQLPrimaryKeyTo
58189>>>            Move APIIndexTo[iCount].IndexSegmentArray   to aAPIIndexCompare[iItem].IndexSegmentArrayTo
58190>>>            Move APIIndexTo[iCount].bShouldChange       to aAPIIndexCompare[iItem].bShouldChangeTo
58191>>>            Move APIIndexTo[iCount].bCancel             to aAPIIndexCompare[iItem].bCancelTo
58192>>>            Move APIIndexTo[iCount].bError              to aAPIIndexCompare[iItem].bErrorTo
58193>>>            Move True                                   to aAPIIndexCompare[iItem].bExistsTo
58194>>>        Loop
58195>>>>
58195>>>
58195>>>        Move (SortArray(aAPIIndexCompare)) to aAPIIndexCompare
58196>>>
58196>>>        Function_Return aAPIIndexCompare
58197>>>    End_Function
58198>>>
58198>>>    // This is the same as the UtilIndexCompare function but it takes tAPIIndex structs as params.
58198>>>    Function UtilIndexTypeNumberCompare Handle hTable tAPIIndex aIndexFrom tAPIIndex aIndexTo Returns Boolean
58200>>>        Boolean bIsSame bDAWSQLDriver bIsSqlTable
58200>>>        String sDriverID
58200>>>
58200>>>        Get psDriverID to sDriverID
58201>>>        Get IsDAWSQLDriver sDriverID to bDAWSQLDriver
58202>>>        Get IsSQLDriver sDriverID to bIsSqlTable
58203>>>        If (bIsSqlTable = True) Begin
58205>>>            Get _UtilTableIsSql hTable to bIsSqlTable
58206>>>        End
58206>>>>
58206>>>
58206>>>        Move (aIndexFrom.iIndexNumber = aIndexTo.iIndexNumber) to bIsSame
58207>>>        If (bIsSame = False) Begin
58209>>>            Function_Return False
58210>>>        End
58210>>>>
58210>>>
58210>>>        If (bDAWSQLDriver = True and bIsSqlTable = True) Begin
58212>>>            // Don't think we should do this. Or should we?
58212>>>            // Move (aIndexesFrom[iCount].sSQLIndexName = aIndexesTo[iCount].sSQLIndexName) to bIsSame
58212>>>
58212>>>            Move (aIndexFrom.iSQLIndexType = aIndexTo.iSQLIndexType) to bIsSame
58213>>>            If (bIsSame = False) Begin
58215>>>                Function_Return False
58216>>>            End
58216>>>>
58216>>>            Move (aIndexFrom.iPrimaryIndex = aIndexTo.iPrimaryIndex) to bIsSame
58217>>>            If (bIsSame = False) Begin
58219>>>                Function_Return False
58220>>>            End
58220>>>>
58220>>>            Move (aIndexFrom.bIsSQLPrimaryKey = aIndexTo.bIsSQLPrimaryKey) to bIsSame
58221>>>            If (bIsSame = False) Begin
58223>>>                Function_Return False
58224>>>            End
58224>>>>
58224>>>            Move (aIndexFrom.bIsSQLClustered = aIndexTo.bIsSQLClustered) to bIsSame
58225>>>            If (bIsSame = False) Begin
58227>>>                Function_Return False
58228>>>            End
58228>>>>
58228>>>        End
58228>>>>
58228>>>
58228>>>        Function_Return bIsSame
58229>>>    End_Function
58230>>>
58230>>>    // DF_INDEX_SQL_TYPE values
58230>>>    // Pass one of the DF_INDEX_XXX integer constants and the function
58230>>>    // returns a string with the name.
58230>>>    Function UtilIndexTypeToString Integer iIndexType Returns String
58232>>>        String sRetval
58232>>>            Case Begin
58232>>>                Case (iIndexType = DF_INDEX_CLIENT)
58234>>>                    Move "DF_INDEX_CLIENT" to sRetval
58235>>>                    Case Break
58236>>>                Case (iIndexType = DF_INDEX_SERVER)
58239>>>                    Move "DF_INDEX_SERVER" to sRetval
58240>>>                    Case Break
58241>>>                Case (iIndexType = DF_INDEX_SERVER_ONLY)
58244>>>                    Move "DF_INDEX_SERVER_ONLY" to sRetval
58245>>>                    Case Break
58246>>>                Case (iIndexType = DF_INDEX_TEMPORARY)
58249>>>                    Move "DF_INDEX_TEMPORARY" to sRetval
58250>>>                    Case Break
58251>>>                Case Else
58251>>>                    Move "UNKNOWN INDEX TYPE" to sRetval
58252>>>            Case End
58252>>>        Function_Return sRetval
58253>>>    End_Function
58254>>>
58254>>>    // * Dummy function for the Studio's Code Explorer *
58254>>>    Function API_RELATION_UTILITY_FUNCTIONS Returns Boolean
58256>>>        Function_Return False
58257>>>    End_Function
58258>>>
58258>>>    // Compares multiple relationships for a 'FROM' and a 'TO' databases
58258>>>    Function UtilRelationsCompare Handle hTable tAPIRelationCompare[] aAPIRelationCompare Returns Boolean
58260>>>        Boolean bIsSame
58260>>>        Integer iSize iCount
58260>>>
58260>>>        Move True to bIsSame
58261>>>        Move (SizeOfArray(aAPIRelationCompare)) to iSize
58262>>>        Decrement iSize
58263>>>        For iCount from 0 to iSize
58269>>>>
58269>>>            Get UtilRelationCompare hTable aAPIRelationCompare[iCount] to bIsSame
58270>>>            If (bIsSame = False) Begin
58272>>>                Function_Return False
58273>>>            End
58273>>>>
58273>>>        Loop
58274>>>>
58274>>>
58274>>>        Function_Return bIsSame
58275>>>    End_Function
58276>>>
58276>>>    // Compares a single relationship for a 'FROM' and a 'TO' table
58276>>>    Function UtilRelationCompare Handle hTable tAPIRelationCompare APIRelationCompare Returns Boolean
58278>>>        Boolean bIsSame
58278>>>
58278>>>        Move True to bIsSame
58279>>>        If (APIRelationCompare.bExistsFrom <> APIRelationCompare.bExistsTo) Begin
58281>>>            Function_Return False
58282>>>        End
58282>>>>
58282>>>        If (APIRelationCompare.hTableFrom = 0 or APIRelationCompare.hTableTo = 0) Begin
58284>>>            Function_Return False
58285>>>        End
58285>>>>
58285>>>
58285>>>        // We could also compare field names, but I don't think that is necessary...
58285>>>
58285>>>        Function_Return bIsSame
58286>>>    End_Function
58287>>>
58287>>>    // This message is different from ApiTableCreate in that it will not do a function_return if the table
58287>>>    // already exists.
58287>>>    Function UtilRelationsUpdate Handle hTable tAPIRelation[] aRelationsFrom tAPIRelation[] aRelationsTo Returns Boolean
58289>>>        Boolean bOK
58289>>>        Integer iSizeTo iSize iCount iColumn
58289>>>        String sDriverID
58289>>>
58289>>>        Move True to bOK
58290>>>        Move (SizeOfArray(aRelationsTo))   to iSizeTo
58291>>>        If (iSizeTo > 0) Begin
58293>>>            Get AutoConnectionIDLogin to bOK
58294>>>            Move False to Err
58295>>>            Open hTable Mode DF_EXCLUSIVE
58297>>>            Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
58300>>>            Decrement iSizeTo
58301>>>
58301>>>            // We should probably not make any comparison between "FROM" and "TO" database; instead just create all "FROM" relations
58301>>>            // for the "TO" database. But start by deleting all current "TO" relations:
58301>>>            Structure_Start hTable sDriverID
58302>>>                for iCount from 0 to iSizeTo
58308>>>>
58308>>>                    Move aRelationsTo[iCount].iColumnFrom to iColumn
58309>>>                    Set_Attribute DF_FIELD_RELATED_FILE  of hTable iColumn to 0
58312>>>                    Set_Attribute DF_FIELD_RELATED_FIELD of hTable iColumn to 0
58315>>>                Loop
58316>>>>
58316>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
58317>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
58319>>>            Set Action_Text of ghoStatusPanel to ""
58320>>>        End
58320>>>>
58320>>>
58320>>>        Move (SizeOfArray(aRelationsFrom)) to iSize
58321>>>        Decrement iSize
58322>>>        for iCount from 0 to iSize
58328>>>>
58328>>>            Get ApiTableRelate aRelationsFrom[iCount].hTableFrom aRelationsFrom[iCount].hTableTo aRelationsFrom[iCount].iColumnFrom aRelationsFrom[iCount].iColumnTo aRelationsTo to bOK
58329>>>        Loop
58330>>>>
58330>>>
58330>>>        Function_Return bOK
58331>>>    End_Function
58332>>>
58332>>>    Function UtilRelationsStructFill Handle hTable Returns tAPIRelation[]
58334>>>        tAPIRelation[] APIRelations
58334>>>        tAPIRelation[] APIRelations
58335>>>        Integer iColumn iColumnTo iNumColumns iCount
58335>>>        Handle hParent
58335>>>        Boolean bIsOpen
58335>>>
58335>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
58336>>>        Move 0 to iCount
58337>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
58340>>>        If (bIsOpen = False) Begin
58342>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
58343>>>            Open hTable
58345>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
58346>>>            Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
58349>>>            If (bIsOpen = False) Begin
58351>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
58352>>>                Move True to APIRelations[0].bError
58353>>>                Function_Return APIRelations
58354>>>            End
58354>>>>
58354>>>        End
58354>>>>
58354>>>
58354>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
58357>>>        For iColumn from 1 to iNumColumns
58363>>>>
58363>>>            Get_Attribute DF_FIELD_RELATED_FILE of hTable iColumn to hParent
58366>>>            If (hParent <> 0) Begin
58368>>>                Open hParent
58370>>>                Move hTable                                             to APIRelations[iCount].hTableFrom
58371>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable            to APIRelations[iCount].sLogicalNameFrom
58374>>>                Move iColumn                                            to APIRelations[iCount].iColumnFrom
58375>>>                Get_Attribute DF_FIELD_NAME of hTable iColumn           to APIRelations[iCount].sFieldNameFrom
58378>>>
58378>>>                Move hParent                                            to APIRelations[iCount].hTableTo
58379>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hParent           to APIRelations[iCount].sLogicalNameTo
58382>>>                Get_Attribute DF_FIELD_RELATED_FIELD of hTable iColumn  to iColumnTo
58385>>>                Move iColumnTo                                          to APIRelations[iCount].iColumnTo
58386>>>                Get_Attribute DF_FIELD_NAME of hParent iColumnTo        to APIRelations[iCount].sFieldNameTo
58389>>>                Move False                                              to APIRelations[iCount].bShouldChange
58390>>>                Move False                                              to APIRelations[iCount].bCancel
58391>>>                Move False                                              to APIRelations[iCount].bError
58392>>>                Close hParent
58393>>>                Increment iCount
58394>>>            End
58394>>>>
58394>>>        Loop
58395>>>>
58395>>>
58395>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
58396>>>        Function_Return APIRelations
58397>>>    End_Function
58398>>>
58398>>>    // This will return a struct array with the combined data for the passed FROM and TO relation arrays.
58398>>>    // The combined data will be sorted on the first 4 struct members: hTableFrom, iColumnFrom, hTableTo and iColumnTo
58398>>>    Function UtilRelationCombineFromAndToArrays tAPIRelation[] aAPIRelationFrom tAPIRelation[] aAPIRelationTo Returns tAPIIndexCompare[]
58400>>>        tAPIRelation[] aAPIRelationFromAndTo
58400>>>        tAPIRelation[] aAPIRelationFromAndTo
58401>>>        tAPIRelationCompare[] aAPIRelationCompare
58401>>>        tAPIRelationCompare[] aAPIRelationCompare
58402>>>        tAPIRelationCompare   APIRelationCompare
58402>>>        tAPIRelationCompare   APIRelationCompare
58402>>>        Integer iSizeFrom iSizeTo iSize iCount iItem
58402>>>
58402>>>        Move (SizeOfArray(aAPIRelationFrom)) to iSizeFrom
58403>>>        Move (SizeOfArray(aAPIRelationTo))   to iSizeTo
58404>>>        If (iSizeFrom = 0 and iSizeTo = 0) Begin
58406>>>            Function_Return aAPIRelationCompare
58407>>>        End
58407>>>>
58407>>>
58407>>>        Move (AppendArray(aAPIRelationFrom, aAPIRelationTo)) to aAPIRelationFromAndTo
58408>>>        Move (SortArray(aAPIRelationFromAndTo, Self, RefFunc(__UtilRelationArrayCompare))) to aAPIRelationFromAndTo
58409>>>
58409>>>        Decrement iSizeFrom
58410>>>        for iCount from 0 to iSizeFrom
58416>>>>
58416>>>            Move aAPIRelationFrom[iCount].hTableFrom        to aAPIRelationCompare[iCount].hTableFrom
58417>>>            Move aAPIRelationFrom[iCount].iColumnFrom       to aAPIRelationCompare[iCount].iColumnFrom
58418>>>            Move aAPIRelationFrom[iCount].hTableTo          to aAPIRelationCompare[iCount].hTableTo
58419>>>            Move aAPIRelationFrom[iCount].iColumnTo         to aAPIRelationCompare[iCount].iColumnTo
58420>>>            Move aAPIRelationFrom[iCount].sLogicalNameFrom  to aAPIRelationCompare[iCount].sLogicalNameFrom_From
58421>>>            Move aAPIRelationFrom[iCount].sLogicalNameTo    to aAPIRelationCompare[iCount].sLogicalNameTo_From
58422>>>            Move aAPIRelationFrom[iCount].sFieldNameFrom    to aAPIRelationCompare[iCount].sFieldNameFrom_From
58423>>>            Move aAPIRelationFrom[iCount].sFieldNameTo      to aAPIRelationCompare[iCount].sFieldNameTo_From
58424>>>            Move aAPIRelationFrom[iCount].bShouldChange     to aAPIRelationCompare[iCount].bShouldChange_From
58425>>>            Move aAPIRelationFrom[iCount].bCancel           to aAPIRelationCompare[iCount].bCancel_From
58426>>>            Move aAPIRelationFrom[iCount].bError            to aAPIRelationCompare[iCount].bError_From
58427>>>            Move True                                       to aAPIRelationCompare[iCount].bExistsFrom
58428>>>        Loop
58429>>>>
58429>>>
58429>>>        Decrement iSizeTo
58430>>>        for iCount from 0 to iSizeTo
58436>>>>
58436>>>            Move aAPIRelationTo[iCount].hTableFrom          to APIRelationCompare.hTableFrom
58437>>>            Move aAPIRelationTo[iCount].iColumnFrom         to APIRelationCompare.iColumnFrom
58438>>>            Move aAPIRelationTo[iCount].hTableTo            to APIRelationCompare.hTableTo
58439>>>            Move aAPIRelationTo[iCount].iColumnTo           to APIRelationCompare.iColumnTo
58440>>>
58440>>>            // Search if the relation already exists in the array; else add it.
58440>>>            Move (SearchArray(APIRelationCompare, aAPIRelationCompare, Self, RefFunc(__SearchRelationCompare))) to iItem
58441>>>            If (iItem = -1) Begin
58443>>>                Move (SizeOfArray(aAPIRelationCompare))     to iItem
58444>>>            End
58444>>>>
58444>>>
58444>>>            Move APIRelationCompare.hTableFrom              to aAPIRelationCompare[iItem].hTableFrom
58445>>>            Move APIRelationCompare.iColumnFrom             to aAPIRelationCompare[iItem].iColumnFrom
58446>>>            Move APIRelationCompare.hTableTo                to aAPIRelationCompare[iItem].hTableTo
58447>>>            Move APIRelationCompare.iColumnTo               to aAPIRelationCompare[iItem].iColumnTo
58448>>>            Move aAPIRelationTo[iCount].sLogicalNameFrom    to aAPIRelationCompare[iItem].sLogicalNameFrom_To
58449>>>            Move aAPIRelationTo[iCount].sLogicalNameTo      to aAPIRelationCompare[iItem].sLogicalNameTo_To
58450>>>            Move aAPIRelationTo[iCount].sFieldNameFrom      to aAPIRelationCompare[iItem].sFieldNameFrom_To
58451>>>            Move aAPIRelationTo[iCount].sFieldNameTo        to aAPIRelationCompare[iItem].sFieldNameTo_To
58452>>>            Move aAPIRelationTo[iCount].bShouldChange       to aAPIRelationCompare[iItem].bShouldChange_To
58453>>>            Move aAPIRelationTo[iCount].bCancel             to aAPIRelationCompare[iItem].bCancel_To
58454>>>            Move aAPIRelationTo[iCount].bError              to aAPIRelationCompare[iItem].bError_To
58455>>>            Move True                                       to aAPIRelationCompare[iItem].bExistsTo
58456>>>        Loop
58457>>>>
58457>>>
58457>>>        Move (SortArray(aAPIRelationCompare, Self, RefFunc(__SearchRelationCompare))) to aAPIRelationCompare
58458>>>
58458>>>        Function_Return aAPIRelationCompare
58459>>>    End_Function
58460>>>
58460>>>    // * Dummy function for the Studio's Code Explorer *
58460>>>    Function CODEMAST_UTILITY_FUNCTIONS Returns Boolean
58462>>>        Function_Return False
58463>>>    End_Function
58464>>>
58464>>>    // To add a value to the CodeMast & CodeType tables. Pass; a) bCodeType if it is CodeType that should be updated.
58464>>>    // Else it is CodeMast. b) sTypeValue; either to be added If bCodeType = True, or it will be used to find the correct
58464>>>    // CodeType record. c) sValue1 and d) sValue2 is the CodeType Description & Comment, or CodeMast Type and Code values.
58464>>>    Function UtilCodeMasterAddValue Boolean bCodeType String sTypeValue String sValue2 String sValue3 Returns Boolean
58466>>>        Boolean bFound
58466>>>
58466>>>        Move False to Err
58467>>>        Open CodeMast
58469>>>        Open CodeType
58471>>>
58471>>>        If (bCodeType = True) Begin
58473>>>            Set Private.phCurrentTable to CODETYPE.File_Number
58474>>>            Clear CodeType
58475>>>            Move sTypeValue to CODETYPE.Type
58476>>>            Find eq CODETYPE by 1
58477>>>>
58477>>>            Move Found to bFound
58478>>>            If (bFound = True) Begin
58480>>>                Reread CodeType
58484>>>            End
58484>>>>
58484>>>            Else Begin
58485>>>                Clear CodeType
58486>>>            End
58486>>>>
58486>>>
58486>>>            Move sTypeValue to CODETYPE.Type
58487>>>            Move sValue2    to CODETYPE.Description
58488>>>            Move sValue3    to CODETYPE.Comment
58489>>>            SaveRecord CODETYPE
58490>>>
58490>>>            If (bFound = True) Begin
58492>>>                Unlock
58493>>>>
58493>>>            End
58493>>>>
58493>>>        End
58493>>>>
58493>>>
58493>>>        If (bCodeType = False) Begin
58495>>>            Set Private.phCurrentTable to CODEMAST.File_Number
58496>>>            Clear CODEMAST
58497>>>            Move sTypeValue to CODEMAST.Type
58498>>>            Move sValue2    to CODEMAST.Code
58499>>>            Find eq CODEMAST by 1
58500>>>>
58500>>>            Move Found to bFound
58501>>>            If (bFound = True) Begin
58503>>>                Reread CODEMAST
58507>>>            End
58507>>>>
58507>>>            Else Begin
58508>>>                Clear CODEMAST
58509>>>            End
58509>>>>
58509>>>
58509>>>            Move sTypeValue to CODEMAST.Type
58510>>>            Move sValue2    to CODEMAST.Code
58511>>>            Move sValue3    to CODEMAST.Description
58512>>>            SaveRecord CODEMAST
58513>>>
58513>>>            If (bFound = True) Begin
58515>>>                Unlock
58516>>>>
58516>>>            End
58516>>>>
58516>>>        End
58516>>>>
58516>>>
58516>>>        Close CodeMast
58517>>>        Close CodeType
58518>>>
58518>>>        Function_Return (Err = False)
58519>>>    End_Function
58520>>>
58520>>>    // Changes values in CodeType & CodeMast - From type value To type value. It first changes the type value in
58520>>>    // CodeType and then spins through all CodeMast records to change all related records.
58520>>>    Function UtilCodeMasterChangeValue String sFromValue String sToValue Returns Boolean
58522>>>        Boolean bFound
58522>>>
58522>>>        Move False to Err
58523>>>        Open CodeMast
58525>>>        Open CodeType
58527>>>
58527>>>        Clear CodeType
58528>>>        Move sFromValue to CODETYPE.Type
58529>>>        Find eq CODETYPE.Type
58530>>>>
58530>>>        If (Found = True) Begin
58532>>>            Reread CODETYPE
58536>>>                Move sToValue to CODETYPE.Type
58537>>>                SaveRecord CODETYPE
58538>>>            Unlock
58539>>>>
58539>>>        End
58539>>>>
58539>>>
58539>>>        Clear CODEMAST
58540>>>        Find gt CODEMAST by Recnum
58541>>>>
58541>>>        While (Found = True)
58545>>>            Move (Trim(Uppercase(CODEMAST.Type) = Trim(Uppercase(sFromValue)))) to bFound
58546>>>            If (bFound = True) Begin
58548>>>                Reread CODEMAST
58552>>>                    Move sToValue to CODEMAST.Type
58553>>>                    SaveRecord CODEMAST
58554>>>                Unlock
58555>>>>
58555>>>            End
58555>>>>
58555>>>            Find gt CODEMAST by Recnum
58556>>>>
58556>>>        Loop
58557>>>>
58557>>>
58557>>>        Close CodeMast
58558>>>        Close CodeType
58559>>>
58559>>>        Function_Return (Err = False)
58560>>>    End_Function
58561>>>
58561>>>    // Removes a value from CodeMast. Pass the sTypeValue and the sValue2 to remove.
58561>>>    Function UtilCodeMasterRemoveValue String sTypeValue String sValue2 Returns Boolean
58563>>>        Boolean bFound
58563>>>
58563>>>        Move False to Err
58564>>>        Open CodeMast
58566>>>
58566>>>        Clear CODEMAST
58567>>>        Move sTypeValue to CODEMAST.Type
58568>>>        Move sValue2    to CODEMAST.Code
58569>>>        Find eq CODEMAST.Code
58570>>>>
58570>>>        Move Found to bFound
58571>>>        If (bFound = True) Begin
58573>>>            Delete CODEMAST
58574>>>        End
58574>>>>
58574>>>
58574>>>        Close CodeMast
58575>>>
58575>>>        Function_Return (Err = False)
58576>>>    End_Function
58577>>>
58577>>>    Function UtilTableCreateCodeMastCodeTypeIntFiles String sDataPath Returns Boolean
58579>>>        Boolean bRecnum bToAnsi
58579>>>        Integer iCh
58579>>>        String sFileName sDriverID sConnectionID sSchemaName sANSI_OEM
58579>>>
58579>>>        If (Trim(sDataPath) = "") Begin
58581>>>            Function_Return False
58582>>>        End
58582>>>>
58582>>>
58582>>>        Move False to Err
58583>>>        Get psDriverID     to sDriverID
58584>>>        Get psConnectionID to sConnectionID
58585>>>        Get psSchema       to sSchemaName
58586>>>        Get True           to bRecnum
58587>>>        Get pbToANSI       to bToAnsi
58588>>>        Move CS_ANSI_Txt to sANSI_OEM
58589>>>        If (bToAnsi = False) Begin
58591>>>            Move CS_OEM_Txt to sANSI_OEM
58592>>>        End
58592>>>>
58592>>>
58592>>>        Get vFolderFormat sDataPath to sDataPath
58593>>>        Move "CodeMast.int"         to sFileName
58594>>>        Get Seq_Open_Output_Channel (sDataPath + sFileName) to iCh
58595>>>            Writeln channel iCh ("DRIVER_NAME" * sDriverID)
58598>>>            Writeln channel iCh ("SERVER_NAME DFCONNID=" + sConnectionID)
58601>>>            Writeln channel iCh ("DATABASE_NAME CODEMAST")
58604>>>            Writeln channel iCh ("SCHEMA_NAME" * sSchemaName)
58607>>>            Writeln channel iCh ("")
58610>>>            Writeln channel iCh ("RECNUM_TABLE YES")
58613>>>            Writeln channel iCh ("PRIMARY_INDEX 0")
58616>>>            Writeln channel iCh ("TABLE_CHARACTER_FORMAT" * sANSI_OEM)
58619>>>            Writeln channel iCh ("USE_DUMMY_ZERO_DATE YES")
58622>>>            Writeln channel iCh ("")
58625>>>            Writeln channel iCh ("INDEX_NUMBER 1")
58628>>>            Writeln channel iCh ("INDEX_NAME CODEMAST001_PK")
58631>>>            Writeln channel iCh ("")
58634>>>        Send Seq_Close_Channel iCh
58635>>>
58635>>>        Get vFolderFormat sDataPath to sDataPath
58636>>>        Move "CodeType.int"         to sFileName
58637>>>        Get Seq_Open_Output_Channel (sDataPath + sFileName) to iCh
58638>>>            Writeln channel iCh ("DRIVER_NAME" * sDriverID)
58641>>>            Writeln channel iCh ("SERVER_NAME DFCONNID=" + sConnectionID)
58644>>>            Writeln channel iCh ("DATABASE_NAME CODETYPE")
58647>>>            Writeln channel iCh ("SCHEMA_NAME" * sSchemaName)
58650>>>            Writeln channel iCh ("")
58653>>>            Writeln channel iCh ("RECNUM_TABLE YES")
58656>>>            Writeln channel iCh ("PRIMARY_INDEX 0")
58659>>>            Writeln channel iCh ("TABLE_CHARACTER_FORMAT" * sANSI_OEM)
58662>>>            Writeln channel iCh ("USE_DUMMY_ZERO_DATE YES")
58665>>>            Writeln channel iCh ("")
58668>>>            Writeln channel iCh ("INDEX_NUMBER 0")
58671>>>            Writeln channel iCh ("INDEX_NAME CODETYPE000")
58674>>>            Writeln channel iCh ("")
58677>>>            Writeln channel iCh ("INDEX_NUMBER 1")
58680>>>            Writeln channel iCh ("INDEX_NAME CODETYPE001_PK")
58683>>>            Writeln channel iCh ("")
58686>>>        Send Seq_Close_Channel iCh
58687>>>
58687>>>        Function_Return (Err = False)
58688>>>    End_Function
58689>>>
58689>>>    // * Dummy function for the Studio's Code Explorer *
58689>>>    Function OTHER_UTILITY_FUNCTIONS Returns Boolean
58691>>>        Function_Return False
58692>>>    End_Function
58693>>>
58693>>>    // Use function to move *.fd, termlist.*, collate.*, dfcollate.* files to a "Data\Backup" folder,
58693>>>    // and to remove all *.cch files (DAW SQL driver cache files. They will get recreated when needed.)
58693>>>    Function UtilMoveMiscFilesToBackupFolder Returns Boolean
58695>>>        Boolean bOK bExists
58695>>>        String sDataPath sBackupFolder
58695>>>
58695>>>        Set Message_Text of ghoStatusPanel to "Moving misc. files to Backup folder."
58696>>>        Move CS_DUFBackupDataFolder to sBackupFolder
58697>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
58698>>>        Get vFolderFormat sDataPath to sDataPath
58699>>>
58699>>>        Get vFilePathExists (sDataPath + sBackupFolder) to bExists
58700>>>        If (bExists = False) Begin
58702>>>            Get vCreateDirectory (sDataPath + sBackupFolder) to bOK
58703>>>            Get vFilePathExists (sDataPath + sBackupFolder) to bExists
58704>>>            If (bExists = False) Begin
58706>>>                Error DFERR_PROGRAM ("Could not create the the backup data folder to move all misc. files to. You need to move them somewhere manually.")
58707>>>>
58707>>>                Function_Return False
58708>>>            End
58708>>>>
58708>>>            Get vMoveFile (sDataPath + "*.fd")         (sDataPath + sBackupFolder) to bOK  
58709>>>            Get vMoveFile (sDataPath + "*.bad")        (sDataPath + sBackupFolder) to bOK  
58710>>>            Get vMoveFile (sDataPath + "*.err")        (sDataPath + sBackupFolder) to bOK  
58711>>>            Get vMoveFile (sDataPath + "*.bak")        (sDataPath + sBackupFolder) to bOK
58712>>>            Get vMoveFile (sDataPath + "*.def")        (sDataPath + sBackupFolder) to bOK
58713>>>            Get vMoveFile (sDataPath + "*.fil")        (sDataPath + sBackupFolder) to bOK
58714>>>            Get vMoveFile (sDataPath + "*.hlp")        (sDataPath + sBackupFolder) to bOK
58715>>>            Get vMoveFile (sDataPath + "*.old")        (sDataPath + sBackupFolder) to bOK           
58716>>>            Get vMoveFile (sDataPath + "*.prn")        (sDataPath + sBackupFolder) to bOK           
58717>>>            Get vMoveFile (sDataPath + "*.sts")        (sDataPath + sBackupFolder) to bOK           
58718>>>            Get vMoveFile (sDataPath + "*.td")         (sDataPath + sBackupFolder) to bOK           
58719>>>            Get vMoveFile (sDataPath + "*.log")        (sDataPath + sBackupFolder) to bOK           
58720>>>            Get vMoveFile (sDataPath + "*.bat")        (sDataPath + sBackupFolder) to bOK           
58721>>>            Get vMoveFile (sDataPath + "*.cmd")        (sDataPath + sBackupFolder) to bOK           
58722>>>            Get vMoveFile (sDataPath + "*.zip")        (sDataPath + sBackupFolder) to bOK           
58723>>>            Get vMoveFile (sDataPath + "*.abs")        (sDataPath + sBackupFolder) to bOK           
58724>>>            Get vMoveFile (sDataPath + "termlist.*")   (sDataPath + sBackupFolder) to bOK
58725>>>            Get vMoveFile (sDataPath + "*.dfr")        (sDataPath + sBackupFolder) to bOK
58726>>>            Get vMoveFile (sDataPath + "vsutil.cfg")   (sDataPath + sBackupFolder) to bOK
58727>>>            Get vMoveFile (sDataPath + "collate.*")    (sDataPath + sBackupFolder) to bOK
58728>>>            Get vMoveFile (sDataPath + "df_collate.*") (sDataPath + sBackupFolder) to bOK
58729>>>            Get vDeleteFile (sDataPath + "*.cch")                                  to bOK
58730>>>        End
58730>>>>
58730>>>
58730>>>        Set Message_Text of ghoStatusPanel to ""
58731>>>        Function_Return True
58732>>>    End_Function
58733>>>    
58733>>>    // Check if the file exists in the Data folder,
58733>>>    // else creates it from memory as it has been compiled into the program as a resource:
58733>>>    Function UtilCheckCreateIfFileExists String sFileName String sResourceName Boolean bDataFile Returns Boolean
58735>>>        String sPath
58735>>>        Boolean bExists
58735>>>
58735>>>        Get psDataPathFirstPart to sPath
58736>>>        Move (sPath + sFileName) to sFileName
58737>>>        Get vFilePathExists sFileName to bExists
58738>>>
58738>>>        If (bExists = False) Begin
58740>>>            // Read from memory & create file on disk.
58740>>>            Send SqlUtilCreateFileFromMemory sResourceName sFileName
58741>>>            Get vFilePathExists sFileName to bExists
58742>>>        End
58742>>>>
58742>>>        Function_Return bExists
58743>>>    End_Function
58744>>>
58744>>>    Function UtilSqlColumnTypeToDataFlexType String sDriverID Integer iDbType Integer iDataType Integer iLength Returns Integer
58746>>>        tColumnType RetvalType
58746>>>        tColumnType RetvalType
58746>>>        Integer iRetval
58746>>>
58746>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
58747>>>        Move RetvalType.iDataFlexType to iRetval
58748>>>        If (RetvalType.iDataFlexType = DF_TEXT) Begin
58750>>>            If (iLength <= 255) Begin
58752>>>                Move DF_ASCII to iRetval
58753>>>            End
58753>>>>
58753>>>        End
58753>>>>
58753>>>        Function_Return iRetval
58754>>>    End_Function
58755>>>             
58755>>>    Function UtilDataFlexDataTypeToString Integer iDataType Returns String
58757>>>        String sRetval
58757>>>
58757>>>        Case Begin
58757>>>            Case (iDataType = DF_ASCII)
58759>>>                Move "DF_ASCII" to sRetval
58760>>>                Case Break
58761>>>            Case (iDataType = DF_BCD)
58764>>>                Move "DF_BCD" to sRetval
58765>>>                Case Break
58766>>>            Case (iDataType = DF_BINARY)
58769>>>                Move "DF_BINARY" to sRetval
58770>>>                Case Break
58771>>>            Case (iDataType = DF_DATE)
58774>>>                Move "DF_DATE" to sRetval
58775>>>                Case Break
58776>>>            Case (iDataType = DF_DATETIME)
58779>>>                Move "DF_DATETIME" to sRetval
58780>>>                Case Break
58781>>>            Case (iDataType = DF_TEXT)
58784>>>                Move "DF_TEXT" to sRetval
58785>>>                Case Break
58786>>>            Case Else
58786>>>                Move "" to sRetval
58787>>>        Case End
58787>>>
58787>>>        Function_Return sRetval
58788>>>    End_Function
58789>>>
58789>>>    // The default value used for a datatype as specified in the driver int file.
58789>>>    Function UtilDataTypeDefaultValue String sDriverID Integer iDbType Integer iDataType Returns String
58791>>>        String sRetval sServer
58791>>>        tColumnType RetvalType
58791>>>        tColumnType RetvalType
58791>>>        Integer iDriver iDataFlexType
58791>>>        Handle hDatabase
58791>>>
58791>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
58792>>>        Move RetvalType.iDataFlexType to iDataFlexType
58793>>>        Get DriverIndex sDriverID to iDriver
58794>>>        Get psServer to sServer
58795>>>        Get SqlUtilDatabaseHandle sDriverID sServer to hDatabase
58796>>>        If (hDatabase = 0) Begin
58798>>>            Function_Return ""
58799>>>        End
58799>>>>
58799>>>
58799>>>        Case Begin
58799>>>            Case (iDataFlexType = DF_ASCII)
58801>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_ASCII     of iDriver hDatabase to sRetval
58804>>>                Case Break
58805>>>            Case (iDataFlexType = DF_BCD)
58808>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_NUMERIC   of iDriver hDatabase to sRetval
58811>>>                Case Break
58812>>>            Case (iDataFlexType = DF_BINARY)
58815>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_BINARY    of iDriver hDatabase to sRetval
58818>>>                Case Break
58819>>>            Case (iDataFlexType = DF_DATE)
58822>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_DATE      of iDriver hDatabase to sRetval
58825>>>                Case Break
58826>>>            Case (iDataFlexType = DF_DATETIME)
58829>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_DATETIME  of iDriver hDatabase to sRetval
58832>>>                Case Break
58833>>>            Case (iDataFlexType = DF_TEXT)
58836>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_TEXT      of iDriver hDatabase to sRetval
58839>>>                Case Break
58840>>>            Case Else
58840>>>                Move "" to sRetval
58841>>>        Case End
58841>>>
58841>>>        Function_Return sRetval
58842>>>    End_Function
58843>>>
58843>>>    Procedure Set Df_Database_Default_Default_Date_DUF String sDateValue
58845>>>        String sDriverID sServer
58845>>>        tColumnType RetvalType
58845>>>        tColumnType RetvalType
58845>>>        Integer iDbType iDriver
58845>>>        Handle hDatabase
58845>>>
58845>>>        Get psDriverID to sDriverID
58846>>>        Get piDbType   to iDbType
58847>>>        Get DriverIndex sDriverID to iDriver
58848>>>        Get psServer to sServer
58849>>>        Get SqlUtilDatabaseHandle sDriverID sServer to hDatabase
58850>>>        If (hDatabase = 0) Begin
58852>>>            Error DFERR_PROGRAM "Could not change the Default Date Value. Could not get a handle to the database. (Check that at least one connection is 'Enabled')"
58853>>>>
58853>>>            Procedure_Return
58854>>>        End
58854>>>>
58854>>>
58854>>>        Set_Attribute DF_DATABASE_DEFAULT_DEFAULT_DATE of iDriver hDatabase to sDateValue
58857>>>
58857>>>    End_Procedure
58858>>>
58858>>>    Procedure Set Df_Database_Default_Default_Datetime_DUF String sDateValue
58860>>>        String sDriverID sServer
58860>>>        tColumnType RetvalType
58860>>>        tColumnType RetvalType
58860>>>        Integer iDbType iDriver
58860>>>        Handle hDatabase
58860>>>
58860>>>        Get psDriverID to sDriverID
58861>>>        Get piDbType   to iDbType
58862>>>        Get DriverIndex sDriverID to iDriver
58863>>>        Get psServer to sServer
58864>>>        Get SqlUtilDatabaseHandle sDriverID sServer to hDatabase
58865>>>        If (hDatabase = 0) Begin
58867>>>            Error DFERR_PROGRAM "Could not change the Default DateTime Value. Could not get a handle to the database."
58868>>>>
58868>>>            Procedure_Return
58869>>>        End
58869>>>>
58869>>>
58869>>>        Set_Attribute DF_DATABASE_DEFAULT_DEFAULT_DATETIME of iDriver hDatabase to sDateValue
58872>>>
58872>>>    End_Procedure
58873>>>
58873>>>    // Returns a struct array with the default column types for the SQL back-end and how they
58873>>>    // are mapped to the standard DataFlex data types.
58873>>>    // The DataFlex data types are: "ASCII", "BINARY", "DATE", "DATETIME", "NUMERIC" and "TEXT".
58873>>>    Function UtilDefaultSqlTypeMappings String sDriverID Integer iDbType Returns tColumnType[]
58875>>>        tColumnType[] ColumnTypeArray EmptyArray
58875>>>        tColumnType[] ColumnTypeArray EmptyArray
58877>>>        String sDataType
58877>>>        Integer iDataType iDriverID iCount
58877>>>        Boolean bSQLDriver
58877>>>
58877>>>        Move 0 to iCount
58878>>>        Get DriverIndex sDriverID to iDriverID
58879>>>        Get IsSQLDriver sDriverID to bSQLDriver
58880>>>        If (bSQLDriver = False) Begin
58882>>>            Function_Return EmptyArray
58883>>>        End
58883>>>>
58883>>>
58883>>>        // DF_ASCII
58883>>>        If (sDriverID = ODBC_DRV_ID) Begin
58885>>>            Get_Attribute DF_DRIVER_MAP_DFASCII_TO_ODBCTYPE of iDriverID to sDataType
58888>>>        End
58888>>>>
58888>>>        Else Begin
58889>>>            Get_Attribute DF_DRIVER_MAP_DFASCII_TO_SQLTYPE  of iDriverID to sDataType
58892>>>        End
58892>>>>
58892>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
58893>>>        Move DF_ASCII    to ColumnTypeArray[iCount].iDataFlexType
58894>>>        Move "ASCII"     to ColumnTypeArray[iCount].sDataFlexType
58895>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
58896>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
58897>>>        Increment iCount
58898>>>
58898>>>        // DF_BINARY
58898>>>        If (sDriverID = ODBC_DRV_ID) Begin
58900>>>            Get_Attribute DF_DRIVER_MAP_DFBINARY_TO_ODBCTYPE of iDriverID to sDataType
58903>>>        End
58903>>>>
58903>>>        Else Begin
58904>>>            Get_Attribute DF_DRIVER_MAP_DFBINARY_TO_SQLTYPE  of iDriverID to sDataType
58907>>>        End
58907>>>>
58907>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
58908>>>        Move DF_BINARY   to ColumnTypeArray[iCount].iDataFlexType
58909>>>        Move "Binary"    to ColumnTypeArray[iCount].sDataFlexType
58910>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
58911>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
58912>>>        Increment iCount
58913>>>
58913>>>        // DF_DATE
58913>>>        If (sDriverID = ODBC_DRV_ID) Begin
58915>>>            Get_Attribute DF_DRIVER_MAP_DFDATE_TO_ODBCTYPE of iDriverID to sDataType
58918>>>        End
58918>>>>
58918>>>        Else Begin
58919>>>            Get_Attribute DF_DRIVER_MAP_DFDATE_TO_SQLTYPE  of iDriverID to sDataType
58922>>>        End
58922>>>>
58922>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
58923>>>        Move DF_DATE     to ColumnTypeArray[iCount].iDataFlexType
58924>>>        Move "Date"      to ColumnTypeArray[iCount].sDataFlexType
58925>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
58926>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
58927>>>        Increment iCount
58928>>>
58928>>>        // DF_DATETIME
58928>>>        If (sDriverID = ODBC_DRV_ID) Begin
58930>>>            Get_Attribute DF_DRIVER_MAP_DFDATETIME_TO_ODBCTYPE of iDriverID to sDataType
58933>>>        End
58933>>>>
58933>>>        Else Begin
58934>>>            Get_Attribute DF_DRIVER_MAP_DFDATETIME_TO_SQLTYPE  of iDriverID to sDataType
58937>>>        End
58937>>>>
58937>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
58938>>>        Move DF_DATETIME to ColumnTypeArray[iCount].iDataFlexType
58939>>>        Move "DateTime"  to ColumnTypeArray[iCount].sDataFlexType
58940>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
58941>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
58942>>>        Increment iCount
58943>>>
58943>>>        // DF_NUMERIC
58943>>>        // *** Why is there no DF_DRIVER_MAP available for BCD/Numeric??? ***
58943>>>        // DF_BCD can in SQL be either of "SmallInt", "Int", or "Numeric", but
58943>>>        // we make them here all "Numeric"...
58943>>>        Case Begin
58943>>>            Case (sDriverID = MSSQLDRV_ID)
58945>>>                Move SQL_NUMERIC to iDataType
58946>>>                Move "numeric"   to sDataType
58947>>>                Case Break
58948>>>            Case (sDriverID = DB2_DRV_ID)
58951>>>                Move SQL_NUMERIC to iDataType
58952>>>                Move "NUMERIC"   to sDataType
58953>>>                Case Break
58954>>>            Case Else
58954>>>                Move DF_BCD      to iDataType
58955>>>                Move "Numeric"   to sDataType
58956>>>        Case End
58956>>>        Move DF_BCD      to ColumnTypeArray[iCount].iDataFlexType
58957>>>        Move "Numeric"   to ColumnTypeArray[iCount].sDataFlexType
58958>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
58959>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
58960>>>        Increment iCount
58961>>>
58961>>>        // DF_TEXT
58961>>>        If (sDriverID = ODBC_DRV_ID) Begin
58963>>>            Get_Attribute DF_DRIVER_MAP_DFTEXT_TO_ODBCTYPE of iDriverID to sDataType
58966>>>        End
58966>>>>
58966>>>        Else Begin
58967>>>            Get_Attribute DF_DRIVER_MAP_DFTEXT_TO_SQLTYPE  of iDriverID to sDataType
58970>>>        End
58970>>>>
58970>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
58971>>>        Move DF_TEXT     to ColumnTypeArray[iCount].iDataFlexType
58972>>>        Move "Text"      to ColumnTypeArray[iCount].sDataFlexType
58973>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
58974>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
58975>>>
58975>>>        Function_Return ColumnTypeArray
58976>>>    End_Function
58977>>>
58977>>>    Function UtilDFDataTypeToSqlTypeMapping String sDriverID Integer iDbType Integer iType Returns tColumnType
58979>>>        tColumnType[] ColumnTypeArray
58979>>>        tColumnType[] ColumnTypeArray
58980>>>        tColumnType   ColumnType
58980>>>        tColumnType   ColumnType
58980>>>        Integer iCount iSize
58980>>>
58980>>>        Get UtilDefaultSqlTypeMappings sDriverID iDbType iType to ColumnTypeArray
58981>>>        Move (SizeOfArray(ColumnTypeArray)) to iSize
58982>>>        Decrement iSize
58983>>>
58983>>>        for iCount from 0 to iSize
58989>>>>
58989>>>            If (iType = ColumnTypeArray[iCount].iDataFlexType) Begin
58991>>>                Move ColumnTypeArray[iCount].bCanEditSize   to ColumnType.bCanEditSize
58992>>>                Move ColumnTypeArray[iCount].iDataFlexType  to ColumnType.iDataFlexType
58993>>>                Move ColumnTypeArray[iCount].iSQLType       to ColumnType.iSQLType
58994>>>                Move ColumnTypeArray[iCount].sDataFlexType  to ColumnType.sDataFlexType
58995>>>                Move ColumnTypeArray[iCount].sPrecision     to ColumnType.sPrecision
58996>>>                Move ColumnTypeArray[iCount].sSQLType       to ColumnType.sSQLType
58997>>>                Move iSize to iCount
58998>>>            End
58998>>>>
58998>>>        Loop
58999>>>>
58999>>>
58999>>>        Function_Return ColumnType
59000>>>    End_Function
59001>>>
59001>>>    // Returns True if the passed hTable (filelist slot number) is an Alias table.
59001>>>    // An Alias file/table is a filelist number that share the same Physical filename
59001>>>    // but the Logical name is different.
59001>>>    // Note: If the table cannot be opened; the table is not considered to be an Alias.
59001>>>    Function UtilTableIsAlias Handle hTable Returns Boolean
59003>>>        String sRootName sRootNameCompare sLogicalName sLogicalNameCompare
59003>>>        Handle hInTable hMasterTable 
59003>>>        Boolean bIsAlias
59003>>>        
59003>>>        Move hTable to hInTable
59004>>>        Move False to bIsAlias
59005>>>        Move 0 to hMasterTable
59006>>>        
59006>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
59009>>>        // Remove any prefix with a driver name.
59009>>>        Get _TableNameOnly sRootName to sRootName     
59010>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
59013>>>        Get _TableNameOnly sLogicalName to sLogicalName     
59014>>>        
59014>>>        // If the table has the same root and logical name it can't be an alias,
59014>>>        // so we can safely return a "False".
59014>>>        If (Uppercase(sRootName) <> Uppercase(sLogicalName)) Begin
59016>>>            Function_Return True
59017>>>        End
59017>>>>
59017>>>        
59017>>>        Function_Return False
59018>>>        
59018>>>        // Now we need to find a master table with the same root name (sRootName above),
59018>>>        // as the passed hTable root name.
59018>>>        // A master table always has the same root and logical name (except for any driver name prefix or .int suffix).
59018>>>//        Move 0 to hTable
59018>>>//        Repeat
59018>>>//            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
59018>>>//            If (hTable > 0 and hTable <> 50) Begin
59018>>>//                Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootNameCompare
59018>>>//                Get _TableNameOnly sRootNameCompare to sRootNameCompare
59018>>>//                // If we found another table with the same root and logical name
59018>>>//                // we have found a master table.
59018>>>//                If (Uppercase(sRootName) = Uppercase(sRootNameCompare)) Begin
59018>>>//                    Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalNameCompare
59018>>>//                    Get _TableNameOnly sLogicalNameCompare to sLogicalNameCompare     
59018>>>//                    If (Uppercase(sRootNameCompare) = Uppercase(sLogicalNameCompare)) Begin
59018>>>//                        Move hTable to hMasterTable   
59018>>>//                        Move 0 to hTable // To end the loop.
59018>>>//                    End
59018>>>//                End
59018>>>//            End
59018>>>//        Until (hTable = 0)
59018>>>//        
59018>>>//        If (hMasterTable <> 0 and hMasterTable <> hInTable) Begin
59018>>>//            Move True to bIsAlias
59018>>>//        End
59018>>>//        
59018>>>//        Function_Return bIsAlias
59018>>>    End_Function
59019>>>
59019>>>    // To Open a table with any driver.
59019>>>    // Note: If the driver is <> DATAFLEX_ID  - login credentials are used; it is then assumed
59019>>>    //       that the proper login properties has been setup properly with the cSQLConnections object.
59019>>>    //
59019>>>    // If the open command fails the Err flag will be reset to false, at the end of the function!
59019>>>    // The found flag is still used to indicate if the open was successful or not. The function
59019>>>    // returns a True if successful (table could be opened).
59019>>>    //
59019>>>    // Using the "Open As" syntax with drivers means that we don't need to rely on .int file settings.
59019>>>    // This is good because with DFConnectionID's those credentials doesn't need to be available in
59019>>>    // the .int file (and probably aren't). As long as the login properties of this object have been
59019>>>    // set properly we can open the table.
59019>>>    //
59019>>>    // DAW Driver Syntax:
59019>>>    //  <CKId>:<Schema>#<Table>@<ConnectString>|<Filename>.int
59019>>>    //  Now the @<ConnectString> can be followed by a pipe character '|' followed by the name of the INT file.
59019>>>    //  Doing so, the driver will apply the information from the .INT file to the passed direct Open String.
59019>>>    //  Note that when an INT file has been passed, it will skip the keyword DRIVER_NAME, SERVER_NAME,
59019>>>    //  DATABASE_NAME and SCHEMA_NAME from the INT file because those are supposed to be supplied in the String already.
59019>>>    //  Open mode; iMode = DF_SHARE or DF_EXCLUSIVE.
59019>>>    //
59019>>>    // DAW Driver Sample:
59019>>>    //   Open "MSSQLDRV:dbo#MyFile@SERVER=(local)\SQLEXPRESS;Trusted_Connection=yes;DATABASE=OrderEntry|options|intfile=MyFile.int"
59019>>>    //
59019>>>    Function UtilTableOpen Integer hTable String sTableName Integer iMode Returns Boolean
59021>>>        String sTableNameOrg
59021>>>        Boolean bOpen bOK
59021>>>        tSQLConnection SQLConnection
59021>>>        tSQLConnection SQLConnection
59021>>>        
59021>>>        Move False to bOpen
59022>>>        Move sTableName to sTableNameOrg
59023>>>        If (hTable > 0) Begin
59025>>>            Send Ignore_Error of Error_Object_Id 20529
59026>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
59027>>>            Send Ignore_Error of Error_Object_Id CLIERR_CONNECTIONIDNOTFOUND
59028>>>            Send Ignore_Error of Error_Object_Id 10
59029>>>            Open hTable Mode iMode
59031>>>            Send Trap_Error of Error_Object_Id 20529
59032>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
59033>>>            Send Trap_Error of Error_Object_Id CLIERR_CONNECTIONIDNOTFOUND
59034>>>            Send Trap_Error of Error_Object_Id 10
59035>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
59038>>>            If (bOpen = True) Begin
59040>>>                Function_Return True
59041>>>            End
59041>>>>
59041>>>        End
59041>>>>
59041>>>
59041>>>        Get UtilTableOpenAsIntFile hTable sTableName iMode to bOK 
59042>>>        If (hTable > 0) Begin
59044>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
59047>>>        End
59047>>>>
59047>>>
59047>>>        Function_Return bOpen
59048>>>    End_Function
59049>>>
59049>>>    Function UtilTableOpenAsIntFile Integer hTable String sTableName Integer iMode Returns Boolean
59051>>>        String sDriverID sConnection sSchema sExt sTableNameShort sTableNameOrg
59051>>>        Boolean bOpen bOK
59051>>>        tSQLConnection SQLConnection
59051>>>        tSQLConnection SQLConnection
59051>>>
59051>>>        If (hTable < 1) Begin
59053>>>            Function_Return False
59054>>>        End
59054>>>>
59054>>>
59054>>>        Move sTableName to sTableNameOrg
59055>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
59056>>>        Move SQLConnection.sDriverID to sDriverID
59057>>>        Move SQLConnection.sConnectionString to sConnection
59058>>>        Move SQLConnection.sSchema to sSchema
59059>>>        If (sSchema = "") Begin
59061>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
59062>>>        End
59062>>>>
59062>>>
59062>>>        // We need to remove the ".int" part of the table name because
59062>>>        // the table name after the "#" in the connection syntax below wants the
59062>>>        // "bare" table name without any extension.
59062>>>        If (sDriverID <> DATAFLEX_ID) Begin
59064>>>            If (Lowercase(sTableName) contains ".int") Begin
59066>>>                Get ParseFileExtension sTableName to sExt
59067>>>                Move (Replace(("." + sExt), sTableName, "")) to sTableNameShort
59068>>>            End
59068>>>>
59068>>>            Else Begin
59069>>>                Move sTableName to sTableNameShort
59070>>>                Move (Append(sTableName, ".int")) to sTableName
59071>>>            End
59071>>>>
59071>>>            Move (sDriverID + ":" + sSchema + "#" + sTableNameShort + "@" + sConnection + "|options|intfile=" + sTableName) to sConnection
59072>>>            Move sConnection to sTableName
59073>>>        End
59073>>>>
59073>>>
59073>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
59074>>>        Send Ignore_Error of Error_Info_Object DFERR_FILE_ACCESS_VIOLATION
59075>>>        If (hTable = 0) Begin
59077>>>            Get NextFreeFilelistSlot to hTable
59078>>>        End
59078>>>>
59078>>>
59078>>>        Case Begin
59078>>>            Case (sDriverID = MSSQLDRV_ID)
59080>>>                // If not df_exclusive mode, we use the "Open As" syntax.
59080>>>                If (iMode <> DF_EXCLUSIVE) Begin
59082>>>                    Close hTable
59083>>>                    Open sTableName as hTable
59085>>>                End
59085>>>>
59085>>>                Else Begin
59086>>>                    Get OpenTableExclusive hTable to bOK
59087>>>                    If (bOK = False) Begin
59089>>>                        Function_Return False
59090>>>                    End
59090>>>>
59090>>>                End
59090>>>>
59090>>>                Case Break
59091>>>
59091>>>            Case (sDriverID = DB2_DRV_ID)
59094>>>                // If not df_exclusive mode, we use the "Open As" syntax.
59094>>>                If (iMode <> DF_EXCLUSIVE) Begin
59096>>>                    Close hTable
59097>>>                    Open sTableName as hTable
59099>>>                End
59099>>>>
59099>>>                Else Begin
59100>>>                    Get OpenTableExclusive hTable to bOK
59101>>>                    If (bOK = False) Begin
59103>>>                        Function_Return False
59104>>>                    End
59104>>>>
59104>>>                End
59104>>>>
59104>>>                Case Break
59105>>>
59105>>>            Case (sDriverID = ODBC_DRV_ID)
59108>>>                // If not df_exclusive mode, we use the "Open As" syntax.
59108>>>                If (iMode = DF_SHARE) Begin
59110>>>                    Close hTable
59111>>>                    Open sTableName as hTable
59113>>>                End
59113>>>>
59113>>>                Else Begin
59114>>>                    Get OpenTableExclusive hTable to bOK
59115>>>                    If (bOK = False) Begin
59117>>>                        Function_Return False
59118>>>                    End
59118>>>>
59118>>>                End
59118>>>>
59118>>>                Case Break
59119>>>
59119>>>            Case (sDriverID = DATAFLEX_ID)
59122>>>                If (sTableName <> "" and iMode <> DF_EXCLUSIVE) Begin
59124>>>                    Close hTable
59125>>>                    Open sTableName as hTable
59127>>>                End
59127>>>>
59127>>>                Else If (iMode = DF_EXCLUSIVE) Begin
59130>>>                    Get OpenTableExclusive hTable to bOK
59131>>>                    If (bOK = False) Begin
59133>>>                        Function_Return False
59134>>>                    End
59134>>>>
59134>>>                End
59134>>>>
59134>>>                Else Begin
59135>>>                    Open hTable
59137>>>                End
59137>>>>
59137>>>                Case Break
59138>>>
59138>>>            Case Else
59138>>>                Error DFERR_PROGRAM ("Invalid driver:" * sDriverID)
59139>>>>
59139>>>        Case End
59139>>>
59139>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
59140>>>        Send Trap_Error of Error_Info_Object DFERR_FILE_ACCESS_VIOLATION
59141>>>        If (LastErr = CLIERR_LOGIN_UNSUCCESSFUL) Begin
59143>>>            Move False to Found
59144>>>        End
59144>>>>
59144>>>        // If open failed, the Err is set to true,
59144>>>        // but we don't want that because it could end our loop.
59144>>>        Move False to Err
59145>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
59148>>>
59148>>>        Function_Return bOpen
59149>>>    End_Function
59150>>>
59150>>>    // Pass a table's logical name
59150>>>    // Returns True if the table exists in filelist.cfg.
59150>>>    Function UtilTableLogicalNameIsInUse String sCheckTable Returns Boolean
59152>>>        Handle hTable
59152>>>        Boolean bFound
59152>>>        String sCompareTable
59152>>>
59152>>>        Move False to bFound
59153>>>        Move 0 to hTable
59154>>>        Repeat
59154>>>>
59154>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
59157>>>            If (hTable > 0) Begin
59159>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sCompareTable
59162>>>                If (Uppercase(sCompareTable) = Uppercase(sCheckTable)) Begin
59164>>>                    Move True to bFound
59165>>>                End
59165>>>>
59165>>>            End
59165>>>>
59165>>>            If (bFound = True) ;                Break
59168>>>        Until (hTable = 0)
59170>>>
59170>>>        Function_Return (bFound = True)
59171>>>    End_Function
59172>>>
59172>>>    // Function will report the default driver "DATAFLEX" if table can't be opened
59172>>>    Function UtilDriverFromTableNumber Handle hTable Returns String
59174>>>        Boolean bOK bExists
59174>>>        String sDriverID
59174>>>
59174>>>        Get _UtilTableExists hTable to bExists
59175>>>        If (bExists = False) Begin
59177>>>            Function_Return DATAFLEX_ID
59178>>>        End
59178>>>>
59178>>>        Get OpenTableExclusive hTable to bOK
59179>>>        If (bOK = False) Begin
59181>>>            Function_Return DATAFLEX_ID
59182>>>        End
59182>>>>
59182>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
59185>>>        Function_Return sDriverID
59186>>>    End_Function
59187>>>
59187>>>    // Number of tables in Filelist.cfg. Returns integger
59187>>>    Function UtilFilelistNoOfTables Returns Integer
59189>>>        Handle hTable
59189>>>        Integer iRetval
59189>>>
59189>>>        Move 0 to hTable
59190>>>        Move 0 to iRetval
59191>>>
59191>>>        Repeat
59191>>>>
59191>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
59194>>>            If (hTable > 0) Begin
59196>>>                Increment iRetval
59197>>>            End
59197>>>>
59197>>>        Until (hTable = 0)
59199>>>
59199>>>        Function_Return iRetval
59200>>>    End_Function
59201>>>
59201>>>    // Checks if any of the tables in Filelist.cfg is an SQL driver and returns the first Driver ID.
59201>>>    Function UtilIsAnyFilelistEntrySQLtable Returns String
59203>>>        Handle hTable
59203>>>        String sRoot sDriverID
59203>>>        Boolean bIsSQLTable
59203>>>        Integer iPos
59203>>>
59203>>>        Move 0 to hTable
59204>>>        Move "" to sDriverID
59205>>>        Move False to bIsSQLTable
59206>>>
59206>>>        Repeat
59206>>>>
59206>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
59209>>>            If (hTable > 0) Begin
59211>>>                Get_Attribute DF_FILE_ROOT_NAME of hTable to sRoot
59214>>>                If (sRoot contains ":") Begin
59216>>>                    Move (Pos(":", sRoot)) to iPos
59217>>>                    Move (Left(sRoot, (iPos -1))) to sDriverID
59218>>>                End
59218>>>>
59218>>>                Get IsSQLDriver sDriverID to bIsSQLTable
59219>>>            End
59219>>>>
59219>>>
59219>>>        Until (hTable = 0 or bIsSQLTable = True)
59221>>>
59221>>>        Function_Return sDriverID
59222>>>    End_Function
59223>>>
59223>>>    Function UtilIsAllFilelistEntriesDataFlexTables Returns Boolean
59225>>>        String sRootName
59225>>>        Boolean bIsSQL
59225>>>        Handle hTable
59225>>>
59225>>>        Move False to bIsSQL
59226>>>        Move 0 to hTable
59227>>>        Repeat
59227>>>>
59227>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
59230>>>            If (hTable > 0) Begin
59232>>>                Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
59235>>>                Get _UtilTableIsSqlByRootName sRootName to bIsSQL
59236>>>                If (bIsSQL = True) Begin
59238>>>                    Move 0 to hTable
59239>>>                End
59239>>>>
59239>>>            End
59239>>>>
59239>>>        Until (hTable = 0)
59241>>>
59241>>>        Function_Return (bIsSQL = False)
59242>>>    End_Function
59243>>>
59243>>>    // * Dummy function for the Studio's Code Explorer *
59243>>>    Function UTIL_ENUMERATION_FUNCTIONS Returns Boolean
59245>>>        Function_Return False
59246>>>    End_Function
59247>>>
59247>>>    Function UtilEnumerateOverlapFields Integer hTable Integer iField Returns String[]
59249>>>        String  sRetval
59249>>>        String[] sOverlapFieldsArray
59250>>>        Integer iType iColumn iColumns
59250>>>        Boolean bOpen bOverlap
59250>>>
59250>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
59253>>>        If (bOpen = False) Begin
59255>>>            Open hTable
59257>>>        End
59257>>>>
59257>>>
59257>>>        Move "" to sRetval
59258>>>
59258>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iColumns
59261>>>
59261>>>        for iColumn from 0 to iColumns
59267>>>>
59267>>>            Get_Attribute DF_FIELD_TYPE of hTable iColumn to iType
59270>>>            If (iField <> iColumn and iType <> DF_OVERLAP) Begin
59272>>>                Get_Attribute DF_FIELD_OVERLAP of hTable iField iColumn to bOverlap
59275>>>                If (bOverlap) Begin
59277>>>                    If (sRetval <> "") Begin
59279>>>                        Append sRetval ","
59280>>>                    End
59280>>>>
59280>>>                    Append sRetval iColumn
59281>>>                End
59281>>>>
59281>>>            End
59281>>>>
59281>>>        Loop
59282>>>>
59282>>>
59282>>>        If (bOpen = False) Begin
59284>>>            Close hTable
59285>>>        End
59285>>>>
59285>>>
59285>>>        Get StrSplitToArray sRetval "," to sOverlapFieldsArray
59286>>>
59286>>>        Function_Return sOverlapFieldsArray
59287>>>    End_Function
59288>>>
59288>>>    Function UtilEnumerateODBCDrivers Returns String
59290>>>        Handle hoRegistry hoODBCDriverNames
59290>>>        Boolean bExists bKeyOpened
59290>>>        String sKey
59290>>>        String[] sDrivers
59291>>>        Integer iDriverNames iDriverName
59291>>>
59291>>>        Get Create (RefClass (cRegistry)) to hoRegistry
59292>>>        Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
59293>>>        Set pfAccessRights of hoRegistry to Key_Read
59294>>>        Move "SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers" to sKey
59295>>>        Get KeyExists of hoRegistry sKey to bExists
59296>>>        If (bExists) Begin
59298>>>            Get OpenKey of hoRegistry sKey to bKeyOpened
59299>>>            If (bKeyOpened) Begin
59301>>>                Get Create (RefClass (Array)) to hoODBCDriverNames
59302>>>                Get GetValues of hoRegistry hoODBCDriverNames to iDriverNames
59303>>>                If (iDriverNames > 0) Begin
59305>>>                    Move (ResizeArray (sDrivers, iDriverNames)) to sDrivers
59306>>>                    Decrement iDriverNames
59307>>>                    for iDriverName from 0 to iDriverNames
59313>>>>
59313>>>                        Get Value of hoODBCDriverNames iDriverName to sDrivers[iDriverName]
59314>>>                    Loop
59315>>>>
59315>>>                End
59315>>>>
59315>>>                Send CloseKey of hoRegistry
59316>>>            End
59316>>>>
59316>>>        End
59316>>>>
59316>>>        Send Destroy of hoRegistry
59317>>>
59317>>>        Function_Return sDrivers
59318>>>    End_Function
59319>>>
59319>>>    Procedure IncreaseSortBufferSize
59321>>>        String sNull
59321>>>        Integer iSortBufferSize
59321>>>        Boolean bBufferSet
59321>>>
59321>>>        Move "" to sNull
59322>>>        Move (1024 * 128) to iSortBufferSize
59323>>>        Call_Driver 0 DATAFLEX_ID Function FLEX_SET_MAX_SORT_BUFFER Callback ghoDbUpdateHandler Passing sNull sNull iSortBufferSize Result bBufferSet
59328>>>
59328>>>    End_Procedure
59329>>>
59329>>>    Procedure SetAllIndexesToBatch Handle hTable Boolean bSetToBatch
59331>>>        Integer iLastIndex iIndex iNumSegments
59331>>>        Boolean bOK
59331>>>        String sDriverID
59331>>>
59331>>>        If (hTable > 0) Begin
59333>>>            Get UtilDriverFromTableNumber hTable to sDriverID
59334>>>            Close hTable
59335>>>            Get OpenTableExclusive hTable to bOK
59336>>>            If (bOK = False) Begin
59338>>>                Procedure_Return
59339>>>            End
59339>>>>
59339>>>            Get_Attribute DF_FILE_LAST_INDEX_NUMBER of hTable to iLastIndex
59342>>>            Structure_Start hTable sDriverID
59343>>>                for iIndex from 1 to iLastIndex
59349>>>>
59349>>>                    Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
59352>>>                    If (iNumSegments > 0) Begin
59354>>>                        If (bSetToBatch = True) Begin
59356>>>                            Set_Attribute DF_INDEX_TYPE of hTable iIndex to DF_INDEX_TYPE_BATCH
59359>>>                        End
59359>>>>
59359>>>                        Else Begin
59360>>>                            Set_Attribute DF_INDEX_TYPE of hTable iIndex to DF_INDEX_TYPE_ONLINE
59363>>>                        End
59363>>>>
59363>>>                    End
59363>>>>
59363>>>                Loop
59364>>>>
59364>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
59366>>>        End
59366>>>>
59366>>>    End_Procedure
59367>>>
59367>>>    Function NextFreeFilelistSlot Returns Handle
59369>>>        Handle hTable
59369>>>
59369>>>        Move 0 to hTable
59370>>>        Get_Attribute DF_FILE_NEXT_EMPTY of hTable to hTable
59373>>>
59373>>>        Function_Return hTable
59374>>>    End_Function
59375>>>
59375>>>    // For debugging purposes. To print Sql statements as they are build...
59375>>>    Procedure DebugPrint String sStmt String sFileName
59377>>>        Integer iCh
59377>>>        Get Seq_Append_Output_Channel sFileName to iCh
59378>>>            Write channel iCh sStmt
59380>>>        Send Seq_Close_Channel iCh
59381>>>    End_Procedure
59382>>>
59382>>>    // Returns the integer number for the passed Driver ID that is
59382>>>    // needed by some database API calls.
59382>>>    Function DriverIndex String sDriverID Returns Integer
59384>>>        String  sCurrentDriver
59384>>>        Integer iNumberOfDrivers iDriver iCount
59384>>>
59384>>>        Move 0 to iDriver
59385>>>
59385>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
59388>>>        for iCount from 1 to iNumberOfDrivers
59394>>>>
59394>>>
59394>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
59397>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriverID) ) Begin
59399>>>                Move iCount to iDriver
59400>>>            End
59400>>>>
59400>>>        Loop
59401>>>>
59401>>>
59401>>>        // In case it was not found, it wasn't loaded so we do that now.
59401>>>        If (iDriver = 0) Begin
59403>>>            Move False to Err
59404>>>            Load_Driver sDriverID
59405>>>            If (Err = False) Begin
59407>>>                Get_Attribute DF_NUMBER_DRIVERS to iDriver
59410>>>            End
59410>>>>
59410>>>        End
59410>>>>
59410>>>
59410>>>        Function_Return iDriver
59411>>>    End_Function
59412>>>
59412>>>
59412>>>    Function SqlServerClientVersionName for cMSSQLHandler Integer iClientVersion  Returns String
59414>>>        String  sSqlServerClientVersionName
59414>>>        
59414>>>        Case Begin
59414>>>            Case (iClientVersion = SQLSERVER2019CLIENT)
59416>>>                Move SQLSERVER2019DRVRSTR to sSqlServerClientVersionName
59417>>>                Case Break
59418>>>
59418>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
59421>>>                Move SQLSERVER2017CLIENTNAME to sSqlServerClientVersionName
59422>>>                Case Break
59423>>>                
59423>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
59426>>>                Move SQLSERVER2016CLIENTNAME to sSqlServerClientVersionName
59427>>>                Case Break
59428>>>            
59428>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
59431>>>                Move SQLSERVER2014CLIENTNAME to sSqlServerClientVersionName
59432>>>                Case Break
59433>>>            
59433>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
59436>>>                Move SQLSERVER2012CLIENTNAME to sSqlServerClientVersionName
59437>>>                Case Break
59438>>>            
59438>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
59441>>>                Move SQLSERVER2008CLIENTNAME to sSqlServerClientVersionName
59442>>>                Case Break
59443>>>            
59443>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
59446>>>                Move SQLSERVER2005CLIENTNAME to sSqlServerClientVersionName
59447>>>                Case Break
59448>>>            
59448>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
59451>>>                Move SQLSERVER2000CLIENTNAME to sSqlServerClientVersionName
59452>>>                Case Break
59453>>>            
59453>>>            Case Else
59453>>>                Move SQLSERVERUNKNOWNCLIENTNAME to sSqlServerClientVersionName
59454>>>        Case End
59454>>>        
59454>>>        Function_Return sSqlServerClientVersionName
59455>>>    End_Function
59456>>>
59456>>>    Function SqlServerClientDriverName for cMSSQLHandler Integer iClientVersion  Returns String
59458>>>        String  sSqlServerClientDriverName
59458>>>        
59458>>>        Case Begin
59458>>>            Case (iClientVersion = SQLSERVER2019CLIENT)
59460>>>                Move SQLSERVER2019DRVRSTR to sSqlServerClientDriverName
59461>>>                Case Break
59462>>>
59462>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
59465>>>                Move SQLSERVER2017DRVRSTR to sSqlServerClientDriverName
59466>>>                Case Break
59467>>>                
59467>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
59470>>>                Move SQLSERVER2016DRVRSTR to sSqlServerClientDriverName
59471>>>                Case Break
59472>>>            
59472>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
59475>>>                Move SQLSERVER2014DRVRSTR to sSqlServerClientDriverName
59476>>>                Case Break
59477>>>            
59477>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
59480>>>                Move SQLSERVER2012DRVRSTR to sSqlServerClientDriverName
59481>>>                Case Break
59482>>>            
59482>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
59485>>>                Move SQLSERVER2008DRVRSTR to sSqlServerClientDriverName
59486>>>                Case Break
59487>>>            
59487>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
59490>>>                Move SQLSERVER2005DRVRSTR to sSqlServerClientDriverName
59491>>>                Case Break
59492>>>            
59492>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
59495>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
59496>>>                Case Break
59497>>>            
59497>>>            Case Else
59497>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
59498>>>        Case End
59498>>>        
59498>>>        Function_Return sSqlServerClientDriverName
59499>>>    End_Function
59500>>>    
59500>>>    Function MinMSSQLDRV_And_ClientVersion String sMSSQLDRVVersion Integer iClientVersion Boolean bShowErrorDialog Boolean bExitProgram Returns String
59502>>>        String sDriverID sVersion sClient sClientLowest sRetval
59502>>>        Integer iNumberOfDrivers iDriver iClient
59502>>>        Handle hoCLIHandler hoMSSQLHandler   
59502>>>        Boolean bOK
59502>>>        
59502>>>        Move "" to sRetval
59503>>>        Get Create (RefClass(cCLIHandler)) to hoCLIHandler
59504>>>        Get Create (RefClass(cMSSQLHandler)) to hoMSSQLHandler
59505>>>        Load_Driver MSSQLDRV_ID
59506>>>
59506>>>        // Loop through all loaded drivers.
59506>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
59509>>>        For iDriver from 1 to iNumberOfDrivers
59515>>>>
59515>>>            Get_Attribute DF_DRIVER_NAME of iDriver to sDriverID
59518>>>            If (sDriverID = MSSQLDRV_ID) Begin
59520>>>                Set psDriverID of hoCLIHandler to sDriverID
59521>>>                Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClient   
59524>>>                Get SqlServerClientVersionName of hoMSSQLHandler iClientVersion to sClientLowest 
59525>>>                Get SqlServerClientVersionName of hoMSSQLHandler iClient to sClient 
59526>>>                Get CKRevision of hoCLIHandler to sVersion
59527>>>                Move (SFormat (String(C_$DatabaseDriver), (sDriverID * "-" * (String(C_$Version) + ": " + String(sVersion))))) to sRetval
59528>>>                If (sClient <> "" and sRetval <> "") Begin
59530>>>                    Move (String(sRetval) + "\n" + String(C_$SQL_Client_Text) + "\n" + Trim(sClient)) to sRetval
59531>>>                End                                
59531>>>>
59531>>>                Else Begin
59532>>>                    Move (String(C_$SQL_Client_Text) + "\n" + Trim(sClient) * "(" + String(iClient) + ")") to sRetval
59533>>>                End
59533>>>>
59533>>>            End
59533>>>>
59533>>>        Loop
59534>>>>
59534>>>        Send Destroy of hoCLIHandler  
59535>>>        Send Destroy of hoMSSQLHandler  
59536>>>        If (bShowErrorDialog = True) Begin
59538>>>            Get IsFirstStringGreaterThanSecond sVersion sMSSQLDRVVersion to bOK
59539>>>            If (bOK = False or (iClient < iClientVersion)) Begin
59541>>>                Move (MSSQLDRV_ID + ".dll" * String(C_$SQL_Driver_Version_Min_Text) *  String(sMSSQLDRVVersion) + String("\n") + String(C_$SQL_Client_Version_Min_Text) + "\n" + String(sClientLowest) + String("\n\n") + String(C_$SQL_Versions_Are_Text) + String("\n") + String(sRetval)) to sRetval
59542>>>                If (bExitProgram = True) Begin
59544>>>                    Move (String(sRetval) + String("\n\n") + String(C_$PleaseAdjustTxt) * String(C_$ProgramWillExit_Text)) to sRetval
59545>>>                End
59545>>>>
59545>>>                Send Stop_Box sRetval  
59546>>>                If (bExitProgram = True) Begin
59548>>>                    Send Exit_Application
59549>>>                End
59549>>>>
59549>>>            End
59549>>>>
59549>>>        End
59549>>>>
59549>>>        
59549>>>        Function_Return sRetval
59550>>>    End_Function  
59551>>>    
59551>>>    // Returns True if first "." separated string is greater than the second.
59551>>>    // It checks from left to right, one part of the string at a time.
59551>>>    // E.g. if sVersion="20.1.31.10 and sSQLVersion="6.3.0.13" the function would return TRUE.
59551>>>    Function IsFirstStringGreaterThanSecond Global String sVersion String sSQLVersion Returns Boolean
59553>>>        String[] asVersion asSQLVersion          
59555>>>        Integer iSize iCount iVersion iSQLVersion
59555>>>        
59555>>>        Move (StrSplitToArray(sVersion, "."))    to asVersion
59556>>>        Move (StrSplitToArray(sSQLVersion, ".")) to asSQLVersion
59557>>>        Move (SizeOfArray(asVersion)) to iSize
59558>>>        // Make sure the two arrays are of the same size:
59558>>>        If (SizeOfArray(asSQLVersion) < iSize) Begin
59560>>>            Move (ResizeArray(asSQLVersion, iSize, 0)) to asSQLVersion
59561>>>        End
59561>>>>
59561>>>        Decrement iSize
59562>>>        for iCount from 0 to iSize
59568>>>>
59568>>>            Move asVersion[iCount]    to iVersion
59569>>>            Move asSQLVersion[iCount] to iSQLVersion
59570>>>            CompilerWarnings Off
59570>>>            If (iVersion > iSQLVersion) Break
59573>>>            CompilerWarnings On
59573>>>        Loop
59574>>>>
59574>>>        
59574>>>        Function_Return (iVersion >= iSQLVersion)
59575>>>    End_Function
59576>>>
59576>>>    // Returns TRUE if table is opened exclusive, otherwise FALSE
59576>>>    // Note: If run from the Studio, CodeMast & CodeType _is_ open by the Studio,
59576>>>    //       so in that case we "cheat" and report those tables were opened OK.
59576>>>    Function OpenTableExclusive Handle hTable Returns Boolean
59578>>>        Integer iMode iErrorObject
59578>>>        Boolean bOpened bExitIfDebuggerActive
59578>>>        String sTableName 
59578>>>        Handle hoCurrentErrorHandler
59578>>>        
59578>>>        Move False to bExitIfDebuggerActive
59579>>>        If (ghoDbUpdateHandler <> 0) Begin
59581>>>            Get pbExitIfDebuggerActive of ghoDbUpdateHandler to bExitIfDebuggerActive
59582>>>        End
59582>>>>
59582>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
59583>>>        // Can't open a table properly if run through the Debugger/Studio,
59583>>>        // so we generate an error here:
59583>>>        If (IsDebuggerPresent() and bExitIfDebuggerActive = True) Begin
59585>>>            Move Error_Object_Id to hoCurrentErrorHandler
59586>>>            Get piOrgErrorHandlerID to iErrorObject
59587>>>            If (iErrorObject <> 0) Begin
59589>>>                Move iErrorObject to Error_Object_Id
59590>>>            End
59590>>>>
59590>>>            Error DFERR_OPERATOR "It is not possible to make structural changes to the database when running through the Debugger/Studio! You need to run this program from outside of the Studio."
59591>>>>
59591>>>            Move hoCurrentErrorHandler to Error_Object_Id
59592>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
59593>>>            Function_Return False
59594>>>        End
59594>>>>
59594>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
59597>>>        If (bOpened) Begin
59599>>>            Get_Attribute DF_FILE_OPEN_MODE of hTable to iMode
59602>>>            If (iMode = DF_EXCLUSIVE) Begin
59604>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
59605>>>                Function_Return True
59606>>>            End
59606>>>>
59606>>>            Close hTable
59607>>>        End
59607>>>>
59607>>>        Else Begin
59608>>>            Open hTable
59610>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpened
59613>>>            If (bOpened and IsDebuggerPresent()) Begin
59615>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
59618>>>                If (Uppercase(sTableName) = "CODEMAST" or Uppercase(sTableName) = "CODETYPE") Begin
59620>>>                    Set Error_Report_Mode to DUF_ERROR_REPORT
59621>>>                    Function_Return True
59622>>>                End
59622>>>>
59622>>>            End
59622>>>>
59622>>>
59622>>>        End
59622>>>>
59622>>>
59622>>>        Close hTable
59623>>>        Open hTable Mode DF_EXCLUSIVE
59625>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
59628>>>
59628>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
59629>>>        Function_Return bOpened
59630>>>    End_Function
59631>>>
59631>>>    Function AutoConnectionIDLogin Returns Boolean
59633>>>        String sConnectionID sConnectionString sDriverID
59633>>>        Boolean bExists bOK bSQLDriver
59633>>>        Handle hoCLI hoDriver
59633>>>        Integer iRetval
59633>>>        tSQLConnection SQLConnection
59633>>>        tSQLConnection SQLConnection
59633>>>
59633>>>        Get psDriverID to sDriverID
59634>>>        Get IsSQLDriver sDriverID to bSQLDriver
59635>>>        If (bSQLDriver = False) Begin
59637>>>            Function_Return True
59638>>>        End
59638>>>>
59638>>>
59638>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
59639>>>        Move SQLConnection.sDriverID                  to sDriverID
59640>>>        Move SQLConnection.sConnectionString          to sConnectionString
59641>>>        Move SQLConnection.sConnectionID to sConnectionID
59642>>>
59642>>>        Get IsConnectionID sConnectionID sDriverID to bExists
59643>>>        If (bExists = False) Begin
59645>>>            // We always start by deleting the current connection - if any - because the
59645>>>            // login details my have changed.
59645>>>            Get phoCLIHandler to hoCLI
59646>>>            Set psDriverID    of hoCLI to sDriverID
59647>>>            Get DeleteConnectionID of hoCLI sConnectionID -1 to iRetval
59648>>>            Get AutoSetConnectionID sConnectionID to bOk
59649>>>            If (bOk = False) Begin
59651>>>                Error DFERR_PROGRAM ("The Connection ID:" * sConnectionID * "could not be created and therefor the table can't be changed.")
59652>>>>
59652>>>                Function_Return False
59653>>>            End
59653>>>>
59653>>>            Move bOK to bExists
59654>>>        End
59654>>>>
59654>>>
59654>>>        Get Create (RefClass(cDbUpdateDatabaseDriver)) to hoDriver
59655>>>        Set Name of hoDriver to "oDbUpdateDatabaseDriver"
59656>>>        Set psDriverID of hoDriver to SQLConnection.sDriverID
59657>>>        Get DbLogin of hoDriver sConnectionString SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to bOK
59658>>>        Send Destroy of hoDriver
59659>>>
59659>>>        Function_Return (bExists = True)
59660>>>    End_Function
59661>>>
59661>>>    // Scans to see if all tables can be opened exclusivly. I.e. that nobody else is running the application.
59661>>>    // Returns: False if nobody else is running
59661>>>    //          True if at least one table is open by another process (e.g. another user is running the application)
59661>>>    // N.B! Only works for Embedded DataFlex Tables! It will _not_ work for Sql tables because; these
59661>>>    //      tables are not locked as DataFlex tables are.
59661>>>    Function IsDatabaseInUse Returns Boolean
59663>>>        Handle  hTable
59663>>>        String  sRootName sDatabase sSchema sDriverID
59663>>>        Boolean bOpen bErr bAlias bOK bIsSQLTable bFlexErrs bExists
59663>>>        Integer iCount iTables
59663>>>        String[] asTablesArray asTablesArrayEmpty
59665>>>        
59665>>>        Move 0 to iTables
59666>>>        Set Action_Text of ghoStatusPanel to "Database in use check..."
59667>>>        Get AutoConnectionIDLogin to bOK
59668>>>        Get UtilFilelistNoOfTables to iTables
59669>>>        Set piPosition   of ghoProgressBar to 0
59670>>>        Set piAdvanceBy  of ghoProgressBar to 1
59671>>>        Set piMaximum    of ghoProgressBar to iTables
59672>>>        Close DF_ALL
59673>>>        Move 0 to hTable
59674>>>        Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
59677>>>        Move False to bErr
59678>>>        Send Ignore_Error of Error_Object_Id DFERR_FILE_ACCESS_VIOLATION
59679>>>
59679>>>        Get psDriverID to sDriverID
59680>>>        Get psDatabase to sDatabase
59681>>>        Get psSchema   to sSchema
59682>>>        Get _SqlUtilEnumerateTables sDriverID sDatabase sSchema to asTablesArray
59683>>>        Set pasSQLDataTables to asTablesArray
59684>>>        Repeat
59684>>>>
59684>>>            Set piPosition of ghoProgressBar to iCount
59685>>>            Increment iCount
59686>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
59689>>>            Move (Uppercase(sRootName) = "FLEXERRS")  to bFlexErrs
59690>>>
59690>>>            // This test is only applicable for DataFlex embedded tables; so skip test if driver based table.
59690>>>            Get _UtilTableIsSqlByRootName sRootName to bIsSQLTable
59691>>>            Move False to bOpen
59692>>>            // _UtilTableExists_Ex is a variant of "_UtilTableExists", but it needs that the pasSQLDataTables
59692>>>            // property has been set/updated before usage! This makes the loop much faster.
59692>>>            Get _UtilTableExists_Ex hTable to bExists
59693>>>            // Don't bother about CodeType (253, CodeMast (254) or) FlexErrs (Normally table 50)
59693>>>            If (bIsSQLTable = False and bExists = True and hTable <> 0 and hTable <> 253 and hTable <> 254 and bFlexErrs = False) Begin
59695>>>                Set Error_Report_Mode to DUF_ERROR_NO_REPORT
59696>>>                Open hTable
59698>>>                Get_Attribute DF_FILE_OPENED of hTable to bOpen
59701>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
59702>>>                If (bOpen = True) Begin
59704>>>                    // We cannot open an Alias file exclusive as it will generate an error (4177 - "File in use")
59704>>>                    Get UtilTableIsAlias hTable to bAlias
59705>>>                    If (bAlias = False) Begin
59707>>>                        Close hTable
59708>>>                        Get OpenTableExclusive hTable to bOpen
59709>>>                        If (bOpen = False) Begin
59711>>>                            Move True to bErr
59712>>>                        End
59712>>>>
59712>>>                    End
59712>>>>
59712>>>                End
59712>>>>
59712>>>            End
59712>>>>
59712>>>            Close hTable
59713>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
59716>>>            If (bErr = True ) ;                Break
59719>>>        Until (not(hTable))
59721>>>
59721>>>        // Reset the temporary used data tables property to blank:
59721>>>        Set pasSQLDataTables to asTablesArrayEmpty
59722>>>        Set Action_Text of ghoStatusPanel to ""
59723>>>        Send Trap_Error of Error_Object_Id DFERR_FILE_ACCESS_VIOLATION
59724>>>        Move False to Err
59725>>>
59725>>>        Function_Return bErr
59726>>>    End_Function
59727>>>
59727>>>End_Class
59728>Use cRDCHeaderGroup.pkg
Including file: cRDCHeaderGroup.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\RDCToolsLib\AppSrc\cRDCHeaderGroup.pkg)
59728>>>//****************************************************************************
59728>>>// $Module type: Package
59728>>>// $Module name: cRDCHeaderGroup.pkg
59728>>>//
59728>>>// $Author     : Nils Svedmyr, RDC Tools International.
59728>>>// Copyright (c) 2017 RDC Tools International
59728>>>// E-mail      : support@rdctools.com
59728>>>// Web-site    : http://www.rdctools.com
59728>>>//
59728>>>// Created     : 2017-01-05 @ 19:04 (Military date format - Year-Month-Day)
59728>>>//
59728>>>// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
59728>>>// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
59728>>>// This is free software; you can redistribute it and/or modify it under the terms of the
59728>>>// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
59728>>>// in the help folder for more details.
59728>>>//
59728>>>//****************************************************************************
59728>>>Use Windows.pkg
59728>>>Use cCommandLinkButton.pkg
Including file: cCommandLinkButton.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCommandLinkButton.pkg)
59728>>>>>// This requires version 6 of common controls (vista or windows server 2008). If used with
59728>>>>>// older versions you will just get a regular great big button.
59728>>>>>
59728>>>>>Use Windows.pkg
59728>>>>>Use CharTranslate.pkg
59728>>>>>
59728>>>>>Class cCommandLinkButton is a Button
59729>>>>>    
59729>>>>>    Procedure Construct_Object
59731>>>>>        Forward Send Construct_Object
59733>>>>>        Property String psPrivateNote
59734>>>>>    End_Procedure
59735>>>>>    
59735>>>>>    Procedure Set psNote String sNote
59737>>>>>        Boolean bSupported
59737>>>>>        Set psPrivateNote to sNote
59738>>>>>        Get IsExControlSupported to bSupported
59739>>>>>        If bSupported Begin
59741>>>>>            Send SetWinNote
59742>>>>>        End
59742>>>>>>
59742>>>>>    End_Procedure
59743>>>>>    
59743>>>>>    Procedure SetWinNote
59745>>>>>        WString wNote
59745>>>>>        Handle hWnd
59745>>>>>        Integer i
59745>>>>>        Pointer pVar
59745>>>>>        Get Form_Window_Handle 0 to hWnd
59746>>>>>        If hWnd Begin
59748>>>>>            Get psNote to wNote
59749>>>>>            Move (SendMessage(hwnd, BCM_SETNOTE, 0, AddressOf(wNote))) to i
59750>>>>>        End
59750>>>>>>
59750>>>>>    End_Procedure
59751>>>>>    
59751>>>>>    
59751>>>>>    Function psNote Returns String
59753>>>>>        Function_Return (psPrivateNote(Self))
59754>>>>>    End_Function
59755>>>>>    
59755>>>>>    
59755>>>>>    Procedure Page Integer iState
59757>>>>>        Integer i hWnd
59757>>>>>        Boolean bSupported
59757>>>>>        Get IsExControlSupported to bSupported
59758>>>>>        If (iState=1 and bSupported) Begin
59760>>>>>            Get form_style i to i
59761>>>>>            Set Form_Style 0 to (i ior (BS_COMMANDLINK + BS_FLAT))
59762>>>>>            Forward Send Page iState
59764>>>>>            Send SetWinNote
59765>>>>>        End
59765>>>>>>
59765>>>>>        Else Begin
59766>>>>>            Forward Send Page iState
59768>>>>>        End
59768>>>>>>
59768>>>>>    End_Procedure
59769>>>>>    
59769>>>>>End_Class
59770>>>
59770>>>Define clGreenGrey      for (RGB(64, 84, 93))
59770>>>Define clGreenGreyLight for (RGB(7, 117, 104))
59770>>>
59770>>>Class cRDCHeaderGroupImage is a cCommandLinkButton
59771>>>    Procedure Construct_Object
59773>>>        Forward Send Construct_Object
59775>>>
59775>>>        Set Size to 18 19
59776>>>        Set Focus_Mode to NonFocusable
59777>>>        Set peImageAlign to Button_ImageList_Align_Top
59778>>>        Set pbAutoResizeIcons to True
59779>>>    End_Procedure
59780>>>
59780>>>    Procedure OnClick
59782>>>        Broadcast Send Prompt of (Parent(Self))
59784>>>    End_Procedure
59785>>>
59785>>>    Procedure Set Bitmap String sBitmapName
59787>>>        Forward Set psImage to sBitmapName
59789>>>    End_Procedure
59790>>>
59790>>>    Procedure End_Construct_Object
59792>>>        Set pbShield to False
59793>>>        Forward Send End_Construct_Object
59795>>>    End_Procedure
59796>>>
59796>>>End_Class
59797>>>
59797>>>// Intermediate class - don't use.
59797>>>Class _cRDCHeaderGroup is a Container3d
59798>>>
59798>>>    Procedure Construct_Object
59800>>>        Forward Send Construct_Object
59802>>>
59802>>>        Property String private.psImage
59803>>>        Property String private.psLabel
59804>>>
59804>>>    End_Procedure
59805>>>
59805>>>    Procedure Set psImage String sImage
59807>>>        Set private.psImage to sImage
59808>>>    End_Procedure
59809>>>
59809>>>    Function psImage Returns String
59811>>>        Function_Return (private.psImage(Self))
59812>>>    End_Function
59813>>>
59813>>>    Procedure Set psLabel String sLabel
59815>>>        Set private.psLabel to sLabel
59816>>>    End_Procedure
59817>>>
59817>>>    Function psLabel Returns String
59819>>>        Function_Return (private.psLabel(Self))
59820>>>    End_Function
59821>>>
59821>>>    // Don't display but allow to use old "Label" syntax to set the value of the oInfo_tb object (header text)
59821>>>    Procedure Set Label String sLabel
59823>>>        Set psLabel to sLabel
59824>>>    End_Procedure
59825>>>
59825>>>    Function Label Returns String
59827>>>        Function_Return (private.psLabel(Self))
59828>>>    End_Function
59829>>>
59829>>>End_Class
59830>>>
59830>>>Register_Procedure NavigatePrevious
59830>>>Register_Procedure NavigateNext
59830>>>
59830>>>Class cRDCHeaderGroup is a _cRDCHeaderGroup
59831>>>
59831>>>    Procedure Construct_Object
59833>>>        Forward Send Construct_Object
59835>>>
59835>>>        Set peAnchors to anTopLeftRight
59836>>>        Set pbAcceptDropFiles to True
59837>>>        Set Border_Style to Border_Normal
59838>>>
59838>>>        Property Integer private.piColorOrg
59839>>>        Property Boolean private.pbIsHeaderGroup True // Don't touch!
59840>>>        Property String private.psToolTip ""
59841>>>
59841>>>        Property Integer piImageColOffset 4
59842>>>        Property Integer piImageRowOffset -1
59843>>>        Property String psNote ""
59844>>>        Property Boolean pbLargeImageSize True
59845>>>        Property Integer private.piLargeImageSize 24
59846>>>        Property Integer private.piSmallImageSize 16
59847>>>        Property Boolean pbUseHotspotColor False
59848>>>        Property Integer piHeaderHotspotColor clAqua
59849>>>        Property String private.psLabel ""
59850>>>        Property Integer piLabelColor clGreenGrey
59851>>>        Property Boolean pbLabelFontItalics False
59852>>>        Property Integer piLabelLargeFontHeight 12
59853>>>        Property Integer piLabelSmallFontHeight 10
59854>>>        Property Boolean pbUseLargeFontHeight False
59855>>>
59855>>>        Property Integer piLabelFontPointWeight fw_Bold
59856>>>        Property Integer piLabelColOffset 28
59857>>>        Property Integer piLabelRowOffset 4
59858>>>        Property Boolean pbCreateTooltipItem True
59859>>>
59859>>>        Set pbAcceptDropFiles to True
59860>>>
59860>>>        Send Define_ToolTip_Support_Mixin
59861>>>
59861>>>        // For the Studio to render the header image
59861>>>        Set Bitmap to "Default32x32.bmp"
59862>>>        // This doesn't work... I wonder if there's a way to "trick" the Studio
59862>>>        // to render some text in the header when in design mode?
59862>>>        Set Label to "HEADER TEXT"
59863>>>
59863>>>        On_Key kLeftArrow  Send NavigatePrevious
59864>>>        On_Key kUpArrow    Send NavigatePrevious
59865>>>        On_Key kRightArrow Send NavigateNext
59866>>>        On_Key kDownArrow  Send NavigateNext
59867>>>        On_Key kSwitch     Send Switch_Next_Area
59868>>>    End_Procedure
59869>>>
59869>>>    Import_Class_Protocol ToolTip_Support_Mixin
59870>>>
59870>>>    Procedure Set psImage String sImage
59872>>>        Set Bitmap to ""
59873>>>        Forward Set psImage to sImage
59875>>>    End_Procedure
59876>>>
59876>>>    Function psImage Returns String
59878>>>        Function_Return (psImage(Self))
59879>>>    End_Function
59880>>>
59880>>>    Procedure Set Label String sLabel
59882>>>        Forward Set psLabel to sLabel
59884>>>    End_Procedure
59885>>>
59885>>>    Procedure Set psToolTip String sToolTip
59887>>>        Set private.psToolTip to sToolTip
59888>>>    End_Procedure
59889>>>
59889>>>    Function psToolTip Returns String
59891>>>        Function_Return (private.psToolTip(Self))
59892>>>    End_Function
59893>>>
59893>>>    Procedure End_Construct_Object
59895>>>        String sNote sLabel
59895>>>        Boolean bUseLargeFontHeight bLargeImageSize bCreateTooltipItem
59895>>>        Integer iFontHeight iImageSize iLabelRowOffset iLabelColOffset iSize iTextOffset
59895>>>
59895>>>        Forward Send End_Construct_Object
59897>>>
59897>>>        Get piLabelColOffset to iLabelColOffset
59898>>>        Get pbUseLargeFontHeight to bUseLargeFontHeight
59899>>>        If (bUseLargeFontHeight = True) Begin
59901>>>            Get piLabelLargeFontHeight to iFontHeight
59902>>>            Move 8 to iLabelRowOffset
59903>>>        End
59903>>>>
59903>>>        Else Begin
59904>>>            Get piLabelSmallFontHeight to iFontHeight
59905>>>            Move 6 to iLabelRowOffset
59906>>>        End
59906>>>>
59906>>>
59906>>>        Get pbLargeImageSize to bLargeImageSize
59907>>>        If (bLargeImageSize = True) Begin
59909>>>            Get private.piLargeImageSize to iImageSize
59910>>>        End
59910>>>>
59910>>>        Else Begin
59911>>>            Get private.piSmallImageSize to iImageSize
59912>>>            Move (iLabelColOffset - 6) to iLabelColOffset
59913>>>        End
59913>>>>
59913>>>
59913>>>        Object oHeaderGroupImage is a cRDCHeaderGroupImage
59915>>>            Set piImageSize to iImageSize
59916>>>            Set Location to (piImageRowOffset(Self)) (piImageColOffset(Self))
59917>>>            Set psImage to (private.psImage(Self))
59918>>>            Set peImageAlign to Button_ImageList_Align_Center
59919>>>            Set psToolTip to (private.psToolTip(Self))
59920>>>        End_Object
59921>>>
59921>>>        Object oHeaderGroupInfo_tb is a TextBox
59923>>>            Set Size to 12 100
59924>>>            Set Location to (piLabelRowOffset(Self)) iLabelColOffset
59925>>>            Set FontWeight to (piLabelFontPointWeight(Self))
59926>>>            Set FontItalics to (pbLabelFontItalics(Self))
59927>>>            Set FontPointHeight to iFontHeight
59928>>>            Set Label to (private.psLabel(Self))
59929>>>            Set TextColor to (piLabelColor(Self))
59930>>>            Set psToolTip to (private.psToolTip(Self))
59931>>>            Get Size to iSize
59932>>>        End_Object
59933>>>
59933>>>        // ToDo: The positioning logic for placing the info image to the right of the header text is flawed.
59933>>>        // How can it be improved?
59933>>>        Get pbCreateTooltipItem to bCreateTooltipItem
59934>>>        If (bCreateTooltipItem = True and private.psToolTip(Self) <> "") Begin
59936>>>            Get private.psLabel to sLabel
59937>>>            Get Text_Extent sLabel to iTextOffset
59938>>>            Move (Low(iTextOffset) -0)  to iTextOffset
59939>>>            Object oHeaderGroupTooltip_tb is a TextBox
59941>>>                Set Size to 10 10
59942>>>                If (bUseLargeFontHeight = True) Begin
59944>>>                    //                    Set Location to (piLabelRowOffset(Self)) iTextOffset //(Low(iSize) + (iTextOffset))
59944>>>                    Set Location to (piLabelRowOffset(Self)) (Low(iSize) + (iLabelColOffset * 2) + 10)
59945>>>                End
59945>>>>
59945>>>                Else Begin
59946>>>                    //                    Set Location to (piLabelRowOffset(Self)) iTextOffset
59946>>>                    Set Location to (piLabelRowOffset(Self)) (Low(iSize) + iLabelColOffset + 25)
59947>>>                End
59947>>>>
59947>>>                Set psToolTip to (private.psToolTip(Self))
59948>>>                Set Bitmap to "ActionAbout.bmp"
59949>>>            End_Object
59950>>>        End
59950>>>>
59950>>>
59950>>>        Get psNote to sNote
59951>>>        If (Trim(sNote) <> "") Begin
59953>>>            Object oHeaderGroupNote_tb is a TextBox
59955>>>                Set Size to 12 100
59956>>>                Set Location to (Hi(iSize) + iLabelRowOffset) (iLabelColOffset + 8)
59957>>>                Set Label to ("-" * String(sNote))
59958>>>                Set TextColor to (piLabelColor(Self))
59959>>>                Set FontPointHeight to 9
59960>>>                Set psToolTip to (private.psToolTip(Self))
59961>>>            End_Object
59962>>>        End
59962>>>>
59962>>>
59962>>>    End_Procedure
59963>>>
59963>>>    Function Popup_State Returns Boolean
59965>>>        Boolean bIsPopup
59965>>>        Get Popup_State of (Parent(Self)) to bIsPopup
59966>>>        Function_Return bIsPopup
59967>>>    End_Function
59968>>>
59968>>>    Procedure OnEnterArea Handle hoFrom
59970>>>        Integer iColor
59970>>>        Forward Send OnEnterArea hoFrom
59972>>>        // Not ideal, but works most of the time.
59972>>>        //       When navigating to i.e a popup we don't want
59972>>>        //       the coloring to appear. Else there will be 2
59972>>>        //       cRDCHeaderGroup's with the highlight color...
59972>>>        // Is there a better way?
59972>>>        If (hoFrom <> Desktop and hoFrom < Parent(Self)) Begin
59974>>>            Procedure_Return
59975>>>        End
59975>>>>
59975>>>        If (pbUseHotspotColor(Self) = True) Begin
59977>>>            Get Color to iColor
59978>>>            Set private.piColorOrg to iColor
59979>>>            Get piHeaderHotspotColor to iColor
59980>>>            Set Color to iColor
59981>>>            Broadcast Recursive Set Color to iColor
59983>>>        End
59983>>>>
59983>>>    End_Procedure
59984>>>
59984>>>    Procedure OnExitArea Handle hoFrom
59986>>>        Integer iColor
59986>>>        Forward Send OnExitArea hoFrom
59988>>>        If (pbUseHotspotColor(Self) = True) Begin
59990>>>            Get private.piColorOrg to iColor
59991>>>            Set Color to iColor
59992>>>            Broadcast Recursive Set Color to iColor
59994>>>        End
59994>>>>
59994>>>    End_Procedure
59995>>>
59995>>>    // Public access message to change the group header text color at runtime.
59995>>>    Procedure Set Label_Color Integer iColor
59997>>>        Set TextColor of (oHeaderGroupInfo_tb(Self)) to iColor
59998>>>    End_Procedure
59999>>>
59999>>>    Procedure NavigatePrevious
60001>>>        Integer iMulti ivoid iLastErr
60001>>>        Handle hWnd
60001>>>        Boolean bErr
60001>>>
60001>>>        Move Err to bErr
60002>>>        Move LastErr to iLastErr
60003>>>
60003>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
60004>>>        Get Select_Mode of (Focus(Self)) to iMulti
60005>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
60006>>>        If (Err) Begin
60008>>>            Move bErr to Err
60009>>>            Move iLastErr to LastErr
60010>>>            Procedure_Return
60011>>>        End
60011>>>>
60011>>>
60011>>>        Move bErr to Err
60012>>>        Move iLastErr to LastErr
60013>>>        If (iMulti = Multi_Select) Begin
60015>>>            Send Previous
60016>>>        End
60016>>>>
60016>>>        Else Begin
60017>>>            Get Form_Window_Handle of (Focus(Self)) to hWnd
60018>>>            Move (Sendmessage(hWnd, WM_KEYDOWN, Ascii(VK_LEFT), 0)) to iVoid
60019>>>        End
60019>>>>
60019>>>    End_Procedure
60020>>>
60020>>>    Procedure NavigateNext
60022>>>        Integer iMulti iVoid iLastErr
60022>>>        Handle hWnd
60022>>>        Boolean bErr
60022>>>
60022>>>        Move Err to bErr
60023>>>        Move LastErr to iLastErr
60024>>>
60024>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
60025>>>        Get Select_Mode of (Focus(Self)) to iMulti
60026>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
60027>>>        If (Err) Begin
60029>>>            Move bErr to Err
60030>>>            Move iLastErr to LastErr
60031>>>            Procedure_Return
60032>>>        End
60032>>>>
60032>>>
60032>>>        Move bErr to Err
60033>>>        Move iLastErr to LastErr
60034>>>        If (iMulti = Multi_Select) Begin
60036>>>            Send Next
60037>>>        End
60037>>>>
60037>>>        Else Begin
60038>>>            Get Form_Window_Handle of (Focus(Self)) to hWnd
60039>>>            Move (Sendmessage(hWnd, WM_KEYDOWN, Ascii(VK_LEFT), 0)) to iVoid
60040>>>        End
60040>>>>
60040>>>
60040>>>    End_Procedure
60041>>>
60041>>>    Procedure Enable_Window Integer iState
60043>>>        Handle hWnd
60043>>>        Get Window_Handle to hWnd
60044>>>        If hWnd Begin
60046>>>            Move (EnableWindow(hWnd, iState)) to hWnd
60047>>>        End
60047>>>>
60047>>>    End_Procedure
60048>>>
60048>>>    Procedure Page_Object Integer iState
60050>>>        Handle hWnd
60050>>>        Get Window_Handle to hWnd
60051>>>        Forward Send Page_Object iState
60053>>>        If (hWnd = 0 and iState) Begin
60055>>>            Send Shadow_Display
60056>>>        End
60056>>>>
60056>>>    End_Procedure
60057>>>
60057>>>    Procedure Shadow_Display
60059>>>        Send Enable_Window (not(Object_Shadow_State(Self)))
60060>>>    End_Procedure
60061>>>
60061>>>    Function Explicit_Shadow_State Returns Boolean
60063>>>        Function_Return (Private.Explicit_Shadow_State(Self))
60064>>>    End_Function
60065>>>
60065>>>    // For some reason we need to augment this event to allow
60065>>>    // files to be dropped on a cRDCHeaderGroup object; else nothing will
60065>>>    // happen.
60065>>>    Procedure OnFileDropped String sFilename Boolean bLast
60067>>>        Delegate Send OnFileDropped sFilename bLast
60069>>>    End_Procedure
60070>>>
60070>>>End_Class
60071>>>
60071>>>// We don't want the broadcast of setting color to set the background
60071>>>// color for forms that are within a cRDCHeaderGroup object.
60071>>>// If the Form is not within a cRDCHeaderGroup the Form class should
60071>>>// behave as it always has. But if you don't like this; just comment
60071>>>// it out.
60071>>>//Procedure Set Color for Form Integer eColor
60071>>>//    Boolean bIsHeaderGroup bErr bEnabled_State
60071>>>//    Integer iLastErr
60071>>>//
60071>>>//    Move Err to bErr
60071>>>//    Move LastErr to iLastErr
60071>>>//
60071>>>//    Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
60071>>>//    Delegate Get private.pbIsHeaderGroup to bIsHeaderGroup
60071>>>//    Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
60071>>>//    Move bErr to Err
60071>>>//    Move iLastErr to LastErr
60071>>>//    If (bIsHeaderGroup = False) Begin
60071>>>//        Forward Set Color to eColor
60071>>>//    End
60071>>>//End_Procedure
60071>Use cSQLComboForm.pkg
Including file: cSQLComboForm.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cSQLComboForm.pkg)
60071>>>Use Windows.pkg
60071>>>Use cRDCComboForm.pkg
Including file: cRDCComboForm.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\RDCToolsLib\AppSrc\cRDCComboForm.pkg)
60071>>>>>//****************************************************************************
60071>>>>>// $Module type: Package
60071>>>>>// $Module name: cRDCComboform.pkg
60071>>>>>//
60071>>>>>// $Author     : Nils Svedmyr, RDC Tools International.
60071>>>>>// Copyright (c) 2014 RDC Tools International
60071>>>>>// E-mail      : support@rdctools.com
60071>>>>>// Web-site    : http://www.rdctools.com
60071>>>>>//
60071>>>>>// Created     : 2014-03-17 @ 12:35 (Military date format - Year-Month-Day)
60071>>>>>//
60071>>>>>// Portions by : Raveen Sundram, Excellent Software Ltd
60071>>>>>//               The auto-size combo width logic was developed by Raveen.
60071>>>>>//
60071>>>>>// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
60071>>>>>// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
60071>>>>>// This is free software; you can redistribute it and/or modify it under the terms of the
60071>>>>>// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
60071>>>>>// in the help folder for more details.
60071>>>>>//
60071>>>>>//****************************************************************************
60071>>>>>Use Windows.pkg
60071>>>>>
60071>>>>>// Used by the "Page" message below to show
60071>>>>>// a focus rectangle around ComboForm and Checkbox objects.
60071>>>>>Define WM_CHANGEUISTATE For |CI$0127
60071>>>>>Define WM_UPDATEUISTATE For |CI$0128
60071>>>>>Define WM_QUERYUISTATE  For |CI$0129
60071>>>>>Define UIS_SET          For 1
60071>>>>>Define UIS_CLEAR        For 2
60071>>>>>Define UIS_INITIALIZE   For 3
60071>>>>>Define UISF_HIDEFOCUS   For |CI$1
60071>>>>>Define UISF_HIDEACCEL   For |CI$2
60071>>>>>Define UISF_ACTIVE      For |CI$4
60071>>>>>
60071>>>>>Class cComboFormIdleHandler is a cIdleHandler
60072>>>>>    Procedure Construct_Object
60074>>>>>        Forward Send Construct_Object
60076>>>>>
60076>>>>>        Set Label_Row_Offset to 0
60077>>>>>        Set Label_Col_Offset to 2
60078>>>>>        Set Label_Justification_Mode to jMode_Right
60079>>>>>        Set Combo_Sort_State to False
60080>>>>>        Set Entry_State to False
60081>>>>>
60081>>>>>    End_Procedure
60082>>>>>
60082>>>>>    Procedure OnIdle
60084>>>>>        Delegate Send DoUpdate
60086>>>>>    End_Procedure
60087>>>>>
60087>>>>>End_Class
60088>>>>>
60088>>>>>Class cRDCComboForm is a ComboForm
60089>>>>>    Procedure Construct_Object
60091>>>>>        Forward Send Construct_Object
60093>>>>>
60093>>>>>        Property Boolean pbAutoListWidth True
60094>>>>>
60094>>>>>        Property Boolean pbAutoShadowLabelObject True
60095>>>>>
60095>>>>>        Property Boolean pbAutoEnable False
60096>>>>>        Set Label_Col_Offset to 2
60097>>>>>        Property Boolean pbEnabled True
60098>>>>>        Set Label_Justification_Mode to JMode_Right
60099>>>>>        Property Handle phoIdleHandler (Create(Self, RefClass(cComboFormIdleHandler)))
60100>>>>>
60100>>>>>    End_Procedure
60101>>>>>
60101>>>>>    Procedure End_Construct_Object
60103>>>>>        Boolean bAutoShadowLabelObject
60103>>>>>        String sTooltip sStatus_Help
60103>>>>>
60103>>>>>        Get pbAutoShadowLabelObject to bAutoShadowLabelObject
60104>>>>>        If (bAutoShadowLabelObject = True) Begin
60106>>>>>            Set Private.Label_Shadow_Display_Mode to TBSHADOW_ON_LOCAL
60107>>>>>        End
60107>>>>>>
60107>>>>>
60107>>>>>        Forward Send End_Construct_Object
60109>>>>>
60109>>>>>        Get psToolTip   to sTooltip
60110>>>>>        Get Status_Help to sStatus_Help
60111>>>>>        If (sTooltip = "" and sStatus_Help <> "") Begin
60113>>>>>            Set psToolTip to sStatus_Help
60114>>>>>        End
60114>>>>>>
60114>>>>>        Else If (sTooltip <> "" and sStatus_Help = "") Begin
60117>>>>>            Set Status_Help to sTooltip
60118>>>>>        End
60118>>>>>>
60118>>>>>        Set pbEnabled of (phoIdleHandler(Self)) to (pbAutoEnable(Self))
60119>>>>>
60119>>>>>    End_Procedure
60120>>>>>
60120>>>>>    Procedure DoUpdate
60122>>>>>        If (pbAutoEnable(Self) = False) Begin
60124>>>>>            Procedure_Return
60125>>>>>        End
60125>>>>>>
60125>>>>>        Set Enabled_State to (IsEnabled(Self))
60126>>>>>    End_Procedure
60127>>>>>
60127>>>>>    Function IsEnabled Returns Boolean
60129>>>>>        Boolean bEnabled
60129>>>>>        Get pbEnabled to bEnabled
60130>>>>>        Function_Return bEnabled
60131>>>>>    End_Function
60132>>>>>
60132>>>>>    // Enable the idle handler timer when the object is activated
60132>>>>>    Procedure Activating
60134>>>>>        Forward Send Activating
60136>>>>>        Set pbEnabled of (phoIdleHandler(Self)) to True
60137>>>>>    End_Procedure
60138>>>>>
60138>>>>>    // Disable the idle handler when the object is deactivated
60138>>>>>    Procedure Deactivating
60140>>>>>        Set pbEnabled of (phoIdleHandler(Self)) to False
60141>>>>>        Forward Send Deactivating
60143>>>>>    End_Procedure
60144>>>>>
60144>>>>>    // To "un-select" the text in the comboform on startup
60144>>>>>    Procedure DoApplyAnchors Integer Arg1 Integer Arg2
60146>>>>>        Integer iStart iEnd
60146>>>>>
60146>>>>>        If (Focus(Desktop)=Self) Begin
60148>>>>>            Get SelStart to iStart
60149>>>>>            Get SelEnd   to iEnd
60150>>>>>        End
60150>>>>>>
60150>>>>>        Forward Send DoApplyAnchors Arg1 Arg2
60152>>>>>        Send SetSel iStart iEnd
60153>>>>>    End_Procedure
60154>>>>>
60154>>>>>    // Message that will drop down the list without the user clicking it,
60154>>>>>    // so you can send "DropDownList" to the combo to show the list.
60154>>>>>    Procedure DropDownList
60156>>>>>        Send Windows_Message CB_SHOWDROPDOWN 1 0
60157>>>>>    End_Procedure
60158>>>>>
60158>>>>>    Procedure SizeComboWidth
60160>>>>>        Integer iCount iItem iTextExt iRows iWd iNewWd iVertAdj
60160>>>>>        String sVal
60160>>>>>
60160>>>>>        // Initialise Width
60160>>>>>        Set ListWidth to 0
60161>>>>>        Send DoSetListWidth
60162>>>>>
60162>>>>>        Get ListRowCount     to iRows
60163>>>>>        Get Combo_Item_Count to iCount
60164>>>>>
60164>>>>>        // Vertical scroll-bar adjustment is needed
60164>>>>>        Move (iRows > 0 and iCount > iRows) to iVertAdj
60165>>>>>        If (iVertAdj) Begin
60167>>>>>            Move (GetSystemMetrics(SM_CXVSCROLL)+GetSystemMetrics(SM_CXEDGE)) to iVertAdj
60168>>>>>        End
60168>>>>>>
60168>>>>>        Else Begin
60169>>>>>            Move (GetSystemMetrics(SM_CXEDGE)) to iVertAdj
60170>>>>>        End
60170>>>>>>
60170>>>>>
60170>>>>>        // Calculate New Width
60170>>>>>        Decrement iCount
60171>>>>>        For iItem from 0 to iCount
60177>>>>>>
60177>>>>>            Get Combo_Value iItem to sVal
60178>>>>>            If (sVal <> "") Begin
60180>>>>>                Get Text_Extent sVal to iTextExt
60181>>>>>                Move (Low(iTextExt) + iVertAdj) to iWd
60182>>>>>                If (iWd > iNewWd) Begin
60184>>>>>                    Move (iWd + GetSystemMetrics(SM_CXFIXEDFRAME) + GetSystemMetrics(SM_CXEDGE)) to iNewWd
60185>>>>>                End
60185>>>>>>
60185>>>>>            End
60185>>>>>>
60185>>>>>        Loop
60186>>>>>>
60186>>>>>
60186>>>>>        // Set New Width
60186>>>>>        Set ListWidth to iNewWd
60187>>>>>        Send DoSetListWidth
60188>>>>>    End_Procedure
60189>>>>>
60189>>>>>    Procedure Combo_Add_Item String sValue
60191>>>>>        Forward Send Combo_Add_Item sValue
60193>>>>>        If (pbAutoListWidth(Self)) Begin
60195>>>>>            Send SizeComboWidth
60196>>>>>        End
60196>>>>>>
60196>>>>>    End_Procedure
60197>>>>>
60197>>>>>    Procedure Combo_Fill_List
60199>>>>>        Forward Send Combo_Fill_List
60201>>>>>        If (pbAutoListWidth(Self)) Begin
60203>>>>>            Send SizeComboWidth
60204>>>>>        End
60204>>>>>>
60204>>>>>    End_Procedure
60205>>>>>
60205>>>>>    // Fix for a bug when using manifest files & running Vista and above.
60205>>>>>    // The bug being that the focus rectangle doesn't show.
60205>>>>>    Procedure Page Integer iPageObject
60207>>>>>        Handle hWnd
60207>>>>>        Integer iRet iState
60207>>>>>
60207>>>>>        Forward Send Page iPageObject
60209>>>>>
60209>>>>>        If (iPageObject) Begin
60211>>>>>            Get Window_Handle to hWnd
60212>>>>>            If (hWnd) Begin
60214>>>>>                Move (SendMessage(hWnd, WM_QUERYUISTATE, 0, 0)) to iRet
60215>>>>>                If (iRet iand UISF_HIDEFOCUS) Begin
60217>>>>>                    Move (UIS_CLEAR + (UISF_HIDEFOCUS * 65536)) to iState
60218>>>>>                    Move (SendMessage(hWnd, WM_UPDATEUISTATE, iState, 0)) to iRet
60219>>>>>                End
60219>>>>>>
60219>>>>>            End
60219>>>>>>
60219>>>>>        End
60219>>>>>>
60219>>>>>
60219>>>>>        // To "un-select" the text in the comboform
60219>>>>>        If (iPageObject = 1 and Focus(Desktop) <> Self) Begin
60221>>>>>            Send SetSel 0 0
60222>>>>>        End
60222>>>>>>
60222>>>>>    End_Procedure
60223>>>>>
60223>>>>>End_Class
60224>>>
60224>>>// Used by the "Page" message below to show
60224>>>// a rectangle around ComboForm and Checkbox objects.
60224>>>//#IFNDEF WM_CHANGEUISTATE
60224>>>//    Define WM_CHANGEUISTATE for |CI$0127
60224>>>//    Define WM_UPDATEUISTATE for |CI$0128
60224>>>//    Define WM_QUERYUISTATE  for |CI$0129
60224>>>//    Define UIS_SET          for 1
60224>>>//    Define UIS_CLEAR        for 2
60224>>>//    Define UIS_INITIALIZE   for 3
60224>>>//    Define UISF_HIDEFOCUS   for |CI$1
60224>>>//    Define UISF_HIDEACCEL   for |CI$2
60224>>>//    Define UISF_ACTIVE      for |CI$4
60224>>>//#ENDIF
60224>>>
60224>>>Class cSQLComboForm is a cRDCComboForm
60225>>>    Procedure Construct_Object
60227>>>        Forward Send Construct_Object
60229>>>
60229>>>        // This will shadow the label if the form itself has its Enabled_State=False
60229>>>//        Property Boolean pbAutoShadowLabelObject True
60229>>>
60229>>>        // The piItem should be set to the object's corresponding tSQLConnection member (One based)
60229>>>        Property Integer piItem
60230>>>
60230>>>//        Set Label_Col_Offset to 2
60230>>>//        Set Label_Justification_Mode to JMode_Right
60230>>>    End_Procedure
60231>>>
60231>>>    Procedure End_Construct_Object
60233>>>//        Boolean bAutoShadowLabelObject
60233>>>//        Get pbAutoShadowLabelObject to bAutoShadowLabelObject
60233>>>//        If (bAutoShadowLabelObject = True) Begin
60233>>>//            Set Private.Label_Shadow_Display_Mode to TBSHADOW_ON_LOCAL
60233>>>//        End
60233>>>        Forward Send End_Construct_Object
60235>>>    End_Procedure
60236>>>
60236>>>    Procedure DbTypeUpdate Integer iDbType String sDriverID
60238>>>    End_Procedure
60239>>>
60239>>>    Procedure ReadConnectionData String[] sConnectionData
60241>>>        Integer iItem
60241>>>        Get piItem to iItem
60242>>>        Set Value to sConnectionData[iItem]
60243>>>    End_Procedure
60244>>>
60244>>>    Procedure WriteConnectionData String[] ByRef sConnectionData
60246>>>        String sValue
60246>>>        Integer iItem
60246>>>        Get piItem to iItem
60247>>>        Get Value to sValue
60248>>>        Move sValue to sConnectionData[iItem]
60249>>>    End_Procedure
60250>>>
60250>>>//    Procedure Set psToolTip String sToolTip
60250>>>//        String sStatusHelp
60250>>>//
60250>>>//        Get Status_Help to sStatusHelp
60250>>>//        If (sStatusHelp = "") Begin
60250>>>//            Set Status_Help to sToolTip
60250>>>//        End
60250>>>//
60250>>>//        Forward Set psToolTip to sToolTip
60250>>>//    End_Procedure
60250>>>//
60250>>>//    // Fix for a bug when using manifest files & running Vista and above.
60250>>>//    // The bug being that the focus rectangle doesn't show.
60250>>>//    Procedure Page Integer iPageObject
60250>>>//        Handle hWnd
60250>>>//        Integer iRet iState
60250>>>//
60250>>>//        Forward Send Page iPageObject
60250>>>//
60250>>>//        If (iPageObject) Begin
60250>>>//            Get Window_Handle to hWnd
60250>>>//            If (hWnd) Begin
60250>>>//                Move (SendMessage(hWnd, WM_QUERYUISTATE, 0, 0)) to iRet
60250>>>//                If (iRet iand UISF_HIDEFOCUS) Begin
60250>>>//                    Move (UIS_CLEAR + (UISF_HIDEFOCUS * 65536)) to iState
60250>>>//                    Move (SendMessage(hWnd, WM_UPDATEUISTATE, iState, 0)) to iRet
60250>>>//                End
60250>>>//            End
60250>>>//        End
60250>>>//    End_Procedure
60250>>>
60250>>>End_Class
60251>Use ChilkatXML-9.5.0-win32.pkg
Including file: ChilkatXML-9.5.0-win32.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ChilkatXML-9.5.0-win32.pkg)
60251>>>Use FlexCom20.pkg
60251>>>
60251>>>// CLSID: {2077C1B5-FBD0-40DF-B7AA-E07CBA589CB0}
60251>>>// IChilkatXml Interface v9.5.0
60251>>>Class cComIChilkatXml is a Mixin
60252>>>
60252>>>    Function ComGetImplAddrStr Returns String
60254>>>        Handle hDispatchDriver
60254>>>        String retVal
60254>>>        Get phDispatchDriver to hDispatchDriver
60255>>>        Get InvokeComMethod of hDispatchDriver 99 OLE_VT_BSTR to retVal
60256>>>        Function_Return retVal
60257>>>    End_Function
60258>>>
60258>>>    Function ComLastErrorHtml Returns String
60260>>>        Handle hDispatchDriver
60260>>>        String retVal
60260>>>        Get phDispatchDriver to hDispatchDriver
60261>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BSTR to retVal
60262>>>        Function_Return retVal
60263>>>    End_Function
60264>>>
60264>>>    Function ComLastErrorText Returns String
60266>>>        Handle hDispatchDriver
60266>>>        String retVal
60266>>>        Get phDispatchDriver to hDispatchDriver
60267>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BSTR to retVal
60268>>>        Function_Return retVal
60269>>>    End_Function
60270>>>
60270>>>    Function ComLastErrorXml Returns String
60272>>>        Handle hDispatchDriver
60272>>>        String retVal
60272>>>        Get phDispatchDriver to hDispatchDriver
60273>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BSTR to retVal
60274>>>        Function_Return retVal
60275>>>    End_Function
60276>>>
60276>>>    Function ComVersion Returns String
60278>>>        Handle hDispatchDriver
60278>>>        String retVal
60278>>>        Get phDispatchDriver to hDispatchDriver
60279>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_BSTR to retVal
60280>>>        Function_Return retVal
60281>>>    End_Function
60282>>>
60282>>>    Function ComDebugLogFilePath Returns String
60284>>>        Handle hDispatchDriver
60284>>>        String retVal
60284>>>        Get phDispatchDriver to hDispatchDriver
60285>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_BSTR to retVal
60286>>>        Function_Return retVal
60287>>>    End_Function
60288>>>
60288>>>    Procedure Set ComDebugLogFilePath String value
60290>>>        Handle hDispatchDriver
60290>>>        Get phDispatchDriver to hDispatchDriver
60291>>>        Send PrepareParams to hDispatchDriver 1
60292>>>        Set ComProperty of hDispatchDriver 5 OLE_VT_BSTR to value
60293>>>    End_Procedure
60294>>>
60294>>>    Function ComVerboseLogging Returns Integer
60296>>>        Handle hDispatchDriver
60296>>>        Integer retVal
60296>>>        Get phDispatchDriver to hDispatchDriver
60297>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_I4 to retVal
60298>>>        Function_Return retVal
60299>>>    End_Function
60300>>>
60300>>>    Procedure Set ComVerboseLogging Integer value
60302>>>        Handle hDispatchDriver
60302>>>        Get phDispatchDriver to hDispatchDriver
60303>>>        Send PrepareParams to hDispatchDriver 1
60304>>>        Set ComProperty of hDispatchDriver 6 OLE_VT_I4 to value
60305>>>    End_Procedure
60306>>>
60306>>>    Function ComLastMethodSuccess Returns Integer
60308>>>        Handle hDispatchDriver
60308>>>        Integer retVal
60308>>>        Get phDispatchDriver to hDispatchDriver
60309>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_I4 to retVal
60310>>>        Function_Return retVal
60311>>>    End_Function
60312>>>
60312>>>    Procedure Set ComLastMethodSuccess Integer value
60314>>>        Handle hDispatchDriver
60314>>>        Get phDispatchDriver to hDispatchDriver
60315>>>        Send PrepareParams to hDispatchDriver 1
60316>>>        Set ComProperty of hDispatchDriver 9 OLE_VT_I4 to value
60317>>>    End_Procedure
60318>>>
60318>>>    Function ComLastStringResult Returns String
60320>>>        Handle hDispatchDriver
60320>>>        String retVal
60320>>>        Get phDispatchDriver to hDispatchDriver
60321>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_BSTR to retVal
60322>>>        Function_Return retVal
60323>>>    End_Function
60324>>>
60324>>>    Function ComLastBinaryResult Returns Variant
60326>>>        Handle hDispatchDriver
60326>>>        Variant retVal
60326>>>        Get phDispatchDriver to hDispatchDriver
60327>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_VARIANT to retVal
60328>>>        Function_Return retVal
60329>>>    End_Function
60330>>>
60330>>>    Function ComLastStringResultLen Returns Integer
60332>>>        Handle hDispatchDriver
60332>>>        Integer retVal
60332>>>        Get phDispatchDriver to hDispatchDriver
60333>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_I4 to retVal
60334>>>        Function_Return retVal
60335>>>    End_Function
60336>>>
60336>>>    Function ComCdata Returns Integer
60338>>>        Handle hDispatchDriver
60338>>>        Integer retVal
60338>>>        Get phDispatchDriver to hDispatchDriver
60339>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_I4 to retVal
60340>>>        Function_Return retVal
60341>>>    End_Function
60342>>>
60342>>>    Procedure Set ComCdata Integer value
60344>>>        Handle hDispatchDriver
60344>>>        Get phDispatchDriver to hDispatchDriver
60345>>>        Send PrepareParams to hDispatchDriver 1
60346>>>        Set ComProperty of hDispatchDriver 100 OLE_VT_I4 to value
60347>>>    End_Procedure
60348>>>
60348>>>    Function ComContent Returns String
60350>>>        Handle hDispatchDriver
60350>>>        String retVal
60350>>>        Get phDispatchDriver to hDispatchDriver
60351>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_BSTR to retVal
60352>>>        Function_Return retVal
60353>>>    End_Function
60354>>>
60354>>>    Procedure Set ComContent String value
60356>>>        Handle hDispatchDriver
60356>>>        Get phDispatchDriver to hDispatchDriver
60357>>>        Send PrepareParams to hDispatchDriver 1
60358>>>        Set ComProperty of hDispatchDriver 101 OLE_VT_BSTR to value
60359>>>    End_Procedure
60360>>>
60360>>>    Function ComContentInt Returns Integer
60362>>>        Handle hDispatchDriver
60362>>>        Integer retVal
60362>>>        Get phDispatchDriver to hDispatchDriver
60363>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_I4 to retVal
60364>>>        Function_Return retVal
60365>>>    End_Function
60366>>>
60366>>>    Procedure Set ComContentInt Integer value
60368>>>        Handle hDispatchDriver
60368>>>        Get phDispatchDriver to hDispatchDriver
60369>>>        Send PrepareParams to hDispatchDriver 1
60370>>>        Set ComProperty of hDispatchDriver 102 OLE_VT_I4 to value
60371>>>    End_Procedure
60372>>>
60372>>>    Function ComDocType Returns String
60374>>>        Handle hDispatchDriver
60374>>>        String retVal
60374>>>        Get phDispatchDriver to hDispatchDriver
60375>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_BSTR to retVal
60376>>>        Function_Return retVal
60377>>>    End_Function
60378>>>
60378>>>    Procedure Set ComDocType String value
60380>>>        Handle hDispatchDriver
60380>>>        Get phDispatchDriver to hDispatchDriver
60381>>>        Send PrepareParams to hDispatchDriver 1
60382>>>        Set ComProperty of hDispatchDriver 103 OLE_VT_BSTR to value
60383>>>    End_Procedure
60384>>>
60384>>>    Function ComEmitXmlDecl Returns Integer
60386>>>        Handle hDispatchDriver
60386>>>        Integer retVal
60386>>>        Get phDispatchDriver to hDispatchDriver
60387>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_I4 to retVal
60388>>>        Function_Return retVal
60389>>>    End_Function
60390>>>
60390>>>    Procedure Set ComEmitXmlDecl Integer value
60392>>>        Handle hDispatchDriver
60392>>>        Get phDispatchDriver to hDispatchDriver
60393>>>        Send PrepareParams to hDispatchDriver 1
60394>>>        Set ComProperty of hDispatchDriver 104 OLE_VT_I4 to value
60395>>>    End_Procedure
60396>>>
60396>>>    Function ComEncoding Returns String
60398>>>        Handle hDispatchDriver
60398>>>        String retVal
60398>>>        Get phDispatchDriver to hDispatchDriver
60399>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_BSTR to retVal
60400>>>        Function_Return retVal
60401>>>    End_Function
60402>>>
60402>>>    Procedure Set ComEncoding String value
60404>>>        Handle hDispatchDriver
60404>>>        Get phDispatchDriver to hDispatchDriver
60405>>>        Send PrepareParams to hDispatchDriver 1
60406>>>        Set ComProperty of hDispatchDriver 105 OLE_VT_BSTR to value
60407>>>    End_Procedure
60408>>>
60408>>>    Function ComNumAttributes Returns Integer
60410>>>        Handle hDispatchDriver
60410>>>        Integer retVal
60410>>>        Get phDispatchDriver to hDispatchDriver
60411>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_I4 to retVal
60412>>>        Function_Return retVal
60413>>>    End_Function
60414>>>
60414>>>    Function ComNumChildren Returns Integer
60416>>>        Handle hDispatchDriver
60416>>>        Integer retVal
60416>>>        Get phDispatchDriver to hDispatchDriver
60417>>>        Get InvokeComMethod of hDispatchDriver 107 OLE_VT_I4 to retVal
60418>>>        Function_Return retVal
60419>>>    End_Function
60420>>>
60420>>>    Function ComSortCaseInsensitive Returns Integer
60422>>>        Handle hDispatchDriver
60422>>>        Integer retVal
60422>>>        Get phDispatchDriver to hDispatchDriver
60423>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_I4 to retVal
60424>>>        Function_Return retVal
60425>>>    End_Function
60426>>>
60426>>>    Procedure Set ComSortCaseInsensitive Integer value
60428>>>        Handle hDispatchDriver
60428>>>        Get phDispatchDriver to hDispatchDriver
60429>>>        Send PrepareParams to hDispatchDriver 1
60430>>>        Set ComProperty of hDispatchDriver 108 OLE_VT_I4 to value
60431>>>    End_Procedure
60432>>>
60432>>>    Function ComStandalone Returns Integer
60434>>>        Handle hDispatchDriver
60434>>>        Integer retVal
60434>>>        Get phDispatchDriver to hDispatchDriver
60435>>>        Get InvokeComMethod of hDispatchDriver 109 OLE_VT_I4 to retVal
60436>>>        Function_Return retVal
60437>>>    End_Function
60438>>>
60438>>>    Procedure Set ComStandalone Integer value
60440>>>        Handle hDispatchDriver
60440>>>        Get phDispatchDriver to hDispatchDriver
60441>>>        Send PrepareParams to hDispatchDriver 1
60442>>>        Set ComProperty of hDispatchDriver 109 OLE_VT_I4 to value
60443>>>    End_Procedure
60444>>>
60444>>>    Function ComTag Returns String
60446>>>        Handle hDispatchDriver
60446>>>        String retVal
60446>>>        Get phDispatchDriver to hDispatchDriver
60447>>>        Get InvokeComMethod of hDispatchDriver 110 OLE_VT_BSTR to retVal
60448>>>        Function_Return retVal
60449>>>    End_Function
60450>>>
60450>>>    Procedure Set ComTag String value
60452>>>        Handle hDispatchDriver
60452>>>        Get phDispatchDriver to hDispatchDriver
60453>>>        Send PrepareParams to hDispatchDriver 1
60454>>>        Set ComProperty of hDispatchDriver 110 OLE_VT_BSTR to value
60455>>>    End_Procedure
60456>>>
60456>>>    Function ComTreeId Returns Integer
60458>>>        Handle hDispatchDriver
60458>>>        Integer retVal
60458>>>        Get phDispatchDriver to hDispatchDriver
60459>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_I4 to retVal
60460>>>        Function_Return retVal
60461>>>    End_Function
60462>>>
60462>>>    Function ComAccumulateTagContent String llTag String llskipTags Returns String
60464>>>        Handle hDispatchDriver
60464>>>        String retVal
60464>>>        Get phDispatchDriver to hDispatchDriver
60465>>>        Send PrepareParams to hDispatchDriver 2
60466>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60467>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llskipTags
60468>>>        Get InvokeComMethod of hDispatchDriver 112 OLE_VT_BSTR to retVal
60469>>>        Function_Return retVal
60470>>>    End_Function
60471>>>
60471>>>    Function ComAddAttribute String llname String llvalue Returns Integer
60473>>>        Handle hDispatchDriver
60473>>>        Integer retVal
60473>>>        Get phDispatchDriver to hDispatchDriver
60474>>>        Send PrepareParams to hDispatchDriver 2
60475>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60476>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
60477>>>        Get InvokeComMethod of hDispatchDriver 113 OLE_VT_I4 to retVal
60478>>>        Function_Return retVal
60479>>>    End_Function
60480>>>
60480>>>    Function ComAddAttributeInt String llname Integer llvalue Returns Integer
60482>>>        Handle hDispatchDriver
60482>>>        Integer retVal
60482>>>        Get phDispatchDriver to hDispatchDriver
60483>>>        Send PrepareParams to hDispatchDriver 2
60484>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60485>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
60486>>>        Get InvokeComMethod of hDispatchDriver 114 OLE_VT_I4 to retVal
60487>>>        Function_Return retVal
60488>>>    End_Function
60489>>>
60489>>>    Function ComAddChildTree Variant lltree Returns Integer
60491>>>        Handle hDispatchDriver
60491>>>        Integer retVal
60491>>>        Get phDispatchDriver to hDispatchDriver
60492>>>        Send PrepareParams to hDispatchDriver 1
60493>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH lltree
60494>>>        Get InvokeComMethod of hDispatchDriver 115 OLE_VT_I4 to retVal
60495>>>        Function_Return retVal
60496>>>    End_Function
60497>>>
60497>>>    Procedure ComAddOrUpdateAttribute String llname String llvalue
60499>>>        Handle hDispatchDriver
60499>>>        Get phDispatchDriver to hDispatchDriver
60500>>>        Send PrepareParams to hDispatchDriver 2
60501>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60502>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
60503>>>        Send InvokeComMethod to hDispatchDriver 116 OLE_VT_VOID
60504>>>    End_Procedure
60505>>>
60505>>>    Procedure ComAddOrUpdateAttributeI String llname Integer llvalue
60507>>>        Handle hDispatchDriver
60507>>>        Get phDispatchDriver to hDispatchDriver
60508>>>        Send PrepareParams to hDispatchDriver 2
60509>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60510>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
60511>>>        Send InvokeComMethod to hDispatchDriver 117 OLE_VT_VOID
60512>>>    End_Procedure
60513>>>
60513>>>    Procedure ComAddStyleSheet String llstyleSheet
60515>>>        Handle hDispatchDriver
60515>>>        Get phDispatchDriver to hDispatchDriver
60516>>>        Send PrepareParams to hDispatchDriver 1
60517>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstyleSheet
60518>>>        Send InvokeComMethod to hDispatchDriver 118 OLE_VT_VOID
60519>>>    End_Procedure
60520>>>
60520>>>    Procedure ComAddToAttribute String llname Integer llamount
60522>>>        Handle hDispatchDriver
60522>>>        Get phDispatchDriver to hDispatchDriver
60523>>>        Send PrepareParams to hDispatchDriver 2
60524>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60525>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llamount
60526>>>        Send InvokeComMethod to hDispatchDriver 119 OLE_VT_VOID
60527>>>    End_Procedure
60528>>>
60528>>>    Procedure ComAddToChildContent String llTag Integer llamount
60530>>>        Handle hDispatchDriver
60530>>>        Get phDispatchDriver to hDispatchDriver
60531>>>        Send PrepareParams to hDispatchDriver 2
60532>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60533>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llamount
60534>>>        Send InvokeComMethod to hDispatchDriver 120 OLE_VT_VOID
60535>>>    End_Procedure
60536>>>
60536>>>    Procedure ComAddToContent Integer llamount
60538>>>        Handle hDispatchDriver
60538>>>        Get phDispatchDriver to hDispatchDriver
60539>>>        Send PrepareParams to hDispatchDriver 1
60540>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llamount
60541>>>        Send InvokeComMethod to hDispatchDriver 121 OLE_VT_VOID
60542>>>    End_Procedure
60543>>>
60543>>>    Function ComAppendToContent String llstr Returns Integer
60545>>>        Handle hDispatchDriver
60545>>>        Integer retVal
60545>>>        Get phDispatchDriver to hDispatchDriver
60546>>>        Send PrepareParams to hDispatchDriver 1
60547>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstr
60548>>>        Get InvokeComMethod of hDispatchDriver 122 OLE_VT_I4 to retVal
60549>>>        Function_Return retVal
60550>>>    End_Function
60551>>>
60551>>>    Function ComBEncodeContent String llcharset Variant llinData Returns Integer
60553>>>        Handle hDispatchDriver
60553>>>        Integer retVal
60553>>>        Get phDispatchDriver to hDispatchDriver
60554>>>        Send PrepareParams to hDispatchDriver 2
60555>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcharset
60556>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llinData
60557>>>        Get InvokeComMethod of hDispatchDriver 123 OLE_VT_I4 to retVal
60558>>>        Function_Return retVal
60559>>>    End_Function
60560>>>
60560>>>    Function ComChildContentMatches String lltagPath String llpattern Integer llcaseSensitive Returns Integer
60562>>>        Handle hDispatchDriver
60562>>>        Integer retVal
60562>>>        Get phDispatchDriver to hDispatchDriver
60563>>>        Send PrepareParams to hDispatchDriver 3
60564>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60565>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpattern
60566>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcaseSensitive
60567>>>        Get InvokeComMethod of hDispatchDriver 124 OLE_VT_I4 to retVal
60568>>>        Function_Return retVal
60569>>>    End_Function
60570>>>
60570>>>    Function ComChilkatPath String llpathCmd Returns String
60572>>>        Handle hDispatchDriver
60572>>>        String retVal
60572>>>        Get phDispatchDriver to hDispatchDriver
60573>>>        Send PrepareParams to hDispatchDriver 1
60574>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpathCmd
60575>>>        Get InvokeComMethod of hDispatchDriver 125 OLE_VT_BSTR to retVal
60576>>>        Function_Return retVal
60577>>>    End_Function
60578>>>
60578>>>    Procedure ComClear
60580>>>        Handle hDispatchDriver
60580>>>        Get phDispatchDriver to hDispatchDriver
60581>>>        Send InvokeComMethod to hDispatchDriver 126 OLE_VT_VOID
60582>>>    End_Procedure
60583>>>
60583>>>    Function ComContentMatches String llpattern Integer llcaseSensitive Returns Integer
60585>>>        Handle hDispatchDriver
60585>>>        Integer retVal
60585>>>        Get phDispatchDriver to hDispatchDriver
60586>>>        Send PrepareParams to hDispatchDriver 2
60587>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpattern
60588>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcaseSensitive
60589>>>        Get InvokeComMethod of hDispatchDriver 127 OLE_VT_I4 to retVal
60590>>>        Function_Return retVal
60591>>>    End_Function
60592>>>
60592>>>    Procedure ComCopy Variant llnode
60594>>>        Handle hDispatchDriver
60594>>>        Get phDispatchDriver to hDispatchDriver
60595>>>        Send PrepareParams to hDispatchDriver 1
60596>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llnode
60597>>>        Send InvokeComMethod to hDispatchDriver 128 OLE_VT_VOID
60598>>>    End_Procedure
60599>>>
60599>>>    Procedure ComCopyRef Variant llcopyFromNode
60601>>>        Handle hDispatchDriver
60601>>>        Get phDispatchDriver to hDispatchDriver
60602>>>        Send PrepareParams to hDispatchDriver 1
60603>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llcopyFromNode
60604>>>        Send InvokeComMethod to hDispatchDriver 129 OLE_VT_VOID
60605>>>    End_Procedure
60606>>>
60606>>>    Function ComDecodeContent Returns Variant
60608>>>        Handle hDispatchDriver
60608>>>        Variant retVal
60608>>>        Get phDispatchDriver to hDispatchDriver
60609>>>        Get InvokeComMethod of hDispatchDriver 130 OLE_VT_VARIANT to retVal
60610>>>        Function_Return retVal
60611>>>    End_Function
60612>>>
60612>>>    Function ComDecodeEntities String llstr Returns String
60614>>>        Handle hDispatchDriver
60614>>>        String retVal
60614>>>        Get phDispatchDriver to hDispatchDriver
60615>>>        Send PrepareParams to hDispatchDriver 1
60616>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstr
60617>>>        Get InvokeComMethod of hDispatchDriver 131 OLE_VT_BSTR to retVal
60618>>>        Function_Return retVal
60619>>>    End_Function
60620>>>
60620>>>    Function ComDecryptContent String llpassword Returns Integer
60622>>>        Handle hDispatchDriver
60622>>>        Integer retVal
60622>>>        Get phDispatchDriver to hDispatchDriver
60623>>>        Send PrepareParams to hDispatchDriver 1
60624>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
60625>>>        Get InvokeComMethod of hDispatchDriver 132 OLE_VT_I4 to retVal
60626>>>        Function_Return retVal
60627>>>    End_Function
60628>>>
60628>>>    Function ComEncryptContent String llpassword Returns Integer
60630>>>        Handle hDispatchDriver
60630>>>        Integer retVal
60630>>>        Get phDispatchDriver to hDispatchDriver
60631>>>        Send PrepareParams to hDispatchDriver 1
60632>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
60633>>>        Get InvokeComMethod of hDispatchDriver 133 OLE_VT_I4 to retVal
60634>>>        Function_Return retVal
60635>>>    End_Function
60636>>>
60636>>>    Function ComExtractChildByIndex Integer llindex Returns Variant
60638>>>        Handle hDispatchDriver
60638>>>        Variant retVal
60638>>>        Get phDispatchDriver to hDispatchDriver
60639>>>        Send PrepareParams to hDispatchDriver 1
60640>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60641>>>        Get InvokeComMethod of hDispatchDriver 134 OLE_VT_DISPATCH to retVal
60642>>>        Function_Return retVal
60643>>>    End_Function
60644>>>
60644>>>    Function ComExtractChildByName String lltagPath String llattrName String llattrValue Returns Variant
60646>>>        Handle hDispatchDriver
60646>>>        Variant retVal
60646>>>        Get phDispatchDriver to hDispatchDriver
60647>>>        Send PrepareParams to hDispatchDriver 3
60648>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60649>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
60650>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrValue
60651>>>        Get InvokeComMethod of hDispatchDriver 135 OLE_VT_DISPATCH to retVal
60652>>>        Function_Return retVal
60653>>>    End_Function
60654>>>
60654>>>    Function ComFindChild String lltagPath Returns Variant
60656>>>        Handle hDispatchDriver
60656>>>        Variant retVal
60656>>>        Get phDispatchDriver to hDispatchDriver
60657>>>        Send PrepareParams to hDispatchDriver 1
60658>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60659>>>        Get InvokeComMethod of hDispatchDriver 136 OLE_VT_DISPATCH to retVal
60660>>>        Function_Return retVal
60661>>>    End_Function
60662>>>
60662>>>    Function ComFindChild2 String lltagPath Returns Integer
60664>>>        Handle hDispatchDriver
60664>>>        Integer retVal
60664>>>        Get phDispatchDriver to hDispatchDriver
60665>>>        Send PrepareParams to hDispatchDriver 1
60666>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60667>>>        Get InvokeComMethod of hDispatchDriver 137 OLE_VT_I4 to retVal
60668>>>        Function_Return retVal
60669>>>    End_Function
60670>>>
60670>>>    Function ComFindNextRecord String lltagPath String llcontentPattern Returns Variant
60672>>>        Handle hDispatchDriver
60672>>>        Variant retVal
60672>>>        Get phDispatchDriver to hDispatchDriver
60673>>>        Send PrepareParams to hDispatchDriver 2
60674>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60675>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
60676>>>        Get InvokeComMethod of hDispatchDriver 138 OLE_VT_DISPATCH to retVal
60677>>>        Function_Return retVal
60678>>>    End_Function
60679>>>
60679>>>    Function ComFindOrAddNewChild String lltagPath Returns Variant
60681>>>        Handle hDispatchDriver
60681>>>        Variant retVal
60681>>>        Get phDispatchDriver to hDispatchDriver
60682>>>        Send PrepareParams to hDispatchDriver 1
60683>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60684>>>        Get InvokeComMethod of hDispatchDriver 139 OLE_VT_DISPATCH to retVal
60685>>>        Function_Return retVal
60686>>>    End_Function
60687>>>
60687>>>    Function ComFirstChild Returns Variant
60689>>>        Handle hDispatchDriver
60689>>>        Variant retVal
60689>>>        Get phDispatchDriver to hDispatchDriver
60690>>>        Get InvokeComMethod of hDispatchDriver 140 OLE_VT_DISPATCH to retVal
60691>>>        Function_Return retVal
60692>>>    End_Function
60693>>>
60693>>>    Function ComFirstChild2 Returns Integer
60695>>>        Handle hDispatchDriver
60695>>>        Integer retVal
60695>>>        Get phDispatchDriver to hDispatchDriver
60696>>>        Get InvokeComMethod of hDispatchDriver 141 OLE_VT_I4 to retVal
60697>>>        Function_Return retVal
60698>>>    End_Function
60699>>>
60699>>>    Function ComGetAttrValue String llname Returns String
60701>>>        Handle hDispatchDriver
60701>>>        String retVal
60701>>>        Get phDispatchDriver to hDispatchDriver
60702>>>        Send PrepareParams to hDispatchDriver 1
60703>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60704>>>        Get InvokeComMethod of hDispatchDriver 142 OLE_VT_BSTR to retVal
60705>>>        Function_Return retVal
60706>>>    End_Function
60707>>>
60707>>>    Function ComGetAttrValueInt String llname Returns Integer
60709>>>        Handle hDispatchDriver
60709>>>        Integer retVal
60709>>>        Get phDispatchDriver to hDispatchDriver
60710>>>        Send PrepareParams to hDispatchDriver 1
60711>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60712>>>        Get InvokeComMethod of hDispatchDriver 143 OLE_VT_I4 to retVal
60713>>>        Function_Return retVal
60714>>>    End_Function
60715>>>
60715>>>    Function ComGetAttributeName Integer llindex Returns String
60717>>>        Handle hDispatchDriver
60717>>>        String retVal
60717>>>        Get phDispatchDriver to hDispatchDriver
60718>>>        Send PrepareParams to hDispatchDriver 1
60719>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60720>>>        Get InvokeComMethod of hDispatchDriver 144 OLE_VT_BSTR to retVal
60721>>>        Function_Return retVal
60722>>>    End_Function
60723>>>
60723>>>    Function ComGetAttributeValue Integer llindex Returns String
60725>>>        Handle hDispatchDriver
60725>>>        String retVal
60725>>>        Get phDispatchDriver to hDispatchDriver
60726>>>        Send PrepareParams to hDispatchDriver 1
60727>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60728>>>        Get InvokeComMethod of hDispatchDriver 145 OLE_VT_BSTR to retVal
60729>>>        Function_Return retVal
60730>>>    End_Function
60731>>>
60731>>>    Function ComGetAttributeValueInt Integer llindex Returns Integer
60733>>>        Handle hDispatchDriver
60733>>>        Integer retVal
60733>>>        Get phDispatchDriver to hDispatchDriver
60734>>>        Send PrepareParams to hDispatchDriver 1
60735>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60736>>>        Get InvokeComMethod of hDispatchDriver 146 OLE_VT_I4 to retVal
60737>>>        Function_Return retVal
60738>>>    End_Function
60739>>>
60739>>>    Function ComGetBinaryContent Integer llunzipFlag Integer lldecryptFlag String llpassword Returns Variant
60741>>>        Handle hDispatchDriver
60741>>>        Variant retVal
60741>>>        Get phDispatchDriver to hDispatchDriver
60742>>>        Send PrepareParams to hDispatchDriver 3
60743>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llunzipFlag
60744>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldecryptFlag
60745>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
60746>>>        Get InvokeComMethod of hDispatchDriver 147 OLE_VT_VARIANT to retVal
60747>>>        Function_Return retVal
60748>>>    End_Function
60749>>>
60749>>>    Function ComGetChild Integer llindex Returns Variant
60751>>>        Handle hDispatchDriver
60751>>>        Variant retVal
60751>>>        Get phDispatchDriver to hDispatchDriver
60752>>>        Send PrepareParams to hDispatchDriver 1
60753>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60754>>>        Get InvokeComMethod of hDispatchDriver 148 OLE_VT_DISPATCH to retVal
60755>>>        Function_Return retVal
60756>>>    End_Function
60757>>>
60757>>>    Function ComGetChild2 Integer llindex Returns Integer
60759>>>        Handle hDispatchDriver
60759>>>        Integer retVal
60759>>>        Get phDispatchDriver to hDispatchDriver
60760>>>        Send PrepareParams to hDispatchDriver 1
60761>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60762>>>        Get InvokeComMethod of hDispatchDriver 149 OLE_VT_I4 to retVal
60763>>>        Function_Return retVal
60764>>>    End_Function
60765>>>
60765>>>    Function ComGetChildBoolValue String lltagPath Returns Integer
60767>>>        Handle hDispatchDriver
60767>>>        Integer retVal
60767>>>        Get phDispatchDriver to hDispatchDriver
60768>>>        Send PrepareParams to hDispatchDriver 1
60769>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60770>>>        Get InvokeComMethod of hDispatchDriver 150 OLE_VT_I4 to retVal
60771>>>        Function_Return retVal
60772>>>    End_Function
60773>>>
60773>>>    Function ComGetChildContent String lltagPath Returns String
60775>>>        Handle hDispatchDriver
60775>>>        String retVal
60775>>>        Get phDispatchDriver to hDispatchDriver
60776>>>        Send PrepareParams to hDispatchDriver 1
60777>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60778>>>        Get InvokeComMethod of hDispatchDriver 151 OLE_VT_BSTR to retVal
60779>>>        Function_Return retVal
60780>>>    End_Function
60781>>>
60781>>>    Function ComGetChildContentByIndex Integer llindex Returns String
60783>>>        Handle hDispatchDriver
60783>>>        String retVal
60783>>>        Get phDispatchDriver to hDispatchDriver
60784>>>        Send PrepareParams to hDispatchDriver 1
60785>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60786>>>        Get InvokeComMethod of hDispatchDriver 152 OLE_VT_BSTR to retVal
60787>>>        Function_Return retVal
60788>>>    End_Function
60789>>>
60789>>>    Function ComGetChildExact String llTag String llContent Returns Variant
60791>>>        Handle hDispatchDriver
60791>>>        Variant retVal
60791>>>        Get phDispatchDriver to hDispatchDriver
60792>>>        Send PrepareParams to hDispatchDriver 2
60793>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60794>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
60795>>>        Get InvokeComMethod of hDispatchDriver 153 OLE_VT_DISPATCH to retVal
60796>>>        Function_Return retVal
60797>>>    End_Function
60798>>>
60798>>>    Function ComGetChildIntValue String lltagPath Returns Integer
60800>>>        Handle hDispatchDriver
60800>>>        Integer retVal
60800>>>        Get phDispatchDriver to hDispatchDriver
60801>>>        Send PrepareParams to hDispatchDriver 1
60802>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60803>>>        Get InvokeComMethod of hDispatchDriver 154 OLE_VT_I4 to retVal
60804>>>        Function_Return retVal
60805>>>    End_Function
60806>>>
60806>>>    Function ComGetChildTag Integer llindex Returns String
60808>>>        Handle hDispatchDriver
60808>>>        String retVal
60808>>>        Get phDispatchDriver to hDispatchDriver
60809>>>        Send PrepareParams to hDispatchDriver 1
60810>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60811>>>        Get InvokeComMethod of hDispatchDriver 155 OLE_VT_BSTR to retVal
60812>>>        Function_Return retVal
60813>>>    End_Function
60814>>>
60814>>>    Function ComGetChildTagByIndex Integer llindex Returns String
60816>>>        Handle hDispatchDriver
60816>>>        String retVal
60816>>>        Get phDispatchDriver to hDispatchDriver
60817>>>        Send PrepareParams to hDispatchDriver 1
60818>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60819>>>        Get InvokeComMethod of hDispatchDriver 156 OLE_VT_BSTR to retVal
60820>>>        Function_Return retVal
60821>>>    End_Function
60822>>>
60822>>>    Function ComGetChildWithAttr String lltagPath String llattrName String llattrValue Returns Variant
60824>>>        Handle hDispatchDriver
60824>>>        Variant retVal
60824>>>        Get phDispatchDriver to hDispatchDriver
60825>>>        Send PrepareParams to hDispatchDriver 3
60826>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60827>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
60828>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrValue
60829>>>        Get InvokeComMethod of hDispatchDriver 157 OLE_VT_DISPATCH to retVal
60830>>>        Function_Return retVal
60831>>>    End_Function
60832>>>
60832>>>    Function ComGetChildWithContent String llContent Returns Variant
60834>>>        Handle hDispatchDriver
60834>>>        Variant retVal
60834>>>        Get phDispatchDriver to hDispatchDriver
60835>>>        Send PrepareParams to hDispatchDriver 1
60836>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
60837>>>        Get InvokeComMethod of hDispatchDriver 158 OLE_VT_DISPATCH to retVal
60838>>>        Function_Return retVal
60839>>>    End_Function
60840>>>
60840>>>    Function ComGetChildWithTag String lltagPath Returns Variant
60842>>>        Handle hDispatchDriver
60842>>>        Variant retVal
60842>>>        Get phDispatchDriver to hDispatchDriver
60843>>>        Send PrepareParams to hDispatchDriver 1
60844>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60845>>>        Get InvokeComMethod of hDispatchDriver 159 OLE_VT_DISPATCH to retVal
60846>>>        Function_Return retVal
60847>>>    End_Function
60848>>>
60848>>>    Function ComGetNthChildWithTag String llTag Integer lln Returns Variant
60850>>>        Handle hDispatchDriver
60850>>>        Variant retVal
60850>>>        Get phDispatchDriver to hDispatchDriver
60851>>>        Send PrepareParams to hDispatchDriver 2
60852>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60853>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lln
60854>>>        Get InvokeComMethod of hDispatchDriver 160 OLE_VT_DISPATCH to retVal
60855>>>        Function_Return retVal
60856>>>    End_Function
60857>>>
60857>>>    Function ComGetNthChildWithTag2 String llTag Integer lln Returns Integer
60859>>>        Handle hDispatchDriver
60859>>>        Integer retVal
60859>>>        Get phDispatchDriver to hDispatchDriver
60860>>>        Send PrepareParams to hDispatchDriver 2
60861>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60862>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lln
60863>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
60864>>>        Function_Return retVal
60865>>>    End_Function
60866>>>
60866>>>    Function ComGetParent Returns Variant
60868>>>        Handle hDispatchDriver
60868>>>        Variant retVal
60868>>>        Get phDispatchDriver to hDispatchDriver
60869>>>        Get InvokeComMethod of hDispatchDriver 162 OLE_VT_DISPATCH to retVal
60870>>>        Function_Return retVal
60871>>>    End_Function
60872>>>
60872>>>    Function ComGetParent2 Returns Integer
60874>>>        Handle hDispatchDriver
60874>>>        Integer retVal
60874>>>        Get phDispatchDriver to hDispatchDriver
60875>>>        Get InvokeComMethod of hDispatchDriver 163 OLE_VT_I4 to retVal
60876>>>        Function_Return retVal
60877>>>    End_Function
60878>>>
60878>>>    Function ComGetRoot Returns Variant
60880>>>        Handle hDispatchDriver
60880>>>        Variant retVal
60880>>>        Get phDispatchDriver to hDispatchDriver
60881>>>        Get InvokeComMethod of hDispatchDriver 164 OLE_VT_DISPATCH to retVal
60882>>>        Function_Return retVal
60883>>>    End_Function
60884>>>
60884>>>    Procedure ComGetRoot2
60886>>>        Handle hDispatchDriver
60886>>>        Get phDispatchDriver to hDispatchDriver
60887>>>        Send InvokeComMethod to hDispatchDriver 165 OLE_VT_VOID
60888>>>    End_Procedure
60889>>>
60889>>>    Function ComGetSelf Returns Variant
60891>>>        Handle hDispatchDriver
60891>>>        Variant retVal
60891>>>        Get phDispatchDriver to hDispatchDriver
60892>>>        Get InvokeComMethod of hDispatchDriver 166 OLE_VT_DISPATCH to retVal
60893>>>        Function_Return retVal
60894>>>    End_Function
60895>>>
60895>>>    Function ComGetXml Returns String
60897>>>        Handle hDispatchDriver
60897>>>        String retVal
60897>>>        Get phDispatchDriver to hDispatchDriver
60898>>>        Get InvokeComMethod of hDispatchDriver 167 OLE_VT_BSTR to retVal
60899>>>        Function_Return retVal
60900>>>    End_Function
60901>>>
60901>>>    Function ComHasAttrWithValue String llname String llvalue Returns Integer
60903>>>        Handle hDispatchDriver
60903>>>        Integer retVal
60903>>>        Get phDispatchDriver to hDispatchDriver
60904>>>        Send PrepareParams to hDispatchDriver 2
60905>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60906>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
60907>>>        Get InvokeComMethod of hDispatchDriver 168 OLE_VT_I4 to retVal
60908>>>        Function_Return retVal
60909>>>    End_Function
60910>>>
60910>>>    Function ComHasAttribute String llname Returns Integer
60912>>>        Handle hDispatchDriver
60912>>>        Integer retVal
60912>>>        Get phDispatchDriver to hDispatchDriver
60913>>>        Send PrepareParams to hDispatchDriver 1
60914>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60915>>>        Get InvokeComMethod of hDispatchDriver 169 OLE_VT_I4 to retVal
60916>>>        Function_Return retVal
60917>>>    End_Function
60918>>>
60918>>>    Function ComHasChildWithContent String llContent Returns Integer
60920>>>        Handle hDispatchDriver
60920>>>        Integer retVal
60920>>>        Get phDispatchDriver to hDispatchDriver
60921>>>        Send PrepareParams to hDispatchDriver 1
60922>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
60923>>>        Get InvokeComMethod of hDispatchDriver 170 OLE_VT_I4 to retVal
60924>>>        Function_Return retVal
60925>>>    End_Function
60926>>>
60926>>>    Function ComHasChildWithTag String lltagPath Returns Integer
60928>>>        Handle hDispatchDriver
60928>>>        Integer retVal
60928>>>        Get phDispatchDriver to hDispatchDriver
60929>>>        Send PrepareParams to hDispatchDriver 1
60930>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60931>>>        Get InvokeComMethod of hDispatchDriver 171 OLE_VT_I4 to retVal
60932>>>        Function_Return retVal
60933>>>    End_Function
60934>>>
60934>>>    Function ComHasChildWithTagAndContent String lltagPath String llContent Returns Integer
60936>>>        Handle hDispatchDriver
60936>>>        Integer retVal
60936>>>        Get phDispatchDriver to hDispatchDriver
60937>>>        Send PrepareParams to hDispatchDriver 2
60938>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60939>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
60940>>>        Get InvokeComMethod of hDispatchDriver 172 OLE_VT_I4 to retVal
60941>>>        Function_Return retVal
60942>>>    End_Function
60943>>>
60943>>>    Procedure ComInsertChildTreeAfter Integer llindex Variant lltree
60945>>>        Handle hDispatchDriver
60945>>>        Get phDispatchDriver to hDispatchDriver
60946>>>        Send PrepareParams to hDispatchDriver 2
60947>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60948>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH lltree
60949>>>        Send InvokeComMethod to hDispatchDriver 173 OLE_VT_VOID
60950>>>    End_Procedure
60951>>>
60951>>>    Procedure ComInsertChildTreeBefore Integer llindex Variant lltree
60953>>>        Handle hDispatchDriver
60953>>>        Get phDispatchDriver to hDispatchDriver
60954>>>        Send PrepareParams to hDispatchDriver 2
60955>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60956>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH lltree
60957>>>        Send InvokeComMethod to hDispatchDriver 174 OLE_VT_VOID
60958>>>    End_Procedure
60959>>>
60959>>>    Function ComLastChild Returns Variant
60961>>>        Handle hDispatchDriver
60961>>>        Variant retVal
60961>>>        Get phDispatchDriver to hDispatchDriver
60962>>>        Get InvokeComMethod of hDispatchDriver 175 OLE_VT_DISPATCH to retVal
60963>>>        Function_Return retVal
60964>>>    End_Function
60965>>>
60965>>>    Function ComLastChild2 Returns Integer
60967>>>        Handle hDispatchDriver
60967>>>        Integer retVal
60967>>>        Get phDispatchDriver to hDispatchDriver
60968>>>        Get InvokeComMethod of hDispatchDriver 176 OLE_VT_I4 to retVal
60969>>>        Function_Return retVal
60970>>>    End_Function
60971>>>
60971>>>    Function ComLoadXml String llxmlData Returns Integer
60973>>>        Handle hDispatchDriver
60973>>>        Integer retVal
60973>>>        Get phDispatchDriver to hDispatchDriver
60974>>>        Send PrepareParams to hDispatchDriver 1
60975>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llxmlData
60976>>>        Get InvokeComMethod of hDispatchDriver 177 OLE_VT_I4 to retVal
60977>>>        Function_Return retVal
60978>>>    End_Function
60979>>>
60979>>>    Function ComLoadXml2 String llxmlData Integer llautoTrim Returns Integer
60981>>>        Handle hDispatchDriver
60981>>>        Integer retVal
60981>>>        Get phDispatchDriver to hDispatchDriver
60982>>>        Send PrepareParams to hDispatchDriver 2
60983>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llxmlData
60984>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoTrim
60985>>>        Get InvokeComMethod of hDispatchDriver 178 OLE_VT_I4 to retVal
60986>>>        Function_Return retVal
60987>>>    End_Function
60988>>>
60988>>>    Function ComLoadXmlFile String llfilename Returns Integer
60990>>>        Handle hDispatchDriver
60990>>>        Integer retVal
60990>>>        Get phDispatchDriver to hDispatchDriver
60991>>>        Send PrepareParams to hDispatchDriver 1
60992>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
60993>>>        Get InvokeComMethod of hDispatchDriver 179 OLE_VT_I4 to retVal
60994>>>        Function_Return retVal
60995>>>    End_Function
60996>>>
60996>>>    Function ComLoadXmlFile2 String llfilename Integer llautoTrim Returns Integer
60998>>>        Handle hDispatchDriver
60998>>>        Integer retVal
60998>>>        Get phDispatchDriver to hDispatchDriver
60999>>>        Send PrepareParams to hDispatchDriver 2
61000>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
61001>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoTrim
61002>>>        Get InvokeComMethod of hDispatchDriver 180 OLE_VT_I4 to retVal
61003>>>        Function_Return retVal
61004>>>    End_Function
61005>>>
61005>>>    Function ComNewChild String lltagPath String llContent Returns Variant
61007>>>        Handle hDispatchDriver
61007>>>        Variant retVal
61007>>>        Get phDispatchDriver to hDispatchDriver
61008>>>        Send PrepareParams to hDispatchDriver 2
61009>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61010>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
61011>>>        Get InvokeComMethod of hDispatchDriver 181 OLE_VT_DISPATCH to retVal
61012>>>        Function_Return retVal
61013>>>    End_Function
61014>>>
61014>>>    Procedure ComNewChild2 String lltagPath String llContent
61016>>>        Handle hDispatchDriver
61016>>>        Get phDispatchDriver to hDispatchDriver
61017>>>        Send PrepareParams to hDispatchDriver 2
61018>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61019>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
61020>>>        Send InvokeComMethod to hDispatchDriver 182 OLE_VT_VOID
61021>>>    End_Procedure
61022>>>
61022>>>    Function ComNewChildAfter Integer llindex String llTag String llContent Returns Variant
61024>>>        Handle hDispatchDriver
61024>>>        Variant retVal
61024>>>        Get phDispatchDriver to hDispatchDriver
61025>>>        Send PrepareParams to hDispatchDriver 3
61026>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
61027>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61028>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
61029>>>        Get InvokeComMethod of hDispatchDriver 183 OLE_VT_DISPATCH to retVal
61030>>>        Function_Return retVal
61031>>>    End_Function
61032>>>
61032>>>    Function ComNewChildBefore Integer llindex String llTag String llContent Returns Variant
61034>>>        Handle hDispatchDriver
61034>>>        Variant retVal
61034>>>        Get phDispatchDriver to hDispatchDriver
61035>>>        Send PrepareParams to hDispatchDriver 3
61036>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
61037>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61038>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
61039>>>        Get InvokeComMethod of hDispatchDriver 184 OLE_VT_DISPATCH to retVal
61040>>>        Function_Return retVal
61041>>>    End_Function
61042>>>
61042>>>    Procedure ComNewChildInt2 String lltagPath Integer llvalue
61044>>>        Handle hDispatchDriver
61044>>>        Get phDispatchDriver to hDispatchDriver
61045>>>        Send PrepareParams to hDispatchDriver 2
61046>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61047>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
61048>>>        Send InvokeComMethod to hDispatchDriver 185 OLE_VT_VOID
61049>>>    End_Procedure
61050>>>
61050>>>    Function ComNextSibling Returns Variant
61052>>>        Handle hDispatchDriver
61052>>>        Variant retVal
61052>>>        Get phDispatchDriver to hDispatchDriver
61053>>>        Get InvokeComMethod of hDispatchDriver 186 OLE_VT_DISPATCH to retVal
61054>>>        Function_Return retVal
61055>>>    End_Function
61056>>>
61056>>>    Function ComNextSibling2 Returns Integer
61058>>>        Handle hDispatchDriver
61058>>>        Integer retVal
61058>>>        Get phDispatchDriver to hDispatchDriver
61059>>>        Get InvokeComMethod of hDispatchDriver 187 OLE_VT_I4 to retVal
61060>>>        Function_Return retVal
61061>>>    End_Function
61062>>>
61062>>>    Function ComNumChildrenHavingTag String llTag Returns Integer
61064>>>        Handle hDispatchDriver
61064>>>        Integer retVal
61064>>>        Get phDispatchDriver to hDispatchDriver
61065>>>        Send PrepareParams to hDispatchDriver 1
61066>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61067>>>        Get InvokeComMethod of hDispatchDriver 188 OLE_VT_I4 to retVal
61068>>>        Function_Return retVal
61069>>>    End_Function
61070>>>
61070>>>    Function ComPreviousSibling Returns Variant
61072>>>        Handle hDispatchDriver
61072>>>        Variant retVal
61072>>>        Get phDispatchDriver to hDispatchDriver
61073>>>        Get InvokeComMethod of hDispatchDriver 189 OLE_VT_DISPATCH to retVal
61074>>>        Function_Return retVal
61075>>>    End_Function
61076>>>
61076>>>    Function ComPreviousSibling2 Returns Integer
61078>>>        Handle hDispatchDriver
61078>>>        Integer retVal
61078>>>        Get phDispatchDriver to hDispatchDriver
61079>>>        Get InvokeComMethod of hDispatchDriver 190 OLE_VT_I4 to retVal
61080>>>        Function_Return retVal
61081>>>    End_Function
61082>>>
61082>>>    Function ComQEncodeContent String llcharset Variant llinData Returns Integer
61084>>>        Handle hDispatchDriver
61084>>>        Integer retVal
61084>>>        Get phDispatchDriver to hDispatchDriver
61085>>>        Send PrepareParams to hDispatchDriver 2
61086>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcharset
61087>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llinData
61088>>>        Get InvokeComMethod of hDispatchDriver 191 OLE_VT_I4 to retVal
61089>>>        Function_Return retVal
61090>>>    End_Function
61091>>>
61091>>>    Function ComRemoveAllAttributes Returns Integer
61093>>>        Handle hDispatchDriver
61093>>>        Integer retVal
61093>>>        Get phDispatchDriver to hDispatchDriver
61094>>>        Get InvokeComMethod of hDispatchDriver 192 OLE_VT_I4 to retVal
61095>>>        Function_Return retVal
61096>>>    End_Function
61097>>>
61097>>>    Procedure ComRemoveAllChildren
61099>>>        Handle hDispatchDriver
61099>>>        Get phDispatchDriver to hDispatchDriver
61100>>>        Send InvokeComMethod to hDispatchDriver 193 OLE_VT_VOID
61101>>>    End_Procedure
61102>>>
61102>>>    Function ComRemoveAttribute String llname Returns Integer
61104>>>        Handle hDispatchDriver
61104>>>        Integer retVal
61104>>>        Get phDispatchDriver to hDispatchDriver
61105>>>        Send PrepareParams to hDispatchDriver 1
61106>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
61107>>>        Get InvokeComMethod of hDispatchDriver 194 OLE_VT_I4 to retVal
61108>>>        Function_Return retVal
61109>>>    End_Function
61110>>>
61110>>>    Procedure ComRemoveChild String lltagPath
61112>>>        Handle hDispatchDriver
61112>>>        Get phDispatchDriver to hDispatchDriver
61113>>>        Send PrepareParams to hDispatchDriver 1
61114>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61115>>>        Send InvokeComMethod to hDispatchDriver 195 OLE_VT_VOID
61116>>>    End_Procedure
61117>>>
61117>>>    Procedure ComRemoveChildByIndex Integer llindex
61119>>>        Handle hDispatchDriver
61119>>>        Get phDispatchDriver to hDispatchDriver
61120>>>        Send PrepareParams to hDispatchDriver 1
61121>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
61122>>>        Send InvokeComMethod to hDispatchDriver 196 OLE_VT_VOID
61123>>>    End_Procedure
61124>>>
61124>>>    Procedure ComRemoveChildWithContent String llContent
61126>>>        Handle hDispatchDriver
61126>>>        Get phDispatchDriver to hDispatchDriver
61127>>>        Send PrepareParams to hDispatchDriver 1
61128>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
61129>>>        Send InvokeComMethod to hDispatchDriver 197 OLE_VT_VOID
61130>>>    End_Procedure
61131>>>
61131>>>    Procedure ComRemoveFromTree
61133>>>        Handle hDispatchDriver
61133>>>        Get phDispatchDriver to hDispatchDriver
61134>>>        Send InvokeComMethod to hDispatchDriver 198 OLE_VT_VOID
61135>>>    End_Procedure
61136>>>
61136>>>    Function ComSaveBinaryContent String llfilename Integer llunzipFlag Integer lldecryptFlag String llpassword Returns Integer
61138>>>        Handle hDispatchDriver
61138>>>        Integer retVal
61138>>>        Get phDispatchDriver to hDispatchDriver
61139>>>        Send PrepareParams to hDispatchDriver 4
61140>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
61141>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llunzipFlag
61142>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldecryptFlag
61143>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
61144>>>        Get InvokeComMethod of hDispatchDriver 199 OLE_VT_I4 to retVal
61145>>>        Function_Return retVal
61146>>>    End_Function
61147>>>
61147>>>    Function ComSaveXml String llfilename Returns Integer
61149>>>        Handle hDispatchDriver
61149>>>        Integer retVal
61149>>>        Get phDispatchDriver to hDispatchDriver
61150>>>        Send PrepareParams to hDispatchDriver 1
61151>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
61152>>>        Get InvokeComMethod of hDispatchDriver 200 OLE_VT_I4 to retVal
61153>>>        Function_Return retVal
61154>>>    End_Function
61155>>>
61155>>>    Function ComSearchAllForContent Variant llafterPtr String llcontentPattern Returns Variant
61157>>>        Handle hDispatchDriver
61157>>>        Variant retVal
61157>>>        Get phDispatchDriver to hDispatchDriver
61158>>>        Send PrepareParams to hDispatchDriver 2
61159>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61160>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
61161>>>        Get InvokeComMethod of hDispatchDriver 201 OLE_VT_DISPATCH to retVal
61162>>>        Function_Return retVal
61163>>>    End_Function
61164>>>
61164>>>    Function ComSearchAllForContent2 Variant llafterPtr String llcontentPattern Returns Integer
61166>>>        Handle hDispatchDriver
61166>>>        Integer retVal
61166>>>        Get phDispatchDriver to hDispatchDriver
61167>>>        Send PrepareParams to hDispatchDriver 2
61168>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61169>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
61170>>>        Get InvokeComMethod of hDispatchDriver 202 OLE_VT_I4 to retVal
61171>>>        Function_Return retVal
61172>>>    End_Function
61173>>>
61173>>>    Function ComSearchForAttribute Variant llafterPtr String llTag String llattr String llvaluePattern Returns Variant
61175>>>        Handle hDispatchDriver
61175>>>        Variant retVal
61175>>>        Get phDispatchDriver to hDispatchDriver
61176>>>        Send PrepareParams to hDispatchDriver 4
61177>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61178>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61179>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattr
61180>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvaluePattern
61181>>>        Get InvokeComMethod of hDispatchDriver 203 OLE_VT_DISPATCH to retVal
61182>>>        Function_Return retVal
61183>>>    End_Function
61184>>>
61184>>>    Function ComSearchForAttribute2 Variant llafterPtr String llTag String llattr String llvaluePattern Returns Integer
61186>>>        Handle hDispatchDriver
61186>>>        Integer retVal
61186>>>        Get phDispatchDriver to hDispatchDriver
61187>>>        Send PrepareParams to hDispatchDriver 4
61188>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61189>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61190>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattr
61191>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvaluePattern
61192>>>        Get InvokeComMethod of hDispatchDriver 204 OLE_VT_I4 to retVal
61193>>>        Function_Return retVal
61194>>>    End_Function
61195>>>
61195>>>    Function ComSearchForContent Variant llafterPtr String llTag String llcontentPattern Returns Variant
61197>>>        Handle hDispatchDriver
61197>>>        Variant retVal
61197>>>        Get phDispatchDriver to hDispatchDriver
61198>>>        Send PrepareParams to hDispatchDriver 3
61199>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61200>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61201>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
61202>>>        Get InvokeComMethod of hDispatchDriver 205 OLE_VT_DISPATCH to retVal
61203>>>        Function_Return retVal
61204>>>    End_Function
61205>>>
61205>>>    Function ComSearchForContent2 Variant llafterPtr String llTag String llcontentPattern Returns Integer
61207>>>        Handle hDispatchDriver
61207>>>        Integer retVal
61207>>>        Get phDispatchDriver to hDispatchDriver
61208>>>        Send PrepareParams to hDispatchDriver 3
61209>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61210>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61211>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
61212>>>        Get InvokeComMethod of hDispatchDriver 206 OLE_VT_I4 to retVal
61213>>>        Function_Return retVal
61214>>>    End_Function
61215>>>
61215>>>    Function ComSearchForTag Variant llafterPtr String llTag Returns Variant
61217>>>        Handle hDispatchDriver
61217>>>        Variant retVal
61217>>>        Get phDispatchDriver to hDispatchDriver
61218>>>        Send PrepareParams to hDispatchDriver 2
61219>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61220>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61221>>>        Get InvokeComMethod of hDispatchDriver 207 OLE_VT_DISPATCH to retVal
61222>>>        Function_Return retVal
61223>>>    End_Function
61224>>>
61224>>>    Function ComSearchForTag2 Variant llafterPtr String llTag Returns Integer
61226>>>        Handle hDispatchDriver
61226>>>        Integer retVal
61226>>>        Get phDispatchDriver to hDispatchDriver
61227>>>        Send PrepareParams to hDispatchDriver 2
61228>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61229>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61230>>>        Get InvokeComMethod of hDispatchDriver 208 OLE_VT_I4 to retVal
61231>>>        Function_Return retVal
61232>>>    End_Function
61233>>>
61233>>>    Function ComSetBinaryContent Variant llinData Integer llzipFlag Integer llencryptFlag String llpassword Returns Integer
61235>>>        Handle hDispatchDriver
61235>>>        Integer retVal
61235>>>        Get phDispatchDriver to hDispatchDriver
61236>>>        Send PrepareParams to hDispatchDriver 4
61237>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llinData
61238>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llzipFlag
61239>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llencryptFlag
61240>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
61241>>>        Get InvokeComMethod of hDispatchDriver 209 OLE_VT_I4 to retVal
61242>>>        Function_Return retVal
61243>>>    End_Function
61244>>>
61244>>>    Function ComSetBinaryContentFromFile String llfilename Integer llzipFlag Integer llencryptFlag String llpassword Returns Integer
61246>>>        Handle hDispatchDriver
61246>>>        Integer retVal
61246>>>        Get phDispatchDriver to hDispatchDriver
61247>>>        Send PrepareParams to hDispatchDriver 4
61248>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
61249>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llzipFlag
61250>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llencryptFlag
61251>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
61252>>>        Get InvokeComMethod of hDispatchDriver 210 OLE_VT_I4 to retVal
61253>>>        Function_Return retVal
61254>>>    End_Function
61255>>>
61255>>>    Procedure ComSortByAttribute String llattrName Integer llascending
61257>>>        Handle hDispatchDriver
61257>>>        Get phDispatchDriver to hDispatchDriver
61258>>>        Send PrepareParams to hDispatchDriver 2
61259>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
61260>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61261>>>        Send InvokeComMethod to hDispatchDriver 211 OLE_VT_VOID
61262>>>    End_Procedure
61263>>>
61263>>>    Procedure ComSortByAttributeInt String llattrName Integer llascending
61265>>>        Handle hDispatchDriver
61265>>>        Get phDispatchDriver to hDispatchDriver
61266>>>        Send PrepareParams to hDispatchDriver 2
61267>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
61268>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61269>>>        Send InvokeComMethod to hDispatchDriver 212 OLE_VT_VOID
61270>>>    End_Procedure
61271>>>
61271>>>    Procedure ComSortByContent Integer llascending
61273>>>        Handle hDispatchDriver
61273>>>        Get phDispatchDriver to hDispatchDriver
61274>>>        Send PrepareParams to hDispatchDriver 1
61275>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61276>>>        Send InvokeComMethod to hDispatchDriver 213 OLE_VT_VOID
61277>>>    End_Procedure
61278>>>
61278>>>    Procedure ComSortByTag Integer llascending
61280>>>        Handle hDispatchDriver
61280>>>        Get phDispatchDriver to hDispatchDriver
61281>>>        Send PrepareParams to hDispatchDriver 1
61282>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61283>>>        Send InvokeComMethod to hDispatchDriver 214 OLE_VT_VOID
61284>>>    End_Procedure
61285>>>
61285>>>    Procedure ComSortRecordsByAttribute String llsortTag String llattrName Integer llascending
61287>>>        Handle hDispatchDriver
61287>>>        Get phDispatchDriver to hDispatchDriver
61288>>>        Send PrepareParams to hDispatchDriver 3
61289>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsortTag
61290>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
61291>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61292>>>        Send InvokeComMethod to hDispatchDriver 215 OLE_VT_VOID
61293>>>    End_Procedure
61294>>>
61294>>>    Procedure ComSortRecordsByContent String llsortTag Integer llascending
61296>>>        Handle hDispatchDriver
61296>>>        Get phDispatchDriver to hDispatchDriver
61297>>>        Send PrepareParams to hDispatchDriver 2
61298>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsortTag
61299>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61300>>>        Send InvokeComMethod to hDispatchDriver 216 OLE_VT_VOID
61301>>>    End_Procedure
61302>>>
61302>>>    Procedure ComSortRecordsByContentInt String llsortTag Integer llascending
61304>>>        Handle hDispatchDriver
61304>>>        Get phDispatchDriver to hDispatchDriver
61305>>>        Send PrepareParams to hDispatchDriver 2
61306>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsortTag
61307>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61308>>>        Send InvokeComMethod to hDispatchDriver 217 OLE_VT_VOID
61309>>>    End_Procedure
61310>>>
61310>>>    Function ComSwapNode Variant llnode Returns Integer
61312>>>        Handle hDispatchDriver
61312>>>        Integer retVal
61312>>>        Get phDispatchDriver to hDispatchDriver
61313>>>        Send PrepareParams to hDispatchDriver 1
61314>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llnode
61315>>>        Get InvokeComMethod of hDispatchDriver 218 OLE_VT_I4 to retVal
61316>>>        Function_Return retVal
61317>>>    End_Function
61318>>>
61318>>>    Function ComSwapTree Variant lltree Returns Integer
61320>>>        Handle hDispatchDriver
61320>>>        Integer retVal
61320>>>        Get phDispatchDriver to hDispatchDriver
61321>>>        Send PrepareParams to hDispatchDriver 1
61322>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH lltree
61323>>>        Get InvokeComMethod of hDispatchDriver 219 OLE_VT_I4 to retVal
61324>>>        Function_Return retVal
61325>>>    End_Function
61326>>>
61326>>>    Function ComTagContent String lltagName Returns String
61328>>>        Handle hDispatchDriver
61328>>>        String retVal
61328>>>        Get phDispatchDriver to hDispatchDriver
61329>>>        Send PrepareParams to hDispatchDriver 1
61330>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagName
61331>>>        Get InvokeComMethod of hDispatchDriver 220 OLE_VT_BSTR to retVal
61332>>>        Function_Return retVal
61333>>>    End_Function
61334>>>
61334>>>    Function ComTagEquals String llTag Returns Integer
61336>>>        Handle hDispatchDriver
61336>>>        Integer retVal
61336>>>        Get phDispatchDriver to hDispatchDriver
61337>>>        Send PrepareParams to hDispatchDriver 1
61338>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61339>>>        Get InvokeComMethod of hDispatchDriver 221 OLE_VT_I4 to retVal
61340>>>        Function_Return retVal
61341>>>    End_Function
61342>>>
61342>>>    Function ComUnzipContent Returns Integer
61344>>>        Handle hDispatchDriver
61344>>>        Integer retVal
61344>>>        Get phDispatchDriver to hDispatchDriver
61345>>>        Get InvokeComMethod of hDispatchDriver 222 OLE_VT_I4 to retVal
61346>>>        Function_Return retVal
61347>>>    End_Function
61348>>>
61348>>>    Function ComUnzipTree Returns Integer
61350>>>        Handle hDispatchDriver
61350>>>        Integer retVal
61350>>>        Get phDispatchDriver to hDispatchDriver
61351>>>        Get InvokeComMethod of hDispatchDriver 223 OLE_VT_I4 to retVal
61352>>>        Function_Return retVal
61353>>>    End_Function
61354>>>
61354>>>    Function ComUpdateAttribute String llattrName String llattrValue Returns Integer
61356>>>        Handle hDispatchDriver
61356>>>        Integer retVal
61356>>>        Get phDispatchDriver to hDispatchDriver
61357>>>        Send PrepareParams to hDispatchDriver 2
61358>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
61359>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrValue
61360>>>        Get InvokeComMethod of hDispatchDriver 224 OLE_VT_I4 to retVal
61361>>>        Function_Return retVal
61362>>>    End_Function
61363>>>
61363>>>    Function ComUpdateAttributeInt String llattrName Integer llvalue Returns Integer
61365>>>        Handle hDispatchDriver
61365>>>        Integer retVal
61365>>>        Get phDispatchDriver to hDispatchDriver
61366>>>        Send PrepareParams to hDispatchDriver 2
61367>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
61368>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
61369>>>        Get InvokeComMethod of hDispatchDriver 225 OLE_VT_I4 to retVal
61370>>>        Function_Return retVal
61371>>>    End_Function
61372>>>
61372>>>    Procedure ComUpdateChildContent String lltagPath String llvalue
61374>>>        Handle hDispatchDriver
61374>>>        Get phDispatchDriver to hDispatchDriver
61375>>>        Send PrepareParams to hDispatchDriver 2
61376>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61377>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
61378>>>        Send InvokeComMethod to hDispatchDriver 226 OLE_VT_VOID
61379>>>    End_Procedure
61380>>>
61380>>>    Procedure ComUpdateChildContentInt String lltagPath Integer llvalue
61382>>>        Handle hDispatchDriver
61382>>>        Get phDispatchDriver to hDispatchDriver
61383>>>        Send PrepareParams to hDispatchDriver 2
61384>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61385>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
61386>>>        Send InvokeComMethod to hDispatchDriver 227 OLE_VT_VOID
61387>>>    End_Procedure
61388>>>
61388>>>    Function ComZipContent Returns Integer
61390>>>        Handle hDispatchDriver
61390>>>        Integer retVal
61390>>>        Get phDispatchDriver to hDispatchDriver
61391>>>        Get InvokeComMethod of hDispatchDriver 228 OLE_VT_I4 to retVal
61392>>>        Function_Return retVal
61393>>>    End_Function
61394>>>
61394>>>    Function ComZipTree Returns Integer
61396>>>        Handle hDispatchDriver
61396>>>        Integer retVal
61396>>>        Get phDispatchDriver to hDispatchDriver
61397>>>        Get InvokeComMethod of hDispatchDriver 229 OLE_VT_I4 to retVal
61398>>>        Function_Return retVal
61399>>>    End_Function
61400>>>
61400>>>    Function ComEmitBom Returns Integer
61402>>>        Handle hDispatchDriver
61402>>>        Integer retVal
61402>>>        Get phDispatchDriver to hDispatchDriver
61403>>>        Get InvokeComMethod of hDispatchDriver 237 OLE_VT_I4 to retVal
61404>>>        Function_Return retVal
61405>>>    End_Function
61406>>>
61406>>>    Procedure Set ComEmitBom Integer value
61408>>>        Handle hDispatchDriver
61408>>>        Get phDispatchDriver to hDispatchDriver
61409>>>        Send PrepareParams to hDispatchDriver 1
61410>>>        Set ComProperty of hDispatchDriver 237 OLE_VT_I4 to value
61411>>>    End_Procedure
61412>>>
61412>>>    Function ComLoadSb Variant llsb Integer llautoTrim Returns Integer
61414>>>        Handle hDispatchDriver
61414>>>        Integer retVal
61414>>>        Get phDispatchDriver to hDispatchDriver
61415>>>        Send PrepareParams to hDispatchDriver 2
61416>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llsb
61417>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoTrim
61418>>>        Get InvokeComMethod of hDispatchDriver 238 OLE_VT_I4 to retVal
61419>>>        Function_Return retVal
61420>>>    End_Function
61421>>>
61421>>>    Function ComGetXmlSb Variant llsb Returns Integer
61423>>>        Handle hDispatchDriver
61423>>>        Integer retVal
61423>>>        Get phDispatchDriver to hDispatchDriver
61424>>>        Send PrepareParams to hDispatchDriver 1
61425>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llsb
61426>>>        Get InvokeComMethod of hDispatchDriver 239 OLE_VT_I4 to retVal
61427>>>        Function_Return retVal
61428>>>    End_Function
61429>>>
61429>>>    Function ComI Returns Integer
61431>>>        Handle hDispatchDriver
61431>>>        Integer retVal
61431>>>        Get phDispatchDriver to hDispatchDriver
61432>>>        Get InvokeComMethod of hDispatchDriver 240 OLE_VT_I4 to retVal
61433>>>        Function_Return retVal
61434>>>    End_Function
61435>>>
61435>>>    Procedure Set ComI Integer value
61437>>>        Handle hDispatchDriver
61437>>>        Get phDispatchDriver to hDispatchDriver
61438>>>        Send PrepareParams to hDispatchDriver 1
61439>>>        Set ComProperty of hDispatchDriver 240 OLE_VT_I4 to value
61440>>>    End_Procedure
61441>>>
61441>>>    Function ComJ Returns Integer
61443>>>        Handle hDispatchDriver
61443>>>        Integer retVal
61443>>>        Get phDispatchDriver to hDispatchDriver
61444>>>        Get InvokeComMethod of hDispatchDriver 241 OLE_VT_I4 to retVal
61445>>>        Function_Return retVal
61446>>>    End_Function
61447>>>
61447>>>    Procedure Set ComJ Integer value
61449>>>        Handle hDispatchDriver
61449>>>        Get phDispatchDriver to hDispatchDriver
61450>>>        Send PrepareParams to hDispatchDriver 1
61451>>>        Set ComProperty of hDispatchDriver 241 OLE_VT_I4 to value
61452>>>    End_Procedure
61453>>>
61453>>>    Function ComK Returns Integer
61455>>>        Handle hDispatchDriver
61455>>>        Integer retVal
61455>>>        Get phDispatchDriver to hDispatchDriver
61456>>>        Get InvokeComMethod of hDispatchDriver 242 OLE_VT_I4 to retVal
61457>>>        Function_Return retVal
61458>>>    End_Function
61459>>>
61459>>>    Procedure Set ComK Integer value
61461>>>        Handle hDispatchDriver
61461>>>        Get phDispatchDriver to hDispatchDriver
61462>>>        Send PrepareParams to hDispatchDriver 1
61463>>>        Set ComProperty of hDispatchDriver 242 OLE_VT_I4 to value
61464>>>    End_Procedure
61465>>>
61465>>>    Function ComNumChildrenAt String lltagPath Returns Integer
61467>>>        Handle hDispatchDriver
61467>>>        Integer retVal
61467>>>        Get phDispatchDriver to hDispatchDriver
61468>>>        Send PrepareParams to hDispatchDriver 1
61469>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61470>>>        Get InvokeComMethod of hDispatchDriver 243 OLE_VT_I4 to retVal
61471>>>        Function_Return retVal
61472>>>    End_Function
61473>>>
61473>>>    Function ComUpdateAt String lltagPath Integer llautoCreate String llvalue Returns Integer
61475>>>        Handle hDispatchDriver
61475>>>        Integer retVal
61475>>>        Get phDispatchDriver to hDispatchDriver
61476>>>        Send PrepareParams to hDispatchDriver 3
61477>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61478>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoCreate
61479>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
61480>>>        Get InvokeComMethod of hDispatchDriver 244 OLE_VT_I4 to retVal
61481>>>        Function_Return retVal
61482>>>    End_Function
61483>>>
61483>>>    Function ComUpdateAttrAt String lltagPath Integer llautoCreate String llattrName String llattrValue Returns Integer
61485>>>        Handle hDispatchDriver
61485>>>        Integer retVal
61485>>>        Get phDispatchDriver to hDispatchDriver
61486>>>        Send PrepareParams to hDispatchDriver 4
61487>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61488>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoCreate
61489>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
61490>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrValue
61491>>>        Get InvokeComMethod of hDispatchDriver 245 OLE_VT_I4 to retVal
61492>>>        Function_Return retVal
61493>>>    End_Function
61494>>>
61494>>>    Function ComEmitCompact Returns Integer
61496>>>        Handle hDispatchDriver
61496>>>        Integer retVal
61496>>>        Get phDispatchDriver to hDispatchDriver
61497>>>        Get InvokeComMethod of hDispatchDriver 246 OLE_VT_I4 to retVal
61498>>>        Function_Return retVal
61499>>>    End_Function
61500>>>
61500>>>    Procedure Set ComEmitCompact Integer value
61502>>>        Handle hDispatchDriver
61502>>>        Get phDispatchDriver to hDispatchDriver
61503>>>        Send PrepareParams to hDispatchDriver 1
61504>>>        Set ComProperty of hDispatchDriver 246 OLE_VT_I4 to value
61505>>>    End_Procedure
61506>>>End_Class
61507>>>
61507>>>// CoClass
61507>>>// ProgID: Chilkat_9_5_0.Xml.1
61507>>>// CLSID: {501B9600-382D-454D-AA0A-3BC22A87C485}
61507>>>// ChilkatXml Class 9.5.0
61507>>>Class cComChilkatXml is a cComActiveXControl
61508>>>    Import_Class_Protocol cComIChilkatXml
61509>>>
61509>>>    Procedure Construct_Object
61511>>>        Forward Send Construct_Object
61513>>>        Set psProgID to "{501B9600-382D-454D-AA0A-3BC22A87C485}"
61514>>>        Set peAutoCreate to acAutoCreate
61515>>>    End_Procedure
61516>>>End_Class
61517>
61517>Object oApplication is a cApplication
61519>    Set psCompany to "RDC Tools International"
61520>    Set psProduct to "Driver Info Import"
61521>    Set psProgram to "Read DF Driver Def XML file"
61522>    Set psVersion to "2023"
61523>    Property String psCompileDateAndTime
61525>End_Object
61526>
61526>Object oMainPanel is a BasicPanel
61528>    Set Location to 59 173
61529>    Set Size to 180 394
61530>    Set piMinSize to 180 394
61531>    Set Border_Style to Border_Thick
61532>    Set Locate_Mode to Center_On_Screen
61533>    Set Label to "Read DF Driver Def XML file - Internal Usage Only!"
61534>    Set Maximize_Icon to False
61535>    Set peNeighborhood to nhPublic
61536>    
61536>    // Struct array to keep driver XML file Data Types read by the ReadXMLDriverData message.
61536>    // Then used by the WriteXMLDriverTypeData message to write them to file.
61536>    Property tColumnType[] paColumnType
61538>
61538>    Object oCommandBarSystem is a cCJCommandBarSystem
61540>        Set pbAutoResizeIcons to True
61541>        Move Self to ghoCommandBars
61542>    End_Object                  
61543>    
61543>    Object oDbUpdateFunctionLibrary is a cDbUpdateFunctionLibrary
61545>    End_Object
61546>
61546>    Object oReadXMLFile_grp is a cRDCHeaderGroup
61548>        Set Size to 67 360
61549>        Set Location to 11 17
61550>        Set peAnchors to anTopLeftRight
61551>        Set psLabel to "Read Driver Def XML file" 
61552>        Set psImage to "ActionOpen.ico"
61553>
61553>        Object oFileNameDialog is a OpenDialog
61555>            Set Dialog_Caption to "Select a Driver XML-file"
61556>            Set Filter_String to "XML Files (.xml)|*.xml|All files (*.*)|*.*"
61557>        End_Object
61558>
61558>        Object oDriverXMLFileName_fm is a Form
61560>            Set Size to 13 298
61561>            Set Location to 20 43
61562>            Set Label_Justification_Mode to JMode_Top
61563>            Set Label_Col_Offset to 0
61564>            Set Prompt_Button_Mode to PB_PromptOn
61565>            Set peAnchors to anTopLeftRight
61566>            Set Label_Row_Offset to 1
61567>
61567>            Procedure Prompt
61570>                Boolean bOk
61570>                String sPath sDrive sFileName
61570>
61570>                Get Value to sFileName
61571>                Move (Trim (sFileName)) to sFileName
61572>                If (sFileName <> "") Begin
61574>                    Move (Left(sFileName, 2))     to sDrive
61575>                    Get ParseFolderName sFileName to sPath
61576>                End
61576>                If (sPath <> "") Begin
61578>                    Set Initial_Folder of oFileNameDialog to (sDrive - sPath)
61579>                End
61579>
61579>                Get Show_Dialog of oFileNameDialog to bOk
61580>                If (bOk) Begin
61582>                    Get File_Name of oFileNameDialog to sFileName
61583>                    Set Value to sFileName
61584>                End
61584>            End_Procedure 
61585>            
61585>            Procedure OnChange
61588>                String sValue
61588>                
61588>                Get Value to sValue
61589>                If (sValue <> "") Begin
61591>                    Set psOutputFileName of oOutputFilename_fm to sValue
61592>                    
61592>                End
61592>            End_Procedure
61593>
61593>        End_Object
61594>
61594>        Object oDbType_cf is a cSQLComboForm
61596>            Set Size to 11 100
61597>            Set Location to 45 43
61598>            Set Label_Col_Offset to 0
61599>            Set Label to "DbType:"
61600>            Set Label_Justification_Mode to JMode_Top
61601>            Set Label_Row_Offset to 1
61602>            Set Label to "Database Type"
61603>            Set Entry_State to False
61604>            Set Combo_Sort_State to False
61605>            Set piItem to 3
61606>
61606>            Procedure Combo_Fill_List
61609>                Send Combo_Add_Item CS_dbTypeMSSQL
61610>                Send Combo_Add_Item CS_dbTypeMySQL
61611>                Send Combo_Add_Item CS_dbTypeOracle
61612>                Send Combo_Add_Item CS_dbTypeDB2
61613>                Send Combo_Add_Item CS_dbTypePostgre
61614>            End_Procedure
61615>
61615>            Procedure OnChange
61618>                Integer iDbType
61618>                Get SelectedDbType to iDbType
61619>                Send Refill_Comboform of oDriverID_cf iDbType
61620>            End_Procedure
61621>    
61621>            Function SelectedDbType Returns Integer
61624>                Integer iRetval
61624>                String sDbType
61624>                Get Value to sDbType
61625>                If (sDbType = "1") Begin
61627>                    Move CS_dbTypeMSSQL to sDbType
61628>                End
61628>                Get SqlUtilDbTypeToInteger of ghoDbUpdateFunctionLibrary sDbType to iRetval
61629>                Function_Return iRetval
61630>            End_Function
61631>
61631>        End_Object
61632>
61632>        Object oDriverID_cf is a cSQLComboForm
61634>            Set Size to 11 100
61635>            Set Location to 45 150
61636>            Set Label_Justification_Mode to JMode_Top
61637>            Set Label_Col_Offset to 0
61638>            Set Label_Row_Offset to 1
61639>            Set Label to "Driver ID:"
61640>            Set Entry_State to False
61641>            Set Combo_Sort_State to False
61642>            Set piItem to 4
61643>
61643>            Procedure Refill_Comboform Integer iDbType
61646>                String sValue
61646>                Send Combo_Delete_Data
61647>                Case Begin
61647>                    Case (iDbType = EN_dbTypeMSSQL)
61649>                        Send Combo_Add_Item MSSQLDRV_ID
61650>                        Move MSSQLDRV_ID to sValue
61651>                        Case Break
61652>                    Case (iDbType = EN_dbTypeMySQL)
61655>                        Send Combo_Add_Item ODBC_DRV_ID
61656>                        Move ODBC_DRV_ID to sValue
61657>                        Case Break
61658>                    Case (iDbType = EN_dbTypeOracle)
61661>                        Send Combo_Add_Item ODBC_DRV_ID
61662>                        Move ODBC_DRV_ID to sValue
61663>                        Case Break
61664>                    Case (iDbType = EN_dbTypeDB2)
61667>                        Send Combo_Add_Item DB2_DRV_ID
61668>                        Move DB2_DRV_ID to sValue
61669>                        Case Break
61670>                    Case (iDbType = EN_dbTypePostgre)
61673>                        Send Combo_Add_Item ODBC_DRV_ID
61674>                        Move ODBC_DRV_ID to sValue
61675>                        Case Break
61676>                    Case Else
61676>                        Send Combo_Add_Item DATAFLEX_ID
61677>                        Move DATAFLEX_ID to sValue
61678>                Case End
61678>                Set Value to sValue
61679>            End_Procedure
61680>
61680>            Procedure OnChange
61683>                String sDriverID
61683>                Integer iDbType iPos
61683>
61683>                Get Value to sDriverID
61684>                Move (Pos("-", sDriverID)) to iPos
61685>                Move (Left(sDriverID, (iPos - 2))) to sDriverID
61686>                If (sDriverID = "") Begin
61688>                    Move MSSQLDRV_ID to sDriverID
61689>                End
61689>                Get SelectedDbType of oDbType_cf to iDbType
61690>            End_Procedure
61691>            
61691>        End_Object
61692>
61692>        Object oOpenInEditor_btn is a Button
61694>            Set Size to 12 77
61695>            Set Location to 45 265
61696>            Set Label to "View in Editor"
61697>            Set peAnchors to anBottomRight
61698>
61698>            Procedure OnClick
61701>                String sFileName             
61701>                Boolean bExists
61701>                
61701>                Get Value of oDriverXMLFileName_fm to sFileName
61702>                Get vFilePathExists sFileName to bExists
61703>                If (bExists = False) Begin
61705>                    Send Info_Box "File doesn't exist"
61706>                    Procedure_Return
61707>                End
61707>                Runprogram Shell Background sFileName
61708>            End_Procedure
61709>
61709>        End_Object
61710>         
61710>    End_Object
61711>
61711>    Object oWriteResult_grp is a cRDCHeaderGroup
61713>        Set Size to 67 360
61714>        Set Location to 87 17
61715>        Set peAnchors to anTopLeftRight
61716>        Set psLabel to "Write Driver Data Types to Package Name:"
61717>        Set psImage to "ActionPrint.ico"
61718>        
61718>        Object oOutputFilename_fm is a Form
61720>            Set Size to 13 298
61721>            Set Location to 20 43
61722>//            Set Label to "Output Package File Name:"
61722>            Set Label_Justification_Mode to JMode_Top
61723>            Set Label_Col_Offset to 0
61724>            Set Prompt_Button_Mode to PB_PromptOn
61725>            Set peAnchors to anTopLeftRight
61726>            Set Label_Row_Offset to 1
61727>
61727>            Procedure Prompt
61730>                String sFileName sPath sFileMask sRetval
61730>
61730>                Get Value to sFileName
61731>                Get ParseFolderName sFileName to sPath
61732>                Move "Include files (*.inc)|*.inc|Package files (*.pkg)|*.pkg" to sFileMask
61733>                Get vSelect_File sFileMask "Please enter a file name" sPath to sRetval
61734>                If (sRetval <> "") Begin
61736>                    Set Value to sRetval
61737>                End
61737>            End_Procedure
61738>
61738>            Procedure Set psOutputFileName String sXMLFileName
61741>                String sOutPutFileName sPath sExt
61741>                
61741>                Get psAppSrcPath of (phoWorkspace(ghoApplication)) to sPath
61742>                Get ParseFileName sXMLFileName to sOutPutFileName
61743>                Get ParseFileExtension sOutPutFileName to sExt
61744>                // We default to set the extension to an include file (.inc):
61744>                Move (Replace(sExt, sOutPutFileName, "inc")) to sOutPutFileName
61745>                Set Value to (sPath + "\" + sOutPutFileName)
61746>
61746>            End_Procedure
61747>
61747>        End_Object
61748>
61748>        Object oOpenInEditor_btn is a Button
61750>            Set Size to 12 77
61751>            Set Location to 45 265
61752>            Set Label to "View in Editor"
61753>            Set peAnchors to anBottomRight
61754>
61754>            Procedure OnClick
61757>                String sFileName             
61757>                Boolean bExists
61757>                
61757>                Get Value of oOutputFilename_fm to sFileName
61758>                Get vFilePathExists sFileName to bExists
61759>                If (bExists = False) Begin
61761>                    Send Info_Box "File doesn't exist"
61762>                    Procedure_Return
61763>                End
61763>                Runprogram Shell Background sFileName
61764>            End_Procedure
61765>        End_Object
61766>
61766>    End_Object
61767>
61767>    Object oReadButton is a Button
61769>        Set Size to 14 50
61770>        Set Location to 160 222
61771>        Set Label to "Read"
61772>        Set peAnchors to anBottomRight
61773>        Set Default_State to True
61774>
61774>        Procedure OnClick
61777>            String sFileName
61777>            Boolean bExists
61777>            
61777>            Get Value of oDriverXMLFileName_fm to sFileName
61778>            Get vFilePathExists sFileName to bExists
61779>            If (bExists = False) Begin
61781>                Procedure_Return
61782>            End
61782>
61782>            Send ReadXMLDriverData sFileName
61783>        End_Procedure
61784>
61784>    End_Object
61785>
61785>    Object oWriteButton is a Button
61787>        Set Size to 14 50
61788>        Set Location to 160 275
61789>        Set Label to "Write"
61790>        Set peAnchors to anBottomRight
61791>
61791>        Procedure OnClick
61794>            tColumnType[] aColumnType
61794>            tColumnType[] aColumnType
61795>            String sFileName sDriverXMLFile 
61795>            Boolean bExists          
61795>            
61795>            Get paColumnType to aColumnType
61796>            If (SizeOfArray(aColumnType) = 0) Begin
61798>                Send Info_Box "You need to read an XML driver file successfully first."
61799>                Procedure_Return
61800>            End
61800>            
61800>            Get Value of oDriverXMLFileName_fm to sDriverXMLFile
61801>            Get Value of oOutputFilename_fm to sFileName
61802>            If (sFileName = "") Begin
61804>                Send Info_Box "You need to specify an output file name first."
61805>                Procedure_Return
61806>            End
61806>            
61806>            Send WriteXMLDriverTypeData sFileName sDriverXMLFile aColumnType
61807>        End_Procedure
61808>
61808>    End_Object
61809>
61809>    Object oCloseButton is a Button
61811>        Set Size to 14 50
61812>        Set Location to 160 328
61813>        Set Label to "Exit"
61814>        Set peAnchors to anBottomRight
61815>
61815>        Procedure OnClick
61818>            Send Exit_Application
61819>        End_Procedure
61820>    End_Object
61821>
61821>    Procedure ReadXMLDriverData String sFileName
61824>        DateTime dtExecStart dtExecEnd
61824>        TimeSpan tsTotalTime
61824>        Handle hoXML hoRoot hoList hoBeginAfter hoName hoNextSibling
61824>        Integer iItems i iCount
61824>        Boolean bOK bExists
61824>        String  sNamespace sValue sError
61824>        Variant vRoot vChild vList vBeginAfter vName vNextSibling
61824>        tColumnType[] aColumnType
61824>        tColumnType[] aColumnType
61825>
61825>        Move (CurrentDateTime()) to dtExecStart
61826>        Set paColumnType to aColumnType
61827>
61827>        Get Create (RefClass(cComChilkatXml)) to hoXML
61828>        If (not(IsComObjectCreated(hoXml))) Begin
61830>            Send CreateComObject of hoXml
61831>        End
61831>
61831>        Get ComLoadXmlFile of hoXml sFileName to bOK
61832>        If (bOK <> True) Begin
61834>            Get ComLastErrorText of hoXML to sError
61835>            Send Info_Box ("Sorry, couldn't load the XML file. Error:\n" + sError)
61836>            Procedure_Return
61837>        End
61837>
61837>        Get ComGetSelf of hoXML to vBeginAfter
61838>        If (IsComObject(vBeginAfter)) Begin
61840>            Get Create (RefClass(cComChilkatXml)) to hoBeginAfter
61841>            Set pvComObject of hoBeginAfter to vBeginAfter
61842>        End
61842>
61842>        Get ComSearchForContent of hoXML vBeginAfter "name" "df_field_native_type" to vName
61843>        If (IsComObject(vName)) Begin
61845>            Get Create (RefClass(cComChilkatXml)) to hoName
61846>            Set pvComObject of hoName to vName
61847>        End
61847>        If (IsNullComObject(vName)) Begin
61849>            Send Info_Box 'The tag "df_field_native_type" not found. It is needed to enumerate data types.'
61850>            Procedure_Return
61851>        End
61851>        
61851>        // Get the parent object, from where we can continue searching:
61851>        Get ComGetParent of hoName to vRoot
61852>        If (IsComObject(vRoot)) Begin
61854>            Get Create (RefClass(cComChilkatXml)) to hoRoot
61855>            Set pvComObject of hoRoot to vRoot
61856>        End
61856>        
61856>        // Set baseline at parent level:
61856>        Get ComGetSelf of hoRoot to vBeginAfter
61857>        If (IsComObject(vBeginAfter)) Begin
61859>            Get Create (RefClass(cComChilkatXml)) to hoBeginAfter
61860>            Set pvComObject of hoBeginAfter to vBeginAfter
61861>        End
61861>
61861>        //  Navigate to the enumValues node:
61861>        Get ComSearchForTag of hoRoot vBeginAfter "enumValues" to vList
61862>        If (IsComObject(vList)) Begin
61864>            Get Create (RefClass(cComChilkatXml)) to hoList
61865>            Set pvComObject of hoList to vList
61866>        End
61866>        
61866>        // Set baseline at enum values start object:
61866>        Get ComGetSelf of hoList to vBeginAfter
61867>        If (IsComObject(vBeginAfter)) Begin
61869>            Get Create (RefClass(cComChilkatXml)) to hoBeginAfter
61870>            Set pvComObject of hoBeginAfter to vBeginAfter
61871>        End
61871>        
61871>        // Find the first "enumValue" enumeration:
61871>        Get ComNumChildren of hoList to iItems
61872>        Get ComSearchForTag2 of hoList vBeginAfter "enumValue" to bExists
61873>        If (bExists = False) Begin
61875>            Send Info_Box 'No "enumValue" found (!). Nothing to enumerate.'
61876>            Procedure_Return
61877>        End
61877>
61877>        Decrement iItems
61878>        For iCount from 0 to iItems
61884>            Send CollectDriverAttributes hoList
61885>
61885>            Get ComNextSibling of hoList to vNextSibling
61886>            If (IsComObject(vNextSibling)) Begin
61888>                Get Create (RefClass(cComChilkatXml)) to hoNextSibling
61889>                Set pvComObject of hoNextSibling to vNextSibling
61890>            End
61890>            Send Destroy of hoList
61891>            Move hoNextSibling to hoList
61892>        Loop
61893>
61893>        Send Destroy of hoRoot
61894>        Send Destroy of hoXML
61895>
61895>        Move (CurrentDateTime()) to dtExecEnd
61896>        Move (dtExecEnd - dtExecStart) to tsTotalTime
61897>        Send Info_Box ("Ready! Total Time:" * String(tsTotalTime))
61898>    End_Procedure
61899>
61899>    Procedure CollectDriverAttributes Handle hoDriverAttribute
61902>        tColumnType ColumnType
61902>        tColumnType ColumnType
61902>        tColumnType[] aColumnType
61902>        tColumnType[] aColumnType
61903>        Handle hoChild
61903>        Variant vChild
61903>
61903>        // If the value was a cDataSection it will be properly translated back
61903>        // to normal text for us.
61903>        Move True                                                   to ColumnType.bNativeDataType
61904>        Get ComGetChildContent of hoDriverAttribute "name"          to ColumnType.sSQLType
61905>        Get ComGetChildContent of hoDriverAttribute "id"            to ColumnType.iSQLType
61906>
61906>        Get ComGetChildWithTag of hoDriverAttribute "nativeTypeData" to vChild
61907>        If (IsComObject(vChild)) Begin
61909>            Get Create (RefClass(cComChilkatXml)) to hoChild
61910>            Set pvComObject of hoChild to vChild
61911>            Get ComGetChildContent of hoChild       "canEditSize"   to ColumnType.bCanEditSize
61912>            
61912>            // Some data types does not have a iDefaultSize, Min or Max size.
61912>            // Then denote "not defined" by a "-1":
61912>            Send Ignore_Error of Error_Object_Id DFERR_BAD_OPERATOR
61913>            Get ComGetChildContent of hoChild       "defaultSize"   to ColumnType.iDefaultSize
61914>            Send Trap_Error   of Error_Object_Id DFERR_BAD_OPERATOR
61915>            If (ColumnType.iDefaultSize = 0) Begin
61917>                Move    -1                                          to ColumnType.iDefaultSize
61918>            End
61918>            Get ComGetChildContent of hoChild       "minSize"       to ColumnType.iMinSize
61919>            If (ColumnType.iMinSize = 0) Begin
61921>                Move        -1                                      to ColumnType.iMinSize
61922>            End
61922>            Get ComGetChildContent of hoChild       "maxSize"       to ColumnType.nMaxSize
61923>            If (ColumnType.nMaxSize = 0) Begin
61925>                Move        -1                                      to ColumnType.nMaxSize
61926>            End
61926>            Send Destroy           of hoChild
61927>        End
61927>
61927>        Get paColumnType to aColumnType
61928>        Move ColumnType to aColumnType[SizeOfArray(aColumnType)]
61929>        // paColumnType is a Panel array struct property
61929>        Set paColumnType to aColumnType
61930>    End_Procedure  
61931>    
61931>    Function MakeStringLength String sValue Integer iReportColumnPos Returns String
61934>        Move (Pad(sValue, (Length(sValue) + (iReportColumnPos - Length(sValue))))) to sValue
61935>
61935>        Function_Return sValue
61936>    End_Function
61937>
61937>    Procedure WriteXMLDriverTypeData String sFileName String sDriverXMLFile tColumnType[] aColumnType
61940>        Integer iSize iCount iCh iDbType iDataFlexType
61940>        String sSpace sDriverID sDataFlexType sValue
61940>        DateTime dtExecStart dtExecEnd
61940>        
61940>        Get Seq_Open_Output_Channel sFileName to iCh
61941>        If (iCh = DF_SEQ_CHANNEL_ERROR) Begin
61943>            Send Info_Box "Could not get a free output channel number."
61944>            Procedure_Return
61945>        End                 
61945>        
61945>        Move (CurrentDateTime()) to dtExecStart
61946>        Get SelectedDbType of oDbType_cf   to iDbType
61947>        Get Value          of oDriverID_cf to sDriverID
61948>        Writeln channel iCh "/" "/ Generated By The Database Update Framework"
61952>        Writeln channel iCh "/" "/ Driver XML File: " sDriverXMLFile
61957>        Writeln channel iCh "/" "/ Driver COLUMN DATA TYPES"
61961>        Writeln channel iCh "/" "/"
61965>        Writeln channel iCh "/" "/ Created: " (String(dtExecStart))
61970>        Writeln channel iCh
61972>        Move "            " to sSpace
61973>        
61973>        Move (SizeOfArray(aColumnType)) to iSize
61974>        Decrement iSize
61975>        For iCount from 0 to iSize                    
61981>            Get UtilSqlColumnTypeToDataFlexType of ghoDbUpdateFunctionLibrary sDriverID iDbType aColumnType[iCount].iSQLType aColumnType[iCount].iDefaultSize to iDataFlexType 
61982>            Get UtilDataFlexDataTypeToString    of ghoDbUpdateFunctionLibrary iDataFlexType to sDataFlexType
61983>            
61983>            If (Lowercase(aColumnType[iCount].sSQLType) <> "unknown type") Begin
61985>                // sSQLType:
61985>                Move ('Move "' + String(aColumnType[iCount].sSQLType) + '"') to sValue
61986>                Get MakeStringLength sValue 45 to sValue
61987>                Writeln channel iCh sSpace sValue 'to aColumnType[i].sSQLType'                                     
61992>                // iSQLType:
61992>                Move ('Move' * String(aColumnType[iCount].iSQLType)) to sValue
61993>                Get MakeStringLength sValue 45 to sValue
61994>                Writeln channel iCh sSpace sValue 'to aColumnType[i].iSQLType'
61999>                // bCanEditSize:
61999>                Move ('Move' * (If(aColumnType[iCount].bCanEditSize = True, 'True', 'False'))) to sValue
62000>                Get MakeStringLength sValue 45 to sValue
62001>                Writeln channel iCh sSpace sValue 'to aColumnType[i].bCanEditSize'
62006>                // bNativeDataType:
62006>                Move ('Move' * (If(aColumnType[iCount].bNativeDataType = True, 'True', 'False'))) to sValue
62007>                Get MakeStringLength sValue 45 to sValue
62008>                Writeln channel iCh sSpace sValue 'to aColumnType[i].bNativeDataType' 
62013>                // iDefaultSize:
62013>                Move ('Move' * String(aColumnType[iCount].iDefaultSize)) to sValue 
62014>                Get MakeStringLength sValue 45 to sValue
62015>                Writeln channel iCh sSpace sValue 'to aColumnType[i].iDefaultSize'
62020>                // iMinSize:
62020>                Move ('Move' * String(aColumnType[iCount].iMinSize)) to sValue 
62021>                Get MakeStringLength sValue 45 to sValue
62022>                Writeln channel iCh sSpace sValue 'to aColumnType[i].iMinSize'
62027>                // iMaxSize:
62027>                Move ('Move' * String(aColumnType[iCount].nMaxSize)) to sValue 
62028>                Get MakeStringLength sValue 45 to sValue
62029>                Writeln channel iCh sSpace sValue 'to aColumnType[i].nMaxSize'
62034>                // sDataFlexType:
62034>                Move ('Move "' + String(sDataFlexType) + '"') to sValue    
62035>                Get MakeStringLength sValue 45 to sValue
62036>                Writeln channel iCh sSpace sValue 'to aColumnType[i].sDataFlexType'
62041>                // iDataFlexType:
62041>                Move ('Move' * String(sDataFlexType)) to sValue    
62042>                Get MakeStringLength sValue 45 to sValue
62043>                Writeln channel iCh sSpace sValue 'to aColumnType[i].iDataFlexType'
62048>                // sPrecision:
62048>                // ToDo: Should this be .DefaultSize or .nMaxSize? ...Or removed !
62048>                // Maybe change the struct?
62048>                If (iDataFlexType = DF_DATE) Begin
62050>                    Move  6 to aColumnType[iCount].nMaxSize
62051>                End
62051>                If (Lowercase(aColumnType[iCount].sSQLType) = "datetime" or Lowercase(aColumnType[iCount].sSQLType) = "datetime2") Begin
62053>                    Move 23 to aColumnType[iCount].nMaxSize
62054>                End                                           
62054>                If (aColumnType[iCount].nMaxSize = 0) Begin
62056>                    Move  1 to aColumnType[iCount].nMaxSize
62057>                End
62057>                Move ('Move' * String(aColumnType[iCount].nMaxSize)) to sValue 
62058>                Get MakeStringLength sValue 45 to sValue
62059>                Writeln channel iCh sSpace sValue 'to aColumnType[i].sPrecision'
62064>
62064>                Writeln channel iCh sSpace 'Increment i'
62068>                Writeln channel iCh
62070>            End
62070>        Loop
62071>
62071>        Send Seq_Close_Channel iCh
62072>        Send Info_Box "Ready!"    
62073>    End_Procedure
62074>    
62074>    Procedure OnStartUp
62077>        String sBinPath sXMLFileName
62077>        Get DFBinPath of ghoApplication to sBinPath
62078>        // The .xml files now resides in the .\Lib folder
62078>        Move (Replace("\bin", sBinPath, "\Lib")) to sBinPath
62079>        Move "\MSSQLDRV_DriverDef.xml" to sXMLFileName
62080>        Set Value of oDriverXMLFileName_fm to (sBinPath + sXMLFileName) 
62081>        Set Value of oDbType_cf   to EN_DbTypeMSSQL
62082>//        Set Value of oDriverID_cf to MSSQLDRV_ID
62082>    End_Procedure
62083>    Send OnStartUp
62084>
62084>    On_Key Key_Ctrl+Key_R Send KeyAction of oReadButton
62085>    On_Key Key_Ctrl+Key_W Send KeyAction of oWriteButton
62086>End_Object
62087>
62087>Start_UI oMainPanel
62089>
Including Resources...
Summary
Memory Available: 2147483646
Total Warnings : 1
Total Errors   : 0
Total Symbols  : 34951
Total Resources: 6
Total Commands : 62088
Total Windows  : 0
Total Pages    : 0
Static Data    : 518255
Message area   : 380798
Total Blocks   : 23093
