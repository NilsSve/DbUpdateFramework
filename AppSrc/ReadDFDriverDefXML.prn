Compiling Program: C:\Projects\DF20\DbUpdateFramework\AppSrc\ReadDFDriverDefXML.src
Memory Available: 2147483646
1>    CompilerLevelWarning All On
1>Use cApplication.pkg
Including file: cApplication.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cApplication.pkg)
1>>>Use Windows.pkg
Using pre-compiled package WINDOWS.PKG
Including file: windows.pkd    (C:\Program Files\DataFlex 24.0\Pkg\windows.pkd)
8251>>>
8251>>>Use LanguageText.pkg
8251>>>Use WinUser.pkg
8251>>>Use WinShell.pkg
8251>>>Use cWorkspace.pkg
Including file: cWorkspace.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cWorkspace.pkg)
8251>>>>>Use VdfBase.pkg
8251>>>>>Use tWinStructs.pkg
8251>>>>>Use LanguageText.pkg
8251>>>>>Use WinShell.pkg // Shell API functions
8251>>>>>Use seq_chnl.pkg
Including file: seq_chnl.pkg    (C:\Program Files\DataFlex 24.0\Pkg\seq_chnl.pkg)
8251>>>>>>>Use LanguageText.pkg
8251>>>>>>>Use VDFBase.pkg
Including file: errornum.inc    (C:\Program Files\DataFlex 24.0\Pkg\errornum.inc)
8251>>>>>>>>
8251>>>>>>>>//
8251>>>>>>>>// these will get defined in fmac
8251>>>>>>>>//
8251>>>>>>>>// already defined
8251>>>>>>>>//    #REPLACE DFERR_COMP_BAD_IMAGE_NAME                 |CI4293
8251>>>>>>>>//    #REPLACE DFERR_COMP_CONSTANT_EXPECTED              |CI4299
8251>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_RETURN_TYPE            |CI4310
8251>>>>>>>>//    #REPLACE DFERR_COMP_IMAGE_NOT_FOUND                |CI4311
8251>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_DATATYPE               |CI4315
8251>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_TYPE                   |CI4317
8251>>>>>>>>//    #REPLACE DFERR_COMP_MISSING_ARGUMENT               |CI4320
8251>>>>>>>>//    #REPLACE DFERR_COMP_MISSING_END_OBJECT             |CI4323
8251>>>>>>>>//    #REPLACE DFERR_COMP_UNDEFINED_SYMBOL_IN_ARGUMENT   |CI4328
8251>>>>>>>>//    #REPLACE DFERR_COMP_SYMBOL_ALREADY_DEFINED         |CI4332
8251>>>>>>>>//    #REPLACE DFERR_COMP_TOO_MANY_MESSAGES              |CI4339
8251>>>>>>>>//    #REPLACE DFERR_COMP_UNRESOVLED_CONTROL_BLOCK       |CI4348
8251>>>>>>>>// new compiler errors used by fmac
8251>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_OBJECT_DEFINTION       |CI4388 // object name used is not valid
8251>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_PROPERTY_DEFINTION     |CI4389 // property name cannot be used
8251>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_METHOD_DEFINTION       |CI4390 // method name cannot be used
8251>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_CODE_PLACEMENT         |CI4391 // Location of code, nesting, is wrong
8251>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_METHOD_SYNTAX          |CI4392 // syntax is incorrect for method definition
8251>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_MESSAGE_SYNTAX         |CI4393 // sysntax is incorrect for sending message
8251>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_OBJECT_REFERENCE       |CI4394 // object named in message is invalid
8251>>>>>>>>//    #REPLACE DFERR_COMP_OBSOLETE_UNSUPPORTED_FEATURE   |CI4395 // Obsolete - was 101 (Moveused by fmac)
8251>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_ARGUMENT               |CI4396 // Agument in line is incorrect
8251>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_EXTERNAL_FUNCTION_DEFINITION |CI4397 // name cannot be used
8251>>>>>>>>//    #REPLACE DFERR_COMP_MISSING_DEBUG_INFORMATION      |CI4500 // debug information is not provided
8251>>>>>>>>//    #REPLACE DFERR_COMP_INCOMPATIBLE_DEBUG_INFORMATION |CI4501 // debug inforamtion is is not correct
8251>>>>>>>>//    #REPLACE DFERR_COMP_RECURSIVE_STRUCT_DECLARATION   |CI4513 // recursive struct definition
8251>>>>>>>>//    #REPLACE DFERR_COMP_AMBIGUOUS_SYNTAX               |CI4514 // either Left of "'[' is not array, use '(' if indicator" or "Left of '.' is not of type struct or table"
8251>>>>>>>>
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_STRING_CMD       |CI4531 // pertaining to string commands
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_TYPE_CMD         |CI4532 // pertaining to type/end_type commands
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_CMD              |CI4533 // pertaining to a more generic obsolete command 
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_GLOBAL_FUNCTION  |CI4534 // Global function is obsolete
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_TECHNIQUE        |CI4535 // Using some older technique
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_PACKAGE          |CI4536 // Package is obsolete, remove it if you can
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_CLASS            |CI4537 // Class is obsolete, remove it if you can
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_INDICATOR_USE    |CI4538 // Using indicators anywhere
8251>>>>>>>>//    
8251>>>>>>>>//    #Replace DFERR_COMP_ILLEGAL_CONVERSION                            |CI4539 // Datatype conversion is illegal, would cause runtime-error
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_OBJECT_FUNCTION  |CI4540 // Global function is obsolete
8251>>>>>>>>//    #Replace DFERR_INVALID_LOCALE_CODE                    |CI4541 // Error thown by Set_Attribute DF_LOCALE_CODE on invalid value
8251>>>>>>>>//    #Replace DFERR_STRING_COMPARISON_ERROR                |CI4542 // Error during string comparison (ICU returned an error)
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_REDEFINING_RETURN_TYPE    |CI4543 // Warning when redefining a function with a different return type
8251>>>>>>>>//    #Replace DFERR_COMP_AMBIGUOUS_FUNCTION_EXPRESSION     |CI4544 // Error when using ambiguous function in expression
8251>>>>>>>>    
8251>>>>>>>>
8251>>>>>>>>
8251>>>>>>>
8251>>>>>>>Define DF_SEQ_CHANNEL_NOT_AVAILABLE for -2
8251>>>>>>>Define DF_SEQ_CHANNEL_ERROR         for -1
8251>>>>>>>Define DF_SEQ_CHANNEL_MIN           for 0
8251>>>>>>>Define DF_SEQ_CHANNEL_MAX           for 9
8251>>>>>>>Define DF_SEQ_START_CHANNEL         for 2 // leave 0 and 1 til last
8251>>>>>>>// so that programs that use direct_input/output
8251>>>>>>>// w/o specifying a channel will work.
8251>>>>>>>Enum_List
8251>>>>>>>    Define DF_SEQ_CHANNEL_MODE_CLOSED
8251>>>>>>>    Define DF_SEQ_CHANNEL_MODE_OPEN
8251>>>>>>>    Define DF_SEQ_CHANNEL_MODE_OUTPUT
8251>>>>>>>    Define DF_SEQ_CHANNEL_MODE_INPUT
8251>>>>>>>End_Enum_List
8251>>>>>>>
8251>>>>>>>Enum_List
8251>>>>>>>    Define DF_SEQ_CHANNEL_ERROR_MODE_NONE
8251>>>>>>>    Define DF_SEQ_CHANNEL_ERROR_MODE_ALL
8251>>>>>>>End_Enum_List
8251>>>>>>>
8251>>>>>>>Global_Variable Integer Seq$Channel$Error$Mode
8251>>>>>>>
8251>>>>>>>Procedure Set Seq_Channel_Error_Mode Global Integer iMode
8253>>>>>>>    Move iMode to Seq$Channel$Error$Mode
8254>>>>>>>End_Procedure
8255>>>>>>>
8255>>>>>>>Function Seq_Channel_Error_Mode Global Returns Integer
8257>>>>>>>    Function_Return Seq$Channel$Error$Mode
8258>>>>>>>End_Function
8259>>>>>>>
8259>>>>>>>Global_Variable Integer[DF_SEQ_CHANNEL_MAX] giSeqChannelList
8259>>>>>>>// initialize array
8259>>>>>>>For WindowIndex from 0 to (DF_SEQ_CHANNEL_MAX-1)
8265>>>>>>>>
8265>>>>>>>    Move 0 to giSeqChannelList[WindowIndex]
8266>>>>>>>Loop
8267>>>>>>>>
8267>>>>>>>
8267>>>>>>>Set Seq_Channel_Error_Mode to DF_SEQ_CHANNEL_ERROR_MODE_ALL
8268>>>>>>>
8268>>>>>>>Function Seq_Channel_Mode Global Integer iChannel Returns Integer
8270>>>>>>>    Function_Return giSeqChannelList[iChannel]
8271>>>>>>>End_Function
8272>>>>>>>
8272>>>>>>>Procedure Set Seq_Channel_Mode Global Integer iChannel Integer iMode
8274>>>>>>>    Move iMode to giSeqChannelList[iChannel]
8275>>>>>>>End_Procedure
8276>>>>>>>
8276>>>>>>>Function Seq_New_Channel Global Returns Integer
8278>>>>>>>    Integer iObject iChannel
8278>>>>>>>    
8278>>>>>>>    Move DF_SEQ_START_CHANNEL to iChannel
8279>>>>>>>    
8279>>>>>>>    While (iChannel < DF_SEQ_CHANNEL_MAX)
8283>>>>>>>        If (Seq_Channel_Mode(iChannel) = DF_SEQ_CHANNEL_MODE_CLOSED) Begin
8285>>>>>>>            Set Seq_Channel_Mode iChannel to DF_SEQ_CHANNEL_MODE_OPEN
8286>>>>>>>            Function_Return iChannel
8287>>>>>>>        End
8287>>>>>>>>
8287>>>>>>>        
8287>>>>>>>        Increment iChannel
8288>>>>>>>    Loop
8289>>>>>>>>
8289>>>>>>>    
8289>>>>>>>    // wrap back to beginning
8289>>>>>>>    Move 0 to iChannel
8290>>>>>>>    
8290>>>>>>>    While (iChannel < DF_SEQ_START_CHANNEL)
8294>>>>>>>        If (Seq_Channel_Mode(iChannel) = DF_SEQ_CHANNEL_MODE_CLOSED) Begin
8296>>>>>>>            Set Seq_Channel_Mode iChannel to DF_SEQ_CHANNEL_MODE_OPEN
8297>>>>>>>            Function_Return iChannel
8298>>>>>>>        End
8298>>>>>>>>
8298>>>>>>>        
8298>>>>>>>        Increment iChannel
8299>>>>>>>    Loop
8300>>>>>>>>
8300>>>>>>>    
8300>>>>>>>    Function_Return DF_SEQ_CHANNEL_NOT_AVAILABLE
8301>>>>>>>End_Function
8302>>>>>>>
8302>>>>>>>Procedure Seq_Release_Channel Global Integer iChannel
8304>>>>>>>    If ((iChannel >= DF_SEQ_CHANNEL_MIN) and (iChannel <= DF_SEQ_CHANNEL_MAX)) Begin
8306>>>>>>>        Set Seq_Channel_Mode iChannel to DF_SEQ_CHANNEL_MODE_CLOSED
8307>>>>>>>    End
8307>>>>>>>>
8307>>>>>>>End_Procedure
8308>>>>>>>
8308>>>>>>>Function Seq_Open_Input_Channel Global String sChannel Returns Integer
8310>>>>>>>    Integer iChannel
8310>>>>>>>    
8310>>>>>>>    Move (Seq_New_Channel()) to iChannel
8311>>>>>>>    
8311>>>>>>>    If (iChannel <= DF_SEQ_CHANNEL_ERROR) Begin
8313>>>>>>>        If (Seq_Channel_Error_Mode() = DF_SEQ_CHANNEL_ERROR_MODE_ALL) Begin
8315>>>>>>>            Error DFERR_CANT_OPEN_INPUT_FILE (sChannel + ":" *C_$NoOpenChannels)
8316>>>>>>>>
8316>>>>>>>        End
8316>>>>>>>>
8316>>>>>>>        Function_Return iChannel
8317>>>>>>>    End
8317>>>>>>>>
8317>>>>>>>    
8317>>>>>>>    Move False to Err
8318>>>>>>>    Direct_Input channel iChannel sChannel
8320>>>>>>>    
8320>>>>>>>    If (Err) Begin
8322>>>>>>>        Send Seq_Release_Channel iChannel
8323>>>>>>>        Function_Return DF_SEQ_CHANNEL_ERROR
8324>>>>>>>    End
8324>>>>>>>>
8324>>>>>>>    
8324>>>>>>>    Set Seq_Channel_Mode iChannel to DF_SEQ_CHANNEL_MODE_INPUT
8325>>>>>>>    
8325>>>>>>>    Function_Return iChannel
8326>>>>>>>End_Function
8327>>>>>>>
8327>>>>>>>Function Seq_Open_Output_Channel Global String sChannel Returns Integer
8329>>>>>>>    Integer iChannel
8329>>>>>>>    
8329>>>>>>>    Move (Seq_New_Channel()) to iChannel
8330>>>>>>>    
8330>>>>>>>    If (iChannel <= DF_SEQ_CHANNEL_ERROR) Begin
8332>>>>>>>        If (Seq_Channel_Error_Mode() = DF_SEQ_CHANNEL_ERROR_MODE_ALL) Begin
8334>>>>>>>            Error DFERR_CANT_OPEN_OUTPUT_FILE (sChannel + ":" *C_$ChannelNotAvailable)
8335>>>>>>>>
8335>>>>>>>            Move DF_SEQ_CHANNEL_ERROR to iChannel
8336>>>>>>>        End
8336>>>>>>>>
8336>>>>>>>        
8336>>>>>>>        Function_Return iChannel
8337>>>>>>>    End
8337>>>>>>>>
8337>>>>>>>    
8337>>>>>>>    Move False to Err
8338>>>>>>>    Direct_Output channel iChannel sChannel
8340>>>>>>>    
8340>>>>>>>    If (Err) Begin
8342>>>>>>>        Send Seq_Release_Channel iChannel
8343>>>>>>>        Function_Return DF_SEQ_CHANNEL_ERROR
8344>>>>>>>    End
8344>>>>>>>>
8344>>>>>>>    
8344>>>>>>>    Set Seq_Channel_Mode iChannel to DF_SEQ_CHANNEL_MODE_OUTPUT
8345>>>>>>>    
8345>>>>>>>    Function_Return iChannel
8346>>>>>>>End_Function
8347>>>>>>>
8347>>>>>>>Function Seq_Append_Output_Channel Global String sChannel Returns Integer
8349>>>>>>>    Integer iChannel
8349>>>>>>>    
8349>>>>>>>    Move (Seq_New_Channel()) to iChannel
8350>>>>>>>    
8350>>>>>>>    If (iChannel <= DF_SEQ_CHANNEL_ERROR) Begin
8352>>>>>>>        If (Seq_Channel_Error_Mode() = DF_SEQ_CHANNEL_ERROR_MODE_ALL) Begin
8354>>>>>>>            Error DFERR_CANT_OPEN_OUTPUT_FILE (sChannel + ":" *C_$ChannelNotAvailable)
8355>>>>>>>>
8355>>>>>>>            Move DF_SEQ_CHANNEL_ERROR to iChannel
8356>>>>>>>        End
8356>>>>>>>>
8356>>>>>>>        
8356>>>>>>>        Function_Return iChannel
8357>>>>>>>    End
8357>>>>>>>>
8357>>>>>>>    
8357>>>>>>>    Move False to Err
8358>>>>>>>    Append_Output channel iChannel sChannel
8360>>>>>>>    
8360>>>>>>>    If (Err) Begin
8362>>>>>>>        Send Seq_Release_Channel iChannel
8363>>>>>>>        Function_Return DF_SEQ_CHANNEL_ERROR
8364>>>>>>>    End
8364>>>>>>>>
8364>>>>>>>    
8364>>>>>>>    Set Seq_Channel_Mode iChannel to DF_SEQ_CHANNEL_MODE_OUTPUT
8365>>>>>>>    
8365>>>>>>>    Function_Return iChannel
8366>>>>>>>End_Function
8367>>>>>>>
8367>>>>>>>Procedure Seq_Close_Channel Global Integer iChannel
8369>>>>>>>    Integer iMode
8369>>>>>>>    
8369>>>>>>>    If ((iChannel >= DF_SEQ_CHANNEL_MIN) and (iChannel <= DF_SEQ_CHANNEL_MAX)) Begin
8371>>>>>>>        Move (Seq_Channel_Mode(iChannel)) to iMode
8372>>>>>>>        
8372>>>>>>>        If (iMode = DF_SEQ_CHANNEL_MODE_OUTPUT) Begin
8374>>>>>>>            Close_Output channel iChannel
8376>>>>>>>        End
8376>>>>>>>>
8376>>>>>>>        Else If (iMode = DF_SEQ_CHANNEL_MODE_INPUT) Begin
8379>>>>>>>            Close_Input channel iChannel
8381>>>>>>>        End
8381>>>>>>>>
8381>>>>>>>        // If channel not open, release it! No (fatal) Error.
8381>>>>>>>        Send Seq_Release_Channel iChannel
8382>>>>>>>    End
8382>>>>>>>>
8382>>>>>>>End_Procedure
8383>>>>>Use GlobalFunctionsProcedures.pkg
8383>>>>>
8383>>>>>Register_Function IsRegistered String sWorkspace Returns Boolean
8383>>>>>Register_Function VdfSystemDfPath   Returns String
8383>>>>>Register_Function VdfSystemMakePath Returns String
8383>>>>>
8383>>>>>Enum_List
8383>>>>>    Define wsWorkspaceOpened       // WS opened ok
8383>>>>>    Define wsWorkspaceNotFound     // the named WS was not found in the global list
8383>>>>>    Define wsWorkspaceFileNotFound // the WS file was not found
8383>>>>>    Define wsDataPathEmpty         // the DataPath entry was empty
8383>>>>>    Define wsFileListEmpty         // The FileList entry was empty
8383>>>>>    Define wsFileListNotExist      // The FileList.cfg file could not be found
8383>>>>>End_Enum_List
8383>>>>>
8383>>>>>
8383>>>>>Define INVALID_HANDLE_VALUE for -1
8383>>>>>Define MAX_PATH for 260   // Symbol for maximum length of a path
8383>>>>>
8383>>>>>
8383>>>>>// Wide version
8383>>>>>External_Function winFindFirstFileW "FindFirstFileW" Kernel32.dll ;    WString wFileSpec ;    Pointer lpsWin32FindData ;    Returns Handle
8384>>>>>
8384>>>>>// Wrapper Function winFindFirstFile
8384>>>>>Function winFindFirstFile Global ;    String  sFileSpec ;    Pointer lpsWin32FindData ;    Returns Handle
8386>>>>>    
8386>>>>>    Handle  hResult
8386>>>>>    Integer iVoid iFilenameSize iAltFilenameSize
8386>>>>>    Integer iSizeOfStructWithoutStrings
8386>>>>>    String  sFileName sAlternateFileName
8386>>>>>    WString wFileName wAlternateFileName
8386>>>>>    Pointer pWFD
8386>>>>>    tWin32FindDataW tWFD
8386>>>>>    tWin32FindDataW tWFD
8386>>>>>    
8386>>>>>    // lpsWin32FindData is a pointer to a WIN32_FIND_DATAW struct, which contains pointers to UTF-8 strings.
8386>>>>>    // These string must be converted to UTF-16 and afterwards back to UTF-8.
8386>>>>>
8386>>>>>    Move (SizeOfType(tWin32FindData) - MAX_PATH - MAX_ALTPATH) to iSizeOfStructWithoutStrings
8387>>>>>    Move (AddressOf(tWFD)) to pWFD
8388>>>>>    
8388>>>>>    // Call the function
8388>>>>>    Move (winFindFirstFileW (sFileSpec, pWFD)) to hResult
8389>>>>>
8389>>>>>    // Copy the struct contents back to the incoming one.
8389>>>>>    Move (CopyMemory(lpsWin32FindData, pWFD, iSizeOfStructWithoutStrings)) to iVoid
8390>>>>>    
8390>>>>>    // But do the strings separately and convert them to UTF8
8390>>>>>    Move (PointerToWString(pWFD + iSizeOfStructWithoutStrings)) to sFileName
8391>>>>>    Move (PointerToWString(pWFD + iSizeOfStructWithoutStrings + (MAX_PATH*2))) to sAlternateFileName
8392>>>>>    
8392>>>>>    // Extend string with 0 to the maximum number of characters
8392>>>>>    If (SizeOfString(sFileName)<MAX_PATH) ;        Append sFileName (Repeat(Character(0), MAX_PATH - SizeOfString(sFileName)))
8395>>>>>    If (SizeOfString(sAlternateFileName)<MAX_ALTPATH) ;        Append sAlternateFileName (Repeat(Character(0), MAX_ALTPATH - SizeOfString(sAlternateFileName)))
8398>>>>>        
8398>>>>>    Move (MemCopy(lpsWin32FindData + iSizeOfStructWithoutStrings, AddressOf(sFileName), MAX_PATH)) to iVoid
8399>>>>>    Move (MemCopy(lpsWin32FindData + iSizeOfStructWithoutStrings + MAX_PATH, AddressOf(sAlternateFileName), MAX_ALTPATH)) to iVoid
8400>>>>>    
8400>>>>>    Function_Return hResult
8401>>>>>End_Function
8402>>>>>
8402>>>>>// When used directly, be sure to use WString types (UTF16).
8402>>>>>External_Function winFindNextFileW "FindNextFileW" Kernel32.dll ;    Handle  hFindFile ;    Pointer lpsWin32FindData ;    Returns Integer
8403>>>>>
8403>>>>>// Wrapper Function winFindNextFile
8403>>>>>Function winFindNextFile Global ;    Handle  hFindFile ;    Pointer lpsWin32FindData ;    Returns Integer
8405>>>>>    
8405>>>>>    Integer iResult iVoid iFilenameSize iAltFilenameSize
8405>>>>>    Integer iSizeOfStructWithoutStrings
8405>>>>>    String  sFileName sAlternateFileName
8405>>>>>    WString wFileName wAlternateFileName
8405>>>>>    Pointer pWFD
8405>>>>>    tWin32FindDataW tWFD
8405>>>>>    tWin32FindDataW tWFD
8405>>>>>
8405>>>>>    // lpsWin32FindData is a pointer to a WIN32_FIND_DATAW struct, which contains pointers to UTF-8 strings.
8405>>>>>    // These string must be converted to UTF-16 and afterwards back to UTF-8.
8405>>>>>
8405>>>>>    // Copy the struct to a local struct that can be modified to UTF-16.
8405>>>>>    Move (SizeOfType(tWin32FindData) - MAX_PATH - MAX_ALTPATH) to iSizeOfStructWithoutStrings
8406>>>>>    Move (AddressOf(tWFD)) to pWFD
8407>>>>>    Move (MemCopy(pWFD, lpsWin32FindData, iSizeOfStructWithoutStrings)) to iVoid
8408>>>>>    // But do the strings separately and convert them to wide strings (UTF16).
8408>>>>>    Move (PointerToString(lpsWin32FindData + iSizeOfStructWithoutStrings)) to wFileName
8409>>>>>    Move (PointerToString(lpsWin32FindData + iSizeOfStructWithoutStrings + MAX_PATH)) to wAlternateFileName
8410>>>>>    Move (MemCopy(pWFD + iSizeOfStructWithoutStrings, AddressOf(wFileName), SizeOfString(wFileName)*2)) to iVoid
8411>>>>>    Move (MemCopy(pWFD + iSizeOfStructWithoutStrings + (MAX_PATH*2), AddressOf(wAlternateFileName), SizeOfString(wAlternateFileName)*2)) to iVoid
8412>>>>>    
8412>>>>>    // Call the function
8412>>>>>    Move (winFindNextFileW (hFindFile, pWFD)) to iResult  
8413>>>>>
8413>>>>>    // Copy the struct contents back to the incoming one.
8413>>>>>    Move (CopyMemory(lpsWin32FindData, pWFD, iSizeOfStructWithoutStrings)) to iVoid
8414>>>>>    
8414>>>>>    // But do the strings separately and convert them to UTF8
8414>>>>>    Move (PointerToWString(pWFD + iSizeOfStructWithoutStrings)) to sFileName
8415>>>>>    Move (PointerToWString(pWFD + iSizeOfStructWithoutStrings + (MAX_PATH*2))) to sAlternateFileName
8416>>>>>    
8416>>>>>    // Extend string with 0 to the maximum number of characters
8416>>>>>    If (SizeOfString(sFileName)<MAX_PATH) ;        Append sFileName (Repeat(Character(0), MAX_PATH - SizeOfString(sFileName)))
8419>>>>>    If (SizeOfString(sAlternateFileName)<MAX_ALTPATH) ;        Append sAlternateFileName (Repeat(Character(0), MAX_ALTPATH - SizeOfString(sAlternateFileName)))
8422>>>>>        
8422>>>>>    Move (MemCopy(lpsWin32FindData + iSizeOfStructWithoutStrings, AddressOf(sFileName), MAX_PATH)) to iVoid
8423>>>>>    Move (MemCopy(lpsWin32FindData + iSizeOfStructWithoutStrings + MAX_PATH, AddressOf(sAlternateFileName), MAX_ALTPATH)) to iVoid
8424>>>>>    
8424>>>>>    Function_Return iResult
8425>>>>>End_Function
8426>>>>>
8426>>>>>
8426>>>>>External_Function winFindClose "FindClose" Kernel32.dll ;    Handle hOpenFile Returns Integer
8427>>>>>
8427>>>>>Function DoesFileExist Global String sFilename Returns Boolean
8429>>>>>    tWin32FindDataW Win32FindData
8429>>>>>    tWin32FindDataW Win32FindData
8429>>>>>    String sMask
8429>>>>>    Integer iVoid
8429>>>>>    Handle hFileFind
8429>>>>>    
8429>>>>>    Move (winFindFirstFileW(sFilename, AddressOf(Win32FindData))) to hFileFind
8430>>>>>    If (hFileFind <> INVALID_HANDLE_VALUE) Begin
8432>>>>>        Move (winFindClose(hFileFind)) to iVoid
8433>>>>>    End
8433>>>>>>
8433>>>>>    
8433>>>>>    Function_Return (hFileFind <> INVALID_HANDLE_VALUE)
8434>>>>>End_Function
8435>>>>>
8435>>>>>
8435>>>>>Use cIniFile.pkg
Including file: cIniFile.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cIniFile.pkg)
8435>>>>>>>Use Dll.pkg
8435>>>>>>>Use errornum.inc
8435>>>>>>>Use LanguageText.pkg
8435>>>>>>>Use GlobalFunctionsProcedures.pkg
8435>>>>>>>Use seq_chnl.pkg
8435>>>>>>>Use CharTranslate.pkg
8435>>>>>>>Use cCharTranslate.pkg
Including file: cCharTranslate.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCharTranslate.pkg)
8435>>>>>>>>>Use Variant.pkg
Including file: Variant.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Variant.pkg)
8435>>>>>>>>>>>Use ui
8435>>>>>>>>>>>Use errornum.inc
8435>>>>>>>>>>>
8435>>>>>>>>>>>// OLE VARENUM usage keys (from wtypes.h)
8435>>>>>>>>>>>
8435>>>>>>>>>>>
8435>>>>>>>>>>>External_Function SysAllocString "SysAllocString" oleaut32.dll Pointer pStr Returns Pointer
8436>>>>>>>>>>>External_Function SysStringLen "SysStringLen" oleaut32.dll Pointer vStr Returns Integer
8437>>>>>>>>>>>
8437>>>>>>>>>>>//  Returns the variant type
8437>>>>>>>>>>>Function VariantType Global Variant vVal Returns Integer
8439>>>>>>>>>>>    Function_Return (DeRefW(AddressOf(vVal),0))
8440>>>>>>>>>>>End_Function
8441>>>>>>>>>>>
8441>>>>>>>>>>>
8441>>>>>>>>>>>// Returns the character length of the variant string. 
8441>>>>>>>>>>>Function VariantStringLength Global Variant bStr Returns Integer
8443>>>>>>>>>>>    Integer iLen iType
8443>>>>>>>>>>>
8443>>>>>>>>>>>    Move (VariantType(bStr)) to iType
8444>>>>>>>>>>>    If (iType=OLE_VT_Empty) Begin
8446>>>>>>>>>>>        Function_Return 0
8447>>>>>>>>>>>    End
8447>>>>>>>>>>>>
8447>>>>>>>>>>>    If (iType<>OLE_VT_Bstr) Begin
8449>>>>>>>>>>>        Error DFERR_BAD_TYPE_EXPRESSION "In variable is not a variant bstr"
8450>>>>>>>>>>>>
8450>>>>>>>>>>>        Function_Return 0
8451>>>>>>>>>>>    End
8451>>>>>>>>>>>>
8451>>>>>>>>>>>    Move (SysStringLen(DeRefPtr(AddressOf(bStr),8))) to iLen
8452>>>>>>>>>>>    Function_Return iLen
8453>>>>>>>>>>>End_Function
8454>>>>>>>>>>>
8454>>>>>>>>>>>
8454>>>>>>>>>>>// returns true if char string in the buffer can fit into a string.
8454>>>>>>>>>>>// Changed this to always return True, because the Max_Argument_Size limitation has been removed.
8454>>>>>>>>>>>Function ValidStringBufferLength Global Pointer pData Returns Boolean
8456>>>>>>>>>>>    Function_Return True
8457>>>>>>>>>>>End_Function
8458>>>>>>>>>>>
8458>>>>>>>>>>>
8458>>>>>>>>>Use CharTranslate.pkg
8458>>>>>>>>>Use GlobalFunctionsProcedures.pkg
8458>>>>>>>>>
8458>>>>>>>>>// special for UTF16, which is really not a code page at all
8458>>>>>>>>>Define CP_UTF16 for -1
8458>>>>>>>>>
8458>>>>>>>>>Class cCharTranslate is a cObject
8459>>>>>>>>>    
8459>>>>>>>>>    
8459>>>>>>>>>    // UTF16 functions that allow you to move between a char (UTF8, ANS, OEM) and a UTF16 buffer
8459>>>>>>>>>    
8459>>>>>>>>>    // converts from buffer of encoded eCharType to a new UTF16 buffer
8459>>>>>>>>>    // note: Utf16FromBuffer with eCharType of CP_OEM can replace OEMToUTF16Buffer
8459>>>>>>>>>    Function Utf16FromBuffer  Pointer pMultiCharBuffer Integer eCharType Integer ByRef iLen Returns Pointer
8461>>>>>>>>>        Pointer pWideBuf
8461>>>>>>>>>        Integer iWideBufLen iStrLen
8461>>>>>>>>>        Move 0 to pWideBuf
8462>>>>>>>>>        Move 0 to iLen
8463>>>>>>>>>        If (pMultiCharBuffer) Begin
8465>>>>>>>>>            Move (CStringSize(pMultiCharBuffer)) to iStrLen
8466>>>>>>>>>            If (iStrLen) Begin
8468>>>>>>>>>                Move (MultiToWideBuffer(eCharType,pMultiCharBuffer, iStrLen, AddressOf(pWideBuf))) to iLen
8469>>>>>>>>>                If (iLen=0) Begin
8471>>>>>>>>>                    Function_Return 0
8472>>>>>>>>>                End
8472>>>>>>>>>>
8472>>>>>>>>>            End
8472>>>>>>>>>>
8472>>>>>>>>>        End
8472>>>>>>>>>>
8472>>>>>>>>>        Function_Return pWideBuf
8473>>>>>>>>>    End_Function
8474>>>>>>>>>    
8474>>>>>>>>>    Function Utf16FromStr String sValue Integer eCharType Integer ByRef iLen Returns Pointer
8476>>>>>>>>>        Pointer pValue
8476>>>>>>>>>        Get Utf16FromBuffer (AddressOf(sValue)) eCharType (&iLen) to pValue
8477>>>>>>>>>        Function_Return pValue
8478>>>>>>>>>    End_Function
8479>>>>>>>>>    
8479>>>>>>>>>    // converts from utf16 buffer to a new buffer of encoded eCharType
8479>>>>>>>>>    // note: Utf16ToBuffer with eCharType of CP_OEM can replace UTFtoOEMBuffer
8479>>>>>>>>>    Function Utf16ToBuffer Pointer pWideBuf Integer eCharType Integer iLen Returns Pointer
8481>>>>>>>>>        Pointer pRetBuf
8481>>>>>>>>>        Integer iRetBufLen
8481>>>>>>>>>        Move 0 to pRetBuf
8482>>>>>>>>>        If (pWideBuf and iLen) Begin
8484>>>>>>>>>            Move (WideToMultiBuffer(eCharType,pWideBuf,iLen,AddressOf(pRetBuf))) to iRetBufLen
8485>>>>>>>>>            If (iRetBufLen=0) Begin
8487>>>>>>>>>                Function_Return 0
8488>>>>>>>>>            End
8488>>>>>>>>>>
8488>>>>>>>>>        End
8488>>>>>>>>>>
8488>>>>>>>>>        Function_Return pRetBuf
8489>>>>>>>>>    End_Function
8490>>>>>>>>>    
8490>>>>>>>>>    Function Utf16ToStr Pointer pWideBuf Integer eCharType Integer iLen Returns String
8492>>>>>>>>>        String sValue
8492>>>>>>>>>        Pointer pValue
8492>>>>>>>>>        Boolean bOk
8492>>>>>>>>>        Get Utf16ToBuffer pWideBuf eCharType iLen to pValue
8493>>>>>>>>>        If (not(ValidStringBufferLength(pValue))) Begin
8495>>>>>>>>>            Error DFERR_PROGRAM "Buffer exceeds maximum string size"
8496>>>>>>>>>>
8496>>>>>>>>>        End
8496>>>>>>>>>>
8496>>>>>>>>>        Move (PointerToString(pValue)) to sValue
8497>>>>>>>>>        Move (Free(pValue)) to bOk
8498>>>>>>>>>        Function_Return sValue
8499>>>>>>>>>    End_Function
8500>>>>>>>>>    
8500>>>>>>>>>    
8500>>>>>>>>>    // UTF8 functions that allow you to move between a UTF8 buffer and other single char OEM/ASNI
8500>>>>>>>>>    
8500>>>>>>>>>    Function Utf8FromBuffer Pointer pMultiCharBuffer Integer eCharType Returns Pointer
8502>>>>>>>>>        Pointer pWideBuf
8502>>>>>>>>>        Pointer pUtf8Buf
8502>>>>>>>>>        Integer iLen iMultiBufLen
8502>>>>>>>>>        Boolean bOk
8502>>>>>>>>>        Get Utf16FromBuffer pMultiCharBuffer eCharType (&iLen) to pWideBuf
8503>>>>>>>>>        If (iLen=0) Begin
8505>>>>>>>>>            Function_Return 0
8506>>>>>>>>>        End
8506>>>>>>>>>>
8506>>>>>>>>>        Move 0 to pUtf8Buf
8507>>>>>>>>>        Move (WideToMultiBuffer(CP_UTF8,pWideBuf,iLen,AddressOf(pUtf8Buf))) to iMultiBufLen
8508>>>>>>>>>        Move (Free(pWideBuf)) to bOk
8509>>>>>>>>>        Function_Return pUtf8Buf
8510>>>>>>>>>    End_Function
8511>>>>>>>>>    
8511>>>>>>>>>    Function Utf8FromStr String sValue Integer eCharType Returns Pointer
8513>>>>>>>>>        Pointer pValue
8513>>>>>>>>>        Get Utf8FromBuffer (AddressOf(sValue)) eCharType to pValue
8514>>>>>>>>>        Function_Return pValue
8515>>>>>>>>>    End_Function
8516>>>>>>>>>    
8516>>>>>>>>>    Function Utf8ToBuffer Pointer pMultiCharBuffer Integer eCharType Returns Pointer
8518>>>>>>>>>        Pointer pRetBuf pWideBuf
8518>>>>>>>>>        Integer iWideBufLen
8518>>>>>>>>>        Integer iRetBufLen
8518>>>>>>>>>        Boolean bOk
8518>>>>>>>>>        Get Utf16FromBuffer pMultiCharBuffer CP_UTF8 (&iWideBufLen) to pWideBuf
8519>>>>>>>>>        If (iWideBufLen=0) Begin
8521>>>>>>>>>            Function_Return 0
8522>>>>>>>>>        End
8522>>>>>>>>>>
8522>>>>>>>>>        Move 0 to pRetBuf
8523>>>>>>>>>        Move (WideToMultiBuffer(eCharType,pWideBuf,iWideBufLen,AddressOf(pRetBuf))) to iRetBufLen
8524>>>>>>>>>        Move (Free(pWideBuf)) to bOk
8525>>>>>>>>>        Function_Return pRetBuf
8526>>>>>>>>>    End_Function
8527>>>>>>>>>    
8527>>>>>>>>>    Function Utf8ToStr Pointer pWideBuf Integer eCharType Returns String
8529>>>>>>>>>        String sValue
8529>>>>>>>>>        Pointer pValue
8529>>>>>>>>>        Boolean bOk
8529>>>>>>>>>        Get Utf8ToBuffer pWideBuf eCharType to pValue
8530>>>>>>>>>        If (not(ValidStringBufferLength(pValue))) Begin
8532>>>>>>>>>            Error DFERR_PROGRAM "Buffer exceeds maximum string size"
8533>>>>>>>>>>
8533>>>>>>>>>        End
8533>>>>>>>>>>
8533>>>>>>>>>        Move (PointerToString(pValue)) to sValue
8534>>>>>>>>>        Move (Free(pValue)) to bOk
8535>>>>>>>>>        Function_Return sValue
8536>>>>>>>>>    End_Function
8537>>>>>>>>>    
8537>>>>>>>>>    // Variant functions that allow you to move between a variant string (wide char) and other
8537>>>>>>>>>    // buffer and string types. Normally a Move vVar to sVar does a OEM/Unicode translation. These
8537>>>>>>>>>    // allow you translate to other formats (UTF8, OEM and ANSI)
8537>>>>>>>>>    
8537>>>>>>>>>    // Create data buffer from variant string. data buffer is encoded by eCharType
8537>>>>>>>>>    Function VariantStrToBuffer Variant vValue Integer eCharType Returns Pointer
8539>>>>>>>>>        Pointer pBSTR pRetStr
8539>>>>>>>>>        Integer iLen iBufLen
8539>>>>>>>>>        Boolean bOk
8539>>>>>>>>>        Move 0 to pRetStr
8540>>>>>>>>>        Move (VariantStringLength( vValue)) to iLen
8541>>>>>>>>>        If (iLen) Begin
8543>>>>>>>>>            Move (DeRefPtr(AddressOf(vValue),8)) to pBSTR
8544>>>>>>>>>            Move (WideToMultiBuffer(eCharType,pBSTR,iLen,AddressOf(pRetStr))) to iBufLen
8545>>>>>>>>>        End
8545>>>>>>>>>>
8545>>>>>>>>>        Function_Return pRetStr
8546>>>>>>>>>    End_Function
8547>>>>>>>>>    
8547>>>>>>>>>    // Create string from variant string. data buffer is encoded by eCharType
8547>>>>>>>>>    
8547>>>>>>>>>    Function VariantStrToStr Variant vValue Integer eCharType Returns String
8549>>>>>>>>>        String sValue
8549>>>>>>>>>        Pointer pValue
8549>>>>>>>>>        Boolean bOk
8549>>>>>>>>>        Get VariantStrToBuffer vValue eCharType to pValue
8550>>>>>>>>>        If (not(ValidStringBufferLength(pValue))) Begin
8552>>>>>>>>>            Error DFERR_PROGRAM "Buffer exceeds maximum string size"
8553>>>>>>>>>>
8553>>>>>>>>>        End
8553>>>>>>>>>>
8553>>>>>>>>>        Move (PointerToString(pValue)) to sValue
8554>>>>>>>>>        Move (Free(pValue)) to bOk
8555>>>>>>>>>        Function_Return sValue
8556>>>>>>>>>    End_Function
8557>>>>>>>>>    
8557>>>>>>>>>    // Create variant string from data buffer. data buffer is encoded by eCharType
8557>>>>>>>>>    
8557>>>>>>>>>    Function VariantStrFromBuffer Pointer pSource Integer eCodeType Returns Variant
8559>>>>>>>>>        Variant vValue
8559>>>>>>>>>        Pointer pvValue
8559>>>>>>>>>        Boolean bOk
8559>>>>>>>>>        Pointer pWStr
8559>>>>>>>>>        Move "" to vValue
8560>>>>>>>>>        If (pSource) Begin
8562>>>>>>>>>            //Initialize pWstr variable so it has the correct type and AddressOf will return a proper pointer
8562>>>>>>>>>            Move 0 to pWStr
8563>>>>>>>>>            //Convert the Ansi string to Unicode
8563>>>>>>>>>            Move (MultiToWideBuffer( eCodeType, pSource, CStringSize(pSource), AddressOf(pWStr))) to bOk
8564>>>>>>>>>            //Initialize vValue variable so it has the correct type and AddressOf will return a proper pointer
8564>>>>>>>>>            Move 0 to vValue
8565>>>>>>>>>            Move (AddressOf(vValue)) to pvValue
8566>>>>>>>>>            //Change the Variant type to VT_BSTR
8566>>>>>>>>>            Move (StoreDw(pvValue,0,OLE_VT_Bstr)) to bOk
8567>>>>>>>>>            //Allocate a proper COM BSTR, assign the Unicode string, and store the BSTR in the Variant variable
8567>>>>>>>>>            Move (StorePtr(pvValue,8,SysAllocString(pWStr))) to bOk
8568>>>>>>>>>            //Now clear up the Unicode string, the Variant owns a BSTR copy of the string
8568>>>>>>>>>            Move (Free(pWStr)) to bOk
8569>>>>>>>>>        End
8569>>>>>>>>>>
8569>>>>>>>>>        Function_Return vValue
8570>>>>>>>>>    End_Function
8571>>>>>>>>>    
8571>>>>>>>>>    // Create variant string from data string. data string is encoded by eCharType
8571>>>>>>>>>    
8571>>>>>>>>>    Function VariantStrFromStr String sValue Integer eCodeType Returns Variant
8573>>>>>>>>>        Variant vValue
8573>>>>>>>>>        Get VariantStrFromBuffer (AddressOf(sValue)) eCodeType to vValue
8574>>>>>>>>>        Function_Return vValue
8575>>>>>>>>>    End_Function
8576>>>>>>>>>    
8576>>>>>>>>>    // Create buffer of utf16 data from variant.
8576>>>>>>>>>    // Returns newly created memory address and length (by reference)
8576>>>>>>>>>    Function VariantStrToUTF16 Variant vValue Integer ByRef iLen Returns Pointer
8578>>>>>>>>>        Pointer pBSTR pRetStr
8578>>>>>>>>>        Boolean bOk
8578>>>>>>>>>        Move 0 to pRetStr
8579>>>>>>>>>        Move (VariantStringLength( vValue)) to iLen
8580>>>>>>>>>        If (iLen) Begin
8582>>>>>>>>>            Move (DeRefPtr(AddressOf(vValue),8)) to pBSTR
8583>>>>>>>>>            Move (Alloc(iLen+1 * 2)) to pRetStr
8584>>>>>>>>>            Move (MemCopy(pRetStr,pBSTR,(iLen+1 * 2))) to bOk
8585>>>>>>>>>        End
8585>>>>>>>>>>
8585>>>>>>>>>        Function_Return pRetStr
8586>>>>>>>>>    End_Function
8587>>>>>>>>>    
8587>>>>>>>>>    // Create variant from buffer of utf16 data
8587>>>>>>>>>    Function VariantStrFromUTF16 Pointer pSource Returns Variant
8589>>>>>>>>>        Variant vValue
8589>>>>>>>>>        Pointer pvValue
8589>>>>>>>>>        Boolean bOk
8589>>>>>>>>>        Move "" to vValue
8590>>>>>>>>>        If (pSource) Begin
8592>>>>>>>>>            //Initialize pWstr variable so it has the correct type and AddressOf will return a proper pointer
8592>>>>>>>>>            //Initialize vValue variable so it has the correct type and AddressOf will return a proper pointer
8592>>>>>>>>>            Move 0 to vValue
8593>>>>>>>>>            Move (AddressOf(vValue)) to pvValue
8594>>>>>>>>>            //Change the Variant type to VT_BSTR
8594>>>>>>>>>            Move (StoreDw(pvValue,0,OLE_VT_Bstr)) to bOk
8595>>>>>>>>>            //Allocate a proper COM BSTR, assign the Unicode string, and store the BSTR in the Variant variable
8595>>>>>>>>>            Move (StorePtr(pvValue,8,SysAllocString(pSource))) to bOk
8596>>>>>>>>>        End
8596>>>>>>>>>>
8596>>>>>>>>>        Function_Return vValue
8597>>>>>>>>>    End_Function
8598>>>>>>>>>    
8598>>>>>>>>>    // Create Uchar array from variant string.
8598>>>>>>>>>    // Data buffer is encoded by eCharType
8598>>>>>>>>>    Function VariantStrToUCharArray Variant vValue Integer eCharType Returns UChar[]
8600>>>>>>>>>        Pointer pBSTR pRetStr
8600>>>>>>>>>        Integer iLen iBufLen
8600>>>>>>>>>        Boolean bOk
8600>>>>>>>>>        UChar[] UC1
8601>>>>>>>>>        Move 0 to pRetStr
8602>>>>>>>>>        Move (VariantStringLength( vValue)) to iLen
8603>>>>>>>>>        If (iLen) Begin
8605>>>>>>>>>            Move (DeRefPtr(AddressOf(vValue),8)) to pBSTR
8606>>>>>>>>>            If (eCharType=CP_UTF16) Begin
8608>>>>>>>>>                Move (iLen*2) to iBufLen
8609>>>>>>>>>                Move (ResizeArray(UC1,iBufLen)) to UC1
8610>>>>>>>>>                Move (MemCopy(AddressOf(UC1),pBSTR,iBufLen)) to bOk
8611>>>>>>>>>            End
8611>>>>>>>>>>
8611>>>>>>>>>            Else Begin
8612>>>>>>>>>                Move (WideToMultiBuffer(eCharType,pBSTR,iLen,AddressOf(pRetStr))) to iBufLen
8613>>>>>>>>>                Move (ResizeArray(UC1,iBufLen)) to UC1
8614>>>>>>>>>                Move (MemCopy(AddressOf(UC1),pRetStr,iBufLen)) to bOk
8615>>>>>>>>>                Move (Free(pRetStr)) to bOk
8616>>>>>>>>>            End
8616>>>>>>>>>>
8616>>>>>>>>>        End
8616>>>>>>>>>>
8616>>>>>>>>>        Function_Return UC1
8617>>>>>>>>>    End_Function
8618>>>>>>>>>    
8618>>>>>>>>>    // Create variant string from UChar array. data is encoded by eCharType
8618>>>>>>>>>    Function VariantStrFromUCharArray UChar[] ucSource Integer eCodeType Returns Variant
8620>>>>>>>>>        Variant vValue
8620>>>>>>>>>        Pointer pvValue
8620>>>>>>>>>        Boolean bOk
8620>>>>>>>>>        Pointer pWStr
8620>>>>>>>>>        Move "" to vValue
8621>>>>>>>>>        
8621>>>>>>>>>        //Initialize pWstr variable so it has the correct type and AddressOf will return a proper pointer
8621>>>>>>>>>        Move 0 to pWStr
8622>>>>>>>>>        //Convert the Ansi string to Unicode
8622>>>>>>>>>        If (eCodeType=CP_UTF16) Begin
8624>>>>>>>>>            Move 0 to ucSource[SizeOfArray(ucSource)]
8625>>>>>>>>>            Move 0 to ucSource[SizeOfArray(ucSource)]
8626>>>>>>>>>            Move (AddressOf(ucSource)) to pWStr
8627>>>>>>>>>        End
8627>>>>>>>>>>
8627>>>>>>>>>        Else Begin
8628>>>>>>>>>            Move (MultiToWideBuffer( eCodeType, AddressOf(ucSource), SizeOfArray(ucSource), AddressOf(pWStr))) to bOk
8629>>>>>>>>>        End
8629>>>>>>>>>>
8629>>>>>>>>>        //Initialize vValue variable so it has the correct type and AddressOf will return a proper pointer
8629>>>>>>>>>        Move 0 to vValue
8630>>>>>>>>>        Move (AddressOf(vValue)) to pvValue
8631>>>>>>>>>        //Change the Variant type to VT_BSTR
8631>>>>>>>>>        Move (StoreDw(pvValue,0,OLE_VT_Bstr)) to bOk
8632>>>>>>>>>        //Allocate a proper COM BSTR, assign the Unicode string, and store the BSTR in the Variant variable
8632>>>>>>>>>        Move (StorePtr(pvValue,8,SysAllocString(pWStr))) to bOk
8633>>>>>>>>>        //Now clear up the Unicode string, the Variant owns a BSTR copy of the string
8633>>>>>>>>>        If (eCodeType<>CP_UTF16) Begin
8635>>>>>>>>>            Move (Free(pWStr)) to bOk
8636>>>>>>>>>        End
8636>>>>>>>>>>
8636>>>>>>>>>        Function_Return vValue
8637>>>>>>>>>    End_Function
8638>>>>>>>>>    
8638>>>>>>>>>    
8638>>>>>>>>>    // UChar array conversions. Converts a passed uchar array with from-encoding to
8638>>>>>>>>>    // a new UChar array with to-encoding
8638>>>>>>>>>    
8638>>>>>>>>>    Function ConvertUCharArray UChar[] UCharData Integer iFromCP Integer iToCP Returns UChar[]
8640>>>>>>>>>        Pointer pFromBuf pToBuf
8640>>>>>>>>>        Integer iBytes iChars
8640>>>>>>>>>        Boolean bOk
8640>>>>>>>>>        
8640>>>>>>>>>        Move (SizeOfArray(UCharData)) to iBytes
8641>>>>>>>>>        If (iFromCP=iToCP or iBytes=0) Begin
8643>>>>>>>>>            Function_Return UCharData
8644>>>>>>>>>        End
8644>>>>>>>>>>
8644>>>>>>>>>        
8644>>>>>>>>>        If (iFromCP<>CP_UTF16) Begin
8646>>>>>>>>>            Move 0 to UCharData[iBytes] // extend to make sure we have 0 at end
8647>>>>>>>>>            Get Utf16FromBuffer (AddressOf(UCharData)) iFromCP (&iChars) to pFromBuf
8648>>>>>>>>>        End
8648>>>>>>>>>>
8648>>>>>>>>>        Else Begin
8649>>>>>>>>>            Move (iBytes/2) to iChars // if from is utf16
8650>>>>>>>>>        End
8650>>>>>>>>>>
8650>>>>>>>>>        
8650>>>>>>>>>        If (iToCP<>CP_UTF16) Begin
8652>>>>>>>>>            If (iFromCP=CP_UTF16) Begin
8654>>>>>>>>>                Get Utf16ToBuffer (AddressOf(UCharData)) iToCP iChars to pToBuf
8655>>>>>>>>>            End
8655>>>>>>>>>>
8655>>>>>>>>>            Else Begin
8656>>>>>>>>>                Get Utf16ToBuffer pFromBuf iToCP iChars to pToBuf
8657>>>>>>>>>                Move (Free(pFromBuf)) to bOk
8658>>>>>>>>>            End
8658>>>>>>>>>>
8658>>>>>>>>>            Move (CStringSize(pToBuf)) to iBytes
8659>>>>>>>>>        End
8659>>>>>>>>>>
8659>>>>>>>>>        Else Begin
8660>>>>>>>>>            Move (iChars*2) to iBytes
8661>>>>>>>>>            Move pFromBuf to pToBuf
8662>>>>>>>>>        End
8662>>>>>>>>>>
8662>>>>>>>>>        Move (ResizeArray(UCharData,iBytes)) to UCharData
8663>>>>>>>>>        Move (MemCopy(AddressOf(UCharData),pToBuf,iBytes)) to bOk
8664>>>>>>>>>        Move (Free(pToBuf)) to bOk
8665>>>>>>>>>        Function_Return UCharData
8666>>>>>>>>>    End_Function
8667>>>>>>>>>    
8667>>>>>>>>>    // Base64 Encoding functions that allow you to encode to and decode from strings and
8667>>>>>>>>>    // Variant strings. Binary data is always buffer
8667>>>>>>>>>    
8667>>>>>>>>>    Function Base64EncodeToStr Pointer pBinaryData Integer iBinaryLen Returns String
8669>>>>>>>>>        Pointer pBase64
8669>>>>>>>>>        String sResult
8669>>>>>>>>>        Integer iVoid
8669>>>>>>>>>        Move (Base64Encode(pBinaryData, iBinaryLen)) to pBase64
8670>>>>>>>>>        Move (PointerToString(pBase64)) to sResult
8671>>>>>>>>>        Move (Free(pBase64)) to iVoid
8672>>>>>>>>>        Function_Return sResult
8673>>>>>>>>>    End_Function
8674>>>>>>>>>    
8674>>>>>>>>>    Function Base64DecodeFromStr String sBase64 Integer ByRef iBinaryLen Returns Pointer
8676>>>>>>>>>        Pointer pBinaryData
8676>>>>>>>>>        String sBinary
8676>>>>>>>>>        Integer iVoid
8676>>>>>>>>>        Move (Base64Decode(AddressOf(sBase64), &iBinaryLen)) to pBinaryData
8677>>>>>>>>>        Function_Return pBinaryData
8678>>>>>>>>>    End_Function
8679>>>>>>>>>    
8679>>>>>>>>>    Function Base64EncodeToVariantStr Pointer pBinaryData Integer iBinaryLen Returns Variant
8681>>>>>>>>>        Pointer pBase64
8681>>>>>>>>>        Variant vVar
8681>>>>>>>>>        Integer iBase64Len iVoid
8681>>>>>>>>>        If (pBinaryData and iBinaryLen) Begin
8683>>>>>>>>>            Move (Base64Encode(pBinaryData,iBinaryLen)) to pBase64
8684>>>>>>>>>            Get  VariantStrFromBuffer pBase64 CP_ACP to vVar
8685>>>>>>>>>            Move (Free(pBase64)) to iVoid
8686>>>>>>>>>        End
8686>>>>>>>>>>
8686>>>>>>>>>        Function_Return vVar
8687>>>>>>>>>    End_Function
8688>>>>>>>>>    
8688>>>>>>>>>    Function Base64DecodeFromVariantStr Variant vBase64Str Integer ByRef iBinaryLen Returns Pointer
8690>>>>>>>>>        Pointer pBase64 pBinaryData
8690>>>>>>>>>        Integer iVoid
8690>>>>>>>>>        Move 0 to iBinaryLen
8691>>>>>>>>>        Get VariantStrToBuffer vBase64Str CP_ACP to pBase64
8692>>>>>>>>>        If (pBase64) Begin
8694>>>>>>>>>            Move (Base64Decode(pBase64,&iBinaryLen)) to pBinaryData
8695>>>>>>>>>            Move (Free(pBase64)) to iVoid
8696>>>>>>>>>        End
8696>>>>>>>>>>
8696>>>>>>>>>        Function_Return pBinaryData
8697>>>>>>>>>    End_Function
8698>>>>>>>>>    
8698>>>>>>>>>    // base 64 Encode from Uchar array to a Uchar array
8698>>>>>>>>>    Function Base64EncodeUCharArray UChar[] UCharData Returns UChar[]
8700>>>>>>>>>        Pointer pBase64
8700>>>>>>>>>        Integer iLen
8700>>>>>>>>>        Boolean bOk
8700>>>>>>>>>        
8700>>>>>>>>>        Move (SizeOfArray(UCharData)) to iLen
8701>>>>>>>>>        If (iLen) Begin
8703>>>>>>>>>            Move (Base64Encode(AddressOf(UCharData), iLen)) to pBase64
8704>>>>>>>>>            Move (CStringSize(pBase64)) to iLen
8705>>>>>>>>>            Move (ResizeArray(UCharData,iLen)) to UCharData
8706>>>>>>>>>            Move (MemCopy(AddressOf(UCharData),pBase64,iLen)) to bOk
8707>>>>>>>>>            Move (Free(pBase64)) to bOk
8708>>>>>>>>>        End
8708>>>>>>>>>>
8708>>>>>>>>>        Function_Return UCharData
8709>>>>>>>>>    End_Function
8710>>>>>>>>>    
8710>>>>>>>>>    // base 64 Decode from Uchar array to a Uchar array
8710>>>>>>>>>    Function Base64DecodeUCharArray UChar[] UCharData Returns UChar[]
8712>>>>>>>>>        Pointer pData
8712>>>>>>>>>        Integer iLen
8712>>>>>>>>>        Boolean bOk
8712>>>>>>>>>        
8712>>>>>>>>>        Move (SizeOfArray(UCharData)) to iLen
8713>>>>>>>>>        If (iLen) Begin
8715>>>>>>>>>            Move 0 to UCharData[iLen]
8716>>>>>>>>>            Move (Base64Decode(AddressOf(UCharData),&iLen)) to pData
8717>>>>>>>>>            Move (ResizeArray(UCharData,iLen)) to UCharData
8718>>>>>>>>>            Move (MemCopy(AddressOf(UCharData),pData,iLen)) to bOk
8719>>>>>>>>>            Move (Free(pData)) to bOk
8720>>>>>>>>>        End
8720>>>>>>>>>>
8720>>>>>>>>>        Function_Return UCharData
8721>>>>>>>>>    End_Function
8722>>>>>>>>>    
8722>>>>>>>>>End_Class
8723>>>>>>>>>
8723>>>>>>>>>
8723>>>>>>>
8723>>>>>>>// it is important that psFileName is defined. If blank, the registry may be accessed. We will check all WritePrivateProfileString
8723>>>>>>>// and GetPrivateProfileString to make sure that a file is defined.
8723>>>>>>>
8723>>>>>>>
8723>>>>>>>External_Function WritePrivateProfileStringW "WritePrivateProfileStringW" Kernel32.dll ;    WString sSection ;    WString sKeyName ;    WString sValue ;    WString sFileName ;    Returns Integer
8724>>>>>>>
8724>>>>>>>
8724>>>>>>>// When called directly, be sure to use WString types.
8724>>>>>>>External_Function GetPrivateProfileStringW "GetPrivateProfileStringW" Kernel32.dll ;    Pointer lpSection ;    Pointer lpKeyName ;    Pointer lpDefault ;    Pointer lpsValue ;    Integer nSize ;    WString lpFileName ;    Returns Integer
8725>>>>>>>
8725>>>>>>>External_Function WritePrivateProfileStringA "WritePrivateProfileStringA" Kernel32.dll ;    String sSection ;    String sKeyName ;    String sValue ;    String sFileName ;    Returns Integer
8726>>>>>>>    
8726>>>>>>>// When called directly, be sure to use String types.
8726>>>>>>>External_Function GetPrivateProfileStringA "GetPrivateProfileStringA" Kernel32.dll ;    Pointer lpSection ;    Pointer lpKeyName ;    Pointer lpDefault ;    Pointer lpsValue ;    Integer nSize ;    String lpFileName ;    Returns Integer
8727>>>>>>>    
8727>>>>>>>// Wrapper redirecting direct access to the wide for backwards compatibility (parameters will be auto converted)
8727>>>>>>>Define WritePrivateProfileString for WritePrivateProfileStringW
8727>>>>>>>    
8727>>>>>>>
8727>>>>>>>// Wrapper Function GetPrivateProfileString for backwards compatibility
8727>>>>>>>Function GetPrivateProfileString Global ;    Pointer pSection ;    Pointer pKeyName ;    Pointer pDefault ;    Pointer lpsValue ;    Integer nSize ;    String  sFileName ;    Returns Integer
8729>>>>>>>    
8729>>>>>>>    Integer iResult
8729>>>>>>>    UWide   uwSection uwKeyName uwDefault uwValue uwFileName
8729>>>>>>>    UWide   uwSection uwKeyName uwDefault uwValue uwFileName
8729>>>>>>>
8729>>>>>>>    Send StringToWide pSection (&uwSection)
8730>>>>>>>    Send StringToWide pKeyName (&uwKeyName)
8731>>>>>>>    Send StringToWide pDefault (&uwDefault)    
8732>>>>>>>    Send StringToWide (AddressOf(sFileName)) (&uwFileName)
8733>>>>>>>                           
8733>>>>>>>    Send WideSetBuffer lpsValue (AddressOf(nSize)) (&uwValue) 
8734>>>>>>>       
8734>>>>>>>    Move (GetPrivateProfileStringW (uwSection.lpUText, uwKeyName.lpUText, uwDefault.lpUText, uwValue.lpUText, nSize, uwFileName.lpUText)) to iResult
8735>>>>>>>        
8735>>>>>>>    Send WideToStringSized (&uwValue) lpsValue iResult      // iResult is number of characters
8736>>>>>>>    
8736>>>>>>>    Function_Return iResult
8737>>>>>>>End_Function
8738>>>>>>> 
8738>>>>>>>
8738>>>>>>>Class cIniFile is a cObject
8739>>>>>>>    Procedure Construct_Object
8741>>>>>>>        Forward Send Construct_Object
8743>>>>>>>        
8743>>>>>>>        
8743>>>>>>>        // Set to false to use the narrow windows API's to access the ini files. This allows UTF-8 data to be written
8743>>>>>>>        // and read (except if the file is stored as UTF-16) but has the downside of not supporting unicode file paths.
8743>>>>>>>        Property Boolean pbWideAPI True
8744>>>>>>>        
8744>>>>>>>        // Set to true to save the ini file as UTF-16LE (with a BOM). This allows unicode data to be saved properly
8744>>>>>>>        // using the wide API's. Note that pbWideAPI should be true to use this property. Existing ini files will be
8744>>>>>>>        // converted on first write (WriteString).
8744>>>>>>>        Property Boolean pbStoreAsUTF16 False
8745>>>>>>>        
8745>>>>>>>        Property String psPrivate_FileName ""
8746>>>>>>>        Property Boolean pbPrivate_FirstWrite True
8747>>>>>>>    End_Procedure
8748>>>>>>>    
8748>>>>>>>    Procedure Set psFileName String sVal
8750>>>>>>>        Set pbPrivate_FirstWrite to True
8751>>>>>>>        Set psPrivate_FileName to sVal
8752>>>>>>>    End_Procedure
8753>>>>>>>    
8753>>>>>>>    Function psFileName Returns String
8755>>>>>>>        Function_Return (psPrivate_FileName(Self))
8756>>>>>>>    End_Function
8757>>>>>>>    
8757>>>>>>>    Procedure InitFile
8759>>>>>>>        Boolean bExists bHasBom
8759>>>>>>>        Integer iChnl
8759>>>>>>>        UChar[] ucData
8760>>>>>>>        Handle hoTranslate
8760>>>>>>>        
8760>>>>>>>        If (pbPrivate_FirstWrite(Self) and pbStoreAsUTF16(Self) and pbWideAPI(Self)) Begin
8762>>>>>>>            File_Exist (psPrivate_FileName(Self)) bExists
8763>>>>>>>            If (not(bExists)) Begin
8765>>>>>>>                //  Create the file with a UTF-16 BOM so
8765>>>>>>>                Move (Seq_New_Channel()) to iChnl
8766>>>>>>>                If (iChnl >= 0) Begin
8768>>>>>>>                    Direct_Output channel iChnl ("binary:" + psPrivate_FileName(Self))
8770>>>>>>>                    Write channel iChnl C_BOM_UTF16LE
8772>>>>>>>                    Close_Output channel iChnl
8774>>>>>>>                    Send Seq_Release_Channel iChnl
8775>>>>>>>                End
8775>>>>>>>>
8775>>>>>>>                Else If (iChnl = -1) Begin
8778>>>>>>>                    Error DFErr_Program "I/O Channel Error"
8779>>>>>>>>
8779>>>>>>>                End
8779>>>>>>>>
8779>>>>>>>                Else If (iChnl = -2) Begin
8782>>>>>>>                    Error DFErr_Program "No I/O Channel Available"
8783>>>>>>>>
8783>>>>>>>                End
8783>>>>>>>>
8783>>>>>>>            End
8783>>>>>>>>
8783>>>>>>>            Else Begin
8784>>>>>>>                //  Check for BOM
8784>>>>>>>                Move (Seq_New_Channel()) to iChnl
8785>>>>>>>                If (iChnl >= 0) Begin
8787>>>>>>>                    Direct_Input channel iChnl ("binary:" + psPrivate_FileName(Self))
8789>>>>>>>                    Read_Block channel iChnl ucData 2
8791>>>>>>>                    
8791>>>>>>>                    Move (SizeOfArray(ucData) >= 2 and ucData[0] = C_BOM_UTF16LEc1 and ucData[1] = C_BOM_UTF16LEc2) to bHasBom
8792>>>>>>>                    
8792>>>>>>>                    //  If no BOM we'll have to read the entire file to convert it
8792>>>>>>>                    If (not(bHasBom)) Begin
8794>>>>>>>                        Set_Channel_Position iChnl to 0
8795>>>>>>>>
8795>>>>>>>                        Read_Block ucData -1
8796>>>>>>>                    End
8796>>>>>>>>
8796>>>>>>>    
8796>>>>>>>                    Close_Input channel iChnl
8798>>>>>>>                    
8798>>>>>>>                    If (not(bHasBom)) Begin
8800>>>>>>>                        //  Convert thedata
8800>>>>>>>                        Get Create (RefClass(cCharTranslate)) to hoTranslate
8801>>>>>>>                        Get ConvertUCharArray of hoTranslate ucData CP_OEMCP CP_UTF16 to ucData
8802>>>>>>>                        
8802>>>>>>>                        //  Write out the UTF 16 file with BOM
8802>>>>>>>                        Direct_Output channel iChnl ("binary:" + psPrivate_FileName(Self))
8804>>>>>>>                        Write channel iChnl C_BOM_UTF16LE
8806>>>>>>>                        
8806>>>>>>>                        Write channel iChnl ucData
8808>>>>>>>                        
8808>>>>>>>                        Close_Output channel iChnl
8810>>>>>>>                        
8810>>>>>>>                        Send Destroy of hoTranslate
8811>>>>>>>                    End
8811>>>>>>>>
8811>>>>>>>                    
8811>>>>>>>                    Send Seq_Release_Channel iChnl
8812>>>>>>>                End
8812>>>>>>>>
8812>>>>>>>                Else If (iChnl = -1) Begin
8815>>>>>>>                    Error DFErr_Program "I/O Channel Error"
8816>>>>>>>>
8816>>>>>>>                End
8816>>>>>>>>
8816>>>>>>>                Else If (iChnl = -2) Begin
8819>>>>>>>                    Error DFErr_Program "No I/O Channel Available"
8820>>>>>>>>
8820>>>>>>>                End
8820>>>>>>>>
8820>>>>>>>            End
8820>>>>>>>>
8820>>>>>>>            
8820>>>>>>>            Set pbPrivate_FirstWrite to False
8821>>>>>>>        End
8821>>>>>>>>
8821>>>>>>>    End_Procedure
8822>>>>>>>    
8822>>>>>>>    Procedure WriteString String sSection String sKey String sValue
8824>>>>>>>        Boolean bSuccess
8824>>>>>>>        String sFileName
8824>>>>>>>        
8824>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8826>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8827>>>>>>>>
8827>>>>>>>            Procedure_Return
8828>>>>>>>        End
8828>>>>>>>>
8828>>>>>>>        
8828>>>>>>>        Send InitFile
8829>>>>>>>        
8829>>>>>>>        // All parameters are Strings and are converted to WString upon invoking the external function.
8829>>>>>>>        If (pbWideAPI(Self)) Begin
8831>>>>>>>            Move (WritePrivateProfileStringW(sSection, sKey, sValue, psPrivate_FileName(Self))) to bSuccess
8832>>>>>>>        End
8832>>>>>>>>
8832>>>>>>>        Else Begin
8833>>>>>>>            Move (Utf8ToAnsi(psPrivate_FileName(Self))) to sFileName
8834>>>>>>>            Move (WritePrivateProfileStringA(sSection, sKey, sValue, sFilename)) to bSuccess 
8835>>>>>>>        End
8835>>>>>>>>
8835>>>>>>>        If (bSuccess = False) ;            Error DFERR_INI_FILE C_$CannotWriteToTheIniFile
8838>>>>>>>    End_Procedure
8839>>>>>>>    
8839>>>>>>>    
8839>>>>>>>    Function ReadString String sSection String sKey String sDefault Returns String
8841>>>>>>>        Integer iNumChars iSizeValue
8841>>>>>>>        WString wValue wFileName wSection wKey wDefault
8841>>>>>>>        String sFileName sValue
8841>>>>>>>        
8841>>>>>>>        Move 2047 to iSizeValue
8842>>>>>>>        Move (Repeat(" ", iSizeValue)) to sValue
8843>>>>>>>        
8843>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8845>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8846>>>>>>>>
8846>>>>>>>            Function_Return ''
8847>>>>>>>        End
8847>>>>>>>>
8847>>>>>>>        
8847>>>>>>>        If (pbWideAPI(Self)) Begin
8849>>>>>>>            Move sSection to wSection
8850>>>>>>>            Move sKey to wKey
8851>>>>>>>            Move sDefault to wDefault
8852>>>>>>>            Move sValue to wValue
8853>>>>>>>            Move (GetPrivateProfileStringW(AddressOf(wSection), AddressOf(wKey), AddressOf(wDefault), AddressOf(wValue), iSizeValue, psPrivate_FileName(Self))) to iNumChars
8854>>>>>>>            Move wValue to sValue
8855>>>>>>>        End
8855>>>>>>>>
8855>>>>>>>        Else Begin
8856>>>>>>>            Move (Utf8ToAnsi(psPrivate_FileName(Self))) to sFileName
8857>>>>>>>            Move (GetPrivateProfileStringA(AddressOf(sSection), AddressOf(sKey), AddressOf(sDefault), AddressOf(sValue), iSizeValue, sFileName)) to iNumChars
8858>>>>>>>        End
8858>>>>>>>>
8858>>>>>>>        
8858>>>>>>>        Function_Return  (CString(sValue))
8859>>>>>>>    End_Function
8860>>>>>>>    
8860>>>>>>>    Function SectionExists String sSection Returns Boolean
8862>>>>>>>        // A section exists only if it has at least one Key. A section with no keys is said not to exist
8862>>>>>>>        Handle hoKeys
8862>>>>>>>        Integer icKey iKey
8862>>>>>>>        
8862>>>>>>>        Get Create U_ARRAY to hoKeys
8863>>>>>>>        Send ReadSection sSection hoKeys
8864>>>>>>>        Get Item_Count of hoKeys to icKey
8865>>>>>>>        Send Destroy of hoKeys
8866>>>>>>>        
8866>>>>>>>        Function_Return (icKey >0)
8867>>>>>>>    End_Function
8868>>>>>>>    
8868>>>>>>>    Procedure ReadSection WString wSection Handle hoArray
8870>>>>>>>        Integer iNumChars iSizeValue iPos
8870>>>>>>>        Pointer lpsKeys
8870>>>>>>>        WString wKeys wKey
8870>>>>>>>        
8870>>>>>>>        Move 16384 to iSizeValue
8871>>>>>>>        Move (Repeat(character(0),  iSizeValue)) to wKeys
8872>>>>>>>        
8872>>>>>>>        Move (AddressOf(wKeys)) to lpsKeys
8873>>>>>>>        
8873>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8875>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8876>>>>>>>>
8876>>>>>>>            Procedure_Return
8877>>>>>>>        End
8877>>>>>>>>
8877>>>>>>>        // The last parameter is a String and is converted to WString upon invoking the external function.
8877>>>>>>>        Move (GetPrivateProfileStringW(AddressOf(wSection), 0, 0, lpsKeys, Length(wKeys), psPrivate_FileName(Self))) to iNumChars
8878>>>>>>>        If (iNumChars >0) Begin
8880>>>>>>>            Repeat
8880>>>>>>>>
8880>>>>>>>                Move (Pos(Character(0),wKeys)) to iPos
8881>>>>>>>                If (iPos >1) Begin
8883>>>>>>>                    Move (Left(wKeys,iPos -1))  to wKey
8884>>>>>>>                    Move (Right(wKeys,Length(wKeys) - iPos)) to wKeys
8885>>>>>>>                    Set Value of hoArray (Item_Count(hoArray)) to wKey
8886>>>>>>>                End
8886>>>>>>>>
8886>>>>>>>            Until (iPos <=1)
8888>>>>>>>        End
8888>>>>>>>>
8888>>>>>>>    End_Procedure
8889>>>>>>>    
8889>>>>>>>    Procedure ReadSections Handle hoArray
8891>>>>>>>        Integer iNumChars iSizeValue iPos
8891>>>>>>>        Pointer lpwSections
8891>>>>>>>        WString wSections
8891>>>>>>>        String sSection
8891>>>>>>>        
8891>>>>>>>        Move 16384 to iSizeValue
8892>>>>>>>        
8892>>>>>>>        Move (Repeat(character(0),  iSizeValue)) to wSections
8893>>>>>>>        Move (AddressOf(wSections)) to lpwSections
8894>>>>>>>        
8894>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8896>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8897>>>>>>>>
8897>>>>>>>            Procedure_Return
8898>>>>>>>        End
8898>>>>>>>>
8898>>>>>>>        // The last parameter is a String and is converted to WString upon invoking the external function.
8898>>>>>>>        Move (GetPrivateProfileStringW(0, 0, 0, lpwSections, Length(wSections), psPrivate_FileName(Self))) to iNumChars
8899>>>>>>>        If (iNumChars >0) Begin
8901>>>>>>>            Repeat
8901>>>>>>>>
8901>>>>>>>                Move (Pos(Character(0),wSections)) to iPos
8902>>>>>>>                If (iPos >1) Begin
8904>>>>>>>                    Move (Left(wSections,iPos -1)) to sSection
8905>>>>>>>                    Move (Right(wSections, Length(wSections) - iPos)) to wSections
8906>>>>>>>                    Set Value of hoArray (Item_Count(hoArray)) to sSection
8907>>>>>>>                End
8907>>>>>>>>
8907>>>>>>>            Until (iPos <=1)
8909>>>>>>>        End
8909>>>>>>>>
8909>>>>>>>        
8909>>>>>>>    End_Procedure
8910>>>>>>>    
8910>>>>>>>    Procedure DeleteSection String sSection
8912>>>>>>>        
8912>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8914>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8915>>>>>>>>
8915>>>>>>>            Procedure_Return
8916>>>>>>>        End
8916>>>>>>>>
8916>>>>>>>        If (WritePrivateProfileString(sSection, "", "", psPrivate_FileName(Self)) = 0) ;            Error DFERR_INI_FILE C_$CanNotDeleteSection
8919>>>>>>>    End_Procedure
8920>>>>>>>    
8920>>>>>>>    Procedure DeleteKey String sSection String sKey
8922>>>>>>>        Integer iVoid
8922>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8924>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8925>>>>>>>>
8925>>>>>>>            Procedure_Return
8926>>>>>>>        End
8926>>>>>>>>
8926>>>>>>>        Move (WritePrivateProfileString(sSection, sKey, "", psPrivate_FileName(Self))) to iVoid
8927>>>>>>>    End_Procedure
8928>>>>>>>    
8928>>>>>>>    Function KeyExists String sSection String sKey Returns Boolean
8930>>>>>>>        Handle hoKeys
8930>>>>>>>        Integer iKey
8930>>>>>>>        Boolean bExists
8930>>>>>>>        
8930>>>>>>>        Move (False) to bExists
8931>>>>>>>        
8931>>>>>>>        Move (Uppercase(sKey)) to sKey
8932>>>>>>>        
8932>>>>>>>        Get Create U_ARRAY to hoKeys
8933>>>>>>>        
8933>>>>>>>        Send ReadSection sSection hoKeys
8934>>>>>>>        For iKey from 0 to (Item_Count(hoKeys) -1)
8940>>>>>>>>
8940>>>>>>>            If (sKey = Uppercase(Value(hoKeys, iKey))) Begin
8942>>>>>>>                Move (True) to bExists
8943>>>>>>>            End
8943>>>>>>>>
8943>>>>>>>        Loop
8944>>>>>>>>
8944>>>>>>>        
8944>>>>>>>        Send Destroy of hoKeys
8945>>>>>>>        
8945>>>>>>>        Function_Return bExists
8946>>>>>>>    End_Function
8947>>>>>>>    
8947>>>>>>>End_Class
8948>>>>>
8948>>>>>Class cWorkspace is a cObject
8949>>>>>    
8949>>>>>    Procedure Construct_Object
8951>>>>>        Forward Send Construct_Object
8953>>>>>        
8953>>>>>        
8953>>>>>        Property String psAppSrcPath
8954>>>>>        Property String psBitmapPath
8955>>>>>        Property String psDataPath
8956>>>>>        Property String psDdSrcPath
8957>>>>>        Property String psDescription
8958>>>>>        Property String psFileList
8959>>>>>        Property String psHelpPath
8960>>>>>        Property String psHome
8961>>>>>        Property String psIdeSrcPath
8962>>>>>        Property String psProgramPath
8963>>>>>        Property String psAppHtmlPath
8964>>>>>        Property String psWorkspaceName
8965>>>>>        Property String psWorkspaceWSFile
8966>>>>>        Property String psConnectionIni
8967>>>>>        
8967>>>>>        Property String psSystemDfPath // took from the Registry!
8968>>>>>        Property String psSystemMakePath // took from the Registry!
8969>>>>>        Property String psDfPath        // Calculated
8970>>>>>        
8970>>>>>        Property Boolean pbWorkspaceOpened False // used internally to tell if we are switching workspaces
8971>>>>>        
8971>>>>>    End_Procedure
8972>>>>>    
8972>>>>>    Function FullPathNames String sShortPathNames Returns String
8974>>>>>        String sFileName
8974>>>>>        String sFullPathNames 
8974>>>>>        WString sFullPathName sShortPathName
8974>>>>>        Pointer lpsFilePart
8974>>>>>        Integer icChar // the number of characters returned
8974>>>>>        Integer iPos
8974>>>>>        
8974>>>>>        Move (Pos(";", sShortPathNames)) to iPos
8975>>>>>        While (length(sShortPathNames) >0)
8979>>>>>            If (iPos =0) Begin
8981>>>>>                Move sShortPathNames to sShortPathName
8982>>>>>                Move "" to sShortPathNames
8983>>>>>            End
8983>>>>>>
8983>>>>>            Else Begin // multiple paths
8984>>>>>                Move (Left(sShortPathNames, iPos -1)) to sShortPathName
8985>>>>>                Move (Right(sShortPathNames, length(sShortPathNames) -iPos)) to sShortPathNames // remove this path from the paths
8986>>>>>            End
8986>>>>>>
8986>>>>>            Move (Repeat(character(0), 4096)) to sFullPathName
8987>>>>>            Move -1 to lpsFilePart
8988>>>>>            Move (GetFullPathNameW(sShortPathName, 4096, AddressOf(sFullPathName), AddressOf(lpsFilePart))) to icChar
8989>>>>>            Append sFullPathNames (CString(sFullPathName))
8990>>>>>            If (sShortPathNames <>"") ;                Append sFullPathNames ";"
8993>>>>>            Move (Pos(";", sShortPathNames)) to iPos
8994>>>>>        Loop
8995>>>>>>
8995>>>>>        
8995>>>>>        Function_Return sFullPathNames
8996>>>>>    End_Function
8997>>>>>    
8997>>>>>    Function GetApplicationPath Returns String
8999>>>>>        // Returns the path of the Application (no trailing "\")
8999>>>>>        WString wApplicationFileName 
8999>>>>>        Boolean bRemoved
8999>>>>>        Integer iNumChars
8999>>>>>        String sFilename sPath
8999>>>>>        
8999>>>>>        Move (Repeat(Character(0), 1024)) to wApplicationFileName
9000>>>>>        Move (GetModuleFileNameW(0, AddressOf(wApplicationFileName), 1024)) to iNumChars
9001>>>>>        Move (CString(wApplicationFileName)) to wApplicationFileName
9002>>>>>        
9002>>>>>        Move (PathRemoveFileSpecW(AddressOf(wApplicationFileName))) to bRemoved
9003>>>>>        Move (CString(wApplicationFileName)) to sPath
9004>>>>>        
9004>>>>>        If (Right(sPath, 1) ="\") ;            Move (Left(sPath, Length(sPath) -1)) to sPath
9007>>>>>        Function_Return sPath
9008>>>>>    End_Function
9009>>>>>    
9009>>>>>    Procedure DoClearPaths
9011>>>>>        // Call this prior to changing from one WorkspAce to another
9011>>>>>        // if you don't, OpenWorkspaceFile will ignore the new paths.
9011>>>>>        Set psHome           to ""
9012>>>>>        Set psAppSrcPath     to ""
9013>>>>>        Set psBitmapPath     to ""
9014>>>>>        Set psDataPath       to ""
9015>>>>>        Set psDdSrcPath      to ""
9016>>>>>        Set psDescription    to ""
9017>>>>>        Set psFileList       to ""
9018>>>>>        Set psHelpPath       to ""
9019>>>>>        Set psIdeSrcPath     to ""
9020>>>>>        Set psAppHtmlPath    to ""
9021>>>>>        Set psProgramPath    to ""
9022>>>>>        Set psWorkspaceName  to ""
9023>>>>>        Set psSystemDfPath   to ""
9024>>>>>        Set psSystemMakePath to ""
9025>>>>>        Set psWorkspaceWSFile to ""
9026>>>>>        Set psConnectionIni to ""
9027>>>>>    End_Procedure
9028>>>>>    
9028>>>>>    Function OpenWorkspaceFile String sWorkspaceFile Returns Integer
9030>>>>>        WString wApplicationStartPath
9030>>>>>        String sWsName // name of Workspace is inferred from the Workspacefile name
9030>>>>>        Boolean bRemoved
9030>>>>>        Handle hoIniFile
9030>>>>>        Boolean bSuccess // call succeeded?
9030>>>>>        String sOldDirectory
9030>>>>>        String sSystemDfPath sSystemMakePath
9030>>>>>        Boolean bExist // does the WS file exist?
9030>>>>>        Boolean bChangingWorkspace
9030>>>>>        
9030>>>>>        String sHome sAppSrcPath sBitmapPath sDataPath sDdSrcPath sDescription sAppHtmlPath
9030>>>>>        String sFileList sHelpPath sIdeSrcPath sProgramPath sWorkspaceName sConnectionIni
9030>>>>>        
9030>>>>>        Set psWorkspaceWSFile to ""
9031>>>>>        If (sWorkspaceFile ="") ;            Function_Return wsWorkspaceFileNotFound
9034>>>>>        
9034>>>>>        // Append extension if not supplied...
9034>>>>>        If (Uppercase(Right(Trim(sWorkspaceFile),3)) <> ".WS") Begin
9036>>>>>            Move (sWorkspaceFile-".ws") to sWorkspaceFile
9037>>>>>        End
9037>>>>>>
9037>>>>>        
9037>>>>>        Get pbWorkspaceOpened to bChangingWorkspace // if we had an existing workspace. We are changing
9038>>>>>        
9038>>>>>        If (IsFilenameQualified(sWorkspaceFile) = False) Begin
9040>>>>>            // Set the properties to the paths of the Workspace
9040>>>>>            // Find the WS file (with program)...
9040>>>>>            Get GetApplicationPath to wApplicationStartPath
9041>>>>>            
9041>>>>>            Move sWorkspaceFile to sWsName
9042>>>>>            Move (wApplicationStartPath +"\" +sWorkspaceFile) to sWorkspaceFile
9043>>>>>        End
9043>>>>>>
9043>>>>>        Else Begin
9044>>>>>            Move (ExtractFileName(sWorkspaceFile)) to sWsName
9045>>>>>            
9045>>>>>            Move sWorkspaceFile to wApplicationStartPath
9046>>>>>            Move (PathRemoveFileSpecW(AddressOf(wApplicationStartPath))) to bRemoved
9047>>>>>        End
9047>>>>>>
9047>>>>>        
9047>>>>>        // Ensure that the file can be found...
9047>>>>>        //File_Exist (ToAnsi(sWorkspaceFile)) bExist        // [JVH] 8.3.8.0 Convert filename to Ansi
9047>>>>>        // [JVH] Turn off support for
9047>>>>>        // Ansi extended characters in workspace until we can
9047>>>>>        // resolve all open issues
9047>>>>>        Set psWorkspaceWSFile to sWorkspaceFile
9048>>>>>        File_Exist sWorkspaceFile bExist
9049>>>>>        If (bExist = False) ;            Function_Return wsWorkspaceFileNotFound
9052>>>>>        
9052>>>>>        Get psHome           to sHome
9053>>>>>        Get psAppSrcPath     to sAppSrcPath
9054>>>>>        Get psAppHtmlPath    to sAppHtmlPath
9055>>>>>        Get psBitmapPath     to sBitmapPath
9056>>>>>        Get psDataPath       to sDataPath
9057>>>>>        Get psDdSrcPath      to sDdSrcPath
9058>>>>>        Get psDescription    to sDescription
9059>>>>>        Get psFileList       to sFileList
9060>>>>>        Get psHelpPath       to sHelpPath
9061>>>>>        Get psIdeSrcPath     to sIdeSrcPath
9062>>>>>        Get psProgramPath    to sProgramPath
9063>>>>>        Get psSystemDfPath   to sSystemDfPath
9064>>>>>        Get psSystemMakePath to sSystemMakePath
9065>>>>>        Get psWorkspaceName  to sWorkspaceName
9066>>>>>        Get psConnectionIni to sConnectionIni
9067>>>>>        
9067>>>>>        Get_Current_Directory to sOldDirectory
9068>>>>>        // Note- this conversion is temporarily rolled back
9068>>>>>        //Move (SetCurrentDirectory(ToAnsi(CString(wApplicationStartPath)))) To bSuccess    // [JVH] 8.3.8.0 Convert AppStartPath to ANSI
9068>>>>>        Move (SetCurrentDirectory(CString(wApplicationStartPath))) to bSuccess
9069>>>>>        
9069>>>>>        Get Create U_cIniFile to hoIniFile
9070>>>>>        Set pbWideAPI of hoIniFile to False
9071>>>>>        Set psFilename of hoIniFile to sWorkspaceFile
9072>>>>>        
9072>>>>>        If (sHome ="") ;            Get ReadString of hoIniFile "Workspace" "Home" ""          to sHome
9075>>>>>        If (sAppSrcPath ="") ;            Get ReadString of hoIniFile "Workspace" "AppSrcPath" ""    to sAppSrcPath
9078>>>>>        If (sAppHtmlPath ="") ;            Get ReadString of hoIniFile "Workspace" "AppHtmlPath" ""   to sAppHtmlPath
9081>>>>>        If (sBitmapPath ="") ;            Get ReadString of hoIniFile "Workspace" "BitmapPath" ""    to sBitmapPath
9084>>>>>        If (sDataPath ="") ;            Get ReadString of hoIniFile "Workspace" "DataPath" ""      to sDataPath
9087>>>>>        If (sDdSrcPath ="") ;            Get ReadString of hoIniFile "Workspace" "DdSrcPath" ""     to sDdSrcPath
9090>>>>>        If (sDescription ="") ;            Get ReadString of hoIniFile "Workspace" "Description" ""   to sDescription
9093>>>>>        If (sFileList ="") ;            Get ReadString of hoIniFile "Workspace" "FileList" ""      to sFileList
9096>>>>>        If (sHelpPath ="") ;            Get ReadString of hoIniFile "Workspace" "HelpPath" ""      to sHelpPath
9099>>>>>        If (sIdeSrcPath ="") ;            Get ReadString of hoIniFile "Workspace" "IdeSrcPath" ""    to sIdeSrcPath
9102>>>>>        If (sProgramPath ="") ;            Get ReadString of hoIniFile "Workspace" "ProgramPath" ""   to sProgramPath
9105>>>>>        If (sWorkspaceName ="") ;            Move (Left(sWsName, Length(sWsName) -3))                   to sWorkspaceName
9108>>>>>        If (sConnectionIni ="") ;            Get ReadString of hoIniFile "Workspace" "ConnectionIni" ""   to sConnectionIni
9111>>>>>        
9111>>>>>        If (sSystemDfPath ="") ;            Set psSystemDfPath   to (VdfSystemDfPath(Self))
9114>>>>>        If (sSystemMakePath ="") ;            Set psSystemMakePath to (VdfSystemMakePath(Self))
9117>>>>>        
9117>>>>>        Set psHome          to (FullPathNames(Self, sHome))
9118>>>>>        
9118>>>>>        // Set CWD to Home...
9118>>>>>        Move (SetCurrentDirectory(sHome)) to bSuccess
9119>>>>>        Set psAppSrcPath    to (FullPathNames(Self, sAppSrcPath))
9120>>>>>        Set psAppHtmlPath   to (FullPathNames(Self, sAppHtmlPath))
9121>>>>>        Set psBitmapPath    to (FullPathNames(Self, sBitmapPath))
9122>>>>>        Set psDataPath      to (FullPathNames(Self, sDataPath))
9123>>>>>        Set psDdSrcPath     to (FullPathNames(Self, sDdSrcPath))
9124>>>>>        Set psFileList      to (FullPathNames(Self, sFileList))
9125>>>>>        Set psHelpPath      to (FullPathNames(Self, sHelpPath))
9126>>>>>        Set psIdeSrcPath    to (FullPathNames(Self, sIdeSrcPath))
9127>>>>>        Set psProgramPath   to (FullPathNames(Self, sProgramPath))
9128>>>>>        Set psConnectionIni to (FullPathNames(Self, sConnectionIni))
9129>>>>>        
9129>>>>>        Set psWorkspaceName to sWorkspaceName
9130>>>>>        Set psDescription   to sDescription
9131>>>>>        
9131>>>>>        Send Destroy of hoIniFile // destroy dynaically created inifile object
9132>>>>>        
9132>>>>>        // Restore CWD...
9132>>>>>        Move (SetCurrentDirectory(sOldDirectory)) to sOldDirectory
9133>>>>>        
9133>>>>>        // Check for error conditions:
9133>>>>>        // DataPath and FileList must be defined; the FileList entry must point to a valid FileList.cfg
9133>>>>>        If (psDataPath(Self) = "") ;            Function_Return wsDataPathEmpty
9136>>>>>        If (psFileList(Self) = "") ;            Function_Return wsFileListEmpty
9139>>>>>        
9139>>>>>        Move (DoesFileExist(psFileList(Self))) to bExist
9140>>>>>        If (bExist = False) ;            Function_Return wsFileListNotExist
9143>>>>>        
9143>>>>>        If bChangingWorkspace ;            Close DF_ALL // if there is a WS open, we must close all the files
9146>>>>>        
9146>>>>>        Send DoAssignPaths // set psDfPath
9147>>>>>        Send DoSetPaths    // Set the application's Attributes of Filelist_Name and Open_Path
9148>>>>>        Set pbWorkspaceOpened to True
9149>>>>>        
9149>>>>>        Function_Return wsWorkspaceOpened
9150>>>>>    End_Function
9151>>>>>    
9151>>>>>    Function OpenWorkspace String sWorkspace Returns Integer
9153>>>>>        // Look in the Workspaces.ini file for the name, then open it by path
9153>>>>>        
9153>>>>>        Handle hoSections hoIniFile
9153>>>>>        Integer iWorkspace eOpened
9153>>>>>        String sWorkspaceName sPath
9153>>>>>        String sVdfRootDir
9153>>>>>        
9153>>>>>        Get Create U_Array    to hoSections
9154>>>>>        Get Create U_cIniFile to hoIniFile
9155>>>>>        
9155>>>>>        Get_Profile_String "Defaults" "VdfRootDir" to sVdfRootDir
9158>>>>>        If (Right(sVdfRootDir,1) <>"\") ;            Move (sVdfRootDir +"\") to sVdfRootDir
9161>>>>>        
9161>>>>>        Set psFilename of hoIniFile to (sVdfRootDir +"bin\Workspaces.ini")
9162>>>>>        
9162>>>>>        Send ReadSections of hoIniFile hoSections
9163>>>>>        
9163>>>>>        For iWorkspace from 0 to (Item_Count(hoSections) -1)
9169>>>>>>
9169>>>>>            Get Value of hoSections iWorkspace to sWorkspaceName
9170>>>>>            If (Uppercase(sWorkspaceName) = Uppercase(sWorkspace)) Begin
9172>>>>>                Get ReadString of hoIniFile sWorkspace "Path" "" to sPath
9173>>>>>                If (Right(sPath,1) <>"\") ;                    Move (sPath +"\") to sPath
9176>>>>>                
9176>>>>>                Get OpenWorkspaceFile (sPath + sWorkspace) to eOpened
9177>>>>>                Send Destroy of hoSections
9178>>>>>                Send Destroy of hoIniFile
9179>>>>>                Function_Return eOpened
9180>>>>>            End
9180>>>>>>
9180>>>>>        Loop
9181>>>>>>
9181>>>>>        
9181>>>>>        Send Destroy of hoSections
9182>>>>>        Send Destroy of hoIniFile
9183>>>>>        Function_Return wsWorkspaceNotFound
9184>>>>>    End_Function
9185>>>>>    
9185>>>>>    Function IsRegistered String sWorkspace Returns Boolean
9187>>>>>        Boolean bRegistered
9187>>>>>        Handle hoIniFile
9187>>>>>        String sVdfRootDir
9187>>>>>        
9187>>>>>        Get Create U_cIniFile to hoIniFile
9188>>>>>        
9188>>>>>        Get_Profile_String "Defaults" "VdfRootDir" to sVdfRootDir
9191>>>>>        If (Right(sVdfRootDir,1) <>"\") ;            Move (sVdfRootDir +"\") to sVdfRootDir
9194>>>>>        Set psFilename of hoIniFile to (sVdfRootDir +"bin\Workspaces.ini")
9195>>>>>        Move (SectionExists(hoIniFile, sWorkspace)) to bRegistered
9196>>>>>        
9196>>>>>        Send Destroy of hoIniFile
9197>>>>>        
9197>>>>>        Function_Return bRegistered
9198>>>>>    End_Function
9199>>>>>    
9199>>>>>    Function VdfSystemDfPath Returns String
9201>>>>>        String sSystemDfPath
9201>>>>>        Get_Profile_String "Workspaces" "SystemDfPath" to sSystemDfPath
9204>>>>>        
9204>>>>>        Function_Return sSystemDfPath
9205>>>>>    End_Function
9206>>>>>    
9206>>>>>    Function VdfSystemMakePath Returns String
9208>>>>>        String sSystemMakePath
9208>>>>>        Get_Profile_String "Workspaces" "SystemMakePath" to sSystemMakePath
9211>>>>>        
9211>>>>>        Function_Return sSystemMakePath
9212>>>>>    End_Function
9213>>>>>    
9213>>>>>    Procedure DoAssignPaths
9215>>>>>        String sDataPath sBitmapPath sHelpPath sProgramPath sSystemDfPath
9215>>>>>        
9215>>>>>        Get psDataPath     to sDataPath
9216>>>>>        Get psBitmapPath   to sBitmapPath
9217>>>>>        Get psHelpPath     to sHelpPath
9218>>>>>        Get psProgramPath  to sProgramPath
9219>>>>>        Get psSystemDfPath to sSystemDfPath
9220>>>>>        
9220>>>>>        Set psDfPath to (sDataPath +';' + sBitmapPath +';' + sHelpPath +';' + sProgramPath +';' + sSystemDfPath)
9221>>>>>        
9221>>>>>    End_Procedure
9222>>>>>    
9222>>>>>    Procedure DoSetPaths
9224>>>>>        // [JVH] must convert paths to Ansi before setting these values
9224>>>>>        // Note- this conversion is temporarily rolled back
9224>>>>>        //Set_Attribute DF_FILELIST_NAME To (ToAnsi(psFileList(self)))
9224>>>>>        //Set_Attribute DF_OPEN_PATH     To (ToAnsi(psDfPath(self)))
9224>>>>>        Set_Attribute DF_FILELIST_NAME to (psFileList(Self))
9227>>>>>        Set_Attribute DF_OPEN_PATH     to (psDfPath(Self))
9230>>>>>    End_Procedure
9231>>>>>    
9231>>>>>    Procedure EnumerateWorkspaceData Handle hoCallBack Handle hmGeneric
9233>>>>>        String sPath
9233>>>>>        
9233>>>>>        If (psWorkspaceName(Self)="") ;            Send hmGeneric to hoCallBack C_$WorkspaceNotUsed
9236>>>>>        Else Begin
9237>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$WorkspaceDesc, psDescription(Self)))
9238>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$WorkspaceName, psWorkspaceName(Self)))
9239>>>>>            Send hmGeneric to hoCallBack ""
9240>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$Filelist, psFileList(Self)))
9241>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$DataPath, psDataPath(Self)))
9242>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$ProgramPath, psProgramPath(Self)))
9243>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$HelpPath, psHelpPath(Self)))
9244>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$BitmapsPath, psBitmapPath(Self)))
9245>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$SystemPaths, psSystemDfPath(Self)))
9246>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$FullDFPath, psDfPath(Self)))
9247>>>>>        End
9247>>>>>>
9247>>>>>    End_Procedure
9248>>>>>    
9248>>>>>    Function OpenWorkspaceErrorMessage Integer eErrorCode Returns String
9250>>>>>        // Decodes the enumerated integer returned by OpenWorkspace and
9250>>>>>        // returns a corresponding message string.
9250>>>>>        String sError
9250>>>>>        
9250>>>>>        Case Begin
9250>>>>>            Case (eErrorCode = wsWorkspaceOpened)
9252>>>>>                Move C_$NoErrors to sError
9253>>>>>                Case Break
9254>>>>>            Case (eErrorCode = wsWorkspaceNotFound)
9257>>>>>                Move C_$NoWsName to sError
9258>>>>>                Case Break
9259>>>>>            Case (eErrorCode = wsWorkspaceFileNotFound)
9262>>>>>                Move C_$NoWsFileFound to sError
9263>>>>>                Case Break
9264>>>>>            Case (eErrorCode = wsDataPathEmpty)
9267>>>>>                Move C_$NoWsDataPath to sError
9268>>>>>                Case Break
9269>>>>>            Case (eErrorCode = wsFileListEmpty)
9272>>>>>                Move C_$NoWsFileList to sError
9273>>>>>                Case Break
9274>>>>>            Case (eErrorCode = wsFileListNotExist)
9277>>>>>                Move C_$NoFileListCfg to sError
9278>>>>>                Case Break
9279>>>>>            Case Else
9279>>>>>                Move C_$UnknownError to sError
9280>>>>>                Case Break
9281>>>>>        Case End
9281>>>>>        
9281>>>>>        Function_Return (sError-".")
9282>>>>>    End_Function
9283>>>>>    
9283>>>>>    Function GetWorkspaceFileName String sWorkspace Returns String
9285>>>>>        // Returns the name of the physical Workspace file for the passed Workspace name.
9285>>>>>        String sVdfRootDir
9285>>>>>        Handle hoIniFile
9285>>>>>        String sPath
9285>>>>>        String sFileName
9285>>>>>        String sWorkspacePath
9285>>>>>        
9285>>>>>        Move "" to sFileName
9286>>>>>        
9286>>>>>        Get_Profile_String "Defaults" "VdfRootDir" to sVdfRootDir
9289>>>>>        If (Right(sVdfRootDir,1) <>"\") ;            Move (sVdfRootDir +"\") to sVdfRootDir
9292>>>>>        
9292>>>>>        Get Create U_cIniFile to hoIniFile
9293>>>>>        Set psFilename of hoIniFile to (sVdfRootDir +"bin\Workspaces.ini")
9294>>>>>        Get ReadString of hoIniFile sWorkspace "Path" "" to sWorkspacePath
9295>>>>>        If (sWorkspacePath <>"") Begin
9297>>>>>            If (Right(sWorkspacePath,1) <>"\") ;                Move (sWorkspacePath +"\") to sWorkspacePath
9300>>>>>            Move (sWorkspacePath +sWorkspace +".ws") to sFileName
9301>>>>>        End
9301>>>>>>
9301>>>>>        Send Destroy of hoIniFile
9302>>>>>        
9302>>>>>        Function_Return sFileName
9303>>>>>    End_Function
9304>>>>>    
9304>>>>>    Function CountOfPaths String sPaths Returns Integer
9306>>>>>        // Returns the number of paths defined in a string of paths
9306>>>>>        Integer iChar icChar icPath
9306>>>>>        
9306>>>>>        If (sPaths ="") ;            Function_Return 0
9309>>>>>        
9309>>>>>        Move (Length(sPaths) -1) to icChar
9310>>>>>        For iChar from 1 to icChar
9316>>>>>>
9316>>>>>            If (Mid(sPaths, 1, iChar) =";") ;                Increment icPath
9319>>>>>        Loop
9320>>>>>>
9320>>>>>        
9320>>>>>        Function_Return (icPath +1)
9321>>>>>    End_Function
9322>>>>>    
9322>>>>>    Function PathAtIndex String sPaths Integer iIndex Returns String
9324>>>>>        // Returns the path at the 1-based index of passed paths.
9324>>>>>        // If the path contains a trailing "\", it will be removed
9324>>>>>        Integer iChar icPath iPath iPos
9324>>>>>        String sPath
9324>>>>>        
9324>>>>>        Move (sPaths +";") to sPaths
9325>>>>>        For iPath from 1 to iIndex
9331>>>>>>
9331>>>>>            Move (Pos(";", sPaths)) to iPos
9332>>>>>            If iPos Begin
9334>>>>>                Move (Left(sPaths, iPos -1)) to sPath
9335>>>>>                If (Right(sPath,1) = '\') ;                    Move (Left(sPath, Length(sPath) -1)) to sPath
9338>>>>>                Move (Right(sPaths, Length(sPaths) -iPos)) to sPaths
9339>>>>>            End
9339>>>>>>
9339>>>>>            Else ;                Function_Return "" // index past number of paths
9341>>>>>        Loop
9342>>>>>>
9342>>>>>        
9342>>>>>        Function_Return sPath
9343>>>>>    End_Function
9344>>>>>    
9344>>>>>End_Class
9345>>>Use cCommandLine.pkg
Including file: cCommandLine.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCommandLine.pkg)
9345>>>>>Use VDFBase.pkg
9345>>>>>
9345>>>>>Class cCommandLine is a cObject
9346>>>>>    
9346>>>>>    Procedure Construct_Object
9348>>>>>        Forward Send Construct_Object
9350>>>>>        
9350>>>>>        Property Handle phoArgs // private object-handle of internal array of arguments
9351>>>>>    End_Procedure
9352>>>>>    
9352>>>>>    Procedure Private_DoCreateArgsArray
9354>>>>>        // creates the array for holding the arguments. Created upon demand only!
9354>>>>>        Integer icArg
9354>>>>>        String sArg
9354>>>>>        
9354>>>>>        Object oArgs is an Array
9356>>>>>            Delegate Set phoArgs to Self
9358>>>>>            Repeat
9358>>>>>>
9358>>>>>                CmdLine sArg
9359>>>>>>
9359>>>>>                If (sArg <> "") Begin
9361>>>>>                    Increment icArg
9362>>>>>                    Set Value  (icArg -1) to sArg
9363>>>>>                End
9363>>>>>>
9363>>>>>            Until (sArg = "")
9365>>>>>        End_Object
9366>>>>>    End_Procedure
9367>>>>>    
9367>>>>>    Function CountOfArgs Returns Integer
9369>>>>>        //Returns the number of arguments passed
9369>>>>>        If (phoArgs(Self) =0) ;            Send Private_DoCreateArgsArray
9372>>>>>        Function_Return (Item_Count(phoArgs(Self)))
9373>>>>>    End_Function
9374>>>>>    
9374>>>>>    Function Argument Integer iIndex Returns String
9376>>>>>        //Returns the one-based argument string
9376>>>>>        If (phoArgs(Self) =0) ;            Send Private_DoCreateArgsArray
9379>>>>>        Function_Return (Value(phoArgs(Self), iIndex -1))
9380>>>>>    End_Function
9381>>>>>    
9381>>>>>End_Class
9382>>>>>
9382>>>Use cRegistry.pkg
Including file: cRegistry.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cRegistry.pkg)
9382>>>>>Use Dll.pkg
9382>>>>>Use RegistryAPI.pkg
9382>>>>>Use tWinStructs.pkg
9382>>>>>
9382>>>>>Enum_List // Registry Data types
9382>>>>>    Define rdString
9382>>>>>    Define rdDword
9382>>>>>    Define rdBinary
9382>>>>>    Define rdUnknown
9382>>>>>End_Enum_List
9382>>>>>
9382>>>>>
9382>>>>>Class cRegistry is a cObject
9383>>>>>    Procedure Construct_Object
9385>>>>>        Forward Send Construct_Object
9387>>>>>        
9387>>>>>        Property Handle phRootKey HKEY_CURRENT_USER
9388>>>>>        Property UInteger pfAccessRights  KEY_ALL_ACCESS // what access level should be used to open a Key?
9389>>>>>        Property Handle phCurrentKey
9390>>>>>        Property Boolean pbLazyWrite True
9391>>>>>    End_Procedure
9392>>>>>    
9392>>>>>    Function CountOfSubkeys Returns Integer
9394>>>>>        Integer dwCountOfSubkeys
9394>>>>>        Integer iError
9394>>>>>        String sError
9394>>>>>        
9394>>>>>        Move 0 to dwCountOfSubkeys
9395>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, AddressOf(dwCountOfSubkeys), 0, 0, 0, 0, 0, 0, 0)) to iError
9396>>>>>        If iError Begin
9398>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9399>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9400>>>>>>
9400>>>>>        End
9400>>>>>>
9400>>>>>        Function_Return dwCountOfSubkeys
9401>>>>>    End_Function
9402>>>>>    
9402>>>>>    Function CountOfValues Returns Integer
9404>>>>>        Integer dwCountOfValues
9404>>>>>        Integer iError
9404>>>>>        String sError
9404>>>>>        
9404>>>>>        Move 0 to dwCountOfValues
9405>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, 0, 0, 0, AddressOf(dwCountOfValues), 0, 0, 0, 0)) to iError
9406>>>>>        If iError Begin
9408>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9409>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9410>>>>>>
9410>>>>>        End
9410>>>>>>
9410>>>>>        
9410>>>>>        Function_Return dwCountOfValues
9411>>>>>    End_Function
9412>>>>>    
9412>>>>>    Function LongestSubkeyLength Returns Integer
9414>>>>>        Integer dwLongestSubkeyLength
9414>>>>>        Integer iError
9414>>>>>        String sError
9414>>>>>        
9414>>>>>        Move 0 to dwLongestSubkeyLength
9415>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, 0, AddressOf(dwLongestSubkeyLength), 0, 0, 0, 0, 0, 0)) to iError
9416>>>>>        If iError Begin
9418>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9419>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9420>>>>>>
9420>>>>>        End
9420>>>>>>
9420>>>>>        
9420>>>>>        Function_Return dwLongestSubkeyLength
9421>>>>>    End_Function
9422>>>>>    
9422>>>>>    Function LongestValueLength Returns Integer
9424>>>>>        Integer dwLongestValueLength
9424>>>>>        Integer iError
9424>>>>>        String sError
9424>>>>>        
9424>>>>>        Move 0 to dwLongestValueLength
9425>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, 0, 0, 0, 0, AddressOf(dwLongestValueLength), 0, 0, 0)) to iError
9426>>>>>        If iError Begin
9428>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9429>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9430>>>>>>
9430>>>>>        End
9430>>>>>>
9430>>>>>        
9430>>>>>        Function_Return dwLongestValueLength
9431>>>>>    End_Function
9432>>>>>    
9432>>>>>    Function LongestDataLength Returns Integer
9434>>>>>        Integer dwLongestDataLength
9434>>>>>        Integer iError
9434>>>>>        String sError
9434>>>>>        
9434>>>>>        Move 0 to dwLongestDataLength
9435>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, 0, 0, 0, 0, 0, AddressOf(dwLongestDataLength), 0, 0)) to iError
9436>>>>>        If iError Begin
9438>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9439>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9440>>>>>>
9440>>>>>        End
9440>>>>>>
9440>>>>>        
9440>>>>>        Function_Return dwLongestDataLength
9441>>>>>    End_Function
9442>>>>>    
9442>>>>>    Function ValueType String sValueName Returns Integer
9444>>>>>        Integer dwType
9444>>>>>        Integer iError eType
9444>>>>>        String sError
9444>>>>>        
9444>>>>>        Move 0 to dwType
9445>>>>>        Move (RegQueryValueExW(phCurrentKey(Self), sValueName, 0, AddressOf(dwType), 0, 0)) to iError
9446>>>>>        If iError Begin
9448>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9449>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9450>>>>>>
9450>>>>>        End
9450>>>>>>
9450>>>>>        
9450>>>>>        If (dwType = REG_SZ) ;            Move rdString to eType
9453>>>>>        Else If (dwType = REG_DWORD)  ;            Move rdDword to eType
9457>>>>>        Else If (dwType = REG_BINARY) ;            Move rdBinary to eType
9461>>>>>        Else ;            Move rdUnknown to eType
9463>>>>>        
9463>>>>>        Function_Return eType
9464>>>>>    End_Function
9465>>>>>    
9465>>>>>    Function ValueLength String sValueName Returns Integer
9467>>>>>        Integer dwSize
9467>>>>>        Integer iError
9467>>>>>        String sError
9467>>>>>        
9467>>>>>        Move 0 to dwSize
9468>>>>>        Move (RegQueryValueExW(phCurrentKey(Self), sValueName, 0, 0, 0, AddressOf(dwSize))) to iError
9469>>>>>        If iError Begin
9471>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9472>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9473>>>>>>
9473>>>>>        End
9473>>>>>>
9473>>>>>        
9473>>>>>        Function_Return dwSize
9474>>>>>    End_Function
9475>>>>>    
9475>>>>>    Function CreateKey String sKeyName Returns Integer // return=error code
9477>>>>>        // Calling CreateKey for an existing Key, merely opens it without error.
9477>>>>>        Handle hKey hKeyOpened
9477>>>>>        Integer iError
9477>>>>>        String sError
9477>>>>>        
9477>>>>>        Move 0 to hKeyOpened // initialize it so we can get its address
9478>>>>>        
9478>>>>>        Get phRootKey to hKey
9479>>>>>        
9479>>>>>        Move (RegCreateKeyEx(hKey, sKeyName, 0, 0, REG_OPTION_NON_VOLATILE, pfAccessRights(Self), 0, AddressOf(hKeyOpened), 0)) to iError
9480>>>>>        If (iError =0) ;            Set phCurrentKey to hKeyOpened
9483>>>>>        Else Begin
9484>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9485>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9486>>>>>>
9486>>>>>        End
9486>>>>>>
9486>>>>>        Function_Return iError
9487>>>>>    End_Function
9488>>>>>    
9488>>>>>    Procedure CloseKey
9490>>>>>        Integer iError
9490>>>>>        Handle hKey
9490>>>>>        
9490>>>>>        Get phCurrentKey to hKey
9491>>>>>        
9491>>>>>        If (hKey <>0) Begin
9493>>>>>            If (pbLazyWrite(Self)) ;                Move (RegCloseKey(hKey)) to iError
9496>>>>>            Else ;                Move (RegFlushKey(hKey)) to iError
9498>>>>>            
9498>>>>>            Set phCurrentKey to 0
9499>>>>>        End
9499>>>>>>
9499>>>>>    End_Procedure
9500>>>>>    
9500>>>>>    Function OpenKey String sKeyName Returns Boolean
9502>>>>>        Handle hKey hKeyOpened
9502>>>>>        Integer iError
9502>>>>>        
9502>>>>>        Move 0 to hKeyOpened // initialize it so we can get its address
9503>>>>>        
9503>>>>>        Get phRootKey to hKey
9504>>>>>        Move (RegOpenKeyEx(hKey, sKeyName, 0, pfAccessRights(Self), AddressOf(hKeyOpened))) to iError
9505>>>>>        If (iError =0) ;            Set phCurrentKey to hKeyOpened
9508>>>>>        
9508>>>>>        Function_Return (iError=0)
9509>>>>>    End_Function
9510>>>>>    
9510>>>>>    Procedure WriteInteger WString sValue Integer iValueData
9512>>>>>        Handle hKey
9512>>>>>        Integer iError
9512>>>>>        Integer iData
9512>>>>>        String sError
9512>>>>>        
9512>>>>>        Move iValueData to iData
9513>>>>>        Get phCurrentKey to hKey
9514>>>>>        Move (RegSetValueExW(hKey, sValue, 0, REG_DWORD, AddressOf(iData), SizeOfType(Integer))) to iError
9515>>>>>        If iError Begin
9517>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9518>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9519>>>>>>
9519>>>>>        End
9519>>>>>>
9519>>>>>    End_Procedure
9520>>>>>    
9520>>>>>    // WriteDword is obsolete. Please use WriteInteger or WriteUInt, depending on whether you use a signed or unsigned value.
9520>>>>>    Procedure WriteDword String sValue Integer iValueData
9522>>>>>        Send WriteInteger of Self sValue iValueData
9523>>>>>    End_Procedure
9524>>>>>    
9524>>>>>    Procedure WriteUInt WString sValue UInteger uValueData
9526>>>>>        Handle hKey
9526>>>>>        Integer iError
9526>>>>>        UInteger uData
9526>>>>>        String sError
9526>>>>>        
9526>>>>>        Move uValueData to uData
9527>>>>>        Get phCurrentKey to hKey
9528>>>>>        Move (RegSetValueExW(hKey, sValue, 0, REG_DWORD, AddressOf(uData), SizeOfType(UInteger))) to iError
9529>>>>>        If iError Begin
9531>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9532>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9533>>>>>>
9533>>>>>        End
9533>>>>>>
9533>>>>>    End_Procedure
9534>>>>>
9534>>>>>    Procedure WriteString WString sValue WString wValueData
9536>>>>>        Handle hKey
9536>>>>>        Integer iError cbData
9536>>>>>        String sError
9536>>>>>        
9536>>>>>        If (wValueData = "") Begin
9538>>>>>            Move (Character(0)) to wValueData
9539>>>>>            Move 1 to cbData
9540>>>>>        End
9540>>>>>>
9540>>>>>        Else Begin
9541>>>>>            Move ((SizeOfWString(wValueData) +1)*2) to cbData
9542>>>>>        End
9542>>>>>>
9542>>>>>        Get phCurrentKey to hKey
9543>>>>>        Move (RegSetValueExW(hKey, sValue, 0, REG_SZ, AddressOf(wValueData), cbData)) to iError
9544>>>>>        If iError Begin
9546>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9547>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9548>>>>>>
9548>>>>>        End
9548>>>>>>
9548>>>>>    End_Procedure
9549>>>>>    
9549>>>>>    Procedure WriteBinary WString sValue Pointer pValueData Integer iDataLength
9551>>>>>        Handle hKey
9551>>>>>        Integer iError
9551>>>>>        String sError
9551>>>>>        
9551>>>>>        Get phCurrentKey to hKey
9552>>>>>        Move (RegSetValueExw(hKey, sValue, 0, REG_BINARY, pValueData, iDataLength)) to iError
9553>>>>>        If iError Begin
9555>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9556>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9557>>>>>>
9557>>>>>        End
9557>>>>>>
9557>>>>>    End_Procedure
9558>>>>>    
9558>>>>>    Function ReadInteger WString sValueName Returns Integer
9560>>>>>        Handle hKey
9560>>>>>        Integer iError
9560>>>>>        Integer iValueData iValueDataLength
9560>>>>>        String sError
9560>>>>>        
9560>>>>>        Move 0           to iValueData
9561>>>>>        Move (SizeOfType(Integer)) to iValueDataLength
9562>>>>>        
9562>>>>>        Get phCurrentKey to hKey
9563>>>>>        Move (RegQueryValueExW(hKey, sValueName, 0, 0, AddressOf(iValueData), AddressOf(iValueDataLength))) to iError
9564>>>>>        If iError Begin
9566>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9567>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9568>>>>>>
9568>>>>>        End
9568>>>>>>
9568>>>>>        
9568>>>>>        Function_Return iValueData
9569>>>>>    End_Function
9570>>>>>    
9570>>>>>    // ReadDword is obsolete. Please use ReadInteger or ReadUInt, depending on whether you expect a signed or unsigned value.
9570>>>>>    Function ReadDword String sValueName Returns Integer
9572>>>>>        Function_Return (ReadInteger(Self, sValueName))
9573>>>>>    End_Function
9574>>>>>
9574>>>>>    Function ReadUInt WString sValueName Returns UInteger
9576>>>>>        Handle hKey
9576>>>>>        Integer iError
9576>>>>>        UInteger uValueData uValueDataLength
9576>>>>>        String sError
9576>>>>>        
9576>>>>>        Move 0           to uValueData
9577>>>>>        Move (SizeOfType(UInteger)) to uValueDataLength
9578>>>>>        
9578>>>>>        Get phCurrentKey to hKey
9579>>>>>        Move (RegQueryValueExW(hKey, sValueName, 0, 0, AddressOf(uValueData), AddressOf(uValueDataLength))) to iError
9580>>>>>        If iError Begin
9582>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9583>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9584>>>>>>
9584>>>>>        End
9584>>>>>>
9584>>>>>        
9584>>>>>        Function_Return uValueData
9585>>>>>    End_Function
9586>>>>>    
9586>>>>>    Function ReadString String sValueName Returns String
9588>>>>>        Handle hKey
9588>>>>>        Integer iError
9588>>>>>        WString wValueData
9588>>>>>        DWord dwValueDataLength dwType
9588>>>>>        Pointer lpsValueData
9588>>>>>        String sError
9588>>>>>        
9588>>>>>        Move (Repeat(character(0), ValueLength(Self, sValueName))) to wValueData
9589>>>>>        Move (AddressOf(wValueData)) to lpsValueData
9590>>>>>        
9590>>>>>        Move (SizeOfWString(wValueData)) to dwValueDataLength
9591>>>>>        
9591>>>>>        Move REG_SZ to dwType
9592>>>>>        
9592>>>>>        Get phCurrentKey to hKey
9593>>>>>        Move (RegQueryValueExW(hKey, sValueName, 0, (AddressOf(dwType)), lpsValueData, AddressOf(dwValueDataLength))) to iError
9594>>>>>        If iError Begin
9596>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9597>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9598>>>>>>
9598>>>>>        End
9598>>>>>>
9598>>>>>        
9598>>>>>        Function_Return (CString(wValueData))
9599>>>>>    End_Function
9600>>>>>    
9600>>>>>    Function ReadBinary String sValueName Pointer pValueData Integer iDataLength Returns Boolean
9602>>>>>        Handle hKey
9602>>>>>        Integer iError
9602>>>>>        String sError
9602>>>>>        
9602>>>>>        Get phCurrentKey to hKey
9603>>>>>        Move (RegQueryValueExW(hKey, sValueName, 0, 0, pValueData, AddressOf(iDataLength))) to iError
9604>>>>>        If iError Begin
9606>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9607>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9608>>>>>>
9608>>>>>        End
9608>>>>>>
9608>>>>>        
9608>>>>>        Function_Return (iDataLength >0)
9609>>>>>    End_Function
9610>>>>>    
9610>>>>>    
9610>>>>>    // Private....
9610>>>>>    Function GetBaseKey Returns Handle
9612>>>>>        Handle hBaseKey
9612>>>>>        If (phCurrentKey(Self) = 0) ;            Get phRootKey to hBaseKey
9615>>>>>        Else ;            Get phCurrentKey to hBaseKey
9617>>>>>        
9617>>>>>        Function_Return hBaseKey
9618>>>>>    End_Function
9619>>>>>    
9619>>>>>    Function GetKey String sKeyName Returns Handle
9621>>>>>        Handle hKeyOpened
9621>>>>>        Integer iError
9621>>>>>        
9621>>>>>        Move 0 to hKeyOpened // initialize so we can get its address
9622>>>>>        
9622>>>>>        Move (RegOpenKeyEx(GetBaseKey(Self), sKeyName, 0, pfAccessRights(Self), AddressOf(hKeyOpened))) to iError
9623>>>>>        
9623>>>>>        If (iError =0) ;            Function_Return hKeyOpened
9626>>>>>        Else ;            Function_Return 0
9628>>>>>    End_Function
9629>>>>>    
9629>>>>>    // Public
9629>>>>>    Function KeyExists String sKeyName Returns Boolean
9631>>>>>        Handle hKey
9631>>>>>        Integer iVoid
9631>>>>>        
9631>>>>>        If (Trim(sKeyName) = "") ;            Function_Return False
9634>>>>>        
9634>>>>>        Get GetKey sKeyName to hKey
9635>>>>>        If hKey ;            Move (RegCloseKey(hKey)) to iVoid
9638>>>>>        Function_Return (hKey <>0)
9639>>>>>    End_Function
9640>>>>>    
9640>>>>>    Function ValueExists String sValueName Returns Boolean
9642>>>>>        // Determines whether a Value exists for the currently-opened Key.
9642>>>>>        Integer iError
9642>>>>>        DWord dwDataType
9642>>>>>        Move 0 to dwDataType // must initialize the variable to get its address
9643>>>>>        
9643>>>>>        Move (RegQueryValueExW(phCurrentKey(Self), sValueName, 0, AddressOf(dwDataType), 0, 0)) to iError
9644>>>>>        
9644>>>>>        Function_Return (iError=0)
9645>>>>>    End_Function
9646>>>>>    
9646>>>>>    Function DeleteKey String sKeyName Returns Boolean // Deleted successfully?
9648>>>>>        
9648>>>>>            If (Trim(sKeyName) = "") ;            Function_Return False
9651>>>>>        
9651>>>>>        Function_Return (ShDeleteKey(phRootKey(Self), sKeyName) =0)
9652>>>>>    End_Function
9653>>>>>    
9653>>>>>    Function DeleteValue String sValueName Returns Boolean // Deleted successfully?
9655>>>>>        Function_Return (RegDeleteValue(phCurrentKey(Self), sValueName) =0)
9656>>>>>    End_Function
9657>>>>>    
9657>>>>>    Function Subkeys Returns String[]
9659>>>>>        Integer iError
9659>>>>>        Integer icValue iLongestSubkey
9659>>>>>        Handle hKey
9659>>>>>        DWord dwSubkeyNameLength
9659>>>>>        String sSubkeyName sFileTime
9659>>>>>        Pointer lpsSubkeyName
9659>>>>>        String[] aResult
9660>>>>>        tWinFileTime fileTime
9660>>>>>        tWinFileTime fileTime
9660>>>>>
9660>>>>>        Get LongestSubkeyLength to iLongestSubkey
9661>>>>>        Move (Repeat(character(0), iLongestSubkey +1)) to sSubkeyName
9662>>>>>        Move (AddressOf(sSubkeyName)) to lpsSubkeyName
9663>>>>>
9663>>>>>        Get phCurrentKey to hKey
9664>>>>>        Repeat
9664>>>>>>
9664>>>>>            Move (iLongestSubkey +1) to dwSubkeyNameLength
9665>>>>>
9665>>>>>            Move (RegEnumKeyEx(hKey, icValue, lpsSubkeyName, AddressOf(dwSubkeyNameLength), 0, 0, 0, AddressOf(fileTime))) to iError
9666>>>>>            If (iError =0) Begin
9668>>>>>                Move (CString(sSubkeyName)) to aResult[icValue]
9669>>>>>                Increment icValue
9670>>>>>            End
9670>>>>>>
9670>>>>>        Until (iError)
9672>>>>>        Function_Return aResult
9673>>>>>    End_Function
9674>>>>>    
9674>>>>>    Function GetSubkeys Handle hoArray Returns Integer // count of Values
9676>>>>>        Integer iError
9676>>>>>        Integer icValue iLongestSubkey
9676>>>>>        Handle hKey
9676>>>>>        DWord dwSubkeyNameLength
9676>>>>>        WString wSubkeyName
9676>>>>>        tWinFileTime FileTime
9676>>>>>        tWinFileTime FileTime
9676>>>>>        
9676>>>>>        Get LongestSubkeyLength to iLongestSubkey
9677>>>>>        Move (Repeat(character(0), iLongestSubkey +1)) to wSubkeyName
9678>>>>>        
9678>>>>>        Get phCurrentKey to hKey
9679>>>>>        Repeat
9679>>>>>>
9679>>>>>            Move (iLongestSubkey +1) to dwSubkeyNameLength
9680>>>>>            
9680>>>>>            Move (RegEnumKeyExW(hKey, icValue, AddressOf(wSubkeyName), AddressOf(dwSubkeyNameLength), 0, 0, 0, AddressOf(FileTime))) to iError
9681>>>>>            If (iError =0) Begin
9683>>>>>                Increment icValue
9684>>>>>                Set Value of hoArray (Item_Count(hoArray)) to (CString(wSubkeyName))
9685>>>>>            End
9685>>>>>>
9685>>>>>        Until (iError)
9687>>>>>        Function_Return icValue
9688>>>>>        
9688>>>>>    End_Function
9689>>>>>    
9689>>>>>    Function GetValues Handle hoArray Returns Integer // count of Values
9691>>>>>        Integer iError
9691>>>>>        Integer icValue iLongestValue
9691>>>>>        Handle hKey
9691>>>>>        DWord dwValueNameLength
9691>>>>>        WString wValueName 
9691>>>>>        String sValueNameSize
9691>>>>>        Pointer lpsValueName
9691>>>>>        
9691>>>>>        Get LongestValueLength to iLongestValue
9692>>>>>        Move (Repeat(character(0), iLongestValue +1)) to wValueName
9693>>>>>        Move (AddressOf(wValueName)) to lpsValueName
9694>>>>>        
9694>>>>>        Get phCurrentKey to hKey
9695>>>>>        Repeat
9695>>>>>>
9695>>>>>            Move (iLongestValue +1) to dwValueNameLength
9696>>>>>            Move (RegEnumValueW(hKey, icValue, lpsValueName, AddressOf(dwValueNameLength), 0, 0, 0, 0)) to iError
9697>>>>>            If (iError =0) Begin
9699>>>>>                Increment icValue
9700>>>>>                Set Value of hoArray (Item_Count(hoArray)) to (CString(wValueName))
9701>>>>>            End
9701>>>>>>
9701>>>>>        Until (iError)
9703>>>>>        Function_Return icValue
9704>>>>>        
9704>>>>>    End_Function
9705>>>>>    
9705>>>>>End_Class
9706>>>Use cVersionInfo.pkg
Including file: cVersionInfo.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cVersionInfo.pkg)
9706>>>>>Use VdfBase.pkg
9706>>>>>Use DLL.pkg
9706>>>>>Use tWinStructs.pkg
9706>>>>>Use WinKern.pkg
9706>>>>>
9706>>>>>Define VS_FF_DEBUG         for |CI$00000001
9706>>>>>Define VS_FF_PRERELEASE    for |CI$00000002
9706>>>>>Define VS_FF_PATCHED       for |CI$00000004
9706>>>>>Define VS_FF_PRIVATEBUILD  for |CI$00000008
9706>>>>>Define VS_FF_INFOINFERRED  for |CI$00000010
9706>>>>>Define VS_FF_SPECIALBUILD  for |CI$00000020
9706>>>>>
9706>>>>>// Note: String pointer lpFilename must refer to WString type.
9706>>>>>External_Function GetFileVersionInfoSizeW "GetFileVersionInfoSizeW" version.dll ;    Pointer lpFilename ;    Pointer lpdwHandle ;    Returns DWord
9707>>>>>    
9707>>>>>// Wrapper Function GetFileVersionInfoSize (when using strings)
9707>>>>>Function GetFileVersionInfoSize Global ;    Pointer aFilename ;    Pointer lpdwHandle ;    Returns DWord
9709>>>>>    
9709>>>>>    DWord  dwResult
9709>>>>>    UWide  uwFileName
9709>>>>>    UWide  uwFileName
9709>>>>>
9709>>>>>    Send StringToWide aFilename (&uwFileName)
9710>>>>>    
9710>>>>>    Move (GetFileVersionInfoSizeW (uwFileName.lpUText, lpdwHandle)) to dwResult        
9711>>>>>    Function_Return dwResult
9712>>>>>End_Function
9713>>>>>
9713>>>>>// Note: String pointers should be referring to WString items.
9713>>>>>External_Function GetFileVersionInfoW "GetFileVersionInfoW" version.dll ;    Pointer lpFilename ;    DWord   dwHandle ;    DWord   dwLen ;    Pointer lpData ;    Returns Integer
9714>>>>>    
9714>>>>>// Wrapper Function GetFileVersionInfo (when using strings)
9714>>>>>Function GetFileVersionInfo Global ;    Pointer aFilename ;    DWord   dwHandle ;    DWord   dwLen ;    Pointer pData ;    Returns Integer
9716>>>>>    
9716>>>>>    Integer iResult
9716>>>>>    UWide   uwFileName
9716>>>>>    UWide   uwFileName
9716>>>>>
9716>>>>>    Send StringToWide aFilename (&uwFileName)
9717>>>>>    
9717>>>>>    Move (GetFileVersionInfoW (uwFileName.lpUText, dwHandle, dwLen, pData)) to iResult
9718>>>>>    Function_Return iResult
9719>>>>>End_Function    
9720>>>>>
9720>>>>>// Note: String pointers should be referring to WString items.
9720>>>>>External_Function VerQueryValueW "VerQueryValueW" version.dll ;    Pointer pBlock ;    Pointer pSubBlock ;    Pointer paBuffer ;    Pointer puLen ;    Returns Integer
9721>>>>>
9721>>>>>// Wrapper Function VerQueryValue (when using strings)
9721>>>>>Function VerQueryValue Global ;    Pointer pBlock ;    Pointer pSubBlock ;    Pointer paBuffer ;    Pointer puLen ;    Returns Integer
9723>>>>>    
9723>>>>>    Integer iResult
9723>>>>>    UWide   uwSubBlock
9723>>>>>    UWide   uwSubBlock
9723>>>>>    
9723>>>>>    Send StringToWide pSubBlock (&uwSubBlock)
9724>>>>>    
9724>>>>>    Move (VerQueryValueW (pBlock, uwSubBlock.lpUText, paBuffer, puLen)) to iResult        
9725>>>>>    
9725>>>>>    Function_Return iResult
9726>>>>>End_Function
9727>>>>>
9727>>>>>
9727>>>>>Class cVersionInfo is a cObject
9728>>>>>    Procedure Construct_Object
9730>>>>>        Forward Send Construct_Object
9732>>>>>        
9732>>>>>        
9732>>>>>        Property Integer piVersionMajor
9733>>>>>        Property Integer piVersionMinor
9734>>>>>        Property Integer piVersionRelease
9735>>>>>        Property Integer piVersionBuild
9736>>>>>        
9736>>>>>        Property Boolean pbIncluded
9737>>>>>        Property Boolean pbSpecialBuild
9738>>>>>        Property Boolean pbPrivateBuild
9739>>>>>        
9739>>>>>    End_Procedure
9740>>>>>    
9740>>>>>    Procedure DoCreate WString sFileName
9742>>>>>        DWord dwHandle
9742>>>>>        Integer iInfoSize iVerSize iSuccess iVersion iVoid iFlags
9742>>>>>        WString sData
9742>>>>>        tWinVs_FixedFileInfo VsFixedFileInfo
9742>>>>>        tWinVs_FixedFileInfo VsFixedFileInfo
9742>>>>>        WString sSubBlock
9742>>>>>        Pointer pVsFixedFileInfo
9742>>>>>        
9742>>>>>        Move 0 to pVsFixedFileInfo
9743>>>>>        Move 0 to dwHandle
9744>>>>>        Move 0 to iVerSize
9745>>>>>        
9745>>>>>        Move (GetFileVersionInfoSizeW(AddressOf(sFilename), AddressOf(dwHandle))) to iInfoSize
9746>>>>>        Set pbIncluded to (iInfoSize <>0)
9747>>>>>        
9747>>>>>        If (pbIncluded(Self)) Begin
9749>>>>>            Move (Repeat(Character(0), iInfoSize)) to sData
9750>>>>>            Move (GetFileVersionInfoW(AddressOf(sFilename), 0, iInfoSize, AddressOf(sData))) to iSuccess
9751>>>>>            
9751>>>>>            If (iSuccess <>0) Begin
9753>>>>>                Move "\" to sSubBlock
9754>>>>>                If (VerQueryValueW(AddressOf(sData), AddressOf(sSubBlock), AddressOf(pVsFixedFileInfo), AddressOf(iVerSize))) Begin
9756>>>>>                    Move (memcopy(AddressOf(VsFixedFileInfo), pVsFixedFileInfo, iVerSize)) to iVoid // copy the structure
9757>>>>>                    
9757>>>>>                    Move VsFixedFileInfo.dwFileVersionMS to iVersion
9758>>>>>                    Set piVersionMajor to (Hi(iVersion))
9759>>>>>                    Set piVersionMinor to (Low(iVersion))
9760>>>>>                    
9760>>>>>                    Move VsFixedFileInfo.dwFileVersionLS to iVersion
9761>>>>>                    Set piVersionRelease to (Hi(iVersion))
9762>>>>>                    Set piVersionBuild   to (Low(iVersion))
9763>>>>>                    
9763>>>>>                    Move VsFixedFileInfo.dwFileFlags to iFlags
9764>>>>>                    Set pbSpecialBuild    to (iFlags iand VS_FF_SPECIALBUILD)
9765>>>>>                    Set pbPrivateBuild    to (iFlags iand VS_FF_PRIVATEBUILD)
9766>>>>>                End
9766>>>>>>
9766>>>>>            End
9766>>>>>>
9766>>>>>            
9766>>>>>        End
9766>>>>>>
9766>>>>>    End_Procedure
9767>>>>>    
9767>>>>>End_Class
9768>>>Use GlobalFunctionsProcedures.pkg
9768>>>Use tWinStructs.pkg
9768>>>Use HelpSystemConstants.pkg // constants used by help system (not used by web)
9768>>>
9768>>>Register_Function phoWorkspace Returns Handle
9768>>>Register_Function phoCommandLine Returns Handle
9768>>>Register_Function pbEnterKeyAsTabKey Returns Boolean
9768>>>Register_Function GetApplicationName Returns String
9768>>>Register_Function GetApplicationFileName Returns String
9768>>>
9768>>>Register_Function Statusbar_State Returns Integer
9768>>>Register_Function Toolbar_State Returns Integer
9768>>>Register_Procedure Set Statusbar_State
9768>>>Register_Procedure Set Toolbar_State
9768>>>
9768>>>
9768>>>Class cApplication is a cObject
9769>>>    Procedure Construct_Object
9771>>>        Forward Send Construct_Object
9773>>>        
9773>>>        Move Self to ghoApplication
9774>>>        
9774>>>        Property Handle phoVersionInfo
9775>>>        Property Handle phoWorkspace
9776>>>        Property Handle phoCommandLine
9777>>>        Property Handle phoMainPanel       // main panel will set this for us.
9778>>>        Property String psHelpFile         // type of file is determined by peHelpType
9779>>>        Property Integer peHelpType htWinHelp // htNoHelp htHtmlHelp htWinHelp
9780>>>        
9780>>>        Property String psCompany "Data Access Worldwide"
9781>>>        Property String psProduct "DataFlex Applications"
9782>>>        Property String psVersion C_DFVersion
9783>>>        Property String psProgram (Module_Name(desktop))
9784>>>        
9784>>>        // set to '' to stop the auto open workspace behavior
9784>>>        Property String psAutoOpenWorkspace 'Config.ws'
9785>>>        
9785>>>        
9785>>>        Property Boolean pbPreserveEnvironment True
9786>>>        
9786>>>        Object oCommandLine is a cCommandLine
9788>>>            Delegate Set phoCommandLine to Self
9790>>>        End_Object
9791>>>        
9791>>>        Object oWorkspace is a cWorkspace
9793>>>            Delegate Set phoWorkspace to Self
9795>>>        End_Object
9796>>>        
9796>>>        Object oVersionInfo is a cVersionInfo
9798>>>            Delegate Set phoVersionInfo to Self
9800>>>            Send DoCreate (GetApplicationFileName(parent(Self)))
9801>>>        End_Object
9802>>>        
9802>>>        Set pbUseWindowsFont to True
9803>>>        
9803>>>    End_Procedure
9804>>>    
9804>>>    Procedure Destroy_Object
9806>>>        If (ghoApplication=Self) Begin
9808>>>            Move 0 to ghoApplication
9809>>>        End
9809>>>>
9809>>>        Forward Send Destroy_Object
9811>>>    End_Procedure
9812>>>    
9812>>>    // Determines if the Enter key should act like the Tab key (and send msg_Next)
9812>>>    // The use of a global variable, gbKEnterNext, makes this an application-wide property
9812>>>    Procedure Set pbEnterKeyAsTabKey Boolean bNext
9814>>>        Move bNext to gbKEnterNext
9815>>>    End_Procedure
9816>>>    
9816>>>    Function pbEnterKeyAsTabKey Returns Boolean
9818>>>        Function_Return gbKEnterNext
9819>>>    End_Function
9820>>>    
9820>>>    Procedure DoLoadEnvironment Handle hoContainer Boolean bProgram
9822>>>// not used with webapp
9822>>>        Handle hoRegistry hoCommandBars
9822>>>        Handle hMonitor
9822>>>        Integer iError cxy
9822>>>        tWinWindowPlacement WindowPlacement
9822>>>        tWinWindowPlacement WindowPlacement
9822>>>        String sKey
9822>>>        Boolean bSuccess
9822>>>        String sObjectName
9822>>>        
9822>>>        If (pbPreserveEnvironment(Self)) Begin
9824>>>            Get Create U_cRegistry to hoRegistry
9825>>>            Set pfAccessRights of hoRegistry to KEY_READ
9826>>>            
9826>>>            Get RegistryKeyString to sKey
9827>>>            
9827>>>            If (bProgram = False) Begin
9829>>>                Move (sKey +"\WINDOWS") to sKey
9830>>>                Get Object_Label of hoContainer to sObjectName  // just get the local name
9831>>>                Move (sKey +"\" +sObjectName) to sKey
9832>>>            End
9832>>>>
9832>>>            Else ;                Move (sKey + "\Preferences") to sKey
9834>>>            
9834>>>            Get OpenKey of hoRegistry sKey to bSuccess
9835>>>            
9835>>>            If bSuccess Begin
9837>>>                If (ValueExists(hoRegistry, 'Placement')) Begin
9839>>>                    Get ReadBinary of hoRegistry "Placement" (AddressOf(WindowPlacement)) (SizeOfType(tWinWindowPlacement)) to bSuccess
9840>>>                    If bSuccess Begin
9842>>>                        // Do not restore size if the window is not resizable
9842>>>                        If (Border_Style(hoContainer) <> BORDER_THICK) Begin
9844>>>                            // restore always works with outer size
9844>>>                            Get GuiWindowSize     of hoContainer to cxy
9845>>>                            Move (WindowPlacement.NormalPosition.left + Low(cxy)) to WindowPlacement.NormalPosition.right
9846>>>                            Move (WindowPlacement.NormalPosition.top + Hi(cxy)) to WindowPlacement.NormalPosition.bottom
9847>>>                        End
9847>>>>
9847>>>                        
9847>>>                        // Test that the main window's placement location will appear on some connected monitor. If none
9847>>>                        // of the main window is visible then set the location to 0,0 and adjust the size....
9847>>>                        If (bProgram) Begin
9849>>>                            // Test the top left point
9849>>>                            Move (MonitorFromPoint(WindowPlacement.NormalPosition.left, WindowPlacement.NormalPosition.top, MONITOR_DEFAULTONNULL)) to hMonitor
9850>>>                            
9850>>>                            If (hMonitor = 0) Begin
9852>>>                                // test the bottom right point
9852>>>                                Move (MonitorFromPoint(WindowPlacement.NormalPosition.right, WindowPlacement.NormalPosition.bottom, MONITOR_DEFAULTONNULL)) to hMonitor
9853>>>                            End
9853>>>>
9853>>>                            
9853>>>                            // hMonitor = 0 means that the window location is not in any current monitor (probably the monitor layout has changed)
9853>>>                            // or that the window begins and ends outside all monitors (even though it may span across some monitor). We will adjust!
9853>>>                            If (hMonitor = 0) Begin
9855>>>                                Send ResetWindowPos (&WindowPlacement.NormalPosition)
9856>>>                            End
9856>>>>
9856>>>                        End
9856>>>>
9856>>>                        
9856>>>                        // Set the placement
9856>>>                        Move (SetWindowPlacement(Window_Handle(hoContainer), AddressOf(WindowPlacement))) to bSuccess
9857>>>                    End
9857>>>>
9857>>>                End
9857>>>>
9857>>>                If bProgram Begin
9859>>>                    Get phoCommandBars of hoContainer to hoCommandBars
9860>>>                    If not hoCommandBars Begin
9862>>>                        If (ValueExists(hoRegistry, 'IsStatusBarVisible')) ;                            Set Statusbar_State of hoContainer to (ReadDword(hoRegistry, 'IsStatusBarVisible'))
9865>>>                        If (ValueExists(hoRegistry, 'IsToolBarVisible'))   ;                            Set Toolbar_State   of hoContainer to (ReadDword(hoRegistry, 'IsToolBarVisible'))
9868>>>                    End
9868>>>>
9868>>>                End
9868>>>>
9868>>>                
9868>>>                Send CloseKey of hoRegistry
9869>>>            End
9869>>>>
9869>>>            
9869>>>            Send Destroy of hoRegistry
9870>>>        End
9870>>>>
9870>>>    End_Procedure
9871>>>    
9871>>>    Procedure DoSaveEnvironment Handle hoContainer Boolean bProgram
9873>>>// not used with webapp
9873>>>        Handle hoRegistry
9873>>>        Integer iError
9873>>>        tWinWindowPlacement WindowPlacement
9873>>>        tWinWindowPlacement WindowPlacement
9873>>>        String sKey
9873>>>        Boolean bSuccess
9873>>>        Integer eShowCmd
9873>>>        String sObjectName
9873>>>        
9873>>>        If (pbPreserveEnvironment(Self)) Begin
9875>>>            Get Create U_cRegistry to hoRegistry
9876>>>            Get RegistryKeyString to sKey
9877>>>            
9877>>>            If (bProgram = False) Begin
9879>>>                Move (sKey +"\WINDOWS") to sKey
9880>>>                Get Object_Label of hoContainer to sObjectName  // just get the local name
9881>>>                Move (sKey +"\" +sObjectName) to sKey
9882>>>            End
9882>>>>
9882>>>            Else ;                Move (sKey +"\Preferences") to sKey
9884>>>            
9884>>>            Get CreateKey of hoRegistry sKey to iError
9885>>>            If (iError = 0) Begin
9887>>>                Move (SizeOfType(tWinWindowPlacement)) to WindowPlacement.length
9888>>>                Move (GetWindowPlacement(Window_Handle(hoContainer), AddressOf(WindowPlacement))) to bSuccess
9889>>>                If bSuccess Begin
9891>>>                    // if minimized, assume restored, as we don't want to restart minimized!
9891>>>                    If (WindowPlacement.showCmd = SW_SHOWMINIMIZED) Begin
9893>>>                        Move SW_SHOWNORMAL to WindowPlacement.showCmd
9894>>>                    End
9894>>>>
9894>>>                    Send WriteBinary of hoRegistry "Placement" (AddressOf(WindowPlacement)) WindowPlacement.length
9895>>>                End
9895>>>>
9895>>>                
9895>>>                If bProgram Begin
9897>>>                    Send WriteInteger of hoRegistry 'IsStatusBarVisible' (Statusbar_State(hoContainer))
9898>>>                    Send WriteInteger of hoRegistry 'IsToolBarVisible'   (Toolbar_State(hoContainer))
9899>>>                End
9899>>>>
9899>>>                
9899>>>                
9899>>>                Send CloseKey of hoRegistry
9900>>>            End
9900>>>>
9900>>>            
9900>>>            Send Destroy of hoRegistry
9901>>>        End
9901>>>>
9901>>>    End_Procedure
9902>>>    
9902>>>    
9902>>>    Procedure ResetWindowPos tWinRect ByRef WindowPos
9904>>>        Integer ixySize ixSize iySize
9904>>>        Integer ixOffset iyOffset
9904>>>        
9904>>>        // first calculate the offset needed to move onto the main monitor at 0,0
9904>>>        Move (0 - WindowPos.left) to ixOffset
9905>>>        Move (0 - WindowPos.top) to iyOffset
9906>>>        
9906>>>        Move 0 to WindowPos.left
9907>>>        Move 0 to WindowPos.top
9908>>>        
9908>>>        Move (WindowPos.right + ixOffset) to WindowPos.right
9909>>>        Move (WindowPos.bottom + iyOffset) to WindowPos.bottom
9910>>>        
9910>>>        // also make sure that the size of the window is <= the size of the main monitor
9910>>>        Move (GUIScreen_Size(1)) to ixySize    // parameter of 1 means return "available" screen size
9911>>>        Move (low(ixySize))      to ixSize
9912>>>        Move (hi(ixySize))       to iySize
9913>>>        
9913>>>        Move (ixSize min WindowPos.right) to WindowPos.right
9914>>>        Move (iySize min WindowPos.bottom) to WindowPos.bottom
9915>>>    End_Procedure
9916>>>    
9916>>>    
9916>>>    Function RegistryKeyString Returns String
9918>>>        String sCompany sProduct sVersion sProgram
9918>>>        
9918>>>        Get psCompany to sCompany
9919>>>        Get psProduct to sProduct
9920>>>        Get psVersion to sVersion
9921>>>        Get psProgram to sProgram
9922>>>        
9922>>>        If (sCompany = "") ;            Move "Data Access Worldwide" to sCompany
9925>>>        If (sProduct = "") ;            Move "DataFlex Applications" to sProduct
9928>>>        If (sVersion = "") ;            Move C_DFVersion             to sVersion
9931>>>        If (sProgram ="") ;            Move (Module_Name(desktop))   to sProgram
9934>>>        
9934>>>        Function_Return ("SOFTWARE\" +sCompany +"\" +sProduct +"\" +sVersion +"\" +sProgram)
9935>>>    End_Function
9936>>>    
9936>>>    Procedure WriteString String sSubKey String sValueName String sValueData
9938>>>        String sKey
9938>>>        Handle hoRegistry
9938>>>        Integer iError
9938>>>        
9938>>>        Get Create U_cRegistry to hoRegistry
9939>>>        Get RegistryKeyString to sKey
9940>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9943>>>        Get CreateKey of hoRegistry sKey to iError
9944>>>        If (iError = 0) Begin
9946>>>            Send WriteString of hoRegistry sValueName sValueData
9947>>>            Send CloseKey of hoRegistry
9948>>>        End
9948>>>>
9948>>>        
9948>>>        Send Destroy of hoRegistry
9949>>>    End_Procedure
9950>>>    
9950>>>    Procedure WriteInteger String sSubKey String sValueName Integer iValueData
9952>>>        String sKey
9952>>>        Handle hoRegistry
9952>>>        Integer iError
9952>>>        
9952>>>        Get Create U_cRegistry to hoRegistry
9953>>>        Get RegistryKeyString to sKey
9954>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9957>>>        Get CreateKey of hoRegistry sKey to iError
9958>>>        If (iError = 0) Begin
9960>>>            Send WriteInteger of hoRegistry sValueName iValueData
9961>>>            Send CloseKey of hoRegistry
9962>>>        End
9962>>>>
9962>>>        
9962>>>        Send Destroy of hoRegistry
9963>>>    End_Procedure
9964>>>    
9964>>>    // WriteDword is obsolete. Please use WriteInteger or WriteUInt, depending on whether you use a signed or unsigned value.
9964>>>    Procedure WriteDword String sSubKey String sValueName Integer iValueData
9966>>>        Send WriteInteger of Self sSubKey sValueName iValueData 
9967>>>    End_Procedure
9968>>>    
9968>>>    Procedure WriteUInteger String sSubKey String sValueName UInteger uValueData
9970>>>        String sKey
9970>>>        Handle hoRegistry
9970>>>        Integer iError
9970>>>        
9970>>>        Get Create U_cRegistry to hoRegistry
9971>>>        Get RegistryKeyString to sKey
9972>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9975>>>        Get CreateKey of hoRegistry sKey to iError
9976>>>        If (iError = 0) Begin
9978>>>            Send WriteUInt of hoRegistry sValueName uValueData
9979>>>            Send CloseKey of hoRegistry
9980>>>        End
9980>>>>
9980>>>        
9980>>>        Send Destroy of hoRegistry
9981>>>    End_Procedure
9982>>>
9982>>>    Procedure WriteBinary String sSubKey String sValueName Pointer pValueData Integer iDataLength
9984>>>        String sKey
9984>>>        Handle hoRegistry
9984>>>        Integer iError
9984>>>        
9984>>>        Get Create U_cRegistry to hoRegistry
9985>>>        Get RegistryKeyString to sKey
9986>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9989>>>        Get CreateKey of hoRegistry sKey to iError
9990>>>        If (iError = 0) Begin
9992>>>            Send WriteBinary of hoRegistry sValueName pValueData iDataLength
9993>>>            Send CloseKey of hoRegistry
9994>>>        End
9994>>>>
9994>>>        
9994>>>        Send Destroy of hoRegistry
9995>>>    End_Procedure
9996>>>    
9996>>>    // returns true if both sub-key and value exists.
9996>>>    Function ValueExists String sSubKey String sValueName Returns Boolean
9998>>>        String sKey
9998>>>        Handle hoRegistry
9998>>>        Boolean bOK
9998>>>        Get Create U_cRegistry to hoRegistry
9999>>>        Get RegistryKeyString to sKey
10000>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
10003>>>        Get OpenKey of hoRegistry sKey to bOk
10004>>>        If (bOK) Begin
10006>>>            Move (ValueExists(hoRegistry, sValueName)) to bOk
10007>>>            Send CloseKey of hoRegistry
10008>>>        End
10008>>>>
10008>>>        Send Destroy of hoRegistry
10009>>>        Function_Return bOk
10010>>>    End_Function
10011>>>    
10011>>>    Function ReadString String sSubKey String sValueName String sDefault Returns String
10013>>>        String sKey sData
10013>>>        Handle hoRegistry
10013>>>        Boolean bOK
10013>>>        
10013>>>        Move sDefault to sData
10014>>>        Get Create U_cRegistry to hoRegistry
10015>>>        Get RegistryKeyString to sKey
10016>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
10019>>>        Get OpenKey of hoRegistry sKey to bOk
10020>>>        If (bOK) Begin
10022>>>            If (ValueExists(hoRegistry, sValueName)) ;                Get ReadString of hoRegistry sValueName to sData
10025>>>            Send CloseKey of hoRegistry
10026>>>        End
10026>>>>
10026>>>        
10026>>>        Send Destroy of hoRegistry
10027>>>        Function_Return sData
10028>>>    End_Function
10029>>>    
10029>>>    Function ReadInteger String sSubKey String sValueName Integer iDefault Returns Integer
10031>>>        String sKey
10031>>>        Integer iData
10031>>>        Handle hoRegistry
10031>>>        Boolean bOK
10031>>>        
10031>>>        Move iDefault to iData
10032>>>        Get Create U_cRegistry to hoRegistry
10033>>>        Get RegistryKeyString to sKey
10034>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
10037>>>        Get OpenKey of hoRegistry sKey to bOk
10038>>>        If bOK Begin
10040>>>            If (ValueExists(hoRegistry, sValueName)) ;                Get ReadInteger of hoRegistry sValueName to iData
10043>>>            Send CloseKey of hoRegistry
10044>>>        End
10044>>>>
10044>>>        
10044>>>        Send Destroy of hoRegistry
10045>>>        Function_Return iData
10046>>>    End_Function
10047>>>
10047>>>    // ReadDword is obsolete. Please use ReadInteger or ReadUInt, depending on whether you expect a signed or unsigned value.
10047>>>    Function ReadDword String sSubKey String sValueName Integer iDefault Returns Integer
10049>>>        Function_Return (ReadInteger(Self, sSubKey, sValueName, iDefault))
10050>>>    End_Function
10051>>>    
10051>>>    Function ReadUInt String sSubKey String sValueName UInteger uDefault Returns UInteger
10053>>>        String sKey
10053>>>        UInteger uData
10053>>>        Handle hoRegistry
10053>>>        Boolean bOK
10053>>>        
10053>>>        Move uDefault to uData
10054>>>        Get Create U_cRegistry to hoRegistry
10055>>>        Get RegistryKeyString to sKey
10056>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
10059>>>        Get OpenKey of hoRegistry sKey to bOk
10060>>>        If bOK Begin
10062>>>            If (ValueExists(hoRegistry, sValueName)) ;                Get ReadUInt of hoRegistry sValueName to uData
10065>>>            Send CloseKey of hoRegistry
10066>>>        End
10066>>>>
10066>>>        
10066>>>        Send Destroy of hoRegistry
10067>>>        Function_Return uData
10068>>>    End_Function
10069>>>    
10069>>>    Function ReadBinary String sSubKey String sValueName Pointer pValueData Integer iDataLength Returns Boolean
10071>>>        String sKey
10071>>>        Handle hoRegistry
10071>>>        Boolean bOK bSuccess
10071>>>        
10071>>>        Get Create U_cRegistry to hoRegistry
10072>>>        Get RegistryKeyString to sKey
10073>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
10076>>>        Get OpenKey of hoRegistry sKey to bOk
10077>>>        If bOK Begin
10079>>>            Get ReadBinary of hoRegistry sValueName pValueData iDataLength to bSuccess
10080>>>            Send CloseKey of hoRegistry
10081>>>        End
10081>>>>
10081>>>        
10081>>>        Send Destroy of hoRegistry
10082>>>        Function_Return bSuccess
10083>>>    End_Function
10084>>>    
10084>>>    Procedure DoOpenWorkspace String sWorkspace
10086>>>        // Tries to open in this order:
10086>>>        // 1) if absolute path, use that; otherwise
10086>>>        // 2) try to open in the path of the EXE; otherwise
10086>>>        // 3) load it via the Registered list
10086>>>        
10086>>>        Integer eOpened
10086>>>        String sError sWSFile
10086>>>        Handle hoWorkspace
10086>>>        Boolean bChangingWorkspace
10086>>>        
10086>>>        // As soon as an open is attempted, the application's object psAutoOpenWorkspace property
10086>>>        // is cleared. This way any attempt to manually open a workspace during its construction,
10086>>>        // which includes OnCreate, will stop the object from attempting to automatically open the
10086>>>        // workspace. This was added to make psAutoOpenWorkspace compatible with older applications.
10086>>>        // Typically these application will open a workspace in OnCreate. If this happens we assume
10086>>>        // that there should be no automatic opening of a worskpace.
10086>>>        Set psAutoOpenWorkspace to ""
10087>>>        
10087>>>        Get phoWorkspace to hoWorkspace
10088>>>        
10088>>>        Get pbWorkspaceOpened of hoWorkspace to bChangingWorkspace
10089>>>        If (bChangingWorkspace and ghoConnection) Begin
10091>>>            Send AutoDisconnect
10092>>>        End
10092>>>>
10092>>>        
10092>>>        Get OpenWorkspaceFile of hoWorkspace sWorkspace to eOpened
10093>>>        If (eOpened = wsWorkspaceFileNotFound) Begin
10095>>>            If (IsRegistered(hoWorkspace, sWorkspace) =True) Begin
10097>>>                Get OpenWorkspace of hoWorkspace sWorkspace to eOpened
10098>>>            End
10098>>>>
10098>>>        End
10098>>>>
10098>>>        If (eOpened <> wsWorkspaceOpened) Begin
10100>>>            Get OpenWorkspaceErrorMessage of hoWorkspace eOpened to sError
10101>>>            Get psWorkspaceWSFile of hoWorkspace to sWSFile
10102>>>            Error DFERR_CAPPLICATION (SFormat(C_$TheProgramCannotRun, sWorkspace) + ":\n\n" + If(sWSFile<>"",sWSfile+"\n\n","") +sError)
10103>>>>
10103>>>            Abort
10104>>>>
10104>>>        End
10104>>>>
10104>>>        Else Begin
10105>>>            Send AutoConnect
10106>>>            Send OnWorkspaceOpened
10107>>>        End
10107>>>>
10107>>>    End_Procedure
10108>>>    
10108>>>    Procedure AutoConnect
10110>>>        If (ghoConnection) Begin
10112>>>            Send AutoConnect of ghoConnection
10113>>>        End
10113>>>>
10113>>>    End_Procedure
10114>>>    
10114>>>    Procedure AutoDisconnect
10116>>>        If (ghoConnection) Begin
10118>>>            Send AutoDisconnect of ghoConnection
10119>>>        End
10119>>>>
10119>>>    End_Procedure
10120>>>    
10120>>>    // send after a workspace is successfully opened and connected
10120>>>    Procedure OnWorkspaceOpened
10122>>>    End_Procedure
10123>>>    
10123>>>    Procedure OnCreate
10125>>>        // Event called when the Application object is ready to be used
10125>>>        // to open a Workspace, etc.
10125>>>    End_Procedure
10126>>>    
10126>>>    Procedure End_Construct_Object
10128>>>        String sName
10128>>>        Forward Send End_Construct_Object
10130>>>        Send OnCreate
10131>>>        // note that psAutoOpenWorkspace will get cleared of OnCreate attempts to open a workspace
10131>>>        Get psAutoOpenWorkspace to sName
10132>>>        If (sName<>"") Begin
10134>>>            Send DoOpenWorkspace sName
10135>>>        End
10135>>>>
10135>>>    End_Procedure
10136>>>    
10136>>>    Function GetApplicationFileName Returns String
10138>>>        // Returns the filename from Windows
10138>>>        Integer iNumChars
10138>>>        WString wFilename
10138>>>                
10138>>>        Move (Repeat(Character(0), 1024)) to wFilename
10139>>>        Move (GetModuleFileNameW(0, AddressOf(wFilename), 1024)) to iNumChars
10140>>>        
10140>>>        Function_Return (CString(wFilename))
10141>>>    End_Function
10142>>>    
10142>>>    Function GetApplicationPath Returns String
10144>>>        // Returns the path of the Application (no trailing "\")
10144>>>        WString wApplicationFileName 
10144>>>        String sPath
10144>>>        Boolean bRemoved
10144>>>        
10144>>>        Get GetApplicationFileName  to wApplicationFileName
10145>>>        Move (PathRemoveFileSpecW(AddressOf(wApplicationFileName))) to bRemoved
10146>>>        Move (CString(wApplicationFileName)) to sPath
10147>>>        
10147>>>        If (Right(sPath, 1) ="\") ;            Move (Left(sPath, Length(sPath) -1)) to sPath
10150>>>        Function_Return sPath
10151>>>    End_Function
10152>>>    
10152>>>    Function GetApplicationName Returns String
10154>>>        // Returns the name of the Application (without its Path or Extension)
10154>>>        String sApplicationFileName 
10154>>>        WString wApplicationName
10154>>>        Boolean bRemoved
10154>>>        Integer iVoid
10154>>>        
10154>>>        Get GetApplicationFileName to sApplicationFileName
10155>>>        Move (ExtractFileName(sApplicationFileName)) to wApplicationName
10156>>>        Move (PathRemoveExtensionW(AddressOf(wApplicationName))) to iVoid
10157>>>        Function_Return (CString(wApplicationName))
10158>>>    End_Function
10159>>>    
10159>>>    Function DFRootPath Returns String
10161>>>        String sRoot
10161>>>        Get_Profile_String "Defaults" "VDFRootDir" to sRoot
10164>>>        // Ensure it does not contain a trailing "\"
10164>>>        If (Right(sRoot,1) = "\") Begin
10166>>>            Move (Left(sRoot, Length(sRoot)-1)) to sRoot
10167>>>        End
10167>>>>
10167>>>        Function_Return sRoot
10168>>>    End_Function
10169>>>    
10169>>>    Function DFBinPath Returns String
10171>>>        String sRoot
10171>>>        Get DFRootPath to sRoot
10172>>>        If (sRoot<>"") Begin
10174>>>            Move (sRoot+"\bin") to sRoot
10175>>>        End
10175>>>>
10175>>>        Else Begin
10176>>>            // if the root from the registry (vdfrootdir) is empty, we will assume that the
10176>>>            // bin path must be the same as the application path.
10176>>>            Get GetApplicationPath to sRoot
10177>>>        End
10177>>>>
10177>>>        Function_Return sRoot
10178>>>    End_Function
10179>>>    
10179>>>    // this just directs to the desktop property. If you are using an application object you are
10179>>>    // encouraged to set this here.
10179>>>    Procedure Set pbUseWindowsFont Boolean bUseWindowsFont
10181>>>        Set pbUseWindowsFont of Desktop to bUseWindowsFont
10182>>>    End_Procedure
10183>>>    
10183>>>    Function pbUseWindowsFont Returns Boolean
10185>>>        Boolean bUseWindowsFont
10185>>>        Get pbUseWindowsFont of Desktop to bUseWindowsFont
10186>>>        Function_Return bUseWindowsFont
10187>>>    End_Function
10188>>>    
10188>>>    // this just directs to the desktop property. If you are using an application object you are
10188>>>    // encouraged to set this here.
10188>>>    Procedure Set pbLegacyDialogRatio Boolean bLegacy
10190>>>        Set pbLegacyDialogRatio of Desktop to bLegacy
10191>>>    End_Procedure
10192>>>    
10192>>>    Function pbLegacyDialogRatio Returns Boolean
10194>>>        Boolean bLegacy
10194>>>        Get pbLegacyDialogRatio of Desktop to bLegacy
10195>>>        Function_Return bLegacy
10196>>>    End_Function
10197>>>End_Class
10198>>>
10198>>>
10198>Use Dferror.pkg                 // Error handling class and object
Including file: Dferror.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dferror.pkg)
10198>>>Use cWindowsErrorHandler.pkg
Including file: cWindowsErrorHandler.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cWindowsErrorHandler.pkg)
10198>>>>>Use cBaseErrorHandler.pkg
Including file: cBaseErrorHandler.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cBaseErrorHandler.pkg)
10198>>>>>>>Use errornum.inc
10198>>>>>>>Use cTrappedErrors.pkg
Including file: cTrappedErrors.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cTrappedErrors.pkg)
10198>>>>>>>>>Define MAX_ERROR_NUMBER for 32766
10198>>>>>>>>>
10198>>>>>>>>>// This array stores the set of trapped errors as toggled ranges starting
10198>>>>>>>>>// with the errors that are trapped. The array should always contain 0 and
10198>>>>>>>>>// MAX_ERROR_NUMBER + 1, which are the limits. If an array contained the
10198>>>>>>>>>// following items...
10198>>>>>>>>>//
10198>>>>>>>>>// { 0, 5, 10, MAX_ERROR_NUMBER + 1 }.
10198>>>>>>>>>//
10198>>>>>>>>>// This would mean that errors 1 - 4 are trapped, 5 - 9 are ignored, and
10198>>>>>>>>>// 10 through the rest are trapped.
10198>>>>>>>>>//
10198>>>>>>>>>Class cTrappedErrors is an array
10199>>>>>>>>>    Procedure Construct_Object
10201>>>>>>>>>        Forward Send Construct_Object
10203>>>>>>>>>        
10203>>>>>>>>>        Send initArray
10204>>>>>>>>>    End_Procedure
10205>>>>>>>>>    
10205>>>>>>>>>    // Find largest error LE targetError. Assumes array is sorted.
10205>>>>>>>>>    Function findErrorLE Integer targetError Returns Integer
10207>>>>>>>>>        
10207>>>>>>>>>        Integer lowIndex hiIndex midIndex currError
10207>>>>>>>>>        
10207>>>>>>>>>        // If error is outside of boudary conditions, use
10207>>>>>>>>>        // value of closest valid error# instead.
10207>>>>>>>>>        If (targetError <= 0);            Move 1 to targetError
10210>>>>>>>>>        Else If (targetError >= MAX_ERROR_NUMBER) ;            Move ( MAX_ERROR_NUMBER - 1 ) to targetError
10214>>>>>>>>>        
10214>>>>>>>>>        Move 0 to lowIndex
10215>>>>>>>>>        Move ( item_count( Self ) - 1 ) to hiIndex
10216>>>>>>>>>        
10216>>>>>>>>>        // midIndex will contain the closest error LE to target upon exit.
10216>>>>>>>>>        Repeat
10216>>>>>>>>>>
10216>>>>>>>>>            
10216>>>>>>>>>            Move ( ( lowIndex + hiIndex ) / 2 ) to midIndex
10217>>>>>>>>>            Move ( integer_value( Self, midIndex ) )  to currError
10218>>>>>>>>>            
10218>>>>>>>>>            // midIndex is targetIndex if a match occurs
10218>>>>>>>>>            If (currError = targetError) ;                Function_Return midIndex
10221>>>>>>>>>            
10221>>>>>>>>>            // We are either on it or just below it.
10221>>>>>>>>>            If ( lowIndex = midIndex ) Begin
10223>>>>>>>>>                
10223>>>>>>>>>                If ( integer_value( Self, hiIndex ) le targetError ) ;                    Move hiIndex to midIndex
10226>>>>>>>>>                
10226>>>>>>>>>                Function_Return midIndex
10227>>>>>>>>>                
10227>>>>>>>>>            End
10227>>>>>>>>>>
10227>>>>>>>>>            
10227>>>>>>>>>            // No match, so move the boundaries.
10227>>>>>>>>>            If (currError > targetError) ;                Move ( midIndex - 1 ) to hiIndex
10230>>>>>>>>>            Else ;                Move midIndex to lowIndex
10232>>>>>>>>>            
10232>>>>>>>>>        Until lowIndex gt hiIndex
10234>>>>>>>>>        
10234>>>>>>>>>        Function_Return midIndex
10235>>>>>>>>>        
10235>>>>>>>>>    End_Function
10236>>>>>>>>>    
10236>>>>>>>>>    // Boundaries of the table are assumed to hold error limits.
10236>>>>>>>>>    Procedure initArray
10238>>>>>>>>>        Send delete_data
10239>>>>>>>>>        Set array_value  0 to 0
10240>>>>>>>>>        Set array_value  1 to ( MAX_ERROR_NUMBER + 1 )
10241>>>>>>>>>    End_Procedure
10242>>>>>>>>>    
10242>>>>>>>>>    // Return 1 if Error is trapped, 0 otherwise.
10242>>>>>>>>>    Function IsTrapped Integer Error# Returns Integer
10244>>>>>>>>>        Function_Return ( not ( mod( findErrorLE( Self, Error# ), 2 ) ) )
10245>>>>>>>>>    End_Function
10246>>>>>>>>>    
10246>>>>>>>>>    // Add the error as long as it doesn't violate boundary conditions.
10246>>>>>>>>>    // This routine leaves the array unsorted.
10246>>>>>>>>>    Procedure addError Integer Error#
10248>>>>>>>>>        If ( ( Error# lt MAX_ERROR_NUMBER ) and ( Error# gt 0 ) ) ;            Set array_value  ( item_count( Self ) ) to ( Integer( Error# ) )
10251>>>>>>>>>    End_Procedure
10252>>>>>>>>>    
10252>>>>>>>>>    // Set error to flagged state.
10252>>>>>>>>>    Procedure handleError Integer Error# Integer trapFlag
10254>>>>>>>>>        
10254>>>>>>>>>        Integer prevErrIndex prevErrFlag prevErrValue nextErrValue
10254>>>>>>>>>        
10254>>>>>>>>>        If ( ( Error# gt MAX_ERROR_NUMBER ) or ( Error# lt 0 ) ) Begin
10256>>>>>>>>>            Error DFERR_ERROR_NUMBER_OUT_OF_RANGE
10257>>>>>>>>>>
10257>>>>>>>>>            Procedure_Return
10258>>>>>>>>>        End
10258>>>>>>>>>>
10258>>>>>>>>>        
10258>>>>>>>>>        Get findErrorLE Error# to prevErrIndex
10259>>>>>>>>>        Get isTrapped   Error# to prevErrFlag
10260>>>>>>>>>        
10260>>>>>>>>>        // if eq, Error already handled in some range.
10260>>>>>>>>>        If (PrevErrFlag <> trapFlag) Begin
10262>>>>>>>>>            
10262>>>>>>>>>            // This is kind of complicated. If we are adding an error,
10262>>>>>>>>>            // we have to account for the error already being in the
10262>>>>>>>>>            // array as well as rejoining ranges that have been previously
10262>>>>>>>>>            // split and splitting ranges when adding a new flag.
10262>>>>>>>>>            
10262>>>>>>>>>            Get integer_value  ( prevErrIndex + 1 ) to nextErrValue
10263>>>>>>>>>            Get integer_value  prevErrIndex         to prevErrValue
10264>>>>>>>>>            
10264>>>>>>>>>            // Do this first so prevErrIndex stays valid.
10264>>>>>>>>>            If (nextErrValue = ( Error# + 1 )) ;                Send delete_item ( prevErrIndex + 1 )
10267>>>>>>>>>            Else ;                Send addError ( Error# + 1 )
10269>>>>>>>>>            
10269>>>>>>>>>            If ( prevErrValue < Error# ) ;                Send addError Error#
10272>>>>>>>>>            Else ;                Send delete_item prevErrIndex
10274>>>>>>>>>        End
10274>>>>>>>>>>
10274>>>>>>>>>        Send sort_items UPWARD_DIRECTION
10275>>>>>>>>>        
10275>>>>>>>>>    End_Procedure
10276>>>>>>>>>    
10276>>>>>>>>>    // Flag error as trappable
10276>>>>>>>>>    Procedure Trap_Error Integer Error#
10278>>>>>>>>>        Send handleError Error# 1
10279>>>>>>>>>    End_Procedure
10280>>>>>>>>>    
10280>>>>>>>>>    // Flag error as non-trappable
10280>>>>>>>>>    Procedure Ignore_Error Integer Error#
10282>>>>>>>>>        Send handleError Error# 0
10283>>>>>>>>>    End_Procedure
10284>>>>>>>>>    
10284>>>>>>>>>    // Flag all errors as trappable
10284>>>>>>>>>    Procedure Trap_All
10286>>>>>>>>>        Send initArray
10287>>>>>>>>>    End_Procedure
10288>>>>>>>>>    
10288>>>>>>>>>    // Flag all errors as non-trappable
10288>>>>>>>>>    Procedure Ignore_All
10290>>>>>>>>>        Send delete_data
10291>>>>>>>>>        Set array_value 0 to 0
10292>>>>>>>>>        Set array_value 1 to 1
10293>>>>>>>>>        Set array_value 2 to ( MAX_ERROR_NUMBER + 1 )
10294>>>>>>>>>    End_Procedure
10295>>>>>>>>>End_Class
10296>>>>>>>>>
10296>>>>>>>Use LanguageText.pkg
10296>>>>>>>Use VdfBase.pkg
10296>>>>>>>
10296>>>>>>>// used by error handler and UserError to pull a caption out of the error string
10296>>>>>>>Define C_ErrorCaption for "*CAPTION*="
10296>>>>>>>
10296>>>>>>>Class cBaseErrorHandler is a cObject
10297>>>>>>>    Procedure Construct_Object
10299>>>>>>>        Forward Send Construct_Object
10301>>>>>>>        
10301>>>>>>>        Set delegation_mode to no_delegate_or_error
10302>>>>>>>        
10302>>>>>>>        // This is the caption that appears for unhandled errors dialog box
10302>>>>>>>        Property String psUnhandledErrorCaption C_$UnhandledProgramError
10303>>>>>>>        
10303>>>>>>>        // This is the caption that appears for standard user errors
10303>>>>>>>        Property String psUserErrorCaption C_$Error
10304>>>>>>>        
10304>>>>>>>        // If set false, this makes the error handler work the old way which
10304>>>>>>>        // does not use the new unhandled dialog. Only exists for compatibility reasons
10304>>>>>>>        Property Boolean pbUnhandledErrorSupport       True
10305>>>>>>>        
10305>>>>>>>        Property Boolean pbErrorProcessingState False  // Flag which is sent when error is being processed. This stops error recursion.
10306>>>>>>>        
10306>>>>>>>        Property Integer piCurrentErrorNumber     0
10307>>>>>>>        Property Integer piCurrentErrorLine        0
10308>>>>>>>        
10308>>>>>>>        Property Integer[] paUserErrors       // Collection of sorted error numbers considered to be user errors. (note, this array must remain sorted!)
10309>>>>>>>        
10309>>>>>>>        
10309>>>>>>>        Object oTrappedErrors is a cTrappedErrors
10311>>>>>>>        End_Object
10312>>>>>>>        
10312>>>>>>>        Send DefineStandardUserErrors
10313>>>>>>>        
10313>>>>>>>        Move Self to Error_Object_Id
10314>>>>>>>        Move Self to ghoErrorHandler
10315>>>>>>>    End_Procedure
10316>>>>>>>    
10316>>>>>>>    Procedure DefineStandardUserErrors
10318>>>>>>>        Integer[] aUserErrors
10319>>>>>>>        
10319>>>>>>>        // define the standard user error numbers....
10319>>>>>>>        Move 0                                     to aUserErrors[0]
10320>>>>>>>        Move DFERR_NUMBER_TOO_LARGE                to aUserErrors[1]
10321>>>>>>>        Move DFERR_WINDOW_RANGE                    to aUserErrors[2]
10322>>>>>>>        Move DFERR_ENTRY_REQUIRED                  to aUserErrors[3]
10323>>>>>>>        Move DFERR_ENTER_A_NUMBER                  to aUserErrors[4]
10324>>>>>>>        Move DFERR_BAD_ENTRY                       to aUserErrors[5]
10325>>>>>>>        Move DFERR_ENTER_VALID_DATE                to aUserErrors[6]
10326>>>>>>>        Move DFERR_NUMERIC_RANGE                   to aUserErrors[7]
10327>>>>>>>        Move DFERR_DUPLICATE_REC                   to aUserErrors[8]
10328>>>>>>>        Move DFERR_TEXT_FIELD_TOO_LONG             to aUserErrors[9]
10329>>>>>>>        Move DFERR_FIND_PRIOR_BEG_OF_FILE          to aUserErrors[10]
10330>>>>>>>        Move DFERR_FIND_PAST_END_OF_FILE           to aUserErrors[11]
10331>>>>>>>        Move DFERR_NO_REC_TO_DELETE                to aUserErrors[12]
10332>>>>>>>        Move DFERR_FIELD_NOT_INDEXED               to aUserErrors[13]
10333>>>>>>>        Move DFERR_REC_NUMBER_RANGE                to aUserErrors[14]
10334>>>>>>>        Move DFERR_ENTER_VALID_REC_ID              to aUserErrors[15]
10335>>>>>>>        Move DFERR_OPERATOR_ERROR                  to aUserErrors[16]
10336>>>>>>>        Move DFERR_CANT_CHANGE_KEY_FIELD           to aUserErrors[17]
10337>>>>>>>        Move DFERR_NO_DELETE_RELATED_RECORDS_EXIST to aUserErrors[18]
10338>>>>>>>        Move DFERR_OPERATION_NOT_ALLOWED           to aUserErrors[19]
10339>>>>>>>        Move DFERR_OPERATOR                        to aUserErrors[20]
10340>>>>>>>        Move DFERR_XML_HTTP                        to aUserErrors[21]
10341>>>>>>>        Move DFERR_CLIENT_SOAP_TRANSFER            to aUserErrors[22]
10342>>>>>>>        Move DFERR_CLIENT_SOAP_FAULT               to aUserErrors[23]
10343>>>>>>>        Move DFERR_TEXT_TOO_LARGE_FOR_FIELD        to aUserErrors[24]
10344>>>>>>>        Move DFERR_WINPRINT                        to aUserErrors[25]
10345>>>>>>>        Move DFERR_CRYSTAL_REPORT                  to aUserErrors[26]
10346>>>>>>>        Move DFERR_MAPI                            to aUserErrors[27]
10347>>>>>>>        Move DFERR_FILE_ACCESS_VIOLATION           to aUserErrors[28]
10348>>>>>>>        Move DFERR_DATAFLEX_REPORTS                to aUserErrors[29]
10349>>>>>>>        Move DFERR_CANT_REFIND_RECORD              to aUserErrors[30]
10350>>>>>>>        // WebApp Errors
10350>>>>>>>        Move DFERR_WEBAPP_ACCESS_DENIED            to aUserErrors[31]
10351>>>>>>>        // This is defined as DD_DEFAULT_ERROR_NUMBER in DataDict.pkg and is the default Field_error number of DDs.
10351>>>>>>>        Move 999                                   to aUserErrors[32]
10352>>>>>>>        // This is session timeout (we keep the old number 950 for backwards comatibility reasons)
10352>>>>>>>        Move DFERR_WEBAPP_SESSION_TIMEOUT          to aUserErrors[33]
10353>>>>>>>        // This is session timeout (we keep the old number 951 for backwards comatibility reasons)
10353>>>>>>>        Move DFERR_WEBAPP_BAD_SESSION_KEY          to aUserErrors[34]
10354>>>>>>>        Move DFERR_WEBAPP_INVALID_URL              to aUserErrors[35]
10355>>>>>>>        Move DFERR_WEBAPP_INVALID_URL_REC          to aUserErrors[36]
10356>>>>>>>        Move (SortArray(aUserErrors)) to aUserErrors
10357>>>>>>>        Set paUserErrors to aUserErrors
10358>>>>>>>    End_Procedure
10359>>>>>>>    
10359>>>>>>>    Procedure HandleError Integer iErrNum Integer iErrLine String sErrText
10361>>>>>>>        //  Stub method implemented by subclass
10361>>>>>>>    End_Procedure
10362>>>>>>>    
10362>>>>>>>    // Called by the runtime when an error occurs. Initiates the main error handling. Skips errors
10362>>>>>>>    // that are ignored and makes sure to prevent recursion by checking the error processing state.
10362>>>>>>>    Procedure Error_Report Integer iErrNum Integer iErrLine String sErrText
10364>>>>>>>        If (pbErrorProcessingState(Self)) ;            Procedure_Return
10367>>>>>>>            
10367>>>>>>>        If (not(IsTrapped(Self, iErrNum))) ;            Procedure_Return
10370>>>>>>>        
10370>>>>>>>        Set pbErrorProcessingState to True
10371>>>>>>>        Set piCurrentErrorNumber to iErrNum
10372>>>>>>>        Set piCurrentErrorLine to iErrLine
10373>>>>>>>        
10373>>>>>>>        Send HandleError iErrNum iErrLine sErrText
10374>>>>>>>        
10374>>>>>>>        Set piCurrentErrorNumber to 0
10375>>>>>>>        Set piCurrentErrorLine to 0
10376>>>>>>>        Move 0 to ghoErrorSource
10377>>>>>>>        Set pbErrorProcessingState to False
10378>>>>>>>    End_Procedure
10379>>>>>>>    
10379>>>>>>>    
10379>>>>>>>
10379>>>>>>>    
10379>>>>>>>    // Returns true if this is a user error (i.e. "find past end of file")
10379>>>>>>>    Function IsUserError Integer iError Returns Boolean
10381>>>>>>>        Integer[] aUserErrors
10382>>>>>>>        Get paUserErrors to aUserErrors
10383>>>>>>>        Function_Return (BinarySearchArray(iError, aUserErrors) <> -1)
10384>>>>>>>    End_Function
10385>>>>>>>    
10385>>>>>>>        // returns true if this is an unhandled error (i.e., not a user error
10385>>>>>>>    Function IsUnhandledError Integer iError Returns Boolean
10387>>>>>>>        Integer[] UserErrors
10388>>>>>>>        Get paUserErrors to UserErrors
10389>>>>>>>        Function_Return (SearchArray(iError,UserErrors)=-1)
10390>>>>>>>    End_Function
10391>>>>>>>    
10391>>>>>>>    Procedure AddUserError Integer iError
10393>>>>>>>        // adds a user error to the collection of defined 'user errors'
10393>>>>>>>        Integer[] aUserErrors
10394>>>>>>>        Get paUserErrors to aUserErrors
10395>>>>>>>        
10395>>>>>>>        If (BinarySearchArray(iError, aUserErrors) = -1) Begin
10397>>>>>>>            Move (InsertInArray(aUserErrors, BinarySearchInsertPos(), iError)) to aUserErrors         // Keep the array sorted. Makes searching fast, adding slower.
10398>>>>>>>            Set paUserErrors to aUserErrors
10399>>>>>>>        End
10399>>>>>>>>
10399>>>>>>>    End_Procedure
10400>>>>>>>    
10400>>>>>>>    Procedure RemoveUserError Integer iError
10402>>>>>>>        // Removes the passed error number from the set of user errors.
10402>>>>>>>        Integer iIndex
10402>>>>>>>        Integer[] aUserErrors
10403>>>>>>>        
10403>>>>>>>        Get paUserErrors to aUserErrors
10404>>>>>>>        Move (BinarySearchArray(iError, aUserErrors)) to iIndex
10405>>>>>>>        
10405>>>>>>>        If (iIndex <> -1) Begin
10407>>>>>>>            Move (RemoveFromArray(aUserErrors, iIndex)) to aUserErrors
10408>>>>>>>            Set paUserErrors to aUserErrors
10409>>>>>>>        End
10409>>>>>>>>
10409>>>>>>>    End_Procedure
10410>>>>>>>    
10410>>>>>>>    Procedure RemoveAllUserErrors
10412>>>>>>>        // Clears set of User Errors
10412>>>>>>>        Set paUserErrors to (ResizeArray(paUserErrors(Self), 0))
10413>>>>>>>    End_Procedure
10414>>>>>>>    
10414>>>>>>>    // return true if an error number is critical
10414>>>>>>>    Function IsCritical Integer iError Returns Boolean
10416>>>>>>>        Function_Return (".3.10.18.19.20.21.22.43.70.72.74.75.78.80.97.";            contains ("."+String(iError)+"."))
10417>>>>>>>    End_Function
10418>>>>>>>    
10418>>>>>>>    Procedure TrapError Integer iError
10420>>>>>>>        Send Trap_Error of oTrappedErrors iError
10421>>>>>>>    End_Procedure
10422>>>>>>>    
10422>>>>>>>    Procedure IgnoreError Integer iError
10424>>>>>>>        Send Ignore_Error of oTrappedErrors iError
10425>>>>>>>    End_Procedure
10426>>>>>>>    
10426>>>>>>>    Procedure IgnoreAllErrors
10428>>>>>>>        Send Ignore_All of oTrappedErrors
10429>>>>>>>    End_Procedure
10430>>>>>>>    
10430>>>>>>>    Procedure TrapAllErrors
10432>>>>>>>        Send Trap_All of oTrappedErrors
10433>>>>>>>    End_Procedure
10434>>>>>>>    
10434>>>>>>>    Function IsTrapped Integer iError  Returns Boolean
10436>>>>>>>        Function_Return (IsTrapped(oTrappedErrors,iError))
10437>>>>>>>    End_Function
10438>>>>>>>    
10438>>>>>>>    
10438>>>>>>>
10438>>>>>>>    
10438>>>>>>>    // Used to fetch the default error description.
10438>>>>>>>    //
10438>>>>>>>    // iError   - Error number
10438>>>>>>>    // sMessage - Additional error message
10438>>>>>>>    // Returns  - Complete error message
10438>>>>>>>    Function ErrorDescription Integer iError String sMessage Returns String
10440>>>>>>>        String sDescription
10440>>>>>>>        Boolean bAvailable
10440>>>>>>>        
10440>>>>>>>        //  Fetch system error text
10440>>>>>>>        Get Error_Text of Desktop iError to sDescription
10441>>>>>>>        Get Error_Text_Available of Desktop iError to bAvailable
10442>>>>>>>        
10442>>>>>>>        //  Trim both messages
10442>>>>>>>        Move (Trim(sDescription)) to sDescription
10443>>>>>>>        Move (Trim(sMessage)) to sMessage
10444>>>>>>>        
10444>>>>>>>        //  Append message if needed
10444>>>>>>>        If (sMessage <> "") Begin
10446>>>>>>>            If (sDescription <> "" and bAvailable) Begin
10448>>>>>>>                Move (sDescription + " " + sMessage) to sDescription
10449>>>>>>>            End
10449>>>>>>>>
10449>>>>>>>            Else Begin
10450>>>>>>>                Move sMessage to sDescription
10451>>>>>>>            End
10451>>>>>>>>
10451>>>>>>>        End
10451>>>>>>>>
10451>>>>>>>        
10451>>>>>>>        Function_Return sDescription
10452>>>>>>>    End_Function
10453>>>>>>>    
10453>>>>>>>    // Legacy names here for backwards compatibility
10453>>>>>>>    Function Error_Description Integer iError String sMessage Returns String
10455>>>>>>>        Function_Return (ErrorDescription(Self, iError, sMessage))
10456>>>>>>>    End_Function
10457>>>>>>>    
10457>>>>>>>    
10457>>>>>>>    Function Error_processing_state Returns Boolean
10459>>>>>>>        Function_Return (pbErrorProcessingState(Self))
10460>>>>>>>    End_Function
10461>>>>>>>    
10461>>>>>>>    Function Current_Error_Number Returns Integer
10463>>>>>>>        Function_Return (piCurrentErrorNumber(Self))
10464>>>>>>>    End_Function
10465>>>>>>>    
10465>>>>>>>    Procedure Set Current_Error_Number Integer iErr
10467>>>>>>>        Set piCurrentErrorNumber to iErr
10468>>>>>>>    End_Procedure
10469>>>>>>>    
10469>>>>>>>    Function Error_Line_Number Returns Integer
10471>>>>>>>        Function_Return (piCurrentErrorLine(Self))
10472>>>>>>>    End_Function
10473>>>>>>>    
10473>>>>>>>    Procedure Set Error_Line_Number Integer iLine
10475>>>>>>>        Set piCurrentErrorLine to iLine
10476>>>>>>>    End_Procedure
10477>>>>>>>    
10477>>>>>>>    Procedure Trap_Error Integer iError
10479>>>>>>>        Send TrapError iError
10480>>>>>>>    End_Procedure
10481>>>>>>>    
10481>>>>>>>    Procedure Ignore_Error Integer iError
10483>>>>>>>        Send IgnoreError iError
10484>>>>>>>    End_Procedure
10485>>>>>>>    
10485>>>>>>>    Procedure Trap_All
10487>>>>>>>        Send TrapAllErrors
10488>>>>>>>    End_Procedure
10489>>>>>>>    
10489>>>>>>>    Procedure Ignore_All
10491>>>>>>>        Send IgnoreAllErrors
10492>>>>>>>    End_Procedure
10493>>>>>>>    
10493>>>>>>>    Function Is_Critical Integer iError Returns Boolean
10495>>>>>>>        Function_Return (IsCritical(Self, iError))
10496>>>>>>>    End_Function
10497>>>>>>>End_Class
10498>>>>>>>
10498>>>>>>>Procedure UserError Global String sMessage String sCaption
10500>>>>>>>    String sCapt
10500>>>>>>>    If (Error_Object_Id=0) Begin
10502>>>>>>>        Error DFERR_PROGRAM "No Error Handler"
10503>>>>>>>>
10503>>>>>>>        Procedure_Return
10504>>>>>>>    End
10504>>>>>>>>
10504>>>>>>>    
10504>>>>>>>    // Accept not passing a caption in which case the error handler's
10504>>>>>>>    // default caption. It had been the intention to require a caption ("" if none)
10504>>>>>>>    // but having no caption kind of worked where the caption would be "0". Since it
10504>>>>>>>    // kind of worked, I don't want to remove this which might generate runtime errors.
10504>>>>>>>    If (num_arguments>1) Begin
10506>>>>>>>        Move sCaption to sCapt
10507>>>>>>>    End
10507>>>>>>>>
10507>>>>>>>    
10507>>>>>>>    Error DFERR_OPERATOR (sMessage + If(sCapt<>"",C_ErrorCaption + sCapt,""))
10508>>>>>>>>
10508>>>>>>>End_Procedure
10509>>>>>Use Windows.pkg
10509>>>>>Use msgbox.pkg
10509>>>>>Use GlobalFunctionsProcedures.pkg
10509>>>>>
10509>>>>>Class cWindowsErrorHandler is a cBaseErrorHandler
10510>>>>>    Procedure Construct_Object
10512>>>>>        Forward Send Construct_Object
10514>>>>>        
10514>>>>>        
10514>>>>>        
10514>>>>>        // shows error numbers with user errors. Only set this true if your
10514>>>>>        // application has meaningful numbers that helps the end user. Note that
10514>>>>>        // unhandled errors always show numbers.
10514>>>>>        // this is ignored if pbUnhandledErrorSupport is false
10514>>>>>        Property Boolean pbShowErrorNumber        False
10515>>>>>        
10515>>>>>        //  This allows us to skip find errors (GT & LT) and to only
10515>>>>>        //  ring a bell when these occur.
10515>>>>>        //
10515>>>>>        Property Boolean pbBellOnFindErrorState True
10516>>>>>        
10516>>>>>        Property Integer pbVerboseState         True
10517>>>>>
10517>>>>>    End_Procedure
10518>>>>>    
10518>>>>>
10518>>>>>    
10518>>>>>    Procedure UnhandledErrorDisplay Integer iErrorLine String sMessage
10520>>>>>        String sCaption sCRLF
10520>>>>>        Move (Character(13)+Character(10)) to sCRLF
10521>>>>>        Get psUnhandledErrorCaption to sCaption
10522>>>>>        Move (Replaces("\n",sMessage,sCRLF)) to sMessage
10523>>>>>        Move (Replaces("\"+sCRLF, sMessage, "\n")) to sMessage
10524>>>>>        ErrorDisplay iErrorLine sMessage sCaption C_$OK C_$Copy
10525>>>>>    End_Procedure
10526>>>>>    
10526>>>>>    // Handle error event, displaying error info to user.
10526>>>>>    Procedure HandleError Integer iErrNum Integer iErrLine String sErrText
10528>>>>>        Integer iReply iIcon
10528>>>>>        String  sDescription sMess
10528>>>>>        String  sSource sCaption
10528>>>>>        Integer iSrcPos iSrc iTxtLen
10528>>>>>        Boolean bIsUnhandled bUnhandledSupport bCritical bVerbose
10528>>>>>        
10528>>>>>        
10528>>>>>        // if this is false, this will work old-style -- all errors go through message box
10528>>>>>        Get pbUnhandledErrorSupport to bUnhandledSupport
10529>>>>>        
10529>>>>>        Get IsCritical iErrNum to bCritical
10530>>>>>        Get IsUnhandledError iErrNum to bIsUnhandled
10531>>>>>        
10531>>>>>        
10531>>>>>        //
10531>>>>>        //   Changes made so find errors don't report - just beep
10531>>>>>        //
10531>>>>>        If ( pbBellOnFindErrorState(Self) and ;             (iErrNum=DFERR_FIND_PRIOR_BEG_OF_FILE or iErrNum=DFERR_FIND_PAST_END_OF_FILE)) Begin
10533>>>>>            Send Bell
10534>>>>>        End
10534>>>>>>
10534>>>>>        Else Begin
10535>>>>>            
10535>>>>>            // See if source information is provided (Source = module.function). If so remove
10535>>>>>            // as detail. Must find last instance of this in string
10535>>>>>            Move (pos(C_ErrorContextSourceText,sErrText)) to iSrc
10536>>>>>            If (iSrc > 0) Begin
10538>>>>>                Move (iSrc-1) to iSrcPos
10539>>>>>                Move (length(C_ErrorContextSourceText)) to  iTxtLen
10540>>>>>                Move sErrText to sSource
10541>>>>>                Repeat // this makes sure we find last instance of this
10541>>>>>>
10541>>>>>                    Move (Remove(sSource, 1, iSrc-1 + iTxtLen )) to sSource // right part of string
10542>>>>>                    Move (Pos(C_ErrorContextSourceText,sSource)) to iSrc           // see if it was the last
10543>>>>>                    If (iSrc > 0) ;                                               // if not, track length                        Move (iSrcPos + iTxtLen + iSrc-1) to iSrcPos
10546>>>>>                Until (iSrc=0)
10548>>>>>                Move (Trim(Left(sErrText,iSrcPos))) to sErrText
10549>>>>>                If (Right(sErrText,1) = ',') ;                    Move (Left(sErrText,Length(sErrText) - 1)) to sErrText
10552>>>>>            End
10552>>>>>>
10552>>>>>            
10552>>>>>            // the caption normally used for handled user errors
10552>>>>>            Get psUserErrorCaption to sCaption
10553>>>>>            // if an operator error this may be a Procedure UserError situation where the
10553>>>>>            // caption is passed in the error text. If so, get the caption
10553>>>>>            If (iErrNum=DFERR_OPERATOR) Begin
10555>>>>>                Move (pos(C_ErrorCaption,sErrText)) to iSrc
10556>>>>>                If iSrc Begin
10558>>>>>                    Move (Length(C_ErrorCaption)) to  iTxtLen
10559>>>>>                    Move (Remove(sErrText, 1, iSrc-1 + iTxtLen )) to sCaption
10560>>>>>                    Move (Left(sErrText,iSrc-1)) to sErrText
10561>>>>>                End
10561>>>>>>
10561>>>>>            End
10561>>>>>>
10561>>>>>            
10561>>>>>            Get ErrorDescription iErrNum sErrText to sDescription
10562>>>>>            
10562>>>>>            // if the error source is identified we can get extended error
10562>>>>>            // text for our error message
10562>>>>>            If (ghoErrorSource > 0) Begin
10564>>>>>                Get extended_error_Message of ghoErrorSource to sMess
10565>>>>>                If (sMess <> '') ;                    Move (sDescription + "\n\n" + sMess ) to sDescription
10568>>>>>            End
10568>>>>>>
10568>>>>>            
10568>>>>>            If (bUnhandledSupport) Begin
10570>>>>>                // as of 14.1, this is the preferred way to do errors
10570>>>>>                If (bCritical or bIsUnhandled) Begin
10572>>>>>                    Move ( sDescription + "\n\n" + C_$Error + ":" * String(iErrNum) ) to sDescription
10573>>>>>                    If (sSource <> "") Begin
10575>>>>>                        Move (sDescription + "\n" + C_$ErrorSource +" =" * sSource) to sDescription
10576>>>>>                    End
10576>>>>>>
10576>>>>>                End
10576>>>>>>
10576>>>>>                Else If (pbShowErrorNumber(Self)) Begin
10579>>>>>                    // if a user error, we provide a way to see error numbers.
10579>>>>>                    Move ( sDescription + "\n\n" + C_$Error + ":" * String(iErrNum) ) to sDescription
10580>>>>>                End
10580>>>>>>
10580>>>>>            End
10580>>>>>>
10580>>>>>            Else Begin
10581>>>>>                // we get here if we want it to work the old (less good) way. This is provided
10581>>>>>                // only for backwards compatibility. All errors go through the message box
10581>>>>>                Get Verbose_State to bVerbose
10582>>>>>                If (bVerbose)  Begin
10584>>>>>                    Move ( sDescription + "\n\n" + SFormat(C_$TechnicalDetails, iErrNum, iErrLine) ) to sDescription
10585>>>>>                    If (sSource<>"") Begin
10587>>>>>                        Move (sDescription + "\n" + C_$ErrorSource +" =" * sSource) to sDescription
10588>>>>>                    End
10588>>>>>>
10588>>>>>                End
10588>>>>>>
10588>>>>>            End
10588>>>>>>
10588>>>>>            
10588>>>>>            If ( (bCritical or bIsUnhandled) and bUnhandledSupport) Begin
10590>>>>>                Send UnhandledErrorDisplay iErrLine sDescription
10591>>>>>            End
10591>>>>>>
10591>>>>>            Else Begin
10592>>>>>                Move (If(bCritical,MB_IconHand,MB_IconExclamation)) to iIcon
10593>>>>>                Move (Message_Box(sDescription, sCaption, MB_Ok, iIcon)) to iReply
10594>>>>>            End
10594>>>>>>
10594>>>>>            
10594>>>>>            // abort on critical errors
10594>>>>>            If bCritical ;                Abort
10597>>>>>            
10597>>>>>        End
10597>>>>>>
10597>>>>>        
10597>>>>>    End_Procedure
10598>>>>>    
10598>>>>>    
10598>>>>>    
10598>>>>>    Function Help_Context Integer Context_Type Returns String
10600>>>>>        Function_Return (Current_Error_Number(Self))
10601>>>>>    End_Function
10602>>>>>    
10602>>>>>    
10602>>>>>    
10602>>>>>    // The following functions are rarely or never used.
10602>>>>>    
10602>>>>>    // The functions below are used to construct a general help
10602>>>>>    // name for errors that are generated by the system.  If processing
10602>>>>>    // comes here, then there was no module specific help found.  These
10602>>>>>    // functions will provide a more general help name that appears in
10602>>>>>    // the form of SYSTEM..ERROR:#.  All global errors should be
10602>>>>>    // places in the help file under this application and module name.
10602>>>>>    
10602>>>>>    // Returns "ERROR:errornum" to supply error help.
10602>>>>>    Function Help_Name Returns String
10604>>>>>        Function_Return (Append("ERROR:",lastErr))
10605>>>>>    End_Function
10606>>>>>    
10606>>>>>    Function Application_Name Returns String
10608>>>>>        Function_Return 'SYSTEM'
10609>>>>>    End_Function
10610>>>>>    
10610>>>>>    Function Module_Name Returns String
10612>>>>>        Function_Return ''
10613>>>>>    End_Function
10614>>>>>    
10614>>>>>    
10614>>>>>    // Legacy names here for backwards compatibility
10614>>>>>    Function Verbose_State Returns Boolean
10616>>>>>        Function_Return (pbVerboseState(Self))
10617>>>>>    End_Function
10618>>>>>    
10618>>>>>    Procedure Set Verbose_State Boolean bVal
10620>>>>>        Set pbVerboseState to bVal
10621>>>>>    End_Procedure
10622>>>>>    
10622>>>>>    Procedure Set Bell_on_Find_Error_State Boolean bVal
10624>>>>>        Set pbBellOnFindErrorState to bVal
10625>>>>>    End_Procedure
10626>>>>>    
10626>>>>>    Function Bell_on_Find_Error_State Returns Boolean
10628>>>>>        Function_Return (pbBellOnFindErrorState(Self))
10629>>>>>    End_Function
10630>>>>>End_Class
10631>>>
10631>>>// Legacy classnames
10631>>>Class ErrorSystem is a cWindowsErrorHandler
10632>>>End_Class
10633>>>
10633>>>Class Trapped_Errors_Array is a cTrappedErrors
10634>>>End_Class
10635>>>
10635>>>// Replace to make legacy code run that uses old names work
10635>>>
10635>>>Object oErrorHandler is a cWindowsErrorHandler
10637>>>End_Object
10638>>>
10638>Use seq_chnl.pkg                // Sequential channel management
10638>Use Statpnl.pkg                 // StatusPanel class
Including file: Statpnl.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Statpnl.pkg)
10638>>>// creates the standard status_panel object.
10638>>>//
10638>>>// This is the default Status Panel object used by any of the DataFlex classes that
10638>>>// invoke the standard status panel. The standard has always been that the package name
10638>>>// is StatPnl.pkg and the name of the object is Status_Panel. As of 12.0, there are major
10638>>>// changes in the way the status panel operates The Sentinel based external status panel used in
10638>>>// prior revisions has been replace with status panel that is part of the application.
10638>>>// This should work much better and faster than the old sentinel based solution.
10638>>>// While the way this operates has changed, the interface has not and therefore this should work
10638>>>// with most applications.
10638>>>//
10638>>>// As of 12.0, we have added a global handle that contains the object ID of this status panel.
10638>>>// This variable ghoStatusPanel can be used in place of the object name Status_Panel. This provides
10638>>>// a cleaner more robust interface.
10638>>>//
10638>>>//
10638>>>// Compatibility Note:
10638>>>//
10638>>>// When used in the standard way, this change will require no changes. A developer will only need to
10638>>>// change their code if they've modified the sentinel program, which was a difficult thing to do.
10638>>>//
10638>>>// If for some reason you application will not work using this as a replacement for the old status
10638>>>// panel, you've probably done something special with the old status-panel. If you don't want to
10638>>>// figure out how to use the new one and you want to continue using the old one you are going to need
10638>>>// to add some code to include the old status panel in your application. Add the following to your project (your src).
10638>>>//
10638>>>// Use StatPnl.pkg    // Make sure you load the new status panel object first. this is not optional!
10638>>>// Use OldStatPnl.pkg // load the old status panel. Status_Panel is now this old object
10638>>>//
10638>>>// If you do this, you will lose access to the new status-panel via Status_Panel. However, you
10638>>>// can still access the new object via the ghoStatusPanel handle.
10638>>>//
10638>>>//
10638>>>// Creating your own Status Panel objects
10638>>>//
10638>>>// If a developer wishes to create a custom panel, they should use this package as their template.
10638>>>// This panel can be visually modeled and changed any way you wish. Just save your new custom panel
10638>>>// with a different file and object name and direct your status panel request to the new object.
10638>>>//
10638>>>// If the new panel changes the interface and updates objects that are not currently defined, you
10638>>>// want to make sure you send the message ProcessEvents after you've updated the object. This allows
10638>>>// the object to paint when inside of a tight loop. For example, if you wanted to add a progress
10638>>>// bar (cProgressBar) you would want to Send ProcessEvents after you update the progress bar.
10638>>>// e.g.
10638>>>//       Procedure UpdateStatusBar
10638>>>//           Send DoAdvance of oProgressBar
10638>>>//           Send ProcessEvents
10638>>>//       End_Procedure
10638>>>//
10638>>>// Of course, if you use the standard interfaces in status bar and your forward send these
10638>>>// messages this will be done for you.
10638>>>//
10638>>>// the standard Interface for status panels are:
10638>>>//
10638>>>// Send Initialize_StatusPanel - initializes values for caption, title & message
10638>>>// Send Start_StatusPanel      - start the status panel
10638>>>// Send Stop_StatusPanel       - stop the status panel
10638>>>// Send Update_StatusPanel     - update the status panel's action area
10638>>>// Get  Check_StatusPanel      - check for cancel (if cancel or pbCancel is set, close the panel)
10638>>>//
10638>>>// Get/Set Caption_Text - updates the caption bar
10638>>>// Get/Set Title_Text   - updates the title area
10638>>>// Get/Set Message_Text - updates the Message area
10638>>>// Get/Set Action_Text  - updates the action area
10638>>>// Get/Set Button_Text  - updates the button area
10638>>>//
10638>>>// Get/Set Allow_cancel_state - determines if panel can be canceled
10638>>>// Send EnableCancelButton - code you should provide to enable/disable cancel button
10638>>>//
10638>>>// ghoStatusPanel - global handle that points to the standard status panel.
10638>>>
10638>>>Use cProcessStatusPanel.pkg
Including file: cProcessStatusPanel.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cProcessStatusPanel.pkg)
10638>>>>>// cProcessStatusPanel.pkg
10638>>>>>//
10638>>>>>// Class used to create StatusPanels.
10638>>>>>//
10638>>>>>// This class does not provide any of the inner objects that make up a status panel. Instead an
10638>>>>>// interface is provided that is used to update the various areas of status panel. At this level,
10638>>>>>// those areas (title area, message area, action area, button area) are logical. You create the
10638>>>>>// physical objects at the object level and then bind these objects to the interface.
10638>>>>>// Take a look at StatPnl.pkg to see how this is used.
10638>>>>>//
10638>>>>>// the standard Interface for status panels are:
10638>>>>>//
10638>>>>>// Send Initialize_StatusPanel - initializes values for caption, title & message
10638>>>>>// Send Start_StatusPanel      - start the status panel
10638>>>>>// Send Stop_StatusPanel       - stop the status panel
10638>>>>>// Send Update_StatusPanel     - update the status panel's action area
10638>>>>>// Get  Check_StatusPanel      - check for cancel (if cancel or pbCancel is set, close the panel)
10638>>>>>//
10638>>>>>// Get/Set Caption_Text - updates the caption bar
10638>>>>>// Get/Set Title_Text   - updates the title area
10638>>>>>// Get/Set Message_Text - updates the Message area
10638>>>>>// Get/Set Action_Text  - updates the action area
10638>>>>>// Get/Set Button_Text  - updates the button area
10638>>>>>//
10638>>>>>// Get/Set Allow_cancel_state - determines if panel can be canceled
10638>>>>>// Send EnableCancelButton - code must be provided in the cancel button object to enable/disable cancel button
10638>>>>>//
10638>>>>>
10638>>>>>Use cStatusPanel.pkg
Including file: cStatusPanel.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cStatusPanel.pkg)
10638>>>>>>>// This is an abstract class that can be used to create status panels. The interface at this level
10638>>>>>>>// is very simple. You can start, stop, request a cancel and allow the object to paint.
10638>>>>>>>//
10638>>>>>>>// Look at cProcessStatusPanel.pkg to see how this is used.
10638>>>>>>>
10638>>>>>>>Use Windows.pkg
10638>>>>>>>
10638>>>>>>>
10638>>>>>>>
10638>>>>>>>
10638>>>>>>>Class cStatusPanel is a FloatingPanel
10639>>>>>>>    
10639>>>>>>>    Procedure Construct_Object
10641>>>>>>>        Forward Send Construct_object
10643>>>>>>>        
10643>>>>>>>        Property Boolean pbCancel False
10644>>>>>>>        
10644>>>>>>>        Set Extended_Window_Style to WS_EX_DLGMODALFRAME True // kills sysmenu as long as there is no icon
10645>>>>>>>        Set Icon to '' // this must be cleared so there will be no icon
10646>>>>>>>        Set locate_mode to CENTER_ON_PANEL
10647>>>>>>>        Set Border_Style  to Border_Dialog
10648>>>>>>>        // should be scoped so it will not try to change the focus if there is no focusable button inside
10648>>>>>>>        Set Scope_State to True
10649>>>>>>>        
10649>>>>>>>        On_Key KEXIT_APPLICATION Send Close_Panel
10650>>>>>>>    End_Procedure
10651>>>>>>>    
10651>>>>>>>    // this is private and required. Never send this.
10651>>>>>>>    Procedure Deactivate_Group
10653>>>>>>>        If (Active_State(Self)) Begin
10655>>>>>>>            Send SuspendGUI of Desktop False
10656>>>>>>>        End
10656>>>>>>>>
10656>>>>>>>        Forward Send Deactivate_Group
10658>>>>>>>    End_Procedure
10659>>>>>>>    
10659>>>>>>>    // Send this message to stop the panel
10659>>>>>>>    Procedure Deactivate
10661>>>>>>>        If (Active_State(Self)) Begin
10663>>>>>>>            Send SuspendGUI of Desktop False
10664>>>>>>>        End
10664>>>>>>>>
10664>>>>>>>        Forward Send Deactivate
10666>>>>>>>    End_Procedure
10667>>>>>>>    
10667>>>>>>>    // Send this message to start the panel
10667>>>>>>>    Procedure Activate
10669>>>>>>>        If not (Active_State(Self)) Begin
10671>>>>>>>            Set pbCancel to False
10672>>>>>>>            Send SuspendGUI of Desktop True
10673>>>>>>>        End
10673>>>>>>>>
10673>>>>>>>        Forward Send Activate
10675>>>>>>>    End_Procedure
10676>>>>>>>    
10676>>>>>>>    // This allows the panel to paint when used in a tight loop, which is what status panels are
10676>>>>>>>    // used for. Any time you update the panel or wish to check for a cancel, you should call this.
10676>>>>>>>    Procedure ProcessEvents
10678>>>>>>>        If (Active_State(Self)) Begin
10680>>>>>>>            Send PumpMsgQueue of Desktop
10681>>>>>>>        End
10681>>>>>>>>
10681>>>>>>>    End_Procedure
10682>>>>>>>    
10682>>>>>>>    // note close panel does not actually close the panel. It just sets pbCancel to True, informing the
10682>>>>>>>    // process using this that it wants to close. It is then up the process close the panel.
10682>>>>>>>    Procedure Close_Panel
10684>>>>>>>        Set pbCancel to True
10685>>>>>>>    End_Procedure
10686>>>>>>>    
10686>>>>>>>End_Class
10687>>>>>
10687>>>>>
10687>>>>>
10687>>>>>Class cProcessStatusPanel is a cStatusPanel
10688>>>>>    
10688>>>>>    Procedure Construct_Object
10690>>>>>        Forward Send Construct_object
10692>>>>>        // determines if panel can be canceled
10692>>>>>        Property Boolean Allow_Cancel_State True
10693>>>>>    End_Procedure
10694>>>>>    
10694>>>>>    // Any of the properties that change the text of a status panel must also send
10694>>>>>    // ProcessEvents which allows the panel to process painting messages. The ProcessEvents
10694>>>>>    // is essential when using status panels within a tight loop
10694>>>>>    
10694>>>>>    Procedure Set Caption_text String sText
10696>>>>>        Set Label to sText
10697>>>>>        Send ProcessEvents
10698>>>>>    End_Procedure
10699>>>>>    
10699>>>>>    Function Caption_Text Returns String
10701>>>>>        Function_Return (Label(Self))
10702>>>>>    End_Function
10703>>>>>    
10703>>>>>    Procedure Set Message_Text String sText
10705>>>>>        Send ProcessEvents
10706>>>>>    End_Procedure
10707>>>>>    
10707>>>>>    Function Message_Text Returns String
10709>>>>>    End_Function
10710>>>>>    
10710>>>>>    Procedure Set Action_Text String sText
10712>>>>>        Send ProcessEvents
10713>>>>>    End_Procedure
10714>>>>>    
10714>>>>>    Function Action_Text Returns String
10716>>>>>    End_Function
10717>>>>>    
10717>>>>>    Procedure Set Button_Text String sText
10719>>>>>        Send ProcessEvents
10720>>>>>    End_Procedure
10721>>>>>    
10721>>>>>    Function Button_Text Returns String
10723>>>>>    End_Function
10724>>>>>    
10724>>>>>    Procedure Set Title_Text String sText
10726>>>>>        Send ProcessEvents
10727>>>>>    End_Procedure
10728>>>>>    
10728>>>>>    Function Title_Text Returns String
10730>>>>>    End_Function
10731>>>>>    
10731>>>>>    // initializes values for caption, title & message
10731>>>>>    Procedure Initialize_StatusPanel String sCaption String sTitle String sMessage
10733>>>>>        Set Caption_text to sCaption
10734>>>>>        Set Title_Text   to sTitle
10735>>>>>        Set Message_Text to sMessage
10736>>>>>    End_Procedure
10737>>>>>    
10737>>>>>    // update the status panel's action area
10737>>>>>    Procedure Update_StatusPanel String sAction
10739>>>>>        Set Action_Text to sAction
10740>>>>>    End_Procedure
10741>>>>>    
10741>>>>>    // stop the status panel
10741>>>>>    Procedure Close_Panel
10743>>>>>        If (Allow_cancel_state(Self)) Begin
10745>>>>>            Forward Send Close_Panel
10747>>>>>        End
10747>>>>>>
10747>>>>>    End_Procedure
10748>>>>>    
10748>>>>>    // Code must be provided in the cancel button object to enable/disable cancel button
10748>>>>>    Procedure EnableCancelButton Boolean bEnable
10750>>>>>    End_Procedure
10751>>>>>    
10751>>>>>    // check for cancel (if cancel or pbCancel is set, close the panel)
10751>>>>>    Function Check_StatusPanel Returns Integer
10753>>>>>        Boolean bCancel
10753>>>>>        If (Active_state(Self)) Begin
10755>>>>>            Send ProcessEvents
10756>>>>>            Get pbCancel to bCancel
10757>>>>>            If bCancel Begin
10759>>>>>                Send Stop_StatusPanel // the old status panel removed this when canceled.
10760>>>>>            End
10760>>>>>>
10760>>>>>        End
10760>>>>>>
10760>>>>>        Function_Return (If(bCancel, MSG_CANCEL, 0)) // the old check status panel returns msg_cancel
10761>>>>>    End_Function
10762>>>>>    
10762>>>>>    // start the status panel
10762>>>>>    Procedure Start_StatusPanel
10764>>>>>        If not (Active_state(Self)) Begin
10766>>>>>            Send EnableCancelButton (Allow_cancel_state(Self))
10767>>>>>            Send Activate
10768>>>>>        End
10768>>>>>>
10768>>>>>    End_Procedure
10769>>>>>    
10769>>>>>    // stop the status panel
10769>>>>>    Procedure Stop_StatusPanel
10771>>>>>        If (Active_state(Self)) Begin
10773>>>>>            Send Deactivate
10774>>>>>        End
10774>>>>>>
10774>>>>>    End_Procedure
10775>>>>>    
10775>>>>>End_Class
10776>>>
10776>>>
10776>>>Global_Variable Handle ghoStatusPanel // will contain the ID of the global StatusPanel object
10776>>>
10776>>>
10776>>>Object Status_Panel is a cProcessStatusPanel
10778>>>    
10778>>>    Move Self to ghoStatusPanel // this can be used throughout your applicaton to access this object
10779>>>    
10779>>>    Set Size to 80 166
10780>>>    
10780>>>    Object oTitleTxt is a TextBox
10782>>>        Set location to 10 10
10783>>>        Set Auto_Size_State to False
10784>>>        Set size to 20 150
10785>>>        Set Justification_Mode to JMode_Center
10786>>>    End_Object
10787>>>    
10787>>>    Object oMessageTxt is a TextBox
10789>>>        Set location to 25 10
10790>>>        Set Auto_Size_State to False
10791>>>        Set size to 20 150
10792>>>    End_Object
10793>>>    
10793>>>    Object oActionTxt is a TextBox
10795>>>        Set location to 45 10
10796>>>    End_Object
10797>>>    
10797>>>    Object oStopButton is a Button
10799>>>        Set Location to 60 58
10800>>>        Set Label to C_$Cancel
10801>>>        
10801>>>        Procedure OnClick
10804>>>            Send Close_panel
10805>>>        End_Procedure
10806>>>        
10806>>>    End_Object
10807>>>    
10807>>>    // These messages bind the standard cProcessStatusPanel interface to the actual
10807>>>    // objects defined within this instance of the status panel.
10807>>>    
10807>>>    // note: all of the messages that change text should be forwarded
10807>>>    // as the forwarded messages allows the panel to paint when in a tight loop
10807>>>    
10807>>>    Procedure Set Message_Text String sText
10810>>>        Set Label of oMessageTxt to sText
10811>>>        Forward Set Message_Text to sText
10813>>>    End_Procedure
10814>>>    
10814>>>    Function Message_Text Returns String
10817>>>        Function_Return (Label(oMessageTxt))
10818>>>    End_Function
10819>>>    
10819>>>    Procedure Set Action_Text String sText
10822>>>        Set Label of oActionTxt to sText
10823>>>        Forward Set Action_Text to sText
10825>>>    End_Procedure
10826>>>    
10826>>>    Function Action_Text Returns String
10829>>>        Function_Return (Label(oActionTxt))
10830>>>    End_Function
10831>>>    
10831>>>    Procedure Set Button_Text String sText
10834>>>        Set Label of oStopButton to sText
10835>>>        Forward Set Button_Text to sText
10837>>>    End_Procedure
10838>>>    
10838>>>    Function Button_Text Returns String
10841>>>        Function_Return (Label(oStopButton))
10842>>>    End_Function
10843>>>    
10843>>>    Procedure Set Title_Text String sText
10846>>>        Set Label of oTitleTxt to sText
10847>>>        Forward Set Title_Text to sText
10849>>>    End_Procedure
10850>>>    
10850>>>    Function Title_Text Returns String
10853>>>        Function_Return (Label(oTitleTxt))
10854>>>    End_Function
10855>>>    
10855>>>    // gets called when status panel is activated passing whether a button
10855>>>    // should appear
10855>>>    Procedure EnableCancelButton Boolean bEnable
10858>>>        Set Enabled_State of oStopButton to bEnable
10859>>>    End_Procedure
10860>>>    
10860>>>End_Object
10861>>>
10861>Use File_dlg.pkg                // SaveAsDialog & OpenDialog class
Including file: File_dlg.pkg    (C:\Program Files\DataFlex 24.0\Pkg\File_dlg.pkg)
10861>>>Use Windows.pkg
10861>>>Use GlobalFunctionsProcedures.pkg
10861>>>
10861>>>
10861>>>// Unicode support, wide version of GetOpenFileName - Gets called directly from Show_Dialog.
10861>>>External_Function GetOpenFileNameW "GetOpenFileNameW" Comdlg32.DLL Pointer OpenStruct Returns Integer
10862>>>
10862>>>// Unicode support, wide version of GetSaveFileName
10862>>>External_Function GetSaveFileNameW "GetSaveFileNameW" Comdlg32.DLL Pointer OpenStruct Returns Integer
10863>>>
10863>>>Struct TOpenFileName
10863>>>    DWord    lStructSize          // length, in bytes, of the structure.
10863>>>    Handle   hwndOwner            // Handle to the window that owns the dialog box.
10863>>>    Handle   hInstance            // handle to a memory object containing a dialog box template.
10863>>>    Pointer  lpstrFilter          // pointer to a buffer containing pairs of null-terminated filter strings.
10863>>>    Pointer  lpstrCustomFilter    // Pointer to a static buffer that contains a pair of null-terminated filter strings for preserving the filter pattern chosen by the user.
10863>>>    DWord    nMaxCustFilter       // size, in chars, of the buffer identified by lpstrCustomFilter.
10863>>>    DWord    nFilterIndex         // index of the currently selected filter
10863>>>    Pointer  lpstrFile            // Pointer to a buffer that contains the file name(s)
10863>>>    DWord    nMaxFile             // Size, in CHARs, of the buffer pointed to by lpstrFile.
10863>>>    Pointer  lpstrFileTitle       // Pointer to a buffer that receives the file name and extension
10863>>>    DWord    nMaxFileTitle        // size, in CHARs, of the buffer pointed to by lpstrFileTitle
10863>>>    Pointer  lpstrInitialDir      // Pointer to a NULL terminated string that can specify the initial directory.
10863>>>    Pointer  lpstrTitle           // Pointer to a string to be placed in the title bar of the dialog box.
10863>>>    DWord    ofnFlags             // set of bit flags you can use to initialize the dialog box.
10863>>>    Short    nFileOffset          // Specifies the zero-based offset, in TCHARs, from the beginning of the path to the file name in the string pointed to by lpstrFile.
10863>>>    Short    nFileExtension       // Specifies the zero-based offset, in TCHARs, from the beginning of the path to the file name extension in the string pointed to by lpstrFile.
10863>>>    Pointer  lpstrDefExt          // Pointer to a buffer that contains the default extension.
10863>>>    Longptr  lCustData            // Specifies application-defined data that the system passes to the hook procedure identified by the lpfnHook member.
10863>>>    Pointer  lpfnHook             // Pointer to a hook procedure.
10863>>>    Pointer  lpTemplateName       // Pointer to a null-terminated string that names a dialog template resource in the module identified by the hInstance member.
10863>>>    Pointer  lpvReserved          // Reserved
10863>>>    DWord    dwReserved           // Reserved
10863>>>    DWord    FlagsEx              // A set of bit flags you can use to initialize the dialog box.
10863>>>End_Struct
10863>>>
10863>>>Define OFN_READONLY               for |CI$000001
10863>>>Define OFN_OVERWRITEPROMPT        for |CI$000002
10863>>>Define OFN_HIDEREADONLY           for |CI$000004
10863>>>Define OFN_NOCHANGEDIR            for |CI$000008
10863>>>Define OFN_NOVALIDATE             for |CI$000100
10863>>>Define OFN_ALLOWMULTISELECT       for |CI$000200
10863>>>Define OFN_EXTENSIONDIFFERENT     for |CI$000400
10863>>>Define OFN_PATHMUSTEXIST          for |CI$000800
10863>>>Define OFN_FILEMUSTEXIST          for |CI$001000
10863>>>Define OFN_CREATEPROMPT           for |CI$002000
10863>>>Define OFN_SHAREAWARE             for |CI$004000
10863>>>Define OFN_NOREADONLYRETURN       for |CI$008000
10863>>>Define OFN_NOTESTFILECREATE       for |CI$010000
10863>>>Define OFN_EXPLORER               for |CI$080000     // new look commdlg
10863>>>
10863>>>Class AbstractFileDialog is a cObject
10864>>>    
10864>>>    Procedure Construct_Object
10866>>>        Forward Send Construct_Object
10868>>>        
10868>>>        Property String  Filter_String
10869>>>        Property String  Initial_Folder
10870>>>        Property String  File_Name
10871>>>        Property String  File_Title
10872>>>        Property String  Dialog_Caption
10873>>>        Property Integer Filter_Index          1
10874>>>        Property Integer HideReadOnly_State    False
10875>>>        Property Integer TickReadOnly_State    False
10876>>>        Property Integer AllowReadOnly_State   True
10877>>>        Property Integer FileMustExist_State   True
10878>>>        Property Integer PathMustExist_State   True
10879>>>        Property Integer CreatePrompt_State    True
10880>>>        Property Integer ShowFileTitle_State   False
10881>>>        Property Integer OverwritePrompt_State False
10882>>>        Property Integer NoChangeDir_State     False
10883>>>        
10883>>>        Property Boolean Private_MultiSelect_State False
10884>>>        
10884>>>        Property String[] Private_Selected_Files
10885>>>        
10885>>>        Property Integer PrivateExternal_msg
10886>>>        
10886>>>        //Set Focus_Mode To No_Activate
10886>>>    End_Procedure
10887>>>    
10887>>>    Function OwnerHandle Returns Handle
10889>>>        Handle hWnd
10889>>>        Handle hoObj
10889>>>        Get Focus of desktop to hoObj // start with the focus
10890>>>        Move (gOwnerWindowHandle(hoObj)) to hWnd // global function finds the right handle for us
10891>>>        Function_Return hWnd
10892>>>    End_Function
10893>>>    
10893>>>    
10893>>>    Function Show_Dialog Returns Integer // bool
10895>>>        Handle hWnd
10895>>>        Integer bOK iFilter iFlags bHideRO bTickRO bFileExist bPathExist iMsg
10895>>>        Integer icInitDir bCreatePrompt bOverwritePrompt bAllowReadOnly
10895>>>        Integer iPos iCount
10895>>>        Integer bNoChangeDir
10895>>>        Pointer lpsFileTitle lpsFileName lpsFilter lpsInitDir
10895>>>        Pointer lpsTitle lpsDefExt
10895>>>        WString sFileName sFileTitle sFilter sInitDir sTitle sDefExt
10895>>>        Pointer lpOpenFileData
10895>>>        Boolean bMultiSelect
10895>>>        String[] sFiles
10896>>>        TOpenFileName OpenFileData
10896>>>        TOpenFileName OpenFileData
10896>>>        
10896>>>        //Delegate Get Container_Handle To hWnd
10896>>>        Get OwnerHandle to hWnd
10897>>>        
10897>>>        If (ShowFileTitle_State(Self)) Begin
10899>>>            Get File_Title to sFileName
10900>>>        End
10900>>>>
10900>>>        
10900>>>        Get private_MultiSelect_State to bMultiSelect
10901>>>        
10901>>>        Get Initial_Folder        to sInitDir
10902>>>        Get Dialog_Caption        to sTitle
10903>>>        Get Filter_String         to sFilter
10904>>>        Get HideReadOnly_State    to bHideRO
10905>>>        Get TickReadOnly_State    to bTickRO
10906>>>        Get FileMustExist_State   to bFileExist
10907>>>        Get PathMustExist_State   to bPathExist
10908>>>        Get CreatePrompt_State    to bCreatePrompt
10909>>>        Get OverwritePrompt_State to bOverwritePrompt
10910>>>        Get AllowReadOnly_State   to bAllowReadOnly
10911>>>        Get NoChangeDir_State     to bNoChangeDir
10912>>>        Get Filter_Index          to iFilter
10913>>>        
10913>>>        Move (sFilter + Character(0) + Character(0)) to sFilter
10914>>>        Move (Replaces('|', sFilter, Character(0))) to sFilter
10915>>>        
10915>>>        Append sInitDir   (character(0))
10916>>>        Append sFileTitle (Repeat(character(0),32000))
10917>>>        Append sFileName  (Repeat(character(0),32000))
10918>>>        Append sTitle     (Repeat(character(0),255))
10919>>>        Append sDefExt    (character(0))
10920>>>        
10920>>>        Move (AddressOf(sInitDir))   to lpsInitDir
10921>>>        Move (AddressOf(sFileName))  to lpsFileName
10922>>>        Move (AddressOf(sFileTitle)) to lpsFileTitle
10923>>>        Move (AddressOf(sTitle))     to lpsTitle
10924>>>        Move (AddressOf(sDefExt))    to lpsDefExt
10925>>>        Move (AddressOf(sFilter))    to lpsFilter
10926>>>        
10926>>>        
10926>>>        If (bMultiSelect) Begin
10928>>>            Move (OFN_EXPLORER + OFN_ALLOWMULTISELECT) to iFlags  // Multi-select!
10929>>>        End
10929>>>>
10929>>>        
10929>>>        If bFileExist ;            Move (iFlags + OFN_FILEMUSTEXIST)    to iFlags
10932>>>        If bPathExist ;            Move (iFlags + OFN_PATHMUSTEXIST)    to iFlags
10935>>>        If bHideRO ;            Move (iFlags + OFN_HIDEREADONLY)     to iFlags
10938>>>        If bTickRO ;            Move (iFlags + OFN_READONLY)         to iFlags
10941>>>        If bCreatePrompt ;            Move (iFlags + OFN_CREATEPROMPT)     to iFlags
10944>>>        If bOverwritePrompt ;            Move (iFlags + OFN_OVERWRITEPROMPT)  to iFlags
10947>>>        If not bAllowReadOnly ;            Move (iFlags + OFN_NOREADONLYRETURN) to iFlags
10950>>>        If bNoChangeDir ;            Move (iFlags + OFN_NOCHANGEDIR)      to iFlags
10953>>>        
10953>>>        Move (SizeOfType(TOpenFileName)) to OpenFileData.lStructSize
10954>>>        Move hWnd         to OpenFileData.hWndOwner
10955>>>        Move iFilter      to OpenFileData.nFilterIndex
10956>>>        Move lpsFileName  to OpenFileData.lpstrFile
10957>>>        
10957>>>        If (sInitDir <> '') Begin
10959>>>            Move lpsInitDir    to OpenFileData.lpstrInitialDir
10960>>>        End
10960>>>>
10960>>>        
10960>>>        If (sTitle <> '') Begin
10962>>>            Move lpsTitle      to OpenFileData.lpstrTitle
10963>>>        End
10963>>>>
10963>>>        
10963>>>        Move 32000             to OpenFileData.nMaxFileTitle
10964>>>        Move 32000             to OpenFileData.nMaxFile
10965>>>        Move lpsFileTitle      to OpenFileData.lpstrFileTitle
10966>>>        Move iFlags            to OpenFileData.ofnFlags
10967>>>        Move lpsFilter         to OpenFileData.lpstrFilter
10968>>>        Move lpsDefExt         to OpenFileData.lpstrDefExt
10969>>>        
10969>>>        Move (AddressOf(OpenFileData)) to lpOpenFileData
10970>>>        
10970>>>        Get PrivateExternal_msg to iMsg
10971>>>        If (iMsg = Get_GetOpenFileNameW) ;            Move (GetOpenFileNameW (lpOpenFileData)) to bOK
10974>>>        If (iMsg = Get_GetSaveFileNameW) ;            Move (GetSaveFileNameW (lpOpenFileData)) to bOK
10977>>>        
10977>>>        If bOK Begin
10979>>>            Move OpenFileData.ofnFlags     to iFlags
10980>>>            Move OpenFileData.nFilterIndex to iFilter
10981>>>            Move OpenFileData.nFileOffset  to icInitDir
10982>>>            
10982>>>            Move (CString(Left(sFileName, icInitDir))) to sInitDir    // Trim trailing null
10983>>>            Set Initial_Folder     to sInitDir
10984>>>            
10984>>>            Set TickReadOnly_State to (iFlags iand OFN_READONLY)
10985>>>            Set Filter_Index       to iFilter
10986>>>
10986>>>            Set File_Name          to (CString( sFileName ))
10987>>>            Set File_Title         to (CString( sFileTitle ))
10988>>>            
10988>>>            If (bMultiSelect) Begin
10990>>>                // If this is a multi-files dialog then parse out the array of selected files....
10990>>>                If (Right(sInitDir, 1) = "\") ;                    Move (Left(sInitDir, Length(sInitDir)-1)) to sInitDir     // Trim trailing :\". This is only there if 1 file was selected!
10993>>>                
10993>>>                // Get the null delimited string of file names into the sFiles array....
10993>>>                Move 0 to iCount
10994>>>                Move (Right(sFileName, Length(sFileName) - icInitDir)) to sFileName    // Strip the path info (we already have it)
10995>>>                
10995>>>                Repeat
10995>>>>
10995>>>                    // Get the next filename....
10995>>>                    Move (Pos(Character(0), sFileName)) to iPos   // Filenames are null delimeted
10996>>>                    
10996>>>                    If (iPos > 1) Begin
10998>>>                        Move (sInitDir + "\" + CString(Left(sFileName, iPos))) to sFiles[iCount]
10999>>>                        Move (Right(sFileName, Length(sFileName) - iPos)) to sFileName
11000>>>                        Increment iCount
11001>>>                    End
11001>>>>
11001>>>                Until (iPos <= 1)
11003>>>            End
11003>>>>
11003>>>            Else Begin
11004>>>                Move (CString(sFileName)) to sFiles[0]
11005>>>            End
11005>>>>
11005>>>            
11005>>>            Set private_Selected_Files to sFiles
11006>>>        End
11006>>>>
11006>>>        Function_Return (bOK)
11007>>>    End_Function
11008>>>End_Class
11009>>>
11009>>>Class OpenDialog is an AbstractFileDialog
11010>>>    Procedure Construct_Object
11012>>>        Forward Send Construct_Object
11014>>>        Set PrivateExternal_msg to get_GetOpenFileNameW
11015>>>    End_Procedure
11016>>>    
11016>>>    Procedure Set MultiSelect_State Boolean bState
11018>>>        Set private_MultiSelect_State to bState
11019>>>    End_Procedure
11020>>>    
11020>>>    Function MultiSelect_State Returns Boolean
11022>>>        Boolean bState
11022>>>        Get private_MultiSelect_State to bState
11023>>>        Function_Return bState
11024>>>    End_Function
11025>>>    
11025>>>    Function Selected_Files Returns String[]
11027>>>        String[] sFiles
11028>>>        Get private_Selected_Files to sFiles
11029>>>        Function_Return sFiles
11030>>>    End_Function
11031>>>End_Class
11032>>>
11032>>>Class SaveAsDialog is an AbstractFileDialog
11033>>>    Procedure Construct_Object
11035>>>        Forward Send Construct_Object
11037>>>        Set FileMustExist_State   to False
11038>>>        Set CreatePrompt_State    to False
11039>>>        Set ShowFileTitle_State   to True
11040>>>        Set OverwritePrompt_State to True
11041>>>        Set HideReadOnly_State    to True
11042>>>        Set PrivateExternal_msg to get_GetSaveFileNameW
11043>>>    End_Procedure
11044>>>End_Class
11045>>>
11045>Use Flexml.pkg
Including file: Flexml.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Flexml.pkg)
11045>>>Use VdfBase.pkg
11045>>>Use LanguageText.pkg
11045>>>Use GlobalFunctionsProcedures.pkg
11045>>>
11045>>>
11045>>>// Used to designate that a handle is a handle to an Xml Dom object. This
11045>>>// is used/required by server web-services but could be used elsewhere .
11045>>>
11045>>>
11045>>>// Types of Nodes
11045>>>
11045>>>
11045>>>// classes and methods defined in fmac
11045>>>
11045>>>
11045>>>Register_Function transformNode Handle infcXSLNode Returns String
11045>>>
11045>>>
11045>>>
11045>>>
11045>>>
11045>>>
11045>>>
11045>>>
11045>>>
11045>>>// XML function & procedure registration
11045>>>
11045>>>Register_Procedure Set XmlInterface Handle iHandle
11045>>>Register_Function XmlInterface Returns Handle
11045>>>
11045>>>// NODE Properties
11045>>>Register_Function phAttributes Returns Handle
11045>>>Register_Function psBaseName Returns String
11045>>>Register_Function phChildNodes Returns Handle
11045>>>Register_Function phDefinition Returns Handle
11045>>>Register_Function phFirstChild Returns Handle
11045>>>Register_Function phLastChild Returns Handle
11045>>>Register_Function phNextSibling Returns Handle
11045>>>Register_Function psNameSpaceURI Returns String
11045>>>Register_Function psNodeName Returns String
11045>>>Register_Function piNodeType Returns Integer
11045>>>Register_Function psNodeTypeString Returns String
11045>>>Register_Function phOwnerDocument Returns Handle
11045>>>Register_Function phParentNode Returns Handle
11045>>>Register_Function pbParsed Returns Integer
11045>>>Register_Function psPrefix Returns String
11045>>>Register_Function phPreviousSibling Returns Handle
11045>>>Register_Function pbSpecified Returns Integer
11045>>>Register_Function psText Returns String
11045>>>Register_Procedure Set psText String sText
11045>>>Register_Function psXML Returns String
11045>>>
11045>>>// Node Read write properties
11045>>>
11045>>>Register_Procedure Set psDataType String sTypeName
11045>>>Register_Function psDataType Returns String
11045>>>Register_Procedure Set pvNodeTypedValue Integer iType Integer iAddress
11045>>>Register_Function pvNodeTypedValue Integer iType Returns Integer  // address of data
11045>>>Register_Procedure Set psNodeValue String sValue
11045>>>Register_Function psNodeValue Returns String
11045>>>
11045>>>// Node Methods
11045>>>
11045>>>Register_Function AppendChild Handle iChildInfc Returns Handle
11045>>>Register_Function CloneInfcNode Handle bRecurse Returns Handle
11045>>>Register_Function HasChildNodes Returns Integer
11045>>>Register_Function InsertBefore Handle infcNodeToInsert Handle iWhere Returns Handle
11045>>>Register_Function RemoveChild Handle iChildToRemove Returns Handle
11045>>>Register_Function ReplaceChild Handle iNewChild Handle iChildToReplace Returns Handle
11045>>>Register_Function SelectNodes String selectstring Returns Handle
11045>>>Register_Function SelectSingleNode String selectstring Returns Handle
11045>>>
11045>>>// Node Collections
11045>>>// READONLY PROPERTIES
11045>>>
11045>>>Register_Function phItem Integer iItem Returns Handle
11045>>>Register_Function phElementItem Integer iItem Returns Handle
11045>>>
11045>>>Register_Function piLength Returns Integer
11045>>>
11045>>>Register_Function NamedItem String sName Returns Handle
11045>>>Register_Function QualifiedItem String sBaseName String sNameSpace Returns Handle
11045>>>Register_Function RemoveNamedItem String sName Returns Handle
11045>>>Register_Function RemoveQualifiedItem String sBaseName String sNameSpace Returns Handle
11045>>>Register_Function SetNamedItem Handle iInterface Returns Handle
11045>>>
11045>>>// XML DOM Document
11045>>>// Read only properties
11045>>>
11045>>>Register_Function phDocType Returns Handle
11045>>>Register_Function phImplementation Returns Handle
11045>>>Register_Function phParseError Returns Handle
11045>>>Register_Function piReadyState Returns Integer
11045>>>Register_Function psURL Returns String
11045>>>
11045>>>// Read Write Properties
11045>>>
11045>>>Register_Procedure Set pbAsync Integer bValue
11045>>>Register_Function pbAsync Returns Integer
11045>>>Register_Procedure Set phDocumentElement Handle iElement
11045>>>Register_Function phDocumentElement Returns Handle
11045>>>Register_Procedure Set pbPreserveWhiteSpace Integer bValue
11045>>>Register_Function pbPreserveWhiteSpace Returns Integer
11045>>>Register_Procedure Set pbResolveExternals Integer bValue
11045>>>Register_Function pbResolveExternals Returns Integer
11045>>>Register_Procedure Set pbValidateOnParse Integer bValue
11045>>>Register_Function pbValidateOnParse Returns Integer
11045>>>
11045>>>// Events
11045>>>
11045>>>// Methods
11045>>>
11045>>>Register_Function Abort Returns Integer
11045>>>Register_Function ElementsByTagName String sTagName Returns Handle
11045>>>Register_Function LoadDocument String sURLName Returns Integer
11045>>>Register_Function LoadXML String sXMLText Returns Integer
11045>>>Register_Function NodeFromID String sNodeName Returns Handle
11045>>>Register_Function SaveDocument String sURLName Returns Integer
11045>>>
11045>>>// Parse Error
11045>>>// Read Only Properties
11045>>>
11045>>>Register_Function piErrorCode Returns Integer
11045>>>Register_Function piFilePos Returns Integer
11045>>>Register_Function piLine Returns Integer
11045>>>Register_Function piLinePos Returns Integer
11045>>>Register_Function psReason Returns String
11045>>>Register_Function psSrcText Returns String
11045>>>Register_Function psURL Returns String
11045>>>
11045>>>// DOM Implementation
11045>>>// Method
11045>>>
11045>>>Register_Function HasFeature String sSystem String sFeature Returns Integer
11045>>>
11045>>>// Methods
11045>>>
11045>>>Register_Function substringData Integer iOffset Integer iCount Returns String
11045>>>Register_Function appendData String sData Returns Handle
11045>>>Register_Function insertData Integer iOffset String sData Returns Handle
11045>>>Register_Function deleteData Integer iOffset Integer iCount Returns Handle
11045>>>Register_Function replaceData Integer iOffset Integer iCount String sData Returns Handle
11045>>>
11045>>>// Attributes
11045>>>
11045>>>Register_Function psName Returns String
11045>>>
11045>>>// Elements
11045>>>// Read Only properties
11045>>>
11045>>>Register_Function psTagName Returns String
11045>>>
11045>>>// Methods
11045>>>
11045>>>Register_Procedure Set attributeValue String sName String sValue
11045>>>Register_Function attributeValue String sName Returns String
11045>>>Register_Function removeAttribute String sName Returns Handle
11045>>>Register_Function attributeNode String sName Returns Handle
11045>>>Register_Procedure Set attributeNode Handle iNode Returns Handle
11045>>>Register_Function removeAttributeNode Handle iNode Returns Handle
11045>>>
11045>>>// DOM Text
11045>>>// Methods
11045>>>
11045>>>Register_Function splitText Integer iOffset Returns Integer
11045>>>
11045>>>// DOM Processing Instruction
11045>>>// Read Only Properties
11045>>>Register_Function psTarget Returns String
11045>>>
11045>>>// DOM Document Type
11045>>>
11045>>>Register_Function phEntities Returns Handle
11045>>>Register_Function phNotations Returns Handle
11045>>>
11045>>>// DOM Notations
11045>>>
11045>>>Register_Function psPublicID Returns String
11045>>>Register_Function psSystemID Returns String
11045>>>Register_Function psNotationName Returns String
11045>>>
11045>>>// create nodes
11045>>>
11045>>>Register_Function createAttribute String sName Returns Handle
11045>>>Register_Function createCDataSection String sValue Returns Handle
11045>>>Register_Function createComment String sValue Returns Handle
11045>>>Register_Function createDocumentFragment Returns Handle
11045>>>Register_Function createElement String sTagName Returns Handle
11045>>>Register_Function createEntityReference String sEntityName Returns Handle
11045>>>Register_Function createNode Integer iNodeType String sName String sNameSpace Returns Handle
11045>>>Register_Function createProcessingInstruction String sTarget String sData Returns Handle
11045>>>Register_Function createTextNode String sData Returns Handle
11045>>>
11045>>>Register_Function ChangeNodeType Integer iTypeOfNode Integer bSetInterface Returns Handle
11045>>>
11045>>>
11045>>>//          Part 1:  Base Document Logic Specialized For Templates
11045>>>
11045>>>//
11045>>>//  XML Collections
11045>>>//
11045>>>//  Collection mixin has common functions to both node lists and named node maps
11045>>>//
11045>>>
11045>>>// This provides functions required of all XMLDOM objects.
11045>>>//
11045>>>Class cXMLDOMMixin is a Mixin
11046>>>    
11046>>>    // Create an XML object of passed class Id and bind passed interface. returns
11046>>>    // the object handle. All dynamic XML object can be created using this syntax
11046>>>    
11046>>>    Function CreateXMLObject Integer iClassId Handle hinfXMLInterface Returns Handle
11048>>>        Handle hoId hoDocument
11048>>>        // We will always create objects at the DOMDocument level.
11048>>>        Get DocumentObject to hoDocument
11049>>>        If (hoDocument=0) Begin  // this should never happen.
11051>>>            Error DFERR_XML_INTERNAL_ERROR C_$XmlFailedNoDocObject
11052>>>>
11052>>>            Function_Return 0
11053>>>        End
11053>>>>
11053>>>        If hinfXMLInterface Begin
11055>>>            Get Create of hoDocument iClassId to hoID
11056>>>            Set XMLInterface of hoID to hinfXMLInterface
11057>>>        End
11057>>>>
11057>>>        Function_Return hoID
11058>>>    End_Function
11059>>>    
11059>>>    // create an XML Node object based on the interface type.
11059>>>    // this will convert the interface to the proper type and will create
11059>>>    // an appropriate DF object.
11059>>>    // This requires that a DocumentObject exists
11059>>>    
11059>>>    Function CreateXMLNode Handle hinfc Returns Handle
11061>>>        Integer iType iClassId
11061>>>        Handle  hoDocument hoNode
11061>>>        // Get the node type of the infc handle w/o creating a DF object
11061>>>        Move (invokexml(DF_IXMLDOMNODE, GET_piNodeType, hinfc, 0, 0, 0, 0)) to iType
11062>>>        Move (invokexml(DF_IXMLDOMNODE, GET_ChangeNodeType, hinfc, iType, 1, 0, 0)) to hInfc
11063>>>        If (hinfc=0) Begin
11065>>>            // this should not happen and we would need to know about this.
11065>>>            Error DFERR_XML_INTERNAL_ERROR (C_$XmlFailedNoDocObject + String(iType))
11066>>>>
11066>>>            Function_Return 0
11067>>>        End
11067>>>>
11067>>>        Get DocumentObject to hoDocument
11068>>>        // you can augment your class IDs in a single place.
11068>>>        Get NodeClassId of hoDocument iType to iClassId
11069>>>        Get CreateXMLObject of hoDocument iClassId hinfc to hoNode
11070>>>        
11070>>>        Function_Return hoNode
11071>>>    End_Function
11072>>>    
11072>>>    
11072>>>    // Change object's class. This let's you change the class id of an object
11072>>>    // on an object by object basis. This would let you create nodes (e.g. elements)
11072>>>    // that have a custom interface for each node type. Normally, this would be sent
11072>>>    // after a node has been created using one of the default classes
11072>>>    Function ChangeNodeClass Handle hoNode Integer iClassID Returns Handle
11074>>>        Integer iType
11074>>>        Handle  hinfcNew
11074>>>        Get piNodeType of hoNode to iType
11075>>>        Get ChangeNodeType of hoNode iType False to hInfcNew
11076>>>        Send Destroy to hoNode // destroy object and old infc handle.
11077>>>        Get CreateXMLObject iClassId hinfcNew to hoNode
11078>>>        Function_Return hoNode
11079>>>    End_Function
11080>>>    
11080>>>End_Class
11081>>>
11081>>>
11081>>>Class cXMLDOMCollectionMixin is a Mixin
11082>>>    
11082>>>    Import_Class_Protocol cXMLDOMMixin
11083>>>    
11083>>>    //  Returns number of items in the collection
11083>>>    //
11083>>>    Function NodeListLength Returns Integer
11085>>>        Integer iLength
11085>>>        Get piLength to iLength
11086>>>        Function_Return iLength
11087>>>    End_Function
11088>>>    
11088>>>    // Returns an XML node object for pass item
11088>>>    //
11088>>>    Function CollectionNode Integer I Returns Handle
11090>>>        Handle hoNewNode
11090>>>        Handle infcItem
11090>>>        Get phItem i to infcItem
11091>>>        If (infcItem) ;            Get CreateXMLNode infcItem to hoNewNode
11094>>>        Function_Return hoNewNode
11095>>>    End_Function
11096>>>    
11096>>>    
11096>>>End_Class
11097>>>
11097>>>// Simple declarations of collections.
11097>>>
11097>>>Class cXMLDOMNodeList is a BaseXmlDomNodeList
11098>>>    Import_Class_Protocol cXMLDOMCollectionMixin
11099>>>End_Class
11100>>>
11100>>>Class cXMLDOMNamedNodeMap is a BaseXmlDomNamedNodeMap
11101>>>    
11101>>>    Import_Class_Protocol cXMLDOMCollectionMixin
11102>>>    
11102>>>    // returns a node attribute that matches passed name, zero if none
11102>>>    Function NamedNode String sName Returns Handle
11104>>>        Handle hoNewNode
11104>>>        Handle infcItem
11104>>>        Get NamedItem sName to infcItem
11105>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
11108>>>        Function_Return hoNewNode
11109>>>    End_Function
11110>>>    
11110>>>    // Adds or changes a node attribute
11110>>>    // This should return the passed object Id which is now bound to the attribute. If an error, returns 0
11110>>>    Function SetNamedNode Handle hoNode Returns Handle
11112>>>        Handle hinfcNode hinfcItem
11112>>>        Get XMLInterface of hoNode to hinfcNode // node of passed attribute
11113>>>        Get SetNamedItem hinfcNode to hinfcItem
11114>>>        If hinfcItem ;            Set XMLInterface of hoNode to hinfcItem
11117>>>        Else ;            Move 0 to hoNode // zero indicates error
11119>>>        Function_Return hoNode
11120>>>    End_Function
11121>>>    
11121>>>    // removes named attribute, Returns handle of removed node or zero if not found.
11121>>>    // Note that returned object must be disposed of or moved somewhere else.
11121>>>    Function RemoveNamedNode String sName Returns Handle
11123>>>        Handle hoNewNode
11123>>>        Handle infcItem
11123>>>        Get RemoveNamedItem sName to infcItem
11124>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
11127>>>        Function_Return hoNewNode
11128>>>    End_Function
11129>>>    
11129>>>    Function QualifiedNode String sNameSpace String sBaseName Returns Handle
11131>>>        Handle hoNewNode
11131>>>        Handle infcItem
11131>>>        Get QualifiedItem  sBaseName sNameSpace  to infcItem
11132>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
11135>>>        Function_Return hoNewNode
11136>>>    End_Function
11137>>>    
11137>>>    Function RemoveQualifiedNode String sNameSpace String sBaseName Returns Handle
11139>>>        Handle hoNewNode
11139>>>        Handle infcItem
11139>>>        Get RemoveQualifiedItem sBaseName sNameSpace to infcItem
11140>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
11143>>>        Function_Return hoNewNode
11144>>>    End_Function
11145>>>    
11145>>>End_Class
11146>>>
11146>>>
11146>>>
11146>>>// Mixin for nodes.
11146>>>//
11146>>>//  First the declaration of functions that have no object references.
11146>>>//
11146>>>
11146>>>
11146>>>Class cXMLDOMNodeMixin is a Mixin
11147>>>    
11147>>>    Import_Class_Protocol cXMLDOMMixin
11148>>>    
11148>>>    //  Append Node to the end of list. Returns passed Object handle if Ok, 0 if error
11148>>>    
11148>>>    Function AppendNode Handle hoNode Returns Handle
11150>>>        Handle hinfcNode
11150>>>        Handle infcReturned
11150>>>        // Get COM Interface to call Append child.
11150>>>        Get XMLInterface of hoNode to hinfcNode
11151>>>        If (hinfcNode=0) ;            Function_Return 0
11154>>>        Get AppendChild hinfcNode to infcReturned
11155>>>        // Interface returned is stored in DataFlex object.
11155>>>        If (infcReturned=0) ;            Function_Return 0
11158>>>        Set XMLInterface of hoNode to infcReturned
11159>>>        Function_Return hoNode
11160>>>    End_Function
11161>>>    
11161>>>    //  Insert NewNode before Node. Returns passed newnode Object handle if Ok, 0 if error
11161>>>    
11161>>>    Function InsertBeforeNode Handle hoNewNode Handle hoNode Returns Handle
11163>>>        Handle hinfcNewNode hinfcNode hoRefNode infcReturned
11163>>>        Integer iType
11163>>>        // DOM says if no refnode argument passed or it is 0, append to end
11163>>>        If (Num_Arguments=1) ;            Move 0 to hoRefNode
11166>>>        Else ;            Move hoNode to hoRefNode
11168>>>        Get XMLInterface of hoNewNode to hinfcNewNode
11169>>>        If (hinfcNewNode=0) ;            Function_Return 0
11172>>>        If hoRefNode Begin
11174>>>            Get XMLInterface of hoRefNode to hinfcNode
11175>>>            If (hinfcNode=0) ;                Function_Return 0
11178>>>        End
11178>>>>
11178>>>        Get InsertBefore hinfcNewNode hinfcNode to infcReturned
11179>>>        If (infcReturned=0) ;            Function_Return 0
11182>>>        // Interface returned is stored in DataFlex object.
11182>>>        Set XMLInterface of hoNewNode to infcReturned
11183>>>        Function_Return hoNewNode
11184>>>    End_Function
11185>>>    
11185>>>    //  Remove Node. Returns object Id of removed node, zero if error
11185>>>    //  Important: The node is not destroyed! This lets you move it elsewhere if you want
11185>>>    
11185>>>    Function RemoveNode Handle hoNode Returns Handle
11187>>>        Handle hInfcNode
11187>>>        Get XMLInterface of hoNode to hInfcNode
11188>>>        If (hinfcNode=0) ;            Function_Return 0
11191>>>        Get RemoveChild hInfcNode to hinfcNode
11192>>>        If (hinfcNode=0) ;            Function_Return 0
11195>>>        Set XMLInterface of hoNode to hinfcNode
11196>>>        Function_Return hoNode
11197>>>    End_Function
11198>>>    
11198>>>    //  Replace Node. Returns object Id of replaced node, zero if error
11198>>>    //  Important: The replaced node is not destroyed! This lets you move it elsewhere if you want
11198>>>    
11198>>>    Function ReplaceNode Handle hoNewNode Handle hoNodeToReplace Returns Handle
11200>>>        Handle hInfcNewNode hinfcNodetoReplace hinfcNode
11200>>>        Get XMLInterface of hoNewNode       to hInfcNewNode
11201>>>        Get XMLInterface of hoNodetoReplace to hInfcNodetoreplace
11202>>>        If (hinfcNewNode=0 or hInfcNodeToReplace=0) ;            Function_Return 0
11205>>>        Get ReplaceChild hInfcNewNode hinfcNodeToReplace to hinfcNode
11206>>>        If (hinfcNode=0) ;            Function_Return 0
11209>>>        Set XMLInterface of hoNodetoReplace to hinfcNode
11210>>>        Function_Return hoNodetoReplace
11211>>>    End_Function
11212>>>    
11212>>>    // Remove the named node. Returns handle to removed node. You must destroy
11212>>>    // or move this removed object as needed
11212>>>    
11212>>>    Function RemoveNamedNode String sQueryString Returns Handle
11214>>>        Handle hoNode
11214>>>        Handle hInfcTemplate hinfcNode
11214>>>        Integer iRet
11214>>>        Get SelectSingleNode sQueryString to hinfcTemplate
11215>>>        If (hinfcTemplate) Begin
11217>>>            // Remove child returns an interface to the disassociated node.
11217>>>            // It should be disposed by setting it to an object and then calling destroy
11217>>>            Get RemoveChild hInfcTemplate to hInfcNode
11218>>>            // Even if hInfcTemplate and hInfcNode are the same their reference count will be incremented.
11218>>>            // Therefore we must destroy one the interfaces which will decrement the reference count thus
11218>>>            // avoding a memory leak
11218>>>            Move (invokexml(DF_IXMLDOMNODE, DESTROY_XML_INTERFACE, hInfcTemplate, 0, 0, 0, 0)) to iRet
11219>>>            If hInfcNode ;                Get CreateXMLNode hinfcNode to hoNode
11222>>>        End
11222>>>>
11222>>>        Function_Return hoNode
11223>>>    End_Function
11224>>>    
11224>>>    // This function creates a clone of the passed Node. if bRecurse all child nodes are also
11224>>>    // cloned. The object Id of the new clone object is returned.
11224>>>    // The interface of the object returned can be used in AppendChild to add
11224>>>    // the node to the XML Document.
11224>>>    
11224>>>    Function CloneNode Integer bRecurse Returns Handle
11226>>>        Handle hoNewNode
11226>>>        Handle hinfcNewNode
11226>>>        Get CloneInfcNode (If(bRecurse,-1,0)) to hinfcNewNode
11227>>>        If hinfcNewNode ;            Get CreateXMLNode hinfcNewNode to hoNewNode
11230>>>        Function_Return hoNewNode
11231>>>    End_Function
11232>>>    
11232>>>    //  Create a collection of all nodes. returns handle of a cXMLDomNodeList
11232>>>    
11232>>>    Function ChildNodes Returns Handle
11234>>>        Handle infcNodeList
11234>>>        Handle hoNodeList
11234>>>        Get phChildNodes to infcNodeList
11235>>>        If (infcNodeList) ;            Get CreateXMLObject U_cXMLDOMNodeList infcNodeList to hoNodeList
11238>>>        Function_Return hoNodeList
11239>>>    End_Function
11240>>>    
11240>>>    //  Create a collection of all attributes. returns handle of a cXMLDomNodeMapList
11240>>>    
11240>>>    Function AttributeNodes Returns Handle
11242>>>        Handle hoCollectionId   // Object to hold collection
11242>>>        Handle hinfcAttributes  // XML Interface for collection
11242>>>        Get phAttributes to hinfcAttributes
11243>>>        If (hinfcAttributes) ;            Get CreateXMLObject U_cXMLDOMNamedNodeMap hinfcAttributes to hoCollectionId
11246>>>        Function_Return hoCollectionId
11247>>>    End_Function
11248>>>    
11248>>>    //  Create a collection of all attributes for the temporary attribute node object.
11248>>>    //  Using this saves a small amount of time creating and destroying this object but
11248>>>    //  it must be used with care. This binding is temporary!
11248>>>    Function TempAttributeNodes Returns Handle
11250>>>        Handle hoCollectionId hoDocument
11250>>>        Handle hinfcAttributes  // XML Interface for collection
11250>>>        Get phAttributes to hinfcAttributes
11251>>>        If (hinfcAttributes) Begin
11253>>>            Get DocumentObject to hoDocument
11254>>>            Get phoTempDomNodeMap of hoDocument to hoCollectionId
11255>>>            Set XMLInterface of hoCollectionId to hinfcAttributes
11256>>>        End
11256>>>>
11256>>>        Function_Return hoCollectionId
11257>>>    End_Function
11258>>>    
11258>>>    
11258>>>    // Returns a collection of just elements
11258>>>    
11258>>>    Function ElementNodes String sQueryString Returns Handle
11260>>>        Handle hoNodeList
11260>>>        Handle hinfcNodeList
11260>>>        Get ElementsByTagName sQueryString to hinfcNodeList
11261>>>        If (hinfcNodeList <> 0) ;            Get CreateXMLObject U_cXMLDOMNodeList hinfcNodeList to hoNodeList
11264>>>        Function_Return hoNodeList
11265>>>    End_Function
11266>>>    
11266>>>    
11266>>>    
11266>>>    // Return object handle for query.
11266>>>    
11266>>>    Function FindNode String sQueryString Returns Handle
11268>>>        Handle hoNode
11268>>>        Handle hinfcNode
11268>>>        Get SelectSingleNode sQueryString to hinfcNode
11269>>>        If (hinfcNode <> 0) ;            Get CreateXMLNode hInfcNode to hoNode
11272>>>        Function_Return hoNode
11273>>>    End_Function
11274>>>    
11274>>>    // Return object handle for a collection node.
11274>>>    
11274>>>    
11274>>>    Function FindNodeList String sQueryString Returns Handle
11276>>>        Handle hoNodeList
11276>>>        Handle hinfcNodeList
11276>>>        Get SelectNodes sQueryString to hinfcNodeList
11277>>>        If (hinfcNodeList <> 0) ;            Get CreateXMLObject U_cXMLDOMNodeList hinfcNodeList to hoNodeList
11280>>>        Function_Return hoNodeList
11281>>>    End_Function
11282>>>    
11282>>>    // The CreatexxxxxNode messages creates an node object for the type specified. Both
11282>>>    // the interface and the object or of the correct type (i.e. element, comment)
11282>>>    // These all return an object handle which can be used to place the object via
11282>>>    // appendNode or InsertBeforeNode
11282>>>    
11282>>>    // This function creates a child element, returning a dataflex object.
11282>>>    // The interface of the object returned can be used in AppendChild to add
11282>>>    // the element to the XML Document.
11282>>>    
11282>>>    Function CreateElementNode String sTagName String sValue Returns Handle
11284>>>        Handle hoNewElement
11284>>>        Handle hoDocumentObject
11284>>>        Handle infcNewElement
11284>>>        Integer iClassId
11284>>>        // The DataFlex objects are created inside the nodes (elements).
11284>>>        // Create an element in the document and assign its interface to the new DF object.
11284>>>        Get DocumentObject to hoDocumentObject
11285>>>        Get createElement of hoDocumentObject sTagName to infcNewElement
11286>>>        If infcNewElement Begin // if there was an error, no infc handle would be returned
11288>>>            Get NodeClassId of hoDocumentObject NODE_ELEMENT to iClassId
11289>>>            Get CreateXMLObject iClassId infcNewElement to hoNewElement
11290>>>            If hoNewElement ; // very unlikely this will be zero                Set psText of hoNewElement to sValue
11293>>>        End
11293>>>>
11293>>>        Function_Return hoNewElement
11294>>>    End_Function
11295>>>    
11295>>>    // This function creates an attribute in a document. Attributes are _NOT_ children of an element.
11295>>>    // A DataFlex object is returned. An attribute can be added to an xml document using
11295>>>    // get AddAttributeNode.
11295>>>    
11295>>>    Function CreateAttributeNode String sName String sValue Returns Handle
11297>>>        Handle hoNewAttribute
11297>>>        Handle hoDocumentObject
11297>>>        Handle infcNewAttribute
11297>>>        Integer iClassId
11297>>>        Get DocumentObject to hoDocumentObject
11298>>>        // Create an Attribute in the document and assign its interface to the new DF object.
11298>>>        Get createAttribute of hoDocumentObject sName to infcNewAttribute
11299>>>        If infcNewAttribute Begin // if there was an error, no infc handle would be returned
11301>>>            Get NodeClassId of hoDocumentObject NODE_ATTRIBUTE to iClassId
11302>>>            Get CreateXMLObject iClassId infcNewAttribute to hoNewAttribute
11303>>>            // Set the value of the attribute.
11303>>>            If hoNewAttribute ; // very unlikely this will be 0                Set psText of hoNewAttribute to sValue
11306>>>        End
11306>>>>
11306>>>        Function_Return hoNewAttribute
11307>>>    End_Function
11308>>>    
11308>>>    // This function creates a child comment, returning a dataflex object.
11308>>>    // The interface of the object returned can be used in AppendChild to add
11308>>>    // the comment to the XML Document.
11308>>>    
11308>>>    Function CreateChildComment String sValue Returns Handle
11310>>>        Handle hoNewComment
11310>>>        Handle hoDocumentObject
11310>>>        Handle infcNewComment
11310>>>        Integer iClassID
11310>>>        Get DocumentObject to hoDocumentObject
11311>>>        // Create an Comment in the document and assign its interface to the new DF object.
11311>>>        Get createComment of hoDocumentObject sValue to infcNewComment
11312>>>        If infcNewComment Begin // if there was an error, no infc handle would be returned
11314>>>            Get NodeClassId of hoDocumentObject NODE_COMMENT to iClassId
11315>>>            Get CreateXMLObject iClassId infcNewComment to hoNewComment
11316>>>            If hoNewComment ; // very unlikely this will be 0                Set psText of hoNewComment to sValue
11319>>>        End
11319>>>>
11319>>>        Function_Return hoNewComment
11320>>>    End_Function
11321>>>    
11321>>>    // This function creates a child processing instruction, returning a dataflex object.
11321>>>    // The interface of the object returned can be used in AppendChild to add
11321>>>    // the processing instruction to the XML Document.
11321>>>    
11321>>>    Function CreateChildProcessingInstruction String sTarget String sValue Returns Handle
11323>>>        Handle hoNewProcessingInstruction
11323>>>        Handle hoDocumentObject
11323>>>        Handle infcNewProcessingInstruction
11323>>>        Integer iClassID
11323>>>        Get DocumentObject to hoDocumentObject
11324>>>        // Create an ProcessingInstruction in the document and assign its interface to the new DF object.
11324>>>        Get createProcessingInstruction of hoDocumentObject sTarget sValue to infcNewProcessingInstruction
11325>>>        If infcNewProcessingInstruction  Begin // if there was an error, no infc handle would be returned
11327>>>            Get NodeClassId of hoDocumentObject NODE_PROCESSING_INSTRUCTION to iClassId
11328>>>            Get CreateXMLObject iClassID infcNewProcessingInstruction to hoNewProcessingInstruction
11329>>>        End
11329>>>>
11329>>>        Function_Return hoNewProcessingInstruction
11330>>>    End_Function
11331>>>    
11331>>>    // This function creates a child text node, returning a dataflex object.
11331>>>    // The interface of the object returned can be used in AppendChild to add
11331>>>    // the text node to the XML Document.
11331>>>    
11331>>>    Function CreateChildTextNode String sValue Returns Handle
11333>>>        Handle hoNewTextNode
11333>>>        Handle hoDocumentObject
11333>>>        Handle infcNewTextNode
11333>>>        Integer iClassID
11333>>>        Get DocumentObject to hoDocumentObject
11334>>>        // Create an TextNode in the document and assign its interface to the new DF object.
11334>>>        Get createTextNode of hoDocumentObject sValue to infcNewTextNode
11335>>>        If infcNewTextNode Begin // if there was an error, no infc handle would be returned
11337>>>            Get NodeClassId of hoDocumentObject NODE_TEXT to iClassId
11338>>>            Get CreateXMLObject iClassId infcNewTextNode to hoNewTextNode
11339>>>        End
11339>>>>
11339>>>        Function_Return hoNewTextNode
11340>>>    End_Function
11341>>>    
11341>>>    // This function creates a cdata text node, returning a dataflex object.
11341>>>    // The interface of the object returned can be used in AppendChild to add
11341>>>    // the cdata node to the XML Document.
11341>>>    
11341>>>    Function CreateCDATASectionNode String sValue Returns Handle
11343>>>        Handle hoNewNode
11343>>>        Handle hoDocumentObject
11343>>>        Handle infcNewNode
11343>>>        Integer iClassId
11343>>>        // The DataFlex objects are created inside the nodes (elements).
11343>>>        // Create an element in the document and assign its interface to the new DF object.
11343>>>        Get DocumentObject to hoDocumentObject
11344>>>        Get createCDATASection of hoDocumentObject sValue to infcNewNode
11345>>>        If infcNewNode Begin
11347>>>            Get NodeClassId of hoDocumentObject NODE_CDATA_SECTION to iClassId
11348>>>            Get CreateXMLObject iClassId infcNewNode to hoNewNode
11349>>>        End
11349>>>>
11349>>>        Function_Return hoNewNode
11350>>>    End_Function
11351>>>    
11351>>>    // Create a document fragment.  Document fragments can be used to house nodes temporarily. When
11351>>>    // You append or insert a document fragment (appendNode InsertBeforeNode) child nodes are appended
11351>>>    // to the destination object and not the fragment node itself. This is useful!
11351>>>    
11351>>>    Function CreateDocumentFragmentNode Returns Handle
11353>>>        Handle hoNew
11353>>>        Handle hoDocumentObject
11353>>>        Handle infcNew
11353>>>        Integer iClassID
11353>>>        Get DocumentObject to hoDocumentObject
11354>>>        // Create an Comment in the document and assign its interface to the new DF object.
11354>>>        Get createDocumentFragment of hoDocumentObject to infcNew
11355>>>        If infcNew Begin // if there was an error, no infc handle would be returned
11357>>>            Get NodeClassId of hoDocumentObject NODE_DOCUMENT_FRAGMENT to iClassId
11358>>>            Get CreateXMLObject iClassId infcNew to hoNew
11359>>>        End
11359>>>>
11359>>>        Function_Return hoNew
11360>>>    End_Function
11361>>>    
11361>>>    //  Create a Node of any passed Type (e.g. Node_element). Normally you don't need this as there are
11361>>>    //  specific messages to do this for each node type. Node that this lets you pass namespaces as a separate
11361>>>    //  parameter. With all of the other messages (e.g. createElementNode) you pass namespaces as prefixed to
11361>>>    // the tagname (e.g. Get CreateElementNode "MyNameSpace:MyTag" "MyValue" to hoEle)
11361>>>    
11361>>>    Function CreateChildNode Integer iNodeType String sTagName String sNameSpace Returns Handle
11363>>>        Handle hoNewNode hoDocumentObject
11363>>>        Handle infcNewNode
11363>>>        Integer iClassid iType
11363>>>        Get DocumentObject to hoDocumentObject
11364>>>        Get NodeClassId iNodeType to iClassId
11365>>>        If (iClassId<>0) Begin
11367>>>            // Create a node in the document and assign its interface to the new DF object.
11367>>>            Get createNode of hoDocumentObject iNodeType sTagName sNameSpace to infcNewNode
11368>>>            // this is required to force the interface type to be correct.
11368>>>            Move (invokexml(DF_IXMLDOMNODE, GET_piNodeType, infcNewNode, 0, 0, 0, 0)) to iType
11369>>>            Move (invokexml(DF_IXMLDOMNODE, GET_ChangeNodeType, infcNewNode, iType, 1, 0, 0)) to infcNewNode
11370>>>            
11370>>>            If infcNewNode ;                Get CreateXMLObject iClassId infcNewNode to hoNewNode
11373>>>        End
11373>>>>
11373>>>        Function_Return hoNewNode
11374>>>    End_Function
11375>>>    
11375>>>    
11375>>>    
11375>>>    // The Addxxxxx messages create a new node and appends it to the list. When used as a function,
11375>>>    // the object handle is returned and must be disposed of later by the programmer.
11375>>>    // When used as a procedure, the object is destroyed--it just does it and is done.
11375>>>    
11375>>>    Function AddElement String sTagName String sValue Returns Handle
11377>>>        Handle hoNewElement
11377>>>        Get CreateElementNode sTagName sValue to hoNewElement
11378>>>        If hoNewElement ;            Get AppendNode hoNewElement to hoNewElement
11381>>>        Function_Return hoNewElement
11382>>>    End_Function
11383>>>    
11383>>>    Procedure AddElement String sTagName String sValue
11385>>>        Handle hoNewElement
11385>>>        Get AddElement sTagName sValue to hoNewElement
11386>>>        If hoNewElement ;            Send Destroy to hoNewElement
11389>>>        Else ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddElement"))
11391>>>    End_Procedure
11392>>>    
11392>>>    // this returns the object, This is often needed
11392>>>    Function CreateElementNodeNS String sNameSpace String sTagName String sValue Returns Handle
11394>>>        Handle hoNewElement
11394>>>        Get CreateChildNode NODE_ELEMENT sTagName sNameSpace to hoNewElement
11395>>>        If (hoNewElement and sValue<>"") ;            Set psText of hoNewElement to sValue
11398>>>        Function_Return hoNewElement
11399>>>    End_Function
11400>>>    
11400>>>    
11400>>>    // this returns the object, This is often needed
11400>>>    Function AddElementNS String sNameSpace String sTagName String sValue Returns Handle
11402>>>        Handle hoNewElement
11402>>>        Get CreateElementNodeNS sNameSpace sTagName sValue to hoNewElement
11403>>>        If hoNewElement Begin
11405>>>            Get AppendNode hoNewElement to hoNewElement
11406>>>        End
11406>>>>
11406>>>        Function_Return hoNewElement
11407>>>    End_Function
11408>>>    
11408>>>    Procedure AddElementNS String sNameSpace String sTagName String sValue
11410>>>        Handle hoNewElement
11410>>>        Get AddElementNS sNameSpace sTagName sValue to hoNewElement
11411>>>        If hoNewElement ;            Send Destroy to hoNewElement
11414>>>        Else ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddElementNS"))
11416>>>    End_Procedure
11417>>>    
11417>>>    Function AddAttributeNode Handle hoNode Returns Handle
11419>>>        Handle hInfc
11419>>>        Get Set_AttributeNode (XmlInterface(hoNode)) to hInfc
11420>>>        If hInfc ; // if ret value we have a replacement            Set XmlInterface of hoNode to hInfc
11423>>>        Function_Return hoNode
11424>>>    End_Function
11425>>>    
11425>>>    Function AttributeValueNode String sName Returns Handle
11427>>>        Handle hInfc
11427>>>        Handle hoNode
11427>>>        Get AttributeNode sName to hInfc
11428>>>        If hInfc ; // if ret value we have a replacement            Get CreateXMLNode hInfc to hoNode
11431>>>        Function_Return hoNode
11432>>>    End_Function
11433>>>    
11433>>>    Function AttributeValueNodeNS String sNameSpace String sBaseName Returns Handle
11435>>>        Handle hoAttrs hoAttr
11435>>>        String sValue
11435>>>        Get TempAttributeNodes to hoAttrs
11436>>>        If hoAttrs Begin
11438>>>            Get QualifiedNode of hoAttrs sNamespace sBaseName to hoAttr
11439>>>            Set XMLInterface of hoAttrs to 0
11440>>>        End
11440>>>>
11440>>>        Function_Return hoAttr
11441>>>    End_Function
11442>>>    
11442>>>    
11442>>>    Function CreateAttributeNodeNS String sNameSpace String sName String sValue Returns Handle
11444>>>        Handle hoNewAttribute
11444>>>        Get CreateChildNode NODE_ATTRIBUTE sName sNameSpace to hoNewAttribute
11445>>>        If hoNewAttribute ;            Set psText of hoNewAttribute to sValue
11448>>>        Function_Return hoNewAttribute
11449>>>    End_Function
11450>>>    
11450>>>    Procedure AddAttributeNS String sNameSpace String sName String sValue
11452>>>        Handle hoNode
11452>>>        Get CreateAttributeNodeNS sNameSpace sName sValue to hoNode
11453>>>        If hoNode Begin
11455>>>            Get AddAttributeNode hoNode to hoNode
11456>>>            If hoNode ;                Send Destroy of hoNode
11459>>>        End
11459>>>>
11459>>>        Else ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddAttributeNS"))
11461>>>    End_Procedure
11462>>>    
11462>>>    
11462>>>    // This function encapsulates creation and addition of attributes to a node.
11462>>>    // should only work with element class
11462>>>    Procedure AddAttribute String sName String sValue
11464>>>        Set AttributeValue sName to sValue
11465>>>    End_Procedure
11466>>>    
11466>>>    // This function encapsulates creation and addition of comments to a node.
11466>>>    // The return value is a Boolean that is currently unused.
11466>>>    
11466>>>    Procedure AddChildComment String sValue
11468>>>        Handle hoNewNode
11468>>>        Get createChildComment sValue to hoNewNode
11469>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddChildComment"))
11472>>>        Else Begin
11473>>>            Get AppendNode hoNewNode to hoNewNode
11474>>>            Send Destroy to hoNewNode
11475>>>        End
11475>>>>
11475>>>    End_Procedure
11476>>>    
11476>>>    // This function encapsulates creation and addition of processing instructions to a node.
11476>>>    // The return value is a Boolean that is currently unused.
11476>>>    
11476>>>    Procedure AddChildProcessingInstruction String sTarget String sValue
11478>>>        Handle hoNewNode
11478>>>        Get createChildProcessingInstruction sTarget sValue to hoNewNode
11479>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddChildProcessingInstruction"))
11482>>>        Else Begin
11483>>>            Get AppendNode hoNewNode to hoNewNode
11484>>>            Send Destroy to hoNewNode
11485>>>        End
11485>>>>
11485>>>    End_Procedure
11486>>>    
11486>>>    
11486>>>    // This function encapsulates creation and addition of text nodes to a node.
11486>>>    // The return value is a Boolean that is currently unused.
11486>>>    
11486>>>    Procedure AddChildTextNode String sValue
11488>>>        Handle hoNewNode
11488>>>        Get createChildTextNode sValue to hoNewNode
11489>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddChildTextNode"))
11492>>>        Else Begin
11493>>>            Get AppendNode hoNewNode to hoNewNode
11494>>>            Send Destroy to hoNewNode
11495>>>        End
11495>>>>
11495>>>    End_Procedure
11496>>>    
11496>>>    // This procedure encapsulates creation and addition of cdata text nodes to a node.
11496>>>    Procedure AddCDataSection String sValue
11498>>>        Handle hoNewNode
11498>>>        Get CreateCDATASectionNode sValue to hoNewNode
11499>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddCDataSection"))
11502>>>        Else Begin
11503>>>            Get AppendNode hoNewNode to hoNewNode
11504>>>            Send Destroy to hoNewNode
11505>>>        End
11505>>>>
11505>>>    End_Procedure
11506>>>    
11506>>>    
11506>>>    Function AddChildNode Integer iNodeType String sTagName String sNameSpace Returns Handle
11508>>>        Handle hoNewNode
11508>>>        Handle hoDocumentObject
11508>>>        Get DocumentObject to hoDocumentObject
11509>>>        Get createChildNode of hoDocumentObject iNodeType sTagName sNamespace to hoNewNode
11510>>>        If hoNewNode ;            Get AppendNode hoNewNode to hoNewNode
11513>>>        Function_Return hoNewNode
11514>>>    End_Function
11515>>>    
11515>>>    // don't use the runtime/msxml version of this. Instead just return the
11515>>>    // first text from the first child node. This is much faster
11515>>>    Function psText Returns String
11517>>>        Handle hText
11517>>>        String sValue
11517>>>        Get phFirstChild to hText
11518>>>        Get InfcNodeValue hText to sValue
11519>>>        Function_Return sValue
11520>>>    End_Function
11521>>>    
11521>>>    // Use this to call the internal Text property. This returns all text for all child
11521>>>    // node. You rarely would want to do this. The is uses the msxml psText which can
11521>>>    // get slow with very large files. If for some reason you need all of the child node's
11521>>>    // text and the file is large, you might want to consider doing this process manually.
11521>>>    Function AllChildNodesText Returns String
11523>>>        String sValue
11523>>>        Forward Get psText to sValue
11525>>>        Function_Return sValue
11526>>>    End_Function
11527>>>    
11527>>>    // return the interface NodeValue without having to create a
11527>>>    // new object. This also disposes the hInfc interface
11527>>>    Function InfcNodeValue Handle hInfc Returns String
11529>>>        Handle hoDocument hoTempNode
11529>>>        String sValue
11529>>>        If (hinfc) Begin
11531>>>            Get DocumentObject to hoDocument
11532>>>            Get phoTempDomNode of hoDocument to hoTempNode
11533>>>            Set XMLInterface of hoTempNode to hInfc
11534>>>            Get psNodeValue of hoTempNode to sValue
11535>>>            // This disposes of hInfc which was passed in. After
11535>>>            // calling this you can no longer use it (which is good).
11535>>>            Set XMLInterface of hoTempNode to 0
11536>>>        End
11536>>>>
11536>>>        Function_Return sValue
11537>>>    End_Function
11538>>>    
11538>>>    // ChildNodeValue is used to get the "value" of an element. This is useful when the element
11538>>>    // only has a single value (similar to an attribute).
11538>>>    
11538>>>    Function ChildNodeValue String sTagName Returns String
11540>>>        Handle hoTempNode hoDocument
11540>>>        Handle hinfcTempNode
11540>>>        String sRetVal
11540>>>        Get SelectSingleNode sTagName to hinfcTempNode
11541>>>        If (hinfcTempNode <> 0) Begin
11543>>>            Get DocumentObject to hoDocument
11544>>>            Get phoTempDomNode of hoDocument to hoTempNode
11545>>>            Set XMLInterface of hoTempNode to hinfcTempNode
11546>>>            Get phFirstChild of hoTempNode to hinfcTempNode
11547>>>            Set XMLInterface of hoTempNode to 0
11548>>>            If hinfcTempNode Begin
11550>>>                Get InfcNodeValue hinfcTempNode to sRetVal
11551>>>            End
11551>>>>
11551>>>        End
11551>>>>
11551>>>        Function_Return sRetVal
11552>>>    End_Function
11553>>>    
11553>>>    // This simple function allows a parent to change the text of one of its elements.
11553>>>    // This actually occurs quite a bit, because (as stated above) lowest level
11553>>>    // elements are frequently used as properties.
11553>>>    //
11553>>>    Procedure SetChildNodeValue String sTagName String sValue
11555>>>        Handle hoTempNode
11555>>>        Handle hinfcTempNode
11555>>>        // Search for the node that matches.
11555>>>        Get SelectSingleNode sTagName to hinfcTempNode
11556>>>        // If no match is found, add a new element with the tag.
11556>>>        If (hinfcTempNode = 0) ;            Send AddElement sTagName sValue
11559>>>        Else Begin
11560>>>            Get CreateXMLObject U_BaseXMLDOMNode hinfcTempNode to hoTempNode
11561>>>            If hoTempNode Begin
11563>>>                // Set the text of the element.
11563>>>                Set psText of hoTempNode to sValue
11564>>>                Send Destroy to hoTempNode
11565>>>            End
11565>>>>
11565>>>            Else ;                Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_SetChildNodeValue"))
11567>>>        End
11567>>>>
11567>>>    End_Procedure
11568>>>    
11568>>>    // These messages are used to allow you to travese through a nodes.
11568>>>    
11568>>>    Function FirstChild Returns Handle
11570>>>        Handle hoChild
11570>>>        Handle hinfcChild
11570>>>        Get phFirstChild  to hinfcChild
11571>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
11574>>>        Function_Return hoChild
11575>>>    End_Function
11576>>>    
11576>>>    Function NextSibling Returns Handle
11578>>>        Handle hoChild
11578>>>        Handle hinfcChild
11578>>>        Get phNextSibling  to hinfcChild
11579>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
11582>>>        Function_Return hoChild
11583>>>    End_Function
11584>>>    
11584>>>    Function PreviousSibling Returns Handle
11586>>>        Handle hoChild
11586>>>        Handle hinfcChild
11586>>>        Get phPreviousSibling  to hinfcChild
11587>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
11590>>>        Function_Return hoChild
11591>>>    End_Function
11592>>>    
11592>>>    Function LastChild Returns Handle
11594>>>        Handle hoChild
11594>>>        Handle hinfcChild
11594>>>        Get phLastChild  to hinfcChild
11595>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
11598>>>        Function_Return hoChild
11599>>>    End_Function
11600>>>    
11600>>>    // return an object that is the parent of the current node
11600>>>    Function ParentNode Returns Handle
11602>>>        Handle hoId
11602>>>        Handle hinfcXMLInterface
11602>>>        Get phParentNode to hinfcXMLInterface
11603>>>        If (hinfcXMLInterface) ;            Get CreateXmlNode hinfcXMLInterface to hoID
11606>>>        Function_Return hoID
11607>>>    End_Function
11608>>>    
11608>>>    // Same as NextSibling except it uses or destroys the current node
11608>>>    //
11608>>>    // optimized version does not destroy/create object unless it needs to.
11608>>>    // if the next node is the same node type we will resuse this object
11608>>>    // else this object is destroyed
11608>>>    Function NextNode Returns Handle
11610>>>        Handle hoNode hoDocument
11610>>>        Handle hInfc
11610>>>        Get phNextSibling to hInfc
11611>>>        If hInfc Begin
11613>>>            Get DocumentObject to hoDocument
11614>>>            Move Self to hoNode
11615>>>            Send BindXMLInfc of hoDocument hInfc (&hoNode)
11616>>>        End
11616>>>>
11616>>>        Else Begin
11617>>>            Send Destroy
11618>>>            Move 0 to hoNode
11619>>>        End
11619>>>>
11619>>>        Function_Return hoNode
11620>>>    End_Function
11621>>>    
11621>>>    
11621>>>    // Enumerate through all nodes.
11621>>>    
11621>>>    Procedure EnumerateNodes Integer iMsg Handle hoReceiver String sVal1 String sVal2
11623>>>        Integer i iLen
11623>>>        Handle hoNode
11623>>>        Handle hoNodeCollection
11623>>>        Get ChildNodes to hoNodeCollection
11624>>>        If (hoNodeCollection <> 0) Begin
11626>>>            Get NodeListLength of hoNodeCollection to iLen
11627>>>            Decrement iLen
11628>>>            For i from 0 to iLen
11634>>>>
11634>>>                // For each record, process its fields.
11634>>>                Get CollectionNode of hoNodeCollection i to hoNode
11635>>>                Send iMsg of hoReceiver hoNode sVal1 sVal2
11636>>>                Send Destroy of hoNode
11637>>>            Loop
11638>>>>
11638>>>            Send Destroy of hoNodeCollection
11639>>>        End
11639>>>>
11639>>>    End_Procedure
11640>>>    
11640>>>    // Enumerate through all elements.
11640>>>    
11640>>>    Procedure EnumerateElements Integer iMsg Handle hoReceiver String sVal1 String sVal2
11642>>>        Integer i iLen
11642>>>        Handle hoNode
11642>>>        Handle hoNodeCollection
11642>>>        Get ChildNodes to hoNodeCollection
11643>>>        If (hoNodeCollection <> 0) Begin
11645>>>            Get NodeListLength of hoNodeCollection to iLen
11646>>>            Decrement iLen
11647>>>            For i from 0 to iLen
11653>>>>
11653>>>                // For each record, process its fields.
11653>>>                Get CollectionNode of hoNodeCollection i to hoNode
11654>>>                If (piNodeType(hoNode)=NODE_ELEMENT) ;                    Send iMsg of hoReceiver hoNode sVal1 sVal2
11657>>>                Send Destroy of hoNode
11658>>>            Loop
11659>>>>
11659>>>            Send Destroy of hoNodeCollection
11660>>>        End
11660>>>>
11660>>>    End_Procedure
11661>>>    
11661>>>    
11661>>>    // enumerate through all attributes. There is no recurse here because attributes will not
11661>>>    // contain attributes.
11661>>>    
11661>>>    Procedure EnumerateAttributes Integer iMsg Handle hoReceiver String sSomeValue
11663>>>        Integer i iLen
11663>>>        Handle hoNode
11663>>>        Handle hoNodeMapCollection
11663>>>        // we don't use tempattributenodes because we don't know what the enum message will do.
11663>>>        Get AttributeNodes to hoNodeMapCollection
11664>>>        If (hoNodeMapCollection <> 0) Begin
11666>>>            Get NodeListLength of hoNodeMapCollection to iLen
11667>>>            Decrement iLen
11668>>>            For i from 0 to iLen
11674>>>>
11674>>>                // For each record, process its fields.
11674>>>                Get CollectionNode of hoNodeMapCollection i to hoNode
11675>>>                Send iMsg of hoReceiver hoNode sSomeValue
11676>>>                Send Destroy of hoNode
11677>>>            Loop
11678>>>>
11678>>>            Send Destroy of hoNodeMapCollection
11679>>>        End
11679>>>>
11679>>>    End_Procedure
11680>>>    
11680>>>    
11680>>>    Function XSLTransformation Handle hoXSLDocument Returns String
11682>>>        Handle infcXSLStartAt
11682>>>        String sBuffer
11682>>>        // Transformation is of current object using passed XSLDocument.
11682>>>        Get XMLInterface of hoXSLDocument to infcXSLStartAt
11683>>>        Get TransformNode infcXSLStartAt to sBuffer
11684>>>        Function_Return sBuffer
11685>>>    End_Function
11686>>>    
11686>>>    // This allows for transformations not limited to the size of the string buffer
11686>>>    //
11686>>>    // Note that it is up to the programmer to dispose of the memory allocated at pBuffer
11686>>>    // by using the free(pBuffer) function
11686>>>    //
11686>>>    Function XSLTransformationToAddress Handle hoXSLDocument Returns Pointer
11688>>>        Handle infcXSLStartAt
11688>>>        Pointer pBuffer
11688>>>        // Transformation is of current object using passed XSLDocument.
11688>>>        Get XMLInterface of hoXSLDocument to infcXSLStartAt
11689>>>        Get TransformNodeToAddress infcXSLStartAt to pBuffer
11690>>>        Function_Return pBuffer
11691>>>    End_Function
11692>>>    
11692>>>    
11692>>>    // extract base name from string. e.g.: ns:name --> name
11692>>>    //
11692>>>    Function BaseNameFromQName String sName Returns String
11694>>>        Integer iPos
11694>>>        Move (Pos(":",sName)) to iPos
11695>>>        If iPos Begin
11697>>>            Move (remove(sName,1,iPos)) to sName
11698>>>        End
11698>>>>
11698>>>        Function_Return sName
11699>>>    End_Function
11700>>>    
11700>>>    // extract prefix name from string. e.g.: ns:name --> ns
11700>>>    //
11700>>>    Function PrefixNameFromQName String sName Returns String
11702>>>        String sPreFix
11702>>>        Integer iPos
11702>>>        Move (Pos(":",sName)) to iPos
11703>>>        If iPos Begin
11705>>>            Move (Left(sName,iPos-1)) to sPreFix
11706>>>        End
11706>>>>
11706>>>        Function_Return sPreFix
11707>>>    End_Function
11708>>>    
11708>>>    
11708>>>    // Returns true if node is element and namespace and base name match
11708>>>    //
11708>>>    Function IsElementNS String sNamespaceURI String sBaseName Returns Boolean
11710>>>        Function_Return (piNodeType(Self)=NODE_ELEMENT and ;            psNameSpaceURI(Self)=sNamespaceURI and ;            psBaseName(Self)=sBaseName )
11711>>>    End_Function
11712>>>    
11712>>>    // Returns node of first occurence of child node matching namespace and base name
11712>>>    //
11712>>>    Function ChildElementNS String sNameSpaceURI String sBaseName Returns Handle
11714>>>        Handle hoNode
11714>>>        Get FirstChild to hoNode
11715>>>        While (hoNode and not(IsElementNS(hoNode, sNameSpaceURI, sBaseName)))
11719>>>            Get NextNode of hoNode to hoNode
11720>>>        Loop
11721>>>>
11721>>>        Function_Return hoNode
11722>>>    End_Function
11723>>>    
11723>>>    Function NextElementNS String sNameSpaceURI String sBaseName Returns Handle
11725>>>        Handle hoNode
11725>>>        // NextNode may return the same object or it may destroy the object and
11725>>>        // return nothing or a different object
11725>>>        Get NextNode to hoNode
11726>>>        While (hoNode and not(IsElementNS(hoNode, sNameSpaceURI, sBaseName)))
11730>>>            // use of hoNode is required. This can be different than self
11730>>>            Get NextNode of hoNode to hoNode
11731>>>        Loop
11732>>>>
11732>>>        
11732>>>        Function_Return hoNode
11733>>>    End_Function
11734>>>    
11734>>>    
11734>>>    // Returns value (string) first occurence of child node matching namespace and base name
11734>>>    //
11734>>>    Function ChildElementValueNS String sNameSpaceURI String sBaseName Returns String
11736>>>        Handle hoNext
11736>>>        String sText
11736>>>        Get ChildElementNS sNameSpaceURI sBaseName to hoNext
11737>>>        If hoNext Begin
11739>>>            Get psText of hoNext to sText
11740>>>            Send destroy of hoNext
11741>>>        End
11741>>>>
11741>>>        Function_Return sText
11742>>>    End_Function
11743>>>    
11743>>>    Procedure SetChildElementValueNS String sNameSpaceURI String sBaseName String sValue
11745>>>        Handle hoNode
11745>>>        Handle hinfcTempNode
11745>>>        Get ChildElementNS sNameSpaceURI sBaseName to hoNode
11746>>>        If (hoNode=0) Begin
11748>>>            Send AddElementNS sNameSpaceURI sBaseName sValue
11749>>>        End
11749>>>>
11749>>>        Else Begin
11750>>>            Set psText of hoNode to sValue
11751>>>            Send destroy of hoNode
11752>>>        End
11752>>>>
11752>>>    End_Procedure
11753>>>    
11753>>>    // pass a prefix and try to finds its NameSpaceURI. Start at current node and work up to parent.
11753>>>    // This can be useful when a qualified name is found in an attribute value
11753>>>    //
11753>>>    Function PrefixToNamespaceURI String sPrefix Returns String
11755>>>        Handle hoNode
11755>>>        Integer i iNodes
11755>>>        Handle hoNodes hoParentNode hoAttNode
11755>>>        Boolean bDone bParent
11755>>>        String sAttPrefix sName sNameSpace
11755>>>        
11755>>>        Move Self to hoNode
11756>>>        While not bDone
11760>>>            Get TempAttributeNodes of hoNode to hoNodes
11761>>>            If (hoNodes <> 0) Begin
11763>>>                Get NodeListLength of hoNodes to iNodes
11764>>>                For i from 0 to (iNodes-1)
11770>>>>
11770>>>                    // For each record, process its fields.
11770>>>                    Get CollectionNode of hoNodes i to hoAttNode
11771>>>                    Get psPrefix of hoAttNode to sAttPrefix
11772>>>                    Get psBaseName of hoAttNode to sName
11773>>>                    // with legacy msxml, xmlns="foo" returns psPrefix="xmlns" and pbBaseName=""
11773>>>                    // with newer msxml, xmlns="foo" returns psPrefix="" and pbBaseName="xmlns"
11773>>>                    // We handle both cases here.
11773>>>                    
11773>>>                    If ( (sAttPrefix="xmlns" and sName=sPrefix) or ; // if a normal xmlns:xx="foo" match (sPrefix="xx") or a legacy xmlns="foo" match (sPrefix="")                        (sPrefix="" and sAttPrefix="" and sName="xmlns") ) Begin // special test for newer msxml xmlns="foo" match (sPrefix="")
11775>>>                        
11775>>>                        Get Value of hoAttNode to sNameSpace
11776>>>                        Move True to bDone
11777>>>                        Move (iNodes-1) to i
11778>>>                        
11778>>>                    End
11778>>>>
11778>>>                    
11778>>>                    Send Destroy of hoAttNode
11779>>>                Loop
11780>>>>
11780>>>                Set XMLInterface of hoNodes to 0
11781>>>            End
11781>>>>
11781>>>            
11781>>>            Get ParentNode of hoNode to hoParentNode
11782>>>            If bParent ;                Send destroy of hoNode
11785>>>            If not bDone Begin
11787>>>                If not hoParentNode ;                    Move True to bDone
11790>>>                Else Begin
11791>>>                    Move True to bParent
11792>>>                    Move hoParentNode to hoNode
11793>>>                End
11793>>>>
11793>>>            End
11793>>>>
11793>>>        Loop
11794>>>>
11794>>>        Function_Return sNameSpace
11795>>>    End_Function
11796>>>    
11796>>>    
11796>>>    
11796>>>End_Class
11797>>>
11797>>>// Set up basic inheritance for specialized forms of XML classes.
11797>>>// This needs to be done so we can make objects of these types.
11797>>>
11797>>>Class cXMLDOMElement is a BaseXmlDomElement
11798>>>    Import_Class_Protocol cXMLDOMNodeMixin
11799>>>    
11799>>>    // Should use AddAttributeValue...does same thing
11799>>>    Procedure SetAttributeValue String sName String sValue
11801>>>        Send AddAttribute sName sValue
11802>>>    End_Procedure
11803>>>    
11803>>>    // Note: Get_AttributeValue already there
11803>>>    
11803>>>    Procedure RemoveAttribute String sName
11805>>>        Integer iVal
11805>>>        Get RemoveAttribute sName to iVal
11806>>>    End_Procedure
11807>>>    
11807>>>    Function AttributeValueNS String sNameSpace String sBaseName Returns String
11809>>>        String sValue
11809>>>        Handle hinfcItem
11809>>>        Handle hoDoc hoTempAttributeNodes hoNode
11809>>>        Integer hinfcAttributes
11809>>>        
11809>>>        Get TempAttributeNodes to hoTempAttributeNodes
11810>>>        Get QualifiedItem of hoTempAttributeNodes sBaseName sNameSpace  to hinfcItem
11811>>>        Set XMLInterface of hoTempAttributeNodes to 0
11812>>>        If hinfcItem Begin
11814>>>            Get DocumentObject to hoDoc
11815>>>            Get phoTempDomNode of hoDoc to hoNode
11816>>>            Set XMLInterface of hoNode to hinfcItem
11817>>>            Get psNodeValue of hoNode to sValue
11818>>>            Set XMLInterface of hoNode to 0
11819>>>        End
11819>>>>
11819>>>        Function_Return sValue
11820>>>    End_Function
11821>>>    
11821>>>    Procedure RemoveAttributeNS String sNameSpace String sBaseName
11823>>>        Handle hoAttrs hoAttr
11823>>>        String sValue
11823>>>        Get TempAttributeNodes to hoAttrs
11824>>>        If hoAttrs Begin
11826>>>            Get RemoveQualifiedNode of hoAttrs sNamespace sBaseName to hoAttr
11827>>>            Set XMLInterface of hoAttrs to 0
11828>>>            If hoAttr ;                Send destroy of hoAttr
11831>>>        End
11831>>>>
11831>>>    End_Procedure
11832>>>    
11832>>>End_Class
11833>>>
11833>>>Class cXMLDOMNode is a BaseXmlDomNode
11834>>>    Import_Class_Protocol cXMLDOMNodeMixin
11835>>>End_Class
11836>>>
11836>>>Class cXMLDOMAttribute is a BaseXmlDomAttribute
11837>>>    Import_Class_Protocol cXMLDOMNodeMixin
11838>>>End_Class
11839>>>
11839>>>Class cXMLDOMComment is a BaseXmlDomComment
11840>>>    Import_Class_Protocol cXMLDOMNodeMixin
11841>>>End_Class
11842>>>
11842>>>Class cXMLDOMProcessingInstruction is a BaseXmlDomProcessingInstruction
11843>>>    Import_Class_Protocol cXMLDOMNodeMixin
11844>>>End_Class
11845>>>
11845>>>Class cXMLDOMTextNode is a BaseXmlDomTextNode
11846>>>    Import_Class_Protocol cXMLDOMNodeMixin
11847>>>End_Class
11848>>>
11848>>>Class cXMLDOMCDATASection is a BaseXmlDomCDATASection
11849>>>    Import_Class_Protocol cXMLDOMNodeMixin
11850>>>End_Class
11851>>>
11851>>>Class cXMLDOMDocumentType is a BaseXmlDomDocumentType
11852>>>    Import_Class_Protocol cXMLDOMNodeMixin
11853>>>    
11853>>>End_Class
11854>>>
11854>>>Class cXMLDOMNotation is a BaseXmlDomNotation
11855>>>    Import_Class_Protocol cXMLDOMNodeMixin
11856>>>End_Class
11857>>>
11857>>>Class cXMLDOMEntity is a BaseXmlDomEntity
11858>>>    Import_Class_Protocol cXMLDOMNodeMixin
11859>>>End_Class
11860>>>
11860>>>Class cXMLDOMEntityReference is a BaseXmlDomEntityReference
11861>>>    Import_Class_Protocol cXMLDOMNodeMixin
11862>>>End_Class
11863>>>
11863>>>Class cXMLDOMDocumentFragment is a BaseXmlDomDocumentFragment
11864>>>    Import_Class_Protocol cXMLDOMNodeMixin
11865>>>End_Class
11866>>>
11866>>>
11866>>>Class cXMLDOMParseError is a BaseXMLDomParseError
11867>>>    // returns an error sub-object as a sibling of this error object
11867>>>    Function ErrorItemNode Integer iItem Returns Handle
11869>>>        Handle hoParseErrorNode hoParent
11869>>>        Handle hParseErrorIntf
11869>>>        Get ErrorItem iItem to hParseErrorIntf
11870>>>        If (hParseErrorIntf) Begin
11872>>>            // add to parent in case developer destroys the current object
11872>>>            Get Parent to hoParent
11873>>>            Get Create of hoParent U_cXMLDOMParseError to hoParseErrorNode
11874>>>            Set XmlInterface of hoParseErrorNode to hParseErrorIntf
11875>>>        End
11875>>>>
11875>>>        Function_Return hoParseErrorNode
11876>>>    End_Function
11877>>>End_Class
11878>>>
11878>>>// Base document class with Base functions.
11878>>>
11878>>>Class cXMLDOMDocument is an BaseXmlDomDocument
11879>>>    
11879>>>    Import_Class_Protocol cXMLDOMNodeMixin
11880>>>    
11880>>>    Procedure Construct_Object
11882>>>        Handle hInfc
11882>>>        Forward Send Construct_Object
11884>>>        Property String psDocumentName ""
11885>>>        Property Integer phPrivateDocumentElement 0
11886>>>        Property Handle phoTempDomNode (Create(Self,U_cXMLDomNode))
11887>>>        Property Handle phoTempDomNodeMap (Create(Self,U_cXMLDOMNamedNodeMap))
11888>>>        
11888>>>        // added in 15.1. If no COM pointer, msxml6 is most likely not installed. This will
11888>>>        // raise an unhandled error, which could be augmented to do something else.
11888>>>        Get XmlInterface to hInfc
11889>>>        If (hInfc=0) Begin
11891>>>            Send ErrorCreatingXMLObject
11892>>>        End
11892>>>>
11892>>>        
11892>>>        // as of 18.0 pbAsync now defaults to False. In most cases, this is what you want
11892>>>        Set pbAsync to False
11893>>>    End_Procedure
11894>>>    
11894>>>    // returns the classId for the passed NodeType. This is a good augmentation point. All nodes
11894>>>    // within an xml document come here to get a class. So, if you want to augment and return a
11894>>>    // different class, just check the node type and return whatever -- else forward
11894>>>    
11894>>>    Function NodeClassId Integer iType Returns Integer
11896>>>        Integer iClassId
11896>>>        Case Begin
11896>>>            Case (iType=NODE_ELEMENT) ;                Move U_cXMLDOMElement      to iClassId
11899>>>            Case (iType=NODE_ATTRIBUTE) ;                Move U_cXMLDOMAttribute    to iClassId
11903>>>            Case (iType=NODE_TEXT) ;                Move U_cXMLDOMTextNode     to iClassId
11907>>>            Case (iType=NODE_CDATA_SECTION) ;                Move U_cXMLDOMCDATASection to iClassId
11911>>>            Case (iType=NODE_ENTITY_REFERENCE) ;                Move U_cXMLDOMEntityReference to iClassId
11915>>>            Case (iType=NODE_ENTITY) ;                Move U_cXMLDOMEntity       to iClassId
11919>>>            Case (iType=NODE_PROCESSING_INSTRUCTION) ;                Move U_cXMLDOMProcessingInstruction to iClassId
11923>>>            Case (iType=NODE_COMMENT) ;                Move U_cXMLDOMComment      to iClassId
11927>>>            Case (iType=NODE_DOCUMENT) ;                Move U_cXMLDOMDocument     to iClassId
11931>>>            Case (iType=NODE_DOCUMENT_TYPE) ;                Move U_cXMLDOMDocumentType to iClassId
11935>>>            Case (iType=NODE_DOCUMENT_FRAGMENT) ;                Move U_cXMLDOMDocumentFragment to iClassId
11939>>>            Case (iType=NODE_NOTATION) ;                Move U_cXMLDOMNotation     to iClassId
11943>>>            Case (iType=0) ;                Move 0                     to iClassId // this is an error!!
11947>>>            Case Else ;                Move U_cXMLDOMNode         to iClassId
11949>>>        Case End
11949>>>        Function_Return iClassId
11950>>>    End_Function
11951>>>    
11951>>>    // Load an XML Document. The name of the document is stored in a property
11951>>>    // that must be set for this function to work correctly.
11951>>>    
11951>>>    Function LoadXMLDocument Returns Integer
11953>>>        String sDocumentName
11953>>>        Integer bRetVal
11953>>>        Get psDocumentName to sDocumentName
11954>>>        Get LoadDocument sDocumentName to bRetVal
11955>>>        If (bRetVal = 0);            Function_Return True
11958>>>        Else;            Function_Return False
11960>>>    End_Function
11961>>>    
11961>>>    Function SaveXMLDocument Returns Integer
11963>>>        String sDocumentName
11963>>>        Integer bRetVal
11963>>>        Get psDocumentName to sDocumentName
11964>>>        Get SaveDocument sDocumentName to bRetVal
11965>>>        Function_Return bRetVal
11966>>>    End_Function
11967>>>    
11967>>>    // Load an XML from a string. This aguments the C message to ret 1 if Ok and 0 if error.
11967>>>    //
11967>>>    Function LoadXML String sXML Returns Integer
11969>>>        Integer bRetVal
11969>>>        // for some reason the parser will not work properly with embedded double quotes.
11969>>>        // Change all " to ' in document.
11969>>>        //Move (replaces('"',sXML,"'")) to sXML  // removed this. Bad Idea.
11969>>>        Forward Get LoadXml sXML to bRetVal
11971>>>        If (bRetVal = 0) ;            Function_Return True
11974>>>        Else;            Function_Return False
11976>>>    End_Function
11977>>>    
11977>>>    // Load an XML string from an address. This aguments the C message to ret 1 if Ok and 0 if error.
11977>>>    //
11977>>>    Function LoadXMLFromAddress Pointer pXML Returns Integer
11979>>>        Integer bRetVal
11979>>>        Forward Get LoadXmlFromAddress pXML to bRetVal
11981>>>        If (bRetVal = 0) ;            Function_Return True
11984>>>        Else;            Function_Return False
11986>>>    End_Function
11987>>>    
11987>>>    
11987>>>    // Allow Nodes and Node node lists to get the parent document.
11987>>>    
11987>>>    Function DocumentObject Returns Handle
11989>>>        Function_Return Self
11990>>>    End_Function
11991>>>    
11991>>>    // Access to the root node allows for searches and iterations.
11991>>>    // The root node is a cNode.
11991>>>    
11991>>>    Function DocumentElement Returns Handle
11993>>>        Handle hNewNode       // Object ID of Root Node
11993>>>        Handle infcNode   // XML Element Interface
11993>>>        Get phDocumentElement to infcNode
11994>>>        If infcNode Begin
11996>>>            Get CreateXMLObject U_cXMLDOMElement infcNode to hNewNode
11997>>>            Set phPrivateDocumentElement to hNewNode // we no longer use this at all
11998>>>        End
11998>>>>
11998>>>        Function_Return hNewNode
11999>>>    End_Function
12000>>>    
12000>>>    //  CreateRootNode is used to set up the first element in a document.
12000>>>    //  It should only be used when creating new files.
12000>>>    
12000>>>    Function CreateDocumentElement String sTagName Returns Handle
12002>>>        Handle hNewNode       // Object ID of Root Node
12002>>>        Handle infcNode   // XML Element Interface
12002>>>        // Call XML to create an element in the document.
12002>>>        Get CreateElement sTagName to infcNode
12003>>>        // Tie the element interface to the DataFlex object.
12003>>>        If infcNode ;            Get CreateXMLObject U_cXMLDOMElement infcNode to hNewNode
12006>>>        // Call XML to set the root element of the document.
12006>>>        Set phDocumentElement to infcNode
12007>>>        Set phPrivateDocumentElement to hNewNode
12008>>>        Function_Return hNewNode
12009>>>    End_Function
12010>>>    
12010>>>    Function CreateDocumentElementNS String sNamespace String sTagName Returns Handle
12012>>>        Handle hNewNode       // Object ID of Root Node
12012>>>        Handle infcNode iType  // XML Element Interface
12012>>>        Get CreateElementNodeNS sNameSpace sTagName "" to hNewNode
12013>>>        Get XmlInterface of hNewNode to infcNode
12014>>>        Set phDocumentElement to infcNode
12015>>>        Set phPrivateDocumentElement to hNewNode
12016>>>        Function_Return hNewNode
12017>>>    End_Function
12018>>>    
12018>>>    
12018>>>    
12018>>>    // return the DocType as a document-type object. Returns 0 if no dtd
12018>>>    // Access to information from the doc type object is limited. Use get psXML
12018>>>    Function DocTypeNode Returns Handle
12020>>>        Handle hinfcDocType hoDocType
12020>>>        Get phDocType to hinfcDocType
12021>>>        If hinfcDocType ;            Get CreateXMLObject U_cXMLDOMDocumentType hinfcDocType to hoDocType
12024>>>        Function_Return hoDocType
12025>>>    End_Function
12026>>>    
12026>>>    Function phXMLErrorObject Returns Handle
12028>>>        Handle hoParseErrorObject
12028>>>        Handle hInfcParseError
12028>>>        Get phParseError to hInfcParseError
12029>>>        If hInfcParseError ;            Get CreateXMLObject U_cXMLDOMParseError hinfcParseError to hoParseErrorObject
12032>>>        Function_Return hoParseErrorObject
12033>>>    End_Function
12034>>>    
12034>>>    //  The following procedure is meant to be overridden by one provided by the developer.
12034>>>    
12034>>>    Procedure BasicParseErrorReport
12036>>>        String sProblem
12036>>>        String sLinePosition
12036>>>        String sDescr
12036>>>        String sReason
12036>>>        String sSource
12036>>>        Handle hoParseErrorObject
12036>>>        Get phXMLErrorObject to hoParseErrorObject
12037>>>        If hoParseErrorObject Begin
12039>>>            Move (SFormat(C_$CannotLoad, psDocumentName(Self)) + "."+character(13)+character(10)) to sProblem
12040>>>            Move (SFormat(C_$ParsingError, piLine(hoParseErrorObject), piLinePos(hoParseErrorObject))) to sLinePosition
12041>>>            Move (sLinePosition +character(13)+character(10)) to sLinePosition
12042>>>            
12042>>>            Move (C_$Reason + ":" * (psReason(hoParseErrorObject))  +character(13)+character(10)) to sReason
12043>>>            Move (C_$Source + ":" * (psSrcText(hoParseErrorObject))) to sSource
12044>>>            Move (sProblem + sLinePosition + sReason + sSource) to sDescr
12045>>>            Error DFERR_XML_INTERNAL_ERROR sDescr
12046>>>>
12046>>>            Send Destroy of hoParseErrorObject
12047>>>        End
12047>>>>
12047>>>        Else ;            Error DFERR_XML_INTERNAL_ERROR C_$NotCreatedParseObject
12049>>>    End_Procedure
12050>>>    
12050>>>    // bind an xml interface node to the passed XML object. If the
12050>>>    // object type is of the wrong type, we will destroy it and recreate it
12050>>>    // which is why hoNode is passed byRef.
12050>>>    // to use this you'd have to use the lower level private messages to get the
12050>>>    // xml interface handles and then bind them to an object. Just like in COM you could
12050>>>    // bind these to the same object, which might save some parsing time. This is made private
12050>>>    // because the time savings would probably be small and would not justify the extra
12050>>>    // complexity.
12050>>>    // It is a programming error to pass this a zero handle.
12050>>>    Procedure BindXMLInfc Handle hInfc Handle ByRef hoNode
12052>>>        Integer iType iClassId iType2
12052>>>        Get piNodeType of hoNode to iType2 // type of the DF XML object
12053>>>        
12053>>>        // Get the node type of the infc handle w/o creating a DF object
12053>>>        Move (invokexml(DF_IXMLDOMNODE, GET_piNodeType, hinfc, 0, 0, 0, 0)) to iType
12054>>>        Move (invokexml(DF_IXMLDOMNODE, GET_ChangeNodeType, hinfc, iType, 1, 0, 0)) to hInfc
12055>>>        If (hinfc=0) Begin
12057>>>            // this should not happen and we would need to know about this.
12057>>>            Error DFERR_XML_INTERNAL_ERROR (C_$XmlFailedNoDocObject + String(iType))
12058>>>>
12058>>>            Procedure_Return 0
12059>>>        End
12059>>>>
12059>>>        // if the type is the same we can reuse the current object and binding it to the interface pointer
12059>>>        If (iType=iType2) Begin
12061>>>            // resuse Self and return
12061>>>            Set XMLInterface of hoNode to hInfc
12062>>>        End
12062>>>>
12062>>>        // if diffrent type, destroy the existing object and recreate it
12062>>>        Else Begin
12063>>>            Send Destroy of hoNode
12064>>>            Get NodeClassId iType to iClassId
12065>>>            Get CreateXMLObject iClassId hInfc to hoNode
12066>>>        End
12066>>>>
12066>>>    End_Procedure
12067>>>    
12067>>>    Function ValidateDocument Returns Handle
12069>>>        Handle hParseErrorIntf hoParseError
12069>>>        Forward Get ValidateDocument to hParseErrorIntf
12071>>>        If hParseErrorIntf Begin
12073>>>            Get CreateXMLObject U_cXMLDOMParseError hParseErrorIntf to hoParseError
12074>>>        End
12074>>>>
12074>>>        Function_Return hoParseError
12075>>>    End_Function
12076>>>    
12076>>>    Function AddExternalSchemaDocument String sSchema Handle hoSchema Returns Boolean
12078>>>        Handle hInfc
12078>>>        Boolean bOk
12078>>>        Get XmlInterface of hoSchema to hInfc
12079>>>        Forward Get AddExternalSchemaDocument sSchema hInfc to bOk
12081>>>        Function_Return (not(bOk))
12082>>>    End_Function
12083>>>    
12083>>>    Function AddExternalSchemaFile String sSchema String sFile Returns Boolean
12085>>>        Boolean bOk
12085>>>        Forward Get AddExternalSchemaFile sSchema sFile to bOk
12087>>>        Function_Return (not(bOk))
12088>>>    End_Function
12089>>>    
12089>>>    Procedure Set psSelectionNamespaces String sNamespaces
12091>>>        Set psDomSecondLevelProperty "SelectionNamespaces" to sNamespaces
12092>>>    End_Procedure
12093>>>    
12093>>>    Function psSelectionNamespaces Returns String
12095>>>        String  sNamespaces
12095>>>        Get psDomSecondLevelProperty "SelectionNamespaces" to sNamespaces
12096>>>        Function_Return sNamespaces
12097>>>    End_Function
12098>>>    
12098>>>    Procedure Set pbMultipleErrorMessages Boolean bMultipleErrors
12100>>>        Set pbDomSecondLevelProperty "MultipleErrorMessages" to bMultipleErrors
12101>>>    End_Procedure
12102>>>    
12102>>>    Function pbMultipleErrorMessages Returns Boolean
12104>>>        Boolean bMultipleErrors
12104>>>        Get pbDomSecondLevelProperty "MultipleErrorMessages" to bMultipleErrors
12105>>>        Function_Return bMultipleErrors
12106>>>    End_Function
12107>>>    
12107>>>    Procedure ErrorCreatingXMLObject
12109>>>        Error DFERR_XML_INTERNAL_ERROR "Could not create XML COM object. MSXML6 may not be properly installed and registered."
12110>>>>
12110>>>    End_Procedure
12111>>>    
12111>>>    // returns the last parse error. If 0, you know everything parsed. This can be
12111>>>    // used along wit pbReadyState to load XML documents in async mode.
12111>>>    Function LastParseError Returns Integer
12113>>>        Integer iErr
12113>>>        Handle hoParseErrorReport
12113>>>        Get phXMLErrorObject to hoParseErrorReport
12114>>>        Get piErrorCode of hoParseErrorReport to iErr
12115>>>        Send Destroy of hoParseErrorReport
12116>>>        Function_Return iErr
12117>>>    End_Function
12118>>>    
12118>>>    
12118>>>End_Class
12119>Use cli.pkg
Including file: cli.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cli.pkg)
12119>>>//                                                              
12119>>>//   CLI specific functionality. There are several connectivity kits     
12119>>>//   based on  SQL/92 CLI. Those are:                                    
12119>>>//    - ODBC_DRV  The Data Access CK for ODBC                            
12119>>>//    - DB2_DRV   The Data Access CK for DB2                             
12119>>>//    - MSSQLDRV  The Data Access CK for Microsoft SQL Server            
12119>>>//                                                                       
12119>>>//   This package defines the common functionality for all CLI based     
12119>>>//   drivers.                                                            
12119>>>
12119>>>Define DF_FILE_TABLE_CHARACTER_FORMAT   for 601
12119>>>Define DF_FILE_MAX_ROWS_FETCHED         for 602
12119>>>Define DF_FILE_PRIMARY_INDEX_TRIGGER    for 604      // Replaced by DF_FILE_GENERATE_RECORD_ID_METHOD !
12119>>>Define DF_FILE_TRANSLATE_OEM_TO_ANSI    for 606      // Deprecated !!! Only defined for decent error reporting
12119>>>Define DF_FILE_REFIND_AFTER_SAVE        for 608
12119>>>Define DF_FILE_TABLE_NAME               for 609
12119>>>Define DF_FILE_GET_RID_AFTER_CREATE     for 610
12119>>>Define DF_FILE_SQL_FILTER               for 611
12119>>>Define DF_FILE_USE_DUMMY_ZERO_DATE      for 612
12119>>>Define DF_FILE_GENERATE_RECORD_ID_METHOD for 614
12119>>>Define DF_FILE_DUMMY_UPDATE_COLUMN      for 616
12119>>>Define DF_FILE_FETCH_ALL_COLUMNS        for 620
12119>>>Define DF_FILE_DATABASE_ID              for 622
12119>>>Define DF_FILE_SQL_FILTER_ACTIVE        for 624
12119>>>Define DF_FILE_NUMBER_SQL_RELATIONS     for 626
12119>>>Define DF_FILE_BLOCK_SIZE               for 628
12119>>>Define DF_FILE_JIT_BINDING              for 630
12119>>>Define DF_FILE_FINDCACHE_HITS           for 632
12119>>>Define DF_FILE_FINDCACHE_TIMEOUTS       for 634
12119>>>Define DF_FILE_SQL_FILTER_EQ            for 636
12119>>>Define DF_FILE_RESTRUCTURE_INT_ONLY     for 638
12119>>>Define DF_FILE_ALLOWED_STRUCTURE_CHANGES for 640
12119>>>
12119>>>Define DF_FIELD_STORE_TIME              for 702
12119>>>Define DF_FIELD_TIME                    for 703
12119>>>Define DF_FIELD_IS_NULL                 for 704
12119>>>Define DF_FIELD_NULL_ALLOWED            for 706
12119>>>Define DF_FIELD_DEFAULT_VALUE           for 707
12119>>>Define DF_FIELD_FETCH_STATE             for 708
12119>>>Define DF_FIELD_READ_ONLY               for 710
12119>>>Define DF_FIELD_NATIVE_TYPE_NAME        for 711
12119>>>Define DF_FIELD_NATIVE_TYPE             for 712
12119>>>Define DF_FIELD_NO_OEM_ANSI_TRANSLATE   for 714
12119>>>Define DF_SQL_RELATION_COLUMN           for 716
12119>>>Define DF_SQL_RELATION_RELATED_SCHEMA   for 717
12119>>>Define DF_FIELD_NATIVE_SIZE             for 718
12119>>>Define DF_SQL_RELATION_RELATED_TABLE    for 719
12119>>>Define DF_SQL_RELATION_RELATED_COLUMN   for 721
12119>>>Define DF_FIELD_IS_IDENTITY             for 722
12119>>>Define DF_FIELD_SQL_COLUMN_NAME         for 723
12119>>>
12119>>>Define DF_INDEX_NAME                    for 801
12119>>>Define DF_INDEX_UNIQUE                  for 802
12119>>>Define DF_INDEX_ON_BACKEND              for 804
12119>>>
12119>>>Define DF_INDEX_CLUSTERED               for 806
12119>>>Define DF_INDEX_SQL_PRIMARY_KEY         for 808
12119>>>Define DF_INDEX_SQL_TYPE                for 810
12119>>>Define DF_INDEX_NUMBER                  for 812
12119>>>
12119>>>Define DF_DATABASE_LOCK_STATE                    for 1001
12119>>>Define DF_DATABASE_ID                            for 1002
12119>>>Define DF_DATABASE_MYSQLTABLETYPE                for 1003
12119>>>Define DF_DATABASE_NUMBER_TYPES                  for 1004
12119>>>Define DF_DATABASE_TYPE_NAME                     for 1005
12119>>>Define DF_DATABASE_TYPE_ID                       for 1006
12119>>>Define DF_DATABASE_TYPE_CREATE_PARAMS            for 1007
12119>>>Define DF_DATABASE_TYPE_AUTOINC                  for 1008
12119>>>Define DF_DATABASE_DEFAULT_DEFAULT_ASCII         for 1009
12119>>>Define DF_DATABASE_TYPE_UNSIGNED                 for 1010
12119>>>Define DF_DATABASE_DEFAULT_DEFAULT_NUMERIC       for 1011
12119>>>Define DF_DATABASE_TYPE_MAXSIZE                  for 1012
12119>>>Define DF_DATABASE_DEFAULT_DEFAULT_DATE          for 1013
12119>>>Define DF_DATABASE_DEFAULT_NULLABLE_ASCII        for 1014
12119>>>Define DF_DATABASE_DEFAULT_DEFAULT_TEXT          for 1015
12119>>>Define DF_DATABASE_DEFAULT_NULLABLE_NUMERIC      for 1016
12119>>>Define DF_DATABASE_DEFAULT_DEFAULT_BINARY        for 1017
12119>>>Define DF_DATABASE_DEFAULT_NULLABLE_DATE         for 1018
12119>>>Define DF_DATABASE_DUMMY_ZERO_DATE_VALUE         for 1019
12119>>>Define DF_DATABASE_DEFAULT_NULLABLE_TEXT         for 1020
12119>>>Define DF_DATABASE_DUPREC_STATE                  for 1021
12119>>>Define DF_DATABASE_DEFAULT_NULLABLE_BINARY       for 1022
12119>>>Define DF_DATABASE_MAX_ACTIVE_STATEMENTS         for 1024
12119>>>Define DF_DATABASE_DRIVER_DECIMAL_SEPARATOR      for 1026
12119>>>Define DF_DATABASE_DRIVER_THOUSANDS_SEPARATOR    for 1028
12119>>>
12119>>>Define DF_DATABASE_DRIVER_DATE_FORMAT            for 1030
12119>>>Define DF_DATABASE_DRIVER_DATE_SEPARATOR         for 1032
12119>>>Define DF_DATABASE_IGNORE_UCASE_SUPPORT          for 1034
12119>>>Define DF_DATABASE_INDEX_CREATE                  for 1036
12119>>>Define DF_DATABASE_INDEX_DROP                    for 1038
12119>>>Define DF_DATABASE_INDEX_ASC                     for 1040
12119>>>Define DF_DATABASE_INDEX_DESC                    for 1042
12119>>>Define DF_DATABASE_COLUMN_CREATE_DEFAULTCLAUSE   for 1044
12119>>>Define DF_DATABASE_DUPREC_ERRORNUMBER            for 1046
12119>>>Define DF_DATABASE_USE_IDENTITY_TYPE             for 1048
12119>>>Define DF_DATABASE_NUMBER_NATIVE_LOCKERRORS      for 1050
12119>>>Define DF_DATABASE_NATIVE_LOCKERROR              for 1052
12119>>>Define DF_DATABASE_DEFAULT_MAX_ROWS              for 1054
12119>>>Define DF_DATABASE_IGNORE_WARNINGS               for 1056
12119>>>Define DF_DATABASE_USE_DF_LOCKERROR              for 1058
12119>>>Define DF_DATABASE_FIND_CACHE_TIMEOUT            for 1060
12119>>>Define DF_DATABASE_JIT_TRESHOLD                  for 1062
12119>>>Define DF_DATABASE_TRUNCATE_BINARY_ZEROES        for 1064
12119>>>Define DF_DATABASE_DEFAULT_DEFAULT_DATETIME      for 1065
12119>>>Define DF_DATABASE_DEFAULT_NULLABLE_DATETIME     for 1066
12119>>>Define DF_DATABASE_MAP_DFDATE_TO_ODBCTYPE         for 1068
12119>>>Define DF_DATABASE_MAP_DFDATETIME_TO_ODBCTYPE     for 1070
12119>>>Define DF_DATABASE_MAP_DFASCII_TO_ODBCTYPE        for 1072
12119>>>Define DF_DATABASE_MAP_DFTEXT_TO_ODBCTYPE         for 1074
12119>>>Define DF_DATABASE_MAP_DFBINARY_TO_ODBCTYPE       for 1076
12119>>>Define DF_DATABASE_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA for 1078
12119>>>
12119>>>Define DF_DATABASE_MAP_DFDATE_TO_SQLTYPE         for 1069
12119>>>Define DF_DATABASE_MAP_DFDATETIME_TO_SQLTYPE     for 1071
12119>>>Define DF_DATABASE_MAP_DFASCII_TO_SQLTYPE        for 1073
12119>>>Define DF_DATABASE_MAP_DFTEXT_TO_SQLTYPE         for 1075
12119>>>Define DF_DATABASE_MAP_DFBINARY_TO_SQLTYPE       for 1077
12119>>>Define DF_DATABASE_DEFAULT_DATABASE              for 1079
12119>>>Define DF_DATABASE_TRIM_VARCHAR_VALUES           for 1084
12119>>>Define DF_DATABASE_IDENTIFIER_QUOTE              for 1085
12119>>>Define DF_DATABASE_ODBC_DRIVER_NAME              for 1087
12119>>>
12119>>>Define DF_DRIVER_DEFAULT_DEFAULT_ASCII           for 1101
12119>>>Define DF_DRIVER_DEFAULT_NULLABLE_ASCII          for 1102
12119>>>Define DF_DRIVER_DEFAULT_DEFAULT_NUMERIC         for 1103
12119>>>Define DF_DRIVER_DEFAULT_NULLABLE_NUMERIC        for 1104
12119>>>Define DF_DRIVER_DEFAULT_DEFAULT_DATE            for 1105
12119>>>Define DF_DRIVER_DEFAULT_NULLABLE_DATE           for 1106
12119>>>Define DF_DRIVER_DEFAULT_DEFAULT_TEXT            for 1107
12119>>>Define DF_DRIVER_DEFAULT_NULLABLE_TEXT           for 1108
12119>>>Define DF_DRIVER_DEFAULT_DEFAULT_BINARY          for 1109
12119>>>Define DF_DRIVER_DEFAULT_NULLABLE_BINARY         for 1110
12119>>>Define DF_DRIVER_DUMMY_ZERO_DATE_VALUE           for 1111
12119>>>Define DF_DRIVER_MAX_ACTIVE_STATEMENTS           for 1112
12119>>>Define DF_DRIVER_CACHE_PATH                      for 1113
12119>>>Define DF_DRIVER_DRIVER_DECIMAL_SEPARATOR        for 1114
12119>>>Define DF_DRIVER_DEFAULT_TABLE_CHARACTER_FORMAT  for 1115
12119>>>Define DF_DRIVER_DRIVER_THOUSANDS_SEPARATOR      for 1116
12119>>>Define DF_DRIVER_APPLICATION_CHARACTER_FORMAT    for 1117
12119>>>Define DF_DRIVER_DRIVER_DATE_FORMAT              for 1118
12119>>>Define DF_DRIVER_LAST_ERROR_TEXT                 for 1119
12119>>>Define DF_DRIVER_DRIVER_DATE_SEPARATOR           for 1120
12119>>>Define DF_DRIVER_CONNECTION_ID                   for 1121
12119>>>Define DF_DRIVER_IGNORE_UCASE_SUPPORT            for 1122
12119>>>Define DF_DRIVER_CONNECTION_ID_STRING            for 1123
12119>>>Define DF_DRIVER_IGNORE_WARNINGS                 for 1124
12119>>>Define DF_DRIVER_USE_DF_LOCKERROR                for 1126
12119>>>Define DF_DRIVER_FIND_CACHE_TIMEOUT              for 1128
12119>>>Define DF_DRIVER_JIT_TRESHOLD                    for 1130
12119>>>Define DF_DRIVER_TRUNCATE_BINARY_ZEROES          for 1132
12119>>>Define DF_DRIVER_ERROR_DEBUG_MODE                for 1134
12119>>>Define DF_DRIVER_USE_CACHE                       for 1136
12119>>>Define DF_DRIVER_REPORT_CACHE_ERRORS             for 1138
12119>>>Define DF_DRIVER_USE_CACHE_EXPIRATION            for 1140
12119>>>Define DF_DRIVER_DEFAULT_USE_DUMMY_ZERO_DATE     for 1142
12119>>>Define DF_DRIVER_DEFAULT_RECORD_IDENTITY_HIDING  for 1144
12119>>>Define DF_DRIVER_REPORT_ACTIVE_COLUMN_ERRORS     for 1146
12119>>>Define DF_DRIVER_SILENT_LOGIN                    for 1148
12119>>>Define DF_DRIVER_DEFAULT_MAP_TO_RECNUM           for 1150
12119>>>Define DF_DRIVER_CONNECTION_ID_OPTIONS           for 1152
12119>>>Define DF_DRIVER_NUMBER_CONNECTION_IDS           for 1154
12119>>>Define DF_DRIVER_DEFAULT_DEFAULT_DATETIME        for 1155
12119>>>Define DF_DRIVER_DEFAULT_NULLABLE_DATETIME       for 1156
12119>>>Define DF_DRIVER_MATCH_CLIENT_SERVER_VERSION     for 1158
12119>>>Define DF_DRIVER_SQLSERVER_CLIENT_VERSION        for 1160
12119>>>Define DF_DRIVER_MAP_DFDATE_TO_ODBCTYPE          for 1168
12119>>>Define DF_DRIVER_MAP_DFDATETIME_TO_ODBCTYPE      for 1170
12119>>>Define DF_DRIVER_MAP_DFASCII_TO_ODBCTYPE         for 1172
12119>>>Define DF_DRIVER_MAP_DFTEXT_TO_ODBCTYPE          for 1174
12119>>>Define DF_DRIVER_MAP_DFBINARY_TO_ODBCTYPE        for 1176
12119>>>Define DF_DRIVER_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA for 1178
12119>>>Define DF_DRIVER_LOGIN_ON_OPEN                   for 1180
12119>>>Define DF_DRIVER_MINIMUM_CLIENT_VERSION          for 1182
12119>>>Define DF_DRIVER_TRIM_VARCHAR_VALUES             for 1184
12119>>>Define DF_DRIVER_SQLSERVER_CLIENT_DRIVER_NAME    for 1187 
12119>>>
12119>>>Define DF_DRIVER_MAP_DFDATE_TO_SQLTYPE           for 1169
12119>>>Define DF_DRIVER_MAP_DFDATETIME_TO_SQLTYPE       for 1171
12119>>>Define DF_DRIVER_MAP_DFASCII_TO_SQLTYPE          for 1173
12119>>>Define DF_DRIVER_MAP_DFTEXT_TO_SQLTYPE           for 1175
12119>>>Define DF_DRIVER_MAP_DFBINARY_TO_SQLTYPE         for 1177
12119>>>
12119>>>
12119>>>// Replacement for logical column number that indicates all columns
12119>>>Define DF_ALL_COLUMNS for -1
12119>>>
12119>>>// Possible DF_FILE_GENERATE_RECORD_ID_METHOD values
12119>>>Define RIM_NONE            for 0
12119>>>Define RIM_IDENTITY_COLUMN for 1
12119>>>Define RIM_DISPENSER_TABLE for 2
12119>>>Define RIM_EXTERNAL        for 3
12119>>>
12119>>>// Possible DF_FIELD_READ_ONLY values
12119>>>Define RO_NO            for 0
12119>>>Define RO_IGNORECHANGE  for 1
12119>>>Define RO_ACCEPTCHANGE  for 2
12119>>>Define RO_ERRORONCHANGE for 3
12119>>>
12119>>>
12119>>>// Possible DF_DRIVER_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA values
12119>>>Define MAP_DF_TO_SQL_TYPE_UNKNOWN    for 0
12119>>>Define MAP_DF_TO_SQL_TYPE_SQL2000    for 3
12119>>>Define MAP_DF_TO_SQL_TYPE_SQL2005    for 4
12119>>>Define MAP_DF_TO_SQL_TYPE_SQL2008    for 5
12119>>>Define MAP_DF_TO_SQL_TYPE_SQL2012    for 6
12119>>>Define MAP_DF_TO_SQL_TYPE_DB2_LEGACY  for 7
12119>>>Define MAP_DF_TO_SQL_TYPE_DB2_10      for 8
12119>>>Define MAP_DF_TO_SQL_TYPE_ODBC_SCHEMA for 9
12119>>>Define MAP_DF_TO_SQL_TYPE_UNICODE     for 11
12119>>>
12119>>>
12119>>>// Possible DF_DRIVER_SQLSERVER_CLIENT_VERSION values are defined in Mssqldrv.pkg
12119>>>
12119>>>// Possible SQL Column type values
12119>>>//      SQL Server specific types defined in mssqldrv.pkg
12119>>>//      DB2 specific typesm defined in db2_drv.pkg
12119>>>
12119>>>Define SQL_UNKNOWN_TYPE   for    0
12119>>>Define SQL_CHAR           for    1
12119>>>Define SQL_NUMERIC        for    2
12119>>>Define SQL_DECIMAL        for    3
12119>>>Define SQL_INTEGER        for    4
12119>>>Define SQL_SMALLINT       for    5
12119>>>Define SQL_FLOAT          for    6
12119>>>Define SQL_REAL           for    7
12119>>>Define SQL_DOUBLE         for    8
12119>>>Define SQL_DATETIME       for    9
12119>>>Define SQL_VARCHAR        for   12
12119>>>Define SQL_TYPE_DATE      for   91
12119>>>Define SQL_TYPE_TIME      for   92
12119>>>Define SQL_TYPE_TIMESTAMP for   93
12119>>>
12119>>>Define SQL_DATE           for    9
12119>>>Define SQL_INTERVAL       for   10
12119>>>Define SQL_TIME           for   10
12119>>>Define SQL_TIMESTAMP      for   11
12119>>>Define SQL_LONGVARCHAR    for  (-1)
12119>>>Define SQL_BINARY         for  (-2)
12119>>>Define SQL_VARBINARY      for  (-3)
12119>>>Define SQL_LONGVARBINARY  for  (-4)
12119>>>Define SQL_BIGINT         for  (-5)
12119>>>Define SQL_TINYINT        for  (-6)
12119>>>Define SQL_BIT            for  (-7)
12119>>>Define SQL_WCHAR          for  (-8)
12119>>>Define SQL_WVARCHAR       for  (-9)
12119>>>Define SQL_WLONGVARCHAR   for (-10)
12119>>>Define SQL_GUID           for (-11)
12119>>>
12119>>>// Possible DF_INDEX_SQL_TYPE values
12119>>>Define DF_INDEX_CLIENT      for  1
12119>>>Define DF_INDEX_SERVER      for  2
12119>>>Define DF_INDEX_SERVER_ONLY for  3
12119>>>Define DF_INDEX_TEMPORARY   for  4
12119>>>
12119>>>// Possible DF_FILE_ALLOWED_STRUCTURE_CHANGES values
12119>>>Define ALL_TABLE_CHANGES_ALLOWED            for  0
12119>>>Define ONLY_TABLE_INT_FILE_CHANGES_ALLOWED  for  1
12119>>>Define NO_TABLE_CHANGES_ALLOWED             for  2
12119>>>
12119>>>// Driver level attributes
12119>>>Define DRVR_TOKEN_BASE                       for 1000
12119>>>Define DRVR_ATTRIBUTE_START                  for (DRVR_TOKEN_BASE + 19)
12119>>>Define DRVR_DEFAULT_NULLABLE_ASCII           for (DRVR_ATTRIBUTE_START)
12119>>>Define DRVR_DEFAULT_NULLABLE_NUMERIC         for (DRVR_ATTRIBUTE_START +  1)
12119>>>Define DRVR_DEFAULT_NULLABLE_DATE            for (DRVR_ATTRIBUTE_START +  2)
12119>>>Define DRVR_DEFAULT_NULLABLE_TEXT            for (DRVR_ATTRIBUTE_START +  3)
12119>>>Define DRVR_DEFAULT_NULLABLE_BINARY          for (DRVR_ATTRIBUTE_START +  4)
12119>>>Define DRVR_DEFAULT_DEFAULT_ASCII            for (DRVR_ATTRIBUTE_START +  5)
12119>>>Define DRVR_DEFAULT_DEFAULT_NUMERIC          for (DRVR_ATTRIBUTE_START +  6)
12119>>>Define DRVR_DEFAULT_DEFAULT_DATE             for (DRVR_ATTRIBUTE_START +  7)
12119>>>Define DRVR_DEFAULT_DEFAULT_TEXT             for (DRVR_ATTRIBUTE_START +  8)
12119>>>Define DRVR_DEFAULT_DEFAULT_BINARY           for (DRVR_ATTRIBUTE_START +  9)
12119>>>Define DRVR_MAX_ACTIVE_STATEMENTS            for (DRVR_ATTRIBUTE_START + 10)
12119>>>Define DRVR_ERROR_DEBUG_MODE                 for (DRVR_ATTRIBUTE_START + 11)
12119>>>Define DRVR_DRIVER_DECIMAL_SEPARATOR         for (DRVR_ATTRIBUTE_START + 12)
12119>>>Define DRVR_DRIVER_THOUSANDS_SEPARATOR       for (DRVR_ATTRIBUTE_START + 13)
12119>>>Define DRVR_DRIVER_DATE_FORMAT               for (DRVR_ATTRIBUTE_START + 14)
12119>>>Define DRVR_DRIVER_DATE_SEPARATOR            for (DRVR_ATTRIBUTE_START + 15)
12119>>>Define DRVR_USE_CACHE                        for (DRVR_ATTRIBUTE_START + 16)
12119>>>Define DRVR_REPORT_CACHE_ERRORS              for (DRVR_ATTRIBUTE_START + 17)
12119>>>Define DRVR_CACHE_PATH                       for (DRVR_ATTRIBUTE_START + 18)
12119>>>Define DRVR_USE_CACHE_EXPIRATION             for (DRVR_ATTRIBUTE_START + 19)
12119>>>Define DRVR_DEFAULT_TABLE_CHARACTER_FORMAT   for (DRVR_ATTRIBUTE_START + 20)
12119>>>Define DRVR_APPLICATION_CHARACTER_FORMAT     for (DRVR_ATTRIBUTE_START + 21)
12119>>>Define DRVR_DUMMY_ZERO_DATE_VALUE            for (DRVR_ATTRIBUTE_START + 22)
12119>>>Define DRVR_DEFAULT_USE_DUMMY_ZERO_DATE      for (DRVR_ATTRIBUTE_START + 23)
12119>>>Define DRVR_IGNORE_UCASE_SUPPORT             for (DRVR_ATTRIBUTE_START + 24)
12119>>>Define DRVR_LASTERRORTEXTLENGTH              for (DRVR_ATTRIBUTE_START + 25)
12119>>>Define DRVR_LASTERRORTEXT                    for (DRVR_ATTRIBUTE_START + 26)
12119>>>Define DRVR_DEFAULTRECORDIDHIDING            for (DRVR_ATTRIBUTE_START + 35)
12119>>>Define DRVR_REPORTACTIVECOLUMNERRORS         for (DRVR_ATTRIBUTE_START + 36)
12119>>>
12119>>>
12119>>>// Error Number constants
12119>>>Define CLIERR_GENERAL_ERROR                       for 12289
12119>>>Define CLIERR_CANT_INITIALIZE                     for 12290
12119>>>Define CLIERR_CANT_DEINITIALIZE                   for 12291
12119>>>Define CLIERR_BAD_OR_NO_PRIMARY_INDEX_SPECIFIED   for 12292
12119>>>Define CLIERR_LOGIN_UNSUCCESSFUL                  for 12293
12119>>>Define CLIERR_LOGOUT_UNSUCCESSFUL                 for 12294
12119>>>Define CLIERR_TABLE_NOT_IN_CONNECTION             for 12295
12119>>>Define CLIERR_NULL_VALUE_NOT_ALLOWED              for 12296
12119>>>Define CLIERR_SEGMENT_NUMBER_RANGE                for 12297
12119>>>Define CLIERR_INDEX_NUMBER_RANGE                  for 12298
12119>>>Define CLIERR_LOGIN_ATTRIBUTE_MUST_BE_SET         for 12299
12119>>>Define CLIERR_PHYSICAL_NAME_MUST_BE_SET           for 12300
12119>>>Define CLIERR_INVALID_REGISTRATION_FILE           for 12301
12119>>>Define CLIERR_LICENSE_EXPIRED                     for 12302
12119>>>Define CLIERR_DEADLOCK_OR_TIMEOUT                 for 12303
12119>>>Define CLIERR_SQL_ERROR                           for 12304
12119>>>Define CLIERR_SQLINVALID_CLI_STMT_HANDLE          for 12305
12119>>>Define CLIERR_SQLINVALID_CLI_CONN_HANDLE          for 12306
12119>>>Define CLIERR_SQLINVALID_DRIVER_ID                for 12307
12119>>>Define CLIERR_SQLINVALID_BIND_FILE                for 12308
12119>>>Define CLIERR_SQLINVALID_COLUMN                   for 12309
12119>>>Define CLIERR_SQLINVALID_ATTRIBUTE                for 12310
12119>>>Define CLIERR_SQLINVALID_BUFFER                   for 12311
12119>>>Define CLIERR_INVALID_CONFIGURATION_KEYWORD       for 12312
12119>>>Define CLIERR_NOUNIQUEINDEX                       for 12313
12119>>>Define CLIERR_UCSEGMENT_NOT_SUPPORTED             for 12314
12119>>>Define CLIERR_FIELDREADONLY                       for 12315
12119>>>Define CLIERR_DBPROPERROR                         for 12316
12119>>>Define CLIERR_CANTSETRECNUMINACTIVE               for 12317
12119>>>Define CLIERR_CANTCHANGEINACTIVECOLUMN            for 12318
12119>>>Define CLIERR_FIELDISINACTIVE                     for 12319
12119>>>Define CLIERR_NOT_INSTALLED                       for 12320
12119>>>Define CLIERR_CANT_FIND_TERMLIST                  for 12321
12119>>>Define CLIERR_CANT_READ_TERMLIST                  for 12322
12119>>>Define CLIERR_MAX_USERS_EXCEEDED                  for 12323
12119>>>Define CLIERR_USER_COUNT_FILE_ERROR               for 12324
12119>>>Define CLIERR_CANT_INIT_USER_COUNT                for 12325
12119>>>Define CLIERR_USER_COUNT_FILE_NOT_FOUND           for 12326
12119>>>Define CLIERR_USER_COUNT_FILE_CANT_READ           for 12327
12119>>>Define CLIERR_USER_COUNT_FILE_CANT_DECRYPT        for 12328
12119>>>Define CLIERR_USER_COUNT_FILE_BAD_VERSION         for 12329
12119>>>Define CLIERR_CANTCREATE_RECNUMISZERO             for 12330
12119>>>Define CLIERR_CANTGETCOLUMNINFO                   for 12331
12119>>>Define CLIERR_INVALIDDATABASEHANDLE               for 12332
12119>>>Define CLIERR_TYPENUMBEROUTOFRANGE                for 12333
12119>>>Define CLIERR_LOCKERRORNUMBEROUTOFRANGE           for 12334
12119>>>Define CLIERR_CONNECTIONIDOUTOFRANGE              for 12335
12119>>>Define CLIERR_CONNECTIONIDNOTFOUND                for 12336
12119>>>Define CLIERR_RELATIONOUTOFRANGE                  for 12337
12119>>>Define CLIERR_NOTANEXPRESSEDITION                 for 12338
12119>>>Define CLIERR_INVALID_CONFIGURATION_VALUE         for 12339
12119>>>Define CLIERR_NOCLIENTSERVERVERSIONMATCH          for 12340
12119>>>Define CLIERR_CONNECTIONIDALREADYEXISTS           for 12341
12119>>>Define CLIERR_INVALIDCONNECTSTRINGOPENOPTION      for 12342
12119>>>Define CLIERR_DATABASECONNECTIONLOST              for 12343
12119>>>Define CLIERR_STRUCTURECHANGENOTALLOWED           for 12344
12119>>>Define CLIERR_MINIMUMCLIENTVERSIONNOTFOUND        for 12345
12119>>>
12119>>>
12119>>>// Call driver Function identifiers
12119>>>Define CLI_CONSTRAINT             for 10000
12119>>>Define CLI_SETDRIVERATTRIBUTE     for 10001
12119>>>Define CLI_GETDRIVERATTRIBUTE     for 10002
12119>>>Define CLI_BROWSECONNECT          for 10003
12119>>>Define CLI_DATASOURCES            for 10004
12119>>>Define CLI_CKREVISION             for 10005
12119>>>Define CLI_INITDATASOURCES        for 10006
12119>>>Define CLI_ENUMERATE_TABLES       for 10007
12119>>>Define CLI_TABLENAME              for 10008
12119>>>Define CLI_TABLESCHEMA            for 10009
12119>>>Define CLI_TABLETYPE              for 10010
12119>>>Define CLI_TABLECOMMENT           for 10011
12119>>>Define CLI_ENUMERATE_COLUMNS      for 10012
12119>>>Define CLI_COLUMNNAME             for 10013
12119>>>Define CLI_DUMPSTATUS             for 10014
12119>>>Define CLI_READCONFIGURATION      for 10015
12119>>>Define CLI_GETDBATTRIBUTE0        for 10016
12119>>>Define CLI_GETDBATTRIBUTE         for 10017
12119>>>Define CLI_GETREGNAME             for 10018
12119>>>Define CLI_GETSERIALNUM           for 10019
12119>>>Define CLI_GETMAXUSERS            for 10020
12119>>>Define CLI_BCP                    for 10021
12119>>>Define CLI_DROPINDICES            for 10022
12119>>>Define CLI_CREATEINDICES          for 10023
12119>>>Define CLI_REDIRECTCONNECTION     for 10024
12119>>>Define CLI_CREATECONNECTIONID     for 10025
12119>>>Define CLI_DELETECONNECTIONID     for 10026
12119>>>
12119>>>
12119>>>// Init data source types
12119>>>Define SQL_FETCH_ALL     for  2
12119>>>Define SQL_FETCH_USER    for 31
12119>>>Define SQL_FETCH_SYSTEM  for 32
12119>>>
12119>>>
12119>>>// Dummy strings used in the commands
12119>>>String  CLI$StrDummy 255
12119>>>Integer CLI$IntDummy
12119>>>
12119>>>
12119>>>//   Setup a constraint for a file.                                    
12119>>>
12119>>>
12119>>>
12119>>>// Set or get an attribute at driver level. These attributes, when set,
12119>>>// will be set for the remainder of the session or until set again. To 
12119>>>// permanently set driver level attributes change the driver           
12119>>>// configuration file.                                                 
12119>>>
12119>>>
12119>>>
12119>>>
12119>>>
12119>>>
12119>>>
12119>>>// An instance of this class can be used as a broker object to
12119>>>// call several CLI releated methods.                         
12119>>>
12119>>>//Class cCLIHandler is a cObject
12119>>>Class cCLIHandler is an Array
12120>>>    
12120>>>    Procedure Construct_Object 
12122>>>        Forward Send Construct_object 
12124>>>        
12124>>>        Property String  psDriverID        ""
12125>>>    End_Procedure
12126>>>    
12126>>>    
12126>>>    
12126>>>    // The revsion of a CLI Connectivity Kit
12126>>>    Function CKRevision Returns String
12128>>>        String  sDriverID
12128>>>        String  sRevision
12128>>>        String  sVoid
12128>>>        Integer iRetval
12128>>>        
12128>>>        Get psDriverID to sDriverID
12129>>>        If (sDRiverID <> "") Begin
12131>>>            Move (Repeat(" ", 255)) to sRevision
12132>>>            Call_Driver 0 sDRiverID Function CLI_CKREVISION Callback 0 Passing sRevision sVoid 0 Result iRetval
12137>>>        End
12137>>>>
12137>>>        
12137>>>        Function_Return sRevision
12138>>>    End_Function
12139>>>    
12139>>>    
12139>>>    
12139>>>    // Extarct the Nth part of a a.b.c.d revsion string.
12139>>>    // Returns : The part version number or -1 if there is no such part number.
12139>>>    //
12139>>>    Function ExtractPartFromRevision Integer iPartNum String sRevision Returns Integer
12141>>>        Integer iPartRev
12141>>>        Integer iCurrentPart
12141>>>        Integer iSeparatorPos
12141>>>        
12141>>>        If (iPartNum > 4) ;            Function_Return -1
12144>>>        
12144>>>        Move 0 to iCurrentPart
12145>>>        Repeat
12145>>>>
12145>>>            Move (Pos(".", sRevision)) to iSeparatorPos
12146>>>            If (iSeparatorPos > 0) Begin
12148>>>                Move (Left(sRevision, iSeparatorPos - 1)) to iPartRev
12149>>>                Move (Right(sRevision, Length(sRevision) - iSeparatorPos)) to sRevision
12150>>>                Increment iCurrentPart
12151>>>            End
12151>>>>
12151>>>            Else If (sRevision <> "") Begin
12154>>>                Move sRevision to iPartRev
12155>>>                Move "" to sRevision
12156>>>                Increment iCurrentPart
12157>>>            End
12157>>>>
12157>>>            Else ;                Move -1 to iPartRev
12159>>>        Until (iCurrentPart >= iPartNum or iPartRev = -1)
12161>>>        
12161>>>        Function_Return iPartRev
12162>>>    End_Function
12163>>>    
12163>>>    
12163>>>    
12163>>>    // Returns the major revision of the CK
12163>>>    //
12163>>>    Function CKMajorRevision Returns Integer
12165>>>        Function_Return (ExtractPartFromRevision (Self, 1, CKRevision(Self)))
12166>>>    End_Function
12167>>>    
12167>>>    
12167>>>    
12167>>>    // Returns the minor revision of the CK
12167>>>    //
12167>>>    Function CKMinorRevision Returns Integer
12169>>>        Function_Return (ExtractPartFromRevision (Self, 2, CKRevision(Self)))
12170>>>    End_Function
12171>>>    
12171>>>    
12171>>>    
12171>>>    // Returns the release revision of the CK
12171>>>    //
12171>>>    Function CKReleaseRevision Returns Integer
12173>>>        Function_Return (ExtractPartFromRevision (Self, 3, CKRevision(Self)))
12174>>>    End_Function
12175>>>    
12175>>>    
12175>>>    
12175>>>    // Returns the major revision of the CK
12175>>>    //
12175>>>    Function CKBuildRevision Returns Integer
12177>>>        Function_Return (ExtractPartFromRevision (Self, 4, CKRevision(Self)))
12178>>>    End_Function
12179>>>    
12179>>>    
12179>>>    
12179>>>    // Determines if the CK conforms to a passed minimal revsion.
12179>>>    //
12179>>>    Function IsMinimalRevision Integer iMajor Integer iMinor Integer iRelease Integer iBuild Returns Integer
12181>>>        If (iMajor < CKMajorRevision(Self)) ;            Function_Return (True)
12184>>>        Else If (iMajor = CKMajorRevision(Self)) Begin
12187>>>            If (iMinor < CKMinorRevision(Self)) ;                Function_Return (True)
12190>>>            Else If (iMinor = CKMinorRevision(Self)) Begin
12193>>>                If (iRelease < CKReleaseRevision(Self)) ;                    Function_Return (True)
12196>>>                Else If (iRelease = CKReleaseRevision(Self) and iBuild <= CKBuildRevision(Self)) ;                    Function_Return (True)
12200>>>            End
12200>>>>
12200>>>        End
12200>>>>
12200>>>        
12200>>>        Function_Return (False)
12201>>>    End_Function
12202>>>    
12202>>>    
12202>>>    
12202>>>    // Returns the Connectiivty Kit registration name.
12202>>>    //
12202>>>    Function RegistrationName Returns String
12204>>>        String  sRegistration
12204>>>        String  sDRiverId
12204>>>        String  sVoid
12204>>>        Integer iRetval
12204>>>        
12204>>>        Get psDriverID to sDriverID
12205>>>        If (sDRiverID <> "") Begin
12207>>>            Move (Repeat(" ", 255)) to sRegistration
12208>>>            Call_Driver 0 sDRiverID Function CLI_GETREGNAME Callback 0 Passing sRegistration sVoid 0 Result iRetval
12213>>>        End
12213>>>>
12213>>>        
12213>>>        Function_Return sRegistration
12214>>>    End_Function
12215>>>    
12215>>>    // Returns the Connectiivty Kit serial number.
12215>>>    //
12215>>>    Function SerialNumber Returns Integer
12217>>>        String  sDRiverId
12217>>>        String  sVoid
12217>>>        Integer iRetval
12217>>>        
12217>>>        Get psDriverID to sDriverID
12218>>>        If (sDRiverID <> "") Begin
12220>>>            Call_Driver 0 sDRiverID Function CLI_GETSERIALNUM Callback 0 Passing sVoid sVoid 0 Result iRetval
12225>>>        End
12225>>>>
12225>>>        
12225>>>        Function_Return iRetval
12226>>>    End_Function
12227>>>    
12227>>>    
12227>>>    // Returns the Connectiivty Kit maximum number of users.
12227>>>    //
12227>>>    Function MaxUsers Returns Integer
12229>>>        String  sDRiverId
12229>>>        String  sVoid
12229>>>        Integer iRetval
12229>>>        
12229>>>        Get psDriverID to sDriverID
12230>>>        If (sDRiverID <> "") Begin
12232>>>            Call_Driver 0 sDRiverID Function CLI_GETMAXUSERS Callback 0 Passing sVoid sVoid 0 Result iRetval
12237>>>        End
12237>>>>
12237>>>        
12237>>>        Function_Return iRetval
12238>>>    End_Function
12239>>>    
12239>>>    
12239>>>    
12239>>>    // Dump the current status of the drver in the passed disk file.
12239>>>    //
12239>>>    Procedure DumpStatus String sFileName
12241>>>        String  sVoid
12241>>>        String  sDriverID
12241>>>        Integer iVoid
12241>>>        
12241>>>        Get psDriverID to sDriverID
12242>>>        If (sDriverID <> "") ;            Call_Driver 0 sDriverID Function CLI_DUMPSTATUS Callback 0 Passing sFileName sVoid iVoid Result iVoid
12249>>>    End_Procedure
12250>>>    
12250>>>    
12250>>>    
12250>>>    // Reset all driver level configurable attributes to the
12250>>>    // default value and then reread the configuration.
12250>>>    //
12250>>>    Procedure ReadConfiguration
12252>>>        String  sVoid
12252>>>        String  sDriverID
12252>>>        Integer iVoid
12252>>>        
12252>>>        Get psDriverID to sDriverID
12253>>>        If (sDriverID <> "") ;            Call_Driver 0 sDriverID Function CLI_READCONFIGURATION Callback 0 Passing sVoid sVoid iVoid Result iVoid
12260>>>    End_Procedure
12261>>>    
12261>>>    
12261>>>    
12261>>>    // Convert a text to the corresponding
12261>>>    // Generate_Record_ID_Method attribute value
12261>>>    //
12261>>>    Function TextToRIMValue String sText Returns Integer
12263>>>        If (sText = "None") ;            Function_Return RIM_NONE
12266>>>        Else If (sText = "Identity Column") ;            Function_Return RIM_IDENTITY_COLUMN
12270>>>        Else If (sText = "Dispenser Table") ;            Function_Return RIM_DISPENSER_TABLE
12274>>>        Else If (sText = "External") ;            Function_Return RIM_EXTERNAL
12278>>>    End_Function
12279>>>    
12279>>>    
12279>>>    
12279>>>    // Convert a Generate_Record_ID_Method attribute value to the
12279>>>    // corresponding text.
12279>>>    //
12279>>>    Function RIMValueToText Integer iAttrValue Returns String
12281>>>        If (iAttrValue = RIM_NONE) ;            Function_Return "None"
12284>>>        Else If (iAttrValue = RIM_IDENTITY_COLUMN) ;            Function_Return "Identity Column"
12288>>>        Else If (iAttrValue = RIM_DISPENSER_TABLE) ;            Function_Return "Dispenser Table"
12292>>>        Else If (iAttrValue = RIM_EXTERNAL) ;            Function_Return "External"
12296>>>    End_Function
12297>>>    
12297>>>    
12297>>>    
12297>>>    // Convert a text to the corresponding
12297>>>    // Generate_Record_ID_Method attribute value
12297>>>    //
12297>>>    Function TextToROValue String sText Returns Integer
12299>>>        If (sText = "No") ;            Function_Return RO_NO
12302>>>        Else If (sText = "Ignore Change") ;            Function_Return RO_IGNORECHANGE
12306>>>        Else If (sText = "Accept Change") ;            Function_Return RO_ACCEPTCHANGE
12310>>>        Else If (sText = "Error On Change") ;            Function_Return RO_ERRORONCHANGE
12314>>>    End_Function
12315>>>    
12315>>>    
12315>>>    
12315>>>    // Convert a Generate_Record_ID_Method attribute value to the
12315>>>    // corresponding text.
12315>>>    //
12315>>>    Function ROValueToText Integer iAttrValue Returns String
12317>>>        If (iAttrValue = RO_NO) ;            Function_Return "No"
12320>>>        Else If (iAttrValue = RO_IGNORECHANGE) ;            Function_Return "Ignore Change"
12324>>>        Else If (iAttrValue = RO_ACCEPTCHANGE) ;            Function_Return "Accept Change"
12328>>>        Else If (iAttrValue = RO_ERRORONCHANGE) ;            Function_Return "Error On Change"
12332>>>    End_Function
12333>>>    
12333>>>    
12333>>>    
12333>>>    // Return the text f the last error geneated by the driver.
12333>>>    //
12333>>>    Function LastDriverError Returns String
12335>>>        String  sDriverID
12335>>>        String  sLastError
12335>>>        String  sLastErrorLength
12335>>>        Integer iLastErrorLength
12335>>>        Integer iVoid
12335>>>        
12335>>>        // Initialize
12335>>>        Move "" to sLastError
12336>>>        
12336>>>        Get psDriverID to sDriverID
12337>>>        If (sDriverID <> "") Begin
12339>>>            // Get the text of the last error
12339>>>            Move (Repeat(Character(" "), 14)) to sLastErrorlength
12340>>>            Call_Driver 0 sDriverID Function CLI_GETDRIVERATTRIBUTE Callback 0 Passing sLastErrorLength iVoid DRVR_LASTERRORTEXTLENGTH Result iVoid
12345>>>            Move (Left(sLastErrorLength, Pos(Character(0), sLastErrorLength) - 1)) to iLastErrorLength
12346>>>            
12346>>>            If (iLastErrorLength > 0) Begin
12348>>>                Move (Repeat(Character(" "), iLastErrorLength + 1)) to sLastError
12349>>>                Call_Driver 0 sDriverID Function CLI_GETDRIVERATTRIBUTE Callback 0 Passing sLastError iVoid DRVR_LASTERRORTEXT Result iVoid
12354>>>                Move (Left(sLastError, Pos(Character(0), sLastError) - 1)) to sLastError
12355>>>            End
12355>>>>
12355>>>        End
12355>>>>
12355>>>        
12355>>>        Function_Return sLastError
12356>>>    End_Function
12357>>>    
12357>>>    
12357>>>    
12357>>>    // Enumerate the tables in a database
12357>>>    //
12357>>>    Function EnumerateTables String sLogin Returns Integer
12359>>>        String  sDriver
12359>>>        String  sVoid
12359>>>        Integer iNumTables
12359>>>        Integer iVoid
12359>>>        
12359>>>        Get psDriverID to sDriver
12360>>>        If (sDriver <> "") ;            Call_Driver 0 sDriver Function CLI_ENUMERATE_TABLES Callback 0 Passing sLogin sVoid iVoid Result iNumTables
12367>>>        
12367>>>        Function_Return iNumTables
12368>>>    End_Function
12369>>>    
12369>>>    
12369>>>    
12369>>>    // Returns the name of the table enumerated at the given position
12369>>>    //
12369>>>    Function TableName Integer iIndex Returns String
12371>>>        String  sDriver
12371>>>        String  sTableName
12371>>>        String  sVoid
12371>>>        Integer iVoid
12371>>>        
12371>>>        Get psDriverID to sDriver
12372>>>        If (sDriver <> "") Begin
12374>>>            Move (Repeat(" ", 255)) to sTableName
12375>>>            Call_Driver 0 sDriver Function CLI_TABLENAME Callback 0 Passing sTableName sVoid iIndex Result iVoid
12380>>>        End
12380>>>>
12380>>>        
12380>>>        Function_Return sTableName
12381>>>    End_Function
12382>>>    
12382>>>    
12382>>>    
12382>>>    // Returns the name of the schema of the table enumerated at the given position
12382>>>    //
12382>>>    Function SchemaName Integer iIndex Returns String
12384>>>        String  sDriver
12384>>>        String  sSchemaName
12384>>>        String  sVoid
12384>>>        Integer iVoid
12384>>>        
12384>>>        Get psDriverID to sDriver
12385>>>        If (sDriver <> "") Begin
12387>>>            Move (Repeat(" ", 255)) to sSchemaName
12388>>>            Call_Driver 0 sDriver Function CLI_TABLESCHEMA Callback 0 Passing sSchemaName sVoid iIndex Result iVoid
12393>>>        End
12393>>>>
12393>>>        
12393>>>        Function_Return sSchemaName
12394>>>    End_Function
12395>>>    
12395>>>    // Returns the type of the table enumerated at the given position.
12395>>>    // Types can be "TABLE", "VIEW", "SYSTEM TABLE", "GLOBAL TEMPORARY",
12395>>>    // "LOCAL TEMPORARY", "ALIAS", "SYNONYM"
12395>>>    Function TableType Integer iIndex Returns String
12397>>>        String  sDriver
12397>>>        String  sTableType
12397>>>        String  sVoid
12397>>>        Integer iVoid
12397>>>        
12397>>>        Get psDriverID to sDriver
12398>>>        If (sDriver <> "") Begin
12400>>>            Move (Repeat(" ", 25)) to sTableType
12401>>>            Call_Driver 0 sDriver Function CLI_TABLETYPE Callback 0 Passing sTableType sVoid iIndex Result iVoid
12406>>>        End
12406>>>>
12406>>>        
12406>>>        Function_Return sTableType
12407>>>    End_Function
12408>>>    
12408>>>    
12408>>>    // Returns the comment of the table enumerated at the given position
12408>>>    //
12408>>>    Function TableComment Integer iIndex Returns String
12410>>>        String  sDriver
12410>>>        String  sTableComment
12410>>>        String  sVoid
12410>>>        Integer iVoid
12410>>>        
12410>>>        Get psDriverID to sDriver
12411>>>        If (sDriver <> "") Begin
12413>>>            Move (Repeat(" ", 1024)) to sTableComment
12414>>>            Call_Driver 0 sDriver Function CLI_TABLECOMMENT Callback 0 Passing sTableComment sVoid iIndex Result iVoid
12419>>>        End
12419>>>>
12419>>>        
12419>>>        Function_Return sTableComment
12420>>>    End_Function
12421>>>    
12421>>>    // Enumerate the columns in a table
12421>>>    //
12421>>>    Function EnumerateColumns String sLogin String sTableName Returns Integer
12423>>>        String  sDriver
12423>>>        Integer iNumColumns
12423>>>        Integer iVoid
12423>>>        
12423>>>        Get psDriverID to sDriver
12424>>>        If (sDriver <> "") ;            Call_Driver 0 sDriver Function CLI_ENUMERATE_COLUMNS Callback 0 Passing sLogin sTablename iVoid Result iNumColumns
12431>>>        
12431>>>        Function_Return iNumColumns
12432>>>    End_Function
12433>>>    
12433>>>    
12433>>>    
12433>>>    // Returns the name of the column enumerated at the given position
12433>>>    //
12433>>>    Function ColumnName Integer iIndex Returns String
12435>>>        String  sDriver
12435>>>        String  sColumnName
12435>>>        String  sVoid
12435>>>        Integer iVoid
12435>>>        
12435>>>        Get psDriverID to sDriver
12436>>>        If (sDriver <> "") Begin
12438>>>            Move (Repeat(" ", 255)) to sColumnName
12439>>>            Call_Driver 0 sDriver Function CLI_COLUMNNAME Callback 0 Passing sColumnName sVoid iIndex Result iVoid
12444>>>        End
12444>>>>
12444>>>        
12444>>>        Function_Return sColumnName
12445>>>    End_Function
12446>>>    
12446>>>    // Convert a DataFlex date to a SQL date using the dummy zero date value.
12446>>>    //
12446>>>    Function CLIDFDateToSQLDate String sDriver Date dDFDate Returns String
12448>>>        
12448>>>        Integer iDriverIndex
12448>>>        
12448>>>        String sSQLDate
12448>>>        Integer iOrgDateFmt
12448>>>        Integer iOrgDateSep
12448>>>        
12448>>>        // Change date format to military, SQL dates are military dates
12448>>>        Get_Attribute DF_DATE_FORMAT to iOrgDateFmt
12451>>>        Get_Attribute DF_DATE_SEPARATOR to iOrgDateSep
12454>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_MILITARY
12457>>>        Set_Attribute DF_DATE_SEPARATOR to (Ascii('-'))
12460>>>        
12460>>>        If (Integer(dDFDate = 0)) Begin
12462>>>            // Return the dummy zero date
12462>>>            Get DriverIndex sDriver to iDriverIndex
12463>>>            If (iDriverIndex <> 0) Begin
12465>>>                Get_Attribute DF_DRIVER_DUMMY_ZERO_DATE_VALUE of iDriverIndex to sSQLDate
12468>>>            End
12468>>>>
12468>>>            Else Begin
12469>>>                Move '0001-01-01' to sSQLDate
12470>>>            End
12470>>>>
12470>>>        End
12470>>>>
12470>>>        Else Begin
12471>>>            Move dDFDate to sSQLDate
12472>>>        End
12472>>>>
12472>>>        
12472>>>        // Change date format back to original
12472>>>        Set_Attribute DF_DATE_FORMAT to iOrgDateFmt
12475>>>        Set_Attribute DF_DATE_SEPARATOR to iOrgDateSep
12478>>>        
12478>>>        Function_Return sSQLDate
12479>>>    End_Function
12480>>>    
12480>>>    
12480>>>    
12480>>>    // Convert a SQL date to a DataFlex date using the dummy zero date value.
12480>>>    Function CLISQLDateToDFDate String sDriver String sSQLDate Returns Date
12482>>>        
12482>>>        Integer iDriverIndex
12482>>>        
12482>>>        Date dDFDate
12482>>>        String sDummyDateValue
12482>>>        Integer iOrgDateFmt
12482>>>        Integer iOrgDateSep
12482>>>        
12482>>>        // Change date format to military, SQL dates are military dates
12482>>>        Get_Attribute DF_DATE_FORMAT to iOrgDateFmt
12485>>>        Get_Attribute DF_DATE_SEPARATOR to iOrgDateSep
12488>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_MILITARY
12491>>>        Set_Attribute DF_DATE_SEPARATOR to (Ascii('-'))
12494>>>        
12494>>>        // We only need to convert if the date is the dummy zero date value
12494>>>        Get DriverIndex sDriver to iDriverIndex
12495>>>        If (iDriverIndex <> 0) Begin
12497>>>            Get_Attribute DF_DRIVER_DUMMY_ZERO_DATE_VALUE of iDriverIndex to sDummyDateValue
12500>>>        End
12500>>>>
12500>>>        Else Begin
12501>>>            Move '0001-01-01' to sDummyDateValue
12502>>>        End
12502>>>>
12502>>>        If (sDummyDateValue = sSQLDate) ;            Move 0 to dDFDate
12505>>>        Else ;            Move sSQLDate to dDFDate
12507>>>        
12507>>>        // Change date format back to original
12507>>>        Set_Attribute DF_DATE_FORMAT to iOrgDateFmt
12510>>>        Set_Attribute DF_DATE_SEPARATOR to iOrgDateSep
12513>>>        
12513>>>        Function_Return dDFDate
12514>>>    End_Function
12515>>>    
12515>>>    Function DriverIndex String sDriver Returns Integer
12517>>>        
12517>>>        String  sCurrentDriver
12517>>>        Integer iNumberOfDrivers iDriver iCount
12517>>>        
12517>>>        Move 0 to iDriver
12518>>>        
12518>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
12521>>>        For iCount from 1 to iNumberOfDrivers
12527>>>>
12527>>>            
12527>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
12530>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriver) ) Begin
12532>>>                Move iCount to iDriver
12533>>>            End
12533>>>>
12533>>>        Loop
12534>>>>
12534>>>        
12534>>>        Function_Return iDriver
12535>>>        
12535>>>    End_Function
12536>>>    
12536>>>    
12536>>>    // Redirect an exisitng connection. The existing connection
12536>>>    // will point to another database but all tables will stay
12536>>>    // open!
12536>>>    Function RedirectConnection String sOldConnection String sNewConnection Returns Integer
12538>>>        String  sDriver
12538>>>        String  sVoid
12538>>>        Integer iResult
12538>>>        Integer iVoid
12538>>>        
12538>>>        Get psDriverID to sDriver
12539>>>        If (sDriver <> "") Begin
12541>>>            Call_Driver 0 sDriver Function CLI_REDIRECTCONNECTION Callback 0 Passing sOldConnection sNewConnection iVoid Result iResult
12546>>>        End
12546>>>>
12546>>>        Function_Return iResult
12547>>>    End_Function
12548>>>    
12548>>>    // Redirect a connection of a connection ID
12548>>>    // sConnectionId must contain a valid ConnectionId ("DFCONNID=MyID")
12548>>>    // sConnectString must contain a valid connectstring ("SERVER=MyServer;DATABASE=MyDatabase;UID=MyName;PWD=MyPassword")
12548>>>    //
12548>>>    // RedirectIDConnectString will redirect from the old connection (Server/Database the connectionId currently points to)
12548>>>    // to the new connection (Server/Database specified in sConnectString)
12548>>>    // All opened tables will be moved from old connection to new connection. (Tables must have identical structure in both connections)
12548>>>    //
12548>>>    // If bKeepLoggedIn = false, the new connection will be logged in, the old connection will be logged out
12548>>>    // If bKeepLoggedIn = true, connections will remain open and re-used on next redirectIdConnection
12548>>>    //
12548>>>    // Returns:
12548>>>    //     0 when the redirection was successful.
12548>>>    //     1 if the connection ID does not exist or can not be found.
12548>>>    //     2 login into the new connection failed.
12548>>>    //
12548>>>    Function RedirectIdConnectString String sConnectionId String sConnectString Boolean bKeepLoggedIn Returns Integer
12550>>>        String  sDriver
12550>>>        String  sVoid
12550>>>        Integer iResult
12550>>>        
12550>>>        Integer iOption
12550>>>        
12550>>>        // iOption
12550>>>        // 0 = RedirectConnection
12550>>>        // 1 = RedirectIdConnectString
12550>>>        // 2 = RedirectIdConnectStringKeepLoggedIn
12550>>>        If (bKeepLoggedIn) Begin
12552>>>            Move 2 to iOption
12553>>>        End
12553>>>>
12553>>>        Else Begin
12554>>>            Move 1 to iOption
12555>>>        End
12555>>>>
12555>>>        
12555>>>        Get psDriverID to sDriver
12556>>>        If (sDriver <> "") Begin
12558>>>            Call_Driver 0 sDriver Function CLI_REDIRECTCONNECTION Callback 0 Passing sConnectionId sConnectString iOption Result iResult
12563>>>        End
12563>>>>
12563>>>        Function_Return iResult
12564>>>    End_Function
12565>>>    
12565>>>    
12565>>>    // Create a DataFlex side connection id that can be used later on.
12565>>>    //
12565>>>    Function CreateConnectionID String sID String sConnStr Integer iOpt Returns Integer
12567>>>        String  sDriver
12567>>>        Integer iResult
12567>>>        Integer iOptions
12567>>>        
12567>>>        Get psDriverID to sDriver
12568>>>        If (Num_Arguments = 2) ;            Move 0 to iOptions
12571>>>        Else ;            Move iOpt to iOptions
12573>>>        If (sDriver <> "") Begin
12575>>>            Call_Driver 0 sDriver Function CLI_CREATECONNECTIONID Callback 0 Passing sID sConnStr iOptions Result iResult
12580>>>        End
12580>>>>
12580>>>        Function_Return iResult
12581>>>    End_Function
12582>>>    
12582>>>    
12582>>>    
12582>>>    // Delete a DataFlex side connection id.
12582>>>    //
12582>>>    Function DeleteConnectionID String sID Integer iIndex Returns Integer
12584>>>        String  sDriver
12584>>>        Integer iResult
12584>>>        String sVoid
12584>>>        
12584>>>        Get psDriverID to sDriver
12585>>>        If (sDriver <> "") Begin
12587>>>            Call_Driver 0 sDriver Function CLI_DELETECONNECTIONID Callback 0 Passing sID sVoid iIndex Result iResult
12592>>>        End
12592>>>>
12592>>>        Function_Return iResult
12593>>>    End_Function
12594>>>    
12594>>>End_Class
12595>Use vWin32fh.pkg
Including file: vWin32fh.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\vwin32fh\vWin32fh.pkg)
12595>>>// This code is part of VDF GUIdance
12595>>>// Visit us @ http://www.vdf-guidance.com
12595>>>// e-Mail us @ info@vdf-guidance.com
12595>>>// VDF GUIdance is a mutual project of
12595>>>// Frank Vandervelpen - Vandervelpen Systems and
12595>>>// Wil van Antwerpen  - Antwise Solutions
12595>>>// All software source code should be used <<AS IS>> without any warranty.
12595>>>//
12595>>>//
12595>>>// *** Windows 32bit file handling wrapper class ***
12595>>>//
12595>>>
12595>>>
12595>>>Use File_Dlg.pkg      // Contains OpenDialog class definition
12595>>>Use cvFileDialogs.pkg
Including file: cvFileDialogs.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\vwin32fh\cvFileDialogs.pkg)
12595>>>>>//***************************************************************************
12595>>>>>//*
12595>>>>>//* Class:        cvSaveAsDialog
12595>>>>>//* Package Name: cvFileDialogs.pkg
12595>>>>>//*
12595>>>>>//***************************************************************************
12595>>>>>
12595>>>>>Use File_dlg.pkg
12595>>>>>
12595>>>>>// *WvA: 13-01-1999 Created
12595>>>>>// The Class cSelectFile_Dialog is created to support the function Select_File
12595>>>>>// This function opens the Windows standard file open dialog and returns the selected
12595>>>>>// file_name.
12595>>>>>Class cvSelectFile_Dialog is an OpenDialog
12596>>>>>
12596>>>>>    Procedure Construct_Object Integer iImage_Id
12598>>>>>        Forward Send Construct_Object iImage_Id
12600>>>>>        Set HideReadOnly_State to True
12601>>>>>    End_Procedure
12602>>>>>
12602>>>>>    Function SelectedFileName Returns String
12604>>>>>        String sFileName
12604>>>>>        Move "" to sFileName
12605>>>>>        If (Show_Dialog(Self)) Begin
12607>>>>>            Move (RTrim(File_Name(Self))) to sFileName
12608>>>>>        End
12608>>>>>>
12608>>>>>        Function_Return sFileName
12609>>>>>    End_Function
12610>>>>>End_Class
12611>>>>>
12611>>>>>// *WvA: 13-01-1999 Created
12611>>>>>// This function opens the Windows standard file open dialog and returns the selected
12611>>>>>// file_name. Returns '' if the user didn't make a selection.
12611>>>>>// **WvA: 17-10-2003 Cleaned up and added code to destroy the dynamically created
12611>>>>>//                   file-open dialog
12611>>>>>Function vSelect_File Global String sSupportedFileTypes String sCaptionText String sInitialFolder Returns String
12613>>>>>    String sSelectedFile
12613>>>>>    Integer hoOpenFileDialog
12613>>>>>
12613>>>>>    Object oOpenFileDialog is a cvSelectFile_Dialog
12615>>>>>
12615>>>>>        Set Dialog_Caption    to sCaptionText
12616>>>>>        Set Filter_String     to sSupportedFileTypes
12617>>>>>        Set Initial_Folder    to sInitialFolder
12618>>>>>
12618>>>>>        Move Self       to hoOpenFileDialog
12619>>>>>    End_Object
12620>>>>>
12620>>>>>    Get SelectedFileName of hoOpenFileDialog to sSelectedFile
12621>>>>>    Send Destroy_Object to hoOpenFileDialog
12622>>>>>    Function_Return sSelectedFile
12623>>>>>End_Function
12624>>>>>
12624>>>>>Class cvSaveAsDialog is a SaveAsDialog
12625>>>>>
12625>>>>>    Procedure Construct_Object
12627>>>>>        Forward Send Construct_Object
12629>>>>>        Set HideReadOnly_State to True
12630>>>>>    End_Procedure
12631>>>>>
12631>>>>>    Function SelectedFileName Returns String
12633>>>>>        String sFileName
12633>>>>>        Move "" to sFileName
12634>>>>>        If (Show_Dialog(Self)) Begin
12636>>>>>            Move (RTrim(File_Name(Self))) to sFileName
12637>>>>>        End
12637>>>>>>
12637>>>>>        Function_Return sFileName
12638>>>>>    End_Function
12639>>>>>
12639>>>>>End_Class
12640>>>>>
12640>>>>>// Added optional default filename as suggested by Nils
12640>>>>>Function vSelectSaveFile Global String sSupportedFileTypes String sCaptionText String sInitialFolder String sDefaultFileName Returns String
12642>>>>>    String sSelectedFile
12642>>>>>    Integer hoDialog
12642>>>>>
12642>>>>>    Move "" to sSelectedFile
12643>>>>>    Get Create (RefClass(cvSaveAsDialog)) to hoDialog
12644>>>>>    If (hoDialog) Begin
12646>>>>>    //Set NoChangeDir_State Of hoDialog To True
12646>>>>>        Set Dialog_Caption    of hoDialog to sCaptionText
12647>>>>>        Set Filter_String     of hoDialog to sSupportedFileTypes
12648>>>>>        Set Initial_Folder    of hoDialog to sInitialFolder
12649>>>>>        If (Num_Arguments = 4) Begin
12651>>>>>            Set File_Title        of hoDialog to sDefaultFileName
12652>>>>>        End
12652>>>>>>
12652>>>>>        Get SelectedFileName  of hoDialog to sSelectedFile
12653>>>>>        Send Destroy of hoDialog
12654>>>>>    End
12654>>>>>>
12654>>>>>    Function_Return sSelectedFile
12655>>>>>End_Function
12656>>>Use Seq_chnl.pkg
12656>>>
12656>>>Use windows.pkg
12656>>>Use Dll.pkg
12656>>>
12656>>>Use vWin32fhW.pkg     // WinAPI Unicode version
Including file: vwin32fhW.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\vwin32fh\vwin32fhW.pkg)
12656>>>>>// This code is part of VDF GUIdance
12656>>>>>// Visit us @ http://www.vdf-guidance.com
12656>>>>>// e-Mail us @ info@vdf-guidance.com
12656>>>>>// VDF GUIdance is a mutual project of
12656>>>>>// Frank Vandervelpen - Vandervelpen Systems and
12656>>>>>// Wil van Antwerpen  - Antwise Solutions
12656>>>>>// All software source code should be used <<AS IS>> without any warranty.
12656>>>>>//
12656>>>>>//
12656>>>>>// *** Windows 32bit file handling wrapper class ***
12656>>>>>// Unicode variant
12656>>>>>
12656>>>>>Use vWin32fhW.h       // Header file with WinAPI Unicode declarations
Including file: vwin32fhW.h    (C:\Projects\DF20\DbUpdateFramework\Libraries\vwin32fh\vwin32fhW.h)
12656>>>>>>>//TH-Header
12656>>>>>>>//*****************************************************************************************
12656>>>>>>>// Copyright (c)  2004 KURANT Project
12656>>>>>>>// All rights reserved.
12656>>>>>>>//
12656>>>>>>>// $FileName    : G:\Projects\vWin32fh\vWin32fh.h
12656>>>>>>>// $ProjectName : Windows 32 bits file handling
12656>>>>>>>// $Authors     : Wil van Antwerpen
12656>>>>>>>// $Created     : 19.02.2004  19:25
12656>>>>>>>// $Type        : BSD (as in do with it whatever you like)
12656>>>>>>>//
12656>>>>>>>// Contents:
12656>>>>>>>//  This file contains the Windows API external function call definitions and
12656>>>>>>>//  constants as they are used in the vWin32fh package.
12656>>>>>>>//*****************************************************************************************
12656>>>>>>>//TH-RevisionStart
12656>>>>>>>//TH-RevisionEnd
12656>>>>>>>
12656>>>>>>>Define CS_DDE_ERR_FILE_NOT_FOUND  For "The specified file was not found.\n"
12656>>>>>>>Define CS_DDE_ERR_PATH_NOT_FOUND  For "The specified path was not found.\n"
12656>>>>>>>Define CS_DDE_ERR_BAD_FORMAT      For "The .EXE file is invalid.\n"
12656>>>>>>>Define CS_DDE_ERR_ACCESSDENIED    For "The operating system denied access to the specified file.\n"
12656>>>>>>>Define CS_DDE_ERR_ASSOCINCOMPLETE For "The filename association is incomplete or invalid.\n"
12656>>>>>>>Define CS_DDE_ERR_DDEBUSY         For "The DDE transaction could not be completed because other DDE\ntransactions were being processed.\n"
12656>>>>>>>Define CS_DDE_ERR_DDEFAIL         For "The DDE transaction failed.\n"
12656>>>>>>>Define CS_DDE_ERR_DDETIMEOUT      For "The DDE transaction could not be completed,\nbecause the request timed out.\n"
12656>>>>>>>Define CS_DDE_ERR_DLLNOTFOUND     For "The specified dynamic-link library was not found.\n"
12656>>>>>>>Define CS_DDE_ERR_NOASSOC         For "There is no application associated with the given filename extension.\n"
12656>>>>>>>Define CS_DDE_ERR_OOM             For "There is not enough free memory available to complete the operation.\n"
12656>>>>>>>Define CS_DDE_ERR_PNF             For "The specified path was not found.\n"
12656>>>>>>>Define CS_DDE_ERR_SHARE           For "A sharing violation occurred.\n"
12656>>>>>>>Define CS_DDE_ERR_UNKNOWN_LINE1   For "Unknown DDE-error occurred.\nErrornumber"
12656>>>>>>>Define CS_DDE_ERR_UNKNOWN_LINE2   For ".\n"
12656>>>>>>>Define CS_DDE_ERR_HANDL_PAKTC     For "\nPress a key to continue...\n\n"
12656>>>>>>>Define CS_DDE_ERR_HANDL_CAPTION   For "a DDE-error occurred"
12656>>>>>>>
12656>>>>>>>
12656>>>>>>>Define vMax_Path     For |CI260
12656>>>>>>>Define vMinChar      For |CI$80
12656>>>>>>>Define vMaxChar      For |CI$7F
12656>>>>>>>Define vMinShort     For |CI$8000
12656>>>>>>>Define vMaxShort     For |CI$7FFF
12656>>>>>>>Define vMinLong      For |CI$80000000
12656>>>>>>>Define vMaxLong      For |CI$7FFFFFFF
12656>>>>>>>Define vMaxByte      For |CI$FF
12656>>>>>>>Define vMaxWord      For |CI$FFFF
12656>>>>>>>Define vMaxDword     For |CI$FFFFFFFF
12656>>>>>>>
12656>>>>>>>
12656>>>>>>>
12656>>>>>>>// For FindFirstFile
12656>>>>>>>Define vINVALID_HANDLE_VALUE   For |CI-1
12656>>>>>>>Define vINVALID_FILE_SIZE      For |CI$FFFFFFFF
12656>>>>>>>Define vERROR_NO_MORE_FILES    For |CI18
12656>>>>>>>
12656>>>>>>>// The defines below can be used to find out what kind of error has occurred if
12656>>>>>>>// the API-call ShellExecute is used.
12656>>>>>>>Define vERROR_FILE_NOT_FOUND   For |CI0002
12656>>>>>>>Define vERROR_PATH_NOT_FOUND   For |CI0003
12656>>>>>>>Define vERROR_BAD_FORMAT       For |CI0011
12656>>>>>>>Define vSE_ERR_ACCESSDENIED    For |CI0005
12656>>>>>>>Define vSE_ERR_ASSOCINCOMPLETE For |CI0027
12656>>>>>>>Define vSE_ERR_DDEBUSY         For |CI0030
12656>>>>>>>Define vSE_ERR_DDEFAIL         For |CI0029
12656>>>>>>>Define vSE_ERR_DDETIMEOUT      For |CI0028
12656>>>>>>>Define vSE_ERR_DLLNOTFOUND     For |CI0032
12656>>>>>>>Define vSE_ERR_FNF             For |CI0002
12656>>>>>>>Define vSE_ERR_NOASSOC         For |CI0031
12656>>>>>>>Define vSE_ERR_OOM             For |CI0008
12656>>>>>>>Define vSE_ERR_PNF             For |CI0003
12656>>>>>>>Define vSE_ERR_SHARE           For |CI0026
12656>>>>>>>
12656>>>>>>>
12656>>>>>>>// C-Structure
12656>>>>>>>//typedef struct _browseinfo {
12656>>>>>>>//    HWND hwndOwner;
12656>>>>>>>//    LPCITEMIDLIST pidlRoot;
12656>>>>>>>//    LPSTR pszDisplayName;
12656>>>>>>>//    LPCSTR lpszTitle;
12656>>>>>>>//    UINT ulFlags;
12656>>>>>>>//    BFFCALLBACK lpfn;
12656>>>>>>>//    LPARAM lParam;
12656>>>>>>>//    int iImage;
12656>>>>>>>//} BROWSEINFO, *PBROWSEINFO, *LPBROWSEINFO;
12656>>>>>>>
12656>>>>>>>//declare C structure struct_browseinfo
12656>>>>>>>//as documented in MSDN under Windows Shell API
12656>>>>>>>Struct tvBrowseInfo
12656>>>>>>>  Handle    hWndOwner
12656>>>>>>>  Pointer   pIDLRoot
12656>>>>>>>  Pointer   pszDisplayName
12656>>>>>>>  Pointer   lpszTitle
12656>>>>>>>  DWord     ulFlags
12656>>>>>>>  Pointer   lpfnCallback
12656>>>>>>>  LongPtr   lParam
12656>>>>>>>  DWord     iImage
12656>>>>>>>End_Struct // tvBrowseInfo
12656>>>>>>>
12656>>>>>>>// Browsing for directory.
12656>>>>>>>Define vBIF_RETURNONLYFSDIRS   For |CI$0001  // For finding a folder to start document searching
12656>>>>>>>Define vBIF_DONTGOBELOWDOMAIN  For |CI$0002  // For starting the Find Computer
12656>>>>>>>Define vBIF_STATUSTEXT         For |CI$0004  // Includes a status area in the dialog box.
12656>>>>>>>                                            // The callback function can set the status text by
12656>>>>>>>                                            // sending messages to the dialog box.
12656>>>>>>>Define vBIF_RETURNFSANCESTORS  For |CI$0008  // Only returns file system ancestors.
12656>>>>>>>
12656>>>>>>>Define vBIF_BROWSEFORCOMPUTER  For |CI$1000  // Browsing for Computers.
12656>>>>>>>Define vBIF_BROWSEFORPRINTER   For |CI$2000  // Browsing for Printers
12656>>>>>>>
12656>>>>>>>// message from browser
12656>>>>>>>//Define BFFM_INITIALIZED        1
12656>>>>>>>//Define BFFM_SELCHANGED         2
12656>>>>>>>
12656>>>>>>>// messages to browser
12656>>>>>>>//Define BFFM_SETSTATUSTEXT      (WM_USER + 100)
12656>>>>>>>//Define BFFM_ENABLEOK           (WM_USER + 101)
12656>>>>>>>//Define BFFM_SETSELECTION       (WM_USER + 102)
12656>>>>>>>
12656>>>>>>>
12656>>>>>>>External_function vWin32_SHBrowseForFolder "SHBrowseForFolderW" shell32.dll ;  Pointer lpsBrowseInfo Returns dWord
12657>>>>>>>
12657>>>>>>>External_function vWin32_SHGetPathFromIDList "SHGetPathFromIDListW" shell32.dll ;  Pointer pidList Pointer lpBuffer Returns dWord
12658>>>>>>>
12658>>>>>>>External_function vWin32_CoTaskMemFree "CoTaskMemFree" ole32.dll Pointer pV Returns Integer
12659>>>>>>>
12659>>>>>>>
12659>>>>>>>
12659>>>>>>>
12659>>>>>>>Struct tvSecurity_attributes
12659>>>>>>>  DWord   nLength
12659>>>>>>>  Pointer lpDescriptor
12659>>>>>>>  Integer bInheritHandle
12659>>>>>>>End_Struct // tvSecurity_attributes
12659>>>>>>>
12659>>>>>>>//nLength:
12659>>>>>>>// Specifies the size, in bytes, of this structure. Set this value to the size of the
12659>>>>>>>// SECURITY_ATTRIBUTES structure.
12659>>>>>>>// Windows NT: Some functions that use the SECURITY_ATTRIBUTES structure do not verify the
12659>>>>>>>// value of the nLength member. However, an application should still set it properly.
12659>>>>>>>// That ensures current, future, and cross-platform compatibility.
12659>>>>>>>//
12659>>>>>>>//lpSecurityDescriptor:
12659>>>>>>>// Points to a security descriptor for the object that controls the sharing of it.
12659>>>>>>>// If NULL is specified for this member, the object may be assigned the default security
12659>>>>>>>// descriptor of the calling process.
12659>>>>>>>//
12659>>>>>>>//bInheritHandle:
12659>>>>>>>// Specifies whether the returned handle is inherited when a new process is created.
12659>>>>>>>// If this member is TRUE, the new process inherits the handle.
12659>>>>>>>
12659>>>>>>>
12659>>>>>>>// BOOL CreateDirectory(
12659>>>>>>>//    LPCTSTR lpPathName,
12659>>>>>>>//    LPSECURITY_ATTRIBUTES lpSecurityAttributes  // pointer to a security descriptor
12659>>>>>>>//   );
12659>>>>>>>//
12659>>>>>>>// lpPathName
12659>>>>>>>//  Points to a null-terminated string that specifies the path of the directory
12659>>>>>>>//  to be created.
12659>>>>>>>//  There is a default string size limit for paths of MAX_PATH characters.
12659>>>>>>>//  This limit is related to how the CreateDirectory function parses paths.
12659>>>>>>>// lpSecurityAttributes
12659>>>>>>>//  Pointer to a SECURITY_ATTRIBUTES structure als called a security descriptor that
12659>>>>>>>//  determines whether the returned handle can be inherited by child processes.
12659>>>>>>>//  If lpSecurityAttributes is NULL, the handle cannot be inherited.
12659>>>>>>>// Returns:
12659>>>>>>>//  If the function succeeds, the return value is nonzero.
12659>>>>>>>//  If the function fails, the return value is zero. To get extended error information, call GetLastError.
12659>>>>>>>External_function vWin32_CreateDirectory "CreateDirectoryW" kernel32.dll ;  WString sPathName Pointer lpSecurity_Attributes Returns Integer
12660>>>>>>>
12660>>>>>>>
12660>>>>>>>// lpPathName
12660>>>>>>>//  Points to a null-terminated string that specifies the path of the directory
12660>>>>>>>//  to be removed.
12660>>>>>>>//  There is a default string size limit for paths of MAX_PATH characters.
12660>>>>>>>// Returns:
12660>>>>>>>//  If the function succeeds, the return value is nonzero.
12660>>>>>>>//  If the function fails, the return value is zero. To get extended error information, call GetLastError.
12660>>>>>>>External_function vWin32_RemoveDirectory "RemoveDirectoryW" kernel32.dll ;  WString sPathName Returns Integer
12661>>>>>>>
12661>>>>>>>
12661>>>>>>>
12661>>>>>>>// The ShellExecute function opens or prints a specified file. The file can be an
12661>>>>>>>// executable file or a document file.
12661>>>>>>>//
12661>>>>>>>// Operation can be one of the following:
12661>>>>>>>//    "OPEN"  The function opens the file specified by lpFile.
12661>>>>>>>//            The file can be an executable file or a document file.
12661>>>>>>>//            The file can be a folder to open.
12661>>>>>>>//    "PRINT" The function prints the file specified by lpFile.
12661>>>>>>>//            The file should be a document file. If the file is an executable file,
12661>>>>>>>//            the function opens the file, as if "open" had been specified.
12661>>>>>>>//  "EXPLORE" The function explores the folder specified by lpFile.
12661>>>>>>>//
12661>>>>>>>// Return Values:
12661>>>>>>>//
12661>>>>>>>// If the function succeeds, the return value is the instance handle of the application that
12661>>>>>>>// was run, or the handle of a dynamic data exchange (DDE) server application.
12661>>>>>>>// If the function fails, the return value is an error value that is less than or equal to 32.
12661>>>>>>>//
12661>>>>>>>// The following table lists these error values:
12661>>>>>>>// Public Const ERROR_FILE_NOT_FOUND = 2&
12661>>>>>>>// Public Const ERROR_PATH_NOT_FOUND = 3&
12661>>>>>>>// Public Const ERROR_BAD_FORMAT = 11&
12661>>>>>>>// Public Const SE_ERR_ACCESSDENIED = 5
12661>>>>>>>// Public Const SE_ERR_ASSOCINCOMPLETE = 27
12661>>>>>>>// Public Const SE_ERR_DDEBUSY = 30
12661>>>>>>>// Public Const SE_ERR_DDEFAIL = 29
12661>>>>>>>// Public Const SE_ERR_DDETIMEOUT = 28
12661>>>>>>>// Public Const SE_ERR_DLLNOTFOUND = 32
12661>>>>>>>// Public Const SE_ERR_FNF = 2
12661>>>>>>>// Public Const SE_ERR_NOASSOC = 31
12661>>>>>>>// Public Const SE_ERR_OOM = 8
12661>>>>>>>// Public Const SE_ERR_PNF = 3
12661>>>>>>>// Public Const SE_ERR_SHARE = 26
12661>>>>>>>
12661>>>>>>>
12661>>>>>>>
12661>>>>>>>// Code to open the program that is associated with the selected file.
12661>>>>>>>//
12661>>>>>>>// External function call used in Procedure DoStartDocument
12661>>>>>>>External_function vWin32_ShellExecute "ShellExecuteW" shell32.dll ;  Handle  hWnd ;  WString wsOperation ;  WString wsFile ;  WString wsParameters ;  WString wsDirectory ;  Dword   iShowCmd Returns Handle
12662>>>>>>>
12662>>>>>>>
12662>>>>>>>
12662>>>>>>>
12662>>>>>>>Define vFO_MOVE                For |CI$0001
12662>>>>>>>Define vFO_COPY                For |CI$0002
12662>>>>>>>Define vFO_DELETE              For |CI$0003
12662>>>>>>>Define vFO_RENAME              For |CI$0004
12662>>>>>>>
12662>>>>>>>Define vFOF_MULTIDESTFILES     For |CI$0001
12662>>>>>>>Define vFOF_CONFIRMMOUSE       For |CI$0002
12662>>>>>>>Define vFOF_SILENT             For |CI$0004  // don't create progress/report
12662>>>>>>>Define vFOF_RENAMEONCOLLISION  For |CI$0008
12662>>>>>>>Define vFOF_NOCONFIRMATION     For |CI$0010  // Don't prompt the user.
12662>>>>>>>Define vFOF_WANTMAPPINGHANDLE  For |CI$0020  // Fill in SHFILEOPSTRUCT.hNameMappings
12662>>>>>>>                                          // Must be freed using SHFreeNameMappings
12662>>>>>>>Define vFOF_ALLOWUNDO          For |CI$0040
12662>>>>>>>Define vFOF_FILESONLY          For |CI$0080  // on *.*, do only files
12662>>>>>>>Define vFOF_SIMPLEPROGRESS     For |CI$0100  // means don't show names of files
12662>>>>>>>Define vFOF_NOCONFIRMMKDIR     For |CI$0200  // don't confirm making any needed dirs
12662>>>>>>>
12662>>>>>>>Struct tvShFileOpStruct
12662>>>>>>>  Handle   hWnd
12662>>>>>>>  UInteger wFunc
12662>>>>>>>  Pointer  pFrom
12662>>>>>>>  Pointer  pTo
12662>>>>>>>  Short    fFlags
12662>>>>>>>  Integer  fAnyOperationsAborted
12662>>>>>>>  Pointer  hNameMappings
12662>>>>>>>  Pointer  lpszProgressTitle      // only used if FOF_SIMPLEPROGRESS
12662>>>>>>>End_Struct // tvShFileOpStruct
12662>>>>>>>
12662>>>>>>>// hwnd
12662>>>>>>>//   Handle of the dialog box to use to display information about the status of the operation.
12662>>>>>>>
12662>>>>>>>// wFunc
12662>>>>>>>//   Operation to perform. This member can be one of the following values:
12662>>>>>>>//     FO_COPY     Copies the files specified by pFrom to the location specified by pTo.
12662>>>>>>>//     FO_DELETE   Deletes the files specified by pFrom (pTo is ignored).
12662>>>>>>>//     FO_MOVE     Moves the files specified by pFrom to the location specified by pTo.
12662>>>>>>>//     FO_RENAME   Renames the files specified by pFrom.
12662>>>>>>>
12662>>>>>>>// pFrom
12662>>>>>>>//   Pointer to a buffer that specifies one or more source file names. Multiple names must
12662>>>>>>>//   be null-separated. The list of names must be double null-terminated.
12662>>>>>>>
12662>>>>>>>// pTo
12662>>>>>>>//   Pointer to a buffer that contains the name of the destination file or directory. The
12662>>>>>>>//   buffer can contain mutiple destination file names if the fFlags member specifies
12662>>>>>>>//   FOF_MULTIDESTFILES. Multiple names must be null-separated. The list of names must be
12662>>>>>>>//   double null-terminated.
12662>>>>>>>
12662>>>>>>>// fAnyOperationsAborted
12662>>>>>>>//   Value that receives TRUE if the user aborted any file operations before they
12662>>>>>>>//   were completed or FALSE otherwise.
12662>>>>>>>
12662>>>>>>>
12662>>>>>>>// Performs a copy, move, rename, or delete operation on a file system object.
12662>>>>>>>// This can be a file or a folder.
12662>>>>>>>// With thanks to Andrew S Kaplan
12662>>>>>>>External_function vWin32_SHFileOperation "SHFileOperationW" Shell32.dll ;        Pointer lpFileOp Returns Integer
12663>>>>>>>
12663>>>>>>>
12663>>>>>>>// Thanks To Oliver Nelson for posting this code on the newsgroups
12663>>>>>>>External_function vWin32_GetWindowsDirectory "GetWindowsDirectoryW" kernel32.dll ;                           Pointer lpBuffer Integer nSize Returns Integer
12664>>>>>>>
12664>>>>>>>
12664>>>>>>>
12664>>>>>>>// Courtesy Of Vincent Oorsprong
12664>>>>>>>//External_Function vWin32_GetTempFileName "GetTempFileNameA" Kernel32.Dll ;
12664>>>>>>>//   Pointer lpPathName ;
12664>>>>>>>//   Pointer lpPrefixString ;
12664>>>>>>>//   Integer uUnique ;
12664>>>>>>>//   Pointer lpTempFileName ;
12664>>>>>>>//   Returns Integer
12664>>>>>>>// **WvA: 28-04-2005 Changed string parameter type into pointers
12664>>>>>>>External_function vWin32_GetTempFileName "GetTempFileNameW" kernel32.dll WString sPath ;        WString sPrefix Integer iUnique Pointer lpTempFileName Returns Integer
12665>>>>>>>
12665>>>>>>>External_function vWin32_GetTempPath "GetTempPathW" Kernel32.Dll ;   Dword nBufferLength ;   Pointer lpBuffer ;   Returns Integer
12666>>>>>>>
12666>>>>>>>External_function vWin32_DeleteFile "DeleteFileW" Kernel32.Dll ;   WString sFileName ;   Returns Integer
12667>>>>>>>
12667>>>>>>>// from:
12667>>>>>>>// http://msdn.microsoft.com/library/default.asp?url=/library/en-us/shellcc/platform/shell/reference/enums/csidl.asp
12667>>>>>>>//
12667>>>>>>>Define vCSIDL_FLAG_CREATE       For |CI$8000 // IE5+, use this to create a special folder
12667>>>>>>>Define vCSIDL_ADMIN_TOOLS       For |CI$0030 // IE5+, The file system directory that is used to store administrative tools for an individual user
12667>>>>>>>Define vCSIDL_ALT_STARTUP       For |CI$001D // The file system directory that corresponds to the user's nonlocalized Startup program group
12667>>>>>>>Define vCSIDL_APPDATA           For |CI$001A // Version 4.71. The file system directory that serves as a common repository for application-specific data. A typical path is C:\Documents and Settings\<username>\Application Data
12667>>>>>>>Define vCSIDL_BITBUCKET         For |CI$000A // The virtual folder containing the objects in the user's Recycle Bin
12667>>>>>>>Define vCSIDL_CDBURN_AREA       For |CI$003B // IE6+ The file system directory acting as a staging area for files waiting to be written to CD. A typical path is C:\Documents and Settings\<username>\Local Settings\Application Data\Microsoft\CD Burning
12667>>>>>>>Define vCSIDL_COMMON_ADMINTOOLS For |CI$002F // IE5+ The file system directory containing administrative tools for all users of the computer
12667>>>>>>>Define vCSIDL_COMMON_ALTSTARTUP For |CI$001E // The file system directory that corresponds to the nonlocalized Startup program group for all users
12667>>>>>>>Define vCSIDL_COMMON_APPDATA    For |CI$0023 // IE5+ The file system directory containing application data for all users. A typical path is C:\Documents and Settings\All Users\Application Data
12667>>>>>>>Define vCSIDL_COMMON_DESKTOPDIRECTORY for |CI$0019 // WinNT+ Only, The file system directory that contains files and folders that appear on the desktop for all users. A typical path is C:\Documents and Settings\All Users\Desktop
12667>>>>>>>Define vCSIDL_COMMON_DOCUMENTS  For |CI$002E // IE5+ The file system directory that contains documents that are common to all users. A typical paths is C:\Documents and Settings\All Users\Documents
12667>>>>>>>Define vCSIDL_COMMON_FAVORITES  For |CI$001F // The file system directory that serves as a common repository for favorite items common to all users
12667>>>>>>>Define vCSIDL_COMMON_MUSIC      For |CI$0035 // IE6+ The file system directory that serves as a repository for music files common to all users. A typical path is C:\Documents and Settings\All Users\Documents\My Music
12667>>>>>>>Define vCSIDL_COMMON_PICTURES   For |CI$0036 // The file system directory that serves as a repository for image files common to all users. A typical path is C:\Documents and Settings\All Users\Documents\My Pictures
12667>>>>>>>Define vCSIDL_COMMON_PROGRAMS   For |CI$0017 // WinNT+ The file system directory that contains the directories for the common program groups that appear on the Start menu for all users. A typical path is C:\Documents and Settings\All Users\Start Menu\Programs
12667>>>>>>>Define vCSIDL_COMMON_STARTMENU  For |CI$0016 // WinNT+ The file system directory that contains the programs and folders that appear on the Start menu for all users. A typical path is C:\Documents and Settings\All Users\Start Menu
12667>>>>>>>Define vCSIDL_COMMON_STARTUP    For |CI$0018 // WinNT+ The file system directory that contains the programs that appear in the Startup folder for all users. A typical path is C:\Documents and Settings\All Users\Start Menu\Programs\Startup
12667>>>>>>>Define vCSIDL_COMMON_TEMPLATES  For |CI$002D // WinNT+ The file system directory that contains the templates that are available to all users. A typical path is C:\Documents and Settings\All Users\Templates
12667>>>>>>>Define vCSIDL_COMMON_VIDEO      For |CI$0037 // IE6+ The file system directory that serves as a repository for video files common to all users. A typical path is C:\Documents and Settings\All Users\Documents\My Videos
12667>>>>>>>Define vCSIDL_COMPUTERSNEARME   For |CI$003D // The folder representing other machines in your workgroup
12667>>>>>>>Define vCSIDL_CONNECTIONS       For |CI$0031 // The virtual folder representing Network Connections, containing network and dial-up connections
12667>>>>>>>Define vCSIDL_CONTROLS          For |CI$0003 // The virtual folder containing icons for the Control Panel applications
12667>>>>>>>Define vCSIDL_COOKIES           For |CI$0021 // The file system directory that serves as a common repository for Internet cookies. A typical path is C:\Documents and Settings\username\Cookies
12667>>>>>>>Define vCSIDL_DESKTOP           For |CI$0000 // The virtual folder representing the Windows desktop, the root of the namespace
12667>>>>>>>Define vCSIDL_DESKTOPDIRECTORY  For |CI$0010 // The file system directory used to physically store file objects on the desktop (not to be confused with the desktop folder itself). A typical path is C:\Documents and Settings\username\Desktop
12667>>>>>>>Define vCSIDL_DRIVES            For |CI$0011 // The virtual folder representing My Computer, containing everything on the local computer: storage devices, printers, and Control Panel. The folder may also contain mapped network drives
12667>>>>>>>Define vCSIDL_FAVORITES         For |CI$0006 // The file system directory that serves as a common repository for the user's favorite items. A typical path is C:\Documents and Settings\username\Favorites
12667>>>>>>>Define vCSIDL_FONTS             For |CI$0014 // A virtual folder containing fonts. A typical path is C:\Windows\Fonts
12667>>>>>>>Define vCSIDL_HISTORY           For |CI$0022 // The file system directory that serves as a common repository for Internet history items
12667>>>>>>>Define vCSIDL_INTERNET          For |CI$0001 // A virtual folder representing the Internet
12667>>>>>>>Define vCSIDL_INTERNET_CACHE    For |CI$0020 // Comctl4.72+, The file system directory that serves as a common repository for temporary Internet files. A typical path is C:\Documents and Settings\username\Local Settings\Temporary Internet Files
12667>>>>>>>Define vCSIDL_LOCAL_APPDATA     For |CI$001C // IE5+ The file system directory that serves as a data repository for local (nonroaming) applications. A typical path is C:\Documents and Settings\username\Local Settings\Application Data
12667>>>>>>>Define vCSIDL_MYDOCUMENTS       For |CI$000C // IE6+ The virtual folder representing the My Documents desktop item
12667>>>>>>>Define vCSIDL_MYMUSIC           For |CI$000D // The file system directory that serves as a common repository for music files. A typical path is C:\Documents and Settings\User\My Documents\My Music
12667>>>>>>>Define vCSIDL_MYPICTURES        For |CI$0027 // IE5+ The file system directory that serves as a common repository for image files. A typical path is C:\Documents and Settings\username\My Documents\My Pictures
12667>>>>>>>Define vCSIDL_MYVIDEO           For |CI$000E // IE6+ The file system directory that serves as a common repository for video files. A typical path is C:\Documents and Settings\username\My Documents\My Videos
12667>>>>>>>Define vCSIDL_NETHOOD           For |CI$0013 // A file system directory containing the link objects that may exist in the My Network Places virtual folder. It is not the same as CSIDL_NETWORK, which represents the network namespace root. A typical path is C:\Documents and Settings\username\NetHood
12667>>>>>>>Define vCSIDL_NETWORK           For |CI$0012 // A virtual folder representing Network Neighborhood, the root of the network namespace hierarchy
12667>>>>>>>Define vCSIDL_PERSONAL          For |CI$0005 // (Documents folder) IE6 The virtual folder representing the My Documents desktop item.
12667>>>>>>>                                             // This is equivalent to CSIDL_MYDOCUMENTS. Previous to Version 6.0. The file system directory used to physically store a user's common repository of documents. A typical path is C:\Documents and Settings\username\My Documents
12667>>>>>>>Define vCSIDL_PHOTOALBUMS       For |CI$0045 // Vista+ The virtual folder used to store photo albums, typically username\My Pictures\Photo Albums
12667>>>>>>>Define vCSIDL_PLAYLISTS         For |CI$003F // Vista+ The virtual folder used to store play albums, typically username\My Music\Playlists
12667>>>>>>>Define vCSIDL_PRINTERS          For |CI$0004 // The virtual folder containing installed printers
12667>>>>>>>Define vCSIDL_PRINTHOOD         For |CI$001B // The file system directory that contains the link objects that can exist in the Printers virtual folder. A typical path is C:\Documents and Settings\username\PrintHood
12667>>>>>>>Define vCSIDL_PROFILE           For |CI$0028 // IE5+ The user's profile folder. A typical path is C:\Documents and Settings\username
12667>>>>>>>Define vCSIDL_PROGRAM_FILES     For |CI$0026 // IE5+ The Program Files folder. A typical path is C:\Program Files
12667>>>>>>>Define vCSIDL_PROGRAM_FILESx86  for |CI$002A // The Program Files folder for x86 programs. A typical path is C:\Program Files (x86)
12667>>>>>>>Define vCSIDL_PROGRAM_FILES_COMMON For |CI$002B // IE5+, WinNT+ A folder for components that are shared across applications. A typical path is C:\Program Files\Common
12667>>>>>>>Define vCSIDL_PROGRAMS          For |CI$0002 // The file system directory that contains the user's program groups (which are themselves file system directories). A typical path is C:\Documents and Settings\username\Start Menu\Programs
12667>>>>>>>Define vCSIDL_RECENT            For |CI$0008 // The file system directory that contains shortcuts to the user's most recently used documents. A typical path is C:\Documents and Settings\username\My Recent Documents
12667>>>>>>>Define vCSIDL_RESOURCES         For |CI$0038 // undocumented
12667>>>>>>>Define vCSIDL_SAMPLE_MUSIC      For |CI$0040 // Vista+, The file system directory that contains sample music. A typical path is C:\Documents and Settings\username\My Documents\My Music\Sample Music
12667>>>>>>>Define vCSIDL_SAMPLE_PLAYLISTS  For |CI$0041 // Vista+, The file system directory that contains sample playlists. A typical path is C:\Documents and Settings\username\My Documents\My Music\Sample Playlists
12667>>>>>>>Define vCSIDL_SAMPLE_PICTURES   For |CI$0042 // Vista+, The file system directory that contains sample pictures. A typical path is C:\Documents and Settings\username\My Documents\My Pictures\Sample Pictures
12667>>>>>>>Define vCSIDL_SAMPLE_VIDEOS     For |CI$0043 // Vista+, The file system directory that contains sample videos. A typical path is C:\Documents and Settings\username\My Documents\My Videos\Sample Videos
12667>>>>>>>Define vCSIDL_SENDTO            For |CI$0009 // The file system directory that contains Send To menu items. A typical path is C:\Documents and Settings\username\SendTo
12667>>>>>>>Define vCSIDL_STARTMENU         For |CI$000B // The file system directory containing Start menu items. A typical path is C:\Documents and Settings\username\Start Menu
12667>>>>>>>Define vCSIDL_STARTUP           For |CI$0007 // The file system directory that corresponds to the user's Startup program group. The system starts these programs whenever any user logs onto Windows NT or starts Windows 95. A typical path is C:\Documents and Settings\username\Start Menu\Programs\Startup
12667>>>>>>>Define vCSIDL_SYSTEM            For |CI$0025 // The Windows System folder. A typical path is C:\Windows\System32
12667>>>>>>>Define vCSIDL_SYSTEMX86         For |CI$0029 //
12667>>>>>>>Define vCSIDL_TEMPLATES         For |CI$0015 // The file system directory that serves as a common repository for document templates. A typical path is C:\Documents and Settings\username\Templates
12667>>>>>>>Define vCSIDL_WINDOWS           For |CI$0024 // The Windows directory or SYSROOT. This corresponds to the %windir% or %SYSTEMROOT% environment variables. A typical path is C:\Windows
12667>>>>>>>
12667>>>>>>>
12667>>>>>>>//HRESULT SHGetFolderPath(
12667>>>>>>>//    HWND hwndOwner,
12667>>>>>>>//    int nFolder,
12667>>>>>>>//    HANDLE hToken,
12667>>>>>>>//    DWORD dwFlags,
12667>>>>>>>//    LPTSTR pszPath
12667>>>>>>>//);
12667>>>>>>>// This function is a superset of SHGetSpecialFolderPath, included with earlier versions of
12667>>>>>>>// the shell. It is implemented in a redistributable DLL, SHFolder.dll, that also simulates
12667>>>>>>>// many of the new shell folders on older platforms such as Windows 95, Windows 98, and
12667>>>>>>>// Windows NT 4.0. This DLL always calls the current platform's version of this function.
12667>>>>>>>// If that fails, it will try to simulate the appropriate behavior.
12667>>>>>>>//
12667>>>>>>>External_function vWin32_SHGetFolderPath "SHGetFolderPathW" SHFolder.Dll ;   Pointer hWnd ;   Integer nFolder ;   Pointer hToken ;   DWord   dwFlags ;   Pointer lpszPath ;   Returns Integer
12668>>>>>>>
12668>>>>>>>
12668>>>>>>>
12668>>>>>>>Struct tvWin32FindData
12668>>>>>>> Dword            dwFileAttributes
12668>>>>>>> Dword            ftCreationLowDateTime
12668>>>>>>> Dword            ftCreationHighDateTime
12668>>>>>>> dword            ftLastAccessLowDateTime
12668>>>>>>> Dword            ftLastAccessHighDateTime
12668>>>>>>> Dword            ftLastWriteLowDateTime
12668>>>>>>> Dword            ftLastWriteHighDateTime
12668>>>>>>> Dword            nFileSizeHigh
12668>>>>>>> Dword            nFileSizeLow
12668>>>>>>> Dword            dwReserved0
12668>>>>>>> Dword            dwReserved1
12668>>>>>>> Short[vMax_Path] cFileName
12668>>>>>>> Short[14]        cAlternateFileName
12668>>>>>>>End_Struct
12668>>>>>>>
12668>>>>>>>// Courtesy Of Vincent Oorsprong
12668>>>>>>>// lpFileName      : address of name of file to search for
12668>>>>>>>// lpFindFileData  : address of returned information
12668>>>>>>>External_function vWin32_FindFirstFile "FindFirstFileW"  Kernel32.dll WString sFileName ;          Pointer lpFindFileData Returns Handle
12669>>>>>>>
12669>>>>>>>// Courtesy Of Vincent Oorsprong
12669>>>>>>>// hFindFile       : handle of search
12669>>>>>>>// lpFindFileData  : address of structure for data on found file
12669>>>>>>>External_function vWin32_FindNextFile "FindNextFileW" Kernel32.dll Handle hFindFile ;          Pointer lpFindFileData Returns Integer
12670>>>>>>>
12670>>>>>>>
12670>>>>>>>// Courtesy Of Vincent Oorsprong
12670>>>>>>>//  hFindFile      : file search handle
12670>>>>>>>External_function vWin32_FindClose "FindClose" Kernel32.dll Handle hFindFile Returns Integer
12671>>>>>>>
12671>>>>>>>
12671>>>>>>>
12671>>>>>>>Struct tvFileTime
12671>>>>>>>  DWord dwLowDateTime
12671>>>>>>>  DWord dwHighDateTime
12671>>>>>>>End_Struct
12671>>>>>>>
12671>>>>>>>
12671>>>>>>>Struct tvSystemTime
12671>>>>>>>  UShort wYear
12671>>>>>>>  UShort wMonth
12671>>>>>>>  UShort wDayOfWeek
12671>>>>>>>  UShort wDay
12671>>>>>>>  UShort wHour
12671>>>>>>>  UShort wMinute
12671>>>>>>>  UShort wSecond
12671>>>>>>>  UShort wMilliSeconds
12671>>>>>>>End_Struct
12671>>>>>>>
12671>>>>>>>
12671>>>>>>>// Courtesy Of Vincent Oorsprong
12671>>>>>>>//  lpFileTime     : pointer to file time to convert
12671>>>>>>>//  lpSystemTime   : pointer to structure to receive system time
12671>>>>>>>External_function vWin32_FileTimeToSystemTime "FileTimeToSystemTime" Kernel32.Dll ;          Pointer lpFileTime Pointer lpsystemTime Returns Integer
12672>>>>>>>
12672>>>>>>>// Courtesy Of Vincent Oorsprong
12672>>>>>>>// This function formats the time in a picture-string passed
12672>>>>>>>//
12672>>>>>>>// Picture      Meaning
12672>>>>>>>//    h         Hours with no leading zero for single-digit hours; 12-hour clock
12672>>>>>>>//    hh        Hours with leading zero for single-digit hours; 12-hour clock
12672>>>>>>>//    H         Hours with no leading zero for single-digit hours; 24-hour clock
12672>>>>>>>//    HH        Hours with leading zero for single-digit hours; 24-hour clock
12672>>>>>>>//    m         Minutes with no leading zero for single-digit minutes
12672>>>>>>>//    mm        Minutes with leading zero for single-digit minutes
12672>>>>>>>//    s         Seconds with no leading zero for single-digit seconds
12672>>>>>>>//    ss        Seconds with leading zero for single-digit seconds
12672>>>>>>>//    t         One character time marker string, such as A or P
12672>>>>>>>//    tt        Multicharacter time marker string, such as AM or PM
12672>>>>>>>//
12672>>>>>>>// For example, to get the time string  "11:29:40 PM"
12672>>>>>>>//    use the following picture string: "hh" : "mm" : "ss tt"
12672>>>>>>>
12672>>>>>>>External_function vWin32_GetTimeFormat "GetTimeFormatW" Kernel32.Dll ;  Dword LCID Dword dwFlags Pointer lpsSystemTime Pointer lpFormat Pointer lpTimeStr ;  Integer cchTime Returns Integer
12673>>>>>>>
12673>>>>>>>
12673>>>>>>>// Courtesy Of Vincent Oorsprong
12673>>>>>>>// This function formats the date in a picture-string passed
12673>>>>>>>//
12673>>>>>>>// Picture      Meaning
12673>>>>>>>//    d         Day of month as digits with no leading zero for single-digit days.
12673>>>>>>>//    dd        Day of month as digits with leading zero for single-digit days.
12673>>>>>>>//    ddd       Day of week as a three-letter abbreviation. The function uses the
12673>>>>>>>//              LOCALE_SABBREVOAYMAME value associated with the specified locale.
12673>>>>>>>//    dddd      Day of week as its full name. The function uses the LOCALE_SDAYNAME
12673>>>>>>>//              value associated with the specified locale.
12673>>>>>>>//    M         Month as digits with no leading zero for single-digit months.
12673>>>>>>>//    MM        Month as digits with leading zero for single-digit months.
12673>>>>>>>//    MMM       Month as a three-letter abbreviation. The function uses the
12673>>>>>>>//              LOCALE_SABBREVMONTHNAME value associated with the specified locale.
12673>>>>>>>//    MMMM      Month as its full name. The function uses the LOCALE_SMONTHNAME value
12673>>>>>>>//              associated with the specified locale.
12673>>>>>>>//    y         Year as last two digits, but with no leading zero for years less than 10.
12673>>>>>>>//    yy        Year as last two digits, but with leading zero for years less than 10.
12673>>>>>>>//    yyyy      Year represented hy full four digits.
12673>>>>>>>//    gg        Period/era string. The function uses the CAL_SERASTRING value associated
12673>>>>>>>//              with the specified locale. This element is ignored if the date to be formatted
12673>>>>>>>//              does not have an associated era or period string.
12673>>>>>>>// For example, to get the date string  "Wed, Aug 31 94"
12673>>>>>>>// use the following picture string:    "ddd","MMM dd yy"
12673>>>>>>>
12673>>>>>>>External_function vWin32_GetDateFormat "GetDateFormatW" Kernel32.Dll ;  Dword LCID Dword dwFlags Pointer lpsSystemTime Pointer lpFormat Pointer lpDateStr ;  Integer cchDate Returns Integer
12674>>>>>>>
12674>>>>>>>Define LOCALE_NOUSEROVERRIDE    For |CI$80000000  //  do not use user overrides
12674>>>>>>>Define TIME_NOMIHUTESORSECONDS  For |CI$00000001  //  do not use minutes or seconds
12674>>>>>>>Define TIME_NOSECONDS           For |CI$00000002  //  do not use seconds
12674>>>>>>>Define TIME_NOTIMEMARKER        For |CI$00000004  //  do not use time marker
12674>>>>>>>Define TIME_FORCE24HOURFORMAT   For |CI$00000008  //  always use 24 hour format
12674>>>>>>>
12674>>>>>>>//  Date Flags for GetDateFormatW.
12674>>>>>>>//
12674>>>>>>>Define DATE_SHORTDATE           For |CI$00000001  //  use short date picture
12674>>>>>>>Define DATE_LONGDATE            For |CI$00000002  //  use long date picture
12674>>>>>>>Define DATE_USE_ALT_CALENDAR    For |CI$00000004  //  use alternate calendar (if any)
12674>>>>>>>
12674>>>>>>>
12674>>>>>>>External_function vWin32_SetLastError "SetLastError" Kernel32.Dll Dword dwLastError Returns Integer
12675>>>>>>>
12675>>>>>>>
12675>>>>>>>// **WvA: 20-02-2004
12675>>>>>>>// While i was testing the format capabilities i stumbled over a very
12675>>>>>>>// weird problem where it looks like that the integer value gets somehow translated
12675>>>>>>>// incorrectly into an unsigned integer.
12675>>>>>>>// I don't have the time to dive into this.. so added a workaround (and removed it again)
12675>>>>>>>// It does smell a bit fishy though
12675>>>>>>>// Tested it with the same results on both VDF7 and VDF9.1
12675>>>>>>>
12675>>>>>>>Define SHFMT_ID_DEFAULT        For |CI$0000FFFF // The default format ID
12675>>>>>>>Define SHFMT_OPT_DEFAULT       For |CI$00000000 // The default "Quick Format" option.
12675>>>>>>>Define SHFMT_OPT_FULL          For |CI$00000001 // Deselects the "Quick Format" option, providing a full format instead. This is useful when an unformatted disk is detected.
12675>>>>>>>Define SHFMT_OPT_SYSONLY       For |CI$00000002 // Selects the "Create an MS-DOS startup disk" option, creating a system boot disk.
12675>>>>>>>
12675>>>>>>>// Possible errors that can be returned by the shellformat function
12675>>>>>>>Define SHFMT_ERROR             For (|CI$FFFFFFFF+1) // An error occurred during the last format or no drive parameter passed. This does not indicate that the disk is unformatable.
12675>>>>>>>Define SHFMT_CANCEL            For (|CI$FFFFFFFE+1) // The last format was canceled.
12675>>>>>>>Define SHFMT_NOFORMAT          For (|CI$FFFFFFFD+1) // The drive cannot be formatted.
12675>>>>>>>
12675>>>>>>>
12675>>>>>>> // Courtesy Of Steve Walter,
12675>>>>>>> // USA Software, Inc
12675>>>>>>> // Format a disk
12675>>>>>>> // Called By:  Move (vWin32_ShFormatDrive(hWnd,0,$FFFF,1)) To dwReturn
12675>>>>>>>External_function vWin32_ShFormatDrive "SHFormatDrive" shell32.dll Handle hWnd ;         Integer iDrive Integer iFormatID Integer iOptions Returns DWORD
12676>>>>>>>
12676>>>>>>>// Michael Mullan.  I Wanted to create all the folders in one statement...
12676>>>>>>>
12676>>>>>>>// SHCreateDirectoryEx
12676>>>>>>>
12676>>>>>>>//    Note  This function is available through Microsoft Windows XP Service Pack 2 (SP2) and Windows Server 2003.
12676>>>>>>>//    It might be altered or unavailable in subsequent versions of Windows.
12676>>>>>>>//
12676>>>>>>>//    This function creates a file system folder whose fully qualified path is given by pszPath. If one or more
12676>>>>>>>//    of the intermediate folders do not exist, they are created as well. SHCreateDirectoryEx also verifies that
12676>>>>>>>//    the files are visible. If they are not visible, expect one of the following:
12676>>>>>>>//
12676>>>>>>>//        * If hwnd is set to a valid window handle, a message box is displayed warning the user that he or she
12676>>>>>>>//        might not be able to access the files. If the user chooses not to proceed, the function returns
12676>>>>>>>//        ERROR_CANCELLED.
12676>>>>>>>//        * If hwnd is set to NULL, no user interface is displayed and the function returns ERROR_CANCELLED.
12676>>>>>>>
12676>>>>>>>//        Returns ERROR_SUCCESS if successful. If the operation fails, other error codes can be returned,
12676>>>>>>>//        including those listed here. For values not specifically listed, see System Error Codes.
12676>>>>>>>//      161  ERROR_BAD_PATHNAME                The pszPath parameter was set to a relative path.
12676>>>>>>>//      206  ERROR_FILENAME_EXCED_RANGE     The path pointed to by pszPath is too long.
12676>>>>>>>//      3    ERROR_PATH_NOT_FOUND            The system cannot find the path pointed to by pszPath. The path may contain an invalid entry.
12676>>>>>>>//      80   ERROR_FILE_EXISTS                The directory exists.
12676>>>>>>>//      183  ERROR_ALREADY_EXISTS            The directory exists.
12676>>>>>>>//      1223 ERROR_CANCELLED                The user canceled the operation.
12676>>>>>>>
12676>>>>>>>//        int SHCreateDirectoryEx(
12676>>>>>>>//            HWND hwnd,
12676>>>>>>>//            LPCTSTR pszPath,
12676>>>>>>>//            const SECURITY_ATTRIBUTES *psa
12676>>>>>>>//        );
12676>>>>>>>
12676>>>>>>>External_function vWin32_SHCreateDirectoryEx "SHCreateDirectoryExW" shell32.dll Handle hWnd;                  WString wPath  Pointer lpSecurity_Attributes Returns Integer
12677>>>>>>>
12677>>>>>>> External_Function vWin32_PathIsDirectory "PathIsDirectoryW" SHLWAPI.DLL WString wPath Returns Integer
12678>>>>>
12678>>>>>
12678>>>>>
12678>>>>>// Does the directory exist? - No = false, Yes = True
12678>>>>>// This also works with UNC path encoding and wildcards
12678>>>>>Function vFolderExists Global String sFolderName Returns Boolean
12680>>>>>    Boolean bFolderExists
12680>>>>>    Boolean bStop
12680>>>>>    String  sFolder sTmp
12680>>>>>    Integer iCh
12680>>>>>
12680>>>>>    If (sFolderName = "") Begin
12682>>>>>        Function_Return False
12683>>>>>    End
12683>>>>>>
12683>>>>>
12683>>>>>    Move True  to bFolderExists
12684>>>>>    Move False to bStop
12685>>>>>    Move "dir:" to sFolder
12686>>>>>    Append sFolder sFolderName
12687>>>>>    Get Seq_New_Channel to iCh  // get free channel for input
12688>>>>>    If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
12690>>>>>        Error DFERR_PROGRAM "No I/O channel available for process (vFolderExists)"
12691>>>>>>
12691>>>>>        Function_Return False
12692>>>>>    End
12692>>>>>>
12692>>>>>    Direct_Input channel iCh sFolder
12694>>>>>    Repeat
12694>>>>>>
12694>>>>>        Readln channel iCh sTmp
12696>>>>>        Move (SeqEof) to bStop
12697>>>>>        If (Trim(sTmp)="") Begin
12699>>>>>            Move False to bFolderExists
12700>>>>>        End
12700>>>>>>
12700>>>>>        Else Begin
12701>>>>>            Move True to bFolderExists
12702>>>>>            Move True to bStop
12703>>>>>        End
12703>>>>>>
12703>>>>>    Until (bStop)
12705>>>>>    Close_Input channel iCh
12707>>>>>    Send Seq_Release_Channel iCh
12708>>>>>    Function_Return bFolderExists
12709>>>>>End_Function
12710>>>>>
12710>>>>>// returns folder name if a folder was selected, otherwise returns ""
12710>>>>>Function vSHBrowseForFolder Global String sDialogTitle Returns String
12712>>>>>    String  sPath
12712>>>>>    WString sFolder sTitle
12712>>>>>    Pointer lpItemIdList
12712>>>>>    Integer iFolderSelected iRetval
12712>>>>>    tvBrowseInfo BrowseInfo
12712>>>>>    tvBrowseInfo BrowseInfo
12712>>>>>
12712>>>>>    Move "" to sPath
12713>>>>>    If (sDialogTitle<>"") Begin
12715>>>>>        Move sDialogTitle to sTitle
12716>>>>>        // Torben Lund suggested converting the string with toansi. Doing it like that
12716>>>>>        // disables showing some commonly used ascii characters like ascii 137 (ë)
12716>>>>>        // These chars are correctly shown if no toansi is used.
12716>>>>>        // I can imagine that he wanted to path to be ANSI, but as long as it isa just
12716>>>>>        // selected it will always be valid.
12716>>>>>        Move (AddressOf(sTitle)) to BrowseInfo.lpszTitle
12717>>>>>    End
12717>>>>>>
12717>>>>>
12717>>>>>    Move vBIF_RETURNONLYFSDIRS to BrowseInfo.ulFlags
12718>>>>>
12718>>>>>    // Torben Lund added line below. Move handle of focus object to structure before
12718>>>>>    // calling function. Otherwise, the folderdialog will be started as a seperate task.
12718>>>>>    Move (window_handle(focus(desktop))) to BrowseInfo.hWndOwner
12719>>>>>
12719>>>>>    // null 128 chars into var (make space)
12719>>>>>    Move (Repeat(Character(0), vMAX_PATH)) to sFolder
12720>>>>>
12720>>>>>    // select folder
12720>>>>>    Move (vWin32_SHBrowseForFolder(AddressOf(BrowseInfo))) to lpItemIdList
12721>>>>>    // get selected folder name
12721>>>>>    Move (vWin32_SHGetPathFromIDList(lpItemIdList, AddressOf(sFolder))) to iFolderSelected
12722>>>>>
12722>>>>>    // release memory resources that are used by the ItemIdList
12722>>>>>    Move (vWin32_CoTaskMemFree(lpItemIdList)) to iRetval
12723>>>>>
12723>>>>>    If (iFolderSelected<>0) Begin
12725>>>>>        Move (CString(sFolder)) to sPath
12726>>>>>    End
12726>>>>>>
12726>>>>>    Function_Return  sPath
12727>>>>>End_Function
12728>>>>>
12728>>>>>// returns 0 if the folder is created.
12728>>>>>//         1 if the API-call returned an error.
12728>>>>>Function vCreateDirectory Global String sNewFolder Returns Integer
12730>>>>>    Integer  iRetval bFolderCreated
12730>>>>>    WString  sFolder
12730>>>>>    tvSecurity_attributes SA
12730>>>>>    tvSecurity_attributes SA
12730>>>>>
12730>>>>>    Move False to bFolderCreated
12731>>>>>    If (sNewFolder <> "") Begin
12733>>>>>        Move (SizeOfType(tvSecurity_attributes)) to SA.nLength
12734>>>>>        Move  0                                  to SA.lpDescriptor
12735>>>>>        Move  1                                  to SA.bInheritHandle
12736>>>>>        Move (sNewFolder+Character(0)) to sFolder
12737>>>>>        Move (vWin32_CreateDirectory(sFolder, AddressOf(SA))) to bFolderCreated
12738>>>>>    End
12738>>>>>>
12738>>>>>
12738>>>>>    If (bFolderCreated=false) Begin
12740>>>>>        Move 1 to iRetVal
12741>>>>>    End
12741>>>>>>
12741>>>>>    Function_Return iRetVal
12742>>>>>End_Function
12743>>>>>
12743>>>>>// **WvA: 03-02-2002 Function created.
12743>>>>>// With this function one can remove a directory.
12743>>>>>// returns 0 if the folder is removed.
12743>>>>>//         1 if the API-call returned an error (Use GetLastError API to get the details)
12743>>>>>//         2 if the folder did not exist
12743>>>>>//         3 if the sFolder parameter passed is equal to ""
12743>>>>>Function vRemoveDirectory Global String sFolder Returns Integer
12745>>>>>    Boolean bRemoved
12745>>>>>    WString sPath
12745>>>>>    Integer iRetval
12745>>>>>
12745>>>>>    Move 0     to iRetVal
12746>>>>>    Move False to bRemoved
12747>>>>>    Move (Trim(sFolder)) to sFolder
12748>>>>>    If (sFolder="") Begin
12750>>>>>        Move 3 to iRetVal
12751>>>>>    End
12751>>>>>>
12751>>>>>    If (vFolderExists(sFolder)=False) Begin
12753>>>>>        Move 2 to iRetVal
12754>>>>>    End
12754>>>>>>
12754>>>>>    If (iRetVal=0) Begin
12756>>>>>        // null MAX_PATH chars into var (make space)
12756>>>>>        Move (Repeat(Character(0), vMAX_PATH)) to sPath
12757>>>>>        //
12757>>>>>        Move (Insert(sFolder,sPath,1)) to sPath
12758>>>>>        Move (vWin32_RemoveDirectory(sPath)) to bRemoved
12759>>>>>    End
12759>>>>>>
12759>>>>>
12759>>>>>    If (iRetVal=0 And bRemoved=False) Begin
12761>>>>>        Move 1 to iRetVal
12762>>>>>    End
12762>>>>>>
12762>>>>>    Function_Return iRetVal
12763>>>>>End_Function
12764>>>>>
12764>>>>>// This will perform an operation on a file (e.g. open) with the application
12764>>>>>// registered in the Windows Registry to open that type of file (via its extension)
12764>>>>>// sOperation would be "OPEN" (it could also be "PRINT" etc).
12764>>>>>Procedure vShellExecute Global String sOperation String sDocument String sParameters String sPath
12766>>>>>    Handle  hInstance hWnd
12766>>>>>    // remove any leading/trailing spaces in the string
12766>>>>>    Move (Trim(sDocument)) to sDocument
12767>>>>>    Move (Trim(sPath))     to sPath
12768>>>>>    // Make the strings readable for windows API, by converting them to null-terminated
12768>>>>>    Append sOperation   (Character(0))
12769>>>>>    Append sDocument    (Character(0))
12770>>>>>    Append sParameters  (Character(0))
12771>>>>>    Append sPath        (Character(0))
12772>>>>>
12772>>>>>    Get Window_Handle to hWnd
12773>>>>>    Move (vWin32_ShellExecute (hWnd, sOperation, sDocument, sParameters, sPath, 1)) to hInstance
12774>>>>>    If (hInstance <= 32) Begin
12776>>>>>        Send vDDE_Error_Handler hInstance
12777>>>>>    End
12777>>>>>>
12777>>>>>End_Procedure
12778>>>>>
12778>>>>>Class cShellFileOperations is a Array
12779>>>>>
12779>>>>>    Procedure Construct_Object
12781>>>>>        Forward Send Construct_Object
12783>>>>>        Property Integer piDeleteFlags        0
12784>>>>>        Property Integer piCopyFlags          0
12785>>>>>        Property Integer piMoveFlags          0
12786>>>>>        Property Integer piRenameFlags        0
12787>>>>>
12787>>>>>        Set piDeleteFlags to (vFOF_SILENT Ior vFOF_NOCONFIRMATION)
12788>>>>>        Set piCopyFlags   to (vFOF_SILENT iOr vFOF_NOCONFIRMMKDIR Ior vFOF_NOCONFIRMATION)
12789>>>>>        Set piMoveFlags   to (vFOF_SILENT iOr vFOF_NOCONFIRMMKDIR iOr vFOF_NOCONFIRMATION)
12790>>>>>        Set piRenameFlags to (vFOF_SILENT Ior vFOF_NOCONFIRMATION)
12791>>>>>    End_Procedure
12792>>>>>
12792>>>>>    // This function uses the shell API to perform a file operation on the
12792>>>>>    // files supplied.
12792>>>>>    //
12792>>>>>    Function FileOperation String sSource String sDestination Integer eOperation Integer iFlags Returns Integer
12794>>>>>        Integer  iRetVal
12794>>>>>        Integer  iUserAbort
12794>>>>>        WString  wsSource wsDestination
12794>>>>>        tvShFileOpStruct FOS
12794>>>>>        tvShFileOpStruct FOS
12794>>>>>
12794>>>>>        Move (sSource+Character(0)+Character(0))      to wsSource
12795>>>>>        Move (sDestination+Character(0)+Character(0)) to wsDestination
12796>>>>>
12796>>>>>        If (eOperation <> vFO_DELETE) Begin
12798>>>>>            Move (AddressOf(wsDestination)) to FOS.pTo
12799>>>>>        End
12799>>>>>>
12799>>>>>
12799>>>>>        Move eOperation            to FOS.wFunc
12800>>>>>        Move (AddressOf(wsSource)) to FOS.pFrom
12801>>>>>        Move iFlags                to FOS.fFlags
12802>>>>>
12802>>>>>        Move (vWin32_SHFileOperation(AddressOf(FOS))) to iRetVal
12803>>>>>        Move FOS.fAnyOperationsAborted to iUserAbort
12804>>>>>        If (iUserAbort <> 0) Begin
12806>>>>>            Move 80 to iRetVal  // file Operation Aborted by USER
12807>>>>>        End
12807>>>>>>
12807>>>>>        Function_Return (iRetVal)
12808>>>>>    End_Function
12809>>>>>
12809>>>>>    Function sfoDeleteFile String sFileName Returns Integer
12811>>>>>        Integer  iRetVal
12811>>>>>        Integer  iFlags
12811>>>>>
12811>>>>>        Get piDeleteFlags to iFlags
12812>>>>>        Get FileOperation sFileName "" vFO_DELETE iFlags to iRetVal
12813>>>>>        Function_Return iRetVal
12814>>>>>    End_Function
12815>>>>>
12815>>>>>    Function sfoCopyFile String sSource String sDestination Returns Integer
12817>>>>>        Integer  iRetVal
12817>>>>>        Integer  iFlags
12817>>>>>
12817>>>>>        Get piCopyFlags to iFlags
12818>>>>>        Get FileOperation sSource sDestination vFO_COPY iFlags to iRetVal
12819>>>>>        Function_Return iRetVal
12820>>>>>    End_Function
12821>>>>>
12821>>>>>    Function sfoMoveFile String sSource String sDestination Returns Integer
12823>>>>>        Integer  iRetVal
12823>>>>>        Integer  iFlags
12823>>>>>
12823>>>>>        Get piMoveFlags to iFlags
12824>>>>>        Get FileOperation sSource sDestination vFO_MOVE iFlags to iRetVal
12825>>>>>        Function_Return iRetVal
12826>>>>>    End_Function
12827>>>>>
12827>>>>>    // Rename a file or folder
12827>>>>>    // Returns a nonzero value if the operation failed.
12827>>>>>    Function sfoRenameFile String sSource String sDestination Returns Integer
12829>>>>>        Integer  iRetVal
12829>>>>>        Integer  iFlags
12829>>>>>
12829>>>>>        Get piRenameFlags to iFlags
12830>>>>>        Get FileOperation sSource sDestination vFO_RENAME iFlags to iRetVal
12831>>>>>        Function_Return iRetVal
12832>>>>>    End_Function
12833>>>>>
12833>>>>>
12833>>>>>    //Example:
12833>>>>>    // Get sfoFormatDisk 'A' 0 To dReturnVal    // Formats drive A in QuickFormat
12833>>>>>    //                                          mode.
12833>>>>>
12833>>>>>End_Class
12834>>>>>
12834>>>>>Object oShellFileOperations is a cShellFileOperations
12836>>>>>End_Object
12837>>>>>
12837>>>>>// Restore to the old way of working with the shell file operations.
12837>>>>>// or.. to put lay man terms, allow any of the operations vDeleteFile
12837>>>>>// vCopyFile/vMoveFile/vRenameFile to have an UNDO
12837>>>>>Procedure vWin32fhCompatibilityMode
12839>>>>>    Integer hoSFO
12839>>>>>    Integer iFlags
12839>>>>>
12839>>>>>    Move (vFOF_SILENT Ior vFOF_NOCONFIRMATION Ior vFOF_ALLOWUNDO) to iFlags
12840>>>>>    Move (oShellFileOperations(Self)) to hoSFO
12841>>>>>
12841>>>>>    Set piDeleteFlags of hoSFO to iFlags
12842>>>>>    Set piCopyFlags   of hoSFO to iFlags
12843>>>>>    Set piMoveFlags   of hoSFO to iFlags
12844>>>>>    Set piRenameFlags of hoSFO to iFlags
12845>>>>>End_Procedure
12846>>>>>
12846>>>>>// Delete a file or folder
12846>>>>>// Returns a nonzero value if the operation failed.
12846>>>>>Function vDeleteFile Global String sFileName Returns Integer
12848>>>>>    Integer  iRetVal
12848>>>>>
12848>>>>>    Get sfoDeleteFile of (oShellFileOperations(Self)) sFileName to iRetVal
12849>>>>>    Function_Return iRetVal
12850>>>>>End_Function
12851>>>>>
12851>>>>>// Copy a file or folder
12851>>>>>// Returns a nonzero value if the operation failed.
12851>>>>>Function vCopyFile Global String sSource String sDestination Returns Integer
12853>>>>>    Integer  iRetVal
12853>>>>>
12853>>>>>    Get sfoCopyFile of (oShellFileOperations(Self)) sSource sDestination to iRetVal
12854>>>>>    Function_Return iRetVal
12855>>>>>End_Function
12856>>>>>
12856>>>>>// Move a file or folder
12856>>>>>// Returns a nonzero value if the operation failed.
12856>>>>>Function vMoveFile Global String sSource String sDestination Returns Integer
12858>>>>>    Integer  iRetVal
12858>>>>>
12858>>>>>    Get sfoMoveFile of (oShellFileOperations(Self)) sSource sDestination to iRetVal
12859>>>>>    Function_Return iRetVal
12860>>>>>End_Function
12861>>>>>
12861>>>>>// Rename a file or folder
12861>>>>>// Returns a nonzero value if the operation failed.
12861>>>>>Function vRenameFile Global String sSource String sDestination Returns Integer
12863>>>>>    Integer  iRetVal
12863>>>>>
12863>>>>>    Get sfoRenameFile of (oShellFileOperations(Self)) sSource sDestination to iRetVal
12864>>>>>    Function_Return iRetVal
12865>>>>>End_Function
12866>>>>>
12866>>>>>Function vGetWindowsDirectory Returns String
12868>>>>>    WString wDirectory
12868>>>>>    Integer iRetVal
12868>>>>>
12868>>>>>    Move (ZeroString(vMAX_PATH)) to wDirectory
12869>>>>>    Move (vWin32_GetWindowsDirectory(AddressOf(wDirectory), vMAX_PATH)) to iRetVal
12870>>>>>    If (iRetVal > vMAX_PATH) Begin
12872>>>>>        Move (ZeroString(iRetval)) to wDirectory
12873>>>>>        Move (vWin32_GetWindowsDirectory(AddressOf(wDirectory), iRetVal)) to iRetVal
12874>>>>>    End
12874>>>>>>
12874>>>>>    Function_Return (CString(wDirectory))
12875>>>>>End_Function
12876>>>>>
12876>>>>>Function vGetTempPath Returns String
12878>>>>>    Integer iRetVal
12878>>>>>    WString wTempPath
12878>>>>>
12878>>>>>    Move (ZeroString(vMAX_PATH)) to wTempPath
12879>>>>>    Move (vWin32_GetTempPath(vMAX_PATH, AddressOf(wTempPath))) to iRetVal
12880>>>>>    If (iRetVal > vMAX_PATH) Begin
12882>>>>>        Move (ZeroString(iRetval)) to wTempPath
12883>>>>>        Move (vWin32_GetTempPath(iRetVal, AddressOf(wTempPath))) to iRetVal
12884>>>>>    End
12884>>>>>>
12884>>>>>    Function_Return (CString(wTempPath))
12885>>>>>End_Function
12886>>>>>
12886>>>>>// Courtesy of Marco Kuipers
12886>>>>>Function vMakeTempFile Returns String
12888>>>>>    Integer iRetval
12888>>>>>    String  sTempPath
12888>>>>>    String  sTempFileName
12888>>>>>    String  sPrefixString
12888>>>>>    WString wsTempFileName
12888>>>>>
12888>>>>>    Get vGetTempPath to sTempPath
12889>>>>>    If (sTempPath = "") Begin
12891>>>>>        Get vGetWindowsDirectory to sTempPath  // first fallback
12892>>>>>        If (sTempPath<>"") Begin
12894>>>>>            Move (sTempPath+"\Temp\") to sTempPath
12895>>>>>        End
12895>>>>>>
12895>>>>>    End
12895>>>>>>
12895>>>>>
12895>>>>>    If (sTempPath = "") Begin
12897>>>>>        // second fallback we really do not want to get here as to be fair using current folder as temp
12897>>>>>        // makes little sense. Leaving this in as it was old behavior.
12897>>>>>        Get_Current_Directory to sTempPath
12898>>>>>    End
12898>>>>>>
12898>>>>>
12898>>>>>    Move (Trim(sTempPath)+Character(0)) to sTempPath
12899>>>>>    If (Length(sTempPath)>(vMax_Path-14)) Begin
12901>>>>>        Error DFERR_PROGRAM ("Temporary path"+sTempPath+"is too long, cannot create temporary files.")
12902>>>>>>
12902>>>>>    End
12902>>>>>>
12902>>>>>
12902>>>>>    Move (ZeroString(vMax_Path)) to wsTempFileName
12903>>>>>    Move ("tmp"+Character(0))    to sPrefixString
12904>>>>>    Move (vWin32_GetTempFileName (sTempPath, sPrefixString, 0, AddressOf(wsTempFileName))) to iRetval
12905>>>>>    If (iRetval = 0) Begin  // The api call returns 0 if an error occurs
12907>>>>>    //Get ShowLastError to iRetval
12907>>>>>        Move "" to sTempFileName
12908>>>>>    End
12908>>>>>>
12908>>>>>    Move (Cstring(wsTempFileName)) to sTempFileName
12909>>>>>    Function_Return sTempFileName
12910>>>>>End_Function
12911>>>>>
12911>>>>>// This function creates a uniquely named temporary file in folder sPath
12911>>>>>// The file created will have a prefix based on the first 3 characters in sPrefix
12911>>>>>// Note that you will have to cleanup the tempfile yourself as the function
12911>>>>>// does not take care of that.
12911>>>>>Function vCreateTempFileInPath String sPath String sPrefix Returns String
12913>>>>>    Integer iRetVal
12913>>>>>    String  sTempFileName
12913>>>>>    WString wTempFileName
12913>>>>>
12913>>>>>    Move (sPath+Character(0))   to sPath
12914>>>>>    Move (sPrefix+Character(0)) to sPrefix
12915>>>>>    Move (Pad("", vMAX_PATH))   to wTempFileName
12916>>>>>
12916>>>>>    Move (vWin32_GetTempFileName(sPath, sPrefix, 0, AddressOf(wTempFileName))) to iRetVal
12917>>>>>    Move (Trim(Cstring(wTempFileName))) to sTempFileName
12918>>>>>    Function_Return sTempFileName
12919>>>>>End_Function
12920>>>>>
12920>>>>>//
12920>>>>>// Get a specific shell folder for example to get the desktop folder
12920>>>>>// simply call this function and pass it vCSIDL_DESKTOP
12920>>>>>//
12920>>>>>Function vSHGetFolderPath Integer eFolder Returns String
12922>>>>>    Integer iVoid
12922>>>>>    Handle  hWnd
12922>>>>>    String  sFolder
12922>>>>>    WString wFolder
12922>>>>>
12922>>>>>    Move (Window_Handle(focus(desktop))) to hWnd
12923>>>>>    Move (Repeat(Character(0), vMAX_PATH)) to wFolder
12924>>>>>    Move (vWin32_SHGetFolderPath(hWnd,eFolder, 0, 0,AddressOf(wFolder))) To iVoid
12925>>>>>    Move (CString(wFolder)) to sFolder
12926>>>>>    Function_Return sFolder
12927>>>>>End_Function
12928>>>>>
12928>>>>>// Courtesy Of Vincent Oorsprong
12928>>>>>Function vConvertFileDateTime Global DWord dwLowDateTime DWord dwHighDateTime Returns String
12930>>>>>    String  sFileDateTime
12930>>>>>    WString wFormattedTime wFormattedDate
12930>>>>>    Integer iSuccess iLenCcTime iDataLength iLenCcDate
12930>>>>>    tvFileTime   FileTime
12930>>>>>    tvFileTime   FileTime
12930>>>>>    tvSystemTime SystemTime
12930>>>>>    tvSystemTime SystemTime
12930>>>>>
12930>>>>>    Move "" to sFileDateTime
12931>>>>>    Move dwLowDateTime  to FileTime.dwLowDateTime
12932>>>>>    Move dwHighDateTime to FileTime.dwHighDateTime
12933>>>>>
12933>>>>>    Move 0 to SystemTime.wYear
12934>>>>>
12934>>>>>    Move (vWin32_FileTimeToSystemTime (AddressOf(FileTime), AddressOf(SystemTime))) to iSuccess
12935>>>>>    If (iSuccess = 1) Begin
12937>>>>>        Move (ZeroString(255))               to wFormattedTime
12938>>>>>        Move (SizeOfWString(wFormattedTime)) to iLenCcTime
12939>>>>>        Move (vWin32_GetTimeFormat (LOCALE_USER_DEFAULT, 0, AddressOf(SystemTime), 0, AddressOf(wFormattedTime), iLenCcTime)) to iDataLength
12940>>>>>        Move (ZeroString(255))               to wFormattedDate
12941>>>>>        Move (SizeOfWString(wFormattedDate)) to iLenCcDate
12942>>>>>        Move (vWin32_GetDateFormat (LOCALE_USER_DEFAULT, 0, AddressOf(SystemTime), 0, AddressOf(wFormattedDate), iLenCcDate)) to iDataLength
12943>>>>>        Move (Cstring (wFormattedDate)  * Cstring (wFormattedTime)) to sFileDateTime
12944>>>>>    End
12944>>>>>>
12944>>>>>    Function_Return sFileDateTime
12945>>>>>End_Function
12946>>>>>
12946>>>>>// **WvA:
12946>>>>>// A windows replacement for the standard function FileExists.
12946>>>>>// This version will also return (true) for a file when it is open by an application.
12946>>>>>// Note that you can apply normal windows mask-signs in the filename such as * and ?
12946>>>>>// Example: Get vFilePathExists "C:\config.sy?"
12946>>>>>// This will return true if you have a file matching these conditions. (aka config.sys)
12946>>>>>Function vFilePathExists Global String sFilePathMask Returns Integer
12948>>>>>    String  sDirSep
12948>>>>>    Handle  hFindFile
12948>>>>>    Integer iVoid
12948>>>>>    tvWin32FindData FindData
12948>>>>>    tvWin32FindData FindData
12948>>>>>
12948>>>>>    Move vINVALID_HANDLE_VALUE to hFindFile
12949>>>>>    Move (Trim(sFilePathMask)) to sFilePathMask
12950>>>>>
12950>>>>>    If (Length(sFilePathMask)>0) Begin
12952>>>>>        // 2014-09-29 NGS Remove any trailing dir separators, as they make the function fail.
12952>>>>>        Move (sysconf(SYSCONF_DIR_SEPARATOR)) to sDirSep
12953>>>>>        While (Right(sFilePathMask, 1) = sDirSep)
12957>>>>>            Move (Left(sFilePathMask, Length(sFilePathMask) -1)) to sFilePathMask
12958>>>>>        Loop
12959>>>>>>
12959>>>>>
12959>>>>>        Move 0 to FindData.dwReserved0        // initialize the variable so we can get an address from it.
12960>>>>>        Move (vWin32_FindFirstFile (sFilePathMask, AddressOf(FindData))) to hFindFile
12961>>>>>        Move (vWin32_FindClose (hFindFile)) to iVoid
12962>>>>>    End
12962>>>>>>
12962>>>>>    Function_Return (hFindFile <> vINVALID_HANDLE_VALUE)
12963>>>>>End_Function
12964>>>>>
12964>>>>>
12964>>>>>//
12964>>>>>// Returns the amount of files in the folder (if it exists)
12964>>>>>// Returns -1 if folder doesn't exist.
12964>>>>>// The files "." and ".." are not counted.
12964>>>>>//
12964>>>>>Function vFolderFileCount Global String sFolderName Returns Integer
12966>>>>>    Boolean bFound
12966>>>>>    Handle  hFindFile
12966>>>>>    Integer iCount  iVoid
12966>>>>>    Integer iSuccess
12966>>>>>    String  sFileName
12966>>>>>    tvWin32FindData FindData
12966>>>>>    tvWin32FindData FindData
12966>>>>>
12966>>>>>    Move -1 to iCount
12967>>>>>    Get vFolderFormat sFolderName to sFolderName
12968>>>>>    Move (sFolderName+"*") to sFolderName // match any filename in the folder
12969>>>>>    Move 0 to FindData.dwReserved0        // initialize the variable so we can get an address from it.
12970>>>>>    Move (vWin32_FindFirstFile (sFolderName, AddressOf(FindData))) to hFindFile
12971>>>>>    Move (hFindFile<>vINVALID_HANDLE_VALUE) to bFound
12972>>>>>    If (bFound) Begin
12974>>>>>        Move 0 to iCount
12975>>>>>    End
12975>>>>>>
12975>>>>>    While (bFound)
12979>>>>>        Increment iCount
12980>>>>>        Move (PointerToWString(AddressOf(FindData.cFileName))) to sFileName
12981>>>>>        If (sFileName="." or sFileName="..") Begin
12983>>>>>            Decrement iCount
12984>>>>>        End
12984>>>>>>
12984>>>>>        Move (vWin32_FindNextFile(hFindFile, AddressOf(FindData))) to iSuccess
12985>>>>>        Move (iSuccess<>0) to bFound
12986>>>>>    Loop
12987>>>>>>
12987>>>>>    Move (vWin32_FindClose (hFindFile)) to iVoid
12988>>>>>    Function_Return iCount
12989>>>>>End_Function
12990>>>>>
12990>>>>>// Create the folder, including intermediate directories.
12990>>>>>// Don't panic if the folder already exists.
12990>>>>>// Michael Mullan June 2009.
12990>>>>>Function vshCreateDirectoryEX Global String sNewFolder Returns Integer
12992>>>>>    String  sFolder
12992>>>>>    Integer iRetval iFolderCreated
12992>>>>>    tvSecurity_attributes SA
12992>>>>>    tvSecurity_attributes SA
12992>>>>>
12992>>>>>    Move 0 to iFolderCreated
12993>>>>>
12993>>>>>    // null MAX_PATH chars into var (make space)
12993>>>>>    Move (Repeat(Character(0), vMAX_PATH)) to sFolder
12994>>>>>    If (sNewFolder <> "") Begin
12996>>>>>
12996>>>>>        Move (SizeOfType(tvSecurity_attributes)) to SA.nLength
12997>>>>>        Move  0  to SA.lpDescriptor
12998>>>>>        Move  1  to SA.bInheritHandle
12999>>>>>
12999>>>>>        //
12999>>>>>        Move (sNewFolder+"") to sFolder
13000>>>>>        Move (vWin32_SHCreateDirectoryEx(0,sFolder, AddressOf(SA))) to iFolderCreated
13001>>>>>    End
13001>>>>>>
13001>>>>>
13001>>>>>    If (iFolderCreated <> 0) Begin
13003>>>>>        Move 1 to iRetVal
13004>>>>>        Case Begin
13004>>>>>            Case (iFolderCreated = 161)
13006>>>>>                Error DFERR_OPERATOR ("Path " + sNewFolder + " is Not Valid (ERROR_BAD_PATHNAME)")
13007>>>>>>
13007>>>>>                Case Break
13008>>>>>            Case (iFolderCreated = 206)
13011>>>>>                Error DFERR_OPERATOR ("Path " + sNewFolder + " is Not Valid (ERROR_FILENAME_EXCED_RANGE)")
13012>>>>>>
13012>>>>>                Case Break
13013>>>>>            Case (iFolderCreated = 3)
13016>>>>>                Error DFERR_OPERATOR ("Path " + sNewFolder + " is Not Valid (ERROR_PATH_NOT_FOUND)")
13017>>>>>>
13017>>>>>                Case Break
13018>>>>>            Case (iFolderCreated = 80)
13021>>>>>                Move 0 to iRetval // "ERROR_FILE_EXISTS"     not really an error
13022>>>>>                Case Break
13023>>>>>            Case (iFolderCreated = 183)
13026>>>>>                Move 0 to iRetval //  "ERROR_ALREADY_EXISTS"     not really an error
13027>>>>>                Case Break
13028>>>>>            Case (iFolderCreated = 1223)
13031>>>>>                Error DFERR_OPERATOR ("Path " + sNewFolder + " is Not Valid (ERROR_CANCELLED)")
13032>>>>>>
13032>>>>>                Case Break
13033>>>>>            Case Else
13033>>>>>                Error DFERR_OPERATOR ("Folder Creation Error # " + String(ifoldercreated) + "\n" + sNewFolder + "(FILE_CREATION_ERROR)")
13034>>>>>>
13034>>>>>        Case End
13034>>>>>    End
13034>>>>>>
13034>>>>>    Function_Return iRetVal
13035>>>>>End_Function
13036>>>>>
13036>>>>>Function vWin32_APIFileSize Global String sFileName Returns Integer
13038>>>>>    DWord   dwFileSizeHigh dwFileSizeLow
13038>>>>>    Integer iFileSize iVoid
13038>>>>>    Handle  hFindFile
13038>>>>>    tvWin32FindData FindData
13038>>>>>    tvWin32FindData FindData
13038>>>>>
13038>>>>>    Move (sFileName+"") to sFileName
13039>>>>>    Move 0 to FindData.dwReserved0        // initialize the variable so we can get an address from it.
13040>>>>>    Move (vWin32_FindFirstFile (sFileName, AddressOf(FindData))) to hFindFile
13041>>>>>    If (hFindFile<>vINVALID_HANDLE_VALUE) Begin
13043>>>>>        Move FindData.nFileSizeHigh to dwFileSizeHigh
13044>>>>>        Move FindData.nFileSizeLow  to dwFileSizeLow
13045>>>>>    End
13045>>>>>>
13045>>>>>    Move (vWin32_FindClose(hFindFile)) to iVoid
13046>>>>>    Move ((dwFileSizeHigh * vMaxDword) + dwFileSizeLow) to iFileSize
13047>>>>>
13047>>>>>    Function_Return iFileSize
13048>>>>>End_Function
13049>>>>>
13049>>>>>//
13049>>>>>// Based on code in Peter Crook's Browse folder workspace
13049>>>>>// http://support.dataaccess.com/Forums/showthread.php?54383-Browse-for-Folder-package&p=282249#post282249
13049>>>>>//
13049>>>>>//=============================================================================
13049>>>>>// Verifies that a path is a valid directory.
13049>>>>>//
13049>>>>>// Returns TRUE if the path is a valid directory, or FALSE otherwise.
13049>>>>>//
13049>>>>>// Parameters:
13049>>>>>//      sPath - Address of the path to verify.
13049>>>>>//=============================================================================
13049>>>>>Function vPathIsDirectory Global String sPath Returns Boolean
13051>>>>>    Integer iResult
13051>>>>>    Boolean bRetVal
13051>>>>>
13051>>>>>    Move false to bRetVal
13052>>>>>    Move (sPath - Character (0)) to sPath
13053>>>>>    Move (vWin32_PathIsDirectory (sPath)) to iResult
13054>>>>>    If (iResult<>0) Begin
13056>>>>>        Move True to bRetVal
13057>>>>>    End
13057>>>>>>
13057>>>>>
13057>>>>>    Function_Return bRetVal
13058>>>>>End_Function
13059>>>>>
13059>>>
13059>>>//
13059>>>// Gets the string from the right of the last sStopChar in sFrom
13059>>>// If sStopChar has no occurences in the string an empty string is
13059>>>// returned.
13059>>>Function StringFromRightOfChar Global String sFrom String sStopChar Returns String
13061>>>    String  sRetVal
13061>>>    String  sChar
13061>>>    Integer iLength
13061>>>    Integer iPos
13061>>>    Boolean bStopChar
13061>>>    Move "" to sRetval
13062>>>    Move (Length(sFrom)) to iLength
13063>>>    If ((iLength>0) And (Pos(sStopChar,sFrom) <> 0)) Begin
13065>>>        Move iLength   to iPos
13066>>>        Move (False)   to bStopChar
13067>>>        While Not bStopChar
13071>>>            Move (Mid(sFrom,1,iPos)) to sChar
13072>>>            Decrement iPos
13073>>>            If ((sChar=sStopChar) Or (iPos<1)) Begin
13075>>>                Move (True) to bStopChar
13076>>>            End
13076>>>>
13076>>>            Else Begin
13077>>>                Move (sChar+sRetVal) to sRetVal
13078>>>            End
13078>>>>
13078>>>        Loop
13079>>>>
13079>>>    End
13079>>>>
13079>>>    Function_Return sRetVal
13080>>>End_Function
13081>>>
13081>>>// Pre:  sFileName contains the complete path of the file.
13081>>>// Post: returns the complete path of the file.
13081>>>// This function is inspired on function SEQ_ExtractPathFromFileName of Sture Andersen.
13081>>>Function ParseFolderName Global String sFileName Returns String
13083>>>    String sFile
13083>>>    String sFolderName
13083>>>    String sDirSep // this is "\" for windows, or "/" for unix
13083>>>
13083>>>    Move "" to sFolderName
13084>>>    Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
13085>>>    If sDirSep In sFileName Begin
13087>>>        Move (StringFromRightOfChar(sFileName,sDirSep)) to sFile
13088>>>        Move (Left(sFileName,Length(sFileName)-Length(sFile))) to sFolderName
13089>>>    End
13089>>>>
13089>>>    Else If ":" In sFileName Begin
13092>>>        Move (StringFromRightOfChar(sFileName,":")) to sFile
13093>>>        Move (Replace(sFile,sFileName,"")) to sFolderName
13094>>>    End
13094>>>>
13094>>>    Function_Return sFolderName
13095>>>End_Function
13096>>>
13096>>>// Pre:  sFileName contains the complete path of the file.
13096>>>// post: The returned filename has it's path removed, but will have a extension
13096>>>Function ParseFileName Global String sFileName Returns String
13098>>>    String sFolderName
13098>>>    String sDirSep // this is "\" for windows, or "/" for unix
13098>>>
13098>>>    Move (sysconf(SYSCONF_DIR_SEPARATOR)) to sDirSep
13099>>>    Get ParseFolderName sFileName to sFolderName
13100>>>    If (sFolderName <> "") Begin
13102>>>        Move (Replace(sFolderName,sFileName,"")) to sFileName
13103>>>    End
13103>>>>
13103>>>    Move (Replace(sDirSep,sFileName,"")) to sFileName
13104>>>    Function_Return sFilename
13105>>>End_Function
13106>>>
13106>>>// Pre:  sFileName may contain the complete path of the file.
13106>>>//       or contain multiple dots in the filename, so temp.gif.bak will
13106>>>//       return "bak" as the extension and not "gif"
13106>>>// Post: returns the extension only, this extension can be a valid unixlike extension
13106>>>//       such as "html" or "java"
13106>>>Function ParseFileExtension Global String sFileName Returns String
13108>>>    String  sFileExtension
13108>>>    Get ParseFileName sFileName to sFileName // takes care of corner case with path containing a ".". eg. c:\frank.cheng\hello
13109>>>    Get StringFromRightOfChar sFileName "." to sFileExtension
13110>>>    Function_Return sFileExtension
13111>>>End_Function
13112>>>
13112>>>Define CS_DDE_ERR_UNKNOWN_LINE2   For ".\n"
13112>>>
13112>>>Function DDE_Error_To_String Integer iErrorID Returns String
13114>>>    String sMessage
13114>>>    Case Begin
13114>>>        Case (iErrorID = vERROR_FILE_NOT_FOUND)
13116>>>            Move CS_DDE_ERR_FILE_NOT_FOUND to sMessage
13117>>>            Case Break
13118>>>        Case (iErrorID = vERROR_PATH_NOT_FOUND)
13121>>>            Move CS_DDE_ERR_PATH_NOT_FOUND to sMessage
13122>>>            Case Break
13123>>>        Case (iErrorID = vERROR_BAD_FORMAT)
13126>>>            Move CS_DDE_ERR_BAD_FORMAT to sMessage
13127>>>            Case Break
13128>>>        Case (iErrorID = vSE_ERR_ACCESSDENIED)
13131>>>            Move CS_DDE_ERR_ACCESSDENIED to sMessage
13132>>>            Case Break
13133>>>        Case (iErrorID = vSE_ERR_ASSOCINCOMPLETE)
13136>>>            Move CS_DDE_ERR_ASSOCINCOMPLETE to sMessage
13137>>>            Case Break
13138>>>        Case (iErrorID = vSE_ERR_DDEBUSY)
13141>>>            Move CS_DDE_ERR_DDEBUSY to sMessage
13142>>>            Case Break
13143>>>        Case (iErrorID = vSE_ERR_DDEFAIL)
13146>>>            Move CS_DDE_ERR_DDEFAIL to sMessage
13147>>>            Case Break
13148>>>        Case (iErrorID = vSE_ERR_DDETIMEOUT)
13151>>>            Move CS_DDE_ERR_DDETIMEOUT to sMessage
13152>>>            Case Break
13153>>>        Case (iErrorID = vSE_ERR_DLLNOTFOUND)
13156>>>            Move CS_DDE_ERR_DLLNOTFOUND to sMessage
13157>>>            Case Break
13158>>>        Case (iErrorID = vSE_ERR_NOASSOC)
13161>>>            Move CS_DDE_ERR_NOASSOC to sMessage
13162>>>            Case Break
13163>>>        Case ((iErrorID = vSE_ERR_OOM) Or (iErrorID = 0))
13166>>>            Move CS_DDE_ERR_OOM to sMessage
13167>>>            Case Break
13168>>>        Case (iErrorID = vSE_ERR_PNF)
13171>>>            Move CS_DDE_ERR_PNF to sMessage
13172>>>            Case Break
13173>>>        Case (iErrorID = vSE_ERR_SHARE)
13176>>>            Move CS_DDE_ERR_SHARE to sMessage
13177>>>            Case Break
13178>>>        Case Else
13178>>>            Move CS_DDE_ERR_UNKNOWN_LINE1 to sMessage
13179>>>            Move (sMessage*Trim(iErrorID)*CS_DDE_ERR_UNKNOWN_LINE2) to sMessage
13180>>>            Case Break
13181>>>    Case End
13181>>>    Function_Return sMessage
13182>>>End_Function
13183>>>
13183>>>Procedure vDDE_Error_Handler Integer iErrorID
13185>>>    String sMessage
13185>>>    Get DDE_Error_To_String iErrorID to sMessage
13186>>>    Append sMessage CS_DDE_ERR_HANDL_PAKTC //  "Press a key to continue..."
13187>>>    Send Stop_Box sMessage CS_DDE_ERR_HANDL_CAPTION
13188>>>End_Procedure
13189>>>
13189>>>
13189>>>// This function informs the user that he entered a yet unknown folder and
13189>>>// asks if he/she wants to create the folder (Yes/No)
13189>>>// Choice: "Yes" - this creates the folder
13189>>>//                 if successful, the function returns false
13189>>>//                 else it will be true.
13189>>>// Choice: "No"  - returns TRUE, This allows the programmer to take action
13189>>>//                 For example: to stop a save
13189>>>// Precondition: A foldername must be entered. We do not check for empty paths
13189>>>// This function returns a non-zero value if the folder isn't created afterwards
13189>>>Function vVerifyNewFolder Global String sFolderName Returns Integer
13191>>>    Integer bIsNotValid
13191>>>    Integer iUsers_Choice
13191>>>    String  sMessage
13191>>>
13191>>>    If (vFolderExists(sFolderName) Eq 0) Begin
13193>>>        Move "The folder '" to sMessage
13194>>>        Append sMessage sFolderName
13195>>>        Append sMessage "' does not yet exist,\n"
13196>>>        Append sMessage "Do you want to create it now?"
13197>>>        Get YesNo_Box sMessage "Confirm" MB_DefButton1 to iUsers_Choice
13198>>>        Case Begin
13198>>>            Case (iUsers_Choice = MBR_Yes)
13200>>>                Move (vCreateDirectory(sFolderName)) to bIsNotValid
13201>>>                If bIsNotValid Begin
13203>>>                    Move "An error occurred while trying to create folder '" to sMessage
13204>>>                    Append sMessage sFolderName "'.\n\n"
13206>>>                    Send Info_Box sMessage "Info"
13207>>>                End
13207>>>>
13207>>>                Case Break
13208>>>            Case (iUsers_Choice = MBR_No)
13211>>>                Move dfTrue to bIsNotValid // Cancel the save
13212>>>                Case Break
13213>>>        Case End
13213>>>    End
13213>>>>
13213>>>    Function_Return bIsNotValid
13214>>>End_Function
13215>>>
13215>>>// **WvA
13215>>>// Formats a foldername by first trimming it and after that by sticking a
13215>>>// directory separator (/\) to the end if it doesn't have one there already.
13215>>>// The folder may contain a drive letter or UNC encoding.
13215>>>Function vFolderFormat Global String sFolderName Returns String
13217>>>    String sDirSep
13217>>>    Move (sysconf(SYSCONF_DIR_SEPARATOR)) to sDirSep  // normally \ (backslash)
13218>>>    Move (Trim(sFolderName)) to sFolderName
13219>>>    If (Right(sFolderName,1)<>sDirSep) Begin
13221>>>        Move (sFolderName+sDirSep) to sFolderName
13222>>>    End
13222>>>>
13222>>>    Function_Return sFolderName
13223>>>End_Function
13224>>>
13224>>>//
13224>>>// Gets the parent path of the currently supplied path
13224>>>// Returns "" when we are at the root folder.
13224>>>//
13224>>>Function vParentPath Global String sPath Returns String
13226>>>    String sStrip sDirSep
13226>>>
13226>>>    Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
13227>>>    Move (Trim(sPath)) to sPath
13228>>>    If (Right(sPath,1) = sDirSep) Begin
13230>>>        Move (Left(sPath,Length(sPath)-1)) to sPath
13231>>>    End
13231>>>>
13231>>>    If (Pos(sDirSep, sPath)) Begin
13233>>>        Move (StringFromRightOfChar(sPath, sDirSep)) to sStrip
13234>>>        Move (Left(sPath,Length(sPath)-Length(sStrip))) to sPath
13235>>>    End
13235>>>>
13235>>>    Else Begin
13236>>>        Move "" to sPath
13237>>>    End
13237>>>>
13237>>>    Function_Return sPath
13238>>>End_Function
13239>Use oEditContextMenu.pkg
Including file: oEditContextMenu.pkg    (C:\Program Files\DataFlex 24.0\Pkg\oEditContextMenu.pkg)
13239>>>Use cCJStandardMenuItemClasses.pkg
Including file: cCJStandardMenuItemClasses.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJStandardMenuItemClasses.pkg)
13239>>>>>Use Dfpanel.pkg
Including file: Dfpanel.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfpanel.pkg)
13239>>>>>>>Use Windows.pkg
13239>>>>>>>Use dfcolor.pkg
13239>>>>>>>
13239>>>>>>>//  Used when help object makes a request to the object requesting help.
13239>>>>>>>Use HelpSystemConstants.pkg
13239>>>>>>>
13239>>>>>>>Enumeration_List
13239>>>>>>>    Define amTop
13239>>>>>>>    Define amBottom
13239>>>>>>>    Define amLeft
13239>>>>>>>    Define amRight
13239>>>>>>>End_Enumeration_List
13239>>>>>>>
13239>>>>>>>Use DFAStBar.pkg  // df application status bar
Including file: Dfastbar.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfastbar.pkg)
13239>>>>>>>>>Register_Procedure Add_Border_Object
13239>>>>>>>>>Register_Procedure Remove_Border_Object
13239>>>>>>>>>
13239>>>>>>>>>Use DFStatBr.pkg
Including file: Dfstatbr.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfstatbr.pkg)
13239>>>>>>>>>>>Use windows.pkg
13239>>>>>>>>>>>Use CommCtrl.pkg
13239>>>>>>>>>>>Use WinGDI.pkg
13239>>>>>>>>>>>
13239>>>>>>>>>>>
13239>>>>>>>>>>>
13239>>>>>>>>>>>
13239>>>>>>>>>>>
13239>>>>>>>>>>>
13239>>>>>>>>>>>Class BasicStatusBar is a dfBaseList
13240>>>>>>>>>>>    Procedure Construct_Object
13242>>>>>>>>>>>        Forward Send Construct_Object
13244>>>>>>>>>>>        Property Integer Private.Simple_State False
13245>>>>>>>>>>>        
13245>>>>>>>>>>>        Property String  Private.Simple_Value ''
13246>>>>>>>>>>>        
13246>>>>>>>>>>>        Property Integer Tooltips_State False // this does nothing
13247>>>>>>>>>>>        Set Scroll_Bar_Visible_State to False
13248>>>>>>>>>>>        Set Border_Style             to Border_None
13249>>>>>>>>>>>        Set External_class_Name "cObsoleteBasicStatusBar" to "msctls_statusbar32"
13250>>>>>>>>>>>        Set Color to clDefault
13251>>>>>>>>>>>    End_Procedure
13252>>>>>>>>>>>    
13252>>>>>>>>>>>    Procedure End_Construct_Object
13254>>>>>>>>>>>        //If (Tooltips_State(self)) Set Window_Style To SBT_TOOLTIPS True
13254>>>>>>>>>>>        Forward Send End_Construct_Object
13256>>>>>>>>>>>    End_Procedure
13257>>>>>>>>>>>    
13257>>>>>>>>>>>    Procedure Set Simple_State Integer bState
13259>>>>>>>>>>>        Handle hWnd
13259>>>>>>>>>>>        Set Private.Simple_state to bState
13260>>>>>>>>>>>        Get Window_Handle to hWnd
13261>>>>>>>>>>>        If hWnd ;            Send Windows_Message SB_SIMPLE bState 0
13264>>>>>>>>>>>    End_Procedure
13265>>>>>>>>>>>    
13265>>>>>>>>>>>    Function Simple_State Returns Integer
13267>>>>>>>>>>>        Function_Return (Private.Simple_state(Self))
13268>>>>>>>>>>>    End_Function
13269>>>>>>>>>>>    
13269>>>>>>>>>>>    Procedure Set Simple_Value String sValue
13271>>>>>>>>>>>        Integer iVoid
13271>>>>>>>>>>>        Handle hWnd
13271>>>>>>>>>>>        WString wsValue
13271>>>>>>>>>>>        
13271>>>>>>>>>>>        Set Private.Simple_Value to sValue
13272>>>>>>>>>>>        
13272>>>>>>>>>>>        Get Window_Handle to hWnd
13273>>>>>>>>>>>        If hWnd Begin
13275>>>>>>>>>>>            Append sValue ( Character(0) )
13276>>>>>>>>>>>            Move sValue to wsValue
13277>>>>>>>>>>>            
13277>>>>>>>>>>>            Send Windows_Message SB_SETTEXT (255 + sbNORMAL) (AddressOf(wsValue))
13278>>>>>>>>>>>        End
13278>>>>>>>>>>>>
13278>>>>>>>>>>>        Set Simple_State to True
13279>>>>>>>>>>>    End_Procedure
13280>>>>>>>>>>>    
13280>>>>>>>>>>>    Function Simple_Value Returns String
13282>>>>>>>>>>>        Function_Return (private.Simple_value(Self))
13283>>>>>>>>>>>    End_Function
13284>>>>>>>>>>>    
13284>>>>>>>>>>>    Procedure Activate
13286>>>>>>>>>>>    End_Procedure
13287>>>>>>>>>>>    
13287>>>>>>>>>>>    Procedure Page_Object Integer iState
13289>>>>>>>>>>>        Handle hWnd
13289>>>>>>>>>>>        Get Window_handle to hWnd
13290>>>>>>>>>>>        Forward Send Page_Object iState
13292>>>>>>>>>>>        If (iState and hWnd = 0) ;            Send DoRestructure
13295>>>>>>>>>>>    End_Procedure
13296>>>>>>>>>>>    
13296>>>>>>>>>>>    Procedure Page Integer iState
13298>>>>>>>>>>>        Forward Send Page iState
13300>>>>>>>>>>>        If (iState=1) Begin
13302>>>>>>>>>>>            Send Windows_Message SB_SETBKCOLOR 0 (Color(Self))
13303>>>>>>>>>>>        End
13303>>>>>>>>>>>>
13303>>>>>>>>>>>    End_Procedure
13304>>>>>>>>>>>    
13304>>>>>>>>>>>    Procedure DoRestructure
13306>>>>>>>>>>>        Integer iLoop icItems iWidth icWidth iRetVal
13306>>>>>>>>>>>        Handle hWnd
13306>>>>>>>>>>>        Integer[] aItems
13307>>>>>>>>>>>        
13307>>>>>>>>>>>        Get Window_Handle to hWnd
13308>>>>>>>>>>>        If hWnd Begin
13310>>>>>>>>>>>            
13310>>>>>>>>>>>            Send Windows_Message SB_SIMPLE (Simple_State(Self)) 0
13311>>>>>>>>>>>            Set Simple_Value to (Simple_Value(Self))
13312>>>>>>>>>>>            
13312>>>>>>>>>>>            Get Item_Count to icItems
13313>>>>>>>>>>>            
13313>>>>>>>>>>>            For iLoop from 1 to (icItems -1)
13319>>>>>>>>>>>>
13319>>>>>>>>>>>                Get Message (iLoop -1) to iWidth
13320>>>>>>>>>>>                Move (icWidth + iWidth) to icWidth
13321>>>>>>>>>>>                Move (icWidth) to aItems[iLoop - 1]
13322>>>>>>>>>>>                
13322>>>>>>>>>>>                Set Value (iLoop -1) to (Value(Self, iLoop -1))
13323>>>>>>>>>>>            Loop
13324>>>>>>>>>>>>
13324>>>>>>>>>>>            // Now make the last item 'spring' to the end
13324>>>>>>>>>>>            Move -1 to aItems[icItems - 1]
13325>>>>>>>>>>>                        
13325>>>>>>>>>>>            Move (SendMessage(hWnd, SB_SETPARTS, icItems, AddressOf(aItems))) to iRetVal
13326>>>>>>>>>>>            For iLoop from 0 to (icItems -1)
13332>>>>>>>>>>>>
13332>>>>>>>>>>>                Set Value iLoop to (Value(Self, iLoop))
13333>>>>>>>>>>>            Loop
13334>>>>>>>>>>>>
13334>>>>>>>>>>>            
13334>>>>>>>>>>>        End
13334>>>>>>>>>>>>
13334>>>>>>>>>>>    End_Procedure
13335>>>>>>>>>>>    
13335>>>>>>>>>>>    Procedure Add_Item Integer iItemWidth String sValue // this is obsolete
13337>>>>>>>>>>>        Integer iRetVal icItems
13337>>>>>>>>>>>        Handle hWnd
13337>>>>>>>>>>>        
13337>>>>>>>>>>>        Forward Send Add_Item iItemWidth sValue
13339>>>>>>>>>>>        Get Item_Count to icItems
13340>>>>>>>>>>>        Set Value (icItems -1) to sValue
13341>>>>>>>>>>>        If (Window_Handle(Self)) ;            Send DoRestructure
13344>>>>>>>>>>>        Set Current_item to (icItems -1)
13345>>>>>>>>>>>    End_Procedure
13346>>>>>>>>>>>    
13346>>>>>>>>>>>    Procedure AddPane Integer iItemWidth String sValue Integer iStyle
13348>>>>>>>>>>>        Integer iRetVal icItem
13348>>>>>>>>>>>        Handle hWnd
13348>>>>>>>>>>>        
13348>>>>>>>>>>>        Send Add_Item iItemWidth sValue
13349>>>>>>>>>>>        Get Item_Count to icItem
13350>>>>>>>>>>>        Set Value (icItem -1) to sValue
13351>>>>>>>>>>>        Set Aux_Value (icItem -1) to iStyle
13352>>>>>>>>>>>        If (Window_Handle(Self)) ;            Send DoRestructure
13355>>>>>>>>>>>    End_Procedure
13356>>>>>>>>>>>    
13356>>>>>>>>>>>    Procedure AutoSizeLocate
13358>>>>>>>>>>>        Integer iSize iRetVal
13358>>>>>>>>>>>        Handle hWnd
13358>>>>>>>>>>>        Get Window_Handle to hWnd
13359>>>>>>>>>>>        Delegate Get GuiSize to iSize
13361>>>>>>>>>>>        If hWnd ;            Move (SendMessage(hWnd, WM_SIZE, 0, iSize)) to iRetVal
13364>>>>>>>>>>>    End_Procedure
13365>>>>>>>>>>>    
13365>>>>>>>>>>>    Procedure Set Item_Display_Style Integer iItem Integer iStyle  // this is obsolete, Use PaneStyle
13367>>>>>>>>>>>        If (num_arguments = 2) ;            Set Aux_Value iItem to iStyle
13370>>>>>>>>>>>        Else ;            Set Aux_Value (current_item(Self)) to iItem //iStyle passed as arg1
13372>>>>>>>>>>>    End_Procedure
13373>>>>>>>>>>>    
13373>>>>>>>>>>>    Function Item_Display_Style Integer iItem Returns Integer // this is obsolete, use PaneStyle
13375>>>>>>>>>>>        Function_Return (Aux_value(Self, iItem))
13376>>>>>>>>>>>    End_Function
13377>>>>>>>>>>>    
13377>>>>>>>>>>>    Procedure Set Value Integer iItem String sValue
13379>>>>>>>>>>>        Handle hWnd
13379>>>>>>>>>>>        Integer iRetVal iTextStyle iVoid
13379>>>>>>>>>>>        String sNull
13379>>>>>>>>>>>        WString wsValue
13379>>>>>>>>>>>        
13379>>>>>>>>>>>        Forward Set Value iItem to sValue
13381>>>>>>>>>>>        Get Window_Handle to hWnd
13382>>>>>>>>>>>        If hWnd Begin
13384>>>>>>>>>>>            Get Item_Display_Style iItem to iTextStyle
13385>>>>>>>>>>>            Append sValue ( Character(0) )
13386>>>>>>>>>>>            Move sValue to wsValue
13387>>>>>>>>>>>            Move (SendMessage(hWnd, SB_SETTEXT, iItem + iTextStyle, AddressOf(wsValue))) to iRetVal
13388>>>>>>>>>>>        End
13388>>>>>>>>>>>>
13388>>>>>>>>>>>        Set Simple_State to False
13389>>>>>>>>>>>    End_Procedure
13390>>>>>>>>>>>    
13390>>>>>>>>>>>    Function IsSimpleMode Returns Integer
13392>>>>>>>>>>>        Function_Return (WindowsMessage(SB_ISSIMPLE, 0, 0))
13393>>>>>>>>>>>    End_Function
13394>>>>>>>>>>>    
13394>>>>>>>>>>>    Procedure Notify Longptr wParam Longptr lParam
13396>>>>>>>>>>>        Integer iVoid iCode
13396>>>>>>>>>>>        Longptr iPane
13396>>>>>>>>>>>        tWinNmMouse NmMouse
13396>>>>>>>>>>>        tWinNmMouse NmMouse
13396>>>>>>>>>>>        
13396>>>>>>>>>>>        Move (CopyMemory(AddressOf(NmMouse), lParam, SizeOfType(tWinNmMouse))) to iVoid
13397>>>>>>>>>>>        
13397>>>>>>>>>>>        Move NmMouse.hdr.code   to iCode
13398>>>>>>>>>>>        Move NmMouse.dwItemSpec to iPane
13399>>>>>>>>>>>        
13399>>>>>>>>>>>        If (iCode = SBN_SIMPLEMODECHANGE) ;            Send OnSimpleModeChange
13402>>>>>>>>>>>        Else If (iCode = NM_CLICK) ;            Send OnClick            iPane
13406>>>>>>>>>>>        Else If (iCode = NM_DBLCLK) ;            Send OnDoubleClick      iPane
13410>>>>>>>>>>>        Else If (iCode = NM_RCLICK) ;            Send OnRightClick       iPane
13414>>>>>>>>>>>        Else If (iCode = NM_RDBLCLK) ;            Send OnDoubleRightClick iPane
13418>>>>>>>>>>>    End_Procedure
13419>>>>>>>>>>>    
13419>>>>>>>>>>>    //  This needs to be chagned to return the real GUISize of the status bar
13419>>>>>>>>>>>    //  by making API calls.
13419>>>>>>>>>>>    //
13419>>>>>>>>>>>    Function GuiSize Returns Integer
13421>>>>>>>>>>>        Handle hWnd
13421>>>>>>>>>>>        Integer cy cx iVoid
13421>>>>>>>>>>>        tWinRect Rect
13421>>>>>>>>>>>        tWinRect Rect
13421>>>>>>>>>>>        Get Window_Handle to hWnd
13422>>>>>>>>>>>        If hWnd Begin
13424>>>>>>>>>>>            Move (GetWindowRect(hWnd, AddressOf(Rect))) to iVoid
13425>>>>>>>>>>>            Move (Rect.right - Rect.left) to cx
13426>>>>>>>>>>>            Move (Rect.bottom - Rect.top) to cy
13427>>>>>>>>>>>        End
13427>>>>>>>>>>>>
13427>>>>>>>>>>>        Else Begin
13428>>>>>>>>>>>            Move 25 to cy
13429>>>>>>>>>>>            Move 19 to cx
13430>>>>>>>>>>>        End
13430>>>>>>>>>>>>
13430>>>>>>>>>>>        Function_Return ( cy*65536 + cx )
13431>>>>>>>>>>>    End_Function
13432>>>>>>>>>>>    
13432>>>>>>>>>>>    Function PaneTextWidth WString sText Returns Integer
13434>>>>>>>>>>>        Handle hWnd hDC
13434>>>>>>>>>>>        Integer bOK
13434>>>>>>>>>>>        tWinPoint Point
13434>>>>>>>>>>>        tWinPoint Point
13434>>>>>>>>>>>        
13434>>>>>>>>>>>        Get Window_Handle to hWnd
13435>>>>>>>>>>>        Move (GetDC(hWnd)) to hDC
13436>>>>>>>>>>>        
13436>>>>>>>>>>>        Move (GetTextExtentW(hDC, AddressOf(sText), length(sText), AddressOf(Point))) to bOk
13437>>>>>>>>>>>        
13437>>>>>>>>>>>        Move (ReleaseDC(hWnd, hDC)) to hDC
13438>>>>>>>>>>>        
13438>>>>>>>>>>>        Function_Return Point.x
13439>>>>>>>>>>>    End_Function
13440>>>>>>>>>>>    
13440>>>>>>>>>>>    Procedure Set PaneWidth Integer iPane Integer cxPane
13442>>>>>>>>>>>        Set Message iPane to cxPane
13443>>>>>>>>>>>    End_Procedure
13444>>>>>>>>>>>    
13444>>>>>>>>>>>    Function PaneWidth Integer iPane Returns Integer
13446>>>>>>>>>>>        Function_Return (Message(Self,iPane))
13447>>>>>>>>>>>    End_Function
13448>>>>>>>>>>>    
13448>>>>>>>>>>>    Procedure Set PaneStyle Integer iPane Integer iStyle
13450>>>>>>>>>>>        Set Aux_Value iPane to iStyle
13451>>>>>>>>>>>    End_Procedure
13452>>>>>>>>>>>    
13452>>>>>>>>>>>    Function PaneStyle Integer iPane Returns Integer
13454>>>>>>>>>>>        Function_Return (Aux_Value(Self,iPane))
13455>>>>>>>>>>>    End_Function
13456>>>>>>>>>>>    
13456>>>>>>>>>>>    Procedure Set PaneText Integer iPane String sText
13458>>>>>>>>>>>        Set Value iPane to sText
13459>>>>>>>>>>>    End_Procedure
13460>>>>>>>>>>>    
13460>>>>>>>>>>>    Function PaneText Integer iPane Returns String
13462>>>>>>>>>>>        Function_Return (Value(Self,iPane))
13463>>>>>>>>>>>    End_Function
13464>>>>>>>>>>>    
13464>>>>>>>>>>>    Function PaneCount Returns Integer
13466>>>>>>>>>>>        Function_Return (Item_Count(Self))
13467>>>>>>>>>>>    End_Function
13468>>>>>>>>>>>    
13468>>>>>>>>>>>    Procedure OnClick Longptr iPane
13470>>>>>>>>>>>    End_Procedure
13471>>>>>>>>>>>    
13471>>>>>>>>>>>    Procedure OnDoubleClick Longptr iPane
13473>>>>>>>>>>>    End_Procedure
13474>>>>>>>>>>>    
13474>>>>>>>>>>>    Procedure OnRightClick Longptr iPane
13476>>>>>>>>>>>    End_Procedure
13477>>>>>>>>>>>    
13477>>>>>>>>>>>    Procedure OnDoubleRightClick Longptr iPane
13479>>>>>>>>>>>    End_Procedure
13480>>>>>>>>>>>    
13480>>>>>>>>>>>    Procedure OnSimpleModeChange
13482>>>>>>>>>>>    End_Procedure
13483>>>>>>>>>>>End_Class
13484>>>>>>>>>>>
13484>>>>>>>>>
13484>>>>>>>>>Class AppStatusBar is a BasicStatusBar
13485>>>>>>>>>    
13485>>>>>>>>>    Procedure Construct_Object
13487>>>>>>>>>        Forward Send Construct_Object
13489>>>>>>>>>        Property Integer Status_Help_Item 0
13490>>>>>>>>>        Property Integer Menu_Simple_State TRUE
13491>>>>>>>>>        
13491>>>>>>>>>        // SET s/b private, Get is public
13491>>>>>>>>>        Property Integer Menu_status_State False // MUST start false
13492>>>>>>>>>        
13492>>>>>>>>>        Property Integer Old_Simple_State  false
13493>>>>>>>>>        
13493>>>>>>>>>        Property String  Old_Status_Value  ''
13494>>>>>>>>>        
13494>>>>>>>>>        Set Popup_State         To TRUE
13495>>>>>>>>>        Set Attach_Parent_State To TRUE
13496>>>>>>>>>        // register status-bar with container
13496>>>>>>>>>        Delegate Set StatusBar_id To self
13498>>>>>>>>>    End_Procedure
13499>>>>>>>>>    
13499>>>>>>>>>    Procedure Set Status_Help_Value String sHelp
13501>>>>>>>>>        Integer iPart
13501>>>>>>>>>        Get Status_Help_Item To iPart
13502>>>>>>>>>        Set Value iPart to sHelp
13503>>>>>>>>>    End_Procedure
13504>>>>>>>>>    
13504>>>>>>>>>    Function Status_Help_Value Returns String
13506>>>>>>>>>        Integer iPart
13506>>>>>>>>>        String sHelp
13506>>>>>>>>>        Get Status_Help_Item To iPart
13507>>>>>>>>>        Get Value iPart To sHelp
13508>>>>>>>>>        Function_Return sHelp
13509>>>>>>>>>    End_Procedure
13510>>>>>>>>>    
13510>>>>>>>>>    Procedure Initialize_Menu
13512>>>>>>>>>        Integer iState OldState
13512>>>>>>>>>        If Not (Menu_Status_state(self)) Begin
13514>>>>>>>>>            Get Simple_State to OldState
13515>>>>>>>>>            Set Old_Simple_State to OldState
13516>>>>>>>>>            If OldState ;                Set Old_Status_Value to (Simple_Value(self))
13519>>>>>>>>>            Else ;                Set Old_Status_Value to (Status_Help_Value(self))
13521>>>>>>>>>            Set Simple_State to (Menu_Simple_State(self))
13522>>>>>>>>>            Set Menu_Status_State to TRUE
13523>>>>>>>>>        End
13523>>>>>>>>>>
13523>>>>>>>>>    End_Procedure
13524>>>>>>>>>    
13524>>>>>>>>>    Procedure Exit_Menu
13526>>>>>>>>>        Integer OldState
13526>>>>>>>>>        String OldVal
13526>>>>>>>>>        If (Menu_Status_state(self)) Begin
13528>>>>>>>>>            Get Old_Simple_State to OldState
13529>>>>>>>>>            Set Simple_State     to OldState
13530>>>>>>>>>            Get old_status_Value to oldVal
13531>>>>>>>>>            If OldState ;                Set Simple_Value to OldVal
13534>>>>>>>>>            Else ;                Set Status_Help_Value to OldVal
13536>>>>>>>>>            Set Menu_Status_State to FALSE
13537>>>>>>>>>        End
13537>>>>>>>>>>
13537>>>>>>>>>    End_Procedure
13538>>>>>>>>>    
13538>>>>>>>>>    Procedure Show_Status_Help String sHelp
13540>>>>>>>>>        Integer iState
13540>>>>>>>>>        Get Simple_State to iState
13541>>>>>>>>>        If not iState ;            Set Status_Help_Value to sHelp
13544>>>>>>>>>        Else ;            Set Simple_Value      to sHelp
13546>>>>>>>>>    End_Procedure
13547>>>>>>>>>    
13547>>>>>>>>>    Function Current_Status_Help Returns String
13549>>>>>>>>>        Integer iState
13549>>>>>>>>>        String sHelp
13549>>>>>>>>>        Get Simple_State to iState
13550>>>>>>>>>        If not iState ;            Get Status_Help_Value to sHelp
13553>>>>>>>>>        Else ;            Get Simple_Value      to sHelp
13555>>>>>>>>>        Function_Return sHelp
13556>>>>>>>>>    End_Function
13557>>>>>>>>>    
13557>>>>>>>>>    Procedure Page_Object Integer bShow
13559>>>>>>>>>        Integer hoClient
13559>>>>>>>>>        Handle hHndl
13559>>>>>>>>>        Get Window_Handle to hHndl
13560>>>>>>>>>        Forward Send Page_Object bShow
13562>>>>>>>>>        If (bShow AND hHndl=0) Begin
13564>>>>>>>>>            Delegate Get Client_Id To hoClient
13566>>>>>>>>>            If hoClient ;                Send Add_Border_Object to hoClient self amBOTTOM
13569>>>>>>>>>        End
13569>>>>>>>>>>
13569>>>>>>>>>    End_Procedure
13570>>>>>>>>>    
13570>>>>>>>>>    Procedure Deactivating
13572>>>>>>>>>        Integer hoClient
13572>>>>>>>>>        Delegate Get Client_Id To hoClient
13574>>>>>>>>>        Forward Send DeActivating
13576>>>>>>>>>        If hoClient ;            Send Remove_Border_Object to hoClient self amBOTTOM
13579>>>>>>>>>    End_Procedure
13580>>>>>>>>>    
13580>>>>>>>>>End_Class
13581>>>>>>>Use DFABtBar.pkg  // df application button bar
Including file: Dfabtbar.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfabtbar.pkg)
13581>>>>>>>>>Register_Procedure Add_Border_Object
13581>>>>>>>>>Register_Procedure Remove_Border_Object
13581>>>>>>>>>
13581>>>>>>>>>Use Windows.pkg
13581>>>>>>>>>
13581>>>>>>>>>Class AppToolBar is a BasicToolBar
13582>>>>>>>>>    
13582>>>>>>>>>    Procedure Construct_Object
13584>>>>>>>>>        Forward Send Construct_Object
13586>>>>>>>>>        Set Scope_State         to True
13587>>>>>>>>>        Set Attach_Parent_State to True
13588>>>>>>>>>        Set Popup_State         to True
13589>>>>>>>>>        Set Client_Area_State   to True
13590>>>>>>>>>        Delegate Set ToolBar_Id to Self
13592>>>>>>>>>    End_Procedure
13593>>>>>>>>>    
13593>>>>>>>>>    Procedure Page Integer bState
13595>>>>>>>>>        Integer hoClient
13595>>>>>>>>>        Handle  hWnd
13595>>>>>>>>>        Get Window_Handle to hWnd
13596>>>>>>>>>        Forward Send Page bState
13598>>>>>>>>>        If (bState=1 and hWnd=0) Begin
13600>>>>>>>>>            Delegate Get Client_Id to hoClient
13602>>>>>>>>>            If hoClient ;                Send Add_Border_Object to hoClient Self amTOP
13605>>>>>>>>>        End
13605>>>>>>>>>>
13605>>>>>>>>>    End_Procedure
13606>>>>>>>>>    
13606>>>>>>>>>    Procedure Deactivating
13608>>>>>>>>>        Integer hoClient
13608>>>>>>>>>        Forward Send DeActivating
13610>>>>>>>>>        Delegate Get Client_Id to hoClient
13612>>>>>>>>>        If hoClient Begin
13614>>>>>>>>>            Send Remove_Border_Object to hoClient Self amTOP
13615>>>>>>>>>        End
13615>>>>>>>>>>
13615>>>>>>>>>    End_Procedure
13616>>>>>>>>>    
13616>>>>>>>>>    Procedure Set GuiSize Integer cy Integer cx
13618>>>>>>>>>        Forward Set GuiSize to cy cx
13620>>>>>>>>>    End_Procedure
13621>>>>>>>>>    
13621>>>>>>>>>    // Container_Handle:
13621>>>>>>>>>    // JvH: - This function was put in to allow support for combo-form & other
13621>>>>>>>>>    // controls in the toolbar.
13621>>>>>>>>>    Function Container_Handle Returns Handle
13623>>>>>>>>>        Function_Return (window_handle(Self))
13624>>>>>>>>>    End_Function
13625>>>>>>>>>End_Class
13626>>>>>>>>>
13626>>>>>>>Use DFAClnt.pkg   // df application Client
Including file: Dfaclnt.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfaclnt.pkg)
13626>>>>>>>>>Use Windows.pkg
13626>>>>>>>>>Use Set.pkg
Including file: set.pkg    (C:\Program Files\DataFlex 24.0\Pkg\set.pkg)
13626>>>>>>>>>>>Use VDFBase.pkg
13626>>>>>>>>>>>
13626>>>>>>>>>>>Class Set is an ARRAY
13627>>>>>>>>>>>    
13627>>>>>>>>>>>    Function Find_Element String ElemStr Returns Integer
13629>>>>>>>>>>>        Integer ndx retVal ArrMax
13629>>>>>>>>>>>        String ArrVal
13629>>>>>>>>>>>        Get item_count to ArrMax
13630>>>>>>>>>>>        Move -1 to retVal
13631>>>>>>>>>>>        Move 0 to ndx
13632>>>>>>>>>>>        While (ndx < ArrMax and retVal = -1)
13636>>>>>>>>>>>            Get array_value  ndx to ArrVal
13637>>>>>>>>>>>            If (ArrVal = ElemStr) ;                Move ndx to retVal
13640>>>>>>>>>>>            Move (ndx + 1) to ndx
13641>>>>>>>>>>>        loop
13642>>>>>>>>>>>>
13642>>>>>>>>>>>        Function_Return retVal
13643>>>>>>>>>>>    End_Function
13644>>>>>>>>>>>    
13644>>>>>>>>>>>    Procedure Add_Element String Elem_Str Returns Integer
13646>>>>>>>>>>>        Integer Ret_Val
13646>>>>>>>>>>>        
13646>>>>>>>>>>>        Get Find_Element Elem_Str to Ret_Val
13647>>>>>>>>>>>        
13647>>>>>>>>>>>        If (Ret_Val < 0) ;            Get Item_Count to Ret_Val
13650>>>>>>>>>>>        
13650>>>>>>>>>>>        Set Array_Value  Ret_Val to Elem_Str
13651>>>>>>>>>>>        
13651>>>>>>>>>>>        Procedure_Return Ret_Val
13652>>>>>>>>>>>    End_Procedure
13653>>>>>>>>>>>    
13653>>>>>>>>>>>    Procedure Remove_Element String sElement
13655>>>>>>>>>>>        Integer iIndex
13655>>>>>>>>>>>        Get Find_Element sElement to iIndex
13656>>>>>>>>>>>        If (iIndex > -1) ;            Send delete_item iIndex
13659>>>>>>>>>>>    End_Procedure
13660>>>>>>>>>>>    
13660>>>>>>>>>>>    
13660>>>>>>>>>>>End_Class
13661>>>>>>>>>>>
13661>>>>>>>>>>>//
13661>>>>>>>>>>>// global function to create set instances at random
13661>>>>>>>>>>>//
13661>>>>>>>>>>>Function make_set for cDesktop Returns Integer
13663>>>>>>>>>>>    Integer retval
13663>>>>>>>>>>>    Object SetTemplate is a Set
13665>>>>>>>>>>>        Move Self to retval
13666>>>>>>>>>>>    End_Object
13667>>>>>>>>>>>    Function_Return retval
13668>>>>>>>>>>>End_Function
13669>>>>>>>>>>>
13669>>>>>>>>>>>
13669>>>>>>>>>>>
13669>>>>>>>>>Use Dfpanel.pkg
13669>>>>>>>>>
13669>>>>>>>>>Class AppClientArea is a MdiClientArea
13670>>>>>>>>>    
13670>>>>>>>>>    Procedure Construct_Object
13672>>>>>>>>>        Forward Send Construct_Object
13674>>>>>>>>>        
13674>>>>>>>>>        Property Integer Auto_Arrange_Icons_State True
13675>>>>>>>>>        
13675>>>>>>>>>        Property Integer Private.Client_Scrollbar_State   True
13676>>>>>>>>>        
13676>>>>>>>>>        Delegate Set Client_Id to Self
13678>>>>>>>>>        // keep track of all child dialog objects (views)
13678>>>>>>>>>        
13678>>>>>>>>>        Object Mdi_Dialogs is a Set
13680>>>>>>>>>        End_Object
13681>>>>>>>>>        
13681>>>>>>>>>        Property Integer Private.Last_Dialog_Item -1
13682>>>>>>>>>    End_Procedure
13683>>>>>>>>>    
13683>>>>>>>>>    Procedure Set Client_Scrollbar_State Integer bState
13685>>>>>>>>>        Set Scroll_bar_Visible_State to bState
13686>>>>>>>>>        Set Private.Client_Scrollbar_State to bState
13687>>>>>>>>>    End_Procedure
13688>>>>>>>>>    
13688>>>>>>>>>    Function Client_Scrollbar_State Returns Integer
13690>>>>>>>>>        Function_Return (Private.Client_Scrollbar_State(Self))
13691>>>>>>>>>    End_Function
13692>>>>>>>>>    
13692>>>>>>>>>    Procedure Add_Mdi_Dialog Integer Id#
13694>>>>>>>>>        Send Add_element to (mdi_dialogs(Self)) Id#
13695>>>>>>>>>    End_Procedure
13696>>>>>>>>>    
13696>>>>>>>>>    Procedure Remove_Mdi_Dialog Integer Id#
13698>>>>>>>>>        Integer obj#
13698>>>>>>>>>        Move (mdi_dialogs(Self)) to Obj#
13699>>>>>>>>>        If Obj# ;            Send Remove_element to (mdi_dialogs(Obj#)) Id#
13702>>>>>>>>>    End_Procedure
13703>>>>>>>>>    
13703>>>>>>>>>    Function Next_Mdi_Dialog Integer FindFirst Returns Integer
13705>>>>>>>>>        Integer Id# Item# Obj#
13705>>>>>>>>>        Get Private.Last_dialog_item to Item#
13706>>>>>>>>>        If FindFirst ;            Move -1 to Item#
13709>>>>>>>>>        Increment Item#
13710>>>>>>>>>        Set Private.Last_dialog_item to Item#
13711>>>>>>>>>        Move (Mdi_dialogs(Self)) to Obj#
13712>>>>>>>>>        If (Item_count(Obj#)>Item#) ;            Get Value of Obj# Item# to Id#
13715>>>>>>>>>        Function_Return Id#
13716>>>>>>>>>    End_Function
13717>>>>>>>>>    
13717>>>>>>>>>    Procedure Set GuiSize Integer cy Integer cx
13719>>>>>>>>>        Forward Set GuiSize to cy cx
13721>>>>>>>>>        If (active_state(Self) and Auto_Arrange_Icons_State(Self)) ;            Send Arrange_icons
13724>>>>>>>>>    End_Procedure
13725>>>>>>>>>    
13725>>>>>>>>>    Procedure Private.Adjust_MDI_Margins Integer cy Integer cx Integer BorderFlag
13727>>>>>>>>>        Integer cMargin
13727>>>>>>>>>        If (BorderFlag = amTOP) Begin
13729>>>>>>>>>            Get mdi_top_margin to cMargin
13730>>>>>>>>>            Set mdi_top_margin to (cMargin + cy)
13731>>>>>>>>>        End
13731>>>>>>>>>>
13731>>>>>>>>>        Else If (BorderFlag = amBOTTOM) Begin
13734>>>>>>>>>            Get mdi_bottom_margin to cMargin
13735>>>>>>>>>            Set mdi_bottom_margin to (cMargin + cy)
13736>>>>>>>>>        End
13736>>>>>>>>>>
13736>>>>>>>>>        Else If (BorderFlag = amLEFT) Begin
13739>>>>>>>>>            Get mdi_left_margin to cMargin
13740>>>>>>>>>            Set mdi_left_margin to (cMargin + cx)
13741>>>>>>>>>        End
13741>>>>>>>>>>
13741>>>>>>>>>        Else If (BorderFlag = amRIGHT) Begin
13744>>>>>>>>>            Get mdi_right_margin to cMargin
13745>>>>>>>>>            Set mdi_right_margin to (cMargin + cx)
13746>>>>>>>>>        End
13746>>>>>>>>>>
13746>>>>>>>>>    End_Procedure
13747>>>>>>>>>    
13747>>>>>>>>>    Procedure Add_Border_Object Integer hoBorder Integer BorderFlag
13749>>>>>>>>>        Integer cy cx
13749>>>>>>>>>        Move (hi(GuiSize(hoBorder)))  to cy
13750>>>>>>>>>        Move (low(GuiSize(hoBorder))) to cx
13751>>>>>>>>>        
13751>>>>>>>>>        Send Private.Adjust_MDI_Margins cy cx BorderFlag
13752>>>>>>>>>    End_Procedure
13753>>>>>>>>>    
13753>>>>>>>>>    Procedure Remove_Border_Object Integer hoBorder Integer BorderFlag
13755>>>>>>>>>        Integer cy cx
13755>>>>>>>>>        Move (-(hi(GuiSize(hoBorder))))  to cy
13756>>>>>>>>>        Move (-(low(GuiSize(hoBorder)))) to cx
13757>>>>>>>>>        
13757>>>>>>>>>        Send Private.Adjust_MDI_Margins cy cx BorderFlag
13758>>>>>>>>>    End_Procedure
13759>>>>>>>>>    
13759>>>>>>>>>    //
13759>>>>>>>>>    // default behavior of mdi client is to passively pass these
13759>>>>>>>>>    // message on to their mdi dialogs (views)
13759>>>>>>>>>    //
13759>>>>>>>>>    Function Verify_Exit_Application Returns Integer
13761>>>>>>>>>        Integer rVal Id#
13761>>>>>>>>>        Get Next_Mdi_Dialog True to Id#
13762>>>>>>>>>        While (Id# and Rval=0)
13766>>>>>>>>>            Get Verify_Exit_application of Id# to rVal
13767>>>>>>>>>            If not rval ;                Get Next_Mdi_Dialog False to Id#
13770>>>>>>>>>        End
13771>>>>>>>>>>
13771>>>>>>>>>        Function_Return rval
13772>>>>>>>>>    End_Function
13773>>>>>>>>>    
13773>>>>>>>>>    Procedure Notify_Exit_Application
13775>>>>>>>>>        Integer Id#
13775>>>>>>>>>        Get Next_Mdi_Dialog True to Id#
13776>>>>>>>>>        While Id#
13780>>>>>>>>>            Send Notify_Exit_Application to Id#
13781>>>>>>>>>            Get Next_Mdi_Dialog False to Id#
13782>>>>>>>>>        End
13783>>>>>>>>>>
13783>>>>>>>>>    End_Procedure
13784>>>>>>>>>    
13784>>>>>>>>>    Procedure Make_all_ViewMode Integer Mode
13786>>>>>>>>>        Integer Id#
13786>>>>>>>>>        Get Next_Mdi_Dialog True to Id#
13787>>>>>>>>>        While Id#
13791>>>>>>>>>            If (active_State(Id#)) ;                Set View_Mode of Id# to Mode
13794>>>>>>>>>            Get Next_Mdi_Dialog False to Id#
13795>>>>>>>>>        End
13796>>>>>>>>>>
13796>>>>>>>>>    End_Procedure
13797>>>>>>>>>    
13797>>>>>>>>>    Procedure Minimize_all_Windows
13799>>>>>>>>>        Send Make_All_ViewMode VIEWMODE_ICONIZE
13800>>>>>>>>>    End_Procedure
13801>>>>>>>>>    
13801>>>>>>>>>    Procedure Restore_all_Windows
13803>>>>>>>>>        Send Make_All_ViewMode VIEWMODE_NORMAL
13804>>>>>>>>>    End_Procedure
13805>>>>>>>>>    
13805>>>>>>>>>    // The framework has used activate_about for years to activate an about
13805>>>>>>>>>    // dialog. As of 12.1, we have a sub-class for this and providing the
13805>>>>>>>>>    // required message makes things work better. It is expected that a
13805>>>>>>>>>    // developer will augment this in their clientarea to call the about
13805>>>>>>>>>    // object that they created.
13805>>>>>>>>>    Procedure Activate_About
13807>>>>>>>>>    End_Procedure
13808>>>>>>>>>    
13808>>>>>>>>>    
13808>>>>>>>>>End_Class
13809>>>>>>>Use DFADlg.pkg    // df application Dialog
Including file: Dfadlg.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfadlg.pkg)
13809>>>>>>>>>Use LanguageText.pkg
13809>>>>>>>>>Use Windows.pkg
13809>>>>>>>>>Use dfConfrm.pkg
Including file: Dfconfrm.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfconfrm.pkg)
13809>>>>>>>>>>>Use LanguageText.pkg
13809>>>>>>>>>>>Use msgbox.pkg
13809>>>>>>>>>>>
13809>>>>>>>>>>>// General purpose confirm function. Added to all classes
13809>>>>>>>>>>>//
13809>>>>>>>>>>>Function Confirm for cUIObject String item_name Returns Integer
13811>>>>>>>>>>>    Integer rval
13811>>>>>>>>>>>    Move (YesNo_Box(item_name, C_$Confirm, MB_DEFBUTTON1 )) to rval
13812>>>>>>>>>>>    Function_Return (rval<>MBR_YES)
13813>>>>>>>>>>>End_function
13814>>>>>>>>>>>
13814>>>>>>>>>>>Function Save_Confirmation for cUIObject Returns integer
13816>>>>>>>>>>>    Function_return (confirm(self, C_$SaveThisRecord))
13817>>>>>>>>>>>End_function
13818>>>>>>>>>>>
13818>>>>>>>>>>>Function Delete_Confirmation for cUIObject Returns integer
13820>>>>>>>>>>>    Function_return (confirm(self, C_$DeleteThisRecord))
13821>>>>>>>>>>>End_function
13822>>>>>>>>>>>
13822>>>>>>>>>>>Function Line_Save_Confirmation for cUIObject Returns Integer
13824>>>>>>>>>>>    Function_return (confirm(self, C_$SaveThisLine))
13825>>>>>>>>>>>End_function
13826>>>>>>>>>>>
13826>>>>>>>>>>>Function Line_Delete_Confirmation for cUIObject Returns Integer
13828>>>>>>>>>>>    Function_return (confirm(self, C_$DeleteThisLine))
13829>>>>>>>>>>>End_function
13830>>>>>>>>>>>
13830>>>>>>>>>>>Function Data_Loss_Confirmation for cUIObject Returns integer
13832>>>>>>>>>>>    Function_return (confirm(self, C_$AbandonChanges))
13833>>>>>>>>>>>End_function
13834>>>>>>>>>>>
13834>>>>>>>>>>>Function Exit_Loss_Confirmation for cUIObject Returns integer
13836>>>>>>>>>>>    Integer tmp
13836>>>>>>>>>>>    get Should_save_recursive to tmp
13837>>>>>>>>>>>    If (tmp <> 0) ;        Function_Return (confirm(Self, C_$ChangesExistAbandon))
13840>>>>>>>>>>>End_function
13841>>>>>>>>>>>
13841>>>>>>>>>>>Function No_Confirmation for cUIObject Returns integer
13843>>>>>>>>>>>End_function
13844>>>>>>>>>>>
13844>>>>>>>>>>>Function Should_Save for cUIObject returns integer
13846>>>>>>>>>>>end_function
13847>>>>>>>>>>>
13847>>>>>>>>>>>Function Should_Save_Recursive for cUIObject returns integer
13849>>>>>>>>>>>    Integer rVal
13849>>>>>>>>>>>    Get Should_Save to Rval // changes in this object???
13850>>>>>>>>>>>    If (rVal = 0) ;        Broadcast Get Should_Save_Recursive to Rval // check w/ kids
13854>>>>>>>>>>>    Function_return rVal
13855>>>>>>>>>>>End_Function
13856>>>>>>>>>>>
13856>>>>>>>>>>>
13856>>>>>>>>>Use GlobalFunctionsProcedures.pkg
13856>>>>>>>>>Use tWinStructs.pkg
13856>>>>>>>>>Use Dfpanel.pkg
13856>>>>>>>>>
13856>>>>>>>>>
13856>>>>>>>>>// as of 15.0, moved some of dbViews features up to this level. Load/Save Environment showing view name
13856>>>>>>>>>Class AppDialog is a MdiDialog
13857>>>>>>>>>    
13857>>>>>>>>>    Procedure Construct_Object
13859>>>>>>>>>        Forward Send Construct_Object
13861>>>>>>>>>        
13861>>>>>>>>>        // This can be used to stop this view from loading and saving its environment.
13861>>>>>>>>>        Property Boolean pbDisableSaveEnvironment False
13862>>>>>>>>>        
13862>>>>>>>>>        // set true to auto-activate the view. This does not work if the object is deferred.
13862>>>>>>>>>        // this is a design time property which is applied during end_construct_object. This should
13862>>>>>>>>>        Property Boolean pbAutoActivate False
13863>>>>>>>>>        
13863>>>>>>>>>        // used to keep track of window placment when deactivated object is reactivated.
13863>>>>>>>>>        Property tWinWindowPlacement pWindowPlacement
13864>>>>>>>>>    End_Procedure
13865>>>>>>>>>    
13865>>>>>>>>>    Procedure End_Construct_Object
13867>>>>>>>>>        Boolean bAutoActivate
13867>>>>>>>>>        Delegate Send Add_Mdi_Dialog Self
13869>>>>>>>>>        Forward Send End_Construct_Object
13871>>>>>>>>>        // if auto-activate, add this to he the panel's array of objects to be acivated.
13871>>>>>>>>>        Get pbAutoActivate to bAutoActivate
13872>>>>>>>>>        If bAutoActivate Begin
13874>>>>>>>>>            Delegate Send AddAutoActivateView Self
13876>>>>>>>>>        End
13876>>>>>>>>>>
13876>>>>>>>>>    End_Procedure
13877>>>>>>>>>    
13877>>>>>>>>>    Procedure Destroy_Object
13879>>>>>>>>>        Integer obj
13879>>>>>>>>>        Move Self to obj
13880>>>>>>>>>        Delegate Send Remove_Mdi_Dialog obj
13882>>>>>>>>>        Forward Send Destroy_Object
13884>>>>>>>>>    End_Procedure
13885>>>>>>>>>    
13885>>>>>>>>>    // Augmented to save view position
13885>>>>>>>>>    Procedure Notify_Exit_Application
13887>>>>>>>>>        Send Save_Environment
13888>>>>>>>>>    End_Procedure
13889>>>>>>>>>    
13889>>>>>>>>>    Function View_Changed Returns Integer
13891>>>>>>>>>    End_Function
13892>>>>>>>>>    
13892>>>>>>>>>    //
13892>>>>>>>>>    // Augment exit_application_check to see if view is changed. If changed,
13892>>>>>>>>>    // display exit message as required
13892>>>>>>>>>    
13892>>>>>>>>>    Function Verify_Exit_Application Returns Integer
13894>>>>>>>>>        Integer Fail
13894>>>>>>>>>        Get View_Changed to Fail // Ask for changes in Data-sets
13895>>>>>>>>>        If fail ; // ok a change exist...activate changed view.            Get confirm (SFormat(C_$ChangesExistExit, Label(Self)) ) to fail
13898>>>>>>>>>        Function_Return fail
13899>>>>>>>>>    End_Function
13900>>>>>>>>>    
13900>>>>>>>>>    // Activates the view. If view is minimized it restores it first
13900>>>>>>>>>    // works with both popup_state T and F
13900>>>>>>>>>    
13900>>>>>>>>>    Procedure Activate_View Returns Integer
13902>>>>>>>>>        Integer rVal
13902>>>>>>>>>        If ( View_mode(Self)=VIEWMODE_ICONIZE ) ;            Set view_mode to viewmode_normal
13905>>>>>>>>>        If (Popup_state(Self)) ;    // support both popup and            Get Msg_Popup to rVal
13908>>>>>>>>>        Else ;            Get Msg_Activate to rVal
13910>>>>>>>>>        Procedure_Return rVal
13911>>>>>>>>>    End_Procedure
13912>>>>>>>>>    
13912>>>>>>>>>    
13912>>>>>>>>>    // augmented to load last view position
13912>>>>>>>>>    
13912>>>>>>>>>    Procedure Add_Focus Integer hoBase Returns Integer
13914>>>>>>>>>        Integer iRetVal bState
13914>>>>>>>>>        Get Visible_State to bState
13915>>>>>>>>>        Set Visible_State to False
13916>>>>>>>>>        Forward Get Msg_Add_Focus hoBase to iRetVal
13918>>>>>>>>>        If (iRetVal=0) Begin
13920>>>>>>>>>            Send Load_Environment
13921>>>>>>>>>        End
13921>>>>>>>>>>
13921>>>>>>>>>        Set Visible_State to bState
13922>>>>>>>>>        Procedure_Return iRetVal
13923>>>>>>>>>    End_Procedure
13924>>>>>>>>>    
13924>>>>>>>>>    // This is augmented to send save_environment during a view close (was in close_panel)
13924>>>>>>>>>    // we set view_mode to normal if it is zoomed. This is needed to make the MDI stuff work
13924>>>>>>>>>    // properly with the save/load environment. The Saved environment data will make it zoom if needed.
13924>>>>>>>>>    //
13924>>>>>>>>>    Procedure Deactivate Integer eDeactivateScope Returns Integer
13926>>>>>>>>>        Integer eArea iFail
13926>>>>>>>>>        Boolean bPreserveEnvironment
13926>>>>>>>>>        Move (If(num_arguments=0, Area_Type, eDeactivateScope)) to eArea // in case no param is passed
13927>>>>>>>>>        If (eArea<>0) Begin
13929>>>>>>>>>            Forward Get msg_deactivate eArea to iFail
13931>>>>>>>>>        End
13931>>>>>>>>>>
13931>>>>>>>>>        Else Begin
13932>>>>>>>>>            Send Save_Environment
13933>>>>>>>>>            Forward Get msg_deactivate eArea to iFail
13935>>>>>>>>>            
13935>>>>>>>>>            // this works around a problem where maximized MDI views get saved but don't come back
13935>>>>>>>>>            // correctly when loaded again without exiting. It turns out the the MDI client restores
13935>>>>>>>>>            // the view sometimes without telling view_mode. If view_mode is normal, it always works.
13935>>>>>>>>>            // This must happen after the view is deactivated!
13935>>>>>>>>>            
13935>>>>>>>>>            If ghoApplication Begin
13937>>>>>>>>>                Get pbPreserveEnvironment of ghoApplication to bPreserveEnvironment
13938>>>>>>>>>            End
13938>>>>>>>>>>
13938>>>>>>>>>            // do these checks to have as small of an effect as possible.
13938>>>>>>>>>            If (bPreserveEnvironment and iFail=0 and view_mode(Self)=Viewmode_Zoom) Begin
13940>>>>>>>>>                Set View_Mode to Viewmode_Normal
13941>>>>>>>>>            End
13941>>>>>>>>>>
13941>>>>>>>>>        End
13941>>>>>>>>>>
13941>>>>>>>>>        Procedure_Return iFail
13942>>>>>>>>>    End_Procedure
13943>>>>>>>>>    
13943>>>>>>>>>    // Save the window placement information for this to the application object
13943>>>>>>>>>    
13943>>>>>>>>>    Procedure Save_Environment
13945>>>>>>>>>        tWinWindowPlacement WindowPlacement
13945>>>>>>>>>        tWinWindowPlacement WindowPlacement
13945>>>>>>>>>        Boolean bSuccess bCancel
13945>>>>>>>>>        Get pbDisableSaveEnvironment to bCancel
13946>>>>>>>>>        If not bCancel Begin
13948>>>>>>>>>            
13948>>>>>>>>>            // save environment to the object, in case it is reactivated during the same run.
13948>>>>>>>>>            Move (SizeOfType(tWinWindowPlacement)) to WindowPlacement.length
13949>>>>>>>>>            Move (GetWindowPlacement(Window_Handle(Self), addressof(WindowPlacement))) to bSuccess
13950>>>>>>>>>            If bSuccess Begin
13952>>>>>>>>>                // if minimized, assume restored, as we don't want to restart minimized!
13952>>>>>>>>>                If (WindowPlacement.showCmd = SW_SHOWMINIMIZED) Begin
13954>>>>>>>>>                    Move SW_SHOWNORMAL to WindowPlacement.showCmd
13955>>>>>>>>>                End
13955>>>>>>>>>>
13955>>>>>>>>>                Set pWindowPlacement to WindowPlacement
13956>>>>>>>>>            End
13956>>>>>>>>>>
13956>>>>>>>>>            // also save environment to the application object, so it can be used when reloaded
13956>>>>>>>>>            If ghoApplication ;                Send DoSaveEnvironment of ghoApplication Self False
13959>>>>>>>>>        End
13959>>>>>>>>>>
13959>>>>>>>>>    End_Procedure
13960>>>>>>>>>    
13960>>>>>>>>>    // Load the window placement information for this from the application object
13960>>>>>>>>>    
13960>>>>>>>>>    Procedure Load_Environment
13962>>>>>>>>>        tWinWindowPlacement WindowPlacement
13962>>>>>>>>>        tWinWindowPlacement WindowPlacement
13962>>>>>>>>>        Boolean bSuccess bCancel
13962>>>>>>>>>        Get pbDisableSaveEnvironment to bCancel
13963>>>>>>>>>        If not bCancel Begin
13965>>>>>>>>>            // if view has alrady been activated and deactivated use the setting from windowplacement saved in the object
13965>>>>>>>>>            Get pWindowPlacement to WindowPlacement
13966>>>>>>>>>            //  if length is zero, assume it has never been used before (never deactivated).
13966>>>>>>>>>            If (WindowPlacement.length>0) Begin
13968>>>>>>>>>                Move (SetWindowPlacement(Window_Handle(Self), AddressOf(WindowPlacement))) to bSuccess
13969>>>>>>>>>            End
13969>>>>>>>>>>
13969>>>>>>>>>            Else Begin
13970>>>>>>>>>                If ghoApplication ;                    Send DoLoadEnvironment of ghoApplication Self False
13973>>>>>>>>>            End
13973>>>>>>>>>>
13973>>>>>>>>>        End
13973>>>>>>>>>>
13973>>>>>>>>>    End_Procedure
13974>>>>>>>>>    
13974>>>>>>>>>    Procedure Entering_Scope Returns Integer
13976>>>>>>>>>        Integer rVal
13976>>>>>>>>>        Forward Get MSG_Entering_Scope to rVal
13978>>>>>>>>>        If not rVal ;            Send Show_View_Name (Label(Self))
13981>>>>>>>>>    End_Procedure
13982>>>>>>>>>    
13982>>>>>>>>>    Procedure Exiting_Scope Integer whereto Returns Integer
13984>>>>>>>>>        Integer rVal
13984>>>>>>>>>        Forward Get MSG_Exiting_Scope whereto to rVal
13986>>>>>>>>>        If not rVal ;            Send Show_View_Name ''
13989>>>>>>>>>    End_Procedure
13990>>>>>>>>>    
13990>>>>>>>>>    Procedure Show_view_Name String sHelp
13992>>>>>>>>>        Integer rVal Id
13992>>>>>>>>>        Get Statusbar_id to id
13993>>>>>>>>>        If Id ;            Send Show_View_Name to Id sHelp
13996>>>>>>>>>    End_Procedure
13997>>>>>>>>>    
13997>>>>>>>>>    // force object to be modal and then pop it up. Upon complettion restore it to a normal view
13997>>>>>>>>>    Procedure Popup_Modal Returns Integer
13999>>>>>>>>>        
13999>>>>>>>>>        Integer OldBMS OldAPS OldPS OldRS OldSS OldMDIState
13999>>>>>>>>>        Integer OldLoc OldAutoLoc OldKeyPath OldDisableSaveEnv OldMin OldMax
13999>>>>>>>>>        Integer rVal
13999>>>>>>>>>        
13999>>>>>>>>>        // If object is active we can't do anything. -1 means already active
13999>>>>>>>>>        If (Active_State(Self)) ;            Procedure_Return -1
14002>>>>>>>>>        
14002>>>>>>>>>        // Remember all important modal property settings.
14002>>>>>>>>>        Get Block_mouse_State to OldBMS
14003>>>>>>>>>        Get Attach_parent_State to OldAPS
14004>>>>>>>>>        Get Popup_State to OldPS
14005>>>>>>>>>        Get Ring_State to OldRS
14006>>>>>>>>>        Get Scope_State to OldSS
14007>>>>>>>>>        Get MDI_State to OldMDIState
14008>>>>>>>>>        Get Key_Path to OldKeyPath
14009>>>>>>>>>        Get Location to OldLoc
14010>>>>>>>>>        Get Maximize_Icon to OldMax
14011>>>>>>>>>        Get Minimize_Icon to OldMin
14012>>>>>>>>>        Get Auto_Locate_State to OldAutoLoc
14013>>>>>>>>>        Get pbDisableSaveEnvironment to OldDisableSaveEnv
14014>>>>>>>>>        
14014>>>>>>>>>        // set propertie required to make this a modal dialog
14014>>>>>>>>>        Set pbDisableSaveEnvironment to True
14015>>>>>>>>>        Set MDI_State to False
14016>>>>>>>>>        Set Auto_Locate_State to True
14017>>>>>>>>>        Set Key_path to Desktop
14018>>>>>>>>>        Set Block_mouse_state to True
14019>>>>>>>>>        Set Attach_parent_state to False
14020>>>>>>>>>        // we used to set Exit_Application_Local_State to True - as of 19.1 we don't
14020>>>>>>>>>        Set Popup_State to True
14021>>>>>>>>>        Set Ring_State to True
14022>>>>>>>>>        Set Scope_State to True
14023>>>>>>>>>        Set Minimize_Icon to False
14024>>>>>>>>>        Set Maximize_Icon to False
14025>>>>>>>>>        
14025>>>>>>>>>        Get Msg_Popup to rVal
14026>>>>>>>>>        If rval ;            Move -2 to rVal      // did not activate
14029>>>>>>>>>        Else ;            Move StrMark to rVal // StrMark keeps track of UI value
14031>>>>>>>>>        // if 0- a stop_ui, if >0, ret value
14031>>>>>>>>>        // restore all expected properties
14031>>>>>>>>>        Set Auto_Locate_State to OldAutoLoc
14032>>>>>>>>>        Set Location to (hi(OldLoc)) (Low(OldLoc))
14033>>>>>>>>>        Set pbDisableSaveEnvironment to OldDisableSaveEnv
14034>>>>>>>>>        Set MDI_State to OldMDIState
14035>>>>>>>>>        Set Maximize_Icon to OldMax
14036>>>>>>>>>        Set Minimize_Icon to OldMin
14037>>>>>>>>>        Set Block_mouse_State   to OldBMS
14038>>>>>>>>>        Set Attach_parent_State to OldAPS
14039>>>>>>>>>        Set Popup_State         to OldPS
14040>>>>>>>>>        Set Ring_State          to OldRS
14041>>>>>>>>>        Set Scope_State         to OldSS
14042>>>>>>>>>        Procedure_Return rVal
14043>>>>>>>>>        
14043>>>>>>>>>    End_Procedure
14044>>>>>>>>>    
14044>>>>>>>>>End_Class
14045>>>>>>>>>
14045>>>>>>>>>// logically this is required
14045>>>>>>>>>//{ DesignerClass=cDTView }
14045>>>>>>>>>Class View is an AppDialog
14046>>>>>>>>>End_Class
14047>>>>>>>>>
14047>>>>>>>
14047>>>>>>>
14047>>>>>>>Register_Function pbPreserveEnvironment Returns Boolean
14047>>>>>>>Register_Procedure Set phoMainPanel Handle hoMain
14047>>>>>>>Register_Procedure DoSaveEnvironment Handle hoContainer Boolean bProgram
14047>>>>>>>Register_Procedure DoLoadEnvironment Handle hoContainer Boolean bProgram
14047>>>>>>>Register_Procedure Set pbVisible Boolean bVisible
14047>>>>>>>Register_Function  pbVisible Returns Boolean
14047>>>>>>>
14047>>>>>>>
14047>>>>>>>
14047>>>>>>>Class AppPanel is a BasicPanel
14048>>>>>>>    //
14048>>>>>>>    //  Panel defaults. Use windows MDI color
14048>>>>>>>    //
14048>>>>>>>    //
14048>>>>>>>    Procedure Construct_Object
14050>>>>>>>        Forward Send Construct_Object
14052>>>>>>>        
14052>>>>>>>        Property Integer Auto_Activate_State True
14053>>>>>>>        
14053>>>>>>>        // Support status for toolbar and status bar. For now we support
14053>>>>>>>        // 0=Hide, 1=Show,
14053>>>>>>>        //
14053>>>>>>>        Property Integer Private.ToolBar_State  1
14054>>>>>>>        
14054>>>>>>>        Property Integer Private.StatusBar_State  1
14055>>>>>>>        
14055>>>>>>>        Property Handle[] phoAutoActivateViews
14056>>>>>>>        
14056>>>>>>>        Set Scope_State to True
14057>>>>>>>        Set Mdi_State to True
14058>>>>>>>        
14058>>>>>>>        Set Size to 274 479
14059>>>>>>>        Set pbSizeToClientArea  to False
14060>>>>>>>    End_Procedure
14061>>>>>>>    
14061>>>>>>>    Procedure Set Auto_Arrange_Icons_State Integer bState
14063>>>>>>>        Integer hoClient
14063>>>>>>>        Get Client_id to hoClient
14064>>>>>>>        If (hoClient and hoClient<>Self ) ;            Set Auto_Arrange_Icons_State of hoClient to bState
14067>>>>>>>    End_Procedure
14068>>>>>>>    
14068>>>>>>>    Function Auto_Arrange_Icons_State Returns Integer
14070>>>>>>>        Integer hoClient bState
14070>>>>>>>        Get Client_id to hoClient
14071>>>>>>>        If (hoClient and hoClient<>Self ) ;            Get Auto_Arrange_Icons_State of hoClient to bState
14074>>>>>>>        Function_Return bState
14075>>>>>>>    End_Function
14076>>>>>>>    
14076>>>>>>>    Procedure Toggle_Auto_Arrange_Icons
14078>>>>>>>        Set Auto_Arrange_Icons_State ;            to (not(Auto_Arrange_Icons_State(Self)))
14079>>>>>>>    End_Procedure
14080>>>>>>>    
14080>>>>>>>    Procedure Set Client_Scrollbar_State Integer bState
14082>>>>>>>        Integer hoClient
14082>>>>>>>        Get Client_id to hoClient
14083>>>>>>>        If (hoClient and hoClient<>Self ) ;            Set Client_Scrollbar_State of hoClient to bState
14086>>>>>>>    End_Procedure
14087>>>>>>>    
14087>>>>>>>    Function Client_Scrollbar_State Returns Integer
14089>>>>>>>        Integer hoClient bState
14089>>>>>>>        Get Client_id to hoClient
14090>>>>>>>        If (hoClient and hoClient<>Self ) ;            Get Client_Scrollbar_State of hoClient to bState
14093>>>>>>>        Function_Return bState
14094>>>>>>>    End_Function
14095>>>>>>>    
14095>>>>>>>    Procedure Toggle_Client_Scrollbar_State
14097>>>>>>>        Set Client_Scrollbar_State ;            to (not(Client_Scrollbar_State(Self)))
14098>>>>>>>    End_Procedure
14099>>>>>>>    
14099>>>>>>>    Function ToolBar_State Returns Integer
14101>>>>>>>        Function_Return (private.Toolbar_State(Self))
14102>>>>>>>    End_Function
14103>>>>>>>    
14103>>>>>>>    Procedure Set Toolbar_State Integer bState
14105>>>>>>>        Integer hoToolBar
14105>>>>>>>        Handle hoCommandBars
14105>>>>>>>        If (bState<>toolbar_State(Self)) Begin
14107>>>>>>>            Set private.toolbar_State to bState
14108>>>>>>>            
14108>>>>>>>            Get phoCommandBars to hoCommandbars
14109>>>>>>>            If hoCommandbars ;                Procedure_Return
14112>>>>>>>            
14112>>>>>>>            If (Window_Handle(Self)) Begin
14114>>>>>>>                Get toolBar_ID to hoToolBar
14115>>>>>>>                If hoToolBar ;                    Send Activate_Component hoToolBar bState (Focus_Mode(hoToolbar))
14118>>>>>>>            End
14118>>>>>>>>
14118>>>>>>>        End
14118>>>>>>>>
14118>>>>>>>    End_Procedure
14119>>>>>>>    
14119>>>>>>>    Procedure Toggle_Toolbar
14121>>>>>>>        Set Toolbar_State to (not(Toolbar_State(Self)))
14122>>>>>>>    End_Procedure
14123>>>>>>>    
14123>>>>>>>    Function StatusBar_State Returns Integer
14125>>>>>>>        Handle hoCommandBars hoStatusBar
14125>>>>>>>        Boolean bState
14125>>>>>>>        Get phoCommandBars to hoCommandbars
14126>>>>>>>        If hoCommandbars Begin
14128>>>>>>>            Get Statusbar_ID to hoStatusBar
14129>>>>>>>            If hoStatusBar Begin
14131>>>>>>>                Get pbVisible of hoStatusBar to bState
14132>>>>>>>            End
14132>>>>>>>>
14132>>>>>>>        End
14132>>>>>>>>
14132>>>>>>>        Else Begin
14133>>>>>>>            Get private.Statusbar_state to bState
14134>>>>>>>        End
14134>>>>>>>>
14134>>>>>>>        Function_Return bState
14135>>>>>>>    End_Function
14136>>>>>>>    
14136>>>>>>>    Procedure Set Statusbar_State Integer bState
14138>>>>>>>        Handle hoStatusBar hoCommandBars
14138>>>>>>>        If (bState<>Statusbar_State(Self)) Begin
14140>>>>>>>            Set private.Statusbar_State to bState
14141>>>>>>>            Get Statusbar_ID to hoStatusBar
14142>>>>>>>            
14142>>>>>>>            Get phoCommandBars to hoCommandbars
14143>>>>>>>            If hoCommandbars Begin
14145>>>>>>>                If hoStatusBar Begin
14147>>>>>>>                    Set pbVisible of hoStatusBar to bState
14148>>>>>>>                End
14148>>>>>>>>
14148>>>>>>>            End
14148>>>>>>>>
14148>>>>>>>            Else Begin
14149>>>>>>>                If (Window_Handle(Self)) Begin
14151>>>>>>>                    If hoStatusBar ;                        Send Activate_Component hoStatusBar bState  nonfocusable
14154>>>>>>>                End
14154>>>>>>>>
14154>>>>>>>            End
14154>>>>>>>>
14154>>>>>>>        End
14154>>>>>>>>
14154>>>>>>>    End_Procedure
14155>>>>>>>    
14155>>>>>>>    Procedure Toggle_Statusbar
14157>>>>>>>        Set Statusbar_State to (not(statusbar_State(Self)))
14158>>>>>>>    End_Procedure
14159>>>>>>>    
14159>>>>>>>    Procedure AutoSizeLocate
14161>>>>>>>    End_Procedure
14162>>>>>>>    
14162>>>>>>>    Procedure Size_Components
14164>>>>>>>        Integer iToolBar iStatBar //iClient
14164>>>>>>>        Integer iSizeToolBar
14164>>>>>>>        Handle hoCommandbars
14164>>>>>>>        
14164>>>>>>>        Get phoCommandBars to hoCommandbars
14165>>>>>>>        If hoCommandbars ;            Procedure_Return
14168>>>>>>>        
14168>>>>>>>        If not (Window_Handle(Self)) ;            Procedure_Return
14171>>>>>>>        
14171>>>>>>>        Get ToolBar_id   to iToolBar
14172>>>>>>>        Get StatusBar_id to iStatBar
14173>>>>>>>        //Get Client_id    To iClient
14173>>>>>>>        
14173>>>>>>>        If (iToolBar and Window_Handle(iToolbar)) Begin
14175>>>>>>>            //Send AutoSizeLocate To iToolBar
14175>>>>>>>            Get GuiSize of iToolbar to iSizeToolbar
14176>>>>>>>            Set GUIsize of iToolbar to (hi(iSizeToolbar)) (low(iSizeToolbar)) // forces auto resize - don't change size
14177>>>>>>>            //set GUIsize of iToolbar to 28 800 // forces auto resize
14177>>>>>>>        End
14177>>>>>>>>
14177>>>>>>>        
14177>>>>>>>        If (iStatBar and Window_Handle(iStatBar)) Begin
14179>>>>>>>            Send AutoSizeLocate to iStatBar
14180>>>>>>>        End
14180>>>>>>>>
14180>>>>>>>    End_Procedure
14181>>>>>>>    
14181>>>>>>>    Procedure Activate_Component Integer Obj Integer st Integer focusmode
14183>>>>>>>        Integer act
14183>>>>>>>        If not Obj ;            Procedure_Return
14186>>>>>>>        Get Active_State of Obj to act
14187>>>>>>>        If (st and act=0) Begin
14189>>>>>>>            Set Focus_Mode of obj to focusable
14190>>>>>>>            Send Add_focus to obj Self
14191>>>>>>>            Set Focus_Mode of obj to focusmode
14192>>>>>>>        End
14192>>>>>>>>
14192>>>>>>>        Else If (st=0 and act) ;            Send deactivate to obj
14196>>>>>>>    End_Procedure
14197>>>>>>>    
14197>>>>>>>    Procedure Add_Components
14199>>>>>>>        Integer hClient
14199>>>>>>>        Handle hoCommandbars
14199>>>>>>>        Get phoCommandBars to hoCommandbars
14200>>>>>>>        If not hoCommandbars Begin
14202>>>>>>>            Get Client_id to hClient
14203>>>>>>>            If (hClient and hClient<>Self ) ; // this forces the client to start at a                Set mdi_top_margin of hClient to (mdi_top_margin(hClient)) // proper size when maximized w/ no components.
14206>>>>>>>            Send Activate_Component (Toolbar_Id(Self)) ;                (Toolbar_State(Self)) nonfocusable
14207>>>>>>>            Send Activate_Component (Statusbar_Id(Self)) ;                (Statusbar_State(Self)) nonfocusable
14208>>>>>>>            Send Size_Components
14209>>>>>>>        End
14209>>>>>>>>
14209>>>>>>>    End_Procedure
14210>>>>>>>    
14210>>>>>>>    Procedure Activate Returns Integer
14212>>>>>>>        Integer bFail
14212>>>>>>>        Forward Get MSG_activate to bFail
14214>>>>>>>        //If NOT bFail Send Add_Components
14214>>>>>>>        Send Add_Components
14215>>>>>>>        Set Main_Window to Self
14216>>>>>>>        Procedure_Return bFail
14217>>>>>>>    End_Procedure
14218>>>>>>>    
14218>>>>>>>    Procedure Client_Message Integer Msg_Id
14220>>>>>>>        Integer hoClient
14220>>>>>>>        Get Client_id to hoClient
14221>>>>>>>        If (hoClient and hoClient <> Self) ;            Send Msg_id to hoClient
14224>>>>>>>    End_Procedure
14225>>>>>>>    
14225>>>>>>>    Procedure Arrange_Icons
14227>>>>>>>        Send Client_Message Current_Message
14228>>>>>>>    End_Procedure
14229>>>>>>>    
14229>>>>>>>    Procedure Cascade_Windows
14231>>>>>>>        Send Client_Message Current_Message
14232>>>>>>>    End_Procedure
14233>>>>>>>    
14233>>>>>>>    Procedure Tile_Windows_Horizontal
14235>>>>>>>        Send Client_Message Current_Message
14236>>>>>>>    End_Procedure
14237>>>>>>>    
14237>>>>>>>    Procedure Tile_Windows_Vertical
14239>>>>>>>        Send Client_Message Current_Message
14240>>>>>>>    End_Procedure
14241>>>>>>>    
14241>>>>>>>    Procedure Set GuiSize Integer sizy Integer sizx
14243>>>>>>>        Forward Set GUISize to sizy sizx
14245>>>>>>>        If BuildingObjectId ;            Procedure_Return
14248>>>>>>>        Send Size_Components
14249>>>>>>>    End_Procedure
14250>>>>>>>    
14250>>>>>>>    //  Returns false to indicate that this is not a DEO. This is used by
14250>>>>>>>    //  delegation to figure out if you are within a DEO and should therefore
14250>>>>>>>    //  send a DEO message. DEO view clients set this true
14250>>>>>>>    //
14250>>>>>>>    Function Is_Function Integer MsgId Integer ObjId Integer DelegateFg Returns Integer
14252>>>>>>>        Integer DelMode rVal Id
14252>>>>>>>        Move ( If(DelegateFg,Self,ObjId) ) to Id
14253>>>>>>>        Get Delegation_mode of Id to DelMode
14254>>>>>>>        Set Delegation_mode of Id to No_Delegate_or_Error
14255>>>>>>>        Get MsgId of ObjId to rVal
14256>>>>>>>        Set Delegation_mode of Id to DelMode
14257>>>>>>>        Function_Return rVal
14258>>>>>>>    End_Function
14259>>>>>>>    
14259>>>>>>>    // In this class this should return an id or nothing (no delegation).
14259>>>>>>>    // Note, if no context exists return a 0 or ''.
14259>>>>>>>    //
14259>>>>>>>    Function Help_Context Integer Context_Type Returns String
14261>>>>>>>        Integer ID
14261>>>>>>>        String  rVal
14261>>>>>>>        
14261>>>>>>>        If (Context_Type = HELP_CONTEXT_ID) ;            Get Help_ID to rVal
14264>>>>>>>        Else If (Context_Type = HELP_CONTEXT_KEYWORD) ;            Get Help_Keyword to rVal
14268>>>>>>>        Else If (Context_Type = HELP_CONTEXT_ID_OR_KEY) Begin
14271>>>>>>>            Get Help_ID to ID
14272>>>>>>>            If (ID = 0) ;                Get Help_Keyword to rVal
14275>>>>>>>            Move ID to rVal
14276>>>>>>>            If (rval = '') ;                Move 0 to rVal
14279>>>>>>>        End
14279>>>>>>>>
14279>>>>>>>        Else If (Context_Type = HELP_CONTEXT_DATAFILE) ;            Move '' to rVal
14283>>>>>>>        
14283>>>>>>>        Function_Return rVal
14284>>>>>>>    End_Function
14285>>>>>>>    
14285>>>>>>>    // Get context based on eContext. If no content found, Don't delegate with panels --- end the search (added to 11.1. See help_mx.pkg)
14285>>>>>>>    //
14285>>>>>>>    Function HtmlHelpContext Integer eContext String ByRef sContext Returns Integer
14287>>>>>>>        Integer eContextFound
14287>>>>>>>        Get HtmlHelpObjectContext eContext (&sContext) to eContextFound // context for this one object
14288>>>>>>>        Function_Return eContextFound
14289>>>>>>>    End_Function
14290>>>>>>>    
14290>>>>>>>    
14290>>>>>>>    // When verify_exit_appliction is received by default just
14290>>>>>>>    // send this message to the Mdi-client Id.
14290>>>>>>>    //
14290>>>>>>>    Function Verify_Exit_Application Returns Integer
14292>>>>>>>        Integer Id rVal
14292>>>>>>>        Get Client_Id to id
14293>>>>>>>        If (Id and Id<>Self) ;            Get Verify_Exit_application of Id to rVal
14296>>>>>>>        Function_Return Rval
14297>>>>>>>    End_Function
14298>>>>>>>    
14298>>>>>>>    // When exit notifiction is received by default just
14298>>>>>>>    // send this message to the Mdi-client Id.
14298>>>>>>>    //
14298>>>>>>>    Procedure Notify_Exit_Application
14300>>>>>>>        Send Client_Message Current_Message
14301>>>>>>>        
14301>>>>>>>        Forward Send Notify_Exit_Application
14303>>>>>>>    End_Procedure
14304>>>>>>>    
14304>>>>>>>    Procedure Minimize_all_Windows
14306>>>>>>>        Send Client_Message Current_Message
14307>>>>>>>    End_Procedure
14308>>>>>>>    
14308>>>>>>>    Procedure Restore_all_Windows
14310>>>>>>>        Send Client_Message Current_Message
14311>>>>>>>    End_Procedure
14312>>>>>>>    
14312>>>>>>>    // augmented to  activate if required
14312>>>>>>>    //
14312>>>>>>>    Procedure End_Construct_Object
14314>>>>>>>        Forward Send End_Construct_object
14316>>>>>>>        If (Auto_activate_state(Self)) ;            Send Activate
14319>>>>>>>    End_Procedure
14320>>>>>>>    
14320>>>>>>>    Procedure Add_Focus Handle hoParent Returns Integer
14322>>>>>>>        Integer iError i iViews
14322>>>>>>>        Handle[] hoAutoActivateViews
14323>>>>>>>        Forward Get msg_Add_Focus hoParent to iError
14325>>>>>>>        If (iError=0) Begin
14327>>>>>>>            Get phoAutoActivateViews to hoAutoActivateViews
14328>>>>>>>            Move (SizeOfArray(hoAutoActivateViews)) to iViews
14329>>>>>>>            For i from 0 to (iViews-1)
14335>>>>>>>>
14335>>>>>>>                Send Activate_View of hoAutoActivateViews[i]
14336>>>>>>>            Loop
14337>>>>>>>>
14337>>>>>>>        End
14337>>>>>>>>
14337>>>>>>>    End_Procedure
14338>>>>>>>    
14338>>>>>>>    // adds a view to the array of views to be autoactivated
14338>>>>>>>    
14338>>>>>>>    Procedure AddAutoActivateView Handle hoView
14340>>>>>>>        Handle[] hoAutoActivateViews
14341>>>>>>>        Get phoAutoActivateViews to hoAutoActivateViews
14342>>>>>>>        Move hoView to hoAutoActivateViews[SizeOfArray(hoAutoActivateViews)]
14343>>>>>>>        Set phoAutoActivateViews to hoAutoActivateViews
14344>>>>>>>    End_Procedure
14345>>>>>>>    
14345>>>>>>>End_Class
14346>>>>>>>
14346>>>>>>>
14346>>>>>>>Use DFCursor.pkg
Including file: Dfcursor.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfcursor.pkg)
14346>>>>>>>>>//  create a desktop object named Cursor_control that understands
14346>>>>>>>>>//   Send Cursor_Wait to (cursor_Control(self))
14346>>>>>>>>>//            creates hourclass cursor
14346>>>>>>>>>//   Send Cursor_ready to (cursor_Control(self))
14346>>>>>>>>>//            restores regular cursor
14346>>>>>>>>>//
14346>>>>>>>>>Use Cursor.pkg
Including file: Cursor.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Cursor.pkg)
14346>>>>>>>>>>>Use Windows.pkg
14346>>>>>>>>>>>Use WinUser.pkg
14346>>>>>>>>>>>
14346>>>>>>>>>>>// Standard Cursor IDs
14346>>>>>>>>>>>
14346>>>>>>>>>>>
14346>>>>>>>>>>>
14346>>>>>>>>>>>
14346>>>>>>>>>>>
14346>>>>>>>>>>>Class CursorShape is a DFBaseToolPanel //BasicPanel
14347>>>>>>>>>>>    
14347>>>>>>>>>>>    Procedure Construct_Object
14349>>>>>>>>>>>        Forward Send Construct_Object
14351>>>>>>>>>>>        
14351>>>>>>>>>>>        Property Handle ClassCursorHandle 0
14352>>>>>>>>>>>        Set Visible_State to False
14353>>>>>>>>>>>        Set Size to 1 1
14354>>>>>>>>>>>    End_Procedure
14355>>>>>>>>>>>    
14355>>>>>>>>>>>    Procedure Set Cursor Integer CursorType
14357>>>>>>>>>>>        Handle CursorID hWnd
14357>>>>>>>>>>>        Longptr retval lpCursorType
14357>>>>>>>>>>>        Get Window_Handle to hWnd
14358>>>>>>>>>>>        If (CursorType = 0) Begin
14360>>>>>>>>>>>            Send Release_Mouse_Capture
14361>>>>>>>>>>>            Move (SetClassLongPtr(hWnd, GCL_HCURSOR, ClassCursorHandle(Self))) to retval
14362>>>>>>>>>>>            Set ClassCursorHandle to 0
14363>>>>>>>>>>>            Send Page_Object False
14364>>>>>>>>>>>        End
14364>>>>>>>>>>>>
14364>>>>>>>>>>>        Else Begin
14365>>>>>>>>>>>            Send Page_Object True
14366>>>>>>>>>>>            Get Window_Handle to hWnd
14367>>>>>>>>>>>            If (ClassCursorHandle(Self) = 0) ;                Set ClassCursorHandle to (GetClassLongPtr(hWnd, GCL_HCURSOR))
14370>>>>>>>>>>>            
14370>>>>>>>>>>>            Move CursorType to lpCursorType    // Move to Longptr type to avoid conversion from integer to pointer in the next line
14371>>>>>>>>>>>            Move (LoadCursorW(0,lpCursorType)) to CursorID
14372>>>>>>>>>>>            
14372>>>>>>>>>>>            Move (SetClassLongPtr(hWnd, GCL_HCURSOR, CursorID )) to retval
14373>>>>>>>>>>>            Move (SetCursor(CursorID)) to retval
14374>>>>>>>>>>>            Send Set_Mouse_Capture
14375>>>>>>>>>>>        End
14375>>>>>>>>>>>>
14375>>>>>>>>>>>    End_Procedure
14376>>>>>>>>>>>    
14376>>>>>>>>>>>    Procedure Mouse_Up
14378>>>>>>>>>>>        Handle retval
14378>>>>>>>>>>>        Send Set_Mouse_Capture
14379>>>>>>>>>>>        Move (SetCursor(GetClassLongPtr(Window_Handle(Self), GCL_HCURSOR))) to retval
14380>>>>>>>>>>>    End_Procedure
14381>>>>>>>>>>>    
14381>>>>>>>>>>>    Procedure Cursor_Wait
14383>>>>>>>>>>>        Set cursor to IDC_WAIT
14384>>>>>>>>>>>    End_Procedure
14385>>>>>>>>>>>    
14385>>>>>>>>>>>    Procedure Cursor_Ready
14387>>>>>>>>>>>        Set cursor to 0
14388>>>>>>>>>>>    End_Procedure
14389>>>>>>>>>>>    
14389>>>>>>>>>>>    
14389>>>>>>>>>>>End_Class
14390>>>>>>>>>
14390>>>>>>>>>Object Cursor_Control is a CursorShape
14392>>>>>>>>>End_Object
14393>>>>>>>>>
14393>>>>>>>
14393>>>>>>>//  Main DEO High level main Panel Class
14393>>>>>>>//
14393>>>>>>>Class Panel is a AppPanel
14394>>>>>>>    
14394>>>>>>>    Procedure Construct_Object
14396>>>>>>>        String St
14396>>>>>>>        Integer iVal
14396>>>>>>>        DWord dwState
14396>>>>>>>        Forward Send Construct_Object
14398>>>>>>>        
14398>>>>>>>        // defaults to hourglass...end_construct will remove
14398>>>>>>>        Send Cursor_wait to (Cursor_Control(Self)) // hourglass
14399>>>>>>>        
14399>>>>>>>        Set private_pbEnvironmentProgram to True
14400>>>>>>>    End_Procedure
14401>>>>>>>    
14401>>>>>>>    
14401>>>>>>>    // This sends the message register_active_view to all child objects.
14401>>>>>>>    // It passes the object ID of the object that is requesting this
14401>>>>>>>    // information. The flag BCast_Focus determines if this should
14401>>>>>>>    // broadcast or broadcast_focus
14401>>>>>>>    //
14401>>>>>>>    Procedure Notify_All_Views Integer Msg Integer obj Integer Bcast_Focus
14403>>>>>>>        Integer clobj
14403>>>>>>>        Get Client_ID to clObj
14404>>>>>>>        If (ClObj = 0) ;            Move Self to ClObj
14407>>>>>>>        If BCast_Focus ;            Broadcast_Focus Send Msg to Clobj obj
14411>>>>>>>        Else ;            Broadcast       Send Msg to Clobj obj
14414>>>>>>>    End_Procedure
14415>>>>>>>    
14415>>>>>>>
14415>>>>>>>    
14415>>>>>>>    // augmented to remove hourglass
14415>>>>>>>    //
14415>>>>>>>    Procedure End_Construct_Object
14417>>>>>>>        // if application object exists, we need to tell that object that we are the main panel
14417>>>>>>>        If ghoApplication ;            Set phoMainPanel of ghoApplication to Self
14420>>>>>>>        Forward Send End_Construct_object
14422>>>>>>>        Send Cursor_ready to (Cursor_Control(Self)) // restore
14423>>>>>>>    End_Procedure
14424>>>>>>>    
14424>>>>>>>    Procedure Page Integer iState
14426>>>>>>>        Forward Send Page iState
14428>>>>>>>        If (iState =1) Begin
14430>>>>>>>            Send Load_Environment
14431>>>>>>>        End
14431>>>>>>>>
14431>>>>>>>    End_Procedure
14432>>>>>>>    
14432>>>>>>>End_Class
14433>>>>>>>
14433>>>>>>>//  Main DEO High level main MDI Client Class
14433>>>>>>>//
14433>>>>>>>//  Currently there is nothing special about this class but it was
14433>>>>>>>//  created because it is logically correct. Extensions may go here in
14433>>>>>>>//  the futire
14433>>>>>>>Class ClientArea is a AppClientArea
14434>>>>>>>End_Class
14435>>>>>>>
14435>>>>>Use cCJCommandBarSystem.pkg
Including file: cCJCommandBarSystem.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJCommandBarSystem.pkg)
14435>>>>>>>Use Windows.pkg
14435>>>>>>>Use cRegistry.pkg
14435>>>>>>>Use cCJCommandBars.pkg // loads CodeJock class
Including file: cCJCommandBars.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJCommandBars.pkg)
14435>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v22.0.0\Bin\Codejock.CommandBars.Unicode.x64.v22.0.0.ocx
14435>>>>>>>>>Use FlexCom20.pkg
Including file: FlexCOM20.pkg    (C:\Program Files\DataFlex 24.0\Pkg\FlexCOM20.pkg)
14435>>>>>>>>>>>// Full Flexcom support for automation (cComAutomationObject),
14435>>>>>>>>>>>// activeX (cComActiveXControl and document objects (cComDocumentObject)
14435>>>>>>>>>>>Use FlexCOM20_Base.pkg // defines basic flexcom symbols and class cComAutomationObject
Including file: FlexCOM20_Base.pkg    (C:\Program Files\DataFlex 24.0\Pkg\FlexCOM20_Base.pkg)
14435>>>>>>>>>>>>>// Flexcom support for automation (cComAutomationObject).
14435>>>>>>>>>>>>>// If you want activeX and document objects use FlexCom20.pkg
14435>>>>>>>>>>>>>Use VdfBase.pkg
14435>>>>>>>>>>>>>Use ComTypes.pkg
Including file: ComTypes.pkg    (C:\Program Files\DataFlex 24.0\Pkg\ComTypes.pkg)
14435>>>>>>>>>>>>>>>Use Variant.pkg
14435>>>>>>>>>>>>>>>
14435>>>>>>>>>>>>>>>
14435>>>>>>>>>>>>>
14435>>>>>>>>>>>>>
14435>>>>>>>>>>>>>
14435>>>>>>>>>>>>>//Enumerations for the peAutoCreate property
14435>>>>>>>>>>>>>//acNoAutoCreate - Do not automatically instantiate the COM object upon VDF object creation.
14435>>>>>>>>>>>>>//You must manually instantiate the COM object using CreateComObject. This is the default
14435>>>>>>>>>>>>>//for cComAutomation.
14435>>>>>>>>>>>>>Define acNoAutoCreate for 0
14435>>>>>>>>>>>>>//acAutoCreate - Automatically instantiate the COM object upon VDF object creation.
14435>>>>>>>>>>>>>//You won't need to manually instantiate the COM object. This is the default
14435>>>>>>>>>>>>>//for cComActiveXControl
14435>>>>>>>>>>>>>Define acAutoCreate for 1
14435>>>>>>>>>>>>>//acDeferredAutoCreate - Automatically instantiate the COM object during Page_Object,
14435>>>>>>>>>>>>>//and automatically destroy the COM object during Page_Delete. Use this setting only
14435>>>>>>>>>>>>>//if acAutoCreate causes problems.
14435>>>>>>>>>>>>>Define acDeferredAutoCreate for 2
14435>>>>>>>>>>>>>
14435>>>>>>>>>>>>>Class cComAutomationObject is a DFComAutomationObject
14436>>>>>>>>>>>>>    Procedure Construct_Object
14438>>>>>>>>>>>>>        Forward Send Construct_Object
14440>>>>>>>>>>>>>        Send RegisterComEvents
14441>>>>>>>>>>>>>    End_Procedure
14442>>>>>>>>>>>>>    
14442>>>>>>>>>>>>>    // It is expected that the Com class will augment this with useful event definitions
14442>>>>>>>>>>>>>    Procedure RegisterComEvents
14444>>>>>>>>>>>>>    End_Procedure
14445>>>>>>>>>>>>>    
14445>>>>>>>>>>>>>    // Attach the DF object to com automation object via progId.
14445>>>>>>>>>>>>>    // returns: Boolean bSuccess if Ok, If not ok, pcComObject is set to null
14445>>>>>>>>>>>>>    Function AttachActiveObject Returns Boolean
14447>>>>>>>>>>>>>        String sProgId
14447>>>>>>>>>>>>>        Variant vComObject
14447>>>>>>>>>>>>>        Boolean bSuccess
14447>>>>>>>>>>>>>        Get psProgID to sProgId
14448>>>>>>>>>>>>>        Get ComActiveObject sProgId to vComObject
14449>>>>>>>>>>>>>        Set pvComObject to vComObject
14450>>>>>>>>>>>>>        Move (not(IsNullComObject(vComObject))) to bSuccess // success of variant is not null
14451>>>>>>>>>>>>>        Function_Return bSuccess
14452>>>>>>>>>>>>>    End_Function
14453>>>>>>>>>>>>>    
14453>>>>>>>>>>>>>    // returns true if the control is created.
14453>>>>>>>>>>>>>    Function IsComObjectCreated Returns Boolean
14455>>>>>>>>>>>>>        Variant vComObject
14455>>>>>>>>>>>>>        Get pvComObject to vComObject
14456>>>>>>>>>>>>>        Function_Return (not(IsNullComObject(vComObject)))
14457>>>>>>>>>>>>>    End_Function
14458>>>>>>>>>>>>>    
14458>>>>>>>>>>>>>End_Class
14459>>>>>>>>>>>>>
14459>>>>>>>>>>>>>
14459>>>>>>>>>>>
14459>>>>>>>>>>>Use Windows.pkg
14459>>>>>>>>>>>
14459>>>>>>>>>>>Class cComDocumentObject is a DFComDocumentObject
14460>>>>>>>>>>>
14460>>>>>>>>>>>
14460>>>>>>>>>>>    Procedure Construct_Object
14462>>>>>>>>>>>        Forward Send Construct_Object
14464>>>>>>>>>>>        Send RegisterComEvents
14465>>>>>>>>>>>        Send Define_Standard_Object_Mixin
14466>>>>>>>>>>>        Send Define_Shadow_Mixin
14467>>>>>>>>>>>    End_Procedure
14468>>>>>>>>>>>
14468>>>>>>>>>>>    Import_Class_Protocol Standard_Object_Mixin
14469>>>>>>>>>>>    Import_Class_Protocol Shadow_Mixin
14470>>>>>>>>>>>
14470>>>>>>>>>>>    
14470>>>>>>>>>>>    // It is expected that the Com class will augment this with useful event definitions
14470>>>>>>>>>>>    Procedure RegisterComEvents
14472>>>>>>>>>>>    End_Procedure
14473>>>>>>>>>>>    
14473>>>>>>>>>>>    // returns true if the control is created.
14473>>>>>>>>>>>    Function IsComObjectCreated Returns Boolean
14475>>>>>>>>>>>        Variant vComObject
14475>>>>>>>>>>>        Get pvComObject to vComObject
14476>>>>>>>>>>>        Function_Return (not(IsNullComObject(vComObject)))
14477>>>>>>>>>>>    End_Function
14478>>>>>>>>>>>
14478>>>>>>>>>>>
14478>>>>>>>>>>>End_Class
14479>>>>>>>>>>>
14479>>>>>>>>>>>Class cComActiveXControl is a DFComActiveXControl
14480>>>>>>>>>>>
14480>>>>>>>>>>>    Procedure Construct_Object
14482>>>>>>>>>>>        Forward Send Construct_Object
14484>>>>>>>>>>>        Send RegisterComEvents
14485>>>>>>>>>>>
14485>>>>>>>>>>>
14485>>>>>>>>>>>        Send Define_Standard_Object_Mixin
14486>>>>>>>>>>>        Send Define_Single_Item_Navigate_Mixin
14487>>>>>>>>>>>        Send Define_Dflabel_Mixin
14488>>>>>>>>>>>
14488>>>>>>>>>>>        // internal: set true object is notified that the OCX value has changed.
14488>>>>>>>>>>>        Property Boolean pbPrivateControlChanging False
14489>>>>>>>>>>>        // Class sets this true when making a local (externally triggered) change. This is
14489>>>>>>>>>>>        // set when a Set Value change is made to prevent recursion
14489>>>>>>>>>>>        Property Boolean pbPrivateControlRefresh False
14490>>>>>>>>>>>        
14490>>>>>>>>>>>        // added to eumlate a single item form support
14490>>>>>>>>>>>        Property Boolean pbPrivateItem_Changed_State False
14491>>>>>>>>>>>        
14491>>>>>>>>>>>        // This keeps track of value, even when control is not created
14491>>>>>>>>>>>        Property String psPrivateValue ''
14492>>>>>>>>>>>        
14492>>>>>>>>>>>        // If set true, then the control will attempt to bind the value property in the object to the
14492>>>>>>>>>>>        // comValue in the control. It will try to keep these values in synch at all times. This allows a
14492>>>>>>>>>>>        // control to be used as a Form style value control. the default is true. Even when true if the
14492>>>>>>>>>>>        // get/set ComValue methods are not set up to do anything, this will do nothing.
14492>>>>>>>>>>>        Property Boolean pbBindValue True
14493>>>>>>>>>>>        
14493>>>>>>>>>>>    End_Procedure
14494>>>>>>>>>>>    
14494>>>>>>>>>>>    // It is expected that the Com class will augment this with useful event definitions
14494>>>>>>>>>>>    Procedure RegisterComEvents
14496>>>>>>>>>>>    End_Procedure
14497>>>>>>>>>>>
14497>>>>>>>>>>>    
14497>>>>>>>>>>>    // returns true if the control is created.
14497>>>>>>>>>>>    Function IsComObjectCreated Returns Boolean
14499>>>>>>>>>>>        Variant vComObject
14499>>>>>>>>>>>        Get pvComObject to vComObject
14500>>>>>>>>>>>        Function_Return (not(IsNullComObject(vComObject)))
14501>>>>>>>>>>>    End_Function
14502>>>>>>>>>>>    
14502>>>>>>>>>>>
14502>>>>>>>>>>>    Import_Class_Protocol Standard_Object_Mixin
14503>>>>>>>>>>>    Import_Class_Protocol Single_Item_Navigate_Mixin
14504>>>>>>>>>>>    Import_Class_Protocol Dflabel_Mixin
14505>>>>>>>>>>>
14505>>>>>>>>>>>    // added to eumlate a single item form support
14505>>>>>>>>>>>    Function Item_Count Returns Integer
14507>>>>>>>>>>>        Function_Return 1
14508>>>>>>>>>>>    End_Function
14509>>>>>>>>>>>    
14509>>>>>>>>>>>    // added to eumlate a single item form support
14509>>>>>>>>>>>    Procedure Set Item_Changed_State Integer iItem Integer iState
14511>>>>>>>>>>>        Set pbPrivateItem_changed_state to iState
14512>>>>>>>>>>>        If (iState and changed_state(Self)=False) ;            Set changed_state to True
14515>>>>>>>>>>>    End_Procedure
14516>>>>>>>>>>>    
14516>>>>>>>>>>>    Function Item_Changed_State Integer iItem Returns Integer
14518>>>>>>>>>>>        Function_Return (pbPrivateItem_changed_state(Self))
14519>>>>>>>>>>>    End_Function
14520>>>>>>>>>>>    
14520>>>>>>>>>>>    
14520>>>>>>>>>>>    // augment to set the label's appearance
14520>>>>>>>>>>>    Procedure Shadow_Display
14522>>>>>>>>>>>        Forward Send Shadow_display
14524>>>>>>>>>>>        Send Label_Shadow_Display
14525>>>>>>>>>>>    End_Procedure
14526>>>>>>>>>>>    
14526>>>>>>>>>>>    // Created to simulate get/Set value.
14526>>>>>>>>>>>    Procedure Set Value Integer iItem String sVal
14528>>>>>>>>>>>        If not (pbPrivateControlChanging(Self)) ;            Send OnRefreshControl sVal
14531>>>>>>>>>>>        Set psPrivateValue to sVal
14532>>>>>>>>>>>        Send OnChange
14533>>>>>>>>>>>        //Set changed_state to True
14533>>>>>>>>>>>        Set item_changed_state 0 to True
14534>>>>>>>>>>>    End_Procedure
14535>>>>>>>>>>>    
14535>>>>>>>>>>>    Function Value Integer iItem Returns String
14537>>>>>>>>>>>        Function_Return (psPrivateValue(Self))
14538>>>>>>>>>>>        //function_return (Controlvalue(self))
14538>>>>>>>>>>>    End_Function
14539>>>>>>>>>>>    
14539>>>>>>>>>>>    Procedure OnChange
14541>>>>>>>>>>>    End_Procedure
14542>>>>>>>>>>>    
14542>>>>>>>>>>>    
14542>>>>>>>>>>>    // It is expected that the sub-class will provide functionality
14542>>>>>>>>>>>    // for these messages. This gets and sets the value of the actual
14542>>>>>>>>>>>    // window control. These should only be used to synchronize the window
14542>>>>>>>>>>>    // control and the DF side. Do not use for any other purpose.
14542>>>>>>>>>>>    Procedure Set ControlValue String sVal
14544>>>>>>>>>>>    End_Procedure
14545>>>>>>>>>>>    
14545>>>>>>>>>>>    Function ControlValue Returns String
14547>>>>>>>>>>>    End_Function
14548>>>>>>>>>>>    
14548>>>>>>>>>>>    Procedure OnCreate
14550>>>>>>>>>>>        // if we are binding value to comValue, do so upon creation
14550>>>>>>>>>>>        If (pbBindValue(Self)) ;            Set ControlValue to (Value(Self))
14553>>>>>>>>>>>        Forward Send OnCreate
14555>>>>>>>>>>>    End_Procedure
14556>>>>>>>>>>>    
14556>>>>>>>>>>>    // Notification that the control is about to be activated in place. The COM component is
14556>>>>>>>>>>>    // created but OnCreate is not yet fired (this happens after the InPlaceActivate).
14556>>>>>>>>>>>    Procedure OnBeforeInPlaceActivate
14558>>>>>>>>>>>        Forward Send OnBeforeInPlaceActivate
14560>>>>>>>>>>>    End_Procedure
14561>>>>>>>>>>>    
14561>>>>>>>>>>>    // Notification that the control's value has been changed
14561>>>>>>>>>>>    // externally by the program (via set value). Use to synchronize
14561>>>>>>>>>>>    // OCX control value.
14561>>>>>>>>>>>    Procedure OnRefreshControl String sVal
14563>>>>>>>>>>>        Boolean bOld
14563>>>>>>>>>>>        If (pbBindValue(Self) and pbPrivateControlChanging(Self)=0 and IsComObjectCreated(Self)) Begin
14565>>>>>>>>>>>            Get pbPrivateControlRefresh to bOld
14566>>>>>>>>>>>            Set pbPrivateControlRefresh to True
14567>>>>>>>>>>>            Set ControlValue to sval
14568>>>>>>>>>>>            Set pbPrivateControlRefresh to bOld
14569>>>>>>>>>>>        End
14569>>>>>>>>>>>>
14569>>>>>>>>>>>    End_Procedure
14570>>>>>>>>>>>    
14570>>>>>>>>>>>    // notification that the control has changed its value. Used to
14570>>>>>>>>>>>    // synchronize the object with the change.
14570>>>>>>>>>>>    Procedure OnControlValueChanged
14572>>>>>>>>>>>        String sVal
14572>>>>>>>>>>>        Boolean bOld
14572>>>>>>>>>>>        If (pbBindValue(Self) and pbPrivateControlRefresh(Self)=0) Begin
14574>>>>>>>>>>>            Get pbPrivateControlChanging to bOld
14575>>>>>>>>>>>            Set pbPrivateControlChanging to True
14576>>>>>>>>>>>            Get ControlValue to sVal
14577>>>>>>>>>>>            Set Value to sVal
14578>>>>>>>>>>>            Set Item_Changed_State 0 to True
14579>>>>>>>>>>>            Set pbPrivateControlChanging to bOld
14580>>>>>>>>>>>        End
14580>>>>>>>>>>>>
14580>>>>>>>>>>>    End_Procedure
14581>>>>>>>>>>>    
14581>>>>>>>>>>>    Procedure Delete_Data
14583>>>>>>>>>>>        Forward Send Delete_Data
14585>>>>>>>>>>>        Set Value to ''
14586>>>>>>>>>>>        Set Changed_state to False
14587>>>>>>>>>>>        Set Item_changed_state 0 to False
14588>>>>>>>>>>>    End_Procedure
14589>>>>>>>>>>>
14589>>>>>>>>>>>
14589>>>>>>>>>>>End_Class
14590>>>>>>>>>>>
14590>>>>>>>>>>>
14590>>>>>>>>>
14590>>>>>>>>>// Changes to Imported package
14590>>>>>>>>>//     OLEXTPxx to XTPxx
14590>>>>>>>>>//     OLExtpxx to xtpxx
14590>>>>>>>>>//     OLESTDxxx and OLEXPxxxx to STD/XP
14590>>>>>>>>>//     OLEOLE to OLE
14590>>>>>>>>>//     OLESBPS to SBPS
14590>>>>>>>>>//     OLETPM to TPM
14590>>>>>>>>>//     cCom classes to cCJ
14590>>>>>>>>>//     cCJAutomationObject back to cComAutomationObject
14590>>>>>>>>>//     cCJActiveXControl back to cComActiveXControl
14590>>>>>>>>>//     cCJTabToolBar to cCJComTabToolBar
14590>>>>>>>>>//     cCJTabControlItem to cCJComTabControlItem
14590>>>>>>>>>//     cCJStatusBar to cCJComStatusBar
14590>>>>>>>>>//     cCJStatusBarPane to cCJComStatusBarPane
14590>>>>>>>>>//     cCJMenuBar to cCJComMenuBar
14590>>>>>>>>>//     remove OnComUpdate from cCJCommandBars
14590>>>>>>>>>//     Use statements as noted below (classes moved to these files)
14590>>>>>>>>>//     Set classlibrary of all cComAutomation objects to Windows (for class doc)
14590>>>>>>>>>
14590>>>>>>>>>// These have been extracted from this class and moved into seperate packages
14590>>>>>>>>>// because other Codejock classes use these.
14590>>>>>>>>>Use cCJColorManager.pkg     // cCJColorManager
Including file: cCJColorManager.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJColorManager.pkg)
14590>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
14590>>>>>>>>>>>Use FlexCom20.pkg
14590>>>>>>>>>>>
14590>>>>>>>>>>>Define XTPColorManagerColor for Integer
14590>>>>>>>>>>>    Define STDCOLOR_BACKGROUND for 1
14590>>>>>>>>>>>    Define STDCOLOR_ACTIVECAPTION for 2
14590>>>>>>>>>>>    Define STDCOLOR_INACTIVECAPTION for 3
14590>>>>>>>>>>>    Define STDCOLOR_MENU for 4
14590>>>>>>>>>>>    Define STDCOLOR_WINDOW for 5
14590>>>>>>>>>>>    Define STDCOLOR_WINDOWFRAME for 6
14590>>>>>>>>>>>    Define STDCOLOR_MENUTEXT for 7
14590>>>>>>>>>>>    Define STDCOLOR_WINDOWTEXT for 8
14590>>>>>>>>>>>    Define STDCOLOR_CAPTIONTEXT for 9
14590>>>>>>>>>>>    Define STDCOLOR_ACTIVEBORDER for 10
14590>>>>>>>>>>>    Define STDCOLOR_INACTIVEBORDER for 11
14590>>>>>>>>>>>    Define STDCOLOR_APPWORKSPACE for 12
14590>>>>>>>>>>>    Define STDCOLOR_HIGHLIGHT for 13
14590>>>>>>>>>>>    Define STDCOLOR_HIGHLIGHTTEXT for 14
14590>>>>>>>>>>>    Define STDCOLOR_BTNFACE for 15
14590>>>>>>>>>>>    Define STDCOLOR_BTNSHADOW for 16
14590>>>>>>>>>>>    Define STDCOLOR_GRAYTEXT for 17
14590>>>>>>>>>>>    Define STDCOLOR_BTNTEXT for 18
14590>>>>>>>>>>>    Define STDCOLOR_INACTIVECAPTIONTEXT for 19
14590>>>>>>>>>>>    Define STDCOLOR_BTNHIGHLIGHT for 20
14590>>>>>>>>>>>    Define STDCOLOR_3DDKSHADOW for 21
14590>>>>>>>>>>>    Define STDCOLOR_3DLIGHT for 22
14590>>>>>>>>>>>    Define STDCOLOR_INFOTEXT for 23
14590>>>>>>>>>>>    Define STDCOLOR_INFOBK for 24
14590>>>>>>>>>>>    Define STDCOLOR_HOTLIGHT for 26
14590>>>>>>>>>>>    Define STDCOLOR_GRADIENTACTIVECAPTION for 27
14590>>>>>>>>>>>    Define STDCOLOR_GRADIENTINACTIVECAPTION for 28
14590>>>>>>>>>>>    Define XPCOLOR_TOOLBAR_FACE for 30
14590>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT for 31
14590>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_BORDER for 32
14590>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_PUSHED for 33
14590>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_CHECKED for 36
14590>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_CHECKED_BORDER for 37
14590>>>>>>>>>>>    Define XPCOLOR_ICONSHADDOW for 34
14590>>>>>>>>>>>    Define XPCOLOR_GRAYTEXT for 35
14590>>>>>>>>>>>    Define XPCOLOR_TOOLBAR_GRIPPER for 38
14590>>>>>>>>>>>    Define XPCOLOR_SEPARATOR for 39
14590>>>>>>>>>>>    Define XPCOLOR_DISABLED for 40
14590>>>>>>>>>>>    Define XPCOLOR_MENUBAR_FACE for 41
14590>>>>>>>>>>>    Define XPCOLOR_MENUBAR_EXPANDED for 42
14590>>>>>>>>>>>    Define XPCOLOR_MENUBAR_BORDER for 43
14590>>>>>>>>>>>    Define XPCOLOR_MENUBAR_TEXT for 44
14590>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_TEXT for 45
14590>>>>>>>>>>>    Define XPCOLOR_TOOLBAR_TEXT for 46
14590>>>>>>>>>>>    Define XPCOLOR_PUSHED_TEXT for 47
14590>>>>>>>>>>>    Define XPCOLOR_TAB_INACTIVE_BACK for 48
14590>>>>>>>>>>>    Define XPCOLOR_TAB_INACTIVE_TEXT for 49
14590>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_PUSHED_BORDER for 50
14590>>>>>>>>>>>    Define XPCOLOR_3DFACE for 51
14590>>>>>>>>>>>    Define XPCOLOR_3DSHADOW for 52
14590>>>>>>>>>>>    Define XPCOLOR_FRAME for 54
14590>>>>>>>>>>>    Define XPCOLOR_SPLITTER_FACE for 55
14590>>>>>>>>>>>    Define XPCOLOR_LABEL for 56
14590>>>>>>>>>>>    Define XPCOLOR_STATICFRAME for 57
14590>>>>>>>>>>>
14590>>>>>>>>>>>Define XTPCurrentSystemTheme for Integer
14590>>>>>>>>>>>    // No known theme in use
14590>>>>>>>>>>>    Define xtpSystemThemeUnknown for 0
14590>>>>>>>>>>>    // Blue theme in use
14590>>>>>>>>>>>    Define xtpSystemThemeBlue for 1
14590>>>>>>>>>>>    // Olive theme in use
14590>>>>>>>>>>>    Define xtpSystemThemeOlive for 2
14590>>>>>>>>>>>    // Silver theme in use
14590>>>>>>>>>>>    Define xtpSystemThemeSilver for 3
14590>>>>>>>>>>>    // Silver theme in use
14590>>>>>>>>>>>    Define xtpSystemThemeRoyale for 4
14590>>>>>>>>>>>    // Silver theme in use
14590>>>>>>>>>>>    Define xtpSystemThemeAero for 5
14590>>>>>>>>>>>    // Use OS theme.
14590>>>>>>>>>>>    Define xtpSystemThemeAuto for 6
14590>>>>>>>>>>>
14590>>>>>>>>>>>
14590>>>>>>>>>>>// CLSID: {C0DE2200-DE43-4B56-BCEB-E14B825CF245}
14590>>>>>>>>>>>Class cCJIColorManager is a Mixin
14591>>>>>>>>>>>
14591>>>>>>>>>>>    Function ComSystemTheme Returns XTPCurrentSystemTheme
14593>>>>>>>>>>>        XTPCurrentSystemTheme retVal
14593>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
14594>>>>>>>>>>>        Function_Return retVal
14595>>>>>>>>>>>    End_Function
14596>>>>>>>>>>>
14596>>>>>>>>>>>    Procedure Set ComSystemTheme XTPCurrentSystemTheme value
14598>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
14599>>>>>>>>>>>    End_Procedure
14600>>>>>>>>>>>
14600>>>>>>>>>>>    Function ComEnableLunaBlueForRoyaleTheme Returns Boolean
14602>>>>>>>>>>>        Boolean retVal
14602>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
14603>>>>>>>>>>>        Function_Return retVal
14604>>>>>>>>>>>    End_Function
14605>>>>>>>>>>>
14605>>>>>>>>>>>    Procedure Set ComEnableLunaBlueForRoyaleTheme Boolean value
14607>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
14608>>>>>>>>>>>    End_Procedure
14609>>>>>>>>>>>
14609>>>>>>>>>>>    Function ComColor XTPColorManagerColor llIndex Returns OLE_COLOR
14611>>>>>>>>>>>        Handle hDispatchDriver
14611>>>>>>>>>>>        OLE_COLOR retVal
14611>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14612>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14613>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
14614>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_I4 to retVal
14615>>>>>>>>>>>        Function_Return retVal
14616>>>>>>>>>>>    End_Function
14617>>>>>>>>>>>
14617>>>>>>>>>>>    Procedure ComSetColor XTPColorManagerColor llIndex OLE_COLOR llColor
14619>>>>>>>>>>>        Handle hDispatchDriver
14619>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14620>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14621>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
14622>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
14623>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1 OLE_VT_VOID
14624>>>>>>>>>>>    End_Procedure
14625>>>>>>>>>>>
14625>>>>>>>>>>>    Function ComGetCurrentSystemTheme Returns XTPCurrentSystemTheme
14627>>>>>>>>>>>        Handle hDispatchDriver
14627>>>>>>>>>>>        XTPCurrentSystemTheme retVal
14627>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14628>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
14629>>>>>>>>>>>        Function_Return retVal
14630>>>>>>>>>>>    End_Function
14631>>>>>>>>>>>End_Class
14632>>>>>>>>>>>
14632>>>>>>>>>>>// CoClass
14632>>>>>>>>>>>// CLSID: {C0DE2200-F3FE-46E7-BB64-DB033F439F8B}
14632>>>>>>>>>>>Class cCJColorManager is a cComAutomationObject
14633>>>>>>>>>>>    Import_Class_Protocol cCJIColorManager
14634>>>>>>>>>>>
14634>>>>>>>>>>>    Procedure Construct_Object
14636>>>>>>>>>>>        Forward Send Construct_Object
14638>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
14639>>>>>>>>>>>    End_Procedure
14640>>>>>>>>>>>End_Class
14641>>>>>>>>>>>
14641>>>>>>>>>Use cCJImageManager.pkg     // cCJImageManagerIcons, cCJImageManagerIcon, cCJImageManager, cCJImageManagerIconSet
Including file: cCJImageManager.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJImageManager.pkg)
14641>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
14641>>>>>>>>>>>Use FlexCom20.pkg
14641>>>>>>>>>>>
14641>>>>>>>>>>>// Image State
14641>>>>>>>>>>>Define XTPImageState for Integer
14641>>>>>>>>>>>    Define xtpImageNormal for 0
14641>>>>>>>>>>>    Define xtpImageDisabled for 1
14641>>>>>>>>>>>    Define xtpImageHot for 2
14641>>>>>>>>>>>    Define xtpImageChecked for 3
14641>>>>>>>>>>>    Define xtpImagePressed for 4
14641>>>>>>>>>>>
14641>>>>>>>>>>>// CLSID: {C0DE2200-CD87-48F0-AD57-63682A2F3FCC}
14641>>>>>>>>>>>Class cCJIImageManagerIcons is a Mixin
14642>>>>>>>>>>>
14642>>>>>>>>>>>    Function ComDrawReverted Returns Boolean
14644>>>>>>>>>>>        Boolean retVal
14644>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
14645>>>>>>>>>>>        Function_Return retVal
14646>>>>>>>>>>>    End_Function
14647>>>>>>>>>>>
14647>>>>>>>>>>>    Procedure Set ComDrawReverted Boolean value
14649>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
14650>>>>>>>>>>>    End_Procedure
14651>>>>>>>>>>>
14651>>>>>>>>>>>    Function ComMaskColor Returns OLE_COLOR
14653>>>>>>>>>>>        OLE_COLOR retVal
14653>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
14654>>>>>>>>>>>        Function_Return retVal
14655>>>>>>>>>>>    End_Function
14656>>>>>>>>>>>
14656>>>>>>>>>>>    Procedure Set ComMaskColor OLE_COLOR value
14658>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
14659>>>>>>>>>>>    End_Procedure
14660>>>>>>>>>>>
14660>>>>>>>>>>>    Function ComCount Returns Integer
14662>>>>>>>>>>>        Handle hDispatchDriver
14662>>>>>>>>>>>        Integer retVal
14662>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14663>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
14664>>>>>>>>>>>        Function_Return retVal
14665>>>>>>>>>>>    End_Function
14666>>>>>>>>>>>
14666>>>>>>>>>>>    Procedure ComAddIcon Longptr llHandle Integer llCommand XTPImageState llimageState
14668>>>>>>>>>>>        Handle hDispatchDriver
14668>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14669>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
14670>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llHandle
14671>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14672>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14673>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 2 OLE_VT_VOID
14674>>>>>>>>>>>    End_Procedure
14675>>>>>>>>>>>
14675>>>>>>>>>>>    Procedure ComLoadIcon String llPath Integer llCommand XTPImageState llimageState
14677>>>>>>>>>>>        Handle hDispatchDriver
14677>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14678>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
14679>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14680>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14681>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14682>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
14683>>>>>>>>>>>    End_Procedure
14684>>>>>>>>>>>
14684>>>>>>>>>>>    Procedure ComAddBitmap Longptr llHandle Variant llCommands XTPImageState llimageState Boolean llAlpha
14686>>>>>>>>>>>        Handle hDispatchDriver
14686>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14687>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14688>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llHandle
14689>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llCommands
14690>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14691>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llAlpha
14692>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
14693>>>>>>>>>>>    End_Procedure
14694>>>>>>>>>>>
14694>>>>>>>>>>>    Procedure ComLoadBitmap String llPath Variant llCommands XTPImageState llimageState
14696>>>>>>>>>>>        Handle hDispatchDriver
14696>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14697>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
14698>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14699>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llCommands
14700>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14701>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
14702>>>>>>>>>>>    End_Procedure
14703>>>>>>>>>>>
14703>>>>>>>>>>>    Procedure ComLoadBitmapFromResource Longptr llModule Integer llResource Variant llCommands XTPImageState llimageState
14705>>>>>>>>>>>        Handle hDispatchDriver
14705>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14706>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14707>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llModule
14708>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llResource
14709>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llCommands
14710>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14711>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
14712>>>>>>>>>>>    End_Procedure
14713>>>>>>>>>>>
14713>>>>>>>>>>>    Procedure ComLoadIconFromResource Longptr llModule Integer llResource Integer llCommand XTPImageState llimageState
14715>>>>>>>>>>>        Handle hDispatchDriver
14715>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14716>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14717>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llModule
14718>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llResource
14719>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14720>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14721>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
14722>>>>>>>>>>>    End_Procedure
14723>>>>>>>>>>>
14723>>>>>>>>>>>    Function ComLoadVectorIcon String llPath Integer llnIDCommand Integer llnWidth XTPImageState llimageState Returns Boolean
14725>>>>>>>>>>>        Handle hDispatchDriver
14725>>>>>>>>>>>        Boolean retVal
14725>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14726>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14727>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14728>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIDCommand
14729>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnWidth
14730>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14731>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 17 OLE_VT_BOOL to retVal
14732>>>>>>>>>>>        Function_Return retVal
14733>>>>>>>>>>>    End_Function
14734>>>>>>>>>>>
14734>>>>>>>>>>>    Function ComLoadVectorIconCode String llCode Integer llnIDCommand Integer llnWidth XTPImageState llimageState Returns Boolean
14736>>>>>>>>>>>        Handle hDispatchDriver
14736>>>>>>>>>>>        Boolean retVal
14736>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14737>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14738>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCode
14739>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIDCommand
14740>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnWidth
14741>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14742>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 18 OLE_VT_BOOL to retVal
14743>>>>>>>>>>>        Function_Return retVal
14744>>>>>>>>>>>    End_Function
14745>>>>>>>>>>>
14745>>>>>>>>>>>    Function ComLoadVectorIconFromResource BigInt llModule String llResourceType Integer llResource Integer llnIDCommand Integer llnWidth XTPImageState llimageState Returns Boolean
14747>>>>>>>>>>>        Handle hDispatchDriver
14747>>>>>>>>>>>        Boolean retVal
14747>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14748>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 6
14749>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I8 llModule
14750>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llResourceType
14751>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llResource
14752>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIDCommand
14753>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnWidth
14754>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14755>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 19 OLE_VT_BOOL to retVal
14756>>>>>>>>>>>        Function_Return retVal
14757>>>>>>>>>>>    End_Function
14758>>>>>>>>>>>
14758>>>>>>>>>>>    Procedure ComRemoveAll
14760>>>>>>>>>>>        Handle hDispatchDriver
14760>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14761>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
14762>>>>>>>>>>>    End_Procedure
14763>>>>>>>>>>>
14763>>>>>>>>>>>    Procedure ComAddIcons Variant llIcons
14765>>>>>>>>>>>        Handle hDispatchDriver
14765>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14766>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14767>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llIcons
14768>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
14769>>>>>>>>>>>    End_Procedure
14770>>>>>>>>>>>
14770>>>>>>>>>>>    Procedure ComRemoveIcon Integer llCommand
14772>>>>>>>>>>>        Handle hDispatchDriver
14772>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14773>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14774>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14775>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 10 OLE_VT_VOID
14776>>>>>>>>>>>    End_Procedure
14777>>>>>>>>>>>
14777>>>>>>>>>>>    Function ComIsAlphaIconsSupported Returns Boolean
14779>>>>>>>>>>>        Handle hDispatchDriver
14779>>>>>>>>>>>        Boolean retVal
14779>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14780>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_BOOL to retVal
14781>>>>>>>>>>>        Function_Return retVal
14782>>>>>>>>>>>    End_Function
14783>>>>>>>>>>>
14783>>>>>>>>>>>    Procedure ComRefreshAll
14785>>>>>>>>>>>        Handle hDispatchDriver
14785>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14786>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 12 OLE_VT_VOID
14787>>>>>>>>>>>    End_Procedure
14788>>>>>>>>>>>
14788>>>>>>>>>>>    Function ComGetImage Integer llCommand Integer llWidth Returns Variant
14790>>>>>>>>>>>        Handle hDispatchDriver
14790>>>>>>>>>>>        Variant retVal
14790>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14791>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14792>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14793>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
14794>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_DISPATCH to retVal
14795>>>>>>>>>>>        Function_Return retVal
14796>>>>>>>>>>>    End_Function
14797>>>>>>>>>>>
14797>>>>>>>>>>>    Function Com_NewEnum Returns Variant
14799>>>>>>>>>>>        Handle hDispatchDriver
14799>>>>>>>>>>>        Variant retVal
14799>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14800>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
14801>>>>>>>>>>>        Function_Return retVal
14802>>>>>>>>>>>    End_Function
14803>>>>>>>>>>>
14803>>>>>>>>>>>    Procedure ComDoPropExchange Variant llpPX
14805>>>>>>>>>>>        Handle hDispatchDriver
14805>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14806>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14807>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpPX
14808>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
14809>>>>>>>>>>>    End_Procedure
14810>>>>>>>>>>>End_Class
14811>>>>>>>>>>>
14811>>>>>>>>>>>// CoClass
14811>>>>>>>>>>>// CLSID: {C0DE2200-4290-47A7-8B05-90AC979F12D5}
14811>>>>>>>>>>>Class cCJImageManagerIcons is a cComAutomationObject
14812>>>>>>>>>>>    Import_Class_Protocol cCJIImageManagerIcons
14813>>>>>>>>>>>
14813>>>>>>>>>>>    Procedure Construct_Object
14815>>>>>>>>>>>        Forward Send Construct_Object
14817>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
14818>>>>>>>>>>>    End_Procedure
14819>>>>>>>>>>>End_Class
14820>>>>>>>>>>>
14820>>>>>>>>>>>// CLSID: {C0DE2200-7540-4926-8D3D-82A953AE7B7B}
14820>>>>>>>>>>>// Dispatch interface for ImageManager Control
14820>>>>>>>>>>>Class cCJ_DImageManager is a Mixin
14821>>>>>>>>>>>
14821>>>>>>>>>>>    Function ComIcons Returns Variant
14823>>>>>>>>>>>        Variant retVal
14823>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_DISPATCH to retVal
14824>>>>>>>>>>>        Function_Return retVal
14825>>>>>>>>>>>    End_Function
14826>>>>>>>>>>>
14826>>>>>>>>>>>    Procedure Set ComIcons Variant value
14828>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_DISPATCH to value
14829>>>>>>>>>>>    End_Procedure
14830>>>>>>>>>>>
14830>>>>>>>>>>>    Function ComIsAlphaIconsSupported Returns Boolean
14832>>>>>>>>>>>        Handle hDispatchDriver
14832>>>>>>>>>>>        Boolean retVal
14832>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14833>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
14834>>>>>>>>>>>        Function_Return retVal
14835>>>>>>>>>>>    End_Function
14836>>>>>>>>>>>
14836>>>>>>>>>>>    Procedure ComAboutBox
14838>>>>>>>>>>>        Handle hDispatchDriver
14838>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14839>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
14840>>>>>>>>>>>    End_Procedure
14841>>>>>>>>>>>End_Class
14842>>>>>>>>>>>
14842>>>>>>>>>>>// CLSID: {C0DE2200-E0F3-48CF-BD1D-5305A4F46C99}
14842>>>>>>>>>>>// Event interface for ImageManager Control
14842>>>>>>>>>>>Class cCJ_DImageManagerEvents is a Mixin
14843>>>>>>>>>>>
14843>>>>>>>>>>>    Procedure RegisterComEvents
14845>>>>>>>>>>>    End_Procedure
14846>>>>>>>>>>>End_Class
14847>>>>>>>>>>>
14847>>>>>>>>>>>// CoClass
14847>>>>>>>>>>>// ProgID: Codejock.ImageManager.22.0.0
14847>>>>>>>>>>>// CLSID: {C0DE2200-3949-47B3-B687-85E8DDA2AEDB}
14847>>>>>>>>>>>// Xtreme ImageManager Control
14847>>>>>>>>>>>Class cCJImageManager is a cComActiveXControl
14848>>>>>>>>>>>    Import_Class_Protocol cCJ_DImageManager
14849>>>>>>>>>>>    Import_Class_Protocol cCJ_DImageManagerEvents
14850>>>>>>>>>>>
14850>>>>>>>>>>>    Procedure Construct_Object
14852>>>>>>>>>>>        Forward Send Construct_Object
14854>>>>>>>>>>>        Set psProgID to "{C0DE2200-3949-47B3-B687-85E8DDA2AEDB}"
14855>>>>>>>>>>>        Set psEventId to "{C0DE2200-E0F3-48CF-BD1D-5305A4F46C99}"
14856>>>>>>>>>>>        Set peAutoCreate to acAutoCreate
14857>>>>>>>>>>>    End_Procedure
14858>>>>>>>>>>>End_Class
14859>>>>>>>>>>>
14859>>>>>>>>>>>// CLSID: {C0DE2200-AE6D-46A8-BC77-CEE7D5CE9ED7}
14859>>>>>>>>>>>Class cCJImageManagerIcon is a cComAutomationObject
14860>>>>>>>>>>>
14860>>>>>>>>>>>    Function ComId Returns Integer
14862>>>>>>>>>>>        Handle hDispatchDriver
14862>>>>>>>>>>>        Integer retVal
14862>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14863>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
14864>>>>>>>>>>>        Function_Return retVal
14865>>>>>>>>>>>    End_Function
14866>>>>>>>>>>>
14866>>>>>>>>>>>    Function ComWidth Returns Integer
14868>>>>>>>>>>>        Handle hDispatchDriver
14868>>>>>>>>>>>        Integer retVal
14868>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14869>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
14870>>>>>>>>>>>        Function_Return retVal
14871>>>>>>>>>>>    End_Function
14872>>>>>>>>>>>
14872>>>>>>>>>>>    Function ComHeight Returns Integer
14874>>>>>>>>>>>        Handle hDispatchDriver
14874>>>>>>>>>>>        Integer retVal
14874>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14875>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
14876>>>>>>>>>>>        Function_Return retVal
14877>>>>>>>>>>>    End_Function
14878>>>>>>>>>>>
14878>>>>>>>>>>>    Function ComScaled Returns Boolean
14880>>>>>>>>>>>        Handle hDispatchDriver
14880>>>>>>>>>>>        Boolean retVal
14880>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14881>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_BOOL to retVal
14882>>>>>>>>>>>        Function_Return retVal
14883>>>>>>>>>>>    End_Function
14884>>>>>>>>>>>
14884>>>>>>>>>>>    Function ComAlpha Returns Boolean
14886>>>>>>>>>>>        Handle hDispatchDriver
14886>>>>>>>>>>>        Boolean retVal
14886>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14887>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_BOOL to retVal
14888>>>>>>>>>>>        Function_Return retVal
14889>>>>>>>>>>>    End_Function
14890>>>>>>>>>>>
14890>>>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
14892>>>>>>>>>>>        Handle hDispatchDriver
14892>>>>>>>>>>>        OLE_HANDLE retVal
14892>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14893>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_I4 to retVal
14894>>>>>>>>>>>        Function_Return retVal
14895>>>>>>>>>>>    End_Function
14896>>>>>>>>>>>
14896>>>>>>>>>>>    Procedure ComDraw OLE_HANDLE llhDC Integer llx Integer lly Integer llcx Integer llcy XTPImageState llstate
14898>>>>>>>>>>>        Handle hDispatchDriver
14898>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14899>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 6
14900>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhDC
14901>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
14902>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
14903>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
14904>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
14905>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llstate
14906>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
14907>>>>>>>>>>>    End_Procedure
14908>>>>>>>>>>>
14908>>>>>>>>>>>    Function ComCreatePicture XTPImageState llstate Returns Variant
14910>>>>>>>>>>>        Handle hDispatchDriver
14910>>>>>>>>>>>        Variant retVal
14910>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14911>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14912>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llstate
14913>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_DISPATCH to retVal
14914>>>>>>>>>>>        Function_Return retVal
14915>>>>>>>>>>>    End_Function
14916>>>>>>>>>>>
14916>>>>>>>>>>>    Function ComScale Integer llWidth Returns Variant
14918>>>>>>>>>>>        Handle hDispatchDriver
14918>>>>>>>>>>>        Variant retVal
14918>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14919>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14920>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
14921>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_DISPATCH to retVal
14922>>>>>>>>>>>        Function_Return retVal
14923>>>>>>>>>>>    End_Function
14924>>>>>>>>>>>End_Class
14925>>>>>>>>>>>
14925>>>>>>>>>>>// CLSID: {C0DE2200-374B-4AED-9306-0B7AC4343BCC}
14925>>>>>>>>>>>Class cCJImageManagerIconSet is a cComAutomationObject
14926>>>>>>>>>>>
14926>>>>>>>>>>>    Function ComId Returns Integer
14928>>>>>>>>>>>        Handle hDispatchDriver
14928>>>>>>>>>>>        Integer retVal
14928>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14929>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
14930>>>>>>>>>>>        Function_Return retVal
14931>>>>>>>>>>>    End_Function
14932>>>>>>>>>>>
14932>>>>>>>>>>>    Function ComCount Returns Integer
14934>>>>>>>>>>>        Handle hDispatchDriver
14934>>>>>>>>>>>        Integer retVal
14934>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14935>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
14936>>>>>>>>>>>        Function_Return retVal
14937>>>>>>>>>>>    End_Function
14938>>>>>>>>>>>
14938>>>>>>>>>>>    Function ComGetImage Integer llWidth Returns Variant
14940>>>>>>>>>>>        Handle hDispatchDriver
14940>>>>>>>>>>>        Variant retVal
14940>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14941>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14942>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
14943>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_DISPATCH to retVal
14944>>>>>>>>>>>        Function_Return retVal
14945>>>>>>>>>>>    End_Function
14946>>>>>>>>>>>
14946>>>>>>>>>>>    Function Com_NewEnum Returns Variant
14948>>>>>>>>>>>        Handle hDispatchDriver
14948>>>>>>>>>>>        Variant retVal
14948>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14949>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
14950>>>>>>>>>>>        Function_Return retVal
14951>>>>>>>>>>>    End_Function
14952>>>>>>>>>>>End_Class
14953>>>>>>>>>>>
14953>>>>>>>>>Use cCJPropExchange.pkg     // cCJPropExchange
Including file: cCJPropExchange.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJPropExchange.pkg)
14953>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
14953>>>>>>>>>>>Use FlexCom20.pkg
14953>>>>>>>>>>>
14953>>>>>>>>>>>// CLSID: {C0DE2200-1659-4A68-B826-DAFCAB16E824}
14953>>>>>>>>>>>Class cCJPropExchange is a cComAutomationObject
14954>>>>>>>>>>>
14954>>>>>>>>>>>    Function ComValue Returns Variant
14956>>>>>>>>>>>        Variant retVal
14956>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 0 OLE_VT_VARIANT to retVal
14957>>>>>>>>>>>        Function_Return retVal
14958>>>>>>>>>>>    End_Function
14959>>>>>>>>>>>
14959>>>>>>>>>>>    Procedure Set ComValue Variant value
14961>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 0 OLE_VT_VARIANT to value
14962>>>>>>>>>>>    End_Procedure
14963>>>>>>>>>>>
14963>>>>>>>>>>>    Function ComEncoding Returns String
14965>>>>>>>>>>>        String retVal
14965>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
14966>>>>>>>>>>>        Function_Return retVal
14967>>>>>>>>>>>    End_Function
14968>>>>>>>>>>>
14968>>>>>>>>>>>    Procedure Set ComEncoding String value
14970>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
14971>>>>>>>>>>>    End_Procedure
14972>>>>>>>>>>>
14972>>>>>>>>>>>    Function ComCreateAsXML Boolean llLoading String llSection Returns Boolean
14974>>>>>>>>>>>        Handle hDispatchDriver
14974>>>>>>>>>>>        Boolean retVal
14974>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14975>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14976>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLoading
14977>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llSection
14978>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BOOL to retVal
14979>>>>>>>>>>>        Function_Return retVal
14980>>>>>>>>>>>    End_Function
14981>>>>>>>>>>>
14981>>>>>>>>>>>    Function ComCreateAsRegistry Boolean llLoading String llSection Returns Boolean
14983>>>>>>>>>>>        Handle hDispatchDriver
14983>>>>>>>>>>>        Boolean retVal
14983>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14984>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14985>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLoading
14986>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llSection
14987>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
14988>>>>>>>>>>>        Function_Return retVal
14989>>>>>>>>>>>    End_Function
14990>>>>>>>>>>>
14990>>>>>>>>>>>    Function ComCreateAsBinaryFile Boolean llLoading String llPath Returns Boolean
14992>>>>>>>>>>>        Handle hDispatchDriver
14992>>>>>>>>>>>        Boolean retVal
14992>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14993>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14994>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLoading
14995>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14996>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BOOL to retVal
14997>>>>>>>>>>>        Function_Return retVal
14998>>>>>>>>>>>    End_Function
14999>>>>>>>>>>>
14999>>>>>>>>>>>    Function ComLoadFromFile String llPath Returns Boolean
15001>>>>>>>>>>>        Handle hDispatchDriver
15001>>>>>>>>>>>        Boolean retVal
15001>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15002>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
15003>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
15004>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_BOOL to retVal
15005>>>>>>>>>>>        Function_Return retVal
15006>>>>>>>>>>>    End_Function
15007>>>>>>>>>>>
15007>>>>>>>>>>>    Procedure ComSaveToFile String llPath
15009>>>>>>>>>>>        Handle hDispatchDriver
15009>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15010>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
15011>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
15012>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
15013>>>>>>>>>>>    End_Procedure
15014>>>>>>>>>>>
15014>>>>>>>>>>>    Function ComGetSection String llSection Returns Variant
15016>>>>>>>>>>>        Handle hDispatchDriver
15016>>>>>>>>>>>        Variant retVal
15016>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15017>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
15018>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llSection
15019>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_DISPATCH to retVal
15020>>>>>>>>>>>        Function_Return retVal
15021>>>>>>>>>>>    End_Function
15022>>>>>>>>>>>
15022>>>>>>>>>>>    Procedure ComExchangeString String llPropName String ByRef llValue String llDefaultValue
15024>>>>>>>>>>>        Handle hDispatchDriver
15024>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15025>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
15026>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPropName
15027>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_BSTR) llValue
15028>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llDefaultValue
15029>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
15030>>>>>>>>>>>    End_Procedure
15031>>>>>>>>>>>
15031>>>>>>>>>>>    Procedure ComExchangeInt String llPropName Integer ByRef llValue Integer llDefaultValue
15033>>>>>>>>>>>        Handle hDispatchDriver
15033>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15034>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
15035>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPropName
15036>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llValue
15037>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llDefaultValue
15038>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
15039>>>>>>>>>>>    End_Procedure
15040>>>>>>>>>>>
15040>>>>>>>>>>>    Function ComLoading Returns Boolean
15042>>>>>>>>>>>        Handle hDispatchDriver
15042>>>>>>>>>>>        Boolean retVal
15042>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15043>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_BOOL to retVal
15044>>>>>>>>>>>        Function_Return retVal
15045>>>>>>>>>>>    End_Function
15046>>>>>>>>>>>
15046>>>>>>>>>>>    Function ComValid Returns Boolean
15048>>>>>>>>>>>        Handle hDispatchDriver
15048>>>>>>>>>>>        Boolean retVal
15048>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15049>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
15050>>>>>>>>>>>        Function_Return retVal
15051>>>>>>>>>>>    End_Function
15052>>>>>>>>>>>
15052>>>>>>>>>>>    Procedure ComEmptySection
15054>>>>>>>>>>>        Handle hDispatchDriver
15054>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15055>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
15056>>>>>>>>>>>    End_Procedure
15057>>>>>>>>>>>End_Class
15058>>>>>>>>>>>
15058>>>>>>>>>Use cCJTooltipContext.pkg   // cCJToolTipContext
Including file: cCJTooltipContext.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJTooltipContext.pkg)
15058>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
15058>>>>>>>>>>>Use FlexCom20.pkg
15058>>>>>>>>>>>
15058>>>>>>>>>>>// ToolTip Style
15058>>>>>>>>>>>Define XTPToolTipStyle for Integer
15058>>>>>>>>>>>    Define xtpToolTipStandard for 0
15058>>>>>>>>>>>    Define xtpToolTipBalloon for 1
15058>>>>>>>>>>>    Define xtpToolTipOffice for 2
15058>>>>>>>>>>>    Define xtpToolTipRTF for 3
15058>>>>>>>>>>>    Define xtpToolTipLuna for 4
15058>>>>>>>>>>>    Define xtpToolTipResource for 5
15058>>>>>>>>>>>    Define xtpToolTipHTML for 6
15058>>>>>>>>>>>    Define xtpToolTipMarkup for 7
15058>>>>>>>>>>>    Define xtpToolTipOffice2013 for 8
15058>>>>>>>>>>>    Define xtpToolTipOffice2016 for 8
15058>>>>>>>>>>>
15058>>>>>>>>>>>// ToolTip Icon
15058>>>>>>>>>>>Define XTPToolTipIcon for Integer
15058>>>>>>>>>>>    Define xtpToolTipIconNone for 0
15058>>>>>>>>>>>    Define xtpToolTipIconInfo for 1
15058>>>>>>>>>>>    Define xtpToolTipIconWarning for 2
15058>>>>>>>>>>>    Define xtpToolTipIconError for 3
15058>>>>>>>>>>>
15058>>>>>>>>>>>// CLSID: {C0DE2200-BFB7-4925-9BB5-D3A0DDA469AF}
15058>>>>>>>>>>>Class cCJIToolTipContext is a Mixin
15059>>>>>>>>>>>
15059>>>>>>>>>>>    Function ComStyle Returns XTPToolTipStyle
15061>>>>>>>>>>>        XTPToolTipStyle retVal
15061>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
15062>>>>>>>>>>>        Function_Return retVal
15063>>>>>>>>>>>    End_Function
15064>>>>>>>>>>>
15064>>>>>>>>>>>    Procedure Set ComStyle XTPToolTipStyle value
15066>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
15067>>>>>>>>>>>    End_Procedure
15068>>>>>>>>>>>
15068>>>>>>>>>>>    Function ComMaxTipWidth Returns Integer
15070>>>>>>>>>>>        Integer retVal
15070>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
15071>>>>>>>>>>>        Function_Return retVal
15072>>>>>>>>>>>    End_Function
15073>>>>>>>>>>>
15073>>>>>>>>>>>    Procedure Set ComMaxTipWidth Integer value
15075>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
15076>>>>>>>>>>>    End_Procedure
15077>>>>>>>>>>>
15077>>>>>>>>>>>    Function ComTipBkColor Returns OLE_COLOR
15079>>>>>>>>>>>        OLE_COLOR retVal
15079>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
15080>>>>>>>>>>>        Function_Return retVal
15081>>>>>>>>>>>    End_Function
15082>>>>>>>>>>>
15082>>>>>>>>>>>    Procedure Set ComTipBkColor OLE_COLOR value
15084>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
15085>>>>>>>>>>>    End_Procedure
15086>>>>>>>>>>>
15086>>>>>>>>>>>    Function ComTipTextColor Returns OLE_COLOR
15088>>>>>>>>>>>        OLE_COLOR retVal
15088>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
15089>>>>>>>>>>>        Function_Return retVal
15090>>>>>>>>>>>    End_Function
15091>>>>>>>>>>>
15091>>>>>>>>>>>    Procedure Set ComTipTextColor OLE_COLOR value
15093>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
15094>>>>>>>>>>>    End_Procedure
15095>>>>>>>>>>>
15095>>>>>>>>>>>    Function ComFont Returns Variant
15097>>>>>>>>>>>        Variant retVal
15097>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
15098>>>>>>>>>>>        Function_Return retVal
15099>>>>>>>>>>>    End_Function
15100>>>>>>>>>>>
15100>>>>>>>>>>>    Procedure Set ComFont Variant value
15102>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
15103>>>>>>>>>>>    End_Procedure
15104>>>>>>>>>>>
15104>>>>>>>>>>>    Function ComShowOfficeBorder Returns Boolean
15106>>>>>>>>>>>        Boolean retVal
15106>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
15107>>>>>>>>>>>        Function_Return retVal
15108>>>>>>>>>>>    End_Function
15109>>>>>>>>>>>
15109>>>>>>>>>>>    Procedure Set ComShowOfficeBorder Boolean value
15111>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
15112>>>>>>>>>>>    End_Procedure
15113>>>>>>>>>>>
15113>>>>>>>>>>>    Function ComShowShadow Returns Boolean
15115>>>>>>>>>>>        Boolean retVal
15115>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
15116>>>>>>>>>>>        Function_Return retVal
15117>>>>>>>>>>>    End_Function
15118>>>>>>>>>>>
15118>>>>>>>>>>>    Procedure Set ComShowShadow Boolean value
15120>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
15121>>>>>>>>>>>    End_Procedure
15122>>>>>>>>>>>
15122>>>>>>>>>>>    Function ComImageDPIScaling Returns Boolean
15124>>>>>>>>>>>        Boolean retVal
15124>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
15125>>>>>>>>>>>        Function_Return retVal
15126>>>>>>>>>>>    End_Function
15127>>>>>>>>>>>
15127>>>>>>>>>>>    Procedure Set ComImageDPIScaling Boolean value
15129>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
15130>>>>>>>>>>>    End_Procedure
15131>>>>>>>>>>>
15131>>>>>>>>>>>    Procedure ComShowTitleAndDescription Boolean llShowTitleAndDescription XTPToolTipIcon llIconTitle
15133>>>>>>>>>>>        Handle hDispatchDriver
15133>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15134>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
15135>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShowTitleAndDescription
15136>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIconTitle
15137>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 2 OLE_VT_VOID
15138>>>>>>>>>>>    End_Procedure
15139>>>>>>>>>>>
15139>>>>>>>>>>>    Function ComIsBalloonStyleSupported Returns Boolean
15141>>>>>>>>>>>        Handle hDispatchDriver
15141>>>>>>>>>>>        Boolean retVal
15141>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15142>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_BOOL to retVal
15143>>>>>>>>>>>        Function_Return retVal
15144>>>>>>>>>>>    End_Function
15145>>>>>>>>>>>
15145>>>>>>>>>>>    Procedure ComSetMargin Integer llLeft Integer llTop Integer llRight Integer llBottom
15147>>>>>>>>>>>        Handle hDispatchDriver
15147>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15148>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
15149>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
15150>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
15151>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
15152>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
15153>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
15154>>>>>>>>>>>    End_Procedure
15155>>>>>>>>>>>
15155>>>>>>>>>>>    Procedure ComShowImage Boolean llShowImage Integer llImageBase
15157>>>>>>>>>>>        Handle hDispatchDriver
15157>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15158>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
15159>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShowImage
15160>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llImageBase
15161>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
15162>>>>>>>>>>>    End_Procedure
15163>>>>>>>>>>>
15163>>>>>>>>>>>    Procedure ComSetVectorIconSize Integer llcx Integer llcy
15165>>>>>>>>>>>        Handle hDispatchDriver
15165>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15166>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
15167>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
15168>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
15169>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 12 OLE_VT_VOID
15170>>>>>>>>>>>    End_Procedure
15171>>>>>>>>>>>End_Class
15172>>>>>>>>>>>
15172>>>>>>>>>>>// CoClass
15172>>>>>>>>>>>// CLSID: {C0DE2200-8C00-4F05-AF87-9F05BCB55475}
15172>>>>>>>>>>>Class cCJToolTipContext is a cComAutomationObject
15173>>>>>>>>>>>    Import_Class_Protocol cCJIToolTipContext
15174>>>>>>>>>>>
15174>>>>>>>>>>>    Procedure Construct_Object
15176>>>>>>>>>>>        Forward Send Construct_Object
15178>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
15179>>>>>>>>>>>    End_Procedure
15180>>>>>>>>>>>End_Class
15181>>>>>>>>>>>
15181>>>>>>>>>Use cCJTabControlItem.pkg   // cCJTabManagerMargin, cCJTabManagerColorSet, cCJTabManager, cCJTabControlItem
Including file: cCJTabControlItem.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJTabControlItem.pkg)
15181>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
15181>>>>>>>>>>>Use FlexCom20.pkg
15181>>>>>>>>>>>
15181>>>>>>>>>>>Define XTPTabAppearanceStyle for Integer
15181>>>>>>>>>>>    Define xtpTabAppearancePropertyPage for 0
15181>>>>>>>>>>>    Define xtpTabAppearancePropertyPageSelected for 1
15181>>>>>>>>>>>    Define xtpTabAppearancePropertyPageFlat for 2
15181>>>>>>>>>>>    Define xtpTabAppearancePropertyPage2003 for 3
15181>>>>>>>>>>>    Define xtpTabAppearanceStateButtons for 4
15181>>>>>>>>>>>    Define xtpTabAppearanceFlat for 6
15181>>>>>>>>>>>    Define xtpTabThemeExcel2003 for 7
15181>>>>>>>>>>>    Define xtpTabAppearanceVisio for 8
15181>>>>>>>>>>>    Define xtpTabAppearancePropertyPage2007 for 10
15181>>>>>>>>>>>    Define xtpTabAppearancePropertyPageAccess2007 for 11
15181>>>>>>>>>>>    Define xtpTabThemeVisualStudio2003 for 5
15181>>>>>>>>>>>    Define xtpTabThemeVisualStudio2005 for 9
15181>>>>>>>>>>>    Define xtpTabThemeVisualStudio2010 for 12
15181>>>>>>>>>>>    Define xtpTabThemeVisualStudio2012 for 13
15181>>>>>>>>>>>    Define xtpTabThemeVisualStudio2015 for 15
15181>>>>>>>>>>>    Define xtpTabThemeNativeWindows10 for 16
15181>>>>>>>>>>>    Define xtpTabThemeVisualStudio2017 for 17
15181>>>>>>>>>>>    Define xtpTabThemeVisualStudio2019 for 18
15181>>>>>>>>>>>    Define xtpTabThemeVisualStudio2022 for 19
15181>>>>>>>>>>>    Define xtpTabThemeOffice2013 for 14
15181>>>>>>>>>>>    Define xtpTabThemeOffice2016 for 14
15181>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio for 5
15181>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2003 for 5
15181>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2005 for 9
15181>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2010 for 12
15181>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2012 for 13
15181>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2015 for 15
15181>>>>>>>>>>>    Define xtpTabAppearanceNativeWindows10 for 16
15181>>>>>>>>>>>    Define xtpTabAppearanceExcel for 7
15181>>>>>>>>>>>
15181>>>>>>>>>>>Define XTPTabColorStyle for Integer
15181>>>>>>>>>>>    Define xtpTabColorDefault for 1
15181>>>>>>>>>>>    Define xtpTabColorOffice2003 for 4
15181>>>>>>>>>>>    Define xtpTabColorWinNative for 8
15181>>>>>>>>>>>    Define xtpTabColorResource for 32
15181>>>>>>>>>>>    Define xtpTabColorOffice2007Access for 128
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2003 for 2
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2005 for 16
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2008 for 64
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2010 for 256
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2012 for 512
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2012Dark for 1024
15181>>>>>>>>>>>    Define xtpTabColorOffice2013 for 2048
15181>>>>>>>>>>>    Define xtpTabColorOffice2016 for 2048
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2015 for 4096
15181>>>>>>>>>>>    Define xtpTabColorNativeWindows10 for 8192
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2017 for 16384
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2019 for 32768
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio2022 for 65536
15181>>>>>>>>>>>    Define xtpTabColorAll for -1
15181>>>>>>>>>>>    Define xtpTabColorVisualStudio for 2
15181>>>>>>>>>>>    Define xtpTabColorWinXP for 8
15181>>>>>>>>>>>    Define xtpTabColorWhidbey for 16
15181>>>>>>>>>>>    Define xtpTabColorAccess2007 for 128
15181>>>>>>>>>>>    Define xtpTabColorOffice2007 for 32
15181>>>>>>>>>>>
15181>>>>>>>>>>>Define XTPTabOneNoteColor for Integer
15181>>>>>>>>>>>    Define xtpTabColorBlue for 16777216
15181>>>>>>>>>>>    Define xtpTabColorYellow for 16777217
15181>>>>>>>>>>>    Define xtpTabColorGreen for 16777218
15181>>>>>>>>>>>    Define xtpTabColorRed for 16777219
15181>>>>>>>>>>>    Define xtpTabColorPurple for 16777220
15181>>>>>>>>>>>    Define xtpTabColorCyan for 16777221
15181>>>>>>>>>>>    Define xtpTabColorOrange for 16777222
15181>>>>>>>>>>>    Define xtpTabColorMagenta for 16777223
15181>>>>>>>>>>>
15181>>>>>>>>>>>Define XTPTabPosition for Integer
15181>>>>>>>>>>>    Define xtpTabPositionTop for 0
15181>>>>>>>>>>>    Define xtpTabPositionLeft for 1
15181>>>>>>>>>>>    Define xtpTabPositionBottom for 2
15181>>>>>>>>>>>    Define xtpTabPositionRight for 3
15181>>>>>>>>>>>
15181>>>>>>>>>>>Define XTPTabLayoutStyle for Integer
15181>>>>>>>>>>>    Define xtpTabLayoutAutoSize for 0
15181>>>>>>>>>>>    Define xtpTabLayoutSizeToFit for 1
15181>>>>>>>>>>>    Define xtpTabLayoutFixed for 2
15181>>>>>>>>>>>    Define xtpTabLayoutCompressed for 3
15181>>>>>>>>>>>    Define xtpTabLayoutMultiRow for 4
15181>>>>>>>>>>>    Define xtpTabLayoutRotated for 5
15181>>>>>>>>>>>
15181>>>>>>>>>>>Define XTPTabClientFrame for Integer
15181>>>>>>>>>>>    Define xtpTabFrameBorder for 0
15181>>>>>>>>>>>    Define xtpTabFrameSingleLine for 1
15181>>>>>>>>>>>    Define xtpTabFrameNone for 2
15181>>>>>>>>>>>
15181>>>>>>>>>>>Define XTPTabToolTipBehaviour for Integer
15181>>>>>>>>>>>    Define xtpTabToolTipNever for 0
15181>>>>>>>>>>>    Define xtpTabToolTipAlways for 1
15181>>>>>>>>>>>    Define xtpTabToolTipShrinkedOnly for 2
15181>>>>>>>>>>>
15181>>>>>>>>>>>Define XTPTabDrawTextFormat for Integer
15181>>>>>>>>>>>    Define xtpTabDrawTextLeft for 0
15181>>>>>>>>>>>    Define xtpTabDrawTextCenter for 1
15181>>>>>>>>>>>    Define xtpTabDrawTextRight for 2
15181>>>>>>>>>>>    Define xtpTabDrawTextVCenter for 4
15181>>>>>>>>>>>
15181>>>>>>>>>>>// CLSID: {C0DE2200-B4E9-45C7-AAF6-EF340E785590}
15181>>>>>>>>>>>Class cCJITabManagerMargin is a Mixin
15182>>>>>>>>>>>
15182>>>>>>>>>>>    Function ComLeft Returns Integer
15184>>>>>>>>>>>        Integer retVal
15184>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
15185>>>>>>>>>>>        Function_Return retVal
15186>>>>>>>>>>>    End_Function
15187>>>>>>>>>>>
15187>>>>>>>>>>>    Procedure Set ComLeft Integer value
15189>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
15190>>>>>>>>>>>    End_Procedure
15191>>>>>>>>>>>
15191>>>>>>>>>>>    Function ComTop Returns Integer
15193>>>>>>>>>>>        Integer retVal
15193>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
15194>>>>>>>>>>>        Function_Return retVal
15195>>>>>>>>>>>    End_Function
15196>>>>>>>>>>>
15196>>>>>>>>>>>    Procedure Set ComTop Integer value
15198>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
15199>>>>>>>>>>>    End_Procedure
15200>>>>>>>>>>>
15200>>>>>>>>>>>    Function ComRight Returns Integer
15202>>>>>>>>>>>        Integer retVal
15202>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
15203>>>>>>>>>>>        Function_Return retVal
15204>>>>>>>>>>>    End_Function
15205>>>>>>>>>>>
15205>>>>>>>>>>>    Procedure Set ComRight Integer value
15207>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
15208>>>>>>>>>>>    End_Procedure
15209>>>>>>>>>>>
15209>>>>>>>>>>>    Function ComBottom Returns Integer
15211>>>>>>>>>>>        Integer retVal
15211>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
15212>>>>>>>>>>>        Function_Return retVal
15213>>>>>>>>>>>    End_Function
15214>>>>>>>>>>>
15214>>>>>>>>>>>    Procedure Set ComBottom Integer value
15216>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
15217>>>>>>>>>>>    End_Procedure
15218>>>>>>>>>>>
15218>>>>>>>>>>>    Procedure ComSetRect Integer llLeft Integer llTop Integer llRight Integer llBottom
15220>>>>>>>>>>>        Handle hDispatchDriver
15220>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15221>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
15222>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
15223>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
15224>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
15225>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
15226>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
15227>>>>>>>>>>>    End_Procedure
15228>>>>>>>>>>>End_Class
15229>>>>>>>>>>>
15229>>>>>>>>>>>// CoClass
15229>>>>>>>>>>>// CLSID: {C0DE2200-90EE-4D24-8F7A-DA71BDEC35A8}
15229>>>>>>>>>>>Class cCJTabManagerMargin is a cComAutomationObject
15230>>>>>>>>>>>    Import_Class_Protocol cCJITabManagerMargin
15231>>>>>>>>>>>
15231>>>>>>>>>>>    Procedure Construct_Object
15233>>>>>>>>>>>        Forward Send Construct_Object
15235>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
15236>>>>>>>>>>>    End_Procedure
15237>>>>>>>>>>>End_Class
15238>>>>>>>>>>>
15238>>>>>>>>>>>// CLSID: {C0DE2200-ED71-4B4E-91CF-8444D6244F56}
15238>>>>>>>>>>>Class cCJITabPaintManagerColorSet is a Mixin
15239>>>>>>>>>>>
15239>>>>>>>>>>>    Function ComHeaderFaceLight Returns OLE_COLOR
15241>>>>>>>>>>>        OLE_COLOR retVal
15241>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
15242>>>>>>>>>>>        Function_Return retVal
15243>>>>>>>>>>>    End_Function
15244>>>>>>>>>>>
15244>>>>>>>>>>>    Procedure Set ComHeaderFaceLight OLE_COLOR value
15246>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
15247>>>>>>>>>>>    End_Procedure
15248>>>>>>>>>>>
15248>>>>>>>>>>>    Function ComHeaderFaceDark Returns OLE_COLOR
15250>>>>>>>>>>>        OLE_COLOR retVal
15250>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
15251>>>>>>>>>>>        Function_Return retVal
15252>>>>>>>>>>>    End_Function
15253>>>>>>>>>>>
15253>>>>>>>>>>>    Procedure Set ComHeaderFaceDark OLE_COLOR value
15255>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
15256>>>>>>>>>>>    End_Procedure
15257>>>>>>>>>>>
15257>>>>>>>>>>>    Function ComFrameBorder Returns OLE_COLOR
15259>>>>>>>>>>>        OLE_COLOR retVal
15259>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
15260>>>>>>>>>>>        Function_Return retVal
15261>>>>>>>>>>>    End_Function
15262>>>>>>>>>>>
15262>>>>>>>>>>>    Procedure Set ComFrameBorder OLE_COLOR value
15264>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
15265>>>>>>>>>>>    End_Procedure
15266>>>>>>>>>>>
15266>>>>>>>>>>>    Function ComControlFace Returns OLE_COLOR
15268>>>>>>>>>>>        OLE_COLOR retVal
15268>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
15269>>>>>>>>>>>        Function_Return retVal
15270>>>>>>>>>>>    End_Function
15271>>>>>>>>>>>
15271>>>>>>>>>>>    Procedure Set ComControlFace OLE_COLOR value
15273>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
15274>>>>>>>>>>>    End_Procedure
15275>>>>>>>>>>>
15275>>>>>>>>>>>    Function ComBorderHighlight Returns OLE_COLOR
15277>>>>>>>>>>>        OLE_COLOR retVal
15277>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
15278>>>>>>>>>>>        Function_Return retVal
15279>>>>>>>>>>>    End_Function
15280>>>>>>>>>>>
15280>>>>>>>>>>>    Procedure Set ComBorderHighlight OLE_COLOR value
15282>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
15283>>>>>>>>>>>    End_Procedure
15284>>>>>>>>>>>
15284>>>>>>>>>>>    Function ComButtonSelected Returns OLE_COLOR
15286>>>>>>>>>>>        OLE_COLOR retVal
15286>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
15287>>>>>>>>>>>        Function_Return retVal
15288>>>>>>>>>>>    End_Function
15289>>>>>>>>>>>
15289>>>>>>>>>>>    Procedure Set ComButtonSelected OLE_COLOR value
15291>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
15292>>>>>>>>>>>    End_Procedure
15293>>>>>>>>>>>
15293>>>>>>>>>>>    Function ComButtonNormal Returns OLE_COLOR
15295>>>>>>>>>>>        OLE_COLOR retVal
15295>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to retVal
15296>>>>>>>>>>>        Function_Return retVal
15297>>>>>>>>>>>    End_Function
15298>>>>>>>>>>>
15298>>>>>>>>>>>    Procedure Set ComButtonNormal OLE_COLOR value
15300>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to value
15301>>>>>>>>>>>    End_Procedure
15302>>>>>>>>>>>
15302>>>>>>>>>>>    Function ComNormalText Returns OLE_COLOR
15304>>>>>>>>>>>        OLE_COLOR retVal
15304>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
15305>>>>>>>>>>>        Function_Return retVal
15306>>>>>>>>>>>    End_Function
15307>>>>>>>>>>>
15307>>>>>>>>>>>    Procedure Set ComNormalText OLE_COLOR value
15309>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
15310>>>>>>>>>>>    End_Procedure
15311>>>>>>>>>>>
15311>>>>>>>>>>>    Function ComPressedText Returns OLE_COLOR
15313>>>>>>>>>>>        OLE_COLOR retVal
15313>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
15314>>>>>>>>>>>        Function_Return retVal
15315>>>>>>>>>>>    End_Function
15316>>>>>>>>>>>
15316>>>>>>>>>>>    Procedure Set ComPressedText OLE_COLOR value
15318>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
15319>>>>>>>>>>>    End_Procedure
15320>>>>>>>>>>>
15320>>>>>>>>>>>    Function ComSelectedText Returns OLE_COLOR
15322>>>>>>>>>>>        OLE_COLOR retVal
15322>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
15323>>>>>>>>>>>        Function_Return retVal
15324>>>>>>>>>>>    End_Function
15325>>>>>>>>>>>
15325>>>>>>>>>>>    Procedure Set ComSelectedText OLE_COLOR value
15327>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
15328>>>>>>>>>>>    End_Procedure
15329>>>>>>>>>>>
15329>>>>>>>>>>>    Function ComHighlightText Returns OLE_COLOR
15331>>>>>>>>>>>        OLE_COLOR retVal
15331>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_I4 to retVal
15332>>>>>>>>>>>        Function_Return retVal
15333>>>>>>>>>>>    End_Function
15334>>>>>>>>>>>
15334>>>>>>>>>>>    Procedure Set ComHighlightText OLE_COLOR value
15336>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_I4 to value
15337>>>>>>>>>>>    End_Procedure
15338>>>>>>>>>>>
15338>>>>>>>>>>>    Function ComDisabledText Returns OLE_COLOR
15340>>>>>>>>>>>        OLE_COLOR retVal
15340>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_I4 to retVal
15341>>>>>>>>>>>        Function_Return retVal
15342>>>>>>>>>>>    End_Function
15343>>>>>>>>>>>
15343>>>>>>>>>>>    Procedure Set ComDisabledText OLE_COLOR value
15345>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_I4 to value
15346>>>>>>>>>>>    End_Procedure
15347>>>>>>>>>>>
15347>>>>>>>>>>>    Function ComTabExcelSelectedLeftInnerBorder Returns OLE_COLOR
15349>>>>>>>>>>>        OLE_COLOR retVal
15349>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to retVal
15350>>>>>>>>>>>        Function_Return retVal
15351>>>>>>>>>>>    End_Function
15352>>>>>>>>>>>
15352>>>>>>>>>>>    Procedure Set ComTabExcelSelectedLeftInnerBorder OLE_COLOR value
15354>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to value
15355>>>>>>>>>>>    End_Procedure
15356>>>>>>>>>>>
15356>>>>>>>>>>>    Function ComTabExcelSelectedTopInnerBorder Returns OLE_COLOR
15358>>>>>>>>>>>        OLE_COLOR retVal
15358>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_I4 to retVal
15359>>>>>>>>>>>        Function_Return retVal
15360>>>>>>>>>>>    End_Function
15361>>>>>>>>>>>
15361>>>>>>>>>>>    Procedure Set ComTabExcelSelectedTopInnerBorder OLE_COLOR value
15363>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_I4 to value
15364>>>>>>>>>>>    End_Procedure
15365>>>>>>>>>>>
15365>>>>>>>>>>>    Function ComTabExcelSelectedRightInnerBorder Returns OLE_COLOR
15367>>>>>>>>>>>        OLE_COLOR retVal
15367>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
15368>>>>>>>>>>>        Function_Return retVal
15369>>>>>>>>>>>    End_Function
15370>>>>>>>>>>>
15370>>>>>>>>>>>    Procedure Set ComTabExcelSelectedRightInnerBorder OLE_COLOR value
15372>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
15373>>>>>>>>>>>    End_Procedure
15374>>>>>>>>>>>
15374>>>>>>>>>>>    Function ComTabExcelSelectedLeftOuterBorder Returns OLE_COLOR
15376>>>>>>>>>>>        OLE_COLOR retVal
15376>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_I4 to retVal
15377>>>>>>>>>>>        Function_Return retVal
15378>>>>>>>>>>>    End_Function
15379>>>>>>>>>>>
15379>>>>>>>>>>>    Procedure Set ComTabExcelSelectedLeftOuterBorder OLE_COLOR value
15381>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_I4 to value
15382>>>>>>>>>>>    End_Procedure
15383>>>>>>>>>>>
15383>>>>>>>>>>>    Function ComTabExcelSelectedRightOuterBorder Returns OLE_COLOR
15385>>>>>>>>>>>        OLE_COLOR retVal
15385>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_I4 to retVal
15386>>>>>>>>>>>        Function_Return retVal
15387>>>>>>>>>>>    End_Function
15388>>>>>>>>>>>
15388>>>>>>>>>>>    Procedure Set ComTabExcelSelectedRightOuterBorder OLE_COLOR value
15390>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_I4 to value
15391>>>>>>>>>>>    End_Procedure
15392>>>>>>>>>>>
15392>>>>>>>>>>>    Function ComTabExcelSelectedTopOuterBorder Returns OLE_COLOR
15394>>>>>>>>>>>        OLE_COLOR retVal
15394>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
15395>>>>>>>>>>>        Function_Return retVal
15396>>>>>>>>>>>    End_Function
15397>>>>>>>>>>>
15397>>>>>>>>>>>    Procedure Set ComTabExcelSelectedTopOuterBorder OLE_COLOR value
15399>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
15400>>>>>>>>>>>    End_Procedure
15401>>>>>>>>>>>
15401>>>>>>>>>>>    Function ComTabExcelNormalLeftInnerBorder Returns OLE_COLOR
15403>>>>>>>>>>>        OLE_COLOR retVal
15403>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_I4 to retVal
15404>>>>>>>>>>>        Function_Return retVal
15405>>>>>>>>>>>    End_Function
15406>>>>>>>>>>>
15406>>>>>>>>>>>    Procedure Set ComTabExcelNormalLeftInnerBorder OLE_COLOR value
15408>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_I4 to value
15409>>>>>>>>>>>    End_Procedure
15410>>>>>>>>>>>
15410>>>>>>>>>>>    Function ComTabExcelNormalTopInnerBorder Returns OLE_COLOR
15412>>>>>>>>>>>        OLE_COLOR retVal
15412>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_I4 to retVal
15413>>>>>>>>>>>        Function_Return retVal
15414>>>>>>>>>>>    End_Function
15415>>>>>>>>>>>
15415>>>>>>>>>>>    Procedure Set ComTabExcelNormalTopInnerBorder OLE_COLOR value
15417>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_I4 to value
15418>>>>>>>>>>>    End_Procedure
15419>>>>>>>>>>>
15419>>>>>>>>>>>    Function ComTabExcelNormalRightInnerBorder Returns OLE_COLOR
15421>>>>>>>>>>>        OLE_COLOR retVal
15421>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
15422>>>>>>>>>>>        Function_Return retVal
15423>>>>>>>>>>>    End_Function
15424>>>>>>>>>>>
15424>>>>>>>>>>>    Procedure Set ComTabExcelNormalRightInnerBorder OLE_COLOR value
15426>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
15427>>>>>>>>>>>    End_Procedure
15428>>>>>>>>>>>
15428>>>>>>>>>>>    Function ComTabExcelNormalLeftOuterBorder Returns OLE_COLOR
15430>>>>>>>>>>>        OLE_COLOR retVal
15430>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
15431>>>>>>>>>>>        Function_Return retVal
15432>>>>>>>>>>>    End_Function
15433>>>>>>>>>>>
15433>>>>>>>>>>>    Procedure Set ComTabExcelNormalLeftOuterBorder OLE_COLOR value
15435>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
15436>>>>>>>>>>>    End_Procedure
15437>>>>>>>>>>>
15437>>>>>>>>>>>    Function ComTabExcelNormalRightOuterBorder Returns OLE_COLOR
15439>>>>>>>>>>>        OLE_COLOR retVal
15439>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
15440>>>>>>>>>>>        Function_Return retVal
15441>>>>>>>>>>>    End_Function
15442>>>>>>>>>>>
15442>>>>>>>>>>>    Procedure Set ComTabExcelNormalRightOuterBorder OLE_COLOR value
15444>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
15445>>>>>>>>>>>    End_Procedure
15446>>>>>>>>>>>
15446>>>>>>>>>>>    Function ComTabExcelNormalTopOuterBorder Returns OLE_COLOR
15448>>>>>>>>>>>        OLE_COLOR retVal
15448>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to retVal
15449>>>>>>>>>>>        Function_Return retVal
15450>>>>>>>>>>>    End_Function
15451>>>>>>>>>>>
15451>>>>>>>>>>>    Procedure Set ComTabExcelNormalTopOuterBorder OLE_COLOR value
15453>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to value
15454>>>>>>>>>>>    End_Procedure
15455>>>>>>>>>>>
15455>>>>>>>>>>>    Function ComTabPropertyPageHighlight Returns OLE_COLOR
15457>>>>>>>>>>>        OLE_COLOR retVal
15457>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to retVal
15458>>>>>>>>>>>        Function_Return retVal
15459>>>>>>>>>>>    End_Function
15460>>>>>>>>>>>
15460>>>>>>>>>>>    Procedure Set ComTabPropertyPageHighlight OLE_COLOR value
15462>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to value
15463>>>>>>>>>>>    End_Procedure
15464>>>>>>>>>>>
15464>>>>>>>>>>>    Function ComTabPropertyPageShadow Returns OLE_COLOR
15466>>>>>>>>>>>        OLE_COLOR retVal
15466>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_I4 to retVal
15467>>>>>>>>>>>        Function_Return retVal
15468>>>>>>>>>>>    End_Function
15469>>>>>>>>>>>
15469>>>>>>>>>>>    Procedure Set ComTabPropertyPageShadow OLE_COLOR value
15471>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_I4 to value
15472>>>>>>>>>>>    End_Procedure
15473>>>>>>>>>>>
15473>>>>>>>>>>>    Function ComTabPropertyPageDarkShadow Returns OLE_COLOR
15475>>>>>>>>>>>        OLE_COLOR retVal
15475>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_I4 to retVal
15476>>>>>>>>>>>        Function_Return retVal
15477>>>>>>>>>>>    End_Function
15478>>>>>>>>>>>
15478>>>>>>>>>>>    Procedure Set ComTabPropertyPageDarkShadow OLE_COLOR value
15480>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_I4 to value
15481>>>>>>>>>>>    End_Procedure
15482>>>>>>>>>>>
15482>>>>>>>>>>>    Function ComTabPropertyPage2003DarkShadow Returns OLE_COLOR
15484>>>>>>>>>>>        OLE_COLOR retVal
15484>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
15485>>>>>>>>>>>        Function_Return retVal
15486>>>>>>>>>>>    End_Function
15487>>>>>>>>>>>
15487>>>>>>>>>>>    Procedure Set ComTabPropertyPage2003DarkShadow OLE_COLOR value
15489>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
15490>>>>>>>>>>>    End_Procedure
15491>>>>>>>>>>>
15491>>>>>>>>>>>    Function ComTabPropertyPage2003FrameBorder Returns OLE_COLOR
15493>>>>>>>>>>>        OLE_COLOR retVal
15493>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to retVal
15494>>>>>>>>>>>        Function_Return retVal
15495>>>>>>>>>>>    End_Function
15496>>>>>>>>>>>
15496>>>>>>>>>>>    Procedure Set ComTabPropertyPage2003FrameBorder OLE_COLOR value
15498>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to value
15499>>>>>>>>>>>    End_Procedure
15500>>>>>>>>>>>
15500>>>>>>>>>>>    Function ComTabPropertyPage2003BorderLeftHighlight Returns OLE_COLOR
15502>>>>>>>>>>>        OLE_COLOR retVal
15502>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
15503>>>>>>>>>>>        Function_Return retVal
15504>>>>>>>>>>>    End_Function
15505>>>>>>>>>>>
15505>>>>>>>>>>>    Procedure Set ComTabPropertyPage2003BorderLeftHighlight OLE_COLOR value
15507>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
15508>>>>>>>>>>>    End_Procedure
15509>>>>>>>>>>>
15509>>>>>>>>>>>    Function ComTabPropertyPage2003BorderTopHighlight Returns OLE_COLOR
15511>>>>>>>>>>>        OLE_COLOR retVal
15511>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
15512>>>>>>>>>>>        Function_Return retVal
15513>>>>>>>>>>>    End_Function
15514>>>>>>>>>>>
15514>>>>>>>>>>>    Procedure Set ComTabPropertyPage2003BorderTopHighlight OLE_COLOR value
15516>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
15517>>>>>>>>>>>    End_Procedure
15518>>>>>>>>>>>
15518>>>>>>>>>>>    Function ComTabStateButtonFaceLight Returns OLE_COLOR
15520>>>>>>>>>>>        OLE_COLOR retVal
15520>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
15521>>>>>>>>>>>        Function_Return retVal
15522>>>>>>>>>>>    End_Function
15523>>>>>>>>>>>
15523>>>>>>>>>>>    Procedure Set ComTabStateButtonFaceLight OLE_COLOR value
15525>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
15526>>>>>>>>>>>    End_Procedure
15527>>>>>>>>>>>
15527>>>>>>>>>>>    Function ComTabStateButtonFaceDark Returns OLE_COLOR
15529>>>>>>>>>>>        OLE_COLOR retVal
15529>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_I4 to retVal
15530>>>>>>>>>>>        Function_Return retVal
15531>>>>>>>>>>>    End_Function
15532>>>>>>>>>>>
15532>>>>>>>>>>>    Procedure Set ComTabStateButtonFaceDark OLE_COLOR value
15534>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_I4 to value
15535>>>>>>>>>>>    End_Procedure
15536>>>>>>>>>>>
15536>>>>>>>>>>>    Function ComTabStateButtonBorderTopLeft Returns OLE_COLOR
15538>>>>>>>>>>>        OLE_COLOR retVal
15538>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_I4 to retVal
15539>>>>>>>>>>>        Function_Return retVal
15540>>>>>>>>>>>    End_Function
15541>>>>>>>>>>>
15541>>>>>>>>>>>    Procedure Set ComTabStateButtonBorderTopLeft OLE_COLOR value
15543>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_I4 to value
15544>>>>>>>>>>>    End_Procedure
15545>>>>>>>>>>>
15545>>>>>>>>>>>    Function ComTabStateButtonBorderBottomRight Returns OLE_COLOR
15547>>>>>>>>>>>        OLE_COLOR retVal
15547>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 35 OLE_VT_I4 to retVal
15548>>>>>>>>>>>        Function_Return retVal
15549>>>>>>>>>>>    End_Function
15550>>>>>>>>>>>
15550>>>>>>>>>>>    Procedure Set ComTabStateButtonBorderBottomRight OLE_COLOR value
15552>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 35 OLE_VT_I4 to value
15553>>>>>>>>>>>    End_Procedure
15554>>>>>>>>>>>
15554>>>>>>>>>>>    Function ComPaneFace Returns OLE_COLOR
15556>>>>>>>>>>>        OLE_COLOR retVal
15556>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_I4 to retVal
15557>>>>>>>>>>>        Function_Return retVal
15558>>>>>>>>>>>    End_Function
15559>>>>>>>>>>>
15559>>>>>>>>>>>    Procedure Set ComPaneFace OLE_COLOR value
15561>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_I4 to value
15562>>>>>>>>>>>    End_Procedure
15563>>>>>>>>>>>
15563>>>>>>>>>>>    Function ComButtonHighlighted Returns OLE_COLOR
15565>>>>>>>>>>>        OLE_COLOR retVal
15565>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_I4 to retVal
15566>>>>>>>>>>>        Function_Return retVal
15567>>>>>>>>>>>    End_Function
15568>>>>>>>>>>>
15568>>>>>>>>>>>    Procedure Set ComButtonHighlighted OLE_COLOR value
15570>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_I4 to value
15571>>>>>>>>>>>    End_Procedure
15572>>>>>>>>>>>
15572>>>>>>>>>>>    Function ComPressedButton Returns OLE_COLOR
15574>>>>>>>>>>>        OLE_COLOR retVal
15574>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_I4 to retVal
15575>>>>>>>>>>>        Function_Return retVal
15576>>>>>>>>>>>    End_Function
15577>>>>>>>>>>>
15577>>>>>>>>>>>    Procedure Set ComPressedButton OLE_COLOR value
15579>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_I4 to value
15580>>>>>>>>>>>    End_Procedure
15581>>>>>>>>>>>
15581>>>>>>>>>>>    Function ComHighlightedCloseButton Returns OLE_COLOR
15583>>>>>>>>>>>        OLE_COLOR retVal
15583>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
15584>>>>>>>>>>>        Function_Return retVal
15585>>>>>>>>>>>    End_Function
15586>>>>>>>>>>>
15586>>>>>>>>>>>    Procedure Set ComHighlightedCloseButton OLE_COLOR value
15588>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
15589>>>>>>>>>>>    End_Procedure
15590>>>>>>>>>>>
15590>>>>>>>>>>>    Function ComSelectedPressedButton Returns OLE_COLOR
15592>>>>>>>>>>>        OLE_COLOR retVal
15592>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_I4 to retVal
15593>>>>>>>>>>>        Function_Return retVal
15594>>>>>>>>>>>    End_Function
15595>>>>>>>>>>>
15595>>>>>>>>>>>    Procedure Set ComSelectedPressedButton OLE_COLOR value
15597>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_I4 to value
15598>>>>>>>>>>>    End_Procedure
15599>>>>>>>>>>>
15599>>>>>>>>>>>    Function ComSelectedHighlightedButton Returns OLE_COLOR
15601>>>>>>>>>>>        OLE_COLOR retVal
15601>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 41 OLE_VT_I4 to retVal
15602>>>>>>>>>>>        Function_Return retVal
15603>>>>>>>>>>>    End_Function
15604>>>>>>>>>>>
15604>>>>>>>>>>>    Procedure Set ComSelectedHighlightedButton OLE_COLOR value
15606>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 41 OLE_VT_I4 to value
15607>>>>>>>>>>>    End_Procedure
15608>>>>>>>>>>>
15608>>>>>>>>>>>    Function ComButtonBorder Returns OLE_COLOR
15610>>>>>>>>>>>        OLE_COLOR retVal
15610>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 42 OLE_VT_I4 to retVal
15611>>>>>>>>>>>        Function_Return retVal
15612>>>>>>>>>>>    End_Function
15613>>>>>>>>>>>
15613>>>>>>>>>>>    Procedure Set ComButtonBorder OLE_COLOR value
15615>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 42 OLE_VT_I4 to value
15616>>>>>>>>>>>    End_Procedure
15617>>>>>>>>>>>
15617>>>>>>>>>>>    Function ComButtonBorderHot Returns OLE_COLOR
15619>>>>>>>>>>>        OLE_COLOR retVal
15619>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 43 OLE_VT_I4 to retVal
15620>>>>>>>>>>>        Function_Return retVal
15621>>>>>>>>>>>    End_Function
15622>>>>>>>>>>>
15622>>>>>>>>>>>    Procedure Set ComButtonBorderHot OLE_COLOR value
15624>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 43 OLE_VT_I4 to value
15625>>>>>>>>>>>    End_Procedure
15626>>>>>>>>>>>
15626>>>>>>>>>>>    Function ComHighlightCloseText Returns OLE_COLOR
15628>>>>>>>>>>>        OLE_COLOR retVal
15628>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 44 OLE_VT_I4 to retVal
15629>>>>>>>>>>>        Function_Return retVal
15630>>>>>>>>>>>    End_Function
15631>>>>>>>>>>>
15631>>>>>>>>>>>    Procedure Set ComHighlightCloseText OLE_COLOR value
15633>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 44 OLE_VT_I4 to value
15634>>>>>>>>>>>    End_Procedure
15635>>>>>>>>>>>
15635>>>>>>>>>>>    Function ComSelectedPressedText Returns OLE_COLOR
15637>>>>>>>>>>>        OLE_COLOR retVal
15637>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_I4 to retVal
15638>>>>>>>>>>>        Function_Return retVal
15639>>>>>>>>>>>    End_Function
15640>>>>>>>>>>>
15640>>>>>>>>>>>    Procedure Set ComSelectedPressedText OLE_COLOR value
15642>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_I4 to value
15643>>>>>>>>>>>    End_Procedure
15644>>>>>>>>>>>
15644>>>>>>>>>>>    Function ComSelectedHighlightedText Returns OLE_COLOR
15646>>>>>>>>>>>        OLE_COLOR retVal
15646>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_I4 to retVal
15647>>>>>>>>>>>        Function_Return retVal
15648>>>>>>>>>>>    End_Function
15649>>>>>>>>>>>
15649>>>>>>>>>>>    Procedure Set ComSelectedHighlightedText OLE_COLOR value
15651>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_I4 to value
15652>>>>>>>>>>>    End_Procedure
15653>>>>>>>>>>>
15653>>>>>>>>>>>    Function ComActiveFilesGlyph Returns OLE_COLOR
15655>>>>>>>>>>>        OLE_COLOR retVal
15655>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 47 OLE_VT_I4 to retVal
15656>>>>>>>>>>>        Function_Return retVal
15657>>>>>>>>>>>    End_Function
15658>>>>>>>>>>>
15658>>>>>>>>>>>    Procedure Set ComActiveFilesGlyph OLE_COLOR value
15660>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 47 OLE_VT_I4 to value
15661>>>>>>>>>>>    End_Procedure
15662>>>>>>>>>>>
15662>>>>>>>>>>>    Function ComActiveFilesGlyphHighlighted Returns OLE_COLOR
15664>>>>>>>>>>>        OLE_COLOR retVal
15664>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 48 OLE_VT_I4 to retVal
15665>>>>>>>>>>>        Function_Return retVal
15666>>>>>>>>>>>    End_Function
15667>>>>>>>>>>>
15667>>>>>>>>>>>    Procedure Set ComActiveFilesGlyphHighlighted OLE_COLOR value
15669>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 48 OLE_VT_I4 to value
15670>>>>>>>>>>>    End_Procedure
15671>>>>>>>>>>>
15671>>>>>>>>>>>    Function ComActiveFilesGlyphPressed Returns OLE_COLOR
15673>>>>>>>>>>>        OLE_COLOR retVal
15673>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 49 OLE_VT_I4 to retVal
15674>>>>>>>>>>>        Function_Return retVal
15675>>>>>>>>>>>    End_Function
15676>>>>>>>>>>>
15676>>>>>>>>>>>    Procedure Set ComActiveFilesGlyphPressed OLE_COLOR value
15678>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 49 OLE_VT_I4 to value
15679>>>>>>>>>>>    End_Procedure
15680>>>>>>>>>>>
15680>>>>>>>>>>>    Function ComActiveFilesBack Returns OLE_COLOR
15682>>>>>>>>>>>        OLE_COLOR retVal
15682>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to retVal
15683>>>>>>>>>>>        Function_Return retVal
15684>>>>>>>>>>>    End_Function
15685>>>>>>>>>>>
15685>>>>>>>>>>>    Procedure Set ComActiveFilesBack OLE_COLOR value
15687>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to value
15688>>>>>>>>>>>    End_Procedure
15689>>>>>>>>>>>
15689>>>>>>>>>>>    Function ComActiveFilesBackHighlighted Returns OLE_COLOR
15691>>>>>>>>>>>        OLE_COLOR retVal
15691>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_I4 to retVal
15692>>>>>>>>>>>        Function_Return retVal
15693>>>>>>>>>>>    End_Function
15694>>>>>>>>>>>
15694>>>>>>>>>>>    Procedure Set ComActiveFilesBackHighlighted OLE_COLOR value
15696>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_I4 to value
15697>>>>>>>>>>>    End_Procedure
15698>>>>>>>>>>>
15698>>>>>>>>>>>    Function ComActiveFilesBackPressed Returns OLE_COLOR
15700>>>>>>>>>>>        OLE_COLOR retVal
15700>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
15701>>>>>>>>>>>        Function_Return retVal
15702>>>>>>>>>>>    End_Function
15703>>>>>>>>>>>
15703>>>>>>>>>>>    Procedure Set ComActiveFilesBackPressed OLE_COLOR value
15705>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
15706>>>>>>>>>>>    End_Procedure
15707>>>>>>>>>>>End_Class
15708>>>>>>>>>>>
15708>>>>>>>>>>>// CoClass
15708>>>>>>>>>>>// CLSID: {C0DE2200-494B-4521-B709-C324C2C09578}
15708>>>>>>>>>>>Class cCJTabPaintManagerColorSet is a cComAutomationObject
15709>>>>>>>>>>>    Import_Class_Protocol cCJITabPaintManagerColorSet
15710>>>>>>>>>>>
15710>>>>>>>>>>>    Procedure Construct_Object
15712>>>>>>>>>>>        Forward Send Construct_Object
15714>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
15715>>>>>>>>>>>    End_Procedure
15716>>>>>>>>>>>End_Class
15717>>>>>>>>>>>
15717>>>>>>>>>>>// CLSID: {C0DE2200-9CE6-4D40-B6C5-3B9425FBB55A}
15717>>>>>>>>>>>Class cCJITabPaintManager is a Mixin
15718>>>>>>>>>>>
15718>>>>>>>>>>>    Function ComAppearance Returns XTPTabAppearanceStyle
15720>>>>>>>>>>>        XTPTabAppearanceStyle retVal
15720>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
15721>>>>>>>>>>>        Function_Return retVal
15722>>>>>>>>>>>    End_Function
15723>>>>>>>>>>>
15723>>>>>>>>>>>    Procedure Set ComAppearance XTPTabAppearanceStyle value
15725>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
15726>>>>>>>>>>>    End_Procedure
15727>>>>>>>>>>>
15727>>>>>>>>>>>    Function ComColor Returns XTPTabColorStyle
WARNING: 4543 Redefining function return type for GET_COMCOLOR with INTEGER (first defined as UINTEGER) ON LINE: 832 (15727) OF FILE: C:\Program Files\DataFlex 24.0\Pkg\cCJTabControlItem.pkg
15729>>>>>>>>>>>        XTPTabColorStyle retVal
15729>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
15730>>>>>>>>>>>        Function_Return retVal
15731>>>>>>>>>>>    End_Function
15732>>>>>>>>>>>
15732>>>>>>>>>>>    Procedure Set ComColor XTPTabColorStyle value
15734>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
15735>>>>>>>>>>>    End_Procedure
15736>>>>>>>>>>>
15736>>>>>>>>>>>    Function ComLayout Returns XTPTabLayoutStyle
15738>>>>>>>>>>>        XTPTabLayoutStyle retVal
15738>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
15739>>>>>>>>>>>        Function_Return retVal
15740>>>>>>>>>>>    End_Function
15741>>>>>>>>>>>
15741>>>>>>>>>>>    Procedure Set ComLayout XTPTabLayoutStyle value
15743>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
15744>>>>>>>>>>>    End_Procedure
15745>>>>>>>>>>>
15745>>>>>>>>>>>    Function ComPosition Returns XTPTabPosition
15747>>>>>>>>>>>        XTPTabPosition retVal
15747>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
15748>>>>>>>>>>>        Function_Return retVal
15749>>>>>>>>>>>    End_Function
15750>>>>>>>>>>>
15750>>>>>>>>>>>    Procedure Set ComPosition XTPTabPosition value
15752>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
15753>>>>>>>>>>>    End_Procedure
15754>>>>>>>>>>>
15754>>>>>>>>>>>    Function ComBoldSelected Returns Boolean
15756>>>>>>>>>>>        Boolean retVal
15756>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
15757>>>>>>>>>>>        Function_Return retVal
15758>>>>>>>>>>>    End_Function
15759>>>>>>>>>>>
15759>>>>>>>>>>>    Procedure Set ComBoldSelected Boolean value
15761>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
15762>>>>>>>>>>>    End_Procedure
15763>>>>>>>>>>>
15763>>>>>>>>>>>    Function ComHotTracking Returns Boolean
15765>>>>>>>>>>>        Boolean retVal
15765>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
15766>>>>>>>>>>>        Function_Return retVal
15767>>>>>>>>>>>    End_Function
15768>>>>>>>>>>>
15768>>>>>>>>>>>    Procedure Set ComHotTracking Boolean value
15770>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
15771>>>>>>>>>>>    End_Procedure
15772>>>>>>>>>>>
15772>>>>>>>>>>>    Function ComShowIcons Returns Boolean
15774>>>>>>>>>>>        Boolean retVal
15774>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
15775>>>>>>>>>>>        Function_Return retVal
15776>>>>>>>>>>>    End_Function
15777>>>>>>>>>>>
15777>>>>>>>>>>>    Procedure Set ComShowIcons Boolean value
15779>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
15780>>>>>>>>>>>    End_Procedure
15781>>>>>>>>>>>
15781>>>>>>>>>>>    Function ComDisableLunaColors Returns Boolean
15783>>>>>>>>>>>        Boolean retVal
15783>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
15784>>>>>>>>>>>        Function_Return retVal
15785>>>>>>>>>>>    End_Function
15786>>>>>>>>>>>
15786>>>>>>>>>>>    Procedure Set ComDisableLunaColors Boolean value
15788>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
15789>>>>>>>>>>>    End_Procedure
15790>>>>>>>>>>>
15790>>>>>>>>>>>    Function ComOneNoteColors Returns Boolean
15792>>>>>>>>>>>        Boolean retVal
15792>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
15793>>>>>>>>>>>        Function_Return retVal
15794>>>>>>>>>>>    End_Function
15795>>>>>>>>>>>
15795>>>>>>>>>>>    Procedure Set ComOneNoteColors Boolean value
15797>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
15798>>>>>>>>>>>    End_Procedure
15799>>>>>>>>>>>
15799>>>>>>>>>>>    Function ComClientFrame Returns XTPTabClientFrame
15801>>>>>>>>>>>        XTPTabClientFrame retVal
15801>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_I4 to retVal
15802>>>>>>>>>>>        Function_Return retVal
15803>>>>>>>>>>>    End_Function
15804>>>>>>>>>>>
15804>>>>>>>>>>>    Procedure Set ComClientFrame XTPTabClientFrame value
15806>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_I4 to value
15807>>>>>>>>>>>    End_Procedure
15808>>>>>>>>>>>
15808>>>>>>>>>>>    Function ComStaticFrame Returns Boolean
15810>>>>>>>>>>>        Boolean retVal
15810>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
15811>>>>>>>>>>>        Function_Return retVal
15812>>>>>>>>>>>    End_Function
15813>>>>>>>>>>>
15813>>>>>>>>>>>    Procedure Set ComStaticFrame Boolean value
15815>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
15816>>>>>>>>>>>    End_Procedure
15817>>>>>>>>>>>
15817>>>>>>>>>>>    Function ComDrawTextPathEllipsis Returns Boolean
15819>>>>>>>>>>>        Boolean retVal
15819>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
15820>>>>>>>>>>>        Function_Return retVal
15821>>>>>>>>>>>    End_Function
15822>>>>>>>>>>>
15822>>>>>>>>>>>    Procedure Set ComDrawTextPathEllipsis Boolean value
15824>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
15825>>>>>>>>>>>    End_Procedure
15826>>>>>>>>>>>
15826>>>>>>>>>>>    Function ComDrawTextNoPrefix Returns Boolean
15828>>>>>>>>>>>        Boolean retVal
15828>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
15829>>>>>>>>>>>        Function_Return retVal
15830>>>>>>>>>>>    End_Function
15831>>>>>>>>>>>
15831>>>>>>>>>>>    Procedure Set ComDrawTextNoPrefix Boolean value
15833>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
15834>>>>>>>>>>>    End_Procedure
15835>>>>>>>>>>>
15835>>>>>>>>>>>    Function ComFont Returns Variant
15837>>>>>>>>>>>        Variant retVal
15837>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
15838>>>>>>>>>>>        Function_Return retVal
15839>>>>>>>>>>>    End_Function
15840>>>>>>>>>>>
15840>>>>>>>>>>>    Procedure Set ComFont Variant value
15842>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
15843>>>>>>>>>>>    End_Procedure
15844>>>>>>>>>>>
15844>>>>>>>>>>>    Function ComMultiRowFixedSelection Returns Boolean
15846>>>>>>>>>>>        Boolean retVal
15846>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
15847>>>>>>>>>>>        Function_Return retVal
15848>>>>>>>>>>>    End_Function
15849>>>>>>>>>>>
15849>>>>>>>>>>>    Procedure Set ComMultiRowFixedSelection Boolean value
15851>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
15852>>>>>>>>>>>    End_Procedure
15853>>>>>>>>>>>
15853>>>>>>>>>>>    Function ComMultiRowJustified Returns Boolean
15855>>>>>>>>>>>        Boolean retVal
15855>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_BOOL to retVal
15856>>>>>>>>>>>        Function_Return retVal
15857>>>>>>>>>>>    End_Function
15858>>>>>>>>>>>
15858>>>>>>>>>>>    Procedure Set ComMultiRowJustified Boolean value
15860>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_BOOL to value
15861>>>>>>>>>>>    End_Procedure
15862>>>>>>>>>>>
15862>>>>>>>>>>>    Function ComToolTipBehaviour Returns XTPTabToolTipBehaviour
15864>>>>>>>>>>>        XTPTabToolTipBehaviour retVal
15864>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
15865>>>>>>>>>>>        Function_Return retVal
15866>>>>>>>>>>>    End_Function
15867>>>>>>>>>>>
15867>>>>>>>>>>>    Procedure Set ComToolTipBehaviour XTPTabToolTipBehaviour value
15869>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
15870>>>>>>>>>>>    End_Procedure
15871>>>>>>>>>>>
15871>>>>>>>>>>>    Function ComSelectTabOnDragOver Returns Integer
15873>>>>>>>>>>>        Integer retVal
15873>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to retVal
15874>>>>>>>>>>>        Function_Return retVal
15875>>>>>>>>>>>    End_Function
15876>>>>>>>>>>>
15876>>>>>>>>>>>    Procedure Set ComSelectTabOnDragOver Integer value
15878>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to value
15879>>>>>>>>>>>    End_Procedure
15880>>>>>>>>>>>
15880>>>>>>>>>>>    Function ComFillBackground Returns Boolean
15882>>>>>>>>>>>        Boolean retVal
15882>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_BOOL to retVal
15883>>>>>>>>>>>        Function_Return retVal
15884>>>>>>>>>>>    End_Function
15885>>>>>>>>>>>
15885>>>>>>>>>>>    Procedure Set ComFillBackground Boolean value
15887>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_BOOL to value
15888>>>>>>>>>>>    End_Procedure
15889>>>>>>>>>>>
15889>>>>>>>>>>>    Function ComRotateImageOnVerticalDraw Returns Boolean
15891>>>>>>>>>>>        Boolean retVal
15891>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
15892>>>>>>>>>>>        Function_Return retVal
15893>>>>>>>>>>>    End_Function
15894>>>>>>>>>>>
15894>>>>>>>>>>>    Procedure Set ComRotateImageOnVerticalDraw Boolean value
15896>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
15897>>>>>>>>>>>    End_Procedure
15898>>>>>>>>>>>
15898>>>>>>>>>>>    Function ComFixedTabWidth Returns Integer
15900>>>>>>>>>>>        Integer retVal
15900>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_I4 to retVal
15901>>>>>>>>>>>        Function_Return retVal
15902>>>>>>>>>>>    End_Function
15903>>>>>>>>>>>
15903>>>>>>>>>>>    Procedure Set ComFixedTabWidth Integer value
15905>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_I4 to value
15906>>>>>>>>>>>    End_Procedure
15907>>>>>>>>>>>
15907>>>>>>>>>>>    Function ComMinTabWidth Returns Integer
15909>>>>>>>>>>>        Integer retVal
15909>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
15910>>>>>>>>>>>        Function_Return retVal
15911>>>>>>>>>>>    End_Function
15912>>>>>>>>>>>
15912>>>>>>>>>>>    Procedure Set ComMinTabWidth Integer value
15914>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
15915>>>>>>>>>>>    End_Procedure
15916>>>>>>>>>>>
15916>>>>>>>>>>>    Function ComMaxTabWidth Returns Integer
15918>>>>>>>>>>>        Integer retVal
15918>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to retVal
15919>>>>>>>>>>>        Function_Return retVal
15920>>>>>>>>>>>    End_Function
15921>>>>>>>>>>>
15921>>>>>>>>>>>    Procedure Set ComMaxTabWidth Integer value
15923>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to value
15924>>>>>>>>>>>    End_Procedure
15925>>>>>>>>>>>
15925>>>>>>>>>>>    Function ComDrawTextFormat Returns XTPTabDrawTextFormat
15927>>>>>>>>>>>        XTPTabDrawTextFormat retVal
15927>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
15928>>>>>>>>>>>        Function_Return retVal
15929>>>>>>>>>>>    End_Function
15930>>>>>>>>>>>
15930>>>>>>>>>>>    Procedure Set ComDrawTextFormat XTPTabDrawTextFormat value
15932>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
15933>>>>>>>>>>>    End_Procedure
15934>>>>>>>>>>>
15934>>>>>>>>>>>    Function ComShowTabs Returns Boolean
15936>>>>>>>>>>>        Boolean retVal
15936>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to retVal
15937>>>>>>>>>>>        Function_Return retVal
15938>>>>>>>>>>>    End_Function
15939>>>>>>>>>>>
15939>>>>>>>>>>>    Procedure Set ComShowTabs Boolean value
15941>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to value
15942>>>>>>>>>>>    End_Procedure
15943>>>>>>>>>>>
15943>>>>>>>>>>>    Function ComClearTypeTextQuality Returns Boolean
15945>>>>>>>>>>>        Boolean retVal
15945>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_BOOL to retVal
15946>>>>>>>>>>>        Function_Return retVal
15947>>>>>>>>>>>    End_Function
15948>>>>>>>>>>>
15948>>>>>>>>>>>    Procedure Set ComClearTypeTextQuality Boolean value
15950>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_BOOL to value
15951>>>>>>>>>>>    End_Procedure
15952>>>>>>>>>>>
15952>>>>>>>>>>>    Function ComVerticalTextTopToBottom Returns Boolean
15954>>>>>>>>>>>        Boolean retVal
15954>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
15955>>>>>>>>>>>        Function_Return retVal
15956>>>>>>>>>>>    End_Function
15957>>>>>>>>>>>
15957>>>>>>>>>>>    Procedure Set ComVerticalTextTopToBottom Boolean value
15959>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
15960>>>>>>>>>>>    End_Procedure
15961>>>>>>>>>>>
15961>>>>>>>>>>>    Function ComMultiRowTabsOptimization Returns Boolean
15963>>>>>>>>>>>        Boolean retVal
15963>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_BOOL to retVal
15964>>>>>>>>>>>        Function_Return retVal
15965>>>>>>>>>>>    End_Function
15966>>>>>>>>>>>
15966>>>>>>>>>>>    Procedure Set ComMultiRowTabsOptimization Boolean value
15968>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_BOOL to value
15969>>>>>>>>>>>    End_Procedure
15970>>>>>>>>>>>
15970>>>>>>>>>>>    Function ComIsColorSupported XTPTabColorStyle llColor Returns Boolean
15972>>>>>>>>>>>        Handle hDispatchDriver
15972>>>>>>>>>>>        Boolean retVal
15972>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15973>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
15974>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
15975>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_BOOL to retVal
15976>>>>>>>>>>>        Function_Return retVal
15977>>>>>>>>>>>    End_Function
15978>>>>>>>>>>>
15978>>>>>>>>>>>    Function ComClientMargin Returns Variant
15980>>>>>>>>>>>        Handle hDispatchDriver
15980>>>>>>>>>>>        Variant retVal
15980>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15981>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_DISPATCH to retVal
15982>>>>>>>>>>>        Function_Return retVal
15983>>>>>>>>>>>    End_Function
15984>>>>>>>>>>>
15984>>>>>>>>>>>    Function ComControlMargin Returns Variant
15986>>>>>>>>>>>        Handle hDispatchDriver
15986>>>>>>>>>>>        Variant retVal
15986>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15987>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
15988>>>>>>>>>>>        Function_Return retVal
15989>>>>>>>>>>>    End_Function
15990>>>>>>>>>>>
15990>>>>>>>>>>>    Function ComHeaderMargin Returns Variant
15992>>>>>>>>>>>        Handle hDispatchDriver
15992>>>>>>>>>>>        Variant retVal
15992>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15993>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 15 OLE_VT_DISPATCH to retVal
15994>>>>>>>>>>>        Function_Return retVal
15995>>>>>>>>>>>    End_Function
15996>>>>>>>>>>>
15996>>>>>>>>>>>    Function ComButtonMargin Returns Variant
15998>>>>>>>>>>>        Handle hDispatchDriver
15998>>>>>>>>>>>        Variant retVal
15998>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15999>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
16000>>>>>>>>>>>        Function_Return retVal
16001>>>>>>>>>>>    End_Function
16002>>>>>>>>>>>
16002>>>>>>>>>>>    Function ComColorSet Returns Variant
16004>>>>>>>>>>>        Handle hDispatchDriver
16004>>>>>>>>>>>        Variant retVal
16004>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16005>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 19 OLE_VT_DISPATCH to retVal
16006>>>>>>>>>>>        Function_Return retVal
16007>>>>>>>>>>>    End_Function
16008>>>>>>>>>>>
16008>>>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
16010>>>>>>>>>>>        Handle hDispatchDriver
16010>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16011>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16012>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
16013>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
16014>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
16015>>>>>>>>>>>    End_Procedure
16016>>>>>>>>>>>End_Class
16017>>>>>>>>>>>
16017>>>>>>>>>>>// CoClass
16017>>>>>>>>>>>// CLSID: {C0DE2200-BDD4-4257-8CF4-A2AB1674C51E}
16017>>>>>>>>>>>Class cCJTabPaintManager is a cComAutomationObject
16018>>>>>>>>>>>    Import_Class_Protocol cCJITabPaintManager
16019>>>>>>>>>>>
16019>>>>>>>>>>>    Procedure Construct_Object
16021>>>>>>>>>>>        Forward Send Construct_Object
16023>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
16024>>>>>>>>>>>    End_Procedure
16025>>>>>>>>>>>End_Class
16026>>>>>>>>>>>
16026>>>>>>>>>>>// CLSID: {C0DE2200-9479-48D5-A14D-077A9FD5D276}
16026>>>>>>>>>>>Class cCJITabControlItem is a Mixin
16027>>>>>>>>>>>
16027>>>>>>>>>>>    Function ComCaption Returns String
16029>>>>>>>>>>>        String retVal
16029>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
16030>>>>>>>>>>>        Function_Return retVal
16031>>>>>>>>>>>    End_Function
16032>>>>>>>>>>>
16032>>>>>>>>>>>    Procedure Set ComCaption String value
16034>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
16035>>>>>>>>>>>    End_Procedure
16036>>>>>>>>>>>
16036>>>>>>>>>>>    Function ComTag Returns Variant
16038>>>>>>>>>>>        Variant retVal
16038>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_VARIANT to retVal
16039>>>>>>>>>>>        Function_Return retVal
16040>>>>>>>>>>>    End_Function
16041>>>>>>>>>>>
16041>>>>>>>>>>>    Procedure Set ComTag Variant value
16043>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_VARIANT to value
16044>>>>>>>>>>>    End_Procedure
16045>>>>>>>>>>>
16045>>>>>>>>>>>    Function ComSelected Returns Boolean
16047>>>>>>>>>>>        Boolean retVal
16047>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
16048>>>>>>>>>>>        Function_Return retVal
16049>>>>>>>>>>>    End_Function
16050>>>>>>>>>>>
16050>>>>>>>>>>>    Procedure Set ComSelected Boolean value
16052>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
16053>>>>>>>>>>>    End_Procedure
16054>>>>>>>>>>>
16054>>>>>>>>>>>    Function ComImage Returns Integer
16056>>>>>>>>>>>        Integer retVal
16056>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
16057>>>>>>>>>>>        Function_Return retVal
16058>>>>>>>>>>>    End_Function
16059>>>>>>>>>>>
16059>>>>>>>>>>>    Procedure Set ComImage Integer value
16061>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
16062>>>>>>>>>>>    End_Procedure
16063>>>>>>>>>>>
16063>>>>>>>>>>>    Function ComColor Returns OLE_COLOR
16065>>>>>>>>>>>        OLE_COLOR retVal
16065>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
16066>>>>>>>>>>>        Function_Return retVal
16067>>>>>>>>>>>    End_Function
16068>>>>>>>>>>>
16068>>>>>>>>>>>    Procedure Set ComColor OLE_COLOR value
16070>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
16071>>>>>>>>>>>    End_Procedure
16072>>>>>>>>>>>
16072>>>>>>>>>>>    Function ComVisible Returns Boolean
16074>>>>>>>>>>>        Boolean retVal
16074>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
16075>>>>>>>>>>>        Function_Return retVal
16076>>>>>>>>>>>    End_Function
16077>>>>>>>>>>>
16077>>>>>>>>>>>    Procedure Set ComVisible Boolean value
16079>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
16080>>>>>>>>>>>    End_Procedure
16081>>>>>>>>>>>
16081>>>>>>>>>>>    Function ComEnabled Returns Boolean
16083>>>>>>>>>>>        Boolean retVal
16083>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
16084>>>>>>>>>>>        Function_Return retVal
16085>>>>>>>>>>>    End_Function
16086>>>>>>>>>>>
16086>>>>>>>>>>>    Procedure Set ComEnabled Boolean value
16088>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
16089>>>>>>>>>>>    End_Procedure
16090>>>>>>>>>>>
16090>>>>>>>>>>>    Function ComToolTip Returns String
16092>>>>>>>>>>>        String retVal
16092>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
16093>>>>>>>>>>>        Function_Return retVal
16094>>>>>>>>>>>    End_Function
16095>>>>>>>>>>>
16095>>>>>>>>>>>    Procedure Set ComToolTip String value
16097>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
16098>>>>>>>>>>>    End_Procedure
16099>>>>>>>>>>>
16099>>>>>>>>>>>    Function ComClosable Returns Boolean
16101>>>>>>>>>>>        Boolean retVal
16101>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
16102>>>>>>>>>>>        Function_Return retVal
16103>>>>>>>>>>>    End_Function
16104>>>>>>>>>>>
16104>>>>>>>>>>>    Procedure Set ComClosable Boolean value
16106>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
16107>>>>>>>>>>>    End_Procedure
16108>>>>>>>>>>>
16108>>>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
16110>>>>>>>>>>>        OLE_HANDLE retVal
16110>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to retVal
16111>>>>>>>>>>>        Function_Return retVal
16112>>>>>>>>>>>    End_Function
16113>>>>>>>>>>>
16113>>>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
16115>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to value
16116>>>>>>>>>>>    End_Procedure
16117>>>>>>>>>>>
16117>>>>>>>>>>>    Function ComIndex Returns Integer
16119>>>>>>>>>>>        Handle hDispatchDriver
16119>>>>>>>>>>>        Integer retVal
16119>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16120>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
16121>>>>>>>>>>>        Function_Return retVal
16122>>>>>>>>>>>    End_Function
16123>>>>>>>>>>>
16123>>>>>>>>>>>    Procedure ComMove Integer llIndex
16125>>>>>>>>>>>        Handle hDispatchDriver
16125>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16126>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16127>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
16128>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
16129>>>>>>>>>>>    End_Procedure
16130>>>>>>>>>>>
16130>>>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
16132>>>>>>>>>>>        Handle hDispatchDriver
16132>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16133>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16134>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
16135>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
16136>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
16137>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
16138>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
16139>>>>>>>>>>>    End_Procedure
16140>>>>>>>>>>>
16140>>>>>>>>>>>    Procedure ComEnsureVisible
16142>>>>>>>>>>>        Handle hDispatchDriver
16142>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16143>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
16144>>>>>>>>>>>    End_Procedure
16145>>>>>>>>>>>End_Class
16146>>>>>>>>>>>
16146>>>>>>>>>>>// CoClass
16146>>>>>>>>>>>// CLSID: {C0DE2200-9808-4CBF-BAC2-F2455C8C8A46}
16146>>>>>>>>>>>Class cCJComTabControlItem is a cComAutomationObject
16147>>>>>>>>>>>    Import_Class_Protocol cCJITabControlItem
16148>>>>>>>>>>>
16148>>>>>>>>>>>    Procedure Construct_Object
16150>>>>>>>>>>>        Forward Send Construct_Object
16152>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
16153>>>>>>>>>>>    End_Procedure
16154>>>>>>>>>>>End_Class
16155>>>>>>>>>>>
16155>>>>>>>>>Use cCJDataObject.pkg       // cCJDataObjectFile, cCJDataObject
Including file: cCJDataObject.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJDataObject.pkg)
16155>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
16155>>>>>>>>>>>Use FlexCom20.pkg
16155>>>>>>>>>>>
16155>>>>>>>>>>>// CLSID: {C0DE2200-604D-4242-954B-DF38BBFA8BE3}
16155>>>>>>>>>>>Class cCJDataObjectFiles is a cComAutomationObject
16156>>>>>>>>>>>
16156>>>>>>>>>>>    Function ComItem Integer llIndex Returns String
16158>>>>>>>>>>>        Handle hDispatchDriver
16158>>>>>>>>>>>        String retVal
16158>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16159>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16160>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
16161>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_BSTR to retVal
16162>>>>>>>>>>>        Function_Return retVal
16163>>>>>>>>>>>    End_Function
16164>>>>>>>>>>>
16164>>>>>>>>>>>    Function ComCount Returns Integer
16166>>>>>>>>>>>        Handle hDispatchDriver
16166>>>>>>>>>>>        Integer retVal
16166>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16167>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
16168>>>>>>>>>>>        Function_Return retVal
16169>>>>>>>>>>>    End_Function
16170>>>>>>>>>>>
16170>>>>>>>>>>>    Function Com_NewEnum Returns Variant
16172>>>>>>>>>>>        Handle hDispatchDriver
16172>>>>>>>>>>>        Variant retVal
16172>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16173>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
16174>>>>>>>>>>>        Function_Return retVal
16175>>>>>>>>>>>    End_Function
16176>>>>>>>>>>>End_Class
16177>>>>>>>>>>>
16177>>>>>>>>>>>// CLSID: {C0DE2200-300E-4EB2-AE9B-6F1BA025DF31}
16177>>>>>>>>>>>Class cCJDataObject is a cComAutomationObject
16178>>>>>>>>>>>
16178>>>>>>>>>>>    Function ComGetFormat Integer llFormat Returns Boolean
16180>>>>>>>>>>>        Handle hDispatchDriver
16180>>>>>>>>>>>        Boolean retVal
16180>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16181>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16182>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llFormat
16183>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
16184>>>>>>>>>>>        Function_Return retVal
16185>>>>>>>>>>>    End_Function
16186>>>>>>>>>>>
16186>>>>>>>>>>>    Function ComFiles Returns Variant
16188>>>>>>>>>>>        Handle hDispatchDriver
16188>>>>>>>>>>>        Variant retVal
16188>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16189>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
16190>>>>>>>>>>>        Function_Return retVal
16191>>>>>>>>>>>    End_Function
16192>>>>>>>>>>>
16192>>>>>>>>>>>    Function ComGetData Integer llFormat Returns Variant
16194>>>>>>>>>>>        Handle hDispatchDriver
16194>>>>>>>>>>>        Variant retVal
16194>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16195>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16196>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llFormat
16197>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_VARIANT to retVal
16198>>>>>>>>>>>        Function_Return retVal
16199>>>>>>>>>>>    End_Function
16200>>>>>>>>>>>
16200>>>>>>>>>>>    Procedure ComSetData Variant llvValue Variant llFormat
16202>>>>>>>>>>>        Handle hDispatchDriver
16202>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16203>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16204>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llvValue
16205>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormat
16206>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
16207>>>>>>>>>>>    End_Procedure
16208>>>>>>>>>>>
16208>>>>>>>>>>>    Procedure ComClear
16210>>>>>>>>>>>        Handle hDispatchDriver
16210>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16211>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
16212>>>>>>>>>>>    End_Procedure
16213>>>>>>>>>>>End_Class
16214>>>>>>>>>>>
16214>>>>>>>>>Use cCJResourceImages.pkg   // cCJResourceImages
Including file: cCJResourceImages.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJResourceImages.pkg)
16214>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
16214>>>>>>>>>>>Use FlexCom20.pkg
16214>>>>>>>>>>>
16214>>>>>>>>>>>// CLSID: {C0DE2200-FDDA-45CE-BBFB-C5E3EE3C4E7B}
16214>>>>>>>>>>>Class cCJResourceImages is a cComAutomationObject
16215>>>>>>>>>>>
16215>>>>>>>>>>>    Function ComLoadFromFile String llDllFileName String llIniFileName Returns Boolean
16217>>>>>>>>>>>        Handle hDispatchDriver
16217>>>>>>>>>>>        Boolean retVal
16217>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16218>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16219>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llDllFileName
16220>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llIniFileName
16221>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BOOL to retVal
16222>>>>>>>>>>>        Function_Return retVal
16223>>>>>>>>>>>    End_Function
16224>>>>>>>>>>>
16224>>>>>>>>>>>    Function ComDllFileName Returns String
16226>>>>>>>>>>>        Handle hDispatchDriver
16226>>>>>>>>>>>        String retVal
16226>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16227>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BSTR to retVal
16228>>>>>>>>>>>        Function_Return retVal
16229>>>>>>>>>>>    End_Function
16230>>>>>>>>>>>
16230>>>>>>>>>>>    Function ComIniFileName Returns String
16232>>>>>>>>>>>        Handle hDispatchDriver
16232>>>>>>>>>>>        String retVal
16232>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16233>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BSTR to retVal
16234>>>>>>>>>>>        Function_Return retVal
16235>>>>>>>>>>>    End_Function
16236>>>>>>>>>>>
16236>>>>>>>>>>>    Function ComGetColor String llSection String llKeyName Returns OLE_COLOR
16238>>>>>>>>>>>        Handle hDispatchDriver
16238>>>>>>>>>>>        OLE_COLOR retVal
16238>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16239>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16240>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llSection
16241>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llKeyName
16242>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
16243>>>>>>>>>>>        Function_Return retVal
16244>>>>>>>>>>>    End_Function
16245>>>>>>>>>>>End_Class
16246>>>>>>>>>>>
16246>>>>>>>>>Use cCJMarkupContext.pkg    // cCJMarkupContext
Including file: cCJMarkupContext.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJMarkupContext.pkg)
16246>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
16246>>>>>>>>>>>Use FlexCom20.pkg
16246>>>>>>>>>>>
16246>>>>>>>>>>>// Possible rendering smoothing modes
16246>>>>>>>>>>>Define XTPMarkupSmoothingMode for Integer
16246>>>>>>>>>>>    Define xtpMarkupSmoothingDefault for 0
16246>>>>>>>>>>>    Define xtpMarkupSmoothingNone for 1
16246>>>>>>>>>>>    Define xtpMarkupSmoothingHighSpeed for 2
16246>>>>>>>>>>>    Define xtpMarkupSmoothingHighQuality for 3
16246>>>>>>>>>>>    Define xtpMarkupSmoothingAntiAlias for 4
16246>>>>>>>>>>>
16246>>>>>>>>>>>// CLSID: {C0DE2200-D073-4043-AA8C-62B5BD8E522D}
16246>>>>>>>>>>>Class cCJMarkupContext is a cComAutomationObject
16247>>>>>>>>>>>
16247>>>>>>>>>>>    Function ComEnableGdiPlus Returns Boolean
16249>>>>>>>>>>>        Boolean retVal
16249>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
16250>>>>>>>>>>>        Function_Return retVal
16251>>>>>>>>>>>    End_Function
16252>>>>>>>>>>>
16252>>>>>>>>>>>    Procedure Set ComEnableGdiPlus Boolean value
16254>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
16255>>>>>>>>>>>    End_Procedure
16256>>>>>>>>>>>
16256>>>>>>>>>>>    Function ComDpiAware Returns Boolean
16258>>>>>>>>>>>        Boolean retVal
16258>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 43 OLE_VT_BOOL to retVal
16259>>>>>>>>>>>        Function_Return retVal
16260>>>>>>>>>>>    End_Function
16261>>>>>>>>>>>
16261>>>>>>>>>>>    Procedure Set ComDpiAware Boolean value
16263>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 43 OLE_VT_BOOL to value
16264>>>>>>>>>>>    End_Procedure
16265>>>>>>>>>>>
16265>>>>>>>>>>>    Function ComIcons Returns Variant
16267>>>>>>>>>>>        Variant retVal
16267>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_DISPATCH to retVal
16268>>>>>>>>>>>        Function_Return retVal
16269>>>>>>>>>>>    End_Function
16270>>>>>>>>>>>
16270>>>>>>>>>>>    Procedure Set ComIcons Variant value
16272>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_DISPATCH to value
16273>>>>>>>>>>>    End_Procedure
16274>>>>>>>>>>>
16274>>>>>>>>>>>    Function ComDefaultSmoothingMode Returns XTPMarkupSmoothingMode
16276>>>>>>>>>>>        XTPMarkupSmoothingMode retVal
16276>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 44 OLE_VT_I4 to retVal
16277>>>>>>>>>>>        Function_Return retVal
16278>>>>>>>>>>>    End_Function
16279>>>>>>>>>>>
16279>>>>>>>>>>>    Procedure Set ComDefaultSmoothingMode XTPMarkupSmoothingMode value
16281>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 44 OLE_VT_I4 to value
16282>>>>>>>>>>>    End_Procedure
16283>>>>>>>>>>>
16283>>>>>>>>>>>    Function ComDefaultTextSmoothingEnabled Returns Boolean
16285>>>>>>>>>>>        Boolean retVal
16285>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_BOOL to retVal
16286>>>>>>>>>>>        Function_Return retVal
16287>>>>>>>>>>>    End_Function
16288>>>>>>>>>>>
16288>>>>>>>>>>>    Procedure Set ComDefaultTextSmoothingEnabled Boolean value
16290>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_BOOL to value
16291>>>>>>>>>>>    End_Procedure
16292>>>>>>>>>>>
16292>>>>>>>>>>>    Procedure ComSetMethod Variant llHandler String llMethod
16294>>>>>>>>>>>        Handle hDispatchDriver
16294>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16295>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16296>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llHandler
16297>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llMethod
16298>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1 OLE_VT_VOID
16299>>>>>>>>>>>    End_Procedure
16300>>>>>>>>>>>
16300>>>>>>>>>>>    Procedure ComSetHandler Variant llHandler
16302>>>>>>>>>>>        Handle hDispatchDriver
16302>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16303>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16304>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llHandler
16305>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
16306>>>>>>>>>>>    End_Procedure
16307>>>>>>>>>>>
16307>>>>>>>>>>>    Function ComValidateXML String llText Returns String
16309>>>>>>>>>>>        Handle hDispatchDriver
16309>>>>>>>>>>>        String retVal
16309>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16310>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16311>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
16312>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_BSTR to retVal
16313>>>>>>>>>>>        Function_Return retVal
16314>>>>>>>>>>>    End_Function
16315>>>>>>>>>>>
16315>>>>>>>>>>>    Function ComToolTipContext Returns Variant
16317>>>>>>>>>>>        Handle hDispatchDriver
16317>>>>>>>>>>>        Variant retVal
16317>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16318>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 39 OLE_VT_DISPATCH to retVal
16319>>>>>>>>>>>        Function_Return retVal
16320>>>>>>>>>>>    End_Function
16321>>>>>>>>>>>
16321>>>>>>>>>>>    Procedure ComFreezeUpdates
16323>>>>>>>>>>>        Handle hDispatchDriver
16323>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16324>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 41 OLE_VT_VOID
16325>>>>>>>>>>>    End_Procedure
16326>>>>>>>>>>>
16326>>>>>>>>>>>    Procedure ComUnfreezeUpdates
16328>>>>>>>>>>>        Handle hDispatchDriver
16328>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16329>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 42 OLE_VT_VOID
16330>>>>>>>>>>>    End_Procedure
16331>>>>>>>>>>>End_Class
16332>>>>>>>>>>>
16332>>>>>>>>>
16332>>>>>>>>>Define XTPFrameShadowManagerFlags for Integer
16332>>>>>>>>>    Define xtpFrameShadowsDisabled for 1
16332>>>>>>>>>    Define xtpFrameShadowsInvisible for 2
16332>>>>>>>>>    Define xtpFrameShadowsNotResizeable for 4
16332>>>>>>>>>    Define xtpFrameShadowsDisabledInTSS for 8
16332>>>>>>>>>    Define xtpFrameShadowsInvisibleInTSS for 16
16332>>>>>>>>>
16332>>>>>>>>>Define XTPApplicationAmbientProperty for Integer
16332>>>>>>>>>    // Ambient accent color value. -1 should be used to specify a default accent color value determined individually by each suscribed client.
16332>>>>>>>>>    Define xtpApplicationAccentColor for 0
16332>>>>>>>>>    // Ambient state color value. -1 should be used to specify a default state color value determined individually by each suscribed client.
16332>>>>>>>>>    Define xtpApplicationStateColor for 1
16332>>>>>>>>>
16332>>>>>>>>>Define OLEDropConstants for Integer
16332>>>>>>>>>    Define xtpOLEDropNone for 0
16332>>>>>>>>>    Define xtpOLEDropManual for 1
16332>>>>>>>>>
16332>>>>>>>>>Define OLEDragConstants for Integer
16332>>>>>>>>>    Define xtpOLEDragManual for 0
16332>>>>>>>>>    Define xtpOLEDragAutomatic for 1
16332>>>>>>>>>
16332>>>>>>>>>Define XTPWorkspaceCommand for Integer
16332>>>>>>>>>    // Used to move a TabControlItem to the next tab group.
16332>>>>>>>>>    Define XTP_ID_WORKSPACE_MOVEPREVIOUS for 9155
16332>>>>>>>>>    // Used to move a TabControlItem to the previous tab group.
16332>>>>>>>>>    Define XTP_ID_WORKSPACE_MOVENEXT for 9156
16332>>>>>>>>>    // Used to create a new horizontal tab group.
16332>>>>>>>>>    Define XTP_ID_WORKSPACE_NEWHORIZONTAL for 9157
16332>>>>>>>>>    // Used to create a new vertical tab group.
16332>>>>>>>>>    Define XTP_ID_WORKSPACE_NEWVERTICAL for 9158
16332>>>>>>>>>
16332>>>>>>>>>Define XTPCommandBarStyle for Integer
16332>>>>>>>>>    Define XTP_CBRS_GRIPPER for 4194304
16332>>>>>>>>>
16332>>>>>>>>>Define XTPControlNotify for Integer
16332>>>>>>>>>    Define XTP_EN_SPINUP for 4104
16332>>>>>>>>>    Define XTP_EN_SPINDOWN for 4105
16332>>>>>>>>>    Define XTP_EN_BUDDYBUTTONCLICK for 4106
16332>>>>>>>>>    Define XTP_GN_PREVIEWSTART for 4112
16332>>>>>>>>>    Define XTP_GN_PREVIEWCANCEL for 4113
16332>>>>>>>>>    Define XTP_GN_PREVIEWAPPLY for 4114
16332>>>>>>>>>    Define XTP_GN_PREVIEWCHANGE for 4115
16332>>>>>>>>>    Define XTP_GN_STARTDRAG for 4116
16332>>>>>>>>>    Define XTP_GN_SELCHANGE for 4117
16332>>>>>>>>>    Define XTP_EN_CHANGE for 768
16332>>>>>>>>>    Define XTP_EN_SETFOCUS for 256
16332>>>>>>>>>    Define XTP_EN_KILLFOCUS for 512
16332>>>>>>>>>    Define XTP_CBN_EDITCHANGE for 5
16332>>>>>>>>>    Define XTP_CBN_SETFOCUS for 3
16332>>>>>>>>>    Define XTP_CBN_KILLFOCUS for 4
16332>>>>>>>>>    Define XTP_CBN_CLOSEUP for 8
16332>>>>>>>>>    Define XTP_CBN_DROPDOWN for 7
16332>>>>>>>>>    Define XTP_BS_TABCHANGED for 4352
16332>>>>>>>>>
16332>>>>>>>>>// Bar Position
16332>>>>>>>>>Define XTPBarPosition for Integer
16332>>>>>>>>>    // Docked at top.
16332>>>>>>>>>    Define xtpBarTop for 0
16332>>>>>>>>>    // Docked at bottom.
16332>>>>>>>>>    Define xtpBarBottom for 1
16332>>>>>>>>>    // Docked at left.
16332>>>>>>>>>    Define xtpBarLeft for 2
16332>>>>>>>>>    // Docked at right.
16332>>>>>>>>>    Define xtpBarRight for 3
16332>>>>>>>>>    // Floated.
16332>>>>>>>>>    Define xtpBarFloating for 4
16332>>>>>>>>>    // Popuped.
16332>>>>>>>>>    Define xtpBarPopup for 5
16332>>>>>>>>>    // List box.
16332>>>>>>>>>    Define xtpBarListBox for 6
16332>>>>>>>>>    // ComboBoxGalleryPopup.
16332>>>>>>>>>    Define xtpBarComboBoxGalleryPopup for 8
16332>>>>>>>>>
16332>>>>>>>>>// Type of CommandBars
16332>>>>>>>>>Define XTPBarType for Integer
16332>>>>>>>>>    // Command bar is menu bar.
16332>>>>>>>>>    Define xtpBarTypeMenuBar for 0
16332>>>>>>>>>    // Command bar is toolbar.
16332>>>>>>>>>    Define xtpBarTypeNormal for 1
16332>>>>>>>>>    // Command bar is popup.
16332>>>>>>>>>    Define xtpBarTypePopup for 2
16332>>>>>>>>>    // Command bar is ribbon.
16332>>>>>>>>>    Define xtpBarTypeRibbon for 3
16332>>>>>>>>>
16332>>>>>>>>>// Control Type
16332>>>>>>>>>Define XTPControlType for Integer
16332>>>>>>>>>    // Type not defined.
16332>>>>>>>>>    Define xtpControlError for 0
16332>>>>>>>>>    // Button type.
16332>>>>>>>>>    Define xtpControlButton for 1
16332>>>>>>>>>    // Popup type.
16332>>>>>>>>>    Define xtpControlPopup for 2
16332>>>>>>>>>    // Button popup.
16332>>>>>>>>>    Define xtpControlButtonPopup for 3
16332>>>>>>>>>    // Split button popup.
16332>>>>>>>>>    Define xtpControlSplitButtonPopup for 4
16332>>>>>>>>>    // Combo box button.
16332>>>>>>>>>    Define xtpControlComboBox for 5
16332>>>>>>>>>    // Edit control
16332>>>>>>>>>    Define xtpControlEdit for 6
16332>>>>>>>>>    // Custom control
16332>>>>>>>>>    Define xtpControlCustom for 7
16332>>>>>>>>>    // Label control
16332>>>>>>>>>    Define xtpControlLabel for 8
16332>>>>>>>>>    // CheckBox control
16332>>>>>>>>>    Define xtpControlCheckBox for 9
16332>>>>>>>>>    // Gallery control
16332>>>>>>>>>    Define xtpControlGallery for 10
16332>>>>>>>>>    // Radio Button control
16332>>>>>>>>>    Define xtpControlRadioButton for 11
16332>>>>>>>>>
16332>>>>>>>>>// Button Styles
16332>>>>>>>>>Define XTPButtonStyle for Integer
16332>>>>>>>>>    // Automatic style.
16332>>>>>>>>>    Define xtpButtonAutomatic for 0
16332>>>>>>>>>    // Button draw only caption.
16332>>>>>>>>>    Define xtpButtonCaption for 1
16332>>>>>>>>>    // Button draw only icon.
16332>>>>>>>>>    Define xtpButtonIcon for 2
16332>>>>>>>>>    // Button draw icon and caption.
16332>>>>>>>>>    Define xtpButtonIconAndCaption for 3
16332>>>>>>>>>    // Button draw icon and draw caption below icon.
16332>>>>>>>>>    Define xtpButtonIconAndCaptionBelow for 4
16332>>>>>>>>>    // Button draw icon, caption and description for popup bar.
16332>>>>>>>>>    Define xtpButtonCaptionAndDescription for 5
16332>>>>>>>>>
16332>>>>>>>>>// Control Flags
16332>>>>>>>>>Define XTPControlFlags for Integer
16332>>>>>>>>>    // Control is right aligned.
16332>>>>>>>>>    Define xtpFlagRightAlign for 1
16332>>>>>>>>>    // Control does not have focus.  The control will be skipped when performing actions such as tabbing through the controls in the command bar.
16332>>>>>>>>>    Define xtpFlagSkipFocus for 2
16332>>>>>>>>>    // To Pop up child bar left.  The popup will start from the right side of the control that was clicked and be displayed right-to-left. 
16332>>>>>>>>>    Define xtpFlagLeftPopup for 4
16332>>>>>>>>>    // Control is manually updated.
16332>>>>>>>>>    Define xtpFlagManualUpdate for 8
16332>>>>>>>>>    // Used to disable customization.  The user will not be able to move or edit the control.
16332>>>>>>>>>    Define xtpFlagNoMovable for 16
16332>>>>>>>>>    // Used to stretch a control to fill the maximum available width if the control is in the ActiveMenuBar.  This has no effect on controls in the toolbar.
16332>>>>>>>>>    Define xtpFlagControlStretched for 32
16332>>>>>>>>>    // Show tooltip always.
16332>>>>>>>>>    Define xtpFlagShowPopupBarTip for 64
16332>>>>>>>>>    // Wrap row for toolbar or popup bar.
16332>>>>>>>>>    Define xtpFlagWrapRow for 128
16332>>>>>>>>>    // Control is on the right side of Ribbon tabs.
16332>>>>>>>>>    Define xtpFlagRibbonTabBackground for 256
16332>>>>>>>>>
16332>>>>>>>>>// Combo Styles
16332>>>>>>>>>Define XTPComboStyle for Integer
16332>>>>>>>>>    // Normal combobox.
16332>>>>>>>>>    Define xtpComboNormal for 0
16332>>>>>>>>>    // Combobox with label.
16332>>>>>>>>>    Define xtpComboLabel for 1
16332>>>>>>>>>
16332>>>>>>>>>// Gallery Resizable style
16332>>>>>>>>>Define XTPGalleryResizable for Integer
16332>>>>>>>>>    // xtpAllowResizeWidth
16332>>>>>>>>>    Define xtpAllowResizeWidth for 1
16332>>>>>>>>>    // xtpAllowResizeHeight
16332>>>>>>>>>    Define xtpAllowResizeHeight for 2
16332>>>>>>>>>
16332>>>>>>>>>// Visual Themes
16332>>>>>>>>>Define XTPVisualTheme for Integer
16332>>>>>>>>>    // Office 2000 theme.
16332>>>>>>>>>    Define xtpThemeOffice2000 for 0
16332>>>>>>>>>    // Office XP theme.
16332>>>>>>>>>    Define xtpThemeOfficeXP for 1
16332>>>>>>>>>    // Office 2003 theme.
16332>>>>>>>>>    Define xtpThemeOffice2003 for 2
16332>>>>>>>>>    // Windows XP themes support.
16332>>>>>>>>>    Define xtpThemeNativeWinXP for 3
16332>>>>>>>>>    // VisualStudio 2005 theme.
16332>>>>>>>>>    Define xtpThemeWhidbey for 4
16332>>>>>>>>>    // Office 2007 theme.
16332>>>>>>>>>    Define xtpThemeResource for 5
16332>>>>>>>>>    // Ribbon theme.
16332>>>>>>>>>    Define xtpThemeRibbon for 6
16332>>>>>>>>>    // VisualStudio2008 theme.
16332>>>>>>>>>    Define xtpThemeVisualStudio2008 for 7
16332>>>>>>>>>    // VisualStudio6 theme.
16332>>>>>>>>>    Define xtpThemeVisualStudio6 for 8
16332>>>>>>>>>    // VisualStudio2010 theme.
16332>>>>>>>>>    Define xtpThemeVisualStudio2010 for 9
16332>>>>>>>>>    // Office 2007 System theme.
16332>>>>>>>>>    Define xtpThemeOffice2007System for 11
16332>>>>>>>>>    // Office 2013 theme.
16332>>>>>>>>>    Define xtpThemeOffice2013 for 12
16332>>>>>>>>>    // Office 2016 theme.
16332>>>>>>>>>    Define xtpThemeOffice2016 for 12
16332>>>>>>>>>    // VisualStudio2012 theme. Uses INI file
16332>>>>>>>>>    Define xtpThemeVisualStudio2012 for 13
16332>>>>>>>>>    // VisualStudio2012 Light theme.
16332>>>>>>>>>    Define xtpThemeVisualStudio2012Light for 14
16332>>>>>>>>>    // VisualStudio2012 Dark theme.
16332>>>>>>>>>    Define xtpThemeVisualStudio2012Dark for 15
16332>>>>>>>>>    // VisualStudio2015 theme.
16332>>>>>>>>>    Define xtpThemeVisualStudio2015 for 16
16332>>>>>>>>>    // Windows 10 theme.
16332>>>>>>>>>    Define xtpThemeNativeWindows10 for 17
16332>>>>>>>>>    // VisualStudio2017 theme.
16332>>>>>>>>>    Define xtpThemeVisualStudio2017 for 18
16332>>>>>>>>>    // VisualStudio2019 theme.
16332>>>>>>>>>    Define xtpThemeVisualStudio2019 for 19
16332>>>>>>>>>    // VisualStudio2022 theme.
16332>>>>>>>>>    Define xtpThemeVisualStudio2022 for 20
16332>>>>>>>>>
16332>>>>>>>>>// Backstage Separator Visual Themes
16332>>>>>>>>>Define XTPBackstageSeparatorControlAppearanceStyle for Integer
16332>>>>>>>>>    Define xtpSeparatorAppearanceResource for 6
16332>>>>>>>>>    Define xtpSeparatorAppearanceOffice2013 for 12
16332>>>>>>>>>    Define xtpSeparatorAppearanceOffice2016 for 12
16332>>>>>>>>>    Define xtpSeparatorAppearanceVisualStudio2015 for 16
16332>>>>>>>>>    Define xtpSeparatorAppearanceVisualStudio2017 for 17
16332>>>>>>>>>    Define xtpSeparatorAppearanceVisualStudio2019 for 18
16332>>>>>>>>>    Define xtpSeparatorAppearanceVisualStudio2022 for 19
16332>>>>>>>>>
16332>>>>>>>>>// Backstage Button Control Visual Themes
16332>>>>>>>>>Define XTPBackstageButtonControlAppearanceStyle for Integer
16332>>>>>>>>>    Define xtpAppearanceStandard for 0
16332>>>>>>>>>    Define xtpAppearanceFlat for 1
16332>>>>>>>>>    Define xtpAppearanceUltraFlat for 2
16332>>>>>>>>>    Define xtpAppearanceOffice2000 for 3
16332>>>>>>>>>    Define xtpAppearanceOfficeXP for 4
16332>>>>>>>>>    Define xtpAppearanceOffice2003 for 5
16332>>>>>>>>>    Define xtpAppearanceOffice2007 for 6
16332>>>>>>>>>    Define xtpAppearanceResource for 7
16332>>>>>>>>>    Define xtpAppearanceNativeWinXP for 8
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2005 for 9
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2008 for 10
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2010 for 11
16332>>>>>>>>>    Define xtpAppearanceOffice2013 for 12
16332>>>>>>>>>    Define xtpAppearanceOffice2016 for 12
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2012 for 13
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2012Light for 14
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2012Dark for 15
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2015 for 16
16332>>>>>>>>>    Define xtpAppearanceNativeWindows10 for 17
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2017 for 18
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2019 for 19
16332>>>>>>>>>    Define xtpAppearanceVisualStudio2022 for 20
16332>>>>>>>>>
16332>>>>>>>>>Define XTPRibbonBackstageStyle for Integer
16332>>>>>>>>>    // Backstage like in Office 2010.
16332>>>>>>>>>    Define xtpRibbonBackstageOffice2010Style for 0
16332>>>>>>>>>    // Backstage like in Office 2013/2016.
16332>>>>>>>>>    Define xtpRibbonBackstageOffice2013Style for 1
16332>>>>>>>>>    // Backstage like in Office 2013/2016.
16332>>>>>>>>>    Define xtpRibbonBackstageOffice2016Style for 1
16332>>>>>>>>>
16332>>>>>>>>>// ScrollBar Style
16332>>>>>>>>>Define XTPScrollBarStyle for Integer
16332>>>>>>>>>    Define xtpScrollStyleDefault for 0
16332>>>>>>>>>    Define xtpScrollStyleStandard for 1
16332>>>>>>>>>    Define xtpScrollStyleFlat for 2
16332>>>>>>>>>    Define xtpScrollStyleSystem for 3
16332>>>>>>>>>    Define xtpScrollStyleOffice for 4
16332>>>>>>>>>    Define xtpScrollStyleOffice2007Light for 5
16332>>>>>>>>>    Define xtpScrollStyleOffice2007Dark for 6
16332>>>>>>>>>    Define xtpScrollStyleSlider for 7
16332>>>>>>>>>
16332>>>>>>>>>Define XTPControlCustomVerticalOptions for Integer
16332>>>>>>>>>    Define xtpVerticalHide for 0
16332>>>>>>>>>    Define xtpVerticalShow for 1
16332>>>>>>>>>    Define xtpVerticalButton for 2
16332>>>>>>>>>
16332>>>>>>>>>// Text Orientation
16332>>>>>>>>>Define XTPBarTextOrientation for Integer
16332>>>>>>>>>    Define xtpBarTextAuto for 0
16332>>>>>>>>>    Define xtpBarTextVertical for 1
16332>>>>>>>>>    Define xtpBarTextHorizontal for 2
16332>>>>>>>>>
16332>>>>>>>>>// Edit Style
16332>>>>>>>>>Define XTPCommandBarEditStyle for Integer
16332>>>>>>>>>    Define xtpEditStyleLeft for 0
16332>>>>>>>>>    Define xtpEditStyleCenter for 1
16332>>>>>>>>>    Define xtpEditStyleRight for 2
16332>>>>>>>>>    Define xtpEditStyleLowerCase for 16
16332>>>>>>>>>    Define xtpEditStylePassword for 32
16332>>>>>>>>>
16332>>>>>>>>>Define OLETextImageRelationStyle for Integer
16332>>>>>>>>>    Define xtpOverlay for 0
16332>>>>>>>>>    Define xtpImageAboveText for 1
16332>>>>>>>>>    Define xtpTextAboveImage for 2
16332>>>>>>>>>    Define xtpImageBeforeText for 3
16332>>>>>>>>>    Define xtpTextBeforeImage for 4
16332>>>>>>>>>
16332>>>>>>>>>Define OLEPushButtonStyle for Integer
16332>>>>>>>>>    Define xtpButtonNormal for 0
16332>>>>>>>>>    Define xtpButtonDropDown for 1
16332>>>>>>>>>    Define xtpButtonDropDownRight for 2
16332>>>>>>>>>    Define xtpButtonSplitDropDown for 3
16332>>>>>>>>>    Define xtpButtonDropDownNoGlyph for 4
16332>>>>>>>>>
16332>>>>>>>>>Define OLEAlignmentStyle for Integer
16332>>>>>>>>>    Define xtpAlignLeft for 0
16332>>>>>>>>>    Define xtpAlignRight for 1
16332>>>>>>>>>    Define xtpAlignCenter for 2
16332>>>>>>>>>    Define xtpAlignMiddle for 0
16332>>>>>>>>>    Define xtpAlignTop for 4
16332>>>>>>>>>    Define xtpAlignBottom for 8
16332>>>>>>>>>
16332>>>>>>>>>// Docking Flags
16332>>>>>>>>>Define XTPToolBarFlags for Integer
16332>>>>>>>>>    // Allows docking at the top of the client area. 
16332>>>>>>>>>    Define xtpFlagAlignTop for 1
16332>>>>>>>>>    // Allows docking at the bottom of the client area. 
16332>>>>>>>>>    Define xtpFlagAlignBottom for 2
16332>>>>>>>>>    // Allows docking on the left side of the client area. 
16332>>>>>>>>>    Define xtpFlagAlignLeft for 4
16332>>>>>>>>>    // Allows docking on the left side of the client area. 
16332>>>>>>>>>    Define xtpFlagAlignRight for 8
16332>>>>>>>>>    // Allows docking on any side of the client area. 
16332>>>>>>>>>    Define xtpFlagAlignAny for 15
16332>>>>>>>>>    // Allows floating. 
16332>>>>>>>>>    Define xtpFlagFloating for 16
16332>>>>>>>>>    // Allow to hide wrapped controls.
16332>>>>>>>>>    Define xtpFlagHideWrap for 32
16332>>>>>>>>>    // Bar is stretched.
16332>>>>>>>>>    Define xtpFlagStretched for 64
16332>>>>>>>>>    // Bar is stretched, but not fill whole row
16332>>>>>>>>>    Define xtpFlagStretchedShared for 1048576
16332>>>>>>>>>    // Enables smart layout
16332>>>>>>>>>    Define xtpFlagSmartLayout for 2097152
16332>>>>>>>>>
16332>>>>>>>>>// MenuBar flags
16332>>>>>>>>>Define XTPMenuBarFlags for Integer
16332>>>>>>>>>    // To hide minimize box.
16332>>>>>>>>>    Define xtpFlagHideMinimizeBox for 256
16332>>>>>>>>>    // To hide maximize box.
16332>>>>>>>>>    Define xtpFlagHideMaximizeBox for 512
16332>>>>>>>>>    // To hide close button.
16332>>>>>>>>>    Define xtpFlagHideClose for 4096
16332>>>>>>>>>    // To add system MDI popup bar.
16332>>>>>>>>>    Define xtpFlagHideMDIButtons for 4864
16332>>>>>>>>>    Define xtpFlagAddMDISysPopup for 8192
16332>>>>>>>>>
16332>>>>>>>>>// Animation
16332>>>>>>>>>Define XTPAnimationType for Integer
16332>>>>>>>>>    // As defined in the 'Display' settings.
16332>>>>>>>>>    Define xtpAnimateWindowsDefault for 0
16332>>>>>>>>>    // Any of the first three in random selection.
16332>>>>>>>>>    Define xtpAnimateRandom for 1
16332>>>>>>>>>    // Unfold top to bottom.
16332>>>>>>>>>    Define xtpAnimateUnfold for 2
16332>>>>>>>>>    // Slide in from left.
16332>>>>>>>>>    Define xtpAnimateSlide for 3
16332>>>>>>>>>    // Fade-in.
16332>>>>>>>>>    Define xtpAnimateFade for 4
16332>>>>>>>>>    // No animation.
16332>>>>>>>>>    Define xtpAnimateNone for 5
16332>>>>>>>>>
16332>>>>>>>>>// Status Pane Styles
16332>>>>>>>>>Define XTPStatusPaneStyle for Integer
16332>>>>>>>>>    // When this flag is applied, the border will be removed from the indicated statusbar pane.
16332>>>>>>>>>    Define SBPS_NOBORDERS for 256
16332>>>>>>>>>    // When this flag is applied, the indicated statusbar pane will be disabled.
16332>>>>>>>>>    Define SBPS_DISABLED for 67108864
16332>>>>>>>>>    // The pane will stretched, it will not have a static width.
16332>>>>>>>>>    Define SBPS_STRETCH for 134217728
16332>>>>>>>>>
16332>>>>>>>>>// Tracking Flags
16332>>>>>>>>>Define XTPTrackPopupFlags for Integer
16332>>>>>>>>>    // Returns the Id of the control instead of triggering the execute event.  The execute event will not be triggered.
16332>>>>>>>>>    Define TPM_RETURNCMD for 256
16332>>>>>>>>>    // Allows you to choose a menu item using a right click.
16332>>>>>>>>>    Define TPM_RIGHTBUTTON for 2
16332>>>>>>>>>    // Right aligns the menu starting from the x and y coordinates.
16332>>>>>>>>>    Define TPM_RIGHTALIGN for 8
16332>>>>>>>>>    // Use the TPM_RECURSE flag to display a menu when another menu is already displayed. This is intended to support context menus within a menu.
16332>>>>>>>>>    Define TPM_RECURSE for 1
16332>>>>>>>>>
16332>>>>>>>>>// Control's Hide Flags
16332>>>>>>>>>Define XTPControlHideFlags for Integer
16332>>>>>>>>>    // Control is visible.
16332>>>>>>>>>    Define xtpNoHide for 0
16332>>>>>>>>>    // Control is hidden by generic reason.
16332>>>>>>>>>    Define xtpHideGeneric for 1
16332>>>>>>>>>    // Control is hidden by wrap.
16332>>>>>>>>>    Define xtpHideWrap for 2
16332>>>>>>>>>    // Control is hidden by docking position.
16332>>>>>>>>>    Define xtpHideDockingPosition for 4
16332>>>>>>>>>    // Control is hidden by scrolling.
16332>>>>>>>>>    Define xtpHideScroll for 8
16332>>>>>>>>>    // Control is hidden by customize settings.
16332>>>>>>>>>    Define xtpHideCustomize for 16
16332>>>>>>>>>    // If the control is rarely used and it is not visible because the intelligent menus option on and the command is a hidden command.
16332>>>>>>>>>    Define xtpHideExpand for 32
16332>>>>>>>>>    // Control is hidden because active template excluded from its list.
16332>>>>>>>>>    Define xtpHideDocTemplate for 64
16332>>>>>>>>>    // Control is hidden because inactive ribbon tab.
16332>>>>>>>>>    Define xtpHideRibbonTab for 128
16332>>>>>>>>>
16332>>>>>>>>>Define XTPKeyboardCuesShow for Integer
16332>>>>>>>>>    // Show keyboard cues always
16332>>>>>>>>>    Define xtpKeyboardCuesShowAlways for 0
16332>>>>>>>>>    // Never show keyboard cues
16332>>>>>>>>>    Define xtpKeyboardCuesShowNever for 1
16332>>>>>>>>>    // System defined
16332>>>>>>>>>    Define xtpKeyboardCuesShowWindowsDefault for 2
16332>>>>>>>>>
16332>>>>>>>>>Define XTPKeyboardCuesUse for Integer
16332>>>>>>>>>    // Activate only menu by using underlines
16332>>>>>>>>>    Define xtpKeyboardCuesUseMenuOnly for 0
16332>>>>>>>>>    // Activate menu and toolbars by using underlines
16332>>>>>>>>>    Define xtpKeyboardCuesUseAll for 1
16332>>>>>>>>>    // No using underlines
16332>>>>>>>>>    Define xtpKeyboardCuesUseNone for 2
16332>>>>>>>>>    // Only if Ampersant exists option
16332>>>>>>>>>    Define xtpKeyboardCuesUseAmpersandOnly for 4
16332>>>>>>>>>
16332>>>>>>>>>// Workspace Buttons
16332>>>>>>>>>Define XTPWorkspaceButtons for Integer
16332>>>>>>>>>    // To hide arrow buttons.
16332>>>>>>>>>    Define xtpWorkspaceHideArrows for 1
16332>>>>>>>>>    // To hide close button.
16332>>>>>>>>>    Define xtpWorkspaceHideClose for 2
16332>>>>>>>>>    // To hide arrow and close buttons.
16332>>>>>>>>>    Define xtpWorkspaceHideAll for 3
16332>>>>>>>>>    // To show active file button.
16332>>>>>>>>>    Define xtpWorkspaceShowActiveFiles for 4
16332>>>>>>>>>    // To hide arrow buttons always
16332>>>>>>>>>    Define xtpWorkspaceHideArrowsAlways for 9
16332>>>>>>>>>    // To show close button for all tabs
16332>>>>>>>>>    Define xtpWorkspaceShowCloseTab for 16
16332>>>>>>>>>    // To show close button for selected tabs.
16332>>>>>>>>>    Define xtpWorkspaceShowCloseSelectedTab for 32
16332>>>>>>>>>
16332>>>>>>>>>// Workspace New Tab Position
16332>>>>>>>>>Define XTPWorkspaceNewTabPosition for Integer
16332>>>>>>>>>    // New tab will be created after all tabs
16332>>>>>>>>>    Define xtpWorkspaceNewTabRightMost for 0
16332>>>>>>>>>    // New tab will be created before all tabs
16332>>>>>>>>>    Define xtpWorkspaceNewTabLeftMost for 1
16332>>>>>>>>>    // New tab will be created after active tab
16332>>>>>>>>>    Define xtpWorkspaceNewTabNextToActive for 2
16332>>>>>>>>>
16332>>>>>>>>>// Scale Mode
16332>>>>>>>>>Define XTPScaleMode for Integer
16332>>>>>>>>>    // Auto scale mode
16332>>>>>>>>>    Define xtpScaleAuto for 0
16332>>>>>>>>>    // Pixels scale mode
16332>>>>>>>>>    Define xtpScalePixel for 1
16332>>>>>>>>>    // Twips scale mode
16332>>>>>>>>>    Define xtpScaleTwip for 2
16332>>>>>>>>>
16332>>>>>>>>>Define XTPTextAlignment for Integer
16332>>>>>>>>>    Define xtpAlignmentLeft for 0
16332>>>>>>>>>    Define xtpAlignmentCenter for 1
16332>>>>>>>>>    Define xtpAlignmentRight for 2
16332>>>>>>>>>
16332>>>>>>>>>Define XTPShellAutoCompleteFlags for Integer
16332>>>>>>>>>    Define xtpShellAutoCompleteFileSystem for 1
16332>>>>>>>>>    Define xtpShellAutoCompleteFileSysOnly for 16
16332>>>>>>>>>    Define xtpShellAutoCompleteUrlAll for 6
16332>>>>>>>>>    Define xtpShellAutoCompleteUrlHistory for 2
16332>>>>>>>>>    Define xtpShellAutoCompleteUrlMRU for 4
16332>>>>>>>>>    Define xtpShellAutoCompleteAll for 7
16332>>>>>>>>>
16332>>>>>>>>>Define XTPRibbonTabContextColor for UInteger
16332>>>>>>>>>    Define xtpRibbonTabContextColorNone for 0
16332>>>>>>>>>    Define xtpRibbonTabContextColorBlue for 1
16332>>>>>>>>>    Define xtpRibbonTabContextColorYellow for 2
16332>>>>>>>>>    Define xtpRibbonTabContextColorGreen for 3
16332>>>>>>>>>    Define xtpRibbonTabContextColorRed for 4
16332>>>>>>>>>    Define xtpRibbonTabContextColorPurple for 5
16332>>>>>>>>>    Define xtpRibbonTabContextColorCyan for 6
16332>>>>>>>>>    Define xtpRibbonTabContextColorOrange for 7
16332>>>>>>>>>
16332>>>>>>>>>Define XTPCommandBarsSpecialCommands for Integer
16332>>>>>>>>>    Define XTP_ID_RIBBONCONTROLTAB for 9604
16332>>>>>>>>>    Define XTP_ID_RIBBONCUSTOMIZE for 9607
16332>>>>>>>>>    Define XTP_ID_CUSTOMIZE_ADDORREMOVE for 9122
16332>>>>>>>>>    Define XTP_ID_CUSTOMIZE_RESET for 9123
16332>>>>>>>>>    Define XTP_ID_TOOLBAR_EXPAND for 9148
16332>>>>>>>>>    Define XTP_ID_TOOLBAR_HIDE for 9149
16332>>>>>>>>>    Define XTP_ID_WORKSPACE_CANCEL for 9159
16332>>>>>>>>>    Define XTP_ID_WINDOWLIST for 35000
16332>>>>>>>>>    Define XTP_ID_CUSTOMIZE for 35001
16332>>>>>>>>>    Define XTP_ID_WORKSPACE_ACTIONS for 35002
16332>>>>>>>>>    Define XTP_ID_TOOLBARLIST for 59392
16332>>>>>>>>>    Define XTP_ID_FILE_MRU for 35003
16332>>>>>>>>>
16332>>>>>>>>>Define XTPSliderCommand for Integer
16332>>>>>>>>>    Define XTP_SB_LINELEFT for 0
16332>>>>>>>>>    Define XTP_SB_LINERIGHT for 1
16332>>>>>>>>>    Define XTP_SB_PAGELEFT for 2
16332>>>>>>>>>    Define XTP_SB_PAGERIGHT for 3
16332>>>>>>>>>    Define XTP_SB_THUMBTRACK for 5
16332>>>>>>>>>    Define XTP_SB_LEFT for 6
16332>>>>>>>>>    Define XTP_SB_RIGHT for 7
16332>>>>>>>>>    Define XTP_SB_ENDSCROLL for 8
16332>>>>>>>>>
16332>>>>>>>>>Define XTPPrintOrientation for Integer
16332>>>>>>>>>    Define xtpOrientationPortrait for 1
16332>>>>>>>>>    Define xtpOrientationLandscape for 2
16332>>>>>>>>>
16332>>>>>>>>>Define XTPBackImage for Integer
16332>>>>>>>>>    Define XTPNone for 0
16332>>>>>>>>>    Define XTPCalligraphy for 1
16332>>>>>>>>>    Define XTPCirclesAndStripes for 2
16332>>>>>>>>>    Define XTPCircuit for 3
16332>>>>>>>>>    Define XTPClouds for 4
16332>>>>>>>>>    Define XTPDoodleCircles for 5
16332>>>>>>>>>    Define XTPDoodleDiamonds for 6
16332>>>>>>>>>    Define XTPGeometry for 7
16332>>>>>>>>>    Define XTPLunchBox for 8
16332>>>>>>>>>    Define XTPSchoolSupplies for 9
16332>>>>>>>>>    Define XTPSpring for 10
16332>>>>>>>>>    Define XTPStars for 11
16332>>>>>>>>>    Define XTPStraws for 12
16332>>>>>>>>>    Define XTPTreeRings for 13
16332>>>>>>>>>    Define XTPUnderWater for 14
16332>>>>>>>>>
16332>>>>>>>>>// CLSID: {C0DE2200-87E4-460A-8491-32BD8DE3269C}
16332>>>>>>>>>Class cCJIFrameShadow is a Mixin
16333>>>>>>>>>
16333>>>>>>>>>    Function ComOuterSize Returns Integer
16335>>>>>>>>>        Integer retVal
16335>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
16336>>>>>>>>>        Function_Return retVal
16337>>>>>>>>>    End_Function
16338>>>>>>>>>
16338>>>>>>>>>    Procedure Set ComOuterSize Integer value
16340>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
16341>>>>>>>>>    End_Procedure
16342>>>>>>>>>
16342>>>>>>>>>    Function ComInnerSize Returns Integer
16344>>>>>>>>>        Integer retVal
16344>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
16345>>>>>>>>>        Function_Return retVal
16346>>>>>>>>>    End_Function
16347>>>>>>>>>
16347>>>>>>>>>    Procedure Set ComInnerSize Integer value
16349>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
16350>>>>>>>>>    End_Procedure
16351>>>>>>>>>
16351>>>>>>>>>    Function ComOffsetX Returns OLE_XSIZE_PIXELS
16353>>>>>>>>>        OLE_XSIZE_PIXELS retVal
16353>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
16354>>>>>>>>>        Function_Return retVal
16355>>>>>>>>>    End_Function
16356>>>>>>>>>
16356>>>>>>>>>    Procedure Set ComOffsetX OLE_XSIZE_PIXELS value
16358>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
16359>>>>>>>>>    End_Procedure
16360>>>>>>>>>
16360>>>>>>>>>    Function ComOffsetY Returns OLE_YSIZE_PIXELS
16362>>>>>>>>>        OLE_YSIZE_PIXELS retVal
16362>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
16363>>>>>>>>>        Function_Return retVal
16364>>>>>>>>>    End_Function
16365>>>>>>>>>
16365>>>>>>>>>    Procedure Set ComOffsetY OLE_YSIZE_PIXELS value
16367>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
16368>>>>>>>>>    End_Procedure
16369>>>>>>>>>
16369>>>>>>>>>    Function ComColor Returns OLE_COLOR
16371>>>>>>>>>        OLE_COLOR retVal
16371>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
16372>>>>>>>>>        Function_Return retVal
16373>>>>>>>>>    End_Function
16374>>>>>>>>>
16374>>>>>>>>>    Procedure Set ComColor OLE_COLOR value
16376>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
16377>>>>>>>>>    End_Procedure
16378>>>>>>>>>
16378>>>>>>>>>    Function ComTransparency Returns Short
16380>>>>>>>>>        Short retVal
16380>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I2 to retVal
16381>>>>>>>>>        Function_Return retVal
16382>>>>>>>>>    End_Function
16383>>>>>>>>>
16383>>>>>>>>>    Procedure Set ComTransparency Short value
16385>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I2 to value
16386>>>>>>>>>    End_Procedure
16387>>>>>>>>>
16387>>>>>>>>>    Function ComBlendingFactors Returns Variant
16389>>>>>>>>>        Variant retVal
16389>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_VARIANT to retVal
16390>>>>>>>>>        Function_Return retVal
16391>>>>>>>>>    End_Function
16392>>>>>>>>>
16392>>>>>>>>>    Procedure Set ComBlendingFactors Variant value
16394>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_VARIANT to value
16395>>>>>>>>>    End_Procedure
16396>>>>>>>>>
16396>>>>>>>>>    Function ComBlendingPositions Returns Variant
16398>>>>>>>>>        Variant retVal
16398>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_VARIANT to retVal
16399>>>>>>>>>        Function_Return retVal
16400>>>>>>>>>    End_Function
16401>>>>>>>>>
16401>>>>>>>>>    Procedure Set ComBlendingPositions Variant value
16403>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_VARIANT to value
16404>>>>>>>>>    End_Procedure
16405>>>>>>>>>
16405>>>>>>>>>    Function ComClipOwner Returns Boolean
16407>>>>>>>>>        Boolean retVal
16407>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
16408>>>>>>>>>        Function_Return retVal
16409>>>>>>>>>    End_Function
16410>>>>>>>>>
16410>>>>>>>>>    Procedure Set ComClipOwner Boolean value
16412>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
16413>>>>>>>>>    End_Procedure
16414>>>>>>>>>
16414>>>>>>>>>    Function ComOwner Returns OLE_HANDLE
16416>>>>>>>>>        Handle hDispatchDriver
16416>>>>>>>>>        OLE_HANDLE retVal
16416>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16417>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_I4 to retVal
16418>>>>>>>>>        Function_Return retVal
16419>>>>>>>>>    End_Function
16420>>>>>>>>>
16420>>>>>>>>>    Procedure ComFreezeUpdates Boolean llfreeze
16422>>>>>>>>>        Handle hDispatchDriver
16422>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16423>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16424>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llfreeze
16425>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 10 OLE_VT_VOID
16426>>>>>>>>>    End_Procedure
16427>>>>>>>>>
16427>>>>>>>>>    Procedure ComShow
16429>>>>>>>>>        Handle hDispatchDriver
16429>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16430>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
16431>>>>>>>>>    End_Procedure
16432>>>>>>>>>
16432>>>>>>>>>    Procedure ComHide
16434>>>>>>>>>        Handle hDispatchDriver
16434>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16435>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 12 OLE_VT_VOID
16436>>>>>>>>>    End_Procedure
16437>>>>>>>>>
16437>>>>>>>>>    Procedure ComUpdatePosition
16439>>>>>>>>>        Handle hDispatchDriver
16439>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16440>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
16441>>>>>>>>>    End_Procedure
16442>>>>>>>>>
16442>>>>>>>>>    Procedure ComSetBlendingOptions Variant llfactors Variant llpositions
16444>>>>>>>>>        Handle hDispatchDriver
16444>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16445>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16446>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llfactors
16447>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpositions
16448>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
16449>>>>>>>>>    End_Procedure
16450>>>>>>>>>End_Class
16451>>>>>>>>>
16451>>>>>>>>>// CoClass
16451>>>>>>>>>// CLSID: {C0DE2200-5B81-4C3C-A68E-3F0FF3771B6E}
16451>>>>>>>>>Class cCJFrameShadow is a cComAutomationObject
16452>>>>>>>>>    Import_Class_Protocol cCJIFrameShadow
16453>>>>>>>>>
16453>>>>>>>>>    Procedure Construct_Object
16455>>>>>>>>>        Forward Send Construct_Object
16457>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
16458>>>>>>>>>    End_Procedure
16459>>>>>>>>>End_Class
16460>>>>>>>>>
16460>>>>>>>>>// CLSID: {C0DE2200-F2DA-4617-AD07-FE7F08C16C0B}
16460>>>>>>>>>Class cCJIFrameShadows is a Mixin
16461>>>>>>>>>
16461>>>>>>>>>    Function Com_NewEnum Returns Variant
16463>>>>>>>>>        Handle hDispatchDriver
16463>>>>>>>>>        Variant retVal
16463>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16464>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
16465>>>>>>>>>        Function_Return retVal
16466>>>>>>>>>    End_Function
16467>>>>>>>>>End_Class
16468>>>>>>>>>
16468>>>>>>>>>// CoClass
16468>>>>>>>>>// CLSID: {C0DE2200-B4D6-492D-931A-9A39D207DE99}
16468>>>>>>>>>Class cCJFrameShadows is a cComAutomationObject
16469>>>>>>>>>    Import_Class_Protocol cCJIFrameShadows
16470>>>>>>>>>
16470>>>>>>>>>    Procedure Construct_Object
16472>>>>>>>>>        Forward Send Construct_Object
16474>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
16475>>>>>>>>>    End_Procedure
16476>>>>>>>>>End_Class
16477>>>>>>>>>
16477>>>>>>>>>// CLSID: {C0DE2200-9BF8-4337-959A-4629C9286C7A}
16477>>>>>>>>>Class cCJIFrameShadowManager is a Mixin
16478>>>>>>>>>
16478>>>>>>>>>    Function ComFlags Returns Integer
16480>>>>>>>>>        Integer retVal
16480>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
16481>>>>>>>>>        Function_Return retVal
16482>>>>>>>>>    End_Function
16483>>>>>>>>>
16483>>>>>>>>>    Procedure Set ComFlags Integer value
16485>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
16486>>>>>>>>>    End_Procedure
16487>>>>>>>>>
16487>>>>>>>>>    Function ComDefaultOuterSize Returns Integer
16489>>>>>>>>>        Integer retVal
16489>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
16490>>>>>>>>>        Function_Return retVal
16491>>>>>>>>>    End_Function
16492>>>>>>>>>
16492>>>>>>>>>    Procedure Set ComDefaultOuterSize Integer value
16494>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
16495>>>>>>>>>    End_Procedure
16496>>>>>>>>>
16496>>>>>>>>>    Function ComDefaultInnerSize Returns Integer
16498>>>>>>>>>        Integer retVal
16498>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
16499>>>>>>>>>        Function_Return retVal
16500>>>>>>>>>    End_Function
16501>>>>>>>>>
16501>>>>>>>>>    Procedure Set ComDefaultInnerSize Integer value
16503>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
16504>>>>>>>>>    End_Procedure
16505>>>>>>>>>
16505>>>>>>>>>    Function ComDefaultOffsetX Returns OLE_XSIZE_PIXELS
16507>>>>>>>>>        OLE_XSIZE_PIXELS retVal
16507>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
16508>>>>>>>>>        Function_Return retVal
16509>>>>>>>>>    End_Function
16510>>>>>>>>>
16510>>>>>>>>>    Procedure Set ComDefaultOffsetX OLE_XSIZE_PIXELS value
16512>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
16513>>>>>>>>>    End_Procedure
16514>>>>>>>>>
16514>>>>>>>>>    Function ComDefaultOffsetY Returns OLE_YSIZE_PIXELS
16516>>>>>>>>>        OLE_YSIZE_PIXELS retVal
16516>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
16517>>>>>>>>>        Function_Return retVal
16518>>>>>>>>>    End_Function
16519>>>>>>>>>
16519>>>>>>>>>    Procedure Set ComDefaultOffsetY OLE_YSIZE_PIXELS value
16521>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
16522>>>>>>>>>    End_Procedure
16523>>>>>>>>>
16523>>>>>>>>>    Function ComDefaultColor Returns OLE_COLOR
16525>>>>>>>>>        OLE_COLOR retVal
16525>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
16526>>>>>>>>>        Function_Return retVal
16527>>>>>>>>>    End_Function
16528>>>>>>>>>
16528>>>>>>>>>    Procedure Set ComDefaultColor OLE_COLOR value
16530>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
16531>>>>>>>>>    End_Procedure
16532>>>>>>>>>
16532>>>>>>>>>    Function ComDefaultTransparency Returns Short
16534>>>>>>>>>        Short retVal
16534>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I2 to retVal
16535>>>>>>>>>        Function_Return retVal
16536>>>>>>>>>    End_Function
16537>>>>>>>>>
16537>>>>>>>>>    Procedure Set ComDefaultTransparency Short value
16539>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I2 to value
16540>>>>>>>>>    End_Procedure
16541>>>>>>>>>
16541>>>>>>>>>    Function ComDefaultClipOwner Returns Boolean
16543>>>>>>>>>        Boolean retVal
16543>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
16544>>>>>>>>>        Function_Return retVal
16545>>>>>>>>>    End_Function
16546>>>>>>>>>
16546>>>>>>>>>    Procedure Set ComDefaultClipOwner Boolean value
16548>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
16549>>>>>>>>>    End_Procedure
16550>>>>>>>>>
16550>>>>>>>>>    Function ComDefaultBlendingFactors Returns Variant
16552>>>>>>>>>        Handle hDispatchDriver
16552>>>>>>>>>        Variant retVal
16552>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16553>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_VARIANT to retVal
16554>>>>>>>>>        Function_Return retVal
16555>>>>>>>>>    End_Function
16556>>>>>>>>>
16556>>>>>>>>>    Function ComDefaultBlendingPositions Returns Variant
16558>>>>>>>>>        Handle hDispatchDriver
16558>>>>>>>>>        Variant retVal
16558>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16559>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_VARIANT to retVal
16560>>>>>>>>>        Function_Return retVal
16561>>>>>>>>>    End_Function
16562>>>>>>>>>
16562>>>>>>>>>    Function ComIsShadowSupported Returns Boolean
16564>>>>>>>>>        Handle hDispatchDriver
16564>>>>>>>>>        Boolean retVal
16564>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16565>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_BOOL to retVal
16566>>>>>>>>>        Function_Return retVal
16567>>>>>>>>>    End_Function
16568>>>>>>>>>
16568>>>>>>>>>    Function ComEnableShadow OLE_HANDLE llhWnd OLE_COLOR llColor Integer llOuterSize Integer llInnerSize Integer llxOffset Integer llyOffset Short llTransparency Returns Variant
16570>>>>>>>>>        Handle hDispatchDriver
16570>>>>>>>>>        Variant retVal
16570>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16571>>>>>>>>>        Send PrepareParams to hDispatchDriver 7
16572>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16573>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
16574>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llOuterSize
16575>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llInnerSize
16576>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llxOffset
16577>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llyOffset
16578>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llTransparency
16579>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
16580>>>>>>>>>        Function_Return retVal
16581>>>>>>>>>    End_Function
16582>>>>>>>>>
16582>>>>>>>>>    Procedure ComDisableShadow OLE_HANDLE llhWnd
16584>>>>>>>>>        Handle hDispatchDriver
16584>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16585>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16586>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16587>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 12 OLE_VT_VOID
16588>>>>>>>>>    End_Procedure
16589>>>>>>>>>
16589>>>>>>>>>    Function ComIsShadowEnabled OLE_HANDLE llhWnd Returns Boolean
16591>>>>>>>>>        Handle hDispatchDriver
16591>>>>>>>>>        Boolean retVal
16591>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16592>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16593>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16594>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
16595>>>>>>>>>        Function_Return retVal
16596>>>>>>>>>    End_Function
16597>>>>>>>>>
16597>>>>>>>>>    Function ComGetShadow OLE_HANDLE llhWnd Returns Variant
16599>>>>>>>>>        Handle hDispatchDriver
16599>>>>>>>>>        Variant retVal
16599>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16600>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16601>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16602>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
16603>>>>>>>>>        Function_Return retVal
16604>>>>>>>>>    End_Function
16605>>>>>>>>>
16605>>>>>>>>>    Procedure ComFreezeUpdates Boolean llfreeze
16607>>>>>>>>>        Handle hDispatchDriver
16607>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16608>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16609>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llfreeze
16610>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
16611>>>>>>>>>    End_Procedure
16612>>>>>>>>>
16612>>>>>>>>>    Procedure ComSetGlobalOuterSize Integer llsize
16614>>>>>>>>>        Handle hDispatchDriver
16614>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16615>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16616>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llsize
16617>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
16618>>>>>>>>>    End_Procedure
16619>>>>>>>>>
16619>>>>>>>>>    Procedure ComSetGlobalInnerSize Integer llsize
16621>>>>>>>>>        Handle hDispatchDriver
16621>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16622>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16623>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llsize
16624>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
16625>>>>>>>>>    End_Procedure
16626>>>>>>>>>
16626>>>>>>>>>    Procedure ComSetGlobalOffset OLE_XSIZE_PIXELS llOffsetX OLE_YSIZE_PIXELS llOffsetY
16628>>>>>>>>>        Handle hDispatchDriver
16628>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16629>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16630>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llOffsetX
16631>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llOffsetY
16632>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
16633>>>>>>>>>    End_Procedure
16634>>>>>>>>>
16634>>>>>>>>>    Procedure ComSetGlobalColor OLE_COLOR llColor
16636>>>>>>>>>        Handle hDispatchDriver
16636>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16637>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16638>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
16639>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 19 OLE_VT_VOID
16640>>>>>>>>>    End_Procedure
16641>>>>>>>>>
16641>>>>>>>>>    Procedure ComSetGlobalTransparency Short llTransparency
16643>>>>>>>>>        Handle hDispatchDriver
16643>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16644>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16645>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llTransparency
16646>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
16647>>>>>>>>>    End_Procedure
16648>>>>>>>>>
16648>>>>>>>>>    Procedure ComSetDefaultBlendingOptions Variant llfactors Variant llpositions
16650>>>>>>>>>        Handle hDispatchDriver
16650>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16651>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16652>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llfactors
16653>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpositions
16654>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
16655>>>>>>>>>    End_Procedure
16656>>>>>>>>>
16656>>>>>>>>>    Procedure ComSetGlobalBlendingOptions Variant llfactors Variant llpositions
16658>>>>>>>>>        Handle hDispatchDriver
16658>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16659>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16660>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llfactors
16661>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpositions
16662>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
16663>>>>>>>>>    End_Procedure
16664>>>>>>>>>
16664>>>>>>>>>    Procedure ComSetGlobalClipOwner Boolean llclip
16666>>>>>>>>>        Handle hDispatchDriver
16666>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16667>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16668>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llclip
16669>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
16670>>>>>>>>>    End_Procedure
16671>>>>>>>>>
16671>>>>>>>>>    Function ComFrameShadows Returns Variant
16673>>>>>>>>>        Handle hDispatchDriver
16673>>>>>>>>>        Variant retVal
16673>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16674>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 23 OLE_VT_DISPATCH to retVal
16675>>>>>>>>>        Function_Return retVal
16676>>>>>>>>>    End_Function
16677>>>>>>>>>End_Class
16678>>>>>>>>>
16678>>>>>>>>>// CoClass
16678>>>>>>>>>// CLSID: {C0DE2200-DDA7-45FD-8AE8-B1A88391344D}
16678>>>>>>>>>Class cCJFrameShadowManager is a cComAutomationObject
16679>>>>>>>>>    Import_Class_Protocol cCJIFrameShadowManager
16680>>>>>>>>>
16680>>>>>>>>>    Procedure Construct_Object
16682>>>>>>>>>        Forward Send Construct_Object
16684>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
16685>>>>>>>>>    End_Procedure
16686>>>>>>>>>End_Class
16687>>>>>>>>>
16687>>>>>>>>>// CLSID: {C0DE2200-B997-432B-AB4F-439341A769E5}
16687>>>>>>>>>// Dispatch interface for CommandBars Control
16687>>>>>>>>>Class cCJ_DCommandBars is a Mixin
16688>>>>>>>>>
16688>>>>>>>>>    Function ComVisualTheme Returns XTPVisualTheme
16690>>>>>>>>>        XTPVisualTheme retVal
16690>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
16691>>>>>>>>>        Function_Return retVal
16692>>>>>>>>>    End_Function
16693>>>>>>>>>
16693>>>>>>>>>    Procedure Set ComVisualTheme XTPVisualTheme value
16695>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
16696>>>>>>>>>    End_Procedure
16697>>>>>>>>>
16697>>>>>>>>>    Function ComIcons Returns Variant
16699>>>>>>>>>        Variant retVal
16699>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
16700>>>>>>>>>        Function_Return retVal
16701>>>>>>>>>    End_Function
16702>>>>>>>>>
16702>>>>>>>>>    Procedure Set ComIcons Variant value
16704>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
16705>>>>>>>>>    End_Procedure
16706>>>>>>>>>
16706>>>>>>>>>    Function ComScaleMode Returns XTPScaleMode
16708>>>>>>>>>        XTPScaleMode retVal
16708>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
16709>>>>>>>>>        Function_Return retVal
16710>>>>>>>>>    End_Function
16711>>>>>>>>>
16711>>>>>>>>>    Procedure Set ComScaleMode XTPScaleMode value
16713>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
16714>>>>>>>>>    End_Procedure
16715>>>>>>>>>
16715>>>>>>>>>    Function ComRightToLeft Returns Boolean
16717>>>>>>>>>        Boolean retVal
16717>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to retVal
16718>>>>>>>>>        Function_Return retVal
16719>>>>>>>>>    End_Function
16720>>>>>>>>>
16720>>>>>>>>>    Procedure Set ComRightToLeft Boolean value
16722>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to value
16723>>>>>>>>>    End_Procedure
16724>>>>>>>>>
16724>>>>>>>>>    Function ComIsAllCaps Returns Boolean
16726>>>>>>>>>        Boolean retVal
16726>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_BOOL to retVal
16727>>>>>>>>>        Function_Return retVal
16728>>>>>>>>>    End_Function
16729>>>>>>>>>
16729>>>>>>>>>    Procedure Set ComIsAllCaps Boolean value
16731>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_BOOL to value
16732>>>>>>>>>    End_Procedure
16733>>>>>>>>>
16733>>>>>>>>>    Function ComIsAllowFrameTransparency Returns Boolean
16735>>>>>>>>>        Boolean retVal
16735>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_BOOL to retVal
16736>>>>>>>>>        Function_Return retVal
16737>>>>>>>>>    End_Function
16738>>>>>>>>>
16738>>>>>>>>>    Procedure Set ComIsAllowFrameTransparency Boolean value
16740>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_BOOL to value
16741>>>>>>>>>    End_Procedure
16742>>>>>>>>>
16742>>>>>>>>>    Function ComFontHeight Returns Integer
16744>>>>>>>>>        Integer retVal
16744>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 73 OLE_VT_I4 to retVal
16745>>>>>>>>>        Function_Return retVal
16746>>>>>>>>>    End_Function
16747>>>>>>>>>
16747>>>>>>>>>    Procedure Set ComFontHeight Integer value
16749>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 73 OLE_VT_I4 to value
16750>>>>>>>>>    End_Procedure
16751>>>>>>>>>
16751>>>>>>>>>    Function ComReCreateReparented Returns Boolean
16753>>>>>>>>>        Boolean retVal
16753>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
16754>>>>>>>>>        Function_Return retVal
16755>>>>>>>>>    End_Function
16756>>>>>>>>>
16756>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
16758>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
16759>>>>>>>>>    End_Procedure
16760>>>>>>>>>
16760>>>>>>>>>    Function ComCount Returns Integer
16762>>>>>>>>>        Handle hDispatchDriver
16762>>>>>>>>>        Integer retVal
16762>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16763>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
16764>>>>>>>>>        Function_Return retVal
16765>>>>>>>>>    End_Function
16766>>>>>>>>>
16766>>>>>>>>>    // Returns a specific item.
16766>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
16768>>>>>>>>>        Handle hDispatchDriver
16768>>>>>>>>>        Variant retVal
16768>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16769>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16770>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
16771>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
16772>>>>>>>>>        Function_Return retVal
16773>>>>>>>>>    End_Function
16774>>>>>>>>>
16774>>>>>>>>>    Function Com_NewEnum Returns Variant
16776>>>>>>>>>        Handle hDispatchDriver
16776>>>>>>>>>        Variant retVal
16776>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16777>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
16778>>>>>>>>>        Function_Return retVal
16779>>>>>>>>>    End_Function
16780>>>>>>>>>
16780>>>>>>>>>    Function ComAdd String llName XTPBarPosition llPosition Returns Variant
16782>>>>>>>>>        Handle hDispatchDriver
16782>>>>>>>>>        Variant retVal
16782>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16783>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16784>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
16785>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
16786>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
16787>>>>>>>>>        Function_Return retVal
16788>>>>>>>>>    End_Function
16789>>>>>>>>>
16789>>>>>>>>>    Procedure ComAddImageList Variant llImageList
16791>>>>>>>>>        Handle hDispatchDriver
16791>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16792>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16793>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llImageList
16794>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
16795>>>>>>>>>    End_Procedure
16796>>>>>>>>>
16796>>>>>>>>>    Function ComActiveMenuBar Returns Variant
16798>>>>>>>>>        Handle hDispatchDriver
16798>>>>>>>>>        Variant retVal
16798>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16799>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
16800>>>>>>>>>        Function_Return retVal
16801>>>>>>>>>    End_Function
16802>>>>>>>>>
16802>>>>>>>>>    Procedure ComGetClientRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
16804>>>>>>>>>        Handle hDispatchDriver
16804>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16805>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16806>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
16807>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
16808>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
16809>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
16810>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
16811>>>>>>>>>    End_Procedure
16812>>>>>>>>>
16812>>>>>>>>>    Procedure ComRecalcLayout
16814>>>>>>>>>        Handle hDispatchDriver
16814>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16815>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
16816>>>>>>>>>    End_Procedure
16817>>>>>>>>>
16817>>>>>>>>>    Function ComKeyBindings Returns Variant
16819>>>>>>>>>        Handle hDispatchDriver
16819>>>>>>>>>        Variant retVal
16819>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16820>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_DISPATCH to retVal
16821>>>>>>>>>        Function_Return retVal
16822>>>>>>>>>    End_Function
16823>>>>>>>>>
16823>>>>>>>>>    Procedure ComAddIconHandle Longptr llIcon Integer llCommand Integer llimageState Boolean llAlpha
16825>>>>>>>>>        Handle hDispatchDriver
16825>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16826>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16827>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llIcon
16828>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
16829>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
16830>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llAlpha
16831>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
16832>>>>>>>>>    End_Procedure
16833>>>>>>>>>
16833>>>>>>>>>    Function ComOptions Returns Variant
16835>>>>>>>>>        Handle hDispatchDriver
16835>>>>>>>>>        Variant retVal
16835>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16836>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
16837>>>>>>>>>        Function_Return retVal
16838>>>>>>>>>    End_Function
16839>>>>>>>>>
16839>>>>>>>>>    Procedure ComSaveCommandBars Variant llRegistryKey Variant llAppName Variant llSection
16841>>>>>>>>>        Handle hDispatchDriver
16841>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16842>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
16843>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRegistryKey
16844>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llAppName
16845>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSection
16846>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
16847>>>>>>>>>    End_Procedure
16848>>>>>>>>>
16848>>>>>>>>>    Procedure ComLoadCommandBars Variant llRegistryKey Variant llAppName Variant llSection
16850>>>>>>>>>        Handle hDispatchDriver
16850>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16851>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
16852>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRegistryKey
16853>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llAppName
16854>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSection
16855>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
16856>>>>>>>>>    End_Procedure
16857>>>>>>>>>
16857>>>>>>>>>    Procedure ComLoadDesignerBars Variant llFileNameOrResource Variant llInstance
16859>>>>>>>>>        Handle hDispatchDriver
16859>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16860>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16861>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFileNameOrResource
16862>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llInstance
16863>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
16864>>>>>>>>>    End_Procedure
16865>>>>>>>>>
16865>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
16867>>>>>>>>>        Handle hDispatchDriver
16867>>>>>>>>>        Variant retVal
16867>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16868>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16869>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
16870>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
16871>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
16872>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
16873>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
16874>>>>>>>>>        Function_Return retVal
16875>>>>>>>>>    End_Function
16876>>>>>>>>>
16876>>>>>>>>>    Procedure ComAboutBox
16878>>>>>>>>>        Handle hDispatchDriver
16878>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16879>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
16880>>>>>>>>>    End_Procedure
16881>>>>>>>>>
16881>>>>>>>>>    Procedure ComDockToolBar Variant llToolBar Integer llx Integer lly XTPBarPosition llPosition
16883>>>>>>>>>        Handle hDispatchDriver
16883>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16884>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16885>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llToolBar
16886>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
16887>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
16888>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
16889>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
16890>>>>>>>>>    End_Procedure
16891>>>>>>>>>
16891>>>>>>>>>    Function ComGetSpecialColor XTPColorManagerColor llIndex Returns OLE_COLOR
16893>>>>>>>>>        Handle hDispatchDriver
16893>>>>>>>>>        OLE_COLOR retVal
16893>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16894>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16895>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
16896>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 19 OLE_VT_I4 to retVal
16897>>>>>>>>>        Function_Return retVal
16898>>>>>>>>>    End_Function
16899>>>>>>>>>
16899>>>>>>>>>    Function ComShowTabWorkspace Boolean llShow Returns Variant
16901>>>>>>>>>        Handle hDispatchDriver
16901>>>>>>>>>        Variant retVal
16901>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16902>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16903>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShow
16904>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
16905>>>>>>>>>        Function_Return retVal
16906>>>>>>>>>    End_Function
16907>>>>>>>>>
16907>>>>>>>>>    Procedure ComMoveAlignedControl Variant llControl Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
16909>>>>>>>>>        Handle hDispatchDriver
16909>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16910>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
16911>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llControl
16912>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
16913>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
16914>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
16915>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
16916>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
16917>>>>>>>>>    End_Procedure
16918>>>>>>>>>
16918>>>>>>>>>    Function ComTabWorkspace Returns Variant
16920>>>>>>>>>        Handle hDispatchDriver
16920>>>>>>>>>        Variant retVal
16920>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16921>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 22 OLE_VT_DISPATCH to retVal
16922>>>>>>>>>        Function_Return retVal
16923>>>>>>>>>    End_Function
16924>>>>>>>>>
16924>>>>>>>>>    Procedure ComLoadStateFromString String llProfile Boolean llRestoreControls Boolean llRestoreOptions Boolean llSilent
16926>>>>>>>>>        Handle hDispatchDriver
16926>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16927>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16928>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
16929>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRestoreControls
16930>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRestoreOptions
16931>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSilent
16932>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
16933>>>>>>>>>    End_Procedure
16934>>>>>>>>>
16934>>>>>>>>>    Function ComSaveStateToString Boolean llSaveControls Boolean llSaveOnlyCustomized Boolean llSaveOptions Returns String
16936>>>>>>>>>        Handle hDispatchDriver
16936>>>>>>>>>        String retVal
16936>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16937>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
16938>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveControls
16939>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveOnlyCustomized
16940>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveOptions
16941>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 24 OLE_VT_BSTR to retVal
16942>>>>>>>>>        Function_Return retVal
16943>>>>>>>>>    End_Function
16944>>>>>>>>>
16944>>>>>>>>>    Function ComStatusBar Returns Variant
16946>>>>>>>>>        Handle hDispatchDriver
16946>>>>>>>>>        Variant retVal
16946>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16947>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 25 OLE_VT_DISPATCH to retVal
16948>>>>>>>>>        Function_Return retVal
16949>>>>>>>>>    End_Function
16950>>>>>>>>>
16950>>>>>>>>>    Function ComMessageBar Returns Variant
16952>>>>>>>>>        Handle hDispatchDriver
16952>>>>>>>>>        Variant retVal
16952>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16953>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 28 OLE_VT_DISPATCH to retVal
16954>>>>>>>>>        Function_Return retVal
16955>>>>>>>>>    End_Function
16956>>>>>>>>>
16956>>>>>>>>>    Procedure ComEnableCustomization Boolean llEnable
16958>>>>>>>>>        Handle hDispatchDriver
16958>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16959>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16960>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
16961>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 26 OLE_VT_VOID
16962>>>>>>>>>    End_Procedure
16963>>>>>>>>>
16963>>>>>>>>>    Function ComDesignerControls Returns Variant
16965>>>>>>>>>        Handle hDispatchDriver
16965>>>>>>>>>        Variant retVal
16965>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16966>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 27 OLE_VT_DISPATCH to retVal
16967>>>>>>>>>        Function_Return retVal
16968>>>>>>>>>    End_Function
16969>>>>>>>>>
16969>>>>>>>>>    Procedure ComEnableDefaultResetCustomizedToolbarChoice Boolean llEnable Boolean llDefaultYes
16971>>>>>>>>>        Handle hDispatchDriver
16971>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16972>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16973>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
16974>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llDefaultYes
16975>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 72 OLE_VT_VOID
16976>>>>>>>>>    End_Procedure
16977>>>>>>>>>
16977>>>>>>>>>    Function ComGetDispatch Returns Variant
16979>>>>>>>>>        Handle hDispatchDriver
16979>>>>>>>>>        Variant retVal
16979>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16980>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 31 OLE_VT_DISPATCH to retVal
16981>>>>>>>>>        Function_Return retVal
16982>>>>>>>>>    End_Function
16983>>>>>>>>>
16983>>>>>>>>>    Procedure ComSetMDIClient OLE_HANDLE llhWnd
16985>>>>>>>>>        Handle hDispatchDriver
16985>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16986>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16987>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16988>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
16989>>>>>>>>>    End_Procedure
16990>>>>>>>>>
16990>>>>>>>>>    Function ComGlobalSettings Returns Variant
16992>>>>>>>>>        Handle hDispatchDriver
16992>>>>>>>>>        Variant retVal
16992>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16993>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_DISPATCH to retVal
16994>>>>>>>>>        Function_Return retVal
16995>>>>>>>>>    End_Function
16996>>>>>>>>>
16996>>>>>>>>>    Procedure ComClosePopups
16998>>>>>>>>>        Handle hDispatchDriver
16998>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16999>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 34 OLE_VT_VOID
17000>>>>>>>>>    End_Procedure
17001>>>>>>>>>
17001>>>>>>>>>    Procedure ComSetSpecialColor XTPColorManagerColor llIndex OLE_COLOR llColor
17003>>>>>>>>>        Handle hDispatchDriver
17003>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17004>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
17005>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
17006>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
17007>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
17008>>>>>>>>>    End_Procedure
17009>>>>>>>>>
17009>>>>>>>>>    Function ComAddDialogBar String llName XTPBarPosition llPosition Returns Variant
17011>>>>>>>>>        Handle hDispatchDriver
17011>>>>>>>>>        Variant retVal
17011>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17012>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
17013>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
17014>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
17015>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 36 OLE_VT_DISPATCH to retVal
17016>>>>>>>>>        Function_Return retVal
17017>>>>>>>>>    End_Function
17018>>>>>>>>>
17018>>>>>>>>>    Procedure ComLoadStateFromXMLString String llProfile String llstate Variant llOptions
17020>>>>>>>>>        Handle hDispatchDriver
17020>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17021>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
17022>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
17023>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstate
17024>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
17025>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
17026>>>>>>>>>    End_Procedure
17027>>>>>>>>>
17027>>>>>>>>>    Function ComSaveStateToXMLString String llProfile Variant llOptions Returns String
17029>>>>>>>>>        Handle hDispatchDriver
17029>>>>>>>>>        String retVal
17029>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17030>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
17031>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
17032>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
17033>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 38 OLE_VT_BSTR to retVal
17034>>>>>>>>>        Function_Return retVal
17035>>>>>>>>>    End_Function
17036>>>>>>>>>
17036>>>>>>>>>    Function ComCreateStateOptions Returns Variant
17038>>>>>>>>>        Handle hDispatchDriver
17038>>>>>>>>>        Variant retVal
17038>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17039>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 39 OLE_VT_DISPATCH to retVal
17040>>>>>>>>>        Function_Return retVal
17041>>>>>>>>>    End_Function
17042>>>>>>>>>
17042>>>>>>>>>    Procedure ComDoPropExchange Variant llpPX Variant llOptions
17044>>>>>>>>>        Handle hDispatchDriver
17044>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17045>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
17046>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpPX
17047>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
17048>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 45 OLE_VT_VOID
17049>>>>>>>>>    End_Procedure
17050>>>>>>>>>
17050>>>>>>>>>    Function ComCustomizedControl Returns Variant
17052>>>>>>>>>        Handle hDispatchDriver
17052>>>>>>>>>        Variant retVal
17052>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17053>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_DISPATCH to retVal
17054>>>>>>>>>        Function_Return retVal
17055>>>>>>>>>    End_Function
17056>>>>>>>>>
17056>>>>>>>>>    // Deletes all of the toolbars
17056>>>>>>>>>    Procedure ComDeleteAll
17058>>>>>>>>>        Handle hDispatchDriver
17058>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17059>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 41 OLE_VT_VOID
17060>>>>>>>>>    End_Procedure
17061>>>>>>>>>
17061>>>>>>>>>    Function ComToolTipContext Returns Variant
17063>>>>>>>>>        Handle hDispatchDriver
17063>>>>>>>>>        Variant retVal
17063>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17064>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 42 OLE_VT_DISPATCH to retVal
17065>>>>>>>>>        Function_Return retVal
17066>>>>>>>>>    End_Function
17067>>>>>>>>>
17067>>>>>>>>>    Function ComTrackingMode Returns Boolean
17069>>>>>>>>>        Handle hDispatchDriver
17069>>>>>>>>>        Boolean retVal
17069>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17070>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_BOOL to retVal
17071>>>>>>>>>        Function_Return retVal
17072>>>>>>>>>    End_Function
17073>>>>>>>>>
17073>>>>>>>>>    Function ComFocusedCommandBar Returns Variant
17075>>>>>>>>>        Handle hDispatchDriver
17075>>>>>>>>>        Variant retVal
17075>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17076>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_DISPATCH to retVal
17077>>>>>>>>>        Function_Return retVal
17078>>>>>>>>>    End_Function
17079>>>>>>>>>
17079>>>>>>>>>    Function ComAddMenuBar String llName Returns Variant
17081>>>>>>>>>        Handle hDispatchDriver
17081>>>>>>>>>        Variant retVal
17081>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17082>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17083>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
17084>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 47 OLE_VT_DISPATCH to retVal
17085>>>>>>>>>        Function_Return retVal
17086>>>>>>>>>    End_Function
17087>>>>>>>>>
17087>>>>>>>>>    Function ComAddTabToolBar String llName Returns Variant
17089>>>>>>>>>        Handle hDispatchDriver
17089>>>>>>>>>        Variant retVal
17089>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17090>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17091>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
17092>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 48 OLE_VT_DISPATCH to retVal
17093>>>>>>>>>        Function_Return retVal
17094>>>>>>>>>    End_Function
17095>>>>>>>>>
17095>>>>>>>>>    Function ComAddRibbonBar String llName Returns Variant
17097>>>>>>>>>        Handle hDispatchDriver
17097>>>>>>>>>        Variant retVal
17097>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17098>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17099>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
17100>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 49 OLE_VT_DISPATCH to retVal
17101>>>>>>>>>        Function_Return retVal
17102>>>>>>>>>    End_Function
17103>>>>>>>>>
17103>>>>>>>>>    Procedure ComAttachToWindow OLE_HANDLE llhWnd
17105>>>>>>>>>        Handle hDispatchDriver
17105>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17106>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17107>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17108>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 50 OLE_VT_VOID
17109>>>>>>>>>    End_Procedure
17110>>>>>>>>>
17110>>>>>>>>>    Procedure ComShowCustomizeDialog Integer llActiveTab
17112>>>>>>>>>        Handle hDispatchDriver
17112>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17113>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17114>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llActiveTab
17115>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 51 OLE_VT_VOID
17116>>>>>>>>>    End_Procedure
17117>>>>>>>>>
17117>>>>>>>>>    Procedure ComEnableOffice2007Frame Boolean llEnable
17119>>>>>>>>>        Handle hDispatchDriver
17119>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17120>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17121>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
17122>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 52 OLE_VT_VOID
17123>>>>>>>>>    End_Procedure
17124>>>>>>>>>
17124>>>>>>>>>    Procedure ComEnableFrameTheme Boolean llEnable
17126>>>>>>>>>        Handle hDispatchDriver
17126>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17127>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17128>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
17129>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 90 OLE_VT_VOID
17130>>>>>>>>>    End_Procedure
17131>>>>>>>>>
17131>>>>>>>>>    Procedure ComEnableActions
17133>>>>>>>>>        Handle hDispatchDriver
17133>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17134>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 53 OLE_VT_VOID
17135>>>>>>>>>    End_Procedure
17136>>>>>>>>>
17136>>>>>>>>>    Function ComActions Returns Variant
17138>>>>>>>>>        Handle hDispatchDriver
17138>>>>>>>>>        Variant retVal
17138>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17139>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 54 OLE_VT_DISPATCH to retVal
17140>>>>>>>>>        Function_Return retVal
17141>>>>>>>>>    End_Function
17142>>>>>>>>>
17142>>>>>>>>>    Function ComPaintManager Returns Variant
17144>>>>>>>>>        Handle hDispatchDriver
17144>>>>>>>>>        Variant retVal
17144>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17145>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 55 OLE_VT_DISPATCH to retVal
17146>>>>>>>>>        Function_Return retVal
17147>>>>>>>>>    End_Function
17148>>>>>>>>>
17148>>>>>>>>>    Function ComCreateGalleryItems Integer llId Returns Variant
17150>>>>>>>>>        Handle hDispatchDriver
17150>>>>>>>>>        Variant retVal
17150>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17151>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17152>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17153>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 56 OLE_VT_DISPATCH to retVal
17154>>>>>>>>>        Function_Return retVal
17155>>>>>>>>>    End_Function
17156>>>>>>>>>
17156>>>>>>>>>    Procedure ComEnableOffice2007FrameHandle OLE_HANDLE llhWnd
17158>>>>>>>>>        Handle hDispatchDriver
17158>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17159>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17160>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17161>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 57 OLE_VT_VOID
17162>>>>>>>>>    End_Procedure
17163>>>>>>>>>
17163>>>>>>>>>    Procedure ComEnableFrameThemeHandle OLE_HANDLE llhWnd
17165>>>>>>>>>        Handle hDispatchDriver
17165>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17166>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17167>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17168>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 100 OLE_VT_VOID
17169>>>>>>>>>    End_Procedure
17170>>>>>>>>>
17170>>>>>>>>>    Function ComCreateCommandBarControl String llClassName Returns Variant
17172>>>>>>>>>        Handle hDispatchDriver
17172>>>>>>>>>        Variant retVal
17172>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17173>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17174>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
17175>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 58 OLE_VT_DISPATCH to retVal
17176>>>>>>>>>        Function_Return retVal
17177>>>>>>>>>    End_Function
17178>>>>>>>>>
17178>>>>>>>>>    Function ComCreateCommandBar String llClassName Returns Variant
17180>>>>>>>>>        Handle hDispatchDriver
17180>>>>>>>>>        Variant retVal
17180>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17181>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17182>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
17183>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 59 OLE_VT_DISPATCH to retVal
17184>>>>>>>>>        Function_Return retVal
17185>>>>>>>>>    End_Function
17186>>>>>>>>>
17186>>>>>>>>>    Function ComContextHelp Returns Integer
17188>>>>>>>>>        Handle hDispatchDriver
17188>>>>>>>>>        Integer retVal
17188>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17189>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 60 OLE_VT_I4 to retVal
17190>>>>>>>>>        Function_Return retVal
17191>>>>>>>>>    End_Function
17192>>>>>>>>>
17192>>>>>>>>>    Function ComContextMenus Returns Variant
17194>>>>>>>>>        Handle hDispatchDriver
17194>>>>>>>>>        Variant retVal
17194>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17195>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 61 OLE_VT_DISPATCH to retVal
17196>>>>>>>>>        Function_Return retVal
17197>>>>>>>>>    End_Function
17198>>>>>>>>>
17198>>>>>>>>>    Procedure ComOLEDrag
17200>>>>>>>>>        Handle hDispatchDriver
17200>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17201>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 62 OLE_VT_VOID
17202>>>>>>>>>    End_Procedure
17203>>>>>>>>>
17203>>>>>>>>>    Function ComAddMiniToolBar String llName Returns Variant
17205>>>>>>>>>        Handle hDispatchDriver
17205>>>>>>>>>        Variant retVal
17205>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17206>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17207>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
17208>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 63 OLE_VT_DISPATCH to retVal
17209>>>>>>>>>        Function_Return retVal
17210>>>>>>>>>    End_Function
17211>>>>>>>>>
17211>>>>>>>>>    Function ComRecentFileList Returns Variant
17213>>>>>>>>>        Handle hDispatchDriver
17213>>>>>>>>>        Variant retVal
17213>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17214>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 64 OLE_VT_DISPATCH to retVal
17215>>>>>>>>>        Function_Return retVal
17216>>>>>>>>>    End_Function
17217>>>>>>>>>
17217>>>>>>>>>    Procedure ComDisableOffice2007FrameHandle OLE_HANDLE llhWnd
17219>>>>>>>>>        Handle hDispatchDriver
17219>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17220>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17221>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17222>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 65 OLE_VT_VOID
17223>>>>>>>>>    End_Procedure
17224>>>>>>>>>
17224>>>>>>>>>    Procedure ComDisableFrameThemeHandle OLE_HANDLE llhWnd
17226>>>>>>>>>        Handle hDispatchDriver
17226>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17227>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17228>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17229>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 110 OLE_VT_VOID
17230>>>>>>>>>    End_Procedure
17231>>>>>>>>>
17231>>>>>>>>>    Procedure ComAddCustomBar Variant llCommandBar String llName XTPBarPosition llPosition
17233>>>>>>>>>        Handle hDispatchDriver
17233>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17234>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
17235>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llCommandBar
17236>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
17237>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
17238>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 66 OLE_VT_VOID
17239>>>>>>>>>    End_Procedure
17240>>>>>>>>>
17240>>>>>>>>>    Procedure ComEnableToolbarComposition Boolean llEnable
17242>>>>>>>>>        Handle hDispatchDriver
17242>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17243>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17244>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
17245>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 67 OLE_VT_VOID
17246>>>>>>>>>    End_Procedure
17247>>>>>>>>>
17247>>>>>>>>>    Procedure ComSetAllCaps Boolean llSetAllCaps
17249>>>>>>>>>        Handle hDispatchDriver
17249>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17250>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17251>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllCaps
17252>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 68 OLE_VT_VOID
17253>>>>>>>>>    End_Procedure
17254>>>>>>>>>
17254>>>>>>>>>    Procedure ComAllowFrameTransparency Boolean llSetAllowTransparency
17256>>>>>>>>>        Handle hDispatchDriver
17256>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17257>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17258>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllowTransparency
17259>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 70 OLE_VT_VOID
17260>>>>>>>>>    End_Procedure
17261>>>>>>>>>
17261>>>>>>>>>    Function ComSetOfficeSetBackImage XTPBackImage llBackImage Returns Boolean
17263>>>>>>>>>        Handle hDispatchDriver
17263>>>>>>>>>        Boolean retVal
17263>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17264>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17265>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBackImage
17266>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 80 OLE_VT_BOOL to retVal
17267>>>>>>>>>        Function_Return retVal
17268>>>>>>>>>    End_Function
17269>>>>>>>>>End_Class
17270>>>>>>>>>
17270>>>>>>>>>// CLSID: {C0DE2200-1D1A-4AFA-8DFF-8798A2181226}
17270>>>>>>>>>// Event interface for CommandBars Control
17270>>>>>>>>>Class cCJ_DCommandBarsEvents is a Mixin
17271>>>>>>>>>
17271>>>>>>>>>    Procedure OnComExecute Variant llControl
17273>>>>>>>>>    End_Procedure
17274>>>>>>>>>
17274>>>>>>>>>//    { MethodType=Event }
17274>>>>>>>>>//    Procedure OnComUpdate Variant llControl
17274>>>>>>>>>//    End_Procedure
17274>>>>>>>>>
17274>>>>>>>>>    Procedure OnComResize
17276>>>>>>>>>    End_Procedure
17277>>>>>>>>>
17277>>>>>>>>>    Procedure OnComGetClientBordersWidth Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
17279>>>>>>>>>    End_Procedure
17280>>>>>>>>>
17280>>>>>>>>>    Procedure OnComControlSelected Variant llControl
17282>>>>>>>>>    End_Procedure
17283>>>>>>>>>
17283>>>>>>>>>    Procedure OnComInitCommandsPopup Variant llCommandBar
17285>>>>>>>>>    End_Procedure
17286>>>>>>>>>
17286>>>>>>>>>    Procedure OnComResizeClient Integer llLeft Integer llTop Integer llRight Integer llBottom
17288>>>>>>>>>    End_Procedure
17289>>>>>>>>>
17289>>>>>>>>>    Procedure OnComSpecialColorChanged
17291>>>>>>>>>    End_Procedure
17292>>>>>>>>>
17292>>>>>>>>>    Procedure OnComRepositionAlignedControls Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
17294>>>>>>>>>    End_Procedure
17295>>>>>>>>>
17295>>>>>>>>>    Procedure OnComCustomization Variant llOptions
17297>>>>>>>>>    End_Procedure
17298>>>>>>>>>
17298>>>>>>>>>    Procedure OnComToolBarVisibleChanged Variant llToolBar
17300>>>>>>>>>    End_Procedure
17301>>>>>>>>>
17301>>>>>>>>>    Procedure OnComControlRButtonUp Variant llControl
17303>>>>>>>>>    End_Procedure
17304>>>>>>>>>
17304>>>>>>>>>    Procedure OnComCustomizationDone
17306>>>>>>>>>    End_Procedure
17307>>>>>>>>>
17307>>>>>>>>>    Procedure OnComCommandBarKeyDown Variant llCommandBar Integer ByRef llKeyCode Short llShift
17309>>>>>>>>>    End_Procedure
17310>>>>>>>>>
17310>>>>>>>>>    Procedure OnComToolBarContextMenu Variant llToolBar Variant llContextMenu
17312>>>>>>>>>    End_Procedure
17313>>>>>>>>>
17313>>>>>>>>>    Procedure OnComTrackingModeChanged Variant llCommandBar Boolean llMode
17315>>>>>>>>>    End_Procedure
17316>>>>>>>>>
17316>>>>>>>>>    Procedure OnComCustomizationResetToolBar Variant llToolBar
17318>>>>>>>>>    End_Procedure
17319>>>>>>>>>
17319>>>>>>>>>    Procedure OnComCustomizationAddToolBar Variant llToolBar
17321>>>>>>>>>    End_Procedure
17322>>>>>>>>>
17322>>>>>>>>>    Procedure OnComCustomizationDeleteToolBar Variant llToolBar
17324>>>>>>>>>    End_Procedure
17325>>>>>>>>>
17325>>>>>>>>>    Procedure OnComControlNotify Variant llControl Integer llCode Variant llNotifyData Variant llHandled
17327>>>>>>>>>    End_Procedure
17328>>>>>>>>>
17328>>>>>>>>>    Procedure OnComGetActiveDocumentID Integer ByRef llId
17330>>>>>>>>>    End_Procedure
17331>>>>>>>>>
17331>>>>>>>>>    Procedure OnComCustomizationResetAll
17333>>>>>>>>>    End_Procedure
17334>>>>>>>>>
17334>>>>>>>>>    Procedure OnComMessageBarClosed Variant llMessageBar
17336>>>>>>>>>    End_Procedure
17337>>>>>>>>>
17337>>>>>>>>>    Procedure OnComOLEStartDrag Variant llData Integer ByRef llAllowedEffects
17339>>>>>>>>>    End_Procedure
17340>>>>>>>>>
17340>>>>>>>>>    Procedure OnComOLECompleteDrag Integer ByRef llEffect
17342>>>>>>>>>    End_Procedure
17343>>>>>>>>>
17343>>>>>>>>>    Procedure OnComReCreated
17345>>>>>>>>>    End_Procedure
17346>>>>>>>>>
17346>>>>>>>>>    Procedure RegisterComEvents
17348>>>>>>>>>        Send RegisterComEvent 1 msg_OnComExecute
17349>>>>>>>>>//        Send RegisterComEvent 2 msg_OnComUpdate
17349>>>>>>>>>        Send RegisterComEvent 3 msg_OnComResize
17350>>>>>>>>>        Send RegisterComEvent 4 msg_OnComGetClientBordersWidth
17351>>>>>>>>>        Send RegisterComEvent 5 msg_OnComControlSelected
17352>>>>>>>>>        Send RegisterComEvent 6 msg_OnComInitCommandsPopup
17353>>>>>>>>>        Send RegisterComEvent 7 msg_OnComResizeClient
17354>>>>>>>>>        Send RegisterComEvent 8 msg_OnComSpecialColorChanged
17355>>>>>>>>>        Send RegisterComEvent 9 msg_OnComRepositionAlignedControls
17356>>>>>>>>>        Send RegisterComEvent 10 msg_OnComCustomization
17357>>>>>>>>>        Send RegisterComEvent 11 msg_OnComToolBarVisibleChanged
17358>>>>>>>>>        Send RegisterComEvent 12 msg_OnComControlRButtonUp
17359>>>>>>>>>        Send RegisterComEvent 13 msg_OnComCustomizationDone
17360>>>>>>>>>        Send RegisterComEvent -602 msg_OnComCommandBarKeyDown
17361>>>>>>>>>        Send RegisterComEvent 14 msg_OnComToolBarContextMenu
17362>>>>>>>>>        Send RegisterComEvent 15 msg_OnComTrackingModeChanged
17363>>>>>>>>>        Send RegisterComEvent 16 msg_OnComCustomizationResetToolBar
17364>>>>>>>>>        Send RegisterComEvent 17 msg_OnComCustomizationAddToolBar
17365>>>>>>>>>        Send RegisterComEvent 18 msg_OnComCustomizationDeleteToolBar
17366>>>>>>>>>        Send RegisterComEvent 19 msg_OnComControlNotify
17367>>>>>>>>>        Send RegisterComEvent 20 msg_OnComGetActiveDocumentID
17368>>>>>>>>>        Send RegisterComEvent 21 msg_OnComCustomizationResetAll
17369>>>>>>>>>        Send RegisterComEvent 22 msg_OnComMessageBarClosed
17370>>>>>>>>>        Send RegisterComEvent 303 msg_OnComOLEStartDrag
17371>>>>>>>>>        Send RegisterComEvent 304 msg_OnComOLECompleteDrag
17372>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
17373>>>>>>>>>    End_Procedure
17374>>>>>>>>>End_Class
17375>>>>>>>>>
17375>>>>>>>>>// CoClass
17375>>>>>>>>>// ProgID: Codejock.CommandBars.22.0.0
17375>>>>>>>>>// CLSID: {C0DE2200-1C4D-4DE8-BC4A-5240617D4930}
17375>>>>>>>>>// Xtreme CommandBars Control
17375>>>>>>>>>Class cCJCommandBars is a cComActiveXControl
17376>>>>>>>>>    Import_Class_Protocol cCJ_DCommandBars
17377>>>>>>>>>    Import_Class_Protocol cCJ_DCommandBarsEvents
17378>>>>>>>>>
17378>>>>>>>>>    Procedure Construct_Object
17380>>>>>>>>>        Forward Send Construct_Object
17382>>>>>>>>>        Set psProgID to "{C0DE2200-1C4D-4DE8-BC4A-5240617D4930}"
17383>>>>>>>>>        Set psEventId to "{C0DE2200-1D1A-4AFA-8DFF-8798A2181226}"
17384>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2022 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v22.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
17385>>>>>>>>>        Set peAutoCreate to acAutoCreate
17386>>>>>>>>>    End_Procedure
17387>>>>>>>>>End_Class
17388>>>>>>>>>
17388>>>>>>>>>// CLSID: {C0DE2200-D68C-4339-A284-4C7DB1FB2903}
17388>>>>>>>>>Class cCJIRibbonGroup is a Mixin
17389>>>>>>>>>
17389>>>>>>>>>    Function ComCaption Returns String
17391>>>>>>>>>        String retVal
17391>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BSTR to retVal
17392>>>>>>>>>        Function_Return retVal
17393>>>>>>>>>    End_Function
17394>>>>>>>>>
17394>>>>>>>>>    Procedure Set ComCaption String value
17396>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BSTR to value
17397>>>>>>>>>    End_Procedure
17398>>>>>>>>>
17398>>>>>>>>>    Function ComShowOptionButton Returns Boolean
17400>>>>>>>>>        Boolean retVal
17400>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
17401>>>>>>>>>        Function_Return retVal
17402>>>>>>>>>    End_Function
17403>>>>>>>>>
17403>>>>>>>>>    Procedure Set ComShowOptionButton Boolean value
17405>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
17406>>>>>>>>>    End_Procedure
17407>>>>>>>>>
17407>>>>>>>>>    Function ComId Returns Integer
17409>>>>>>>>>        Integer retVal
17409>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
17410>>>>>>>>>        Function_Return retVal
17411>>>>>>>>>    End_Function
17412>>>>>>>>>
17412>>>>>>>>>    Procedure Set ComId Integer value
17414>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
17415>>>>>>>>>    End_Procedure
17416>>>>>>>>>
17416>>>>>>>>>    Function ComIconId Returns Integer
17418>>>>>>>>>        Integer retVal
17418>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
17419>>>>>>>>>        Function_Return retVal
17420>>>>>>>>>    End_Function
17421>>>>>>>>>
17421>>>>>>>>>    Procedure Set ComIconId Integer value
17423>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
17424>>>>>>>>>    End_Procedure
17425>>>>>>>>>
17425>>>>>>>>>    Function ComVisible Returns Boolean
17427>>>>>>>>>        Boolean retVal
17427>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
17428>>>>>>>>>        Function_Return retVal
17429>>>>>>>>>    End_Function
17430>>>>>>>>>
17430>>>>>>>>>    Procedure Set ComVisible Boolean value
17432>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
17433>>>>>>>>>    End_Procedure
17434>>>>>>>>>
17434>>>>>>>>>    Function ComControlsGrouping Returns Boolean
17436>>>>>>>>>        Boolean retVal
17436>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
17437>>>>>>>>>        Function_Return retVal
17438>>>>>>>>>    End_Function
17439>>>>>>>>>
17439>>>>>>>>>    Procedure Set ComControlsGrouping Boolean value
17441>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
17442>>>>>>>>>    End_Procedure
17443>>>>>>>>>
17443>>>>>>>>>    Function ComControlsCentering Returns Boolean
17445>>>>>>>>>        Boolean retVal
17445>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
17446>>>>>>>>>        Function_Return retVal
17447>>>>>>>>>    End_Function
17448>>>>>>>>>
17448>>>>>>>>>    Procedure Set ComControlsCentering Boolean value
17450>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
17451>>>>>>>>>    End_Procedure
17452>>>>>>>>>
17452>>>>>>>>>    Function ComAllowReduce Returns Integer
17454>>>>>>>>>        Integer retVal
17454>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to retVal
17455>>>>>>>>>        Function_Return retVal
17456>>>>>>>>>    End_Function
17457>>>>>>>>>
17457>>>>>>>>>    Procedure Set ComAllowReduce Integer value
17459>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to value
17460>>>>>>>>>    End_Procedure
17461>>>>>>>>>
17461>>>>>>>>>    Function ComAutoArrangeEditCaption Returns Boolean
17463>>>>>>>>>        Boolean retVal
17463>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
17464>>>>>>>>>        Function_Return retVal
17465>>>>>>>>>    End_Function
17466>>>>>>>>>
17466>>>>>>>>>    Procedure Set ComAutoArrangeEditCaption Boolean value
17468>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
17469>>>>>>>>>    End_Procedure
17470>>>>>>>>>
17470>>>>>>>>>    Function ComRibbonBar Returns Variant
17472>>>>>>>>>        Handle hDispatchDriver
17472>>>>>>>>>        Variant retVal
17472>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17473>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
17474>>>>>>>>>        Function_Return retVal
17475>>>>>>>>>    End_Function
17476>>>>>>>>>
17476>>>>>>>>>    Function ComGroups Returns Variant
17478>>>>>>>>>        Handle hDispatchDriver
17478>>>>>>>>>        Variant retVal
17478>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17479>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_DISPATCH to retVal
17480>>>>>>>>>        Function_Return retVal
17481>>>>>>>>>    End_Function
17482>>>>>>>>>
17482>>>>>>>>>    // Gets the number of controls in the collection.
17482>>>>>>>>>    Function ComCount Returns Integer
17484>>>>>>>>>        Handle hDispatchDriver
17484>>>>>>>>>        Integer retVal
17484>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17485>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
17486>>>>>>>>>        Function_Return retVal
17487>>>>>>>>>    End_Function
17488>>>>>>>>>
17488>>>>>>>>>    // Gets an item from the collection by its index.
17488>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
17490>>>>>>>>>        Handle hDispatchDriver
17490>>>>>>>>>        Variant retVal
17490>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17491>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17492>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
17493>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
17494>>>>>>>>>        Function_Return retVal
17495>>>>>>>>>    End_Function
17496>>>>>>>>>
17496>>>>>>>>>    Function Com_NewEnum Returns Variant
17498>>>>>>>>>        Handle hDispatchDriver
17498>>>>>>>>>        Variant retVal
17498>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17499>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
17500>>>>>>>>>        Function_Return retVal
17501>>>>>>>>>    End_Function
17502>>>>>>>>>
17502>>>>>>>>>    // Adds a new command bar control to the collection.
17502>>>>>>>>>    Function ComAdd XTPControlType llType Integer llId String llCaption Variant llBefore Variant llTemporary Returns Variant
17504>>>>>>>>>        Handle hDispatchDriver
17504>>>>>>>>>        Variant retVal
17504>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17505>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
17506>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llType
17507>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17508>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
17509>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
17510>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llTemporary
17511>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
17512>>>>>>>>>        Function_Return retVal
17513>>>>>>>>>    End_Function
17514>>>>>>>>>
17514>>>>>>>>>    // Deletes all of the command bar controls from the collection
17514>>>>>>>>>    Procedure ComDeleteAll
17516>>>>>>>>>        Handle hDispatchDriver
17516>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17517>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
17518>>>>>>>>>    End_Procedure
17519>>>>>>>>>
17519>>>>>>>>>    Procedure ComDeleteAt Integer llIndex
17521>>>>>>>>>        Handle hDispatchDriver
17521>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17522>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17523>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
17524>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
17525>>>>>>>>>    End_Procedure
17526>>>>>>>>>
17526>>>>>>>>>    Function ComControlGroupPopup Returns Variant
17528>>>>>>>>>        Handle hDispatchDriver
17528>>>>>>>>>        Variant retVal
17528>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17529>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_DISPATCH to retVal
17530>>>>>>>>>        Function_Return retVal
17531>>>>>>>>>    End_Function
17532>>>>>>>>>
17532>>>>>>>>>    Function ComControlGroupOption Returns Variant
17534>>>>>>>>>        Handle hDispatchDriver
17534>>>>>>>>>        Variant retVal
17534>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17535>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_DISPATCH to retVal
17536>>>>>>>>>        Function_Return retVal
17537>>>>>>>>>    End_Function
17538>>>>>>>>>
17538>>>>>>>>>    Function ComIndex Returns Integer
17540>>>>>>>>>        Handle hDispatchDriver
17540>>>>>>>>>        Integer retVal
17540>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17541>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_I4 to retVal
17542>>>>>>>>>        Function_Return retVal
17543>>>>>>>>>    End_Function
17544>>>>>>>>>
17544>>>>>>>>>    Procedure ComAddControl Variant llControl Variant llBefore
17546>>>>>>>>>        Handle hDispatchDriver
17546>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17547>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
17548>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llControl
17549>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
17550>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 108 OLE_VT_VOID
17551>>>>>>>>>    End_Procedure
17552>>>>>>>>>
17552>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
17554>>>>>>>>>        Handle hDispatchDriver
17554>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17555>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
17556>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
17557>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
17558>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
17559>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
17560>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 110 OLE_VT_VOID
17561>>>>>>>>>    End_Procedure
17562>>>>>>>>>End_Class
17563>>>>>>>>>
17563>>>>>>>>>// CoClass
17563>>>>>>>>>// CLSID: {C0DE2200-73F4-4849-A08C-8A64228AA2E3}
17563>>>>>>>>>Class cCJRibbonGroup is a cComAutomationObject
17564>>>>>>>>>    Import_Class_Protocol cCJIRibbonGroup
17565>>>>>>>>>
17565>>>>>>>>>    Procedure Construct_Object
17567>>>>>>>>>        Forward Send Construct_Object
17569>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17570>>>>>>>>>    End_Procedure
17571>>>>>>>>>End_Class
17572>>>>>>>>>
17572>>>>>>>>>// CLSID: {C0DE2200-D3DB-49F4-AC22-14AA249772CB}
17572>>>>>>>>>Class cCJICustomizeOptions is a Mixin
17573>>>>>>>>>
17573>>>>>>>>>    Function ComShowKeyboardPage Returns Boolean
17575>>>>>>>>>        Boolean retVal
17575>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
17576>>>>>>>>>        Function_Return retVal
17577>>>>>>>>>    End_Function
17578>>>>>>>>>
17578>>>>>>>>>    Procedure Set ComShowKeyboardPage Boolean value
17580>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
17581>>>>>>>>>    End_Procedure
17582>>>>>>>>>
17582>>>>>>>>>    Function ComShowOptionsPage Returns Boolean
17584>>>>>>>>>        Boolean retVal
17584>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to retVal
17585>>>>>>>>>        Function_Return retVal
17586>>>>>>>>>    End_Function
17587>>>>>>>>>
17587>>>>>>>>>    Procedure Set ComShowOptionsPage Boolean value
17589>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to value
17590>>>>>>>>>    End_Procedure
17591>>>>>>>>>
17591>>>>>>>>>    Function ComShowRibbonQuickAccessPage Returns Boolean
17593>>>>>>>>>        Boolean retVal
17593>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
17594>>>>>>>>>        Function_Return retVal
17595>>>>>>>>>    End_Function
17596>>>>>>>>>
17596>>>>>>>>>    Procedure Set ComShowRibbonQuickAccessPage Boolean value
17598>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
17599>>>>>>>>>    End_Procedure
17600>>>>>>>>>
17600>>>>>>>>>    Function ComShowMenusPage Returns Boolean
17602>>>>>>>>>        Boolean retVal
17602>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
17603>>>>>>>>>        Function_Return retVal
17604>>>>>>>>>    End_Function
17605>>>>>>>>>
17605>>>>>>>>>    Procedure Set ComShowMenusPage Boolean value
17607>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
17608>>>>>>>>>    End_Procedure
17609>>>>>>>>>
17609>>>>>>>>>    Function ComShowToolbarsPage Returns Boolean
17611>>>>>>>>>        Boolean retVal
17611>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
17612>>>>>>>>>        Function_Return retVal
17613>>>>>>>>>    End_Function
17614>>>>>>>>>
17614>>>>>>>>>    Procedure Set ComShowToolbarsPage Boolean value
17616>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
17617>>>>>>>>>    End_Procedure
17618>>>>>>>>>
17618>>>>>>>>>    Function ComShowCommandsPage Returns Boolean
17620>>>>>>>>>        Boolean retVal
17620>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
17621>>>>>>>>>        Function_Return retVal
17622>>>>>>>>>    End_Function
17623>>>>>>>>>
17623>>>>>>>>>    Procedure Set ComShowCommandsPage Boolean value
17625>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
17626>>>>>>>>>    End_Procedure
17627>>>>>>>>>
17627>>>>>>>>>    Function ComAllowNewToolbars Returns Boolean
17629>>>>>>>>>        Boolean retVal
17629>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
17630>>>>>>>>>        Function_Return retVal
17631>>>>>>>>>    End_Function
17632>>>>>>>>>
17632>>>>>>>>>    Procedure Set ComAllowNewToolbars Boolean value
17634>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
17635>>>>>>>>>    End_Procedure
17636>>>>>>>>>
17636>>>>>>>>>    Function ComResizableSheet Returns Boolean
17638>>>>>>>>>        Boolean retVal
17638>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
17639>>>>>>>>>        Function_Return retVal
17640>>>>>>>>>    End_Function
17641>>>>>>>>>
17641>>>>>>>>>    Procedure Set ComResizableSheet Boolean value
17643>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
17644>>>>>>>>>    End_Procedure
17645>>>>>>>>>
17645>>>>>>>>>    Function ComShowRibbonCustomizePage Returns Boolean
17647>>>>>>>>>        Boolean retVal
17647>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
17648>>>>>>>>>        Function_Return retVal
17649>>>>>>>>>    End_Function
17650>>>>>>>>>
17650>>>>>>>>>    Procedure Set ComShowRibbonCustomizePage Boolean value
17652>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
17653>>>>>>>>>    End_Procedure
17654>>>>>>>>>
17654>>>>>>>>>    Function ComShowListNavigation Returns Boolean
17656>>>>>>>>>        Boolean retVal
17656>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
17657>>>>>>>>>        Function_Return retVal
17658>>>>>>>>>    End_Function
17659>>>>>>>>>
17659>>>>>>>>>    Procedure Set ComShowListNavigation Boolean value
17661>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
17662>>>>>>>>>    End_Procedure
17663>>>>>>>>>
17663>>>>>>>>>    Function ComCustomIcons Returns Variant
17665>>>>>>>>>        Handle hDispatchDriver
17665>>>>>>>>>        Variant retVal
17665>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17666>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_DISPATCH to retVal
17667>>>>>>>>>        Function_Return retVal
17668>>>>>>>>>    End_Function
17669>>>>>>>>>
17669>>>>>>>>>    Function ComContextMenu Returns Variant
17671>>>>>>>>>        Handle hDispatchDriver
17671>>>>>>>>>        Variant retVal
17671>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17672>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
17673>>>>>>>>>        Function_Return retVal
17674>>>>>>>>>    End_Function
17675>>>>>>>>>
17675>>>>>>>>>    Procedure ComAddPage Integer llnIndex OLE_HANDLE llhWnd String llCaption
17677>>>>>>>>>        Handle hDispatchDriver
17677>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17678>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
17679>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIndex
17680>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17681>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
17682>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
17683>>>>>>>>>    End_Procedure
17684>>>>>>>>>End_Class
17685>>>>>>>>>
17685>>>>>>>>>// CoClass
17685>>>>>>>>>// CLSID: {C0DE2200-FD32-4169-88A0-04275EAF79C5}
17685>>>>>>>>>Class cCJCustomizeOptions is a cComAutomationObject
17686>>>>>>>>>    Import_Class_Protocol cCJICustomizeOptions
17687>>>>>>>>>
17687>>>>>>>>>    Procedure Construct_Object
17689>>>>>>>>>        Forward Send Construct_Object
17691>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17692>>>>>>>>>    End_Procedure
17693>>>>>>>>>End_Class
17694>>>>>>>>>
17694>>>>>>>>>// CLSID: {C0DE2200-AA66-4C26-8B79-FF0DD9DF0E68}
17694>>>>>>>>>Class cCJIStateOptions is a Mixin
17695>>>>>>>>>
17695>>>>>>>>>    Function ComSerializeControls Returns Boolean
17697>>>>>>>>>        Boolean retVal
17697>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
17698>>>>>>>>>        Function_Return retVal
17699>>>>>>>>>    End_Function
17700>>>>>>>>>
17700>>>>>>>>>    Procedure Set ComSerializeControls Boolean value
17702>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
17703>>>>>>>>>    End_Procedure
17704>>>>>>>>>
17704>>>>>>>>>    Function ComSaveOnlyCustomized Returns Boolean
17706>>>>>>>>>        Boolean retVal
17706>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to retVal
17707>>>>>>>>>        Function_Return retVal
17708>>>>>>>>>    End_Function
17709>>>>>>>>>
17709>>>>>>>>>    Procedure Set ComSaveOnlyCustomized Boolean value
17711>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to value
17712>>>>>>>>>    End_Procedure
17713>>>>>>>>>
17713>>>>>>>>>    Function ComLoadSilent Returns Boolean
17715>>>>>>>>>        Boolean retVal
17715>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
17716>>>>>>>>>        Function_Return retVal
17717>>>>>>>>>    End_Function
17718>>>>>>>>>
17718>>>>>>>>>    Procedure Set ComLoadSilent Boolean value
17720>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
17721>>>>>>>>>    End_Procedure
17722>>>>>>>>>
17722>>>>>>>>>    Function ComSaveOriginalControls Returns Boolean
17724>>>>>>>>>        Boolean retVal
17724>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
17725>>>>>>>>>        Function_Return retVal
17726>>>>>>>>>    End_Function
17727>>>>>>>>>
17727>>>>>>>>>    Procedure Set ComSaveOriginalControls Boolean value
17729>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
17730>>>>>>>>>    End_Procedure
17731>>>>>>>>>
17731>>>>>>>>>    Function ComSerializeOptions Returns Boolean
17733>>>>>>>>>        Boolean retVal
17733>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
17734>>>>>>>>>        Function_Return retVal
17735>>>>>>>>>    End_Function
17736>>>>>>>>>
17736>>>>>>>>>    Procedure Set ComSerializeOptions Boolean value
17738>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
17739>>>>>>>>>    End_Procedure
17740>>>>>>>>>
17740>>>>>>>>>    Function ComSerializeImages Returns Boolean
17742>>>>>>>>>        Boolean retVal
17742>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
17743>>>>>>>>>        Function_Return retVal
17744>>>>>>>>>    End_Function
17745>>>>>>>>>
17745>>>>>>>>>    Procedure Set ComSerializeImages Boolean value
17747>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
17748>>>>>>>>>    End_Procedure
17749>>>>>>>>>
17749>>>>>>>>>    Function ComSerializeLayout Returns Boolean
17751>>>>>>>>>        Boolean retVal
17751>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
17752>>>>>>>>>        Function_Return retVal
17753>>>>>>>>>    End_Function
17754>>>>>>>>>
17754>>>>>>>>>    Procedure Set ComSerializeLayout Boolean value
17756>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
17757>>>>>>>>>    End_Procedure
17758>>>>>>>>>
17758>>>>>>>>>    Function ComSerializeDesignerControls Returns Boolean
17760>>>>>>>>>        Boolean retVal
17760>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
17761>>>>>>>>>        Function_Return retVal
17762>>>>>>>>>    End_Function
17763>>>>>>>>>
17763>>>>>>>>>    Procedure Set ComSerializeDesignerControls Boolean value
17765>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
17766>>>>>>>>>    End_Procedure
17767>>>>>>>>>
17767>>>>>>>>>    Function ComSerializeActions Returns Boolean
17769>>>>>>>>>        Boolean retVal
17769>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
17770>>>>>>>>>        Function_Return retVal
17771>>>>>>>>>    End_Function
17772>>>>>>>>>
17772>>>>>>>>>    Procedure Set ComSerializeActions Boolean value
17774>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
17775>>>>>>>>>    End_Procedure
17776>>>>>>>>>End_Class
17777>>>>>>>>>
17777>>>>>>>>>// CoClass
17777>>>>>>>>>// CLSID: {C0DE2200-A205-49F6-975D-F02D82C565D1}
17777>>>>>>>>>Class cCJStateOptions is a cComAutomationObject
17778>>>>>>>>>    Import_Class_Protocol cCJIStateOptions
17779>>>>>>>>>
17779>>>>>>>>>    Procedure Construct_Object
17781>>>>>>>>>        Forward Send Construct_Object
17783>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17784>>>>>>>>>    End_Procedure
17785>>>>>>>>>End_Class
17786>>>>>>>>>
17786>>>>>>>>>// CLSID: {C0DE2200-DFBD-4175-90D5-D84AB2790950}
17786>>>>>>>>>Class cCJICommandBarAction is a Mixin
17787>>>>>>>>>
17787>>>>>>>>>    Function ComCaption Returns String
17789>>>>>>>>>        String retVal
17789>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
17790>>>>>>>>>        Function_Return retVal
17791>>>>>>>>>    End_Function
17792>>>>>>>>>
17792>>>>>>>>>    Procedure Set ComCaption String value
17794>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
17795>>>>>>>>>    End_Procedure
17796>>>>>>>>>
17796>>>>>>>>>    Function ComDescriptionText Returns String
17798>>>>>>>>>        String retVal
17798>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
17799>>>>>>>>>        Function_Return retVal
17800>>>>>>>>>    End_Function
17801>>>>>>>>>
17801>>>>>>>>>    Procedure Set ComDescriptionText String value
17803>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
17804>>>>>>>>>    End_Procedure
17805>>>>>>>>>
17805>>>>>>>>>    Function ComId Returns Integer
17807>>>>>>>>>        Integer retVal
17807>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
17808>>>>>>>>>        Function_Return retVal
17809>>>>>>>>>    End_Function
17810>>>>>>>>>
17810>>>>>>>>>    Procedure Set ComId Integer value
17812>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
17813>>>>>>>>>    End_Procedure
17814>>>>>>>>>
17814>>>>>>>>>    Function ComShortcutText Returns String
17816>>>>>>>>>        String retVal
17816>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
17817>>>>>>>>>        Function_Return retVal
17818>>>>>>>>>    End_Function
17819>>>>>>>>>
17819>>>>>>>>>    Procedure Set ComShortcutText String value
17821>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
17822>>>>>>>>>    End_Procedure
17823>>>>>>>>>
17823>>>>>>>>>    Function ComTooltipText Returns String
17825>>>>>>>>>        String retVal
17825>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
17826>>>>>>>>>        Function_Return retVal
17827>>>>>>>>>    End_Function
17828>>>>>>>>>
17828>>>>>>>>>    Procedure Set ComTooltipText String value
17830>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
17831>>>>>>>>>    End_Procedure
17832>>>>>>>>>
17832>>>>>>>>>    Function ComVisible Returns Boolean
17834>>>>>>>>>        Boolean retVal
17834>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
17835>>>>>>>>>        Function_Return retVal
17836>>>>>>>>>    End_Function
17837>>>>>>>>>
17837>>>>>>>>>    Procedure Set ComVisible Boolean value
17839>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
17840>>>>>>>>>    End_Procedure
17841>>>>>>>>>
17841>>>>>>>>>    Function ComEnabled Returns Boolean
17843>>>>>>>>>        Boolean retVal
17843>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
17844>>>>>>>>>        Function_Return retVal
17845>>>>>>>>>    End_Function
17846>>>>>>>>>
17846>>>>>>>>>    Procedure Set ComEnabled Boolean value
17848>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
17849>>>>>>>>>    End_Procedure
17850>>>>>>>>>
17850>>>>>>>>>    Function ComChecked Returns Boolean
17852>>>>>>>>>        Boolean retVal
17852>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
17853>>>>>>>>>        Function_Return retVal
17854>>>>>>>>>    End_Function
17855>>>>>>>>>
17855>>>>>>>>>    Procedure Set ComChecked Boolean value
17857>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
17858>>>>>>>>>    End_Procedure
17859>>>>>>>>>
17859>>>>>>>>>    Function ComIconId Returns Integer
17861>>>>>>>>>        Integer retVal
17861>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
17862>>>>>>>>>        Function_Return retVal
17863>>>>>>>>>    End_Function
17864>>>>>>>>>
17864>>>>>>>>>    Procedure Set ComIconId Integer value
17866>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
17867>>>>>>>>>    End_Procedure
17868>>>>>>>>>
17868>>>>>>>>>    Function ComCategory Returns String
17870>>>>>>>>>        String retVal
17870>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
17871>>>>>>>>>        Function_Return retVal
17872>>>>>>>>>    End_Function
17873>>>>>>>>>
17873>>>>>>>>>    Procedure Set ComCategory String value
17875>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
17876>>>>>>>>>    End_Procedure
17877>>>>>>>>>
17877>>>>>>>>>    Function ComTag Returns Variant
17879>>>>>>>>>        Variant retVal
17879>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_VARIANT to retVal
17880>>>>>>>>>        Function_Return retVal
17881>>>>>>>>>    End_Function
17882>>>>>>>>>
17882>>>>>>>>>    Procedure Set ComTag Variant value
17884>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_VARIANT to value
17885>>>>>>>>>    End_Procedure
17886>>>>>>>>>
17886>>>>>>>>>    Function ComEditHint Returns String
17888>>>>>>>>>        String retVal
17888>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 55 OLE_VT_BSTR to retVal
17889>>>>>>>>>        Function_Return retVal
17890>>>>>>>>>    End_Function
17891>>>>>>>>>
17891>>>>>>>>>    Procedure Set ComEditHint String value
17893>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 55 OLE_VT_BSTR to value
17894>>>>>>>>>    End_Procedure
17895>>>>>>>>>
17895>>>>>>>>>    Function ComKeyboardTip Returns String
17897>>>>>>>>>        String retVal
17897>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 56 OLE_VT_BSTR to retVal
17898>>>>>>>>>        Function_Return retVal
17899>>>>>>>>>    End_Function
17900>>>>>>>>>
17900>>>>>>>>>    Procedure Set ComKeyboardTip String value
17902>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 56 OLE_VT_BSTR to value
17903>>>>>>>>>    End_Procedure
17904>>>>>>>>>
17904>>>>>>>>>    Function ComKey Returns String
17906>>>>>>>>>        String retVal
17906>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 57 OLE_VT_BSTR to retVal
17907>>>>>>>>>        Function_Return retVal
17908>>>>>>>>>    End_Function
17909>>>>>>>>>
17909>>>>>>>>>    Procedure Set ComKey String value
17911>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 57 OLE_VT_BSTR to value
17912>>>>>>>>>    End_Procedure
17913>>>>>>>>>
17913>>>>>>>>>    Function ComCustomShortcutText Returns String
17915>>>>>>>>>        String retVal
17915>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 58 OLE_VT_BSTR to retVal
17916>>>>>>>>>        Function_Return retVal
17917>>>>>>>>>    End_Function
17918>>>>>>>>>
17918>>>>>>>>>    Procedure Set ComCustomShortcutText String value
17920>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 58 OLE_VT_BSTR to value
17921>>>>>>>>>    End_Procedure
17922>>>>>>>>>End_Class
17923>>>>>>>>>
17923>>>>>>>>>// CoClass
17923>>>>>>>>>// CLSID: {C0DE2200-61DB-4DC7-86B4-61B534FE96BA}
17923>>>>>>>>>Class cCJCommandBarAction is a cComAutomationObject
17924>>>>>>>>>    Import_Class_Protocol cCJICommandBarAction
17925>>>>>>>>>
17925>>>>>>>>>    Procedure Construct_Object
17927>>>>>>>>>        Forward Send Construct_Object
17929>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17930>>>>>>>>>    End_Procedure
17931>>>>>>>>>End_Class
17932>>>>>>>>>
17932>>>>>>>>>// CLSID: {C0DE2200-092D-462D-9934-277EAB35A27D}
17932>>>>>>>>>Class cCJICommandBarActions is a Mixin
17933>>>>>>>>>
17933>>>>>>>>>    // Gets the number of controls in the collection.
17933>>>>>>>>>    Function ComCount Returns Integer
17935>>>>>>>>>        Handle hDispatchDriver
17935>>>>>>>>>        Integer retVal
17935>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17936>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
17937>>>>>>>>>        Function_Return retVal
17938>>>>>>>>>    End_Function
17939>>>>>>>>>
17939>>>>>>>>>    // Gets an item from the collection by its index.
17939>>>>>>>>>    Function ComAction Integer llId Returns Variant
17941>>>>>>>>>        Handle hDispatchDriver
17941>>>>>>>>>        Variant retVal
17941>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17942>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17943>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17944>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
17945>>>>>>>>>        Function_Return retVal
17946>>>>>>>>>    End_Function
17947>>>>>>>>>
17947>>>>>>>>>    Function Com_NewEnum Returns Variant
17949>>>>>>>>>        Handle hDispatchDriver
17949>>>>>>>>>        Variant retVal
17949>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17950>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
17951>>>>>>>>>        Function_Return retVal
17952>>>>>>>>>    End_Function
17953>>>>>>>>>
17953>>>>>>>>>    // Adds a new command bar control to the collection.
17953>>>>>>>>>    Function ComAdd Integer llId String llCaption String llTooltipText String llDescriptionText String llCategory Returns Variant
17955>>>>>>>>>        Handle hDispatchDriver
17955>>>>>>>>>        Variant retVal
17955>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17956>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
17957>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17958>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
17959>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTooltipText
17960>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llDescriptionText
17961>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCategory
17962>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
17963>>>>>>>>>        Function_Return retVal
17964>>>>>>>>>    End_Function
17965>>>>>>>>>
17965>>>>>>>>>    Procedure ComDeleteAll
17967>>>>>>>>>        Handle hDispatchDriver
17967>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17968>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
17969>>>>>>>>>    End_Procedure
17970>>>>>>>>>
17970>>>>>>>>>    Procedure ComDelete Integer llId
17972>>>>>>>>>        Handle hDispatchDriver
17972>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17973>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17974>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17975>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
17976>>>>>>>>>    End_Procedure
17977>>>>>>>>>End_Class
17978>>>>>>>>>
17978>>>>>>>>>// CoClass
17978>>>>>>>>>// CLSID: {C0DE2200-3543-4D3E-88F9-4F8822200142}
17978>>>>>>>>>Class cCJCommandBarActions is a cComAutomationObject
17979>>>>>>>>>    Import_Class_Protocol cCJICommandBarActions
17980>>>>>>>>>
17980>>>>>>>>>    Procedure Construct_Object
17982>>>>>>>>>        Forward Send Construct_Object
17984>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17985>>>>>>>>>    End_Procedure
17986>>>>>>>>>End_Class
17987>>>>>>>>>
17987>>>>>>>>>// CLSID: {C0DE2200-9E07-4079-924A-4CB1C11FC700}
17987>>>>>>>>>Class cCJICommandBarControl is a Mixin
17988>>>>>>>>>
17988>>>>>>>>>    Function ComChecked Returns Boolean
17990>>>>>>>>>        Boolean retVal
17990>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
17991>>>>>>>>>        Function_Return retVal
17992>>>>>>>>>    End_Function
17993>>>>>>>>>
17993>>>>>>>>>    Procedure Set ComChecked Boolean value
17995>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
17996>>>>>>>>>    End_Procedure
17997>>>>>>>>>
17997>>>>>>>>>    Function ComBeginGroup Returns Boolean
17999>>>>>>>>>        Boolean retVal
17999>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
18000>>>>>>>>>        Function_Return retVal
18001>>>>>>>>>    End_Function
18002>>>>>>>>>
18002>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
18004>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
18005>>>>>>>>>    End_Procedure
18006>>>>>>>>>
18006>>>>>>>>>    Function ComCaption Returns String
18008>>>>>>>>>        String retVal
18008>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
18009>>>>>>>>>        Function_Return retVal
18010>>>>>>>>>    End_Function
18011>>>>>>>>>
18011>>>>>>>>>    Procedure Set ComCaption String value
18013>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
18014>>>>>>>>>    End_Procedure
18015>>>>>>>>>
18015>>>>>>>>>    Function ComDescriptionText Returns String
18017>>>>>>>>>        String retVal
18017>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
18018>>>>>>>>>        Function_Return retVal
18019>>>>>>>>>    End_Function
18020>>>>>>>>>
18020>>>>>>>>>    Procedure Set ComDescriptionText String value
18022>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
18023>>>>>>>>>    End_Procedure
18024>>>>>>>>>
18024>>>>>>>>>    Function ComId Returns Integer
18026>>>>>>>>>        Integer retVal
18026>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
18027>>>>>>>>>        Function_Return retVal
18028>>>>>>>>>    End_Function
18029>>>>>>>>>
18029>>>>>>>>>    Procedure Set ComId Integer value
18031>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
18032>>>>>>>>>    End_Procedure
18033>>>>>>>>>
18033>>>>>>>>>    Function ComParameter Returns String
18035>>>>>>>>>        String retVal
18035>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
18036>>>>>>>>>        Function_Return retVal
18037>>>>>>>>>    End_Function
18038>>>>>>>>>
18038>>>>>>>>>    Procedure Set ComParameter String value
18040>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
18041>>>>>>>>>    End_Procedure
18042>>>>>>>>>
18042>>>>>>>>>    Function ComShortcutText Returns String
18044>>>>>>>>>        String retVal
18044>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
18045>>>>>>>>>        Function_Return retVal
18046>>>>>>>>>    End_Function
18047>>>>>>>>>
18047>>>>>>>>>    Procedure Set ComShortcutText String value
18049>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
18050>>>>>>>>>    End_Procedure
18051>>>>>>>>>
18051>>>>>>>>>    Function ComCustomShortcutText Returns String
18053>>>>>>>>>        String retVal
18053>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
18054>>>>>>>>>        Function_Return retVal
18055>>>>>>>>>    End_Function
18056>>>>>>>>>
18056>>>>>>>>>    Procedure Set ComCustomShortcutText String value
18058>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
18059>>>>>>>>>    End_Procedure
18060>>>>>>>>>
18060>>>>>>>>>    Function ComTooltipText Returns String
18062>>>>>>>>>        String retVal
18062>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
18063>>>>>>>>>        Function_Return retVal
18064>>>>>>>>>    End_Function
18065>>>>>>>>>
18065>>>>>>>>>    Procedure Set ComTooltipText String value
18067>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
18068>>>>>>>>>    End_Procedure
18069>>>>>>>>>
18069>>>>>>>>>    Function ComVisible Returns Boolean
18071>>>>>>>>>        Boolean retVal
18071>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
18072>>>>>>>>>        Function_Return retVal
18073>>>>>>>>>    End_Function
18074>>>>>>>>>
18074>>>>>>>>>    Procedure Set ComVisible Boolean value
18076>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
18077>>>>>>>>>    End_Procedure
18078>>>>>>>>>
18078>>>>>>>>>    Function ComEnabled Returns Boolean
18080>>>>>>>>>        Boolean retVal
18080>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
18081>>>>>>>>>        Function_Return retVal
18082>>>>>>>>>    End_Function
18083>>>>>>>>>
18083>>>>>>>>>    Procedure Set ComEnabled Boolean value
18085>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
18086>>>>>>>>>    End_Procedure
18087>>>>>>>>>
18087>>>>>>>>>    Function ComIconId Returns Integer
18089>>>>>>>>>        Integer retVal
18089>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
18090>>>>>>>>>        Function_Return retVal
18091>>>>>>>>>    End_Function
18092>>>>>>>>>
18092>>>>>>>>>    Procedure Set ComIconId Integer value
18094>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
18095>>>>>>>>>    End_Procedure
18096>>>>>>>>>
18096>>>>>>>>>    Function ComDefaultItem Returns Boolean
18098>>>>>>>>>        Boolean retVal
18098>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
18099>>>>>>>>>        Function_Return retVal
18100>>>>>>>>>    End_Function
18101>>>>>>>>>
18101>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
18103>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
18104>>>>>>>>>    End_Procedure
18105>>>>>>>>>
18105>>>>>>>>>    Function ComFlags Returns XTPControlFlags
18107>>>>>>>>>        XTPControlFlags retVal
18107>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
18108>>>>>>>>>        Function_Return retVal
18109>>>>>>>>>    End_Function
18110>>>>>>>>>
18110>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
18112>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
18113>>>>>>>>>    End_Procedure
18114>>>>>>>>>
18114>>>>>>>>>    Function ComCategory Returns String
18116>>>>>>>>>        String retVal
18116>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
18117>>>>>>>>>        Function_Return retVal
18118>>>>>>>>>    End_Function
18119>>>>>>>>>
18119>>>>>>>>>    Procedure Set ComCategory String value
18121>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
18122>>>>>>>>>    End_Procedure
18123>>>>>>>>>
18123>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
18125>>>>>>>>>        XTPControlHideFlags retVal
18125>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
18126>>>>>>>>>        Function_Return retVal
18127>>>>>>>>>    End_Function
18128>>>>>>>>>
18128>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
18130>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
18131>>>>>>>>>    End_Procedure
18132>>>>>>>>>
18132>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
18134>>>>>>>>>        Boolean retVal
18134>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
18135>>>>>>>>>        Function_Return retVal
18136>>>>>>>>>    End_Function
18137>>>>>>>>>
18137>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
18139>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
18140>>>>>>>>>    End_Procedure
18141>>>>>>>>>
18141>>>>>>>>>    Function ComAction Returns Variant
18143>>>>>>>>>        Variant retVal
18143>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
18144>>>>>>>>>        Function_Return retVal
18145>>>>>>>>>    End_Function
18146>>>>>>>>>
18146>>>>>>>>>    Procedure Set ComAction Variant value
18148>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
18149>>>>>>>>>    End_Procedure
18150>>>>>>>>>
18150>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
18152>>>>>>>>>        Integer retVal
18152>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
18153>>>>>>>>>        Function_Return retVal
18154>>>>>>>>>    End_Function
18155>>>>>>>>>
18155>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
18157>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
18158>>>>>>>>>    End_Procedure
18159>>>>>>>>>
18159>>>>>>>>>    Function ComWidth Returns Integer
18161>>>>>>>>>        Integer retVal
18161>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
18162>>>>>>>>>        Function_Return retVal
18163>>>>>>>>>    End_Function
18164>>>>>>>>>
18164>>>>>>>>>    Procedure Set ComWidth Integer value
18166>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
18167>>>>>>>>>    End_Procedure
18168>>>>>>>>>
18168>>>>>>>>>    Function ComHeight Returns Integer
18170>>>>>>>>>        Integer retVal
18170>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
18171>>>>>>>>>        Function_Return retVal
18172>>>>>>>>>    End_Function
18173>>>>>>>>>
18173>>>>>>>>>    Procedure Set ComHeight Integer value
18175>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
18176>>>>>>>>>    End_Procedure
18177>>>>>>>>>
18177>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
18179>>>>>>>>>        XTPButtonStyle retVal
18179>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
18180>>>>>>>>>        Function_Return retVal
18181>>>>>>>>>    End_Function
18182>>>>>>>>>
18182>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
18184>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
18185>>>>>>>>>    End_Procedure
18186>>>>>>>>>
18186>>>>>>>>>    Function ComKeyboardTip Returns String
18188>>>>>>>>>        String retVal
18188>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
18189>>>>>>>>>        Function_Return retVal
18190>>>>>>>>>    End_Function
18191>>>>>>>>>
18191>>>>>>>>>    Procedure Set ComKeyboardTip String value
18193>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
18194>>>>>>>>>    End_Procedure
18195>>>>>>>>>
18195>>>>>>>>>    Function ComControls Returns Variant
18197>>>>>>>>>        Handle hDispatchDriver
18197>>>>>>>>>        Variant retVal
18197>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18198>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
18199>>>>>>>>>        Function_Return retVal
18200>>>>>>>>>    End_Function
18201>>>>>>>>>
18201>>>>>>>>>    Function ComParent Returns Variant
18203>>>>>>>>>        Handle hDispatchDriver
18203>>>>>>>>>        Variant retVal
18203>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18204>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
18205>>>>>>>>>        Function_Return retVal
18206>>>>>>>>>    End_Function
18207>>>>>>>>>
18207>>>>>>>>>    Function ComIndex Returns Integer
18209>>>>>>>>>        Handle hDispatchDriver
18209>>>>>>>>>        Integer retVal
18209>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18210>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
18211>>>>>>>>>        Function_Return retVal
18212>>>>>>>>>    End_Function
18213>>>>>>>>>
18213>>>>>>>>>    Function ComType Returns XTPControlType
18215>>>>>>>>>        Handle hDispatchDriver
18215>>>>>>>>>        XTPControlType retVal
18215>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18216>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
18217>>>>>>>>>        Function_Return retVal
18218>>>>>>>>>    End_Function
18219>>>>>>>>>
18219>>>>>>>>>    Procedure ComDelete
18221>>>>>>>>>        Handle hDispatchDriver
18221>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18222>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
18223>>>>>>>>>    End_Procedure
18224>>>>>>>>>
18224>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
18226>>>>>>>>>        Handle hDispatchDriver
18226>>>>>>>>>        Variant retVal
18226>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18227>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18228>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
18229>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
18230>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
18231>>>>>>>>>        Function_Return retVal
18232>>>>>>>>>    End_Function
18233>>>>>>>>>
18233>>>>>>>>>    Procedure ComSetFocus
18235>>>>>>>>>        Handle hDispatchDriver
18235>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18236>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
18237>>>>>>>>>    End_Procedure
18238>>>>>>>>>
18238>>>>>>>>>    Procedure ComExecute
18240>>>>>>>>>        Handle hDispatchDriver
18240>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18241>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
18242>>>>>>>>>    End_Procedure
18243>>>>>>>>>
18243>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
18245>>>>>>>>>        Handle hDispatchDriver
18245>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18246>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
18247>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
18248>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
18249>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
18250>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
18251>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
18252>>>>>>>>>    End_Procedure
18253>>>>>>>>>
18253>>>>>>>>>    Function ComRibbonGroup Returns Variant
18255>>>>>>>>>        Handle hDispatchDriver
18255>>>>>>>>>        Variant retVal
18255>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18256>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
18257>>>>>>>>>        Function_Return retVal
18258>>>>>>>>>    End_Function
18259>>>>>>>>>
18259>>>>>>>>>    Procedure ComReset
18261>>>>>>>>>        Handle hDispatchDriver
18261>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18262>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
18263>>>>>>>>>    End_Procedure
18264>>>>>>>>>
18264>>>>>>>>>    Function ComTop Returns Integer
18266>>>>>>>>>        Handle hDispatchDriver
18266>>>>>>>>>        Integer retVal
18266>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18267>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
18268>>>>>>>>>        Function_Return retVal
18269>>>>>>>>>    End_Function
18270>>>>>>>>>
18270>>>>>>>>>    Function ComLeft Returns Integer
18272>>>>>>>>>        Handle hDispatchDriver
18272>>>>>>>>>        Integer retVal
18272>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18273>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
18274>>>>>>>>>        Function_Return retVal
18275>>>>>>>>>    End_Function
18276>>>>>>>>>
18276>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
18278>>>>>>>>>        Handle hDispatchDriver
18278>>>>>>>>>        Variant retVal
18278>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18279>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
18280>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
18281>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
18282>>>>>>>>>        Function_Return retVal
18283>>>>>>>>>    End_Function
18284>>>>>>>>>
18284>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
18286>>>>>>>>>        Handle hDispatchDriver
18286>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18287>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18288>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
18289>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
18290>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
18291>>>>>>>>>    End_Procedure
18292>>>>>>>>>
18292>>>>>>>>>    Function ComCommandBar Returns Variant
18294>>>>>>>>>        Handle hDispatchDriver
18294>>>>>>>>>        Variant retVal
18294>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18295>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 50 OLE_VT_DISPATCH to retVal
18296>>>>>>>>>        Function_Return retVal
18297>>>>>>>>>    End_Function
18298>>>>>>>>>End_Class
18299>>>>>>>>>
18299>>>>>>>>>// CoClass
18299>>>>>>>>>// CLSID: {C0DE2200-C60A-4893-B9E5-CD2EABBCBFF7}
18299>>>>>>>>>Class cCJCommandBarControl is a cComAutomationObject
18300>>>>>>>>>    Import_Class_Protocol cCJICommandBarControl
18301>>>>>>>>>
18301>>>>>>>>>    Procedure Construct_Object
18303>>>>>>>>>        Forward Send Construct_Object
18305>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
18306>>>>>>>>>    End_Procedure
18307>>>>>>>>>End_Class
18308>>>>>>>>>
18308>>>>>>>>>// CLSID: {C0DE2200-1E0F-446D-B92B-BEDBEF77302F}
18308>>>>>>>>>Class cCJICommandBarButton is a Mixin
18309>>>>>>>>>
18309>>>>>>>>>    Function ComChecked Returns Boolean
18311>>>>>>>>>        Boolean retVal
18311>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
18312>>>>>>>>>        Function_Return retVal
18313>>>>>>>>>    End_Function
18314>>>>>>>>>
18314>>>>>>>>>    Procedure Set ComChecked Boolean value
18316>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
18317>>>>>>>>>    End_Procedure
18318>>>>>>>>>
18318>>>>>>>>>    Function ComBeginGroup Returns Boolean
18320>>>>>>>>>        Boolean retVal
18320>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
18321>>>>>>>>>        Function_Return retVal
18322>>>>>>>>>    End_Function
18323>>>>>>>>>
18323>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
18325>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
18326>>>>>>>>>    End_Procedure
18327>>>>>>>>>
18327>>>>>>>>>    Function ComCaption Returns String
18329>>>>>>>>>        String retVal
18329>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
18330>>>>>>>>>        Function_Return retVal
18331>>>>>>>>>    End_Function
18332>>>>>>>>>
18332>>>>>>>>>    Procedure Set ComCaption String value
18334>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
18335>>>>>>>>>    End_Procedure
18336>>>>>>>>>
18336>>>>>>>>>    Function ComDescriptionText Returns String
18338>>>>>>>>>        String retVal
18338>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
18339>>>>>>>>>        Function_Return retVal
18340>>>>>>>>>    End_Function
18341>>>>>>>>>
18341>>>>>>>>>    Procedure Set ComDescriptionText String value
18343>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
18344>>>>>>>>>    End_Procedure
18345>>>>>>>>>
18345>>>>>>>>>    Function ComId Returns Integer
18347>>>>>>>>>        Integer retVal
18347>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
18348>>>>>>>>>        Function_Return retVal
18349>>>>>>>>>    End_Function
18350>>>>>>>>>
18350>>>>>>>>>    Procedure Set ComId Integer value
18352>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
18353>>>>>>>>>    End_Procedure
18354>>>>>>>>>
18354>>>>>>>>>    Function ComParameter Returns String
18356>>>>>>>>>        String retVal
18356>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
18357>>>>>>>>>        Function_Return retVal
18358>>>>>>>>>    End_Function
18359>>>>>>>>>
18359>>>>>>>>>    Procedure Set ComParameter String value
18361>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
18362>>>>>>>>>    End_Procedure
18363>>>>>>>>>
18363>>>>>>>>>    Function ComShortcutText Returns String
18365>>>>>>>>>        String retVal
18365>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
18366>>>>>>>>>        Function_Return retVal
18367>>>>>>>>>    End_Function
18368>>>>>>>>>
18368>>>>>>>>>    Procedure Set ComShortcutText String value
18370>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
18371>>>>>>>>>    End_Procedure
18372>>>>>>>>>
18372>>>>>>>>>    Function ComCustomShortcutText Returns String
18374>>>>>>>>>        String retVal
18374>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
18375>>>>>>>>>        Function_Return retVal
18376>>>>>>>>>    End_Function
18377>>>>>>>>>
18377>>>>>>>>>    Procedure Set ComCustomShortcutText String value
18379>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
18380>>>>>>>>>    End_Procedure
18381>>>>>>>>>
18381>>>>>>>>>    Function ComTooltipText Returns String
18383>>>>>>>>>        String retVal
18383>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
18384>>>>>>>>>        Function_Return retVal
18385>>>>>>>>>    End_Function
18386>>>>>>>>>
18386>>>>>>>>>    Procedure Set ComTooltipText String value
18388>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
18389>>>>>>>>>    End_Procedure
18390>>>>>>>>>
18390>>>>>>>>>    Function ComVisible Returns Boolean
18392>>>>>>>>>        Boolean retVal
18392>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
18393>>>>>>>>>        Function_Return retVal
18394>>>>>>>>>    End_Function
18395>>>>>>>>>
18395>>>>>>>>>    Procedure Set ComVisible Boolean value
18397>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
18398>>>>>>>>>    End_Procedure
18399>>>>>>>>>
18399>>>>>>>>>    Function ComEnabled Returns Boolean
18401>>>>>>>>>        Boolean retVal
18401>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
18402>>>>>>>>>        Function_Return retVal
18403>>>>>>>>>    End_Function
18404>>>>>>>>>
18404>>>>>>>>>    Procedure Set ComEnabled Boolean value
18406>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
18407>>>>>>>>>    End_Procedure
18408>>>>>>>>>
18408>>>>>>>>>    Function ComIconId Returns Integer
18410>>>>>>>>>        Integer retVal
18410>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
18411>>>>>>>>>        Function_Return retVal
18412>>>>>>>>>    End_Function
18413>>>>>>>>>
18413>>>>>>>>>    Procedure Set ComIconId Integer value
18415>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
18416>>>>>>>>>    End_Procedure
18417>>>>>>>>>
18417>>>>>>>>>    Function ComDefaultItem Returns Boolean
18419>>>>>>>>>        Boolean retVal
18419>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
18420>>>>>>>>>        Function_Return retVal
18421>>>>>>>>>    End_Function
18422>>>>>>>>>
18422>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
18424>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
18425>>>>>>>>>    End_Procedure
18426>>>>>>>>>
18426>>>>>>>>>    Function ComFlags Returns XTPControlFlags
18428>>>>>>>>>        XTPControlFlags retVal
18428>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
18429>>>>>>>>>        Function_Return retVal
18430>>>>>>>>>    End_Function
18431>>>>>>>>>
18431>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
18433>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
18434>>>>>>>>>    End_Procedure
18435>>>>>>>>>
18435>>>>>>>>>    Function ComCategory Returns String
18437>>>>>>>>>        String retVal
18437>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
18438>>>>>>>>>        Function_Return retVal
18439>>>>>>>>>    End_Function
18440>>>>>>>>>
18440>>>>>>>>>    Procedure Set ComCategory String value
18442>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
18443>>>>>>>>>    End_Procedure
18444>>>>>>>>>
18444>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
18446>>>>>>>>>        XTPControlHideFlags retVal
18446>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
18447>>>>>>>>>        Function_Return retVal
18448>>>>>>>>>    End_Function
18449>>>>>>>>>
18449>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
18451>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
18452>>>>>>>>>    End_Procedure
18453>>>>>>>>>
18453>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
18455>>>>>>>>>        Boolean retVal
18455>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
18456>>>>>>>>>        Function_Return retVal
18457>>>>>>>>>    End_Function
18458>>>>>>>>>
18458>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
18460>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
18461>>>>>>>>>    End_Procedure
18462>>>>>>>>>
18462>>>>>>>>>    Function ComAction Returns Variant
18464>>>>>>>>>        Variant retVal
18464>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
18465>>>>>>>>>        Function_Return retVal
18466>>>>>>>>>    End_Function
18467>>>>>>>>>
18467>>>>>>>>>    Procedure Set ComAction Variant value
18469>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
18470>>>>>>>>>    End_Procedure
18471>>>>>>>>>
18471>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
18473>>>>>>>>>        Integer retVal
18473>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
18474>>>>>>>>>        Function_Return retVal
18475>>>>>>>>>    End_Function
18476>>>>>>>>>
18476>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
18478>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
18479>>>>>>>>>    End_Procedure
18480>>>>>>>>>
18480>>>>>>>>>    Function ComWidth Returns Integer
18482>>>>>>>>>        Integer retVal
18482>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
18483>>>>>>>>>        Function_Return retVal
18484>>>>>>>>>    End_Function
18485>>>>>>>>>
18485>>>>>>>>>    Procedure Set ComWidth Integer value
18487>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
18488>>>>>>>>>    End_Procedure
18489>>>>>>>>>
18489>>>>>>>>>    Function ComHeight Returns Integer
18491>>>>>>>>>        Integer retVal
18491>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
18492>>>>>>>>>        Function_Return retVal
18493>>>>>>>>>    End_Function
18494>>>>>>>>>
18494>>>>>>>>>    Procedure Set ComHeight Integer value
18496>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
18497>>>>>>>>>    End_Procedure
18498>>>>>>>>>
18498>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
18500>>>>>>>>>        XTPButtonStyle retVal
18500>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
18501>>>>>>>>>        Function_Return retVal
18502>>>>>>>>>    End_Function
18503>>>>>>>>>
18503>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
18505>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
18506>>>>>>>>>    End_Procedure
18507>>>>>>>>>
18507>>>>>>>>>    Function ComKeyboardTip Returns String
18509>>>>>>>>>        String retVal
18509>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
18510>>>>>>>>>        Function_Return retVal
18511>>>>>>>>>    End_Function
18512>>>>>>>>>
18512>>>>>>>>>    Procedure Set ComKeyboardTip String value
18514>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
18515>>>>>>>>>    End_Procedure
18516>>>>>>>>>
18516>>>>>>>>>    Function ComStyleEx Returns XTPButtonStyle
18518>>>>>>>>>        XTPButtonStyle retVal
18518>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 220 OLE_VT_I4 to retVal
18519>>>>>>>>>        Function_Return retVal
18520>>>>>>>>>    End_Function
18521>>>>>>>>>
18521>>>>>>>>>    Procedure Set ComStyleEx XTPButtonStyle value
18523>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 220 OLE_VT_I4 to value
18524>>>>>>>>>    End_Procedure
18525>>>>>>>>>
18525>>>>>>>>>    Function ComControls Returns Variant
18527>>>>>>>>>        Handle hDispatchDriver
18527>>>>>>>>>        Variant retVal
18527>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18528>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
18529>>>>>>>>>        Function_Return retVal
18530>>>>>>>>>    End_Function
18531>>>>>>>>>
18531>>>>>>>>>    Function ComParent Returns Variant
18533>>>>>>>>>        Handle hDispatchDriver
18533>>>>>>>>>        Variant retVal
18533>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18534>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
18535>>>>>>>>>        Function_Return retVal
18536>>>>>>>>>    End_Function
18537>>>>>>>>>
18537>>>>>>>>>    Function ComIndex Returns Integer
18539>>>>>>>>>        Handle hDispatchDriver
18539>>>>>>>>>        Integer retVal
18539>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18540>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
18541>>>>>>>>>        Function_Return retVal
18542>>>>>>>>>    End_Function
18543>>>>>>>>>
18543>>>>>>>>>    Function ComType Returns XTPControlType
18545>>>>>>>>>        Handle hDispatchDriver
18545>>>>>>>>>        XTPControlType retVal
18545>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18546>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
18547>>>>>>>>>        Function_Return retVal
18548>>>>>>>>>    End_Function
18549>>>>>>>>>
18549>>>>>>>>>    Procedure ComDelete
18551>>>>>>>>>        Handle hDispatchDriver
18551>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18552>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
18553>>>>>>>>>    End_Procedure
18554>>>>>>>>>
18554>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
18556>>>>>>>>>        Handle hDispatchDriver
18556>>>>>>>>>        Variant retVal
18556>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18557>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18558>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
18559>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
18560>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
18561>>>>>>>>>        Function_Return retVal
18562>>>>>>>>>    End_Function
18563>>>>>>>>>
18563>>>>>>>>>    Procedure ComSetFocus
18565>>>>>>>>>        Handle hDispatchDriver
18565>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18566>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
18567>>>>>>>>>    End_Procedure
18568>>>>>>>>>
18568>>>>>>>>>    Procedure ComExecute
18570>>>>>>>>>        Handle hDispatchDriver
18570>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18571>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
18572>>>>>>>>>    End_Procedure
18573>>>>>>>>>
18573>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
18575>>>>>>>>>        Handle hDispatchDriver
18575>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18576>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
18577>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
18578>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
18579>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
18580>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
18581>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
18582>>>>>>>>>    End_Procedure
18583>>>>>>>>>
18583>>>>>>>>>    Function ComRibbonGroup Returns Variant
18585>>>>>>>>>        Handle hDispatchDriver
18585>>>>>>>>>        Variant retVal
18585>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18586>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
18587>>>>>>>>>        Function_Return retVal
18588>>>>>>>>>    End_Function
18589>>>>>>>>>
18589>>>>>>>>>    Procedure ComReset
18591>>>>>>>>>        Handle hDispatchDriver
18591>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18592>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
18593>>>>>>>>>    End_Procedure
18594>>>>>>>>>
18594>>>>>>>>>    Function ComTop Returns Integer
18596>>>>>>>>>        Handle hDispatchDriver
18596>>>>>>>>>        Integer retVal
18596>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18597>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
18598>>>>>>>>>        Function_Return retVal
18599>>>>>>>>>    End_Function
18600>>>>>>>>>
18600>>>>>>>>>    Function ComLeft Returns Integer
18602>>>>>>>>>        Handle hDispatchDriver
18602>>>>>>>>>        Integer retVal
18602>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18603>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
18604>>>>>>>>>        Function_Return retVal
18605>>>>>>>>>    End_Function
18606>>>>>>>>>
18606>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
18608>>>>>>>>>        Handle hDispatchDriver
18608>>>>>>>>>        Variant retVal
18608>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18609>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
18610>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
18611>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
18612>>>>>>>>>        Function_Return retVal
18613>>>>>>>>>    End_Function
18614>>>>>>>>>
18614>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
18616>>>>>>>>>        Handle hDispatchDriver
18616>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18617>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18618>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
18619>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
18620>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
18621>>>>>>>>>    End_Procedure
18622>>>>>>>>>End_Class
18623>>>>>>>>>
18623>>>>>>>>>// CoClass
18623>>>>>>>>>// CLSID: {C0DE2200-AACD-4E77-8B1E-42B463760513}
18623>>>>>>>>>Class cCJCommandBarButton is a cComAutomationObject
18624>>>>>>>>>    Import_Class_Protocol cCJICommandBarButton
18625>>>>>>>>>
18625>>>>>>>>>    Procedure Construct_Object
18627>>>>>>>>>        Forward Send Construct_Object
18629>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
18630>>>>>>>>>    End_Procedure
18631>>>>>>>>>End_Class
18632>>>>>>>>>
18632>>>>>>>>>// CLSID: {C0DE2200-D452-4856-BAA4-17E86BD08CBA}
18632>>>>>>>>>Class cCJICommandBarPopup is a Mixin
18633>>>>>>>>>
18633>>>>>>>>>    Function ComChecked Returns Boolean
18635>>>>>>>>>        Boolean retVal
18635>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
18636>>>>>>>>>        Function_Return retVal
18637>>>>>>>>>    End_Function
18638>>>>>>>>>
18638>>>>>>>>>    Procedure Set ComChecked Boolean value
18640>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
18641>>>>>>>>>    End_Procedure
18642>>>>>>>>>
18642>>>>>>>>>    Function ComBeginGroup Returns Boolean
18644>>>>>>>>>        Boolean retVal
18644>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
18645>>>>>>>>>        Function_Return retVal
18646>>>>>>>>>    End_Function
18647>>>>>>>>>
18647>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
18649>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
18650>>>>>>>>>    End_Procedure
18651>>>>>>>>>
18651>>>>>>>>>    Function ComCaption Returns String
18653>>>>>>>>>        String retVal
18653>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
18654>>>>>>>>>        Function_Return retVal
18655>>>>>>>>>    End_Function
18656>>>>>>>>>
18656>>>>>>>>>    Procedure Set ComCaption String value
18658>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
18659>>>>>>>>>    End_Procedure
18660>>>>>>>>>
18660>>>>>>>>>    Function ComDescriptionText Returns String
18662>>>>>>>>>        String retVal
18662>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
18663>>>>>>>>>        Function_Return retVal
18664>>>>>>>>>    End_Function
18665>>>>>>>>>
18665>>>>>>>>>    Procedure Set ComDescriptionText String value
18667>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
18668>>>>>>>>>    End_Procedure
18669>>>>>>>>>
18669>>>>>>>>>    Function ComId Returns Integer
18671>>>>>>>>>        Integer retVal
18671>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
18672>>>>>>>>>        Function_Return retVal
18673>>>>>>>>>    End_Function
18674>>>>>>>>>
18674>>>>>>>>>    Procedure Set ComId Integer value
18676>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
18677>>>>>>>>>    End_Procedure
18678>>>>>>>>>
18678>>>>>>>>>    Function ComParameter Returns String
18680>>>>>>>>>        String retVal
18680>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
18681>>>>>>>>>        Function_Return retVal
18682>>>>>>>>>    End_Function
18683>>>>>>>>>
18683>>>>>>>>>    Procedure Set ComParameter String value
18685>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
18686>>>>>>>>>    End_Procedure
18687>>>>>>>>>
18687>>>>>>>>>    Function ComShortcutText Returns String
18689>>>>>>>>>        String retVal
18689>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
18690>>>>>>>>>        Function_Return retVal
18691>>>>>>>>>    End_Function
18692>>>>>>>>>
18692>>>>>>>>>    Procedure Set ComShortcutText String value
18694>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
18695>>>>>>>>>    End_Procedure
18696>>>>>>>>>
18696>>>>>>>>>    Function ComCustomShortcutText Returns String
18698>>>>>>>>>        String retVal
18698>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
18699>>>>>>>>>        Function_Return retVal
18700>>>>>>>>>    End_Function
18701>>>>>>>>>
18701>>>>>>>>>    Procedure Set ComCustomShortcutText String value
18703>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
18704>>>>>>>>>    End_Procedure
18705>>>>>>>>>
18705>>>>>>>>>    Function ComTooltipText Returns String
18707>>>>>>>>>        String retVal
18707>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
18708>>>>>>>>>        Function_Return retVal
18709>>>>>>>>>    End_Function
18710>>>>>>>>>
18710>>>>>>>>>    Procedure Set ComTooltipText String value
18712>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
18713>>>>>>>>>    End_Procedure
18714>>>>>>>>>
18714>>>>>>>>>    Function ComVisible Returns Boolean
18716>>>>>>>>>        Boolean retVal
18716>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
18717>>>>>>>>>        Function_Return retVal
18718>>>>>>>>>    End_Function
18719>>>>>>>>>
18719>>>>>>>>>    Procedure Set ComVisible Boolean value
18721>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
18722>>>>>>>>>    End_Procedure
18723>>>>>>>>>
18723>>>>>>>>>    Function ComEnabled Returns Boolean
18725>>>>>>>>>        Boolean retVal
18725>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
18726>>>>>>>>>        Function_Return retVal
18727>>>>>>>>>    End_Function
18728>>>>>>>>>
18728>>>>>>>>>    Procedure Set ComEnabled Boolean value
18730>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
18731>>>>>>>>>    End_Procedure
18732>>>>>>>>>
18732>>>>>>>>>    Function ComIconId Returns Integer
18734>>>>>>>>>        Integer retVal
18734>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
18735>>>>>>>>>        Function_Return retVal
18736>>>>>>>>>    End_Function
18737>>>>>>>>>
18737>>>>>>>>>    Procedure Set ComIconId Integer value
18739>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
18740>>>>>>>>>    End_Procedure
18741>>>>>>>>>
18741>>>>>>>>>    Function ComDefaultItem Returns Boolean
18743>>>>>>>>>        Boolean retVal
18743>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
18744>>>>>>>>>        Function_Return retVal
18745>>>>>>>>>    End_Function
18746>>>>>>>>>
18746>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
18748>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
18749>>>>>>>>>    End_Procedure
18750>>>>>>>>>
18750>>>>>>>>>    Function ComFlags Returns XTPControlFlags
18752>>>>>>>>>        XTPControlFlags retVal
18752>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
18753>>>>>>>>>        Function_Return retVal
18754>>>>>>>>>    End_Function
18755>>>>>>>>>
18755>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
18757>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
18758>>>>>>>>>    End_Procedure
18759>>>>>>>>>
18759>>>>>>>>>    Function ComCategory Returns String
18761>>>>>>>>>        String retVal
18761>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
18762>>>>>>>>>        Function_Return retVal
18763>>>>>>>>>    End_Function
18764>>>>>>>>>
18764>>>>>>>>>    Procedure Set ComCategory String value
18766>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
18767>>>>>>>>>    End_Procedure
18768>>>>>>>>>
18768>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
18770>>>>>>>>>        XTPControlHideFlags retVal
18770>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
18771>>>>>>>>>        Function_Return retVal
18772>>>>>>>>>    End_Function
18773>>>>>>>>>
18773>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
18775>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
18776>>>>>>>>>    End_Procedure
18777>>>>>>>>>
18777>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
18779>>>>>>>>>        Boolean retVal
18779>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
18780>>>>>>>>>        Function_Return retVal
18781>>>>>>>>>    End_Function
18782>>>>>>>>>
18782>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
18784>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
18785>>>>>>>>>    End_Procedure
18786>>>>>>>>>
18786>>>>>>>>>    Function ComAction Returns Variant
18788>>>>>>>>>        Variant retVal
18788>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
18789>>>>>>>>>        Function_Return retVal
18790>>>>>>>>>    End_Function
18791>>>>>>>>>
18791>>>>>>>>>    Procedure Set ComAction Variant value
18793>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
18794>>>>>>>>>    End_Procedure
18795>>>>>>>>>
18795>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
18797>>>>>>>>>        Integer retVal
18797>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
18798>>>>>>>>>        Function_Return retVal
18799>>>>>>>>>    End_Function
18800>>>>>>>>>
18800>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
18802>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
18803>>>>>>>>>    End_Procedure
18804>>>>>>>>>
18804>>>>>>>>>    Function ComWidth Returns Integer
18806>>>>>>>>>        Integer retVal
18806>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
18807>>>>>>>>>        Function_Return retVal
18808>>>>>>>>>    End_Function
18809>>>>>>>>>
18809>>>>>>>>>    Procedure Set ComWidth Integer value
18811>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
18812>>>>>>>>>    End_Procedure
18813>>>>>>>>>
18813>>>>>>>>>    Function ComHeight Returns Integer
18815>>>>>>>>>        Integer retVal
18815>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
18816>>>>>>>>>        Function_Return retVal
18817>>>>>>>>>    End_Function
18818>>>>>>>>>
18818>>>>>>>>>    Procedure Set ComHeight Integer value
18820>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
18821>>>>>>>>>    End_Procedure
18822>>>>>>>>>
18822>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
18824>>>>>>>>>        XTPButtonStyle retVal
18824>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
18825>>>>>>>>>        Function_Return retVal
18826>>>>>>>>>    End_Function
18827>>>>>>>>>
18827>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
18829>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
18830>>>>>>>>>    End_Procedure
18831>>>>>>>>>
18831>>>>>>>>>    Function ComKeyboardTip Returns String
18833>>>>>>>>>        String retVal
18833>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
18834>>>>>>>>>        Function_Return retVal
18835>>>>>>>>>    End_Function
18836>>>>>>>>>
18836>>>>>>>>>    Procedure Set ComKeyboardTip String value
18838>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
18839>>>>>>>>>    End_Procedure
18840>>>>>>>>>
18840>>>>>>>>>    Function ComCommandBar Returns Variant
18842>>>>>>>>>        Variant retVal
18842>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
18843>>>>>>>>>        Function_Return retVal
18844>>>>>>>>>    End_Function
18845>>>>>>>>>
18845>>>>>>>>>    Procedure Set ComCommandBar Variant value
18847>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
18848>>>>>>>>>    End_Procedure
18849>>>>>>>>>
18849>>>>>>>>>    Function ComControls Returns Variant
18851>>>>>>>>>        Handle hDispatchDriver
18851>>>>>>>>>        Variant retVal
18851>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18852>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
18853>>>>>>>>>        Function_Return retVal
18854>>>>>>>>>    End_Function
18855>>>>>>>>>
18855>>>>>>>>>    Function ComParent Returns Variant
18857>>>>>>>>>        Handle hDispatchDriver
18857>>>>>>>>>        Variant retVal
18857>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18858>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
18859>>>>>>>>>        Function_Return retVal
18860>>>>>>>>>    End_Function
18861>>>>>>>>>
18861>>>>>>>>>    Function ComIndex Returns Integer
18863>>>>>>>>>        Handle hDispatchDriver
18863>>>>>>>>>        Integer retVal
18863>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18864>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
18865>>>>>>>>>        Function_Return retVal
18866>>>>>>>>>    End_Function
18867>>>>>>>>>
18867>>>>>>>>>    Function ComType Returns XTPControlType
18869>>>>>>>>>        Handle hDispatchDriver
18869>>>>>>>>>        XTPControlType retVal
18869>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18870>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
18871>>>>>>>>>        Function_Return retVal
18872>>>>>>>>>    End_Function
18873>>>>>>>>>
18873>>>>>>>>>    Procedure ComDelete
18875>>>>>>>>>        Handle hDispatchDriver
18875>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18876>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
18877>>>>>>>>>    End_Procedure
18878>>>>>>>>>
18878>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
18880>>>>>>>>>        Handle hDispatchDriver
18880>>>>>>>>>        Variant retVal
18880>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18881>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18882>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
18883>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
18884>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
18885>>>>>>>>>        Function_Return retVal
18886>>>>>>>>>    End_Function
18887>>>>>>>>>
18887>>>>>>>>>    Procedure ComSetFocus
18889>>>>>>>>>        Handle hDispatchDriver
18889>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18890>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
18891>>>>>>>>>    End_Procedure
18892>>>>>>>>>
18892>>>>>>>>>    Procedure ComExecute
18894>>>>>>>>>        Handle hDispatchDriver
18894>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18895>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
18896>>>>>>>>>    End_Procedure
18897>>>>>>>>>
18897>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
18899>>>>>>>>>        Handle hDispatchDriver
18899>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18900>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
18901>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
18902>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
18903>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
18904>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
18905>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
18906>>>>>>>>>    End_Procedure
18907>>>>>>>>>
18907>>>>>>>>>    Function ComRibbonGroup Returns Variant
18909>>>>>>>>>        Handle hDispatchDriver
18909>>>>>>>>>        Variant retVal
18909>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18910>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
18911>>>>>>>>>        Function_Return retVal
18912>>>>>>>>>    End_Function
18913>>>>>>>>>
18913>>>>>>>>>    Procedure ComReset
18915>>>>>>>>>        Handle hDispatchDriver
18915>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18916>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
18917>>>>>>>>>    End_Procedure
18918>>>>>>>>>
18918>>>>>>>>>    Function ComTop Returns Integer
18920>>>>>>>>>        Handle hDispatchDriver
18920>>>>>>>>>        Integer retVal
18920>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18921>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
18922>>>>>>>>>        Function_Return retVal
18923>>>>>>>>>    End_Function
18924>>>>>>>>>
18924>>>>>>>>>    Function ComLeft Returns Integer
18926>>>>>>>>>        Handle hDispatchDriver
18926>>>>>>>>>        Integer retVal
18926>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18927>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
18928>>>>>>>>>        Function_Return retVal
18929>>>>>>>>>    End_Function
18930>>>>>>>>>
18930>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
18932>>>>>>>>>        Handle hDispatchDriver
18932>>>>>>>>>        Variant retVal
18932>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18933>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
18934>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
18935>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
18936>>>>>>>>>        Function_Return retVal
18937>>>>>>>>>    End_Function
18938>>>>>>>>>
18938>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
18940>>>>>>>>>        Handle hDispatchDriver
18940>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18941>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18942>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
18943>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
18944>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
18945>>>>>>>>>    End_Procedure
18946>>>>>>>>>End_Class
18947>>>>>>>>>
18947>>>>>>>>>// CoClass
18947>>>>>>>>>// CLSID: {C0DE2200-BB71-4F79-9A7A-11ED146C387C}
18947>>>>>>>>>Class cCJCommandBarPopup is a cComAutomationObject
18948>>>>>>>>>    Import_Class_Protocol cCJICommandBarPopup
18949>>>>>>>>>
18949>>>>>>>>>    Procedure Construct_Object
18951>>>>>>>>>        Forward Send Construct_Object
18953>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
18954>>>>>>>>>    End_Procedure
18955>>>>>>>>>End_Class
18956>>>>>>>>>
18956>>>>>>>>>// CLSID: {C0DE2200-06D0-4869-8168-9CCBAA22C0EB}
18956>>>>>>>>>Class cCJICommandBarGalleryItem is a Mixin
18957>>>>>>>>>
18957>>>>>>>>>    Function ComId Returns Integer
18959>>>>>>>>>        Integer retVal
18959>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
18960>>>>>>>>>        Function_Return retVal
18961>>>>>>>>>    End_Function
18962>>>>>>>>>
18962>>>>>>>>>    Procedure Set ComId Integer value
18964>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
18965>>>>>>>>>    End_Procedure
18966>>>>>>>>>
18966>>>>>>>>>    Function ComImageIndex Returns Integer
18968>>>>>>>>>        Integer retVal
18968>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
18969>>>>>>>>>        Function_Return retVal
18970>>>>>>>>>    End_Function
18971>>>>>>>>>
18971>>>>>>>>>    Procedure Set ComImageIndex Integer value
18973>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
18974>>>>>>>>>    End_Procedure
18975>>>>>>>>>
18975>>>>>>>>>    Function ComCaption Returns String
18977>>>>>>>>>        String retVal
18977>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
18978>>>>>>>>>        Function_Return retVal
18979>>>>>>>>>    End_Function
18980>>>>>>>>>
18980>>>>>>>>>    Procedure Set ComCaption String value
18982>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
18983>>>>>>>>>    End_Procedure
18984>>>>>>>>>
18984>>>>>>>>>    Function ComToolTip Returns String
18986>>>>>>>>>        String retVal
18986>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
18987>>>>>>>>>        Function_Return retVal
18988>>>>>>>>>    End_Function
18989>>>>>>>>>
18989>>>>>>>>>    Procedure Set ComToolTip String value
18991>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
18992>>>>>>>>>    End_Procedure
18993>>>>>>>>>
18993>>>>>>>>>    Function ComTag Returns Variant
18995>>>>>>>>>        Variant retVal
18995>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_VARIANT to retVal
18996>>>>>>>>>        Function_Return retVal
18997>>>>>>>>>    End_Function
18998>>>>>>>>>
18998>>>>>>>>>    Procedure Set ComTag Variant value
19000>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_VARIANT to value
19001>>>>>>>>>    End_Procedure
19002>>>>>>>>>
19002>>>>>>>>>    Function ComItemWidth Returns Integer
19004>>>>>>>>>        Integer retVal
19004>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
19005>>>>>>>>>        Function_Return retVal
19006>>>>>>>>>    End_Function
19007>>>>>>>>>
19007>>>>>>>>>    Procedure Set ComItemWidth Integer value
19009>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
19010>>>>>>>>>    End_Procedure
19011>>>>>>>>>
19011>>>>>>>>>    Function ComItemHeight Returns Integer
19013>>>>>>>>>        Integer retVal
19013>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
19014>>>>>>>>>        Function_Return retVal
19015>>>>>>>>>    End_Function
19016>>>>>>>>>
19016>>>>>>>>>    Procedure Set ComItemHeight Integer value
19018>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
19019>>>>>>>>>    End_Procedure
19020>>>>>>>>>
19020>>>>>>>>>    Function ComDescriptionText Returns String
19022>>>>>>>>>        String retVal
19022>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
19023>>>>>>>>>        Function_Return retVal
19024>>>>>>>>>    End_Function
19025>>>>>>>>>
19025>>>>>>>>>    Procedure Set ComDescriptionText String value
19027>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
19028>>>>>>>>>    End_Procedure
19029>>>>>>>>>
19029>>>>>>>>>    Function ComEnabled Returns Boolean
19031>>>>>>>>>        Boolean retVal
19031>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
19032>>>>>>>>>        Function_Return retVal
19033>>>>>>>>>    End_Function
19034>>>>>>>>>
19034>>>>>>>>>    Procedure Set ComEnabled Boolean value
19036>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
19037>>>>>>>>>    End_Procedure
19038>>>>>>>>>
19038>>>>>>>>>    Function ComIndex Returns Integer
19040>>>>>>>>>        Handle hDispatchDriver
19040>>>>>>>>>        Integer retVal
19040>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19041>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
19042>>>>>>>>>        Function_Return retVal
19043>>>>>>>>>    End_Function
19044>>>>>>>>>
19044>>>>>>>>>    Function ComLabel Returns Boolean
19046>>>>>>>>>        Handle hDispatchDriver
19046>>>>>>>>>        Boolean retVal
19046>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19047>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_BOOL to retVal
19048>>>>>>>>>        Function_Return retVal
19049>>>>>>>>>    End_Function
19050>>>>>>>>>End_Class
19051>>>>>>>>>
19051>>>>>>>>>// CoClass
19051>>>>>>>>>// CLSID: {C0DE2200-9D8C-4025-AAD4-73D8D15E7FED}
19051>>>>>>>>>Class cCJCommandBarGalleryItem is a cComAutomationObject
19052>>>>>>>>>    Import_Class_Protocol cCJICommandBarGalleryItem
19053>>>>>>>>>
19053>>>>>>>>>    Procedure Construct_Object
19055>>>>>>>>>        Forward Send Construct_Object
19057>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
19058>>>>>>>>>    End_Procedure
19059>>>>>>>>>End_Class
19060>>>>>>>>>
19060>>>>>>>>>// CLSID: {C0DE2200-0AFA-4EC8-A49E-4DC7671C4AC7}
19060>>>>>>>>>Class cCJICommandBarGalleryItems is a Mixin
19061>>>>>>>>>
19061>>>>>>>>>    Function ComIcons Returns Variant
19063>>>>>>>>>        Variant retVal
19063>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_DISPATCH to retVal
19064>>>>>>>>>        Function_Return retVal
19065>>>>>>>>>    End_Function
19066>>>>>>>>>
19066>>>>>>>>>    Procedure Set ComIcons Variant value
19068>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_DISPATCH to value
19069>>>>>>>>>    End_Procedure
19070>>>>>>>>>
19070>>>>>>>>>    Function ComItemWidth Returns Integer
19072>>>>>>>>>        Integer retVal
19072>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to retVal
19073>>>>>>>>>        Function_Return retVal
19074>>>>>>>>>    End_Function
19075>>>>>>>>>
19075>>>>>>>>>    Procedure Set ComItemWidth Integer value
19077>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to value
19078>>>>>>>>>    End_Procedure
19079>>>>>>>>>
19079>>>>>>>>>    Function ComItemHeight Returns Integer
19081>>>>>>>>>        Integer retVal
19081>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
19082>>>>>>>>>        Function_Return retVal
19083>>>>>>>>>    End_Function
19084>>>>>>>>>
19084>>>>>>>>>    Procedure Set ComItemHeight Integer value
19086>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
19087>>>>>>>>>    End_Procedure
19088>>>>>>>>>
19088>>>>>>>>>    Function ComClipItems Returns Boolean
19090>>>>>>>>>        Boolean retVal
19090>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
19091>>>>>>>>>        Function_Return retVal
19092>>>>>>>>>    End_Function
19093>>>>>>>>>
19093>>>>>>>>>    Procedure Set ComClipItems Boolean value
19095>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
19096>>>>>>>>>    End_Procedure
19097>>>>>>>>>
19097>>>>>>>>>    Function ComEnableMarkup Returns Boolean
19099>>>>>>>>>        Boolean retVal
19099>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
19100>>>>>>>>>        Function_Return retVal
19101>>>>>>>>>    End_Function
19102>>>>>>>>>
19102>>>>>>>>>    Procedure Set ComEnableMarkup Boolean value
19104>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
19105>>>>>>>>>    End_Procedure
19106>>>>>>>>>
19106>>>>>>>>>    Function ComAddItem Integer llId String llCaption Returns Variant
19108>>>>>>>>>        Handle hDispatchDriver
19108>>>>>>>>>        Variant retVal
19108>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19109>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
19110>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
19111>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
19112>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
19113>>>>>>>>>        Function_Return retVal
19114>>>>>>>>>    End_Function
19115>>>>>>>>>
19115>>>>>>>>>    Function ComAddLabel String llCaption Returns Variant
19117>>>>>>>>>        Handle hDispatchDriver
19117>>>>>>>>>        Variant retVal
19117>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19118>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19119>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
19120>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
19121>>>>>>>>>        Function_Return retVal
19122>>>>>>>>>    End_Function
19123>>>>>>>>>
19123>>>>>>>>>    Function ComAddSeparator Returns Variant
19125>>>>>>>>>        Handle hDispatchDriver
19125>>>>>>>>>        Variant retVal
19125>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19126>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
19127>>>>>>>>>        Function_Return retVal
19128>>>>>>>>>    End_Function
19129>>>>>>>>>
19129>>>>>>>>>    // Gets the number of controls in the collection.
19129>>>>>>>>>    Function ComCount Returns Integer
19131>>>>>>>>>        Handle hDispatchDriver
19131>>>>>>>>>        Integer retVal
19131>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19132>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
19133>>>>>>>>>        Function_Return retVal
19134>>>>>>>>>    End_Function
19135>>>>>>>>>
19135>>>>>>>>>    // Gets an item from the collection by its index.
19135>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
19137>>>>>>>>>        Handle hDispatchDriver
19137>>>>>>>>>        Variant retVal
19137>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19138>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19139>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
19140>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
19141>>>>>>>>>        Function_Return retVal
19142>>>>>>>>>    End_Function
19143>>>>>>>>>
19143>>>>>>>>>    Function Com_NewEnum Returns Variant
19145>>>>>>>>>        Handle hDispatchDriver
19145>>>>>>>>>        Variant retVal
19145>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19146>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
19147>>>>>>>>>        Function_Return retVal
19148>>>>>>>>>    End_Function
19149>>>>>>>>>
19149>>>>>>>>>    // Deletes all of the command bar controls from the collection
19149>>>>>>>>>    Procedure ComDeleteAll
19151>>>>>>>>>        Handle hDispatchDriver
19151>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19152>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
19153>>>>>>>>>    End_Procedure
19154>>>>>>>>>
19154>>>>>>>>>    Procedure ComDeleteAt Integer llIndex
19156>>>>>>>>>        Handle hDispatchDriver
19156>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19157>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19158>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
19159>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 10 OLE_VT_VOID
19160>>>>>>>>>    End_Procedure
19161>>>>>>>>>
19161>>>>>>>>>    Function ComMarkupContext Returns Variant
19163>>>>>>>>>        Handle hDispatchDriver
19163>>>>>>>>>        Variant retVal
19163>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19164>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_DISPATCH to retVal
19165>>>>>>>>>        Function_Return retVal
19166>>>>>>>>>    End_Function
19167>>>>>>>>>End_Class
19168>>>>>>>>>
19168>>>>>>>>>// CLSID: {C0DE2200-7BE8-42EC-870C-8849F5540F14}
19168>>>>>>>>>Class cCJICommandBarGalleryItemsEvents is a Mixin
19169>>>>>>>>>
19169>>>>>>>>>    Procedure OnComDrawItem OLE_HANDLE llhDC Variant llGallery Variant llItem Integer llx Integer lly Integer llcx Integer llcy Boolean llEnabled Boolean llSelected Boolean llPressed Boolean llChecked Variant llHandled
19171>>>>>>>>>    End_Procedure
19172>>>>>>>>>
19172>>>>>>>>>    Procedure RegisterComEvents
19174>>>>>>>>>        Send RegisterComEvent 1 msg_OnComDrawItem
19175>>>>>>>>>    End_Procedure
19176>>>>>>>>>End_Class
19177>>>>>>>>>
19177>>>>>>>>>// CoClass
19177>>>>>>>>>// CLSID: {C0DE2200-BA48-4451-B04D-5304909AE543}
19177>>>>>>>>>Class cCJCommandBarGalleryItems is a cComAutomationObject
19178>>>>>>>>>    Import_Class_Protocol cCJICommandBarGalleryItems
19179>>>>>>>>>    Import_Class_Protocol cCJICommandBarGalleryItemsEvents
19180>>>>>>>>>
19180>>>>>>>>>    Procedure Construct_Object
19182>>>>>>>>>        Forward Send Construct_Object
19184>>>>>>>>>        Set psEventId to "{C0DE2200-7BE8-42EC-870C-8849F5540F14}"
19185>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
19186>>>>>>>>>    End_Procedure
19187>>>>>>>>>End_Class
19188>>>>>>>>>
19188>>>>>>>>>// CLSID: {C0DE2200-55CC-4D4C-A6CF-260F62044127}
19188>>>>>>>>>Class cCJICommandBarGallery is a Mixin
19189>>>>>>>>>
19189>>>>>>>>>    Function ComChecked Returns Boolean
19191>>>>>>>>>        Boolean retVal
19191>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
19192>>>>>>>>>        Function_Return retVal
19193>>>>>>>>>    End_Function
19194>>>>>>>>>
19194>>>>>>>>>    Procedure Set ComChecked Boolean value
19196>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
19197>>>>>>>>>    End_Procedure
19198>>>>>>>>>
19198>>>>>>>>>    Function ComBeginGroup Returns Boolean
19200>>>>>>>>>        Boolean retVal
19200>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
19201>>>>>>>>>        Function_Return retVal
19202>>>>>>>>>    End_Function
19203>>>>>>>>>
19203>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
19205>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
19206>>>>>>>>>    End_Procedure
19207>>>>>>>>>
19207>>>>>>>>>    Function ComCaption Returns String
19209>>>>>>>>>        String retVal
19209>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
19210>>>>>>>>>        Function_Return retVal
19211>>>>>>>>>    End_Function
19212>>>>>>>>>
19212>>>>>>>>>    Procedure Set ComCaption String value
19214>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
19215>>>>>>>>>    End_Procedure
19216>>>>>>>>>
19216>>>>>>>>>    Function ComDescriptionText Returns String
19218>>>>>>>>>        String retVal
19218>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
19219>>>>>>>>>        Function_Return retVal
19220>>>>>>>>>    End_Function
19221>>>>>>>>>
19221>>>>>>>>>    Procedure Set ComDescriptionText String value
19223>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
19224>>>>>>>>>    End_Procedure
19225>>>>>>>>>
19225>>>>>>>>>    Function ComId Returns Integer
19227>>>>>>>>>        Integer retVal
19227>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
19228>>>>>>>>>        Function_Return retVal
19229>>>>>>>>>    End_Function
19230>>>>>>>>>
19230>>>>>>>>>    Procedure Set ComId Integer value
19232>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
19233>>>>>>>>>    End_Procedure
19234>>>>>>>>>
19234>>>>>>>>>    Function ComParameter Returns String
19236>>>>>>>>>        String retVal
19236>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
19237>>>>>>>>>        Function_Return retVal
19238>>>>>>>>>    End_Function
19239>>>>>>>>>
19239>>>>>>>>>    Procedure Set ComParameter String value
19241>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
19242>>>>>>>>>    End_Procedure
19243>>>>>>>>>
19243>>>>>>>>>    Function ComShortcutText Returns String
19245>>>>>>>>>        String retVal
19245>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
19246>>>>>>>>>        Function_Return retVal
19247>>>>>>>>>    End_Function
19248>>>>>>>>>
19248>>>>>>>>>    Procedure Set ComShortcutText String value
19250>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
19251>>>>>>>>>    End_Procedure
19252>>>>>>>>>
19252>>>>>>>>>    Function ComCustomShortcutText Returns String
19254>>>>>>>>>        String retVal
19254>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
19255>>>>>>>>>        Function_Return retVal
19256>>>>>>>>>    End_Function
19257>>>>>>>>>
19257>>>>>>>>>    Procedure Set ComCustomShortcutText String value
19259>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
19260>>>>>>>>>    End_Procedure
19261>>>>>>>>>
19261>>>>>>>>>    Function ComTooltipText Returns String
19263>>>>>>>>>        String retVal
19263>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
19264>>>>>>>>>        Function_Return retVal
19265>>>>>>>>>    End_Function
19266>>>>>>>>>
19266>>>>>>>>>    Procedure Set ComTooltipText String value
19268>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
19269>>>>>>>>>    End_Procedure
19270>>>>>>>>>
19270>>>>>>>>>    Function ComVisible Returns Boolean
19272>>>>>>>>>        Boolean retVal
19272>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
19273>>>>>>>>>        Function_Return retVal
19274>>>>>>>>>    End_Function
19275>>>>>>>>>
19275>>>>>>>>>    Procedure Set ComVisible Boolean value
19277>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
19278>>>>>>>>>    End_Procedure
19279>>>>>>>>>
19279>>>>>>>>>    Function ComEnabled Returns Boolean
19281>>>>>>>>>        Boolean retVal
19281>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
19282>>>>>>>>>        Function_Return retVal
19283>>>>>>>>>    End_Function
19284>>>>>>>>>
19284>>>>>>>>>    Procedure Set ComEnabled Boolean value
19286>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
19287>>>>>>>>>    End_Procedure
19288>>>>>>>>>
19288>>>>>>>>>    Function ComIconId Returns Integer
19290>>>>>>>>>        Integer retVal
19290>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
19291>>>>>>>>>        Function_Return retVal
19292>>>>>>>>>    End_Function
19293>>>>>>>>>
19293>>>>>>>>>    Procedure Set ComIconId Integer value
19295>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
19296>>>>>>>>>    End_Procedure
19297>>>>>>>>>
19297>>>>>>>>>    Function ComDefaultItem Returns Boolean
19299>>>>>>>>>        Boolean retVal
19299>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
19300>>>>>>>>>        Function_Return retVal
19301>>>>>>>>>    End_Function
19302>>>>>>>>>
19302>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
19304>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
19305>>>>>>>>>    End_Procedure
19306>>>>>>>>>
19306>>>>>>>>>    Function ComFlags Returns XTPControlFlags
19308>>>>>>>>>        XTPControlFlags retVal
19308>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
19309>>>>>>>>>        Function_Return retVal
19310>>>>>>>>>    End_Function
19311>>>>>>>>>
19311>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
19313>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
19314>>>>>>>>>    End_Procedure
19315>>>>>>>>>
19315>>>>>>>>>    Function ComCategory Returns String
19317>>>>>>>>>        String retVal
19317>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
19318>>>>>>>>>        Function_Return retVal
19319>>>>>>>>>    End_Function
19320>>>>>>>>>
19320>>>>>>>>>    Procedure Set ComCategory String value
19322>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
19323>>>>>>>>>    End_Procedure
19324>>>>>>>>>
19324>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
19326>>>>>>>>>        XTPControlHideFlags retVal
19326>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
19327>>>>>>>>>        Function_Return retVal
19328>>>>>>>>>    End_Function
19329>>>>>>>>>
19329>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
19331>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
19332>>>>>>>>>    End_Procedure
19333>>>>>>>>>
19333>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
19335>>>>>>>>>        Boolean retVal
19335>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
19336>>>>>>>>>        Function_Return retVal
19337>>>>>>>>>    End_Function
19338>>>>>>>>>
19338>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
19340>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
19341>>>>>>>>>    End_Procedure
19342>>>>>>>>>
19342>>>>>>>>>    Function ComAction Returns Variant
19344>>>>>>>>>        Variant retVal
19344>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
19345>>>>>>>>>        Function_Return retVal
19346>>>>>>>>>    End_Function
19347>>>>>>>>>
19347>>>>>>>>>    Procedure Set ComAction Variant value
19349>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
19350>>>>>>>>>    End_Procedure
19351>>>>>>>>>
19351>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
19353>>>>>>>>>        Integer retVal
19353>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
19354>>>>>>>>>        Function_Return retVal
19355>>>>>>>>>    End_Function
19356>>>>>>>>>
19356>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
19358>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
19359>>>>>>>>>    End_Procedure
19360>>>>>>>>>
19360>>>>>>>>>    Function ComWidth Returns Integer
19362>>>>>>>>>        Integer retVal
19362>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
19363>>>>>>>>>        Function_Return retVal
19364>>>>>>>>>    End_Function
19365>>>>>>>>>
19365>>>>>>>>>    Procedure Set ComWidth Integer value
19367>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
19368>>>>>>>>>    End_Procedure
19369>>>>>>>>>
19369>>>>>>>>>    Function ComHeight Returns Integer
19371>>>>>>>>>        Integer retVal
19371>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
19372>>>>>>>>>        Function_Return retVal
19373>>>>>>>>>    End_Function
19374>>>>>>>>>
19374>>>>>>>>>    Procedure Set ComHeight Integer value
19376>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
19377>>>>>>>>>    End_Procedure
19378>>>>>>>>>
19378>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
19380>>>>>>>>>        XTPButtonStyle retVal
19380>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
19381>>>>>>>>>        Function_Return retVal
19382>>>>>>>>>    End_Function
19383>>>>>>>>>
19383>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
19385>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
19386>>>>>>>>>    End_Procedure
19387>>>>>>>>>
19387>>>>>>>>>    Function ComKeyboardTip Returns String
19389>>>>>>>>>        String retVal
19389>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
19390>>>>>>>>>        Function_Return retVal
19391>>>>>>>>>    End_Function
19392>>>>>>>>>
19392>>>>>>>>>    Procedure Set ComKeyboardTip String value
19394>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
19395>>>>>>>>>    End_Procedure
19396>>>>>>>>>
19396>>>>>>>>>    Function ComCommandBar Returns Variant
19398>>>>>>>>>        Variant retVal
19398>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
19399>>>>>>>>>        Function_Return retVal
19400>>>>>>>>>    End_Function
19401>>>>>>>>>
19401>>>>>>>>>    Procedure Set ComCommandBar Variant value
19403>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
19404>>>>>>>>>    End_Procedure
19405>>>>>>>>>
19405>>>>>>>>>    Function ComItems Returns Variant
19407>>>>>>>>>        Variant retVal
19407>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_DISPATCH to retVal
19408>>>>>>>>>        Function_Return retVal
19409>>>>>>>>>    End_Function
19410>>>>>>>>>
19410>>>>>>>>>    Procedure Set ComItems Variant value
19412>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_DISPATCH to value
19413>>>>>>>>>    End_Procedure
19414>>>>>>>>>
19414>>>>>>>>>    Function ComSelectedItem Returns Variant
19416>>>>>>>>>        Variant retVal
19416>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_DISPATCH to retVal
19417>>>>>>>>>        Function_Return retVal
19418>>>>>>>>>    End_Function
19419>>>>>>>>>
19419>>>>>>>>>    Procedure Set ComSelectedItem Variant value
19421>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_DISPATCH to value
19422>>>>>>>>>    End_Procedure
19423>>>>>>>>>
19423>>>>>>>>>    Function ComCheckedItem Returns Integer
19425>>>>>>>>>        Integer retVal
19425>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
19426>>>>>>>>>        Function_Return retVal
19427>>>>>>>>>    End_Function
19428>>>>>>>>>
19428>>>>>>>>>    Procedure Set ComCheckedItem Integer value
19430>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
19431>>>>>>>>>    End_Procedure
19432>>>>>>>>>
19432>>>>>>>>>    Function ComShowBorders Returns Boolean
19434>>>>>>>>>        Boolean retVal
19434>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BOOL to retVal
19435>>>>>>>>>        Function_Return retVal
19436>>>>>>>>>    End_Function
19437>>>>>>>>>
19437>>>>>>>>>    Procedure Set ComShowBorders Boolean value
19439>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BOOL to value
19440>>>>>>>>>    End_Procedure
19441>>>>>>>>>
19441>>>>>>>>>    Function ComShowLabels Returns Boolean
19443>>>>>>>>>        Boolean retVal
19443>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 54 OLE_VT_BOOL to retVal
19444>>>>>>>>>        Function_Return retVal
19445>>>>>>>>>    End_Function
19446>>>>>>>>>
19446>>>>>>>>>    Procedure Set ComShowLabels Boolean value
19448>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 54 OLE_VT_BOOL to value
19449>>>>>>>>>    End_Procedure
19450>>>>>>>>>
19450>>>>>>>>>    Function ComShowScrollBar Returns Boolean
19452>>>>>>>>>        Boolean retVal
19452>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 55 OLE_VT_BOOL to retVal
19453>>>>>>>>>        Function_Return retVal
19454>>>>>>>>>    End_Function
19455>>>>>>>>>
19455>>>>>>>>>    Procedure Set ComShowScrollBar Boolean value
19457>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 55 OLE_VT_BOOL to value
19458>>>>>>>>>    End_Procedure
19459>>>>>>>>>
19459>>>>>>>>>    Function ComScrollPos Returns Integer
19461>>>>>>>>>        Integer retVal
19461>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 56 OLE_VT_I4 to retVal
19462>>>>>>>>>        Function_Return retVal
19463>>>>>>>>>    End_Function
19464>>>>>>>>>
19464>>>>>>>>>    Procedure Set ComScrollPos Integer value
19466>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 56 OLE_VT_I4 to value
19467>>>>>>>>>    End_Procedure
19468>>>>>>>>>
19468>>>>>>>>>    Function ComResizable Returns XTPGalleryResizable
19470>>>>>>>>>        XTPGalleryResizable retVal
19470>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 62 OLE_VT_I4 to retVal
19471>>>>>>>>>        Function_Return retVal
19472>>>>>>>>>    End_Function
19473>>>>>>>>>
19473>>>>>>>>>    Procedure Set ComResizable XTPGalleryResizable value
19475>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 62 OLE_VT_I4 to value
19476>>>>>>>>>    End_Procedure
19477>>>>>>>>>
19477>>>>>>>>>    Function ComEnableTransparency Returns Boolean
19479>>>>>>>>>        Boolean retVal
19479>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 63 OLE_VT_BOOL to retVal
19480>>>>>>>>>        Function_Return retVal
19481>>>>>>>>>    End_Function
19482>>>>>>>>>
19482>>>>>>>>>    Procedure Set ComEnableTransparency Boolean value
19484>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 63 OLE_VT_BOOL to value
19485>>>>>>>>>    End_Procedure
19486>>>>>>>>>
19486>>>>>>>>>    Function ComControls Returns Variant
19488>>>>>>>>>        Handle hDispatchDriver
19488>>>>>>>>>        Variant retVal
19488>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19489>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
19490>>>>>>>>>        Function_Return retVal
19491>>>>>>>>>    End_Function
19492>>>>>>>>>
19492>>>>>>>>>    Function ComParent Returns Variant
19494>>>>>>>>>        Handle hDispatchDriver
19494>>>>>>>>>        Variant retVal
19494>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19495>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
19496>>>>>>>>>        Function_Return retVal
19497>>>>>>>>>    End_Function
19498>>>>>>>>>
19498>>>>>>>>>    Function ComIndex Returns Integer
19500>>>>>>>>>        Handle hDispatchDriver
19500>>>>>>>>>        Integer retVal
19500>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19501>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
19502>>>>>>>>>        Function_Return retVal
19503>>>>>>>>>    End_Function
19504>>>>>>>>>
19504>>>>>>>>>    Function ComType Returns XTPControlType
19506>>>>>>>>>        Handle hDispatchDriver
19506>>>>>>>>>        XTPControlType retVal
19506>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19507>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
19508>>>>>>>>>        Function_Return retVal
19509>>>>>>>>>    End_Function
19510>>>>>>>>>
19510>>>>>>>>>    Procedure ComDelete
19512>>>>>>>>>        Handle hDispatchDriver
19512>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19513>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
19514>>>>>>>>>    End_Procedure
19515>>>>>>>>>
19515>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
19517>>>>>>>>>        Handle hDispatchDriver
19517>>>>>>>>>        Variant retVal
19517>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19518>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
19519>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
19520>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
19521>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
19522>>>>>>>>>        Function_Return retVal
19523>>>>>>>>>    End_Function
19524>>>>>>>>>
19524>>>>>>>>>    Procedure ComSetFocus
19526>>>>>>>>>        Handle hDispatchDriver
19526>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19527>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
19528>>>>>>>>>    End_Procedure
19529>>>>>>>>>
19529>>>>>>>>>    Procedure ComExecute
19531>>>>>>>>>        Handle hDispatchDriver
19531>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19532>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
19533>>>>>>>>>    End_Procedure
19534>>>>>>>>>
19534>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
19536>>>>>>>>>        Handle hDispatchDriver
19536>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19537>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
19538>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
19539>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
19540>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
19541>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
19542>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
19543>>>>>>>>>    End_Procedure
19544>>>>>>>>>
19544>>>>>>>>>    Function ComRibbonGroup Returns Variant
19546>>>>>>>>>        Handle hDispatchDriver
19546>>>>>>>>>        Variant retVal
19546>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19547>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
19548>>>>>>>>>        Function_Return retVal
19549>>>>>>>>>    End_Function
19550>>>>>>>>>
19550>>>>>>>>>    Procedure ComReset
19552>>>>>>>>>        Handle hDispatchDriver
19552>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19553>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
19554>>>>>>>>>    End_Procedure
19555>>>>>>>>>
19555>>>>>>>>>    Function ComTop Returns Integer
19557>>>>>>>>>        Handle hDispatchDriver
19557>>>>>>>>>        Integer retVal
19557>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19558>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
19559>>>>>>>>>        Function_Return retVal
19560>>>>>>>>>    End_Function
19561>>>>>>>>>
19561>>>>>>>>>    Function ComLeft Returns Integer
19563>>>>>>>>>        Handle hDispatchDriver
19563>>>>>>>>>        Integer retVal
19563>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19564>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
19565>>>>>>>>>        Function_Return retVal
19566>>>>>>>>>    End_Function
19567>>>>>>>>>
19567>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
19569>>>>>>>>>        Handle hDispatchDriver
19569>>>>>>>>>        Variant retVal
19569>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19570>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19571>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
19572>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
19573>>>>>>>>>        Function_Return retVal
19574>>>>>>>>>    End_Function
19575>>>>>>>>>
19575>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
19577>>>>>>>>>        Handle hDispatchDriver
19577>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19578>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
19579>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
19580>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
19581>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
19582>>>>>>>>>    End_Procedure
19583>>>>>>>>>
19583>>>>>>>>>    Procedure ComSetItemsMargin Integer llLeft Integer llTop Integer llRight Integer llBottom
19585>>>>>>>>>        Handle hDispatchDriver
19585>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19586>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
19587>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
19588>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
19589>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
19590>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
19591>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 59 OLE_VT_VOID
19592>>>>>>>>>    End_Procedure
19593>>>>>>>>>
19593>>>>>>>>>    Procedure ComEnsureVisible Integer llIndex
19595>>>>>>>>>        Handle hDispatchDriver
19595>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19596>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19597>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
19598>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 61 OLE_VT_VOID
19599>>>>>>>>>    End_Procedure
19600>>>>>>>>>End_Class
19601>>>>>>>>>
19601>>>>>>>>>// CoClass
19601>>>>>>>>>// CLSID: {C0DE2200-AD3D-450F-A51C-F3928CA3D480}
19601>>>>>>>>>Class cCJCommandBarGallery is a cComAutomationObject
19602>>>>>>>>>    Import_Class_Protocol cCJICommandBarGallery
19603>>>>>>>>>
19603>>>>>>>>>    Procedure Construct_Object
19605>>>>>>>>>        Forward Send Construct_Object
19607>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
19608>>>>>>>>>    End_Procedure
19609>>>>>>>>>End_Class
19610>>>>>>>>>
19610>>>>>>>>>// CLSID: {C0DE2200-1A6F-478C-8C8D-38C067A2BC1F}
19610>>>>>>>>>Class cCJICommandBarComboBox is a Mixin
19611>>>>>>>>>
19611>>>>>>>>>    Function ComChecked Returns Boolean
19613>>>>>>>>>        Boolean retVal
19613>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
19614>>>>>>>>>        Function_Return retVal
19615>>>>>>>>>    End_Function
19616>>>>>>>>>
19616>>>>>>>>>    Procedure Set ComChecked Boolean value
19618>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
19619>>>>>>>>>    End_Procedure
19620>>>>>>>>>
19620>>>>>>>>>    Function ComBeginGroup Returns Boolean
19622>>>>>>>>>        Boolean retVal
19622>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
19623>>>>>>>>>        Function_Return retVal
19624>>>>>>>>>    End_Function
19625>>>>>>>>>
19625>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
19627>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
19628>>>>>>>>>    End_Procedure
19629>>>>>>>>>
19629>>>>>>>>>    Function ComCaption Returns String
19631>>>>>>>>>        String retVal
19631>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
19632>>>>>>>>>        Function_Return retVal
19633>>>>>>>>>    End_Function
19634>>>>>>>>>
19634>>>>>>>>>    Procedure Set ComCaption String value
19636>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
19637>>>>>>>>>    End_Procedure
19638>>>>>>>>>
19638>>>>>>>>>    Function ComDescriptionText Returns String
19640>>>>>>>>>        String retVal
19640>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
19641>>>>>>>>>        Function_Return retVal
19642>>>>>>>>>    End_Function
19643>>>>>>>>>
19643>>>>>>>>>    Procedure Set ComDescriptionText String value
19645>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
19646>>>>>>>>>    End_Procedure
19647>>>>>>>>>
19647>>>>>>>>>    Function ComId Returns Integer
19649>>>>>>>>>        Integer retVal
19649>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
19650>>>>>>>>>        Function_Return retVal
19651>>>>>>>>>    End_Function
19652>>>>>>>>>
19652>>>>>>>>>    Procedure Set ComId Integer value
19654>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
19655>>>>>>>>>    End_Procedure
19656>>>>>>>>>
19656>>>>>>>>>    Function ComParameter Returns String
19658>>>>>>>>>        String retVal
19658>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
19659>>>>>>>>>        Function_Return retVal
19660>>>>>>>>>    End_Function
19661>>>>>>>>>
19661>>>>>>>>>    Procedure Set ComParameter String value
19663>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
19664>>>>>>>>>    End_Procedure
19665>>>>>>>>>
19665>>>>>>>>>    Function ComShortcutText Returns String
19667>>>>>>>>>        String retVal
19667>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
19668>>>>>>>>>        Function_Return retVal
19669>>>>>>>>>    End_Function
19670>>>>>>>>>
19670>>>>>>>>>    Procedure Set ComShortcutText String value
19672>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
19673>>>>>>>>>    End_Procedure
19674>>>>>>>>>
19674>>>>>>>>>    Function ComCustomShortcutText Returns String
19676>>>>>>>>>        String retVal
19676>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
19677>>>>>>>>>        Function_Return retVal
19678>>>>>>>>>    End_Function
19679>>>>>>>>>
19679>>>>>>>>>    Procedure Set ComCustomShortcutText String value
19681>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
19682>>>>>>>>>    End_Procedure
19683>>>>>>>>>
19683>>>>>>>>>    Function ComTooltipText Returns String
19685>>>>>>>>>        String retVal
19685>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
19686>>>>>>>>>        Function_Return retVal
19687>>>>>>>>>    End_Function
19688>>>>>>>>>
19688>>>>>>>>>    Procedure Set ComTooltipText String value
19690>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
19691>>>>>>>>>    End_Procedure
19692>>>>>>>>>
19692>>>>>>>>>    Function ComVisible Returns Boolean
19694>>>>>>>>>        Boolean retVal
19694>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
19695>>>>>>>>>        Function_Return retVal
19696>>>>>>>>>    End_Function
19697>>>>>>>>>
19697>>>>>>>>>    Procedure Set ComVisible Boolean value
19699>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
19700>>>>>>>>>    End_Procedure
19701>>>>>>>>>
19701>>>>>>>>>    Function ComEnabled Returns Boolean
19703>>>>>>>>>        Boolean retVal
19703>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
19704>>>>>>>>>        Function_Return retVal
19705>>>>>>>>>    End_Function
19706>>>>>>>>>
19706>>>>>>>>>    Procedure Set ComEnabled Boolean value
19708>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
19709>>>>>>>>>    End_Procedure
19710>>>>>>>>>
19710>>>>>>>>>    Function ComIconId Returns Integer
19712>>>>>>>>>        Integer retVal
19712>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
19713>>>>>>>>>        Function_Return retVal
19714>>>>>>>>>    End_Function
19715>>>>>>>>>
19715>>>>>>>>>    Procedure Set ComIconId Integer value
19717>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
19718>>>>>>>>>    End_Procedure
19719>>>>>>>>>
19719>>>>>>>>>    Function ComDefaultItem Returns Boolean
19721>>>>>>>>>        Boolean retVal
19721>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
19722>>>>>>>>>        Function_Return retVal
19723>>>>>>>>>    End_Function
19724>>>>>>>>>
19724>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
19726>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
19727>>>>>>>>>    End_Procedure
19728>>>>>>>>>
19728>>>>>>>>>    Function ComFlags Returns XTPControlFlags
19730>>>>>>>>>        XTPControlFlags retVal
19730>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
19731>>>>>>>>>        Function_Return retVal
19732>>>>>>>>>    End_Function
19733>>>>>>>>>
19733>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
19735>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
19736>>>>>>>>>    End_Procedure
19737>>>>>>>>>
19737>>>>>>>>>    Function ComCategory Returns String
19739>>>>>>>>>        String retVal
19739>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
19740>>>>>>>>>        Function_Return retVal
19741>>>>>>>>>    End_Function
19742>>>>>>>>>
19742>>>>>>>>>    Procedure Set ComCategory String value
19744>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
19745>>>>>>>>>    End_Procedure
19746>>>>>>>>>
19746>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
19748>>>>>>>>>        XTPControlHideFlags retVal
19748>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
19749>>>>>>>>>        Function_Return retVal
19750>>>>>>>>>    End_Function
19751>>>>>>>>>
19751>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
19753>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
19754>>>>>>>>>    End_Procedure
19755>>>>>>>>>
19755>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
19757>>>>>>>>>        Boolean retVal
19757>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
19758>>>>>>>>>        Function_Return retVal
19759>>>>>>>>>    End_Function
19760>>>>>>>>>
19760>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
19762>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
19763>>>>>>>>>    End_Procedure
19764>>>>>>>>>
19764>>>>>>>>>    Function ComAction Returns Variant
19766>>>>>>>>>        Variant retVal
19766>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
19767>>>>>>>>>        Function_Return retVal
19768>>>>>>>>>    End_Function
19769>>>>>>>>>
19769>>>>>>>>>    Procedure Set ComAction Variant value
19771>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
19772>>>>>>>>>    End_Procedure
19773>>>>>>>>>
19773>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
19775>>>>>>>>>        Integer retVal
19775>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
19776>>>>>>>>>        Function_Return retVal
19777>>>>>>>>>    End_Function
19778>>>>>>>>>
19778>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
19780>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
19781>>>>>>>>>    End_Procedure
19782>>>>>>>>>
19782>>>>>>>>>    Function ComWidth Returns Integer
19784>>>>>>>>>        Integer retVal
19784>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
19785>>>>>>>>>        Function_Return retVal
19786>>>>>>>>>    End_Function
19787>>>>>>>>>
19787>>>>>>>>>    Procedure Set ComWidth Integer value
19789>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
19790>>>>>>>>>    End_Procedure
19791>>>>>>>>>
19791>>>>>>>>>    Function ComHeight Returns Integer
19793>>>>>>>>>        Integer retVal
19793>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
19794>>>>>>>>>        Function_Return retVal
19795>>>>>>>>>    End_Function
19796>>>>>>>>>
19796>>>>>>>>>    Procedure Set ComHeight Integer value
19798>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
19799>>>>>>>>>    End_Procedure
19800>>>>>>>>>
19800>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
19802>>>>>>>>>        XTPButtonStyle retVal
19802>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
19803>>>>>>>>>        Function_Return retVal
19804>>>>>>>>>    End_Function
19805>>>>>>>>>
19805>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
19807>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
19808>>>>>>>>>    End_Procedure
19809>>>>>>>>>
19809>>>>>>>>>    Function ComKeyboardTip Returns String
19811>>>>>>>>>        String retVal
19811>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
19812>>>>>>>>>        Function_Return retVal
19813>>>>>>>>>    End_Function
19814>>>>>>>>>
19814>>>>>>>>>    Procedure Set ComKeyboardTip String value
19816>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
19817>>>>>>>>>    End_Procedure
19818>>>>>>>>>
19818>>>>>>>>>    Function ComCommandBar Returns Variant
19820>>>>>>>>>        Variant retVal
19820>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
19821>>>>>>>>>        Function_Return retVal
19822>>>>>>>>>    End_Function
19823>>>>>>>>>
19823>>>>>>>>>    Procedure Set ComCommandBar Variant value
19825>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
19826>>>>>>>>>    End_Procedure
19827>>>>>>>>>
19827>>>>>>>>>    Function ComDropDownWidth Returns Integer
19829>>>>>>>>>        Integer retVal
19829>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
19830>>>>>>>>>        Function_Return retVal
19831>>>>>>>>>    End_Function
19832>>>>>>>>>
19832>>>>>>>>>    Procedure Set ComDropDownWidth Integer value
19834>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
19835>>>>>>>>>    End_Procedure
19836>>>>>>>>>
19836>>>>>>>>>    Function ComDropDownListStyle Returns Boolean
19838>>>>>>>>>        Boolean retVal
19838>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BOOL to retVal
19839>>>>>>>>>        Function_Return retVal
19840>>>>>>>>>    End_Function
19841>>>>>>>>>
19841>>>>>>>>>    Procedure Set ComDropDownListStyle Boolean value
19843>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BOOL to value
19844>>>>>>>>>    End_Procedure
19845>>>>>>>>>
19845>>>>>>>>>    Function ComListIndex Returns Integer
19847>>>>>>>>>        Integer retVal
19847>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_I4 to retVal
19848>>>>>>>>>        Function_Return retVal
19849>>>>>>>>>    End_Function
19850>>>>>>>>>
19850>>>>>>>>>    Procedure Set ComListIndex Integer value
19852>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_I4 to value
19853>>>>>>>>>    End_Procedure
19854>>>>>>>>>
19854>>>>>>>>>    Function ComText Returns String
19856>>>>>>>>>        String retVal
19856>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 59 OLE_VT_BSTR to retVal
19857>>>>>>>>>        Function_Return retVal
19858>>>>>>>>>    End_Function
19859>>>>>>>>>
19859>>>>>>>>>    Procedure Set ComText String value
19861>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 59 OLE_VT_BSTR to value
19862>>>>>>>>>    End_Procedure
19863>>>>>>>>>
19863>>>>>>>>>    Function ComEditHint Returns String
19865>>>>>>>>>        String retVal
19865>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 67 OLE_VT_BSTR to retVal
19866>>>>>>>>>        Function_Return retVal
19867>>>>>>>>>    End_Function
19868>>>>>>>>>
19868>>>>>>>>>    Procedure Set ComEditHint String value
19870>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 67 OLE_VT_BSTR to value
19871>>>>>>>>>    End_Procedure
19872>>>>>>>>>
19872>>>>>>>>>    Function ComAutoComplete Returns Boolean
19874>>>>>>>>>        Boolean retVal
19874>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 68 OLE_VT_BOOL to retVal
19875>>>>>>>>>        Function_Return retVal
19876>>>>>>>>>    End_Function
19877>>>>>>>>>
19877>>>>>>>>>    Procedure Set ComAutoComplete Boolean value
19879>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 68 OLE_VT_BOOL to value
19880>>>>>>>>>    End_Procedure
19881>>>>>>>>>
19881>>>>>>>>>    Function ComShellAutoComplete Returns XTPShellAutoCompleteFlags
19883>>>>>>>>>        XTPShellAutoCompleteFlags retVal
19883>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_I4 to retVal
19884>>>>>>>>>        Function_Return retVal
19885>>>>>>>>>    End_Function
19886>>>>>>>>>
19886>>>>>>>>>    Procedure Set ComShellAutoComplete XTPShellAutoCompleteFlags value
19888>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_I4 to value
19889>>>>>>>>>    End_Procedure
19890>>>>>>>>>
19890>>>>>>>>>    Function ComEditIconId Returns Integer
19892>>>>>>>>>        Integer retVal
19892>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_I4 to retVal
19893>>>>>>>>>        Function_Return retVal
19894>>>>>>>>>    End_Function
19895>>>>>>>>>
19895>>>>>>>>>    Procedure Set ComEditIconId Integer value
19897>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_I4 to value
19898>>>>>>>>>    End_Procedure
19899>>>>>>>>>
19899>>>>>>>>>    Function ComEditStyle Returns XTPCommandBarEditStyle
19901>>>>>>>>>        XTPCommandBarEditStyle retVal
19901>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_I4 to retVal
19902>>>>>>>>>        Function_Return retVal
19903>>>>>>>>>    End_Function
19904>>>>>>>>>
19904>>>>>>>>>    Procedure Set ComEditStyle XTPCommandBarEditStyle value
19906>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_I4 to value
19907>>>>>>>>>    End_Procedure
19908>>>>>>>>>
19908>>>>>>>>>    Function ComDropDownItemCount Returns Integer
19910>>>>>>>>>        Integer retVal
19910>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 72 OLE_VT_I4 to retVal
19911>>>>>>>>>        Function_Return retVal
19912>>>>>>>>>    End_Function
19913>>>>>>>>>
19913>>>>>>>>>    Procedure Set ComDropDownItemCount Integer value
19915>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 72 OLE_VT_I4 to value
19916>>>>>>>>>    End_Procedure
19917>>>>>>>>>
19917>>>>>>>>>    Function ComThemedItems Returns Boolean
19919>>>>>>>>>        Boolean retVal
19919>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 73 OLE_VT_BOOL to retVal
19920>>>>>>>>>        Function_Return retVal
19921>>>>>>>>>    End_Function
19922>>>>>>>>>
19922>>>>>>>>>    Procedure Set ComThemedItems Boolean value
19924>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 73 OLE_VT_BOOL to value
19925>>>>>>>>>    End_Procedure
19926>>>>>>>>>
19926>>>>>>>>>    Function ComListIconId Returns Integer
19928>>>>>>>>>        Integer retVal
19928>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 74 OLE_VT_I4 to retVal
19929>>>>>>>>>        Function_Return retVal
19930>>>>>>>>>    End_Function
19931>>>>>>>>>
19931>>>>>>>>>    Procedure Set ComListIconId Integer value
19933>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 74 OLE_VT_I4 to value
19934>>>>>>>>>    End_Procedure
19935>>>>>>>>>
19935>>>>>>>>>    Function ComTextLimit Returns Integer
19937>>>>>>>>>        Integer retVal
19937>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 80 OLE_VT_I4 to retVal
19938>>>>>>>>>        Function_Return retVal
19939>>>>>>>>>    End_Function
19940>>>>>>>>>
19940>>>>>>>>>    Procedure Set ComTextLimit Integer value
19942>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 80 OLE_VT_I4 to value
19943>>>>>>>>>    End_Procedure
19944>>>>>>>>>
19944>>>>>>>>>    Function ComControls Returns Variant
19946>>>>>>>>>        Handle hDispatchDriver
19946>>>>>>>>>        Variant retVal
19946>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19947>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
19948>>>>>>>>>        Function_Return retVal
19949>>>>>>>>>    End_Function
19950>>>>>>>>>
19950>>>>>>>>>    Function ComParent Returns Variant
19952>>>>>>>>>        Handle hDispatchDriver
19952>>>>>>>>>        Variant retVal
19952>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19953>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
19954>>>>>>>>>        Function_Return retVal
19955>>>>>>>>>    End_Function
19956>>>>>>>>>
19956>>>>>>>>>    Function ComIndex Returns Integer
19958>>>>>>>>>        Handle hDispatchDriver
19958>>>>>>>>>        Integer retVal
19958>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19959>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
19960>>>>>>>>>        Function_Return retVal
19961>>>>>>>>>    End_Function
19962>>>>>>>>>
19962>>>>>>>>>    Function ComType Returns XTPControlType
19964>>>>>>>>>        Handle hDispatchDriver
19964>>>>>>>>>        XTPControlType retVal
19964>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19965>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
19966>>>>>>>>>        Function_Return retVal
19967>>>>>>>>>    End_Function
19968>>>>>>>>>
19968>>>>>>>>>    Procedure ComDelete
19970>>>>>>>>>        Handle hDispatchDriver
19970>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19971>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
19972>>>>>>>>>    End_Procedure
19973>>>>>>>>>
19973>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
19975>>>>>>>>>        Handle hDispatchDriver
19975>>>>>>>>>        Variant retVal
19975>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19976>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
19977>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
19978>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
19979>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
19980>>>>>>>>>        Function_Return retVal
19981>>>>>>>>>    End_Function
19982>>>>>>>>>
19982>>>>>>>>>    Procedure ComSetFocus
19984>>>>>>>>>        Handle hDispatchDriver
19984>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19985>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
19986>>>>>>>>>    End_Procedure
19987>>>>>>>>>
19987>>>>>>>>>    Procedure ComExecute
19989>>>>>>>>>        Handle hDispatchDriver
19989>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19990>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
19991>>>>>>>>>    End_Procedure
19992>>>>>>>>>
19992>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
19994>>>>>>>>>        Handle hDispatchDriver
19994>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19995>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
19996>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
19997>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
19998>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
19999>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
20000>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
20001>>>>>>>>>    End_Procedure
20002>>>>>>>>>
20002>>>>>>>>>    Function ComRibbonGroup Returns Variant
20004>>>>>>>>>        Handle hDispatchDriver
20004>>>>>>>>>        Variant retVal
20004>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20005>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
20006>>>>>>>>>        Function_Return retVal
20007>>>>>>>>>    End_Function
20008>>>>>>>>>
20008>>>>>>>>>    Procedure ComReset
20010>>>>>>>>>        Handle hDispatchDriver
20010>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20011>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
20012>>>>>>>>>    End_Procedure
20013>>>>>>>>>
20013>>>>>>>>>    Function ComTop Returns Integer
20015>>>>>>>>>        Handle hDispatchDriver
20015>>>>>>>>>        Integer retVal
20015>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20016>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
20017>>>>>>>>>        Function_Return retVal
20018>>>>>>>>>    End_Function
20019>>>>>>>>>
20019>>>>>>>>>    Function ComLeft Returns Integer
20021>>>>>>>>>        Handle hDispatchDriver
20021>>>>>>>>>        Integer retVal
20021>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20022>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
20023>>>>>>>>>        Function_Return retVal
20024>>>>>>>>>    End_Function
20025>>>>>>>>>
20025>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
20027>>>>>>>>>        Handle hDispatchDriver
20027>>>>>>>>>        Variant retVal
20027>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20028>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20029>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
20030>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
20031>>>>>>>>>        Function_Return retVal
20032>>>>>>>>>    End_Function
20033>>>>>>>>>
20033>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
20035>>>>>>>>>        Handle hDispatchDriver
20035>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20036>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20037>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
20038>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
20039>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
20040>>>>>>>>>    End_Procedure
20041>>>>>>>>>
20041>>>>>>>>>    Procedure ComAddItem String llText Variant llIndex
20043>>>>>>>>>        Handle hDispatchDriver
20043>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20044>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20045>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
20046>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llIndex
20047>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 51 OLE_VT_VOID
20048>>>>>>>>>    End_Procedure
20049>>>>>>>>>
20049>>>>>>>>>    Function ComList Integer llIndex Returns String
20051>>>>>>>>>        Handle hDispatchDriver
20051>>>>>>>>>        String retVal
20051>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20052>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20053>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
20054>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 55 OLE_VT_BSTR to retVal
20055>>>>>>>>>        Function_Return retVal
20056>>>>>>>>>    End_Function
20057>>>>>>>>>
20057>>>>>>>>>    Procedure ComClear
20059>>>>>>>>>        Handle hDispatchDriver
20059>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20060>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 56 OLE_VT_VOID
20061>>>>>>>>>    End_Procedure
20062>>>>>>>>>
20062>>>>>>>>>    Function ComListCount Returns Integer
20064>>>>>>>>>        Handle hDispatchDriver
20064>>>>>>>>>        Integer retVal
20064>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20065>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 57 OLE_VT_I4 to retVal
20066>>>>>>>>>        Function_Return retVal
20067>>>>>>>>>    End_Function
20068>>>>>>>>>
20068>>>>>>>>>    Procedure ComRemoveItem Integer llnIndex
20070>>>>>>>>>        Handle hDispatchDriver
20070>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20071>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20072>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIndex
20073>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 58 OLE_VT_VOID
20074>>>>>>>>>    End_Procedure
20075>>>>>>>>>
20075>>>>>>>>>    Function ComFindItem String llText Returns Integer
20077>>>>>>>>>        Handle hDispatchDriver
20077>>>>>>>>>        Integer retVal
20077>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20078>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20079>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
20080>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 61 OLE_VT_I4 to retVal
20081>>>>>>>>>        Function_Return retVal
20082>>>>>>>>>    End_Function
20083>>>>>>>>>
20083>>>>>>>>>    Function ComItemData Integer llIndex Returns Integer
20085>>>>>>>>>        Handle hDispatchDriver
20085>>>>>>>>>        Integer retVal
20085>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20086>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20087>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
20088>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 62 OLE_VT_I4 to retVal
20089>>>>>>>>>        Function_Return retVal
20090>>>>>>>>>    End_Function
20091>>>>>>>>>
20091>>>>>>>>>    Procedure Set ComItemData Integer llIndex Integer value
20093>>>>>>>>>        Handle hDispatchDriver
20093>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20094>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20095>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
20096>>>>>>>>>        Set ComProperty of hDispatchDriver 62 OLE_VT_I4 to value
20097>>>>>>>>>    End_Procedure
20098>>>>>>>>>
20098>>>>>>>>>    Function ComEditHandle Returns OLE_HANDLE
20100>>>>>>>>>        Handle hDispatchDriver
20100>>>>>>>>>        OLE_HANDLE retVal
20100>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20101>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 63 OLE_VT_I4 to retVal
20102>>>>>>>>>        Function_Return retVal
20103>>>>>>>>>    End_Function
20104>>>>>>>>>
20104>>>>>>>>>    Function ComHasFocus Returns Boolean
20106>>>>>>>>>        Handle hDispatchDriver
20106>>>>>>>>>        Boolean retVal
20106>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20107>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 66 OLE_VT_BOOL to retVal
20108>>>>>>>>>        Function_Return retVal
20109>>>>>>>>>    End_Function
20110>>>>>>>>>End_Class
20111>>>>>>>>>
20111>>>>>>>>>// CoClass
20111>>>>>>>>>// CLSID: {C0DE2200-B90A-44F8-86C2-B28D4540ABFA}
20111>>>>>>>>>Class cCJCommandBarComboBox is a cComAutomationObject
20112>>>>>>>>>    Import_Class_Protocol cCJICommandBarComboBox
20113>>>>>>>>>
20113>>>>>>>>>    Procedure Construct_Object
20115>>>>>>>>>        Forward Send Construct_Object
20117>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
20118>>>>>>>>>    End_Procedure
20119>>>>>>>>>End_Class
20120>>>>>>>>>
20120>>>>>>>>>// CLSID: {C0DE2200-5C60-475B-A774-4B22FAC0B9EC}
20120>>>>>>>>>Class cCJICommandBarCheckBox is a Mixin
20121>>>>>>>>>
20121>>>>>>>>>    Function ComChecked Returns Integer
20123>>>>>>>>>        Integer retVal
20123>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_I4 to retVal
20124>>>>>>>>>        Function_Return retVal
20125>>>>>>>>>    End_Function
20126>>>>>>>>>
20126>>>>>>>>>    Procedure Set ComChecked Integer value
20128>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_I4 to value
20129>>>>>>>>>    End_Procedure
20130>>>>>>>>>
20130>>>>>>>>>    Function ComBeginGroup Returns Boolean
20132>>>>>>>>>        Boolean retVal
20132>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
20133>>>>>>>>>        Function_Return retVal
20134>>>>>>>>>    End_Function
20135>>>>>>>>>
20135>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
20137>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
20138>>>>>>>>>    End_Procedure
20139>>>>>>>>>
20139>>>>>>>>>    Function ComCaption Returns String
20141>>>>>>>>>        String retVal
20141>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
20142>>>>>>>>>        Function_Return retVal
20143>>>>>>>>>    End_Function
20144>>>>>>>>>
20144>>>>>>>>>    Procedure Set ComCaption String value
20146>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
20147>>>>>>>>>    End_Procedure
20148>>>>>>>>>
20148>>>>>>>>>    Function ComDescriptionText Returns String
20150>>>>>>>>>        String retVal
20150>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
20151>>>>>>>>>        Function_Return retVal
20152>>>>>>>>>    End_Function
20153>>>>>>>>>
20153>>>>>>>>>    Procedure Set ComDescriptionText String value
20155>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
20156>>>>>>>>>    End_Procedure
20157>>>>>>>>>
20157>>>>>>>>>    Function ComId Returns Integer
20159>>>>>>>>>        Integer retVal
20159>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
20160>>>>>>>>>        Function_Return retVal
20161>>>>>>>>>    End_Function
20162>>>>>>>>>
20162>>>>>>>>>    Procedure Set ComId Integer value
20164>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
20165>>>>>>>>>    End_Procedure
20166>>>>>>>>>
20166>>>>>>>>>    Function ComParameter Returns String
20168>>>>>>>>>        String retVal
20168>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
20169>>>>>>>>>        Function_Return retVal
20170>>>>>>>>>    End_Function
20171>>>>>>>>>
20171>>>>>>>>>    Procedure Set ComParameter String value
20173>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
20174>>>>>>>>>    End_Procedure
20175>>>>>>>>>
20175>>>>>>>>>    Function ComShortcutText Returns String
20177>>>>>>>>>        String retVal
20177>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
20178>>>>>>>>>        Function_Return retVal
20179>>>>>>>>>    End_Function
20180>>>>>>>>>
20180>>>>>>>>>    Procedure Set ComShortcutText String value
20182>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
20183>>>>>>>>>    End_Procedure
20184>>>>>>>>>
20184>>>>>>>>>    Function ComCustomShortcutText Returns String
20186>>>>>>>>>        String retVal
20186>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
20187>>>>>>>>>        Function_Return retVal
20188>>>>>>>>>    End_Function
20189>>>>>>>>>
20189>>>>>>>>>    Procedure Set ComCustomShortcutText String value
20191>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
20192>>>>>>>>>    End_Procedure
20193>>>>>>>>>
20193>>>>>>>>>    Function ComTooltipText Returns String
20195>>>>>>>>>        String retVal
20195>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
20196>>>>>>>>>        Function_Return retVal
20197>>>>>>>>>    End_Function
20198>>>>>>>>>
20198>>>>>>>>>    Procedure Set ComTooltipText String value
20200>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
20201>>>>>>>>>    End_Procedure
20202>>>>>>>>>
20202>>>>>>>>>    Function ComVisible Returns Boolean
20204>>>>>>>>>        Boolean retVal
20204>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
20205>>>>>>>>>        Function_Return retVal
20206>>>>>>>>>    End_Function
20207>>>>>>>>>
20207>>>>>>>>>    Procedure Set ComVisible Boolean value
20209>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
20210>>>>>>>>>    End_Procedure
20211>>>>>>>>>
20211>>>>>>>>>    Function ComEnabled Returns Boolean
20213>>>>>>>>>        Boolean retVal
20213>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
20214>>>>>>>>>        Function_Return retVal
20215>>>>>>>>>    End_Function
20216>>>>>>>>>
20216>>>>>>>>>    Procedure Set ComEnabled Boolean value
20218>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
20219>>>>>>>>>    End_Procedure
20220>>>>>>>>>
20220>>>>>>>>>    Function ComIconId Returns Integer
20222>>>>>>>>>        Integer retVal
20222>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
20223>>>>>>>>>        Function_Return retVal
20224>>>>>>>>>    End_Function
20225>>>>>>>>>
20225>>>>>>>>>    Procedure Set ComIconId Integer value
20227>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
20228>>>>>>>>>    End_Procedure
20229>>>>>>>>>
20229>>>>>>>>>    Function ComDefaultItem Returns Boolean
20231>>>>>>>>>        Boolean retVal
20231>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
20232>>>>>>>>>        Function_Return retVal
20233>>>>>>>>>    End_Function
20234>>>>>>>>>
20234>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
20236>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
20237>>>>>>>>>    End_Procedure
20238>>>>>>>>>
20238>>>>>>>>>    Function ComFlags Returns XTPControlFlags
20240>>>>>>>>>        XTPControlFlags retVal
20240>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
20241>>>>>>>>>        Function_Return retVal
20242>>>>>>>>>    End_Function
20243>>>>>>>>>
20243>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
20245>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
20246>>>>>>>>>    End_Procedure
20247>>>>>>>>>
20247>>>>>>>>>    Function ComCategory Returns String
20249>>>>>>>>>        String retVal
20249>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
20250>>>>>>>>>        Function_Return retVal
20251>>>>>>>>>    End_Function
20252>>>>>>>>>
20252>>>>>>>>>    Procedure Set ComCategory String value
20254>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
20255>>>>>>>>>    End_Procedure
20256>>>>>>>>>
20256>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
20258>>>>>>>>>        XTPControlHideFlags retVal
20258>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
20259>>>>>>>>>        Function_Return retVal
20260>>>>>>>>>    End_Function
20261>>>>>>>>>
20261>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
20263>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
20264>>>>>>>>>    End_Procedure
20265>>>>>>>>>
20265>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
20267>>>>>>>>>        Boolean retVal
20267>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
20268>>>>>>>>>        Function_Return retVal
20269>>>>>>>>>    End_Function
20270>>>>>>>>>
20270>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
20272>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
20273>>>>>>>>>    End_Procedure
20274>>>>>>>>>
20274>>>>>>>>>    Function ComAction Returns Variant
20276>>>>>>>>>        Variant retVal
20276>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
20277>>>>>>>>>        Function_Return retVal
20278>>>>>>>>>    End_Function
20279>>>>>>>>>
20279>>>>>>>>>    Procedure Set ComAction Variant value
20281>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
20282>>>>>>>>>    End_Procedure
20283>>>>>>>>>
20283>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
20285>>>>>>>>>        Integer retVal
20285>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
20286>>>>>>>>>        Function_Return retVal
20287>>>>>>>>>    End_Function
20288>>>>>>>>>
20288>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
20290>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
20291>>>>>>>>>    End_Procedure
20292>>>>>>>>>
20292>>>>>>>>>    Function ComWidth Returns Integer
20294>>>>>>>>>        Integer retVal
20294>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
20295>>>>>>>>>        Function_Return retVal
20296>>>>>>>>>    End_Function
20297>>>>>>>>>
20297>>>>>>>>>    Procedure Set ComWidth Integer value
20299>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
20300>>>>>>>>>    End_Procedure
20301>>>>>>>>>
20301>>>>>>>>>    Function ComHeight Returns Integer
20303>>>>>>>>>        Integer retVal
20303>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
20304>>>>>>>>>        Function_Return retVal
20305>>>>>>>>>    End_Function
20306>>>>>>>>>
20306>>>>>>>>>    Procedure Set ComHeight Integer value
20308>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
20309>>>>>>>>>    End_Procedure
20310>>>>>>>>>
20310>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
20312>>>>>>>>>        XTPButtonStyle retVal
20312>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
20313>>>>>>>>>        Function_Return retVal
20314>>>>>>>>>    End_Function
20315>>>>>>>>>
20315>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
20317>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
20318>>>>>>>>>    End_Procedure
20319>>>>>>>>>
20319>>>>>>>>>    Function ComKeyboardTip Returns String
20321>>>>>>>>>        String retVal
20321>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
20322>>>>>>>>>        Function_Return retVal
20323>>>>>>>>>    End_Function
20324>>>>>>>>>
20324>>>>>>>>>    Procedure Set ComKeyboardTip String value
20326>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
20327>>>>>>>>>    End_Procedure
20328>>>>>>>>>
20328>>>>>>>>>    Function ComControls Returns Variant
20330>>>>>>>>>        Handle hDispatchDriver
20330>>>>>>>>>        Variant retVal
20330>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20331>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
20332>>>>>>>>>        Function_Return retVal
20333>>>>>>>>>    End_Function
20334>>>>>>>>>
20334>>>>>>>>>    Function ComParent Returns Variant
20336>>>>>>>>>        Handle hDispatchDriver
20336>>>>>>>>>        Variant retVal
20336>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20337>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
20338>>>>>>>>>        Function_Return retVal
20339>>>>>>>>>    End_Function
20340>>>>>>>>>
20340>>>>>>>>>    Function ComIndex Returns Integer
20342>>>>>>>>>        Handle hDispatchDriver
20342>>>>>>>>>        Integer retVal
20342>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20343>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
20344>>>>>>>>>        Function_Return retVal
20345>>>>>>>>>    End_Function
20346>>>>>>>>>
20346>>>>>>>>>    Function ComType Returns XTPControlType
20348>>>>>>>>>        Handle hDispatchDriver
20348>>>>>>>>>        XTPControlType retVal
20348>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20349>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
20350>>>>>>>>>        Function_Return retVal
20351>>>>>>>>>    End_Function
20352>>>>>>>>>
20352>>>>>>>>>    Procedure ComDelete
20354>>>>>>>>>        Handle hDispatchDriver
20354>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20355>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
20356>>>>>>>>>    End_Procedure
20357>>>>>>>>>
20357>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
20359>>>>>>>>>        Handle hDispatchDriver
20359>>>>>>>>>        Variant retVal
20359>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20360>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20361>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
20362>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
20363>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
20364>>>>>>>>>        Function_Return retVal
20365>>>>>>>>>    End_Function
20366>>>>>>>>>
20366>>>>>>>>>    Procedure ComSetFocus
20368>>>>>>>>>        Handle hDispatchDriver
20368>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20369>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
20370>>>>>>>>>    End_Procedure
20371>>>>>>>>>
20371>>>>>>>>>    Procedure ComExecute
20373>>>>>>>>>        Handle hDispatchDriver
20373>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20374>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
20375>>>>>>>>>    End_Procedure
20376>>>>>>>>>
20376>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
20378>>>>>>>>>        Handle hDispatchDriver
20378>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20379>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
20380>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
20381>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
20382>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
20383>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
20384>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
20385>>>>>>>>>    End_Procedure
20386>>>>>>>>>
20386>>>>>>>>>    Function ComRibbonGroup Returns Variant
20388>>>>>>>>>        Handle hDispatchDriver
20388>>>>>>>>>        Variant retVal
20388>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20389>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
20390>>>>>>>>>        Function_Return retVal
20391>>>>>>>>>    End_Function
20392>>>>>>>>>
20392>>>>>>>>>    Procedure ComReset
20394>>>>>>>>>        Handle hDispatchDriver
20394>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20395>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
20396>>>>>>>>>    End_Procedure
20397>>>>>>>>>
20397>>>>>>>>>    Function ComTop Returns Integer
20399>>>>>>>>>        Handle hDispatchDriver
20399>>>>>>>>>        Integer retVal
20399>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20400>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
20401>>>>>>>>>        Function_Return retVal
20402>>>>>>>>>    End_Function
20403>>>>>>>>>
20403>>>>>>>>>    Function ComLeft Returns Integer
20405>>>>>>>>>        Handle hDispatchDriver
20405>>>>>>>>>        Integer retVal
20405>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20406>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
20407>>>>>>>>>        Function_Return retVal
20408>>>>>>>>>    End_Function
20409>>>>>>>>>
20409>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
20411>>>>>>>>>        Handle hDispatchDriver
20411>>>>>>>>>        Variant retVal
20411>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20412>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20413>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
20414>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
20415>>>>>>>>>        Function_Return retVal
20416>>>>>>>>>    End_Function
20417>>>>>>>>>
20417>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
20419>>>>>>>>>        Handle hDispatchDriver
20419>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20420>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20421>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
20422>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
20423>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
20424>>>>>>>>>    End_Procedure
20425>>>>>>>>>End_Class
20426>>>>>>>>>
20426>>>>>>>>>// CoClass
20426>>>>>>>>>// CLSID: {C0DE2200-6975-465C-B19C-FFA0021AAA05}
20426>>>>>>>>>Class cCJCommandBarCheckBox is a cComAutomationObject
20427>>>>>>>>>    Import_Class_Protocol cCJICommandBarCheckBox
20428>>>>>>>>>
20428>>>>>>>>>    Procedure Construct_Object
20430>>>>>>>>>        Forward Send Construct_Object
20432>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
20433>>>>>>>>>    End_Procedure
20434>>>>>>>>>End_Class
20435>>>>>>>>>
20435>>>>>>>>>// CLSID: {C0DE2200-7A03-46D9-B095-9FB1F825530D}
20435>>>>>>>>>Class cCJICommandBarEdit is a Mixin
20436>>>>>>>>>
20436>>>>>>>>>    Function ComChecked Returns Boolean
20438>>>>>>>>>        Boolean retVal
20438>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
20439>>>>>>>>>        Function_Return retVal
20440>>>>>>>>>    End_Function
20441>>>>>>>>>
20441>>>>>>>>>    Procedure Set ComChecked Boolean value
20443>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
20444>>>>>>>>>    End_Procedure
20445>>>>>>>>>
20445>>>>>>>>>    Function ComBeginGroup Returns Boolean
20447>>>>>>>>>        Boolean retVal
20447>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
20448>>>>>>>>>        Function_Return retVal
20449>>>>>>>>>    End_Function
20450>>>>>>>>>
20450>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
20452>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
20453>>>>>>>>>    End_Procedure
20454>>>>>>>>>
20454>>>>>>>>>    Function ComCaption Returns String
20456>>>>>>>>>        String retVal
20456>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
20457>>>>>>>>>        Function_Return retVal
20458>>>>>>>>>    End_Function
20459>>>>>>>>>
20459>>>>>>>>>    Procedure Set ComCaption String value
20461>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
20462>>>>>>>>>    End_Procedure
20463>>>>>>>>>
20463>>>>>>>>>    Function ComDescriptionText Returns String
20465>>>>>>>>>        String retVal
20465>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
20466>>>>>>>>>        Function_Return retVal
20467>>>>>>>>>    End_Function
20468>>>>>>>>>
20468>>>>>>>>>    Procedure Set ComDescriptionText String value
20470>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
20471>>>>>>>>>    End_Procedure
20472>>>>>>>>>
20472>>>>>>>>>    Function ComId Returns Integer
20474>>>>>>>>>        Integer retVal
20474>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
20475>>>>>>>>>        Function_Return retVal
20476>>>>>>>>>    End_Function
20477>>>>>>>>>
20477>>>>>>>>>    Procedure Set ComId Integer value
20479>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
20480>>>>>>>>>    End_Procedure
20481>>>>>>>>>
20481>>>>>>>>>    Function ComParameter Returns String
20483>>>>>>>>>        String retVal
20483>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
20484>>>>>>>>>        Function_Return retVal
20485>>>>>>>>>    End_Function
20486>>>>>>>>>
20486>>>>>>>>>    Procedure Set ComParameter String value
20488>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
20489>>>>>>>>>    End_Procedure
20490>>>>>>>>>
20490>>>>>>>>>    Function ComShortcutText Returns String
20492>>>>>>>>>        String retVal
20492>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
20493>>>>>>>>>        Function_Return retVal
20494>>>>>>>>>    End_Function
20495>>>>>>>>>
20495>>>>>>>>>    Procedure Set ComShortcutText String value
20497>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
20498>>>>>>>>>    End_Procedure
20499>>>>>>>>>
20499>>>>>>>>>    Function ComCustomShortcutText Returns String
20501>>>>>>>>>        String retVal
20501>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
20502>>>>>>>>>        Function_Return retVal
20503>>>>>>>>>    End_Function
20504>>>>>>>>>
20504>>>>>>>>>    Procedure Set ComCustomShortcutText String value
20506>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
20507>>>>>>>>>    End_Procedure
20508>>>>>>>>>
20508>>>>>>>>>    Function ComTooltipText Returns String
20510>>>>>>>>>        String retVal
20510>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
20511>>>>>>>>>        Function_Return retVal
20512>>>>>>>>>    End_Function
20513>>>>>>>>>
20513>>>>>>>>>    Procedure Set ComTooltipText String value
20515>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
20516>>>>>>>>>    End_Procedure
20517>>>>>>>>>
20517>>>>>>>>>    Function ComVisible Returns Boolean
20519>>>>>>>>>        Boolean retVal
20519>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
20520>>>>>>>>>        Function_Return retVal
20521>>>>>>>>>    End_Function
20522>>>>>>>>>
20522>>>>>>>>>    Procedure Set ComVisible Boolean value
20524>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
20525>>>>>>>>>    End_Procedure
20526>>>>>>>>>
20526>>>>>>>>>    Function ComEnabled Returns Boolean
20528>>>>>>>>>        Boolean retVal
20528>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
20529>>>>>>>>>        Function_Return retVal
20530>>>>>>>>>    End_Function
20531>>>>>>>>>
20531>>>>>>>>>    Procedure Set ComEnabled Boolean value
20533>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
20534>>>>>>>>>    End_Procedure
20535>>>>>>>>>
20535>>>>>>>>>    Function ComIconId Returns Integer
20537>>>>>>>>>        Integer retVal
20537>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
20538>>>>>>>>>        Function_Return retVal
20539>>>>>>>>>    End_Function
20540>>>>>>>>>
20540>>>>>>>>>    Procedure Set ComIconId Integer value
20542>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
20543>>>>>>>>>    End_Procedure
20544>>>>>>>>>
20544>>>>>>>>>    Function ComDefaultItem Returns Boolean
20546>>>>>>>>>        Boolean retVal
20546>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
20547>>>>>>>>>        Function_Return retVal
20548>>>>>>>>>    End_Function
20549>>>>>>>>>
20549>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
20551>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
20552>>>>>>>>>    End_Procedure
20553>>>>>>>>>
20553>>>>>>>>>    Function ComFlags Returns XTPControlFlags
20555>>>>>>>>>        XTPControlFlags retVal
20555>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
20556>>>>>>>>>        Function_Return retVal
20557>>>>>>>>>    End_Function
20558>>>>>>>>>
20558>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
20560>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
20561>>>>>>>>>    End_Procedure
20562>>>>>>>>>
20562>>>>>>>>>    Function ComCategory Returns String
20564>>>>>>>>>        String retVal
20564>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
20565>>>>>>>>>        Function_Return retVal
20566>>>>>>>>>    End_Function
20567>>>>>>>>>
20567>>>>>>>>>    Procedure Set ComCategory String value
20569>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
20570>>>>>>>>>    End_Procedure
20571>>>>>>>>>
20571>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
20573>>>>>>>>>        XTPControlHideFlags retVal
20573>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
20574>>>>>>>>>        Function_Return retVal
20575>>>>>>>>>    End_Function
20576>>>>>>>>>
20576>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
20578>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
20579>>>>>>>>>    End_Procedure
20580>>>>>>>>>
20580>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
20582>>>>>>>>>        Boolean retVal
20582>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
20583>>>>>>>>>        Function_Return retVal
20584>>>>>>>>>    End_Function
20585>>>>>>>>>
20585>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
20587>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
20588>>>>>>>>>    End_Procedure
20589>>>>>>>>>
20589>>>>>>>>>    Function ComAction Returns Variant
20591>>>>>>>>>        Variant retVal
20591>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
20592>>>>>>>>>        Function_Return retVal
20593>>>>>>>>>    End_Function
20594>>>>>>>>>
20594>>>>>>>>>    Procedure Set ComAction Variant value
20596>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
20597>>>>>>>>>    End_Procedure
20598>>>>>>>>>
20598>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
20600>>>>>>>>>        Integer retVal
20600>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
20601>>>>>>>>>        Function_Return retVal
20602>>>>>>>>>    End_Function
20603>>>>>>>>>
20603>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
20605>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
20606>>>>>>>>>    End_Procedure
20607>>>>>>>>>
20607>>>>>>>>>    Function ComWidth Returns Integer
20609>>>>>>>>>        Integer retVal
20609>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
20610>>>>>>>>>        Function_Return retVal
20611>>>>>>>>>    End_Function
20612>>>>>>>>>
20612>>>>>>>>>    Procedure Set ComWidth Integer value
20614>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
20615>>>>>>>>>    End_Procedure
20616>>>>>>>>>
20616>>>>>>>>>    Function ComHeight Returns Integer
20618>>>>>>>>>        Integer retVal
20618>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
20619>>>>>>>>>        Function_Return retVal
20620>>>>>>>>>    End_Function
20621>>>>>>>>>
20621>>>>>>>>>    Procedure Set ComHeight Integer value
20623>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
20624>>>>>>>>>    End_Procedure
20625>>>>>>>>>
20625>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
20627>>>>>>>>>        XTPButtonStyle retVal
20627>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
20628>>>>>>>>>        Function_Return retVal
20629>>>>>>>>>    End_Function
20630>>>>>>>>>
20630>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
20632>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
20633>>>>>>>>>    End_Procedure
20634>>>>>>>>>
20634>>>>>>>>>    Function ComKeyboardTip Returns String
20636>>>>>>>>>        String retVal
20636>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
20637>>>>>>>>>        Function_Return retVal
20638>>>>>>>>>    End_Function
20639>>>>>>>>>
20639>>>>>>>>>    Procedure Set ComKeyboardTip String value
20641>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
20642>>>>>>>>>    End_Procedure
20643>>>>>>>>>
20643>>>>>>>>>    Function ComShowLabel Returns Boolean
20645>>>>>>>>>        Boolean retVal
20645>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_BOOL to retVal
20646>>>>>>>>>        Function_Return retVal
20647>>>>>>>>>    End_Function
20648>>>>>>>>>
20648>>>>>>>>>    Procedure Set ComShowLabel Boolean value
20650>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_BOOL to value
20651>>>>>>>>>    End_Procedure
20652>>>>>>>>>
20652>>>>>>>>>    Function ComText Returns String
20654>>>>>>>>>        String retVal
20654>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 59 OLE_VT_BSTR to retVal
20655>>>>>>>>>        Function_Return retVal
20656>>>>>>>>>    End_Function
20657>>>>>>>>>
20657>>>>>>>>>    Procedure Set ComText String value
20659>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 59 OLE_VT_BSTR to value
20660>>>>>>>>>    End_Procedure
20661>>>>>>>>>
20661>>>>>>>>>    Function ComReadOnly Returns Boolean
20663>>>>>>>>>        Boolean retVal
20663>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_BOOL to retVal
20664>>>>>>>>>        Function_Return retVal
20665>>>>>>>>>    End_Function
20666>>>>>>>>>
20666>>>>>>>>>    Procedure Set ComReadOnly Boolean value
20668>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_BOOL to value
20669>>>>>>>>>    End_Procedure
20670>>>>>>>>>
20670>>>>>>>>>    Function ComEditHint Returns String
20672>>>>>>>>>        String retVal
20672>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 67 OLE_VT_BSTR to retVal
20673>>>>>>>>>        Function_Return retVal
20674>>>>>>>>>    End_Function
20675>>>>>>>>>
20675>>>>>>>>>    Procedure Set ComEditHint String value
20677>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 67 OLE_VT_BSTR to value
20678>>>>>>>>>    End_Procedure
20679>>>>>>>>>
20679>>>>>>>>>    Function ComShellAutoComplete Returns XTPShellAutoCompleteFlags
20681>>>>>>>>>        XTPShellAutoCompleteFlags retVal
20681>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_I4 to retVal
20682>>>>>>>>>        Function_Return retVal
20683>>>>>>>>>    End_Function
20684>>>>>>>>>
20684>>>>>>>>>    Procedure Set ComShellAutoComplete XTPShellAutoCompleteFlags value
20686>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_I4 to value
20687>>>>>>>>>    End_Procedure
20688>>>>>>>>>
20688>>>>>>>>>    Function ComEditIconId Returns Integer
20690>>>>>>>>>        Integer retVal
20690>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_I4 to retVal
20691>>>>>>>>>        Function_Return retVal
20692>>>>>>>>>    End_Function
20693>>>>>>>>>
20693>>>>>>>>>    Procedure Set ComEditIconId Integer value
20695>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_I4 to value
20696>>>>>>>>>    End_Procedure
20697>>>>>>>>>
20697>>>>>>>>>    Function ComEditStyle Returns XTPCommandBarEditStyle
20699>>>>>>>>>        XTPCommandBarEditStyle retVal
20699>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_I4 to retVal
20700>>>>>>>>>        Function_Return retVal
20701>>>>>>>>>    End_Function
20702>>>>>>>>>
20702>>>>>>>>>    Procedure Set ComEditStyle XTPCommandBarEditStyle value
20704>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_I4 to value
20705>>>>>>>>>    End_Procedure
20706>>>>>>>>>
20706>>>>>>>>>    Function ComShowSpinButtons Returns Boolean
20708>>>>>>>>>        Boolean retVal
20708>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 72 OLE_VT_BOOL to retVal
20709>>>>>>>>>        Function_Return retVal
20710>>>>>>>>>    End_Function
20711>>>>>>>>>
20711>>>>>>>>>    Procedure Set ComShowSpinButtons Boolean value
20713>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 72 OLE_VT_BOOL to value
20714>>>>>>>>>    End_Procedure
20715>>>>>>>>>
20715>>>>>>>>>    Function ComBuddyButtonId Returns Integer
20717>>>>>>>>>        Integer retVal
20717>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 81 OLE_VT_I4 to retVal
20718>>>>>>>>>        Function_Return retVal
20719>>>>>>>>>    End_Function
20720>>>>>>>>>
20720>>>>>>>>>    Procedure Set ComBuddyButtonId Integer value
20722>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 81 OLE_VT_I4 to value
20723>>>>>>>>>    End_Procedure
20724>>>>>>>>>
20724>>>>>>>>>    Function ComTextLimit Returns Integer
20726>>>>>>>>>        Integer retVal
20726>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 80 OLE_VT_I4 to retVal
20727>>>>>>>>>        Function_Return retVal
20728>>>>>>>>>    End_Function
20729>>>>>>>>>
20729>>>>>>>>>    Procedure Set ComTextLimit Integer value
20731>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 80 OLE_VT_I4 to value
20732>>>>>>>>>    End_Procedure
20733>>>>>>>>>
20733>>>>>>>>>    Function ComNumericOnly Returns Boolean
20735>>>>>>>>>        Boolean retVal
20735>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 82 OLE_VT_BOOL to retVal
20736>>>>>>>>>        Function_Return retVal
20737>>>>>>>>>    End_Function
20738>>>>>>>>>
20738>>>>>>>>>    Procedure Set ComNumericOnly Boolean value
20740>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 82 OLE_VT_BOOL to value
20741>>>>>>>>>    End_Procedure
20742>>>>>>>>>
20742>>>>>>>>>    Function ComControls Returns Variant
20744>>>>>>>>>        Handle hDispatchDriver
20744>>>>>>>>>        Variant retVal
20744>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20745>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
20746>>>>>>>>>        Function_Return retVal
20747>>>>>>>>>    End_Function
20748>>>>>>>>>
20748>>>>>>>>>    Function ComParent Returns Variant
20750>>>>>>>>>        Handle hDispatchDriver
20750>>>>>>>>>        Variant retVal
20750>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20751>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
20752>>>>>>>>>        Function_Return retVal
20753>>>>>>>>>    End_Function
20754>>>>>>>>>
20754>>>>>>>>>    Function ComIndex Returns Integer
20756>>>>>>>>>        Handle hDispatchDriver
20756>>>>>>>>>        Integer retVal
20756>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20757>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
20758>>>>>>>>>        Function_Return retVal
20759>>>>>>>>>    End_Function
20760>>>>>>>>>
20760>>>>>>>>>    Function ComType Returns XTPControlType
20762>>>>>>>>>        Handle hDispatchDriver
20762>>>>>>>>>        XTPControlType retVal
20762>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20763>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
20764>>>>>>>>>        Function_Return retVal
20765>>>>>>>>>    End_Function
20766>>>>>>>>>
20766>>>>>>>>>    Procedure ComDelete
20768>>>>>>>>>        Handle hDispatchDriver
20768>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20769>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
20770>>>>>>>>>    End_Procedure
20771>>>>>>>>>
20771>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
20773>>>>>>>>>        Handle hDispatchDriver
20773>>>>>>>>>        Variant retVal
20773>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20774>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20775>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
20776>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
20777>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
20778>>>>>>>>>        Function_Return retVal
20779>>>>>>>>>    End_Function
20780>>>>>>>>>
20780>>>>>>>>>    Procedure ComSetFocus
20782>>>>>>>>>        Handle hDispatchDriver
20782>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20783>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
20784>>>>>>>>>    End_Procedure
20785>>>>>>>>>
20785>>>>>>>>>    Procedure ComExecute
20787>>>>>>>>>        Handle hDispatchDriver
20787>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20788>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
20789>>>>>>>>>    End_Procedure
20790>>>>>>>>>
20790>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
20792>>>>>>>>>        Handle hDispatchDriver
20792>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20793>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
20794>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
20795>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
20796>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
20797>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
20798>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
20799>>>>>>>>>    End_Procedure
20800>>>>>>>>>
20800>>>>>>>>>    Function ComRibbonGroup Returns Variant
20802>>>>>>>>>        Handle hDispatchDriver
20802>>>>>>>>>        Variant retVal
20802>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20803>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
20804>>>>>>>>>        Function_Return retVal
20805>>>>>>>>>    End_Function
20806>>>>>>>>>
20806>>>>>>>>>    Procedure ComReset
20808>>>>>>>>>        Handle hDispatchDriver
20808>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20809>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
20810>>>>>>>>>    End_Procedure
20811>>>>>>>>>
20811>>>>>>>>>    Function ComTop Returns Integer
20813>>>>>>>>>        Handle hDispatchDriver
20813>>>>>>>>>        Integer retVal
20813>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20814>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
20815>>>>>>>>>        Function_Return retVal
20816>>>>>>>>>    End_Function
20817>>>>>>>>>
20817>>>>>>>>>    Function ComLeft Returns Integer
20819>>>>>>>>>        Handle hDispatchDriver
20819>>>>>>>>>        Integer retVal
20819>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20820>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
20821>>>>>>>>>        Function_Return retVal
20822>>>>>>>>>    End_Function
20823>>>>>>>>>
20823>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
20825>>>>>>>>>        Handle hDispatchDriver
20825>>>>>>>>>        Variant retVal
20825>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20826>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20827>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
20828>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
20829>>>>>>>>>        Function_Return retVal
20830>>>>>>>>>    End_Function
20831>>>>>>>>>
20831>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
20833>>>>>>>>>        Handle hDispatchDriver
20833>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20834>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20835>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
20836>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
20837>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
20838>>>>>>>>>    End_Procedure
20839>>>>>>>>>
20839>>>>>>>>>    Function ComEditHandle Returns OLE_HANDLE
20841>>>>>>>>>        Handle hDispatchDriver
20841>>>>>>>>>        OLE_HANDLE retVal
20841>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20842>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 63 OLE_VT_I4 to retVal
20843>>>>>>>>>        Function_Return retVal
20844>>>>>>>>>    End_Function
20845>>>>>>>>>
20845>>>>>>>>>    Function ComHasFocus Returns Boolean
20847>>>>>>>>>        Handle hDispatchDriver
20847>>>>>>>>>        Boolean retVal
20847>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20848>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 66 OLE_VT_BOOL to retVal
20849>>>>>>>>>        Function_Return retVal
20850>>>>>>>>>    End_Function
20851>>>>>>>>>End_Class
20852>>>>>>>>>
20852>>>>>>>>>// CoClass
20852>>>>>>>>>// CLSID: {C0DE2200-45B6-4F4B-A120-6D59A69B2F1D}
20852>>>>>>>>>Class cCJCommandBarEdit is a cComAutomationObject
20853>>>>>>>>>    Import_Class_Protocol cCJICommandBarEdit
20854>>>>>>>>>
20854>>>>>>>>>    Procedure Construct_Object
20856>>>>>>>>>        Forward Send Construct_Object
20858>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
20859>>>>>>>>>    End_Procedure
20860>>>>>>>>>End_Class
20861>>>>>>>>>
20861>>>>>>>>>// CLSID: {C0DE2200-CB1F-40FD-B073-4BC151A5205F}
20861>>>>>>>>>Class cCJICommandBarControlCustom is a Mixin
20862>>>>>>>>>
20862>>>>>>>>>    Function ComChecked Returns Boolean
20864>>>>>>>>>        Boolean retVal
20864>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
20865>>>>>>>>>        Function_Return retVal
20866>>>>>>>>>    End_Function
20867>>>>>>>>>
20867>>>>>>>>>    Procedure Set ComChecked Boolean value
20869>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
20870>>>>>>>>>    End_Procedure
20871>>>>>>>>>
20871>>>>>>>>>    Function ComBeginGroup Returns Boolean
20873>>>>>>>>>        Boolean retVal
20873>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
20874>>>>>>>>>        Function_Return retVal
20875>>>>>>>>>    End_Function
20876>>>>>>>>>
20876>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
20878>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
20879>>>>>>>>>    End_Procedure
20880>>>>>>>>>
20880>>>>>>>>>    Function ComCaption Returns String
20882>>>>>>>>>        String retVal
20882>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
20883>>>>>>>>>        Function_Return retVal
20884>>>>>>>>>    End_Function
20885>>>>>>>>>
20885>>>>>>>>>    Procedure Set ComCaption String value
20887>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
20888>>>>>>>>>    End_Procedure
20889>>>>>>>>>
20889>>>>>>>>>    Function ComDescriptionText Returns String
20891>>>>>>>>>        String retVal
20891>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
20892>>>>>>>>>        Function_Return retVal
20893>>>>>>>>>    End_Function
20894>>>>>>>>>
20894>>>>>>>>>    Procedure Set ComDescriptionText String value
20896>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
20897>>>>>>>>>    End_Procedure
20898>>>>>>>>>
20898>>>>>>>>>    Function ComId Returns Integer
20900>>>>>>>>>        Integer retVal
20900>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
20901>>>>>>>>>        Function_Return retVal
20902>>>>>>>>>    End_Function
20903>>>>>>>>>
20903>>>>>>>>>    Procedure Set ComId Integer value
20905>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
20906>>>>>>>>>    End_Procedure
20907>>>>>>>>>
20907>>>>>>>>>    Function ComParameter Returns String
20909>>>>>>>>>        String retVal
20909>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
20910>>>>>>>>>        Function_Return retVal
20911>>>>>>>>>    End_Function
20912>>>>>>>>>
20912>>>>>>>>>    Procedure Set ComParameter String value
20914>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
20915>>>>>>>>>    End_Procedure
20916>>>>>>>>>
20916>>>>>>>>>    Function ComShortcutText Returns String
20918>>>>>>>>>        String retVal
20918>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
20919>>>>>>>>>        Function_Return retVal
20920>>>>>>>>>    End_Function
20921>>>>>>>>>
20921>>>>>>>>>    Procedure Set ComShortcutText String value
20923>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
20924>>>>>>>>>    End_Procedure
20925>>>>>>>>>
20925>>>>>>>>>    Function ComCustomShortcutText Returns String
20927>>>>>>>>>        String retVal
20927>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
20928>>>>>>>>>        Function_Return retVal
20929>>>>>>>>>    End_Function
20930>>>>>>>>>
20930>>>>>>>>>    Procedure Set ComCustomShortcutText String value
20932>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
20933>>>>>>>>>    End_Procedure
20934>>>>>>>>>
20934>>>>>>>>>    Function ComTooltipText Returns String
20936>>>>>>>>>        String retVal
20936>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
20937>>>>>>>>>        Function_Return retVal
20938>>>>>>>>>    End_Function
20939>>>>>>>>>
20939>>>>>>>>>    Procedure Set ComTooltipText String value
20941>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
20942>>>>>>>>>    End_Procedure
20943>>>>>>>>>
20943>>>>>>>>>    Function ComVisible Returns Boolean
20945>>>>>>>>>        Boolean retVal
20945>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
20946>>>>>>>>>        Function_Return retVal
20947>>>>>>>>>    End_Function
20948>>>>>>>>>
20948>>>>>>>>>    Procedure Set ComVisible Boolean value
20950>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
20951>>>>>>>>>    End_Procedure
20952>>>>>>>>>
20952>>>>>>>>>    Function ComEnabled Returns Boolean
20954>>>>>>>>>        Boolean retVal
20954>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
20955>>>>>>>>>        Function_Return retVal
20956>>>>>>>>>    End_Function
20957>>>>>>>>>
20957>>>>>>>>>    Procedure Set ComEnabled Boolean value
20959>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
20960>>>>>>>>>    End_Procedure
20961>>>>>>>>>
20961>>>>>>>>>    Function ComIconId Returns Integer
20963>>>>>>>>>        Integer retVal
20963>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
20964>>>>>>>>>        Function_Return retVal
20965>>>>>>>>>    End_Function
20966>>>>>>>>>
20966>>>>>>>>>    Procedure Set ComIconId Integer value
20968>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
20969>>>>>>>>>    End_Procedure
20970>>>>>>>>>
20970>>>>>>>>>    Function ComDefaultItem Returns Boolean
20972>>>>>>>>>        Boolean retVal
20972>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
20973>>>>>>>>>        Function_Return retVal
20974>>>>>>>>>    End_Function
20975>>>>>>>>>
20975>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
20977>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
20978>>>>>>>>>    End_Procedure
20979>>>>>>>>>
20979>>>>>>>>>    Function ComFlags Returns XTPControlFlags
20981>>>>>>>>>        XTPControlFlags retVal
20981>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
20982>>>>>>>>>        Function_Return retVal
20983>>>>>>>>>    End_Function
20984>>>>>>>>>
20984>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
20986>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
20987>>>>>>>>>    End_Procedure
20988>>>>>>>>>
20988>>>>>>>>>    Function ComCategory Returns String
20990>>>>>>>>>        String retVal
20990>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
20991>>>>>>>>>        Function_Return retVal
20992>>>>>>>>>    End_Function
20993>>>>>>>>>
20993>>>>>>>>>    Procedure Set ComCategory String value
20995>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
20996>>>>>>>>>    End_Procedure
20997>>>>>>>>>
20997>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
20999>>>>>>>>>        XTPControlHideFlags retVal
20999>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
21000>>>>>>>>>        Function_Return retVal
21001>>>>>>>>>    End_Function
21002>>>>>>>>>
21002>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
21004>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
21005>>>>>>>>>    End_Procedure
21006>>>>>>>>>
21006>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
21008>>>>>>>>>        Boolean retVal
21008>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
21009>>>>>>>>>        Function_Return retVal
21010>>>>>>>>>    End_Function
21011>>>>>>>>>
21011>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
21013>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
21014>>>>>>>>>    End_Procedure
21015>>>>>>>>>
21015>>>>>>>>>    Function ComAction Returns Variant
21017>>>>>>>>>        Variant retVal
21017>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
21018>>>>>>>>>        Function_Return retVal
21019>>>>>>>>>    End_Function
21020>>>>>>>>>
21020>>>>>>>>>    Procedure Set ComAction Variant value
21022>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
21023>>>>>>>>>    End_Procedure
21024>>>>>>>>>
21024>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
21026>>>>>>>>>        Integer retVal
21026>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
21027>>>>>>>>>        Function_Return retVal
21028>>>>>>>>>    End_Function
21029>>>>>>>>>
21029>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
21031>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
21032>>>>>>>>>    End_Procedure
21033>>>>>>>>>
21033>>>>>>>>>    Function ComWidth Returns Integer
21035>>>>>>>>>        Integer retVal
21035>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
21036>>>>>>>>>        Function_Return retVal
21037>>>>>>>>>    End_Function
21038>>>>>>>>>
21038>>>>>>>>>    Procedure Set ComWidth Integer value
21040>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
21041>>>>>>>>>    End_Procedure
21042>>>>>>>>>
21042>>>>>>>>>    Function ComHeight Returns Integer
21044>>>>>>>>>        Integer retVal
21044>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
21045>>>>>>>>>        Function_Return retVal
21046>>>>>>>>>    End_Function
21047>>>>>>>>>
21047>>>>>>>>>    Procedure Set ComHeight Integer value
21049>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
21050>>>>>>>>>    End_Procedure
21051>>>>>>>>>
21051>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
21053>>>>>>>>>        XTPButtonStyle retVal
21053>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
21054>>>>>>>>>        Function_Return retVal
21055>>>>>>>>>    End_Function
21056>>>>>>>>>
21056>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
21058>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
21059>>>>>>>>>    End_Procedure
21060>>>>>>>>>
21060>>>>>>>>>    Function ComKeyboardTip Returns String
21062>>>>>>>>>        String retVal
21062>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
21063>>>>>>>>>        Function_Return retVal
21064>>>>>>>>>    End_Function
21065>>>>>>>>>
21065>>>>>>>>>    Procedure Set ComKeyboardTip String value
21067>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
21068>>>>>>>>>    End_Procedure
21069>>>>>>>>>
21069>>>>>>>>>    Function ComHandle Returns Integer
21071>>>>>>>>>        Integer retVal
21071>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to retVal
21072>>>>>>>>>        Function_Return retVal
21073>>>>>>>>>    End_Function
21074>>>>>>>>>
21074>>>>>>>>>    Procedure Set ComHandle Integer value
21076>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to value
21077>>>>>>>>>    End_Procedure
21078>>>>>>>>>
21078>>>>>>>>>    Function ComVerticalOptions Returns XTPControlCustomVerticalOptions
21080>>>>>>>>>        XTPControlCustomVerticalOptions retVal
21080>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
21081>>>>>>>>>        Function_Return retVal
21082>>>>>>>>>    End_Function
21083>>>>>>>>>
21083>>>>>>>>>    Procedure Set ComVerticalOptions XTPControlCustomVerticalOptions value
21085>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
21086>>>>>>>>>    End_Procedure
21087>>>>>>>>>
21087>>>>>>>>>    Function ComControls Returns Variant
21089>>>>>>>>>        Handle hDispatchDriver
21089>>>>>>>>>        Variant retVal
21089>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21090>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
21091>>>>>>>>>        Function_Return retVal
21092>>>>>>>>>    End_Function
21093>>>>>>>>>
21093>>>>>>>>>    Function ComParent Returns Variant
21095>>>>>>>>>        Handle hDispatchDriver
21095>>>>>>>>>        Variant retVal
21095>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21096>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
21097>>>>>>>>>        Function_Return retVal
21098>>>>>>>>>    End_Function
21099>>>>>>>>>
21099>>>>>>>>>    Function ComIndex Returns Integer
21101>>>>>>>>>        Handle hDispatchDriver
21101>>>>>>>>>        Integer retVal
21101>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21102>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
21103>>>>>>>>>        Function_Return retVal
21104>>>>>>>>>    End_Function
21105>>>>>>>>>
21105>>>>>>>>>    Function ComType Returns XTPControlType
21107>>>>>>>>>        Handle hDispatchDriver
21107>>>>>>>>>        XTPControlType retVal
21107>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21108>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
21109>>>>>>>>>        Function_Return retVal
21110>>>>>>>>>    End_Function
21111>>>>>>>>>
21111>>>>>>>>>    Procedure ComDelete
21113>>>>>>>>>        Handle hDispatchDriver
21113>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21114>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
21115>>>>>>>>>    End_Procedure
21116>>>>>>>>>
21116>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
21118>>>>>>>>>        Handle hDispatchDriver
21118>>>>>>>>>        Variant retVal
21118>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21119>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21120>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
21121>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
21122>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
21123>>>>>>>>>        Function_Return retVal
21124>>>>>>>>>    End_Function
21125>>>>>>>>>
21125>>>>>>>>>    Procedure ComSetFocus
21127>>>>>>>>>        Handle hDispatchDriver
21127>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21128>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
21129>>>>>>>>>    End_Procedure
21130>>>>>>>>>
21130>>>>>>>>>    Procedure ComExecute
21132>>>>>>>>>        Handle hDispatchDriver
21132>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21133>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
21134>>>>>>>>>    End_Procedure
21135>>>>>>>>>
21135>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
21137>>>>>>>>>        Handle hDispatchDriver
21137>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21138>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
21139>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
21140>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
21141>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
21142>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
21143>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
21144>>>>>>>>>    End_Procedure
21145>>>>>>>>>
21145>>>>>>>>>    Function ComRibbonGroup Returns Variant
21147>>>>>>>>>        Handle hDispatchDriver
21147>>>>>>>>>        Variant retVal
21147>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21148>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
21149>>>>>>>>>        Function_Return retVal
21150>>>>>>>>>    End_Function
21151>>>>>>>>>
21151>>>>>>>>>    Procedure ComReset
21153>>>>>>>>>        Handle hDispatchDriver
21153>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21154>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
21155>>>>>>>>>    End_Procedure
21156>>>>>>>>>
21156>>>>>>>>>    Function ComTop Returns Integer
21158>>>>>>>>>        Handle hDispatchDriver
21158>>>>>>>>>        Integer retVal
21158>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21159>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
21160>>>>>>>>>        Function_Return retVal
21161>>>>>>>>>    End_Function
21162>>>>>>>>>
21162>>>>>>>>>    Function ComLeft Returns Integer
21164>>>>>>>>>        Handle hDispatchDriver
21164>>>>>>>>>        Integer retVal
21164>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21165>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
21166>>>>>>>>>        Function_Return retVal
21167>>>>>>>>>    End_Function
21168>>>>>>>>>
21168>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
21170>>>>>>>>>        Handle hDispatchDriver
21170>>>>>>>>>        Variant retVal
21170>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21171>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21172>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
21173>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
21174>>>>>>>>>        Function_Return retVal
21175>>>>>>>>>    End_Function
21176>>>>>>>>>
21176>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
21178>>>>>>>>>        Handle hDispatchDriver
21178>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21179>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21180>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
21181>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
21182>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
21183>>>>>>>>>    End_Procedure
21184>>>>>>>>>
21184>>>>>>>>>    Procedure ComSetSize Integer llcx Integer llcy
21186>>>>>>>>>        Handle hDispatchDriver
21186>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21187>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21188>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
21189>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
21190>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 51 OLE_VT_VOID
21191>>>>>>>>>    End_Procedure
21192>>>>>>>>>End_Class
21193>>>>>>>>>
21193>>>>>>>>>// CoClass
21193>>>>>>>>>// CLSID: {C0DE2200-1B47-4246-A360-CC5F34ABCE35}
21193>>>>>>>>>Class cCJCommandBarControlCustom is a cComAutomationObject
21194>>>>>>>>>    Import_Class_Protocol cCJICommandBarControlCustom
21195>>>>>>>>>
21195>>>>>>>>>    Procedure Construct_Object
21197>>>>>>>>>        Forward Send Construct_Object
21199>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21200>>>>>>>>>    End_Procedure
21201>>>>>>>>>End_Class
21202>>>>>>>>>
21202>>>>>>>>>// CLSID: {C0DE2200-27BF-4CB1-9ABF-1788D9835223}
21202>>>>>>>>>Class cCJICommandBarControls is a Mixin
21203>>>>>>>>>
21203>>>>>>>>>    // Gets the number of controls in the collection.
21203>>>>>>>>>    Function ComCount Returns Integer
21205>>>>>>>>>        Handle hDispatchDriver
21205>>>>>>>>>        Integer retVal
21205>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21206>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
21207>>>>>>>>>        Function_Return retVal
21208>>>>>>>>>    End_Function
21209>>>>>>>>>
21209>>>>>>>>>    // Gets an item from the collection by its index.
21209>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
21211>>>>>>>>>        Handle hDispatchDriver
21211>>>>>>>>>        Variant retVal
21211>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21212>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21213>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
21214>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
21215>>>>>>>>>        Function_Return retVal
21216>>>>>>>>>    End_Function
21217>>>>>>>>>
21217>>>>>>>>>    Function Com_NewEnum Returns Variant
21219>>>>>>>>>        Handle hDispatchDriver
21219>>>>>>>>>        Variant retVal
21219>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21220>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
21221>>>>>>>>>        Function_Return retVal
21222>>>>>>>>>    End_Function
21223>>>>>>>>>
21223>>>>>>>>>    // Adds a new command bar control to the collection.
21223>>>>>>>>>    Function ComAdd XTPControlType llType Integer llId String llCaption Variant llBefore Variant llTemporary Returns Variant
21225>>>>>>>>>        Handle hDispatchDriver
21225>>>>>>>>>        Variant retVal
21225>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21226>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
21227>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llType
21228>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
21229>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
21230>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
21231>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llTemporary
21232>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
21233>>>>>>>>>        Function_Return retVal
21234>>>>>>>>>    End_Function
21235>>>>>>>>>
21235>>>>>>>>>    // Gets the popup control representing the parent of the command bar
21235>>>>>>>>>    Function ComParent Returns Variant
21237>>>>>>>>>        Handle hDispatchDriver
21237>>>>>>>>>        Variant retVal
21237>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21238>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_DISPATCH to retVal
21239>>>>>>>>>        Function_Return retVal
21240>>>>>>>>>    End_Function
21241>>>>>>>>>
21241>>>>>>>>>    // Finds the specified control
21241>>>>>>>>>    Function ComFind Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
21243>>>>>>>>>        Handle hDispatchDriver
21243>>>>>>>>>        Variant retVal
21243>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21244>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
21245>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
21246>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
21247>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
21248>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
21249>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
21250>>>>>>>>>        Function_Return retVal
21251>>>>>>>>>    End_Function
21252>>>>>>>>>
21252>>>>>>>>>    // Deletes all of the command bar controls from the collection
21252>>>>>>>>>    Procedure ComDeleteAll
21254>>>>>>>>>        Handle hDispatchDriver
21254>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21255>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
21256>>>>>>>>>    End_Procedure
21257>>>>>>>>>
21257>>>>>>>>>    // Recreates original controls
21257>>>>>>>>>    Procedure ComCreateOriginalControls
21259>>>>>>>>>        Handle hDispatchDriver
21259>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21260>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
21261>>>>>>>>>    End_Procedure
21262>>>>>>>>>
21262>>>>>>>>>    // Retrieve original controls
21262>>>>>>>>>    Function ComOriginalControls Returns Variant
21264>>>>>>>>>        Handle hDispatchDriver
21264>>>>>>>>>        Variant retVal
21264>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21265>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_DISPATCH to retVal
21266>>>>>>>>>        Function_Return retVal
21267>>>>>>>>>    End_Function
21268>>>>>>>>>
21268>>>>>>>>>    Procedure ComAddControl Variant llControl Variant llBefore
21270>>>>>>>>>        Handle hDispatchDriver
21270>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21271>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21272>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llControl
21273>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
21274>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
21275>>>>>>>>>    End_Procedure
21276>>>>>>>>>End_Class
21277>>>>>>>>>
21277>>>>>>>>>// CoClass
21277>>>>>>>>>// CLSID: {C0DE2200-A08C-49CB-8B78-58D990C00C51}
21277>>>>>>>>>Class cCJCommandBarControls is a cComAutomationObject
21278>>>>>>>>>    Import_Class_Protocol cCJICommandBarControls
21279>>>>>>>>>
21279>>>>>>>>>    Procedure Construct_Object
21281>>>>>>>>>        Forward Send Construct_Object
21283>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21284>>>>>>>>>    End_Procedure
21285>>>>>>>>>End_Class
21286>>>>>>>>>
21286>>>>>>>>>// CLSID: {C0DE2200-0E35-48A5-BDED-924880DAF1B2}
21286>>>>>>>>>Class cCJIKeyBinding is a Mixin
21287>>>>>>>>>
21287>>>>>>>>>    Function ComCommand Returns Integer
21289>>>>>>>>>        Integer retVal
21289>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
21290>>>>>>>>>        Function_Return retVal
21291>>>>>>>>>    End_Function
21292>>>>>>>>>
21292>>>>>>>>>    Procedure Set ComCommand Integer value
21294>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
21295>>>>>>>>>    End_Procedure
21296>>>>>>>>>
21296>>>>>>>>>    Function ComShortcutText Returns String
21298>>>>>>>>>        String retVal
21298>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
21299>>>>>>>>>        Function_Return retVal
21300>>>>>>>>>    End_Function
21301>>>>>>>>>
21301>>>>>>>>>    Procedure Set ComShortcutText String value
21303>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
21304>>>>>>>>>    End_Procedure
21305>>>>>>>>>End_Class
21306>>>>>>>>>
21306>>>>>>>>>// CoClass
21306>>>>>>>>>// CLSID: {C0DE2200-EA68-4E0D-946F-45694C26F6BA}
21306>>>>>>>>>Class cCJKeyBinding is a cComAutomationObject
21307>>>>>>>>>    Import_Class_Protocol cCJIKeyBinding
21308>>>>>>>>>
21308>>>>>>>>>    Procedure Construct_Object
21310>>>>>>>>>        Forward Send Construct_Object
21312>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21313>>>>>>>>>    End_Procedure
21314>>>>>>>>>End_Class
21315>>>>>>>>>
21315>>>>>>>>>// CLSID: {C0DE2200-7369-4EAB-9B25-1D5C52916D86}
21315>>>>>>>>>Class cCJIKeyBindings is a Mixin
21316>>>>>>>>>
21316>>>>>>>>>    Function ComUseSystemKeyNameText Returns Boolean
21318>>>>>>>>>        Boolean retVal
21318>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
21319>>>>>>>>>        Function_Return retVal
21320>>>>>>>>>    End_Function
21321>>>>>>>>>
21321>>>>>>>>>    Procedure Set ComUseSystemKeyNameText Boolean value
21323>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
21324>>>>>>>>>    End_Procedure
21325>>>>>>>>>
21325>>>>>>>>>    Function ComAllowDoubleKeyShortcuts Returns Boolean
21327>>>>>>>>>        Boolean retVal
21327>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
21328>>>>>>>>>        Function_Return retVal
21329>>>>>>>>>    End_Function
21330>>>>>>>>>
21330>>>>>>>>>    Procedure Set ComAllowDoubleKeyShortcuts Boolean value
21332>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
21333>>>>>>>>>    End_Procedure
21334>>>>>>>>>
21334>>>>>>>>>    Function ComEnabled Returns Boolean
21336>>>>>>>>>        Boolean retVal
21336>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
21337>>>>>>>>>        Function_Return retVal
21338>>>>>>>>>    End_Function
21339>>>>>>>>>
21339>>>>>>>>>    Procedure Set ComEnabled Boolean value
21341>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
21342>>>>>>>>>    End_Procedure
21343>>>>>>>>>
21343>>>>>>>>>    Function ComDisableOnCapture Returns Boolean
21345>>>>>>>>>        Boolean retVal
21345>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
21346>>>>>>>>>        Function_Return retVal
21347>>>>>>>>>    End_Function
21348>>>>>>>>>
21348>>>>>>>>>    Procedure Set ComDisableOnCapture Boolean value
21350>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
21351>>>>>>>>>    End_Procedure
21352>>>>>>>>>
21352>>>>>>>>>    Function ComEnableCustomShortcutText Returns Boolean
21354>>>>>>>>>        Boolean retVal
21354>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
21355>>>>>>>>>        Function_Return retVal
21356>>>>>>>>>    End_Function
21357>>>>>>>>>
21357>>>>>>>>>    Procedure Set ComEnableCustomShortcutText Boolean value
21359>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
21360>>>>>>>>>    End_Procedure
21361>>>>>>>>>
21361>>>>>>>>>    Procedure ComAdd Integer llfVirt Integer llKey Integer llCommand
21363>>>>>>>>>        Handle hDispatchDriver
21363>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21364>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
21365>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llfVirt
21366>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llKey
21367>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21368>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1 OLE_VT_VOID
21369>>>>>>>>>    End_Procedure
21370>>>>>>>>>
21370>>>>>>>>>    Procedure ComAddShortcut Integer llCommand String llShortcut
21372>>>>>>>>>        Handle hDispatchDriver
21372>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21373>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21374>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21375>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llShortcut
21376>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
21377>>>>>>>>>    End_Procedure
21378>>>>>>>>>
21378>>>>>>>>>    Procedure ComDeleteAll
21380>>>>>>>>>        Handle hDispatchDriver
21380>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21381>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 2 OLE_VT_VOID
21382>>>>>>>>>    End_Procedure
21383>>>>>>>>>
21383>>>>>>>>>    Procedure ComSetKeyNameText Integer llKey String llKeyName
21385>>>>>>>>>        Handle hDispatchDriver
21385>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21386>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21387>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llKey
21388>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llKeyName
21389>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
21390>>>>>>>>>    End_Procedure
21391>>>>>>>>>
21391>>>>>>>>>    Procedure ComDelete Integer llCommand
21393>>>>>>>>>        Handle hDispatchDriver
21393>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21394>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21395>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21396>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
21397>>>>>>>>>    End_Procedure
21398>>>>>>>>>
21398>>>>>>>>>    Function ComCount Returns Integer
21400>>>>>>>>>        Handle hDispatchDriver
21400>>>>>>>>>        Integer retVal
21400>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21401>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_I4 to retVal
21402>>>>>>>>>        Function_Return retVal
21403>>>>>>>>>    End_Function
21404>>>>>>>>>
21404>>>>>>>>>    Function Com_NewEnum Returns Variant
21406>>>>>>>>>        Handle hDispatchDriver
21406>>>>>>>>>        Variant retVal
21406>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21407>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
21408>>>>>>>>>        Function_Return retVal
21409>>>>>>>>>    End_Function
21410>>>>>>>>>
21410>>>>>>>>>    // Gets an item from the collection by its Id.
21410>>>>>>>>>    Function ComShortcut Integer llIndex Returns Variant
21412>>>>>>>>>        Handle hDispatchDriver
21412>>>>>>>>>        Variant retVal
21412>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21413>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21414>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
21415>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
21416>>>>>>>>>        Function_Return retVal
21417>>>>>>>>>    End_Function
21418>>>>>>>>>
21418>>>>>>>>>    Function ComFindShortcut Integer llCommand Returns Variant
21420>>>>>>>>>        Handle hDispatchDriver
21420>>>>>>>>>        Variant retVal
21420>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21421>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21422>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21423>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
21424>>>>>>>>>        Function_Return retVal
21425>>>>>>>>>    End_Function
21426>>>>>>>>>End_Class
21427>>>>>>>>>
21427>>>>>>>>>// CLSID: {C0DE2200-B842-4945-A2F6-CA4237496689}
21427>>>>>>>>>Class cCJIKeyBindingsEvents is a Mixin
21428>>>>>>>>>
21428>>>>>>>>>    Procedure OnComBeforeTranslate Integer llCommand Variant llCancel
21430>>>>>>>>>    End_Procedure
21431>>>>>>>>>
21431>>>>>>>>>    Procedure OnComBeforeAdd Integer llfVirt Integer llKey Integer llCommand Variant llCancel
21433>>>>>>>>>    End_Procedure
21434>>>>>>>>>
21434>>>>>>>>>    Procedure OnComBeforeRemove Integer llfVirt Integer llKey Integer llCommand Variant llCancel
21436>>>>>>>>>    End_Procedure
21437>>>>>>>>>
21437>>>>>>>>>    Procedure RegisterComEvents
21439>>>>>>>>>        Send RegisterComEvent 1 msg_OnComBeforeTranslate
21440>>>>>>>>>        Send RegisterComEvent 2 msg_OnComBeforeAdd
21441>>>>>>>>>        Send RegisterComEvent 3 msg_OnComBeforeRemove
21442>>>>>>>>>    End_Procedure
21443>>>>>>>>>End_Class
21444>>>>>>>>>
21444>>>>>>>>>// CoClass
21444>>>>>>>>>// CLSID: {C0DE2200-6BDA-418D-9440-2D141B5D653C}
21444>>>>>>>>>Class cCJKeyBindings is a cComAutomationObject
21445>>>>>>>>>    Import_Class_Protocol cCJIKeyBindings
21446>>>>>>>>>    Import_Class_Protocol cCJIKeyBindingsEvents
21447>>>>>>>>>
21447>>>>>>>>>    Procedure Construct_Object
21449>>>>>>>>>        Forward Send Construct_Object
21451>>>>>>>>>        Set psEventId to "{C0DE2200-B842-4945-A2F6-CA4237496689}"
21452>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21453>>>>>>>>>    End_Procedure
21454>>>>>>>>>End_Class
21455>>>>>>>>>
21455>>>>>>>>>// CLSID: {C0DE2200-48B2-4CCF-B8D7-CFD6A679F837}
21455>>>>>>>>>Class cCJICommandBarsOptions is a Mixin
21456>>>>>>>>>
21456>>>>>>>>>    Function ComAlwaysShowFullMenus Returns Boolean
21458>>>>>>>>>        Boolean retVal
21458>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
21459>>>>>>>>>        Function_Return retVal
21460>>>>>>>>>    End_Function
21461>>>>>>>>>
21461>>>>>>>>>    Procedure Set ComAlwaysShowFullMenus Boolean value
21463>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
21464>>>>>>>>>    End_Procedure
21465>>>>>>>>>
21465>>>>>>>>>    Function ComShowFullAfterDelay Returns Boolean
21467>>>>>>>>>        Boolean retVal
21467>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to retVal
21468>>>>>>>>>        Function_Return retVal
21469>>>>>>>>>    End_Function
21470>>>>>>>>>
21470>>>>>>>>>    Procedure Set ComShowFullAfterDelay Boolean value
21472>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to value
21473>>>>>>>>>    End_Procedure
21474>>>>>>>>>
21474>>>>>>>>>    Function ComToolBarScreenTips Returns Boolean
21476>>>>>>>>>        Boolean retVal
21476>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
21477>>>>>>>>>        Function_Return retVal
21478>>>>>>>>>    End_Function
21479>>>>>>>>>
21479>>>>>>>>>    Procedure Set ComToolBarScreenTips Boolean value
21481>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
21482>>>>>>>>>    End_Procedure
21483>>>>>>>>>
21483>>>>>>>>>    Function ComToolBarAccelTips Returns Boolean
21485>>>>>>>>>        Boolean retVal
21485>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
21486>>>>>>>>>        Function_Return retVal
21487>>>>>>>>>    End_Function
21488>>>>>>>>>
21488>>>>>>>>>    Procedure Set ComToolBarAccelTips Boolean value
21490>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
21491>>>>>>>>>    End_Procedure
21492>>>>>>>>>
21492>>>>>>>>>    Function ComLargeIcons Returns Boolean
21494>>>>>>>>>        Boolean retVal
21494>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
21495>>>>>>>>>        Function_Return retVal
21496>>>>>>>>>    End_Function
21497>>>>>>>>>
21497>>>>>>>>>    Procedure Set ComLargeIcons Boolean value
21499>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
21500>>>>>>>>>    End_Procedure
21501>>>>>>>>>
21501>>>>>>>>>    Function ComUseFadedIcons Returns Boolean
21503>>>>>>>>>        Boolean retVal
21503>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
21504>>>>>>>>>        Function_Return retVal
21505>>>>>>>>>    End_Function
21506>>>>>>>>>
21506>>>>>>>>>    Procedure Set ComUseFadedIcons Boolean value
21508>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
21509>>>>>>>>>    End_Procedure
21510>>>>>>>>>
21510>>>>>>>>>    Function ComUseDisabledIcons Returns Boolean
21512>>>>>>>>>        Boolean retVal
21512>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
21513>>>>>>>>>        Function_Return retVal
21514>>>>>>>>>    End_Function
21515>>>>>>>>>
21515>>>>>>>>>    Procedure Set ComUseDisabledIcons Boolean value
21517>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
21518>>>>>>>>>    End_Procedure
21519>>>>>>>>>
21519>>>>>>>>>    Function ComIconsWithShadow Returns Boolean
21521>>>>>>>>>        Boolean retVal
21521>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
21522>>>>>>>>>        Function_Return retVal
21523>>>>>>>>>    End_Function
21524>>>>>>>>>
21524>>>>>>>>>    Procedure Set ComIconsWithShadow Boolean value
21526>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
21527>>>>>>>>>    End_Procedure
21528>>>>>>>>>
21528>>>>>>>>>    Function ComShowExpandButtonAlways Returns Boolean
21530>>>>>>>>>        Boolean retVal
21530>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
21531>>>>>>>>>        Function_Return retVal
21532>>>>>>>>>    End_Function
21533>>>>>>>>>
21533>>>>>>>>>    Procedure Set ComShowExpandButtonAlways Boolean value
21535>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
21536>>>>>>>>>    End_Procedure
21537>>>>>>>>>
21537>>>>>>>>>    Function ComAnimation Returns XTPAnimationType
21539>>>>>>>>>        XTPAnimationType retVal
21539>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_I4 to retVal
21540>>>>>>>>>        Function_Return retVal
21541>>>>>>>>>    End_Function
21542>>>>>>>>>
21542>>>>>>>>>    Procedure Set ComAnimation XTPAnimationType value
21544>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_I4 to value
21545>>>>>>>>>    End_Procedure
21546>>>>>>>>>
21546>>>>>>>>>    Function ComLunaColors Returns Boolean
21548>>>>>>>>>        Boolean retVal
21548>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
21549>>>>>>>>>        Function_Return retVal
21550>>>>>>>>>    End_Function
21551>>>>>>>>>
21551>>>>>>>>>    Procedure Set ComLunaColors Boolean value
21553>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
21554>>>>>>>>>    End_Procedure
21555>>>>>>>>>
21555>>>>>>>>>    Function ComUseSharedImageList Returns Boolean
21557>>>>>>>>>        Boolean retVal
21557>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
21558>>>>>>>>>        Function_Return retVal
21559>>>>>>>>>    End_Function
21560>>>>>>>>>
21560>>>>>>>>>    Procedure Set ComUseSharedImageList Boolean value
21562>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
21563>>>>>>>>>    End_Procedure
21564>>>>>>>>>
21564>>>>>>>>>    Function ComSyncFloatingToolbars Returns Boolean
21566>>>>>>>>>        Boolean retVal
21566>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_BOOL to retVal
21567>>>>>>>>>        Function_Return retVal
21568>>>>>>>>>    End_Function
21569>>>>>>>>>
21569>>>>>>>>>    Procedure Set ComSyncFloatingToolbars Boolean value
21571>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_BOOL to value
21572>>>>>>>>>    End_Procedure
21573>>>>>>>>>
21573>>>>>>>>>    Function ComFloatToolbarsByDoubleClick Returns Boolean
21575>>>>>>>>>        Boolean retVal
21575>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
21576>>>>>>>>>        Function_Return retVal
21577>>>>>>>>>    End_Function
21578>>>>>>>>>
21578>>>>>>>>>    Procedure Set ComFloatToolbarsByDoubleClick Boolean value
21580>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
21581>>>>>>>>>    End_Procedure
21582>>>>>>>>>
21582>>>>>>>>>    Function ComAutoHideUnusedPopups Returns Boolean
21584>>>>>>>>>        Boolean retVal
21584>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_BOOL to retVal
21585>>>>>>>>>        Function_Return retVal
21586>>>>>>>>>    End_Function
21587>>>>>>>>>
21587>>>>>>>>>    Procedure Set ComAutoHideUnusedPopups Boolean value
21589>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_BOOL to value
21590>>>>>>>>>    End_Procedure
21591>>>>>>>>>
21591>>>>>>>>>    Function ComShowPopupBarToolTips Returns Boolean
21593>>>>>>>>>        Boolean retVal
21593>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
21594>>>>>>>>>        Function_Return retVal
21595>>>>>>>>>    End_Function
21596>>>>>>>>>
21596>>>>>>>>>    Procedure Set ComShowPopupBarToolTips Boolean value
21598>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
21599>>>>>>>>>    End_Procedure
21600>>>>>>>>>
21600>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
21602>>>>>>>>>        Boolean retVal
21602>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
21603>>>>>>>>>        Function_Return retVal
21604>>>>>>>>>    End_Function
21605>>>>>>>>>
21605>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
21607>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
21608>>>>>>>>>    End_Procedure
21609>>>>>>>>>
21609>>>>>>>>>    Function ComUpdatePeriod Returns Integer
21611>>>>>>>>>        Integer retVal
21611>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_I4 to retVal
21612>>>>>>>>>        Function_Return retVal
21613>>>>>>>>>    End_Function
21614>>>>>>>>>
21614>>>>>>>>>    Procedure Set ComUpdatePeriod Integer value
21616>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_I4 to value
21617>>>>>>>>>    End_Procedure
21618>>>>>>>>>
21618>>>>>>>>>    Function ComAltDragCustomization Returns Boolean
21620>>>>>>>>>        Boolean retVal
21620>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
21621>>>>>>>>>        Function_Return retVal
21622>>>>>>>>>    End_Function
21623>>>>>>>>>
21623>>>>>>>>>    Procedure Set ComAltDragCustomization Boolean value
21625>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
21626>>>>>>>>>    End_Procedure
21627>>>>>>>>>
21627>>>>>>>>>    Function ComFont Returns Variant
21629>>>>>>>>>        Variant retVal
21629>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
21630>>>>>>>>>        Function_Return retVal
21631>>>>>>>>>    End_Function
21632>>>>>>>>>
21632>>>>>>>>>    Procedure Set ComFont Variant value
21634>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
21635>>>>>>>>>    End_Procedure
21636>>>>>>>>>
21636>>>>>>>>>    Function ComMaxPopupWidth Returns Real
21638>>>>>>>>>        Real retVal
21638>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_R8 to retVal
21639>>>>>>>>>        Function_Return retVal
21640>>>>>>>>>    End_Function
21641>>>>>>>>>
21641>>>>>>>>>    Procedure Set ComMaxPopupWidth Real value
21643>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_R8 to value
21644>>>>>>>>>    End_Procedure
21645>>>>>>>>>
21645>>>>>>>>>    Function ComKeyboardCuesShow Returns XTPKeyboardCuesShow
21647>>>>>>>>>        XTPKeyboardCuesShow retVal
21647>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to retVal
21648>>>>>>>>>        Function_Return retVal
21649>>>>>>>>>    End_Function
21650>>>>>>>>>
21650>>>>>>>>>    Procedure Set ComKeyboardCuesShow XTPKeyboardCuesShow value
21652>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to value
21653>>>>>>>>>    End_Procedure
21654>>>>>>>>>
21654>>>>>>>>>    Function ComKeyboardCuesUse Returns XTPKeyboardCuesUse
21656>>>>>>>>>        XTPKeyboardCuesUse retVal
21656>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to retVal
21657>>>>>>>>>        Function_Return retVal
21658>>>>>>>>>    End_Function
21659>>>>>>>>>
21659>>>>>>>>>    Procedure Set ComKeyboardCuesUse XTPKeyboardCuesUse value
21661>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to value
21662>>>>>>>>>    End_Procedure
21663>>>>>>>>>
21663>>>>>>>>>    Function ComFloatingBarCaptionFont Returns Variant
21665>>>>>>>>>        Variant retVal
21665>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_DISPATCH to retVal
21666>>>>>>>>>        Function_Return retVal
21667>>>>>>>>>    End_Function
21668>>>>>>>>>
21668>>>>>>>>>    Procedure Set ComFloatingBarCaptionFont Variant value
21670>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_DISPATCH to value
21671>>>>>>>>>    End_Procedure
21672>>>>>>>>>
21672>>>>>>>>>    Function ComComboBoxFont Returns Variant
21674>>>>>>>>>        Variant retVal
21674>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_DISPATCH to retVal
21675>>>>>>>>>        Function_Return retVal
21676>>>>>>>>>    End_Function
21677>>>>>>>>>
21677>>>>>>>>>    Procedure Set ComComboBoxFont Variant value
21679>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_DISPATCH to value
21680>>>>>>>>>    End_Procedure
21681>>>>>>>>>
21681>>>>>>>>>    Function ComOfficeStyleDisabledIcons Returns Boolean
21683>>>>>>>>>        Boolean retVal
21683>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_BOOL to retVal
21684>>>>>>>>>        Function_Return retVal
21685>>>>>>>>>    End_Function
21686>>>>>>>>>
21686>>>>>>>>>    Procedure Set ComOfficeStyleDisabledIcons Boolean value
21688>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_BOOL to value
21689>>>>>>>>>    End_Procedure
21690>>>>>>>>>
21690>>>>>>>>>    Function ComExpandHoverDelay Returns Integer
21692>>>>>>>>>        Integer retVal
21692>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to retVal
21693>>>>>>>>>        Function_Return retVal
21694>>>>>>>>>    End_Function
21695>>>>>>>>>
21695>>>>>>>>>    Procedure Set ComExpandHoverDelay Integer value
21697>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to value
21698>>>>>>>>>    End_Procedure
21699>>>>>>>>>
21699>>>>>>>>>    Function ComExpandDelay Returns Integer
21701>>>>>>>>>        Integer retVal
21701>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
21702>>>>>>>>>        Function_Return retVal
21703>>>>>>>>>    End_Function
21704>>>>>>>>>
21704>>>>>>>>>    Procedure Set ComExpandDelay Integer value
21706>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
21707>>>>>>>>>    End_Procedure
21708>>>>>>>>>
21708>>>>>>>>>    Function ComUseAltNumPadKeys Returns Boolean
21710>>>>>>>>>        Boolean retVal
21710>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to retVal
21711>>>>>>>>>        Function_Return retVal
21712>>>>>>>>>    End_Function
21713>>>>>>>>>
21713>>>>>>>>>    Procedure Set ComUseAltNumPadKeys Boolean value
21715>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to value
21716>>>>>>>>>    End_Procedure
21717>>>>>>>>>
21717>>>>>>>>>    Function ComUseSystemSaveBitsStyle Returns Boolean
21719>>>>>>>>>        Boolean retVal
21719>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_BOOL to retVal
21720>>>>>>>>>        Function_Return retVal
21721>>>>>>>>>    End_Function
21722>>>>>>>>>
21722>>>>>>>>>    Procedure Set ComUseSystemSaveBitsStyle Boolean value
21724>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_BOOL to value
21725>>>>>>>>>    End_Procedure
21726>>>>>>>>>
21726>>>>>>>>>    Function ComWrapLargePopups Returns Boolean
21728>>>>>>>>>        Boolean retVal
21728>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
21729>>>>>>>>>        Function_Return retVal
21730>>>>>>>>>    End_Function
21731>>>>>>>>>
21731>>>>>>>>>    Procedure Set ComWrapLargePopups Boolean value
21733>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
21734>>>>>>>>>    End_Procedure
21735>>>>>>>>>
21735>>>>>>>>>    Function ComShowKeyboardTips Returns Boolean
21737>>>>>>>>>        Boolean retVal
21737>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_BOOL to retVal
21738>>>>>>>>>        Function_Return retVal
21739>>>>>>>>>    End_Function
21740>>>>>>>>>
21740>>>>>>>>>    Procedure Set ComShowKeyboardTips Boolean value
21742>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_BOOL to value
21743>>>>>>>>>    End_Procedure
21744>>>>>>>>>
21744>>>>>>>>>    Function ComShowContextMenuAccelerators Returns Boolean
21746>>>>>>>>>        Boolean retVal
21746>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 35 OLE_VT_BOOL to retVal
21747>>>>>>>>>        Function_Return retVal
21748>>>>>>>>>    End_Function
21749>>>>>>>>>
21749>>>>>>>>>    Procedure Set ComShowContextMenuAccelerators Boolean value
21751>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 35 OLE_VT_BOOL to value
21752>>>>>>>>>    End_Procedure
21753>>>>>>>>>
21753>>>>>>>>>    // Synchronizes the activation of the mini-frame windows to the activation of its parent window
21753>>>>>>>>>    Function ComSyncActiveFloatingFrames Returns Boolean
21755>>>>>>>>>        Boolean retVal
21755>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
21756>>>>>>>>>        Function_Return retVal
21757>>>>>>>>>    End_Function
21758>>>>>>>>>
21758>>>>>>>>>    // Synchronizes the activation of the mini-frame windows to the activation of its parent window
21758>>>>>>>>>    Procedure Set ComSyncActiveFloatingFrames Boolean value
21760>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
21761>>>>>>>>>    End_Procedure
21762>>>>>>>>>
21762>>>>>>>>>    Function ComShowMiniToolbarTips Returns Boolean
21764>>>>>>>>>        Boolean retVal
21764>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
21765>>>>>>>>>        Function_Return retVal
21766>>>>>>>>>    End_Function
21767>>>>>>>>>
21767>>>>>>>>>    Procedure Set ComShowMiniToolbarTips Boolean value
21769>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
21770>>>>>>>>>    End_Procedure
21771>>>>>>>>>
21771>>>>>>>>>    // Color value for VisualStudio 2015 (and above) state color, usually applied to frame border and status bar
21771>>>>>>>>>    Function ComVSStateColor Returns OLE_COLOR
21773>>>>>>>>>        OLE_COLOR retVal
21773>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_I4 to retVal
21774>>>>>>>>>        Function_Return retVal
21775>>>>>>>>>    End_Function
21776>>>>>>>>>
21776>>>>>>>>>    // Color value for VisualStudio 2015 (and above) state color, usually applied to frame border and status bar
21776>>>>>>>>>    Procedure Set ComVSStateColor OLE_COLOR value
21778>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_I4 to value
21779>>>>>>>>>    End_Procedure
21780>>>>>>>>>
21780>>>>>>>>>    Function ComShowPopupButtonsSelectedToolbarOnly Returns Boolean
21782>>>>>>>>>        Boolean retVal
21782>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to retVal
21783>>>>>>>>>        Function_Return retVal
21784>>>>>>>>>    End_Function
21785>>>>>>>>>
21785>>>>>>>>>    Procedure Set ComShowPopupButtonsSelectedToolbarOnly Boolean value
21787>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to value
21788>>>>>>>>>    End_Procedure
21789>>>>>>>>>
21789>>>>>>>>>    Procedure ComSetIconSize Boolean llLargeIcons Integer llcx Integer llcy
21791>>>>>>>>>        Handle hDispatchDriver
21791>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21792>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
21793>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLargeIcons
21794>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
21795>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
21796>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
21797>>>>>>>>>    End_Procedure
21798>>>>>>>>>
21798>>>>>>>>>    Function ComGetIconWidth Boolean llLargeIcons Returns Integer
21800>>>>>>>>>        Handle hDispatchDriver
21800>>>>>>>>>        Integer retVal
21800>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21801>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21802>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLargeIcons
21803>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
21804>>>>>>>>>        Function_Return retVal
21805>>>>>>>>>    End_Function
21806>>>>>>>>>
21806>>>>>>>>>    Function ComGetIconHeight Boolean llLargeIcons Returns Integer
21808>>>>>>>>>        Handle hDispatchDriver
21808>>>>>>>>>        Integer retVal
21808>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21809>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21810>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLargeIcons
21811>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
21812>>>>>>>>>        Function_Return retVal
21813>>>>>>>>>    End_Function
21814>>>>>>>>>
21814>>>>>>>>>    Procedure ComAddHiddenCommand Integer llCommand
21816>>>>>>>>>        Handle hDispatchDriver
21816>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21817>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21818>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21819>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 10 OLE_VT_VOID
21820>>>>>>>>>    End_Procedure
21821>>>>>>>>>
21821>>>>>>>>>    Procedure ComSetPopupIconSize Integer llcx Integer llcy
21823>>>>>>>>>        Handle hDispatchDriver
21823>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21824>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21825>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
21826>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
21827>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
21828>>>>>>>>>    End_Procedure
21829>>>>>>>>>
21829>>>>>>>>>    Function ComGetPopupIconWidth Returns Integer
21831>>>>>>>>>        Handle hDispatchDriver
21831>>>>>>>>>        Integer retVal
21831>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21832>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 41 OLE_VT_I4 to retVal
21833>>>>>>>>>        Function_Return retVal
21834>>>>>>>>>    End_Function
21835>>>>>>>>>
21835>>>>>>>>>    Function ComGetPopupIconHeight Returns Integer
21837>>>>>>>>>        Handle hDispatchDriver
21837>>>>>>>>>        Integer retVal
21837>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21838>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 42 OLE_VT_I4 to retVal
21839>>>>>>>>>        Function_Return retVal
21840>>>>>>>>>    End_Function
21841>>>>>>>>>
21841>>>>>>>>>    Procedure ComRemoveHiddenCommands
21843>>>>>>>>>        Handle hDispatchDriver
21843>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21844>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 36 OLE_VT_VOID
21845>>>>>>>>>    End_Procedure
21846>>>>>>>>>
21846>>>>>>>>>    Procedure ComSetDPIScallingOptions Boolean llbScaleGalleryItems Boolean llbScaleToolbarIcons
21848>>>>>>>>>        Handle hDispatchDriver
21848>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21849>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21850>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llbScaleGalleryItems
21851>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llbScaleToolbarIcons
21852>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 39 OLE_VT_VOID
21853>>>>>>>>>    End_Procedure
21854>>>>>>>>>
21854>>>>>>>>>    Function ComIsDPIScallingEnabled Returns Boolean
21856>>>>>>>>>        Handle hDispatchDriver
21856>>>>>>>>>        Boolean retVal
21856>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21857>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_BOOL to retVal
21858>>>>>>>>>        Function_Return retVal
21859>>>>>>>>>    End_Function
21860>>>>>>>>>End_Class
21861>>>>>>>>>
21861>>>>>>>>>// CoClass
21861>>>>>>>>>// CLSID: {C0DE2200-A0EA-4D8E-8A73-49D5D084F527}
21861>>>>>>>>>Class cCJCommandBarsOptions is a cComAutomationObject
21862>>>>>>>>>    Import_Class_Protocol cCJICommandBarsOptions
21863>>>>>>>>>
21863>>>>>>>>>    Procedure Construct_Object
21865>>>>>>>>>        Forward Send Construct_Object
21867>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21868>>>>>>>>>    End_Procedure
21869>>>>>>>>>End_Class
21870>>>>>>>>>
21870>>>>>>>>>// CLSID: {C0DE2200-0690-4528-8656-E33E61F39377}
21870>>>>>>>>>Class cCJICommandBar is a Mixin
21871>>>>>>>>>
21871>>>>>>>>>    Function ComTitle Returns String
21873>>>>>>>>>        String retVal
21873>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
21874>>>>>>>>>        Function_Return retVal
21875>>>>>>>>>    End_Function
21876>>>>>>>>>
21876>>>>>>>>>    Procedure Set ComTitle String value
21878>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
21879>>>>>>>>>    End_Procedure
21880>>>>>>>>>
21880>>>>>>>>>    Function ComVisible Returns Boolean
21882>>>>>>>>>        Boolean retVal
21882>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
21883>>>>>>>>>        Function_Return retVal
21884>>>>>>>>>    End_Function
21885>>>>>>>>>
21885>>>>>>>>>    Procedure Set ComVisible Boolean value
21887>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
21888>>>>>>>>>    End_Procedure
21889>>>>>>>>>
21889>>>>>>>>>    Function ComPosition Returns XTPBarPosition
21891>>>>>>>>>        XTPBarPosition retVal
21891>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
21892>>>>>>>>>        Function_Return retVal
21893>>>>>>>>>    End_Function
21894>>>>>>>>>
21894>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
21896>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
21897>>>>>>>>>    End_Procedure
21898>>>>>>>>>
21898>>>>>>>>>    Function ComBarID Returns Integer
21900>>>>>>>>>        Integer retVal
21900>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
21901>>>>>>>>>        Function_Return retVal
21902>>>>>>>>>    End_Function
21903>>>>>>>>>
21903>>>>>>>>>    Procedure Set ComBarID Integer value
21905>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
21906>>>>>>>>>    End_Procedure
21907>>>>>>>>>
21907>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
21909>>>>>>>>>        Boolean retVal
21909>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
21910>>>>>>>>>        Function_Return retVal
21911>>>>>>>>>    End_Function
21912>>>>>>>>>
21912>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
21914>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
21915>>>>>>>>>    End_Procedure
21916>>>>>>>>>
21916>>>>>>>>>    Function ComWidth Returns Integer
21918>>>>>>>>>        Integer retVal
21918>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
21919>>>>>>>>>        Function_Return retVal
21920>>>>>>>>>    End_Function
21921>>>>>>>>>
21921>>>>>>>>>    Procedure Set ComWidth Integer value
21923>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
21924>>>>>>>>>    End_Procedure
21925>>>>>>>>>
21925>>>>>>>>>    Function ComCloseable Returns Boolean
21927>>>>>>>>>        Boolean retVal
21927>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
21928>>>>>>>>>        Function_Return retVal
21929>>>>>>>>>    End_Function
21930>>>>>>>>>
21930>>>>>>>>>    Procedure Set ComCloseable Boolean value
21932>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
21933>>>>>>>>>    End_Procedure
21934>>>>>>>>>
21934>>>>>>>>>    Function ComEnableAnimation Returns Boolean
21936>>>>>>>>>        Boolean retVal
21936>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
21937>>>>>>>>>        Function_Return retVal
21938>>>>>>>>>    End_Function
21939>>>>>>>>>
21939>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
21941>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
21942>>>>>>>>>    End_Procedure
21943>>>>>>>>>
21943>>>>>>>>>    Function ComShowGripper Returns Boolean
21945>>>>>>>>>        Boolean retVal
21945>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
21946>>>>>>>>>        Function_Return retVal
21947>>>>>>>>>    End_Function
21948>>>>>>>>>
21948>>>>>>>>>    Procedure Set ComShowGripper Boolean value
21950>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
21951>>>>>>>>>    End_Procedure
21952>>>>>>>>>
21952>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
21954>>>>>>>>>        XTPButtonStyle retVal
21954>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
21955>>>>>>>>>        Function_Return retVal
21956>>>>>>>>>    End_Function
21957>>>>>>>>>
21957>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
21959>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
21960>>>>>>>>>    End_Procedure
21961>>>>>>>>>
21961>>>>>>>>>    Function ComCustomizable Returns Boolean
21963>>>>>>>>>        Boolean retVal
21963>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
21964>>>>>>>>>        Function_Return retVal
21965>>>>>>>>>    End_Function
21966>>>>>>>>>
21966>>>>>>>>>    Procedure Set ComCustomizable Boolean value
21968>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
21969>>>>>>>>>    End_Procedure
21970>>>>>>>>>
21970>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
21972>>>>>>>>>        Boolean retVal
21972>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
21973>>>>>>>>>        Function_Return retVal
21974>>>>>>>>>    End_Function
21975>>>>>>>>>
21975>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
21977>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
21978>>>>>>>>>    End_Procedure
21979>>>>>>>>>
21979>>>>>>>>>    Function ComDoubleGripper Returns Boolean
21981>>>>>>>>>        Boolean retVal
21981>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
21982>>>>>>>>>        Function_Return retVal
21983>>>>>>>>>    End_Function
21984>>>>>>>>>
21984>>>>>>>>>    Procedure Set ComDoubleGripper Boolean value
21986>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
21987>>>>>>>>>    End_Procedure
21988>>>>>>>>>
21988>>>>>>>>>    Function ComShowExpandButton Returns Boolean
21990>>>>>>>>>        Boolean retVal
21990>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
21991>>>>>>>>>        Function_Return retVal
21992>>>>>>>>>    End_Function
21993>>>>>>>>>
21993>>>>>>>>>    Procedure Set ComShowExpandButton Boolean value
21995>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
21996>>>>>>>>>    End_Procedure
21997>>>>>>>>>
21997>>>>>>>>>    Function ComSelectedControl Returns Variant
21999>>>>>>>>>        Variant retVal
21999>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
22000>>>>>>>>>        Function_Return retVal
22001>>>>>>>>>    End_Function
22002>>>>>>>>>
22002>>>>>>>>>    Procedure Set ComSelectedControl Variant value
22004>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
22005>>>>>>>>>    End_Procedure
22006>>>>>>>>>
22006>>>>>>>>>    Function ComCustomizeDialogPresent Returns Boolean
22008>>>>>>>>>        Boolean retVal
22008>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to retVal
22009>>>>>>>>>        Function_Return retVal
22010>>>>>>>>>    End_Function
22011>>>>>>>>>
22011>>>>>>>>>    Procedure Set ComCustomizeDialogPresent Boolean value
22013>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to value
22014>>>>>>>>>    End_Procedure
22015>>>>>>>>>
22015>>>>>>>>>    Function ComTextOrientation Returns XTPBarTextOrientation
22017>>>>>>>>>        XTPBarTextOrientation retVal
22017>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_I4 to retVal
22018>>>>>>>>>        Function_Return retVal
22019>>>>>>>>>    End_Function
22020>>>>>>>>>
22020>>>>>>>>>    Procedure Set ComTextOrientation XTPBarTextOrientation value
22022>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_I4 to value
22023>>>>>>>>>    End_Procedure
22024>>>>>>>>>
22024>>>>>>>>>    Function ComType Returns XTPBarType
22026>>>>>>>>>        Handle hDispatchDriver
22026>>>>>>>>>        XTPBarType retVal
22026>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22027>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
22028>>>>>>>>>        Function_Return retVal
22029>>>>>>>>>    End_Function
22030>>>>>>>>>
22030>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
22032>>>>>>>>>        Handle hDispatchDriver
22032>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22033>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22034>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
22035>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
22036>>>>>>>>>    End_Procedure
22037>>>>>>>>>
22037>>>>>>>>>    Function ComBuiltIn Returns Boolean
22039>>>>>>>>>        Handle hDispatchDriver
22039>>>>>>>>>        Boolean retVal
22039>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22040>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
22041>>>>>>>>>        Function_Return retVal
22042>>>>>>>>>    End_Function
22043>>>>>>>>>
22043>>>>>>>>>    Procedure ComDelete
22045>>>>>>>>>        Handle hDispatchDriver
22045>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22046>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
22047>>>>>>>>>    End_Procedure
22048>>>>>>>>>
22048>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
22050>>>>>>>>>        Handle hDispatchDriver
22050>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22051>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22052>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
22053>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
22054>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
22055>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
22056>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
22057>>>>>>>>>    End_Procedure
22058>>>>>>>>>
22058>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
22060>>>>>>>>>        Handle hDispatchDriver
22060>>>>>>>>>        OLE_HANDLE retVal
22060>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22061>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
22062>>>>>>>>>        Function_Return retVal
22063>>>>>>>>>    End_Function
22064>>>>>>>>>
22064>>>>>>>>>    Function ComCommandBars Returns Variant
22066>>>>>>>>>        Handle hDispatchDriver
22066>>>>>>>>>        Variant retVal
22066>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22067>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
22068>>>>>>>>>        Function_Return retVal
22069>>>>>>>>>    End_Function
22070>>>>>>>>>
22070>>>>>>>>>    Function ComControls Returns Variant
22072>>>>>>>>>        Handle hDispatchDriver
22072>>>>>>>>>        Variant retVal
22072>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22073>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
22074>>>>>>>>>        Function_Return retVal
22075>>>>>>>>>    End_Function
22076>>>>>>>>>
22076>>>>>>>>>    Function ComShowPopup Variant llFlags Variant llx Variant lly Returns Integer
22078>>>>>>>>>        Handle hDispatchDriver
22078>>>>>>>>>        Integer retVal
22078>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22079>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
22080>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFlags
22081>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llx
22082>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lly
22083>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_I4 to retVal
22084>>>>>>>>>        Function_Return retVal
22085>>>>>>>>>    End_Function
22086>>>>>>>>>
22086>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
22088>>>>>>>>>        Handle hDispatchDriver
22088>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22089>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22090>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
22091>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
22092>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
22093>>>>>>>>>    End_Procedure
22094>>>>>>>>>
22094>>>>>>>>>    Function ComGetIconWidth Returns Integer
22096>>>>>>>>>        Handle hDispatchDriver
22096>>>>>>>>>        Integer retVal
22096>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22097>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
22098>>>>>>>>>        Function_Return retVal
22099>>>>>>>>>    End_Function
22100>>>>>>>>>
22100>>>>>>>>>    Function ComGetIconHeight Returns Integer
22102>>>>>>>>>        Handle hDispatchDriver
22102>>>>>>>>>        Integer retVal
22102>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22103>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
22104>>>>>>>>>        Function_Return retVal
22105>>>>>>>>>    End_Function
22106>>>>>>>>>
22106>>>>>>>>>    Procedure ComSetTearOffPopup String llCaption Integer llId Integer llWidth
22108>>>>>>>>>        Handle hDispatchDriver
22108>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22109>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
22110>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
22111>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22112>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
22113>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
22114>>>>>>>>>    End_Procedure
22115>>>>>>>>>
22115>>>>>>>>>    Function ComParent Returns Variant
22117>>>>>>>>>        Handle hDispatchDriver
22117>>>>>>>>>        Variant retVal
22117>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22118>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
22119>>>>>>>>>        Function_Return retVal
22120>>>>>>>>>    End_Function
22121>>>>>>>>>
22121>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
22123>>>>>>>>>        Handle hDispatchDriver
22123>>>>>>>>>        Variant retVal
22123>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22124>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22125>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
22126>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
22127>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
22128>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
22129>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
22130>>>>>>>>>        Function_Return retVal
22131>>>>>>>>>    End_Function
22132>>>>>>>>>
22132>>>>>>>>>    Procedure ComSetPopupToolBar Boolean llToolBarType
22134>>>>>>>>>        Handle hDispatchDriver
22134>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22135>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22136>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llToolBarType
22137>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
22138>>>>>>>>>    End_Procedure
22139>>>>>>>>>
22139>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
22141>>>>>>>>>        Handle hDispatchDriver
22141>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22142>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22143>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22144>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22145>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
22146>>>>>>>>>    End_Procedure
22147>>>>>>>>>
22147>>>>>>>>>    Procedure ComModifyStyle XTPCommandBarStyle llRemove XTPCommandBarStyle llAdd
22149>>>>>>>>>        Handle hDispatchDriver
22149>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22150>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22151>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22152>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22153>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
22154>>>>>>>>>    End_Procedure
22155>>>>>>>>>
22155>>>>>>>>>    Procedure ComRedrawBar
22157>>>>>>>>>        Handle hDispatchDriver
22157>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22158>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
22159>>>>>>>>>    End_Procedure
22160>>>>>>>>>
22160>>>>>>>>>    Procedure ComRecalcLayout
22162>>>>>>>>>        Handle hDispatchDriver
22162>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22163>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
22164>>>>>>>>>    End_Procedure
22165>>>>>>>>>
22165>>>>>>>>>    Procedure ComReset
22167>>>>>>>>>        Handle hDispatchDriver
22167>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22168>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
22169>>>>>>>>>    End_Procedure
22170>>>>>>>>>End_Class
22171>>>>>>>>>
22171>>>>>>>>>// CoClass
22171>>>>>>>>>// CLSID: {C0DE2200-231A-4BE6-AA1B-9BA4B04CA048}
22171>>>>>>>>>Class cCJCommandBar is a cComAutomationObject
22172>>>>>>>>>    Import_Class_Protocol cCJICommandBar
22173>>>>>>>>>
22173>>>>>>>>>    Procedure Construct_Object
22175>>>>>>>>>        Forward Send Construct_Object
22177>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22178>>>>>>>>>    End_Procedure
22179>>>>>>>>>End_Class
22180>>>>>>>>>
22180>>>>>>>>>// CLSID: {C0DE2200-E7D2-4506-8D3F-D986E0B345D4}
22180>>>>>>>>>Class cCJIMenuBarMDIMenu is a Mixin
22181>>>>>>>>>
22181>>>>>>>>>    Function ComCaption Returns String
22183>>>>>>>>>        String retVal
22183>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
22184>>>>>>>>>        Function_Return retVal
22185>>>>>>>>>    End_Function
22186>>>>>>>>>
22186>>>>>>>>>    Procedure Set ComCaption String value
22188>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
22189>>>>>>>>>    End_Procedure
22190>>>>>>>>>
22190>>>>>>>>>    Function ComDescription Returns String
22192>>>>>>>>>        String retVal
22192>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
22193>>>>>>>>>        Function_Return retVal
22194>>>>>>>>>    End_Function
22195>>>>>>>>>
22195>>>>>>>>>    Procedure Set ComDescription String value
22197>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
22198>>>>>>>>>    End_Procedure
22199>>>>>>>>>
22199>>>>>>>>>    Function ComId Returns Integer
22201>>>>>>>>>        Handle hDispatchDriver
22201>>>>>>>>>        Integer retVal
22201>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22202>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
22203>>>>>>>>>        Function_Return retVal
22204>>>>>>>>>    End_Function
22205>>>>>>>>>
22205>>>>>>>>>    Function ComControls Returns Variant
22207>>>>>>>>>        Handle hDispatchDriver
22207>>>>>>>>>        Variant retVal
22207>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22208>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
22209>>>>>>>>>        Function_Return retVal
22210>>>>>>>>>    End_Function
22211>>>>>>>>>End_Class
22212>>>>>>>>>
22212>>>>>>>>>// CoClass
22212>>>>>>>>>// CLSID: {C0DE2200-B93E-44AD-B277-1B0F84A20CBA}
22212>>>>>>>>>Class cCJComMenuBarMDIMenu is a cComAutomationObject
22213>>>>>>>>>    Import_Class_Protocol cCJIMenuBarMDIMenu
22214>>>>>>>>>
22214>>>>>>>>>    Procedure Construct_Object
22216>>>>>>>>>        Forward Send Construct_Object
22218>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22219>>>>>>>>>    End_Procedure
22220>>>>>>>>>End_Class
22221>>>>>>>>>
22221>>>>>>>>>// CLSID: {C0DE2200-3D4B-41E3-B659-0F8E354111DF}
22221>>>>>>>>>Class cCJIMenuBarMDIMenus is a Mixin
22222>>>>>>>>>
22222>>>>>>>>>    // Gets the number of menus in the collection.
22222>>>>>>>>>    Function ComCount Returns Integer
22224>>>>>>>>>        Handle hDispatchDriver
22224>>>>>>>>>        Integer retVal
22224>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22225>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
22226>>>>>>>>>        Function_Return retVal
22227>>>>>>>>>    End_Function
22228>>>>>>>>>
22228>>>>>>>>>    // Gets an item from the collection by its Id.
22228>>>>>>>>>    Function ComItem Integer llId Returns Variant
22230>>>>>>>>>        Handle hDispatchDriver
22230>>>>>>>>>        Variant retVal
22230>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22231>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22232>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22233>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
22234>>>>>>>>>        Function_Return retVal
22235>>>>>>>>>    End_Function
22236>>>>>>>>>
22236>>>>>>>>>    Function Com_NewEnum Returns Variant
22238>>>>>>>>>        Handle hDispatchDriver
22238>>>>>>>>>        Variant retVal
22238>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22239>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
22240>>>>>>>>>        Function_Return retVal
22241>>>>>>>>>    End_Function
22242>>>>>>>>>
22242>>>>>>>>>    Function ComAdd Integer llId String llCaption String llDescription Returns Variant
22244>>>>>>>>>        Handle hDispatchDriver
22244>>>>>>>>>        Variant retVal
22244>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22245>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
22246>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22247>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
22248>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llDescription
22249>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
22250>>>>>>>>>        Function_Return retVal
22251>>>>>>>>>    End_Function
22252>>>>>>>>>
22252>>>>>>>>>    // Deletes all of the menus from the collection
22252>>>>>>>>>    Procedure ComDeleteAll
22254>>>>>>>>>        Handle hDispatchDriver
22254>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22255>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
22256>>>>>>>>>    End_Procedure
22257>>>>>>>>>End_Class
22258>>>>>>>>>
22258>>>>>>>>>// CoClass
22258>>>>>>>>>// CLSID: {C0DE2200-84B8-4930-8B30-5E56EC7F9860}
22258>>>>>>>>>Class cCJComMenuBarMDIMenus is a cComAutomationObject
22259>>>>>>>>>    Import_Class_Protocol cCJIMenuBarMDIMenus
22260>>>>>>>>>
22260>>>>>>>>>    Procedure Construct_Object
22262>>>>>>>>>        Forward Send Construct_Object
22264>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22265>>>>>>>>>    End_Procedure
22266>>>>>>>>>End_Class
22267>>>>>>>>>
22267>>>>>>>>>// CLSID: {C0DE2200-FED3-4FBC-B204-59C231E6092B}
22267>>>>>>>>>Class cCJIMenuBar is a Mixin
22268>>>>>>>>>
22268>>>>>>>>>    Function ComTitle Returns String
22270>>>>>>>>>        String retVal
22270>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
22271>>>>>>>>>        Function_Return retVal
22272>>>>>>>>>    End_Function
22273>>>>>>>>>
22273>>>>>>>>>    Procedure Set ComTitle String value
22275>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
22276>>>>>>>>>    End_Procedure
22277>>>>>>>>>
22277>>>>>>>>>    Function ComVisible Returns Boolean
22279>>>>>>>>>        Boolean retVal
22279>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
22280>>>>>>>>>        Function_Return retVal
22281>>>>>>>>>    End_Function
22282>>>>>>>>>
22282>>>>>>>>>    Procedure Set ComVisible Boolean value
22284>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
22285>>>>>>>>>    End_Procedure
22286>>>>>>>>>
22286>>>>>>>>>    Function ComPosition Returns XTPBarPosition
22288>>>>>>>>>        XTPBarPosition retVal
22288>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
22289>>>>>>>>>        Function_Return retVal
22290>>>>>>>>>    End_Function
22291>>>>>>>>>
22291>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
22293>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
22294>>>>>>>>>    End_Procedure
22295>>>>>>>>>
22295>>>>>>>>>    Function ComBarID Returns Integer
22297>>>>>>>>>        Integer retVal
22297>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
22298>>>>>>>>>        Function_Return retVal
22299>>>>>>>>>    End_Function
22300>>>>>>>>>
22300>>>>>>>>>    Procedure Set ComBarID Integer value
22302>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
22303>>>>>>>>>    End_Procedure
22304>>>>>>>>>
22304>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
22306>>>>>>>>>        Boolean retVal
22306>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
22307>>>>>>>>>        Function_Return retVal
22308>>>>>>>>>    End_Function
22309>>>>>>>>>
22309>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
22311>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
22312>>>>>>>>>    End_Procedure
22313>>>>>>>>>
22313>>>>>>>>>    Function ComWidth Returns Integer
22315>>>>>>>>>        Integer retVal
22315>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
22316>>>>>>>>>        Function_Return retVal
22317>>>>>>>>>    End_Function
22318>>>>>>>>>
22318>>>>>>>>>    Procedure Set ComWidth Integer value
22320>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
22321>>>>>>>>>    End_Procedure
22322>>>>>>>>>
22322>>>>>>>>>    Function ComCloseable Returns Boolean
22324>>>>>>>>>        Boolean retVal
22324>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
22325>>>>>>>>>        Function_Return retVal
22326>>>>>>>>>    End_Function
22327>>>>>>>>>
22327>>>>>>>>>    Procedure Set ComCloseable Boolean value
22329>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
22330>>>>>>>>>    End_Procedure
22331>>>>>>>>>
22331>>>>>>>>>    Function ComEnableAnimation Returns Boolean
22333>>>>>>>>>        Boolean retVal
22333>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
22334>>>>>>>>>        Function_Return retVal
22335>>>>>>>>>    End_Function
22336>>>>>>>>>
22336>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
22338>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
22339>>>>>>>>>    End_Procedure
22340>>>>>>>>>
22340>>>>>>>>>    Function ComShowGripper Returns Boolean
22342>>>>>>>>>        Boolean retVal
22342>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
22343>>>>>>>>>        Function_Return retVal
22344>>>>>>>>>    End_Function
22345>>>>>>>>>
22345>>>>>>>>>    Procedure Set ComShowGripper Boolean value
22347>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
22348>>>>>>>>>    End_Procedure
22349>>>>>>>>>
22349>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
22351>>>>>>>>>        XTPButtonStyle retVal
22351>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
22352>>>>>>>>>        Function_Return retVal
22353>>>>>>>>>    End_Function
22354>>>>>>>>>
22354>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
22356>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
22357>>>>>>>>>    End_Procedure
22358>>>>>>>>>
22358>>>>>>>>>    Function ComCustomizable Returns Boolean
22360>>>>>>>>>        Boolean retVal
22360>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
22361>>>>>>>>>        Function_Return retVal
22362>>>>>>>>>    End_Function
22363>>>>>>>>>
22363>>>>>>>>>    Procedure Set ComCustomizable Boolean value
22365>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
22366>>>>>>>>>    End_Procedure
22367>>>>>>>>>
22367>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
22369>>>>>>>>>        Boolean retVal
22369>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
22370>>>>>>>>>        Function_Return retVal
22371>>>>>>>>>    End_Function
22372>>>>>>>>>
22372>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
22374>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
22375>>>>>>>>>    End_Procedure
22376>>>>>>>>>
22376>>>>>>>>>    Function ComShowExpandButton Returns Boolean
22378>>>>>>>>>        Boolean retVal
22378>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
22379>>>>>>>>>        Function_Return retVal
22380>>>>>>>>>    End_Function
22381>>>>>>>>>
22381>>>>>>>>>    Procedure Set ComShowExpandButton Boolean value
22383>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
22384>>>>>>>>>    End_Procedure
22385>>>>>>>>>
22385>>>>>>>>>    Function ComSelectedControl Returns Variant
22387>>>>>>>>>        Variant retVal
22387>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
22388>>>>>>>>>        Function_Return retVal
22389>>>>>>>>>    End_Function
22390>>>>>>>>>
22390>>>>>>>>>    Procedure Set ComSelectedControl Variant value
22392>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
22393>>>>>>>>>    End_Procedure
22394>>>>>>>>>
22394>>>>>>>>>    Function ComCustomizeDialogPresent Returns Boolean
22396>>>>>>>>>        Boolean retVal
22396>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to retVal
22397>>>>>>>>>        Function_Return retVal
22398>>>>>>>>>    End_Function
22399>>>>>>>>>
22399>>>>>>>>>    Procedure Set ComCustomizeDialogPresent Boolean value
22401>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to value
22402>>>>>>>>>    End_Procedure
22403>>>>>>>>>
22403>>>>>>>>>    Function ComType Returns XTPBarType
22405>>>>>>>>>        Handle hDispatchDriver
22405>>>>>>>>>        XTPBarType retVal
22405>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22406>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
22407>>>>>>>>>        Function_Return retVal
22408>>>>>>>>>    End_Function
22409>>>>>>>>>
22409>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
22411>>>>>>>>>        Handle hDispatchDriver
22411>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22412>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22413>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
22414>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
22415>>>>>>>>>    End_Procedure
22416>>>>>>>>>
22416>>>>>>>>>    Function ComBuiltIn Returns Boolean
22418>>>>>>>>>        Handle hDispatchDriver
22418>>>>>>>>>        Boolean retVal
22418>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22419>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
22420>>>>>>>>>        Function_Return retVal
22421>>>>>>>>>    End_Function
22422>>>>>>>>>
22422>>>>>>>>>    Procedure ComDelete
22424>>>>>>>>>        Handle hDispatchDriver
22424>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22425>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
22426>>>>>>>>>    End_Procedure
22427>>>>>>>>>
22427>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
22429>>>>>>>>>        Handle hDispatchDriver
22429>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22430>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22431>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
22432>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
22433>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
22434>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
22435>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
22436>>>>>>>>>    End_Procedure
22437>>>>>>>>>
22437>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
22439>>>>>>>>>        Handle hDispatchDriver
22439>>>>>>>>>        OLE_HANDLE retVal
22439>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22440>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
22441>>>>>>>>>        Function_Return retVal
22442>>>>>>>>>    End_Function
22443>>>>>>>>>
22443>>>>>>>>>    Function ComCommandBars Returns Variant
22445>>>>>>>>>        Handle hDispatchDriver
22445>>>>>>>>>        Variant retVal
22445>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22446>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
22447>>>>>>>>>        Function_Return retVal
22448>>>>>>>>>    End_Function
22449>>>>>>>>>
22449>>>>>>>>>    Function ComControls Returns Variant
22451>>>>>>>>>        Handle hDispatchDriver
22451>>>>>>>>>        Variant retVal
22451>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22452>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
22453>>>>>>>>>        Function_Return retVal
22454>>>>>>>>>    End_Function
22455>>>>>>>>>
22455>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
22457>>>>>>>>>        Handle hDispatchDriver
22457>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22458>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22459>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
22460>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
22461>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
22462>>>>>>>>>    End_Procedure
22463>>>>>>>>>
22463>>>>>>>>>    Function ComGetIconWidth Returns Integer
22465>>>>>>>>>        Handle hDispatchDriver
22465>>>>>>>>>        Integer retVal
22465>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22466>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
22467>>>>>>>>>        Function_Return retVal
22468>>>>>>>>>    End_Function
22469>>>>>>>>>
22469>>>>>>>>>    Function ComGetIconHeight Returns Integer
22471>>>>>>>>>        Handle hDispatchDriver
22471>>>>>>>>>        Integer retVal
22471>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22472>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
22473>>>>>>>>>        Function_Return retVal
22474>>>>>>>>>    End_Function
22475>>>>>>>>>
22475>>>>>>>>>    Function ComParent Returns Variant
22477>>>>>>>>>        Handle hDispatchDriver
22477>>>>>>>>>        Variant retVal
22477>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22478>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
22479>>>>>>>>>        Function_Return retVal
22480>>>>>>>>>    End_Function
22481>>>>>>>>>
22481>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
22483>>>>>>>>>        Handle hDispatchDriver
22483>>>>>>>>>        Variant retVal
22483>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22484>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22485>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
22486>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
22487>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
22488>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
22489>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
22490>>>>>>>>>        Function_Return retVal
22491>>>>>>>>>    End_Function
22492>>>>>>>>>
22492>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
22494>>>>>>>>>        Handle hDispatchDriver
22494>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22495>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22496>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22497>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22498>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
22499>>>>>>>>>    End_Procedure
22500>>>>>>>>>
22500>>>>>>>>>    Procedure ComModifyStyle XTPCommandBarStyle llRemove XTPCommandBarStyle llAdd
22502>>>>>>>>>        Handle hDispatchDriver
22502>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22503>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22504>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22505>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22506>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
22507>>>>>>>>>    End_Procedure
22508>>>>>>>>>
22508>>>>>>>>>    Procedure ComRedrawBar
22510>>>>>>>>>        Handle hDispatchDriver
22510>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22511>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
22512>>>>>>>>>    End_Procedure
22513>>>>>>>>>
22513>>>>>>>>>    Procedure ComRecalcLayout
22515>>>>>>>>>        Handle hDispatchDriver
22515>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22516>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
22517>>>>>>>>>    End_Procedure
22518>>>>>>>>>
22518>>>>>>>>>    Procedure ComReset
22520>>>>>>>>>        Handle hDispatchDriver
22520>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22521>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
22522>>>>>>>>>    End_Procedure
22523>>>>>>>>>
22523>>>>>>>>>    Function ComMDIMenus Returns Variant
22525>>>>>>>>>        Handle hDispatchDriver
22525>>>>>>>>>        Variant retVal
22525>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22526>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 130 OLE_VT_DISPATCH to retVal
22527>>>>>>>>>        Function_Return retVal
22528>>>>>>>>>    End_Function
22529>>>>>>>>>
22529>>>>>>>>>    Procedure ComSwitchMDIMenu Integer llId
22531>>>>>>>>>        Handle hDispatchDriver
22531>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22532>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22533>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22534>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 131 OLE_VT_VOID
22535>>>>>>>>>    End_Procedure
22536>>>>>>>>>End_Class
22537>>>>>>>>>
22537>>>>>>>>>// CoClass
22537>>>>>>>>>// CLSID: {C0DE2200-603B-4AB7-B560-A2E43ADB22FC}
22537>>>>>>>>>Class cCJComMenuBar is a cComAutomationObject
22538>>>>>>>>>    Import_Class_Protocol cCJIMenuBar
22539>>>>>>>>>
22539>>>>>>>>>    Procedure Construct_Object
22541>>>>>>>>>        Forward Send Construct_Object
22543>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22544>>>>>>>>>    End_Procedure
22545>>>>>>>>>End_Class
22546>>>>>>>>>
22546>>>>>>>>>// CLSID: {C0DE2200-9D11-4373-B444-BC1F646D2B4D}
22546>>>>>>>>>Class cCJICommandBarsContextMenus is a Mixin
22547>>>>>>>>>
22547>>>>>>>>>    // Gets the number of menus in the collection.
22547>>>>>>>>>    Function ComCount Returns Integer
22549>>>>>>>>>        Handle hDispatchDriver
22549>>>>>>>>>        Integer retVal
22549>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22550>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
22551>>>>>>>>>        Function_Return retVal
22552>>>>>>>>>    End_Function
22553>>>>>>>>>
22553>>>>>>>>>    // Gets an item from the collection by its index.
22553>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
22555>>>>>>>>>        Handle hDispatchDriver
22555>>>>>>>>>        Variant retVal
22555>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22556>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22557>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22558>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
22559>>>>>>>>>        Function_Return retVal
22560>>>>>>>>>    End_Function
22561>>>>>>>>>
22561>>>>>>>>>    Function Com_NewEnum Returns Variant
22563>>>>>>>>>        Handle hDispatchDriver
22563>>>>>>>>>        Variant retVal
22563>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22564>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
22565>>>>>>>>>        Function_Return retVal
22566>>>>>>>>>    End_Function
22567>>>>>>>>>
22567>>>>>>>>>    // Adds a new command bar to the collection.
22567>>>>>>>>>    Function ComAdd Integer llId String llCaption Returns Variant
22569>>>>>>>>>        Handle hDispatchDriver
22569>>>>>>>>>        Variant retVal
22569>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22570>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22571>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22572>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
22573>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
22574>>>>>>>>>        Function_Return retVal
22575>>>>>>>>>    End_Function
22576>>>>>>>>>
22576>>>>>>>>>    // Finds the specified menu
22576>>>>>>>>>    Function ComFind Integer llId Returns Variant
22578>>>>>>>>>        Handle hDispatchDriver
22578>>>>>>>>>        Variant retVal
22578>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22579>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22580>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22581>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
22582>>>>>>>>>        Function_Return retVal
22583>>>>>>>>>    End_Function
22584>>>>>>>>>
22584>>>>>>>>>    // Deletes all of the menus from the collection
22584>>>>>>>>>    Procedure ComDeleteAll
22586>>>>>>>>>        Handle hDispatchDriver
22586>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22587>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
22588>>>>>>>>>    End_Procedure
22589>>>>>>>>>
22589>>>>>>>>>    // Adds a new command bar to the collection.
22589>>>>>>>>>    Procedure ComAddPopup Variant llPopupBar
22591>>>>>>>>>        Handle hDispatchDriver
22591>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22592>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22593>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llPopupBar
22594>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
22595>>>>>>>>>    End_Procedure
22596>>>>>>>>>End_Class
22597>>>>>>>>>
22597>>>>>>>>>// CoClass
22597>>>>>>>>>// CLSID: {C0DE2200-E6F6-4FC8-8273-AD15CCF8D293}
22597>>>>>>>>>Class cCJCommandBarsContextMenus is a cComAutomationObject
22598>>>>>>>>>    Import_Class_Protocol cCJICommandBarsContextMenus
22599>>>>>>>>>
22599>>>>>>>>>    Procedure Construct_Object
22601>>>>>>>>>        Forward Send Construct_Object
22603>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22604>>>>>>>>>    End_Procedure
22605>>>>>>>>>End_Class
22606>>>>>>>>>
22606>>>>>>>>>// CLSID: {C0DE2200-37BE-497E-A56D-D0CBDF0B3F97}
22606>>>>>>>>>Class cCJITabToolBar is a Mixin
22607>>>>>>>>>
22607>>>>>>>>>    Function ComTitle Returns String
22609>>>>>>>>>        String retVal
22609>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
22610>>>>>>>>>        Function_Return retVal
22611>>>>>>>>>    End_Function
22612>>>>>>>>>
22612>>>>>>>>>    Procedure Set ComTitle String value
22614>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
22615>>>>>>>>>    End_Procedure
22616>>>>>>>>>
22616>>>>>>>>>    Function ComVisible Returns Boolean
22618>>>>>>>>>        Boolean retVal
22618>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
22619>>>>>>>>>        Function_Return retVal
22620>>>>>>>>>    End_Function
22621>>>>>>>>>
22621>>>>>>>>>    Procedure Set ComVisible Boolean value
22623>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
22624>>>>>>>>>    End_Procedure
22625>>>>>>>>>
22625>>>>>>>>>    Function ComPosition Returns XTPBarPosition
22627>>>>>>>>>        XTPBarPosition retVal
22627>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
22628>>>>>>>>>        Function_Return retVal
22629>>>>>>>>>    End_Function
22630>>>>>>>>>
22630>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
22632>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
22633>>>>>>>>>    End_Procedure
22634>>>>>>>>>
22634>>>>>>>>>    Function ComBarID Returns Integer
22636>>>>>>>>>        Integer retVal
22636>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
22637>>>>>>>>>        Function_Return retVal
22638>>>>>>>>>    End_Function
22639>>>>>>>>>
22639>>>>>>>>>    Procedure Set ComBarID Integer value
22641>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
22642>>>>>>>>>    End_Procedure
22643>>>>>>>>>
22643>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
22645>>>>>>>>>        Boolean retVal
22645>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
22646>>>>>>>>>        Function_Return retVal
22647>>>>>>>>>    End_Function
22648>>>>>>>>>
22648>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
22650>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
22651>>>>>>>>>    End_Procedure
22652>>>>>>>>>
22652>>>>>>>>>    Function ComWidth Returns Integer
22654>>>>>>>>>        Integer retVal
22654>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
22655>>>>>>>>>        Function_Return retVal
22656>>>>>>>>>    End_Function
22657>>>>>>>>>
22657>>>>>>>>>    Procedure Set ComWidth Integer value
22659>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
22660>>>>>>>>>    End_Procedure
22661>>>>>>>>>
22661>>>>>>>>>    Function ComCloseable Returns Boolean
22663>>>>>>>>>        Boolean retVal
22663>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
22664>>>>>>>>>        Function_Return retVal
22665>>>>>>>>>    End_Function
22666>>>>>>>>>
22666>>>>>>>>>    Procedure Set ComCloseable Boolean value
22668>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
22669>>>>>>>>>    End_Procedure
22670>>>>>>>>>
22670>>>>>>>>>    Function ComEnableAnimation Returns Boolean
22672>>>>>>>>>        Boolean retVal
22672>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
22673>>>>>>>>>        Function_Return retVal
22674>>>>>>>>>    End_Function
22675>>>>>>>>>
22675>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
22677>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
22678>>>>>>>>>    End_Procedure
22679>>>>>>>>>
22679>>>>>>>>>    Function ComShowGripper Returns Boolean
22681>>>>>>>>>        Boolean retVal
22681>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
22682>>>>>>>>>        Function_Return retVal
22683>>>>>>>>>    End_Function
22684>>>>>>>>>
22684>>>>>>>>>    Procedure Set ComShowGripper Boolean value
22686>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
22687>>>>>>>>>    End_Procedure
22688>>>>>>>>>
22688>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
22690>>>>>>>>>        XTPButtonStyle retVal
22690>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
22691>>>>>>>>>        Function_Return retVal
22692>>>>>>>>>    End_Function
22693>>>>>>>>>
22693>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
22695>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
22696>>>>>>>>>    End_Procedure
22697>>>>>>>>>
22697>>>>>>>>>    Function ComCustomizable Returns Boolean
22699>>>>>>>>>        Boolean retVal
22699>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
22700>>>>>>>>>        Function_Return retVal
22701>>>>>>>>>    End_Function
22702>>>>>>>>>
22702>>>>>>>>>    Procedure Set ComCustomizable Boolean value
22704>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
22705>>>>>>>>>    End_Procedure
22706>>>>>>>>>
22706>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
22708>>>>>>>>>        Boolean retVal
22708>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
22709>>>>>>>>>        Function_Return retVal
22710>>>>>>>>>    End_Function
22711>>>>>>>>>
22711>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
22713>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
22714>>>>>>>>>    End_Procedure
22715>>>>>>>>>
22715>>>>>>>>>    Function ComDoubleGripper Returns Boolean
22717>>>>>>>>>        Boolean retVal
22717>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
22718>>>>>>>>>        Function_Return retVal
22719>>>>>>>>>    End_Function
22720>>>>>>>>>
22720>>>>>>>>>    Procedure Set ComDoubleGripper Boolean value
22722>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
22723>>>>>>>>>    End_Procedure
22724>>>>>>>>>
22724>>>>>>>>>    Function ComShowExpandButton Returns Boolean
22726>>>>>>>>>        Boolean retVal
22726>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
22727>>>>>>>>>        Function_Return retVal
22728>>>>>>>>>    End_Function
22729>>>>>>>>>
22729>>>>>>>>>    Procedure Set ComShowExpandButton Boolean value
22731>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
22732>>>>>>>>>    End_Procedure
22733>>>>>>>>>
22733>>>>>>>>>    Function ComSelectedControl Returns Variant
22735>>>>>>>>>        Variant retVal
22735>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
22736>>>>>>>>>        Function_Return retVal
22737>>>>>>>>>    End_Function
22738>>>>>>>>>
22738>>>>>>>>>    Procedure Set ComSelectedControl Variant value
22740>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
22741>>>>>>>>>    End_Procedure
22742>>>>>>>>>
22742>>>>>>>>>    Function ComCustomizeDialogPresent Returns Boolean
22744>>>>>>>>>        Boolean retVal
22744>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to retVal
22745>>>>>>>>>        Function_Return retVal
22746>>>>>>>>>    End_Function
22747>>>>>>>>>
22747>>>>>>>>>    Procedure Set ComCustomizeDialogPresent Boolean value
22749>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to value
22750>>>>>>>>>    End_Procedure
22751>>>>>>>>>
22751>>>>>>>>>    Function ComMinimumWidth Returns Integer
22753>>>>>>>>>        Integer retVal
22753>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 104 OLE_VT_I4 to retVal
22754>>>>>>>>>        Function_Return retVal
22755>>>>>>>>>    End_Function
22756>>>>>>>>>
22756>>>>>>>>>    Procedure Set ComMinimumWidth Integer value
22758>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 104 OLE_VT_I4 to value
22759>>>>>>>>>    End_Procedure
22760>>>>>>>>>
22760>>>>>>>>>    Function ComAllowReorder Returns Boolean
22762>>>>>>>>>        Boolean retVal
22762>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_BOOL to retVal
22763>>>>>>>>>        Function_Return retVal
22764>>>>>>>>>    End_Function
22765>>>>>>>>>
22765>>>>>>>>>    Procedure Set ComAllowReorder Boolean value
22767>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_BOOL to value
22768>>>>>>>>>    End_Procedure
22769>>>>>>>>>
22769>>>>>>>>>    Function ComType Returns XTPBarType
22771>>>>>>>>>        Handle hDispatchDriver
22771>>>>>>>>>        XTPBarType retVal
22771>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22772>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
22773>>>>>>>>>        Function_Return retVal
22774>>>>>>>>>    End_Function
22775>>>>>>>>>
22775>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
22777>>>>>>>>>        Handle hDispatchDriver
22777>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22778>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22779>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
22780>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
22781>>>>>>>>>    End_Procedure
22782>>>>>>>>>
22782>>>>>>>>>    Function ComBuiltIn Returns Boolean
22784>>>>>>>>>        Handle hDispatchDriver
22784>>>>>>>>>        Boolean retVal
22784>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22785>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
22786>>>>>>>>>        Function_Return retVal
22787>>>>>>>>>    End_Function
22788>>>>>>>>>
22788>>>>>>>>>    Procedure ComDelete
22790>>>>>>>>>        Handle hDispatchDriver
22790>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22791>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
22792>>>>>>>>>    End_Procedure
22793>>>>>>>>>
22793>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
22795>>>>>>>>>        Handle hDispatchDriver
22795>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22796>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22797>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
22798>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
22799>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
22800>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
22801>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
22802>>>>>>>>>    End_Procedure
22803>>>>>>>>>
22803>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
22805>>>>>>>>>        Handle hDispatchDriver
22805>>>>>>>>>        OLE_HANDLE retVal
22805>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22806>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
22807>>>>>>>>>        Function_Return retVal
22808>>>>>>>>>    End_Function
22809>>>>>>>>>
22809>>>>>>>>>    Function ComCommandBars Returns Variant
22811>>>>>>>>>        Handle hDispatchDriver
22811>>>>>>>>>        Variant retVal
22811>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22812>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
22813>>>>>>>>>        Function_Return retVal
22814>>>>>>>>>    End_Function
22815>>>>>>>>>
22815>>>>>>>>>    Function ComControls Returns Variant
22817>>>>>>>>>        Handle hDispatchDriver
22817>>>>>>>>>        Variant retVal
22817>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22818>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
22819>>>>>>>>>        Function_Return retVal
22820>>>>>>>>>    End_Function
22821>>>>>>>>>
22821>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
22823>>>>>>>>>        Handle hDispatchDriver
22823>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22824>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22825>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
22826>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
22827>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
22828>>>>>>>>>    End_Procedure
22829>>>>>>>>>
22829>>>>>>>>>    Function ComGetIconWidth Returns Integer
22831>>>>>>>>>        Handle hDispatchDriver
22831>>>>>>>>>        Integer retVal
22831>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22832>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
22833>>>>>>>>>        Function_Return retVal
22834>>>>>>>>>    End_Function
22835>>>>>>>>>
22835>>>>>>>>>    Function ComGetIconHeight Returns Integer
22837>>>>>>>>>        Handle hDispatchDriver
22837>>>>>>>>>        Integer retVal
22837>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22838>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
22839>>>>>>>>>        Function_Return retVal
22840>>>>>>>>>    End_Function
22841>>>>>>>>>
22841>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
22843>>>>>>>>>        Handle hDispatchDriver
22843>>>>>>>>>        Variant retVal
22843>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22844>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22845>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
22846>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
22847>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
22848>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
22849>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
22850>>>>>>>>>        Function_Return retVal
22851>>>>>>>>>    End_Function
22852>>>>>>>>>
22852>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
22854>>>>>>>>>        Handle hDispatchDriver
22854>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22855>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22856>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22857>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22858>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
22859>>>>>>>>>    End_Procedure
22860>>>>>>>>>
22860>>>>>>>>>    Procedure ComModifyStyle XTPCommandBarStyle llRemove XTPCommandBarStyle llAdd
22862>>>>>>>>>        Handle hDispatchDriver
22862>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22863>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22864>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22865>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22866>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
22867>>>>>>>>>    End_Procedure
22868>>>>>>>>>
22868>>>>>>>>>    Procedure ComRedrawBar
22870>>>>>>>>>        Handle hDispatchDriver
22870>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22871>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
22872>>>>>>>>>    End_Procedure
22873>>>>>>>>>
22873>>>>>>>>>    Procedure ComRecalcLayout
22875>>>>>>>>>        Handle hDispatchDriver
22875>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22876>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
22877>>>>>>>>>    End_Procedure
22878>>>>>>>>>
22878>>>>>>>>>    Procedure ComReset
22880>>>>>>>>>        Handle hDispatchDriver
22880>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22881>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
22882>>>>>>>>>    End_Procedure
22883>>>>>>>>>
22883>>>>>>>>>    Function ComInsertCategory Integer llIndex String llCategory Returns Variant
22885>>>>>>>>>        Handle hDispatchDriver
22885>>>>>>>>>        Variant retVal
22885>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22886>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22887>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22888>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCategory
22889>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
22890>>>>>>>>>        Function_Return retVal
22891>>>>>>>>>    End_Function
22892>>>>>>>>>
22892>>>>>>>>>    Function ComCategoryCount Returns Integer
22894>>>>>>>>>        Handle hDispatchDriver
22894>>>>>>>>>        Integer retVal
22894>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22895>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
22896>>>>>>>>>        Function_Return retVal
22897>>>>>>>>>    End_Function
22898>>>>>>>>>
22898>>>>>>>>>    Function ComCategory Integer llIndex Returns Variant
22900>>>>>>>>>        Handle hDispatchDriver
22900>>>>>>>>>        Variant retVal
22900>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22901>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22902>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22903>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
22904>>>>>>>>>        Function_Return retVal
22905>>>>>>>>>    End_Function
22906>>>>>>>>>
22906>>>>>>>>>    Function Com_NewEnum Returns Variant
22908>>>>>>>>>        Handle hDispatchDriver
22908>>>>>>>>>        Variant retVal
22908>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22909>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
22910>>>>>>>>>        Function_Return retVal
22911>>>>>>>>>    End_Function
22912>>>>>>>>>
22912>>>>>>>>>    Procedure ComRemoveCategory Integer llIndex
22914>>>>>>>>>        Handle hDispatchDriver
22914>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22915>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22916>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22917>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 102 OLE_VT_VOID
22918>>>>>>>>>    End_Procedure
22919>>>>>>>>>
22919>>>>>>>>>    Function ComTabPaintManager Returns Variant
22921>>>>>>>>>        Handle hDispatchDriver
22921>>>>>>>>>        Variant retVal
22921>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22922>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_DISPATCH to retVal
22923>>>>>>>>>        Function_Return retVal
22924>>>>>>>>>    End_Function
22925>>>>>>>>>
22925>>>>>>>>>    Procedure ComUpdateTabs
22927>>>>>>>>>        Handle hDispatchDriver
22927>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22928>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 105 OLE_VT_VOID
22929>>>>>>>>>    End_Procedure
22930>>>>>>>>>End_Class
22931>>>>>>>>>
22931>>>>>>>>>// CLSID: {C0DE2200-8B30-4FE9-8F91-C1B573CF9AD5}
22931>>>>>>>>>Class cCJITabToolBarEvents is a Mixin
22932>>>>>>>>>
22932>>>>>>>>>    Procedure OnComSelectedChanged Variant llItem
22934>>>>>>>>>    End_Procedure
22935>>>>>>>>>
22935>>>>>>>>>    Procedure OnComBeforeItemClick Variant llItem Variant llCancel
22937>>>>>>>>>    End_Procedure
22938>>>>>>>>>
22938>>>>>>>>>    Procedure RegisterComEvents
22940>>>>>>>>>        Send RegisterComEvent 1 msg_OnComSelectedChanged
22941>>>>>>>>>        Send RegisterComEvent 4 msg_OnComBeforeItemClick
22942>>>>>>>>>    End_Procedure
22943>>>>>>>>>End_Class
22944>>>>>>>>>
22944>>>>>>>>>// CoClass
22944>>>>>>>>>// CLSID: {C0DE2200-37BA-4711-934F-C9612B6E00E5}
22944>>>>>>>>>Class cCJComTabToolBar is a cComAutomationObject
22945>>>>>>>>>    Import_Class_Protocol cCJITabToolBar
22946>>>>>>>>>    Import_Class_Protocol cCJITabToolBarEvents
22947>>>>>>>>>
22947>>>>>>>>>    Procedure Construct_Object
22949>>>>>>>>>        Forward Send Construct_Object
22951>>>>>>>>>        Set psEventId to "{C0DE2200-8B30-4FE9-8F91-C1B573CF9AD5}"
22952>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22953>>>>>>>>>    End_Procedure
22954>>>>>>>>>End_Class
22955>>>>>>>>>
22955>>>>>>>>>// CLSID: {C0DE2200-60E7-4964-8F11-5D62D28407B9}
22955>>>>>>>>>Class cCJIRibbonGroups is a Mixin
22956>>>>>>>>>
22956>>>>>>>>>    Function ComInsertGroup Integer llIndex String llCaption Integer llId Returns Variant
22958>>>>>>>>>        Handle hDispatchDriver
22958>>>>>>>>>        Variant retVal
22958>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22959>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
22960>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22961>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
22962>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22963>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
22964>>>>>>>>>        Function_Return retVal
22965>>>>>>>>>    End_Function
22966>>>>>>>>>
22966>>>>>>>>>    Function ComGroupCount Returns Integer
22968>>>>>>>>>        Handle hDispatchDriver
22968>>>>>>>>>        Integer retVal
22968>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22969>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
22970>>>>>>>>>        Function_Return retVal
22971>>>>>>>>>    End_Function
22972>>>>>>>>>
22972>>>>>>>>>    Function ComGroup Integer llIndex Returns Variant
22974>>>>>>>>>        Handle hDispatchDriver
22974>>>>>>>>>        Variant retVal
22974>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22975>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22976>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22977>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
22978>>>>>>>>>        Function_Return retVal
22979>>>>>>>>>    End_Function
22980>>>>>>>>>
22980>>>>>>>>>    Function Com_NewEnum Returns Variant
22982>>>>>>>>>        Handle hDispatchDriver
22982>>>>>>>>>        Variant retVal
22982>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22983>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
22984>>>>>>>>>        Function_Return retVal
22985>>>>>>>>>    End_Function
22986>>>>>>>>>
22986>>>>>>>>>    Function ComAddGroup String llCaption Integer llId Returns Variant
22988>>>>>>>>>        Handle hDispatchDriver
22988>>>>>>>>>        Variant retVal
22988>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22989>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22990>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
22991>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22992>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_DISPATCH to retVal
22993>>>>>>>>>        Function_Return retVal
22994>>>>>>>>>    End_Function
22995>>>>>>>>>
22995>>>>>>>>>    Procedure ComRemoveGroup Integer llIndex
22997>>>>>>>>>        Handle hDispatchDriver
22997>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22998>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22999>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
23000>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 103 OLE_VT_VOID
23001>>>>>>>>>    End_Procedure
23002>>>>>>>>>
23002>>>>>>>>>    Procedure ComRemoveAll
23004>>>>>>>>>        Handle hDispatchDriver
23004>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23005>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 104 OLE_VT_VOID
23006>>>>>>>>>    End_Procedure
23007>>>>>>>>>
23007>>>>>>>>>    Function ComRibbonTab Returns Variant
23009>>>>>>>>>        Handle hDispatchDriver
23009>>>>>>>>>        Variant retVal
23009>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23010>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_DISPATCH to retVal
23011>>>>>>>>>        Function_Return retVal
23012>>>>>>>>>    End_Function
23013>>>>>>>>>End_Class
23014>>>>>>>>>
23014>>>>>>>>>// CoClass
23014>>>>>>>>>// CLSID: {C0DE2200-1A42-4B87-9E48-28934AC041E5}
23014>>>>>>>>>Class cCJRibbonGroups is a cComAutomationObject
23015>>>>>>>>>    Import_Class_Protocol cCJIRibbonGroups
23016>>>>>>>>>
23016>>>>>>>>>    Procedure Construct_Object
23018>>>>>>>>>        Forward Send Construct_Object
23020>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
23021>>>>>>>>>    End_Procedure
23022>>>>>>>>>End_Class
23023>>>>>>>>>
23023>>>>>>>>>// CLSID: {C0DE2200-0A27-4B80-857D-192A539AE88D}
23023>>>>>>>>>Class cCJIRibbonTab is a Mixin
23024>>>>>>>>>
23024>>>>>>>>>    Function ComCaption Returns String
23026>>>>>>>>>        String retVal
23026>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
23027>>>>>>>>>        Function_Return retVal
23028>>>>>>>>>    End_Function
23029>>>>>>>>>
23029>>>>>>>>>    Procedure Set ComCaption String value
23031>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
23032>>>>>>>>>    End_Procedure
23033>>>>>>>>>
23033>>>>>>>>>    Function ComTag Returns Variant
23035>>>>>>>>>        Variant retVal
23035>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_VARIANT to retVal
23036>>>>>>>>>        Function_Return retVal
23037>>>>>>>>>    End_Function
23038>>>>>>>>>
23038>>>>>>>>>    Procedure Set ComTag Variant value
23040>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_VARIANT to value
23041>>>>>>>>>    End_Procedure
23042>>>>>>>>>
23042>>>>>>>>>    Function ComSelected Returns Boolean
23044>>>>>>>>>        Boolean retVal
23044>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
23045>>>>>>>>>        Function_Return retVal
23046>>>>>>>>>    End_Function
23047>>>>>>>>>
23047>>>>>>>>>    Procedure Set ComSelected Boolean value
23049>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
23050>>>>>>>>>    End_Procedure
23051>>>>>>>>>
23051>>>>>>>>>    Function ComImage Returns Integer
23053>>>>>>>>>        Integer retVal
23053>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
23054>>>>>>>>>        Function_Return retVal
23055>>>>>>>>>    End_Function
23056>>>>>>>>>
23056>>>>>>>>>    Procedure Set ComImage Integer value
23058>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
23059>>>>>>>>>    End_Procedure
23060>>>>>>>>>
23060>>>>>>>>>    Function ComVisible Returns Boolean
23062>>>>>>>>>        Boolean retVal
23062>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
23063>>>>>>>>>        Function_Return retVal
23064>>>>>>>>>    End_Function
23065>>>>>>>>>
23065>>>>>>>>>    Procedure Set ComVisible Boolean value
23067>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
23068>>>>>>>>>    End_Procedure
23069>>>>>>>>>
23069>>>>>>>>>    Function ComEnabled Returns Boolean
23071>>>>>>>>>        Boolean retVal
23071>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
23072>>>>>>>>>        Function_Return retVal
23073>>>>>>>>>    End_Function
23074>>>>>>>>>
23074>>>>>>>>>    Procedure Set ComEnabled Boolean value
23076>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
23077>>>>>>>>>    End_Procedure
23078>>>>>>>>>
23078>>>>>>>>>    Function ComToolTip Returns String
23080>>>>>>>>>        String retVal
23080>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
23081>>>>>>>>>        Function_Return retVal
23082>>>>>>>>>    End_Function
23083>>>>>>>>>
23083>>>>>>>>>    Procedure Set ComToolTip String value
23085>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
23086>>>>>>>>>    End_Procedure
23087>>>>>>>>>
23087>>>>>>>>>    Function ComKeyboardTip Returns String
23089>>>>>>>>>        String retVal
23089>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BSTR to retVal
23090>>>>>>>>>        Function_Return retVal
23091>>>>>>>>>    End_Function
23092>>>>>>>>>
23092>>>>>>>>>    Procedure Set ComKeyboardTip String value
23094>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BSTR to value
23095>>>>>>>>>    End_Procedure
23096>>>>>>>>>
23096>>>>>>>>>    Function ComId Returns Integer
23098>>>>>>>>>        Integer retVal
23098>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to retVal
23099>>>>>>>>>        Function_Return retVal
23100>>>>>>>>>    End_Function
23101>>>>>>>>>
23101>>>>>>>>>    Procedure Set ComId Integer value
23103>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to value
23104>>>>>>>>>    End_Procedure
23105>>>>>>>>>
23105>>>>>>>>>    Function ComColor Returns XTPRibbonTabContextColor
23107>>>>>>>>>        XTPRibbonTabContextColor retVal
23107>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_I4 to retVal
23108>>>>>>>>>        Function_Return retVal
23109>>>>>>>>>    End_Function
23110>>>>>>>>>
23110>>>>>>>>>    Procedure Set ComColor XTPRibbonTabContextColor value
23112>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_I4 to value
23113>>>>>>>>>    End_Procedure
23114>>>>>>>>>
23114>>>>>>>>>    Function ComContextCaption Returns String
23116>>>>>>>>>        String retVal
23116>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_BSTR to retVal
23117>>>>>>>>>        Function_Return retVal
23118>>>>>>>>>    End_Function
23119>>>>>>>>>
23119>>>>>>>>>    Procedure Set ComContextCaption String value
23121>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_BSTR to value
23122>>>>>>>>>    End_Procedure
23123>>>>>>>>>
23123>>>>>>>>>    Function ComCustomizeCaption Returns String
23125>>>>>>>>>        String retVal
23125>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 54 OLE_VT_BSTR to retVal
23126>>>>>>>>>        Function_Return retVal
23127>>>>>>>>>    End_Function
23128>>>>>>>>>
23128>>>>>>>>>    Procedure Set ComCustomizeCaption String value
23130>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 54 OLE_VT_BSTR to value
23131>>>>>>>>>    End_Procedure
23132>>>>>>>>>
23132>>>>>>>>>    Function ComIndex Returns Integer
23134>>>>>>>>>        Handle hDispatchDriver
23134>>>>>>>>>        Integer retVal
23134>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23135>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
23136>>>>>>>>>        Function_Return retVal
23137>>>>>>>>>    End_Function
23138>>>>>>>>>
23138>>>>>>>>>    Procedure ComMove Integer llIndex
23140>>>>>>>>>        Handle hDispatchDriver
23140>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23141>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23142>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
23143>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
23144>>>>>>>>>    End_Procedure
23145>>>>>>>>>
23145>>>>>>>>>    Function ComRibbonBar Returns Variant
23147>>>>>>>>>        Handle hDispatchDriver
23147>>>>>>>>>        Variant retVal
23147>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23148>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
23149>>>>>>>>>        Function_Return retVal
23150>>>>>>>>>    End_Function
23151>>>>>>>>>
23151>>>>>>>>>    Function ComGroups Returns Variant
23153>>>>>>>>>        Handle hDispatchDriver
23153>>>>>>>>>        Variant retVal
23153>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23154>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_DISPATCH to retVal
23155>>>>>>>>>        Function_Return retVal
23156>>>>>>>>>    End_Function
23157>>>>>>>>>
23157>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
23159>>>>>>>>>        Handle hDispatchDriver
23159>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23160>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23161>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
23162>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
23163>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
23164>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
23165>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 110 OLE_VT_VOID
23166>>>>>>>>>    End_Procedure
23167>>>>>>>>>End_Class
23168>>>>>>>>>
23168>>>>>>>>>// CoClass
23168>>>>>>>>>// CLSID: {C0DE2200-D924-4C08-92F8-D2B03CE65E1E}
23168>>>>>>>>>Class cCJRibbonTab is a cComAutomationObject
23169>>>>>>>>>    Import_Class_Protocol cCJIRibbonTab
23170>>>>>>>>>
23170>>>>>>>>>    Procedure Construct_Object
23172>>>>>>>>>        Forward Send Construct_Object
23174>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
23175>>>>>>>>>    End_Procedure
23176>>>>>>>>>End_Class
23177>>>>>>>>>
23177>>>>>>>>>// CLSID: {C0DE2200-AF64-4A71-94AE-1160A10E487A}
23177>>>>>>>>>Class cCJIRibbonBar is a Mixin
23178>>>>>>>>>
23178>>>>>>>>>    Function ComTitle Returns String
23180>>>>>>>>>        String retVal
23180>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
23181>>>>>>>>>        Function_Return retVal
23182>>>>>>>>>    End_Function
23183>>>>>>>>>
23183>>>>>>>>>    Procedure Set ComTitle String value
23185>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
23186>>>>>>>>>    End_Procedure
23187>>>>>>>>>
23187>>>>>>>>>    Function ComVisible Returns Boolean
23189>>>>>>>>>        Boolean retVal
23189>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
23190>>>>>>>>>        Function_Return retVal
23191>>>>>>>>>    End_Function
23192>>>>>>>>>
23192>>>>>>>>>    Procedure Set ComVisible Boolean value
23194>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
23195>>>>>>>>>    End_Procedure
23196>>>>>>>>>
23196>>>>>>>>>    Function ComPosition Returns XTPBarPosition
23198>>>>>>>>>        XTPBarPosition retVal
23198>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
23199>>>>>>>>>        Function_Return retVal
23200>>>>>>>>>    End_Function
23201>>>>>>>>>
23201>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
23203>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
23204>>>>>>>>>    End_Procedure
23205>>>>>>>>>
23205>>>>>>>>>    Function ComBarID Returns Integer
23207>>>>>>>>>        Integer retVal
23207>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
23208>>>>>>>>>        Function_Return retVal
23209>>>>>>>>>    End_Function
23210>>>>>>>>>
23210>>>>>>>>>    Procedure Set ComBarID Integer value
23212>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
23213>>>>>>>>>    End_Procedure
23214>>>>>>>>>
23214>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
23216>>>>>>>>>        Boolean retVal
23216>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
23217>>>>>>>>>        Function_Return retVal
23218>>>>>>>>>    End_Function
23219>>>>>>>>>
23219>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
23221>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
23222>>>>>>>>>    End_Procedure
23223>>>>>>>>>
23223>>>>>>>>>    Function ComWidth Returns Integer
23225>>>>>>>>>        Integer retVal
23225>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
23226>>>>>>>>>        Function_Return retVal
23227>>>>>>>>>    End_Function
23228>>>>>>>>>
23228>>>>>>>>>    Procedure Set ComWidth Integer value
23230>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
23231>>>>>>>>>    End_Procedure
23232>>>>>>>>>
23232>>>>>>>>>    Function ComCloseable Returns Boolean
23234>>>>>>>>>        Boolean retVal
23234>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
23235>>>>>>>>>        Function_Return retVal
23236>>>>>>>>>    End_Function
23237>>>>>>>>>
23237>>>>>>>>>    Procedure Set ComCloseable Boolean value
23239>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
23240>>>>>>>>>    End_Procedure
23241>>>>>>>>>
23241>>>>>>>>>    Function ComEnableAnimation Returns Boolean
23243>>>>>>>>>        Boolean retVal
23243>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
23244>>>>>>>>>        Function_Return retVal
23245>>>>>>>>>    End_Function
23246>>>>>>>>>
23246>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
23248>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
23249>>>>>>>>>    End_Procedure
23250>>>>>>>>>
23250>>>>>>>>>    Function ComShowGripper Returns Boolean
23252>>>>>>>>>        Boolean retVal
23252>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
23253>>>>>>>>>        Function_Return retVal
23254>>>>>>>>>    End_Function
23255>>>>>>>>>
23255>>>>>>>>>    Procedure Set ComShowGripper Boolean value
23257>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
23258>>>>>>>>>    End_Procedure
23259>>>>>>>>>
23259>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
23261>>>>>>>>>        XTPButtonStyle retVal
23261>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
23262>>>>>>>>>        Function_Return retVal
23263>>>>>>>>>    End_Function
23264>>>>>>>>>
23264>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
23266>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
23267>>>>>>>>>    End_Procedure
23268>>>>>>>>>
23268>>>>>>>>>    Function ComCustomizable Returns Boolean
23270>>>>>>>>>        Boolean retVal
23270>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
23271>>>>>>>>>        Function_Return retVal
23272>>>>>>>>>    End_Function
23273>>>>>>>>>
23273>>>>>>>>>    Procedure Set ComCustomizable Boolean value
23275>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
23276>>>>>>>>>    End_Procedure
23277>>>>>>>>>
23277>>>>>>>>>    Function ComSelectedControl Returns Variant
23279>>>>>>>>>        Variant retVal
23279>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
23280>>>>>>>>>        Function_Return retVal
23281>>>>>>>>>    End_Function
23282>>>>>>>>>
23282>>>>>>>>>    Procedure Set ComSelectedControl Variant value
23284>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
23285>>>>>>>>>    End_Procedure
23286>>>>>>>>>
23286>>>>>>>>>    Function ComGroupsVisible Returns Boolean
23288>>>>>>>>>        Boolean retVal
23288>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 104 OLE_VT_BOOL to retVal
23289>>>>>>>>>        Function_Return retVal
23290>>>>>>>>>    End_Function
23291>>>>>>>>>
23291>>>>>>>>>    Procedure Set ComGroupsVisible Boolean value
23293>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 104 OLE_VT_BOOL to value
23294>>>>>>>>>    End_Procedure
23295>>>>>>>>>
23295>>>>>>>>>    Function ComSelectedTab Returns Variant
23297>>>>>>>>>        Variant retVal
23297>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 105 OLE_VT_DISPATCH to retVal
23298>>>>>>>>>        Function_Return retVal
23299>>>>>>>>>    End_Function
23300>>>>>>>>>
23300>>>>>>>>>    Procedure Set ComSelectedTab Variant value
23302>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 105 OLE_VT_DISPATCH to value
23303>>>>>>>>>    End_Procedure
23304>>>>>>>>>
23304>>>>>>>>>    Function ComMinimumVisibleWidth Returns Integer
23306>>>>>>>>>        Integer retVal
23306>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_I4 to retVal
23307>>>>>>>>>        Function_Return retVal
23308>>>>>>>>>    End_Function
23309>>>>>>>>>
23309>>>>>>>>>    Procedure Set ComMinimumVisibleWidth Integer value
23311>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_I4 to value
23312>>>>>>>>>    End_Procedure
23313>>>>>>>>>
23313>>>>>>>>>    Function ComShowQuickAccessBelowRibbon Returns Boolean
23315>>>>>>>>>        Boolean retVal
23315>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 110 OLE_VT_BOOL to retVal
23316>>>>>>>>>        Function_Return retVal
23317>>>>>>>>>    End_Function
23318>>>>>>>>>
23318>>>>>>>>>    Procedure Set ComShowQuickAccessBelowRibbon Boolean value
23320>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 110 OLE_VT_BOOL to value
23321>>>>>>>>>    End_Procedure
23322>>>>>>>>>
23322>>>>>>>>>    Function ComShowQuickAccess Returns Boolean
23324>>>>>>>>>        Boolean retVal
23324>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 115 OLE_VT_BOOL to retVal
23325>>>>>>>>>        Function_Return retVal
23326>>>>>>>>>    End_Function
23327>>>>>>>>>
23327>>>>>>>>>    Procedure Set ComShowQuickAccess Boolean value
23329>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 115 OLE_VT_BOOL to value
23330>>>>>>>>>    End_Procedure
23331>>>>>>>>>
23331>>>>>>>>>    Function ComAllowQuickAccessDuplicates Returns Boolean
23333>>>>>>>>>        Boolean retVal
23333>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 116 OLE_VT_BOOL to retVal
23334>>>>>>>>>        Function_Return retVal
23335>>>>>>>>>    End_Function
23336>>>>>>>>>
23336>>>>>>>>>    Procedure Set ComAllowQuickAccessDuplicates Boolean value
23338>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 116 OLE_VT_BOOL to value
23339>>>>>>>>>    End_Procedure
23340>>>>>>>>>
23340>>>>>>>>>    Function ComAllowMinimize Returns Boolean
23342>>>>>>>>>        Boolean retVal
23342>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 117 OLE_VT_BOOL to retVal
23343>>>>>>>>>        Function_Return retVal
23344>>>>>>>>>    End_Function
23345>>>>>>>>>
23345>>>>>>>>>    Procedure Set ComAllowMinimize Boolean value
23347>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 117 OLE_VT_BOOL to value
23348>>>>>>>>>    End_Procedure
23349>>>>>>>>>
23349>>>>>>>>>    Function ComMinimized Returns Boolean
23351>>>>>>>>>        Boolean retVal
23351>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 118 OLE_VT_BOOL to retVal
23352>>>>>>>>>        Function_Return retVal
23353>>>>>>>>>    End_Function
23354>>>>>>>>>
23354>>>>>>>>>    Procedure Set ComMinimized Boolean value
23356>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 118 OLE_VT_BOOL to value
23357>>>>>>>>>    End_Procedure
23358>>>>>>>>>
23358>>>>>>>>>    Function ComFontHeight Returns Integer
23360>>>>>>>>>        Integer retVal
23360>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 119 OLE_VT_I4 to retVal
23361>>>>>>>>>        Function_Return retVal
23362>>>>>>>>>    End_Function
23363>>>>>>>>>
23363>>>>>>>>>    Procedure Set ComFontHeight Integer value
23365>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 119 OLE_VT_I4 to value
23366>>>>>>>>>    End_Procedure
23367>>>>>>>>>
23367>>>>>>>>>    Function ComTabsVisible Returns Boolean
23369>>>>>>>>>        Boolean retVal
23369>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_BOOL to retVal
23370>>>>>>>>>        Function_Return retVal
23371>>>>>>>>>    End_Function
23372>>>>>>>>>
23372>>>>>>>>>    Procedure Set ComTabsVisible Boolean value
23374>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_BOOL to value
23375>>>>>>>>>    End_Procedure
23376>>>>>>>>>
23376>>>>>>>>>    Function ComShowCaptionAlways Returns Boolean
23378>>>>>>>>>        Boolean retVal
23378>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 123 OLE_VT_BOOL to retVal
23379>>>>>>>>>        Function_Return retVal
23380>>>>>>>>>    End_Function
23381>>>>>>>>>
23381>>>>>>>>>    Procedure Set ComShowCaptionAlways Boolean value
23383>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 123 OLE_VT_BOOL to value
23384>>>>>>>>>    End_Procedure
23385>>>>>>>>>
23385>>>>>>>>>    Function ComAllowQuickAccessCustomization Returns Boolean
23387>>>>>>>>>        Boolean retVal
23387>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 124 OLE_VT_BOOL to retVal
23388>>>>>>>>>        Function_Return retVal
23389>>>>>>>>>    End_Function
23390>>>>>>>>>
23390>>>>>>>>>    Procedure Set ComAllowQuickAccessCustomization Boolean value
23392>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 124 OLE_VT_BOOL to value
23393>>>>>>>>>    End_Procedure
23394>>>>>>>>>
23394>>>>>>>>>    Function ComGroupsHeight Returns Integer
23396>>>>>>>>>        Integer retVal
23396>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 125 OLE_VT_I4 to retVal
23397>>>>>>>>>        Function_Return retVal
23398>>>>>>>>>    End_Function
23399>>>>>>>>>
23399>>>>>>>>>    Procedure Set ComGroupsHeight Integer value
23401>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 125 OLE_VT_I4 to value
23402>>>>>>>>>    End_Procedure
23403>>>>>>>>>
23403>>>>>>>>>    Function ComClientHeight Returns Integer
23405>>>>>>>>>        Integer retVal
23405>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 126 OLE_VT_I4 to retVal
23406>>>>>>>>>        Function_Return retVal
23407>>>>>>>>>    End_Function
23408>>>>>>>>>
23408>>>>>>>>>    Procedure Set ComClientHeight Integer value
23410>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 126 OLE_VT_I4 to value
23411>>>>>>>>>    End_Procedure
23412>>>>>>>>>
23412>>>>>>>>>    Function ComQuickAccessEmptyIconId Returns Integer
23414>>>>>>>>>        Integer retVal
23414>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 130 OLE_VT_I4 to retVal
23415>>>>>>>>>        Function_Return retVal
23416>>>>>>>>>    End_Function
23417>>>>>>>>>
23417>>>>>>>>>    Procedure Set ComQuickAccessEmptyIconId Integer value
23419>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 130 OLE_VT_I4 to value
23420>>>>>>>>>    End_Procedure
23421>>>>>>>>>
23421>>>>>>>>>    Function ComSystemButton Returns Variant
23423>>>>>>>>>        Variant retVal
23423>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 128 OLE_VT_DISPATCH to retVal
23424>>>>>>>>>        Function_Return retVal
23425>>>>>>>>>    End_Function
23426>>>>>>>>>
23426>>>>>>>>>    Procedure Set ComSystemButton Variant value
23428>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 128 OLE_VT_DISPATCH to value
23429>>>>>>>>>    End_Procedure
23430>>>>>>>>>
23430>>>>>>>>>    Function ComType Returns XTPBarType
23432>>>>>>>>>        Handle hDispatchDriver
23432>>>>>>>>>        XTPBarType retVal
23432>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23433>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
23434>>>>>>>>>        Function_Return retVal
23435>>>>>>>>>    End_Function
23436>>>>>>>>>
23436>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
23438>>>>>>>>>        Handle hDispatchDriver
23438>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23439>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23440>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
23441>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
23442>>>>>>>>>    End_Procedure
23443>>>>>>>>>
23443>>>>>>>>>    Function ComBuiltIn Returns Boolean
23445>>>>>>>>>        Handle hDispatchDriver
23445>>>>>>>>>        Boolean retVal
23445>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23446>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
23447>>>>>>>>>        Function_Return retVal
23448>>>>>>>>>    End_Function
23449>>>>>>>>>
23449>>>>>>>>>    Procedure ComDelete
23451>>>>>>>>>        Handle hDispatchDriver
23451>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23452>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
23453>>>>>>>>>    End_Procedure
23454>>>>>>>>>
23454>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
23456>>>>>>>>>        Handle hDispatchDriver
23456>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23457>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23458>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
23459>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
23460>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
23461>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
23462>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
23463>>>>>>>>>    End_Procedure
23464>>>>>>>>>
23464>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
23466>>>>>>>>>        Handle hDispatchDriver
23466>>>>>>>>>        OLE_HANDLE retVal
23466>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23467>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
23468>>>>>>>>>        Function_Return retVal
23469>>>>>>>>>    End_Function
23470>>>>>>>>>
23470>>>>>>>>>    Function ComCommandBars Returns Variant
23472>>>>>>>>>        Handle hDispatchDriver
23472>>>>>>>>>        Variant retVal
23472>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23473>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
23474>>>>>>>>>        Function_Return retVal
23475>>>>>>>>>    End_Function
23476>>>>>>>>>
23476>>>>>>>>>    Function ComControls Returns Variant
23478>>>>>>>>>        Handle hDispatchDriver
23478>>>>>>>>>        Variant retVal
23478>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23479>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
23480>>>>>>>>>        Function_Return retVal
23481>>>>>>>>>    End_Function
23482>>>>>>>>>
23482>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
23484>>>>>>>>>        Handle hDispatchDriver
23484>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23485>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
23486>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
23487>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
23488>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
23489>>>>>>>>>    End_Procedure
23490>>>>>>>>>
23490>>>>>>>>>    Function ComGetIconWidth Returns Integer
23492>>>>>>>>>        Handle hDispatchDriver
23492>>>>>>>>>        Integer retVal
23492>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23493>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
23494>>>>>>>>>        Function_Return retVal
23495>>>>>>>>>    End_Function
23496>>>>>>>>>
23496>>>>>>>>>    Function ComGetIconHeight Returns Integer
23498>>>>>>>>>        Handle hDispatchDriver
23498>>>>>>>>>        Integer retVal
23498>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23499>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
23500>>>>>>>>>        Function_Return retVal
23501>>>>>>>>>    End_Function
23502>>>>>>>>>
23502>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
23504>>>>>>>>>        Handle hDispatchDriver
23504>>>>>>>>>        Variant retVal
23504>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23505>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23506>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
23507>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
23508>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
23509>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
23510>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
23511>>>>>>>>>        Function_Return retVal
23512>>>>>>>>>    End_Function
23513>>>>>>>>>
23513>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
23515>>>>>>>>>        Handle hDispatchDriver
23515>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23516>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
23517>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
23518>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
23519>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
23520>>>>>>>>>    End_Procedure
23521>>>>>>>>>
23521>>>>>>>>>    Procedure ComRedrawBar
23523>>>>>>>>>        Handle hDispatchDriver
23523>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23524>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
23525>>>>>>>>>    End_Procedure
23526>>>>>>>>>
23526>>>>>>>>>    Procedure ComRecalcLayout
23528>>>>>>>>>        Handle hDispatchDriver
23528>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23529>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
23530>>>>>>>>>    End_Procedure
23531>>>>>>>>>
23531>>>>>>>>>    Procedure ComReset
23533>>>>>>>>>        Handle hDispatchDriver
23533>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23534>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
23535>>>>>>>>>    End_Procedure
23536>>>>>>>>>
23536>>>>>>>>>    Function ComInsertTab Integer llIndex String llCaption Returns Variant
23538>>>>>>>>>        Handle hDispatchDriver
23538>>>>>>>>>        Variant retVal
23538>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23539>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
23540>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
23541>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
23542>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
23543>>>>>>>>>        Function_Return retVal
23544>>>>>>>>>    End_Function
23545>>>>>>>>>
23545>>>>>>>>>    Function ComTabCount Returns Integer
23547>>>>>>>>>        Handle hDispatchDriver
23547>>>>>>>>>        Integer retVal
23547>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23548>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
23549>>>>>>>>>        Function_Return retVal
23550>>>>>>>>>    End_Function
23551>>>>>>>>>
23551>>>>>>>>>    Function ComTab Integer llIndex Returns Variant
23553>>>>>>>>>        Handle hDispatchDriver
23553>>>>>>>>>        Variant retVal
23553>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23554>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23555>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
23556>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
23557>>>>>>>>>        Function_Return retVal
23558>>>>>>>>>    End_Function
23559>>>>>>>>>
23559>>>>>>>>>    Function Com_NewEnum Returns Variant
23561>>>>>>>>>        Handle hDispatchDriver
23561>>>>>>>>>        Variant retVal
23561>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23562>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
23563>>>>>>>>>        Function_Return retVal
23564>>>>>>>>>    End_Function
23565>>>>>>>>>
23565>>>>>>>>>    Function ComRibbonPaintManager Returns Variant
23567>>>>>>>>>        Handle hDispatchDriver
23567>>>>>>>>>        Variant retVal
23567>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23568>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_DISPATCH to retVal
23569>>>>>>>>>        Function_Return retVal
23570>>>>>>>>>    End_Function
23571>>>>>>>>>
23571>>>>>>>>>    Function ComTabPaintManager Returns Variant
23573>>>>>>>>>        Handle hDispatchDriver
23573>>>>>>>>>        Variant retVal
23573>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23574>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_DISPATCH to retVal
23575>>>>>>>>>        Function_Return retVal
23576>>>>>>>>>    End_Function
23577>>>>>>>>>
23577>>>>>>>>>    Procedure ComEnableFrameTheme
23579>>>>>>>>>        Handle hDispatchDriver
23579>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23580>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 107 OLE_VT_VOID
23581>>>>>>>>>    End_Procedure
23582>>>>>>>>>
23582>>>>>>>>>    Function ComAddSystemButton Returns Variant
23584>>>>>>>>>        Handle hDispatchDriver
23584>>>>>>>>>        Variant retVal
23584>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23585>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_DISPATCH to retVal
23586>>>>>>>>>        Function_Return retVal
23587>>>>>>>>>    End_Function
23588>>>>>>>>>
23588>>>>>>>>>    Function ComQuickAccessControls Returns Variant
23590>>>>>>>>>        Handle hDispatchDriver
23590>>>>>>>>>        Variant retVal
23590>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23591>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 109 OLE_VT_DISPATCH to retVal
23592>>>>>>>>>        Function_Return retVal
23593>>>>>>>>>    End_Function
23594>>>>>>>>>
23594>>>>>>>>>    Function ComFindTab Integer llId Returns Variant
23596>>>>>>>>>        Handle hDispatchDriver
23596>>>>>>>>>        Variant retVal
23596>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23597>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23598>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
23599>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_DISPATCH to retVal
23600>>>>>>>>>        Function_Return retVal
23601>>>>>>>>>    End_Function
23602>>>>>>>>>
23602>>>>>>>>>    Function ComFindGroup Integer llId Returns Variant
23604>>>>>>>>>        Handle hDispatchDriver
23604>>>>>>>>>        Variant retVal
23604>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23605>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23606>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
23607>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 112 OLE_VT_DISPATCH to retVal
23608>>>>>>>>>        Function_Return retVal
23609>>>>>>>>>    End_Function
23610>>>>>>>>>
23610>>>>>>>>>    Procedure ComRemoveAllTabs
23612>>>>>>>>>        Handle hDispatchDriver
23612>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23613>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 113 OLE_VT_VOID
23614>>>>>>>>>    End_Procedure
23615>>>>>>>>>
23615>>>>>>>>>    Procedure ComRemoveTab Integer llIndex
23617>>>>>>>>>        Handle hDispatchDriver
23617>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23618>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23619>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
23620>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 114 OLE_VT_VOID
23621>>>>>>>>>    End_Procedure
23622>>>>>>>>>
23622>>>>>>>>>    Function ComControlQuickAccess Returns Variant
23624>>>>>>>>>        Handle hDispatchDriver
23624>>>>>>>>>        Variant retVal
23624>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23625>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 120 OLE_VT_DISPATCH to retVal
23626>>>>>>>>>        Function_Return retVal
23627>>>>>>>>>    End_Function
23628>>>>>>>>>
23628>>>>>>>>>    Function ComControlSystemButton Returns Variant
23630>>>>>>>>>        Handle hDispatchDriver
23630>>>>>>>>>        Variant retVal
23630>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23631>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 121 OLE_VT_DISPATCH to retVal
23632>>>>>>>>>        Function_Return retVal
23633>>>>>>>>>    End_Function
23634>>>>>>>>>End_Class
23635>>>>>>>>>
23635>>>>>>>>>// CoClass
23635>>>>>>>>>// CLSID: {C0DE2200-34D1-4EBB-B58C-454DB52012D9}
23635>>>>>>>>>Class cCJRibbonBar is a cComAutomationObject
23636>>>>>>>>>    Import_Class_Protocol cCJIRibbonBar
23637>>>>>>>>>
23637>>>>>>>>>    Procedure Construct_Object
23639>>>>>>>>>        Forward Send Construct_Object
23641>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
23642>>>>>>>>>    End_Procedure
23643>>>>>>>>>End_Class
23644>>>>>>>>>
23644>>>>>>>>>// CLSID: {C0DE2200-46A4-4F99-83D8-C6D3C2B390FC}
23644>>>>>>>>>Class cCJIDialogBar is a Mixin
23645>>>>>>>>>
23645>>>>>>>>>    Function ComTitle Returns String
23647>>>>>>>>>        String retVal
23647>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
23648>>>>>>>>>        Function_Return retVal
23649>>>>>>>>>    End_Function
23650>>>>>>>>>
23650>>>>>>>>>    Procedure Set ComTitle String value
23652>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
23653>>>>>>>>>    End_Procedure
23654>>>>>>>>>
23654>>>>>>>>>    Function ComVisible Returns Boolean
23656>>>>>>>>>        Boolean retVal
23656>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
23657>>>>>>>>>        Function_Return retVal
23658>>>>>>>>>    End_Function
23659>>>>>>>>>
23659>>>>>>>>>    Procedure Set ComVisible Boolean value
23661>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
23662>>>>>>>>>    End_Procedure
23663>>>>>>>>>
23663>>>>>>>>>    Function ComPosition Returns XTPBarPosition
23665>>>>>>>>>        XTPBarPosition retVal
23665>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
23666>>>>>>>>>        Function_Return retVal
23667>>>>>>>>>    End_Function
23668>>>>>>>>>
23668>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
23670>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
23671>>>>>>>>>    End_Procedure
23672>>>>>>>>>
23672>>>>>>>>>    Function ComBarID Returns Integer
23674>>>>>>>>>        Integer retVal
23674>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
23675>>>>>>>>>        Function_Return retVal
23676>>>>>>>>>    End_Function
23677>>>>>>>>>
23677>>>>>>>>>    Procedure Set ComBarID Integer value
23679>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
23680>>>>>>>>>    End_Procedure
23681>>>>>>>>>
23681>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
23683>>>>>>>>>        Boolean retVal
23683>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
23684>>>>>>>>>        Function_Return retVal
23685>>>>>>>>>    End_Function
23686>>>>>>>>>
23686>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
23688>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
23689>>>>>>>>>    End_Procedure
23690>>>>>>>>>
23690>>>>>>>>>    Function ComWidth Returns Integer
23692>>>>>>>>>        Integer retVal
23692>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
23693>>>>>>>>>        Function_Return retVal
23694>>>>>>>>>    End_Function
23695>>>>>>>>>
23695>>>>>>>>>    Procedure Set ComWidth Integer value
23697>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
23698>>>>>>>>>    End_Procedure
23699>>>>>>>>>
23699>>>>>>>>>    Function ComCloseable Returns Boolean
23701>>>>>>>>>        Boolean retVal
23701>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
23702>>>>>>>>>        Function_Return retVal
23703>>>>>>>>>    End_Function
23704>>>>>>>>>
23704>>>>>>>>>    Procedure Set ComCloseable Boolean value
23706>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
23707>>>>>>>>>    End_Procedure
23708>>>>>>>>>
23708>>>>>>>>>    Function ComEnableAnimation Returns Boolean
23710>>>>>>>>>        Boolean retVal
23710>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
23711>>>>>>>>>        Function_Return retVal
23712>>>>>>>>>    End_Function
23713>>>>>>>>>
23713>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
23715>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
23716>>>>>>>>>    End_Procedure
23717>>>>>>>>>
23717>>>>>>>>>    Function ComShowGripper Returns Boolean
23719>>>>>>>>>        Boolean retVal
23719>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
23720>>>>>>>>>        Function_Return retVal
23721>>>>>>>>>    End_Function
23722>>>>>>>>>
23722>>>>>>>>>    Procedure Set ComShowGripper Boolean value
23724>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
23725>>>>>>>>>    End_Procedure
23726>>>>>>>>>
23726>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
23728>>>>>>>>>        XTPButtonStyle retVal
23728>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
23729>>>>>>>>>        Function_Return retVal
23730>>>>>>>>>    End_Function
23731>>>>>>>>>
23731>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
23733>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
23734>>>>>>>>>    End_Procedure
23735>>>>>>>>>
23735>>>>>>>>>    Function ComCaption Returns String
23737>>>>>>>>>        String retVal
23737>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BSTR to retVal
23738>>>>>>>>>        Function_Return retVal
23739>>>>>>>>>    End_Function
23740>>>>>>>>>
23740>>>>>>>>>    Procedure Set ComCaption String value
23742>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BSTR to value
23743>>>>>>>>>    End_Procedure
23744>>>>>>>>>
23744>>>>>>>>>    Function ComResizable Returns Boolean
23746>>>>>>>>>        Boolean retVal
23746>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BOOL to retVal
23747>>>>>>>>>        Function_Return retVal
23748>>>>>>>>>    End_Function
23749>>>>>>>>>
23749>>>>>>>>>    Procedure Set ComResizable Boolean value
23751>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BOOL to value
23752>>>>>>>>>    End_Procedure
23753>>>>>>>>>
23753>>>>>>>>>    Function ComChildHandle Returns OLE_HANDLE
23755>>>>>>>>>        OLE_HANDLE retVal
23755>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 103 OLE_VT_I4 to retVal
23756>>>>>>>>>        Function_Return retVal
23757>>>>>>>>>    End_Function
23758>>>>>>>>>
23758>>>>>>>>>    Procedure Set ComChildHandle OLE_HANDLE value
23760>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 103 OLE_VT_I4 to value
23761>>>>>>>>>    End_Procedure
23762>>>>>>>>>
23762>>>>>>>>>    Function ComShowCaption Returns Boolean
23764>>>>>>>>>        Boolean retVal
23764>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 105 OLE_VT_BOOL to retVal
23765>>>>>>>>>        Function_Return retVal
23766>>>>>>>>>    End_Function
23767>>>>>>>>>
23767>>>>>>>>>    Procedure Set ComShowCaption Boolean value
23769>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 105 OLE_VT_BOOL to value
23770>>>>>>>>>    End_Procedure
23771>>>>>>>>>
23771>>>>>>>>>    Function ComCaptionPopup Returns Boolean
23773>>>>>>>>>        Boolean retVal
23773>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_BOOL to retVal
23774>>>>>>>>>        Function_Return retVal
23775>>>>>>>>>    End_Function
23776>>>>>>>>>
23776>>>>>>>>>    Procedure Set ComCaptionPopup Boolean value
23778>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_BOOL to value
23779>>>>>>>>>    End_Procedure
23780>>>>>>>>>
23780>>>>>>>>>    Function ComType Returns XTPBarType
23782>>>>>>>>>        Handle hDispatchDriver
23782>>>>>>>>>        XTPBarType retVal
23782>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23783>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
23784>>>>>>>>>        Function_Return retVal
23785>>>>>>>>>    End_Function
23786>>>>>>>>>
23786>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
23788>>>>>>>>>        Handle hDispatchDriver
23788>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23789>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23790>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
23791>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
23792>>>>>>>>>    End_Procedure
23793>>>>>>>>>
23793>>>>>>>>>    Function ComBuiltIn Returns Boolean
23795>>>>>>>>>        Handle hDispatchDriver
23795>>>>>>>>>        Boolean retVal
23795>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23796>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
23797>>>>>>>>>        Function_Return retVal
23798>>>>>>>>>    End_Function
23799>>>>>>>>>
23799>>>>>>>>>    Procedure ComDelete
23801>>>>>>>>>        Handle hDispatchDriver
23801>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23802>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
23803>>>>>>>>>    End_Procedure
23804>>>>>>>>>
23804>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
23806>>>>>>>>>        Handle hDispatchDriver
23806>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23807>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23808>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
23809>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
23810>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
23811>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
23812>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
23813>>>>>>>>>    End_Procedure
23814>>>>>>>>>
23814>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
23816>>>>>>>>>        Handle hDispatchDriver
23816>>>>>>>>>        OLE_HANDLE retVal
23816>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23817>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
23818>>>>>>>>>        Function_Return retVal
23819>>>>>>>>>    End_Function
23820>>>>>>>>>
23820>>>>>>>>>    Function ComCommandBars Returns Variant
23822>>>>>>>>>        Handle hDispatchDriver
23822>>>>>>>>>        Variant retVal
23822>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23823>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
23824>>>>>>>>>        Function_Return retVal
23825>>>>>>>>>    End_Function
23826>>>>>>>>>
23826>>>>>>>>>    Function ComCaptionPopupBar Returns Variant
23828>>>>>>>>>        Handle hDispatchDriver
23828>>>>>>>>>        Variant retVal
23828>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23829>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_DISPATCH to retVal
23830>>>>>>>>>        Function_Return retVal
23831>>>>>>>>>    End_Function
23832>>>>>>>>>
23832>>>>>>>>>    Procedure ComSetSize Integer llcx Integer llcy
23834>>>>>>>>>        Handle hDispatchDriver
23834>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23835>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
23836>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
23837>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
23838>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 104 OLE_VT_VOID
23839>>>>>>>>>    End_Procedure
23840>>>>>>>>>End_Class
23841>>>>>>>>>
23841>>>>>>>>>// CoClass
23841>>>>>>>>>// CLSID: {C0DE2200-C898-4A0B-8D36-A9566203A013}
23841>>>>>>>>>Class cCJDialogBar is a cComAutomationObject
23842>>>>>>>>>    Import_Class_Protocol cCJIDialogBar
23843>>>>>>>>>
23843>>>>>>>>>    Procedure Construct_Object
23845>>>>>>>>>        Forward Send Construct_Object
23847>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
23848>>>>>>>>>    End_Procedure
23849>>>>>>>>>End_Class
23850>>>>>>>>>
23850>>>>>>>>>// CLSID: {C0DE2200-CF7B-4042-BA6F-20F9A96E8AD1}
23850>>>>>>>>>Class cCJIPaintManager is a Mixin
23851>>>>>>>>>
23851>>>>>>>>>    Function ComEnableAnimation Returns Boolean
23853>>>>>>>>>        Boolean retVal
23853>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
23854>>>>>>>>>        Function_Return retVal
23855>>>>>>>>>    End_Function
23856>>>>>>>>>
23856>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
23858>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
23859>>>>>>>>>    End_Procedure
23860>>>>>>>>>
23860>>>>>>>>>    Function ComFlatToolBar Returns Boolean
23862>>>>>>>>>        Boolean retVal
23862>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to retVal
23863>>>>>>>>>        Function_Return retVal
23864>>>>>>>>>    End_Function
23865>>>>>>>>>
23865>>>>>>>>>    Procedure Set ComFlatToolBar Boolean value
23867>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to value
23868>>>>>>>>>    End_Procedure
23869>>>>>>>>>
23869>>>>>>>>>    Function ComFlatMenuBar Returns Boolean
23871>>>>>>>>>        Boolean retVal
23871>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
23872>>>>>>>>>        Function_Return retVal
23873>>>>>>>>>    End_Function
23874>>>>>>>>>
23874>>>>>>>>>    Procedure Set ComFlatMenuBar Boolean value
23876>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
23877>>>>>>>>>    End_Procedure
23878>>>>>>>>>
23878>>>>>>>>>    Function ComClearTypeTextQuality Returns Boolean
23880>>>>>>>>>        Boolean retVal
23880>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
23881>>>>>>>>>        Function_Return retVal
23882>>>>>>>>>    End_Function
23883>>>>>>>>>
23883>>>>>>>>>    Procedure Set ComClearTypeTextQuality Boolean value
23885>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
23886>>>>>>>>>    End_Procedure
23887>>>>>>>>>
23887>>>>>>>>>    Function ComShowShadow Returns Boolean
23889>>>>>>>>>        Boolean retVal
23889>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
23890>>>>>>>>>        Function_Return retVal
23891>>>>>>>>>    End_Function
23892>>>>>>>>>
23892>>>>>>>>>    Procedure Set ComShowShadow Boolean value
23894>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
23895>>>>>>>>>    End_Procedure
23896>>>>>>>>>
23896>>>>>>>>>    Function ComThemedStatusBar Returns Boolean
23898>>>>>>>>>        Boolean retVal
23898>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
23899>>>>>>>>>        Function_Return retVal
23900>>>>>>>>>    End_Function
23901>>>>>>>>>
23901>>>>>>>>>    Procedure Set ComThemedStatusBar Boolean value
23903>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
23904>>>>>>>>>    End_Procedure
23905>>>>>>>>>
23905>>>>>>>>>    Function ComThickCheckMark Returns Boolean
23907>>>>>>>>>        Boolean retVal
23907>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
23908>>>>>>>>>        Function_Return retVal
23909>>>>>>>>>    End_Function
23910>>>>>>>>>
23910>>>>>>>>>    Procedure Set ComThickCheckMark Boolean value
23912>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
23913>>>>>>>>>    End_Procedure
23914>>>>>>>>>
23914>>>>>>>>>    Function ComSelectImageInPopupBar Returns Boolean
23916>>>>>>>>>        Boolean retVal
23916>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
23917>>>>>>>>>        Function_Return retVal
23918>>>>>>>>>    End_Function
23919>>>>>>>>>
23919>>>>>>>>>    Procedure Set ComSelectImageInPopupBar Boolean value
23921>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
23922>>>>>>>>>    End_Procedure
23923>>>>>>>>>
23923>>>>>>>>>    Function ComThemedCheckBox Returns Boolean
23925>>>>>>>>>        Boolean retVal
23925>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
23926>>>>>>>>>        Function_Return retVal
23927>>>>>>>>>    End_Function
23928>>>>>>>>>
23928>>>>>>>>>    Procedure Set ComThemedCheckBox Boolean value
23930>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
23931>>>>>>>>>    End_Procedure
23932>>>>>>>>>
23932>>>>>>>>>    Function ComAutoResizeIcons Returns Boolean
23934>>>>>>>>>        Boolean retVal
23934>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
23935>>>>>>>>>        Function_Return retVal
23936>>>>>>>>>    End_Function
23937>>>>>>>>>
23937>>>>>>>>>    Procedure Set ComAutoResizeIcons Boolean value
23939>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
23940>>>>>>>>>    End_Procedure
23941>>>>>>>>>
23941>>>>>>>>>    Procedure ComRefreshMetrics
23943>>>>>>>>>        Handle hDispatchDriver
23943>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23944>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
23945>>>>>>>>>    End_Procedure
23946>>>>>>>>>
23946>>>>>>>>>    Procedure ComFillWorkspace OLE_HANDLE llhDC Integer llx Integer lly Integer llcx Integer llcy
23948>>>>>>>>>        Handle hDispatchDriver
23948>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23949>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
23950>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhDC
23951>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
23952>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
23953>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
23954>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
23955>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
23956>>>>>>>>>    End_Procedure
23957>>>>>>>>>
23957>>>>>>>>>    Procedure ComDrawRectangle OLE_HANDLE llhDC Integer llx Integer lly Integer llcx Integer llcy Boolean llSelected Boolean llPressed Boolean llEnabled Boolean llChecked Boolean llPopuped XTPBarType llbarType XTPBarPosition llbarPosition
23959>>>>>>>>>        Handle hDispatchDriver
23959>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23960>>>>>>>>>        Send PrepareParams to hDispatchDriver 12
23961>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhDC
23962>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
23963>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
23964>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
23965>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
23966>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSelected
23967>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llPressed
23968>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnabled
23969>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llChecked
23970>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llPopuped
23971>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbarType
23972>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbarPosition
23973>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
23974>>>>>>>>>    End_Procedure
23975>>>>>>>>>
23975>>>>>>>>>    Function ComGetRectangleTextColor Boolean llSelected Boolean llPressed Boolean llEnabled Boolean llChecked Boolean llPopuped XTPBarType llbarType XTPBarPosition llbarPosition Returns OLE_COLOR
23977>>>>>>>>>        Handle hDispatchDriver
23977>>>>>>>>>        OLE_COLOR retVal
23977>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23978>>>>>>>>>        Send PrepareParams to hDispatchDriver 7
23979>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSelected
23980>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llPressed
23981>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnabled
23982>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llChecked
23983>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llPopuped
23984>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbarType
23985>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbarPosition
23986>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_I4 to retVal
23987>>>>>>>>>        Function_Return retVal
23988>>>>>>>>>    End_Function
23989>>>>>>>>>
23989>>>>>>>>>    Procedure ComLoadFrameIcon Longptr llModule String llPath Integer llWidth Integer llHeight
23991>>>>>>>>>        Handle hDispatchDriver
23991>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23992>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23993>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llModule
23994>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
23995>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
23996>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llHeight
23997>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
23998>>>>>>>>>    End_Procedure
23999>>>>>>>>>End_Class
24000>>>>>>>>>
24000>>>>>>>>>// CoClass
24000>>>>>>>>>// CLSID: {C0DE2200-90B7-46EE-8786-A54278B0A559}
24000>>>>>>>>>Class cCJPaintManager is a cComAutomationObject
24001>>>>>>>>>    Import_Class_Protocol cCJIPaintManager
24002>>>>>>>>>
24002>>>>>>>>>    Procedure Construct_Object
24004>>>>>>>>>        Forward Send Construct_Object
24006>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
24007>>>>>>>>>    End_Procedure
24008>>>>>>>>>End_Class
24009>>>>>>>>>
24009>>>>>>>>>// CLSID: {C0DE2200-2F2F-4C05-92CF-6AEB0BFA0E6D}
24009>>>>>>>>>Class cCJITabWorkspace is a Mixin
24010>>>>>>>>>
24010>>>>>>>>>    Function ComFlags Returns XTPWorkspaceButtons
24012>>>>>>>>>        XTPWorkspaceButtons retVal
24012>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
24013>>>>>>>>>        Function_Return retVal
24014>>>>>>>>>    End_Function
24015>>>>>>>>>
24015>>>>>>>>>    Procedure Set ComFlags XTPWorkspaceButtons value
24017>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
24018>>>>>>>>>    End_Procedure
24019>>>>>>>>>
24019>>>>>>>>>    Function ComAllowReorder Returns Boolean
24021>>>>>>>>>        Boolean retVal
24021>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
24022>>>>>>>>>        Function_Return retVal
24023>>>>>>>>>    End_Function
24024>>>>>>>>>
24024>>>>>>>>>    Procedure Set ComAllowReorder Boolean value
24026>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
24027>>>>>>>>>    End_Procedure
24028>>>>>>>>>
24028>>>>>>>>>    Function ComAutoTheme Returns Boolean
24030>>>>>>>>>        Boolean retVal
24030>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
24031>>>>>>>>>        Function_Return retVal
24032>>>>>>>>>    End_Function
24033>>>>>>>>>
24033>>>>>>>>>    Procedure Set ComAutoTheme Boolean value
24035>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
24036>>>>>>>>>    End_Procedure
24037>>>>>>>>>
24037>>>>>>>>>    Function ComThemedBackColor Returns Boolean
24039>>>>>>>>>        Boolean retVal
24039>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
24040>>>>>>>>>        Function_Return retVal
24041>>>>>>>>>    End_Function
24042>>>>>>>>>
24042>>>>>>>>>    Procedure Set ComThemedBackColor Boolean value
24044>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
24045>>>>>>>>>    End_Procedure
24046>>>>>>>>>
24046>>>>>>>>>    Function ComUseSplitterTracker Returns Boolean
24048>>>>>>>>>        Boolean retVal
24048>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
24049>>>>>>>>>        Function_Return retVal
24050>>>>>>>>>    End_Function
24051>>>>>>>>>
24051>>>>>>>>>    Procedure Set ComUseSplitterTracker Boolean value
24053>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
24054>>>>>>>>>    End_Procedure
24055>>>>>>>>>
24055>>>>>>>>>    Function ComHorizGroupSplitting Returns Boolean
24057>>>>>>>>>        Boolean retVal
24057>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
24058>>>>>>>>>        Function_Return retVal
24059>>>>>>>>>    End_Function
24060>>>>>>>>>
24060>>>>>>>>>    Procedure Set ComHorizGroupSplitting Boolean value
24062>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
24063>>>>>>>>>    End_Procedure
24064>>>>>>>>>
24064>>>>>>>>>    Function ComNewTabPosition Returns XTPWorkspaceNewTabPosition
24066>>>>>>>>>        XTPWorkspaceNewTabPosition retVal
24066>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to retVal
24067>>>>>>>>>        Function_Return retVal
24068>>>>>>>>>    End_Function
24069>>>>>>>>>
24069>>>>>>>>>    Procedure Set ComNewTabPosition XTPWorkspaceNewTabPosition value
24071>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to value
24072>>>>>>>>>    End_Procedure
24073>>>>>>>>>
24073>>>>>>>>>    Function ComRightToLeft Returns Boolean
24075>>>>>>>>>        Boolean retVal
24075>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
24076>>>>>>>>>        Function_Return retVal
24077>>>>>>>>>    End_Function
24078>>>>>>>>>
24078>>>>>>>>>    Procedure Set ComRightToLeft Boolean value
24080>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
24081>>>>>>>>>    End_Procedure
24082>>>>>>>>>
24082>>>>>>>>>    Function ComIgnoreFlickersOnActivate Returns Boolean
24084>>>>>>>>>        Boolean retVal
24084>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_BOOL to retVal
24085>>>>>>>>>        Function_Return retVal
24086>>>>>>>>>    End_Function
24087>>>>>>>>>
24087>>>>>>>>>    Procedure Set ComIgnoreFlickersOnActivate Boolean value
24089>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_BOOL to value
24090>>>>>>>>>    End_Procedure
24091>>>>>>>>>
24091>>>>>>>>>    Function ComAutoUpdateTabCaption Returns Boolean
24093>>>>>>>>>        Boolean retVal
24093>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_BOOL to retVal
24094>>>>>>>>>        Function_Return retVal
24095>>>>>>>>>    End_Function
24096>>>>>>>>>
24096>>>>>>>>>    Procedure Set ComAutoUpdateTabCaption Boolean value
24098>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_BOOL to value
24099>>>>>>>>>    End_Procedure
24100>>>>>>>>>
24100>>>>>>>>>    Function ComEnableMarkup Returns Boolean
24102>>>>>>>>>        Boolean retVal
24102>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
24103>>>>>>>>>        Function_Return retVal
24104>>>>>>>>>    End_Function
24105>>>>>>>>>
24105>>>>>>>>>    Procedure Set ComEnableMarkup Boolean value
24107>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
24108>>>>>>>>>    End_Procedure
24109>>>>>>>>>
24109>>>>>>>>>    Function ComPaintManager Returns Variant
24111>>>>>>>>>        Handle hDispatchDriver
24111>>>>>>>>>        Variant retVal
24111>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24112>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
24113>>>>>>>>>        Function_Return retVal
24114>>>>>>>>>    End_Function
24115>>>>>>>>>
24115>>>>>>>>>    Procedure ComEnableGroups
24117>>>>>>>>>        Handle hDispatchDriver
24117>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24118>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
24119>>>>>>>>>    End_Procedure
24120>>>>>>>>>
24120>>>>>>>>>    Procedure ComRefresh
24122>>>>>>>>>        Handle hDispatchDriver
24122>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24123>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
24124>>>>>>>>>    End_Procedure
24125>>>>>>>>>
24125>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
24127>>>>>>>>>        Handle hDispatchDriver
24127>>>>>>>>>        Variant retVal
24127>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24128>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24129>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24130>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
24131>>>>>>>>>        Function_Return retVal
24132>>>>>>>>>    End_Function
24133>>>>>>>>>
24133>>>>>>>>>    Function Com_NewEnum Returns Variant
24135>>>>>>>>>        Handle hDispatchDriver
24135>>>>>>>>>        Variant retVal
24135>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24136>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
24137>>>>>>>>>        Function_Return retVal
24138>>>>>>>>>    End_Function
24139>>>>>>>>>
24139>>>>>>>>>    Function ComItemCount Returns Integer
24141>>>>>>>>>        Handle hDispatchDriver
24141>>>>>>>>>        Integer retVal
24141>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24142>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
24143>>>>>>>>>        Function_Return retVal
24144>>>>>>>>>    End_Function
24145>>>>>>>>>
24145>>>>>>>>>    Function ComHitTest Integer llx Integer lly Returns Variant
24147>>>>>>>>>        Handle hDispatchDriver
24147>>>>>>>>>        Variant retVal
24147>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24148>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24149>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
24150>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
24151>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_DISPATCH to retVal
24152>>>>>>>>>        Function_Return retVal
24153>>>>>>>>>    End_Function
24154>>>>>>>>>
24154>>>>>>>>>    Function ComSelected Returns Variant
24156>>>>>>>>>        Handle hDispatchDriver
24156>>>>>>>>>        Variant retVal
24156>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24157>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_DISPATCH to retVal
24158>>>>>>>>>        Function_Return retVal
24159>>>>>>>>>    End_Function
24160>>>>>>>>>
24160>>>>>>>>>    Procedure ComDoWorkspaceCommand XTPWorkspaceCommand llId
24162>>>>>>>>>        Handle hDispatchDriver
24162>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24163>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24164>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24165>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
24166>>>>>>>>>    End_Procedure
24167>>>>>>>>>
24167>>>>>>>>>    Function ComIsWorkspaceCommandEnabled XTPWorkspaceCommand llId Returns Boolean
24169>>>>>>>>>        Handle hDispatchDriver
24169>>>>>>>>>        Boolean retVal
24169>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24170>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24171>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24172>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_BOOL to retVal
24173>>>>>>>>>        Function_Return retVal
24174>>>>>>>>>    End_Function
24175>>>>>>>>>
24175>>>>>>>>>    Function ComToolTipContext Returns Variant
24177>>>>>>>>>        Handle hDispatchDriver
24177>>>>>>>>>        Variant retVal
24177>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24178>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
24179>>>>>>>>>        Function_Return retVal
24180>>>>>>>>>    End_Function
24181>>>>>>>>>
24181>>>>>>>>>    Function ComGroupCount Returns Integer
24183>>>>>>>>>        Handle hDispatchDriver
24183>>>>>>>>>        Integer retVal
24183>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24184>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_I4 to retVal
24185>>>>>>>>>        Function_Return retVal
24186>>>>>>>>>    End_Function
24187>>>>>>>>>
24187>>>>>>>>>    Function ComFindItem OLE_HANDLE llhWnd Returns Variant
24189>>>>>>>>>        Handle hDispatchDriver
24189>>>>>>>>>        Variant retVal
24189>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24190>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24191>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
24192>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 21 OLE_VT_DISPATCH to retVal
24193>>>>>>>>>        Function_Return retVal
24194>>>>>>>>>    End_Function
24195>>>>>>>>>
24195>>>>>>>>>    Function ComFindGroup Variant llpItem Returns Integer
24197>>>>>>>>>        Handle hDispatchDriver
24197>>>>>>>>>        Integer retVal
24197>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24198>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24199>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpItem
24200>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 22 OLE_VT_I4 to retVal
24201>>>>>>>>>        Function_Return retVal
24202>>>>>>>>>    End_Function
24203>>>>>>>>>
24203>>>>>>>>>    Procedure ComCreateGroup Variant llItem Boolean llHoriz
24205>>>>>>>>>        Handle hDispatchDriver
24205>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24206>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24207>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llItem
24208>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llHoriz
24209>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
24210>>>>>>>>>    End_Procedure
24211>>>>>>>>>
24211>>>>>>>>>    Procedure ComMoveToGroup Variant llItem Integer llGroup
24213>>>>>>>>>        Handle hDispatchDriver
24213>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24214>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24215>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llItem
24216>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llGroup
24217>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 24 OLE_VT_VOID
24218>>>>>>>>>    End_Procedure
24219>>>>>>>>>
24219>>>>>>>>>    Function ComGroupSplitter Integer llGroup Returns Real
24221>>>>>>>>>        Handle hDispatchDriver
24221>>>>>>>>>        Real retVal
24221>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24222>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24223>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llGroup
24224>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 27 OLE_VT_R8 to retVal
24225>>>>>>>>>        Function_Return retVal
24226>>>>>>>>>    End_Function
24227>>>>>>>>>
24227>>>>>>>>>    Procedure Set ComGroupSplitter Integer llGroup Real value
24229>>>>>>>>>        Handle hDispatchDriver
24229>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24230>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24231>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llGroup
24232>>>>>>>>>        Set ComProperty of hDispatchDriver 27 OLE_VT_R8 to value
24233>>>>>>>>>    End_Procedure
24234>>>>>>>>>
24234>>>>>>>>>    Procedure ComShowNewWindowTab Boolean llShow Integer llCommand
24236>>>>>>>>>        Handle hDispatchDriver
24236>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24237>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24238>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShow
24239>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
24240>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
24241>>>>>>>>>    End_Procedure
24242>>>>>>>>>
24242>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
24244>>>>>>>>>        Handle hDispatchDriver
24244>>>>>>>>>        OLE_HANDLE retVal
24244>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24245>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
24246>>>>>>>>>        Function_Return retVal
24247>>>>>>>>>    End_Function
24248>>>>>>>>>End_Class
24249>>>>>>>>>
24249>>>>>>>>>// CLSID: {C0DE2200-9AF2-433A-BA6D-8D7B12B76E12}
24249>>>>>>>>>Class cCJITabWorkspaceEvents is a Mixin
24250>>>>>>>>>
24250>>>>>>>>>    Procedure OnComRClick Variant llItem
24252>>>>>>>>>    End_Procedure
24253>>>>>>>>>
24253>>>>>>>>>    Procedure OnComNewItem Variant llItem
24255>>>>>>>>>    End_Procedure
24256>>>>>>>>>
24256>>>>>>>>>    Procedure OnComSelectedChanged Variant llItem
24258>>>>>>>>>    End_Procedure
24259>>>>>>>>>
24259>>>>>>>>>    Procedure OnComBeforeItemClick Variant llItem
24261>>>>>>>>>    End_Procedure
24262>>>>>>>>>
24262>>>>>>>>>    Procedure RegisterComEvents
24264>>>>>>>>>        Send RegisterComEvent 1 msg_OnComRClick
24265>>>>>>>>>        Send RegisterComEvent 2 msg_OnComNewItem
24266>>>>>>>>>        Send RegisterComEvent 3 msg_OnComSelectedChanged
24267>>>>>>>>>        Send RegisterComEvent 4 msg_OnComBeforeItemClick
24268>>>>>>>>>    End_Procedure
24269>>>>>>>>>End_Class
24270>>>>>>>>>
24270>>>>>>>>>// CoClass
24270>>>>>>>>>// CLSID: {C0DE2200-C1B2-4583-B022-37367FE0CF90}
24270>>>>>>>>>Class cCJTabWorkspace is a cComAutomationObject
24271>>>>>>>>>    Import_Class_Protocol cCJITabWorkspace
24272>>>>>>>>>    Import_Class_Protocol cCJITabWorkspaceEvents
24273>>>>>>>>>
24273>>>>>>>>>    Procedure Construct_Object
24275>>>>>>>>>        Forward Send Construct_Object
24277>>>>>>>>>        Set psEventId to "{C0DE2200-9AF2-433A-BA6D-8D7B12B76E12}"
24278>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
24279>>>>>>>>>    End_Procedure
24280>>>>>>>>>End_Class
24281>>>>>>>>>
24281>>>>>>>>>// CLSID: {C0DE2200-7A0A-447D-9CDC-8F63E7E5AF55}
24281>>>>>>>>>// Dispatch interface for StatusBar Control
24281>>>>>>>>>Class cCJIStatusBar is a Mixin
24282>>>>>>>>>
24282>>>>>>>>>    Function ComVisible Returns Boolean
24284>>>>>>>>>        Boolean retVal
24284>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
24285>>>>>>>>>        Function_Return retVal
24286>>>>>>>>>    End_Function
24287>>>>>>>>>
24287>>>>>>>>>    Procedure Set ComVisible Boolean value
24289>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
24290>>>>>>>>>    End_Procedure
24291>>>>>>>>>
24291>>>>>>>>>    Function ComIdleText Returns String
24293>>>>>>>>>        String retVal
24293>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
24294>>>>>>>>>        Function_Return retVal
24295>>>>>>>>>    End_Function
24296>>>>>>>>>
24296>>>>>>>>>    Procedure Set ComIdleText String value
24298>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
24299>>>>>>>>>    End_Procedure
24300>>>>>>>>>
24300>>>>>>>>>    Function ComDrawDisabledText Returns Boolean
24302>>>>>>>>>        Boolean retVal
24302>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
24303>>>>>>>>>        Function_Return retVal
24304>>>>>>>>>    End_Function
24305>>>>>>>>>
24305>>>>>>>>>    Procedure Set ComDrawDisabledText Boolean value
24307>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
24308>>>>>>>>>    End_Procedure
24309>>>>>>>>>
24309>>>>>>>>>    Function ComMinHeight Returns Integer
24311>>>>>>>>>        Integer retVal
24311>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to retVal
24312>>>>>>>>>        Function_Return retVal
24313>>>>>>>>>    End_Function
24314>>>>>>>>>
24314>>>>>>>>>    Procedure Set ComMinHeight Integer value
24316>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to value
24317>>>>>>>>>    End_Procedure
24318>>>>>>>>>
24318>>>>>>>>>    Function ComFont Returns Variant
24320>>>>>>>>>        Variant retVal
24320>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
24321>>>>>>>>>        Function_Return retVal
24322>>>>>>>>>    End_Function
24323>>>>>>>>>
24323>>>>>>>>>    Procedure Set ComFont Variant value
24325>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
24326>>>>>>>>>    End_Procedure
24327>>>>>>>>>
24327>>>>>>>>>    Function ComShowSizeGripper Returns Boolean
24329>>>>>>>>>        Boolean retVal
24329>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BOOL to retVal
24330>>>>>>>>>        Function_Return retVal
24331>>>>>>>>>    End_Function
24332>>>>>>>>>
24332>>>>>>>>>    Procedure Set ComShowSizeGripper Boolean value
24334>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BOOL to value
24335>>>>>>>>>    End_Procedure
24336>>>>>>>>>
24336>>>>>>>>>    Function ComRibbonDividerIndex Returns Integer
24338>>>>>>>>>        Integer retVal
24338>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_I4 to retVal
24339>>>>>>>>>        Function_Return retVal
24340>>>>>>>>>    End_Function
24341>>>>>>>>>
24341>>>>>>>>>    Procedure Set ComRibbonDividerIndex Integer value
24343>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_I4 to value
24344>>>>>>>>>    End_Procedure
24345>>>>>>>>>
24345>>>>>>>>>    Function ComEnableMarkup Returns Boolean
24347>>>>>>>>>        Boolean retVal
24347>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
24348>>>>>>>>>        Function_Return retVal
24349>>>>>>>>>    End_Function
24350>>>>>>>>>
24350>>>>>>>>>    Procedure Set ComEnableMarkup Boolean value
24352>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
24353>>>>>>>>>    End_Procedure
24354>>>>>>>>>
24354>>>>>>>>>    Function ComIsAllCaps Returns Boolean
24356>>>>>>>>>        Boolean retVal
24356>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to retVal
24357>>>>>>>>>        Function_Return retVal
24358>>>>>>>>>    End_Function
24359>>>>>>>>>
24359>>>>>>>>>    Procedure Set ComIsAllCaps Boolean value
24361>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to value
24362>>>>>>>>>    End_Procedure
24363>>>>>>>>>
24363>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
24365>>>>>>>>>        Handle hDispatchDriver
24365>>>>>>>>>        OLE_HANDLE retVal
24365>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24366>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
24367>>>>>>>>>        Function_Return retVal
24368>>>>>>>>>    End_Function
24369>>>>>>>>>
24369>>>>>>>>>    Function ComAddPane Integer llId Returns Variant
24371>>>>>>>>>        Handle hDispatchDriver
24371>>>>>>>>>        Variant retVal
24371>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24372>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24373>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24374>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
24375>>>>>>>>>        Function_Return retVal
24376>>>>>>>>>    End_Function
24377>>>>>>>>>
24377>>>>>>>>>    Procedure ComSetPaneText Integer llIndex String llText
24379>>>>>>>>>        Handle hDispatchDriver
24379>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24380>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24381>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24382>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
24383>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
24384>>>>>>>>>    End_Procedure
24385>>>>>>>>>
24385>>>>>>>>>    Procedure ComSetPaneWidth Integer llIndex Integer llWidth
24387>>>>>>>>>        Handle hDispatchDriver
24387>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24388>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24389>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24390>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
24391>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
24392>>>>>>>>>    End_Procedure
24393>>>>>>>>>
24393>>>>>>>>>    Procedure ComSetPaneStyle Integer llIndex XTPStatusPaneStyle llStyle
24395>>>>>>>>>        Handle hDispatchDriver
24395>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24396>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24397>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24398>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llStyle
24399>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
24400>>>>>>>>>    End_Procedure
24401>>>>>>>>>
24401>>>>>>>>>    Function ComPane Integer llIndex Returns Variant
24403>>>>>>>>>        Handle hDispatchDriver
24403>>>>>>>>>        Variant retVal
24403>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24404>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24405>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24406>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
24407>>>>>>>>>        Function_Return retVal
24408>>>>>>>>>    End_Function
24409>>>>>>>>>
24409>>>>>>>>>    Function Com_NewEnum Returns Variant
24411>>>>>>>>>        Handle hDispatchDriver
24411>>>>>>>>>        Variant retVal
24411>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24412>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
24413>>>>>>>>>        Function_Return retVal
24414>>>>>>>>>    End_Function
24415>>>>>>>>>
24415>>>>>>>>>    Procedure ComRemoveAll
24417>>>>>>>>>        Handle hDispatchDriver
24417>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24418>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
24419>>>>>>>>>    End_Procedure
24420>>>>>>>>>
24420>>>>>>>>>    Function ComPaneCount Returns Integer
24422>>>>>>>>>        Handle hDispatchDriver
24422>>>>>>>>>        Integer retVal
24422>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24423>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_I4 to retVal
24424>>>>>>>>>        Function_Return retVal
24425>>>>>>>>>    End_Function
24426>>>>>>>>>
24426>>>>>>>>>    Function ComInsertPane Integer llIndex Integer llId Returns Variant
24428>>>>>>>>>        Handle hDispatchDriver
24428>>>>>>>>>        Variant retVal
24428>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24429>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24430>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24431>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24432>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_DISPATCH to retVal
24433>>>>>>>>>        Function_Return retVal
24434>>>>>>>>>    End_Function
24435>>>>>>>>>
24435>>>>>>>>>    Function ComFindPane Integer llId Returns Variant
24437>>>>>>>>>        Handle hDispatchDriver
24437>>>>>>>>>        Variant retVal
24437>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24438>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24439>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24440>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
24441>>>>>>>>>        Function_Return retVal
24442>>>>>>>>>    End_Function
24443>>>>>>>>>
24443>>>>>>>>>    Function ComHitTest Integer llx Integer lly Returns Variant
24445>>>>>>>>>        Handle hDispatchDriver
24445>>>>>>>>>        Variant retVal
24445>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24446>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24447>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
24448>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
24449>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
24450>>>>>>>>>        Function_Return retVal
24451>>>>>>>>>    End_Function
24452>>>>>>>>>
24452>>>>>>>>>    Function ComToolTipContext Returns Variant
24454>>>>>>>>>        Handle hDispatchDriver
24454>>>>>>>>>        Variant retVal
24454>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24455>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 15 OLE_VT_DISPATCH to retVal
24456>>>>>>>>>        Function_Return retVal
24457>>>>>>>>>    End_Function
24458>>>>>>>>>
24458>>>>>>>>>    Function ComAddSwitchPane Integer llId Returns Variant
24460>>>>>>>>>        Handle hDispatchDriver
24460>>>>>>>>>        Variant retVal
24460>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24461>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24462>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24463>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 17 OLE_VT_DISPATCH to retVal
24464>>>>>>>>>        Function_Return retVal
24465>>>>>>>>>    End_Function
24466>>>>>>>>>
24466>>>>>>>>>    Function ComAddSliderPane Integer llId Returns Variant
24468>>>>>>>>>        Handle hDispatchDriver
24468>>>>>>>>>        Variant retVal
24468>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24469>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24470>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24471>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 18 OLE_VT_DISPATCH to retVal
24472>>>>>>>>>        Function_Return retVal
24473>>>>>>>>>    End_Function
24474>>>>>>>>>
24474>>>>>>>>>    Function ComAddProgressPane Integer llId Returns Variant
24476>>>>>>>>>        Handle hDispatchDriver
24476>>>>>>>>>        Variant retVal
24476>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24477>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24478>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24479>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 21 OLE_VT_DISPATCH to retVal
24480>>>>>>>>>        Function_Return retVal
24481>>>>>>>>>    End_Function
24482>>>>>>>>>
24482>>>>>>>>>    Procedure ComEnableCustomization Boolean llEnable
24484>>>>>>>>>        Handle hDispatchDriver
24484>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24485>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24486>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24487>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
24488>>>>>>>>>    End_Procedure
24489>>>>>>>>>
24489>>>>>>>>>    Procedure ComSetAllCaps Boolean llSetAllCaps
24491>>>>>>>>>        Handle hDispatchDriver
24491>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24492>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24493>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllCaps
24494>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
24495>>>>>>>>>    End_Procedure
24496>>>>>>>>>End_Class
24497>>>>>>>>>
24497>>>>>>>>>// CLSID: {C0DE2200-4037-4B66-82A3-D948409E11A6}
24497>>>>>>>>>Class cCJIStatusBarEvents is a Mixin
24498>>>>>>>>>
24498>>>>>>>>>    Procedure OnComMouseDown Short llButton Short llShift Integer llx Integer lly
24500>>>>>>>>>    End_Procedure
24501>>>>>>>>>
24501>>>>>>>>>    Procedure OnComMouseUp Short llButton Short llShift Integer llx Integer lly
24503>>>>>>>>>    End_Procedure
24504>>>>>>>>>
24504>>>>>>>>>    Procedure OnComPaneDblClick Variant llPane
24506>>>>>>>>>    End_Procedure
24507>>>>>>>>>
24507>>>>>>>>>    Procedure OnComPaneClick Variant llPane
24509>>>>>>>>>    End_Procedure
24510>>>>>>>>>
24510>>>>>>>>>    Procedure OnComSwitchPaneClick Variant llPane Integer llSwitch
24512>>>>>>>>>    End_Procedure
24513>>>>>>>>>
24513>>>>>>>>>    Procedure OnComSliderPaneClick Variant llPane XTPSliderCommand llCommand Integer llPos
24515>>>>>>>>>    End_Procedure
24516>>>>>>>>>
24516>>>>>>>>>    Procedure RegisterComEvents
24518>>>>>>>>>        Send RegisterComEvent -605 msg_OnComMouseDown
24519>>>>>>>>>        Send RegisterComEvent -607 msg_OnComMouseUp
24520>>>>>>>>>        Send RegisterComEvent 1 msg_OnComPaneDblClick
24521>>>>>>>>>        Send RegisterComEvent 2 msg_OnComPaneClick
24522>>>>>>>>>        Send RegisterComEvent 3 msg_OnComSwitchPaneClick
24523>>>>>>>>>        Send RegisterComEvent 4 msg_OnComSliderPaneClick
24524>>>>>>>>>    End_Procedure
24525>>>>>>>>>End_Class
24526>>>>>>>>>
24526>>>>>>>>>// CoClass
24526>>>>>>>>>// CLSID: {C0DE2200-0AC9-4997-B4D7-75B0F2E7E4BD}
24526>>>>>>>>>// Xtreme StatusBar Control
24526>>>>>>>>>Class cCJComStatusBar is a cComAutomationObject
24527>>>>>>>>>    Import_Class_Protocol cCJIStatusBar
24528>>>>>>>>>    Import_Class_Protocol cCJIStatusBarEvents
24529>>>>>>>>>
24529>>>>>>>>>    Procedure Construct_Object
24531>>>>>>>>>        Forward Send Construct_Object
24533>>>>>>>>>        Set psEventId to "{C0DE2200-4037-4B66-82A3-D948409E11A6}"
24534>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
24535>>>>>>>>>    End_Procedure
24536>>>>>>>>>End_Class
24537>>>>>>>>>
24537>>>>>>>>>// CLSID: {C0DE2200-97D0-43D4-BEE8-9E2511D89F64}
24537>>>>>>>>>// Dispatch interface for CommandBars Control
24537>>>>>>>>>Class cCJ_DCommandBarsFrame is a Mixin
24538>>>>>>>>>
24538>>>>>>>>>    Function ComVisualTheme Returns XTPVisualTheme
24540>>>>>>>>>        XTPVisualTheme retVal
24540>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
24541>>>>>>>>>        Function_Return retVal
24542>>>>>>>>>    End_Function
24543>>>>>>>>>
24543>>>>>>>>>    Procedure Set ComVisualTheme XTPVisualTheme value
24545>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
24546>>>>>>>>>    End_Procedure
24547>>>>>>>>>
24547>>>>>>>>>    Function ComIcons Returns Variant
24549>>>>>>>>>        Variant retVal
24549>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
24550>>>>>>>>>        Function_Return retVal
24551>>>>>>>>>    End_Function
24552>>>>>>>>>
24552>>>>>>>>>    Procedure Set ComIcons Variant value
24554>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
24555>>>>>>>>>    End_Procedure
24556>>>>>>>>>
24556>>>>>>>>>    Function ComScaleMode Returns XTPScaleMode
24558>>>>>>>>>        XTPScaleMode retVal
24558>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
24559>>>>>>>>>        Function_Return retVal
24560>>>>>>>>>    End_Function
24561>>>>>>>>>
24561>>>>>>>>>    Procedure Set ComScaleMode XTPScaleMode value
24563>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
24564>>>>>>>>>    End_Procedure
24565>>>>>>>>>
24565>>>>>>>>>    Function ComRightToLeft Returns Boolean
24567>>>>>>>>>        Boolean retVal
24567>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to retVal
24568>>>>>>>>>        Function_Return retVal
24569>>>>>>>>>    End_Function
24570>>>>>>>>>
24570>>>>>>>>>    Procedure Set ComRightToLeft Boolean value
24572>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to value
24573>>>>>>>>>    End_Procedure
24574>>>>>>>>>
24574>>>>>>>>>    Function ComIsAllCaps Returns Boolean
24576>>>>>>>>>        Boolean retVal
24576>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_BOOL to retVal
24577>>>>>>>>>        Function_Return retVal
24578>>>>>>>>>    End_Function
24579>>>>>>>>>
24579>>>>>>>>>    Procedure Set ComIsAllCaps Boolean value
24581>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_BOOL to value
24582>>>>>>>>>    End_Procedure
24583>>>>>>>>>
24583>>>>>>>>>    Function ComIsAllowFrameTransparency Returns Boolean
24585>>>>>>>>>        Boolean retVal
24585>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_BOOL to retVal
24586>>>>>>>>>        Function_Return retVal
24587>>>>>>>>>    End_Function
24588>>>>>>>>>
24588>>>>>>>>>    Procedure Set ComIsAllowFrameTransparency Boolean value
24590>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_BOOL to value
24591>>>>>>>>>    End_Procedure
24592>>>>>>>>>
24592>>>>>>>>>    Function ComReCreateReparented Returns Boolean
24594>>>>>>>>>        Boolean retVal
24594>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
24595>>>>>>>>>        Function_Return retVal
24596>>>>>>>>>    End_Function
24597>>>>>>>>>
24597>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
24599>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
24600>>>>>>>>>    End_Procedure
24601>>>>>>>>>
24601>>>>>>>>>    Function ComCount Returns Integer
24603>>>>>>>>>        Handle hDispatchDriver
24603>>>>>>>>>        Integer retVal
24603>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24604>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
24605>>>>>>>>>        Function_Return retVal
24606>>>>>>>>>    End_Function
24607>>>>>>>>>
24607>>>>>>>>>    // Returns a specific item.
24607>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
24609>>>>>>>>>        Handle hDispatchDriver
24609>>>>>>>>>        Variant retVal
24609>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24610>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24611>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24612>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
24613>>>>>>>>>        Function_Return retVal
24614>>>>>>>>>    End_Function
24615>>>>>>>>>
24615>>>>>>>>>    Function Com_NewEnum Returns Variant
24617>>>>>>>>>        Handle hDispatchDriver
24617>>>>>>>>>        Variant retVal
24617>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24618>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
24619>>>>>>>>>        Function_Return retVal
24620>>>>>>>>>    End_Function
24621>>>>>>>>>
24621>>>>>>>>>    Function ComAdd String llName XTPBarPosition llPosition Returns Variant
24623>>>>>>>>>        Handle hDispatchDriver
24623>>>>>>>>>        Variant retVal
24623>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24624>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24625>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24626>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
24627>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
24628>>>>>>>>>        Function_Return retVal
24629>>>>>>>>>    End_Function
24630>>>>>>>>>
24630>>>>>>>>>    Procedure ComAddImageList Variant llImageList
24632>>>>>>>>>        Handle hDispatchDriver
24632>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24633>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24634>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llImageList
24635>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
24636>>>>>>>>>    End_Procedure
24637>>>>>>>>>
24637>>>>>>>>>    Function ComActiveMenuBar Returns Variant
24639>>>>>>>>>        Handle hDispatchDriver
24639>>>>>>>>>        Variant retVal
24639>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24640>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
24641>>>>>>>>>        Function_Return retVal
24642>>>>>>>>>    End_Function
24643>>>>>>>>>
24643>>>>>>>>>    Procedure ComGetClientRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
24645>>>>>>>>>        Handle hDispatchDriver
24645>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24646>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24647>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
24648>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
24649>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
24650>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
24651>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
24652>>>>>>>>>    End_Procedure
24653>>>>>>>>>
24653>>>>>>>>>    Procedure ComRecalcLayout
24655>>>>>>>>>        Handle hDispatchDriver
24655>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24656>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
24657>>>>>>>>>    End_Procedure
24658>>>>>>>>>
24658>>>>>>>>>    Function ComKeyBindings Returns Variant
24660>>>>>>>>>        Handle hDispatchDriver
24660>>>>>>>>>        Variant retVal
24660>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24661>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_DISPATCH to retVal
24662>>>>>>>>>        Function_Return retVal
24663>>>>>>>>>    End_Function
24664>>>>>>>>>
24664>>>>>>>>>    Procedure ComAddIconHandle Integer llIcon Integer llCommand Integer llimageState Boolean llAlpha
24666>>>>>>>>>        Handle hDispatchDriver
24666>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24667>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24668>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIcon
24669>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
24670>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
24671>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llAlpha
24672>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
24673>>>>>>>>>    End_Procedure
24674>>>>>>>>>
24674>>>>>>>>>    Function ComOptions Returns Variant
24676>>>>>>>>>        Handle hDispatchDriver
24676>>>>>>>>>        Variant retVal
24676>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24677>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
24678>>>>>>>>>        Function_Return retVal
24679>>>>>>>>>    End_Function
24680>>>>>>>>>
24680>>>>>>>>>    Procedure ComSaveCommandBars Variant llRegistryKey Variant llAppName Variant llSection
24682>>>>>>>>>        Handle hDispatchDriver
24682>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24683>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
24684>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRegistryKey
24685>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llAppName
24686>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSection
24687>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
24688>>>>>>>>>    End_Procedure
24689>>>>>>>>>
24689>>>>>>>>>    Procedure ComLoadCommandBars Variant llRegistryKey Variant llAppName Variant llSection
24691>>>>>>>>>        Handle hDispatchDriver
24691>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24692>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
24693>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRegistryKey
24694>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llAppName
24695>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSection
24696>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
24697>>>>>>>>>    End_Procedure
24698>>>>>>>>>
24698>>>>>>>>>    Procedure ComLoadDesignerBars Variant llFileNameOrResource Variant llInstance
24700>>>>>>>>>        Handle hDispatchDriver
24700>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24701>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24702>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFileNameOrResource
24703>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llInstance
24704>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
24705>>>>>>>>>    End_Procedure
24706>>>>>>>>>
24706>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
24708>>>>>>>>>        Handle hDispatchDriver
24708>>>>>>>>>        Variant retVal
24708>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24709>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24710>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
24711>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
24712>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
24713>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
24714>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
24715>>>>>>>>>        Function_Return retVal
24716>>>>>>>>>    End_Function
24717>>>>>>>>>
24717>>>>>>>>>    Procedure ComAboutBox
24719>>>>>>>>>        Handle hDispatchDriver
24719>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24720>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
24721>>>>>>>>>    End_Procedure
24722>>>>>>>>>
24722>>>>>>>>>    Procedure ComDockToolBar Variant llToolBar Integer llx Integer lly XTPBarPosition llPosition
24724>>>>>>>>>        Handle hDispatchDriver
24724>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24725>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24726>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llToolBar
24727>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
24728>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
24729>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
24730>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
24731>>>>>>>>>    End_Procedure
24732>>>>>>>>>
24732>>>>>>>>>    Function ComGetSpecialColor XTPColorManagerColor llIndex Returns OLE_COLOR
24734>>>>>>>>>        Handle hDispatchDriver
24734>>>>>>>>>        OLE_COLOR retVal
24734>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24735>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24736>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24737>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 19 OLE_VT_I4 to retVal
24738>>>>>>>>>        Function_Return retVal
24739>>>>>>>>>    End_Function
24740>>>>>>>>>
24740>>>>>>>>>    Function ComShowTabWorkspace Boolean llShow Returns Variant
24742>>>>>>>>>        Handle hDispatchDriver
24742>>>>>>>>>        Variant retVal
24742>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24743>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24744>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShow
24745>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
24746>>>>>>>>>        Function_Return retVal
24747>>>>>>>>>    End_Function
24748>>>>>>>>>
24748>>>>>>>>>    Procedure ComMoveAlignedControl Variant llControl Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
24750>>>>>>>>>        Handle hDispatchDriver
24750>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24751>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
24752>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llControl
24753>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
24754>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
24755>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
24756>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
24757>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
24758>>>>>>>>>    End_Procedure
24759>>>>>>>>>
24759>>>>>>>>>    Function ComTabWorkspace Returns Variant
24761>>>>>>>>>        Handle hDispatchDriver
24761>>>>>>>>>        Variant retVal
24761>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24762>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 22 OLE_VT_DISPATCH to retVal
24763>>>>>>>>>        Function_Return retVal
24764>>>>>>>>>    End_Function
24765>>>>>>>>>
24765>>>>>>>>>    Procedure ComLoadStateFromString String llProfile Boolean llRestoreControls Boolean llRestoreOptions Boolean llSilent
24767>>>>>>>>>        Handle hDispatchDriver
24767>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24768>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24769>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
24770>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRestoreControls
24771>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRestoreOptions
24772>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSilent
24773>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
24774>>>>>>>>>    End_Procedure
24775>>>>>>>>>
24775>>>>>>>>>    Function ComSaveStateToString Boolean llSaveControls Boolean llSaveOnlyCustomized Boolean llSaveOptions Returns String
24777>>>>>>>>>        Handle hDispatchDriver
24777>>>>>>>>>        String retVal
24777>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24778>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
24779>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveControls
24780>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveOnlyCustomized
24781>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveOptions
24782>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 24 OLE_VT_BSTR to retVal
24783>>>>>>>>>        Function_Return retVal
24784>>>>>>>>>    End_Function
24785>>>>>>>>>
24785>>>>>>>>>    Function ComStatusBar Returns Variant
24787>>>>>>>>>        Handle hDispatchDriver
24787>>>>>>>>>        Variant retVal
24787>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24788>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 25 OLE_VT_DISPATCH to retVal
24789>>>>>>>>>        Function_Return retVal
24790>>>>>>>>>    End_Function
24791>>>>>>>>>
24791>>>>>>>>>    Function ComMessageBar Returns Variant
24793>>>>>>>>>        Handle hDispatchDriver
24793>>>>>>>>>        Variant retVal
24793>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24794>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 28 OLE_VT_DISPATCH to retVal
24795>>>>>>>>>        Function_Return retVal
24796>>>>>>>>>    End_Function
24797>>>>>>>>>
24797>>>>>>>>>    Procedure ComEnableCustomization Boolean llEnable
24799>>>>>>>>>        Handle hDispatchDriver
24799>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24800>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24801>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24802>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 26 OLE_VT_VOID
24803>>>>>>>>>    End_Procedure
24804>>>>>>>>>
24804>>>>>>>>>    Function ComDesignerControls Returns Variant
24806>>>>>>>>>        Handle hDispatchDriver
24806>>>>>>>>>        Variant retVal
24806>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24807>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 27 OLE_VT_DISPATCH to retVal
24808>>>>>>>>>        Function_Return retVal
24809>>>>>>>>>    End_Function
24810>>>>>>>>>
24810>>>>>>>>>    Procedure ComEnableDefaultResetCustomizedToolbarChoice Boolean llEnable Boolean llDefaultYes
24812>>>>>>>>>        Handle hDispatchDriver
24812>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24813>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24814>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24815>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llDefaultYes
24816>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 72 OLE_VT_VOID
24817>>>>>>>>>    End_Procedure
24818>>>>>>>>>
24818>>>>>>>>>    Function ComGetDispatch Returns Variant
24820>>>>>>>>>        Handle hDispatchDriver
24820>>>>>>>>>        Variant retVal
24820>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24821>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 31 OLE_VT_DISPATCH to retVal
24822>>>>>>>>>        Function_Return retVal
24823>>>>>>>>>    End_Function
24824>>>>>>>>>
24824>>>>>>>>>    Procedure ComSetMDIClient OLE_HANDLE llhWnd
24826>>>>>>>>>        Handle hDispatchDriver
24826>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24827>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24828>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
24829>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
24830>>>>>>>>>    End_Procedure
24831>>>>>>>>>
24831>>>>>>>>>    Function ComGlobalSettings Returns Variant
24833>>>>>>>>>        Handle hDispatchDriver
24833>>>>>>>>>        Variant retVal
24833>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24834>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_DISPATCH to retVal
24835>>>>>>>>>        Function_Return retVal
24836>>>>>>>>>    End_Function
24837>>>>>>>>>
24837>>>>>>>>>    Procedure ComClosePopups
24839>>>>>>>>>        Handle hDispatchDriver
24839>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24840>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 34 OLE_VT_VOID
24841>>>>>>>>>    End_Procedure
24842>>>>>>>>>
24842>>>>>>>>>    Procedure ComSetSpecialColor XTPColorManagerColor llIndex OLE_COLOR llColor
24844>>>>>>>>>        Handle hDispatchDriver
24844>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24845>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24846>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24847>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
24848>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
24849>>>>>>>>>    End_Procedure
24850>>>>>>>>>
24850>>>>>>>>>    Function ComAddDialogBar String llName XTPBarPosition llPosition Returns Variant
24852>>>>>>>>>        Handle hDispatchDriver
24852>>>>>>>>>        Variant retVal
24852>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24853>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24854>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24855>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
24856>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 36 OLE_VT_DISPATCH to retVal
24857>>>>>>>>>        Function_Return retVal
24858>>>>>>>>>    End_Function
24859>>>>>>>>>
24859>>>>>>>>>    Procedure ComLoadStateFromXMLString String llProfile String llstate Variant llOptions
24861>>>>>>>>>        Handle hDispatchDriver
24861>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24862>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
24863>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
24864>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstate
24865>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
24866>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
24867>>>>>>>>>    End_Procedure
24868>>>>>>>>>
24868>>>>>>>>>    Function ComSaveStateToXMLString String llProfile Variant llOptions Returns String
24870>>>>>>>>>        Handle hDispatchDriver
24870>>>>>>>>>        String retVal
24870>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24871>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24872>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
24873>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
24874>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 38 OLE_VT_BSTR to retVal
24875>>>>>>>>>        Function_Return retVal
24876>>>>>>>>>    End_Function
24877>>>>>>>>>
24877>>>>>>>>>    Function ComCreateStateOptions Returns Variant
24879>>>>>>>>>        Handle hDispatchDriver
24879>>>>>>>>>        Variant retVal
24879>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24880>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 39 OLE_VT_DISPATCH to retVal
24881>>>>>>>>>        Function_Return retVal
24882>>>>>>>>>    End_Function
24883>>>>>>>>>
24883>>>>>>>>>    Procedure ComDoPropExchange Variant llpPX Variant llOptions
24885>>>>>>>>>        Handle hDispatchDriver
24885>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24886>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24887>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpPX
24888>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
24889>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 45 OLE_VT_VOID
24890>>>>>>>>>    End_Procedure
24891>>>>>>>>>
24891>>>>>>>>>    Function ComCustomizedControl Returns Variant
24893>>>>>>>>>        Handle hDispatchDriver
24893>>>>>>>>>        Variant retVal
24893>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24894>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_DISPATCH to retVal
24895>>>>>>>>>        Function_Return retVal
24896>>>>>>>>>    End_Function
24897>>>>>>>>>
24897>>>>>>>>>    // Deletes all of the toolbars
24897>>>>>>>>>    Procedure ComDeleteAll
24899>>>>>>>>>        Handle hDispatchDriver
24899>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24900>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 41 OLE_VT_VOID
24901>>>>>>>>>    End_Procedure
24902>>>>>>>>>
24902>>>>>>>>>    Function ComToolTipContext Returns Variant
24904>>>>>>>>>        Handle hDispatchDriver
24904>>>>>>>>>        Variant retVal
24904>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24905>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 42 OLE_VT_DISPATCH to retVal
24906>>>>>>>>>        Function_Return retVal
24907>>>>>>>>>    End_Function
24908>>>>>>>>>
24908>>>>>>>>>    Function ComTrackingMode Returns Boolean
24910>>>>>>>>>        Handle hDispatchDriver
24910>>>>>>>>>        Boolean retVal
24910>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24911>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_BOOL to retVal
24912>>>>>>>>>        Function_Return retVal
24913>>>>>>>>>    End_Function
24914>>>>>>>>>
24914>>>>>>>>>    Function ComFocusedCommandBar Returns Variant
24916>>>>>>>>>        Handle hDispatchDriver
24916>>>>>>>>>        Variant retVal
24916>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24917>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_DISPATCH to retVal
24918>>>>>>>>>        Function_Return retVal
24919>>>>>>>>>    End_Function
24920>>>>>>>>>
24920>>>>>>>>>    Function ComAddMenuBar String llName Returns Variant
24922>>>>>>>>>        Handle hDispatchDriver
24922>>>>>>>>>        Variant retVal
24922>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24923>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24924>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24925>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 47 OLE_VT_DISPATCH to retVal
24926>>>>>>>>>        Function_Return retVal
24927>>>>>>>>>    End_Function
24928>>>>>>>>>
24928>>>>>>>>>    Function ComAddTabToolBar String llName Returns Variant
24930>>>>>>>>>        Handle hDispatchDriver
24930>>>>>>>>>        Variant retVal
24930>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24931>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24932>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24933>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 48 OLE_VT_DISPATCH to retVal
24934>>>>>>>>>        Function_Return retVal
24935>>>>>>>>>    End_Function
24936>>>>>>>>>
24936>>>>>>>>>    Function ComAddRibbonBar String llName Returns Variant
24938>>>>>>>>>        Handle hDispatchDriver
24938>>>>>>>>>        Variant retVal
24938>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24939>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24940>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24941>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 49 OLE_VT_DISPATCH to retVal
24942>>>>>>>>>        Function_Return retVal
24943>>>>>>>>>    End_Function
24944>>>>>>>>>
24944>>>>>>>>>    Procedure ComAttachToWindow OLE_HANDLE llhWnd
24946>>>>>>>>>        Handle hDispatchDriver
24946>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24947>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24948>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
24949>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 50 OLE_VT_VOID
24950>>>>>>>>>    End_Procedure
24951>>>>>>>>>
24951>>>>>>>>>    Procedure ComShowCustomizeDialog Integer llActiveTab
24953>>>>>>>>>        Handle hDispatchDriver
24953>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24954>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24955>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llActiveTab
24956>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 51 OLE_VT_VOID
24957>>>>>>>>>    End_Procedure
24958>>>>>>>>>
24958>>>>>>>>>    Procedure ComEnableOffice2007Frame Boolean llEnable
24960>>>>>>>>>        Handle hDispatchDriver
24960>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24961>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24962>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24963>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 52 OLE_VT_VOID
24964>>>>>>>>>    End_Procedure
24965>>>>>>>>>
24965>>>>>>>>>    Procedure ComEnableFrameTheme Boolean llEnable
24967>>>>>>>>>        Handle hDispatchDriver
24967>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24968>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24969>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24970>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 90 OLE_VT_VOID
24971>>>>>>>>>    End_Procedure
24972>>>>>>>>>
24972>>>>>>>>>    Procedure ComEnableActions
24974>>>>>>>>>        Handle hDispatchDriver
24974>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24975>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 53 OLE_VT_VOID
24976>>>>>>>>>    End_Procedure
24977>>>>>>>>>
24977>>>>>>>>>    Function ComActions Returns Variant
24979>>>>>>>>>        Handle hDispatchDriver
24979>>>>>>>>>        Variant retVal
24979>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24980>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 54 OLE_VT_DISPATCH to retVal
24981>>>>>>>>>        Function_Return retVal
24982>>>>>>>>>    End_Function
24983>>>>>>>>>
24983>>>>>>>>>    Function ComPaintManager Returns Variant
24985>>>>>>>>>        Handle hDispatchDriver
24985>>>>>>>>>        Variant retVal
24985>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24986>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 55 OLE_VT_DISPATCH to retVal
24987>>>>>>>>>        Function_Return retVal
24988>>>>>>>>>    End_Function
24989>>>>>>>>>
24989>>>>>>>>>    Function ComCreateGalleryItems Integer llId Returns Variant
24991>>>>>>>>>        Handle hDispatchDriver
24991>>>>>>>>>        Variant retVal
24991>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24992>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24993>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24994>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 56 OLE_VT_DISPATCH to retVal
24995>>>>>>>>>        Function_Return retVal
24996>>>>>>>>>    End_Function
24997>>>>>>>>>
24997>>>>>>>>>    Procedure ComEnableOffice2007FrameHandle OLE_HANDLE llhWnd
24999>>>>>>>>>        Handle hDispatchDriver
24999>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25000>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25001>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
25002>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 57 OLE_VT_VOID
25003>>>>>>>>>    End_Procedure
25004>>>>>>>>>
25004>>>>>>>>>    Procedure ComEnableFrameThemeHandle OLE_HANDLE llhWnd
25006>>>>>>>>>        Handle hDispatchDriver
25006>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25007>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25008>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
25009>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 100 OLE_VT_VOID
25010>>>>>>>>>    End_Procedure
25011>>>>>>>>>
25011>>>>>>>>>    Function ComCreateCommandBarControl String llClassName Returns Variant
25013>>>>>>>>>        Handle hDispatchDriver
25013>>>>>>>>>        Variant retVal
25013>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25014>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25015>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
25016>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 58 OLE_VT_DISPATCH to retVal
25017>>>>>>>>>        Function_Return retVal
25018>>>>>>>>>    End_Function
25019>>>>>>>>>
25019>>>>>>>>>    Function ComCreateCommandBar String llClassName Returns Variant
25021>>>>>>>>>        Handle hDispatchDriver
25021>>>>>>>>>        Variant retVal
25021>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25022>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25023>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
25024>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 59 OLE_VT_DISPATCH to retVal
25025>>>>>>>>>        Function_Return retVal
25026>>>>>>>>>    End_Function
25027>>>>>>>>>
25027>>>>>>>>>    Function ComContextHelp Returns Integer
25029>>>>>>>>>        Handle hDispatchDriver
25029>>>>>>>>>        Integer retVal
25029>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25030>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 60 OLE_VT_I4 to retVal
25031>>>>>>>>>        Function_Return retVal
25032>>>>>>>>>    End_Function
25033>>>>>>>>>
25033>>>>>>>>>    Function ComContextMenus Returns Variant
25035>>>>>>>>>        Handle hDispatchDriver
25035>>>>>>>>>        Variant retVal
25035>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25036>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 61 OLE_VT_DISPATCH to retVal
25037>>>>>>>>>        Function_Return retVal
25038>>>>>>>>>    End_Function
25039>>>>>>>>>
25039>>>>>>>>>    Procedure ComOLEDrag
25041>>>>>>>>>        Handle hDispatchDriver
25041>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25042>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 62 OLE_VT_VOID
25043>>>>>>>>>    End_Procedure
25044>>>>>>>>>
25044>>>>>>>>>    Function ComAddMiniToolBar String llName Returns Variant
25046>>>>>>>>>        Handle hDispatchDriver
25046>>>>>>>>>        Variant retVal
25046>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25047>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25048>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
25049>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 63 OLE_VT_DISPATCH to retVal
25050>>>>>>>>>        Function_Return retVal
25051>>>>>>>>>    End_Function
25052>>>>>>>>>
25052>>>>>>>>>    Function ComRecentFileList Returns Variant
25054>>>>>>>>>        Handle hDispatchDriver
25054>>>>>>>>>        Variant retVal
25054>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25055>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 64 OLE_VT_DISPATCH to retVal
25056>>>>>>>>>        Function_Return retVal
25057>>>>>>>>>    End_Function
25058>>>>>>>>>
25058>>>>>>>>>    Procedure ComDisableOffice2007FrameHandle OLE_HANDLE llhWnd
25060>>>>>>>>>        Handle hDispatchDriver
25060>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25061>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25062>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
25063>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 65 OLE_VT_VOID
25064>>>>>>>>>    End_Procedure
25065>>>>>>>>>
25065>>>>>>>>>    Procedure ComDisableFrameThemeHandle OLE_HANDLE llhWnd
25067>>>>>>>>>        Handle hDispatchDriver
25067>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25068>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25069>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
25070>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 110 OLE_VT_VOID
25071>>>>>>>>>    End_Procedure
25072>>>>>>>>>
25072>>>>>>>>>    Procedure ComAddCustomBar Variant llCommandBar String llName XTPBarPosition llPosition
25074>>>>>>>>>        Handle hDispatchDriver
25074>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25075>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
25076>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llCommandBar
25077>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
25078>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
25079>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 66 OLE_VT_VOID
25080>>>>>>>>>    End_Procedure
25081>>>>>>>>>
25081>>>>>>>>>    Procedure ComEnableToolbarComposition Boolean llEnable
25083>>>>>>>>>        Handle hDispatchDriver
25083>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25084>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25085>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
25086>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 67 OLE_VT_VOID
25087>>>>>>>>>    End_Procedure
25088>>>>>>>>>
25088>>>>>>>>>    Procedure ComSetAllCaps Boolean llSetAllCaps
25090>>>>>>>>>        Handle hDispatchDriver
25090>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25091>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25092>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllCaps
25093>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 68 OLE_VT_VOID
25094>>>>>>>>>    End_Procedure
25095>>>>>>>>>
25095>>>>>>>>>    Procedure ComAllowFrameTransparency Boolean llSetAllowTransparency
25097>>>>>>>>>        Handle hDispatchDriver
25097>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25098>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25099>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllowTransparency
25100>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 70 OLE_VT_VOID
25101>>>>>>>>>    End_Procedure
25102>>>>>>>>>
25102>>>>>>>>>    Function ComSetOfficeSetBackImage XTPBackImage llBackImage Returns Boolean
25104>>>>>>>>>        Handle hDispatchDriver
25104>>>>>>>>>        Boolean retVal
25104>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25105>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25106>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBackImage
25107>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 80 OLE_VT_BOOL to retVal
25108>>>>>>>>>        Function_Return retVal
25109>>>>>>>>>    End_Function
25110>>>>>>>>>End_Class
25111>>>>>>>>>
25111>>>>>>>>>// CLSID: {C0DE2200-D2EF-4119-BBBB-8314B5794E11}
25111>>>>>>>>>// Event interface for CommandBars Control
25111>>>>>>>>>Class cCJ_DCommandBarsFrameEvents is a Mixin
25112>>>>>>>>>
25112>>>>>>>>>    Procedure OnComExecute Variant llControl
25114>>>>>>>>>    End_Procedure
25115>>>>>>>>>
25115>>>>>>>>>    Procedure OnComUpdate Variant llControl
25117>>>>>>>>>    End_Procedure
25118>>>>>>>>>
25118>>>>>>>>>    Procedure OnComResize
25120>>>>>>>>>    End_Procedure
25121>>>>>>>>>
25121>>>>>>>>>    Procedure OnComGetClientBordersWidth Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
25123>>>>>>>>>    End_Procedure
25124>>>>>>>>>
25124>>>>>>>>>    Procedure OnComControlSelected Variant llControl
25126>>>>>>>>>    End_Procedure
25127>>>>>>>>>
25127>>>>>>>>>    Procedure OnComInitCommandsPopup Variant llCommandBar
25129>>>>>>>>>    End_Procedure
25130>>>>>>>>>
25130>>>>>>>>>    Procedure OnComResizeClient Integer llLeft Integer llTop Integer llRight Integer llBottom
25132>>>>>>>>>    End_Procedure
25133>>>>>>>>>
25133>>>>>>>>>    Procedure OnComSpecialColorChanged
25135>>>>>>>>>    End_Procedure
25136>>>>>>>>>
25136>>>>>>>>>    Procedure OnComRepositionAlignedControls Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
25138>>>>>>>>>    End_Procedure
25139>>>>>>>>>
25139>>>>>>>>>    Procedure OnComCustomization Variant llOptions
25141>>>>>>>>>    End_Procedure
25142>>>>>>>>>
25142>>>>>>>>>    Procedure OnComToolBarVisibleChanged Variant llToolBar
25144>>>>>>>>>    End_Procedure
25145>>>>>>>>>
25145>>>>>>>>>    Procedure OnComControlRButtonUp Variant llControl
25147>>>>>>>>>    End_Procedure
25148>>>>>>>>>
25148>>>>>>>>>    Procedure OnComCustomizationDone
25150>>>>>>>>>    End_Procedure
25151>>>>>>>>>
25151>>>>>>>>>    Procedure OnComCommandBarKeyDown Variant llCommandBar Integer ByRef llKeyCode Short llShift
25153>>>>>>>>>    End_Procedure
25154>>>>>>>>>
25154>>>>>>>>>    Procedure OnComToolBarContextMenu Variant llToolBar Variant llContextMenu
25156>>>>>>>>>    End_Procedure
25157>>>>>>>>>
25157>>>>>>>>>    Procedure OnComTrackingModeChanged Variant llCommandBar Boolean llMode
25159>>>>>>>>>    End_Procedure
25160>>>>>>>>>
25160>>>>>>>>>    Procedure OnComCustomizationResetToolBar Variant llToolBar
25162>>>>>>>>>    End_Procedure
25163>>>>>>>>>
25163>>>>>>>>>    Procedure OnComCustomizationAddToolBar Variant llToolBar
25165>>>>>>>>>    End_Procedure
25166>>>>>>>>>
25166>>>>>>>>>    Procedure OnComCustomizationDeleteToolBar Variant llToolBar
25168>>>>>>>>>    End_Procedure
25169>>>>>>>>>
25169>>>>>>>>>    Procedure OnComControlNotify Variant llControl Integer llCode Variant llNotifyData Variant llHandled
25171>>>>>>>>>    End_Procedure
25172>>>>>>>>>
25172>>>>>>>>>    Procedure OnComGetActiveDocumentID Integer ByRef llId
25174>>>>>>>>>    End_Procedure
25175>>>>>>>>>
25175>>>>>>>>>    Procedure OnComCustomizationResetAll
25177>>>>>>>>>    End_Procedure
25178>>>>>>>>>
25178>>>>>>>>>    Procedure OnComMessageBarClosed Variant llMessageBar
25180>>>>>>>>>    End_Procedure
25181>>>>>>>>>
25181>>>>>>>>>    Procedure OnComOLEStartDrag Variant llData Integer ByRef llAllowedEffects
25183>>>>>>>>>    End_Procedure
25184>>>>>>>>>
25184>>>>>>>>>    Procedure OnComOLECompleteDrag Integer ByRef llEffect
25186>>>>>>>>>    End_Procedure
25187>>>>>>>>>
25187>>>>>>>>>    Procedure OnComReCreated
25189>>>>>>>>>    End_Procedure
25190>>>>>>>>>
25190>>>>>>>>>    Procedure RegisterComEvents
25192>>>>>>>>>        Send RegisterComEvent 1 msg_OnComExecute
25193>>>>>>>>>        Send RegisterComEvent 2 msg_OnComUpdate
25194>>>>>>>>>        Send RegisterComEvent 3 msg_OnComResize
25195>>>>>>>>>        Send RegisterComEvent 4 msg_OnComGetClientBordersWidth
25196>>>>>>>>>        Send RegisterComEvent 5 msg_OnComControlSelected
25197>>>>>>>>>        Send RegisterComEvent 6 msg_OnComInitCommandsPopup
25198>>>>>>>>>        Send RegisterComEvent 7 msg_OnComResizeClient
25199>>>>>>>>>        Send RegisterComEvent 8 msg_OnComSpecialColorChanged
25200>>>>>>>>>        Send RegisterComEvent 9 msg_OnComRepositionAlignedControls
25201>>>>>>>>>        Send RegisterComEvent 10 msg_OnComCustomization
25202>>>>>>>>>        Send RegisterComEvent 11 msg_OnComToolBarVisibleChanged
25203>>>>>>>>>        Send RegisterComEvent 12 msg_OnComControlRButtonUp
25204>>>>>>>>>        Send RegisterComEvent 13 msg_OnComCustomizationDone
25205>>>>>>>>>        Send RegisterComEvent -602 msg_OnComCommandBarKeyDown
25206>>>>>>>>>        Send RegisterComEvent 14 msg_OnComToolBarContextMenu
25207>>>>>>>>>        Send RegisterComEvent 15 msg_OnComTrackingModeChanged
25208>>>>>>>>>        Send RegisterComEvent 16 msg_OnComCustomizationResetToolBar
25209>>>>>>>>>        Send RegisterComEvent 17 msg_OnComCustomizationAddToolBar
25210>>>>>>>>>        Send RegisterComEvent 18 msg_OnComCustomizationDeleteToolBar
25211>>>>>>>>>        Send RegisterComEvent 19 msg_OnComControlNotify
25212>>>>>>>>>        Send RegisterComEvent 20 msg_OnComGetActiveDocumentID
25213>>>>>>>>>        Send RegisterComEvent 21 msg_OnComCustomizationResetAll
25214>>>>>>>>>        Send RegisterComEvent 22 msg_OnComMessageBarClosed
25215>>>>>>>>>        Send RegisterComEvent 303 msg_OnComOLEStartDrag
25216>>>>>>>>>        Send RegisterComEvent 304 msg_OnComOLECompleteDrag
25217>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25218>>>>>>>>>    End_Procedure
25219>>>>>>>>>End_Class
25220>>>>>>>>>
25220>>>>>>>>>// CoClass
25220>>>>>>>>>// ProgID: Codejock.CommandBarsFrame.22.0.0
25220>>>>>>>>>// CLSID: {C0DE2200-148B-45F5-9679-3E0DBBC92C13}
25220>>>>>>>>>// Xtreme CommandBars Frame Control
25220>>>>>>>>>Class cCJCommandBarsFrame is a cComActiveXControl
25221>>>>>>>>>    Import_Class_Protocol cCJ_DCommandBarsFrame
25222>>>>>>>>>    Import_Class_Protocol cCJ_DCommandBarsFrameEvents
25223>>>>>>>>>
25223>>>>>>>>>    Procedure Construct_Object
25225>>>>>>>>>        Forward Send Construct_Object
25227>>>>>>>>>        Set psProgID to "{C0DE2200-148B-45F5-9679-3E0DBBC92C13}"
25228>>>>>>>>>        Set psEventId to "{C0DE2200-D2EF-4119-BBBB-8314B5794E11}"
25229>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2022 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v22.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
25230>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25231>>>>>>>>>    End_Procedure
25232>>>>>>>>>End_Class
25233>>>>>>>>>
25233>>>>>>>>>// CLSID: {C0DE2200-41E3-4369-89EF-1C084E3A21A8}
25233>>>>>>>>>// Dispatch interface for ImageManagerPropPage
25233>>>>>>>>>Class cCJ_DImageManagerPropPage is a Mixin
25234>>>>>>>>>End_Class
25235>>>>>>>>>
25235>>>>>>>>>// CoClass
25235>>>>>>>>>// CLSID: {C0DE2200-62EF-44E0-8471-69E91C8B026C}
25235>>>>>>>>>// Image manager property page
25235>>>>>>>>>Class cCJImageManagerPropPage is a cComAutomationObject
25236>>>>>>>>>    Import_Class_Protocol cCJ_DImageManagerPropPage
25237>>>>>>>>>
25237>>>>>>>>>    Procedure Construct_Object
25239>>>>>>>>>        Forward Send Construct_Object
25241>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
25242>>>>>>>>>    End_Procedure
25243>>>>>>>>>End_Class
25244>>>>>>>>>
25244>>>>>>>>>// CLSID: {C0DE2200-3B80-4CED-A441-19E468F8D087}
25244>>>>>>>>>// Dispatch interface for PrintPreview Control
25244>>>>>>>>>Class cCJ_DPrintPreview is a Mixin
25245>>>>>>>>>
25245>>>>>>>>>    Function ComPrintView Returns Variant
25247>>>>>>>>>        Variant retVal
25247>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_UNKNOWN to retVal
25248>>>>>>>>>        Function_Return retVal
25249>>>>>>>>>    End_Function
25250>>>>>>>>>
25250>>>>>>>>>    Procedure Set ComPrintView Variant value
25252>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_UNKNOWN to value
25253>>>>>>>>>    End_Procedure
25254>>>>>>>>>
25254>>>>>>>>>    Function ComTitle Returns String
25256>>>>>>>>>        String retVal
25256>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
25257>>>>>>>>>        Function_Return retVal
25258>>>>>>>>>    End_Function
25259>>>>>>>>>
25259>>>>>>>>>    Procedure Set ComTitle String value
25261>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
25262>>>>>>>>>    End_Procedure
25263>>>>>>>>>
25263>>>>>>>>>    Function ComVisualTheme Returns XTPVisualTheme
25265>>>>>>>>>        XTPVisualTheme retVal
25265>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
25266>>>>>>>>>        Function_Return retVal
25267>>>>>>>>>    End_Function
25268>>>>>>>>>
25268>>>>>>>>>    Procedure Set ComVisualTheme XTPVisualTheme value
25270>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
25271>>>>>>>>>    End_Procedure
25272>>>>>>>>>
25272>>>>>>>>>    Function ComZoomState Returns Integer
25274>>>>>>>>>        Integer retVal
25274>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
25275>>>>>>>>>        Function_Return retVal
25276>>>>>>>>>    End_Function
25277>>>>>>>>>
25277>>>>>>>>>    Procedure Set ComZoomState Integer value
25279>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
25280>>>>>>>>>    End_Procedure
25281>>>>>>>>>
25281>>>>>>>>>    Function ComToolBarVisible Returns Boolean
25283>>>>>>>>>        Boolean retVal
25283>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
25284>>>>>>>>>        Function_Return retVal
25285>>>>>>>>>    End_Function
25286>>>>>>>>>
25286>>>>>>>>>    Procedure Set ComToolBarVisible Boolean value
25288>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
25289>>>>>>>>>    End_Procedure
25290>>>>>>>>>
25290>>>>>>>>>    Function ComOrientation Returns XTPPrintOrientation
25292>>>>>>>>>        XTPPrintOrientation retVal
25292>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
25293>>>>>>>>>        Function_Return retVal
25294>>>>>>>>>    End_Function
25295>>>>>>>>>
25295>>>>>>>>>    Procedure Set ComOrientation XTPPrintOrientation value
25297>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
25298>>>>>>>>>    End_Procedure
25299>>>>>>>>>
25299>>>>>>>>>    Function ComBackColor Returns OLE_COLOR
25301>>>>>>>>>        OLE_COLOR retVal
25301>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to retVal
25302>>>>>>>>>        Function_Return retVal
25303>>>>>>>>>    End_Function
25304>>>>>>>>>
25304>>>>>>>>>    Procedure Set ComBackColor OLE_COLOR value
25306>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to value
25307>>>>>>>>>    End_Procedure
25308>>>>>>>>>
25308>>>>>>>>>    Function ComShowBorder Returns Boolean
25310>>>>>>>>>        Boolean retVal
25310>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
25311>>>>>>>>>        Function_Return retVal
25312>>>>>>>>>    End_Function
25313>>>>>>>>>
25313>>>>>>>>>    Procedure Set ComShowBorder Boolean value
25315>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
25316>>>>>>>>>    End_Procedure
25317>>>>>>>>>
25317>>>>>>>>>    Function ComReCreateReparented Returns Boolean
25319>>>>>>>>>        Boolean retVal
25319>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
25320>>>>>>>>>        Function_Return retVal
25321>>>>>>>>>    End_Function
25322>>>>>>>>>
25322>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
25324>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
25325>>>>>>>>>    End_Procedure
25326>>>>>>>>>
25326>>>>>>>>>    Function ComCreateMarkupPrintView String llMarkupText Returns Variant
25328>>>>>>>>>        Handle hDispatchDriver
25328>>>>>>>>>        Variant retVal
25328>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25329>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25330>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llMarkupText
25331>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_UNKNOWN to retVal
25332>>>>>>>>>        Function_Return retVal
25333>>>>>>>>>    End_Function
25334>>>>>>>>>
25334>>>>>>>>>    Procedure ComShowPrintDialog
25336>>>>>>>>>        Handle hDispatchDriver
25336>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25337>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
25338>>>>>>>>>    End_Procedure
25339>>>>>>>>>
25339>>>>>>>>>    Function ComCreateRichEditPrintView String llText Returns Variant
25341>>>>>>>>>        Handle hDispatchDriver
25341>>>>>>>>>        Variant retVal
25341>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25342>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25343>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
25344>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_UNKNOWN to retVal
25345>>>>>>>>>        Function_Return retVal
25346>>>>>>>>>    End_Function
25347>>>>>>>>>
25347>>>>>>>>>    Function ComToolBar Returns Variant
25349>>>>>>>>>        Handle hDispatchDriver
25349>>>>>>>>>        Variant retVal
25349>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25350>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_DISPATCH to retVal
25351>>>>>>>>>        Function_Return retVal
25352>>>>>>>>>    End_Function
25353>>>>>>>>>
25353>>>>>>>>>    Procedure ComPrintDirect OLE_HANDLE llhDC
25355>>>>>>>>>        Handle hDispatchDriver
25355>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25356>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25357>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhDC
25358>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
25359>>>>>>>>>    End_Procedure
25360>>>>>>>>>
25360>>>>>>>>>    Procedure ComAboutBox
25362>>>>>>>>>        Handle hDispatchDriver
25362>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25363>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
25364>>>>>>>>>    End_Procedure
25365>>>>>>>>>End_Class
25366>>>>>>>>>
25366>>>>>>>>>// CLSID: {C0DE2200-DC0C-498B-9B3E-FEC9F5C31D94}
25366>>>>>>>>>// Event interface for PrintPreview Control
25366>>>>>>>>>Class cCJ_DPrintPreviewEvents is a Mixin
25367>>>>>>>>>
25367>>>>>>>>>    Procedure OnComCloseClick
25369>>>>>>>>>    End_Procedure
25370>>>>>>>>>
25370>>>>>>>>>    Procedure OnComPrintClick
25372>>>>>>>>>    End_Procedure
25373>>>>>>>>>
25373>>>>>>>>>    Procedure OnComReCreated
25375>>>>>>>>>    End_Procedure
25376>>>>>>>>>
25376>>>>>>>>>    Procedure RegisterComEvents
25378>>>>>>>>>        Send RegisterComEvent 1 msg_OnComCloseClick
25379>>>>>>>>>        Send RegisterComEvent 2 msg_OnComPrintClick
25380>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25381>>>>>>>>>    End_Procedure
25382>>>>>>>>>End_Class
25383>>>>>>>>>
25383>>>>>>>>>// CoClass
25383>>>>>>>>>// ProgID: Codejock.PrintPreview.22.0.0
25383>>>>>>>>>// CLSID: {C0DE2200-7F9D-4B69-95D0-249FC10AEF31}
25383>>>>>>>>>// PrintPreview Control
25383>>>>>>>>>Class cCJPrintPreview is a cComActiveXControl
25384>>>>>>>>>    Import_Class_Protocol cCJ_DPrintPreview
25385>>>>>>>>>    Import_Class_Protocol cCJ_DPrintPreviewEvents
25386>>>>>>>>>
25386>>>>>>>>>    Procedure Construct_Object
25388>>>>>>>>>        Forward Send Construct_Object
25390>>>>>>>>>        Set psProgID to "{C0DE2200-7F9D-4B69-95D0-249FC10AEF31}"
25391>>>>>>>>>        Set psEventId to "{C0DE2200-DC0C-498B-9B3E-FEC9F5C31D94}"
25392>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25393>>>>>>>>>    End_Procedure
25394>>>>>>>>>End_Class
25395>>>>>>>>>
25395>>>>>>>>>// CLSID: {C0DE2200-7F27-46D2-91A1-0442FD6DA0DD}
25395>>>>>>>>>// Dispatch interface for PushButton Control
25395>>>>>>>>>Class cCJ_DBackstageButton is a Mixin
25396>>>>>>>>>
25396>>>>>>>>>    Function ComValue Returns Boolean
25398>>>>>>>>>        Boolean retVal
25398>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 0 OLE_VT_BOOL to retVal
25399>>>>>>>>>        Function_Return retVal
25400>>>>>>>>>    End_Function
25401>>>>>>>>>
25401>>>>>>>>>    Procedure Set ComValue Boolean value
25403>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 0 OLE_VT_BOOL to value
25404>>>>>>>>>    End_Procedure
25405>>>>>>>>>
25405>>>>>>>>>    Function ComCaption Returns String
25407>>>>>>>>>        String retVal
25407>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -518 OLE_VT_BSTR to retVal
25408>>>>>>>>>        Function_Return retVal
25409>>>>>>>>>    End_Function
25410>>>>>>>>>
25410>>>>>>>>>    Procedure Set ComCaption String value
25412>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -518 OLE_VT_BSTR to value
25413>>>>>>>>>    End_Procedure
25414>>>>>>>>>
25414>>>>>>>>>    Function ComFont Returns Variant
25416>>>>>>>>>        Variant retVal
25416>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
25417>>>>>>>>>        Function_Return retVal
25418>>>>>>>>>    End_Function
25419>>>>>>>>>
25419>>>>>>>>>    Procedure Set ComFont Variant value
25421>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
25422>>>>>>>>>    End_Procedure
25423>>>>>>>>>
25423>>>>>>>>>    Function ComBackColor Returns OLE_COLOR
25425>>>>>>>>>        OLE_COLOR retVal
25425>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to retVal
25426>>>>>>>>>        Function_Return retVal
25427>>>>>>>>>    End_Function
25428>>>>>>>>>
25428>>>>>>>>>    Procedure Set ComBackColor OLE_COLOR value
25430>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to value
25431>>>>>>>>>    End_Procedure
25432>>>>>>>>>
25432>>>>>>>>>    Function ComForeColor Returns OLE_COLOR
25434>>>>>>>>>        OLE_COLOR retVal
25434>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -513 OLE_VT_I4 to retVal
25435>>>>>>>>>        Function_Return retVal
25436>>>>>>>>>    End_Function
25437>>>>>>>>>
25437>>>>>>>>>    Procedure Set ComForeColor OLE_COLOR value
25439>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -513 OLE_VT_I4 to value
25440>>>>>>>>>    End_Procedure
25441>>>>>>>>>
25441>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
25443>>>>>>>>>        OLE_HANDLE retVal
25443>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -515 OLE_VT_I4 to retVal
25444>>>>>>>>>        Function_Return retVal
25445>>>>>>>>>    End_Function
25446>>>>>>>>>
25446>>>>>>>>>    Procedure Set ComHWnd OLE_HANDLE value
25448>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -515 OLE_VT_I4 to value
25449>>>>>>>>>    End_Procedure
25450>>>>>>>>>
25450>>>>>>>>>    Function ComEnabled Returns Boolean
25452>>>>>>>>>        Boolean retVal
25452>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -514 OLE_VT_BOOL to retVal
25453>>>>>>>>>        Function_Return retVal
25454>>>>>>>>>    End_Function
25455>>>>>>>>>
25455>>>>>>>>>    Procedure Set ComEnabled Boolean value
25457>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -514 OLE_VT_BOOL to value
25458>>>>>>>>>    End_Procedure
25459>>>>>>>>>
25459>>>>>>>>>    Function ComDefault Returns Boolean
25461>>>>>>>>>        Boolean retVal
25461>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1745027088 OLE_VT_BOOL to retVal
25462>>>>>>>>>        Function_Return retVal
25463>>>>>>>>>    End_Function
25464>>>>>>>>>
25464>>>>>>>>>    Procedure Set ComDefault Boolean value
25466>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1745027088 OLE_VT_BOOL to value
25467>>>>>>>>>    End_Procedure
25468>>>>>>>>>
25468>>>>>>>>>    Function ComFlatStyle Returns Boolean
25470>>>>>>>>>        Boolean retVal
25470>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
25471>>>>>>>>>        Function_Return retVal
25472>>>>>>>>>    End_Function
25473>>>>>>>>>
25473>>>>>>>>>    Procedure Set ComFlatStyle Boolean value
25475>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
25476>>>>>>>>>    End_Procedure
25477>>>>>>>>>
25477>>>>>>>>>    Function ComAppearance Returns XTPBackstageButtonControlAppearanceStyle
25479>>>>>>>>>        XTPBackstageButtonControlAppearanceStyle retVal
25479>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
25480>>>>>>>>>        Function_Return retVal
25481>>>>>>>>>    End_Function
25482>>>>>>>>>
25482>>>>>>>>>    Procedure Set ComAppearance XTPBackstageButtonControlAppearanceStyle value
25484>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
25485>>>>>>>>>    End_Procedure
25486>>>>>>>>>
25486>>>>>>>>>    Function ComTextAlignment Returns OLEAlignmentStyle
25488>>>>>>>>>        OLEAlignmentStyle retVal
25488>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to retVal
25489>>>>>>>>>        Function_Return retVal
25490>>>>>>>>>    End_Function
25491>>>>>>>>>
25491>>>>>>>>>    Procedure Set ComTextAlignment OLEAlignmentStyle value
25493>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to value
25494>>>>>>>>>    End_Procedure
25495>>>>>>>>>
25495>>>>>>>>>    Function ComMultiLine Returns Boolean
25497>>>>>>>>>        Boolean retVal
25497>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
25498>>>>>>>>>        Function_Return retVal
25499>>>>>>>>>    End_Function
25500>>>>>>>>>
25500>>>>>>>>>    Procedure Set ComMultiLine Boolean value
25502>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
25503>>>>>>>>>    End_Procedure
25504>>>>>>>>>
25504>>>>>>>>>    Function ComChecked Returns Boolean
25506>>>>>>>>>        Boolean retVal
25506>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
25507>>>>>>>>>        Function_Return retVal
25508>>>>>>>>>    End_Function
25509>>>>>>>>>
25509>>>>>>>>>    Procedure Set ComChecked Boolean value
25511>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
25512>>>>>>>>>    End_Procedure
25513>>>>>>>>>
25513>>>>>>>>>    Function ComIcon Returns Variant
25515>>>>>>>>>        Variant retVal
25515>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_DISPATCH to retVal
25516>>>>>>>>>        Function_Return retVal
25517>>>>>>>>>    End_Function
25518>>>>>>>>>
25518>>>>>>>>>    Procedure Set ComIcon Variant value
25520>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_DISPATCH to value
25521>>>>>>>>>    End_Procedure
25522>>>>>>>>>
25522>>>>>>>>>    Function ComRightToLeft Returns Boolean
25524>>>>>>>>>        Boolean retVal
25524>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -611 OLE_VT_BOOL to retVal
25525>>>>>>>>>        Function_Return retVal
25526>>>>>>>>>    End_Function
25527>>>>>>>>>
25527>>>>>>>>>    Procedure Set ComRightToLeft Boolean value
25529>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -611 OLE_VT_BOOL to value
25530>>>>>>>>>    End_Procedure
25531>>>>>>>>>
25531>>>>>>>>>    Function ComImageAlignment Returns OLEAlignmentStyle
25533>>>>>>>>>        OLEAlignmentStyle retVal
25533>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_I4 to retVal
25534>>>>>>>>>        Function_Return retVal
25535>>>>>>>>>    End_Function
25536>>>>>>>>>
25536>>>>>>>>>    Procedure Set ComImageAlignment OLEAlignmentStyle value
25538>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_I4 to value
25539>>>>>>>>>    End_Procedure
25540>>>>>>>>>
25540>>>>>>>>>    Function ComTextImageRelation Returns OLETextImageRelationStyle
25542>>>>>>>>>        OLETextImageRelationStyle retVal
25542>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
25543>>>>>>>>>        Function_Return retVal
25544>>>>>>>>>    End_Function
25545>>>>>>>>>
25545>>>>>>>>>    Procedure Set ComTextImageRelation OLETextImageRelationStyle value
25547>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
25548>>>>>>>>>    End_Procedure
25549>>>>>>>>>
25549>>>>>>>>>    Function ComImageGap Returns Integer
25551>>>>>>>>>        Integer retVal
25551>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
25552>>>>>>>>>        Function_Return retVal
25553>>>>>>>>>    End_Function
25554>>>>>>>>>
25554>>>>>>>>>    Procedure Set ComImageGap Integer value
25556>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
25557>>>>>>>>>    End_Procedure
25558>>>>>>>>>
25558>>>>>>>>>    Function ComBorderGap Returns Integer
25560>>>>>>>>>        Integer retVal
25560>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
25561>>>>>>>>>        Function_Return retVal
25562>>>>>>>>>    End_Function
25563>>>>>>>>>
25563>>>>>>>>>    Procedure Set ComBorderGap Integer value
25565>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
25566>>>>>>>>>    End_Procedure
25567>>>>>>>>>
25567>>>>>>>>>    Function ComStyle Returns OLEPushButtonStyle
25569>>>>>>>>>        OLEPushButtonStyle retVal
25569>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to retVal
25570>>>>>>>>>        Function_Return retVal
25571>>>>>>>>>    End_Function
25572>>>>>>>>>
25572>>>>>>>>>    Procedure Set ComStyle OLEPushButtonStyle value
25574>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to value
25575>>>>>>>>>    End_Procedure
25576>>>>>>>>>
25576>>>>>>>>>    Function ComEnableMarkup Returns Boolean
25578>>>>>>>>>        Boolean retVal
25578>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
25579>>>>>>>>>        Function_Return retVal
25580>>>>>>>>>    End_Function
25581>>>>>>>>>
25581>>>>>>>>>    Procedure Set ComEnableMarkup Boolean value
25583>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
25584>>>>>>>>>    End_Procedure
25585>>>>>>>>>
25585>>>>>>>>>    // Returns/Sets whether this control can act as an OLE drop target.
25585>>>>>>>>>    Function ComOLEDropMode Returns OLEDropConstants
25587>>>>>>>>>        OLEDropConstants retVal
25587>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
25588>>>>>>>>>        Function_Return retVal
25589>>>>>>>>>    End_Function
25590>>>>>>>>>
25590>>>>>>>>>    // Returns/Sets whether this control can act as an OLE drop target.
25590>>>>>>>>>    Procedure Set ComOLEDropMode OLEDropConstants value
25592>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
25593>>>>>>>>>    End_Procedure
25594>>>>>>>>>
25594>>>>>>>>>    Function ComControlToolTip Returns String
25596>>>>>>>>>        String retVal
25596>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_BSTR to retVal
25597>>>>>>>>>        Function_Return retVal
25598>>>>>>>>>    End_Function
25599>>>>>>>>>
25599>>>>>>>>>    Procedure Set ComControlToolTip String value
25601>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_BSTR to value
25602>>>>>>>>>    End_Procedure
25603>>>>>>>>>
25603>>>>>>>>>    Function ComShowShadow Returns Boolean
25605>>>>>>>>>        Boolean retVal
25605>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 78 OLE_VT_BOOL to retVal
25606>>>>>>>>>        Function_Return retVal
25607>>>>>>>>>    End_Function
25608>>>>>>>>>
25608>>>>>>>>>    Procedure Set ComShowShadow Boolean value
25610>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 78 OLE_VT_BOOL to value
25611>>>>>>>>>    End_Procedure
25612>>>>>>>>>
25612>>>>>>>>>    Function ComTabStyle Returns Boolean
25614>>>>>>>>>        Boolean retVal
25614>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 79 OLE_VT_BOOL to retVal
25615>>>>>>>>>        Function_Return retVal
25616>>>>>>>>>    End_Function
25617>>>>>>>>>
25617>>>>>>>>>    Procedure Set ComTabStyle Boolean value
25619>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 79 OLE_VT_BOOL to value
25620>>>>>>>>>    End_Procedure
25621>>>>>>>>>
25621>>>>>>>>>    Function ComReCreateReparented Returns Boolean
25623>>>>>>>>>        Boolean retVal
25623>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
25624>>>>>>>>>        Function_Return retVal
25625>>>>>>>>>    End_Function
25626>>>>>>>>>
25626>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
25628>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
25629>>>>>>>>>    End_Procedure
25630>>>>>>>>>
25630>>>>>>>>>    Function ComMarkupContext Returns Variant
25632>>>>>>>>>        Handle hDispatchDriver
25632>>>>>>>>>        Variant retVal
25632>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25633>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_DISPATCH to retVal
25634>>>>>>>>>        Function_Return retVal
25635>>>>>>>>>    End_Function
25636>>>>>>>>>
25636>>>>>>>>>    Procedure ComAboutBox
25638>>>>>>>>>        Handle hDispatchDriver
25638>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25639>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
25640>>>>>>>>>    End_Procedure
25641>>>>>>>>>
25641>>>>>>>>>    Function ComToolTipContext Returns Variant
25643>>>>>>>>>        Handle hDispatchDriver
25643>>>>>>>>>        Variant retVal
25643>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25644>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 71 OLE_VT_DISPATCH to retVal
25645>>>>>>>>>        Function_Return retVal
25646>>>>>>>>>    End_Function
25647>>>>>>>>>
25647>>>>>>>>>    Procedure ComVectorImageHeight Integer llHeight
25649>>>>>>>>>        Handle hDispatchDriver
25649>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25650>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25651>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llHeight
25652>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 72 OLE_VT_VOID
25653>>>>>>>>>    End_Procedure
25654>>>>>>>>>
25654>>>>>>>>>    Procedure ComVectorImageWidth Integer llWidth
25656>>>>>>>>>        Handle hDispatchDriver
25656>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25657>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25658>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
25659>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 73 OLE_VT_VOID
25660>>>>>>>>>    End_Procedure
25661>>>>>>>>>End_Class
25662>>>>>>>>>
25662>>>>>>>>>// CLSID: {C0DE2200-8784-4B18-976D-F889C1F8B1E9}
25662>>>>>>>>>// Event interface for PushButton Control
25662>>>>>>>>>Class cCJ_DBackstageButtonEvents is a Mixin
25663>>>>>>>>>
25663>>>>>>>>>    Procedure OnComClick
25665>>>>>>>>>    End_Procedure
25666>>>>>>>>>
25666>>>>>>>>>    Procedure OnComMouseDown Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly
25668>>>>>>>>>    End_Procedure
25669>>>>>>>>>
25669>>>>>>>>>    Procedure OnComMouseMove Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly
25671>>>>>>>>>    End_Procedure
25672>>>>>>>>>
25672>>>>>>>>>    Procedure OnComMouseUp Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly
25674>>>>>>>>>    End_Procedure
25675>>>>>>>>>
25675>>>>>>>>>    Procedure OnComKeyDown Short ByRef llKeyCode Short llShift
25677>>>>>>>>>    End_Procedure
25678>>>>>>>>>
25678>>>>>>>>>    Procedure OnComKeyPress Short ByRef llKeyAscii
25680>>>>>>>>>    End_Procedure
25681>>>>>>>>>
25681>>>>>>>>>    Procedure OnComKeyUp Short ByRef llKeyCode Short llShift
25683>>>>>>>>>    End_Procedure
25684>>>>>>>>>
25684>>>>>>>>>    Procedure OnComDropDown
25686>>>>>>>>>    End_Procedure
25687>>>>>>>>>
25687>>>>>>>>>    Procedure OnComOLEDragOver Variant llData Integer ByRef llEffect Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly Short llstate
25689>>>>>>>>>    End_Procedure
25690>>>>>>>>>
25690>>>>>>>>>    Procedure OnComOLEDragDrop Variant llData Integer ByRef llEffect Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly
25692>>>>>>>>>    End_Procedure
25693>>>>>>>>>
25693>>>>>>>>>    Procedure OnComReCreated
25695>>>>>>>>>    End_Procedure
25696>>>>>>>>>
25696>>>>>>>>>    Procedure RegisterComEvents
25698>>>>>>>>>        Send RegisterComEvent -600 msg_OnComClick
25699>>>>>>>>>        Send RegisterComEvent -605 msg_OnComMouseDown
25700>>>>>>>>>        Send RegisterComEvent -606 msg_OnComMouseMove
25701>>>>>>>>>        Send RegisterComEvent -607 msg_OnComMouseUp
25702>>>>>>>>>        Send RegisterComEvent -602 msg_OnComKeyDown
25703>>>>>>>>>        Send RegisterComEvent -603 msg_OnComKeyPress
25704>>>>>>>>>        Send RegisterComEvent -604 msg_OnComKeyUp
25705>>>>>>>>>        Send RegisterComEvent 1 msg_OnComDropDown
25706>>>>>>>>>        Send RegisterComEvent 300 msg_OnComOLEDragOver
25707>>>>>>>>>        Send RegisterComEvent 301 msg_OnComOLEDragDrop
25708>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25709>>>>>>>>>    End_Procedure
25710>>>>>>>>>End_Class
25711>>>>>>>>>
25711>>>>>>>>>// CoClass
25711>>>>>>>>>// ProgID: Codejock.BackstageButton.22.0.0
25711>>>>>>>>>// CLSID: {C0DE2200-ADD1-404B-9432-25BECBA0755F}
25711>>>>>>>>>// PushButton Control
25711>>>>>>>>>Class cCJBackstageButton is a cComActiveXControl
25712>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageButton
25713>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageButtonEvents
25714>>>>>>>>>
25714>>>>>>>>>    Procedure Construct_Object
25716>>>>>>>>>        Forward Send Construct_Object
25718>>>>>>>>>        Set psProgID to "{C0DE2200-ADD1-404B-9432-25BECBA0755F}"
25719>>>>>>>>>        Set psEventId to "{C0DE2200-8784-4B18-976D-F889C1F8B1E9}"
25720>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2022 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v22.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
25721>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25722>>>>>>>>>    End_Procedure
25723>>>>>>>>>End_Class
25724>>>>>>>>>
25724>>>>>>>>>// CLSID: {C0DE2200-B473-4662-B8AD-C5F3FB64C028}
25724>>>>>>>>>// Dispatch interface for BackstageButtonPropPage
25724>>>>>>>>>Class cCJ_DBackstageButtonPropPage is a Mixin
25725>>>>>>>>>End_Class
25726>>>>>>>>>
25726>>>>>>>>>// CoClass
25726>>>>>>>>>// CLSID: {C0DE2200-3CE1-4C9B-B764-D85C63DBEC21}
25726>>>>>>>>>// Backstage button property page
25726>>>>>>>>>Class cCJBackstageButtonPropPage is a cComAutomationObject
25727>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageButtonPropPage
25728>>>>>>>>>
25728>>>>>>>>>    Procedure Construct_Object
25730>>>>>>>>>        Forward Send Construct_Object
25732>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
25733>>>>>>>>>    End_Procedure
25734>>>>>>>>>End_Class
25735>>>>>>>>>
25735>>>>>>>>>// CLSID: {C0DE2200-E970-416D-838B-AFF30EDC1D51}
25735>>>>>>>>>// Dispatch interface for BackstageSeparator Control
25735>>>>>>>>>Class cCJ_DBackstageSeparator is a Mixin
25736>>>>>>>>>
25736>>>>>>>>>    Function ComVertical Returns Boolean
25738>>>>>>>>>        Boolean retVal
25738>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
25739>>>>>>>>>        Function_Return retVal
25740>>>>>>>>>    End_Function
25741>>>>>>>>>
25741>>>>>>>>>    Procedure Set ComVertical Boolean value
25743>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
25744>>>>>>>>>    End_Procedure
25745>>>>>>>>>
25745>>>>>>>>>    Function ComAppearance Returns XTPBackstageSeparatorControlAppearanceStyle
25747>>>>>>>>>        XTPBackstageSeparatorControlAppearanceStyle retVal
25747>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
25748>>>>>>>>>        Function_Return retVal
25749>>>>>>>>>    End_Function
25750>>>>>>>>>
25750>>>>>>>>>    Procedure Set ComAppearance XTPBackstageSeparatorControlAppearanceStyle value
25752>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
25753>>>>>>>>>    End_Procedure
25754>>>>>>>>>
25754>>>>>>>>>    Function ComMarkupText Returns String
25756>>>>>>>>>        String retVal
25756>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -518 OLE_VT_BSTR to retVal
25757>>>>>>>>>        Function_Return retVal
25758>>>>>>>>>    End_Function
25759>>>>>>>>>
25759>>>>>>>>>    Procedure Set ComMarkupText String value
25761>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -518 OLE_VT_BSTR to value
25762>>>>>>>>>    End_Procedure
25763>>>>>>>>>
25763>>>>>>>>>    Function ComReCreateReparented Returns Boolean
25765>>>>>>>>>        Boolean retVal
25765>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
25766>>>>>>>>>        Function_Return retVal
25767>>>>>>>>>    End_Function
25768>>>>>>>>>
25768>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
25770>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
25771>>>>>>>>>    End_Procedure
25772>>>>>>>>>
25772>>>>>>>>>    Procedure ComAboutBox
25774>>>>>>>>>        Handle hDispatchDriver
25774>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25775>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
25776>>>>>>>>>    End_Procedure
25777>>>>>>>>>End_Class
25778>>>>>>>>>
25778>>>>>>>>>// CLSID: {C0DE2200-A9B6-458C-8DBE-71B544CD06B4}
25778>>>>>>>>>// Event interface for BackstageSeparator Control
25778>>>>>>>>>Class cCJ_DBackstageSeparatorEvents is a Mixin
25779>>>>>>>>>
25779>>>>>>>>>    Procedure OnComReCreated
25781>>>>>>>>>    End_Procedure
25782>>>>>>>>>
25782>>>>>>>>>    Procedure RegisterComEvents
25784>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25785>>>>>>>>>    End_Procedure
25786>>>>>>>>>End_Class
25787>>>>>>>>>
25787>>>>>>>>>// CoClass
25787>>>>>>>>>// ProgID: Codejock.BackstageSeparator.22.0.0
25787>>>>>>>>>// CLSID: {C0DE2200-C3CB-4192-B015-BFF56164ED07}
25787>>>>>>>>>// BackstageSeparator Control
25787>>>>>>>>>Class cCJBackstageSeparator is a cComActiveXControl
25788>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageSeparator
25789>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageSeparatorEvents
25790>>>>>>>>>
25790>>>>>>>>>    Procedure Construct_Object
25792>>>>>>>>>        Forward Send Construct_Object
25794>>>>>>>>>        Set psProgID to "{C0DE2200-C3CB-4192-B015-BFF56164ED07}"
25795>>>>>>>>>        Set psEventId to "{C0DE2200-A9B6-458C-8DBE-71B544CD06B4}"
25796>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2022 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v22.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
25797>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25798>>>>>>>>>    End_Procedure
25799>>>>>>>>>End_Class
25800>>>>>>>>>
25800>>>>>>>>>// CLSID: {C0DE2200-0694-4EE0-870A-558EE7DE4BF3}
25800>>>>>>>>>// Dispatch interface for BackstageListBox Control
25800>>>>>>>>>Class cCJ_DBackstageListBox is a Mixin
25801>>>>>>>>>
25801>>>>>>>>>    // Set True to allow using standard icons from shell. By default False.
25801>>>>>>>>>    Function ComUseShellIcons Returns Boolean
25803>>>>>>>>>        Boolean retVal
25803>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
25804>>>>>>>>>        Function_Return retVal
25805>>>>>>>>>    End_Function
25806>>>>>>>>>
25806>>>>>>>>>    // Set True to allow using standard icons from shell. By default False.
25806>>>>>>>>>    Procedure Set ComUseShellIcons Boolean value
25808>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
25809>>>>>>>>>    End_Procedure
25810>>>>>>>>>
25810>>>>>>>>>    Function ComVisualTheme Returns XTPVisualTheme
25812>>>>>>>>>        XTPVisualTheme retVal
25812>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
25813>>>>>>>>>        Function_Return retVal
25814>>>>>>>>>    End_Function
25815>>>>>>>>>
25815>>>>>>>>>    Procedure Set ComVisualTheme XTPVisualTheme value
25817>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
25818>>>>>>>>>    End_Procedure
25819>>>>>>>>>
25819>>>>>>>>>    Function ComShowScrollBarAlways Returns Boolean
25821>>>>>>>>>        Boolean retVal
25821>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
25822>>>>>>>>>        Function_Return retVal
25823>>>>>>>>>    End_Function
25824>>>>>>>>>
25824>>>>>>>>>    Procedure Set ComShowScrollBarAlways Boolean value
25826>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
25827>>>>>>>>>    End_Procedure
25828>>>>>>>>>
25828>>>>>>>>>    Function ComReCreateReparented Returns Boolean
25830>>>>>>>>>        Boolean retVal
25830>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
25831>>>>>>>>>        Function_Return retVal
25832>>>>>>>>>    End_Function
25833>>>>>>>>>
25833>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
25835>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
25836>>>>>>>>>    End_Procedure
25837>>>>>>>>>
25837>>>>>>>>>    Function ComItems Returns Variant
25839>>>>>>>>>        Handle hDispatchDriver
25839>>>>>>>>>        Variant retVal
25839>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25840>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
25841>>>>>>>>>        Function_Return retVal
25842>>>>>>>>>    End_Function
25843>>>>>>>>>
25843>>>>>>>>>    Function ComGallery Returns Variant
25845>>>>>>>>>        Handle hDispatchDriver
25845>>>>>>>>>        Variant retVal
25845>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25846>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
25847>>>>>>>>>        Function_Return retVal
25848>>>>>>>>>    End_Function
25849>>>>>>>>>
25849>>>>>>>>>    Function ComIcons Returns Variant
25851>>>>>>>>>        Handle hDispatchDriver
25851>>>>>>>>>        Variant retVal
25851>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25852>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_DISPATCH to retVal
25853>>>>>>>>>        Function_Return retVal
25854>>>>>>>>>    End_Function
25855>>>>>>>>>
25855>>>>>>>>>    Function ComToolTipContext Returns Variant
25857>>>>>>>>>        Handle hDispatchDriver
25857>>>>>>>>>        Variant retVal
25857>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25858>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
25859>>>>>>>>>        Function_Return retVal
25860>>>>>>>>>    End_Function
25861>>>>>>>>>
25861>>>>>>>>>    Procedure ComCreateRecentFileListItems Variant llRecentFileList
25863>>>>>>>>>        Handle hDispatchDriver
25863>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25864>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25865>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llRecentFileList
25866>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
25867>>>>>>>>>    End_Procedure
25868>>>>>>>>>
25868>>>>>>>>>    Function ComPaintManager Returns Variant
25870>>>>>>>>>        Handle hDispatchDriver
25870>>>>>>>>>        Variant retVal
25870>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25871>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
25872>>>>>>>>>        Function_Return retVal
25873>>>>>>>>>    End_Function
25874>>>>>>>>>
25874>>>>>>>>>    Function ComHitTest OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly Returns Variant
25876>>>>>>>>>        Handle hDispatchDriver
25876>>>>>>>>>        Variant retVal
25876>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25877>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
25878>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
25879>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
25880>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 17 OLE_VT_DISPATCH to retVal
25881>>>>>>>>>        Function_Return retVal
25882>>>>>>>>>    End_Function
25883>>>>>>>>>
25883>>>>>>>>>    Procedure ComAboutBox
25885>>>>>>>>>        Handle hDispatchDriver
25885>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25886>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
25887>>>>>>>>>    End_Procedure
25888>>>>>>>>>End_Class
25889>>>>>>>>>
25889>>>>>>>>>// CLSID: {C0DE2200-B56F-4C5C-A7C1-BFD597BE6386}
25889>>>>>>>>>// Event interface for BackstageListBox Control
25889>>>>>>>>>Class cCJ_DBackstageListBoxEvents is a Mixin
25890>>>>>>>>>
25890>>>>>>>>>    Procedure OnComItemClick Variant llItem
25892>>>>>>>>>    End_Procedure
25893>>>>>>>>>
25893>>>>>>>>>    Procedure OnComMouseDown Short llButton Short llShift Integer llx Integer lly
25895>>>>>>>>>    End_Procedure
25896>>>>>>>>>
25896>>>>>>>>>    Procedure OnComMouseUp Short llButton Short llShift Integer llx Integer lly
25898>>>>>>>>>    End_Procedure
25899>>>>>>>>>
25899>>>>>>>>>    Procedure OnComReCreated
25901>>>>>>>>>    End_Procedure
25902>>>>>>>>>
25902>>>>>>>>>    Procedure RegisterComEvents
25904>>>>>>>>>        Send RegisterComEvent 1 msg_OnComItemClick
25905>>>>>>>>>        Send RegisterComEvent -605 msg_OnComMouseDown
25906>>>>>>>>>        Send RegisterComEvent -607 msg_OnComMouseUp
25907>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25908>>>>>>>>>    End_Procedure
25909>>>>>>>>>End_Class
25910>>>>>>>>>
25910>>>>>>>>>// CoClass
25910>>>>>>>>>// ProgID: Codejock.BackstageListBox.22.0.0
25910>>>>>>>>>// CLSID: {C0DE2200-52D8-4364-BFDC-C828980023B0}
25910>>>>>>>>>// BackstageListBox Control
25910>>>>>>>>>Class cCJBackstageListBox is a cComActiveXControl
25911>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageListBox
25912>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageListBoxEvents
25913>>>>>>>>>
25913>>>>>>>>>    Procedure Construct_Object
25915>>>>>>>>>        Forward Send Construct_Object
25917>>>>>>>>>        Set psProgID to "{C0DE2200-52D8-4364-BFDC-C828980023B0}"
25918>>>>>>>>>        Set psEventId to "{C0DE2200-B56F-4C5C-A7C1-BFD597BE6386}"
25919>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2022 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v22.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
25920>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25921>>>>>>>>>    End_Procedure
25922>>>>>>>>>End_Class
25923>>>>>>>>>
25923>>>>>>>>>// CLSID: {C0DE2200-FEBF-4C62-BD49-AC6556035154}
25923>>>>>>>>>// Global Global Settings
25923>>>>>>>>>Class cCJICommandBarsGlobalSettings is a Mixin
25924>>>>>>>>>
25924>>>>>>>>>    Function ComResourceFile Returns String
25926>>>>>>>>>        String retVal
25926>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BSTR to retVal
25927>>>>>>>>>        Function_Return retVal
25928>>>>>>>>>    End_Function
25929>>>>>>>>>
25929>>>>>>>>>    Procedure Set ComResourceFile String value
25931>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BSTR to value
25932>>>>>>>>>    End_Procedure
25933>>>>>>>>>
25933>>>>>>>>>    Function ComLicense Returns String
25935>>>>>>>>>        String retVal
25935>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to retVal
25936>>>>>>>>>        Function_Return retVal
25937>>>>>>>>>    End_Function
25938>>>>>>>>>
25938>>>>>>>>>    Procedure Set ComLicense String value
25940>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to value
25941>>>>>>>>>    End_Procedure
25942>>>>>>>>>
25942>>>>>>>>>    Function ComTitle Returns String
25944>>>>>>>>>        String retVal
25944>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to retVal
25945>>>>>>>>>        Function_Return retVal
25946>>>>>>>>>    End_Function
25947>>>>>>>>>
25947>>>>>>>>>    Procedure Set ComTitle String value
25949>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to value
25950>>>>>>>>>    End_Procedure
25951>>>>>>>>>
25951>>>>>>>>>    Function ComReCreateReparentedControls Returns Boolean
25953>>>>>>>>>        Boolean retVal
25953>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 109 OLE_VT_BOOL to retVal
25954>>>>>>>>>        Function_Return retVal
25955>>>>>>>>>    End_Function
25956>>>>>>>>>
25956>>>>>>>>>    Procedure Set ComReCreateReparentedControls Boolean value
25958>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 109 OLE_VT_BOOL to value
25959>>>>>>>>>    End_Procedure
25960>>>>>>>>>
25960>>>>>>>>>    Function ComApp Returns Variant
25962>>>>>>>>>        Variant retVal
25962>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_DISPATCH to retVal
25963>>>>>>>>>        Function_Return retVal
25964>>>>>>>>>    End_Function
25965>>>>>>>>>
25965>>>>>>>>>    Procedure Set ComApp Variant value
25967>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_DISPATCH to value
25968>>>>>>>>>    End_Procedure
25969>>>>>>>>>
25969>>>>>>>>>    Function ComCompanyName Returns String
25971>>>>>>>>>        String retVal
25971>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
25972>>>>>>>>>        Function_Return retVal
25973>>>>>>>>>    End_Function
25974>>>>>>>>>
25974>>>>>>>>>    Procedure Set ComCompanyName String value
25976>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
25977>>>>>>>>>    End_Procedure
25978>>>>>>>>>
25978>>>>>>>>>    Function ComColorManager Returns Variant
25980>>>>>>>>>        Handle hDispatchDriver
25980>>>>>>>>>        Variant retVal
25980>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25981>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_DISPATCH to retVal
25982>>>>>>>>>        Function_Return retVal
25983>>>>>>>>>    End_Function
25984>>>>>>>>>
25984>>>>>>>>>    Function ComFrameShadowManager Returns Variant
25986>>>>>>>>>        Handle hDispatchDriver
25986>>>>>>>>>        Variant retVal
25986>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25987>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10003000 OLE_VT_DISPATCH to retVal
25988>>>>>>>>>        Function_Return retVal
25989>>>>>>>>>    End_Function
25990>>>>>>>>>
25990>>>>>>>>>    Function ComVersion Returns String
25992>>>>>>>>>        Handle hDispatchDriver
25992>>>>>>>>>        String retVal
25992>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25993>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_BSTR to retVal
25994>>>>>>>>>        Function_Return retVal
25995>>>>>>>>>    End_Function
25996>>>>>>>>>
25996>>>>>>>>>    Function ComUnicode Returns Boolean
25998>>>>>>>>>        Handle hDispatchDriver
25998>>>>>>>>>        Boolean retVal
25998>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25999>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_BOOL to retVal
26000>>>>>>>>>        Function_Return retVal
26001>>>>>>>>>    End_Function
26002>>>>>>>>>
26002>>>>>>>>>    Function ComOcxPath Returns String
26004>>>>>>>>>        Handle hDispatchDriver
26004>>>>>>>>>        String retVal
26004>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26005>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_BSTR to retVal
26006>>>>>>>>>        Function_Return retVal
26007>>>>>>>>>    End_Function
26008>>>>>>>>>
26008>>>>>>>>>    Function ComGetAmbientProperty XTPApplicationAmbientProperty llproperty Returns Variant
26010>>>>>>>>>        Handle hDispatchDriver
26010>>>>>>>>>        Variant retVal
26010>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26011>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
26012>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llproperty
26013>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_VARIANT to retVal
26014>>>>>>>>>        Function_Return retVal
26015>>>>>>>>>    End_Function
26016>>>>>>>>>
26016>>>>>>>>>    Procedure ComSetAmbientProperty XTPApplicationAmbientProperty llproperty Variant llValue
26018>>>>>>>>>        Handle hDispatchDriver
26018>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26019>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26020>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llproperty
26021>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llValue
26022>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 112 OLE_VT_VOID
26023>>>>>>>>>    End_Procedure
26024>>>>>>>>>
26024>>>>>>>>>    Function ComCreatePropExchange Returns Variant
26026>>>>>>>>>        Handle hDispatchDriver
26026>>>>>>>>>        Variant retVal
26026>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26027>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 107 OLE_VT_DISPATCH to retVal
26028>>>>>>>>>        Function_Return retVal
26029>>>>>>>>>    End_Function
26030>>>>>>>>>
26030>>>>>>>>>    Function ComIcons Returns Variant
26032>>>>>>>>>        Handle hDispatchDriver
26032>>>>>>>>>        Variant retVal
26032>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26033>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_DISPATCH to retVal
26034>>>>>>>>>        Function_Return retVal
26035>>>>>>>>>    End_Function
26036>>>>>>>>>
26036>>>>>>>>>    Function ComResourceImages Returns Variant
26038>>>>>>>>>        Handle hDispatchDriver
26038>>>>>>>>>        Variant retVal
26038>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26039>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_DISPATCH to retVal
26040>>>>>>>>>        Function_Return retVal
26041>>>>>>>>>    End_Function
26042>>>>>>>>>End_Class
26043>>>>>>>>>
26043>>>>>>>>>// CoClass
26043>>>>>>>>>// ProgID: Codejock.CommandBarsGlobalSettings.22.0.0
26043>>>>>>>>>// CLSID: {C0DE2200-D18F-4F58-8647-38F1AD3314C3}
26043>>>>>>>>>// Command Bars Settings
26043>>>>>>>>>Class cCJCommandBarsGlobalSettings is a cComAutomationObject
26044>>>>>>>>>    Import_Class_Protocol cCJICommandBarsGlobalSettings
26045>>>>>>>>>
26045>>>>>>>>>    Procedure Construct_Object
26047>>>>>>>>>        Forward Send Construct_Object
26049>>>>>>>>>        Set psProgID to "{C0DE2200-D18F-4F58-8647-38F1AD3314C3}"
26050>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
26051>>>>>>>>>    End_Procedure
26052>>>>>>>>>End_Class
26053>>>>>>>>>
26053>>>>>>>>>// CLSID: {C0DE2200-F9CE-44F1-8991-0F6B7C19336B}
26053>>>>>>>>>Class cCJIResourceImageList is a cComAutomationObject
26054>>>>>>>>>
26054>>>>>>>>>    Function ComAddBitmap OLE_HANDLE llHandle Integer llnID Returns Boolean
26056>>>>>>>>>        Handle hDispatchDriver
26056>>>>>>>>>        Boolean retVal
26056>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26057>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26058>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llHandle
26059>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnID
26060>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BOOL to retVal
26061>>>>>>>>>        Function_Return retVal
26062>>>>>>>>>    End_Function
26063>>>>>>>>>
26063>>>>>>>>>    Function ComLoadBitmap String llPath Integer llnID Returns Boolean
26065>>>>>>>>>        Handle hDispatchDriver
26065>>>>>>>>>        Boolean retVal
26065>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26066>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26067>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
26068>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnID
26069>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
26070>>>>>>>>>        Function_Return retVal
26071>>>>>>>>>    End_Function
26072>>>>>>>>>
26072>>>>>>>>>    Function ComRemove Integer llnID Returns Boolean
26074>>>>>>>>>        Handle hDispatchDriver
26074>>>>>>>>>        Boolean retVal
26074>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26075>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
26076>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnID
26077>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BOOL to retVal
26078>>>>>>>>>        Function_Return retVal
26079>>>>>>>>>    End_Function
26080>>>>>>>>>
26080>>>>>>>>>    Procedure ComRemoveAll
26082>>>>>>>>>        Handle hDispatchDriver
26082>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26083>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
26084>>>>>>>>>    End_Procedure
26085>>>>>>>>>End_Class
26086>>>>>>>>>
26086>>>>>>>>>// CLSID: {C0DE2200-ED8F-4CE1-9E36-403876BEE557}
26086>>>>>>>>>Class cCJXtremePrinterInfo is a cComAutomationObject
26087>>>>>>>>>
26087>>>>>>>>>    Function ComDeviceName Returns String
26089>>>>>>>>>        Handle hDispatchDriver
26089>>>>>>>>>        String retVal
26089>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26090>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BSTR to retVal
26091>>>>>>>>>        Function_Return retVal
26092>>>>>>>>>    End_Function
26093>>>>>>>>>
26093>>>>>>>>>    Function ComDriverName Returns String
26095>>>>>>>>>        Handle hDispatchDriver
26095>>>>>>>>>        String retVal
26095>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26096>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BSTR to retVal
26097>>>>>>>>>        Function_Return retVal
26098>>>>>>>>>    End_Function
26099>>>>>>>>>
26099>>>>>>>>>    Function ComPortName Returns String
26101>>>>>>>>>        Handle hDispatchDriver
26101>>>>>>>>>        String retVal
26101>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26102>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BSTR to retVal
26103>>>>>>>>>        Function_Return retVal
26104>>>>>>>>>    End_Function
26105>>>>>>>>>End_Class
26106>>>>>>>>>
26106>>>>>>>>>// CLSID: {C0DE2200-8BC5-4677-9999-0A29B44F3B23}
26106>>>>>>>>>Class cCJXtremePrintPreviewOptions is a cComAutomationObject
26107>>>>>>>>>
26107>>>>>>>>>    Function ComTitle Returns String
26109>>>>>>>>>        String retVal
26109>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
26110>>>>>>>>>        Function_Return retVal
26111>>>>>>>>>    End_Function
26112>>>>>>>>>
26112>>>>>>>>>    Procedure Set ComTitle String value
26114>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
26115>>>>>>>>>    End_Procedure
26116>>>>>>>>>End_Class
26117>>>>>>>>>
26117>>>>>>>>>// CLSID: {C0DE2200-E75C-4A50-A908-F36D35F098D2}
26117>>>>>>>>>Class cCJPrintPageHeaderFooter is a cComAutomationObject
26118>>>>>>>>>
26118>>>>>>>>>    Function ComFont Returns Variant
26120>>>>>>>>>        Variant retVal
26120>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
26121>>>>>>>>>        Function_Return retVal
26122>>>>>>>>>    End_Function
26123>>>>>>>>>
26123>>>>>>>>>    Procedure Set ComFont Variant value
26125>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
26126>>>>>>>>>    End_Procedure
26127>>>>>>>>>
26127>>>>>>>>>    Function ComFormatString Returns String
26129>>>>>>>>>        String retVal
26129>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
26130>>>>>>>>>        Function_Return retVal
26131>>>>>>>>>    End_Function
26132>>>>>>>>>
26132>>>>>>>>>    Procedure Set ComFormatString String value
26134>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
26135>>>>>>>>>    End_Procedure
26136>>>>>>>>>
26136>>>>>>>>>    Function ComTextLeft Returns String
26138>>>>>>>>>        String retVal
26138>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
26139>>>>>>>>>        Function_Return retVal
26140>>>>>>>>>    End_Function
26141>>>>>>>>>
26141>>>>>>>>>    Procedure Set ComTextLeft String value
26143>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
26144>>>>>>>>>    End_Procedure
26145>>>>>>>>>
26145>>>>>>>>>    Function ComTextCenter Returns String
26147>>>>>>>>>        String retVal
26147>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
26148>>>>>>>>>        Function_Return retVal
26149>>>>>>>>>    End_Function
26150>>>>>>>>>
26150>>>>>>>>>    Procedure Set ComTextCenter String value
26152>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
26153>>>>>>>>>    End_Procedure
26154>>>>>>>>>
26154>>>>>>>>>    Function ComTextRight Returns String
26156>>>>>>>>>        String retVal
26156>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
26157>>>>>>>>>        Function_Return retVal
26158>>>>>>>>>    End_Function
26159>>>>>>>>>
26159>>>>>>>>>    Procedure Set ComTextRight String value
26161>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
26162>>>>>>>>>    End_Procedure
26163>>>>>>>>>
26163>>>>>>>>>    Procedure ComClear
26165>>>>>>>>>        Handle hDispatchDriver
26165>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26166>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 50 OLE_VT_VOID
26167>>>>>>>>>    End_Procedure
26168>>>>>>>>>End_Class
26169>>>>>>>>>
26169>>>>>>>>>// CLSID: {C0DE2200-0E2C-47FC-BFB7-46E70C561AA8}
26169>>>>>>>>>Class cCJPrintInfo is a cComAutomationObject
26170>>>>>>>>>
26170>>>>>>>>>    Function ComContinuePrinting Returns Boolean
26172>>>>>>>>>        Boolean retVal
26172>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
26173>>>>>>>>>        Function_Return retVal
26174>>>>>>>>>    End_Function
26175>>>>>>>>>
26175>>>>>>>>>    Procedure Set ComContinuePrinting Boolean value
26177>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
26178>>>>>>>>>    End_Procedure
26179>>>>>>>>>
26179>>>>>>>>>    Function ComMaxPage Returns Integer
26181>>>>>>>>>        Integer retVal
26181>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26182>>>>>>>>>        Function_Return retVal
26183>>>>>>>>>    End_Function
26184>>>>>>>>>
26184>>>>>>>>>    Procedure Set ComMaxPage Integer value
26186>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26187>>>>>>>>>    End_Procedure
26188>>>>>>>>>
26188>>>>>>>>>    Function ComPreviewMode Returns Boolean
26190>>>>>>>>>        Handle hDispatchDriver
26190>>>>>>>>>        Boolean retVal
26190>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26191>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BOOL to retVal
26192>>>>>>>>>        Function_Return retVal
26193>>>>>>>>>    End_Function
26194>>>>>>>>>
26194>>>>>>>>>    Function ComCurrentPage Returns Integer
26196>>>>>>>>>        Handle hDispatchDriver
26196>>>>>>>>>        Integer retVal
26196>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26197>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26198>>>>>>>>>        Function_Return retVal
26199>>>>>>>>>    End_Function
26200>>>>>>>>>
26200>>>>>>>>>    Function ComPrintRectLeft Returns Integer
26202>>>>>>>>>        Handle hDispatchDriver
26202>>>>>>>>>        Integer retVal
26202>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26203>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26204>>>>>>>>>        Function_Return retVal
26205>>>>>>>>>    End_Function
26206>>>>>>>>>
26206>>>>>>>>>    Function ComPrintRectTop Returns Integer
26208>>>>>>>>>        Handle hDispatchDriver
26208>>>>>>>>>        Integer retVal
26208>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26209>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_I4 to retVal
26210>>>>>>>>>        Function_Return retVal
26211>>>>>>>>>    End_Function
26212>>>>>>>>>
26212>>>>>>>>>    Function ComPrintRectRight Returns Integer
26214>>>>>>>>>        Handle hDispatchDriver
26214>>>>>>>>>        Integer retVal
26214>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26215>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
26216>>>>>>>>>        Function_Return retVal
26217>>>>>>>>>    End_Function
26218>>>>>>>>>
26218>>>>>>>>>    Function ComPrintRectBottom Returns Integer
26220>>>>>>>>>        Handle hDispatchDriver
26220>>>>>>>>>        Integer retVal
26220>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26221>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_I4 to retVal
26222>>>>>>>>>        Function_Return retVal
26223>>>>>>>>>    End_Function
26224>>>>>>>>>End_Class
26225>>>>>>>>>
26225>>>>>>>>>// CLSID: {C0DE2200-A5D8-4569-8690-592295C5583A}
26225>>>>>>>>>Class cCJComStatusBarPane is a cComAutomationObject
26226>>>>>>>>>
26226>>>>>>>>>    Function ComWidth Returns Integer
26228>>>>>>>>>        Integer retVal
26228>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26229>>>>>>>>>        Function_Return retVal
26230>>>>>>>>>    End_Function
26231>>>>>>>>>
26231>>>>>>>>>    Procedure Set ComWidth Integer value
26233>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26234>>>>>>>>>    End_Procedure
26235>>>>>>>>>
26235>>>>>>>>>    Function ComStyle Returns XTPStatusPaneStyle
26237>>>>>>>>>        XTPStatusPaneStyle retVal
26237>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
26238>>>>>>>>>        Function_Return retVal
26239>>>>>>>>>    End_Function
26240>>>>>>>>>
26240>>>>>>>>>    Procedure Set ComStyle XTPStatusPaneStyle value
26242>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
26243>>>>>>>>>    End_Procedure
26244>>>>>>>>>
26244>>>>>>>>>    Function ComVisible Returns Boolean
26246>>>>>>>>>        Boolean retVal
26246>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
26247>>>>>>>>>        Function_Return retVal
26248>>>>>>>>>    End_Function
26249>>>>>>>>>
26249>>>>>>>>>    Procedure Set ComVisible Boolean value
26251>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
26252>>>>>>>>>    End_Procedure
26253>>>>>>>>>
26253>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
26255>>>>>>>>>        OLE_HANDLE retVal
26255>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
26256>>>>>>>>>        Function_Return retVal
26257>>>>>>>>>    End_Function
26258>>>>>>>>>
26258>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
26260>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
26261>>>>>>>>>    End_Procedure
26262>>>>>>>>>
26262>>>>>>>>>    Function ComToolTip Returns String
26264>>>>>>>>>        String retVal
26264>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
26265>>>>>>>>>        Function_Return retVal
26266>>>>>>>>>    End_Function
26267>>>>>>>>>
26267>>>>>>>>>    Procedure Set ComToolTip String value
26269>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
26270>>>>>>>>>    End_Procedure
26271>>>>>>>>>
26271>>>>>>>>>    Function ComBeginGroup Returns Boolean
26273>>>>>>>>>        Boolean retVal
26273>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
26274>>>>>>>>>        Function_Return retVal
26275>>>>>>>>>    End_Function
26276>>>>>>>>>
26276>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
26278>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
26279>>>>>>>>>    End_Procedure
26280>>>>>>>>>
26280>>>>>>>>>    Function ComCaption Returns String
26282>>>>>>>>>        String retVal
26282>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to retVal
26283>>>>>>>>>        Function_Return retVal
26284>>>>>>>>>    End_Function
26285>>>>>>>>>
26285>>>>>>>>>    Procedure Set ComCaption String value
26287>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to value
26288>>>>>>>>>    End_Procedure
26289>>>>>>>>>
26289>>>>>>>>>    Function ComEnabled Returns Boolean
26291>>>>>>>>>        Boolean retVal
26291>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
26292>>>>>>>>>        Function_Return retVal
26293>>>>>>>>>    End_Function
26294>>>>>>>>>
26294>>>>>>>>>    Procedure Set ComEnabled Boolean value
26296>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
26297>>>>>>>>>    End_Procedure
26298>>>>>>>>>
26298>>>>>>>>>    Function ComCustomizable Returns Boolean
26300>>>>>>>>>        Boolean retVal
26300>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
26301>>>>>>>>>        Function_Return retVal
26302>>>>>>>>>    End_Function
26303>>>>>>>>>
26303>>>>>>>>>    Procedure Set ComCustomizable Boolean value
26305>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
26306>>>>>>>>>    End_Procedure
26307>>>>>>>>>
26307>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
26309>>>>>>>>>        XTPControlHideFlags retVal
26309>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
26310>>>>>>>>>        Function_Return retVal
26311>>>>>>>>>    End_Function
26312>>>>>>>>>
26312>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
26314>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
26315>>>>>>>>>    End_Procedure
26316>>>>>>>>>
26316>>>>>>>>>    Function ComDark Returns Boolean
26318>>>>>>>>>        Boolean retVal
26318>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
26319>>>>>>>>>        Function_Return retVal
26320>>>>>>>>>    End_Function
26321>>>>>>>>>
26321>>>>>>>>>    Procedure Set ComDark Boolean value
26323>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
26324>>>>>>>>>    End_Procedure
26325>>>>>>>>>
26325>>>>>>>>>    Function ComText Returns String
26327>>>>>>>>>        String retVal
26327>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
26328>>>>>>>>>        Function_Return retVal
26329>>>>>>>>>    End_Function
26330>>>>>>>>>
26330>>>>>>>>>    Procedure Set ComText String value
26332>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
26333>>>>>>>>>    End_Procedure
26334>>>>>>>>>
26334>>>>>>>>>    Function ComTextColor Returns OLE_COLOR
26336>>>>>>>>>        OLE_COLOR retVal
26336>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -513 OLE_VT_I4 to retVal
26337>>>>>>>>>        Function_Return retVal
26338>>>>>>>>>    End_Function
26339>>>>>>>>>
26339>>>>>>>>>    Procedure Set ComTextColor OLE_COLOR value
26341>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -513 OLE_VT_I4 to value
26342>>>>>>>>>    End_Procedure
26343>>>>>>>>>
26343>>>>>>>>>    Function ComTextGrayColor Returns OLE_COLOR
26345>>>>>>>>>        OLE_COLOR retVal
26345>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to retVal
26346>>>>>>>>>        Function_Return retVal
26347>>>>>>>>>    End_Function
26348>>>>>>>>>
26348>>>>>>>>>    Procedure Set ComTextGrayColor OLE_COLOR value
26350>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to value
26351>>>>>>>>>    End_Procedure
26352>>>>>>>>>
26352>>>>>>>>>    Function ComBackgroundColor Returns OLE_COLOR
26354>>>>>>>>>        OLE_COLOR retVal
26354>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to retVal
26355>>>>>>>>>        Function_Return retVal
26356>>>>>>>>>    End_Function
26357>>>>>>>>>
26357>>>>>>>>>    Procedure Set ComBackgroundColor OLE_COLOR value
26359>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to value
26360>>>>>>>>>    End_Procedure
26361>>>>>>>>>
26361>>>>>>>>>    Function ComFont Returns Variant
26363>>>>>>>>>        Variant retVal
26363>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
26364>>>>>>>>>        Function_Return retVal
26365>>>>>>>>>    End_Function
26366>>>>>>>>>
26366>>>>>>>>>    Procedure Set ComFont Variant value
26368>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
26369>>>>>>>>>    End_Procedure
26370>>>>>>>>>
26370>>>>>>>>>    Function ComIconIndex Returns Integer
26372>>>>>>>>>        Integer retVal
26372>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
26373>>>>>>>>>        Function_Return retVal
26374>>>>>>>>>    End_Function
26375>>>>>>>>>
26375>>>>>>>>>    Procedure Set ComIconIndex Integer value
26377>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
26378>>>>>>>>>    End_Procedure
26379>>>>>>>>>
26379>>>>>>>>>    Function ComAlignment Returns XTPTextAlignment
26381>>>>>>>>>        XTPTextAlignment retVal
26381>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
26382>>>>>>>>>        Function_Return retVal
26383>>>>>>>>>    End_Function
26384>>>>>>>>>
26384>>>>>>>>>    Procedure Set ComAlignment XTPTextAlignment value
26386>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
26387>>>>>>>>>    End_Procedure
26388>>>>>>>>>
26388>>>>>>>>>    Function ComButton Returns Boolean
26390>>>>>>>>>        Boolean retVal
26390>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
26391>>>>>>>>>        Function_Return retVal
26392>>>>>>>>>    End_Function
26393>>>>>>>>>
26393>>>>>>>>>    Procedure Set ComButton Boolean value
26395>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
26396>>>>>>>>>    End_Procedure
26397>>>>>>>>>
26397>>>>>>>>>    Function ComValue Returns String
26399>>>>>>>>>        String retVal
26399>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BSTR to retVal
26400>>>>>>>>>        Function_Return retVal
26401>>>>>>>>>    End_Function
26402>>>>>>>>>
26402>>>>>>>>>    Procedure Set ComValue String value
26404>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BSTR to value
26405>>>>>>>>>    End_Procedure
26406>>>>>>>>>
26406>>>>>>>>>    Function ComChecked Returns Boolean
26408>>>>>>>>>        Boolean retVal
26408>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
26409>>>>>>>>>        Function_Return retVal
26410>>>>>>>>>    End_Function
26411>>>>>>>>>
26411>>>>>>>>>    Procedure Set ComChecked Boolean value
26413>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
26414>>>>>>>>>    End_Procedure
26415>>>>>>>>>
26415>>>>>>>>>    Function ComId Returns Integer
26417>>>>>>>>>        Handle hDispatchDriver
26417>>>>>>>>>        Integer retVal
26417>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26418>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26419>>>>>>>>>        Function_Return retVal
26420>>>>>>>>>    End_Function
26421>>>>>>>>>
26421>>>>>>>>>    Function ComIndex Returns Integer
26423>>>>>>>>>        Handle hDispatchDriver
26423>>>>>>>>>        Integer retVal
26423>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26424>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26425>>>>>>>>>        Function_Return retVal
26426>>>>>>>>>    End_Function
26427>>>>>>>>>
26427>>>>>>>>>    Procedure ComRemove
26429>>>>>>>>>        Handle hDispatchDriver
26429>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26430>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
26431>>>>>>>>>    End_Procedure
26432>>>>>>>>>
26432>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
26434>>>>>>>>>        Handle hDispatchDriver
26434>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26435>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26436>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
26437>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
26438>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
26439>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
26440>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
26441>>>>>>>>>    End_Procedure
26442>>>>>>>>>
26442>>>>>>>>>    Procedure ComRedrawPane
26444>>>>>>>>>        Handle hDispatchDriver
26444>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26445>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 333 OLE_VT_VOID
26446>>>>>>>>>    End_Procedure
26447>>>>>>>>>
26447>>>>>>>>>    Procedure ComSetPadding Integer llLeft Integer llTop Integer llRight Integer llBottom
26449>>>>>>>>>        Handle hDispatchDriver
26449>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26450>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26451>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
26452>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
26453>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
26454>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
26455>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
26456>>>>>>>>>    End_Procedure
26457>>>>>>>>>
26457>>>>>>>>>    Procedure ComSetMargins Integer llLeft Integer llTop Integer llRight Integer llBottom
26459>>>>>>>>>        Handle hDispatchDriver
26459>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26460>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26461>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
26462>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
26463>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
26464>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
26465>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
26466>>>>>>>>>    End_Procedure
26467>>>>>>>>>End_Class
26468>>>>>>>>>
26468>>>>>>>>>// CLSID: {C0DE2200-80B8-4E1B-878E-FFF8347C96EE}
26468>>>>>>>>>Class cCJStatusBarSwitchPane is a cComAutomationObject
26469>>>>>>>>>
26469>>>>>>>>>    Function ComWidth Returns Integer
26471>>>>>>>>>        Integer retVal
26471>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26472>>>>>>>>>        Function_Return retVal
26473>>>>>>>>>    End_Function
26474>>>>>>>>>
26474>>>>>>>>>    Procedure Set ComWidth Integer value
26476>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26477>>>>>>>>>    End_Procedure
26478>>>>>>>>>
26478>>>>>>>>>    Function ComStyle Returns XTPStatusPaneStyle
26480>>>>>>>>>        XTPStatusPaneStyle retVal
26480>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
26481>>>>>>>>>        Function_Return retVal
26482>>>>>>>>>    End_Function
26483>>>>>>>>>
26483>>>>>>>>>    Procedure Set ComStyle XTPStatusPaneStyle value
26485>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
26486>>>>>>>>>    End_Procedure
26487>>>>>>>>>
26487>>>>>>>>>    Function ComVisible Returns Boolean
26489>>>>>>>>>        Boolean retVal
26489>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
26490>>>>>>>>>        Function_Return retVal
26491>>>>>>>>>    End_Function
26492>>>>>>>>>
26492>>>>>>>>>    Procedure Set ComVisible Boolean value
26494>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
26495>>>>>>>>>    End_Procedure
26496>>>>>>>>>
26496>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
26498>>>>>>>>>        OLE_HANDLE retVal
26498>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
26499>>>>>>>>>        Function_Return retVal
26500>>>>>>>>>    End_Function
26501>>>>>>>>>
26501>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
26503>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
26504>>>>>>>>>    End_Procedure
26505>>>>>>>>>
26505>>>>>>>>>    Function ComToolTip Returns String
26507>>>>>>>>>        String retVal
26507>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
26508>>>>>>>>>        Function_Return retVal
26509>>>>>>>>>    End_Function
26510>>>>>>>>>
26510>>>>>>>>>    Procedure Set ComToolTip String value
26512>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
26513>>>>>>>>>    End_Procedure
26514>>>>>>>>>
26514>>>>>>>>>    Function ComBeginGroup Returns Boolean
26516>>>>>>>>>        Boolean retVal
26516>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
26517>>>>>>>>>        Function_Return retVal
26518>>>>>>>>>    End_Function
26519>>>>>>>>>
26519>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
26521>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
26522>>>>>>>>>    End_Procedure
26523>>>>>>>>>
26523>>>>>>>>>    Function ComCaption Returns String
26525>>>>>>>>>        String retVal
26525>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to retVal
26526>>>>>>>>>        Function_Return retVal
26527>>>>>>>>>    End_Function
26528>>>>>>>>>
26528>>>>>>>>>    Procedure Set ComCaption String value
26530>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to value
26531>>>>>>>>>    End_Procedure
26532>>>>>>>>>
26532>>>>>>>>>    Function ComEnabled Returns Boolean
26534>>>>>>>>>        Boolean retVal
26534>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
26535>>>>>>>>>        Function_Return retVal
26536>>>>>>>>>    End_Function
26537>>>>>>>>>
26537>>>>>>>>>    Procedure Set ComEnabled Boolean value
26539>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
26540>>>>>>>>>    End_Procedure
26541>>>>>>>>>
26541>>>>>>>>>    Function ComCustomizable Returns Boolean
26543>>>>>>>>>        Boolean retVal
26543>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
26544>>>>>>>>>        Function_Return retVal
26545>>>>>>>>>    End_Function
26546>>>>>>>>>
26546>>>>>>>>>    Procedure Set ComCustomizable Boolean value
26548>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
26549>>>>>>>>>    End_Procedure
26550>>>>>>>>>
26550>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
26552>>>>>>>>>        XTPControlHideFlags retVal
26552>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
26553>>>>>>>>>        Function_Return retVal
26554>>>>>>>>>    End_Function
26555>>>>>>>>>
26555>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
26557>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
26558>>>>>>>>>    End_Procedure
26559>>>>>>>>>
26559>>>>>>>>>    Function ComDark Returns Boolean
26561>>>>>>>>>        Boolean retVal
26561>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
26562>>>>>>>>>        Function_Return retVal
26563>>>>>>>>>    End_Function
26564>>>>>>>>>
26564>>>>>>>>>    Procedure Set ComDark Boolean value
26566>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
26567>>>>>>>>>    End_Procedure
26568>>>>>>>>>
26568>>>>>>>>>    Function ComChecked Returns Integer
26570>>>>>>>>>        Integer retVal
26570>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to retVal
26571>>>>>>>>>        Function_Return retVal
26572>>>>>>>>>    End_Function
26573>>>>>>>>>
26573>>>>>>>>>    Procedure Set ComChecked Integer value
26575>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to value
26576>>>>>>>>>    End_Procedure
26577>>>>>>>>>
26577>>>>>>>>>    Function ComId Returns Integer
26579>>>>>>>>>        Handle hDispatchDriver
26579>>>>>>>>>        Integer retVal
26579>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26580>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26581>>>>>>>>>        Function_Return retVal
26582>>>>>>>>>    End_Function
26583>>>>>>>>>
26583>>>>>>>>>    Function ComIndex Returns Integer
26585>>>>>>>>>        Handle hDispatchDriver
26585>>>>>>>>>        Integer retVal
26585>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26586>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26587>>>>>>>>>        Function_Return retVal
26588>>>>>>>>>    End_Function
26589>>>>>>>>>
26589>>>>>>>>>    Procedure ComRemove
26591>>>>>>>>>        Handle hDispatchDriver
26591>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26592>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
26593>>>>>>>>>    End_Procedure
26594>>>>>>>>>
26594>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
26596>>>>>>>>>        Handle hDispatchDriver
26596>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26597>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26598>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
26599>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
26600>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
26601>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
26602>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
26603>>>>>>>>>    End_Procedure
26604>>>>>>>>>
26604>>>>>>>>>    Procedure ComRedrawPane
26606>>>>>>>>>        Handle hDispatchDriver
26606>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26607>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 333 OLE_VT_VOID
26608>>>>>>>>>    End_Procedure
26609>>>>>>>>>
26609>>>>>>>>>    Procedure ComAddSwitch Integer llId String llToolTip
26611>>>>>>>>>        Handle hDispatchDriver
26611>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26612>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26613>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26614>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llToolTip
26615>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 120 OLE_VT_VOID
26616>>>>>>>>>    End_Procedure
26617>>>>>>>>>
26617>>>>>>>>>    Procedure ComRemoveSwitch Integer llId
26619>>>>>>>>>        Handle hDispatchDriver
26619>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26620>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
26621>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26622>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 121 OLE_VT_VOID
26623>>>>>>>>>    End_Procedure
26624>>>>>>>>>
26624>>>>>>>>>    Procedure ComEnableSwitch Integer llId Boolean llEnable
26626>>>>>>>>>        Handle hDispatchDriver
26626>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26627>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26628>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26629>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
26630>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 123 OLE_VT_VOID
26631>>>>>>>>>    End_Procedure
26632>>>>>>>>>
26632>>>>>>>>>    Function ComSwitchTooltip Integer llId Returns String
26634>>>>>>>>>        Handle hDispatchDriver
26634>>>>>>>>>        String retVal
26634>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26635>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
26636>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26637>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 124 OLE_VT_BSTR to retVal
26638>>>>>>>>>        Function_Return retVal
26639>>>>>>>>>    End_Function
26640>>>>>>>>>
26640>>>>>>>>>    Procedure Set ComSwitchTooltip Integer llId String value
26642>>>>>>>>>        Handle hDispatchDriver
26642>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26643>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26644>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26645>>>>>>>>>        Set ComProperty of hDispatchDriver 124 OLE_VT_BSTR to value
26646>>>>>>>>>    End_Procedure
26647>>>>>>>>>End_Class
26648>>>>>>>>>
26648>>>>>>>>>// CLSID: {C0DE2200-C7DE-43D1-A36D-48CDD92DA1F7}
26648>>>>>>>>>Class cCJStatusBarSliderPane is a cComAutomationObject
26649>>>>>>>>>
26649>>>>>>>>>    Function ComWidth Returns Integer
26651>>>>>>>>>        Integer retVal
26651>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26652>>>>>>>>>        Function_Return retVal
26653>>>>>>>>>    End_Function
26654>>>>>>>>>
26654>>>>>>>>>    Procedure Set ComWidth Integer value
26656>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26657>>>>>>>>>    End_Procedure
26658>>>>>>>>>
26658>>>>>>>>>    Function ComStyle Returns XTPStatusPaneStyle
26660>>>>>>>>>        XTPStatusPaneStyle retVal
26660>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
26661>>>>>>>>>        Function_Return retVal
26662>>>>>>>>>    End_Function
26663>>>>>>>>>
26663>>>>>>>>>    Procedure Set ComStyle XTPStatusPaneStyle value
26665>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
26666>>>>>>>>>    End_Procedure
26667>>>>>>>>>
26667>>>>>>>>>    Function ComVisible Returns Boolean
26669>>>>>>>>>        Boolean retVal
26669>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
26670>>>>>>>>>        Function_Return retVal
26671>>>>>>>>>    End_Function
26672>>>>>>>>>
26672>>>>>>>>>    Procedure Set ComVisible Boolean value
26674>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
26675>>>>>>>>>    End_Procedure
26676>>>>>>>>>
26676>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
26678>>>>>>>>>        OLE_HANDLE retVal
26678>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
26679>>>>>>>>>        Function_Return retVal
26680>>>>>>>>>    End_Function
26681>>>>>>>>>
26681>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
26683>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
26684>>>>>>>>>    End_Procedure
26685>>>>>>>>>
26685>>>>>>>>>    Function ComToolTip Returns String
26687>>>>>>>>>        String retVal
26687>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
26688>>>>>>>>>        Function_Return retVal
26689>>>>>>>>>    End_Function
26690>>>>>>>>>
26690>>>>>>>>>    Procedure Set ComToolTip String value
26692>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
26693>>>>>>>>>    End_Procedure
26694>>>>>>>>>
26694>>>>>>>>>    Function ComBeginGroup Returns Boolean
26696>>>>>>>>>        Boolean retVal
26696>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
26697>>>>>>>>>        Function_Return retVal
26698>>>>>>>>>    End_Function
26699>>>>>>>>>
26699>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
26701>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
26702>>>>>>>>>    End_Procedure
26703>>>>>>>>>
26703>>>>>>>>>    Function ComCaption Returns String
26705>>>>>>>>>        String retVal
26705>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to retVal
26706>>>>>>>>>        Function_Return retVal
26707>>>>>>>>>    End_Function
26708>>>>>>>>>
26708>>>>>>>>>    Procedure Set ComCaption String value
26710>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to value
26711>>>>>>>>>    End_Procedure
26712>>>>>>>>>
26712>>>>>>>>>    Function ComEnabled Returns Boolean
26714>>>>>>>>>        Boolean retVal
26714>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
26715>>>>>>>>>        Function_Return retVal
26716>>>>>>>>>    End_Function
26717>>>>>>>>>
26717>>>>>>>>>    Procedure Set ComEnabled Boolean value
26719>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
26720>>>>>>>>>    End_Procedure
26721>>>>>>>>>
26721>>>>>>>>>    Function ComCustomizable Returns Boolean
26723>>>>>>>>>        Boolean retVal
26723>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
26724>>>>>>>>>        Function_Return retVal
26725>>>>>>>>>    End_Function
26726>>>>>>>>>
26726>>>>>>>>>    Procedure Set ComCustomizable Boolean value
26728>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
26729>>>>>>>>>    End_Procedure
26730>>>>>>>>>
26730>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
26732>>>>>>>>>        XTPControlHideFlags retVal
26732>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
26733>>>>>>>>>        Function_Return retVal
26734>>>>>>>>>    End_Function
26735>>>>>>>>>
26735>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
26737>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
26738>>>>>>>>>    End_Procedure
26739>>>>>>>>>
26739>>>>>>>>>    Function ComDark Returns Boolean
26741>>>>>>>>>        Boolean retVal
26741>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
26742>>>>>>>>>        Function_Return retVal
26743>>>>>>>>>    End_Function
26744>>>>>>>>>
26744>>>>>>>>>    Procedure Set ComDark Boolean value
26746>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
26747>>>>>>>>>    End_Procedure
26748>>>>>>>>>
26748>>>>>>>>>    Function ComMin Returns Integer
26750>>>>>>>>>        Integer retVal
26750>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 120 OLE_VT_I4 to retVal
26751>>>>>>>>>        Function_Return retVal
26752>>>>>>>>>    End_Function
26753>>>>>>>>>
26753>>>>>>>>>    Procedure Set ComMin Integer value
26755>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 120 OLE_VT_I4 to value
26756>>>>>>>>>    End_Procedure
26757>>>>>>>>>
26757>>>>>>>>>    Function ComMax Returns Integer
26759>>>>>>>>>        Integer retVal
26759>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 121 OLE_VT_I4 to retVal
26760>>>>>>>>>        Function_Return retVal
26761>>>>>>>>>    End_Function
26762>>>>>>>>>
26762>>>>>>>>>    Procedure Set ComMax Integer value
26764>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 121 OLE_VT_I4 to value
26765>>>>>>>>>    End_Procedure
26766>>>>>>>>>
26766>>>>>>>>>    Function ComValue Returns Integer
26768>>>>>>>>>        Integer retVal
26768>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to retVal
26769>>>>>>>>>        Function_Return retVal
26770>>>>>>>>>    End_Function
26771>>>>>>>>>
26771>>>>>>>>>    Procedure Set ComValue Integer value
26773>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to value
26774>>>>>>>>>    End_Procedure
26775>>>>>>>>>
26775>>>>>>>>>    Function ComId Returns Integer
26777>>>>>>>>>        Handle hDispatchDriver
26777>>>>>>>>>        Integer retVal
26777>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26778>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26779>>>>>>>>>        Function_Return retVal
26780>>>>>>>>>    End_Function
26781>>>>>>>>>
26781>>>>>>>>>    Function ComIndex Returns Integer
26783>>>>>>>>>        Handle hDispatchDriver
26783>>>>>>>>>        Integer retVal
26783>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26784>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26785>>>>>>>>>        Function_Return retVal
26786>>>>>>>>>    End_Function
26787>>>>>>>>>
26787>>>>>>>>>    Procedure ComRemove
26789>>>>>>>>>        Handle hDispatchDriver
26789>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26790>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
26791>>>>>>>>>    End_Procedure
26792>>>>>>>>>
26792>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
26794>>>>>>>>>        Handle hDispatchDriver
26794>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26795>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26796>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
26797>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
26798>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
26799>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
26800>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
26801>>>>>>>>>    End_Procedure
26802>>>>>>>>>
26802>>>>>>>>>    Procedure ComRedrawPane
26804>>>>>>>>>        Handle hDispatchDriver
26804>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26805>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 333 OLE_VT_VOID
26806>>>>>>>>>    End_Procedure
26807>>>>>>>>>
26807>>>>>>>>>    Procedure ComSetTooltipPart XTPSliderCommand llCommand String llToolTip
26809>>>>>>>>>        Handle hDispatchDriver
26809>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26810>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26811>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
26812>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llToolTip
26813>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 123 OLE_VT_VOID
26814>>>>>>>>>    End_Procedure
26815>>>>>>>>>
26815>>>>>>>>>    Procedure ComSetTicks Variant llTicks
26817>>>>>>>>>        Handle hDispatchDriver
26817>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26818>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
26819>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llTicks
26820>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 124 OLE_VT_VOID
26821>>>>>>>>>    End_Procedure
26822>>>>>>>>>End_Class
26823>>>>>>>>>
26823>>>>>>>>>// CLSID: {C0DE2200-A19C-4749-A1F2-991D33618081}
26823>>>>>>>>>Class cCJStatusBarProgressPane is a cComAutomationObject
26824>>>>>>>>>
26824>>>>>>>>>    Function ComWidth Returns Integer
26826>>>>>>>>>        Integer retVal
26826>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26827>>>>>>>>>        Function_Return retVal
26828>>>>>>>>>    End_Function
26829>>>>>>>>>
26829>>>>>>>>>    Procedure Set ComWidth Integer value
26831>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26832>>>>>>>>>    End_Procedure
26833>>>>>>>>>
26833>>>>>>>>>    Function ComStyle Returns XTPStatusPaneStyle
26835>>>>>>>>>        XTPStatusPaneStyle retVal
26835>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
26836>>>>>>>>>        Function_Return retVal
26837>>>>>>>>>    End_Function
26838>>>>>>>>>
26838>>>>>>>>>    Procedure Set ComStyle XTPStatusPaneStyle value
26840>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
26841>>>>>>>>>    End_Procedure
26842>>>>>>>>>
26842>>>>>>>>>    Function ComVisible Returns Boolean
26844>>>>>>>>>        Boolean retVal
26844>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
26845>>>>>>>>>        Function_Return retVal
26846>>>>>>>>>    End_Function
26847>>>>>>>>>
26847>>>>>>>>>    Procedure Set ComVisible Boolean value
26849>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
26850>>>>>>>>>    End_Procedure
26851>>>>>>>>>
26851>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
26853>>>>>>>>>        OLE_HANDLE retVal
26853>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
26854>>>>>>>>>        Function_Return retVal
26855>>>>>>>>>    End_Function
26856>>>>>>>>>
26856>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
26858>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
26859>>>>>>>>>    End_Procedure
26860>>>>>>>>>
26860>>>>>>>>>    Function ComToolTip Returns String
26862>>>>>>>>>        String retVal
26862>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
26863>>>>>>>>>        Function_Return retVal
26864>>>>>>>>>    End_Function
26865>>>>>>>>>
26865>>>>>>>>>    Procedure Set ComToolTip String value
26867>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
26868>>>>>>>>>    End_Procedure
26869>>>>>>>>>
26869>>>>>>>>>    Function ComBeginGroup Returns Boolean
26871>>>>>>>>>        Boolean retVal
26871>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
26872>>>>>>>>>        Function_Return retVal
26873>>>>>>>>>    End_Function
26874>>>>>>>>>
26874>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
26876>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
26877>>>>>>>>>    End_Procedure
26878>>>>>>>>>
26878>>>>>>>>>    Function ComCaption Returns String
26880>>>>>>>>>        String retVal
26880>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to retVal
26881>>>>>>>>>        Function_Return retVal
26882>>>>>>>>>    End_Function
26883>>>>>>>>>
26883>>>>>>>>>    Procedure Set ComCaption String value
26885>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to value
26886>>>>>>>>>    End_Procedure
26887>>>>>>>>>
26887>>>>>>>>>    Function ComEnabled Returns Boolean
26889>>>>>>>>>        Boolean retVal
26889>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
26890>>>>>>>>>        Function_Return retVal
26891>>>>>>>>>    End_Function
26892>>>>>>>>>
26892>>>>>>>>>    Procedure Set ComEnabled Boolean value
26894>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
26895>>>>>>>>>    End_Procedure
26896>>>>>>>>>
26896>>>>>>>>>    Function ComCustomizable Returns Boolean
26898>>>>>>>>>        Boolean retVal
26898>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
26899>>>>>>>>>        Function_Return retVal
26900>>>>>>>>>    End_Function
26901>>>>>>>>>
26901>>>>>>>>>    Procedure Set ComCustomizable Boolean value
26903>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
26904>>>>>>>>>    End_Procedure
26905>>>>>>>>>
26905>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
26907>>>>>>>>>        XTPControlHideFlags retVal
26907>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
26908>>>>>>>>>        Function_Return retVal
26909>>>>>>>>>    End_Function
26910>>>>>>>>>
26910>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
26912>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
26913>>>>>>>>>    End_Procedure
26914>>>>>>>>>
26914>>>>>>>>>    Function ComDark Returns Boolean
26916>>>>>>>>>        Boolean retVal
26916>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
26917>>>>>>>>>        Function_Return retVal
26918>>>>>>>>>    End_Function
26919>>>>>>>>>
26919>>>>>>>>>    Procedure Set ComDark Boolean value
26921>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
26922>>>>>>>>>    End_Procedure
26923>>>>>>>>>
26923>>>>>>>>>    Function ComMin Returns Integer
26925>>>>>>>>>        Integer retVal
26925>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 120 OLE_VT_I4 to retVal
26926>>>>>>>>>        Function_Return retVal
26927>>>>>>>>>    End_Function
26928>>>>>>>>>
26928>>>>>>>>>    Procedure Set ComMin Integer value
26930>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 120 OLE_VT_I4 to value
26931>>>>>>>>>    End_Procedure
26932>>>>>>>>>
26932>>>>>>>>>    Function ComMax Returns Integer
26934>>>>>>>>>        Integer retVal
26934>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 121 OLE_VT_I4 to retVal
26935>>>>>>>>>        Function_Return retVal
26936>>>>>>>>>    End_Function
26937>>>>>>>>>
26937>>>>>>>>>    Procedure Set ComMax Integer value
26939>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 121 OLE_VT_I4 to value
26940>>>>>>>>>    End_Procedure
26941>>>>>>>>>
26941>>>>>>>>>    Function ComValue Returns Integer
26943>>>>>>>>>        Integer retVal
26943>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to retVal
26944>>>>>>>>>        Function_Return retVal
26945>>>>>>>>>    End_Function
26946>>>>>>>>>
26946>>>>>>>>>    Procedure Set ComValue Integer value
26948>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to value
26949>>>>>>>>>    End_Procedure
26950>>>>>>>>>
26950>>>>>>>>>    Function ComId Returns Integer
26952>>>>>>>>>        Handle hDispatchDriver
26952>>>>>>>>>        Integer retVal
26952>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26953>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26954>>>>>>>>>        Function_Return retVal
26955>>>>>>>>>    End_Function
26956>>>>>>>>>
26956>>>>>>>>>    Function ComIndex Returns Integer
26958>>>>>>>>>        Handle hDispatchDriver
26958>>>>>>>>>        Integer retVal
26958>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26959>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26960>>>>>>>>>        Function_Return retVal
26961>>>>>>>>>    End_Function
26962>>>>>>>>>
26962>>>>>>>>>    Procedure ComRemove
26964>>>>>>>>>        Handle hDispatchDriver
26964>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26965>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
26966>>>>>>>>>    End_Procedure
26967>>>>>>>>>
26967>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
26969>>>>>>>>>        Handle hDispatchDriver
26969>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26970>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26971>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
26972>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
26973>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
26974>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
26975>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
26976>>>>>>>>>    End_Procedure
26977>>>>>>>>>
26977>>>>>>>>>    Procedure ComRedrawPane
26979>>>>>>>>>        Handle hDispatchDriver
26979>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26980>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 333 OLE_VT_VOID
26981>>>>>>>>>    End_Procedure
26982>>>>>>>>>
26982>>>>>>>>>    Procedure ComRedrawProgress
26984>>>>>>>>>        Handle hDispatchDriver
26984>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26985>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 334 OLE_VT_VOID
26986>>>>>>>>>    End_Procedure
26987>>>>>>>>>End_Class
26988>>>>>>>>>
26988>>>>>>>>>// CLSID: {C0DE2200-481B-4769-ABB2-56F0D7F7BB9E}
26988>>>>>>>>>// Dispatch interface for MessageBar Control
26988>>>>>>>>>Class cCJMessageBar is a cComAutomationObject
26989>>>>>>>>>
26989>>>>>>>>>    Function ComVisible Returns Boolean
26991>>>>>>>>>        Boolean retVal
26991>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
26992>>>>>>>>>        Function_Return retVal
26993>>>>>>>>>    End_Function
26994>>>>>>>>>
26994>>>>>>>>>    Procedure Set ComVisible Boolean value
26996>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
26997>>>>>>>>>    End_Procedure
26998>>>>>>>>>
26998>>>>>>>>>    Function ComMessage Returns String
27000>>>>>>>>>        String retVal
27000>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
27001>>>>>>>>>        Function_Return retVal
27002>>>>>>>>>    End_Function
27003>>>>>>>>>
27003>>>>>>>>>    Procedure Set ComMessage String value
27005>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
27006>>>>>>>>>    End_Procedure
27007>>>>>>>>>
27007>>>>>>>>>    Function ComHeight Returns Integer
27009>>>>>>>>>        Integer retVal
27009>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
27010>>>>>>>>>        Function_Return retVal
27011>>>>>>>>>    End_Function
27012>>>>>>>>>
27012>>>>>>>>>    Procedure Set ComHeight Integer value
27014>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
27015>>>>>>>>>    End_Procedure
27016>>>>>>>>>
27016>>>>>>>>>    Procedure ComAddButton Integer llId String llCaption String llToolTip
27018>>>>>>>>>        Handle hDispatchDriver
27018>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27019>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
27020>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
27021>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
27022>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llToolTip
27023>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
27024>>>>>>>>>    End_Procedure
27025>>>>>>>>>
27025>>>>>>>>>    Procedure ComRemoveButtons
27027>>>>>>>>>        Handle hDispatchDriver
27027>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27028>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
27029>>>>>>>>>    End_Procedure
27030>>>>>>>>>
27030>>>>>>>>>    Procedure ComAddCloseButton String llToolTip
27032>>>>>>>>>        Handle hDispatchDriver
27032>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27033>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27034>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llToolTip
27035>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
27036>>>>>>>>>    End_Procedure
27037>>>>>>>>>End_Class
27038>>>>>>>>>
27038>>>>>>>>>// CLSID: {C0DE2200-789A-40D9-B564-7577DA549319}
27038>>>>>>>>>Class cCJRibbonBarSystemButton is a cComAutomationObject
27039>>>>>>>>>
27039>>>>>>>>>    Function ComChecked Returns Boolean
27041>>>>>>>>>        Boolean retVal
27041>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
27042>>>>>>>>>        Function_Return retVal
27043>>>>>>>>>    End_Function
27044>>>>>>>>>
27044>>>>>>>>>    Procedure Set ComChecked Boolean value
27046>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
27047>>>>>>>>>    End_Procedure
27048>>>>>>>>>
27048>>>>>>>>>    Function ComBeginGroup Returns Boolean
27050>>>>>>>>>        Boolean retVal
27050>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
27051>>>>>>>>>        Function_Return retVal
27052>>>>>>>>>    End_Function
27053>>>>>>>>>
27053>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
27055>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
27056>>>>>>>>>    End_Procedure
27057>>>>>>>>>
27057>>>>>>>>>    Function ComCaption Returns String
27059>>>>>>>>>        String retVal
27059>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
27060>>>>>>>>>        Function_Return retVal
27061>>>>>>>>>    End_Function
27062>>>>>>>>>
27062>>>>>>>>>    Procedure Set ComCaption String value
27064>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
27065>>>>>>>>>    End_Procedure
27066>>>>>>>>>
27066>>>>>>>>>    Function ComDescriptionText Returns String
27068>>>>>>>>>        String retVal
27068>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
27069>>>>>>>>>        Function_Return retVal
27070>>>>>>>>>    End_Function
27071>>>>>>>>>
27071>>>>>>>>>    Procedure Set ComDescriptionText String value
27073>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
27074>>>>>>>>>    End_Procedure
27075>>>>>>>>>
27075>>>>>>>>>    Function ComId Returns Integer
27077>>>>>>>>>        Integer retVal
27077>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
27078>>>>>>>>>        Function_Return retVal
27079>>>>>>>>>    End_Function
27080>>>>>>>>>
27080>>>>>>>>>    Procedure Set ComId Integer value
27082>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
27083>>>>>>>>>    End_Procedure
27084>>>>>>>>>
27084>>>>>>>>>    Function ComParameter Returns String
27086>>>>>>>>>        String retVal
27086>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
27087>>>>>>>>>        Function_Return retVal
27088>>>>>>>>>    End_Function
27089>>>>>>>>>
27089>>>>>>>>>    Procedure Set ComParameter String value
27091>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
27092>>>>>>>>>    End_Procedure
27093>>>>>>>>>
27093>>>>>>>>>    Function ComShortcutText Returns String
27095>>>>>>>>>        String retVal
27095>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
27096>>>>>>>>>        Function_Return retVal
27097>>>>>>>>>    End_Function
27098>>>>>>>>>
27098>>>>>>>>>    Procedure Set ComShortcutText String value
27100>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
27101>>>>>>>>>    End_Procedure
27102>>>>>>>>>
27102>>>>>>>>>    Function ComCustomShortcutText Returns String
27104>>>>>>>>>        String retVal
27104>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
27105>>>>>>>>>        Function_Return retVal
27106>>>>>>>>>    End_Function
27107>>>>>>>>>
27107>>>>>>>>>    Procedure Set ComCustomShortcutText String value
27109>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
27110>>>>>>>>>    End_Procedure
27111>>>>>>>>>
27111>>>>>>>>>    Function ComTooltipText Returns String
27113>>>>>>>>>        String retVal
27113>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
27114>>>>>>>>>        Function_Return retVal
27115>>>>>>>>>    End_Function
27116>>>>>>>>>
27116>>>>>>>>>    Procedure Set ComTooltipText String value
27118>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
27119>>>>>>>>>    End_Procedure
27120>>>>>>>>>
27120>>>>>>>>>    Function ComVisible Returns Boolean
27122>>>>>>>>>        Boolean retVal
27122>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
27123>>>>>>>>>        Function_Return retVal
27124>>>>>>>>>    End_Function
27125>>>>>>>>>
27125>>>>>>>>>    Procedure Set ComVisible Boolean value
27127>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
27128>>>>>>>>>    End_Procedure
27129>>>>>>>>>
27129>>>>>>>>>    Function ComEnabled Returns Boolean
27131>>>>>>>>>        Boolean retVal
27131>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
27132>>>>>>>>>        Function_Return retVal
27133>>>>>>>>>    End_Function
27134>>>>>>>>>
27134>>>>>>>>>    Procedure Set ComEnabled Boolean value
27136>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
27137>>>>>>>>>    End_Procedure
27138>>>>>>>>>
27138>>>>>>>>>    Function ComIconId Returns Integer
27140>>>>>>>>>        Integer retVal
27140>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
27141>>>>>>>>>        Function_Return retVal
27142>>>>>>>>>    End_Function
27143>>>>>>>>>
27143>>>>>>>>>    Procedure Set ComIconId Integer value
27145>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
27146>>>>>>>>>    End_Procedure
27147>>>>>>>>>
27147>>>>>>>>>    Function ComDefaultItem Returns Boolean
27149>>>>>>>>>        Boolean retVal
27149>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
27150>>>>>>>>>        Function_Return retVal
27151>>>>>>>>>    End_Function
27152>>>>>>>>>
27152>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
27154>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
27155>>>>>>>>>    End_Procedure
27156>>>>>>>>>
27156>>>>>>>>>    Function ComFlags Returns XTPControlFlags
27158>>>>>>>>>        XTPControlFlags retVal
27158>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
27159>>>>>>>>>        Function_Return retVal
27160>>>>>>>>>    End_Function
27161>>>>>>>>>
27161>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
27163>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
27164>>>>>>>>>    End_Procedure
27165>>>>>>>>>
27165>>>>>>>>>    Function ComCategory Returns String
27167>>>>>>>>>        String retVal
27167>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
27168>>>>>>>>>        Function_Return retVal
27169>>>>>>>>>    End_Function
27170>>>>>>>>>
27170>>>>>>>>>    Procedure Set ComCategory String value
27172>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
27173>>>>>>>>>    End_Procedure
27174>>>>>>>>>
27174>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
27176>>>>>>>>>        XTPControlHideFlags retVal
27176>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
27177>>>>>>>>>        Function_Return retVal
27178>>>>>>>>>    End_Function
27179>>>>>>>>>
27179>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
27181>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
27182>>>>>>>>>    End_Procedure
27183>>>>>>>>>
27183>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
27185>>>>>>>>>        Boolean retVal
27185>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
27186>>>>>>>>>        Function_Return retVal
27187>>>>>>>>>    End_Function
27188>>>>>>>>>
27188>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
27190>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
27191>>>>>>>>>    End_Procedure
27192>>>>>>>>>
27192>>>>>>>>>    Function ComAction Returns Variant
27194>>>>>>>>>        Variant retVal
27194>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
27195>>>>>>>>>        Function_Return retVal
27196>>>>>>>>>    End_Function
27197>>>>>>>>>
27197>>>>>>>>>    Procedure Set ComAction Variant value
27199>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
27200>>>>>>>>>    End_Procedure
27201>>>>>>>>>
27201>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
27203>>>>>>>>>        Integer retVal
27203>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
27204>>>>>>>>>        Function_Return retVal
27205>>>>>>>>>    End_Function
27206>>>>>>>>>
27206>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
27208>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
27209>>>>>>>>>    End_Procedure
27210>>>>>>>>>
27210>>>>>>>>>    Function ComWidth Returns Integer
27212>>>>>>>>>        Integer retVal
27212>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
27213>>>>>>>>>        Function_Return retVal
27214>>>>>>>>>    End_Function
27215>>>>>>>>>
27215>>>>>>>>>    Procedure Set ComWidth Integer value
27217>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
27218>>>>>>>>>    End_Procedure
27219>>>>>>>>>
27219>>>>>>>>>    Function ComHeight Returns Integer
27221>>>>>>>>>        Integer retVal
27221>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
27222>>>>>>>>>        Function_Return retVal
27223>>>>>>>>>    End_Function
27224>>>>>>>>>
27224>>>>>>>>>    Procedure Set ComHeight Integer value
27226>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
27227>>>>>>>>>    End_Procedure
27228>>>>>>>>>
27228>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
27230>>>>>>>>>        XTPButtonStyle retVal
27230>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
27231>>>>>>>>>        Function_Return retVal
27232>>>>>>>>>    End_Function
27233>>>>>>>>>
27233>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
27235>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
27236>>>>>>>>>    End_Procedure
27237>>>>>>>>>
27237>>>>>>>>>    Function ComKeyboardTip Returns String
27239>>>>>>>>>        String retVal
27239>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
27240>>>>>>>>>        Function_Return retVal
27241>>>>>>>>>    End_Function
27242>>>>>>>>>
27242>>>>>>>>>    Procedure Set ComKeyboardTip String value
27244>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
27245>>>>>>>>>    End_Procedure
27246>>>>>>>>>
27246>>>>>>>>>    Function ComCommandBar Returns Variant
27248>>>>>>>>>        Variant retVal
27248>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
27249>>>>>>>>>        Function_Return retVal
27250>>>>>>>>>    End_Function
27251>>>>>>>>>
27251>>>>>>>>>    Procedure Set ComCommandBar Variant value
27253>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
27254>>>>>>>>>    End_Procedure
27255>>>>>>>>>
27255>>>>>>>>>    Function ComCloseOnDblClick Returns Boolean
27257>>>>>>>>>        Boolean retVal
27257>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_BOOL to retVal
27258>>>>>>>>>        Function_Return retVal
27259>>>>>>>>>    End_Function
27260>>>>>>>>>
27260>>>>>>>>>    Procedure Set ComCloseOnDblClick Boolean value
27262>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_BOOL to value
27263>>>>>>>>>    End_Procedure
27264>>>>>>>>>
27264>>>>>>>>>    Function ComControls Returns Variant
27266>>>>>>>>>        Handle hDispatchDriver
27266>>>>>>>>>        Variant retVal
27266>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27267>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
27268>>>>>>>>>        Function_Return retVal
27269>>>>>>>>>    End_Function
27270>>>>>>>>>
27270>>>>>>>>>    Function ComParent Returns Variant
27272>>>>>>>>>        Handle hDispatchDriver
27272>>>>>>>>>        Variant retVal
27272>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27273>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
27274>>>>>>>>>        Function_Return retVal
27275>>>>>>>>>    End_Function
27276>>>>>>>>>
27276>>>>>>>>>    Function ComIndex Returns Integer
27278>>>>>>>>>        Handle hDispatchDriver
27278>>>>>>>>>        Integer retVal
27278>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27279>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
27280>>>>>>>>>        Function_Return retVal
27281>>>>>>>>>    End_Function
27282>>>>>>>>>
27282>>>>>>>>>    Function ComType Returns XTPControlType
27284>>>>>>>>>        Handle hDispatchDriver
27284>>>>>>>>>        XTPControlType retVal
27284>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27285>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
27286>>>>>>>>>        Function_Return retVal
27287>>>>>>>>>    End_Function
27288>>>>>>>>>
27288>>>>>>>>>    Procedure ComDelete
27290>>>>>>>>>        Handle hDispatchDriver
27290>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27291>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
27292>>>>>>>>>    End_Procedure
27293>>>>>>>>>
27293>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
27295>>>>>>>>>        Handle hDispatchDriver
27295>>>>>>>>>        Variant retVal
27295>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27296>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
27297>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
27298>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
27299>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
27300>>>>>>>>>        Function_Return retVal
27301>>>>>>>>>    End_Function
27302>>>>>>>>>
27302>>>>>>>>>    Procedure ComSetFocus
27304>>>>>>>>>        Handle hDispatchDriver
27304>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27305>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
27306>>>>>>>>>    End_Procedure
27307>>>>>>>>>
27307>>>>>>>>>    Procedure ComExecute
27309>>>>>>>>>        Handle hDispatchDriver
27309>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27310>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
27311>>>>>>>>>    End_Procedure
27312>>>>>>>>>
27312>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
27314>>>>>>>>>        Handle hDispatchDriver
27314>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27315>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
27316>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
27317>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
27318>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
27319>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
27320>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
27321>>>>>>>>>    End_Procedure
27322>>>>>>>>>
27322>>>>>>>>>    Function ComRibbonGroup Returns Variant
27324>>>>>>>>>        Handle hDispatchDriver
27324>>>>>>>>>        Variant retVal
27324>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27325>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
27326>>>>>>>>>        Function_Return retVal
27327>>>>>>>>>    End_Function
27328>>>>>>>>>
27328>>>>>>>>>    Procedure ComReset
27330>>>>>>>>>        Handle hDispatchDriver
27330>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27331>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
27332>>>>>>>>>    End_Procedure
27333>>>>>>>>>
27333>>>>>>>>>    Function ComTop Returns Integer
27335>>>>>>>>>        Handle hDispatchDriver
27335>>>>>>>>>        Integer retVal
27335>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27336>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
27337>>>>>>>>>        Function_Return retVal
27338>>>>>>>>>    End_Function
27339>>>>>>>>>
27339>>>>>>>>>    Function ComLeft Returns Integer
27341>>>>>>>>>        Handle hDispatchDriver
27341>>>>>>>>>        Integer retVal
27341>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27342>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
27343>>>>>>>>>        Function_Return retVal
27344>>>>>>>>>    End_Function
27345>>>>>>>>>
27345>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
27347>>>>>>>>>        Handle hDispatchDriver
27347>>>>>>>>>        Variant retVal
27347>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27348>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27349>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
27350>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
27351>>>>>>>>>        Function_Return retVal
27352>>>>>>>>>    End_Function
27353>>>>>>>>>
27353>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
27355>>>>>>>>>        Handle hDispatchDriver
27355>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27356>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
27357>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
27358>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
27359>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
27360>>>>>>>>>    End_Procedure
27361>>>>>>>>>End_Class
27362>>>>>>>>>
27362>>>>>>>>>// CLSID: {C0DE2200-01E8-43E6-BC94-A31B89077DC4}
27362>>>>>>>>>Class cCJRibbonPaintManager is a cComAutomationObject
27363>>>>>>>>>
27363>>>>>>>>>    Function ComCaptionFont Returns Variant
27365>>>>>>>>>        Variant retVal
27365>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
27366>>>>>>>>>        Function_Return retVal
27367>>>>>>>>>    End_Function
27368>>>>>>>>>
27368>>>>>>>>>    Procedure Set ComCaptionFont Variant value
27370>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
27371>>>>>>>>>    End_Procedure
27372>>>>>>>>>
27372>>>>>>>>>    Function ComHotTrackingGroups Returns Boolean
27374>>>>>>>>>        Boolean retVal
27374>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BOOL to retVal
27375>>>>>>>>>        Function_Return retVal
27376>>>>>>>>>    End_Function
27377>>>>>>>>>
27377>>>>>>>>>    Procedure Set ComHotTrackingGroups Boolean value
27379>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BOOL to value
27380>>>>>>>>>    End_Procedure
27381>>>>>>>>>
27381>>>>>>>>>    Function ComWindowCaptionFont Returns Variant
27383>>>>>>>>>        Variant retVal
27383>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_DISPATCH to retVal
27384>>>>>>>>>        Function_Return retVal
27385>>>>>>>>>    End_Function
27386>>>>>>>>>
27386>>>>>>>>>    Procedure Set ComWindowCaptionFont Variant value
27388>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_DISPATCH to value
27389>>>>>>>>>    End_Procedure
27390>>>>>>>>>End_Class
27391>>>>>>>>>
27391>>>>>>>>>// CLSID: {C0DE2200-F6FB-49A2-A8C7-C5BD794C3C3B}
27391>>>>>>>>>Class cCJMiniToolBar is a cComAutomationObject
27392>>>>>>>>>
27392>>>>>>>>>    Function ComTitle Returns String
27394>>>>>>>>>        String retVal
27394>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
27395>>>>>>>>>        Function_Return retVal
27396>>>>>>>>>    End_Function
27397>>>>>>>>>
27397>>>>>>>>>    Procedure Set ComTitle String value
27399>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
27400>>>>>>>>>    End_Procedure
27401>>>>>>>>>
27401>>>>>>>>>    Function ComVisible Returns Boolean
27403>>>>>>>>>        Boolean retVal
27403>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
27404>>>>>>>>>        Function_Return retVal
27405>>>>>>>>>    End_Function
27406>>>>>>>>>
27406>>>>>>>>>    Procedure Set ComVisible Boolean value
27408>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
27409>>>>>>>>>    End_Procedure
27410>>>>>>>>>
27410>>>>>>>>>    Function ComPosition Returns XTPBarPosition
27412>>>>>>>>>        XTPBarPosition retVal
27412>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
27413>>>>>>>>>        Function_Return retVal
27414>>>>>>>>>    End_Function
27415>>>>>>>>>
27415>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
27417>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
27418>>>>>>>>>    End_Procedure
27419>>>>>>>>>
27419>>>>>>>>>    Function ComBarID Returns Integer
27421>>>>>>>>>        Integer retVal
27421>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
27422>>>>>>>>>        Function_Return retVal
27423>>>>>>>>>    End_Function
27424>>>>>>>>>
27424>>>>>>>>>    Procedure Set ComBarID Integer value
27426>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
27427>>>>>>>>>    End_Procedure
27428>>>>>>>>>
27428>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
27430>>>>>>>>>        Boolean retVal
27430>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
27431>>>>>>>>>        Function_Return retVal
27432>>>>>>>>>    End_Function
27433>>>>>>>>>
27433>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
27435>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
27436>>>>>>>>>    End_Procedure
27437>>>>>>>>>
27437>>>>>>>>>    Function ComWidth Returns Integer
27439>>>>>>>>>        Integer retVal
27439>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
27440>>>>>>>>>        Function_Return retVal
27441>>>>>>>>>    End_Function
27442>>>>>>>>>
27442>>>>>>>>>    Procedure Set ComWidth Integer value
27444>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
27445>>>>>>>>>    End_Procedure
27446>>>>>>>>>
27446>>>>>>>>>    Function ComCloseable Returns Boolean
27448>>>>>>>>>        Boolean retVal
27448>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
27449>>>>>>>>>        Function_Return retVal
27450>>>>>>>>>    End_Function
27451>>>>>>>>>
27451>>>>>>>>>    Procedure Set ComCloseable Boolean value
27453>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
27454>>>>>>>>>    End_Procedure
27455>>>>>>>>>
27455>>>>>>>>>    Function ComEnableAnimation Returns Boolean
27457>>>>>>>>>        Boolean retVal
27457>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
27458>>>>>>>>>        Function_Return retVal
27459>>>>>>>>>    End_Function
27460>>>>>>>>>
27460>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
27462>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
27463>>>>>>>>>    End_Procedure
27464>>>>>>>>>
27464>>>>>>>>>    Function ComShowGripper Returns Boolean
27466>>>>>>>>>        Boolean retVal
27466>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
27467>>>>>>>>>        Function_Return retVal
27468>>>>>>>>>    End_Function
27469>>>>>>>>>
27469>>>>>>>>>    Procedure Set ComShowGripper Boolean value
27471>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
27472>>>>>>>>>    End_Procedure
27473>>>>>>>>>
27473>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
27475>>>>>>>>>        XTPButtonStyle retVal
27475>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
27476>>>>>>>>>        Function_Return retVal
27477>>>>>>>>>    End_Function
27478>>>>>>>>>
27478>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
27480>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
27481>>>>>>>>>    End_Procedure
27482>>>>>>>>>
27482>>>>>>>>>    Function ComCustomizable Returns Boolean
27484>>>>>>>>>        Boolean retVal
27484>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
27485>>>>>>>>>        Function_Return retVal
27486>>>>>>>>>    End_Function
27487>>>>>>>>>
27487>>>>>>>>>    Procedure Set ComCustomizable Boolean value
27489>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
27490>>>>>>>>>    End_Procedure
27491>>>>>>>>>
27491>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
27493>>>>>>>>>        Boolean retVal
27493>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
27494>>>>>>>>>        Function_Return retVal
27495>>>>>>>>>    End_Function
27496>>>>>>>>>
27496>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
27498>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
27499>>>>>>>>>    End_Procedure
27500>>>>>>>>>
27500>>>>>>>>>    Function ComCustomControlKeyboardInteraction Returns Boolean
27502>>>>>>>>>        Boolean retVal
27502>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 302 OLE_VT_BOOL to retVal
27503>>>>>>>>>        Function_Return retVal
27504>>>>>>>>>    End_Function
27505>>>>>>>>>
27505>>>>>>>>>    Procedure Set ComCustomControlKeyboardInteraction Boolean value
27507>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 302 OLE_VT_BOOL to value
27508>>>>>>>>>    End_Procedure
27509>>>>>>>>>
27509>>>>>>>>>    Function ComSelectedControl Returns Variant
27511>>>>>>>>>        Variant retVal
27511>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
27512>>>>>>>>>        Function_Return retVal
27513>>>>>>>>>    End_Function
27514>>>>>>>>>
27514>>>>>>>>>    Procedure Set ComSelectedControl Variant value
27516>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
27517>>>>>>>>>    End_Procedure
27518>>>>>>>>>
27518>>>>>>>>>    Function ComType Returns XTPBarType
27520>>>>>>>>>        Handle hDispatchDriver
27520>>>>>>>>>        XTPBarType retVal
27520>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27521>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
27522>>>>>>>>>        Function_Return retVal
27523>>>>>>>>>    End_Function
27524>>>>>>>>>
27524>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
27526>>>>>>>>>        Handle hDispatchDriver
27526>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27527>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27528>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
27529>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
27530>>>>>>>>>    End_Procedure
27531>>>>>>>>>
27531>>>>>>>>>    Function ComBuiltIn Returns Boolean
27533>>>>>>>>>        Handle hDispatchDriver
27533>>>>>>>>>        Boolean retVal
27533>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27534>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
27535>>>>>>>>>        Function_Return retVal
27536>>>>>>>>>    End_Function
27537>>>>>>>>>
27537>>>>>>>>>    Procedure ComDelete
27539>>>>>>>>>        Handle hDispatchDriver
27539>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27540>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
27541>>>>>>>>>    End_Procedure
27542>>>>>>>>>
27542>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
27544>>>>>>>>>        Handle hDispatchDriver
27544>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27545>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
27546>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
27547>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
27548>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
27549>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
27550>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
27551>>>>>>>>>    End_Procedure
27552>>>>>>>>>
27552>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
27554>>>>>>>>>        Handle hDispatchDriver
27554>>>>>>>>>        OLE_HANDLE retVal
27554>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27555>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
27556>>>>>>>>>        Function_Return retVal
27557>>>>>>>>>    End_Function
27558>>>>>>>>>
27558>>>>>>>>>    Function ComCommandBars Returns Variant
27560>>>>>>>>>        Handle hDispatchDriver
27560>>>>>>>>>        Variant retVal
27560>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27561>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
27562>>>>>>>>>        Function_Return retVal
27563>>>>>>>>>    End_Function
27564>>>>>>>>>
27564>>>>>>>>>    Function ComControls Returns Variant
27566>>>>>>>>>        Handle hDispatchDriver
27566>>>>>>>>>        Variant retVal
27566>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27567>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
27568>>>>>>>>>        Function_Return retVal
27569>>>>>>>>>    End_Function
27570>>>>>>>>>
27570>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
27572>>>>>>>>>        Handle hDispatchDriver
27572>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27573>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
27574>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
27575>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
27576>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
27577>>>>>>>>>    End_Procedure
27578>>>>>>>>>
27578>>>>>>>>>    Function ComGetIconWidth Returns Integer
27580>>>>>>>>>        Handle hDispatchDriver
27580>>>>>>>>>        Integer retVal
27580>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27581>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
27582>>>>>>>>>        Function_Return retVal
27583>>>>>>>>>    End_Function
27584>>>>>>>>>
27584>>>>>>>>>    Function ComGetIconHeight Returns Integer
27586>>>>>>>>>        Handle hDispatchDriver
27586>>>>>>>>>        Integer retVal
27586>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27587>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
27588>>>>>>>>>        Function_Return retVal
27589>>>>>>>>>    End_Function
27590>>>>>>>>>
27590>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
27592>>>>>>>>>        Handle hDispatchDriver
27592>>>>>>>>>        Variant retVal
27592>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27593>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
27594>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
27595>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
27596>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
27597>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
27598>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
27599>>>>>>>>>        Function_Return retVal
27600>>>>>>>>>    End_Function
27601>>>>>>>>>
27601>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
27603>>>>>>>>>        Handle hDispatchDriver
27603>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27604>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
27605>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
27606>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
27607>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
27608>>>>>>>>>    End_Procedure
27609>>>>>>>>>
27609>>>>>>>>>    Procedure ComRedrawBar
27611>>>>>>>>>        Handle hDispatchDriver
27611>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27612>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
27613>>>>>>>>>    End_Procedure
27614>>>>>>>>>
27614>>>>>>>>>    Procedure ComRecalcLayout
27616>>>>>>>>>        Handle hDispatchDriver
27616>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27617>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
27618>>>>>>>>>    End_Procedure
27619>>>>>>>>>
27619>>>>>>>>>    Procedure ComReset
27621>>>>>>>>>        Handle hDispatchDriver
27621>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27622>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
27623>>>>>>>>>    End_Procedure
27624>>>>>>>>>
27624>>>>>>>>>    Function ComPopupContextMenu Variant llPopupBar Variant llFlags Variant llx Variant lly Returns Integer
27626>>>>>>>>>        Handle hDispatchDriver
27626>>>>>>>>>        Integer retVal
27626>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27627>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
27628>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llPopupBar
27629>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFlags
27630>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llx
27631>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lly
27632>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_I4 to retVal
27633>>>>>>>>>        Function_Return retVal
27634>>>>>>>>>    End_Function
27635>>>>>>>>>
27635>>>>>>>>>    Function ComPopupMiniToolBar Variant llFlags Variant llx Variant lly Returns Integer
27637>>>>>>>>>        Handle hDispatchDriver
27637>>>>>>>>>        Integer retVal
27637>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27638>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
27639>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFlags
27640>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llx
27641>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lly
27642>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_I4 to retVal
27643>>>>>>>>>        Function_Return retVal
27644>>>>>>>>>    End_Function
27645>>>>>>>>>End_Class
27646>>>>>>>>>
27646>>>>>>>>>// CLSID: {C0DE2200-CBD0-4AF0-9D33-EB56AB0648D8}
27646>>>>>>>>>Class cCJRecentFileList is a cComAutomationObject
27647>>>>>>>>>
27647>>>>>>>>>    Function ComMaxSize Returns Integer
27649>>>>>>>>>        Integer retVal
27649>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
27650>>>>>>>>>        Function_Return retVal
27651>>>>>>>>>    End_Function
27652>>>>>>>>>
27652>>>>>>>>>    Procedure Set ComMaxSize Integer value
27654>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
27655>>>>>>>>>    End_Procedure
27656>>>>>>>>>
27656>>>>>>>>>    Function ComPinable Returns Boolean
27658>>>>>>>>>        Boolean retVal
27658>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
27659>>>>>>>>>        Function_Return retVal
27660>>>>>>>>>    End_Function
27661>>>>>>>>>
27661>>>>>>>>>    Procedure Set ComPinable Boolean value
27663>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
27664>>>>>>>>>    End_Procedure
27665>>>>>>>>>
27665>>>>>>>>>    Function Com_NewEnum Returns Variant
27667>>>>>>>>>        Handle hDispatchDriver
27667>>>>>>>>>        Variant retVal
27667>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27668>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
27669>>>>>>>>>        Function_Return retVal
27670>>>>>>>>>    End_Function
27671>>>>>>>>>
27671>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
27673>>>>>>>>>        Handle hDispatchDriver
27673>>>>>>>>>        Variant retVal
27673>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27674>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27675>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
27676>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
27677>>>>>>>>>        Function_Return retVal
27678>>>>>>>>>    End_Function
27679>>>>>>>>>
27679>>>>>>>>>    Function ComAdd String llPathName Returns Variant
27681>>>>>>>>>        Handle hDispatchDriver
27681>>>>>>>>>        Variant retVal
27681>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27682>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27683>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPathName
27684>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
27685>>>>>>>>>        Function_Return retVal
27686>>>>>>>>>    End_Function
27687>>>>>>>>>
27687>>>>>>>>>    Function ComCount Returns Integer
27689>>>>>>>>>        Handle hDispatchDriver
27689>>>>>>>>>        Integer retVal
27689>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27690>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
27691>>>>>>>>>        Function_Return retVal
27692>>>>>>>>>    End_Function
27693>>>>>>>>>
27693>>>>>>>>>    Procedure ComRemove Integer llIndex
27695>>>>>>>>>        Handle hDispatchDriver
27695>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27696>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27697>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
27698>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
27699>>>>>>>>>    End_Procedure
27700>>>>>>>>>End_Class
27701>>>>>>>>>
27701>>>>>>>>>// CLSID: {C0DE2200-214E-44E4-854E-A40882ECD0FF}
27701>>>>>>>>>Class cCJRecentFileListItem is a cComAutomationObject
27702>>>>>>>>>
27702>>>>>>>>>    Function ComCaption Returns String
27704>>>>>>>>>        String retVal
27704>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
27705>>>>>>>>>        Function_Return retVal
27706>>>>>>>>>    End_Function
27707>>>>>>>>>
27707>>>>>>>>>    Procedure Set ComCaption String value
27709>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
27710>>>>>>>>>    End_Procedure
27711>>>>>>>>>
27711>>>>>>>>>    Function ComTag Returns String
27713>>>>>>>>>        String retVal
27713>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
27714>>>>>>>>>        Function_Return retVal
27715>>>>>>>>>    End_Function
27716>>>>>>>>>
27716>>>>>>>>>    Procedure Set ComTag String value
27718>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
27719>>>>>>>>>    End_Procedure
27720>>>>>>>>>
27720>>>>>>>>>    Function ComIconId Returns Integer
27722>>>>>>>>>        Integer retVal
27722>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
27723>>>>>>>>>        Function_Return retVal
27724>>>>>>>>>    End_Function
27725>>>>>>>>>
27725>>>>>>>>>    Procedure Set ComIconId Integer value
27727>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
27728>>>>>>>>>    End_Procedure
27729>>>>>>>>>
27729>>>>>>>>>    Function ComPinned Returns Boolean
27731>>>>>>>>>        Boolean retVal
27731>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
27732>>>>>>>>>        Function_Return retVal
27733>>>>>>>>>    End_Function
27734>>>>>>>>>
27734>>>>>>>>>    Procedure Set ComPinned Boolean value
27736>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
27737>>>>>>>>>    End_Procedure
27738>>>>>>>>>
27738>>>>>>>>>    Function ComPathName Returns String
27740>>>>>>>>>        Handle hDispatchDriver
27740>>>>>>>>>        String retVal
27740>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27741>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_BSTR to retVal
27742>>>>>>>>>        Function_Return retVal
27743>>>>>>>>>    End_Function
27744>>>>>>>>>End_Class
27745>>>>>>>>>
27745>>>>>>>>>// CLSID: {C0DE2200-DE30-460B-B55A-40D9D5229C79}
27745>>>>>>>>>Class cCJCommandBarSlider is a cComAutomationObject
27746>>>>>>>>>
27746>>>>>>>>>    Function ComChecked Returns Boolean
27748>>>>>>>>>        Boolean retVal
27748>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
27749>>>>>>>>>        Function_Return retVal
27750>>>>>>>>>    End_Function
27751>>>>>>>>>
27751>>>>>>>>>    Procedure Set ComChecked Boolean value
27753>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
27754>>>>>>>>>    End_Procedure
27755>>>>>>>>>
27755>>>>>>>>>    Function ComBeginGroup Returns Boolean
27757>>>>>>>>>        Boolean retVal
27757>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
27758>>>>>>>>>        Function_Return retVal
27759>>>>>>>>>    End_Function
27760>>>>>>>>>
27760>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
27762>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
27763>>>>>>>>>    End_Procedure
27764>>>>>>>>>
27764>>>>>>>>>    Function ComCaption Returns String
27766>>>>>>>>>        String retVal
27766>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
27767>>>>>>>>>        Function_Return retVal
27768>>>>>>>>>    End_Function
27769>>>>>>>>>
27769>>>>>>>>>    Procedure Set ComCaption String value
27771>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
27772>>>>>>>>>    End_Procedure
27773>>>>>>>>>
27773>>>>>>>>>    Function ComDescriptionText Returns String
27775>>>>>>>>>        String retVal
27775>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
27776>>>>>>>>>        Function_Return retVal
27777>>>>>>>>>    End_Function
27778>>>>>>>>>
27778>>>>>>>>>    Procedure Set ComDescriptionText String value
27780>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
27781>>>>>>>>>    End_Procedure
27782>>>>>>>>>
27782>>>>>>>>>    Function ComId Returns Integer
27784>>>>>>>>>        Integer retVal
27784>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
27785>>>>>>>>>        Function_Return retVal
27786>>>>>>>>>    End_Function
27787>>>>>>>>>
27787>>>>>>>>>    Procedure Set ComId Integer value
27789>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
27790>>>>>>>>>    End_Procedure
27791>>>>>>>>>
27791>>>>>>>>>    Function ComParameter Returns String
27793>>>>>>>>>        String retVal
27793>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
27794>>>>>>>>>        Function_Return retVal
27795>>>>>>>>>    End_Function
27796>>>>>>>>>
27796>>>>>>>>>    Procedure Set ComParameter String value
27798>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
27799>>>>>>>>>    End_Procedure
27800>>>>>>>>>
27800>>>>>>>>>    Function ComShortcutText Returns String
27802>>>>>>>>>        String retVal
27802>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
27803>>>>>>>>>        Function_Return retVal
27804>>>>>>>>>    End_Function
27805>>>>>>>>>
27805>>>>>>>>>    Procedure Set ComShortcutText String value
27807>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
27808>>>>>>>>>    End_Procedure
27809>>>>>>>>>
27809>>>>>>>>>    Function ComCustomShortcutText Returns String
27811>>>>>>>>>        String retVal
27811>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
27812>>>>>>>>>        Function_Return retVal
27813>>>>>>>>>    End_Function
27814>>>>>>>>>
27814>>>>>>>>>    Procedure Set ComCustomShortcutText String value
27816>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
27817>>>>>>>>>    End_Procedure
27818>>>>>>>>>
27818>>>>>>>>>    Function ComTooltipText Returns String
27820>>>>>>>>>        String retVal
27820>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
27821>>>>>>>>>        Function_Return retVal
27822>>>>>>>>>    End_Function
27823>>>>>>>>>
27823>>>>>>>>>    Procedure Set ComTooltipText String value
27825>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
27826>>>>>>>>>    End_Procedure
27827>>>>>>>>>
27827>>>>>>>>>    Function ComVisible Returns Boolean
27829>>>>>>>>>        Boolean retVal
27829>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
27830>>>>>>>>>        Function_Return retVal
27831>>>>>>>>>    End_Function
27832>>>>>>>>>
27832>>>>>>>>>    Procedure Set ComVisible Boolean value
27834>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
27835>>>>>>>>>    End_Procedure
27836>>>>>>>>>
27836>>>>>>>>>    Function ComEnabled Returns Boolean
27838>>>>>>>>>        Boolean retVal
27838>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
27839>>>>>>>>>        Function_Return retVal
27840>>>>>>>>>    End_Function
27841>>>>>>>>>
27841>>>>>>>>>    Procedure Set ComEnabled Boolean value
27843>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
27844>>>>>>>>>    End_Procedure
27845>>>>>>>>>
27845>>>>>>>>>    Function ComIconId Returns Integer
27847>>>>>>>>>        Integer retVal
27847>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
27848>>>>>>>>>        Function_Return retVal
27849>>>>>>>>>    End_Function
27850>>>>>>>>>
27850>>>>>>>>>    Procedure Set ComIconId Integer value
27852>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
27853>>>>>>>>>    End_Procedure
27854>>>>>>>>>
27854>>>>>>>>>    Function ComDefaultItem Returns Boolean
27856>>>>>>>>>        Boolean retVal
27856>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
27857>>>>>>>>>        Function_Return retVal
27858>>>>>>>>>    End_Function
27859>>>>>>>>>
27859>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
27861>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
27862>>>>>>>>>    End_Procedure
27863>>>>>>>>>
27863>>>>>>>>>    Function ComFlags Returns XTPControlFlags
27865>>>>>>>>>        XTPControlFlags retVal
27865>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
27866>>>>>>>>>        Function_Return retVal
27867>>>>>>>>>    End_Function
27868>>>>>>>>>
27868>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
27870>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
27871>>>>>>>>>    End_Procedure
27872>>>>>>>>>
27872>>>>>>>>>    Function ComCategory Returns String
27874>>>>>>>>>        String retVal
27874>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
27875>>>>>>>>>        Function_Return retVal
27876>>>>>>>>>    End_Function
27877>>>>>>>>>
27877>>>>>>>>>    Procedure Set ComCategory String value
27879>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
27880>>>>>>>>>    End_Procedure
27881>>>>>>>>>
27881>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
27883>>>>>>>>>        XTPControlHideFlags retVal
27883>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
27884>>>>>>>>>        Function_Return retVal
27885>>>>>>>>>    End_Function
27886>>>>>>>>>
27886>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
27888>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
27889>>>>>>>>>    End_Procedure
27890>>>>>>>>>
27890>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
27892>>>>>>>>>        Boolean retVal
27892>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
27893>>>>>>>>>        Function_Return retVal
27894>>>>>>>>>    End_Function
27895>>>>>>>>>
27895>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
27897>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
27898>>>>>>>>>    End_Procedure
27899>>>>>>>>>
27899>>>>>>>>>    Function ComAction Returns Variant
27901>>>>>>>>>        Variant retVal
27901>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
27902>>>>>>>>>        Function_Return retVal
27903>>>>>>>>>    End_Function
27904>>>>>>>>>
27904>>>>>>>>>    Procedure Set ComAction Variant value
27906>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
27907>>>>>>>>>    End_Procedure
27908>>>>>>>>>
27908>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
27910>>>>>>>>>        Integer retVal
27910>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
27911>>>>>>>>>        Function_Return retVal
27912>>>>>>>>>    End_Function
27913>>>>>>>>>
27913>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
27915>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
27916>>>>>>>>>    End_Procedure
27917>>>>>>>>>
27917>>>>>>>>>    Function ComWidth Returns Integer
27919>>>>>>>>>        Integer retVal
27919>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
27920>>>>>>>>>        Function_Return retVal
27921>>>>>>>>>    End_Function
27922>>>>>>>>>
27922>>>>>>>>>    Procedure Set ComWidth Integer value
27924>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
27925>>>>>>>>>    End_Procedure
27926>>>>>>>>>
27926>>>>>>>>>    Function ComHeight Returns Integer
27928>>>>>>>>>        Integer retVal
27928>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
27929>>>>>>>>>        Function_Return retVal
27930>>>>>>>>>    End_Function
27931>>>>>>>>>
27931>>>>>>>>>    Procedure Set ComHeight Integer value
27933>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
27934>>>>>>>>>    End_Procedure
27935>>>>>>>>>
27935>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
27937>>>>>>>>>        XTPButtonStyle retVal
27937>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
27938>>>>>>>>>        Function_Return retVal
27939>>>>>>>>>    End_Function
27940>>>>>>>>>
27940>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
27942>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
27943>>>>>>>>>    End_Procedure
27944>>>>>>>>>
27944>>>>>>>>>    Function ComKeyboardTip Returns String
27946>>>>>>>>>        String retVal
27946>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
27947>>>>>>>>>        Function_Return retVal
27948>>>>>>>>>    End_Function
27949>>>>>>>>>
27949>>>>>>>>>    Procedure Set ComKeyboardTip String value
27951>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
27952>>>>>>>>>    End_Procedure
27953>>>>>>>>>
27953>>>>>>>>>    Function ComPos Returns Integer
27955>>>>>>>>>        Integer retVal
27955>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
27956>>>>>>>>>        Function_Return retVal
27957>>>>>>>>>    End_Function
27958>>>>>>>>>
27958>>>>>>>>>    Procedure Set ComPos Integer value
27960>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
27961>>>>>>>>>    End_Procedure
27962>>>>>>>>>
27962>>>>>>>>>    Function ComMin Returns Integer
27964>>>>>>>>>        Integer retVal
27964>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to retVal
27965>>>>>>>>>        Function_Return retVal
27966>>>>>>>>>    End_Function
27967>>>>>>>>>
27967>>>>>>>>>    Procedure Set ComMin Integer value
27969>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to value
27970>>>>>>>>>    End_Procedure
27971>>>>>>>>>
27971>>>>>>>>>    Function ComMax Returns Integer
27973>>>>>>>>>        Integer retVal
27973>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to retVal
27974>>>>>>>>>        Function_Return retVal
27975>>>>>>>>>    End_Function
27976>>>>>>>>>
27976>>>>>>>>>    Procedure Set ComMax Integer value
27978>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to value
27979>>>>>>>>>    End_Procedure
27980>>>>>>>>>
27980>>>>>>>>>    Function ComControls Returns Variant
27982>>>>>>>>>        Handle hDispatchDriver
27982>>>>>>>>>        Variant retVal
27982>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27983>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
27984>>>>>>>>>        Function_Return retVal
27985>>>>>>>>>    End_Function
27986>>>>>>>>>
27986>>>>>>>>>    Function ComParent Returns Variant
27988>>>>>>>>>        Handle hDispatchDriver
27988>>>>>>>>>        Variant retVal
27988>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27989>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
27990>>>>>>>>>        Function_Return retVal
27991>>>>>>>>>    End_Function
27992>>>>>>>>>
27992>>>>>>>>>    Function ComIndex Returns Integer
27994>>>>>>>>>        Handle hDispatchDriver
27994>>>>>>>>>        Integer retVal
27994>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27995>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
27996>>>>>>>>>        Function_Return retVal
27997>>>>>>>>>    End_Function
27998>>>>>>>>>
27998>>>>>>>>>    Function ComType Returns XTPControlType
28000>>>>>>>>>        Handle hDispatchDriver
28000>>>>>>>>>        XTPControlType retVal
28000>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28001>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
28002>>>>>>>>>        Function_Return retVal
28003>>>>>>>>>    End_Function
28004>>>>>>>>>
28004>>>>>>>>>    Procedure ComDelete
28006>>>>>>>>>        Handle hDispatchDriver
28006>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28007>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
28008>>>>>>>>>    End_Procedure
28009>>>>>>>>>
28009>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
28011>>>>>>>>>        Handle hDispatchDriver
28011>>>>>>>>>        Variant retVal
28011>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28012>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28013>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
28014>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
28015>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
28016>>>>>>>>>        Function_Return retVal
28017>>>>>>>>>    End_Function
28018>>>>>>>>>
28018>>>>>>>>>    Procedure ComSetFocus
28020>>>>>>>>>        Handle hDispatchDriver
28020>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28021>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
28022>>>>>>>>>    End_Procedure
28023>>>>>>>>>
28023>>>>>>>>>    Procedure ComExecute
28025>>>>>>>>>        Handle hDispatchDriver
28025>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28026>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
28027>>>>>>>>>    End_Procedure
28028>>>>>>>>>
28028>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
28030>>>>>>>>>        Handle hDispatchDriver
28030>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28031>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
28032>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
28033>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
28034>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
28035>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
28036>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
28037>>>>>>>>>    End_Procedure
28038>>>>>>>>>
28038>>>>>>>>>    Function ComRibbonGroup Returns Variant
28040>>>>>>>>>        Handle hDispatchDriver
28040>>>>>>>>>        Variant retVal
28040>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28041>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
28042>>>>>>>>>        Function_Return retVal
28043>>>>>>>>>    End_Function
28044>>>>>>>>>
28044>>>>>>>>>    Procedure ComReset
28046>>>>>>>>>        Handle hDispatchDriver
28046>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28047>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
28048>>>>>>>>>    End_Procedure
28049>>>>>>>>>
28049>>>>>>>>>    Function ComTop Returns Integer
28051>>>>>>>>>        Handle hDispatchDriver
28051>>>>>>>>>        Integer retVal
28051>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28052>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
28053>>>>>>>>>        Function_Return retVal
28054>>>>>>>>>    End_Function
28055>>>>>>>>>
28055>>>>>>>>>    Function ComLeft Returns Integer
28057>>>>>>>>>        Handle hDispatchDriver
28057>>>>>>>>>        Integer retVal
28057>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28058>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
28059>>>>>>>>>        Function_Return retVal
28060>>>>>>>>>    End_Function
28061>>>>>>>>>
28061>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
28063>>>>>>>>>        Handle hDispatchDriver
28063>>>>>>>>>        Variant retVal
28063>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28064>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
28065>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
28066>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
28067>>>>>>>>>        Function_Return retVal
28068>>>>>>>>>    End_Function
28069>>>>>>>>>
28069>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
28071>>>>>>>>>        Handle hDispatchDriver
28071>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28072>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28073>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
28074>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
28075>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
28076>>>>>>>>>    End_Procedure
28077>>>>>>>>>End_Class
28078>>>>>>>>>
28078>>>>>>>>>// CLSID: {C0DE2200-138E-4B16-8812-997A65E84AE6}
28078>>>>>>>>>Class cCJCommandBarProgress is a cComAutomationObject
28079>>>>>>>>>
28079>>>>>>>>>    Function ComChecked Returns Boolean
28081>>>>>>>>>        Boolean retVal
28081>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
28082>>>>>>>>>        Function_Return retVal
28083>>>>>>>>>    End_Function
28084>>>>>>>>>
28084>>>>>>>>>    Procedure Set ComChecked Boolean value
28086>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
28087>>>>>>>>>    End_Procedure
28088>>>>>>>>>
28088>>>>>>>>>    Function ComBeginGroup Returns Boolean
28090>>>>>>>>>        Boolean retVal
28090>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
28091>>>>>>>>>        Function_Return retVal
28092>>>>>>>>>    End_Function
28093>>>>>>>>>
28093>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
28095>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
28096>>>>>>>>>    End_Procedure
28097>>>>>>>>>
28097>>>>>>>>>    Function ComCaption Returns String
28099>>>>>>>>>        String retVal
28099>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
28100>>>>>>>>>        Function_Return retVal
28101>>>>>>>>>    End_Function
28102>>>>>>>>>
28102>>>>>>>>>    Procedure Set ComCaption String value
28104>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
28105>>>>>>>>>    End_Procedure
28106>>>>>>>>>
28106>>>>>>>>>    Function ComDescriptionText Returns String
28108>>>>>>>>>        String retVal
28108>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
28109>>>>>>>>>        Function_Return retVal
28110>>>>>>>>>    End_Function
28111>>>>>>>>>
28111>>>>>>>>>    Procedure Set ComDescriptionText String value
28113>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
28114>>>>>>>>>    End_Procedure
28115>>>>>>>>>
28115>>>>>>>>>    Function ComId Returns Integer
28117>>>>>>>>>        Integer retVal
28117>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
28118>>>>>>>>>        Function_Return retVal
28119>>>>>>>>>    End_Function
28120>>>>>>>>>
28120>>>>>>>>>    Procedure Set ComId Integer value
28122>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
28123>>>>>>>>>    End_Procedure
28124>>>>>>>>>
28124>>>>>>>>>    Function ComParameter Returns String
28126>>>>>>>>>        String retVal
28126>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
28127>>>>>>>>>        Function_Return retVal
28128>>>>>>>>>    End_Function
28129>>>>>>>>>
28129>>>>>>>>>    Procedure Set ComParameter String value
28131>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
28132>>>>>>>>>    End_Procedure
28133>>>>>>>>>
28133>>>>>>>>>    Function ComShortcutText Returns String
28135>>>>>>>>>        String retVal
28135>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
28136>>>>>>>>>        Function_Return retVal
28137>>>>>>>>>    End_Function
28138>>>>>>>>>
28138>>>>>>>>>    Procedure Set ComShortcutText String value
28140>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
28141>>>>>>>>>    End_Procedure
28142>>>>>>>>>
28142>>>>>>>>>    Function ComCustomShortcutText Returns String
28144>>>>>>>>>        String retVal
28144>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
28145>>>>>>>>>        Function_Return retVal
28146>>>>>>>>>    End_Function
28147>>>>>>>>>
28147>>>>>>>>>    Procedure Set ComCustomShortcutText String value
28149>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
28150>>>>>>>>>    End_Procedure
28151>>>>>>>>>
28151>>>>>>>>>    Function ComTooltipText Returns String
28153>>>>>>>>>        String retVal
28153>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
28154>>>>>>>>>        Function_Return retVal
28155>>>>>>>>>    End_Function
28156>>>>>>>>>
28156>>>>>>>>>    Procedure Set ComTooltipText String value
28158>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
28159>>>>>>>>>    End_Procedure
28160>>>>>>>>>
28160>>>>>>>>>    Function ComVisible Returns Boolean
28162>>>>>>>>>        Boolean retVal
28162>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
28163>>>>>>>>>        Function_Return retVal
28164>>>>>>>>>    End_Function
28165>>>>>>>>>
28165>>>>>>>>>    Procedure Set ComVisible Boolean value
28167>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
28168>>>>>>>>>    End_Procedure
28169>>>>>>>>>
28169>>>>>>>>>    Function ComEnabled Returns Boolean
28171>>>>>>>>>        Boolean retVal
28171>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
28172>>>>>>>>>        Function_Return retVal
28173>>>>>>>>>    End_Function
28174>>>>>>>>>
28174>>>>>>>>>    Procedure Set ComEnabled Boolean value
28176>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
28177>>>>>>>>>    End_Procedure
28178>>>>>>>>>
28178>>>>>>>>>    Function ComIconId Returns Integer
28180>>>>>>>>>        Integer retVal
28180>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
28181>>>>>>>>>        Function_Return retVal
28182>>>>>>>>>    End_Function
28183>>>>>>>>>
28183>>>>>>>>>    Procedure Set ComIconId Integer value
28185>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
28186>>>>>>>>>    End_Procedure
28187>>>>>>>>>
28187>>>>>>>>>    Function ComDefaultItem Returns Boolean
28189>>>>>>>>>        Boolean retVal
28189>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
28190>>>>>>>>>        Function_Return retVal
28191>>>>>>>>>    End_Function
28192>>>>>>>>>
28192>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
28194>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
28195>>>>>>>>>    End_Procedure
28196>>>>>>>>>
28196>>>>>>>>>    Function ComFlags Returns XTPControlFlags
28198>>>>>>>>>        XTPControlFlags retVal
28198>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
28199>>>>>>>>>        Function_Return retVal
28200>>>>>>>>>    End_Function
28201>>>>>>>>>
28201>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
28203>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
28204>>>>>>>>>    End_Procedure
28205>>>>>>>>>
28205>>>>>>>>>    Function ComCategory Returns String
28207>>>>>>>>>        String retVal
28207>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
28208>>>>>>>>>        Function_Return retVal
28209>>>>>>>>>    End_Function
28210>>>>>>>>>
28210>>>>>>>>>    Procedure Set ComCategory String value
28212>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
28213>>>>>>>>>    End_Procedure
28214>>>>>>>>>
28214>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
28216>>>>>>>>>        XTPControlHideFlags retVal
28216>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
28217>>>>>>>>>        Function_Return retVal
28218>>>>>>>>>    End_Function
28219>>>>>>>>>
28219>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
28221>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
28222>>>>>>>>>    End_Procedure
28223>>>>>>>>>
28223>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
28225>>>>>>>>>        Boolean retVal
28225>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
28226>>>>>>>>>        Function_Return retVal
28227>>>>>>>>>    End_Function
28228>>>>>>>>>
28228>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
28230>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
28231>>>>>>>>>    End_Procedure
28232>>>>>>>>>
28232>>>>>>>>>    Function ComAction Returns Variant
28234>>>>>>>>>        Variant retVal
28234>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
28235>>>>>>>>>        Function_Return retVal
28236>>>>>>>>>    End_Function
28237>>>>>>>>>
28237>>>>>>>>>    Procedure Set ComAction Variant value
28239>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
28240>>>>>>>>>    End_Procedure
28241>>>>>>>>>
28241>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
28243>>>>>>>>>        Integer retVal
28243>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
28244>>>>>>>>>        Function_Return retVal
28245>>>>>>>>>    End_Function
28246>>>>>>>>>
28246>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
28248>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
28249>>>>>>>>>    End_Procedure
28250>>>>>>>>>
28250>>>>>>>>>    Function ComWidth Returns Integer
28252>>>>>>>>>        Integer retVal
28252>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
28253>>>>>>>>>        Function_Return retVal
28254>>>>>>>>>    End_Function
28255>>>>>>>>>
28255>>>>>>>>>    Procedure Set ComWidth Integer value
28257>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
28258>>>>>>>>>    End_Procedure
28259>>>>>>>>>
28259>>>>>>>>>    Function ComHeight Returns Integer
28261>>>>>>>>>        Integer retVal
28261>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
28262>>>>>>>>>        Function_Return retVal
28263>>>>>>>>>    End_Function
28264>>>>>>>>>
28264>>>>>>>>>    Procedure Set ComHeight Integer value
28266>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
28267>>>>>>>>>    End_Procedure
28268>>>>>>>>>
28268>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
28270>>>>>>>>>        XTPButtonStyle retVal
28270>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
28271>>>>>>>>>        Function_Return retVal
28272>>>>>>>>>    End_Function
28273>>>>>>>>>
28273>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
28275>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
28276>>>>>>>>>    End_Procedure
28277>>>>>>>>>
28277>>>>>>>>>    Function ComKeyboardTip Returns String
28279>>>>>>>>>        String retVal
28279>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
28280>>>>>>>>>        Function_Return retVal
28281>>>>>>>>>    End_Function
28282>>>>>>>>>
28282>>>>>>>>>    Procedure Set ComKeyboardTip String value
28284>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
28285>>>>>>>>>    End_Procedure
28286>>>>>>>>>
28286>>>>>>>>>    Function ComPos Returns Integer
28288>>>>>>>>>        Integer retVal
28288>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
28289>>>>>>>>>        Function_Return retVal
28290>>>>>>>>>    End_Function
28291>>>>>>>>>
28291>>>>>>>>>    Procedure Set ComPos Integer value
28293>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
28294>>>>>>>>>    End_Procedure
28295>>>>>>>>>
28295>>>>>>>>>    Function ComMin Returns Integer
28297>>>>>>>>>        Integer retVal
28297>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to retVal
28298>>>>>>>>>        Function_Return retVal
28299>>>>>>>>>    End_Function
28300>>>>>>>>>
28300>>>>>>>>>    Procedure Set ComMin Integer value
28302>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to value
28303>>>>>>>>>    End_Procedure
28304>>>>>>>>>
28304>>>>>>>>>    Function ComMax Returns Integer
28306>>>>>>>>>        Integer retVal
28306>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to retVal
28307>>>>>>>>>        Function_Return retVal
28308>>>>>>>>>    End_Function
28309>>>>>>>>>
28309>>>>>>>>>    Procedure Set ComMax Integer value
28311>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to value
28312>>>>>>>>>    End_Procedure
28313>>>>>>>>>
28313>>>>>>>>>    Function ComControls Returns Variant
28315>>>>>>>>>        Handle hDispatchDriver
28315>>>>>>>>>        Variant retVal
28315>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28316>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
28317>>>>>>>>>        Function_Return retVal
28318>>>>>>>>>    End_Function
28319>>>>>>>>>
28319>>>>>>>>>    Function ComParent Returns Variant
28321>>>>>>>>>        Handle hDispatchDriver
28321>>>>>>>>>        Variant retVal
28321>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28322>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
28323>>>>>>>>>        Function_Return retVal
28324>>>>>>>>>    End_Function
28325>>>>>>>>>
28325>>>>>>>>>    Function ComIndex Returns Integer
28327>>>>>>>>>        Handle hDispatchDriver
28327>>>>>>>>>        Integer retVal
28327>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28328>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
28329>>>>>>>>>        Function_Return retVal
28330>>>>>>>>>    End_Function
28331>>>>>>>>>
28331>>>>>>>>>    Function ComType Returns XTPControlType
28333>>>>>>>>>        Handle hDispatchDriver
28333>>>>>>>>>        XTPControlType retVal
28333>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28334>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
28335>>>>>>>>>        Function_Return retVal
28336>>>>>>>>>    End_Function
28337>>>>>>>>>
28337>>>>>>>>>    Procedure ComDelete
28339>>>>>>>>>        Handle hDispatchDriver
28339>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28340>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
28341>>>>>>>>>    End_Procedure
28342>>>>>>>>>
28342>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
28344>>>>>>>>>        Handle hDispatchDriver
28344>>>>>>>>>        Variant retVal
28344>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28345>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28346>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
28347>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
28348>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
28349>>>>>>>>>        Function_Return retVal
28350>>>>>>>>>    End_Function
28351>>>>>>>>>
28351>>>>>>>>>    Procedure ComSetFocus
28353>>>>>>>>>        Handle hDispatchDriver
28353>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28354>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
28355>>>>>>>>>    End_Procedure
28356>>>>>>>>>
28356>>>>>>>>>    Procedure ComExecute
28358>>>>>>>>>        Handle hDispatchDriver
28358>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28359>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
28360>>>>>>>>>    End_Procedure
28361>>>>>>>>>
28361>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
28363>>>>>>>>>        Handle hDispatchDriver
28363>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28364>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
28365>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
28366>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
28367>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
28368>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
28369>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
28370>>>>>>>>>    End_Procedure
28371>>>>>>>>>
28371>>>>>>>>>    Function ComRibbonGroup Returns Variant
28373>>>>>>>>>        Handle hDispatchDriver
28373>>>>>>>>>        Variant retVal
28373>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28374>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
28375>>>>>>>>>        Function_Return retVal
28376>>>>>>>>>    End_Function
28377>>>>>>>>>
28377>>>>>>>>>    Procedure ComReset
28379>>>>>>>>>        Handle hDispatchDriver
28379>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28380>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
28381>>>>>>>>>    End_Procedure
28382>>>>>>>>>
28382>>>>>>>>>    Function ComTop Returns Integer
28384>>>>>>>>>        Handle hDispatchDriver
28384>>>>>>>>>        Integer retVal
28384>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28385>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
28386>>>>>>>>>        Function_Return retVal
28387>>>>>>>>>    End_Function
28388>>>>>>>>>
28388>>>>>>>>>    Function ComLeft Returns Integer
28390>>>>>>>>>        Handle hDispatchDriver
28390>>>>>>>>>        Integer retVal
28390>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28391>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
28392>>>>>>>>>        Function_Return retVal
28393>>>>>>>>>    End_Function
28394>>>>>>>>>
28394>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
28396>>>>>>>>>        Handle hDispatchDriver
28396>>>>>>>>>        Variant retVal
28396>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28397>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
28398>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
28399>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
28400>>>>>>>>>        Function_Return retVal
28401>>>>>>>>>    End_Function
28402>>>>>>>>>
28402>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
28404>>>>>>>>>        Handle hDispatchDriver
28404>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28405>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28406>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
28407>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
28408>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
28409>>>>>>>>>    End_Procedure
28410>>>>>>>>>End_Class
28411>>>>>>>>>
28411>>>>>>>>>// CLSID: {C0DE2200-939E-46A8-B81A-507496C30A68}
28411>>>>>>>>>Class cCJCommandBarScrollBar is a cComAutomationObject
28412>>>>>>>>>
28412>>>>>>>>>    Function ComChecked Returns Boolean
28414>>>>>>>>>        Boolean retVal
28414>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
28415>>>>>>>>>        Function_Return retVal
28416>>>>>>>>>    End_Function
28417>>>>>>>>>
28417>>>>>>>>>    Procedure Set ComChecked Boolean value
28419>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
28420>>>>>>>>>    End_Procedure
28421>>>>>>>>>
28421>>>>>>>>>    Function ComBeginGroup Returns Boolean
28423>>>>>>>>>        Boolean retVal
28423>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
28424>>>>>>>>>        Function_Return retVal
28425>>>>>>>>>    End_Function
28426>>>>>>>>>
28426>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
28428>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
28429>>>>>>>>>    End_Procedure
28430>>>>>>>>>
28430>>>>>>>>>    Function ComCaption Returns String
28432>>>>>>>>>        String retVal
28432>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
28433>>>>>>>>>        Function_Return retVal
28434>>>>>>>>>    End_Function
28435>>>>>>>>>
28435>>>>>>>>>    Procedure Set ComCaption String value
28437>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
28438>>>>>>>>>    End_Procedure
28439>>>>>>>>>
28439>>>>>>>>>    Function ComDescriptionText Returns String
28441>>>>>>>>>        String retVal
28441>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
28442>>>>>>>>>        Function_Return retVal
28443>>>>>>>>>    End_Function
28444>>>>>>>>>
28444>>>>>>>>>    Procedure Set ComDescriptionText String value
28446>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
28447>>>>>>>>>    End_Procedure
28448>>>>>>>>>
28448>>>>>>>>>    Function ComId Returns Integer
28450>>>>>>>>>        Integer retVal
28450>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
28451>>>>>>>>>        Function_Return retVal
28452>>>>>>>>>    End_Function
28453>>>>>>>>>
28453>>>>>>>>>    Procedure Set ComId Integer value
28455>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
28456>>>>>>>>>    End_Procedure
28457>>>>>>>>>
28457>>>>>>>>>    Function ComParameter Returns String
28459>>>>>>>>>        String retVal
28459>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
28460>>>>>>>>>        Function_Return retVal
28461>>>>>>>>>    End_Function
28462>>>>>>>>>
28462>>>>>>>>>    Procedure Set ComParameter String value
28464>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
28465>>>>>>>>>    End_Procedure
28466>>>>>>>>>
28466>>>>>>>>>    Function ComShortcutText Returns String
28468>>>>>>>>>        String retVal
28468>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
28469>>>>>>>>>        Function_Return retVal
28470>>>>>>>>>    End_Function
28471>>>>>>>>>
28471>>>>>>>>>    Procedure Set ComShortcutText String value
28473>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
28474>>>>>>>>>    End_Procedure
28475>>>>>>>>>
28475>>>>>>>>>    Function ComCustomShortcutText Returns String
28477>>>>>>>>>        String retVal
28477>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
28478>>>>>>>>>        Function_Return retVal
28479>>>>>>>>>    End_Function
28480>>>>>>>>>
28480>>>>>>>>>    Procedure Set ComCustomShortcutText String value
28482>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
28483>>>>>>>>>    End_Procedure
28484>>>>>>>>>
28484>>>>>>>>>    Function ComTooltipText Returns String
28486>>>>>>>>>        String retVal
28486>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
28487>>>>>>>>>        Function_Return retVal
28488>>>>>>>>>    End_Function
28489>>>>>>>>>
28489>>>>>>>>>    Procedure Set ComTooltipText String value
28491>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
28492>>>>>>>>>    End_Procedure
28493>>>>>>>>>
28493>>>>>>>>>    Function ComVisible Returns Boolean
28495>>>>>>>>>        Boolean retVal
28495>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
28496>>>>>>>>>        Function_Return retVal
28497>>>>>>>>>    End_Function
28498>>>>>>>>>
28498>>>>>>>>>    Procedure Set ComVisible Boolean value
28500>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
28501>>>>>>>>>    End_Procedure
28502>>>>>>>>>
28502>>>>>>>>>    Function ComEnabled Returns Boolean
28504>>>>>>>>>        Boolean retVal
28504>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
28505>>>>>>>>>        Function_Return retVal
28506>>>>>>>>>    End_Function
28507>>>>>>>>>
28507>>>>>>>>>    Procedure Set ComEnabled Boolean value
28509>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
28510>>>>>>>>>    End_Procedure
28511>>>>>>>>>
28511>>>>>>>>>    Function ComIconId Returns Integer
28513>>>>>>>>>        Integer retVal
28513>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
28514>>>>>>>>>        Function_Return retVal
28515>>>>>>>>>    End_Function
28516>>>>>>>>>
28516>>>>>>>>>    Procedure Set ComIconId Integer value
28518>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
28519>>>>>>>>>    End_Procedure
28520>>>>>>>>>
28520>>>>>>>>>    Function ComDefaultItem Returns Boolean
28522>>>>>>>>>        Boolean retVal
28522>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
28523>>>>>>>>>        Function_Return retVal
28524>>>>>>>>>    End_Function
28525>>>>>>>>>
28525>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
28527>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
28528>>>>>>>>>    End_Procedure
28529>>>>>>>>>
28529>>>>>>>>>    Function ComFlags Returns XTPControlFlags
28531>>>>>>>>>        XTPControlFlags retVal
28531>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
28532>>>>>>>>>        Function_Return retVal
28533>>>>>>>>>    End_Function
28534>>>>>>>>>
28534>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
28536>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
28537>>>>>>>>>    End_Procedure
28538>>>>>>>>>
28538>>>>>>>>>    Function ComCategory Returns String
28540>>>>>>>>>        String retVal
28540>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
28541>>>>>>>>>        Function_Return retVal
28542>>>>>>>>>    End_Function
28543>>>>>>>>>
28543>>>>>>>>>    Procedure Set ComCategory String value
28545>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
28546>>>>>>>>>    End_Procedure
28547>>>>>>>>>
28547>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
28549>>>>>>>>>        XTPControlHideFlags retVal
28549>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
28550>>>>>>>>>        Function_Return retVal
28551>>>>>>>>>    End_Function
28552>>>>>>>>>
28552>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
28554>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
28555>>>>>>>>>    End_Procedure
28556>>>>>>>>>
28556>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
28558>>>>>>>>>        Boolean retVal
28558>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
28559>>>>>>>>>        Function_Return retVal
28560>>>>>>>>>    End_Function
28561>>>>>>>>>
28561>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
28563>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
28564>>>>>>>>>    End_Procedure
28565>>>>>>>>>
28565>>>>>>>>>    Function ComAction Returns Variant
28567>>>>>>>>>        Variant retVal
28567>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
28568>>>>>>>>>        Function_Return retVal
28569>>>>>>>>>    End_Function
28570>>>>>>>>>
28570>>>>>>>>>    Procedure Set ComAction Variant value
28572>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
28573>>>>>>>>>    End_Procedure
28574>>>>>>>>>
28574>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
28576>>>>>>>>>        Integer retVal
28576>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
28577>>>>>>>>>        Function_Return retVal
28578>>>>>>>>>    End_Function
28579>>>>>>>>>
28579>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
28581>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
28582>>>>>>>>>    End_Procedure
28583>>>>>>>>>
28583>>>>>>>>>    Function ComWidth Returns Integer
28585>>>>>>>>>        Integer retVal
28585>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
28586>>>>>>>>>        Function_Return retVal
28587>>>>>>>>>    End_Function
28588>>>>>>>>>
28588>>>>>>>>>    Procedure Set ComWidth Integer value
28590>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
28591>>>>>>>>>    End_Procedure
28592>>>>>>>>>
28592>>>>>>>>>    Function ComHeight Returns Integer
28594>>>>>>>>>        Integer retVal
28594>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
28595>>>>>>>>>        Function_Return retVal
28596>>>>>>>>>    End_Function
28597>>>>>>>>>
28597>>>>>>>>>    Procedure Set ComHeight Integer value
28599>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
28600>>>>>>>>>    End_Procedure
28601>>>>>>>>>
28601>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
28603>>>>>>>>>        XTPButtonStyle retVal
28603>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
28604>>>>>>>>>        Function_Return retVal
28605>>>>>>>>>    End_Function
28606>>>>>>>>>
28606>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
28608>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
28609>>>>>>>>>    End_Procedure
28610>>>>>>>>>
28610>>>>>>>>>    Function ComKeyboardTip Returns String
28612>>>>>>>>>        String retVal
28612>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
28613>>>>>>>>>        Function_Return retVal
28614>>>>>>>>>    End_Function
28615>>>>>>>>>
28615>>>>>>>>>    Procedure Set ComKeyboardTip String value
28617>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
28618>>>>>>>>>    End_Procedure
28619>>>>>>>>>
28619>>>>>>>>>    Function ComPos Returns Integer
28621>>>>>>>>>        Integer retVal
28621>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
28622>>>>>>>>>        Function_Return retVal
28623>>>>>>>>>    End_Function
28624>>>>>>>>>
28624>>>>>>>>>    Procedure Set ComPos Integer value
28626>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
28627>>>>>>>>>    End_Procedure
28628>>>>>>>>>
28628>>>>>>>>>    Function ComMin Returns Integer
28630>>>>>>>>>        Integer retVal
28630>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to retVal
28631>>>>>>>>>        Function_Return retVal
28632>>>>>>>>>    End_Function
28633>>>>>>>>>
28633>>>>>>>>>    Procedure Set ComMin Integer value
28635>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to value
28636>>>>>>>>>    End_Procedure
28637>>>>>>>>>
28637>>>>>>>>>    Function ComMax Returns Integer
28639>>>>>>>>>        Integer retVal
28639>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to retVal
28640>>>>>>>>>        Function_Return retVal
28641>>>>>>>>>    End_Function
28642>>>>>>>>>
28642>>>>>>>>>    Procedure Set ComMax Integer value
28644>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to value
28645>>>>>>>>>    End_Procedure
28646>>>>>>>>>
28646>>>>>>>>>    Function ComScrollBarStyle Returns XTPScrollBarStyle
28648>>>>>>>>>        XTPScrollBarStyle retVal
28648>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 204 OLE_VT_I4 to retVal
28649>>>>>>>>>        Function_Return retVal
28650>>>>>>>>>    End_Function
28651>>>>>>>>>
28651>>>>>>>>>    Procedure Set ComScrollBarStyle XTPScrollBarStyle value
28653>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 204 OLE_VT_I4 to value
28654>>>>>>>>>    End_Procedure
28655>>>>>>>>>
28655>>>>>>>>>    Function ComControls Returns Variant
28657>>>>>>>>>        Handle hDispatchDriver
28657>>>>>>>>>        Variant retVal
28657>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28658>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
28659>>>>>>>>>        Function_Return retVal
28660>>>>>>>>>    End_Function
28661>>>>>>>>>
28661>>>>>>>>>    Function ComParent Returns Variant
28663>>>>>>>>>        Handle hDispatchDriver
28663>>>>>>>>>        Variant retVal
28663>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28664>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
28665>>>>>>>>>        Function_Return retVal
28666>>>>>>>>>    End_Function
28667>>>>>>>>>
28667>>>>>>>>>    Function ComIndex Returns Integer
28669>>>>>>>>>        Handle hDispatchDriver
28669>>>>>>>>>        Integer retVal
28669>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28670>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
28671>>>>>>>>>        Function_Return retVal
28672>>>>>>>>>    End_Function
28673>>>>>>>>>
28673>>>>>>>>>    Function ComType Returns XTPControlType
28675>>>>>>>>>        Handle hDispatchDriver
28675>>>>>>>>>        XTPControlType retVal
28675>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28676>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
28677>>>>>>>>>        Function_Return retVal
28678>>>>>>>>>    End_Function
28679>>>>>>>>>
28679>>>>>>>>>    Procedure ComDelete
28681>>>>>>>>>        Handle hDispatchDriver
28681>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28682>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
28683>>>>>>>>>    End_Procedure
28684>>>>>>>>>
28684>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
28686>>>>>>>>>        Handle hDispatchDriver
28686>>>>>>>>>        Variant retVal
28686>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28687>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28688>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
28689>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
28690>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
28691>>>>>>>>>        Function_Return retVal
28692>>>>>>>>>    End_Function
28693>>>>>>>>>
28693>>>>>>>>>    Procedure ComSetFocus
28695>>>>>>>>>        Handle hDispatchDriver
28695>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28696>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
28697>>>>>>>>>    End_Procedure
28698>>>>>>>>>
28698>>>>>>>>>    Procedure ComExecute
28700>>>>>>>>>        Handle hDispatchDriver
28700>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28701>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
28702>>>>>>>>>    End_Procedure
28703>>>>>>>>>
28703>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
28705>>>>>>>>>        Handle hDispatchDriver
28705>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28706>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
28707>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
28708>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
28709>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
28710>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
28711>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
28712>>>>>>>>>    End_Procedure
28713>>>>>>>>>
28713>>>>>>>>>    Function ComRibbonGroup Returns Variant
28715>>>>>>>>>        Handle hDispatchDriver
28715>>>>>>>>>        Variant retVal
28715>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28716>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
28717>>>>>>>>>        Function_Return retVal
28718>>>>>>>>>    End_Function
28719>>>>>>>>>
28719>>>>>>>>>    Procedure ComReset
28721>>>>>>>>>        Handle hDispatchDriver
28721>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28722>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
28723>>>>>>>>>    End_Procedure
28724>>>>>>>>>
28724>>>>>>>>>    Function ComTop Returns Integer
28726>>>>>>>>>        Handle hDispatchDriver
28726>>>>>>>>>        Integer retVal
28726>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28727>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
28728>>>>>>>>>        Function_Return retVal
28729>>>>>>>>>    End_Function
28730>>>>>>>>>
28730>>>>>>>>>    Function ComLeft Returns Integer
28732>>>>>>>>>        Handle hDispatchDriver
28732>>>>>>>>>        Integer retVal
28732>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28733>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
28734>>>>>>>>>        Function_Return retVal
28735>>>>>>>>>    End_Function
28736>>>>>>>>>
28736>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
28738>>>>>>>>>        Handle hDispatchDriver
28738>>>>>>>>>        Variant retVal
28738>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28739>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
28740>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
28741>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
28742>>>>>>>>>        Function_Return retVal
28743>>>>>>>>>    End_Function
28744>>>>>>>>>
28744>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
28746>>>>>>>>>        Handle hDispatchDriver
28746>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28747>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28748>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
28749>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
28750>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
28751>>>>>>>>>    End_Procedure
28752>>>>>>>>>End_Class
28753>>>>>>>>>
28753>>>>>>>>>// CLSID: {C0DE2200-C46D-4A11-B782-A5A3684189A4}
28753>>>>>>>>>Class cCJCommandBarPopupColor is a cComAutomationObject
28754>>>>>>>>>
28754>>>>>>>>>    Function ComChecked Returns Boolean
28756>>>>>>>>>        Boolean retVal
28756>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
28757>>>>>>>>>        Function_Return retVal
28758>>>>>>>>>    End_Function
28759>>>>>>>>>
28759>>>>>>>>>    Procedure Set ComChecked Boolean value
28761>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
28762>>>>>>>>>    End_Procedure
28763>>>>>>>>>
28763>>>>>>>>>    Function ComBeginGroup Returns Boolean
28765>>>>>>>>>        Boolean retVal
28765>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
28766>>>>>>>>>        Function_Return retVal
28767>>>>>>>>>    End_Function
28768>>>>>>>>>
28768>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
28770>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
28771>>>>>>>>>    End_Procedure
28772>>>>>>>>>
28772>>>>>>>>>    Function ComCaption Returns String
28774>>>>>>>>>        String retVal
28774>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
28775>>>>>>>>>        Function_Return retVal
28776>>>>>>>>>    End_Function
28777>>>>>>>>>
28777>>>>>>>>>    Procedure Set ComCaption String value
28779>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
28780>>>>>>>>>    End_Procedure
28781>>>>>>>>>
28781>>>>>>>>>    Function ComDescriptionText Returns String
28783>>>>>>>>>        String retVal
28783>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
28784>>>>>>>>>        Function_Return retVal
28785>>>>>>>>>    End_Function
28786>>>>>>>>>
28786>>>>>>>>>    Procedure Set ComDescriptionText String value
28788>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
28789>>>>>>>>>    End_Procedure
28790>>>>>>>>>
28790>>>>>>>>>    Function ComId Returns Integer
28792>>>>>>>>>        Integer retVal
28792>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
28793>>>>>>>>>        Function_Return retVal
28794>>>>>>>>>    End_Function
28795>>>>>>>>>
28795>>>>>>>>>    Procedure Set ComId Integer value
28797>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
28798>>>>>>>>>    End_Procedure
28799>>>>>>>>>
28799>>>>>>>>>    Function ComParameter Returns String
28801>>>>>>>>>        String retVal
28801>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
28802>>>>>>>>>        Function_Return retVal
28803>>>>>>>>>    End_Function
28804>>>>>>>>>
28804>>>>>>>>>    Procedure Set ComParameter String value
28806>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
28807>>>>>>>>>    End_Procedure
28808>>>>>>>>>
28808>>>>>>>>>    Function ComShortcutText Returns String
28810>>>>>>>>>        String retVal
28810>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
28811>>>>>>>>>        Function_Return retVal
28812>>>>>>>>>    End_Function
28813>>>>>>>>>
28813>>>>>>>>>    Procedure Set ComShortcutText String value
28815>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
28816>>>>>>>>>    End_Procedure
28817>>>>>>>>>
28817>>>>>>>>>    Function ComCustomShortcutText Returns String
28819>>>>>>>>>        String retVal
28819>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
28820>>>>>>>>>        Function_Return retVal
28821>>>>>>>>>    End_Function
28822>>>>>>>>>
28822>>>>>>>>>    Procedure Set ComCustomShortcutText String value
28824>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
28825>>>>>>>>>    End_Procedure
28826>>>>>>>>>
28826>>>>>>>>>    Function ComTooltipText Returns String
28828>>>>>>>>>        String retVal
28828>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
28829>>>>>>>>>        Function_Return retVal
28830>>>>>>>>>    End_Function
28831>>>>>>>>>
28831>>>>>>>>>    Procedure Set ComTooltipText String value
28833>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
28834>>>>>>>>>    End_Procedure
28835>>>>>>>>>
28835>>>>>>>>>    Function ComVisible Returns Boolean
28837>>>>>>>>>        Boolean retVal
28837>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
28838>>>>>>>>>        Function_Return retVal
28839>>>>>>>>>    End_Function
28840>>>>>>>>>
28840>>>>>>>>>    Procedure Set ComVisible Boolean value
28842>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
28843>>>>>>>>>    End_Procedure
28844>>>>>>>>>
28844>>>>>>>>>    Function ComEnabled Returns Boolean
28846>>>>>>>>>        Boolean retVal
28846>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
28847>>>>>>>>>        Function_Return retVal
28848>>>>>>>>>    End_Function
28849>>>>>>>>>
28849>>>>>>>>>    Procedure Set ComEnabled Boolean value
28851>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
28852>>>>>>>>>    End_Procedure
28853>>>>>>>>>
28853>>>>>>>>>    Function ComIconId Returns Integer
28855>>>>>>>>>        Integer retVal
28855>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
28856>>>>>>>>>        Function_Return retVal
28857>>>>>>>>>    End_Function
28858>>>>>>>>>
28858>>>>>>>>>    Procedure Set ComIconId Integer value
28860>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
28861>>>>>>>>>    End_Procedure
28862>>>>>>>>>
28862>>>>>>>>>    Function ComDefaultItem Returns Boolean
28864>>>>>>>>>        Boolean retVal
28864>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
28865>>>>>>>>>        Function_Return retVal
28866>>>>>>>>>    End_Function
28867>>>>>>>>>
28867>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
28869>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
28870>>>>>>>>>    End_Procedure
28871>>>>>>>>>
28871>>>>>>>>>    Function ComFlags Returns XTPControlFlags
28873>>>>>>>>>        XTPControlFlags retVal
28873>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
28874>>>>>>>>>        Function_Return retVal
28875>>>>>>>>>    End_Function
28876>>>>>>>>>
28876>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
28878>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
28879>>>>>>>>>    End_Procedure
28880>>>>>>>>>
28880>>>>>>>>>    Function ComCategory Returns String
28882>>>>>>>>>        String retVal
28882>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
28883>>>>>>>>>        Function_Return retVal
28884>>>>>>>>>    End_Function
28885>>>>>>>>>
28885>>>>>>>>>    Procedure Set ComCategory String value
28887>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
28888>>>>>>>>>    End_Procedure
28889>>>>>>>>>
28889>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
28891>>>>>>>>>        XTPControlHideFlags retVal
28891>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
28892>>>>>>>>>        Function_Return retVal
28893>>>>>>>>>    End_Function
28894>>>>>>>>>
28894>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
28896>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
28897>>>>>>>>>    End_Procedure
28898>>>>>>>>>
28898>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
28900>>>>>>>>>        Boolean retVal
28900>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
28901>>>>>>>>>        Function_Return retVal
28902>>>>>>>>>    End_Function
28903>>>>>>>>>
28903>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
28905>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
28906>>>>>>>>>    End_Procedure
28907>>>>>>>>>
28907>>>>>>>>>    Function ComAction Returns Variant
28909>>>>>>>>>        Variant retVal
28909>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
28910>>>>>>>>>        Function_Return retVal
28911>>>>>>>>>    End_Function
28912>>>>>>>>>
28912>>>>>>>>>    Procedure Set ComAction Variant value
28914>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
28915>>>>>>>>>    End_Procedure
28916>>>>>>>>>
28916>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
28918>>>>>>>>>        Integer retVal
28918>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
28919>>>>>>>>>        Function_Return retVal
28920>>>>>>>>>    End_Function
28921>>>>>>>>>
28921>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
28923>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
28924>>>>>>>>>    End_Procedure
28925>>>>>>>>>
28925>>>>>>>>>    Function ComWidth Returns Integer
28927>>>>>>>>>        Integer retVal
28927>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
28928>>>>>>>>>        Function_Return retVal
28929>>>>>>>>>    End_Function
28930>>>>>>>>>
28930>>>>>>>>>    Procedure Set ComWidth Integer value
28932>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
28933>>>>>>>>>    End_Procedure
28934>>>>>>>>>
28934>>>>>>>>>    Function ComHeight Returns Integer
28936>>>>>>>>>        Integer retVal
28936>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
28937>>>>>>>>>        Function_Return retVal
28938>>>>>>>>>    End_Function
28939>>>>>>>>>
28939>>>>>>>>>    Procedure Set ComHeight Integer value
28941>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
28942>>>>>>>>>    End_Procedure
28943>>>>>>>>>
28943>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
28945>>>>>>>>>        XTPButtonStyle retVal
28945>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
28946>>>>>>>>>        Function_Return retVal
28947>>>>>>>>>    End_Function
28948>>>>>>>>>
28948>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
28950>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
28951>>>>>>>>>    End_Procedure
28952>>>>>>>>>
28952>>>>>>>>>    Function ComKeyboardTip Returns String
28954>>>>>>>>>        String retVal
28954>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
28955>>>>>>>>>        Function_Return retVal
28956>>>>>>>>>    End_Function
28957>>>>>>>>>
28957>>>>>>>>>    Procedure Set ComKeyboardTip String value
28959>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
28960>>>>>>>>>    End_Procedure
28961>>>>>>>>>
28961>>>>>>>>>    Function ComColor Returns OLE_COLOR
28963>>>>>>>>>        OLE_COLOR retVal
28963>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
28964>>>>>>>>>        Function_Return retVal
28965>>>>>>>>>    End_Function
28966>>>>>>>>>
28966>>>>>>>>>    Procedure Set ComColor OLE_COLOR value
28968>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
28969>>>>>>>>>    End_Procedure
28970>>>>>>>>>
28970>>>>>>>>>    Function ComCommandBar Returns Variant
28972>>>>>>>>>        Variant retVal
28972>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
28973>>>>>>>>>        Function_Return retVal
28974>>>>>>>>>    End_Function
28975>>>>>>>>>
28975>>>>>>>>>    Procedure Set ComCommandBar Variant value
28977>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
28978>>>>>>>>>    End_Procedure
28979>>>>>>>>>
28979>>>>>>>>>    Function ComControls Returns Variant
28981>>>>>>>>>        Handle hDispatchDriver
28981>>>>>>>>>        Variant retVal
28981>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28982>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
28983>>>>>>>>>        Function_Return retVal
28984>>>>>>>>>    End_Function
28985>>>>>>>>>
28985>>>>>>>>>    Function ComParent Returns Variant
28987>>>>>>>>>        Handle hDispatchDriver
28987>>>>>>>>>        Variant retVal
28987>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28988>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
28989>>>>>>>>>        Function_Return retVal
28990>>>>>>>>>    End_Function
28991>>>>>>>>>
28991>>>>>>>>>    Function ComIndex Returns Integer
28993>>>>>>>>>        Handle hDispatchDriver
28993>>>>>>>>>        Integer retVal
28993>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28994>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
28995>>>>>>>>>        Function_Return retVal
28996>>>>>>>>>    End_Function
28997>>>>>>>>>
28997>>>>>>>>>    Function ComType Returns XTPControlType
28999>>>>>>>>>        Handle hDispatchDriver
28999>>>>>>>>>        XTPControlType retVal
28999>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29000>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
29001>>>>>>>>>        Function_Return retVal
29002>>>>>>>>>    End_Function
29003>>>>>>>>>
29003>>>>>>>>>    Procedure ComDelete
29005>>>>>>>>>        Handle hDispatchDriver
29005>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29006>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
29007>>>>>>>>>    End_Procedure
29008>>>>>>>>>
29008>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
29010>>>>>>>>>        Handle hDispatchDriver
29010>>>>>>>>>        Variant retVal
29010>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29011>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
29012>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
29013>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
29014>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
29015>>>>>>>>>        Function_Return retVal
29016>>>>>>>>>    End_Function
29017>>>>>>>>>
29017>>>>>>>>>    Procedure ComSetFocus
29019>>>>>>>>>        Handle hDispatchDriver
29019>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29020>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
29021>>>>>>>>>    End_Procedure
29022>>>>>>>>>
29022>>>>>>>>>    Procedure ComExecute
29024>>>>>>>>>        Handle hDispatchDriver
29024>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29025>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
29026>>>>>>>>>    End_Procedure
29027>>>>>>>>>
29027>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
29029>>>>>>>>>        Handle hDispatchDriver
29029>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29030>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
29031>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
29032>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
29033>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
29034>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
29035>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
29036>>>>>>>>>    End_Procedure
29037>>>>>>>>>
29037>>>>>>>>>    Function ComRibbonGroup Returns Variant
29039>>>>>>>>>        Handle hDispatchDriver
29039>>>>>>>>>        Variant retVal
29039>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29040>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
29041>>>>>>>>>        Function_Return retVal
29042>>>>>>>>>    End_Function
29043>>>>>>>>>
29043>>>>>>>>>    Procedure ComReset
29045>>>>>>>>>        Handle hDispatchDriver
29045>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29046>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
29047>>>>>>>>>    End_Procedure
29048>>>>>>>>>
29048>>>>>>>>>    Function ComTop Returns Integer
29050>>>>>>>>>        Handle hDispatchDriver
29050>>>>>>>>>        Integer retVal
29050>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29051>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
29052>>>>>>>>>        Function_Return retVal
29053>>>>>>>>>    End_Function
29054>>>>>>>>>
29054>>>>>>>>>    Function ComLeft Returns Integer
29056>>>>>>>>>        Handle hDispatchDriver
29056>>>>>>>>>        Integer retVal
29056>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29057>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
29058>>>>>>>>>        Function_Return retVal
29059>>>>>>>>>    End_Function
29060>>>>>>>>>
29060>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
29062>>>>>>>>>        Handle hDispatchDriver
29062>>>>>>>>>        Variant retVal
29062>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29063>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
29064>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
29065>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
29066>>>>>>>>>        Function_Return retVal
29067>>>>>>>>>    End_Function
29068>>>>>>>>>
29068>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
29070>>>>>>>>>        Handle hDispatchDriver
29070>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29071>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
29072>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
29073>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
29074>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
29075>>>>>>>>>    End_Procedure
29076>>>>>>>>>End_Class
29077>>>>>>>>>
29077>>>>>>>>>// CLSID: {C0DE2200-0835-494F-8FFB-1516C2D7D943}
29077>>>>>>>>>Class cCJCommandBarControlColorSelector is a cComAutomationObject
29078>>>>>>>>>
29078>>>>>>>>>    Function ComChecked Returns Boolean
29080>>>>>>>>>        Boolean retVal
29080>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
29081>>>>>>>>>        Function_Return retVal
29082>>>>>>>>>    End_Function
29083>>>>>>>>>
29083>>>>>>>>>    Procedure Set ComChecked Boolean value
29085>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
29086>>>>>>>>>    End_Procedure
29087>>>>>>>>>
29087>>>>>>>>>    Function ComBeginGroup Returns Boolean
29089>>>>>>>>>        Boolean retVal
29089>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
29090>>>>>>>>>        Function_Return retVal
29091>>>>>>>>>    End_Function
29092>>>>>>>>>
29092>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
29094>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
29095>>>>>>>>>    End_Procedure
29096>>>>>>>>>
29096>>>>>>>>>    Function ComCaption Returns String
29098>>>>>>>>>        String retVal
29098>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
29099>>>>>>>>>        Function_Return retVal
29100>>>>>>>>>    End_Function
29101>>>>>>>>>
29101>>>>>>>>>    Procedure Set ComCaption String value
29103>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
29104>>>>>>>>>    End_Procedure
29105>>>>>>>>>
29105>>>>>>>>>    Function ComDescriptionText Returns String
29107>>>>>>>>>        String retVal
29107>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
29108>>>>>>>>>        Function_Return retVal
29109>>>>>>>>>    End_Function
29110>>>>>>>>>
29110>>>>>>>>>    Procedure Set ComDescriptionText String value
29112>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
29113>>>>>>>>>    End_Procedure
29114>>>>>>>>>
29114>>>>>>>>>    Function ComId Returns Integer
29116>>>>>>>>>        Integer retVal
29116>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
29117>>>>>>>>>        Function_Return retVal
29118>>>>>>>>>    End_Function
29119>>>>>>>>>
29119>>>>>>>>>    Procedure Set ComId Integer value
29121>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
29122>>>>>>>>>    End_Procedure
29123>>>>>>>>>
29123>>>>>>>>>    Function ComParameter Returns String
29125>>>>>>>>>        String retVal
29125>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
29126>>>>>>>>>        Function_Return retVal
29127>>>>>>>>>    End_Function
29128>>>>>>>>>
29128>>>>>>>>>    Procedure Set ComParameter String value
29130>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
29131>>>>>>>>>    End_Procedure
29132>>>>>>>>>
29132>>>>>>>>>    Function ComShortcutText Returns String
29134>>>>>>>>>        String retVal
29134>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
29135>>>>>>>>>        Function_Return retVal
29136>>>>>>>>>    End_Function
29137>>>>>>>>>
29137>>>>>>>>>    Procedure Set ComShortcutText String value
29139>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
29140>>>>>>>>>    End_Procedure
29141>>>>>>>>>
29141>>>>>>>>>    Function ComCustomShortcutText Returns String
29143>>>>>>>>>        String retVal
29143>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
29144>>>>>>>>>        Function_Return retVal
29145>>>>>>>>>    End_Function
29146>>>>>>>>>
29146>>>>>>>>>    Procedure Set ComCustomShortcutText String value
29148>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
29149>>>>>>>>>    End_Procedure
29150>>>>>>>>>
29150>>>>>>>>>    Function ComTooltipText Returns String
29152>>>>>>>>>        String retVal
29152>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
29153>>>>>>>>>        Function_Return retVal
29154>>>>>>>>>    End_Function
29155>>>>>>>>>
29155>>>>>>>>>    Procedure Set ComTooltipText String value
29157>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
29158>>>>>>>>>    End_Procedure
29159>>>>>>>>>
29159>>>>>>>>>    Function ComVisible Returns Boolean
29161>>>>>>>>>        Boolean retVal
29161>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
29162>>>>>>>>>        Function_Return retVal
29163>>>>>>>>>    End_Function
29164>>>>>>>>>
29164>>>>>>>>>    Procedure Set ComVisible Boolean value
29166>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
29167>>>>>>>>>    End_Procedure
29168>>>>>>>>>
29168>>>>>>>>>    Function ComEnabled Returns Boolean
29170>>>>>>>>>        Boolean retVal
29170>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
29171>>>>>>>>>        Function_Return retVal
29172>>>>>>>>>    End_Function
29173>>>>>>>>>
29173>>>>>>>>>    Procedure Set ComEnabled Boolean value
29175>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
29176>>>>>>>>>    End_Procedure
29177>>>>>>>>>
29177>>>>>>>>>    Function ComIconId Returns Integer
29179>>>>>>>>>        Integer retVal
29179>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
29180>>>>>>>>>        Function_Return retVal
29181>>>>>>>>>    End_Function
29182>>>>>>>>>
29182>>>>>>>>>    Procedure Set ComIconId Integer value
29184>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
29185>>>>>>>>>    End_Procedure
29186>>>>>>>>>
29186>>>>>>>>>    Function ComDefaultItem Returns Boolean
29188>>>>>>>>>        Boolean retVal
29188>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
29189>>>>>>>>>        Function_Return retVal
29190>>>>>>>>>    End_Function
29191>>>>>>>>>
29191>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
29193>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
29194>>>>>>>>>    End_Procedure
29195>>>>>>>>>
29195>>>>>>>>>    Function ComFlags Returns XTPControlFlags
29197>>>>>>>>>        XTPControlFlags retVal
29197>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
29198>>>>>>>>>        Function_Return retVal
29199>>>>>>>>>    End_Function
29200>>>>>>>>>
29200>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
29202>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
29203>>>>>>>>>    End_Procedure
29204>>>>>>>>>
29204>>>>>>>>>    Function ComCategory Returns String
29206>>>>>>>>>        String retVal
29206>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
29207>>>>>>>>>        Function_Return retVal
29208>>>>>>>>>    End_Function
29209>>>>>>>>>
29209>>>>>>>>>    Procedure Set ComCategory String value
29211>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
29212>>>>>>>>>    End_Procedure
29213>>>>>>>>>
29213>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
29215>>>>>>>>>        XTPControlHideFlags retVal
29215>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
29216>>>>>>>>>        Function_Return retVal
29217>>>>>>>>>    End_Function
29218>>>>>>>>>
29218>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
29220>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
29221>>>>>>>>>    End_Procedure
29222>>>>>>>>>
29222>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
29224>>>>>>>>>        Boolean retVal
29224>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
29225>>>>>>>>>        Function_Return retVal
29226>>>>>>>>>    End_Function
29227>>>>>>>>>
29227>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
29229>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
29230>>>>>>>>>    End_Procedure
29231>>>>>>>>>
29231>>>>>>>>>    Function ComAction Returns Variant
29233>>>>>>>>>        Variant retVal
29233>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
29234>>>>>>>>>        Function_Return retVal
29235>>>>>>>>>    End_Function
29236>>>>>>>>>
29236>>>>>>>>>    Procedure Set ComAction Variant value
29238>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
29239>>>>>>>>>    End_Procedure
29240>>>>>>>>>
29240>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
29242>>>>>>>>>        Integer retVal
29242>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
29243>>>>>>>>>        Function_Return retVal
29244>>>>>>>>>    End_Function
29245>>>>>>>>>
29245>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
29247>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
29248>>>>>>>>>    End_Procedure
29249>>>>>>>>>
29249>>>>>>>>>    Function ComWidth Returns Integer
29251>>>>>>>>>        Integer retVal
29251>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
29252>>>>>>>>>        Function_Return retVal
29253>>>>>>>>>    End_Function
29254>>>>>>>>>
29254>>>>>>>>>    Procedure Set ComWidth Integer value
29256>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
29257>>>>>>>>>    End_Procedure
29258>>>>>>>>>
29258>>>>>>>>>    Function ComHeight Returns Integer
29260>>>>>>>>>        Integer retVal
29260>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
29261>>>>>>>>>        Function_Return retVal
29262>>>>>>>>>    End_Function
29263>>>>>>>>>
29263>>>>>>>>>    Procedure Set ComHeight Integer value
29265>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
29266>>>>>>>>>    End_Procedure
29267>>>>>>>>>
29267>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
29269>>>>>>>>>        XTPButtonStyle retVal
29269>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
29270>>>>>>>>>        Function_Return retVal
29271>>>>>>>>>    End_Function
29272>>>>>>>>>
29272>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
29274>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
29275>>>>>>>>>    End_Procedure
29276>>>>>>>>>
29276>>>>>>>>>    Function ComKeyboardTip Returns String
29278>>>>>>>>>        String retVal
29278>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
29279>>>>>>>>>        Function_Return retVal
29280>>>>>>>>>    End_Function
29281>>>>>>>>>
29281>>>>>>>>>    Procedure Set ComKeyboardTip String value
29283>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
29284>>>>>>>>>    End_Procedure
29285>>>>>>>>>
29285>>>>>>>>>    Function ComColor Returns OLE_COLOR
29287>>>>>>>>>        OLE_COLOR retVal
29287>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
29288>>>>>>>>>        Function_Return retVal
29289>>>>>>>>>    End_Function
29290>>>>>>>>>
29290>>>>>>>>>    Procedure Set ComColor OLE_COLOR value
29292>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
29293>>>>>>>>>    End_Procedure
29294>>>>>>>>>
29294>>>>>>>>>    Function ComControls Returns Variant
29296>>>>>>>>>        Handle hDispatchDriver
29296>>>>>>>>>        Variant retVal
29296>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29297>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
29298>>>>>>>>>        Function_Return retVal
29299>>>>>>>>>    End_Function
29300>>>>>>>>>
29300>>>>>>>>>    Function ComParent Returns Variant
29302>>>>>>>>>        Handle hDispatchDriver
29302>>>>>>>>>        Variant retVal
29302>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29303>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29304>>>>>>>>>        Function_Return retVal
29305>>>>>>>>>    End_Function
29306>>>>>>>>>
29306>>>>>>>>>    Function ComIndex Returns Integer
29308>>>>>>>>>        Handle hDispatchDriver
29308>>>>>>>>>        Integer retVal
29308>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29309>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
29310>>>>>>>>>        Function_Return retVal
29311>>>>>>>>>    End_Function
29312>>>>>>>>>
29312>>>>>>>>>    Function ComType Returns XTPControlType
29314>>>>>>>>>        Handle hDispatchDriver
29314>>>>>>>>>        XTPControlType retVal
29314>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29315>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
29316>>>>>>>>>        Function_Return retVal
29317>>>>>>>>>    End_Function
29318>>>>>>>>>
29318>>>>>>>>>    Procedure ComDelete
29320>>>>>>>>>        Handle hDispatchDriver
29320>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29321>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
29322>>>>>>>>>    End_Procedure
29323>>>>>>>>>
29323>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
29325>>>>>>>>>        Handle hDispatchDriver
29325>>>>>>>>>        Variant retVal
29325>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29326>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
29327>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
29328>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
29329>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
29330>>>>>>>>>        Function_Return retVal
29331>>>>>>>>>    End_Function
29332>>>>>>>>>
29332>>>>>>>>>    Procedure ComSetFocus
29334>>>>>>>>>        Handle hDispatchDriver
29334>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29335>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
29336>>>>>>>>>    End_Procedure
29337>>>>>>>>>
29337>>>>>>>>>    Procedure ComExecute
29339>>>>>>>>>        Handle hDispatchDriver
29339>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29340>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
29341>>>>>>>>>    End_Procedure
29342>>>>>>>>>
29342>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
29344>>>>>>>>>        Handle hDispatchDriver
29344>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29345>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
29346>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
29347>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
29348>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
29349>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
29350>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
29351>>>>>>>>>    End_Procedure
29352>>>>>>>>>
29352>>>>>>>>>    Function ComRibbonGroup Returns Variant
29354>>>>>>>>>        Handle hDispatchDriver
29354>>>>>>>>>        Variant retVal
29354>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29355>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
29356>>>>>>>>>        Function_Return retVal
29357>>>>>>>>>    End_Function
29358>>>>>>>>>
29358>>>>>>>>>    Procedure ComReset
29360>>>>>>>>>        Handle hDispatchDriver
29360>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29361>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
29362>>>>>>>>>    End_Procedure
29363>>>>>>>>>
29363>>>>>>>>>    Function ComTop Returns Integer
29365>>>>>>>>>        Handle hDispatchDriver
29365>>>>>>>>>        Integer retVal
29365>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29366>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
29367>>>>>>>>>        Function_Return retVal
29368>>>>>>>>>    End_Function
29369>>>>>>>>>
29369>>>>>>>>>    Function ComLeft Returns Integer
29371>>>>>>>>>        Handle hDispatchDriver
29371>>>>>>>>>        Integer retVal
29371>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29372>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
29373>>>>>>>>>        Function_Return retVal
29374>>>>>>>>>    End_Function
29375>>>>>>>>>
29375>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
29377>>>>>>>>>        Handle hDispatchDriver
29377>>>>>>>>>        Variant retVal
29377>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29378>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
29379>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
29380>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
29381>>>>>>>>>        Function_Return retVal
29382>>>>>>>>>    End_Function
29383>>>>>>>>>
29383>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
29385>>>>>>>>>        Handle hDispatchDriver
29385>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29386>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
29387>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
29388>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
29389>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
29390>>>>>>>>>    End_Procedure
29391>>>>>>>>>End_Class
29392>>>>>>>>>
29392>>>>>>>>>// CLSID: {C0DE2200-9D54-40A3-B626-83FB0F80B8F4}
29392>>>>>>>>>Class cCJRibbonBackstageView is a cComAutomationObject
29393>>>>>>>>>
29393>>>>>>>>>    Function ComStyle Returns XTPRibbonBackstageStyle
29395>>>>>>>>>        XTPRibbonBackstageStyle retVal
29395>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1102 OLE_VT_I4 to retVal
29396>>>>>>>>>        Function_Return retVal
29397>>>>>>>>>    End_Function
29398>>>>>>>>>
29398>>>>>>>>>    Procedure Set ComStyle XTPRibbonBackstageStyle value
29400>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1102 OLE_VT_I4 to value
29401>>>>>>>>>    End_Procedure
29402>>>>>>>>>
29402>>>>>>>>>    Function ComControls Returns Variant
29404>>>>>>>>>        Handle hDispatchDriver
29404>>>>>>>>>        Variant retVal
29404>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29405>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29406>>>>>>>>>        Function_Return retVal
29407>>>>>>>>>    End_Function
29408>>>>>>>>>
29408>>>>>>>>>    Function ComAddCommand Integer llId String llCaption Returns Variant
29410>>>>>>>>>        Handle hDispatchDriver
29410>>>>>>>>>        Variant retVal
29410>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29411>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
29412>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
29413>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
29414>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1000 OLE_VT_DISPATCH to retVal
29415>>>>>>>>>        Function_Return retVal
29416>>>>>>>>>    End_Function
29417>>>>>>>>>
29417>>>>>>>>>    Function ComAddTab Integer llId String llCaption OLE_HANDLE llControlPaneHwnd Returns Variant
29419>>>>>>>>>        Handle hDispatchDriver
29419>>>>>>>>>        Variant retVal
29419>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29420>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
29421>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
29422>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
29423>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llControlPaneHwnd
29424>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1001 OLE_VT_DISPATCH to retVal
29425>>>>>>>>>        Function_Return retVal
29426>>>>>>>>>    End_Function
29427>>>>>>>>>
29427>>>>>>>>>    Procedure ComClose
29429>>>>>>>>>        Handle hDispatchDriver
29429>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29430>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1002 OLE_VT_VOID
29431>>>>>>>>>    End_Procedure
29432>>>>>>>>>
29432>>>>>>>>>    Procedure ComSetTheme XTPVisualTheme llTheme
29434>>>>>>>>>        Handle hDispatchDriver
29434>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29435>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
29436>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTheme
29437>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1003 OLE_VT_VOID
29438>>>>>>>>>    End_Procedure
29439>>>>>>>>>
29439>>>>>>>>>    Function ComAddMenuSeparator Returns Variant
29441>>>>>>>>>        Handle hDispatchDriver
29441>>>>>>>>>        Variant retVal
29441>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29442>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1004 OLE_VT_DISPATCH to retVal
29443>>>>>>>>>        Function_Return retVal
29444>>>>>>>>>    End_Function
29445>>>>>>>>>
29445>>>>>>>>>    Function ComGetForeColor Returns OLE_COLOR
29447>>>>>>>>>        Handle hDispatchDriver
29447>>>>>>>>>        OLE_COLOR retVal
29447>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29448>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1100 OLE_VT_I4 to retVal
29449>>>>>>>>>        Function_Return retVal
29450>>>>>>>>>    End_Function
29451>>>>>>>>>
29451>>>>>>>>>    Function ComGetBackColor Returns OLE_COLOR
29453>>>>>>>>>        Handle hDispatchDriver
29453>>>>>>>>>        OLE_COLOR retVal
29453>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29454>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1101 OLE_VT_I4 to retVal
29455>>>>>>>>>        Function_Return retVal
29456>>>>>>>>>    End_Function
29457>>>>>>>>>End_Class
29458>>>>>>>>>
29458>>>>>>>>>// CLSID: {C0DE2200-2F93-41B3-B097-2DA852A25BFC}
29458>>>>>>>>>Class cCJRibbonBackstageCommand is a cComAutomationObject
29459>>>>>>>>>
29459>>>>>>>>>    Function ComCaption Returns String
29461>>>>>>>>>        String retVal
29461>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
29462>>>>>>>>>        Function_Return retVal
29463>>>>>>>>>    End_Function
29464>>>>>>>>>
29464>>>>>>>>>    Procedure Set ComCaption String value
29466>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
29467>>>>>>>>>    End_Procedure
29468>>>>>>>>>
29468>>>>>>>>>    Function ComDescriptionText Returns String
29470>>>>>>>>>        String retVal
29470>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
29471>>>>>>>>>        Function_Return retVal
29472>>>>>>>>>    End_Function
29473>>>>>>>>>
29473>>>>>>>>>    Procedure Set ComDescriptionText String value
29475>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
29476>>>>>>>>>    End_Procedure
29477>>>>>>>>>
29477>>>>>>>>>    Function ComId Returns Integer
29479>>>>>>>>>        Integer retVal
29479>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
29480>>>>>>>>>        Function_Return retVal
29481>>>>>>>>>    End_Function
29482>>>>>>>>>
29482>>>>>>>>>    Procedure Set ComId Integer value
29484>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
29485>>>>>>>>>    End_Procedure
29486>>>>>>>>>
29486>>>>>>>>>    Function ComParameter Returns String
29488>>>>>>>>>        String retVal
29488>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
29489>>>>>>>>>        Function_Return retVal
29490>>>>>>>>>    End_Function
29491>>>>>>>>>
29491>>>>>>>>>    Procedure Set ComParameter String value
29493>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
29494>>>>>>>>>    End_Procedure
29495>>>>>>>>>
29495>>>>>>>>>    Function ComEnabled Returns Boolean
29497>>>>>>>>>        Boolean retVal
29497>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
29498>>>>>>>>>        Function_Return retVal
29499>>>>>>>>>    End_Function
29500>>>>>>>>>
29500>>>>>>>>>    Procedure Set ComEnabled Boolean value
29502>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
29503>>>>>>>>>    End_Procedure
29504>>>>>>>>>
29504>>>>>>>>>    Function ComVisible Returns Boolean
29506>>>>>>>>>        Boolean retVal
29506>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
29507>>>>>>>>>        Function_Return retVal
29508>>>>>>>>>    End_Function
29509>>>>>>>>>
29509>>>>>>>>>    Procedure Set ComVisible Boolean value
29511>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
29512>>>>>>>>>    End_Procedure
29513>>>>>>>>>
29513>>>>>>>>>    Function ComIconId Returns Integer
29515>>>>>>>>>        Integer retVal
29515>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
29516>>>>>>>>>        Function_Return retVal
29517>>>>>>>>>    End_Function
29518>>>>>>>>>
29518>>>>>>>>>    Procedure Set ComIconId Integer value
29520>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
29521>>>>>>>>>    End_Procedure
29522>>>>>>>>>
29522>>>>>>>>>    Function ComAction Returns Variant
29524>>>>>>>>>        Variant retVal
29524>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
29525>>>>>>>>>        Function_Return retVal
29526>>>>>>>>>    End_Function
29527>>>>>>>>>
29527>>>>>>>>>    Procedure Set ComAction Variant value
29529>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
29530>>>>>>>>>    End_Procedure
29531>>>>>>>>>
29531>>>>>>>>>    Function ComControls Returns Variant
29533>>>>>>>>>        Handle hDispatchDriver
29533>>>>>>>>>        Variant retVal
29533>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29534>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
29535>>>>>>>>>        Function_Return retVal
29536>>>>>>>>>    End_Function
29537>>>>>>>>>
29537>>>>>>>>>    Function ComParent Returns Variant
29539>>>>>>>>>        Handle hDispatchDriver
29539>>>>>>>>>        Variant retVal
29539>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29540>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29541>>>>>>>>>        Function_Return retVal
29542>>>>>>>>>    End_Function
29543>>>>>>>>>
29543>>>>>>>>>    Function ComIndex Returns Integer
29545>>>>>>>>>        Handle hDispatchDriver
29545>>>>>>>>>        Integer retVal
29545>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29546>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
29547>>>>>>>>>        Function_Return retVal
29548>>>>>>>>>    End_Function
29549>>>>>>>>>
29549>>>>>>>>>    Procedure ComDelete
29551>>>>>>>>>        Handle hDispatchDriver
29551>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29552>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
29553>>>>>>>>>    End_Procedure
29554>>>>>>>>>End_Class
29555>>>>>>>>>
29555>>>>>>>>>// CLSID: {C0DE2200-FCAC-4EF3-B27E-2E8A04B170E4}
29555>>>>>>>>>Class cCJRibbonBackstageTab is a cComAutomationObject
29556>>>>>>>>>
29556>>>>>>>>>    Function ComCaption Returns String
29558>>>>>>>>>        String retVal
29558>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
29559>>>>>>>>>        Function_Return retVal
29560>>>>>>>>>    End_Function
29561>>>>>>>>>
29561>>>>>>>>>    Procedure Set ComCaption String value
29563>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
29564>>>>>>>>>    End_Procedure
29565>>>>>>>>>
29565>>>>>>>>>    Function ComDescriptionText Returns String
29567>>>>>>>>>        String retVal
29567>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
29568>>>>>>>>>        Function_Return retVal
29569>>>>>>>>>    End_Function
29570>>>>>>>>>
29570>>>>>>>>>    Procedure Set ComDescriptionText String value
29572>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
29573>>>>>>>>>    End_Procedure
29574>>>>>>>>>
29574>>>>>>>>>    Function ComId Returns Integer
29576>>>>>>>>>        Integer retVal
29576>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
29577>>>>>>>>>        Function_Return retVal
29578>>>>>>>>>    End_Function
29579>>>>>>>>>
29579>>>>>>>>>    Procedure Set ComId Integer value
29581>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
29582>>>>>>>>>    End_Procedure
29583>>>>>>>>>
29583>>>>>>>>>    Function ComParameter Returns String
29585>>>>>>>>>        String retVal
29585>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
29586>>>>>>>>>        Function_Return retVal
29587>>>>>>>>>    End_Function
29588>>>>>>>>>
29588>>>>>>>>>    Procedure Set ComParameter String value
29590>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
29591>>>>>>>>>    End_Procedure
29592>>>>>>>>>
29592>>>>>>>>>    Function ComEnabled Returns Boolean
29594>>>>>>>>>        Boolean retVal
29594>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
29595>>>>>>>>>        Function_Return retVal
29596>>>>>>>>>    End_Function
29597>>>>>>>>>
29597>>>>>>>>>    Procedure Set ComEnabled Boolean value
29599>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
29600>>>>>>>>>    End_Procedure
29601>>>>>>>>>
29601>>>>>>>>>    Function ComVisible Returns Boolean
29603>>>>>>>>>        Boolean retVal
29603>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
29604>>>>>>>>>        Function_Return retVal
29605>>>>>>>>>    End_Function
29606>>>>>>>>>
29606>>>>>>>>>    Procedure Set ComVisible Boolean value
29608>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
29609>>>>>>>>>    End_Procedure
29610>>>>>>>>>
29610>>>>>>>>>    Function ComIconId Returns Integer
29612>>>>>>>>>        Integer retVal
29612>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
29613>>>>>>>>>        Function_Return retVal
29614>>>>>>>>>    End_Function
29615>>>>>>>>>
29615>>>>>>>>>    Procedure Set ComIconId Integer value
29617>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
29618>>>>>>>>>    End_Procedure
29619>>>>>>>>>
29619>>>>>>>>>    Function ComDefaultItem Returns Boolean
29621>>>>>>>>>        Boolean retVal
29621>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
29622>>>>>>>>>        Function_Return retVal
29623>>>>>>>>>    End_Function
29624>>>>>>>>>
29624>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
29626>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
29627>>>>>>>>>    End_Procedure
29628>>>>>>>>>
29628>>>>>>>>>    Function ComAction Returns Variant
29630>>>>>>>>>        Variant retVal
29630>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
29631>>>>>>>>>        Function_Return retVal
29632>>>>>>>>>    End_Function
29633>>>>>>>>>
29633>>>>>>>>>    Procedure Set ComAction Variant value
29635>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
29636>>>>>>>>>    End_Procedure
29637>>>>>>>>>
29637>>>>>>>>>    Function ComControls Returns Variant
29639>>>>>>>>>        Handle hDispatchDriver
29639>>>>>>>>>        Variant retVal
29639>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29640>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
29641>>>>>>>>>        Function_Return retVal
29642>>>>>>>>>    End_Function
29643>>>>>>>>>
29643>>>>>>>>>    Function ComParent Returns Variant
29645>>>>>>>>>        Handle hDispatchDriver
29645>>>>>>>>>        Variant retVal
29645>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29646>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29647>>>>>>>>>        Function_Return retVal
29648>>>>>>>>>    End_Function
29649>>>>>>>>>
29649>>>>>>>>>    Function ComIndex Returns Integer
29651>>>>>>>>>        Handle hDispatchDriver
29651>>>>>>>>>        Integer retVal
29651>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29652>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
29653>>>>>>>>>        Function_Return retVal
29654>>>>>>>>>    End_Function
29655>>>>>>>>>
29655>>>>>>>>>    Procedure ComDelete
29657>>>>>>>>>        Handle hDispatchDriver
29657>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29658>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
29659>>>>>>>>>    End_Procedure
29660>>>>>>>>>End_Class
29661>>>>>>>>>
29661>>>>>>>>>// CLSID: {C0DE2200-3890-484C-A9B0-978E6AA0AA8D}
29661>>>>>>>>>Class cCJRibbonBackstageMenuSeparator is a cComAutomationObject
29662>>>>>>>>>
29662>>>>>>>>>    Function ComId Returns Integer
29664>>>>>>>>>        Integer retVal
29664>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
29665>>>>>>>>>        Function_Return retVal
29666>>>>>>>>>    End_Function
29667>>>>>>>>>
29667>>>>>>>>>    Procedure Set ComId Integer value
29669>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
29670>>>>>>>>>    End_Procedure
29671>>>>>>>>>
29671>>>>>>>>>    Function ComVisible Returns Boolean
29673>>>>>>>>>        Boolean retVal
29673>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
29674>>>>>>>>>        Function_Return retVal
29675>>>>>>>>>    End_Function
29676>>>>>>>>>
29676>>>>>>>>>    Procedure Set ComVisible Boolean value
29678>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
29679>>>>>>>>>    End_Procedure
29680>>>>>>>>>
29680>>>>>>>>>    Function ComDefaultItem Returns Boolean
29682>>>>>>>>>        Boolean retVal
29682>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
29683>>>>>>>>>        Function_Return retVal
29684>>>>>>>>>    End_Function
29685>>>>>>>>>
29685>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
29687>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
29688>>>>>>>>>    End_Procedure
29689>>>>>>>>>
29689>>>>>>>>>    Function ComControls Returns Variant
29691>>>>>>>>>        Handle hDispatchDriver
29691>>>>>>>>>        Variant retVal
29691>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29692>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
29693>>>>>>>>>        Function_Return retVal
29694>>>>>>>>>    End_Function
29695>>>>>>>>>
29695>>>>>>>>>    Function ComParent Returns Variant
29697>>>>>>>>>        Handle hDispatchDriver
29697>>>>>>>>>        Variant retVal
29697>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29698>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29699>>>>>>>>>        Function_Return retVal
29700>>>>>>>>>    End_Function
29701>>>>>>>>>
29701>>>>>>>>>    Function ComIndex Returns Integer
29703>>>>>>>>>        Handle hDispatchDriver
29703>>>>>>>>>        Integer retVal
29703>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29704>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
29705>>>>>>>>>        Function_Return retVal
29706>>>>>>>>>    End_Function
29707>>>>>>>>>
29707>>>>>>>>>    Procedure ComDelete
29709>>>>>>>>>        Handle hDispatchDriver
29709>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29710>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
29711>>>>>>>>>    End_Procedure
29712>>>>>>>>>End_Class
29713>>>>>>>>>
29713>>>>>>>Use tWinStructs.pkg
29713>>>>>>>Use Winkern.pkg
29713>>>>>>>
29713>>>>>>>// idle timer used for updates.
29713>>>>>>>Class cCJIdleHandler is a cIdleHandler
29714>>>>>>>    Procedure OnIdle
29716>>>>>>>        Delegate Send Update
29718>>>>>>>    End_Procedure
29719>>>>>>>End_Class
29720>>>>>>>
29720>>>>>>>// xtpThemeOffice2007 was removed by CJ
29720>>>>>>>Define xtpThemeOffice2007 for xtpThemeResource
29720>>>>>>>
29720>>>>>>>// define custom theme names. We use these to turn these into usable
29720>>>>>>>// themes and their dll/ini files. This is in addition to whatever codejock provides
29720>>>>>>>
29720>>>>>>>Enum_List
29720>>>>>>>    Define xtpThemeOffice2007Aqua for 1024
29720>>>>>>>    Define xtpThemeOffice2007Blue
29720>>>>>>>    Define xtpThemeOffice2007Black
29720>>>>>>>    Define xtpThemeOffice2007Silver
29720>>>>>>>    
29720>>>>>>>    Define xtpThemeWindows10Dark
29720>>>>>>>//    Define xtpThemeNativeWindows10 -- already defined in cCJCommandBars.pkg
29720>>>>>>>    
29720>>>>>>>    Define xtpThemeOffice2010
29720>>>>>>>    Define xtpThemeOffice2010Blue
29720>>>>>>>    Define xtpThemeOffice2010Black
29720>>>>>>>    Define xtpThemeOffice2010Silver
29720>>>>>>>    
29720>>>>>>>    Define xtpThemeOffice2013Word
29720>>>>>>>    Define xtpThemeOffice2013Outlook
29720>>>>>>>    Define xtpThemeOffice2013Excel
29720>>>>>>>    Define xtpThemeOffice2013PowerPoint
29720>>>>>>>    Define xtpThemeOffice2013Access
29720>>>>>>>    Define xtpThemeOffice2013Publisher
29720>>>>>>>    Define xtpThemeOffice2013OneNote
29720>>>>>>>    
29720>>>>>>>    Define xtpThemeOffice2016Access
29720>>>>>>>    Define xtpThemeOffice2016AccessBlack
29720>>>>>>>    Define xtpThemeOffice2016Excel
29720>>>>>>>    Define xtpThemeOffice2016OneNote
29720>>>>>>>    Define xtpThemeOffice2016Outlook
29720>>>>>>>    Define xtpThemeOffice2016Publisher
29720>>>>>>>    Define xtpThemeOffice2016PowerPoint
29720>>>>>>>    Define xtpThemeOffice2016Word
29720>>>>>>>    
29720>>>>>>>    Define xtpThemeWindows7
29720>>>>>>>    
29720>>>>>>>    Define xtpThemeVisualStudio2015Blue    
29720>>>>>>>    Define xtpThemeVisualStudio2015Dark
29720>>>>>>>    Define xtpThemeVisualStudio2015Light
29720>>>>>>>    
29720>>>>>>>    Define xtpThemeVisualStudio2017Blue
29720>>>>>>>    Define xtpThemeVisualStudio2017BlueExtra
29720>>>>>>>    Define xtpThemeVisualStudio2017Dark
29720>>>>>>>    Define xtpThemeVisualStudio2017Light
29720>>>>>>>    
29720>>>>>>>    Define xtpThemeVisualStudio2019Blue
29720>>>>>>>    Define xtpThemeVisualStudio2019BlueExtra
29720>>>>>>>    Define xtpThemeVisualStudio2019Dark
29720>>>>>>>    Define xtpThemeVisualStudio2019Light
29720>>>>>>>    
29720>>>>>>>    Define xtpThemeVisualStudio2022Blue
29720>>>>>>>    Define xtpThemeVisualStudio2022BlueExtra
29720>>>>>>>    Define xtpThemeVisualStudio2022Dark
29720>>>>>>>    Define xtpThemeVisualStudio2022Light
29720>>>>>>>End_Enum_List
29720>>>>>>>
29720>>>>>>>// Used for key bindings along with the VK_ defintions
29720>>>>>>>Define xtpKey_None for 0
29720>>>>>>>Define xtpKey_Shift for 4
29720>>>>>>>Define xtpKey_Ctrl for 8
29720>>>>>>>Define xtpKey_Alt for 16
29720>>>>>>>
29720>>>>>>>Define ID_CommandBarsAutoStart for 20001 // start for auto assigned menu items
29720>>>>>>>Define ID_StatusBarsAutoStart  for 10001 // start for auto assigned status panes
29720>>>>>>>Define ID_CommandBarIDAutoStart for 5000 // start for auto assigned commandbar BarIds
29720>>>>>>>Define ID_ImageAutoStart for 5000 // start for auto assigned image ids
29720>>>>>>>
29720>>>>>>>// options for loading and saving command bar layout
29720>>>>>>>Enum_List
29720>>>>>>>    Define rlNoSaveRestore         // don't load or save anything
29720>>>>>>>    Define rlSaveRestoreLayout     // just load and save the layout (position of toolbars)
29720>>>>>>>    Define rlSaveRestoreFullLayout // load/save layout plus addition info such as theme, large icons, etc.
29720>>>>>>>    Define rlSaveRestoreAll        // load and save layout and the controls (useful if you customize)
29720>>>>>>>End_Enum_List
29720>>>>>>>
29720>>>>>>>Enum_List
29720>>>>>>>    Define stNoStretch
29720>>>>>>>    Define stStretch
29720>>>>>>>    Define stStretchShared
29720>>>>>>>End_Enum_List
29720>>>>>>>
29720>>>>>>>// special StatusBar Id valus (piID) values for statusbar panes.
29720>>>>>>>Enum_List
29720>>>>>>>    Define sbpIDAutoAssign for -1    // ID will be auto assigned during pane's end_construct_Object
29720>>>>>>>    Define sbpIDIdlePane   for 0     // Used to display idle text and the DescriptionText of controls on mouse over.
29720>>>>>>>    Define sbpIDCapslock   for 59137 // Indicates whether CAPS Lock is on or off.
29720>>>>>>>    Define sbpIDNumLock    for 59138 // Indicates whether Num Lock is on or off.
29720>>>>>>>    Define sbpIDScrollLock for 59139 // Indicates whether Scroll Lock is on or off
29720>>>>>>>End_Enum_List
29720>>>>>>>
29720>>>>>>>// this keeps track of a global commandbars, which should be the Main menu's commandBars object
29720>>>>>>>// context menus use this to attach to commandbars
29720>>>>>>>Global_Variable Integer ghoCommandBars
29720>>>>>>>Move 0 to ghoCommandBars
29721>>>>>>>
29721>>>>>>>
29721>>>>>>>// DEOFocus is used by the cCJDeoMenuItemClassess and DEOInformation messages. It allows for
29721>>>>>>>// customization of the focus message which is used by FlexTron.
29721>>>>>>>Function DEOAdjustFocus Returns Handle
29723>>>>>>>    Function_Return Self
29724>>>>>>>End_Function
29725>>>>>>>
29725>>>>>>>Function DEOFocus for cUIObject Returns Handle
29727>>>>>>>    Handle hoFocus
29727>>>>>>>    
29727>>>>>>>    Get Focus of desktop to hoFocus
29728>>>>>>>    If (hoFocus) ;        Get DEOAdjustFocus of hoFocus to hoFocus
29731>>>>>>>    
29731>>>>>>>    Function_Return hoFocus
29732>>>>>>>End_Function
29733>>>>>>>
29733>>>>>>>Function DEOFocus for Desktop Returns Handle
29735>>>>>>>    Handle hoFocus
29735>>>>>>>    
29735>>>>>>>    Get Focus to hoFocus
29736>>>>>>>    If (hoFocus) ;        Get DEOAdjustFocus of hoFocus to hoFocus
29739>>>>>>>    
29739>>>>>>>    Function_Return hoFocus
29740>>>>>>>End_Function
29741>>>>>>>
29741>>>>>>>
29741>>>>>>>
29741>>>>>>>
29741>>>>>>>Class cCJCommandBarSystem is a cCJCommandBars
29742>>>>>>>    
29742>>>>>>>    Procedure Construct_Object
29744>>>>>>>        Handle hoTimer hoMain
29744>>>>>>>        Forward Send Construct_Object
29746>>>>>>>        
29746>>>>>>>        // do we save/restore command bars and if so how
29746>>>>>>>        Property Integer peRestoreLayout rlNoSaveRestore
29747>>>>>>>        
29747>>>>>>>        // This allows developers to control when a load layout should not be used
29747>>>>>>>        // because it is out of date. Just keep incrementing this value when you change
29747>>>>>>>        // something that is not compatible
29747>>>>>>>        Property Integer piLayoutBuild 1
29748>>>>>>>        
29748>>>>>>>        // Name used to save a store commandbars. Can be changed to create
29748>>>>>>>        // custom setups.
29748>>>>>>>        Property String  psLayoutSection "CommandBars"
29749>>>>>>>        
29749>>>>>>>        // if true this expects client area and a panel. Auto assigned
29749>>>>>>>        Property Boolean pbMDIMenu False
29750>>>>>>>        
29750>>>>>>>        Property Handle phoStatusBar 0 // assigned automatically
29751>>>>>>>        
29751>>>>>>>        Property Integer pePrivateVisualTheme xtpThemeWhidbey
29752>>>>>>>        Property Boolean pbPrivateEnableCustomization False
29753>>>>>>>        Property Boolean pbPrivateAltDragCustomization False
29754>>>>>>>        Property Integer pePrivateAnimation xtpAnimateWindowsDefault
29755>>>>>>>        Property Boolean pbPrivateLargeIcons False
29756>>>>>>>        Property Boolean pbPrivateShowTextBelowIcons False
29757>>>>>>>        Property Boolean pbPrivateAlwaysShowFullMenus True
29758>>>>>>>        Property Boolean pbPrivateShowFullAfterDelay True
29759>>>>>>>        Property Boolean pbPrivateOfficeStyleDisabledIcons False
29760>>>>>>>        Property Boolean pbPrivateIconsWithShadow True
29761>>>>>>>        Property Boolean pbPrivateToolBarScreenTips True
29762>>>>>>>        Property Boolean pbPrivateShowPopupBarToolTips False
29763>>>>>>>        Property Boolean pbPrivateToolBarAccelTips True
29764>>>>>>>        Property Boolean pbPrivateAutoHideUnusedPopups False
29765>>>>>>>        Property Boolean pbPrivateShowExpandButtonAlways False
29766>>>>>>>        Property Boolean pbPrivateSyncFloatingToolbars True
29767>>>>>>>        Property Boolean pbPrivateFloatToolbarsByDoubleClick False
29768>>>>>>>        Property Boolean pbPrivateAutoResizeIcons False
29769>>>>>>>        
29769>>>>>>>        Property Boolean pbCustomizeShowKeyboardPage False
29770>>>>>>>        Property Boolean pbCustomizeShowOptionsPage False
29771>>>>>>>        
29771>>>>>>>        // This is design-time only.
29771>>>>>>>        Property Boolean pbTabbedWorkspaces False
29772>>>>>>>        // This is mostly design-time only.
29772>>>>>>>        Property Boolean pbCenterTabbedViews True
29773>>>>>>>        Property Handle phoPrivateActions           (Create(Self,U_cCJCommandBarActions))
29774>>>>>>>        Property Handle phoPrivateDesignerControls  (Create(Self,U_cCJCommandBarControls))
29775>>>>>>>        Property Handle phoPrivateKeyBindings       (Create(Self,U_cCJKeyBindings))
29776>>>>>>>        Property Handle phoPrivateOptions           (Create(Self,U_cCJCommandBarsOptions))
29777>>>>>>>        Property Boolean pbPrivateTimerUpdate True
29778>>>>>>>        
29778>>>>>>>        // array of all registered actions (i.e., actions that have a DF object and are COM instanciated)
29778>>>>>>>        Property Handle[] phoRegisteredActions
29779>>>>>>>        
29779>>>>>>>        // array of actions that should actively updated via timer refresh
29779>>>>>>>        Property Handle[] phoActiveUpdates
29780>>>>>>>        
29780>>>>>>>        // array of action IDs that can be reused. We do this because we cannot destroy actions
29780>>>>>>>        Property Integer[] piActionIdPool
29781>>>>>>>        
29781>>>>>>>        // last auto assigned BarId
29781>>>>>>>        Property Integer piLastBarId ID_CommandBarIDAutoStart
29782>>>>>>>        
29782>>>>>>>        // last auto assigned image ID
29782>>>>>>>        Property Integer piLastImageId ID_ImageAutoStart
29783>>>>>>>        
29783>>>>>>>        // used to determine of Load should occur. When the count changes in the
29783>>>>>>>        // the action IDs or barIds it is not safe to reload things.
29783>>>>>>>        Property Integer piLastAssignedDesignTimeID 0
29784>>>>>>>        Property Integer piLastAssignedDesignTimeBarID 0
29785>>>>>>>        
29785>>>>>>>        Property Handle phoTimer 0
29786>>>>>>>        
29786>>>>>>>        Get Create U_cCJIdleHandler to hoTimer
29787>>>>>>>        Set phoTimer to hoTimer
29788>>>>>>>        
29788>>>>>>>        Get Main_Panel_id to hoMain
29789>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
29790>>>>>>>        Set peNeighborhood to nhPublic
29791>>>>>>>        // if commandbar is part of a focusable ring (like a view) we never want it to
29791>>>>>>>        // take the focus
29791>>>>>>>        Set Skip_State to True
29792>>>>>>>        
29792>>>>>>>        Send AssignMDIMenu // determine if this is an MDI commandbar.
29793>>>>>>>    End_Procedure
29794>>>>>>>    
29794>>>>>>>    
29794>>>>>>>    // this will figure out if this is an MDI menu and assign the ghoCommandBars
29794>>>>>>>    // global variable if needed.
29794>>>>>>>    // We assume it is MDI if the main_panel_id is commandbars parent and it is MDI style
29794>>>>>>>    Procedure AssignMDIMenu
29796>>>>>>>        Handle hoMain hoParent
29796>>>>>>>        Boolean bIsMdi
29796>>>>>>>        Get parent to hoParent
29797>>>>>>>        Get Main_Panel_Id to hoMain
29798>>>>>>>        Move (hoMain and hoMain=hoParent and  MDI_State(hoMain)) to bIsMdi
29799>>>>>>>        Set pbMDIMenu to bIsMdi
29800>>>>>>>        If bIsMdi Begin
29802>>>>>>>            Set phoCommandBars of hoMain to Self
29803>>>>>>>            Move Self to ghoCommandBars
29804>>>>>>>        End
29804>>>>>>>>
29804>>>>>>>    End_Procedure
29805>>>>>>>    
29805>>>>>>>    Function IsMDIMenu Returns Boolean
29807>>>>>>>        Boolean bMDI
29807>>>>>>>        Get pbMDIMenu to bMDI
29808>>>>>>>        Function_Return bMDI
29809>>>>>>>    End_Function
29810>>>>>>>    
29810>>>>>>>    // returns the ClientArea DF object if this is an MDI style system.
29810>>>>>>>    Function ClientAreaObject Returns Handle
29812>>>>>>>        Boolean bMDI
29812>>>>>>>        Handle hoClientArea
29812>>>>>>>        Get IsMDIMenu to bMDI
29813>>>>>>>        If (bMDI) Begin
29815>>>>>>>            Get Client_Id of (Parent(Self)) to hoClientArea
29816>>>>>>>        End
29816>>>>>>>>
29816>>>>>>>        Function_Return hoClientArea
29817>>>>>>>    End_Function
29818>>>>>>>    
29818>>>>>>>    // Generic Get and Set property that is used to get and set a DF/COM options property.
29818>>>>>>>    // can be used by any integer or boolean property
29818>>>>>>>    
29818>>>>>>>    Procedure SetComOptionsProperty Handle hmPrivateProperty Handle hmCOMProperty Integer iValue
29820>>>>>>>        Handle hoOptions
29820>>>>>>>        Set hmPrivateProperty to iValue
29821>>>>>>>        If (IsComObjectCreated(Self)) Begin
29823>>>>>>>            Get OptionsObject to hoOptions
29824>>>>>>>            Set hmCOMProperty of hoOptions to iValue
29825>>>>>>>        End
29825>>>>>>>>
29825>>>>>>>    End_Procedure
29826>>>>>>>    
29826>>>>>>>    Function GetComOptionsProperty Handle hmPrivateProperty Handle hmCOMProperty Returns Integer
29828>>>>>>>        Handle hoOptions
29828>>>>>>>        Integer iValue
29828>>>>>>>        If (IsComObjectCreated(Self)) Begin
29830>>>>>>>            Get OptionsObject to hoOptions
29831>>>>>>>            Get hmCOMProperty of hoOptions to iValue
29832>>>>>>>        End
29832>>>>>>>>
29832>>>>>>>        Else Begin
29833>>>>>>>            Get hmPrivateProperty to iValue
29834>>>>>>>        End
29834>>>>>>>>
29834>>>>>>>        Function_Return iValue
29835>>>>>>>    End_Function
29836>>>>>>>    
29836>>>>>>>    // You can call this to handle whatever Theme or Custom theme you have. This is
29836>>>>>>>    // called by Set peVisualTheme
29836>>>>>>>    Procedure ApplyVisualTheme Integer eTheme String sDll String sIni
29838>>>>>>>        Boolean bOk
29838>>>>>>>        Integer iOldAuto
29838>>>>>>>        If (sDll<>"") Begin
29840>>>>>>>            Get LoadResourceImagesFromFile sDll sIni to bOk
29841>>>>>>>            If (not(bOk)) Begin
29843>>>>>>>                Error DFERR_PROGRAM (SFormat("Cannot load Theme resource file %1 %2",sDll,sIni))
29844>>>>>>>>
29844>>>>>>>            End
29844>>>>>>>>
29844>>>>>>>        End
29844>>>>>>>>
29844>>>>>>>        Get pbAutoResizeIcons to iOldAuto
29845>>>>>>>        Set ComVisualTheme to eTheme
29846>>>>>>>        Set pbAutoResizeIcons to iOldAuto
29847>>>>>>>    End_Procedure
29848>>>>>>>    
29848>>>>>>>    
29848>>>>>>>    // This converts our themes to themes that can be used by Codejock and its system
29848>>>>>>>    // of using dlls and inis for some themes. This will change over time and can be
29848>>>>>>>    // augmented for custom values
29848>>>>>>>    Procedure VisualThemeParams Integer ByRef eTheme String ByRef sDll String ByRef sIni
29850>>>>>>>        Case Begin
29850>>>>>>>            Case (eTheme=xtpThemeNativeWindows10)
29852>>>>>>>                Move "Windows10.dll" to sDll
29853>>>>>>>                Move "Windows10Light.ini" to sIni
29854>>>>>>>                Move xtpThemeResource to eTheme
29855>>>>>>>                Case Break
29856>>>>>>>            Case (eTheme=xtpThemeWindows10Dark)
29859>>>>>>>                Move "Windows10.dll" to sDll
29860>>>>>>>                Move "Windows10Dark.ini" to sIni
29861>>>>>>>                Move xtpThemeResource to eTheme
29862>>>>>>>                Case Break
29863>>>>>>>            Case (eTheme=xtpThemeOffice2007)
29866>>>>>>>            Case (eTheme=xtpThemeResource)
29869>>>>>>>            Case (eTheme=xtpThemeOffice2007Blue)
29872>>>>>>>                Move "Office2007.dll" to sDll
29873>>>>>>>                Move "Office2007Blue.ini" to sIni
29874>>>>>>>                Move xtpThemeResource to eTheme
29875>>>>>>>                Case Break
29876>>>>>>>            Case (eTheme=xtpThemeOffice2007Aqua)
29879>>>>>>>                Move "Office2007.dll" to sDll
29880>>>>>>>                Move "Office2007Aqua.ini" to sIni
29881>>>>>>>                Move xtpThemeResource to eTheme
29882>>>>>>>                Case Break
29883>>>>>>>            Case (eTheme=xtpThemeOffice2007Black)
29886>>>>>>>                Move "Office2007.dll" to sDll
29887>>>>>>>                Move "Office2007Black.ini" to sIni
29888>>>>>>>                Move xtpThemeResource to eTheme
29889>>>>>>>                Case Break
29890>>>>>>>            Case (eTheme=xtpThemeOffice2007Silver)
29893>>>>>>>                Move "Office2007.dll" to sDll
29894>>>>>>>                Move "Office2007Silver.ini" to sIni
29895>>>>>>>                Move xtpThemeResource to eTheme
29896>>>>>>>                Case Break
29897>>>>>>>            
29897>>>>>>>            Case (eTheme=xtpThemeOffice2010Blue)
29900>>>>>>>            Case (eTheme=xtpThemeOffice2010)
29903>>>>>>>                Move "Office2010.dll" to sDll
29904>>>>>>>                Move "Office2010Blue.ini" to sIni
29905>>>>>>>                Move xtpThemeResource to eTheme
29906>>>>>>>                Case Break
29907>>>>>>>            Case (eTheme=xtpThemeOffice2010Black)
29910>>>>>>>                Move "Office2010.dll" to sDll
29911>>>>>>>                Move "Office2010Black.ini" to sIni
29912>>>>>>>                Move xtpThemeResource to eTheme
29913>>>>>>>                Case Break
29914>>>>>>>            Case (eTheme=xtpThemeOffice2010Silver)
29917>>>>>>>                Move "Office2010.dll" to sDll
29918>>>>>>>                Move "Office2010Silver.ini" to sIni
29919>>>>>>>                Move xtpThemeResource to eTheme
29920>>>>>>>                Case Break
29921>>>>>>>            
29921>>>>>>>            Case (eTheme=xtpThemeOffice2013)
29924>>>>>>>            Case (eTheme=xtpThemeOffice2013Word)
29927>>>>>>>                Move "Office2013.dll" to sDll
29928>>>>>>>                Move "Office2013Word.ini" to sIni
29929>>>>>>>                Move xtpThemeOffice2013 to eTheme
29930>>>>>>>                Case Break
29931>>>>>>>            Case (eTheme=xtpThemeOffice2013Excel)
29934>>>>>>>                Move "Office2013.dll" to sDll
29935>>>>>>>                Move "Office2013Excel.ini" to sIni
29936>>>>>>>                Move xtpThemeOffice2013 to eTheme
29937>>>>>>>                Case Break
29938>>>>>>>            Case (eTheme=xtpThemeOffice2013PowerPoint)
29941>>>>>>>                Move "Office2013.dll" to sDll
29942>>>>>>>                Move "Office2013PowerPoint.ini" to sIni
29943>>>>>>>                Move xtpThemeOffice2013 to eTheme
29944>>>>>>>                Case Break
29945>>>>>>>            Case (eTheme=xtpThemeOffice2013OutLook)
29948>>>>>>>                Move "Office2013.dll" to sDll
29949>>>>>>>                Move "Office2013OutLook.ini" to sIni
29950>>>>>>>                Move xtpThemeOffice2013 to eTheme
29951>>>>>>>                Case Break
29952>>>>>>>            Case (eTheme=xtpThemeOffice2013Publisher)
29955>>>>>>>                Move "Office2013.dll" to sDll
29956>>>>>>>                Move "Office2013Publisher.ini" to sIni
29957>>>>>>>                Move xtpThemeOffice2013 to eTheme
29958>>>>>>>                Case Break
29959>>>>>>>            Case (eTheme=xtpThemeOffice2013Access)
29962>>>>>>>                Move "Office2013.dll" to sDll
29963>>>>>>>                Move "Office2013Access.ini" to sIni
29964>>>>>>>                Move xtpThemeOffice2013 to eTheme
29965>>>>>>>                Case Break
29966>>>>>>>            Case (eTheme=xtpThemeOffice2013OneNote)
29969>>>>>>>                Move "Office2013.dll" to sDll
29970>>>>>>>                Move "Office2013OneNote.ini" to sIni
29971>>>>>>>                Move xtpThemeOffice2013 to eTheme
29972>>>>>>>                Case Break
29973>>>>>>>                
29973>>>>>>>            Case (eTheme=xtpThemeOffice2016Access)
29976>>>>>>>                Move "Office2016.dll" to sDll
29977>>>>>>>                Move "Office2016AccessWhite.ini" to sIni
29978>>>>>>>                Move xtpThemeOffice2013 to eTheme
29979>>>>>>>                Case Break
29980>>>>>>>            Case (eTheme=xtpThemeOffice2016Excel)
29983>>>>>>>                Move "Office2016.dll" to sDll
29984>>>>>>>                Move "Office2016ExcelWhite.ini" to sIni
29985>>>>>>>                Move xtpThemeOffice2013 to eTheme
29986>>>>>>>                Case Break
29987>>>>>>>            Case (eTheme=xtpThemeOffice2016OneNote)
29990>>>>>>>                Move "Office2016.dll" to sDll
29991>>>>>>>                Move "Office2016OneNoteWhite.ini" to sIni
29992>>>>>>>                Move xtpThemeOffice2013 to eTheme
29993>>>>>>>                Case Break
29994>>>>>>>            Case (eTheme=xtpThemeOffice2016Outlook)
29997>>>>>>>                Move "Office2016.dll" to sDll
29998>>>>>>>                Move "Office2016OutlookWhite.ini" to sIni
29999>>>>>>>                Move xtpThemeOffice2013 to eTheme
30000>>>>>>>                Case Break
30001>>>>>>>            Case (eTheme=xtpThemeOffice2016Publisher)
30004>>>>>>>                Move "Office2016.dll" to sDll
30005>>>>>>>                Move "Office2016PublisherWhite.ini" to sIni
30006>>>>>>>                Move xtpThemeOffice2013 to eTheme
30007>>>>>>>                Case Break
30008>>>>>>>            Case (eTheme=xtpThemeOffice2016PowerPoint)
30011>>>>>>>                Move "Office2016.dll" to sDll
30012>>>>>>>                Move "Office2016PowerPointWhite.ini" to sIni
30013>>>>>>>                Move xtpThemeOffice2013 to eTheme
30014>>>>>>>                Case Break
30015>>>>>>>            Case (eTheme=xtpThemeOffice2016Word)
30018>>>>>>>                Move "Office2016.dll" to sDll
30019>>>>>>>                Move "Office2016WordWhite.ini" to sIni
30020>>>>>>>                Move xtpThemeOffice2013 to eTheme
30021>>>>>>>                Case Break
30022>>>>>>>            
30022>>>>>>>            Case (eTheme=xtpThemeWindows7)
30025>>>>>>>                Move "Windows7.dll" to sDll
30026>>>>>>>                Move "Windows7Blue.ini" to sIni
30027>>>>>>>                Move xtpThemeResource to eTheme
30028>>>>>>>                Case Break
30029>>>>>>>            
30029>>>>>>>            Case (eTheme=xtpThemeVisualStudio2012)
30032>>>>>>>            Case (eTheme=xtpThemeVisualStudio2012Light)
30035>>>>>>>                Move "VisualStudio2012.dll" to sDll
30036>>>>>>>                Move "VisualStudio2012Light.ini" to sIni
30037>>>>>>>                Move xtpThemeVisualStudio2012 to eTheme
30038>>>>>>>                Case Break
30039>>>>>>>            Case (eTheme=xtpThemeVisualStudio2012Dark)
30042>>>>>>>                Move "VisualStudio2012.dll" to sDll
30043>>>>>>>                Move "VisualStudio2012Dark.ini" to sIni
30044>>>>>>>                Move xtpThemeVisualStudio2012Dark to eTheme
30045>>>>>>>                Case Break
30046>>>>>>>            
30046>>>>>>>            Case (eTheme=xtpThemeVisualStudio2015)
30049>>>>>>>            Case (eTheme=xtpThemeVisualStudio2015Blue)
30052>>>>>>>                Move "VisualStudio2015.dll" to sDll
30053>>>>>>>                Move "VisualStudio2015Blue.ini" to sIni
30054>>>>>>>                Move xtpThemeVisualStudio2015 to eTheme
30055>>>>>>>                Case Break
30056>>>>>>>            Case (eTheme=xtpThemeVisualStudio2015Light)
30059>>>>>>>                Move "VisualStudio2015.dll" to sDll
30060>>>>>>>                Move "VisualStudio2015Light.ini" to sIni
30061>>>>>>>                Move xtpThemeVisualStudio2015 to eTheme
30062>>>>>>>                Case Break
30063>>>>>>>            Case (eTheme=xtpThemeVisualStudio2015Dark)
30066>>>>>>>                Move "VisualStudio2015.dll" to sDll
30067>>>>>>>                Move "VisualStudio2015Dark.ini" to sIni
30068>>>>>>>                Move xtpThemeVisualStudio2015Dark to eTheme
30069>>>>>>>                Case Break
30070>>>>>>>
30070>>>>>>>            Case (eTheme=xtpThemeVisualStudio2017)
30073>>>>>>>            Case (eTheme=xtpThemeVisualStudio2017Blue)
30076>>>>>>>                Move "VisualStudio2017.dll" to sDll
30077>>>>>>>                Move "VisualStudio2017Blue.ini" to sIni
30078>>>>>>>                Move xtpThemeVisualStudio2017 to eTheme
30079>>>>>>>                Case Break
30080>>>>>>>            Case (eTheme=xtpThemeVisualStudio2017Light)
30083>>>>>>>                Move "VisualStudio2017.dll" to sDll
30084>>>>>>>                Move "VisualStudio2017Light.ini" to sIni
30085>>>>>>>                Move xtpThemeVisualStudio2017 to eTheme
30086>>>>>>>                Case Break
30087>>>>>>>            Case (eTheme=xtpThemeVisualStudio2017Dark)
30090>>>>>>>                Move "VisualStudio2017.dll" to sDll
30091>>>>>>>                Move "VisualStudio2017Dark.ini" to sIni
30092>>>>>>>                Move xtpThemeVisualStudio2017 to eTheme
30093>>>>>>>                Case Break
30094>>>>>>>                
30094>>>>>>>            Case (eTheme=xtpThemeVisualStudio2019)
30097>>>>>>>            Case (eTheme=xtpThemeVisualStudio2019Blue)
30100>>>>>>>                Move "VisualStudio2019.dll" to sDll
30101>>>>>>>                Move "VisualStudio2019Blue.ini" to sIni
30102>>>>>>>                Move xtpThemeVisualStudio2019 to eTheme
30103>>>>>>>                Case Break
30104>>>>>>>            Case (eTheme=xtpThemeVisualStudio2019BlueExtra)
30107>>>>>>>                Move "VisualStudio2019.dll" to sDll
30108>>>>>>>                Move "VisualStudio2019BlueExtra.ini" to sIni
30109>>>>>>>                Move xtpThemeVisualStudio2019BlueExtra to eTheme
30110>>>>>>>                Case Break
30111>>>>>>>            Case (eTheme=xtpThemeVisualStudio2019Light)
30114>>>>>>>                Move "VisualStudio2019.dll" to sDll
30115>>>>>>>                Move "VisualStudio2019Light.ini" to sIni
30116>>>>>>>                Move xtpThemeVisualStudio2019 to eTheme
30117>>>>>>>                Case Break
30118>>>>>>>            Case (eTheme=xtpThemeVisualStudio2019Dark)
30121>>>>>>>                Move "VisualStudio2019.dll" to sDll
30122>>>>>>>                Move "VisualStudio2019Dark.ini" to sIni
30123>>>>>>>                Move xtpThemeVisualStudio2019Dark to eTheme
30124>>>>>>>                Case Break
30125>>>>>>>                
30125>>>>>>>            Case (eTheme=xtpThemeVisualStudio2022)
30128>>>>>>>            Case (eTheme=xtpThemeVisualStudio2022Blue)
30131>>>>>>>                Move "VisualStudio2022.dll" to sDll
30132>>>>>>>                Move "VisualStudio2022Blue.ini" to sIni
30133>>>>>>>                Move xtpThemeVisualStudio2022 to eTheme
30134>>>>>>>                Case Break
30135>>>>>>>            Case (eTheme=xtpThemeVisualStudio2022BlueExtra)
30138>>>>>>>                Move "VisualStudio2022.dll" to sDll
30139>>>>>>>                Move "VisualStudio2022BlueExtra.ini" to sIni
30140>>>>>>>                Move xtpThemeVisualStudio2022BlueExtra to eTheme
30141>>>>>>>                Case Break
30142>>>>>>>            Case (eTheme=xtpThemeVisualStudio2022Light)
30145>>>>>>>                Move "VisualStudio2022.dll" to sDll
30146>>>>>>>                Move "VisualStudio2022Light.ini" to sIni
30147>>>>>>>                Move xtpThemeVisualStudio2022 to eTheme
30148>>>>>>>                Case Break
30149>>>>>>>            Case (eTheme=xtpThemeVisualStudio2022Dark)
30152>>>>>>>                Move "VisualStudio2022.dll" to sDll
30153>>>>>>>                Move "VisualStudio2022Dark.ini" to sIni
30154>>>>>>>                Move xtpThemeVisualStudio2022Dark to eTheme
30155>>>>>>>                Case Break
30156>>>>>>>            Case Else
30156>>>>>>>                Move "" to sDll
30157>>>>>>>                Move "" to sIni
30158>>>>>>>        Case End
30158>>>>>>>    End_Procedure
30159>>>>>>>    
30159>>>>>>>    
30159>>>>>>>    Procedure Set peVisualTheme Integer eValue
30161>>>>>>>        String sDll sIni
30161>>>>>>>        Integer iOldAuto
30161>>>>>>>        Set pePrivateVisualTheme to eValue
30162>>>>>>>        If (IsComObjectCreated(Self)) Begin
30164>>>>>>>            Send VisualThemeParams (&eValue) (&sDll) (&sIni)
30165>>>>>>>            Send ApplyVisualTheme eValue sDll sIni
30166>>>>>>>        End
30166>>>>>>>>
30166>>>>>>>    End_Procedure
30167>>>>>>>    
30167>>>>>>>    Function peVisualTheme Returns Integer
30169>>>>>>>        Integer eValue
30169>>>>>>>        // always returns our version of the theme because we have custom values
30169>>>>>>>        // If you need the actual theme use ComVisualTheme
30169>>>>>>>        Get pePrivateVisualTheme to eValue
30170>>>>>>>        Function_Return eValue
30171>>>>>>>    End_Function
30172>>>>>>>    
30172>>>>>>>    Procedure Set pbEnableCustomization Boolean bValue
30174>>>>>>>        Set pbPrivateEnableCustomization to bValue
30175>>>>>>>        If (IsComObjectCreated(Self)) Begin
30177>>>>>>>            Send ComEnableCustomization bValue
30178>>>>>>>        End
30178>>>>>>>>
30178>>>>>>>    End_Procedure
30179>>>>>>>    
30179>>>>>>>    Function pbEnableCustomization Returns Boolean
30181>>>>>>>        Boolean bValue
30181>>>>>>>        Get pbPrivateEnableCustomization to bValue
30182>>>>>>>        Function_Return bValue
30183>>>>>>>    End_Function
30184>>>>>>>    
30184>>>>>>>    
30184>>>>>>>    // these are set in the cCJCommandBars's Option object
30184>>>>>>>    
30184>>>>>>>    Procedure Set peAnimation Integer eValue
30186>>>>>>>        Send SetComOptionsProperty set_pePrivateAnimation set_ComAnimation eValue
30187>>>>>>>    End_Procedure
30188>>>>>>>    
30188>>>>>>>    Function peAnimation Returns Integer
30190>>>>>>>        Integer eValue
30190>>>>>>>        Get GetComOptionsProperty get_pePrivateAnimation get_ComAnimation to eValue
30191>>>>>>>        Function_Return eValue
30192>>>>>>>    End_Function
30193>>>>>>>    
30193>>>>>>>    
30193>>>>>>>    Procedure Set pbAlwaysShowFullMenus Boolean bValue
30195>>>>>>>        Send SetComOptionsProperty set_pbPrivateAlwaysShowFullMenus set_ComAlwaysShowFullMenus bValue
30196>>>>>>>    End_Procedure
30197>>>>>>>    
30197>>>>>>>    Function pbAlwaysShowFullMenus Returns Boolean
30199>>>>>>>        Boolean bValue
30199>>>>>>>        Get GetComOptionsProperty get_pbPrivateAlwaysShowFullMenus get_ComAlwaysShowFullMenus to bValue
30200>>>>>>>        Function_Return bValue
30201>>>>>>>    End_Function
30202>>>>>>>    
30202>>>>>>>    Procedure Set pbShowFullAfterDelay Boolean bValue
30204>>>>>>>        Send SetComOptionsProperty set_pbPrivateShowFullAfterDelay set_ComShowFullAfterDelay bValue
30205>>>>>>>    End_Procedure
30206>>>>>>>    
30206>>>>>>>    Function pbShowFullAfterDelay Returns Boolean
30208>>>>>>>        Boolean bValue
30208>>>>>>>        Get GetComOptionsProperty get_pbPrivateShowFullAfterDelay get_ComShowFullAfterDelay to bValue
30209>>>>>>>        Function_Return bValue
30210>>>>>>>    End_Function
30211>>>>>>>    
30211>>>>>>>    Procedure Set pbAutoHideUnusedPopups Boolean bValue
30213>>>>>>>        Send SetComOptionsProperty set_pbPrivateAutoHideUnusedPopups set_ComAutoHideUnusedPopups bValue
30214>>>>>>>    End_Procedure
30215>>>>>>>    
30215>>>>>>>    Function pbAutoHideUnusedPopups Returns Boolean
30217>>>>>>>        Boolean bValue
30217>>>>>>>        Get GetComOptionsProperty get_pbPrivateAutoHideUnusedPopups get_ComAutoHideUnusedPopups to bValue
30218>>>>>>>        Function_Return bValue
30219>>>>>>>    End_Function
30220>>>>>>>    
30220>>>>>>>    Procedure Set pbToolBarScreenTips Boolean bValue
30222>>>>>>>        Send SetComOptionsProperty set_pbPrivateToolBarScreenTips set_ComToolBarScreenTips bValue
30223>>>>>>>    End_Procedure
30224>>>>>>>    
30224>>>>>>>    Function pbToolBarScreenTips Returns Boolean
30226>>>>>>>        Boolean bValue
30226>>>>>>>        Get GetComOptionsProperty get_pbPrivateToolBarScreenTips get_ComToolBarScreenTips to bValue
30227>>>>>>>        Function_Return bValue
30228>>>>>>>    End_Function
30229>>>>>>>    
30229>>>>>>>    Procedure Set pbShowPopupBarToolTips Boolean bValue
30231>>>>>>>        Send SetComOptionsProperty set_pbPrivateShowPopupBarToolTips set_ComShowPopupBarToolTips bValue
30232>>>>>>>    End_Procedure
30233>>>>>>>    
30233>>>>>>>    Function pbShowPopupBarToolTips Returns Boolean
30235>>>>>>>        Boolean bValue
30235>>>>>>>        Get GetComOptionsProperty get_pbPrivateShowPopupBarToolTips get_ComShowPopupBarToolTips to bValue
30236>>>>>>>        Function_Return bValue
30237>>>>>>>    End_Function
30238>>>>>>>    
30238>>>>>>>    Procedure Set pbToolBarAccelTips Boolean bValue
30240>>>>>>>        Send SetComOptionsProperty set_pbPrivateToolBarAccelTips set_ComToolBarAccelTips bValue
30241>>>>>>>    End_Procedure
30242>>>>>>>    
30242>>>>>>>    Function pbToolBarAccelTips Returns Boolean
30244>>>>>>>        Boolean bValue
30244>>>>>>>        Get GetComOptionsProperty get_pbPrivateToolBarAccelTips get_ComToolBarAccelTips to bValue
30245>>>>>>>        Function_Return bValue
30246>>>>>>>    End_Function
30247>>>>>>>    
30247>>>>>>>    Procedure Set pbShowExpandButtonAlways Boolean bValue
30249>>>>>>>        Send SetComOptionsProperty set_pbPrivateShowExpandButtonAlways set_ComShowExpandButtonAlways bValue
30250>>>>>>>    End_Procedure
30251>>>>>>>    
30251>>>>>>>    Function pbShowExpandButtonAlways Returns Boolean
30253>>>>>>>        Boolean bValue
30253>>>>>>>        Get GetComOptionsProperty get_pbPrivateShowExpandButtonAlways get_ComShowExpandButtonAlways to bValue
30254>>>>>>>        Function_Return bValue
30255>>>>>>>    End_Function
30256>>>>>>>    
30256>>>>>>>    Procedure Set pbLargeIcons Boolean bValue
30258>>>>>>>        Send SetComOptionsProperty set_pbPrivateLargeIcons set_ComLargeIcons bValue
30259>>>>>>>    End_Procedure
30260>>>>>>>    
30260>>>>>>>    Function pbLargeIcons Returns Boolean
30262>>>>>>>        Boolean bValue
30262>>>>>>>        Get GetComOptionsProperty get_pbPrivateLargeIcons get_ComLargeIcons to bValue
30263>>>>>>>        Function_Return bValue
30264>>>>>>>    End_Function
30265>>>>>>>    
30265>>>>>>>    Procedure Set pbSyncFloatingToolbars Boolean bValue
30267>>>>>>>        Send SetComOptionsProperty set_pbPrivateSyncFloatingToolbars set_ComSyncFloatingToolbars bValue
30268>>>>>>>    End_Procedure
30269>>>>>>>    
30269>>>>>>>    Function pbSyncFloatingToolbars Returns Boolean
30271>>>>>>>        Boolean bValue
30271>>>>>>>        Get GetComOptionsProperty get_pbPrivateSyncFloatingToolbars get_ComSyncFloatingToolbars to bValue
30272>>>>>>>        Function_Return bValue
30273>>>>>>>    End_Function
30274>>>>>>>    
30274>>>>>>>    Procedure Set pbFloatToolbarsByDoubleClick Boolean bValue
30276>>>>>>>        Send SetComOptionsProperty set_pbPrivateFloatToolbarsByDoubleClick set_ComFloatToolbarsByDoubleClick bValue
30277>>>>>>>    End_Procedure
30278>>>>>>>    
30278>>>>>>>    Function pbFloatToolbarsByDoubleClick Returns Boolean
30280>>>>>>>        Boolean bValue
30280>>>>>>>        Get GetComOptionsProperty get_pbPrivateFloatToolbarsByDoubleClick get_ComFloatToolbarsByDoubleClick to bValue
30281>>>>>>>        Function_Return bValue
30282>>>>>>>    End_Function
30283>>>>>>>    
30283>>>>>>>    Procedure Set pbShowTextBelowIcons Boolean bValue
30285>>>>>>>        Send SetComOptionsProperty set_pbPrivateShowTextBelowIcons set_ComShowTextBelowIcons bValue
30286>>>>>>>    End_Procedure
30287>>>>>>>    
30287>>>>>>>    Function pbShowTextBelowIcons Returns Boolean
30289>>>>>>>        Boolean bValue
30289>>>>>>>        Get GetComOptionsProperty get_pbPrivateShowTextBelowIcons get_ComShowTextBelowIcons to bValue
30290>>>>>>>        Function_Return bValue
30291>>>>>>>    End_Function
30292>>>>>>>    
30292>>>>>>>    Procedure Set pbAltDragCustomization Boolean bValue
30294>>>>>>>        Send SetComOptionsProperty set_pbPrivateAltDragCustomization set_ComAltDragCustomization bValue
30295>>>>>>>    End_Procedure
30296>>>>>>>    
30296>>>>>>>    Function pbAltDragCustomization Returns Boolean
30298>>>>>>>        Boolean bValue
30298>>>>>>>        Get GetComOptionsProperty get_pbPrivateAltDragCustomization get_ComAltDragCustomization to bValue
30299>>>>>>>        Function_Return bValue
30300>>>>>>>    End_Function
30301>>>>>>>    
30301>>>>>>>    Procedure Set pbOfficeStyleDisabledIcons Boolean bValue
30303>>>>>>>        Send SetComOptionsProperty set_pbPrivateOfficeStyleDisabledIcons set_ComOfficeStyleDisabledIcons bValue
30304>>>>>>>    End_Procedure
30305>>>>>>>    
30305>>>>>>>    Function pbOfficeStyleDisabledIcons Returns Boolean
30307>>>>>>>        Boolean bValue
30307>>>>>>>        Get GetComOptionsProperty get_pbPrivateOfficeStyleDisabledIcons get_ComOfficeStyleDisabledIcons to bValue
30308>>>>>>>        Function_Return bValue
30309>>>>>>>    End_Function
30310>>>>>>>    
30310>>>>>>>    Procedure Set pbIconsWithShadow Boolean bValue
30312>>>>>>>        Send SetComOptionsProperty set_pbPrivateIconsWithShadow set_ComIconsWithShadow bValue
30313>>>>>>>    End_Procedure
30314>>>>>>>    
30314>>>>>>>    Function pbIconsWithShadow Returns Boolean
30316>>>>>>>        Boolean bValue
30316>>>>>>>        Get GetComOptionsProperty get_pbPrivateIconsWithShadow get_ComIconsWithShadow to bValue
30317>>>>>>>        Function_Return bValue
30318>>>>>>>    End_Function
30319>>>>>>>    
30319>>>>>>>    Procedure Set pbTimerUpdate Boolean bValue
30321>>>>>>>        Handle hoTimer
30321>>>>>>>        Set pbPrivateTimerUpdate to bValue
30322>>>>>>>        If (IsComObjectCreated(Self)) Begin
30324>>>>>>>            Get phoTimer to hoTimer
30325>>>>>>>            Set pbEnabled of hoTimer to bValue
30326>>>>>>>        End
30326>>>>>>>>
30326>>>>>>>    End_Procedure
30327>>>>>>>    
30327>>>>>>>    Function pbTimerUpdate Returns Boolean
30329>>>>>>>        Boolean bValue
30329>>>>>>>        Get pbPrivateTimerUpdate to bValue
30330>>>>>>>        Function_Return bValue
30331>>>>>>>    End_Function
30332>>>>>>>    
30332>>>>>>>    
30332>>>>>>>    Procedure Set pbAutoResizeIcons Boolean bValue
30334>>>>>>>        Handle hoPaint
30334>>>>>>>        Variant vPaint
30334>>>>>>>        
30334>>>>>>>        Set pbPrivateAutoResizeIcons to bValue
30335>>>>>>>        If (IsComObjectCreated(Self)) Begin
30337>>>>>>>            Get Create (RefClass(cCJPaintManager)) to hoPaint
30338>>>>>>>            Get ComPaintManager to vPaint
30339>>>>>>>            Set pvComObject of hoPaint to vPaint
30340>>>>>>>            Set ComAutoResizeIcons of hoPaint to bValue
30341>>>>>>>            Send Destroy of hoPaint
30342>>>>>>>        End
30342>>>>>>>>
30342>>>>>>>    End_Procedure
30343>>>>>>>    
30343>>>>>>>    Function pbAutoResizeIcons Returns Boolean
30345>>>>>>>        Boolean bValue
30345>>>>>>>        Get pbPrivateAutoResizeIcons to bValue
30346>>>>>>>        Function_Return bValue
30347>>>>>>>    End_Function
30348>>>>>>>    
30348>>>>>>>    
30348>>>>>>>    // returns the CommandBars object handle, which is this object. All menu objects
30348>>>>>>>    // within a command bar will get this via delegation. The exception is context menus (and
30348>>>>>>>    // children of context menus) which uses the global commandbars variable instead.
30348>>>>>>>    Function CommandBarSystemObject Returns Handle
30350>>>>>>>        Function_Return Self
30351>>>>>>>    End_Function
30352>>>>>>>    
30352>>>>>>>    // these are here to make life easier. These return a df-object attached to
30352>>>>>>>    // the following collecions and child objects. These are used enough that
30352>>>>>>>    // an easy access to them was provided.
30352>>>>>>>    
30352>>>>>>>    Function ActionsCollection Returns Handle
30354>>>>>>>        Handle hoPrivate
30354>>>>>>>        Variant vCom
30354>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30356>>>>>>>            Function_Return 0
30357>>>>>>>        End
30357>>>>>>>>
30357>>>>>>>        
30357>>>>>>>        Get phoPrivateActions to hoPrivate
30358>>>>>>>        Get ComActions of hoPrivate to vCom
30359>>>>>>>        Set pvComObject of hoPrivate to vCom
30360>>>>>>>        Function_Return hoPrivate
30361>>>>>>>    End_Function
30362>>>>>>>    
30362>>>>>>>    Function DesignerControlsCollection Returns Handle
30364>>>>>>>        Handle hoPrivate
30364>>>>>>>        Variant vCom
30364>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30366>>>>>>>            Function_Return 0
30367>>>>>>>        End
30367>>>>>>>>
30367>>>>>>>        
30367>>>>>>>        Get phoPrivateDesignerControls to hoPrivate
30368>>>>>>>        Get ComDesignerControls to vCom
30369>>>>>>>        Set pvComObject of hoPrivate to vCom
30370>>>>>>>        Function_Return hoPrivate
30371>>>>>>>    End_Function
30372>>>>>>>    
30372>>>>>>>    Function KeyBindingsCollection Returns Handle
30374>>>>>>>        Handle hoPrivate
30374>>>>>>>        Variant vCom
30374>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30376>>>>>>>            Function_Return 0
30377>>>>>>>        End
30377>>>>>>>>
30377>>>>>>>        
30377>>>>>>>        Get phoPrivateKeyBindings to hoPrivate
30378>>>>>>>        Get ComKeyBindings to vCom
30379>>>>>>>        Set pvComObject of hoPrivate to vCom
30380>>>>>>>        Function_Return hoPrivate
30381>>>>>>>    End_Function
30382>>>>>>>    
30382>>>>>>>    Function OptionsObject Returns Handle
30384>>>>>>>        Handle hoPrivate
30384>>>>>>>        Variant vCom
30384>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30386>>>>>>>            Function_Return 0
30387>>>>>>>        End
30387>>>>>>>>
30387>>>>>>>        
30387>>>>>>>        Get phoPrivateOptions to hoPrivate
30388>>>>>>>        Get ComOptions to vCom
30389>>>>>>>        Set pvComObject of hoPrivate to vCom
30390>>>>>>>        Function_Return hoPrivate
30391>>>>>>>    End_Function
30392>>>>>>>    
30392>>>>>>>    
30392>>>>>>>    // when a commandbars is deactivated, this is called.
30392>>>>>>>    // save layout as needed
30392>>>>>>>    // release all of the action objects in the various arrays
30392>>>>>>>    // make sure that all DF objects are released.
30392>>>>>>>    // One oddity is that at this point the object is deactivated and this causes the
30392>>>>>>>    // statubar's visibleState to always be false. We correct for this in the statusbar's pbVisible
30392>>>>>>>    Procedure ReleaseComObject
30394>>>>>>>        Handle[] hoObjects hoEmpty
30396>>>>>>>        Handle hoTimer hoObj
30396>>>>>>>        Integer i iCount
30396>>>>>>>        Variant vTab
30396>>>>>>>        
30396>>>>>>>        Get phoTimer to hoTimer
30397>>>>>>>        Set pbEnabled of hoTimer to False
30398>>>>>>>        
30398>>>>>>>        Send SaveEnvironment // save layout if needed
30399>>>>>>>        
30399>>>>>>>        // clear the active updates array
30399>>>>>>>        Set phoActiveUpdates to hoEmpty
30400>>>>>>>        
30400>>>>>>>        // release all actions attached to DF objects. This will release actions
30400>>>>>>>        // in context menus
30400>>>>>>>        Get phoRegisteredActions to hoObjects
30401>>>>>>>        Move (SizeOfArray(hoObjects)) to iCount
30402>>>>>>>        For i from 0 to (iCount-1)
30408>>>>>>>>
30408>>>>>>>            // it's possible that we've got actions that have been already been destroyed during shut down (context menus)
30408>>>>>>>            Get Object_Id of hoObjects[i] to hoObj
30409>>>>>>>            If hoObj Begin
30411>>>>>>>                Send ReleaseComObject of hoObj
30412>>>>>>>            End
30412>>>>>>>>
30412>>>>>>>        Loop
30413>>>>>>>>
30413>>>>>>>        Set phoRegisteredActions to hoEmpty
30414>>>>>>>        
30414>>>>>>>        // this should not be needed, but it can't hurt.
30414>>>>>>>        Broadcast Recursive_up Send ReleaseComObject
30416>>>>>>>        Send OnRelease
30417>>>>>>>        Forward Send ReleaseComObject
30419>>>>>>>    End_Procedure
30420>>>>>>>    
30420>>>>>>>    Procedure OnCreateTabbedWorkspace Handle hoTabWorkspace Handle hoTabPaintManager
30422>>>>>>>    End_Procedure
30423>>>>>>>    
30423>>>>>>>    // This sets all of the commandbars properties and the options properties
30423>>>>>>>    Procedure CreateCommandBars
30425>>>>>>>        Handle hWND hoClient hoMain hoOptions hoImageManager hoCommandBar hoTimer hoPaint
30425>>>>>>>        Variant vToolbarObject vImageManager vPaint
30425>>>>>>>        Integer eVisualTheme eAnimation
30425>>>>>>>        Integer iLast
30425>>>>>>>        Boolean bMDIMEnu
30425>>>>>>>        Boolean bEnableCustomization bAltDragCustomization bLargeIcons bShowTextBelowIcons bAlwaysShowFullMenus bShowFullAfterDelay
30425>>>>>>>        Boolean bToolBarScreenTips bToolBarAccelTips bShowPopupBarToolTips bAutoHideUnusedPopups
30425>>>>>>>        Boolean bOfficeStyleDisabledIcons bFloatToolbarsByDoubleClick bSyncFloatingToolbars bShowExpandButtonAlways bIconsWithShadow
30425>>>>>>>        Boolean bTimer bAutoResizeIcons bTabbedWorkspaces
30425>>>>>>>        
30425>>>>>>>        Get pePrivateVisualTheme to eVisualTheme
30426>>>>>>>        Get pbPrivateEnableCustomization to bEnableCustomization
30427>>>>>>>        Get pbPrivateAltDragCustomization to bAltDragCustomization
30428>>>>>>>        Get pePrivateAnimation to eAnimation
30429>>>>>>>        Get pbPrivateLargeIcons to bLargeIcons
30430>>>>>>>        Get pbPrivateShowTextBelowIcons to bShowTextBelowIcons
30431>>>>>>>        Get pbPrivateAlwaysShowFullMenus to bAlwaysShowFullMenus
30432>>>>>>>        Get pbPrivateShowFullAfterDelay to bShowFullAfterDelay
30433>>>>>>>        Get pbPrivateToolBarScreenTips to bToolBarScreenTips
30434>>>>>>>        Get pbPrivateToolBarAccelTips to bToolBarAccelTips
30435>>>>>>>        Get pbPrivateShowPopupBarToolTips to bShowPopupBarToolTips
30436>>>>>>>        Get pbPrivateOfficeStyleDisabledIcons to bOfficeStyleDisabledIcons
30437>>>>>>>        Get pbPrivateIconsWithShadow to bIconsWithShadow
30438>>>>>>>        Get pbPrivateFloatToolbarsByDoubleClick to bFloatToolbarsByDoubleClick
30439>>>>>>>        Get pbPrivateSyncFloatingToolbars   to bSyncFloatingToolbars
30440>>>>>>>        Get pbPrivateShowExpandButtonAlways to bShowExpandButtonAlways
30441>>>>>>>        Get pbPrivateAutoHideUnusedPopups   to bAutoHideUnusedPopups
30442>>>>>>>        Get pbPrivateAutoResizeIcons        to bAutoResizeIcons
30443>>>>>>>        Get pbTabbedWorkspaces to bTabbedWorkspaces
30444>>>>>>>        
30444>>>>>>>        // attach to parent window. This should actually happen automatically
30444>>>>>>>        Get Parent to hoMain
30445>>>>>>>        Get Window_Handle of hoMain to hWND
30446>>>>>>>        Send ComAttachToWindow hWND
30447>>>>>>>        
30447>>>>>>>        // if an MDI menu, find and set the client area
30447>>>>>>>        Get pbMDIMenu to bMDIMenu
30448>>>>>>>        If bMDIMEnu Begin
30450>>>>>>>            Get ClientAreaObject to hoClient
30451>>>>>>>            If hoClient Begin
30453>>>>>>>                If not (Active_State(hoClient)) Begin
30455>>>>>>>                    Send Add_Focus of hoClient hoMain
30456>>>>>>>                End
30456>>>>>>>>
30456>>>>>>>                Get Window_Handle of hoClient to hWND
30457>>>>>>>                Send ComSetMDIClient hWND
30458>>>>>>>            End
30458>>>>>>>>
30458>>>>>>>        End
30458>>>>>>>>
30458>>>>>>>        
30458>>>>>>>        // make sure the first command bar is a main menu
30458>>>>>>>        Get Create U_cCJCommandBar to hoCommandBar
30459>>>>>>>        Get ComAddMenuBar "Main menu" to vToolbarObject
30460>>>>>>>        Set pvComObject of hoCommandBar to vToolbarObject
30461>>>>>>>        Set ComVisible of hoCommandBar to False
30462>>>>>>>        Send Destroy of hoCommandBar
30463>>>>>>>        
30463>>>>>>>        
30463>>>>>>>        // the following are set directly in the object
30463>>>>>>>        Set ComScaleMode to  xtpScalePixel
30464>>>>>>>        //Set ComVisualTheme to eVisualTheme
30464>>>>>>>        Set peVisualTheme to eVisualTheme
30465>>>>>>>        Send ComEnableCustomization bEnableCustomization
30466>>>>>>>        
30466>>>>>>>        // the following are set in the options object
30466>>>>>>>        Get OptionsObject to hoOptions
30467>>>>>>>        // event is completely disabled
30467>>>>>>>        //Set ComUpdatePeriod of hoOptions to 0 // we don't use this method, shut off the timer
30467>>>>>>>        Set ComAltDragCustomization of hoOptions to bAltDragCustomization
30468>>>>>>>        Set ComAnimation of hoOptions to eAnimation
30469>>>>>>>        Set ComLargeIcons of hoOptions to bLargeIcons
30470>>>>>>>        Set ComShowTextBelowIcons of hoOptions to bShowTextBelowIcons
30471>>>>>>>        Set ComShowFullAfterDelay of hoOptions to bShowFullAfterDelay
30472>>>>>>>        Set ComAlwaysShowFullMenus of hoOptions to bAlwaysShowFullMenus
30473>>>>>>>        Set ComToolBarAccelTips of hoOptions to  bToolBarAccelTips
30474>>>>>>>        Set ComToolBarScreenTips of hoOptions to bToolBarScreenTips
30475>>>>>>>        Set ComShowPopupBarToolTips of hoOptions to bShowPopupBarToolTips
30476>>>>>>>        Set ComOfficeStyleDisabledIcons of hoOptions to bOfficeStyleDisabledIcons
30477>>>>>>>        Set ComIconsWithShadow of hoOptions to bIconsWithShadow
30478>>>>>>>        Set ComFloatToolbarsByDoubleClick of hoOptions to bFloatToolbarsByDoubleClick
30479>>>>>>>        Set ComSyncFloatingToolbars of hoOptions to bSyncFloatingToolbars
30480>>>>>>>        Set ComShowExpandButtonAlways of hoOptions to bShowExpandButtonAlways
30481>>>>>>>        Get ComAutoHideUnusedPopups of hoOptions to bAutoHideUnusedPopups
30482>>>>>>>        
30482>>>>>>>        // the following are set in the paint object
30482>>>>>>>        Get Create (RefClass(cCJPaintManager)) to hoPaint
30483>>>>>>>        Get ComPaintManager to vPaint
30484>>>>>>>        Set pvComObject of hoPaint to vPaint
30485>>>>>>>        Set ComAutoResizeIcons of hoPaint to bAutoResizeIcons
30486>>>>>>>        Send Destroy of hoPaint
30487>>>>>>>        
30487>>>>>>>        Send ComEnableActions
30488>>>>>>>        
30488>>>>>>>        // We must explicitly create an image list collection and add it to the object
30488>>>>>>>        Get Create U_cCJImageManager to hoImageManager
30489>>>>>>>        Send CreateComObject of hoImageManager
30490>>>>>>>        Get ComIcons of hoImageManager to vImageManager
30491>>>>>>>        Set ComIcons to vImageManager
30492>>>>>>>        Send destroy of hoImageManager
30493>>>>>>>        // as of 18.3 it appears we must explicitly set this or you get fuzzy images
30493>>>>>>>        Send ComSetDPIScallingOptions of hoOptions False False
30494>>>>>>>        
30494>>>>>>>        // if tabbed workspace, enable it.
30494>>>>>>>        If (bTabbedWorkspaces) Begin
30496>>>>>>>            Send EnableTabbedWorkspace
30497>>>>>>>        End
30497>>>>>>>>
30497>>>>>>>        
30497>>>>>>>        
30497>>>>>>>        // event sent before any child objects are created.
30497>>>>>>>        Send OnCreateCommandBars
30498>>>>>>>        
30498>>>>>>>        // this creates all of the actions and items
30498>>>>>>>        Broadcast Send CreateComInstance
30500>>>>>>>        
30500>>>>>>>        // we keep track of the last action Id and last bar Id auto assigned.
30500>>>>>>>        // We use this to determine if a load environment can be safely done.
30500>>>>>>>        // Anything auto-assigned after this is considered to be dynamic.
30500>>>>>>>        Get LastAssignedId to iLast
30501>>>>>>>        Set piLastAssignedDesignTimeId to iLast
30502>>>>>>>        Get piLastBarId to iLast
30503>>>>>>>        Set piLastAssignedDesignTimeBarId to iLast
30504>>>>>>>        
30504>>>>>>>        Send LoadEnvironment // load layout if needed
30505>>>>>>>        
30505>>>>>>>        Get pbTimerUpdate to bTimer
30506>>>>>>>        If bTimer Begin
30508>>>>>>>            Get phoTimer to hoTimer
30509>>>>>>>            Set pbEnabled of hoTimer to True
30510>>>>>>>        End
30510>>>>>>>>
30510>>>>>>>        
30510>>>>>>>        Send ComRecalcLayout
30511>>>>>>>    End_Procedure
30512>>>>>>>    
30512>>>>>>>    // enable tabbed workspaces. This should only happen when the CON commandbars are
30512>>>>>>>    // being created as part of CreateCommandBars when pbTabbedWorkspaces is true.
30512>>>>>>>    // Use OnCreateTabbedWorkspace to customize
30512>>>>>>>    Procedure EnableTabbedWorkspace
30514>>>>>>>        Variant vTab vPaint
30514>>>>>>>        Handle hoTab hoPaint
30514>>>>>>>        Integer iFgs
30514>>>>>>>        
30514>>>>>>>        Get Create (RefClass(cCJTabWorkspace)) to hoTab
30515>>>>>>>        Get ComShowTabWorkspace True to vTab
30516>>>>>>>        Set pvComObject of hoTab to vTab
30517>>>>>>>        Send ComEnableGroups of hoTab
30518>>>>>>>        Get ComFlags of hoTab to iFgs
30519>>>>>>>        Set ComFlags of hoTab to (iFgs ior xtpWorkspaceShowCloseTab ior xtpWorkspaceShowActiveFiles)
30520>>>>>>>        Get ComPaintManager of hoTab to vPaint
30521>>>>>>>        Get Create (RefClass(cCJTabPaintManager)) to hoPaint
30522>>>>>>>        Set pvComObject of hoPaint to vPaint
30523>>>>>>>        Set ComShowIcons of hoPaint to False
30524>>>>>>>        // event to customize tabbed workspace
30524>>>>>>>        Send OnCreateTabbedWorkspace hoTab hoPaint
30525>>>>>>>        Send Destroy of hoPaint
30526>>>>>>>        Send Destroy of hoTab
30527>>>>>>>    End_Procedure
30528>>>>>>>    
30528>>>>>>>    // Perform an Update. This can be called manually or via the timer
30528>>>>>>>    // it send update to the Statusbar and to all active actions
30528>>>>>>>    Procedure Update
30530>>>>>>>        Handle[] hoActions
30531>>>>>>>        Handle hoStatusBar
30531>>>>>>>        Integer i iActions
30531>>>>>>>        Variant vAction
30531>>>>>>>        If (IsComObjectCreated(Self)) Begin
30533>>>>>>>            Send OnUpdate // update event for commandbars
30534>>>>>>>            Get phoActiveUpdates to hoActions
30535>>>>>>>            Move (SizeOfArray(hoActions)) to iActions
30536>>>>>>>            For i from 0 to (iActions-1)
30542>>>>>>>>
30542>>>>>>>                Send Update of hoActions[i]
30543>>>>>>>            Loop
30544>>>>>>>>
30544>>>>>>>            Get phoStatusBar to hoStatusBar
30545>>>>>>>            If (hoStatusBar) Begin
30547>>>>>>>                Send Update of hoStatusBar
30548>>>>>>>            End
30548>>>>>>>>
30548>>>>>>>        End
30548>>>>>>>>
30548>>>>>>>    End_Procedure
30549>>>>>>>    
30549>>>>>>>    Procedure UpdateAllActions
30551>>>>>>>        Handle[] hoActions
30552>>>>>>>        Integer i iActions
30552>>>>>>>        Variant vAction
30552>>>>>>>        Get phoRegisteredActions to hoActions
30553>>>>>>>        Move (SizeOfArray(hoActions)) to iActions
30554>>>>>>>        For i from 0 to (iActions-1)
30560>>>>>>>>
30560>>>>>>>            Send Update of hoActions[i]
30561>>>>>>>        Loop
30562>>>>>>>>
30562>>>>>>>    End_Procedure
30563>>>>>>>    
30563>>>>>>>    Function LastAssignedId Returns Integer
30565>>>>>>>        Integer[] iActionIdPool
30566>>>>>>>        Integer iId iCount
30566>>>>>>>        Get piActionIdPool to iActionIdPool
30567>>>>>>>        Move (SizeOfArray(iActionIdPool)) to iCount
30568>>>>>>>        If (iCount=0) Begin
30570>>>>>>>            Move ID_CommandBarsAutoStart to iId
30571>>>>>>>        End
30571>>>>>>>>
30571>>>>>>>        Else Begin
30572>>>>>>>            Move (iActionIdPool[0]) to iId
30573>>>>>>>        End
30573>>>>>>>>
30573>>>>>>>        Function_Return iId
30574>>>>>>>    End_Function
30575>>>>>>>    
30575>>>>>>>    Function AssignID Returns Integer // auto assign an Id. Callend in end_construct_object if needed
30577>>>>>>>        Integer[] iActionIdPool
30578>>>>>>>        Integer iId iCount
30578>>>>>>>        Get piActionIdPool to iActionIdPool
30579>>>>>>>        Move (SizeOfArray(iActionIdPool)) to iCount
30580>>>>>>>        If (iCount=0) Begin
30582>>>>>>>            Move ID_CommandBarsAutoStart to iId
30583>>>>>>>            Move iId to iActionIdPool[0]
30584>>>>>>>        End
30584>>>>>>>>
30584>>>>>>>        Else If (iCount=1) Begin
30587>>>>>>>            Move (iActionIdPool[0]+1) to iId
30588>>>>>>>            Move iId to iActionIdPool[0]
30589>>>>>>>        End
30589>>>>>>>>
30589>>>>>>>        Else Begin
30590>>>>>>>            Move iActionIdPool[iCount-1] to iId
30591>>>>>>>            Move (ResizeArray(iActionIdPool,iCount-1)) to iActionIdPool
30592>>>>>>>        End
30592>>>>>>>>
30592>>>>>>>        Set piActionIdPool to iActionIdPool
30593>>>>>>>        Function_Return iId
30594>>>>>>>    End_Function
30595>>>>>>>    
30595>>>>>>>    Procedure ReleaseID Integer iId // might be needed to maintain a pool of actions
30597>>>>>>>        Integer[] iActionIdPool
30598>>>>>>>        Integer iCount iIndex
30598>>>>>>>        Get piActionIdPool to iActionIdPool
30599>>>>>>>        // we must make sure that an action is never added to the pool more than once.
30599>>>>>>>        // this first value is a trick value (the highest number) so we allow a hit on
30599>>>>>>>        // that one. So -1 or 0 is ok
30599>>>>>>>        If (SearchArray(iId,iActionIdPool)<=0) Begin
30601>>>>>>>            Move (SizeOfArray(iActionIdPool)) to iCount
30602>>>>>>>            Move iId to iActionIdPool[iCount]
30603>>>>>>>            Set piActionIdPool to iActionIdPool
30604>>>>>>>        End
30604>>>>>>>>
30604>>>>>>>        Else Begin
30605>>>>>>>            Error DFERR_PROGRAM "Assert: Duplicate released ID in commandbars"
30606>>>>>>>>
30606>>>>>>>        End
30606>>>>>>>>
30606>>>>>>>    End_Procedure
30607>>>>>>>    
30607>>>>>>>    Function AssignBarId Returns Integer
30609>>>>>>>        Integer iId
30609>>>>>>>        Get piLastBarId to iId
30610>>>>>>>        Increment iId
30611>>>>>>>        Set piLastBarId to iId
30612>>>>>>>        Function_Return iId
30613>>>>>>>    End_Function
30614>>>>>>>    
30614>>>>>>>    Procedure AddActiveAction Handle hoAction
30616>>>>>>>        Handle[] hoActiveActions
30617>>>>>>>        Get phoActiveUpdates to hoActiveActions
30618>>>>>>>        If (SearchArray(hoAction,hoActiveActions)=-1) Begin
30620>>>>>>>            Move hoAction to hoActiveActions[SizeOfArray(hoActiveActions)]
30621>>>>>>>            Set phoActiveUpdates to hoActiveActions
30622>>>>>>>        End
30622>>>>>>>>
30622>>>>>>>    End_Procedure
30623>>>>>>>    
30623>>>>>>>    Procedure RegisterAction Handle hoAction
30625>>>>>>>        Boolean bActive
30625>>>>>>>        Handle[] hoActions
30626>>>>>>>        Get phoRegisteredActions to hoActions
30627>>>>>>>        Move hoAction to hoActions[SizeOfArray(hoActions)]
30628>>>>>>>        Set phoRegisteredActions to hoActions
30629>>>>>>>        Get pbActiveUpdate of hoAction to bActive
30630>>>>>>>        If bActive Begin
30632>>>>>>>            Send AddActiveAction hoAction
30633>>>>>>>        End
30633>>>>>>>>
30633>>>>>>>    End_Procedure
30634>>>>>>>    
30634>>>>>>>    // remove action from list of active actions.
30634>>>>>>>    Procedure RemoveActiveAction Handle hoAction
30636>>>>>>>        Handle[] hoActiveActions
30637>>>>>>>        Integer iIndex
30637>>>>>>>        Get phoActiveUpdates to hoActiveActions
30638>>>>>>>        Move (SearchArray(hoAction,hoActiveActions)) to iIndex
30639>>>>>>>        If (iIndex<>-1) Begin
30641>>>>>>>            Move (RemoveFromArray(hoActiveActions,iIndex)) to hoActiveActions
30642>>>>>>>            Set phoActiveUpdates to hoActiveActions
30643>>>>>>>        End
30643>>>>>>>>
30643>>>>>>>    End_Procedure
30644>>>>>>>    
30644>>>>>>>    // remove action from list of registered actions.
30644>>>>>>>    Procedure RemoveRegisteredAction Handle hoAction
30646>>>>>>>        Handle[] hoActiveActions
30647>>>>>>>        Boolean bActive
30647>>>>>>>        Integer iIndex i iCount
30647>>>>>>>        Get phoRegisteredActions to hoActiveActions
30648>>>>>>>        Move (SearchArray(hoAction,hoActiveActions)) to iIndex
30649>>>>>>>        If (iIndex<>-1) Begin
30651>>>>>>>            Move (SizeOfArray(hoActiveActions)) to iCount
30652>>>>>>>            For i from iIndex to (iCount-2)
30658>>>>>>>>
30658>>>>>>>                Move hoActiveActions[i+1] to hoActiveActions[i]
30659>>>>>>>            Loop
30660>>>>>>>>
30660>>>>>>>            Move (ResizeArray(hoActiveActions,iCount-1)) to hoActiveActions
30661>>>>>>>            Set phoRegisteredActions to hoActiveActions
30662>>>>>>>        End
30662>>>>>>>>
30662>>>>>>>        Get pbActiveUpdate of hoAction to bActive
30663>>>>>>>        If bActive Begin
30665>>>>>>>            Send RemoveActiveAction hoAction
30666>>>>>>>        End
30666>>>>>>>>
30666>>>>>>>    End_Procedure
30667>>>>>>>    
30667>>>>>>>    // Retrieves a populated tGrpIconDir struct for the passed icon name. The data is populated
30667>>>>>>>    // from the icon group resource related to the passed icon name.
30667>>>>>>>    // sIcon        - is the name of the icon file e.g. "cut.ico" - this must be an icon resource compiled
30667>>>>>>>    //                into the running application.
30667>>>>>>>    // GroupIconDir - [out] This is the tWinGrpIconDir struct that is populated and passed back
30667>>>>>>>    // Returns      - True of the icon group data could be read otherwise returns false.
30667>>>>>>>    Function GetIconGroupData String sIcon tWinGrpIconDir ByRef GroupIconDir Returns Boolean
30669>>>>>>>        Handle hResInfo hResData
30669>>>>>>>        Pointer lpType lpIconInfo lpDest
30669>>>>>>>        Integer iIcon icIcon
30669>>>>>>>        Longptr iStructSize
30669>>>>>>>        Boolean bOK
30669>>>>>>>        tWinGrpIconDirEntry GroupIconDirEntry
30669>>>>>>>        tWinGrpIconDirEntry GroupIconDirEntry
30669>>>>>>>        
30669>>>>>>>        // Retrieve information about the icon group resource
30669>>>>>>>        Move (FindResource(GetModuleHandleW(0), Utf8ToAnsi(sIcon), RT_GROUP_ICON)) to hResInfo   // get the resource info handle for the icon group resource
30670>>>>>>>        If (hResInfo = 0) ;            Function_Return False
30673>>>>>>>        
30673>>>>>>>        Move (LoadResource(GetModuleHandleW(0), hResInfo)) to hResData               // get the resource data handle from the resource info handle
30674>>>>>>>        If (hResData = 0) ;            Function_Return False
30677>>>>>>>        
30677>>>>>>>        Move (LockResource(hResData)) to lpIconInfo                                 // pointer to tGrpIconDir struct
30678>>>>>>>        If (lpIconInfo = 0) ;            Function_Return False
30681>>>>>>>        
30681>>>>>>>        // Copy the resource information into our Group Icon Dir Struct
30681>>>>>>>        Move (AddressOf(GroupIconDir)) to lpDest
30682>>>>>>>        Move (MemCopy(lpDest, lpIconInfo, 6)) to bOK     // copy the base data
30683>>>>>>>        If (not(bOK)) ;            Function_Return False
30686>>>>>>>        
30686>>>>>>>        Move GroupIconDir.idCount to icIcon                            // get the number of IconDirEntry members
30687>>>>>>>        Move GroupIconDirEntry to GroupIconDir.idEntries[icIcon-1]     // create the empty IconDirEntry array
30688>>>>>>>        Move (SizeOfType(tWinGrpIconDirEntry)) to iStructSize
30689>>>>>>>        Move (lpIconInfo + 6) to lpIconInfo    // advance the memory pointer to the start of the array
30690>>>>>>>        
30690>>>>>>>        For iIcon from 0 to (icIcon-1)    // copy each array member one by one
30696>>>>>>>>
30696>>>>>>>            Move (AddressOf(GroupIconDir.idEntries[iIcon])) to lpDest
30697>>>>>>>            Move (MemCopy(lpDest, lpIconInfo, iStructSize)) to bOK     // copy the base data
30698>>>>>>>            If (not(bOK)) ;                Function_Return False
30701>>>>>>>            
30701>>>>>>>            // advance the memory pointer to the start of the next array member
30701>>>>>>>            Move (lpIconInfo + iStructSize) to lpIconInfo
30702>>>>>>>        Loop
30703>>>>>>>>
30703>>>>>>>        
30703>>>>>>>        Function_Return True
30704>>>>>>>    End_Function
30705>>>>>>>    
30705>>>>>>>    // Loads all icon image resources that belong to the icon group of the passed icon name.
30705>>>>>>>    // The entire icon group is added to the commandbar's icons collection with the same icon ID.
30705>>>>>>>    // sIcon        - Name of the resource group icon we are loading e.g. "Save.ico"
30705>>>>>>>    // iID          - CJ Commandbar ID to be assigned to the icons that we load
30705>>>>>>>    // hoImageIcons - Handle to the command bar's cCJImageManagerIcons object where the icon will be added
30705>>>>>>>    // eImageType   - The commandbar image type, e.g. xtpImageNormal
30705>>>>>>>    // Boolean      - Returns True if successful, otherwise returns False
30705>>>>>>>    Function LoadIconGroupFromResource String sIcon Integer iID Handle hoImageIcons Integer eImageType Returns Boolean
30707>>>>>>>        Integer iIcon
30707>>>>>>>        tWinGrpIconDir GroupIconDir
30707>>>>>>>        tWinGrpIconDir GroupIconDir
30707>>>>>>>        Boolean bRetValue
30707>>>>>>>        
30707>>>>>>>        Get GetIconGroupData sIcon (&GroupIconDir) to bRetValue
30708>>>>>>>        
30708>>>>>>>        If (bRetValue) Begin
30710>>>>>>>            // Iterate the icon entries...
30710>>>>>>>            For iIcon from 0 to (GroupIconDir.idCount-1)
30716>>>>>>>>
30716>>>>>>>                Send ComLoadIconFromResource of hoImageIcons (GetModuleHandleW(0)) GroupIconDir.idEntries[iIcon].nID iID eImageType
30717>>>>>>>            Loop
30718>>>>>>>>
30718>>>>>>>        End
30718>>>>>>>>
30718>>>>>>>        
30718>>>>>>>        Function_Return bRetValue
30719>>>>>>>    End_Function
30720>>>>>>>    
30720>>>>>>>    
30720>>>>>>>    // Adds an image to imagelist. Pass if bmp or icon, the image name and the Id and image type (normal, disabled, etc.)
30720>>>>>>>    // With Bitmaps this will first look for the resource then search for the file in the file path.
30720>>>>>>>    // With Icons it checks for the file first (explained below)
30720>>>>>>>    // return Image Id if success
30720>>>>>>>    Function AddImageType Boolean bIsIcon String sImage Integer iId Integer eImageType Returns Integer
30722>>>>>>>        Handle hBitmap
30722>>>>>>>        Variant vImageManager
30722>>>>>>>        Handle hoImageIcons
30722>>>>>>>        Integer iVoid
30722>>>>>>>        Boolean bOk
30722>>>>>>>        String sFileImage
30722>>>>>>>        
30722>>>>>>>        If (iId=0) Begin
30724>>>>>>>            Get piLastImageId to iId
30725>>>>>>>            Increment iId
30726>>>>>>>            Set piLastImageId to iId
30727>>>>>>>        End
30727>>>>>>>>
30727>>>>>>>        
30727>>>>>>>        Get CreateNamed (RefClass(cCJImageManagerIcons)) "oImageManagerIcons" to hoImageIcons
30728>>>>>>>        Get ComIcons to vImageManager
30729>>>>>>>        Set pvComObject of hoImageIcons to vImageManager
30730>>>>>>>        
30730>>>>>>>        If bIsIcon Begin
30732>>>>>>>            Get LoadIconGroupFromResource sImage iId hoImageIcons eImageType to bOk
30733>>>>>>>            
30733>>>>>>>            If (not(bOk)) Begin
30735>>>>>>>                Get_File_Path sImage to sFileImage // find path in DFPATH, if appropriate
30736>>>>>>>                If (sFileImage<>"") Begin
30738>>>>>>>                    Send ComLoadIcon of hoImageIcons sFileImage iId eImageType
30739>>>>>>>                    Move True to bOk
30740>>>>>>>                End
30740>>>>>>>>
30740>>>>>>>            End
30740>>>>>>>>
30740>>>>>>>        End
30740>>>>>>>>
30740>>>>>>>        Else Begin
30741>>>>>>>            // if a bitmap - load from resource first then from file
30741>>>>>>>            Move (LoadImage(GetModuleHandleW(0), sImage, IMAGE_BITMAP, 0, 0, 0)) to hBitmap
30742>>>>>>>            
30742>>>>>>>            If (hBitmap=0) Begin // the bitmap was not in the EXE resource
30744>>>>>>>                Get_File_Path sImage to sFileImage // find path in DFPATH, if appropriate
30745>>>>>>>                
30745>>>>>>>                If (sFileImage <>"") Begin // The image was found!
30747>>>>>>>                    Send ComLoadBitmap of hoImageIcons sFileImage iId eImageType
30748>>>>>>>                    Move True to bOk
30749>>>>>>>                End
30749>>>>>>>>
30749>>>>>>>            End
30749>>>>>>>>
30749>>>>>>>            
30749>>>>>>>            If hBitmap Begin
30751>>>>>>>                Send ComAddBitmap of hoImageIcons hBitmap iId eImageType False
30752>>>>>>>                Move (DeleteObject(hBitmap)) to iVoid
30753>>>>>>>                Move True to bOk
30754>>>>>>>            End
30754>>>>>>>>
30754>>>>>>>        End
30754>>>>>>>>
30754>>>>>>>        
30754>>>>>>>        Send Destroy of hoImageIcons
30755>>>>>>>        
30755>>>>>>>        Function_Return (If(bOk, iId, 0))
30756>>>>>>>    End_Function
30757>>>>>>>    
30757>>>>>>>    // Adds an image to imagelist.
30757>>>>>>>    // We assume that this is an icon unless the .bmp extension is passed.
30757>>>>>>>    // return True if success
30757>>>>>>>    Function AddImage String sImage Integer iId Integer eImageType Returns Integer
30759>>>>>>>        Boolean bIsIcon
30759>>>>>>>        // Command Bars support many graphics formats including .bmp, .gif, .jpg etc.
30759>>>>>>>        // These are all non-icon formats...
30759>>>>>>>        Move (Right(Lowercase(sImage), 4) = ".ico") to bIsIcon
30760>>>>>>>        Get AddImageType bIsIcon sImage iId eImageType to iId
30761>>>>>>>        Function_Return iId
30762>>>>>>>    End_Function
30763>>>>>>>    
30763>>>>>>>    // Create a StateOptions object and set it as needed. This is used to save and
30763>>>>>>>    // load settings. You could augment this to customize as needed.
30763>>>>>>>    Function CreateStateOptions Integer eLayout Returns Handle
30765>>>>>>>        Handle hoStateOptions
30765>>>>>>>        Variant vStateOptions
30765>>>>>>>        
30765>>>>>>>        Get Create U_cCJStateOptions to hoStateOptions
30766>>>>>>>        Get ComCreateStateOptions to vStateOptions
30767>>>>>>>        Set pvComObject of hoStateOptions to vStateOptions
30768>>>>>>>        
30768>>>>>>>        Set ComLoadSilent of hoStateOptions to True
30769>>>>>>>        
30769>>>>>>>        // If True, only CommandBars that have been customized will be saved.
30769>>>>>>>        Set ComSaveOnlyCustomized of hoStateOptions to True
30770>>>>>>>        
30770>>>>>>>        // If True, the original state of the CommandBars is saved along with the customized state
30770>>>>>>>        // For example, if a button on a toolbar is moved, then both the original and modified states will be saved.
30770>>>>>>>        Set ComSaveOriginalControls of hoStateOptions to True
30771>>>>>>>        
30771>>>>>>>        Set ComSerializeDesignerControls of hoStateOptions to False
30772>>>>>>>        
30772>>>>>>>        // If True, the controls in the CommandBars will be saved. If False, no controls will be saved,
30772>>>>>>>        // regardless of the other settings.
30772>>>>>>>        Set ComSerializeControls of hoStateOptions to (eLayout=rlSaveRestoreAll)
30773>>>>>>>        
30773>>>>>>>        // If True, the images stored in the ImageManager will be saved.
30773>>>>>>>        Set ComSerializeImages of hoStateOptions to False
30774>>>>>>>        
30774>>>>>>>        // If True, the layout of the CommandBars will be saved. The Layout includes information such as
30774>>>>>>>        // bar position, location, and size.
30774>>>>>>>        Set ComSerializeLayout of hoStateOptions to (eLayout<>rlNoSaveRestore)
30775>>>>>>>        
30775>>>>>>>        // If True, the setting on the Keyboard and Options pages of the Customize dialog will
30775>>>>>>>        // be saved. This includes shortcut keys and CommandBar options like large icons and full menus.
30775>>>>>>>        Set ComSerializeOptions of hoStateOptions to (eLayout=rlSaveRestoreAll or eLayout=rlSaveRestoreFullLayout)
30776>>>>>>>        
30776>>>>>>>        // in our model, actions are never saved.
30776>>>>>>>        Set ComSerializeActions of hoStateOptions to False
30777>>>>>>>        
30777>>>>>>>        Function_Return hoStateOptions
30778>>>>>>>    End_Function
30779>>>>>>>    
30779>>>>>>>    Function CreatePropExchangeObject Returns Handle
30781>>>>>>>        Handle hoPropExchange hoGlobal
30781>>>>>>>        Variant vPropExchange vGlobal
30781>>>>>>>        
30781>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30783>>>>>>>            Error DFERR_PROGRAM "Cannot exchange Commands bars data. COM object not created"
30784>>>>>>>>
30784>>>>>>>            Function_Return 0
30785>>>>>>>        End
30785>>>>>>>>
30785>>>>>>>        
30785>>>>>>>        Get Create U_cCJCommandBarsGlobalSettings to hoGlobal
30786>>>>>>>        Get ComGlobalSettings to vGlobal
30787>>>>>>>        Set pvComObject of hoGlobal to vGlobal
30788>>>>>>>        Get ComCreatePropExchange of hoGlobal to vPropExchange
30789>>>>>>>        Get Create U_cCJPropExchange to hoPropExchange
30790>>>>>>>        Set pvComObject of hoPropExchange to vPropExchange
30791>>>>>>>        Send Destroy of hoGlobal
30792>>>>>>>        Function_Return hoPropExchange
30793>>>>>>>    End_Function
30794>>>>>>>    
30794>>>>>>>    // exchange the current commandbar layout with the prop exchange object.
30794>>>>>>>    // pass the exchange object and the section name to save this under. The exchange
30794>>>>>>>    // object contains information if this is a save or load (ComLoading).
30794>>>>>>>    // can be called by any exchange object allowing developers to save a commandbar
30794>>>>>>>    // structure as part of other information they may be saving and loading
30794>>>>>>>    
30794>>>>>>>    Procedure ExchangeLayout Handle hoExchange String sSection Integer eLayout
30796>>>>>>>        Variant vSection vOptions
30796>>>>>>>        Handle hoExchangePref hoStatusBar  hoStateOptions
30796>>>>>>>        Integer iLast iLastBar iStatusBarVisible iBuild iIDBuild iIDCount iIDBarCount
30796>>>>>>>        Boolean bLoad bSerializeControls
30796>>>>>>>        
30796>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30798>>>>>>>            Error DFERR_PROGRAM "Cannot exchange Commands bars data. COM object not created"
30799>>>>>>>>
30799>>>>>>>            Procedure_Return
30800>>>>>>>        End
30800>>>>>>>>
30800>>>>>>>        
30800>>>>>>>        Get phoStatusBar to hoStatusBar
30801>>>>>>>        Get ComLoading of hoExchange to bLoad
30802>>>>>>>        Get piLastAssignedDesignTimeId to iLast
30803>>>>>>>        Get piLastAssignedDesignTimeBarId to iLastBar
30804>>>>>>>        Get piLayoutBuild to iBuild
30805>>>>>>>        
30805>>>>>>>        Get CreateStateOptions eLayout to hoStateOptions
30806>>>>>>>        Get ComSerializeControls of hoStateOptions to bSerializeControls
30807>>>>>>>        Get pvComObject of hoStateOptions to vOptions
30808>>>>>>>        
30808>>>>>>>        Get Create U_cCJPropExchange to hoExchangePref
30809>>>>>>>        
30809>>>>>>>        Get ComGetSection of hoExchange sSection to vSection
30810>>>>>>>        Set pvComObject of hoExchangePref to vSection
30811>>>>>>>        
30811>>>>>>>        If (not(bLoad)) Begin
30813>>>>>>>            
30813>>>>>>>            Send ComDoPropExchange vSection vOptions
30814>>>>>>>            Send ComExchangeInt of hoExchangePref "IDCount" (&iLast) 0
30815>>>>>>>            Send ComExchangeInt of hoExchangePref "BarIDCount" (&iLastBar) 0
30816>>>>>>>            If (hoStatusBar) Begin
30818>>>>>>>                Get pbVisible of hoStatusBar to iStatusBarVisible
30819>>>>>>>                Send ComExchangeInt of hoExchangePref "IsStatusBarVisible" (&iStatusBarVisible) 1
30820>>>>>>>            End
30820>>>>>>>>
30820>>>>>>>            Send ComExchangeInt of hoExchangePref "Build" (&iBuild) 0
30821>>>>>>>        End
30821>>>>>>>>
30821>>>>>>>        Else Begin
30822>>>>>>>            // get the build from the data. If it is not what we expect, don't load - it is out of date
30822>>>>>>>            Send ComExchangeInt of hoExchangePref "Build" (&iIDBuild) 0
30823>>>>>>>            If (iIDBuild=iBuild) Begin
30825>>>>>>>                Send ComExchangeInt of hoExchangePref "IDCount" (&iIDCount) 0
30826>>>>>>>                Send ComExchangeInt of hoExchangePref "BarIDCount" (&iIDBarCount) 0
30827>>>>>>>                If (hoStatusBar) Begin
30829>>>>>>>                    Send ComExchangeInt of hoExchangePref "IsStatusBarVisible" (&iStatusBarVisible) 1
30830>>>>>>>                    Set pbVisible of hoStatusBar to iStatusBarVisible
30831>>>>>>>                End
30831>>>>>>>>
30831>>>>>>>                
30831>>>>>>>                // do the load if we serialize controls and the control count is ok
30831>>>>>>>                // and if the barId count is ok
30831>>>>>>>                If ((not(bSerializeControls) or iLast=iIDCount) and iLastBar=iIDBarCount) Begin
30833>>>>>>>                    Send ComDoPropExchange vSection vOptions
30834>>>>>>>                End
30834>>>>>>>>
30834>>>>>>>                Send ComRecalcLayout
30835>>>>>>>            End
30835>>>>>>>>
30835>>>>>>>        End
30835>>>>>>>>
30835>>>>>>>        
30835>>>>>>>        Send destroy of hoExchangePref
30836>>>>>>>        Send Destroy of hoStateOptions
30837>>>>>>>    End_Procedure
30838>>>>>>>    
30838>>>>>>>    
30838>>>>>>>    // saves and loads commands info to the registry.
30838>>>>>>>    // While this is private. It provides a good model for how to do this kind of thing.
30838>>>>>>>    Function LoadLayoutFromRegistry Integer eLayout String sKey Returns Boolean
30840>>>>>>>        Handle hoExchange
30840>>>>>>>        Boolean bOk
30840>>>>>>>        String sSection sFullKey
30840>>>>>>>        
30840>>>>>>>        If (eLayout=rlNoSaveRestore) Begin
30842>>>>>>>            Function_Return True
30843>>>>>>>        End
30843>>>>>>>>
30843>>>>>>>        
30843>>>>>>>        Move ("HKEY_CURRENT_USER\" - sKey) to sFullKey
30844>>>>>>>        Get psLayoutSection to sSection
30845>>>>>>>        Get CreatePropExchangeObject to hoExchange
30846>>>>>>>        
30846>>>>>>>        Get ComCreateAsRegistry of hoExchange True sFullKey to bOk
30847>>>>>>>        
30847>>>>>>>        If not (bOk) Begin
30849>>>>>>>            Error DFERR_PROGRAM "Assert: Cannot load from registry"
30850>>>>>>>>
30850>>>>>>>        End
30850>>>>>>>>
30850>>>>>>>        
30850>>>>>>>        If bOk Begin
30852>>>>>>>            Send ExchangeLayout hoExchange sSection eLayout
30853>>>>>>>            Send ComRecalcLayout
30854>>>>>>>        End
30854>>>>>>>>
30854>>>>>>>        Send destroy of hoExchange
30855>>>>>>>        Function_Return bOk
30856>>>>>>>    End_Function
30857>>>>>>>    
30857>>>>>>>    
30857>>>>>>>    Procedure SaveLayoutToRegistry Integer eLayout String sKey
30859>>>>>>>        Handle hoExchange hoRegistry
30859>>>>>>>        Boolean bOk bExists bVoid
30859>>>>>>>        String sSection sFullKey sShortKey
30859>>>>>>>        
30859>>>>>>>        If (eLayout=rlNoSaveRestore) Begin
30861>>>>>>>            Procedure_Return
30862>>>>>>>        End
30862>>>>>>>>
30862>>>>>>>        
30862>>>>>>>        Move ("HKEY_CURRENT_USER\" - sKey) to sFullKey
30863>>>>>>>        Get psLayoutSection to sSection
30864>>>>>>>        Move (sKey - "\" - sSection) to sShortKey
30865>>>>>>>        
30865>>>>>>>        If (sKey="" or sSection="") Begin
30867>>>>>>>            Error DFERR_PROGRAM "Assert: Registry Key or Section name is invalid"
30868>>>>>>>>
30868>>>>>>>        End
30868>>>>>>>>
30868>>>>>>>        
30868>>>>>>>        Get CreatePropExchangeObject to hoExchange
30869>>>>>>>        Get ComCreateAsRegistry of hoExchange False sFullKey to bOk
30870>>>>>>>        
30870>>>>>>>        If not (bOk) Begin
30872>>>>>>>            Error DFERR_PROGRAM "Assert: Cannot save layout to registry"
30873>>>>>>>>
30873>>>>>>>        End
30873>>>>>>>>
30873>>>>>>>        
30873>>>>>>>        If bOk Begin
30875>>>>>>>            // delete the existing registry information for this section
30875>>>>>>>            Get Create U_cRegistry to hoRegistry
30876>>>>>>>            Set pbLazyWrite of hoRegistry to False
30877>>>>>>>            Get KeyExists of hoRegistry sShortKey to bExists
30878>>>>>>>            If bExists Begin
30880>>>>>>>                Get DeleteKey of hoRegistry sShortKey to bVoid
30881>>>>>>>            End
30881>>>>>>>>
30881>>>>>>>            Send Destroy of hoRegistry
30882>>>>>>>            
30882>>>>>>>            Send ExchangeLayout hoExchange sSection eLayout
30883>>>>>>>        End
30883>>>>>>>>
30883>>>>>>>        
30883>>>>>>>        Send destroy of hoExchange
30884>>>>>>>    End_Procedure
30885>>>>>>>    
30885>>>>>>>    
30885>>>>>>>    Function LoadLayoutFromXML Integer eLayout String sFileName Returns Boolean
30887>>>>>>>        Handle hoExchange
30887>>>>>>>        String sSection
30887>>>>>>>        Boolean bOk
30887>>>>>>>        
30887>>>>>>>        If (eLayout=rlNoSaveRestore) Begin
30889>>>>>>>            Function_Return True
30890>>>>>>>        End
30890>>>>>>>>
30890>>>>>>>        
30890>>>>>>>        Get psLayoutSection to sSection
30891>>>>>>>        Get CreatePropExchangeObject to hoExchange
30892>>>>>>>        
30892>>>>>>>        Get ComCreateAsXML of hoExchange True "Settings" to bOk
30893>>>>>>>        
30893>>>>>>>        If not (bOk) Begin
30895>>>>>>>            Error DFERR_PROGRAM "Assert: Cannot load layout from XML"
30896>>>>>>>>
30896>>>>>>>        End
30896>>>>>>>>
30896>>>>>>>        
30896>>>>>>>        If bOk Begin
30898>>>>>>>            Get ComLoadFromFile of hoExchange sFileName to bOk
30899>>>>>>>            If bOk Begin
30901>>>>>>>                Send ExchangeLayout hoExchange sSection eLayout
30902>>>>>>>                Send ComRecalcLayout
30903>>>>>>>            End
30903>>>>>>>>
30903>>>>>>>        End
30903>>>>>>>>
30903>>>>>>>        Send destroy of hoExchange
30904>>>>>>>        Function_Return bOk
30905>>>>>>>    End_Function
30906>>>>>>>    
30906>>>>>>>    Procedure SaveLayoutToXML Integer eLayout String sFileName
30908>>>>>>>        Handle hoExchange
30908>>>>>>>        String sSection
30908>>>>>>>        Boolean bOk
30908>>>>>>>        
30908>>>>>>>        If (eLayout=rlNoSaveRestore) Begin
30910>>>>>>>            Procedure_Return
30911>>>>>>>        End
30911>>>>>>>>
30911>>>>>>>        
30911>>>>>>>        Get psLayoutSection to sSection
30912>>>>>>>        Get CreatePropExchangeObject to hoExchange
30913>>>>>>>        
30913>>>>>>>        Get ComCreateAsXML of hoExchange False "Settings" to bOk
30914>>>>>>>        
30914>>>>>>>        If not (bOk) Begin
30916>>>>>>>            Error DFERR_PROGRAM "Assert: Cannot save XML layout"
30917>>>>>>>>
30917>>>>>>>        End
30917>>>>>>>>
30917>>>>>>>        
30917>>>>>>>        If bOk Begin
30919>>>>>>>            Send ExchangeLayout hoExchange sSection eLayout
30920>>>>>>>            Send ComSaveToFile of hoExchange sFileName
30921>>>>>>>        End
30921>>>>>>>>
30921>>>>>>>        Send destroy of hoExchange
30922>>>>>>>    End_Procedure
30923>>>>>>>    
30923>>>>>>>    // needed in case where no application object is present
30923>>>>>>>    Register_Function pbPreserveEnvironment Returns Boolean
30923>>>>>>>    Register_Function RegistryKeyString Returns String
30923>>>>>>>    
30923>>>>>>>    // Standard SaveEnvironment Behavior. This is called when the commandbar system
30923>>>>>>>    // is closed. It will save environment if:
30923>>>>>>>    // 1) application Object exists and pbPreserveEnvironment is true
30923>>>>>>>    // 2) peRestoreLayout is not rlNoSaveRestore
30923>>>>>>>    // This is good for augmentation if you wish to change the standard save
30923>>>>>>>    Procedure SaveEnvironment
30925>>>>>>>        Handle eLayout
30925>>>>>>>        String sKey
30925>>>>>>>        Boolean bPreserveEnvironment
30925>>>>>>>        
30925>>>>>>>        If (ghoApplication=0) Begin
30927>>>>>>>            Procedure_Return
30928>>>>>>>        End
30928>>>>>>>>
30928>>>>>>>        Get pbPreserveEnvironment of ghoApplication to bPreserveEnvironment
30929>>>>>>>        If bPreserveEnvironment Begin
30931>>>>>>>            Get peRestoreLayout to eLayout
30932>>>>>>>            Get RegistryKeyString of ghoApplication to sKey
30933>>>>>>>            Send SaveLayoutToRegistry eLayout sKey
30934>>>>>>>        End
30934>>>>>>>>
30934>>>>>>>    End_Procedure
30935>>>>>>>    
30935>>>>>>>    
30935>>>>>>>    // Standard LoadEnvironment Behavior. This is called when the commandbar system
30935>>>>>>>    // is created. It will load environment if:
30935>>>>>>>    // 1) application Object exists and pbPreserveEnvironment is true
30935>>>>>>>    // 2) peRestoreLayout is not rlNoSaveRestore
30935>>>>>>>    // This is good for augmentation if you wish to change the standard load.
30935>>>>>>>    
30935>>>>>>>    Procedure LoadEnvironment
30937>>>>>>>        Handle eLayout
30937>>>>>>>        String sKey
30937>>>>>>>        Boolean bOk bPreserveEnvironment
30937>>>>>>>        
30937>>>>>>>        If (ghoApplication=0) Begin
30939>>>>>>>            Procedure_Return
30940>>>>>>>        End
30940>>>>>>>>
30940>>>>>>>        Get pbPreserveEnvironment of ghoApplication to bPreserveEnvironment
30941>>>>>>>        If bPreserveEnvironment Begin
30943>>>>>>>            Get peRestoreLayout to eLayout
30944>>>>>>>            Get RegistryKeyString of ghoApplication to sKey
30945>>>>>>>            Get LoadLayoutFromRegistry eLayout sKey to bOk
30946>>>>>>>        End
30946>>>>>>>>
30946>>>>>>>    End_Procedure
30947>>>>>>>    
30947>>>>>>>    
30947>>>>>>>    Procedure RestoreLayout
30949>>>>>>>        Variant vToolBarObject
30949>>>>>>>        Send ComDeleteAll
30950>>>>>>>        Get ComAddMenuBar "Main menu" to vToolbarObject
30951>>>>>>>        //Broadcast Send CreateComCommandBarInstance
30951>>>>>>>        Broadcast Send CreateComInstance
30953>>>>>>>        Send ComRecalcLayout
30954>>>>>>>    End_Procedure
30955>>>>>>>    
30955>>>>>>>    // used to dock a commandbar, on the same row and to the right of another commandbar
30955>>>>>>>    // used by pbDockNextTo property in toolbars
30955>>>>>>>    Procedure DockNextTo Variant vBarToDock Variant vBarOnLeft
30957>>>>>>>        Integer iLeft iTop iRight iBottom iPosition
30957>>>>>>>        Handle hoBarOnLeft
30957>>>>>>>        Get Create U_cCJCommandBar to hoBarOnLeft
30958>>>>>>>        Set pvComObject of hoBarOnLeft to vBarOnLeft
30959>>>>>>>        Send ComRecalcLayout
30960>>>>>>>        Send ComGetWindowRect of hoBarOnLeft (&iLeft) (&iTop) (&iRight) (&iBottom)
30961>>>>>>>        Get ComPosition of hoBarOnLeft to iPosition
30962>>>>>>>        Send ComDockToolBar vBarToDock (iLeft+1) ((iBottom + iTop)/2) iPosition
30963>>>>>>>        Send Destroy of hoBarOnLeft
30964>>>>>>>    End_Procedure
30965>>>>>>>    
30965>>>>>>>    // This only works if this command bar is placed inside of BasicPanel or if the
30965>>>>>>>    // command bar is in a modal dialog that is placed inside of a Panel
30965>>>>>>>    Function Is_Function Integer iMsgId Integer hoObjId Boolean bDelegateFg Returns Boolean
30967>>>>>>>        Boolean bOk
30967>>>>>>>        Handle hoMain
30967>>>>>>>        // this should get resolved via delegation
30967>>>>>>>        Get Main_Panel_id to hoMain
30968>>>>>>>        If (hoObjId>Desktop and hoMain) ;            Get Is_Function of hoMain iMsgId hoObjId bDelegateFg to bOk
30971>>>>>>>        Function_Return bOk
30972>>>>>>>    End_Function
30973>>>>>>>    
30973>>>>>>>    // these must be registered if you are using this with a non-db application. If you are using this
30973>>>>>>>    // with a non-db application, you should not be calling the DEOInformation method as you will get
30973>>>>>>>    // a runtime programming error.
30973>>>>>>>    
30973>>>>>>>    Register_Function Server Returns Integer
30973>>>>>>>    Register_Function DEO_Object Returns Integer
30973>>>>>>>    Register_Function DEO_Control_Object Returns Integer
30973>>>>>>>    Register_Function File_Field_Index Integer iFile Integer iField Returns Integer
30973>>>>>>>    
30973>>>>>>>    // returns information about the Focus object. If it returns True its a DEO. If a DEO the
30973>>>>>>>    // server, hasRecord, changed and hasindex info will all be returned by ref.
30973>>>>>>>    // If false, these are all unchanged.
30973>>>>>>>    Function DEOInformation Handle ByRef hoServer Boolean ByRef bHasRecord Boolean ByRef bChanged Boolean ByRef bHasIndex Returns Boolean
30975>>>>>>>        Handle hoFocus
30975>>>>>>>        Boolean bISDeo bIsControl
30975>>>>>>>        Integer iFile iField
30975>>>>>>>        Get DEOFocus of desktop to hoFocus
30976>>>>>>>        Get Is_Function Get_Deo_Object hoFocus True to bIsDeo
30977>>>>>>>        If bISDEO Begin
30979>>>>>>>            Move False to bHasRecord
30980>>>>>>>            Move False to bChanged
30981>>>>>>>            Move False to bHasIndex
30982>>>>>>>            Get Server of hoFocus to hoServer
30983>>>>>>>            If hoServer Begin
30985>>>>>>>                Get HasRecord of hoServer to bHasRecord
30986>>>>>>>                Get Should_Save of hoServer to bChanged
30987>>>>>>>                Get Is_Function Get_DEO_Control_Object hoFocus False to bIsControl
30988>>>>>>>                If (bIsControl) Begin
30990>>>>>>>                    Get Data_File of hoFocus to iFile
30991>>>>>>>                    Get Data_Field of hoFocus to iField
30992>>>>>>>                    Move ( iFile>0 and File_Field_Index(hoServer,iFile,iField)>-1) to bHasIndex
30993>>>>>>>                End
30993>>>>>>>>
30993>>>>>>>            End
30993>>>>>>>>
30993>>>>>>>        End
30993>>>>>>>>
30993>>>>>>>        Function_Return bISDeo
30994>>>>>>>    End_Function
30995>>>>>>>    
30995>>>>>>>    // Find all controls within this control with the passed Id.
30995>>>>>>>    Procedure ControlsInControl Integer iId Handle hoControl Variant[] ByRef ArrayOfvControls
30997>>>>>>>        Variant vCommandBar
30997>>>>>>>        Handle  hoCommandBar
30997>>>>>>>        Integer eType
30997>>>>>>>        Get ComType of hoControl to eType
30998>>>>>>>        If (eType=xtpControlPopup or eType=xtpControlButtonPopup or eType=xtpControlSplitButtonPopup) Begin
31000>>>>>>>            Get Create U_cCJCommandBar to hoCommandbar
31001>>>>>>>            Get ComCommandBar of hoControl to vCommandBar
31002>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
31003>>>>>>>            Send ControlsInCommandBar iId hoCommandBar (&ArrayOfvControls)
31004>>>>>>>            Send Destroy of hoCommandBar
31005>>>>>>>        End
31005>>>>>>>>
31005>>>>>>>    End_Procedure
31006>>>>>>>    
31006>>>>>>>    // Find all controls within this commandbar with the passed Id.
31006>>>>>>>    Procedure ControlsInCommandBar Integer iId Handle hoCommandBar Variant[] ByRef ArrayOfvControls
31008>>>>>>>        Variant vNewControl  vNewControls
31008>>>>>>>        Handle  hoNewControl hoNewControls
31008>>>>>>>        Integer iControls i  iNewId
31008>>>>>>>        
31008>>>>>>>        Get Create U_cCJCommandBarControls to hoNewControls
31009>>>>>>>        Get Create U_cCJCommandBarPopup to hoNewControl
31010>>>>>>>        
31010>>>>>>>        Get ComControls of hoCommandBar to vNewControls
31011>>>>>>>        Set pvComObject of hoNewControls to vNewControls
31012>>>>>>>        
31012>>>>>>>        Get ComCount of hoNewControls to iControls
31013>>>>>>>        For i from 1 to iControls
31019>>>>>>>>
31019>>>>>>>            Get ComItem of hoNewControls i to  vNewControl
31020>>>>>>>            Set pvComObject of hoNewControl to vNewControl
31021>>>>>>>            
31021>>>>>>>            Get ComId of hoNewControl to iNewId
31022>>>>>>>            If (iNewId=iId) Begin
31024>>>>>>>                Move vNewControl to ArrayOfvControls[SizeOfArray(ArrayOfvControls)]
31025>>>>>>>            End
31025>>>>>>>>
31025>>>>>>>            
31025>>>>>>>            Send ControlsInControl iId hoNewControl (&ArrayOfvControls)
31026>>>>>>>        Loop
31027>>>>>>>>
31027>>>>>>>        
31027>>>>>>>        Send Destroy of hoNewControl
31028>>>>>>>        Send Destroy of hoNewControls
31029>>>>>>>    End_Procedure
31030>>>>>>>    
31030>>>>>>>    // Find all controls within the commandbarsystem with the passed Id.
31030>>>>>>>    // This can be used to search for Ids within a popup menu item. You only need to use
31030>>>>>>>    // this is there is a chance that there will be more than one control with this id.
31030>>>>>>>    Function FindControls Integer iId Returns Variant[]
31032>>>>>>>        Variant[] ArrayOfvControls
31033>>>>>>>        Variant vCommandBar
31033>>>>>>>        Integer iCommandBars i
31033>>>>>>>        Handle hoCommandBar
31033>>>>>>>        
31033>>>>>>>        Get Create U_cCJCommandBar to hoCommandbar
31034>>>>>>>        Get ComCount to iCommandBars
31035>>>>>>>        For i from 1 to iCommandBars
31041>>>>>>>>
31041>>>>>>>            Get ComItem i to vCommandBar
31042>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
31043>>>>>>>            Send ControlsInCommandBar iId hoCommandBar (&ArrayOfvControls)
31044>>>>>>>        Loop
31045>>>>>>>>
31045>>>>>>>        Send Destroy of hoCommandBar
31046>>>>>>>        Function_Return ArrayOfvControls
31047>>>>>>>    End_Function
31048>>>>>>>    
31048>>>>>>>    
31048>>>>>>>    
31048>>>>>>>    // this sends update to the action of all of the child menu items. Note these are the children
31048>>>>>>>    // of visual control, not the children of the action. This is used to enable, disable all
31048>>>>>>>    // menu items, etc.
31048>>>>>>>    
31048>>>>>>>    Procedure PopupInit Handle hoCommandBar Handle hoCommandBarControls
31050>>>>>>>        Handle hoControl hoAction hoItem
31050>>>>>>>        Variant vAction vControl
31050>>>>>>>        Integer i iCount
31050>>>>>>>        
31050>>>>>>>        Get Create U_cCJCommandBarControl to hoControl
31051>>>>>>>        Get Create U_cCJCommandBarAction to hoAction
31052>>>>>>>        
31052>>>>>>>        Get ComCount of hoCommandBarControls to iCount
31053>>>>>>>        // for each control we must find its action and set the action, which in
31053>>>>>>>        // turn will set this control (and any other control there might be with that action).
31053>>>>>>>        For i from 1 to iCount
31059>>>>>>>>
31059>>>>>>>            Get ComItem of hoCommandBarControls i to vControl
31060>>>>>>>            Set pvComObject of hoControl to vControl
31061>>>>>>>            Get ComAction of hoControl to vAction
31062>>>>>>>            // it is possible that there will be no action, in which case do nothing
31062>>>>>>>            If not (IsNullComObject(vAction)) Begin
31064>>>>>>>                Set pvComObject of hoAction to vAction
31065>>>>>>>                Get ComTag of hoAction to hoItem
31066>>>>>>>                If hoItem Begin
31068>>>>>>>                    Send Update of hoItem
31069>>>>>>>                End
31069>>>>>>>>
31069>>>>>>>            End
31069>>>>>>>>
31069>>>>>>>        Loop
31070>>>>>>>>
31070>>>>>>>        
31070>>>>>>>        Send Destroy of hoAction
31071>>>>>>>        Send Destroy of hoControl
31072>>>>>>>    End_Procedure
31073>>>>>>>    
31073>>>>>>>    
31073>>>>>>>    Procedure OnCreate
31075>>>>>>>        Forward Send OnCreate
31077>>>>>>>        Send CreateCommandBars
31078>>>>>>>    End_Procedure
31079>>>>>>>    
31079>>>>>>>    Procedure OnCreateCommandBars
31081>>>>>>>    End_Procedure
31082>>>>>>>    
31082>>>>>>>    Procedure OnRelease
31084>>>>>>>    End_Procedure
31085>>>>>>>    
31085>>>>>>>    Procedure OnUpdate
31087>>>>>>>    End_Procedure
31088>>>>>>>    
31088>>>>>>>    Procedure OnComExecute Variant llControl
31090>>>>>>>        Handle hoControl hoAction hoActionPointer
31090>>>>>>>        Variant vAction
31090>>>>>>>        Get Create U_cCJCommandBarControl to hoControl
31091>>>>>>>        Get Create U_cCJCommandBarAction to hoAction
31092>>>>>>>        
31092>>>>>>>        Set pvComObject of hoControl to llControl
31093>>>>>>>        Get ComAction of hoControl to vAction
31094>>>>>>>        // There should always be an action but it is possible that all
31094>>>>>>>        // CJ controls will not use this. (colorselector). So we must test.
31094>>>>>>>        If not (IsNullComObject(vAction)) Begin
31096>>>>>>>            Set pvComObject of hoAction to vAction
31097>>>>>>>            Get ComTag of hoAction to hoActionPointer
31098>>>>>>>        End
31098>>>>>>>>
31098>>>>>>>        Send Destroy of hoAction
31099>>>>>>>        Send Destroy of hoControl
31100>>>>>>>        
31100>>>>>>>        If hoActionPointer Begin
31102>>>>>>>            Send Execute of hoActionPointer llControl
31103>>>>>>>        End
31103>>>>>>>>
31103>>>>>>>        Else Begin
31104>>>>>>>            // if for some reason there is no action COM and/or DF object
31104>>>>>>>            // we allow this to be handled by this class as an unhandled
31104>>>>>>>            // execute
31104>>>>>>>            Send OnUnhandledExecute llControl
31105>>>>>>>        End
31105>>>>>>>>
31105>>>>>>>        
31105>>>>>>>    End_Procedure
31106>>>>>>>    
31106>>>>>>>    // this happens when the execute control either has no COM action
31106>>>>>>>    // or it has no DF action object. In such a case, we don't do anything other than
31106>>>>>>>    // call this method. Note that there may be a valid action but fo rsome reason
31106>>>>>>>    // the ComAction property did not get properly assigned by CJ. This seems to happen
31106>>>>>>>    // with the color selector object.
31106>>>>>>>    Procedure OnUnhandledExecute Variant llControl
31108>>>>>>>    End_Procedure
31109>>>>>>>    
31109>>>>>>>    
31109>>>>>>>    Procedure OnComControlSelected Variant llControl
31111>>>>>>>        Handle hoControl hoAction hoActionPointer
31111>>>>>>>        Variant vAction
31111>>>>>>>        If (not(IsNullComObject(llControl))) Begin
31113>>>>>>>            Get Create U_cCJCommandBarControl to hoControl
31114>>>>>>>            Get Create U_cCJCommandBarAction to hoAction
31115>>>>>>>            
31115>>>>>>>            Set pvComObject of hoControl to llControl
31116>>>>>>>            Get ComAction of hoControl to vAction
31117>>>>>>>            If (not(IsNullComObject(vAction))) Begin
31119>>>>>>>                Set pvComObject of hoAction to vAction
31120>>>>>>>                Get ComTag of hoAction to hoActionPointer
31121>>>>>>>            End
31121>>>>>>>>
31121>>>>>>>            Send Destroy of hoAction
31122>>>>>>>            Send Destroy of hoControl
31123>>>>>>>            
31123>>>>>>>            If hoActionPointer Begin
31125>>>>>>>                Send OnSelected of hoActionPointer llControl
31126>>>>>>>            End
31126>>>>>>>>
31126>>>>>>>            Else Begin
31127>>>>>>>                Send OnUnhandledControlSelected llControl
31128>>>>>>>            End
31128>>>>>>>>
31128>>>>>>>        End
31128>>>>>>>>
31128>>>>>>>        
31128>>>>>>>    End_Procedure
31129>>>>>>>    
31129>>>>>>>    Procedure OnUnhandledControlSelected Variant llControl
31131>>>>>>>    End_Procedure
31132>>>>>>>    
31132>>>>>>>    Procedure OnComInitCommandsPopup Variant llCommandBar
31134>>>>>>>        Handle hoCommandBar hoAction hoActionPointer hoCommandBarControl hoCommandBarControls
31134>>>>>>>        Variant vAction vCommandBarControl vCommandBarControls
31134>>>>>>>        Integer eType
31134>>>>>>>        
31134>>>>>>>        Get Create U_cCJCommandbar to hoCommandBar
31135>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
31136>>>>>>>        
31136>>>>>>>        Set pvComObject of hoCommandBar to llCommandBar
31137>>>>>>>        Get ComControls of hoCommandBar to vCommandBarControls
31138>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
31139>>>>>>>        
31139>>>>>>>        Get ComType of hoCommandBar to eType
31140>>>>>>>        
31140>>>>>>>        // if no parent it's a context menu. This is not handled here. It is handled by
31140>>>>>>>        // the context menu during the popup
31140>>>>>>>        Get ComParent of hoCommandBar to vCommandBarControl
31141>>>>>>>        If (not(IsNullComObject(vCommandBarControl))) Begin
31143>>>>>>>            // set all the child objects enabled and disabled
31143>>>>>>>            Send PopupInit hoCommandBar hoCommandBarControls
31144>>>>>>>            
31144>>>>>>>            Get Create U_cCJCommandbarControl to hoCommandBarControl
31145>>>>>>>            Get Create U_cCJCommandbarAction to hoAction
31146>>>>>>>            
31146>>>>>>>            Set pvComObject of hoCommandBarControl to vCommandBarControl
31147>>>>>>>            Get ComAction of hoCommandBarControl to vAction
31148>>>>>>>            // builtin menus like customize may not have actions
31148>>>>>>>            If not (IsNullComObject(vAction)) Begin
31150>>>>>>>                Set pvComObject of hoAction to vAction
31151>>>>>>>                Get ComTag of hoAction to hoActionPointer
31152>>>>>>>            End
31152>>>>>>>>
31152>>>>>>>            
31152>>>>>>>            Send Destroy of hoAction
31153>>>>>>>            Send Destroy of hoCommandBarControl
31154>>>>>>>            
31154>>>>>>>            If hoActionPointer Begin
31156>>>>>>>                Send OnPopupInit of hoActionPointer vCommandBarControl hoCommandBarControls
31157>>>>>>>            End
31157>>>>>>>>
31157>>>>>>>            Else Begin
31158>>>>>>>                Send OnUnhandledInitCommandsPopup llCommandBar
31159>>>>>>>            End
31159>>>>>>>>
31159>>>>>>>        End
31159>>>>>>>>
31159>>>>>>>        
31159>>>>>>>        Send Destroy of hoCommandBarControls
31160>>>>>>>        Send Destroy of hoCommandBar
31161>>>>>>>        
31161>>>>>>>    End_Procedure
31162>>>>>>>    
31162>>>>>>>    Procedure OnUnhandledInitCommandsPopup Variant llCommandBar
31164>>>>>>>    End_Procedure
31165>>>>>>>    
31165>>>>>>>    
31165>>>>>>>    Procedure OnComCustomization Variant vCustomizeOptions
31167>>>>>>>        Handle hoCustomize
31167>>>>>>>        Boolean bShowKeyboardPage bShowOptionsPage
31167>>>>>>>        
31167>>>>>>>        // directly support setting of keyboard and option tab pages.
31167>>>>>>>        // any other customization should be done by developer
31167>>>>>>>        Get pbCustomizeShowKeyboardPage to bShowKeyboardPage
31168>>>>>>>        Get pbCustomizeShowOptionsPage to bShowOptionsPage
31169>>>>>>>        Get Create U_cCJCustomizeOptions to hoCustomize
31170>>>>>>>        Set pvComObject of hoCustomize to vCustomizeOptions
31171>>>>>>>        Set ComShowKeyboardPage of hoCustomize to bShowKeyboardPage
31172>>>>>>>        Set ComShowOptionsPage of hoCustomize to bShowOptionsPage
31173>>>>>>>        Send Destroy of hoCustomize
31174>>>>>>>        
31174>>>>>>>        Forward Send OnComCustomization vCustomizeOptions
31176>>>>>>>    End_Procedure
31177>>>>>>>    
31177>>>>>>>    
31177>>>>>>>    // we do it this way so function DFBinPath is always created. Makes Compiler happy
31177>>>>>>>    Function DFBinPath Returns String
31179>>>>>>>        String sRoot
31179>>>>>>>        Get DFBinPath of ghoApplication to sRoot
31180>>>>>>>        Function_Return sRoot
31181>>>>>>>    End_Function
31182>>>>>>>    
31182>>>>>>>    
31182>>>>>>>    // returns the path for the ResourceImages, which is bin\styles (as of 19)
31182>>>>>>>    //
31182>>>>>>>    Function ResourceImagesPath Returns String
31184>>>>>>>        String sPath
31184>>>>>>>        If ghoApplication Begin
31186>>>>>>>            Get DFBinPath to sPath
31187>>>>>>>            Move (sPath +"\styles") to sPath
31188>>>>>>>        End
31188>>>>>>>>
31188>>>>>>>        Else Begin
31189>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
31190>>>>>>>>
31190>>>>>>>        End
31190>>>>>>>>
31190>>>>>>>        Function_Return sPath
31191>>>>>>>    End_Function
31192>>>>>>>    
31192>>>>>>>    // Loads theme images for File and Ini. This is used with peVisualTheme=xtpThemeResource
31192>>>>>>>    // which must be set *after* this is called.
31192>>>>>>>    //
31192>>>>>>>    // If the sFile is passed relative, it expects the dll to be placed in \Programs
31192>>>>>>>    // which the developer must do.
31192>>>>>>>    //
31192>>>>>>>    // Normally you'd call this within OnCreateCommandBars as follows:
31192>>>>>>>    //    Procedure OnCreateCommandBars
31192>>>>>>>    //        Boolean bOk
31192>>>>>>>    //        Forward Send OnCreateCommandBars
31192>>>>>>>    //        Get LoadResourceImagesFromFile "Office2010.dll" "Office2010Black.ini" to bOk
31192>>>>>>>    //        Set peVisualTheme to xtpThemeResource
31192>>>>>>>    //    End_Procedure
31192>>>>>>>    
31192>>>>>>>    Function LoadResourceImagesFromFile String sFile String sIni Returns Boolean
31194>>>>>>>        Handle hoGlobal hoRes
31194>>>>>>>        Variant vGlobal vRes
31194>>>>>>>        Boolean bOk
31194>>>>>>>        String sDir
31194>>>>>>>        Get Create (RefClass(cCJCommandBarsGlobalSettings)) to hoGlobal
31195>>>>>>>        Send CreateComObject of hoGlobal
31196>>>>>>>        If (not(IsFileNameQualified(sFile))) Begin
31198>>>>>>>            Get ResourceImagesPath to sDir
31199>>>>>>>            Move (sDir + "\"+ sFile) to sFile
31200>>>>>>>        End
31200>>>>>>>>
31200>>>>>>>        Get ComResourceImages of hoGlobal to vRes
31201>>>>>>>        Get Create (RefClass(cCJResourceImages)) to hoRes
31202>>>>>>>        Set pvComObject of hoRes to vRes
31203>>>>>>>        Get ComLoadFromFile of hoRes sFile sIni to bOk
31204>>>>>>>        Send Destroy of hoRes
31205>>>>>>>        Send Destroy of hoGlobal
31206>>>>>>>        Function_Return bOk
31207>>>>>>>    End_Function
31208>>>>>>>    
31208>>>>>>>End_Class
31209>>>>>>>
31209>>>>>>>Class cCJCommandBarMixin is a Mixin
31210>>>>>>>    
31210>>>>>>>    Procedure Define_cCJCommandBarMixin
31212>>>>>>>        
31212>>>>>>>        Property Integer piBarID            0
31213>>>>>>>        
31213>>>>>>>        Property Boolean pbDockNextTo             True
31214>>>>>>>        
31214>>>>>>>        Property Integer peBarPosition xtpBarTop
31215>>>>>>>        
31215>>>>>>>        Property Boolean pbEnableDocking           True
31216>>>>>>>        Property Boolean pbHideWrap                False
31217>>>>>>>        Property Integer peStretched               stNoStretch
31218>>>>>>>        
31218>>>>>>>        Property Boolean pbPrivateCloseable        True
31219>>>>>>>        Property Boolean pbPrivateCustomizable     True
31220>>>>>>>        Property Boolean pbPrivateEnableAnimation  False
31221>>>>>>>        Property Boolean pbPrivateShowExpandButton True
31222>>>>>>>        Property String  psPrivateTitle            "Toolbar"
31223>>>>>>>        Property Boolean pbPrivateVisible          True
31224>>>>>>>        Property Integer piPrivateWidth            0
31225>>>>>>>        Property Boolean pbPrivateGripper          True
31226>>>>>>>        
31226>>>>>>>        Set peNeighborhood to nhNo
31227>>>>>>>        
31227>>>>>>>    End_Procedure
31228>>>>>>>    
31228>>>>>>>    // Generic Get and Set property that is used to get and set a DF/COM property.
31228>>>>>>>    // can be used by any integer or boolean property
31228>>>>>>>    
31228>>>>>>>    Procedure SetComProperty Handle hmPrivateProperty Handle hmCOMProperty Integer iValue
31230>>>>>>>        Set hmPrivateProperty to iValue
31231>>>>>>>        If (IsComObjectCreated(Self)) Begin
31233>>>>>>>            Set hmCOMProperty to iValue
31234>>>>>>>        End
31234>>>>>>>>
31234>>>>>>>    End_Procedure
31235>>>>>>>    
31235>>>>>>>    Function GetComProperty Handle hmPrivateProperty Handle hmCOMProperty Returns Integer
31237>>>>>>>        Integer iValue
31237>>>>>>>        If (IsComObjectCreated(Self)) Begin
31239>>>>>>>            Get hmCOMProperty to iValue
31240>>>>>>>        End
31240>>>>>>>>
31240>>>>>>>        Else Begin
31241>>>>>>>            Get hmPrivateProperty to iValue
31242>>>>>>>        End
31242>>>>>>>>
31242>>>>>>>        Function_Return iValue
31243>>>>>>>    End_Function
31244>>>>>>>    
31244>>>>>>>    Procedure Set pbCloseable Boolean bValue
31246>>>>>>>        Send SetComProperty set_pbPrivateCloseable set_ComCloseable bValue
31247>>>>>>>    End_Procedure
31248>>>>>>>    
31248>>>>>>>    Function pbCloseable Returns Boolean
31250>>>>>>>        Boolean bValue
31250>>>>>>>        Get GetComProperty get_pbPrivateCloseable get_ComCloseable to bValue
31251>>>>>>>        Function_Return bValue
31252>>>>>>>    End_Function
31253>>>>>>>    
31253>>>>>>>    Procedure Set pbCustomizable Boolean bValue
31255>>>>>>>        Send SetComProperty set_pbPrivateCustomizable set_ComCustomizable bValue
31256>>>>>>>    End_Procedure
31257>>>>>>>    
31257>>>>>>>    Function pbCustomizable Returns Boolean
31259>>>>>>>        Boolean bValue
31259>>>>>>>        Get GetComProperty get_pbPrivateCustomizable get_ComCustomizable to bValue
31260>>>>>>>        Function_Return bValue
31261>>>>>>>    End_Function
31262>>>>>>>    
31262>>>>>>>    Procedure Set pbEnableAnimation Boolean bValue
31264>>>>>>>        Send SetComProperty set_pbPrivateEnableAnimation set_ComEnableAnimation bValue
31265>>>>>>>    End_Procedure
31266>>>>>>>    
31266>>>>>>>    Function pbEnableAnimation Returns Boolean
31268>>>>>>>        Boolean bValue
31268>>>>>>>        Get GetComProperty get_pbPrivateEnableAnimation get_ComEnableAnimation to bValue
31269>>>>>>>        Function_Return bValue
31270>>>>>>>    End_Function
31271>>>>>>>    
31271>>>>>>>    Procedure Set pbShowExpandButton Boolean bValue
31273>>>>>>>        Send SetComProperty set_pbPrivateShowExpandButton set_ComShowExpandButton bValue
31274>>>>>>>    End_Procedure
31275>>>>>>>    
31275>>>>>>>    Function pbShowExpandButton Returns Boolean
31277>>>>>>>        Boolean bValue
31277>>>>>>>        Get GetComProperty get_pbPrivateShowExpandButton get_ComShowExpandButton to bValue
31278>>>>>>>        Function_Return bValue
31279>>>>>>>    End_Function
31280>>>>>>>    
31280>>>>>>>    Procedure Set pbVisible Boolean bValue
31282>>>>>>>        Send SetComProperty set_pbPrivateVisible set_ComVisible bValue
31283>>>>>>>    End_Procedure
31284>>>>>>>    
31284>>>>>>>    Function pbVisible Returns Boolean
31286>>>>>>>        Boolean bValue
31286>>>>>>>        Get GetComProperty get_pbPrivateVisible get_ComVisible to bValue
31287>>>>>>>        Function_Return bValue
31288>>>>>>>    End_Function
31289>>>>>>>    
31289>>>>>>>    Procedure Set piWidth Integer iValue
31291>>>>>>>        Send SetComProperty set_piPrivateWidth set_ComWidth iValue
31292>>>>>>>    End_Procedure
31293>>>>>>>    
31293>>>>>>>    Function piWidth Returns Integer
31295>>>>>>>        Integer iValue
31295>>>>>>>        Get GetComProperty get_piPrivateWidth get_ComWidth to iValue
31296>>>>>>>        Function_Return iValue
31297>>>>>>>    End_Function
31298>>>>>>>    
31298>>>>>>>    Procedure Set pbGripper Boolean bValue
31300>>>>>>>        Set pbPrivateGripper to bValue
31301>>>>>>>        If (IsComObjectCreated(Self)) Begin
31303>>>>>>>            Send ComModifyStyle (If(not(bValue),xtp_CBRS_GRIPPER,0)) (If(bValue,xtp_CBRS_GRIPPER,0))
31304>>>>>>>        End
31304>>>>>>>>
31304>>>>>>>    End_Procedure
31305>>>>>>>    
31305>>>>>>>    Function pbGripper Returns Boolean
31307>>>>>>>        Boolean bValue
31307>>>>>>>        Get pbPrivateGripper to bValue
31308>>>>>>>        Function_Return bValue
31309>>>>>>>    End_Function
31310>>>>>>>    
31310>>>>>>>    Procedure Set psTitle String sValue
31312>>>>>>>        Set psPrivateTitle to sValue
31313>>>>>>>        If (IsComObjectCreated(Self)) Begin
31315>>>>>>>            Set ComTitle to sValue
31316>>>>>>>        End
31316>>>>>>>>
31316>>>>>>>    End_Procedure
31317>>>>>>>    
31317>>>>>>>    Function psTitle Returns String
31319>>>>>>>        String sValue
31319>>>>>>>        If (IsComObjectCreated(Self)) Begin
31321>>>>>>>            Get ComTitle to sValue
31322>>>>>>>        End
31322>>>>>>>>
31322>>>>>>>        Else Begin
31323>>>>>>>            Get psPrivateTitle to sValue
31324>>>>>>>        End
31324>>>>>>>>
31324>>>>>>>        Function_Return sValue
31325>>>>>>>    End_Function
31326>>>>>>>    
31326>>>>>>>    Procedure InitComInstance
31328>>>>>>>        Handle hoCommandBars hoNextTo
31328>>>>>>>        Variant vCommandBar vNextTo
31328>>>>>>>        String sTitle
31328>>>>>>>        Integer iBarId iWidth iDockFgs iBars eBarPosition
31328>>>>>>>        Integer eNextToPosition eNextToType iDockingFlags eStretched
31328>>>>>>>        Boolean bCloseable bCustomizable bEnableAnimation bShowExpandButton
31328>>>>>>>        Boolean bEnableDocking bHideWrap
31328>>>>>>>        Boolean bGripper bDockNextTo bNextToVisible
31328>>>>>>>        
31328>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31329>>>>>>>        
31329>>>>>>>        Get psPrivateTitle to sTitle
31330>>>>>>>        Get pbPrivateCloseable to bCloseable
31331>>>>>>>        Get pbPrivateCustomizable to bCustomizable
31332>>>>>>>        Get pbPrivateEnableAnimation to bEnableAnimation
31333>>>>>>>        Get pbPrivateShowExpandButton to bShowExpandButton
31334>>>>>>>        Get piPrivateWidth to iWidth
31335>>>>>>>        Get pbEnableDocking to bEnableDocking
31336>>>>>>>        Get pbHideWrap to bHideWrap
31337>>>>>>>        Get peStretched to eStretched
31338>>>>>>>        
31338>>>>>>>        Get pbPrivateGripper to bGripper
31339>>>>>>>        Get piBarId to iBarId
31340>>>>>>>        Get pbDockNextTo to bDockNextTo
31341>>>>>>>        Get peBarPosition to eBarPosition
31342>>>>>>>        
31342>>>>>>>        
31342>>>>>>>        Get CreateCommandBar to vCommandBar
31343>>>>>>>        
31343>>>>>>>        Set pvComObject to vCommandBar
31344>>>>>>>        Set ComTitle to sTitle
31345>>>>>>>        Set ComCloseable to bCloseable
31346>>>>>>>        Set ComCustomizable to bCustomizable
31347>>>>>>>        Set ComEnableAnimation to bEnableAnimation
31348>>>>>>>        Set ComShowExpandButton to bShowExpandButton
31349>>>>>>>        
31349>>>>>>>        Send ComModifyStyle (If(not(bGripper),xtp_CBRS_GRIPPER,0)) (If(bGripper,xtp_CBRS_GRIPPER,0))
31350>>>>>>>        
31350>>>>>>>        If (iBarId<>0) Begin
31352>>>>>>>            Set ComBarID to iBarId
31353>>>>>>>        End
31353>>>>>>>>
31353>>>>>>>        Else Begin
31354>>>>>>>            Get ComBarId to iBarId
31355>>>>>>>            Set piBarID to iBarId
31356>>>>>>>        End
31356>>>>>>>>
31356>>>>>>>        
31356>>>>>>>        // enabled docking is determiend by iORing flags. We simplify docking to allow all or
31356>>>>>>>        // none. In addition we support hidewrap and the two stretched flags.
31356>>>>>>>        If bEnableDocking Begin
31358>>>>>>>            Move (iDockingFlags ior xtpFlagAlignAny ior xtpFlagFloating) to iDockingFlags
31359>>>>>>>        End
31359>>>>>>>>
31359>>>>>>>        If bHideWrap Begin
31361>>>>>>>            Move (iDockingFlags ior xtpFlagHideWrap) to iDockingFlags
31362>>>>>>>        End
31362>>>>>>>>
31362>>>>>>>        If (eStretched=stStretch) Begin
31364>>>>>>>            Move (iDockingFlags ior xtpFlagStretched) to iDockingFlags
31365>>>>>>>        End
31365>>>>>>>>
31365>>>>>>>        Else If (eStretched=stStretchShared) Begin
31368>>>>>>>            Move (iDockingFlags ior xtpFlagStretchedShared) to iDockingFlags
31369>>>>>>>        End
31369>>>>>>>>
31369>>>>>>>        Send ComEnableDocking iDockingFlags
31370>>>>>>>        
31370>>>>>>>        If (iWidth>0) Begin
31372>>>>>>>            Set ComWidth to iWidth
31373>>>>>>>        End
31373>>>>>>>>
31373>>>>>>>        
31373>>>>>>>        // if we DockNextTo we want to doc "next" to the last command bar that is located
31373>>>>>>>        // in the same position (e.g. top, bottom, left, right). "Next" is relative to the position
31373>>>>>>>        // where top/bottom is Right-of and let/right is below. Menubars are excluded from this logic
31373>>>>>>>        // if we DockNextTo we want to doc "next" to the last command bar that is located
31373>>>>>>>        // in the same position (e.g. top, bottom, left, right). "Next" is relative to the position
31373>>>>>>>        // where top/bottom is Right-of and let/right is below. Menubars are excluded from this logic
31373>>>>>>>        If bDockNextTo Begin
31375>>>>>>>            Get ComCount of hoCommandBars to iBars
31376>>>>>>>            Get Create U_cCJCommandBar to hoNextTo
31377>>>>>>>            While (iBars>1)
31381>>>>>>>                Get ComItem of hoCommandBars (iBars-1) to vNextTo
31382>>>>>>>                Set pvComObject of hoNextTo to vNextTo
31383>>>>>>>                Get ComVisible of hoNextTo to bNextToVisible
31384>>>>>>>                Get ComPosition of hoNextTo to eNextToPosition
31385>>>>>>>                Get ComType of hoNextTo to eNextToType
31386>>>>>>>                If (bNextToVisible and eNextToType=xtpBarTypeNormal and eNextToPosition=eBarPosition) Begin
31388>>>>>>>                    Send DockNextTo vCommandBar vNextTo
31389>>>>>>>                    Move 0 to iBars
31390>>>>>>>                End
31390>>>>>>>>
31390>>>>>>>                Decrement iBars
31391>>>>>>>            Loop
31392>>>>>>>>
31392>>>>>>>            Send Destroy of hoNextTo
31393>>>>>>>        End
31393>>>>>>>>
31393>>>>>>>        
31393>>>>>>>    End_Procedure
31394>>>>>>>    
31394>>>>>>>    // This is called when the commandbar is created and is bound to the commandbar object.
31394>>>>>>>    Procedure OnCreate
31396>>>>>>>    End_Procedure
31397>>>>>>>    
31397>>>>>>>    Procedure End_Construct_Object
31399>>>>>>>        Integer iID
31399>>>>>>>        Handle hoCommandBars
31399>>>>>>>        Get piBarId to iID
31400>>>>>>>        If (iID=0) Begin
31402>>>>>>>            Get CommandBarSystemObject to hoCommandBars
31403>>>>>>>            Get AssignBarId of hoCommandBars to iId
31404>>>>>>>            Set piBarId to iID
31405>>>>>>>        End
31405>>>>>>>>
31405>>>>>>>        Forward Send End_Construct_Object
31407>>>>>>>    End_Procedure
31408>>>>>>>    
31408>>>>>>>End_Class
31409>>>>>>>
31409>>>>>>>
31409>>>>>>>
31409>>>>>>>
31409>>>>>>>
31409>>>>>>>Class cCJAbstractCommandBar is a cCJCommandBar
31410>>>>>>>    
31410>>>>>>>    Import_Class_Protocol cCJCommandBarMixin
31411>>>>>>>    
31411>>>>>>>    Procedure Construct_Object
31413>>>>>>>        Forward Send Construct_Object
31415>>>>>>>        Send Define_cCJCommandBarMixin
31416>>>>>>>    End_Procedure
31417>>>>>>>    
31417>>>>>>>    // Must be defined in a sub-class
31417>>>>>>>    Function CreateCommandBar Returns Variant
31419>>>>>>>        Error DFERR_PROGRAM "Assert: CreateCommandBar not defined in superclass"
31420>>>>>>>>
31420>>>>>>>    End_Function
31421>>>>>>>    
31421>>>>>>>    Procedure CreateComInstance
31423>>>>>>>        Handle hoCommandBarControls
31423>>>>>>>        Variant vCommandBarControls
31423>>>>>>>        
31423>>>>>>>        Send InitComInstance // creates control and returns it attached
31424>>>>>>>        Send OnCreate
31425>>>>>>>        
31425>>>>>>>        
31425>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
31426>>>>>>>        Get ComControls to vCommandBarControls
31427>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
31428>>>>>>>        
31428>>>>>>>        Broadcast Send CreateComInstance hoCommandBarControls
31430>>>>>>>        
31430>>>>>>>        // after this command bar and all its children are created, we set this as the reset point.
31430>>>>>>>        Send ComCreateOriginalControls of hoCommandBarControls
31431>>>>>>>        
31431>>>>>>>        Send Destroy of hoCommandBarControls
31432>>>>>>>        
31432>>>>>>>    End_Procedure
31433>>>>>>>    
31433>>>>>>>End_Class
31434>>>>>>>
31434>>>>>>>Class cCJMenuBar is a cCJAbstractCommandBar
31435>>>>>>>    
31435>>>>>>>    Procedure Construct_object
31437>>>>>>>        Forward Send Construct_Object
31439>>>>>>>        Set piBarId to 1 // menu is always 1
31440>>>>>>>        Set psTitle to "Main Menu"
31441>>>>>>>        Set pbCloseable to False
31442>>>>>>>        Set pbGripper to False
31443>>>>>>>        Set pbEnableDocking to False
31444>>>>>>>        Set pbHideWrap to False
31445>>>>>>>        Set peStretched to stStretch
31446>>>>>>>        Set pbCustomizable to False
31447>>>>>>>        
31447>>>>>>>    End_Procedure
31448>>>>>>>    
31448>>>>>>>    Function CreateCommandBar Returns Variant
31450>>>>>>>        Variant vCommandBar
31450>>>>>>>        Handle hoCommandBars
31450>>>>>>>        Integer eBarPosition
31450>>>>>>>        Get peBarPosition to eBarPosition
31451>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31452>>>>>>>        Get ComActiveMenuBar of hoCommandBars to vCommandBar
31453>>>>>>>        Set pvComObject to vCommandBar
31454>>>>>>>        Set ComPosition to eBarPosition
31455>>>>>>>        Function_Return vCommandBar
31456>>>>>>>    End_Function
31457>>>>>>>    
31457>>>>>>>    
31457>>>>>>>    Procedure CreateComInstance
31459>>>>>>>        // Menubar is invisible by default to allow applications to not force the default menubar on
31459>>>>>>>        // applications that do not have them declared in their application. Here is where we set
31459>>>>>>>        // Visible back to true because if this code is executed then the application really does have
31459>>>>>>>        // a menubar. We do this as late as possible in the process because Set ComVisible is a little
31459>>>>>>>        // fragile if the COM controls are not all set up correctly.
31459>>>>>>>        //17.1
31459>>>>>>>        Boolean bVisible
31459>>>>>>>        Forward Send CreateComInstance
31461>>>>>>>        Get pbPrivateVisible to bVisible
31462>>>>>>>        Set ComVisible to bVisible
31463>>>>>>>    End_Procedure
31464>>>>>>>    
31464>>>>>>>End_Class
31465>>>>>>>
31465>>>>>>>Class cCJToolbar is a cCJAbstractCommandBar
31466>>>>>>>    
31466>>>>>>>    Function CreateCommandBar Returns Variant
31468>>>>>>>        Variant vCommandBar
31468>>>>>>>        Handle hoCommandBars
31468>>>>>>>        Integer eBarPosition
31468>>>>>>>        Get peBarPosition to eBarPosition
31469>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31470>>>>>>>        Get ComAdd of hoCommandBars "Toolbar" eBarPosition to vCommandBar
31471>>>>>>>        Function_Return vCommandBar
31472>>>>>>>    End_Function
31473>>>>>>>    
31473>>>>>>>End_Class
31474>>>>>>>
31474>>>>>>>
31474>>>>>>>Class cCJTabToolBar is a cCJComTabToolBar
31475>>>>>>>    
31475>>>>>>>    Import_Class_Protocol cCJCommandBarMixin
31476>>>>>>>    
31476>>>>>>>    Procedure Construct_Object
31478>>>>>>>        Forward Send Construct_Object
31480>>>>>>>        Send Define_cCJCommandBarMixin
31481>>>>>>>        Property Boolean pbPrivateAllowReorder   False
31482>>>>>>>        
31482>>>>>>>    End_Procedure
31483>>>>>>>    
31483>>>>>>>    Procedure Set pbAllowReorder Boolean bValue
31485>>>>>>>        Send SetComProperty set_pbPrivateAllowReorder set_ComAllowReorder bValue
31486>>>>>>>    End_Procedure
31487>>>>>>>    
31487>>>>>>>    Function pbAllowReorder Returns Boolean
31489>>>>>>>        Boolean bValue
31489>>>>>>>        Get GetComProperty get_pbPrivateAllowReorder get_ComAllowReorder to bValue
31490>>>>>>>        Function_Return bValue
31491>>>>>>>    End_Function
31492>>>>>>>    
31492>>>>>>>    
31492>>>>>>>    Function CreateCommandBar Returns Variant
31494>>>>>>>        Variant vCommandBar
31494>>>>>>>        Handle hoCommandBars
31494>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31495>>>>>>>        Get ComAddTabToolBar of hoCommandBars "TabToolbar" to vCommandBar
31496>>>>>>>        Function_Return vCommandBar
31497>>>>>>>    End_Function
31498>>>>>>>    
31498>>>>>>>    Procedure CreateComInstance
31500>>>>>>>        Handle hoCommandBarControls
31500>>>>>>>        Variant vCommandBarControls
31500>>>>>>>        Boolean bAllowReorder
31500>>>>>>>        Get pbPrivateAllowReorder to bAllowReorder
31501>>>>>>>        
31501>>>>>>>        Send InitComInstance // creates control and returns it attached
31502>>>>>>>        
31502>>>>>>>        Set ComAllowReorder to bAllowReorder
31503>>>>>>>        
31503>>>>>>>        Send OnCreate
31504>>>>>>>        
31504>>>>>>>        
31504>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
31505>>>>>>>        Get ComControls to vCommandBarControls
31506>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
31507>>>>>>>        
31507>>>>>>>        
31507>>>>>>>        Broadcast Send CreateComInstance Self // we pass attached tabmenubar control to tab children
31509>>>>>>>        
31509>>>>>>>        // after this command bar and all its children are created, we set this as the reset point.
31509>>>>>>>        Send ComCreateOriginalControls of hoCommandBarControls
31510>>>>>>>        Send ComUpdateTabs
31511>>>>>>>        Send ComRedrawBar
31512>>>>>>>        Send ComRecalcLayout
31513>>>>>>>        Send Destroy of hoCommandBarControls
31514>>>>>>>        
31514>>>>>>>        //  Commandbars are static and do not change based on loading and editing
31514>>>>>>>        // If so, we will keep the objects bound. If this does not work we will need to
31514>>>>>>>        // use the AttachComObject method.
31514>>>>>>>        
31514>>>>>>>    End_Procedure
31515>>>>>>>    
31515>>>>>>>    Function FindByCategory String sName Returns Variant
31517>>>>>>>        Boolean bAttached bOk
31517>>>>>>>        Handle hoItem
31517>>>>>>>        Variant vItem
31517>>>>>>>        Integer i iCount
31517>>>>>>>        String sCat
31517>>>>>>>        
31517>>>>>>>        Move (IsComObjectCreated(Self)) to bAttached
31518>>>>>>>        If not bAttached Begin
31520>>>>>>>            Error DFERR_PROGRAM "Assert: Find by Category commandbar not attached"
31521>>>>>>>>
31521>>>>>>>            Function_Return (NullComObject())
31522>>>>>>>        End
31522>>>>>>>>
31522>>>>>>>        
31522>>>>>>>        Get Create U_cCJComTabControlItem to hoItem
31523>>>>>>>        Get ComCategoryCount to iCount
31524>>>>>>>        For i from 0 to (iCount-1)
31530>>>>>>>>
31530>>>>>>>            Get ComCategory i to vItem
31531>>>>>>>            Set pvComObject of hoItem to vItem
31532>>>>>>>            Get ComCaption of hoItem to sCat
31533>>>>>>>            Move (sCat=sName) to bOk
31534>>>>>>>            If bOk ;                Break
31537>>>>>>>        Loop
31538>>>>>>>>
31538>>>>>>>        Send destroy of hoItem
31539>>>>>>>        If not bOk Begin
31541>>>>>>>            Move (NullComObject()) to vItem
31542>>>>>>>        End
31542>>>>>>>>
31542>>>>>>>        Function_Return vItem
31543>>>>>>>    End_Function
31544>>>>>>>    
31544>>>>>>>End_Class
31545>>>>>>>
31545>>>>>>>
31545>>>>>>>Class cCJTabControlItem is a cCJComTabControlItem
31546>>>>>>>    
31546>>>>>>>    Procedure Construct_Object
31548>>>>>>>        Forward Send Construct_Object
31550>>>>>>>        Property String psCategory ""
31551>>>>>>>        Property String psToolTip ""
31552>>>>>>>        Property String psImage ""
31553>>>>>>>        Set peNeighborhood to nhNo
31554>>>>>>>    End_Procedure
31555>>>>>>>    
31555>>>>>>>    Procedure CreateComInstance Handle hoTabToolBar
31557>>>>>>>        Handle hoCommandBars hoCommandBarControls  hoControl
31557>>>>>>>        Variant vCommandBarControls vTab vControl
31557>>>>>>>        String sCategory sTip sImage
31557>>>>>>>        Integer iCount i iNewCount iId
31557>>>>>>>        Boolean bOk
31557>>>>>>>        
31557>>>>>>>        Get psCategory to sCategory
31558>>>>>>>        Get psToolTip to sTip
31559>>>>>>>        Get psImage to sImage
31560>>>>>>>        
31560>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31561>>>>>>>        
31561>>>>>>>        Get ComCategoryCount of hoTabToolBar to iCount
31562>>>>>>>        Get ComInsertCategory of hoTabToolbar iCount sCategory to vTab
31563>>>>>>>        Set pvComObject to vTab
31564>>>>>>>        
31564>>>>>>>        Set ComToolTip to sTip
31565>>>>>>>        
31565>>>>>>>        If (sImage<>"") Begin
31567>>>>>>>            Get AddImage of hoCommandBars sImage 0 xtpImageNormal to iId
31568>>>>>>>            Set ComImage to iId
31569>>>>>>>        End
31569>>>>>>>>
31569>>>>>>>        
31569>>>>>>>        If (iCount=0) Begin
31571>>>>>>>            Set ComSelected to True
31572>>>>>>>        End
31572>>>>>>>>
31572>>>>>>>        
31572>>>>>>>        Send OnCreate
31573>>>>>>>        
31573>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
31574>>>>>>>        Get ComControls of hoTabToolBar to vCommandBarControls
31575>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
31576>>>>>>>        
31576>>>>>>>        // before creating the child com controls, get the count of controls
31576>>>>>>>        Get ComCount of hoCommandBarControls to iCount
31577>>>>>>>        
31577>>>>>>>        Broadcast Send CreateComInstance hoCommandBarControls
31579>>>>>>>        
31579>>>>>>>        // get the new count of controls. The difference are the new controls.
31579>>>>>>>        Get ComCount of hoCommandBarControls to iNewCount
31580>>>>>>>        
31580>>>>>>>        Get create U_cCJCommandBarControl to hoControl
31581>>>>>>>        For i from (iCount+1) to iNewCount
31587>>>>>>>>
31587>>>>>>>            Get ComItem of hoCommandBarControls i to vControl
31588>>>>>>>            Set pvComObject of hoControl to vControl
31589>>>>>>>            Set ComCategory of hoControl to sCategory
31590>>>>>>>        Loop
31591>>>>>>>>
31591>>>>>>>        Send Destroy of hoControl
31592>>>>>>>        Send Destroy of hoCommandBarControls
31593>>>>>>>        
31593>>>>>>>    End_Procedure
31594>>>>>>>    
31594>>>>>>>    Procedure OnCreate
31596>>>>>>>    End_Procedure
31597>>>>>>>    
31597>>>>>>>End_Class
31598>>>>>>>
31598>>>>>>>
31598>>>>>>>
31598>>>>>>>Class cCJContextMenu is a cCJCommandBar
31599>>>>>>>    
31599>>>>>>>    Procedure Construct_Object
31601>>>>>>>        Forward Send Construct_Object
31603>>>>>>>        Property Boolean pbEnableAnimation  False
31604>>>>>>>        Property Boolean pbControlDoubleGripper    False
31605>>>>>>>        Property Boolean pbControlPopupToolBar   False
31606>>>>>>>        
31606>>>>>>>        Property Handle phoCommandBars 0
31607>>>>>>>        
31607>>>>>>>        // this is set using SetPopupLocation.
31607>>>>>>>        Property tWinPoint pLocation
31608>>>>>>>    End_Procedure
31609>>>>>>>    
31609>>>>>>>    
31609>>>>>>>    // context menus use a differnt logic for finding the commandbars. Normally it will just attach to
31609>>>>>>>    // the global commandbars. However, a developer can choose attach this to a different commandbars by
31609>>>>>>>    // setting phoCommandBars.
31609>>>>>>>    Function CommandBarSystemObject Returns Handle
31611>>>>>>>        Handle hoCommandBars
31611>>>>>>>        Get phoCommandBars to hoCommandBars
31612>>>>>>>        If (hoCommandBars=0) Begin
31614>>>>>>>            Move ghoCommandBars to hoCommandBars
31615>>>>>>>        End
31615>>>>>>>>
31615>>>>>>>        Function_Return hoCommandBars
31616>>>>>>>    End_Function
31617>>>>>>>    
31617>>>>>>>    Function CreateCommandBar Returns Variant
31619>>>>>>>        Variant vCommandBar
31619>>>>>>>        Handle hoCommandBars
31619>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31620>>>>>>>        Get ComAdd of hoCommandBars "Context Toolbar" xtpBarPopup to vCommandBar
31621>>>>>>>        Function_Return vCommandBar
31622>>>>>>>    End_Function
31623>>>>>>>    
31623>>>>>>>    Procedure CreatePopupComInstance
31625>>>>>>>        Handle hoCommandBars hoCommandBarControls
31625>>>>>>>        Variant vCommandBar vCommandBarControls
31625>>>>>>>        Boolean bEnableAnimation bDoubleGripper bPopupToolBar
31625>>>>>>>        
31625>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31626>>>>>>>        Get pbEnableAnimation to bEnableAnimation
31627>>>>>>>        Get pbControlDoubleGripper to bDoubleGripper
31628>>>>>>>        Get pbControlPopupToolBar  to bPopupToolBar
31629>>>>>>>        
31629>>>>>>>        Get CreateCommandBar to vCommandBar
31630>>>>>>>        Set pvComObject to vCommandBar
31631>>>>>>>        
31631>>>>>>>        Set ComEnableAnimation to bEnableAnimation
31632>>>>>>>        Set ComDoubleGripper to bDoubleGripper
31633>>>>>>>        Send ComSetPopupToolBar bPopupToolBar
31634>>>>>>>        
31634>>>>>>>        Send OnCreate
31635>>>>>>>        
31635>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
31636>>>>>>>        Get ComControls to vCommandBarControls
31637>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
31638>>>>>>>        
31638>>>>>>>        Broadcast Send CreateComInstance hoCommandBarControls
31640>>>>>>>        
31640>>>>>>>        // This does the same thing OnComPopupInit does.
31640>>>>>>>        
31640>>>>>>>        // this does all of the inital setting of enabled, etc.
31640>>>>>>>        Send PopupInit of hoCommandBars Self hoCommandBarControls
31641>>>>>>>        // user event to do whatever
31641>>>>>>>        Send OnPopupInit vCommandBar hoCommandBarControls
31642>>>>>>>        
31642>>>>>>>        Send Destroy of hoCommandBarControls
31643>>>>>>>        
31643>>>>>>>        // we keep the control attached with popups or we lose it.
31643>>>>>>>    End_Procedure
31644>>>>>>>    
31644>>>>>>>    
31644>>>>>>>    Procedure Popup
31646>>>>>>>        Handle hoCommandBars
31646>>>>>>>        Integer iLoc iId iRet
31646>>>>>>>        tWinPoint Pt PtZero
31646>>>>>>>        tWinPoint Pt PtZero
31646>>>>>>>        
31646>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31647>>>>>>>        If (hoCommandBars=0) Begin
31649>>>>>>>            Error DFERR_PROGRAM "Context menu not attached to commandbars"
31650>>>>>>>>
31650>>>>>>>            Procedure_Return
31651>>>>>>>        End
31651>>>>>>>>
31651>>>>>>>        
31651>>>>>>>        // this will create the context menu and return it attached.
31651>>>>>>>        Send CreatePopupComInstance
31652>>>>>>>        
31652>>>>>>>        // see if location has been set before popup by SetPopupLocation
31652>>>>>>>        Get pLocation to pt
31653>>>>>>>        If (pt.x=0 and Pt.y=0) Begin
31655>>>>>>>            Move (GetCursorPos(addressOf(Pt))) to iRet    // Get the mouse location (this technique supports -ve co-ordinates
31656>>>>>>>        End
31656>>>>>>>>
31656>>>>>>>        Else Begin
31657>>>>>>>            // if set, we use the setting and clear this location for the next popup
31657>>>>>>>            Set pLocation to PtZero
31658>>>>>>>        End
31658>>>>>>>>
31658>>>>>>>        
31658>>>>>>>        Get ComShowPopup OLE_VT_Empty Pt.x Pt.y to iID
31659>>>>>>>        
31659>>>>>>>        // This releases all actions (which will still exist on the COM side)
31659>>>>>>>        // and controls (controls should already be released on both DF and COM side)
31659>>>>>>>        Broadcast Recursive_up Send ReleaseComObject
31661>>>>>>>        Send ReleaseComObject // after popup CJ deletes the controls, so we release this
31662>>>>>>>    End_Procedure
31663>>>>>>>    
31663>>>>>>>    Procedure OnCreate
31665>>>>>>>    End_Procedure
31666>>>>>>>    
31666>>>>>>>    // before called, self and all items IsEnabled, IsChecked and IsVisible are called
31666>>>>>>>    // the first param is of no interest as it is this object which is already attached
31666>>>>>>>    Procedure OnPopupInit Variant vCommandBarControl Handle hoCommandBarControls
31668>>>>>>>    End_Procedure
31669>>>>>>>    
31669>>>>>>>    // This can be called before popup to select a custom popup location. If not called
31669>>>>>>>    // the location is determined in Popup by looking at the mouse position. This must be
31669>>>>>>>    // called before each popup
31669>>>>>>>    Procedure SetPopupLocation Integer iY Integer iX
31671>>>>>>>        tWinPoint pt
31671>>>>>>>        tWinPoint pt
31671>>>>>>>        Move iX to pt.x
31672>>>>>>>        Move iy to pt.y
31673>>>>>>>        Set pLocation to pt
31674>>>>>>>    End_Procedure
31675>>>>>>>    
31675>>>>>>>End_Class
31676>>>>>>>
31676>>>>>>>// used for the Customize dialog
31676>>>>>>>// This provides a way to add controls to the config menu that are not defined
31676>>>>>>>// elsewhere in the menu
31676>>>>>>>
31676>>>>>>>Class cCJDesignerMenu is a cObject
31677>>>>>>>    
31677>>>>>>>    Procedure Construct_Object
31679>>>>>>>        Forward Send Construct_Object
31681>>>>>>>        Set peNeighborhood to nhNo
31682>>>>>>>    End_Procedure
31683>>>>>>>    
31683>>>>>>>    // Get the Controls Collection for the designer and call all children
31683>>>>>>>    Procedure CreateComInstance
31685>>>>>>>        Handle hoCommandBarControls
31685>>>>>>>        Get DesignerControlsCollection to hoCommandBarControls
31686>>>>>>>        Broadcast Send CreateComInstance hoCommandBarControls
31688>>>>>>>    End_Procedure
31689>>>>>>>    
31689>>>>>>>End_Class
31690>>>>>>>
31690>>>>>>>// This creates an action object. It will normally not be directly instanciated but will be used
31690>>>>>>>// as the superclass of the cCJMenuItem class.
31690>>>>>>>
31690>>>>>>>
31690>>>>>>>Class cCJAction is a cCJCommandBarAction
31691>>>>>>>    
31691>>>>>>>    Procedure Construct_Object
31693>>>>>>>        Forward Send Construct_Object
31695>>>>>>>        
31695>>>>>>>        // normally auto assigned. It can be manually assigned.
31695>>>>>>>        Property Integer piId 0
31696>>>>>>>        
31696>>>>>>>        // determins if this action should be updated by the timer. You only set this true if
31696>>>>>>>        // the checked state, enabled state or visible state will be changed by other actions
31696>>>>>>>        // within the program.
31696>>>>>>>        Property Boolean pbPrivateActiveUpdate False
31697>>>>>>>        
31697>>>>>>>        Property Boolean pbPrivateChecked False
31698>>>>>>>        Property Boolean pbPrivateEnabled True
31699>>>>>>>        Property Boolean pbPrivateVisible True
31700>>>>>>>        Property String  psPrivateCaption ""
31701>>>>>>>        Property String  psPrivateCategory C_$CategoryOther
31702>>>>>>>        Property String  psPrivateDescriptionText ""
31703>>>>>>>        Property String  psPrivateTooltipText ""
31704>>>>>>>        Property String  psPrivateShortcutText ""
31705>>>>>>>        Property Integer piPrivateShortCutKey 0
31706>>>>>>>        
31706>>>>>>>        // These are just initial values, if the developer needs to dynamically change
31706>>>>>>>        // images they should use the ComIconId to select the item they need from the image list
31706>>>>>>>        
31706>>>>>>>        // normally only psImage needs to be set
31706>>>>>>>        Property String psImage ""
31707>>>>>>>        Property String psImageDisabled ""
31708>>>>>>>        Property String psImageHot ""
31709>>>>>>>        Property String psImageChecked ""
31710>>>>>>>        Property String psImagePressed ""
31711>>>>>>>        
31711>>>>>>>        Property Integer piPrivateIconId 0
31712>>>>>>>        
31712>>>>>>>        Set peNeighborhood to nhNo
31713>>>>>>>    End_Procedure
31714>>>>>>>    
31714>>>>>>>    
31714>>>>>>>    Procedure Set pbChecked Boolean bValue
31716>>>>>>>        Set pbPrivateChecked to bValue
31717>>>>>>>        If (IsComObjectCreated(Self)) Begin
31719>>>>>>>            Set ComChecked to bValue
31720>>>>>>>        End
31720>>>>>>>>
31720>>>>>>>    End_Procedure
31721>>>>>>>    
31721>>>>>>>    Function pbChecked Returns Boolean
31723>>>>>>>        Boolean bValue
31723>>>>>>>        If (IsComObjectCreated(Self)) Begin
31725>>>>>>>            Get ComChecked to bValue
31726>>>>>>>        End
31726>>>>>>>>
31726>>>>>>>        Else Begin
31727>>>>>>>            Get pbPrivateChecked to bValue
31728>>>>>>>        End
31728>>>>>>>>
31728>>>>>>>        Function_Return bValue
31729>>>>>>>    End_Function
31730>>>>>>>    
31730>>>>>>>    Procedure Set pbEnabled Boolean bValue
31732>>>>>>>        Set pbPrivateEnabled to bValue
31733>>>>>>>        If (IsComObjectCreated(Self)) Begin
31735>>>>>>>            Set ComEnabled to bValue
31736>>>>>>>        End
31736>>>>>>>>
31736>>>>>>>    End_Procedure
31737>>>>>>>    
31737>>>>>>>    Function pbEnabled Returns Boolean
31739>>>>>>>        Boolean bValue
31739>>>>>>>        If (IsComObjectCreated(Self)) Begin
31741>>>>>>>            Get ComEnabled to bValue
31742>>>>>>>        End
31742>>>>>>>>
31742>>>>>>>        Else Begin
31743>>>>>>>            Get pbPrivateEnabled to bValue
31744>>>>>>>        End
31744>>>>>>>>
31744>>>>>>>        Function_Return bValue
31745>>>>>>>    End_Function
31746>>>>>>>    
31746>>>>>>>    Procedure Set pbVisible Boolean bValue
31748>>>>>>>        Set pbPrivateVisible to bValue
31749>>>>>>>        If (IsComObjectCreated(Self)) Begin
31751>>>>>>>            Set ComVisible to bValue
31752>>>>>>>        End
31752>>>>>>>>
31752>>>>>>>    End_Procedure
31753>>>>>>>    
31753>>>>>>>    Function pbVisible Returns Boolean
31755>>>>>>>        Boolean bValue
31755>>>>>>>        If (IsComObjectCreated(Self)) Begin
31757>>>>>>>            Get ComVisible to bValue
31758>>>>>>>        End
31758>>>>>>>>
31758>>>>>>>        Else Begin
31759>>>>>>>            Get pbPrivateVisible to bValue
31760>>>>>>>        End
31760>>>>>>>>
31760>>>>>>>        Function_Return bValue
31761>>>>>>>    End_Function
31762>>>>>>>    
31762>>>>>>>    
31762>>>>>>>    Procedure Set psCaption String sValue
31764>>>>>>>        Set psPrivateCaption to sValue
31765>>>>>>>        If (IsComObjectCreated(Self)) Begin
31767>>>>>>>            Set ComCaption to sValue
31768>>>>>>>        End
31768>>>>>>>>
31768>>>>>>>    End_Procedure
31769>>>>>>>    
31769>>>>>>>    Function psCaption Returns String
31771>>>>>>>        String sValue
31771>>>>>>>        If (IsComObjectCreated(Self)) Begin
31773>>>>>>>            Get ComCaption to sValue
31774>>>>>>>        End
31774>>>>>>>>
31774>>>>>>>        Else Begin
31775>>>>>>>            Get psPrivateCaption to sValue
31776>>>>>>>        End
31776>>>>>>>>
31776>>>>>>>        Function_Return sValue
31777>>>>>>>    End_Function
31778>>>>>>>    
31778>>>>>>>    Procedure Set psCategory String sValue
31780>>>>>>>        Set psPrivateCategory to sValue
31781>>>>>>>        If (IsComObjectCreated(Self)) Begin
31783>>>>>>>            Set ComCategory to sValue
31784>>>>>>>        End
31784>>>>>>>>
31784>>>>>>>    End_Procedure
31785>>>>>>>    
31785>>>>>>>    Function psCategory Returns String
31787>>>>>>>        String sValue
31787>>>>>>>        If (IsComObjectCreated(Self)) Begin
31789>>>>>>>            Get ComCategory to sValue
31790>>>>>>>        End
31790>>>>>>>>
31790>>>>>>>        Else Begin
31791>>>>>>>            Get psPrivateCategory to sValue
31792>>>>>>>        End
31792>>>>>>>>
31792>>>>>>>        Function_Return sValue
31793>>>>>>>    End_Function
31794>>>>>>>    
31794>>>>>>>    Procedure Set psDescription String sValue
31796>>>>>>>        Set psPrivateDescriptionText to sValue
31797>>>>>>>        If (IsComObjectCreated(Self)) Begin
31799>>>>>>>            Set ComDescriptionText to sValue
31800>>>>>>>        End
31800>>>>>>>>
31800>>>>>>>    End_Procedure
31801>>>>>>>    
31801>>>>>>>    Function psDescription Returns String
31803>>>>>>>        String sValue
31803>>>>>>>        If (IsComObjectCreated(Self)) Begin
31805>>>>>>>            Get ComDescriptionText to sValue
31806>>>>>>>        End
31806>>>>>>>>
31806>>>>>>>        Else Begin
31807>>>>>>>            Get psPrivateDescriptionText to sValue
31808>>>>>>>        End
31808>>>>>>>>
31808>>>>>>>        Function_Return sValue
31809>>>>>>>    End_Function
31810>>>>>>>    
31810>>>>>>>    Procedure Set psToolTip String sValue
31812>>>>>>>        Set psPrivateToolTipText to sValue
31813>>>>>>>        If (IsComObjectCreated(Self)) Begin
31815>>>>>>>            Set ComToolTipText to sValue
31816>>>>>>>        End
31816>>>>>>>>
31816>>>>>>>    End_Procedure
31817>>>>>>>    
31817>>>>>>>    Function psToolTip Returns String
31819>>>>>>>        String sValue
31819>>>>>>>        If (IsComObjectCreated(Self)) Begin
31821>>>>>>>            Get ComToolTipText to sValue
31822>>>>>>>        End
31822>>>>>>>>
31822>>>>>>>        Else Begin
31823>>>>>>>            Get psPrivateToolTipText to sValue
31824>>>>>>>        End
31824>>>>>>>>
31824>>>>>>>        Function_Return sValue
31825>>>>>>>    End_Function
31826>>>>>>>    
31826>>>>>>>    Procedure Set psShortcut String sValue
31828>>>>>>>        Set psPrivateShortcutText to sValue
31829>>>>>>>        If (IsComObjectCreated(Self)) Begin
31831>>>>>>>            Set ComShortcutText to sValue
31832>>>>>>>        End
31832>>>>>>>>
31832>>>>>>>    End_Procedure
31833>>>>>>>    
31833>>>>>>>    Function psShortcut Returns String
31835>>>>>>>        String sValue
31835>>>>>>>        If (IsComObjectCreated(Self)) Begin
31837>>>>>>>            Get ComShortcutText to sValue
31838>>>>>>>        End
31838>>>>>>>>
31838>>>>>>>        Else Begin
31839>>>>>>>            Get psPrivateShortcutText to sValue
31840>>>>>>>        End
31840>>>>>>>>
31840>>>>>>>        Function_Return sValue
31841>>>>>>>    End_Function
31842>>>>>>>    
31842>>>>>>>    
31842>>>>>>>    Procedure Set piShortCutKey Integer iExtra Integer iKey
31844>>>>>>>        Set piPrivateShortCutKey to (iKey + (iExtra*65536))
31845>>>>>>>        If (IsComObjectCreated(Self)) Begin
31847>>>>>>>            Send BindKey iExtra iKey
31848>>>>>>>        End
31848>>>>>>>>
31848>>>>>>>    End_Procedure
31849>>>>>>>    
31849>>>>>>>    Function piShortCutKey Returns Integer
31851>>>>>>>        Integer iValue
31851>>>>>>>        Get piPrivateShortCutKey to iValue
31852>>>>>>>        Function_Return iValue
31853>>>>>>>    End_Function
31854>>>>>>>    
31854>>>>>>>    Procedure BindKey Integer iExtra Integer iKey
31856>>>>>>>        Integer iId
31856>>>>>>>        Handle hoKeyBindings hoCommandBars
31856>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31857>>>>>>>        Get piId to iId
31858>>>>>>>        If (iId=0) Begin
31860>>>>>>>            Error DFERR_PROGRAM "Assert: action Id zero in keybinding"
31861>>>>>>>>
31861>>>>>>>            Procedure_Return
31862>>>>>>>        End
31862>>>>>>>>
31862>>>>>>>        Get KeyBindingsCollection of hoCommandBars to hoKeyBindings
31863>>>>>>>        
31863>>>>>>>        Send ComAdd of hoKeyBindings iExtra iKey iId
31864>>>>>>>    End_Procedure
31865>>>>>>>    
31865>>>>>>>    Procedure Set pbActiveUpdate Boolean bValue
31867>>>>>>>        Handle hoCommandBars
31867>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31868>>>>>>>        Set pbPrivateActiveUpdate to bValue
31869>>>>>>>        If (IsComObjectCreated(Self)) Begin
31871>>>>>>>            If bValue Begin
31873>>>>>>>                Send AddActiveAction of hoCommandBars Self
31874>>>>>>>            End
31874>>>>>>>>
31874>>>>>>>            Else Begin
31875>>>>>>>                Send RemoveActiveAction of hoCommandBars Self
31876>>>>>>>            End
31876>>>>>>>>
31876>>>>>>>        End
31876>>>>>>>>
31876>>>>>>>    End_Procedure
31877>>>>>>>    
31877>>>>>>>    Function pbActiveUpdate Returns Integer
31879>>>>>>>        Boolean bValue
31879>>>>>>>        Get pbPrivateActiveUpdate to bValue
31880>>>>>>>        Function_Return bValue
31881>>>>>>>    End_Function
31882>>>>>>>    
31882>>>>>>>    // normally this is zero and not changed. When zero the imageId used will be
31882>>>>>>>    // the statusbarId and this is the ID that is used when the psImage method is used.
31882>>>>>>>    // Using psImage is preferred as it adds the icon and assigns it to the object.
31882>>>>>>>    // This can be used to change icons. Note 0=use StatusbarId
31882>>>>>>>    Procedure Set piIconId Integer iValue
31884>>>>>>>        Set piPrivateIconId to iValue
31885>>>>>>>        If (IsComObjectCreated(Self)) Begin
31887>>>>>>>            Set ComIconId to iValue
31888>>>>>>>        End
31888>>>>>>>>
31888>>>>>>>    End_Procedure
31889>>>>>>>    
31889>>>>>>>    Function piIconId Returns Integer
31891>>>>>>>        Integer iValue
31891>>>>>>>        If (IsComObjectCreated(Self)) Begin
31893>>>>>>>            Get ComIconId to iValue
31894>>>>>>>        End
31894>>>>>>>>
31894>>>>>>>        Else Begin
31895>>>>>>>            Get piPrivateIconId to iValue
31896>>>>>>>        End
31896>>>>>>>>
31896>>>>>>>        Function_Return iValue
31897>>>>>>>    End_Function
31898>>>>>>>    
31898>>>>>>>    
31898>>>>>>>    
31898>>>>>>>    // For augmentation. Return true if the item should be visible
31898>>>>>>>    Function IsVisible Returns Boolean
31900>>>>>>>        Boolean bBool
31900>>>>>>>        Get pbVisible to bBool
31901>>>>>>>        Function_Return bBool
31902>>>>>>>    End_Function
31903>>>>>>>    
31903>>>>>>>    // For augmentation. Return true if the item should be enabled
31903>>>>>>>    Function IsEnabled Returns Boolean
31905>>>>>>>        Boolean bBool
31905>>>>>>>        Get pbEnabled to bBool
31906>>>>>>>        Function_Return bBool
31907>>>>>>>    End_Function
31908>>>>>>>    
31908>>>>>>>    // For augmentation. Return true if the item should be checked
31908>>>>>>>    Function IsChecked Returns Boolean
31910>>>>>>>        Boolean bBool
31910>>>>>>>        Get pbChecked to bBool
31911>>>>>>>        Function_Return bBool
31912>>>>>>>    End_Function
31913>>>>>>>    
31913>>>>>>>    Procedure CreateComAction
31915>>>>>>>        Variant vID vAction
31915>>>>>>>        Handle hoCommandBars hoActions
31915>>>>>>>        Handle[] hoActiveActions
31916>>>>>>>        String sCaption sToolTip sDescriptionText sCategory  sShortCutText
31916>>>>>>>        String sIcon sIconDisabled sIconHot sIconChecked sIconPressed
31916>>>>>>>        Integer iId iShortCut iIconId iAssignedId
31916>>>>>>>        Boolean bVisible bChecked bEnabled bOk
31916>>>>>>>        
31916>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31917>>>>>>>        Get piId to iID
31918>>>>>>>        If (iId=0) Begin
31920>>>>>>>            // this can happen with context menus defined before the Commandbars is created
31920>>>>>>>            Get AssignId of hoCommandBars to iID
31921>>>>>>>            Set piId to iID
31922>>>>>>>        End
31922>>>>>>>>
31922>>>>>>>        
31922>>>>>>>        Get psPrivateCaption to sCaption
31923>>>>>>>        Get psPrivateTooltipText to sToolTip
31924>>>>>>>        Get psPrivateShortcutText to sShortCutText
31925>>>>>>>        Get psPrivateDescriptionText to sDescriptionText
31926>>>>>>>        Get psPrivateCategory to sCategory
31927>>>>>>>        Get pbPrivateVisible to bVisible
31928>>>>>>>        Get pbPrivateChecked to bChecked
31929>>>>>>>        Get pbPrivateEnabled to bEnabled
31930>>>>>>>        Get piPrivateShortCutKey to iShortCut
31931>>>>>>>        Get psImage to sIcon
31932>>>>>>>        Get psImageDisabled to sIconDisabled
31933>>>>>>>        Get psImageHot to sIconHot
31934>>>>>>>        Get psImageChecked to sIconChecked
31935>>>>>>>        Get psImagePressed to sIconPressed
31936>>>>>>>        Get piPrivateIconId to iIconId
31937>>>>>>>        
31937>>>>>>>        Get CommandBarSystemObject to hoCommandBars // via delegation
31938>>>>>>>        Get ActionsCollection of hoCommandBars to hoActions
31939>>>>>>>        Get ComAdd of hoActions iID sCaption sToolTip sDescriptionText sCategory to vAction
31940>>>>>>>        Set pvComObject to vAction
31941>>>>>>>        Set ComEnabled to bEnabled
31942>>>>>>>        Set ComVisible to bVisible
31943>>>>>>>        Set ComChecked to bChecked
31944>>>>>>>        Set ComShortcutText to sShortCutText
31945>>>>>>>        Set piIconId to iIconId
31946>>>>>>>        Set ComTag to Self // used as back pointer from com object to DF object
31947>>>>>>>        
31947>>>>>>>        If (sIcon<>"") Begin
31949>>>>>>>            Get AddImage of hoCommandBars sIcon iId xtpImageNormal to iAssignedId
31950>>>>>>>        End
31950>>>>>>>>
31950>>>>>>>        If (sIconDisabled<>"") Begin
31952>>>>>>>            Get AddImage of hoCommandBars sIconDisabled iId xtpImageDisabled to iAssignedId
31953>>>>>>>        End
31953>>>>>>>>
31953>>>>>>>        If (sIconHot<>"") Begin
31955>>>>>>>            Get AddImage of hoCommandBars sIconHot iId xtpImageHot to iAssignedId
31956>>>>>>>        End
31956>>>>>>>>
31956>>>>>>>        If (sIconChecked<>"") Begin
31958>>>>>>>            Get AddImage of hoCommandBars sIconChecked iId xtpImageChecked to iAssignedId
31959>>>>>>>        End
31959>>>>>>>>
31959>>>>>>>        If (sIconPressed<>"") Begin
31961>>>>>>>            Get AddImage of hoCommandBars sIconPressed iId xtpImagePressed to iAssignedId
31962>>>>>>>        End
31962>>>>>>>>
31962>>>>>>>        
31962>>>>>>>        If (iShortCut<>0) Begin
31964>>>>>>>            Send BindKey (hi(iShortCut)) (low(iShortCut))
31965>>>>>>>        End
31965>>>>>>>>
31965>>>>>>>        
31965>>>>>>>        Send OnCreateAction
31966>>>>>>>        
31966>>>>>>>        Send RegisterAction of hoCommandBars Self
31967>>>>>>>        
31967>>>>>>>    End_Procedure
31968>>>>>>>    
31968>>>>>>>    // called during initial activation to set all default actions.
31968>>>>>>>    Procedure CreateComInstance
31970>>>>>>>        Send CreateComAction
31971>>>>>>>        // actions are flat. You don't look for child actions
31971>>>>>>>    End_Procedure
31972>>>>>>>    
31972>>>>>>>    // find the first control that matches this action's ID. This searches the entire
31972>>>>>>>    // commandbar system and "first" is just the first one it happens to find.
31972>>>>>>>    Function FindFirstControl Returns Variant
31974>>>>>>>        Variant vControl
31974>>>>>>>        Integer iId
31974>>>>>>>        Handle hoCommandBars hoCommandBar
31974>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31975>>>>>>>        Get piId to iId
31976>>>>>>>        Get ComFindControl of hoCommandBars xtpControlError iId Nothing True to vControl
31977>>>>>>>        If (IsNullComObject(vControl)) Begin
31979>>>>>>>            // if not found this could be from our context menu. ComFindControl does not search
31979>>>>>>>            // the active context menu. We will test the focused command bar to see if we can
31979>>>>>>>            // find the object in there. This may create a duplicate search but it will not matter.
31979>>>>>>>            Get ComFocusedCommandBar of hoCommandBars to vControl
31980>>>>>>>            If (not(IsNullComObject(vControl))) Begin
31982>>>>>>>                Get Create U_cCJCommandBar to hoCommandBar
31983>>>>>>>                Set pvComObject of hoCommandBar to vControl
31984>>>>>>>                Get ComFindControl of hoCommandBar xtpControlError iId Nothing True to vControl
31985>>>>>>>                Send Destroy of hoCommandBar
31986>>>>>>>            End
31986>>>>>>>>
31986>>>>>>>        End
31986>>>>>>>>
31986>>>>>>>        Function_Return vControl
31987>>>>>>>    End_Function
31988>>>>>>>    
31988>>>>>>>    // delete all com controls for this action
31988>>>>>>>    Procedure DeleteAllControlsForAction
31990>>>>>>>        Handle hoCommandBars hoControl
31990>>>>>>>        Variant vControl
31990>>>>>>>        Get Create U_cCJCommandBarControl to hoControl
31991>>>>>>>        Repeat
31991>>>>>>>>
31991>>>>>>>            Get FindFirstControl to vControl
31992>>>>>>>            If not (IsNullComObject(vControl)) Begin
31994>>>>>>>                Set pvComObject of hoControl to vControl
31995>>>>>>>                Send ComDelete to hoControl
31996>>>>>>>            End
31996>>>>>>>>
31996>>>>>>>        Until (IsNullComObject(vControl))
31998>>>>>>>        Send Destroy of hoControl
31999>>>>>>>    End_Procedure
32000>>>>>>>    
32000>>>>>>>    // find all controls owned by this action anywhere in the commandbar system
32000>>>>>>>    // returns a variant array. This is only needed if you expect that there will be
32000>>>>>>>    // multiple hits such as could happen if you allow end user editing.
32000>>>>>>>    // This was created because there is no COM message to do this. This is pretty low level
32000>>>>>>>    // (like ComFindControl) and will not be used much.
32000>>>>>>>    Function FindAllControls Returns Variant[]
32002>>>>>>>        Variant[] ArrayofvControls
32003>>>>>>>        Integer iId
32003>>>>>>>        Handle hoCommandBars
32003>>>>>>>        Get CommandBarSystemObject to hoCommandBars
32004>>>>>>>        Get piId to iId
32005>>>>>>>        Get FindControls of hoCommandBars iId to ArrayofvControls
32006>>>>>>>        Function_Return ArrayofvControls
32007>>>>>>>    End_Function
32008>>>>>>>    
32008>>>>>>>    // Return the class for the passed control type. Good for augmentation
32008>>>>>>>    Function ClassForControlType Integer eType Returns Integer
32010>>>>>>>        Integer iClass
32010>>>>>>>        Case Begin
32010>>>>>>>            Case (eType=xtpControlButton)
32012>>>>>>>            Case (eType=xtpControlCheckBox)
32015>>>>>>>            Case (eType=xtpControlRadioButton)
32018>>>>>>>            Case (eType=xtpControlLabel)
32021>>>>>>>                Move U_cCJCommandBarButton to eType
32022>>>>>>>                Case Break
32023>>>>>>>            Case (eType=xtpControlPopup)
32026>>>>>>>            Case (eType=xtpControlButtonPopup)
32029>>>>>>>            Case (eType=xtpControlSplitButtonPopup)
32032>>>>>>>                Move U_cCJCommandBarPopup to eType
32033>>>>>>>                Case Break
32034>>>>>>>            Case (eType=xtpControlComboBox)
32037>>>>>>>                Move U_cCJCommandBarComboBox to eType
32038>>>>>>>                Case Break
32039>>>>>>>            Case (eType=xtpControlCustom)
32042>>>>>>>                Move U_cCJCommandBarControlCustom to eType
32043>>>>>>>                Case Break
32044>>>>>>>            Case (eType=xtpControlEdit)
32047>>>>>>>                Move U_cCJCommandBarEdit to eType
32048>>>>>>>                Case Break
32049>>>>>>>            Case (eType=xtpControlGallery)
32052>>>>>>>                Move U_cCJCommandBarGallery to eType
32053>>>>>>>                Case Break
32054>>>>>>>            Case Else
32054>>>>>>>                Move U_cCJCommandBarControl to eType
32055>>>>>>>        Case End
32055>>>>>>>        Function_Return eType
32056>>>>>>>    End_Function
32057>>>>>>>    
32057>>>>>>>    // Creates a DF object of the proper type and binds it to the COM object.
32057>>>>>>>    Function CreateProxyControl Variant vControl Returns Handle
32059>>>>>>>        Handle hoObj
32059>>>>>>>        Integer eType iClass
32059>>>>>>>        Get Create U_cCJCommandBarControl to hoObj
32060>>>>>>>        Set pvComObject of hoObj to vControl
32061>>>>>>>        Get ComType of hoObj to eType
32062>>>>>>>        Send Destroy of hoObj
32063>>>>>>>        Move 0 to hoObj
32064>>>>>>>        Get ClassForControlType eType to iCLass
32065>>>>>>>        If (iClass<>0) Begin
32067>>>>>>>            Get Create iClass to hoObj
32068>>>>>>>            Set pvComObject of hoObj to vControl
32069>>>>>>>        End
32069>>>>>>>>
32069>>>>>>>        Function_Return hoObj
32070>>>>>>>    End_Function
32071>>>>>>>    
32071>>>>>>>    // use this to find the COM control and return a DF object. You must call this if
32071>>>>>>>    // you don't already have the control pointer. You should only call this if you know that
32071>>>>>>>    // there will only be one control attached to the action. Make no assumption about what "First" means. It's
32071>>>>>>>    // the first one the COM control finds.
32071>>>>>>>    Function CreateFirstProxyControl Returns Handle
32073>>>>>>>        Variant vControl
32073>>>>>>>        Handle hoControl
32073>>>>>>>        Get FindFirstControl to vControl
32074>>>>>>>        If (not(IsNullComObject(vControl))) Begin
32076>>>>>>>            Get CreateProxyControl vControl to hoControl
32077>>>>>>>        End
32077>>>>>>>>
32077>>>>>>>        Function_Return hoControl
32078>>>>>>>    End_Function
32079>>>>>>>    
32079>>>>>>>    
32079>>>>>>>    // when a manual destroy is sent we need to do some cleanup.
32079>>>>>>>    // If an active action, it must be removed from the active action array
32079>>>>>>>    // All menu controls for this action will be removed, wherever they are within the system
32079>>>>>>>    // The Action Id will be added back to the pool for reuse. This is needed because the com
32079>>>>>>>    // action is not destroyed (there is no interface for this).
32079>>>>>>>    Procedure Destroy
32081>>>>>>>        Handle hoCommandBars
32081>>>>>>>        Integer iId
32081>>>>>>>        Variant vControl
32081>>>>>>>        
32081>>>>>>>        Get piId to iId
32082>>>>>>>        // if no com object then this never got activated or another action object is
32082>>>>>>>        // used for this (which doesn't really make sense).
32082>>>>>>>        If (iId>0) Begin
32084>>>>>>>            Get CommandBarSystemObject to hoCommandBars
32085>>>>>>>            If (IsComObjectCreated(Self)) Begin
32087>>>>>>>                Send DeleteAllControlsForAction
32088>>>>>>>            End
32088>>>>>>>>
32088>>>>>>>            Send ReleaseId of hoCommandBars (piId(Self))
32089>>>>>>>        End
32089>>>>>>>>
32089>>>>>>>        Forward Send Destroy
32091>>>>>>>    End_Procedure
32092>>>>>>>    
32092>>>>>>>    // if the action is being released we must remove it from the action pool. This is needed for
32092>>>>>>>    // context menus which whose actions get created and released with each invocation. This will also
32092>>>>>>>    // happen when an object is destroyed. If the com object is created, destroy will send ReleaseComObject
32092>>>>>>>    Procedure ReleaseComObject
32094>>>>>>>        Integer iId
32094>>>>>>>        Handle hoCommandBars
32094>>>>>>>        Get piId to iId
32095>>>>>>>        If (iId>0 and IsComObjectCreated(Self)) Begin
32097>>>>>>>            Get CommandBarSystemObject to hoCommandBars
32098>>>>>>>            Send RemoveRegisteredAction of hoCommandBars Self
32099>>>>>>>        End
32099>>>>>>>>
32099>>>>>>>        Forward Send ReleaseComObject
32101>>>>>>>    End_Procedure
32102>>>>>>>    
32102>>>>>>>    
32102>>>>>>>    // called when this action is selected. Only send OnExecute if the
32102>>>>>>>    // action is enabled.
32102>>>>>>>    Procedure Execute Variant vCommandBarControl
32104>>>>>>>        Boolean bIsEnabled
32104>>>>>>>        Variant vObject
32104>>>>>>>        Get IsEnabled to bIsEnabled
32105>>>>>>>        If bIsEnabled Begin
32107>>>>>>>            // we will allow no parameter being passed. In such a case the developer probably sent
32107>>>>>>>            // execute themselves and did not pass a com pointer (which you don't normally care about)
32107>>>>>>>            // if this happens just pass a null com object to the OnExecute.
32107>>>>>>>            If (Num_Arguments=0) Begin
32109>>>>>>>                Move (NullComObject()) to vObject
32110>>>>>>>            End
32110>>>>>>>>
32110>>>>>>>            Else Begin
32111>>>>>>>                Move vCommandBarControl to vObject
32112>>>>>>>            End
32112>>>>>>>>
32112>>>>>>>            Send OnExecute vObject
32113>>>>>>>            Send Update
32114>>>>>>>        End
32114>>>>>>>>
32114>>>>>>>    End_Procedure
32115>>>>>>>    
32115>>>>>>>    // Updates the action. Can be called by timer when active update or
32115>>>>>>>    // called when a menu pops up
32115>>>>>>>    Procedure Update
32117>>>>>>>        Set pbVisible to (IsVisible(Self))
32118>>>>>>>        Set pbEnabled to (IsEnabled(Self))
32119>>>>>>>        Set pbChecked to (IsChecked(Self))
32120>>>>>>>        Send OnUpdate
32121>>>>>>>    End_Procedure
32122>>>>>>>    
32122>>>>>>>    // Event called to update the action
32122>>>>>>>    Procedure OnUpdate
32124>>>>>>>    End_Procedure
32125>>>>>>>    
32125>>>>>>>    // before this is called IsEnabled is called
32125>>>>>>>    Procedure OnExecute Variant vCommandBarControl
32127>>>>>>>    End_Procedure
32128>>>>>>>    
32128>>>>>>>    // when hover over
32128>>>>>>>    Procedure OnSelected Variant vCommandBarControl
32130>>>>>>>    End_Procedure
32131>>>>>>>    
32131>>>>>>>    // creation of action.
32131>>>>>>>    Procedure OnCreateAction
32133>>>>>>>    End_Procedure
32134>>>>>>>    
32134>>>>>>>    // before called, self and all items IsEnabled, IsChecked and IsVisible are called
32134>>>>>>>    Procedure OnPopupInit Variant vCommandBarControl Handle hoCommandBarControls
32136>>>>>>>    End_Procedure
32137>>>>>>>    
32137>>>>>>>    Procedure End_Construct_Object
32139>>>>>>>        Integer iID
32139>>>>>>>        Handle hoCommandBars
32139>>>>>>>        Get piId to iID
32140>>>>>>>        // if the ID is 0, auto-assign it.
32140>>>>>>>        If (iID=0) Begin
32142>>>>>>>            Get CommandBarSystemObject to hoCommandBars
32143>>>>>>>            // context menus may not be able to assign an id until they are created.
32143>>>>>>>            If (hoCommandBars<>0) Begin
32145>>>>>>>                Get AssignId of hoCommandBars to iID
32146>>>>>>>                Set piId to iID
32147>>>>>>>            End
32147>>>>>>>>
32147>>>>>>>        End
32147>>>>>>>>
32147>>>>>>>        Forward Send End_Construct_Object
32149>>>>>>>    End_Procedure
32150>>>>>>>    
32150>>>>>>>    
32150>>>>>>>End_Class
32151>>>>>>>
32151>>>>>>>// can be used by all controls. Menu, toolbar and popups.
32151>>>>>>>
32151>>>>>>>
32151>>>>>>>Class cCJMenuItem is a cCJAction
32152>>>>>>>    
32152>>>>>>>    Procedure Construct_Object
32154>>>>>>>        Forward Send Construct_Object
32156>>>>>>>        
32156>>>>>>>        // note that these properties are design time and initalize time only properties
32156>>>>>>>        Property Integer peControlType xtpControlButton
32157>>>>>>>        
32157>>>>>>>        Property Integer peControlStyle xtpButtonAutomatic
32158>>>>>>>        
32158>>>>>>>        Property Boolean pbControlBeginGroup   False
32159>>>>>>>        Property Boolean pbControlCloseSubMenu True
32160>>>>>>>        Property Boolean pbControlFlagRightAlign False
32161>>>>>>>        Property Boolean pbControlFlagLeftPopup  False
32162>>>>>>>        Property Boolean pbControlFlagNoMovable  False
32163>>>>>>>        Property Boolean pbControlFlagControlStretched False
32164>>>>>>>        Property Boolean pbControlFlagShowPopupBarToolTip False
32165>>>>>>>        Property Boolean pbControlFlagWrapRow False
32166>>>>>>>        Property Boolean pbControlDoubleGripper    False
32167>>>>>>>        Property Boolean pbControlPopupToolBar   False
32168>>>>>>>        
32168>>>>>>>        Property Boolean pbAddToDesignerMenu False
32169>>>>>>>        
32169>>>>>>>        // Used to redirect an action to a different object.
32169>>>>>>>        Property Integer phoAction Self
32170>>>>>>>        
32170>>>>>>>        Property Boolean pbInCreateTempInstance False
32171>>>>>>>        
32171>>>>>>>    End_Procedure
32172>>>>>>>    
32172>>>>>>>    // returns true if the control is a popup type - i.e., it will have child menu items. Good for Augmentation
32172>>>>>>>    Function IsPopup Returns Boolean
32174>>>>>>>        Integer eType
32174>>>>>>>        Get peControlType to eType
32175>>>>>>>        Function_Return (eType=xtpControlPopup or eType=xtpControlButtonPopup or eType=xtpControlSplitButtonPopup)
32176>>>>>>>    End_Function
32177>>>>>>>    
32177>>>>>>>    
32177>>>>>>>    
32177>>>>>>>    // must create action and then the visual control
32177>>>>>>>    Procedure CreateComInstance Handle hoControls
32179>>>>>>>        Variant vNewControl vNewControls vCommandBar
32179>>>>>>>        Handle hoNewControl hoNewControls hoCommandBar hoAction hoDesignerControls
32179>>>>>>>        Integer iId
32179>>>>>>>        Boolean bPopup
32179>>>>>>>        
32179>>>>>>>        Send AssignAction
32180>>>>>>>        Get CreateComControl hoControls to vNewControl
32181>>>>>>>        If (IsNullComObject(vNewControl)) Begin
32183>>>>>>>            Procedure_Return
32184>>>>>>>        End
32184>>>>>>>>
32184>>>>>>>        
32184>>>>>>>        Get piId to iId
32185>>>>>>>        
32185>>>>>>>        Get Create U_cCJCommandBarPopup to hoNewControl
32186>>>>>>>        Get Create U_cCJCommandBar to hoCommandbar
32187>>>>>>>        Get Create U_cCJCommandBarControls to hoNewControls
32188>>>>>>>        
32188>>>>>>>        Set pvComObject of hoNewControl to vNewControl
32189>>>>>>>        
32189>>>>>>>        Get IsPopup to bPopup
32190>>>>>>>        If (bPopup) Begin
32192>>>>>>>            
32192>>>>>>>            Get ComCommandBar of hoNewControl to vCommandBar
32193>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
32194>>>>>>>            Get ComControls of hoCommandBar to vNewControls
32195>>>>>>>            Set pvComObject of hoNewControls to vNewControls
32196>>>>>>>            
32196>>>>>>>            Broadcast Send CreateComInstance hoNewControls
32198>>>>>>>            
32198>>>>>>>        End
32198>>>>>>>>
32198>>>>>>>        
32198>>>>>>>        // if add to designer, create another instance of this control and add it to the designer
32198>>>>>>>        // controls. This uses the same action as the regular control. We do this after the child controls
32198>>>>>>>        // are created so that menus will contain all of their children.
32198>>>>>>>        If (pbAddToDesignerMenu(Self)) Begin
32200>>>>>>>            Get DesignerControlsCollection to hoDesignerControls
32201>>>>>>>            // if a designer control for this action already exists, we will not add it again.
32201>>>>>>>            Get ComFind of hoDesignerControls xtpControlError iId Nothing True to vNewControl
32202>>>>>>>            If (IsNullComObject(vNewControl)) Begin
32204>>>>>>>                Get CreateComControl hoDesignerControls to vNewControl
32205>>>>>>>                Set pvComObject of hoNewControl to vNewControl
32206>>>>>>>                If (bPopup) Begin
32208>>>>>>>                    Get ComCommandBar of hoNewControl to vCommandBar
32209>>>>>>>                    Set pvComObject of hoCommandBar to vCommandBar
32210>>>>>>>                    Get ComControls of hoCommandBar to vNewControls
32211>>>>>>>                    Set pvComObject of hoNewControls to vNewControls
32212>>>>>>>                    // note that it is safe to do this because the actions will not get
32212>>>>>>>                    // created again. Only the controls will get created.
32212>>>>>>>                    Broadcast Send CreateComInstance hoNewControls
32214>>>>>>>                End
32214>>>>>>>>
32214>>>>>>>            End
32214>>>>>>>>
32214>>>>>>>        End
32214>>>>>>>>
32214>>>>>>>        
32214>>>>>>>        Send Destroy of hoNewControls
32215>>>>>>>        Send Destroy of hoCommandBar
32216>>>>>>>        Send Destroy of hoNewControl
32217>>>>>>>        
32217>>>>>>>    End_Procedure
32218>>>>>>>    
32218>>>>>>>    // handle action for this menu-item. If the item is the action, make sure a com instance is created
32218>>>>>>>    // if this is not the action, attach to the action which should be created
32218>>>>>>>    // lots of assertions if there is a problem
32218>>>>>>>    Procedure AssignAction
32220>>>>>>>        Handle hoAction
32220>>>>>>>        Integer iId
32220>>>>>>>        
32220>>>>>>>        Get phoAction to hoAction
32221>>>>>>>        
32221>>>>>>>        If not hoAction Begin
32223>>>>>>>            Error DFERR_PROGRAM "Assert: action object is not assigned for menu item"
32224>>>>>>>>
32224>>>>>>>            Procedure_Return
32225>>>>>>>        End
32225>>>>>>>>
32225>>>>>>>        
32225>>>>>>>        // If the action object is self (normal) then we create an action com object if needed.
32225>>>>>>>        // it is possible that the action will already be created. If so, do nothing.
32225>>>>>>>        If (hoAction=Self) Begin
32227>>>>>>>            If not (IsComObjectCreated(Self)) Begin
32229>>>>>>>                Send CreateComAction
32230>>>>>>>            End
32230>>>>>>>>
32230>>>>>>>            Get piId to iId
32231>>>>>>>        End
32231>>>>>>>>
32231>>>>>>>        // if the action is some other object, we will assume it has already been created and just assign
32231>>>>>>>        // its id.
32231>>>>>>>        Else Begin
32232>>>>>>>            Get piId of hoAction to iId
32233>>>>>>>            Set piId to iId
32234>>>>>>>        End
32234>>>>>>>>
32234>>>>>>>        
32234>>>>>>>        If (iId=0) Begin
32236>>>>>>>            Error DFERR_PROGRAM "Assert: Action ID is zero"
32237>>>>>>>>
32237>>>>>>>            Procedure_Return
32238>>>>>>>        End
32238>>>>>>>>
32238>>>>>>>        
32238>>>>>>>        If not (IsComObjectCreated(hoAction)) Begin
32240>>>>>>>            Error  DFERR_PROGRAM "Assert: Action com object not created"
32241>>>>>>>>
32241>>>>>>>            Procedure_Return
32242>>>>>>>        End
32242>>>>>>>>
32242>>>>>>>    End_Procedure
32243>>>>>>>    
32243>>>>>>>    Function AddDynamicControl Handle hoControls Returns Variant
32245>>>>>>>        Variant vNewControl vCommandBar vNewControls
32245>>>>>>>        Boolean bOldTemp bPopup
32245>>>>>>>        Handle hoNewControl  hoCommandBar hoNewControls
32245>>>>>>>        
32245>>>>>>>        Get pbInCreateTempInstance to bOldTemp
32246>>>>>>>        Set pbInCreateTempInstance to True
32247>>>>>>>        
32247>>>>>>>        Send AssignAction
32248>>>>>>>        Get CreateComControl hoControls to vNewControl // if null, an assertion will be declared
32249>>>>>>>        
32249>>>>>>>        Get IsPopup to bPopup
32250>>>>>>>        If (bPopup) Begin
32252>>>>>>>            
32252>>>>>>>            Get Create U_cCJCommandBarPopup to hoNewControl
32253>>>>>>>            Get Create U_cCJCommandBar to hoCommandbar
32254>>>>>>>            Get Create U_cCJCommandBarControls to hoNewControls
32255>>>>>>>            
32255>>>>>>>            Set pvComObject of hoNewControl to vNewControl
32256>>>>>>>            
32256>>>>>>>            Get ComCommandBar of hoNewControl to vCommandBar
32257>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
32258>>>>>>>            Get ComControls of hoCommandBar to vNewControls
32259>>>>>>>            Set pvComObject of hoNewControls to vNewControls
32260>>>>>>>            
32260>>>>>>>            Broadcast Send CreateComInstance hoNewControls
32262>>>>>>>            
32262>>>>>>>            Send Destroy of hoNewControls
32263>>>>>>>            Send Destroy of hoCommandBar
32264>>>>>>>            Send Destroy of hoNewControl
32265>>>>>>>            
32265>>>>>>>        End
32265>>>>>>>>
32265>>>>>>>        
32265>>>>>>>        
32265>>>>>>>        Set pbInCreateTempInstance to bOldTemp
32266>>>>>>>        
32266>>>>>>>        Function_Return vNewControl
32267>>>>>>>    End_Function
32268>>>>>>>    
32268>>>>>>>    // used to actually create the desired control and add it to the passed commandbars
32268>>>>>>>    Function CreateCommandBarControl Handle hoControls Integer eType Integer iId Boolean bInCreateTempInstance Returns Variant
32270>>>>>>>        Variant vControl
32270>>>>>>>        Get ComAdd of hoControls eType iId "" Nothing bInCreateTempInstance to vControl
32271>>>>>>>        Function_Return vControl
32272>>>>>>>    End_Function
32273>>>>>>>    
32273>>>>>>>    // create the menu item control. Return a DataFlex object for this control
32273>>>>>>>    // This assumes that an action ID exiss and that a com action object is created.
32273>>>>>>>    
32273>>>>>>>    Function CreateComControl Handle hoControls Returns Variant
32275>>>>>>>        Handle hoObj hoCommandBar hoCommandBars
32275>>>>>>>        Variant vControl vCommandbar
32275>>>>>>>        Integer iId eType eStyle eFlags iClass
32275>>>>>>>        Boolean bPopup bBegin bClose bDoubleGripper bPopupToolBar
32275>>>>>>>        Boolean bFlagStretch bFlagLeftPopup bFlagNoMove bFlagRightAlign bFlagShowTip bFlagWrap
32275>>>>>>>        Boolean bInCreateTempInstance
32275>>>>>>>        
32275>>>>>>>        
32275>>>>>>>        Get pbInCreateTempInstance to bInCreateTempInstance
32276>>>>>>>        
32276>>>>>>>        Get piId to iId
32277>>>>>>>        Get peControlType to eType
32278>>>>>>>        Get peControlStyle to eStyle
32279>>>>>>>        Get pbControlBeginGroup to bBegin
32280>>>>>>>        Get pbControlCloseSubMenu to bClose
32281>>>>>>>        Get pbControlFlagControlStretched to bFlagStretch
32282>>>>>>>        Get pbControlFlagLeftPopup to bFlagLeftPopup
32283>>>>>>>        Get pbControlFlagNoMovable to bFlagNoMove
32284>>>>>>>        Get pbControlFlagRightAlign to bFlagRightAlign
32285>>>>>>>        Get pbControlFlagShowPopupBarToolTip to bFlagShowTip
32286>>>>>>>        Get pbControlDoubleGripper to bDoubleGripper
32287>>>>>>>        Get pbControlPopupToolBar to bPopupToolBar
32288>>>>>>>        Get pbControlFlagWrapRow to bFlagWrap
32289>>>>>>>        // assemble the COMFlags from the flag properties.
32289>>>>>>>        Move (If(bFlagStretch,xtpFlagControlStretched,0) + ;            If(bFlagLeftPopup,xtpFlagLeftPopup,0) +;            If(bFlagNoMove,xtpFlagNoMovable,0) +;            If(bFlagRightAlign,xtpFlagRightAlign,0) +;            If(bFlagShowTip,xtpFlagShowPopupBarTip,0) +;            If(bFlagWrap,xtpFlagWrapRow,0) ) to eFlags
32290>>>>>>>        
32290>>>>>>>        Get CreateCommandBarControl hoControls eType iId bInCreateTempInstance to vControl
32291>>>>>>>        
32291>>>>>>>        If (IsNullComObject(vControl)) Begin
32293>>>>>>>            Error DFERR_PROGRAM ("Assert: could not create com control: Type" - String(eType) - ", iId=" - String(iId))
32294>>>>>>>>
32294>>>>>>>            Function_Return vControl
32295>>>>>>>        End
32295>>>>>>>>
32295>>>>>>>        
32295>>>>>>>        Get IsPopup to bPopup
32296>>>>>>>        Get ClassForControlType eType to iClass
32297>>>>>>>        Get Create iClass to hoObj
32298>>>>>>>        Set pvComObject of hoObj to vControl
32299>>>>>>>        Set ComStyle of hoObj to eStyle
32300>>>>>>>        Set ComBeginGroup of hoObj to bBegin
32301>>>>>>>        Set ComCloseSubMenuOnClick of hoObj to bClose
32302>>>>>>>        Set ComFlags of hoObj to eFlags
32303>>>>>>>        
32303>>>>>>>        If bPopup Begin
32305>>>>>>>            Get Create U_cCJCommandBar to hoCommandbar
32306>>>>>>>            Get ComCommandBar of hoObj to vCommandBar
32307>>>>>>>            
32307>>>>>>>            // it appears that it is possible to have a popup that does not get assigned
32307>>>>>>>            // a commandbar. If that happens we will add a commandbar to the control
32307>>>>>>>            // the hard way.
32307>>>>>>>            If (IsNullComObject(vCommandbar)) Begin
32309>>>>>>>                Get CommandBarSystemObject to hoCommandBars
32310>>>>>>>                Get ComAdd of hoCommandBars "Popup" xtpBarPopup to vCommandBar
32311>>>>>>>                Set ComCommandBar of hoObj to vCommandBar
32312>>>>>>>            End
32312>>>>>>>>
32312>>>>>>>            
32312>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
32313>>>>>>>            
32313>>>>>>>            If (bDoubleGripper) Begin
32315>>>>>>>                Set ComDoubleGripper of hoCommandBar to True
32316>>>>>>>            End
32316>>>>>>>>
32316>>>>>>>            If (bPopupToolBar) Begin
32318>>>>>>>                Send ComSetPopupToolBar of hoCommandBar True
32319>>>>>>>            End
32319>>>>>>>>
32319>>>>>>>            
32319>>>>>>>            Send Destroy of hoCommandBar
32320>>>>>>>        End
32320>>>>>>>>
32320>>>>>>>        
32320>>>>>>>        Send OnCreateControl hoObj
32321>>>>>>>        
32321>>>>>>>        Send destroy of hoObj
32322>>>>>>>        
32322>>>>>>>        Function_Return vControl
32323>>>>>>>        
32323>>>>>>>    End_Function
32324>>>>>>>    
32324>>>>>>>    Procedure OnCreateControl Handle hoObj
32326>>>>>>>    End_Procedure
32327>>>>>>>    
32327>>>>>>>End_Class
32328>>>>>>>
32328>>>>>>>
32328>>>>>>>Class cCJStatusBar is a cCJComStatusBar
32329>>>>>>>    
32329>>>>>>>    Procedure Construct_Object
32331>>>>>>>        Boolean bMDI
32331>>>>>>>        Handle hoCommandBars
32331>>>>>>>        Forward Send Construct_Object
32333>>>>>>>        
32333>>>>>>>        Property Boolean pbPrivateDrawDisabledText True
32334>>>>>>>        Property String  psPrivateIdleText ''
32335>>>>>>>        Property Boolean pbPrivateVisible True
32336>>>>>>>        
32336>>>>>>>        Property Integer piStatusBarId ID_StatusBarsAutoStart
32337>>>>>>>        
32337>>>>>>>        Property Integer phoViewPane 0
32338>>>>>>>        
32338>>>>>>>        Set peNeighborhood to nhNo
32339>>>>>>>        
32339>>>>>>>        
32339>>>>>>>    End_Procedure
32340>>>>>>>    
32340>>>>>>>    // Remove the references to the statusbar when it is about to be destroyed.
32340>>>>>>>    Procedure Destroy_Object
32342>>>>>>>        Handle hoCommandBars
32342>>>>>>>        Boolean bMDI
32342>>>>>>>        Get CommandBarSystemObject to hoCommandBars
32343>>>>>>>        // if this is an MDI command bar, reset the main Status bar
32343>>>>>>>        Get pbMDIMenu of hoCommandBars to bMDI
32344>>>>>>>        If bMDI Begin
32346>>>>>>>            Set Statusbar_Id to 0
32347>>>>>>>        End
32347>>>>>>>>
32347>>>>>>>        Set phoStatusBar of hoCommandBars to 0
32348>>>>>>>        Forward Send Destroy_Object
32350>>>>>>>    End_Procedure
32351>>>>>>>    
32351>>>>>>>    Procedure Set pbDrawDisabledText Boolean bValue
32353>>>>>>>        Set pbPrivateDrawDisabledText to bValue
32354>>>>>>>        If (IsComObjectCreated(Self)) Begin
32356>>>>>>>            Set ComDrawDisabledText to bValue
32357>>>>>>>        End
32357>>>>>>>>
32357>>>>>>>    End_Procedure
32358>>>>>>>    
32358>>>>>>>    Function pbDrawDisabledText Returns Boolean
32360>>>>>>>        Boolean bValue
32360>>>>>>>        If (IsComObjectCreated(Self)) Begin
32362>>>>>>>            Get ComDrawDisabledText to bValue
32363>>>>>>>        End
32363>>>>>>>>
32363>>>>>>>        Else Begin
32364>>>>>>>            Get pbPrivateDrawDisabledText to bValue
32365>>>>>>>        End
32365>>>>>>>>
32365>>>>>>>        Function_Return bValue
32366>>>>>>>    End_Function
32367>>>>>>>    
32367>>>>>>>    Procedure Set pbVisible Boolean bValue
32369>>>>>>>        Set pbPrivateVisible to bValue
32370>>>>>>>        If (IsComObjectCreated(Self)) Begin
32372>>>>>>>            Set ComVisible to bValue
32373>>>>>>>        End
32373>>>>>>>>
32373>>>>>>>    End_Procedure
32374>>>>>>>    
32374>>>>>>>    Function pbVisible Returns Boolean
32376>>>>>>>        Boolean bValue
32376>>>>>>>        // for some reason visible state of statusbar is set false when
32376>>>>>>>        // commandbarsystem is not active. So we also check active_state
32376>>>>>>>        If (IsComObjectCreated(Self) and Active_State(Self)) Begin
32378>>>>>>>            Get ComVisible to bValue
32379>>>>>>>        End
32379>>>>>>>>
32379>>>>>>>        Else Begin
32380>>>>>>>            Get pbPrivateVisible to bValue
32381>>>>>>>        End
32381>>>>>>>>
32381>>>>>>>        Function_Return bValue
32382>>>>>>>    End_Function
32383>>>>>>>    
32383>>>>>>>    Procedure Set psIdleText String sValue
32385>>>>>>>        Set psPrivateIdleText to sValue
32386>>>>>>>        If (IsComObjectCreated(Self)) Begin
32388>>>>>>>            Set ComIdleText to sValue
32389>>>>>>>        End
32389>>>>>>>>
32389>>>>>>>    End_Procedure
32390>>>>>>>    
32390>>>>>>>    Function psIdleText Returns String
32392>>>>>>>        String sValue
32392>>>>>>>        If (IsComObjectCreated(Self)) Begin
32394>>>>>>>            Get ComIdleText to sValue
32395>>>>>>>        End
32395>>>>>>>>
32395>>>>>>>        Else Begin
32396>>>>>>>            Get psPrivateIdleText to sValue
32397>>>>>>>        End
32397>>>>>>>>
32397>>>>>>>        Function_Return sValue
32398>>>>>>>    End_Function
32399>>>>>>>    
32399>>>>>>>    
32399>>>>>>>    Procedure CreateComInstance
32401>>>>>>>        Handle hoCommandBars
32401>>>>>>>        Variant vStatusBar
32401>>>>>>>        String sTitle
32401>>>>>>>        Integer iBarId iWidth iDockFgs
32401>>>>>>>        Boolean bDrawDisabledText bVisible bMDI
32401>>>>>>>        String  sIdleText
32401>>>>>>>        
32401>>>>>>>        // if already created, we don't do anything. This could happen during
32401>>>>>>>        // a restore
32401>>>>>>>        If (IsComObjectCreated(Self)) Begin
32403>>>>>>>            Procedure_Return
32404>>>>>>>        End
32404>>>>>>>>
32404>>>>>>>        
32404>>>>>>>        Get CommandBarSystemObject to hoCommandBars
32405>>>>>>>        
32405>>>>>>>        // if this is an MDI command bar, we will define this as the main Status bar
32405>>>>>>>        Get pbMDIMenu of hoCommandBars to bMDI
32406>>>>>>>        If bMDI Begin
32408>>>>>>>            Set Statusbar_Id to Self
32409>>>>>>>        End
32409>>>>>>>>
32409>>>>>>>        Set phoStatusBar of hoCommandBars to Self
32410>>>>>>>        
32410>>>>>>>        Get pbPrivateDrawDisabledText to bDrawDisabledText
32411>>>>>>>        Get pbPrivateVisible to bVisible
32412>>>>>>>        Get psPrivateIdleText to sIdleText
32413>>>>>>>        Get ComStatusBar of hoCommandBars to vStatusBar
32414>>>>>>>        Set pvComObject to vStatusBar
32415>>>>>>>        Set ComDrawDisabledText to bDrawDisabledText
32416>>>>>>>        Set ComVisible to bVisible
32417>>>>>>>        Set ComIdleText to sIdleText
32418>>>>>>>        
32418>>>>>>>        Send OnCreate
32419>>>>>>>        
32419>>>>>>>        Broadcast Send CreateComInstance Self
32421>>>>>>>        
32421>>>>>>>    End_Procedure
32422>>>>>>>    
32422>>>>>>>    // display "main" status help. Usually provided from DD.
32422>>>>>>>    Procedure Show_Status_Help String sStatusHelp
32424>>>>>>>        Set psIdleText to sStatusHelp
32425>>>>>>>    End_Procedure
32426>>>>>>>    
32426>>>>>>>    // show the view name in the pane if a phoViewPane exists
32426>>>>>>>    Procedure Show_View_Name String sName
32428>>>>>>>        Handle hoPane
32428>>>>>>>        Get phoViewPane to hoPane
32429>>>>>>>        If (hoPane) Begin
32431>>>>>>>            Set psText of hoPane to sName
32432>>>>>>>        End
32432>>>>>>>>
32432>>>>>>>    End_Procedure
32433>>>>>>>    
32433>>>>>>>    // legacy from old status bar
32433>>>>>>>    Procedure Exit_Menu
32435>>>>>>>    End_Procedure
32436>>>>>>>    
32436>>>>>>>    // returns an array of all pane objects (these are the DF objects, if additional COM panes were
32436>>>>>>>    // created they are not here)
32436>>>>>>>    Function PaneObjects Returns Handle[]
32438>>>>>>>        Handle[] hoPanes
32439>>>>>>>        Broadcast Send RegisterStatusPaneObject (&hoPanes)
32441>>>>>>>        Function_Return hoPanes
32442>>>>>>>    End_Function
32443>>>>>>>    
32443>>>>>>>    // Find the DF object for the passed COM object. Returns 0 if none found
32443>>>>>>>    Function FindPaneObject Variant vPane Returns Handle
32445>>>>>>>        Handle hoPane
32445>>>>>>>        Handle[] hoPanes
32446>>>>>>>        Integer i iPanes iId
32446>>>>>>>        Get Create U_cCJComStatusBarPane to hoPane
32447>>>>>>>        Set pvComObject of hoPane to vPane
32448>>>>>>>        Get ComId of hoPane to iId
32449>>>>>>>        Send destroy of hoPane
32450>>>>>>>        Get PaneObjects to hoPanes // get all df pane objects
32451>>>>>>>        Move (SizeOfArray(hoPanes)) to iPanes
32452>>>>>>>        For i from 0 to (iPanes-1)
32458>>>>>>>>
32458>>>>>>>            If (iId=piId(hoPanes[i])) Begin // search for DF object with same ID as com object
32460>>>>>>>                Function_Return hoPanes[i]
32461>>>>>>>            End
32461>>>>>>>>
32461>>>>>>>        Loop
32462>>>>>>>>
32462>>>>>>>        Function_Return 0
32463>>>>>>>    End_Function
32464>>>>>>>    
32464>>>>>>>    // this returns the width, in pixels, needed to display a string.
32464>>>>>>>    Function PaneTextWidth WString sText Returns Integer
32466>>>>>>>        Handle hWnd hDC
32466>>>>>>>        Integer bOK
32466>>>>>>>        tWinPoint Point
32466>>>>>>>        tWinPoint Point
32466>>>>>>>        
32466>>>>>>>        Get Window_Handle to hWnd
32467>>>>>>>        Move (GetDC(hWnd)) to hDC
32468>>>>>>>        
32468>>>>>>>        Move (GetTextExtentW(hDC, AddressOf(sText), length(sText), AddressOf(Point))) to bOk
32469>>>>>>>        
32469>>>>>>>        Move (ReleaseDC(hWnd, hDC)) to hDC
32470>>>>>>>        Function_Return Point.x
32471>>>>>>>    End_Function
32472>>>>>>>    
32472>>>>>>>    Procedure Update
32474>>>>>>>        Send OnUpdate
32475>>>>>>>    End_Procedure
32476>>>>>>>    
32476>>>>>>>    Procedure OnUpdate
32478>>>>>>>    End_Procedure
32479>>>>>>>    
32479>>>>>>>    Procedure OnCreate
32481>>>>>>>    End_Procedure
32482>>>>>>>    
32482>>>>>>>    Procedure OnComPaneClick Variant llPane
32484>>>>>>>        Handle hoPane
32484>>>>>>>        Get FindPaneObject llPane to hoPane
32485>>>>>>>        If hoPane Begin
32487>>>>>>>            Send onClick of hoPane
32488>>>>>>>        End
32488>>>>>>>>
32488>>>>>>>    End_Procedure
32489>>>>>>>    
32489>>>>>>>    Procedure OnComPaneDblClick Variant llPane
32491>>>>>>>        Handle hoPane
32491>>>>>>>        Get FindPaneObject llPane to hoPane
32492>>>>>>>        If hoPane Begin
32494>>>>>>>            Send onDblClick of hoPane
32495>>>>>>>        End
32495>>>>>>>>
32495>>>>>>>    End_Procedure
32496>>>>>>>    
32496>>>>>>>End_Class
32497>>>>>>>
32497>>>>>>>
32497>>>>>>>Class cCJStatusBarPane is a cCJComStatusBarPane
32498>>>>>>>    
32498>>>>>>>    Procedure Construct_Object
32500>>>>>>>        Forward Send Construct_Object
32502>>>>>>>        Property Integer pePrivateAlignment xtpAlignmentLeft
32503>>>>>>>        Property Integer piPrivateBackGroundColor clNone
32504>>>>>>>        Property Integer piPrivateTextColor clNone
32505>>>>>>>        Property String  psPrivateText ''
32506>>>>>>>        Property String  psPrivateTooltip ''
32507>>>>>>>        Property Boolean pbPrivateVisible True
32508>>>>>>>        Property Integer piPrivateWidth 0
32509>>>>>>>        Property Integer pbPrivateStyleNoBorders False
32510>>>>>>>        Property Integer pbPrivateStyleDisabled False
32511>>>>>>>        Property Integer pbPrivateStyleStretch False
32512>>>>>>>        Property Integer  piPrivateIconId 0
32513>>>>>>>        
32513>>>>>>>        Property String  psImage ''
32514>>>>>>>        
32514>>>>>>>        Property Integer piId sbpIDAutoAssign
32515>>>>>>>        
32515>>>>>>>        Set peNeighborhood to nhNo
32516>>>>>>>    End_Procedure
32517>>>>>>>    
32517>>>>>>>    Procedure Set pbVisible Boolean bValue
32519>>>>>>>        Set pbPrivateVisible to bValue
32520>>>>>>>        If (IsComObjectCreated(Self)) Begin
32522>>>>>>>            Set ComVisible to bValue
32523>>>>>>>        End
32523>>>>>>>>
32523>>>>>>>    End_Procedure
32524>>>>>>>    
32524>>>>>>>    Function pbVisible Returns Boolean
32526>>>>>>>        Boolean bValue
32526>>>>>>>        If (IsComObjectCreated(Self)) Begin
32528>>>>>>>            Get ComVisible to bValue
32529>>>>>>>        End
32529>>>>>>>>
32529>>>>>>>        Else Begin
32530>>>>>>>            Get pbPrivateVisible to bValue
32531>>>>>>>        End
32531>>>>>>>>
32531>>>>>>>        Function_Return bValue
32532>>>>>>>    End_Function
32533>>>>>>>    
32533>>>>>>>    Procedure Set piBackgroundColor Integer iValue
32535>>>>>>>        Set piPrivateBackgroundColor to iValue
32536>>>>>>>        If (IsComObjectCreated(Self)) Begin
32538>>>>>>>            Set ComBackgroundColor to iValue
32539>>>>>>>        End
32539>>>>>>>>
32539>>>>>>>    End_Procedure
32540>>>>>>>    
32540>>>>>>>    Function piBackgroundColor Returns Integer
32542>>>>>>>        Integer iValue
32542>>>>>>>        If (IsComObjectCreated(Self)) Begin
32544>>>>>>>            Get ComBackgroundColor to iValue
32545>>>>>>>        End
32545>>>>>>>>
32545>>>>>>>        Else Begin
32546>>>>>>>            Get piPrivateBackgroundColor to iValue
32547>>>>>>>        End
32547>>>>>>>>
32547>>>>>>>        Function_Return iValue
32548>>>>>>>    End_Function
32549>>>>>>>    
32549>>>>>>>    Procedure Set piTextColor Integer iValue
32551>>>>>>>        Set piPrivateTextColor to iValue
32552>>>>>>>        If (IsComObjectCreated(Self)) Begin
32554>>>>>>>            Set ComTextColor to iValue
32555>>>>>>>        End
32555>>>>>>>>
32555>>>>>>>    End_Procedure
32556>>>>>>>    
32556>>>>>>>    Function piTextColor Returns Integer
32558>>>>>>>        Integer iValue
32558>>>>>>>        If (IsComObjectCreated(Self)) Begin
32560>>>>>>>            Get ComTextColor to iValue
32561>>>>>>>        End
32561>>>>>>>>
32561>>>>>>>        Else Begin
32562>>>>>>>            Get piPrivateTextColor to iValue
32563>>>>>>>        End
32563>>>>>>>>
32563>>>>>>>        Function_Return iValue
32564>>>>>>>    End_Function
32565>>>>>>>    
32565>>>>>>>    Procedure Set piWidth Integer iValue
32567>>>>>>>        Set piPrivateWidth to iValue
32568>>>>>>>        If (IsComObjectCreated(Self)) Begin
32570>>>>>>>            Set ComWidth to iValue
32571>>>>>>>        End
32571>>>>>>>>
32571>>>>>>>    End_Procedure
32572>>>>>>>    
32572>>>>>>>    Function piWidth Returns Integer
32574>>>>>>>        Integer iValue
32574>>>>>>>        If (IsComObjectCreated(Self)) Begin
32576>>>>>>>            Get ComWidth to iValue
32577>>>>>>>        End
32577>>>>>>>>
32577>>>>>>>        Else Begin
32578>>>>>>>            Get piPrivateWidth to iValue
32579>>>>>>>        End
32579>>>>>>>>
32579>>>>>>>        Function_Return iValue
32580>>>>>>>    End_Function
32581>>>>>>>    
32581>>>>>>>    Procedure Set peAlignment Integer eValue
32583>>>>>>>        Set pePrivateAlignment to eValue
32584>>>>>>>        If (IsComObjectCreated(Self)) Begin
32586>>>>>>>            Set ComAlignment to eValue
32587>>>>>>>        End
32587>>>>>>>>
32587>>>>>>>    End_Procedure
32588>>>>>>>    
32588>>>>>>>    Function peAlignment Returns Integer
32590>>>>>>>        Integer eValue
32590>>>>>>>        If (IsComObjectCreated(Self)) Begin
32592>>>>>>>            Get ComAlignment to eValue
32593>>>>>>>        End
32593>>>>>>>>
32593>>>>>>>        Else Begin
32594>>>>>>>            Get pePrivateAlignment to eValue
32595>>>>>>>        End
32595>>>>>>>>
32595>>>>>>>        Function_Return eValue
32596>>>>>>>    End_Function
32597>>>>>>>    
32597>>>>>>>    Procedure SetPaneStyle Integer iMask Boolean bValue Handle hmMessage
32599>>>>>>>        Integer eValue
32599>>>>>>>        Set hmMessage to bValue
32600>>>>>>>        If (IsComObjectCreated(Self)) Begin
32602>>>>>>>            Set ComStyle to eValue
32603>>>>>>>            If (bValue) Begin
32605>>>>>>>                Move (AddBitValue(iMask,eValue)) to eValue
32606>>>>>>>            End
32606>>>>>>>>
32606>>>>>>>            Else Begin
32607>>>>>>>                Move (RemoveBitValue(iMask,eValue)) to eValue
32608>>>>>>>            End
32608>>>>>>>>
32608>>>>>>>            Set ComStyle to eValue
32609>>>>>>>        End
32609>>>>>>>>
32609>>>>>>>    End_Procedure
32610>>>>>>>    
32610>>>>>>>    Function GetPaneStyle Integer iMask Handle hmMessage Returns Boolean
32612>>>>>>>        Integer eValue
32612>>>>>>>        Boolean bValue
32612>>>>>>>        If (IsComObjectCreated(Self)) Begin
32614>>>>>>>            Get ComStyle to eValue
32615>>>>>>>            Move (eValue iand iMask) to bValue
32616>>>>>>>        End
32616>>>>>>>>
32616>>>>>>>        Else Begin
32617>>>>>>>            Get hmMessage to bValue
32618>>>>>>>        End
32618>>>>>>>>
32618>>>>>>>        Function_Return bValue
32619>>>>>>>    End_Function
32620>>>>>>>    
32620>>>>>>>    Procedure Set pbStyleNoBorders Boolean bValue
32622>>>>>>>        Send SetPaneStyle SBPS_NOBORDERS bValue set_pbPrivateStyleNoBorders
32623>>>>>>>    End_Procedure
32624>>>>>>>    
32624>>>>>>>    Function pbStyleNoBorders Returns Boolean
32626>>>>>>>        Boolean bValue
32626>>>>>>>        Get GetPaneStyle SBPS_NOBORDERS get_pbPrivateStyleNoBorders to bValue
32627>>>>>>>        Function_Return bValue
32628>>>>>>>    End_Function
32629>>>>>>>    
32629>>>>>>>    Procedure Set pbStyleDisabled Boolean bValue
32631>>>>>>>        Send SetPaneStyle SBPS_DISABLED bValue set_pbPrivateStyleDisabled
32632>>>>>>>    End_Procedure
32633>>>>>>>    
32633>>>>>>>    Function pbStyleDisabled Returns Boolean
32635>>>>>>>        Boolean bValue
32635>>>>>>>        Get GetPaneStyle SBPS_DISABLED get_pbPrivateStyleDisabled to bValue
32636>>>>>>>        Function_Return bValue
32637>>>>>>>    End_Function
32638>>>>>>>    
32638>>>>>>>    Procedure Set pbStyleStretch Boolean bValue
32640>>>>>>>        Send SetPaneStyle SBPS_STRETCH bValue Set_pbPrivateStyleStretch
32641>>>>>>>    End_Procedure
32642>>>>>>>    
32642>>>>>>>    Function pbStyleStretch Returns Boolean
32644>>>>>>>        Boolean bValue
32644>>>>>>>        Get GetPaneStyle SBPS_STRETCH get_pbPrivateStyleStretch to bValue
32645>>>>>>>        Function_Return bValue
32646>>>>>>>    End_Function
32647>>>>>>>    
32647>>>>>>>    
32647>>>>>>>    Procedure Set psText String sValue
32649>>>>>>>        Set psPrivateText to sValue
32650>>>>>>>        If (IsComObjectCreated(Self)) Begin
32652>>>>>>>            Set ComText to sValue
32653>>>>>>>        End
32653>>>>>>>>
32653>>>>>>>    End_Procedure
32654>>>>>>>    
32654>>>>>>>    Function psText Returns String
32656>>>>>>>        String sValue
32656>>>>>>>        If (IsComObjectCreated(Self)) Begin
32658>>>>>>>            Get ComText to sValue
32659>>>>>>>        End
32659>>>>>>>>
32659>>>>>>>        Else Begin
32660>>>>>>>            Get psPrivateText to sValue
32661>>>>>>>        End
32661>>>>>>>>
32661>>>>>>>        Function_Return sValue
32662>>>>>>>    End_Function
32663>>>>>>>    
32663>>>>>>>    Procedure Set psToolTip String sValue
32665>>>>>>>        Set psPrivateToolTip to sValue
32666>>>>>>>        If (IsComObjectCreated(Self)) Begin
32668>>>>>>>            Set ComToolTip to sValue
32669>>>>>>>        End
32669>>>>>>>>
32669>>>>>>>    End_Procedure
32670>>>>>>>    
32670>>>>>>>    Function psToolTip Returns String
32672>>>>>>>        String sValue
32672>>>>>>>        If (IsComObjectCreated(Self)) Begin
32674>>>>>>>            Get ComToolTip to sValue
32675>>>>>>>        End
32675>>>>>>>>
32675>>>>>>>        Else Begin
32676>>>>>>>            Get psPrivateToolTip to sValue
32677>>>>>>>        End
32677>>>>>>>>
32677>>>>>>>        Function_Return sValue
32678>>>>>>>    End_Function
32679>>>>>>>    
32679>>>>>>>    // normally this is zero and not changed. When zero the imageId used will be
32679>>>>>>>    // the statusbarId and this is the ID that is used when the psImage method is used.
32679>>>>>>>    // Using psImage is preferred as it adds the icon and assigns it to the object.
32679>>>>>>>    // This can be used to change icons. Note 0=use StatusbarId
32679>>>>>>>    Procedure Set piIconId Integer iValue
32681>>>>>>>        Set piPrivateIconId to iValue
32682>>>>>>>        If (IsComObjectCreated(Self)) Begin
32684>>>>>>>            Set ComIconIndex to iValue
32685>>>>>>>        End
32685>>>>>>>>
32685>>>>>>>    End_Procedure
32686>>>>>>>    
32686>>>>>>>    Function piIconId Returns Integer
32688>>>>>>>        Integer iValue
32688>>>>>>>        If (IsComObjectCreated(Self)) Begin
32690>>>>>>>            Get ComIconIndex to iValue
32691>>>>>>>        End
32691>>>>>>>>
32691>>>>>>>        Else Begin
32692>>>>>>>            Get piPrivateIconId to iValue
32693>>>>>>>        End
32693>>>>>>>>
32693>>>>>>>        Function_Return iValue
32694>>>>>>>    End_Function
32695>>>>>>>    
32695>>>>>>>    Procedure CreateComInstance Handle hoStatusBar
32697>>>>>>>        Variant vStatusBarPane
32697>>>>>>>        String sImage sText sToolTip
32697>>>>>>>        Integer iWidth eAlignment eStyle iBackGroundColor iTextColor iId iIconId iNewIconid
32697>>>>>>>        Boolean  bVisible bOk bStyleStretch bStyleDisabled bStyleNoBorders
32697>>>>>>>        Handle hoCommandBars
32697>>>>>>>        
32697>>>>>>>        Get CommandBarSystemObject to hoCommandBars
32698>>>>>>>        
32698>>>>>>>        Get pePrivateAlignment to eAlignment
32699>>>>>>>        Get pbPrivateVisible to bVisible
32700>>>>>>>        Get psPrivateText to sText
32701>>>>>>>        Get psPrivateTooltip to sToolTip
32702>>>>>>>        Get piPrivateBackGroundColor to iBackGroundColor
32703>>>>>>>        Get piPrivateTextColor to iTextColor
32704>>>>>>>        Get psImage to sImage
32705>>>>>>>        Get piPrivateWidth to iWidth
32706>>>>>>>        Get pbPrivateStyleStretch to bStyleStretch
32707>>>>>>>        Get pbPrivateStyleNoBorders to bStyleNoBorders
32708>>>>>>>        Get pbPrivateStyleDisabled to bStyleDisabled
32709>>>>>>>        Get piPrivateIconId to iIconId
32710>>>>>>>        
32710>>>>>>>        Get piId to iId
32711>>>>>>>        
32711>>>>>>>        // this check is added because a duplicate ID throws an exception error
32711>>>>>>>        Get ComFindPane of hoStatusBar iId to vStatusBarPane
32712>>>>>>>        If (not(IsNullComObject(vStatusBarPane))) Begin
32714>>>>>>>            Error DFERR_PROGRAM ("Cannot add status pane. Duplicate Id (" - String(iId) - ")")
32715>>>>>>>>
32715>>>>>>>            Procedure_Return
32716>>>>>>>        End
32716>>>>>>>>
32716>>>>>>>        
32716>>>>>>>        Get ComAddPane of hoStatusBar iId to vStatusBarPane
32717>>>>>>>        Set pvComObject to vStatusBarPane
32718>>>>>>>        Set ComAlignment to eAlignment
32719>>>>>>>        If (sText<>"") Begin
32721>>>>>>>            Set ComText to sText
32722>>>>>>>        End
32722>>>>>>>>
32722>>>>>>>        Set ComToolTip to sToolTip
32723>>>>>>>        If (iBackGroundColor<>clNone) Begin
32725>>>>>>>            Set ComBackgroundColor to iBackGroundColor
32726>>>>>>>        End
32726>>>>>>>>
32726>>>>>>>        If (iTextColor<>clNone) Begin
32728>>>>>>>            Set ComTextColor to iTextColor
32729>>>>>>>        End
32729>>>>>>>>
32729>>>>>>>        
32729>>>>>>>        Move (If(bStyleDisabled,SBPS_DISABLED,0) + ;            If(bStyleNoBorders,SBPS_NOBORDERS,0) + ;            If(bStyleStretch,SBPS_STRETCH,0)) to eStyle
32730>>>>>>>        Set ComStyle to eStyle
32731>>>>>>>        
32731>>>>>>>        If (sImage<>"") Begin
32733>>>>>>>            Get AddImage of hoCommandBars sImage iId xtpImageNormal to iNewIconid
32734>>>>>>>            Set ComIconIndex to iId
32735>>>>>>>        End
32735>>>>>>>>
32735>>>>>>>        If (iIconId<>0) Begin
32737>>>>>>>            Set ComIconIndex to iIconId
32738>>>>>>>        End
32738>>>>>>>>
32738>>>>>>>        
32738>>>>>>>        Set ComVisible to bVisible
32739>>>>>>>        Set ComWidth to iWidth
32740>>>>>>>        
32740>>>>>>>        Send OnCreate
32741>>>>>>>        
32741>>>>>>>    End_Procedure
32742>>>>>>>    
32742>>>>>>>    Procedure RegisterStatusPaneObject Handle[] ByRef hoPanes
32744>>>>>>>        Move Self to hoPanes[SizeOfArray(hoPanes)]
32745>>>>>>>    End_Procedure
32746>>>>>>>    
32746>>>>>>>    // auto assign an Id for the status bar. Called in end_construct_object if needed
32746>>>>>>>    Function AssignStatusBarID Returns Integer
32748>>>>>>>        Integer iId
32748>>>>>>>        Get piStatusBarId  to iId
32749>>>>>>>        Set piStatusBarId to (iId + 1)
32750>>>>>>>        Function_Return iId
32751>>>>>>>    End_Function
32752>>>>>>>    
32752>>>>>>>    Procedure OnCreate
32754>>>>>>>    End_Procedure
32755>>>>>>>    
32755>>>>>>>    Procedure OnClick
32757>>>>>>>    End_Procedure
32758>>>>>>>    
32758>>>>>>>    Procedure OnDblClick
32760>>>>>>>    End_Procedure
32761>>>>>>>    
32761>>>>>>>    Procedure End_Construct_Object
32763>>>>>>>        Integer iID
32763>>>>>>>        Get piId to iID
32764>>>>>>>        If (iID=sbpIDAutoAssign) Begin
32766>>>>>>>            Get AssignStatusBarID to iID
32767>>>>>>>            Set piId to iID
32768>>>>>>>        End
32768>>>>>>>>
32768>>>>>>>        Forward Send End_Construct_Object
32770>>>>>>>    End_Procedure
32771>>>>>>>    
32771>>>>>>>End_Class
32772>>>>>>>
32772>>>>>Use LanguageText.pkg
32772>>>>>
32772>>>>>
32772>>>>>Class cCJUndoMenuItem is a cCJMenuItem
32773>>>>>    
32773>>>>>    Procedure Construct_Object
32775>>>>>        Forward Send Construct_Object
32777>>>>>        Set psCaption   to C_$CaptionUndo
32778>>>>>        Set psToolTip to C_$ToolTipUndo
32779>>>>>        Set psDescription to C_$DescUndo
32780>>>>>        Set psImage to "ActionUndo.ico"
32781>>>>>        Set pbActiveUpdate to True
32782>>>>>        Set psCategory to C_$CategoryEdit
32783>>>>>        Set psShortcut to C_$Key_Ctrl_Z
32784>>>>>    End_Procedure
32785>>>>>    
32785>>>>>    Procedure OnExecute Variant vCommandBarControl
32787>>>>>        Send Undo of (focus(Self))
32788>>>>>    End_Procedure
32789>>>>>    
32789>>>>>    Function IsEnabled Returns Boolean
32791>>>>>        Boolean bEnabled
32791>>>>>        Get CanUndo of (Focus(Self)) to bEnabled
32792>>>>>        Function_Return bEnabled
32793>>>>>    End_Function
32794>>>>>    
32794>>>>>End_Class
32795>>>>>
32795>>>>>
32795>>>>>Class cCJDeleteEditMenuItem is a cCJMenuItem
32796>>>>>    
32796>>>>>    Procedure Construct_Object
32798>>>>>        Forward Send Construct_Object
32800>>>>>        Set psCaption   to C_$CaptionDelete
32801>>>>>        Set psToolTip to C_$ToolTipDelete
32802>>>>>        Set psDescription to C_$DescDelete
32803>>>>>        Set psImage to "actionDelete.ico"
32804>>>>>        Set psShortcut to C_$Key_Delete
32805>>>>>        Set pbActiveUpdate to True
32806>>>>>        Set psCategory to C_$CategoryEdit
32807>>>>>    End_Procedure
32808>>>>>    
32808>>>>>    
32808>>>>>    Procedure OnExecute Variant vCommandBarControl
32810>>>>>        Send Delete of (focus(Self))
32811>>>>>    End_Procedure
32812>>>>>    
32812>>>>>    Function IsEnabled Returns Boolean
32814>>>>>        Boolean bEnabled
32814>>>>>        Get CanDelete of (Focus(Self)) to bEnabled
32815>>>>>        Function_Return bEnabled
32816>>>>>    End_Function
32817>>>>>    
32817>>>>>End_Class
32818>>>>>
32818>>>>>
32818>>>>>Class cCJCutMenuItem is a cCJMenuItem
32819>>>>>    
32819>>>>>    Procedure Construct_Object
32821>>>>>        Forward Send Construct_Object
32823>>>>>        Set psCaption   to C_$CaptionCut
32824>>>>>        Set psToolTip to C_$TooltipCut
32825>>>>>        Set psDescription to C_$DescCut
32826>>>>>        Set psImage to "actionCut.ico"
32827>>>>>        Set psShortcut to C_$Key_Ctrl_X
32828>>>>>        Set pbActiveUpdate to True
32829>>>>>        Set psCategory to C_$CategoryEdit
32830>>>>>    End_Procedure
32831>>>>>    
32831>>>>>    
32831>>>>>    Procedure OnExecute Variant vCommandBarControl
32833>>>>>        Send Cut of (focus(Self))
32834>>>>>    End_Procedure
32835>>>>>    
32835>>>>>    Function IsEnabled Returns Boolean
32837>>>>>        Boolean bEnabled
32837>>>>>        Get CanCut of (Focus(Self)) to bEnabled
32838>>>>>        Function_Return bEnabled
32839>>>>>    End_Function
32840>>>>>    
32840>>>>>End_Class
32841>>>>>
32841>>>>>
32841>>>>>Class cCJCopyMenuItem is a cCJMenuItem
32842>>>>>    
32842>>>>>    Procedure Construct_Object
32844>>>>>        Forward Send Construct_Object
32846>>>>>        Set psCaption   to C_$CaptionCopy
32847>>>>>        Set psToolTip to C_$ToolTipCopy
32848>>>>>        Set psDescription to C_$DescCopy
32849>>>>>        Set psImage to "actionCopy.ico"
32850>>>>>        Set psShortcut to C_$Key_Ctrl_C
32851>>>>>        Set pbActiveUpdate to True
32852>>>>>        Set psCategory to C_$CategoryEdit
32853>>>>>    End_Procedure
32854>>>>>    
32854>>>>>    
32854>>>>>    Procedure OnExecute Variant vCommandBarControl
32856>>>>>        Send Copy of (focus(Self))
32857>>>>>    End_Procedure
32858>>>>>    
32858>>>>>    Function IsEnabled Returns Boolean
32860>>>>>        Boolean bEnabled
32860>>>>>        Get CanCopy of (Focus(Self)) to bEnabled
32861>>>>>        Function_Return bEnabled
32862>>>>>    End_Function
32863>>>>>    
32863>>>>>End_Class
32864>>>>>
32864>>>>>
32864>>>>>Class cCJPasteMenuItem is a cCJMenuItem
32865>>>>>    
32865>>>>>    Procedure Construct_Object
32867>>>>>        Forward Send Construct_Object
32869>>>>>        Set psCaption   to C_$CaptionPaste
32870>>>>>        Set psToolTip to C_$ToolTipPaste
32871>>>>>        Set psDescription to C_$DescPaste
32872>>>>>        Set psImage to "actionPaste.ico"
32873>>>>>        Set pbActiveUpdate to True
32874>>>>>        Set psShortcut to C_$Key_Ctrl_V
32875>>>>>        Set psCategory to C_$CategoryEdit
32876>>>>>    End_Procedure
32877>>>>>    
32877>>>>>    
32877>>>>>    Procedure OnExecute Variant vCommandBarControl
32879>>>>>        Send Paste of (focus(Self))
32880>>>>>    End_Procedure
32881>>>>>    
32881>>>>>    Function IsEnabled Returns Boolean
32883>>>>>        Boolean bEnabled
32883>>>>>        Get CanPaste of (Focus(Self)) to bEnabled
32884>>>>>        Function_Return bEnabled
32885>>>>>    End_Function
32886>>>>>    
32886>>>>>End_Class
32887>>>>>
32887>>>>>Class cCJSelectAllMenuItem is a cCJMenuItem
32888>>>>>    
32888>>>>>    Procedure Construct_Object
32890>>>>>        Forward Send Construct_Object
32892>>>>>        Set psCaption   to C_$CaptionSelectAll
32893>>>>>        Set psToolTip to C_$ToolTipSelectAll
32894>>>>>        Set psDescription to C_$DescSelectAll
32895>>>>>        Set pbActiveUpdate to True
32896>>>>>        Set psShortcut to C_$Key_Ctrl_A
32897>>>>>        Set psCategory to C_$CategoryEdit
32898>>>>>    End_Procedure
32899>>>>>    
32899>>>>>    
32899>>>>>    Procedure OnExecute Variant vCommandBarControl
32901>>>>>        Send Select_All of (focus(Self))
32902>>>>>    End_Procedure
32903>>>>>    
32903>>>>>    Function IsEnabled Returns Boolean
32905>>>>>        Boolean bEnabled
32905>>>>>        Get CanSelect of (Focus(Self)) to bEnabled
32906>>>>>        Function_Return bEnabled
32907>>>>>    End_Function
32908>>>>>    
32908>>>>>End_Class
32909>>>>>
32909>>>>>
32909>>>>>Class cCJExitMenuItem is a cCJMenuItem
32910>>>>>    
32910>>>>>    Procedure Construct_Object
32912>>>>>        Forward Send Construct_Object
32914>>>>>        Set psCaption to C_$CaptionExit
32915>>>>>        Set psToolTip to C_$ToolTipExit
32916>>>>>        Set psDescription to C_$ToolTipExit
32917>>>>>        Set psShortcut to C_$Key_Alt_F4
32918>>>>>        Set psCategory to C_$CategoryFile
32919>>>>>    End_Procedure
32920>>>>>    
32920>>>>>    Procedure OnExecute Variant vCommandBarControl
32922>>>>>        Send Exit_Application of Desktop
32923>>>>>    End_Procedure
32924>>>>>    
32924>>>>>End_Class
32925>>>>>
32925>>>>>Class cCJHelpMenuItem is a cCJMenuItem
32926>>>>>    
32926>>>>>    Procedure Construct_Object
32928>>>>>        Forward Send Construct_Object
32930>>>>>        Set psCaption to C_$CaptionHelp
32931>>>>>        Set psDescription to C_$ToolTipHelp
32932>>>>>        Set psToolTip to C_$DescHelp
32933>>>>>        Set psImage to "ActionHelp.ico"
32934>>>>>        Set psShortcut to "F1"
32935>>>>>        Set psCategory to C_$CategoryHelp
32936>>>>>    End_Procedure
32937>>>>>    
32937>>>>>    Procedure OnExecute Variant vCommandBarControl
32939>>>>>        Send Help of (Focus(Self))
32940>>>>>    End_Procedure
32941>>>>>    
32941>>>>>End_Class
32942>>>>>
32942>>>>>Class cCJStatusbarMenuItem is a cCJMenuItem
32943>>>>>    
32943>>>>>    Procedure Construct_Object
32945>>>>>        Forward Send Construct_Object
32947>>>>>        Set psCaption to C_$CaptionAddStatusbar
32948>>>>>        Set psToolTip to C_$ToolTipAddStatusbar
32949>>>>>        Set psDescription to  C_$DescAddStatusbar
32950>>>>>        Set psCategory to C_$CategoryWindow
32951>>>>>    End_Procedure
32952>>>>>    
32952>>>>>    Procedure OnExecute Variant vCommandBarControl
32954>>>>>        Handle hoCommandBars hoClientArea
32954>>>>>        Get CommandBarSystemObject to hoCommandBars
32955>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32956>>>>>        If hoClientArea Begin
32958>>>>>            // the clientarea's parent panel has message
32958>>>>>            Send Toggle_StatusBar of (Parent(hoClientArea))
32959>>>>>        End
32959>>>>>>
32959>>>>>    End_Procedure
32960>>>>>    
32960>>>>>    Function IsChecked Returns Boolean
32962>>>>>        Boolean bOn
32962>>>>>        Handle hoCommandBars hoClientArea
32962>>>>>        Get CommandBarSystemObject to hoCommandBars
32963>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32964>>>>>        If hoClientArea Begin
32966>>>>>            // the clientarea's parent panel has message
32966>>>>>            Get StatusBar_State of (Parent(hoClientArea)) to bOn
32967>>>>>        End
32967>>>>>>
32967>>>>>        Function_Return bOn
32968>>>>>    End_Function
32969>>>>>End_Class
32970>>>>>
32970>>>>>Class cCJAutoArrangeIconsMenuItem is a cCJMenuItem
32971>>>>>    
32971>>>>>    Procedure Construct_Object
32973>>>>>        Forward Send Construct_Object
32975>>>>>        Set psCaption to C_$CaptionAutoArrangeIcons
32976>>>>>        Set psToolTip to C_$ToolTipAutoArrangeIcons
32977>>>>>        Set psDescription to C_$DescAutoArrangeIcons
32978>>>>>        Set psCategory to C_$CategoryWindow
32979>>>>>    End_Procedure
32980>>>>>    
32980>>>>>    Procedure OnExecute Variant vCommandBarControl
32982>>>>>        Handle hoCommandBars hoClientArea
32982>>>>>        Get CommandBarSystemObject to hoCommandBars
32983>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32984>>>>>        If hoClientArea Begin
32986>>>>>            // the clientarea's parent panel has message
32986>>>>>            Send Toggle_Auto_Arrange_Icons of (Parent(hoClientArea))
32987>>>>>        End
32987>>>>>>
32987>>>>>    End_Procedure
32988>>>>>    
32988>>>>>    Function IsChecked Returns Boolean
32990>>>>>        Boolean bOn
32990>>>>>        Handle hoCommandBars hoClientArea
32990>>>>>        Get CommandBarSystemObject to hoCommandBars
32991>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32992>>>>>        If hoClientArea Begin
32994>>>>>            // the clientarea's parent panel has message
32994>>>>>            Get Auto_Arrange_Icons_State of (Parent(hoClientArea)) to bOn
32995>>>>>        End
32995>>>>>>
32995>>>>>        Function_Return bOn
32996>>>>>    End_Function
32997>>>>>End_Class
32998>>>>>
32998>>>>>Class cCJRestoreMenusMenuItem is a cCJMenuItem
32999>>>>>    
32999>>>>>    Procedure Construct_Object
33001>>>>>        Forward Send Construct_Object
33003>>>>>        Set psCaption to C_$CaptionRestoreMenus
33004>>>>>        Set psToolTip to C_$ToolTipRestoreMenus
33005>>>>>        Set psDescription to C_$DescRestoreMenus
33006>>>>>        Set psCategory to C_$CategoryWindow
33007>>>>>    End_Procedure
33008>>>>>    
33008>>>>>    Procedure OnExecute Variant vCommandBarControl
33010>>>>>        Handle hoCommandBars
33010>>>>>        Get CommandBarSystemObject to hoCommandBars
33011>>>>>        Send RestoreLayout of hoCommandBars
33012>>>>>    End_Procedure
33013>>>>>    
33013>>>>>End_Class
33014>>>>>
33014>>>>>Class cCJCascadeMenuItem is a cCJMenuItem
33015>>>>>    
33015>>>>>    Procedure Construct_Object
33017>>>>>        Forward Send Construct_Object
33019>>>>>        Set psCaption to C_$CaptionCascade
33020>>>>>        Set psToolTip to C_$ToolTipCascade
33021>>>>>        Set psDescription to  C_$DescCascade
33022>>>>>        Set psImage to "ActionCascade.ico"
33023>>>>>        Set psCategory to C_$CategoryWindow
33024>>>>>    End_Procedure
33025>>>>>    
33025>>>>>    Procedure OnExecute Variant vCommandBarControl
33027>>>>>        Handle hoCommandBars hoClientArea
33027>>>>>        Get CommandBarSystemObject to hoCommandBars
33028>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
33029>>>>>        If hoClientArea Begin
33031>>>>>            Send Cascade_Windows of hoClientArea
33032>>>>>        End
33032>>>>>>
33032>>>>>    End_Procedure
33033>>>>>End_Class
33034>>>>>
33034>>>>>Class cCJTileHorizontally is a cCJMenuItem
33035>>>>>    
33035>>>>>    Procedure Construct_Object
33037>>>>>        Forward Send Construct_Object
33039>>>>>        Set psCaption to C_$CaptionTileHorizontally
33040>>>>>        Set psToolTip to C_$ToolTipTileHorizontally
33041>>>>>        Set psDescription to  C_$DescTileHorizontally
33042>>>>>        Set psImage to "ActionTileHorizontally.ico"
33043>>>>>        Set psCategory to C_$CategoryWindow
33044>>>>>    End_Procedure
33045>>>>>    
33045>>>>>    Procedure OnExecute Variant vCommandBarControl
33047>>>>>        Handle hoCommandBars hoClientArea
33047>>>>>        Get CommandBarSystemObject to hoCommandBars
33048>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
33049>>>>>        If hoClientArea Begin
33051>>>>>            Send Tile_Windows_Horizontal of hoClientArea
33052>>>>>        End
33052>>>>>>
33052>>>>>    End_Procedure
33053>>>>>End_Class
33054>>>>>
33054>>>>>Class cCJTileVertically is a cCJMenuItem
33055>>>>>    
33055>>>>>    Procedure Construct_Object
33057>>>>>        Forward Send Construct_Object
33059>>>>>        Set psCaption to C_$CaptionTileVertically
33060>>>>>        Set psToolTip to C_$ToolTipTileVertically
33061>>>>>        Set psDescription to  C_$DescTileVertically
33062>>>>>        Set psImage to "ActionTileVertically.ico"
33063>>>>>        Set psCategory to C_$CategoryWindow
33064>>>>>    End_Procedure
33065>>>>>    
33065>>>>>    Procedure OnExecute Variant vCommandBarControl
33067>>>>>        Handle hoCommandBars hoClientArea
33067>>>>>        Get CommandBarSystemObject to hoCommandBars
33068>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
33069>>>>>        If hoClientArea Begin
33071>>>>>            Send Tile_Windows_Vertical of hoClientArea
33072>>>>>        End
33072>>>>>>
33072>>>>>    End_Procedure
33073>>>>>End_Class
33074>>>>>
33074>>>>>Class cCJMinimizeWindowsMenuItem is a cCJMenuItem
33075>>>>>    
33075>>>>>    Procedure Construct_Object
33077>>>>>        Forward Send Construct_Object
33079>>>>>        Set psCaption to C_$CaptionMinimizeWindows
33080>>>>>        Set psToolTip to C_$ToolTipMinimizeWindows
33081>>>>>        Set psDescription to  C_$DescMinimizeWindows
33082>>>>>        Set psCategory to C_$CategoryWindow
33083>>>>>    End_Procedure
33084>>>>>    
33084>>>>>    Procedure OnExecute Variant vCommandBarControl
33086>>>>>        Handle hoCommandBars hoClientArea
33086>>>>>        Get CommandBarSystemObject to hoCommandBars
33087>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
33088>>>>>        If hoClientArea Begin
33090>>>>>            // the clientarea's parent panel has message
33090>>>>>            Send Minimize_all_Windows of (Parent(hoClientArea))
33091>>>>>        End
33091>>>>>>
33091>>>>>    End_Procedure
33092>>>>>End_Class
33093>>>>>
33093>>>>>
33093>>>>>Class cCJRestoreWindowsMenuItem is a cCJMenuItem
33094>>>>>    
33094>>>>>    Procedure Construct_Object
33096>>>>>        Forward Send Construct_Object
33098>>>>>        Set psCaption to C_$CaptionRestoreWindows
33099>>>>>        Set psToolTip to C_$ToolTipRestoreWindows
33100>>>>>        Set psDescription to  C_$DescRestoreWindows
33101>>>>>        Set psCategory to C_$CategoryWindow
33102>>>>>    End_Procedure
33103>>>>>    
33103>>>>>    Procedure OnExecute Variant vCommandBarControl
33105>>>>>        Handle hoCommandBars hoClientArea
33105>>>>>        Get CommandBarSystemObject to hoCommandBars
33106>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
33107>>>>>        If hoClientArea Begin
33109>>>>>            // the clientarea's parent panel has message
33109>>>>>            Send Restore_all_Windows of (Parent(hoClientArea))
33110>>>>>        End
33110>>>>>>
33110>>>>>    End_Procedure
33111>>>>>End_Class
33112>>>>>
33112>>>>>Class cCJArrangeIconsMenuItem is a cCJMenuItem
33113>>>>>    
33113>>>>>    Procedure Construct_Object
33115>>>>>        Forward Send Construct_Object
33117>>>>>        Set psCaption to C_$CaptionArrangeIcons
33118>>>>>        Set psToolTip to C_$ToolTipArrangeIcons
33119>>>>>        Set psDescription to  C_$DescArrangeIcons
33120>>>>>        Set psCategory to C_$CategoryWindow
33121>>>>>    End_Procedure
33122>>>>>    
33122>>>>>    Procedure OnExecute Variant vCommandBarControl
33124>>>>>        Handle hoCommandBars hoClientArea
33124>>>>>        Get CommandBarSystemObject to hoCommandBars
33125>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
33126>>>>>        If hoClientArea Begin
33128>>>>>            Send Arrange_Icons of hoClientArea
33129>>>>>        End
33129>>>>>>
33129>>>>>    End_Procedure
33130>>>>>    
33130>>>>>End_Class
33131>>>
33131>>>Object oEditContextMenu is a cCJContextMenu
33133>>>    
33133>>>    Move Self to Default_Form_Floating_Menu_ID
33134>>>    
33134>>>    Object oUndoMenuItem is a cCJUndoMenuItem
33136>>>    End_Object
33137>>>    
33137>>>    Object oCutMenuItem is a cCJCutMenuItem
33139>>>        Set pbControlBeginGroup to True
33140>>>    End_Object
33141>>>    
33141>>>    Object oCopyMenuItem is a cCJCopyMenuItem
33143>>>    End_Object
33144>>>
33144>>>    Object oPasteMenuItem is a cCJPasteMenuItem
33146>>>    End_Object
33147>>>
33147>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
33149>>>    End_Object
33150>>>
33150>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
33152>>>        Set pbControlBeginGroup to True
33153>>>    End_Object
33154>>>
33154>>>End_Object
33155>>>
33155>Use cDbUpdateFunctionLibrary.pkg
Including file: cDbUpdateFunctionLibrary.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cDbUpdateFunctionLibrary.pkg)
33155>>>//****************************************************************************
33155>>>// $Module type: Class
33155>>>// $Module name: cDbUpdateFunctionLibrary
33155>>>// $Author     : Nils Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
33155>>>// Web-site    : http://www.rdctools.com
33155>>>// Created     : 2014-09-05 @ 09:50 (Military date format: YY-MM-DD)
33155>>>//
33155>>>// Description : The class consists of a function library for database manipulations, aka make changes to a database.
33155>>>//               It has top level functions that uses the DataFlex db API, _but_ also specialized
33155>>>//               functions to make db changes to Sql databases with DAW drivers,
33155>>>//               with the help of Sql-scripts.
33155>>>//
33155>>>// $Rev History:
33155>>>//    2014-09-05  Module header created
33155>>>//
33155>>>//****************************************************************************
33155>>>//
33155>>>// Martin Moleman on SQL Server and DateTime2 (Don't use DataTime any longer !)
33155>>>// One remark about your change: I would not change to datetime2(7) (7 decimals) but to
33155>>>// datetime2(3) (3 decimals = milliseconds) or If you don't need the milliseconds datetime2(0).
33155>>>// The reason is that the DataFlex DateTime type only allows 3 decimals. When using 7
33155>>>// decimals you may Get truncation that again may cause problems with finding.
33155>>>//
33155>>>// Important! The conversion from DateTime to Date or datetime2 will also convert all dummy zero Date values from 1753-01-01 to 0001-01-01.
33155>>>// This is important to realize. The conversion will actually change the data in the database (done by the driver)
33155>>>
33155>>>
33155>>>// DF_DATABASE_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA
33155>>>// Determines for all DataFlex data types, which SQL native types will be used when creating new columns.
33155>>>// Set_Attribute DF_DATABASE_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA of {driverNumber} {databaseHandle} ;
33155>>>// to {MAP_DF_TO_SQL_TYPE_SQL2000|MAP_DF_TO_SQL_TYPE_SQL2005|MAP_DF_TO_SQL_TYPE_SQL2008|MAP_DF_TO_SQL_TYPE_SQL2012}
33155>>>//
33155>>>Use cBaseDbUpdateFuncLib.pkg
Including file: cBaseDbUpdateFuncLib.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cBaseDbUpdateFuncLib.pkg)
33155>>>>>//****************************************************************************
33155>>>>>// $Module type: Class
33155>>>>>// $Module name: cBaseDbUpdateFuncLib
33155>>>>>// $Author     : Nils Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
33155>>>>>// Web-site    : http://www.rdctools.com
33155>>>>>// Created     : 2023-11-06 @ 09:50 (Military date format: YY-MM-DD)
33155>>>>>//
33155>>>>>// Description : The class consists of the basis/parent for the cDbUpdateFunctionLibrary class
33155>>>>>//               It contains helper functions for the cDbUpdateFunctionLibrary class
33155>>>>>//
33155>>>>>// $Rev History:
33155>>>>>//    2023-11-06  Module header created
33155>>>>>//
33155>>>>>//****************************************************************************
33155>>>>>Use cApplication.pkg
33155>>>>>Use seq_chnl.pkg
33155>>>>>Use GlobalFunctionsProcedures.pkg
33155>>>>>Use Datadict.pkg                        // Declaration of DF_FILE_SQL_TABLE_NAME
Including file: Datadict.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Datadict.pkg)
33155>>>>>>>Use VDFBase.pkg
33155>>>>>>>Use LanguageText.pkg // language support VDF pkg replacement strings
33155>>>>>>>
33155>>>>>>>Register_Procedure File_Field_Value_Changed
33155>>>>>>>Register_Procedure File_Field_Mask_Changed
33155>>>>>>>Register_Procedure File_Field_Label_Changed
33155>>>>>>>Register_Procedure File_Field_Option_Changed
33155>>>>>>>Register_Function  Extended_DEO_State Returns Integer
33155>>>>>>>Register_Function  Entry_Refresh_State Returns Integer
33155>>>>>>>Register_Procedure Set Entry_Refresh_State Integer iState
33155>>>>>>>Register_Function  Allow_Foreign_New_Save_State Returns Integer
33155>>>>>>>Register_Function  Server Returns Integer
33155>>>>>>>
33155>>>>>>>Use Data_Set.pkg
Including file: Data_set.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Data_set.pkg)
33155>>>>>>>>>Use VDFBase.pkg
33155>>>>>>>>>Use fndmodes.pkg
Including file: fndmodes.pkg    (C:\Program Files\DataFlex 24.0\Pkg\fndmodes.pkg)
33155>>>>>>>>>>>//
33155>>>>>>>>>>>// special find modes
33155>>>>>>>>>>>//
33155>>>>>>>>>>>Define NEXT_RECORD  for 5 // find-next
33155>>>>>>>>>>>Define FIRST_RECORD for 6 // find-first
33155>>>>>>>>>>>Define LAST_RECORD  for 7 // find-last 
33155>>>>>>>>>Use refmodes.pkg
Including file: refmodes.pkg    (C:\Program Files\DataFlex 24.0\Pkg\refmodes.pkg)
33155>>>>>>>>>>>//
33155>>>>>>>>>>>// constants for REFRESH message parameter values
33155>>>>>>>>>>>//
33155>>>>>>>>>>>Define MODE_CLEAR             for 1  //notification from origin of clear
33155>>>>>>>>>>>Define MODE_FIND_OR_CLEAR_SET for 2  //notification from find or clear
33155>>>>>>>>>>>Define MODE_CLEAR_ALL         for 3  //notification from clear-all
33155>>>>>>>>>>>Define MODE_DELETE            for 4  //notification after successful delete
33155>>>>>>>>>>>Define MODE_SAVE              for 5  //notification after successful save
33155>>>>>>>>>>>
33155>>>>>>>>>
33155>>>>>>>>>
33155>>>>>>>>>//
33155>>>>>>>>>//Global integer status values
33155>>>>>>>>>//
33155>>>>>>>>>Define OPERATION_MODE   for |VI99  //status of data-sets in application
33155>>>>>>>>>Define OPERATION_ORIGIN for |VI108 //origin of current of data-set operation
33155>>>>>>>>>
33155>>>>>>>>>//
33155>>>>>>>>>//Constants for Operation_Mode global int values
33155>>>>>>>>>//
33155>>>>>>>>>Define MODE_WAITING  for 0  //wait-mode
33155>>>>>>>>>Define MODE_FINDING  for 1  //find-mode
33155>>>>>>>>>Define MODE_CLEARING for 2  //clear-mode
33155>>>>>>>>>Define MODE_CREATING for 3  //create-mode
33155>>>>>>>>>Define MODE_SAVING   for 4  //save-mode
33155>>>>>>>>>Define MODE_DELETING for 5  //delete-mode
33155>>>>>>>>>Define MODE_ABORTING for 6  //abort-mode
33155>>>>>>>>>Define MODE_VALIDATING for 7  //request_validate-mode : added for VDF7
33155>>>>>>>>>Define MODE_CLEARINGALL for 8 //clear-all mode (added in VDF8)
33155>>>>>>>>>
33155>>>>>>>>>//   The Data_Set class is implemented as a subclass of Entry_Client, with
33155>>>>>>>>>//   a C language handler providing the majority of new behavior.  The
33155>>>>>>>>>//   Data_Set class is intended to be a grouping agent for data-entry objects
33155>>>>>>>>>//   and a container for subordinate Data_Sets.
33155>>>>>>>>>//
33155>>>>>>>>>Use BaseData_Set.pkg
33155>>>>>>>>>
33155>>>>>>>>>// Data_Set class definition, public class layer. (Extra class layer needed
33155>>>>>>>>>// to augment C-based (Constrain) procedure(s).)
33155>>>>>>>>>
33155>>>>>>>>>Class DataSet is a BaseData_Set
33156>>>>>>>>>    
33156>>>>>>>>>    
33156>>>>>>>>>    // maintain old name for the time being to maximize compatability
33156>>>>>>>>>    // between character mode and windows versions. Developers should be
33156>>>>>>>>>    // able to move DS classes back and forth without changes.
33156>>>>>>>>>    Replace_Class_Name Data_Set DataSet
33156>>>>>>>>>    
33156>>>>>>>>>    Procedure Construct_Object //Integer Img#
33158>>>>>>>>>        Forward Send Construct_Object No_Image //Img#
33160>>>>>>>>>        
33160>>>>>>>>>        Property Integer Constrain_File 0
33161>>>>>>>>>        Property Integer Auto_Fill_State False
33162>>>>>>>>>        Property Integer Change_Disabled_State  False
33163>>>>>>>>>        // RT sets this inside of Mark_components a part of old entry_client DSO behavior. Now it is never used
33163>>>>>>>>>        Property Integer Component_State False
33164>>>>>>>>>        
33164>>>>>>>>>    End_Procedure
33165>>>>>>>>>    
33165>>>>>>>>>    
33165>>>>>>>>>    //
33165>>>>>>>>>    // This may be called by legacy DSO and DDO code
33165>>>>>>>>>    //
33165>>>>>>>>>    // IMPORTANT NOTE of change for 8.2:
33165>>>>>>>>>    //         DO NOT call or augment this anymore.
33165>>>>>>>>>    //
33165>>>>>>>>>    //         for sending: Find all cases of Field_main_index and change it to File_Field_Index
33165>>>>>>>>>    //
33165>>>>>>>>>    //         for augmenting: In DSOs - replace Field_main_index with File_field_index
33165>>>>>>>>>    //                         In DDOs - replace Field_main_Index with Field_Index and do not pass
33165>>>>>>>>>    //                                   the file parameter.
33165>>>>>>>>>    //                                   See DDOs Field_index and File_field_Index for more
33165>>>>>>>>>    //
33165>>>>>>>>>    Function Field_Main_Index Integer file Integer Field Returns Integer
33167>>>>>>>>>        Integer dataType fldNdx retval ordr
33167>>>>>>>>>        Move -1 to retval      //field has no main index (default)
33168>>>>>>>>>        If (file <> 0) Begin
33170>>>>>>>>>//      FIELD_DEF file field to dataType fldNdx
33170>>>>>>>>>            Get_Attribute DF_FIELD_INDEX of file Field to fldNdx // main index field
33173>>>>>>>>>            If (fldNdx > 0 or Field = 0) ;                Move fldNdx to retval //field has main index
33176>>>>>>>>>        End
33176>>>>>>>>>>
33176>>>>>>>>>        If (file = main_file(Self)) Begin
33178>>>>>>>>>            Get ordering to ordr
33179>>>>>>>>>            If (ordr >= 0) ;                Move ordr to retval  //ordering takes precedence over main index
33182>>>>>>>>>        End
33182>>>>>>>>>>
33182>>>>>>>>>        Function_Return retval
33183>>>>>>>>>    End_Function
33184>>>>>>>>>    
33184>>>>>>>>>    // This allows packages that still use data-sets instead of DDOs to use this
33184>>>>>>>>>    // message syntax.
33184>>>>>>>>>    // Note that this will never get here if the DD class is used as
33184>>>>>>>>>    // it has its own handler for this. It only is called if DSOs are used in which
33184>>>>>>>>>    // case it calls the old message field_main_index above.
33184>>>>>>>>>    // DDO based objects will NEVER call this code
33184>>>>>>>>>    //
33184>>>>>>>>>    Function File_Field_Index Integer iFile Integer iField Returns Integer
33186>>>>>>>>>        Function_Return (Field_main_Index(Self,iFile,iField))
33187>>>>>>>>>    End_Function
33188>>>>>>>>>    
33188>>>>>>>>>    
33188>>>>>>>>>    Procedure Item_Find Integer eFindMode ;            Integer iFile Integer iField ;            Integer bDoEntryUpdate Integer bShowFindErr Integer bDeferred
33190>>>>>>>>>        
33190>>>>>>>>>        RowID   riRow
33190>>>>>>>>>        Integer iIndex
33190>>>>>>>>>        Handle  hoServer
33190>>>>>>>>>        Integer iSegments iSeg iSegFld iSegFldMainIndex
33190>>>>>>>>>        Boolean bChanged bDoCheck bOk
33190>>>>>>>>>        
33190>>>>>>>>>        //Get Field_Main_Index iFile iField to iIndex
33190>>>>>>>>>        Get File_Field_Index iFile iField to iIndex
33191>>>>>>>>>        If (iIndex<>-1) Begin
33193>>>>>>>>>            // get prior rowId before it get cleared
33193>>>>>>>>>            Move (GetRowID(iFile)) to riRow
33194>>>>>>>>>            //  'hold' buffer to prepare for entry_update
33194>>>>>>>>>            Set_Attribute DF_FILE_STATUS of iFile to DF_FILE_INACTIVE
33197>>>>>>>>>            If bDoEntryUpdate Begin
33199>>>>>>>>>                Send Request_Entry_Update iFile 1  //entUpdt all DEOs as required
33200>>>>>>>>>                
33200>>>>>>>>>                // If the buffer is cleared (no record and no changed data) then we want
33200>>>>>>>>>                // to do a constrained_clear which will force the buffer to get cleared
33200>>>>>>>>>                // according to the rules of the current constraints.
33200>>>>>>>>>                //Get_field_value iFile 0 to iRec
33200>>>>>>>>>                //Move (GetRowID(iFile)) to riRow // 12.1 moved above the set file inactive
33200>>>>>>>>>                
33200>>>>>>>>>                // If there was an active record to begin with we consider this changed (not cleared)
33200>>>>>>>>>                If (not(IsNullRowId(riRow))) Begin
33202>>>>>>>>>                    Move True to bChanged
33203>>>>>>>>>                End
33203>>>>>>>>>>
33203>>>>>>>>>                Else Begin
33204>>>>>>>>>                    // or, if the record was already changed or the entry_update created a change
33204>>>>>>>>>                    // we consider this changed
33204>>>>>>>>>                    Get_Attribute DF_FILE_CHANGED of iFile to bChanged
33207>>>>>>>>>                End
33207>>>>>>>>>>
33207>>>>>>>>>                
33207>>>>>>>>>                If not bChanged Begin
33209>>>>>>>>>                    // if buffer is unchanged, do a constrained clear. It is unchanged if there was not
33209>>>>>>>>>                    // active record, the record was unchanged, and the update didn't change anything.
33209>>>>>>>>>                    Constrained_Clear eFindMode iFile by iIndex
33212>>>>>>>>>                End
33212>>>>>>>>>>
33212>>>>>>>>>                Else If (eFindMode=GE or eFindMode=LE and iIndex>0) Begin
33215>>>>>>>>>                    
33215>>>>>>>>>                    // If mode is GE or LE we need to do some extra processing. We want to clear
33215>>>>>>>>>                    // all index segemnt fields that occur after this field in the index. This way
33215>>>>>>>>>                    // dbList searches and find ge searches (f9) will always find the first record
33215>>>>>>>>>                    // that matches the data in the field being searched. This was if an index like
33215>>>>>>>>>                    // customer.name x customer.number where you had 10 identical names "john" typing
33215>>>>>>>>>                    // john will find the first record, because customer.number will get cleared.
33215>>>>>>>>>                    // Note we can no do this with GT or LT or you'd get stuck in fields
33215>>>>>>>>>                    
33215>>>>>>>>>                    // check all fields for index. Once you find the iField field, clear all
33215>>>>>>>>>                    // fields that follow it. Only do this if the other fields do not use the
33215>>>>>>>>>                    // same index as its primary index (in which case we assume the data is intentional).
33215>>>>>>>>>                    // This should handle most cases.
33215>>>>>>>>>                    Get_Attribute DF_INDEX_NUMBER_SEGMENTS of iFile iIndex to iSegments
33218>>>>>>>>>                    For iSeg from 1 to iSegments
33224>>>>>>>>>>
33224>>>>>>>>>                        Get_Attribute DF_INDEX_SEGMENT_FIELD of iFile iIndex iSeg to iSegFld
33227>>>>>>>>>                        If not bDoCheck Begin
33229>>>>>>>>>                            If (iSegFld=iField) ;                                Move True to bDoCheck // marked after we find the find field in the index
33232>>>>>>>>>                        End
33232>>>>>>>>>>
33232>>>>>>>>>                        Else Begin // we get here after we've found the main field segment
33233>>>>>>>>>                            // if main index if this segment is same as our find index, do nothing
33233>>>>>>>>>                            Get File_Field_Index iFile iSegFld to iSegFldMainIndex
33234>>>>>>>>>                            If (iSegFldMainIndex<>iIndex) ;                                Set_Field_Value iFile iSegFld to ''
33239>>>>>>>>>                        End
33239>>>>>>>>>>
33239>>>>>>>>>                    Loop
33240>>>>>>>>>>
33240>>>>>>>>>                End
33240>>>>>>>>>>
33240>>>>>>>>>                
33240>>>>>>>>>                Get Which_Data_Set iFile to hoServer
33241>>>>>>>>>                If (hoServer and iFile=main_file(hoServer)) ;                    Send Attach_Main_File to hoServer
33244>>>>>>>>>                Else ;                    Attach iFile
33246>>>>>>>>>            End
33246>>>>>>>>>>
33246>>>>>>>>>            
33246>>>>>>>>>            Move False to Err
33247>>>>>>>>>            
33247>>>>>>>>>            If (Is_SuperFind_Required(Self,iFile)) ;                Send Request_SuperFind eFindMode iFile iField
33250>>>>>>>>>            Else If bDeferred ;                Send Request_Read eFindMode iFile iIndex
33254>>>>>>>>>            Else ;                Send Request_Find eFindMode iFile iIndex
33256>>>>>>>>>            
33256>>>>>>>>>            If (not(Found) and not(err)) Begin
33258>>>>>>>>>                // refind original record (or leave it cleared if not record)
33258>>>>>>>>>                Move (FindByRowId(iFile,riRow)) to bOk
33259>>>>>>>>>                
33259>>>>>>>>>                If bShowFindErr ;                    Error (If(eFindMode<2, DFERR_FIND_PRIOR_BEG_OF_FILE, DFERR_FIND_PAST_END_OF_FILE))
33262>>>>>>>>>                Move False to Found
33263>>>>>>>>>            End
33263>>>>>>>>>>
33263>>>>>>>>>        End
33263>>>>>>>>>>
33263>>>>>>>>>        Else ;            If bShowFindErr ;                Error DFERR_FIELD_NOT_INDEXED
33267>>>>>>>>>    End_Procedure
33268>>>>>>>>>    
33268>>>>>>>>>    
33268>>>>>>>>>    // We only care about should_saves of DEOs and not DSOs when
33268>>>>>>>>>    // exiting the app. Create a handler for data set class. We still
33268>>>>>>>>>    // broadcast in case we've got nested deos in the dso (hopefully not).
33268>>>>>>>>>    //
33268>>>>>>>>>    Function Exit_Application_Check Returns Integer
33270>>>>>>>>>        Integer rVal
33270>>>>>>>>>        Broadcast Get Exit_Application_Check to Rval // check w/ kids
33272>>>>>>>>>        Function_Return rVal
33273>>>>>>>>>    End_Function
33274>>>>>>>>>    
33274>>>>>>>>>    Procedure Constrain
33276>>>>>>>>>        Integer iFile
33276>>>>>>>>>        Send OnConstrain
33277>>>>>>>>>        Forward Send Constrain
33279>>>>>>>>>        Get Constrain_File to iFile
33280>>>>>>>>>        If iFile ;            Constrain (Main_file(Self)) relates to iFile
33283>>>>>>>>>    End_Procedure
33284>>>>>>>>>    
33284>>>>>>>>>    Procedure OnConstrain
33286>>>>>>>>>    End_Procedure
33287>>>>>>>>>    
33287>>>>>>>>>    // Less confusing Message for adding Updating servers
33287>>>>>>>>>    //
33287>>>>>>>>>    Procedure Set DDO_Server Handle ObjId
33289>>>>>>>>>        Send Attach_Server ObjId
33290>>>>>>>>>    End_Procedure
33291>>>>>>>>>    
33291>>>>>>>>>    // This is called when a view takes or retakes the
33291>>>>>>>>>    // focus. If DD not in use, do nothing.
33291>>>>>>>>>    //
33291>>>>>>>>>    Procedure Refind_DD_Records
33293>>>>>>>>>        If (in_use_state(Self)) ;            Send refind_records
33296>>>>>>>>>    End_Procedure
33297>>>>>>>>>    
33297>>>>>>>>>    // this returns true if the data-set is changed AND there are attached
33297>>>>>>>>>    // DEO objects. Without this you can get "changes exist" condition reported
33297>>>>>>>>>    // that the user will have no way of saving.
33297>>>>>>>>>    //
33297>>>>>>>>>    Function Data_Set_Should_Save Returns Integer
33299>>>>>>>>>        Function_Return (Should_Save(Self) and ;            Data_Set_User_interface_count(Self))
33300>>>>>>>>>    End_Function
33301>>>>>>>>>    
33301>>>>>>>>>    // returns 0 indicating that this is not DD enabled. DataDictionary objects will return 1.
33301>>>>>>>>>    // Add DSOs and DDOs must understand this message
33301>>>>>>>>>    
33301>>>>>>>>>    Function Extended_DSO_State Returns Integer
33303>>>>>>>>>        Function_Return 0
33304>>>>>>>>>    End_Function
33305>>>>>>>>>    
33305>>>>>>>>>    
33305>>>>>>>>>End_Class
33306>>>>>>>>>
33306>>>>>>>>>
33306>>>>>>>>>
33306>>>>>>>Use DDValtbl.pkg  // validation table classes
Including file: Ddvaltbl.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Ddvaltbl.pkg)
33306>>>>>>>>>//  Validation Table Support for Extended Data-Sets. Fields may
33306>>>>>>>>>//  attached to validation tables which can then be used for
33306>>>>>>>>>//  validation (if Validate_state is true) or list loading.
33306>>>>>>>>>//  Developers can create their own validation tables as long as they
33306>>>>>>>>>//  conform to the following external interface:
33306>>>>>>>>>//
33306>>>>>>>>>// Properties
33306>>>>>>>>>//   Static_State       - if list must be rebuilt each validation, load
33306>>>>>>>>>//   Allow_Blank_state  - If Blank or 0 is a valid response
33306>>>>>>>>>//   Validate_State     - should table be used for validation
33306>>>>>>>>>//   Table_Loaded_State - is the validation table initialized?
33306>>>>>>>>>//
33306>>>>>>>>>// Methods
33306>>>>>>>>>//  Get Validate_Value sValue to iVal - if iVal=0, it is legal
33306>>>>>>>>>//  Send Fill_list                    - fills a static list
33306>>>>>>>>>//  Send Request_Fill_From_List iObject iMessage
33306>>>>>>>>>//        This is a callback that will fill an external list by sending
33306>>>>>>>>>//        the passed message (iMessage) back to the requesting object
33306>>>>>>>>>//        (iObject). It will send this message for each item in the
33306>>>>>>>>>//        validation table. It always passes back four params. Those are:
33306>>>>>>>>>//                     iItem - Item count being passed back
33306>>>>>>>>>//                     sData - The Database value of the item
33306>>>>>>>>>//                     sDesc - The Value's description, "" if none
33306>>>>>>>>>//                     iFile - File number associated with the item (if any)
33306>>>>>>>>>//                     iRec  - Record associated with the item (if any)
33306>>>>>>>>>// Developers can create classes of any complexity to support validation
33306>>>>>>>>>// tables. We have provided the following four classes.
33306>>>>>>>>>//
33306>>>>>>>>>//  ValidationTable is an Array
33306>>>>>>>>>//           Provides simple one dimensional table support. The table must be
33306>>>>>>>>>//           loaded manually by creating fill_list and sending the message
33306>>>>>>>>>//           Add_Table_Value (send Add_Table_Value Value). If list is static
33306>>>>>>>>>//           it is filled once. If non-static it is filled each time it is
33306>>>>>>>>>//           requested to validate or fill a foreign lis.
33306>>>>>>>>>//
33306>>>>>>>>>//  DescriptionValidationTable is a ValidationTable
33306>>>>>>>>>//           Provides a more complex three dimension array allowing the
33306>>>>>>>>>//           object to store a data value, description value and a record
33306>>>>>>>>>//           number. The developer must fill this list using the Add_table_
33306>>>>>>>>>//           value message passing up to three values (data, desc, record).
33306>>>>>>>>>//
33306>>>>>>>>>//  FileValidationTable is a DescriptionValidationTable
33306>>>>>>>>>//           Provides a data aware table. This can be used to load data from
33306>>>>>>>>>//           data-files, from data-sets. If you use data-sets you can place
33306>>>>>>>>>//           constraints within the data-set. You must define the file-number,
33306>>>>>>>>>//           data-set (if any), the file index, the file's data field, and
33306>>>>>>>>>//           the file's description field. You can also define an optional
33306>>>>>>>>>//           "Type". All records are constrained to this type (with or with-
33306>>>>>>>>>//           data-sets). If is assumed that this file has an optimized finding
33306>>>>>>>>>//           index.
33306>>>>>>>>>//
33306>>>>>>>>>//  CodeValidationTable is a FileValidationTable
33306>>>>>>>>>//           Used for Code lists. Simply set Type_Value to the "type"
33306>>>>>>>>>//
33306>>>>>>>>>Use VDFBase.pkg
33306>>>>>>>>>
33306>>>>>>>>>
33306>>>>>>>>>Class ValidationTable is an Array
33307>>>>>>>>>    
33307>>>>>>>>>    Procedure Construct_Object
33309>>>>>>>>>        Forward Send Construct_Object
33311>>>>>>>>>        Property Integer Static_State        True
33312>>>>>>>>>        
33312>>>>>>>>>        Property Integer Table_Loaded_State  False
33313>>>>>>>>>        
33313>>>>>>>>>        Property Integer Validate_State      True
33314>>>>>>>>>        Property Integer Allow_Blank_State   False
33315>>>>>>>>>        Property Integer Main_File           0
33316>>>>>>>>>        Property String  Table_Title         DD_VALIDATION_LIST_TITLE
33317>>>>>>>>>        
33317>>>>>>>>>        Property Integer Number_Elements     1
33318>>>>>>>>>        
33318>>>>>>>>>        // System maintained. Sub-classes use these
33318>>>>>>>>>        // These are SET by Next_Code_Record. You may GET their values
33318>>>>>>>>>        
33318>>>>>>>>>        Property String  Current_Code            ''
33319>>>>>>>>>        
33319>>>>>>>>>        Property String  Current_Description     ''
33320>>>>>>>>>        
33320>>>>>>>>>        Property RowID Current_RowId
33321>>>>>>>>>    End_Procedure
33322>>>>>>>>>    
33322>>>>>>>>>    Function Data_Item_Count Returns Integer
33324>>>>>>>>>        Function_Return (Item_Count(Self))
33325>>>>>>>>>    End_Function
33326>>>>>>>>>    
33326>>>>>>>>>    Function Data_Value Integer iItem Returns String
33328>>>>>>>>>        Function_Return (Value(Self,iItem))
33329>>>>>>>>>    End_Function
33330>>>>>>>>>    
33330>>>>>>>>>    Procedure Set Data_Value Integer iItem String sValue
33332>>>>>>>>>        Set Value  iItem to sValue
33333>>>>>>>>>    End_Procedure
33334>>>>>>>>>    
33334>>>>>>>>>    Function Data_Description Integer iItem Returns String
33336>>>>>>>>>        Function_Return ''
33337>>>>>>>>>    End_Function
33338>>>>>>>>>    
33338>>>>>>>>>    Procedure Set Data_Description Integer iItem String sValue
33340>>>>>>>>>    End_Procedure
33341>>>>>>>>>    
33341>>>>>>>>>    Function Data_RowId Integer iItem Returns RowID
33343>>>>>>>>>        Function_Return (NullRowId())
33344>>>>>>>>>    End_Function
33345>>>>>>>>>    
33345>>>>>>>>>    Procedure Set Data_RowId Integer iItem RowID riValue
33347>>>>>>>>>    End_Procedure
33348>>>>>>>>>    
33348>>>>>>>>>    
33348>>>>>>>>>    Procedure Add_Table_Value String sValue
33350>>>>>>>>>        Set Data_Value  (Data_Item_Count(Self)) to sValue
33351>>>>>>>>>    End_Procedure
33352>>>>>>>>>    
33352>>>>>>>>>    Function Validate_Value String sCode Returns Integer
33354>>>>>>>>>        Integer iMax
33354>>>>>>>>>        Integer iCnt
33354>>>>>>>>>        If (sCode = '');            Function_Return (not(Allow_Blank_State(Self)))
33357>>>>>>>>>        If (Table_Loaded_State(Self)=0 or Static_State(Self)=0) Begin
33359>>>>>>>>>            Send Delete_Data
33360>>>>>>>>>            Send Fill_list
33361>>>>>>>>>            Set Table_Loaded_State to True
33362>>>>>>>>>        End
33362>>>>>>>>>>
33362>>>>>>>>>        Get Data_Item_Count to iMax
33363>>>>>>>>>        Decrement iMax
33364>>>>>>>>>        For iCnt from 0 to iMax
33370>>>>>>>>>>
33370>>>>>>>>>            If (sCode=Data_Value(Self,iCnt)) Begin
33372>>>>>>>>>                Set Current_Code        to sCode
33373>>>>>>>>>                Set Current_Description to (Data_Description(Self,iCnt))
33374>>>>>>>>>                Set Current_RowId       to (Data_RowId(Self,iCnt))
33375>>>>>>>>>                Function_Return 0
33376>>>>>>>>>            End
33376>>>>>>>>>>
33376>>>>>>>>>        Loop
33377>>>>>>>>>>
33377>>>>>>>>>        Function_Return 1 // 0=OK
33378>>>>>>>>>    End_Function
33379>>>>>>>>>    
33379>>>>>>>>>    Function Find_Code_Description String sCode Returns String
33381>>>>>>>>>        If (sCode='' or ;            (sCode<>Current_Code(Self) and ;            Validate_Value(Self,sCode) ) );            Function_Return ''
33384>>>>>>>>>        Function_Return (Current_Description(Self))
33385>>>>>>>>>    End_Function
33386>>>>>>>>>    
33386>>>>>>>>>    
33386>>>>>>>>>    //  The deveveloper (or a sub-class) must fill this list. It is done
33386>>>>>>>>>    //  by finding the item and sending the Message:
33386>>>>>>>>>    //    Send Add_Table_Value sValue {sDescr}
33386>>>>>>>>>    //
33386>>>>>>>>>    Procedure Fill_List
33388>>>>>>>>>        Set Table_Loaded_State to True
33389>>>>>>>>>    End_Procedure
33390>>>>>>>>>    
33390>>>>>>>>>    Procedure Request_Fill_From_List Integer iObj Integer iMsg
33392>>>>>>>>>        Integer iMax
33392>>>>>>>>>        Integer iCnt
33392>>>>>>>>>        Integer iFile
33392>>>>>>>>>        
33392>>>>>>>>>        If (iObj=0 or iMsg=0) ;            Procedure_Return
33395>>>>>>>>>        
33395>>>>>>>>>        If (Table_Loaded_State(Self)=0 or Static_State(Self)=0) Begin
33397>>>>>>>>>            Send Delete_Data
33398>>>>>>>>>            Send Fill_list
33399>>>>>>>>>            Set Table_Loaded_State to True
33400>>>>>>>>>        End
33400>>>>>>>>>>
33400>>>>>>>>>        Get Main_File to iFile
33401>>>>>>>>>        Get Data_Item_Count to iMax
33402>>>>>>>>>        Decrement iMax
33403>>>>>>>>>        For iCnt from 0 to iMax
33409>>>>>>>>>>
33409>>>>>>>>>            Send iMsg to iObj iCnt (Data_Value(Self,iCnt)) ;                (Data_Description(Self,iCnt)) iFile ;                (Data_RowId(Self,iCnt))
33410>>>>>>>>>        Loop
33411>>>>>>>>>>
33411>>>>>>>>>    End_Procedure
33412>>>>>>>>>    
33412>>>>>>>>>    
33412>>>>>>>>>    // returns all data in a two dimension variant array.
33412>>>>>>>>>    // [i][0] = data
33412>>>>>>>>>    // [i][1] = description
33412>>>>>>>>>    // This can be used by Crystal CDO classes (this is why a variant array is used)
33412>>>>>>>>>    Function TableData Returns Variant[][]
33414>>>>>>>>>        Variant[][2] vData
33415>>>>>>>>>        Integer iMax i
33415>>>>>>>>>        If (Table_Loaded_State(Self)=0 or Static_State(Self)=0) Begin
33417>>>>>>>>>            Send Delete_Data
33418>>>>>>>>>            Send Fill_list
33419>>>>>>>>>            Set Table_Loaded_State to True
33420>>>>>>>>>        End
33420>>>>>>>>>>
33420>>>>>>>>>        Get Data_Item_Count to iMax
33421>>>>>>>>>        For i from 0 to (iMax-1)
33427>>>>>>>>>>
33427>>>>>>>>>            Get Data_Value       i to vData[i][0]
33428>>>>>>>>>            Get Data_Description i to vData[i][1]
33429>>>>>>>>>        Loop
33430>>>>>>>>>>
33430>>>>>>>>>        Function_Return vData
33431>>>>>>>>>    End_Function
33432>>>>>>>>>    
33432>>>>>>>>>End_Class
33433>>>>>>>>>
33433>>>>>>>>>
33433>>>>>>>>>
33433>>>>>>>>>Class DescriptionValidationTable is an ValidationTable
33434>>>>>>>>>    
33434>>>>>>>>>    Procedure Construct_Object
33436>>>>>>>>>        Forward Send Construct_Object
33438>>>>>>>>>        Set Number_Elements to 2
33439>>>>>>>>>    End_Procedure
33440>>>>>>>>>    
33440>>>>>>>>>    Function Data_Item_Count Returns Integer
33442>>>>>>>>>        Function_Return (item_count(Self)/3)
33443>>>>>>>>>    End_Function
33444>>>>>>>>>    
33444>>>>>>>>>    Function Data_Value Integer iItem Returns String
33446>>>>>>>>>        Function_Return (Value(Self,iItem*3))
33447>>>>>>>>>    End_Function
33448>>>>>>>>>    
33448>>>>>>>>>    Procedure Set Data_Value Integer iItem String sValue
33450>>>>>>>>>        Set Value  (iItem*3) to sValue
33451>>>>>>>>>    End_Procedure
33452>>>>>>>>>    
33452>>>>>>>>>    Function Data_Description Integer iItem Returns String
33454>>>>>>>>>        Function_Return (Value(Self,iItem*3+1))
33455>>>>>>>>>    End_Function
33456>>>>>>>>>    
33456>>>>>>>>>    Procedure Set Data_Description Integer iItem String sValue
33458>>>>>>>>>        Set Value  (iItem*3+1) to sValue
33459>>>>>>>>>    End_Procedure
33460>>>>>>>>>    
33460>>>>>>>>>    Function Data_RowId Integer iItem Returns RowID
33462>>>>>>>>>        String sRowId
33462>>>>>>>>>        Get Value (iItem*3+2) to sRowId
33463>>>>>>>>>        Function_Return (DeSerializeRowId(sRowId))
33464>>>>>>>>>    End_Function
33465>>>>>>>>>    
33465>>>>>>>>>    Procedure Set Data_RowId Integer iItem RowID riValue
33467>>>>>>>>>        Set Value  (iItem*3+2) to (SerializeRowId(riValue))
33468>>>>>>>>>    End_Procedure
33469>>>>>>>>>    
33469>>>>>>>>>    Procedure Add_Table_Value String sData String sDescr RowID riRec
33471>>>>>>>>>        String  sVal
33471>>>>>>>>>        RowID   riRecVal
33471>>>>>>>>>        Integer iCnt
33471>>>>>>>>>        Get Data_Item_Count to iCnt
33472>>>>>>>>>        Set Data_Value iCnt to sData
33473>>>>>>>>>        
33473>>>>>>>>>        // If one param passed use it for both display and database values
33473>>>>>>>>>        If (num_arguments <= 1);            Move sData  to sVal
33476>>>>>>>>>        Else ;            Move sDescr to sVal
33478>>>>>>>>>        Set Data_Description iCnt to sVal
33479>>>>>>>>>        
33479>>>>>>>>>        If (num_arguments <= 2) ;            Move (NullRowId()) to riRecVal
33482>>>>>>>>>        Else ;            Move riRec        to riRecVal
33484>>>>>>>>>        Set Data_RowId iCnt to riRecVal
33485>>>>>>>>>    End_Procedure
33486>>>>>>>>>End_Class
33487>>>>>>>>>
33487>>>>>>>>>
33487>>>>>>>>>Class FileValidationTable is an DescriptionValidationTable
33488>>>>>>>>>    
33488>>>>>>>>>    Procedure Construct_Object
33490>>>>>>>>>        Forward Send Construct_Object
33492>>>>>>>>>        Property Integer No_Fill_State     False // this is never used and is obsolete. (JJT)
33493>>>>>>>>>        Property Integer Ordering          1   // Indx1 is a good guess.
33494>>>>>>>>>        Property String  Type_Value        ''  // default these two to
33495>>>>>>>>>        Property Integer Type_Field        0   // Undefined (none).
33496>>>>>>>>>        Property Integer Code_Field        1   // Fld 1=code, 2=descr
33497>>>>>>>>>        Property Integer Description_Field 2   // are good guesses.
33498>>>>>>>>>        
33498>>>>>>>>>        Property Integer Code_Load_Object  0   // or (Code_Loader(Self))
33499>>>>>>>>>    End_Procedure
33500>>>>>>>>>    
33500>>>>>>>>>    Function Table_Loaded_State Returns Integer
33502>>>>>>>>>        Integer iRVal
33502>>>>>>>>>        Get No_fill_State to iRVal // if true, table always is loaded
33503>>>>>>>>>        If not iRval ;            Forward Get table_loaded_State to iRVal
33507>>>>>>>>>        Function_Return iRval
33508>>>>>>>>>    End_Function
33509>>>>>>>>>    
33509>>>>>>>>>    Function Validate_Value String sCode Returns Integer
33511>>>>>>>>>        Integer iRVal
33511>>>>>>>>>        Integer iDSO
33511>>>>>>>>>        Get Code_Load_Object  to iDSO
33512>>>>>>>>>        // we use standard validate, if code is blank, OR if
33512>>>>>>>>>        //   1. if no code DSO or the code DSO exists but is not busy.
33512>>>>>>>>>        //   2. AND it is not no-fill
33512>>>>>>>>>        //   3. AND it is static
33512>>>>>>>>>        // Else we find the record directly
33512>>>>>>>>>        // Note that the operation mode is busy during request_validate (the
33512>>>>>>>>>        // ddo does this). WHen operation mode is busy we must not use
33512>>>>>>>>>        // the code dso (must find manually).
33512>>>>>>>>>        If (sCode='' or ;            ( (iDSO=0 or Operation_Mode=0)    and ; // if no code DSO or DSO not busy            No_Fill_State(Self)=0 and ;            Static_State(Self) ) ) ;            Forward Get Validate_Value sCode to iRVal
33516>>>>>>>>>        Else If (sCode<>Current_Code(Self)) ;            Get Find_Value sCode to iRVal
33520>>>>>>>>>        Function_Return iRVal // OK
33521>>>>>>>>>    End_Function
33522>>>>>>>>>    
33522>>>>>>>>>    Procedure Initialize_File
33524>>>>>>>>>        Integer iFile iCodeField iDescField iDSO iIndex iTypeField
33524>>>>>>>>>        Get Code_Load_Object  to iDSO
33525>>>>>>>>>        Get Main_File         to iFile
33526>>>>>>>>>        Get Code_Field        to iCodeField
33527>>>>>>>>>        Get Description_Field to iDescField
33528>>>>>>>>>        Get Ordering          to iIndex
33529>>>>>>>>>        Get Type_Field        to iTypeField
33530>>>>>>>>>        If (iDSO and Operation_Mode=0) ;            Send Initialize_File to iDSO ;            iFile iIndex iCodeField iDescField ;            iTypeField (Type_Value(Self))
33533>>>>>>>>>        Else Begin
33534>>>>>>>>>            Clear iFile
33535>>>>>>>>>            // if Type exists, seed the type value
33535>>>>>>>>>            If iTypeField ;                Set_Field_Value iFile iTypeField to (Type_Value(Self))
33540>>>>>>>>>        End
33540>>>>>>>>>>
33540>>>>>>>>>    End_Procedure
33541>>>>>>>>>    
33541>>>>>>>>>    Function Find_Value String Code Returns Integer
33543>>>>>>>>>        Integer iFile iCodeField iDescField iDSO iIndex iTypeField
33543>>>>>>>>>        Get Code_Load_Object  to iDSO
33544>>>>>>>>>        Get Main_File         to iFile
33545>>>>>>>>>        Get Ordering          to iIndex
33546>>>>>>>>>        Get Code_Field        to iCodeField
33547>>>>>>>>>        Get Description_Field to iDescField
33548>>>>>>>>>        Get Type_Field        to iTypeField
33549>>>>>>>>>        Send Initialize_File
33550>>>>>>>>>        //
33550>>>>>>>>>        Set_Field_Value iFile iCodeField to Code
33553>>>>>>>>>        If (iDSO and Operation_Mode=0) ;            Send Request_Find to iDSO EQ iFile iIndex
33556>>>>>>>>>        Else ;            Vfind iFile iIndex EQ
33559>>>>>>>>>        If not (Found) ;            Function_Return 1
33562>>>>>>>>>        // Set properties Current_code and Current_Description
33562>>>>>>>>>        Send Store_Current_Data iFile iCodeField iDescField
33563>>>>>>>>>        Function_Return 0
33564>>>>>>>>>    End_Function
33565>>>>>>>>>    
33565>>>>>>>>>    // internal
33565>>>>>>>>>    Procedure Store_Current_Data Integer iFile Integer iCodeField Integer iDescField
33567>>>>>>>>>        String sVal
33567>>>>>>>>>        Get_Field_Value iFile iCodeField to sVal
33570>>>>>>>>>        Set Current_Code to (trim(sVal))
33571>>>>>>>>>        If iDescField Begin
33573>>>>>>>>>            Get_Field_Value iFile iDescField to sVal
33576>>>>>>>>>            Set Current_Description to (trim(sVal))
33577>>>>>>>>>        End
33577>>>>>>>>>>
33577>>>>>>>>>        Set Current_RowId to (GetRowId(iFile))
33578>>>>>>>>>    End_Procedure
33579>>>>>>>>>    
33579>>>>>>>>>    Function Next_Code_Record Returns Boolean
33581>>>>>>>>>        Integer iFile iCodeField iDescField iIndex
33581>>>>>>>>>        Integer iTypeField
33581>>>>>>>>>        String sTypeValue sFoundTypeValue
33581>>>>>>>>>        Boolean bFound
33581>>>>>>>>>        Handle hoDSO
33581>>>>>>>>>        Get Code_Load_Object  to hoDSO
33582>>>>>>>>>        Get Description_Field to iDescField
33583>>>>>>>>>        Get Code_Field        to iCodeField
33584>>>>>>>>>        Get Main_File         to iFile
33585>>>>>>>>>        
33585>>>>>>>>>        If hoDSO Begin
33587>>>>>>>>>            Get Next_Code_record of hoDSO to bFound
33588>>>>>>>>>        End
33588>>>>>>>>>>
33588>>>>>>>>>        Else Begin
33589>>>>>>>>>            Get Ordering to iIndex
33590>>>>>>>>>            Vfind iFile iIndex GT
33592>>>>>>>>>            Move (Found) to bFound
33593>>>>>>>>>            If bFound Begin
33595>>>>>>>>>                // if found see if we are at the end of the valid list of types
33595>>>>>>>>>                Get Type_Field to iTypeField
33596>>>>>>>>>                Get Type_Value to sTypeValue
33597>>>>>>>>>                If ((iTypeField<>0) and (sTypeValue<>"")) Begin
33599>>>>>>>>>                    Get_Field_Value iFile iTypeField to sFoundTypeValue
33602>>>>>>>>>                    Move (Trim(sTypeValue)=Trim(sFoundTypeValue)) to bFound
33603>>>>>>>>>                End
33603>>>>>>>>>>
33603>>>>>>>>>            End
33603>>>>>>>>>>
33603>>>>>>>>>        End
33603>>>>>>>>>>
33603>>>>>>>>>        If bFound Begin
33605>>>>>>>>>            Send Store_Current_Data iFile iCodeField iDescField
33606>>>>>>>>>        End
33606>>>>>>>>>>
33606>>>>>>>>>        Function_Return bFound
33607>>>>>>>>>    End_Function
33608>>>>>>>>>    
33608>>>>>>>>>    Procedure Fill_List
33610>>>>>>>>>        RowID riId
33610>>>>>>>>>        Boolean bFound
33610>>>>>>>>>        String sCode sDesc
33610>>>>>>>>>        If (Static_State(Self)=0 or No_Fill_State(Self)) ;            Procedure_Return
33613>>>>>>>>>        //
33613>>>>>>>>>        Send Delete_Data
33614>>>>>>>>>        Send Initialize_File
33615>>>>>>>>>        Get Next_Code_Record to bFound
33616>>>>>>>>>        While bFound
33620>>>>>>>>>            Get Current_Code        to sCode
33621>>>>>>>>>            Get Current_Description to sDesc
33622>>>>>>>>>            Get Current_RowId       to riId
33623>>>>>>>>>            Send Add_Table_Value sCode sDesc riId
33624>>>>>>>>>            Get Next_Code_Record to bFound
33625>>>>>>>>>        Loop
33626>>>>>>>>>>
33626>>>>>>>>>        Set Table_Loaded_State to True
33627>>>>>>>>>    End_Procedure
33628>>>>>>>>>    
33628>>>>>>>>>    Procedure Request_Fill_From_List Integer iObj Integer iMsg
33630>>>>>>>>>        Integer iItem
33630>>>>>>>>>        Integer iFile
33630>>>>>>>>>        RowID   riId
33630>>>>>>>>>        Boolean bFound
33630>>>>>>>>>        String sCode sDesc
33630>>>>>>>>>        
33630>>>>>>>>>        If (iObj=0 or iMsg=0) ;            Procedure_Return
33633>>>>>>>>>        
33633>>>>>>>>>        If (Static_State(Self) and No_Fill_State(Self)=0 ) ;            Forward Send Request_Fill_From_List iObj iMsg
33637>>>>>>>>>        Else Begin
33638>>>>>>>>>            Get Main_File to iFile
33639>>>>>>>>>            Send Initialize_File
33640>>>>>>>>>            Get Next_Code_Record to bFound
33641>>>>>>>>>            While bFound
33645>>>>>>>>>                Get Current_Code        to sCode
33646>>>>>>>>>                Get Current_Description to sDesc
33647>>>>>>>>>                Get Current_RowId       to riId
33648>>>>>>>>>                Send iMSG to iObj iItem sCode sDesc iFile riId
33649>>>>>>>>>                Increment iItem
33650>>>>>>>>>                Get Next_Code_Record to bFound
33651>>>>>>>>>            Loop
33652>>>>>>>>>>
33652>>>>>>>>>        End
33652>>>>>>>>>>
33652>>>>>>>>>    End_Procedure
33653>>>>>>>>>End_Class
33654>>>>>>>>>
33654>>>>>>>>>Use CodeLoad.pkg
Including file: codeload.pkg    (C:\Program Files\DataFlex 24.0\Pkg\codeload.pkg)
33654>>>>>>>>>>>// Interface:
33654>>>>>>>>>>>//
33654>>>>>>>>>>>//  Procedure Initialize_File Integer File# Integer Index# Integer Code# ;
33654>>>>>>>>>>>//                            Integer Desc# Integer Type# String Type
33654>>>>>>>>>>>//
33654>>>>>>>>>>>//      This initializes the data-set for finding. You MUST pass all five
33654>>>>>>>>>>>//      parameters here. They are:
33654>>>>>>>>>>>//          File#  -  main file to use
33654>>>>>>>>>>>//         Index#  - Index to use for finding
33654>>>>>>>>>>>//          Code#  - field number of the code
33654>>>>>>>>>>>//          Desc#  - field number of the code's description
33654>>>>>>>>>>>//          Type#  - field number of the constraining Type (0 if none)
33654>>>>>>>>>>>//           Type  - the constrain type value ('' = allow all records)
33654>>>>>>>>>>>//
33654>>>>>>>>>>>//      You MUST send this message before finding records. Alternately,
33654>>>>>>>>>>>//      you could set the individual properties and send rebuild_constraints
33654>>>>>>>>>>>//      and CLEAR to initalize the file (see code on how to do this).
33654>>>>>>>>>>>//
33654>>>>>>>>>>>//    Get Next_Code_record to ret_Int
33654>>>>>>>>>>>//
33654>>>>>>>>>>>//      Returns the next record number. 0 if no more. If record exists it
33654>>>>>>>>>>>//      sets the value of Current_Code and Crnt_Description.
33654>>>>>>>>>>>//
33654>>>>>>>>>>>//    Get Current_Code to Ret_String
33654>>>>>>>>>>>//    Get Crnt_Description to Ret_String
33654>>>>>>>>>>>//
33654>>>>>>>>>>>//      Returns the code and description of the last valid record found
33654>>>>>>>>>>>//      with the Next_Code_Record Message
33654>>>>>>>>>>>//
33654>>>>>>>>>>>//   Sample Usage:  This was created primarily to be used by the
33654>>>>>>>>>>>//                  radio-entry-form classes. In particular those using
33654>>>>>>>>>>>//                  the "code" look up file. Look at those packages if
33654>>>>>>>>>>>//                  you wish to use them yourself.
33654>>>>>>>>>>>//
33654>>>>>>>>>>>Use Data_Set.pkg
33654>>>>>>>>>>>
33654>>>>>>>>>>>Class Code_Loader_Data_Set is a DataSet
33655>>>>>>>>>>>    
33655>>>>>>>>>>>    Procedure Construct_Object Integer Img#
33657>>>>>>>>>>>        Forward Send Construct_Object Img#
33659>>>>>>>>>>>        // These should be set by the Initialize_File message
33659>>>>>>>>>>>        Property String  Type_Value           '' // assume no defaults.
33660>>>>>>>>>>>        Property Integer Type_Field           0  // These values should be
33661>>>>>>>>>>>        Property Integer Code_Field           0  // set by initialize_file
33662>>>>>>>>>>>        Property Integer Description_Field    0  //
33663>>>>>>>>>>>        
33663>>>>>>>>>>>        // These are SET by Next_Code_Record. You may GET their values
33663>>>>>>>>>>>        Property String  Current_Code         ''
33664>>>>>>>>>>>        Property String  Current_Description  ''
33665>>>>>>>>>>>    End_Procedure
33666>>>>>>>>>>>    
33666>>>>>>>>>>>    // If a Type exists (not a '') and there is a type field and a
33666>>>>>>>>>>>    // main_file constrain to the type. Else no constraints
33666>>>>>>>>>>>    Procedure OnConstrain
33668>>>>>>>>>>>        String sType
33668>>>>>>>>>>>        Integer iFile iField
33668>>>>>>>>>>>        Get Type_Value to sType
33669>>>>>>>>>>>        Get Main_File  to iFile
33670>>>>>>>>>>>        Get Type_Field to iField
33671>>>>>>>>>>>        If (sType<>'' and iFile<>0 and iField<>0) ;            Vconstrain iFile iField eq sType
33676>>>>>>>>>>>    End_Procedure
33677>>>>>>>>>>>    
33677>>>>>>>>>>>    //  This initializes the data-set for finding. You MUST pass all five
33677>>>>>>>>>>>    //  parameters here. They are:
33677>>>>>>>>>>>    //     File#  -  main file to use
33677>>>>>>>>>>>    //    Index#  - Index to use for finding
33677>>>>>>>>>>>    //     Code#  - field number of the code
33677>>>>>>>>>>>    //     Desc#  - field number of the code's description
33677>>>>>>>>>>>    //     Type#  - field number of the constraining Type (0 if none)
33677>>>>>>>>>>>    //      Type  - the constrain type value ('' = allow all records)
33677>>>>>>>>>>>    //
33677>>>>>>>>>>>    Procedure Initialize_File Integer File# Integer Index# Integer Code# ;            Integer Desc# Integer Type# String Type
33679>>>>>>>>>>>        // note: all params are required!
33679>>>>>>>>>>>        Set Main_File         to File#
33680>>>>>>>>>>>        Set Ordering          to Index#
33681>>>>>>>>>>>        Set Code_Field        to Code#
33682>>>>>>>>>>>        Set Description_Field to Desc#
33683>>>>>>>>>>>        Set Type_Field        to Type#
33684>>>>>>>>>>>        Set Type_Value        to Type
33685>>>>>>>>>>>        //
33685>>>>>>>>>>>        Send Rebuild_Constraints // set up constraints
33686>>>>>>>>>>>        Send Clear               // initialize the file
33687>>>>>>>>>>>    End_Procedure
33688>>>>>>>>>>>    
33688>>>>>>>>>>>    //  Find the next record: Return 0 if no record, 1 if record exists
33688>>>>>>>>>>>    //   if record exists set Current_Code and Current_Description
33688>>>>>>>>>>>    //
33688>>>>>>>>>>>    Function Next_Code_Record Returns Boolean
33690>>>>>>>>>>>        Integer iFile iField
33690>>>>>>>>>>>        String sValue
33690>>>>>>>>>>>        Send Request_Find GT (Main_File(Self)) (Ordering(Self))
33691>>>>>>>>>>>        If not (Found) ;            Function_Return False
33694>>>>>>>>>>>        // Set properties Current_code and Current_Description
33694>>>>>>>>>>>        Get Main_File to iFile
33695>>>>>>>>>>>        
33695>>>>>>>>>>>        Get Code_Field to iField
33696>>>>>>>>>>>        Get_Field_Value iFile iField to sValue
33699>>>>>>>>>>>        Set Current_Code to sValue
33700>>>>>>>>>>>        
33700>>>>>>>>>>>        Get Description_Field to iField
33701>>>>>>>>>>>        Get_Field_Value iFile iField to sValue
33704>>>>>>>>>>>        Set Current_Description to sValue
33705>>>>>>>>>>>        Function_Return True
33706>>>>>>>>>>>    End_Function
33707>>>>>>>>>>>    
33707>>>>>>>>>>>End_Class
33708>>>>>>>>>Use cCodeMaintOpen_Mixin.pkg
Including file: cCodeMaintOpen_Mixin.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCodeMaintOpen_Mixin.pkg)
33708>>>>>>>>>>>// Mixin class to support transistion support for CodeType and CodeMast files.
33708>>>>>>>>>>>// These files used to be in filelist and they used to reside at 207 and 208 and they
33708>>>>>>>>>>>// were always opened with "open as"
33708>>>>>>>>>>>// We want these to be in the filelist at 253 and 254. These open methods will attempt to open these files
33708>>>>>>>>>>>// as such. If these are old files (not in filelist or wrong number) they will get loaded with the old
33708>>>>>>>>>>>// open as - thus keeping this backwards compatible.
33708>>>>>>>>>>>// By adding to filelist, we can sort the files and we can open them as other database sources.
33708>>>>>>>>>>>Use VDFBase.pkg
33708>>>>>>>>>>>
33708>>>>>>>>>>>Declare_Datafile CodeType
Including file: CodeType.fd    (C:\Projects\DF20\DbUpdateFramework\DDSrc\CodeType.fd)
33708>>>>>>>>>>>Declare_Datafile CodeMast
Including file: CodeMast.fd    (C:\Projects\DF20\DbUpdateFramework\DDSrc\CodeMast.fd)
33708>>>>>>>>>>>Define C_Expected_CodeType_FileNumber for 253  // and the logical name must be CODETYPE
33708>>>>>>>>>>>Define C_Expected_CodeMast_FileNumber for 254  // and the logical name must be CODEMAST
33708>>>>>>>>>>>
33708>>>>>>>>>>>Class cCodeMaintOpen_Mixin is a Mixin
33709>>>>>>>>>>>    
33709>>>>>>>>>>>    Procedure OpenCodeMast
33711>>>>>>>>>>>        String sName
33711>>>>>>>>>>>        If (Codemast.File_number=C_Expected_CodeMast_FileNumber) Begin
33713>>>>>>>>>>>            Get_Attribute DF_FILE_LOGICAL_NAME of Codemast.File_number to sName
33716>>>>>>>>>>>            If (uppercase(trim(sName))="CODEMAST") Begin
33718>>>>>>>>>>>                Open CodeMast
33720>>>>>>>>>>>                Procedure_Return
33721>>>>>>>>>>>            End
33721>>>>>>>>>>>>
33721>>>>>>>>>>>        End
33721>>>>>>>>>>>>
33721>>>>>>>>>>>        Open "CodeMast" as Codemast.File_number
33723>>>>>>>>>>>    End_Procedure
33724>>>>>>>>>>>    
33724>>>>>>>>>>>    Procedure OpenCodeType
33726>>>>>>>>>>>        String sName
33726>>>>>>>>>>>        If (Codetype.File_number=C_Expected_CodeType_FileNumber) Begin
33728>>>>>>>>>>>            Get_Attribute DF_FILE_LOGICAL_NAME of CodeType.File_number to sName
33731>>>>>>>>>>>            If (uppercase(trim(sName))="CODETYPE") Begin
33733>>>>>>>>>>>                Open CodeType
33735>>>>>>>>>>>                Procedure_Return
33736>>>>>>>>>>>            End
33736>>>>>>>>>>>>
33736>>>>>>>>>>>        End
33736>>>>>>>>>>>>
33736>>>>>>>>>>>        Open "CodeType" as CodeType.File_number
33738>>>>>>>>>>>    End_Procedure
33739>>>>>>>>>>>    
33739>>>>>>>>>>>End_Class
33740>>>>>>>>>
33740>>>>>>>>>//
33740>>>>>>>>>//  This is the object we need for loading files.
33740>>>>>>>>>//
33740>>>>>>>>>Object Code_loader is a Code_loader_Data_Set no_Image
33742>>>>>>>>>End_Object
33743>>>>>>>>>
33743>>>>>>>>>
33743>>>>>>>>>Class CodeValidationTable is an FileValidationTable
33744>>>>>>>>>    
33744>>>>>>>>>    // supports opening of file in reserved filelist area.
33744>>>>>>>>>    Import_Class_Protocol cCodeMaintOpen_Mixin
33745>>>>>>>>>    
33745>>>>>>>>>    Procedure Construct_Object
33747>>>>>>>>>        Forward Send Construct_Object
33749>>>>>>>>>        
33749>>>>>>>>>        Send OpenCodeMast                       // methods supports w/ filelist (new) and without (old)
33750>>>>>>>>>        
33750>>>>>>>>>        Set Main_File to CodeMast.File_Number   // name of file is CODEMAST
33751>>>>>>>>>        Set Ordering to 1                       // Index 1: Types x Code
33752>>>>>>>>>        Set Type_Field to 1                     // Fld 1: Type
33753>>>>>>>>>        Set Code_Field to 2                     // Fld 2: Code
33754>>>>>>>>>        Set Description_Field to 3              // Fld 3: Description
33755>>>>>>>>>        Set Code_load_Object to (Code_Loader(Self))
33756>>>>>>>>>    End_Procedure
33757>>>>>>>>>    
33757>>>>>>>>>End_Class
33758>>>>>>>
33758>>>>>>>// Used to by DDOConstraintFindMeta to return constraint expression info in a friendlier fashion
33758>>>>>>>Struct tDDOConstraintFindMeta
33758>>>>>>>    Integer iJumpInSegments
33758>>>>>>>    Boolean bJumpOut
33758>>>>>>>    Boolean bPreRelate
33758>>>>>>>    Boolean bPostRelate
33758>>>>>>>End_Struct
33758>>>>>>>
33758>>>>>>>// used by webapp resynchs
33758>>>>>>>Struct tDDChangedParentInfo
33758>>>>>>>    Integer iTable
33758>>>>>>>    Boolean bSwitched
33758>>>>>>>End_Struct
33758>>>>>>>
33758>>>>>>>// used by webapp resynchs
33758>>>>>>>Struct tDDChangedInfo
33758>>>>>>>    Boolean bChanged
33758>>>>>>>    tDDChangedParentInfo[] ParentChanged
33758>>>>>>>    tDDChangedParentInfo[] ParentChanged
33758>>>>>>>End_Struct
33758>>>>>>>
33758>>>>>>>Enum_List
33758>>>>>>>    Define CONST_EXP_JUMPOUT     for 1
33758>>>>>>>    Define CONST_EXP_PRE_RELATE  for 2
33758>>>>>>>    Define CONST_EXP_POST_RELATE for 4
33758>>>>>>>End_Enum_List
33758>>>>>>>
33758>>>>>>>// Constraint Find Types
33758>>>>>>>Enum_List
33758>>>>>>>    Define CONST_VALUE for 0    // Constrain File.Field eq sValue
33758>>>>>>>    Define CONST_CHILD          // Constrain File Relates to iOtherFile
33758>>>>>>>    Define CONST_FIELD          // Constrain File.field eq OtherFile.OtherField
33758>>>>>>>    Define CONST_EXP            // Constrain File as (Expression) - expression is internal
33758>>>>>>>    Define CONST_RELATES        // Sames a CONST_CHILD - should never be used
33758>>>>>>>End_Enum_List
33758>>>>>>>
33758>>>>>>>// Constraint Find Modes
33758>>>>>>>Enum_List
33758>>>>>>>    Define CONST_LT for 0
33758>>>>>>>    Define CONST_LE for 1
33758>>>>>>>    Define CONST_EQ for 2
33758>>>>>>>    Define CONST_GE for 3
33758>>>>>>>    Define CONST_GT for 4
33758>>>>>>>    Define CONST_NE for 5
33758>>>>>>>    Define CONST_Matches for 6       // a matches not capable of a jump in e.g., "?A*"
33758>>>>>>>    Define CONST_Contains for 7      // a contains
33758>>>>>>>    Define CONST_MatchesJumpIn for 9 // a matches which is capable of a jump in e.g., "A*"
33758>>>>>>>    // note that BETWEEN is actually two constraints a GE and LE
33758>>>>>>>End_Enum_List
33758>>>>>>>
33758>>>>>>>// Struct used to DDOConstraints to return current constraints in an array
33758>>>>>>>Struct tConstraintDef
33758>>>>>>>    Integer eType // constraint Find type
33758>>>>>>>    Integer eMode // constrain file mode
33758>>>>>>>    Integer iFile
33758>>>>>>>    Integer iField
33758>>>>>>>    String sValue
33758>>>>>>>    Integer iOtherFile
33758>>>>>>>    Integer iOtherField
33758>>>>>>>End_Struct
33758>>>>>>>
33758>>>>>>>// values passed to OnPre/PostFind to indicate the operation type
33758>>>>>>>Enum_List
33758>>>>>>>    Define DDFindRequestFind    // request_find
33758>>>>>>>    Define DDFindFindByRowRec   // FindByRowId, Find_By_Recnum
33758>>>>>>>    Define DDFindRequestAssign  // Request_assign
33758>>>>>>>    Define DDFindClear          // Clear (note Clear_All doesn't do this)
33758>>>>>>>End_Enum_List
33758>>>>>>>
33758>>>>>>>
33758>>>>>>>// these are private
33758>>>>>>>Define DD_RememberLast for "_REMEMBER$LAST_"
33758>>>>>>>Use tDDRemembered.pkg
Including file: tDDRemembered.pkg    (C:\Program Files\DataFlex 24.0\Pkg\tDDRemembered.pkg)
33758>>>>>>>>>// DDRemember Struct used for DataDictionary Class
33758>>>>>>>>>
33758>>>>>>>>>// private
33758>>>>>>>>>
33758>>>>>>>>>Struct tDDRemembered
33758>>>>>>>>>    Integer iField // searches are performed on this segement - it must be first
33758>>>>>>>>>    String sDefault
33758>>>>>>>>>    String sLastValue
33758>>>>>>>>>End_Struct
33758>>>>>>>>>
33758>>>>>>>
33758>>>>>>>// Used to assign a global validation_object. This can be used for
33758>>>>>>>// automatic prompt object on non-relational validations (checks, validation_
33758>>>>>>>// tables, etc.)
33758>>>>>>>Integer DD_Global_Validation_Prompt_Object
33758>>>>>>>Move 0 to DD_Global_Validation_Prompt_Object
33759>>>>>>>
33759>>>>>>>// Used for Dso traversal marking - Private (do not use)
33759>>>>>>>Integer   DD_Current_Mark_Id
33759>>>>>>>Move 0 to DD_Current_Mark_Id
33760>>>>>>>
33760>>>>>>>// Used to validate DSO structures during Save and deletes
33760>>>>>>>Enumeration_List
33760>>>>>>>    Define DD_VALIDATE_STRUCTURE_ALWAYS // Validate each save/delete operation.
33760>>>>>>>    Define DD_VALIDATE_STRUCTURE_NEVER  // Never validate these operations.
33760>>>>>>>    Define DD_VALIDATE_STRUCTURE_ONCE   // Validate Once (first save or delete).
33760>>>>>>>End_Enumeration_List
33760>>>>>>>
33760>>>>>>>// Used as a start for error handing in DSOs. Only affects errors that go
33760>>>>>>>// through operation_not_allowed and Field_Error. Used by Error_Report_Mode
33760>>>>>>>Enumeration_List
33760>>>>>>>    Define DD_ERROR_REPORT              // Report Error on screen
33760>>>>>>>    Define DD_ERROR_NO_REPORT           // Show no Error..
33760>>>>>>>End_Enumeration_List
33760>>>>>>>
33760>>>>>>>Enumeration_List
33760>>>>>>>    Define DD_Lock_on_All             for  7  // 111
33760>>>>>>>    Define DD_Lock_on_New_Save_Delete for  5  // 101
33760>>>>>>>    Define DD_Lock_on_Delete          for  4  // 100
33760>>>>>>>    Define DD_Lock_on_Save            for  2  // 010
33760>>>>>>>    Define DD_Lock_on_New_Save        for  1  // 001
33760>>>>>>>End_Enumeration_List
33760>>>>>>>
33760>>>>>>>
33760>>>>>>>Define DD_DEFAULT_ERROR_NUMBER  for 999
33760>>>>>>>
33760>>>>>>>
33760>>>>>>>
33760>>>>>>>
33760>>>>>>>// The next replaces will be used to indicate default item-options
33760>>>>>>>// instead of a fieldnumber which is normally used.
33760>>>>>>>
33760>>>>>>>// these are the DD bits that pertain to DEO Item options.
33760>>>>>>>Define DD_DEO_MASK for (DD_NOENTER ior DD_SKIPFOUND ior DD_CAPSLOCK ior DD_ZERO_SUPPRESS ior DD_AUTORETURN ior DD_AUTOBACK ior DD_AUTOCLEAR)
33760>>>>>>>
33760>>>>>>>
33760>>>>>>>// Special parameter options that can get passed to Set Field_Options. The
33760>>>>>>>// purpose is to clear all fields or the remaining passed parameters. Normally,
33760>>>>>>>// these are not used so it does not matter if their interface is a bit odd.
33760>>>>>>>Enumeration_List
33760>>>>>>>    Define DD_CLEAR_FIELD_OPTIONS      for -1
33760>>>>>>>    Define DD_CLEAR_ALL_FIELD_OPTIONS  for -2
33760>>>>>>>End_Enumeration_List
33760>>>>>>>
33760>>>>>>>// used to keep track of extra server file information.
33760>>>>>>>Struct tDDServerInformation
33760>>>>>>>    Integer iParent             // parent file number
33760>>>>>>>    Boolean bAllowNullParent    // does this DD (child) allow a null parent
33760>>>>>>>    Integer bParentNoSwitchIfCommitted // does this DD (child) allow switching committed parents
33760>>>>>>>    Boolean bNoCascadeDelete           // when a child record exists should cascade delete stop the action
33760>>>>>>>    Boolean bCascadeDeleteNullTheParent // when a child record exists that is null parent allowed, should we delete or null the parent
33760>>>>>>>End_Struct
33760>>>>>>>
33760>>>>>>>Use DDExtFld.pkg // adds extended field/pointer support
Including file: DDExtFld.pkg    (C:\Program Files\DataFlex 24.0\Pkg\DDExtFld.pkg)
33760>>>>>>>>>// This is used by the DataDictionary class and provides a method for
33760>>>>>>>>>// windows DDs (for now) to support local buffers for text and binary buffers.
33760>>>>>>>>>// Field objects are created within the DD by sending the message:
33760>>>>>>>>>// The DD interface is:
33760>>>>>>>>>//
33760>>>>>>>>>//      Get  Field_Object iField to hExtFieldObject
33760>>>>>>>>>//      Send DefineExtendedField iField
33760>>>>>>>>>//      Send DefineAllExtendedFields
33760>>>>>>>>>//      Send ExtendedFieldsUpdate bSave
33760>>>>>>>>>//      Send ExtendedFieldsRefresh bCleared
33760>>>>>>>>>//      Set  File_Field_Current_Pointer_Value iFile iField iLen to pValue
33760>>>>>>>>>//      Set  Field_Current_Pointer_Value iField iLen to pValue
33760>>>>>>>>>//      Set  File_Field_Pointer_Entry iFile iField iLen bShowErr to pValue
33760>>>>>>>>>//      Set  Field_Pointer_Entry iField iOpts iLen bShowErr to pValue
33760>>>>>>>>>//      Get  File_Field_Current_Pointer_Value iFile iField to pData
33760>>>>>>>>>//      Get  Field_Current_Pointer_Value iField to pData
33760>>>>>>>>>//
33760>>>>>>>>>// Once object is identified, the following interface can be used
33760>>>>>>>>>//      Get FieldPointer of hExtFieldObject to iMemoryPointer
33760>>>>>>>>>//      Get FieldLength  of hExtFieldObject to iLen
33760>>>>>>>>>//      Get File_Number  of hExtFieldObject to iFile
33760>>>>>>>>>//      Get Field_Number of hExtFieldObject to iFile
33760>>>>>>>>>//      Set Update_Save_State of hExtFieldObject to bState         // be careful!
33760>>>>>>>>>//      Set Update_Find_State of hExtFieldObject to bState         // be careful
33760>>>>>>>>>//      Set FieldRefresh_Save_State of hExtFieldObject to bState   // be careful
33760>>>>>>>>>//
33760>>>>>>>>>
33760>>>>>>>>>//
33760>>>>>>>>>//  DD structure:
33760>>>>>>>>>//       DD Object           (property Field_objects points to child)
33760>>>>>>>>>//           FieldObjects    (array of field#s and field objs)
33760>>>>>>>>>//              FieldObject1 (heap alloc for each field)
33760>>>>>>>>>//              FieldObjectn
33760>>>>>>>>>//
33760>>>>>>>>>
33760>>>>>>>>>//
33760>>>>>>>>>// This is used to create a single extended field object.
33760>>>>>>>>>//
33760>>>>>>>>>// Interface
33760>>>>>>>>>//      Get FieldPointer to iMemoryPointer
33760>>>>>>>>>//      Get FieldLength  to iLen
33760>>>>>>>>>//      Get File_Number  to iFile
33760>>>>>>>>>//      Get Field_Number to iFile
33760>>>>>>>>>//      get/Set Update_Save_State to bState         // be careful!
33760>>>>>>>>>//      get/Set Update_Find_State to bState         // be careful
33760>>>>>>>>>//      get/Set FieldRefresh_Save_State to bState   // be careful
33760>>>>>>>>>//      get/set FieldChangedState
33760>>>>>>>>>//      send defineField  iFile iField
33760>>>>>>>>>//      Send FieldUpdate  bSave
33760>>>>>>>>>//      Send FieldRefresh bCleared bClearFieldChange
33760>>>>>>>>>//      Set  Field_pEntry iOpts iLen to pValue
33760>>>>>>>>>//      Set  Field_pValue iLen to pValue
33760>>>>>>>>>//
33760>>>>>>>>>Use VDFBase.pkg
33760>>>>>>>>>
33760>>>>>>>>>Class FieldObject is a cObject
33761>>>>>>>>>    
33761>>>>>>>>>    Procedure Construct_Object
33763>>>>>>>>>        Forward Send construct_object
33765>>>>>>>>>        // these are all set by DefineField and should not be changed
33765>>>>>>>>>        Property Integer File_Number        0
33766>>>>>>>>>        Property Integer Field_Number       0
33767>>>>>>>>>        Property Integer FieldLength        0
33768>>>>>>>>>        
33768>>>>>>>>>        // maintained by object
33768>>>>>>>>>        Property UChar[] pFieldArray
33769>>>>>>>>>        
33769>>>>>>>>>        // these can be changed, with care, by the developer
33769>>>>>>>>>        Property Integer Update_Save_State  True
33770>>>>>>>>>        Property Integer Update_Find_State  False // usually no point for finds
33771>>>>>>>>>        Property Integer FieldRefresh_State True
33772>>>>>>>>>        
33772>>>>>>>>>        // hopefully never used
33772>>>>>>>>>        Property Pointer pLegacyFieldPointer       0
33773>>>>>>>>>        
33773>>>>>>>>>    End_Procedure
33774>>>>>>>>>    
33774>>>>>>>>>    Procedure Set FieldChangedState Integer bState
33776>>>>>>>>>        Integer iField
33776>>>>>>>>>        Get Field_Number to iField
33777>>>>>>>>>        Delegate Set Field_Changed_state iField to bState
33779>>>>>>>>>    End_Procedure
33780>>>>>>>>>    
33780>>>>>>>>>    Function FieldChangedState Returns Integer
33782>>>>>>>>>        Integer iField  bState
33782>>>>>>>>>        Get Field_Number to iField
33783>>>>>>>>>        Delegate Get Field_Changed_state iField to bState
33785>>>>>>>>>        Function_Return bState
33786>>>>>>>>>    End_Function
33787>>>>>>>>>    
33787>>>>>>>>>    // return the field option specified
33787>>>>>>>>>    Function IsSaveNoPut Returns Boolean
33789>>>>>>>>>        Integer iField
33789>>>>>>>>>        Boolean  bState
33789>>>>>>>>>        Get Field_Number to iField
33790>>>>>>>>>        Delegate Get FieldSaveNoPut iField to bState
33792>>>>>>>>>        Function_Return bState
33793>>>>>>>>>    End_Function
33794>>>>>>>>>    
33794>>>>>>>>>    // for object: define file, field, fieldlength and allocate heap memory
33794>>>>>>>>>    //             and set memory pointer
33794>>>>>>>>>    Procedure DefineField Integer iFile Integer iField
33796>>>>>>>>>        Integer iFldLen
33796>>>>>>>>>        Set File_Number  to iFile
33797>>>>>>>>>        Set Field_Number to iField
33798>>>>>>>>>        Get_Attribute DF_FIELD_LENGTH of iFile iField to iFldLen
33801>>>>>>>>>        Set FieldLength  to iFldLen
33802>>>>>>>>>    End_Procedure
33803>>>>>>>>>    
33803>>>>>>>>>    // Move from the DD Buffer to the file buffer
33803>>>>>>>>>    Procedure FieldUpdate Integer bSave
33805>>>>>>>>>        Integer iFile iField iFieldLen
33805>>>>>>>>>        UChar[] FieldArray
33806>>>>>>>>>        Integer iType
33806>>>>>>>>>        Boolean bNoPut
33806>>>>>>>>>        
33806>>>>>>>>>        // if bSave, part of save which means only update if changed
33806>>>>>>>>>        // if not bsave, part of find. You usually would not update this. You
33806>>>>>>>>>        // don't index on these types of fields
33806>>>>>>>>>        If ( (bSave and Update_Save_State(Self) and FieldChangedState(Self)) or ;            (not(bSave) and Update_Find_state(Self) ) ) Begin
33808>>>>>>>>>            // if save, we must respect DD_NoPut
33808>>>>>>>>>            If (bSave) Begin
33810>>>>>>>>>                // we are looking at the DD's field buffer itemoptions for, which
33810>>>>>>>>>                // should be set appropriately before a save. This setting has any
33810>>>>>>>>>                // changes made to support dd_commit
33810>>>>>>>>>                Get IsSaveNoPut to bNoPut
33811>>>>>>>>>                If bNoPut Begin
33813>>>>>>>>>                    Procedure_Return
33814>>>>>>>>>                End
33814>>>>>>>>>>
33814>>>>>>>>>            End
33814>>>>>>>>>>
33814>>>>>>>>>            Get pFieldArray to FieldArray
33815>>>>>>>>>            Get File_Number to iFile
33816>>>>>>>>>            Get Field_Number to iField
33817>>>>>>>>>            If iFile Begin
33819>>>>>>>>>                Set_Field_Value iFile iField to FieldArray // LENGTH iFieldLen
33822>>>>>>>>>            End
33822>>>>>>>>>>
33822>>>>>>>>>        End
33822>>>>>>>>>>
33822>>>>>>>>>    End_Procedure
33823>>>>>>>>>    
33823>>>>>>>>>    // Move from File buffer to local DD Buffer
33823>>>>>>>>>    // bCleared determines if this is a find or a clear.
33823>>>>>>>>>    // bClearFieldChange determines if we should clear the FieldChangedState.
33823>>>>>>>>>    Procedure FieldRefresh Boolean bCleared Boolean bClearFieldChange
33825>>>>>>>>>        Integer iFile iField
33825>>>>>>>>>        Integer bOk
33825>>>>>>>>>        UChar[] FieldArray
33826>>>>>>>>>        If (FieldRefresh_state(Self)) Begin
33828>>>>>>>>>            //Get FieldPointer to pField
33828>>>>>>>>>            Get File_Number to iFile
33829>>>>>>>>>            Get Field_Number to iField
33830>>>>>>>>>            // move from file buffer to memory pointed to by pField
33830>>>>>>>>>            If (iFile) Begin
33832>>>>>>>>>                If not bCleared Begin
33834>>>>>>>>>                    Get_Field_Value iFile iField to FieldArray
33837>>>>>>>>>                End
33837>>>>>>>>>>
33837>>>>>>>>>                Set Field_UCValue to FieldArray
33838>>>>>>>>>            End
33838>>>>>>>>>>
33838>>>>>>>>>        End
33838>>>>>>>>>>
33838>>>>>>>>>        If bClearFieldChange Begin
33840>>>>>>>>>            Set FieldChangedstate to False
33841>>>>>>>>>        End
33841>>>>>>>>>>
33841>>>>>>>>>    End_Procedure
33842>>>>>>>>>    
33842>>>>>>>>>    Procedure Set Field_pEntry Integer iOpts Integer iLen Integer bShowErr Pointer pValue
33844>>>>>>>>>        Integer iFile iField iFldLen iMemLen
33844>>>>>>>>>        Integer bChanged
33844>>>>>>>>>        UChar[] FieldArray
33845>>>>>>>>>        
33845>>>>>>>>>        // currently we do nothing with bShowErr because we don't checkfor errors!
33845>>>>>>>>>        
33845>>>>>>>>>        // if No-enter or Displayonly, this shouldn't be changed. For now we will
33845>>>>>>>>>        // let NoPut through, since a user might need it for finding.
33845>>>>>>>>>        If (iOpts iand DD_NOENTER) ;            Procedure_Return
33848>>>>>>>>>        
33848>>>>>>>>>        // maybe in the future
33848>>>>>>>>>        // Force a caplsock if required
33848>>>>>>>>>        //If (iOpts IAND DD_CAPSLOCK) Move (Uppercase(sValue)) to sValue
33848>>>>>>>>>        
33848>>>>>>>>>        Get File_Number  to iFile
33849>>>>>>>>>        Get Field_Number to iField
33850>>>>>>>>>        If (iFile) Begin
33852>>>>>>>>>            Get Is_pValueChanged iLen pValue to bChanged
33853>>>>>>>>>            If ( bChanged or (iOpts iand DD_FORCEPUT) ) Begin
33855>>>>>>>>>                Set Field_pValue iLen to pValue
33856>>>>>>>>>            End
33856>>>>>>>>>>
33856>>>>>>>>>            
33856>>>>>>>>>            
33856>>>>>>>>>            // Set changed state if changed and it is not No_put. This
33856>>>>>>>>>            // is an improvement on DEOs which would set changed-state for
33856>>>>>>>>>            // a no-put. This way, finds use the changed value but saves will
33856>>>>>>>>>            // not trigger a phony data loss
33856>>>>>>>>>            //If ( bChanged ) ;
33856>>>>>>>>>            If ( bChanged and not(iOpts iand DD_NOPUT) ) ;                Set FieldChangedState to True
33859>>>>>>>>>            
33859>>>>>>>>>            // The following is really highly unlikely!!!
33859>>>>>>>>>            // perform autofinds if needed. Note that required checking will occur as
33859>>>>>>>>>            // part of validation.
33859>>>>>>>>>            // We will only autofind if the field value is changed. This is consistent with
33859>>>>>>>>>            // DEOs which do not autofind on unchanged values. This provides optimizations
33859>>>>>>>>>            // when a parent record is already loaded.
33859>>>>>>>>>            If (bChanged or FieldChangedState(Self)) Begin
33861>>>>>>>>>                If (iOpts iand DD_AUTOFIND) ;                    Delegate Send File_Field_AutoFind iFile iField EQ
33865>>>>>>>>>                Else If (iOpts iand DD_AUTOFIND_GE) ;                    Delegate Send File_Field_AutoFind iFile iField GE
33870>>>>>>>>>            End
33870>>>>>>>>>>
33870>>>>>>>>>        End
33870>>>>>>>>>>
33870>>>>>>>>>        
33870>>>>>>>>>    End_Procedure
33871>>>>>>>>>    
33871>>>>>>>>>    // convert pointer to UChar[]
33871>>>>>>>>>    Function PointerToUCharArray Pointer pValue Integer iLen Returns UChar[]
33873>>>>>>>>>        UChar[] FieldArray
33874>>>>>>>>>        Boolean bOk
33874>>>>>>>>>        Move (ResizeArray(FieldArray,iLen)) to FieldArray
33875>>>>>>>>>        Move (MemCopy(AddressOf(FieldArray),pValue,iLen)) to bOK
33876>>>>>>>>>        Function_Return FieldArray
33877>>>>>>>>>    End_Function
33878>>>>>>>>>    
33878>>>>>>>>>    // Raw update of pValue
33878>>>>>>>>>    Procedure Set Field_UCValue UChar[] FieldArray
33880>>>>>>>>>        Set pFieldArray to FieldArray
33881>>>>>>>>>        Send DestroyLegacyFieldHeap
33882>>>>>>>>>    End_Procedure
33883>>>>>>>>>    
33883>>>>>>>>>    // Raw update of pValue
33883>>>>>>>>>    Procedure Set Field_pValue Integer iLen Pointer pValue
33885>>>>>>>>>        UChar[] FieldArray
33886>>>>>>>>>        Get PointerToUCharArray pValue iLen to FieldArray
33887>>>>>>>>>        Set Field_UCValue to FieldArray
33888>>>>>>>>>    End_Procedure
33889>>>>>>>>>    
33889>>>>>>>>>    Function Is_pValueChanged Integer iLen Pointer pValue Returns Boolean
33891>>>>>>>>>        Boolean bChanged
33891>>>>>>>>>        UChar[] FieldArray
33892>>>>>>>>>        Integer iFldLen
33892>>>>>>>>>        Get pFieldArray to FieldArray
33893>>>>>>>>>        Move (SizeOfArray(FieldArray)) to iFldLen
33894>>>>>>>>>        If (iLen <> SizeOfArray(FieldArray)) Begin
33896>>>>>>>>>            Move True to bChanged
33897>>>>>>>>>        End
33897>>>>>>>>>>
33897>>>>>>>>>        Else If (iLen) Begin // check for empty pointer
33900>>>>>>>>>            Move (MemCompare(AddressOf(FieldArray),pValue,iLen)) to bChanged
33901>>>>>>>>>        End
33901>>>>>>>>>>
33901>>>>>>>>>        Function_Return bChanged
33902>>>>>>>>>    End_Function
33903>>>>>>>>>    
33903>>>>>>>>>    // returns data as UChar array - best way to access the data
33903>>>>>>>>>    Function FieldArray Returns UChar[]
33905>>>>>>>>>        UChar[] FieldArray
33906>>>>>>>>>        Get pFieldArray to FieldArray
33907>>>>>>>>>        Function_Return FieldArray
33908>>>>>>>>>    End_Function
33909>>>>>>>>>    
33909>>>>>>>>>    // legacy method. Hopefully this is never called.
33909>>>>>>>>>    Function FieldPointer Returns Pointer
33911>>>>>>>>>        Pointer pValue pOldValue
33911>>>>>>>>>        Integer iLen
33911>>>>>>>>>        UChar[] FieldArray
33912>>>>>>>>>        Boolean bOk
33912>>>>>>>>>        Get pFieldArray to FieldArray
33913>>>>>>>>>        Move (SizeOfArray(FieldArray)) to iLen
33914>>>>>>>>>        Move (Alloc(iLen)) to pValue
33915>>>>>>>>>        Move (MemCopy(pValue,AddressOf(FieldArray),iLen)) to bOk
33916>>>>>>>>>        Send DestroyLegacyFieldHeap
33917>>>>>>>>>        Set pLegacyFieldPointer to pValue
33918>>>>>>>>>        Function_Return pValue
33919>>>>>>>>>    End_Function
33920>>>>>>>>>    
33920>>>>>>>>>    Procedure DestroyLegacyFieldHeap
33922>>>>>>>>>        Integer bOK
33922>>>>>>>>>        Pointer pField
33922>>>>>>>>>        Get pLegacyFieldPointer to pField
33923>>>>>>>>>        If (pField ) Begin
33925>>>>>>>>>            Move (Free(pField)) to bOk
33926>>>>>>>>>            Set pLegacyFieldPointer to 0
33927>>>>>>>>>        End
33927>>>>>>>>>>
33927>>>>>>>>>    End_Procedure
33928>>>>>>>>>    
33928>>>>>>>>>    // augment to release heap allocation
33928>>>>>>>>>    Procedure Destroy_Object
33930>>>>>>>>>        Send DestroyLegacyFieldHeap
33931>>>>>>>>>        Forward Send Destroy_object
33933>>>>>>>>>    End_Procedure
33934>>>>>>>>>    
33934>>>>>>>>>End_Class
33935>>>>>>>>>
33935>>>>>>>>>// This contains all extended field objects.
33935>>>>>>>>>// The array contains a list of all objects where item=field#
33935>>>>>>>>>// and item+1=field object.
33935>>>>>>>>>//
33935>>>>>>>>>// Interface is:
33935>>>>>>>>>//     Get Field_object iField to hFldObj
33935>>>>>>>>>//     Send DefineFieldObject iField
33935>>>>>>>>>//     Send ExtendedFieldsUpdate bSave
33935>>>>>>>>>//     Send ExtendedFieldsRefresh bCleared
33935>>>>>>>>>//
33935>>>>>>>>>Class FieldObjects is an Array
33936>>>>>>>>>    
33936>>>>>>>>>    // return object Id for iField. 0 if none.
33936>>>>>>>>>    Function Field_Object Integer iField Returns Integer
33938>>>>>>>>>        Integer iItm iCnt
33938>>>>>>>>>        Get Item_Count to iCnt
33939>>>>>>>>>        Move 0 to iItm
33940>>>>>>>>>        While iItm lt iCnt
33944>>>>>>>>>            If (Value(Self,iItm)=iField) ;                Function_Return (Value(Self,iItm+1))
33947>>>>>>>>>            Increment iItm
33948>>>>>>>>>            Increment iItm
33949>>>>>>>>>        Loop
33950>>>>>>>>>>
33950>>>>>>>>>        Function_Return 0
33951>>>>>>>>>    End_Function
33952>>>>>>>>>    
33952>>>>>>>>>    // define an extended object for field
33952>>>>>>>>>    Procedure DefineFieldObject Integer iField
33954>>>>>>>>>        Integer hFld
33954>>>>>>>>>        Integer iCnt  iFile
33954>>>>>>>>>        Boolean bInUse
33954>>>>>>>>>        Boolean bHasRecord
33954>>>>>>>>>        Delegate Get Main_File to iFile
33956>>>>>>>>>        Get Field_Object iField to hFld // this shouldn't exist yet
33957>>>>>>>>>        If not hFld Begin
33959>>>>>>>>>            Get Create U_FieldObject to hFld
33960>>>>>>>>>            Send DefineField to hFld iFile iField
33961>>>>>>>>>            Get Item_Count to iCnt          // add to array
33962>>>>>>>>>            Set Value  iCnt to iField   // Pos   = field#
33963>>>>>>>>>            Set Value  (iCnt+1) to hFld // Pos+1 = field object
33964>>>>>>>>>            Delegate Get In_Use_State to bInUse
33966>>>>>>>>>            If bInUse Begin
33968>>>>>>>>>                Delegate Send Refind_Records
33970>>>>>>>>>                Delegate Get HasRecord to bHasRecord
33972>>>>>>>>>                // updating the newly created field with the file buffer contents we don't
33972>>>>>>>>>                // want to change the field's changed state, which might have been set already.
33972>>>>>>>>>                Send FieldRefresh of hFld (not(bHasRecord)) False
33973>>>>>>>>>            End
33973>>>>>>>>>>
33973>>>>>>>>>        End
33973>>>>>>>>>>
33973>>>>>>>>>    End_Procedure
33974>>>>>>>>>    
33974>>>>>>>>>    // update all extended fields. Field buffer <-- DD buffer
33974>>>>>>>>>    Procedure ExtendedFieldsUpdate Integer bSave
33976>>>>>>>>>        Integer iItm iCnt
33976>>>>>>>>>        Get Item_Count to iCnt
33977>>>>>>>>>        Move 0 to iItm
33978>>>>>>>>>        While iItm lt iCnt
33982>>>>>>>>>            Increment iItm
33983>>>>>>>>>            Send FieldUpdate to (Value(Self,iItm)) bSave
33984>>>>>>>>>            Increment iItm
33985>>>>>>>>>        Loop
33986>>>>>>>>>>
33986>>>>>>>>>    End_Procedure
33987>>>>>>>>>    
33987>>>>>>>>>    // refresh all extended fields. Field buffer --> DD buffer
33987>>>>>>>>>    Procedure ExtendedFieldsRefresh Boolean bCleared
33989>>>>>>>>>        Integer iItm iCnt
33989>>>>>>>>>        Get Item_Count to iCnt
33990>>>>>>>>>        Move 0 to iItm
33991>>>>>>>>>        While iItm lt iCnt
33995>>>>>>>>>            Increment iItm
33996>>>>>>>>>            Send FieldRefresh to (Value(Self,iItm)) bCleared True
33997>>>>>>>>>            Increment iItm
33998>>>>>>>>>        Loop
33999>>>>>>>>>>
33999>>>>>>>>>    End_Procedure
34000>>>>>>>>>    
34000>>>>>>>>>    //
34000>>>>>>>>>    // these are sent from the child field object. We need to direct them
34000>>>>>>>>>    // to the DDO (the parent).
34000>>>>>>>>>    Procedure Set Field_Changed_State Integer iField Integer bState
34002>>>>>>>>>        Delegate Set Field_Changed_state iField to bState
34004>>>>>>>>>    End_Procedure
34005>>>>>>>>>    
34005>>>>>>>>>    Function Field_Changed_State Integer iField Returns Integer
34007>>>>>>>>>        Integer bState
34007>>>>>>>>>        Delegate Get Field_Changed_state iField to bState
34009>>>>>>>>>        Function_Return bState
34010>>>>>>>>>    End_Function
34011>>>>>>>>>    
34011>>>>>>>>>    Procedure File_Field_AutoFind Integer iFile Integer iField Integer iMode
34013>>>>>>>>>        Delegate Send File_field_AutoFind iFile iField iMode
34015>>>>>>>>>    End_Procedure
34016>>>>>>>>>    
34016>>>>>>>>>    Function FieldSaveNoPut Integer iField Returns Boolean
34018>>>>>>>>>        Boolean bIsCommited bNoPut
34018>>>>>>>>>        Delegate Get IsCommitted to bIsCommited
34020>>>>>>>>>        // we don't know if this is foreign or not (DDOs never do by themselves). We
34020>>>>>>>>>        // will test for regular. This should never be an issue as the DEO itself
34020>>>>>>>>>        // will be DisplayOnly as needed (we don't have indexed NoEnter=T/Noput=F issues)
34020>>>>>>>>>        Delegate Get FieldNoPut iField bIsCommited False to bNoPut
34022>>>>>>>>>        Function_Return bNoPut
34023>>>>>>>>>    End_Function
34024>>>>>>>>>    
34024>>>>>>>>>    Procedure Destroy_Object
34026>>>>>>>>>        Delegate Set Field_Objects to 0
34028>>>>>>>>>        Forward Send Destroy_object
34030>>>>>>>>>    End_Procedure
34031>>>>>>>>>    
34031>>>>>>>>>    
34031>>>>>>>>>End_Class
34032>>>>>>>// for text and binary. Must support Address Type
34032>>>>>>>
34032>>>>>>>
34032>>>>>>>// we need these from CLI.pkg for DAW drivers. These values must match what is defined
34032>>>>>>>// in cli.pkg
34032>>>>>>>Define DF_FILE_SQL_FILTER for 611
34032>>>>>>>Define DF_FILE_SQL_FILTER_ACTIVE for 624
34032>>>>>>>Define DF_FILE_SQL_FILTER_EQ for 636
34032>>>>>>>// same a CLI.pkg DF_FILE_TABLE_NAME but with a different name
34032>>>>>>>// used to avoid naming conflict. Must match cli.pkg df_file_table_name
34032>>>>>>>Define DF_FILE_SQL_TABLE_NAME for 609
34032>>>>>>>
34032>>>>>>>Define DF_FIELD_SQL_COLUMN_NAME         for 723
34032>>>>>>>
34032>>>>>>>Define DF_DATABASE_IDENTIFIER_QUOTE     for 1085
34032>>>>>>>Define DF_FILE_DATABASE_ID              for 622
34032>>>>>>>
34032>>>>>>>// Class helper for SQL/driver assistance.
34032>>>>>>>// This can only be used within a DataDictionary Class as it expects that
34032>>>>>>>// certain properties can be Get and Set via delegation.
34032>>>>>>>Class cDAWSQLDriverHelper is a cObject
34033>>>>>>>    
34033>>>>>>>    Function DriverIndex String sDriver Returns Integer
34035>>>>>>>        String  sCurrentDriver
34035>>>>>>>        Integer iNumberOfDrivers iDriver iCount
34035>>>>>>>        Move 0 to iDriver
34036>>>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
34039>>>>>>>        For iCount from 1 to iNumberOfDrivers
34045>>>>>>>>
34045>>>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
34048>>>>>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriver) ) Begin
34050>>>>>>>                Function_Return iCount
34051>>>>>>>            End
34051>>>>>>>>
34051>>>>>>>        Loop
34052>>>>>>>>
34052>>>>>>>        Function_Return 0
34053>>>>>>>    End_Function
34054>>>>>>>    
34054>>>>>>>    
34054>>>>>>>    // returns true if this table supports SQL filter interface
34054>>>>>>>    Function SupportsSQLFilters Returns Boolean
34056>>>>>>>        String sDriver
34056>>>>>>>        Integer iFile iDriver iConformance
34056>>>>>>>        Delegate Get Main_File to iFile
34058>>>>>>>        Get_Attribute DF_FILE_DRIVER of iFile to sDriver
34061>>>>>>>        Get DriverIndex sDriver to iDriver
34062>>>>>>>        If (iDriver) Begin
34064>>>>>>>            Get_Attribute DF_DRIVER_CONFORMANCE of iDriver to iConformance
34067>>>>>>>        End
34067>>>>>>>>
34067>>>>>>>        Function_Return (iConformance iand 4)
34068>>>>>>>    End_Function
34069>>>>>>>    
34069>>>>>>>    // SQL Helper functions that return SQL Filters strings that can be used in a where clause
34069>>>>>>>    
34069>>>>>>>    // Escape character to escape LIKE wildcards
34069>>>>>>>    
34069>>>>>>>    
34069>>>>>>>    Function SQLEscapedStr String sSQL Returns String
34071>>>>>>>        String sEscapedSQL
34071>>>>>>>        // Replace one single quote by 2 single quotes
34071>>>>>>>        Move (Replaces("'",sSQL,"''")) to sEscapedSQL
34072>>>>>>>        Function_Return sEscapedSQL
34073>>>>>>>    End_Function
34074>>>>>>>    
34074>>>>>>>    
34074>>>>>>>    Function SQLEscapeLikeWildcards String sSQL Returns String
34076>>>>>>>        
34076>>>>>>>        // Escape the wildcard characters than can be used in a LIKE
34076>>>>>>>        If (Pos("%",sSQL)) ;            Move (Replaces("%",sSQL,(SQL_LIKE_ESC + "%"))) to sSQL
34079>>>>>>>        If (Pos("_",sSQL)) ;            Move (Replaces("_",sSQL,(SQL_LIKE_ESC + "_"))) to sSQL
34082>>>>>>>        
34082>>>>>>>        Function_Return sSQL
34083>>>>>>>    End_Function
34084>>>>>>>    
34084>>>>>>>    
34084>>>>>>>    
34084>>>>>>>    // Creates an SQL Like Filter for this field and search target
34084>>>>>>>    Function SQLStrLike Integer iField String sSearch Returns String
34086>>>>>>>        String sFilter sOrigFilter sField
34086>>>>>>>        Integer iFile
34086>>>>>>>        Integer iHasLikeEscape
34086>>>>>>>        String  sPrefix
34086>>>>>>>        
34086>>>>>>>        Delegate Get Main_File to iFile
34088>>>>>>>        Delegate Get psSQLFilter to sOrigFilter
34090>>>>>>>        Get SQLStrFieldName iField to sField
34091>>>>>>>        Get SQLEscapedStr sSearch to sSearch
34092>>>>>>>        
34092>>>>>>>        Move (Pos(SQL_LIKE_ESC,sSearch)) to iHasLikeEscape
34093>>>>>>>        If (not(iHasLikeEscape)) Begin
34095>>>>>>>            Get SQLEscapeLikeWildcards sSearch to sSearch
34096>>>>>>>        End
34096>>>>>>>>
34096>>>>>>>        
34096>>>>>>>        // Add the N prefix to properly handle Unicode data
34096>>>>>>>        Move 'N' to sPrefix
34097>>>>>>>        Move (sField + " LIKE " + sPrefix + "'%" + sSearch + "%'") to sFilter
34098>>>>>>>        
34098>>>>>>>        If (not(iHasLikeEscape)) Begin
34100>>>>>>>            If (Pos(SQL_LIKE_ESC,sFilter)) Begin
34102>>>>>>>                Move (sFilter + " ESCAPE '" + SQL_LIKE_ESC + "' "  ) to sFilter
34103>>>>>>>            End
34103>>>>>>>>
34103>>>>>>>        End
34103>>>>>>>>
34103>>>>>>>        
34103>>>>>>>        Function_Return sFilter
34104>>>>>>>    End_Function
34105>>>>>>>    
34105>>>>>>>    // Appends two Filters with an AND clause. Both or either can be empty
34105>>>>>>>    Function SQLStrAppend String sOrigFilter String sFilter Returns String
34107>>>>>>>        If (sOrigFilter<>"" and sFilter<>"") Begin
34109>>>>>>>            Move ( "(" + sOrigFilter + ") AND (" + sFilter + ")") to sFilter
34110>>>>>>>        End
34110>>>>>>>>
34110>>>>>>>        Else If (sFilter="") Begin
34113>>>>>>>            Move sOrigFilter to sFilter
34114>>>>>>>        End
34114>>>>>>>>
34114>>>>>>>        Function_Return sFilter
34115>>>>>>>    End_Function
34116>>>>>>>    
34116>>>>>>>    // Appends two filters with an or clause. Both or either can be empty.
34116>>>>>>>    // This may be used in OnConstrain methods when building SQL WHERE clauses in string values.
34116>>>>>>>    Function SQLStrAppendOr String sOrigFilter String sFilter Returns String
34118>>>>>>>        If (sOrigFilter<>"" and sFilter<>"") Begin
34120>>>>>>>            Move ("(" + sOrigFilter + ") OR (" + sFilter + ")") to sFilter
34121>>>>>>>        End
34121>>>>>>>>
34121>>>>>>>        Else If (sFilter="") Begin
34124>>>>>>>            Move sOrigFilter to sFilter
34125>>>>>>>        End
34125>>>>>>>>
34125>>>>>>>          Function_Return sFilter 
34126>>>>>>>    End_Function
34127>>>>>>>
34127>>>>>>>
34127>>>>>>>    Function SQLIdentifierQuote Handle hTable Returns String
34129>>>>>>>
34129>>>>>>>        String  sDriver        
34129>>>>>>>        Integer iDriverIndex
34129>>>>>>>        Handle  hDatabase
34129>>>>>>>        String  sIdentifierQuote
34129>>>>>>>        
34129>>>>>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriver
34132>>>>>>>        
34132>>>>>>>        Get DriverIndex sDriver to iDriverIndex        
34133>>>>>>>        If (iDriverIndex) Begin
34135>>>>>>>            Get_Attribute DF_FILE_DATABASE_ID of hTable to hDatabase            
34138>>>>>>>            If (hDatabase) Begin
34140>>>>>>>                Get_Attribute DF_DATABASE_IDENTIFIER_QUOTE of iDriverIndex hDatabase to sIdentifierQuote
34143>>>>>>>            End
34143>>>>>>>>
34143>>>>>>>        End
34143>>>>>>>>
34143>>>>>>>        
34143>>>>>>>        Function_Return sIdentifierQuote
34144>>>>>>>        
34144>>>>>>>    End_Function
34145>>>>>>>
34145>>>>>>>
34145>>>>>>>
34145>>>>>>>    // returns the name of the File and Field suitable for an SQL where statement ("Table"."Column")
34145>>>>>>>    Function SQLStrFileFieldName Integer iField Returns String
34147>>>>>>>        String sFile sField
34147>>>>>>>        Integer iFile
34147>>>>>>>        String  sIdentifierQuote
34147>>>>>>>        
34147>>>>>>>        Get Main_File to iFile
34148>>>>>>>        Get_Attribute DF_FILE_SQL_TABLE_NAME of iFile to sFile
34151>>>>>>>        Get_Attribute DF_FIELD_SQL_COLUMN_NAME of iFile iField to sField
34154>>>>>>>        Get SQLIdentifierQuote iFile to sIdentifierQuote
34155>>>>>>>        
34155>>>>>>>        Function_Return (sIdentifierQuote + sFile + sIdentifierQuote + '.' + sIdentifierQuote + sField + sIdentifierQuote ) 
34156>>>>>>>    End_Function
34157>>>>>>>
34157>>>>>>>    // returns the name of the Field suitable for an SQL where statement ("Column")
34157>>>>>>>    Function SQLStrFieldName Integer iField Returns String
34159>>>>>>>        String sField 
34159>>>>>>>        Integer iFile
34159>>>>>>>        String sIdentifierQuote
34159>>>>>>>        Get Main_File to iFile
34160>>>>>>>        Get_Attribute DF_FIELD_SQL_COLUMN_NAME of iFile iField to sField
34163>>>>>>>        
34163>>>>>>>        Get SQLIdentifierQuote iFile to sIdentifierQuote
34164>>>>>>>        
34164>>>>>>>        Function_Return (sIdentifierQuote + sField + sIdentifierQuote ) 
34165>>>>>>>
34165>>>>>>>    End_Function
34166>>>>>>>
34166>>>>>>>    // returns the name of the Schema and File and Field suitable for an SQL where statement ("Schema"."Table"."Column")
34166>>>>>>>    Function SQLStrSchemaFileFieldName Integer iField Returns String
34168>>>>>>>        String sFile sField sSchema
34168>>>>>>>        Integer iFile
34168>>>>>>>        String sIdentifierQuote
34168>>>>>>>        
34168>>>>>>>        Get Main_File to iFile
34169>>>>>>>        Get_Attribute DF_FILE_SQL_TABLE_NAME of iFile to sFile
34172>>>>>>>        Get_Attribute DF_FIELD_SQL_COLUMN_NAME of iFile iField to sField
34175>>>>>>>        Get_Attribute DF_FILE_OWNER of iFile to sSchema
34178>>>>>>>
34178>>>>>>>        Get SQLIdentifierQuote iFile to sIdentifierQuote
34179>>>>>>>            
34179>>>>>>>        If (Trim(sSchema) <> "") ;            Function_Return (sIdentifierQuote + sSchema + sIdentifierQuote + '.' + sIdentifierQuote + sFile + sIdentifierQuote + '.' + sIdentifierQuote + sField + sIdentifierQuote ) 
34182>>>>>>>        Else ;            Function_Return (sIdentifierQuote + sFile + sIdentifierQuote + '.' + sIdentifierQuote + sField + sIdentifierQuote ) 
34184>>>>>>>            
34184>>>>>>>            
34184>>>>>>>            
34184>>>>>>>    End_Function
34185>>>>>>>    
34185>>>>>>>    //  returns the name of a file suitable for a SQL statement
34185>>>>>>>    Function SQLStrFileName Integer iField Returns String
34187>>>>>>>        String sFile
34187>>>>>>>        Integer iFile
34187>>>>>>>        String sIdentifierQuote
34187>>>>>>>        
34187>>>>>>>        Get Main_File to iFile
34188>>>>>>>        Get_Attribute DF_FILE_SQL_TABLE_NAME of iFile to sFile
34191>>>>>>>        
34191>>>>>>>        Get SQLIdentifierQuote iFile to sIdentifierQuote
34192>>>>>>>        
34192>>>>>>>        Function_Return (sIdentifierQuote + sFile + sIdentifierQuote)
34193>>>>>>>    End_Function
34194>>>>>>>    
34194>>>>>>>    // called before an SQL Filter find. Make sure that any global and table attributes are
34194>>>>>>>    // stored.
34194>>>>>>>    Procedure StoreDefaultSQLFilters
34196>>>>>>>        String sOldFilter
34196>>>>>>>        Boolean bOldFilterActive bOldFilterEQ
34196>>>>>>>        Integer iMain
34196>>>>>>>        Get Main_File to iMain
34197>>>>>>>        Get_Attribute DF_FILE_SQL_FILTER of iMain to sOldFilter
34200>>>>>>>        Get_Attribute DF_FILE_SQL_FILTER_ACTIVE of iMain to bOldFilterActive
34203>>>>>>>        Get_Attribute DF_FILE_SQL_FILTER_EQ of iMain to bOldFilterEQ
34206>>>>>>>        Delegate Set psOldFilter to sOldFilter
34208>>>>>>>        Delegate Set pbOldFilterActive to bOldFilterActive
34210>>>>>>>        Delegate Set pbOldFilterEq to bOldFilterEQ
34212>>>>>>>    End_Procedure
34213>>>>>>>    
34213>>>>>>>    // called after an SQL find. Must restore the global and table SQL filter attributes
34213>>>>>>>    Procedure RestoreDefaultSQLFilters
34215>>>>>>>        String sOldFilter
34215>>>>>>>        Boolean bOldFilterActive bOldFilterEQ
34215>>>>>>>        Integer iMain
34215>>>>>>>        Delegate Get Main_File to iMain
34217>>>>>>>        Delegate Get psOldFilter to sOldFilter
34219>>>>>>>        Delegate Get pbOldFilterActive to bOldFilterActive
34221>>>>>>>        Delegate Get pbOldFilterEq to bOldFilterEQ
34223>>>>>>>        Set_Attribute DF_FILE_SQL_FILTER of iMain to sOldFilter
34226>>>>>>>        Set_Attribute DF_FILE_SQL_FILTER_ACTIVE of iMain to bOldFilterActive
34229>>>>>>>        Set_Attribute DF_FILE_SQL_FILTER_EQ of iMain to bOldFilterEQ
34232>>>>>>>    End_Procedure
34233>>>>>>>    
34233>>>>>>>    // applies the passed SQL filter. If empty, it should make sure that no filter
34233>>>>>>>    // is applied. If non-empty it should set the filter active, set the filter string
34233>>>>>>>    // and make sure this is applied to all finds (including find EQ)
34233>>>>>>>    Procedure ApplySQLFilterStr String sFilter
34235>>>>>>>        Integer iMain
34235>>>>>>>        Delegate Get Main_File to iMain
34237>>>>>>>        If (sFilter<>"") Begin
34239>>>>>>>            Set_Attribute DF_FILE_SQL_FILTER_ACTIVE of iMain to True
34242>>>>>>>            Set_Attribute DF_FILE_SQL_FILTER of iMain to sFilter
34245>>>>>>>            Set_Attribute DF_FILE_SQL_FILTER_EQ of iMain to True
34248>>>>>>>        End
34248>>>>>>>>
34248>>>>>>>        Else Begin
34249>>>>>>>            Set_Attribute DF_FILE_SQL_FILTER_ACTIVE of iMain to False
34252>>>>>>>        End
34252>>>>>>>>
34252>>>>>>>    End_Procedure
34253>>>>>>>    
34253>>>>>>>End_Class
34254>>>>>>>
34254>>>>>>>// Every data_set will have a object based on this class. It will hold
34254>>>>>>>// the values for the fields, the entry_options and the messages IDs of the
34254>>>>>>>// iEntry, iExit and iValidate messages for each field.
34254>>>>>>>// It is assumed that an object of this class will always be used as a
34254>>>>>>>// child object of a Data_Set object.
34254>>>>>>>//
34254>>>>>>>// Currently the fieldtypes Overlap, Text and Binary are *not* supported.
34254>>>>>>>//
34254>>>>>>>// ITEM-PROPERTY   ASSIGNED-FUNCTION
34254>>>>>>>//
34254>>>>>>>// Value           The value of the field. Will be updated whenever the
34254>>>>>>>//                 value of a field changes due to data-entry or a found
34254>>>>>>>//                 record.
34254>>>>>>>// Data_File       Contains the filenumber. Is the same for every item.
34254>>>>>>>// Data_Field      Contains the fieldnumber for the item. Is equal to the
34254>>>>>>>//                 items' itemnumber.
34254>>>>>>>// Item_Options    Used to store the standard item-options of a field.
34254>>>>>>>// Aux_Value       Used to store the foreign-item-options of a field.
34254>>>>>>>Class cRecordBuffer is an cDDBuffer
34255>>>>>>>    
34255>>>>>>>    // This procedure will be called from the Data_Set when the Main_File is
34255>>>>>>>    // being set. It will create an item for each field of the file in this
34255>>>>>>>    // object. Fields of the types DF_OVERLAP, DF_TEXT and DF_BINARY are
34255>>>>>>>    // currently not added.
34255>>>>>>>    Procedure Create_Items Integer iFile
34257>>>>>>>        Integer iField_Count iField
34257>>>>>>>        
34257>>>>>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iFile to iField_Count
34260>>>>>>>        Set Main_File to iFile
34261>>>>>>>        Send Delete_Data
34262>>>>>>>        Set Item_Count to (iField_Count+1)
34263>>>>>>>        For iField from 0 to iField_Count
34269>>>>>>>>
34269>>>>>>>            // will skip recnum (field 0) if non-recnum table
34269>>>>>>>            // will set to skip if binary, text or overlap
34269>>>>>>>            Set Data_Field iField to iField
34270>>>>>>>        Loop
34271>>>>>>>>
34271>>>>>>>    End_Procedure
34272>>>>>>>    
34272>>>>>>>    // when an alias is created, we want to clear any values that will not be applied to
34272>>>>>>>    // this alias DD such as prompt and zoom objects (which would point to the superclass master)
34272>>>>>>>    Procedure ReDefineAliasItems Integer iFile
34274>>>>>>>        Integer i iItems
34274>>>>>>>        
34274>>>>>>>        Set Main_File to iFile
34275>>>>>>>        Get item_count to iItems
34276>>>>>>>        For i from 0 to (iItems-1)
34282>>>>>>>>
34282>>>>>>>            Set Prompt_Object i to 0
34283>>>>>>>            Set Zoom_Object i to 0
34284>>>>>>>        Loop
34285>>>>>>>>
34285>>>>>>>    End_Procedure
34286>>>>>>>    
34286>>>>>>>    
34286>>>>>>>    // This procedure will be called from the parent Data_Set whenever the
34286>>>>>>>    // Data_Set changes its Current_Record property, or after a Save, Delete or Clear operation.
34286>>>>>>>    // We use this event to store the values of the fields in our local record buffer.
34286>>>>>>>    Procedure OnNewCurrentRecord RowID riOld RowID riNew
34288>>>>>>>        Integer iMain_File
34288>>>>>>>        Integer iOldState
34288>>>>>>>        tDDRemembered[] DefaultValues
34288>>>>>>>        tDDRemembered[] DefaultValues
34289>>>>>>>        Boolean bRetain bInReSync
34289>>>>>>>        Integer iFld iFlds iIndex
34289>>>>>>>        Handle hoDD
34289>>>>>>>        
34289>>>>>>>        Get Parent to hoDD
34290>>>>>>>        Delegate Get Main_File to iMain_File
34292>>>>>>>        
34292>>>>>>>        If not (IsNullRowId(riNew)) ;            Send Entry_Display
34295>>>>>>>        Else Begin            
34296>>>>>>>            If (OPERATION_ORIGIN) Begin
34298>>>>>>>                // This gets set by webapp during a resync. During resyncs, you don't want to rely
34298>>>>>>>                // on the values in the buffers (as they may not be yours), so you cannot do retain of rememberlast.
34298>>>>>>>                // Fortunately, you don't need to, as this information is not needed during a resync.
34298>>>>>>>                Get pbInResync of operation_origin to bInResync
34299>>>>>>>            End
34299>>>>>>>>
34299>>>>>>>            
34299>>>>>>>            // If we have any 17.0 Remember last value items, we must add those items to our array.
34299>>>>>>>            // Only do this if this is the operation origin or a parent (i.e., skip if a child DDO).
34299>>>>>>>            // Also skip if a resync. See above
34299>>>>>>>            If ( not(bInReSync) and ;                ( (Operation_Origin=hoDD) or ;                ( OPERATION_ORIGIN and (Which_data_set(Operation_Origin,iMain_File)<>0) ) ) ) Begin
34301>>>>>>>                Delegate Get pDDDefaults to DefaultValues
34303>>>>>>>                Move (SizeOfArray(DefaultValues)) to iFlds
34304>>>>>>>                For iFld from 0 to (iFlds-1)
34310>>>>>>>>
34310>>>>>>>                    Move (DefaultValues[iFld].sDefault=DD_RememberLast) to bRetain // if this is a dynamically assigned remember-last
34311>>>>>>>                    If bRetain Begin
34313>>>>>>>                        Get Value DefaultValues[iFld].iField to DefaultValues[iFld].sLastValue
34314>>>>>>>                    End
34314>>>>>>>>
34314>>>>>>>                    Else Begin
34315>>>>>>>                        Move '' to DefaultValues[iFld].sLastValue
34316>>>>>>>                    End
34316>>>>>>>>
34316>>>>>>>                Loop
34317>>>>>>>>
34317>>>>>>>                Delegate Set pDDDefaults to DefaultValues
34319>>>>>>>            End
34319>>>>>>>>
34319>>>>>>>            
34319>>>>>>>            // we must do this to make retains not set changed_state
34319>>>>>>>            Delegate Get Change_Disabled_State to iOldState
34321>>>>>>>            Delegate Set Change_Disabled_State to True
34323>>>>>>>            // If mode is anything other than clear, we do a clear all (clear keeps retains, clear all does not)
34323>>>>>>>            // Also do clear all if the DDO is foreign.
34323>>>>>>>            
34323>>>>>>>            // If bInReSync, we never use retains, as the buffer is not ours yet.
34323>>>>>>>            // The Entry_Clear, Entry_Clear_All parameter is bIgnoreRetains.
34323>>>>>>>            // When True, retain and retain_all states are ignored and cleared.
34323>>>>>>>            If (Operation_Mode=MODE_CLEARING and ;                ( (Operation_Origin=parent(Self)) or ;                (Which_data_set(Operation_Origin,iMain_File)<>0) ) ) Begin
34325>>>>>>>                    Send Entry_Clear bInReSync
34326>>>>>>>            End
34326>>>>>>>>
34326>>>>>>>            Else Begin
34327>>>>>>>                Send Entry_Clear_all bInResync
34328>>>>>>>            End
34328>>>>>>>>
34328>>>>>>>            Delegate Set Change_Disabled_State to iOldState
34330>>>>>>>            Set Changed_State to False
34331>>>>>>>        End
34331>>>>>>>>
34331>>>>>>>    End_Procedure
34332>>>>>>>    
34332>>>>>>>    // Make sure to set the Changed_State of the Data_Set to TRUE when a
34332>>>>>>>    // field value changes and it's not during the Setting of the Defaults.
34332>>>>>>>    Procedure Set Changed_State Integer iState
34334>>>>>>>        Integer iNoChange
34334>>>>>>>        // Server.pkg in dso already knows this property
34334>>>>>>>        Delegate Get Change_disabled_State to iNoChange
34336>>>>>>>        If not iNoChange Begin
34338>>>>>>>            Forward Set Changed_State to iState
34340>>>>>>>            Delegate Set Changed_State to iState
34342>>>>>>>        End
34342>>>>>>>>
34342>>>>>>>    End_Procedure
34343>>>>>>>    
34343>>>>>>>End_Class
34344>>>>>>>
34344>>>>>>>
34344>>>>>>>// Objects of this class will be used to store all kinds of attributes
34344>>>>>>>// which belong to a field.
34344>>>>>>>//
34344>>>>>>>// FA_MIN_VALUE
34344>>>>>>>// Used to store the mininum value of field.
34344>>>>>>>//
34344>>>>>>>// FA_MAX_VALUE
34344>>>>>>>// Used to store the maximum value of a field.
34344>>>>>>>//
34344>>>>>>>// FA_CHECK_VALUE
34344>>>>>>>// Used to store a string which contains all possible values of a field.
34344>>>>>>>//
34344>>>>>>>// FA_CHECKBOX_TRUE
34344>>>>>>>// Used to store the TRUE value for a checkbox field
34344>>>>>>>//
34344>>>>>>>// FA_CHECKBOX_FALSE
34344>>>>>>>// Used to store the FALSE value of a checkbox field
34344>>>>>>>//
34344>>>>>>>// FA_TABLE_OBJECT
34344>>>>>>>// Stores object Id of a validation table.
34344>>>>>>>//
34344>>>>>>>// FA_ERROR_MESSAGE
34344>>>>>>>// Used to store a error text which will be shown to a user when a fields
34344>>>>>>>// value violates one of the rules defined for it.
34344>>>>>>>// This field may contain the special strings @MIN, @MAX and @CHECK. When
34344>>>>>>>// these are used, these will be replaced by the actual value of MIN_VALUE,
34344>>>>>>>// MAX_VALUE or CHECK_VALUE.
34344>>>>>>>//
34344>>>>>>>
34344>>>>>>>
34344>>>>>>>// Validation Types
34344>>>>>>>Enumeration_List
34344>>>>>>>    Define FA_VALIDATION_TYPE_NONE
34344>>>>>>>    Define FA_VALIDATION_TYPE_RANGE
34344>>>>>>>    Define FA_VALIDATION_TYPE_CHECK
34344>>>>>>>    Define FA_VALIDATION_TYPE_CHECKBOX
34344>>>>>>>    Define FA_VALIDATION_TYPE_TABLE
34344>>>>>>>End_Enumeration_List
34344>>>>>>>
34344>>>>>>>
34344>>>>>>>Class Field_Attributes is a Array
34345>>>>>>>    
34345>>>>>>>    Procedure Construct_Object
34347>>>>>>>        Forward Send Construct_Object
34349>>>>>>>        // Private: This replaces the use of arrays to get at this value. This
34349>>>>>>>        // allows us to find specific validation types (like checkboxes) more
34349>>>>>>>        // quickly than scanning an array
34349>>>>>>>        Property String Private.Validation_Types     ''
34350>>>>>>>    End_Procedure
34351>>>>>>>    
34351>>>>>>>    // Returns the extended validation type for the passed field.
34351>>>>>>>    Function Field_Validation_Type Integer iField Returns Integer
34353>>>>>>>        Integer iType
34353>>>>>>>        If iField ;            Move (mid(Private.Validation_Types(Self),1,iField)) to iType
34356>>>>>>>        Else ;            Move FA_VALIDATION_TYPE_NONE to iType
34358>>>>>>>        Function_Return iType
34359>>>>>>>    End_Function
34360>>>>>>>    
34360>>>>>>>    Procedure Set Field_Validation_Type Integer iField String sType
34362>>>>>>>        Integer iType
34362>>>>>>>        String sTypes
34362>>>>>>>        If iField Begin
34364>>>>>>>            Get Private.Validation_Types to sTypes
34365>>>>>>>            Set Private.Validation_Types to (Overstrike(sType, sTypes, iField))
34366>>>>>>>        End
34366>>>>>>>>
34366>>>>>>>    End_Procedure
34367>>>>>>>    
34367>>>>>>>    // Set any defaults required by this class when the main file is created.
34367>>>>>>>    // Create a string which contains all validation types. Set all to
34367>>>>>>>    // No extended validation type.
34367>>>>>>>    Procedure Create_Items
34369>>>>>>>        String  sType
34369>>>>>>>        Integer iCount
34369>>>>>>>        Delegate Get Field_Count to iCOunt
34371>>>>>>>        Move FA_VALIDATION_TYPE_NONE to sType
34372>>>>>>>        Set Private.Validation_Types to (Repeat(sType,iCount))
34373>>>>>>>    End_Procedure
34374>>>>>>>    
34374>>>>>>>    // Return field number of next field matching the passed validation type.
34374>>>>>>>    // Pass validation type and last position checked. Return 0 if no match
34374>>>>>>>    Function Next_Validation_Type String sType Integer iOffset Returns Integer
34376>>>>>>>        String sTypes
34376>>>>>>>        Integer iPos
34376>>>>>>>        Get Private.Validation_Types to sTypes
34377>>>>>>>        Move (Pos(sType, mid(sTypes,255,iOffset+1))) to iPos
34378>>>>>>>        If iPos ;            Add iOffset to iPos
34381>>>>>>>        Function_Return iPos
34382>>>>>>>    End_Function
34383>>>>>>>    
34383>>>>>>>    // This procedure will be called by the Extended_Data_Set to set the
34383>>>>>>>    // errornumber and message which will be triggered when it needs to.
34383>>>>>>>    Procedure Set Field_Error Integer iField Integer iErr String sMsg
34385>>>>>>>        Integer iBase
34385>>>>>>>        Move (iField * FA_COUNT) to iBase
34386>>>>>>>        Set Value (iBase + FA_ERROR_NUMBER) to iErr
34387>>>>>>>        Set Value (iBase + FA_ERROR_MESSAGE) to sMsg
34388>>>>>>>    End_Procedure
34389>>>>>>>    
34389>>>>>>>    // Used to retreive the error number and message for a particular field
34389>>>>>>>    Function Field_Error_Number Integer iField Returns Integer
34391>>>>>>>        Integer iErr
34391>>>>>>>        Get Value (iField*FA_COUNT + FA_ERROR_NUMBER)  to iErr
34392>>>>>>>        Function_Return iErr
34393>>>>>>>    End_Function
34394>>>>>>>    
34394>>>>>>>    Function Field_Error_Message Integer iField Returns String
34396>>>>>>>        String sValue
34396>>>>>>>        Get Value (iField*FA_COUNT + FA_ERROR_MESSAGE) to sValue
34397>>>>>>>        Function_Return sValue
34398>>>>>>>    End_Function
34399>>>>>>>    
34399>>>>>>>    
34399>>>>>>>    // This function manages the validation of a field against its extended
34399>>>>>>>    // validations.
34399>>>>>>>    Function Validate_Field Integer iField Returns Integer
34401>>>>>>>        Integer iType
34401>>>>>>>        Integer iResult
34401>>>>>>>        Get Field_Validation_Type iField to iType
34402>>>>>>>        If (iType = FA_VALIDATION_TYPE_RANGE) ;            Get Validate_Field_Range iField to iResult
34405>>>>>>>        Else If (iType = FA_VALIDATION_TYPE_CHECK) ;            Get Validate_Field_Check iField to iResult
34409>>>>>>>        Else If (iType = FA_VALIDATION_TYPE_CHECKBOX) ;            Get Validate_Field_Checkbox iField to iResult
34413>>>>>>>        Else If (iType = FA_VALIDATION_TYPE_TABLE) ;            Get Validate_Field_Table iField to iResult
34417>>>>>>>        Function_Return iResult
34418>>>>>>>    End_Function
34419>>>>>>>    
34419>>>>>>>    // All extended validations know how to send callback messages (iMsg) to
34419>>>>>>>    // the calling object (iObj). This allows external lists to get filled w/
34419>>>>>>>    // the contents of a range. Used by combo boxes, spinners, etc.
34419>>>>>>>    Procedure Field_Fill_List Integer iField Integer iObj Integer iMsg
34421>>>>>>>        Integer iType
34421>>>>>>>        Integer iResult
34421>>>>>>>        Get Field_Validation_Type iField to iType
34422>>>>>>>        If (iType = FA_VALIDATION_TYPE_RANGE) ;            Send Field_Fill_List_Field_Range iField iObj iMsg
34425>>>>>>>        Else If (iType = FA_VALIDATION_TYPE_CHECK) ;            Send Field_Fill_List_Field_Check iField iObj iMsg
34429>>>>>>>        Else If (iType = FA_VALIDATION_TYPE_CHECKBOX) ;            Send Field_Fill_List_Field_Checkbox iField iObj iMsg
34433>>>>>>>        Else If (iType = FA_VALIDATION_TYPE_TABLE) ;            Send Field_Fill_List_Field_Table iField iObj iMsg
34437>>>>>>>    End_Procedure
34438>>>>>>>    
34438>>>>>>>    // Return the id of the validation table if one exists. Otherwise return
34438>>>>>>>    // a zero.
34438>>>>>>>    Function Field_Table_Object Integer iField Returns Integer
34440>>>>>>>        Integer iType
34440>>>>>>>        Integer iObj
34440>>>>>>>        Integer iBase
34440>>>>>>>        Move (iField * FA_COUNT) to iBase
34441>>>>>>>        Get Field_Validation_Type iField to iType
34442>>>>>>>        If (iType = FA_VALIDATION_TYPE_TABLE) ;            Get Value (iBase + FA_TABLE_OBJECT) to iObj
34445>>>>>>>        Function_Return iObj
34446>>>>>>>    End_Function
34447>>>>>>>    
34447>>>>>>>    // Procedure to set the range for a field. It will automatically set the
34447>>>>>>>    // validation type of the field as well.
34447>>>>>>>    Procedure Set Field_Value_Range Integer iField String sMin String sMax
34449>>>>>>>        Integer iBase
34449>>>>>>>        Move (iField * FA_COUNT) to iBase
34450>>>>>>>        Set Value (iBase + FA_MIN_VALUE) to sMin
34451>>>>>>>        Set Value (iBase + FA_MAX_VALUE) to sMax
34452>>>>>>>        Set Field_Validation_Type iField to FA_VALIDATION_TYPE_RANGE
34453>>>>>>>    End_Procedure
34454>>>>>>>    
34454>>>>>>>    // Function to check a fields value agains a given check string.
34454>>>>>>>    Function Validate_Field_Range Integer iField Returns Integer
34456>>>>>>>        String  sMin
34456>>>>>>>        String  sMax
34456>>>>>>>        String  sValue
34456>>>>>>>        Integer iField_Type
34456>>>>>>>        Integer iResult
34456>>>>>>>        Integer iFile
34456>>>>>>>        Integer iBase
34456>>>>>>>        Move (iField * FA_COUNT) to iBase
34457>>>>>>>        Get Value (iBase + FA_MIN_VALUE) to sMin
34458>>>>>>>        Get Value (iBase + FA_MAX_VALUE) to sMax
34459>>>>>>>        Delegate Get Field_Current_Value iField to sValue
34461>>>>>>>        Delegate Get Main_File to iFile
34463>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iField_Type
34466>>>>>>>        Move 0 to iResult
34467>>>>>>>        If (iField_Type=DF_ASCII) ;            Move (sValue < sMin or sValue > sMax) to iResult
34470>>>>>>>        Else If (iField_Type=DF_BCD) ;            Move (Number(sValue) < Number(sMin) or ;            Number(sValue) > Number(sMax)) to iResult
34474>>>>>>>        Else If (iField_Type=DF_DATE) ;            Move (Date(sValue) < Date(sMin) or Date(sValue) > Date(sMax)) to iResult
34478>>>>>>>        Else If (iField_Type=DF_DATETIME) ;            Move (Cast(sValue,DateTime) < Cast(sMin,DateTime) or Cast(sValue,DateTime) > Cast(sMax,DateTime)) to iResult
34482>>>>>>>        If iResult Begin
34484>>>>>>>            Delegate Send Field_Error iField DD_INVALID_RANGE sMin sMax
34486>>>>>>>            Function_Return 1
34487>>>>>>>        End
34487>>>>>>>>
34487>>>>>>>    End_Function
34488>>>>>>>    
34488>>>>>>>    // Callback to provide all valid value for this validation.
34488>>>>>>>    // Just call back with the two range values
34488>>>>>>>    Procedure Field_Fill_List_Field_Range Integer iField Integer iObj Integer iMsg
34490>>>>>>>        String  sMin
34490>>>>>>>        String  sMax
34490>>>>>>>        Integer iBase
34490>>>>>>>        Move (iField * FA_COUNT) to iBase
34491>>>>>>>        Get Value (iBase + FA_MIN_VALUE) to sMin
34492>>>>>>>        Get Value (iBase + FA_MAX_VALUE) to sMax
34493>>>>>>>        Send iMsg to iObj 0 sMin '' 0 (NullrowId())
34494>>>>>>>        Send iMsg to iObj 1 sMax '' 0 (NullrowId())
34495>>>>>>>    End_Procedure
34496>>>>>>>    
34496>>>>>>>    // Procedure to set the check for a field. It will automatically set the
34496>>>>>>>    // validation type of the field as well.
34496>>>>>>>    Procedure Set Field_Value_Check Integer iField String sCheck
34498>>>>>>>        Integer iBase
34498>>>>>>>        Move (iField * FA_COUNT) to iBase
34499>>>>>>>        Set Value (iBase + FA_CHECK_VALUE) to sCheck
34500>>>>>>>        //Set Value iBase to FA_VALIDATION_TYPE_CHECK
34500>>>>>>>        Set Field_Validation_Type iField to FA_VALIDATION_TYPE_CHECK
34501>>>>>>>    End_Procedure
34502>>>>>>>    
34502>>>>>>>    // Function to check a fields value agains a given check string.
34502>>>>>>>    Function Validate_Field_Check Integer iField Returns Integer
34504>>>>>>>        String  sCheck
34504>>>>>>>        String  sValue
34504>>>>>>>        Integer iBase
34504>>>>>>>        Integer iPos
34504>>>>>>>        Integer iLength
34504>>>>>>>        Integer iResult
34504>>>>>>>        Integer iFile
34504>>>>>>>        Move (iField * FA_COUNT) to iBase
34505>>>>>>>        Get Value (iBase + FA_CHECK_VALUE) to sCheck
34506>>>>>>>        Delegate Get Field_Current_Value iField to sValue
34508>>>>>>>        Delegate Get Main_File to iFile
34510>>>>>>>        Get_Attribute DF_FIELD_LENGTH of iFile iField to iLength
34513>>>>>>>        Move (Pad( sValue,iLength)) to sValue
34514>>>>>>>        // Replace the seperation characters with two of them so the user
34514>>>>>>>        // can't bypass the check by entering a seperation character.
34514>>>>>>>        Move (Replaces("|", sValue, "||")) to sValue
34515>>>>>>>        // Report an error if rules are violated.
34515>>>>>>>        Move (Pos( sValue, sCheck)) to iPos
34516>>>>>>>        If not iPos Begin
34518>>>>>>>            Delegate Send Field_Error iField DD_INVALID_CHECK sCheck
34520>>>>>>>            Function_Return 1
34521>>>>>>>        End
34521>>>>>>>>
34521>>>>>>>    End_Function
34522>>>>>>>    
34522>>>>>>>    // Callback to provide all valid value for this validation.
34522>>>>>>>    // Call back with all valid check values
34522>>>>>>>    Procedure Field_Fill_List_Field_Check Integer iField Integer iObj Integer iMsg
34524>>>>>>>        String  sCheck
34524>>>>>>>        Integer iBase
34524>>>>>>>        Integer iPos
34524>>>>>>>        Integer iItem
34524>>>>>>>        Move (iField * FA_COUNT) to iBase
34525>>>>>>>        Get Value (iBase + FA_CHECK_VALUE) to sCheck
34526>>>>>>>        Append sCheck "|"
34527>>>>>>>        Move (Pos( "|", sCheck)) to iPos
34528>>>>>>>        While iPos
34532>>>>>>>            If (iPos > 1) Begin
34534>>>>>>>                Send iMsg to iObj iItem (Left(sCheck,iPos-1)) '' 0 (NullrowId())
34535>>>>>>>                Increment iItem
34536>>>>>>>            End
34536>>>>>>>>
34536>>>>>>>            Move (Mid( sCheck, 255, iPos+1))  to sCheck
34537>>>>>>>            Move (Pos( "|", sCheck)) to iPos
34538>>>>>>>        Loop
34539>>>>>>>>
34539>>>>>>>    End_Procedure
34540>>>>>>>    
34540>>>>>>>    // Procedure to set up a checkbox field. We will store the TRUE and FALSE
34540>>>>>>>    // Values in the extended array.
34540>>>>>>>    Procedure Set Field_CheckBox_Values Integer iField String sTrue String sFalse
34542>>>>>>>        Integer iBase
34542>>>>>>>        Move (iField * FA_COUNT) to iBase
34543>>>>>>>        Set Value (iBase + FA_CHECKBOX_TRUE) to sTrue
34544>>>>>>>        Set Value (iBase + FA_CHECKBOX_FALSE) to sFalse
34545>>>>>>>        Set Field_Validation_Type iField to FA_VALIDATION_TYPE_CHECKBOX
34546>>>>>>>    End_Procedure
34547>>>>>>>    
34547>>>>>>>    // Return the Value associated with the field and its select-state.
34547>>>>>>>    Function Field_CheckBox_Value Integer iField Integer iState Returns String
34549>>>>>>>        Integer iBase
34549>>>>>>>        Integer iType
34549>>>>>>>        String sValue
34549>>>>>>>        Move (iField * FA_COUNT) to iBase
34550>>>>>>>        Get Field_Validation_Type iField to iType
34551>>>>>>>        If (iType <> FA_VALIDATION_TYPE_CHECKBOX) ;            Move iState to sValue
34554>>>>>>>        Else ;            Get Value (iBase + If(iState,FA_CHECKBOX_TRUE,FA_CHECKBOX_FALSE));            to sValue
34556>>>>>>>        Function_Return sValue
34557>>>>>>>    End_Function
34558>>>>>>>    
34558>>>>>>>    // Return the select_state based on the passed value and field
34558>>>>>>>    Function Field_Value_Select_State Integer iField String sValue Returns Integer
34560>>>>>>>        Integer iBase
34560>>>>>>>        Integer iType
34560>>>>>>>        String  sTrue
34560>>>>>>>        Integer iState
34560>>>>>>>        Integer iFile
34560>>>>>>>        Integer iField_Type
34560>>>>>>>        Move (iField * FA_COUNT) to iBase
34561>>>>>>>        Get Field_Validation_Type iField to iType
34562>>>>>>>        Get Value (iBase + FA_CHECKBOX_TRUE) to sTrue
34563>>>>>>>        If (iType <> FA_VALIDATION_TYPE_CHECKBOX) ;            Move (not(sValue=0 or sValue='')) to iState
34566>>>>>>>        Else Begin
34567>>>>>>>            Delegate Get Main_File to iFile
34569>>>>>>>            Get_Attribute DF_FIELD_TYPE of iFile iField to iField_Type
34572>>>>>>>            If (iField_Type = DF_BCD) ;                Move (Number(sValue)=Number(sTrue)) to iState
34575>>>>>>>            Else ; // DF_ASCII                Move (sValue=sTrue) to iState
34577>>>>>>>        End
34577>>>>>>>>
34577>>>>>>>        Function_Return iState
34578>>>>>>>    End_Function
34579>>>>>>>    
34579>>>>>>>    
34579>>>>>>>    // Check that the buffer value is one of the two checkbox values.
34579>>>>>>>    Function Validate_Field_Checkbox Integer iField Returns Integer
34581>>>>>>>        String  sTrue
34581>>>>>>>        String  sFalse
34581>>>>>>>        String  sValue
34581>>>>>>>        Integer iField_Type
34581>>>>>>>        Integer iResult
34581>>>>>>>        Integer iFile
34581>>>>>>>        Integer iBase
34581>>>>>>>        Move (iField * FA_COUNT) to iBase
34582>>>>>>>        Get Value (iBase + FA_CHECKBOX_TRUE) to sTrue
34583>>>>>>>        Get Value (iBase + FA_CHECKBOX_FALSE) to sFalse
34584>>>>>>>        Delegate Get Field_Current_Value iField to sValue
34586>>>>>>>        Delegate Get Main_File to iFile
34588>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iField_Type
34591>>>>>>>        Move 0 to iResult
34592>>>>>>>        If (iField_Type = DF_BCD) ;            Move (Number(sValue)=Number(sTrue) or ;            Number(sValue)=Number(sFalse)) to iResult
34595>>>>>>>        Else ; // DF_ASCII            Move (sValue=sTrue or sValue=sFalse) to iResult
34597>>>>>>>        If not iResult Begin
34599>>>>>>>            Delegate Send Field_Error iField DD_INVALID_CHECKBOX sTrue sFalse
34601>>>>>>>            Function_Return 1
34602>>>>>>>        End
34602>>>>>>>>
34602>>>>>>>    End_Function
34603>>>>>>>    
34603>>>>>>>    // Callback to provide all valid value for this validation.
34603>>>>>>>    // Just call back with the two true and false values
34603>>>>>>>    Procedure Field_Fill_List_Field_Checkbox Integer iField Integer iObj Integer iMsg
34605>>>>>>>        String  sTrue
34605>>>>>>>        String  sFalse
34605>>>>>>>        Integer iBase
34605>>>>>>>        Move (iField * FA_COUNT) to iBase
34606>>>>>>>        Get Value (iBase + FA_CHECKBOX_TRUE) to sTrue
34607>>>>>>>        Get Value (iBase + FA_CHECKBOX_FALSE) to sFalse
34608>>>>>>>        Send iMsg to iObj 0 sTrue '' 0 (NullrowId())
34609>>>>>>>        Send iMsg to iObj 1 sFalse '' 0 (NullrowId())
34610>>>>>>>    End_Procedure
34611>>>>>>>    
34611>>>>>>>    // The object keeps track of a validation table object. This table object
34611>>>>>>>    // can be any type of object must at a minimum understand a small message
34611>>>>>>>    // protocol (see xvaltbl.pkg for info)
34611>>>>>>>    Procedure Set Field_Value_Table Integer iField Integer iObj
34613>>>>>>>        Integer iBase
34613>>>>>>>        Move (iField * FA_COUNT) to iBase
34614>>>>>>>        Set Value (iBase + FA_TABLE_OBJECT) to iObj
34615>>>>>>>        Set Field_Validation_Type iField to FA_VALIDATION_TYPE_TABLE
34616>>>>>>>    End_Procedure
34617>>>>>>>    
34617>>>>>>>    // This valdates against a validation table if appropriate (if a table
34617>>>>>>>    // exists and the table's validate_State is T). It validates by passing
34617>>>>>>>    // the message validate_value to the validation table object
34617>>>>>>>    Function Validate_Field_Table Integer iField Returns Integer
34619>>>>>>>        Integer iBase
34619>>>>>>>        Integer iTableObj
34619>>>>>>>        String  sValue
34619>>>>>>>        Integer iResult
34619>>>>>>>        Move (iField * FA_COUNT) to iBase
34620>>>>>>>        Get Value (iBase + FA_TABLE_OBJECT) to iTableObj
34621>>>>>>>        If (iTableObj and Validate_State(iTableObj) ) Begin
34623>>>>>>>            Delegate Get Field_Current_Value iField to sValue
34625>>>>>>>            Get Validate_Value of iTableOBj sValue to iResult
34626>>>>>>>            If iResult ;                Delegate Send Field_Error iField DD_INVALID_VALUE_TABLE
34630>>>>>>>        End
34630>>>>>>>>
34630>>>>>>>        Function_Return iResult
34631>>>>>>>    End_Function
34632>>>>>>>    
34632>>>>>>>    // Callback to provide all valid value for this validation.
34632>>>>>>>    // Pass the request on to the validation table. This is the most common
34632>>>>>>>    // use of this.
34632>>>>>>>    Procedure Field_Fill_List_Field_Table Integer iField Integer iObj Integer iMsg
34634>>>>>>>        Integer iBase
34634>>>>>>>        Integer iTableObj
34634>>>>>>>        Move (iField * FA_COUNT) to iBase
34635>>>>>>>        Get Value (iBase + FA_TABLE_OBJECT) to iTableObj
34636>>>>>>>        If iTableObj ;            Send Request_Fill_From_List to iTableObj iObj iMsg
34639>>>>>>>    End_Procedure
34640>>>>>>>    
34640>>>>>>>    // Often extended valditation types can provide automatic prompt
34640>>>>>>>    // objects. If the extended type supports a prompt object and there is
34640>>>>>>>    // a global validation_list object, we will use it
34640>>>>>>>    Function Prompt_Object Integer iField Returns Integer
34642>>>>>>>        Integer iType
34642>>>>>>>        Integer iObj
34642>>>>>>>        Get Field_Validation_Type iField to iType
34643>>>>>>>        If not (iType=FA_VALIDATION_TYPE_NONE or iType=FA_VALIDATION_TYPE_RANGE) ;            Move DD_Global_Validation_Prompt_Object to iObj
34646>>>>>>>        Function_Return iObj
34647>>>>>>>    End_Function
34648>>>>>>>    
34648>>>>>>>    
34648>>>>>>>End_Class
34649>>>>>>>
34649>>>>>>>
34649>>>>>>>
34649>>>>>>>// use to keep track of file field pairs such as system file file/field
34649>>>>>>>Struct tDDFileField
34649>>>>>>>    Integer iFile
34649>>>>>>>    Integer iField
34649>>>>>>>End_Struct
34649>>>>>>>
34649>>>>>>>Class Field_Mask_Array is an Array
34650>>>>>>>    
34650>>>>>>>    Function Array_Name Integer iField Integer iType Returns String
34652>>>>>>>        String sName
34652>>>>>>>        Move (iField*FMA_COUNT+iType) to iField
34653>>>>>>>        If (Item_Count(Self)>iField) ;            Get value iField to sName
34656>>>>>>>        // sometimes an array value that is undefined returns a 0, we must change this to ''
34656>>>>>>>        If (sName = '0') ;            Move '' to sName
34659>>>>>>>        Function_Return sName
34660>>>>>>>    End_Function
34661>>>>>>>    
34661>>>>>>>    
34661>>>>>>>    Procedure Set Field_Mask_Type Integer iField Integer iType
34663>>>>>>>        Set Value (iField*FMA_COUNT+FMA_MASK_TYPE) to iType
34664>>>>>>>    End_Procedure
34665>>>>>>>    
34665>>>>>>>    Function Field_Mask_Type Integer iField Returns Integer
34667>>>>>>>        Integer iType
34667>>>>>>>        Move (iField*FMA_COUNT+FMA_MASK_TYPE) to iField
34668>>>>>>>        If (Item_Count(Self)>iField) ;            Get value iField to iType
34671>>>>>>>        Function_Return iType
34672>>>>>>>    End_Function
34673>>>>>>>    
34673>>>>>>>    Procedure Set Field_Mask_Value_State Integer iField Integer iState
34675>>>>>>>        Set Value (iField*FMA_COUNT+FMA_MASK_VALUE_STATE) to iState
34676>>>>>>>    End_Procedure
34677>>>>>>>    
34677>>>>>>>    Function Field_Mask_Value_State Integer iField Returns Integer
34679>>>>>>>        Integer iState
34679>>>>>>>        Move (iField*FMA_COUNT+FMA_MASK_VALUE_STATE) to iField
34680>>>>>>>        If (Item_Count(Self)>iField) ;            Get value iField to iState
34683>>>>>>>        Function_Return iState
34684>>>>>>>    End_Function
34685>>>>>>>    
34685>>>>>>>    Procedure Set Field_Mask Integer iField String sMask
34687>>>>>>>        Set Value (iField*FMA_COUNT+FMA_MASK) to sMask
34688>>>>>>>    End_Procedure
34689>>>>>>>    
34689>>>>>>>    Function Field_Mask Integer iField Returns String
34691>>>>>>>        Function_Return (Array_Name(Self,iField,FMA_MASK))
34692>>>>>>>    End_Function
34693>>>>>>>    
34693>>>>>>>    Procedure Set Field_Label_Short Integer iField String sName
34695>>>>>>>        Set Value (iField*FMA_COUNT+FMA_SHORT_NAME) to sName
34696>>>>>>>    End_Procedure
34697>>>>>>>    
34697>>>>>>>    Function Field_Label_Short Integer iField Returns String
34699>>>>>>>        Function_Return (Array_Name(Self,iField,FMA_SHORT_NAME))
34700>>>>>>>    End_Function
34701>>>>>>>    
34701>>>>>>>    Procedure Set Field_Label_Long Integer iField String sName
34703>>>>>>>        Set Value (iField*FMA_COUNT+FMA_LONG_NAME) to sName
34704>>>>>>>    End_Procedure
34705>>>>>>>    
34705>>>>>>>    Function Field_Label_Long Integer iField Returns String
34707>>>>>>>        Function_Return (Array_Name(Self,iField,FMA_LONG_NAME))
34708>>>>>>>    End_Function
34709>>>>>>>    
34709>>>>>>>    Procedure Set Field_Class_Name Integer iField String sName
34711>>>>>>>        Set Value (iField*FMA_COUNT+FMA_CLASS_NAME) to sName
34712>>>>>>>    End_Procedure
34713>>>>>>>    
34713>>>>>>>    Function Field_Class_Name Integer iField Returns String
34715>>>>>>>        Function_Return (Array_Name(Self,iField,FMA_CLASS_NAME))
34716>>>>>>>    End_Function
34717>>>>>>>    
34717>>>>>>>    Procedure Set Field_WebPrompt_Object Integer iField Handle hoPrompt
34719>>>>>>>        Set Value (iField*FMA_COUNT+FMA_WEBPROMPTOBJECT) to hoPrompt
34720>>>>>>>    End_Procedure
34721>>>>>>>    
34721>>>>>>>    Function Field_WebPrompt_Object Integer iField Returns Handle
34723>>>>>>>        Function_Return (Array_Name(Self,iField,FMA_WEBPROMPTOBJECT))
34724>>>>>>>    End_Function
34725>>>>>>>    
34725>>>>>>>End_Class
34726>>>>>>>
34726>>>>>>>Class DataDictionary is a DataSet
34727>>>>>>>    
34727>>>>>>>    Procedure Construct_Object
34729>>>>>>>        Forward Send Construct_Object
34731>>>>>>>        
34731>>>>>>>        Property String  Existing_Key_Value                           ""
34732>>>>>>>        Property Integer Protect_Key_State                            True
34733>>>>>>>        
34733>>>>>>>        Property String  Key_Fields                                   ""
34734>>>>>>>        
34734>>>>>>>        // These are added to support the checking of DSO connections
34734>>>>>>>        // during deletes and saves. Only the first two properties are Public
34734>>>>>>>        Property Integer Validate_Save_Structure_Mode   DD_Validate_Structure_Once
34735>>>>>>>        Property Integer Validate_Delete_Structure_Mode DD_Validate_Structure_Once
34736>>>>>>>        Property Integer Save_Structure_Validated_State              False
34737>>>>>>>        Property Integer Cascade_Delete_Structure_Validated_State    False
34738>>>>>>>        Property Integer No_Cascade_Delete_Structure_Validated_State False
34739>>>>>>>        
34739>>>>>>>        Property Integer Last_Mark_Sequence_Id                       0
34740>>>>>>>        
34740>>>>>>>        // These are added for optimized traversal of
34740>>>>>>>        // entry-update and validation and maybe more
34740>>>>>>>        Property String  Visited_Fields          ""
34741>>>>>>>        Property Integer Visited_State           False
34742>>>>>>>        // means will be part of a downward delete (cascade deletable). This only has meaning
34742>>>>>>>        // when cascade_delete_state is True
34742>>>>>>>        Property Boolean DownDelete_State        False
34743>>>>>>>        
34743>>>>>>>        // these are set by the define_auto_increment, which is obsolete and has been replaced
34743>>>>>>>        // the Set Field_auto_increment method.
34743>>>>>>>        Property Integer Auto_Increment_Source_File  0
34744>>>>>>>        Property Integer Auto_Increment_Source_Field 0
34745>>>>>>>        Property Integer Auto_Increment_Dest_Field   0
34746>>>>>>>        
34746>>>>>>>        // used by the set Field_auto_increment method
34746>>>>>>>        // these are split into two arrays to make searching for the field easier
34746>>>>>>>        // the arrays should always be synched.
34746>>>>>>>        Property Integer[] pAutoIncrementFields
34747>>>>>>>        Property tDDFileField[] pAutoIncrementSysFileFields
34748>>>>>>>        
34748>>>>>>>        // Error Reporting Related
34748>>>>>>>        // If DD_Error_No_Report errors would be supressed (only ERR gets set)
34748>>>>>>>        Property Integer Error_Report_Mode           DD_Error_Report
34749>>>>>>>        
34749>>>>>>>        // During validation, this is the field being validated.
34749>>>>>>>        Property Integer Current_Validate_Field      0
34750>>>>>>>        
34750>>>>>>>        // when errors are redirected locally this maintains the original handler.
34750>>>>>>>        Property Integer Old_Error_Object_Id         0
34751>>>>>>>        
34751>>>>>>>        // Must be provided if local error handler is to be created
34751>>>>>>>        Property Integer Error_Processing_State      0
34752>>>>>>>        
34752>>>>>>>        // These should be changed most carefully and possible only and the
34752>>>>>>>        // DSO level. These allow you to defeat full field validation which
34752>>>>>>>        // makes it easier to corrupt data! Validate_DEO_Only_State limits
34752>>>>>>>        // save validation to DEOs (which is what data-sets have always done).
34752>>>>>>>        // Validate_foreign_File_State will skip validation under the following
34752>>>>>>>        // conditions: 1) DSO if for a parent (it did not originate the save).
34752>>>>>>>        //
34752>>>>>>>        Property Integer Validate_DEOs_Only_State    False
34753>>>>>>>        Property Integer Validate_Foreign_File_State True
34754>>>>>>>        // if set true, a field validation requested started with this
34754>>>>>>>        // DD will check all fields, even in an error is encountered
34754>>>>>>>        Property Integer Validate_All_Fields_State   False
34755>>>>>>>        
34755>>>>>>>        // If true, all entry updates will occur through the DD. Else
34755>>>>>>>        // saves occur through the DD and find occur through the DEOs
34755>>>>>>>        Property Integer EntryUpdateLocalState True // changed from false to true in 17.0
34756>>>>>>>        
34756>>>>>>>        // can be used by Refind_records method (remote refind of recs). Obsolete. Use prFindRowId
34756>>>>>>>        Property Integer Find_Record_Id 0
34757>>>>>>>        
34757>>>>>>>        // can be used by Refind_records method (remote refind of recs)
34757>>>>>>>        Property RowID prFindRowId (NullRowId())
34758>>>>>>>        // can be used by Refind_records method (remote refind of recs)
34758>>>>>>>        Property tDDChangedInfo pDDChangedInfo
34759>>>>>>>        
34759>>>>>>>        // Private: Id of field_objects container. This is not created until needed
34759>>>>>>>        Property Integer Field_Objects 0
34760>>>>>>>        
34760>>>>>>>        // Public: If set the DDO will never be foreign, allowing
34760>>>>>>>        // you to create new parents when a child is saved. This would
34760>>>>>>>        // normally only be set within the DDO and not the class. This would be
34760>>>>>>>        // used where a child table wants to save the parent (header) when the
34760>>>>>>>        // first child is saved. It would disable the foreign key and index
34760>>>>>>>        // find_Req and required settings (as well as any displayonly).
34760>>>>>>>        Property Integer Allow_Foreign_New_Save_State False
34761>>>>>>>        
34761>>>>>>>        Set pbDDAttach to True // set false to get (very) old attach_main_file_behavior
34762>>>>>>>        Set pbSmartRelate to True // Only relate if parent is attached via a DDO
34763>>>>>>>        
34763>>>>>>>        // If this is an alias file, this is the master file it is based on
34763>>>>>>>        Property Handle piMasterTable 0
34764>>>>>>>        
34764>>>>>>>        Property tDDServerInformation[] pServerInformation
34765>>>>>>>        
34765>>>>>>>        Property tDDRemembered[] pDDDefaults
34766>>>>>>>        
34766>>>>>>>        Property Boolean pbInSuperFind False
34767>>>>>>>        
34767>>>>>>>        // Create the local buffer.
34767>>>>>>>        Object Record_Buffer is a cRecordBuffer
34769>>>>>>>        End_Object
34770>>>>>>>        
34770>>>>>>>        // Create the extended field attributes array.
34770>>>>>>>        Object Field_Attributes is a Field_Attributes
34772>>>>>>>        End_Object
34773>>>>>>>        
34773>>>>>>>        // Create an array to maintain Status help values for each field
34773>>>>>>>        Object Statushelp_Array is an array
34775>>>>>>>        End_Object
34776>>>>>>>        
34776>>>>>>>        Object FieldMask_Array is an Field_Mask_array
34778>>>>>>>        End_Object
34779>>>>>>>        
34779>>>>>>>        
34779>>>>>>>        // keep track of all system/unknown files that must be set to
34779>>>>>>>        // default for smart file mode to work right.
34779>>>>>>>        Object System_File_obj is an Array
34781>>>>>>>        End_Object
34782>>>>>>>        
34782>>>>>>>        // used during Request_Validate
34782>>>>>>>        Property Handle[] pDDsWithFindReqErrors
34783>>>>>>>        
34783>>>>>>>        // Apply SQL filters in constrained finds
34783>>>>>>>        Property Boolean pbUseDDSQLFilters False
34784>>>>>>>        // If pbUseDDSQLFilters is true, this determines if the table global filter should be applied as well
34784>>>>>>>        Property Boolean pbApplyGlobalSQLFilters False
34785>>>>>>>        // Filter which will get applied before each DDO constrained find. If "", no filter is applied
34785>>>>>>>        Property String psSQLFilter ""
34786>>>>>>>        
34786>>>>>>>        // Old values for SQL Filters which are pushed and popped by StoreSQLDefaultFilters and RestoreSQLDefaultFilters
34786>>>>>>>        Property String psOldFilter ""
34787>>>>>>>        Property Boolean pbOldFilterActive
34788>>>>>>>        Property Boolean pbOldFilterEq
34789>>>>>>>        
34789>>>>>>>        // used to point to the composite child object that provides the SQL
34789>>>>>>>        // interfaces for a driver. This can be used with DAW drivers. Other drivers may require
34789>>>>>>>        // that you sub-class your DD and create a different object based on a custom class
34789>>>>>>>        Property Handle phoSQLHelper (Create(Self,RefClass(cDAWSQLDriverHelper)))
34790>>>>>>>        
34790>>>>>>>        
34790>>>>>>>        Property Handle pbInResync False
34791>>>>>>>        
34791>>>>>>>        Property Integer piPrimaryIndex -1      // Indicates the unique index used by the webapp view state system (-1 defaults to the primary key or recnum for embedded).
34792>>>>>>>        
34792>>>>>>>        Set Smart_FileMode_State to True  // extended DSOs should default to true
34793>>>>>>>        
34793>>>>>>>        Send Define_Fields // Developer Hook - define all field rules
34794>>>>>>>    End_Procedure
34795>>>>>>>    
34795>>>>>>>    // Returns 1 to indicate that this is a DD class.
34795>>>>>>>    Function Extended_DSO_State Returns Integer
34797>>>>>>>        Function_Return 1
34798>>>>>>>    End_Function
34799>>>>>>>    
34799>>>>>>>    
34799>>>>>>>    // Used to set up all XDS functions and rules. Called by construct_object
34799>>>>>>>    // and considered a bit more user friendly.
34799>>>>>>>    Procedure Define_Fields
34801>>>>>>>    End_Procedure
34802>>>>>>>    
34802>>>>>>>    
34802>>>>>>>    
34802>>>>>>>    // This message has been augmented to create a local recordbuffer for a
34802>>>>>>>    // file. We cannot do this earlier because we need the file to count the
34802>>>>>>>    // number of necessary fields.
34802>>>>>>>    Procedure Set Main_File Integer iFile
34804>>>>>>>        Integer iCurrent_File iMaster
34804>>>>>>>        Get piMasterTable to iMaster
34805>>>>>>>        If iMaster Begin
34807>>>>>>>            // is an alias condition
34807>>>>>>>            Forward Set Main_File to iFile
34809>>>>>>>            Send ReDefineAliasItems to (Record_Buffer(Self)) iFile
34810>>>>>>>        End
34810>>>>>>>>
34810>>>>>>>        Else If iFile Begin
34813>>>>>>>            Get Main_File to iCurrent_File
34814>>>>>>>            If (iCurrent_File and iCurrent_File <> iFile) Begin
34816>>>>>>>                Send Data_Set_Error -1 DFERR_PROGRAM DD_CANNOT_CHANGE_MAIN_FILE
34817>>>>>>>                Procedure_Return
34818>>>>>>>            End
34818>>>>>>>>
34818>>>>>>>            Forward Set Main_File to iFile
34820>>>>>>>            Send Create_Items to (Record_Buffer(Self)) iFile
34821>>>>>>>            Send Create_Items to (Field_Attributes(Self))
34822>>>>>>>        End
34822>>>>>>>>
34822>>>>>>>    End_Procedure
34823>>>>>>>    
34823>>>>>>>    // This procedure will update the Key_Fields property to include or
34823>>>>>>>    // excluded the fieldnumber passed in the list of fieldnumbers which make
34823>>>>>>>    // up an keyvalue.
34823>>>>>>>    Procedure Set Key_Field_State Integer iField Integer iState
34825>>>>>>>        String  sKeys
34825>>>>>>>        Set Key_Field_State of Record_Buffer iField to iState
34826>>>>>>>        Get Key_Fields to sKeys
34827>>>>>>>        Set Key_Fields to (Overstrike(If(iState, "X", " "), sKeys, iField))
34828>>>>>>>    End_Procedure
34829>>>>>>>    
34829>>>>>>>    // Will return TRUE if the field passed has been defined as a key.
34829>>>>>>>    Function Key_Field_State Integer iField Returns Integer
34831>>>>>>>        Integer iState
34831>>>>>>>        Get Key_Field_State of Record_Buffer iField to iState
34832>>>>>>>        Function_Return iState
34833>>>>>>>    End_Function
34834>>>>>>>    
34834>>>>>>>    // Returns complete key value.
34834>>>>>>>    Function Key_Value Returns String
34836>>>>>>>        String  sKeys
34836>>>>>>>        String  sKey_Value
34836>>>>>>>        String  sValue
34836>>>>>>>        Integer iField
34836>>>>>>>        Get Key_Fields to sKeys
34837>>>>>>>        Move "" to sKey_Value
34838>>>>>>>        Repeat
34838>>>>>>>>
34838>>>>>>>            Move (Pos( "X",sKeys)) to iField
34839>>>>>>>            If iField Begin
34841>>>>>>>                Get Field_Current_Value iField to sValue
34842>>>>>>>                Append sKey_Value sValue
34843>>>>>>>                Move (Overstrike(" ", sKeys, iField)) to sKeys
34844>>>>>>>            End
34844>>>>>>>>
34844>>>>>>>        Until not iField
34846>>>>>>>        Function_Return sKey_Value
34847>>>>>>>    End_Function
34848>>>>>>>    
34848>>>>>>>    // This procedure will be called whenever the Data_Set changes its
34848>>>>>>>    // Current_Record property, or after a Save, Delete or Clear operation.
34848>>>>>>>    // We send this message to the Record_Buffer object to update its values.
34848>>>>>>>    Procedure New_Current_Record Integer iOld Integer iNew
34850>>>>>>>        // does nothing, but exists if developer is using this for some purpose. Is called after
34850>>>>>>>        // OnNewCurrentRecord (if recnum based table)
34850>>>>>>>    End_Procedure
34851>>>>>>>    
34851>>>>>>>    Procedure OnNewCurrentRecord RowID riOld RowID riNew
34853>>>>>>>        Integer iObj
34853>>>>>>>        Integer iOldst
34853>>>>>>>        Integer iFoc
34853>>>>>>>        Integer iIsExt
34853>>>>>>>        Forward Send OnNewCurrentRecord riOld riNew
34855>>>>>>>        Move (Record_Buffer(Self)) to iObj
34856>>>>>>>        If iObj Begin
34858>>>>>>>            Send OnNewCurrentRecord of iObj riOld riNew
34859>>>>>>>            // must also refresh all defined extended fields
34859>>>>>>>            Send ExtendedFieldsRefresh (IsNullRowId(riNew)) // pass bCleared (true if a clear)
34860>>>>>>>            Get Focus of Desktop to iFoc
34861>>>>>>>            Get Extended_DEO_State of iFoc to iIsExt     // if focus is deo item
34862>>>>>>>            If iIsExt Begin                               // disable the state so
34864>>>>>>>                Get Entry_Refresh_State of iFoc to iOldSt // value will come
34865>>>>>>>                Set Entry_Refresh_State of iFoc to True   // from Local buffer.
34866>>>>>>>            End
34866>>>>>>>>
34866>>>>>>>            Set Existing_Key_Value to (Key_Value(Self))
34867>>>>>>>            If iIsExt ;                Set Entry_Refresh_State of iFoc to iOldSt
34870>>>>>>>            // Only set defaults when the record is new
34870>>>>>>>            If (IsNullRowId(riNew)) ;                Send Prepare_Default_Values
34873>>>>>>>        End
34873>>>>>>>>
34873>>>>>>>    End_Procedure
34874>>>>>>>    
34874>>>>>>>    // Shuts off change mode and sends initialize_default_values which is
34874>>>>>>>    // a user hook routine.
34874>>>>>>>    Procedure Prepare_Default_Values
34876>>>>>>>        Integer iOldState
34876>>>>>>>        Get Change_disabled_State to iOldState
34877>>>>>>>        Set Change_disabled_State to True
34878>>>>>>>        Send Private_Field_Defaults
34879>>>>>>>        // set defaults if this is the main DDO or the DDO is
34879>>>>>>>        // flagged as supporting saving new records when foreign (a parent)
34879>>>>>>>        If (Operation_Origin=Self or ;            Allow_Foreign_New_Save_State(Self)) ;            Send Field_Defaults
34882>>>>>>>        Send AssignDynamicDefaults
34883>>>>>>>        Set Change_disabled_State to iOldState
34884>>>>>>>    End_Procedure
34885>>>>>>>    
34885>>>>>>>    // Set all checkbox fields to default to False data value.
34885>>>>>>>    Procedure Private_Field_Defaults
34887>>>>>>>        Integer iField
34887>>>>>>>        Repeat
34887>>>>>>>>
34887>>>>>>>            Get Next_Validation_Type of (Field_Attributes(Self)) ;                FA_VALIDATION_TYPE_CHECKBOX iField to iField
34888>>>>>>>            If (iField = 0) ;                Procedure_Return
34891>>>>>>>            Set Field_Select_State  iField to False
34892>>>>>>>            Set Field_Changed_State iField to True
34893>>>>>>>        Loop
34894>>>>>>>>
34894>>>>>>>    End_Procedure
34895>>>>>>>    
34895>>>>>>>    // Will be called after a clear operation to let the application
34895>>>>>>>    // programmer set the default values for the record. This should be done
34895>>>>>>>    // by sending SET Field_Current_Value.
34895>>>>>>>    Procedure Field_Defaults
34897>>>>>>>    End_Procedure
34898>>>>>>>    
34898>>>>>>>    // Pass type and string value and see if this is valid data for this
34898>>>>>>>    // type. Currently we check for numbers and dates. Return non-zero
34898>>>>>>>    // if invalid.
34898>>>>>>>    Function IsDataInvalid Integer iType String sValue Returns Integer
34900>>>>>>>        Date    dVal
34900>>>>>>>        DateTime dtVal
34900>>>>>>>        Number  nVal
34900>>>>>>>        Integer bOK
34900>>>>>>>        Boolean bInvalid
34900>>>>>>>        
34900>>>>>>>        Move False to bInvalid
34901>>>>>>>        If (iType=DF_BCD or iType=DF_DATE or iType=DF_DATETIME) Begin
34903>>>>>>>            If (iType=DF_DATE) Begin
34905>>>>>>>                MoveTrapErr sValue to dVal
34906>>>>>>>                Move (Err) to bInvalid
34907>>>>>>>            End
34907>>>>>>>>
34907>>>>>>>            Else If (iType=DF_DATETIME) Begin
34910>>>>>>>                MoveTrapErr sValue to dtVal
34911>>>>>>>                Move (Err) to bInvalid
34912>>>>>>>//          Move (not(IsDateValid(dtVal))) to bInvalid //jjt-uncomment when working
34912>>>>>>>            End
34912>>>>>>>>
34912>>>>>>>            Else Begin
34913>>>>>>>                MoveTrapErr sValue to nVal // this may gen an error.
34914>>>>>>>                Move (Err) to bInvalid
34915>>>>>>>            End
34915>>>>>>>>
34915>>>>>>>            Move False to Err
34916>>>>>>>        End
34916>>>>>>>>
34916>>>>>>>        Function_Return bInvalid
34917>>>>>>>    End_Function
34918>>>>>>>    
34918>>>>>>>    // Return 1 if the passed DEO is part of the DDs list of connected DEOs
34918>>>>>>>    // First check if server of DEO is this DD. If so, we are owned. If not
34918>>>>>>>    // we must check the DD's UI DEO list.
34918>>>>>>>    // The passed object MUST be a valid DEO or an error will occur.
34918>>>>>>>    Function IsDEOOwned Integer iDEO Returns Integer
34920>>>>>>>        Integer iMax iCount
34920>>>>>>>        // if DEOs server is same as current DD it is owned. This is the
34920>>>>>>>        // fast check
34920>>>>>>>        If (Server(iDEO)=Self) ;            Function_Return 1
34923>>>>>>>        // else see if the DEO is in the DD's DEO list
34923>>>>>>>        Get Data_Set_User_Interface_Count to iMax
34924>>>>>>>        Decrement iMax
34925>>>>>>>        For iCount from 0 to iMax
34931>>>>>>>>
34931>>>>>>>            If (Data_Set_User_Interface(Self,iCount)=iDEO) ;                Function_Return 1
34934>>>>>>>        Loop
34935>>>>>>>>
34935>>>>>>>        Function_Return 0
34936>>>>>>>    End_Function
34937>>>>>>>    
34937>>>>>>>    // This procedure changes the field value of the given field in the
34937>>>>>>>    // record-buffer object.
34937>>>>>>>    // It also sends Field_Value_Changed to notify every the attached DEOs.
34937>>>>>>>    // This has been optimized so this message is only sent when data is
34937>>>>>>>    // actually changed.
34937>>>>>>>    Procedure Set Field_Current_Value Integer iField String sValue
34939>>>>>>>        Integer iObj
34939>>>>>>>        String sOldVal
34939>>>>>>>        Integer iChanged
34939>>>>>>>        Integer iType
34939>>>>>>>        Integer iFile
34939>>>>>>>        Integer iFocObj
34939>>>>>>>        Integer iCrnt
34939>>>>>>>        Integer bInvalid
34939>>>>>>>        Integer iIdentity
34939>>>>>>>        Address pData
34939>>>>>>>        Integer iLen
34939>>>>>>>        
34939>>>>>>>        Get Main_File to iFile
34940>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
34943>>>>>>>        
34943>>>>>>>        // Overlap fields are not supported directly in DDs. It is expected
34943>>>>>>>        // that you will use the underlying fields instead
34943>>>>>>>        If (iType = DF_OVERLAP) Begin
34945>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_OVERLAP_ERROR
34946>>>>>>>            Procedure_Return
34947>>>>>>>        End
34947>>>>>>>>
34947>>>>>>>        
34947>>>>>>>        If (iType=DF_TEXT or iType=DF_BINARY) Begin // if text or binary direct to pointer
34949>>>>>>>            Move sValue to sValue // intentional code: make sure passed sValue is a really string
34950>>>>>>>            Move (SizeOfString(sValue)) to iLen // length to copy
34951>>>>>>>            Move (AddressOf(sValue)) to pData   // first byte of string
34952>>>>>>>            // will gen error if ext. field does not exist
34952>>>>>>>            Set Field_Current_Pointer_Value iField iLen to pData
34953>>>>>>>            Procedure_Return
34954>>>>>>>        End
34954>>>>>>>>
34954>>>>>>>        
34954>>>>>>>        
34954>>>>>>>        // If date or number, force conversion so any error is detected before
34954>>>>>>>        // the buffer is updated. We don't want the record buffer to contain
34954>>>>>>>        // invalid data
34954>>>>>>>        Get IsDataInvalid iType sValue to bInvalid
34955>>>>>>>        If bInvalid ;         // If an error occurred we have            Procedure_Return  // a bad number or a bad date. Do no more!
34958>>>>>>>        
34958>>>>>>>        Move (Record_Buffer(Self)) to iObj
34959>>>>>>>        Get Value of iObj iField to sOldVal
34960>>>>>>>        
34960>>>>>>>        Set Value of iObj iField to sValue
34961>>>>>>>        
34961>>>>>>>        // Augmented to handle non DF databases JJT
34961>>>>>>>        // Some tables may use some field other then recnum for their record identity.
34961>>>>>>>        // This will be dfrecnum or some other numeric field. When this happens the DD have
34961>>>>>>>        // to field buffers for the same value. When an update occurs from the DD to the DB buffer
34961>>>>>>>        // an update can occur twice. If the values are the same, this does not matter. Else the highest
34961>>>>>>>        // field value will get the update (not recnum). So if someone changes recnum but not its real field
34961>>>>>>>        // finding may not work right. The DD is updated when a record is found and the API keeps the two values
34961>>>>>>>        // the same. If the user changes recnum, the real field does not get changed. That is what we are fixing
34961>>>>>>>        // here. Note that: 1) this has no effect on Dataflex databases (or any DB that has a 0 field recnum).
34961>>>>>>>        // 2) this type of update is rarely seen anyway (you have to change just the recnum and perform an entry_update).
34961>>>>>>>        //
34961>>>>>>>        // if field is recnum and record identity is not 0, we must also update the other field.
34961>>>>>>>        If (iField=0) Begin
34963>>>>>>>            Get_Attribute DF_FILE_RECORD_IDENTITY of iFile to iIdentity
34966>>>>>>>            If (iIdentity>0) ;                Set Value of iObj iIdentity to sValue
34969>>>>>>>        End
34969>>>>>>>>
34969>>>>>>>        
34969>>>>>>>        // When data-sets are working they should not update the
34969>>>>>>>        // DEOs.
34969>>>>>>>        
34969>>>>>>>        // prior to vdf7, we stopped all operation modes of non-zero. We now allow
34969>>>>>>>        // validates to pass through and we have a new operation mode for this. This
34969>>>>>>>        // should be ok, since we already allowed navigation validation through - we just
34969>>>>>>>        // stopped request_validate validations.
34969>>>>>>>        If (Operation_Mode=0 or Operation_Mode=MODE_VALIDATING) Begin
34971>>>>>>>            If (iType=DF_BCD) ;                Move (Number(sValue)<>Number(sOldVal)) to iChanged
34974>>>>>>>            Else If (iType=DF_DATE) ;                Move (Date(sValue)<>Date(sOldVal)) to iChanged
34978>>>>>>>            Else If (iType=DF_DATETIME) ;                Move (Cast(sValue,DateTime)<>Cast(sOldVal,DateTime)) to iChanged
34982>>>>>>>            Else ;                Move (sValue<>sOldVal) to iChanged
34984>>>>>>>            // if changed, notify all DEOs of this change
34984>>>>>>>            If iChanged ;                Send Field_Value_Changed iField sValue
34987>>>>>>>            Else Begin
34988>>>>>>>                // If here the set value did not change the contents of the DD.
34988>>>>>>>                // However, it is possible that the current focus DEO may contain
34988>>>>>>>                // a different value than the one we are setting. In such a case
34988>>>>>>>                // we must re-synchronize the DEO. Only the one DEO can be affected
34988>>>>>>>                // because it is the current focus deo/item that can contain a value
34988>>>>>>>                // that is not yet updated in the DD. This fixes a bug where the
34988>>>>>>>                // iexit was setting a value which was different from what was in
34988>>>>>>>                // the DEO but was the same as the old DD value (iExit is called
34988>>>>>>>                // before the DD is re-synched with the DEO). This could happen
34988>>>>>>>                // also by sending this message directly with a different value in
34988>>>>>>>                // the DEO focus item.
34988>>>>>>>                Get Focus of Desktop to iFocObj
34989>>>>>>>                // similar logic to Get Field_Current_Value. We check that the DEO
34989>>>>>>>                // is extended, that entry_refresh is not disabled and that the
34989>>>>>>>                // DEO's server is this DD.
34989>>>>>>>                If ( Extended_DEO_State(iFocObj) and ;                    (Entry_Refresh_State(iFocObj)=0)) Begin
34991>>>>>>>                    Get Current_item of iFocObj to iCrnt
34992>>>>>>>                    // If Focus DEO has same file and field and it is not checkbox
34992>>>>>>>                    // we must set its value. Set local value directly sets the value
34992>>>>>>>                    // in the DEO item. If we used value we'd get recursion!
34992>>>>>>>                    If ( Data_File(iFocObj,iCrnt)=iFile and ;                        Data_Field(iFocObj,iCrnt)=iField and ;                        IsDEOOwned(Self,iFocObj) and ;                        Checkbox_item_State(iFocObj,iCrnt)=0 ) ;                        Send File_Field_Value_Changed to iFocObj iFile iField sValue True
34995>>>>>>>                    //Set Local_Value of iFocObj iCrnt to sValue
34995>>>>>>>                End
34995>>>>>>>>
34995>>>>>>>            End
34995>>>>>>>>
34995>>>>>>>        End
34995>>>>>>>>
34995>>>>>>>    End_Procedure
34996>>>>>>>    
34996>>>>>>>    // Sets Field_Current_Value and Sets Field_Changed_State for passed field.
34996>>>>>>>    Procedure Set Field_Changed_Value Integer iField String sValue
34998>>>>>>>        Set Field_Changed_State iField to True
34999>>>>>>>        Set Field_Current_Value iField to sValue
35000>>>>>>>    End_Procedure
35001>>>>>>>    
35001>>>>>>>    
35001>>>>>>>    // This should only be set by a DEO that is changing a NoPut value. This should only happen when NoEnter=F
35001>>>>>>>    // for indexed findable noput deos. With foreign-field noputs we may store the value and update them
35001>>>>>>>    // for finds but we don't want them for saves. The cDDBuffer class handles this but it needs to
35001>>>>>>>    // know if this was a DEO NoPut update. DDOs have always allowed you to directly update foreign NoPut
35001>>>>>>>    // fields when the change did not come from a DEO.
35001>>>>>>>    Procedure Set Field_NoPutValueChangedByDeo Integer iField Boolean bChange
35003>>>>>>>        Set Item_ChangedByDeo of Record_Buffer iField to bChange
35004>>>>>>>    End_Procedure
35005>>>>>>>    
35005>>>>>>>    Procedure Set File_Field_NoPutValueChangedByDeo Integer iFile Integer iField Boolean bChange
35007>>>>>>>        Integer iDSO
35007>>>>>>>        Get Data_set iFile to iDSO
35008>>>>>>>        If iDSO Begin
35010>>>>>>>            Set Field_NoPutValueChangedByDeo of iDSO iField to bChange
35011>>>>>>>        End
35011>>>>>>>>
35011>>>>>>>    End_Procedure
35012>>>>>>>    
35012>>>>>>>    // Returns the value from the record buffer for the field of which the
35012>>>>>>>    // fieldnumber has been passed.
35012>>>>>>>    // If the file/field requested is the focus file/field the use the DEO's
35012>>>>>>>    // value.
35012>>>>>>>    Function Field_Current_Value Integer iField Returns String
35014>>>>>>>        Integer iType
35014>>>>>>>        Integer iFile
35014>>>>>>>        String  sValue
35014>>>>>>>        Integer iFoc
35014>>>>>>>        Integer iCrnt
35014>>>>>>>        Integer iFldSize iVoid
35014>>>>>>>        UChar[] UCData
35015>>>>>>>        
35015>>>>>>>        Get Focus of desktop to iFoc
35016>>>>>>>        Get Main_File to iFile
35017>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
35020>>>>>>>        
35020>>>>>>>        // Overlap fields are not supported directly in DDs. It is expected
35020>>>>>>>        // that you will use the underlying fields instead
35020>>>>>>>        If (iType=DF_OVERLAP) Begin
35022>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_OVERLAP_ERROR
35023>>>>>>>            Function_Return ''
35024>>>>>>>        End
35024>>>>>>>>
35024>>>>>>>        
35024>>>>>>>        If (iType=DF_TEXT or iType=DF_BINARY) Begin // if overlap, text or binary direct to pointer
35026>>>>>>>            Get Field_Current_UCAValue iField to UCData
35027>>>>>>>            
35027>>>>>>>            // we assume a string is passed here. If we return to a string the
35027>>>>>>>            // pointer message will convert this to a string. Check that max string
35027>>>>>>>            // length is not larger than Max_Argument_Size has been removed.
35027>>>>>>>            Move (SizeOfArray(UCData)) to iFldSize
35028>>>>>>>            Move (UCharArrayToString(UCData)) to sValue
35029>>>>>>>            // This function has always returned the value as a 0 delimited string.
35029>>>>>>>            // Therefore trim at first zero. This means that you should not use this method
35029>>>>>>>            // with Binary types as embedded zeros will cause a truncation.
35029>>>>>>>            Move (CString(sValue)) to sValue
35030>>>>>>>            Function_Return sValue
35031>>>>>>>        End
35031>>>>>>>>
35031>>>>>>>        
35031>>>>>>>        // This was extended to also make sure that the focus's server
35031>>>>>>>        // is this DD. This prevent the (very unlikely) case of a focus
35031>>>>>>>        // file/field being the right file/field but for a different view.
35031>>>>>>>        // 12.1: Also check operation mode, if within an operation assume that the
35031>>>>>>>        // ddos have the information they need from the deos. During a refresh we don't
35031>>>>>>>        // the data to be taken from a DEO - the DD buffer has the information you want. Note that
35031>>>>>>>        // we also changed all methods that set operation_mode to update the DD with the current
35031>>>>>>>        // DEO field, so the buffer is always correct.
35031>>>>>>>        If ( (OPERATION_MODE=MODE_WAITING) and ;            Extended_DEO_State(iFoc) and (Entry_Refresh_State(iFoc)=0) ) Begin
35033>>>>>>>            Get Current_item of iFoc to iCrnt
35034>>>>>>>            If ( Data_File(iFoc,iCrnt)=iFile and Data_Field(iFoc,iCrnt)=iField and ;                IsDEOOwned(Self,iFoc) and ;                (Checkbox_item_State(iFoc,iCrnt)=0) ) Begin
35036>>>>>>>                Get Data_Value of iFoc iCrnt to sValue
35037>>>>>>>            End
35037>>>>>>>>
35037>>>>>>>            Else Begin
35038>>>>>>>                Get Value of (Record_Buffer(Self)) iField to sValue
35039>>>>>>>            End
35039>>>>>>>>
35039>>>>>>>        End
35039>>>>>>>>
35039>>>>>>>        Else Begin
35040>>>>>>>            Get Value of (Record_Buffer(Self)) iField to sValue
35041>>>>>>>        End
35041>>>>>>>>
35041>>>>>>>        
35041>>>>>>>        // cast value to the proper datatype
35041>>>>>>>        If (iType=DF_BCD) Begin
35043>>>>>>>            Function_Return (Number(sValue))
35044>>>>>>>        End
35044>>>>>>>>
35044>>>>>>>        Else If (iType=DF_DATE) Begin
35047>>>>>>>            Function_Return (Date(sValue))
35048>>>>>>>        End
35048>>>>>>>>
35048>>>>>>>        Else If (iType=DF_DATETIME) Begin
35051>>>>>>>            Function_Return (Cast(sValue,DateTime))
35052>>>>>>>        End
35052>>>>>>>>
35052>>>>>>>        // else return as string
35052>>>>>>>        Function_Return sValue
35053>>>>>>>    End_Function
35054>>>>>>>    
35054>>>>>>>    // This sets a default value without setting the DSO's changed_State
35054>>>>>>>    Procedure Set Field_Default_Value Integer iField String sValue
35056>>>>>>>        Integer iOldState
35056>>>>>>>        Get Change_disabled_State to iOldState
35057>>>>>>>        Set Change_disabled_State to True
35058>>>>>>>        Set Field_Changed_Value iField to sValue
35059>>>>>>>        Set Change_disabled_State to iOldState
35060>>>>>>>    End_Procedure
35061>>>>>>>    
35061>>>>>>>    Procedure Set File_Field_default_Value Integer iFile Integer iField String sValue
35063>>>>>>>        Integer iDSO
35063>>>>>>>        Get Data_set iFile to iDSO
35064>>>>>>>        If iDSO ;            Set Field_default_Value of iDSO iField to sValue
35067>>>>>>>    End_Procedure
35068>>>>>>>    
35068>>>>>>>    // Methods to set and get the value of a field. When set all DSOs and
35068>>>>>>>    // DEOs are notified.
35068>>>>>>>    Procedure Set File_Field_Current_Value Integer iFile Integer iField String sValue
35070>>>>>>>        Integer iDSO
35070>>>>>>>        Get Data_set iFile to iDSO
35071>>>>>>>        If iDSO ;            Set Field_Current_Value of iDSO iField to sValue
35074>>>>>>>    End_Procedure
35075>>>>>>>    
35075>>>>>>>    Procedure Set File_Field_Changed_Value Integer iFile Integer iField String sValue
35077>>>>>>>        Integer iDSO
35077>>>>>>>        Get Data_set iFile to iDSO
35078>>>>>>>        If iDSO ;            Set Field_Changed_Value of iDSO iField to sValue
35081>>>>>>>    End_Procedure
35082>>>>>>>    
35082>>>>>>>    Function File_Field_Current_Value Integer iFile Integer iField Returns String
35084>>>>>>>        Integer iDSO
35084>>>>>>>        String sValue
35084>>>>>>>        Get Data_set iFile to iDSO
35085>>>>>>>        If iDSO ;            Get Field_Current_Value of iDSO iField to sValue
35088>>>>>>>        Function_Return sValue
35089>>>>>>>    End_Function
35090>>>>>>>    
35090>>>>>>>    // This procedure will notify every attached DEO that the value of a
35090>>>>>>>    // field has been changed. Every DEO needs to update its value to reflect
35090>>>>>>>    // the new value.
35090>>>>>>>    Procedure Field_Value_Changed Integer iField String sValue
35092>>>>>>>        Integer iMax
35092>>>>>>>        Integer iCount
35092>>>>>>>        Integer iDEO
35092>>>>>>>        Integer iMain_File
35092>>>>>>>        Integer iNoChange
35092>>>>>>>        Get Change_Disabled_State to iNoChange
35093>>>>>>>        Get Main_File to iMain_File
35094>>>>>>>        Get Data_Set_User_Interface_Count to iMax
35095>>>>>>>        Decrement iMax
35096>>>>>>>        For iCount from 0 to iMax
35102>>>>>>>>
35102>>>>>>>            Get Data_Set_User_Interface iCount to iDEO
35103>>>>>>>            If (Extended_DEO_State(iDEO) ) Begin
35105>>>>>>>                Send File_Field_Value_Changed to iDEO iMain_File iField sValue iNoChange
35106>>>>>>>            End
35106>>>>>>>>
35106>>>>>>>        Loop
35107>>>>>>>>
35107>>>>>>>    End_Procedure
35108>>>>>>>    
35108>>>>>>>    // Gets/Sets Field_Changed_State of the passed field. Will Set Changed_
35108>>>>>>>    // state if appropriate (if change_disabled_state is false)
35108>>>>>>>    Function Field_Changed_State Integer iField Returns Integer
35110>>>>>>>        Function_Return ;            (Item_Changed_State(Record_Buffer(Self), iField))
35111>>>>>>>    End_Function
35112>>>>>>>    
35112>>>>>>>    
35112>>>>>>>    // Handle NoPut here. If the field is noput set the field_changed_State but do not set the
35112>>>>>>>    // DD's changed_state. As of 17.0, we changed the rule so that noput DEOs always update the DD.
35112>>>>>>>    // They set the field_Current_value and they set the field_changed_state. If noput they will
35112>>>>>>>    // not set changed_state. This now makes windows and web consistent.
35112>>>>>>>    Procedure Set Field_Changed_State Integer iField Integer iState
35114>>>>>>>        Boolean bNoPut bOldSt bIsCommitted
35114>>>>>>>        
35114>>>>>>>        Get Field_Option iField DD_NOPUT to bNoPut
35115>>>>>>>        If not bNoPut Begin // if not noput, see if this is a committed and therefore noput
35117>>>>>>>            Get IsCommitted to bIsCommitted
35118>>>>>>>            If bIsCommitted Begin
35120>>>>>>>                Get IsFieldCommitted iField to bNoPut
35121>>>>>>>            End
35121>>>>>>>>
35121>>>>>>>        End
35121>>>>>>>>
35121>>>>>>>        
35121>>>>>>>        If bNoPut Begin
35123>>>>>>>            Get Change_disabled_State to bOldSt
35124>>>>>>>            Set Change_disabled_State to True
35125>>>>>>>        End
35125>>>>>>>>
35125>>>>>>>        
35125>>>>>>>        Set Item_Changed_State of (Record_Buffer(Self)) iField to iState
35126>>>>>>>        // the cDDBuffer class item_changed_state does not attempt to set
35126>>>>>>>        // changed_state, so we do it here. This will allow for future
35126>>>>>>>        // greater flexibilities.
35126>>>>>>>        If (iState) Begin
35128>>>>>>>            Set Changed_State of (Record_Buffer(Self)) to True
35129>>>>>>>        End
35129>>>>>>>>
35129>>>>>>>        If bNoPut Begin
35131>>>>>>>            Set Change_disabled_State to bOldSt
35132>>>>>>>        End
35132>>>>>>>>
35132>>>>>>>        
35132>>>>>>>    End_Procedure
35133>>>>>>>    
35133>>>>>>>    // As above, but passes both file and field
35133>>>>>>>    Function File_Field_Changed_State Integer iFile Integer iField Returns Integer
35135>>>>>>>        Integer iDSO
35135>>>>>>>        Get Data_Set iFile to iDSO
35136>>>>>>>        If iDSO ;            Function_Return (Field_Changed_State(iDSO, iField))
35139>>>>>>>    End_Function
35140>>>>>>>    
35140>>>>>>>    Procedure Set File_Field_Changed_State Integer iFile Integer iField Integer iState
35142>>>>>>>        Integer iDSO
35142>>>>>>>        Get Data_Set iFile to iDSO
35143>>>>>>>        If iDSO ;            Set Field_Changed_State of iDSO iField to iState
35146>>>>>>>    End_Procedure
35147>>>>>>>    
35147>>>>>>>    // This simulates entering a value into a field from a keyboard. Pass the
35147>>>>>>>    // Field and DD Options and the value. It is up to you to pass the proper
35147>>>>>>>    // DD options. This is normally sent by File_Field_Entry and you are
35147>>>>>>>    // advised to use that message and not this one.
35147>>>>>>>    Procedure Set Field_Entry Integer iField Integer iOpts Integer bShowErr String sValue
35149>>>>>>>        Integer iFile
35149>>>>>>>        Integer iType
35149>>>>>>>        Integer bChanged
35149>>>>>>>        Integer bInvalid
35149>>>>>>>        Integer hObj
35149>>>>>>>        String sOldVal
35149>>>>>>>        Address pData
35149>>>>>>>        Integer iLen
35149>>>>>>>        
35149>>>>>>>        Get Main_File to iFile
35150>>>>>>>        
35150>>>>>>>        // if No-enter or Displayonly, this shouldn't be changed. We will
35150>>>>>>>        // let NoPut through, since a user might need it for finding.
35150>>>>>>>        If (iOpts iand DD_NOENTER) ;            Procedure_Return
35153>>>>>>>        
35153>>>>>>>        // Force a caplsock if required
35153>>>>>>>        If (iOpts iand DD_CAPSLOCK) ;            Move (Uppercase(sValue)) to sValue
35156>>>>>>>        
35156>>>>>>>        // If date or number, force conversion so any error is detected before
35156>>>>>>>        // the buffer is updated. We don't want the record buffer to contain
35156>>>>>>>        // invalid data
35156>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
35159>>>>>>>        
35159>>>>>>>        // Overlap fields are not supported directly in DDs. It is expected
35159>>>>>>>        // that you will use the underlying fields instead
35159>>>>>>>        If (iType = DF_OVERLAP) Begin
35161>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_OVERLAP_ERROR
35162>>>>>>>            Procedure_Return
35163>>>>>>>        End
35163>>>>>>>>
35163>>>>>>>        
35163>>>>>>>        If (iType=DF_TEXT or iType=DF_BINARY) Begin // if text or binary direct to pointer
35165>>>>>>>            Move sValue to sValue // intentional code: make sure passed sValue is a really string
35166>>>>>>>            Move (SizeOfString(sValue)) to iLen // length to copy
35167>>>>>>>            Move (AddressOf(sValue)) to pData   // first byte of string
35168>>>>>>>            // will gen error if ext. field does not exist
35168>>>>>>>            Set Field_Pointer_Entry iField iOpts iLen bShowErr to pData
35169>>>>>>>            Procedure_Return
35170>>>>>>>        End
35170>>>>>>>>
35170>>>>>>>        
35170>>>>>>>        Get IsDataInvalid iType sValue to bInvalid
35171>>>>>>>        If bInvalid Begin     // If an error occurred we have
35173>>>>>>>            If bShowErr ;                Send Data_set_error iField (If(iType=DF_DATE or iType=DF_DATETIME, DFERR_ENTER_VALID_DATE, DFERR_BAD_ENTRY)) ;                (" ("-sValue-")")
35176>>>>>>>            Procedure_Return  // a bad number or a bad date. Do no more!
35177>>>>>>>        End
35177>>>>>>>>
35177>>>>>>>        // update the value only if the value is changed.
35177>>>>>>>        Move (Record_Buffer(Self)) to hObj
35178>>>>>>>        Get Value of hObj iField to sOldVal
35179>>>>>>>        If (iType=DF_BCD) ;            Move (Number(sValue)<>Number(sOldVal)) to bChanged
35182>>>>>>>        Else If (iType=DF_DATE) ;            Move (Date(sValue)<>Date(sOldVal)) to bChanged
35186>>>>>>>        Else If (iType=DF_DATETIME) ;            Move (Cast(sValue,DateTime)<>Cast(sOldVal,DateTime)) to bChanged
35190>>>>>>>        Else ;            Move (sValue<>sOldVal) to bChanged
35192>>>>>>>        
35192>>>>>>>        // if changed or force put, update the value.
35192>>>>>>>        If ( bChanged or (iOpts iand DD_FORCEPUT) ) ;            Set Field_Current_Value iField to sValue
35195>>>>>>>        
35195>>>>>>>        // Set changed state if changed. This is an improvement on DEOs which would set changed-state for
35195>>>>>>>        // a no-put. Set Field_Changed_State will not set Changed_state if it is noput
35195>>>>>>>        If ( bChanged) Begin
35197>>>>>>>            Set Field_Changed_State iField to True
35198>>>>>>>            // if noput (but not noenter) we must tell the DDO that this should not be
35198>>>>>>>            // updated during a save.
35198>>>>>>>            If (iOpts iand DD_NOPUT) Begin
35200>>>>>>>                Set Field_NoPutValueChangedByDeo iField to True
35201>>>>>>>            End
35201>>>>>>>>
35201>>>>>>>        End
35201>>>>>>>>
35201>>>>>>>        
35201>>>>>>>        // perform autofinds if needed. Note that required checking will occur as
35201>>>>>>>        // part of validation.
35201>>>>>>>        // We will only autofind if the field value is changed. This is consistent with
35201>>>>>>>        // DEOs which do not autofind on unchanged values. This provides optimizations
35201>>>>>>>        // when a parent record is already loaded.
35201>>>>>>>        If (bChanged or Field_Changed_state(Self,iField)) Begin
35203>>>>>>>            // note that autofind is 1 and _ge is 100000001 (8th bit set). So order of
35203>>>>>>>            // testing is important and make sure we test for exact bit match. Must first
35203>>>>>>>            // test _GE and the EQ (because EQ bit is part of GE)
35203>>>>>>>            If ((iOpts iand DD_AUTOFIND_GE)=DD_AUTOFIND_GE) ;                Send File_Field_AutoFind iFile iField GE
35206>>>>>>>            Else If ((iOpts iand DD_AUTOFIND)=DD_AUTOFIND) ;                Send File_Field_AutoFind iFile iField EQ
35210>>>>>>>        End
35210>>>>>>>>
35210>>>>>>>        
35210>>>>>>>    End_Procedure
35211>>>>>>>    
35211>>>>>>>    // This returns file-field options for a Field_Entry type of environment.
35211>>>>>>>    // It will strip autofind from main-file DDs but leave foreign field alone.
35211>>>>>>>    // This is needed for Field_entry. Otherwise adding a field value to an autofind
35211>>>>>>>    // for save or find causes an autofind to trigger first which either causes the
35211>>>>>>>    // wrong rec to save or for a double find.
35211>>>>>>>    Function File_Field_Entry_Options Integer iFile Integer iField Returns Integer
35213>>>>>>>        Integer iOpts
35213>>>>>>>        // this will get the appropriate field and foreign field opts
35213>>>>>>>        Get File_Field_Options iFile iField to iOpts
35214>>>>>>>        // If the main file (not foreign) we will strip autofind. Autofind should not
35214>>>>>>>        // be an automatic part of main file entry while it should with foreign fields.
35214>>>>>>>        If (iFile=Main_File(Self)) Begin
35216>>>>>>>            // note that autofind is 1 and _ge is 100000001 (8th bit set). So order of
35216>>>>>>>            // testing is important and make sure we test for exact bit match. Must first
35216>>>>>>>            // test _GE and the EQ (because EQ bit is part of GE)
35216>>>>>>>            If ((iOpts iand DD_AUTOFIND_GE)=DD_AUTOFIND_GE) ;                Move (iOpts - DD_AUTOFIND_GE) to iOpts
35219>>>>>>>            Else If ((iOpts iand DD_AUTOFIND)=DD_AUTOFIND)  ;                Move (iOpts - DD_AUTOFIND)    to iOpts
35223>>>>>>>        End
35223>>>>>>>>
35223>>>>>>>        Function_Return iOpts
35224>>>>>>>    End_Function
35225>>>>>>>    
35225>>>>>>>    // This simulates entering a value into a field from a keyboard. The DD
35225>>>>>>>    // receiving this message determines if it is Main or Foreign (just like
35225>>>>>>>    // server). It will do an uppercase, will respect No_Enter and DisplayOnly
35225>>>>>>>    // and will do a autofind if required. It does not do a field validation.
35225>>>>>>>    Procedure Set File_Field_Entry Integer iFile Integer iField Integer bShowErr String sValue
35227>>>>>>>        Integer iOpts
35227>>>>>>>        Integer hDD
35227>>>>>>>        Get Data_Set iFile to hDD
35228>>>>>>>        If hDD Begin
35230>>>>>>>            // this will get the appropriate field and foreign field opts
35230>>>>>>>            Get File_Field_Entry_Options iFile iField to iOpts
35231>>>>>>>            Set Field_Entry of hDD iField iOpts bShowErr to sValue
35232>>>>>>>        End
35232>>>>>>>>
35232>>>>>>>    End_Procedure
35233>>>>>>>    
35233>>>>>>>    // return object ID of extended field, 0 if none
35233>>>>>>>    Function Field_Object Integer iField Returns Integer
35235>>>>>>>        Integer hoFlds hoField
35235>>>>>>>        Boolean bAutoAssign
35235>>>>>>>        Get Field_Objects to hoFlds
35236>>>>>>>        If hoFlds Begin
35238>>>>>>>            Get Field_Object of hoFlds iField to hoField
35239>>>>>>>        End
35239>>>>>>>>
35239>>>>>>>        If not hoField Begin
35241>>>>>>>            Send DefineExtendedField iField // will create field_objects and Field_Object as needed
35242>>>>>>>            Get Field_Objects to hoFlds
35243>>>>>>>            Get Field_Object of hoFlds iField to hoField
35244>>>>>>>        End
35244>>>>>>>>
35244>>>>>>>        Function_Return hoField
35245>>>>>>>    End_Function
35246>>>>>>>    
35246>>>>>>>    // This is the same as Field_entry except the value is passed via a
35246>>>>>>>    // pointer. If data-type is extended (text/binary) it will use and an
35246>>>>>>>    // extended field object to handle this. If date/number/string we will
35246>>>>>>>    // convert this to a string and use Field_Entry. It is the caller's
35246>>>>>>>    // responsibility to pass a valid pointer to valid data...else !@#$%^&^
35246>>>>>>>    // If an extended Field object is needed and not defined, an error is
35246>>>>>>>    // returned. If pointer is null, assume empty string passed (this is a
35246>>>>>>>    // change as of 8.3 - it used to ignore null pointers)
35246>>>>>>>    Procedure Set Field_Pointer_Entry Integer iField Integer iOpts Integer iLen Integer bShowErr Address pData
35248>>>>>>>        Integer hFld
35248>>>>>>>        String  sValue
35248>>>>>>>        Integer iFile
35248>>>>>>>        Integer iType
35248>>>>>>>        
35248>>>>>>>        Get Main_file to iFile
35249>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
35252>>>>>>>        
35252>>>>>>>        // Overlap fields are not supported directly in DDs. It is expected
35252>>>>>>>        // that you will use the underlying fields instead
35252>>>>>>>        If (iType = DF_OVERLAP) ;            Send Data_set_Error iField DFERR_PROGRAM  DD_EXTENDED_OVERLAP_ERROR
35255>>>>>>>        Else If (iType=DF_TEXT or iType=DF_BINARY) Begin
35258>>>>>>>            Get Field_Object iField to hFld // the object that handles this large text
35259>>>>>>>            If hFld ;                Set Field_pEntry of hFld iOpts iLen bShowErr to pData
35262>>>>>>>            Else ;                Send Data_set_Error iField DFERR_PROGRAM  DD_EXTENDED_FIELD_NOT_DEFINED
35264>>>>>>>        End
35264>>>>>>>>
35264>>>>>>>        Else Begin
35265>>>>>>>            // if number,date or string convert the pointer data to
35265>>>>>>>            // string data and do a normal entry with it.
35265>>>>>>>            Move (PointerToString(pData)) to sValue
35266>>>>>>>            Set Field_Entry iField iOpts bShowErr to sValue
35267>>>>>>>        End
35267>>>>>>>>
35267>>>>>>>    End_Procedure
35268>>>>>>>    
35268>>>>>>>    // This is the same as File_Field_entry except the value is passed via a
35268>>>>>>>    // pointer. See Field_Pointer_Entry for more on this
35268>>>>>>>    Procedure Set File_Field_Pointer_Entry Integer iFile Integer iField Integer iLen Integer bShowErr Address pData
35270>>>>>>>        Integer iOpts
35270>>>>>>>        Integer hDD
35270>>>>>>>        Get Data_Set iFile to hDD
35271>>>>>>>        If hDD Begin
35273>>>>>>>            // this will get the appropriate field and foreign field opts
35273>>>>>>>            Get File_Field_Entry_Options iFile iField to iOpts
35274>>>>>>>            Set Field_Pointer_Entry of hDD iField iOpts iLen bShowErr to pData
35275>>>>>>>        End
35275>>>>>>>>
35275>>>>>>>    End_Procedure
35276>>>>>>>    
35276>>>>>>>    // This is the same as Field_Current_Value except the value is passed via
35276>>>>>>>    // a pointer. If data-type is extended (text/binary) it will use and an
35276>>>>>>>    // extended field object to handle this. If date/number/string we will
35276>>>>>>>    // convert this to a string and use Field_Entry. It is the caller's
35276>>>>>>>    // responsibility to pass a valid pointer to valid data...else !@#$%^&^
35276>>>>>>>    // If an extended Field object is needed and not defined, an error is
35276>>>>>>>    // returned. If pointer is null, assume empty string passed (this is a
35276>>>>>>>    // change as of 8.3 - it used to ignore null pointers)
35276>>>>>>>    Procedure Set Field_Current_Pointer_Value Integer iField Integer iLen Address pData
35278>>>>>>>        Integer hFld
35278>>>>>>>        String  sValue
35278>>>>>>>        Integer iFile iType iCrnt
35278>>>>>>>        Handle iFocObj
35278>>>>>>>        Boolean bChanged
35278>>>>>>>        
35278>>>>>>>        Get Main_file to iFile
35279>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
35282>>>>>>>        
35282>>>>>>>        // Overlap fields are not supported directly in DDs. It is expected
35282>>>>>>>        // that you will use the underlying fields instead
35282>>>>>>>        If (iType = DF_OVERLAP) Begin
35284>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_OVERLAP_ERROR
35285>>>>>>>            Procedure_Return
35286>>>>>>>        End
35286>>>>>>>>
35286>>>>>>>        
35286>>>>>>>        If (iType<>DF_TEXT and iType<>DF_BINARY) Begin
35288>>>>>>>            // if number,date or string convert the pointer data to
35288>>>>>>>            // string data and do a normal entry with it.
35288>>>>>>>            Move (PointerToString(pData)) to sValue  // create string from pointer data
35289>>>>>>>            Set Field_Current_Value iField to sValue
35290>>>>>>>            Procedure_Return
35291>>>>>>>        End
35291>>>>>>>>
35291>>>>>>>        
35291>>>>>>>        Get Field_Object iField to hFld // the object that handles this large text
35292>>>>>>>        If not hFld Begin
35294>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_FIELD_NOT_DEFINED
35295>>>>>>>            Procedure_Return
35296>>>>>>>        End
35296>>>>>>>>
35296>>>>>>>        
35296>>>>>>>        Get Is_pValueChanged of hFld iLen pData to bChanged
35297>>>>>>>        If bChanged Begin
35299>>>>>>>            Set Field_pValue of hFld iLen to pData
35300>>>>>>>            Send Field_Pointer_Value_Changed iField pData
35301>>>>>>>        End
35301>>>>>>>>
35301>>>>>>>        Else Begin
35302>>>>>>>            // If here the set value did not change the contents of the DD.
35302>>>>>>>            // However, it is possible that the current focus DEO may contain
35302>>>>>>>            // a different value than the one we are setting. In such a case
35302>>>>>>>            // we must re-synchronize the DEO. Only the one DEO can be affected
35302>>>>>>>            // because it is the current focus deo/item that can contain a value
35302>>>>>>>            // that is not yet updated in the DD. This fixes a bug where the
35302>>>>>>>            // iexit was setting a value which was different from what was in
35302>>>>>>>            // the DEO but was the same as the old DD value (iExit is called
35302>>>>>>>            // before the DD is re-synched with the DEO). This could happen
35302>>>>>>>            // also by sending this message directly with a different value in
35302>>>>>>>            // the DEO focus item.
35302>>>>>>>            Get Focus of Desktop to iFocObj
35303>>>>>>>            // similar logic to Get Field_Pointer_Current_Value. We check that the DEO
35303>>>>>>>            // is extended, that entry_refresh is not disabled and that the
35303>>>>>>>            // DEO's server is this DD.
35303>>>>>>>            If ( Extended_DEO_State(iFocObj) and (Entry_Refresh_State(iFocObj)=0)) Begin
35305>>>>>>>                // If Focus DEO has same file and field and it is not checkbox
35305>>>>>>>                // we must set its value. Set local value directly sets the value
35305>>>>>>>                // in the DEO item. If we used value we'd get recursion!
35305>>>>>>>                Get Current_item of iFocObj to iCrnt
35306>>>>>>>                If ( Data_File(iFocObj,iCrnt)=iFile and ;                    Data_Field(iFocObj,iCrnt)=iField and ;                    IsDEOOwned(Self,iFocObj) ) Begin
35308>>>>>>>                    Send File_Field_Pointer_Value_Changed to iFocObj iFile iField pData True
35309>>>>>>>                End
35309>>>>>>>>
35309>>>>>>>            End
35309>>>>>>>>
35309>>>>>>>        End
35309>>>>>>>>
35309>>>>>>>    End_Procedure
35310>>>>>>>    
35310>>>>>>>    // This is never called but it needed for the compiler. Required for apps DDs that don't compile in a DEO interface
35310>>>>>>>    Procedure File_Field_Pointer_Value_Changed Integer iFile Integer iField Address pValue Integer iChangeDisabled
35312>>>>>>>    End_Procedure
35313>>>>>>>    
35313>>>>>>>    Procedure Field_Pointer_Value_Changed Integer iField Address pValue
35315>>>>>>>        Integer iMax
35315>>>>>>>        Integer iCount
35315>>>>>>>        Integer iDEO
35315>>>>>>>        Integer iMain_File
35315>>>>>>>        Integer iNoChange
35315>>>>>>>        Get Change_Disabled_State to iNoChange
35316>>>>>>>        Get Main_File to iMain_File
35317>>>>>>>        Get Data_Set_User_Interface_Count to iMax
35318>>>>>>>        Decrement iMax
35319>>>>>>>        For iCount from 0 to iMax
35325>>>>>>>>
35325>>>>>>>            Get Data_Set_User_Interface iCount to iDEO
35326>>>>>>>            If (Extended_DEO_State(iDEO) ) Begin
35328>>>>>>>                Send File_Field_Pointer_Value_Changed to iDEO iMain_File iField pValue iNoChange
35329>>>>>>>            End
35329>>>>>>>>
35329>>>>>>>        Loop
35330>>>>>>>>
35330>>>>>>>    End_Procedure
35331>>>>>>>    
35331>>>>>>>    // This is the same as File_Field_Current_Value except the value is passed
35331>>>>>>>    // via a pointer. See Field_current_Pointer_Value for more on this
35331>>>>>>>    Procedure Set File_Field_Current_Pointer_Value Integer iFile Integer iField Integer iLen Address pData
35333>>>>>>>        Integer hDD
35333>>>>>>>        Get Data_Set iFile to hDD
35334>>>>>>>        If hDD ;            Set Field_Current_Pointer_Value of hDD iField iLen to pData
35337>>>>>>>    End_Procedure
35338>>>>>>>    
35338>>>>>>>    // This returns the data pointer to the extended field. At this point
35338>>>>>>>    // this is the data. Be careful if you change the data, be even more
35338>>>>>>>    // careful if you change the pointer (don't do it!!!!)
35338>>>>>>>    Function Field_Current_Pointer_Value Integer iField Returns Address
35340>>>>>>>        Integer hFld
35340>>>>>>>        Handle iFoc
35340>>>>>>>        
35340>>>>>>>        Get Field_Object iField to hFld // the object that handles this large text
35341>>>>>>>        If not hFld Begin
35343>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_FIELD_NOT_DEFINED
35344>>>>>>>            Function_Return 0
35345>>>>>>>        End
35345>>>>>>>>
35345>>>>>>>        
35345>>>>>>>        
35345>>>>>>>        // This was extended to also make sure that the focus's server
35345>>>>>>>        // is this DD. This prevent the (very unlikely) case of a focus
35345>>>>>>>        // file/field being the right file/field but for a different view.
35345>>>>>>>        // 12.1: Also check operation mode, if within an operation assume that the
35345>>>>>>>        // ddos have the information they need from the deos. During a refresh we don't
35345>>>>>>>        // the data to be taken from a DEO - the DD buffer has the information you want. Note that
35345>>>>>>>        // we also changed all methods that set operation_mode to update the DD with the current
35345>>>>>>>        // DEO field, so the buffer is always correct.
35345>>>>>>>        Get Focus of Desktop to iFoc
35346>>>>>>>        If ( (OPERATION_MODE=MODE_WAITING) and ;            Extended_DEO_State(iFoc) and (Entry_Refresh_State(iFoc)=0) ) Begin
35348>>>>>>>            If ( Data_File(iFoc,0)=Main_File(Self) and Data_Field(iFoc,0)=iField and ;                IsDEOOwned(Self,iFoc) ) Begin
35350>>>>>>>                Send Update_Focus_Field
35351>>>>>>>            End
35351>>>>>>>>
35351>>>>>>>        End
35351>>>>>>>>
35351>>>>>>>        
35351>>>>>>>        Function_Return (FieldPointer(hFld))
35352>>>>>>>    End_Function
35353>>>>>>>    
35353>>>>>>>    
35353>>>>>>>    Function Field_Current_UCAValue Integer iField Returns UChar[]
35355>>>>>>>        Integer hFld
35355>>>>>>>        Handle iFoc
35355>>>>>>>        UChar[] Data
35356>>>>>>>        
35356>>>>>>>        Get Field_Object iField to hFld // the object that handles this large text
35357>>>>>>>        If not hFld Begin
35359>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_FIELD_NOT_DEFINED
35360>>>>>>>            Function_Return 0
35361>>>>>>>        End
35361>>>>>>>>
35361>>>>>>>        
35361>>>>>>>        
35361>>>>>>>        // This was extended to also make sure that the focus's server
35361>>>>>>>        // is this DD. This prevent the (very unlikely) case of a focus
35361>>>>>>>        // file/field being the right file/field but for a different view.
35361>>>>>>>        // 12.1: Also check operation mode, if within an operation assume that the
35361>>>>>>>        // ddos have the information they need from the deos. During a refresh we don't
35361>>>>>>>        // the data to be taken from a DEO - the DD buffer has the information you want. Note that
35361>>>>>>>        // we also changed all methods that set operation_mode to update the DD with the current
35361>>>>>>>        // DEO field, so the buffer is always correct.
35361>>>>>>>        Get Focus of Desktop to iFoc
35362>>>>>>>        If ( (OPERATION_MODE=MODE_WAITING) and ;            Extended_DEO_State(iFoc) and (Entry_Refresh_State(iFoc)=0) ) Begin
35364>>>>>>>            If ( Data_File(iFoc,0)=Main_File(Self) and Data_Field(iFoc,0)=iField and ;                IsDEOOwned(Self,iFoc) ) Begin
35366>>>>>>>                Send Update_Focus_Field
35367>>>>>>>            End
35367>>>>>>>>
35367>>>>>>>        End
35367>>>>>>>>
35367>>>>>>>        Get FieldArray of hFld to Data
35368>>>>>>>        Function_Return Data
35369>>>>>>>    End_Function
35370>>>>>>>    
35370>>>>>>>    Function File_Field_Current_Pointer_Value Integer iFile Integer iField Returns Address
35372>>>>>>>        Address pValue
35372>>>>>>>        Integer hDD
35372>>>>>>>        Get Data_Set iFile to hDD
35373>>>>>>>        If hDD Begin
35375>>>>>>>            Get Field_Current_Pointer_Value of hDD iField to pValue // return pointer to first byte of
35376>>>>>>>            Function_Return pValue                                  // data
35377>>>>>>>        End
35377>>>>>>>>
35377>>>>>>>    End_Function
35378>>>>>>>    
35378>>>>>>>    Procedure Set Field_Current_UCAValue Integer iField UChar[] Data
35380>>>>>>>        Set Field_Current_Pointer_Value iField (SizeOfArray(Data)) to (AddressOf(Data))
35381>>>>>>>    End_Procedure
35382>>>>>>>    
35382>>>>>>>    Procedure Set File_Field_Current_UCAValue Integer iFile Integer iField UChar[] Data
35384>>>>>>>        Integer hDD
35384>>>>>>>        Get Data_Set iFile to hDD
35385>>>>>>>        If hDD Begin
35387>>>>>>>            Set Field_Current_UCAValue of hDD iField to Data
35388>>>>>>>        End
35388>>>>>>>>
35388>>>>>>>    End_Procedure
35389>>>>>>>    
35389>>>>>>>    Function File_Field_Current_UCAValue Integer iFile Integer iField Returns UChar[]
35391>>>>>>>        UChar[] UCValue
35392>>>>>>>        Handle hDD
35392>>>>>>>        Get Data_Set iFile to hDD
35393>>>>>>>        If hDD Begin
35395>>>>>>>            Get Field_Current_UCAValue of hDD iField to UCValue // return pointer to first byte of
35396>>>>>>>            Function_Return UCValue                              // data
35397>>>>>>>        End
35397>>>>>>>>
35397>>>>>>>    End_Function
35398>>>>>>>    
35398>>>>>>>    // Create an extended field object for the passed field. .
35398>>>>>>>    // If field already exists, do nothing. This should only be used with
35398>>>>>>>    // text and binary fields.
35398>>>>>>>    Procedure DefineExtendedField Integer iField
35400>>>>>>>        Integer hFlds
35400>>>>>>>        Get Field_Objects to hFlds // this may not be created yet.
35401>>>>>>>        If not hFlds Begin         // if not created, create extended-fields wrapper
35403>>>>>>>            Object ExtendedFieldObjects is a FieldObjects
35405>>>>>>>                Move Self to hFlds
35406>>>>>>>            End_Object
35407>>>>>>>            Set Field_Objects to hFlds
35408>>>>>>>        End
35408>>>>>>>>
35408>>>>>>>        Send DefineFieldObject to hFlds iField
35409>>>>>>>    End_Procedure
35410>>>>>>>    
35410>>>>>>>    // create extended DD fields for all text and binary files
35410>>>>>>>    Procedure DefineAllExtendedFields
35412>>>>>>>        Integer iCount iType iField iFile
35412>>>>>>>        Get Main_file to iFile
35413>>>>>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iFile to iCount
35416>>>>>>>        For iField from 1 to iCount
35422>>>>>>>>
35422>>>>>>>            Get_Attribute DF_FIELD_TYPE of iFile iField to iType
35425>>>>>>>            If (iType=DF_TEXT or iType=DF_BINARY) ; // if text or binary                Send DefineExtendedField iField
35428>>>>>>>        Loop
35429>>>>>>>>
35429>>>>>>>    End_Procedure
35430>>>>>>>    
35430>>>>>>>    // Update Extended fields to FileBuffer.  DD-Fields ---> FileBuffer
35430>>>>>>>    // Private
35430>>>>>>>    Procedure ExtendedFieldsUpdate Integer bSave
35432>>>>>>>        Integer hFlds
35432>>>>>>>        Get Field_Objects to hFlds
35433>>>>>>>        If hFlds ;            Send ExtendedFieldsUpdate to hFlds bSave
35436>>>>>>>    End_Procedure
35437>>>>>>>    
35437>>>>>>>    // Refresh Extended field from FileBuffer.  DD-Fields <--- FileBuffer
35437>>>>>>>    // Private
35437>>>>>>>    Procedure ExtendedFieldsRefresh Boolean bCleared
35439>>>>>>>        Integer hFlds
35439>>>>>>>        Get Field_Objects to hFlds
35440>>>>>>>        If hFlds ;            Send ExtendedFieldsRefresh to hFlds bCleared
35443>>>>>>>    End_Procedure
35444>>>>>>>    
35444>>>>>>>    // This procedure can be used to set the Item_Options of a field. This can
35444>>>>>>>    // be passed any number of arguments.
35444>>>>>>>    // Support the following special first parameters:
35444>>>>>>>    //      DD_CLEAR_FIELD_OPTIONS     - clear all following passed otpions
35444>>>>>>>    //      DD_CLEAR_ALL_FIELD_OPTIONS - clear all options
35444>>>>>>>    Procedure Set Field_Options Integer iField Integer iArg1 // plus unknown arguments
35446>>>>>>>        Integer iObj
35446>>>>>>>        Integer iOptions
35446>>>>>>>        Integer iOption
35446>>>>>>>        Integer iArg
35446>>>>>>>        Integer iClear
35446>>>>>>>        Integer iType
35446>>>>>>>        Move (Record_Buffer(Self)) to iObj
35447>>>>>>>        Get Item_Options of iObj iField to iOptions
35448>>>>>>>        //
35448>>>>>>>        For iArg from 2 to Num_Arguments
35454>>>>>>>>
35454>>>>>>>            Move iArg& to iOption // tricky way to parse passed arguments
35455>>>>>>>            
35455>>>>>>>            If (iOption = DD_CLEAR_ALL_FIELD_OPTIONS) ;                Move 0 to iOptions
35458>>>>>>>            Else If (iOption = DD_CLEAR_FIELD_OPTIONS) ;                Move 1 to iClear
35462>>>>>>>            Else If not iClear ;                Move (iOptions ior iOption) to iOptions
35466>>>>>>>            Else ; // only unset bits already set! Note multiple bits can be passed                Move (iOptions - (iOptions iand iOption)) to iOptions
35468>>>>>>>        Loop
35469>>>>>>>>
35469>>>>>>>        //
35469>>>>>>>        //Get_Attribute DF_FIELD_TYPE of (Main_File(self)) iField to iType
35469>>>>>>>        //If (iType=DF_TEXT or iType=DF_BINARY) ;            // if text of binary
35469>>>>>>>        //    Move (iOptions iOR DD_DISPLAYONLY) to iOptions // make sure DO is set
35469>>>>>>>        
35469>>>>>>>        Set Item_Options of iObj iField to iOptions
35470>>>>>>>    End_Procedure
35471>>>>>>>    
35471>>>>>>>    // This function returns all the item_options which have been set for
35471>>>>>>>    // a field. The value from the Record_Buffer object will be binary or'ed
35471>>>>>>>    // with constand Default_Item_Options and the DD_AUTOCLEAR constants when
35471>>>>>>>    // the Autoclear_State of the field has been set.
35471>>>>>>>    // Keep in mind that Autoclear is *not* kept in the Item_Options
35471>>>>>>>    // property.
35471>>>>>>>    Function Field_Options Integer iField Returns Integer
35473>>>>>>>        Function_Return (Item_Options(Record_Buffer(Self), iField))
35474>>>>>>>    End_Function
35475>>>>>>>    
35475>>>>>>>    Function Field_Option Integer iField Integer iOption Returns Integer
35477>>>>>>>        Integer iOptions
35477>>>>>>>        Integer iState
35477>>>>>>>        Get Item_Options of (Record_Buffer(Self)) iField to iOptions
35478>>>>>>>        // All bits must match for it to be True (e.g., displayonly requires noput & noenter)
35478>>>>>>>        Move ((iOptions iand iOption)=iOption) to iState
35479>>>>>>>        Function_Return iState
35480>>>>>>>    End_Function
35481>>>>>>>    
35481>>>>>>>    
35481>>>>>>>    Procedure Set Foreign_Field_Options Integer iField Integer iArg1 // Integer iOption
35483>>>>>>>        Integer iObj
35483>>>>>>>        Integer iOptions
35483>>>>>>>        Integer iOption
35483>>>>>>>        Integer iArg
35483>>>>>>>        Integer iClear
35483>>>>>>>        
35483>>>>>>>        
35483>>>>>>>        Move (Record_Buffer(Self)) to iObj
35484>>>>>>>        Get Aux_Value of iObj iField to iOptions
35485>>>>>>>        //
35485>>>>>>>        For iArg from 2 to Num_Arguments
35491>>>>>>>>
35491>>>>>>>            Move iArg& to iOption // tricky way to parse passed arguments
35492>>>>>>>            If (iOption = DD_CLEAR_ALL_FIELD_OPTIONS) ;                Move 0 to iOptions
35495>>>>>>>            Else If (iOption = DD_CLEAR_FIELD_OPTIONS) ;                Move 1 to iClear
35499>>>>>>>            Else If not iClear ;                Move (iOptions ior iOption) to iOptions
35503>>>>>>>            Else ; // only unset bits already set! Note multiple bits can be passed                Move (iOptions - (iOptions iand iOption)) to iOptions
35505>>>>>>>        Loop
35506>>>>>>>>
35506>>>>>>>        //
35506>>>>>>>        Set Aux_Value of iObj iField to iOptions
35507>>>>>>>    End_Procedure
35508>>>>>>>    
35508>>>>>>>    Function Foreign_Field_Options Integer iField Returns Integer
35510>>>>>>>        Integer iOpts
35510>>>>>>>        Get ForeignFieldOptions of Record_Buffer iField to iOpts
35511>>>>>>>        Function_Return iOpts
35512>>>>>>>    End_Function
35513>>>>>>>    
35513>>>>>>>    Procedure Set Foreign_Field_Option Integer iField Integer iOption Integer bSet
35515>>>>>>>        If bSet Begin
35517>>>>>>>            Set Foreign_Field_Options iField to iOption
35518>>>>>>>        End
35518>>>>>>>>
35518>>>>>>>        Else Begin
35519>>>>>>>            Set Foreign_Field_Options iField to DD_CLEAR_FIELD_OPTIONS iOption
35520>>>>>>>        End
35520>>>>>>>>
35520>>>>>>>    End_Procedure
35521>>>>>>>    
35521>>>>>>>    Function Foreign_Field_Option Integer iField Integer iOption Returns Integer
35523>>>>>>>        Integer iOptions
35523>>>>>>>        Integer iState
35523>>>>>>>        Get Foreign_Field_Options iField to iOptions
35524>>>>>>>        Move ((iOptions iand iOption)=iOption) to iState
35525>>>>>>>        Function_Return iState
35526>>>>>>>    End_Function
35527>>>>>>>    
35527>>>>>>>    // This procedure is being used by DEOs when they need to copy the item-
35527>>>>>>>    // options from the Data_Set. When the filenumber being passed is not
35527>>>>>>>    // equal to the Main_File of this Data_Set, then the Foreign_Field_Options
35527>>>>>>>    // will be applied.
35527>>>>>>>    Function File_Field_Options Integer iFile Integer iField Returns Integer
35529>>>>>>>        Integer iDSO
35529>>>>>>>        Integer iMain_File
35529>>>>>>>        Integer iOpts
35529>>>>>>>        Integer iRB
35529>>>>>>>        Integer iType
35529>>>>>>>        Get Main_File to iMain_File
35530>>>>>>>        If (iFile <> iMain_File) ;            Get Data_Set iFile to iDSO
35533>>>>>>>        Else ;            Move Self to iDSO
35535>>>>>>>        If iDSO Begin
35537>>>>>>>            Get Field_Options of iDSO iField to iOpts
35538>>>>>>>            // we consider the item to be foreign if the DDO main file is different than the one
35538>>>>>>>            // passed and we do not allow foreign (parent) new records to be saved.
35538>>>>>>>            If (iFile<>iMain_File and Allow_Foreign_New_Save_State(iDSO)=0) ; // Add Foreign_Field_Options                Move (iOpts ior Foreign_Field_Options(iDSO, iField)) to iOpts
35541>>>>>>>            Function_Return iOpts
35542>>>>>>>        End
35542>>>>>>>>
35542>>>>>>>    End_Function
35543>>>>>>>    
35543>>>>>>>    
35543>>>>>>>    // Procedure to set the message to be sent on item entry.
35543>>>>>>>    Procedure Set Field_Entry_msg Integer iField Integer iMsg
35545>>>>>>>        Set Item_Entry_MSG of (Record_Buffer(Self)) iField to iMsg
35546>>>>>>>    End_Procedure
35547>>>>>>>    
35547>>>>>>>    // Function to return the message to be sent on item entry.
35547>>>>>>>    Function Field_Entry_msg Integer iField Returns Integer
35549>>>>>>>        Function_Return (Item_Entry_MSG(Record_Buffer(Self), iField))
35550>>>>>>>    End_Function
35551>>>>>>>    
35551>>>>>>>    
35551>>>>>>>    // Procedure to send the message to be sent on item exit.
35551>>>>>>>    Procedure Set Field_Exit_msg Integer iField Integer iMsg
35553>>>>>>>        Set Item_Exit_MSG of (Record_Buffer(Self)) iField to iMsg
35554>>>>>>>    End_Procedure
35555>>>>>>>    
35555>>>>>>>    // Function to return the message to be set on item exit.
35555>>>>>>>    Function Field_Exit_msg Integer iField Returns Integer
35557>>>>>>>        Function_Return (Item_Exit_MSG(Record_Buffer(Self), iField))
35558>>>>>>>    End_Function
35559>>>>>>>    
35559>>>>>>>    // Procedure to set the message to be sent on item validation.
35559>>>>>>>    Procedure Set Field_Validate_msg Integer iField Integer iMsg
35561>>>>>>>        Set Item_Validate_MSG of (Record_Buffer(Self)) iField to iMsg
35562>>>>>>>    End_Procedure
35563>>>>>>>    
35563>>>>>>>    // Function to return the message to be set on item validation.
35563>>>>>>>    Function Field_Validate_msg Integer iField Returns Integer
35565>>>>>>>        Function_Return (Item_Validate_MSG(Record_Buffer(Self), iField))
35566>>>>>>>    End_Function
35567>>>>>>>    
35567>>>>>>>    
35567>>>>>>>    // Used to Get/Set the Prompt_Object for a Field.
35567>>>>>>>    Procedure Set Field_Prompt_Object Integer iField Integer iObj
35569>>>>>>>        Set Prompt_Object of (Record_Buffer(Self)) iField to iObj
35570>>>>>>>    End_Procedure
35571>>>>>>>    
35571>>>>>>>    Function Field_Prompt_Object Integer iField Returns Integer
35573>>>>>>>        Integer iObj
35573>>>>>>>        Get Prompt_Object of (Record_Buffer(Self)) iField to iObj
35574>>>>>>>        If (iObj = 0) ;            Get Prompt_Object of (Field_Attributes(Self)) iField to iObj
35577>>>>>>>        Function_Return iObj
35578>>>>>>>    End_Function
35579>>>>>>>    
35579>>>>>>>    Procedure Set Field_Zoom_Object Integer iField Integer iObj
35581>>>>>>>        Set Zoom_Object of (Record_Buffer(Self)) iField to iObj
35582>>>>>>>    End_Procedure
35583>>>>>>>    
35583>>>>>>>    Function Field_Zoom_Object Integer iField Returns Integer
35585>>>>>>>        Function_Return (Zoom_Object(Record_Buffer(Self), iField))
35586>>>>>>>    End_Function
35587>>>>>>>    
35587>>>>>>>    
35587>>>>>>>    Procedure Set Field_WebPrompt_Object Integer iField Handle hoObj
35589>>>>>>>        Set Field_WebPrompt_Object of FieldMask_Array iField to hoObj
35590>>>>>>>    End_Procedure
35591>>>>>>>    
35591>>>>>>>    Function Field_WebPrompt_Object Integer iField Returns Handle
35593>>>>>>>        Handle hoPrompt
35593>>>>>>>        Get Field_WebPrompt_Object of FieldMask_Array iField to hoPrompt
35594>>>>>>>        Function_Return hoPrompt
35595>>>>>>>    End_Function
35596>>>>>>>    
35596>>>>>>>    
35596>>>>>>>    // Used to Get/Set the Prompt_Object for a Field.
35596>>>>>>>    Function File_Field_Prompt_Object Integer iFile Integer iField Returns Integer
35598>>>>>>>        Integer iObj
35598>>>>>>>        Get File_Field_Property iFile iField GET_Field_Prompt_Object to iObj
35599>>>>>>>        Function_Return iObj
35600>>>>>>>    End_Function
35601>>>>>>>    
35601>>>>>>>    Function File_Field_Zoom_Object Integer iFile Integer iField Returns Integer
35603>>>>>>>        Integer iObj
35603>>>>>>>        Get File_Field_Property iFile iField GET_Field_Zoom_Object to iObj
35604>>>>>>>        Function_Return iObj
35605>>>>>>>    End_Function
35606>>>>>>>    
35606>>>>>>>    Function File_Field_WebPrompt_Object Integer iFile Integer iField Returns Handle
35608>>>>>>>        Handle hoPrompt
35608>>>>>>>        Get File_Field_Property iFile iField GET_Field_WebPrompt_Object to hoPrompt
35609>>>>>>>        Function_Return hoPrompt
35610>>>>>>>    End_Function
35611>>>>>>>    
35611>>>>>>>    // Return the extended validation type for this field.
35611>>>>>>>    Function Field_Validation_Type Integer iField Returns Integer
35613>>>>>>>        Integer iType
35613>>>>>>>        Get Field_Validation_Type of (Field_Attributes(Self)) iField ;            to iType
35614>>>>>>>        Function_Return iType
35615>>>>>>>    End_Function
35616>>>>>>>    
35616>>>>>>>    // Procedure to define a valid value range for a field.
35616>>>>>>>    Procedure Set Field_Value_Range Integer iField String sMin String sMax
35618>>>>>>>        Set Field_Value_Range of (Field_Attributes(Self)) iField ;            to sMin sMax
35619>>>>>>>    End_Procedure
35620>>>>>>>    
35620>>>>>>>    
35620>>>>>>>    // Procedure to define a validate table for a field.
35620>>>>>>>    Procedure Set Field_Value_Table Integer iField Integer iObj
35622>>>>>>>        Set Field_Value_Table of (Field_Attributes(Self)) iField ;            to iObj
35623>>>>>>>    End_Procedure
35624>>>>>>>    
35624>>>>>>>    // This provides a callback to the calling object (iObj) by passing this
35624>>>>>>>    // object the message iMsg for each item in the table. Note this works for
35624>>>>>>>    // all extended validation types (range, check, etc.)
35624>>>>>>>    Procedure Field_Fill_List Integer iField Integer iObj Integer iMsg
35626>>>>>>>        Send Field_Fill_list to (Field_Attributes(Self)) ;            iField iObj iMsg
35627>>>>>>>    End_Procedure
35628>>>>>>>    
35628>>>>>>>    Procedure File_Field_Fill_List Integer iFile Integer iField ;            Integer iObj Integer iMsg
35630>>>>>>>        Integer iDSO
35630>>>>>>>        Get Data_set iFile to iDSO
35631>>>>>>>        If iDSO ;            Send Field_Fill_list to iDSO iField iObj iMsg
35634>>>>>>>    End_Procedure
35635>>>>>>>    
35635>>>>>>>    // Returns the ID if any of the validation table for this object.
35635>>>>>>>    Function Field_Table_Object Integer iField Returns Integer
35637>>>>>>>        Integer iRval
35637>>>>>>>        Get Field_Table_Object of (Field_Attributes(Self)) iField to iRVal
35638>>>>>>>        Function_Return iRVal
35639>>>>>>>    End_Function
35640>>>>>>>    
35640>>>>>>>    Function File_Field_Table_Object Integer iFile Integer iField Returns Integer
35642>>>>>>>        Integer iDSO
35642>>>>>>>        Get Data_set iFile to iDSO
35643>>>>>>>        If iDSO ;            Function_Return (Field_Table_Object(iDSO,iField))
35646>>>>>>>    End_Function
35647>>>>>>>    
35647>>>>>>>    // Returns code description value for the passed string for the
35647>>>>>>>    // passed validation table object. Normally use field_value_description
35647>>>>>>>    Function Validation_Table_Description Integer iObj String sVal Returns String
35649>>>>>>>        String sDesc
35649>>>>>>>        If iObj ;            Get Find_Code_Description of iObj sVal to sDesc
35652>>>>>>>        Function_Return sDesc
35653>>>>>>>    End_Function
35654>>>>>>>    
35654>>>>>>>    // Returns the description value for the field's code value. This only
35654>>>>>>>    // works if you have a validation table - else it returns the field value
35654>>>>>>>    Function Field_Current_Description Integer iField Returns String
35656>>>>>>>        String sDesc
35656>>>>>>>        String sVal
35656>>>>>>>        Integer iObj
35656>>>>>>>        Get Field_Current_Value iField to sVal
35657>>>>>>>        Get Field_Table_Object iField to iObj
35658>>>>>>>        If iObj Begin
35660>>>>>>>            Get Validation_Table_Description iObj sVal to sDesc
35661>>>>>>>            If (sDesc="") ;                Move sVal to sDesc // if desc is blank, use value
35664>>>>>>>        End
35664>>>>>>>>
35664>>>>>>>        Else ;            Move sVal to sDesc
35666>>>>>>>        Function_Return sDesc
35667>>>>>>>    End_Function
35668>>>>>>>    
35668>>>>>>>    Function File_Field_Current_Description Integer iFile Integer iField Returns String
35670>>>>>>>        Integer iDSO
35670>>>>>>>        Get Data_set iFile to iDSO
35671>>>>>>>        If iDSO ;            Function_Return (Field_Current_Description(iDSO,iField))
35674>>>>>>>    End_Function
35675>>>>>>>    
35675>>>>>>>    // Required Messaging to Support Checkbox items in DEOs
35675>>>>>>>    //  Defines a field as a two item field and defines True and False values
35675>>>>>>>    Procedure Set Field_CheckBox_Values Integer iField String sTrue String sFalse
35677>>>>>>>        Set Field_CheckBox_Values of (Field_Attributes(Self)) iField ;            to sTrue sFalse
35678>>>>>>>    End_Procedure
35679>>>>>>>    
35679>>>>>>>    //    Returns a field's select_State based on the pased value
35679>>>>>>>    Function Field_Value_Select_State Integer iField String sValue Returns Integer
35681>>>>>>>        Function_Return (Field_Value_Select_State(Field_Attributes(Self),iField,sValue))
35682>>>>>>>    End_Function
35683>>>>>>>    
35683>>>>>>>    //    Returns a field's select_State based on the DD buffer contents
35683>>>>>>>    Function Field_Select_State Integer iField Returns Integer
35685>>>>>>>        String sValue
35685>>>>>>>        Get Field_Current_Value iField to sValue
35686>>>>>>>        Function_Return (Field_Value_Select_State(Self,iField,sValue))
35687>>>>>>>    End_Function
35688>>>>>>>    
35688>>>>>>>    //   Returns a file/field' select_State based on contents of DD buffer
35688>>>>>>>    Function File_Field_Select_State Integer iFile Integer iField Returns Integer
35690>>>>>>>        Integer iDSO
35690>>>>>>>        Get Data_set iFile to iDSO
35691>>>>>>>        If iDSO ;            Function_Return (Field_Select_State(iDSO,iField))
35694>>>>>>>    End_Function
35695>>>>>>>    
35695>>>>>>>    //   Returns a file/field' select_State based on passed value
35695>>>>>>>    Function File_Field_Value_Select_State Integer iFile Integer iField ;            String sValue Returns Integer
35697>>>>>>>        Integer iDSO
35697>>>>>>>        Get Data_set iFile to iDSO
35698>>>>>>>        If iDSO ;            Function_Return (Field_Value_Select_State(iDSO,iField,sValue))
35701>>>>>>>    End_Function
35702>>>>>>>    
35702>>>>>>>    // get the actual database value that corresponds to the boolean value
35702>>>>>>>    // passed.
35702>>>>>>>    Function Field_CheckBox_Value Integer iField Integer iState Returns String
35704>>>>>>>        Function_Return (Field_Checkbox_Value(Field_Attributes(Self),iField,iState))
35705>>>>>>>    End_Function
35706>>>>>>>    
35706>>>>>>>    Function File_Field_CheckBox_Value Integer iFile Integer iField Integer iState Returns String
35708>>>>>>>        Integer iDSO
35708>>>>>>>        Get Data_set iFile to iDSO
35709>>>>>>>        If iDSO ;            Function_Return (Field_Checkbox_Value(iDSO,iField,iState))
35712>>>>>>>    End_Function
35713>>>>>>>    
35713>>>>>>>    // Set the buffer's value based on the state passed. This notifies DEOs
35713>>>>>>>    Procedure Set Field_Select_State Integer iField Integer iState
35715>>>>>>>        String sValue
35715>>>>>>>        Get Field_Checkbox_Value iField iState to sValue
35716>>>>>>>        Set Field_Current_Value iField to sValue
35717>>>>>>>    End_Procedure
35718>>>>>>>    
35718>>>>>>>    // Set the buffer's value based on the state passed. This notifies DEOs
35718>>>>>>>    // if needed (set Field_Current_Value does this). First finds proper file
35718>>>>>>>    // DSO
35718>>>>>>>    Procedure Set File_Field_Select_State Integer iFile Integer iField Integer iState
35720>>>>>>>        Integer iDSO
35720>>>>>>>        Get Data_set iFile to iDSO
35721>>>>>>>        If iDSO ;            Set Field_Select_State of iDSO iField to iState
35724>>>>>>>    End_Procedure
35725>>>>>>>    
35725>>>>>>>    // Procedure to define a check string for a field.
35725>>>>>>>    Procedure Set Field_Value_Check Integer iField String sCheck
35727>>>>>>>        Set Field_Value_Check of (Field_Attributes(Self)) iField ;            to sCheck
35728>>>>>>>    End_Procedure
35729>>>>>>>    
35729>>>>>>>    // This function will be called indirectly by DEOs when an item is being
35729>>>>>>>    // entered, exited or needs validation. The first argument holds the
35729>>>>>>>    // fieldnumber for the field and the second holds the id of the message
35729>>>>>>>    // which can be send to retrieve the message which needs to be send for
35729>>>>>>>    // this Field/Event combination. The value of the second argument can be
35729>>>>>>>    // GET_Field_Entry_MSG, GET_Field_Exit_MSG or GET_Field_Validate_MSG.
35729>>>>>>>    Function Exec_Field_Message Integer iField Integer iMsg_ID Returns Integer
35731>>>>>>>        Integer iMsg
35731>>>>>>>        Integer iResult
35731>>>>>>>        String  sValue
35731>>>>>>>        Get iMsg_ID iField to iMsg
35732>>>>>>>        If iMsg Begin
35734>>>>>>>            Get Field_Current_Value iField to sValue
35735>>>>>>>            Get iMsg iField sValue to iResult
35736>>>>>>>        End
35736>>>>>>>>
35736>>>>>>>        Function_Return iResult
35737>>>>>>>    End_Function
35738>>>>>>>    
35738>>>>>>>    
35738>>>>>>>    // This function will be called from within DEOs when an item is being
35738>>>>>>>    // entered, exited or needs validation. The first argument holds the
35738>>>>>>>    // file number, the second argument holds the field and the third
35738>>>>>>>    // holds the id of the message  which can be send to retrieve the message
35738>>>>>>>    // which needs to be send for this File/Field/Event combination.
35738>>>>>>>    // The value of the second argument can be  GET_Field_Entry_MSG,
35738>>>>>>>    // GET_Field_Exit_MSG or GET_Field_Validate_MSG.
35738>>>>>>>    // This will redirect to the proper data-set object.
35738>>>>>>>    Function Exec_File_Field_Message Integer iFile Integer iField Integer iMsg_ID Returns Integer
35740>>>>>>>        Integer iDSO
35740>>>>>>>        Integer iResult
35740>>>>>>>        Get Data_set iFile to iDSO
35741>>>>>>>        If iDSO ;            Get Exec_Field_Message of iDSO iField iMsg_ID to iResult
35744>>>>>>>        Function_Return iResult
35745>>>>>>>    End_Function
35746>>>>>>>    
35746>>>>>>>    // Find the data-set whose main_file is the same as File#. The message
35746>>>>>>>    // Which_data_set includes updating parent files, we will throw those out.
35746>>>>>>>    // This has been augmented to search down the DDO tree if we do not find
35746>>>>>>>    // the DD with our quick C Which_Data_set search
35746>>>>>>>    Function Data_Set Integer iFile Returns Integer
35748>>>>>>>        Integer iTmp
35748>>>>>>>        Integer iDSO
35748>>>>>>>        Get Main_File to iTmp
35749>>>>>>>        If (iTmp = iFile) ;            Function_Return Self
35752>>>>>>>        Get Which_Data_Set iFile to iDSO
35753>>>>>>>        If iDSO Begin
35755>>>>>>>            // check that DS's main-file is the File (and not a parent file)
35755>>>>>>>            Get Main_File of iDSO to iTmp
35756>>>>>>>            If (iTmp = iFile) ;                Function_Return iDSO
35759>>>>>>>        End
35759>>>>>>>>
35759>>>>>>>        
35759>>>>>>>        // This really should have succeeded by now. If not we need to do a
35759>>>>>>>        // downward sweep looking for DD. This will be a slower process since it
35759>>>>>>>        // involves flex level DDO structure traversal. We should very rarely ever
35759>>>>>>>        // get to this point. If we do, it takes longer!
35759>>>>>>>        
35759>>>>>>>        // Unlike other traversals we will mark and check in a single
35759>>>>>>>        // step.
35759>>>>>>>        // This Mark_Id creates a sequence Id for this clear. This way
35759>>>>>>>        // DSOs only get cleared one time during this process.
35759>>>>>>>        Send IncrementCurrentMarkId
35760>>>>>>>        Get Private.Data_set iFile to iDSO // this does the recursive downward search
35761>>>>>>>        Function_Return iDSO
35762>>>>>>>    End_Function
35763>>>>>>>    
35763>>>>>>>    Function Private.Data_Set Integer iFile Returns Integer
35765>>>>>>>        Integer iMax
35765>>>>>>>        Integer iDSO hDD
35765>>>>>>>        Integer iCount
35765>>>>>>>        
35765>>>>>>>        If (iFile=Main_file(Self)) ;            Function_Return Self
35768>>>>>>>        
35768>>>>>>>        // We are only looking at sequence ID.
35768>>>>>>>        Set Last_Mark_Sequence_id to DD_Current_mark_id
35769>>>>>>>        
35769>>>>>>>        // recurse Down first, since we already tried upward direction.
35769>>>>>>>        Get Data_Set_Client_Count to iMax
35770>>>>>>>        Decrement iMax
35771>>>>>>>        For iCount from 0 to iMax
35777>>>>>>>>
35777>>>>>>>            Get Data_Set_Client iCount to iDSO
35778>>>>>>>            // If already cleared during this sequence...do nothing
35778>>>>>>>            If (Last_Mark_Sequence_id(iDSO)<>DD_Current_mark_id) Begin
35780>>>>>>>                Get Private.Data_Set of iDSO iFile to hDD
35781>>>>>>>                If hDD ;                    Function_Return hDD // when found...get out
35784>>>>>>>            End
35784>>>>>>>>
35784>>>>>>>        Loop
35785>>>>>>>>
35785>>>>>>>        // recurse up server list next. We do this 2nd because it is
35785>>>>>>>        // the less likely path for success.
35785>>>>>>>        Get Data_Set_Server_Count to iMax
35786>>>>>>>        Decrement iMax
35787>>>>>>>        For iCount from 0 to iMax
35793>>>>>>>>
35793>>>>>>>            Get Data_Set_Server iCount to iDSO
35794>>>>>>>            // If already cleared during this sequence...do nothing
35794>>>>>>>            If (Last_Mark_Sequence_id(iDSO)<>DD_Current_mark_id) Begin
35796>>>>>>>                Get Private.Data_Set of iDSO iFile to hDD
35797>>>>>>>                If hDD ;                    Function_Return hDD // when found...get out
35800>>>>>>>            End
35800>>>>>>>>
35800>>>>>>>        Loop
35801>>>>>>>>
35801>>>>>>>        Function_Return 0 // if here, our traversal has failed.
35802>>>>>>>    End_Function
35803>>>>>>>    
35803>>>>>>>    // These methods can be used to set/get a field property in a flexible
35803>>>>>>>    // way. The first two argument are the file- and fieldnumber followed by
35803>>>>>>>    // the ID of the message that should be send. The last argument should
35803>>>>>>>    // be the value to set or the variable to store the value in.
35803>>>>>>>    Procedure Set File_Field_Property Integer iFile Integer iField Integer iMsg String sValue
35805>>>>>>>        Integer iDSO
35805>>>>>>>        Get Data_Set iFile to iDSO
35806>>>>>>>        If iDSO Begin
35808>>>>>>>            Set iMsg of iDSO iField to sValue
35809>>>>>>>            Procedure_Return sValue
35810>>>>>>>        End
35810>>>>>>>>
35810>>>>>>>    End_Procedure
35811>>>>>>>    
35811>>>>>>>    Function File_Field_Property Integer iFile Integer iField Integer iMsg Returns Integer
35813>>>>>>>        Integer iDSO
35813>>>>>>>        String  sValue
35813>>>>>>>        Get Data_Set iFile to iDSO
35814>>>>>>>        If iDSO Begin
35816>>>>>>>            Get iMsg of iDSO iField to sValue
35817>>>>>>>            Function_Return sValue
35818>>>>>>>        End
35818>>>>>>>>
35818>>>>>>>    End_Function
35819>>>>>>>    
35819>>>>>>>    // This procedure will return the number of fields in the object
35819>>>>>>>    Function Field_Count Returns Integer
35821>>>>>>>        Function_Return (Item_Count(Record_Buffer(Self)) - 1)
35822>>>>>>>    End_Function
35823>>>>>>>    
35823>>>>>>>    // This procedure will clear all flags in the visited_fields string so
35823>>>>>>>    // that all field will be validated on the next requests.
35823>>>>>>>    Procedure Clear_Visited_Fields
35825>>>>>>>        // this clears field visitation marks
35825>>>>>>>        Set Visited_Fields to (Repeat(" ", Field_Count(Self)))
35826>>>>>>>    End_Procedure
35827>>>>>>>    
35827>>>>>>>    // Private.Initialize_Visited
35827>>>>>>>    // This procedure will be called when validations (and perhaps other
35827>>>>>>>    // events) is requested. It clears the visited marks and then proceeds
35827>>>>>>>    // to clear the marks up the server tree.
35827>>>>>>>    // This is passed two parameters: Up_and_down, If true upward and downward
35827>>>>>>>    // initialize. If Clear_Fields also clear the field string
35827>>>>>>>    Procedure Private.Initialize_Visited Integer Up_and_Down Integer Clear_Fields
35829>>>>>>>        Integer iMax
35829>>>>>>>        Integer iDSO
35829>>>>>>>        Integer iCount
35829>>>>>>>        
35829>>>>>>>        // recurse up server list first. Only recurse up
35829>>>>>>>        Get Data_Set_Server_Count to iMax
35830>>>>>>>        Decrement iMax
35831>>>>>>>        For iCount from 0 to iMax
35837>>>>>>>>
35837>>>>>>>            Get Data_Set_Server iCount to iDSO
35838>>>>>>>            // If already cleared during this sequence...do nothing
35838>>>>>>>            If (Last_Mark_Sequence_id(iDSO)<>DD_Current_mark_id) ;                Send Private.Initialize_Visited to iDSO False Clear_Fields
35841>>>>>>>        Loop
35842>>>>>>>>
35842>>>>>>>        
35842>>>>>>>        If Clear_Fields ;            Send Clear_Visited_Fields // clear all markers in this object
35845>>>>>>>        // this clears the visited mark for the entire object
35845>>>>>>>        Set Visited_State to False
35846>>>>>>>        Set DownDelete_State to False
35847>>>>>>>        Set Last_Mark_Sequence_id to DD_Current_mark_id
35848>>>>>>>        
35848>>>>>>>        // If Up_and_Down recurse Down server list
35848>>>>>>>        If Up_and_Down Begin
35850>>>>>>>            Get Data_Set_Client_Count to iMax
35851>>>>>>>            Decrement iMax // **EK** This line was missing
35852>>>>>>>            For iCount from 0 to iMax
35858>>>>>>>>
35858>>>>>>>                Get Data_Set_Client iCount to iDSO
35859>>>>>>>                // If already cleared during this sequence...do nothing
35859>>>>>>>                If (Last_Mark_Sequence_id(iDSO)<>DD_Current_mark_id) ;                    Send Private.Initialize_Visited to iDSO True Clear_Fields
35862>>>>>>>            Loop
35863>>>>>>>>
35863>>>>>>>        End
35863>>>>>>>>
35863>>>>>>>    End_Procedure
35864>>>>>>>    
35864>>>>>>>    
35864>>>>>>>    // Clears Visited marks and (maybe) field visited marks in all required
35864>>>>>>>    // DSOs. If Up_and_Down is TRUE DSOs are marked up and Down (delete style)
35864>>>>>>>    // propagation. If False, DSOs are marked up (save style). This does not
35864>>>>>>>    // have a mode to mark ALL DSOs in a structure. (Not needed so far).
35864>>>>>>>    // If Clear_Fields is T the field string marker is also cleared.
35864>>>>>>>    // The method of using the global integer DD_Current_Mark_ID is an opt-
35864>>>>>>>    // imizer. This is private - do not tamper with it!
35864>>>>>>>    // Note that Intialize_Visited does not always Clear all DDOs in the structure. When
35864>>>>>>>    // Up_and_Down is true, it is marking all DDOs that will participate in a cascade delete
35864>>>>>>>    // which may not be all DDOs in the structure. If you want to initialize all DDOs use InitializeAllVisited
35864>>>>>>>    Procedure Initialize_Visited Integer Up_and_Down Integer Clear_Fields
35866>>>>>>>        Send IncrementCurrentMarkId
35867>>>>>>>        Send Private.Initialize_Visited Up_and_Down Clear_Fields
35868>>>>>>>    End_Procedure
35869>>>>>>>    
35869>>>>>>>    Procedure InitializeAllVisited2
35871>>>>>>>        Integer iMax iCount
35871>>>>>>>        Handle hoDSO
35871>>>>>>>        
35871>>>>>>>        Set Visited_State to False
35872>>>>>>>        Set Last_Mark_Sequence_id to DD_Current_mark_id // marks this as visited
35873>>>>>>>        
35873>>>>>>>        // recurse up server list.
35873>>>>>>>        Get Data_Set_Server_Count to iMax
35874>>>>>>>        For iCount from 0 to (iMax-1)
35880>>>>>>>>
35880>>>>>>>            Get Data_Set_Server iCount to hoDSO
35881>>>>>>>            // If already cleared during this sequence...do nothing
35881>>>>>>>            If (Last_Mark_Sequence_id(hoDSO)<>DD_Current_mark_id) ;                Send InitializeAllVisited2 of hoDSO
35884>>>>>>>        Loop
35885>>>>>>>>
35885>>>>>>>        
35885>>>>>>>        // recurse down client list.
35885>>>>>>>        Get Data_Set_Client_Count to iMax
35886>>>>>>>        For iCount from 0 to (iMax-1)
35892>>>>>>>>
35892>>>>>>>            Get Data_Set_Client iCount to hoDSO
35893>>>>>>>            // If already cleared during this sequence...do nothing
35893>>>>>>>            If (Last_Mark_Sequence_id(hoDSO)<>DD_Current_mark_id) ;                Send InitializeAllVisited2 to hoDSO
35896>>>>>>>        Loop
35897>>>>>>>>
35897>>>>>>>    End_Procedure
35898>>>>>>>    
35898>>>>>>>    // clears visited flag for *all* ddos in the structure.
35898>>>>>>>    Procedure InitializeAllVisited
35900>>>>>>>        Send IncrementCurrentMarkId
35901>>>>>>>        Send InitializeAllVisited2
35902>>>>>>>    End_Procedure
35903>>>>>>>    
35903>>>>>>>    
35903>>>>>>>    // Internal recursive message to check file connections. Called from
35903>>>>>>>    // Valid_connections only. Private message
35903>>>>>>>    Function Private.Valid_Structure Integer Up_And_Down Returns Integer
35905>>>>>>>        Integer iRval iCount iMax
35905>>>>>>>        Handle iDSO iPDSO
35905>>>>>>>        Integer iPMax iPCount iPMain
35905>>>>>>>        Boolean bUpDown bNull bCascadeNull bDown
35905>>>>>>>        
35905>>>>>>>        // Check Current Connections
35905>>>>>>>        Get Valid_Servers to iRval           // always check servers
35906>>>>>>>        If (iRval=0 and Up_and_Down) ;       // check Clients if required            Get Valid_Clients to iRval
35909>>>>>>>        Set Visited_State to True
35910>>>>>>>        
35910>>>>>>>        // Ask Server data-sets to check their server connections
35910>>>>>>>        If not iRval Begin // check up
35912>>>>>>>            Get Data_Set_Server_Count to iMax
35913>>>>>>>            Decrement iMax
35914>>>>>>>            For iCount from 0 to iMax
35920>>>>>>>>
35920>>>>>>>                Get Data_Set_Server iCount to iDSO
35921>>>>>>>                If not (Visited_state(iDSO)) ;                    Get Private.Valid_Structure of iDSO False to iRVal
35924>>>>>>>            Until iRval
35926>>>>>>>        End
35926>>>>>>>>
35926>>>>>>>        
35926>>>>>>>        // If required, Ask Clients to check their server and client connections
35926>>>>>>>        //
35926>>>>>>>        If (iRval=0 and Up_and_Down) Begin // check down
35928>>>>>>>            Get Data_Set_Client_Count to iMax
35929>>>>>>>            Decrement iMax
35930>>>>>>>            For iCount from 0 to iMax
35936>>>>>>>>
35936>>>>>>>                Get Data_Set_Client iCount to iDSO
35937>>>>>>>                If not (Visited_state(iDSO)) Begin
35939>>>>>>>                    Get Data_Set_Server_Count of iDSO to iPMax
35940>>>>>>>                    // test if all deletable parents for a non parent null allowed/cascade delete null
35940>>>>>>>                    For iPCount from 0 to (iPMax-1)
35946>>>>>>>>
35946>>>>>>>                        Get Data_Set_Server of iDSO iPCount to iPDSO
35947>>>>>>>                        Get DownDelete_State of iPDSO to bDown
35948>>>>>>>                        If (bDown) Begin
35950>>>>>>>                            Get Main_File of iPDSO to iPMain
35951>>>>>>>                            Get IsNullParentAllowed of iDSO iPMain to bNull
35952>>>>>>>                            Get IsCascadeDeleteNull of iDSO iPMain to bCascadeNull
35953>>>>>>>                            Move (not(bNull) or not(bCascadeNull)) to bUpDown
35954>>>>>>>                        End
35954>>>>>>>>
35954>>>>>>>                    Until bUpDown
35956>>>>>>>                    Get Private.Valid_Structure of iDSO bUpDown to iRVal
35957>>>>>>>                End
35957>>>>>>>>
35957>>>>>>>            Until iRval
35959>>>>>>>        End
35959>>>>>>>>
35959>>>>>>>        
35959>>>>>>>        Function_Return iRVal
35960>>>>>>>        
35960>>>>>>>    End_Function
35961>>>>>>>    
35961>>>>>>>    // Validate data-set updating connections against required connections
35961>>>>>>>    // Pass: Up_and_down=T if we should check Server and Client connections
35961>>>>>>>    //                  =F is we only check servers
35961>>>>>>>    // Ret: 0 if ok, Missing File# if not ok.
35961>>>>>>>    // Up_And_Down should be true when testing for cascade delete structures and
35961>>>>>>>    // false when testing for save / delete-no-cascade structures
35961>>>>>>>    Function Valid_Structure Integer Up_And_Down Returns Integer
35963>>>>>>>        Send Initialize_Visited Up_and_Down False // False=don't clear field marks
35964>>>>>>>        If (Up_And_Down) Begin
35966>>>>>>>            Send MarkDDOsForCascadeDelete
35967>>>>>>>        End
35967>>>>>>>>
35967>>>>>>>        Function_Return (Private.Valid_Structure(Self,Up_and_Down))
35968>>>>>>>    End_Function
35969>>>>>>>    
35969>>>>>>>    // mark all DDOs which are part of this deletes cascade delete tree
35969>>>>>>>    // mark this and all clients as Downward deletable. This includes
35969>>>>>>>    // cacscade delete and cascade set to null (not for cascade_delete_state=F)
35969>>>>>>>    Procedure MarkDDOsForCascadeDelete
35971>>>>>>>        Integer iMax  iCount
35971>>>>>>>        Boolean bDown
35971>>>>>>>        Handle hoDDO
35971>>>>>>>        Set DownDelete_State to True
35972>>>>>>>        Get Data_Set_Client_Count to iMax
35973>>>>>>>        For iCount from 0 to (iMax-1)
35979>>>>>>>>
35979>>>>>>>            Get Data_Set_Client iCount to hoDDO
35980>>>>>>>            Get DownDelete_State of hoDDO to bDown
35981>>>>>>>            If not bDown Begin // circular DDO test - never do this
35983>>>>>>>                Send MarkDDOsForCascadeDelete of hoDDO
35984>>>>>>>            End
35984>>>>>>>>
35984>>>>>>>        Loop
35985>>>>>>>>
35985>>>>>>>    End_Procedure
35986>>>>>>>    
35986>>>>>>>    
35986>>>>>>>    // This function will execute the validation message for each field within
35986>>>>>>>    // this object. If DoAllFG is true all items are validated. If false
35986>>>>>>>    // only unvisited items are checked.
35986>>>>>>>    // Added bNoStop, If true, all items are validated. It is up to you to
35986>>>>>>>    // do something with the possible cascade of errors
35986>>>>>>>    // if the err returns DFERR_ENTER_VALID_REC_ID we will not continue
35986>>>>>>>    // the validation (the other fields will be bad). This works best if the
35986>>>>>>>    // findreq appears as one of the first fields in the file (which is almost
35986>>>>>>>    // always the case
35986>>>>>>>    Function Validate_Fields Integer DoAllFg Integer bNoStop Returns Integer
35988>>>>>>>        Integer iRetval
35988>>>>>>>        Integer iMax
35988>>>>>>>        Integer iCount
35988>>>>>>>        Integer iFile
35988>>>>>>>        Integer iErr
35988>>>>>>>        String  sVS
35988>>>>>>>        Get Visited_Fields to sVS
35989>>>>>>>        Get Field_Count to iMax
35990>>>>>>>        Get Main_File to iFile
35991>>>>>>>        For iCount from 1 to iMax
35997>>>>>>>>
35997>>>>>>>            If (DoAllFG or Mid(sVS, 1, iCount)=" ") Begin
35999>>>>>>>                Get Validate_Field iCount to iErr
36000>>>>>>>                If iErr Begin
36002>>>>>>>                    Move iErr to iRetVal
36003>>>>>>>                    // error occurred. If not no-stop or the error is
36003>>>>>>>                    // a findreq error - we are done.
36003>>>>>>>                    If (not(bNoStop) or iRetVal=DFERR_ENTER_VALID_REC_ID) ;                        Function_Return iRetVal
36006>>>>>>>                End
36006>>>>>>>>
36006>>>>>>>            End
36006>>>>>>>>
36006>>>>>>>        Loop
36007>>>>>>>>
36007>>>>>>>        Function_Return iRetval
36008>>>>>>>    End_Function
36009>>>>>>>    
36009>>>>>>>    // 17.0 - added support for null-parents. If null parents allowed, req lets it through
36009>>>>>>>    Function Validate_Required Integer iField Returns Integer
36011>>>>>>>        Boolean bNull bErr
36011>>>>>>>        
36011>>>>>>>        Move (trim(Field_Current_Value(Self,iField))='') to bErr
36012>>>>>>>        If bErr ;            Send Data_set_Error iField DFERR_ENTRY_REQUIRED ""
36015>>>>>>>        Function_Return bErr
36016>>>>>>>    End_Function
36017>>>>>>>    
36017>>>>>>>    // return true if we should skip validation for this field. This can happen with Null allowed parents.
36017>>>>>>>    // if this is foreign, new and has no changes and is null allowed we will skip.
36017>>>>>>>    Function SkipValidate Integer iField Returns Boolean
36019>>>>>>>        Boolean bSkip bFieldChanged bEmpty
36019>>>>>>>        String sValue
36019>>>>>>>        
36019>>>>>>>        If (OPERATION_ORIGIN<>Self and not(HasRecord(Self)) and not(changed_state(Self))) Begin
36021>>>>>>>            // We must also check field_changed_state and only skip if this is not changed.
36021>>>>>>>            Get Field_Changed_State iField to bFieldChanged
36022>>>>>>>            // Retain and remember may set field_changed_state to true even when empty. If this field is changed
36022>>>>>>>            // but its value is empty we assume it is a candidate for Null checking, so we will set field-changed to false
36022>>>>>>>            If bFieldChanged Begin
36024>>>>>>>                Get Field_Current_Value iField to sValue
36025>>>>>>>                Get IsEmptyField iField sValue to bEmpty
36026>>>>>>>                If bEmpty Begin
36028>>>>>>>                    Move False to bFieldChanged
36029>>>>>>>                End
36029>>>>>>>>
36029>>>>>>>            End
36029>>>>>>>>
36029>>>>>>>            If (not(bFieldChanged)) Begin
36031>>>>>>>                // we must find the child that points to this DD, starting with operation_origin. If a child
36031>>>>>>>                // is found, it will be in array position 1 (0 is self, 1 is child)
36031>>>>>>>                Get IsNullParentOrAncestor to bSkip
36032>>>>>>>            End
36032>>>>>>>>
36032>>>>>>>        End
36032>>>>>>>>
36032>>>>>>>        Function_Return bSkip
36033>>>>>>>    End_Function
36034>>>>>>>    
36034>>>>>>>    
36034>>>>>>>    // This will tell us if this DD can be treated as either a null parent
36034>>>>>>>    // or an ancestor of a null parent. This should only be called for a DD
36034>>>>>>>    // that is a candidate for this meaning that it does not have a change.
36034>>>>>>>    // We will test if its child allows this parent to be null or if this
36034>>>>>>>    // is in the path of an allowed null parent. We assume that parents of
36034>>>>>>>    // null parents will also be null. This is used to test if validations are
36034>>>>>>>    // needed.
36034>>>>>>>    Function IsNullParentOrAncestor Returns Boolean
36036>>>>>>>        Handle[] hoDDs
36037>>>>>>>        Integer i iSize iMain
36037>>>>>>>        Boolean bNullAllowed
36037>>>>>>>        // gets an array where 0 is self, 1 is parent, 2 is grandparent, and the
36037>>>>>>>        // last item is the operation_origin.
36037>>>>>>>        Send DDOServerPath of operation_origin Self (&hoDDs)
36038>>>>>>>        Move (SizeOfArray(hoDDs)) to iSize
36039>>>>>>>        If (iSize) Begin
36041>>>>>>>            // see if the immediate child allows this to be null.
36041>>>>>>>            Get Main_File to iMain
36042>>>>>>>            Get IsNullParentAllowed of hoDDs[1] iMain to bNullAllowed
36043>>>>>>>            
36043>>>>>>>            // if null not allowed, see if this is an ancestor to a null allowed
36043>>>>>>>            // parent where all DDs in this path are unchanged. For example:
36043>>>>>>>            // G.DD <- P.DD <- C.DD where we C.DD allows P.DD to be null and we
36043>>>>>>>            // want to test if G.DD needs validation
36043>>>>>>>            Move 1 to i
36044>>>>>>>            While (not(bNullAllowed) and (i+1<iSize) and not(changed_state(hoDDs[i])) )
36048>>>>>>>                Get Main_File of hoDDs[i] to iMain
36049>>>>>>>                Get IsNullParentAllowed of hoDDs[i+1] iMain to bNullAllowed
36050>>>>>>>                Increment i
36051>>>>>>>            Loop
36052>>>>>>>>
36052>>>>>>>            
36052>>>>>>>        End
36052>>>>>>>>
36052>>>>>>>        Function_Return bNullAllowed
36053>>>>>>>    End_Function
36054>>>>>>>    
36054>>>>>>>    
36054>>>>>>>    Function Validate_FindReq Integer iField Returns Integer
36056>>>>>>>        Integer bErr iOpts
36056>>>>>>>        // if no current record, we have not found the required record.
36056>>>>>>>        Move (not(HasRecord(Self))) to bErr
36057>>>>>>>        // We also need to check if the field is changed. If the field is changed and this
36057>>>>>>>        // is an autofind field, this indicates that an autofind was attempted and failed. We
36057>>>>>>>        // can't jut rely on current_record because a failed autofind restores the old current
36057>>>>>>>        // record. For this to work, DEOs must set the DD field's changed_state to true on
36057>>>>>>>        // no-put fields (dd_deomx.pkg was changed to do this).
36057>>>>>>>        If (not(bErr) and field_changed_state(Self,iField)) Begin
36059>>>>>>>            Get Field_Options iField to iOpts
36060>>>>>>>            Move ( ((iOpts iand DD_AUTOFIND)=DD_AUTOFIND) or ;                ((iOpts iand DD_AUTOFIND_GE)=DD_AUTOFIND_GE) ) ;                to bErr
36061>>>>>>>        End
36061>>>>>>>>
36061>>>>>>>        If bErr ;            Send Data_set_Error iField DFERR_ENTER_VALID_REC_ID ""
36064>>>>>>>        Function_Return bErr
36065>>>>>>>    End_Function
36066>>>>>>>    
36066>>>>>>>    // This function will be called to validate a field.
36066>>>>>>>    // mark field currently being validated
36066>>>>>>>    // Altered to Check DD options (required, findreq)
36066>>>>>>>    Function Validate_Field Integer iField Returns Integer
36068>>>>>>>        Integer iResult
36068>>>>>>>        Integer iMsg
36068>>>>>>>        Integer iObj
36068>>>>>>>        String  sValue
36068>>>>>>>        Integer iFile
36068>>>>>>>        Integer iOpts iMain
36068>>>>>>>        Boolean bSkipValidate
36068>>>>>>>        Handle[] hoDDs
36069>>>>>>>        
36069>>>>>>>        Set Current_Validate_Field to iField
36070>>>>>>>        
36070>>>>>>>        // test if we should skip validation on this field
36070>>>>>>>        Get SkipValidate iField to bSkipValidate
36071>>>>>>>        
36071>>>>>>>        If (not(bSkipValidate)) Begin
36073>>>>>>>            
36073>>>>>>>            Move (Record_Buffer(Self)) to iObj
36074>>>>>>>            Get Main_File to iFile
36075>>>>>>>            
36075>>>>>>>            // Check for DD option failures: required, find_required
36075>>>>>>>            // "File_field" gets regular and foreign fields as needed
36075>>>>>>>            //Get File_Field_Options iFile iField to iOpts
36075>>>>>>>            Get Field_Options iField to iOpts  // get reg options
36076>>>>>>>            // if this is not the DDO that started the validation, we will assume that
36076>>>>>>>            // this is foreign. Operation_origin is set in Request_Validate
36076>>>>>>>            // If foreign (as defined above) and we do not allow new saves when
36076>>>>>>>            // foreign, we will consider this to be foreign and add foreign options
36076>>>>>>>            If (Operation_Origin<>Self and ;                Allow_Foreign_New_Save_State(Self)=0)  ;                Move (iOpts ior Foreign_Field_Options(Self, iField)) to iOpts
36079>>>>>>>            
36079>>>>>>>            
36079>>>>>>>            // Check for FindReq first. If it fails, set iResult to DFERR_ENTER_VALID_REC_ID so
36079>>>>>>>            // the calling function knows that a findreq failed. Always do this validation first
36079>>>>>>>            If (iOpts iand DD_FINDREQ) ;                Get Validate_FindReq  iField to iResult
36082>>>>>>>            If iResult Begin
36084>>>>>>>                Send AddDDHasFindReqError
36085>>>>>>>                Move DFERR_ENTER_VALID_REC_ID to iResult
36086>>>>>>>            End
36086>>>>>>>>
36086>>>>>>>            Else Begin
36087>>>>>>>                
36087>>>>>>>                If (iOpts iand DD_REQUIRED) ;                    Get Validate_Required iField to iResult
36090>>>>>>>                
36090>>>>>>>                If (iResult=0) Begin
36092>>>>>>>                    // First execute the user defined validation message
36092>>>>>>>                    Get Item_Validate_MSG of iObj iField to iMsg
36093>>>>>>>                    If iMsg Begin
36095>>>>>>>                        Get Field_Current_Value iField to sValue
36096>>>>>>>                        Get iMsg iField sValue to iResult
36097>>>>>>>                    End
36097>>>>>>>>
36097>>>>>>>                End
36097>>>>>>>>
36097>>>>>>>                
36097>>>>>>>                // Check for keys
36097>>>>>>>                If (iResult=0 and Key_Field_State(Self, iField)) ;                    Get Validate_Key_Field iField to iResult
36100>>>>>>>                
36100>>>>>>>                // Do extended validations
36100>>>>>>>                If (iResult=0) ;                    Get Validate_Field of (Field_Attributes(Self)) iField to iResult
36103>>>>>>>            End
36103>>>>>>>>
36103>>>>>>>        End
36103>>>>>>>>
36103>>>>>>>        
36103>>>>>>>        Set Current_Validate_Field to 0
36104>>>>>>>        // Mark this field being validated
36104>>>>>>>        Get Visited_Fields to sValue
36105>>>>>>>        Set Visited_Fields to (Overstrike("X", sValue, iField))
36106>>>>>>>        
36106>>>>>>>        Function_Return iResult
36107>>>>>>>        
36107>>>>>>>    End_Function
36108>>>>>>>    
36108>>>>>>>    
36108>>>>>>>    // This function will be called to validate a field.
36108>>>>>>>    Function File_Field_Validate_Field Integer iFile Integer iField Returns Integer
36110>>>>>>>        Integer iDSO
36110>>>>>>>        Integer iResult
36110>>>>>>>        Integer hOldOrigin
36110>>>>>>>        Get Data_Set iFile to iDSO
36111>>>>>>>        If not iDSO ;            Function_Return 0
36114>>>>>>>        
36114>>>>>>>        // This function is only called by the DEOs.
36114>>>>>>>        // It is possible for validate_item when called as part of
36114>>>>>>>        // request_validate to get called more than once
36114>>>>>>>        // when a field is foreign (it is attached to both its DDO and the
36114>>>>>>>        // child-main ddo). This makes sure the validation is only called once.
36114>>>>>>>        // (vdf7 change: previously we set OpMode to Mode_Saving and checked that, now we have
36114>>>>>>>        // a mode just for request_validate).
36114>>>>>>>        If (Operation_Mode=MODE_VALIDATING and ;         // if from request_validate            Mid(Visited_Fields(iDSO), 1, iField)="X" ) ; // and already marked            Function_Return 0                         // skip it
36117>>>>>>>        
36117>>>>>>>        Move Operation_origin to hOldOrigin
36118>>>>>>>        
36118>>>>>>>        // if from request_validate operation_origin will be set and should not
36118>>>>>>>        // be reset here.
36118>>>>>>>        If (OPERATION_ORIGIN=0) Begin
36120>>>>>>>            Move Self to Operation_Origin
36121>>>>>>>        End
36121>>>>>>>>
36121>>>>>>>        
36121>>>>>>>        Get Validate_Field of iDSO iField to iResult
36122>>>>>>>        Move hOldOrigin to Operation_Origin
36123>>>>>>>        Function_Return iResult
36124>>>>>>>    End_Function
36125>>>>>>>    
36125>>>>>>>    // This function will be called to check if a key has been changed.
36125>>>>>>>    Function Validate_Key_Field Integer iField Returns Integer
36127>>>>>>>        String  sOld_Value
36127>>>>>>>        String  sNew_Value
36127>>>>>>>        String  sKeys
36127>>>>>>>        Integer iState
36127>>>>>>>        Boolean bMultiKeys
36127>>>>>>>        Get Protect_Key_State to iState
36128>>>>>>>        If iState Begin
36130>>>>>>>            Get Key_Value to sNew_Value
36131>>>>>>>            // Only check existing records.
36131>>>>>>>            If (HasRecord(Self)) Begin
36133>>>>>>>                Get Existing_Key_Value to sOld_Value
36134>>>>>>>                If (sNew_Value <> sOld_Value) Begin
36136>>>>>>>                    // we have an error. If there is only one key field we know
36136>>>>>>>                    // where the field is and we can report that field. If we have
36136>>>>>>>                    // multiple key fields, we don't really know where the offending key change
36136>>>>>>>                    // is, so we will not report a field.
36136>>>>>>>                    Get Key_Fields to sKeys
36137>>>>>>>                    Move (Pos("X",sKeys)<>RightPos("X",sKeys)) to bMultiKeys
36138>>>>>>>                    Send Data_set_Error (If(bMultiKeys, -1, iField)) 0 DD_TEXT_NO_KEY_CHANGE_ALLOWED
36139>>>>>>>                    Function_Return 1
36140>>>>>>>                End
36140>>>>>>>>
36140>>>>>>>            End
36140>>>>>>>>
36140>>>>>>>        End
36140>>>>>>>>
36140>>>>>>>    End_Function
36141>>>>>>>    
36141>>>>>>>    
36141>>>>>>>    // During request_validate process tell us if this DD has had a find_request error. This
36141>>>>>>>    // is handled by the DD that originated the request_validate. Very private
36141>>>>>>>    Function DDHasFindReqError Returns Boolean
36143>>>>>>>        Handle[] DDsWithFindReqErrors
36144>>>>>>>        Integer iIndex
36144>>>>>>>        If (OPERATION_ORIGIN) Begin
36146>>>>>>>            Get pDDsWithFindReqErrors of OPERATION_ORIGIN to DDsWithFindReqErrors
36147>>>>>>>            Move (SearchArray(Self,DDsWithFindReqErrors)) to iIndex
36148>>>>>>>            Function_Return (iIndex<>-1)
36149>>>>>>>        End
36149>>>>>>>>
36149>>>>>>>    End_Function
36150>>>>>>>    
36150>>>>>>>    // During a request_validate a find_request error has occurred. Add this DD
36150>>>>>>>    // to list of DDs that have this error. This is handled by the DD that
36150>>>>>>>    // originated the request_validate.  Very private
36150>>>>>>>    Procedure AddDDHasFindReqError
36152>>>>>>>        Handle[] DDsWithFindReqErrors
36153>>>>>>>        If (OPERATION_ORIGIN) Begin
36155>>>>>>>            Get pDDsWithFindReqErrors of OPERATION_ORIGIN to DDsWithFindReqErrors
36156>>>>>>>            Move Self to DDsWithFindReqErrors[SizeOfArray(DDsWithFindReqErrors)]
36157>>>>>>>            Set pDDsWithFindReqErrors of OPERATION_ORIGIN to DDsWithFindReqErrors
36158>>>>>>>        End
36158>>>>>>>>
36158>>>>>>>    End_Procedure
36159>>>>>>>    
36159>>>>>>>    // This function will execute the validation message for each field of the
36159>>>>>>>    // data set and all of its parents in parent first order.
36159>>>>>>>    // Pass: DoALLFg bNoStop
36159>>>>>>>    // Added bNoStop, If true, all items are validated. It is up to you to
36159>>>>>>>    // do something with the possible cascade of errors
36159>>>>>>>    Function Validate_Data_Sets Integer DoAllFg Integer bNoStop Returns Integer
36161>>>>>>>        Integer iDSO
36161>>>>>>>        Integer iRetval
36161>>>>>>>        Integer iCount
36161>>>>>>>        Integer iMax
36161>>>>>>>        Integer bErr
36161>>>>>>>        Boolean bDDHasFindReqError
36161>>>>>>>        // ShowLn "Validate_Data_Sets in Data_Set in " (Name(self))
36161>>>>>>>        // Validate if not foreign, or foreign new saves allowed, or
36161>>>>>>>        // foreign validation is supported (it normally is)
36161>>>>>>>        If (Operation_Origin=Self or ;            Allow_Foreign_New_Save_State(Self) or ;            Validate_Foreign_File_State(Self)) Begin
36163>>>>>>>            
36163>>>>>>>            If (bNoStop) Begin
36165>>>>>>>                // if do all, it is possible that this DD as a find-req error. If so there is no
36165>>>>>>>                // need to look for more errors in this DD or its parents. This makes the do all checking
36165>>>>>>>                // a little more intelligent and doesn't return a bunch of errors when it is not needed
36165>>>>>>>                Get DDHasFindReqError to bDDHasFindReqError
36166>>>>>>>            End
36166>>>>>>>>
36166>>>>>>>            
36166>>>>>>>            If (not(bDDHasFindReqError)) Begin
36168>>>>>>>                Get Data_Set_Server_Count to iMax
36169>>>>>>>                Decrement iMax
36170>>>>>>>                For iCount from 0 to iMax
36176>>>>>>>>
36176>>>>>>>                    Get Data_Set_Server iCount to iDSO
36177>>>>>>>                    If not (Visited_state(iDSO)) Begin
36179>>>>>>>                        Get Validate_Data_Sets of iDSO DoAllFg bNoStop to bErr
36180>>>>>>>                        If bErr Begin
36182>>>>>>>                            Move bErr to iRetVal
36183>>>>>>>                            If bNoStop ;                                Move 0 to bErr
36186>>>>>>>                        End
36186>>>>>>>>
36186>>>>>>>                    End
36186>>>>>>>>
36186>>>>>>>                Until bErr
36188>>>>>>>                If not bErr Begin
36190>>>>>>>                    Get Validate_Fields DoAllFg bNoStop to bErr
36191>>>>>>>                    If bErr ;                        Move bErr to iRetVal
36194>>>>>>>                End
36194>>>>>>>>
36194>>>>>>>            End
36194>>>>>>>>
36194>>>>>>>        End
36194>>>>>>>>
36194>>>>>>>        Set Visited_State to True
36195>>>>>>>        Function_Return iRetval
36196>>>>>>>    End_Function
36197>>>>>>>    
36197>>>>>>>    // This tests the DDO and all "up" DDOs to see if a switched parent / commit test even needs to be
36197>>>>>>>    // tested. This is called by the top ValidateSwitchedCommittedParents to see if a switch parent test
36197>>>>>>>    // even needs to be applied before it has to refinds records.
36197>>>>>>>    // Return true is there is nothing to test (i.e., the shortcut worked).
36197>>>>>>>    Function IsCommittedRecursiveUpParentChangeAllowed Returns Boolean
36199>>>>>>>        Boolean bAllowed bCommitted bVisited bHasRecord
36199>>>>>>>        Integer iServers iSrvr iParent
36199>>>>>>>        Handle hoSrvr
36199>>>>>>>        
36199>>>>>>>        
36199>>>>>>>        // optimization. We only test committed parents if one parent does not allow changing committed records.
36199>>>>>>>        // This avoids extra finds and relates when not needed
36199>>>>>>>        Set Visited_State to True
36200>>>>>>>        Get Data_Set_Server_Count to iServers
36201>>>>>>>        Get IsCommitted to bCommitted
36202>>>>>>>        Move 0 to iSrvr
36203>>>>>>>        Move True to bAllowed
36204>>>>>>>        While (iSrvr<iServers and bAllowed)
36208>>>>>>>            Get Data_Set_Server iSrvr to hoSrvr
36209>>>>>>>            Get Main_File of hoSrvr to iParent
36210>>>>>>>            // if committed and parent change not allowed, we are done
36210>>>>>>>            If (bCommitted) Begin
36212>>>>>>>                Get IsCommittedParentChangeAllowed iParent to bAllowed
36213>>>>>>>            End
36213>>>>>>>>
36213>>>>>>>            // if still allowed, check all parents
36213>>>>>>>            If (bAllowed) Begin
36215>>>>>>>                Get Visited_State of hoSrvr to bVisited
36216>>>>>>>                If not bVisited Begin
36218>>>>>>>                    Get IsCommittedRecursiveUpParentChangeAllowed of hoSrvr to bAllowed
36219>>>>>>>                End
36219>>>>>>>>
36219>>>>>>>            End
36219>>>>>>>>
36219>>>>>>>            Increment iSrvr
36220>>>>>>>        Loop
36221>>>>>>>>
36221>>>>>>>        Function_Return bAllowed
36222>>>>>>>    End_Function
36223>>>>>>>    
36223>>>>>>>    
36223>>>>>>>    // special validate-save check for changed committed parent. If the record is committed
36223>>>>>>>    // and it has a switched parent and this is not allowed, we have an error. This should rarely happen because the
36223>>>>>>>    // DEOs should guard aginst this. This is a recursive routine that requires special attention the first time through.
36223>>>>>>>    // When called from the we must refind the original record and all original parents. This way we can compare these parent
36223>>>>>>>    // rowids to the DD row id (if different, they've changed). At the end we must restore the DD records. Because this takes time
36223>>>>>>>    // we only even do this if this is committed and there is a chance that there are changed parents
36223>>>>>>>    
36223>>>>>>>    Function ValidateSwitchedCommittedParents Boolean bTop Returns Boolean
36225>>>>>>>        Integer iServers iSrvr iMain iParent iPMain
36225>>>>>>>        Handle hoSrvr
36225>>>>>>>        RowID riCrnt riParent riPCrnt
36225>>>>>>>        Boolean bChanged bCommitted bAllowed bErr bParentChanged bVisited
36225>>>>>>>        Boolean bHasRecord bPHasRecord bFound
36225>>>>>>>        
36225>>>>>>>        
36225>>>>>>>        // Shortcut optimization. This tests for any committed DDO with a parent that doesn't allow a switch
36225>>>>>>>        // return true if there is any reason to actually test any DDO up the tree for a parent change
36225>>>>>>>        If bTop Begin
36227>>>>>>>            // init visited nodes, these will be tested and set in IsCommittedRecursiveUpParentChangeAllowed
36227>>>>>>>            Send Initialize_Visited False False //false=up only, true=clear fields
36228>>>>>>>            Get IsCommittedRecursiveUpParentChangeAllowed to bAllowed
36229>>>>>>>            If bAllowed Begin
36231>>>>>>>                Function_Return False // if all are allowed, we have nothing to test - its ok
36232>>>>>>>            End
36232>>>>>>>>
36232>>>>>>>        End
36232>>>>>>>>
36232>>>>>>>        
36232>>>>>>>        Get Main_File to iMain
36233>>>>>>>        Get CurrentRowId to riCrnt
36234>>>>>>>        Get Data_Set_Server_Count to iServers
36235>>>>>>>        Get HasRecord to bHasRecord
36236>>>>>>>        
36236>>>>>>>        If (bHasRecord and (bTop or not(IsSameRowID(GetRowID(iMain),riCrnt))) ) Begin
36238>>>>>>>            // this refinds the main record and, most importantly, relates all original parents on up
36238>>>>>>>            // We now have the original parents which we can test to see if they are changed.
36238>>>>>>>            Get ReadByRowIdEx iMain riCrnt to bFound
36239>>>>>>>            If not bFound Begin
36241>>>>>>>                Error DFERR_CANT_REFIND_RECORD
36242>>>>>>>>
36242>>>>>>>                Function_Return True
36243>>>>>>>            End
36243>>>>>>>>
36243>>>>>>>        End
36243>>>>>>>>
36243>>>>>>>        
36243>>>>>>>        If (bTop) Begin
36245>>>>>>>            // If at start, init visited nodes, these will be tested and set during recursive calls to this function
36245>>>>>>>            Send Initialize_Visited False False // false=up only, true=clear fields
36246>>>>>>>        End
36246>>>>>>>>
36246>>>>>>>        
36246>>>>>>>        Set Visited_State to True
36247>>>>>>>        Get IsCommitted to bCommitted
36248>>>>>>>        If bCommitted Begin
36250>>>>>>>            // Parent_Changed_State tells us a parent is changed but not which one. Look at each child to see if it is changed.
36250>>>>>>>            // First see any any of the parents are changed.
36250>>>>>>>            Get Parent_Changed_State to bChanged
36251>>>>>>>            If bChanged Begin
36253>>>>>>>                // Parent_Changed_State tells us a parent is changed but not which one. Look at each child to see if it is changed.
36253>>>>>>>                Move 0 to iSrvr
36254>>>>>>>                While (iSrvr<iServers and not(bErr))
36258>>>>>>>                    Get Data_Set_Server iSrvr to hoSrvr
36259>>>>>>>                    Get Main_File of hoSrvr to iParent
36260>>>>>>>                    Get CurrentRowId of hoSrvr to riParent
36261>>>>>>>                    Move (not(IsSameRowID(GetRowID(iParent),riParent))) to bParentChanged // is parent changed?
36262>>>>>>>                    If bParentChanged Begin
36264>>>>>>>                        Get IsCommittedParentChangeAllowed iParent to bAllowed // is changing committed parent allowed?
36265>>>>>>>                        If not bAllowed Begin
36267>>>>>>>                            Move True to bErr
36268>>>>>>>                            If bErr Begin
36270>>>>>>>                                Send Data_Set_Error of hoSrvr -1 0 DD_CANNOT_SWITCH_PARENT
36271>>>>>>>                            End
36271>>>>>>>>
36271>>>>>>>                        End
36271>>>>>>>>
36271>>>>>>>                    End
36271>>>>>>>>
36271>>>>>>>                    Increment iSrvr
36272>>>>>>>                Loop
36273>>>>>>>>
36273>>>>>>>            End
36273>>>>>>>>
36273>>>>>>>        End
36273>>>>>>>>
36273>>>>>>>        
36273>>>>>>>        // no error in immediate we must continue this check up the parent tree.
36273>>>>>>>        Move 0 to iSrvr
36274>>>>>>>        While (iSrvr<iServers and not(bErr))
36278>>>>>>>            Get Data_Set_Server iSrvr to hoSrvr
36279>>>>>>>            Get Visited_State of hoSrvr to bVisited
36280>>>>>>>            If (not(bVisited)) Begin
36282>>>>>>>                
36282>>>>>>>                // if new record, we need to refind parent records from here since you cannot
36282>>>>>>>                // have done a find/relate on a new record.
36282>>>>>>>                If (not(bHasRecord)) Begin
36284>>>>>>>                    Get HasRecord of hoSrvr to bPHasRecord
36285>>>>>>>                    If (bPHasRecord) Begin
36287>>>>>>>                        Get Main_File of hoSrvr to iPMain
36288>>>>>>>                        Get CurrentRowId of hoSrvr to riPCrnt
36289>>>>>>>                        If (not(IsNullRowID(riPCrnt))) Begin
36291>>>>>>>                            Get ReadByRowIdEx of hoSrvr iPMain riPCrnt to bFound
36292>>>>>>>                            If not bFound Begin
36294>>>>>>>                                Error DFERR_CANT_REFIND_RECORD
36295>>>>>>>>
36295>>>>>>>                                Function_Return True
36296>>>>>>>                            End
36296>>>>>>>>
36296>>>>>>>                        End
36296>>>>>>>>
36296>>>>>>>                    End
36296>>>>>>>>
36296>>>>>>>                End
36296>>>>>>>>
36296>>>>>>>                
36296>>>>>>>                Get ValidateSwitchedCommittedParents of hoSrvr False to bErr // call recursively up the parent tree
36297>>>>>>>            End
36297>>>>>>>>
36297>>>>>>>            Increment iSrvr
36298>>>>>>>        Loop
36299>>>>>>>>
36299>>>>>>>        
36299>>>>>>>        If bTop Begin // if back to the top, make sure our buffers are correct.
36301>>>>>>>            Send Refind_Records
36302>>>>>>>        End
36302>>>>>>>>
36302>>>>>>>        
36302>>>>>>>        Function_Return bErr
36303>>>>>>>    End_Function
36304>>>>>>>    
36304>>>>>>>    Procedure Entry_Update_Data_Sets Integer iFile Integer iAll
36306>>>>>>>        
36306>>>>>>>        Handle hoBuff hoDSO
36306>>>>>>>        Boolean bCommit bIsFind bVisited bIsForeign
36306>>>>>>>        Integer iMax iCount iItems iOpts iChanges
36306>>>>>>>        
36306>>>>>>>        
36306>>>>>>>        Move record_buffer to hoBuff
36307>>>>>>>        Move (OPERATION_MODE<>MODE_SAVING) to bIsFind
36308>>>>>>>        
36308>>>>>>>        // first recurse to all parent ddos
36308>>>>>>>        Get Data_Set_Server_Count to iMax
36309>>>>>>>        Decrement iMax
36310>>>>>>>        For iCount from 0 to iMax
36316>>>>>>>>
36316>>>>>>>            Get Data_Set_Server iCount to hoDSO
36317>>>>>>>            Get Visited_State of hoDSO to bVisited
36318>>>>>>>            If not (bVisited) Begin
36320>>>>>>>                Send Entry_Update_Data_Sets to hoDSO iFile iAll
36321>>>>>>>            End
36321>>>>>>>>
36321>>>>>>>        Loop
36322>>>>>>>>
36322>>>>>>>        
36322>>>>>>>        // if find, we only do this if the main file is the same as the find file
36322>>>>>>>        If (not(bIsFind) or iFile=Main_File(Self)) Begin
36324>>>>>>>            If (not(bIsFind)) Begin
36326>>>>>>>                // if a save, we care if it is committed.
36326>>>>>>>                Get IsCommitted to bCommit
36327>>>>>>>            End
36327>>>>>>>>
36327>>>>>>>            
36327>>>>>>>            // pass if Find (True) or save (False). We only care about commit on saves
36327>>>>>>>            // The setting of bIsForeign is an approximation. Foreign is really a DEO and and not
36327>>>>>>>            // a DD concept - in fact, at this point we don't really know. For example, a save in a header/dtl
36327>>>>>>>            // detail DEO (ordrdtl grid)has header DEOs that are not really foreign. This test errs on the side
36327>>>>>>>            // of assuming it's foreign. This would cause problems with incorrect parent NoPuts except we also
36327>>>>>>>            // set a flag, Field_NoPutValueChangedByDeo, when a field is changed via a NoPut DEO. The DD will still update
36327>>>>>>>            // foreign NoPuts unless this field flag is set.
36327>>>>>>>            Move (OPERATION_ORIGIN<>Self and Allow_Foreign_New_Save_State(Self)=0) to bIsForeign
36328>>>>>>>            Send Entry_Update of hoBuff bIsFind (If(bCommit,1,0) + If(bIsForeign,2,0))
36329>>>>>>>            
36329>>>>>>>            // also move data from extended dd fields to buffer
36329>>>>>>>            Send ExtendedFieldsUpdate (not(bIsFind))
36330>>>>>>>        End
36330>>>>>>>>
36330>>>>>>>        Set Visited_State to True
36331>>>>>>>        
36331>>>>>>>    End_Procedure
36332>>>>>>>    
36332>>>>>>>    // is this field NoPut based passed Commit and Foreign flags.
36332>>>>>>>    Function FieldNoPut Integer iField Boolean bIsCommited Boolean bIsForeign Returns Boolean
36334>>>>>>>        Boolean bNoPut
36334>>>>>>>        // this uses runtime logic - the same use for moving DD Buffer to Field Buffer
36334>>>>>>>        Get IsFieldDDNoPut of Record_Buffer iField (If(bIsCommited,1,0) + If(bIsForeign,2,0)) to bNoPut
36335>>>>>>>        Function_Return bNoPut
36336>>>>>>>    End_Function
36337>>>>>>>    
36337>>>>>>>    
36337>>>>>>>    // Check that Server data-sets exist for all required server file numbers
36337>>>>>>>    Function Valid_Servers Returns Integer
36339>>>>>>>        Integer iRval
36339>>>>>>>        Integer iCount
36339>>>>>>>        Integer iMax
36339>>>>>>>        Integer iDSO
36339>>>>>>>        Integer iPos
36339>>>>>>>        Integer iFile
36339>>>>>>>        String  sFiles
36339>>>>>>>        
36339>>>>>>>        // First assemble a string of all server file#s in ','##',' format
36339>>>>>>>        Move ',' to sFiles
36340>>>>>>>        Get Data_Set_Server_Count to iMax
36341>>>>>>>        Decrement iMax
36342>>>>>>>        For iCount from 0 to iMax
36348>>>>>>>>
36348>>>>>>>            Get Data_Set_Server iCount to iDSO
36349>>>>>>>            Move ( sFiles + String(Main_file(iDSO)) + ",") to sFiles
36350>>>>>>>        Loop
36351>>>>>>>>
36351>>>>>>>        
36351>>>>>>>        // Make sure each required File exists
36351>>>>>>>        Get Server_File_Count to iMax
36352>>>>>>>        Decrement iMax
36353>>>>>>>        For iCount from 0 to iMax
36359>>>>>>>>
36359>>>>>>>            Get Server_File iCount to iFile
36360>>>>>>>            Move (Pos ( ','+String(iFile)+',' , sFiles)) to iPos
36361>>>>>>>            If (iPos = 0) ;                Move iFile to iRVal
36364>>>>>>>        Until iRval
36366>>>>>>>        Function_Return iRVal
36367>>>>>>>    End_Function
36368>>>>>>>    
36368>>>>>>>    
36368>>>>>>>    // Check that Client data-sets exist for all required Client file numbers
36368>>>>>>>    Function Valid_Clients Returns Integer
36370>>>>>>>        Integer iRval
36370>>>>>>>        Integer iCount
36370>>>>>>>        Integer iMax
36370>>>>>>>        Integer iDSO
36370>>>>>>>        Integer iPos
36370>>>>>>>        Integer iFile
36370>>>>>>>        String  sFiles
36370>>>>>>>        
36370>>>>>>>        // First assemble a string of all Client file#s in ','##',' format
36370>>>>>>>        Move ',' to sFiles
36371>>>>>>>        Get Data_Set_Client_Count to iMax
36372>>>>>>>        Decrement iMax
36373>>>>>>>        For iCount from 0 to iMax
36379>>>>>>>>
36379>>>>>>>            Get Data_Set_Client iCount to iDSO
36380>>>>>>>            Move ( sFiles + String(Main_file(iDSO))+",") to sFiles
36381>>>>>>>        Loop
36382>>>>>>>>
36382>>>>>>>        
36382>>>>>>>        // Make sure each required File exists
36382>>>>>>>        Get Client_File_Count to iMax
36383>>>>>>>        Decrement iMax
36384>>>>>>>        For iCount from 0 to iMax
36390>>>>>>>>
36390>>>>>>>            Get Client_File iCount to iFile
36391>>>>>>>            Move (Pos( ','+String(iFile)+',', sFiles)) to iPos
36392>>>>>>>            If (iPos = 0) ;                Move iFile to iRVal
36395>>>>>>>        Until iRval
36397>>>>>>>        Function_Return iRVal
36398>>>>>>>    End_Function
36399>>>>>>>    
36399>>>>>>>    
36399>>>>>>>    // Validates save updating connections. If error returns file# that is
36399>>>>>>>    // expected and missing. If no error Set Validated_Save_connectio_State
36399>>>>>>>    // indicating that the connection validation has occurred and is ok
36399>>>>>>>    Function Validate_Save_Structure Integer ForceFg Returns Integer
36401>>>>>>>        Integer iRval
36401>>>>>>>        Integer iMode
36401>>>>>>>        If not ForceFg Begin
36403>>>>>>>            Get Validate_Save_Structure_Mode to iMode
36404>>>>>>>            Move ( iMode=DD_VALIDATE_STRUCTURE_ALWAYS or ;                (iMode=DD_VALIDATE_STRUCTURE_ONCE and ;                Save_Structure_Validated_state(Self)=0 ) ) ;                to ForceFg
36405>>>>>>>        End
36405>>>>>>>>
36405>>>>>>>        If ForceFg Begin
36407>>>>>>>            Get Valid_Structure False to iRval
36408>>>>>>>            If (iRVal = 0) ;                Set Save_Structure_Validated_State to True
36411>>>>>>>        End
36411>>>>>>>>
36411>>>>>>>        Function_Return iRVal
36412>>>>>>>    End_Function
36413>>>>>>>    
36413>>>>>>>    // Validates Delete Structure. If cascade_state is true this must check
36413>>>>>>>    // up and down the tree. If no cascade_state just check up the tree.  If
36413>>>>>>>    // Ok, set Validated_Delete_no_Cascade_Connection_State and and or
36413>>>>>>>    // Validated_Delete_Cascade_Connection_State
36413>>>>>>>    // Pass: ForceFg - if TRUE force the validation.
36413>>>>>>>    Function Validate_Delete_Structure Integer ForceFg Returns Integer
36415>>>>>>>        Integer iCascade
36415>>>>>>>        Integer iMode
36415>>>>>>>        Integer iSt
36415>>>>>>>        Integer iRval
36415>>>>>>>        Get Cascade_delete_State to iCascade
36416>>>>>>>        If not ForceFg Begin
36418>>>>>>>            Get Validate_Delete_Structure_Mode to iMode
36419>>>>>>>            If (iMode=DD_VALIDATE_STRUCTURE_ONCE and iCascade );                Get Cascade_Delete_Structure_Validated_state to iSt
36422>>>>>>>            Else ;                Get No_Cascade_Delete_Structure_Validated_state to iSt
36424>>>>>>>            Move ( iMode=DD_VALIDATE_STRUCTURE_ALWAYS or ;                (iMode=DD_VALIDATE_STRUCTURE_ONCE and iSt=0) ) to ForceFg
36425>>>>>>>        End
36425>>>>>>>>
36425>>>>>>>        
36425>>>>>>>        If ForceFg Begin
36427>>>>>>>            Get Valid_Structure iCascade to iRval
36428>>>>>>>            If (iRval = 0) Begin
36430>>>>>>>                Set No_Cascade_Delete_Structure_Validated_State to True
36431>>>>>>>                If iCascade ;                    Set Cascade_Delete_Structure_Validated_State to True
36434>>>>>>>            End
36434>>>>>>>>
36434>>>>>>>        End
36434>>>>>>>>
36434>>>>>>>        Function_Return iRval
36435>>>>>>>    End_Function
36436>>>>>>>    
36436>>>>>>>    
36436>>>>>>>    // This procedure will be called whenever the Data_Set wants its DEOs to
36436>>>>>>>    // write their values to the record buffer. The value of OPERATION_MODE
36436>>>>>>>    // determines if this is for finding an record or before saving a record.
36436>>>>>>>    // We use this event to tell our Record_Buffer to update the
36436>>>>>>>    // global record buffer.
36436>>>>>>>    // Modified to visit all server DSOs
36436>>>>>>>    // Note that this is only sent to the DSO starting the operation.
36436>>>>>>>    // We must manually send this to all server data-sets ourselves
36436>>>>>>>    // Note that during a DSO save this will get passed iFile=0 and iAll=3
36436>>>>>>>    // Changed to Support EntryUpdateLocalState (private)
36436>>>>>>>    // as of 17.0, EntryUpdateLocalState is True which means that entry_updates
36436>>>>>>>    // for finds now through the DD Buffer (saves always did).
36436>>>>>>>    Procedure Request_Entry_Update Integer iFile Integer iAll
36438>>>>>>>        If ((Operation_Mode=MODE_SAVING and iAll=3) or (EntryUpdateLocalState(Self)) ) Begin //3=dso save
36440>>>>>>>            If (OPERATION_MODE=MODE_WAITING) Begin
36442>>>>>>>                // we will only not be in an operation if we are doing a find with EntryUpdateLocalState
36442>>>>>>>                // set to true. In such a case make this a finding. I am not this is actually needed
36442>>>>>>>                Send Update_Focus_Field_For_Operation MODE_FINDING
36443>>>>>>>            End
36443>>>>>>>>
36443>>>>>>>            Else Begin
36444>>>>>>>                // if here we already have an operation_mode so there is no need to do anything special
36444>>>>>>>                Send Update_Focus_Field // Make sure buffer has latest focus item changes
36445>>>>>>>            End
36445>>>>>>>>
36445>>>>>>>            Send Initialize_Visited False False // Clear up, do not clear fields
36446>>>>>>>            Send Entry_Update_Data_Sets iFile iAll
36447>>>>>>>        End
36447>>>>>>>>
36447>>>>>>>        Forward Send Request_Entry_Update iFile iAll
36449>>>>>>>    End_Procedure
36450>>>>>>>    
36450>>>>>>>    
36450>>>>>>>    
36450>>>>>>>    // Forces the focus field to get update its value with the data-set.
36450>>>>>>>    // This insures that the DSO and DEO contain the same values.
36450>>>>>>>    Procedure Update_Focus_Field
36452>>>>>>>        Integer iFocObj
36452>>>>>>>        Get Focus of desktop to iFocObj
36453>>>>>>>        If (Extended_DEO_State(iFocObj)) ;            Send Update_Focus_Field to iFocObj
36456>>>>>>>    End_Procedure
36457>>>>>>>    
36457>>>>>>>    // very internal. Used to set Operation_mode and Operation_origin before the
36457>>>>>>>    // update. A developer can use this in the DEO to know what state the update is in.
36457>>>>>>>    // This was created because a DEO value change will trigger an OnChange event and you
36457>>>>>>>    // can look at this and know that this is part of a DD operation.
36457>>>>>>>    // This is *only* called by the DD operations in this class and the change is made for as
36457>>>>>>>    // small of a period as possible.
36457>>>>>>>    Procedure Update_Focus_Field_For_Operation Integer iOperationMode
36459>>>>>>>        Integer iOldMode iOldOrigin
36459>>>>>>>        
36459>>>>>>>        Move OPERATION_MODE to iOldMode
36460>>>>>>>        Move OPERATION_ORIGIN to iOldOrigin
36461>>>>>>>        Move iOperationMode to OPERATION_MODE
36462>>>>>>>        Move Self to OPERATION_ORIGIN
36463>>>>>>>        Send Update_Focus_Field
36464>>>>>>>        Move iOldMode to OPERATION_MODE
36465>>>>>>>        Move iOldOrigin to OPERATION_ORIGIN
36466>>>>>>>    End_Procedure
36467>>>>>>>    
36467>>>>>>>    
36467>>>>>>>    // Augment to validate all field values that do not get
36467>>>>>>>    // validated as part of the item validation process. The advantage
36467>>>>>>>    // of item validation (over only field validation) is that an error
36467>>>>>>>    // returns you to the offending item.
36467>>>>>>>    Function Request_Validate Returns Integer
36469>>>>>>>        Integer iRetval iOldOrigin iOldMode iRetVal2
36469>>>>>>>        Handle[] DDsWithFindReqErrors
36470>>>>>>>        
36470>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
36472>>>>>>>            Send Update_Focus_Field_For_Operation MODE_VALIDATING // added 12.1/15.1
36473>>>>>>>        End
36473>>>>>>>>
36473>>>>>>>        Move Operation_Origin to iOldOrigin
36474>>>>>>>        Move Self to Operation_Origin
36475>>>>>>>        Move Operation_Mode to iOldMode
36476>>>>>>>        // clear all find req DD markers at the origin of the validate request. When request validates occur
36476>>>>>>>        // they will get added to this array and can be tested to see of such an error has occurred.
36476>>>>>>>        Set pDDsWithFindReqErrors to DDsWithFindReqErrors
36477>>>>>>>        // Prior to VDF7, we set this to Mode_Saving. We now have a special mode just for request_validate.
36477>>>>>>>        // We do this because:
36477>>>>>>>        //   1) because it is useful (more detail never hurts) and
36477>>>>>>>        //   2) we will allow set_field_current_value to update when mode_validation is set
36477>>>>>>>        Move MODE_VALIDATING to Operation_Mode
36478>>>>>>>        Send Initialize_Visited False True //false=up only, true=clear fields
36479>>>>>>>        Forward Get Request_Validate to iRetval // normal deo validate
36481>>>>>>>        // If DEO validation failed, do not validate other fields unless Validate_All_Fields is set
36481>>>>>>>        If ( (iRetval=0 or (Validate_All_Fields_State(Self))) and Validate_DEOs_Only_State(Self)=0) Begin
36483>>>>>>>            Get Validate_Data_Sets False (Validate_All_Fields_State(Self)) to iRetval2
36484>>>>>>>            Move (iRetval or iRetVal2) to iRetval
36485>>>>>>>        End
36485>>>>>>>>
36485>>>>>>>        
36485>>>>>>>        If (iRetval=0) Begin
36487>>>>>>>            Get ValidateSwitchedCommittedParents True to iRetval
36488>>>>>>>        End
36488>>>>>>>>
36488>>>>>>>        
36488>>>>>>>        Move iOldMode   to Operation_Mode
36489>>>>>>>        Move iOldOrigin to Operation_Origin
36490>>>>>>>        Function_Return iRetval
36491>>>>>>>    End_Function
36492>>>>>>>    
36492>>>>>>>    Function Request_Validate_All Returns Integer
36494>>>>>>>        Integer bOld iRetVal
36494>>>>>>>        Get Validate_All_Fields_State to bOld
36495>>>>>>>        Set Validate_All_Fields_State to True
36496>>>>>>>        Get request_validate to iretVal
36497>>>>>>>        Set Validate_All_Fields_State to bOld
36498>>>>>>>        Function_Return iRetval
36499>>>>>>>    End_Function
36500>>>>>>>    
36500>>>>>>>    
36500>>>>>>>    
36500>>>>>>>    // Like Item_find except entry-update is forced through the DD, not DEO
36500>>>>>>>    Procedure File_Field_Find Integer iFindMode Integer iFile Integer iField ;            Integer bEntUpdt  Integer bShowErr Integer bDfrd
36502>>>>>>>        Integer bOld
36502>>>>>>>        Get EntryUpdateLocalState to bOld
36503>>>>>>>        Set EntryUpdateLocalState to True
36504>>>>>>>        Send Item_Find iFindMode iFile iField bEntUpdt bShowErr bDfrd
36505>>>>>>>        Set EntryUpdateLocalState to bOld
36506>>>>>>>    End_Procedure
36507>>>>>>>    
36507>>>>>>>    // Autofind for requestd file, field and mode.
36507>>>>>>>    //    If mode not passed, EQ is assummed
36507>>>>>>>    Procedure File_Field_AutoFind Integer iFile Integer iField Integer iFindMode
36509>>>>>>>        Integer eMode
36509>>>>>>>        If iFile  Begin
36511>>>>>>>            // if no 3rd argument, default to autofind
36511>>>>>>>            Move (If(Num_Arguments<3,EQ,iFindMode)) to eMode
36512>>>>>>>            Send File_Field_Find eMode iFile iField True False False
36513>>>>>>>        End
36513>>>>>>>>
36513>>>>>>>    End_Procedure
36514>>>>>>>    
36514>>>>>>>    // Autofind in default mode (does not set changed states). Can be used
36514>>>>>>>    // within Clear and Clear_all to autofind parents. Parent values can be
36514>>>>>>>    // maintained using retainAll option
36514>>>>>>>    Procedure File_Field_Default_AutoFind Integer iFile Integer iField
36516>>>>>>>        Integer iOldState
36516>>>>>>>        Handle  hoDD
36516>>>>>>>        Get Data_set iFile to hoDD
36517>>>>>>>        If hoDD Begin
36519>>>>>>>            Get Change_disabled_State of hoDD to iOldState
36520>>>>>>>            Set Change_disabled_State of hoDD to True
36521>>>>>>>            Send File_Field_AutoFind  of hoDD iFile iField EQ
36522>>>>>>>            Set Change_disabled_State of hoDD to iOldState
36523>>>>>>>            Set changed_state to False
36524>>>>>>>        End
36524>>>>>>>>
36524>>>>>>>    End_Procedure
36525>>>>>>>    
36525>>>>>>>    // File_Index_find
36525>>>>>>>    // Like item_find except you pass the index you want to find with and
36525>>>>>>>    // ent-update occurs through DDO buffers not deo buffers.
36525>>>>>>>    // This is currently private and is only used by web-applications
36525>>>>>>>    Procedure File_Index_Find Integer iFindMode Integer iFile Integer iIndex ;            Integer bEntUpdt  Integer bShowErr Integer bDfrd
36527>>>>>>>        Integer bOld
36527>>>>>>>        RowID riRec
36527>>>>>>>        Integer wasChanged hDD iOldStat
36527>>>>>>>        Boolean bOk
36527>>>>>>>        
36527>>>>>>>        Get Data_Set iFile to hDD
36528>>>>>>>        If (hDD=0) Begin
36530>>>>>>>            Error DFERR_PROGRAM C_$CannotFindDD
36531>>>>>>>>
36531>>>>>>>            Procedure_Return
36532>>>>>>>        End
36532>>>>>>>>
36532>>>>>>>        
36532>>>>>>>        Get EntryUpdateLocalState to bOld
36533>>>>>>>        Set EntryUpdateLocalState to True
36534>>>>>>>        
36534>>>>>>>        //  'hold' buffer to prepare for entry_update
36534>>>>>>>        Move (getRowId(iFile)) to riRec
36535>>>>>>>        Get_Attribute DF_FILE_STATUS of iFile to iOldStat
36538>>>>>>>        Set_Attribute DF_FILE_STATUS of iFile to DF_FILE_INACTIVE
36541>>>>>>>        
36541>>>>>>>        If bEntUpdt Begin
36543>>>>>>>            Send Request_Entry_Update to hDD iFile 1  //entUpdt all DEOs as required
36544>>>>>>>            
36544>>>>>>>            //
36544>>>>>>>            // we really only need to know if any segment of the index changed
36544>>>>>>>            // but since we don't have field-changed flags, we look at the
36544>>>>>>>            // whole recbuf - this is consistent with 2.3b and 3.0 non-dataset
36544>>>>>>>            // behavior.
36544>>>>>>>            //
36544>>>>>>>            Move (iOldStat<>DF_FILE_INACTIVE) to wasChanged
36545>>>>>>>            If not wasChanged ;                Get_Attribute DF_FILE_CHANGED of iFile to wasChanged
36550>>>>>>>            If not wasChanged ;                Constrained_Clear iFindMode iFile by iIndex
36555>>>>>>>            
36555>>>>>>>        End
36555>>>>>>>>
36555>>>>>>>        Move False to Err
36556>>>>>>>        If bDfrd ;            Send Request_Read iFindMode iFile iIndex
36559>>>>>>>        Else ;            Send Request_Find iFindMode iFile iIndex
36561>>>>>>>        If (not(Found) and  not(err)) Begin
36563>>>>>>>            // refind original record (or leave it cleared if not record)
36563>>>>>>>            Move (FindByRowId(iFile,riRec)) to bOk
36564>>>>>>>            
36564>>>>>>>            If bShowErr ;                Error (If(iFindMode<2, DFERR_FIND_PRIOR_BEG_OF_FILE, DFERR_FIND_PAST_END_OF_FILE))
36567>>>>>>>            Move False to Err
36568>>>>>>>        End
36568>>>>>>>>
36568>>>>>>>        Set EntryUpdateLocalState to bOld
36569>>>>>>>    End_Procedure
36570>>>>>>>    
36570>>>>>>>    // This does a refind of all records based on the contents of the
36570>>>>>>>    // refine_record_id property.
36570>>>>>>>    // This would be used after clearing the DDs and loading the local rencum
36570>>>>>>>    // buffer with recnums. This can be used by remote DEOs (BPOs).
36570>>>>>>>    //
36570>>>>>>>    // Find all existing records. This must be done in bottom-up, breadth
36570>>>>>>>    // first order. i.e., Start with the passed DD, find it and then find for
36570>>>>>>>    // parents. Only find if the record is non-zero and it is different than
36570>>>>>>>    // the current_record.
36570>>>>>>>    // This order will allow us to support changed parents.
36570>>>>>>>    // Don't use this if you do not understand what it does.
36570>>>>>>>    // Private.Find_Records is a helper. We will keep this private because
36570>>>>>>>    // it is rather specialized and only used by WebApp.
36570>>>>>>>    Procedure Find_Records
36572>>>>>>>        Send Initialize_Visited False False // Clear up, do not clear fields
36573>>>>>>>        Send Private.Find_Records           // refind all records in upward sweep
36574>>>>>>>    End_Procedure
36575>>>>>>>    
36575>>>>>>>    
36575>>>>>>>    Procedure Private.Find_Records
36577>>>>>>>        Integer hPrnt
36577>>>>>>>        Integer iMax
36577>>>>>>>        Integer iCount
36577>>>>>>>        RowID riRec
36577>>>>>>>        Integer iRec iMain
36577>>>>>>>        // works with both recId and rowId. Only one should ever be set.
36577>>>>>>>        // find(clear) record, if needed
36577>>>>>>>        Get Main_File to iMain
36578>>>>>>>        // assume that either prFindRowId or Find_record_id has a value - never both
36578>>>>>>>        // also assume Find_record_id only has values when you are using a recnum table
36578>>>>>>>        Get prFindRowId to riRec
36579>>>>>>>        If not (IsNullRowId(riRec)) Begin
36581>>>>>>>            If not (IsSameRowId(riRec, CurrentRowId(Self) ) ) Begin
36583>>>>>>>                Send FindByRowId iMain riRec // find an Relate all parents
36584>>>>>>>            End
36584>>>>>>>>
36584>>>>>>>            Set prFindRowId to (NullRowId())  // reset refind rec back to zero.
36585>>>>>>>        End
36585>>>>>>>>
36585>>>>>>>        Else Begin
36586>>>>>>>            // if this has a recnum, it better be a recnum table or an error will occur.
36586>>>>>>>            // This is not being tested for a recnum table on purpose. If someone is setting Find_record_id
36586>>>>>>>            // on a non-recnum table, they doing something wrong. An Error will be a good thing.
36586>>>>>>>            Get Find_Record_Id to iRec
36587>>>>>>>            If iRec Begin
36589>>>>>>>                If (iRec<>Current_record(Self)) Begin
36591>>>>>>>                    Send Find_By_Recnum iMain iRec // find an Relate all parents
36592>>>>>>>                End
36592>>>>>>>>
36592>>>>>>>                Set Find_record_id to 0 // reset refind rec back to zero.
36593>>>>>>>            End
36593>>>>>>>>
36593>>>>>>>        End
36593>>>>>>>>
36593>>>>>>>        Set Visited_State to True
36594>>>>>>>        
36594>>>>>>>        // recurse and do the same to all parent files
36594>>>>>>>        // in almost all cases, there will be no new finding here since the relate has
36594>>>>>>>        // found the records. If the record is different than the relate, we have
36594>>>>>>>        // a switched parent state (should_save will be set appropriately).
36594>>>>>>>        Get Data_Set_Server_Count to iMax
36595>>>>>>>        Decrement iMax
36596>>>>>>>        For iCount from 0 to iMax
36602>>>>>>>>
36602>>>>>>>            Get Data_Set_Server iCount to hPrnt
36603>>>>>>>            If not (Visited_state(hPrnt)) ;                Send Private.Find_Records to hPrnt
36606>>>>>>>        Loop
36607>>>>>>>>
36607>>>>>>>    End_Procedure
36608>>>>>>>    
36608>>>>>>>    // This Mark_Id creates a sequence Id for this clear. This way
36608>>>>>>>    // DDOs only get cleared one time during this process.
36608>>>>>>>    Procedure IncrementCurrentMarkId
36610>>>>>>>        If (DD_Current_Mark_ID>65536) Begin
36612>>>>>>>            Move 0 to DD_Current_Mark_id
36613>>>>>>>        End
36613>>>>>>>>
36613>>>>>>>        Increment DD_Current_Mark_id
36614>>>>>>>    End_Procedure
36615>>>>>>>    
36615>>>>>>>    
36615>>>>>>>    // private use by new webapp framework as of 18.2.
36615>>>>>>>    // pass bStart as True if this is the start of the resynch.
36615>>>>>>>    Function ReSyncRecords Boolean bStart Returns Handle
36617>>>>>>>        RowID riRowId riCrnt
36617>>>>>>>        Boolean bOk bOldReSync bVisited
36617>>>>>>>        Handle hoOtherDDO hoBadDDO hoBadPrntDDO
36617>>>>>>>        Integer iMax iCount iMain
36617>>>>>>>
36617>>>>>>>        If bStart Begin
36619>>>>>>>            Send InitializeAllVisited
36620>>>>>>>        End
36620>>>>>>>>
36620>>>>>>>        
36620>>>>>>>        // we want depth first traversal. Make sure children are handled before parents
36620>>>>>>>        // Recursively traverse Children, Find by RowId, Recursively traverse Parents
36620>>>>>>>        // Use visited_state logic to avoid multiple visits caused by diamond DDO strutures
36620>>>>>>>        
36620>>>>>>>        //mark first so we don't visit this coming back up.
36620>>>>>>>        Set Visited_State to True
36621>>>>>>>        
36621>>>>>>>        // traverse downward first
36621>>>>>>>        Get Data_Set_Client_Count to iMax
36622>>>>>>>        For iCount from 0 to (iMax-1)
36628>>>>>>>>
36628>>>>>>>            Get Data_Set_Client iCount to hoOtherDDO
36629>>>>>>>            Get Visited_State of hoOtherDDO to bVisited
36630>>>>>>>            If not bVisited Begin
36632>>>>>>>                Get ReSyncRecords of hoOtherDDO False to hoBadPrntDDO
36633>>>>>>>                If (hoBadPrntDDO and not(hoBadDDO)) Begin
36635>>>>>>>                    Move hoBadPrntDDO to hoBadDDO
36636>>>>>>>                End
36636>>>>>>>>
36636>>>>>>>            End
36636>>>>>>>>
36636>>>>>>>        Loop
36637>>>>>>>>
36637>>>>>>>        
36637>>>>>>>        // Find record for DD. It might already be correct if child has already
36637>>>>>>>        // related it in. If not correct after a relate, this has been switched by this
36637>>>>>>>        // user or switched by another user, in which case it will be swtitched back
36637>>>>>>>        // (DDOs have always worked this way).
36637>>>>>>>        Get prFindRowId to riRowId
36638>>>>>>>        Get Main_File to iMain
36639>>>>>>>        Get CurrentRowId to riCrnt
36640>>>>>>>        If ( not(IsSameRowId(riRowID, riCrnt)) ) Begin
36642>>>>>>>            Get pbInReSync to bOldReSync
36643>>>>>>>            Set pbInReSync to True
36644>>>>>>>            
36644>>>>>>>            If (IsNullRowId(riRowID)) Begin
36646>>>>>>>                Send Clear
36647>>>>>>>            End
36647>>>>>>>>
36647>>>>>>>            Else Begin
36648>>>>>>>                Get FindByRowIdExNoAutoFill iMain riRowId to bOk
36649>>>>>>>                If not bOk Begin
36651>>>>>>>                    Move Self to hoBadDDO
36652>>>>>>>                End
36652>>>>>>>>
36652>>>>>>>            End
36652>>>>>>>>
36652>>>>>>>            Set pbInReSync to bOldReSync
36653>>>>>>>        End
36653>>>>>>>>
36653>>>>>>>        
36653>>>>>>>        // finally traverse to parents
36653>>>>>>>        Get Data_Set_Server_Count to iMax
36654>>>>>>>        For iCount from 0 to (iMax-1)
36660>>>>>>>>
36660>>>>>>>            Get Data_Set_Server iCount to hoOtherDDO
36661>>>>>>>            Get Visited_State of hoOtherDDO to bVisited
36662>>>>>>>            If not bVisited Begin
36664>>>>>>>                Get ReSyncRecords of hoOtherDDO False to hoBadPrntDDO
36665>>>>>>>                If (hoBadPrntDDO and not(hoBadDDO)) Begin
36667>>>>>>>                    Move hoBadPrntDDO to hoBadDDO
36668>>>>>>>                End
36668>>>>>>>>
36668>>>>>>>            End
36668>>>>>>>>
36668>>>>>>>        Loop
36669>>>>>>>>
36669>>>>>>>        
36669>>>>>>>        If bStart Begin
36671>>>>>>>            Send InitializeAllVisited
36672>>>>>>>            Send ResetChangedStates
36673>>>>>>>        End
36673>>>>>>>>
36673>>>>>>>        
36673>>>>>>>        Function_Return hoBadDDO
36674>>>>>>>    End_Function
36675>>>>>>>    
36675>>>>>>>
36675>>>>>>>    Procedure ResetChangedStates
36677>>>>>>>        Boolean bVisited
36677>>>>>>>        Handle hoOtherDDO
36677>>>>>>>        Integer iMax iCount
36677>>>>>>>        tDDChangedInfo DDChangedInfo
36677>>>>>>>        tDDChangedInfo DDChangedInfo
36677>>>>>>>                
36677>>>>>>>        // we want depth first traversal.
36677>>>>>>>        //mark first so we don't visit this coming back up.
36677>>>>>>>        Set Visited_State to True
36678>>>>>>>        
36678>>>>>>>        // traverse downward first
36678>>>>>>>        Get Data_Set_Client_Count to iMax
36679>>>>>>>        For iCount from 0 to (iMax-1)
36685>>>>>>>>
36685>>>>>>>            Get Data_Set_Client iCount to hoOtherDDO
36686>>>>>>>            Get Visited_State of hoOtherDDO to bVisited
36687>>>>>>>            If not bVisited Begin
36689>>>>>>>                Send ResetChangedStates of hoOtherDDO
36690>>>>>>>            End
36690>>>>>>>>
36690>>>>>>>        Loop
36691>>>>>>>>
36691>>>>>>>        
36691>>>>>>>        // Set changed states for this DDO
36691>>>>>>>        Get pDDChangedInfo to DDChangedInfo
36692>>>>>>>        Set Changed_State to False // clears changed_state and parent_changed_states            
36693>>>>>>>        Set Changed_State to DDChangedInfo.bChanged            
36694>>>>>>>        For iCount from 0 to (SizeOfArray(DDChangedInfo.ParentChanged)-1)
36700>>>>>>>>
36700>>>>>>>            Send SetParentDDOSwitched DDChangedInfo.ParentChanged[iCount].iTable DDChangedInfo.ParentChanged[iCount].bSwitched
36701>>>>>>>        Loop
36702>>>>>>>>
36702>>>>>>>        
36702>>>>>>>        // finally traverse to parents
36702>>>>>>>        Get Data_Set_Server_Count to iMax
36703>>>>>>>        For iCount from 0 to (iMax-1)
36709>>>>>>>>
36709>>>>>>>            Get Data_Set_Server iCount to hoOtherDDO
36710>>>>>>>            Get Visited_State of hoOtherDDO to bVisited
36711>>>>>>>            If not bVisited Begin
36713>>>>>>>                Send ResetChangedStates of hoOtherDDO
36714>>>>>>>            End
36714>>>>>>>>
36714>>>>>>>        Loop
36715>>>>>>>>
36715>>>>>>>        
36715>>>>>>>    End_Procedure
36716>>>>>>>
36716>>>>>>>    // private use by new webapp framework (pre 18.2)
36716>>>>>>>    Function ReSyncRecord Returns Boolean
36718>>>>>>>        RowID riRowId
36718>>>>>>>        Boolean bOk bOldReSync
36718>>>>>>>        Handle hPrnt
36718>>>>>>>        Integer iMax iCount iMain
36718>>>>>>>        
36718>>>>>>>        Get pbInReSync to bOldReSync
36719>>>>>>>        
36719>>>>>>>        Get prFindRowId to riRowId
36720>>>>>>>        Get Main_File to iMain
36721>>>>>>>        If not (IsSameRowId(riRowID, CurrentRowId(Self) ) ) Begin
36723>>>>>>>            If (IsNullRowId(riRowID)) Begin
36725>>>>>>>                Set pbInReSync to True
36726>>>>>>>                Send Clear
36727>>>>>>>                Set pbInReSync to bOldReSync
36728>>>>>>>            End
36728>>>>>>>>
36728>>>>>>>            Else Begin
36729>>>>>>>                Set pbInReSync to True
36730>>>>>>>                Get FindByRowIdExNoAutoFill iMain riRowId to bOk
36731>>>>>>>                Set pbInReSync to bOldReSync
36732>>>>>>>                If not bOk Begin
36734>>>>>>>                    Function_Return False
36735>>>>>>>                End
36735>>>>>>>>
36735>>>>>>>            End
36735>>>>>>>>
36735>>>>>>>            
36735>>>>>>>            // check that the relate found all the parent records we expect.
36735>>>>>>>            // This should be correct unless a parent has been switched. Constrained
36735>>>>>>>            // parents, by definition, should already be correct. See **Note** below
36735>>>>>>>            Get Data_Set_Server_Count to iMax
36736>>>>>>>            For iCount from 0 to (iMax-1)
36742>>>>>>>>
36742>>>>>>>                Get Data_Set_Server iCount to hPrnt
36743>>>>>>>                If (Constrain_File(Self)<>Main_File(hPrnt) and ;                    not (IsSameRowID(prFindRowId(hPrnt),CurrentRowId(hPrnt)))) Begin
36745>>>>>>>                    // the parent is either wrong or not processed yet. Either way
36745>>>>>>>                    // make it right.
36745>>>>>>>                    Get ReSyncRecord of hPrnt to bOk
36746>>>>>>>                    If not bOk Begin
36748>>>>>>>                        Function_Return False
36749>>>>>>>                    End
36749>>>>>>>>
36749>>>>>>>                End
36749>>>>>>>>
36749>>>>>>>            Loop
36750>>>>>>>>
36750>>>>>>>        End
36750>>>>>>>>
36750>>>>>>>        
36750>>>>>>>        Function_Return True
36751>>>>>>>    End_Function
36752>>>>>>>    
36752>>>>>>>    // **Note** - dealing with changed parents and diamonds during a resync.
36752>>>>>>>    // If there is not a relates-to contraint between DD and child it is possible
36752>>>>>>>    // that the child find's relate will change the just found parent DD.
36752>>>>>>>    // Assuming this is not a structure bug, it means the parent is changed parent and that
36752>>>>>>>    // change must occur after the child record has been found and related. Therefore we add
36752>>>>>>>    // check after each child find to see if an parent is incorrect. If it is, either it is a
36752>>>>>>>    // switched parent or we haven't processed it yet. If the record is fine it
36752>>>>>>>    // just does nothing. For example (where *=relates-to):
36752>>>>>>>    //     W
36752>>>>>>>    //   */  \*
36752>>>>>>>    //   X    Y
36752>>>>>>>    //    \  /*
36752>>>>>>>    //     Z
36752>>>>>>>    // Assume you found a Z and changed its parent X.
36752>>>>>>>    // The refind order can be: WXZY or WYZX
36752>>>>>>>    // If WXZY the refound parent will be lost because Z will relate after the X
36752>>>>>>>    // find and replace it with the original parent. To control this we add this check
36752>>>>>>>    // after child Z has done its work. We only need to do this when child DDOs exist
36752>>>>>>>    // that are not constrained. This can change the order that DDOs are resynced but it
36752>>>>>>>    // should not matter.
36752>>>>>>>    
36752>>>>>>>    
36752>>>>>>>    
36752>>>>>>>    // Private use by new webapp framework
36752>>>>>>>    Procedure ReSyncClearAll
36754>>>>>>>        Boolean bOldReSync
36754>>>>>>>        Get pbInReSync to bOldReSync
36755>>>>>>>        // we need this to stop RememberLast and retains. We don't want those during a resyc clear
36755>>>>>>>        Set pbInReSync to True
36756>>>>>>>        Send Clear_All
36757>>>>>>>        Set pbInReSync to bOldReSync
36758>>>>>>>    End_Procedure
36759>>>>>>>    
36759>>>>>>>    // returns table name for error display. By default it returns the logical name
36759>>>>>>>    // can be augmented to return other information
36759>>>>>>>    Function ErrorMessageTableName Integer iTable Returns String
36761>>>>>>>        String sTable
36761>>>>>>>        Get_Attribute DF_FILE_LOGICAL_NAME of iTable to sTable
36764>>>>>>>        Function_Return sTable
36765>>>>>>>    End_Function
36766>>>>>>>    
36766>>>>>>>    
36766>>>>>>>    // Augmented to test updating connections.
36766>>>>>>>    // If error report it.
36766>>>>>>>    Procedure Request_Save
36768>>>>>>>        Integer iRval
36768>>>>>>>        String sTable
36768>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
36770>>>>>>>            Send Update_Focus_Field_For_Operation MODE_SAVING // added in 12.1/15.1
36771>>>>>>>            Get Validate_Save_Structure False to iRval
36772>>>>>>>            If iRval Begin
36774>>>>>>>                Get ErrorMessageTableName iRval to sTable
36775>>>>>>>                Move (String(iRval) * "(" - sTable -")") to sTable
36776>>>>>>>                Send Data_Set_Error -1 DFERR_PROGRAM DD_INVALID_SAVE_STRUCTURE sTable
36777>>>>>>>                Procedure_Return
36778>>>>>>>            End
36778>>>>>>>>
36778>>>>>>>        End
36778>>>>>>>>
36778>>>>>>>        Forward Send Request_Save
36780>>>>>>>    End_Procedure
36781>>>>>>>    
36781>>>>>>>    // Augmented to test updating connections.
36781>>>>>>>    // If error report it.
36781>>>>>>>    Procedure Request_Delete
36783>>>>>>>        Integer iRval
36783>>>>>>>        String sTable
36783>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
36785>>>>>>>            Send Update_Focus_Field_For_Operation MODE_DELETING // added to 12.1/15.1
36786>>>>>>>            Get Validate_Delete_Structure False to iRval
36787>>>>>>>            If iRval Begin
36789>>>>>>>                Get ErrorMessageTableName iRval to sTable
36790>>>>>>>                Move (String(iRval) * "(" - sTable -")") to sTable
36791>>>>>>>                Send data_Set_Error -1 DFERR_PROGRAM DD_INVALID_DELETE_STRUCTURE sTable
36792>>>>>>>                Procedure_Return
36793>>>>>>>            End
36793>>>>>>>>
36793>>>>>>>        End
36793>>>>>>>>
36793>>>>>>>        Forward Send Request_Delete
36795>>>>>>>    End_Procedure
36796>>>>>>>    
36796>>>>>>>    // Set status-line help for the passed field. This could have been named
36796>>>>>>>    // Set Field_Status_Help but this keeps this message interface consistent
36796>>>>>>>    // with the rest of DF for windows.
36796>>>>>>>    Procedure Set Status_Help Integer iField String sVal
36798>>>>>>>        Set Value of (StatusHelp_Array(Self)) iField to sVal
36799>>>>>>>    End_Procedure
36800>>>>>>>    
36800>>>>>>>    // Get status-line help for the passed field. This could have been named
36800>>>>>>>    // Get Field_Status_Help but this keeps this message interface consistent
36800>>>>>>>    // with the rest of DF for windows.
36800>>>>>>>    Function Status_Help Integer iField Returns String
36802>>>>>>>        String sHelp
36802>>>>>>>        Integer iObj
36802>>>>>>>        Move (StatusHelp_Array(Self)) to iObj
36803>>>>>>>        If (Item_Count(iObj)>iField) Begin
36805>>>>>>>            Get value of iObj iField to sHelp
36806>>>>>>>            If (sHelp = '0') ;                Move '' to shelp
36809>>>>>>>        End
36809>>>>>>>>
36809>>>>>>>        Function_Return shelp
36810>>>>>>>    End_Function
36811>>>>>>>    
36811>>>>>>>    // Get status-line help for the passed file and field. This is called
36811>>>>>>>    // by DEOs (or any other object) that needs help for a particular file
36811>>>>>>>    // and field.
36811>>>>>>>    Function File_Field_Status_Help Integer iFile Integer iField Returns String
36813>>>>>>>        Integer iDSO
36813>>>>>>>        String sValue
36813>>>>>>>        Get Data_set iFile to iDSO
36814>>>>>>>        If iDSO ;            Get Status_Help of iDSO iField to sValue
36817>>>>>>>        Function_Return sValue
36818>>>>>>>    End_Function
36819>>>>>>>    
36819>>>>>>>    // Allows user to set a mask type. Legal value is any of the current mask
36819>>>>>>>    // window types. 0 Means undefined.
36819>>>>>>>    Procedure Set Field_Mask_Type Integer iField Integer iType
36821>>>>>>>        Set Field_Mask_Type of (FieldMask_Array(Self)) iField to iType
36822>>>>>>>    End_Procedure
36823>>>>>>>    
36823>>>>>>>    Function Field_Mask_Type Integer iField Returns Integer
36825>>>>>>>        Function_Return (Field_Mask_Type(FieldMask_Array(Self),iField))
36826>>>>>>>    End_Function
36827>>>>>>>    
36827>>>>>>>    Function File_Field_Mask_Type Integer iFile Integer iField Returns Integer
36829>>>>>>>        Integer iDSO
36829>>>>>>>        Get Data_set iFile to iDSO
36830>>>>>>>        If iDSO ;            Function_Return (Field_Mask_Type(iDSO,iField))
36833>>>>>>>    End_Function
36834>>>>>>>    
36834>>>>>>>    // If TRUE the value returned by DEO will contain mask characters.
36834>>>>>>>    // Currently not supported.
36834>>>>>>>    Procedure Set Field_Mask_Value_State Integer iField Integer iState
36836>>>>>>>        Set Field_Mask_Value_State of (FieldMask_Array(Self)) iField to iState
36837>>>>>>>    End_Procedure
36838>>>>>>>    
36838>>>>>>>    Function Field_Mask_Value_State Integer iField Returns Integer
36840>>>>>>>        Function_Return (Field_Mask_Value_State(FieldMask_Array(Self),iField))
36841>>>>>>>    End_Function
36842>>>>>>>    
36842>>>>>>>    Function File_Field_Mask_Value_State Integer iFile Integer iField Returns Integer
36844>>>>>>>        Integer iDSO
36844>>>>>>>        Get Data_set iFile to iDSO
36845>>>>>>>        If iDSO ;            Function_Return (Field_Mask_Value_State(iDSO,iField))
36848>>>>>>>    End_Function
36849>>>>>>>    
36849>>>>>>>    // Allows user to set a mask strinng. Legal value is any of the current
36849>>>>>>>    // masks. Note an empty string with a valid mask type implies that the
36849>>>>>>>    // system should figure it out by itself.
36849>>>>>>>    Procedure Set Field_Mask Integer iField String sMask
36851>>>>>>>        Set Field_Mask of (FieldMask_Array(Self)) iField to sMask
36852>>>>>>>        If (Data_Set_User_Interface_Count(Self)) ;            Send Field_Mask_Changed iField sMask
36855>>>>>>>    End_Procedure
36856>>>>>>>    
36856>>>>>>>    Function Field_Mask Integer iField Returns String
36858>>>>>>>        Function_Return (Field_Mask(FieldMask_Array(Self),iField))
36859>>>>>>>    End_Function
36860>>>>>>>    
36860>>>>>>>    Function File_Field_Mask Integer iFile Integer iField Returns String
36862>>>>>>>        Integer iDSO
36862>>>>>>>        String sValue
36862>>>>>>>        Get Data_set iFile to iDSO
36863>>>>>>>        If iDSO ;            Get Field_Mask of iDSO iField to sValue
36866>>>>>>>        Function_Return sValue
36867>>>>>>>    End_Function
36868>>>>>>>    
36868>>>>>>>    // Short for field. This is normally used by grid headers.
36868>>>>>>>    Procedure Set Field_Label_Short Integer iField String sName
36870>>>>>>>        Set Field_Label_Short of (FieldMask_Array(Self)) iField to sName
36871>>>>>>>        If (Data_Set_User_Interface_Count(Self)) ;            Send Field_Label_Changed iField 0 sName
36874>>>>>>>    End_Procedure
36875>>>>>>>    
36875>>>>>>>    Function Field_Label_Short Integer iField Returns String
36877>>>>>>>        Function_Return (Field_Label_Short(FieldMask_Array(Self),iField))
36878>>>>>>>    End_Function
36879>>>>>>>    
36879>>>>>>>    Function File_Field_Label_Short Integer iFile Integer iField Returns String
36881>>>>>>>        Integer iDSO
36881>>>>>>>        String sValue
36881>>>>>>>        Get Data_set iFile to iDSO
36882>>>>>>>        If iDSO ;            Get Field_Label_Short of iDSO iField to sValue
36885>>>>>>>        Function_Return sValue
36886>>>>>>>    End_Function
36887>>>>>>>    
36887>>>>>>>    // Full Name for field. This is normally used by form labels
36887>>>>>>>    Procedure Set Field_Label_Long Integer iField String sName
36889>>>>>>>        Set Field_Label_Long of (FieldMask_Array(Self)) iField to sName
36890>>>>>>>        If (Data_Set_User_Interface_Count(Self)) ;            Send Field_Label_Changed iField 1 sName
36893>>>>>>>    End_Procedure
36894>>>>>>>    
36894>>>>>>>    Function Field_Label_Long Integer iField Returns String
36896>>>>>>>        Function_Return (Field_Label_Long(FieldMask_Array(Self),iField))
36897>>>>>>>    End_Function
36898>>>>>>>    
36898>>>>>>>    Function File_Field_Label_Long Integer iFile Integer iField Returns String
36900>>>>>>>        Integer iDSO
36900>>>>>>>        String sValue
36900>>>>>>>        Get Data_set iFile to iDSO
36901>>>>>>>        If iDSO ;            Get Field_Label_Long of iDSO iField to sValue
36904>>>>>>>        Function_Return sValue
36905>>>>>>>    End_Function
36906>>>>>>>    
36906>>>>>>>    // This is not really a DD attribute (it is in the API) but it is
36906>>>>>>>    // appropriate to be accessed from the DD
36906>>>>>>>    Function Field_Label_Tag Integer iField Returns String
36908>>>>>>>        String sName
36908>>>>>>>        Integer iFile
36908>>>>>>>        Get Main_File to iFile
36909>>>>>>>        If iFile ;            Get_Attribute DF_FIELD_NAME of iFile iField to sName
36914>>>>>>>        Function_Return sName
36915>>>>>>>    End_Function
36916>>>>>>>    
36916>>>>>>>    Function SmartCase String sName Returns String
36918>>>>>>>        Integer iPos iNewPos
36918>>>>>>>        String sRight
36918>>>>>>>        Move (Replaces("_",lowercase(sName)," ")) to sName
36919>>>>>>>        Move (Trim (Replaces(".",sName," "))) to sName
36920>>>>>>>        Move 1 to iPos
36921>>>>>>>        Repeat
36921>>>>>>>>
36921>>>>>>>            Move (mid(sName,255,iPos+1)) to sRight
36922>>>>>>>            Move (left(sName,iPos-1) + Uppercase(mid(sName,1,iPos)) + sRight) to sName
36923>>>>>>>            Move (Pos( " ", sRight)) to iNewPos
36924>>>>>>>            If (iNewPos = 0) ;                Break
36927>>>>>>>            Add (iNewPos+1) to iPos
36928>>>>>>>        Loop
36929>>>>>>>>
36929>>>>>>>        Function_Return sName
36930>>>>>>>    End_Function
36931>>>>>>>    
36931>>>>>>>    Enumeration_List
36931>>>>>>>        Define DD_LABEL_SHORT
36931>>>>>>>        Define DD_LABEL_LONG
36931>>>>>>>        Define DD_LABEL_TAG
36931>>>>>>>    End_Enumeration_List
36931>>>>>>>    
36931>>>>>>>    // Handy function to get the label for a field. Three "types" are
36931>>>>>>>    // supported:
36931>>>>>>>    // DD_LABEL_SHORT  use short, if none use long, if none use smart tag
36931>>>>>>>    // DD_LABEL_LONG   use long, if none use smart tag
36931>>>>>>>    // DD_LABEL_TAG    use smart tag
36931>>>>>>>    // If you want an explicit field name use oneof the other messages.
36931>>>>>>>    Function Field_Label Integer iField Integer iType Returns String
36933>>>>>>>        Integer iServer
36933>>>>>>>        String sValue
36933>>>>>>>        If (iType = DD_LABEL_SHORT) ;  // 0 = Short            Get Field_Label_Short iField to sValue
36936>>>>>>>        If (iType = DD_LABEL_LONG or (iType=DD_LABEL_SHORT and sValue='')) ;            Get Field_Label_Long iField to sValue
36939>>>>>>>        If (iType = DD_LABEL_TAG or sValue="") Begin
36941>>>>>>>            Get Field_Label_Tag iField to sValue
36942>>>>>>>            Get SmartCase sValue to sValue
36943>>>>>>>        End
36943>>>>>>>>
36943>>>>>>>        Function_Return sValue
36944>>>>>>>    End_Function
36945>>>>>>>    
36945>>>>>>>    Function File_Field_Label Integer iFile Integer iField Integer iType Returns String
36947>>>>>>>        Integer iDSO
36947>>>>>>>        String sValue
36947>>>>>>>        Get Data_set iFile to iDSO
36948>>>>>>>        If iDSO ;            Get Field_Label of iDSO iField iType to sValue
36951>>>>>>>        Function_Return sValue
36952>>>>>>>    End_Function
36953>>>>>>>    
36953>>>>>>>    // Normally this will not be used by a running program. However, it
36953>>>>>>>    // could be possible to create classes dynamically at runtime, in which
36953>>>>>>>    // case these messages could be useful. No File_Field is provided. If the
36953>>>>>>>    // person knows enough to create dynamic classes they can find the DD.
36953>>>>>>>    Procedure Set Field_Class_Name Integer iField String sName
36955>>>>>>>        Set Field_Class_Name of (FieldMask_Array(Self)) iField to sName
36956>>>>>>>    End_Procedure
36957>>>>>>>    
36957>>>>>>>    Function Field_Class_Name Integer iField Returns String
36959>>>>>>>        Function_Return (Field_Class_Name(FieldMask_Array(Self),iField))
36960>>>>>>>    End_Function
36961>>>>>>>    
36961>>>>>>>    // This procedure should be used to set a specific error number and
36961>>>>>>>    // message for a particular field. This can be used with the Field_error
36961>>>>>>>    // message to generate this error during a validation.
36961>>>>>>>    Procedure Set Field_Error Integer iField Integer iErr String sMsg
36963>>>>>>>        Set Field_Error of (Field_Attributes(Self)) iField to iErr sMsg
36964>>>>>>>    End_Procedure
36965>>>>>>>    
36965>>>>>>>    // Used to retreive the error number and message for a particular field
36965>>>>>>>    Function Field_Error_Number Integer iField Returns Integer
36967>>>>>>>        Function_Return (Field_Error_Number(Field_Attributes(Self),iField))
36968>>>>>>>    End_Function
36969>>>>>>>    
36969>>>>>>>    Function Field_Error_Message Integer iField Returns String
36971>>>>>>>        Function_Return (Field_Error_Message(Field_Attributes(Self),iField))
36972>>>>>>>    End_Function
36973>>>>>>>    
36973>>>>>>>    // This procedure is used to declare an error on a standard field
36973>>>>>>>    // validation violation like Range or Check.
36973>>>>>>>    // Can pass 1 to 4 params:
36973>>>>>>>    // iField -                  Standard usage. Generates field as defined
36973>>>>>>>    //                           for this field. If field=-1, General error
36973>>>>>>>    // iField SDefault           If no field error mess (or field=-1) use
36973>>>>>>>    //                           the default message
36973>>>>>>>    // iField sDefault sParam1 {sParam2} Replace occurances of @PARAM1 and
36973>>>>>>>    //                           @PARAM2 in text with these values
36973>>>>>>>    Procedure Field_Error Integer iField String sDefault ;            String sParam1 String sParam2
36975>>>>>>>        Integer iErr
36975>>>>>>>        String  sMess
36975>>>>>>>        If (iField >= 0) Begin
36977>>>>>>>            Get Field_Error_Number  iField to iErr
36978>>>>>>>            Get Field_Error_Message iField to sMess
36979>>>>>>>        End
36979>>>>>>>>
36979>>>>>>>        If (sMess="" and Num_Arguments>1) ;            Move sDefault to sMess
36982>>>>>>>        If (Num_Arguments = 4) ;            Send Data_Set_Error iField iErr sMess sParam1 sParam2
36985>>>>>>>        Else If (Num_Arguments = 3) ;            Send Data_Set_Error iField iErr sMess sParam1
36989>>>>>>>        Else ;            Send Data_Set_Error iField iErr sMess
36991>>>>>>>    End_Procedure
36992>>>>>>>    
36992>>>>>>>    // Procedure Data_Set_Error
36992>>>>>>>    // This procedure is used to declare a data-set error. Pass error number
36992>>>>>>>    // and optional error message text.
36992>>>>>>>    // If iErr is 0, use the default error number.
36992>>>>>>>    // sParam1 and sParam2 are optional. If passed they are used as text
36992>>>>>>>    // replacements for @PARAM1 and @PARAM2.
36992>>>>>>>    // We pass iField (even though we don't use it) so that augmentations
36992>>>>>>>    // could support error logging down to a field level. If a non-field error
36992>>>>>>>    // is required the developer should pass negative values (e.g., -1)
36992>>>>>>>    // This will redirect errors locally if not already redirected
36992>>>>>>>    //
36992>>>>>>>    // Altered to additionally support %1 %2 replacements as well as
36992>>>>>>>    // replacements for @PARAM1 and @PARAM2. (vdf8.2)
36992>>>>>>>    Procedure Data_set_error Integer iField Integer iErr String sMess ;            String sParam1 String sParam2
36994>>>>>>>        Integer iOldField
36994>>>>>>>        Get Current_validate_field to iOldField
36995>>>>>>>        If (iField <> 0) ;            Set Current_Validate_field to iField
36998>>>>>>>        
36998>>>>>>>        If (iErr = 0) ; // if no error is passes, used a default error            Move DD_DEFAULT_ERROR_NUMBER to iErr
37001>>>>>>>        
37001>>>>>>>        If (sMess > "") Begin
37003>>>>>>>            
37003>>>>>>>            // Support message replacements.. Up to two values
37003>>>>>>>            // altered to support @Param1/2 and %1 %2 messages
37003>>>>>>>            If (Num_Arguments>3) Begin
37005>>>>>>>                Move (Replaces("@PARAM1", sMess, sParam1)) to sMess
37006>>>>>>>                If (Num_Arguments>4) Begin
37008>>>>>>>                    Move (Replaces("@PARAM2", sMess, sParam2)) to sMess
37009>>>>>>>                    Move (SFormat(sMess,sParam1,sParam2)) to sMess
37010>>>>>>>                End
37010>>>>>>>>
37010>>>>>>>                Else Begin
37011>>>>>>>                    Move (SFormat(sMess,sParam1)) to sMess
37012>>>>>>>                End
37012>>>>>>>>
37012>>>>>>>            End
37012>>>>>>>>
37012>>>>>>>            Move Self to ghoErrorSource
37013>>>>>>>            Error iErr sMess
37014>>>>>>>>
37014>>>>>>>            Move 0 to ghoErrorSource
37015>>>>>>>        End
37015>>>>>>>>
37015>>>>>>>        Else ;            Send Operation_Not_Allowed iErr
37017>>>>>>>        Set Current_validate_field to iOldField
37018>>>>>>>        Move True to Err // make sure Err is still set
37019>>>>>>>    End_Procedure
37020>>>>>>>    
37020>>>>>>>    // Augment to support Error_Report_Mode. Allows errors without error mess
37020>>>>>>>    // This will redirect errors locally if not already redirected
37020>>>>>>>    Procedure Operation_Not_Allowed Integer iErr
37022>>>>>>>        Integer bOK
37022>>>>>>>        Move Self to ghoErrorSource
37023>>>>>>>        Forward Send Operation_Not_Allowed iErr
37025>>>>>>>        Move 0 to ghoErrorSource
37026>>>>>>>    End_Procedure
37027>>>>>>>    
37027>>>>>>>    // Local error handler. When errors are redirected to the DD this proce-
37027>>>>>>>    // dure handles the errors. If error_report_mode is NO-report it sets
37027>>>>>>>    // the err indicator and returns. Else it redirects the error to the
37027>>>>>>>    // main error handler first moving its ID to ghoErrorSource. This way the
37027>>>>>>>    // handler knows who sent this message and will get additional error info
37027>>>>>>>    // by calling Get Extended_error_message
37027>>>>>>>    Procedure Error_Report Integer iError Integer iLine String ErrMsg
37029>>>>>>>        Integer hoErrId
37029>>>>>>>        Integer bRedirect
37029>>>>>>>        If (Error_Processing_State(Self)) ;  // this prevents recursion            Procedure_Return
37032>>>>>>>        Set Error_Processing_State to True
37033>>>>>>>        
37033>>>>>>>        // if no report mode, just set the err indicator to true.
37033>>>>>>>        If (Error_Report_Mode(Self)=DD_ERROR_NO_REPORT) ;            Move True to Err
37036>>>>>>>        Else Begin
37037>>>>>>>            Get Old_error_object_id to hoErrId  // the original error handler
37038>>>>>>>            If hoErrId Begin
37040>>>>>>>                Move (ghoErrorSource=0) to bRedirect
37041>>>>>>>                If bRedirect ;                    Move Self to ghoErrorSource // error handler can use this
37044>>>>>>>                Move hoErrID to Error_object_id
37045>>>>>>>                Send Error_Report to hoErrId iError iLine ErrMsg
37046>>>>>>>                Move Self to Error_object_id
37047>>>>>>>                If bRedirect ;                    Move 0 to ghoErrorSource
37050>>>>>>>            End
37050>>>>>>>>
37050>>>>>>>            Else ;                Send error_report of desktop iError iLine ErrMsg
37052>>>>>>>            //else forward send error_report iError iLine ErrMsg
37052>>>>>>>        End
37052>>>>>>>>
37052>>>>>>>        Set Error_Processing_State to False
37053>>>>>>>    End_Procedure
37054>>>>>>>    
37054>>>>>>>    // This is called (by the system error handler) to get additional informa-
37054>>>>>>>    // tion about the error. Returns a multi line string with each line
37054>>>>>>>    // separated by a "\n". Return the file number, name, and if possible
37054>>>>>>>    // the field number and name.
37054>>>>>>>    Function Extended_Error_Message Returns String
37056>>>>>>>        String sExtMess
37056>>>>>>>        String sFile
37056>>>>>>>        Integer iFile iField
37056>>>>>>>        Get main_file to iFile
37057>>>>>>>        Get Current_Validate_Field to iField
37058>>>>>>>        Get ErrorMessageTableName iFile to sFile
37059>>>>>>>        Move (DD_FILE_TEXT* String(iFile) * "-" * sFile) to sExtMess
37060>>>>>>>        If (iField > 0) ;            Append sExtMess "\n" ;            (DD_FIELD_TEXT* String(iField) * "-" * Field_Label(Self,iField,DD_LABEL_LONG))
37064>>>>>>>        Set Current_Validate_Field to 0
37065>>>>>>>        Function_Return sExtMess
37066>>>>>>>    End_Function
37067>>>>>>>    
37067>>>>>>>    Function Extended_Error_File Returns Integer
37069>>>>>>>        Function_Return (Main_File(Self))
37070>>>>>>>    End_Function
37071>>>>>>>    
37071>>>>>>>    Function Extended_Error_Field Returns Integer
37073>>>>>>>        Function_Return (Current_Validate_Field(Self))
37074>>>>>>>    End_Function
37075>>>>>>>    
37075>>>>>>>    
37075>>>>>>>    // The following messages are used to control smart file mode exception
37075>>>>>>>    // handling. The message "Send Add_system_File file# Fg" allows you to
37075>>>>>>>    // add system files (or any other files not known to the dso structure)
37075>>>>>>>    // within define_fields. This allows you to not have to augment the msg
37075>>>>>>>    // reset_filemodes_for_lock. The only truly public messages here are
37075>>>>>>>    // Add_system_file and Remove_system_File (which s/b rarely used).
37075>>>>>>>    
37075>>>>>>>    // Adds a system file for smart_file_mode handling. A second optional
37075>>>>>>>    // parameter may be passed to determine of the sys file should only be
37075>>>>>>>    // locked during a new save (and not during a delete or a save of an
37075>>>>>>>    // existing record). It is expected that this will be the only public
37075>>>>>>>    // message used to control smart filemode. All of the remaining sys file
37075>>>>>>>    // messages are considered advanced.
37075>>>>>>>    Procedure Add_System_File Integer iFile Integer iLock_Mode
37077>>>>>>>        Integer iobj iCnt iMode
37077>>>>>>>        If (Num_arguments = 1) ;            Move DD_Lock_on_All to iMode
37080>>>>>>>        Else ;            Move iLock_Mode     to iMode
37082>>>>>>>        Move (system_file_obj(Self)) to iObj
37083>>>>>>>        Get Item_Count  of iObj to iCnt
37084>>>>>>>        Set Array_Value of iObj iCnt to iFile
37085>>>>>>>        Increment iCnt
37086>>>>>>>        Set Array_Value of iObj iCnt to iMode
37087>>>>>>>    End_Procedure
37088>>>>>>>    
37088>>>>>>>    // Return number of system files
37088>>>>>>>    Function System_File_Count Returns Integer
37090>>>>>>>        Function_Return (Item_Count(System_File_Obj(Self))/2)
37091>>>>>>>    End_Function
37092>>>>>>>    
37092>>>>>>>    // Returns system file number for passed item.
37092>>>>>>>    Function System_File_Number Integer iItem Returns Integer
37094>>>>>>>        Function_Return (Integer_Value(System_File_Obj(Self),iItem*2))
37095>>>>>>>    End_Function
37096>>>>>>>    
37096>>>>>>>    // Returns system flag to determine if file is only used during a new
37096>>>>>>>    // save (and not during an exiting save or a delete).
37096>>>>>>>    Function System_File_Lock_Mode Integer iItem Returns Integer
37098>>>>>>>        Function_Return (Integer_Value(System_File_Obj(Self),iItem*2+1))
37099>>>>>>>    End_Function
37100>>>>>>>    
37100>>>>>>>    // Removes a system_file for smart_file_Mode handling. This remvoes the
37100>>>>>>>    // first occurance of the file (S/b the only occurance). We assume that
37100>>>>>>>    // this will be rarely used.
37100>>>>>>>    Procedure Remove_System_File Integer iFile
37102>>>>>>>        Integer iobj iCnt iItmCnt
37102>>>>>>>        Get System_file_Count to iItmCnt
37103>>>>>>>        Decrement iItmCnt
37104>>>>>>>        For iCnt from 0 to iItmCnt
37110>>>>>>>>
37110>>>>>>>            If (System_File_Number(Self,iCnt)=iFile) Begin
37112>>>>>>>                Move (system_file_obj(Self)) to iObj
37113>>>>>>>                Move (iCnt*2) to iCnt
37114>>>>>>>                Send Delete_Item to iObj iCnt
37115>>>>>>>                Send Delete_Item to iObj iCnt
37116>>>>>>>                Procedure_Return
37117>>>>>>>            End
37117>>>>>>>>
37117>>>>>>>        Loop
37118>>>>>>>>
37118>>>>>>>    End_Procedure
37119>>>>>>>    
37119>>>>>>>    // These set messages, add_client_file, add_server_file and add_system_file
37119>>>>>>>    // were added to more easily support visual DD class modeling. They do the
37119>>>>>>>    // same thing the Send counterpart messages do
37119>>>>>>>    
37119>>>>>>>    Procedure Set Add_Client_File Integer iFile
37121>>>>>>>        Send Add_Client_File iFile
37122>>>>>>>    End_Procedure
37123>>>>>>>    
37123>>>>>>>    Procedure Set Add_Server_File Integer iFile
37125>>>>>>>        Send Add_Server_File iFile
37126>>>>>>>    End_Procedure
37127>>>>>>>    
37127>>>>>>>    Procedure Set Add_System_File Integer iFile Integer iLock_Mode
37129>>>>>>>        // allow no arguments because the old message allowed this
37129>>>>>>>        If (Num_arguments=1) Begin
37131>>>>>>>            Send Add_System_File iFile
37132>>>>>>>        End
37132>>>>>>>>
37132>>>>>>>        Else Begin
37133>>>>>>>            Send Add_System_File iFile iLock_Mode
37134>>>>>>>        End
37134>>>>>>>>
37134>>>>>>>    End_Procedure
37135>>>>>>>    
37135>>>>>>>    // The Set Field_Auto_Increment method replaces the need to use the Define_Auto_Incrmement
37135>>>>>>>    // command. This models more easily and it supports multiple auto-increment fields
37135>>>>>>>    Procedure Set Field_Auto_Increment Integer iField Integer iSysFile Integer iSysField
37137>>>>>>>        Integer[] AutoIncFields
37138>>>>>>>        tDDFileField[] SysFileFields
37138>>>>>>>        tDDFileField[] SysFileFields
37139>>>>>>>        Integer iIndex
37139>>>>>>>        
37139>>>>>>>        If (iField=0 or (iSysFile<>0 and iSysField=0)) Begin
37141>>>>>>>            Error DFERR_PROGRAM "Auto-increment source or destination field is 0"
37142>>>>>>>>
37142>>>>>>>            Procedure_Return
37143>>>>>>>        End
37143>>>>>>>>
37143>>>>>>>        // setting the sysfile to 0 is valid. It can be used to clear an existing sysfile
37143>>>>>>>        If (iSysFile=0) Begin
37145>>>>>>>            Move 0 to iSysField
37146>>>>>>>        End
37146>>>>>>>>
37146>>>>>>>        Get pAutoIncrementFields to AutoIncFields
37147>>>>>>>        Get pAutoIncrementSysFileFields to SysFileFields
37148>>>>>>>        // the destination field array is a list of fields that have auto-incr info. There
37148>>>>>>>        // can only be zero or one entry per field arranged in no defined order.
37148>>>>>>>        // see if field is already defined. If not add this to the end.
37148>>>>>>>        Move (SearchArray(iField,AutoIncFields)) to iIndex
37149>>>>>>>        If (iIndex=-1) Begin
37151>>>>>>>            Move (SizeOfArray(SysFileFields)) to iIndex
37152>>>>>>>        End
37152>>>>>>>>
37152>>>>>>>        Move iField    to AutoIncFields[iIndex]
37153>>>>>>>        Move iSysFile  to SysFileFields[iIndex].iFile
37154>>>>>>>        Move iSysField to SysFileFields[iIndex].iField
37155>>>>>>>        Set pAutoIncrementFields to AutoIncFields
37156>>>>>>>        Set pAutoIncrementSysFileFields to SysFileFields
37157>>>>>>>    End_Procedure
37158>>>>>>>    
37158>>>>>>>    // Get auto-increment system file/field value for a field. There really should be no
37158>>>>>>>    // reason to ever need this. Field is returned byref
37158>>>>>>>    Function Field_Auto_Increment Integer iField Integer ByRef iSysField Returns Integer
37160>>>>>>>        Integer iSysFile
37160>>>>>>>        Integer[] AutoIncFields
37161>>>>>>>        tDDFileField[] SysFileFields
37161>>>>>>>        tDDFileField[] SysFileFields
37162>>>>>>>        Integer iIndex
37162>>>>>>>        
37162>>>>>>>        Get pAutoIncrementFields to AutoIncFields
37163>>>>>>>        Move (SearchArray(iField,AutoIncFields)) to iIndex
37164>>>>>>>        If (iIndex>-1) Begin
37166>>>>>>>            Get pAutoIncrementSysFileFields to SysFileFields
37167>>>>>>>            Move SysFileFields[iIndex].iFile to iSysFile
37168>>>>>>>            Move SysFileFields[iIndex].iField to iSysField
37169>>>>>>>        End
37169>>>>>>>>
37169>>>>>>>        Else Begin
37170>>>>>>>            Move 0 to iSysFile
37171>>>>>>>            Move 0 to iSysField
37172>>>>>>>        End
37172>>>>>>>>
37172>>>>>>>        Function_Return iSysFile
37173>>>>>>>    End_Function
37174>>>>>>>    
37174>>>>>>>    
37174>>>>>>>    // Augmented to set any system files defined via the Add_System_file
37174>>>>>>>    // message. This allows us to hide this procedure for the vast majority
37174>>>>>>>    // of cases.
37174>>>>>>>    Procedure Reset_Filemodes_For_Lock
37176>>>>>>>        Boolean bNewRec
37176>>>>>>>        Integer  iItmCnt iCnt iMode iFile
37176>>>>>>>        Integer iMain iMaster iOpts
37176>>>>>>>        Handle hoDD
37176>>>>>>>        
37176>>>>>>>        Forward Send Reset_Filemodes_for_lock
37178>>>>>>>        
37178>>>>>>>        Get System_File_Count to iItmCnt
37179>>>>>>>        If iItmCnt Begin
37181>>>>>>>            Move (not(HasRecord(Self))) to bNewRec
37182>>>>>>>            Decrement iItmCnt
37183>>>>>>>            For iCnt from 0 to iItmCnt
37189>>>>>>>>
37189>>>>>>>                Get System_File_Number         iCnt to iFile
37190>>>>>>>                Get System_File_Lock_Mode iCnt to iMode
37191>>>>>>>                If ( (iMode=DD_Lock_on_All) or ;                    (Operation_Mode=MODE_DELETING and (iMode iand DD_Lock_on_Delete) ) or ;                    (Operation_Mode=MODE_SAVING and ( (iMode iand DD_Lock_on_Save) or ;                    ( (iMode iand DD_Lock_on_New_Save) and bNewRec) ) ) ) Begin
37193>>>>>>>                    Set_Attribute DF_FILE_MODE of iFile to DF_FILEMODE_DEFAULT
37196>>>>>>>                End
37196>>>>>>>>
37196>>>>>>>            Loop
37197>>>>>>>>
37197>>>>>>>        End
37197>>>>>>>>
37197>>>>>>>        
37197>>>>>>>        // augment to support DD magnaged alias tables.
37197>>>>>>>        // If an alias, set the alias to the proper alias no locks only if
37197>>>>>>>        // the master file is actually part of this DDO structure. This allows you
37197>>>>>>>        // to use alias files without the master being present (or even open). This will work without needing
37197>>>>>>>        // to set the Master|Alias DF_FILE_ALIAS attributes. If the file is master and part of the DDO structure
37197>>>>>>>        // it will already have its No_locks attribute cleared. If not part of the DD, its not needed.
37197>>>>>>>        //
37197>>>>>>>        Get MasterForAlias to iMaster
37198>>>>>>>        If iMaster Begin
37200>>>>>>>            Get Main_File to iMain
37201>>>>>>>            Get Data_Set iMaster to hoDD // is the master in the DD structure
37202>>>>>>>            If hoDD Begin
37204>>>>>>>                Get_Attribute DF_FILE_MODE of iMain to iOpts
37207>>>>>>>                Set_Attribute DF_FILE_MODE of iMain to (iOpts ior DF_FILEMODE_NO_LOCKS)
37210>>>>>>>                // note this will be reset to what it was when the transaction ends
37210>>>>>>>            End
37210>>>>>>>>
37210>>>>>>>        End
37210>>>>>>>>
37210>>>>>>>        
37210>>>>>>>    End_Procedure
37211>>>>>>>    
37211>>>>>>>    // Augmented to handle auto-increment fields if defined. The value from
37211>>>>>>>    // the auto-incre sys file is incremented, saved and moved to the new
37211>>>>>>>    // record. As of 17.0 this is no longer in Creating, which is called after
37211>>>>>>>    // AutoIncrement.
37211>>>>>>>    Procedure AutoIncrement
37213>>>>>>>        Integer iSrcFile iSrcField i iAutoFields
37213>>>>>>>        Integer iDestFile iDestField
37213>>>>>>>        Number nNum
37213>>>>>>>        Integer[] AutoIncFields
37214>>>>>>>        tDDFileField[] AutoIncSysFileFields
37214>>>>>>>        tDDFileField[] AutoIncSysFileFields
37215>>>>>>>        Handle hoOwner
37215>>>>>>>        
37215>>>>>>>        Forward Send AutoIncrement
37217>>>>>>>        
37217>>>>>>>        // this supports the older Define_Auto_Increment logic. Only one is supported
37217>>>>>>>        // this is exists for backwards compatibility
37217>>>>>>>        Get Auto_Increment_Source_File to iSrcFile
37218>>>>>>>        If iSrcFile Begin // do we have auto increment?
37220>>>>>>>            Get Auto_Increment_Source_Field  to iSrcField
37221>>>>>>>            Get Auto_Increment_Dest_Field    to iDestField
37222>>>>>>>            If (iSrcField and iDestField) Begin  // just in case of error
37224>>>>>>>                Get Main_file to iDestFile
37225>>>>>>>                Get_Field_Value iSrcFile iSrcField to nNum
37228>>>>>>>                Move (nNum+1) to nNum
37229>>>>>>>                Set_Field_Value iSrcFile  iSrcField  to nNum
37232>>>>>>>                Set_Field_Value iDestFile iDestField to nNum
37235>>>>>>>                // if the file's DD is a parent file in the structure, this will get saved as part of normal operations
37235>>>>>>>                // if the DD is not a parent file, it is a sysfile and we must save it
37235>>>>>>>                Get Which_Data_Set iSrcFile to hoOwner
37236>>>>>>>                If not hoOwner Begin
37238>>>>>>>                    SaveRecord iSrcFile
37239>>>>>>>                End
37239>>>>>>>>
37239>>>>>>>            End
37239>>>>>>>>
37239>>>>>>>        End
37239>>>>>>>>
37239>>>>>>>        // this supports the newer set syntax which support multiple fields. It is expected that you will
37239>>>>>>>        // use one syntax of the other, not both. If you use the old syntax, you cannot use the new one
37239>>>>>>>        Else Begin
37240>>>>>>>            Get pAutoIncrementFields to AutoIncFields
37241>>>>>>>            Move (SizeOfArray(AutoIncFields)) to iAutoFields
37242>>>>>>>            If (iAutoFields>0) Begin
37244>>>>>>>                Get pAutoIncrementSysFileFields to AutoIncSysFileFields
37245>>>>>>>                Get Main_file to iDestFile
37246>>>>>>>                For i from 0 to (iAutoFields-1)
37252>>>>>>>>
37252>>>>>>>                    // it is legal to set the sysfile to 0, this means it has been cleared and is not used
37252>>>>>>>                    If (AutoIncSysFileFields[i].iFile>0) Begin
37254>>>>>>>                        // we assume both the fields are valid and that they've already been tested when added
37254>>>>>>>                        Get_Field_Value AutoIncSysFileFields[i].iFile AutoIncSysFileFields[i].iField to nNum
37257>>>>>>>                        Move (nNum+1) to nNum
37258>>>>>>>                        Set_Field_Value AutoIncSysFileFields[i].iFile AutoIncSysFileFields[i].iField to nNum
37261>>>>>>>                        Set_Field_Value iDestFile AutoIncFields[i] to nNum
37264>>>>>>>                        // if the file's DD is a parent file in the structure, this will get saved as part of normal operations
37264>>>>>>>                        // if the DD is not a parent file, it is a sysfile and we must save it
37264>>>>>>>                        Get Which_Data_Set AutoIncSysFileFields[i].iFile to hoOwner
37265>>>>>>>                        If not hoOwner Begin
37267>>>>>>>                            SaveRecord AutoIncSysFileFields[i].iFile
37268>>>>>>>                        End
37268>>>>>>>>
37268>>>>>>>                    End
37268>>>>>>>>
37268>>>>>>>                Loop
37269>>>>>>>>
37269>>>>>>>            End
37269>>>>>>>>
37269>>>>>>>        End
37269>>>>>>>>
37269>>>>>>>        
37269>>>>>>>    End_Procedure
37270>>>>>>>    
37270>>>>>>>    // Augmented to fix a bug in the data-set C code. When a record is saved
37270>>>>>>>    // as part of a delete operation OnNewCurrentRecord is not called. It
37270>>>>>>>    // should be. We will do this in flex code for now.
37270>>>>>>>    Procedure Save_Main_File
37272>>>>>>>        RowID riRec
37272>>>>>>>        Integer iRec iMain
37272>>>>>>>        Boolean bRecnumTable bChanged
37272>>>>>>>        
37272>>>>>>>        Get Main_File to iMain
37273>>>>>>>        Get_Attribute DF_FILE_CHANGED of iMain to bChanged
37276>>>>>>>        If bChanged Begin
37278>>>>>>>            Send OnSaveRecord // OnSaveRecord sent if there is something to save
37279>>>>>>>        End
37279>>>>>>>>
37279>>>>>>>        
37279>>>>>>>        Forward Send Save_Main_File
37281>>>>>>>        
37281>>>>>>>        If (Operation_Mode = MODE_DELETING) Begin  // during a delete the crnt
37283>>>>>>>            Get CurrentRowId to riRec             // rec of parents do not change
37284>>>>>>>            Send OnNewCurrentRecord riRec riRec  // so old and new are the same.
37285>>>>>>>            // for backwards compatibility reasons, we also send new_current_record if appropriate
37285>>>>>>>            Get_Attribute DF_FILE_RECNUM_TABLE of iMain to bRecnumTable
37288>>>>>>>            If (bRecnumTable) Begin
37290>>>>>>>                Get_Field_Value iMain 0 to iRec
37293>>>>>>>                Send New_Current_Record iRec iRec
37294>>>>>>>            End
37294>>>>>>>>
37294>>>>>>>        End
37294>>>>>>>>
37294>>>>>>>    End_Procedure
37295>>>>>>>    
37295>>>>>>>    // Augmented to not clear if a system-file. The auto-latching of views
37295>>>>>>>    // may cause a sys file DD to get cleared. This corrects this. This really
37295>>>>>>>    // belongs in Data_set (C) but we will not risk this for now.
37295>>>>>>>    Procedure Clear_Main_File
37297>>>>>>>        Integer iFile iIsSys
37297>>>>>>>        Get Main_File to iFile
37298>>>>>>>        If iFile Begin
37300>>>>>>>            Get_Attribute DF_FILE_IS_SYSTEM_FILE of iFile to iIsSys
37303>>>>>>>            If iIsSys ;                Procedure_Return
37306>>>>>>>        End
37306>>>>>>>>
37306>>>>>>>        Forward Send Clear_main_file
37308>>>>>>>    End_Procedure
37309>>>>>>>    
37309>>>>>>>    // Executes a request_find on the mainfile. This is easier that having to
37309>>>>>>>    // pass file number all the time. Useful for batch operations.
37309>>>>>>>    // If Index is 0, use find_by_recnum (it handles a recnum of 0 better)
37309>>>>>>>    Procedure Find Integer iMode Integer iIndex
37311>>>>>>>        Integer iFile
37311>>>>>>>        Integer iRec
37311>>>>>>>        Get Main_file to iFile
37312>>>>>>>        If (iIndex<>0 or iMode<>EQ) ;            Send request_find iMode iFile iIndex
37315>>>>>>>        Else Begin
37316>>>>>>>            // this would never happen with row ID
37316>>>>>>>            Get_Field_Value iFile 0 to iRec // get recnum value
37319>>>>>>>            Send find_by_recnum iFile iRec
37320>>>>>>>        End
37320>>>>>>>>
37320>>>>>>>    End_Procedure
37321>>>>>>>    
37321>>>>>>>    // So many people make the mistake of using requeset_clear and request_
37321>>>>>>>    // clear_all that will support these are alteratives to clear and
37321>>>>>>>    // clear_all. The preferred messages remain Clear and Clear_all.
37321>>>>>>>    // This would not work if you nested DEOs within DSOs (no-one does).
37321>>>>>>>    Procedure Request_Clear
37323>>>>>>>        Send Clear
37324>>>>>>>    End_Procedure
37325>>>>>>>    
37325>>>>>>>    Procedure Request_Clear_All
37327>>>>>>>        Send Clear_All
37328>>>>>>>    End_Procedure
37329>>>>>>>    
37329>>>>>>>    // we want changed_state to always go through the
37329>>>>>>>    // Record_buffer object. From there it is sent to
37329>>>>>>>    // here. So if state or RB does not match we must
37329>>>>>>>    // send to the RB object...it will delegate to here
37329>>>>>>>    
37329>>>>>>>    Procedure Set Changed_State Integer bState
37331>>>>>>>        Integer hRB
37331>>>>>>>        Move (record_buffer(Self)) to hRB
37332>>>>>>>        If (hRB and changed_state(hRB)<>bState) ;            Set changed_state of hRB to bState
37335>>>>>>>        Else ;            Forward Set changed_state to bState
37338>>>>>>>    End_Procedure
37339>>>>>>>    
37339>>>>>>>    // this lets us use the new attach logic
37339>>>>>>>    
37339>>>>>>>    // This is a smarter attach than the normal attach command. It only attaches data from a parent
37339>>>>>>>    // if 1) the DDO parent is connected to the structure and 2) if there is a record to attach. It will
37339>>>>>>>    // not attach empty records into a child. This should make the finding (and saving) more sensible when
37339>>>>>>>    // partial DD structures are used. For example, often a report does not all of the parent DDOs - however if
37339>>>>>>>    // they are not provided, finding can get messed up because blank data is being moved into the child before a
37339>>>>>>>    // find. This has been a problem since 3.0. This should just make it go away.
37339>>>>>>>    // as of 17.0, we get the related field info through the local DSO if needed
37339>>>>>>>    
37339>>>>>>>    // as if 18.1 this is only called when there is an attachable relationship. This gives us a chance to do any
37339>>>>>>>    // customizations and to cancel the attach. We've left this to the flex level so we can fine tune attaches.
37339>>>>>>>    Function ShouldFieldAttach Integer iField Handle hoRelDD Returns Boolean
37341>>>>>>>        Boolean bDoAttach bChanged
37341>>>>>>>        Integer iFile iStat iRelFile iType
37341>>>>>>>        String sValue
37341>>>>>>>        
37341>>>>>>>        Get Main_File to iFile
37342>>>>>>>        Get Main_File of hoRelDD to iRelFile
37343>>>>>>>        
37343>>>>>>>        // before we attach check if Find mode and relfile is new and unchanged..if so skip.
37343>>>>>>>        // If operation_mode is 0, this is probably a Find (item_find sends attach_main_file for some reason).
37343>>>>>>>        Move True to bDoAttach
37344>>>>>>>        If (Operation_mode=MODE_FINDING or OPERATION_MODE=0) Begin
37346>>>>>>>            // we can test the file status to see if we have a record or not. If we have a record, we attach
37346>>>>>>>            Get_Attribute DF_FILE_STATUS  of iRelFile to iStat
37349>>>>>>>            If (iStat=DF_FILE_INACTIVE) Begin
37351>>>>>>>                // if no record, we need to look for changes. We can't just look at the file's changed state because the DD
37351>>>>>>>                // may have set defaults, which have been moved to the buffer. We should be able to check the DD's changed state
37351>>>>>>>                // because this is not set with default values. When doing a find entry_update this should be ok. If this were
37351>>>>>>>                // a save, this would cause problems (but this is not a save). Prior to 17.0 this was not an issue with windows
37351>>>>>>>                // applications because find entry_updates were done at the DEO level (unlike web applications).
37351>>>>>>>                Get Changed_State of hoRelDD to bChanged
37352>>>>>>>                Move bChanged to bDoAttach
37353>>>>>>>                
37353>>>>>>>                // special Triumph workaround for Item_Find with blank inner segment. They were counting on the item_find attach_main_file
37353>>>>>>>                // which would slip through the "no-attach on find when parent is empty optimization". This was needed to force a string segment
37353>>>>>>>                // that was "" to get filled with spaces from the parent field. The child field was set to "" because of a constrained_clear
37353>>>>>>>                // in Item_find. This workaround is as narrow as possible. If an item_find attach_main_file (operation_mode=0) and this is
37353>>>>>>>                // an empty parent (bOk was just set to False), and the field is DF_Ascii and the child value is empty (no trailing spaces)
37353>>>>>>>                // then force an attach. Since the parent should be "", we can just Set_Field_value to "", which fills the field buffer.
37353>>>>>>>                // There is no real logic as to why this is being done other than to make it work like it used to with the least
37353>>>>>>>                // amount of side-effects.
37353>>>>>>>                If (not(bDoAttach) and OPERATION_MODE=0) Begin
37355>>>>>>>                    Get_Attribute DF_FIELD_TYPE of iFile iField to iType
37358>>>>>>>                    If (iType=DF_ASCII) Begin
37360>>>>>>>                        Get_Field_Value iFile iField to sValue
37363>>>>>>>                        // if no spaces, this probably was cleared via constrained_clear in Item_Find. We should update
37363>>>>>>>                        If (Ascii(Left(sValue,1))=0) Begin
37365>>>>>>>                            Set_Field_Value iFile iField to ""
37368>>>>>>>                        End
37368>>>>>>>>
37368>>>>>>>                    End
37368>>>>>>>>
37368>>>>>>>                End
37368>>>>>>>>
37368>>>>>>>                
37368>>>>>>>            End
37368>>>>>>>>
37368>>>>>>>        End
37368>>>>>>>>
37368>>>>>>>        Function_Return bDoAttach
37369>>>>>>>    End_Function
37370>>>>>>>    
37370>>>>>>>    // Notify all DEOs that a mask has changed.
37370>>>>>>>    //        this message is sent by set Field_Mask
37370>>>>>>>    Procedure Field_Mask_Changed Integer iField String sMask
37372>>>>>>>        Integer i iDEOs iDEO
37372>>>>>>>        Integer iMain_File
37372>>>>>>>        Get Main_File to iMain_File
37373>>>>>>>        Get Data_Set_User_Interface_Count to iDEOs
37374>>>>>>>        Decrement iDEOs
37375>>>>>>>        For i from 0 to iDEOs
37381>>>>>>>>
37381>>>>>>>            Get Data_Set_User_Interface i to iDEO
37382>>>>>>>            If (Extended_DEO_State(iDEO)) ;                Send File_Field_Mask_Changed to iDEO ;                iMain_File iField sMask
37385>>>>>>>        Loop
37386>>>>>>>>
37386>>>>>>>    End_Procedure
37387>>>>>>>    
37387>>>>>>>    // Notify all DEOs that a label has changed.
37387>>>>>>>    //   This message is sent by Set Field_Label_long & Field_Label_Short
37387>>>>>>>    Procedure Field_label_Changed Integer iField Boolean bLong String sLabel
37389>>>>>>>        Integer i iDEOs iDEO
37389>>>>>>>        Integer iMain_File
37389>>>>>>>        Get Main_File to iMain_File
37390>>>>>>>        Get Data_Set_User_Interface_Count to iDEOs
37391>>>>>>>        Decrement iDEOs
37392>>>>>>>        For i from 0 to iDEOs
37398>>>>>>>>
37398>>>>>>>            Get Data_Set_User_Interface i to iDEO
37399>>>>>>>            If (Extended_DEO_State(iDEO)) ;                Send File_Field_Label_Changed to iDEO ;                iMain_File iField bLong sLabel
37402>>>>>>>        Loop
37403>>>>>>>>
37403>>>>>>>    End_Procedure
37404>>>>>>>    
37404>>>>>>>    // Notify all DEOs that a field option has changed.
37404>>>>>>>    //   This message is sent by Set Field_Option
37404>>>>>>>    Procedure Field_Option_Changed Integer iField Integer iOptions Boolean bClear
37406>>>>>>>        Integer i iDEOs iDEO
37406>>>>>>>        Integer iMain_File
37406>>>>>>>        Get Main_File to iMain_File
37407>>>>>>>        Get Data_Set_User_Interface_Count to iDEOs
37408>>>>>>>        Decrement iDEOs
37409>>>>>>>        For i from 0 to iDEOs
37415>>>>>>>>
37415>>>>>>>            Get Data_Set_User_Interface i to iDEO
37416>>>>>>>            If (Extended_DEO_State(iDEO)) ;                Send File_Field_Option_Changed of iDEO ;                iMain_File iField iOptions bClear
37419>>>>>>>        Loop
37420>>>>>>>>
37420>>>>>>>    End_Procedure
37421>>>>>>>    
37421>>>>>>>    
37421>>>>>>>    //   Set, clear or toggle a field option
37421>>>>>>>    //   Multiple options can be passed as an expression
37421>>>>>>>    //   (e.g. Set Field_option 2 (dd_Retain IOR dd_NoEnter).
37421>>>>>>>    //   Unlike set Field_options this notifies DEOs of changes
37421>>>>>>>    // supports setting and clearing. e.g.:
37421>>>>>>>    //    Set Field_Option Field Customer.Name DD_NoEnter to True
37421>>>>>>>    // This new syntax is now the recommended syntax but the older syntax without
37421>>>>>>>    // the last parameter is supported (where true is the default). The old syntax is
37421>>>>>>>    // only supported for compatibility. This means that Field_Option_Clear should
37421>>>>>>>    // also be replaced with Field_Option
37421>>>>>>>    Procedure Set Field_Option Integer iField Integer iOption Boolean bSet
37423>>>>>>>        Boolean bSetTrue
37423>>>>>>>        Move (If(num_arguments>2, bSet, True)) to bSetTrue // support for old deprecated syntax
37424>>>>>>>        If bSetTrue Begin
37426>>>>>>>            Set Field_options iField to iOption
37427>>>>>>>        End
37427>>>>>>>>
37427>>>>>>>        Else Begin
37428>>>>>>>            Set Field_options iField to DD_CLEAR_FIELD_OPTIONS iOption
37429>>>>>>>        End
37429>>>>>>>>
37429>>>>>>>        If (Data_Set_User_Interface_Count(Self)) Begin
37431>>>>>>>            Send Field_Option_Changed iField iOption (not(bSetTrue))
37432>>>>>>>        End
37432>>>>>>>>
37432>>>>>>>    End_Procedure
37433>>>>>>>    
37433>>>>>>>    Procedure Set File_Field_Option Integer iFile Integer iField Integer iOption Boolean bSet
37435>>>>>>>        Handle hoDD
37435>>>>>>>        Boolean bSetTrue
37435>>>>>>>        Move (If(num_arguments>3, bSet, True)) to bSetTrue // support for old deprecated syntax
37436>>>>>>>        Get Data_set iFile to hoDD
37437>>>>>>>        If hoDD Begin
37439>>>>>>>            Set Field_Option of hoDD iField iOption to bSetTrue
37440>>>>>>>        End
37440>>>>>>>>
37440>>>>>>>        
37440>>>>>>>    End_Procedure
37441>>>>>>>    
37441>>>>>>>    Procedure Set Field_Option_Clear Integer iField Integer iOptions
37443>>>>>>>        Set Field_Option iField iOptions to False
37444>>>>>>>    End_Procedure
37445>>>>>>>    
37445>>>>>>>    Procedure Set File_Field_Option_Clear Integer iFile Integer iField Integer iOptions
37447>>>>>>>        Set File_Field_Option iFile iField iOptions to False
37448>>>>>>>    End_Procedure
37449>>>>>>>    
37449>>>>>>>    Procedure Set Field_Option_Toggle Integer iField Integer iOption
37451>>>>>>>        Integer iOldOption
37451>>>>>>>        Get Field_Options iField to iOldOption
37452>>>>>>>        // if old and new have overlapping bits, we assume clear
37452>>>>>>>        Set Field_Option iField iOption to ((iOldOption iand iOption)=0)
37453>>>>>>>    End_Procedure
37454>>>>>>>    
37454>>>>>>>    Procedure Set File_Field_Option_Toggle Integer iFile Integer iField Integer iOption
37456>>>>>>>        Handle hoDD
37456>>>>>>>        Get Data_set iFile to hoDD
37457>>>>>>>        If hoDD ;            Set Field_Option_Toggle of hoDD iField to iOption
37460>>>>>>>    End_Procedure
37461>>>>>>>    
37461>>>>>>>    // This returns the main index for a field. This replaces the DSO message Field_Main_index which
37461>>>>>>>    // should no longer be used by DDOs. The old message has the problem that the DDO or DSO using
37461>>>>>>>    // this message may not be the owner of the field. So augmenting the owner DDO did not insure that
37461>>>>>>>    // all requests for this index would go through it. Now you can augment Field_Index and always
37461>>>>>>>    // be sure that any DDO requesting an index for a file (via file_field_index) will always go to
37461>>>>>>>    // the owner object.
37461>>>>>>>    Function Field_Index Integer iField Returns Integer
37463>>>>>>>        Integer iFile iIndex iOrder
37463>>>>>>>        // ordering takes precendence
37463>>>>>>>        Get ordering to iOrder
37464>>>>>>>        If (iOrder>=0);            Move iOrder to iIndex  //ordering takes precedence over main index
37467>>>>>>>        Else Begin
37468>>>>>>>            Get Main_file to iFile
37469>>>>>>>            Get_Attribute DF_FIELD_INDEX of iFile iField to iIndex // main index field
37472>>>>>>>            If (iIndex=0 and iField>0) ; // If field is not recnum and there is no index, the                Move -1 to iIndex        // field has no main index
37475>>>>>>>        End
37475>>>>>>>>
37475>>>>>>>        Function_Return iIndex
37476>>>>>>>    End_Function
37477>>>>>>>    
37477>>>>>>>    // In all cases, this message should be sent instead of Field_Main_Index. If
37477>>>>>>>    // augmentation was used in Field_Main_Index, use Field_Index to insure the owner object
37477>>>>>>>    // is called.
37477>>>>>>>    
37477>>>>>>>    Function File_Field_Index Integer iFile Integer iField Returns Integer
37479>>>>>>>        Integer iIndex
37479>>>>>>>        Handle hoDD
37479>>>>>>>        Get Data_set iFile to hoDD
37480>>>>>>>        If (hoDD) ;            Get Field_Index of hoDD iField to iIndex
37483>>>>>>>        Else ;            Move -1 to iIndex
37485>>>>>>>        Function_Return iIndex
37486>>>>>>>    End_Function
37487>>>>>>>    
37487>>>>>>>    // 12/1 change: Make sure all of the major DD operations update the DD with the value in
37487>>>>>>>    // the focus field. After the actual find, save, clar or delete, the DD buffer contains information that
37487>>>>>>>    // is not yet reflected in the DEOs (before refresh is called) we want to make sure that we
37487>>>>>>>    // don't try to get data from the DEO. Get Field_Current_Value now checks if operation_mode is
37487>>>>>>>    // non-zero. If it is, it always gets from the DD buffer.
37487>>>>>>>    
37487>>>>>>>    Procedure Clear
37489>>>>>>>        Boolean bOpOk
37489>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37490>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37492>>>>>>>            Send Update_Focus_Field_For_Operation MODE_CLEARING
37493>>>>>>>        End
37493>>>>>>>>
37493>>>>>>>        If (bOpOk) Begin
37495>>>>>>>            Send OnPreFind DDFindClear
37496>>>>>>>        End
37496>>>>>>>>
37496>>>>>>>        Forward Send Clear
37498>>>>>>>        If (bOpOk) Begin
37500>>>>>>>            Send DefaultParentAutofinds
37501>>>>>>>            Send OnPostFind DDFindClear True
37502>>>>>>>        End
37502>>>>>>>>
37502>>>>>>>    End_Procedure
37503>>>>>>>    
37503>>>>>>>    Procedure Clear_All
37505>>>>>>>        Boolean bOpOk
37505>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37506>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37508>>>>>>>            Send Update_Focus_Field_For_Operation MODE_CLEARINGALL
37509>>>>>>>        End
37509>>>>>>>>
37509>>>>>>>        Forward Send clear_all
37511>>>>>>>        If (bOpOk) Begin
37513>>>>>>>            Send DefaultParentAutofinds
37514>>>>>>>        End
37514>>>>>>>>
37514>>>>>>>    End_Procedure
37515>>>>>>>    
37515>>>>>>>    Procedure Request_Assign Integer iFile
37517>>>>>>>        Handle hoDD
37517>>>>>>>        Boolean bFound
37517>>>>>>>        Boolean bOpOk
37517>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37518>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37520>>>>>>>            Send Update_Focus_Field_For_Operation MODE_FINDING
37521>>>>>>>        End
37521>>>>>>>>
37521>>>>>>>        
37521>>>>>>>        If (bOpOk) Begin
37523>>>>>>>            If (num_arguments=0 or iFile=0) Begin
37525>>>>>>>                Move Self to hoDD
37526>>>>>>>            End
37526>>>>>>>>
37526>>>>>>>            Else Begin
37527>>>>>>>                Get Data_Set iFile to hoDD
37528>>>>>>>            End
37528>>>>>>>>
37528>>>>>>>            If hoDD Begin
37530>>>>>>>                Send OnPreFind of hoDD DDFindRequestAssign
37531>>>>>>>            End
37531>>>>>>>>
37531>>>>>>>        End
37531>>>>>>>>
37531>>>>>>>        
37531>>>>>>>        If (num_arguments=0) Begin
37533>>>>>>>            Forward Send Request_Assign
37535>>>>>>>        End
37535>>>>>>>>
37535>>>>>>>        Else Begin
37536>>>>>>>            Forward Send Request_Assign iFile
37538>>>>>>>        End
37538>>>>>>>>
37538>>>>>>>        
37538>>>>>>>        If (bOpOk) Begin
37540>>>>>>>            If (hoDD) Begin
37542>>>>>>>                Move (Found) to bFound
37543>>>>>>>                Send OnPostFind of hoDD DDFindRequestAssign bFound
37544>>>>>>>                Move bFound to Found
37545>>>>>>>            End
37545>>>>>>>>
37545>>>>>>>        End
37545>>>>>>>>
37545>>>>>>>    End_Procedure
37546>>>>>>>    
37546>>>>>>>    
37546>>>>>>>    Procedure Find_By_Recnum Integer iFile Integer iRecord
37548>>>>>>>        Handle hoDD
37548>>>>>>>        Boolean bFound
37548>>>>>>>        Boolean bOpOk
37548>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37549>>>>>>>        Send Update_Focus_Field_For_Operation MODE_FINDING
37550>>>>>>>        
37550>>>>>>>        If (bOpOk) Begin
37552>>>>>>>            Get Data_Set iFile to hoDD
37553>>>>>>>            If hoDD Begin
37555>>>>>>>                Send OnPreFind of hoDD DDFindFindByRowRec
37556>>>>>>>            End
37556>>>>>>>>
37556>>>>>>>        End
37556>>>>>>>>
37556>>>>>>>        
37556>>>>>>>        Forward Send Find_By_Recnum iFile iRecord
37558>>>>>>>        
37558>>>>>>>        If (bOpOk) Begin
37560>>>>>>>            If (hoDD) Begin
37562>>>>>>>                Move (Found) to bFound
37563>>>>>>>                Send OnPostFind of hoDD DDFindFindByRowRec bFound
37564>>>>>>>                Move bFound to Found
37565>>>>>>>            End
37565>>>>>>>>
37565>>>>>>>        End
37565>>>>>>>>
37565>>>>>>>    End_Procedure
37566>>>>>>>    
37566>>>>>>>    Procedure FindByRowId Integer iFile RowID riRowId
37568>>>>>>>        Handle hoDD
37568>>>>>>>        Boolean bFound
37568>>>>>>>        Boolean bOpOk
37568>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37569>>>>>>>        Send Update_Focus_Field_For_Operation MODE_FINDING
37570>>>>>>>        
37570>>>>>>>        If (bOpOk) Begin
37572>>>>>>>            Get Data_Set iFile to hoDD
37573>>>>>>>            If hoDD Begin
37575>>>>>>>                Send OnPreFind of hoDD DDFindFindByRowRec
37576>>>>>>>            End
37576>>>>>>>>
37576>>>>>>>        End
37576>>>>>>>>
37576>>>>>>>        
37576>>>>>>>        Forward Send FindByRowId iFile riRowId
37578>>>>>>>        
37578>>>>>>>        If (bOpOk) Begin
37580>>>>>>>            If (hoDD) Begin
37582>>>>>>>                Move (Found) to bFound
37583>>>>>>>                Send OnPostFind of hoDD DDFindFindByRowRec bFound
37584>>>>>>>                Move bFound to Found
37585>>>>>>>            End
37585>>>>>>>>
37585>>>>>>>        End
37585>>>>>>>>
37585>>>>>>>    End_Procedure
37586>>>>>>>    
37586>>>>>>>    Function FindByRowIdEx Integer iFile RowID riRowId Returns Boolean
37588>>>>>>>        Handle hoDD
37588>>>>>>>        Boolean bFound bSuccess
37588>>>>>>>        Boolean bOpOk
37588>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37589>>>>>>>        Send Update_Focus_Field_For_Operation MODE_FINDING
37590>>>>>>>        
37590>>>>>>>        If (bOpOk) Begin
37592>>>>>>>            Get Data_Set iFile to hoDD
37593>>>>>>>            If hoDD Begin
37595>>>>>>>                Send OnPreFind of hoDD DDFindFindByRowRec
37596>>>>>>>            End
37596>>>>>>>>
37596>>>>>>>        End
37596>>>>>>>>
37596>>>>>>>        
37596>>>>>>>        Forward Get FindByRowIdEx iFile riRowId to bSuccess
37598>>>>>>>        
37598>>>>>>>        If (bOpOk) Begin
37600>>>>>>>            If (hoDD) Begin
37602>>>>>>>                Move (Found) to bFound
37603>>>>>>>                Send OnPostFind of hoDD DDFindFindByRowRec bFound
37604>>>>>>>                Move bFound to Found
37605>>>>>>>            End
37605>>>>>>>>
37605>>>>>>>        End
37605>>>>>>>>
37605>>>>>>>        Function_Return bSuccess
37606>>>>>>>    End_Function
37607>>>>>>>    
37607>>>>>>>    Function FindByRowIdExNoAutoFill Integer iFile RowID riRowId Returns Boolean
37609>>>>>>>        Handle hoDD
37609>>>>>>>        Boolean bFound bSuccess
37609>>>>>>>        Boolean bOpOk
37609>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37610>>>>>>>        Send Update_Focus_Field_For_Operation MODE_FINDING
37611>>>>>>>        
37611>>>>>>>        If (bOpOk) Begin
37613>>>>>>>            Get Data_Set iFile to hoDD
37614>>>>>>>            If hoDD Begin
37616>>>>>>>                Send OnPreFind of hoDD DDFindFindByRowRec
37617>>>>>>>            End
37617>>>>>>>>
37617>>>>>>>        End
37617>>>>>>>>
37617>>>>>>>        
37617>>>>>>>        Forward Get FindByRowIdExNoAutoFill iFile riRowId to bSuccess
37619>>>>>>>        
37619>>>>>>>        If (bOpOk) Begin
37621>>>>>>>            If (hoDD) Begin
37623>>>>>>>                Move (Found) to bFound
37624>>>>>>>                Send OnPostFind of hoDD DDFindFindByRowRec bFound
37625>>>>>>>                Move bFound to Found
37626>>>>>>>            End
37626>>>>>>>>
37626>>>>>>>        End
37626>>>>>>>>
37626>>>>>>>        Function_Return bSuccess
37627>>>>>>>    End_Function
37628>>>>>>>    
37628>>>>>>>    
37628>>>>>>>    Procedure Request_Find Integer eFindMode Integer iFile Integer iIndex
37630>>>>>>>        Handle hoDD
37630>>>>>>>        Boolean bFound
37630>>>>>>>        Boolean bOpOk
37630>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37631>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37633>>>>>>>            Send Update_Focus_Field_For_Operation MODE_FINDING
37634>>>>>>>        End
37634>>>>>>>>
37634>>>>>>>        
37634>>>>>>>        If (bOpOk) Begin
37636>>>>>>>            Get Data_Set iFile to hoDD
37637>>>>>>>            If hoDD Begin
37639>>>>>>>                Send OnPreFind of hoDD DDFindRequestFind
37640>>>>>>>            End
37640>>>>>>>>
37640>>>>>>>        End
37640>>>>>>>>
37640>>>>>>>        
37640>>>>>>>        Forward Send Request_Find eFindMode iFile iIndex
37642>>>>>>>        
37642>>>>>>>        If (bOpOk) Begin
37644>>>>>>>            If (hoDD) Begin
37646>>>>>>>                Move (Found) to bFound
37647>>>>>>>                Send OnPostFind of hoDD DDFindRequestFind bFound
37648>>>>>>>                Move bFound to Found
37649>>>>>>>            End
37649>>>>>>>>
37649>>>>>>>        End
37649>>>>>>>>
37649>>>>>>>    End_Procedure
37650>>>>>>>    
37650>>>>>>>    Procedure OnPreFind Integer eMessage
37652>>>>>>>    End_Procedure
37653>>>>>>>    
37653>>>>>>>    Procedure OnPostFind Integer eMessage Boolean bFound
37655>>>>>>>    End_Procedure
37656>>>>>>>    
37656>>>>>>>    
37656>>>>>>>    
37656>>>>>>>    Procedure Request_Superfind Integer eFindMode Integer iFile Integer iField
37658>>>>>>>        Boolean bInSuperFind
37658>>>>>>>        // we need to set pbInSuperFind so Entry_update in the DEOs will know that
37658>>>>>>>        // they should perform an entry_update. Superfind entry_updates have never gone through
37658>>>>>>>        // the DD's field buffer.
37658>>>>>>>        Get pbInSuperFind to bInSuperFind
37659>>>>>>>        Set pbInSuperFind to True
37660>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37662>>>>>>>            Send Update_Focus_Field_For_Operation MODE_FINDING
37663>>>>>>>        End
37663>>>>>>>>
37663>>>>>>>        Forward Send Request_Superfind eFindMode iFile iField
37665>>>>>>>        Set pbInSuperFind to bInSuperFind
37666>>>>>>>    End_Procedure
37667>>>>>>>    
37667>>>>>>>    // Augmented to return true if a non-constrained parent DD has a change. This way
37667>>>>>>>    // Should_Save_row only filters changes in a consrained parent.
37667>>>>>>>    
37667>>>>>>>    Function Should_Save_Row Returns Boolean
37669>>>>>>>        Boolean bShouldSaveRow bShouldSave bRelatesToConstraint
37669>>>>>>>        Integer iServers iServer iServerFile
37669>>>>>>>        Handle hoServerDD
37669>>>>>>>        Forward Get Should_Save_Row to bShouldSaveRow // will be true if this DD is changed or has a changed parent.
37671>>>>>>>        Get Should_Save to bShouldSave // will be true if there is a change anywhere up the entire save structure
37672>>>>>>>        If (not(bShouldSaveRow) and bShouldSave) Begin
37674>>>>>>>            // If here we have a changed in an server but not the this DD. We need a further refinement. If the server
37674>>>>>>>            // change is in a constrained server, we don't consider this a change because you can switch rows without losing
37674>>>>>>>            // data (with RT changes made for 17.0).
37674>>>>>>>            Get Data_Set_Server_Count to iServers
37675>>>>>>>            For iServer from 0 to (iServers-1)
37681>>>>>>>>
37681>>>>>>>                Get Data_Set_Server iServer to hoServerDD
37682>>>>>>>                Get Should_Save of hoServerDD to bShouldSave
37683>>>>>>>                If bShouldSave Begin
37685>>>>>>>                    Get Main_File of hoServerDD to iServerFile
37686>>>>>>>                    Get IsRelatesToConstrained iServerFile to bRelatesToConstraint
37687>>>>>>>                    If not bRelatesToConstraint Begin
37689>>>>>>>                        Function_Return True
37690>>>>>>>                    End
37690>>>>>>>>
37690>>>>>>>                End
37690>>>>>>>>
37690>>>>>>>            Loop
37691>>>>>>>>
37691>>>>>>>        End
37691>>>>>>>>
37691>>>>>>>        Function_Return bShouldSaveRow
37692>>>>>>>    End_Function
37693>>>>>>>    
37693>>>>>>>    // returns true if any relates-to constraining server needs a save. Normally there will be
37693>>>>>>>    // one or zero related-to parents. If Should_Save_Row returns false it is possible that there
37693>>>>>>>    // is a change up the relates-to constrained branch. If so, this will return True. This can be
37693>>>>>>>    // used to better determine the changed status of your DDO sructure
37693>>>>>>>    Function ShouldSaveConstrainedToServer Returns Boolean
37695>>>>>>>        Boolean bShouldSave bRelatesToConstraint
37695>>>>>>>        Integer iServers iServer iServerFile
37695>>>>>>>        Handle hoServerDD
37695>>>>>>>        Get Data_Set_Server_Count to iServers
37696>>>>>>>        For iServer from 0 to (iServers-1)
37702>>>>>>>>
37702>>>>>>>            Get Data_Set_Server iServer to hoServerDD
37703>>>>>>>            Get Main_File of hoServerDD to iServerFile
37704>>>>>>>            Get IsRelatesToConstrained iServerFile to bRelatesToConstraint
37705>>>>>>>            If bRelatesToConstraint Begin
37707>>>>>>>                Get Should_Save of hoServerDD to bShouldSave
37708>>>>>>>                If bShouldSave Begin
37710>>>>>>>                    Function_Return True
37711>>>>>>>                End
37711>>>>>>>>
37711>>>>>>>            End
37711>>>>>>>>
37711>>>>>>>        Loop
37712>>>>>>>>
37712>>>>>>>        Function_Return False
37713>>>>>>>    End_Function
37714>>>>>>>    
37714>>>>>>>    Function FindServerInformationElement Integer iFile Returns Integer
37716>>>>>>>        tDDServerInformation[] ServerInformation
37716>>>>>>>        tDDServerInformation[] ServerInformation
37717>>>>>>>        tDDServerInformation ServerSearch
37717>>>>>>>        tDDServerInformation ServerSearch
37717>>>>>>>        Integer iIndex
37717>>>>>>>        Move iFile to ServerSearch.iParent
37718>>>>>>>        Get pServerInformation to ServerInformation
37719>>>>>>>        Function_Return (SearchArray(ServerSearch,ServerInformation))
37720>>>>>>>    End_Function
37721>>>>>>>    
37721>>>>>>>    Procedure AddServerData Integer iFile Integer eParam Boolean bValue
37723>>>>>>>        tDDServerInformation[] ServerInformation
37723>>>>>>>        tDDServerInformation[] ServerInformation
37724>>>>>>>        Integer iIndex
37724>>>>>>>        Handle hoDDO
37724>>>>>>>        
37724>>>>>>>        Get pServerInformation to ServerInformation
37725>>>>>>>        Get FindServerInformationElement iFile to iIndex
37726>>>>>>>        If (iIndex=-1) Begin
37728>>>>>>>            Move (SizeOfArray(ServerInformation)) to iIndex
37729>>>>>>>            Move iFile to ServerInformation[iIndex].iParent
37730>>>>>>>            // defaults must always be false!
37730>>>>>>>            Move False to ServerInformation[iIndex].bParentNoSwitchIfCommitted
37731>>>>>>>            Move False to ServerInformation[iIndex].bAllowNullParent
37732>>>>>>>            Move False to ServerInformation[iIndex].bNoCascadeDelete
37733>>>>>>>            Move False to ServerInformation[iIndex].bCascadeDeleteNullTheParent
37734>>>>>>>        End
37734>>>>>>>>
37734>>>>>>>        
37734>>>>>>>        If (eParam=0) Begin
37736>>>>>>>            If (bValue<>ServerInformation[iIndex].bAllowNullParent) Begin
37738>>>>>>>                Move bValue to ServerInformation[iIndex].bAllowNullParent
37739>>>>>>>                Send AdjustDeleteValidateStructure iFile
37740>>>>>>>            End
37740>>>>>>>>
37740>>>>>>>        End
37740>>>>>>>>
37740>>>>>>>        Else If (eParam=1) Begin
37743>>>>>>>            Move bValue to ServerInformation[iIndex].bParentNoSwitchIfCommitted
37744>>>>>>>        End
37744>>>>>>>>
37744>>>>>>>        Else If (eParam=2) Begin
37747>>>>>>>            Move bValue to ServerInformation[iIndex].bNoCascadeDelete
37748>>>>>>>        End
37748>>>>>>>>
37748>>>>>>>        Else Begin // (3)
37749>>>>>>>            If (bValue<>ServerInformation[iIndex].bCascadeDeleteNullTheParent) Begin
37751>>>>>>>                Move bValue to ServerInformation[iIndex].bCascadeDeleteNullTheParent
37752>>>>>>>                Send AdjustDeleteValidateStructure iFile
37753>>>>>>>            End
37753>>>>>>>>
37753>>>>>>>        End
37753>>>>>>>>
37753>>>>>>>        Set pServerInformation to ServerInformation
37754>>>>>>>    End_Procedure
37755>>>>>>>    
37755>>>>>>>    Function GetServerData Integer iFile Integer eParam Returns Boolean
37757>>>>>>>        Boolean bValue
37757>>>>>>>        tDDServerInformation[] ServerInformation
37757>>>>>>>        tDDServerInformation[] ServerInformation
37758>>>>>>>        Integer iIndex
37758>>>>>>>        Get pServerInformation to ServerInformation
37759>>>>>>>        Get FindServerInformationElement iFile to iIndex
37760>>>>>>>        // when not found in array, we want to make sure that we return false. Therefore
37760>>>>>>>        // false should always be the default.
37760>>>>>>>        If (iIndex<>-1) Begin
37762>>>>>>>            If (eParam=0) Begin
37764>>>>>>>                Move ServerInformation[iIndex].bAllowNullParent to bValue
37765>>>>>>>            End
37765>>>>>>>>
37765>>>>>>>            Else If (eParam=1) Begin
37768>>>>>>>                Move ServerInformation[iIndex].bParentNoSwitchIfCommitted to bValue
37769>>>>>>>            End
37769>>>>>>>>
37769>>>>>>>            Else If (eParam=2) Begin
37772>>>>>>>                Move ServerInformation[iIndex].bNoCascadeDelete to bValue
37773>>>>>>>            End
37773>>>>>>>>
37773>>>>>>>            Else Begin
37774>>>>>>>                Move ServerInformation[iIndex].bCascadeDeleteNullTheParent to bValue
37775>>>>>>>            End
37775>>>>>>>>
37775>>>>>>>        End
37775>>>>>>>>
37775>>>>>>>        Function_Return bValue
37776>>>>>>>    End_Function
37777>>>>>>>    
37777>>>>>>>    Procedure AdjustDeleteValidateStructure2
37779>>>>>>>        Integer iCount i
37779>>>>>>>        Handle hoDDO
37779>>>>>>>        Boolean bVisited
37779>>>>>>>        Set Visited_State to True
37780>>>>>>>        Set Cascade_Delete_Structure_Validated_State to False
37781>>>>>>>        Get Data_Set_Server_Count to iCount
37782>>>>>>>        For i from 0 to (iCount-1)
37788>>>>>>>>
37788>>>>>>>            Get Data_Set_Server i to hoDDO
37789>>>>>>>            Get Visited_State of hoDDO to bVisited
37790>>>>>>>            If (not(bVisited)) Begin
37792>>>>>>>                Send AdjustDeleteValidateStructure2 of hoDDO
37793>>>>>>>            End
37793>>>>>>>>
37793>>>>>>>        Loop
37794>>>>>>>>
37794>>>>>>>    End_Procedure
37795>>>>>>>    
37795>>>>>>>    // This is called in the unlikely case that NullParent/CascadeNull are set dynamically. It
37795>>>>>>>    // tells the parent DDO to recheck its validate-delete structure and it tells all ancestors of
37795>>>>>>>    // this parent to do the same. If called while DDOs are being created (via a class setting) there
37795>>>>>>>    // will not be a connected parent for iFile, which is fine.
37795>>>>>>>    Procedure AdjustDeleteValidateStructure Integer iFile
37797>>>>>>>        Handle hoDDO
37797>>>>>>>        Get Which_Data_Set iFile to hoDDO
37798>>>>>>>        If hoDDO Begin
37800>>>>>>>            Send Initialize_Visited of hoDDO False False
37801>>>>>>>            Send AdjustDeleteValidateStructure2 of hoDDO
37802>>>>>>>        End
37802>>>>>>>>
37802>>>>>>>    End_Procedure
37803>>>>>>>    
37803>>>>>>>    // Used to add a null parent to the list of parents that allow this
37803>>>>>>>    Procedure Set ParentNullAllowed Integer iParent Boolean bAllowed
37805>>>>>>>        Send AddServerData iParent 0 bAllowed
37806>>>>>>>    End_Procedure
37807>>>>>>>    
37807>>>>>>>    // returns true if null parent allowed for this parent file
37807>>>>>>>    Function ParentNullAllowed Integer iParent Returns Boolean
37809>>>>>>>        Boolean bValue
37809>>>>>>>        Get GetServerData iParent 0 to bValue
37810>>>>>>>        Function_Return bValue
37811>>>>>>>    End_Function
37812>>>>>>>    
37812>>>>>>>    // returns true if null parent allowed for this parent file. This is the function
37812>>>>>>>    // that can be used for augmentation. This is the methid that is called by the runtime
37812>>>>>>>    // to determine if a null parent is allowed
37812>>>>>>>    Function IsNullParentAllowed Integer iServer Returns Boolean
37814>>>>>>>        Boolean bAllowed
37814>>>>>>>        Get ParentNullAllowed iServer to bAllowed
37815>>>>>>>        Function_Return bAllowed
37816>>>>>>>    End_Function
37817>>>>>>>    
37817>>>>>>>    Procedure Set ParentNoSwitchIfCommitted Integer iParent Boolean bAllowed
37819>>>>>>>        Send AddServerData iParent 1 bAllowed
37820>>>>>>>    End_Procedure
37821>>>>>>>    
37821>>>>>>>    Function ParentNoSwitchIfCommitted Integer iParent Returns Boolean
37823>>>>>>>        Boolean bValue
37823>>>>>>>        Get GetServerData iParent 1 to bValue
37824>>>>>>>        Function_Return bValue
37825>>>>>>>    End_Function
37826>>>>>>>    
37826>>>>>>>    
37826>>>>>>>    Procedure Set CascadeDeleteAllowed Integer iParent Boolean bAllowed
37828>>>>>>>        Send AddServerData iParent 2 (not(bAllowed))
37829>>>>>>>    End_Procedure
37830>>>>>>>    
37830>>>>>>>    Function CascadeDeleteAllowed Integer iParent Returns Boolean
37832>>>>>>>        Boolean bValue
37832>>>>>>>        Get GetServerData iParent 2 to bValue // note that False=allowed
37833>>>>>>>        Function_Return (not(bValue))
37834>>>>>>>    End_Function
37835>>>>>>>    
37835>>>>>>>    Function IsCascadeDeleteAllowed Integer iServer Returns Boolean
37837>>>>>>>        Boolean bAllowed
37837>>>>>>>        Get CascadeDeleteAllowed iServer to bAllowed
37838>>>>>>>        Function_Return bAllowed
37839>>>>>>>    End_Function
37840>>>>>>>    
37840>>>>>>>    Procedure Set CascadeDeleteNull Integer iParent Boolean bAllowed
37842>>>>>>>        Send AddServerData iParent 3 bAllowed
37843>>>>>>>    End_Procedure
37844>>>>>>>    
37844>>>>>>>    Function CascadeDeleteNull Integer iParent Returns Boolean
37846>>>>>>>        Boolean bValue
37846>>>>>>>        Get GetServerData iParent 3 to bValue
37847>>>>>>>        Function_Return bValue
37848>>>>>>>    End_Function
37849>>>>>>>    
37849>>>>>>>    Function IsCascadeDeleteNull Integer iServer Returns Boolean
37851>>>>>>>        Boolean bAllowed
37851>>>>>>>        Get CascadeDeleteNull iServer to bAllowed
37852>>>>>>>        Function_Return bAllowed
37853>>>>>>>    End_Function
37854>>>>>>>    
37854>>>>>>>    // return an array with the server path from this DD to passed top. The top will be
37854>>>>>>>    // in 0 and its child in 1, grand-child in 2, etc. If empty, no path was found. To start
37854>>>>>>>    // this process the byref hoDDs array MUST be empty
37854>>>>>>>    Procedure DDOServerPath Handle hoTop Handle[] ByRef hoDDs
37856>>>>>>>        Handle hoServer
37856>>>>>>>        Integer iServers iServer
37856>>>>>>>        If (hoTop=Self) Begin
37858>>>>>>>            Move Self to hoDDs[SizeOfArray(hoDDs)]
37859>>>>>>>            Procedure_Return
37860>>>>>>>        End
37860>>>>>>>>
37860>>>>>>>        Get Data_Set_Server_Count to iServers
37861>>>>>>>        For iServer from 0 to (iServers-1)
37867>>>>>>>>
37867>>>>>>>            Get Data_Set_Server iServer to hoServer
37868>>>>>>>            Send DDOServerPath of hoServer hoTop (&hoDDs)
37869>>>>>>>            If (SizeOfArray(hoDDs)) Begin
37871>>>>>>>                Move Self to hoDDs[SizeOfArray(hoDDs)]
37872>>>>>>>                Procedure_Return
37873>>>>>>>            End
37873>>>>>>>>
37873>>>>>>>        Loop
37874>>>>>>>>
37874>>>>>>>    End_Procedure
37875>>>>>>>    
37875>>>>>>>    // returns True if the value passed can be considered empty for this field.
37875>>>>>>>    Function IsEmptyField Integer iField String sValue Returns Boolean
37877>>>>>>>        Integer iFile iDataType iValidationType
37877>>>>>>>        Number nNum
37877>>>>>>>        Boolean bInvalid bChecked
37877>>>>>>>        Get Main_File to iFile
37878>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iDataType
37881>>>>>>>        Get IsDataInvalid iDataType sValue to bInvalid
37882>>>>>>>        If bInvalid Begin
37884>>>>>>>            Function_Return True
37885>>>>>>>        End
37885>>>>>>>>
37885>>>>>>>        
37885>>>>>>>        // DDs set checkbox fields to the False value as default. We must test its select_state
37885>>>>>>>        Get Field_Validation_Type of (Field_Attributes(Self)) iField to iValidationType
37886>>>>>>>        If (iValidationType=FA_VALIDATION_TYPE_CHECKBOX) Begin
37888>>>>>>>            Get Field_Select_State iField to bChecked
37889>>>>>>>            If not bChecked Begin
37891>>>>>>>                Function_Return True
37892>>>>>>>            End
37892>>>>>>>>
37892>>>>>>>        End
37892>>>>>>>>
37892>>>>>>>        
37892>>>>>>>        If ((iDataType=DF_BCD or iDataType=DF_DATE) and (Number(sValue)=0)) Begin
37894>>>>>>>            Move "" to sValue
37895>>>>>>>        End
37895>>>>>>>>
37895>>>>>>>        Else If (iDataType=DF_DATETIME and IsNullDateTime(cast(sValue,DateTime))) Begin
37898>>>>>>>            Move "" to sValue
37899>>>>>>>        End
37899>>>>>>>>
37899>>>>>>>        Function_Return (sValue="")
37900>>>>>>>    End_Function
37901>>>>>>>    
37901>>>>>>>    
37901>>>>>>>    // is the record committed
37901>>>>>>>    Function IsCommitted Returns Boolean
37903>>>>>>>        Boolean bHasRecord
37903>>>>>>>        Get HasRecord to bHasRecord
37904>>>>>>>        Function_Return bHasRecord
37905>>>>>>>    End_Function
37906>>>>>>>    
37906>>>>>>>    // is the field committed. It assumes the record is already committed
37906>>>>>>>    Function IsFieldCommitted Integer iField Returns Boolean
37908>>>>>>>        Boolean bIsCommitted
37908>>>>>>>        Get Field_Option iField DD_COMMIT to bIsCommitted
37909>>>>>>>        Function_Return bIsCommitted
37910>>>>>>>    End_Function
37911>>>>>>>    
37911>>>>>>>    // is a parent change allowed for this parent server.
37911>>>>>>>    Function IsCommittedParentChangeAllowed Integer iServer Returns Boolean
37913>>>>>>>        Boolean bNoSwitch
37913>>>>>>>        Get ParentNoSwitchIfCommitted iServer to bNoSwitch
37914>>>>>>>        Function_Return (not(bNoSwitch))
37915>>>>>>>    End_Function
37916>>>>>>>    
37916>>>>>>>    // Are we allowed to find with this file when it is used as a parent?
37916>>>>>>>    // Check all child DDOs and see if any are committed and do not allow switching parents when committed.
37916>>>>>>>    //  The rules for each child are switching is ok If:
37916>>>>>>>    // 1. the child is not committed,
37916>>>>>>>    // 2. it has a relates-to constraint (Find will change child which is ok)
37916>>>>>>>    // 3. if IsCommittedParentChangeAllowed allowed.
37916>>>>>>>    //
37916>>>>>>>    Function AllowParentFind Returns Boolean
37918>>>>>>>        Integer iClients iClient iMain
37918>>>>>>>        Handle hoChild
37918>>>>>>>        Boolean bIsCommitted
37918>>>>>>>        Get Data_Set_Client_Count to iClients
37919>>>>>>>        For iClient from 0 to (iClients-1)
37925>>>>>>>>
37925>>>>>>>            Get Data_Set_Client iClient to hoChild
37926>>>>>>>            Get IsCommitted of hoChild to bIsCommitted
37927>>>>>>>            If bIsCommitted Begin
37929>>>>>>>                Get Main_File to iMain
37930>>>>>>>                Get IsRelatesToConstrained of hoChild iMain to bIsCommitted
37931>>>>>>>                If not bIsCommitted Begin
37933>>>>>>>                    Get IsCommittedParentChangeAllowed of hoChild iMain to bIsCommitted
37934>>>>>>>                    If (not(bIsCommitted)) Begin
37936>>>>>>>                        Function_Return False
37937>>>>>>>                    End
37937>>>>>>>>
37937>>>>>>>                End
37937>>>>>>>>
37937>>>>>>>            End
37937>>>>>>>>
37937>>>>>>>        Loop
37938>>>>>>>>
37938>>>>>>>        Function_Return True
37939>>>>>>>    End_Function
37940>>>>>>>    
37940>>>>>>>    // aumgented to do nothing if there is no index (instead of annoying error message) and
37940>>>>>>>    // to do nothing if a find is not allowed because it is a no switch parent of a committed child.
37940>>>>>>>    Procedure Item_Find Integer eFindMode ;            Integer iFile Integer iField ;            Integer bDoEntryUpdate Integer bShowFindErr Integer bDeferred
37942>>>>>>>        
37942>>>>>>>        Integer iIndex iMain
37942>>>>>>>        Handle  hoOwner
37942>>>>>>>        Boolean bOk
37942>>>>>>>        
37942>>>>>>>        Get File_Field_Index iFile iField to iIndex
37943>>>>>>>        If (iIndex=-1)  Begin
37945>>>>>>>            Procedure_Return
37946>>>>>>>        End
37946>>>>>>>>
37946>>>>>>>        Get Main_File to iMain
37947>>>>>>>        If (iMain<>iFile) Begin
37949>>>>>>>            Get Which_Data_Set iFile to hoOwner
37950>>>>>>>            If hoOwner Begin
37952>>>>>>>                Get AllowParentFind of hoOwner to bOk
37953>>>>>>>                If not bOk Begin
37955>>>>>>>                    Procedure_Return
37956>>>>>>>                End
37956>>>>>>>>
37956>>>>>>>            End
37956>>>>>>>>
37956>>>>>>>        End
37956>>>>>>>>
37956>>>>>>>        
37956>>>>>>>        If not bDeferred Begin
37958>>>>>>>            Send Refind_Records // make sure the buffers are correct before the find
37959>>>>>>>        End
37959>>>>>>>>
37959>>>>>>>        
37959>>>>>>>        Forward Send Item_Find eFindMode iFile iField bDoEntryUpdate bShowFindErr bDeferred
37961>>>>>>>    End_Procedure
37962>>>>>>>    
37962>>>>>>>    
37962>>>>>>>    Function Field_CommitNoEnterOnIndex Integer iField Returns Boolean
37964>>>>>>>        Function_Return False
37965>>>>>>>    End_Function
37966>>>>>>>    
37966>>>>>>>    // Return the committed options for this field based on the committed status or this record,
37966>>>>>>>    // the committed status of the field and whether, if committed, it should be noput or noput+noenter
37966>>>>>>>    Function File_Field_Committed_Options Integer iFile Integer iField Returns Integer
37968>>>>>>>        Boolean bIsCommitted bNoEnter
37968>>>>>>>        Integer iNewOpts iIndex
37968>>>>>>>        Handle hoOwner
37968>>>>>>>        
37968>>>>>>>        Get Which_Data_Set iFile to hoOwner
37969>>>>>>>        If not hoOwner ;            Function_Return 0
37972>>>>>>>        
37972>>>>>>>        Get File_Field_Index iFile iField to iIndex
37973>>>>>>>        Get IsCommitted of hoOwner to bIsCommitted
37974>>>>>>>        If bIsCommitted Begin
37976>>>>>>>            Get IsFieldCommitted of hoOwner iField to bIsCommitted
37977>>>>>>>            If bIsCommitted Begin
37979>>>>>>>                Move True to bNoEnter
37980>>>>>>>                If (iIndex<>-1) Begin
37982>>>>>>>                    Get Field_CommitNoEnterOnIndex iField to bNoEnter
37983>>>>>>>                End
37983>>>>>>>>
37983>>>>>>>                // if committed, it is noput and, if non-indexed, also noenter
37983>>>>>>>                Move (If(bNoEnter,DD_DISPLAYONLY,DD_NOPUT)) to iNewOpts
37984>>>>>>>            End
37984>>>>>>>>
37984>>>>>>>        End
37984>>>>>>>>
37984>>>>>>>        // if a finding parent field, we want to know if you are allowed to switch parents as we will assume
37984>>>>>>>        // that this field is used for finding.
37984>>>>>>>        If (hoOwner<>Self and iIndex>-1) Begin
37986>>>>>>>            Get AllowParentFind of hoOwner to bIsCommitted
37987>>>>>>>            If not bIsCommitted Begin
37989>>>>>>>                Move DD_DISPLAYONLY to iNewOpts
37990>>>>>>>            End
37990>>>>>>>>
37990>>>>>>>        End
37990>>>>>>>>
37990>>>>>>>        
37990>>>>>>>        Function_Return iNewOpts
37991>>>>>>>    End_Function
37992>>>>>>>    
37992>>>>>>>    // Returns the current field-field options based on regular options, foreign field status
37992>>>>>>>    // plus committed record status
37992>>>>>>>    Function File_Field_DynamicEntryOptions Integer iFile Integer iField Returns Integer
37994>>>>>>>        Integer iCOpts iFOpts
37994>>>>>>>        If (iFile=0) Begin
37996>>>>>>>            Function_Return 0
37997>>>>>>>        End
37997>>>>>>>>
37997>>>>>>>        Get File_Field_Options iFile iField to iFOpts            // regular options (handles regular and foreign)
37998>>>>>>>        Get File_Field_Committed_Options iFile iField to iCOpts  // possible NoPut, NoEnter additions
37999>>>>>>>        Function_Return (iFOpts ior iCOpts)
38000>>>>>>>    End_Function
38001>>>>>>>    
38001>>>>>>>    Function DDRememberedFieldIndex Integer iField Returns Integer
38003>>>>>>>        tDDRemembered[] DefaultValues
38003>>>>>>>        tDDRemembered[] DefaultValues
38004>>>>>>>        tDDRemembered SearchItem
38004>>>>>>>        tDDRemembered SearchItem
38004>>>>>>>        Integer iIndex
38004>>>>>>>        Get pDDDefaults to DefaultValues
38005>>>>>>>        Move iField to SearchItem.iField
38006>>>>>>>        Move (SearchArray(SearchItem,DefaultValues)) to iIndex
38007>>>>>>>        Function_Return iIndex
38008>>>>>>>    End_Function
38009>>>>>>>    
38009>>>>>>>    // Interface used to set or clear a dynamic default (remembered) value for a DD field. If the
38009>>>>>>>    // value passed is empty ("" or as empty as defined by the data-type) it is cleared. If the value
38009>>>>>>>    // is DD_RememberLast, it will use the last value before a clear as the default, else it uses the
38009>>>>>>>    // passed value as the default
38009>>>>>>>    Procedure Set Field_RememberedValue Integer iField String sValue
38011>>>>>>>        tDDRemembered[] DefaultValues
38011>>>>>>>        tDDRemembered[] DefaultValues
38012>>>>>>>        Integer iIndex
38012>>>>>>>        Boolean bNull
38012>>>>>>>        Get DDRememberedFieldIndex iField to iIndex
38013>>>>>>>        Get pDDDefaults to DefaultValues
38014>>>>>>>        If (sValue<>DD_RememberLast) Begin // if it is rememberlast, we know it is not null
38016>>>>>>>            Get IsEmptyField iField sValue to bNull
38017>>>>>>>        End
38017>>>>>>>>
38017>>>>>>>        If (not(bNull)) Begin
38019>>>>>>>            If (iIndex=-1) Begin
38021>>>>>>>                Move (SizeOfArray(DefaultValues)) to iIndex
38022>>>>>>>                Move iField to DefaultValues[iIndex].iField
38023>>>>>>>            End
38023>>>>>>>>
38023>>>>>>>            Move sValue to DefaultValues[iIndex].sDefault
38024>>>>>>>            Set pDDDefaults to DefaultValues
38025>>>>>>>        End
38025>>>>>>>>
38025>>>>>>>        Else If  (iIndex<>-1) Begin
38028>>>>>>>            Set pDDDefaults to (RemoveFromArray(DefaultValues,iIndex))
38029>>>>>>>        End
38029>>>>>>>>
38029>>>>>>>    End_Procedure
38030>>>>>>>    
38030>>>>>>>    // get the remembered value as per rules above
38030>>>>>>>    Function Field_RememberedValue Integer iField Returns String
38032>>>>>>>        tDDRemembered[] DefaultValues
38032>>>>>>>        tDDRemembered[] DefaultValues
38033>>>>>>>        Integer iIndex
38033>>>>>>>        Get DDRememberedFieldIndex iField to iIndex
38034>>>>>>>        If (iIndex<>-1) Begin
38036>>>>>>>            Get pDDDefaults to DefaultValues
38037>>>>>>>            Function_Return DefaultValues[iIndex].sDefault
38038>>>>>>>        End
38038>>>>>>>>
38038>>>>>>>        Function_Return ''
38039>>>>>>>    End_Function
38040>>>>>>>    
38040>>>>>>>    Procedure AssignDynamicDefaults
38042>>>>>>>        Integer iField iFields iFile
38042>>>>>>>        tDDRemembered[] DefaultValues
38042>>>>>>>        tDDRemembered[] DefaultValues
38043>>>>>>>        Boolean bMain
38043>>>>>>>        String sValue
38043>>>>>>>        
38043>>>>>>>        Get Main_File to iFile
38044>>>>>>>        Get pDDDefaults to DefaultValues
38045>>>>>>>        Move (SizeOfArray(DefaultValues)) to iFields
38046>>>>>>>        For iField from 0 to (iFields-1)
38052>>>>>>>>
38052>>>>>>>            If ( DefaultValues[iField].sDefault<>"") Begin
38054>>>>>>>                If (DefaultValues[iField].sDefault=DD_RememberLast) Begin
38056>>>>>>>                    Move DefaultValues[iField].sLastValue to sValue
38057>>>>>>>                End
38057>>>>>>>>
38057>>>>>>>                Else Begin
38058>>>>>>>                    Move DefaultValues[iField].sDefault to sValue
38059>>>>>>>                End
38059>>>>>>>>
38059>>>>>>>                Set Field_Changed_Value DefaultValues[iField].iField to sValue
38060>>>>>>>            End
38060>>>>>>>>
38060>>>>>>>        Loop
38061>>>>>>>>
38061>>>>>>>    End_Procedure
38062>>>>>>>    
38062>>>>>>>    // Clears all remembered defaults for this DD.
38062>>>>>>>    Procedure ClearRememberedDefaults
38064>>>>>>>        tDDRemembered[] DefaultValues
38064>>>>>>>        tDDRemembered[] DefaultValues
38065>>>>>>>        Set pDDDefaults to DefaultValues
38066>>>>>>>    End_Procedure
38067>>>>>>>    
38067>>>>>>>    Procedure PrivateClearAllRememberedDefaults
38069>>>>>>>        Integer iCount iMax
38069>>>>>>>        Handle hoDD
38069>>>>>>>        Boolean bVisisted
38069>>>>>>>        
38069>>>>>>>        Set Visited_State to True
38070>>>>>>>        
38070>>>>>>>        Get Data_Set_Server_Count to iMax
38071>>>>>>>        Decrement iMax
38072>>>>>>>        For iCount from 0 to iMax
38078>>>>>>>>
38078>>>>>>>            Get Data_Set_Server iCount to hoDD
38079>>>>>>>            Get Visited_State of hoDD to bVisisted
38080>>>>>>>            If not (bVisisted) Begin
38082>>>>>>>                Send PrivateClearAllRememberedDefaults of hoDD
38083>>>>>>>            End
38083>>>>>>>>
38083>>>>>>>        Loop
38084>>>>>>>>
38084>>>>>>>        
38084>>>>>>>        Send ClearRememberedDefaults
38085>>>>>>>        
38085>>>>>>>        Get Data_Set_Client_Count to iMax
38086>>>>>>>        Decrement iMax
38087>>>>>>>        For iCount from 0 to iMax
38093>>>>>>>>
38093>>>>>>>            Get Data_Set_Client iCount to hoDD
38094>>>>>>>            Get Visited_State of hoDD to bVisisted
38095>>>>>>>            If not (bVisisted) Begin
38097>>>>>>>                Send PrivateClearAllRememberedDefaults of hoDD
38098>>>>>>>            End
38098>>>>>>>>
38098>>>>>>>        Loop
38099>>>>>>>>
38099>>>>>>>        
38099>>>>>>>    End_Procedure
38100>>>>>>>    
38100>>>>>>>    // Clears all remembered defaults for all DDs in this structure.
38100>>>>>>>    Procedure ClearAllRememberedDefaults
38102>>>>>>>        Send InitializeAllVisited
38103>>>>>>>        Send PrivateClearAllRememberedDefaults
38104>>>>>>>    End_Procedure
38105>>>>>>>    
38105>>>>>>>    // This is called after a clear or clear all is sent to this DD. It does autofinds as needed
38105>>>>>>>    // for any parent DDs. It does this if the parent is not a relates to contraining parent, if
38105>>>>>>>    // a field has an index, it has a changed value and it is autofind or autofind_ge.
38105>>>>>>>    Procedure DefaultParentAutofinds
38107>>>>>>>        Integer i iServers iField iFields iFile iIndex iOpts
38107>>>>>>>        Boolean bDoAutoFind bRelates bIsEmptyField
38107>>>>>>>        String sValue
38107>>>>>>>        Handle hoServer
38107>>>>>>>        Get Data_Set_Server_Count to iServers
38108>>>>>>>        For i from 0 to (iServers-1)
38114>>>>>>>>
38114>>>>>>>            Get Data_Set_Server i to hoServer
38115>>>>>>>            Get Main_File of hoServer to iFile
38116>>>>>>>            Get IsRelatesToConstrained iFile to bRelates
38117>>>>>>>            // never autofind on a relates-to constraining parent
38117>>>>>>>            If not (bRelates) Begin
38119>>>>>>>                
38119>>>>>>>                Get Field_Count of hoServer to iFields
38120>>>>>>>                Move False to bDoAutoFind
38121>>>>>>>                Move 1 to iField
38122>>>>>>>                While (not(bDoAutoFind) and (iField<=iFields))
38126>>>>>>>                    Get_Attribute DF_FIELD_INDEX of iFile iField to iIndex
38129>>>>>>>                    If (iIndex>0) Begin
38131>>>>>>>                        Get Field_Changed_State of hoServer iField to bDoAutoFind
38132>>>>>>>                        If bDoAutoFind Begin
38134>>>>>>>                            Get Field_Current_Value of hoServer iField to sValue
38135>>>>>>>                            Get IsEmptyField of hoServer iField sValue to bIsEmptyField
38136>>>>>>>                            Move (not(bIsEmptyField)) to bDoAutoFind
38137>>>>>>>                            If bDoAutoFind Begin
38139>>>>>>>                                Get File_Field_Options iFile iField to iOpts
38140>>>>>>>                                // if this is a retain or retainall we don't do this because we want
38140>>>>>>>                                // to maintain backwards compatibility
38140>>>>>>>                                Move ( (iOpts iand DD_AUTOFIND or iOpts iand DD_AUTOFIND_GE) and ;                                    not( iOpts iand DD_RETAIN or iOpts iand DD_RETAINALL) ) to bDoAutoFind
38141>>>>>>>                                If bDoAutoFind Begin
38143>>>>>>>                                    Send File_Field_Default_AutoFind iFile iField
38144>>>>>>>                                    Set Changed_State to False // clears parent changed state
38145>>>>>>>                                End
38145>>>>>>>>
38145>>>>>>>                            End
38145>>>>>>>>
38145>>>>>>>                        End
38145>>>>>>>>
38145>>>>>>>                    End
38145>>>>>>>>
38145>>>>>>>                    Increment iField
38146>>>>>>>                Loop
38147>>>>>>>>
38147>>>>>>>                
38147>>>>>>>                // Only check for grandparent autofinds if this parent did not do a an autofind
38147>>>>>>>                // Doing an autofind on an autofind parent's parent is just too confusing
38147>>>>>>>                If not bDoAutoFind Begin
38149>>>>>>>                    Send DefaultParentAutofinds of hoServer
38150>>>>>>>                End
38150>>>>>>>>
38150>>>>>>>            End
38150>>>>>>>>
38150>>>>>>>        Loop
38151>>>>>>>>
38151>>>>>>>    End_Procedure
38152>>>>>>>    
38152>>>>>>>    // Set this DD to be an alias, passing the file number of the alias
38152>>>>>>>    // This can only be called once per instance and the Main_File must already have been set
38152>>>>>>>    // most likely in a superclass.
38152>>>>>>>    // This sets Main_File to the alias, stores the original master file (accessed via MasterForAlias).
38152>>>>>>>    // It also clears all existing relatonships. Normally we expect the alias class to set
38152>>>>>>>    // sets pbUseDDRelates and pbNoCascadeDeleteStrict to true. We don't do that automatically so that
38152>>>>>>>    // the Studio's property panel will show the correct values. When an alias is defined using the
38152>>>>>>>    // studio it will set these two properties.
38152>>>>>>>    // This means you must set any required relationships yourself
38152>>>>>>>    Procedure Set Alias_File Integer iTable
38154>>>>>>>        Integer iMain iMaster iFieldsM iFieldsA
38154>>>>>>>        Get Main_File to iMain
38155>>>>>>>        Get MasterForAlias to iMaster
38156>>>>>>>        
38156>>>>>>>        If (iTable=0 and iMaster) Begin
38158>>>>>>>            Error DFERR_PROGRAM "Cannot unset alias table"
38159>>>>>>>>
38159>>>>>>>            Procedure_Return
38160>>>>>>>        End
38160>>>>>>>>
38160>>>>>>>        If (iTable=iMain) Begin
38162>>>>>>>            Error DFERR_PROGRAM "Cannot set alias table to self"
38163>>>>>>>>
38163>>>>>>>            Procedure_Return
38164>>>>>>>        End
38164>>>>>>>>
38164>>>>>>>        If (iMaster) Begin
38166>>>>>>>            Error DFERR_PROGRAM "Cannot redefine alias table"
38167>>>>>>>>
38167>>>>>>>            Procedure_Return
38168>>>>>>>        End
38168>>>>>>>>
38168>>>>>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iMain to iFieldsM
38171>>>>>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iTable to iFieldsA
38174>>>>>>>        If (iFieldsA<>iFieldsM) Begin
38176>>>>>>>            Error DFERR_PROGRAM "Alias and Master file are not based on the same table"
38177>>>>>>>>
38177>>>>>>>            Procedure_Return
38178>>>>>>>        End
38178>>>>>>>>
38178>>>>>>>        
38178>>>>>>>        Set piMasterTable to iMain
38179>>>>>>>        Set Main_File to iTable
38180>>>>>>>        Send DefineAsAlias
38181>>>>>>>    End_Procedure
38182>>>>>>>    
38182>>>>>>>    Procedure DefineAsAlias
38184>>>>>>>        Integer i iFile
38184>>>>>>>        
38184>>>>>>>        // We expect he developer to set these properties to True
38184>>>>>>>        //Set pbUseDDRelates to True
38184>>>>>>>        //Set pbNoCascadeDeleteStrict to True
38184>>>>>>>        
38184>>>>>>>        Send ClearDDRelates
38185>>>>>>>        Get Client_File_Count to i
38186>>>>>>>        While i
38190>>>>>>>            Decrement i
38191>>>>>>>            Get Client_File i to iFile
38192>>>>>>>            Send Remove_Client_File iFile
38193>>>>>>>        Loop
38194>>>>>>>>
38194>>>>>>>        Get Server_File_Count to i
38195>>>>>>>        While i
38199>>>>>>>            Decrement i
38200>>>>>>>            Get Server_File i to iFile
38201>>>>>>>            Send Remove_Server_File iFile
38202>>>>>>>        Loop
38203>>>>>>>>
38203>>>>>>>    End_Procedure
38204>>>>>>>    
38204>>>>>>>    Function MasterForAlias Returns Integer
38206>>>>>>>        Integer iMaster
38206>>>>>>>        Get piMasterTable to iMaster
38207>>>>>>>        Function_Return iMaster
38208>>>>>>>    End_Function
38209>>>>>>>    
38209>>>>>>>    Function IsAlias Returns Boolean
38211>>>>>>>        Integer iMaster
38211>>>>>>>        Get piMasterTable to iMaster
38212>>>>>>>        Function_Return (iMaster<>0)
38213>>>>>>>    End_Function
38214>>>>>>>    
38214>>>>>>>    
38214>>>>>>>    Procedure OnSaveRecord
38216>>>>>>>    End_Procedure
38217>>>>>>>    
38217>>>>>>>    Procedure StoreDefaultSQLFilters
38219>>>>>>>        Handle hoSQLHelper
38219>>>>>>>        Get phoSQLHelper to hoSQLHelper
38220>>>>>>>        Send StoreDefaultSQLFilters of hoSQLHelper
38221>>>>>>>    End_Procedure
38222>>>>>>>    
38222>>>>>>>    Procedure RestoreDefaultSQLFilters
38224>>>>>>>        Handle hoSQLHelper
38224>>>>>>>        Get phoSQLHelper to hoSQLHelper
38225>>>>>>>        Send RestoreDefaultSQLFilters of hoSQLHelper
38226>>>>>>>    End_Procedure
38227>>>>>>>    
38227>>>>>>>    Procedure ApplySQLFilterStr String sFilter
38229>>>>>>>        Handle hoSQLHelper
38229>>>>>>>        Get phoSQLHelper to hoSQLHelper
38230>>>>>>>        Send ApplySQLFilterStr of hoSQLHelper sFilter
38231>>>>>>>    End_Procedure
38232>>>>>>>    
38232>>>>>>>    Procedure ApplySQLFilter
38234>>>>>>>        String sNewFilter sOldFilter
38234>>>>>>>        Boolean bApplyGlobalSQLFilters bOldFilterActive
38234>>>>>>>        Get psSQLFilter to sNewFilter
38235>>>>>>>        // if we have am active  table filter we can either ignore it or and it to the where clause
38235>>>>>>>        // pbApplyGlobalSQLFilters determines what to do.
38235>>>>>>>        Get pbApplyGlobalSQLFilters to bApplyGlobalSQLFilters
38236>>>>>>>        Get pbOldFilterActive to bOldFilterActive
38237>>>>>>>        If (bApplyGlobalSQLFilters and bOldFilterActive) Begin
38239>>>>>>>            Get psOldFilter to sOldFilter
38240>>>>>>>            Get SQLStrAppend sOldFilter sNewFilter to sNewFilter
38241>>>>>>>        End
38241>>>>>>>>
38241>>>>>>>        Send ApplySQLFilterStr sNewFilter
38242>>>>>>>    End_Procedure
38243>>>>>>>    
38243>>>>>>>    Procedure Data_Set_PreFind
38245>>>>>>>        Boolean bUseDDSQLFilters
38245>>>>>>>        String sOldDDFilter
38245>>>>>>>        Get pbUseDDSQLFilters to bUseDDSQLFilters
38246>>>>>>>        If bUseDDSQLFilters Begin
38248>>>>>>>            
38248>>>>>>>            Send StoreDefaultSQLFilters
38249>>>>>>>            
38249>>>>>>>            // this can get called during cascade deletes. In such a case we will
38249>>>>>>>            // never explicitly not apply an SQL filters because it could violate relational integrity
38249>>>>>>>            If (OPERATION_MODE=MODE_DELETING) Begin
38251>>>>>>>                Get psSQLFilter to sOldDDFilter
38252>>>>>>>                Set psSQLFilter to "" // make sure there is no filter applied
38253>>>>>>>            End
38253>>>>>>>>
38253>>>>>>>            
38253>>>>>>>            Send ApplySQLFilter
38254>>>>>>>            
38254>>>>>>>            If (OPERATION_MODE=MODE_DELETING) Begin
38256>>>>>>>                Set psSQLFilter to sOldDDFilter
38257>>>>>>>            End
38257>>>>>>>>
38257>>>>>>>        End
38257>>>>>>>>
38257>>>>>>>    End_Procedure
38258>>>>>>>    
38258>>>>>>>    Procedure Data_Set_PostFind
38260>>>>>>>        Boolean bUseDDSQLFilters
38260>>>>>>>        Get pbUseDDSQLFilters to bUseDDSQLFilters
38261>>>>>>>        If bUseDDSQLFilters Begin
38263>>>>>>>            Send RestoreDefaultSQLFilters
38264>>>>>>>        End
38264>>>>>>>>
38264>>>>>>>    End_Procedure
38265>>>>>>>    
38265>>>>>>>    
38265>>>>>>>    // returns active constraints in atConstraintDef array.
38265>>>>>>>    // Should be called after constraints are built
38265>>>>>>>    // typically right after Rebuild_Constraints
38265>>>>>>>    
38265>>>>>>>    Function DDOConstraints Returns tConstraintDef[]
38267>>>>>>>        tConstraintDef[] Constraints
38267>>>>>>>        tConstraintDef[] Constraints
38268>>>>>>>        Integer i iCount i1
38268>>>>>>>        Get DATA_SET_CONSTRAINT_COUNT to iCount
38269>>>>>>>        For i from 0 to (iCount-1)
38275>>>>>>>>
38275>>>>>>>            Get DATA_SET_CONSTRAINT_INFO i 0 to i1 // type / mode
38276>>>>>>>            Move (Hi(i1)) to  Constraints[i].eType
38277>>>>>>>            Move (Low(i1)) to  Constraints[i].eMode
38278>>>>>>>            Get DATA_SET_CONSTRAINT_INFO i 1 to i1 // file / field
38279>>>>>>>            Move (Hi(i1)) to  Constraints[i].iFile
38280>>>>>>>            Move (Low(i1)) to  Constraints[i].iField
38281>>>>>>>            Get DATA_SET_CONSTRAINT_INFO i 2 to i1 // other file /field
38282>>>>>>>            Move (Hi(i1)) to  Constraints[i].iOtherFile
38283>>>>>>>            Move (Low(i1)) to  Constraints[i].iOtherField
38284>>>>>>>            Get DATA_SET_CONSTRAINT_INFO_Value i  to Constraints[i].sValue
38285>>>>>>>        Loop
38286>>>>>>>>
38286>>>>>>>        Function_Return Constraints
38287>>>>>>>    End_Function
38288>>>>>>>    
38288>>>>>>>    // returns constraint finding information about the current find. This tells us what kinds
38288>>>>>>>    // of constraint find "expressions" are used. This will actually do a cosntrained find
38288>>>>>>>    // initialization much like Establish_Find_Direction, which means it can change the values in
38288>>>>>>>    // the file buffer to assist with a jump-in.
38288>>>>>>>    Function DDOConstraintFindMeta Integer eMode Integer iOrder Returns tDDOConstraintFindMeta
38290>>>>>>>        tDDOConstraintFindMeta FindMeta
38290>>>>>>>        tDDOConstraintFindMeta FindMeta
38290>>>>>>>        Integer i
38290>>>>>>>        Get Data_Set_Constraint_Exps eMode iOrder to i
38291>>>>>>>        Move (Hi(i)) to FindMeta.iJumpInSegments
38292>>>>>>>        Move (i iand CONST_EXP_JUMPOUT) to FindMeta.bJumpOut
38293>>>>>>>        Move (i iand CONST_EXP_PRE_RELATE) to FindMeta.bPreRelate
38294>>>>>>>        Move (i iand CONST_EXP_POST_RELATE) to FindMeta.bPostRelate
38295>>>>>>>        Function_Return FindMeta
38296>>>>>>>    End_Function
38297>>>>>>>    
38297>>>>>>>    // this tells you if the current find or read requires a relate to evaluate the DF constraint.
38297>>>>>>>    // If false you could use this to set no_relate_state to false for the find/read process and then
38297>>>>>>>    // restore it when complete. Be careful using this.
38297>>>>>>>    Function DDOConstraintNeedsRelate Integer iOrder Returns Boolean
38299>>>>>>>        tDDOConstraintFindMeta FindMeta
38299>>>>>>>        tDDOConstraintFindMeta FindMeta
38299>>>>>>>        Get DDOConstraintFindMeta (GE) iOrder to FindMeta
38300>>>>>>>        Function_Return FindMeta.bPostRelate
38301>>>>>>>    End_Function
38302>>>>>>>    
38302>>>>>>>    // returns true if this table supports SQL filter interface
38302>>>>>>>    Function SupportsSQLFilters Returns Boolean
38304>>>>>>>        Boolean bSupports
38304>>>>>>>        Handle hoSQLHelper
38304>>>>>>>        Get phoSQLHelper to hoSQLHelper
38305>>>>>>>        Get SupportsSQLFilters of hoSQLHelper to bSupports
38306>>>>>>>        Function_Return bSupports
38307>>>>>>>    End_Function
38308>>>>>>>    
38308>>>>>>>    // SQL Helper functions that return SQL Filters strings that can be used in a where clause
38308>>>>>>>    
38308>>>>>>>    // Creates an SQL Like Filter for this field and search target
38308>>>>>>>    Function SQLStrLike Integer iField String sSearch Returns String
38310>>>>>>>        String sFilter
38310>>>>>>>        Handle hoSQLHelper
38310>>>>>>>        Get phoSQLHelper to hoSQLHelper
38311>>>>>>>        Get SQLStrLike of hoSQLHelper iField sSearch to sFilter
38312>>>>>>>        Function_Return sFilter
38313>>>>>>>    End_Function
38314>>>>>>>    
38314>>>>>>>    // Appends two Filters with an AND clause. Both or either can be empty
38314>>>>>>>    Function SQLStrAppend String sOrigFilter String sFilter Returns String
38316>>>>>>>        Handle hoSQLHelper
38316>>>>>>>        Get phoSQLHelper to hoSQLHelper
38317>>>>>>>        Get SQLStrAppend of hoSQLHelper sOrigFilter sFilter to sFilter
38318>>>>>>>        Function_Return sFilter
38319>>>>>>>    End_Function
38320>>>>>>>    
38320>>>>>>>    // Appends two Filters with an AND clause. Both or either can be empty
38320>>>>>>>    Function SQLStrAppendOr String sOrigFilter String sFilter Returns String
38322>>>>>>>        Handle hoSQLHelper
38322>>>>>>>        Get phoSQLHelper to hoSQLHelper
38323>>>>>>>        Get SQLStrAppendOr of hoSQLHelper sOrigFilter sFilter to sFilter
38324>>>>>>>        Function_Return sFilter
38325>>>>>>>    End_Function
38326>>>>>>>
38326>>>>>>>    // returns the name of the File and Field suitable for an SQL where statement
38326>>>>>>>    Function SQLStrFileFieldName Integer iField Returns String
38328>>>>>>>        String sName
38328>>>>>>>        Handle hoSQLHelper
38328>>>>>>>        Get phoSQLHelper to hoSQLHelper
38329>>>>>>>        Get SQLStrFileFieldName of hoSQLHelper iField to sName
38330>>>>>>>        Function_Return sName
38331>>>>>>>    End_Function
38332>>>>>>>
38332>>>>>>>    // returns the name of the Field suitable for an SQL where statement
38332>>>>>>>    Function SQLStrFieldName Integer iField Returns String
38334>>>>>>>        String sName
38334>>>>>>>        Handle hoSQLHelper
38334>>>>>>>        Get phoSQLHelper to hoSQLHelper
38335>>>>>>>        Get SQLStrFieldName of hoSQLHelper iField to sName
38336>>>>>>>        Function_Return sName
38337>>>>>>>    End_Function
38338>>>>>>>
38338>>>>>>>    // returns the name of the Schema and File and Field suitable for an SQL where statement
38338>>>>>>>    Function SQLStrSchemaFileFieldName Integer iField Returns String
38340>>>>>>>        String sName
38340>>>>>>>        Handle hoSQLHelper
38340>>>>>>>        Get phoSQLHelper to hoSQLHelper
38341>>>>>>>        Get SQLStrSchemaFileFieldName of hoSQLHelper iField to sName
38342>>>>>>>        Function_Return sName
38343>>>>>>>    End_Function
38344>>>>>>>    
38344>>>>>>>    //  returns the name of a file suitable for a SQL statement
38344>>>>>>>    Function SQLStrFileName Integer iField Returns String
38346>>>>>>>        String sName
38346>>>>>>>        Handle hoSQLHelper
38346>>>>>>>        Get phoSQLHelper to hoSQLHelper
38347>>>>>>>        Get SQLStrFileName of hoSQLHelper iField to sName
38348>>>>>>>        Function_Return sName
38349>>>>>>>    End_Function
38350>>>>>>>    
38350>>>>>>>    // creates escaped SQL string by replacing single quote with two single quotes
38350>>>>>>>    Function SQLEscapedStr String sSQL Returns String
38352>>>>>>>        Handle hoSQLHelper
38352>>>>>>>        Get phoSQLHelper to hoSQLHelper
38353>>>>>>>        Get SQLEscapedStr of hoSQLHelper sSQL to sSQL
38354>>>>>>>        Function_Return sSQL
38355>>>>>>>    End_Function
38356>>>>>>>    
38356>>>>>>>    // Returns:
38356>>>>>>>    //       The record id string based on piPrimaryIndex.
38356>>>>>>>    Function PrimaryRecordId Returns String
38358>>>>>>>        Integer iIndex iFile iSegments iSegment iField
38358>>>>>>>        String sVal sId
38358>>>>>>>        
38358>>>>>>>        Get Main_File to iFile
38359>>>>>>>        Get piPrimaryIndex to iIndex
38360>>>>>>>        
38360>>>>>>>        If (iIndex < 0) Begin
38362>>>>>>>            Get_Attribute DF_FILE_PRIMARY_INDEX of iFile to iIndex
38365>>>>>>>        End
38365>>>>>>>>
38365>>>>>>>        
38365>>>>>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of iFile iIndex to iSegments
38368>>>>>>>        For iSegment from 1 to iSegments
38374>>>>>>>>
38374>>>>>>>            Get_Attribute DF_INDEX_SEGMENT_FIELD of iFile iIndex iSegment to iField
38377>>>>>>>            
38377>>>>>>>            Get_Field_Value iFile iField to sVal
38380>>>>>>>            Move (Trim(sVal)) to sVal
38381>>>>>>>            
38381>>>>>>>            //  Encode join sign for multi segment indexes
38381>>>>>>>            If (iSegments > 1) Begin
38383>>>>>>>                Move (Replaces("_", sVal, "~5F~")) to sVal
38384>>>>>>>            End
38384>>>>>>>>
38384>>>>>>>            
38384>>>>>>>            If (iSegment = 1) Begin
38386>>>>>>>                Move sVal to sId
38387>>>>>>>            End
38387>>>>>>>>
38387>>>>>>>            Else Begin
38388>>>>>>>                Move (sId + "_" + sVal) to sId
38389>>>>>>>            End
38389>>>>>>>>
38389>>>>>>>            
38389>>>>>>>        Loop
38390>>>>>>>>
38390>>>>>>>        
38390>>>>>>>        Function_Return sId
38391>>>>>>>    End_Function
38392>>>>>>>    
38392>>>>>>>    
38392>>>>>>>    // Finds a record on the global buffer based on the record id.
38392>>>>>>>    //
38392>>>>>>>    // Params:
38392>>>>>>>    //       sRecordId   Record id generated by PrimaryRecordId.
38392>>>>>>>    Function FindByPrimaryRecordId String sRecordId Returns Boolean
38394>>>>>>>        Integer iIndex iFile iSegments iSegment iField
38394>>>>>>>        String[] aValues
38395>>>>>>>        String sVal
38395>>>>>>>        Boolean bTrapped
38395>>>>>>>        
38395>>>>>>>        Get Main_File to iFile
38396>>>>>>>        Get piPrimaryIndex to iIndex
38397>>>>>>>        
38397>>>>>>>        If (iIndex < 0) Begin
38399>>>>>>>            Get_Attribute DF_FILE_PRIMARY_INDEX of iFile to iIndex
38402>>>>>>>        End
38402>>>>>>>>
38402>>>>>>>        
38402>>>>>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of iFile iIndex to iSegments
38405>>>>>>>        
38405>>>>>>>        If (iSegments > 1) Begin
38407>>>>>>>            Move (StrSplitToArray(sRecordId, "_")) to aValues
38408>>>>>>>        End
38408>>>>>>>>
38408>>>>>>>        Else Begin
38409>>>>>>>            Move sRecordId to aValues[0]
38410>>>>>>>        End
38410>>>>>>>>
38410>>>>>>>        
38410>>>>>>>        If (iSegments = SizeOfArray(aValues)) Begin
38412>>>>>>>            Clear iFile
38413>>>>>>>            
38413>>>>>>>            Send Ignore_Error of Error_Object_Id 56
38414>>>>>>>            Send Ignore_Error of Error_Object_Id 11
38415>>>>>>>            
38415>>>>>>>            For iSegment from 1 to iSegments
38421>>>>>>>>
38421>>>>>>>                Get_Attribute DF_INDEX_SEGMENT_FIELD of iFile iIndex iSegment to iField
38424>>>>>>>                
38424>>>>>>>                Move aValues[iSegment - 1] to sVal
38425>>>>>>>                If (iSegments > 1) Begin
38427>>>>>>>                    Move (Replaces("~5F~", sVal, "_")) to sVal
38428>>>>>>>                End
38428>>>>>>>>
38428>>>>>>>                
38428>>>>>>>                Set_Field_Value iFile iField to sVal
38431>>>>>>>            Loop
38432>>>>>>>>
38432>>>>>>>            Send Trap_Error of Error_Object_Id 56
38433>>>>>>>            Send Trap_Error of Error_Object_Id 11
38434>>>>>>>            
38434>>>>>>>            Vfind iFile iIndex EQ
38436>>>>>>>            
38436>>>>>>>            Function_Return (Found)
38437>>>>>>>        End
38437>>>>>>>>
38437>>>>>>>        
38437>>>>>>>        Function_Return False
38438>>>>>>>    End_Function
38439>>>>>>>    
38439>>>>>>>    // Converts a RecordId to a RowId by finding it on the global buffer.
38439>>>>>>>    //
38439>>>>>>>    // Params:
38439>>>>>>>    //       sRecordId   Record id based on piPrimaryIndex.
38439>>>>>>>    //       rRowId      (ByRef) Will be filled with the rowid.
38439>>>>>>>    // Returns:
38439>>>>>>>    //       True if the record id was valid.
38439>>>>>>>    Function RecordIdToRowId String sRecordId RowID ByRef rRowId Returns Boolean
38441>>>>>>>        Boolean bFound
38441>>>>>>>        
38441>>>>>>>        Get FindByPrimaryRecordId sRecordId to bFound
38442>>>>>>>        If (bFound) Begin
38444>>>>>>>            Move (GetRowID(Main_File(Self))) to rRowId
38445>>>>>>>        End
38445>>>>>>>>
38445>>>>>>>        Else Begin
38446>>>>>>>            Move (NullRowID()) to rRowId
38447>>>>>>>        End
38447>>>>>>>>
38447>>>>>>>        
38447>>>>>>>        Function_Return bFound
38448>>>>>>>    End_Function
38449>>>>>>>    
38449>>>>>>>    // Converts a RowId into a record ID. Note that it performs a find on the global buffer.
38449>>>>>>>    //
38449>>>>>>>    // Params:
38449>>>>>>>    //       riRowId     RowID.
38449>>>>>>>    // Returns:
38449>>>>>>>    //       Record id based on piPrimaryIndex.
38449>>>>>>>    Function RowIdToRecordId RowID riRowId Returns String
38451>>>>>>>        Boolean bFound
38451>>>>>>>        String sRecId
38451>>>>>>>        
38451>>>>>>>        If (not(IsNullRowID(riRowId))) Begin
38453>>>>>>>            Move (FindByRowID(Main_File(Self), riRowId)) to bFound
38454>>>>>>>            
38454>>>>>>>            If (bFound) Begin
38456>>>>>>>                Get PrimaryRecordId to sRecId
38457>>>>>>>            End
38457>>>>>>>>
38457>>>>>>>        End
38457>>>>>>>>
38457>>>>>>>        
38457>>>>>>>        Function_Return sRecId
38458>>>>>>>    End_Function
38459>>>>>>>End_Class
38460>>>>>>>
38460>>>>>>>// This message will be send as a notification message from an
38460>>>>>>>// Extended_Data_Set whenever a fieldvalue has been changed.
38460>>>>>>>// It has been defined FOR cUIObject or Desktop  here so that attached
38460>>>>>>>// DEO which do not know anything about Extended_Data_Sets don't get
38460>>>>>>>// frustrated.
38460>>>>>>>// All focusable objects and DEOs must understand this. This should be
38460>>>>>>>// changed at some point in the future.
38460>>>>>>>Function Extended_DEO_State for cUIObject Returns Integer
38462>>>>>>>End_Function
38463>>>>>>>
38463>>>>>>>
38463>>>>>>>// this command is now obsolete. use Set Field_auto_increment
38463>>>>>>>
38463>>>>>Use Dfcursor.pkg
38463>>>>>Use DUFStatusPanel.pkg
Including file: DUFStatusPanel.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\DUFStatusPanel.pkg)
38463>>>>>>>// StatPnl.pkg - creates the standard status_panel object.
38463>>>>>>>//
38463>>>>>>>//
38463>>>>>>>// This is the default Status Panel object used by any of the Visual DataFlex classes that
38463>>>>>>>// invoke the standard status panel. The standard has always been that the package name
38463>>>>>>>// is StatPnl.pkg and the name of the object is Status_Panel. As of 12.0, there are major
38463>>>>>>>// changes in the way the status panel operates The Sentinel based external status panel used in
38463>>>>>>>// prior revisions has been replace with status panel that is part of the application.
38463>>>>>>>// This should work much better and faster than the old sentinel based solution.
38463>>>>>>>// While the way this operates has changed, the interface has not and therefore this should work
38463>>>>>>>// with most applications.
38463>>>>>>>//
38463>>>>>>>// As of 12.0, we have added a global handle that contains the object ID of this status panel.
38463>>>>>>>// This variable ghoStatusPanel can be used in place of the object name Status_Panel. This provides
38463>>>>>>>// a cleaner more robust interface.
38463>>>>>>>//
38463>>>>>>>//
38463>>>>>>>// Compatibility Note:
38463>>>>>>>//
38463>>>>>>>// When used in the standard way, this change will require no changes. A developer will only need to
38463>>>>>>>// change their code if they've modified the sentinel program, which was a difficult thing to do.
38463>>>>>>>//
38463>>>>>>>// If for some reason you application will not work using this as a replacement for the old status
38463>>>>>>>// panel, you've probably done something special with the old status-panel. If you don't want to
38463>>>>>>>// figure out how to use the new one and you want to continue using the old one you are going to need
38463>>>>>>>// to add some code to include the old status panel in your application. Add the following to your project (your src).
38463>>>>>>>//
38463>>>>>>>// Use StatPnl.pkg    // Make sure you load the new status panel object first. this is not optional!
38463>>>>>>>// Use OldStatPnl.pkg // load the old status panel. Status_Panel is now this old object
38463>>>>>>>//
38463>>>>>>>// If you do this, you will lose access to the new status-panel via Status_Panel. However, you
38463>>>>>>>// can still access the new object via the ghoStatusPanel handle.
38463>>>>>>>//
38463>>>>>>>//
38463>>>>>>>// Creating your own Status Panel objects
38463>>>>>>>//
38463>>>>>>>// If a developer wishes to create a custom panel, they should use this package as their template.
38463>>>>>>>// This panel can be visually modeled and changed any way you wish. Just save your new custom panel
38463>>>>>>>// with a different file and object name and direct your status panel request to the new object.
38463>>>>>>>//
38463>>>>>>>// If the new panel changes the interface and updates objects that are not currently defined, you
38463>>>>>>>// want to make sure you send the message ProcessEvents after you've updated the object. This allows
38463>>>>>>>// the object to paint when inside of a tight loop. For example, if you wanted to add a progress
38463>>>>>>>// bar (cProgressBar) you would want to Send ProcessEvents after you update the progress bar.
38463>>>>>>>// e.g.
38463>>>>>>>//       Procedure UpdateStatusBar
38463>>>>>>>//           Send DoAdvance of oProgressBar
38463>>>>>>>//           Send ProcessEvents
38463>>>>>>>//       End_Procedure
38463>>>>>>>//
38463>>>>>>>// of course, if you use the standard interfaces in status bar and your forward send these
38463>>>>>>>// messages this will be done for you.
38463>>>>>>>//
38463>>>>>>>// the standard Interface for status panels are:
38463>>>>>>>//
38463>>>>>>>// Send Initialize_StatusPanel - initializes values for caption, title & message
38463>>>>>>>// Send Start_StatusPanel      - start the status panel
38463>>>>>>>// Send Stop_StatusPanel       - stop the status panel
38463>>>>>>>// Send Update_StatusPanel     - update the status panel's action area
38463>>>>>>>// Get  Check_StatusPanel      - check for cancel (if cancel or pbCancel is set, close the panel)
38463>>>>>>>//
38463>>>>>>>// Get/Set Caption_Text - updates the caption bar
38463>>>>>>>// Get/Set Title_Text   - updates the title area
38463>>>>>>>// Get/Set Message_Text - updates the Message area
38463>>>>>>>// Get/Set Action_Text  - updates the action area
38463>>>>>>>// Get/Set Button_Text  - updates the button area
38463>>>>>>>//
38463>>>>>>>// Get/Set Allow_cancel_state - determines if panel can be canceled
38463>>>>>>>// Send EnableCancelButton - code you should provide to enable/disable cancel button
38463>>>>>>>//
38463>>>>>>>// ghoStatusPanel - global handle that points to the standard status panel.
38463>>>>>>>Use cProcessStatusPanel.pkg
38463>>>>>>>Use cCJSkinFramework.pkg
Including file: cCJSkinFramework.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJSkinFramework.pkg)
38463>>>>>>>>>Use windows.pkg
38463>>>>>>>>>Use cCJComSkinFramework.pkg
Including file: cCJComSkinFramework.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCJComSkinFramework.pkg)
38463>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v22.0.0\Bin\Codejock.SkinFramework.Unicode.x64.v22.0.0.ocx
38463>>>>>>>>>>>Use FlexCom20.pkg
38463>>>>>>>>>>>
38463>>>>>>>>>>>// Changes to Imported package
38463>>>>>>>>>>>//     OLEXTPxx to XTPxx
38463>>>>>>>>>>>//     OLExtpxx to xtpxx
38463>>>>>>>>>>>//     OLESkinFramework to SkinFramework
38463>>>>>>>>>>>//     OLESTDxxx and OLEXPxxxx to STD/XP
38463>>>>>>>>>>>//     cCom classes to cCJ
38463>>>>>>>>>>>//     cCJAutomationObject back to cComAutomationObject
38463>>>>>>>>>>>//     cCJActiveXControl back to cComActiveXControl
38463>>>>>>>>>>>//     cCJSkinFramework to cCJComSkinFramework
38463>>>>>>>>>>>//     Use statements as noted below (classes moved to these files)
38463>>>>>>>>>>>//     Set classlibrary of all cComAutomation objects to Windows (for class doc)
38463>>>>>>>>>>>
38463>>>>>>>>>>>// These have been extracted from this class and moved into seperate packages
38463>>>>>>>>>>>// because other Codejock classes use these.
38463>>>>>>>>>>>Use cCJColorManager.pkg     // cCJColorManager
38463>>>>>>>>>>>
38463>>>>>>>>>>>
38463>>>>>>>>>>>Define SkinFrameworkApplyOptions for Integer
38463>>>>>>>>>>>    Define xtpSkinApplyMetrics for 1
38463>>>>>>>>>>>    Define xtpSkinApplyFrame for 2
38463>>>>>>>>>>>    Define xtpSkinApplyColors for 4
38463>>>>>>>>>>>    Define xtpSkinApplyMenus for 8
38463>>>>>>>>>>>
38463>>>>>>>>>>>// CLSID: {C0DE2200-28D7-4F2C-87A7-7266367B4655}
38463>>>>>>>>>>>// Dispatch interface for SkinFramework Control
38463>>>>>>>>>>>Class cCJ_DSkinFramework is a Mixin
38464>>>>>>>>>>>
38464>>>>>>>>>>>    Function ComApplyOptions Returns SkinFrameworkApplyOptions
38466>>>>>>>>>>>        SkinFrameworkApplyOptions retVal
38466>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
38467>>>>>>>>>>>        Function_Return retVal
38468>>>>>>>>>>>    End_Function
38469>>>>>>>>>>>
38469>>>>>>>>>>>    Procedure Set ComApplyOptions SkinFrameworkApplyOptions value
38471>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
38472>>>>>>>>>>>    End_Procedure
38473>>>>>>>>>>>
38473>>>>>>>>>>>    Function ComAutoApplyNewWindows Returns Boolean
38475>>>>>>>>>>>        Boolean retVal
38475>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
38476>>>>>>>>>>>        Function_Return retVal
38477>>>>>>>>>>>    End_Function
38478>>>>>>>>>>>
38478>>>>>>>>>>>    Procedure Set ComAutoApplyNewWindows Boolean value
38480>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
38481>>>>>>>>>>>    End_Procedure
38482>>>>>>>>>>>
38482>>>>>>>>>>>    Function ComAutoApplyNewThreads Returns Boolean
38484>>>>>>>>>>>        Boolean retVal
38484>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
38485>>>>>>>>>>>        Function_Return retVal
38486>>>>>>>>>>>    End_Function
38487>>>>>>>>>>>
38487>>>>>>>>>>>    Procedure Set ComAutoApplyNewThreads Boolean value
38489>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
38490>>>>>>>>>>>    End_Procedure
38491>>>>>>>>>>>
38491>>>>>>>>>>>    Function ComLoadSkin String llResourcePath String llIniFileName Returns Boolean
38493>>>>>>>>>>>        Handle hDispatchDriver
38493>>>>>>>>>>>        Boolean retVal
38493>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38494>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38495>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llResourcePath
38496>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llIniFileName
38497>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
38498>>>>>>>>>>>        Function_Return retVal
38499>>>>>>>>>>>    End_Function
38500>>>>>>>>>>>
38500>>>>>>>>>>>    Procedure ComApplyWindow OLE_HANDLE llhWnd
38502>>>>>>>>>>>        Handle hDispatchDriver
38502>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38503>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38504>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
38505>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
38506>>>>>>>>>>>    End_Procedure
38507>>>>>>>>>>>
38507>>>>>>>>>>>    Procedure ComEnableThemeDialogTexture OLE_HANDLE llhWnd Integer llFlags
38509>>>>>>>>>>>        Handle hDispatchDriver
38509>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38510>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38511>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
38512>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llFlags
38513>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
38514>>>>>>>>>>>    End_Procedure
38515>>>>>>>>>>>
38515>>>>>>>>>>>    Procedure ComRemoveWindow OLE_HANDLE llhWnd
38517>>>>>>>>>>>        Handle hDispatchDriver
38517>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38518>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38519>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
38520>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
38521>>>>>>>>>>>    End_Procedure
38522>>>>>>>>>>>
38522>>>>>>>>>>>    Procedure ComRemoveAllWindows
38524>>>>>>>>>>>        Handle hDispatchDriver
38524>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38525>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
38526>>>>>>>>>>>    End_Procedure
38527>>>>>>>>>>>
38527>>>>>>>>>>>    Procedure ComAddWindowClass String llClassName String llBaseClassName
38529>>>>>>>>>>>        Handle hDispatchDriver
38529>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38530>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38531>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
38532>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llBaseClassName
38533>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
38534>>>>>>>>>>>    End_Procedure
38535>>>>>>>>>>>
38535>>>>>>>>>>>    Procedure ComRemoveWindowClass String llClassName
38537>>>>>>>>>>>        Handle hDispatchDriver
38537>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38538>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38539>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
38540>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
38541>>>>>>>>>>>    End_Procedure
38542>>>>>>>>>>>
38542>>>>>>>>>>>    Function ComEnumerateSkinDirectory String llPath Boolean llRecursive Returns Variant
38544>>>>>>>>>>>        Handle hDispatchDriver
38544>>>>>>>>>>>        Variant retVal
38544>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38545>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38546>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
38547>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRecursive
38548>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
38549>>>>>>>>>>>        Function_Return retVal
38550>>>>>>>>>>>    End_Function
38551>>>>>>>>>>>
38551>>>>>>>>>>>    Function ComEnumerateSkinFile String llPath Returns Variant
38553>>>>>>>>>>>        Handle hDispatchDriver
38553>>>>>>>>>>>        Variant retVal
38553>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38554>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38555>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
38556>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
38557>>>>>>>>>>>        Function_Return retVal
38558>>>>>>>>>>>    End_Function
38559>>>>>>>>>>>
38559>>>>>>>>>>>    Function ComGetColor XTPColorManagerColor llIndex Returns OLE_COLOR
38561>>>>>>>>>>>        Handle hDispatchDriver
38561>>>>>>>>>>>        OLE_COLOR retVal
38561>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38562>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38563>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
38564>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_I4 to retVal
38565>>>>>>>>>>>        Function_Return retVal
38566>>>>>>>>>>>    End_Function
38567>>>>>>>>>>>
38567>>>>>>>>>>>    Procedure ComExcludeModule String llModuleName
38569>>>>>>>>>>>        Handle hDispatchDriver
38569>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38570>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38571>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llModuleName
38572>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
38573>>>>>>>>>>>    End_Procedure
38574>>>>>>>>>>>
38574>>>>>>>>>>>    Function ComCreateSchema String llResourcePath String llIniFileName Returns Variant
38576>>>>>>>>>>>        Handle hDispatchDriver
38576>>>>>>>>>>>        Variant retVal
38576>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38577>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38578>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llResourcePath
38579>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llIniFileName
38580>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
38581>>>>>>>>>>>        Function_Return retVal
38582>>>>>>>>>>>    End_Function
38583>>>>>>>>>>>
38583>>>>>>>>>>>    Procedure ComSetWindowTheme OLE_HANDLE llhWnd Variant llSchema
38585>>>>>>>>>>>        Handle hDispatchDriver
38585>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38586>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38587>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
38588>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llSchema
38589>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
38590>>>>>>>>>>>    End_Procedure
38591>>>>>>>>>>>
38591>>>>>>>>>>>    Procedure ComAboutBox
38593>>>>>>>>>>>        Handle hDispatchDriver
38593>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38594>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
38595>>>>>>>>>>>    End_Procedure
38596>>>>>>>>>>>End_Class
38597>>>>>>>>>>>
38597>>>>>>>>>>>// CLSID: {C0DE2200-4463-4030-B324-AC6A8075FEC8}
38597>>>>>>>>>>>// Event interface for SkinFramework Control
38597>>>>>>>>>>>Class cCJ_DSkinFrameworkEvents is a Mixin
38598>>>>>>>>>>>
38598>>>>>>>>>>>    Procedure RegisterComEvents
38600>>>>>>>>>>>    End_Procedure
38601>>>>>>>>>>>End_Class
38602>>>>>>>>>>>
38602>>>>>>>>>>>// CoClass
38602>>>>>>>>>>>// ProgID: Codejock.SkinFramework.22.0.0
38602>>>>>>>>>>>// CLSID: {C0DE2200-2217-42EE-B1B0-82C890431F17}
38602>>>>>>>>>>>// SkinFramework Control
38602>>>>>>>>>>>Class cCJComSkinFramework is a cComActiveXControl
38603>>>>>>>>>>>    Import_Class_Protocol cCJ_DSkinFramework
38604>>>>>>>>>>>    Import_Class_Protocol cCJ_DSkinFrameworkEvents
38605>>>>>>>>>>>
38605>>>>>>>>>>>    Procedure Construct_Object
38607>>>>>>>>>>>        Forward Send Construct_Object
38609>>>>>>>>>>>        Set psProgID to "{C0DE2200-2217-42EE-B1B0-82C890431F17}"
38610>>>>>>>>>>>        Set psEventId to "{C0DE2200-4463-4030-B324-AC6A8075FEC8}"
38611>>>>>>>>>>>        Set psLicenseKey to ("Skin Framework Control Copyright (c) 1998-2022 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.SkinFramework.ActiveX.v22.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: GGE-OLD-QQR-EJS")
38612>>>>>>>>>>>        Set peAutoCreate to acAutoCreate
38613>>>>>>>>>>>    End_Procedure
38614>>>>>>>>>>>End_Class
38615>>>>>>>>>>>
38615>>>>>>>>>>>// CLSID: {C0DE2200-CA9A-4AA9-8601-0AB7F551AA3D}
38615>>>>>>>>>>>// SkinFramework Global Settings
38615>>>>>>>>>>>Class cCJISkinFrameworkGlobalSettings is a Mixin
38616>>>>>>>>>>>
38616>>>>>>>>>>>    Function ComLicense Returns String
38618>>>>>>>>>>>        String retVal
38618>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to retVal
38619>>>>>>>>>>>        Function_Return retVal
38620>>>>>>>>>>>    End_Function
38621>>>>>>>>>>>
38621>>>>>>>>>>>    Procedure Set ComLicense String value
38623>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to value
38624>>>>>>>>>>>    End_Procedure
38625>>>>>>>>>>>
38625>>>>>>>>>>>    Function ComTitle Returns String
38627>>>>>>>>>>>        String retVal
38627>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to retVal
38628>>>>>>>>>>>        Function_Return retVal
38629>>>>>>>>>>>    End_Function
38630>>>>>>>>>>>
38630>>>>>>>>>>>    Procedure Set ComTitle String value
38632>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to value
38633>>>>>>>>>>>    End_Procedure
38634>>>>>>>>>>>
38634>>>>>>>>>>>    // Set this value to True to force using legacy SkinFramework core that has been in use up to version 19
38634>>>>>>>>>>>    Function ComUseLegacyCore Returns Boolean
38636>>>>>>>>>>>        Boolean retVal
38636>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 110 OLE_VT_BOOL to retVal
38637>>>>>>>>>>>        Function_Return retVal
38638>>>>>>>>>>>    End_Function
38639>>>>>>>>>>>
38639>>>>>>>>>>>    // Set this value to True to force using legacy SkinFramework core that has been in use up to version 19
38639>>>>>>>>>>>    Procedure Set ComUseLegacyCore Boolean value
38641>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 110 OLE_VT_BOOL to value
38642>>>>>>>>>>>    End_Procedure
38643>>>>>>>>>>>
38643>>>>>>>>>>>    Function ComVersion Returns String
38645>>>>>>>>>>>        Handle hDispatchDriver
38645>>>>>>>>>>>        String retVal
38645>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38646>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_BSTR to retVal
38647>>>>>>>>>>>        Function_Return retVal
38648>>>>>>>>>>>    End_Function
38649>>>>>>>>>>>
38649>>>>>>>>>>>    Function ComUnicode Returns Boolean
38651>>>>>>>>>>>        Handle hDispatchDriver
38651>>>>>>>>>>>        Boolean retVal
38651>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38652>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_BOOL to retVal
38653>>>>>>>>>>>        Function_Return retVal
38654>>>>>>>>>>>    End_Function
38655>>>>>>>>>>>
38655>>>>>>>>>>>    Function ComOcxPath Returns String
38657>>>>>>>>>>>        Handle hDispatchDriver
38657>>>>>>>>>>>        String retVal
38657>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38658>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_BSTR to retVal
38659>>>>>>>>>>>        Function_Return retVal
38660>>>>>>>>>>>    End_Function
38661>>>>>>>>>>>End_Class
38662>>>>>>>>>>>
38662>>>>>>>>>>>// CoClass
38662>>>>>>>>>>>// ProgID: Codejock.SkinFrameworkGlobalSettings.22.0.0
38662>>>>>>>>>>>// CLSID: {C0DE2200-F744-4373-B38D-29CE83EF0EE5}
38662>>>>>>>>>>>// SkinFramework Global Settings
38662>>>>>>>>>>>Class cCJComSkinFrameworkGlobalSettings is a cComAutomationObject
38663>>>>>>>>>>>    Import_Class_Protocol cCJISkinFrameworkGlobalSettings
38664>>>>>>>>>>>
38664>>>>>>>>>>>    Procedure Construct_Object
38666>>>>>>>>>>>        Forward Send Construct_Object
38668>>>>>>>>>>>        Set psProgID to "{C0DE2200-F744-4373-B38D-29CE83EF0EE5}"
38669>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
38670>>>>>>>>>>>    End_Procedure
38671>>>>>>>>>>>End_Class
38672>>>>>>>>>>>
38672>>>>>>>>>>>// CLSID: {C0DE2200-1038-498E-A936-361F08B4C4AA}
38672>>>>>>>>>>>Class cCJSkinIniFile is a cComAutomationObject
38673>>>>>>>>>>>
38673>>>>>>>>>>>    Function ComColorScheme Returns String
38675>>>>>>>>>>>        String retVal
38675>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
38676>>>>>>>>>>>        Function_Return retVal
38677>>>>>>>>>>>    End_Function
38678>>>>>>>>>>>
38678>>>>>>>>>>>    Procedure Set ComColorScheme String value
38680>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
38681>>>>>>>>>>>    End_Procedure
38682>>>>>>>>>>>
38682>>>>>>>>>>>    Function ComFontSize Returns String
38684>>>>>>>>>>>        String retVal
38684>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
38685>>>>>>>>>>>        Function_Return retVal
38686>>>>>>>>>>>    End_Function
38687>>>>>>>>>>>
38687>>>>>>>>>>>    Procedure Set ComFontSize String value
38689>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
38690>>>>>>>>>>>    End_Procedure
38691>>>>>>>>>>>
38691>>>>>>>>>>>    Function ComIniFileName Returns String
38693>>>>>>>>>>>        String retVal
38693>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
38694>>>>>>>>>>>        Function_Return retVal
38695>>>>>>>>>>>    End_Function
38696>>>>>>>>>>>
38696>>>>>>>>>>>    Procedure Set ComIniFileName String value
38698>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
38699>>>>>>>>>>>    End_Procedure
38700>>>>>>>>>>>End_Class
38701>>>>>>>>>>>
38701>>>>>>>>>>>// CLSID: {C0DE2200-4834-499E-95B4-30E0C3F43A10}
38701>>>>>>>>>>>Class cCJSkinDescription is a cComAutomationObject
38702>>>>>>>>>>>
38702>>>>>>>>>>>    Function ComName Returns String
38704>>>>>>>>>>>        String retVal
38704>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
38705>>>>>>>>>>>        Function_Return retVal
38706>>>>>>>>>>>    End_Function
38707>>>>>>>>>>>
38707>>>>>>>>>>>    Procedure Set ComName String value
38709>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
38710>>>>>>>>>>>    End_Procedure
38711>>>>>>>>>>>
38711>>>>>>>>>>>    Function ComPath Returns String
38713>>>>>>>>>>>        String retVal
38713>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
38714>>>>>>>>>>>        Function_Return retVal
38715>>>>>>>>>>>    End_Function
38716>>>>>>>>>>>
38716>>>>>>>>>>>    Procedure Set ComPath String value
38718>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
38719>>>>>>>>>>>    End_Procedure
38720>>>>>>>>>>>
38720>>>>>>>>>>>    Function ComCount Returns Integer
38722>>>>>>>>>>>        Handle hDispatchDriver
38722>>>>>>>>>>>        Integer retVal
38722>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38723>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
38724>>>>>>>>>>>        Function_Return retVal
38725>>>>>>>>>>>    End_Function
38726>>>>>>>>>>>
38726>>>>>>>>>>>    Function ComIniFile Integer llIndex Returns Variant
38728>>>>>>>>>>>        Handle hDispatchDriver
38728>>>>>>>>>>>        Variant retVal
38728>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38729>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38730>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
38731>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
38732>>>>>>>>>>>        Function_Return retVal
38733>>>>>>>>>>>    End_Function
38734>>>>>>>>>>>
38734>>>>>>>>>>>    Function Com_NewEnum Returns Variant
38736>>>>>>>>>>>        Handle hDispatchDriver
38736>>>>>>>>>>>        Variant retVal
38736>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38737>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
38738>>>>>>>>>>>        Function_Return retVal
38739>>>>>>>>>>>    End_Function
38740>>>>>>>>>>>End_Class
38741>>>>>>>>>>>
38741>>>>>>>>>>>// CLSID: {C0DE2200-FB37-4B08-A2B9-F6F8B253D697}
38741>>>>>>>>>>>Class cCJSkinDescriptions is a cComAutomationObject
38742>>>>>>>>>>>
38742>>>>>>>>>>>    Function ComCount Returns Integer
38744>>>>>>>>>>>        Handle hDispatchDriver
38744>>>>>>>>>>>        Integer retVal
38744>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38745>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
38746>>>>>>>>>>>        Function_Return retVal
38747>>>>>>>>>>>    End_Function
38748>>>>>>>>>>>
38748>>>>>>>>>>>    Function ComSkin Integer llIndex Returns Variant
38750>>>>>>>>>>>        Handle hDispatchDriver
38750>>>>>>>>>>>        Variant retVal
38750>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38751>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38752>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
38753>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
38754>>>>>>>>>>>        Function_Return retVal
38755>>>>>>>>>>>    End_Function
38756>>>>>>>>>>>
38756>>>>>>>>>>>    Function Com_NewEnum Returns Variant
38758>>>>>>>>>>>        Handle hDispatchDriver
38758>>>>>>>>>>>        Variant retVal
38758>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38759>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
38760>>>>>>>>>>>        Function_Return retVal
38761>>>>>>>>>>>    End_Function
38762>>>>>>>>>>>End_Class
38763>>>>>>>>>>>
38763>>>>>>>>>>>// CLSID: {C0DE2200-C56F-43C0-BCF1-8193B35FE4C4}
38763>>>>>>>>>>>Class cCJSkinSchema is a cComAutomationObject
38764>>>>>>>>>>>
38764>>>>>>>>>>>    Function ComGetColor XTPColorManagerColor llIndex Returns OLE_COLOR
38766>>>>>>>>>>>        Handle hDispatchDriver
38766>>>>>>>>>>>        OLE_COLOR retVal
38766>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38767>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38768>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
38769>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
38770>>>>>>>>>>>        Function_Return retVal
38771>>>>>>>>>>>    End_Function
38772>>>>>>>>>>>End_Class
38773>>>>>>>>>Use cApplication.pkg
38773>>>>>>>>>
38773>>>>>>>>>Struct tSkinInformation
38773>>>>>>>>>    String sName     // description of the skin
38773>>>>>>>>>    String sSkinfile // file path. Can be relative or full
38773>>>>>>>>>    String sSkinIni  // section name
38773>>>>>>>>>End_Struct
38773>>>>>>>>>
38773>>>>>>>>>
38773>>>>>>>>>Class cCJSkinFramework is a cCJComSkinFramework
38774>>>>>>>>>    
38774>>>>>>>>>    Procedure Construct_Object
38776>>>>>>>>>        Forward Send Construct_Object
38778>>>>>>>>>        
38778>>>>>>>>>        Property String psSkinFile ""
38779>>>>>>>>>        Property String psSkinIni ""
38780>>>>>>>>>        Property Boolean pbLoadPreference False
38781>>>>>>>>>        
38781>>>>>>>>>        Set peAutoCreate to acAutoCreate
38782>>>>>>>>>        
38782>>>>>>>>>        Move Self to ghoSkinFramework
38783>>>>>>>>>    End_Procedure
38784>>>>>>>>>    
38784>>>>>>>>>    // return the default skin path, which is the programs directory.
38784>>>>>>>>>    // This requires an application object.
38784>>>>>>>>>    // If you want to different skin path, override this.
38784>>>>>>>>>    Function SkinPath Returns String
38786>>>>>>>>>        String sPath sPaths
38786>>>>>>>>>        Handle hoWorkspace
38786>>>>>>>>>        If ghoApplication Begin
38788>>>>>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
38789>>>>>>>>>            Get psProgramPath of hoWorkspace to sPaths
38790>>>>>>>>>            Get PathAtIndex of hoWorkspace sPaths 1 to sPath
38791>>>>>>>>>        End
38791>>>>>>>>>>
38791>>>>>>>>>        Else Begin
38792>>>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
38793>>>>>>>>>>
38793>>>>>>>>>        End
38793>>>>>>>>>>
38793>>>>>>>>>        Function_Return sPath
38794>>>>>>>>>    End_Function
38795>>>>>>>>>    
38795>>>>>>>>>    // Returns the Qualified name of psSkinFile. If the file is already qualified it just
38795>>>>>>>>>    // returns itself. If it is not, it uses SkinPath to get the path.
38795>>>>>>>>>    Function SkinQFile Returns String
38797>>>>>>>>>        String sFile sPath sSep
38797>>>>>>>>>        Boolean bQualified
38797>>>>>>>>>        Get psSkinFile to sFile
38798>>>>>>>>>        If not (IsFileNameQualified(sFile)) Begin
38800>>>>>>>>>            Get SkinPath to sPath
38801>>>>>>>>>            Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sSep
38802>>>>>>>>>            Move (sPath - sSep - sFile) to sFile
38803>>>>>>>>>        End
38803>>>>>>>>>>
38803>>>>>>>>>        Function_Return sFile
38804>>>>>>>>>    End_Function
38805>>>>>>>>>    
38805>>>>>>>>>    // defines the default VDF window class mapping.
38805>>>>>>>>>    Procedure OnAddVDFWindowClasses
38807>>>>>>>>>        Send ComAddWindowClass "DFlistbox"               "ListBox"
38808>>>>>>>>>        Send ComAddWindowClass "DFentry"                 "Edit"
38809>>>>>>>>>        Send ComAddWindowClass "DFtextbox"               "Edit"
38810>>>>>>>>>        Send ComAddWindowClass "DFRichEditCtrl"          "Edit"
38811>>>>>>>>>        Send ComAddWindowClass "DFcombobox"              "ComboBox"
38812>>>>>>>>>        Send ComAddWindowClass "DFformlist"              "Edit"
38813>>>>>>>>>        Send ComAddWindowClass "DFFormListHeader"        "SysHeader32"
38814>>>>>>>>>        Send ComAddWindowClass "DFbutton"                "Button"
38815>>>>>>>>>        Send ComAddWindowClass "HPromptBtn"              "Button"
38816>>>>>>>>>        Send ComAddWindowClass "Hspinbtn"                "msctls_updown32"
38817>>>>>>>>>        Send ComAddWindowClass "DFSysTabControl32"       "SysTabControl32"
38818>>>>>>>>>        Send ComAddWindowClass "DFMDIClient"             "MDIClient"
38819>>>>>>>>>        Send ComAddWindowClass "DFedit"                  "edit"
38820>>>>>>>>>        Send ComAddWindowClass "DFlistedit"              "edit"
38821>>>>>>>>>        Send ComAddWindowClass "DFscrollbar"             "scrollbar"
38822>>>>>>>>>        Send ComAddWindowClass "DFgroup"                 "Button"
38823>>>>>>>>>        Send ComAddWindowClass "DFComboGrid"             "ComboBox"
38824>>>>>>>>>        // External class
38824>>>>>>>>>        Send ComAddWindowClass "cVdfAnimation"           "SysAnimate32"
38825>>>>>>>>>        Send ComAddWindowClass "cVdfProgressBar"         "msctls_progress32"
38826>>>>>>>>>        Send ComAddWindowClass "cVdfStatusBar"           "msctls_statusbar32"
38827>>>>>>>>>        Send ComAddWindowClass "cVdfToolbar"             "ToolbarWindow32"
38828>>>>>>>>>        Send ComAddWindowClass "cObsoleteVdfProgressBar" "msctls_progress32"
38829>>>>>>>>>        Send ComAddWindowClass "cVdfTrackBar"            "msctls_trackbar32"
38830>>>>>>>>>        Send ComAddWindowClass "cObsoleteBasicStatusBar" "msctls_statusbar32"
38831>>>>>>>>>        Send ComAddWindowClass "cVdfTreeView"            "SysTreeView32"
38832>>>>>>>>>    End_Procedure
38833>>>>>>>>>    
38833>>>>>>>>>    // Used to support developer designed class mappings (e.g. COM controls)
38833>>>>>>>>>    Procedure OnAddCustomWindowClasses
38835>>>>>>>>>    End_Procedure
38836>>>>>>>>>    
38836>>>>>>>>>    // called when object is created during end_construct_object.
38836>>>>>>>>>    Procedure OnCreate
38838>>>>>>>>>        Integer iOpts
38838>>>>>>>>>        Boolean bUseWindowsFont
38838>>>>>>>>>        Forward Send OnCreate
38840>>>>>>>>>        
38840>>>>>>>>>        // if we are using the windows fonts we will disable the apply metrics which
38840>>>>>>>>>        // never really looked good anyway. This test only exists or legacy purposes
38840>>>>>>>>>        Get pbUseWindowsFont of Desktop to bUseWindowsFont
38841>>>>>>>>>        If bUseWindowsFont Begin
38843>>>>>>>>>            Get ComApplyOptions to iOpts
38844>>>>>>>>>            Set ComApplyOptions to (RemoveBitValue(xtpSkinApplyMetrics, iOpts))
38845>>>>>>>>>        End
38845>>>>>>>>>>
38845>>>>>>>>>        
38845>>>>>>>>>        // this works around a CJ issue where skins applied to other threads causes an exception upon close down.
38845>>>>>>>>>        // We saw this with our mssql driver but it could occur elsewhere. This has been reported in the CJ newsgroup
38845>>>>>>>>>        // and this was the suggested workaround.
38845>>>>>>>>>        Set ComAutoApplyNewThreads to False
38846>>>>>>>>>        
38846>>>>>>>>>        Send OnAddVDFWindowClasses
38847>>>>>>>>>        Send OnAddCustomWindowClasses
38848>>>>>>>>>        
38848>>>>>>>>>        // if preferences are used, it will set psSkinFile and psSkinIni
38848>>>>>>>>>        If (pbLoadPreference(Self)) Begin
38850>>>>>>>>>            Send LoadSkinPreference
38851>>>>>>>>>        End
38851>>>>>>>>>>
38851>>>>>>>>>        // if a skin file name exists, we apply the skin.
38851>>>>>>>>>        If (psSkinFile(Self)<>"") Begin
38853>>>>>>>>>            Send ApplySkin
38854>>>>>>>>>        End
38854>>>>>>>>>>
38854>>>>>>>>>    End_Procedure
38855>>>>>>>>>    
38855>>>>>>>>>    // called by framework as part of application exit.
38855>>>>>>>>>    Procedure Broadcast_Notify_Exit_Application
38857>>>>>>>>>        Send Notify_Exit_Application
38858>>>>>>>>>    End_Procedure
38859>>>>>>>>>    
38859>>>>>>>>>    Procedure Notify_Exit_Application
38861>>>>>>>>>        If (pbLoadPreference(Self)) Begin
38863>>>>>>>>>            Send SaveSkinPreference
38864>>>>>>>>>        End
38864>>>>>>>>>>
38864>>>>>>>>>    End_Procedure
38865>>>>>>>>>    
38865>>>>>>>>>    Procedure NotifyPreApplySkin
38867>>>>>>>>>        Broadcast Send OnPreApplySkin of Desktop True
38869>>>>>>>>>    End_Procedure
38870>>>>>>>>>    
38870>>>>>>>>>    Procedure NotifyPostApplySkin
38872>>>>>>>>>        Broadcast Send OnPostApplySkin of Desktop True
38874>>>>>>>>>    End_Procedure
38875>>>>>>>>>    
38875>>>>>>>>>    // returns an array of all skins in the path. If path is "", use the default path.
38875>>>>>>>>>    // If the default path is used, returns the file names as relative names, else use full path.
38875>>>>>>>>>    Function EnumerateSkins String sPath Boolean bRecursive Returns tSkinInformation[]
38877>>>>>>>>>        tSkinInformation[] Skins
38877>>>>>>>>>        tSkinInformation[] Skins
38878>>>>>>>>>        String sSkinName sSkinFile sDefaultPath sSep
38878>>>>>>>>>        Variant vSkinDescriptions vSkinDescription vSkinIniFile
38878>>>>>>>>>        Handle hSkinDescriptions hSkinDescription hSkinIniFile
38878>>>>>>>>>        Integer iSkinsCount iSkinFilesCount iNumSkins iNumSkinFiles iArrayItem
38878>>>>>>>>>        Integer iPos iDfltLen
38878>>>>>>>>>        Boolean bUseRelativePath
38878>>>>>>>>>        
38878>>>>>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sSep
38879>>>>>>>>>        
38879>>>>>>>>>        Get SkinPath to sDefaultPath
38880>>>>>>>>>        If (sPath="") Begin
38882>>>>>>>>>            Move sDefaultPath to sPath
38883>>>>>>>>>        End
38883>>>>>>>>>>
38883>>>>>>>>>        Move (Uppercase(sDefaultPath)) to sDefaultPath
38884>>>>>>>>>        Move (Length(sDefaultPath)) to iDfltLen
38885>>>>>>>>>        Move (sDefaultPath=Uppercase(sPath)) to bUseRelativePath
38886>>>>>>>>>        
38886>>>>>>>>>        Get ComEnumerateSkinDirectory sPath bRecursive to vSkinDescriptions
38887>>>>>>>>>        If (not(IsNullComObject(vSkinDescriptions))) Begin
38889>>>>>>>>>            
38889>>>>>>>>>            Get Create U_cCJSkinDescriptions to hSkinDescriptions
38890>>>>>>>>>            Get Create U_cCJSkinDescription to hSkinDescription
38891>>>>>>>>>            Get Create U_cCJSkinIniFile to hSkinIniFile
38892>>>>>>>>>            
38892>>>>>>>>>            Set pvComObject of hSkinDescriptions to vSkinDescriptions
38893>>>>>>>>>            Get ComCount of hSkinDescriptions to iNumSkinFiles
38894>>>>>>>>>            
38894>>>>>>>>>            For iSkinFilesCount from 0 to (iNumSkinFiles-1)
38900>>>>>>>>>>
38900>>>>>>>>>                Get ComSkin of hSkinDescriptions iSkinFilesCount to vSkinDescription
38901>>>>>>>>>                Set pvComObject of hSkinDescription to vSkinDescription
38902>>>>>>>>>                
38902>>>>>>>>>                Get ComCount of hSkinDescription to iNumSkins
38903>>>>>>>>>                
38903>>>>>>>>>                For iSkinsCount from 0 to (iNumSkins-1)
38909>>>>>>>>>>
38909>>>>>>>>>                    Get ComIniFile of hSkinDescription iSkinsCount to vSkinIniFile
38910>>>>>>>>>                    Set pvComObject of hSkinIniFile to vSkinIniFile
38911>>>>>>>>>                    
38911>>>>>>>>>                    Get ComName of hSkinDescription to Skins[iArrayItem].sName
38912>>>>>>>>>                    Get ComPath of hSkinDescription to sSkinFile
38913>>>>>>>>>                    If bUseRelativePath Begin
38915>>>>>>>>>                        Move (pos(sDefaultPath,uppercase(sSkinFile))) to iPos
38916>>>>>>>>>                        If iPos Begin
38918>>>>>>>>>                            Move (Remove(sSkinFile,iPos,iDfltLen)) to sSkinFile
38919>>>>>>>>>                            While (Left(sSkinFile,1)=sSep)
38923>>>>>>>>>                                Move (Remove(sSkinFile,1,1)) to sSkinFile
38924>>>>>>>>>                            Loop
38925>>>>>>>>>>
38925>>>>>>>>>                        End
38925>>>>>>>>>>
38925>>>>>>>>>                    End
38925>>>>>>>>>>
38925>>>>>>>>>                    Move sSkinFile to Skins[iArrayItem].sSkinfile
38926>>>>>>>>>                    Get ComIniFileName of hSkinIniFile to Skins[iArrayItem].sSkinIni
38927>>>>>>>>>                    
38927>>>>>>>>>                    Increment iArrayItem
38928>>>>>>>>>                Loop
38929>>>>>>>>>>
38929>>>>>>>>>            Loop
38930>>>>>>>>>>
38930>>>>>>>>>            
38930>>>>>>>>>            Send Destroy of hSkinDescriptions
38931>>>>>>>>>            Send Destroy of hSkinDescription
38932>>>>>>>>>            Send Destroy of hSkinIniFile
38933>>>>>>>>>            
38933>>>>>>>>>        End
38933>>>>>>>>>>
38933>>>>>>>>>        Function_Return Skins
38934>>>>>>>>>    End_Function
38935>>>>>>>>>    
38935>>>>>>>>>    // Save the skin preference. This requires an application object.
38935>>>>>>>>>    // Only do this if the application object allows it.
38935>>>>>>>>>    // This is called during startup if pbLoadPreference is True
38935>>>>>>>>>    // Suitable for override
38935>>>>>>>>>    Procedure SaveSkinPreference
38937>>>>>>>>>        String sSkin sIni
38937>>>>>>>>>        If ghoApplication Begin
38939>>>>>>>>>            If (pbPreserveEnvironment(ghoApplication)) Begin
38941>>>>>>>>>                Get psSkinFile to sSkin
38942>>>>>>>>>                Get psSkinIni to sIni
38943>>>>>>>>>                Send WriteString of ghoApplication "Preferences" "SkinFile" sSkin
38944>>>>>>>>>                Send WriteString of ghoApplication "Preferences" "SkinIni" sIni
38945>>>>>>>>>            End
38945>>>>>>>>>>
38945>>>>>>>>>        End
38945>>>>>>>>>>
38945>>>>>>>>>        Else Begin
38946>>>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
38947>>>>>>>>>>
38947>>>>>>>>>        End
38947>>>>>>>>>>
38947>>>>>>>>>    End_Procedure
38948>>>>>>>>>    
38948>>>>>>>>>    // Load the skin preference. This requires an application object.
38948>>>>>>>>>    // Only do this if the application object allows it.
38948>>>>>>>>>    // This is called during startup if pbLoadPreference is True
38948>>>>>>>>>    // Suitable for override
38948>>>>>>>>>    Procedure LoadSkinPreference
38950>>>>>>>>>        String sSkin sIni
38950>>>>>>>>>        Boolean bExists
38950>>>>>>>>>        If ghoApplication Begin
38952>>>>>>>>>            If (pbPreserveEnvironment(ghoApplication)) Begin
38954>>>>>>>>>                Get ValueExists of ghoApplication "Preferences" "SkinFile" to bExists
38955>>>>>>>>>                If bExists Begin
38957>>>>>>>>>                    Get ReadString of ghoApplication "Preferences" "SkinFile" "" to sSkin
38958>>>>>>>>>                    Get ReadString of ghoApplication "Preferences" "SkinIni" "" to sIni
38959>>>>>>>>>                    Set psSkinFile to sSkin
38960>>>>>>>>>                    Set psSkinIni to sIni
38961>>>>>>>>>                End
38961>>>>>>>>>>
38961>>>>>>>>>            End
38961>>>>>>>>>>
38961>>>>>>>>>        End
38961>>>>>>>>>>
38961>>>>>>>>>        Else Begin
38962>>>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
38963>>>>>>>>>>
38963>>>>>>>>>        End
38963>>>>>>>>>>
38963>>>>>>>>>    End_Procedure
38964>>>>>>>>>    
38964>>>>>>>>>    // Can be called to apply the current skin.
38964>>>>>>>>>    Procedure ApplySkin
38966>>>>>>>>>        Boolean bOk
38966>>>>>>>>>        String sSkin sIni
38966>>>>>>>>>        If (IsComObjectCreated(Self)) Begin
38968>>>>>>>>>            Get SkinQFile to sSkin
38969>>>>>>>>>            Get psSkinIni to sIni
38970>>>>>>>>>            
38970>>>>>>>>>            Send NotifyPreApplySkin
38971>>>>>>>>>            // when skins are used we don't want to use built in Visual Styles
38971>>>>>>>>>            Send EnableVisualStyles of Desktop (sSkin="")
38972>>>>>>>>>            Get ComLoadSkin sSkin sIni to bOK
38973>>>>>>>>>            If (sSkin<>"" and not(bOk)) Begin
38975>>>>>>>>>                // if not ok, no skin was appied. Enable visual styles
38975>>>>>>>>>                Send EnableVisualStyles of Desktop True
38976>>>>>>>>>            End
38976>>>>>>>>>>
38976>>>>>>>>>            Send NotifyPostApplySkin
38977>>>>>>>>>        End
38977>>>>>>>>>>
38977>>>>>>>>>    End_Procedure
38978>>>>>>>>>    
38978>>>>>>>>>    
38978>>>>>>>>>End_Class
38979>>>>>>>Use cProgressBar.pkg
Including file: cProgressBar.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cProgressBar.pkg)
38979>>>>>>>>>Use Windows.pkg
38979>>>>>>>>>Use cWinControl.pkg
Including file: cWinControl.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cWinControl.pkg)
38979>>>>>>>>>>>Use Windows.pkg
38979>>>>>>>>>>>
38979>>>>>>>>>>>// Key State Masks for Mouse Messages
38979>>>>>>>>>>>
38979>>>>>>>>>>>Define MK_LBUTTON  for |CI$0001
38979>>>>>>>>>>>Define MK_RBUTTON  for |CI$0002
38979>>>>>>>>>>>Define MK_SHIFT    for |CI$0004
38979>>>>>>>>>>>Define MK_CONTROL  for |CI$0008
38979>>>>>>>>>>>Define MK_MBUTTON  for |CI$0010
38979>>>>>>>>>>>Define MK_XBUTTON1 for |CI$0020
38979>>>>>>>>>>>Define MK_XBUTTON2 for |CI$0040
38979>>>>>>>>>>>
38979>>>>>>>>>>>Enum_List // Mouse Key Flags
38979>>>>>>>>>>>    Define mkLeft    for MK_LBUTTON
38979>>>>>>>>>>>    Define mkMiddle  for MK_MBUTTON
38979>>>>>>>>>>>    Define mkRight   for MK_RBUTTON
38979>>>>>>>>>>>    Define mkX1      for MK_XBUTTON1
38979>>>>>>>>>>>    Define mkX2      for MK_XBUTTON2
38979>>>>>>>>>>>    Define mkShift   for MK_SHIFT
38979>>>>>>>>>>>    Define mkControl for MK_CONTROL
38979>>>>>>>>>>>End_Enum_List
38979>>>>>>>>>>>
38979>>>>>>>>>>>Enum_List // Mouse Buttons. Used in OnMouseXXX messages
38979>>>>>>>>>>>    Define mbLeft
38979>>>>>>>>>>>    Define mbMiddle
38979>>>>>>>>>>>    Define mbRight
38979>>>>>>>>>>>    Define mbX1
38979>>>>>>>>>>>    Define mbX2
38979>>>>>>>>>>>End_Enum_List
38979>>>>>>>>>>>
38979>>>>>>>>>>>Class cWinControl is a DfBaseControl
38980>>>>>>>>>>>    Procedure Construct_Object
38982>>>>>>>>>>>        Forward Send Construct_Object
38984>>>>>>>>>>>        Property Integer private_pbEnabled True
38985>>>>>>>>>>>        Property Integer private_pbVisible True
38986>>>>>>>>>>>    End_Procedure
38987>>>>>>>>>>>    
38987>>>>>>>>>>>    Procedure End_Construct_Object
38989>>>>>>>>>>>        Forward Send End_Construct_Object
38991>>>>>>>>>>>        
38991>>>>>>>>>>>        Set External_Message WM_LBUTTONDOWN   to msg_OnWmLButtonDown
38992>>>>>>>>>>>        Set External_Message WM_MBUTTONDOWN   to msg_OnWmMButtonDown
38993>>>>>>>>>>>        Set External_Message WM_RBUTTONDOWN   to msg_OnWmRButtonDown
38994>>>>>>>>>>>        Set External_Message WM_LBUTTONUP     to msg_OnWmLButtonUp
38995>>>>>>>>>>>        Set External_Message WM_MBUTTONUP     to msg_OnWmMButtonUp
38996>>>>>>>>>>>        Set External_Message WM_RBUTTONUP     to msg_OnWmRButtonUp
38997>>>>>>>>>>>        Set External_Message WM_LBUTTONDBLCLK to msg_OnWmLButtonDblClk
38998>>>>>>>>>>>        Set External_Message WM_MBUTTONDBLCLK to msg_OnWmMButtonDblClk
38999>>>>>>>>>>>        Set External_Message WM_RBUTTONDBLCLK to msg_OnWmRButtonDblClk
39000>>>>>>>>>>>        Set External_Message WM_MOUSEMOVE     to msg_OnWmMouseMove
39001>>>>>>>>>>>    End_Procedure
39002>>>>>>>>>>>    
39002>>>>>>>>>>>    Procedure Notify Longptr wParam Longptr lParam
39004>>>>>>>>>>>        //Intentionally cancelled
39004>>>>>>>>>>>    End_Procedure
39005>>>>>>>>>>>    
39005>>>>>>>>>>>    Procedure Command Longptr wParam Longptr lParam
39007>>>>>>>>>>>        //Intentionally cancelled
39007>>>>>>>>>>>    End_Procedure
39008>>>>>>>>>>>    
39008>>>>>>>>>>>    Procedure DoRecreateWindow
39010>>>>>>>>>>>        // Recreates the window
39010>>>>>>>>>>>        If (Window_Handle(Self)) Begin
39012>>>>>>>>>>>            // attempt to do this without disturbing the focus tree.
39012>>>>>>>>>>>            Send Page_delete // prior to 8.3 this was Send Page_Object 0
39013>>>>>>>>>>>            Send Page 1      //                       Send Page_Object 1
39014>>>>>>>>>>>        End
39014>>>>>>>>>>>>
39014>>>>>>>>>>>    End_Procedure
39015>>>>>>>>>>>    
39015>>>>>>>>>>>    Procedure DoUpdateWindow
39017>>>>>>>>>>>        // Forces windows to update the window by bypassing WM_PAINT
39017>>>>>>>>>>>        Handle hWnd
39017>>>>>>>>>>>        
39017>>>>>>>>>>>        Get Window_Handle to hWnd
39018>>>>>>>>>>>        If hWnd ;            Move (UpdateWindow(hWnd)) to hWnd
39021>>>>>>>>>>>    End_Procedure
39022>>>>>>>>>>>    
39022>>>>>>>>>>>    Procedure Page Integer iState
39024>>>>>>>>>>>        Set Window_Style to WS_DISABLED (private_pbEnabled(Self) =False)
39025>>>>>>>>>>>        Set Window_Style to WS_VISIBLE (private_pbVisible(Self))
39026>>>>>>>>>>>        Forward Send Page iState
39028>>>>>>>>>>>    End_Procedure
39029>>>>>>>>>>>    
39029>>>>>>>>>>>    Procedure OnWmLButtonUp Integer wParam Integer lParam
39031>>>>>>>>>>>        Integer x y eButton
39031>>>>>>>>>>>        
39031>>>>>>>>>>>        Move (Hi(lParam))  to y
39032>>>>>>>>>>>        Move (Low(lParam)) to x
39033>>>>>>>>>>>        
39033>>>>>>>>>>>        Send OnMouseUp mbLeft x y wParam
39034>>>>>>>>>>>    End_Procedure
39035>>>>>>>>>>>    
39035>>>>>>>>>>>    Procedure OnWmMButtonUp Integer wParam Integer lParam
39037>>>>>>>>>>>        Integer x y eButton
39037>>>>>>>>>>>        
39037>>>>>>>>>>>        Move (Hi(lParam))  to y
39038>>>>>>>>>>>        Move (Low(lParam)) to x
39039>>>>>>>>>>>        
39039>>>>>>>>>>>        Send OnMouseUp mbMiddle x y wParam
39040>>>>>>>>>>>    End_Procedure
39041>>>>>>>>>>>    
39041>>>>>>>>>>>    Procedure OnWmRButtonUp Integer wParam Integer lParam
39043>>>>>>>>>>>        Integer x y eButton
39043>>>>>>>>>>>        
39043>>>>>>>>>>>        Move (Hi(lParam))  to y
39044>>>>>>>>>>>        Move (Low(lParam)) to x
39045>>>>>>>>>>>        
39045>>>>>>>>>>>        Send OnMouseUp mbRight x y wParam
39046>>>>>>>>>>>    End_Procedure
39047>>>>>>>>>>>    
39047>>>>>>>>>>>    Procedure OnWmLButtonDown Integer wParam Integer lParam
39049>>>>>>>>>>>        Integer x y eButton fKeys
39049>>>>>>>>>>>        
39049>>>>>>>>>>>        Move (Hi(lParam))  to y
39050>>>>>>>>>>>        Move (Low(lParam)) to x
39051>>>>>>>>>>>        
39051>>>>>>>>>>>        Send OnMouseDown mbLeft x y wParam
39052>>>>>>>>>>>    End_Procedure
39053>>>>>>>>>>>    Procedure OnWmMButtonDown Integer wParam Integer lParam
39055>>>>>>>>>>>        Integer x y eButton
39055>>>>>>>>>>>        
39055>>>>>>>>>>>        Move (Hi(lParam))  to y
39056>>>>>>>>>>>        Move (Low(lParam)) to x
39057>>>>>>>>>>>        
39057>>>>>>>>>>>        Send OnMouseDown mbMiddle x y wParam
39058>>>>>>>>>>>    End_Procedure
39059>>>>>>>>>>>    Procedure OnWmRButtonDown Integer wParam Integer lParam
39061>>>>>>>>>>>        Integer x y eButton
39061>>>>>>>>>>>        
39061>>>>>>>>>>>        Move (Hi(lParam))  to y
39062>>>>>>>>>>>        Move (Low(lParam)) to x
39063>>>>>>>>>>>        
39063>>>>>>>>>>>        Send OnMouseDown mbRight x y wParam
39064>>>>>>>>>>>    End_Procedure
39065>>>>>>>>>>>    
39065>>>>>>>>>>>    Procedure OnWmLButtonDblClk Integer wParam Integer lParam
39067>>>>>>>>>>>        Integer x y eButton
39067>>>>>>>>>>>        
39067>>>>>>>>>>>        Move (Hi(lParam))  to y
39068>>>>>>>>>>>        Move (Low(lParam)) to x
39069>>>>>>>>>>>        
39069>>>>>>>>>>>        Send OnMouseDoubleClick mbLeft x y wParam
39070>>>>>>>>>>>    End_Procedure
39071>>>>>>>>>>>    Procedure OnWmMButtonDblClk Integer wParam Integer lParam
39073>>>>>>>>>>>        Integer x y eButton
39073>>>>>>>>>>>        
39073>>>>>>>>>>>        Move (Hi(lParam))  to y
39074>>>>>>>>>>>        Move (Low(lParam)) to x
39075>>>>>>>>>>>        
39075>>>>>>>>>>>        Send OnMouseDoubleClick mbMiddle x y wParam
39076>>>>>>>>>>>    End_Procedure
39077>>>>>>>>>>>    Procedure OnWmRButtonDblClk Integer wParam Integer lParam
39079>>>>>>>>>>>        Integer x y eButton
39079>>>>>>>>>>>        
39079>>>>>>>>>>>        Move (Hi(lParam))  to y
39080>>>>>>>>>>>        Move (Low(lParam)) to x
39081>>>>>>>>>>>        
39081>>>>>>>>>>>        Send OnMouseDoubleClick mbRight x y wParam
39082>>>>>>>>>>>    End_Procedure
39083>>>>>>>>>>>    
39083>>>>>>>>>>>    Procedure OnWmMouseMove Integer wParam Integer lParam
39085>>>>>>>>>>>        Integer x y eButton
39085>>>>>>>>>>>        
39085>>>>>>>>>>>        Move (Hi(lParam))  to y
39086>>>>>>>>>>>        Move (Low(lParam)) to x
39087>>>>>>>>>>>        
39087>>>>>>>>>>>        Send OnMouseMove x y wParam
39088>>>>>>>>>>>    End_Procedure
39089>>>>>>>>>>>    
39089>>>>>>>>>>>    Procedure OnMouseDown Integer eButton Integer x Integer y Integer fKeys
39091>>>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
39091>>>>>>>>>>>        //String sButton
39091>>>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
39091>>>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
39091>>>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
39091>>>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
39091>>>>>>>>>>>        
39091>>>>>>>>>>>        //If (eButton = mbLeft) Move 'Left Button' To sButton
39091>>>>>>>>>>>        //If (eButton = mbRight) Move 'Right Button' To sButton
39091>>>>>>>>>>>        //Showln 'OnMouseDown ' sButton ' ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
39091>>>>>>>>>>>    End_Procedure
39092>>>>>>>>>>>    
39092>>>>>>>>>>>    Procedure OnMouseUp Integer eButton Integer x Integer y Integer fKeys
39094>>>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
39094>>>>>>>>>>>        //String sButton
39094>>>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
39094>>>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
39094>>>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
39094>>>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
39094>>>>>>>>>>>        
39094>>>>>>>>>>>        //If (eButton = mbLeft) Move 'Left Button' To sButton
39094>>>>>>>>>>>        //If (eButton = mbRight) Move 'Right Button' To sButton
39094>>>>>>>>>>>        //Showln 'OnMouseUp ' sButton ' ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
39094>>>>>>>>>>>    End_Procedure
39095>>>>>>>>>>>    
39095>>>>>>>>>>>    Procedure OnMouseDoubleClick Integer eButton Integer x Integer y Integer fKeys
39097>>>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
39097>>>>>>>>>>>        //String sButton
39097>>>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
39097>>>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
39097>>>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
39097>>>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
39097>>>>>>>>>>>        
39097>>>>>>>>>>>        //If (eButton = mbLeft) Move 'Left Button' To sButton
39097>>>>>>>>>>>        //If (eButton = mbRight) Move 'Right Button' To sButton
39097>>>>>>>>>>>        //Showln 'OnMouseDblClk ' sButton ' ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
39097>>>>>>>>>>>    End_Procedure
39098>>>>>>>>>>>    
39098>>>>>>>>>>>    Procedure OnMouseMove Integer x Integer y Integer fKeys
39100>>>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
39100>>>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
39100>>>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
39100>>>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
39100>>>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
39100>>>>>>>>>>>        
39100>>>>>>>>>>>        //Showln 'OnMouseMove ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
39100>>>>>>>>>>>    End_Procedure
39101>>>>>>>>>>>    
39101>>>>>>>>>>>    Procedure Set pbEnabled Boolean bEnabled
39103>>>>>>>>>>>        Handle hWnd
39103>>>>>>>>>>>        
39103>>>>>>>>>>>        If (bEnabled <> private_pbEnabled(Self)) Begin
39105>>>>>>>>>>>            Set private_pbEnabled to bEnabled
39106>>>>>>>>>>>            Get Window_Handle to hWnd
39107>>>>>>>>>>>            If hWnd ;                Move (EnableWindow(hWnd, bEnabled)) to hWnd
39110>>>>>>>>>>>        End
39110>>>>>>>>>>>>
39110>>>>>>>>>>>    End_Procedure
39111>>>>>>>>>>>    Function pbEnabled Returns Boolean
39113>>>>>>>>>>>        Function_Return (private_pbEnabled(Self))
39114>>>>>>>>>>>    End_Function
39115>>>>>>>>>>>    
39115>>>>>>>>>>>    Procedure Set pbVisible Boolean bVisible
39117>>>>>>>>>>>        Handle  hWnd
39117>>>>>>>>>>>        Integer iVoid
39117>>>>>>>>>>>        
39117>>>>>>>>>>>        If (bVisible <> private_pbVisible(Self)) Begin
39119>>>>>>>>>>>            Set private_pbVisible to bVisible
39120>>>>>>>>>>>            Get Window_Handle to hWnd
39121>>>>>>>>>>>            If hWnd ;                Move (ShowWindow(hWnd, If (bVisible, SW_SHOWNA, SW_HIDE))) to iVoid
39124>>>>>>>>>>>        End
39124>>>>>>>>>>>>
39124>>>>>>>>>>>    End_Procedure
39125>>>>>>>>>>>    Function pbVisible Returns Boolean
39127>>>>>>>>>>>        Function_Return (private_pbVisible(Self))
39128>>>>>>>>>>>    End_Function
39129>>>>>>>>>>>    
39129>>>>>>>>>>>End_Class
39130>>>>>>>>>Use CommCtrl.pkg
39130>>>>>>>>>
39130>>>>>>>>>//{ OverrideProperty=pbEnabled DesignTime=False }
39130>>>>>>>>>Class cProgressBar is a cWinControl
39131>>>>>>>>>    
39131>>>>>>>>>    Procedure Construct_Object
39133>>>>>>>>>        Forward Send Construct_Object
39135>>>>>>>>>        Property Integer private_piMinimum
39136>>>>>>>>>        Property Integer private_piMaximum   100
39137>>>>>>>>>        Property Integer private_piAdvanceBy 10
39138>>>>>>>>>        Property Integer private_piPosition
39139>>>>>>>>>        Property Integer private_pbVertical  False
39140>>>>>>>>>        Property Integer private_pbSmooth    False
39141>>>>>>>>>        Property Integer private_piBackColor clDefault
39142>>>>>>>>>        Property Integer private_piBarColor  clDefault
39143>>>>>>>>>        
39143>>>>>>>>>        Send Define_ToolTip_Support_Mixin
39144>>>>>>>>>        
39144>>>>>>>>>        Set External_Class_Name 'cVdfProgressBar' to 'msctls_progress32'
39145>>>>>>>>>        Set Focus_Mode to NonFocusable
39146>>>>>>>>>        Set Skip_State to True
39147>>>>>>>>>        Set pbUseFormWindowHandle to False     // Must come after Define_ToolTip_Support_Mixin
39148>>>>>>>>>    End_Procedure
39149>>>>>>>>>    
39149>>>>>>>>>    Import_Class_Protocol ToolTip_Support_Mixin
39150>>>>>>>>>    
39150>>>>>>>>>    Procedure Set piMinimum Integer iMin
39152>>>>>>>>>        Integer iMax
39152>>>>>>>>>        
39152>>>>>>>>>        Set private_piMinimum to iMin
39153>>>>>>>>>        Get private_piMaximum to iMax
39154>>>>>>>>>        Send Windows_Message PBM_SETRANGE32 iMin iMax
39155>>>>>>>>>    End_Procedure
39156>>>>>>>>>    Function piMinimum Returns Integer
39158>>>>>>>>>        If (Window_Handle(Self));            Function_Return (WindowsMessage(PBM_GETRANGE, 1, 0))
39161>>>>>>>>>        Else;            Function_Return (private_piMinimum(Self))
39163>>>>>>>>>    End_Function
39164>>>>>>>>>    
39164>>>>>>>>>    Procedure Set piMaximum Integer iMax
39166>>>>>>>>>        Integer iMin
39166>>>>>>>>>        
39166>>>>>>>>>        Set private_piMaximum to iMax
39167>>>>>>>>>        Get private_piMinimum to iMin
39168>>>>>>>>>        Send Windows_Message PBM_SETRANGE32 iMin iMax
39169>>>>>>>>>    End_Procedure
39170>>>>>>>>>    Function piMaximum Returns Integer
39172>>>>>>>>>        If (Window_Handle(Self));            Function_Return (WindowsMessage(PBM_GETRANGE, 0, 0))
39175>>>>>>>>>        Else;            Function_Return (private_piMaximum(Self))
39177>>>>>>>>>    End_Function
39178>>>>>>>>>    
39178>>>>>>>>>    Procedure Set piAdvanceBy Integer iAdvanceBy
39180>>>>>>>>>        Set private_piAdvanceBy to iAdvanceBy
39181>>>>>>>>>        Send Windows_Message PBM_SETSTEP iAdvanceBy 0
39182>>>>>>>>>    End_Procedure
39183>>>>>>>>>    Function piAdvanceBy Returns Integer
39185>>>>>>>>>        Function_Return (private_piAdvanceBy(Self))
39186>>>>>>>>>    End_Function
39187>>>>>>>>>    
39187>>>>>>>>>    Procedure Set piPosition Integer iPos
39189>>>>>>>>>        Set private_piPosition to iPos
39190>>>>>>>>>        Send Windows_Message PBM_SETPOS iPos 0
39191>>>>>>>>>    End_Procedure
39192>>>>>>>>>    
39192>>>>>>>>>    Function piPosition Returns Integer
39194>>>>>>>>>        If (Window_Handle(Self));            Function_Return (WindowsMessage(PBM_GETPOS, 0, 0))
39197>>>>>>>>>        Else;            Function_Return (private_piPosition(Self))
39199>>>>>>>>>    End_Function
39200>>>>>>>>>    
39200>>>>>>>>>    Procedure Set pbVertical Boolean bVertical
39202>>>>>>>>>        If (private_pbVertical(Self) <> bVertical) Begin
39204>>>>>>>>>            Set private_pbVertical to bVertical
39205>>>>>>>>>            Send DoRecreateWindow
39206>>>>>>>>>        End
39206>>>>>>>>>>
39206>>>>>>>>>    End_Procedure
39207>>>>>>>>>    
39207>>>>>>>>>    Function pbVertical Returns Boolean
39209>>>>>>>>>        Function_Return (private_pbVertical(Self))
39210>>>>>>>>>    End_Function
39211>>>>>>>>>    
39211>>>>>>>>>    Procedure Set pbSmooth Boolean bSmooth
39213>>>>>>>>>        If (private_pbSmooth(Self) <> bSmooth) Begin
39215>>>>>>>>>            Set private_pbSmooth to bSmooth
39216>>>>>>>>>            Send DoRecreateWindow
39217>>>>>>>>>        End
39217>>>>>>>>>>
39217>>>>>>>>>    End_Procedure
39218>>>>>>>>>    Function pbSmooth Returns Boolean
39220>>>>>>>>>        Function_Return (private_pbSmooth(Self))
39221>>>>>>>>>    End_Function
39222>>>>>>>>>    
39222>>>>>>>>>    Procedure Set piBackColor Integer rgbColor
39224>>>>>>>>>        Set private_piBackColor to rgbColor
39225>>>>>>>>>        Send Windows_Message PBM_SETBKCOLOR 0 rgbColor
39226>>>>>>>>>    End_Procedure
39227>>>>>>>>>    Function piBackColor Returns Integer
39229>>>>>>>>>        Function_Return (private_piBackColor(Self))
39230>>>>>>>>>    End_Function
39231>>>>>>>>>    
39231>>>>>>>>>    Procedure Set piBarColor Integer rgbColor
39233>>>>>>>>>        Set private_piBarColor to rgbColor
39234>>>>>>>>>        Send Windows_Message PBM_SETBARCOLOR 0 rgbColor
39235>>>>>>>>>    End_Procedure
39236>>>>>>>>>    Function piBarColor Returns Integer
39238>>>>>>>>>        Function_Return (private_piBarColor(Self))
39239>>>>>>>>>    End_Function
39240>>>>>>>>>    
39240>>>>>>>>>    Procedure DoAdvance
39242>>>>>>>>>        Send Windows_Message PBM_STEPIT 0 0
39243>>>>>>>>>    End_Procedure
39244>>>>>>>>>    
39244>>>>>>>>>    Procedure DoAdvanceBy  Integer iAdvanceBy
39246>>>>>>>>>        Send Windows_Message PBM_DELTAPOS iAdvanceBy 0
39247>>>>>>>>>    End_Procedure
39248>>>>>>>>>    
39248>>>>>>>>>    Procedure private_DoInitWindow
39250>>>>>>>>>        Set piBarColor  to (private_piBarColor(Self))
39251>>>>>>>>>        Set piBackColor to (private_piBackColor(Self))
39252>>>>>>>>>        Set piAdvanceBy to (private_piAdvanceBy(Self))
39253>>>>>>>>>        Set piMinimum   to (private_piMinimum(Self))
39254>>>>>>>>>        Set piMaximum   to (private_piMaximum(Self))
39255>>>>>>>>>        Set piPosition  to (private_piPosition(Self))
39256>>>>>>>>>    End_Procedure
39257>>>>>>>>>    
39257>>>>>>>>>    Procedure Page_Object Integer iState
39259>>>>>>>>>        Handle hWnd
39259>>>>>>>>>        
39259>>>>>>>>>        Get Window_Handle to hWnd
39260>>>>>>>>>        If (hWnd=0 and iState) Begin
39262>>>>>>>>>            Set Window_Style to PBS_VERTICAL (private_pbVertical(Self))
39263>>>>>>>>>            Set Window_Style to PBS_SMOOTH   (private_pbSmooth(Self))
39264>>>>>>>>>            Forward Send Page_Object True
39266>>>>>>>>>        End
39266>>>>>>>>>>
39266>>>>>>>>>        Else ;            Forward Send Page_Object iState
39269>>>>>>>>>        
39269>>>>>>>>>        // Handle tooltip support....
39269>>>>>>>>>        If (iState = 0) Begin
39271>>>>>>>>>            Send RequestDeleteToolTip
39272>>>>>>>>>        End
39272>>>>>>>>>>
39272>>>>>>>>>        Else Begin
39273>>>>>>>>>            Send RequestAddToolTip
39274>>>>>>>>>        End
39274>>>>>>>>>>
39274>>>>>>>>>    End_Procedure
39275>>>>>>>>>    
39275>>>>>>>>>    Procedure Page Integer iState
39277>>>>>>>>>        Forward Send Page iState
39279>>>>>>>>>        If (iState =1);            Send private_DoInitWindow
39282>>>>>>>>>    End_Procedure
39283>>>>>>>>>    
39283>>>>>>>>>    // Called by Page_Object. Handles tooltip creation. We use a dedicated
39283>>>>>>>>>    // method to perform AddToolTip because it is often the case that Page_Object
39283>>>>>>>>>    // is implemented in a mixin class.
39283>>>>>>>>>    Procedure RequestAddToolTip
39285>>>>>>>>>        Send AddToolTip
39286>>>>>>>>>    End_Procedure
39287>>>>>>>>>    
39287>>>>>>>>>    
39287>>>>>>>>>    // Called by Page_Object. Handles tooltip removal.
39287>>>>>>>>>    Procedure RequestDeleteToolTip
39289>>>>>>>>>        Send DeleteToolTip
39290>>>>>>>>>    End_Procedure
39291>>>>>>>>>End_Class
39292>>>>>>>Use Windows.pkg
39292>>>>>>>Use DUFLanguageConstants.inc
Including file: DUFLanguageConstants.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\DUFLanguageConstants.inc)
39292>>>>>>>>>// *** The Database Update Framework Include file for Languages ***
39292>>>>>>>>>// Language constant declarations for all classes included in "DUF - The Database Update Framework"
39292>>>>>>>>>// They have all been placed in this central spot to make translations to various languages more convenient.
39292>>>>>>>>>//
39292>>>>>>>>>Use LanguageText.Pkg
39292>>>>>>>>>
39292>>>>>>>>>    // *** cSQLConnectionsIniFile.pkg Class Language Constants ***
39292>>>>>>>>>    Define CS_DUF_DuplicateConnectionIDPre  for "Cannot register connection ID"
39292>>>>>>>>>    Define CS_DUF_DuplicateConnectionIDPost for "This ID already exists."
39292>>>>>>>>>    // *** cSQLConnectionsHandler.pkg Class Language Constants ***
39292>>>>>>>>>    Define CS_DUF_SetupErrorcConnection     for "Cannot login to the database server as the cConnection hasn't been setup properly. Can't continue. Program will now exit."
39292>>>>>>>>>    Define CS_DUF_CannotLoginToServer       for "Could not login to the database server. Can't continue. Program will now exit."
39292>>>>>>>>>    Define CS_DUF_ErrorText                 for "\n\nError Text:"
39292>>>>>>>>>    // *** cDbUpdateFunctionLibrary.pkg Class Language Constants ***
39292>>>>>>>>>    Define CS_DUF_ConnectError              for "SQL error. Could not connect to the SQL database manager"
39292>>>>>>>>>    Define CS_DUF_AttachError               for "Could not attach to the database:"
39292>>>>>>>>>    Define CS_DUF_DeletingIndex             for "Deleting index"
39292>>>>>>>>>    Define CS_DUF_CopyingData               for "Copying data"
39292>>>>>>>>>    Define CS_DUF_CreatingIndex             for "Creating index"
39292>>>>>>>>>    Define CS_DUF_LoginToDbServerFailed     for  "Login failed to the database server. The following connect string was used:\n"
39292>>>>>>>>>    Define CS_DUF_DoYouWantToExit           for "Do you want to stop the database update and exit?"  
39292>>>>>>>>>    Define CS_DUF_NoIntFilesFound           for "No .int files found! Nothing was changed."
39292>>>>>>>>>    // *** cDbUpdateVersion.pkg Class Language Constants ***
39292>>>>>>>>>    Define CS_DUF_UpdateVersion             for "Updating database"
39292>>>>>>>>>    Define CS_DUF_UpdateFromVersion         for "from version"
39292>>>>>>>>>    Define CS_DUF_UpdateToVersion           for "to version:"
39292>>>>>>>>>    Define CS_DUF_DbUpdateTableMissing      for "Cannot open the 'DbVersion' table that is used when updating the database! Cannot continue!"
39292>>>>>>>>>    // *** cDbUpdateHandler.inc Language Constants ***
39292>>>>>>>>>    Define CS_DUF_DatabaseInUseShort        for "There are others using the application/database. Are you sure you still want to update the database?"
39292>>>>>>>>>    Define CS_DUF_DatabaseNeedsUpdate       for ("The database needs to be updated." + "\n\nATTENTION! The database may not be in use while this work is performed. Make sure that nobody else is using the application before clicking 'Yes' below.\n\n" + "Start update now?")
39292>>>>>>>>>    Define CS_DUF_HeaderUpdateText          for "Important!"
39292>>>>>>>>>    Define CS_DUF_DatabaseInUseText         for "There are others using the application/database or at least one table could NOT be opened exclusively. Please close all other applications using the database and try again. The Application will now close."
39292>>>>>>>>>    Define CS_DUF_WorkingHeaderText         for "Working!"
39292>>>>>>>>>    Define CS_DUF_WorkingUpdateText         for "The database is being updated. Please wait..."
39292>>>>>>>>>    Define CS_DUF_DatabaseUpdatedText       for "Ready! The database was updated."
39292>>>>>>>>>    Define CS_DUF_DatabaseCheckedText       for "Ready! The database was checked but no updates was needed."
39292>>>>>>>>>    Define CS_DUF_DbUpdatedErrorText        for "One or more errors occured while the database was updated. Please check the logfile in the data-folder.\n\nThe program will now close."
39292>>>>>>>>>    Define CS_DUF_UpdateInProgressTxt       for ("System locked!\n\nThe database is being updated. Please try again later...\n\n" * "The program will now close.")
39292>>>>>>>>>    // *** cDbUpdateHandler.pkg Class Language Constants ***
39292>>>>>>>>>    Define CS_DUF_DatabaseConnStringSpec    for "The database specified in the connection string: '"
39292>>>>>>>>>    Define CS_DUF_DatabaseDoesntExist       for "' doesn't exist!\n\nYou need to create it with a database management software or by using the 'SqlDatabaseCreate' function, which can be used in the 'OnPreUpdate' event of the cDbUpdateHandler object.\n\nThe program will now exit."
39292>>>>>>>>>    // *** cDbUpdateLogFile.pkg Class Language Constants ***   
39292>>>>>>>>>    Define CS_DUF_LogFileNotFound           for "Could not locate the log file:\n\n"
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>>>
39292>>>>>>>Use Statpnl.pkg
39292>>>>>>>
39292>>>>>>>
39292>>>>>>>    Global_Variable Handle ghoProgressBar // will contain the ID of the embedded progress bar.
39292>>>>>>>
39292>>>>>>>    Global_Variable Handle ghoProgressBarOverall // will contain the ID of the embedded progress bar with overall results
39292>>>>>>>
39292>>>>>>>Object Status_Panel is a cProcessStatusPanel
39294>>>>>>>    Set Size to 152 222
39295>>>>>>>    Set Border_Style to Border_Dialog
39296>>>>>>>    Set Icon to "Default.ico"
39297>>>>>>>    Move Self to ghoStatusPanel // this can be used throughout the applicaton to access this object
39298>>>>>>>
39298>>>>>>>    Property Boolean Cancel_Button_Visible_State True
39300>>>>>>>
39300>>>>>>>    Procedure Activate
39303>>>>>>>        Integer iSizeBefore
39303>>>>>>>        Get GuiSize to iSizeBefore
39304>>>>>>>        Forward Send Activate
39306>>>>>>>        Set GuiSize to (Hi(iSizeBefore)) (Low(iSizeBefore))
39307>>>>>>>    End_Procedure
39308>>>>>>>
39308>>>>>>>    Procedure End_Construct_Object
39311>>>>>>>        Forward Send End_Construct_Object
39313>>>>>>>        Set Label of oTitleTxt      to ""
39314>>>>>>>        Set Label of oTableNameTxt  to ""
39315>>>>>>>        Set Label of oMessageTxt    to ""
39316>>>>>>>        Set Label of oActionTxt     to ""
39317>>>>>>>    End_Procedure
39318>>>>>>>
39318>>>>>>>    Object oTitleTxt is a TextBox
39320>>>>>>>        Set Location to 5 21
39321>>>>>>>        Set Size to 8 179
39322>>>>>>>        Set Auto_Size_State to False
39323>>>>>>>        Set Justification_Mode  to jMode_Center
39324>>>>>>>        Set Label to "This is the Title Text"
39325>>>>>>>    End_Object
39326>>>>>>>
39326>>>>>>>    Object oTableNameTxt is a TextBox
39328>>>>>>>        Set Size to 19 204
39329>>>>>>>        Set Location to 18 9
39330>>>>>>>        Set Auto_Size_State to False
39331>>>>>>>        Set Justification_Mode to JMode_Left
39332>>>>>>>        Set Label to "This is the TableName Text"
39333>>>>>>>    End_Object
39334>>>>>>>
39334>>>>>>>    Object oMessageTxt is a TextBox
39336>>>>>>>        Set Location to 39 9
39337>>>>>>>        Set Size to 19 204
39338>>>>>>>        Set Auto_Size_State to False
39339>>>>>>>        Set Justification_Mode to JMode_Left
39340>>>>>>>        Set Label to "This is the Message text"
39341>>>>>>>    End_Object
39342>>>>>>>
39342>>>>>>>    Object oActionTxt is a TextBox
39344>>>>>>>        Set Size to 16 204
39345>>>>>>>        Set Location to 60 9
39346>>>>>>>        Set Auto_Size_State to False
39347>>>>>>>        Set Justification_Mode to JMode_Left
39348>>>>>>>        Set Label to "This is the Action Text"
39349>>>>>>>    End_Object
39350>>>>>>>
39350>>>>>>>    Object oStopButton is a Button
39352>>>>>>>        Set Location to 123 82
39353>>>>>>>        Set Label to C_$Cancel
39354>>>>>>>
39354>>>>>>>        Procedure OnClick 
39357>>>>>>>            Integer iRetval
39357>>>>>>>            Get YesNo_Box CS_DUF_DoYouWantToExit to iRetval
39358>>>>>>>            If (iRetval = MBR_Yes) Begin
39360>>>>>>>                Send Exit_Application
39361>>>>>>>            End
39361>>>>>>>>
39361>>>>>>>        End_Procedure
39362>>>>>>>
39362>>>>>>>    End_Object
39363>>>>>>>
39363>>>>>>>    Object oPercentage_tb is a TextBox
39365>>>>>>>        Set Location to 74 196
39366>>>>>>>        Set Size to 10 25
39367>>>>>>>//        Set Label to "% Done"
39367>>>>>>>    End_Object
39368>>>>>>>
39368>>>>>>>    Object oCopyRight is a TextBox
39370>>>>>>>        Set Location to 140 21
39371>>>>>>>        Set Size to 9 197
39372>>>>>>>        Set FontPointHeight to 8
39373>>>>>>>        Set Auto_Size_State to False
39374>>>>>>>        Set Justification_Mode  to jMode_Center
39375>>>>>>>        Set Label to "Copyright 2001-2024 RDC Tools International"
39376>>>>>>>    End_Object
39377>>>>>>>
39377>>>>>>>    Object oProgressBar is a cProgressBar
39379>>>>>>>        Set Size to 10 179
39380>>>>>>>        Set Location to 83 22
39381>>>>>>>        Set pbVisible to True // default
39382>>>>>>>        Move Self to ghoProgressBar // this can be used throughout your application to access the progress bar
39383>>>>>>>    End_Object
39384>>>>>>>
39384>>>>>>>    Procedure Set Progress_Bar_Visible_State Boolean bVisible
39387>>>>>>>        Set pbVisible of ghoProgressBar to bVisible
39388>>>>>>>    End_Procedure
39389>>>>>>>
39389>>>>>>>    Function Progress_Bar_Visible_State Returns Boolean
39392>>>>>>>        Boolean bVisible
39392>>>>>>>        Get pbVisible of ghoProgressBar to bVisible
39393>>>>>>>        Function_Return (bVisible)
39394>>>>>>>    End_Function
39395>>>>>>>
39395>>>>>>>    Object oProgressBarOverall is a cProgressBar
39397>>>>>>>        Set Size to 10 179
39398>>>>>>>        Set Location to 107 22
39399>>>>>>>        Set pbVisible to True // default
39400>>>>>>>        Move Self to ghoProgressBarOverall // this can be used throughout your application to access the progress bar
39401>>>>>>>    End_Object
39402>>>>>>>
39402>>>>>>>    Object oOverallProgress_tb is a TextBox
39404>>>>>>>        Set Size to 10 65
39405>>>>>>>        Set Location to 95 24
39406>>>>>>>        Set Label to "Overall Progress"
39407>>>>>>>    End_Object
39408>>>>>>>
39408>>>>>>>    Procedure Set Progress_Bar_Overall_Visible_State Boolean bVisible
39411>>>>>>>        Set pbVisible of ghoProgressBarOverall to bVisible 
39412>>>>>>>        Set Visible_State of oOverallProgress_tb to bVisible
39413>>>>>>>    End_Procedure
39414>>>>>>>
39414>>>>>>>    Function Progress_Bar_Overall_Visible_State Returns Boolean
39417>>>>>>>        Boolean bVisible
39417>>>>>>>        Get pbVisible of ghoProgressBarOverall to bVisible
39418>>>>>>>        Function_Return (bVisible)
39419>>>>>>>    End_Function
39420>>>>>>>
39420>>>>>>>    // These messages bind the standard cProcessStatusPanel interface to the actual
39420>>>>>>>    // objects defined within this instance of the status panel.
39420>>>>>>>
39420>>>>>>>    // note: all of the messages that change text should be forwarded
39420>>>>>>>    // as the forwarded messages allows the panel to paint when in a tight loop
39420>>>>>>>
39420>>>>>>>    Procedure Set Message_Text String sText
39423>>>>>>>        Set Label of oMessageTxt to sText
39424>>>>>>>        Forward Set Message_Text to sText
39426>>>>>>>    End_Procedure
39427>>>>>>>
39427>>>>>>>    Function Message_Text Returns String
39430>>>>>>>        Function_Return (Label(oMessageTxt))
39431>>>>>>>    End_Function
39432>>>>>>>
39432>>>>>>>    Procedure Set Action_Text String sText
39435>>>>>>>        Set Label of oActionTxt to sText
39436>>>>>>>        Forward Set Action_Text to sText
39438>>>>>>>    End_Procedure
39439>>>>>>>
39439>>>>>>>    Function Action_Text Returns String
39442>>>>>>>        Function_Return (Label(oActionTxt))
39443>>>>>>>    End_Function
39444>>>>>>>
39444>>>>>>>    Procedure Set Button_Text String sText
39447>>>>>>>        Set Label of oStopButton to sText
39448>>>>>>>        Forward Set Button_Text to sText
39450>>>>>>>    End_Procedure
39451>>>>>>>
39451>>>>>>>    Function Button_Text Returns String
39454>>>>>>>        Function_Return (Label(oStopButton))
39455>>>>>>>    End_Function
39456>>>>>>>
39456>>>>>>>    Procedure Set Title_Text String sText
39459>>>>>>>        Set Label of oTitleTxt to sText
39460>>>>>>>        Forward Set Title_Text to sText
39462>>>>>>>    End_Procedure
39463>>>>>>>
39463>>>>>>>    Function Title_Text Returns String
39466>>>>>>>        Function_Return (Label(oTitleTxt))
39467>>>>>>>    End_Function
39468>>>>>>>
39468>>>>>>>    Procedure Set TableName_Text String sText
39471>>>>>>>        Set Label of oTableNameTxt to sText
39472>>>>>>>    End_Procedure
39473>>>>>>>
39473>>>>>>>    Function TableName_Text Returns String
39476>>>>>>>        Function_Return (Label(oTableNameTxt))
39477>>>>>>>    End_Function
39478>>>>>>>
39478>>>>>>>    Procedure Set License_Text String sText
39481>>>>>>>//        Set Label of oLicense_txt to sText
39481>>>>>>>    End_Procedure 
39482>>>>>>>    
39482>>>>>>>    Procedure Set piMaximum Integer iSize
39485>>>>>>>        Set piMaximum of ghoProgressBar to iSize
39486>>>>>>>    End_Procedure  
39487>>>>>>>    
39487>>>>>>>    Procedure Set piAdvanceBy Integer iCount
39490>>>>>>>        Set piAdvanceBy of ghoProgressBar to iCount
39491>>>>>>>    End_Procedure
39492>>>>>>>
39492>>>>>>>    Procedure DoAdvance
39495>>>>>>>        Send DoAdvance of ghoProgressBar
39496>>>>>>>    End_Procedure
39497>>>>>>>    
39497>>>>>>>    // gets called when status panel is activated passing whether a button
39497>>>>>>>    // should appear
39497>>>>>>>    Procedure EnableCancelButton Boolean bEnable
39500>>>>>>>        Boolean bVisible
39500>>>>>>>        Get Cancel_Button_Visible_State to bVisible
39501>>>>>>>        If (bEnable = False) Begin
39503>>>>>>>            Set Visible_State of oStopButton to bVisible
39504>>>>>>>        End
39504>>>>>>>>
39504>>>>>>>        Set Enabled_State of oStopButton to bEnable
39505>>>>>>>    End_Procedure
39506>>>>>>>
39506>>>>>>>    Procedure Reset_StatusPanel
39509>>>>>>>        Set Allow_Cancel_State of ghoStatusPanel to True
39510>>>>>>>        Set Cancel_Button_Visible_State of ghoStatusPanel to True
39511>>>>>>>        Set Progress_Bar_Visible_State  of ghoStatusPanel to True
39512>>>>>>>        Set Progress_Bar_Overall_Visible_State of ghoProgressBarOverall to False
39513>>>>>>>    End_Procedure
39514>>>>>>>
39514>>>>>>>//    Object oProgressBar is a cProgressBar
39514>>>>>>>//        Move Self to ghoProgressBar
39514>>>>>>>//        Set Location to 1 25
39514>>>>>>>//        Set Size to 9 173
39514>>>>>>>//        Set piMinimum        to 0
39514>>>>>>>//        Set piMaximum        to 2000
39514>>>>>>>//        Set piAdvanceBy      to 100
39514>>>>>>>//        Set pbSmooth to True
39514>>>>>>>//
39514>>>>>>>//        // For some weird reason the application skin makes the coloring of the progressbar
39514>>>>>>>//        // to malfunction. By telling the CodeJock SkinFramework to skip this object, the
39514>>>>>>>//        // color will show correctly.
39514>>>>>>>//        Procedure Page Integer iPageObject
39514>>>>>>>//            Handle hWin
39514>>>>>>>//            Forward Send Page iPageObject
39514>>>>>>>//            If (ghoSkinFramework <> 0) Begin
39514>>>>>>>//                Get Window_Handle to hWin
39514>>>>>>>//                Send ComRemoveWindow of ghoSkinFramework hWin
39514>>>>>>>//            End
39514>>>>>>>//        End_Procedure
39514>>>>>>>//    End_Object
39514>>>>>>>
39514>>>>>>>End_Object
39515>>>>>>>
39515>>>>>Use cDbUpdateFunctionLibrary_Mixin.pkg  // Properties used by the cDbUpdateFunctionLibrary class.
Including file: cDbUpdateFunctionLibrary_Mixin.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cDbUpdateFunctionLibrary_Mixin.pkg)
39515>>>>>>>// *** Mixin Class For the cDbUpdateFunctionLibrary Class ***
39515>>>>>>>//
39515>>>>>>>// We need to create a mixin class for the library.
39515>>>>>>>// Why? Because we import the library to the cDbUpdateVersion class; that imports
39515>>>>>>>// all messages (functions & procedures) but all Properties are "lost", aka not imported by
39515>>>>>>>// the Import_Class_Protocol command. So we need a way to create our properties somewhere else...
39515>>>>>>>// Note: This class should _not_ have a construct_object defined.
39515>>>>>>>//
39515>>>>>>>Use VdfBase.pkg
39515>>>>>>>Use WinUuid.pkg
Including file: WinUuid.pkg    (C:\Program Files\DataFlex 24.0\Pkg\WinUuid.pkg)
39515>>>>>>>>>Use Unicode.Pkg
39515>>>>>>>>>
39515>>>>>>>>>External_Function WinAPI_UuidCreate "UuidCreate" Rpcrt4.dll ;    Pointer Uuid ;    Returns Integer
39516>>>>>>>>>
39516>>>>>>>>>External_Function WinAPI_UuidToString  "UuidToStringW" Rpcrt4.dll ;    Pointer pUuid ;    Pointer lpUUIDString ;    Returns Integer
39517>>>>>>>>>
39517>>>>>>>>>External_Function WinAPI_UuidCreateSequential "UuidCreateSequential" Rpcrt4.dll ;    Pointer pUuid ;    Returns Integer
39518>>>>>>>>>
39518>>>>>>>>>External_Function WinAPI_RpcStringFree "RpcStringFreeW" Rpcrt4.dll ;    Pointer pStr ;    Returns Integer
39519>>>>>>>>>
39519>>>>>>>>>
39519>>>>>>>>>// Returns a 'random' Universally Unique Identifier string as a 32 digit hex number.
39519>>>>>>>>>Function RandomHexUUID Global Returns String
39521>>>>>>>>>    Pointer pUUID pUUIDStr
39521>>>>>>>>>    Integer iRetval iOffset iChar
39521>>>>>>>>>    String sUUID
39521>>>>>>>>>    
39521>>>>>>>>>    Move (Alloc(16)) to pUUID
39522>>>>>>>>>    
39522>>>>>>>>>    Move (WinAPI_UuidCreate (pUUID)) to iRetval
39523>>>>>>>>>    
39523>>>>>>>>>    If (iRetval = 0) Begin
39525>>>>>>>>>        Move 0 to pUUIDStr
39526>>>>>>>>>        
39526>>>>>>>>>        Move (WinAPI_UuidToString (pUUID, AddressOf(pUUIDStr))) to iRetval
39527>>>>>>>>>        If (iRetval = 0) Begin
39529>>>>>>>>>            Move (PointerToWString(pUUIDStr)) to sUUID
39530>>>>>>>>>            Move (WinAPI_RpcStringFree (AddressOf (pUUIDStr))) to iRetval
39531>>>>>>>>>            
39531>>>>>>>>>            Move (Uppercase (sUUID)) to sUUID
39532>>>>>>>>>        End
39532>>>>>>>>>>
39532>>>>>>>>>    End
39532>>>>>>>>>>
39532>>>>>>>>>    
39532>>>>>>>>>    Move (Free(pUUID)) to iRetval
39533>>>>>>>>>    
39533>>>>>>>>>    Function_Return sUUID
39534>>>>>>>>>End_Function
39535>>>>>>>>>
39535>>>>>>>>>
39535>>>>>>>>>// Returns a sequential Universally Unique Identifier string as a 32 digit hex number.
39535>>>>>>>>>Function SeqHexUUID Global Returns String
39537>>>>>>>>>    Pointer pUUID pUUIDStr
39537>>>>>>>>>    Integer iRetval iOffset iChar
39537>>>>>>>>>    String sUUID
39537>>>>>>>>>    
39537>>>>>>>>>    Move (Alloc(16)) to pUUID
39538>>>>>>>>>    
39538>>>>>>>>>    Move (WinAPI_UuidCreateSequential (pUUID)) to iRetval
39539>>>>>>>>>    
39539>>>>>>>>>    If (iRetval = 0) Begin
39541>>>>>>>>>        Move 0 to pUUIDStr
39542>>>>>>>>>        
39542>>>>>>>>>        Move (WinAPI_UuidToString (pUUID, AddressOf(pUUIDStr))) to iRetval
39543>>>>>>>>>        If (iRetval = 0) Begin
39545>>>>>>>>>            Move (PointerToWString(pUUIDStr)) to sUUID
39546>>>>>>>>>            Move (WinAPI_RpcStringFree (AddressOf (pUUIDStr))) to iRetval
39547>>>>>>>>>            
39547>>>>>>>>>            Move (Uppercase (sUUID)) to sUUID
39548>>>>>>>>>        End
39548>>>>>>>>>>
39548>>>>>>>>>    End
39548>>>>>>>>>>
39548>>>>>>>>>    
39548>>>>>>>>>    Move (Free(pUUID)) to iRetval
39549>>>>>>>>>    
39549>>>>>>>>>    Function_Return sUUID
39550>>>>>>>>>End_Function
39551>>>>>>>Use cli.pkg
39551>>>>>>>Use sql.pkg
Including file: sql.pkg    (C:\Program Files\DataFlex 24.0\Pkg\sql.pkg)
39551>>>>>>>>>// Embedded SQL classes for use with Data Access Worldwide CLI    
39551>>>>>>>>>// Connectivty Kits.                                              
39551>>>>>>>>>Use CLI.pkg
39551>>>>>>>>>
39551>>>>>>>>>// Global storage for results
39551>>>>>>>>>Integer SQLResult
39551>>>>>>>>>
39551>>>>>>>>>// Embedded SQL function constants
39551>>>>>>>>>Define FUNC_SQLCONNECT             for 1000000
39551>>>>>>>>>Define FUNC_SQLFILECONNECT         for 1000001
39551>>>>>>>>>Define FUNC_SQLDISCONNECT          for 1000002
39551>>>>>>>>>Define FUNC_SQLOPEN                for 1000003
39551>>>>>>>>>Define FUNC_SQLCLOSE               for 1000004
39551>>>>>>>>>Define FUNC_SQLPREPARE             for 1000005
39551>>>>>>>>>Define FUNC_SQLEXECUTE             for 1000006
39551>>>>>>>>>Define FUNC_SQLEXECDIRECT          for 1000007
39551>>>>>>>>>Define FUNC_SQLFETCH               for 1000008
39551>>>>>>>>>Define FUNC_SQLCOLUMNINFO          for 1000009
39551>>>>>>>>>Define FUNC_SQLCOLUMNVALUE         for 1000010
39551>>>>>>>>>Define FUNC_SQLBINDFILE            for 1000011
39551>>>>>>>>>Define FUNC_SQLGETDATA             for 1000012
39551>>>>>>>>>Define FUNC_SQLCOLSTRINGATTRIBLEN  for 1000013
39551>>>>>>>>>Define FUNC_SQLCOLSTRINGATTRIB     for 1000014
39551>>>>>>>>>Define FUNC_SQLCOLINTATTRIB        for 1000015
39551>>>>>>>>>Define FUNC_SQLSTMTINTATTRIB       for 1000016
39551>>>>>>>>>Define FUNC_SQLSETPROCNAME         for 1000017
39551>>>>>>>>>Define FUNC_SQLSETPROCARG          for 1000018
39551>>>>>>>>>Define FUNC_SQLCALL                for 1000019
39551>>>>>>>>>Define FUNC_SQLGETPROCARGLEN       for 1000020
39551>>>>>>>>>Define FUNC_SQLGETPROCARG          for 1000021
39551>>>>>>>>>Define FUNC_SQLGETPROCRETVALLEN    for 1000022
39551>>>>>>>>>Define FUNC_SQLGETPROCRETVAL       for 1000023
39551>>>>>>>>>Define FUNC_SQLNEXTRESULTSET       for 1000024
39551>>>>>>>>>Define FUNC_SQLBUFFERSTATUS        for 1000025
39551>>>>>>>>>Define FUNC_SQLSETPROCSCHEMA       for 1000026
39551>>>>>>>>>Define FUNC_SQLGETMESSAGE          for 1000027
39551>>>>>>>>>Define FUNC_SQLSETSTMTINTATTRIB    for 1000028
39551>>>>>>>>>
39551>>>>>>>>>// Embedded SQL statement attribute constants
39551>>>>>>>>>Define SQLSTMTATTRIB_COLUMNCOUNT    for 1
39551>>>>>>>>>Define SQLSTMTATTRIB_ROWCOUNT       for 2
39551>>>>>>>>>Define SQLSTMTATTRIB_ROWCOUNT_TYPE  for 3
39551>>>>>>>>>Define SQLSTMTATTRIB_NUMMESSAGES    for 4
39551>>>>>>>>>Define SQLSTMTATTRIB_CURSOR_TYPE    for 5
39551>>>>>>>>>
39551>>>>>>>>>// Embedded SQL possible values for SQLSTMTATTRIB_CURSOR_TYPE
39551>>>>>>>>>Define SQL_CURSOR_FORWARD_ONLY      for 0
39551>>>>>>>>>Define SQL_CURSOR_KEYSET_DRIVEN     for 1
39551>>>>>>>>>Define SQL_CURSOR_DYNAMIC           for 2
39551>>>>>>>>>Define SQL_CURSOR_STATIC            for 3
39551>>>>>>>>>
39551>>>>>>>>>
39551>>>>>>>>>// Embedded SQL column attribute constants
39551>>>>>>>>>Define SQLCOLATTRIB_SIZE           for 1
39551>>>>>>>>>Define SQLCOLATTRIB_LENGTH         for 1
39551>>>>>>>>>Define SQLCOLATTRIB_PRECISION      for 2
39551>>>>>>>>>Define SQLCOLATTRIB_LABEL          for 3
39551>>>>>>>>>Define SQLCOLATTRIB_BASECOLUMNNAME for 4
39551>>>>>>>>>Define SQLCOLATTRIB_BASETABLENAME  for 5
39551>>>>>>>>>Define SQLCOLATTRIB_SQLTYPE        for 6
39551>>>>>>>>>Define SQLCOLATTRIB_NULLABLE       for 7
39551>>>>>>>>>Define SQLCOLATTRIB_DFTYPE         for 8
39551>>>>>>>>>
39551>>>>>>>>>
39551>>>>>>>>>// Types used for conversion with ConvertToXml
39551>>>>>>>>>Define esqlTime      for 8
39551>>>>>>>>>Define esqlDatetime  for 9
39551>>>>>>>>>
39551>>>>>>>>>// Global variables holding last executed embedded SQL connection and statement handles.
39551>>>>>>>>>Integer giLastSQLhdbc
39551>>>>>>>>>Integer giLastSQLhstmt
39551>>>>>>>>>
39551>>>>>>>>>Move -1 to giLastSQLhdbc
39552>>>>>>>>>Move -1 to giLastSQLhstmt
39553>>>>>>>>>
39553>>>>>>>>>Struct tSQLColumn
39553>>>>>>>>>    Integer iSQLType
39553>>>>>>>>>    Integer iSQLSize
39553>>>>>>>>>    Integer iSQLPrecision
39553>>>>>>>>>    Integer iVariableDataType
39553>>>>>>>>>End_Struct
39553>>>>>>>>>
39553>>>>>>>>>// Statement object for embedded sql                           
39553>>>>>>>>>//   An object is created for each statement. These will be children    
39553>>>>>>>>>//   of cSQLConnection objects which manage the create and destruction  
39553>>>>>>>>>//   of these.                                                          
39553>>>>>>>>>
39553>>>>>>>>>Class cSQLStatement is a cObject
39554>>>>>>>>>    
39554>>>>>>>>>    Procedure Construct_object
39556>>>>>>>>>        Forward Send Construct_object
39558>>>>>>>>>        
39558>>>>>>>>>        Property Handle  phCLIStatementHandle   0
39559>>>>>>>>>        Property Handle  phCLIConnectionHandle  0
39560>>>>>>>>>        Property String  psDriverID             ""
39561>>>>>>>>>        
39561>>>>>>>>>        Property Integer piLastColumn      0
39562>>>>>>>>>        Property Integer piLastArgument    0
39563>>>>>>>>>        Property Integer piBindFile        0
39564>>>>>>>>>        
39564>>>>>>>>>        Property Integer piColumnCount     0
39565>>>>>>>>>        
39565>>>>>>>>>        // True if there is at least 1 column with a variable length data type
39565>>>>>>>>>        Property Integer piHasVariableDataType  0
39566>>>>>>>>>        
39566>>>>>>>>>        // Max size of buffer for variable length data. Default 16000
39566>>>>>>>>>        Property Integer piMaxVariableBufferLength 16000
39567>>>>>>>>>        
39567>>>>>>>>>        // Allocated buffer for SQLGetData.
39567>>>>>>>>>        Property WString psVariableBuffer  ""
39568>>>>>>>>>        
39568>>>>>>>>>        // Allocated size of psVariableBuffer
39568>>>>>>>>>        Property Integer piVariableBufferLength 0
39569>>>>>>>>>        
39569>>>>>>>>>        // Stores column properties of a result set.
39569>>>>>>>>>        Property tSQLColumn[] paSQLColumns
39570>>>>>>>>>        
39570>>>>>>>>>        // piFetchResult is set by SQLFetchRowValues and SQLFetchResultSetValues
39570>>>>>>>>>        //   0    = Fetch returned no data.
39570>>>>>>>>>        //   <> 0 = Row fetched
39570>>>>>>>>>        Property Integer piFetchResult     0
39571>>>>>>>>>        
39571>>>>>>>>>        
39571>>>>>>>>>        Property String psDummyZeroDate              '0001-01-01'
39572>>>>>>>>>        Property String psDummyZeroDateMssqlDatetime '1753-01-01'
39573>>>>>>>>>        
39573>>>>>>>>>    End_Procedure
39574>>>>>>>>>    
39574>>>>>>>>>    // Store basic information about the statement.
39574>>>>>>>>>    Procedure StoreStatementInfo Handle hCLIStatementHandle String sDrvrId Handle hCLIConnectionHandle
39576>>>>>>>>>        
39576>>>>>>>>>        Set phCLIStatementHandle   to hCLIStatementHandle
39577>>>>>>>>>        Set phCLIConnectionHandle  to hCLIConnectionHandle
39578>>>>>>>>>        Set psDriverID             to sDrvrId
39579>>>>>>>>>        
39579>>>>>>>>>    End_Procedure
39580>>>>>>>>>    
39580>>>>>>>>>    
39580>>>>>>>>>    // Destroy the cSQLStatement object
39580>>>>>>>>>    Procedure DestroySQLStatement
39582>>>>>>>>>        Send Destroy
39583>>>>>>>>>    End_Procedure
39584>>>>>>>>>    
39584>>>>>>>>>    // Handle an error that has occurred while checking properties.
39584>>>>>>>>>    Procedure HandleError Integer ihstmt Integer ihdbc String sDrvrId String sOriginMsg
39586>>>>>>>>>        Integer iErrHandle
39586>>>>>>>>>        Integer iErrNum
39586>>>>>>>>>        String  sLocationInfo
39586>>>>>>>>>        
39586>>>>>>>>>        // Get the DataFlex statement identifier
39586>>>>>>>>>        Move Self to iErrHandle
39587>>>>>>>>>        
39587>>>>>>>>>        // Determine error number
39587>>>>>>>>>        If (ihstmt = 0) ;            Move CLIERR_SQLINVALID_CLI_STMT_HANDLE to iErrNum
39590>>>>>>>>>        Else If (ihdbc = 0) ;            Move CLIERR_SQLINVALID_CLI_CONN_HANDLE to iErrNum
39594>>>>>>>>>        Else If (sDrvrId = "") ;            Move CLIERR_SQLINVALID_DRIVER_ID to iErrNum
39598>>>>>>>>>        Else ;            Move CLIERR_SQL_ERROR to iErrNum
39600>>>>>>>>>        
39600>>>>>>>>>        // Create location ifnormation
39600>>>>>>>>>        Move "[" to sLocationInfo
39601>>>>>>>>>        If (sOriginMsg <> "") Begin
39603>>>>>>>>>            Move (Append(sLocationInfo, sOriginMsg)) to sLocationInfo
39604>>>>>>>>>            Move (Append(sLocationInfo, ", "))       to sLocationInfo
39605>>>>>>>>>        End
39605>>>>>>>>>>
39605>>>>>>>>>        Move (Append(sLocationInfo, "DataFlex hstmt = ")) to sLocationInfo
39606>>>>>>>>>        Move (Append(sLocationInfo, iErrHandle))          to sLocationInfo
39607>>>>>>>>>        Move (Append(sLocationInfo, "]"))                 to sLocationInfo
39608>>>>>>>>>        
39608>>>>>>>>>        // Generate the error
39608>>>>>>>>>        Error iErrNum sLocationInfo
39609>>>>>>>>>>
39609>>>>>>>>>    End_Procedure
39610>>>>>>>>>    
39610>>>>>>>>>    // Handle general error not related to the properties
39610>>>>>>>>>    Procedure StmtError Integer iErrNum String sErrText String sOriginMsg
39612>>>>>>>>>        Integer iErrHandle
39612>>>>>>>>>        String  sLocationInfo
39612>>>>>>>>>        
39612>>>>>>>>>        // Get the DataFlex statement identifier
39612>>>>>>>>>        Move Self to iErrHandle
39613>>>>>>>>>        
39613>>>>>>>>>        // Create location information
39613>>>>>>>>>        Move "[" to sLocationInfo
39614>>>>>>>>>        If (sOriginMsg <> "") Begin
39616>>>>>>>>>            Move (Append(sLocationInfo, sOriginMsg)) to sLocationInfo
39617>>>>>>>>>            Move (Append(sLocationInfo, ", "))       to sLocationInfo
39618>>>>>>>>>        End
39618>>>>>>>>>>
39618>>>>>>>>>        If (sErrtext <> "") Begin
39620>>>>>>>>>            Move (Append(sLocationInfo, sErrtext)) to sLocationInfo
39621>>>>>>>>>            Move (Append(sLocationInfo, ", "))     to sLocationInfo
39622>>>>>>>>>        End
39622>>>>>>>>>>
39622>>>>>>>>>        Move (Append(sLocationInfo, "DataFlex hstmt = ")) to sLocationInfo
39623>>>>>>>>>        Move (Append(sLocationInfo, iErrHandle))          to sLocationInfo
39624>>>>>>>>>        Move (Append(sLocationInfo, "]"))                 to sLocationInfo
39625>>>>>>>>>        
39625>>>>>>>>>        // Generate the error
39625>>>>>>>>>        Error iErrNum sLocationInfo
39626>>>>>>>>>>
39626>>>>>>>>>    End_Procedure
39627>>>>>>>>>    
39627>>>>>>>>>    // Handle an illegal attribute error
39627>>>>>>>>>    Procedure SQLIllegalAttribute String sErrText String sOriginMsg
39629>>>>>>>>>        Integer bReport
39629>>>>>>>>>        
39629>>>>>>>>>        Get_Attribute DF_REPORT_UNSUPPORTED_ATTRIBUTES to bReport
39632>>>>>>>>>        If (bReport) ;            Send StmtError CLIERR_SQLINVALID_ATTRIBUTE sErrtext sOriginMsg
39635>>>>>>>>>    End_Procedure
39636>>>>>>>>>    
39636>>>>>>>>>    // Check if a column number is legal
39636>>>>>>>>>    Function SQLPrivateColumnIsLegal Integer ihdbc String sDrvrId Integer ihstmt Integer iCol Returns Integer
39638>>>>>>>>>        Integer bLegal
39638>>>>>>>>>        Integer iNumColumns
39638>>>>>>>>>        
39638>>>>>>>>>        Get SQLPrivateStmtAttribute SQLSTMTATTRIB_COLUMNCOUNT ihdbc sDrvrId ihstmt to iNumColumns
39639>>>>>>>>>        If (iCol > 0 and iCol <= iNumColumns) ;            Move DFTRUE to bLegal
39642>>>>>>>>>        Else ;            Move DFFALSE to bLegal
39644>>>>>>>>>        
39644>>>>>>>>>        Function_Return bLegal
39645>>>>>>>>>    End_Function
39646>>>>>>>>>    
39646>>>>>>>>>    
39646>>>>>>>>>    
39646>>>>>>>>>    // Close a statement and free all alllocated resources
39646>>>>>>>>>    Procedure SQLClose
39648>>>>>>>>>        Integer ihdbc
39648>>>>>>>>>        Integer ihstmt
39648>>>>>>>>>        Integer iVoid
39648>>>>>>>>>        String  sDrvrId
39648>>>>>>>>>        String  sEmpty
39648>>>>>>>>>        
39648>>>>>>>>>        // Initialize
39648>>>>>>>>>        Move "" to sEmpty
39649>>>>>>>>>        
39649>>>>>>>>>        // Get the cli handles
39649>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39650>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39651>>>>>>>>>        Get psDriverId            to sDrvrId
39652>>>>>>>>>        
39652>>>>>>>>>        // Free the CLI handle
39652>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39654>>>>>>>>>            // Call the driver function to close
39654>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCLOSE ;                Callback Self ;                Passing ihdbc sEmpty ihstmt ;                Result iVoid
39659>>>>>>>>>            
39659>>>>>>>>>            Move -1 to giLastSQLhstmt
39660>>>>>>>>>            // Free the DataFlex handle
39660>>>>>>>>>            Send DestroySQLStatement
39661>>>>>>>>>        End
39661>>>>>>>>>>
39661>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLClose"
39663>>>>>>>>>    End_Procedure
39664>>>>>>>>>    
39664>>>>>>>>>    // Prepare a statement for execution
39664>>>>>>>>>    Procedure SQLPrepare String sStatement
39666>>>>>>>>>        Integer ihdbc
39666>>>>>>>>>        Integer ihstmt
39666>>>>>>>>>        Integer iVoid
39666>>>>>>>>>        String  sDrvrId
39666>>>>>>>>>        
39666>>>>>>>>>        // Get the cli handles
39666>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39667>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39668>>>>>>>>>        Get psDriverId            to sDrvrId
39669>>>>>>>>>        
39669>>>>>>>>>        // Prepare
39669>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39671>>>>>>>>>            // Call the driver function to prepare
39671>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLPREPARE ;                Callback Self ;                Passing ihdbc sStatement ihstmt ;                Result iVoid
39676>>>>>>>>>            Set piLastArgument to 0
39677>>>>>>>>>
39677>>>>>>>>>        End
39677>>>>>>>>>>
39677>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLPrepare"
39679>>>>>>>>>    End_Procedure
39680>>>>>>>>>    
39680>>>>>>>>>    Procedure SQLGetStatementAttributes
39682>>>>>>>>>        Integer ihdbc ihstmt iNumColumns iCol iMaxSize
39682>>>>>>>>>        String sMaxValue
39682>>>>>>>>>        tSQLColumn[] aSQLColumns
39682>>>>>>>>>        tSQLColumn[] aSQLColumns
39683>>>>>>>>>        
39683>>>>>>>>>        Integer iSqlType
39683>>>>>>>>>        Integer iSQLSize
39683>>>>>>>>>        Integer iSQLprecision
39683>>>>>>>>>        Integer iVariableDataType
39683>>>>>>>>>        
39683>>>>>>>>>        String  sDrvrId
39683>>>>>>>>>        
39683>>>>>>>>>        Integer iHasVariableDataType
39683>>>>>>>>>        
39683>>>>>>>>>        Move 0 to iHasVariableDataType
39684>>>>>>>>>        
39684>>>>>>>>>        
39684>>>>>>>>>        // Get the cli handles
39684>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39685>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39686>>>>>>>>>        Get psDriverId            to sDrvrId
39687>>>>>>>>>        
39687>>>>>>>>>        Get SQLPrivateStmtAttribute SQLSTMTATTRIB_COLUMNCOUNT ihdbc sDrvrId ihstmt to iNumColumns
39688>>>>>>>>>        
39688>>>>>>>>>        Set piColumnCount to iNumColumns
39689>>>>>>>>>        
39689>>>>>>>>>        // Fill columns array
39689>>>>>>>>>        For iCol from 1 to iNumColumns
39695>>>>>>>>>>
39695>>>>>>>>>            Move 0 to iVariableDataType
39696>>>>>>>>>            
39696>>>>>>>>>            Get SQLPrivateColAttribute iCol SQLCOLATTRIB_SQLTYPE ihdbc sDrvrId ihstmt to iSQLType
39697>>>>>>>>>            Get SQLPrivateColAttribute iCol SQLCOLATTRIB_SIZE ihdbc sDrvrId ihstmt to iSQLSize
39698>>>>>>>>>            Get SQLPrivateColAttribute iCol SQLCOLATTRIB_PRECISION ihdbc sDrvrId ihstmt to iSQLPrecision
39699>>>>>>>>>            
39699>>>>>>>>>            If ( (iSQLType = SQL_LONGVARCHAR) or (iSQLType = SQL_WLONGVARCHAR) ) Begin
39701>>>>>>>>>                // text type
39701>>>>>>>>>                Move 1 to iVariableDataType
39702>>>>>>>>>            End
39702>>>>>>>>>>
39702>>>>>>>>>            Else Begin
39703>>>>>>>>>                If (sDrvrId = "MSSQLDRV") Begin
39705>>>>>>>>>                    // SQL Server varchar(max) and nvarchar(max) types return Size = 0
39705>>>>>>>>>                    If ( ((iSQLType = SQL_VARCHAR) and (iSQLSize = 0) ) or ;                        ((iSQLType = SQL_WVARCHAR) and (iSQLSize = 0) ) ) Begin
39707>>>>>>>>>                        
39707>>>>>>>>>                        Move 1 to iVariableDataType
39708>>>>>>>>>                    End
39708>>>>>>>>>>
39708>>>>>>>>>                End
39708>>>>>>>>>>
39708>>>>>>>>>            End
39708>>>>>>>>>>
39708>>>>>>>>>            
39708>>>>>>>>>            Move iSqlType           to aSQLColumns[iCol].iSQLType
39709>>>>>>>>>            Move iSQLSize           to aSQLColumns[iCol].iSQLSize
39710>>>>>>>>>            Move iSQLPrecision      to aSQLColumns[iCol].iSQLPrecision
39711>>>>>>>>>            Move iVariableDataType  to aSQLColumns[iCol].iVariableDataType
39712>>>>>>>>>            
39712>>>>>>>>>            If (not(iVariableDataType)) Begin
39714>>>>>>>>>                If (iSQLSize > iMaxSize) Begin
39716>>>>>>>>>                    Move iSQLSize to iMaxSize
39717>>>>>>>>>                End
39717>>>>>>>>>>
39717>>>>>>>>>            End
39717>>>>>>>>>>
39717>>>>>>>>>            Else Begin
39718>>>>>>>>>                Move 1 to iHasVariableDataType
39719>>>>>>>>>            End
39719>>>>>>>>>>
39719>>>>>>>>>            
39719>>>>>>>>>        Loop
39720>>>>>>>>>>
39720>>>>>>>>>        
39720>>>>>>>>>        Set paSQLColumns   to aSQLColumns
39721>>>>>>>>>        Set piHasVariableDataType to iHasVariableDataType
39722>>>>>>>>>        
39722>>>>>>>>>    End_Procedure
39723>>>>>>>>>    
39723>>>>>>>>>    // Execute a prepared statement
39723>>>>>>>>>    Procedure SQLExecute
39725>>>>>>>>>        Integer ihdbc
39725>>>>>>>>>        Integer ihstmt
39725>>>>>>>>>        Integer iVoid
39725>>>>>>>>>        String  sDrvrId
39725>>>>>>>>>        String  sEmpty
39725>>>>>>>>>        
39725>>>>>>>>>        // Initialize
39725>>>>>>>>>        Move "" to sEmpty
39726>>>>>>>>>        
39726>>>>>>>>>        // Get the cli handles
39726>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39727>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39728>>>>>>>>>        Get psDriverId            to sDrvrId
39729>>>>>>>>>        
39729>>>>>>>>>        // Execute
39729>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39731>>>>>>>>>            // Call the driver function to execute
39731>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLEXECUTE ;                Callback Self ;                Passing ihdbc sEmpty ihstmt ;                Result iVoid
39736>>>>>>>>>            Send SQLGetStatementAttributes
39737>>>>>>>>>            Set piLastArgument to 0
39738>>>>>>>>>        End
39738>>>>>>>>>>
39738>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLExecute"
39740>>>>>>>>>    End_Procedure
39741>>>>>>>>>    
39741>>>>>>>>>    
39741>>>>>>>>>    
39741>>>>>>>>>    // Prepare and execute a statement
39741>>>>>>>>>    Procedure SQLExecDirect String sStatement
39743>>>>>>>>>        Integer ihdbc
39743>>>>>>>>>        Integer ihstmt
39743>>>>>>>>>        Integer iVoid
39743>>>>>>>>>        String  sDrvrId
39743>>>>>>>>>        
39743>>>>>>>>>        // Get the cli handles
39743>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39744>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39745>>>>>>>>>        Get psDriverId            to sDrvrId
39746>>>>>>>>>        
39746>>>>>>>>>        // ExecDirect
39746>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39748>>>>>>>>>            // Call the driver function to execdirect
39748>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLEXECDIRECT ;                Callback Self ;                Passing ihdbc sStatement ihstmt ;                Result iVoid
39753>>>>>>>>>            Send SQLGetStatementAttributes
39754>>>>>>>>>        End
39754>>>>>>>>>>
39754>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLExecDirect"
39756>>>>>>>>>    End_Procedure
39757>>>>>>>>>    
39757>>>>>>>>>    // Fetch the next row
39757>>>>>>>>>    // Returns  : 0   = No more data
39757>>>>>>>>>    //<>0 = Success
39757>>>>>>>>>    Function SQLFetch Returns Integer
39759>>>>>>>>>        Integer ihdbc
39759>>>>>>>>>        Integer ihstmt
39759>>>>>>>>>        Integer iResult
39759>>>>>>>>>        String  sDrvrId
39759>>>>>>>>>        String  sEmpty
39759>>>>>>>>>        
39759>>>>>>>>>        // Initialize
39759>>>>>>>>>        Move "" to sEmpty
39760>>>>>>>>>        Move 0  to iResult
39761>>>>>>>>>        
39761>>>>>>>>>        // Get the cli handles
39761>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39762>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39763>>>>>>>>>        Get psDriverId            to sDrvrId
39764>>>>>>>>>        
39764>>>>>>>>>        // Fetch
39764>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39766>>>>>>>>>            Move False to Err
39767>>>>>>>>>            
39767>>>>>>>>>            // Call the driver function to fetch
39767>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLFETCH Callback Self Passing ihdbc sEmpty ihstmt Result iResult
39772>>>>>>>>>            
39772>>>>>>>>>            // If something went wrong, adjust the result
39772>>>>>>>>>            If (Err) ;                Move 0 to iResult
39775>>>>>>>>>            
39775>>>>>>>>>            Set piLastcolumn to 0
39776>>>>>>>>>        End
39776>>>>>>>>>>
39776>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLFetch"
39778>>>>>>>>>        
39778>>>>>>>>>        Function_Return iResult
39779>>>>>>>>>    End_Function
39780>>>>>>>>>    
39780>>>>>>>>>    // Fetch the next row and return an array with all column values
39780>>>>>>>>>    // Returns  : Array of strings with all column values
39780>>>>>>>>>    // Sets piFetchResult property
39780>>>>>>>>>    //   0    = No more data
39780>>>>>>>>>    //   <> 0 = Success
39780>>>>>>>>>    Function SQLFetchRowValues Returns String[]
39782>>>>>>>>>        
39782>>>>>>>>>        String[] asValues
39783>>>>>>>>>        
39783>>>>>>>>>        tSQLColumn[] aSQLColumns
39783>>>>>>>>>        tSQLColumn[] aSQLColumns
39784>>>>>>>>>        
39784>>>>>>>>>        Integer ihdbc
39784>>>>>>>>>        Integer ihstmt
39784>>>>>>>>>        Integer iResult iVoid
39784>>>>>>>>>        Integer iColCount iCol
39784>>>>>>>>>        String  sDrvrId
39784>>>>>>>>>        String  sEmpty
39784>>>>>>>>>        Longptr pResultWStr
39784>>>>>>>>>        WString wVariableResult
39784>>>>>>>>>        Integer iHasVariableDataType
39784>>>>>>>>>        Integer iLen
39784>>>>>>>>>        Integer iVariableBufferLength
39784>>>>>>>>>        
39784>>>>>>>>>        // Initialize
39784>>>>>>>>>        Move "" to sEmpty
39785>>>>>>>>>        Move 0  to iResult
39786>>>>>>>>>        
39786>>>>>>>>>        // Get the cli handles
39786>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39787>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39788>>>>>>>>>        Get psDriverId            to sDrvrId
39789>>>>>>>>>        
39789>>>>>>>>>        Get paSQLColumns to aSQLColumns
39790>>>>>>>>>        Get piColumnCount to iColCount
39791>>>>>>>>>        Get piHasVariableDataType to iHasVariableDataType
39792>>>>>>>>>        
39792>>>>>>>>>        If (iHasVariableDataType) Begin
39794>>>>>>>>>            
39794>>>>>>>>>            Get piVariableBufferLength      to iVariableBufferLength
39795>>>>>>>>>            Get piMaxVariableBufferLength   to iLen
39796>>>>>>>>>            
39796>>>>>>>>>            If (iLen > iVariableBufferLength) Begin
39798>>>>>>>>>                // Allocate
39798>>>>>>>>>                Move (Repeat(' ', iLen)) to wVariableResult
39799>>>>>>>>>                
39799>>>>>>>>>                Set piVariableBufferLength to iLen
39800>>>>>>>>>                Set psVariableBuffer       to wVariableResult
39801>>>>>>>>>                
39801>>>>>>>>>                Get piVariableBufferLength to iVariableBufferLength
39802>>>>>>>>>            End
39802>>>>>>>>>>
39802>>>>>>>>>        End
39802>>>>>>>>>>
39802>>>>>>>>>        
39802>>>>>>>>>        // Fetch
39802>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39804>>>>>>>>>            Move (False) to Err
39805>>>>>>>>>            
39805>>>>>>>>>            // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
39805>>>>>>>>>            // in the next FUNC_SQLCOLUMNVALUE call.
39805>>>>>>>>>            // If hdbc and hstmt have not changed since the last call we don't have to set it.
39805>>>>>>>>>            If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
39807>>>>>>>>>                // Setup function arguments
39807>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO Callback 0 Passing ihdbc iCol ihstmt Result iVoid
39812>>>>>>>>>                Move ihstmt to giLastSQLhstmt
39813>>>>>>>>>                Move ihdbc to giLastSQLhdbc
39814>>>>>>>>>            End
39814>>>>>>>>>>
39814>>>>>>>>>            
39814>>>>>>>>>            // Call the driver function to fetch
39814>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLFETCH Callback 0 Passing ihdbc sEmpty ihstmt Result iResult
39819>>>>>>>>>            
39819>>>>>>>>>            // If something went wrong, adjust the result
39819>>>>>>>>>            If (Err) ;                Move 0 to iResult
39822>>>>>>>>>            
39822>>>>>>>>>            If (iResult) Begin
39824>>>>>>>>>                For iCol from 1 to iColCount
39830>>>>>>>>>>
39830>>>>>>>>>                    
39830>>>>>>>>>                    If (not(aSQLColumns[iCol].iVariableDataType)) Begin
39832>>>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNVALUE ;                            Callback 0 ;                            Passing sEmpty sEmpty iCol ;                            Result pResultWStr
39837>>>>>>>>>                            
39837>>>>>>>>>                        If (pResultWStr) Begin
39839>>>>>>>>>                            Move (CString(PointerToWString(pResultWStr))) to asValues[iCol - 1]
39840>>>>>>>>>                        End
39840>>>>>>>>>>
39840>>>>>>>>>                        Else Begin
39841>>>>>>>>>                            Move "" to asValues[iCol - 1]
39842>>>>>>>>>                        End
39842>>>>>>>>>>
39842>>>>>>>>>                        
39842>>>>>>>>>                    End
39842>>>>>>>>>>
39842>>>>>>>>>                    Else Begin
39843>>>>>>>>>                        Get psVariableBuffer       to wVariableResult
39844>>>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLGETDATA ;                            Callback 0 ;                            Passing iCol iVariableBufferLength (AddressOf(wVariableResult));                            Result iVoid
39849>>>>>>>>>                        
39849>>>>>>>>>                        Move (CString(wVariableResult)) to asValues[iCol - 1]
39850>>>>>>>>>                    End
39850>>>>>>>>>>
39850>>>>>>>>>                    
39850>>>>>>>>>                Loop
39851>>>>>>>>>>
39851>>>>>>>>>            End
39851>>>>>>>>>>
39851>>>>>>>>>        End
39851>>>>>>>>>>
39851>>>>>>>>>        Else Begin
39852>>>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLFetchRowValues"
39853>>>>>>>>>        End
39853>>>>>>>>>>
39853>>>>>>>>>        
39853>>>>>>>>>        Set piFetchResult to iResult
39854>>>>>>>>>        
39854>>>>>>>>>        Function_Return asValues
39855>>>>>>>>>        
39855>>>>>>>>>    End_Function
39856>>>>>>>>>    
39856>>>>>>>>>    // Fetch a complete result set.
39856>>>>>>>>>    // Returns  : 2-dimensional array of strings with result set
39856>>>>>>>>>    // Sets piFetchResult property
39856>>>>>>>>>    //   0    = No more data
39856>>>>>>>>>    //   <> 0 = Success
39856>>>>>>>>>    Function SQLFetchResultsetValues Returns String[][]
39858>>>>>>>>>        
39858>>>>>>>>>        String[][] asValues
39859>>>>>>>>>        
39859>>>>>>>>>        Integer ihdbc ihstmt iResult iVoid iColCount iCol iRow
39859>>>>>>>>>        String sDrvrId sEmpty sMax
39859>>>>>>>>>        Longptr pResultWStr
39859>>>>>>>>>        WString wResult
39859>>>>>>>>>        
39859>>>>>>>>>        tSQLColumn[] aSQLColumns
39859>>>>>>>>>        tSQLColumn[] aSQLColumns
39860>>>>>>>>>        WString  wVariableResult
39860>>>>>>>>>        Integer iHasVariableDataType
39860>>>>>>>>>        Integer iLen
39860>>>>>>>>>        Integer iVariableBufferLength
39860>>>>>>>>>        
39860>>>>>>>>>        // Initialize
39860>>>>>>>>>        Move "" to sEmpty
39861>>>>>>>>>        Move 0  to iResult
39862>>>>>>>>>        
39862>>>>>>>>>        // Get the cli handles
39862>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39863>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39864>>>>>>>>>        Get psDriverId            to sDrvrId
39865>>>>>>>>>        
39865>>>>>>>>>        // Fetch
39865>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39867>>>>>>>>>            Move False to Err
39868>>>>>>>>>            
39868>>>>>>>>>            // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
39868>>>>>>>>>            // in the next FUNC_SQLCOLUMNVALUE call.
39868>>>>>>>>>            // If hdbc and hstmt have not changed since the last call we don't have to set it.
39868>>>>>>>>>            If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
39870>>>>>>>>>                // Setup function arguments
39870>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO Callback 0 Passing ihdbc iCol ihstmt Result iVoid
39875>>>>>>>>>                Move ihstmt to giLastSQLhstmt
39876>>>>>>>>>                Move ihdbc to giLastSQLhdbc
39877>>>>>>>>>            End
39877>>>>>>>>>>
39877>>>>>>>>>            
39877>>>>>>>>>            Get piColumnCount to iColCount
39878>>>>>>>>>            If (iColCount) Begin
39880>>>>>>>>>                Get paSQLColumns to aSQLColumns
39881>>>>>>>>>                Get piHasVariableDataType to iHasVariableDataType
39882>>>>>>>>>                If (iHasVariableDataType) Begin
39884>>>>>>>>>                    Get piVariableBufferLength      to iVariableBufferLength
39885>>>>>>>>>                    Get piMaxVariableBufferLength   to iLen
39886>>>>>>>>>                    If (iLen > iVariableBufferLength) Begin
39888>>>>>>>>>                        // Allocate
39888>>>>>>>>>                        Move (Repeat(' ', iLen)) to wVariableResult
39889>>>>>>>>>                        
39889>>>>>>>>>                        Set piVariableBufferLength to iLen
39890>>>>>>>>>                        Set psVariableBuffer       to wVariableResult
39891>>>>>>>>>                        
39891>>>>>>>>>                        Get piVariableBufferLength to iVariableBufferLength
39892>>>>>>>>>                    End
39892>>>>>>>>>>
39892>>>>>>>>>                    Else Begin
39893>>>>>>>>>                        Set psVariableBuffer       to wVariableResult
39894>>>>>>>>>                    End
39894>>>>>>>>>>
39894>>>>>>>>>                End
39894>>>>>>>>>>
39894>>>>>>>>>                
39894>>>>>>>>>                // Call the driver function to fetch
39894>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLFETCH Callback Self Passing ihdbc sEmpty ihstmt Result iResult
39899>>>>>>>>>                If (Err) ;                    Move 0 to iResult
39902>>>>>>>>>                
39902>>>>>>>>>                While (iResult <> 0)
39906>>>>>>>>>                    
39906>>>>>>>>>                    For iCol from 1 to (iColCount)
39912>>>>>>>>>>
39912>>>>>>>>>                        
39912>>>>>>>>>                        If (not(aSQLColumns[iCol].iVariableDataType)) Begin
39914>>>>>>>>>                            
39914>>>>>>>>>                            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNVALUE ;                                Callback 0 ;                                Passing sEmpty sEmpty iCol ;                                Result pResultWStr
39919>>>>>>>>>                            
39919>>>>>>>>>                            If (pResultWStr) Begin
39921>>>>>>>>>                                Move (CString(PointerToWString(pResultWStr))) to asValues[iRow][iCol - 1]
39922>>>>>>>>>                            End
39922>>>>>>>>>>
39922>>>>>>>>>                            Else Begin
39923>>>>>>>>>                                Move "" to asValues[iRow][iCol - 1]
39924>>>>>>>>>                            End
39924>>>>>>>>>>
39924>>>>>>>>>                        End
39924>>>>>>>>>>
39924>>>>>>>>>                        Else Begin
39925>>>>>>>>>                            //Variable data
39925>>>>>>>>>                            Move wVariableResult to wResult
39926>>>>>>>>>                            Call_Driver 0 sDrvrId Function FUNC_SQLGETDATA ;                                Callback 0 ;                                Passing iCol iVariableBufferLength (AddressOf(wResult)) ;                                Result iVoid
39931>>>>>>>>>                            
39931>>>>>>>>>                            Move (CString(wResult)) to asValues[iRow][iCol - 1]
39932>>>>>>>>>                        End
39932>>>>>>>>>>
39932>>>>>>>>>                    Loop
39933>>>>>>>>>>
39933>>>>>>>>>                    
39933>>>>>>>>>                    Increment iRow
39934>>>>>>>>>                    
39934>>>>>>>>>                    // Call the driver function to fetch
39934>>>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLFETCH Callback Self Passing ihdbc sEmpty ihstmt Result iResult
39939>>>>>>>>>                    If (Err) ;                        Move 0 to iResult
39942>>>>>>>>>                    
39942>>>>>>>>>                Loop
39943>>>>>>>>>>
39943>>>>>>>>>            End
39943>>>>>>>>>>
39943>>>>>>>>>        End
39943>>>>>>>>>>
39943>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLFetchResultsetValues"
39945>>>>>>>>>        
39945>>>>>>>>>        Set piFetchResult to iResult
39946>>>>>>>>>        
39946>>>>>>>>>        Function_Return asValues
39947>>>>>>>>>    End_Function
39948>>>>>>>>>    
39948>>>>>>>>>    // Get the next column
39948>>>>>>>>>    Function SQLNextColumn Returns String
39950>>>>>>>>>        Integer iCol
39950>>>>>>>>>        String  sResult
39950>>>>>>>>>        
39950>>>>>>>>>        Get piLastColumn to iCol
39951>>>>>>>>>        Increment iCol
39952>>>>>>>>>        Get SQLColumnValue iCol to sResult
39953>>>>>>>>>        Set piLastColumn to iCol
39954>>>>>>>>>        
39954>>>>>>>>>        Function_Return sResult
39955>>>>>>>>>    End_Function
39956>>>>>>>>>    
39956>>>>>>>>>    
39956>>>>>>>>>    // Returns the native type of a column
39956>>>>>>>>>    Function SQLColumnType Integer iCol Returns Integer
39958>>>>>>>>>        Integer ihdbc
39958>>>>>>>>>        Integer ihstmt
39958>>>>>>>>>        String  sDrvrId
39958>>>>>>>>>        Integer iSQLType
39958>>>>>>>>>        Integer iColumns
39958>>>>>>>>>        
39958>>>>>>>>>        tSQLColumn[] aSQLColumns
39958>>>>>>>>>        tSQLColumn[] aSQLColumns
39959>>>>>>>>>        
39959>>>>>>>>>        // Get the cli handles
39959>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39960>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39961>>>>>>>>>        Get psDriverId            to sDrvrId
39962>>>>>>>>>        
39962>>>>>>>>>        // Get the value
39962>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39964>>>>>>>>>            
39964>>>>>>>>>            Get paSQLColumns   to aSQLColumns
39965>>>>>>>>>            Move (SizeOfArray(aSQLColumns)) to iColumns
39966>>>>>>>>>            
39966>>>>>>>>>            If (iCol >= 1 and iCol <= iColumns) Begin
39968>>>>>>>>>                Move aSQLColumns[iCol].iSQLType to iSQLType
39969>>>>>>>>>            End
39969>>>>>>>>>>
39969>>>>>>>>>            Else Begin
39970>>>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLColumnType"
39971>>>>>>>>>            End
39971>>>>>>>>>>
39971>>>>>>>>>        End
39971>>>>>>>>>>
39971>>>>>>>>>        Else Begin
39972>>>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLColumnType"
39973>>>>>>>>>        End
39973>>>>>>>>>>
39973>>>>>>>>>        
39973>>>>>>>>>        Function_Return iSQLType
39974>>>>>>>>>    End_Function
39975>>>>>>>>>    
39975>>>>>>>>>    // Returns the size (max length) of a column
39975>>>>>>>>>    Function SQLColumnSize Integer iCol Returns Integer
39977>>>>>>>>>        Integer ihdbc
39977>>>>>>>>>        Integer ihstmt
39977>>>>>>>>>        String  sDrvrId
39977>>>>>>>>>        Integer iSQLSize
39977>>>>>>>>>        Integer iColumns
39977>>>>>>>>>        
39977>>>>>>>>>        tSQLColumn[] aSQLColumns
39977>>>>>>>>>        tSQLColumn[] aSQLColumns
39978>>>>>>>>>        
39978>>>>>>>>>        // Get the cli handles
39978>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39979>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39980>>>>>>>>>        Get psDriverId            to sDrvrId
39981>>>>>>>>>        
39981>>>>>>>>>        // Get the value
39981>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39983>>>>>>>>>            
39983>>>>>>>>>            Get paSQLColumns   to aSQLColumns
39984>>>>>>>>>            Move (SizeOfArray(aSQLColumns)) to iColumns
39985>>>>>>>>>            
39985>>>>>>>>>            If (iCol >= 1 and iCol <= iColumns) Begin
39987>>>>>>>>>                Move aSQLColumns[iCol].iSQLSize to iSQLSize
39988>>>>>>>>>            End
39988>>>>>>>>>>
39988>>>>>>>>>            Else Begin
39989>>>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLColumnSize"
39990>>>>>>>>>            End
39990>>>>>>>>>>
39990>>>>>>>>>        End
39990>>>>>>>>>>
39990>>>>>>>>>        Else Begin
39991>>>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLColumnSize"
39992>>>>>>>>>        End
39992>>>>>>>>>>
39992>>>>>>>>>        
39992>>>>>>>>>        Function_Return iSQLSize
39993>>>>>>>>>    End_Function
39994>>>>>>>>>    
39994>>>>>>>>>    //  Returns 1 for variable length datatypes.
39994>>>>>>>>>    //  For example SQL Server varchar(max) or text type
39994>>>>>>>>>    //  The data of variable length datatype columns should be retrieved with SQLGetData
39994>>>>>>>>>    Function SQLColumnVariableDatatype Integer iCol Returns Integer
39996>>>>>>>>>        Integer ihdbc
39996>>>>>>>>>        Integer ihstmt
39996>>>>>>>>>        String  sDrvrId
39996>>>>>>>>>        Integer iVariableDataType
39996>>>>>>>>>        Integer iColumns
39996>>>>>>>>>        
39996>>>>>>>>>        tSQLColumn[] aSQLColumns
39996>>>>>>>>>        tSQLColumn[] aSQLColumns
39997>>>>>>>>>        
39997>>>>>>>>>        // Get the cli handles
39997>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39998>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39999>>>>>>>>>        Get psDriverId            to sDrvrId
40000>>>>>>>>>        
40000>>>>>>>>>        // Get the value
40000>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40002>>>>>>>>>            
40002>>>>>>>>>            Get paSQLColumns   to aSQLColumns
40003>>>>>>>>>            Move (SizeOfArray(aSQLColumns)) to iColumns
40004>>>>>>>>>            
40004>>>>>>>>>            If (iCol >= 1 and iCol <= iColumns) Begin
40006>>>>>>>>>                Move aSQLColumns[iCol].iVariableDataType to iVariableDataType
40007>>>>>>>>>            End
40007>>>>>>>>>>
40007>>>>>>>>>            Else Begin
40008>>>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLColumnVariableDatatype"
40009>>>>>>>>>            End
40009>>>>>>>>>>
40009>>>>>>>>>        End
40009>>>>>>>>>>
40009>>>>>>>>>        Else Begin
40010>>>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLColumnVariableDatatype"
40011>>>>>>>>>        End
40011>>>>>>>>>>
40011>>>>>>>>>        
40011>>>>>>>>>        Function_Return iVariableDataType
40012>>>>>>>>>    End_Function
40013>>>>>>>>>    
40013>>>>>>>>>    
40013>>>>>>>>>    // Return the value of a column in a fetched row of a given
40013>>>>>>>>>    // statement.
40013>>>>>>>>>    Function SQLColumnValue Integer iCol Returns String
40015>>>>>>>>>        Integer ihdbc
40015>>>>>>>>>        Integer ihstmt
40015>>>>>>>>>        String  sDrvrId sResult
40015>>>>>>>>>        Longptr pResultWStr
40015>>>>>>>>>        
40015>>>>>>>>>        Integer iVoid
40015>>>>>>>>>        Integer iColSize
40015>>>>>>>>>        Integer iColPrecision
40015>>>>>>>>>        String  sEmpty
40015>>>>>>>>>        Integer bLegalColumn
40015>>>>>>>>>        
40015>>>>>>>>>        // Initialize
40015>>>>>>>>>        Move "" to sResult
40016>>>>>>>>>        
40016>>>>>>>>>        // Get the cli handles
40016>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40017>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40018>>>>>>>>>        Get psDriverId            to sDrvrId
40019>>>>>>>>>        
40019>>>>>>>>>        // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
40019>>>>>>>>>        // in the next FUNC_SQLCOLUMNVALUE call.
40019>>>>>>>>>        // If hdbc and hstmt have not changed since the last call we don't have to set it.
40019>>>>>>>>>        If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
40021>>>>>>>>>            // Setup function arguments
40021>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback 0 ;                Passing ihdbc iCol ihstmt ;                Result iVoid
40026>>>>>>>>>            Move ihstmt to giLastSQLhstmt
40027>>>>>>>>>            Move ihdbc to giLastSQLhdbc
40028>>>>>>>>>        End
40028>>>>>>>>>>
40028>>>>>>>>>        
40028>>>>>>>>>        If (iCol >= 1 and iCol <= piColumnCount(Self)) Begin
40030>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNVALUE ;                Callback 0 ;                Passing sResult sEmpty iCol ;                Result pResultWStr
40035>>>>>>>>>            
40035>>>>>>>>>            If (pResultWStr) Begin
40037>>>>>>>>>                Move (PointerToWString(pResultWStr)) to sResult
40038>>>>>>>>>            End
40038>>>>>>>>>>
40038>>>>>>>>>            Else Begin
40039>>>>>>>>>                Move "" to sResult
40040>>>>>>>>>            End
40040>>>>>>>>>>
40040>>>>>>>>>        End
40040>>>>>>>>>>
40040>>>>>>>>>        Else Begin
40041>>>>>>>>>            Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLColumnValue"
40042>>>>>>>>>        End
40042>>>>>>>>>>
40042>>>>>>>>>        
40042>>>>>>>>>        Function_Return sResult
40043>>>>>>>>>        
40043>>>>>>>>>    End_Function
40044>>>>>>>>>    
40044>>>>>>>>>    // Add a file to the files used to place the statement result in.
40044>>>>>>>>>    Procedure SQLBindFile Integer iFileNum
40046>>>>>>>>>        Integer ihdbc
40046>>>>>>>>>        Integer ihstmt
40046>>>>>>>>>        Integer iVoid
40046>>>>>>>>>        String  sDrvrId
40046>>>>>>>>>        String  sFileType
40046>>>>>>>>>        Integer bIsOpen
40046>>>>>>>>>        
40046>>>>>>>>>        // Get the cli handles
40046>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40047>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40048>>>>>>>>>        Get psDriverId            to sDrvrId
40049>>>>>>>>>        
40049>>>>>>>>>        // If a file number is not passed see if we can use the statement's
40049>>>>>>>>>        // default file number which is usually set with SetFileConnection
40049>>>>>>>>>        If (iFileNum = 0) Begin
40051>>>>>>>>>            Get piBindFile to iFileNum
40052>>>>>>>>>            If (iFileNum = 0) Begin
40054>>>>>>>>>                // Logic error, if 0 is passed as filenumber, piBindFile should be set.
40054>>>>>>>>>                Send StmtError CLIERR_SQLINVALID_BIND_FILE "piBindFile should be set" "SQLBindFile"
40055>>>>>>>>>                
40055>>>>>>>>>                Move 0 to SQLResult
40056>>>>>>>>>                Procedure_Return
40057>>>>>>>>>            End
40057>>>>>>>>>>
40057>>>>>>>>>        End
40057>>>>>>>>>>
40057>>>>>>>>>        
40057>>>>>>>>>        // Bind the file
40057>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40059>>>>>>>>>            // Chek if the file is open
40059>>>>>>>>>            Get_Attribute DF_FILE_OPENED of iFileNum to bIsOpen
40062>>>>>>>>>            If (bIsOpen) Begin
40064>>>>>>>>>                // Check if the file has the correct type
40064>>>>>>>>>                Get_Attribute DF_FILE_DRIVER of iFileNum to sFileType
40067>>>>>>>>>                If (sFileType = sDrvrId) Begin
40069>>>>>>>>>                    // Call the driver function to add a file to a statement
40069>>>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLBINDFILE ;                        Callback Self ;                        Passing ihdbc iFileNum ihstmt ;                        Result iVoid
40074>>>>>>>>>                End
40074>>>>>>>>>>
40074>>>>>>>>>                Else ;                    Send StmtError CLIERR_SQLINVALID_BIND_FILE ("File" * String(iFileNum) * "type incompatible with statement ("  + sFileType + ")") "SQLBindFile"
40076>>>>>>>>>            End
40076>>>>>>>>>>
40076>>>>>>>>>            Else ;                Send StmtError CLIERR_SQLINVALID_BIND_FILE ("File not open (number =" * String(iFileNum) + ")") "SQLBindFile"
40078>>>>>>>>>        End
40078>>>>>>>>>>
40078>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLBindFile"
40080>>>>>>>>>    End_Procedure
40081>>>>>>>>>    
40081>>>>>>>>>    
40081>>>>>>>>>    
40081>>>>>>>>>    // Get data of a column.                                  
40081>>>>>>>>>    Function SQLGetData Integer iCol Integer iLen Returns String
40083>>>>>>>>>        Integer ihdbc
40083>>>>>>>>>        Integer ihstmt
40083>>>>>>>>>        Integer iVoid
40083>>>>>>>>>        Integer iColSize
40083>>>>>>>>>        Integer iResult
40083>>>>>>>>>        String  sDrvrId
40083>>>>>>>>>        WString wResult
40083>>>>>>>>>        String  sEmpty
40083>>>>>>>>>        Integer bLegalColumn
40083>>>>>>>>>        
40083>>>>>>>>>        Integer iVariableBufferLength
40083>>>>>>>>>        
40083>>>>>>>>>        // Initialize
40083>>>>>>>>>        Move "" to sEmpty
40084>>>>>>>>>        Move 0 to iResult
40085>>>>>>>>>        
40085>>>>>>>>>        // Get the cli handles
40085>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40086>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40087>>>>>>>>>        Get psDriverId            to sDrvrId
40088>>>>>>>>>        
40088>>>>>>>>>        // Get the data
40088>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40090>>>>>>>>>            // Check if the column exists
40090>>>>>>>>>            If (iCol >= 1 and iCol <= piColumnCount(Self)) Begin
40092>>>>>>>>>                If (iLen = 0) Begin
40094>>>>>>>>>                    Get SQLColumnValue iCol to wResult
40095>>>>>>>>>                End
40095>>>>>>>>>>
40095>>>>>>>>>                Else Begin
40096>>>>>>>>>                    // Add 1 for string terminator
40096>>>>>>>>>                    Move (iLen + 1) to iLen
40097>>>>>>>>>                    
40097>>>>>>>>>                    Get piVariableBufferLength to iVariableBufferLength
40098>>>>>>>>>                    If (iLen > iVariableBufferLength) Begin
40100>>>>>>>>>                        // Allocate
40100>>>>>>>>>                        Move (Repeat(' ', iLen)) to wResult
40101>>>>>>>>>                        
40101>>>>>>>>>                        Set piVariableBufferLength to iLen
40102>>>>>>>>>                        Set psVariableBuffer       to wResult
40103>>>>>>>>>                    End
40103>>>>>>>>>>
40103>>>>>>>>>                    Else Begin
40104>>>>>>>>>                        Get psVariableBuffer       to wResult
40105>>>>>>>>>                    End
40105>>>>>>>>>>
40105>>>>>>>>>                    
40105>>>>>>>>>                    
40105>>>>>>>>>                    // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
40105>>>>>>>>>                    // in the next FUNC_SQLCOLUMNVALUE call.
40105>>>>>>>>>                    // If hdbc and hstmt have not changed since the last call we don't have to set it.
40105>>>>>>>>>                    If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
40107>>>>>>>>>                        // Setup function arguments
40107>>>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                            Callback 0 ;                            Passing ihdbc iCol ihstmt ;                            Result iVoid
40112>>>>>>>>>                        Move ihstmt to giLastSQLhstmt
40113>>>>>>>>>                        Move ihdbc to giLastSQLhdbc
40114>>>>>>>>>                    End
40114>>>>>>>>>>
40114>>>>>>>>>                    
40114>>>>>>>>>                    Move False to Err
40115>>>>>>>>>                    // Call the driver function to get the data
40115>>>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLGETDATA ;                        Callback Self ;                        Passing iCol iLen (AddressOf(wResult)) ;                        Result iResult
40120>>>>>>>>>                    
40120>>>>>>>>>                    // If something went wrong, adjust the result
40120>>>>>>>>>                    If (Err) Begin
40122>>>>>>>>>                        Move 0 to iResult
40123>>>>>>>>>                    End
40123>>>>>>>>>>
40123>>>>>>>>>                    
40123>>>>>>>>>                    // SQL_NO_TOTAL (-4) Not all data retrieved. Unknown how much is left. 
40123>>>>>>>>>                    If (iResult = -4) Begin
40125>>>>>>>>>                        Move (SizeOfWString(wResult)) to iResult
40126>>>>>>>>>                    End
40126>>>>>>>>>>
40126>>>>>>>>>                End
40126>>>>>>>>>>
40126>>>>>>>>>            End
40126>>>>>>>>>>
40126>>>>>>>>>            Else Begin
40127>>>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLGetData"
40128>>>>>>>>>            End
40128>>>>>>>>>>
40128>>>>>>>>>        End
40128>>>>>>>>>>
40128>>>>>>>>>        Else Begin
40129>>>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLGetData"
40130>>>>>>>>>        End
40130>>>>>>>>>>
40130>>>>>>>>>        
40130>>>>>>>>>        // Fill global result
40130>>>>>>>>>        If (iResult > 0) Begin
40132>>>>>>>>>            Move 1 to SQLResult // SQLResult == 1 : Something was found
40133>>>>>>>>>        End
40133>>>>>>>>>>
40133>>>>>>>>>        Else Begin
40134>>>>>>>>>           Move 0 to SQLResult // SQLResult == 0 : no (more) data found
40135>>>>>>>>>        End
40135>>>>>>>>>>
40135>>>>>>>>>        
40135>>>>>>>>>        Function_Return (CString(wResult))
40136>>>>>>>>>    End_Function
40137>>>>>>>>>
40137>>>>>>>>>    // SQLGetDataToUChar (SQLGetData returning uchar array)
40137>>>>>>>>>    // Use for binary data and for character data containing Unicode non-bmp characters
40137>>>>>>>>>    Function SQLGetDataToUChar Integer iCol Integer iLen Returns UChar[]
40139>>>>>>>>>        Integer ihdbc
40139>>>>>>>>>        Integer ihstmt
40139>>>>>>>>>        Integer iVoid
40139>>>>>>>>>        Integer iColSize
40139>>>>>>>>>        Integer iResult
40139>>>>>>>>>        String  sDrvrId
40139>>>>>>>>>        UChar[] uaResult
40140>>>>>>>>>        
40140>>>>>>>>>        Integer iSQLType
40140>>>>>>>>>        Integer iBinaryType
40140>>>>>>>>>        Integer iLenArray
40140>>>>>>>>>        Integer iResizeSize
40140>>>>>>>>>        
40140>>>>>>>>>        Move 0 to iResult
40141>>>>>>>>>        
40141>>>>>>>>>        // Get the cli handles
40141>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40142>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40143>>>>>>>>>        Get psDriverId            to sDrvrId
40144>>>>>>>>>        
40144>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40146>>>>>>>>>            // Check if the column exists
40146>>>>>>>>>            If (iCol >= 1 and iCol <= piColumnCount(Self)) Begin
40148>>>>>>>>>                            
40148>>>>>>>>>                Get SQLColumnType iCol to iSQLType
40149>>>>>>>>>                If ( (iSQLType = SQL_BINARY) or (iSQLType = SQL_VARBINARY) or (iSQLType = SQL_LONGVARBINARY) ) Begin
40151>>>>>>>>>                    Move 1 to iBinaryType
40152>>>>>>>>>                End
40152>>>>>>>>>>
40152>>>>>>>>>                Else Begin
40153>>>>>>>>>                    Move 0 to iBinaryType 
40154>>>>>>>>>                End
40154>>>>>>>>>>
40154>>>>>>>>>    
40154>>>>>>>>>                If (iBinaryType) Begin
40156>>>>>>>>>                    Move (ResizeArray(uaResult,iLen)) to uaResult
40157>>>>>>>>>                End
40157>>>>>>>>>>
40157>>>>>>>>>                Else Begin
40158>>>>>>>>>                    // Character type
40158>>>>>>>>>                    // returned as wstring (2 bytes per character)
40158>>>>>>>>>                    // Add 1 for string terminator
40158>>>>>>>>>                    Move (iLen + 1) to iLen
40159>>>>>>>>>                    Move (iLen * 2) to iLenArray // wstring 2 bytes per char
40160>>>>>>>>>                    Move (ResizeArray(uaResult,iLenArray)) to uaResult
40161>>>>>>>>>                End
40161>>>>>>>>>>
40161>>>>>>>>>
40161>>>>>>>>>                // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
40161>>>>>>>>>                // in the next FUNC_SQLCOLUMNVALUE call.
40161>>>>>>>>>                If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
40163>>>>>>>>>                    // Setup function arguments
40163>>>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                        Callback 0 ;                        Passing ihdbc iCol ihstmt ;                        Result iVoid
40168>>>>>>>>>                    Move ihstmt to giLastSQLhstmt
40169>>>>>>>>>                    Move ihdbc to giLastSQLhdbc
40170>>>>>>>>>                End
40170>>>>>>>>>>
40170>>>>>>>>>                
40170>>>>>>>>>                Move False to Err
40171>>>>>>>>>                
40171>>>>>>>>>                // Call the driver function to get the data
40171>>>>>>>>>                // iResult will be the length of the data in bytes 
40171>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLGETDATA ;                    Callback Self ;                    Passing iCol iLen (AddressOf(uaResult[0])) ;                    Result iResult
40176>>>>>>>>>                
40176>>>>>>>>>                // If something went wrong, adjust the result
40176>>>>>>>>>                If (Err) Begin
40178>>>>>>>>>                    Move 0 to iResult
40179>>>>>>>>>                End
40179>>>>>>>>>>
40179>>>>>>>>>                
40179>>>>>>>>>                // SQL_NO_TOTAL (-4) Not all data retrieved. Unknown how much is left. 
40179>>>>>>>>>                If (iResult = -4) Begin
40181>>>>>>>>>                    Move (SizeOfArray(uaResult)) to iResult
40182>>>>>>>>>                End
40182>>>>>>>>>>
40182>>>>>>>>>                
40182>>>>>>>>>                If (iBinaryType) Begin
40184>>>>>>>>>                    If (iResult < iLen) Begin
40186>>>>>>>>>                        Move (ResizeArray(uaResult,iResult)) to uaResult
40187>>>>>>>>>                    End
40187>>>>>>>>>>
40187>>>>>>>>>                End
40187>>>>>>>>>>
40187>>>>>>>>>                Else Begin
40188>>>>>>>>>                    // Character data
40188>>>>>>>>>                    //   iResult has length of data in bytes (without zero terminator)
40188>>>>>>>>>                    //   uaResult will have data + zero terminator
40188>>>>>>>>>                    If (iResult < (iLenArray - 2) ) Begin
40190>>>>>>>>>                        // Received less than requested, strip off trailing zeroes.
40190>>>>>>>>>                        Move iResult to iResizeSize
40191>>>>>>>>>                    End
40191>>>>>>>>>>
40191>>>>>>>>>                    Else Begin
40192>>>>>>>>>                        // Strip off zero terminator
40192>>>>>>>>>                        Move (iLenArray - 2) to iResizeSize
40193>>>>>>>>>                    End
40193>>>>>>>>>>
40193>>>>>>>>>                    
40193>>>>>>>>>                    Move (ResizeArray(uaResult,iResizeSize)) to uaResult
40194>>>>>>>>>                    
40194>>>>>>>>>                End
40194>>>>>>>>>>
40194>>>>>>>>>            End
40194>>>>>>>>>>
40194>>>>>>>>>            Else Begin
40195>>>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLGetData"
40196>>>>>>>>>            End
40196>>>>>>>>>>
40196>>>>>>>>>        End
40196>>>>>>>>>>
40196>>>>>>>>>        Else Begin
40197>>>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLGetData"
40198>>>>>>>>>        End
40198>>>>>>>>>>
40198>>>>>>>>>        
40198>>>>>>>>>        // Fill global result
40198>>>>>>>>>        If (iResult > 0) Begin
40200>>>>>>>>>            Move 1 to SQLResult // SQLResult == 1 : Something was found
40201>>>>>>>>>        End
40201>>>>>>>>>>
40201>>>>>>>>>        Else Begin
40202>>>>>>>>>           Move 0 to SQLResult // SQLResult == 0 : no (more) data found
40203>>>>>>>>>        End
40203>>>>>>>>>>
40203>>>>>>>>>        
40203>>>>>>>>>        Function_Return uaResult
40204>>>>>>>>>
40204>>>>>>>>>    End_Function
40205>>>>>>>>>    
40205>>>>>>>>>    
40205>>>>>>>>>    // Map a column name to a number, if the name id not found no
40205>>>>>>>>>    // error is generated the returned number will be 0 (zero) in
40205>>>>>>>>>    // that case
40205>>>>>>>>>    Function SQLColumnMap String sColname Returns Integer
40207>>>>>>>>>        Integer ihdbc
40207>>>>>>>>>        Integer ihstmt
40207>>>>>>>>>        Integer iNumColumns
40207>>>>>>>>>        Integer iColCount
40207>>>>>>>>>        Integer iColNum
40207>>>>>>>>>        String  sDrvrId
40207>>>>>>>>>        String  sCurColName
40207>>>>>>>>>        
40207>>>>>>>>>        // Get the cli handles
40207>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40208>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40209>>>>>>>>>        Get psDriverId            to sDrvrId
40210>>>>>>>>>        
40210>>>>>>>>>        // Get the number by looping through the column names
40210>>>>>>>>>        Move 0 to iColNum
40211>>>>>>>>>        Get SQLPrivateStmtAttribute SQLSTMTATTRIB_COLUMNCOUNT ihdbc sDrvrId ihstmt to iNumColumns
40212>>>>>>>>>        For iColCount from 1 to iNumColumns
40218>>>>>>>>>>
40218>>>>>>>>>            Get SQLPrivateColAttribute iColCount SQLCOLATTRIB_LABEL ihdbc sDrvrId ihstmt to sCurColName
40219>>>>>>>>>            If (Uppercase(Trim(sColName)) = Uppercase(Trim(sCurColName))) ;                Move iColCount to iColNum
40222>>>>>>>>>            
40222>>>>>>>>>            If (iColNum) ;                Break
40225>>>>>>>>>        Loop
40226>>>>>>>>>>
40226>>>>>>>>>        
40226>>>>>>>>>        Function_Return iColNum
40227>>>>>>>>>    End_Function
40228>>>>>>>>>    
40228>>>>>>>>>    
40228>>>>>>>>>    // SQLStmtAttribute
40228>>>>>>>>>    // Moved to SQLGetStatementAttribute. 
40228>>>>>>>>>    // This function is still here for backward compatibility.
40228>>>>>>>>>
40228>>>>>>>>>    Function SQLStmtAttribute Integer iAttribId Returns String
40230>>>>>>>>>        String  sResult
40230>>>>>>>>>
40230>>>>>>>>>        Get SQLGetStmtAttribute iAttribId to sResult        
40231>>>>>>>>>        
40231>>>>>>>>>        Function_Return sResult
40232>>>>>>>>>    End_Function
40233>>>>>>>>>
40233>>>>>>>>> 
40233>>>>>>>>>   Function SQLGetStmtAttribute Integer iAttribId Returns String
40235>>>>>>>>>        Integer ihdbc
40235>>>>>>>>>        Integer ihstmt
40235>>>>>>>>>        String  sResult
40235>>>>>>>>>        String  sDrvrId
40235>>>>>>>>>        
40235>>>>>>>>>        // Initialize
40235>>>>>>>>>        Move "" to sResult
40236>>>>>>>>>        
40236>>>>>>>>>        // Get the cli handles
40236>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40237>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40238>>>>>>>>>        Get psDriverId            to sDrvrId
40239>>>>>>>>>        
40239>>>>>>>>>        // Get the attribute
40239>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") ;            Get SQLPrivateStmtAttribute iAttribId ihdbc sDrvrId ihstmt to sResult
40242>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLGetStmtAttribute"
40244>>>>>>>>>        
40244>>>>>>>>>        Function_Return sResult
40245>>>>>>>>>    End_Function
40246>>>>>>>>>
40246>>>>>>>>>    
40246>>>>>>>>>    Procedure SQLSetStmtAttribute Integer iAttribId String sAttribValue 
40248>>>>>>>>>
40248>>>>>>>>>        Integer ihdbc
40248>>>>>>>>>        Integer ihstmt
40248>>>>>>>>>        String  sDrvrId
40248>>>>>>>>>        
40248>>>>>>>>>        Integer iLen
40248>>>>>>>>>        Integer bLegalAttrib
40248>>>>>>>>>        Integer iVoid
40248>>>>>>>>>        Integer iAttribValue
40248>>>>>>>>>
40248>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40249>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40250>>>>>>>>>        Get psDriverId            to sDrvrId
40251>>>>>>>>>        
40251>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40253>>>>>>>>>            Case Begin
40253>>>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_CURSOR_TYPE)
40255>>>>>>>>>                    Move DFTRUE to bLegalAttrib
40256>>>>>>>>>                    Break
40257>>>>>>>>>                    
40257>>>>>>>>>                Case Else
40257>>>>>>>>>                    Move DFFALSE to bLegalAttrib
40258>>>>>>>>>                    Send SQLIllegalAttribute ("Attribute is = " + String(iAttribId) + ")") "SQLSetStmtAttribute"
40259>>>>>>>>>            Case End
40259>>>>>>>>>
40259>>>>>>>>>            If (bLegalAttrib) Begin
40261>>>>>>>>>                If (iAttribId = SQLSTMTATTRIB_CURSOR_TYPE) Begin
40263>>>>>>>>>                    
40263>>>>>>>>>                    Move sAttribValue to iAttribValue // Check numeric?
40264>>>>>>>>>                    Case Begin
40264>>>>>>>>>                        Case (iAttribValue = SQL_CURSOR_FORWARD_ONLY)
40266>>>>>>>>>                        Case (iAttribValue = SQL_CURSOR_DYNAMIC)
40269>>>>>>>>>                        Case (iAttribValue = SQL_CURSOR_KEYSET_DRIVEN)
40272>>>>>>>>>                        Case (iAttribValue = SQL_CURSOR_STATIC)
40275>>>>>>>>>                            Break
40276>>>>>>>>>                            
40276>>>>>>>>>                        Case Else
40276>>>>>>>>>                            Move DFFALSE to bLegalAttrib
40277>>>>>>>>>                            Send StmtError CLIERR_SQLINVALID_ATTRIBUTE (SFormat("Invalid value for SQLSTMTATTRIB_CURSOR_TYPE: %1", iAttribValue)) "SQLSetStmtAttribute"
40278>>>>>>>>>
40278>>>>>>>>>                    Case End
40278>>>>>>>>>                End
40278>>>>>>>>>>
40278>>>>>>>>>            End
40278>>>>>>>>>>
40278>>>>>>>>>
40278>>>>>>>>>            
40278>>>>>>>>>            If (bLegalAttrib) Begin
40280>>>>>>>>>                
40280>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                    Callback Self ;                    Passing ihdbc iVoid ihstmt ;                    Result iVoid
40285>>>>>>>>>                
40285>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLSETSTMTINTATTRIB ;                    Callback Self ;                    Passing iAttribId iAttribValue 0 ;                    Result iVoid
40290>>>>>>>>>            End
40290>>>>>>>>>>
40290>>>>>>>>>        End
40290>>>>>>>>>>
40290>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLPrivateStmtAttribute"
40292>>>>>>>>>        
40292>>>>>>>>>        
40292>>>>>>>>>        
40292>>>>>>>>>    End_Procedure
40293>>>>>>>>>    
40293>>>>>>>>>    
40293>>>>>>>>>    
40293>>>>>>>>>    Function SQLPrivateStmtAttribute Integer iAttribId Integer ihdbc String sDrvrId Integer ihstmt Returns String
40295>>>>>>>>>        String  sResult
40295>>>>>>>>>        Integer iLen
40295>>>>>>>>>        Integer bLegalAttrib
40295>>>>>>>>>        
40295>>>>>>>>>        // Initialize
40295>>>>>>>>>        Move ""     to sResult
40296>>>>>>>>>        
40296>>>>>>>>>        // Get the attribute
40296>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40298>>>>>>>>>            Case Begin
40298>>>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_COLUMNCOUNT)
40300>>>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_ROWCOUNT)
40303>>>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_ROWCOUNT_TYPE)
40306>>>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_NUMMESSAGES)
40309>>>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_CURSOR_TYPE)
40312>>>>>>>>>                    Move DFTRUE to bLegalAttrib
40313>>>>>>>>>                    Break
40314>>>>>>>>>                    
40314>>>>>>>>>                Case Else
40314>>>>>>>>>                    Move DFFALSE to bLegalAttrib
40315>>>>>>>>>                    Send SQLIllegalAttribute ("Attribute is = " + String(iAttribId) + ")") "SQLPrivateStmtAttribute"
40316>>>>>>>>>            Case End
40316>>>>>>>>>            
40316>>>>>>>>>            If (bLegalAttrib) Begin
40318>>>>>>>>>                // Setup function arguments
40318>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLSTMTINTATTRIB ;                    Callback Self ;                    Passing ihdbc iAttribId ihstmt ;                    Result sResult
40323>>>>>>>>>            End
40323>>>>>>>>>>
40323>>>>>>>>>        End
40323>>>>>>>>>>
40323>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLPrivateStmtAttribute"
40325>>>>>>>>>        
40325>>>>>>>>>        Function_Return sResult
40326>>>>>>>>>    End_Function
40327>>>>>>>>>    
40327>>>>>>>>>    
40327>>>>>>>>>    
40327>>>>>>>>>    // Get a column's attribute
40327>>>>>>>>>    Function SQLColAttribute Integer iCol Integer iAttribId Returns String
40329>>>>>>>>>        Integer ihdbc
40329>>>>>>>>>        Integer ihstmt
40329>>>>>>>>>        String  sResult
40329>>>>>>>>>        String  sDrvrId
40329>>>>>>>>>        
40329>>>>>>>>>        // Initialize
40329>>>>>>>>>        Move "" to sResult
40330>>>>>>>>>        
40330>>>>>>>>>        // Get the cli handles
40330>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40331>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40332>>>>>>>>>        Get psDriverId            to sDrvrId
40333>>>>>>>>>        
40333>>>>>>>>>        // Get the attribute
40333>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") ;            Get SQLPrivateColAttribute iCol iAttribId ihdbc sDrvrId ihstmt to sResult
40336>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLColAttribute"
40338>>>>>>>>>        
40338>>>>>>>>>        Function_Return sResult
40339>>>>>>>>>    End_Function
40340>>>>>>>>>    
40340>>>>>>>>>    Function SQLPrivateColAttribute Integer iCol Integer iAttribId Integer ihdbc String sDrvrId Integer ihstmt Returns String
40342>>>>>>>>>        String  sResult
40342>>>>>>>>>        String  sEmpty
40342>>>>>>>>>        Integer bIsStringAttribute
40342>>>>>>>>>        Integer iLen
40342>>>>>>>>>        Integer iVoid
40342>>>>>>>>>        Integer bLegalAttrib
40342>>>>>>>>>        Integer bLegalColumn
40342>>>>>>>>>        
40342>>>>>>>>>        // Initialize
40342>>>>>>>>>        Move "" to sResult
40343>>>>>>>>>        Move "" to sEmpty
40344>>>>>>>>>        Move 0  to iLen
40345>>>>>>>>>        
40345>>>>>>>>>        // Get the attribute
40345>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40347>>>>>>>>>            Get SQLPrivateColumnIsLegal ihdbc sDrvrId ihstmt iCol to bLegalColumn
40348>>>>>>>>>            If (bLegalColumn) Begin
40350>>>>>>>>>                // Determine the atributes type
40350>>>>>>>>>                Case Begin
40350>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_SIZE)
40352>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_LENGTH)
40355>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_PRECISION)
40358>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_SQLTYPE)
40361>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_NULLABLE)
40364>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_DFTYPE)
40367>>>>>>>>>                        Move DFFALSE to bIsStringAttribute
40368>>>>>>>>>                        Move DFTRUE to bLegalAttrib
40369>>>>>>>>>                        Break
40370>>>>>>>>>                        
40370>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_LABEL)
40373>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_BASECOLUMNNAME)
40376>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_BASETABLENAME)
40379>>>>>>>>>                        Move DFTRUE to bIsStringAttribute
40380>>>>>>>>>                        Move DFTRUE to bLegalAttrib
40381>>>>>>>>>                        Break
40382>>>>>>>>>                        
40382>>>>>>>>>                    Case Else
40382>>>>>>>>>                        Move DFFALSE to bLegalAttrib
40383>>>>>>>>>                        Send SQLIllegalAttribute ("Attribute is = " + String(iAttribId) + ")") "SQLPrivateColAttribute"
40384>>>>>>>>>                Case End
40384>>>>>>>>>                
40384>>>>>>>>>                If (bLegalAttrib) Begin
40386>>>>>>>>>                    // Setup function arguments
40386>>>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                        Callback Self ;                        Passing ihdbc iCol ihstmt ;                        Result iVoid
40391>>>>>>>>>                    
40391>>>>>>>>>                    If (bIsStringAttribute) Begin
40393>>>>>>>>>                        // Call the driver function to get the data length
40393>>>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLCOLSTRINGATTRIBLEN ;                            Callback Self ;                            Passing sEmpty sEmpty iAttribId ;                            Result iLen
40398>>>>>>>>>                        
40398>>>>>>>>>                        If (iLen) Begin
40400>>>>>>>>>                            // Allocate
40400>>>>>>>>>                            Move (Repeat(' ', iLen)) to sResult
40401>>>>>>>>>                            
40401>>>>>>>>>                            // Call the driver function to get the name
40401>>>>>>>>>                            Call_Driver 0 sDrvrId Function FUNC_SQLCOLSTRINGATTRIB ;                                Callback Self ;                                Passing sResult sEmpty iAttribId ;                                Result iVoid
40406>>>>>>>>>                        End
40406>>>>>>>>>>
40406>>>>>>>>>                    End
40406>>>>>>>>>>
40406>>>>>>>>>                    Else Begin
40407>>>>>>>>>                        // get the attribute
40407>>>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLCOLINTATTRIB ;                            Callback Self ;                            Passing sEmpty sEmpty iAttribId ;                            Result sResult
40412>>>>>>>>>                    End
40412>>>>>>>>>>
40412>>>>>>>>>                End
40412>>>>>>>>>>
40412>>>>>>>>>            End
40412>>>>>>>>>>
40412>>>>>>>>>            Else ;                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLPrivateColAttribute"
40414>>>>>>>>>        End
40414>>>>>>>>>>
40414>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLPrivateColAttribute"
40416>>>>>>>>>        
40416>>>>>>>>>        Function_Return sResult
40417>>>>>>>>>    End_Function
40418>>>>>>>>>    
40418>>>>>>>>>    
40418>>>>>>>>>    // Preapre for calling a stored procedure, pass the procedure name.
40418>>>>>>>>>    Procedure SQLSetProcedureName String sProcName String sSchemaArg
40420>>>>>>>>>        Integer ihdbc
40420>>>>>>>>>        Integer ihstmt
40420>>>>>>>>>        String  sDrvrId
40420>>>>>>>>>        Integer iVoid
40420>>>>>>>>>        String  sSchema
40420>>>>>>>>>        String  sEmpty
40420>>>>>>>>>        
40420>>>>>>>>>        // Initialize
40420>>>>>>>>>        Move "" to sEmpty
40421>>>>>>>>>        
40421>>>>>>>>>        // Get the cli handles
40421>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40422>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40423>>>>>>>>>        Get psDriverId            to sDrvrId
40424>>>>>>>>>        
40424>>>>>>>>>        // Call the procedure
40424>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40426>>>>>>>>>            If (Num_Arguments >= 2) ;                Move sSchemaArg to sSchema
40429>>>>>>>>>            Else ;                Move "" to sSchema
40431>>>>>>>>>            
40431>>>>>>>>>            If (sSchema <> "") Begin
40433>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLSETPROCSCHEMA ;                    Callback Self ;                    Passing ihdbc sSchema ihstmt ;                    Result iVoid
40438>>>>>>>>>            End
40438>>>>>>>>>>
40438>>>>>>>>>            
40438>>>>>>>>>            // Call the procedure
40438>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLSETPROCNAME ;                Callback Self ;                Passing ihdbc sProcName ihstmt ;                Result iVoid
40443>>>>>>>>>            
40443>>>>>>>>>            Set piLastArgument to 0
40444>>>>>>>>>        End
40444>>>>>>>>>>
40444>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLSetProcedurename"
40446>>>>>>>>>    End_Procedure
40447>>>>>>>>>    
40447>>>>>>>>>    // Pass the next argument
40447>>>>>>>>>    Procedure SQLSetNextArgument String sArgument
40449>>>>>>>>>        Integer iArgnum
40449>>>>>>>>>        
40449>>>>>>>>>        Get piLastArgument to iArgnum
40450>>>>>>>>>        Increment iArgnum
40451>>>>>>>>>        Send SQLSetArgument iArgnum sArgument
40452>>>>>>>>>        Set piLastArgument to iArgnum
40453>>>>>>>>>    End_Procedure
40454>>>>>>>>>    
40454>>>>>>>>>    
40454>>>>>>>>>    
40454>>>>>>>>>    // Set the next argument
40454>>>>>>>>>    Procedure SQLSetArgument Integer iArgnum String sArgument
40456>>>>>>>>>        Integer ihdbc
40456>>>>>>>>>        Integer ihstmt
40456>>>>>>>>>        String  sDrvrId
40456>>>>>>>>>        Integer iVoid
40456>>>>>>>>>        String  sEmpty
40456>>>>>>>>>        
40456>>>>>>>>>        // Initialize
40456>>>>>>>>>        Move "" to sEmpty
40457>>>>>>>>>        
40457>>>>>>>>>        // Get the cli handles
40457>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40458>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40459>>>>>>>>>        Get psDriverId            to sDrvrId
40460>>>>>>>>>        
40460>>>>>>>>>        // Call the procedure
40460>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40462>>>>>>>>>            // Pass the information
40462>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback Self ;                Passing ihdbc iArgnum ihstmt ;                Result iVoid
40467>>>>>>>>>            
40467>>>>>>>>>            // Pass the argument
40467>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLSETPROCARG ;                Callback Self ;                Passing sArgument sEmpty 0 ;                Result iVoid
40472>>>>>>>>>        End
40472>>>>>>>>>>
40472>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLSetArgument"
40474>>>>>>>>>    End_Procedure
40475>>>>>>>>>    
40475>>>>>>>>>    Procedure SQLSetNextParameter String sParamValue Integer iParamType
40477>>>>>>>>>        Integer iParamNum 
40477>>>>>>>>>        Integer iType
40477>>>>>>>>>        
40477>>>>>>>>>        If (num_arguments < 2) Begin
40479>>>>>>>>>            Move typeString to iType
40480>>>>>>>>>        End
40480>>>>>>>>>>
40480>>>>>>>>>        Else Begin
40481>>>>>>>>>            Move iParamType to iType
40482>>>>>>>>>        End
40482>>>>>>>>>>
40482>>>>>>>>>        
40482>>>>>>>>>        Get piLastArgument to iParamNum
40483>>>>>>>>>        Increment iParamNum
40484>>>>>>>>>        Send SQLSetParameter iParamNum sParamValue iType
40485>>>>>>>>>        Set piLastArgument to iParamNum
40486>>>>>>>>>    End_Procedure
40487>>>>>>>>>
40487>>>>>>>>>    Procedure SQLSetParameter Integer iParamNum String sParamValue Integer iParamType
40489>>>>>>>>>        
40489>>>>>>>>>        Integer ihdbc
40489>>>>>>>>>        Integer ihstmt
40489>>>>>>>>>        String  sDrvrId
40489>>>>>>>>>        Integer iVoid
40489>>>>>>>>>        String  sEmpty
40489>>>>>>>>>        Integer iType
40489>>>>>>>>>        
40489>>>>>>>>>        If (num_arguments < 3) Begin
40491>>>>>>>>>            Move typeString to iType
40492>>>>>>>>>        End
40492>>>>>>>>>>
40492>>>>>>>>>        Else Begin
40493>>>>>>>>>            Move iParamType to iType
40494>>>>>>>>>        End
40494>>>>>>>>>>
40494>>>>>>>>>        
40494>>>>>>>>>        Case Begin
40494>>>>>>>>>            Case (iType = typeDate )    
40496>>>>>>>>>
40496>>>>>>>>>                If (sParamValue <> "") Begin
40498>>>>>>>>>                    ConvertToXml typeDate sParamValue to sParamValue
40499>>>>>>>>>                End
40499>>>>>>>>>>
40499>>>>>>>>>                
40499>>>>>>>>>                Break
40500>>>>>>>>>
40500>>>>>>>>>            Case (iType = typeDatetime )    
40503>>>>>>>>>
40503>>>>>>>>>                If (sParamValue <> "") Begin
40505>>>>>>>>>                    ConvertToXml esqlDatetime sParamValue to sParamValue
40506>>>>>>>>>                    Move (Replace('T',sParamValue,' ')) to sParamValue 
40507>>>>>>>>>                End
40507>>>>>>>>>>
40507>>>>>>>>>
40507>>>>>>>>>                Break
40508>>>>>>>>>
40508>>>>>>>>>            Case (iType = typeNumber )    
40511>>>>>>>>>
40511>>>>>>>>>                If (sParamValue <> "") Begin
40513>>>>>>>>>                    ConvertToXml typeNumber sParamValue to sParamValue
40514>>>>>>>>>                End
40514>>>>>>>>>>
40514>>>>>>>>>                
40514>>>>>>>>>                Break
40515>>>>>>>>>            
40515>>>>>>>>>            Case (iType = typeTime )    
40518>>>>>>>>>
40518>>>>>>>>>                If (sParamValue <> "") Begin
40520>>>>>>>>>                    ConvertToXml esqlTime sParamValue to sParamValue
40521>>>>>>>>>                End
40521>>>>>>>>>>
40521>>>>>>>>>                
40521>>>>>>>>>                Break
40522>>>>>>>>>                
40522>>>>>>>>>            Case Else
40522>>>>>>>>>                    // sParamValue is a string type or a type that must be passed as a string
40522>>>>>>>>>                    Break
40523>>>>>>>>>                
40523>>>>>>>>>        Case End
40523>>>>>>>>>        
40523>>>>>>>>>        
40523>>>>>>>>>        // Initialize
40523>>>>>>>>>        Move "" to sEmpty
40524>>>>>>>>>        
40524>>>>>>>>>        // Get the cli handles
40524>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40525>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40526>>>>>>>>>        Get psDriverId            to sDrvrId
40527>>>>>>>>>        
40527>>>>>>>>>        // Call the procedure
40527>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40529>>>>>>>>>            // Pass the information
40529>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback Self ;                Passing ihdbc iParamnum ihstmt ;                Result iVoid
40534>>>>>>>>>            
40534>>>>>>>>>            // Pass the argument
40534>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLSETPROCARG ;                Callback Self ;                Passing sParamValue sEmpty 0 ;                Result iVoid
40539>>>>>>>>>        End
40539>>>>>>>>>>
40539>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLSetParameter"
40541>>>>>>>>>    End_Procedure
40542>>>>>>>>>    
40542>>>>>>>>>    
40542>>>>>>>>>    // Call a stored procedure
40542>>>>>>>>>    Procedure SQLCall
40544>>>>>>>>>        Integer ihdbc
40544>>>>>>>>>        Integer ihstmt
40544>>>>>>>>>        String  sDrvrId
40544>>>>>>>>>        Integer iVoid
40544>>>>>>>>>        String  sEmpty
40544>>>>>>>>>        
40544>>>>>>>>>        // Initialize
40544>>>>>>>>>        Move "" to sEmpty
40545>>>>>>>>>        
40545>>>>>>>>>        // Get the cli handles
40545>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40546>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40547>>>>>>>>>        Get psDriverId            to sDrvrId
40548>>>>>>>>>        
40548>>>>>>>>>        // Call the procedure
40548>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40550>>>>>>>>>            // Call the procedure
40550>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCALL ;                Callback Self ;                Passing ihdbc sEmpty ihstmt ;                Result iVoid
40555>>>>>>>>>            
40555>>>>>>>>>            Send SQLGetStatementAttributes
40556>>>>>>>>>            Set piLastArgument to 0
40557>>>>>>>>>        End
40557>>>>>>>>>>
40557>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLCall"
40559>>>>>>>>>    End_Procedure
40560>>>>>>>>>    
40560>>>>>>>>>    
40560>>>>>>>>>    // Get the next argument
40560>>>>>>>>>    Function SQLGetNextArgument Returns String
40562>>>>>>>>>        Integer iArgnum
40562>>>>>>>>>        String  sResult
40562>>>>>>>>>        
40562>>>>>>>>>        Get piLastArgument to iArgnum
40563>>>>>>>>>        Increment iArgnum
40564>>>>>>>>>        Get SQLGetArgument iArgnum to sResult
40565>>>>>>>>>        Set piLastArgument to iArgnum
40566>>>>>>>>>        
40566>>>>>>>>>        Function_Return sResult
40567>>>>>>>>>    End_Function
40568>>>>>>>>>    
40568>>>>>>>>>    
40568>>>>>>>>>    
40568>>>>>>>>>    // Get the specified argument from a procedure
40568>>>>>>>>>    Function SQLGetArgument Integer iArgnum Returns String
40570>>>>>>>>>        Integer ihdbc
40570>>>>>>>>>        Integer ihstmt
40570>>>>>>>>>        String  sDrvrId
40570>>>>>>>>>        Integer iVoid
40570>>>>>>>>>        String  sEmpty
40570>>>>>>>>>        String  sArgument
40570>>>>>>>>>        Integer iLen
40570>>>>>>>>>        
40570>>>>>>>>>        // Initialize
40570>>>>>>>>>        Move "" to sEmpty
40571>>>>>>>>>        Move "" to sArgument
40572>>>>>>>>>        
40572>>>>>>>>>        // Get the cli handles
40572>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40573>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40574>>>>>>>>>        Get psDriverId            to sDrvrId
40575>>>>>>>>>        
40575>>>>>>>>>        // Call the procedure
40575>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40577>>>>>>>>>            // Pass the information
40577>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback Self ;                Passing ihdbc iArgnum ihstmt ;                Result iVoid
40582>>>>>>>>>            
40582>>>>>>>>>            // Get the length
40582>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLGETPROCARGLEN ;                Callback Self ;                Passing sEmpty sEmpty 0 ;                Result iLen
40587>>>>>>>>>            
40587>>>>>>>>>            If (iLen) Begin
40589>>>>>>>>>                // Allocate
40589>>>>>>>>>                Move (Repeat(' ', iLen)) to sArgument
40590>>>>>>>>>                
40590>>>>>>>>>                // Pass the argument
40590>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLGETPROCARG ;                    Callback Self ;                    Passing sArgument sEmpty 0 ;                    Result iVoid
40595>>>>>>>>>            End
40595>>>>>>>>>>
40595>>>>>>>>>        End
40595>>>>>>>>>>
40595>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLGetArgument"
40597>>>>>>>>>        
40597>>>>>>>>>        Function_Return sArgument
40598>>>>>>>>>    End_Function
40599>>>>>>>>>    
40599>>>>>>>>>    
40599>>>>>>>>>    // Get the return value of a stored function
40599>>>>>>>>>    Function SQLReturnValue Returns String
40601>>>>>>>>>        Integer ihdbc
40601>>>>>>>>>        Integer ihstmt
40601>>>>>>>>>        String  sDrvrId
40601>>>>>>>>>        Integer iVoid
40601>>>>>>>>>        String  sEmpty
40601>>>>>>>>>        String  sRetval
40601>>>>>>>>>        Integer iLen
40601>>>>>>>>>        
40601>>>>>>>>>        // Initialize
40601>>>>>>>>>        Move "" to sEmpty
40602>>>>>>>>>        Move "" to sRetval
40603>>>>>>>>>        
40603>>>>>>>>>        // Get the cli handles
40603>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40604>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40605>>>>>>>>>        Get psDriverId            to sDrvrId
40606>>>>>>>>>        
40606>>>>>>>>>        // Call the procedure
40606>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40608>>>>>>>>>            // Get the length
40608>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLGETPROCRETVALLEN ;                Callback Self ;                Passing ihdbc sEmpty ihstmt  ;                Result iLen
40613>>>>>>>>>            
40613>>>>>>>>>            If (iLen) Begin
40615>>>>>>>>>                // Allocate
40615>>>>>>>>>                Move (Repeat(' ', iLen)) to sRetval
40616>>>>>>>>>                
40616>>>>>>>>>                // Pass the argument
40616>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLGETPROCRETVAL ;                    Callback Self ;                    Passing ihdbc sRetval ihstmt ;                    Result iVoid
40621>>>>>>>>>            End
40621>>>>>>>>>>
40621>>>>>>>>>        End
40621>>>>>>>>>>
40621>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLReturnValue"
40623>>>>>>>>>        
40623>>>>>>>>>        Function_Return sRetval
40624>>>>>>>>>    End_Function
40625>>>>>>>>>    
40625>>>>>>>>>    
40625>>>>>>>>>    // Switch to the next set
40625>>>>>>>>>    // Returns : 0   = No more result sets
40625>>>>>>>>>    //     <>0 = Switched to next set
40625>>>>>>>>>    Function SQLNextResultSet Returns Integer
40627>>>>>>>>>        Integer ihdbc
40627>>>>>>>>>        Integer ihstmt
40627>>>>>>>>>        String  sDrvrId
40627>>>>>>>>>        Integer iResult
40627>>>>>>>>>        String  sEmpty
40627>>>>>>>>>        
40627>>>>>>>>>        // Initialize
40627>>>>>>>>>        Move "" to sEmpty
40628>>>>>>>>>        Move 0  to iResult
40629>>>>>>>>>        
40629>>>>>>>>>        // Get the cli handles
40629>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40630>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40631>>>>>>>>>        Get psDriverId            to sDrvrId
40632>>>>>>>>>        
40632>>>>>>>>>        // Call the procedure
40632>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40634>>>>>>>>>            // Get the length
40634>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLNEXTRESULTSET ;                Callback Self ;                Passing ihdbc sEmpty ihstmt  ;                Result iResult
40639>>>>>>>>>            
40639>>>>>>>>>            Send SQLGetStatementAttributes
40640>>>>>>>>>            Set piLastArgument to 0
40641>>>>>>>>>        End
40641>>>>>>>>>>
40641>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLNextResultSet"
40643>>>>>>>>>        
40643>>>>>>>>>        Function_Return iResult
40644>>>>>>>>>    End_Function
40645>>>>>>>>>    
40645>>>>>>>>>    
40645>>>>>>>>>    // Setup a file that will be acivated after a succesfull
40645>>>>>>>>>    //fetch on the statement
40645>>>>>>>>>    Procedure SQLFetchActivatesBuffer Integer iFileNum Integer bState
40647>>>>>>>>>        Integer ihdbc
40647>>>>>>>>>        Integer ihstmt
40647>>>>>>>>>        String  sDrvrId
40647>>>>>>>>>        Integer iResult
40647>>>>>>>>>        Integer bIsOpen
40647>>>>>>>>>        Integer iVoid
40647>>>>>>>>>        String  sFileType
40647>>>>>>>>>        
40647>>>>>>>>>        // Check if file is open
40647>>>>>>>>>        Get_Attribute DF_FILE_OPENED of iFileNum to bIsOpen
40650>>>>>>>>>        If (bIsOpen) Begin
40652>>>>>>>>>            // Get the cli handles
40652>>>>>>>>>            Get phCLIStatementHandle  to ihstmt
40653>>>>>>>>>            Get phCLIConnectionHandle to ihdbc
40654>>>>>>>>>            Get psDriverId            to sDrvrId
40655>>>>>>>>>            
40655>>>>>>>>>            // Call the procedure
40655>>>>>>>>>            If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40657>>>>>>>>>                // Check if the file has the correct type
40657>>>>>>>>>                Get_Attribute DF_FILE_DRIVER of iFileNum to sFileType
40660>>>>>>>>>                If (sFileType = sDrvrId) Begin
40662>>>>>>>>>                    // Setup the buffer
40662>>>>>>>>>                    Call_Driver iFileNum sDrvrId Function FUNC_SQLBUFFERSTATUS ;                        Callback Self ;                        Passing ihdbc bState ihstmt  ;                        Result iVoid
40667>>>>>>>>>                End
40667>>>>>>>>>>
40667>>>>>>>>>                Else ;                    Send StmtError CLIERR_SQLINVALID_BIND_FILE ("File" * String(iFileNum) * "type incompatible with statement ("  + sFileType + ")") "SQLBindFile"
40669>>>>>>>>>            End
40669>>>>>>>>>>
40669>>>>>>>>>            Else ;                Send HandleError ihstmt ihdbc sDrvrId "SQLFetchActivatesBuffer"
40671>>>>>>>>>        End
40671>>>>>>>>>>
40671>>>>>>>>>        Else ;            Send StmtError CLIERR_SQLINVALID_BUFFER ("File not open (number =" * String(iFileNum) + ")") "SQLFetchActivatesBuffer"
40673>>>>>>>>>    End_Procedure
40674>>>>>>>>>    
40674>>>>>>>>>    
40674>>>>>>>>>    
40674>>>>>>>>>    Function SQLGetMessage Integer iMessageNum Returns String
40676>>>>>>>>>        Integer ihdbc
40676>>>>>>>>>        Integer ihstmt
40676>>>>>>>>>        String  sDrvrId
40676>>>>>>>>>        String  sMessage
40676>>>>>>>>>        Integer iVoid
40676>>>>>>>>>        
40676>>>>>>>>>        // Initialize
40676>>>>>>>>>        Move "" to sMessage
40677>>>>>>>>>        
40677>>>>>>>>>        // Get the cli handles
40677>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40678>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40679>>>>>>>>>        Get psDriverId            to sDrvrId
40680>>>>>>>>>        
40680>>>>>>>>>        // Call the procedure
40680>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40682>>>>>>>>>            // Setup function arguments
40682>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback Self ;                Passing ihdbc iMessageNum ihstmt ;                Result iVoid
40687>>>>>>>>>            
40687>>>>>>>>>            Move (Repeat(' ', 1024)) to sMessage
40688>>>>>>>>>            // Get the length
40688>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLGETMESSAGE ;                Callback Self ;                Passing iVoid sMessage iVoid ;                Result iVoid
40693>>>>>>>>>        End
40693>>>>>>>>>>
40693>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLGetDiagRec"
40695>>>>>>>>>        
40695>>>>>>>>>        Function_Return sMessage
40696>>>>>>>>>    End_Function
40697>>>>>>>>>    
40697>>>>>>>>>    
40697>>>>>>>>>    
40697>>>>>>>>>    // Remove the component identifier from a diagnostic message
40697>>>>>>>>>    Function RemoveComponentIdentifier String sDiagMessage Returns String
40699>>>>>>>>>        While (Left(sDiagMessage, 1) = "[")
40703>>>>>>>>>            Move (Right(sDiagMessage, Length(sDiagMessage) - Pos("]", sDiagMessage))) to sDiagMessage
40704>>>>>>>>>        Loop
40705>>>>>>>>>>
40705>>>>>>>>>        
40705>>>>>>>>>        Function_Return sDiagMessage
40706>>>>>>>>>    End_Function
40707>>>>>>>>>    
40707>>>>>>>>>    
40707>>>>>>>>>    
40707>>>>>>>>>    // Convert a DataFlex date to a SQL Date. Use dummy zero dates.
40707>>>>>>>>>    Function DFDateToSQLDate Date dDFDate Integer iSQLType Returns String
40709>>>>>>>>>        
40709>>>>>>>>>        Integer iType
40709>>>>>>>>>        String  sSQLDate
40709>>>>>>>>>        Integer iOrgDateFmt
40709>>>>>>>>>        Integer iOrgDateSep
40709>>>>>>>>>        
40709>>>>>>>>>        String sDriverId
40709>>>>>>>>>        String sDummyZeroDate
40709>>>>>>>>>        String sDummyZeroDateMssqlDatetime
40709>>>>>>>>>        
40709>>>>>>>>>        // Change date format to military, SQL dates are military dates
40709>>>>>>>>>        Get_Attribute DF_DATE_FORMAT to iOrgDateFmt
40712>>>>>>>>>        Get_Attribute DF_DATE_SEPARATOR to iOrgDateSep
40715>>>>>>>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_MILITARY
40718>>>>>>>>>        Set_Attribute DF_DATE_SEPARATOR to (Ascii('-'))
40721>>>>>>>>>        
40721>>>>>>>>>        // We only need to convert if the date is 0
40721>>>>>>>>>        If (Integer(dDFDate = 0)) Begin
40723>>>>>>>>>            
40723>>>>>>>>>            If (num_arguments < 2) Begin
40725>>>>>>>>>                Move SQL_TYPE_TIMESTAMP to iType
40726>>>>>>>>>            End
40726>>>>>>>>>>
40726>>>>>>>>>            Else Begin
40727>>>>>>>>>                Move iSQLType to iType
40728>>>>>>>>>            End
40728>>>>>>>>>>
40728>>>>>>>>>            
40728>>>>>>>>>            
40728>>>>>>>>>            Get psDriverID to sDriverId
40729>>>>>>>>>            Get psDummyZeroDate to sDummyZeroDate
40730>>>>>>>>>            
40730>>>>>>>>>            If ( (iType = SQL_TYPE_TIMESTAMP) and (sDriverID = 'MSSQLDRV') ) Begin
40732>>>>>>>>>                Get psDummyZeroDateMssqlDatetime to sDummyZeroDateMssqlDatetime
40733>>>>>>>>>                Move sDummyZeroDateMssqlDatetime to sSQLDate
40734>>>>>>>>>            End
40734>>>>>>>>>>
40734>>>>>>>>>            Else Begin
40735>>>>>>>>>                Move sDummyZeroDate to sSQLDate
40736>>>>>>>>>            End
40736>>>>>>>>>>
40736>>>>>>>>>            
40736>>>>>>>>>        End
40736>>>>>>>>>>
40736>>>>>>>>>        Else Begin
40737>>>>>>>>>            Move dDFDate to sSQLDate
40738>>>>>>>>>        End
40738>>>>>>>>>>
40738>>>>>>>>>        
40738>>>>>>>>>        // Change date format back to original
40738>>>>>>>>>        Set_Attribute DF_DATE_FORMAT to iOrgDateFmt
40741>>>>>>>>>        Set_Attribute DF_DATE_SEPARATOR to iOrgDateSep
40744>>>>>>>>>        
40744>>>>>>>>>        Function_Return sSQLDate
40745>>>>>>>>>    End_Function
40746>>>>>>>>>    
40746>>>>>>>>>    
40746>>>>>>>>>    // Convert a SQL date to a DataFlex Date. Use dummy zero dates.
40746>>>>>>>>>    Function SQLDateToDFDate String sSQLDate Returns Date
40748>>>>>>>>>        
40748>>>>>>>>>        Integer iType
40748>>>>>>>>>        Date    dDFDate
40748>>>>>>>>>        Integer iOrgDateFmt
40748>>>>>>>>>        Integer iOrgDateSep
40748>>>>>>>>>        
40748>>>>>>>>>        String  sDriverId
40748>>>>>>>>>        String  sDummyZeroDate
40748>>>>>>>>>        String  sDummyZeroDateMssqlDatetime
40748>>>>>>>>>        
40748>>>>>>>>>        Get psDriverID to sDriverId
40749>>>>>>>>>        
40749>>>>>>>>>        Get psDummyZeroDate to sDummyZeroDate
40750>>>>>>>>>        Get psDummyZeroDateMssqlDatetime to sDummyZeroDateMssqlDatetime
40751>>>>>>>>>        
40751>>>>>>>>>        Get_Attribute DF_DATE_FORMAT to iOrgDateFmt
40754>>>>>>>>>        Get_Attribute DF_DATE_SEPARATOR to iOrgDateSep
40757>>>>>>>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_MILITARY
40760>>>>>>>>>        Set_Attribute DF_DATE_SEPARATOR to (Ascii('-'))
40763>>>>>>>>>        
40763>>>>>>>>>        Move (Left(sSQLDate,10)) to sSQLDate
40764>>>>>>>>>        
40764>>>>>>>>>        If ( (sSQLDate = sDummyZeroDate) or ;            ( (sDriverId = 'MSSQLDRV') and (sSQLDate = sDummyZeroDateMssqlDatetime) ) )  Begin
40766>>>>>>>>>            Move 0 to dDFDate
40767>>>>>>>>>        End
40767>>>>>>>>>>
40767>>>>>>>>>        Else Begin
40768>>>>>>>>>            Move sSQLDate to dDFDate
40769>>>>>>>>>        End
40769>>>>>>>>>>
40769>>>>>>>>>        
40769>>>>>>>>>        // Change date format back to original
40769>>>>>>>>>        Set_Attribute DF_DATE_FORMAT to iOrgDateFmt
40772>>>>>>>>>        Set_Attribute DF_DATE_SEPARATOR to iOrgDateSep
40775>>>>>>>>>        
40775>>>>>>>>>        Function_Return dDFDate
40776>>>>>>>>>    End_Function
40777>>>>>>>>>    
40777>>>>>>>>>End_Class
40778>>>>>>>>>
40778>>>>>>>>>
40778>>>>>>>>>// Connection object for embedded SQL                          
40778>>>>>>>>>// This provides the ability to create a connection for a driver.     
40778>>>>>>>>>// It will contain child statement objects                            
40778>>>>>>>>>
40778>>>>>>>>>Class cSQLConnection is a cObject
40779>>>>>>>>>    
40779>>>>>>>>>    Procedure Construct_object
40781>>>>>>>>>        Forward Send Construct_object
40783>>>>>>>>>        
40783>>>>>>>>>        Property Integer phCLIConnectionHandle       0
40784>>>>>>>>>        
40784>>>>>>>>>        Property String  psDriverID        ""
40785>>>>>>>>>        Property Integer piBindFile        0
40786>>>>>>>>>        
40786>>>>>>>>>        Property String psDummyZeroDate              '0001-01-01'
40787>>>>>>>>>        Property String psDummyZeroDateMssqlDatetime '1753-01-01'
40788>>>>>>>>>        
40788>>>>>>>>>    End_Procedure
40789>>>>>>>>>    
40789>>>>>>>>>    
40789>>>>>>>>>    
40789>>>>>>>>>    // Store basic information about the connection
40789>>>>>>>>>    Procedure StoreConnectionInfo Handle hCLIConnectionHandle String sDrvrId
40791>>>>>>>>>        
40791>>>>>>>>>        String sDummyZeroDate
40791>>>>>>>>>        Integer iDriverIndex
40791>>>>>>>>>        
40791>>>>>>>>>        Set phCLIConnectionHandle to hCLIConnectionHandle
40792>>>>>>>>>        Set psDriverID            to sDrvrId
40793>>>>>>>>>        
40793>>>>>>>>>        Case Begin
40793>>>>>>>>>            Case (sDrvrId = "MSSQLDRV")
40795>>>>>>>>>                Set psDummyZeroDate to '0001-01-01'
40796>>>>>>>>>                Set psDummyZeroDateMssqlDatetime to '1753-01-01'
40797>>>>>>>>>                Break
40798>>>>>>>>>            Case (sDrvrId = "DB2_DRV")
40801>>>>>>>>>                Set psDummyZeroDate to '0001-01-01'
40802>>>>>>>>>                Break
40803>>>>>>>>>            Case (sDrvrId = "ODBC_DRV")
40806>>>>>>>>>                Get DriverIndex "ODBC_DRV" to iDriverIndex
40807>>>>>>>>>                If (iDriverIndex <> 0) Begin
40809>>>>>>>>>                    Get_Attribute DF_DRIVER_DUMMY_ZERO_DATE_VALUE of iDriverIndex to sDummyZeroDate
40812>>>>>>>>>                End
40812>>>>>>>>>>
40812>>>>>>>>>                Else Begin
40813>>>>>>>>>                    Move '0001-01-01' to sDummyZeroDate
40814>>>>>>>>>                End
40814>>>>>>>>>>
40814>>>>>>>>>
40814>>>>>>>>>                Set psDummyZeroDate to sDummyZeroDate
40815>>>>>>>>>                Break
40816>>>>>>>>>                
40816>>>>>>>>>        Case End
40816>>>>>>>>>        
40816>>>>>>>>>    End_Procedure
40817>>>>>>>>>    
40817>>>>>>>>>    Function DriverIndex String sDriver Returns Integer
40819>>>>>>>>>        
40819>>>>>>>>>        String  sCurrentDriver
40819>>>>>>>>>        Integer iNumberOfDrivers iDriver iCount
40819>>>>>>>>>        
40819>>>>>>>>>        Move 0 to iDriver
40820>>>>>>>>>        
40820>>>>>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
40823>>>>>>>>>        For iCount from 1 to iNumberOfDrivers
40829>>>>>>>>>>
40829>>>>>>>>>            
40829>>>>>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
40832>>>>>>>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriver) ) Begin
40834>>>>>>>>>                Move iCount to iDriver
40835>>>>>>>>>            End
40835>>>>>>>>>>
40835>>>>>>>>>        Loop
40836>>>>>>>>>>
40836>>>>>>>>>        
40836>>>>>>>>>        Function_Return iDriver
40837>>>>>>>>>        
40837>>>>>>>>>    End_Function
40838>>>>>>>>>
40838>>>>>>>>>    
40838>>>>>>>>>    // Destroy the SQLConnection object
40838>>>>>>>>>    Procedure DestroySQLConnection
40840>>>>>>>>>        Send Destroy
40841>>>>>>>>>    End_Procedure
40842>>>>>>>>>    
40842>>>>>>>>>    
40842>>>>>>>>>    // Connect to a database server
40842>>>>>>>>>    // Returns : 1 Succesfully connected
40842>>>>>>>>>    //           0 Not connected
40842>>>>>>>>>    Function SQLConnect String sDrvrID String sConnect Returns Integer
40844>>>>>>>>>        Integer ihdbc
40844>>>>>>>>>        String  sEmpty
40844>>>>>>>>>        
40844>>>>>>>>>        // Initialize
40844>>>>>>>>>        Move "" to sEmpty
40845>>>>>>>>>        Move 0  to ihdbc
40846>>>>>>>>>        
40846>>>>>>>>>        Move False to Err
40847>>>>>>>>>        
40847>>>>>>>>>        // Call the driver function to connect
40847>>>>>>>>>        Call_Driver 0 sDrvrId Function FUNC_SQLCONNECT ;            Callback Self ;            Passing sConnect sEmpty Self ;            Result ihdbc
40852>>>>>>>>>        
40852>>>>>>>>>        // If there was an error, make result invalid
40852>>>>>>>>>        If (Err) ;            Move 0 to ihdbc
40855>>>>>>>>>        
40855>>>>>>>>>        // Check result and store it
40855>>>>>>>>>        If (ihdbc <> 0) ;            Send StoreConnectionInfo ihdbc sDrvrId
40858>>>>>>>>>        
40858>>>>>>>>>        // Return success status
40858>>>>>>>>>        Function_Return (ihdbc <> 0)
40859>>>>>>>>>    End_Function
40860>>>>>>>>>    
40860>>>>>>>>>    
40860>>>>>>>>>    // Use a connection of an already open file
40860>>>>>>>>>    Function SQLFileConnect Integer iFileNum Returns Integer
40862>>>>>>>>>        Integer ihdbc
40862>>>>>>>>>        Integer bIsOpen
40862>>>>>>>>>        String  sDrvrId
40862>>>>>>>>>        String  sEmpty
40862>>>>>>>>>        
40862>>>>>>>>>        // Initialize
40862>>>>>>>>>        Move "" to sEmpty
40863>>>>>>>>>        Move 0  to ihdbc
40864>>>>>>>>>        
40864>>>>>>>>>        // Check if file is open
40864>>>>>>>>>        Get_Attribute DF_FILE_OPENED of iFileNum to bIsOpen
40867>>>>>>>>>        If (bIsOpen) Begin
40869>>>>>>>>>            // Fill the driver id, assume longest is 255 characters
40869>>>>>>>>>            Move (Repeat(' ', 255)) to sDrvrId
40870>>>>>>>>>            Get_Attribute DF_FILE_DRIVER of iFileNum to sDrvrId
40873>>>>>>>>>            
40873>>>>>>>>>            Move False to Err
40874>>>>>>>>>            
40874>>>>>>>>>            // Call the driver function to connect
40874>>>>>>>>>            Call_Driver iFileNum sDrvrId Function FUNC_SQLFILECONNECT ;                Callback Self ;                Passing sEmpty sEmpty 0 ;                Result ihdbc
40879>>>>>>>>>            
40879>>>>>>>>>            // If there was an error, make result invalid
40879>>>>>>>>>            If (Err) ;                Move 0 to ihdbc
40882>>>>>>>>>            
40882>>>>>>>>>            // Check result and store it
40882>>>>>>>>>            If (ihdbc <> 0) Begin
40884>>>>>>>>>                // Somehow Call_driver overwrites the sDrvrId variable, restore it here
40884>>>>>>>>>                Get_Attribute DF_FILE_DRIVER of iFileNum to sDrvrId
40887>>>>>>>>>                Send StoreConnectionInfo ihdbc sDrvrId
40888>>>>>>>>>                
40888>>>>>>>>>                // Set filenum so it can be used for fetching
40888>>>>>>>>>                Set piBindFile to iFileNum
40889>>>>>>>>>            End
40889>>>>>>>>>>
40889>>>>>>>>>        End
40889>>>>>>>>>>
40889>>>>>>>>>        
40889>>>>>>>>>        // Return success status
40889>>>>>>>>>        Function_Return (ihdbc <> 0)
40890>>>>>>>>>    End_Function
40891>>>>>>>>>    
40891>>>>>>>>>    
40891>>>>>>>>>    // Establish an embedded SQL connection that uses an existing connection from an earlier login or open.
40891>>>>>>>>>    // Existing connections are identified by there connectstring. (can be obtained with DF_DRIVER_SERVER_NAME attribute)
40891>>>>>>>>>    // If sConnectString exist in the list of existing connections, that connection will be used for embedded SQL.
40891>>>>>>>>>    // The connectstring must be an exact match, but can be case insensitive
40891>>>>>>>>>    // The connectstring can contain a connection id. For example: "DFCONNID=MyConnectionID"
40891>>>>>>>>>    // If no matching connectstring is found, this function will return 0
40891>>>>>>>>>    // This function will only work with CLI connectivity kits 6.2 or later
40891>>>>>>>>>    Function SQLConnectionConnect String sDrvrID String sConnectString Returns Integer
40893>>>>>>>>>        Integer ihdbc
40893>>>>>>>>>        String  sEmpty
40893>>>>>>>>>        Integer iFileNum
40893>>>>>>>>>        
40893>>>>>>>>>        // Initialize
40893>>>>>>>>>        Move "" to sEmpty
40894>>>>>>>>>        Move 0  to ihdbc
40895>>>>>>>>>        
40895>>>>>>>>>        Move False to Err
40896>>>>>>>>>        
40896>>>>>>>>>        // Call the driver function
40896>>>>>>>>>        //   Note we call FUNC_SQLFILECONNECT with iFileNum = 0.
40896>>>>>>>>>        //   This will perform SQLConnectionConnect instead of SQLFileConnect
40896>>>>>>>>>        Move 0 to iFileNum
40897>>>>>>>>>        Call_Driver iFileNum sDrvrId Function FUNC_SQLFILECONNECT ;            Callback Self ;            Passing sConnectString sEmpty Self ;            Result ihdbc
40902>>>>>>>>>        
40902>>>>>>>>>        // If there was an error, make result invalid
40902>>>>>>>>>        If (Err) ;            Move 0 to ihdbc
40905>>>>>>>>>        
40905>>>>>>>>>        // Check result and store it
40905>>>>>>>>>        If (ihdbc <> 0) ;            Send StoreConnectionInfo ihdbc sDrvrId
40908>>>>>>>>>        
40908>>>>>>>>>        // Return success status
40908>>>>>>>>>        Function_Return (ihdbc <> 0)
40909>>>>>>>>>    End_Function
40910>>>>>>>>>    
40910>>>>>>>>>    
40910>>>>>>>>>    // Disconnect from an embedded SQL server and free allocated
40910>>>>>>>>>    // resources
40910>>>>>>>>>    Procedure SQLDisconnect
40912>>>>>>>>>        Integer ihdbc
40912>>>>>>>>>        Integer iVoid
40912>>>>>>>>>        String  sDrvrId
40912>>>>>>>>>        String  sEmpty
40912>>>>>>>>>        
40912>>>>>>>>>        // Initialize
40912>>>>>>>>>        Move "" to sEmpty
40913>>>>>>>>>        
40913>>>>>>>>>        // Get the cli handle
40913>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40914>>>>>>>>>        Get psDriverId to sDrvrId
40915>>>>>>>>>        
40915>>>>>>>>>        // Free the CLI handle
40915>>>>>>>>>        If (ihdbc <> 0) Begin
40917>>>>>>>>>            // Call the driver function to disconnect
40917>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLDISCONNECT ;                Callback Self ;                Passing sEmpty sEmpty ihdbc ;                Result iVoid
40922>>>>>>>>>            
40922>>>>>>>>>            Move -1 to giLastSQLhdbc
40923>>>>>>>>>            
40923>>>>>>>>>            // Free the DataFlex handle
40923>>>>>>>>>            Send DestroySQLConnection
40924>>>>>>>>>        End
40924>>>>>>>>>>
40924>>>>>>>>>    End_Procedure
40925>>>>>>>>>    
40925>>>>>>>>>    // Create a cSQLStatement object
40925>>>>>>>>>    Function CreateSQLStatement Returns Handle
40927>>>>>>>>>        
40927>>>>>>>>>        Handle hoSQLStatement
40927>>>>>>>>>        Get Create (RefClass(cSQLStatement)) to hoSQLStatement
40928>>>>>>>>>        
40928>>>>>>>>>        // If the connection has a default Bind File, assign it to the
40928>>>>>>>>>        // statement object. The default is set when you open a file with a
40928>>>>>>>>>        // SetFileConnection command.
40928>>>>>>>>>        Set piBindFile of hoSQLStatement to (piBindFile(Self))
40929>>>>>>>>>        
40929>>>>>>>>>        Function_Return hoSQLStatement
40930>>>>>>>>>    End_Function
40931>>>>>>>>>    
40931>>>>>>>>>    
40931>>>>>>>>>    // Open a statement for use
40931>>>>>>>>>    Function SQLOpen Returns Handle
40933>>>>>>>>>        Handle  hoSQLStatement
40933>>>>>>>>>        Integer ihdbc
40933>>>>>>>>>        Integer ihstmt
40933>>>>>>>>>        Integer iVoid
40933>>>>>>>>>        String  sDrvrId
40933>>>>>>>>>        String  sEmpty
40933>>>>>>>>>        String  sDummyZeroDate
40933>>>>>>>>>        String  sDummyZeroDateMssqlDatetime
40933>>>>>>>>>        
40933>>>>>>>>>        // Initialize
40933>>>>>>>>>        Move "" to sEmpty
40934>>>>>>>>>        
40934>>>>>>>>>        // Get the cli handle to the connection
40934>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40935>>>>>>>>>        Get psDriverId  to sDrvrId
40936>>>>>>>>>        
40936>>>>>>>>>        // Allocate a new handle and populate it
40936>>>>>>>>>        If (ihdbc <> 0) Begin
40938>>>>>>>>>            // Create a new cSQLStatement object
40938>>>>>>>>>            Get CreateSQLStatement to hoSQLStatement
40939>>>>>>>>>            
40939>>>>>>>>>            // Call the driver function to allocate a cli statement handle
40939>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLOPEN ;                Callback Self ;                Passing hoSQLStatement sEmpty ihdbc ;                Result ihstmt
40944>>>>>>>>>            
40944>>>>>>>>>            // If unsuccessful destroy hoSQLStatement
40944>>>>>>>>>            If (ihstmt = 0) Begin
40946>>>>>>>>>                Send DestroySQLStatement of hoSQLStatement
40947>>>>>>>>>                Move 0 to hoSQLStatement
40948>>>>>>>>>            End
40948>>>>>>>>>>
40948>>>>>>>>>            Else Begin
40949>>>>>>>>>                Send StoreStatementInfo of hoSQLStatement ihstmt sDrvrId ihdbc
40950>>>>>>>>>                
40950>>>>>>>>>                // Store DummyZeroDate of hoSQLConnection in hoSQLStatement
40950>>>>>>>>>                Get psDummyZeroDate              to sDummyZeroDate
40951>>>>>>>>>                Get psDummyZeroDateMssqlDatetime to sDummyZeroDateMssqlDatetime
40952>>>>>>>>>                
40952>>>>>>>>>                Set psDummyZeroDate              of hoSQLStatement to sDummyZeroDate
40953>>>>>>>>>                Set psDummyZeroDateMssqlDatetime of hoSQLStatement to sDummyZeroDateMssqlDatetime
40954>>>>>>>>>                
40954>>>>>>>>>            End
40954>>>>>>>>>>
40954>>>>>>>>>        End
40954>>>>>>>>>>
40954>>>>>>>>>        
40954>>>>>>>>>        Function_Return hoSQLStatement
40955>>>>>>>>>    End_Function
40956>>>>>>>>>    
40956>>>>>>>>>End_Class
40957>>>>>>>>>
40957>>>>>>>>>// Manager for embedded SQL handles.                           
40957>>>>>>>>>// We want to be able to use multiple drivers and multiple            
40957>>>>>>>>>// connections within a driver and multiple statements within a       
40957>>>>>>>>>// connection. To allow this we have placed our own handle logic on   
40957>>>>>>>>>// top of the driver handle logic. This way we can handle the         
40957>>>>>>>>>// situation where two driver handles may be equal.                   
40957>>>>>>>>>
40957>>>>>>>>>Class cSQLHandleManager is a cObject
40958>>>>>>>>>    
40958>>>>>>>>>    Procedure Construct_object
40960>>>>>>>>>        Forward Send Construct_object
40962>>>>>>>>>        
40962>>>>>>>>>        Property String  psDefaultDriver      ""
40963>>>>>>>>>        Property String  psDefaultConnection  ""
40964>>>>>>>>>        
40964>>>>>>>>>    End_Procedure
40965>>>>>>>>>    
40965>>>>>>>>>    // Create a cSQLConnection object
40965>>>>>>>>>    Function CreateSQLConnection Returns Handle
40967>>>>>>>>>        Handle hoSQLConnection
40967>>>>>>>>>        Get Create (RefClass(cSQLConnection)) to hoSQLConnection
40968>>>>>>>>>        Function_Return hoSQLConnection
40969>>>>>>>>>    End_Function
40970>>>>>>>>>    
40970>>>>>>>>>    
40970>>>>>>>>>    // Store default connection information
40970>>>>>>>>>    Procedure SQLSetConnect String sDriver String sConnect
40972>>>>>>>>>        Set psDefaultDriver      to sDriver
40973>>>>>>>>>        Set psDefaultConnection  to sConnect
40974>>>>>>>>>    End_Procedure
40975>>>>>>>>>    
40975>>>>>>>>>    
40975>>>>>>>>>    // Make a connection to an embedded SQL server
40975>>>>>>>>>    // Returns : The DataFlex handle to the connection
40975>>>>>>>>>    Function SQLConnect String sDrvrID String sConnect Returns Integer
40977>>>>>>>>>        Handle hoSQLConnection
40977>>>>>>>>>        Integer bOK
40977>>>>>>>>>        
40977>>>>>>>>>        // Check arguments
40977>>>>>>>>>        If (sDrvrID = "" and sConnect = "") Begin
40979>>>>>>>>>            Get psDefaultDriver      to sDrvrId
40980>>>>>>>>>            Get psDefaultConnection  to sConnect
40981>>>>>>>>>        End
40981>>>>>>>>>>
40981>>>>>>>>>        
40981>>>>>>>>>        // Create a cSQLConnection object
40981>>>>>>>>>        Get CreateSQLConnection to hoSQLConnection
40982>>>>>>>>>        // Connect to the database
40982>>>>>>>>>        Get SQLConnect of hoSQLConnection sDrvrID sConnect to bOK
40983>>>>>>>>>        
40983>>>>>>>>>        // If connection to the database failed, destroy the cSQLConnection object and return a 0 handle
40983>>>>>>>>>        If (not(bOK)) Begin
40985>>>>>>>>>            Send DestroySQLConnection of hoSQLConnection
40986>>>>>>>>>            Move 0 to hoSQLConnection
40987>>>>>>>>>        End
40987>>>>>>>>>>
40987>>>>>>>>>        
40987>>>>>>>>>        Function_Return hoSQLConnection
40988>>>>>>>>>    End_Function
40989>>>>>>>>>    
40989>>>>>>>>>    
40989>>>>>>>>>    
40989>>>>>>>>>    // Make an existing connection available for use with Embedded SQL.
40989>>>>>>>>>    // The connection is identified by the number of a file
40989>>>>>>>>>    // that is open for that connection.
40989>>>>>>>>>    Function SQLFileConnect Integer iFileNum Returns Handle
40991>>>>>>>>>        Handle hoSQLConnection
40991>>>>>>>>>        Integer bOK
40991>>>>>>>>>        
40991>>>>>>>>>        // Create a cSQLConnection object
40991>>>>>>>>>        Get CreateSQLConnection to hoSQLConnection
40992>>>>>>>>>        Get SQLFileConnect of hoSQLConnection iFileNum to bOK
40993>>>>>>>>>        
40993>>>>>>>>>        // If connection to the database failed, destroy the cSQLConnection object and return a 0 handle
40993>>>>>>>>>        If (not(bOK)) Begin
40995>>>>>>>>>            Send DestroySQLConnection of hoSQLConnection
40996>>>>>>>>>            Move 0 to hoSQLConnection
40997>>>>>>>>>        End
40997>>>>>>>>>>
40997>>>>>>>>>        
40997>>>>>>>>>        Function_Return hoSQLConnection
40998>>>>>>>>>    End_Function
40999>>>>>>>>>    
40999>>>>>>>>>    // Establish an embedded SQL connection that uses an existing connection from an earlier login or open.
40999>>>>>>>>>    // Existing connections are identified by there connectstring. (can be obtained with DF_DRIVER_SERVER_NAME attribute)
40999>>>>>>>>>    // If sConnectString exist in the list of existing connections, that connection will be used for embedded SQL.
40999>>>>>>>>>    // The connectstrings must be an exact match, but can be case insensitive
40999>>>>>>>>>    // If no matching connectstring is found, this function will return 0
40999>>>>>>>>>    // This function will only work with CLI connectivity kits 6.2 or later
40999>>>>>>>>>    Function SQLConnectionConnect String sDrvrID String sConnectString Returns Integer
41001>>>>>>>>>        Handle hoSQLConnection
41001>>>>>>>>>        Integer bOK
41001>>>>>>>>>        
41001>>>>>>>>>        // Check arguments
41001>>>>>>>>>        If (sDrvrID = "" and sConnectString = "") Begin
41003>>>>>>>>>            Get psDefaultDriver      to sDrvrId
41004>>>>>>>>>            Get psDefaultConnection  to sConnectString
41005>>>>>>>>>        End
41005>>>>>>>>>>
41005>>>>>>>>>        
41005>>>>>>>>>        // Create a cSQLConnection object
41005>>>>>>>>>        Get CreateSQLConnection to hoSQLConnection
41006>>>>>>>>>        // Connect to the database
41006>>>>>>>>>        Get SQLConnectionConnect of hoSQLConnection sDrvrID sConnectString to bOK
41007>>>>>>>>>        
41007>>>>>>>>>        // If connection to the database failed, destroy the cSQLConnection object and return a 0 handle
41007>>>>>>>>>        If (not(bOK)) Begin
41009>>>>>>>>>            Send DestroySQLConnection of hoSQLConnection
41010>>>>>>>>>            Move 0 to hoSQLConnection
41011>>>>>>>>>        End
41011>>>>>>>>>>
41011>>>>>>>>>        
41011>>>>>>>>>        Function_Return hoSQLConnection
41012>>>>>>>>>    End_Function
41013>>>>>>>>>    
41013>>>>>>>>>    
41013>>>>>>>>>End_Class
41014>>>>>>>Use MSSqldrv.pkg
Including file: MSSqldrv.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\MSSqldrv.pkg)
41014>>>>>>>>>//     Package that declares MS SQL driver constants and functions.
41014>>>>>>>>>//     This package can be used by developers who want to add Data Access
41014>>>>>>>>>//     MS SQL Client specific code to a DataFlex application.
41014>>>>>>>>>
41014>>>>>>>>>Use Cli.pkg
41014>>>>>>>>>Use SQL.pkg
41014>>>>>>>>>
41014>>>>>>>>>//   Driver Indentification
41014>>>>>>>>>
41014>>>>>>>>>//   Error number constants
41014>>>>>>>>>
41014>>>>>>>>>
41014>>>>>>>>>//   Possible DF_DRIVER_SQLSERVER_CLIENT_VERSION values
41014>>>>>>>>>
41014>>>>>>>>>
41014>>>>>>>>>
41014>>>>>>>>>
41014>>>>>>>>>
41014>>>>>>>>>
41014>>>>>>>>>// SQL Server spcific types.
41014>>>>>>>>>Define SQL_SS_TIMESTAMPOFFSET   for   (-155) //SQL server datetimeoffset type */
41014>>>>>>>>>Define SQL_SS_TIME2             for   (-154) //SQL server time type */
41014>>>>>>>>>Define SQL_SS_XML               for   (-152) //SQL server xml type */
41014>>>>>>>>>Define SQL_SS_VARIANT           for   (-150) //SQL server variant type */
41014>>>>>>>>>
41014>>>>>>>>>// SQL Server spcific types.
41014>>>>>>>>>Define SQL_TYPE_TIMESTAMP2      for   (-200) //SQL server datetime2 type */
41014>>>>>>>>>Define SQL_VARCHARMAX           for   (-201) //SQL server varchar(max) type */
41014>>>>>>>>>Define SQL_WVARCHARMAX          for   (-202) //SQL server wvarchar(max) type */
41014>>>>>>>>>Define SQL_VARBINARYMAX         for   (-203) //SQL server varbinary(max) type */
41014>>>>>>>>>Define SQL_TYPE_MONEY           for   (-204) //SQL server money type */
41014>>>>>>>>>Define SQL_TYPE_SMALLMONEY      for   (-205) //SQL server smallmoney type */
41014>>>>>>>>>Define SQL_TYPE_SMALLDATETIME   for   (-206) //SQL server smalldatetype type */
41014>>>>>>>>>
41014>>>>>>>>>
41014>>>>>>>>>//   MSSQL_SetConstraint <FileNum> <ConstraintText>
41014>>>>>>>>>//
41014>>>>>>>>>//     Setup a constraint for a file.
41014>>>>>>>>>
41014>>>>>>>>>
41014>>>>>>>>>Class cMSSQLHandler is a cCLIHandler
41015>>>>>>>>>    
41015>>>>>>>>>    Procedure Construct_Object
41017>>>>>>>>>        Forward Send Construct_Object
41019>>>>>>>>>        
41019>>>>>>>>>        Set psDriverID to MSSQLDRV_ID
41020>>>>>>>>>    End_Procedure
41021>>>>>>>>>    
41021>>>>>>>>>    
41021>>>>>>>>>    
41021>>>>>>>>>    //   Extract the list from the out connect string.
41021>>>>>>>>>    Function ExtractList String sOutConnStr Integer hoStore Returns Integer
41023>>>>>>>>>        String  sItem
41023>>>>>>>>>        Integer iStart
41023>>>>>>>>>        Integer iEnd
41023>>>>>>>>>        
41023>>>>>>>>>        If (hoStore = 0) ;            Move Current_object to hoStore
41026>>>>>>>>>        
41026>>>>>>>>>        Send Delete_Data to hoStore
41027>>>>>>>>>        Move (Pos("{", sOutConnStr)) to iStart
41028>>>>>>>>>        While (iStart > 0)
41032>>>>>>>>>            Move (Right(sOutConnStr, Length(sOutConnStr) - iStart)) to sOutConnStr
41033>>>>>>>>>            If (Left(sOutConnStr, 1) = "}") ;                Move 0 to iStart
41036>>>>>>>>>            Else Begin
41037>>>>>>>>>                Move (Pos(",", sOutConnStr)) to iStart
41038>>>>>>>>>                Move (Pos("}", sOutConnStr)) to iEnd
41039>>>>>>>>>                If ((iStart = 0) or (iEnd < iStart)) ;                    Move iEnd to iStart
41042>>>>>>>>>                
41042>>>>>>>>>                If (iStart > 0) ;                    Set Value of hoStore  (Item_Count(Current_Object)) to (Left(sOutConnStr, iStart - 1))
41045>>>>>>>>>                
41045>>>>>>>>>                If (iStart = iEnd) ;                    Move 0 to iStart
41048>>>>>>>>>            End
41048>>>>>>>>>>
41048>>>>>>>>>        Loop
41049>>>>>>>>>>
41049>>>>>>>>>        
41049>>>>>>>>>        Function_Return (Item_Count(hoStore))
41050>>>>>>>>>    End_Procedure
41051>>>>>>>>>    
41051>>>>>>>>>    
41051>>>>>>>>>    
41051>>>>>>>>>    //   Call the driver's browse connect function
41051>>>>>>>>>    Function BrowseConnect String sInConnStr Returns String
41053>>>>>>>>>        String  sDriver
41053>>>>>>>>>        String  sOutConnStr
41053>>>>>>>>>        Integer iArg
41053>>>>>>>>>        Integer iRetval
41053>>>>>>>>>        
41053>>>>>>>>>        Get psDriverID to sDriver
41054>>>>>>>>>        If (sDriver <> "") Begin
41056>>>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
41057>>>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
41062>>>>>>>>>        End
41062>>>>>>>>>>
41062>>>>>>>>>        
41062>>>>>>>>>        Function_Return sOutConnStr
41063>>>>>>>>>    End_Function// BrowseConnect
41064>>>>>>>>>    
41064>>>>>>>>>    
41064>>>>>>>>>    Function BrowseConnectLocal String sInConnStr Returns String
41066>>>>>>>>>        String  sDriver
41066>>>>>>>>>        String  sOutConnStr
41066>>>>>>>>>        Integer iArg
41066>>>>>>>>>        Integer iRetval
41066>>>>>>>>>        
41066>>>>>>>>>        Move 1 to iArg // Browses only local
41067>>>>>>>>>        
41067>>>>>>>>>        Get psDriverID to sDriver
41068>>>>>>>>>        If (sDriver <> "") Begin
41070>>>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
41071>>>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
41076>>>>>>>>>        End
41076>>>>>>>>>>
41076>>>>>>>>>        
41076>>>>>>>>>        Function_Return sOutConnStr
41077>>>>>>>>>    End_Function// BrowseConnect
41078>>>>>>>>>    
41078>>>>>>>>>    
41078>>>>>>>>>    Function EnumerateServersNetworkOrLocal Integer iNetworkLocal  Returns Integer
41080>>>>>>>>>        String  sServerList
41080>>>>>>>>>        Integer iNumServers
41080>>>>>>>>>        Integer iDriver
41080>>>>>>>>>        Integer iClientVersion
41080>>>>>>>>>        String  sDriver
41080>>>>>>>>>        
41080>>>>>>>>>        Get DriverIndex MSSQLDRV_ID to iDriver
41081>>>>>>>>>        
41081>>>>>>>>>        If (iDriver) Begin
41083>>>>>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
41086>>>>>>>>>            
41086>>>>>>>>>            Get SqlServerClientDriverName iClientVersion to sDriver
41087>>>>>>>>>            
41087>>>>>>>>>            Move ("DRIVER={" + sDriver + "};") to sDriver
41088>>>>>>>>>            If (iNetworkLocal = 0) Begin
41090>>>>>>>>>                Get BrowseConnect sDriver to sServerList
41091>>>>>>>>>            End
41091>>>>>>>>>>
41091>>>>>>>>>            Else Begin
41092>>>>>>>>>                Get BrowseConnectLocal sDriver to sServerList
41093>>>>>>>>>            End
41093>>>>>>>>>>
41093>>>>>>>>>            Get ExtractList sServerList Current_object to iNumServers
41094>>>>>>>>>        End
41094>>>>>>>>>>
41094>>>>>>>>>        
41094>>>>>>>>>        Function_Return iNumServers
41095>>>>>>>>>    End_Function
41096>>>>>>>>>    
41096>>>>>>>>>    //   Enumerate the available SQL Server database servers
41096>>>>>>>>>    //   This function will return all SQL Server instances on the network.
41096>>>>>>>>>    //   This may take a long time.
41096>>>>>>>>>    //   To enumerate only local SQL Server instances use EnumerateServersLocal
41096>>>>>>>>>    Function EnumerateServers Returns Integer
41098>>>>>>>>>        Integer iNumServers
41098>>>>>>>>>        Integer iNetworkLocal
41098>>>>>>>>>        
41098>>>>>>>>>        Move 0 to iNetworkLocal // 0 = enumerate network servers
41099>>>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
41100>>>>>>>>>
41100>>>>>>>>>        Function_Return iNumServers
41101>>>>>>>>>    End_Function
41102>>>>>>>>>    
41102>>>>>>>>>    //   Enumerate the available SQL Server database servers
41102>>>>>>>>>    //   This function will return only return SQL Server instance on the local machine
41102>>>>>>>>>    //   To enumerate all SQL Server instances in a network use EnumerateServers
41102>>>>>>>>>    Function EnumerateServersLocal Returns Integer
41104>>>>>>>>>        Integer iNumServers
41104>>>>>>>>>        Integer iNetworkLocal
41104>>>>>>>>>        
41104>>>>>>>>>        Move 1 to iNetworkLocal // 1 = enumerate local servers
41105>>>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
41106>>>>>>>>>        
41106>>>>>>>>>        Function_Return iNumServers
41107>>>>>>>>>    End_Function
41108>>>>>>>>>    
41108>>>>>>>>>    //   Enumerate database in a given server.
41108>>>>>>>>>    Function EnumerateDatabases String sServer String sUser String sPassWord Returns Integer
41110>>>>>>>>>        Integer hoSQL
41110>>>>>>>>>        String  sConnect
41110>>>>>>>>>        String  sDatabase
41110>>>>>>>>>        Integer hdbc
41110>>>>>>>>>        Integer hstmt
41110>>>>>>>>>        Integer iFetchResult iDriver iClientVersion
41110>>>>>>>>>        
41110>>>>>>>>>        If (Num_Arguments < 3) ;            Move "" to sPassWord
41113>>>>>>>>>        If (Num_Arguments < 2) ;            Move "" to sUser
41116>>>>>>>>>        
41116>>>>>>>>>        If (sUser <> "") ;            Move ("SERVER=" + Trim(sServer) + ";UID=" + Trim(sUser) + ";PWD=" + Trim(sPassword) + ";") to sConnect
41119>>>>>>>>>        Else ;            Move ("SERVER=" + Trim(sServer) + ";Trusted_Connection=yes") to sConnect
41121>>>>>>>>>
41121>>>>>>>>>        Get DriverIndex MSSQLDRV_ID to iDriver
41122>>>>>>>>>        Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
41125>>>>>>>>>        If (iClientVersion >= 18) Begin
41127>>>>>>>>>            Append sConnect ";Encrypt=Optional;TrustServerCertificate=Yes"
41128>>>>>>>>>            Move (Replaces(" ", sConnect, "")) to sConnect
41129>>>>>>>>>        End
41129>>>>>>>>>>
41129>>>>>>>>>        
41129>>>>>>>>>        Object oEnumDBSQLmanager is a cSQLHandleManager
41131>>>>>>>>>            Move Current_Object to hoSQL
41132>>>>>>>>>        End_Object
41133>>>>>>>>>        
41133>>>>>>>>>        If (hoSQL <> 0) Begin
41135>>>>>>>>>            Get SQLConnect of hoSQL "MSSQLDRV" sConnect to hdbc
41136>>>>>>>>>            If (hdbc <> 0) Begin
41138>>>>>>>>>                Get SQLOpen of hdbc to hstmt
41139>>>>>>>>>                If (hstmt <> 0) Begin
41141>>>>>>>>>                    //   We could do a direct select on the sysdatabases table but we use
41141>>>>>>>>>                    //   the stored procedure sp_database instead. SQL Server recommends this
41141>>>>>>>>>                    //   approach in case meta data might change, the stored procedure will
41141>>>>>>>>>                    //   stay the same.
41141>>>>>>>>>                    Send SQLSetProcedureName to hstmt "sp_databases"
41142>>>>>>>>>                    Send SQLCall to hstmt
41143>>>>>>>>>                    Repeat
41143>>>>>>>>>>
41143>>>>>>>>>                        Get SQLFetch of hstmt to iFetchResult
41144>>>>>>>>>                        If (iFetchResult <> 0) Begin
41146>>>>>>>>>                            Get SQLColumnValue of hstmt 1 to sDatabase
41147>>>>>>>>>                            Set Value  (Item_Count(Current_Object)) to sDatabase
41148>>>>>>>>>                        End
41148>>>>>>>>>>
41148>>>>>>>>>                    Until (iFetchResult = 0)
41150>>>>>>>>>                    
41150>>>>>>>>>                    Send SQLClose to hstmt
41151>>>>>>>>>                End
41151>>>>>>>>>>
41151>>>>>>>>>                Send SQLDisconnect to hdbc
41152>>>>>>>>>            End
41152>>>>>>>>>>
41152>>>>>>>>>        End
41152>>>>>>>>>>
41152>>>>>>>>>        Send Destroy_Object to hoSQL
41153>>>>>>>>>        
41153>>>>>>>>>        Function_Return (Item_Count(Current_Object))
41154>>>>>>>>>    End_Function
41155>>>>>>>>>    
41155>>>>>>>>>    Function SqlServerClientVersionName Integer iClientVersion  Returns String
41157>>>>>>>>>        String  sSqlServerClientVersionName
41157>>>>>>>>>        
41157>>>>>>>>>        Case Begin
41157>>>>>>>>>            Case (iClientVersion = SQLSERVER2019CLIENT)
41159>>>>>>>>>                Move SQLSERVER2019CLIENTNAME to sSqlServerClientVersionName
41160>>>>>>>>>                Case Break
41161>>>>>>>>>            
41161>>>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
41164>>>>>>>>>                Move SQLSERVER2017CLIENTNAME to sSqlServerClientVersionName
41165>>>>>>>>>                Case Break
41166>>>>>>>>>                
41166>>>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
41169>>>>>>>>>                Move SQLSERVER2016CLIENTNAME to sSqlServerClientVersionName
41170>>>>>>>>>                Case Break
41171>>>>>>>>>            
41171>>>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
41174>>>>>>>>>                Move SQLSERVER2014CLIENTNAME to sSqlServerClientVersionName
41175>>>>>>>>>                Case Break
41176>>>>>>>>>            
41176>>>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
41179>>>>>>>>>                Move SQLSERVER2012CLIENTNAME to sSqlServerClientVersionName
41180>>>>>>>>>                Case Break
41181>>>>>>>>>            
41181>>>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
41184>>>>>>>>>                Move SQLSERVER2008CLIENTNAME to sSqlServerClientVersionName
41185>>>>>>>>>                Case Break
41186>>>>>>>>>            
41186>>>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
41189>>>>>>>>>                Move SQLSERVER2005CLIENTNAME to sSqlServerClientVersionName
41190>>>>>>>>>                Case Break
41191>>>>>>>>>            
41191>>>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
41194>>>>>>>>>                Move SQLSERVER2000CLIENTNAME to sSqlServerClientVersionName
41195>>>>>>>>>                Case Break
41196>>>>>>>>>            
41196>>>>>>>>>            Case Else
41196>>>>>>>>>                Move (SFormat("%1 (version %2) ",SQLSERVERUNKNOWNCLIENTNAME,iClientVersion)) to sSqlServerClientVersionName
41197>>>>>>>>>        Case End
41197>>>>>>>>>        
41197>>>>>>>>>        Function_Return sSqlServerClientVersionName
41198>>>>>>>>>    End_Function
41199>>>>>>>>>
41199>>>>>>>>>    Function SqlServerClientDriverName Integer iClientVersion  Returns String
41201>>>>>>>>>        String  sSqlServerClientDriverName
41201>>>>>>>>>        
41201>>>>>>>>>        Case Begin
41201>>>>>>>>>            Case (iClientVersion = SQLSERVER2019CLIENT)
41203>>>>>>>>>                Move SQLSERVER2019DRVRSTR to sSqlServerClientDriverName
41204>>>>>>>>>                Case Break
41205>>>>>>>>>
41205>>>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
41208>>>>>>>>>                Move SQLSERVER2017DRVRSTR to sSqlServerClientDriverName
41209>>>>>>>>>                Case Break
41210>>>>>>>>>                
41210>>>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
41213>>>>>>>>>                Move SQLSERVER2016DRVRSTR to sSqlServerClientDriverName
41214>>>>>>>>>                Case Break
41215>>>>>>>>>            
41215>>>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
41218>>>>>>>>>                Move SQLSERVER2014DRVRSTR to sSqlServerClientDriverName
41219>>>>>>>>>                Case Break
41220>>>>>>>>>            
41220>>>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
41223>>>>>>>>>                Move SQLSERVER2012DRVRSTR to sSqlServerClientDriverName
41224>>>>>>>>>                Case Break
41225>>>>>>>>>            
41225>>>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
41228>>>>>>>>>                Move SQLSERVER2008DRVRSTR to sSqlServerClientDriverName
41229>>>>>>>>>                Case Break
41230>>>>>>>>>            
41230>>>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
41233>>>>>>>>>                Move SQLSERVER2005DRVRSTR to sSqlServerClientDriverName
41234>>>>>>>>>                Case Break
41235>>>>>>>>>            
41235>>>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
41238>>>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
41239>>>>>>>>>                Case Break
41240>>>>>>>>>            
41240>>>>>>>>>            Case Else
41240>>>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
41241>>>>>>>>>        Case End
41241>>>>>>>>>        
41241>>>>>>>>>        Function_Return sSqlServerClientDriverName
41242>>>>>>>>>    End_Function
41243>>>>>>>>>    
41243>>>>>>>>>End_Class
41244>>>>>>>Use db2_drv.pkg
Including file: db2_drv.pkg    (C:\Program Files\DataFlex 24.0\Pkg\db2_drv.pkg)
41244>>>>>>>>>// DB2_DRV.PKG                                                          
41244>>>>>>>>>//   Package that declares DB2 driver constants and functions.          
41244>>>>>>>>>//   This package can be used by developers who want to add DB2 driver  
41244>>>>>>>>>//   specific code to a DataFlex application.                           
41244>>>>>>>>>
41244>>>>>>>>>Use Cli.pkg
41244>>>>>>>>>
41244>>>>>>>>>// Driver attributes
41244>>>>>>>>>
41244>>>>>>>>>
41244>>>>>>>>>// Driver Indentification
41244>>>>>>>>>
41244>>>>>>>>>// Error number constants
41244>>>>>>>>>
41244>>>>>>>>>// Call driver function identifiers
41244>>>>>>>>>
41244>>>>>>>>>// DB2 specific data types
41244>>>>>>>>>Define SQL_CLOB           for   (-99)
41244>>>>>>>>>Define SQL_BLOB           for   (-98)
41244>>>>>>>>>Define SQL_XML            for   (-370)
41244>>>>>>>>>// DB2 Graphic types are Unicode types
41244>>>>>>>>>Define SQL_GRAPHIC        for   (-95)
41244>>>>>>>>>Define SQL_VARGRAPHIC     for   (-96)
41244>>>>>>>>>Define SQL_LONGVARGRAPHIC for   (-97)
41244>>>>>>>>>Define SQL_DBCLOB         for   (-350)
41244>>>>>>>>>
41244>>>>>>>>>
41244>>>>>>>>>// Extra DB2 commands
41244>>>>>>>>>
41244>>>>>>>>>
41244>>>>>>>>>// DB2_SetConstraint <FileNum> <ConstraintText>                         
41244>>>>>>>>>//   Setup a constraint for a file.                                     
41244>>>>>>>>>
41244>>>>>>>>>
41244>>>>>>>>>
41244>>>>>>>>>Class cDB2Handler is a cCLIHandler
41245>>>>>>>>>    
41245>>>>>>>>>    Procedure Construct_Object
41247>>>>>>>>>        Forward Send Construct_Object
41249>>>>>>>>>        
41249>>>>>>>>>        Set psDriverID to DB2_DRV_ID
41250>>>>>>>>>    End_Procedure
41251>>>>>>>>>    
41251>>>>>>>>>    
41251>>>>>>>>>    
41251>>>>>>>>>    // Reset the datasource list to the beginning
41251>>>>>>>>>    Procedure SeedDataSources
41253>>>>>>>>>        String  sDriver
41253>>>>>>>>>        String  sVoid
41253>>>>>>>>>        Integer iRetval
41253>>>>>>>>>        
41253>>>>>>>>>        Get psDriverID to sDriver
41254>>>>>>>>>        If (sDriver <> "") ;            Call_Driver 0 sDRiver Function CLI_INITDATASOURCES Callback 0 Passing sVoid sVoid SQL_FETCH_ALL Result iRetval
41261>>>>>>>>>    End_Procedure
41262>>>>>>>>>    
41262>>>>>>>>>    
41262>>>>>>>>>    
41262>>>>>>>>>    // Call the driver's data sources function
41262>>>>>>>>>    Function DataSources Returns String
41264>>>>>>>>>        String  sDriver
41264>>>>>>>>>        String  sDataSource
41264>>>>>>>>>        String  sDescription
41264>>>>>>>>>        Integer iLength
41264>>>>>>>>>        Integer iRetval
41264>>>>>>>>>        
41264>>>>>>>>>        Get psDriverID to sDriver
41265>>>>>>>>>        If (sDriver <> "") Begin
41267>>>>>>>>>            Move 8192 to iLength
41268>>>>>>>>>            Move (Repeat(" ", iLength)) to sDataSource
41269>>>>>>>>>            Move (Repeat(" ", iLength)) to sDescription
41270>>>>>>>>>            Call_Driver 0 sDRiver Function CLI_DATASOURCES Callback 0 Passing sDataSource sDescription iLength Result iRetval
41275>>>>>>>>>        End
41275>>>>>>>>>>
41275>>>>>>>>>        
41275>>>>>>>>>        If (sDataSource <> "" or sDescription <> "") ;            Function_Return (sDataSource - (If(sDescription <> "", "," *  sDescription, "")))
41278>>>>>>>>>        Else ;            Function_Return ""
41280>>>>>>>>>    End_Function
41281>>>>>>>>>    
41281>>>>>>>>>End_Class
41282>>>>>>>Use odbc_drv.pkg
Including file: odbc_drv.pkg    (C:\Program Files\DataFlex 24.0\Pkg\odbc_drv.pkg)
41282>>>>>>>>>//   Package that declares ODBC driver constants and functions.         
41282>>>>>>>>>//   This package can be used by developers who want to add Data Access 
41282>>>>>>>>>//   ODBC Client specific code to a DataFlex application.               
41282>>>>>>>>>
41282>>>>>>>>>Use Cli.pkg
41282>>>>>>>>>
41282>>>>>>>>>// Driver Indentification
41282>>>>>>>>>
41282>>>>>>>>>// Error number constants
41282>>>>>>>>>
41282>>>>>>>>>// Call driver function identifiers
41282>>>>>>>>>
41282>>>>>>>>>Class cODBCHandler is a cCLIHandler
41283>>>>>>>>>    
41283>>>>>>>>>    Procedure Construct_Object
41285>>>>>>>>>        Forward Send Construct_Object
41287>>>>>>>>>        
41287>>>>>>>>>        Set psDriverID to ODBC_DRV_ID
41288>>>>>>>>>    End_Procedure
41289>>>>>>>>>    
41289>>>>>>>>>    
41289>>>>>>>>>    
41289>>>>>>>>>    // Setup the type of data sources returned by the datasources function
41289>>>>>>>>>    Procedure Set DataSourceType Integer iNewType
41291>>>>>>>>>        String  sDriver
41291>>>>>>>>>        String  sVoid
41291>>>>>>>>>        Integer iRetval
41291>>>>>>>>>        
41291>>>>>>>>>        Get psDriverID to sDriver
41292>>>>>>>>>        If (sDriver <> "") ;            Call_Driver 0 sDRiver Function CLI_INITDATASOURCES Callback 0 Passing sVoid sVoid iNewType Result iRetval
41299>>>>>>>>>    End_Procedure
41300>>>>>>>>>    
41300>>>>>>>>>    
41300>>>>>>>>>    // Call the driver's data sources function
41300>>>>>>>>>    Function DataSources Returns String
41302>>>>>>>>>        String  sDriver
41302>>>>>>>>>        String  sDataSource
41302>>>>>>>>>        String  sDescription
41302>>>>>>>>>        Integer iLength
41302>>>>>>>>>        Integer iRetval
41302>>>>>>>>>        
41302>>>>>>>>>        Get psDriverID to sDriver
41303>>>>>>>>>        If (sDriver <> "") Begin
41305>>>>>>>>>            Move 8192 to iLength
41306>>>>>>>>>            Move (Repeat(" ", iLength)) to sDataSource
41307>>>>>>>>>            Move (Repeat(" ", iLength)) to sDescription
41308>>>>>>>>>            Call_Driver 0 sDRiver Function CLI_DATASOURCES Callback 0 Passing sDataSource sDescription iLength Result iRetval
41313>>>>>>>>>        End
41313>>>>>>>>>>
41313>>>>>>>>>        
41313>>>>>>>>>        If (sDataSource <> "" or sDescription <> "") ;            Function_Return (sDataSource - (If(sDescription <> "", "," * sDescription, "")))
41316>>>>>>>>>        Else ;            Function_Return ""
41318>>>>>>>>>    End_Function
41319>>>>>>>>>    
41319>>>>>>>>>End_Class
41320>>>>>>>>>
41320>>>>>>>Use DFBTRDRV.PKG
Including file: DFBTRDRV.PKG    (C:\Program Files\DataFlex 24.0\Pkg\DFBTRDRV.PKG)
41320>>>>>>>>>// $File title : Package for the DataFlex Connectivity Kit for Pervasive.SQL
41320>>>>>>>>>// Notice      : This package contains constants and commands, used to call
41320>>>>>>>>>//               specific functions in the DFBTRDRV.
41320>>>>>>>>>Use Ui
41320>>>>>>>>>//
41320>>>>>>>>>// Driver Indentification
41320>>>>>>>>>//
41320>>>>>>>>>
41320>>>>>>>>>// Driver attributes
41320>>>>>>>>>//
41320>>>>>>>>>// Call_Driver functions ID's
41320>>>>>>>>>//
41320>>>>>>>>>//
41320>>>>>>>>>// DFBTRFN_CONVERT_FILE options
41320>>>>>>>>>//
41320>>>>>>>>>
41320>>>>>>>>>//
41320>>>>>>>>>// DFBTRFN_SET_OWNER options
41320>>>>>>>>>//
41320>>>>>>>>>
41320>>>>>>>>>//
41320>>>>>>>>>// DFBTRFN_SET_TRANSACTION_TYPE options
41320>>>>>>>>>//
41320>>>>>>>>>
41320>>>>>>>>>
41320>>>>>>>>>//
41320>>>>>>>>>// Command to create all vars which may be needed
41320>>>>>>>>>// in other commands.
41320>>>>>>>>>//
41320>>>>>>>>>
41320>>>>>>>>>
41320>>>>>>>>>
41320>>>>>>>>>//
41320>>>>>>>>>// Command to set the owner of a Btrieve file.
41320>>>>>>>>>// File must have been opened.
41320>>>>>>>>>// Filenumber needs to be passed.
41320>>>>>>>>>// To clear set the owner to "".
41320>>>>>>>>>// Examples:
41320>>>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret"
41320>>>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY CALLBACK MyCallBack
41320>>>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" ENCRYPT
41320>>>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY ENCRYPT CALLBACK MyCallBack
41320>>>>>>>>>// To clear:
41320>>>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to ""
41320>>>>>>>>>//
41320>>>>>>>>>
41320>>>>>>>>>
41320>>>>>>>>>
41320>>>>>>>>>//
41320>>>>>>>>>// Command to parse DFBTR_SET_OWNVER
41320>>>>>>>>>// options.
41320>>>>>>>>>//
41320>>>>>>>>>
41320>>>>>>>>>
41320>>>>>>>>>
41320>>>>>>>>>//
41320>>>>>>>>>// Command to parse for Callback
41320>>>>>>>>>//
41320>>>>>>>>>
41320>>>>>>>>>
41320>>>>>>>>>
41320>>>>>>>>>//
41320>>>>>>>>>// Command to clear the owner of a Btrieve file.
41320>>>>>>>>>// File must have been opened.
41320>>>>>>>>>// Filenumber needs to be passed.
41320>>>>>>>>>// Examples:
41320>>>>>>>>>//      DFBTR_CLEAR_OWNER MyFileNumber
41320>>>>>>>>>//
41320>>>>>>>>>
41320>>>>>>>>>
41320>>>>>>>>>
41320>>>>>>>>>//
41320>>>>>>>>>// Command to add a owner name to the internal list of ownernames
41320>>>>>>>>>// which will be tries when opening files.
41320>>>>>>>>>//
41320>>>>>>>>>
41320>>>>>>>>>
41320>>>>>>>>>
41320>>>>>>>>>//
41320>>>>>>>>>// Command to remove all owners from the internal list of ownernames
41320>>>>>>>>>//
41320>>>>>>>>>
41320>>>>>>>>>
41320>>>>>>>>>//
41320>>>>>>>>>// Command to set the owner name to be used when opening the DDF files.
41320>>>>>>>>>// The DDF owner is required when Pervasive.SQL security is turned on.
41320>>>>>>>>>// The DDF owner is equal to the password of the Master user in Pervasive.SQL
41320>>>>>>>>>// This command overwrites the DDF_OWNER setting in DFBTRDRV.INT
41320>>>>>>>>>//
41320>>>>>>>>>
41320>>>>>>>>>//
41320>>>>>>>>>// Command to change the transaction type.
41320>>>>>>>>>// Valid types are:
41320>>>>>>>>>//     DFBTRTT_NONE
41320>>>>>>>>>//     DFBTRTT_EXCLUSIVE
41320>>>>>>>>>//     DFBTRTT_CONCURRENT
41320>>>>>>>>>//
41320>>>>>>>>>//
41320>>>>>>>>>
41320>>>>>>>>>
41320>>>>>>>>>
41320>>>>>>>>>//
41320>>>>>>>>>// Command to get the current transaction type.
41320>>>>>>>>>//
41320>>>>>>>>>
41320>>>>>>>>>//
41320>>>>>>>>>// Command to set explicit_locking
41320>>>>>>>>>//
41320>>>>>>>>>
41320>>>>>>>>>//
41320>>>>>>>>>// Command to get explicit locking
41320>>>>>>>>>//
41320>>>>>>>>>
41320>>>>>>>>>//
41320>>>>>>>>>// Command to set detection for incompatible positive signs in numeric fields
41320>>>>>>>>>//
41320>>>>>>>>>
41320>>>>>>>>>//
41320>>>>>>>>>// Command to get detection for incompatible positive signs in numeric fields
41320>>>>>>>>>//
41320>>>>>>>>>
41320>>>>>>>>>// Purpose: An instance of this class can be used as a broker object to
41320>>>>>>>>>//          call several Dfbtrdrv releated methods.
41320>>>>>>>>>
41320>>>>>>>>>Class cDFBtrDrvHandler is an Array
41321>>>>>>>>>    
41321>>>>>>>>>    Procedure Construct_Object Integer iImage
41323>>>>>>>>>        Forward Send Construct_object iImage
41325>>>>>>>>>        
41325>>>>>>>>>        Property String  psDriverID "DFBTRDRV"
41326>>>>>>>>>    End_Procedure
41327>>>>>>>>>    
41327>>>>>>>>>    //  The revsion of a Dfbtrdrv Connectivity Kit
41327>>>>>>>>>    //
41327>>>>>>>>>    
41327>>>>>>>>>    Function CKRevision Returns String
41329>>>>>>>>>        String  sDriverID
41329>>>>>>>>>        String  sRevision
41329>>>>>>>>>        String  sVoid
41329>>>>>>>>>        Integer iRetval
41329>>>>>>>>>        
41329>>>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41329>>>>>>>>>        // This error would otherwise be raised when we have an older
41329>>>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
41329>>>>>>>>>        Send Ignore_error to Error_object_Id 20491
41330>>>>>>>>>        Get psDriverID to sDriverID
41331>>>>>>>>>        Move (Repeat(" ", 255)) to sRevision
41332>>>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKREVISION Callback 0 Passing sRevision sVoid 0 Result iRetval
41337>>>>>>>>>        Send Trap_Error to Error_object_Id 20491
41338>>>>>>>>>        If (Trim(sRevision) = "") Begin
41340>>>>>>>>>            // Unable to get the revision. return all zeroes.
41340>>>>>>>>>            Move "0.0.0.0" to sRevision
41341>>>>>>>>>        End
41341>>>>>>>>>>
41341>>>>>>>>>        Function_Return sRevision
41342>>>>>>>>>    End_Function
41343>>>>>>>>>    
41343>>>>>>>>>    Function CkUsesUri Returns Integer
41345>>>>>>>>>        String  sDriverID
41345>>>>>>>>>        String  sVoid1
41345>>>>>>>>>        String  sVoid2
41345>>>>>>>>>        Integer iRetval
41345>>>>>>>>>        
41345>>>>>>>>>        Get psDriverID to sDriverID
41346>>>>>>>>>        
41346>>>>>>>>>        Move 0 to iRetval
41347>>>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41347>>>>>>>>>        // This error would otherwise be raised when we have an older
41347>>>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKUSESURI function
41347>>>>>>>>>        Send Ignore_error to Error_object_Id 20491
41348>>>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKUSESURI Callback 0 Passing sVoid1 sVoid2 0 Result iRetval
41353>>>>>>>>>        Send Trap_Error to Error_object_Id 20491
41354>>>>>>>>>        
41354>>>>>>>>>        Function_Return iRetval
41355>>>>>>>>>    End_Function
41356>>>>>>>>>    
41356>>>>>>>>>    
41356>>>>>>>>>    
41356>>>>>>>>>    // Extract the Nth part of a a.b.c.d revsion string.
41356>>>>>>>>>    //
41356>>>>>>>>>    // Returns : The part version number or -1 if there is no such part number.
41356>>>>>>>>>    //
41356>>>>>>>>>    
41356>>>>>>>>>    Function ExtractPartFromRevision Integer iPartNum String sRevision Returns Integer
41358>>>>>>>>>        Integer iPartRev
41358>>>>>>>>>        Integer iCurrentPart
41358>>>>>>>>>        Integer iSeparatorPos
41358>>>>>>>>>        
41358>>>>>>>>>        If (iPartNum > 4) ;            Function_Return -1
41361>>>>>>>>>        
41361>>>>>>>>>        Move 0 to iCurrentPart
41362>>>>>>>>>        Repeat
41362>>>>>>>>>>
41362>>>>>>>>>            Move (Pos(".", sRevision)) to iSeparatorPos
41363>>>>>>>>>            If (iSeparatorPos > 0) Begin
41365>>>>>>>>>                Move (Left(sRevision, iSeparatorPos - 1)) to iPartRev
41366>>>>>>>>>                Move (Right(sRevision, Length(sRevision) - iSeparatorPos)) to sRevision
41367>>>>>>>>>                Increment iCurrentPart
41368>>>>>>>>>            End
41368>>>>>>>>>>
41368>>>>>>>>>            Else If (sRevision <> "") Begin
41371>>>>>>>>>                Move sRevision to iPartRev
41372>>>>>>>>>                Move "" to sRevision
41373>>>>>>>>>                Increment iCurrentPart
41374>>>>>>>>>            End
41374>>>>>>>>>>
41374>>>>>>>>>            Else ;                Move -1 to iPartRev
41376>>>>>>>>>        Until (iCurrentPart >= iPartNum or iPartRev = -1)
41378>>>>>>>>>        
41378>>>>>>>>>        Function_Return iPartRev
41379>>>>>>>>>    End_Function
41380>>>>>>>>>    
41380>>>>>>>>>    
41380>>>>>>>>>    
41380>>>>>>>>>    //
41380>>>>>>>>>    //  Returns the major revision of the CK
41380>>>>>>>>>    //
41380>>>>>>>>>    
41380>>>>>>>>>    Function CKMajorRevision Returns Integer
41382>>>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 1, CKRevision(Current_Object)))
41383>>>>>>>>>    End_Function
41384>>>>>>>>>    
41384>>>>>>>>>    
41384>>>>>>>>>    
41384>>>>>>>>>    //  Returns the minor revision of the CK
41384>>>>>>>>>    //
41384>>>>>>>>>    
41384>>>>>>>>>    Function CKMinorRevision Returns Integer
41386>>>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 2, CKRevision(Current_Object)))
41387>>>>>>>>>    End_Function
41388>>>>>>>>>    
41388>>>>>>>>>    
41388>>>>>>>>>    //  Returns the release revision of the CK
41388>>>>>>>>>    //
41388>>>>>>>>>    
41388>>>>>>>>>    Function CKReleaseRevision Returns Integer
41390>>>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 3, CKRevision(Current_Object)))
41391>>>>>>>>>    End_Function
41392>>>>>>>>>    
41392>>>>>>>>>    
41392>>>>>>>>>    //  Returns the major revision of the CK
41392>>>>>>>>>    //
41392>>>>>>>>>    
41392>>>>>>>>>    Function CKBuildRevision Returns Integer
41394>>>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 4, CKRevision(Current_Object)))
41395>>>>>>>>>    End_Function
41396>>>>>>>>>    
41396>>>>>>>>>    
41396>>>>>>>>>    //  Determines if the CK conforms to a passed minimal revsion.
41396>>>>>>>>>    //
41396>>>>>>>>>    
41396>>>>>>>>>    Function IsMinimalRevision Integer iMajor Integer iMinor Integer iRelease Integer iBuild Returns Integer
41398>>>>>>>>>        If (iMajor < CKMajorRevision(Current_object)) ;            Function_Return (True)
41401>>>>>>>>>        Else If (iMajor = CKMajorRevision(Current_object)) Begin
41404>>>>>>>>>            If (iMinor < CKMinorRevision(Current_object)) ;                Function_Return (True)
41407>>>>>>>>>            Else If (iMinor = CKMinorRevision(Current_object)) Begin
41410>>>>>>>>>                If (iRelease < CKReleaseRevision(Current_object)) ;                    Function_Return (True)
41413>>>>>>>>>                Else If (iRelease = CKReleaseRevision(Current_object) and iBuild <= CKBuildRevision(Current_object)) ;                    Function_Return (True)
41417>>>>>>>>>            End
41417>>>>>>>>>>
41417>>>>>>>>>        End
41417>>>>>>>>>>
41417>>>>>>>>>        
41417>>>>>>>>>        Function_Return (False)
41418>>>>>>>>>    End_Function
41419>>>>>>>>>    
41419>>>>>>>>>    //   Functions to query the Pervasive.SQL version:
41419>>>>>>>>>    //       PSQLRequesterVersionInfo    Integer iFileNum Returns String
41419>>>>>>>>>    //       PSQLLocalEngineVersionInfo  Integer iFileNum Returns String
41419>>>>>>>>>    //       PSQLServerEngineVersionInfo Integer iFileNum Returns String
41419>>>>>>>>>    //
41419>>>>>>>>>    //   All 3 functions return the version of a Pervasive.SQL component
41419>>>>>>>>>    //   in the following format:
41419>>>>>>>>>    //       <version>.<revision>.<type>
41419>>>>>>>>>    //   possible values for <type>:
41419>>>>>>>>>    //       9 for 32-bit Windows workstation/workgroup engine or Linux
41419>>>>>>>>>    //         server using Workgroup authentication mode
41419>>>>>>>>>    //       C for client cache engine
41419>>>>>>>>>    //       D for DOS workstation
41419>>>>>>>>>    //       N for client Requester
41419>>>>>>>>>    //       S for NetWare server
41419>>>>>>>>>    //       T for 32-bit Windows server engine
41419>>>>>>>>>    //       U for Linux server using PAM or BTPASSWD authentication
41419>>>>>>>>>    //
41419>>>>>>>>>    //   example:
41419>>>>>>>>>    //       8.50.T
41419>>>>>>>>>    //   will be returned for a Pervasive.SQL 8.5 Server Engine running on
41419>>>>>>>>>    //   32-bits Windows server.
41419>>>>>>>>>    //
41419>>>>>>>>>    //   The FileNumber parameter must specify an opened table or 0.
41419>>>>>>>>>    //   For PSQLServerEngineVersionInfo the FileNumber can not be 0.
41419>>>>>>>>>    //
41419>>>>>>>>>    //   If the version information is not available or can not be obtained
41419>>>>>>>>>    //   the functions will return "0.0.0"
41419>>>>>>>>>    
41419>>>>>>>>>    //  Returns the version information of the
41419>>>>>>>>>    //           Pervasive.SQL Client requester.
41419>>>>>>>>>    
41419>>>>>>>>>    Function PSQLRequesterVersionInfo Integer iFileNum Returns String
41421>>>>>>>>>        
41421>>>>>>>>>        String  sDriverID
41421>>>>>>>>>        String  sVersion
41421>>>>>>>>>        String  sVoid
41421>>>>>>>>>        Integer iRetval
41421>>>>>>>>>        
41421>>>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41421>>>>>>>>>        // This error would otherwise be raised when we have an older
41421>>>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
41421>>>>>>>>>        Send Ignore_error to Error_object_Id 20491
41422>>>>>>>>>        Get psDriverID to sDriverID
41423>>>>>>>>>        Move (Repeat(" ", 255)) to sVersion
41424>>>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLREQUESTERVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
41429>>>>>>>>>        Send Trap_Error to Error_object_Id 20491
41430>>>>>>>>>        If (Trim(sVersion) = "") Begin
41432>>>>>>>>>            // Unable to get the revision. return all zeroes.
41432>>>>>>>>>            Move "0.0.0" to sVersion
41433>>>>>>>>>        End
41433>>>>>>>>>>
41433>>>>>>>>>        Function_Return sVersion
41434>>>>>>>>>    End_Function
41435>>>>>>>>>    
41435>>>>>>>>>    //           Pervasive.SQL Engine
41435>>>>>>>>>    
41435>>>>>>>>>    Function PSQLLocalEngineVersionInfo Integer iFileNum Returns String
41437>>>>>>>>>        
41437>>>>>>>>>        String  sDriverID
41437>>>>>>>>>        String  sVersion
41437>>>>>>>>>        String  sVoid
41437>>>>>>>>>        Integer iRetval
41437>>>>>>>>>        
41437>>>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41437>>>>>>>>>        // This error would otherwise be raised when we have an older
41437>>>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
41437>>>>>>>>>        Send Ignore_error to Error_object_Id 20491
41438>>>>>>>>>        Get psDriverID to sDriverID
41439>>>>>>>>>        Move (Repeat(" ", 255)) to sVersion
41440>>>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLLOCALENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
41445>>>>>>>>>        Send Trap_Error to Error_object_Id 20491
41446>>>>>>>>>        If (Trim(sVersion) = "") Begin
41448>>>>>>>>>            // Unable to get the revision. return all zeroes.
41448>>>>>>>>>            Move "0.0.0" to sVersion
41449>>>>>>>>>        End
41449>>>>>>>>>>
41449>>>>>>>>>        Function_Return sVersion
41450>>>>>>>>>    End_Function
41451>>>>>>>>>    
41451>>>>>>>>>    //  Returns the version information of the
41451>>>>>>>>>    //           Pervasive.SQL Server Engine
41451>>>>>>>>>    
41451>>>>>>>>>    Function PSQLServerEngineVersionInfo Integer iFileNum Returns String
41453>>>>>>>>>        
41453>>>>>>>>>        String  sDriverID
41453>>>>>>>>>        String  sVersion
41453>>>>>>>>>        String  sVoid
41453>>>>>>>>>        Integer iRetval
41453>>>>>>>>>        
41453>>>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41453>>>>>>>>>        // This error would otherwise be raised when we have an older
41453>>>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
41453>>>>>>>>>        Send Ignore_error to Error_object_Id 20491
41454>>>>>>>>>        Get psDriverID to sDriverID
41455>>>>>>>>>        Move (Repeat(" ", 255)) to sVersion
41456>>>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLSERVERENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
41461>>>>>>>>>        Send Trap_Error to Error_object_Id 20491
41462>>>>>>>>>        If (Trim(sVersion) = "") Begin
41464>>>>>>>>>            // Unable to get the revision. return all zeroes.
41464>>>>>>>>>            Move "0.0.0" to sVersion
41465>>>>>>>>>        End
41465>>>>>>>>>>
41465>>>>>>>>>        Function_Return sVersion
41466>>>>>>>>>    End_Function
41467>>>>>>>>>    
41467>>>>>>>>>End_Class
41468>>>>>>>>>
41468>>>>>>>>>
41468>>>>>>>Use cSQLConnectionIniFile.inc
Including file: cSQLConnectionIniFile.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cSQLConnectionIniFile.inc)
41468>>>>>>>>>//****************************************************************************
41468>>>>>>>>>// $Module type: Include file
41468>>>>>>>>>// $Module name: cSQLConnectionIniFile.inc
41468>>>>>>>>>//
41468>>>>>>>>>// $Author     : Nils Svedmyr, RDC Tools International.
41468>>>>>>>>>// Copyright (c) 2012 RDC Tools International
41468>>>>>>>>>// E-mail      : support@rdctools.com
41468>>>>>>>>>// Web-site    : http://www.rdctools.com
41468>>>>>>>>>//
41468>>>>>>>>>// Created     : 2017-01-18 @ 13:04 (Military date format - Year-Month-Day)
41468>>>>>>>>>//
41468>>>>>>>>>// Note        : Header file with constant declarations for the cSQLConnectionIniFile class.
41468>>>>>>>>>//
41468>>>>>>>>>// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
41468>>>>>>>>>// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
41468>>>>>>>>>// This is free software; you can redistribute it and/or modify it under the terms of the
41468>>>>>>>>>// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
41468>>>>>>>>>// in the help folder for more details.
41468>>>>>>>>>//
41468>>>>>>>>>Use Winkern.pkg
41468>>>>>>>>>Use cIniFile.pkg
41468>>>>>>>>>    Use cCryptographerEx.pkg
Including file: cCryptographerEx.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCryptographerEx.pkg)
41468>>>>>>>>>>>Use VdfBase.pkg
41468>>>>>>>>>>>
41468>>>>>>>>>>>Use CryptographerConstants.pkg
Including file: CryptographerConstants.pkg    (C:\Program Files\DataFlex 24.0\Pkg\CryptographerConstants.pkg)
41468>>>>>>>>>>>>>//   Author  : Ulbe Stellema
41468>>>>>>>>>>>>>// Algorithm classes
41468>>>>>>>>>>>>>Define ALG_CLASS_ANY                    for |CI$00000000 // (0)
41468>>>>>>>>>>>>>Define ALG_CLASS_SIGNATURE              for |CI$00002000 // (1 << 13)
41468>>>>>>>>>>>>>Define ALG_CLASS_MSG_ENCRYPT            for |CI$00004000 // (2 << 13)
41468>>>>>>>>>>>>>Define ALG_CLASS_DATA_ENCRYPT           for |CI$00006000 // (3 << 13)
41468>>>>>>>>>>>>>Define ALG_CLASS_HASH                   for |CI$00008000 // (4 << 13)
41468>>>>>>>>>>>>>Define ALG_CLASS_KEY_EXCHANGE           for |CI$0000A000 // (5 << 13)
41468>>>>>>>>>>>>>Define ALG_CLASS_ALL                    for |CI$0000E000 // (7 << 13)
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// Algorithm types
41468>>>>>>>>>>>>>Define ALG_TYPE_ANY                     for |CI$00000000 // (0)
41468>>>>>>>>>>>>>Define ALG_TYPE_DSS                     for |CI$00000200 // (1 << 9)
41468>>>>>>>>>>>>>Define ALG_TYPE_RSA                     for |CI$00000400 // (2 << 9)
41468>>>>>>>>>>>>>Define ALG_TYPE_BLOCK                   for |CI$00000600 // (3 << 9)
41468>>>>>>>>>>>>>Define ALG_TYPE_STREAM                  for |CI$00000800 // (4 << 9)
41468>>>>>>>>>>>>>Define ALG_TYPE_DH                      for |CI$00000A00 // (5 << 9)
41468>>>>>>>>>>>>>Define ALG_TYPE_SECURECHANNEL           for |CI$00000C00 // (6 << 9)
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// Generic sub-ids
41468>>>>>>>>>>>>>Define ALG_SID_ANY                      for |CI$00000000 // (0)
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// RSA sub-ids
41468>>>>>>>>>>>>>Define ALG_SID_RSA_ANY                  for 0
41468>>>>>>>>>>>>>Define ALG_SID_RSA_PKCS                 for 1
41468>>>>>>>>>>>>>Define ALG_SID_RSA_MSATWORK             for 2
41468>>>>>>>>>>>>>Define ALG_SID_RSA_ENTRUST              for 3
41468>>>>>>>>>>>>>Define ALG_SID_RSA_PGP                  for 4
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// DSS sub-ids
41468>>>>>>>>>>>>>Define ALG_SID_DSS_ANY                  for 0
41468>>>>>>>>>>>>>Define ALG_SID_DSS_PKCS                 for 1
41468>>>>>>>>>>>>>Define ALG_SID_DSS_DMS                  for 2
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// DES sub_ids
41468>>>>>>>>>>>>>Define ALG_SID_DES                      for 1
41468>>>>>>>>>>>>>Define ALG_SID_3DES                     for 3
41468>>>>>>>>>>>>>Define ALG_SID_DESX                     for 4
41468>>>>>>>>>>>>>Define ALG_SID_IDEA                     for 5
41468>>>>>>>>>>>>>Define ALG_SID_CAST                     for 6
41468>>>>>>>>>>>>>Define ALG_SID_SAFERSK64                for 7
41468>>>>>>>>>>>>>Define ALG_SID_SAFERSK128               for 8
41468>>>>>>>>>>>>>Define ALG_SID_3DES_112                 for 9
41468>>>>>>>>>>>>>Define ALG_SID_CYLINK_MEK               for 12
41468>>>>>>>>>>>>>Define ALG_SID_RC5                      for 13
41468>>>>>>>>>>>>>Define ALG_SID_AES_128                  for 14
41468>>>>>>>>>>>>>Define ALG_SID_AES_192                  for 15
41468>>>>>>>>>>>>>Define ALG_SID_AES_256                  for 16
41468>>>>>>>>>>>>>Define ALG_SID_AES                      for 17
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// Fortezza sub-ids
41468>>>>>>>>>>>>>Define ALG_SID_SKIPJACK                 for 10
41468>>>>>>>>>>>>>Define ALG_SID_TEK                      for 11
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// RC2 sub-ids
41468>>>>>>>>>>>>>Define ALG_SID_RC2                      for 2
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// Stream cipher sub-ids
41468>>>>>>>>>>>>>Define ALG_SID_RC4                      for 1
41468>>>>>>>>>>>>>Define ALG_SID_SEAL                     for 2
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// Diffie-Hellman sub-ids
41468>>>>>>>>>>>>>Define ALG_SID_DH_SANDF                 for 1
41468>>>>>>>>>>>>>Define ALG_SID_DH_EPHEM                 for 2
41468>>>>>>>>>>>>>Define ALG_SID_AGREED_KEY_ANY           for 3
41468>>>>>>>>>>>>>Define ALG_SID_KEA                      for 4
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// Hash sub ids
41468>>>>>>>>>>>>>Define ALG_SID_MD2                      for 1
41468>>>>>>>>>>>>>Define ALG_SID_MD4                      for 2
41468>>>>>>>>>>>>>Define ALG_SID_MD5                      for 3
41468>>>>>>>>>>>>>Define ALG_SID_SHA                      for 4
41468>>>>>>>>>>>>>Define ALG_SID_SHA1                     for 4
41468>>>>>>>>>>>>>Define ALG_SID_MAC                      for 5
41468>>>>>>>>>>>>>Define ALG_SID_RIPEMD                   for 6
41468>>>>>>>>>>>>>Define ALG_SID_RIPEMD160                for 7
41468>>>>>>>>>>>>>Define ALG_SID_SSL3SHAMD5               for 8
41468>>>>>>>>>>>>>Define ALG_SID_HMAC                     for 9
41468>>>>>>>>>>>>>Define ALG_SID_TLS1PRF                  for 10
41468>>>>>>>>>>>>>Define ALG_SID_HASH_REPLACE_OWF         for 11
41468>>>>>>>>>>>>>Define ALG_SID_SHA_256                  for 12
41468>>>>>>>>>>>>>Define ALG_SID_SHA_384                  for 13
41468>>>>>>>>>>>>>Define ALG_SID_SHA_512                  for 14
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// secure channel sub ids
41468>>>>>>>>>>>>>Define ALG_SID_SSL3_MASTER              for 1
41468>>>>>>>>>>>>>Define ALG_SID_SCHANNEL_MASTER_HASH     for 2
41468>>>>>>>>>>>>>Define ALG_SID_SCHANNEL_MAC_KEY         for 3
41468>>>>>>>>>>>>>Define ALG_SID_PCT1_MASTER              for 4
41468>>>>>>>>>>>>>Define ALG_SID_SSL2_MASTER              for 5
41468>>>>>>>>>>>>>Define ALG_SID_TLS1_MASTER              for 6
41468>>>>>>>>>>>>>Define ALG_SID_SCHANNEL_ENC_KEY         for 7
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// algorithm identifier definitions
41468>>>>>>>>>>>>>Define CALG_MD2                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD2)
41468>>>>>>>>>>>>>Define CALG_MD4                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD4)
41468>>>>>>>>>>>>>Define CALG_MD5                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD5)
41468>>>>>>>>>>>>>Define CALG_SHA                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA)
41468>>>>>>>>>>>>>Define CALG_SHA1                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA1)
41468>>>>>>>>>>>>>Define CALG_MAC                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MAC)
41468>>>>>>>>>>>>>Define CALG_RSA_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
41468>>>>>>>>>>>>>Define CALG_DSS_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_DSS ior ALG_SID_DSS_ANY)
41468>>>>>>>>>>>>>Define CALG_NO_SIGN                     for (ALG_CLASS_SIGNATURE ior ALG_TYPE_ANY ior ALG_SID_ANY)
41468>>>>>>>>>>>>>Define CALG_RSA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
41468>>>>>>>>>>>>>Define CALG_DES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DES)
41468>>>>>>>>>>>>>Define CALG_3DES_112                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES_112)
41468>>>>>>>>>>>>>Define CALG_3DES                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES)
41468>>>>>>>>>>>>>Define CALG_DESX                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DESX)
41468>>>>>>>>>>>>>Define CALG_RC2                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC2)
41468>>>>>>>>>>>>>Define CALG_RC4                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_RC4)
41468>>>>>>>>>>>>>Define CALG_SEAL                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_SEAL)
41468>>>>>>>>>>>>>Define CALG_DH_SF                       for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_SANDF)
41468>>>>>>>>>>>>>Define CALG_DH_EPHEM                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_EPHEM)
41468>>>>>>>>>>>>>Define CALG_AGREEDKEY_ANY               for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_AGREED_KEY_ANY)
41468>>>>>>>>>>>>>Define CALG_KEA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_KEA)
41468>>>>>>>>>>>>>Define CALG_HUGHES_MD5                  for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_ANY ior ALG_SID_MD5)
41468>>>>>>>>>>>>>Define CALG_SKIPJACK                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_SKIPJACK)
41468>>>>>>>>>>>>>Define CALG_TEK                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_TEK)
41468>>>>>>>>>>>>>Define CALG_CYLINK_MEK                  for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_CYLINK_MEK)
41468>>>>>>>>>>>>>Define CALG_SSL3_SHAMD5                 for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SSL3SHAMD5)
41468>>>>>>>>>>>>>Define CALG_SSL3_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL3_MASTER)
41468>>>>>>>>>>>>>Define CALG_SCHANNEL_MASTER_HASH        for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MASTER_HASH)
41468>>>>>>>>>>>>>Define CALG_SCHANNEL_MAC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MAC_KEY)
41468>>>>>>>>>>>>>Define CALG_SCHANNEL_ENC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_ENC_KEY)
41468>>>>>>>>>>>>>Define CALG_PCT1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_PCT1_MASTER)
41468>>>>>>>>>>>>>Define CALG_SSL2_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL2_MASTER)
41468>>>>>>>>>>>>>Define CALG_TLS1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_TLS1_MASTER)
41468>>>>>>>>>>>>>Define CALG_RC5                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC5)
41468>>>>>>>>>>>>>Define CALG_HMAC                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HMAC)
41468>>>>>>>>>>>>>Define CALG_TLS1PRF                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_TLS1PRF)
41468>>>>>>>>>>>>>Define CALG_HASH_REPLACE_OWF            for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HASH_REPLACE_OWF)
41468>>>>>>>>>>>>>Define CALG_AES_128                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_128)
41468>>>>>>>>>>>>>Define CALG_AES_192                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_192)
41468>>>>>>>>>>>>>Define CALG_AES_256                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_256)
41468>>>>>>>>>>>>>Define CALG_AES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES)
41468>>>>>>>>>>>>>Define CALG_SHA_256                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_256)
41468>>>>>>>>>>>>>Define CALG_SHA_384                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_384)
41468>>>>>>>>>>>>>Define CALG_SHA_512                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_512)
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// Providers
41468>>>>>>>>>>>>>Define MS_DEF_PROV                      for "Microsoft Base Cryptographic Provider v1.0"
41468>>>>>>>>>>>>>Define MS_ENHANCED_PROV                 for "Microsoft Enhanced Cryptographic Provider v1.0"
41468>>>>>>>>>>>>>Define MS_STRONG_PROV                   for "Microsoft Strong Cryptographic Provider"
41468>>>>>>>>>>>>>Define MS_DEF_RSA_SIG_PROV              for "Microsoft RSA Signature Cryptographic Provider"
41468>>>>>>>>>>>>>Define MS_DEF_RSA_SCHANNEL_PROV         for "Microsoft RSA SChannel Cryptographic Provider"
41468>>>>>>>>>>>>>Define MS_DEF_DSS_PROV                  for "Microsoft Base DSS Cryptographic Provider"
41468>>>>>>>>>>>>>Define MS_DEF_DSS_DH_PROV               for "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
41468>>>>>>>>>>>>>Define MS_ENH_DSS_DH_PROV               for "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
41468>>>>>>>>>>>>>Define MS_DEF_DH_SCHANNEL_PROV          for "Microsoft DH SChannel Cryptographic Provider"
41468>>>>>>>>>>>>>Define MS_SCARD_PROV                    for "Microsoft Base Smart Card Crypto Provider"
41468>>>>>>>>>>>>>Define MS_ENH_RSA_AES_PROV              for "Microsoft Enhanced RSA and AES Cryptographic Provider"
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// dwFlags definitions for CryptAcquireContext
41468>>>>>>>>>>>>>Define CRYPT_VERIFYCONTEXT              for |CI$F0000000
41468>>>>>>>>>>>>>Define CRYPT_NEWKEYSET                  for |CI$00000008
41468>>>>>>>>>>>>>Define CRYPT_DELETEKEYSET               for |CI$00000010
41468>>>>>>>>>>>>>Define CRYPT_MACHINE_KEYSET             for |CI$00000020
41468>>>>>>>>>>>>>Define CRYPT_SILENT                     for |CI$00000040
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// dwFlag definitions for CryptGenKey
41468>>>>>>>>>>>>>Define CRYPT_EXPORTABLE                 for |CI$00000001
41468>>>>>>>>>>>>>Define CRYPT_USER_PROTECTED             for |CI$00000002
41468>>>>>>>>>>>>>Define CRYPT_CREATE_SALT                for |CI$00000004
41468>>>>>>>>>>>>>Define CRYPT_UPDATE_KEY                 for |CI$00000008
41468>>>>>>>>>>>>>Define CRYPT_NO_SALT                    for |CI$00000010
41468>>>>>>>>>>>>>Define CRYPT_PREGEN                     for |CI$00000040
41468>>>>>>>>>>>>>Define CRYPT_RECIPIENT                  for |CI$00000010
41468>>>>>>>>>>>>>Define CRYPT_INITIATOR                  for |CI$00000040
41468>>>>>>>>>>>>>Define CRYPT_ONLINE                     for |CI$00000080
41468>>>>>>>>>>>>>Define CRYPT_SF                         for |CI$00000100
41468>>>>>>>>>>>>>Define CRYPT_CREATE_IV                  for |CI$00000200
41468>>>>>>>>>>>>>Define CRYPT_KEK                        for |CI$00000400
41468>>>>>>>>>>>>>Define CRYPT_DATA_KEY                   for |CI$00000800
41468>>>>>>>>>>>>>Define CRYPT_VOLATILE                   for |CI$00001000
41468>>>>>>>>>>>>>Define CRYPT_SGCKEY                     for |CI$00002000
41468>>>>>>>>>>>>>Define CRYPT_ARCHIVABLE                 for |CI$00004000
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// Provider types
41468>>>>>>>>>>>>>Define PROV_RSA_FULL                    for 1
41468>>>>>>>>>>>>>Define PROV_RSA_SIG                     for 2
41468>>>>>>>>>>>>>Define PROV_DSS                         for 3
41468>>>>>>>>>>>>>Define PROV_FORTEZZA                    for 4
41468>>>>>>>>>>>>>Define PROV_MS_EXCHANGE                 for 5
41468>>>>>>>>>>>>>Define PROV_SSL                         for 6
41468>>>>>>>>>>>>>Define PROV_RSA_SCHANNEL                for 12
41468>>>>>>>>>>>>>Define PROV_DSS_DH                      for 13
41468>>>>>>>>>>>>>Define PROV_EC_ECDSA_SIG                for 14
41468>>>>>>>>>>>>>Define PROV_EC_ECNRA_SIG                for 15
41468>>>>>>>>>>>>>Define PROV_EC_ECDSA_FULL               for 16
41468>>>>>>>>>>>>>Define PROV_EC_ECNRA_FULL               for 17
41468>>>>>>>>>>>>>Define PROV_DH_SCHANNEL                 for 18
41468>>>>>>>>>>>>>Define PROV_SPYRUS_LYNKS                for 20
41468>>>>>>>>>>>>>Define PROV_RNG                         for 21
41468>>>>>>>>>>>>>Define PROV_INTEL_SEC                   for 22
41468>>>>>>>>>>>>>Define PROV_REPLACE_OWF                 for 23
41468>>>>>>>>>>>>>Define PROV_RSA_AES                     for 24
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// KP_MODE
41468>>>>>>>>>>>>>// KP_MODE
41468>>>>>>>>>>>>>Define CRYPT_MODE_CBC                   for 1       // Cipher block chaining
41468>>>>>>>>>>>>>Define CRYPT_MODE_ECB                   for 2       // Electronic code book
41468>>>>>>>>>>>>>Define CRYPT_MODE_OFB                   for 3       // Output feedback mode
41468>>>>>>>>>>>>>Define CRYPT_MODE_CFB                   for 4       // Cipher feedback mode
41468>>>>>>>>>>>>>Define CRYPT_MODE_CTS                   for 5       // Ciphertext stealing mode
41468>>>>>>>>>>>>>Define CRYPT_MODE_CBCI                  for 6       // ANSI CBC Interleaved
41468>>>>>>>>>>>>>Define CRYPT_MODE_CFBP                  for 7       // ANSI CFB Pipelined
41468>>>>>>>>>>>>>Define CRYPT_MODE_OFBP                  for 8       // ANSI OFB Pipelined
41468>>>>>>>>>>>>>Define CRYPT_MODE_CBCOFM                for 9       // ANSI CBC + OF Masking
41468>>>>>>>>>>>>>Define CRYPT_MODE_CBCOFMI               for 10      // ANSI CBC + OFM Interleaved
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// dwParam definitions for CryptGetKeyParam
41468>>>>>>>>>>>>>Define KP_IV                            for 1       // Initialization vector
41468>>>>>>>>>>>>>Define KP_SALT                          for 2       // Salt value
41468>>>>>>>>>>>>>Define KP_PADDING                       for 3       // Padding values
41468>>>>>>>>>>>>>Define KP_MODE                          for 4       // Mode of the cipher
41468>>>>>>>>>>>>>Define KP_MODE_BITS                     for 5       // Number of bits to feedback
41468>>>>>>>>>>>>>Define KP_PERMISSIONS                   for 6       // Key permissions DWORD
41468>>>>>>>>>>>>>Define KP_ALGID                         for 7       // Key algorithm
41468>>>>>>>>>>>>>Define KP_BLOCKLEN                      for 8       // Block size of the cipher
41468>>>>>>>>>>>>>Define KP_KEYLEN                        for 9       // Length of key in bits
41468>>>>>>>>>>>>>Define KP_SALT_EX                       for 10      // Length of salt in bytes
41468>>>>>>>>>>>>>Define KP_P                             for 11      // DSS/Diffie-Hellman P value
41468>>>>>>>>>>>>>Define KP_G                             for 12      // DSS/Diffie-Hellman G value
41468>>>>>>>>>>>>>Define KP_Q                             for 13      // DSS Q value
41468>>>>>>>>>>>>>Define KP_X                             for 14      // Diffie-Hellman X value
41468>>>>>>>>>>>>>Define KP_Y                             for 15      // Y value
41468>>>>>>>>>>>>>Define KP_RA                            for 16      // Fortezza RA value
41468>>>>>>>>>>>>>Define KP_RB                            for 17      // Fortezza RB value
41468>>>>>>>>>>>>>Define KP_INFO                          for 18      // for putting information into an RSA envelope
41468>>>>>>>>>>>>>Define KP_EFFECTIVE_KEYLEN              for 19      // setting and getting RC2 effective key length
41468>>>>>>>>>>>>>Define KP_SCHANNEL_ALG                  for 20      // for setting the Secure Channel algorithms
41468>>>>>>>>>>>>>Define KP_CLIENT_RANDOM                 for 21      // for setting the Secure Channel client random data
41468>>>>>>>>>>>>>Define KP_SERVER_RANDOM                 for 22      // for setting the Secure Channel server random data
41468>>>>>>>>>>>>>Define KP_RP                            for 23
41468>>>>>>>>>>>>>Define KP_PRECOMP_MD5                   for 24
41468>>>>>>>>>>>>>Define KP_PRECOMP_SHA                   for 25
41468>>>>>>>>>>>>>Define KP_CERTIFICATE                   for 26      // for setting Secure Channel certificate data (PCT1)
41468>>>>>>>>>>>>>Define KP_CLEAR_KEY                     for 27      // for setting Secure Channel clear key data (PCT1)
41468>>>>>>>>>>>>>Define KP_PUB_EX_LEN                    for 28
41468>>>>>>>>>>>>>Define KP_PUB_EX_VAL                    for 29
41468>>>>>>>>>>>>>Define KP_KEYVAL                        for 30
41468>>>>>>>>>>>>>Define KP_ADMIN_PIN                     for 31
41468>>>>>>>>>>>>>Define KP_KEYEXCHANGE_PIN               for 32
41468>>>>>>>>>>>>>Define KP_SIGNATURE_PIN                 for 33
41468>>>>>>>>>>>>>Define KP_PREHASH                       for 34
41468>>>>>>>>>>>>>Define KP_ROUNDS                        for 35
41468>>>>>>>>>>>>>Define KP_OAEP_PARAMS                   for 36      // for setting OAEP params on RSA keys
41468>>>>>>>>>>>>>Define KP_CMS_KEY_INFO                  for 37
41468>>>>>>>>>>>>>Define KP_CMS_DH_KEY_INFO               for 38
41468>>>>>>>>>>>>>Define KP_PUB_PARAMS                    for 39      // for setting public parameters
41468>>>>>>>>>>>>>Define KP_VERIFY_PARAMS                 for 40      // for verifying DSA and DH parameters
41468>>>>>>>>>>>>>Define KP_HIGHEST_VERSION               for 41      // for TLS protocol version setting
41468>>>>>>>>>>>>>Define KP_GET_USE_COUNT                 for 42      // for use with PP_CRYPT_COUNT_KEY_USE contexts
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// dwParam definitions for CryptGetHashParam
41468>>>>>>>>>>>>>Define HP_ALGID                         for |CI$0001  // Hash algorithm
41468>>>>>>>>>>>>>Define HP_HASHVAL                       for |CI$0002  // Hash value
41468>>>>>>>>>>>>>Define HP_HASHSIZE                      for |CI$0004  // Hash value size
41468>>>>>>>>>>>>>Define HP_HMAC_INFO                     for |CI$0005  // information for creating an HMA
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// key BLOB types
41468>>>>>>>>>>>>>Define KEYSTATEBLOB                     for |CI$0C
41468>>>>>>>>>>>>>Define OPAQUEKEYBLOB                    for |CI$09
41468>>>>>>>>>>>>>Define PLAINTEXTKEYBLOB                 for |CI$08
41468>>>>>>>>>>>>>Define PRIVATEKEYBLOB                   for |CI$07
41468>>>>>>>>>>>>>Define PUBLICKEYBLOB                    for |CI$06
41468>>>>>>>>>>>>>Define PUBLICKEYBLOBEX                  for |CI$0A
41468>>>>>>>>>>>>>Define SIMPLEBLOB                       for |CI$01
41468>>>>>>>>>>>>>Define SYMMETRICWRAPKEYBLOB             for |CI$0B
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>Define CUR_BLOB_VERSION                 for 2
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// KP_PADDING
41468>>>>>>>>>>>>>Define PKCS5_PADDING                    for 1       // PKCS 5 (sec 6.2) padding method
41468>>>>>>>>>>>>>Define RANDOM_PADDING                   for 2
41468>>>>>>>>>>>>>Define ZERO_PADDING                     for 3
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>//  Structure cryptimportkey
41468>>>>>>>>>>>>>Struct PUBLICKEYSTRUC
41468>>>>>>>>>>>>>    UChar    bType
41468>>>>>>>>>>>>>    UChar    bVersion
41468>>>>>>>>>>>>>    UShort   reserved
41468>>>>>>>>>>>>>    UInteger aiKeyAlg
41468>>>>>>>>>>>>>End_Struct
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>Struct tPLAINTEXTKEYBLOB
41468>>>>>>>>>>>>>    PUBLICKEYSTRUC hdr
41468>>>>>>>>>>>>>    PUBLICKEYSTRUC hdr
41468>>>>>>>>>>>>>    UInteger       dwKeySize
41468>>>>>>>>>>>>>//    UChar[]        rgbKeyData
41468>>>>>>>>>>>>>End_Struct
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>//  Structure for specifying the inner and outer strings when calculating HMAC hash (use with CryptSetHashParam)
41468>>>>>>>>>>>>>Struct HMAC_INFO
41468>>>>>>>>>>>>>    UInteger HashAlgid
41468>>>>>>>>>>>>>    Pointer pbInnerString
41468>>>>>>>>>>>>>    DWord cbInnerString
41468>>>>>>>>>>>>>    Pointer pbOuterString
41468>>>>>>>>>>>>>    DWord cbOuterString
41468>>>>>>>>>>>>>End_Struct
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>Struct BLOBHEADER
41468>>>>>>>>>>>>>    UChar   bType
41468>>>>>>>>>>>>>    UChar   bVersion
41468>>>>>>>>>>>>>    Short   reserved
41468>>>>>>>>>>>>>    Integer aiKeyAlg
41468>>>>>>>>>>>>>End_Struct
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>Struct CryptoBlob
41468>>>>>>>>>>>>>    BLOBHEADER  header
41468>>>>>>>>>>>>>    BLOBHEADER  header
41468>>>>>>>>>>>>>    Integer     cbKeySize
41468>>>>>>>>>>>>>    UChar[32]   rgbKeyData
41468>>>>>>>>>>>>>End_Struct
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>
41468>>>>>>>>>>>>>// Note: lpContainer and lpProvider refer to WString types.
41468>>>>>>>>>>>>>External_Function CryptAcquireContextW "CryptAcquireContextW" advapi32.dll ;    Pointer phProv ;    Pointer lpContainer ;    Pointer lpProvider ;    Integer dwProvType ;    Integer dwFlags ;    Returns Boolean
41469>>>>>>>>>>>>>
41469>>>>>>>>>>>>>// Compatibilty wrapper Function CryptAcquireContext
41469>>>>>>>>>>>>>Function CryptAcquireContext Global ;    Pointer phProv ;    Pointer szContainer ;    Pointer szProvider ;    Integer dwProvType ;    Integer dwFlags ;    Returns Boolean
41471>>>>>>>>>>>>>    
41471>>>>>>>>>>>>>    Boolean bResult
41471>>>>>>>>>>>>>    UWide   uwContainer uwProvider
41471>>>>>>>>>>>>>    UWide   uwContainer uwProvider
41471>>>>>>>>>>>>>
41471>>>>>>>>>>>>>    Send StringToWide szContainer (&uwContainer)
41472>>>>>>>>>>>>>    Send StringToWide szProvider (&uwProvider)
41473>>>>>>>>>>>>>    
41473>>>>>>>>>>>>>    Move (CryptAcquireContextW (phProv, uwContainer.lpUText, uwProvider.lpUText, dwProvType, dwFlags)) to bResult                   
41474>>>>>>>>>>>>>
41474>>>>>>>>>>>>>    Function_Return bResult
41475>>>>>>>>>>>>>End_Function
41476>>>>>>>>>>>>>
41476>>>>>>>>>>>>>External_Function CryptReleaseContext "CryptReleaseContext" advapi32.dll ;    Handle hProv ;    Integer dwFlags ;    Returns Boolean
41477>>>>>>>>>>>>>
41477>>>>>>>>>>>>>External_Function CryptCreateHash "CryptCreateHash" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hKey ;    Integer dwFlags ;    Pointer phHash ;    Returns Boolean
41478>>>>>>>>>>>>>
41478>>>>>>>>>>>>>External_Function CryptDestroyHash "CryptDestroyHash" advapi32.dll ;    Handle hHash ;    Returns Boolean
41479>>>>>>>>>>>>>
41479>>>>>>>>>>>>>External_Function CryptHashData "CryptHashData" advapi32.dll ;    Handle hHash ;    Pointer pbData ;    Integer dwDataLen ;    Integer dwFlags ;    Returns Boolean
41480>>>>>>>>>>>>>
41480>>>>>>>>>>>>>External_Function CryptDeriveKey "CryptDeriveKey" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hBaseData ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
41481>>>>>>>>>>>>>
41481>>>>>>>>>>>>>External_Function CryptGetHashParam "CryptGetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    DWord dwFlags ;    Returns Integer
41482>>>>>>>>>>>>>
41482>>>>>>>>>>>>>External_Function CryptDestroyKey "CryptDestroyKey" advapi32.dll ;    Handle hKey ;    Returns Boolean
41483>>>>>>>>>>>>>
41483>>>>>>>>>>>>>External_Function CryptImportKey "CryptImportKey" advapi32.dll ;    Handle hProv ;    Pointer pbData ;    Integer dwDataLen ;    Handle hPubKey ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
41484>>>>>>>>>>>>>
41484>>>>>>>>>>>>>External_Function CryptGetKeyParam "CryptGetKeyParam" advapi32.dll ;    Handle hKey ;    Integer dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwFlags ;    Returns Boolean
41485>>>>>>>>>>>>>    
41485>>>>>>>>>>>>>External_Function CryptSetKeyParam "CryptSetKeyParam" advapi32.dll ;    Handle   hKey ;    UInteger dwParam ;    Pointer  pbdata ;    UInteger dwFlags ;    Returns  Boolean
41486>>>>>>>>>>>>>
41486>>>>>>>>>>>>>External_Function CryptEncrypt "CryptEncrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwBufLen ;    Returns Boolean
41487>>>>>>>>>>>>>
41487>>>>>>>>>>>>>External_Function CryptDecrypt "CryptDecrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Returns Boolean
41488>>>>>>>>>>>>>
41488>>>>>>>>>>>>>External_Function CryptGenRandom "CryptGenRandom" advapi32.dll ;    Handle hProv ;    DWord dwLen ;    Pointer pbBuffer ;    Returns Boolean
41489>>>>>>>>>>>>>    
41489>>>>>>>>>>>>>External_Function CryptSetHashParam "CryptSetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Integer dwFlags ;    Returns Boolean
41490>>>>>>>>>>>>>    
41490>>>>>>>>>>>>>External_Function CryptGenKey "CryptGenKey" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
41491>>>>>>>>>>>>>    
41491>>>>>>>>>>>>>External_Function CryptExportKey "CryptExportKey" advapi32.dll ;    Handle hKey ;    Handle hExpKey ;    Integer dwBlobType ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Returns Boolean
41492>>>>>>>>>>>
41492>>>>>>>>>>>Class cCryptographerEx is a cObject
41493>>>>>>>>>>>    
41493>>>>>>>>>>>    Procedure Construct_Object
41495>>>>>>>>>>>        Forward Send Construct_Object
41497>>>>>>>>>>>        
41497>>>>>>>>>>>        Property String     psProvider  MS_ENHANCED_PROV
41498>>>>>>>>>>>        Property Integer    piProvider  PROV_RSA_FULL
41499>>>>>>>>>>>        Property Integer    piCipher    CALG_RC4
41500>>>>>>>>>>>        Property Integer    piHash      CALG_MD5
41501>>>>>>>>>>>        
41501>>>>>>>>>>>        // Private properties
41501>>>>>>>>>>>        Property Handle     Private_phProv
41502>>>>>>>>>>>        
41502>>>>>>>>>>>        // Block cipher properties
41502>>>>>>>>>>>        Property UChar[]    paKey
41503>>>>>>>>>>>        Property UChar[]    paIV
41504>>>>>>>>>>>        Property Integer    piKeyAlg        PLAINTEXTKEYBLOB
41505>>>>>>>>>>>        Property Integer    piKeyType       CALG_AES_256
41506>>>>>>>>>>>        Property Integer    piKeyPadding    PKCS5_PADDING
41507>>>>>>>>>>>        Property Integer    piKeyMode       CRYPT_MODE_CBC
41508>>>>>>>>>>>        Property Integer    piBlockSize     16
41509>>>>>>>>>>>    End_Procedure
41510>>>>>>>>>>>    
41510>>>>>>>>>>>    
41510>>>>>>>>>>>    // Acquire key container handle
41510>>>>>>>>>>>    Function AcquireContext Returns Handle
41512>>>>>>>>>>>        Integer iProvider
41512>>>>>>>>>>>        WString wProvider
41512>>>>>>>>>>>        Handle hProv
41512>>>>>>>>>>>        Boolean bOk
41512>>>>>>>>>>>        Pointer pProv
41512>>>>>>>>>>>        
41512>>>>>>>>>>>        Move 0 to hProv
41513>>>>>>>>>>>        Get piProvider to iProvider
41514>>>>>>>>>>>        Get psProvider to wProvider
41515>>>>>>>>>>>        
41515>>>>>>>>>>>        //  Determine address to be passed as provider
41515>>>>>>>>>>>        If (Trim(wProvider) <> "") Begin
41517>>>>>>>>>>>            Move (AddressOf(wProvider)) to pProv
41518>>>>>>>>>>>        End
41518>>>>>>>>>>>>
41518>>>>>>>>>>>        Else Begin
41519>>>>>>>>>>>            Move 0 to pProv
41520>>>>>>>>>>>        End
41520>>>>>>>>>>>>
41520>>>>>>>>>>>        
41520>>>>>>>>>>>        //  Acquire Crypto Context. Note: pProv is pointer to UTF16 string.
41520>>>>>>>>>>>        Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_VERIFYCONTEXT)) to bOk
41521>>>>>>>>>>>        If (not(bOk) or hProv = 0) Begin
41523>>>>>>>>>>>            Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_NEWKEYSET ior CRYPT_VERIFYCONTEXT)) to bOk
41524>>>>>>>>>>>        End
41524>>>>>>>>>>>>
41524>>>>>>>>>>>        
41524>>>>>>>>>>>        If (not(bOk) or hProv = 0) Begin
41526>>>>>>>>>>>            // Fallback to original
41526>>>>>>>>>>>            Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,0)) to bOk
41527>>>>>>>>>>>            
41527>>>>>>>>>>>            If (not(bOk) or hProv = 0) Begin
41529>>>>>>>>>>>                Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_NEWKEYSET)) to bOk
41530>>>>>>>>>>>            End
41530>>>>>>>>>>>>
41530>>>>>>>>>>>        End
41530>>>>>>>>>>>>
41530>>>>>>>>>>>        Set Private_phProv to hProv
41531>>>>>>>>>>>        
41531>>>>>>>>>>>        Function_Return hProv
41532>>>>>>>>>>>    End_Function
41533>>>>>>>>>>>    
41533>>>>>>>>>>>    // Releases key container handle
41533>>>>>>>>>>>    Function ReleaseContext Handle hProv Returns Boolean
41535>>>>>>>>>>>        Function_Return (CryptReleaseContext(hProv,0))
41536>>>>>>>>>>>    End_Function
41537>>>>>>>>>>>    
41537>>>>>>>>>>>    // Creates hash object
41537>>>>>>>>>>>    Function CreateHash Handle hProv Returns Handle
41539>>>>>>>>>>>        Integer iAlgorithm
41539>>>>>>>>>>>        Handle hHash
41539>>>>>>>>>>>        Boolean bOk
41539>>>>>>>>>>>        
41539>>>>>>>>>>>        Move 0 to hHash
41540>>>>>>>>>>>        Get piHash to iAlgorithm
41541>>>>>>>>>>>        Move (CryptCreateHash(hProv,iAlgorithm,0,0,AddressOf(hHash))) to bOk
41542>>>>>>>>>>>        
41542>>>>>>>>>>>        Function_Return hHash
41543>>>>>>>>>>>    End_Function
41544>>>>>>>>>>>    
41544>>>>>>>>>>>    // Destroys the hash object
41544>>>>>>>>>>>    Function DestroyHash Handle hHash Returns Boolean
41546>>>>>>>>>>>        Function_Return (CryptDestroyHash(hHash))
41547>>>>>>>>>>>    End_Function
41548>>>>>>>>>>>    
41548>>>>>>>>>>>    // Adds data to hash object
41548>>>>>>>>>>>    Function HashData Handle hHash UChar[] ucData Returns Boolean
41550>>>>>>>>>>>        Function_Return (CryptHashData(hHash,AddressOf(ucData), SizeOfArray(ucData),0))
41551>>>>>>>>>>>    End_Function
41552>>>>>>>>>>>    
41552>>>>>>>>>>>    // Generates session key
41552>>>>>>>>>>>    Function DeriveKey Handle hProv Handle hHash Returns Handle
41554>>>>>>>>>>>        Integer iAlgorithm
41554>>>>>>>>>>>        Handle hKey
41554>>>>>>>>>>>        Boolean bOk
41554>>>>>>>>>>>        
41554>>>>>>>>>>>        Move 0 to hKey
41555>>>>>>>>>>>        Get piCipher to iAlgorithm
41556>>>>>>>>>>>        Move (CryptDeriveKey(hProv,iAlgorithm,hHash,CRYPT_EXPORTABLE,AddressOf(hKey))) to bOk
41557>>>>>>>>>>>        
41557>>>>>>>>>>>        Function_Return hKey
41558>>>>>>>>>>>    End_Function
41559>>>>>>>>>>>    
41559>>>>>>>>>>>    // Imports a plain text key
41559>>>>>>>>>>>    Function ImportPlainTextKey Handle hProv UChar[] ucaKey Returns Handle
41561>>>>>>>>>>>        tPLAINTEXTKEYBLOB blobhead
41561>>>>>>>>>>>        tPLAINTEXTKEYBLOB blobhead
41561>>>>>>>>>>>        Boolean   bSuccess
41561>>>>>>>>>>>        Handle    hKey
41561>>>>>>>>>>>        Integer   iHeadSize iKeySize
41561>>>>>>>>>>>        UChar[]   ucaKeyblob
41562>>>>>>>>>>>        Integer iVoid
41562>>>>>>>>>>>        
41562>>>>>>>>>>>        Move (SizeOfType(tPLAINTEXTKEYBLOB)) to iHeadSize
41563>>>>>>>>>>>        Move (SizeOfArray(ucaKey)) to iKeySize
41564>>>>>>>>>>>        
41564>>>>>>>>>>>        Move PLAINTEXTKEYBLOB to blobhead.hdr.bType
41565>>>>>>>>>>>        Move CUR_BLOB_VERSION   to blobhead.hdr.bVersion
41566>>>>>>>>>>>        Get piCipher            to blobhead.hdr.aiKeyAlg
41567>>>>>>>>>>>        Move iKeySize           to blobhead.dwKeySize
41568>>>>>>>>>>>        
41568>>>>>>>>>>>        Move (ResizeArray(ucaKeyblob, iHeadSize)) to ucaKeyblob
41569>>>>>>>>>>>        Move (CopyMemory(AddressOf(ucaKeyblob), AddressOf(blobhead), iHeadSize)) to iVoid
41570>>>>>>>>>>>        Move (AppendArray(ucaKeyblob, ucaKey)) to ucaKeyblob
41571>>>>>>>>>>>        
41571>>>>>>>>>>>        Move 0 to hKey
41572>>>>>>>>>>>        Move (CryptImportKey(hProv, AddressOf(ucaKeyblob), SizeOfArray(ucaKeyblob), 0, 0, AddressOf(hKey))) to bSuccess
41573>>>>>>>>>>>        If (not(bSuccess)) Begin
41575>>>>>>>>>>>            Move (ShowLastError()) to iVoid
41576>>>>>>>>>>>        End
41576>>>>>>>>>>>>
41576>>>>>>>>>>>        
41576>>>>>>>>>>>        Function_Return hKey
41577>>>>>>>>>>>    End_Function
41578>>>>>>>>>>>    
41578>>>>>>>>>>>    // Destroys the key
41578>>>>>>>>>>>    Function DestroyKey Handle hKey Returns Boolean
41580>>>>>>>>>>>        Function_Return (CryptDestroyKey(hKey))
41581>>>>>>>>>>>    End_Function
41582>>>>>>>>>>>    
41582>>>>>>>>>>>    // Retrieves key data
41582>>>>>>>>>>>    Function KeyParameter Handle hKey Integer iQuery Returns Integer
41584>>>>>>>>>>>        Integer iBuffer iLen
41584>>>>>>>>>>>        Boolean bOk
41584>>>>>>>>>>>        
41584>>>>>>>>>>>        Move (SizeOfType(Integer)) to iLen
41585>>>>>>>>>>>        Move (CryptGetKeyParam(hKey,iQuery,AddressOf(iBuffer),AddressOf(iLen),0)) to bOk
41586>>>>>>>>>>>        Function_Return iBuffer
41587>>>>>>>>>>>    End_Function
41588>>>>>>>>>>>    
41588>>>>>>>>>>>    // Retrieves a hash value
41588>>>>>>>>>>>    Function HashValue Handle lhHash Returns UChar[]
41590>>>>>>>>>>>        UChar[] ucHash
41591>>>>>>>>>>>        Integer liResult
41591>>>>>>>>>>>        DWord   dwDataLen
41591>>>>>>>>>>>        
41591>>>>>>>>>>>        Move 0 to dwDataLen
41592>>>>>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,0,AddressOf(dwDataLen),0)) to liResult
41593>>>>>>>>>>>        If (liResult = 0) ;            Function_Return ""
41596>>>>>>>>>>>        
41596>>>>>>>>>>>        Move (ResizeArray(ucHash, dwDataLen, 0)) to ucHash
41597>>>>>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,AddressOf(ucHash),AddressOf(dwDataLen),0)) to liResult
41598>>>>>>>>>>>        If (liResult = 0) ;            Function_Return ""
41601>>>>>>>>>>>        
41601>>>>>>>>>>>        Function_Return ucHash
41602>>>>>>>>>>>    End_Function
41603>>>>>>>>>>>
41603>>>>>>>>>>>    // Encrypts data
41603>>>>>>>>>>>    Function Encrypt UChar[] ucPassword UChar[] ucData Returns UChar[]
41605>>>>>>>>>>>        Handle hProv hHash hKey
41605>>>>>>>>>>>        Integer iAlgorithm iDataLen iCipherLen iErr
41605>>>>>>>>>>>        Boolean bOk
41605>>>>>>>>>>>        
41605>>>>>>>>>>>        Get AcquireContext to hProv
41606>>>>>>>>>>>        If (hProv) Begin
41608>>>>>>>>>>>            Get CreateHash hProv to hHash
41609>>>>>>>>>>>            If (hHash) Begin
41611>>>>>>>>>>>                Get HashData hHash ucPassword to bOk
41612>>>>>>>>>>>                If (bOk) Begin
41614>>>>>>>>>>>                    Get piCipher to iAlgorithm
41615>>>>>>>>>>>                    Get DeriveKey hProv hHash to hKey
41616>>>>>>>>>>>                End
41616>>>>>>>>>>>>
41616>>>>>>>>>>>                Get DestroyHash hHash to bOk
41617>>>>>>>>>>>            End
41617>>>>>>>>>>>>
41617>>>>>>>>>>>            
41617>>>>>>>>>>>            If (hKey) Begin
41619>>>>>>>>>>>                //  First call to determine resulting data size
41619>>>>>>>>>>>                Move (SizeOfArray(ucData)) to iDataLen
41620>>>>>>>>>>>                Move (SizeOfArray(ucData)) to iCipherLen
41621>>>>>>>>>>>                Move (CryptEncrypt(hKey, 0, True, 0, 0, AddressOf(iCipherLen), iDataLen)) to bOk
41622>>>>>>>>>>>                
41622>>>>>>>>>>>                //  Reserve space in string
41622>>>>>>>>>>>                If (iDataLen < iCipherLen) Begin
41624>>>>>>>>>>>                    Move (ResizeArray(ucData, iCipherLen, 0)) to ucData
41625>>>>>>>>>>>                End
41625>>>>>>>>>>>>
41625>>>>>>>>>>>                
41625>>>>>>>>>>>                //  Call to really decrypt
41625>>>>>>>>>>>                Move (CryptEncrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iDataLen),SizeOfArray(ucData))) to bOk
41626>>>>>>>>>>>                //If (not(bOk)) Begin
41626>>>>>>>>>>>                //Move "" to sData
41626>>>>>>>>>>>                //Move (GetLastError()) to iErr
41626>>>>>>>>>>>                //End
41626>>>>>>>>>>>                
41626>>>>>>>>>>>                Get DestroyKey hKey to bOk
41627>>>>>>>>>>>            End 
41627>>>>>>>>>>>>
41627>>>>>>>>>>>            Get ReleaseContext hProv to bOk
41628>>>>>>>>>>>        End 
41628>>>>>>>>>>>>
41628>>>>>>>>>>>        Function_Return ucData
41629>>>>>>>>>>>    End_Function
41630>>>>>>>>>>>    
41630>>>>>>>>>>>    // Decrypts data
41630>>>>>>>>>>>    Function Decrypt UChar[] ucPassword UChar[] ucData Returns UChar[]
41632>>>>>>>>>>>        Handle hProv hHash hKey
41632>>>>>>>>>>>        Integer iAlgorithm iDataLen
41632>>>>>>>>>>>        Boolean bOk
41632>>>>>>>>>>>        
41632>>>>>>>>>>>        Get AcquireContext to hProv
41633>>>>>>>>>>>        If (hProv) Begin
41635>>>>>>>>>>>            Get CreateHash hProv to hHash
41636>>>>>>>>>>>            If (hHash) Begin
41638>>>>>>>>>>>                Get HashData hHash ucPassword to bOk
41639>>>>>>>>>>>                If (bOk) Begin
41641>>>>>>>>>>>                    Get piCipher to iAlgorithm
41642>>>>>>>>>>>                    Get DeriveKey hProv hHash to hKey
41643>>>>>>>>>>>                End
41643>>>>>>>>>>>>
41643>>>>>>>>>>>                Get DestroyHash hHash to bOk
41644>>>>>>>>>>>            End
41644>>>>>>>>>>>>
41644>>>>>>>>>>>            
41644>>>>>>>>>>>            If (hKey) Begin
41646>>>>>>>>>>>                Move (SizeOfArray(ucData)) to iDataLen
41647>>>>>>>>>>>                Move (CryptDecrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iDataLen))) to bOk
41648>>>>>>>>>>>                //  Resulting data can be shorter as the input string, in that case we shorten the result string
41648>>>>>>>>>>>                If (SizeOfArray (ucData) > iDataLen) Begin
41650>>>>>>>>>>>                    Move (ResizeArray(ucData, iDataLen)) to ucData
41651>>>>>>>>>>>                End
41651>>>>>>>>>>>>
41651>>>>>>>>>>>                
41651>>>>>>>>>>>                Get DestroyKey hKey to bOk
41652>>>>>>>>>>>            End
41652>>>>>>>>>>>>
41652>>>>>>>>>>>            Get ReleaseContext hProv to bOk
41653>>>>>>>>>>>        End
41653>>>>>>>>>>>>
41653>>>>>>>>>>>        Function_Return ucData
41654>>>>>>>>>>>    End_Function
41655>>>>>>>>>>>    
41655>>>>>>>>>>>    // Creates a key
41655>>>>>>>>>>>    Function CreateKey Handle hProv Returns Handle
41657>>>>>>>>>>>        Integer iAlg iType iByte iLength iSize
41657>>>>>>>>>>>        CryptoBlob keyBlob
41657>>>>>>>>>>>        CryptoBlob keyBlob
41657>>>>>>>>>>>        Boolean bOk
41657>>>>>>>>>>>        Handle hKey
41657>>>>>>>>>>>        UChar[] aKey
41658>>>>>>>>>>>
41658>>>>>>>>>>>        Get paKey to aKey
41659>>>>>>>>>>>        Get piKeyAlg to iAlg
41660>>>>>>>>>>>        Get piKeyType to iType
41661>>>>>>>>>>>        Move iAlg                   to keyBlob.header.bType
41662>>>>>>>>>>>        Move CUR_BLOB_VERSION       to keyBlob.header.bVersion
41663>>>>>>>>>>>        Move iType                  to keyBlob.header.aiKeyAlg
41664>>>>>>>>>>>        Move (SizeOfArray(aKey))    to keyBlob.cbKeySize
41665>>>>>>>>>>>        
41665>>>>>>>>>>>        Move (SizeOfArray(aKey)-1) to iLength
41666>>>>>>>>>>>        For iByte from 0 to iLength
41672>>>>>>>>>>>>
41672>>>>>>>>>>>            Move aKey[iByte] to keyBlob.rgbKeyData[iByte]
41673>>>>>>>>>>>        Loop
41674>>>>>>>>>>>>
41674>>>>>>>>>>>        
41674>>>>>>>>>>>        Move 0 to hKey
41675>>>>>>>>>>>        Move (CryptImportKey(hProv,AddressOf(keyBlob),SizeOfType(CryptoBlob),0,0,AddressOf(hKey))) to bOk
41676>>>>>>>>>>>        Function_Return hKey
41677>>>>>>>>>>>    End_Function
41678>>>>>>>>>>>    
41678>>>>>>>>>>>    // Sets the key parameters
41678>>>>>>>>>>>    Function SetKeyParameters Handle hKey Returns Boolean
41680>>>>>>>>>>>        Integer iPadding iMode
41680>>>>>>>>>>>        Boolean bOk
41680>>>>>>>>>>>        UChar[] aIV
41681>>>>>>>>>>>        
41681>>>>>>>>>>>        //Move (SizeOfArray(aIV)-1) to iLength
41681>>>>>>>>>>>        //For iByte from 0 to iLength
41681>>>>>>>>>>>        //    Move iByte to aIV[iByte]
41681>>>>>>>>>>>        //Loop
41681>>>>>>>>>>>
41681>>>>>>>>>>>        // Set initialization vector
41681>>>>>>>>>>>        Get paIV to aIV
41682>>>>>>>>>>>        Move (CryptSetKeyParam(hKey,KP_IV,AddressOf(aIV),0)) to bOk
41683>>>>>>>>>>>        If (bOk) Begin
41685>>>>>>>>>>>            // Set padding
41685>>>>>>>>>>>            Get piKeyPadding to iPadding
41686>>>>>>>>>>>            Move (CryptSetKeyParam(hKey,KP_PADDING,AddressOf(iPadding),0)) to bOk
41687>>>>>>>>>>>            If (bOk) Begin
41689>>>>>>>>>>>                // Set move
41689>>>>>>>>>>>                Get piKeyMode to iMode
41690>>>>>>>>>>>                Move (CryptSetKeyParam(hKey,KP_MODE,AddressOf(iMode),0)) to bOk
41691>>>>>>>>>>>            End
41691>>>>>>>>>>>>
41691>>>>>>>>>>>        End
41691>>>>>>>>>>>>
41691>>>>>>>>>>>        Function_Return bOk        
41692>>>>>>>>>>>    End_Function
41693>>>>>>>>>>>    
41693>>>>>>>>>>>    // Encrypts using block cipher
41693>>>>>>>>>>>    Function BlockEncrypt UChar[] ucData Returns UChar[]
41695>>>>>>>>>>>        Handle hProv hKey
41695>>>>>>>>>>>        Integer iLen iSize iBlocks
41695>>>>>>>>>>>        Boolean bOk
41695>>>>>>>>>>>        
41695>>>>>>>>>>>        Get AcquireContext to hProv
41696>>>>>>>>>>>        If (hProv) Begin
41698>>>>>>>>>>>            // Create key
41698>>>>>>>>>>>            Get CreateKey hProv to hKey
41699>>>>>>>>>>>            If (hKey) Begin
41701>>>>>>>>>>>                Get SetKeyParameters hKey to bOk
41702>>>>>>>>>>>                If (bOk) Begin
41704>>>>>>>>>>>                    // Buffer for block ciphers can be up to block length larger
41704>>>>>>>>>>>                    Get piBlockSize to iSize
41705>>>>>>>>>>>                    Move (SizeOfArray(ucData)) to iLen
41706>>>>>>>>>>>                    
41706>>>>>>>>>>>                    Move ((iLen/iSize)+1) to iBlocks
41707>>>>>>>>>>>                    Move (ResizeArray(ucData,iBlocks*iSize)) to ucData
41708>>>>>>>>>>>                    Move (CryptEncrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iLen),SizeOfArray(ucData))) to bOk
41709>>>>>>>>>>>                End
41709>>>>>>>>>>>>
41709>>>>>>>>>>>                Get DestroyKey hKey to bOk
41710>>>>>>>>>>>            End
41710>>>>>>>>>>>>
41710>>>>>>>>>>>            Get ReleaseContext hProv to bOk
41711>>>>>>>>>>>        End
41711>>>>>>>>>>>>
41711>>>>>>>>>>>        Function_Return ucData
41712>>>>>>>>>>>    End_Function
41713>>>>>>>>>>>    
41713>>>>>>>>>>>    // Decrypts using block cipher
41713>>>>>>>>>>>    Function BlockDecrypt UChar[] ucData Returns UChar[]
41715>>>>>>>>>>>        Handle hProv hKey
41715>>>>>>>>>>>        Integer iLen
41715>>>>>>>>>>>        Boolean bOk
41715>>>>>>>>>>>        
41715>>>>>>>>>>>        Get AcquireContext to hProv
41716>>>>>>>>>>>        If (hProv) Begin
41718>>>>>>>>>>>            // Create key
41718>>>>>>>>>>>            Get CreateKey hProv to hKey
41719>>>>>>>>>>>            If (hKey) Begin
41721>>>>>>>>>>>                Get SetKeyParameters hKey to bOk
41722>>>>>>>>>>>                If (bOk) Begin
41724>>>>>>>>>>>                    Move (SizeOfArray(ucData)) to iLen
41725>>>>>>>>>>>                    Move (CryptDecrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iLen))) to bOk
41726>>>>>>>>>>>                    Move (ResizeArray(ucData,iLen)) to ucData
41727>>>>>>>>>>>                End
41727>>>>>>>>>>>>
41727>>>>>>>>>>>                Get DestroyKey hKey to bOk
41728>>>>>>>>>>>            End
41728>>>>>>>>>>>>
41728>>>>>>>>>>>            Get ReleaseContext hProv to bOk
41729>>>>>>>>>>>        End
41729>>>>>>>>>>>>
41729>>>>>>>>>>>        Function_Return ucData
41730>>>>>>>>>>>    End_Function
41731>>>>>>>>>>>    
41731>>>>>>>>>>>    
41731>>>>>>>>>>>    //  Generates random data.
41731>>>>>>>>>>>    Function GenerateRandom Integer iBytes Returns UChar[]
41733>>>>>>>>>>>        Handle hProv
41733>>>>>>>>>>>        UChar[] uaResult
41734>>>>>>>>>>>        Boolean bRes
41734>>>>>>>>>>>        
41734>>>>>>>>>>>        Get AcquireContext to hProv
41735>>>>>>>>>>>        
41735>>>>>>>>>>>        Move (ResizeArray(uaResult, iBytes)) to uaResult
41736>>>>>>>>>>>        Move (CryptGenRandom(hProv, iBytes, AddressOf(uaResult))) to bRes
41737>>>>>>>>>>>        
41737>>>>>>>>>>>        Get ReleaseContext hProv to bRes
41738>>>>>>>>>>>        
41738>>>>>>>>>>>        Function_Return uaResult
41739>>>>>>>>>>>    End_Function
41740>>>>>>>>>>>    
41740>>>>>>>>>>>    //  Generates random data and does a base64 encoding to properly present it as a string.
41740>>>>>>>>>>>    Function GenerateRandomString Integer iLength Returns String
41742>>>>>>>>>>>        String sResult
41742>>>>>>>>>>>        UChar[] ucData
41743>>>>>>>>>>>        Pointer pBase64
41743>>>>>>>>>>>        Integer iVoid
41743>>>>>>>>>>>        
41743>>>>>>>>>>>        Get GenerateRandom iLength to ucData
41744>>>>>>>>>>>        
41744>>>>>>>>>>>        Move (Base64Encode(AddressOf(ucData), iLength)) to pBase64
41745>>>>>>>>>>>        Move (PointerToString(pBase64)) to sResult
41746>>>>>>>>>>>        Move (Free(pBase64)) to iVoid
41747>>>>>>>>>>>        
41747>>>>>>>>>>>        Function_Return (Left(sResult, iLength))
41748>>>>>>>>>>>    End_Function
41749>>>>>>>>>>>    
41749>>>>>>>>>>>End_Class
41750>>>>>>>>>Use Base64Functions.pkg
Including file: Base64Functions.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\Base64Functions.pkg)
41750>>>>>>>>>>>//> This package enables base64 encoding and decoding of strings:
41750>>>>>>>>>>>//>
41750>>>>>>>>>>>//>     Get EncodeString of oBase64Functions sValue to sValue
41750>>>>>>>>>>>//>     Get DecodeString of oBase64Functions sValue to sValue
41750>>>>>>>>>>>//>
41750>>>>>>>>>>>//> Remember to set the "max argument size" if dealing with very large
41750>>>>>>>>>>>//> strings.
41750>>>>>>>>>>>//>
41750>>>>>>>>>>>//> For 17.1 and later the functionality of this package is based on two functions (Base64Encode and
41750>>>>>>>>>>>//> Base64Decode) that are built into the runtime.
41750>>>>>>>>>>>//>
41750>>>>>>>>>>>//> But for versions up to and including 17.0 it's based on the vdfBase64.dll file that was obtained
41750>>>>>>>>>>>//> from DAE that have kindly allowed me to distribute it to other DF developers. Programs including
41750>>>>>>>>>>>//> this package will give off an error on start-up if vdfBase64.dll is not found in the /bin folder
41750>>>>>>>>>>>//> if the VDF runtime. You will find the DLL in the /programs folder of the StureApsPublicLib workspace
41750>>>>>>>>>>>
41750>>>>>>>>>>>Use VdfBase.pkg
41750>>>>>>>>>>>
41750>>>>>>>>>>>// Functions in vdfBase64.dll
41750>>>>>>>>>>>External_Function xxBase64Encode "vdfbase64Encode" vdfBase64.dll Pointer pBuffer Returns Integer
41751>>>>>>>>>>>External_Function xxBase64Decode "vdfbase64Decode" vdfBase64.dll Pointer pBuffer Returns Integer
41752>>>>>>>>>>>External_Function xxBase64Free   "vdfbase64Free"   vdfBase64.dll Pointer pBuffer Returns Integer
41753>>>>>>>>>>>
41753>>>>>>>>>>>// Structure
41753>>>>>>>>>>>Struct txxfBase64Buffer
41753>>>>>>>>>>>    Pointer pData
41753>>>>>>>>>>>    Integer iLength
41753>>>>>>>>>>>End_Struct 
41753>>>>>>>>>>>
41753>>>>>>>>>>>Global_Variable Integer oBase64Functions
41753>>>>>>>>>>>
41753>>>>>>>>>>>Object _oBase64Functions is a cObject
41755>>>>>>>>>>>    Move Self to oBase64Functions
41756>>>>>>>>>>>
41756>>>>>>>>>>>
41756>>>>>>>>>>>    Function EncodeString String sValue Returns String
41759>>>>>>>>>>>        Address pBase64
41759>>>>>>>>>>>        String sResult
41759>>>>>>>>>>>        Integer iVoid
41759>>>>>>>>>>>        Move (Base64Encode(AddressOf(sValue), Length(sValue))) to pBase64
41760>>>>>>>>>>>        Move (PointerToString(pBase64)) to sResult
41761>>>>>>>>>>>        Move (Free(pBase64)) to iVoid
41762>>>>>>>>>>>        Function_Return sResult
41763>>>>>>>>>>>    End_Function
41764>>>>>>>>>>>
41764>>>>>>>>>>>    Function DecodeString String sValue Returns String
41767>>>>>>>>>>>        Address pBinary
41767>>>>>>>>>>>        String sBinary
41767>>>>>>>>>>>        Integer iVoid iLen
41767>>>>>>>>>>>        Move (Base64Decode(AddressOf(sValue), &iLen)) to pBinary
41768>>>>>>>>>>>        Move (Repeat(Character(0), iLen)) to sBinary
41769>>>>>>>>>>>        Move (MemCopy(AddressOf(sBinary), pBinary, iLen)) to iVoid
41770>>>>>>>>>>>        Move (Free(pBinary)) to iVoid
41771>>>>>>>>>>>        Function_Return sBinary
41772>>>>>>>>>>>    End_Function
41773>>>>>>>>>>>
41773>>>>>>>>>>>End_Object
41774>>>>>>>>>Use MSSqldrv.pkg
41774>>>>>>>>>Use db2_drv.pkg
41774>>>>>>>>>Use odbc_drv.pkg
41774>>>>>>>>>Use DFBtrDrv.pkg
41774>>>>>>>>>Use vWin32fh.pkg
41774>>>>>>>>>
41774>>>>>>>>>Use DUFLanguageConstants.inc
41774>>>>>>>>>
41774>>>>>>>>>    Define DATAFLEX_ID for "DATAFLEX"
41774>>>>>>>>>
41774>>>>>>>>>// Create a new PSQL identifier for the Btrieve driver.
41774>>>>>>>>>    Define PSQLDRV_ID for "DFBTRDRV"
41774>>>>>>>>>
41774>>>>>>>>>// SQL Back-ends (iSQLDbType in the tSQLKeywords struct).
41774>>>>>>>>>// They can have slightly different SQL keywords.
41774>>>>>>>>>// Note: If a new type is added to the list,
41774>>>>>>>>>//       the struct array xxx must be adjusted
41774>>>>>>>>>//       so that it is filled with all SQL
41774>>>>>>>>>//       keywords for that new type.
41774>>>>>>>>>Enum_List  
41774>>>>>>>>>        Define EN_DbTypeDataFlex   for 0
41774>>>>>>>>>        Define EN_DbTypeMSSQL      for 1
41774>>>>>>>>>        Define EN_DbTypeMySQL      for 2
41774>>>>>>>>>        Define EN_DbTypeOracle     for 3
41774>>>>>>>>>        Define EN_DbTypeDB2        for 4
41774>>>>>>>>>        Define EN_DbTypePostgre    for 5
41774>>>>>>>>>        Define EN_DbTypePervasive  for 6
41774>>>>>>>>>End_Enum_List
41774>>>>>>>>>
41774>>>>>>>>>// We need to have our "own" constants for the standard DataFlex data types.
41774>>>>>>>>>// These can be used with SQL functions such as e.g. SQLColumnAdd, instead
41774>>>>>>>>>// of using one of the driver specific integer constants such as e.g. "SQL_VARCHAR".
41774>>>>>>>>>Define CS_DbTypeDataFlex    for "DataFlex Embedded"
41774>>>>>>>>>Define CS_DbTypeMSSQL       for "Microsoft SQL Server"
41774>>>>>>>>>Define CS_DbTypeMySQL       for "MySQL"
41774>>>>>>>>>Define CS_DbTypeOracle      for "Oracle"
41774>>>>>>>>>Define CS_DbTypeDB2         for "IBM DB2"
41774>>>>>>>>>Define CS_DbTypePostgre     for "PostgreSQL"
41774>>>>>>>>>Define CS_DbTypePervasive   for "Pervasive.SQL (Btrieve)"
41774>>>>>>>>>
41774>>>>>>>>>
41774>>>>>>>>>// SQLConnection.ini constants:
41774>>>>>>>>>    Define CS_SQLConnectionIDText       for "DFConnectionId"
41774>>>>>>>>>
41774>>>>>>>>>Define CS_SQLIniFileName                for "SQLConnections.ini"
41774>>>>>>>>>Define CS_SQLDF19IniFileName            for "DFConnId.ini"
41774>>>>>>>>>Define CS_SQLIniConnectionSection       for "SQL Connections" // Obsolete!
41774>>>>>>>>>Define CS_SQLIniSectionName             for "Connection"
41774>>>>>>>>>Define CS_SQLODBCIniSectionName         for "ODBC"
41774>>>>>>>>>
41774>>>>>>>>>// DF 19 ini-file settings:
41774>>>>>>>>>Define CS_SQLIniConnectionIdKeyword     for "Id"
41774>>>>>>>>>Define CS_SQLIniDriverKeyword           for "Driver"
41774>>>>>>>>>Define CS_SQLIniConnectionKeyWord       for "Connection"
41774>>>>>>>>>Define CS_SQLIniUIDKeyword              for "UID"
41774>>>>>>>>>Define CS_SQLIniPWDKeyword              for "PWD"
41774>>>>>>>>>Define CS_SQLIniDFPWDKeyword            for "DFPWD"
41774>>>>>>>>>Define CS_SQLIniServerKeyword           for "SERVER"
41774>>>>>>>>>Define CS_SQLIniDSNKeyword              for "DSN"
41774>>>>>>>>>Define CS_SQLIniFileDSNKeyword          for "FILEDSN"
41774>>>>>>>>>Define CS_SQLIniDatabaseKeyword         for "DATABASE"
41774>>>>>>>>>Define CS_SQLIniTrustedKeyword          for "Trusted_Connection" 
41774>>>>>>>>>Define CS_SQLIniDisabledKeyword         for "Disabled"
41774>>>>>>>>>
41774>>>>>>>>>// Database Update Framework extended settings:
41774>>>>>>>>>Define CS_SQLIniDbTypeKeyword           for "DbType"
41774>>>>>>>>>Define CS_SQLIniSchemaKeyword           for "Schema"
41774>>>>>>>>>Define CS_SQLIniBaseTableSpaceKeyword   for "Base Table Space"
41774>>>>>>>>>Define CS_SQLIniLongTableSpaceKeyword   for "Long Table Space"
41774>>>>>>>>>Define CS_SQLIniIndexTableSpaceKeyword  for "Index Table Space"
41774>>>>>>>>>Define CS_SQLIniSilentLoginKeyword      for "Silent Login"
41774>>>>>>>>>Define CS_SQLIniDisabledKeyword         for "Disabled"      // For compatability with DF19.
41774>>>>>>>>>
41774>>>>>>>>>Define CS_SQLIniConnectionPWD           for "PWD"
41774>>>>>>>>>Define CS_SQLIniConnectionYes           for "Yes"
41774>>>>>>>>>Define CS_SQLIniConnectionNo            for "No"
41774>>>>>>>>>
41774>>>>>>>>>Struct tSQLConnection
41774>>>>>>>>>    Boolean bEnabled                // 1. There can only be one active/enabled connection at a time.
41774>>>>>>>>>    String sConnectionID            // 2. The name of the connection ID.
41774>>>>>>>>>    Integer iDbType                 // 3. Database type; "MS-SQL Server", "DB2", "Oracle", "MySQL", "PostgreSQL"
41774>>>>>>>>>    String sDriverID                // 4. Name of the driver. E.g. MSSQLDRV, DB2_DRV, ODBC_DRV or PSQLDRV_ID.
41774>>>>>>>>>    String sServer                  // 5. SQL Server/DSN/ODBC source name. (In DF19 this is the "sString" member of the tConnection struct.)
41774>>>>>>>>>    String sDatabase                // 6. SQL Database
41774>>>>>>>>>    String sConnectionString        // 7. Full connection string as is needed by e.g. the login command.
41774>>>>>>>>>    Boolean bTrusted                // 8. Trusted connection (then is UID & PWD not used)
41774>>>>>>>>>    String sUserID                  // 9. User ID
41774>>>>>>>>>    String sPassword                // 10. Password
41774>>>>>>>>>    String sSchema                  // 11. DB2 (and perhaps ODBC specific)
41774>>>>>>>>>    String sBaseTableSpace          // 12. DB2 specific
41774>>>>>>>>>    String sLongTableSpace          // 13. DB2 specific
41774>>>>>>>>>    String sIndexTableSpace         // 14. DB2 specific
41774>>>>>>>>>    Boolean bSilentLogin            // 15. True=Silent login. (i.e. don't show Database login dialog if database login to fails). Same as driver "Options" parameter.
41774>>>>>>>>>    Boolean bError                  // 16. Set to true on error.
41774>>>>>>>>>    Boolean bDAWConnection          // 17. True if a DFConnId.ini file (from DAW) has been used instead of a DUF SQLConnections.ini file.
41774>>>>>>>>>End_Struct
41774>>>>>>>>>
41774>>>>>>>>>Struct tFilelist
41774>>>>>>>>>    String sRootName
41774>>>>>>>>>    String sLogicalName
41774>>>>>>>>>    String sDisplayName    
41774>>>>>>>>>    String sNoDriverRootname
41774>>>>>>>>>    String sDriver
41774>>>>>>>>>    Handle hTable
41774>>>>>>>>>    Boolean bIsSystemFile 
41774>>>>>>>>>    Boolean bErrorOpening
41774>>>>>>>>>    Boolean bIsAlias
41774>>>>>>>>>End_Struct
41774>>>>>>>>>
41774>>>>>>>>>Struct tFilelistLogicalName
41774>>>>>>>>>    String sLogicalName
41774>>>>>>>>>    String sNoDriverRootname
41774>>>>>>>>>    String sRootName
41774>>>>>>>>>    String sDisplayName    
41774>>>>>>>>>    String sDriver
41774>>>>>>>>>    Handle hTable
41774>>>>>>>>>    Boolean bIsSystemFile 
41774>>>>>>>>>    Boolean bErrorOpening
41774>>>>>>>>>    Boolean bIsAlias
41774>>>>>>>>>End_Struct
41774>>>>>>>Use cDbUpdateFunctionLibrary.inc
Including file: cDbUpdateFunctionLibrary.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cDbUpdateFunctionLibrary.inc)
41774>>>>>>>>>Use DUFLanguageConstants.inc
41774>>>>>>>>>
41774>>>>>>>>>Register_Function paSQLQueryMessages Returns String[]
41774>>>>>>>>>Register_Procedure Set paSQLQueryMessages String[] aSQLQueryMessages
41774>>>>>>>>>
41774>>>>>>>>>    Define CS_DatabaseUpdateFramework for " ***  The Database Update Framework (DUF) ***"
41774>>>>>>>>>
41774>>>>>>>>>
41774>>>>>>>>>    Define CS_OEM_Txt for "OEM"
41774>>>>>>>>>
41774>>>>>>>>>    Define CS_ANSI_Txt for "ANSI"
41774>>>>>>>>>
41774>>>>>>>>>    Define CS_DFCONNID for "DFCONNID"
41774>>>>>>>>>
41774>>>>>>>>>    Define CS_SERVER for "SERVER"
41774>>>>>>>>>
41774>>>>>>>>>    Define CS_SERVER_NAME for "SERVER_NAME"
41774>>>>>>>>>
41774>>>>>>>>>    Define CS_DRIVER_NAME for "DRIVER_NAME"
41774>>>>>>>>>
41774>>>>>>>>>    Define CS_DATABASE_NAME for "DATABASE_NAME"
41774>>>>>>>>>
41774>>>>>>>>>    Define CS_SCHEMA_NAME for "SCHEMA_NAME"
41774>>>>>>>>>
41774>>>>>>>>>    Define CS_TABLE_CHARACTER_FORMAT for "TABLE_CHARACTER_FORMAT"
41774>>>>>>>>>
41774>>>>>>>>>    Define CS_USE_DUMMY_ZERO_DATE for "USE_DUMMY_ZERO_DATE"
41774>>>>>>>>>
41774>>>>>>>>>    Define CS_SYSTEM_FILE for "SYSTEM_FILE"
41774>>>>>>>>>
41774>>>>>>>>>    Define CS_RECNUM_TABLE for "RECNUM_TABLE"
41774>>>>>>>>>
41774>>>>>>>>>    Define CS_PRIMARY_INDEX for "PRIMARY_INDEX"
41774>>>>>>>>>
41774>>>>>>>>>    Define CS_INDEX_NUMBER for "INDEX_NUMBER"
41774>>>>>>>>>
41774>>>>>>>>>    Define CS_INDEX_NAME for "INDEX_NAME"
41774>>>>>>>>>
41774>>>>>>>>>    Define CS_DUFLowestAllowedDateValue for "01/01/1753"
41774>>>>>>>>>    Define CS_DUFLowestSQLDateValue     for "1753-01-01"
41774>>>>>>>>>
41774>>>>>>>>>    Define CS_DUFBackupDataFolder for "BackupData"
41774>>>>>>>>>
41774>>>>>>>>>// Global handle to a cDatabaseUpdateHandler object
41774>>>>>>>>>    Global_Variable Handle ghoDbUpdateHandler    
41774>>>>>>>>>    Move 0 to ghoDbUpdateHandler
41775>>>>>>>>>
41775>>>>>>>>>    Global_Variable Handle ghoDbUpdateFunctionLibrary  
41775>>>>>>>>>    Move 0 to ghoDbUpdateFunctionLibrary
41776>>>>>>>>>
41776>>>>>>>>>Struct tSQLScriptArray
41776>>>>>>>>>    Boolean bError
41776>>>>>>>>>    Boolean bArgumentSizeChanged
41776>>>>>>>>>    Integer iOrgArgumentSize
41776>>>>>>>>>    String[] sSQLScriptArray
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>Struct tSqlErrorArray
41776>>>>>>>>>    String[]  sSqlErrorArray
41776>>>>>>>>>    String[]  sSqlStatementArray
41776>>>>>>>>>    Integer[] iSqlErrorArray
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>Struct tSqlColumnNew
41776>>>>>>>>>    String  sBaseColumnName
41776>>>>>>>>>    String  sBaseTableName
41776>>>>>>>>>    String  sLabel
41776>>>>>>>>>    Integer iSqlType
41776>>>>>>>>>    Integer iSize
41776>>>>>>>>>    Integer iPrecision
41776>>>>>>>>>    Integer iDFType
41776>>>>>>>>>    Integer iDFNativeType
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>Struct tColumnType
41776>>>>>>>>>    Integer iSQLType
41776>>>>>>>>>    String  sSQLType
41776>>>>>>>>>    Boolean bCanEditSize
41776>>>>>>>>>    Integer iDefaultSize
41776>>>>>>>>>    Integer iMinSize
41776>>>>>>>>>    Number  nMaxSize
41776>>>>>>>>>    String  sDataFlexType
41776>>>>>>>>>    Integer iDataFlexType
41776>>>>>>>>>    Boolean bNativeDataType
41776>>>>>>>>>    String  sPrecision
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>// Used to store/retreive SQL keywords in a struct array.
41776>>>>>>>>>// Various SQL back-ends can have slightly different
41776>>>>>>>>>// keywords.
41776>>>>>>>>>Struct tSQLKeyWords
41776>>>>>>>>>    Integer iSQLWord
41776>>>>>>>>>    Integer iSQLDbType
41776>>>>>>>>>    String  sSQLPhrase // Can be more than one word.
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>Struct tSQLRelation
41776>>>>>>>>>    Integer iFileNumber
41776>>>>>>>>>    Integer iFieldNumber
41776>>>>>>>>>    String  sFileName
41776>>>>>>>>>    String  sFieldName
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>Struct tSQLLoggedInUser
41776>>>>>>>>>    String sUser
41776>>>>>>>>>    String sProgram
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>// Used as a start for error handing. Used by Error_Report_Mode property
41776>>>>>>>>>Enumeration_List
41776>>>>>>>>>    Define DUF_ERROR_REPORT    // Report Error on screen
41776>>>>>>>>>    Define DUF_ERROR_NO_REPORT // Show no Error..
41776>>>>>>>>>End_Enumeration_List
41776>>>>>>>>>
41776>>>>>>>>>// We need to re-define the standard constants because several driver constants
41776>>>>>>>>>// have the same value and we need to be able to distinguish which data type to use when
41776>>>>>>>>>// SQL Back-ends (iSQLDbType in the tSQLKeywords struct).
41776>>>>>>>>>// They can have slightly different SQL keywords.
41776>>>>>>>>>// Note: If a new type is added to the list,
41776>>>>>>>>>//       the struct array xxx must be adjusted
41776>>>>>>>>>//       so that it is filled with all SQL
41776>>>>>>>>>//       keywords for that new type.
41776>>>>>>>>>Enum_List
41776>>>>>>>>>//    Define EN_DbTypeMSSQL
41776>>>>>>>>>//    Define EN_DbTypeMySQL
41776>>>>>>>>>//    Define EN_DbTypeOracle
41776>>>>>>>>>//    Define EN_DbTypeDB2
41776>>>>>>>>>//    Define EN_DbTypePostgre
41776>>>>>>>>>//    Define EN_DbTypeDataFlex // Embedded database.
41776>>>>>>>>>End_Enum_List
41776>>>>>>>>>
41776>>>>>>>>>// We need to have our "own" constants for the standard DataFlex data types.
41776>>>>>>>>>// These can be used with SQL functions such as e.g. SQLColumnAdd, instead
41776>>>>>>>>>// of using one of the driver specific integer constants such as e.g. "SQL_VARCHAR".
41776>>>>>>>>>Define CS_DbTypeMSSQL       for "Microsoft SQL Server"
41776>>>>>>>>>Define CS_DbTypeMySQL       for "MySQL"
41776>>>>>>>>>Define CS_DbTypeOracle      for "Oracle"
41776>>>>>>>>>Define CS_DbTypeDB2         for "IBM DB2"
41776>>>>>>>>>Define CS_DbTypePostgre     for "PostgreSQL"
41776>>>>>>>>>Define CS_DbTypeDataFlex    for "DataFlex Embedded"
41776>>>>>>>>>
41776>>>>>>>>>// We need to re-define the standard constants because several driver constants
41776>>>>>>>>>// have the same value and we need to be able to distinguish which data type to use when
41776>>>>>>>>>// e.g. creating a column with embedded SQL (ESQL).
41776>>>>>>>>>Enum_List
41776>>>>>>>>>    Define DF_ASCII_DUF     for -1500 // All of these are DF_xxx constant values - 1500
41776>>>>>>>>>    Define DF_BCD_DUF       for -1499
41776>>>>>>>>>    Define DF_DATE_DUF      for -1498
41776>>>>>>>>>    Define DF_TEXT_DUF      for -1495
41776>>>>>>>>>    Define DF_BINARY_DUF    for -1494
41776>>>>>>>>>    Define DF_DATETIME_DUF  for -1493
41776>>>>>>>>>End_Enum_List
41776>>>>>>>>>
41776>>>>>>>>>    Define SQL_TEXT for (DF_TEXT + 1024)
41776>>>>>>>>>
41776>>>>>>>>>Define SQL_CHARBIT          for (DF_BINARY + 1024)
41776>>>>>>>>>Define SQL_LONGVARCHARBIT   for (DF_BINARY + 1025)
41776>>>>>>>>>Define SQL_VARCHARBIT       for (DF_BINARY + 1026)
41776>>>>>>>>>
41776>>>>>>>>>// These are not defined pre DF 18:
41776>>>>>>>>>
41776>>>>>>>>>Struct tSQLIntTableInfo
41776>>>>>>>>>    String sDriverName
41776>>>>>>>>>    String sServerName
41776>>>>>>>>>    String sDatabaseName
41776>>>>>>>>>    String sSchemaName
41776>>>>>>>>>    Boolean bRecnumTable
41776>>>>>>>>>    Integer iPrimaryIndex
41776>>>>>>>>>    Integer iGenerateRecordIdMethod  // RIM_NONE, RIM_IDENTITY_COLUMN,  RIM_DISPENSER_TABLE, RIM_EXTERNAL
41776>>>>>>>>>    String sTableCharacterFormat
41776>>>>>>>>>    Boolean bUseDummyZeroDate
41776>>>>>>>>>    Integer iFileDummyUpdateColumn // Init value to -1 if not exists (value can be in range 1 - number of columns)
41776>>>>>>>>>    Integer iFileBlockSize         // Init value to -1 if not exists
41776>>>>>>>>>    Integer iFileMaxRowsFetched    // Init value to -1 if not exists
41776>>>>>>>>>    Integer iFileGetRidAfterCreate // Init value to -1. But is boolean!
41776>>>>>>>>>    Integer iFileJitBinding        // Init value to -1. But is boolean!
41776>>>>>>>>>    String sRefindAfterSave        // Yes or No (how to handle?)
41776>>>>>>>>>    String sSystemFile             // Yes or No (how to handle?)
41776>>>>>>>>>    String sFileIndexTablespace
41776>>>>>>>>>    String sFileLongTablespace
41776>>>>>>>>>    String sTableTablespace
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>Struct tSQLIntColumnInfo
41776>>>>>>>>>    Integer iFieldNumber
41776>>>>>>>>>    Integer iFieldIndex
41776>>>>>>>>>    Integer iFieldRelatedFile
41776>>>>>>>>>    Integer iFieldRelatedField
41776>>>>>>>>>    Integer iIndexNumber
41776>>>>>>>>>    Integer iIndexNumberSegments
41776>>>>>>>>>    Integer iIndexSegmentField1
41776>>>>>>>>>    Integer iIndexSegmentField2
41776>>>>>>>>>    Integer iIndexSegmentFieldn
41776>>>>>>>>>    String  sIndexName
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>Struct tAPIColumn
41776>>>>>>>>>    Integer iFieldNumber
41776>>>>>>>>>    String  sFieldName
41776>>>>>>>>>    Integer iType
41776>>>>>>>>>    String  sType
41776>>>>>>>>>    Integer iLength
41776>>>>>>>>>    Integer iPrecision
41776>>>>>>>>>    Integer iOptions
41776>>>>>>>>>    Boolean bIsSQLType
41776>>>>>>>>>    Boolean bAllowNULL
41776>>>>>>>>>    String  sDefaultValue
41776>>>>>>>>>    Boolean bShouldChange
41776>>>>>>>>>    Boolean bCancel
41776>>>>>>>>>    Boolean bError
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>Struct tAPIColumnCompare
41776>>>>>>>>>    Integer iFieldNumber
41776>>>>>>>>>    // FROM database:
41776>>>>>>>>>    Boolean bExistsFrom
41776>>>>>>>>>    String  sFieldNameFrom
41776>>>>>>>>>    Integer iTypeFrom
41776>>>>>>>>>    String  sTypeFrom
41776>>>>>>>>>    Integer iLengthFrom
41776>>>>>>>>>    Integer iPrecisionFrom
41776>>>>>>>>>    Integer iOptionsFrom
41776>>>>>>>>>    Boolean bIsSQLTypeFrom
41776>>>>>>>>>    Boolean bAllowNULLFrom
41776>>>>>>>>>    String  sDefaultValueFrom
41776>>>>>>>>>    Boolean bShouldChangeFrom
41776>>>>>>>>>    Boolean bCancelFrom
41776>>>>>>>>>    Boolean bErrorFrom
41776>>>>>>>>>    // TO database:
41776>>>>>>>>>    Boolean bExistsTo
41776>>>>>>>>>    Integer iFieldNumberTo
41776>>>>>>>>>    String  sFieldNameTo
41776>>>>>>>>>    Integer iTypeTo
41776>>>>>>>>>    String  sTypeTo
41776>>>>>>>>>    Integer iLengthTo
41776>>>>>>>>>    Integer iPrecisionTo
41776>>>>>>>>>    Integer iOptionsTo
41776>>>>>>>>>    Boolean bIsSQLTypeTo
41776>>>>>>>>>    Boolean bAllowNULLTo
41776>>>>>>>>>    String  sDefaultValueTo
41776>>>>>>>>>    Boolean bShouldChangeTo
41776>>>>>>>>>    Boolean bCancelTo
41776>>>>>>>>>    Boolean bErrorTo
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>Struct tAPIRelation
41776>>>>>>>>>    Handle  hTableFrom
41776>>>>>>>>>    Integer iColumnFrom
41776>>>>>>>>>    Handle  hTableTo
41776>>>>>>>>>    Integer iColumnTo
41776>>>>>>>>>    String  sLogicalNameFrom
41776>>>>>>>>>    String  sLogicalNameTo
41776>>>>>>>>>    String  sFieldNameFrom
41776>>>>>>>>>    String  sFieldNameTo
41776>>>>>>>>>    Boolean bShouldChange
41776>>>>>>>>>    Boolean bCancel
41776>>>>>>>>>    Boolean bError
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>Struct tAPIRelationCompare
41776>>>>>>>>>    // Common:
41776>>>>>>>>>    Handle  hTableFrom
41776>>>>>>>>>    Integer iColumnFrom
41776>>>>>>>>>    Handle  hTableTo
41776>>>>>>>>>    Integer iColumnTo
41776>>>>>>>>>    // FROM database:
41776>>>>>>>>>    Boolean bExistsFrom
41776>>>>>>>>>    String  sLogicalNameFrom_From
41776>>>>>>>>>    String  sLogicalNameTo_From
41776>>>>>>>>>    String  sFieldNameFrom_From
41776>>>>>>>>>    String  sFieldNameTo_From
41776>>>>>>>>>    Boolean bShouldChange_From
41776>>>>>>>>>    Boolean bCancel_From
41776>>>>>>>>>    Boolean bError_From
41776>>>>>>>>>    // TO database:
41776>>>>>>>>>    Boolean bExistsTo
41776>>>>>>>>>    String  sLogicalNameFrom_To
41776>>>>>>>>>    String  sLogicalNameTo_To
41776>>>>>>>>>    String  sFieldNameFrom_To
41776>>>>>>>>>    String  sFieldNameTo_To
41776>>>>>>>>>    Boolean bShouldChange_To
41776>>>>>>>>>    Boolean bCancel_To
41776>>>>>>>>>    Boolean bError_To
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>Struct tAPIIndexSegment
41776>>>>>>>>>    Integer iFieldNumber
41776>>>>>>>>>    String  sFieldName
41776>>>>>>>>>    Boolean bUppercase
41776>>>>>>>>>    Boolean bAscending
41776>>>>>>>>>    Boolean bShouldChange
41776>>>>>>>>>    Boolean bCancel
41776>>>>>>>>>    Boolean bError
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>Struct tAPIIndex
41776>>>>>>>>>    Integer iIndexNumber
41776>>>>>>>>>    Integer iPrimaryIndex
41776>>>>>>>>>    String  sSQLIndexName
41776>>>>>>>>>    Integer iSQLIndexType
41776>>>>>>>>>    Boolean bIsSQLClustered
41776>>>>>>>>>    Boolean bIsSQLPrimaryKey
41776>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArray
41776>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArray
41776>>>>>>>>>    Boolean bShouldChange
41776>>>>>>>>>    Boolean bCancel
41776>>>>>>>>>    Boolean bError
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>Struct tAPIIndexCompare
41776>>>>>>>>>    // Common:
41776>>>>>>>>>    Integer iIndexNumber
41776>>>>>>>>>    // FROM database:
41776>>>>>>>>>    Boolean bExistsFrom
41776>>>>>>>>>    Integer iPrimaryIndexFrom
41776>>>>>>>>>    String  sSQLIndexNameFrom
41776>>>>>>>>>    Integer iSQLIndexTypeFrom
41776>>>>>>>>>    Boolean bIsSQLClusteredFrom
41776>>>>>>>>>    Boolean bIsSQLPrimaryKeyFrom
41776>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArrayFrom
41776>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArrayFrom
41776>>>>>>>>>    Boolean bShouldChangeFrom
41776>>>>>>>>>    Boolean bCancelFrom
41776>>>>>>>>>    Boolean bErrorFrom
41776>>>>>>>>>    // TO database:
41776>>>>>>>>>    Boolean bExistsTo
41776>>>>>>>>>    Integer iPrimaryIndexTo
41776>>>>>>>>>    String  sSQLIndexNameTo
41776>>>>>>>>>    Integer iSQLIndexTypeTo
41776>>>>>>>>>    Boolean bIsSQLClusteredTo
41776>>>>>>>>>    Boolean bIsSQLPrimaryKeyTo
41776>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArrayTo
41776>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArrayTo
41776>>>>>>>>>    Boolean bShouldChangeTo
41776>>>>>>>>>    Boolean bCancelTo
41776>>>>>>>>>    Boolean bErrorTo
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>Struct tAPITableNameInfo
41776>>>>>>>>>    Integer iTableNumber
41776>>>>>>>>>    String  sRootName
41776>>>>>>>>>    String  sLogicalName
41776>>>>>>>>>    String  sDisplayName
41776>>>>>>>>>    String  sDriverID
41776>>>>>>>>>    Boolean bIsAlias
41776>>>>>>>>>    Boolean bIsSQL
41776>>>>>>>>>    Boolean bIsSystemFile
41776>>>>>>>>>    Boolean bShouldChange
41776>>>>>>>>>    Boolean bCancel
41776>>>>>>>>>    Boolean bError
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>Struct tAPITableNameInfoCompare
41776>>>>>>>>>    Integer iTableNumber
41776>>>>>>>>>    // FROM
41776>>>>>>>>>    Boolean bExistsFrom
41776>>>>>>>>>    String  sRootNameFrom
41776>>>>>>>>>    String  sLogicalNameFrom
41776>>>>>>>>>    String  sDisplayNameFrom
41776>>>>>>>>>    String  sDriverIDFrom
41776>>>>>>>>>    Boolean bIsAliasFrom
41776>>>>>>>>>    Boolean bIsSQLFrom
41776>>>>>>>>>    Boolean bIsSystemFileFrom
41776>>>>>>>>>    // TO database:
41776>>>>>>>>>    Boolean bExistsTo
41776>>>>>>>>>    String  sRootNameTo
41776>>>>>>>>>    String  sLogicalNameTo
41776>>>>>>>>>    String  sDisplayNameTo
41776>>>>>>>>>    String  sDriverIDTo
41776>>>>>>>>>    Boolean bIsAliasTo
41776>>>>>>>>>    Boolean bIsSQLTo
41776>>>>>>>>>    Boolean bIsSystemFileTo // *** Implement!
41776>>>>>>>>>    Boolean bShouldChange
41776>>>>>>>>>    Boolean bCancel
41776>>>>>>>>>    Boolean bError
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>Struct tAPITable
41776>>>>>>>>>    Handle hTable
41776>>>>>>>>>    Boolean bFromTable
41776>>>>>>>>>    Boolean bToTable
41776>>>>>>>>>    tAPITableNameInfo ApiTableInfo
41776>>>>>>>>>    tAPITableNameInfo ApiTableInfo
41776>>>>>>>>>    tAPIColumn[]      aApiColumns
41776>>>>>>>>>    tAPIColumn[]      aApiColumns
41776>>>>>>>>>    tAPIIndex[]       aApiIndexes
41776>>>>>>>>>    tAPIIndex[]       aApiIndexes
41776>>>>>>>>>    tAPIRelation[]    aApiRelations
41776>>>>>>>>>    tAPIRelation[]    aApiRelations
41776>>>>>>>>>    Boolean bShouldChange
41776>>>>>>>>>    Boolean bCancel
41776>>>>>>>>>    Boolean bError
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>Struct tAPITableCompare
41776>>>>>>>>>    Handle hTable
41776>>>>>>>>>    // FROM database:
41776>>>>>>>>>    Boolean bExistsFrom
41776>>>>>>>>>    // TO database:
41776>>>>>>>>>    Boolean bExistsTo
41776>>>>>>>>>    // Both:
41776>>>>>>>>>    tAPITableNameInfoCompare APITableNameInfoCompare
41776>>>>>>>>>    tAPITableNameInfoCompare APITableNameInfoCompare
41776>>>>>>>>>    tAPIColumnCompare[]     aAPIColumnsCompare
41776>>>>>>>>>    tAPIColumnCompare[]     aAPIColumnsCompare
41776>>>>>>>>>    tAPIIndexCompare[]      aAPIIndexesCompare
41776>>>>>>>>>    tAPIIndexCompare[]      aAPIIndexesCompare
41776>>>>>>>>>    tAPIRelationCompare[]   aAPIRelationsCompare
41776>>>>>>>>>    tAPIRelationCompare[]   aAPIRelationsCompare
41776>>>>>>>>>    Boolean bShouldChange   // Not implemented yet (!)
41776>>>>>>>>>    Boolean bCancel         // User cancel
41776>>>>>>>>>    Boolean bError          // Error occured while collecting data
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>Struct tAPITableBooleans
41776>>>>>>>>>    Boolean bApiTableUpdateAuto
41776>>>>>>>>>    Boolean bCompareDate_DateTime
41776>>>>>>>>>    Boolean bCompareIndexAscending
41776>>>>>>>>>    Boolean bCompareIndexUppercase
41776>>>>>>>>>    Boolean bCompareFilelistUppercase
41776>>>>>>>>>End_Struct
41776>>>>>>>>>
41776>>>>>>>>>Define C_tAPIColumn_None for 0
41776>>>>>>>>>Define C_tAPIColumn_Identity for 1
41776>>>>>>>>>
41776>>>>>>>>>// SQL Key-Word Constants:  CI_SQLSelect CI_SQLName CI_SQLFrom  CI_SQLSys
41776>>>>>>>>>// Used by the _SqlFindKeyWord function to return a proper keyword depending on the backend SQL,
41776>>>>>>>>>// i.e. one of the EN_DbTypeXXX members from the Enum_list above.
41776>>>>>>>>>// E.g. the CI_SQLAlterTable is only defined once, but the _SqlFindKeyWord function can return
41776>>>>>>>>>// different wording content depending on the EN_xxx value also passed to the function.
41776>>>>>>>>>Enum_List
41776>>>>>>>>>    Define CI_SQLAlterDatabase         //for "ALTER DATABASE"
41776>>>>>>>>>    Define CI_SQLSingle_User           //for "SINGLE_USER"
41776>>>>>>>>>    Define CI_SQLMulti_User            //for "USER_USER"
41776>>>>>>>>>    Define CI_SQLRollback              //for "ROLLBACK"
41776>>>>>>>>>    Define CI_SQLIMMEDIATE             //for "IMMEDIATE"
41776>>>>>>>>>    Define CI_SQLAlterTable            //for "ALTER TABLE"
41776>>>>>>>>>    Define CI_SQLAlterColumn           //for "ALTER COLUMN"
41776>>>>>>>>>    Define CI_SQLRenameColumn          //for "RENAME COLUMN"
41776>>>>>>>>>    Define CI_SQLColumn                //for "COLUMN"
41776>>>>>>>>>    Define CI_SQLSelect                //for "SELECT"
41776>>>>>>>>>    Define CI_SQLWhere                 //for "WHERE"
41776>>>>>>>>>    Define CI_SQLInfoSchema            //for "INFORMATION_SCHEMA.COLUMNS"
41776>>>>>>>>>    Define CI_SQLTable_Name            //for "TABLE_NAME"
41776>>>>>>>>>    Define CI_SQLTable                 //for "TABLE"
41776>>>>>>>>>    Define CI_SQLSys                   //for "SYS"
41776>>>>>>>>>    Define CI_SQLSp_Help               //for "SP_HELP"
41776>>>>>>>>>    Define CI_SQLFrom                  //for "FROM"
41776>>>>>>>>>    Define CI_SQLAdd                   //for "ADD"
41776>>>>>>>>>    Define CI_SQLDropColumn            //for "DROP"
41776>>>>>>>>>    Define CI_SQLCreateDatabase        //for "CREATE DATABASE"
41776>>>>>>>>>    Define CI_SQLDatabaseCollation     //for "COLLATE"
41776>>>>>>>>>    Define CI_SQLCreateTable           //for "CREATE TABLE"
41776>>>>>>>>>    Define CI_SQLDropTable             //for "DROP TABLE"
41776>>>>>>>>>    Define CI_SQLCreateView            //for "CREATE VIEW"
41776>>>>>>>>>    Define CI_SQLRenameTable           //for "RENAME TABLE"
41776>>>>>>>>>//    Define CI_SQLSelectFromWhereName   //for "SELECT name from [master].[dbo].[sysdatabases] where name"
41776>>>>>>>>>    Define CI_SQLDropView              //for "DROP VIEW"
41776>>>>>>>>>    Define CI_SQLSetNoCountOn          //for "SET NOCOUNT ON"
41776>>>>>>>>>    Define CI_SQLTo                    //for "TO"
41776>>>>>>>>>    Define CI_SQLGO                    //for "GO"
41776>>>>>>>>>    Define CI_SQLUse                   //for "USE"
41776>>>>>>>>>    Define CI_SQLDBO                   //for "DBO"
41776>>>>>>>>>
41776>>>>>>>>>    Define CI_SQLName                  //for "NAME"
41776>>>>>>>>>    Define CI_SQLMaster                //for "MASTER"
41776>>>>>>>>>    Define CI_SQLDatabases             //for "DATABASES"
41776>>>>>>>>>    Define CI_SQLSysIndexes            //for "SYS.INDEXES"
41776>>>>>>>>>    Define CI_SQLObjectID              //for "OBJECT_ID"
41776>>>>>>>>>    Define CI_SQLID                    //for "ID"
41776>>>>>>>>>    Define CI_SQLAND                   //for "AND"
41776>>>>>>>>>    Define CI_SQLUpdate                //for "UPDATE"
41776>>>>>>>>>    Define CI_SQLSet                   //for "SET"
41776>>>>>>>>>    Define CI_SQLWith                  //for "WITH"
41776>>>>>>>>>    Define CI_SQLNotNull               //for "NOT NULL"
41776>>>>>>>>>    Define CI_SQL_SAFE_UPDATES         //for "SQL_SAFE_UPDATES"  
41776>>>>>>>>>    Define CI_SQLDescription          //for "SELECT name, description from sys.fn_helpcollations()" (Enumerates all collates)
41776>>>>>>>>>End_Enum_List
41776>>>>>>>>>
41776>>>>>>>>>
41776>>>>>>>
41776>>>>>>>Class cDbUpdateFunctionLibrary_Mixin is a Mixin
41777>>>>>>>
41777>>>>>>>    Procedure CreateDbUpdateLibraryProperties
41779>>>>>>>        Handle hoSQLManagerMT
41779>>>>>>>
41779>>>>>>>        Property String private.psUseDatabase ""
41780>>>>>>>
41780>>>>>>>        // These are used by the Error routine to show the Table# & Field# if something goes wrong:
41780>>>>>>>        Property Handle  private.phCurrentTable 0
41781>>>>>>>        Property Integer private.piCurrentField 0
41782>>>>>>>
41782>>>>>>>        Property Handle phoCLIHandler      (Create(Self,RefClass(cCLIHandler)))
41783>>>>>>>        Property Handle phoSQLManager      (Create(Self,RefClass(cSQLHandleManager)))
41784>>>>>>>
41784>>>>>>>        Property Handle phoSQLManagerMT
41785>>>>>>>
41785>>>>>>>        Property Handle phoMSSQLHandler    (Create(Self,RefClass(cMSSQLHandler)))
41786>>>>>>>        Property Handle phoDB2SQLHandler   (Create(Self,RefClass(cDB2Handler)))
41787>>>>>>>        Property Handle phoODBCSQLHandler  (Create(Self,RefClass(cODBCHandler)))
41788>>>>>>>        Property Handle phoSQLConnectionHandler 0
41789>>>>>>>        Property tSQLKeyWords[] paSQLKeywordArray
41790>>>>>>>
41790>>>>>>>        Property Boolean pbHandleQueryErrors True
41791>>>>>>>
41791>>>>>>>        Property tSqlColumnNew[] paQueryColumns
41792>>>>>>>        Property String[] paSQLFetchResults
41793>>>>>>>
41793>>>>>>>        // Error handling
41793>>>>>>>        Property Integer Error_Report_Mode DUF_ERROR_REPORT
41794>>>>>>>        Property Boolean pbSqlError False
41795>>>>>>>        Property tSqlErrorArray paSqlErrorArray
41796>>>>>>>        Property Boolean pbProcessingError False
41797>>>>>>>
41797>>>>>>>        // Statistics on query
41797>>>>>>>        Property TimeSpan ptsTotalQueryTime
41798>>>>>>>        Property TimeSpan ptsQueryExec
41799>>>>>>>        Property TimeSpan ptsFetchResults
41800>>>>>>>        Property Integer piColumns 0
41801>>>>>>>        Property Integer piRows 0
41802>>>>>>>        Property Integer piRowType 0
41803>>>>>>>        Property String[] paQueryMessages
41804>>>>>>>        Property String psSQLStatementString
41805>>>>>>>
41805>>>>>>>        Property Integer[] paTableConvertExceptions
41806>>>>>>>
41806>>>>>>>        Property Integer[] paTableDateCorrectionExceptions
41807>>>>>>>
41807>>>>>>>        // Number of SQL statements (chunks) to be executed when executing a really big
41807>>>>>>>        // SQL file that has been compiled into the program. It is way faster to divide
41807>>>>>>>        // the statements in smaller chunks than to execute them all at the same time.
41807>>>>>>>        Property Integer piChunkMax 500
41808>>>>>>>
41808>>>>>>>        // Fill the paSQLKeywordArray array with values;
41808>>>>>>>        Send SetupSQLKeywordArray
41809>>>>>>>    End_Procedure
41810>>>>>>>
Including file: ParseKeyWord.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ParseKeyWord.pkg)
41810>>>>>>>>
41810>>>>>>>>Function ParseKeyWord String sConnect String sKeyWord Returns String
41812>>>>>>>>    Integer iStart iEnd
41812>>>>>>>>    String sRetval
41812>>>>>>>>
41812>>>>>>>>    Move (Trim(sConnect)) to sConnect
41813>>>>>>>>    Move (Pos(Uppercase(sKeyWord), Uppercase(sConnect)))  to iStart
41814>>>>>>>>    If (iStart = 0) Begin
41816>>>>>>>>        Function_Return ""
41817>>>>>>>>    End
41817>>>>>>>>>
41817>>>>>>>>    Move (Left(sConnect, (iStart -1 + Length(sKeyWord)))) to sRetval
41818>>>>>>>>    Move (Replace(sRetval, sConnect, "")) to sRetval
41819>>>>>>>>    If (sKeyWord = Uppercase(CS_SQLConnectionIDText)) Begin
41821>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
41822>>>>>>>>    End
41822>>>>>>>>>
41822>>>>>>>>    Else Begin
41823>>>>>>>>        Move (Pos(";", sRetval))          to iEnd
41824>>>>>>>>    End
41824>>>>>>>>>
41824>>>>>>>>    If (iEnd = 0 and (sRetval contains ",")) Begin
41826>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
41827>>>>>>>>        Decrement iEnd
41828>>>>>>>>    End
41828>>>>>>>>>
41828>>>>>>>>    If (iEnd <> 0) Begin
41830>>>>>>>>        Move (Left(sRetval, (iEnd -1)))   to sRetval
41831>>>>>>>>    End
41831>>>>>>>>>
41831>>>>>>>>    Move (Replace("=", sRetval, ""))      to sRetval
41832>>>>>>>>
41832>>>>>>>>    Function_Return (Trim(sRetval))
41833>>>>>>>>End_Function
41834>>>>>>>>
41834>>>>>>>>
41834>>>>>>>
41834>>>>>>>    // Custom array find function. It compares both the iSQLWord & iSQLDbType params.
41834>>>>>>>    Function CompareFindSQLKeyWords tSQLKeyWords SQLKeywords1 tSQLKeyWords SQLKeywords2 Returns Integer
41836>>>>>>>        If (SQLKeywords1.iSQLWord = SQLKeywords2.iSQLWord and SQLKeywords1.iSQLDbType = SQLKeywords2.iSQLDbType) Begin
41838>>>>>>>            Function_Return (EQ)
41839>>>>>>>        End
41839>>>>>>>>
41839>>>>>>>        Function_Return (GT)
41840>>>>>>>    End_Function
41841>>>>>>>
41841>>>>>>>    // Custom array sort function. It compares both the iSQLWord & iSQLDbType params.
41841>>>>>>>    Function CompareSortSQLKeyWords tSQLKeyWords SQLKeywords1 tSQLKeyWords SQLKeywords2 Returns Integer
41843>>>>>>>        If (SQLKeywords1.iSQLWord   < SQLKeywords2.iSQLWord and SQLKeywords1.iSQLDbType < SQLKeywords2.iSQLDbType) ;            Function_Return (LT)
41846>>>>>>>        If (SQLKeywords1.iSQLWord   > SQLKeywords2.iSQLWord and SQLKeywords1.iSQLDbType > SQLKeywords2.iSQLDbType) ;            Function_Return (GT)
41849>>>>>>>
41849>>>>>>>        Function_Return (EQ)
41850>>>>>>>    End_Function
41851>>>>>>>
41851>>>>>>>    Procedure Add_Element Integer iSQLKeywordConstant Integer iEN_dbType String sSQLKeyword
41853>>>>>>>        tSQLKeyWords[] SQLKeywordArray
41853>>>>>>>        tSQLKeyWords[] SQLKeywordArray
41854>>>>>>>        Integer iSize
41854>>>>>>>
41854>>>>>>>        Get paSQLKeywordArray to SQLKeywordArray
41855>>>>>>>        Move (SizeOfArray(SQLKeywordArray)) to iSize
41856>>>>>>>        Move iSQLKeywordConstant to SQLKeywordArray[iSize].iSQLWord
41857>>>>>>>        Move iEN_dbType          to SQLKeywordArray[iSize].iSQLDbType
41858>>>>>>>        Move sSQLKeyword         to SQLKeywordArray[iSize].sSQLPhrase
41859>>>>>>>
41859>>>>>>>        Set paSQLKeywordArray to SQLKeywordArray
41860>>>>>>>    End_Procedure
41861>>>>>>>
41861>>>>>>>    // Creates a struct array with all SQL keywords
41861>>>>>>>    // for all EN_xxx SQL back-ends. Various back-ends can
41861>>>>>>>    // have slightly different wording.
41861>>>>>>>    // If a new EN_dbTypexxx type is added; additions
41861>>>>>>>    // needs to be done for every keyword group below.
41861>>>>>>>    Procedure SetupSQLKeywordArray
41863>>>>>>>        tSQLKeyWords[] SQLKeywordArray SQLKeywordArraySorted
41863>>>>>>>        tSQLKeyWords[] SQLKeywordArray SQLKeywordArraySorted
41865>>>>>>>
41865>>>>>>>        // This should only be called once; but in case it is
41865>>>>>>>        // we delete the array first.
41865>>>>>>>        Set paSQLKeywordArray to SQLKeywordArray
41866>>>>>>>
41866>>>>>>>        // ToDo: *** Not all SQL Key-words has been checked for other backends than MS-SQL ***
41866>>>>>>>        //
41866>>>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypeMSSQL    "ALTER DATABASE"
41867>>>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypeMySQL    "ALTER DATABASE"
41868>>>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypeOracle   "ALTER DATABASE"
41869>>>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypeDB2      "ALTER DATABASE"
41870>>>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypePostgre  "ALTER DATABASE"
41871>>>>>>>
41871>>>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypeMSSQL    "SINGLE_USER"
41872>>>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypeMySQL    "SINGLE_USER"
41873>>>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypeOracle   "SINGLE_USER"
41874>>>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypeDB2      "SINGLE_USER"
41875>>>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypePostgre  "SINGLE_USER"
41876>>>>>>>
41876>>>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypeMSSQL    "MULTI_USER"
41877>>>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypeMySQL    "MULTI_USER"
41878>>>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypeOracle   "MULTI_USER"
41879>>>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypeDB2      "MULTI_USER"
41880>>>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypePostgre  "MULTI_USER"
41881>>>>>>>
41881>>>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypeMSSQL    "ROLLBACK"
41882>>>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypeMySQL    "ROLLBACK"
41883>>>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypeOracle   "ROLLBACK"
41884>>>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypeDB2      "ROLLBACK"
41885>>>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypePostgre  "ROLLBACK"
41886>>>>>>>
41886>>>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypeMSSQL    "IMMEDIATE"
41887>>>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypeMySQL    "IMMEDIATE"
41888>>>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypeOracle   "IMMEDIATE"
41889>>>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypeDB2      "IMMEDIATE"
41890>>>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypePostgre  "IMMEDIATE"
41891>>>>>>>
41891>>>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypeMSSQL    "ALTER TABLE"
41892>>>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypeMySQL    "ALTER TABLE"
41893>>>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypeOracle   "ALTER TABLE"
41894>>>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypeDB2      "ALTER TABLE"
41895>>>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypePostgre  "ALTER TABLE"
41896>>>>>>>
41896>>>>>>>        Send Add_Element CI_SQLAdd EN_dbTypeMSSQL           "ADD"
41897>>>>>>>        Send Add_Element CI_SQLAdd EN_dbTypeMySQL           "ADD"
41898>>>>>>>        Send Add_Element CI_SQLAdd EN_dbTypeOracle          "ADD"
41899>>>>>>>        Send Add_Element CI_SQLAdd EN_dbTypeDB2             "ADD"
41900>>>>>>>        Send Add_Element CI_SQLAdd EN_dbTypePostgre         "ADD"
41901>>>>>>>
41901>>>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypeMSSQL        "UPDATE"
41902>>>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypeMySQL        "UPDATE"
41903>>>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypeOracle       "UPDATE"
41904>>>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypeDB2          "UPDATE"
41905>>>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypePostgre      "UPDATE"
41906>>>>>>>
41906>>>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypeMSSQL       "NOT NULL"
41907>>>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypeMySQL       "NOT NULL"
41908>>>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypeOracle      "" // Seems like Oracle can't handle setting a new column to 'NOT NULL' if the table exists with data(!)
41909>>>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypeDB2         "DEFAULT NOT NULL"
41910>>>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypePostgre     "NOT NULL"
41911>>>>>>>
41911>>>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_DbTypeMSSQL   ""
41912>>>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_dbTypeMySQL   "SQL_SAFE_UPDATES"
41913>>>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_dbTypeOracle  ""
41914>>>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_dbTypeDB2     ""
41915>>>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_dbTypePostgre ""
41916>>>>>>>
41916>>>>>>>        Send Add_Element CI_SQLSet EN_dbTypeMSSQL           "SET"
41917>>>>>>>        Send Add_Element CI_SQLSet EN_dbTypeMySQL           "SET"
41918>>>>>>>        Send Add_Element CI_SQLSet EN_dbTypeOracle          "SET"
41919>>>>>>>        Send Add_Element CI_SQLSet EN_dbTypeDB2             "SET"
41920>>>>>>>        Send Add_Element CI_SQLSet EN_dbTypePostgre         "SET"
41921>>>>>>>
41921>>>>>>>        Send Add_Element CI_SQLWith EN_dbTypeMSSQL          "WITH"
41922>>>>>>>        Send Add_Element CI_SQLWith EN_dbTypeMySQL          "WITH"
41923>>>>>>>        Send Add_Element CI_SQLWith EN_dbTypeOracle         "WITH"
41924>>>>>>>        Send Add_Element CI_SQLWith EN_dbTypeDB2            "WITH"
41925>>>>>>>        Send Add_Element CI_SQLWith EN_dbTypePostgre        "WITH"
41926>>>>>>>
41926>>>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypeMSSQL    "CREATE DATABASE"
41927>>>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypeMySQL    "CREATE DATABASE"
41928>>>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypeOracle   "CREATE DATABASE"
41929>>>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypeDB2      "CREATE DATABASE"
41930>>>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypePostgre  "CREATE DATABASE"
41931>>>>>>>
41931>>>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypeMSSQL    "COLLATE"
41932>>>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypeMySQL    "COLLATE"
41933>>>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypeOracle   "COLLATE"
41934>>>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypeDB2      "COLLATE"
41935>>>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypePostgre  "COLLATE"
41936>>>>>>>
41936>>>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypeMSSQL    "CREATE VIEW"
41937>>>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypeMySQL    "CREATE VIEW"
41938>>>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypeOracle   "CREATE VIEW"
41939>>>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypeDB2      "CREATE VIEW"
41940>>>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypePostgre  "CREATE VIEW"
41941>>>>>>>
41941>>>>>>>        Send Add_Element CI_SQLDropView EN_dbTypeMSSQL      "DROP VIEW"
41942>>>>>>>        Send Add_Element CI_SQLDropView EN_dbTypeMySQL      "DROP VIEW"
41943>>>>>>>        Send Add_Element CI_SQLDropView EN_dbTypeOracle     "DROP VIEW"
41944>>>>>>>        Send Add_Element CI_SQLDropView EN_dbTypeDB2        "DROP VIEW"
41945>>>>>>>        Send Add_Element CI_SQLDropView EN_dbTypePostgre    "DROP VIEW"
41946>>>>>>>
41946>>>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypeMSSQL   "CREATE TABLE"
41947>>>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypeMySQL   "CREATE TABLE"
41948>>>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypeOracle  "CREATE TABLE"
41949>>>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypeDB2     "CREATE TABLE"
41950>>>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypePostgre "CREATE TABLE"
41951>>>>>>>
41951>>>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypeMSSQL     "DROP TABLE"
41952>>>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypeMySQL     "DROP TABLE"
41953>>>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypeOracle    "DROP TABLE"
41954>>>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypeDB2       "DROP TABLE"
41955>>>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypePostgre   "DROP TABLE"
41956>>>>>>>
41956>>>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypeMSSQL   "EXEC sp_rename"
41957>>>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypeMySQL   "RENAME TABLE"
41958>>>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypeOracle  "RENAME TABLE"
41959>>>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypeDB2     "RENAME TABLE"
41960>>>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypePostgre "RENAME TO"
41961>>>>>>>
41961>>>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypeMSSQL    "DROP COLUMN"
41962>>>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypeMySQL    "DROP COLUMN"
41963>>>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypeOracle   "DROP COLUMN"
41964>>>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypeDB2      "DROP COLUMN"
41965>>>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypePostgre  "DROP COLUMN"
41966>>>>>>>
41966>>>>>>>        Send Add_Element CI_SQLColumn EN_dbTypeMSSQL        "COLUMN"
41967>>>>>>>        Send Add_Element CI_SQLColumn EN_dbTypeMySQL        "COLUMN"
41968>>>>>>>        Send Add_Element CI_SQLColumn EN_dbTypeOracle       "COLUMN"
41969>>>>>>>        Send Add_Element CI_SQLColumn EN_dbTypeDB2          "COLUMN"
41970>>>>>>>        Send Add_Element CI_SQLColumn EN_dbTypePostgre      "COLUMN"
41971>>>>>>>
41971>>>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypeMSSQL   "ALTER COLUMN"
41972>>>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypeMySQL   "MODIFY"
41973>>>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypeOracle  "MODIFY"
41974>>>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypeDB2     "ALTER COLUMN"
41975>>>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypePostgre "ALTER COLUMN"
41976>>>>>>>
41976>>>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypeMSSQL   "EXEC sp_RENAME"
41977>>>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypeMySQL   "CHANGE"
41978>>>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypeOracle  "RENAME COLUMN"
41979>>>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypeDB2     "RENAME COLUMN"
41980>>>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypePostgre "RENAME COLUMN"
41981>>>>>>>
41981>>>>>>>        Send Add_Element CI_SQLSelect EN_dbTypeMSSQL        "SELECT"
41982>>>>>>>        Send Add_Element CI_SQLSelect EN_dbTypeMySQL        "SELECT"
41983>>>>>>>        Send Add_Element CI_SQLSelect EN_dbTypeOracle       "SELECT"
41984>>>>>>>        Send Add_Element CI_SQLSelect EN_dbTypeDB2          "SELECT"
41985>>>>>>>        Send Add_Element CI_SQLSelect EN_dbTypePostgre      "SELECT"
41986>>>>>>>
41986>>>>>>>        Send Add_Element CI_SQLWhere EN_dbTypeMSSQL         "WHERE"
41987>>>>>>>        Send Add_Element CI_SQLWhere EN_dbTypeMySQL         "WHERE"
41988>>>>>>>        Send Add_Element CI_SQLWhere EN_dbTypeOracle        "WHERE"
41989>>>>>>>        Send Add_Element CI_SQLWhere EN_dbTypeDB2           "WHERE"
41990>>>>>>>        Send Add_Element CI_SQLWhere EN_dbTypePostgre       "WHERE"
41991>>>>>>>
41991>>>>>>>        Send Add_Element CI_SQLFrom EN_dbTypeMSSQL          "FROM"
41992>>>>>>>        Send Add_Element CI_SQLFrom EN_dbTypeMySQL          "FROM"
41993>>>>>>>        Send Add_Element CI_SQLFrom EN_dbTypeOracle         "FROM"
41994>>>>>>>        Send Add_Element CI_SQLFrom EN_dbTypeDB2            "FROM"
41995>>>>>>>        Send Add_Element CI_SQLFrom EN_dbTypePostgre        "FROM"
41996>>>>>>>
41996>>>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypeMSSQL    "INFORMATION_SCHEMA.COLUMNS"
41997>>>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypeMySQL    "INFORMATION_SCHEMA.COLUMNS"
41998>>>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypeOracle   "INFORMATION_SCHEMA.COLUMNS"
41999>>>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypeDB2      "INFORMATION_SCHEMA.COLUMNS"
42000>>>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypePostgre  "INFORMATION_SCHEMA.COLUMNS"
42001>>>>>>>
42001>>>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypeMSSQL    "TABLE_NAME"
42002>>>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypeMySQL    "TABLE_NAME"
42003>>>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypeOracle   "TABLE_NAME"
42004>>>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypeDB2      "TABLE_NAME"
42005>>>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypePostgre  "TABLE_NAME"
42006>>>>>>>
42006>>>>>>>        Send Add_Element CI_SQLTable EN_dbTypeMSSQL         "TABLE"
42007>>>>>>>        Send Add_Element CI_SQLTable EN_dbTypeMySQL         "TABLE"
42008>>>>>>>        Send Add_Element CI_SQLTable EN_dbTypeOracle        "TABLE"
42009>>>>>>>        Send Add_Element CI_SQLTable EN_dbTypeDB2           "TABLE"
42010>>>>>>>        Send Add_Element CI_SQLTable EN_dbTypePostgre       "TABLE"
42011>>>>>>>
42011>>>>>>>        Send Add_Element CI_SQLSys EN_dbTypeMSSQL           "SYS"
42012>>>>>>>        Send Add_Element CI_SQLSys EN_dbTypeMySQL           "SYS"
42013>>>>>>>        Send Add_Element CI_SQLSys EN_dbTypeOracle          "SYS"
42014>>>>>>>        Send Add_Element CI_SQLSys EN_dbTypeDB2             "SYS"
42015>>>>>>>        Send Add_Element CI_SQLSys EN_dbTypePostgre         "SYS"
42016>>>>>>>
42016>>>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypeMSSQL       "SP_HELP"
42017>>>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypeMySQL       "SP_HELP"
42018>>>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypeOracle      "SP_HELP"
42019>>>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypeDB2         "SP_HELP"
42020>>>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypePostgre     "SP_HELP"
42021>>>>>>>
42021>>>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypeMSSQL      "SET NOCOUNT ON"
42022>>>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypeMySQL      "SET NOCOUNT ON"
42023>>>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypeOracle     "SET NOCOUNT ON"
42024>>>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypeDB2        "SET NOCOUNT ON"
42025>>>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypePostgre    "SET NOCOUNT ON"
42026>>>>>>>
42026>>>>>>>        Send Add_Element CI_SQLTo EN_dbTypeMSSQL            "TO"
42027>>>>>>>        Send Add_Element CI_SQLTo EN_dbTypeMySQL            "TO"
42028>>>>>>>        Send Add_Element CI_SQLTo EN_dbTypeOracle           "TO"
42029>>>>>>>        Send Add_Element CI_SQLTo EN_dbTypeDB2              "TO"
42030>>>>>>>        Send Add_Element CI_SQLTo EN_dbTypePostgre          "TO"
42031>>>>>>>
42031>>>>>>>        Send Add_Element CI_SQLGO EN_dbTypeMSSQL            "GO"
42032>>>>>>>        Send Add_Element CI_SQLGO EN_dbTypeMySQL            "GO"
42033>>>>>>>        Send Add_Element CI_SQLGO EN_dbTypeOracle           "GO"
42034>>>>>>>        Send Add_Element CI_SQLGO EN_dbTypeDB2              "GO"
42035>>>>>>>        Send Add_Element CI_SQLGO EN_dbTypePostgre          "GO"
42036>>>>>>>
42036>>>>>>>        Send Add_Element CI_SQLUse EN_dbTypeMSSQL           "USE"
42037>>>>>>>        Send Add_Element CI_SQLUse EN_dbTypeMySQL           "USE"
42038>>>>>>>        Send Add_Element CI_SQLUse EN_dbTypeOracle          "USE"
42039>>>>>>>        Send Add_Element CI_SQLUse EN_dbTypeDB2             "USE"
42040>>>>>>>        Send Add_Element CI_SQLUse EN_dbTypePostgre         "USE"
42041>>>>>>>
42041>>>>>>>        Send Add_Element CI_SQLDBO EN_dbTypeMSSQL           "dbo"
42042>>>>>>>        Send Add_Element CI_SQLDBO EN_dbTypeMySQL           "dbo"
42043>>>>>>>        Send Add_Element CI_SQLDBO EN_dbTypeOracle          "dbo"
42044>>>>>>>        Send Add_Element CI_SQLDBO EN_dbTypeDB2             "dbo"
42045>>>>>>>        Send Add_Element CI_SQLDBO EN_dbTypePostgre         "dbo"
42046>>>>>>>
42046>>>>>>>        Send Add_Element CI_SQLMaster EN_dbTypeMSSQL        "MASTER"
42047>>>>>>>        Send Add_Element CI_SQLMaster EN_dbTypeMySQL        "MASTER"
42048>>>>>>>        Send Add_Element CI_SQLMaster EN_dbTypeOracle       "MASTER"
42049>>>>>>>        Send Add_Element CI_SQLMaster EN_dbTypeDB2          "MASTER"
42050>>>>>>>        Send Add_Element CI_SQLMaster EN_dbTypePostgre      "MASTER"
42051>>>>>>>
42051>>>>>>>        Send Add_Element CI_SQLName EN_dbTypeMSSQL          "NAME"
42052>>>>>>>        Send Add_Element CI_SQLName EN_dbTypeMySQL          "NAME"
42053>>>>>>>        Send Add_Element CI_SQLName EN_dbTypeOracle         "NAME"
42054>>>>>>>        Send Add_Element CI_SQLName EN_dbTypeDB2            "NAME"
42055>>>>>>>        Send Add_Element CI_SQLName EN_dbTypePostgre        "NAME"
42056>>>>>>>
42056>>>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypeMSSQL     "DATABASES"
42057>>>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypeMySQL     "DATABASES"
42058>>>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypeOracle    "DATABASES"
42059>>>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypeDB2       "DATABASES"
42060>>>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypePostgre   "DATABASES"
42061>>>>>>>
42061>>>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypeMSSQL    "SYS.INDEXES"
42062>>>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypeMySQL    "SYS.INDEXES"
42063>>>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypeOracle   "SYS.INDEXES"
42064>>>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypeDB2      "SYS.INDEXES"
42065>>>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypePostgre  "SYS.INDEXES"
42066>>>>>>>
42066>>>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypeMSSQL      "OBJECT_ID"
42067>>>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypeMySQL      "OBJECT_ID"
42068>>>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypeOracle     "OBJECT_ID"
42069>>>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypeDB2        "OBJECT_ID"
42070>>>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypePostgre    "OBJECT_ID"
42071>>>>>>>
42071>>>>>>>        Send Add_Element CI_SQLID EN_dbTypeMSSQL            "ID"
42072>>>>>>>        Send Add_Element CI_SQLID EN_dbTypeMySQL            "ID"
42073>>>>>>>        Send Add_Element CI_SQLID EN_dbTypeOracle           "ID"
42074>>>>>>>        Send Add_Element CI_SQLID EN_dbTypeDB2              "ID"
42075>>>>>>>        Send Add_Element CI_SQLID EN_dbTypePostgre          "ID"
42076>>>>>>>
42076>>>>>>>        Send Add_Element CI_SQLAND EN_dbTypeMSSQL           "AND"
42077>>>>>>>        Send Add_Element CI_SQLAND EN_dbTypeMySQL           "AND"
42078>>>>>>>        Send Add_Element CI_SQLAND EN_dbTypeOracle          "AND"
42079>>>>>>>        Send Add_Element CI_SQLAND EN_dbTypeDB2             "AND"
42080>>>>>>>        Send Add_Element CI_SQLAND EN_dbTypePostgre         "AND"
42081>>>>>>>
42081>>>>>>>        Send Add_Element CI_SQLDescription EN_dbTypeMSSQL   "DESCRIPTION"
42082>>>>>>>        Send Add_Element CI_SQLDescription EN_dbTypeMySQL   "DESCRIPTION"
42083>>>>>>>        Send Add_Element CI_SQLDescription EN_dbTypeOracle  "DESCRIPTION"
42084>>>>>>>        Send Add_Element CI_SQLDescription EN_dbTypeDB2     "DESCRIPTION"
42085>>>>>>>        Send Add_Element CI_SQLDescription EN_dbTypePostgre "DESCRIPTION"
42086>>>>>>>
42086>>>>>>>        // In case we didn't put the above in order (and we don't need to); we sort the struct array.
42086>>>>>>>        Get paSQLKeywordArray to SQLKeywordArray
42087>>>>>>>        Move (SortArray(SQLKeywordArray, Self, (RefFunc(CompareSortSQLKeyWords)))) to SQLKeywordArraySorted
42088>>>>>>>        Set paSQLKeywordArray to SQLKeywordArraySorted
42089>>>>>>>
42089>>>>>>>    End_Procedure
42090>>>>>>>
42090>>>>>>>End_Class
42091>>>>>Use cSQLConnectionHandler.pkg
Including file: cSQLConnectionHandler.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cSQLConnectionHandler.pkg)
42091>>>>>>>//****************************************************************************
42091>>>>>>>// $Module type: Class
42091>>>>>>>// $Module name: cSQLConnectionHandler.pkg
42091>>>>>>>// $Author     : Nils Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
42091>>>>>>>// Web-site    : http://www.rdctools.com
42091>>>>>>>// Created     : 2015-08-11 @ 16:02 (Military date format: YY-MM-DD)
42091>>>>>>>//
42091>>>>>>>// Description : A handler class for using CLI connection ID's to login to a database server.
42091>>>>>>>//
42091>>>>>>>// $Rev History:
42091>>>>>>>//    2015-08-11  Module header created
42091>>>>>>>//    2016-09-26  Changed name of the objecthandle from ghoCreateConnectionID to ghoSQLConnectionHandler.
42091>>>>>>>//                Added a new structure for passing connection data back & forth.
42091>>>>>>>//                Added better error handling.
42091>>>>>>>//                Added a decompose message for the connection string.
42091>>>>>>>//    2017-01-09  Added support for Mertech drivers
42091>>>>>>>//                Big overhaul to comply better with "Managed Connections" (DF 19)
42091>>>>>>>//                These changes make the class compatible with DFConnId.ini (can read/write DAW connection ini-files)
42091>>>>>>>//    2017-02-12  Reworked the whole connection property interface.
42091>>>>>>>//                Now there is one struct property that is the at cencter of a connection.
42091>>>>>>>//    2023-11-06 *** REMOVED ALL SUPPORT FOR MERTECH DRIVERS ***
42091>>>>>>>//****************************************************************************
42091>>>>>>>Use cli.pkg
42091>>>>>>>Use MSSqldrv.pkg
42091>>>>>>>Use db2_drv.pkg
42091>>>>>>>Use odbc_drv.pkg
42091>>>>>>>Use cSQLConnectionIniFile.pkg
Including file: cSQLConnectionIniFile.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cSQLConnectionIniFile.pkg)
42091>>>>>>>>>//****************************************************************************
42091>>>>>>>>>// $Module type: Class
42091>>>>>>>>>// $Module name: cSQLConnectionIniFile.pkg
42091>>>>>>>>>//
42091>>>>>>>>>// $Author     : Nils Svedmyr, RDC Tools International.
42091>>>>>>>>>// Copyright (c) 2012 RDC Tools International
42091>>>>>>>>>// E-mail      : support@rdctools.com
42091>>>>>>>>>// Web-site    : http://www.rdctools.com
42091>>>>>>>>>//
42091>>>>>>>>>// Created     : 2012-09-20 @ 18:04 (Military date format - Year-Month-Day)
42091>>>>>>>>>//
42091>>>>>>>>>// Note        : The file must be USEd after declaration of the ghoApplication object, as it uses
42091>>>>>>>>>//               properties of that object.
42091>>>>>>>>>//
42091>>>>>>>>>// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
42091>>>>>>>>>// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
42091>>>>>>>>>// This is free software; you can redistribute it and/or modify it under the terms of the
42091>>>>>>>>>// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
42091>>>>>>>>>// in the help folder for more details.
42091>>>>>>>>>//
42091>>>>>>>>>Use cSQLConnectionIniFile.inc
42091>>>>>>>>>Use cDbUpdateDatabaseDriver.pkg
Including file: cDbUpdateDatabaseDriver.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cDbUpdateDatabaseDriver.pkg)
42091>>>>>>>>>>>Use cSQLConnectionIniFile.inc
42091>>>>>>>>>>>
42091>>>>>>>>>>>Class cDbUpdateGenericDatabaseDriver is a cObject
42092>>>>>>>>>>>    Procedure Construct_Object
42094>>>>>>>>>>>        Forward Send Construct_Object
42096>>>>>>>>>>>        Property String psDriverID DATAFLEX_ID
42097>>>>>>>>>>>    End_Procedure
42098>>>>>>>>>>>
42098>>>>>>>>>>>    Function ServerKeyword String sServer Returns String
42100>>>>>>>>>>>        String sRetval
42100>>>>>>>>>>>        If (Uppercase(sServer) contains ("." + CS_SQLIniDSNKeyword)) Begin
42102>>>>>>>>>>>            Move CS_SQLIniFileDSNKeyword to sRetval    
42103>>>>>>>>>>>        End                                        
42103>>>>>>>>>>>>
42103>>>>>>>>>>>        Else Begin
42104>>>>>>>>>>>            Move CS_SQLIniDSNKeyword to sRetval
42105>>>>>>>>>>>        End
42105>>>>>>>>>>>>
42105>>>>>>>>>>>            
42105>>>>>>>>>>>        Function_Return sRetval
42106>>>>>>>>>>>    End_Function
42107>>>>>>>>>>>
42107>>>>>>>>>>>    Function ConstructConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
42109>>>>>>>>>>>        String sConnect sServerKeyWord sDriverID
42109>>>>>>>>>>>        Integer iClientVersion
42109>>>>>>>>>>>        
42109>>>>>>>>>>>        Get psDriverID to sDriverID
42110>>>>>>>>>>>        Get ServerKeyword sServer to sServerKeyWord
42111>>>>>>>>>>>        Move (sConnect + sServerKeyWord + "=" + sServer) to sConnect
42112>>>>>>>>>>>        If (sServerKeyWord = CS_SQLIniDSNKeyword or sServerKeyWord = CS_SQLIniFileDSNKeyword) Begin
42114>>>>>>>>>>>            Move "" to sDatabase
42115>>>>>>>>>>>        End
42115>>>>>>>>>>>>
42115>>>>>>>>>>>        
42115>>>>>>>>>>>        If (sDatabase <> "") Begin
42117>>>>>>>>>>>            Move (sConnect + ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
42118>>>>>>>>>>>        End
42118>>>>>>>>>>>>
42118>>>>>>>>>>>        If (bTrusted = True) Begin
42120>>>>>>>>>>>            Move (sConnect + ";" + CS_SQLIniTrustedKeyword + "=Yes") to sConnect
42121>>>>>>>>>>>        End
42121>>>>>>>>>>>>
42121>>>>>>>>>>>        Else Begin
42122>>>>>>>>>>>            Move (sConnect + ";" + CS_SQLIniUIDKeyword + "=" + sUserID + ";" + CS_SQLIniPWDKeyword + "=" + sPassword) to sConnect
42123>>>>>>>>>>>        End
42123>>>>>>>>>>>>
42123>>>>>>>>>>>        
42123>>>>>>>>>>>        If (sDriverID = MSSQLDRV_ID) Begin
42125>>>>>>>>>>>            Get SQLClientVersionInteger MSSQLDRV_ID to iClientVersion
42126>>>>>>>>>>>            If (iClientVersion >= 18) Begin
42128>>>>>>>>>>>                Append sConnect ";Encrypt=Optional;TrustServerCertificate=Yes"
42129>>>>>>>>>>>                Move (Replaces(" ", sConnect, "")) to sConnect
42130>>>>>>>>>>>            End
42130>>>>>>>>>>>>
42130>>>>>>>>>>>        End
42130>>>>>>>>>>>>
42130>>>>>>>>>>>        
42130>>>>>>>>>>>        Function_Return sConnect
42131>>>>>>>>>>>    End_Function
42132>>>>>>>>>>>
42132>>>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
42134>>>>>>>>>>>        Boolean bLoginSuccessful
42134>>>>>>>>>>>        String sDriverID
42134>>>>>>>>>>>
42134>>>>>>>>>>>        Get psDriverID to sDriverID
42135>>>>>>>>>>>        If (sDriverID = DATAFLEX_ID or sDriverID = "") Begin
42137>>>>>>>>>>>            Function_Return True
42138>>>>>>>>>>>        End
42138>>>>>>>>>>>>
42138>>>>>>>>>>>        Move 0 to LastErr  // Do NOT use the Err flag, it will be set true by the login command although it is successful.
42139>>>>>>>>>>>        If (bTrusted = False and sDatabase <> "") Begin
42141>>>>>>>>>>>            Move (SFormat("SERVER=%1;DATABASE=%2", sServer, sDatabase)) to sServer
42142>>>>>>>>>>>            Login sServer sUserId sPassword sDriverID  
42144>>>>>>>>>>>        End
42144>>>>>>>>>>>>
42144>>>>>>>>>>>        Else Begin
42145>>>>>>>>>>>            Login sConnectionString "" "" sDriverID
42147>>>>>>>>>>>        End
42147>>>>>>>>>>>>
42147>>>>>>>>>>>        Move (LastErr = 0) to bLoginSuccessful
42148>>>>>>>>>>>        Function_Return bLoginSuccessful
42149>>>>>>>>>>>    End_Function
42150>>>>>>>>>>>
42150>>>>>>>>>>>    Function SQLClientVersionInteger String sDriverID Returns Integer
42152>>>>>>>>>>>        Integer iNumberOfDrivers iCount iDriver iClientVersion
42152>>>>>>>>>>>        String sDriver
42152>>>>>>>>>>>        
42152>>>>>>>>>>>        Move 0 to iDriver
42153>>>>>>>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
42156>>>>>>>>>>>        If (iNumberOfDrivers = 1) Begin
42158>>>>>>>>>>>            Load_Driver sDriverID
42159>>>>>>>>>>>            Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
42162>>>>>>>>>>>        End
42162>>>>>>>>>>>>
42162>>>>>>>>>>>        For iCount from 1 to iNumberOfDrivers
42168>>>>>>>>>>>>
42168>>>>>>>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sDriver
42171>>>>>>>>>>>            If (Uppercase(sDriver) = Uppercase(sDriverID)) Begin
42173>>>>>>>>>>>                Move iCount to iDriver
42174>>>>>>>>>>>                Move iNumberOfDrivers to iCount // We're done.
42175>>>>>>>>>>>            End
42175>>>>>>>>>>>>
42175>>>>>>>>>>>        Loop
42176>>>>>>>>>>>>
42176>>>>>>>>>>>    
42176>>>>>>>>>>>        // This info is (at current) only available for the MS SQL driver:
42176>>>>>>>>>>>        If (iDriver <> 0 and sDriverID = MSSQLDRV_ID) Begin
42178>>>>>>>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
42181>>>>>>>>>>>        End
42181>>>>>>>>>>>>
42181>>>>>>>>>>>        Function_Return iClientVersion
42182>>>>>>>>>>>    End_Function
42183>>>>>>>>>>>    
42183>>>>>>>>>>>End_Class
42184>>>>>>>>>>>
42184>>>>>>>>>>>Class cDbUpdateMSSQLDriver is a cDbUpdateGenericDatabaseDriver
42185>>>>>>>>>>>    Function ServerKeyword String sServer Returns String
42187>>>>>>>>>>>        Function_Return CS_SQLIniServerKeyword
42188>>>>>>>>>>>    End_Function
42189>>>>>>>>>>>
42189>>>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
42191>>>>>>>>>>>        Integer iClientVersion
42191>>>>>>>>>>>        String sConnect
42191>>>>>>>>>>>        Boolean bLoginSuccessful
42191>>>>>>>>>>>        
42191>>>>>>>>>>>        Move (sConnect * "SERVER=" + sServer) to sConnect
42192>>>>>>>>>>>        If (sDatabase <> "") Begin
42194>>>>>>>>>>>            Move (sConnect * ";DATABASE=" + sDatabase) to sConnect
42195>>>>>>>>>>>        End
42195>>>>>>>>>>>>
42195>>>>>>>>>>>        If (bTrusted = True) Begin
42197>>>>>>>>>>>            Move (sConnect * ";TRUSTED_CONNECTION=Yes") to sConnect
42198>>>>>>>>>>>        End
42198>>>>>>>>>>>>
42198>>>>>>>>>>>        Else Begin
42199>>>>>>>>>>>            Move (sConnect * ";UID=" + sUserID * ";PWD=" + sPassword) to sConnect
42200>>>>>>>>>>>        End
42200>>>>>>>>>>>>
42200>>>>>>>>>>>
42200>>>>>>>>>>>        Get SQLClientVersionInteger MSSQLDRV_ID to iClientVersion
42201>>>>>>>>>>>        If (iClientVersion >= 18) Begin
42203>>>>>>>>>>>            Append sConnect ";Encrypt=Optional;TrustServerCertificate=Yes"
42204>>>>>>>>>>>            Move (Replaces(" ", sConnect, "")) to sConnect
42205>>>>>>>>>>>        End
42205>>>>>>>>>>>>
42205>>>>>>>>>>>        
42205>>>>>>>>>>>        Login sConnect "" "" MSSQLDRV_ID
42207>>>>>>>>>>>
42207>>>>>>>>>>>        Move (not(Err)) to bLoginSuccessful
42208>>>>>>>>>>>        Function_Return bLoginSuccessful
42209>>>>>>>>>>>    End_Function
42210>>>>>>>>>>>
42210>>>>>>>>>>>    Function SQLClientVersionInteger String sDriverID Returns Integer
42212>>>>>>>>>>>        Integer iNumberOfDrivers iCount iDriver iClientVersion
42212>>>>>>>>>>>        String sDriver
42212>>>>>>>>>>>        
42212>>>>>>>>>>>        Move 0 to iDriver
42213>>>>>>>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
42216>>>>>>>>>>>        If (iNumberOfDrivers = 1) Begin
42218>>>>>>>>>>>            Load_Driver sDriverID
42219>>>>>>>>>>>            Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
42222>>>>>>>>>>>        End
42222>>>>>>>>>>>>
42222>>>>>>>>>>>        For iCount from 1 to iNumberOfDrivers
42228>>>>>>>>>>>>
42228>>>>>>>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sDriver
42231>>>>>>>>>>>            If (Uppercase(sDriver) = Uppercase(sDriverID)) Begin
42233>>>>>>>>>>>                Move iCount to iDriver
42234>>>>>>>>>>>                Move iNumberOfDrivers to iCount // We're done.
42235>>>>>>>>>>>            End
42235>>>>>>>>>>>>
42235>>>>>>>>>>>        Loop
42236>>>>>>>>>>>>
42236>>>>>>>>>>>    
42236>>>>>>>>>>>        // This info is (at current) only available for the MS SQL driver:
42236>>>>>>>>>>>        If (iDriver <> 0 and sDriverID = MSSQLDRV_ID) Begin
42238>>>>>>>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
42241>>>>>>>>>>>        End
42241>>>>>>>>>>>>
42241>>>>>>>>>>>        Function_Return iClientVersion
42242>>>>>>>>>>>    End_Function
42243>>>>>>>>>>>    
42243>>>>>>>>>>>End_Class
42244>>>>>>>>>>>
42244>>>>>>>>>>>Class cDbUpdateODBCDriver is a cDbUpdateGenericDatabaseDriver
42245>>>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
42247>>>>>>>>>>>        Boolean bLoginSuccessful
42247>>>>>>>>>>>        String sDriverID
42247>>>>>>>>>>>
42247>>>>>>>>>>>        Get psDriverID to sDriverID
42248>>>>>>>>>>>        Move (Trim(sDriverID)) to sDriverID
42249>>>>>>>>>>>        If (sDriverID = DATAFLEX_ID or sDriverID = "") Begin
42251>>>>>>>>>>>            Function_Return True
42252>>>>>>>>>>>        End
42252>>>>>>>>>>>>
42252>>>>>>>>>>>        Move 0 to LastErr  // Do NOT use the Err flag, it will be set true by the login command although it is successful.
42253>>>>>>>>>>>        If (bTrusted = False) Begin
42255>>>>>>>>>>>            If (Uppercase(sServer) contains ("." + String(CS_SQLIniDSNKeyword))) Begin
42257>>>>>>>>>>>                Move (CS_SQLIniFileDSNKeyword + "=" + sServer) to sServer
42258>>>>>>>>>>>            End
42258>>>>>>>>>>>>
42258>>>>>>>>>>>            Else If (not(Uppercase(sServer) contains CS_SQLIniDSNKeyword)) Begin
42261>>>>>>>>>>>                Move (CS_SQLIniDSNKeyword + "=" + sServer) to sServer
42262>>>>>>>>>>>            End
42262>>>>>>>>>>>>
42262>>>>>>>>>>>            Login sServer sUserId sPassword sDriverID  
42264>>>>>>>>>>>        End
42264>>>>>>>>>>>>
42264>>>>>>>>>>>        Else Begin
42265>>>>>>>>>>>            Login sConnectionString "" "" sDriverID
42267>>>>>>>>>>>        End
42267>>>>>>>>>>>>
42267>>>>>>>>>>>        Move (LastErr = 0) to bLoginSuccessful
42268>>>>>>>>>>>
42268>>>>>>>>>>>        Function_Return bLoginSuccessful
42269>>>>>>>>>>>    End_Function
42270>>>>>>>>>>>End_Class
42271>>>>>>>>>>>
42271>>>>>>>>>>>Class cDbUpdateDB2Driver is a cDbUpdateGenericDatabaseDriver
42272>>>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
42274>>>>>>>>>>>        Boolean bLoginSuccessful
42274>>>>>>>>>>>        String sDriverID
42274>>>>>>>>>>>
42274>>>>>>>>>>>        Move False to Err
42275>>>>>>>>>>>        Get psDriverID to sDriverID
42276>>>>>>>>>>>        If (not(Uppercase(sServer) contains CS_SQLIniDSNKeyword)) Begin
42278>>>>>>>>>>>            Move (CS_SQLIniDSNKeyword + "=" + sServer) to sServer
42279>>>>>>>>>>>        End
42279>>>>>>>>>>>>
42279>>>>>>>>>>>        Login sServer sUserId sPassword sDriverID
42281>>>>>>>>>>>
42281>>>>>>>>>>>        Move (not(Err)) to bLoginSuccessful
42282>>>>>>>>>>>        Function_Return bLoginSuccessful
42283>>>>>>>>>>>    End_Function
42284>>>>>>>>>>>End_Class
42285>>>>>>>>>>>
42285>>>>>>>>>>>Class cDbUpdatePSQLDriver is a cDbUpdateGenericDatabaseDriver
42286>>>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
42288>>>>>>>>>>>        Boolean bLoginSuccessful
42288>>>>>>>>>>>        String sDriverID
42288>>>>>>>>>>>
42288>>>>>>>>>>>        Move False to Err
42289>>>>>>>>>>>        Get psDriverID to sDriverID
42290>>>>>>>>>>>//        If (not(Uppercase(sServer) contains CS_SQLIniDSNKeyword)) Begin
42290>>>>>>>>>>>//            Move (CS_SQLIniDSNKeyword + "=" + sServer) to sServer
42290>>>>>>>>>>>//        End
42290>>>>>>>>>>>        Login sServer sUserId sPassword sDriverID
42292>>>>>>>>>>>
42292>>>>>>>>>>>        Move (not(Err)) to bLoginSuccessful
42293>>>>>>>>>>>        Function_Return bLoginSuccessful
42294>>>>>>>>>>>    End_Function
42295>>>>>>>>>>>End_Class
42296>>>>>>>>>>>
42296>>>>>>>>>>>Class cDbUpdateDataFlexDriver is a cDbUpdateGenericDatabaseDriver
42297>>>>>>>>>>>    Function ConstructConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
42299>>>>>>>>>>>        Function_Return ""
42300>>>>>>>>>>>    End_Function
42301>>>>>>>>>>>End_Class
42302>>>>>>>>>>>
42302>>>>>>>>>>>Class cDbUpdateDatabaseDriver is a cObject
42303>>>>>>>>>>>    Procedure Construct_Object
42305>>>>>>>>>>>        Forward Send Construct_Object
42307>>>>>>>>>>>        Property String psDriverID DATAFLEX_ID
42308>>>>>>>>>>>        Property Handle phoDriverSpecificObject
42309>>>>>>>>>>>    End_Procedure
42310>>>>>>>>>>>
42310>>>>>>>>>>>    Function CreateDriver Returns Handle
42312>>>>>>>>>>>        String sDriverID sObjectName
42312>>>>>>>>>>>        Handle hoDriver hcDriverClass
42312>>>>>>>>>>>
42312>>>>>>>>>>>        Get psDriverID to sDriverID
42313>>>>>>>>>>>        Case Begin
42313>>>>>>>>>>>            Case (sDriverID = MSSQLDRV_ID)
42315>>>>>>>>>>>                Move (RefClass(cDbUpdateMSSQLDriver))    to hcDriverClass
42316>>>>>>>>>>>                Move "oDbUpdateMSSQLDriver" to sObjectName
42317>>>>>>>>>>>                Case Break
42318>>>>>>>>>>>            Case (sDriverID = ODBC_DRV_ID)
42321>>>>>>>>>>>                Move (RefClass(cDbUpdateODBCDriver))     to hcDriverClass
42322>>>>>>>>>>>                Move "oDbUpdateODBCDriver" to sObjectName
42323>>>>>>>>>>>                Case Break
42324>>>>>>>>>>>            Case (sDriverID = DB2_DRV_ID)
42327>>>>>>>>>>>                Move (RefClass(cDbUpdateDB2Driver))      to hcDriverClass
42328>>>>>>>>>>>                Move "oDbUpdateDB2Driver" to sObjectName
42329>>>>>>>>>>>                Case Break               
42330>>>>>>>>>>>            Case Else
42330>>>>>>>>>>>                // DATAFLEX_ID = Default driver
42330>>>>>>>>>>>                Move (RefClass(cDbUpdateDataFlexDriver)) to hcDriverClass
42331>>>>>>>>>>>                Move "oDbUpdateDataFlexDriver" to sObjectName
42332>>>>>>>>>>>                Move DATAFLEX_ID to sDriverID
42333>>>>>>>>>>>        Case End
42333>>>>>>>>>>>
42333>>>>>>>>>>>        Get Create hcDriverClass to hoDriver
42334>>>>>>>>>>>        Set Name of hoDriver to sObjectName
42335>>>>>>>>>>>        Set psDriverID of hoDriver to sDriverID
42336>>>>>>>>>>>        Set phoDriverSpecificObject to hoDriver
42337>>>>>>>>>>>
42337>>>>>>>>>>>        Function_Return hoDriver
42338>>>>>>>>>>>    End_Function
42339>>>>>>>>>>>
42339>>>>>>>>>>>    Procedure DestroyDriver
42341>>>>>>>>>>>        If (phoDriverSpecificObject(Self)) Begin
42343>>>>>>>>>>>            Send Destroy of (phoDriverSpecificObject(Self))
42344>>>>>>>>>>>        End
42344>>>>>>>>>>>>
42344>>>>>>>>>>>    End_Procedure
42345>>>>>>>>>>>
42345>>>>>>>>>>>    Function ConstructConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
42347>>>>>>>>>>>        String sConnect
42347>>>>>>>>>>>        Handle hoDriver
42347>>>>>>>>>>>
42347>>>>>>>>>>>        Get phoDriverSpecificObject to hoDriver
42348>>>>>>>>>>>        If (hoDriver = 0) Begin
42350>>>>>>>>>>>            Get CreateDriver to hoDriver
42351>>>>>>>>>>>        End
42351>>>>>>>>>>>>
42351>>>>>>>>>>>        Get ConstructConnectionString of hoDriver sServer sDatabase bTrusted sUserID sPassword to sConnect
42352>>>>>>>>>>>        Send DestroyDriver
42353>>>>>>>>>>>        Function_Return sConnect
42354>>>>>>>>>>>    End_Function
42355>>>>>>>>>>>
42355>>>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
42357>>>>>>>>>>>        Boolean bLoginSuccessful
42357>>>>>>>>>>>        Handle hoDriver
42357>>>>>>>>>>>
42357>>>>>>>>>>>        Get phoDriverSpecificObject to hoDriver
42358>>>>>>>>>>>        If (hoDriver = 0) Begin
42360>>>>>>>>>>>            Get CreateDriver to hoDriver
42361>>>>>>>>>>>        End
42361>>>>>>>>>>>>
42361>>>>>>>>>>>        Get DbLogin of hoDriver sConnectionString sServer sDatabase bTrusted sUserID sPassword to bLoginSuccessful
42362>>>>>>>>>>>        Send DestroyDriver
42363>>>>>>>>>>>        Function_Return bLoginSuccessful
42364>>>>>>>>>>>    End_Function
42365>>>>>>>>>>>
42365>>>>>>>>>>>End_Class
42366>>>>>>>>>
42366>>>>>>>>>    Use cLoginEncryption.pkg
Including file: cLoginEncryption.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cLoginEncryption.pkg)
42366>>>>>>>>>>>Use cCryptographerEx.pkg
42366>>>>>>>>>>>
42366>>>>>>>>>>>Class cLoginEncryption is a cObject
42367>>>>>>>>>>>    
42367>>>>>>>>>>>    Procedure Construct_Object
42369>>>>>>>>>>>        Forward Send Construct_Object
42371>>>>>>>>>>>        // this must be set to a multi (40ish) character random key
42371>>>>>>>>>>>        Property String psEncryptPassword ""
42372>>>>>>>>>>>        
42372>>>>>>>>>>>        Object oDataCrypter is a cCryptographerEx
42374>>>>>>>>>>>            Set piHash to CALG_SHA_256
42375>>>>>>>>>>>            Set piCipher to CALG_AES_256
42376>>>>>>>>>>>            Set psProvider to "" //  Not providing a specific provider gives the default provider for the provider type
42377>>>>>>>>>>>            Set piProvider to PROV_RSA_AES
42378>>>>>>>>>>>        End_Object
42379>>>>>>>>>>>    End_Procedure
42380>>>>>>>>>>>    
42380>>>>>>>>>>>    // This can be augmented to return a password encryption key using any
42380>>>>>>>>>>>    // hidden mechanism desired.
42380>>>>>>>>>>>    Function GetEncryptionPassword Returns String
42382>>>>>>>>>>>        String sPassword
42382>>>>>>>>>>>        Get psEncryptPassword to sPassword
42383>>>>>>>>>>>        Function_Return sPassword
42384>>>>>>>>>>>    End_Function
42385>>>>>>>>>>>    
42385>>>>>>>>>>>    // Encrypts a string into an unreadable hash that can later be decrypted using DecryptKey.
42385>>>>>>>>>>>    //
42385>>>>>>>>>>>    // Params:
42385>>>>>>>>>>>    //   sPlainText     String to encrypt.
42385>>>>>>>>>>>    // Returns:
42385>>>>>>>>>>>    //   Base64 encoded hash.
42385>>>>>>>>>>>    Function EncryptPassword String sPlainText Returns String
42387>>>>>>>>>>>        String sEncryptPassword sBase64
42387>>>>>>>>>>>        UChar[] ucBinary
42388>>>>>>>>>>>        Pointer pBase64
42388>>>>>>>>>>>        Integer iVoid
42388>>>>>>>>>>>        
42388>>>>>>>>>>>        //  Encrypt Key
42388>>>>>>>>>>>        Get GetEncryptionPassword to sEncryptPassword
42389>>>>>>>>>>>        If (sEncryptPassword = "") Begin
42391>>>>>>>>>>>            Error DFERR_PROGRAM "No encryption password set"
42392>>>>>>>>>>>>
42392>>>>>>>>>>>        End
42392>>>>>>>>>>>>
42392>>>>>>>>>>>        
42392>>>>>>>>>>>        Get Encrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) (StringToUCharArray(sPlainText)) to ucBinary
42393>>>>>>>>>>>        
42393>>>>>>>>>>>        If (SizeOfArray(ucBinary) = 0) Begin
42395>>>>>>>>>>>            Error DFERR_PROGRAM "Unable to encrypt database login password"
42396>>>>>>>>>>>>
42396>>>>>>>>>>>            Function_Return ""
42397>>>>>>>>>>>        End
42397>>>>>>>>>>>>
42397>>>>>>>>>>>        
42397>>>>>>>>>>>        //  Encode binary hash to Base64
42397>>>>>>>>>>>        Move (Base64Encode(AddressOf(ucBinary), SizeOfArray(ucBinary))) to pBase64
42398>>>>>>>>>>>        Move (PointerToString(pBase64)) to sBase64
42399>>>>>>>>>>>        Move (Free(pBase64)) to iVoid
42400>>>>>>>>>>>        
42400>>>>>>>>>>>        Function_Return sBase64
42401>>>>>>>>>>>    End_Function
42402>>>>>>>>>>>    
42402>>>>>>>>>>>    
42402>>>>>>>>>>>    // Decrypts the unreadable hash generated by EncryptKey into a readable string.
42402>>>>>>>>>>>    //
42402>>>>>>>>>>>    // Params:
42402>>>>>>>>>>>    //   sBase64EncryptedPassword       Base64 Encrypted password
42402>>>>>>>>>>>    // Returns:
42402>>>>>>>>>>>    //   Readable plain text password
42402>>>>>>>>>>>    Function DecryptPassword String sBase64EncryptedPassword Returns String
42404>>>>>>>>>>>        String sEncryptPassword
42404>>>>>>>>>>>        UChar[] ucBinary ucPlain
42406>>>>>>>>>>>        Boolean bIsHex
42406>>>>>>>>>>>        Integer iLen iVoid
42406>>>>>>>>>>>        Pointer pBinary
42406>>>>>>>>>>>        
42406>>>>>>>>>>>        If (sBase64EncryptedPassword <> "") Begin
42408>>>>>>>>>>>            //  Decode from Base64
42408>>>>>>>>>>>            Move (Base64Decode(AddressOf(sBase64EncryptedPassword), &iLen)) to pBinary
42409>>>>>>>>>>>            
42409>>>>>>>>>>>            Move (ResizeArray(ucBinary, iLen, 0)) to ucBinary
42410>>>>>>>>>>>            Move (MemCopy(AddressOf(ucBinary), pBinary, iLen)) to iVoid
42411>>>>>>>>>>>                        
42411>>>>>>>>>>>            Move (Free(pBinary)) to iVoid
42412>>>>>>>>>>>            
42412>>>>>>>>>>>            //  Encrypted binary hash to string
42412>>>>>>>>>>>            Get GetEncryptionPassword to sEncryptPassword
42413>>>>>>>>>>>            Get Decrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) ucBinary to ucPlain
42414>>>>>>>>>>>        End
42414>>>>>>>>>>>>
42414>>>>>>>>>>>        
42414>>>>>>>>>>>        Function_Return (UCharArrayToString(ucPlain))
42415>>>>>>>>>>>    End_Function
42416>>>>>>>>>>>End_Class
42417>>>>>>>>>
42417>>>>>>>>>Class cSQLConnectionIniFile is a cIniFile
42418>>>>>>>>>    Procedure Construct_Object
42420>>>>>>>>>        Forward Send Construct_Object
42422>>>>>>>>>
42422>>>>>>>>>        Property String Private_psIniFilePath
42423>>>>>>>>>        Property String Private_psIniFileName CS_SQLIniFileName
42424>>>>>>>>>        Property String psIniSectionName (CS_SQLIniSectionName + "1")
42425>>>>>>>>>
42425>>>>>>>>>        Property Boolean pbDFConnId False
42426>>>>>>>>>
42426>>>>>>>>>        // *** You really want to change this value! ***
42426>>>>>>>>>        // It is used when encrypting/decrypting passwords.
42426>>>>>>>>>        Property String psHashString "zx!2139(LI0+?ips7433"
42427>>>>>>>>>
42427>>>>>>>>>    End_Procedure
42428>>>>>>>>>
42428>>>>>>>>>    Procedure End_Construct_Object
42430>>>>>>>>>        Forward Send End_Construct_Object
42432>>>>>>>>>    End_Procedure
42433>>>>>>>>>
42433>>>>>>>>>    Procedure Set psIniFilePath String sPath
42435>>>>>>>>>        String sIniFile
42435>>>>>>>>>        Get vFolderFormat sPath to sPath
42436>>>>>>>>>        Set private_psIniFilePath to sPath
42437>>>>>>>>>        Get psIniFileName to sIniFile
42438>>>>>>>>>        Set psFileName to (sPath + sIniFile)
42439>>>>>>>>>    End_Procedure
42440>>>>>>>>>
42440>>>>>>>>>    Function psIniFilePath Returns String
42442>>>>>>>>>        Function_Return (private_psIniFilePath(Self))
42443>>>>>>>>>    End_Function
42444>>>>>>>>>
42444>>>>>>>>>    Procedure Set psIniFileName String sFileName
42446>>>>>>>>>        String sPath
42446>>>>>>>>>        Get psIniFilePath to sPath
42447>>>>>>>>>        Set psFileName to (sPath + sFileName)
42448>>>>>>>>>        Set private_psIniFileName to sFileName
42449>>>>>>>>>    End_Procedure
42450>>>>>>>>>
42450>>>>>>>>>    Function psIniFileName Returns String
42452>>>>>>>>>        Function_Return (private_psIniFileName(Self))
42453>>>>>>>>>    End_Function
42454>>>>>>>>>
42454>>>>>>>>>    // *** Generalized messages to Get & Set values of the ini file.
42454>>>>>>>>>    // Sets a value in the program's ini file (write)
42454>>>>>>>>>    // Pass a section name, the value name parameter and the value itself to be written.
42454>>>>>>>>>    Procedure Set IniFileValue String sSection String sValueName String sValue
42456>>>>>>>>>        String sIniFile sPath
42456>>>>>>>>>
42456>>>>>>>>>        Get psIniFilePath to sPath
42457>>>>>>>>>        Get psIniFileName to sIniFile
42458>>>>>>>>>        Move (sPath + sIniFile) to sIniFile
42459>>>>>>>>>        Set psFileName to sIniFile
42460>>>>>>>>>        Send WriteString sSection sValueName sValue
42461>>>>>>>>>    End_Procedure
42462>>>>>>>>>
42462>>>>>>>>>    // Get a value from program's ini-file (read)
42462>>>>>>>>>    // Pass a section name and the name of the value parameter & a default value.
42462>>>>>>>>>    // Returns the value
42462>>>>>>>>>    Function IniFileValue String sSection String sValueName String sDefaultValue Returns String
42464>>>>>>>>>        String sValue sIniFile sPath
42464>>>>>>>>>
42464>>>>>>>>>        Get psIniFilePath to sPath
42465>>>>>>>>>        Get psIniFileName to sIniFile
42466>>>>>>>>>        Move (sPath + sIniFile) to sIniFile
42467>>>>>>>>>        Set psFileName to sIniFile
42468>>>>>>>>>        Get ReadString sSection sValueName sDefaultValue to sValue
42469>>>>>>>>>
42469>>>>>>>>>        Function_Return sValue
42470>>>>>>>>>    End_Function
42471>>>>>>>>>
42471>>>>>>>>>    // Sort function that first sorts on bEnabled & then on the connection string.
42471>>>>>>>>>    Function SortActiveFirst tSQLConnection SQLConnectionRow1 tSQLConnection SQLConnectionRow2 Returns Integer
42473>>>>>>>>>        If (SQLConnectionRow1.bEnabled > SQLConnectionRow2.bEnabled) ;            Function_Return (LT)
42476>>>>>>>>>        If (SQLConnectionRow1.bEnabled < SQLConnectionRow2.bEnabled) ;            Function_Return (GT)
42479>>>>>>>>>
42479>>>>>>>>>        If (SQLConnectionRow1.sConnectionID < SQLConnectionRow2.sConnectionID) ;            Function_Return (LT)
42482>>>>>>>>>        If (SQLConnectionRow1.sConnectionID > SQLConnectionRow2.sConnectionID) ;            Function_Return (GT)
42485>>>>>>>>>
42485>>>>>>>>>        If (SQLConnectionRow1.iDbType < SQLConnectionRow2.iDbType) ;            Function_Return (LT)
42488>>>>>>>>>        If (SQLConnectionRow1.iDbType > SQLConnectionRow2.iDbType) ;            Function_Return (GT)
42491>>>>>>>>>
42491>>>>>>>>>        If (SQLConnectionRow1.sServer < SQLConnectionRow2.sServer) ;            Function_Return (LT)
42494>>>>>>>>>        If (SQLConnectionRow1.sServer > SQLConnectionRow2.sServer) ;            Function_Return (GT)
42497>>>>>>>>>
42497>>>>>>>>>        If (SQLConnectionRow1.sDatabase < SQLConnectionRow2.sDatabase) ;            Function_Return (LT)
42500>>>>>>>>>        If (SQLConnectionRow1.sDatabase > SQLConnectionRow2.sDatabase) ;            Function_Return (GT)
42503>>>>>>>>>
42503>>>>>>>>>        If (SQLConnectionRow1.sDriverID < SQLConnectionRow2.sDriverID) ;            Function_Return (LT)
42506>>>>>>>>>        If (SQLConnectionRow1.sDriverID > SQLConnectionRow2.sDriverID) ;            Function_Return (GT)
42509>>>>>>>>>
42509>>>>>>>>>        If (SQLConnectionRow1.sConnectionString < SQLConnectionRow2.sConnectionString) ;            Function_Return (LT)
42512>>>>>>>>>        If (SQLConnectionRow1.sConnectionString > SQLConnectionRow2.sConnectionString) ;            Function_Return (GT)
42515>>>>>>>>>
42515>>>>>>>>>        Function_Return (EQ)
42516>>>>>>>>>    End_Function
42517>>>>>>>>>
42517>>>>>>>>>    Function SQLIniFileNumberOfConnections Returns Integer
42519>>>>>>>>>        Handle hoSections
42519>>>>>>>>>        Integer iItems
42519>>>>>>>>>
42519>>>>>>>>>        Send ReadSections hoSections
42520>>>>>>>>>        Move (Item_Count(hoSections)) to iItems
42521>>>>>>>>>        Function_Return iItems
42522>>>>>>>>>    End_Function
42523>>>>>>>>>
42523>>>>>>>>>    // The normal connection string looks something like this;
42523>>>>>>>>>    // "SERVER=.\SQLEXPRESS; DATABASE=OrderEntry; TRUSTED_CONNECTION=Yes; ,0"
42523>>>>>>>>>    // ...but the full connection string looks like this;
42523>>>>>>>>>    // "DFConnectionId OrderEntry, SERVER=.\SQLEXPRESS; DATABASE=OrderEntry; TRUSTED_CONNECTION=Yes; ,0"
42523>>>>>>>>>//    Function SQLIniFileAddConnection String sFullConnectionString Returns Boolean
42523>>>>>>>>>//        String sSection
42523>>>>>>>>>//        Integer iCount
42523>>>>>>>>>//
42523>>>>>>>>>//        Move False to Err
42523>>>>>>>>>//        Get psIniSectionName to sSection
42523>>>>>>>>>//        Get SQLIniFileNumberOfConnections to iCount
42523>>>>>>>>>//        Increment iCount
42523>>>>>>>>>//        Set IniFileValue sSection (CS_SQLIniSectionName + String(iCount)) to sFullConnectionString
42523>>>>>>>>>//
42523>>>>>>>>>//        Function_Return (Err = False)
42523>>>>>>>>>//    End_Function
42523>>>>>>>>>
42523>>>>>>>>>    Function SQLIniFileDeleteAllConnections Returns Boolean
42525>>>>>>>>>        Integer iCount
42525>>>>>>>>>        Boolean bExists
42525>>>>>>>>>        String sSection
42525>>>>>>>>>
42525>>>>>>>>>        Move False to Err
42526>>>>>>>>>        Move 1 to iCount
42527>>>>>>>>>        Get psIniSectionName to sSection
42528>>>>>>>>>        Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists
42529>>>>>>>>>        While (bExists = True)
42533>>>>>>>>>            Send DeleteSection (CS_SQLIniSectionName + String(iCount))
42534>>>>>>>>>            Increment iCount
42535>>>>>>>>>            Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists
42536>>>>>>>>>        Loop
42537>>>>>>>>>>
42537>>>>>>>>>        Function_Return (Err = False)
42538>>>>>>>>>    End_Function
42539>>>>>>>>>
42539>>>>>>>>>    Function SQLIniFileDeleteConnection Integer iItem Returns Boolean
42541>>>>>>>>>        Integer iCount
42541>>>>>>>>>        String sSection
42541>>>>>>>>>        Boolean bExists
42541>>>>>>>>>
42541>>>>>>>>>        Move False to Err
42542>>>>>>>>>        Move 1 to iCount
42543>>>>>>>>>        Get psIniSectionName to sSection
42544>>>>>>>>>        Get KeyExists sSection CS_SQLIniConnectionIdKeyword to bExists
42545>>>>>>>>>        While (bExists = True)
42549>>>>>>>>>            If (iCount = iItem) Begin
42551>>>>>>>>>                Send DeleteSection sSection
42552>>>>>>>>>//                Set IniFileValue sSection (CS_SQLIniSectionName + String(iCount)) to ""
42552>>>>>>>>>                Move 9999 to iCount // Just some ridiculously high number to get out of the loop as we're done.
42553>>>>>>>>>            End
42553>>>>>>>>>>
42553>>>>>>>>>            Increment iCount
42554>>>>>>>>>            Get KeyExists sSection (CS_SQLIniSectionName + String(iCount)) to bExists
42555>>>>>>>>>        Loop
42556>>>>>>>>>>
42556>>>>>>>>>
42556>>>>>>>>>        Function_Return (Err = False)
42557>>>>>>>>>    End_Function
42558>>>>>>>>>
42558>>>>>>>>>    // Returns all connection details for the passed Connection ID as a tSQLConnection
42558>>>>>>>>>    // If it fails the returned struct member SQLConnection.bError = True.
42558>>>>>>>>>    Function SQLIniFileConnectionID String sConnectionID Returns tSQLConnection
42560>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42560>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42561>>>>>>>>>        tSQLConnection   SQLConnection
42561>>>>>>>>>        tSQLConnection   SQLConnection
42561>>>>>>>>>        Integer iIndex
42561>>>>>>>>>
42561>>>>>>>>>        Get SQLIniFileConnectionIDIndex sConnectionID to iIndex
42562>>>>>>>>>        If (iIndex = -1) Begin
42564>>>>>>>>>            Move True to SQLConnection.bError
42565>>>>>>>>>            Function_Return SQLConnection
42566>>>>>>>>>        End
42566>>>>>>>>>>
42566>>>>>>>>>
42566>>>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42567>>>>>>>>>        Move SQLConnectionsArray[iIndex -1] to SQLConnection
42568>>>>>>>>>
42568>>>>>>>>>        Function_Return SQLConnection
42569>>>>>>>>>    End_Function
42570>>>>>>>>>
42570>>>>>>>>>    // Returns -1 if the passed connection ID was not found, else the item number.
42570>>>>>>>>>    Function SQLIniFileConnectionIDIndex String sConnectionID Returns Integer
42572>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42572>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42573>>>>>>>>>        Integer iRetval iCount iSize
42573>>>>>>>>>        String sValue
42573>>>>>>>>>        Boolean bExists
42573>>>>>>>>>
42573>>>>>>>>>        Move -1 to iRetval
42574>>>>>>>>>
42574>>>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42575>>>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42576>>>>>>>>>        Decrement iSize
42577>>>>>>>>>        For iCount from 0 to iSize
42583>>>>>>>>>>
42583>>>>>>>>>            Move SQLConnectionsArray[iCount].sConnectionID to sValue
42584>>>>>>>>>            Move (Uppercase(sValue) = Uppercase(sConnectionID)) to bExists
42585>>>>>>>>>            If (bExists) Begin
42587>>>>>>>>>                Move (iCount + 1) to iRetval // The [ConnectionX] keys are one-based (starts at 1) but the loop starts at zero.
42588>>>>>>>>>                Move iSize to iCount         // We're done!
42589>>>>>>>>>            End
42589>>>>>>>>>>
42589>>>>>>>>>        Loop
42590>>>>>>>>>>
42590>>>>>>>>>
42590>>>>>>>>>        Function_Return iRetval
42591>>>>>>>>>    End_Function
42592>>>>>>>>>
42592>>>>>>>>>    // Checks if the passed sConnectionID exists more than once in the passed struct array.
42592>>>>>>>>>    // Used to check that ConnectionID's are unique.
42592>>>>>>>>>    Function IsConnectionIDDuplicate String sConnectionID Returns Boolean
42594>>>>>>>>>        Integer iCount iSize iItems
42594>>>>>>>>>        String sValue
42594>>>>>>>>>        Boolean bExists
42594>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42594>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42595>>>>>>>>>
42595>>>>>>>>>        Move 0 to iItems
42596>>>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42597>>>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42598>>>>>>>>>        Decrement iSize
42599>>>>>>>>>        For iCount from 0 to iSize
42605>>>>>>>>>>
42605>>>>>>>>>            Move SQLConnectionsArray[iCount].sConnectionID to sValue
42606>>>>>>>>>            Move (sValue = sConnectionID) to bExists
42607>>>>>>>>>            If (bExists) Begin
42609>>>>>>>>>                Increment iItems
42610>>>>>>>>>            End
42610>>>>>>>>>>
42610>>>>>>>>>        Loop
42611>>>>>>>>>>
42611>>>>>>>>>
42611>>>>>>>>>        Function_Return (iItems > 1)
42612>>>>>>>>>    End_Function
42613>>>>>>>>>
42613>>>>>>>>>    // To update the SQLConnections.ini file with a new default Connection ID.
42613>>>>>>>>>    Function SQLIniFileSetDefaultConnection String sConnectionID Returns Boolean
42615>>>>>>>>>        Boolean bOK
42615>>>>>>>>>        Integer iSize iCount
42615>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42615>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42616>>>>>>>>>        tSQLConnection SQLConnection
42616>>>>>>>>>        tSQLConnection SQLConnection
42616>>>>>>>>>        String sConnectionString
42616>>>>>>>>>
42616>>>>>>>>>        Move False to Err
42617>>>>>>>>>        Get psConnectionString to sConnectionString
42618>>>>>>>>>
42618>>>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42619>>>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42620>>>>>>>>>        Decrement iSize
42621>>>>>>>>>        // Set all current connection to inactive.
42621>>>>>>>>>        For iCount from 0 to iSize
42627>>>>>>>>>>
42627>>>>>>>>>            Move False to SQLConnectionsArray[iCount].bEnabled
42628>>>>>>>>>        Loop
42629>>>>>>>>>>
42629>>>>>>>>>
42629>>>>>>>>>        Get SQLIniFileConnectionID sConnectionID to SQLConnection
42630>>>>>>>>>        Move True              to SQLConnection.bEnabled
42631>>>>>>>>>        Move sConnectionString to SQLConnection.sConnectionString
42632>>>>>>>>>        Move (InsertInArray(SQLConnectionsArray, 0, SQLConnection)) to SQLConnectionsArray
42633>>>>>>>>>        Get SQLIniFileWriteConnections SQLConnectionsArray to bOK
42634>>>>>>>>>
42634>>>>>>>>>        Function_Return (bOK = True)
42635>>>>>>>>>    End_Function
42636>>>>>>>>>
42636>>>>>>>>>    // Used for updating an existing connection with new data.
42636>>>>>>>>>    // Returns True if successful.
42636>>>>>>>>>    Function SQLIniFileUpdateConnection tSQLConnection SQLConnection Returns Boolean
42638>>>>>>>>>        Boolean bOK
42638>>>>>>>>>        Integer iItem iSize iCount
42638>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42638>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42639>>>>>>>>>
42639>>>>>>>>>        Move False to Err
42640>>>>>>>>>        Move -1 to iItem
42641>>>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42642>>>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42643>>>>>>>>>        Decrement iSize
42644>>>>>>>>>        // Set all current connection to inactive.
42644>>>>>>>>>        For iCount from 0 to iSize
42650>>>>>>>>>>
42650>>>>>>>>>            Move False to SQLConnectionsArray[iCount].bEnabled
42651>>>>>>>>>            If (SQLConnectionsArray[iCount].sConnectionID = SQLConnection.sConnectionID) Begin
42653>>>>>>>>>                Move iCount to iItem
42654>>>>>>>>>            End
42654>>>>>>>>>>
42654>>>>>>>>>        Loop
42655>>>>>>>>>>
42655>>>>>>>>>
42655>>>>>>>>>        If (iItem <> -1) Begin
42657>>>>>>>>>            Move True to SQLConnection.bEnabled
42658>>>>>>>>>            Move SQLConnection to SQLConnectionsArray[iItem]
42659>>>>>>>>>            Get SQLIniFileWriteConnections SQLConnectionsArray to bOK
42660>>>>>>>>>        End
42660>>>>>>>>>>
42660>>>>>>>>>
42660>>>>>>>>>        Function_Return (bOK = True)
42661>>>>>>>>>    End_Function
42662>>>>>>>>>
42662>>>>>>>>>    Function SQLIniFileReadConnections Returns tSQLConnection[]
42664>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42664>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42665>>>>>>>>>        String sSection sValue
42665>>>>>>>>>        Integer iCount
42665>>>>>>>>>        Boolean bExists
42665>>>>>>>>>
42665>>>>>>>>>        Get psIniSectionName to sSection
42666>>>>>>>>>        Get SectionExists sSection to bExists
42667>>>>>>>>>        If (bExists = False) Begin
42669>>>>>>>>>            Function_Return SQLConnectionsArray
42670>>>>>>>>>        End
42670>>>>>>>>>>
42670>>>>>>>>>        Get SectionExists CS_SQLIniConnectionSection to bExists
42671>>>>>>>>>        If (bExists = True) Begin
42673>>>>>>>>>            Error DFERR_PROGRAM "Sorry, the format for the SQLConnections.ini file has been changed and this file has the old format that is no longer valid and thus cannot be read. You need to re-enter your connection(s)."
42674>>>>>>>>>>
42674>>>>>>>>>        End
42674>>>>>>>>>>
42674>>>>>>>>>
42674>>>>>>>>>        Move 1 to iCount // The section name "[ConnectionXX]" starts with "1"
42675>>>>>>>>>        Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists
42676>>>>>>>>>
42676>>>>>>>>>        While (bExists = True)                 
42680>>>>>>>>>            // 2018-07-14 Change to allow disabling all connections in test environment.
42680>>>>>>>>>            // We always put the enabled/active connection at the top
42680>>>>>>>>>//            Move (iCount = 1) to bEnabled
42680>>>>>>>>>//            Move bEnabled to SQLConnectionsArray[iCount].bEnabled
42680>>>>>>>>>
42680>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniConnectionIdKeyword ""        to SQLConnectionsArray[iCount].sConnectionID
42681>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDriverKeyword       ""        to SQLConnectionsArray[iCount].sDriverID
42682>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDisabledKeyword     ""        to sValue
42683>>>>>>>>>            Move (If(Uppercase(sValue) = "YES", False, True))                                               to SQLConnectionsArray[iCount].bEnabled
42684>>>>>>>>>
42684>>>>>>>>>            // The iDbType might be missing from the ini-file. This is e.g. the case when a DAW Managed Connection "DFConnId.ini" file is read.
42684>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDbTypeKeyword       "99"      to sValue
42685>>>>>>>>>            If (sValue = "99") Begin
42687>>>>>>>>>                Get SqlUtilDbTypeFromDriver SQLConnectionsArray[iCount].sDriverID to sValue
42688>>>>>>>>>            End
42688>>>>>>>>>>
42688>>>>>>>>>            Move sValue                                                                                     to SQLConnectionsArray[iCount].iDbType
42689>>>>>>>>>
42689>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniConnectionKeyWord   ""        to SQLConnectionsArray[iCount].sConnectionString
42690>>>>>>>>>            Get ParseKeyWord SQLConnectionsArray[iCount].sConnectionString (CS_SQLIniServerKeyword + "=")   to SQLConnectionsArray[iCount].sServer
42691>>>>>>>>>            If (SQLConnectionsArray[iCount].sServer = "") Begin
42693>>>>>>>>>                Get ParseKeyWord SQLConnectionsArray[iCount].sConnectionString (CS_SQLIniFileDSNKeyword +"=") to SQLConnectionsArray[iCount].sServer
42694>>>>>>>>>            End
42694>>>>>>>>>>
42694>>>>>>>>>            If (SQLConnectionsArray[iCount].sServer = "") Begin
42696>>>>>>>>>                Get ParseKeyWord SQLConnectionsArray[iCount].sConnectionString (CS_SQLIniDSNKeyword +"=")   to SQLConnectionsArray[iCount].sServer
42697>>>>>>>>>            End
42697>>>>>>>>>>
42697>>>>>>>>>
42697>>>>>>>>>            Get ParseKeyWord SQLConnectionsArray[iCount].sConnectionString (CS_SQLIniDatabaseKeyword + "=") to SQLConnectionsArray[iCount].sDatabase
42698>>>>>>>>>
42698>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniTrustedKeyword      ""        to sValue
42699>>>>>>>>>            Move (If(Uppercase(sValue) = "YES", True, False))                                               to SQLConnectionsArray[iCount].bTrusted
42700>>>>>>>>>
42700>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniUIDKeyword          ""        to SQLConnectionsArray[iCount].sUserID
42701>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDFPWDKeyword        ""        to sValue
42702>>>>>>>>>            If (pbDFConnId(Self) = False and sValue <> "") Begin
42704>>>>>>>>>                Get DecryptPassword sValue to sValue
42705>>>>>>>>>            End
42705>>>>>>>>>>
42705>>>>>>>>>            Move sValue                                                                                     to SQLConnectionsArray[iCount].sPassword
42706>>>>>>>>>
42706>>>>>>>>>            // Here we reconstruct the connection string to be complete with all params;
42706>>>>>>>>>            Get ConstructConnectionString SQLConnectionsArray[iCount].sDriverID SQLConnectionsArray[iCount].sServer SQLConnectionsArray[iCount].sDatabase ;                                          SQLConnectionsArray[iCount].bTrusted SQLConnectionsArray[iCount].sUserID SQLConnectionsArray[iCount].sPassword ;                                          to SQLConnectionsArray[iCount].sConnectionString
42707>>>>>>>>>
42707>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniSchemaKeyword          ""     to SQLConnectionsArray[iCount].sSchema
42708>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniBaseTableSpaceKeyword  ""     to SQLConnectionsArray[iCount].sBaseTableSpace
42709>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniLongTableSpaceKeyword  ""     to SQLConnectionsArray[iCount].sLongTableSpace
42710>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniIndexTableSpaceKeyword ""     to SQLConnectionsArray[iCount].sIndexTableSpace
42711>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniSilentLoginKeyword     ""     to sValue
42712>>>>>>>>>            Move (If(Uppercase(sValue) = "YES", True, False))                                               to SQLConnectionsArray[iCount].bSilentLogin
42713>>>>>>>>>
42713>>>>>>>>>            Increment iCount
42714>>>>>>>>>            Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists
42715>>>>>>>>>        Loop
42716>>>>>>>>>>
42716>>>>>>>>>
42716>>>>>>>>>        // Lastly, we remove the very first array item as it is empty (we started at 1 because that is the first [Connection#])
42716>>>>>>>>>        If (SizeOfArray(SQLConnectionsArray) > 0) Begin
42718>>>>>>>>>            Move (RemoveFromArray(SQLConnectionsArray, 0)) to SQLConnectionsArray
42719>>>>>>>>>        End
42719>>>>>>>>>>
42719>>>>>>>>>
42719>>>>>>>>>        Function_Return SQLConnectionsArray
42720>>>>>>>>>    End_Function
42721>>>>>>>>>
42721>>>>>>>>>    Function SQLIniFileWriteConnections tSQLConnection[] SQLConnectionsArray Returns Boolean
42723>>>>>>>>>        Integer iCount iSize
42723>>>>>>>>>        Boolean bOK
42723>>>>>>>>>        String sSection sValue
42723>>>>>>>>>
42723>>>>>>>>>        // First we need to _remove_ all current connections from the ini-file.
42723>>>>>>>>>        Move 0 to iCount
42724>>>>>>>>>        Get SQLIniFileDeleteAllConnections to bOK
42725>>>>>>>>>        If (bOK = False) Begin
42727>>>>>>>>>            Function_Return False
42728>>>>>>>>>        End
42728>>>>>>>>>>
42728>>>>>>>>>
42728>>>>>>>>>        Move False to Err
42729>>>>>>>>>        Get psIniSectionName to sSection
42730>>>>>>>>>        // Sorting will make sure we have the active connection record as the first connection item in the ini-file.
42730>>>>>>>>>        Move (SortArray(SQLConnectionsArray, Self, (RefFunc(SortActiveFirst)))) to SQLConnectionsArray
42731>>>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42732>>>>>>>>>        Decrement iSize
42733>>>>>>>>>
42733>>>>>>>>>        For iCount from 0 to iSize
42739>>>>>>>>>>
42739>>>>>>>>>            // DF 19 compatible settings:
42739>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniConnectionIdKeyword   to SQLConnectionsArray[iCount].sConnectionID
42740>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniDriverKeyword         to SQLConnectionsArray[iCount].sDriverID
42741>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniDisabledKeyword       to (If(SQLConnectionsArray[iCount].bEnabled = 0, "Yes", "No"))
42742>>>>>>>>>            
42742>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniUIDKeyword            to SQLConnectionsArray[iCount].sUserID
42743>>>>>>>>>
42743>>>>>>>>>            Move SQLConnectionsArray[iCount].sPassword to sValue
42744>>>>>>>>>            If (pbDFConnId(Self) = False and sValue <> "") Begin
42746>>>>>>>>>                Get EncryptPassword sValue to sValue
42747>>>>>>>>>            End
42747>>>>>>>>>>
42747>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniDFPWDKeyword          to sValue
42748>>>>>>>>>
42748>>>>>>>>>            If (SQLConnectionsArray[iCount].bTrusted = True) Begin
42750>>>>>>>>>                Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniTrustedKeyword    to CS_SQLIniConnectionYes
42751>>>>>>>>>            End
42751>>>>>>>>>>
42751>>>>>>>>>
42751>>>>>>>>>            Get ConstructShortConnectionString SQLConnectionsArray[iCount].sDriverID SQLConnectionsArray[iCount].sServer SQLConnectionsArray[iCount].sDatabase ;                                            to SQLConnectionsArray[iCount].sConnectionString
42752>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniConnectionKeyWord     to SQLConnectionsArray[iCount].sConnectionString
42753>>>>>>>>>
42753>>>>>>>>>            // The Database Update Framework extended settings:
42753>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniDbTypeKeyword          to SQLConnectionsArray[iCount].iDbType
42754>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniSchemaKeyword          to SQLConnectionsArray[iCount].sSchema
42755>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniBaseTableSpaceKeyword  to SQLConnectionsArray[iCount].sBaseTableSpace
42756>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniLongTableSpaceKeyword  to SQLConnectionsArray[iCount].sLongTableSpace
42757>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniIndexTableSpaceKeyword to SQLConnectionsArray[iCount].sIndexTableSpace
42758>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniSilentLoginKeyword     to (If(SQLConnectionsArray[iCount].bSilentLogin = 1, "Yes", "No"))
42759>>>>>>>>>        Loop
42760>>>>>>>>>>
42760>>>>>>>>>
42760>>>>>>>>>        Function_Return (bOK and Err = False)
42761>>>>>>>>>    End_Function
42762>>>>>>>>>
42762>>>>>>>>>    // *** DbType conversion routines - Converts between string/integer and driver ID values ***
42762>>>>>>>>>    //
42762>>>>>>>>>    // SQL utility function that returns a database type (string) constant
42762>>>>>>>>>    // corresponding to the passed iDbType.
42762>>>>>>>>>    Function SqlUtilDbTypeToString Integer iDbType Returns String
42764>>>>>>>>>        String sRetval
42764>>>>>>>>>        If (iDbType = EN_dbTypeMSSQL) Begin
42766>>>>>>>>>            Move CS_dbTypeMSSQL to sRetval
42767>>>>>>>>>        End
42767>>>>>>>>>>
42767>>>>>>>>>        If (iDbType = EN_dbTypeMySQL) Begin
42769>>>>>>>>>            Move CS_dbTypeMySQL to sRetval
42770>>>>>>>>>        End
42770>>>>>>>>>>
42770>>>>>>>>>        If (iDbType = EN_dbTypeOracle) Begin
42772>>>>>>>>>            Move CS_dbTypeOracle to sRetval
42773>>>>>>>>>        End
42773>>>>>>>>>>
42773>>>>>>>>>        If (iDbType = EN_dbTypeDB2) Begin
42775>>>>>>>>>            Move CS_dbTypeDB2 to sRetval
42776>>>>>>>>>        End
42776>>>>>>>>>>
42776>>>>>>>>>        If (iDbType = EN_dbTypePostgre) Begin
42778>>>>>>>>>            Move CS_dbTypePostgre to sRetval
42779>>>>>>>>>        End
42779>>>>>>>>>>
42779>>>>>>>>>        If (iDbType = EN_DbTypePervasive) Begin
42781>>>>>>>>>            Move CS_DbTypePervasive to sRetval
42782>>>>>>>>>        End
42782>>>>>>>>>>
42782>>>>>>>>>        Function_Return sRetval
42783>>>>>>>>>    End_Function
42784>>>>>>>>>
42784>>>>>>>>>    // SQL utility function that returns a database type constant (integer)
42784>>>>>>>>>    // corresponding to the passed sDbType string constant.
42784>>>>>>>>>    Function SqlUtilDbTypeToInteger String sDbType  Returns Integer
42786>>>>>>>>>        Integer iRetval
42786>>>>>>>>>        If (sDbType = CS_DbTypeDataFlex) Begin
42788>>>>>>>>>            Move EN_DbTypeDataFlex to iRetval
42789>>>>>>>>>        End
42789>>>>>>>>>>
42789>>>>>>>>>        If (sDbType = CS_dbTypeMSSQL) Begin
42791>>>>>>>>>            Move EN_dbTypeMSSQL to iRetval
42792>>>>>>>>>        End
42792>>>>>>>>>>
42792>>>>>>>>>        If (sDbType = CS_dbTypeMySQL) Begin
42794>>>>>>>>>            Move EN_dbTypeMySQL to iRetval
42795>>>>>>>>>        End
42795>>>>>>>>>>
42795>>>>>>>>>        If (sDbType = CS_dbTypeOracle) Begin
42797>>>>>>>>>            Move EN_dbTypeOracle to iRetval
42798>>>>>>>>>        End
42798>>>>>>>>>>
42798>>>>>>>>>        If (sDbType = CS_dbTypeDB2) Begin
42800>>>>>>>>>            Move EN_dbTypeDB2 to iRetval
42801>>>>>>>>>        End
42801>>>>>>>>>>
42801>>>>>>>>>        If (sDbType = CS_dbTypePostgre) Begin
42803>>>>>>>>>            Move EN_dbTypePostgre to iRetval
42804>>>>>>>>>        End
42804>>>>>>>>>>
42804>>>>>>>>>        If (sDbType = CS_DbTypePervasive) Begin
42806>>>>>>>>>            Move EN_DbTypePervasive to iRetval
42807>>>>>>>>>        End
42807>>>>>>>>>>
42807>>>>>>>>>        Function_Return iRetval
42808>>>>>>>>>    End_Function
42809>>>>>>>>>
42809>>>>>>>>>    // Pass an integer DbType and function returns the database type integer as a string value.
42809>>>>>>>>>    // Used e.g. when reading a connection ini-file to display the database type in
42809>>>>>>>>>    // the SQL Connection program's grid.
42809>>>>>>>>>    Function SqlUtilDbTypeIntegerToStringConstant Integer iDbType Returns String
42811>>>>>>>>>        String sRetval
42811>>>>>>>>>        If (iDbType = EN_dbTypeMSSQL) Begin
42813>>>>>>>>>            Move "EN_dbTypeMSSQL" to sRetval
42814>>>>>>>>>        End
42814>>>>>>>>>>
42814>>>>>>>>>        If (iDbType = EN_dbTypeMySQL) Begin
42816>>>>>>>>>            Move "EN_dbTypeMySQL" to sRetval
42817>>>>>>>>>        End
42817>>>>>>>>>>
42817>>>>>>>>>        If (iDbType = EN_dbTypeOracle) Begin
42819>>>>>>>>>            Move "EN_dbTypeOracle" to sRetval
42820>>>>>>>>>        End
42820>>>>>>>>>>
42820>>>>>>>>>        If (iDbType = EN_dbTypeDB2) Begin
42822>>>>>>>>>            Move "EN_dbTypeDB2" to sRetval
42823>>>>>>>>>        End
42823>>>>>>>>>>
42823>>>>>>>>>        If (iDbType = EN_dbTypePostgre) Begin
42825>>>>>>>>>            Move "EN_dbTypePostgre" to sRetval
42826>>>>>>>>>        End
42826>>>>>>>>>>
42826>>>>>>>>>        If (iDbType = EN_DbTypePervasive) Begin
42828>>>>>>>>>            Move "EN_dbTypePervasive" to sRetval
42829>>>>>>>>>        End
42829>>>>>>>>>>
42829>>>>>>>>>        Function_Return sRetval
42830>>>>>>>>>    End_Function
42831>>>>>>>>>
42831>>>>>>>>>    // Pass a driver id and the function will return
42831>>>>>>>>>    // a dbType as an integer. Obviously for the ODBC_DRV this doesn't
42831>>>>>>>>>    // quite work and always returns "MS SQL Server"
42831>>>>>>>>>    Function SqlUtilDbTypeFromDriver String sDriverID Returns Integer
42833>>>>>>>>>        Integer iRetval
42833>>>>>>>>>        If (sDriverID = MSSQLDRV_ID) Begin
42835>>>>>>>>>            Move EN_dbTypeMSSQL to iRetval
42836>>>>>>>>>        End
42836>>>>>>>>>>
42836>>>>>>>>>        If (sDriverID = ODBC_DRV_ID) Begin
42838>>>>>>>>>            Move EN_dbTypeMSSQL to iRetval
42839>>>>>>>>>        End
42839>>>>>>>>>>
42839>>>>>>>>>        If (sDriverID = DB2_DRV_ID) Begin
42841>>>>>>>>>            Move EN_dbTypeDB2 to iRetval
42842>>>>>>>>>        End
42842>>>>>>>>>>
42842>>>>>>>>>        If (sDriverID = DFBTRDRV_ID) Begin
42844>>>>>>>>>            Move EN_DbTypePervasive to iRetval
42845>>>>>>>>>        End
42845>>>>>>>>>>
42845>>>>>>>>>        Function_Return iRetval
42846>>>>>>>>>    End_Function
42847>>>>>>>>>
Including file: ParseKeyWord.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ParseKeyWord.pkg)
42847>>>>>>>>>>
42847>>>>>>>>>>Function ParseKeyWord String sConnect String sKeyWord Returns String
42849>>>>>>>>>>    Integer iStart iEnd
42849>>>>>>>>>>    String sRetval
42849>>>>>>>>>>
42849>>>>>>>>>>    Move (Trim(sConnect)) to sConnect
42850>>>>>>>>>>    Move (Pos(Uppercase(sKeyWord), Uppercase(sConnect)))  to iStart
42851>>>>>>>>>>    If (iStart = 0) Begin
42853>>>>>>>>>>        Function_Return ""
42854>>>>>>>>>>    End
42854>>>>>>>>>>>
42854>>>>>>>>>>    Move (Left(sConnect, (iStart -1 + Length(sKeyWord)))) to sRetval
42855>>>>>>>>>>    Move (Replace(sRetval, sConnect, "")) to sRetval
42856>>>>>>>>>>    If (sKeyWord = Uppercase(CS_SQLConnectionIDText)) Begin
42858>>>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
42859>>>>>>>>>>    End
42859>>>>>>>>>>>
42859>>>>>>>>>>    Else Begin
42860>>>>>>>>>>        Move (Pos(";", sRetval))          to iEnd
42861>>>>>>>>>>    End
42861>>>>>>>>>>>
42861>>>>>>>>>>    If (iEnd = 0 and (sRetval contains ",")) Begin
42863>>>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
42864>>>>>>>>>>        Decrement iEnd
42865>>>>>>>>>>    End
42865>>>>>>>>>>>
42865>>>>>>>>>>    If (iEnd <> 0) Begin
42867>>>>>>>>>>        Move (Left(sRetval, (iEnd -1)))   to sRetval
42868>>>>>>>>>>    End
42868>>>>>>>>>>>
42868>>>>>>>>>>    Move (Replace("=", sRetval, ""))      to sRetval
42869>>>>>>>>>>
42869>>>>>>>>>>    Function_Return (Trim(sRetval))
42870>>>>>>>>>>End_Function
42871>>>>>>>>>>
42871>>>>>>>>>>
42871>>>>>>>>>
42871>>>>>>>>>    Function ConstructConnectionString String sDriverID String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
42873>>>>>>>>>        String sConnect
42873>>>>>>>>>        Handle hoDriver
42873>>>>>>>>>
42873>>>>>>>>>        Get Create (RefClass(cDbUpdateDatabaseDriver)) to hoDriver 
42874>>>>>>>>>        Set Name of hoDriver to "oDbUpdateDatabaseDriver"
42875>>>>>>>>>        Set psDriverID of hoDriver to sDriverID
42876>>>>>>>>>        Get ConstructConnectionString of hoDriver sServer sDatabase bTrusted sUserID sPassword to sConnect
42877>>>>>>>>>        Send Destroy of hoDriver
42878>>>>>>>>>
42878>>>>>>>>>        Function_Return sConnect
42879>>>>>>>>>    End_Function
42880>>>>>>>>>
42880>>>>>>>>>    // Short connection string used when writing to ini-file. This is to be compatible with DF19 DFConnId.ini files that uses this short format.
42880>>>>>>>>>    Function ConstructShortConnectionString String sDriverID String sServer String sDatabase Returns String
42882>>>>>>>>>        String sConnect
42882>>>>>>>>>
42882>>>>>>>>>        Case Begin
42882>>>>>>>>>            Case (sDriverID = MSSQLDRV_ID)
42884>>>>>>>>>                Move (sConnect * CS_SQLIniServerKeyword + "=" + sServer) to sConnect
42885>>>>>>>>>                If (sDatabase <> "") Begin
42887>>>>>>>>>                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
42888>>>>>>>>>                End
42888>>>>>>>>>>
42888>>>>>>>>>                Case Break
42889>>>>>>>>>
42889>>>>>>>>>            Case (sDriverID = ODBC_DRV_ID)
42892>>>>>>>>>                If (Uppercase(sServer) contains ".DSN") Begin
42894>>>>>>>>>                    Move (CS_SQLIniFileDSNKeyword + "=" + sServer) to sConnect
42895>>>>>>>>>                End
42895>>>>>>>>>>
42895>>>>>>>>>                Else If (not(Uppercase(sServer) contains "DSN")) Begin
42898>>>>>>>>>                    Move (CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
42899>>>>>>>>>                End
42899>>>>>>>>>>
42899>>>>>>>>>
42899>>>>>>>>>                If (sDatabase <> "") Begin
42901>>>>>>>>>                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
42902>>>>>>>>>                End
42902>>>>>>>>>>
42902>>>>>>>>>                Case Break
42903>>>>>>>>>
42903>>>>>>>>>            Case (sDriverID = DB2_DRV_ID)
42906>>>>>>>>>                Move (sConnect * CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
42907>>>>>>>>>                If (sDatabase <> "") Begin
42909>>>>>>>>>                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
42910>>>>>>>>>                End
42910>>>>>>>>>>
42910>>>>>>>>>                Case Break
42911>>>>>>>>>
42911>>>>>>>>>            Case (sDriverID = DATAFLEX_ID)    // Dummy stub.
42914>>>>>>>>>                Break
42915>>>>>>>>>
42915>>>>>>>>>            Case Else
42915>>>>>>>>>                Move "" to sConnect
42916>>>>>>>>>        Case End
42916>>>>>>>>>
42916>>>>>>>>>        Function_Return sConnect
42917>>>>>>>>>    End_Function
42918>>>>>>>>>
42918>>>>>>>>>    // Use Base64
42918>>>>>>>>>    Function EncryptPassword String sPassword Returns String
42920>>>>>>>>>        String sRetval
42920>>>>>>>>>        Handle hoLoginEncryption
42920>>>>>>>>>
42920>>>>>>>>>        Get Create (RefClass(cLoginEncryption)) to hoLoginEncryption
42921>>>>>>>>>        Set psEncryptPassword of hoLoginEncryption to (psHashString(Self))
42922>>>>>>>>>        Get EncryptPassword of hoLoginEncryption sPassword to sRetval
42923>>>>>>>>>        Send Destroy of hoLoginEncryption
42924>>>>>>>>>          
42924>>>>>>>>>        Function_Return sRetval
42925>>>>>>>>>    End_Function
42926>>>>>>>>>
42926>>>>>>>>>    Function DecryptPassword String sPassword Returns String
42928>>>>>>>>>        String sRetval
42928>>>>>>>>>        Handle hoLoginEncryption
42928>>>>>>>>>
42928>>>>>>>>>        Get Create (RefClass(cLoginEncryption)) to hoLoginEncryption
42929>>>>>>>>>        Set psEncryptPassword of hoLoginEncryption to (psHashString(Self))
42930>>>>>>>>>        Get DecryptPassword of hoLoginEncryption sPassword to sRetval
42931>>>>>>>>>        Send Destroy of hoLoginEncryption
42932>>>>>>>>>
42932>>>>>>>>>        Function_Return sRetval
42933>>>>>>>>>    End_Function
42934>>>>>>>>>
42934>>>>>>>>>    // Returns the full path of the Application (no trailing "\")
42934>>>>>>>>>    Function ApplicationPath Returns String
42936>>>>>>>>>        String sApplicationFileName sPath
42936>>>>>>>>>        Integer iNumChars iRetval
42936>>>>>>>>>
42936>>>>>>>>>        Move (Repeat(Character(0), 1024))    to sApplicationFileName
42937>>>>>>>>>        Move (GetModuleFileName(0, AddressOf(sApplicationFileName), 1024)) to iNumChars
42938>>>>>>>>>        Move (CString(sApplicationFileName)) to sApplicationFileName
42939>>>>>>>>>        Move (PathRemoveFileSpec(AddressOf(sApplicationFileName))) to iRetval
42940>>>>>>>>>        Move (CString(sApplicationFileName)) to sPath
42941>>>>>>>>>
42941>>>>>>>>>        Function_Return sPath
42942>>>>>>>>>    End_Function
42943>>>>>>>>>
42943>>>>>>>>>    // Pass a filename including the extension. The return value
42943>>>>>>>>>    // will be the path of of the first found "sSearchFileName in the workspace.
42943>>>>>>>>>    // If not found in the workspace it will be search "globally" by the Get_File_Path command.
42943>>>>>>>>>    Function SearchLocallyThenGloballyForFile String sSearchFileName Returns String
42945>>>>>>>>>        Boolean bExists
42945>>>>>>>>>        Handle hoPaths hoIniFile
42945>>>>>>>>>        String[] asWorkSpaceFiles
42946>>>>>>>>>        String sProgramsPath sSection sFileName sRelativePath sRelativePaths sPath sDirSep sProgramsDir
42946>>>>>>>>>        Integer iSize iCount iPath iNoOfPaths iCountPath
42946>>>>>>>>>        
42946>>>>>>>>>        Get psIniFilePath to sProgramsPath
42947>>>>>>>>>        Get vFolderFormat sProgramsPath to sProgramsPath 
42948>>>>>>>>>        Move (Lowercase(sSearchFileName)) to sSearchFileName
42949>>>>>>>>>        Get vFilePathExists (sProgramsPath + sSearchFileName) to bExists   
42950>>>>>>>>>        If (bExists = True) Begin
42952>>>>>>>>>            Function_Return sProgramsPath
42953>>>>>>>>>        End                      
42953>>>>>>>>>>
42953>>>>>>>>>    
42953>>>>>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
42954>>>>>>>>>        If (Right(sProgramsPath, 1) ="\") Begin
42956>>>>>>>>>            Move (Left(sProgramsPath, Length(sProgramsPath) -1)) to sProgramsPath        
42957>>>>>>>>>        End                                              
42957>>>>>>>>>>
42957>>>>>>>>>        Get StringFromRightOfChar sProgramsPath sDirSep to sProgramsDir
42958>>>>>>>>>        
42958>>>>>>>>>        Move False to bExists
42959>>>>>>>>>        Get Create (RefClass(Array)) to hoPaths
42960>>>>>>>>>        Get WorkspaceIniFiles sProgramsPath to asWorkspaceFiles
42961>>>>>>>>>        Move (SizeOfArray(asWorkspaceFiles)) to iSize
42962>>>>>>>>>        Decrement iSize       
42963>>>>>>>>>        
42963>>>>>>>>>        For iCount from 0 to iSize
42969>>>>>>>>>>
42969>>>>>>>>>            Move asWorkspaceFiles[iCount] to sFileName
42970>>>>>>>>>            Get Create (Refclass(cIniFile)) to hoIniFile
42971>>>>>>>>>            Set psFileName of hoIniFile to sFileName
42972>>>>>>>>>            Send ReadSection of hoIniFile "Workspace" hoPaths
42973>>>>>>>>>            For iPath from 0 to (Item_Count(hoPaths) -1)
42979>>>>>>>>>>
42979>>>>>>>>>                Get Value of hoPaths iPath to sSection    
42980>>>>>>>>>                Get ReadString of hoIniFile "Workspace" sSection "" to sRelativePath 
42981>>>>>>>>>                // Check if there are more than one path specified;
42981>>>>>>>>>                Get CountOfPaths of (phoWorkspace(ghoApplication)) sRelativePath to iNoOfPaths
42982>>>>>>>>>                If (iNoOfPaths > 1) Begin         
42984>>>>>>>>>                    Move sRelativePath to sRelativePaths
42985>>>>>>>>>                    For iCountPath from 1 to iNoOfPaths
42991>>>>>>>>>>
42991>>>>>>>>>                        Get PathAtIndex of (phoWorkspace(ghoApplication)) sRelativePaths iCountPath to sRelativePath
42992>>>>>>>>>                        Get FullPathNames of (phoWorkspace(ghoApplication)) sRelativePath to sPath   
42993>>>>>>>>>                        Move (Replace((sDirSep + sProgramsDir + sDirSep), sPath, sDirSep)) to sPath
42994>>>>>>>>>                        Get vFolderFormat sPath to sPath
42995>>>>>>>>>                        Get vFilePathExists (sPath + sSearchFileName) to bExists
42996>>>>>>>>>                        If (bExists = True) Begin
42998>>>>>>>>>                            Move iNoOfPaths to iCountPath
42999>>>>>>>>>                            Move (Item_Count(hoPaths)) to iPath // We're done.
43000>>>>>>>>>                            Move iSize to iCount
43001>>>>>>>>>                        End                                                    
43001>>>>>>>>>>
43001>>>>>>>>>                    Loop
43002>>>>>>>>>>
43002>>>>>>>>>                End
43002>>>>>>>>>>
43002>>>>>>>>>                Else Begin
43003>>>>>>>>>                    Get FullPathNames of (phoWorkspace(ghoApplication)) sRelativePath to sPath   
43004>>>>>>>>>                    Move (Replace((sDirSep + sProgramsDir + sDirSep), sPath, sDirSep)) to sPath
43005>>>>>>>>>                    Get vFolderFormat sPath to sPath
43006>>>>>>>>>                    Get vFilePathExists (sPath + sSearchFileName) to bExists
43007>>>>>>>>>                    If (bExists = True) Begin
43009>>>>>>>>>                        Move (Item_Count(hoPaths)) to iPath // We're done.
43010>>>>>>>>>                        Move iSize to iCount
43011>>>>>>>>>                    End                                                    
43011>>>>>>>>>>
43011>>>>>>>>>                End
43011>>>>>>>>>>
43011>>>>>>>>>            Loop
43012>>>>>>>>>>
43012>>>>>>>>>            If (bExists = False) Begin
43014>>>>>>>>>                Move "" to sPath    
43015>>>>>>>>>            End
43015>>>>>>>>>>
43015>>>>>>>>>            Send Destroy of hoIniFile          
43016>>>>>>>>>        Loop        
43017>>>>>>>>>>
43017>>>>>>>>>        Send Destroy of hoPaths
43018>>>>>>>>>        
43018>>>>>>>>>        // Then not found in workspace, look for the file in DFSysPath;
43018>>>>>>>>>        If (sPath = "") Begin
43020>>>>>>>>>            Get_File_Path sSearchFileName to sFileName   
43021>>>>>>>>>            Get ParseFolderName sFileName to sPath
43022>>>>>>>>>        End                  
43022>>>>>>>>>>
43022>>>>>>>>>        
43022>>>>>>>>>        Function_Return sPath    
43023>>>>>>>>>    End_Function
43024>>>>>>>>>    
43024>>>>>>>>>    // Pass the path to the workspace Programs folder - returns a string array
43024>>>>>>>>>    // with one or more .ws file names.
43024>>>>>>>>>    // First checks if there is a .sws file - and if so reads the name of the
43024>>>>>>>>>    // workspace file (.ws) and returns it as a string array.
43024>>>>>>>>>    // If _no_ .sws file is found, enumerates the passed sProgramsPath variable
43024>>>>>>>>>    Function WorkspaceIniFiles String sProgramsPath Returns String[]
43026>>>>>>>>>        String[] asSWSFiles asWorkspaceFiles   
43028>>>>>>>>>        String sFile sHomePath sDirSep
43028>>>>>>>>>        Integer iCh iSize
43028>>>>>>>>>        Boolean bExists      
43028>>>>>>>>>        Handle hoIniFile 
43028>>>>>>>>>        
43028>>>>>>>>>        Move (ResizeArray(asSWSFiles, 0)) to asSWSFiles
43029>>>>>>>>>        Move (ResizeArray(asWorkspaceFiles, 0)) to asWorkspaceFiles
43030>>>>>>>>>        If (Right(sProgramsPath, 1) ="\") Begin
43032>>>>>>>>>            Move (Left(sProgramsPath, Length(sProgramsPath) -1)) to sProgramsPath        
43033>>>>>>>>>        End                                              
43033>>>>>>>>>>
43033>>>>>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
43034>>>>>>>>>        Get StringFromRightOfChar sProgramsPath sDirSep to sHomePath
43035>>>>>>>>>        Move (Replace(sHomePath, sProgramsPath, "")) to sHomePath
43036>>>>>>>>>        Get vFolderFormat sHomePath to sHomePath 
43037>>>>>>>>>        
43037>>>>>>>>>        // First check if theres an .sws file. If there is we will open it and
43037>>>>>>>>>        // read the name of the .ws file name.
43037>>>>>>>>>        File_Exist (sHomePath + "*.sws") bExists
43038>>>>>>>>>        If (bExists = True) Begin
43040>>>>>>>>>            Get Seq_Open_input_Channel ("dir:" + sHomePath + "*.sws") to iCh
43041>>>>>>>>>            If (iCh < 0) Begin
43043>>>>>>>>>                Function_Return asSWSFiles
43044>>>>>>>>>            End                                 
43044>>>>>>>>>>
43044>>>>>>>>>            
43044>>>>>>>>>            Repeat
43044>>>>>>>>>>
43044>>>>>>>>>                Readln channel iCh sFile
43046>>>>>>>>>                If (Trim(sFile) <> "") Begin
43048>>>>>>>>>                    Move sFile to asSWSFiles[SizeOfArray(asSWSFiles)]
43049>>>>>>>>>                End
43049>>>>>>>>>>
43049>>>>>>>>>            Until (SeqEof = True)
43051>>>>>>>>>            Send Seq_Close_Channel iCh    
43052>>>>>>>>>            
43052>>>>>>>>>            Move (SizeOfArray(asSWSFiles)) to iSize
43053>>>>>>>>>            If (iSize <> 0) Begin
43055>>>>>>>>>                Get Create (RefClass(cIniFile)) to hoIniFile  
43056>>>>>>>>>                // Use the file with that is last as it might have the DataFlex version in it,
43056>>>>>>>>>                // and thus is the latest one and it is more likely it is accurate (?)...
43056>>>>>>>>>                Move asSWSFiles[SizeOfArray(asSWSFiles) -1] to sFile
43057>>>>>>>>>                Set psFileName of hoIniFile to (sHomePath + sFile)
43058>>>>>>>>>                Get ReadString of hoIniFile "WorkspacePaths" "ConfigFile" "" to sFile
43059>>>>>>>>>                If (sFile <> "") Begin
43061>>>>>>>>>                    Move (Replace(".", sFile, sHomePath)) to sFile
43062>>>>>>>>>                    Move (Replace((sDirSep + String(sDirSep)), sFile, sDirSep)) to sFile
43063>>>>>>>>>                    File_Exist sFile bExists
43064>>>>>>>>>                    If (bExists = True) Begin
43066>>>>>>>>>                        Move sFile to asWorkspaceFiles[0] 
43067>>>>>>>>>                    End
43067>>>>>>>>>>
43067>>>>>>>>>                End
43067>>>>>>>>>>
43067>>>>>>>>>                Send Destroy of hoIniFile
43068>>>>>>>>>            End
43068>>>>>>>>>>
43068>>>>>>>>>        End
43068>>>>>>>>>>
43068>>>>>>>>>        
43068>>>>>>>>>        // If no .sws file exists, enumerate the .ws files from the Programs folder:    
43068>>>>>>>>>        If (SizeOfArray(asWorkspaceFiles) = 0) Begin
43070>>>>>>>>>            Get vFolderFormat sProgramsPath to sProgramsPath 
43071>>>>>>>>>            File_Exist (sProgramsPath + "*.ws") bExists
43072>>>>>>>>>            If (bExists = False) Begin
43074>>>>>>>>>                Function_Return asWorkspaceFiles
43075>>>>>>>>>            End
43075>>>>>>>>>>
43075>>>>>>>>>        
43075>>>>>>>>>            Get Seq_Open_input_Channel ("dir:" + sProgramsPath + "*.ws") to iCh
43076>>>>>>>>>            If (iCh < 0) Begin
43078>>>>>>>>>                Function_Return asWorkspaceFiles
43079>>>>>>>>>            End                                 
43079>>>>>>>>>>
43079>>>>>>>>>            
43079>>>>>>>>>            Repeat
43079>>>>>>>>>>
43079>>>>>>>>>                Readln channel iCh sFile
43081>>>>>>>>>                If (Trim(sFile) <> "") Begin
43083>>>>>>>>>                    Move sFile to asWorkspaceFiles[SizeOfArray(asWorkspaceFiles)]
43084>>>>>>>>>                End
43084>>>>>>>>>>
43084>>>>>>>>>            Until (SeqEof = True)
43086>>>>>>>>>            Send Seq_Close_Channel iCh
43087>>>>>>>>>        End
43087>>>>>>>>>>
43087>>>>>>>>>        
43087>>>>>>>>>        Function_Return asWorkspaceFiles
43088>>>>>>>>>    End_Function
43089>>>>>>>>>
43089>>>>>>>>>End_Class
43090>>>>>>>Use cDbUpdateDatabaseDriver.pkg
43090>>>>>>>Use vWin32fh.pkg
43090>>>>>>>
43090>>>>>>>// The cConnection class is the new SQL connections class for DF 19.
43090>>>>>>>// If an object of the cConnection class hasn't been instantiated we use a "dummy" class in its place.
43090>>>>>>>    Use cConnectionDUF.pkg
Including file: cConnectionDUF.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cConnectionDUF.pkg)
43090>>>>>>>>>// * Dummy class * that will only be used if DF 18.2 or less.
43090>>>>>>>>>//
43090>>>>>>>>>// The cConnection class is new to DF 19 and that DF 19 package/class
43090>>>>>>>>>// will be used automatically instead of this package
43090>>>>>>>>>// if the current DF version is 19 and up _and_ the class
43090>>>>>>>>>// has been instantianted in the cApplication object.
43090>>>>>>>>>//
43090>>>>>>>>>// If an object of the original cConnection class is placed in
43090>>>>>>>>>// the cApplication, that connection logic will be used instead
43090>>>>>>>>>// of the Database Update Framework's SQLConnections logic. Or more
43090>>>>>>>>>// correctly; "Managed Connection" settings will be read and applied
43090>>>>>>>>>// instead of those defined in the framework's SQLConnections.ini file.
43090>>>>>>>>>//
43090>>>>>>>>>Struct tConnection
43090>>>>>>>>>    String sId                // connection id
43090>>>>>>>>>    String sString            // server-string as added via the ini file
43090>>>>>>>>>    String sUID               // User Id
43090>>>>>>>>>    String sPWD               // non-encrypted password
43090>>>>>>>>>    Boolean bTrustedConnection // Trusted connection
43090>>>>>>>>>    Integer iOptions          // connection ID options (don't use)
43090>>>>>>>>>    String sDriver            // name of driver
43090>>>>>>>>>    Integer iDriverIndex      // loaded driver index (is 1 based, 0 if none)
43090>>>>>>>>>    String sConnectionString  // Full connection string assembled from various strings
43090>>>>>>>>>    String sSection           // this is usually the section name as it appears
43090>>>>>>>>>                              // in the connections ini file (e.g., [Connection1])
43090>>>>>>>>>    Boolean bDisabled         // if set, this is not an active Id
43090>>>>>>>>>End_Struct
43090>>>>>>>>>
43090>>>>>>>>>
43090>>>>>>>>>Class cConnection is a cObject
43091>>>>>>>>>
43091>>>>>>>>>    Procedure Construct_Object
43093>>>>>>>>>        Forward Send Construct_Object
43095>>>>>>>>>
43095>>>>>>>>>    End_Procedure
43096>>>>>>>>>
43096>>>>>>>>>    Function ConnectionIdInfo Returns tConnection
43098>>>>>>>>>        tConnection Connection
43098>>>>>>>>>        tConnection Connection
43098>>>>>>>>>        Function_Return Connection
43099>>>>>>>>>    End_Function
43100>>>>>>>>>
43100>>>>>>>>>    Function IsConnectionIdLoggedIn Returns Boolean
43102>>>>>>>>>        Function_Return False
43103>>>>>>>>>    End_Function
43104>>>>>>>>>
43104>>>>>>>>>    Function LoginConnectionId Returns String
43106>>>>>>>>>        Function_Return ""
43107>>>>>>>>>    End_Function
43108>>>>>>>>>
43108>>>>>>>>>    // get array of managed connections across all drivers
43108>>>>>>>>>    // returns array of connections in tConnection.
43108>>>>>>>>>    Function ConnectionIDs Returns tConnection[]
43110>>>>>>>>>        tConnection[] Connections
43110>>>>>>>>>        tConnection[] Connections
43111>>>>>>>>>        Function_Return Connections
43112>>>>>>>>>    End_Function
43113>>>>>>>>>
43113>>>>>>>>>    Function ConnectionIdIndex String sConnectionID Returns Integer
43115>>>>>>>>>        Function_Return 0
43116>>>>>>>>>    End_Function
43117>>>>>>>>>
43117>>>>>>>>>    Function RedirectConnectionId String sConnectionID String sServer String sUserId String sPw Boolean bTrusted Boolean bKeepOpen Returns Boolean
43119>>>>>>>>>        Function_Return False
43120>>>>>>>>>    End_Function
43121>>>>>>>>>
43121>>>>>>>>>End_Class
43122>>>>>>>
43122>>>>>>>// We're making references to this object handle so we need it defined
43122>>>>>>>// here as well as for the cDbUpdateHandler class
43122>>>>>>>
43122>>>>>>>    Global_Variable Handle ghoSQLConnectionHandler
43122>>>>>>>    Move 0 to ghoSQLConnectionHandler
43123>>>>>>>
43123>>>>>>>Class cSQLConnectionHandler is a cObject
43124>>>>>>>
43124>>>>>>>    Procedure Construct_Object
43126>>>>>>>        Handle ho
43126>>>>>>>        Forward Send Construct_Object
43128>>>>>>>        Move Self to ghoSQLConnectionHandler
43129>>>>>>>
43129>>>>>>>        Property Handle phoSQLConnectionIniFile 
43130>>>>>>>        Get  Create (RefClass(cSQLConnectionIniFile)) to ho
43131>>>>>>>        Set Name of ho to "oSQLConnectionIniFile"
43132>>>>>>>        Set phoSQLConnectionIniFile to ho
43133>>>>>>>        
43133>>>>>>>
43133>>>>>>>        // These properties are used by the cDbUpdateVersion and cDbUpdateFunctionLibrary classes,
43133>>>>>>>        // but put here so they can be set/get in both class objects. Those classes has "relay"
43133>>>>>>>        // methods to this class.
43133>>>>>>>        Property Boolean pbUseConnectionID True
43134>>>>>>>        Property Boolean pbToANSI          True
43135>>>>>>>        Property Boolean pbRecnum          True
43136>>>>>>>        Property Boolean pbCopyData        True
43137>>>>>>>        Property Boolean pbApiTableUpdateAuto    False
43138>>>>>>>        Property Boolean pbCompareDate_DateTime  False
43139>>>>>>>        Property Boolean pbCompareIndexAscending False
43140>>>>>>>        Property Boolean pbCompareIndexUppercase False
43141>>>>>>>
43141>>>>>>>        // Driver default value settings:
43141>>>>>>>        // Note: When the object is created the corresponding values
43141>>>>>>>        // from the driver .int files are read.
43141>>>>>>>        // Sample: Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_NUMERIC of {driverNumber} to {StringVariable}
43141>>>>>>>        Property String psDriverDefaultValueASCII    ""
43142>>>>>>>        Property String psDriverDefaultValueBinary   ""
43143>>>>>>>        Property String psDriverDefaultValueDate     ""
43144>>>>>>>        Property String psDriverDefaultValueDateTime ""
43145>>>>>>>        Property String psDriverDefaultValueNumeric  ""
43146>>>>>>>        Property String psDriverDefaultValueText     ""
43147>>>>>>>
43147>>>>>>>        // Driver "nullability" settings:
43147>>>>>>>        // Note: When the object is created the corresponding values
43147>>>>>>>        // from the driver .int files are read.
43147>>>>>>>        // Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_ASCII of {driverNumber} to {BooleanVariable}
43147>>>>>>>        Property Boolean pbDriverDefaultNullableASCII    False
43148>>>>>>>        Property Boolean pbDriverDefaultNullableBinary   False
43149>>>>>>>        Property Boolean pbDriverDefaultNullableDate     False
43150>>>>>>>        Property Boolean pbDriverDefaultNullableDateTime False
43151>>>>>>>        Property Boolean pbDriverDefaultNullableNumeric  False
43152>>>>>>>        Property Boolean pbDriverDefaultNullableText     False
43153>>>>>>>
43153>>>>>>>        // *** This is the central point of connection data for the Database Update Framework ***
43153>>>>>>>        //     It is private because the get/set version also updates the DAW
43153>>>>>>>        //     driver interfaces.
43153>>>>>>>        //     There are also procedure/function pairs to set/get individual data members
43153>>>>>>>        //     of the struct they are all routed throu this struct property.
43153>>>>>>>        Property tSQLConnection Private.pSQLConnection
43154>>>>>>>
43154>>>>>>>    End_Procedure
43155>>>>>>>
43155>>>>>>>    Procedure End_Construct_Object
43157>>>>>>>        tSQLConnection SQLConnection
43157>>>>>>>        tSQLConnection SQLConnection
43157>>>>>>>
43157>>>>>>>        Forward Send End_Construct_Object
43159>>>>>>>
43159>>>>>>>        // Now is the time to read and apply SQL connection settings.
43159>>>>>>>        Get SetupSQLConnection True True to SQLConnection
43160>>>>>>>        Set Private.pSQLConnection to SQLConnection
43161>>>>>>>    End_Procedure
43162>>>>>>>
43162>>>>>>>    // *** Properties ***
43162>>>>>>>    // All connection related "properties" (get/set pairs) are really done by changing the
43162>>>>>>>    // private.pSQLConnection struct connection property. These "properties" are
43162>>>>>>>    // merely here for conveniance.
43162>>>>>>>    //
43162>>>>>>>    // The pSQLConnection get/set are here so we have a "central hub"
43162>>>>>>>    // where we update data to/from the DAW driver interfaces and this framework.
43162>>>>>>>    // This struct property contains all the connection data.
43162>>>>>>>    //
43162>>>>>>>    Procedure Set pSQLConnection tSQLConnection SQLConnection
43164>>>>>>>        Boolean bOK
43164>>>>>>>
43164>>>>>>>        Set Private.pSQLConnection to SQLConnection
43165>>>>>>>
43165>>>>>>>        // When starting a program we might not have a connection id yet:
43165>>>>>>>        If (SQLConnection.sDriverID = DATAFLEX_ID) Begin
43167>>>>>>>//        If (SQLConnection.sConnectionID = "" or SQLConnection.sDriverID = DATAFLEX_ID) Begin
43167>>>>>>>            Procedure_Return
43168>>>>>>>        End
43168>>>>>>>>
43168>>>>>>>
43168>>>>>>>        // If a DAW DFConnId.ini file was read instead of the DUF SQLConnections.ini file we should by now
43168>>>>>>>        // be logged in already and don't want to do it again.
43168>>>>>>>        If (SQLConnection.bDAWConnection = False) Begin
43170>>>>>>>            // After we have set the class property we need to tell the DAW
43170>>>>>>>            // driver interfaces about the change & make a new login.
43170>>>>>>>            Get SQLLogin SQLConnection to bOK
43171>>>>>>>            If (bOK = False) Begin
43173>>>>>>>                Error DFERR_PROGRAM "Login error."
43174>>>>>>>>
43174>>>>>>>            End
43174>>>>>>>>
43174>>>>>>>        End
43174>>>>>>>>
43174>>>>>>>
43174>>>>>>>        // Now is the time to setup our driver default values by reading the driver .int file:
43174>>>>>>>        Send SetupDriverDefaults SQLConnection.sDriverID
43175>>>>>>>
43175>>>>>>>    End_Procedure
43176>>>>>>>
43176>>>>>>>    // Similar to _SqlCheckCurrentDriver but generates no error and it doesn't
43176>>>>>>>    // attempt to load the driver.
43176>>>>>>>    // Returns true if the passed driver is SQL based.
43176>>>>>>>    Function IsSQLDriver String sDriverID Returns Boolean
43178>>>>>>>        Boolean bOK
43178>>>>>>>        Get IsDAWSQLDriver sDriverID to bOK
43179>>>>>>>        Function_Return bOK
43180>>>>>>>    End_Function
43181>>>>>>>
43181>>>>>>>    // Reads the driver .int file and sets class properties of the cDbUpdateFunctionLibrary accordingly.
43181>>>>>>>    Procedure SetupDriverDefaults String sDriverID
43183>>>>>>>        String sAttributeValue sServer
43183>>>>>>>        Integer iDriverID
43183>>>>>>>        Boolean bNULL bSQLDriver
43183>>>>>>>        Handle hDatabase
43183>>>>>>>        
43183>>>>>>>        Get IsSQLDriver sDriverID to bSQLDriver
43184>>>>>>>        If (bSQLDriver = False) Begin
43186>>>>>>>            Procedure_Return
43187>>>>>>>        End                                      
43187>>>>>>>>
43187>>>>>>>        
43187>>>>>>>        Get DriverIndex sDriverID to iDriverID  
43188>>>>>>>        
43188>>>>>>>        // ToDo: Testing!
43188>>>>>>>//        Get psServer of ghoDbUpdateFunctionLibrary to sServer
43188>>>>>>>//        Get SqlUtilDatabaseHandle of ghoDbUpdateFunctionLibrary sDriverID sServer to hDatabase
43188>>>>>>>//        Set_Attribute DF_DATABASE_IGNORE_WARNINGS of iDriverID hDatabase to True 
43188>>>>>>>
43188>>>>>>>        // Driver default values for various data types:
43188>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_ASCII of iDriverID      to sAttributeValue
43191>>>>>>>        Set psDriverDefaultValueASCII                                   to sAttributeValue
43192>>>>>>>
43192>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_BINARY of iDriverID     to sAttributeValue
43195>>>>>>>        Set psDriverDefaultValueBinary                                  to sAttributeValue
43196>>>>>>>
43196>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_DATE of iDriverID       to sAttributeValue
43199>>>>>>>        Set psDriverDefaultValueDate                                    to sAttributeValue
43200>>>>>>>
43200>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_DATETIME of iDriverID   to sAttributeValue
43203>>>>>>>        Set psDriverDefaultValueDateTime                                to sAttributeValue
43204>>>>>>>
43204>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_NUMERIC of iDriverID    to sAttributeValue
43207>>>>>>>        Set psDriverDefaultValueNumeric                                 to sAttributeValue
43208>>>>>>>
43208>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_TEXT of iDriverID       to sAttributeValue
43211>>>>>>>        Set psDriverDefaultValueText                                    to sAttributeValue
43212>>>>>>>
43212>>>>>>>        // The default setting for the "nullability" of newly created ASCII columns.
43212>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_ASCII      of iDriverID to bNULL
43215>>>>>>>        Set pbDriverDefaultNullableASCII to bNULL
43216>>>>>>>
43216>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_BINARY     of iDriverID to bNULL
43219>>>>>>>        Set pbDriverDefaultNullableBinary to bNULL
43220>>>>>>>
43220>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_DATE       of iDriverID to bNULL
43223>>>>>>>        Set pbDriverDefaultNullableDate to bNULL
43224>>>>>>>
43224>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_DATETIME   of iDriverID to bNULL
43227>>>>>>>        Set pbDriverDefaultNullableDateTime to bNULL
43228>>>>>>>
43228>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_NUMERIC    of iDriverID to bNULL
43231>>>>>>>        Set pbDriverDefaultNullableNumeric to bNULL
43232>>>>>>>
43232>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_TEXT       of iDriverID to bNULL
43235>>>>>>>        Set pbDriverDefaultNullableText to bNULL
43236>>>>>>>
43236>>>>>>>    End_Procedure
43237>>>>>>>
43237>>>>>>>    Function SQLLogin tSQLConnection SQLConnection Returns Boolean
43239>>>>>>>        Boolean bOK bIsDaw
43239>>>>>>>        String sConnectionString
43239>>>>>>>        Handle hoErrorObj hoDriver hoIniFile
43239>>>>>>>        Integer iDriverID
43239>>>>>>>
43239>>>>>>>        Move False to bOK
43240>>>>>>>        Get IsDAWSQLDriver SQLConnection.sDriverID to bIsDaw
43241>>>>>>>
43241>>>>>>>        Get phoSQLConnectionIniFile to hoIniFile
43242>>>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to sConnectionString
43243>>>>>>>        Get DriverIndex SQLConnection.sDriverID to iDriverID
43244>>>>>>>        If (iDriverID = 0) Begin
43246>>>>>>>            Move hoErrorObj to Error_Object_Id
43247>>>>>>>            Function_Return False
43248>>>>>>>        End
43248>>>>>>>>
43248>>>>>>>
43248>>>>>>>        Set_Attribute DF_DRIVER_SILENT_LOGIN of iDriverID to SQLConnection.bSilentLogin
43251>>>>>>>        Get Create (RefClass(cDbUpdateDatabaseDriver)) to hoDriver
43252>>>>>>>        Set psDriverID of hoDriver to SQLConnection.sDriverID
43253>>>>>>>        Get DbLogin    of hoDriver sConnectionString SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to bOK
43254>>>>>>>        Send Destroy   of hoDriver
43255>>>>>>>
43255>>>>>>>        Function_Return bOK
43256>>>>>>>    End_Function
43257>>>>>>>
43257>>>>>>>    Function pSQLConnection Returns tSQLConnection
43259>>>>>>>        tSQLConnection SQLConnection
43259>>>>>>>        tSQLConnection SQLConnection
43259>>>>>>>        Get Private.pSQLConnection to SQLConnection
43260>>>>>>>        Function_Return SQLConnection
43261>>>>>>>    End_Function
43262>>>>>>>
43262>>>>>>>    Procedure Set psConnectionID String sValue
43264>>>>>>>        tSQLConnection SQLConnection
43264>>>>>>>        tSQLConnection SQLConnection
43264>>>>>>>
43264>>>>>>>        Get Private.pSQLConnection to SQLConnection
43265>>>>>>>        If (SQLConnection.sConnectionID = "") Begin
43267>>>>>>>            Move sValue to SQLConnection.sConnectionID
43268>>>>>>>        End
43268>>>>>>>>
43268>>>>>>>
43268>>>>>>>        // Else we might want to change the current connection ID
43268>>>>>>>        Else If (SQLConnection.sConnectionID <> "" and SQLConnection.sConnectionID <> sValue) Begin
43271>>>>>>>            Move False to Err
43272>>>>>>>            Logout SQLConnection.sDriverID
43273>>>>>>>            // This will also make a login to the new server.
43273>>>>>>>            Get SQLIniFileConnectionID of (phoSQLConnectionIniFile(Self)) sValue to SQLConnection
43274>>>>>>>        End
43274>>>>>>>>
43274>>>>>>>        Set pSQLConnection to SQLConnection
43275>>>>>>>    End_Procedure
43276>>>>>>>
43276>>>>>>>    Function psConnectionID Returns String
43278>>>>>>>        tSQLConnection SQLConnection
43278>>>>>>>        tSQLConnection SQLConnection
43278>>>>>>>        Get Private.pSQLConnection to SQLConnection
43279>>>>>>>        Function_Return SQLConnection.sConnectionID
43280>>>>>>>    End_Function
43281>>>>>>>
43281>>>>>>>    // Note: If the psDriverID + other connection properties are to be changed,
43281>>>>>>>    //       the psDriverID *must* be the first property that is changed!
43281>>>>>>>    //       Otherwise errors might be raised by the driver when e.g. the format
43281>>>>>>>    //       for a connection string has the wrong format for that driver.
43281>>>>>>>    Procedure Set psDriverID String sValue
43283>>>>>>>        tSQLConnection SQLConnection
43283>>>>>>>        tSQLConnection SQLConnection
43283>>>>>>>        Get pSQLConnection to SQLConnection
43284>>>>>>>        Move sValue        to SQLConnection.sDriverID
43285>>>>>>>        Set pSQLConnection to SQLConnection
43286>>>>>>>        If (sValue <> DATAFLEX_ID) Begin
43288>>>>>>>            Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43289>>>>>>>        End
43289>>>>>>>>
43289>>>>>>>    End_Procedure
43290>>>>>>>
43290>>>>>>>    Function psDriverID Returns String
43292>>>>>>>        tSQLConnection SQLConnection
43292>>>>>>>        tSQLConnection SQLConnection
43292>>>>>>>        Get Private.pSQLConnection to SQLConnection
43293>>>>>>>        If (SQLConnection.sDriverID = "") Begin
43295>>>>>>>            Move DATAFLEX_ID to SQLConnection.sDriverID // Default is the DataFlex driver.
43296>>>>>>>        End
43296>>>>>>>>
43296>>>>>>>        Function_Return SQLConnection.sDriverID
43297>>>>>>>    End_Function
43298>>>>>>>
43298>>>>>>>    Procedure Set psConnectionString String sValue
43300>>>>>>>        tSQLConnection SQLConnection
43300>>>>>>>        tSQLConnection SQLConnection
43300>>>>>>>        Get Private.pSQLConnection to SQLConnection
43301>>>>>>>        Move sValue        to SQLConnection.sConnectionString
43302>>>>>>>        Set pSQLConnection to SQLConnection
43303>>>>>>>    End_Procedure
43304>>>>>>>
43304>>>>>>>    Function psConnectionString Returns String
43306>>>>>>>        tSQLConnection SQLConnection
43306>>>>>>>        tSQLConnection SQLConnection
43306>>>>>>>        Get Private.pSQLConnection to SQLConnection
43307>>>>>>>        Function_Return SQLConnection.sConnectionString
43308>>>>>>>    End_Function
43309>>>>>>>
43309>>>>>>>    Procedure Set psServer String sValue
43311>>>>>>>        tSQLConnection SQLConnection
43311>>>>>>>        tSQLConnection SQLConnection
43311>>>>>>>        Get Private.pSQLConnection to SQLConnection
43312>>>>>>>        Move sValue        to SQLConnection.sServer
43313>>>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43314>>>>>>>        Set pSQLConnection to SQLConnection
43315>>>>>>>    End_Procedure
43316>>>>>>>
43316>>>>>>>    Function psServer Returns String
43318>>>>>>>        tSQLConnection SQLConnection
43318>>>>>>>        tSQLConnection SQLConnection
43318>>>>>>>        Get Private.pSQLConnection to SQLConnection
43319>>>>>>>        Function_Return SQLConnection.sServer
43320>>>>>>>    End_Function
43321>>>>>>>
43321>>>>>>>    Procedure Set psDatabase String sValue
43323>>>>>>>        tSQLConnection SQLConnection
43323>>>>>>>        tSQLConnection SQLConnection
43323>>>>>>>        Get Private.pSQLConnection to SQLConnection
43324>>>>>>>        Move sValue        to SQLConnection.sDatabase
43325>>>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43326>>>>>>>        Set pSQLConnection to SQLConnection
43327>>>>>>>    End_Procedure
43328>>>>>>>
43328>>>>>>>    Function psDatabase Returns String
43330>>>>>>>        tSQLConnection SQLConnection
43330>>>>>>>        tSQLConnection SQLConnection
43330>>>>>>>        Get Private.pSQLConnection to SQLConnection
43331>>>>>>>        Function_Return SQLConnection.sDatabase
43332>>>>>>>    End_Function
43333>>>>>>>
43333>>>>>>>    Procedure Set psUserID String sValue
43335>>>>>>>        tSQLConnection SQLConnection
43335>>>>>>>        tSQLConnection SQLConnection
43335>>>>>>>        Get Private.pSQLConnection to SQLConnection
43336>>>>>>>        Move sValue        to SQLConnection.sUserID
43337>>>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43338>>>>>>>        Set pSQLConnection to SQLConnection
43339>>>>>>>    End_Procedure
43340>>>>>>>
43340>>>>>>>    Function psUserID Returns String
43342>>>>>>>        tSQLConnection SQLConnection
43342>>>>>>>        tSQLConnection SQLConnection
43342>>>>>>>        Get Private.pSQLConnection to SQLConnection
43343>>>>>>>        Function_Return SQLConnection.sUserID
43344>>>>>>>    End_Function
43345>>>>>>>
43345>>>>>>>    // This is the uncrypted password
43345>>>>>>>    Procedure Set psPassword String sValue
43347>>>>>>>        tSQLConnection SQLConnection
43347>>>>>>>        tSQLConnection SQLConnection
43347>>>>>>>        Get Private.pSQLConnection to SQLConnection
43348>>>>>>>        Move sValue        to SQLConnection.sPassword
43349>>>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43350>>>>>>>        Set pSQLConnection to SQLConnection
43351>>>>>>>    End_Procedure
43352>>>>>>>
43352>>>>>>>    Function psPassword Returns String
43354>>>>>>>        tSQLConnection SQLConnection
43354>>>>>>>        tSQLConnection SQLConnection
43354>>>>>>>        Get Private.pSQLConnection to SQLConnection
43355>>>>>>>        Function_Return SQLConnection.sPassword
43356>>>>>>>    End_Function
43357>>>>>>>
43357>>>>>>>    Procedure Set pbTrusted Boolean bValue
43359>>>>>>>        tSQLConnection SQLConnection
43359>>>>>>>        tSQLConnection SQLConnection
43359>>>>>>>        Get Private.pSQLConnection to SQLConnection
43360>>>>>>>        Move bValue        to SQLConnection.bTrusted
43361>>>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43362>>>>>>>        Set pSQLConnection to SQLConnection
43363>>>>>>>    End_Procedure
43364>>>>>>>
43364>>>>>>>    Function pbTrusted Returns Boolean
43366>>>>>>>        tSQLConnection SQLConnection
43366>>>>>>>        tSQLConnection SQLConnection
43366>>>>>>>        Get Private.pSQLConnection to SQLConnection
43367>>>>>>>        Function_Return SQLConnection.bTrusted
43368>>>>>>>    End_Function
43369>>>>>>>
43369>>>>>>>    // *** All of these properties are special to the Database Update Framework ***
43369>>>>>>>    //     Thus they are not propagated to the DAW classes and that is why
43369>>>>>>>    //     the Private.pSQLConnection property is set instead of the going throu
43369>>>>>>>    //     the central pSQLConnection "hub".
43369>>>>>>>    Procedure Set pbSilentLogin Boolean bValue
43371>>>>>>>        tSQLConnection SQLConnection
43371>>>>>>>        tSQLConnection SQLConnection
43371>>>>>>>        Get Private.pSQLConnection to SQLConnection
43372>>>>>>>        Move bValue to SQLConnection.bTrusted
43373>>>>>>>        Set Private.pSQLConnection to SQLConnection
43374>>>>>>>    End_Procedure
43375>>>>>>>
43375>>>>>>>    Function pbSilentLogin Returns Boolean
43377>>>>>>>        tSQLConnection SQLConnection
43377>>>>>>>        tSQLConnection SQLConnection
43377>>>>>>>        Get Private.pSQLConnection to SQLConnection
43378>>>>>>>        Function_Return SQLConnection.bSilentLogin
43379>>>>>>>    End_Function
43380>>>>>>>
43380>>>>>>>    Procedure Set piDbType Integer iValue
43382>>>>>>>        tSQLConnection SQLConnection
43382>>>>>>>        tSQLConnection SQLConnection
43382>>>>>>>        Get Private.pSQLConnection to SQLConnection
43383>>>>>>>        Move iValue to SQLConnection.iDbType
43384>>>>>>>        Set Private.pSQLConnection to SQLConnection
43385>>>>>>>    End_Procedure
43386>>>>>>>
43386>>>>>>>    Function piDbType Returns Integer
43388>>>>>>>        tSQLConnection SQLConnection
43388>>>>>>>        tSQLConnection SQLConnection
43388>>>>>>>        Get Private.pSQLConnection to SQLConnection
43389>>>>>>>        Function_Return SQLConnection.iDbType
43390>>>>>>>    End_Function
43391>>>>>>>
43391>>>>>>>    Procedure Set psBaseTableSpace String sValue
43393>>>>>>>        tSQLConnection SQLConnection
43393>>>>>>>        tSQLConnection SQLConnection
43393>>>>>>>        Get Private.pSQLConnection to SQLConnection
43394>>>>>>>        Move sValue to SQLConnection.sBaseTableSpace
43395>>>>>>>        Set Private.pSQLConnection to SQLConnection
43396>>>>>>>    End_Procedure
43397>>>>>>>
43397>>>>>>>    Function psBaseTableSpace Returns String
43399>>>>>>>        tSQLConnection SQLConnection
43399>>>>>>>        tSQLConnection SQLConnection
43399>>>>>>>        Get Private.pSQLConnection to SQLConnection
43400>>>>>>>        Function_Return SQLConnection.sBaseTableSpace
43401>>>>>>>    End_Function
43402>>>>>>>
43402>>>>>>>    Procedure Set psIndexTableSpace String sValue
43404>>>>>>>        tSQLConnection SQLConnection
43404>>>>>>>        tSQLConnection SQLConnection
43404>>>>>>>        Get Private.pSQLConnection to SQLConnection
43405>>>>>>>        Move sValue to SQLConnection.sIndexTableSpace
43406>>>>>>>        Set Private.pSQLConnection to SQLConnection
43407>>>>>>>    End_Procedure
43408>>>>>>>
43408>>>>>>>    Function psIndexTableSpace Returns String
43410>>>>>>>        tSQLConnection SQLConnection
43410>>>>>>>        tSQLConnection SQLConnection
43410>>>>>>>        Get Private.pSQLConnection to SQLConnection
43411>>>>>>>        Function_Return SQLConnection.sIndexTableSpace
43412>>>>>>>    End_Function
43413>>>>>>>
43413>>>>>>>    Procedure Set psLongTableSpace String sValue
43415>>>>>>>        tSQLConnection SQLConnection
43415>>>>>>>        tSQLConnection SQLConnection
43415>>>>>>>        Get Private.pSQLConnection to SQLConnection
43416>>>>>>>        Move sValue to SQLConnection.sLongTableSpace
43417>>>>>>>        Set Private.pSQLConnection to SQLConnection
43418>>>>>>>    End_Procedure
43419>>>>>>>
43419>>>>>>>    Function psLongTableSpace Returns String
43421>>>>>>>        tSQLConnection SQLConnection
43421>>>>>>>        tSQLConnection SQLConnection
43421>>>>>>>        Get Private.pSQLConnection to SQLConnection
43422>>>>>>>        Function_Return SQLConnection.sLongTableSpace
43423>>>>>>>    End_Function
43424>>>>>>>
43424>>>>>>>    Procedure Set psSchema String sValue
43426>>>>>>>        tSQLConnection SQLConnection
43426>>>>>>>        tSQLConnection SQLConnection
43426>>>>>>>        Get Private.pSQLConnection to SQLConnection
43427>>>>>>>        Move sValue to SQLConnection.sSchema
43428>>>>>>>        Set Private.pSQLConnection to SQLConnection
43429>>>>>>>    End_Procedure
43430>>>>>>>
43430>>>>>>>    Function psSchema Returns String
43432>>>>>>>        tSQLConnection SQLConnection
43432>>>>>>>        tSQLConnection SQLConnection
43432>>>>>>>        Get Private.pSQLConnection to SQLConnection
43433>>>>>>>        Function_Return SQLConnection.sSchema
43434>>>>>>>    End_Function
43435>>>>>>>
43435>>>>>>>    Procedure Set pbEnabled Boolean bValue
43437>>>>>>>        tSQLConnection SQLConnection
43437>>>>>>>        tSQLConnection SQLConnection
43437>>>>>>>        Get Private.pSQLConnection to SQLConnection
43438>>>>>>>        Move bValue to SQLConnection.bEnabled
43439>>>>>>>        Set Private.pSQLConnection to SQLConnection
43440>>>>>>>    End_Procedure
43441>>>>>>>
43441>>>>>>>    Function pbEnabled Returns Boolean
43443>>>>>>>        tSQLConnection SQLConnection
43443>>>>>>>        tSQLConnection SQLConnection
43443>>>>>>>        Get Private.pSQLConnection to SQLConnection
43444>>>>>>>        Function_Return SQLConnection.bEnabled
43445>>>>>>>    End_Function
43446>>>>>>>
43446>>>>>>>
43446>>>>>>>    // ************************************
43446>>>>>>>    Function SetupSQLConnection Boolean bReadDFConnSettings Boolean bReadSQLConnections Returns tSQLConnection
43448>>>>>>>        tSQLConnection SQLConnection
43448>>>>>>>        tSQLConnection SQLConnection
43448>>>>>>>
43448>>>>>>>        // If this object was created by the cDbUpdateHandler class we will
43448>>>>>>>        // deferr reading SQL connection values until later.
43448>>>>>>>        If (bReadDFConnSettings = True) Begin
43450>>>>>>>            // This is the new SQL login logic for DF 19 and up; "Managed Connections"
43450>>>>>>>            If (ghoConnection > 0) Begin
43452>>>>>>>                Get ReadcConnections to SQLConnection
43453>>>>>>>            End
43453>>>>>>>>
43453>>>>>>>
43453>>>>>>>            // In addition to the above; there might be other values set even if a cConnection
43453>>>>>>>            // object is used.
43453>>>>>>>            If (bReadSQLConnections = True) Begin
43455>>>>>>>                Get ReadSQLConnectionsIniSettings to SQLConnection
43456>>>>>>>            End
43456>>>>>>>>
43456>>>>>>>        End
43456>>>>>>>>
43456>>>>>>>
43456>>>>>>>        Function_Return SQLConnection
43457>>>>>>>    End_Function
43458>>>>>>>
43458>>>>>>>    // This is for the new cConnection class used by DF 19 and up (only).
43458>>>>>>>    Function ReadcConnections Returns tSQLConnection
43460>>>>>>>        tConnection Connection
43460>>>>>>>        tConnection Connection
43460>>>>>>>        tSQLConnection SQLConnection SQLConnectionEmpty
43460>>>>>>>        tSQLConnection SQLConnection SQLConnectionEmpty
43460>>>>>>>        Integer iRetval iDbType
43460>>>>>>>        Boolean bOK bConnected
43460>>>>>>>        String sConnectionID
43460>>>>>>>
43460>>>>>>>
43460>>>>>>>        Function_Return SQLConnection
43461>>>>>>>    End_Function
43462>>>>>>>
43462>>>>>>>    // Returns True if the psConnectionID has been set in the cDbUpateHandler object,
43462>>>>>>>    // or the DAW cConnect array of registered connection only contains one active/enabled
43462>>>>>>>    // connection id for a particular driver.
43462>>>>>>>    // So either the psConnectionID or the psDriverID can have been set in the cDbUpdateHandler
43462>>>>>>>    // object. We can then match a connection id from the DAW cConnect class array.
43462>>>>>>>    // Returns False if there are multiple connections that are enabled or the psConnectionID has
43462>>>>>>>    // been set in the cDbUpdateHandler object but it cannot be found amongst the registered
43462>>>>>>>    // connections of the DAW cConnect class.
43462>>>>>>>    Function IsSinglecConnection String ByRef sConnectionID Returns Boolean
43464>>>>>>>        tConnection[] ConnIdArray
43464>>>>>>>        tConnection[] ConnIdArray
43465>>>>>>>        Integer iCount iSize iConnectionIDCounter
43465>>>>>>>        Boolean bEnabled bFound
43465>>>>>>>        String sConnectionID2 sDriverID sDriverConn
43465>>>>>>>
43465>>>>>>>        Move False to bFound
43466>>>>>>>        If (ghoConnection > 0) Begin
43468>>>>>>>
43468>>>>>>>            // The property of the cDbUpdateHandler container object
43468>>>>>>>            Get psDriverID to sDriverID
43469>>>>>>>
43469>>>>>>>            Move 0 to iConnectionIDCounter
43470>>>>>>>            // This is the the DAW cConnect array with all registered connection id's.
43470>>>>>>>            Move (SizeOfArray(ConnIdArray)) to iSize
43471>>>>>>>            Decrement iSize
43472>>>>>>>            For iCount from 0 to iSize
43478>>>>>>>>
43478>>>>>>>                Move ConnIdArray[iCount].sDriver to sDriverConn
43479>>>>>>>                Move ConnIdArray[iCount].sId to sConnectionID2
43480>>>>>>>                Move (ConnIdArray[iCount].bDisabled = False) to bEnabled
43481>>>>>>>                // If no psConnectionID specified in the cDbUpdateHandler, we check if there is a driver
43481>>>>>>>                // connection in the DAW cConnect object _and_ that there is only one!
43481>>>>>>>                If (sConnectionID = "") Begin
43483>>>>>>>                    Move (sDriverID = sDriverConn and bEnabled = True) to bFound
43484>>>>>>>                End
43484>>>>>>>>
43484>>>>>>>                Else Begin
43485>>>>>>>                    If (Uppercase(sConnectionID) = Uppercase(sConnectionID2)) Begin
43487>>>>>>>                        Move iSize to iCount // Then we've found what we were looking for and we're out of here...
43488>>>>>>>                    End
43488>>>>>>>>
43488>>>>>>>                End
43488>>>>>>>>
43488>>>>>>>
43488>>>>>>>                If (bFound = True) Begin
43490>>>>>>>                    Increment iConnectionIDCounter
43491>>>>>>>                End
43491>>>>>>>>
43491>>>>>>>            Loop
43492>>>>>>>>
43492>>>>>>>            Move (iConnectionIDCounter <= 1 and sDriverConn <> "" and sConnectionID2 <> "") to bFound
43493>>>>>>>            If (bFound = True) Begin
43495>>>>>>>                Move sConnectionID2 to sConnectionID
43496>>>>>>>            End
43496>>>>>>>>
43496>>>>>>>        End
43496>>>>>>>>
43496>>>>>>>
43496>>>>>>>        // Special case; a cConnection object has been setup in the cApplication,
43496>>>>>>>        // but no DFConn.ini record has been created.
43496>>>>>>>        If (iSize = -1) Begin
43498>>>>>>>            Move True to bFound
43499>>>>>>>        End
43499>>>>>>>>
43499>>>>>>>
43499>>>>>>>        Function_Return bFound
43500>>>>>>>    End_Function
43501>>>>>>>
43501>>>>>>>    // Send on object creation to read the default connection string settings, and
43501>>>>>>>    // create a connection to the server.
43501>>>>>>>    Function ReadSQLConnectionsIniSettings Returns tSQLConnection
43503>>>>>>>        String sPath sFileName
43503>>>>>>>        Boolean bExists bActive
43503>>>>>>>        tSQLConnection[] SQLConnectionArray
43503>>>>>>>        tSQLConnection[] SQLConnectionArray
43504>>>>>>>        tSQLConnection SQLConnection SQLConnectionEmpty
43504>>>>>>>        tSQLConnection SQLConnection SQLConnectionEmpty
43504>>>>>>>        Handle hoIniFile
43504>>>>>>>        Integer iSize iCount iRetval
43504>>>>>>>
43504>>>>>>>        Get psIniFilePath to sPath
43505>>>>>>>        Get phoSQLConnectionIniFile to hoIniFile
43506>>>>>>>        If (sPath = "") Begin
43508>>>>>>>            Get ApplicationPath of hoIniFile to sPath
43509>>>>>>>            Set psIniFilePath   of hoIniFile to sPath
43510>>>>>>>        End
43510>>>>>>>>
43510>>>>>>>        Get vFolderFormat sPath to sPath
43511>>>>>>>        Get psIniFileName to sFileName
43512>>>>>>>        Get vFilePathExists (sPath + sFileName) to bExists
43513>>>>>>>
43513>>>>>>>        Get SQLIniFileReadConnections of hoIniFile to SQLConnectionArray
43514>>>>>>>        Move (SizeOfArray(SQLConnectionArray)) to iSize
43515>>>>>>>        If (iSize = 0) Begin
43517>>>>>>>            // This may have been set by the "ReadcConnections" function,
43517>>>>>>>            // if a cConnection object has been setup for DataFlex 19 or later
43517>>>>>>>            // in the cApplication object.
43517>>>>>>>            Get pSQLConnection to SQLConnection
43518>>>>>>>            If (SQLConnection.sConnectionID = "") Begin
43520>>>>>>>                Function_Return SQLConnectionEmpty
43521>>>>>>>            End
43521>>>>>>>>
43521>>>>>>>            Move SQLConnection to SQLConnectionArray[0] 
43522>>>>>>>            Move 1 to iSize
43523>>>>>>>        End
43523>>>>>>>>
43523>>>>>>>
43523>>>>>>>        Move False to bActive
43524>>>>>>>        // The first connection should be the one that is active, but all connections might have been disabled.
43524>>>>>>>        Decrement iSize
43525>>>>>>>        For iCount from 0 to iSize
43531>>>>>>>>
43531>>>>>>>            Move SQLConnectionArray[iCount] to SQLConnection
43532>>>>>>>            If (SQLConnection.bEnabled = True) Begin
43534>>>>>>>                Move True to bActive
43535>>>>>>>                Move iSize to iCount // We've found the enabled item, so we're out of here.
43536>>>>>>>            End
43536>>>>>>>>
43536>>>>>>>        Loop
43537>>>>>>>>
43537>>>>>>>
43537>>>>>>>        // In case all connections have been disabled, we're out of here.
43537>>>>>>>        If (bActive = False) Begin
43539>>>>>>>            Function_Return SQLConnectionEmpty
43540>>>>>>>        End
43540>>>>>>>>
43540>>>>>>>
43540>>>>>>>        Send CreateSQLConnection SQLConnection.sDriverID SQLConnection.sConnectionID ;             SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted ;             SQLConnection.sUserID SQLConnection.sPassword SQLConnection.bSilentLogin False
43541>>>>>>>
43541>>>>>>>        Set pSQLConnection to SQLConnection
43542>>>>>>>        Get AutoSetConnectionID to iRetval
43543>>>>>>>
43543>>>>>>>        Function_Return SQLConnection
43544>>>>>>>    End_Function
43545>>>>>>>
43545>>>>>>>    Procedure Set psIniFilePath String sPath
43547>>>>>>>        Set psIniFilePath of (phoSQLConnectionIniFile(Self)) to sPath
43548>>>>>>>    End_Procedure
43549>>>>>>>
43549>>>>>>>    Function psIniFilePath Returns String
43551>>>>>>>        String sRetval
43551>>>>>>>        Get psIniFilePath of (phoSQLConnectionIniFile(Self)) to sRetval
43552>>>>>>>        Function_Return sRetval
43553>>>>>>>    End_Function
43554>>>>>>>
43554>>>>>>>    Procedure Set psIniFileName String sFileName
43556>>>>>>>        Set psIniFileName of (phoSQLConnectionIniFile(Self)) to sFileName
43557>>>>>>>    End_Procedure
43558>>>>>>>
43558>>>>>>>    Function psIniFileName Returns String
43560>>>>>>>        String sRetval
43560>>>>>>>        Get psIniFileName of (phoSQLConnectionIniFile(Self)) to sRetval
43561>>>>>>>        Function_Return sRetval
43562>>>>>>>    End_Function
43563>>>>>>>
43563>>>>>>>    Procedure Set psIniSectionName String sSection
43565>>>>>>>        Set psIniSectionName of (phoSQLConnectionIniFile(Self)) to sSection
43566>>>>>>>    End_Procedure
43567>>>>>>>
43567>>>>>>>    Function psIniSectionName Returns String
43569>>>>>>>        String sRetval
43569>>>>>>>        Get psIniSectionName of (phoSQLConnectionIniFile(Self)) to sRetval
43570>>>>>>>        Function_Return sRetval
43571>>>>>>>    End_Function
43572>>>>>>>
43572>>>>>>>    Procedure Set IniFileValue String sSection String sValueName String sValue
43574>>>>>>>        Handle ho
43574>>>>>>>        Get phoSQLConnectionIniFile to ho
43575>>>>>>>        Set IniFileValue of ho to sSection sValueName sValue
43576>>>>>>>    End_Procedure
43577>>>>>>>
43577>>>>>>>    Function IniFileValue String sSection String sValueName String sDefaultValue Returns String
43579>>>>>>>        Handle ho
43579>>>>>>>        String sRetval
43579>>>>>>>        Get phoSQLConnectionIniFile to ho
43580>>>>>>>        Get IniFileValue of ho sSection sValueName sDefaultValue to sRetval
43581>>>>>>>        Function_Return sRetval
43582>>>>>>>    End_Function
43583>>>>>>>
43583>>>>>>>    Function SectionExists String sSection Returns Boolean
43585>>>>>>>        Handle ho
43585>>>>>>>        Boolean bRetval
43585>>>>>>>        Get phoSQLConnectionIniFile to ho
43586>>>>>>>        Get SectionExists of ho sSection to bRetval
43587>>>>>>>        Function_Return bRetval
43588>>>>>>>    End_Function
43589>>>>>>>
43589>>>>>>>    Function KeyExists String sSection String sKey Returns Boolean
43591>>>>>>>        Handle ho
43591>>>>>>>        Boolean bRetval
43591>>>>>>>        Get phoSQLConnectionIniFile to ho
43592>>>>>>>        Get KeyExists of ho sSection sKey to bRetval
43593>>>>>>>        Function_Return bRetval
43594>>>>>>>    End_Function
43595>>>>>>>
43595>>>>>>>    Function EncryptPassword String sPassword Returns String
43597>>>>>>>        Handle ho
43597>>>>>>>        String sRetval
43597>>>>>>>        Get phoSQLConnectionIniFile to ho
43598>>>>>>>        Get EncryptPassword of ho sPassword to sRetval
43599>>>>>>>        Function_Return sRetval
43600>>>>>>>    End_Function
43601>>>>>>>
43601>>>>>>>    Function DecryptPassword String sPassword Returns String
43603>>>>>>>        Handle ho
43603>>>>>>>        String sRetval
43603>>>>>>>        Get phoSQLConnectionIniFile to ho
43604>>>>>>>        Get DecryptPassword of ho sPassword to sRetval
43605>>>>>>>        Function_Return sRetval
43606>>>>>>>    End_Function
43607>>>>>>>
43607>>>>>>>    // *** Main Connection Message ***
43607>>>>>>>    Procedure CreateSQLConnection String sDriverID String sConnectionID String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Boolean bSilent Boolean bExitProgram
43609>>>>>>>        Handle hoDriver
43609>>>>>>>        String sConnectionString sError
43609>>>>>>>        Boolean bLoginSuccessful
43609>>>>>>>
43609>>>>>>>        Get ConstructConnectionString sDriverID sServer sDatabase bTrusted sUserID sPassword to sConnectionString
43610>>>>>>>        Get Create (RefClass(cDbUpdateDatabaseDriver)) to hoDriver
43611>>>>>>>        Set psDriverID of hoDriver to sDriverID
43612>>>>>>>        Get DbLogin of hoDriver sConnectionString sServer sDatabase bTrusted sUserID sPassword to bLoginSuccessful
43613>>>>>>>        If (bLoginSuccessful = False) Begin
43615>>>>>>>            Error DFERR_PROGRAM (CS_DUF_CannotLoginToServer * CS_DUF_ErrorText * String(sError) + "\nConnectionID = " * sConnectionID + "\nConnection String = " * sConnectionString)   
43616>>>>>>>>
43616>>>>>>>            If (bExitProgram = True) Begin
43618>>>>>>>                Send Exit_Application
43619>>>>>>>            End
43619>>>>>>>>
43619>>>>>>>        End
43619>>>>>>>>
43619>>>>>>>        Send Destroy of hoDriver
43620>>>>>>>    End_Procedure
43621>>>>>>>
43621>>>>>>>    Function RedirectConnection String sOldConnection String sNewConnection Returns Integer
43623>>>>>>>        Integer iRetval
43623>>>>>>>        Handle hoCLI
43623>>>>>>>        String sDriverID
43623>>>>>>>
43623>>>>>>>        Get psDriverID to sDriverID
43624>>>>>>>        Get Create (Refclass(cCLIHandler)) to hoCLI
43625>>>>>>>        If (hoCLI <> 0) Begin
43627>>>>>>>            Set psDriverID of hoCLI to sDriverID
43628>>>>>>>            Get RedirectConnection of hoCLI sOldConnection sNewConnection to iRetval
43629>>>>>>>            Send Destroy of hoCLI
43630>>>>>>>        End
43630>>>>>>>>
43630>>>>>>>
43630>>>>>>>        Function_Return iRetval
43631>>>>>>>    End_Function
43632>>>>>>>
43632>>>>>>>    Procedure CreateConnParamsFromConnectionString String sDriverID String sConnectionString
43634>>>>>>>        tSQLConnection SQLConnection
43634>>>>>>>        tSQLConnection SQLConnection
43634>>>>>>>
43634>>>>>>>        Set psDriverID to sDriverID
43635>>>>>>>        Get DeComposeConnectionString sDriverID sConnectionString to SQLConnection
43636>>>>>>>        Send CreateSQLConnection SQLConnection.sDriverID SQLConnection.sConnectionID SQLConnection.sServer;                                 SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword SQLConnection.bTrusted False
43637>>>>>>>    End_Procedure
43638>>>>>>>
43638>>>>>>>    // This is needed when e.g. the connection id we have specified in the program code
43638>>>>>>>    // also exists in e.g. the MSSQLDRV.ini file (can either be local in the Data folder
43638>>>>>>>    // or the one in the DataFlex Bin folder.)
43638>>>>>>>    // We then need to delete the current one before creating a new one.
43638>>>>>>>    // This is because the parameters may differ between the program code and the
43638>>>>>>>    // MSSQLDRV.ini file in a deployed environment. Also DataFlex will generate an error
43638>>>>>>>    // when one tries to create a Connection ID that already exists.
43638>>>>>>>    Procedure RemoveExistingConnectionID String sDriverID String sConnectionID
43640>>>>>>>        Integer iResult iDriver iNumConn iConn
43640>>>>>>>        Handle hoCLI
43640>>>>>>>        String sID
43640>>>>>>>
43640>>>>>>>        If (sDriverID = "" or sConnectionID = "") Begin
43642>>>>>>>            Procedure_Return
43643>>>>>>>        End
43643>>>>>>>>
43643>>>>>>>
43643>>>>>>>        Move 0 to iResult
43644>>>>>>>        Get Create (RefClass(cCLIHandler)) to hoCLI
43645>>>>>>>        If (hoCLI <> 0) Begin
43647>>>>>>>            Set psDriverID of hoCLI to sDriverID
43648>>>>>>>            Get DriverIndex sDriverID to iDriver
43649>>>>>>>            Get_Attribute DF_DRIVER_NUMBER_CONNECTION_IDS of iDriver to iNumConn
43652>>>>>>>            Decrement iNumConn
43653>>>>>>>            For iConn from 0 to iNumConn
43659>>>>>>>>
43659>>>>>>>                Get_Attribute DF_DRIVER_CONNECTION_ID of iDriver iConn to sID
43662>>>>>>>                If (Uppercase(sID) = Uppercase(sConnectionID)) Begin
43664>>>>>>>                    Get DeleteConnectionID of hoCLI sConnectionID -1 to iResult
43665>>>>>>>                End
43665>>>>>>>>
43665>>>>>>>            Loop
43666>>>>>>>>
43666>>>>>>>            Send Destroy of hoCLI
43667>>>>>>>        End
43667>>>>>>>>
43667>>>>>>>
43667>>>>>>>    End_Procedure
43668>>>>>>>
43668>>>>>>>    Function ExistingConnectionSettings String sDriverID String sConnectionID Returns tSQLConnection
43670>>>>>>>        Integer iResult iDriver iNumConn iConn
43670>>>>>>>        Handle hoCLI
43670>>>>>>>        String sID sConnectionString sVal sDatabase
43670>>>>>>>        tSQLConnection SQLConnection
43670>>>>>>>        tSQLConnection SQLConnection
43670>>>>>>>        Boolean bTrusted
43670>>>>>>>
43670>>>>>>>        Move 0 to iResult
43671>>>>>>>        Get Create (RefClass(cCLIHandler)) to hoCLI
43672>>>>>>>        If (hoCLI <> 0) Begin
43674>>>>>>>            Set psDriverID of hoCLI to sDriverID
43675>>>>>>>            Get DriverIndex sDriverID to iDriver
43676>>>>>>>            Get_Attribute DF_DRIVER_NUMBER_CONNECTION_IDS of iDriver to iNumConn
43679>>>>>>>            Decrement iNumConn
43680>>>>>>>            For iConn from 0 to iNumConn
43686>>>>>>>>
43686>>>>>>>                Get_Attribute DF_DRIVER_CONNECTION_ID of iDriver iConn to sID
43689>>>>>>>                If (Uppercase(sID) = Uppercase(sConnectionID)) Begin
43691>>>>>>>                    Move sDriverID                                                      to SQLConnection.sDriverID      // For completeness only...
43692>>>>>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID of iDriver iConn              to SQLConnection.sConnectionID  // For completeness only...
43695>>>>>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID_STRING of iDriver iConn       to sConnectionString
43698>>>>>>>                    Move sConnectionString                                              to SQLConnection.sConnectionString
43699>>>>>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID_OPTIONS of iDriver iConn      to SQLConnection.bSilentLogin
43702>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniServerKeyword + "=")   to SQLConnection.sServer
43703>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniDatabaseKeyword + "=") to SQLConnection.sDatabase
43704>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")      to SQLConnection.sUserID
43705>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")      to SQLConnection.sPassword
43706>>>>>>>
43706>>>>>>>                    Case Begin
43706>>>>>>>                        Case (sDriverID = MSSQLDRV_ID)
43708>>>>>>>                            Get ParseKeyWord sConnectionString (CS_SQLIniTrustedKeyword + "=") to sVal
43709>>>>>>>                            Move (If(Uppercase(sVal) = Uppercase(CS_SQLIniConnectionYes), True, False)) to bTrusted
43710>>>>>>>                            Move bTrusted                                               to SQLConnection.bTrusted
43711>>>>>>>                            Case Break
43712>>>>>>>                        Case (sDriverID = DB2_DRV_ID)
43715>>>>>>>                            Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=") to SQLConnection.sServer
43716>>>>>>>                            Case Break
43717>>>>>>>                        Case (sDriverID = ODBC_DRV_ID)
43720>>>>>>>                            Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=") to SQLConnection.sServer
43721>>>>>>>                            If (SQLConnection.sServer = "") Begin
43723>>>>>>>                                Get ParseKeyWord sConnectionString (CS_SQLIniFileDSNKeyword  + "=") to SQLConnection.sServer
43724>>>>>>>                            End
43724>>>>>>>>
43724>>>>>>>                            Case Break
43725>>>>>>>                        Case Else
43725>>>>>>>                            Error ("Wrong driver ID passed:" * sDriverID)
43726>>>>>>>>
43726>>>>>>>                            Case Break
43727>>>>>>>                    Case End
43727>>>>>>>                End
43727>>>>>>>>
43727>>>>>>>            Loop
43728>>>>>>>>
43728>>>>>>>            Send Destroy of hoCLI
43729>>>>>>>        End
43729>>>>>>>>
43729>>>>>>>
43729>>>>>>>        Function_Return SQLConnection
43730>>>>>>>    End_Function
43731>>>>>>>
43731>>>>>>>    Function DriverIndex String sDriverID Returns Integer
43733>>>>>>>        String  sCurrentDriver
43733>>>>>>>        Integer iNumberOfDrivers iDriver iCount
43733>>>>>>>
43733>>>>>>>        Move 0 to iDriver
43734>>>>>>>        Move 0 to iCount
43735>>>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
43738>>>>>>>        For iCount from 1 to iNumberOfDrivers
43744>>>>>>>>
43744>>>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
43747>>>>>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriverID) ) Begin
43749>>>>>>>                Function_Return iCount
43750>>>>>>>            End
43750>>>>>>>>
43750>>>>>>>        Loop
43751>>>>>>>>
43751>>>>>>>
43751>>>>>>>        // If driver not previously loaded; attempt to do so now.
43751>>>>>>>        If (iDriver = 0) Begin
43753>>>>>>>            Move 0 to LastErr
43754>>>>>>>            Load_Driver sDriverID
43755>>>>>>>            // If driver could not be loaded.
43755>>>>>>>            If (LastErr = DFERR_CANT_LOAD_DLL) Begin
43757>>>>>>>                Move -1 to iCount
43758>>>>>>>            End
43758>>>>>>>>
43758>>>>>>>        End
43758>>>>>>>>
43758>>>>>>>        Function_Return iCount
43759>>>>>>>    End_Function
43760>>>>>>>
43760>>>>>>>    // This will update connection settings of the cCLIHandler object with that passed struct values.
43760>>>>>>>    Procedure UpdateConnectionString tSQLConnection SQLConnection
43762>>>>>>>        String sDriverID sConnectionID sServer sDatabase sUserID sPassword
43762>>>>>>>        Boolean bTrusted bSilent
43762>>>>>>>        Integer iRetval
43762>>>>>>>
43762>>>>>>>        Move SQLConnection.sDriverID     to sDriverID
43763>>>>>>>        Move SQLConnection.sConnectionID to sConnectionID
43764>>>>>>>        Move SQLConnection.sServer       to sServer
43765>>>>>>>        Move SQLConnection.sDatabase     to sDatabase
43766>>>>>>>        Move SQLConnection.bTrusted      to bTrusted
43767>>>>>>>        Move SQLConnection.sUserID       to sUserID
43768>>>>>>>        Move SQLConnection.sPassword     to sPassword
43769>>>>>>>        Move SQLConnection.bSilentLogin  to bSilent
43770>>>>>>>
43770>>>>>>>        Send CreateSQLConnection sDriverID sConnectionID sServer sDatabase bTrusted sUserID sPassword bSilent False
43771>>>>>>>        // Note that this message will first delete the current ConnectionID if it exists; which is needed by the cCLIHandler logic.
43771>>>>>>>        Get AutoSetConnectionID to iRetval
43772>>>>>>>    End_Procedure
43773>>>>>>>
43773>>>>>>>    // Called when the object is constructed.
43773>>>>>>>    // It will check the psDriverID for a ConnectionID and save it
43773>>>>>>>    // as psConnectionID property. It is later used whenever a login to
43773>>>>>>>    // the database is needed.
43773>>>>>>>    Function AutoSetConnectionID Returns Boolean
43775>>>>>>>        String sConnectionID sDriverID sConnectionString
43775>>>>>>>        Integer iDriver iRetval
43775>>>>>>>        Handle hoCLI
43775>>>>>>>        Boolean bOK bSilent
43775>>>>>>>
43775>>>>>>>        Get pbSilentLogin      to bSilent
43776>>>>>>>        Get psConnectionID     to sConnectionID
43777>>>>>>>        Get psConnectionString to sConnectionString
43778>>>>>>>        // Get the driver Connection ID string & set the psConnectionString property.
43778>>>>>>>        Get psDriverID to sDriverID
43779>>>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
43780>>>>>>>        If (bOK = False) Begin
43782>>>>>>>            Function_Return False
43783>>>>>>>        End
43783>>>>>>>>
43783>>>>>>>
43783>>>>>>>        Get DriverIndex sDriverID          to iDriver
43784>>>>>>>        // If driver not loaded; load it.
43784>>>>>>>        If (iDriver = 0) Begin
43786>>>>>>>            Load_Driver sDriverID
43787>>>>>>>            Get DriverIndex sDriverID      to iDriver
43788>>>>>>>        End
43788>>>>>>>>
43788>>>>>>>        // This shouldn't be possible; unless the driver.dll file is missing or something...
43788>>>>>>>        If (iDriver = 0) Begin
43790>>>>>>>            Error DFERR_PROGRAM ("The database driver could not be loaded! Connection to database failed." * sDriverID)
43791>>>>>>>>
43791>>>>>>>            Function_Return False
43792>>>>>>>        End           
43792>>>>>>>>
43792>>>>>>>            Set_Attribute DF_DRIVER_LOGIN_ON_OPEN of iDriver to True
43795>>>>>>>        
43795>>>>>>>        Get Create (RefClass(cCLIHandler)) to hoCLI
43796>>>>>>>        Set psDriverID of hoCLI            to sDriverID
43797>>>>>>>        // Delete the connection first; in case it exists
43797>>>>>>>        Get DeleteConnectionID of hoCLI sConnectionID -1 to iRetval
43798>>>>>>>        Get CreateConnectionID of hoCLI sConnectionID sConnectionString bSilent to iRetval 
43799>>>>>>>        Send Destroy of hoCLI
43800>>>>>>>
43800>>>>>>>        Function_Return (iRetval = 0)
43801>>>>>>>    End_Function
43802>>>>>>>
43802>>>>>>>    Function _SqlCheckCurrentDriver String sDriverID Returns Boolean
43804>>>>>>>        Boolean bOK
43804>>>>>>>
43804>>>>>>>        Get IsDAWSQLDriver sDriverID to bOK
43805>>>>>>>
43805>>>>>>>        If (bOK = False) Begin
43807>>>>>>>            Error DFERR_PROGRAM "Driver needs to be one of MSSQLDRV_ID, DB2_DRV_ID or ODBC_DRV_ID"
43808>>>>>>>>
43808>>>>>>>            Function_Return False
43809>>>>>>>        End
43809>>>>>>>>
43809>>>>>>>
43809>>>>>>>        Function_Return True
43810>>>>>>>    End_Function
43811>>>>>>>
43811>>>>>>>    Function IsDAWSQLDriver String sDriverID Returns Boolean
43813>>>>>>>        Boolean bOK
43813>>>>>>>        Move (sDriverID = MSSQLDRV_ID or sDriverID = DB2_DRV_ID or sDriverID = ODBC_DRV_ID) to bOK
43814>>>>>>>        Function_Return bOK
43815>>>>>>>    End_Function
43816>>>>>>>
43816>>>>>>>    Function ConstructConnectionString String sDriverID String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
43818>>>>>>>        Handle hoIniFile
43818>>>>>>>        String sConnect
43818>>>>>>>
43818>>>>>>>        Get phoSQLConnectionIniFile to hoIniFile
43819>>>>>>>        Get ConstructConnectionString of hoIniFile sDriverID sServer sDatabase bTrusted sUserID sPassword to sConnect
43820>>>>>>>
43820>>>>>>>        Function_Return sConnect
43821>>>>>>>    End_Function
43822>>>>>>>
43822>>>>>>>    // Sample sConnString: "SERVER=(local)\SQLEXPRESS;UID=dbuser;PWD=secret;DATABASE=OrderEntry;, 0"
43822>>>>>>>    // Pass a complete driver connection string
43822>>>>>>>    // Returns the following as a struct:
43822>>>>>>>    //   sServer, sDatabase, sUser, sPassword & True if Trusted_Connection is used.
43822>>>>>>>    // Finally also returns a boolean TRUE if trusted_connection=yes, else false is returned.
43822>>>>>>>    //
43822>>>>>>>    Function DeComposeConnectionString String sDriverID String sConnectionString Returns tSQLConnection
43824>>>>>>>        tSQLConnection SQLConnection
43824>>>>>>>        tSQLConnection SQLConnection
43824>>>>>>>        String sValue sConnectionID sServer sDatabase sUserID sPassword
43824>>>>>>>        Boolean bTrusted bSilent bOK
43824>>>>>>>        Integer iPos
43824>>>>>>>
43824>>>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
43825>>>>>>>        If (bOK = False) Begin
43827>>>>>>>            Function_Return SQLConnection
43828>>>>>>>        End
43828>>>>>>>>
43828>>>>>>>
43828>>>>>>>        Move False to bTrusted
43829>>>>>>>        Move False to bSilent
43830>>>>>>>
43830>>>>>>>        Case Begin
43830>>>>>>>            Case (sDriverID = MSSQLDRV_ID)
43832>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniServerKeyword + "=")   to sServer
43833>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniDatabaseKeyword + "=") to sDatabase
43834>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniTrustedKeyword + "=")  to sValue
43835>>>>>>>                Move (If(Uppercase(sValue) = "YES", True, False))                   to bTrusted
43836>>>>>>>                If (bTrusted = False) Begin
43838>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")  to sUserID
43839>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")  to sPassword
43840>>>>>>>                End
43840>>>>>>>>
43840>>>>>>>                Case Break
43841>>>>>>>
43841>>>>>>>            Case (sDriverID = ODBC_DRV_ID)
43844>>>>>>>                If (uppercase(sConnectionString) contains ("." + CS_SQLIniDSNKeyword)) Begin
43846>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniFileDSNKeyword + "=")  to sServer
43847>>>>>>>                End
43847>>>>>>>>
43847>>>>>>>                Else Begin
43848>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=")      to sServer
43849>>>>>>>                End
43849>>>>>>>>
43849>>>>>>>
43849>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniTrustedKeyword + "=")  to sValue
43850>>>>>>>                Move (If(Uppercase(sValue) = "YES", True, False))                   to bTrusted
43851>>>>>>>                If (bTrusted = False) Begin
43853>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")  to sUserID
43854>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")  to sPassword
43855>>>>>>>                End
43855>>>>>>>>
43855>>>>>>>                Case Break
43856>>>>>>>
43856>>>>>>>            Case (sDriverID = DB2_DRV_ID)
43859>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=")      to sServer
43860>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")      to sUserID
43861>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")      to sPassword
43862>>>>>>>                Case Break
43863>>>>>>>
43863>>>>>>>            Case (sDriverID = DATAFLEX_ID)    // Dummy stub.
43866>>>>>>>                Break
43867>>>>>>>        Case End
43867>>>>>>>
43867>>>>>>>        Get ParseKeyWord sConnectionString (Uppercase(CS_SQLConnectionIDText))  to sConnectionID
43868>>>>>>>
43868>>>>>>>        // bSilent?
43868>>>>>>>        Move (Pos(",0", sConnectionString))                                     to iPos
43869>>>>>>>        If (iPos = 0) Begin
43871>>>>>>>            Move (Pos(",1", sConnectionString))                                 to iPos
43872>>>>>>>        End
43872>>>>>>>>
43872>>>>>>>        If (iPos = 0) Begin
43874>>>>>>>            Move "0"                                                            to sValue
43875>>>>>>>        End
43875>>>>>>>>
43875>>>>>>>        Else Begin
43876>>>>>>>            Move (Mid(sConnectionString, 1, (iPos +1)))                         to sValue
43877>>>>>>>        End
43877>>>>>>>>
43877>>>>>>>        Move (If(sValue = 1, True, False))                                      to bSilent
43878>>>>>>>
43878>>>>>>>        Move (Trim(sDriverID))                                                  to SQLConnection.sDriverID
43879>>>>>>>        Move (Trim(sConnectionID))                                              to SQLConnection.sConnectionID
43880>>>>>>>        Move (Trim(sConnectionString))                                          to SQLConnection.sConnectionString
43881>>>>>>>        Move (Trim(sServer))                                                    to SQLConnection.sServer
43882>>>>>>>        Move (Trim(sDatabase))                                                  to SQLConnection.sDatabase
43883>>>>>>>        Move bTrusted                                                           to SQLConnection.bTrusted
43884>>>>>>>        Move (Trim(sUserID))                                                    to SQLConnection.sUserID
43885>>>>>>>        Move (Trim(sPassword))                                                  to SQLConnection.sPassword
43886>>>>>>>        Move bSilent                                                            to SQLConnection.bSilentLogin
43887>>>>>>>
43887>>>>>>>        Function_Return SQLConnection
43888>>>>>>>    End_Function
43889>>>>>>>
Including file: ParseKeyWord.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ParseKeyWord.pkg)
43889>>>>>>>>
43889>>>>>>>>Function ParseKeyWord String sConnect String sKeyWord Returns String
43891>>>>>>>>    Integer iStart iEnd
43891>>>>>>>>    String sRetval
43891>>>>>>>>
43891>>>>>>>>    Move (Trim(sConnect)) to sConnect
43892>>>>>>>>    Move (Pos(Uppercase(sKeyWord), Uppercase(sConnect)))  to iStart
43893>>>>>>>>    If (iStart = 0) Begin
43895>>>>>>>>        Function_Return ""
43896>>>>>>>>    End
43896>>>>>>>>>
43896>>>>>>>>    Move (Left(sConnect, (iStart -1 + Length(sKeyWord)))) to sRetval
43897>>>>>>>>    Move (Replace(sRetval, sConnect, "")) to sRetval
43898>>>>>>>>    If (sKeyWord = Uppercase(CS_SQLConnectionIDText)) Begin
43900>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
43901>>>>>>>>    End
43901>>>>>>>>>
43901>>>>>>>>    Else Begin
43902>>>>>>>>        Move (Pos(";", sRetval))          to iEnd
43903>>>>>>>>    End
43903>>>>>>>>>
43903>>>>>>>>    If (iEnd = 0 and (sRetval contains ",")) Begin
43905>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
43906>>>>>>>>        Decrement iEnd
43907>>>>>>>>    End
43907>>>>>>>>>
43907>>>>>>>>    If (iEnd <> 0) Begin
43909>>>>>>>>        Move (Left(sRetval, (iEnd -1)))   to sRetval
43910>>>>>>>>    End
43910>>>>>>>>>
43910>>>>>>>>    Move (Replace("=", sRetval, ""))      to sRetval
43911>>>>>>>>
43911>>>>>>>>    Function_Return (Trim(sRetval))
43912>>>>>>>>End_Function
43913>>>>>>>>
43913>>>>>>>>
43913>>>>>>>
43913>>>>>>>    // To update the SQLSettings.ini file with updated connection data (SQLConnection struct data).
43913>>>>>>>    Function SQLIniFileSetDefaultConnection String sConnectionID Returns Boolean
43915>>>>>>>        Handle ho
43915>>>>>>>        Integer iIndex
43915>>>>>>>        Boolean bRetval bOK
43915>>>>>>>        tSQLConnection SQLConnection
43915>>>>>>>        tSQLConnection SQLConnection
43915>>>>>>>
43915>>>>>>>        Get pSQLConnection to SQLConnection
43916>>>>>>>        Get phoSQLConnectionIniFile to ho
43917>>>>>>>        Get SQLIniFileConnectionIDIndex of ho sConnectionID to iIndex
43918>>>>>>>        If (iIndex = -1) Begin
43920>>>>>>>            Function_Return False
43921>>>>>>>        End
43921>>>>>>>>
43921>>>>>>>
43921>>>>>>>        Get SQLIniFileUpdateConnection of ho SQLConnection to bRetval
43922>>>>>>>        Send UpdateConnectionString SQLConnection
43923>>>>>>>        If (ghoConnection > 0) Begin
43925>>>>>>>            Get ConnectionIdIndex of ghoConnection SQLConnection.sConnectionID to iIndex
43926>>>>>>>            If (iIndex <> -1) Begin
43928>>>>>>>                Get RedirectConnectionId of ghoConnection SQLConnection.sConnectionID (SQLConnection.sServer + ";" + CS_SQLIniDatabaseKeyword + "=" + SQLConnection.sDatabase) SQLConnection.sUserID SQLConnection.sPassword SQLConnection.bTrusted True to bOK
43929>>>>>>>            End
43929>>>>>>>>
43929>>>>>>>        End
43929>>>>>>>>
43929>>>>>>>
43929>>>>>>>        Function_Return bRetval
43930>>>>>>>    End_Function
43931>>>>>>>
43931>>>>>>>    Procedure Set pbDFConnid Boolean bState
43933>>>>>>>        Set pbDFConnid of (phoSQLConnectionIniFile(Self)) to bState
43934>>>>>>>    End_Procedure
43935>>>>>>>    
43935>>>>>>>    Function pbDFConnid Returns Boolean
43937>>>>>>>        Boolean bState
43937>>>>>>>        Get pbDFConnid of (phoSQLConnectionIniFile(Self)) to bState
43938>>>>>>>        Function_Return bState
43939>>>>>>>    End_Function
43940>>>>>>>
43940>>>>>>>End_Class
43941>>>>>Use vWin32fh.pkg
43941>>>>>Use Dfabout.pkg
Including file: DfAbout.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\DFAbout\DfAbout.pkg)
43941>>>>>>>Use LanguageText.pkg
43941>>>>>>>Use Windows.pkg
43941>>>>>>>Use Dfclient.pkg
Including file: Dfclient.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfclient.pkg)
43941>>>>>>>>>Use Windows.pkg
43941>>>>>>>>>Use DfPanel.pkg
43941>>>>>>>>>Use EnClient.pkg
Including file: Enclient.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Enclient.pkg)
43941>>>>>>>>>>>Use windows.pkg
43941>>>>>>>>>>>Use NESTING.pkg       //include DEO nesting standard support module
Including file: nesting.pkg    (C:\Program Files\DataFlex 24.0\Pkg\nesting.pkg)
43941>>>>>>>>>>>>>Use VDFBase.pkg
43941>>>>>>>>>>>>>
43941>>>>>>>>>>>>>Class nesting_mixin is a mixin
43942>>>>>>>>>>>>>    
43942>>>>>>>>>>>>>    //   Component_State indicates if this object has a parent object which is
43942>>>>>>>>>>>>>    //   also a data-entry object.
43942>>>>>>>>>>>>>    //
43942>>>>>>>>>>>>>    //   Has_Components_State indicates if this object has at least one child-
43942>>>>>>>>>>>>>    //   object which is also a data-entry object.
43942>>>>>>>>>>>>>    //
43942>>>>>>>>>>>>>    //   First_DEO and Last_DEO are used temporarily during the searches for
43942>>>>>>>>>>>>>    //   the first and last data-entry object children of this object (see
43942>>>>>>>>>>>>>    //   Find_First_DEO, Find_Last_DEO, Inquire_First_DEO and Inquire_Last_DEO).
43942>>>>>>>>>>>>>    //
43942>>>>>>>>>>>>>    Procedure define_nesting
43944>>>>>>>>>>>>>        Property Integer Component_State        0
43945>>>>>>>>>>>>>        Property Integer Has_Components_State   0
43946>>>>>>>>>>>>>        Property Integer First_DEO              0
43947>>>>>>>>>>>>>        Property Integer Last_DEO               0
43948>>>>>>>>>>>>>        
43948>>>>>>>>>>>>>        // Stop_ui support - Moved from its own mixin package.
43948>>>>>>>>>>>>>        Property Integer Stop_UI_State False
43949>>>>>>>>>>>>>        
43949>>>>>>>>>>>>>    End_Procedure
43950>>>>>>>>>>>>>    
43950>>>>>>>>>>>>>    
43950>>>>>>>>>>>>>    //   This procedure is used to locate the first data-entry object among
43950>>>>>>>>>>>>>    //   this object's siblings (its parent's children).
43950>>>>>>>>>>>>>    //
43950>>>>>>>>>>>>>    //   This procedure is typically invoked via the BROADCAST command from
43950>>>>>>>>>>>>>    //   the Find_First_DEO function of this object's parent.
43950>>>>>>>>>>>>>    //
43950>>>>>>>>>>>>>    Procedure inquire_first_DEO Integer obj# Integer recurseClients
43952>>>>>>>>>>>>>        If (focus_mode(Self) = FOCUSABLE) Begin
43954>>>>>>>>>>>>>            If (recurseClients and client_area_state(Self)) ;                Broadcast_Focus Send inquire_first_DEO obj# recurseClients
43958>>>>>>>>>>>>>            Else Begin
43959>>>>>>>>>>>>>                Set first_DEO of obj# to Self
43960>>>>>>>>>>>>>                Procedure_Return 1  //to stop broadcast, since this object answered
43961>>>>>>>>>>>>>            End
43961>>>>>>>>>>>>>>
43961>>>>>>>>>>>>>        End
43961>>>>>>>>>>>>>>
43961>>>>>>>>>>>>>    End_Procedure
43962>>>>>>>>>>>>>    
43962>>>>>>>>>>>>>    //   If this object is focusable, set Lastt_DEO to this object's id.
43962>>>>>>>>>>>>>    //
43962>>>>>>>>>>>>>    //   This procedure is used to locate the last data-entry object among
43962>>>>>>>>>>>>>    //   this object's siblings (its parent's children).
43962>>>>>>>>>>>>>    //
43962>>>>>>>>>>>>>    //   This procedure is typically invoked via the BROADCAST command from
43962>>>>>>>>>>>>>    //   the Find_Last_DEO function of this object's parent.
43962>>>>>>>>>>>>>    //
43962>>>>>>>>>>>>>    Procedure inquire_last_DEO Integer obj# Integer recurseClients
43964>>>>>>>>>>>>>        If (focus_mode(Self) = FOCUSABLE) Begin
43966>>>>>>>>>>>>>            If (recurseClients and client_area_state(Self)) ;                Broadcast_Focus Send inquire_last_DEO obj# recurseClients
43970>>>>>>>>>>>>>            Else ;                Set last_DEO of obj# to Self
43972>>>>>>>>>>>>>        End
43972>>>>>>>>>>>>>>
43972>>>>>>>>>>>>>    End_Procedure
43973>>>>>>>>>>>>>    
43973>>>>>>>>>>>>>    //   This function returns the object id of the first data-entry object
43973>>>>>>>>>>>>>    //   which is a child of this object, or 0.
43973>>>>>>>>>>>>>    //
43973>>>>>>>>>>>>>    //   This function 'searches' by broadcasting Inquire_First_DEO, which
43973>>>>>>>>>>>>>    //   returns a 1 to terminate the broadcast after the first data-entry
43973>>>>>>>>>>>>>    //   object has been located.
43973>>>>>>>>>>>>>    //
43973>>>>>>>>>>>>>    Function find_first_DEO Returns Integer
43975>>>>>>>>>>>>>        Set First_DEO to 0
43976>>>>>>>>>>>>>        Broadcast_Focus Send inquire_first_DEO Self False //sets First_DEO property
43978>>>>>>>>>>>>>        Function_Return (first_deo(Self))
43979>>>>>>>>>>>>>    End_Function
43980>>>>>>>>>>>>>    
43980>>>>>>>>>>>>>    
43980>>>>>>>>>>>>>    //   This function returns the object id of the last data-entry object
43980>>>>>>>>>>>>>    //   which is a child of this object, or 0.
43980>>>>>>>>>>>>>    //
43980>>>>>>>>>>>>>    //   This function 'searches' by broadcasting Inquire_Last_DEO, which sets
43980>>>>>>>>>>>>>    //   the property Last_DEO.  Thus, the last object reached by the broadcast
43980>>>>>>>>>>>>>    //   is the last value to be set into Last_DEO.
43980>>>>>>>>>>>>>    //
43980>>>>>>>>>>>>>    Function find_last_DEO Returns Integer
43982>>>>>>>>>>>>>        Set Last_DEO to 0
43983>>>>>>>>>>>>>        Broadcast_Focus Send inquire_last_DEO Self False //sets Last_DEO property
43985>>>>>>>>>>>>>        Function_Return (Last_DEO(Self))
43986>>>>>>>>>>>>>    End_Function
43987>>>>>>>>>>>>>    
43987>>>>>>>>>>>>>    //   Removes this object from the screen and focus-tree, and also removes
43987>>>>>>>>>>>>>    //   this object's children from the screen and focus-tree.
43987>>>>>>>>>>>>>    //
43987>>>>>>>>>>>>>    //   If no flag argument was passed, AREA_TYPE becomes the flag parameter.
43987>>>>>>>>>>>>>    //
43987>>>>>>>>>>>>>    //   Client-objects already automatically remove their children from the
43987>>>>>>>>>>>>>    //   focus-tree.
43987>>>>>>>>>>>>>    //
43987>>>>>>>>>>>>>    Procedure Deactivate Integer eDeactivateScope Returns Integer
43989>>>>>>>>>>>>>        Integer retval Fg
43989>>>>>>>>>>>>>        If (num_arguments > 0) ;            Move eDeactivateScope to Fg
43992>>>>>>>>>>>>>        Else ;            Move AREA_TYPE to Fg
43994>>>>>>>>>>>>>        Forward Get msg_deactivate fg to retval
43996>>>>>>>>>>>>>        
43996>>>>>>>>>>>>>        If ( not(retval) and (fg = 0) ) Begin
43998>>>>>>>>>>>>>            
43998>>>>>>>>>>>>>            // This broadcast no_stop is probably not ever used, but would be if a
43998>>>>>>>>>>>>>            // child was in the focus tree, but not as a focus-child. weird, but needs be here.
43998>>>>>>>>>>>>>            If ( client_Area_state(Self)=0) ;                Broadcast NO_STOP Send deactivate 0
44003>>>>>>>>>>>>>            
44003>>>>>>>>>>>>>            If ( Stop_UI_State(Self) ) ;                Send Stop_Ui
44006>>>>>>>>>>>>>        End
44006>>>>>>>>>>>>>>
44006>>>>>>>>>>>>>        Procedure_Return retval
44007>>>>>>>>>>>>>    End_Procedure
44008>>>>>>>>>>>>>    
44008>>>>>>>>>>>>>    //   This procedure marks an object as a child data-entry object, and
44008>>>>>>>>>>>>>    //   attempts to use its parent's Server if this object has no Server.
44008>>>>>>>>>>>>>    //   Typically sent via broadcast from parent DEO.
44008>>>>>>>>>>>>>    //
44008>>>>>>>>>>>>>    Procedure Mark_As_Component
44010>>>>>>>>>>>>>        Set Component_State to True
44011>>>>>>>>>>>>>        Delegate Set Has_Components_State to True
44013>>>>>>>>>>>>>    End_Procedure
44014>>>>>>>>>>>>>    
44014>>>>>>>>>>>>>    
44014>>>>>>>>>>>>>    //   This procedure marks child data-entry objects as components.
44014>>>>>>>>>>>>>    //
44014>>>>>>>>>>>>>    //   The child data-entry objects must understand Mark_As_Component as a
44014>>>>>>>>>>>>>    //   method of setting their Component_State to TRUE.
44014>>>>>>>>>>>>>    Procedure Mark_Components
44016>>>>>>>>>>>>>        Set Component_State to False
44017>>>>>>>>>>>>>        Broadcast Send Mark_As_Component
44019>>>>>>>>>>>>>    End_Procedure
44020>>>>>>>>>>>>>End_Class
44021>>>>>>>>>>>>>
44021>>>>>>>>>>>Use NAVIGATE.pkg      //include DEO navigation standard support module
Including file: navigate.pkg    (C:\Program Files\DataFlex 24.0\Pkg\navigate.pkg)
44021>>>>>>>>>>>>>
44021>>>>>>>>>>>>>
44021>>>>>>>>>>>>>
44021>>>>>>>>>>>>>Use VDFBase.pkg
44021>>>>>>>>>>>>>
44021>>>>>>>>>>>>>
44021>>>>>>>>>>>>>Register_Function verify_data_loss Returns Integer
44021>>>>>>>>>>>>>
44021>>>>>>>>>>>>>Class navigate_mixin is a mixin
44022>>>>>>>>>>>>>    
44022>>>>>>>>>>>>>    Procedure define_navigation
44024>>>>>>>>>>>>>        On_Key kBegin_of_Panel    Send Beginning_of_Panel PRIVATE
44025>>>>>>>>>>>>>        On_Key kCancel            Send Request_Cancel     PRIVATE
44026>>>>>>>>>>>>>        On_Key kEnd_of_Panel      Send End_of_Panel       PRIVATE
44027>>>>>>>>>>>>>        On_Key kExit_Function     Send Exit_Function      PRIVATE
44028>>>>>>>>>>>>>        On_Key kSwitch            Send Switch             PRIVATE
44029>>>>>>>>>>>>>        On_Key kSwitch_Back       Send Switch_Back        PRIVATE
44030>>>>>>>>>>>>>        Property Integer Auto_Top_Panel_State             True
44031>>>>>>>>>>>>>        Property Integer private.Verify_Exit_Msg          0
44032>>>>>>>>>>>>>    End_Procedure
44033>>>>>>>>>>>>>    
44033>>>>>>>>>>>>>    Function Verify_Exit_msg Returns Integer
44035>>>>>>>>>>>>>        Integer msg#
44035>>>>>>>>>>>>>        Get private.verify_exit_msg to msg#
44036>>>>>>>>>>>>>        If (msg# = 0 and Component_State(Self)) ;            Delegate Get verify_exit_msg to msg#
44040>>>>>>>>>>>>>        Function_Return msg#
44041>>>>>>>>>>>>>    End_Function
44042>>>>>>>>>>>>>    
44042>>>>>>>>>>>>>    
44042>>>>>>>>>>>>>    Procedure Set Verify_Exit_msg Integer msg#
44044>>>>>>>>>>>>>        Set private.verify_Exit_Msg to msg#
44045>>>>>>>>>>>>>    End_Procedure
44046>>>>>>>>>>>>>    
44046>>>>>>>>>>>>>    
44046>>>>>>>>>>>>>    Function Verify_Exit Returns Integer
44048>>>>>>>>>>>>>        Integer msg#
44048>>>>>>>>>>>>>        Get verify_Exit_msg to msg#
44049>>>>>>>>>>>>>        If (msg# <> 0) ;            Get msg# to msg#
44052>>>>>>>>>>>>>        Function_Return msg#
44053>>>>>>>>>>>>>    End_Function
44054>>>>>>>>>>>>>    
44054>>>>>>>>>>>>>    
44054>>>>>>>>>>>>>    
44054>>>>>>>>>>>>>    
44054>>>>>>>>>>>>>    //   The deactivate message-send passes AREA_FLAG, which means that we want
44054>>>>>>>>>>>>>    //   to deactivate the object in the focus tree which is either a scope
44054>>>>>>>>>>>>>    //   (i.e. Scope_State = TRUE) or a pop-up (i.e. PopUp_State = TRUE), and
44054>>>>>>>>>>>>>    //   which is closest to this object in an 'upward' direction (i.e.
44054>>>>>>>>>>>>>    //   client/parent, not child or sibling).
44054>>>>>>>>>>>>>    //
44054>>>>>>>>>>>>>    Procedure Request_Cancel
44056>>>>>>>>>>>>>        Integer foc#
44056>>>>>>>>>>>>>        If (verify_exit(Self) = 0) Begin
44058>>>>>>>>>>>>>            Send deactivate AREA_FLAG
44059>>>>>>>>>>>>>            Get focus of desktop to foc#
44060>>>>>>>>>>>>>            If (foc# and skip_State(foc#)) ;                Send switch to foc#
44063>>>>>>>>>>>>>        End
44063>>>>>>>>>>>>>>
44063>>>>>>>>>>>>>    End_Procedure
44064>>>>>>>>>>>>>    
44064>>>>>>>>>>>>>    
44064>>>>>>>>>>>>>    
44064>>>>>>>>>>>>>    Procedure Exit_Function
44066>>>>>>>>>>>>>        Send request_cancel
44067>>>>>>>>>>>>>    End_Procedure
44068>>>>>>>>>>>>>    
44068>>>>>>>>>>>>>End_Class
44069>>>>>>>>>>>>>
44069>>>>>>>>>>>>>
44069>>>>>>>>>>>>>
44069>>>>>>>>>>>Use SERVER.pkg        //include Server support module
Including file: Server.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Server.pkg)
44069>>>>>>>>>>>>>
44069>>>>>>>>>>>>>Use VDFBase.pkg
44069>>>>>>>>>>>>>Use brdcster.pkg
Including file: brdcster.pkg    (C:\Program Files\DataFlex 24.0\Pkg\brdcster.pkg)
44069>>>>>>>>>>>>>>>Use Set.pkg
44069>>>>>>>>>>>>>>>
44069>>>>>>>>>>>>>>>//   This class is defined as a subclass of Set with a C language handler
44069>>>>>>>>>>>>>>>//   providing additional behavior.
44069>>>>>>>>>>>>>>>//
44069>>>>>>>>>>>>>>>Class Broadcaster is a Set 0 0 Broadcast_Handler
44070>>>>>>>>>>>>>>>End_Class
44071>>>>>>>>>>>>>>>
44071>>>>>>>>>>>>>>>
44071>>>>>>>>>>>>>>>Function make_broadcaster for cDesktop Returns Integer
44073>>>>>>>>>>>>>>>    Integer obj#
44073>>>>>>>>>>>>>>>    Object broadcasterTemplate is a broadcaster
44075>>>>>>>>>>>>>>>        Move Self to obj#
44076>>>>>>>>>>>>>>>    End_Object
44077>>>>>>>>>>>>>>>    Function_Return obj#
44078>>>>>>>>>>>>>>>End_Function
44079>>>>>>>>>>>>>>>
44079>>>>>>>>>>>>>>>
44079>>>>>>>>>>>>>
44079>>>>>>>>>>>>>Register_Procedure Item_Find Integer mode Integer datafile Integer datafield ;    Integer entUpdtFlag Integer errFlag Integer dfrdFlag
44079>>>>>>>>>>>>>Register_Procedure Add_User_Interface Integer obj#
44079>>>>>>>>>>>>>Register_Procedure Remove_User_Interface Integer obj#
44079>>>>>>>>>>>>>Register_Procedure Clear
44079>>>>>>>>>>>>>Register_Function  Component_State Returns Integer
44079>>>>>>>>>>>>>Register_Function  Can_Delete Returns Integer
44079>>>>>>>>>>>>>Register_Object Element
44079>>>>>>>>>>>>>
44079>>>>>>>>>>>>>// Values for DSO_Detach_Mode
44079>>>>>>>>>>>>>//   DETACH_NEVER        = Never
44079>>>>>>>>>>>>>//   DETACH_IF_ALLOWED   = do if changed_state=F and DEO Static_Server
44079>>>>>>>>>>>>>//   DETACH_IF_NO_CHANGE = do if changed_state=F
44079>>>>>>>>>>>>>//   DETACH_ALWAYS       = do it no matter what
44079>>>>>>>>>>>>>
44079>>>>>>>>>>>>>Enumeration_List
44079>>>>>>>>>>>>>    Define Detach_Never
44079>>>>>>>>>>>>>    Define Detach_If_No_Change
44079>>>>>>>>>>>>>    Define Detach_Always
44079>>>>>>>>>>>>>    Define Detach_If_Allowed
44079>>>>>>>>>>>>>End_Enumeration_List
44079>>>>>>>>>>>>>
44079>>>>>>>>>>>>>
44079>>>>>>>>>>>>>Class server_mixin is a mixin
44080>>>>>>>>>>>>>    
44080>>>>>>>>>>>>>    //   Server is the object id of the database agent for this object.
44080>>>>>>>>>>>>>    //
44080>>>>>>>>>>>>>    //   Watched_Servers is a set of object ids for database agents whose state
44080>>>>>>>>>>>>>    //   must also be monitored by this object (but which never receive requests
44080>>>>>>>>>>>>>    //   directly from this object, unlike the Server).
44080>>>>>>>>>>>>>    //
44080>>>>>>>>>>>>>    //   Servers_Scanned determines if the items of this object have been
44080>>>>>>>>>>>>>    //   scanned to see if this object should be connected to other database
44080>>>>>>>>>>>>>    //   agents as 'just watching' (see Watched_Servers, above).
44080>>>>>>>>>>>>>    //
44080>>>>>>>>>>>>>    //   Auto_Fill_State determines if this object should always automatically
44080>>>>>>>>>>>>>    //   fill itself with data when it is activated.
44080>>>>>>>>>>>>>    //
44080>>>>>>>>>>>>>    //   Deferred_State determines if this object's browsing in database files
44080>>>>>>>>>>>>>    //   should be reflected immediately in this object's database agent (and
44080>>>>>>>>>>>>>    //   the agents' agents, etc.), or not.
44080>>>>>>>>>>>>>    //
44080>>>>>>>>>>>>>    //
44080>>>>>>>>>>>>>    Procedure define_server
44082>>>>>>>>>>>>>        Integer obj#
44082>>>>>>>>>>>>>        Property Integer private.Server           0
44083>>>>>>>>>>>>>        Property Integer Watched_Servers          0
44084>>>>>>>>>>>>>        // used to send Set Changed_State to "foreign" servers, while Watched_Servers
44084>>>>>>>>>>>>>        // is used for sending messages from the DDO to DEOs (there are more of them)
44084>>>>>>>>>>>>>        Property Integer ChangedStateWatched_Servers     0
44085>>>>>>>>>>>>>        Property Integer private.Servers_Scanned  0
44086>>>>>>>>>>>>>        
44086>>>>>>>>>>>>>        Property Integer Auto_Fill_State False
44087>>>>>>>>>>>>>        Property Boolean pbAutoFillOnInit True      // Used to tell DDO's that we want autofill on initialization when DEO is attaching
44088>>>>>>>>>>>>>        
44088>>>>>>>>>>>>>        Property Integer Deferred_State  False
44089>>>>>>>>>>>>>        
44089>>>>>>>>>>>>>        // added to support DEO request-delegation. This is set true
44089>>>>>>>>>>>>>        // if the server is explicitly set in this DEO (normally via a
44089>>>>>>>>>>>>>        // USING parameter).
44089>>>>>>>>>>>>>        Property Integer explicit_server_state False
44090>>>>>>>>>>>>>        
44090>>>>>>>>>>>>>        // Since this package's SET changed_state is using change_
44090>>>>>>>>>>>>>        // disabled_state we might as well define it here. This gets changed
44090>>>>>>>>>>>>>        // by Clear_mx to support setting of defaults without changing the
44090>>>>>>>>>>>>>        // objects changed_state.
44090>>>>>>>>>>>>>        
44090>>>>>>>>>>>>>        // This stops changed_state from getting changed. It allows item_changed_
44090>>>>>>>>>>>>>        // state to chagne without the object's changed_state getting changed.
44090>>>>>>>>>>>>>        // This should be considered protected (i.e., likely to change). The new
44090>>>>>>>>>>>>>        // messages Entry_Defaults and Set Default_Value are both public and use
44090>>>>>>>>>>>>>        // this. Try to use these messages instead of this property.
44090>>>>>>>>>>>>>        Property Integer Change_Disabled_State  False
44091>>>>>>>>>>>>>        
44091>>>>>>>>>>>>>        // If true DEO will not disconnect from server when deactivating.
44091>>>>>>>>>>>>>        // If true View should handles attaching and detaching.
44091>>>>>>>>>>>>>        Register_Function Default_static_server_state Returns Integer
44091>>>>>>>>>>>>>        Property Integer Static_Server_State  (Default_Static_Server_State(Self))
44092>>>>>>>>>>>>>        
44092>>>>>>>>>>>>>        // Properties to better support tables. If Refresh_dirty_state
44092>>>>>>>>>>>>>        // is true then the list object needs refreshing (because it was inactive
44092>>>>>>>>>>>>>        // and changes were made that were not updated). After add_focus is
44092>>>>>>>>>>>>>        // complete the add_focus_msg is sent (allows tables to initialize the
44092>>>>>>>>>>>>>        // list).
44092>>>>>>>>>>>>>        Property Integer Refresh_dirty_state  True // when not active/dirty
44093>>>>>>>>>>>>>        Property Integer Add_focus_msg        0    // by dflt no message
44094>>>>>>>>>>>>>        
44094>>>>>>>>>>>>>        // This will call a stub procedure which will be augmented (or replaced)
44094>>>>>>>>>>>>>        // by the xdeo mixins
44094>>>>>>>>>>>>>        Send Define_Extended_DEO_Mixin
44095>>>>>>>>>>>>>        
44095>>>>>>>>>>>>>    End_Procedure
44096>>>>>>>>>>>>>    
44096>>>>>>>>>>>>>    
44096>>>>>>>>>>>>>    Procedure remove_deo_from_server
44098>>>>>>>>>>>>>        Integer obj# isclient wsrvr
44098>>>>>>>>>>>>>        Get Server to obj#
44099>>>>>>>>>>>>>        // as of 17.0, containers will be added as a DEO so it receives the Refresh message
44099>>>>>>>>>>>>>        If (obj# <> 0) ;            Send remove_user_interface to obj# Self
44102>>>>>>>>>>>>>        Get Watched_Servers to wsrvr
44103>>>>>>>>>>>>>        If wsrvr ;            Send remove_user_interface to wsrvr Self True // TRUE for watchers
44106>>>>>>>>>>>>>        Set Refresh_dirty_state to True
44107>>>>>>>>>>>>>    End_Procedure
44108>>>>>>>>>>>>>    
44108>>>>>>>>>>>>>    
44108>>>>>>>>>>>>>    //   This function returns the object id of the database server which
44108>>>>>>>>>>>>>    //   encloses this object, if any.  Note that only the Data_Set class
44108>>>>>>>>>>>>>    //   defines this function to return anything other than 0.
44108>>>>>>>>>>>>>    //
44108>>>>>>>>>>>>>    //   This function is used with delegation to locate the Data_Set
44108>>>>>>>>>>>>>    //   which is the closest parent of this object.
44108>>>>>>>>>>>>>    //
44108>>>>>>>>>>>>>    Function Find_Server Returns Integer
44110>>>>>>>>>>>>>    End_Function
44111>>>>>>>>>>>>>    
44111>>>>>>>>>>>>>    Register_Function Server Returns Integer
44111>>>>>>>>>>>>>    
44111>>>>>>>>>>>>>    
44111>>>>>>>>>>>>>    //   This function returns the object id of the database agent of this object,
44111>>>>>>>>>>>>>    //   or 0.
44111>>>>>>>>>>>>>    Function Locate_Server Returns Integer
44113>>>>>>>>>>>>>        Function_Return (Server(Self))
44114>>>>>>>>>>>>>    End_Function
44115>>>>>>>>>>>>>    
44115>>>>>>>>>>>>>    
44115>>>>>>>>>>>>>    //   This function returns the object id of the database agent of this
44115>>>>>>>>>>>>>    //   object, or 0.
44115>>>>>>>>>>>>>    //   If this object's Server is 0, this object's parent's Server is
44115>>>>>>>>>>>>>    //   returned, if any.
44115>>>>>>>>>>>>>    //
44115>>>>>>>>>>>>>    // Notes
44115>>>>>>>>>>>>>    //
44115>>>>>>>>>>>>>    //   This function is used to allow nested data-entry objects to use the
44115>>>>>>>>>>>>>    //   database agent defined by their parent object.
44115>>>>>>>>>>>>>    //
44115>>>>>>>>>>>>>    Function Server Returns Integer
44117>>>>>>>>>>>>>        Integer obj#
44117>>>>>>>>>>>>>        Get private.Server to obj#
44118>>>>>>>>>>>>>        If (obj# = 0 and Component_State(Self)) ;            Function_Return (Locate_Server(parent(Self)))
44121>>>>>>>>>>>>>        Function_Return obj#
44122>>>>>>>>>>>>>    End_Function
44123>>>>>>>>>>>>>    
44123>>>>>>>>>>>>>    
44123>>>>>>>>>>>>>    //   This procedure sets the value of the Server property of this object,
44123>>>>>>>>>>>>>    //   notifying child-objects of the change, and destroying and creating
44123>>>>>>>>>>>>>    //   connections with database agents, as required.
44123>>>>>>>>>>>>>    //
44123>>>>>>>>>>>>>    //   If the Server of this object is changed while this object is inactive,
44123>>>>>>>>>>>>>    //   no notification of child-objects is required or performed.
44123>>>>>>>>>>>>>    Procedure Set Server Integer newVal
44125>>>>>>>>>>>>>        Integer oldVal
44125>>>>>>>>>>>>>        Set explicit_server_state to (newVal <> 0)
44126>>>>>>>>>>>>>        Get Server to oldVal
44127>>>>>>>>>>>>>        If (newVal <> 0) ;            Set private.Server to (object_id(newVal))
44130>>>>>>>>>>>>>        Else ;            Set private.Server to newVal
44132>>>>>>>>>>>>>        If (active_state(Self)) Begin
44134>>>>>>>>>>>>>            Broadcast Send server_changed oldVal newVal
44136>>>>>>>>>>>>>            If (oldVal <> 0) ;                Send remove_deo_from_server  //detach from current server
44139>>>>>>>>>>>>>            If (newval <> 0) ;                Send attach_deo_to_server    //attach to new server
44142>>>>>>>>>>>>>        End
44142>>>>>>>>>>>>>>
44142>>>>>>>>>>>>>    End_Procedure
44143>>>>>>>>>>>>>    
44143>>>>>>>>>>>>>    //   This procedure servers as notification of a change in the connection
44143>>>>>>>>>>>>>    //   of this object's parent to its database agent.  If this object uses
44143>>>>>>>>>>>>>    //   its parent's database agent by default (see the Server and Find_Server
44143>>>>>>>>>>>>>    //   functions, above), it must disconnect from the old agent and connect
44143>>>>>>>>>>>>>    //   with the new agent.
44143>>>>>>>>>>>>>    Procedure server_changed Integer oldVal Integer newVal
44145>>>>>>>>>>>>>        Integer oldSrvr
44145>>>>>>>>>>>>>        // as of 17.0, containers will be added as a DEO so it receives the Refresh message
44145>>>>>>>>>>>>>        Get private.Server to oldSrvr
44146>>>>>>>>>>>>>        If (oldSrvr = 0) Begin  //assumes Server(self) = oldVal by deleg
44148>>>>>>>>>>>>>            If (oldVal <> 0) ;                Send remove_user_interface to oldVal Self
44151>>>>>>>>>>>>>            If (newVal <> 0) ;                Send add_user_interface to newVal Self
44154>>>>>>>>>>>>>        End
44154>>>>>>>>>>>>>>
44154>>>>>>>>>>>>>    End_Procedure
44155>>>>>>>>>>>>>    
44155>>>>>>>>>>>>>    
44155>>>>>>>>>>>>>    //   This procedure empties the Watched_Servers broadcaster, after
44155>>>>>>>>>>>>>    //   detaching this object from all of the broadcaster's elements.
44155>>>>>>>>>>>>>    //   This procedure is invoked by Find_Servers_to_Watch, in preparation
44155>>>>>>>>>>>>>    //   for a scan. Deletes both sets of watched servers
44155>>>>>>>>>>>>>    //
44155>>>>>>>>>>>>>    Procedure delete_watched_servers
44157>>>>>>>>>>>>>        Integer vis#
44157>>>>>>>>>>>>>        
44157>>>>>>>>>>>>>        Get watched_servers to vis#
44158>>>>>>>>>>>>>        If vis# Begin
44160>>>>>>>>>>>>>            Send Remove_User_Interface to vis# Self True //detach from all, TRUE for watchers
44161>>>>>>>>>>>>>            Set broadcast_state of vis# to False
44162>>>>>>>>>>>>>            Send delete_Data to vis#                    //empty it
44163>>>>>>>>>>>>>            Set broadcast_state of vis# to True
44164>>>>>>>>>>>>>        End
44164>>>>>>>>>>>>>>
44164>>>>>>>>>>>>>        
44164>>>>>>>>>>>>>        Get ChangedStateWatched_Servers to vis#
44165>>>>>>>>>>>>>        If vis# Begin
44167>>>>>>>>>>>>>            Set broadcast_state of vis# to False
44168>>>>>>>>>>>>>            Send delete_Data to vis#                    //empty it
44169>>>>>>>>>>>>>            Set broadcast_state of vis# to True
44170>>>>>>>>>>>>>        End
44170>>>>>>>>>>>>>>
44170>>>>>>>>>>>>>    End_Procedure
44171>>>>>>>>>>>>>    
44171>>>>>>>>>>>>>    //   This procedure adds the specified object id (obj#) to this object's
44171>>>>>>>>>>>>>    //   set of database agents who are merely 'watched', and establishes a
44171>>>>>>>>>>>>>    //   connection between the database agent and this object.
44171>>>>>>>>>>>>>    Procedure add_watched_server Integer obj#
44173>>>>>>>>>>>>>        Integer vis# ndx
44173>>>>>>>>>>>>>        Get watched_servers to vis#
44174>>>>>>>>>>>>>        // if w server does not exist, first create it
44174>>>>>>>>>>>>>        If (Vis# = 0) Begin
44176>>>>>>>>>>>>>            Get Create of Desktop U_Broadcaster to Vis#
44177>>>>>>>>>>>>>            Set Watched_Servers to Vis#
44178>>>>>>>>>>>>>        End
44178>>>>>>>>>>>>>>
44178>>>>>>>>>>>>>        //
44178>>>>>>>>>>>>>        Set broadcast_state of vis# to False
44179>>>>>>>>>>>>>        Get find_element of vis# obj# to ndx
44180>>>>>>>>>>>>>        If (ndx < 0) ;            Send add_element to vis# obj#
44183>>>>>>>>>>>>>        Set broadcast_state of vis# to True
44184>>>>>>>>>>>>>        If (ndx lt 0 and active_State(Self)) ;            Send add_user_interface to obj# Self True // TRUE for watchers
44187>>>>>>>>>>>>>    End_Procedure
44188>>>>>>>>>>>>>    
44188>>>>>>>>>>>>>    Procedure add_ChangedStateWatched_Servers Integer obj#
44190>>>>>>>>>>>>>        Integer vis# ndx
44190>>>>>>>>>>>>>        Get ChangedStateWatched_Servers to vis#
44191>>>>>>>>>>>>>        If (Vis# = 0) Begin
44193>>>>>>>>>>>>>            Get Create of Desktop U_Broadcaster to Vis#
44194>>>>>>>>>>>>>            Set ChangedStateWatched_Servers to Vis#
44195>>>>>>>>>>>>>        End
44195>>>>>>>>>>>>>>
44195>>>>>>>>>>>>>        //
44195>>>>>>>>>>>>>        Set broadcast_state of vis# to False
44196>>>>>>>>>>>>>        Get find_element of vis# obj# to ndx
44197>>>>>>>>>>>>>        If (ndx < 0) ;            Send add_element to vis# obj#
44200>>>>>>>>>>>>>        Set broadcast_state of vis# to True
44201>>>>>>>>>>>>>    End_Procedure
44202>>>>>>>>>>>>>    
44202>>>>>>>>>>>>>    
44202>>>>>>>>>>>>>    //   This procedure removes the specified object id (obj#) from this object's
44202>>>>>>>>>>>>>    //   set of database agents who are merely 'watched', and destroys the
44202>>>>>>>>>>>>>    //   connection between the database agent and this object.
44202>>>>>>>>>>>>>    Procedure remove_watched_server Integer obj#
44204>>>>>>>>>>>>>        Integer vis# ndx
44204>>>>>>>>>>>>>        Get watched_servers to vis#
44205>>>>>>>>>>>>>        // Only if w server exists
44205>>>>>>>>>>>>>        If vis# Begin
44207>>>>>>>>>>>>>            Set broadcast_state of vis# to False
44208>>>>>>>>>>>>>            Get find_element of vis# obj# to ndx
44209>>>>>>>>>>>>>            If (ndx >= 0) ;                Send remove_element to vis# obj#
44212>>>>>>>>>>>>>            Set broadcast_state of vis# to True
44213>>>>>>>>>>>>>            If (ndx >= 0 and active_State(Self)) ;                Send remove_user_interface to obj# Self True // TRUE for watchers
44216>>>>>>>>>>>>>        End
44216>>>>>>>>>>>>>>
44216>>>>>>>>>>>>>    End_Procedure
44217>>>>>>>>>>>>>    
44217>>>>>>>>>>>>>    //   This procedure causes the scanning of this object's items' fields,
44217>>>>>>>>>>>>>    //   and the production of a set of database agents who should be 'watched'.
44217>>>>>>>>>>>>>    //   This procedure depends completely upon Find_Servers_To_Watch, below.
44217>>>>>>>>>>>>>    //
44217>>>>>>>>>>>>>    Procedure Scan_Servers
44219>>>>>>>>>>>>>        Send find_servers_to_watch False
44220>>>>>>>>>>>>>    End_Procedure
44221>>>>>>>>>>>>>    
44221>>>>>>>>>>>>>    //   This procedure scans the fields of this object's items to determine
44221>>>>>>>>>>>>>    //   what other database agents (data_sets) other than this object's Server
44221>>>>>>>>>>>>>    //   should be 'watched' (for data changes).
44221>>>>>>>>>>>>>    //   This procedure is invoked once per object, the first time the object
44221>>>>>>>>>>>>>    //   is activated.  If the data_file, data_field, and/or main_file of this
44221>>>>>>>>>>>>>    //   object are changed (don't change them while this object is active!),
44221>>>>>>>>>>>>>    //   set Private.Servers_Scanned to FALSE to force this object to scan
44221>>>>>>>>>>>>>    //   again (when it is next activated).
44221>>>>>>>>>>>>>    //
44221>>>>>>>>>>>>>    
44221>>>>>>>>>>>>>    // 17.0: The logic has been retooled to add more watched servers to the DDOs. This is done so
44221>>>>>>>>>>>>>    // DD operations will send Refresh to these additional watched-servers. There are two changes:
44221>>>>>>>>>>>>>    // 1. Containers are now made watched servers for the Server and all parent servers
44221>>>>>>>>>>>>>    // 2. Non-file.field DEOs (e.g., expressions) are made watched servers for the server (which it
44221>>>>>>>>>>>>>    //    already did and for all parent servers. Without this, parent entry_item expressions were not
44221>>>>>>>>>>>>>    //    getting updated
44221>>>>>>>>>>>>>    // Here is how watched-servers works.
44221>>>>>>>>>>>>>    // Each DEO attaches and detaches from its Server by sending Add_User_interface and Remove_User_interface
44221>>>>>>>>>>>>>    // to the server DD. Once attached, the DD knows about this DEO and sends messages to it as needed (Refresh,
44221>>>>>>>>>>>>>    // Entry_Update, etc.). In addition, a DEO may need to attach a parent DDO so that changes in that parent DD
44221>>>>>>>>>>>>>    // results in those messages being sent. This is needed if the binding table in entry_item refers to a parent
44221>>>>>>>>>>>>>    // table. So we need to send Add_User_interface and Remove_User_interface to that parent server as well. If a DEO
44221>>>>>>>>>>>>>    // has multiple, there could be multiple parent servers. As of 17.0, we are also attaching to parent servers if
44221>>>>>>>>>>>>>    // we are unsure about how the DEO is being used. If an expression is used, it might need to be updated when
44221>>>>>>>>>>>>>    // a parent (or any ancestor) changes. Each DEO keeps track of servers that it attaches to and this is referred
44221>>>>>>>>>>>>>    // to as the watched_server list. This list is maintained so the DEO knows which DDOs to attach and detach to.
44221>>>>>>>>>>>>>    
44221>>>>>>>>>>>>>    
44221>>>>>>>>>>>>>    Procedure find_servers_to_watch Integer tableFlag
44223>>>>>>>>>>>>>        Integer i file# obj# maxitems count p srvr# self# srvrfile
44223>>>>>>>>>>>>>        String fileStr fStr
44223>>>>>>>>>>>>>        Boolean bContainer bDoAll
44223>>>>>>>>>>>>>        
44223>>>>>>>>>>>>>        Get Client_Area_State to bContainer
44224>>>>>>>>>>>>>        Set private.Servers_Scanned to True
44225>>>>>>>>>>>>>        
44225>>>>>>>>>>>>>        Get Server to srvr#
44226>>>>>>>>>>>>>        
44226>>>>>>>>>>>>>        If (srvr#=0) Begin
44228>>>>>>>>>>>>>            Procedure_Return
44229>>>>>>>>>>>>>        End
44229>>>>>>>>>>>>>>
44229>>>>>>>>>>>>>        
44229>>>>>>>>>>>>>        Send delete_watched_servers  //empty Watched_Servers broadcaster first
44230>>>>>>>>>>>>>        
44230>>>>>>>>>>>>>        Get main_file of srvr# to srvrfile  // data-set's main-file
44231>>>>>>>>>>>>>        
44231>>>>>>>>>>>>>        If bContainer Begin
44233>>>>>>>>>>>>>            // containers should get added to all parent DDOs
44233>>>>>>>>>>>>>            Send WatchAllParentServers srvr#
44234>>>>>>>>>>>>>            Procedure_Return
44235>>>>>>>>>>>>>        End
44235>>>>>>>>>>>>>>
44235>>>>>>>>>>>>>        
44235>>>>>>>>>>>>>        If (tableFlag <> 0) ;            Get Prototype_Object to self# // tables
44238>>>>>>>>>>>>>        Else ;            Move Self to self# // forms and text windows
44240>>>>>>>>>>>>>        
44240>>>>>>>>>>>>>        Get item_count of self# to maxitems
44241>>>>>>>>>>>>>        Decrement maxitems
44242>>>>>>>>>>>>>        
44242>>>>>>>>>>>>>        // if no items do nothing
44242>>>>>>>>>>>>>        // if one item do quick check
44242>>>>>>>>>>>>>        // if multiple items do it the hard way
44242>>>>>>>>>>>>>        
44242>>>>>>>>>>>>>        If (maxitems<0) Begin
44244>>>>>>>>>>>>>            // if no items, which is unusual, we don't know what this DEO is so we will treat it like a container
44244>>>>>>>>>>>>>            // and add it as a watched server for all DDOs
44244>>>>>>>>>>>>>            Send WatchAllParentServers srvr#
44245>>>>>>>>>>>>>            Procedure_Return  // no items
44246>>>>>>>>>>>>>        End
44246>>>>>>>>>>>>>>
44246>>>>>>>>>>>>>        
44246>>>>>>>>>>>>>        If (maxitems=0) Begin // only 1 item - skip most of the nonsense
44248>>>>>>>>>>>>>            Get data_file of self# 0 to file#
44249>>>>>>>>>>>>>            // we need watched server if file exists, it is not the main file
44249>>>>>>>>>>>>>            // and is not an updating file (as opposed to updating data-set).
44249>>>>>>>>>>>>>            If (file#>0 and file#<>srvrfile) Begin
44251>>>>>>>>>>>>>                Get which_data_set of srvr# file# to obj#
44252>>>>>>>>>>>>>                If (obj# <> 0 and obj# <> srvr#) Begin
44254>>>>>>>>>>>>>                    Send add_Watched_server obj#
44255>>>>>>>>>>>>>                    Send add_ChangedStateWatched_Servers obj#
44256>>>>>>>>>>>>>                End
44256>>>>>>>>>>>>>>
44256>>>>>>>>>>>>>            End
44256>>>>>>>>>>>>>>
44256>>>>>>>>>>>>>            Else If (file#=0) Begin
44259>>>>>>>>>>>>>                // if no file (e.g., expression) we don't know when it changes so we tell all servers
44259>>>>>>>>>>>>>                // that this is a watcher
44259>>>>>>>>>>>>>                Send WatchAllParentServers srvr#
44260>>>>>>>>>>>>>            End
44260>>>>>>>>>>>>>>
44260>>>>>>>>>>>>>            If File# ;                Send Copy_Item_Options Srvr# file# (Data_Field(Self#,0)) Self# 0
44263>>>>>>>>>>>>>        End
44263>>>>>>>>>>>>>>
44263>>>>>>>>>>>>>        Else Begin  // multiple items - do what you must
44264>>>>>>>>>>>>>            Move -1 to count
44265>>>>>>>>>>>>>            Move "," to fileStr
44266>>>>>>>>>>>>>            If tableFlag Begin
44268>>>>>>>>>>>>>                Get main_file to file#
44269>>>>>>>>>>>>>                If (file# <> srvrfile) Begin    // only do this if mainfile is not the srvr file
44271>>>>>>>>>>>>>                    Append fileStr file# ","   //insert mainfile to be sure it's watched
44273>>>>>>>>>>>>>                    Increment count
44274>>>>>>>>>>>>>                End
44274>>>>>>>>>>>>>>
44274>>>>>>>>>>>>>            End
44274>>>>>>>>>>>>>>
44274>>>>>>>>>>>>>            For i from 0 to maxitems
44280>>>>>>>>>>>>>>
44280>>>>>>>>>>>>>                Get data_file of self# i to file#
44281>>>>>>>>>>>>>                If (file#=0) Begin
44283>>>>>>>>>>>>>                    // as soon as we don't know what the item is used for we will have
44283>>>>>>>>>>>>>                    // to attach to all parent DDOs.
44283>>>>>>>>>>>>>                    Move True to bDoAll
44284>>>>>>>>>>>>>                End
44284>>>>>>>>>>>>>>
44284>>>>>>>>>>>>>                If (file# > 0 and file#<>srvrfile and ;                    not(fileStr contains (","+String(file#)+",")) ) Begin
44286>>>>>>>>>>>>>                    Move (fileStr+String(file#) + ",") to fileStr
44287>>>>>>>>>>>>>                    Increment count
44288>>>>>>>>>>>>>                End
44288>>>>>>>>>>>>>>
44288>>>>>>>>>>>>>                If File# ;                    Send Copy_Item_Options Srvr# file# (Data_Field(Self#,i)) Self# i
44291>>>>>>>>>>>>>            Loop
44292>>>>>>>>>>>>>>
44292>>>>>>>>>>>>>            
44292>>>>>>>>>>>>>            // if an item's binding table is unknown, we watch all parent DDOs.
44292>>>>>>>>>>>>>            If bDoAll Begin
44294>>>>>>>>>>>>>                Send WatchAllParentServers srvr#
44295>>>>>>>>>>>>>            End
44295>>>>>>>>>>>>>>
44295>>>>>>>>>>>>>            Else Begin
44296>>>>>>>>>>>>>                If (count >= 0) Begin // any watched items?
44298>>>>>>>>>>>>>                    Move (Right(fileStr, length(fileStr) - 1))  to fileStr  //remove leading comma
44299>>>>>>>>>>>>>                    For i from 0 to count
44305>>>>>>>>>>>>>>
44305>>>>>>>>>>>>>                        Move (Pos( "," ,fileStr)) to p
44306>>>>>>>>>>>>>                        If (p > 1) Begin
44308>>>>>>>>>>>>>                            Move (Left( fileStr , p-1)) to fStr
44309>>>>>>>>>>>>>                            Move (Right( fileStr, length(fileStr) - p)) to fileStr
44310>>>>>>>>>>>>>                            Move fStr to file#
44311>>>>>>>>>>>>>                            Get which_data_set of srvr# file# to obj#
44312>>>>>>>>>>>>>                            If (obj# <> 0 and obj# <> srvr#) Begin
44314>>>>>>>>>>>>>                                Send add_Watched_server obj#
44315>>>>>>>>>>>>>                                Send add_ChangedStateWatched_Servers obj#
44316>>>>>>>>>>>>>                            End
44316>>>>>>>>>>>>>>
44316>>>>>>>>>>>>>                        End
44316>>>>>>>>>>>>>>
44316>>>>>>>>>>>>>                    Loop
44317>>>>>>>>>>>>>>
44317>>>>>>>>>>>>>                End
44317>>>>>>>>>>>>>>
44317>>>>>>>>>>>>>            End
44317>>>>>>>>>>>>>>
44317>>>>>>>>>>>>>        End
44317>>>>>>>>>>>>>>
44317>>>>>>>>>>>>>    End_Procedure
44318>>>>>>>>>>>>>    
44318>>>>>>>>>>>>>    // This does nothing. Other sub-classes (or later mixins) should add
44318>>>>>>>>>>>>>    // logic to this.
44318>>>>>>>>>>>>>    Procedure Copy_Item_Options Integer iDSO Integer iFile Integer iField ;            Integer iDEO Integer iItem
44320>>>>>>>>>>>>>    End_Procedure
44321>>>>>>>>>>>>>    
44321>>>>>>>>>>>>>    // This does little. Other sub-classes (or later mixins) should add
44321>>>>>>>>>>>>>    // logic to this.
44321>>>>>>>>>>>>>    Procedure Define_Extended_DEO_Mixin
44323>>>>>>>>>>>>>    End_Procedure
44324>>>>>>>>>>>>>    
44324>>>>>>>>>>>>>    
44324>>>>>>>>>>>>>    // created for Nesting support
44324>>>>>>>>>>>>>    Procedure Mark_As_Component
44326>>>>>>>>>>>>>        Integer ser#
44326>>>>>>>>>>>>>        Set Component_State to True
44327>>>>>>>>>>>>>        Delegate Set Has_Components_State to True
44329>>>>>>>>>>>>>        Get private.Server to ser#
44330>>>>>>>>>>>>>        If (ser# = 0) Begin
44332>>>>>>>>>>>>>            Delegate Get Locate_Server to ser#
44334>>>>>>>>>>>>>            If (ser# <> 0) ;                Set private.Server to ser#
44337>>>>>>>>>>>>>        End
44337>>>>>>>>>>>>>>
44337>>>>>>>>>>>>>    End_Procedure
44338>>>>>>>>>>>>>    
44338>>>>>>>>>>>>>    // This only gets called when the developer is killing this object. During application
44338>>>>>>>>>>>>>    // shut-down, only destroy_object is called. This augmentation destroys the watched broadcaster
44338>>>>>>>>>>>>>    // (which is sitting on the desktop). During program shut down we don't care if this is called
44338>>>>>>>>>>>>>    // because it is getting destroyed anyway. We are making the assumption that a developer controlled
44338>>>>>>>>>>>>>    // destroy will always be called with the watcher still existing.
44338>>>>>>>>>>>>>    
44338>>>>>>>>>>>>>    Procedure Destroy
44340>>>>>>>>>>>>>        Handle hoWatched
44340>>>>>>>>>>>>>        Set Changed_State to False //   is this really needed anymore???
44341>>>>>>>>>>>>>        // if non 0, The watched server, must still exist.
44341>>>>>>>>>>>>>        Get Watched_Servers to hoWatched
44342>>>>>>>>>>>>>        If hoWatched Begin
44344>>>>>>>>>>>>>            Set Broadcast_State of hoWatched to False
44345>>>>>>>>>>>>>            Send Destroy of hoWatched     // destroy the bcaster
44346>>>>>>>>>>>>>        End
44346>>>>>>>>>>>>>>
44346>>>>>>>>>>>>>        // if non 0, The bound watched server, must still exist.
44346>>>>>>>>>>>>>        Get ChangedStateWatched_Servers to hoWatched
44347>>>>>>>>>>>>>        If hoWatched Begin
44349>>>>>>>>>>>>>            Set Broadcast_State of hoWatched to False
44350>>>>>>>>>>>>>            Send Destroy of hoWatched     // destroy the bcaster
44351>>>>>>>>>>>>>        End
44351>>>>>>>>>>>>>>
44351>>>>>>>>>>>>>        Forward Send Destroy
44353>>>>>>>>>>>>>    End_Procedure
44354>>>>>>>>>>>>>    
44354>>>>>>>>>>>>>    
44354>>>>>>>>>>>>>    Function Should_Save Returns Integer
44356>>>>>>>>>>>>>        Integer Obj# Chngd
44356>>>>>>>>>>>>>        Get Server to Obj#
44357>>>>>>>>>>>>>        Get Changed_state to Chngd
44358>>>>>>>>>>>>>        Function_Return ( Chngd or (obj# <> 0 and Should_Save(obj#)) )
44359>>>>>>>>>>>>>    End_Function
44360>>>>>>>>>>>>>    
44360>>>>>>>>>>>>>    // Added server scan logic here instead of add_focus.
44360>>>>>>>>>>>>>    Procedure Attach_Deo_To_Server
44362>>>>>>>>>>>>>        Integer obj# isclient srvscn wsrvr
44362>>>>>>>>>>>>>        Get Server to obj#
44363>>>>>>>>>>>>>        Get client_area_state to isclient
44364>>>>>>>>>>>>>        If (obj# <> 0) ;            Send add_user_interface to obj# Self
44367>>>>>>>>>>>>>        Get private.Servers_Scanned to srvscn
44368>>>>>>>>>>>>>        If (srvscn = 0) ;            Send scan_servers
44371>>>>>>>>>>>>>        Get Watched_Servers to wsrvr
44372>>>>>>>>>>>>>        If wsrvr Send add_user_interface ;            to wsrvr Self True // TRUE for watchers
44375>>>>>>>>>>>>>        If (obj# <> 0 and isclient = 0) ;            Send update_dependent_items
44378>>>>>>>>>>>>>    End_Procedure
44379>>>>>>>>>>>>>    
44379>>>>>>>>>>>>>    // Removed server scan logic and moved it to attach-deo_to_server
44379>>>>>>>>>>>>>    Procedure Add_Focus Handle hoParent Returns Integer
44381>>>>>>>>>>>>>        Integer srvscn retval msg
44381>>>>>>>>>>>>>        //
44381>>>>>>>>>>>>>        // standard DEO behavior
44381>>>>>>>>>>>>>        //
44381>>>>>>>>>>>>>        Forward Get msg_Add_Focus hoParent to retval
44383>>>>>>>>>>>>>        If retval ;            Procedure_Return retval
44386>>>>>>>>>>>>>        
44386>>>>>>>>>>>>>        If (client_area_State(Self) = 0) ; //clients already broadcast            Broadcast NO_STOP Send add_focus Self
44391>>>>>>>>>>>>>        //
44391>>>>>>>>>>>>>        // server augmentation
44391>>>>>>>>>>>>>        //
44391>>>>>>>>>>>>>        If (focus_mode(Self) <> NO_ACTIVATE and Active_State(Self)) ;            Send attach_DEO_to_server
44394>>>>>>>>>>>>>        
44394>>>>>>>>>>>>>        // last thing to do is send custom message. With list deos
44394>>>>>>>>>>>>>        // msg is probably initialize_list. With non-list deos it
44394>>>>>>>>>>>>>        // is probably nothing
44394>>>>>>>>>>>>>        Get add_focus_msg to msg
44395>>>>>>>>>>>>>        If msg ;            Send msg
44398>>>>>>>>>>>>>    End_Procedure
44399>>>>>>>>>>>>>    
44399>>>>>>>>>>>>>    // Connect DEO to Server if Demanded (DoAllfg=t) or ;
44399>>>>>>>>>>>>>    // allowed  (static_server_State=t). Broadcast if children exist
44399>>>>>>>>>>>>>    Procedure Connect_DEOs_to_Servers Integer DoAllFg
44401>>>>>>>>>>>>>        If (DoAllfg or Static_Server_State(Self)) ;            Send Attach_Deo_to_Server
44404>>>>>>>>>>>>>        If (Has_Components_State(Self)) ;            Broadcast Send Connect_DEOs_to_Servers DoAllfg
44408>>>>>>>>>>>>>    End_Procedure
44409>>>>>>>>>>>>>    
44409>>>>>>>>>>>>>    // Disconnect DEOs from Servers according to rules. Broadcast
44409>>>>>>>>>>>>>    // to child components.
44409>>>>>>>>>>>>>    //
44409>>>>>>>>>>>>>    // Pass: DoAllMode
44409>>>>>>>>>>>>>    //    DETACH_NEVER        Never
44409>>>>>>>>>>>>>    //    DETACH_IF_NO_CHANGE Do if changed_state=F
44409>>>>>>>>>>>>>    //    DETACH_ALWAYS       Do it no matter what
44409>>>>>>>>>>>>>    //    DETACH_IF_ALLOWED   Do if changed_state=F and auto_attach
44409>>>>>>>>>>>>>    //                        (I don't think this will be needed!)
44409>>>>>>>>>>>>>    //
44409>>>>>>>>>>>>>    Procedure Disconnect_DEOs_from_Servers Integer DoAllMode
44411>>>>>>>>>>>>>        If (DoAllMode <> DETACH_NEVER) Begin
44413>>>>>>>>>>>>>            If ( DoAllMode=DETACH_ALWAYS or ; // do all no matter what                ( (Changed_state(Self)=0) and ;                ( (DoAllMode=DETACH_IF_NO_CHANGE) or  ;                (Static_Server_State(Self)) ) ) ) ;                Send Remove_deo_from_server
44416>>>>>>>>>>>>>            If (Has_Components_State(Self)) ;                Broadcast Send Disconnect_DEOs_from_Servers DoAllMode
44420>>>>>>>>>>>>>        End
44420>>>>>>>>>>>>>>
44420>>>>>>>>>>>>>    End_Procedure
44421>>>>>>>>>>>>>    
44421>>>>>>>>>>>>>    // Changed to not remove from server if static.
44421>>>>>>>>>>>>>    Procedure Remove_Object
44423>>>>>>>>>>>>>        Forward Send remove_object
44425>>>>>>>>>>>>>        // remove if not static and no changes
44425>>>>>>>>>>>>>        If ( Static_Server_State(Self)=0 and ;            Changed_State(Self)=0 ) ;  // only detach if unchanged!            Send remove_DEO_from_server
44428>>>>>>>>>>>>>    End_Procedure
44429>>>>>>>>>>>>>    
44429>>>>>>>>>>>>>    
44429>>>>>>>>>>>>>    // (JJT) Changed so that this respects Change_disabled_state. I don't
44429>>>>>>>>>>>>>    //       like this here but its the best I can think of. Therefore, all
44429>>>>>>>>>>>>>    //       objects using server.pkg must understand Change_disabled_state.
44429>>>>>>>>>>>>>    //
44429>>>>>>>>>>>>>    // (JJT) Checks deferred_state and if set do not change the
44429>>>>>>>>>>>>>    // changed state of the server object. This had been in datalist and is
44429>>>>>>>>>>>>>    // required to make deferred_state work right. Deferred_state was created
44429>>>>>>>>>>>>>    // to make selection-lists work correctly and as far as I am concerned it
44429>>>>>>>>>>>>>    // should be the only supported use of this. Therefore, I would not *ever*
44429>>>>>>>>>>>>>    // expect deferred_state to be set true in tables, entry_forms, or text_
44429>>>>>>>>>>>>>    // windows. Since deferred-state is known to this mixin the change
44429>>>>>>>>>>>>>    // belongs here - but I expect it to only ever change behaviors in
44429>>>>>>>>>>>>>    // selection-lists.
44429>>>>>>>>>>>>>    
44429>>>>>>>>>>>>>    
44429>>>>>>>>>>>>>    // Changed to not remove from server if static.
44429>>>>>>>>>>>>>    Procedure Set Changed_State Integer newVal
44431>>>>>>>>>>>>>        Integer srvr# wsrvr
44431>>>>>>>>>>>>>        If not (Change_Disabled_State(Self)) Begin
44433>>>>>>>>>>>>>            Forward Set Changed_State to newVal
44435>>>>>>>>>>>>>            Get server to srvr#
44436>>>>>>>>>>>>>            
44436>>>>>>>>>>>>>            // if deferred keep the server out of it.
44436>>>>>>>>>>>>>            If not (deferred_State(Self)) Begin
44438>>>>>>>>>>>>>                If (newVal and srvr#) Begin
44440>>>>>>>>>>>>>                    Set Changed_State of srvr# to True
44441>>>>>>>>>>>>>                    // We also set changed_state of all "foreign" servers. These
44441>>>>>>>>>>>>>                    // are the ones whose Data_File is a parent File
44441>>>>>>>>>>>>>                    Get ChangedStateWatched_Servers to wsrvr
44442>>>>>>>>>>>>>                    If wsrvr ;                        Set Changed_State of wSrvr to True
44445>>>>>>>>>>>>>                End
44445>>>>>>>>>>>>>>
44445>>>>>>>>>>>>>                
44445>>>>>>>>>>>>>                // Remove is changed-state=false, not active and not static
44445>>>>>>>>>>>>>                If ( not(newVal) and not(Active_State(Self)) and ;                    not(Static_Server_State(Self)) ) ;                    Send remove_DEO_from_Server
44448>>>>>>>>>>>>>            End
44448>>>>>>>>>>>>>>
44448>>>>>>>>>>>>>        End
44448>>>>>>>>>>>>>>
44448>>>>>>>>>>>>>    End_Procedure
44449>>>>>>>>>>>>>    
44449>>>>>>>>>>>>>    // When an object is created this sets the default value for
44449>>>>>>>>>>>>>    // Static_Server_state. If a parent DEO exists it will use its
44449>>>>>>>>>>>>>    // static_server_state property. An Entry_view_Client0 object sets
44449>>>>>>>>>>>>>    // this - this way view based daf programs will use the new behavior
44449>>>>>>>>>>>>>    // (although it can be disabled)  but non-daf programs will work like
44449>>>>>>>>>>>>>    // they always did.
44449>>>>>>>>>>>>>    Function Default_Static_Server_State Returns Integer
44451>>>>>>>>>>>>>        Integer rVal
44451>>>>>>>>>>>>>        // We delegate to get the actual (not default) static state
44451>>>>>>>>>>>>>        // Note: Can't check with component_state - it not defined yet
44451>>>>>>>>>>>>>        Delegate Get Static_Server_State to rVal
44453>>>>>>>>>>>>>        Function_Return rVal
44454>>>>>>>>>>>>>    End_Function
44455>>>>>>>>>>>>>    
44455>>>>>>>>>>>>>    // This adds every parent DDO for the passed DDO to the DEO's list of DDOs to watch.
44455>>>>>>>>>>>>>    // It adds the parents and then does this recursively up the DDO tree.
44455>>>>>>>>>>>>>    // This means that this DEO will respond to any DD change for any server. This does not
44455>>>>>>>>>>>>>    Procedure WatchAllParentServers Handle hoDDO
44457>>>>>>>>>>>>>        Handle hoSrvr
44457>>>>>>>>>>>>>        Integer iServer iServers
44457>>>>>>>>>>>>>        Get Data_Set_Server_Count of hoDDO to iServers
44458>>>>>>>>>>>>>        For iServer from 0 to (iServers-1)
44464>>>>>>>>>>>>>>
44464>>>>>>>>>>>>>            Get Data_Set_Server of hoDDO iServer to hoSrvr
44465>>>>>>>>>>>>>            Send Add_Watched_Server hoSrvr
44466>>>>>>>>>>>>>            Send WatchAllParentServers hoSrvr
44467>>>>>>>>>>>>>        Loop
44468>>>>>>>>>>>>>>
44468>>>>>>>>>>>>>    End_Procedure
44469>>>>>>>>>>>>>    
44469>>>>>>>>>>>>>    
44469>>>>>>>>>>>>>End_Class
44470>>>>>>>>>>>>>
44470>>>>>>>>>>>>>//
44470>>>>>>>>>>>>>// The use of using on an object name is no longer supported. We will check for it's usage in case
44470>>>>>>>>>>>>>// developer's use this in old code.
44470>>>>>>>>>>>>>// Insetad of using, one should use "Set Server"
44470>>>>>>>>>>>>>//
44470>>>>>>>>>>>>>
44470>>>>>>>>>>>Use VERIFY.pkg        //include Verification support module
Including file: verify.pkg    (C:\Program Files\DataFlex 24.0\Pkg\verify.pkg)
44470>>>>>>>>>>>>>Use VDFBase.pkg
44470>>>>>>>>>>>>>
44470>>>>>>>>>>>>>Register_Function Component_State Returns Integer
44470>>>>>>>>>>>>>
44470>>>>>>>>>>>>>
44470>>>>>>>>>>>>>Class verify_mixin is a mixin
44471>>>>>>>>>>>>>    Procedure define_verify
44473>>>>>>>>>>>>>        Property Integer private.Verify_Save_Msg      0
44474>>>>>>>>>>>>>        Property Integer private.Verify_Delete_Msg    0
44475>>>>>>>>>>>>>        Property Integer private.Verify_Data_Loss_Msg 0
44476>>>>>>>>>>>>>    End_Procedure
44477>>>>>>>>>>>>>    
44477>>>>>>>>>>>>>    
44477>>>>>>>>>>>>>    Procedure Set Verify_Save_msg Integer val
44479>>>>>>>>>>>>>        Set private.Verify_Save_Msg to val
44480>>>>>>>>>>>>>    End_Procedure
44481>>>>>>>>>>>>>    
44481>>>>>>>>>>>>>    Procedure Set Verify_Delete_msg Integer val
44483>>>>>>>>>>>>>        Set private.Verify_Delete_Msg to val
44484>>>>>>>>>>>>>    End_Procedure
44485>>>>>>>>>>>>>    
44485>>>>>>>>>>>>>    Procedure Set Verify_Data_Loss_msg Integer val
44487>>>>>>>>>>>>>        Set private.Verify_Data_Loss_Msg to val
44488>>>>>>>>>>>>>    End_Procedure
44489>>>>>>>>>>>>>    
44489>>>>>>>>>>>>>    Function Verify_Save_msg Returns Integer
44491>>>>>>>>>>>>>        Integer retval
44491>>>>>>>>>>>>>        Get private.Verify_Save_Msg to retval
44492>>>>>>>>>>>>>        If (retval = 0 and Component_State(Self)) ;            Delegate Get Verify_Save_Msg to retval
44496>>>>>>>>>>>>>        Function_Return retval
44497>>>>>>>>>>>>>    End_Function
44498>>>>>>>>>>>>>    
44498>>>>>>>>>>>>>    Function Verify_Delete_msg Returns Integer
44500>>>>>>>>>>>>>        Integer retval
44500>>>>>>>>>>>>>        Get private.Verify_Delete_Msg to retval
44501>>>>>>>>>>>>>        If (retval = 0 and Component_State(Self)) ;            Delegate Get Verify_Delete_Msg to retval
44505>>>>>>>>>>>>>        Function_Return retval
44506>>>>>>>>>>>>>    End_Function
44507>>>>>>>>>>>>>    
44507>>>>>>>>>>>>>    
44507>>>>>>>>>>>>>    Function Verify_Data_Loss_msg Returns Integer
44509>>>>>>>>>>>>>        Integer retval
44509>>>>>>>>>>>>>        Get private.Verify_Data_Loss_Msg to retval
44510>>>>>>>>>>>>>        If (retval = 0 and Component_State(Self)) ;            Delegate Get Verify_Data_Loss_Msg to retval
44514>>>>>>>>>>>>>        Function_Return retval
44515>>>>>>>>>>>>>    End_Function
44516>>>>>>>>>>>>>    
44516>>>>>>>>>>>>>    Function Verify_Save Returns Integer
44518>>>>>>>>>>>>>        Integer msg# retval
44518>>>>>>>>>>>>>        Get Verify_Save_Msg to msg#
44519>>>>>>>>>>>>>        If (msg# <> 0) Begin
44521>>>>>>>>>>>>>            Get msg# to retval
44522>>>>>>>>>>>>>            Function_Return retval
44523>>>>>>>>>>>>>        End
44523>>>>>>>>>>>>>>
44523>>>>>>>>>>>>>    End_Function
44524>>>>>>>>>>>>>    
44524>>>>>>>>>>>>>    Function Verify_Delete Returns Integer
44526>>>>>>>>>>>>>        Integer msg# retval
44526>>>>>>>>>>>>>        Get Verify_Delete_Msg to msg#
44527>>>>>>>>>>>>>        If (msg# <> 0) Begin
44529>>>>>>>>>>>>>            Get msg# to retval
44530>>>>>>>>>>>>>            Function_Return retval
44531>>>>>>>>>>>>>        End
44531>>>>>>>>>>>>>>
44531>>>>>>>>>>>>>    End_Function
44532>>>>>>>>>>>>>    
44532>>>>>>>>>>>>>    Function Verify_Data_Loss Returns Integer
44534>>>>>>>>>>>>>        Integer msg# retval
44534>>>>>>>>>>>>>        Get Verify_Data_Loss_Msg to msg#
44535>>>>>>>>>>>>>        If (msg# <> 0) Begin
44537>>>>>>>>>>>>>            Get msg# to retval
44538>>>>>>>>>>>>>            Function_Return retval
44539>>>>>>>>>>>>>        End
44539>>>>>>>>>>>>>>
44539>>>>>>>>>>>>>    End_Function
44540>>>>>>>>>>>>>    
44540>>>>>>>>>>>>>End_Class
44541>>>>>>>>>>>Use ACTIONBR.pkg      //include action-bar support module
Including file: Actionbr.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Actionbr.pkg)
44541>>>>>>>>>>>>>Use VDFBase.pkg
44541>>>>>>>>>>>>>
44541>>>>>>>>>>>>>Class Action_Bar_Mixin is a mixin
44542>>>>>>>>>>>>>    Procedure Define_Action_bar
44544>>>>>>>>>>>>>    End_Procedure
44545>>>>>>>>>>>>>    
44545>>>>>>>>>>>>>    Procedure Define_Access_Keys
44547>>>>>>>>>>>>>    End_Procedure
44548>>>>>>>>>>>>>    
44548>>>>>>>>>>>>>    Procedure Add_Action_bar
44550>>>>>>>>>>>>>    End_Procedure
44551>>>>>>>>>>>>>End_Class
44552>>>>>>>>>>>>>
44552>>>>>>>>>>>>>
44552>>>>>>>>>>>>>
44552>>>>>>>>>>>Use AutoLcMx.pkg   // Auto locate of popup mixin
44552>>>>>>>>>>>Use DEODlgMx.pkg   // DEO delegation support
Including file: deodlgmx.pkg    (C:\Program Files\DataFlex 24.0\Pkg\deodlgmx.pkg)
44552>>>>>>>>>>>>>Use VDFBase.pkg
44552>>>>>>>>>>>>>
44552>>>>>>>>>>>>>Enum_List
44552>>>>>>>>>>>>>    Define DELEGATE_NEVER
44552>>>>>>>>>>>>>    Define DELEGATE_SERVER
44552>>>>>>>>>>>>>    Define DELEGATE_ALWAYS
44552>>>>>>>>>>>>>End_Enum_List
44552>>>>>>>>>>>>>
44552>>>>>>>>>>>>>
44552>>>>>>>>>>>>>Register_Function component_state Returns Integer
44552>>>>>>>>>>>>>
44552>>>>>>>>>>>>>Class deo_delegate_mixin is a mixin
44553>>>>>>>>>>>>>    Procedure define_deo_delegate
44555>>>>>>>>>>>>>        
44555>>>>>>>>>>>>>        Property Integer DEO_Delegate_Mode     Delegate_Server
44556>>>>>>>>>>>>>        
44556>>>>>>>>>>>>>        Property Integer delegate_clear_state  True
44557>>>>>>>>>>>>>        
44557>>>>>>>>>>>>>        Property Integer delegate_delete_state True
44558>>>>>>>>>>>>>        
44558>>>>>>>>>>>>>        Property Integer delegate_find_state   False
44559>>>>>>>>>>>>>        
44559>>>>>>>>>>>>>        Property Integer delegate_save_state   True
44560>>>>>>>>>>>>>    End_Procedure
44561>>>>>>>>>>>>>    
44561>>>>>>>>>>>>>    Function should_delegate Returns Integer
44563>>>>>>>>>>>>>        Integer Mode Dlg_Obj
44563>>>>>>>>>>>>>        
44563>>>>>>>>>>>>>        Delegate Get Object_Id to Dlg_Obj
44565>>>>>>>>>>>>>        Get Deo_Delegate_Mode to Mode
44566>>>>>>>>>>>>>        Function_Return ( (((Mode = DELEGATE_SERVER) and ;            not(Explicit_Server_State(Self)) and ;            (Locate_Server(Self) <> Dlg_Obj)) or ; // don't delegate if the object to delegate to is a server.            (Mode = DELEGATE_ALWAYS)) and Component_State(Self))
44567>>>>>>>>>>>>>    End_Function
44568>>>>>>>>>>>>>    
44568>>>>>>>>>>>>>    Function Should_delegate_Clear Returns Integer
44570>>>>>>>>>>>>>        Function_Return (should_delegate(Self) and ;            delegate_clear_state(Self))
44571>>>>>>>>>>>>>    End_Function
44572>>>>>>>>>>>>>    
44572>>>>>>>>>>>>>    Function Should_delegate_Save Returns Integer
44574>>>>>>>>>>>>>        Function_Return (should_delegate(Self) and ;            delegate_Save_state(Self))
44575>>>>>>>>>>>>>    End_Function
44576>>>>>>>>>>>>>    
44576>>>>>>>>>>>>>    Function Should_delegate_Delete Returns Integer
44578>>>>>>>>>>>>>        Function_Return (should_delegate(Self) and ;            delegate_delete_state(Self))
44579>>>>>>>>>>>>>    End_Function
44580>>>>>>>>>>>>>    
44580>>>>>>>>>>>>>    Function Should_delegate_Find Returns Integer
44582>>>>>>>>>>>>>        Function_Return (should_delegate(Self) and ;            delegate_Find_state(Self))
44583>>>>>>>>>>>>>    End_Function
44584>>>>>>>>>>>>>    
44584>>>>>>>>>>>>>End_Class
44585>>>>>>>>>>>>>
44585>>>>>>>>>>>>>//  During a clear (or a save/delete which sends clear) object-validation is
44585>>>>>>>>>>>>>//  properly shut off. However, the false assumption had been made that the
44585>>>>>>>>>>>>>//  DEO request_clear/clear_all messages originated with the object that had
44585>>>>>>>>>>>>>//  the focus. This was never true and is now even less likely to be true
44585>>>>>>>>>>>>>//  with the request_??? delegation method. The proper solution is to shut
44585>>>>>>>>>>>>>//  off object-validation in the focus object. The problem here is that
44585>>>>>>>>>>>>>//  the focus object may not understand this message (text_windows, buttons,
44585>>>>>>>>>>>>>//  etc). The work-around for now is to make sure that all objects understand
44585>>>>>>>>>>>>>//  these message. We can not directly add an Object_Validation message to the
44585>>>>>>>>>>>>>//  desktop (Object class). Because this message is internal this didn't work.
44585>>>>>>>>>>>>>//  By default this does nothing. Objects using val_mx actually pass this on
44585>>>>>>>>>>>>>//  object_validation.
44585>>>>>>>>>>>>>
44585>>>>>>>>>>>>>Procedure Set Object_Item_validation for cUIObject Integer fg
44587>>>>>>>>>>>>>End_Procedure
44588>>>>>>>>>>>>>
44588>>>>>>>>>>>>>Function Object_Item_Validation for cUIObject Returns Integer
44590>>>>>>>>>>>>>End_Function
44591>>>>>>>>>>>
44591>>>>>>>>>>>Register_Procedure Refind_DD_Records
44591>>>>>>>>>>>
44591>>>>>>>>>>>Class Entry_Client_mixin is a mixin
44592>>>>>>>>>>>
44592>>>>>>>>>>>    Procedure Construct_Object Integer myImg
44594>>>>>>>>>>>        Forward Send construct_object myImg
44596>>>>>>>>>>>        Set Ring_State to False
44597>>>>>>>>>>>        Property Integer private.Changed_State 0
44598>>>>>>>>>>>        
44598>>>>>>>>>>>        // We need this property to fully emulate a DEO
44598>>>>>>>>>>>        // (Actually, entry_clients should realy support ALL the DEO messages!)
44598>>>>>>>>>>>        Property Integer Auto_Clear_DEO_State True
44599>>>>>>>>>>>        
44599>>>>>>>>>>>        Send define_nesting      //invoke DEO nesting standard support constructor
44600>>>>>>>>>>>        Send define_navigation   //invoke DEO navigation standard support constructor
44601>>>>>>>>>>>        Send define_server       //invoke Server support constructor
44602>>>>>>>>>>>        Send define_action_bar   //invoke action-bar support constructor
44603>>>>>>>>>>>        Send define_verify       //invoke Verification support constructor
44604>>>>>>>>>>>        Send define_DEO_Delegate
44605>>>>>>>>>>>        Send Define_Auto_Locate
44606>>>>>>>>>>>        
44606>>>>>>>>>>>    End_Procedure
44607>>>>>>>>>>>    
44607>>>>>>>>>>>    Import_Class_Protocol NESTING_Mixin
44608>>>>>>>>>>>    Import_Class_Protocol NAVIGATE_Mixin
44609>>>>>>>>>>>    Import_Class_Protocol SERVER_Mixin
44610>>>>>>>>>>>    Import_Class_Protocol VERIFY_Mixin
44611>>>>>>>>>>>    Import_Class_Protocol ACTION_BAR_Mixin
44612>>>>>>>>>>>    Import_Class_Protocol Auto_Locate_Mixin
44613>>>>>>>>>>>    Import_Class_Protocol Deo_Delegate_Mixin
44614>>>>>>>>>>>    
44614>>>>>>>>>>>    
44614>>>>>>>>>>>    //
44614>>>>>>>>>>>    // created for Server support
44614>>>>>>>>>>>    //
44614>>>>>>>>>>>    Procedure Display
44616>>>>>>>>>>>        Broadcast Send display
44618>>>>>>>>>>>    End_Procedure
44619>>>>>>>>>>>    
44619>>>>>>>>>>>    //
44619>>>>>>>>>>>    // created for Server support
44619>>>>>>>>>>>    //
44619>>>>>>>>>>>    Procedure Clear
44621>>>>>>>>>>>        Broadcast Send Clear
44623>>>>>>>>>>>    End_Procedure
44624>>>>>>>>>>>    
44624>>>>>>>>>>>    //
44624>>>>>>>>>>>    // created for Server support
44624>>>>>>>>>>>    //
44624>>>>>>>>>>>    Procedure Clear_Set
44626>>>>>>>>>>>        Broadcast Send clear_set
44628>>>>>>>>>>>    End_Procedure
44629>>>>>>>>>>>    
44629>>>>>>>>>>>    //
44629>>>>>>>>>>>    // created for property support
44629>>>>>>>>>>>    //
44629>>>>>>>>>>>    Function Changed_State Returns Integer
44631>>>>>>>>>>>        Integer retval
44631>>>>>>>>>>>        Get Private.Changed_State to retval
44632>>>>>>>>>>>        Function_Return retval
44633>>>>>>>>>>>    End_Function
44634>>>>>>>>>>>    
44634>>>>>>>>>>>    //
44634>>>>>>>>>>>    // cancelled from Server mixin
44634>>>>>>>>>>>    //
44634>>>>>>>>>>>    Procedure Set Changed_State Integer newVal
44636>>>>>>>>>>>    End_Procedure
44637>>>>>>>>>>>    
44637>>>>>>>>>>>    //
44637>>>>>>>>>>>    // created for EntItem convenience
44637>>>>>>>>>>>    //
44637>>>>>>>>>>>    Procedure Entry_Clear Integer file#
44639>>>>>>>>>>>        If (Has_Components_State(Self)) ;            Broadcast Send Entry_Clear file#
44643>>>>>>>>>>>    End_Procedure
44644>>>>>>>>>>>    
44644>>>>>>>>>>>    //
44644>>>>>>>>>>>    // created for EntItem convenience
44644>>>>>>>>>>>    //
44644>>>>>>>>>>>    Procedure Entry_Clear_All Integer file#
44646>>>>>>>>>>>        If (Has_Components_State(Self)) ;            Broadcast Send Entry_Clear_All file#
44650>>>>>>>>>>>    End_Procedure
44651>>>>>>>>>>>    
44651>>>>>>>>>>>    //
44651>>>>>>>>>>>    // created for EntItem convenience
44651>>>>>>>>>>>    //
44651>>>>>>>>>>>    Procedure Entry_Display Integer file# Integer flag
44653>>>>>>>>>>>        If (Has_Components_State(Self)) ;            Broadcast Send Entry_Display file# flag
44657>>>>>>>>>>>    End_Procedure
44658>>>>>>>>>>>    
44658>>>>>>>>>>>    Procedure End_Construct_Object
44660>>>>>>>>>>>        Send Mark_Components      // nesting
44661>>>>>>>>>>>        Send Define_Access_Keys 0 // action_bar_keys
44662>>>>>>>>>>>        Forward Send End_Construct_Object
44664>>>>>>>>>>>    End_Procedure
44665>>>>>>>>>>>    
44665>>>>>>>>>>>    // Added for deo delegate support
44665>>>>>>>>>>>    Procedure Request_Clear
44667>>>>>>>>>>>        Integer obj# retval foc
44667>>>>>>>>>>>        If (should_delegate_clear(Self)) ;            Delegate Send request_clear
44671>>>>>>>>>>>        Else Begin
44672>>>>>>>>>>>            Get Locate_Server to obj# // locate needed in case this is a DSO
44673>>>>>>>>>>>            If (should_save(Self) and ;                (Verify_Data_Loss(Self) <> 0)) ;                Procedure_Return
44676>>>>>>>>>>>            
44676>>>>>>>>>>>            Get Focus of desktop to Foc
44677>>>>>>>>>>>            Get Object_Item_Validation of Foc to retval
44678>>>>>>>>>>>            Set Object_Item_Validation of Foc to False
44679>>>>>>>>>>>            
44679>>>>>>>>>>>            If (obj# <> 0) ;                Send Clear to obj#
44682>>>>>>>>>>>            Else ;                Send entry_clear 0
44684>>>>>>>>>>>            If (Auto_Top_Panel_State(Self)) ;                Send beginning_of_panel
44687>>>>>>>>>>>            Set Object_Item_Validation of Foc to retval
44688>>>>>>>>>>>        End
44688>>>>>>>>>>>>
44688>>>>>>>>>>>    End_Procedure
44689>>>>>>>>>>>    
44689>>>>>>>>>>>    Procedure Request_Clear_All
44691>>>>>>>>>>>        Integer obj# retval foc
44691>>>>>>>>>>>        If (should_delegate_clear(Self)) ;            Delegate Send request_clear_all
44695>>>>>>>>>>>        Else Begin
44696>>>>>>>>>>>            Get Locate_Server to obj#
44697>>>>>>>>>>>            If (Should_Save(Self) and ;                (Verify_Data_Loss(Self) <> 0)) ;                Procedure_Return
44700>>>>>>>>>>>            
44700>>>>>>>>>>>            Get Focus of desktop to Foc
44701>>>>>>>>>>>            Get Object_Item_Validation of Foc to retval
44702>>>>>>>>>>>            Set Object_Item_Validation of Foc to False
44703>>>>>>>>>>>            
44703>>>>>>>>>>>            If (obj# <> 0) ;                Send clear_all to obj#
44706>>>>>>>>>>>            Else ;                Send entry_clear_all 0
44708>>>>>>>>>>>            If (Auto_Top_Panel_State(Self)) ;                Send beginning_of_panel
44711>>>>>>>>>>>            Set Object_Item_Validation of Foc to retval
44712>>>>>>>>>>>        End
44712>>>>>>>>>>>>
44712>>>>>>>>>>>    End_Procedure
44713>>>>>>>>>>>    
44713>>>>>>>>>>>    Procedure Request_Delete
44715>>>>>>>>>>>        Integer obj#
44715>>>>>>>>>>>        
44715>>>>>>>>>>>        If (should_delegate_delete(Self)) ;            Delegate Send request_delete
44719>>>>>>>>>>>        Else Begin
44720>>>>>>>>>>>            Move False to Err
44721>>>>>>>>>>>            Get Locate_Server to obj#
44722>>>>>>>>>>>            If (obj# <> 0 and can_delete(obj#) <> 0) Begin
44724>>>>>>>>>>>                If (Verify_Delete(Self) <> 0) ;                    Procedure_Return
44727>>>>>>>>>>>                Set changed_State to False
44728>>>>>>>>>>>                If (Deferred_State(Self)) ;                    Send Request_Assign to obj# 0  //0 means main_file of Server
44731>>>>>>>>>>>                Send Request_Delete to obj#
44732>>>>>>>>>>>                // ignore auto_clear_deo_state in deletes. Always clear deleted record
44732>>>>>>>>>>>                If (not(err)) ;                    Send Request_Clear
44735>>>>>>>>>>>            End
44735>>>>>>>>>>>>
44735>>>>>>>>>>>        End
44735>>>>>>>>>>>>
44735>>>>>>>>>>>    End_Procedure
44736>>>>>>>>>>>    
44736>>>>>>>>>>>    Procedure Request_Find Integer mode Integer entUpdtFlag
44738>>>>>>>>>>>        If (should_delegate_find(Self)) ;            Delegate Send request_find mode entUpdtFlag
44742>>>>>>>>>>>        Else Begin // for now don't support any default find behavior
44743>>>>>>>>>>>            // in clients
44743>>>>>>>>>>>            Procedure_Return
44744>>>>>>>>>>>        End
44744>>>>>>>>>>>>
44744>>>>>>>>>>>    End_Procedure
44745>>>>>>>>>>>    
44745>>>>>>>>>>>    Procedure Request_Save
44747>>>>>>>>>>>        Integer obj# retval
44747>>>>>>>>>>>        
44747>>>>>>>>>>>        If (should_delegate_save(Self)) ;            Delegate Send request_save
44751>>>>>>>>>>>        Else Begin
44752>>>>>>>>>>>            Get Locate_Server to obj#
44753>>>>>>>>>>>            
44753>>>>>>>>>>>            If (obj# <> 0 and not(Read_Only_State(obj#))) Begin
44755>>>>>>>>>>>                Move False to Err
44756>>>>>>>>>>>                
44756>>>>>>>>>>>                If (Should_Save(Self)) Begin
44758>>>>>>>>>>>                    Get Request_Validate of obj# to retval
44759>>>>>>>>>>>                    If (retval <> 0) ;                        Procedure_Return
44762>>>>>>>>>>>                    //
44762>>>>>>>>>>>                    // modification for Verify support
44762>>>>>>>>>>>                    //
44762>>>>>>>>>>>                    If (Verify_Save(Self) <> 0) ;                        Procedure_Return
44765>>>>>>>>>>>                    //
44765>>>>>>>>>>>                    // modification for Save support
44765>>>>>>>>>>>                    //
44765>>>>>>>>>>>                    If (Deferred_State(Self)) ;                        Send Request_Assign to obj# 0  //0 means main_file of server
44768>>>>>>>>>>>                    
44768>>>>>>>>>>>                    Send Request_Save to obj#
44769>>>>>>>>>>>                End
44769>>>>>>>>>>>>
44769>>>>>>>>>>>                //
44769>>>>>>>>>>>                If (not(err) and Auto_Clear_DEO_State(Self)) ;                    Send Request_Clear
44772>>>>>>>>>>>            End
44772>>>>>>>>>>>>
44772>>>>>>>>>>>        End
44772>>>>>>>>>>>>
44772>>>>>>>>>>>    End_Procedure
44773>>>>>>>>>>>    
44773>>>>>>>>>>>    // this allows us to save a record without it clearing regardless of
44773>>>>>>>>>>>    // the Auto_Clear_DEO_State value
44773>>>>>>>>>>>    //
44773>>>>>>>>>>>    Procedure Request_Save_No_Clear
44775>>>>>>>>>>>        Integer oldclr
44775>>>>>>>>>>>        If (should_delegate_save(Self)) ;            Delegate Send request_save_no_clear
44779>>>>>>>>>>>        Else Begin
44780>>>>>>>>>>>            Get Auto_Clear_DEO_State to OldClr  // whatever it was
44781>>>>>>>>>>>            Set Auto_Clear_DEO_State to False   // it is no NO!
44782>>>>>>>>>>>            Send request_save                   // do your magic
44783>>>>>>>>>>>            Set Auto_Clear_DEO_State to OldClr  // back to whatever it was
44784>>>>>>>>>>>        End
44784>>>>>>>>>>>>
44784>>>>>>>>>>>    End_Procedure
44785>>>>>>>>>>>    
44785>>>>>>>>>>>    Procedure Request_Superfind Integer mode
44787>>>>>>>>>>>        Integer ser# datafile
44787>>>>>>>>>>>        
44787>>>>>>>>>>>        If (should_delegate_find(Self)) ;            Delegate Send request_superfind mode
44791>>>>>>>>>>>        Else Begin
44792>>>>>>>>>>>            Procedure_Return
44793>>>>>>>>>>>        End
44793>>>>>>>>>>>>
44793>>>>>>>>>>>    End_Procedure
44794>>>>>>>>>>>    
44794>>>>>>>>>>>    //  Augment to Support AutoLocate.
44794>>>>>>>>>>>    //  This replaces (not augments) the procedure in actionbr. We need
44794>>>>>>>>>>>    //  to look into this (activating is very risky to augment activating
44794>>>>>>>>>>>    //  in mixins).
44794>>>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
44794>>>>>>>>>>>    Procedure Activating // Returns Integer
44796>>>>>>>>>>>        Integer InvokingId RVal
44796>>>>>>>>>>>        Get Focus of desktop to InvokingId
44797>>>>>>>>>>>        //
44797>>>>>>>>>>>        Forward Get MSG_activating to rVal   //  This is the standard
44799>>>>>>>>>>>        If rVal ;            Procedure_Return rVal        //  actionbr activating
44802>>>>>>>>>>>        Send Add_action_bar                  //  logic
44803>>>>>>>>>>>        If (Auto_Locate_State(Self) ) ;            Send Auto_Locate InvokingId
44806>>>>>>>>>>>    End_Procedure
44807>>>>>>>>>>>    
44807>>>>>>>>>>>    // add this so that all db clients delegate this message.
44807>>>>>>>>>>>    // this is used to catch sub-views (tabview). Tab views (sub
44807>>>>>>>>>>>    // views) will augment this to do something useful
44807>>>>>>>>>>>    Function SubView_Changed Returns Integer
44809>>>>>>>>>>>        Integer hObj
44809>>>>>>>>>>>        Broadcast Get SubView_Changed to hObj
44811>>>>>>>>>>>        Function_Return hObj
44812>>>>>>>>>>>    End_Function
44813>>>>>>>>>>>    
44813>>>>>>>>>>>    // these are needed to pass these on to possible tabview.
44813>>>>>>>>>>>    Function Opening_view_Recursive Returns Integer
44815>>>>>>>>>>>        Integer bFail
44815>>>>>>>>>>>        Broadcast Get Opening_View_Recursive to bFail
44817>>>>>>>>>>>        Function_Return bFail
44818>>>>>>>>>>>    End_Function
44819>>>>>>>>>>>    
44819>>>>>>>>>>>    // these are needed to pass these on to possible tabview.
44819>>>>>>>>>>>    Procedure Seed_Data_Sets_Recursive
44821>>>>>>>>>>>        Broadcast Send Seed_Data_Sets_Recursive
44823>>>>>>>>>>>    End_Procedure
44824>>>>>>>>>>>    
44824>>>>>>>>>>>    // as of 17.0, clients are added to a DDOs DEO list, which means they receive the messages
44824>>>>>>>>>>>    // Refresh, Validate_Items and Entry_Update. These are stubs. The Refresh message is the one
44824>>>>>>>>>>>    // that will be useful. A developer can use this to process DD changes within a view or other
44824>>>>>>>>>>>    // container
44824>>>>>>>>>>>    
44824>>>>>>>>>>>    Procedure Refresh Integer eMode
44826>>>>>>>>>>>    End_Procedure
44827>>>>>>>>>>>    
44827>>>>>>>>>>>    Function Validate_Items Returns Integer
44829>>>>>>>>>>>    End_Function
44830>>>>>>>>>>>    
44830>>>>>>>>>>>    Procedure Entry_Update Integer file# Integer flag
44832>>>>>>>>>>>    End_Procedure
44833>>>>>>>>>>>    
44833>>>>>>>>>>>    Function Data_File Integer iItem Returns Integer
44835>>>>>>>>>>>        Function_Return 0
44836>>>>>>>>>>>    End_Function
44837>>>>>>>>>>>    
44837>>>>>>>>>>>    Function Data_Field Integer iItem Returns Integer
44839>>>>>>>>>>>        Function_Return 0
44840>>>>>>>>>>>    End_Function
44841>>>>>>>>>>>    
44841>>>>>>>>>>>    
44841>>>>>>>>>>>End_Class
44842>>>>>>>>>>>
44842>>>>>>>>>>>
44842>>>>>>>>>>>Define DEFAULT_VIEW_LATCH_STATE         for 1
44842>>>>>>>>>>>Define DEFAULT_VIEW_STATIC_SERVER_STATE for 1
44842>>>>>>>>>>>Define DEFAULT_DSO_DETACH_MODE          for DETACH_IF_NO_CHANGE
44842>>>>>>>>>>>
44842>>>>>>>>>>>Class Entry_View_Client_mixin is a mixin
44843>>>>>>>>>>>    Procedure Construct_Object Integer img#
44845>>>>>>>>>>>        Forward Send construct_object img#
44847>>>>>>>>>>>        Property String View_Name ''  // default name...could be useful
44848>>>>>>>>>>>        Set scope_State to True         // defaults to a Scope
44849>>>>>>>>>>>        Set Attach_Parent_State to True // default...controls parentage better
44850>>>>>>>>>>>        Set Ring_State to True          // default to Ring...makes sense
44851>>>>>>>>>>>        
44851>>>>>>>>>>>        Property Integer DSO_Detach_Mode          Default_DSO_Detach_Mode
44852>>>>>>>>>>>        Property Integer DEO_Attach_All_State     False
44853>>>>>>>>>>>        
44853>>>>>>>>>>>        Property Integer View_Latch_State         True  // Default_View_Latch_State
44854>>>>>>>>>>>        Property Integer Main_DD                  0
44855>>>>>>>>>>>        // keeps track of main-file record when new view is entered!
44855>>>>>>>>>>>        
44855>>>>>>>>>>>        Property RowID priInitialRowId
44856>>>>>>>>>>>        
44856>>>>>>>>>>>        // when false activate will attempt to activate the scope_focus
44856>>>>>>>>>>>        // when true, activate activates first object.
44856>>>>>>>>>>>        Property Integer Auto_Top_View_State      False
44857>>>>>>>>>>>
44857>>>>>>>>>>>        // When activate is performed (as opposed to set current_scope) the
44857>>>>>>>>>>>        // first focusable object is activated. Should the first item of the
44857>>>>>>>>>>>        // first object become the current_item?
44857>>>>>>>>>>>        // If Top_View is true and Top_Item is false you get the old dac
44857>>>>>>>>>>>        // behaviors.
44857>>>>>>>>>>>        Property Integer Auto_Top_Item_State      True
44858>>>>>>>>>>>        
44858>>>>>>>>>>>        // When changing views this will keep track of the object that had
44858>>>>>>>>>>>        // the focus when this view (scope) was exited. This manages nested
44858>>>>>>>>>>>        // scopes within a view.
44858>>>>>>>>>>>        Property Integer private.Last_View_Focus  0
44859>>>>>>>>>>>        Property Integer wasNotinUse_State        False // internal use
44860>>>>>>>>>>>    End_Procedure
44861>>>>>>>>>>>    
44861>>>>>>>>>>>    // Augment exit_application_check. If a change
44861>>>>>>>>>>>    // is detected activate the changed view. This way the user sees what
44861>>>>>>>>>>>    // has been changed.
44861>>>>>>>>>>>    //
44861>>>>>>>>>>>    Function Exit_Application_Check Returns Integer
44863>>>>>>>>>>>        Integer rVal Obj
44863>>>>>>>>>>>        
44863>>>>>>>>>>>        Get Should_Save to Rval // changes in this object???
44864>>>>>>>>>>>        If (rVal = 0) ;            Broadcast Get Exit_Application_Check to Rval // check w/ kids
44868>>>>>>>>>>>        
44868>>>>>>>>>>>        If (rVal <> 0) Begin  // ok a change exist...activate changed view.
44870>>>>>>>>>>>            //
44870>>>>>>>>>>>            // before activating the changed view make sure that we are not
44870>>>>>>>>>>>            // trying to activate this on top of a modal object. Check the current
44870>>>>>>>>>>>            // focus and all of its parent record up to (but not including) the
44870>>>>>>>>>>>            // desktop. If any of these object are modal (have block_mouse_state
44870>>>>>>>>>>>            // set to true) then do not display the changed view.
44870>>>>>>>>>>>            //
44870>>>>>>>>>>>            Get Focus of desktop to Obj
44871>>>>>>>>>>>            While Obj Gt DESKTOP
44875>>>>>>>>>>>                If (Block_Mouse_State(Obj)) ;                    Function_Return rVal // if modal..exit
44878>>>>>>>>>>>                Get Parent of Obj to Obj
44879>>>>>>>>>>>            Loop
44880>>>>>>>>>>>>
44880>>>>>>>>>>>            Send Activate
44881>>>>>>>>>>>        End
44881>>>>>>>>>>>>
44881>>>>>>>>>>>        Function_Return rVal
44882>>>>>>>>>>>    End_Function
44883>>>>>>>>>>>    
44883>>>>>>>>>>>    Function Opening_view_Recursive Returns Integer
44885>>>>>>>>>>>        Integer main bFail
44885>>>>>>>>>>>        Set delegation_mode to delegate_to_parent
44886>>>>>>>>>>>        Get Main_DD to Main
44887>>>>>>>>>>>        Set WasNotInUse_State to ( Main and In_use_State(Main)=0 )
44888>>>>>>>>>>>        Get Opening_View to bFail
44889>>>>>>>>>>>        If not bFail ;            Broadcast Get Opening_View_Recursive to bFail
44893>>>>>>>>>>>        Function_Return bFail
44894>>>>>>>>>>>    End_Function
44895>>>>>>>>>>>    
44895>>>>>>>>>>>    Procedure Seed_Data_Sets_Recursive
44897>>>>>>>>>>>        Integer NotInUse
44897>>>>>>>>>>>        Set delegation_mode to delegate_to_parent
44898>>>>>>>>>>>        Get WasNotInUse_State to NotInUse
44899>>>>>>>>>>>        If NotInUse ;            Send Seed_Data_Sets  // if ok, we've got blank in-use DSO.
44902>>>>>>>>>>>        Set WasNotInUse_State to False
44903>>>>>>>>>>>        Broadcast Send Seed_Data_Sets_Recursive
44905>>>>>>>>>>>    End_Procedure
44906>>>>>>>>>>>    
44906>>>>>>>>>>>    
44906>>>>>>>>>>>    //  Augmented to send Opening_view. If add_focus fails it sends
44906>>>>>>>>>>>    //  closing_view to reverse effects of Opening_view
44906>>>>>>>>>>>    Procedure Add_Focus Handle hoParent Returns Integer
44908>>>>>>>>>>>        Integer rVal Main NotInUse
44908>>>>>>>>>>>        Get Opening_View_Recursive to rval
44909>>>>>>>>>>>        //
44909>>>>>>>>>>>        If (rVal = 0) Begin
44911>>>>>>>>>>>            // Connect DEOs and DSOs as required.
44911>>>>>>>>>>>            Send Connect_DEOs_to_Servers (DEO_Attach_All_State(Self))
44912>>>>>>>>>>>            Forward Get MSG_add_focus hoParent to rVal
44914>>>>>>>>>>>            Send Seed_Data_Sets_Recursive
44915>>>>>>>>>>>        End
44915>>>>>>>>>>>>
44915>>>>>>>>>>>        Procedure_Return rVal
44916>>>>>>>>>>>    End_Procedure
44917>>>>>>>>>>>    
44917>>>>>>>>>>>    // Augmented to Send Closing view
44917>>>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
44917>>>>>>>>>>>    Procedure Deactivating //Returns Integer
44919>>>>>>>>>>>        Integer rVal
44919>>>>>>>>>>>        Forward Get MSG_Deactivating to rVal
44921>>>>>>>>>>>        If (rVal = 0) ;            Send closing_View
44924>>>>>>>>>>>    End_Procedure
44925>>>>>>>>>>>    
44925>>>>>>>>>>>    //  Disconnect servers from deos according to rules.
44925>>>>>>>>>>>    //
44925>>>>>>>>>>>    Procedure Closing_View
44927>>>>>>>>>>>        Integer Mode
44927>>>>>>>>>>>        Get DSO_Detach_Mode to Mode
44928>>>>>>>>>>>        // If we had a View with no DEOs the DSOs would remain in use. We
44928>>>>>>>>>>>        // will take the extra step to set all DSOs in-use-states to false.
44928>>>>>>>>>>>        Send Disconnect_DEOs_from_Servers Mode
44929>>>>>>>>>>>        // we assume that only DSOs understand Set In_Use_State and that
44929>>>>>>>>>>>        // no delegation occurs as part of setting this to false.
44929>>>>>>>>>>>        If (Mode = DETACH_ALWAYS) ;            Broadcast Recursive Set In_use_State to False
44933>>>>>>>>>>>    End_Procedure
44934>>>>>>>>>>>    
44934>>>>>>>>>>>    // use to preload anything into DSOs. By default, if a Main_DD is
44934>>>>>>>>>>>    // defined, we will attempt to latch on
44934>>>>>>>>>>>    // the record that was in the buffer when the view was entered!
44934>>>>>>>>>>>    Procedure Seed_Data_Sets
44936>>>>>>>>>>>        Integer srvr# File#
44936>>>>>>>>>>>        Integer bFill
44936>>>>>>>>>>>        RowID   riInitalRowId
44936>>>>>>>>>>>        Boolean bFound
44936>>>>>>>>>>>        Get Main_DD to srvr#
44937>>>>>>>>>>>        // If no Main-dd we don't do anything automatically, you are on your
44937>>>>>>>>>>>        // own to seed the data-sets any way you want.
44937>>>>>>>>>>>        If Srvr# Begin
44939>>>>>>>>>>>            Get auto_fill_State of srvr# to bFill
44940>>>>>>>>>>>            // if not auto-fill and we've got a record, someone went to a lot of
44940>>>>>>>>>>>            // trouble to set up a record. Don't change it. Normally this would
44940>>>>>>>>>>>            // occur w/ selection lists (which are not auto-fill) that seed the
44940>>>>>>>>>>>            // list in advance.
44940>>>>>>>>>>>            If ( bFill=0 and HasRecord(srvr#) ) ;                Procedure_Return
44943>>>>>>>>>>>            Get priInitialRowId to riInitalRowId
44944>>>>>>>>>>>            If ( not(IsNullRowId(riInitalRowId)) and View_Latch_State(Self) ) Begin
44946>>>>>>>>>>>                // if initial record and we latch, refind it via DSO
44946>>>>>>>>>>>                // Find & relate record manually and then perform
44946>>>>>>>>>>>                // a request_assign. This will not work if the finding file is
44946>>>>>>>>>>>                // a constrained child file
44946>>>>>>>>>>>                Get Main_file of Srvr# to File#
44947>>>>>>>>>>>                // we can now do this in a single step
44947>>>>>>>>>>>                Get FindByRowIdEx of srvr# File# riInitalRowId to bFound
44948>>>>>>>>>>>            End
44948>>>>>>>>>>>>
44948>>>>>>>>>>>            Else ;                 // if no initial record, do a formal                If not bFill ;                Send Clear to Srvr# // clear
44952>>>>>>>>>>>            // If the srvr is auto-fill and there was no initial record we
44952>>>>>>>>>>>            // will chose to do nothing under the assumption that the server
44952>>>>>>>>>>>            // has already done an auto-fill and its guess is as good as
44952>>>>>>>>>>>            // anything we could come up with.
44952>>>>>>>>>>>        End
44952>>>>>>>>>>>>
44952>>>>>>>>>>>    End_Procedure
44953>>>>>>>>>>>    
44953>>>>>>>>>>>    //  Needed by view. Find the record number of the requested file.
44953>>>>>>>>>>>    //  If file = 0 use the main_file of Main_DD (if it exists).
44953>>>>>>>>>>>    Function FileRowId Integer iFile Returns RowID
44955>>>>>>>>>>>        Handle hoMain
44955>>>>>>>>>>>        RowID  riID
44955>>>>>>>>>>>        // if file not passed use main-file of main data set
44955>>>>>>>>>>>        If (iFile=0) Begin
44957>>>>>>>>>>>            Get Main_DD to hoMain
44958>>>>>>>>>>>            If hoMain Begin
44960>>>>>>>>>>>                Get main_file of hoMain to iFile
44961>>>>>>>>>>>            End
44961>>>>>>>>>>>>
44961>>>>>>>>>>>        End
44961>>>>>>>>>>>>
44961>>>>>>>>>>>        If iFile Begin
44963>>>>>>>>>>>            Move (GetRowId(iFile)) to riId
44964>>>>>>>>>>>        End
44964>>>>>>>>>>>>
44964>>>>>>>>>>>        Function_Return riId
44965>>>>>>>>>>>    End_Function
44966>>>>>>>>>>>    
44966>>>>>>>>>>>    // We maintain Last_View_Focus to control for nested scopes. A normal
44966>>>>>>>>>>>    // will have its scope_state true and no scoped children. However, a
44966>>>>>>>>>>>    // zoom might be scoped. We control this by keeping track of the scope when
44966>>>>>>>>>>>    // a scope is exited.
44966>>>>>>>>>>>    
44966>>>>>>>>>>>    Procedure Set Last_View_Focus Integer Foc
44968>>>>>>>>>>>        Set private.Last_View_Focus to Foc
44969>>>>>>>>>>>    End_Procedure
44970>>>>>>>>>>>    
44970>>>>>>>>>>>    // Returns The last scope in the view to have the focus. Before returning
44970>>>>>>>>>>>    // the value make sure that the scope object is active, else return 0
44970>>>>>>>>>>>    Function Last_View_Focus Returns Integer
44972>>>>>>>>>>>        Integer foc
44972>>>>>>>>>>>        Get private.Last_View_Focus to Foc
44973>>>>>>>>>>>        // if not a valid object or this object is not active make it 0
44973>>>>>>>>>>>        If (Foc<=DESKTOP or Active_state(Self)=0 or Active_State(Foc)=0) ;            Move 0 to Foc
44976>>>>>>>>>>>        Function_Return Foc
44977>>>>>>>>>>>    End_Function
44978>>>>>>>>>>>    
44978>>>>>>>>>>>    // Take care of any buffer initialization
44978>>>>>>>>>>>    Function Opening_View Returns Integer
44980>>>>>>>>>>>        Integer main
44980>>>>>>>>>>>        RowID riId
44980>>>>>>>>>>>        
44980>>>>>>>>>>>        // if a main DSO exists and it is not in use we must perform
44980>>>>>>>>>>>        // any required pre-seeding logic.
44980>>>>>>>>>>>        //Get Main_DD to Main
44980>>>>>>>>>>>        //If ( Main AND In_use_State(Main)=0 ) Begin
44980>>>>>>>>>>>        If ( wasNotinUse_State(Self))  Begin
44982>>>>>>>>>>>            // Always clear all file buffers and keep track of the record number
44982>>>>>>>>>>>            // that was in the main-dso's file-buffer.
44982>>>>>>>>>>>            // This is used by seed_data_sets to seed as required.
44982>>>>>>>>>>>            Get FileRowId 0 to riId
44983>>>>>>>>>>>            Set priInitialRowId to riId
44984>>>>>>>>>>>            //Set Initial_Main_record to Rec#
44984>>>>>>>>>>>            Send Prepare_Data_Sets         // allow custom setting
44985>>>>>>>>>>>            Broadcast Send clear_main_file // Send refind_records to main
44987>>>>>>>>>>>        End
44987>>>>>>>>>>>>
44987>>>>>>>>>>>    End_Function
44988>>>>>>>>>>>    
44988>>>>>>>>>>>    // only called if Main_DD exists and it is not yet in-use
44988>>>>>>>>>>>    Procedure Prepare_Data_Sets
44990>>>>>>>>>>>    End_Procedure
44991>>>>>>>>>>>    
44991>>>>>>>>>>>    // added to make the file buffers more reliable
44991>>>>>>>>>>>    Procedure Entering_Scope Returns Integer
44993>>>>>>>>>>>        Integer rVal
44993>>>>>>>>>>>        Forward Get MSG_entering_scope to rVal
44995>>>>>>>>>>>        // The refind is probably a feature that should always happen.
44995>>>>>>>>>>>        // The main-data-set was a way to make this backwards compatable.
44995>>>>>>>>>>>        // Maybe that made no sense.
44995>>>>>>>>>>>        If (rVal = 0) ;            Broadcast Send refind_DD_records // only refinds in-use DDs.
44999>>>>>>>>>>>        Procedure_Return rVal
45000>>>>>>>>>>>    End_Procedure
45001>>>>>>>>>>>    
45001>>>>>>>>>>>    // Augment to keep track of the scope that had the focus when this
45001>>>>>>>>>>>    // view was exited. Exiting_Scope seems to get called at the right
45001>>>>>>>>>>>    // times - only when focus is moved to an object outside of view's focus.
45001>>>>>>>>>>>    Procedure Exiting_Scope Handle hoNewScope
45003>>>>>>>>>>>        Integer rVal
45003>>>>>>>>>>>        Forward Get MSG_Exiting_Scope hoNewScope to rVal
45005>>>>>>>>>>>        If (rVal = 0) ;            Set Last_View_Focus to (Current_Scope(Self))
45008>>>>>>>>>>>    End_Procedure
45009>>>>>>>>>>>    
45009>>>>>>>>>>>    //  Augmented to allow views to take the focus without changing the
45009>>>>>>>>>>>    //  focus within the object. The property Auto_top_View_State controls
45009>>>>>>>>>>>    //  this. If true, always return to first object, first item. If false
45009>>>>>>>>>>>    //  return to current-item of scope focus (when possible).
45009>>>>>>>>>>>    //
45009>>>>>>>>>>>    Procedure Activate Returns Integer
45011>>>>>>>>>>>        Integer rVal Foc
45011>>>>>>>>>>>        If ( Auto_Top_View_State(Self)=0 and ; // Do we want behavior?            scope_state(Self) and ;           // s/b true.            Active_state(Self) ) Begin        // Only if active.
45013>>>>>>>>>>>            // Last_View_Focus is the last scope to have the focus.
45013>>>>>>>>>>>            // It should be active (if not the prop is 0).
45013>>>>>>>>>>>            // If for some reason the focus is 0, do a vanilla activate.
45013>>>>>>>>>>>            Get Last_View_Focus to Foc
45014>>>>>>>>>>>            If Foc ;                Set Current_Scope to Foc
45017>>>>>>>>>>>            Else ;                Forward Get Msg_Activate to rVal
45020>>>>>>>>>>>        End
45020>>>>>>>>>>>>
45020>>>>>>>>>>>        Else Begin
45021>>>>>>>>>>>            Forward Get Msg_Activate to rVal
45023>>>>>>>>>>>            // first Item of first object.
45023>>>>>>>>>>>            If ( Rval=0 and Auto_Top_Item_State(Self) ) ;                Send Beginning_of_Panel
45026>>>>>>>>>>>        End
45026>>>>>>>>>>>>
45026>>>>>>>>>>>        Procedure_Return rVal
45027>>>>>>>>>>>    End_Procedure
45028>>>>>>>>>>>    
45028>>>>>>>>>>>    // Views don't delegate to get this property. It uses system default
45028>>>>>>>>>>>    Function Default_Static_Server_State Returns Integer
45030>>>>>>>>>>>        Function_Return DEFAULT_VIEW_STATIC_SERVER_STATE
45031>>>>>>>>>>>    End_Function
45032>>>>>>>>>>>    
45032>>>>>>>>>>>End_Class
45033>>>>>>>>>>>
45033>>>>>>>>>>>//
45033>>>>>>>>>>>//  Client for Selection Lists.
45033>>>>>>>>>>>//
45033>>>>>>>>>>>//  Selection_lists and Pick_lists need to know if they should
45033>>>>>>>>>>>//  move their values out. With simple sel/pick lists it figures this
45033>>>>>>>>>>>//  out if the list is a popup object. (POPUP sets the property
45033>>>>>>>>>>>//  move_value_out_state to TRUE. If the sel\pick list needs to be
45033>>>>>>>>>>>//  encapulsated by a client the actual list object is no longer a
45033>>>>>>>>>>>//  popup (the client is). We need this special client to set the
45033>>>>>>>>>>>//  move_value_out_state of the list. It does this by broadcasting
45033>>>>>>>>>>>//  this to all objects. This only works if the sel/pick list object is
45033>>>>>>>>>>>//  a direct child of the client (which it always will be).
45033>>>>>>>>>>>//
45033>>>>>>>>>>>//  Also note that this class supports movable objects
45033>>>>>>>>>>>
45033>>>>>>>>>>>Register_Procedure Set Move_Value_Out_State Integer State
45033>>>>>>>>>>>
45033>>>>>>>>>>>// used to catch old obsolete syntax
45033>>>>>>>>>Use DFNav_mx.pkg // Navigation changes for DF DEOs
Including file: Dfnav_mx.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfnav_mx.pkg)
45033>>>>>>>>>>>Use VDFBase.pkg
45033>>>>>>>>>>>
45033>>>>>>>>>>>Class DFnavigate_mixin is a Mixin
45034>>>>>>>>>>>    
45034>>>>>>>>>>>    Procedure define_DFNavigation
45036>>>>>>>>>>>        
45036>>>>>>>>>>>        On_Key kSwitch            Send Switch_Next_Area   PRIVATE
45037>>>>>>>>>>>        On_Key kSwitch_Back       Send Switch_Prior_Area  PRIVATE
45038>>>>>>>>>>>        
45038>>>>>>>>>>>        //  Change Panel switching to view switching.
45038>>>>>>>>>>>        //  The messages Switch_next_view and Switch_Prior_View
45038>>>>>>>>>>>        //  need to be resolved (via delegation) in the view object.
45038>>>>>>>>>>>        //  This means that all dfentry object must be placed inside
45038>>>>>>>>>>>        //  of a view object. This might cause problems ... we will see.
45038>>>>>>>>>>>        
45038>>>>>>>>>>>    End_Procedure
45039>>>>>>>>>>>    
45039>>>>>>>>>>>    Procedure Close_Panel
45041>>>>>>>>>>>        Send Exit_Function
45042>>>>>>>>>>>    End_Procedure
45043>>>>>>>>>>>    
45043>>>>>>>>>>>End_Class
45044>>>>>>>>>Use dfConfrm.pkg
45044>>>>>>>>>Use Dfdbmdpn.pkg // adds obsolete pointerButton for dbModalPanel
Including file: Dfdbmdpn.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfdbmdpn.pkg)
45044>>>>>>>>>>>Use Windows.pkg
45044>>>>>>>>>>>
45044>>>>>>>>>>>Class PointerButton is a Button
45045>>>>>>>>>>>    
45045>>>>>>>>>>>    Procedure Construct_Object
45047>>>>>>>>>>>        Forward Send Construct_Object
45049>>>>>>>>>>>        Set focus_mode to pointer_Only
45050>>>>>>>>>>>    End_Procedure
45051>>>>>>>>>>>    
45051>>>>>>>>>>>    Procedure Command Integer i1 Integer i2
45053>>>>>>>>>>>        Send Redirect_Message
45054>>>>>>>>>>>    End_Procedure
45055>>>>>>>>>>>    
45055>>>>>>>>>>>    Procedure Redirect_Message Returns Integer
45057>>>>>>>>>>>        Integer msg obj rval
45057>>>>>>>>>>>        Get message 0 to Msg
45058>>>>>>>>>>>        Get Aux_Value 0 to obj
45059>>>>>>>>>>>        If Msg ;            Get Msg of ( If(obj, obj, Focus(desktop)) ) to rval
45062>>>>>>>>>>>        Procedure_Return rval
45063>>>>>>>>>>>    End_Procedure
45064>>>>>>>>>>>    
45064>>>>>>>>>>>End_Class
45065>>>>>>>>>Use Dfdafmac.pkg
Including file: Dfdafmac.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfdafmac.pkg)
45065>>>>>>>>>>>Use Windows.pkg
45065>>>>>>>>>>>Use dfcursor.pkg
45065>>>>>>>>>>>
45065>>>>>>>>>>>
45065>>>>>>>>>>>//  This expects to create a view INSIDE of another object
45065>>>>>>>>>>>//  (Like a panel)
45065>>>>>>>>>>>//
45065>>>>>>>>>>>
45065>>>>>>>>>>>
45065>>>>>>>>>>>Define DEFERRED_OBJECT for Deferred_View
45065>>>>>>>>>>>
45065>>>>>>>>>>>Class CD_Client is a Container
45066>>>>>>>>>>>    
45066>>>>>>>>>>>    Procedure Construct_Object
45068>>>>>>>>>>>        Forward Send Construct_Object
45070>>>>>>>>>>>        
45070>>>>>>>>>>>        Property Integer Created_object_id 0
45071>>>>>>>>>>>        
45071>>>>>>>>>>>        Set focus_mode to nonfocusable
45072>>>>>>>>>>>    End_Procedure
45073>>>>>>>>>>>    
45073>>>>>>>>>>>    Procedure Popup
45075>>>>>>>>>>>        Send Popup_Modal
45076>>>>>>>>>>>    End_Procedure
45077>>>>>>>>>>>    
45077>>>>>>>>>>>    Register_Function Destroy_Object_State Returns Integer
45077>>>>>>>>>>>    
45077>>>>>>>>>>>    // is augmented by object instance. Should never
45077>>>>>>>>>>>    // be called.
45077>>>>>>>>>>>    Function Popup_Handle Returns Handle
45079>>>>>>>>>>>        Error DFERR_PROGRAM "Improper use of CD_Popup_Object command"
45080>>>>>>>>>>>>
45080>>>>>>>>>>>    End_Function
45081>>>>>>>>>>>    
45081>>>>>>>>>>>    Procedure Popup_Modal Returns Integer
45083>>>>>>>>>>>        Integer iRet
45083>>>>>>>>>>>        Handle hoId
45083>>>>>>>>>>>        Boolean bDestroy
45083>>>>>>>>>>>        Get Popup_Handle to hoId
45084>>>>>>>>>>>        If hoId Begin
45086>>>>>>>>>>>            Get msg_Popup_Modal of hoId to iRet
45087>>>>>>>>>>>            Get Destroy_Object_State of hoId to bDestroy
45088>>>>>>>>>>>            If bDestroy Begin
45090>>>>>>>>>>>                Send Destroy of hoId
45091>>>>>>>>>>>                Set Created_Object_Id to 0
45092>>>>>>>>>>>            End
45092>>>>>>>>>>>>
45092>>>>>>>>>>>            Procedure_Return iRet
45093>>>>>>>>>>>        End
45093>>>>>>>>>>>>
45093>>>>>>>>>>>    End_Procedure
45094>>>>>>>>>>>    
45094>>>>>>>>>>>End_Class
45095>>>>>>>>>>>
45095>>>>>>>>>>>
45095>>>>>>>>>>>
45095>>>>>>>>>
45095>>>>>>>>>Register_Procedure DoSaveEnvironment Handle hoContainer Boolean bProgram
45095>>>>>>>>>Register_Procedure DoLoadEnvironment Handle hoContainer Boolean bProgram
45095>>>>>>>>>
45095>>>>>>>>>Register_Function Data_Set_Should_Save Returns Integer
45095>>>>>>>>>
45095>>>>>>>>>//
45095>>>>>>>>>//  Grouping classes: Used within views to group objects
45095>>>>>>>>>//
45095>>>>>>>>>//  dbContainer3d_
45095>>>>>>>>>//     dbContainer3d
45095>>>>>>>>>//
45095>>>>>>>>>Class dbContainer3d_ is a Container3d STARTMAC ECstart
45096>>>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
45096>>>>>>>>>    Import_Class_Protocol Entry_Client_mixin // mixin in CM DEO behaviors
45097>>>>>>>>>    
45097>>>>>>>>>    //  Defeat the activating augmentation for auto-locate
45097>>>>>>>>>    //
45097>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
45097>>>>>>>>>    Procedure Activating //Returns Integer
45099>>>>>>>>>        Integer RVal
45099>>>>>>>>>        Forward Get MSG_activating to rVal
45101>>>>>>>>>        Procedure_Return rVal
45102>>>>>>>>>    End_Procedure
45103>>>>>>>>>End_Class
45104>>>>>>>>>
45104>>>>>>>>>Class dbContainer3d is a dbContainer3d_
45105>>>>>>>>>    Procedure Construct_Object
45107>>>>>>>>>        Forward Send Construct_Object No_Image
45109>>>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
45110>>>>>>>>>    End_Procedure
45111>>>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
45112>>>>>>>>>End_Class
45113>>>>>>>>>
45113>>>>>>>>>//
45113>>>>>>>>>// Group Based containers
45113>>>>>>>>>//
45113>>>>>>>>>//  dbGroup_
45113>>>>>>>>>//     dbGroup
45113>>>>>>>>>//
45113>>>>>>>>>Class dbGroup_ is a Group STARTMAC ECstart
45114>>>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
45114>>>>>>>>>    
45114>>>>>>>>>    Import_Class_Protocol Entry_Client_mixin
45115>>>>>>>>>    
45115>>>>>>>>>    //  Defeat the activating augmentation for auto-locate
45115>>>>>>>>>    //
45115>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
45115>>>>>>>>>    Procedure Activating //Returns Integer
45117>>>>>>>>>        Integer RVal
45117>>>>>>>>>        Forward Get MSG_activating to rVal
45119>>>>>>>>>        Procedure_Return rVal
45120>>>>>>>>>    End_Procedure
45121>>>>>>>>>End_Class
45122>>>>>>>>>
45122>>>>>>>>>Class dbGroup is a dbGroup_
45123>>>>>>>>>    Procedure Construct_Object
45125>>>>>>>>>        Forward Send Construct_Object No_Image
45127>>>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
45128>>>>>>>>>    End_Procedure
45129>>>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
45130>>>>>>>>>End_Class
45131>>>>>>>>>
45131>>>>>>>>>
45131>>>>>>>>>//
45131>>>>>>>>>// Invisible Grouping object
45131>>>>>>>>>//
45131>>>>>>>>>//   dbContainer - invisible container
45131>>>>>>>>>//
45131>>>>>>>>>Class dbContainer is an dbContainer3d
45132>>>>>>>>>    Import_Class_Protocol NonVisual_Container_Mixin
45133>>>>>>>>>End_Class
45134>>>>>>>>>
45134>>>>>>>>>//
45134>>>>>>>>>// View Support (views are mdi dialogs)
45134>>>>>>>>>//
45134>>>>>>>>>//   dbAppClient_
45134>>>>>>>>>//     dbAppView_
45134>>>>>>>>>//       dbView
45134>>>>>>>>>//
45134>>>>>>>>>Class dbAppClient_ is a View  STARTMAC ECstart
45135>>>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
45135>>>>>>>>>    
45135>>>>>>>>>    Import_Class_Protocol Entry_Client_mixin
45136>>>>>>>>>    
45136>>>>>>>>>    //  Defeat the activating augmentation for auto-locate
45136>>>>>>>>>    //
45136>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
45136>>>>>>>>>    Procedure Activating //Returns Integer
45138>>>>>>>>>        Integer RVal
45138>>>>>>>>>        Forward Get MSG_activating to rVal
45140>>>>>>>>>        Procedure_Return rVal
45141>>>>>>>>>    End_Procedure
45142>>>>>>>>>End_Class
45143>>>>>>>>>
45143>>>>>>>>>Class dbAppView_ is a dbAppClient_
45144>>>>>>>>>    Import_Class_Protocol entry_view_Client_mixin
45145>>>>>>>>>End_Class
45146>>>>>>>>>
45146>>>>>>>>>Class dbView is a dbAppView_
45147>>>>>>>>>    
45147>>>>>>>>>    Procedure Construct_Object
45149>>>>>>>>>        Forward Send Construct_Object No_Image
45151>>>>>>>>>        
45151>>>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
45152>>>>>>>>>        // dialog views get activated as popup objects.
45152>>>>>>>>>        Set Dso_Detach_Mode to Detach_Always
45153>>>>>>>>>        
45153>>>>>>>>>        // set default verify messages. These are good defaults. The
45153>>>>>>>>>        // developer may wish to change these in their object or sub-class.
45153>>>>>>>>>        // Note: these messsages are defined in dfconfrm.pkg
45153>>>>>>>>>        Set Verify_Data_Loss_Msg   to (RefFunc(Data_Loss_Confirmation))
45154>>>>>>>>>        Set Verify_Delete_Msg      to (RefFunc(Delete_Confirmation))
45155>>>>>>>>>        Set Verify_Save_Msg        to (RefFunc(Save_Confirmation))
45156>>>>>>>>>        Set Verify_Exit_Msg        to (RefFunc(Exit_Loss_Confirmation))
45157>>>>>>>>>        //
45157>>>>>>>>>    End_Procedure
45158>>>>>>>>>    
45158>>>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
45159>>>>>>>>>    
45159>>>>>>>>>    //  Returns TRUE to indicate that this is a DEO. This is used by
45159>>>>>>>>>    //  delegation to figure out if you are within a DEO and should therefore
45159>>>>>>>>>    //  send a DEO message. DEO clients set this true
45159>>>>>>>>>    //
45159>>>>>>>>>    Function DEO_Object Returns Integer
45161>>>>>>>>>        Function_Return 1
45162>>>>>>>>>    End_Function
45163>>>>>>>>>    
45163>>>>>>>>>    //
45163>>>>>>>>>    //  Activate message for views that:
45163>>>>>>>>>    //  1. restores the view if it is minimized
45163>>>>>>>>>    //  2. Maintains the current scope's focus.
45163>>>>>>>>>    //
45163>>>>>>>>>    Procedure Activate_current_scope
45165>>>>>>>>>        If ( View_mode(Self)=VIEWMODE_ICONIZE ) ;            Set view_mode to viewmode_normal
45168>>>>>>>>>        Set Current_Scope to Self
45169>>>>>>>>>    End_Procedure
45170>>>>>>>>>    
45170>>>>>>>>>    // ------------deprecated....Use Object_label.
45170>>>>>>>>>    //  Pass full object name - return the relative name
45170>>>>>>>>>    //  e.g.,  Main.View.Obj1 --> Obj1
45170>>>>>>>>>    Function Local_Object_name String nm Returns String
45172>>>>>>>>>        Integer ps
45172>>>>>>>>>        Repeat
45172>>>>>>>>>>
45172>>>>>>>>>            Move (Pos( ".", nm)) to ps
45173>>>>>>>>>            If (ps = 0) ;                Function_Return nm
45176>>>>>>>>>            Increment ps
45177>>>>>>>>>            Move (Mid( Nm, 255, ps)) to Nm
45178>>>>>>>>>        Loop
45179>>>>>>>>>>
45179>>>>>>>>>    End_Function
45180>>>>>>>>>    
45180>>>>>>>>>    Function View_Changed Returns Integer
45182>>>>>>>>>        Integer Changed
45182>>>>>>>>>        // first see if any DDOs at this level are changed.
45182>>>>>>>>>        Broadcast Get Data_Set_Should_Save to Changed // Ask for changes in Data-sets
45184>>>>>>>>>        // if no changes, see if we have any sub-views that are changed
45184>>>>>>>>>        // This is used to catch tab-view pages.
45184>>>>>>>>>        If not Changed ;            Broadcast Get SubView_Changed to Changed
45188>>>>>>>>>        Function_Return Changed
45189>>>>>>>>>    End_Function
45190>>>>>>>>>    
45190>>>>>>>>>    Procedure Close_Client
45192>>>>>>>>>        Send Exit_Function
45193>>>>>>>>>    End_Procedure
45194>>>>>>>>>    
45194>>>>>>>>>End_Class
45195>>>>>>>>>
45195>>>>>>>>>
45195>>>>>>>>>
45195>>>>>>>>>//
45195>>>>>>>>>// ToolPanel Based Classes
45195>>>>>>>>>//
45195>>>>>>>>>//  dbFloatingPanel_
45195>>>>>>>>>//     dbFloatingPanel
45195>>>>>>>>>//        dbViewFloatingPanel
45195>>>>>>>>>//           dbViewToolPanel
45195>>>>>>>>>//           dbModalPanel <---this will get used
45195>>>>>>>>>//
45195>>>>>>>>>Class dbFloatingPanel_ is a FloatingPanel STARTMAC ECstart
45196>>>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
45196>>>>>>>>>    
45196>>>>>>>>>    Import_Class_Protocol Entry_Client_mixin
45197>>>>>>>>>    
45197>>>>>>>>>    //  Defeat the activating augmentation for auto-locate
45197>>>>>>>>>    //
45197>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
45197>>>>>>>>>    Procedure Activating //Returns Integer
45199>>>>>>>>>        Integer RVal
45199>>>>>>>>>        Forward Get MSG_activating to rVal
45201>>>>>>>>>        Procedure_Return rVal
45202>>>>>>>>>    End_Procedure
45203>>>>>>>>>End_Class
45204>>>>>>>>>
45204>>>>>>>>>Class dbFloatingPanel is a dbFloatingPanel_
45205>>>>>>>>>    Procedure Construct_Object
45207>>>>>>>>>        Forward Send Construct_Object No_Image
45209>>>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
45210>>>>>>>>>        Set Minimize_Icon to False
45211>>>>>>>>>        Set Maximize_Icon to False
45212>>>>>>>>>    End_Procedure
45213>>>>>>>>>    
45213>>>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
45214>>>>>>>>>    
45214>>>>>>>>>    //  Returns TRUE to indicate that this is a DEO. This is used by
45214>>>>>>>>>    //  delegation to figure out if you are within a DEO and should therefore
45214>>>>>>>>>    //  send a DEO message. DEO clients set this true
45214>>>>>>>>>    //
45214>>>>>>>>>    Function DEO_Object Returns Integer
45216>>>>>>>>>        Function_Return 1
45217>>>>>>>>>    End_Function
45218>>>>>>>>>    
45218>>>>>>>>>    // we Modify this not delegate and look for a parent verify exit msg if this msg is 0.
45218>>>>>>>>>    // We assume that toolpanels and dbModalPanels are self contained in terms of opening and closing
45218>>>>>>>>>    // and therefore should only use themselves to figure out if there is a verify exit msg. This is needed
45218>>>>>>>>>    // in case a db modal panel physically placed inside of another DEO.
45218>>>>>>>>>    Function Verify_Exit_msg Returns Integer
45220>>>>>>>>>        Integer msg#
45220>>>>>>>>>        Get private.verify_exit_msg to msg#
45221>>>>>>>>>        // don't look at parent DEOs like we do elsewhere.
45221>>>>>>>>>        //if (msg# = 0 AND Component_State(self)) ;
45221>>>>>>>>>        //    delegate get verify_exit_msg to msg#
45221>>>>>>>>>        Function_Return msg#
45222>>>>>>>>>    End_Function
45223>>>>>>>>>    
45223>>>>>>>>>End_Class
45224>>>>>>>>>
45224>>>>>>>>>Class dbViewFloatingPanel is a dbFloatingPanel
45225>>>>>>>>>    Import_Class_Protocol entry_view_Client_mixin
45226>>>>>>>>>End_Class
45227>>>>>>>>>
45227>>>>>>>>>Class dbViewToolPanel is a dbViewFloatingPanel
45228>>>>>>>>>    
45228>>>>>>>>>    Procedure Construct_Object
45230>>>>>>>>>        Forward Send Construct_Object No_Image
45232>>>>>>>>>        Set Extended_Window_Style to WS_EX_TOOLWINDOW True
45233>>>>>>>>>    End_Procedure
45234>>>>>>>>>    
45234>>>>>>>>>End_Class
45235>>>>>>>>>
45235>>>>>>>>>//  EntryModalPanel
45235>>>>>>>>>
45235>>>>>>>>>Class dbModalPanel is a dbViewFloatingPanel
45236>>>>>>>>>    Procedure Construct_Object
45238>>>>>>>>>        Forward Send Construct_Object No_Image
45240>>>>>>>>>        
45240>>>>>>>>>        Set Extended_Window_Style to WS_EX_DLGMODALFRAME True
45241>>>>>>>>>        Set Modal_State to True
45242>>>>>>>>>        
45242>>>>>>>>>        Property Integer List_Object  0
45243>>>>>>>>>        
45243>>>>>>>>>        Property Integer Button_Height     14
45244>>>>>>>>>        Property Integer Button_Width      50
45245>>>>>>>>>        
45245>>>>>>>>>        Property Integer Max_Text_Extent   0
45246>>>>>>>>>        
45246>>>>>>>>>        Object Button_Ids is an array
45248>>>>>>>>>        End_Object
45249>>>>>>>>>    End_Procedure
45250>>>>>>>>>    
45250>>>>>>>>>    Function Button_Count Returns Integer
45252>>>>>>>>>        Function_Return (Item_count(Button_Ids))
45253>>>>>>>>>    End_Function
45254>>>>>>>>>    
45254>>>>>>>>>    Procedure Add_Button String sLabel Integer hMsg Integer hoTo
45256>>>>>>>>>        Integer hoBtn tx
45256>>>>>>>>>        // 8.2 - use newer syntax for creating dynamic objects
45256>>>>>>>>>        Get Create U_PointerButton to hoBtn
45257>>>>>>>>>        Set peAnchors of hoBtn to anBottomRight
45258>>>>>>>>>        Set Value of hoBtn 0 to sLabel
45259>>>>>>>>>        Set Message of hoBtn 0 to hMsg
45260>>>>>>>>>        If (Num_Arguments>2) ;            Set aux_value of hoBtn 0 to hoTo
45263>>>>>>>>>        Get Text_Extent of hoBtn sLabel to tx
45264>>>>>>>>>        Move (low(tx)) to tx
45265>>>>>>>>>        Set Array_Value of Button_Ids (Button_Count(Self)) to hoBtn
45266>>>>>>>>>        If (tx > Max_Text_Extent(Self));            Set Max_Text_Extent to tx
45269>>>>>>>>>    End_Procedure
45270>>>>>>>>>    
45270>>>>>>>>>    Procedure Size_Buttons
45272>>>>>>>>>        Integer bheight bwidth nb obj Bobj bt mt gsiz gwd
45272>>>>>>>>>        
45272>>>>>>>>>        Get button_height to bheight
45273>>>>>>>>>        Get button_width  to bwidth
45274>>>>>>>>>        Get Button_count to nb
45275>>>>>>>>>        Decrement nb
45276>>>>>>>>>        
45276>>>>>>>>>        Move Button_ids to obj
45277>>>>>>>>>        
45277>>>>>>>>>        For bt from 0 to nb
45283>>>>>>>>>>
45283>>>>>>>>>            Get integer_value of obj bt to bobj // button id
45284>>>>>>>>>            Set Size of bobj to bheight bwidth       // set dflt size
45285>>>>>>>>>            If (bt = 0) Begin
45287>>>>>>>>>                Get Max_Text_Extent to mt
45288>>>>>>>>>                Add 8 to mt
45289>>>>>>>>>                Get guisize of bobj to gsiz
45290>>>>>>>>>                Move (low(gsiz)) to gwd
45291>>>>>>>>>                If (gwd < mt) Begin
45293>>>>>>>>>                    Set guisize of bobj to (hi(gsiz)) mt
45294>>>>>>>>>                    Send adjust_logicals to bobj
45295>>>>>>>>>                    Move (low(size(bobj))) to bwidth
45296>>>>>>>>>                    Set Button_width to bwidth
45297>>>>>>>>>                End
45297>>>>>>>>>>
45297>>>>>>>>>            End
45297>>>>>>>>>>
45297>>>>>>>>>        Loop
45298>>>>>>>>>>
45298>>>>>>>>>    End_Procedure
45299>>>>>>>>>    
45299>>>>>>>>>    Procedure Position_Child_Objects
45301>>>>>>>>>        Integer lsz psz wd pwd ht llc nb mt bobj obj cht col bt list_obj
45301>>>>>>>>>        Integer rmrgn swd
45301>>>>>>>>>        
45301>>>>>>>>>        If (not(pbSizeToClientArea(Self))) Begin
45303>>>>>>>>>            // if using old sizing, we have not changed anything for 14.0
45303>>>>>>>>>            If (caption_bar(Self)) ;                Move (Hi(Physical_fontsize(Self))+4+6) to cht
45306>>>>>>>>>            Else ;                Move 0 to cht
45308>>>>>>>>>            
45308>>>>>>>>>            Get GUISize to psz               // size of panel
45309>>>>>>>>>            Get List_Object to List_obj      // id of the list object
45310>>>>>>>>>            If list_obj Begin
45312>>>>>>>>>                Get GUISize of list_obj to lSz
45313>>>>>>>>>                Get GUIlocation of list_obj to llc
45314>>>>>>>>>                Move (low(llc)+low(lsz)+2) to rmrgn
45315>>>>>>>>>            End
45315>>>>>>>>>>
45315>>>>>>>>>            Else ;                Move (low(psz)-8) to rmrgn
45317>>>>>>>>>            
45317>>>>>>>>>            Get Button_count to nb        // number of buttons
45318>>>>>>>>>            
45318>>>>>>>>>            If (nb = 0) ;                Move ( hi(psz) - 4 - cht - 8) to ht
45321>>>>>>>>>            Else Begin
45322>>>>>>>>>                Move Button_ids to obj
45323>>>>>>>>>                Get integer_value of obj 0 to bobj
45324>>>>>>>>>                Get guisize of bobj to ht
45325>>>>>>>>>                Move (low(ht)) to wd
45326>>>>>>>>>                Move ( hi(ht)) to ht
45327>>>>>>>>>                Move 8 to swd // width of each space
45328>>>>>>>>>                If ( (rmrgn - ((wd+swd)*nb-swd)) < 0 ) ;                    Move 2 to swd
45331>>>>>>>>>                Move ( hi(psz) - ht - 4 - cht - 8) to ht
45332>>>>>>>>>                
45332>>>>>>>>>                Move (rmrgn-wd) to col
45333>>>>>>>>>                Decrement nb
45334>>>>>>>>>                While nb ge 0
45338>>>>>>>>>                    Get integer_value of obj nb to bobj
45339>>>>>>>>>                    Set GUIlocation of bobj to ht col
45340>>>>>>>>>                    Send Adjust_Logicals to bobj
45341>>>>>>>>>                    Move (col - swd - wd) to col
45342>>>>>>>>>                    Decrement nb
45343>>>>>>>>>                End
45344>>>>>>>>>>
45344>>>>>>>>>            End
45344>>>>>>>>>>
45344>>>>>>>>>            
45344>>>>>>>>>            If list_obj Begin
45346>>>>>>>>>                Get GUISize of list_obj to lSz
45347>>>>>>>>>                Get GUIlocation of list_obj to llc
45348>>>>>>>>>                Move ( ht - Hi(llc) - 12 ) to ht
45349>>>>>>>>>                Set GUIsize of list_obj to ht (low(lsz))
45350>>>>>>>>>                Send Adjust_Logicals to list_obj
45351>>>>>>>>>            End
45351>>>>>>>>>>
45351>>>>>>>>>        End
45351>>>>>>>>>>
45351>>>>>>>>>        Else Begin
45352>>>>>>>>>            
45352>>>>>>>>>            // this is still obsolete, but we will make it work with client sizing, which makes it simpler actually
45352>>>>>>>>>            // bote that 8 is used through out as the GUI spacing amount. This is legacy and will not be changed
45352>>>>>>>>>            
45352>>>>>>>>>            Get GUISize to psz               // size of panel
45353>>>>>>>>>            Get List_Object to List_obj      // id of the list object
45354>>>>>>>>>            If list_obj Begin
45356>>>>>>>>>                Get GUISize of list_obj to lSz
45357>>>>>>>>>                Get GUIlocation of list_obj to llc
45358>>>>>>>>>                Move (low(llc)+low(lsz)) to rmrgn
45359>>>>>>>>>            End
45359>>>>>>>>>>
45359>>>>>>>>>            Else Begin
45360>>>>>>>>>                Move (low(psz)-8) to rmrgn
45361>>>>>>>>>            End
45361>>>>>>>>>>
45361>>>>>>>>>            
45361>>>>>>>>>            Get Button_count to nb        // number of buttons
45362>>>>>>>>>            
45362>>>>>>>>>            If (nb = 0) ;                Move ( hi(psz) ) to ht
45365>>>>>>>>>            Else Begin
45366>>>>>>>>>                Move Button_ids to obj
45367>>>>>>>>>                Get integer_value of obj 0 to bobj
45368>>>>>>>>>                Get guisize of bobj to ht
45369>>>>>>>>>                Move (low(ht)) to wd
45370>>>>>>>>>                Move ( hi(ht)) to ht
45371>>>>>>>>>                Move 8 to swd // width of each space
45372>>>>>>>>>                Move ( hi(psz) - ht - 8) to ht
45373>>>>>>>>>                
45373>>>>>>>>>                Move (rmrgn-wd) to col
45374>>>>>>>>>                Decrement nb
45375>>>>>>>>>                While (nb>=0)
45379>>>>>>>>>                    Get integer_value of obj nb to bobj
45380>>>>>>>>>                    Set GUIlocation of bobj to ht col
45381>>>>>>>>>                    Send Adjust_Logicals to bobj
45382>>>>>>>>>                    Move (col - swd - wd) to col
45383>>>>>>>>>                    Decrement nb
45384>>>>>>>>>                End
45385>>>>>>>>>>
45385>>>>>>>>>            End
45385>>>>>>>>>>
45385>>>>>>>>>            
45385>>>>>>>>>            If list_obj Begin
45387>>>>>>>>>                Get GUISize of list_obj to lSz
45388>>>>>>>>>                Get GUIlocation of list_obj to llc
45389>>>>>>>>>                Move ( ht - Hi(llc) - 8 ) to ht
45390>>>>>>>>>                Set GUIsize of list_obj to ht (low(lsz))
45391>>>>>>>>>                Send Adjust_Logicals of list_obj
45392>>>>>>>>>            End
45392>>>>>>>>>>
45392>>>>>>>>>        End
45392>>>>>>>>>>
45392>>>>>>>>>    End_Procedure
45393>>>>>>>>>    
45393>>>>>>>>>    Procedure End_Construct_Object
45395>>>>>>>>>        Send Size_Buttons
45396>>>>>>>>>        Send Position_Child_Objects
45397>>>>>>>>>        Forward Send end_construct_object
45399>>>>>>>>>    End_Procedure
45400>>>>>>>>>    
45400>>>>>>>>>    Procedure Search
45402>>>>>>>>>        Integer Obj#
45402>>>>>>>>>        Get List_Object to obj#
45403>>>>>>>>>        If Obj# ;            Send Search to Obj#
45406>>>>>>>>>    End_Procedure
45407>>>>>>>>>    
45407>>>>>>>>>    // created for advanced CD_popup_object support. Returns the true handle of the
45407>>>>>>>>>    // popup object whether it is a regular object or a CD popup object.
45407>>>>>>>>>    Function Popup_Handle Returns Handle
45409>>>>>>>>>        Function_Return Self
45410>>>>>>>>>    End_Function
45411>>>>>>>>>    
45411>>>>>>>>>End_Class
45412>>>>>>>>>
45412>>>>>>>>>//
45412>>>>>>>>>// Panel Based Classes
45412>>>>>>>>>//
45412>>>>>>>>>//  dbPanel_
45412>>>>>>>>>//     dbPanel
45412>>>>>>>>>//        dbViewPanel_
45412>>>>>>>>>//           dbViewPanel
45412>>>>>>>>>//
45412>>>>>>>>>// None of these are likely to be used
45412>>>>>>>>>//
45412>>>>>>>>>
45412>>>>>>>>>Class dbPanel_ is a BasicPanel STARTMAC ECstart
45413>>>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
45413>>>>>>>>>    
45413>>>>>>>>>    Import_Class_Protocol Entry_Client_mixin
45414>>>>>>>>>    
45414>>>>>>>>>    //  Defeat the activating augmentation for auto-locate
45414>>>>>>>>>    //
45414>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
45414>>>>>>>>>    Procedure Activating //Returns Integer
45416>>>>>>>>>        Integer RVal
45416>>>>>>>>>        Forward Get MSG_activating to rVal
45418>>>>>>>>>        Procedure_Return rVal
45419>>>>>>>>>    End_Procedure
45420>>>>>>>>>End_Class
45421>>>>>>>>>
45421>>>>>>>>>Class dbPanel is a dbPanel_
45422>>>>>>>>>    Procedure Construct_Object
45424>>>>>>>>>        Forward Send Construct_Object No_Image
45426>>>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
45427>>>>>>>>>    End_Procedure
45428>>>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
45429>>>>>>>>>End_Class
45430>>>>>>>>>
45430>>>>>>>>>Class dbViewPanel_ is a dbPanel
45431>>>>>>>>>    Import_Class_Protocol entry_view_Client_mixin
45432>>>>>>>>>End_Class
45433>>>>>>>>>
45433>>>>>>>>>Class dbViewPanel is a dbViewPanel_
45434>>>>>>>>>    Procedure Construct_Object
45436>>>>>>>>>        Forward Send Construct_Object No_Image
45438>>>>>>>>>    End_Procedure
45439>>>>>>>>>    
45439>>>>>>>>>    //  Returns TRUE to indicate that this is a DEO. This is used by
45439>>>>>>>>>    //  delegation to figure out if you are within a DEO and should therefore
45439>>>>>>>>>    //  send a DEO message. DEO clients set this true
45439>>>>>>>>>    //
45439>>>>>>>>>    Function DEO_Object Returns Integer
45441>>>>>>>>>        Function_Return 1
45442>>>>>>>>>    End_Function
45443>>>>>>>>>End_Class
45444>>>>>>>Use DFbitmap.pkg
Including file: Dfbitmap.pkg    (C:\Program Files\DataFlex 24.0\Pkg\Dfbitmap.pkg)
45444>>>>>>>>>Use LanguageText.pkg
45444>>>>>>>>>Use Windows.pkg
45444>>>>>>>>>Use File_Dlg.pkg
45444>>>>>>>>>
45444>>>>>>>>>Class BitmapContainer is a Container3D
45445>>>>>>>>>    
45445>>>>>>>>>    Procedure Construct_Object
45447>>>>>>>>>        Forward Send Construct_Object
45449>>>>>>>>>        
45449>>>>>>>>>        Property Integer Changed_State False
45450>>>>>>>>>        
45450>>>>>>>>>        // If true, double click sends Get Select_Bitmap which invokes
45450>>>>>>>>>        // an open file dialog
45450>>>>>>>>>        Property Integer Allow_Select_Bitmap_State  False
45451>>>>>>>>>        
45451>>>>>>>>>        // title for common file dialog
45451>>>>>>>>>        Property String Dialog_Caption C_$SelectBitmapFile
45452>>>>>>>>>        
45452>>>>>>>>>        // start-up directory for common file dialog
45452>>>>>>>>>        Property String Initial_Folder ""
45453>>>>>>>>>        
45453>>>>>>>>>        Send Define_ToolTip_Support_Mixin
45454>>>>>>>>>        
45454>>>>>>>>>        // this object should not take the focus
45454>>>>>>>>>        Set Focus_Mode to NonFocusable
45455>>>>>>>>>        Set Client_Area_State to False
45456>>>>>>>>>        Set pbUseFormWindowHandle to False   // must come after Define_ToolTip_Support_Mixin
45457>>>>>>>>>    End_Procedure
45458>>>>>>>>>    
45458>>>>>>>>>    Import_Class_Protocol ToolTip_Support_Mixin
45459>>>>>>>>>    
45459>>>>>>>>>    // Although this is not a client it should add child objects to
45459>>>>>>>>>    // the focus tree. Should only be textboxes!
45459>>>>>>>>>    //
45459>>>>>>>>>    Procedure Add_Focus Integer Obj
45461>>>>>>>>>        Forward Send Add_Focus Obj
45463>>>>>>>>>        Broadcast Send Add_Focus Self
45465>>>>>>>>>    End_Procedure
45466>>>>>>>>>    
45466>>>>>>>>>    // Popup an open file dialog and select a bitmap file. Returns file
45466>>>>>>>>>    // name
45466>>>>>>>>>    //
45466>>>>>>>>>    Function Select_Bitmap Returns String
45468>>>>>>>>>        String sFileName
45468>>>>>>>>>        String sPropVal
45468>>>>>>>>>        Integer iRet
45468>>>>>>>>>        Handle hoOpenFile
45468>>>>>>>>>        
45468>>>>>>>>>        Get Create U_OpenDialog to  hoOpenFile
45469>>>>>>>>>        // Mask will look like this: "Bitmaps (.bmp;*.rle)|*.bmp;*.rle|All Files (*.*)|*.*"
45469>>>>>>>>>        Set Filter_String  of hoOpenFile to (C_$Bitmaps * "(.bmp;*.rle)|*.bmp;*.rle|" + C_$AllFiles * "(*.*)|*.*")
45470>>>>>>>>>        Get Dialog_Caption to sPropVal
45471>>>>>>>>>        Set Dialog_Caption of hoOpenFile to sPropVal
45472>>>>>>>>>        Get Initial_Folder to sPropVal
45473>>>>>>>>>        Set Initial_Folder of hoOpenFile to sPropVal
45474>>>>>>>>>        Get Show_Dialog    of hoOpenFile  to iRet
45475>>>>>>>>>        If iRet ;            Get File_Name of hoOpenFile  to sFileName
45478>>>>>>>>>        Send Destroy of hoOpenFile
45479>>>>>>>>>        Function_Return sFileName
45480>>>>>>>>>    End_Function
45481>>>>>>>>>    
45481>>>>>>>>>    Procedure Invoke_Select_Bitmap
45483>>>>>>>>>        String sFileName
45483>>>>>>>>>        Get Select_Bitmap to sFileName
45484>>>>>>>>>        If (sFileName<>"") Begin
45486>>>>>>>>>            Set Bitmap to sFileName
45487>>>>>>>>>            Set Changed_State to True
45488>>>>>>>>>        End
45488>>>>>>>>>>
45488>>>>>>>>>    End_Procedure
45489>>>>>>>>>    
45489>>>>>>>>>    
45489>>>>>>>>>    // Augmented to invoke the filedialog to retrieve a new bitmap
45489>>>>>>>>>    Procedure Mouse_Click Integer i1 Integer i2
45491>>>>>>>>>        Forward Send Mouse_Click i1 i2
45493>>>>>>>>>        If (Allow_Select_Bitmap_State(Self)) Begin
45495>>>>>>>>>            Send Invoke_Select_Bitmap
45496>>>>>>>>>        End
45496>>>>>>>>>>
45496>>>>>>>>>    End_Procedure
45497>>>>>>>>>    
45497>>>>>>>>>    Procedure Page_Object Integer iState
45499>>>>>>>>>        Forward Send Page_Object iState
45501>>>>>>>>>        
45501>>>>>>>>>        // Handle tooltip support....
45501>>>>>>>>>        If (iState = 0) Begin
45503>>>>>>>>>            Send RequestDeleteToolTip
45504>>>>>>>>>        End
45504>>>>>>>>>>
45504>>>>>>>>>        Else Begin
45505>>>>>>>>>            Send RequestAddToolTip
45506>>>>>>>>>        End
45506>>>>>>>>>>
45506>>>>>>>>>    End_Procedure
45507>>>>>>>>>    
45507>>>>>>>>>    
45507>>>>>>>>>    // Called by Page_Object. Handles tooltip creation. We use a dedicated
45507>>>>>>>>>    // method to perform AddToolTip because it is often the case that Page_Object
45507>>>>>>>>>    // is implemented in a mixin class.
45507>>>>>>>>>    Procedure RequestAddToolTip
45509>>>>>>>>>        Send AddToolTip
45510>>>>>>>>>    End_Procedure
45511>>>>>>>>>    
45511>>>>>>>>>    
45511>>>>>>>>>    // Called by Page_Object. Handles tooltip removal.
45511>>>>>>>>>    Procedure RequestDeleteToolTip
45513>>>>>>>>>        Send DeleteToolTip
45514>>>>>>>>>    End_Procedure
45515>>>>>>>>>End_Class
45516>>>>>>>Use GlobalFunctionsProcedures.pkg
45516>>>>>>>Use cRichEdit.pkg
Including file: cRichEdit.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cRichEdit.pkg)
45516>>>>>>>>>Use Windows.pkg
45516>>>>>>>>>Use cEdit_Mixin.pkg
Including file: cEdit_mixin.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cEdit_mixin.pkg)
45516>>>>>>>>>>>// mixin used by both cRichEdit and cTextEdit
45516>>>>>>>>>>>Use Windows.pkg
45516>>>>>>>>>>>
45516>>>>>>>>>>>// for undoType and RedoType
45516>>>>>>>>>>>Enum_List
45516>>>>>>>>>>>    Define utUnknown
45516>>>>>>>>>>>    Define utTyping
45516>>>>>>>>>>>    Define utDelete
45516>>>>>>>>>>>    Define utDragDrop
45516>>>>>>>>>>>    Define utCut
45516>>>>>>>>>>>    Define utPaste
45516>>>>>>>>>>>End_Enum_List
45516>>>>>>>>>>>
45516>>>>>>>>>>>Class cEdit_Mixin is a Mixin
45517>>>>>>>>>>>    
45517>>>>>>>>>>>    Procedure Define_cEdit_Mixin
45519>>>>>>>>>>>        Send Define_Standard_Object_Mixin
45520>>>>>>>>>>>        Send Define_Dflabel_Mixin
45521>>>>>>>>>>>        Send Define_ToolTip_Support_Mixin
45522>>>>>>>>>>>        
45522>>>>>>>>>>>        Set Label_Offset to 1 0
45523>>>>>>>>>>>        Set Label_Justification_Mode to Jmode_Top
45524>>>>>>>>>>>        Set pbUseFormWindowHandle to False     // Must come after Define_ToolTip_Support_Mixin
45525>>>>>>>>>>>        Set Color     to clWindow      // should be the default...also system colors don't work
45526>>>>>>>>>>>        Set TextColor to clWindowText  // should be the default
45527>>>>>>>>>>>        
45527>>>>>>>>>>>        Property Boolean Changed_State False
45528>>>>>>>>>>>        
45528>>>>>>>>>>>        Property Integer pbSuppressChange False
45529>>>>>>>>>>>        
45529>>>>>>>>>>>        Property Integer piPriorEnabledColor 0 // private, used by shadow_display
45530>>>>>>>>>>>        
45530>>>>>>>>>>>        Send Define_Shadow_Mixin
45531>>>>>>>>>>>        
45531>>>>>>>>>>>        Property Integer Floating_Menu_Object Default_Form_Floating_Menu_Id
45532>>>>>>>>>>>        
45532>>>>>>>>>>>        On_Key kEnter Send default_key
45533>>>>>>>>>>>        
45533>>>>>>>>>>>        Set Disable_default_action_button_state to True
45534>>>>>>>>>>>        
45534>>>>>>>>>>>    End_Procedure
45535>>>>>>>>>>>    
45535>>>>>>>>>>>    Import_Class_Protocol Standard_Object_Mixin
45536>>>>>>>>>>>    Import_Class_Protocol Dflabel_Mixin
45537>>>>>>>>>>>    Import_Class_Protocol Shadow_Mixin
45538>>>>>>>>>>>    Import_Class_Protocol ToolTip_Support_Mixin
45539>>>>>>>>>>>    
45539>>>>>>>>>>>    // currently there is no built in context menu support (old edit has one).
45539>>>>>>>>>>>    Procedure Mouse_Down2 Integer iWindowNumber Integer iPosition
45541>>>>>>>>>>>        Integer obj rval
45541>>>>>>>>>>>        Forward Send mouse_down2 iWindowNumber iPosition
45543>>>>>>>>>>>        Get Floating_Menu_object to obj
45544>>>>>>>>>>>        If obj Begin
45546>>>>>>>>>>>            If (Focus(desktop)<>Self) Begin
45548>>>>>>>>>>>                Get msg_Activate to rval
45549>>>>>>>>>>>            End
45549>>>>>>>>>>>>
45549>>>>>>>>>>>            If (Focus(desktop)=Self) Begin
45551>>>>>>>>>>>                Send Popup to obj
45552>>>>>>>>>>>            End
45552>>>>>>>>>>>>
45552>>>>>>>>>>>        End
45552>>>>>>>>>>>>
45552>>>>>>>>>>>    End_Procedure
45553>>>>>>>>>>>    
45553>>>>>>>>>>>    Function Object_Shadow_State Returns Integer
45555>>>>>>>>>>>        Function_Return (Private.Shadow_State(Self))
45556>>>>>>>>>>>    End_Function
45557>>>>>>>>>>>    
45557>>>>>>>>>>>    // enables or disables an active window. Allows enabled_state to be used after object is paged
45557>>>>>>>>>>>    Procedure Enable_Window Integer iState
45559>>>>>>>>>>>        Handle hWnd
45559>>>>>>>>>>>        Get Window_Handle to hWnd
45560>>>>>>>>>>>        If hWnd ;            Move (EnableWindow(hWnd,iState)) to hWnd
45563>>>>>>>>>>>    End_Procedure
45564>>>>>>>>>>>    
45564>>>>>>>>>>>    Procedure Set Current_Shadow_State Integer iState
45566>>>>>>>>>>>        Set Private.Shadow_State to iState     // used by get object_shadow_state/enabled_state
45567>>>>>>>>>>>        Set Window_Style to WS_DISABLED iState // used to set style before the object is paged
45568>>>>>>>>>>>        Send Enable_Window (not(iState))       // used to enable/disable after object is paged
45569>>>>>>>>>>>    End_Procedure
45570>>>>>>>>>>>    
45570>>>>>>>>>>>    
45570>>>>>>>>>>>    Procedure Shadow_Display
45572>>>>>>>>>>>        // control will take care of shadowing itself
45572>>>>>>>>>>>        Send Label_Shadow_Display // if object has a label text box, handle disabling this
45573>>>>>>>>>>>    End_Procedure
45574>>>>>>>>>>>    
45574>>>>>>>>>>>    Procedure Set Item_Shadow_State Integer iItem Integer iState
45576>>>>>>>>>>>    End_Procedure
45577>>>>>>>>>>>    
45577>>>>>>>>>>>    Function Item_Shadow_State Integer iItem Returns Integer
45579>>>>>>>>>>>    End_Function
45580>>>>>>>>>>>    
45580>>>>>>>>>>>    Procedure OnChange
45582>>>>>>>>>>>    End_Procedure
45583>>>>>>>>>>>    
45583>>>>>>>>>>>    Procedure OnMaxText
45585>>>>>>>>>>>    End_Procedure
45586>>>>>>>>>>>    
45586>>>>>>>>>>>    Procedure Command Longptr wParam Longptr lParam
45588>>>>>>>>>>>        Integer iParam
45588>>>>>>>>>>>        Forward Send Command wParam lParam
45590>>>>>>>>>>>        Move (hi(wParam)) to iParam
45591>>>>>>>>>>>        If (iParam=EN_CHANGE) Begin
45593>>>>>>>>>>>            // if we are supressing change notification, do nothing.
45593>>>>>>>>>>>            If (pbSuppressChange(Self)) ;                Procedure_Return
45596>>>>>>>>>>>            If not (changed_state(Self)) Begin
45598>>>>>>>>>>>                Set Changed_state to True
45599>>>>>>>>>>>            End
45599>>>>>>>>>>>>
45599>>>>>>>>>>>            Send OnChange
45600>>>>>>>>>>>        End
45600>>>>>>>>>>>>
45600>>>>>>>>>>>        Else If (iParam=EN_MAXTEXT) Begin
45603>>>>>>>>>>>            Send OnMaxText
45604>>>>>>>>>>>        End
45604>>>>>>>>>>>>
45604>>>>>>>>>>>    End_Procedure
45605>>>>>>>>>>>    
45605>>>>>>>>>>>    // Some messages trigger the command message with a change event. In some circumstances we must suppress this.
45605>>>>>>>>>>>    // The delete_data message and the page message both do this.
45605>>>>>>>>>>>    
45605>>>>>>>>>>>    Procedure Delete_Data
45607>>>>>>>>>>>        Boolean bWas
45607>>>>>>>>>>>        Get pbSuppressChange to bWas
45608>>>>>>>>>>>        Set pbSuppressChange to True // Delete_Data sends command which triggers change. We suppress that here
45609>>>>>>>>>>>        Forward Send delete_data
45611>>>>>>>>>>>        Set changed_state to False
45612>>>>>>>>>>>        Send OnChange
45613>>>>>>>>>>>        Set pbSuppressChange to bWas
45614>>>>>>>>>>>    End_Procedure
45615>>>>>>>>>>>    
45615>>>>>>>>>>>    Procedure Page Integer iState
45617>>>>>>>>>>>        Boolean bWas
45617>>>>>>>>>>>        Get pbSuppressChange to bWas
45618>>>>>>>>>>>        Set pbSuppressChange to True  // Page sends command which triggers change. We suppress that here
45619>>>>>>>>>>>        Forward Send Page iState
45621>>>>>>>>>>>        Set pbSuppressChange to bWas
45622>>>>>>>>>>>    End_Procedure
45623>>>>>>>>>>>    
45623>>>>>>>>>>>    
45623>>>>>>>>>>>    Procedure AppendTextLn String sText
45625>>>>>>>>>>>        Send AppendText sText
45626>>>>>>>>>>>        Send AppendText (character(10))
45627>>>>>>>>>>>    End_Procedure
45628>>>>>>>>>>>    
45628>>>>>>>>>>>    // Called by Page_Object. Handles tooltip creation. We use a dedicated
45628>>>>>>>>>>>    // method to perform AddToolTip because it is often the case that Page_Object
45628>>>>>>>>>>>    // is implemented in a mixin class.
45628>>>>>>>>>>>    Procedure RequestAddToolTip
45630>>>>>>>>>>>        Send AddToolTip
45631>>>>>>>>>>>    End_Procedure
45632>>>>>>>>>>>    
45632>>>>>>>>>>>    
45632>>>>>>>>>>>    // Called by Page_Object. Handles tooltip removal.
45632>>>>>>>>>>>    Procedure RequestDeleteToolTip
45634>>>>>>>>>>>        Send DeleteToolTip
45635>>>>>>>>>>>    End_Procedure
45636>>>>>>>>>>>End_Class
45637>>>>>>>>>
45637>>>>>>>>>// constants used for RichEdit Properties
45637>>>>>>>>>// peAlignment
45637>>>>>>>>>Enum_List
45637>>>>>>>>>    Define alLeft   for 1
45637>>>>>>>>>    Define alRight  for 2
45637>>>>>>>>>    Define alCenter for 3
45637>>>>>>>>>End_Enum_List
45637>>>>>>>>>
45637>>>>>>>>>// peBullets
45637>>>>>>>>>Enum_List
45637>>>>>>>>>    Define buNone
45637>>>>>>>>>    Define buBullets
45637>>>>>>>>>    Define buArabicNumbers
45637>>>>>>>>>    Define buLowerLetters
45637>>>>>>>>>    Define buUpperLetters
45637>>>>>>>>>    Define buLowerRomans
45637>>>>>>>>>    Define buUpperRomans
45637>>>>>>>>>End_Enum_List
45637>>>>>>>>>
45637>>>>>>>>>// peBulletStyle
45637>>>>>>>>>Enum_List
45637>>>>>>>>>    Define busRightParen   for 0
45637>>>>>>>>>    Define busEncloseParen for 256
45637>>>>>>>>>    Define busPeriod       for 512
45637>>>>>>>>>    Define busNumberOnly   for 768
45637>>>>>>>>>    Define busNoDisplay    for 1024
45637>>>>>>>>>End_Enum_List
45637>>>>>>>>>
45637>>>>>>>>>// peLineSpacingType
45637>>>>>>>>>Enum_List
45637>>>>>>>>>    Define lstSingle
45637>>>>>>>>>    Define lstSingleAndOneHalf
45637>>>>>>>>>    Define lstDouble
45637>>>>>>>>>End_Enum_List
45637>>>>>>>>>
45637>>>>>>>>>Class cRichEdit is a DFBaseRichEdit
45638>>>>>>>>>    
45638>>>>>>>>>    Procedure Construct_Object
45640>>>>>>>>>        Forward Send Construct_Object
45642>>>>>>>>>        Send Define_cEdit_Mixin
45643>>>>>>>>>        
45643>>>>>>>>>        On_Key Key_Ctrl+Key_B Send ToggleBold
45644>>>>>>>>>        On_Key Key_Ctrl+Key_I Send ToggleItalics
45645>>>>>>>>>        On_Key Key_Ctrl+Key_U Send ToggleUnderline
45646>>>>>>>>>        
45646>>>>>>>>>    End_Procedure
45647>>>>>>>>>    
45647>>>>>>>>>    Import_Class_Protocol cEdit_Mixin
45648>>>>>>>>>    
45648>>>>>>>>>    Procedure ToggleBold
45650>>>>>>>>>        Set pbBold to (not(pbBold(Self)))
45651>>>>>>>>>    End_Procedure
45652>>>>>>>>>    
45652>>>>>>>>>    Procedure ToggleItalics
45654>>>>>>>>>        Set pbItalics to (not(pbItalics(Self)))
45655>>>>>>>>>    End_Procedure
45656>>>>>>>>>    
45656>>>>>>>>>    Procedure ToggleUnderline
45658>>>>>>>>>        Set pbUnderLine to (not(pbUnderLine(Self)))
45659>>>>>>>>>    End_Procedure
45660>>>>>>>>>    
45660>>>>>>>>>End_Class
45661>>>>>>>>>
45661>>>>>>>>>
45661>>>>>>>Use cTextEdit.pkg
Including file: cTextEdit.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cTextEdit.pkg)
45661>>>>>>>>>use Windows.pkg
45661>>>>>>>>>Use cEdit_Mixin.pkg
45661>>>>>>>>>
45661>>>>>>>>>Class cTextEdit is a DFBaseTextEdit
45662>>>>>>>>>    
45662>>>>>>>>>    Procedure Construct_Object
45664>>>>>>>>>        Forward Send Construct_Object
45666>>>>>>>>>        Send Define_cEdit_Mixin
45667>>>>>>>>>    End_Procedure
45668>>>>>>>>>    
45668>>>>>>>>>    Import_Class_Protocol cEdit_Mixin
45669>>>>>>>>>    
45669>>>>>>>>>End_Class
45670>>>>>>>>>
45670>>>>>>>>>
45670>>>>>>>>>
45670>>>>>>>Use cRichEdit.pkg
45670>>>>>>>Use gFormatNumbers.pkg
Including file: gFormatNumbers.pkg    (C:\Program Files\DataFlex 24.0\Pkg\gFormatNumbers.pkg)
45670>>>>>>>>>Use cFormatter.pkg
Including file: cFormatter.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cFormatter.pkg)
45670>>>>>>>>>>>Use VDFBase.pkg
45670>>>>>>>>>>>
45670>>>>>>>>>>>Class cFormatter is an cObject
45671>>>>>>>>>>>    
45671>>>>>>>>>>>    Procedure Construct_object
45673>>>>>>>>>>>        Integer iCh
45673>>>>>>>>>>>        Forward Send construct_object
45675>>>>>>>>>>>        Property String  psCurrencySymbol
45676>>>>>>>>>>>        Set psCurrencySymbol to (Default_Currency_Symbol())
45677>>>>>>>>>>>        
45677>>>>>>>>>>>        Property String  psLeft
45678>>>>>>>>>>>        Property String  psright
45679>>>>>>>>>>>        Property Integer pbThousandsSep
45680>>>>>>>>>>>        Property Integer piPoints
45681>>>>>>>>>>>        
45681>>>>>>>>>>>        Property String  psCurPosLeft
45682>>>>>>>>>>>        Property String  psCurPosright
45683>>>>>>>>>>>        Property Integer pbCurPosThousandsSep
45684>>>>>>>>>>>        Property Integer piCurPosPoints
45685>>>>>>>>>>>        
45685>>>>>>>>>>>        Property String  psCurNegLeft
45686>>>>>>>>>>>        Property String  psCurNegright
45687>>>>>>>>>>>        Property Integer pbCurNegThousandsSep
45688>>>>>>>>>>>        Property Integer piCurNegPoints
45689>>>>>>>>>>>        
45689>>>>>>>>>>>        Property String  psNumPosLeft
45690>>>>>>>>>>>        Property String  psNumPosright
45691>>>>>>>>>>>        Property Integer pbNumPosThousandsSep
45692>>>>>>>>>>>        Property Integer piNumPosPoints
45693>>>>>>>>>>>        
45693>>>>>>>>>>>        Property String  psNumNegLeft
45694>>>>>>>>>>>        Property String  psNumNegright
45695>>>>>>>>>>>        Property Integer pbNumNegThousandsSep
45696>>>>>>>>>>>        Property Integer piNumNegPoints
45697>>>>>>>>>>>        
45697>>>>>>>>>>>        Send SetFormat "$,#.##;($,#.##)" True  // currency
45698>>>>>>>>>>>        Send SetFormat  ",#.*"           False // numeric
45699>>>>>>>>>>>        
45699>>>>>>>>>>>    End_Procedure
45700>>>>>>>>>>>    
45700>>>>>>>>>>>    // internal
45700>>>>>>>>>>>    // parse passed format string and set temporary properties with result
45700>>>>>>>>>>>    Procedure ParseFormat String sFmt
45702>>>>>>>>>>>        
45702>>>>>>>>>>>        String sLeft sRight sDigit
45702>>>>>>>>>>>        Integer bSep iPos i iDigits
45702>>>>>>>>>>>        
45702>>>>>>>>>>>        // replace any literals. A "/" followed by anything.
45702>>>>>>>>>>>        // some literals are special. $ . , / #
45702>>>>>>>>>>>        Move (Replaces("/$",sFmt,Character(1)))    to sFmt
45703>>>>>>>>>>>        Move (Replaces("/.",sFmt,Character(2)))    to sFmt
45704>>>>>>>>>>>        Move (Replaces("/,",sFmt,Character(3)))    to sFmt
45705>>>>>>>>>>>        Move (Replaces("/"+"/",sFmt,Character(4))) to sFmt
45706>>>>>>>>>>>        Move (Replaces("/#",sFmt,Character(5)))    to sFmt
45707>>>>>>>>>>>        Move (Character(9)) to sDigit
45708>>>>>>>>>>>        Move (Replaces("#",sFmt,sDigit))           to sFmt
45709>>>>>>>>>>>        Move (Replaces("/",sFmt,""))               to sFmt // replace all others
45710>>>>>>>>>>>        
45710>>>>>>>>>>>        Move (Pos(",",sFmt))                 to bSep // if we have any , we use thousand seps
45711>>>>>>>>>>>        If bSep ;            Move (Replaces(",",sFmt,"")) to sFmt // remove all ,
45714>>>>>>>>>>>        
45714>>>>>>>>>>>        Move (Replaces("$",sFmt,psCurrencySymbol(Self))) to sFmt // replace any $ with currency symbol
45715>>>>>>>>>>>        
45715>>>>>>>>>>>        Move (Pos(".",sFmt)) to iPos                 // position of decimal
45716>>>>>>>>>>>        
45716>>>>>>>>>>>        // Move all the special literals back into place before parsing
45716>>>>>>>>>>>        Move (Replaces(Character(1),sFmt,"$")) to sFmt
45717>>>>>>>>>>>        Move (Replaces(Character(2),sFmt,".")) to sFmt
45718>>>>>>>>>>>        Move (Replaces(Character(3),sFmt,",")) to sFmt
45719>>>>>>>>>>>        Move (Replaces(Character(4),sFmt,"/")) to sFmt
45720>>>>>>>>>>>        Move (Replaces(Character(5),sFmt,"#")) to sFmt
45721>>>>>>>>>>>        
45721>>>>>>>>>>>        If (iPos>0) Begin                      // if we have a decimanl point
45723>>>>>>>>>>>            Move 1 to i                        // look for first non # to right and count the #s
45724>>>>>>>>>>>            If (mid(sFmt,1,iPos+i)="*") Begin  // the "*" is special. It means as many as you want
45726>>>>>>>>>>>                Move -2 to iDigits
45727>>>>>>>>>>>                Increment i
45728>>>>>>>>>>>            End
45728>>>>>>>>>>>>
45728>>>>>>>>>>>            While (mid(sFmt,1,iPos+i)=sDigit)
45732>>>>>>>>>>>                Increment i
45733>>>>>>>>>>>            Loop
45734>>>>>>>>>>>>
45734>>>>>>>>>>>            Move (Mid(sFmt,255,iPos+i)) to sRight // everything to the right of the last # is format stuff
45735>>>>>>>>>>>            If (iDigits=0) ;                Move (i-1) to iDigits
45738>>>>>>>>>>>            //
45738>>>>>>>>>>>            Move 1 to i                           // find the first non-# to the left of the point
45739>>>>>>>>>>>            While (mid(sFmt,1,iPos-i)=sDigit)     // everything to the left is format stuff
45743>>>>>>>>>>>                Increment i
45744>>>>>>>>>>>            Loop
45745>>>>>>>>>>>>
45745>>>>>>>>>>>            Move (left(sFmt,iPos-i)) to sLeft
45746>>>>>>>>>>>        End
45746>>>>>>>>>>>>
45746>>>>>>>>>>>        Else Begin                             // we have no decinal
45747>>>>>>>>>>>            Move 0 to iDigits                  // so points is none
45748>>>>>>>>>>>            Move (Pos(sDigit,sFmt)) to iPos    // find first #.
45749>>>>>>>>>>>            If (iPos=0) Begin                  // if none, entire string is left format stuff..wierd!
45751>>>>>>>>>>>                Move sFmt to sLeft
45752>>>>>>>>>>>                Move ""   to sRight
45753>>>>>>>>>>>            End
45753>>>>>>>>>>>>
45753>>>>>>>>>>>            Else Begin
45754>>>>>>>>>>>                Move (left(sFmt,iPos-1)) to sLeft // all char to left of first # is left format stuff
45755>>>>>>>>>>>                Move 1 to i
45756>>>>>>>>>>>                While (mid(sFmt,1,iPos+i)=sDigit) // find last #, all char to right is right format
45760>>>>>>>>>>>                    Increment i
45761>>>>>>>>>>>                Loop
45762>>>>>>>>>>>>
45762>>>>>>>>>>>                Move (Mid(sFmt,255,i+iPos)) to sRight
45763>>>>>>>>>>>            End
45763>>>>>>>>>>>>
45763>>>>>>>>>>>        End
45763>>>>>>>>>>>>
45763>>>>>>>>>>>        // set temporary format properties and exit
45763>>>>>>>>>>>        Set pbThousandsSep to bSep
45764>>>>>>>>>>>        Set psLeft         to sLeft
45765>>>>>>>>>>>        Set psRight        to sRight
45766>>>>>>>>>>>        Set piPoints       to iDigits
45767>>>>>>>>>>>    End_Procedure
45768>>>>>>>>>>>    
45768>>>>>>>>>>>    // Public: Sets a format string. Pass full format for Positve and negative in sFmt. Pass
45768>>>>>>>>>>>    //         bCurrency true is this is a currency format, false if a numeric format
45768>>>>>>>>>>>    //
45768>>>>>>>>>>>    //  e.g. Send SetFormat "$,#.##;($,#.##)" True
45768>>>>>>>>>>>    Procedure SetFormat String sFmt Integer bCurrency
45770>>>>>>>>>>>        String sPos sNeg
45770>>>>>>>>>>>        Integer iPos
45770>>>>>>>>>>>        
45770>>>>>>>>>>>        Move (Pos(";",sFmt)) to iPos
45771>>>>>>>>>>>        If iPos Begin
45773>>>>>>>>>>>            Move (left(sFmt,iPos-1))    to sPos
45774>>>>>>>>>>>            Move (mid(sFmt,255,iPos+1)) to sNeg
45775>>>>>>>>>>>        End
45775>>>>>>>>>>>>
45775>>>>>>>>>>>        Else Begin
45776>>>>>>>>>>>            Move sFmt         to sPos
45777>>>>>>>>>>>            Move ("-" + sFmt) to sNeg
45778>>>>>>>>>>>        End
45778>>>>>>>>>>>>
45778>>>>>>>>>>>        Send ParseFormat sPos
45779>>>>>>>>>>>        If bCurrency Begin
45781>>>>>>>>>>>            Set pbCurPosThousandsSep to (pbThousandsSep(Self))
45782>>>>>>>>>>>            Set psCurPosLeft         to (psLeft(Self))
45783>>>>>>>>>>>            Set psCurPosRight        to (psRight(Self))
45784>>>>>>>>>>>            Set piCurPosPoints       to (piPoints(Self))
45785>>>>>>>>>>>        End
45785>>>>>>>>>>>>
45785>>>>>>>>>>>        Else Begin
45786>>>>>>>>>>>            Set pbNumPosThousandsSep to (pbThousandsSep(Self))
45787>>>>>>>>>>>            Set psNumPosLeft         to (psLeft(Self))
45788>>>>>>>>>>>            Set psNumPosRight        to (psRight(Self))
45789>>>>>>>>>>>            Set piNumPosPoints       to (piPoints(Self))
45790>>>>>>>>>>>        End
45790>>>>>>>>>>>>
45790>>>>>>>>>>>        
45790>>>>>>>>>>>        Send ParseFormat sNeg
45791>>>>>>>>>>>        If bCurrency Begin
45793>>>>>>>>>>>            Set pbCurNegThousandsSep to (pbThousandsSep(Self))
45794>>>>>>>>>>>            Set psCurNegLeft         to (psLeft(Self))
45795>>>>>>>>>>>            Set psCurNegRight        to (psRight(Self))
45796>>>>>>>>>>>            Set piCurNegPoints       to (piPoints(Self))
45797>>>>>>>>>>>        End
45797>>>>>>>>>>>>
45797>>>>>>>>>>>        Else Begin
45798>>>>>>>>>>>            Set pbNumNegThousandsSep to (pbThousandsSep(Self))
45799>>>>>>>>>>>            Set psNumNegLeft         to (psLeft(Self))
45800>>>>>>>>>>>            Set psNumNegRight        to (psRight(Self))
45801>>>>>>>>>>>            Set piNumNegPoints       to (piPoints(Self))
45802>>>>>>>>>>>        End
45802>>>>>>>>>>>>
45802>>>>>>>>>>>    End_Procedure
45803>>>>>>>>>>>    
45803>>>>>>>>>>>    // low level formatting. Pass parameters
45803>>>>>>>>>>>    Function Format_Num Number nNumber Integer iPoints Integer bSep ;            String sPrefix String sSuffix Returns String
45805>>>>>>>>>>>        String  sLeft sRight sNumber sSep sDec
45805>>>>>>>>>>>        Integer iDec iLen iCh
45805>>>>>>>>>>>        
45805>>>>>>>>>>>        Get_Attribute DF_DECIMAL_SEPARATOR to iCh
45808>>>>>>>>>>>        Move (Character(iCh)) to sDec
45809>>>>>>>>>>>        
45809>>>>>>>>>>>        Move (abs(nNumber)) to sNumber
45810>>>>>>>>>>>        Move (Pos(sDec,sNumber)) to iDec
45811>>>>>>>>>>>        Move (If(iDec=0, sNumber, left(sNumber,iDec-1))) to sLeft
45812>>>>>>>>>>>        Move (If(iDec=0, "", mid(sNumber,255,iDec+1)))   to sRight
45813>>>>>>>>>>>        // format for decimal separator
45813>>>>>>>>>>>        If (iPoints>=0) ; // if -2, leave it alone, it should not be -1            Move (left(sRight+Repeat("0",iPoints),iPoints)) to sRight
45816>>>>>>>>>>>        
45816>>>>>>>>>>>        // format for thousand sep.
45816>>>>>>>>>>>        If bSep Begin
45818>>>>>>>>>>>            Get_Attribute DF_THOUSANDS_SEPARATOR to iCh
45821>>>>>>>>>>>            Move (Character(iCh)) to sSep
45822>>>>>>>>>>>            Move (Length(sLeft)) to iLen
45823>>>>>>>>>>>            While (iLen>3)
45827>>>>>>>>>>>                Move (insert(sSep,sLeft,iLen-2)) to sLeft
45828>>>>>>>>>>>                Move (iLen-3) to iLen
45829>>>>>>>>>>>            Loop
45830>>>>>>>>>>>>
45830>>>>>>>>>>>        End
45830>>>>>>>>>>>>
45830>>>>>>>>>>>        // if decimal points or -2 (allow anything) and there are points to show
45830>>>>>>>>>>>        If (iPoints>0 or (iPoints=-2 and sRight<>"")) ;            Move (sLeft + sDec + sright) to sLeft
45833>>>>>>>>>>>        Function_Return (sPrefix + sLeft+ sSuffix)
45834>>>>>>>>>>>    End_Function
45835>>>>>>>>>>>    
45835>>>>>>>>>>>    // Public: Format for currency
45835>>>>>>>>>>>    Function FormatCur Number nNumber Integer iPoints Returns String
45837>>>>>>>>>>>        String  sLeft sRight
45837>>>>>>>>>>>        Integer bSep
45837>>>>>>>>>>>        If (nNumber<0) Begin
45839>>>>>>>>>>>            Get pbCurNegThousandsSep to bSep
45840>>>>>>>>>>>            Get psCurNegLeft         to sLeft
45841>>>>>>>>>>>            Get psCurNegRight        to sRight
45842>>>>>>>>>>>            If (iPoints=-1) ;                Get piCurNegPoints       to iPoints
45845>>>>>>>>>>>        End
45845>>>>>>>>>>>>
45845>>>>>>>>>>>        Else Begin
45846>>>>>>>>>>>            Get pbCurPosThousandsSep to bSep
45847>>>>>>>>>>>            Get psCurPosLeft         to sLeft
45848>>>>>>>>>>>            Get psCurPosRight        to sRight
45849>>>>>>>>>>>            If (iPoints=-1) ;                Get piCurPosPoints       to iPoints
45852>>>>>>>>>>>        End
45852>>>>>>>>>>>>
45852>>>>>>>>>>>        Function_Return (Format_Num(Self, nNumber,iPoints,bSep,sLeft,sRight))
45853>>>>>>>>>>>    End_Function
45854>>>>>>>>>>>    
45854>>>>>>>>>>>    // Public: Format for numeric
45854>>>>>>>>>>>    Function FormatNum Number nNumber Integer iPoints Returns String
45856>>>>>>>>>>>        String  sLeft sRight
45856>>>>>>>>>>>        Integer bSep
45856>>>>>>>>>>>        If (nNumber<0) Begin
45858>>>>>>>>>>>            Get pbNumNegThousandsSep to bSep
45859>>>>>>>>>>>            Get psNumNegLeft         to sLeft
45860>>>>>>>>>>>            Get psNumNegRight        to sRight
45861>>>>>>>>>>>            If (iPoints=-1) ;                Get piNumNegPoints       to iPoints
45864>>>>>>>>>>>        End
45864>>>>>>>>>>>>
45864>>>>>>>>>>>        Else Begin
45865>>>>>>>>>>>            Get pbNumPosThousandsSep to bSep
45866>>>>>>>>>>>            Get psNumPosLeft         to sLeft
45867>>>>>>>>>>>            Get psNumPosRight        to sRight
45868>>>>>>>>>>>            If (iPoints=-1) ;                Get piNumPosPoints       to iPoints
45871>>>>>>>>>>>        End
45871>>>>>>>>>>>>
45871>>>>>>>>>>>        Function_Return (Format_Num(Self, nNumber,iPoints,bSep,sLeft,sRight))
45872>>>>>>>>>>>    End_Function
45873>>>>>>>>>>>    
45873>>>>>>>>>>>    
45873>>>>>>>>>>>    // Public: Format passing format string
45873>>>>>>>>>>>    Function FormatVal Number nNumber String sFmt Returns String
45875>>>>>>>>>>>        Integer iPos bIsNeg
45875>>>>>>>>>>>        String  sLeft sRight
45875>>>>>>>>>>>        Integer iPoints bSep
45875>>>>>>>>>>>        Move (nNumber<0) to bIsNeg
45876>>>>>>>>>>>        Move (Pos(";",sFmt)) to iPos
45877>>>>>>>>>>>        Case Begin
45877>>>>>>>>>>>            Case (iPos and not(bIsNeg)) ;                Move (left(sFmt,iPos-1))    to sFmt
45880>>>>>>>>>>>            Case (iPos and bIsNeg) ;                Move (mid(sFmt,255,iPos+1)) to sFmt
45884>>>>>>>>>>>            Case (not(iPos) and not(bIsNeg)) ;                Move sFmt                   to sFmt
45888>>>>>>>>>>>            Case Else ;                Move ("-" + sFmt)           to sFmt
45890>>>>>>>>>>>        Case End
45890>>>>>>>>>>>        Send ParseFormat sFmt
45891>>>>>>>>>>>        Get pbThousandsSep to bSep
45892>>>>>>>>>>>        Get psLeft         to sLeft
45893>>>>>>>>>>>        Get psRight        to sRight
45894>>>>>>>>>>>        Get piPoints       to iPoints
45895>>>>>>>>>>>        Function_Return (Format_Num(Self, nNumber,iPoints,bSep,sLeft,sRight))
45896>>>>>>>>>>>    End_Function
45897>>>>>>>>>>>    
45897>>>>>>>>>>>End_Class
45898>>>>>>>>>
45898>>>>>>>>>Global_Variable Handle ghoFormatter
45898>>>>>>>>>Get Create of desktop U_cFormatter to ghoFormatter
45899>>>>>>>>>
45899>>>>>>>>>Function FormatNumber Global Number nNum Integer iPoints Returns String
45901>>>>>>>>>    Function_Return (FormatNum(ghoFormatter, nNum,iPoints))
45902>>>>>>>>>End_Function
45903>>>>>>>>>
45903>>>>>>>>>Function FormatCurrency Global Number nNum Integer iPoints Returns String
45905>>>>>>>>>    Function_Return (FormatCur(ghoFormatter, nNum,iPoints))
45906>>>>>>>>>End_Function
45907>>>>>>>>>
45907>>>>>>>>>Function FormatValue Global Number nNum String sFmt Returns String
45909>>>>>>>>>    Function_Return (FormatVal(ghoFormatter, nNum,sFmt))
45910>>>>>>>>>End_Function
45911>>>>>>>>>
45911>>>>>>>>>Procedure SetCurrencyFormat Global String sFmt
45913>>>>>>>>>    Send SetFormat of ghoFormatter sFmt True
45914>>>>>>>>>End_Procedure
45915>>>>>>>>>
45915>>>>>>>>>Procedure SetNumberFormat Global String sFmt
45917>>>>>>>>>    Send SetFormat of ghoFormatter sFmt False
45918>>>>>>>>>End_Procedure
45919>>>>>>>>>
45919>>>>>>>>>
45919>>>>>>>Use tWinStructs.pkg
45919>>>>>>>
45919>>>>>>>Use cli.pkg
45919>>>>>>>Use DFBTRDRV.PKG
45919>>>>>>>Use MSSqldrv.pkg
45919>>>>>>>Use db2_drv.pkg
45919>>>>>>>Use odbc_drv.pkg
45919>>>>>>>Use seq_chnl.pkg
45919>>>>>>>
45919>>>>>>>Register_Function phoWorkspace Returns Handle
45919>>>>>>>Register_Function Help_filename Returns String
45919>>>>>>>Register_Function GetHelpFile Returns String
45919>>>>>>>Register_Function pbEnterKeyAsTabKey Returns Boolean
45919>>>>>>>
45919>>>>>>>// *** Constant Declarations: ***
45919>>>>>>>//
45919>>>>>>>
45919>>>>>>>
45919>>>>>>>
45919>>>>>>>
45919>>>>>>>
45919>>>>>>>
45919>>>>>>>// 2016-12-12, Samuel:  Added section for Portuguese
45919>>>>>>>
45919>>>>>>>
45919>>>>>>>
45919>>>>>>>
45919>>>>>>>
45919>>>>>>>
45919>>>>>>>
45919>>>>>>>
45919>>>>>>>
45919>>>>>>>// System icon menu constants. If the upper left hand
45919>>>>>>>// icon in dialogs is clicked, shadow all menu items except Move & Close.
45919>>>>>>>    Define SC_RESTORE  for |CI$F120
45919>>>>>>>    Define SC_MOVE     for |CI$F010
45919>>>>>>>    Define SC_SIZE     for |CI$F000
45919>>>>>>>    Define SC_MINIMIZE for |CI$F020
45919>>>>>>>    Define SC_MAXIMIZE for |CI$F030
45919>>>>>>>    Define SC_CLOSE    for |CI$F060
45919>>>>>>>    Define SC_KEYMENU  for |CI$F100
45919>>>>>>>    Define SC_NEXTWINDOW for |CI$F040
45919>>>>>>>    Define SC_PREVWINDOW for |CI$F050
45919>>>>>>>
45919>>>>>>>Define CS_SignProgram        for "signtool.exe"
45919>>>>>>>Define CS_TempCertBatchFile  for "certinfo.bat"
45919>>>>>>>Define CS_VerifyCredentials  for "verify"
45919>>>>>>>Define CS_VerifyFileParam    for "/a"
45919>>>>>>>Define CS_DefAuthVerPolicy   for "/pa"
45919>>>>>>>Define SEE_MASK_NOCLOSEPROCESS for 64 //(0x00000040)
45919>>>>>>>
45919>>>>>>>// *** Struct Declarations: ***
45919>>>>>>>Struct AboutSHELLEXECUTEINFO
45919>>>>>>>    DWord   cbSize
45919>>>>>>>    Integer fMask
45919>>>>>>>    Handle  hwnd
45919>>>>>>>    Pointer lpVerb
45919>>>>>>>    Pointer lpFile
45919>>>>>>>    Pointer lpParameters
45919>>>>>>>    Pointer lpDirectory
45919>>>>>>>    Integer nShow
45919>>>>>>>    Pointer hInstApp
45919>>>>>>>    Pointer lpIDList
45919>>>>>>>    Pointer lpClass
45919>>>>>>>    Handle  hkeyClass
45919>>>>>>>    DWord   dwHotKey
45919>>>>>>>    Handle  hIconMonitor // Union
45919>>>>>>>    //Handle  hMonitor     // Union
45919>>>>>>>    Handle  hProcess
45919>>>>>>>End_Struct
45919>>>>>>>
45919>>>>>>>
45919>>>>>>>// OBSOLETE STRUCTURE AND WINDOWS API CALL. KEPT FOR BACKWARDS COMPATIBILITY
45919>>>>>>>//Type MEMORYSTATUS
45919>>>>>>>//   Field MEMORYSTATUS.dwLength         as DWord // sizeof(MEMORYSTATUS)
45919>>>>>>>//   Field MEMORYSTATUS.dwMemoryLoad     as DWord // percent Of memory in use
45919>>>>>>>//   Field MEMORYSTATUS.dwTotalPhys      as DWord // bytes Of physical memory
45919>>>>>>>//   Field MEMORYSTATUS.dwAvailPhys      as DWord // free physical memory bytes
45919>>>>>>>//   Field MEMORYSTATUS.dwTotalPageFile  as DWord // bytes Of paging file
45919>>>>>>>//   Field MEMORYSTATUS.dwAvailPageFile  as DWord // free bytes Of paging file
45919>>>>>>>//   Field MEMORYSTATUS.dwTotalVirtual   as DWord // user bytes Of address space
45919>>>>>>>//   Field MEMORYSTATUS.dwAvailVirtual   as DWord // free user bytes
45919>>>>>>>//End_Type
45919>>>>>>>
45919>>>>>>>// *** External Function calls: ***
45919>>>>>>>//
45919>>>>>>>    External_Function GetSystemMenu "GetSystemMenu" User32.dll Handle hWnd Boolean bRevert Returns Handle
45920>>>>>>>
45920>>>>>>>    External_Function GetRemoveMenu "RemoveMenu" user32.dll Handle hWnd UInteger uPosition UInteger uFlags Returns Handle
45921>>>>>>>
45921>>>>>>>// Do not call directly, use the wrapper function instead
45921>>>>>>>External_Function WNetGetUserW "WNetGetUserW" MPR.DLL ;    Pointer lpName ;    Pointer lpUser_Name ;    Pointer lpLength ;    Returns DWord
45922>>>>>>>
45922>>>>>>>    // Wrapper Function WNetGetUser
45922>>>>>>>    Function WNetGetUser Global ;        Pointer lpName ;        Pointer lpUser_Name ;        Pointer lpLength ;        Returns DWord
45924>>>>>>>
45924>>>>>>>        DWord   dwResult
45924>>>>>>>        UWide   uwName uwUserName
45924>>>>>>>        UWide   uwName uwUserName
45924>>>>>>>
45924>>>>>>>        Send StringToWide lpName (&uwName)
45925>>>>>>>
45925>>>>>>>        Send WideSetBuffer lpUser_Name lpLength (&uwUserName)
45926>>>>>>>
45926>>>>>>>        Move (WNetGetUserW (uwName.lpUText, uwUserName.lpUText, lpLength)) to dwResult
45927>>>>>>>
45927>>>>>>>        Send WideToString (&uwUserName) lpUser_Name
45928>>>>>>>
45928>>>>>>>        Function_Return dwResult
45929>>>>>>>    End_Function
45930>>>>>>>
45930>>>>>>>
45930>>>>>>>    External_Function GlobalMemoryStatus "GlobalMemoryStatus" Kernel32.Dll Pointer lpsMemoryStatus Returns Integer
45931>>>>>>>
45931>>>>>>>    External_Function GlobalMemoryStatusEx "GlobalMemoryStatusEx" Kernel32.Dll Pointer lpMemoryStatus Returns Integer
45932>>>>>>>
45932>>>>>>>External_Function AboutShellExecuteEx "ShellExecuteEx" Shell32.dll Pointer pExecInfo Returns Integer
45933>>>>>>>
45933>>>>>>>External_Function AboutWaitForSingleObject "WaitForSingleObject" Kernel32.dll ;  Handle hHandle ;  DWord dwMilliseconds ;  Returns DWord
45934>>>>>>>
45934>>>>>>>External_Function AboutCloseHandle "CloseHandle" Kernel32.dll Handle hHandle Returns Integer
45935>>>>>>>
45935>>>>>>>// *** Global/Desktop Function Declarations: ***
45935>>>>>>>
45935>>>>>>>Function ComputerName Desktop Returns String
45937>>>>>>>    String sName
45937>>>>>>>    Get_Environment "COMPUTERNAME" to sName
45938>>>>>>>>
45938>>>>>>>    Function_Return sName
45939>>>>>>>End_Function
45940>>>>>>>
45940>>>>>>>Function Network_User_Name Desktop Returns String
45942>>>>>>>    WString wName
45942>>>>>>>    Integer iRetval iLength
45942>>>>>>>
45942>>>>>>>    Move 0 to iLength
45943>>>>>>>    Move (WNetGetUserW (0, 0, AddressOf (iLength))) to iRetval
45944>>>>>>>    Move (ZeroString(iLength)) to wName
45945>>>>>>>    Move (WNetGetUserW (0, AddressOf (wName), AddressOf (iLength))) to iRetval
45946>>>>>>>
45946>>>>>>>    If (iRetval = NO_ERROR) Begin
45948>>>>>>>        Function_Return (CString (wName))
45949>>>>>>>    End
45949>>>>>>>>
45949>>>>>>>
45949>>>>>>>    Function_Return "User Unknown"
45950>>>>>>>End_Function
45951>>>>>>>
45951>>>>>>>Function SQLClientVersion Desktop String sDriverID Integer iClient Returns String
45953>>>>>>>    String sClient sDriver sClientDriver
45953>>>>>>>    Integer iNumberOfDrivers iDriver iCount iClientVersion
45953>>>>>>>    Handle hoMsqlDrv
45953>>>>>>>
45953>>>>>>>    Move 0 to iDriver
45954>>>>>>>    Move "" to sClient
45955>>>>>>>    Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
45958>>>>>>>    For iCount from 1 to iNumberOfDrivers
45964>>>>>>>>
45964>>>>>>>        Get_Attribute DF_DRIVER_NAME of iCount to sDriver
45967>>>>>>>        If (Uppercase(sDriver) = Uppercase(sDriverID)) Begin
45969>>>>>>>            Move iCount to iDriver
45970>>>>>>>            Move iNumberOfDrivers to iCount // We're done.
45971>>>>>>>        End
45971>>>>>>>>
45971>>>>>>>    Loop
45972>>>>>>>>
45972>>>>>>>
45972>>>>>>>    // This info is (at current) only available for the MS SQL driver:
45972>>>>>>>    If (sDriverID = MSSQLDRV_ID) Begin
45974>>>>>>>        Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
45977>>>>>>>        Get Create (RefClass(cMSSQLHandler)) to hoMsqlDrv
45978>>>>>>>        Get SqlServerClientVersionName of hoMsqlDrv iClientVersion to sClientDriver
45979>>>>>>>        Send Destroy of hoMsqlDrv
45980>>>>>>>        Move (SFormat("MSSQLDRV Client Version: %1", sClientDriver)) to sClient
45981>>>>>>>    End
45981>>>>>>>>
45981>>>>>>>
45981>>>>>>>    Function_Return sClient
45982>>>>>>>End_Function
45983>>>>>>>
45983>>>>>>>// *** Class Declarations: ***
45983>>>>>>>//
45983>>>>>>>Class cBitmapContainerDFLink is a BitmapContainer
45984>>>>>>>    Procedure Mouse_Click Integer iWindowNumber Integer iPosition
45986>>>>>>>        Send Mouse_Up iWindowNumber iPosition
45987>>>>>>>    End_Procedure
45988>>>>>>>    Procedure Mouse_Up Integer iWindowNumber Integer iPosition
45990>>>>>>>        Forward Send Mouse_Up iWindowNumber iPosition
45992>>>>>>>        Send Show_HomePage "http://www.dataaccess.com/"
45993>>>>>>>    End_Procedure
45994>>>>>>>End_Class
45995>>>>>>>
45995>>>>>>>Class cCopyEditorContentButton is a Button
45996>>>>>>>    Procedure Construct_Object
45998>>>>>>>        Forward Send Construct_Object
46000>>>>>>>        Property Handle phoEditorHandle
46001>>>>>>>        Set psToolTip to C_$DescCopy
46002>>>>>>>    End_Procedure
46003>>>>>>>
46003>>>>>>>    Procedure CopyToWindowsClipboard
46005>>>>>>>        Handle hoEditor
46005>>>>>>>        Boolean bCanCopy
46005>>>>>>>        Address aEditorAddress
46005>>>>>>>
46005>>>>>>>        Get phoEditorHandle to hoEditor
46006>>>>>>>        Send Select_All of hoEditor
46007>>>>>>>        Get CanCopy of hoEditor to bCanCopy
46008>>>>>>>        If (bCanCopy = True) Begin
46010>>>>>>>            Get paValue of hoEditor to aEditorAddress
46011>>>>>>>            Send Copy   of hoEditor
46012>>>>>>>            // Remove the selection after text is copied to the clipboard.
46012>>>>>>>            Send Beginning_of_Data of hoEditor
46013>>>>>>>            Send Info_Box C_$CopyToClipboard_Text
46014>>>>>>>        End
46014>>>>>>>>
46014>>>>>>>    End_Procedure
46015>>>>>>>End_Class
46016>>>>>>>
46016>>>>>>>Class SysinfoDisplay is a cTextEdit
46017>>>>>>>    Procedure Construct_Object
46019>>>>>>>        Forward Send Construct_Object
46021>>>>>>>
46021>>>>>>>        Set Size to 100 245
46022>>>>>>>        Set Location to 6 6
46023>>>>>>>        Set Border_Style to Border_None
46024>>>>>>>        Set Read_Only_State to True
46025>>>>>>>        Set pbWrap to True
46026>>>>>>>        Set peAnchors to anAll
46027>>>>>>>    End_Procedure
46028>>>>>>>
46028>>>>>>>    // Augmented class message to adjust certain text strings that are wrong...
46028>>>>>>>
46028>>>>>>>    Procedure AppendTextLn String sText
46030>>>>>>>        String sWorkspaceWSFile
46030>>>>>>>
46030>>>>>>>        // Only works for English:
46030>>>>>>>        If (ghoApplication > 0) Begin
46032>>>>>>>            If (sText contains "Workspace Name") Begin
46034>>>>>>>                Move "Workspace Config Filename:" to sText
46035>>>>>>>                Get psWorkspaceWSFile of (phoWorkspace(ghoApplication)) to sWorkspaceWSFile
46036>>>>>>>                Move (sText * sWorkspaceWSFile) to sText
46037>>>>>>>            End
46037>>>>>>>>
46037>>>>>>>        End
46037>>>>>>>>
46037>>>>>>>        Send AppendText sText
46038>>>>>>>        Send AppendText (character(10))
46039>>>>>>>    End_Procedure
46040>>>>>>>
46040>>>>>>>    //    This method will show the name Of the current directory in the system
46040>>>>>>>    //    information box
46040>>>>>>>    Procedure Show_Current_Directory
46042>>>>>>>        String sDir
46042>>>>>>>
46042>>>>>>>        Get_Current_Directory To sDir
46043>>>>>>>
46043>>>>>>>        Send AppendTextLn (SFormat (C_$CurrentDirectory, sDir))
46044>>>>>>>    End_Procedure
46045>>>>>>>
46045>>>>>>>    Procedure Show_Windows_Directory
46047>>>>>>>        String sWindir
46047>>>>>>>
46047>>>>>>>        Get_Windows_Directory To sWindir
46048>>>>>>>
46048>>>>>>>        Send AppendTextLn (SFormat (C_$WindowsDirectory, sWindir))
46049>>>>>>>    End_Procedure
46050>>>>>>>
46050>>>>>>>    Procedure Show_Current_User
46052>>>>>>>        Send AppendTextLn (SFormat (C_$Computer_Name, ComputerName (Self)))
46053>>>>>>>        Send AppendTextLn (SFormat (C_$NetworkUserName, Network_User_Name (Self)))
46054>>>>>>>    End_Procedure
46055>>>>>>>
46055>>>>>>>    Procedure Show_Number_Format
46057>>>>>>>        Integer iFormat
46057>>>>>>>        String sFormatText
46057>>>>>>>
46057>>>>>>>        Get_Attribute DF_THOUSANDS_SEPARATOR to iFormat
46060>>>>>>>        Move (Character (iFormat)) To sFormatText
46061>>>>>>>        Send AppendTextLn (SFormat (C_$ThousandsSeparator, sFormatText, iFormat))
46062>>>>>>>
46062>>>>>>>        Get_Attribute DF_DECIMAL_SEPARATOR to iFormat
46065>>>>>>>        Move (Character (iFormat)) to sFormatText
46066>>>>>>>        Send AppendTextLn (SFormat (C_$DecimalSeparator, sFormatText))
46067>>>>>>>    End_Procedure
46068>>>>>>>
46068>>>>>>>    Procedure Show_Filelist_Name
46070>>>>>>>        String sFilename
46070>>>>>>>
46070>>>>>>>        Get_Attribute DF_FILELIST_NAME to sFilename
46073>>>>>>>
46073>>>>>>>        Send AppendTextLn (SFormat (C_$CurrentFilelist, sFilename))
46074>>>>>>>    End_Procedure
46075>>>>>>>
46075>>>>>>>    Procedure Show_Lock_Delay
46077>>>>>>>        Integer iLockdelay
46077>>>>>>>
46077>>>>>>>        Get_Attribute DF_LOCK_DELAY to iLockdelay
46080>>>>>>>
46080>>>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingDelay, iLockDelay))
46081>>>>>>>    End_Procedure
46082>>>>>>>
46082>>>>>>>    Procedure Show_Lock_Timeout
46084>>>>>>>        Integer iLockTimeout
46084>>>>>>>
46084>>>>>>>        Get_Attribute DF_LOCK_TIMEOUT to iLockTimeout
46087>>>>>>>
46087>>>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingTimeout, iLockTimeOut))
46088>>>>>>>    End_Procedure
46089>>>>>>>
46089>>>>>>>    Procedure Show_Screen_Size
46091>>>>>>>        Integer iYscreensize iXscreensize
46091>>>>>>>
46091>>>>>>>        Move (GetSystemMetrics (SM_CXSCREEN)) To iXscreensize
46092>>>>>>>        Move (GetSystemMetrics (SM_CYSCREEN)) To iYscreensize
46093>>>>>>>
46093>>>>>>>        Send AppendTextLn (SFormat (C_$VideoResolution, iXscreensize, iYscreensize))
46094>>>>>>>    End_Procedure
46095>>>>>>>
46095>>>>>>>    Procedure Show_Page_Size
46097>>>>>>>        Send AppendTextLn (SFormat (C_$PageEndFormFeed, Pageend, Pagefeed))
46098>>>>>>>    End_procedure
46099>>>>>>>
46099>>>>>>>    Procedure Show_Date
46101>>>>>>>        Date dToday
46101>>>>>>>
46101>>>>>>>        Move (CurrentDateTime()) to dToday
46102>>>>>>>
46102>>>>>>>        Send AppendTextLn (SFormat (C_$CurrentSystemDate, String (dToday)))
46103>>>>>>>    End_procedure
46104>>>>>>>
46104>>>>>>>    Procedure Show_Date_Format
46106>>>>>>>        Integer iDateFormat
46106>>>>>>>        String sDateFormat
46106>>>>>>>
46106>>>>>>>        Get_Attribute DF_DATE_FORMAT to iDateFormat
46109>>>>>>>        Case Begin
46109>>>>>>>            Case (iDateFormat = DF_DATE_USA)
46111>>>>>>>                Move C_$USA To sDateFormat
46112>>>>>>>                Case Break
46113>>>>>>>            Case (iDateFormat = DF_DATE_EUROPEAN)
46116>>>>>>>                Move C_$European To sDateFormat
46117>>>>>>>                Case Break
46118>>>>>>>            Case (iDateFormat = DF_DATE_MILITARY)
46121>>>>>>>                Move C_$Military To sDateFormat
46122>>>>>>>                Case Break
46123>>>>>>>            Case Else
46123>>>>>>>                Move C_$UnknownDateType To sDateFormat
46124>>>>>>>                Case Break
46125>>>>>>>        Case End
46125>>>>>>>
46125>>>>>>>        Send AppendTextLn (SFormat (C_$DateFormat, sDateformat))
46126>>>>>>>    End_Procedure
46127>>>>>>>
46127>>>>>>>    // 2013-08-14 NGS
46127>>>>>>>    // Unformatted numeric values shown doesn't look good. These looks much better.
46127>>>>>>>    Procedure Show_Systemresources
46129>>>>>>>        tWinMemoryStatusEx MemoryStatusInfo
46129>>>>>>>        tWinMemoryStatusEx MemoryStatusInfo
46129>>>>>>>        Integer iRetval
46129>>>>>>>        Number nValue
46129>>>>>>>        String sValue
46129>>>>>>>
46129>>>>>>>        Move (SizeOfType (tWinMemoryStatusEx)) to MemoryStatusInfo.dwLength
46130>>>>>>>        Move (GlobalMemoryStatusEx (AddressOf (MemoryStatusInfo))) to iRetval
46131>>>>>>>        If (iRetval = 0) Begin
46133>>>>>>>            Move (ShowLastError ()) to iRetval
46134>>>>>>>            Procedure_Return
46135>>>>>>>        End
46135>>>>>>>>
46135>>>>>>>
46135>>>>>>>        Send AppendTextLn ""
46136>>>>>>>        Move MemoryStatusInfo.ullTotalPhys to nValue
46137>>>>>>>
46137>>>>>>>        // Show memory in Gigabytes:
46137>>>>>>>        Move (nValue/1024/1024/1024) to nValue
46138>>>>>>>        Move (Round(nValue)) to nValue
46139>>>>>>>        Get FormatNumber nValue 2 to sValue
46140>>>>>>>        Send AppendTextLn (SFormat (C_$AvailableMemory, (sValue * "GB")))
46141>>>>>>>        Send AppendTextLn (SFormat (C_$MemoryUtilization, String(MemoryStatusInfo.dwMemoryLoad) * "%"))
46142>>>>>>>
46142>>>>>>>//        Send AppendTextLn (SFormat (C_$AvailablePhysicalMemory, Real (MemoryStatusInfo.ullAvailPhys) / Real (MemoryStatusInfo.ullTotalPhys) * 100.0))
46142>>>>>>>        Move (Real(MemoryStatusInfo.ullAvailPhys) / Real(MemoryStatusInfo.ullTotalPhys) * 100.0) to nValue
46143>>>>>>>        Move (Round(nValue)) to nValue
46144>>>>>>>        Get FormatNumber nValue 0 to sValue
46145>>>>>>>        Send AppendTextLn (SFormat (C_$AvailablePhysicalMemory, (sValue * "%")))
46146>>>>>>>
46146>>>>>>>//        Send AppendTextLn (SFormat (C_$AvailablePagefileSpace, Real (MemoryStatusInfo.ullAvailPageFile) / Real (MemoryStatusInfo.ullTotalPageFile) * 100.0))
46146>>>>>>>        Move (Real(MemoryStatusInfo.ullAvailPageFile) / Real(MemoryStatusInfo.ullTotalPageFile) * 100.0) to nValue
46147>>>>>>>        Move (Round(nValue)) to nValue
46148>>>>>>>        Get FormatNumber nValue 0 to sValue
46149>>>>>>>        Send AppendTextLn (SFormat (C_$AvailablePagefileSpace, (sValue * "%")))
46150>>>>>>>
46150>>>>>>>//        Send AppendTextLn (SFormat (C_$AvailableVirtualMemory, Real (MemoryStatusInfo.ullAvailVirtual) / Real (MemoryStatusInfo.ullTotalVirtual) * 100.0))
46150>>>>>>>        Move (Real(MemoryStatusInfo.ullAvailVirtual) / Real(MemoryStatusInfo.ullTotalVirtual) * 100.0) to nValue
46151>>>>>>>        Move (Round(nValue)) to nValue
46152>>>>>>>        Get FormatNumber nValue 0 to sValue
46153>>>>>>>        Send AppendTextLn (SFormat (C_$AvailableVirtualMemory, (sValue * "%")))
46154>>>>>>>
46154>>>>>>>        // Add an empty row after the memory information:
46154>>>>>>>        Send AppendTextLn ""
46155>>>>>>>    End_Procedure
46156>>>>>>>
46156>>>>>>>    Procedure Show_Registration
46158>>>>>>>        String sRegName
46158>>>>>>>        Integer iSN iUsersMax iUserCount
46158>>>>>>>
46158>>>>>>>        Registration sRegName iSN
46159>>>>>>>>
46159>>>>>>>        Get_Licensed_Max_Users to iUsersMax
46160>>>>>>>        Get_Current_User_Count to iUserCount
46161>>>>>>>
46161>>>>>>>        Send AppendTextLn (SFormat (C_$Serial, iSN))
46162>>>>>>>        Send AppendTextLn (SFormat (C_$RegName, sRegName))
46163>>>>>>>        Send AppendTextLn (SFormat (C_$Current_User_Count, iUserCount))
46164>>>>>>>        Send AppendTextLn (SFormat (C_$Max_Licensed_User_Count, iUsersMax))
46165>>>>>>>    End_Procedure
46166>>>>>>>
46166>>>>>>>    //****************************************************************************
46166>>>>>>>    // If workspaces are used, we will send the message EnumerateWorkspaceData
46166>>>>>>>    // To the workspace object passing the an object and message To send back
46166>>>>>>>    // To this object. It is expected that the workspace object will send this
46166>>>>>>>    // message for every line Of information it wants displayed (passing the
46166>>>>>>>    // information To be displayed
46166>>>>>>>    //****************************************************************************
46166>>>>>>>    Register_Procedure EnumerateWorkspaceData Integer hObjId Integer hmMessId
46166>>>>>>>
46166>>>>>>>    Procedure Show_ServicePack
46168>>>>>>>        String sKey sVersion sDataFlex
46168>>>>>>>        Handle hoRegistry
46168>>>>>>>        Boolean bExists bOpened
46168>>>>>>>
46168>>>>>>>        Move "DataFlex"        to sDataFlex
46169>>>>>>>
46169>>>>>>>        Get Create (RefClass(cRegistry)) to hoRegistry
46170>>>>>>>        Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
46171>>>>>>>        Set pfAccessRights of hoRegistry to KEY_READ
46172>>>>>>>        Get KeyExists of hoRegistry "SOFTWARE\Wow6432Node" to bExists
46173>>>>>>>
46173>>>>>>>        If (bExists) Begin
46175>>>>>>>            Move ("SOFTWARE\Wow6432Node\Data Access Worldwide\" + sDataFlex + "\" + SysConf (SYSCONF_DATAFLEX_REV)) to sKey
46176>>>>>>>        End
46176>>>>>>>>
46176>>>>>>>        Else Begin
46177>>>>>>>            Move ("SOFTWARE\Data Access Worldwide\"             + sDataFlex + "\" + SysConf (SYSCONF_DATAFLEX_REV)) to sKey
46178>>>>>>>        End
46178>>>>>>>>
46178>>>>>>>        Get KeyExists of hoRegistry sKey to bExists
46179>>>>>>>        If (bExists) Begin
46181>>>>>>>            Get OpenKey of hoRegistry sKey to bOpened
46182>>>>>>>            If (bOpened) Begin
46184>>>>>>>                Get ValueExists of hoRegistry "CurrentVersionDescription" to bExists
46185>>>>>>>                If (bExists) Begin
46187>>>>>>>                    Get ReadString of hoRegistry "CurrentVersionDescription" to sVersion
46188>>>>>>>                End
46188>>>>>>>>
46188>>>>>>>                Send CloseKey of hoRegistry
46189>>>>>>>            End
46189>>>>>>>>
46189>>>>>>>        End
46189>>>>>>>>
46189>>>>>>>        Send Destroy of hoRegistry
46190>>>>>>>
46190>>>>>>>        If (sVersion <> "") Begin
46192>>>>>>>           Send AppendTextLn sVersion
46193>>>>>>>           Send AppendTextLn ""
46194>>>>>>>        End
46194>>>>>>>>
46194>>>>>>>    End_Procedure
46195>>>>>>>
46195>>>>>>>    Procedure Show_WorkspaceInformation
46197>>>>>>>        Integer hoWorkspace
46197>>>>>>>
46197>>>>>>>        If (ghoApplication <> 0) Begin
46199>>>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
46200>>>>>>>            If (hoWorkspace <> 0) Begin
46202>>>>>>>                Send EnumerateWorkspaceData of hoWorkspace Self msg_AppendTextLn
46203>>>>>>>            End
46203>>>>>>>>
46203>>>>>>>        End
46203>>>>>>>>
46203>>>>>>>    End_Procedure
46204>>>>>>>
46204>>>>>>>    //****************************************************************************
46204>>>>>>>    // If connection ids are used, we will send the message EnumerateConnections
46204>>>>>>>    // to the connection manager object passing the an object and message to send
46204>>>>>>>    // back to this object. It is expected that the connection manager object will
46204>>>>>>>    // send this message for every line Of information it wants displayed (passing
46204>>>>>>>    // the information To be displayed
46204>>>>>>>    //****************************************************************************
46204>>>>>>>    Register_Procedure EnumerateConnections Integer hObjId Integer hmMessId
46204>>>>>>>
46204>>>>>>>    Procedure Show_ConnectionIdInformation
46206>>>>>>>        If (ghoConnection > 0) Begin
46208>>>>>>>            Send EnumerateConnections of ghoConnection Self (RefProc(AppendTextLn))
46209>>>>>>>            Send AppendTextLn ""
46210>>>>>>>        End
46210>>>>>>>>
46210>>>>>>>    End_Procedure
46211>>>>>>>
46211>>>>>>>    Function VersionStr Integer iVer Integer iRev Integer iBld Returns String
46213>>>>>>>        Function_Return (String (iVer) - "." - String (iRev) - "." - String (iBld))
46214>>>>>>>    End_Function
46215>>>>>>>
46215>>>>>>>    Procedure Show_Versions
46217>>>>>>>        Integer iVersion iRevision iBuild
46217>>>>>>>
46217>>>>>>>        Version_information iVersion iRevision iBuild
46219>>>>>>>
46219>>>>>>>        Send AppendTextLn (SFormat (C_$RuntimeVersion, VersionStr(self,iVersion,iRevision,iBuild) ))
46220>>>>>>>        Send AppendTextLn (SFormat (C_$PackageVersion, VersionStr(self,PKG_VERSION, PKG_REVISION, PKG_BUILD) ))
46221>>>>>>>        Send AppendTextLn (SFormat (C_$FMACVersion, VersionStr(self,FMAC_VERSION, FMAC_REVISION, FMAC_BUILD) ))
46222>>>>>>>        Send AppendTextLn "This is a 32-bit exe file"
46223>>>>>>>    End_Procedure
46224>>>>>>>
46224>>>>>>>    Function IsDAWSQLDriver String sDriverID Returns Boolean
46226>>>>>>>        Boolean bOK
46226>>>>>>>        Move (sDriverID = MSSQLDRV_ID or sDriverID = DB2_DRV_ID or sDriverID = ODBC_DRV_ID) to bOK
46227>>>>>>>        Function_Return bOK
46228>>>>>>>    End_Function
46229>>>>>>>
46229>>>>>>>    //***
46229>>>>>>>    //*** BW
46229>>>>>>>    //*** Procedure: Show_Drivers
46229>>>>>>>    //*** Purpose  : Show loaded database drivers
46229>>>>>>>    //***
46229>>>>>>>
46229>>>>>>>//#IF (Required_FMAC_Build > 106)
46229>>>>>>>//    #Warning -3
46229>>>>>>>//#ENDIF
46229>>>>>>>    Procedure Show_Drivers
46231>>>>>>>        String sDriverID sVersion sClient sValue
46231>>>>>>>        Integer iNumberOfDrivers iDriver iClient iUsersMax iSerialNo iNumServers iCount
46231>>>>>>>        Handle hoCLIHandler hoBtrvHandler
46231>>>>>>>        Boolean bStudioLicense bIsDAWDriver
46231>>>>>>>
46231>>>>>>>        Move False to bStudioLicense
46232>>>>>>>
46232>>>>>>>        Get Create (RefClass(cCLIHandler))      to hoCLIHandler
46233>>>>>>>        Get Create (RefClass(cDFBtrDrvHandler)) to hoBtrvHandler
46234>>>>>>>
46234>>>>>>>        // For testing purposes:
46234>>>>>>>//        Send Ignore_Error of Error_Object_Id DFERR_CANT_LOAD_DLL
46234>>>>>>>//        Load_Driver MSSQLDRV_ID
46234>>>>>>>//        Load_Driver ODBC_DRV_ID
46234>>>>>>>//        Load_Driver DB2_DRV_ID
46234>>>>>>>//        Send Trap_Error of Error_Object_Id DFERR_CANT_LOAD_DLL
46234>>>>>>>//
46234>>>>>>>        Move False to Err
46235>>>>>>>
46235>>>>>>>        // Loop through all loaded drivers.
46235>>>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
46238>>>>>>>        If (iNumberOfDrivers > 1) Begin
46240>>>>>>>            Send AppendTextLn ""
46241>>>>>>>        End
46241>>>>>>>>
46241>>>>>>>        For iDriver from 1 to iNumberOfDrivers
46247>>>>>>>>
46247>>>>>>>            Send Ignore_Error of Error_Object_Id DFERR_BAD_PARAMETER
46248>>>>>>>            Get_Attribute DF_DRIVER_NAME of iDriver to sDriverID
46251>>>>>>>            Send Trap_Error of Error_Object_Id DFERR_BAD_PARAMETER
46252>>>>>>>            Get IsDAWSQLDriver  sDriverID to bIsDAWDriver
46253>>>>>>>
46253>>>>>>>            If (sDriverID = DFBTRDRV_ID or bIsDAWDriver = True) Begin
46255>>>>>>>
46255>>>>>>>                // Pervasive/Btrieve database
46255>>>>>>>                If (sDriverID = DFBTRDRV_ID) Begin
46257>>>>>>>                    Get CKRevision of hoBtrvHandler to sVersion
46258>>>>>>>                    Get PSQLLocalEngineVersionInfo of hoBtrvHandler 0 to sClient
46259>>>>>>>                    If (sClient <> "0.0.0") Begin
46261>>>>>>>                        Send AppendTextLn (SFormat (C_$Pervasive_Local_Engine_Version, sClient))
46262>>>>>>>                    End
46262>>>>>>>>
46262>>>>>>>                    Get PSQLServerEngineVersionInfo of hoBtrvHandler 0 to sClient
46263>>>>>>>                    If (sClient <> "0.0.0") Begin
46265>>>>>>>                        Send AppendTextLn (SFormat (C_$Pervasive_Server_Engine_Version, sClient))
46266>>>>>>>                    End
46266>>>>>>>>
46266>>>>>>>                End
46266>>>>>>>>
46266>>>>>>>
46266>>>>>>>                Else Begin
46267>>>>>>>                    Set psDriverID of hoCLIHandler to sDriverID
46268>>>>>>>                    Move 0 to iNumServers
46269>>>>>>>                    If (sDriverID <> DATAFLEX_ID) Begin
46271>>>>>>>                        Get_Attribute DF_DRIVER_NUMBER_SERVERS of iDriver to iNumServers
46274>>>>>>>                    End
46274>>>>>>>>
46274>>>>>>>
46274>>>>>>>                    If (bIsDAWDriver = True) Begin
46276>>>>>>>                        If (sDriverID = MSSQLDRV_ID) Begin
46278>>>>>>>                            Get SQLClientVersion sDriverID iClient to sClient
46279>>>>>>>                        End
46279>>>>>>>>
46279>>>>>>>                        Get CKRevision of hoCLIHandler to sVersion
46280>>>>>>>                    End
46280>>>>>>>>
46280>>>>>>>
46280>>>>>>>                    // If the serialnumber is = 0, it means that the
46280>>>>>>>                    // Studio licens is in use and there is no
46280>>>>>>>                    // number of max users defined because the driver is
46280>>>>>>>                    // relying on the info from the VDF license.
46280>>>>>>>                    If (bStudioLicense = False) Begin
46282>>>>>>>                        Get SerialNumber of hoCLIHandler to iSerialNo
46283>>>>>>>                        Move (iSerialNo = 0) to bStudioLicense
46284>>>>>>>                    End
46284>>>>>>>>
46284>>>>>>>                End
46284>>>>>>>>
46284>>>>>>>                Send AppendTextLn (SFormat (C_$DatabaseDriver, (sDriverID * "-" * (C_$Version + ": " + sVersion))))
46285>>>>>>>                If (sClient <> "" and sDriverID = MSSQLDRV_ID) Begin
46287>>>>>>>                    Send AppendTextLn (C_$SQL_Client_Text * sClient)
46288>>>>>>>                End
46288>>>>>>>>
46288>>>>>>>                If (iNumServers <> 0) Begin
46290>>>>>>>                    For iCount from 1 to iNumServers
46296>>>>>>>>
46296>>>>>>>                        Get_Attribute DF_DRIVER_SERVER_NAME of iDriver iCount to sValue
46299>>>>>>>                        If (not(sValue contains ";PWD=")) Begin
46301>>>>>>>                            Send AppendTextLn ("    " + C_$SQLServerText * sValue)
46302>>>>>>>                        End
46302>>>>>>>>
46302>>>>>>>                    Loop
46303>>>>>>>>
46303>>>>>>>                End
46303>>>>>>>>
46303>>>>>>>            End
46303>>>>>>>>
46303>>>>>>>        Loop
46304>>>>>>>>
46304>>>>>>>
46304>>>>>>>        Send AppendTextLn ""
46305>>>>>>>        If (bStudioLicense = False) Begin
46307>>>>>>>            Get MaxUsers of hoCLIHandler to iUsersMax
46308>>>>>>>            Send AppendTextLn (SFormat (C_$Max_DbDriver_Licensed_User_Count, iUsersMax))
46309>>>>>>>        End
46309>>>>>>>>
46309>>>>>>>        Else Begin
46310>>>>>>>            Send AppendTextLn C_$DF_Studio_License_Text
46311>>>>>>>        End
46311>>>>>>>>
46311>>>>>>>        Send Destroy of hoCLIHandler
46312>>>>>>>        Send Destroy of hoBtrvHandler
46313>>>>>>>    End_Procedure
46314>>>>>>>
46314>>>>>>>    Procedure Show_HelpFile
46316>>>>>>>        String sHelpFile
46316>>>>>>>        Integer eHelpType
46316>>>>>>>
46316>>>>>>>        If (ghoApplication <> 0) Begin
46318>>>>>>>            Get peHelpType Of ghoApplication To eHelpType
46319>>>>>>>            If (eHelpType = htHtmlHelp and ghoHtmlHelp) Begin
46321>>>>>>>                Get GetHelpFile Of ghoHtmlHelp To sHelpFile
46322>>>>>>>            End
46322>>>>>>>>
46322>>>>>>>            Else If (eHelpType = htWinHelp and Help_object_id) Begin
46325>>>>>>>                Get Help_filename Of Help_object_id To sHelpFile
46326>>>>>>>            End
46326>>>>>>>>
46326>>>>>>>            Else Begin
46327>>>>>>>                Move C_$ThereIsNoHelpfileDefined To sHelpFile
46328>>>>>>>            End
46328>>>>>>>>
46328>>>>>>>
46328>>>>>>>            Send AppendTextLn (SFormat (C_$HelpFile, sHelpFile))
46329>>>>>>>        End
46329>>>>>>>>
46329>>>>>>>    End_Procedure
46330>>>>>>>
46330>>>>>>>    Procedure Show_EnterAsTab
46332>>>>>>>        Boolean bEnterKeyAsTabKey
46332>>>>>>>        String sText
46332>>>>>>>
46332>>>>>>>        If (ghoApplication <> 0) Begin
46334>>>>>>>            Get pbEnterKeyAsTabKey Of ghoApplication To bEnterKeyAsTabKey
46335>>>>>>>            If (bEnterKeyAsTabKey) Begin
46337>>>>>>>                Move "True" To sText
46338>>>>>>>            End
46338>>>>>>>>
46338>>>>>>>            Else Begin
46339>>>>>>>                Move "False" To sText
46340>>>>>>>            End
46340>>>>>>>>
46340>>>>>>>            Send AppendTextLn (SFormat (C_$EnterKeyNavForward, sText))
46341>>>>>>>        End
46341>>>>>>>>
46341>>>>>>>    End_Procedure
46342>>>>>>>
46342>>>>>>>    //    During activation we will remove the old information and add the newly
46342>>>>>>>    //    found systeminformation
46342>>>>>>>    Procedure Add_Focus Integer hoRoot
46344>>>>>>>        Forward Send Add_Focus hoRoot
46346>>>>>>>
46346>>>>>>>        Send Delete_Data
46347>>>>>>>
46347>>>>>>>        Set Changed_State To False
46348>>>>>>>        Set Read_Only_State To True
46349>>>>>>>
46349>>>>>>>        Send Show_Registration
46350>>>>>>>        Send Show_Drivers
46351>>>>>>>        Send Show_ServicePack
46352>>>>>>>        Send Show_Versions
46353>>>>>>>        Send AppendTextLn ""
46354>>>>>>>
46354>>>>>>>        If (ghoApplication <> 0) Begin
46356>>>>>>>            Send Show_WorkSpaceInformation
46357>>>>>>>            Send Show_HelpFile
46358>>>>>>>            Send AppendTextLn ""
46359>>>>>>>        End
46359>>>>>>>>
46359>>>>>>>        Else Begin
46360>>>>>>>            Send AppendTextLn ""
46361>>>>>>>        End
46361>>>>>>>>
46361>>>>>>>
46361>>>>>>>        If (ghoConnection <> 0) Begin
46363>>>>>>>            Send Show_ConnectionIdInformation
46364>>>>>>>        End
46364>>>>>>>>
46364>>>>>>>
46364>>>>>>>        Send Show_Current_User
46365>>>>>>>        Send Show_Windows_Directory
46366>>>>>>>        Send Show_Current_Directory
46367>>>>>>>
46367>>>>>>>        // This is already shown in the workspace details,
46367>>>>>>>        // unless no workspace object is present:
46367>>>>>>>        If (ghoApplication = 0) Begin
46369>>>>>>>            Send Show_Filelist_Name
46370>>>>>>>        End
46370>>>>>>>>
46370>>>>>>>
46370>>>>>>>        If (ghoApplication <> 0) Begin
46372>>>>>>>            Send AppendTextLn ""
46373>>>>>>>            Send Show_EnterAsTab
46374>>>>>>>        End
46374>>>>>>>>
46374>>>>>>>
46374>>>>>>>        Send Show_Screen_Size
46375>>>>>>>        Send Show_Page_Size
46376>>>>>>>        Send Show_Number_Format
46377>>>>>>>        Send Show_Date_Format
46378>>>>>>>        Send Show_Lock_Delay
46379>>>>>>>        Send Show_Lock_Timeout
46380>>>>>>>        Send Show_Date
46381>>>>>>>        Send Show_Systemresources
46382>>>>>>>        Send Beginning_of_Data
46383>>>>>>>
46383>>>>>>>        Set Icon to 'default.ico'
46384>>>>>>>    End_Procedure
46385>>>>>>>End_Class
46386>>>>>>>
46386>>>>>>>Class SysInfoDialog is a ModalPanel
46387>>>>>>>    Procedure Construct_Object
46389>>>>>>>        Forward Send Construct_Object
46391>>>>>>>
46391>>>>>>>        Set Label to C_$SystemInformation
46392>>>>>>>        Set Size to 140 267
46393>>>>>>>        Set Locate_Mode to CENTER_ON_PARENT
46394>>>>>>>        Set Border_Style to Border_Thick
46395>>>>>>>        Set Sysmenu_Icon to False
46396>>>>>>>
46396>>>>>>>        // "+1" will make the panel to paint correctly.
46396>>>>>>>        Set piMinSize to (Hi(Size(Self))) (Low(Size(Self)) +1)
46397>>>>>>>
46397>>>>>>>        // 2014-09-14 NGS
46397>>>>>>>        // Added a container object around the cTexteditor
46397>>>>>>>        // object to get a border around the text.
46397>>>>>>>        Object oSysinfoDisplayContainer is a Container3d
46399>>>>>>>            Set Location to 2 4
46400>>>>>>>            Set Size to 110 255
46401>>>>>>>            Set Border_Style to Border_ClientEdge
46402>>>>>>>            Set Color to clWhite
46403>>>>>>>            Set peAnchors to anAll
46404>>>>>>>
46404>>>>>>>            Object oSysinfoDisplay is a SysInfoDisplay
46406>>>>>>>            End_Object
46407>>>>>>>
46407>>>>>>>        End_Object
46408>>>>>>>
46408>>>>>>>        Object oCloseButton is a Button
46410>>>>>>>            Set Label to C_$Close
46411>>>>>>>            Set Location to 120 210
46412>>>>>>>            CompilerWarnings Off
46412>>>>>>>            Set Message Item 0 to msg_Close_Panel
46413>>>>>>>            CompilerWarnings On
46413>>>>>>>            Set Default_State To True
46414>>>>>>>            // In case someone likes to make the AboutDialog's Border_Style to thick,
46414>>>>>>>            // and changes its peAnchors, we might as well prepare this object
46414>>>>>>>            // for that situation.
46414>>>>>>>            Set peAnchors to anBottomRight
46415>>>>>>>        End_Object
46416>>>>>>>
46416>>>>>>>        Object oCopyButton is a cCopyEditorContentButton
46418>>>>>>>            On_Item C_$Copy Send CopyToWindowsClipboard
46419>>>>>>>            Set Size to 14 50
46420>>>>>>>            Set Location to 120 158
46421>>>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46421>>>>>>>            // we might as well prepare the object for it.
46421>>>>>>>            Set peAnchors to anBottomRight
46422>>>>>>>            Set phoEditorHandle to (oSysinfoDisplay(Self))
46423>>>>>>>        End_Object
46424>>>>>>>
46424>>>>>>>        On_Key kCancel Send Close_Panel
46425>>>>>>>    End_Procedure
46426>>>>>>>
46426>>>>>>>    Procedure Page Integer iPageObject
46428>>>>>>>        Handle hMenu
46428>>>>>>>        Integer iPrevState
46428>>>>>>>
46428>>>>>>>        Forward Send Page iPageObject
46430>>>>>>>
46430>>>>>>>        // Ok, this seems to have been fixed in VDF 17.1!
46430>>>>>>>        //
46430>>>>>>>    End_Procedure
46431>>>>>>>
46431>>>>>>>End_Class
46432>>>>>>>
46432>>>>>>>Class cAboutEdit is an cRichEdit
46433>>>>>>>    Procedure Construct_Object
46435>>>>>>>        Forward Send Construct_Object
46437>>>>>>>
46437>>>>>>>        Property String psContentText
46438>>>>>>>
46438>>>>>>>        Set Size to 77 153
46439>>>>>>>        Set Location to 8 60
46440>>>>>>>        Set Read_Only_State to True
46441>>>>>>>        Set Skip_State to True
46442>>>>>>>        // Font size is calculated in "Twips", which are 1/1440 of an inch,
46442>>>>>>>        // or 1/20 of a printer's point.
46442>>>>>>>        Set piRightMargin to (0.1 * 1440)
46443>>>>>>>        Set Border_Style  to Border_None
46444>>>>>>>    End_Procedure
46445>>>>>>>
46445>>>>>>>    // Adds a line of text to the edit object
46445>>>>>>>    Procedure Add_Line String sText
46447>>>>>>>        String sContentText
46447>>>>>>>        Get psContentText to sContentText
46448>>>>>>>        Move (sContentText + String(sText)) to sContentText
46449>>>>>>>        Set psContentText to sContentText
46450>>>>>>>    End_Procedure
46451>>>>>>>
46451>>>>>>>    // Compared to Add_Line above, this adds an extra empty line after the passed value.
46451>>>>>>>    // Note that we use a property psContentText and add to it,
46451>>>>>>>    // because the object isn't paged yet when we add these
46451>>>>>>>    // values and the COM edit object needs to be paged
46451>>>>>>>    // for the text to become visible. See Also: Procedure Page below.
46451>>>>>>>    Procedure Add_LineLn String sText
46453>>>>>>>        String sContentText sCR
46453>>>>>>>
46453>>>>>>>        Move (Character(10) + String(Character(13))) to sCR
46454>>>>>>>        Get psContentText to sContentText
46455>>>>>>>        Move (sContentText + String(sText) + sCR) to sContentText
46456>>>>>>>        Set psContentText to sContentText
46457>>>>>>>    End_Procedure
46458>>>>>>>
46458>>>>>>>    Procedure OnLinkClicked Integer iPositionStart Integer iPositionEnd
46460>>>>>>>        String sLinkText
46460>>>>>>>        Get TextRange iPositionStart iPositionEnd to sLinkText
46461>>>>>>>        Send Show_HomePage sLinkText
46462>>>>>>>    End_Procedure
46463>>>>>>>
46463>>>>>>>    Procedure Page Integer iPageObject
46465>>>>>>>        String sContentText
46465>>>>>>>
46465>>>>>>>        Forward Send Page iPageObject
46467>>>>>>>        Get psContentText to sContentText
46468>>>>>>>        Send AppendText sContentText
46469>>>>>>>        send Beginning_of_Data
46470>>>>>>>    End_Procedure
46471>>>>>>>
46471>>>>>>>End_Class
46472>>>>>>>
46472>>>>>>>Class AboutDialog is a ModalPanel
46473>>>>>>>    Procedure Construct_Object
46475>>>>>>>
46475>>>>>>>        Forward Send Construct_Object
46477>>>>>>>
46477>>>>>>>        Set Label to C_$About
46478>>>>>>>        Set Size to 118 230
46479>>>>>>>        Set Locate_Mode to CENTER_ON_PARENT
46480>>>>>>>        Set Border_Style to Border_Thick
46481>>>>>>>        Set piMinSize to (Hi(Size(Self))) (Low(Size(Self)))
46482>>>>>>>
46482>>>>>>>        Object oSysInfoDialog is a SysInfoDialog
46484>>>>>>>        End_Object
46485>>>>>>>
46485>>>>>>>        Object oBox is a Container3d
46487>>>>>>>            Set Border_Style to Border_Normal
46488>>>>>>>            Set Size to 90 220
46489>>>>>>>            Set Location to 4 5
46490>>>>>>>            Set Color to clWhite
46491>>>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46491>>>>>>>            // we might as well prepare the object for it.
46491>>>>>>>            Set peAnchors to anAll
46492>>>>>>>
46492>>>>>>>            Object oAboutGraphic is a BitmapContainer
46494>>>>>>>                Set Border_Style To Border_None
46495>>>>>>>                Set Bitmap_Style to Bitmap_Center
46496>>>>>>>                Set Color to clWhite
46497>>>>>>>                Set Size to 45 50
46498>>>>>>>                Set Location to 0 3
46499>>>>>>>            End_Object
46500>>>>>>>
46500>>>>>>>            Object oPoweredByDFGraphic is a cBitmapContainerDFLink
46502>>>>>>>                Set Border_Style to Border_None
46503>>>>>>>                Set Bitmap_Style to Bitmap_Center
46504>>>>>>>                Set Color to clWhite
46505>>>>>>>                Set Size to 30 55
46506>>>>>>>                Set Location to 50 3
46507>>>>>>>            End_Object
46508>>>>>>>
46508>>>>>>>            Object oInfoList_Editor is an cAboutEdit
46510>>>>>>>                // In case someone wants to set the AboutDialog's Border_Style to thick,
46510>>>>>>>                // we might as well prepare the object for it.
46510>>>>>>>                Set peAnchors to anAll
46511>>>>>>>            End_Object
46512>>>>>>>
46512>>>>>>>            // These objects are here for backwards compatability only.
46512>>>>>>>            // They are not used.
46512>>>>>>>            Object oProductName is a TextBox
46514>>>>>>>                Set Label To C_$ProductName
46515>>>>>>>                Set Size To 10 45
46516>>>>>>>                Set Location To 8 53
46517>>>>>>>                Set Visible_State to False
46518>>>>>>>                Set Focus_Mode to NonFocusable
46519>>>>>>>            End_Object
46520>>>>>>>
46520>>>>>>>            Object oVersion is a TextBox
46522>>>>>>>                Set Label To C_$Version
46523>>>>>>>                Set Size To 10 25
46524>>>>>>>                Set Location To 21 53
46525>>>>>>>                Set Visible_State to False
46526>>>>>>>                Set Focus_Mode to NonFocusable
46527>>>>>>>            End_Object
46528>>>>>>>
46528>>>>>>>            Object oCopyright is a TextBox
46530>>>>>>>                Set Label To C_$Copyright
46531>>>>>>>                Set Size To 10 31
46532>>>>>>>                Set Location To 34 53
46533>>>>>>>                Set Visible_State to False
46534>>>>>>>                Set Focus_Mode to NonFocusable
46535>>>>>>>            End_Object
46536>>>>>>>
46536>>>>>>>            Object oAuthor is a TextBox
46538>>>>>>>                Set Label To C_$Author
46539>>>>>>>                Set Size To 10 22
46540>>>>>>>                Set Location To 46 53
46541>>>>>>>                Set Visible_State to False
46542>>>>>>>                Set Focus_Mode to NonFocusable
46543>>>>>>>            End_Object
46544>>>>>>>
46544>>>>>>>        End_Object
46545>>>>>>>
46545>>>>>>>        Object oOKButton is a Button
46547>>>>>>>            On_Item C_$Close Send Close_Panel
46548>>>>>>>            Set Location to 98 176
46549>>>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46549>>>>>>>            // we might as well prepare the object for it.
46549>>>>>>>            Set peAnchors to anBottomRight
46550>>>>>>>        End_Object
46551>>>>>>>
46551>>>>>>>        Object oSysInfoButton is a Button
46553>>>>>>>            On_Item C_$SystemInfo Send Show_Sysinfo
46554>>>>>>>            Set Location to 98 123
46555>>>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46555>>>>>>>            // we might as well prepare the object for it.
46555>>>>>>>            Set peAnchors to anBottomRight
46556>>>>>>>        End_Object
46557>>>>>>>
46557>>>>>>>        Object oCopyButton is a cCopyEditorContentButton
46559>>>>>>>            On_Item C_$Copy Send CopyToWindowsClipboard
46560>>>>>>>            Set Size to 14 50
46561>>>>>>>            Set Location to 98 70
46562>>>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46562>>>>>>>            // we might as well prepare the object for it.
46562>>>>>>>            Set peAnchors to anBottomRight
46563>>>>>>>            Set phoEditorHandle to (oInfoList_Editor(Self))
46564>>>>>>>        End_Object
46565>>>>>>>
46565>>>>>>>        On_Key Kcancel Send KeyAction of oOKButton
46566>>>>>>>        Set Logo   to "DacAbout.bmp"  // Square bitmaps of 80x80 work best
46567>>>>>>>        Set LogoDF to "DF32.bmp"
46568>>>>>>>//        Set LogoVDF to "PoweredByOrange.bmp"
46568>>>>>>>    End_Procedure
46569>>>>>>>
46569>>>>>>>    Procedure Page Integer iPageObject
46571>>>>>>>        Handle hMenu
46571>>>>>>>        Integer iPrevState
46571>>>>>>>
46571>>>>>>>        Forward Send Page iPageObject
46573>>>>>>>        // Due to a bug in the ModalPanel class, we need to set the icon here:
46573>>>>>>>        Set Icon to "Default.ico"
46574>>>>>>>
46574>>>>>>>        // Shadow upper left corner menu items: (icon menu items)
46574>>>>>>>        Move (GetSystemMenu(Window_Handle(Self), False)) to hMenu
46575>>>>>>>        Move (EnableMenuItem(hMenu, SC_RESTORE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46576>>>>>>>        // The "Move" menu command may come in handy to have.
46576>>>>>>>        // Move (EnableMenuItem(hMenu, SC_MOVE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46576>>>>>>>        Move (EnableMenuItem(hMenu, SC_SIZE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46577>>>>>>>        Move (EnableMenuItem(hMenu, SC_MINIMIZE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46578>>>>>>>        Move (EnableMenuItem(hMenu, SC_MAXIMIZE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46579>>>>>>>        // The "Close" menu command may be good to have.
46579>>>>>>>        // Move (EnableMenuItem(hMenu, SC_CLOSE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46579>>>>>>>    End_Procedure
46580>>>>>>>
46580>>>>>>>    Procedure Set ProductName String sText
46582>>>>>>>        Set Value of oProductName to sText
46583>>>>>>>    End_Procedure
46584>>>>>>>
46584>>>>>>>    Procedure Set Copyright String sText
46586>>>>>>>        Set Value of oCopyright to sText
46587>>>>>>>    End_Procedure
46588>>>>>>>
46588>>>>>>>    Procedure Set Author String sText
46590>>>>>>>        Set Value of oAuthor to sText
46591>>>>>>>    End_Procedure
46592>>>>>>>
46592>>>>>>>    // This is used by the About object to display the compile date & time:
46592>>>>>>>    // Note: It relies on that each project (program) has been setup to use the "WriteDateTimeHeaderFile64.exe"
46592>>>>>>>    //       program as a pre-compile!
46592>>>>>>>    //       Add it here: "Before Compilation Process:" (See Studio's: Project - Project Properties - Compiler tab-page)
46592>>>>>>>    Include_Resource CompileHeader.h as res_CompileHeader type DF_RESOURCE_TYPE_LINE
46592>>>>>>>
46592>>>>>>>    Procedure Set Version String sVersion
46594>>>>>>>        Handle hoVersionInfo
46594>>>>>>>        Boolean bIncluded
46594>>>>>>>        Integer iMajor iMinor iRelease iBuild iPos
46594>>>>>>>        String sCertInfo sCompileDateAndTime
46594>>>>>>>
46594>>>>>>>        If (sVersion = "") Begin
46596>>>>>>>            // This automatically shows the program version of the program, if available.
46596>>>>>>>            // It will be displayed as the second item in the edit object.
46596>>>>>>>            If (ghoApplication <> 0) Begin
46598>>>>>>>                Get phoVersionInfo of ghoApplication to hoVersionInfo
46599>>>>>>>                If (hoVersionInfo <> 0) Begin
46601>>>>>>>                    Get pbIncluded of hoVersionInfo to bIncluded
46602>>>>>>>                    If (bIncluded) Begin
46604>>>>>>>                        Get piVersionMajor of hoVersionInfo to iMajor
46605>>>>>>>                        Get piVersionMinor of hoVersionInfo to iMinor
46606>>>>>>>                        Get piVersionRelease of hoVersionInfo to iRelease
46607>>>>>>>                        Get piVersionBuild of hoVersionInfo to iBuild
46608>>>>>>>                        Move (SFormat (C_$VERSION + ": %1.%2.%3.%4", iMajor, iMinor, iRelease, iBuild)) to sVersion
46609>>>>>>>                    End
46609>>>>>>>>
46609>>>>>>>                End
46609>>>>>>>>
46609>>>>>>>            End
46609>>>>>>>>
46609>>>>>>>        End
46609>>>>>>>>
46609>>>>>>>
46609>>>>>>>        // Display the compiled date as the next row in the edit object, after the program version.
46609>>>>>>>        Direct_Input "resource: res_CompileHeader"
46610>>>>>>>        Readln sCompileDateAndTime
46611>>>>>>>        Move (Pos('"', sCompileDateAndTime)) to iPos
46612>>>>>>>        If (iPos <> 0) Begin
46614>>>>>>>            Move (Mid(sCompileDateAndTime, Length(sCompileDateAndTime), (iPos + 1))) to sCompileDateAndTime
46615>>>>>>>            Move (Replaces('"', sCompileDateAndTime, '')) to sCompileDateAndTime
46616>>>>>>>        End
46616>>>>>>>>
46616>>>>>>>        Close_Input
46617>>>>>>>
46617>>>>>>>        If (sCompileDateAndTime <> "") Begin
46619>>>>>>>            Send Add_Lineln (sVersion + (Character(13)) + C_$Compile_Date * String(sCompileDateAndTime))
46620>>>>>>>        End
46620>>>>>>>>
46620>>>>>>>
46620>>>>>>>        Get IsProgramDigitallySigned to sCertInfo
46621>>>>>>>        If (sCertInfo <> "-1") Begin
46623>>>>>>>            If (sCertInfo <> "") Begin
46625>>>>>>>                Send Add_LineLn sCertInfo
46626>>>>>>>            End
46626>>>>>>>>
46626>>>>>>>            Else Begin
46627>>>>>>>                Send Add_LineLn "The program has NOT been digitally signed, or there is a problem with the digical certificate."
46628>>>>>>>            End
46628>>>>>>>>
46628>>>>>>>        End
46628>>>>>>>>
46628>>>>>>>    End_Procedure
46629>>>>>>>
46629>>>>>>>    Function IsDate String sDate Returns Boolean
46631>>>>>>>        Boolean bIsDate
46631>>>>>>>        String sGoodCharacters sChar
46631>>>>>>>        Integer iCount iLength
46631>>>>>>>
46631>>>>>>>        Move True to bIsDate
46632>>>>>>>        Move "0123456789-/" to sGoodCharacters
46633>>>>>>>        Move (Length(sDate)) to iLength
46634>>>>>>>        For iCount from 1 to iLength
46640>>>>>>>>
46640>>>>>>>            Move (Left(sDate, 1)) to sChar
46641>>>>>>>            Move (Mid(sDate, 12, 2)) to sDate
46642>>>>>>>            Move (sGoodCharacters contains sChar) to bIsDate
46643>>>>>>>            If (bIsDate = False) Begin
46645>>>>>>>                Move iLength to iCount
46646>>>>>>>            End
46646>>>>>>>>
46646>>>>>>>        Loop
46647>>>>>>>>
46647>>>>>>>        Function_Return bIsDate
46648>>>>>>>    End_Function
46649>>>>>>>
46649>>>>>>>    Function GetCompileDate Returns Date
46651>>>>>>>        Date dCompileDate
46651>>>>>>>        String sAppFilename sProgram sData sCompileDate
46651>>>>>>>        Integer iChannel iPos iDateFormat iCount iSize
46651>>>>>>>        Boolean bIsValid   
46651>>>>>>>        
46651>>>>>>>        Move 0 to dCompileDate
46652>>>>>>>        // Get full path to the current running executable
46652>>>>>>>        Get GetApplicationFileName of ghoApplication to sAppFilename
46653>>>>>>>        Get GetApplicationName     of ghoApplication to sProgram
46654>>>>>>>
46654>>>>>>>        //Read the current file  up to where the data we're interesting in is (this was hand calced and so could vary)
46654>>>>>>>        Get Seq_Open_Input_Channel ("binary:" * sAppFilename) to iChannel
46655>>>>>>>
46655>>>>>>>        Read_Block channel iChannel sData 9000000   // This must be big enough to reach the compile date location
46657>>>>>>>        Move (Pos(sProgram, sData)) to iPos
46658>>>>>>>        If (iPos > 0) Begin
46660>>>>>>>            // The compile date is 10 characters long and starts 3 characters after the program name
46660>>>>>>>            Move (Mid(sData, 10, iPos + Length(sProgram) + 3)) to sCompileDate  // In US format
46661>>>>>>>
46661>>>>>>>            // If the current date format is non US, we need to temporary
46661>>>>>>>            // change the format and then move the string to the date variable.
46661>>>>>>>            Get_Attribute DF_DATE_FORMAT to iDateFormat
46664>>>>>>>            Set_Attribute DF_DATE_FORMAT to DF_DATE_USA  
46667>>>>>>>            Send Ignore_Error of Error_Object_Id 16 
46668>>>>>>>            If (Left(sCompileDate, 1) = "0") Begin
46670>>>>>>>                Move ("1" + String(sCompileDate)) to sCompileDate
46671>>>>>>>            End
46671>>>>>>>>
46671>>>>>>>            Move (Date(sCompileDate))    to dCompileDate
46672>>>>>>>            Send Trap_Error of Error_Object_Id 16
46673>>>>>>>            Set_Attribute DF_DATE_FORMAT to iDateFormat // Reset date format
46676>>>>>>>        End
46676>>>>>>>>
46676>>>>>>>        Else Begin
46677>>>>>>>            Error DFERR_PROGRAM "Compile Date location in .exe not found"
46678>>>>>>>>
46678>>>>>>>        End
46678>>>>>>>>
46678>>>>>>>
46678>>>>>>>        Send Seq_Close_Channel iChannel
46679>>>>>>>
46679>>>>>>>        Function_Return dCompileDate
46680>>>>>>>    End_Function
46681>>>>>>>
46681>>>>>>>    // A variant of the ShellExecute Win API, but it waits until the process that is started
46681>>>>>>>    // (the passed program), has been finished
46681>>>>>>>    // The DOS box does also _not_ flash briefly.
46681>>>>>>>    Procedure RunProgramWait String sProgram String sParameter
46683>>>>>>>        Handle hProcess
46683>>>>>>>        Integer iVoid
46683>>>>>>>        AboutSHELLEXECUTEINFO sInfo
46683>>>>>>>        AboutSHELLEXECUTEINFO sInfo
46683>>>>>>>
46683>>>>>>>        Move (SizeOfType(AboutSHELLEXECUTEINFO)) to sInfo.cbSize
46684>>>>>>>
46684>>>>>>>        Move SEE_MASK_NOCLOSEPROCESS to sInfo.fMask
46685>>>>>>>        Move SW_SHOW                 to sInfo.nShow
46686>>>>>>>
46686>>>>>>>        Move (AddressOf(sProgram))   to sInfo.lpFile
46687>>>>>>>        Move (AddressOf(sParameter)) to sInfo.lpParameters
46688>>>>>>>        // This will "hide" the DOS box from showing (no flasing box):
46688>>>>>>>        Move 0                       to sInfo.nShow
46689>>>>>>>
46689>>>>>>>        Move (AboutShellExecuteEx(AddressOf(sInfo))) to iVoid
46690>>>>>>>        Move sInfo.hProcess to hProcess
46691>>>>>>>        If (hProcess) Begin
46693>>>>>>>            Move (AboutWaitForSingleObject(hProcess, -1)) to iVoid
46694>>>>>>>            Move (AboutCloseHandle(hProcess)) to iVoid
46695>>>>>>>        End
46695>>>>>>>>
46695>>>>>>>    End_Procedure
46696>>>>>>>
46696>>>>>>>    Function AddFolderDelimiter String sPath Returns String
46698>>>>>>>        String sDirSep
46698>>>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
46699>>>>>>>        Move (Trim(sPath)) to sPath
46700>>>>>>>        If (Right(sPath, 1) <> sDirSep) Begin
46702>>>>>>>            Move (sPath + sDirSep) to sPath
46703>>>>>>>        End
46703>>>>>>>>
46703>>>>>>>        Function_Return sPath
46704>>>>>>>    End_Function
46705>>>>>>>
46705>>>>>>>    // Returns an empty string if the current program is not digitally signed,
46705>>>>>>>    // or there is a problem with the certificate.
46705>>>>>>>    // Note: A copy of the Microsoft signtool.exe program must reside in the Programs folder,
46705>>>>>>>    //       else nothing is shown in the About object. (Size 355 KB)
46705>>>>>>>    Function IsProgramDigitallySigned Returns String
46707>>>>>>>        Boolean bExists
46707>>>>>>>        String sPath sProgram sParams sRetval
46707>>>>>>>        Integer iCh
46707>>>>>>>
46707>>>>>>>        Move "" to sRetval
46708>>>>>>>        Get psProgramPath of (phoWorkspace(ghoApplication)) to sPath
46709>>>>>>>        Get AddFolderDelimiter sPath to sPath
46710>>>>>>>        File_Exist (sPath + CS_SignProgram) bExists
46711>>>>>>>        If (bExists = False) Begin
46713>>>>>>>            Function_Return "-1"
46714>>>>>>>        End
46714>>>>>>>>
46714>>>>>>>
46714>>>>>>>        Get GetApplicationFileName of ghoApplication to sProgram
46715>>>>>>>        Move (CS_VerifyCredentials * CS_DefAuthVerPolicy) to sParams
46716>>>>>>>        Move (sParams * '"' + sProgram + '"') to sParams
46717>>>>>>>        Move (sParams * String("| clip"))    to sParams
46718>>>>>>>        Get Seq_New_Channel to iCh
46719>>>>>>>        Direct_Output channel iCh (sPath + CS_TempCertBatchFile)
46721>>>>>>>            Writeln channel iCh ('"' + sPath + CS_SignProgram + '"' * sParams)
46724>>>>>>>        Close_Output channel iCh
46726>>>>>>>        // New ShellExecute based message that waits for the passed process to end.
46726>>>>>>>        Send RunProgramWait (sPath + CS_TempCertBatchFile) ""
46727>>>>>>>        Direct_Input channel iCh "CLIPBOARD:"
46729>>>>>>>            Readln channel iCh sRetval
46731>>>>>>>            Readln channel iCh sRetval
46733>>>>>>>            Readln channel iCh sRetval
46735>>>>>>>            Readln channel iCh sRetval
46737>>>>>>>        Close_Input channel iCh
46739>>>>>>>        Send Seq_Release_Channel iCh
46740>>>>>>>        If (Lowercase(sRetval) contains "authenticode") Begin
46742>>>>>>>            Move "This program has been digitally signed and the certificate is valid." to sRetval
46743>>>>>>>        End
46743>>>>>>>>
46743>>>>>>>        Else Begin
46744>>>>>>>            Move "" to sRetval
46745>>>>>>>        End
46745>>>>>>>>
46745>>>>>>>//        Get DeleteFile (sPath + CS_TempCertBatchFile) to iRetval
46745>>>>>>>        EraseFile (sPath + CS_TempCertBatchFile)
46746>>>>>>>>
46746>>>>>>>        Function_Return sRetval
46747>>>>>>>    End_Function
46748>>>>>>>
46748>>>>>>>    Procedure Add_LineLn String sValue
46750>>>>>>>        Send Add_LineLn of oInfoList_Editor sValue
46751>>>>>>>    End_Procedure
46752>>>>>>>
46752>>>>>>>    Procedure Add_Line String sValue
46754>>>>>>>        Send Add_Line of oInfoList_Editor sValue
46755>>>>>>>    End_Procedure
46756>>>>>>>
46756>>>>>>>    Procedure Set Logo string sLogo
46758>>>>>>>        // Square bitmaps of 80x80 work best
46758>>>>>>>        Set Bitmap of oAboutGraphic to sLogo
46759>>>>>>>    End_Procedure
46760>>>>>>>
46760>>>>>>>    Procedure Set LogoDF String sLogo
46762>>>>>>>        Set Bitmap of oPoweredByDFGraphic to sLogo
46763>>>>>>>    End_Procedure
46764>>>>>>>
46764>>>>>>>    Procedure Show_Sysinfo
46766>>>>>>>        Send Popup_Modal of oSysinfoDialog
46767>>>>>>>    End_Procedure
46768>>>>>>>
46768>>>>>>>    Procedure Show_HomePage String sWebpage
46770>>>>>>>        Handle hWnd
46770>>>>>>>        Get Window_Handle to hWnd
46771>>>>>>>        Runprogram Shell Background (Trim(sWebpage))
46772>>>>>>>    End_Procedure
46773>>>>>>>
46773>>>>>>>End_Class
46774>>>>>
46774>>>>>    Function piOrgErrorHandlerID Returns Integer
46776>>>>>    End_Function
46777>>>>>
46777>>>>>Register_Procedure Set Private.pbProcessingError Boolean bProcessingError
46777>>>>>
46777>>>>>Class cBaseDbUpdateFuncLib is a cObject
46778>>>>>    Import_Class_Protocol cDbUpdateFunctionLibrary_Mixin
Including file: ParseKeyWord.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ParseKeyWord.pkg)
46779>>>>>>
46779>>>>>>Function ParseKeyWord String sConnect String sKeyWord Returns String
46781>>>>>>    Integer iStart iEnd
46781>>>>>>    String sRetval
46781>>>>>>
46781>>>>>>    Move (Trim(sConnect)) to sConnect
46782>>>>>>    Move (Pos(Uppercase(sKeyWord), Uppercase(sConnect)))  to iStart
46783>>>>>>    If (iStart = 0) Begin
46785>>>>>>        Function_Return ""
46786>>>>>>    End
46786>>>>>>>
46786>>>>>>    Move (Left(sConnect, (iStart -1 + Length(sKeyWord)))) to sRetval
46787>>>>>>    Move (Replace(sRetval, sConnect, "")) to sRetval
46788>>>>>>    If (sKeyWord = Uppercase(CS_SQLConnectionIDText)) Begin
46790>>>>>>        Move (Pos(",", sRetval))          to iEnd
46791>>>>>>    End
46791>>>>>>>
46791>>>>>>    Else Begin
46792>>>>>>        Move (Pos(";", sRetval))          to iEnd
46793>>>>>>    End
46793>>>>>>>
46793>>>>>>    If (iEnd = 0 and (sRetval contains ",")) Begin
46795>>>>>>        Move (Pos(",", sRetval))          to iEnd
46796>>>>>>        Decrement iEnd
46797>>>>>>    End
46797>>>>>>>
46797>>>>>>    If (iEnd <> 0) Begin
46799>>>>>>        Move (Left(sRetval, (iEnd -1)))   to sRetval
46800>>>>>>    End
46800>>>>>>>
46800>>>>>>    Move (Replace("=", sRetval, ""))      to sRetval
46801>>>>>>
46801>>>>>>    Function_Return (Trim(sRetval))
46802>>>>>>End_Function
46803>>>>>>
46803>>>>>>
46803>>>>>    
46803>>>>>    Procedure Construct_Object
46805>>>>>        Handle ho
46805>>>>>        Forward Send Construct_Object
46807>>>>>        Move Self to ghoDbUpdateFunctionLibrary
46808>>>>>        
46808>>>>>        Send CreateDbUpdateLibraryProperties
46809>>>>>        Property String private.psCollation "Latin1_General_CS_AS"
46810>>>>>        Property String[] pasSQLDataTables
46811>>>>>        Property tFilelist[] pFileListArray  
46812>>>>>        Property tFilelist[] pErrorTables
46813>>>>>
46813>>>>>        // If no ghoSQLConnectionHandler object has been created prior to this object,
46813>>>>>        // we will create one as it is used for all ConnectionID, ConnectionString
46813>>>>>        // etc settings.
46813>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46815>>>>>            Get Create (RefClass(cSQLConnectionHandler)) to ho
46816>>>>>            Set Name of ho to "oSQLConnectionHandler"
46817>>>>>            Set phoSQLConnectionHandler to ho
46818>>>>>        End
46818>>>>>>
46818>>>>>
46818>>>>>    End_Procedure
46819>>>>>
46819>>>>>    Procedure End_Construct_Object
46821>>>>>        Forward Send End_Construct_Object
46823>>>>>
46823>>>>>    End_Procedure
46824>>>>>
46824>>>>>    // Latin1_General_CI_AS = General Insensitive collation
46824>>>>>    // Latin1_General_CS_AS = General Case Sensitive collation, AS= Accent Sensitive.
46824>>>>>    // For MS-SQL See: https://docs.microsoft.com/en-us/sql/t-sql/statements/windows-collation-name-transact-sql?view=sql-server-2017
46824>>>>>    // Good read about which collation to select:
46824>>>>>    // https://social.msdn.microsoft.com/Forums/sqlserver/en-US/bfdc32d3-3d36-4d63-8d87-6ee972fd8130/on-sqllatin1generalcp1cias-sql-server-2008-default-collation?forum=transactsql
46824>>>>>    Procedure Set psCollation String sCollation
46826>>>>>        Set private.psCollation to sCollation
46827>>>>>        If (ghoDbUpdateHandler > 0) Begin
46829>>>>>            Set psCollation of ghoDbUpdateHandler to sCollation
46830>>>>>        End
46830>>>>>>
46830>>>>>    End_Procedure
46831>>>>>
46831>>>>>    Function psCollation Returns String
46833>>>>>        String sCollation
46833>>>>>        If (ghoDbUpdateHandler > 0) Begin
46835>>>>>            Get psCollation of ghoDbUpdateHandler to sCollation
46836>>>>>        End   
46836>>>>>>
46836>>>>>        Else Begin
46837>>>>>            Get private.psCollation to sCollation
46838>>>>>        End
46838>>>>>>
46838>>>>>        Function_Return sCollation
46839>>>>>    End_Function
46840>>>>>
46840>>>>>    // Array sorting helper functions:
46840>>>>>    Function __UtilRelationArrayCompare tAPIRelation RelationCurrent tAPIRelation RelationNew Returns Integer
46842>>>>>        If (RelationCurrent.hTableFrom  = RelationNew.hTableFrom and ;            RelationCurrent.iColumnFrom = RelationNew.iColumnFrom and ;            RelationCurrent.hTableTo    = RelationNew.hTableTo and ;            RelationCurrent.iColumnTo   = RelationNew.iColumnTo) Begin
46844>>>>>            Function_Return (EQ)
46845>>>>>        End
46845>>>>>>
46845>>>>>
46845>>>>>        Function_Return (GT)
46846>>>>>    End_Function
46847>>>>>
46847>>>>>    Function __SearchRelationCompare tAPIRelationCompare RelationCompareCurrent tAPIRelationCompare RelationCompareNew Returns Integer
46849>>>>>        If (RelationCompareCurrent.hTableFrom  = RelationCompareNew.hTableFrom and ;            RelationCompareCurrent.iColumnFrom = RelationCompareNew.iColumnFrom and ;            RelationCompareCurrent.hTableTo    = RelationCompareNew.hTableTo and ;            RelationCompareCurrent.iColumnTo   = RelationCompareNew.iColumnTo) ;            Function_Return (EQ)
46852>>>>>
46852>>>>>        Function_Return (GT)
46853>>>>>    End_Function
46854>>>>>
46854>>>>>    // Compares the RootName, LogicalName & DisplayName and returns True if they are equal.
46854>>>>>    // Note that it first removes any driver prefixes in the rootname.
46854>>>>>    Function _ApiTableFilelistNamesCompare Boolean bCompareFilelistUppercase tAPITableNameInfo APITableInfo Returns Boolean
46856>>>>>        String sRootNameFrom sRootNameTo sDisplayNameTo sLogicalNameTo
46856>>>>>        Handle hTable
46856>>>>>        Boolean bIsSame
46856>>>>>
46856>>>>>        Move APITableInfo.iTableNumber      to hTable
46857>>>>>        Get _TableNameOnly APITableInfo.sRootName     to sRootNameFrom
46858>>>>>        Get_Attribute DF_FILE_ROOT_NAME     of hTable to sRootNameTo
46861>>>>>        Get _TableNoPrefix sRootNameTo                to sRootNameTo
46862>>>>>        Get_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalNameTo
46865>>>>>        Get_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayNameTo
46868>>>>>        Get _TableNoPrefix sDisplayNameTo             to sDisplayNameTo
46869>>>>>
46869>>>>>        If (bCompareFilelistUppercase = True) Begin
46871>>>>>            Move (Uppercase(sRootNameFrom) = Uppercase(sRootNameTo) and Uppercase(APITableInfo.sLogicalName) = Uppercase(sLogicalNameTo) and ;                  Uppercase(APITableInfo.sDisplayName) = Uppercase(sDisplayNameTo)) to bIsSame
46872>>>>>        End
46872>>>>>>
46872>>>>>        Else Begin
46873>>>>>            Move (sRootNameFrom = sRootNameTo and APITableInfo.sLogicalName = sLogicalNameTo and APITableInfo.sDisplayName = sDisplayNameTo) to bIsSame
46874>>>>>        End
46874>>>>>>
46874>>>>>
46874>>>>>        Function_Return bIsSame
46875>>>>>    End_Function
46876>>>>>
46876>>>>>    Function AutoSetConnectionID String sConnectionID Returns Boolean
46878>>>>>        Integer iRetval
46878>>>>>        Move 1 to iRetval
46879>>>>>        If (ghoSQLConnectionHandler <> 0) Begin
46881>>>>>            Set psConnectionID of ghoSQLConnectionHandler to sConnectionID
46882>>>>>            Get AutoSetConnectionID of ghoSQLConnectionHandler to iRetval
46883>>>>>        End
46883>>>>>>
46883>>>>>        Function_Return (iRetval = 0)
46884>>>>>    End_Function
46885>>>>>
46885>>>>>    Function _AddFolderDelimiter String sPath Returns String
46887>>>>>        String sDirSep
46887>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
46888>>>>>        Move (Trim(sPath)) to sPath
46889>>>>>        If (Right(sPath, 1) <> sDirSep) Begin
46891>>>>>            Move (sPath + sDirSep) to sPath
46892>>>>>        End
46892>>>>>>
46892>>>>>        Function_Return sPath
46893>>>>>    End_Function
46894>>>>>
46894>>>>>    Procedure _SqlColumnInfo Handle hoStmt
46896>>>>>        Integer i iCols iItem
46896>>>>>        tSqlColumnNew[] aQueryColumns
46896>>>>>        tSqlColumnNew[] aQueryColumns
46897>>>>>
46897>>>>>        Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_COLUMNCOUNT to iCols
46898>>>>>        For i from 1 to iCols
46904>>>>>>
46904>>>>>            Move (SizeOfArray(aQueryColumns)) to iItem
46905>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_BASECOLUMNNAME to aQueryColumns[iItem].sBaseColumnName
46906>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_BASETABLENAME  to aQueryColumns[iItem].sBaseTableName
46907>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_LABEL          to aQueryColumns[iItem].sLabel
46908>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_SQLTYPE        to aQueryColumns[iItem].iSqlType
46909>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_DFTYPE         to aQueryColumns[iItem].iDFType
46910>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_SIZE           to aQueryColumns[iItem].iSize
46911>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_PRECISION      to aQueryColumns[iItem].iPrecision
46912>>>>>        Loop
46913>>>>>>
46913>>>>>        Set piColumns to iCols
46914>>>>>        Set paQueryColumns to aQueryColumns
46915>>>>>    End_Procedure
46916>>>>>
46916>>>>>    // *** Property Messages ***
46916>>>>>    //
46916>>>>>    // These "properties" are settings for the cSQLConnectionHandler class, but have been
46916>>>>>    // "duplicated" here so connection properties can be relayed to the ghoSQLConnectionHandler object
46916>>>>>    //
46916>>>>>    Function pSQLConnection Returns tSQLConnection
46918>>>>>        tSQLConnection SQLConnection
46918>>>>>        tSQLConnection SQLConnection
46918>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46920>>>>>            // Note: No point in translating as the programmer will see this immediately after compiling the program...
46920>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46921>>>>>>
46921>>>>>            Function_Return
46922>>>>>        End
46922>>>>>>
46922>>>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
46923>>>>>        Function_Return SQLConnection
46924>>>>>    End_Function
46925>>>>>
46925>>>>>    // * Dummy function for the Studio's Code Explorer *
46925>>>>>    Function OTHER_CLASS_PROPERTIES Returns Boolean
46927>>>>>        Function_Return False
46928>>>>>    End_Function
46929>>>>>
46929>>>>>    Procedure Set psServer String sValue
46931>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46933>>>>>            // Note: No point in translating as the programmer will see this immediately after compiling the program...
46933>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46934>>>>>>
46934>>>>>            Procedure_Return
46935>>>>>        End
46935>>>>>>
46935>>>>>        Set psServer of ghoSQLConnectionHandler to sValue
46936>>>>>    End_Procedure
46937>>>>>
46937>>>>>    Function psServer Returns String
46939>>>>>        String sValue
46939>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46941>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46942>>>>>>
46942>>>>>            Function_Return
46943>>>>>        End
46943>>>>>>
46943>>>>>        Get psServer of ghoSQLConnectionHandler to sValue
46944>>>>>        Function_Return sValue
46945>>>>>    End_Function
46946>>>>>
46946>>>>>    Procedure Set psDatabase String sValue
46948>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46950>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46951>>>>>>
46951>>>>>            Procedure_Return
46952>>>>>        End
46952>>>>>>
46952>>>>>        Set psDatabase of ghoSQLConnectionHandler to sValue
46953>>>>>    End_Procedure
46954>>>>>
46954>>>>>    Function psDatabase Returns String
46956>>>>>        String sValue
46956>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46958>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46959>>>>>>
46959>>>>>            Function_Return
46960>>>>>        End
46960>>>>>>
46960>>>>>        Get psDatabase of ghoSQLConnectionHandler to sValue
46961>>>>>        Function_Return sValue
46962>>>>>    End_Function
46963>>>>>
46963>>>>>    Procedure Set psUserID String sValue
46965>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46967>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46968>>>>>>
46968>>>>>            Procedure_Return
46969>>>>>        End
46969>>>>>>
46969>>>>>        Set psUserID of ghoSQLConnectionHandler to sValue
46970>>>>>    End_Procedure
46971>>>>>
46971>>>>>    Function psUserID Returns String
46973>>>>>        String sValue
46973>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46975>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46976>>>>>>
46976>>>>>            Function_Return
46977>>>>>        End
46977>>>>>>
46977>>>>>        Get psUserID of ghoSQLConnectionHandler to sValue
46978>>>>>        Function_Return sValue
46979>>>>>    End_Function
46980>>>>>
46980>>>>>    Procedure Set psPassword String sValue
46982>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46984>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46985>>>>>>
46985>>>>>            Procedure_Return
46986>>>>>        End
46986>>>>>>
46986>>>>>        Set psPassword of ghoSQLConnectionHandler to sValue
46987>>>>>    End_Procedure
46988>>>>>
46988>>>>>    Function psPassword Returns String
46990>>>>>        String sValue
46990>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46992>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46993>>>>>>
46993>>>>>            Function_Return
46994>>>>>        End
46994>>>>>>
46994>>>>>        Get psPassword of ghoSQLConnectionHandler to sValue
46995>>>>>        Function_Return sValue
46996>>>>>    End_Function
46997>>>>>
46997>>>>>    Procedure Set pbTrusted Boolean bValue
46999>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47001>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47002>>>>>>
47002>>>>>            Procedure_Return
47003>>>>>        End
47003>>>>>>
47003>>>>>        Set pbTrusted of ghoSQLConnectionHandler to bValue
47004>>>>>    End_Procedure
47005>>>>>
47005>>>>>    Function pbTrusted Returns Boolean
47007>>>>>        Boolean bValue
47007>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47009>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47010>>>>>>
47010>>>>>            Function_Return
47011>>>>>        End
47011>>>>>>
47011>>>>>        Get pbTrusted of ghoSQLConnectionHandler to bValue
47012>>>>>        Function_Return bValue
47013>>>>>    End_Function
47014>>>>>
47014>>>>>    Procedure Set pbSilentLogin Boolean bValue
47016>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47018>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47019>>>>>>
47019>>>>>            Procedure_Return
47020>>>>>        End
47020>>>>>>
47020>>>>>        Set pbSilentLogin of ghoSQLConnectionHandler to bValue
47021>>>>>    End_Procedure
47022>>>>>
47022>>>>>    Function pbSilentLogin Returns Boolean
47024>>>>>        Boolean bValue
47024>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47026>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47027>>>>>>
47027>>>>>            Function_Return
47028>>>>>        End
47028>>>>>>
47028>>>>>        Get pbSilentLogin of ghoSQLConnectionHandler to bValue
47029>>>>>        Function_Return bValue
47030>>>>>    End_Function
47031>>>>>
47031>>>>>    Procedure Set psConnectionID String sValue
47033>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47035>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47036>>>>>>
47036>>>>>            Procedure_Return
47037>>>>>        End
47037>>>>>>
47037>>>>>        Set psConnectionID of ghoSQLConnectionHandler to sValue
47038>>>>>    End_Procedure
47039>>>>>
47039>>>>>    Function psConnectionID Returns String
47041>>>>>        String sValue
47041>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47043>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47044>>>>>>
47044>>>>>            Function_Return
47045>>>>>        End
47045>>>>>>
47045>>>>>        Get psConnectionID of ghoSQLConnectionHandler to sValue
47046>>>>>        Function_Return sValue
47047>>>>>    End_Function
47048>>>>>
47048>>>>>    Procedure Set psConnectionString String sValue
47050>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47052>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47053>>>>>>
47053>>>>>            Procedure_Return
47054>>>>>        End
47054>>>>>>
47054>>>>>        Set psConnectionString of ghoSQLConnectionHandler to sValue
47055>>>>>    End_Procedure
47056>>>>>
47056>>>>>    Function psConnectionString Returns String
47058>>>>>        String sValue
47058>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47060>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47061>>>>>>
47061>>>>>            Function_Return
47062>>>>>        End
47062>>>>>>
47062>>>>>        Get psConnectionString of ghoSQLConnectionHandler to sValue
47063>>>>>        Function_Return sValue
47064>>>>>    End_Function
47065>>>>>
47065>>>>>    // The normal connection string looks something like this;
47065>>>>>    // SERVER=.\SQLEXPRESS; DATABASE=OrderEntry; TRUSTED_CONNECTION=Yes; ,0
47065>>>>>    // ...and the full connection string looks like this;
47065>>>>>    // DFConnectionId OrderEntry, SERVER=.\SQLEXPRESS; DATABASE=OrderEntry; TRUSTED_CONNECTION=Yes; ,0
47065>>>>>    Function psFullConnectionString Returns String
47067>>>>>        String sConnectionID sConnectionString
47067>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47069>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47070>>>>>>
47070>>>>>            Function_Return
47071>>>>>        End
47071>>>>>>
47071>>>>>        Get psConnectionID     of ghoSQLConnectionHandler to sConnectionID
47072>>>>>        Move (Trim(sConnectionID)) to sConnectionID
47073>>>>>        Get psConnectionString of ghoSQLConnectionHandler to sConnectionString
47074>>>>>        Function_Return (CS_SQLConnectionIDText * sConnectionID + "," * String(sConnectionString))
47075>>>>>    End_Function
47076>>>>>
47076>>>>>    Function piConnectionOptions Returns Integer
47078>>>>>        Integer iValue
47078>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47080>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47081>>>>>>
47081>>>>>            Function_Return
47082>>>>>        End
47082>>>>>>
47082>>>>>        Get piConnectionOptions of ghoSQLConnectionHandler to iValue
47083>>>>>        Function_Return iValue
47084>>>>>    End_Function
47085>>>>>
47085>>>>>    Procedure Set psSchema String sValue
47087>>>>>        tSQLConnection SQLConnection
47087>>>>>        tSQLConnection SQLConnection
47087>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47089>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47090>>>>>>
47090>>>>>            Procedure_Return
47091>>>>>        End
47091>>>>>>
47091>>>>>        Set psSchema of ghoSQLConnectionHandler to sValue
47092>>>>>    End_Procedure
47093>>>>>
47093>>>>>    Function psSchema Returns String
47095>>>>>        String sRetval
47095>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47097>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47098>>>>>>
47098>>>>>            Function_Return
47099>>>>>        End
47099>>>>>>
47099>>>>>        Get psSchema of ghoSQLConnectionHandler to sRetval
47100>>>>>        Function_Return sRetval
47101>>>>>    End_Function
47102>>>>>
47102>>>>>    Procedure Set psBaseTableSpace String sValue
47104>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47106>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47107>>>>>>
47107>>>>>            Procedure_Return
47108>>>>>        End
47108>>>>>>
47108>>>>>        Set psBaseTableSpace of ghoSQLConnectionHandler to sValue
47109>>>>>    End_Procedure
47110>>>>>
47110>>>>>    Function psBaseTableSpace Returns String
47112>>>>>        String sRetval
47112>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47114>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47115>>>>>>
47115>>>>>            Function_Return
47116>>>>>        End
47116>>>>>>
47116>>>>>        Get psBaseTableSpace of ghoSQLConnectionHandler to sRetval
47117>>>>>        Function_Return sRetval
47118>>>>>    End_Function
47119>>>>>
47119>>>>>    Procedure Set psLongTableSpace String sValue
47121>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47123>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47124>>>>>>
47124>>>>>            Procedure_Return
47125>>>>>        End
47125>>>>>>
47125>>>>>        Set psLongTableSpace of ghoSQLConnectionHandler to sValue
47126>>>>>    End_Procedure
47127>>>>>
47127>>>>>    Function psLongTableSpace Returns String
47129>>>>>        String sRetval
47129>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47131>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47132>>>>>>
47132>>>>>            Function_Return
47133>>>>>        End
47133>>>>>>
47133>>>>>        Get psLongTableSpace of ghoSQLConnectionHandler to sRetval
47134>>>>>        Function_Return sRetval
47135>>>>>    End_Function
47136>>>>>
47136>>>>>    Procedure Set psIndexTableSpace String sValue
47138>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47140>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47141>>>>>>
47141>>>>>            Procedure_Return
47142>>>>>        End
47142>>>>>>
47142>>>>>        Set psIndexTableSpace of ghoSQLConnectionHandler to sValue
47143>>>>>    End_Procedure
47144>>>>>
47144>>>>>    Function psIndexTableSpace Returns String
47146>>>>>        String sRetval
47146>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47148>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47149>>>>>>
47149>>>>>            Function_Return
47150>>>>>        End
47150>>>>>>
47150>>>>>        Get psIndexTableSpace of ghoSQLConnectionHandler to sRetval
47151>>>>>        Function_Return sRetval
47152>>>>>    End_Function
47153>>>>>
47153>>>>>    Procedure Set pbUseConnectionID Boolean bState
47155>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47157>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47158>>>>>>
47158>>>>>            Procedure_Return
47159>>>>>        End
47159>>>>>>
47159>>>>>        Set pbUseConnectionID of ghoSQLConnectionHandler to bState
47160>>>>>    End_Procedure
47161>>>>>
47161>>>>>    Function pbUseConnectionID Returns Boolean
47163>>>>>        Boolean bState
47163>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47165>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47166>>>>>>
47166>>>>>            Function_Return
47167>>>>>        End
47167>>>>>>
47167>>>>>        Get pbUseConnectionID of ghoSQLConnectionHandler to bState
47168>>>>>        Function_Return bState
47169>>>>>    End_Function
47170>>>>>
47170>>>>>    Procedure Set pbToANSI Boolean bState
47172>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47174>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47175>>>>>>
47175>>>>>            Procedure_Return
47176>>>>>        End
47176>>>>>>
47176>>>>>        Set pbToANSI of ghoSQLConnectionHandler to bState
47177>>>>>    End_Procedure
47178>>>>>
47178>>>>>    Function pbToANSI Returns Boolean
47180>>>>>        Boolean bState
47180>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47182>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47183>>>>>>
47183>>>>>            Function_Return
47184>>>>>        End
47184>>>>>>
47184>>>>>        Get pbToANSI of ghoSQLConnectionHandler to bState
47185>>>>>        Function_Return bState
47186>>>>>    End_Function
47187>>>>>
47187>>>>>    Procedure Set pbRecnum Boolean bState
47189>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47191>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47192>>>>>>
47192>>>>>            Procedure_Return
47193>>>>>        End
47193>>>>>>
47193>>>>>        Set pbRecnum of ghoSQLConnectionHandler to bState
47194>>>>>    End_Procedure
47195>>>>>
47195>>>>>    Function pbRecnum Returns Boolean
47197>>>>>        Boolean bState
47197>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47199>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47200>>>>>>
47200>>>>>            Function_Return
47201>>>>>        End
47201>>>>>>
47201>>>>>        Get pbRecnum of ghoSQLConnectionHandler to bState
47202>>>>>        Function_Return bState
47203>>>>>    End_Function
47204>>>>>
47204>>>>>    Procedure Set pbCopyData Boolean bState
47206>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47208>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47209>>>>>>
47209>>>>>            Procedure_Return
47210>>>>>        End
47210>>>>>>
47210>>>>>        Set pbCopyData of ghoSQLConnectionHandler to bState
47211>>>>>    End_Procedure
47212>>>>>
47212>>>>>    Function pbCopyData Returns Boolean
47214>>>>>        Boolean bState
47214>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47216>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47217>>>>>>
47217>>>>>            Function_Return
47218>>>>>        End
47218>>>>>>
47218>>>>>        Get pbCopyData of ghoSQLConnectionHandler to bState
47219>>>>>        Function_Return bState
47220>>>>>    End_Function
47221>>>>>
47221>>>>>    Procedure Set pbApiTableUpdateAuto Boolean bState
47223>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47225>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47226>>>>>>
47226>>>>>            Procedure_Return
47227>>>>>        End
47227>>>>>>
47227>>>>>        Set pbApiTableUpdateAuto of ghoSQLConnectionHandler to bState
47228>>>>>    End_Procedure
47229>>>>>
47229>>>>>    Function pbApiTableUpdateAuto Returns Boolean
47231>>>>>        Boolean bState
47231>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47233>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47234>>>>>>
47234>>>>>            Function_Return
47235>>>>>        End
47235>>>>>>
47235>>>>>        Get pbApiTableUpdateAuto of ghoSQLConnectionHandler to bState
47236>>>>>        Function_Return bState
47237>>>>>    End_Function
47238>>>>>
47238>>>>>    Procedure Set pbCompareDate_DateTime Boolean bState
47240>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47242>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47243>>>>>>
47243>>>>>            Procedure_Return
47244>>>>>        End
47244>>>>>>
47244>>>>>        Set pbCompareDate_DateTime of ghoSQLConnectionHandler to bState
47245>>>>>    End_Procedure
47246>>>>>
47246>>>>>    Function pbCompareDate_DateTime Returns Boolean
47248>>>>>        Boolean bState
47248>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47250>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47251>>>>>>
47251>>>>>            Function_Return
47252>>>>>        End
47252>>>>>>
47252>>>>>        Get pbCompareDate_DateTime of ghoSQLConnectionHandler to bState
47253>>>>>        Function_Return bState
47254>>>>>    End_Function
47255>>>>>
47255>>>>>    Procedure Set pbCompareIndexAscending Boolean bState
47257>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47259>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47260>>>>>>
47260>>>>>            Procedure_Return
47261>>>>>        End
47261>>>>>>
47261>>>>>        Set pbCompareIndexAscending of ghoSQLConnectionHandler to bState
47262>>>>>    End_Procedure
47263>>>>>
47263>>>>>    Function pbCompareIndexAscending Returns Boolean
47265>>>>>        Boolean bState
47265>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47267>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47268>>>>>>
47268>>>>>            Function_Return
47269>>>>>        End
47269>>>>>>
47269>>>>>        Get pbCompareIndexAscending of ghoSQLConnectionHandler to bState
47270>>>>>        Function_Return bState
47271>>>>>    End_Function
47272>>>>>
47272>>>>>    Procedure Set pbCompareIndexUppercase Boolean bState
47274>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47276>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47277>>>>>>
47277>>>>>            Procedure_Return
47278>>>>>        End
47278>>>>>>
47278>>>>>        Set pbCompareIndexUppercase of ghoSQLConnectionHandler to bState
47279>>>>>    End_Procedure
47280>>>>>
47280>>>>>    Function pbCompareIndexUppercase Returns Boolean
47282>>>>>        Boolean bState
47282>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47284>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47285>>>>>>
47285>>>>>            Function_Return
47286>>>>>        End
47286>>>>>>
47286>>>>>        Get pbCompareIndexUppercase of ghoSQLConnectionHandler to bState
47287>>>>>        Function_Return bState
47288>>>>>    End_Function
47289>>>>>
47289>>>>>    Procedure Set psDriverDefaultValueASCII String sValue
47291>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47293>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47294>>>>>>
47294>>>>>            Procedure_Return
47295>>>>>        End
47295>>>>>>
47295>>>>>        Set psDriverDefaultValueASCII of ghoSQLConnectionHandler to sValue
47296>>>>>    End_Procedure
47297>>>>>
47297>>>>>    Function psDriverDefaultValueASCII Returns String
47299>>>>>        String sRetval
47299>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47301>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47302>>>>>>
47302>>>>>            Function_Return
47303>>>>>        End
47303>>>>>>
47303>>>>>        Get psDriverDefaultValueASCII of ghoSQLConnectionHandler to sRetval
47304>>>>>        Function_Return sRetval
47305>>>>>    End_Function
47306>>>>>
47306>>>>>    Procedure Set psDriverDefaultValueBinary String sValue
47308>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47310>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47311>>>>>>
47311>>>>>            Procedure_Return
47312>>>>>        End
47312>>>>>>
47312>>>>>        Set psDriverDefaultValueBinary of ghoSQLConnectionHandler to sValue
47313>>>>>    End_Procedure
47314>>>>>
47314>>>>>    Function psDriverDefaultValueBinary Returns String
47316>>>>>        String sRetval
47316>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47318>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47319>>>>>>
47319>>>>>            Function_Return
47320>>>>>        End
47320>>>>>>
47320>>>>>        Get psDriverDefaultValueBinary of ghoSQLConnectionHandler to sRetval
47321>>>>>        Function_Return sRetval
47322>>>>>    End_Function
47323>>>>>
47323>>>>>    Procedure Set psDriverDefaultValueDate String sValue
47325>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47327>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47328>>>>>>
47328>>>>>            Procedure_Return
47329>>>>>        End
47329>>>>>>
47329>>>>>        Set psDriverDefaultValueDate of ghoSQLConnectionHandler to sValue
47330>>>>>    End_Procedure
47331>>>>>
47331>>>>>    Function psDriverDefaultValueDate Returns String
47333>>>>>        String sRetval
47333>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47335>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47336>>>>>>
47336>>>>>            Function_Return
47337>>>>>        End
47337>>>>>>
47337>>>>>        Get psDriverDefaultValueDate of ghoSQLConnectionHandler to sRetval
47338>>>>>        Function_Return sRetval
47339>>>>>    End_Function
47340>>>>>
47340>>>>>    Procedure Set psDriverDefaultValueDateTime String sValue
47342>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47344>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47345>>>>>>
47345>>>>>            Procedure_Return
47346>>>>>        End
47346>>>>>>
47346>>>>>        Set psDriverDefaultValueDateTime of ghoSQLConnectionHandler to sValue
47347>>>>>    End_Procedure
47348>>>>>
47348>>>>>    Function psDriverDefaultValueDateTime Returns String
47350>>>>>        String sRetval
47350>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47352>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47353>>>>>>
47353>>>>>            Function_Return
47354>>>>>        End
47354>>>>>>
47354>>>>>        Get psDriverDefaultValueDateTime of ghoSQLConnectionHandler to sRetval
47355>>>>>        Function_Return sRetval
47356>>>>>    End_Function
47357>>>>>
47357>>>>>    Procedure Set psDriverDefaultValueNumeric String sValue
47359>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47361>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47362>>>>>>
47362>>>>>            Procedure_Return
47363>>>>>        End
47363>>>>>>
47363>>>>>        Set psDriverDefaultValueNumeric of ghoSQLConnectionHandler to sValue
47364>>>>>    End_Procedure
47365>>>>>
47365>>>>>    Function psDriverDefaultValueNumeric Returns String
47367>>>>>        String sRetval
47367>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47369>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47370>>>>>>
47370>>>>>            Function_Return
47371>>>>>        End
47371>>>>>>
47371>>>>>        Get psDriverDefaultValueNumeric of ghoSQLConnectionHandler to sRetval
47372>>>>>        Function_Return sRetval
47373>>>>>    End_Function
47374>>>>>
47374>>>>>    Procedure Set psDriverDefaultValueText String sValue
47376>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47378>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47379>>>>>>
47379>>>>>            Procedure_Return
47380>>>>>        End
47380>>>>>>
47380>>>>>        Set psDriverDefaultValueText of ghoSQLConnectionHandler to sValue
47381>>>>>    End_Procedure
47382>>>>>
47382>>>>>    Function psDriverDefaultValueText Returns String
47384>>>>>        String sRetval
47384>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47386>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47387>>>>>>
47387>>>>>            Function_Return
47388>>>>>        End
47388>>>>>>
47388>>>>>        Get psDriverDefaultValueText of ghoSQLConnectionHandler to sRetval
47389>>>>>        Function_Return sRetval
47390>>>>>    End_Function
47391>>>>>
47391>>>>>    Procedure Set pbDriverDefaultNullableASCII Boolean bState
47393>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47395>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47396>>>>>>
47396>>>>>            Procedure_Return
47397>>>>>        End
47397>>>>>>
47397>>>>>        Set pbDriverDefaultNullableASCII of ghoSQLConnectionHandler to bState
47398>>>>>    End_Procedure
47399>>>>>
47399>>>>>    Function pbDriverDefaultNullableASCII Returns Boolean
47401>>>>>        Boolean bState
47401>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47403>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47404>>>>>>
47404>>>>>            Function_Return
47405>>>>>        End
47405>>>>>>
47405>>>>>        Get pbDriverDefaultNullableASCII of ghoSQLConnectionHandler to bState
47406>>>>>        Function_Return bState
47407>>>>>    End_Function
47408>>>>>
47408>>>>>    Procedure Set pbDriverDefaultNullableBinary Boolean bState
47410>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47412>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47413>>>>>>
47413>>>>>            Procedure_Return
47414>>>>>        End
47414>>>>>>
47414>>>>>        Set pbDriverDefaultNullableBinary of ghoSQLConnectionHandler to bState
47415>>>>>    End_Procedure
47416>>>>>
47416>>>>>    Function pbDriverDefaultNullableBinary Returns Boolean
47418>>>>>        Boolean bState
47418>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47420>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47421>>>>>>
47421>>>>>            Function_Return
47422>>>>>        End
47422>>>>>>
47422>>>>>        Get pbDriverDefaultNullableBinary of ghoSQLConnectionHandler to bState
47423>>>>>        Function_Return bState
47424>>>>>    End_Function
47425>>>>>
47425>>>>>    Procedure Set pbDriverDefaultNullableDate Boolean bState
47427>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47429>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47430>>>>>>
47430>>>>>            Procedure_Return
47431>>>>>        End
47431>>>>>>
47431>>>>>        Set pbDriverDefaultNullableDate of ghoSQLConnectionHandler to bState
47432>>>>>    End_Procedure
47433>>>>>
47433>>>>>    Function pbDriverDefaultNullableDate Returns Boolean
47435>>>>>        Boolean bState
47435>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47437>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47438>>>>>>
47438>>>>>            Function_Return
47439>>>>>        End
47439>>>>>>
47439>>>>>        Get pbDriverDefaultNullableDate of ghoSQLConnectionHandler to bState
47440>>>>>        Function_Return bState
47441>>>>>    End_Function
47442>>>>>
47442>>>>>    Procedure Set pbDriverDefaultNullableDateTime Boolean bState
47444>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47446>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47447>>>>>>
47447>>>>>            Procedure_Return
47448>>>>>        End
47448>>>>>>
47448>>>>>        Set pbDriverDefaultNullableDateTime of ghoSQLConnectionHandler to bState
47449>>>>>    End_Procedure
47450>>>>>
47450>>>>>    Function pbDriverDefaultNullableDateTime Returns Boolean
47452>>>>>        Boolean bState
47452>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47454>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47455>>>>>>
47455>>>>>            Function_Return
47456>>>>>        End
47456>>>>>>
47456>>>>>        Get pbDriverDefaultNullableDateTime of ghoSQLConnectionHandler to bState
47457>>>>>        Function_Return bState
47458>>>>>    End_Function
47459>>>>>
47459>>>>>    Procedure Set pbDriverDefaultNullableNumeric Boolean bState
47461>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47463>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47464>>>>>>
47464>>>>>            Procedure_Return
47465>>>>>        End
47465>>>>>>
47465>>>>>        Set pbDriverDefaultNullableNumeric of ghoSQLConnectionHandler to bState
47466>>>>>    End_Procedure
47467>>>>>
47467>>>>>    Function pbDriverDefaultNullableNumeric Returns Boolean
47469>>>>>        Boolean bState
47469>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47471>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47472>>>>>>
47472>>>>>            Function_Return
47473>>>>>        End
47473>>>>>>
47473>>>>>        Get pbDriverDefaultNullableNumeric of ghoSQLConnectionHandler to bState
47474>>>>>        Function_Return bState
47475>>>>>    End_Function
47476>>>>>
47476>>>>>    Procedure Set pbDriverDefaultNullableText Boolean bState
47478>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47480>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47481>>>>>>
47481>>>>>            Procedure_Return
47482>>>>>        End
47482>>>>>>
47482>>>>>        Set pbDriverDefaultNullableText of ghoSQLConnectionHandler to bState
47483>>>>>    End_Procedure
47484>>>>>
47484>>>>>    Function pbDriverDefaultNullableText Returns Boolean
47486>>>>>        Boolean bState
47486>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47488>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47489>>>>>>
47489>>>>>            Function_Return
47490>>>>>        End
47490>>>>>>
47490>>>>>        Get pbDriverDefaultNullableText of ghoSQLConnectionHandler to bState
47491>>>>>        Function_Return bState
47492>>>>>    End_Function
47493>>>>>
47493>>>>>    // Note: If the psDriverID + other connection properties are to be changed,
47493>>>>>    //       the psDriverID *must* be the first property that gets changed!
47493>>>>>    //       Otherwise errors might be raised by the driver when e.g. the format
47493>>>>>    //       for a connection string has the wrong format for that driver.
47493>>>>>    Procedure Set psDriverID String sValue
47495>>>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
47496>>>>>        Delegate Set psDriverID to sValue
47498>>>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
47499>>>>>        Set psDriverID of ghoSQLConnectionHandler to sValue
47500>>>>>    End_Procedure
47501>>>>>
47501>>>>>    Function psDriverID Returns String
47503>>>>>        String sDriverID
47503>>>>>
47503>>>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
47504>>>>>        // This should get it from the parent object (when using the cDbUpdateHandler class)
47504>>>>>        Delegate Get psDriverID to sDriverID
47506>>>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
47507>>>>>        Move False to Err
47508>>>>>
47508>>>>>        // ...and in case it didn't use property of this class. Then the library is
47508>>>>>        // probably used as "utilites" from a special made program and
47508>>>>>        // the ghoSQLConnectionHandler must have been setup
47508>>>>>        If (sDriverID = "") Begin
47510>>>>>            Get psDriverID of ghoSQLConnectionHandler to sDriverID
47511>>>>>        End
47511>>>>>>
47511>>>>>        Function_Return sDriverID
47512>>>>>    End_Function
47513>>>>>
47513>>>>>    Procedure Set piDbType Integer iValue
47515>>>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
47516>>>>>        Delegate Set piDbType to iValue
47518>>>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
47519>>>>>        Set piDbType of ghoSQLConnectionHandler to iValue
47520>>>>>    End_Procedure
47521>>>>>
47521>>>>>    Function piDbType Returns Integer
47523>>>>>        Integer iRetval
47523>>>>>        Get piDbType of ghoSQLConnectionHandler to iRetval
47524>>>>>        Function_Return iRetval
47525>>>>>    End_Function
47526>>>>>
47526>>>>>    // Returns the index for the passed sTableName
47526>>>>>    // Returns >= 0 if successful. It is e.g. needed to get the SchemaName for a table.
47526>>>>>    Function _SqlUtilEnumerateTableIndex String sTableName String sDriverID Returns Integer
47528>>>>>        Integer iIndex iSize iCount iItem
47528>>>>>        String[] asTablesArray
47529>>>>>        String sDatabase sSchema sVal sConnectionString
47529>>>>>
47529>>>>>        Move -1 to iIndex
47530>>>>>        Get psConnectionString to sConnectionString
47531>>>>>        Get psDatabase to sDatabase
47532>>>>>        Get psSchema   to sSchema
47533>>>>>        Get _SqlUtilEnumerateTables sDriverID sDatabase sSchema to asTablesArray
47534>>>>>        Move (SearchArray(sTableName, asTablesArray, Desktop, (RefFunc(DFSTRICMP)))) to iItem
47535>>>>>        If (iItem <> -1) Begin
47537>>>>>            Move iItem to iIndex
47538>>>>>        End
47538>>>>>>
47538>>>>>        Function_Return iIndex
47539>>>>>    End_Function
47540>>>>>
47540>>>>>    // Returns all schemas as a string array for the passed driver id.
47540>>>>>    Function SqlUtilEnumerateSchemas String sDriverID Returns String[]
47542>>>>>        String[] sReturnArray
47543>>>>>        Boolean bOK
47543>>>>>
47543>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47544>>>>>        If (bOK = False) Begin
47546>>>>>            Function_Return sReturnArray
47547>>>>>        End
47547>>>>>>
47547>>>>>
47547>>>>>        Case Begin
47547>>>>>            Case (sDriverID = DB2_DRV_ID)
47549>>>>>                Get _SqlEnumerateEsqlDAW "select schemaname from syscat.schemata" 1 to sReturnArray
47550>>>>>                Case Break
47551>>>>>
47551>>>>>            Case Else
47551>>>>>                Error DFERR_PROGRAM "Unsupported driver passed to SqlUtilEnumerateSchemas function."
47552>>>>>>
47552>>>>>                Case Break
47553>>>>>        Case End
47553>>>>>
47553>>>>>        Function_Return sReturnArray
47554>>>>>    End_Function
47555>>>>>
47555>>>>>    // Returns a string array with all tables for the current database.
47555>>>>>    Function _SqlUtilEnumerateTables String sDriverID String sDatabase String sSchema Returns String[]
47557>>>>>        String[] asReturnArray
47558>>>>>        String sConnectionString sSelect
47558>>>>>        Integer iSize iCount iDbType
47558>>>>>        Boolean bOK
47558>>>>>
47558>>>>>        If (sDriverID = DATAFLEX_ID) Begin
47560>>>>>            Function_Return asReturnArray
47561>>>>>        End
47561>>>>>>
47561>>>>>
47561>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47562>>>>>        If (bOK = False) Begin
47564>>>>>            Function_Return asReturnArray
47565>>>>>        End
47565>>>>>>
47565>>>>>        If (sSchema = "") Begin
47567>>>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
47568>>>>>        End
47568>>>>>>
47568>>>>>
47568>>>>>        Get psConnectionString to sConnectionString
47569>>>>>
47569>>>>>        // We need to treat DAW's ODBC driver a bit different, as the output depends on
47569>>>>>        // the dbType.
47569>>>>>        Get piDbType to iDbType
47570>>>>>        If (sDriverID = ODBC_DRV_ID) Begin
47572>>>>>            If (iDbType = EN_DbTypeMSSQL) Begin
47574>>>>>                Move MSSQLDRV_ID to sDriverID
47575>>>>>            End
47575>>>>>>
47575>>>>>            If (iDbType = EN_DbTypeDB2) Begin
47577>>>>>                Move DB2_DRV_ID to sDriverID
47578>>>>>            End
47578>>>>>>
47578>>>>>            If (iDbType = EN_DbTypePostgre) Begin
47580>>>>>                Move ODBC_DRV_ID to sDriverID
47581>>>>>            End
47581>>>>>>
47581>>>>>        End
47581>>>>>>
47581>>>>>
47581>>>>>        Case Begin
47581>>>>>            Case (sDriverID = MSSQLDRV_ID)
47583>>>>>                Get _SqlTableArrayDAW to asReturnArray
47584>>>>>                Case Break
47585>>>>>
47585>>>>>            Case (sDriverID = DB2_DRV_ID)
47588>>>>>                Get _SqlTableArrayDAW to asReturnArray
47589>>>>>                Case Break
47590>>>>>
47590>>>>>            Case (sDriverID = ODBC_DRV_ID)
47593>>>>>                Get _SqlTableArrayDAW to asReturnArray
47594>>>>>                Case Break
47595>>>>>
47595>>>>>            Case Else
47595>>>>>                Error DFERR_PROGRAM "Unsupported driver passed to _SqlUtilEnumerateTables function."
47596>>>>>>
47596>>>>>                Case Break
47597>>>>>        Case End
47597>>>>>
47597>>>>>        Function_Return asReturnArray
47598>>>>>    End_Function
47599>>>>>
47599>>>>>    // Returns all table spaces as a string array for the passed driver id.
47599>>>>>    Function _SqlUtilEnumerateTablespaces String sDriverID Returns String[]
47601>>>>>        String[] sReturnArray
47602>>>>>        Boolean bOK
47602>>>>>
47602>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47603>>>>>        If (bOK = False) Begin
47605>>>>>            Function_Return sReturnArray
47606>>>>>        End
47606>>>>>>
47606>>>>>
47606>>>>>        Case Begin
47606>>>>>            Case (sDriverID = DB2_DRV_ID)
47608>>>>>                Get _SqlEnumerateEsqlDAW "select tablespace_name from dba_tablespaces" 1 to sReturnArray
47609>>>>>                Case Break
47610>>>>>
47610>>>>>            Case Else
47610>>>>>                Error DFERR_PROGRAM "Unsupported driver passed to _SqlUtilEnumerateTablespaces function."
47611>>>>>>
47611>>>>>                Case Break
47612>>>>>        Case End
47612>>>>>
47612>>>>>        Function_Return sReturnArray
47613>>>>>    End_Function
47614>>>>>
47614>>>>>    // Returns a string array with all table columns/fields for the passed table handle and driver id.
47614>>>>>    Function _SqlUtilEnumerateColumns String sDriverID String sTableName Returns String[]
47616>>>>>        String[] sReturnArray
47617>>>>>        String sConnectionString sSelect sSchema
47617>>>>>        Boolean bOK
47617>>>>>        Integer iDbType
47617>>>>>
47617>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47618>>>>>        If (bOK = False) Begin
47620>>>>>            Error DFERR_PROGRAM ("Unsupported driver. A list of table columns could not be retrieved for:" * sDriverID + ".")
47621>>>>>>
47621>>>>>            Function_Return sReturnArray
47622>>>>>        End
47622>>>>>>
47622>>>>>
47622>>>>>        Get psConnectionString to sConnectionString
47623>>>>>        Get psSchema to sSchema
47624>>>>>
47624>>>>>        // We need to treat DAW's ODBC driver a bit different, as the output depends on
47624>>>>>        // the dbType.
47624>>>>>        Get piDbType to iDbType
47625>>>>>
47625>>>>>        Case Begin
47625>>>>>            Case (sDriverID = ODBC_DRV_ID)
47627>>>>>                If (iDbType = EN_DbTypeMySQL) Begin
47629>>>>>                    Move ("SHOW COLUMNS FROM" * sTableName) to sSelect
47630>>>>>                End
47630>>>>>>
47630>>>>>                If (iDbType = EN_DbTypePostgre) Begin
47632>>>>>                    Move ("select column_name, data_type, character_maximum_length from INFORMATION_SCHEMA.COLUMNS where table_name = '" +sTableName + "'") to sSelect
47633>>>>>                End
47633>>>>>>
47633>>>>>                If (iDbType = EN_DbTypeMSSQL) Begin
47635>>>>>                    Move ("select name from sys.columns where [object_id] = object_id('dbo." + sTableName + "')") to sSelect
47636>>>>>                End
47636>>>>>>
47636>>>>>
47636>>>>>                Get _SqlEnumerateEsqlDAW sSelect 1 to sReturnArray
47637>>>>>                Case Break
47638>>>>>
47638>>>>>            Case (sDriverID = MSSQLDRV_ID)
47641>>>>>                Move ("select name from sys.columns where [object_id] = object_id('dbo." + sTableName + "')") to sSelect
47642>>>>>                Get _SqlEnumerateEsqlDAW sSelect 1 to sReturnArray
47643>>>>>                Case Break
47644>>>>>
47644>>>>>            Case (sDriverID = DB2_DRV_ID)
47647>>>>>                Move ("SELECT colname from syscat.columns WHERE tabschema = '" + sSchema + "'" * "AND tabname = '" + sTableName + "'") to sSelect
47648>>>>>                Get _SqlEnumerateEsqlDAW sSelect 1 to sReturnArray
47649>>>>>                Case Break
47650>>>>>
47650>>>>>            Case Else
47650>>>>>                Error DFERR_PROGRAM "Unsupported driver passed to _SqlUtilEnumerateColumns function."
47651>>>>>>
47651>>>>>                Case Break
47652>>>>>        Case End
47652>>>>>
47652>>>>>        Function_Return sReturnArray
47653>>>>>    End_Function
47654>>>>>
47654>>>>>
47654>>>>>    // Returns a string array with all table indexes for the passed table handle and driver id.
47654>>>>>    Function _SqlUtilEnumerateIndexes String sTableName String sDriverID Returns String[]
47656>>>>>        String[] asReturnArray asReturnArray2
47658>>>>>        String sConnectionString sSelect sSchema
47658>>>>>        Boolean bOK
47658>>>>>        Integer iCount iSize
47658>>>>>
47658>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47659>>>>>        If (bOK = False) Begin
47661>>>>>            Error DFERR_PROGRAM ("Unsupported driver. A list of table columns could not be retrieved for:" * sDriverID + ".")
47662>>>>>>
47662>>>>>            Function_Return asReturnArray
47663>>>>>        End
47663>>>>>>
47663>>>>>
47663>>>>>        Get psConnectionString to sConnectionString
47664>>>>>        Get psSchema to sSchema
47665>>>>>
47665>>>>>        Case Begin
47665>>>>>            Case (sDriverID = MSSQLDRV_ID)
47667>>>>>                Move ("select * from sys.indexes where object_id = (select object_id from sys.objects where name = '" + sTableName + "')") to sSelect
47668>>>>>                Get _SqlEnumerateEsqlDAW sSelect 2 to asReturnArray
47669>>>>>                Case Break
47670>>>>>
47670>>>>>            Case (sDriverID = DB2_DRV_ID)
47673>>>>>                Error "Not implemented yet! The select statement has not been finalized."
47674>>>>>>
47674>>>>>//                Move () to sSelect
47674>>>>>//                Get _SqlEnumerateEsqlDAW sSelect 2 to asReturnArray
47674>>>>>                Case Break
47675>>>>>
47675>>>>>            Case Else
47675>>>>>                Error DFERR_PROGRAM "Unsupported driver passed to _SqlUtilEnumerateIndexes function."
47676>>>>>>
47676>>>>>                Case Break
47677>>>>>        Case End
47677>>>>>
47677>>>>>        Move (SizeOfArray(asReturnArray)) to iSize
47678>>>>>        Decrement iSize
47679>>>>>        For iCount from 0 to iSize
47685>>>>>>
47685>>>>>            If (Trim(asReturnArray[iCount]) <> "") Begin
47687>>>>>                Move asReturnArray[iCount] to asReturnArray2[SizeOfArray(asReturnArray2)]
47688>>>>>            End
47688>>>>>>
47688>>>>>        Loop
47689>>>>>>
47689>>>>>
47689>>>>>        Function_Return asReturnArray2
47690>>>>>    End_Function
47691>>>>>
47691>>>>>    // Returns a string array with all table names the passed table handle has relation ships with.
47691>>>>>    // The format of the array is "TableName.FieldName"
47691>>>>>    Function _SqlUtilEnumerateRelations String sTableName String sDriverID Returns tSQLRelation[]
47693>>>>>        String[] sFileNameArray sFieldNameArray
47695>>>>>        tSQLRelation[] sRelationsArray
47695>>>>>        tSQLRelation[] sRelationsArray
47696>>>>>        String sConnectionString sSelect sSchema sFileName sFieldName
47696>>>>>        Boolean bOK
47696>>>>>        Integer iCount iSize iLength
47696>>>>>
47696>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47697>>>>>        If (bOK = False) Begin
47699>>>>>            Error DFERR_PROGRAM ("Unsupported driver. A list of table columns could not be retrieved for:" * sDriverID + ".")
47700>>>>>>
47700>>>>>            Function_Return sRelationsArray
47701>>>>>        End
47701>>>>>>
47701>>>>>
47701>>>>>        Get psConnectionString to sConnectionString
47702>>>>>        Get psSchema to sSchema
47703>>>>>
47703>>>>>        Case Begin
47703>>>>>            Case (sDriverID = MSSQLDRV_ID)
47705>>>>>                Move ("SELECT object_name(parent_object_id), object_name(referenced_object_id), name from sys.foreign_keys WHERE parent_object_id = object_id( '" + sTableName + "')") to sSelect
47706>>>>>                Get _SqlEnumerateEsqlDAW sSelect 2 to sFileNameArray
47707>>>>>                Get _SqlEnumerateEsqlDAW sSelect 3 to sFieldNameArray
47708>>>>>                Case Break
47709>>>>>
47709>>>>>            Case (sDriverID = DB2_DRV_ID)
47712>>>>>                Error "Not implemented yet! The select statement has not been finalized."
47713>>>>>>
47713>>>>>//                Move () to sSelect
47713>>>>>//                Get _SqlEnumerateEsqlDAW sSelect 2 to sReturnArray
47713>>>>>//                Get _SqlEnumerateEsqlDAW sSelect 3 to sFieldNameArray
47713>>>>>                Case Break
47714>>>>>
47714>>>>>            Case Else
47714>>>>>                Error DFERR_PROGRAM "Unsupported driver passed to the _SqlUtilEnumerateRelations function."
47715>>>>>>
47715>>>>>                Case Break
47716>>>>>        Case End
47716>>>>>
47716>>>>>        Move (Length(sTableName)) to iLength
47717>>>>>        Move (iLength + 4)        to iLength // The related to field key has the format "FK_TableName + FieldName"
47718>>>>>        Move (SizeOfArray(sFileNameArray)) to iSize
47719>>>>>        Decrement iSize
47720>>>>>        For iCount from 0 to iSize
47726>>>>>>
47726>>>>>            If (Trim(sFileNameArray[iCount]) <> "") Begin
47728>>>>>                Move sFileNameArray[iCount]         to sFileName
47729>>>>>                Move sFieldNameArray[iCount]        to sFieldName
47730>>>>>                Move (Mid(sFieldName, 99, iLength)) to sFieldName
47731>>>>>                Move sFileName  to sRelationsArray[iCount].sFileName
47732>>>>>                Move sFieldName to sRelationsArray[iCount].sFieldName
47733>>>>>            End
47733>>>>>>
47733>>>>>        Loop
47734>>>>>>
47734>>>>>
47734>>>>>        Function_Return sRelationsArray
47735>>>>>    End_Function
47736>>>>>
47736>>>>>    Function SqlUtilEnumerateLoggedInUsers String sDriverID String sDatabase Returns tSQLLoggedInUser[]
47738>>>>>        tSQLLoggedInUser[] SQLLoggedInUser
47738>>>>>        tSQLLoggedInUser[] SQLLoggedInUser
47739>>>>>        String[] sUsers sPrograms
47741>>>>>        String sSelect
47741>>>>>        Integer iSize iCount
47741>>>>>
47741>>>>>        Case Begin
47741>>>>>            Case (sDriverID = MSSQLDRV_ID)
47743>>>>>                Move ("SELECT RTRIM(SP.nt_username) AS Inlog, RTRIM(SP.program_name) as Programma from master.dbo.sysprocesses SP INNER JOIN master.dbo.sysdatabases SD ON SP.dbid = SD.dbid WHERE (SP.nt_username <> '') and (SP.nt_username <> 'SYSTEM') and (SD.name = '" ;                + sDatabase + "') ORDER by Inlog") to sSelect
47744>>>>>                Get _SqlEnumerateEsqlDAW sSelect 1 to sUsers
47745>>>>>                Get _SqlEnumerateEsqlDAW sSelect 2 to sPrograms
47746>>>>>                Case Break
47747>>>>>            Case Else
47747>>>>>                Error DFERR_PROGRAM ("Not implemented yet for this driver (" + sDriverID + ")")
47748>>>>>>
47748>>>>>        Case End
47748>>>>>
47748>>>>>        Move (SizeOfArray(sUsers)) to iSize
47749>>>>>        Decrement iSize
47750>>>>>        For iCount from 0 to iSize
47756>>>>>>
47756>>>>>            Move sUsers[iCount]    to SQLLoggedInUser[iCount].sUser
47757>>>>>            Move sPrograms[iCount] to SQLLoggedInUser[iCount].sProgram
47758>>>>>        Loop
47759>>>>>>
47759>>>>>
47759>>>>>        Function_Return SQLLoggedInUser
47760>>>>>    End_Function
47761>>>>>
47761>>>>>    // Returns an array with all ".int" files for the passed sDataPath, _except_ for the driver .int files;
47761>>>>>    // "MSSQLDRV.int", "DB2_DRV.int" & "ODBC_DRV.int".
47761>>>>>    Function SqlUtilEnumerateIntFiles String sDataPath Returns String[]
47763>>>>>        String[] sFilesData
47764>>>>>        Boolean bExists
47764>>>>>        Integer iCh
47764>>>>>        String sFileName sExt
47764>>>>>
47764>>>>>        Get vFolderExists sDataPath to bExists
47765>>>>>        If (bExists = True) Begin
47767>>>>>            Move (Utf8ToAnsi(Trim(sDataPath))) to sDataPath
47768>>>>>            Move ("dir:" + sDataPath)      to sDataPath
47769>>>>>            Get Seq_New_Channel to iCh  // get free channel for input
47770>>>>>            Direct_Input channel iCh sDataPath
47772>>>>>                Repeat
47772>>>>>>
47772>>>>>                    Readln channel iCh sFileName
47774>>>>>                    Get ParseFileExtension sFileName to sExt
47775>>>>>                    If (Uppercase(sExt) = "INT") Begin
47777>>>>>                        If (not(Uppercase(sFileName) contains "MSSQLDRV" and Uppercase(sFileName) contains "DB2_DRV" and Uppercase(sFileName) contains "ODBC_DRV")) Begin
47779>>>>>                            Move sFileName to sFilesData[SizeOfArray(sFilesData)]
47780>>>>>                        End
47780>>>>>>
47780>>>>>                    End
47780>>>>>>
47780>>>>>                Until (SeqEof = True)
47782>>>>>            Close_Input channel iCh
47784>>>>>            Send Seq_Release_Channel iCh
47785>>>>>        End
47785>>>>>>
47785>>>>>        Function_Return sFilesData
47786>>>>>    End_Function
47787>>>>>
47787>>>>>    // Only done for MSSQLDRV_ID so far...
47787>>>>>    Function _SqlEnumerateDatabaseCollations String sDriverID Returns String[]
47789>>>>>        String sSQL sConnectionID sConnectionString sSelect sName sPre
47789>>>>>        String sDescription sFrom sSys sValue sPrevious
47789>>>>>        Handle hStmt hoSQLManager hoSQLConnect
47789>>>>>        Integer iFetchResult iRows iColumn iPos
47789>>>>>        tSQLConnection SQLConnection
47789>>>>>        tSQLConnection SQLConnection
47789>>>>>        String[] asCollations
47790>>>>>        
47790>>>>>        If (sDriverID = "") Begin
47792>>>>>            Error DFERR_PROGRAM "The database driver ID was not passed as a parameter to the 'SqlDatabaseCollationChange' function"
47793>>>>>>
47793>>>>>            Function_Return asCollations
47794>>>>>        End
47794>>>>>>
47794>>>>>
47794>>>>>        // Only done for MSSQLDRV_ID so far...
47794>>>>>        If (sDriverID <> MSSQLDRV_ID) Begin
47796>>>>>            Function_Return asCollations
47797>>>>>        End                 
47797>>>>>>
47797>>>>>
47797>>>>>        Get phoSQLManager to hoSQLManager
47798>>>>>        Get psConnectionID     to sConnectionID
47799>>>>>        Get psConnectionString to sConnectionString
47800>>>>>        Move 0 to LastErr
47801>>>>>
47801>>>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
47802>>>>>        Get SqlConnect of hoSQLManager sDriverID sConnectionString to hoSQLConnect
47803>>>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
47804>>>>>        If (LastErr = CLIERR_LOGIN_UNSUCCESSFUL) Begin
47806>>>>>            Error DFERR_PROGRAM ("Login failed to the database server. The following connect string was used:\n" + sConnectionString)
47807>>>>>>
47807>>>>>            Function_Return asCollations
47808>>>>>        End
47808>>>>>>
47808>>>>>
47808>>>>>        Get SqlOpen of hoSQLConnect to hStmt
47809>>>>>
47809>>>>>        If (hStmt = 0) Begin
47811>>>>>            Send SqlDisconnect of hoSQLManager
47812>>>>>            Error DFERR_PROGRAM CS_DUF_ConnectError
47813>>>>>>
47813>>>>>            Function_Return asCollations
47814>>>>>        End
47814>>>>>>
47814>>>>>
47814>>>>>        Get _SqlFindKeyWord CI_SQLSelect      to sSelect
47815>>>>>        Get _SqlFindKeyWord CI_SQLName        to sName
47816>>>>>        Get _SqlFindKeyWord CI_SQLDescription to sDescription
47817>>>>>        Get _SqlFindKeyWord CI_SQLFrom        to sFrom
47818>>>>>        Get _SqlFindKeyWord CI_SQLSys         to sSys
47819>>>>>
47819>>>>>        // MS-SQL Syntax:  
47819>>>>>        // SELECT name, description
47819>>>>>        //   from sys.fn_helpcollations();
47819>>>>>        Move (sSelect  * String(sName) * String(",") * String(sDescription) * String(sFrom) * String(sSys) * String(".fn_helpcollations();")) to sSQL
47820>>>>>
47820>>>>>        Move 1 to iColumn
47821>>>>>        Send SqlExecDirect of hStmt sSQL
47822>>>>>        Get SqlStmtAttribute of hStmt SqlSTMTATTRIB_ROWCOUNT to iRows
47823>>>>>        Repeat
47823>>>>>>
47823>>>>>            Get SQLFetch of hStmt to iFetchResult
47824>>>>>            If (iFetchResult <> 0) Begin
47826>>>>>                Get SQLColumnValue of hStmt iColumn to sValue 
47827>>>>>                If (sValue <> sPrevious) Begin         
47829>>>>>                    // We need to skip all collations starting with "SQL" because they
47829>>>>>                    // are obsolete and for pre-SQL Server 2000.
47829>>>>>                    Move (Pos("SQL", Uppercase(sValue))) to iPos
47830>>>>>                    If (iPos <> 1) Begin
47832>>>>>                        Move (Trim(sValue)) to asCollations[SizeOfArray(asCollations)
47833>>>>>                    End
47833>>>>>>
47833>>>>>                End
47833>>>>>>
47833>>>>>                Move sValue to sPrevious
47834>>>>>            End
47834>>>>>>
47834>>>>>        Until (iFetchResult = 0)
47836>>>>>        Send SQLClose of hStmt
47837>>>>>        Send SQLDisconnect of hoSQLConnect
47838>>>>>
47838>>>>>        Function_Return asCollations
47839>>>>>    End_Function
47840>>>>>
47840>>>>>    // To enumerate SQL database resources with ESQL and return the result as a string array,
47840>>>>>    // for DAW drivers.
47840>>>>>    // Returns: A string array.
47840>>>>>    Function _SqlEnumerateEsqlDAW String sStmt Integer iColumn Returns String[]
47842>>>>>        String[] sReturnArray
47843>>>>>        String sValue sPrevious
47843>>>>>        Handle hoSQLHandler hoSQLConnect hstmt
47843>>>>>        Integer iFetchResult iRows
47843>>>>>        tSQLConnection SQLConnection
47843>>>>>        tSQLConnection SQLConnection
47843>>>>>
47843>>>>>        Get phoSQLManager to hoSQLHandler
47844>>>>>
47844>>>>>        If (hoSQLHandler <> 0) Begin
47846>>>>>            Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
47847>>>>>            Get SQLConnect of hoSQLHandler SQLConnection.sDriverID SQLConnection.sConnectionString to hoSQLConnect
47848>>>>>
47848>>>>>            If (hoSQLConnect <> 0) Begin
47850>>>>>                Get SQLOpen of hoSQLConnect to hstmt
47851>>>>>                If (hstmt <> 0) Begin
47853>>>>>                    Send SqlExecDirect of hstmt sStmt
47854>>>>>                    Get SqlStmtAttribute of hstmt SqlSTMTATTRIB_ROWCOUNT to iRows
47855>>>>>                    Repeat
47855>>>>>>
47855>>>>>                        Get SQLFetch of hstmt to iFetchResult
47856>>>>>                        If (iFetchResult <> 0) Begin
47858>>>>>                            Get SQLColumnValue of hstmt iColumn to sValue
47859>>>>>                            If (sValue <> sPrevious) Begin
47861>>>>>                                Move (Trim(sValue)) to sReturnArray[SizeOfArray(sReturnArray)
47862>>>>>                            End
47862>>>>>>
47862>>>>>                            Move sValue to sPrevious
47863>>>>>                        End
47863>>>>>>
47863>>>>>                    Until (iFetchResult = 0)
47865>>>>>                    Send SQLClose of hstmt
47866>>>>>                End
47866>>>>>>
47866>>>>>                Send SQLDisconnect of hoSQLConnect
47867>>>>>            End
47867>>>>>>
47867>>>>>        End
47867>>>>>>
47867>>>>>
47867>>>>>        Function_Return sReturnArray
47868>>>>>    End_Function
47869>>>>>
47869>>>>>    Function _SqlDatabasesArrayDB2 Returns String[]
47871>>>>>        String[] sReturnArray
47872>>>>>        String sDataSource
47872>>>>>        Handle hoSQLHandler
47872>>>>>        Integer iItem
47872>>>>>
47872>>>>>        Get phoDB2SQLHandler to hoSQLHandler
47873>>>>>        Send SeedDataSources of hoSQLHandler
47874>>>>>
47874>>>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
47875>>>>>
47875>>>>>        Repeat
47875>>>>>>
47875>>>>>            Get DataSources of hoSQLHandler to sDataSource
47876>>>>>            Move (Replaces(",", sDataSource, "")) to sDataSource
47877>>>>>            Move (Trim(sDataSource)) to sReturnArray[iItem]
47878>>>>>            Increment iItem
47879>>>>>        Until (sDataSource = "")
47881>>>>>
47881>>>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
47882>>>>>
47882>>>>>        Function_Return sReturnArray
47883>>>>>    End_Function
47884>>>>>
47884>>>>>    Function _SqlDatabaseSourcesArrayODBC Returns String[]
47886>>>>>        String[] sReturnArray
47887>>>>>        String sDataSource
47887>>>>>        Handle hoSQLHandler
47887>>>>>        Integer iItem
47887>>>>>
47887>>>>>        Get phoODBCSQLHandler to hoSQLHandler
47888>>>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
47889>>>>>
47889>>>>>        Send SeedDataSources of hoSQLHandler
47890>>>>>
47890>>>>>        Repeat
47890>>>>>>
47890>>>>>            Get DataSources of hoSQLHandler to sDataSource
47891>>>>>            If (Trim(sDataSource) <> "" and not(sDataSource contains "*.")) Begin
47893>>>>>                Move (Trim(sDataSource)) to sReturnArray[iItem]
47894>>>>>                Increment iItem
47895>>>>>            End
47895>>>>>>
47895>>>>>        Until (sDataSource = "")
47897>>>>>
47897>>>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
47898>>>>>
47898>>>>>        Function_Return sReturnArray
47899>>>>>    End_Function
47900>>>>>
47900>>>>>    Function _SqlDatabasesArrayODBC Returns tSQLIntTableInfo[]
47902>>>>>        String[] sDataSources
47903>>>>>        tSQLConnection SQLConnection
47903>>>>>        tSQLConnection SQLConnection
47903>>>>>        tSQLIntTableInfo[] sReturnArray
47903>>>>>        tSQLIntTableInfo[] sReturnArray
47904>>>>>        Integer iDataSources iCount iItem
47904>>>>>        String sConnection sServer sDatabase sKey sSubKey
47904>>>>>        Handle hoIniFile hoRegistry hoODBCDataSources
47904>>>>>        Boolean bExists bKeyOpened
47904>>>>>
47904>>>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
47905>>>>>        Move SQLConnection.sConnectionString to sConnection
47906>>>>>        Move SQLConnection.sServer           to sServer
47907>>>>>
47907>>>>>        // FileDSN - read DATABASE name from DSN ini-file
47907>>>>>        If (Uppercase(sServer) contains ("." + String(CS_SQLIniDSNKeyword))) Begin
47909>>>>>            Get Create (RefClass(cIniFile)) to hoIniFile
47910>>>>>            Set psFileName of hoIniFile to sServer
47911>>>>>            Get ReadString of hoIniFile CS_SQLODBCIniSectionName CS_SQLIniDatabaseKeyword "" to sDatabase
47912>>>>>            Move sDatabase to sReturnArray[0].sDatabaseName
47913>>>>>            Send Destroy of hoIniFile
47914>>>>>        End
47914>>>>>>
47914>>>>>
47914>>>>>        // DSN - read DATABASE name from the registry
47914>>>>>        Else Begin
47915>>>>>            Get Create (RefClass(cRegistry)) to hoRegistry
47916>>>>>
47916>>>>>            // We start with checking the "System DNS" area in the registry as it is the
47916>>>>>            // most probably place the info is kept that we're after.
47916>>>>>            Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
47917>>>>>            Set pfAccessRights of hoRegistry to Key_Read
47918>>>>>            Get KeyExists of hoRegistry "SOFTWARE\Wow6432Node" to bExists
47919>>>>>            If (bExists = True) Begin
47921>>>>>                Move "SOFTWARE\Wow6432Node\ODBC\ODBC.INI" to sKey
47922>>>>>            End
47922>>>>>>
47922>>>>>            Else Begin
47923>>>>>                Move "SOFTWARE\ODBC\ODBC.INI" to sKey
47924>>>>>            End
47924>>>>>>
47924>>>>>
47924>>>>>            Get KeyExists of hoRegistry sKey to bExists
47925>>>>>            If (bExists) Begin
47927>>>>>                Get OpenKey of hoRegistry sKey to bKeyOpened
47928>>>>>                If (bKeyOpened) Begin
47930>>>>>                    Get Create (RefClass(Array)) to hoODBCDataSources
47931>>>>>                    Get GetSubkeys of hoRegistry hoODBCDataSources to iDataSources
47932>>>>>                    If (iDataSources > 0) Begin
47934>>>>>                        Move (ResizeArray(sDataSources, iDataSources)) to sDataSources
47935>>>>>                        Decrement iDataSources
47936>>>>>                        for iCount from 0 to iDataSources
47942>>>>>>
47942>>>>>                            Get Value of hoODBCDataSources iCount to sDataSources[iCount]
47943>>>>>                        Loop
47944>>>>>>
47944>>>>>                        Move 0 to iItem
47945>>>>>                        for iCount from 0 to iDataSources
47951>>>>>>
47951>>>>>                            Move sDataSources[iCount] to sSubKey
47952>>>>>                            Get OpenKey of hoRegistry (sKey + "\" + String(sSubKey)) to bKeyOpened
47953>>>>>                            If (bKeyOpened = True) Begin
47955>>>>>                                Get ValueExists of hoRegistry CS_SQLIniDatabaseKeyword to bExists
47956>>>>>                                If (bExists = True) Begin
47958>>>>>                                    Move sSubKey to sReturnArray[iItem].sServerName
47959>>>>>                                    Get ReadString of hoRegistry CS_SQLIniDatabaseKeyword to sReturnArray[iItem].sDatabaseName
47960>>>>>                                    Increment iItem
47961>>>>>                                End
47961>>>>>>
47961>>>>>                            End
47961>>>>>>
47961>>>>>                        Loop
47962>>>>>>
47962>>>>>                    End
47962>>>>>>
47962>>>>>                    Send CloseKey of hoRegistry
47963>>>>>                    Send Destroy of hoODBCDataSources
47964>>>>>                End
47964>>>>>>
47964>>>>>            End
47964>>>>>>
47964>>>>>
47964>>>>>            // We then check the "User DNS" area in the registry.
47964>>>>>            Set phRootKey of hoRegistry to HKEY_CURRENT_USER
47965>>>>>            Set pfAccessRights of hoRegistry to Key_Read
47966>>>>>            Move "SOFTWARE\ODBC\ODBC.INI" to sKey
47967>>>>>            Get KeyExists of hoRegistry sKey to bExists
47968>>>>>
47968>>>>>            If (bExists) Begin
47970>>>>>                Get OpenKey of hoRegistry sKey to bKeyOpened
47971>>>>>                If (bKeyOpened) Begin
47973>>>>>                    Get Create (RefClass(Array)) to hoODBCDataSources
47974>>>>>                    Get GetSubkeys of hoRegistry hoODBCDataSources to iDataSources
47975>>>>>                    If (iDataSources > 0) Begin
47977>>>>>                        Move (ResizeArray(sDataSources, iDataSources)) to sDataSources
47978>>>>>                        Decrement iDataSources
47979>>>>>                        for iCount from 0 to iDataSources
47985>>>>>>
47985>>>>>                            Get Value of hoODBCDataSources iCount to sDataSources[iCount]
47986>>>>>                        Loop
47987>>>>>>
47987>>>>>                        for iCount from 0 to iDataSources
47993>>>>>>
47993>>>>>                            Move sDataSources[iCount] to sSubKey
47994>>>>>                            Get OpenKey of hoRegistry (sKey + "\" + String(sSubKey)) to bKeyOpened
47995>>>>>                            If (bKeyOpened = True) Begin
47997>>>>>                                Get ValueExists of hoRegistry CS_SQLIniDatabaseKeyword to bExists
47998>>>>>                                If (bExists = True) Begin
48000>>>>>                                    Move sSubKey to sReturnArray[iItem].sServerName
48001>>>>>                                    Get ReadString of hoRegistry CS_SQLIniDatabaseKeyword to sReturnArray[iItem].sDatabaseName
48002>>>>>                                    Increment iItem
48003>>>>>                                End
48003>>>>>>
48003>>>>>                            End
48003>>>>>>
48003>>>>>                        Loop
48004>>>>>>
48004>>>>>                    End
48004>>>>>>
48004>>>>>                    Send CloseKey of hoRegistry
48005>>>>>                    Send Destroy of hoODBCDataSources
48006>>>>>                End
48006>>>>>>
48006>>>>>            End
48006>>>>>>
48006>>>>>
48006>>>>>            Send Destroy of hoRegistry
48007>>>>>        End
48007>>>>>>
48007>>>>>
48007>>>>>        Function_Return sReturnArray
48008>>>>>    End_Function
48009>>>>>
48009>>>>>    // We might have a split Sql script where the info about which database to use is
48009>>>>>    // put on top of the Sql script, we then need to save it to be able to retrieve it later and
48009>>>>>    // insert it for scriplets to come after the first one.
48009>>>>>    Function _SqlFormatStatement String sStmt Returns String
48011>>>>>        String sUseDatabase sTmp sUseKeyWord sCreateViewKeyWord sDBOKeyWord sNoCountKeyWord sDriverID
48011>>>>>        Integer iStart iEnd iDbType
48011>>>>>        Boolean bOK
48011>>>>>
48011>>>>>        Get piDbType to iDbType
48012>>>>>        Get psDriverID to sDriverID
48013>>>>>        Get _SqlFindKeyWord CI_SQLUse          to sUseKeyWord
48014>>>>>        Get _SqlFindKeyWord CI_SQLSetNoCountOn to sNoCountKeyWord
48015>>>>>        Get _SqlFindKeyWord CI_SQLCreateView   to sCreateViewKeyWord
48016>>>>>        Get _SqlFindKeyWord CI_SQLDBO          to sDBOKeyWord
48017>>>>>        Move (Replaces(" ", sStmt, "")) to sTmp
48018>>>>>        If (Uppercase(sTmp) contains (sUseKeyWord +"[")) Begin
48020>>>>>            Move (Pos("[", (Uppercase(sTmp)))) to iStart
48021>>>>>            Move (Pos("]", sTmp)) to iEnd
48022>>>>>            Move (Mid(sTmp, (iEnd -iStart +1), iStart)) to sUseDatabase
48023>>>>>            Move (sUseKeyWord * sUseDatabase + " ") to sUseDatabase
48024>>>>>            Set Private.psUseDatabase to sUseDatabase
48025>>>>>        End
48025>>>>>>
48025>>>>>        Else Begin
48026>>>>>            Move (Uppercase(sStmt)) to sTmp
48027>>>>>
48027>>>>>            // A "Create View" statement _must_ be the very first words in a Sql statement.
48027>>>>>            If (not(sTmp contains sCreateViewKeyWord)) Begin
48029>>>>>                Get Private.psUseDatabase to sUseDatabase
48030>>>>>                Move (Insert(sUseDatabase, sStmt, 1)) to sStmt
48031>>>>>            End
48031>>>>>>
48031>>>>>
48031>>>>>            // This is a bit special to place here but was done so because it was easier that way.
48031>>>>>            // We will get an error when trying to create a view if it already exists.
48031>>>>>            // So to avoid such errors; we first remove it & then recreate it.
48031>>>>>            Else If (sTmp contains sCreateViewKeyWord) Begin
48034>>>>>                // Make sure we only have one space between statements/words.
48034>>>>>                Move (Replaces("  ", sTmp, " ")) to sTmp
48035>>>>>                Move (Replace(sCreateViewKeyWord, sTmp, "")) to sTmp
48036>>>>>                Move (Trim(sTmp)) to sTmp
48037>>>>>                Move (Pos(" ", sTmp)) to iEnd
48038>>>>>                Move (Left(sTmp, iEnd)) to sTmp
48039>>>>>                If ((not(sTmp contains ("[" + sDBOKeyWord + "]."))) and (not(sTmp contains (sDBOKeyWord + ".")))) Begin
48041>>>>>                    Move (sDBOKeyWord + "." + Trim(sTmp)) to sTmp
48042>>>>>                End
48042>>>>>>
48042>>>>>                Move (Trim(sTmp)) to sTmp
48043>>>>>                // Remove data view as it already exists!
48043>>>>>                Get _SqlViewRemove sDriverID sTmp to bOK
48044>>>>>            End
48044>>>>>>
48044>>>>>        End
48044>>>>>>
48044>>>>>
48044>>>>>        Function_Return sStmt
48045>>>>>    End_Function
48046>>>>>
48046>>>>>    // First deletes the data cache file and then drops the passed Sql data view.
48046>>>>>    Function _SqlViewRemove String sDataView Returns Boolean
48048>>>>>        String sDriverID sSQLString sDropViewKeyWord
48048>>>>>        Integer iRetval
48048>>>>>        Boolean bOK
48048>>>>>
48048>>>>>        Get psDriverID to sDriverID
48049>>>>>        Get _UtilDeleteCacheFile sDataView to iRetval
48050>>>>>
48050>>>>>        Get _SqlFindKeyWord CI_SQLDropView to sDropViewKeyWord
48051>>>>>        Move (sDropViewKeyWord * String(sDataView)) to sSQLString
48052>>>>>        Set psSQLStatementString to sSQLString
48053>>>>>
48053>>>>>        // As we don't check if the view exist or not, it might happen
48053>>>>>        // that it doesn't and that would through an error, so guard for that eventuality (just ignore it).
48053>>>>>        Move False to Err
48054>>>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
48055>>>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
48056>>>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
48057>>>>>        Move 0 to LastErr
48058>>>>>
48058>>>>>        // We also need to remove the cache-file since the table has been changed
48058>>>>>        Get _UtilDeleteCacheFile sDataView to bOK
48059>>>>>
48059>>>>>        Function_Return (Err = False)
48060>>>>>    End_Function
48061>>>>>
48061>>>>>    // Returns the proper Sql language key word(s) for the passed SQL key-word constant
48061>>>>>    Function _SqlFindKeyWord Integer iSQLKeywordConstant Returns String
48063>>>>>        String sRetval
48063>>>>>        Integer iDbType iIndex
48063>>>>>        tSQLKeyWords[] SQLKeywordArray
48063>>>>>        tSQLKeyWords[] SQLKeywordArray
48064>>>>>        tSQLKeyWords   SQLKeyWords
48064>>>>>        tSQLKeyWords   SQLKeyWords
48064>>>>>
48064>>>>>        // Sql back-end type. E.g. MS-SQL, MySQL, Oracle, DB2...
48064>>>>>        Move "" to sRetval
48065>>>>>        Get piDbType to iDbType
48066>>>>>        Move iDbType             to SQLKeyWords.iSQLDbType
48067>>>>>        Move iSQLKeywordConstant to SQLKeyWords.iSQLWord
48068>>>>>
48068>>>>>        Get paSQLKeywordArray to SQLKeywordArray
48069>>>>>        Move (SearchArray(SQLKeyWords, SQLKeywordArray, Self, RefFunc(CompareFindSQLKeyWords))) to iIndex
48070>>>>>        If (iIndex >= 0) Begin
48072>>>>>            Move SQLKeywordArray[iIndex].sSQLPhrase to sRetval
48073>>>>>        End
48073>>>>>>
48073>>>>>
48073>>>>>        Function_Return sRetval
48074>>>>>    End_Function
48075>>>>>
48075>>>>>    // Function will "clean/sanitize" the script by removing all comments and blank lines.
48075>>>>>    Function _SqlUtilSanitizeScript tSQLScriptArray SqlScriptArray Returns tSQLScriptArray[]
48077>>>>>        String[] sSQLScriptArray
48078>>>>>        String sText sLine sTmp sCommentStart sCommentEnd sDashComment
48078>>>>>        Integer iSize iCount
48078>>>>>        Boolean bCommentStart bCommentEnd bDashComment
48078>>>>>
48078>>>>>        Move False to bCommentStart
48079>>>>>        Move False to bCommentEnd
48080>>>>>        Move False to bDashComment
48081>>>>>        Move "/*"  to sCommentStart   // These are the standard comment start & stop tokens...
48082>>>>>        Move "*/"  to sCommentEnd
48083>>>>>        Move "--"  to sDashComment    // ...but a comment can also start with two dashes "--".
48084>>>>>
48084>>>>>        Move (SizeOfArray(SqlScriptArray.sSQLScriptArray)) to iSize
48085>>>>>        Decrement iSize
48086>>>>>        Move "" to sText
48087>>>>>
48087>>>>>        for iCount from 0 to iSize
48093>>>>>>
48093>>>>>            Move SqlScriptArray.sSQLScriptArray[iCount] to sLine
48094>>>>>            Move (Trim(sLine)) to sTmp
48095>>>>>            If (sTmp <> "") Begin
48097>>>>>                Move (Left(sTmp, 2) = sDashComment) to bDashComment
48098>>>>>                If (bCommentStart = False) Begin
48100>>>>>                    Move (Left(sTmp, 2) = sCommentStart) to bCommentStart
48101>>>>>                    If (bCommentStart = False) Begin
48103>>>>>                    End
48103>>>>>>
48103>>>>>                End
48103>>>>>>
48103>>>>>                Move (sTmp contains sCommentEnd) to bCommentEnd
48104>>>>>                If (bCommentEnd = True) Begin
48106>>>>>                    Move False to bCommentStart
48107>>>>>                End
48107>>>>>>
48107>>>>>                If (bDashComment = False and bCommentStart = False and bCommentEnd = False) Begin
48109>>>>>                    Move sLine to sSQLScriptArray[SizeOfArray(sSQLScriptArray)]
48110>>>>>                End
48110>>>>>>
48110>>>>>            End
48110>>>>>>
48110>>>>>        Loop
48111>>>>>>
48111>>>>>
48111>>>>>        // Update the retval struct array:
48111>>>>>        Move sSQLScriptArray to SqlScriptArray.sSQLScriptArray
48112>>>>>        Function_Return SqlScriptArray
48113>>>>>    End_Function
48114>>>>>
48114>>>>>    // Helper function that builds a string like;
48114>>>>>    // "SELECT name from [Master].[sys].[databases] where name"
48114>>>>>    Function _SqlSelectFromWhereName Returns String
48116>>>>>        String sRetval sSelect sName sFrom sMaster sSys sDatabases sWhere sDBO
48116>>>>>
48116>>>>>        Get _SqlFindKeyWord CI_SQLSelect       to sSelect
48117>>>>>        Get _SqlFindKeyWord CI_SQLName         to sName
48118>>>>>        Get _SqlFindKeyWord CI_SQLDBO          to sDBO
48119>>>>>        Get _SqlFindKeyWord CI_SQLFrom         to sFrom
48120>>>>>        Get _SqlFindKeyWord CI_SQLMaster       to sMaster
48121>>>>>        Get _SqlFindKeyWord CI_SQLSys          to sSys
48122>>>>>        Get _SqlFindKeyWord CI_SQLDatabases    to sDatabases
48123>>>>>        Get _SqlFindKeyWord CI_SQLWhere        to sWhere
48124>>>>>        Move (sSelect * sName * sFrom * "[" + sMaster + "].[" + sDBO + "].[" + sSys + sDatabases + "]" * sWhere * sName) to sRetval
48125>>>>>        Function_Return sRetval
48126>>>>>    End_Function
48127>>>>>
48127>>>>>    // Helper function to create a SQL statement like;
48127>>>>>    // "SELECT * FROM SYS.INDEXES WHERE NAME = MyIndexName AND OBJECT_ID = OBJECT_ID([MySchmaName].[MyTableName])"
48127>>>>>    // Used for checking if an index exists.
48127>>>>>    Function _SqlQueryIfIndexExists String sSchemaName String sTableName String sIndexName Returns String
48129>>>>>        String sRetval sSelect sFrom sSysIndexes sWhere sObjectID sAnd sName
48129>>>>>
48129>>>>>        Get _SqlFindKeyWord CI_SQLSelect to sSelect
48130>>>>>        Get _SqlFindKeyWord CI_SQLFrom to sFrom
48131>>>>>        Get _SqlFindKeyWord CI_SQLSysIndexes to sSysIndexes
48132>>>>>        Get _SqlFindKeyWord CI_SQLWhere to sWhere
48133>>>>>        Get _SqlFindKeyWord CI_SQLObjectID to sObjectID
48134>>>>>        Get _SqlFindKeyWord CI_SQLAND to sAnd
48135>>>>>        Get _SqlFindKeyWord CI_SQLName to sName
48136>>>>>
48136>>>>>        Move (sSelect * String("*") * sFrom * sSysIndexes * sWhere * sName * "=" * sIndexName * sAnd * sObjectID * "=([" + sSchemaName + "].[" + sTableName + "])") to sRetval
48137>>>>>
48137>>>>>        Function_Return sRetval
48138>>>>>    End_Function
48139>>>>>
48139>>>>>    // Formats a columns iLenght & iDecimal parameters as SQL expects them in a string.
48139>>>>>    // E.g. (4,2), where 4 is the iLength and 2 the iDecimals param.
48139>>>>>    Function _SqlFormatLengthAndDecimalAsString Integer iLength Integer iDecimals Returns String
48141>>>>>        String sRetval
48141>>>>>        If (iLength <> 0) Begin
48143>>>>>            Move ("(" + String(iLength)) to sRetval
48144>>>>>            If (iDecimals <> 0) Begin
48146>>>>>                Move (sRetval + "," + String(iDecimals)) to sRetval
48147>>>>>            End
48147>>>>>>
48147>>>>>            Move (sRetval + ")") to sRetval
48148>>>>>        End
48148>>>>>>
48148>>>>>        Function_Return sRetval
48149>>>>>    End_Function
48150>>>>>
48150>>>>>    // Checks that the passed sDriverID is defined.
48150>>>>>    // Also checks if the driver has been loaded; else it gets loaded.
48150>>>>>    Function _SqlCheckCurrentDriver String sDriverID Returns Boolean
48152>>>>>        Boolean bOK
48152>>>>>        Integer iDriver
48152>>>>>
48152>>>>>        If (sDriverID = DATAFLEX_ID) Begin
48154>>>>>            Function_Return False
48155>>>>>        End
48155>>>>>>
48155>>>>>
48155>>>>>        Get IsDAWSQLDriver sDriverID to bOK
48156>>>>>
48156>>>>>        If (bOK = False) Begin
48158>>>>>            Error DFERR_PROGRAM "Driver needs to be one of MSSQLDRV, DB2_DRV, or ODBC_DRV"
48159>>>>>>
48159>>>>>            Function_Return False
48160>>>>>        End
48160>>>>>>
48160>>>>>
48160>>>>>        Get DriverIndex sDriverID to iDriver
48161>>>>>        If (iDriver = 0) Begin
48163>>>>>            Load_Driver sDriverID
48164>>>>>        End
48164>>>>>>
48164>>>>>
48164>>>>>        Function_Return True
48165>>>>>    End_Function
48166>>>>>
48166>>>>>    // Checks that the length parameter has been passed correctly.
48166>>>>>    // This is only of concern for certain SQL data types.
48166>>>>>    Function _SqlCheckLengthParamForDataType Integer iDataType Integer iLen Returns Boolean
48168>>>>>        Integer iLength
48168>>>>>        Boolean bOK bCheckTypeLength
48168>>>>>
48168>>>>>        If (num_arguments > 1) Begin
48170>>>>>            Move iLen to iLength
48171>>>>>        End
48171>>>>>>
48171>>>>>        Move (iDataType = SQL_DECIMAL   or iDataType = SQL_NUMERIC or iDataType = SQL_FLOAT   or iDataType = SQL_INTEGER or;              iDataType = SQL_VARBINARY or iDataType = SQL_BINARY  or iDataType = SQL_VARCHAR or iDataType = SQL_CHAR or;              iDataType = SQL_BIGINT    or iDataType = SQL_REAL) to bCheckTypeLength
48172>>>>>
48172>>>>>        If (bCheckTypeLength = True) Begin
48174>>>>>            Move (iLength > 0) to bOK
48175>>>>>        End
48175>>>>>>
48175>>>>>
48175>>>>>        Function_Return (bOK = True)
48176>>>>>    End_Function
48177>>>>>
48177>>>>>    Function _SqlProperTableName String sTableName Returns String
48179>>>>>        String sVal sSchema sDriverID
48179>>>>>        Integer iDbType
48179>>>>>
48179>>>>>        If (Trim(sTableName) = "") Begin
48181>>>>>            Function_Return ""
48182>>>>>        End
48182>>>>>>
48182>>>>>
48182>>>>>        Get psDriverID to sDriverID
48183>>>>>        Get piDbType   to iDbType
48184>>>>>        If (iDbType = EN_dbTypeOracle) Begin
48186>>>>>            Get psUserID to sSchema
48187>>>>>            // Not sure about this uppercasing but it seems like Oracle wants that?
48187>>>>>            Move (Uppercase(sSchema)) to sSchema
48188>>>>>            Move ('"' + sSchema + '"."' + sTableName + '"') to sTableName
48189>>>>>            Function_Return sTableName
48190>>>>>        End
48190>>>>>>
48190>>>>>        If (iDbType = EN_DbTypeMySQL) Begin
48192>>>>>            Get psDatabase to sVal
48193>>>>>            Move (sVal + "." + sTableName) to sTableName
48194>>>>>            Function_Return sTableName
48195>>>>>        End
48195>>>>>>
48195>>>>>        If (iDbType = EN_DbTypePostgre) Begin
48197>>>>>            Move ('"' + sTableName + '"') to sTableName
48198>>>>>            Function_Return sTableName
48199>>>>>        End
48199>>>>>>
48199>>>>>
48199>>>>>        Get psSchema to sSchema
48200>>>>>        If (sSchema = "") Begin
48202>>>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
48203>>>>>        End
48203>>>>>>
48203>>>>>
48203>>>>>        Move (Uppercase(sTableName)) to sVal
48204>>>>>        If (not(sVal contains (sSchema + "."))) Begin
48206>>>>>            If (iDbType = EN_dbTypeDB2) Begin
48208>>>>>                Move (Lowercase(sSchema) + "." + sTableName) to sTableName
48209>>>>>            End
48209>>>>>>
48209>>>>>            Else Begin
48210>>>>>                Move (sSchema + "." + sTableName) to sTableName
48211>>>>>            End
48211>>>>>>
48211>>>>>        End
48211>>>>>>
48211>>>>>
48211>>>>>        Function_Return sTableName
48212>>>>>    End_Function
48213>>>>>
48213>>>>>    // SQL column names can be case-sensitive. This function is used to check that
48213>>>>>    // the passed sFieldName has the correct spelling.
48213>>>>>    // Used with Embedded SQL statement calls.
48213>>>>>    // If the spelling or fieldname doesn't exist, the return value is "" (blank).
48213>>>>>    Function _SqlFindColumnName String sTableName String sColumnName Returns String
48215>>>>>        String sRetval sValue sDriverID
48215>>>>>        String[] sColumnNamesArray
48216>>>>>        Integer iCount iColumns
48216>>>>>
48216>>>>>        Move "" to sRetval
48217>>>>>        Get psDriverID to sDriverID
48218>>>>>        Get _SqlUtilEnumerateColumns sDriverID sTableName to sColumnNamesArray
48219>>>>>        Move (SizeOfArray(sColumnNamesArray)) to iColumns
48220>>>>>        Decrement iColumns
48221>>>>>
48221>>>>>        For iCount from 0 to iColumns
48227>>>>>>
48227>>>>>            Move sColumnNamesArray[iCount] to sValue
48228>>>>>            If (Uppercase(sColumnName) = Uppercase(sValue)) Begin
48230>>>>>                Move sValue to sRetval
48231>>>>>                Move iColumns to iCount // We're done.
48232>>>>>            End
48232>>>>>>
48232>>>>>        Loop
48233>>>>>>
48233>>>>>
48233>>>>>        Function_Return sRetval
48234>>>>>    End_Function
48235>>>>>
48235>>>>>    Function _SqlDatabasesArrayMSSQL Returns String[]
48237>>>>>        String[] sReturnArray
48238>>>>>        Handle hoSQLHandler
48238>>>>>        Integer iCount iSize iItem
48238>>>>>        String sServer
48238>>>>>        tSQLConnection SQLConnection
48238>>>>>        tSQLConnection SQLConnection
48238>>>>>
48238>>>>>        Get phoMSSQLHandler to hoSQLHandler
48239>>>>>        Send Delete_Data    of hoSQLHandler
48240>>>>>        Get pSQLConnection  of ghoSQLConnectionHandler to SQLConnection
48241>>>>>
48241>>>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
48242>>>>>        Get EnumerateDatabases of hoSQLHandler SQLConnection.sServer SQLConnection.sUserID SQLConnection.sPassword to iSize
48243>>>>>        Decrement iSize
48244>>>>>
48244>>>>>        For iCount from 0 to iSize
48250>>>>>>
48250>>>>>            Get String_Value of hoSQLHandler iCount to sServer
48251>>>>>            Move (Trim(sServer)) to sReturnArray[iItem]
48252>>>>>            Increment iItem
48253>>>>>        Loop
48254>>>>>>
48254>>>>>
48254>>>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
48255>>>>>
48255>>>>>        Function_Return sReturnArray
48256>>>>>    End_Function
48257>>>>>
48257>>>>>    Function _SqlTableArrayDAW Returns String[]
48259>>>>>        String[] sReturnArray
48260>>>>>        String sTable sTableType sSchema sDefSchema sComment sTableKeyWord sSysKeyWord sConnectionString
48260>>>>>        Handle hoSQLHandler
48260>>>>>        Integer iCount iSize iItem iPos
48260>>>>>        Boolean bOK
48260>>>>>        tSQLConnection SQLConnection
48260>>>>>        tSQLConnection SQLConnection
48260>>>>>
48260>>>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
48261>>>>>        If (SQLConnection.sConnectionString = "") Begin
48263>>>>>            Function_Return sReturnArray
48264>>>>>        End
48264>>>>>>
48264>>>>>
48264>>>>>        Move SQLConnection.sSchema      to sDefSchema
48265>>>>>        Move (Uppercase(sDefSchema))    to sDefSchema
48266>>>>>        Get _SqlFindKeyWord CI_SQLTable to sTableKeyWord
48267>>>>>        Get _SqlFindKeyWord CI_SQLSys   to sSysKeyWord
48268>>>>>
48268>>>>>        Get phoCLIHandler to hoSQLHandler
48269>>>>>        Set psDriverID    of hoSQLHandler to SQLConnection.sDriverID
48270>>>>>        Send Delete_Data  of hoSQLHandler
48271>>>>>
48271>>>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
48272>>>>>        Move SQLConnection.sConnectionString to sConnectionString
48273>>>>>        // 2020-03-14 This was not correct when testing a MS-SQL ODBC driver connection from CMOS.
48273>>>>>//        If (SQLConnection.sDriverID = ODBC_DRV_ID) Begin
48273>>>>>//            If (Uppercase(sConnectionString) contains CS_SQLIniDSNKeyword) Begin
48273>>>>>//                Move (Pos(";", sConnectionString)) to iPos
48273>>>>>//                If (iPos > 0) Begin
48273>>>>>//                    Move (Left(sConnectionString, (iPos - 1))) to sConnectionString
48273>>>>>//                    Move (Trim(sConnectionString)) to sConnectionString
48273>>>>>//                End
48273>>>>>//            End
48273>>>>>//        End
48273>>>>>
48273>>>>>        Get EnumerateTables of hoSQLHandler sConnectionString to iSize
48274>>>>>        Move False to Err
48275>>>>>        Move 0 to iItem
48276>>>>>
48276>>>>>        // Note that the enumeration starts from table no 1. (not zero)
48276>>>>>        For iCount from 1 to iSize
48282>>>>>>
48282>>>>>            Get TableName    of hoSQLHandler iCount to sTable
48283>>>>>            Get TableType    of hoSQLHandler iCount to sTableType
48284>>>>>            Get SchemaName   of hoSQLHandler iCount to sSchema
48285>>>>>            If (sSchema = "") Begin
48287>>>>>                Get _SqlFindKeyWord CI_SQLDBO to sSchema
48288>>>>>            End
48288>>>>>>
48288>>>>>            Get TableComment of hoSQLHandler iCount to sComment
48289>>>>>            Move (Trim(sTable)) to sTable
48290>>>>>            If (SQLConnection.sDriverID = DB2_DRV_ID) Begin
48292>>>>>                Move (sTable <> "" and Uppercase(sTableType) = sTableKeyWord and Uppercase(sSchema) = sDefSchema) to bOK
48293>>>>>            End
48293>>>>>>
48293>>>>>            Else Begin
48294>>>>>                Move (sTable <> "" and Uppercase(sTableType) = sTableKeyWord and Uppercase(sSchema) <> sSysKeyWord and Uppercase(sSchema) <> "SYSTOOLS") to bOK
48295>>>>>            End
48295>>>>>>
48295>>>>>            If (bOK = True) Begin
48297>>>>>                Move sTable to sReturnArray[iItem]
48298>>>>>                Increment iItem
48299>>>>>            End
48299>>>>>>
48299>>>>>        Loop
48300>>>>>>
48300>>>>>
48300>>>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
48301>>>>>
48301>>>>>        Function_Return sReturnArray
48302>>>>>    End_Function
48303>>>>>
48303>>>>>    Function _SqlProcedureArrayDAW String sStmt String sArgument Returns String[]
48305>>>>>        String[] sReturnArray
48306>>>>>        String sValue
48306>>>>>        Handle hoSQLHandler hoSQLConnect hStmt
48306>>>>>        Integer iRetval iCols iFetchResult
48306>>>>>        tSQLConnection SQLConnection
48306>>>>>        tSQLConnection SQLConnection
48306>>>>>
48306>>>>>        Get phoSQLManager to hoSQLHandler
48307>>>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
48308>>>>>        Get SqlConnect of hoSQLHandler SQLConnection.sDriverID SQLConnection.sConnectionString to hoSQLConnect
48309>>>>>
48309>>>>>        If (hoSQLConnect <> 0) Begin
48311>>>>>            Get SqlOpen of hoSQLConnect to hStmt
48312>>>>>            If (hStmt <> 0) Begin
48314>>>>>                Send SqlSetProcedurename of hStmt sStmt
48315>>>>>                If (sArgument <> "") Begin
48317>>>>>                    Send SqlSetArgument  of hStmt 1 sArgument
48318>>>>>                End
48318>>>>>>
48318>>>>>
48318>>>>>                Send SqlCall             of hStmt
48319>>>>>                Get SqlReturnValue       of hStmt to iRetval
48320>>>>>                If (iRetval = 0) Begin
48322>>>>>                    Repeat
48322>>>>>>
48322>>>>>                        Get SqlStmtAttribute of hStmt SqlSTMTATTRIB_COLUMNCOUNT to iCols
48323>>>>>                        If (iCols > 0) Begin
48325>>>>>                            Repeat
48325>>>>>>
48325>>>>>                                Get SqlFetch of hStmt to iFetchResult
48326>>>>>                                If (iFetchResult <> 0) Begin
48328>>>>>                                    Get SqlColumnValue of hStmt 1 to sValue
48329>>>>>                                    Move (Trim(sValue)) to sReturnArray[SizeOfArray(sReturnArray)]
48330>>>>>                                End
48330>>>>>>
48330>>>>>                            Until (iFetchResult = 0)
48332>>>>>                        End
48332>>>>>>
48332>>>>>                        Get SqlNextResultSet of hStmt to iRetval
48333>>>>>                    Until (iRetval = 0)
48335>>>>>                    Send SqlClose of hStmt
48336>>>>>                End
48336>>>>>>
48336>>>>>            End
48336>>>>>>
48336>>>>>            Send SqlDisconnect of hoSQLConnect
48337>>>>>        End
48337>>>>>>
48337>>>>>        Function_Return sReturnArray
48338>>>>>    End_Function
48339>>>>>
48339>>>>>    Function _SqlUtilUpdateIntFile Integer hTable Returns Boolean
48341>>>>>        String sOrgFormat sNewFormat sRootName hTableName sPhysicalFileName sDriverID sDataPath
48341>>>>>        Boolean bOpened bOK
48341>>>>>
48341>>>>>        // ToDo: This needs further investigation but for now we just skip CodeMast & CodeType .int files update...
48341>>>>>        // For some reason this .int file update screws up of CodeMast & CodeType .int files
48341>>>>>        // which makes the program unable to run because they can't be opened.
48341>>>>>        // Also note that there is another helper function "UtilTableCreateCodeMastCodeTypeIntFiles" to create
48341>>>>>        // proper .int files for the two tables.
48341>>>>>//        If (Uppercase(hTableName) = "CODETYPE" or Uppercase(hTableName) = "CODEMAST") Begin
48341>>>>>//            Function_Return True
48341>>>>>//        End
48341>>>>>
48341>>>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
48344>>>>>        Get _TableNameOnly sRootName to hTableName
48345>>>>>        Move CS_OEM_Txt  to sOrgFormat
48346>>>>>        Move CS_ANSI_Txt to sNewFormat
48347>>>>>        Get AutoConnectionIDLogin to bOK
48348>>>>>
48348>>>>>        // It seems this can be called to quickly; causing a 13001 error "Cannot open cache file for write"
48348>>>>>//        Sleep 1  
48348>>>>>        Get _UtilDeleteCacheFile hTableName to bOK
48349>>>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
48352>>>>>        If (bOpened = False) Begin
48354>>>>>            Open hTable
48356>>>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpened
48359>>>>>        End
48359>>>>>>
48359>>>>>        If (bOpened = False) Begin
48361>>>>>            Function_Return False
48362>>>>>        End
48362>>>>>>
48362>>>>>
48362>>>>>        Get psDriverID to sDriverID
48363>>>>>
48363>>>>>        Move False to Err
48364>>>>>        Get_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sOrgFormat
48367>>>>>        Move (Uppercase(sOrgFormat)) to sOrgFormat
48368>>>>>        // Lets swap the OEM/ANSI format, just to make a change in Structure_Start below (and back),
48368>>>>>        // to "touch" the table so the driver feels there has been a change and updates the .int file.
48368>>>>>        Move (If(sOrgFormat = CS_OEM_Txt, CS_ANSI_Txt, CS_OEM_Txt)) to sNewFormat
48369>>>>>
48369>>>>>        Move False to Err
48370>>>>>
48370>>>>>        If (hTable > 0) Begin
48372>>>>>            Structure_Start hTable
48373>>>>>                Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sNewFormat
48376>>>>>                Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sOrgFormat
48379>>>>>            Structure_End hTable DF_STRUCTEND_OPT_FORCE "." ghoDbUpdateHandler
48381>>>>>        End
48381>>>>>>
48381>>>>>        Else Begin
48382>>>>>            Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sNewFormat
48385>>>>>            Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sOrgFormat
48388>>>>>        End
48388>>>>>>
48388>>>>>        Function_Return (Err = False)
48389>>>>>    End_Function
48390>>>>>
48390>>>>>    // Subfunction to the ApiTableUpdate function (et al)
48390>>>>>    Function _UtilTableCheckChangeFilelistNames tAPITableNameInfo APITableNameInfoFrom Boolean bIsSQLTableTo Returns Boolean
48392>>>>>        Handle hTable
48392>>>>>        String sConnectionID sRootName sLogicalName sDisplayName
48392>>>>>        Boolean bTableExists bSameTableNames bANSI bOK
48392>>>>>
48392>>>>>        Get _ApiTableFilelistNamesCompare True APITableNameInfoFrom to bSameTableNames
48393>>>>>        If (bSameTableNames = True) Begin
48395>>>>>            Function_Return True
48396>>>>>        End
48396>>>>>>
48396>>>>>
48396>>>>>        Move True to bOK
48397>>>>>        Move APITableNameInfoFrom.iTableNumber  to hTable
48398>>>>>        Set Private.phCurrentTable              to hTable
48399>>>>>        
48399>>>>>        Get_Attribute DF_FILE_ROOT_NAME         of hTable to sRootName
48402>>>>>        If (sRootName <> APITableNameInfoFrom.sRootName) Begin
48404>>>>>            Set_Attribute DF_FILE_ROOT_NAME     of hTable to APITableNameInfoFrom.sRootName
48407>>>>>        End
48407>>>>>>
48407>>>>>        
48407>>>>>        Get_Attribute DF_FILE_LOGICAL_NAME      of hTable to sLogicalName
48410>>>>>        If (sLogicalName <> APITableNameInfoFrom.sLogicalName) Begin
48412>>>>>            Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to APITableNameInfoFrom.sLogicalName
48415>>>>>        End
48415>>>>>>
48415>>>>>        
48415>>>>>        Get_Attribute DF_FILE_DISPLAY_NAME      of hTable to sDisplayName
48418>>>>>        If (sDisplayName <> APITableNameInfoFrom.sDisplayName) Begin
48420>>>>>            Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to APITableNameInfoFrom.sDisplayName
48423>>>>>        End
48423>>>>>>
48423>>>>>
48423>>>>>        If (APITableNameInfoFrom.bIsSQL = True) Begin
48425>>>>>            Get psConnectionID to sConnectionID
48426>>>>>            Get _UtilTableExists hTable to bTableExists
48427>>>>>            If (bTableExists = True) Begin
48429>>>>>                Get _SqlUtilUpdateIntFile hTable to bOK
48430>>>>>            End
48430>>>>>>
48430>>>>>            Else Begin
48431>>>>>                Get pbToANSI to bANSI
48432>>>>>                Get _SqlUtilCreateIntFile hTable APITableNameInfoFrom.sDriverID sConnectionID bANSI False to bOK
48433>>>>>            End
48433>>>>>>
48433>>>>>        End
48433>>>>>>
48433>>>>>
48433>>>>>        Function_Return bOK
48434>>>>>    End_Function
48435>>>>>
48435>>>>>    // The table must already exist in the filelist for this function to work.
48435>>>>>    // It creates an .int file in the first Data folder of the psDataPath property. 
48435>>>>>    // It is important that the hTable can be opened.
48435>>>>>    Function _SqlUtilCreateIntFile Handle hTable String sDriverID String sConnectionID Boolean bAnsi Boolean bSysFile Returns Boolean
48437>>>>>        Boolean bOK bExists bUseConnectionID 
48437>>>>>        String sDataPath sRootName sLogicalName sPhysicalFileName sConnectionString hTableName sSchemaName sANSI_OEM sNoDriverRootName
48437>>>>>        String[] asIndexArray
48438>>>>>        Integer iCount iCh iSize iPos
48438>>>>>
48438>>>>>        Move (Trim(sConnectionID) <> "") to bUseConnectionID
48439>>>>>        Get psConnectionString to sConnectionString
48440>>>>>
48440>>>>>        Move CS_ANSI_Txt to sANSI_OEM
48441>>>>>        If (bANSI = False) Begin
48443>>>>>            Move CS_OEM_Txt to sANSI_OEM
48444>>>>>        End
48444>>>>>>
48444>>>>>
48444>>>>>        Get psDataPathFirstPart to sDataPath
48445>>>>>        Get vFolderExists sDataPath to bOK
48446>>>>>        If (bOK = False) Begin
48448>>>>>            Error DFERR_PROGRAM "Function _SqlUtilCreateIntFile; psDataPath not found!"
48449>>>>>>
48449>>>>>            Function_Return False
48450>>>>>        End
48450>>>>>>
48450>>>>>        Get vFolderFormat sDataPath to sDataPath
48451>>>>>
48451>>>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName 
48454>>>>>        Move (Pos(":", sRootName)) to iPos
48455>>>>>        If (iPos <> 0) Begin
48457>>>>>            Move (Mid(sRootName, Length(sRootName), iPos +1)) to sNoDriverRootName
48458>>>>>        End
48458>>>>>>
48458>>>>>        Else Begin
48459>>>>>            Move sRootName to sNoDriverRootName
48460>>>>>        End
48460>>>>>>
48460>>>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
48463>>>>>        Get _TableNameOnly sRootName to hTableName
48464>>>>>        Move sLogicalName  to sPhysicalFileName
48465>>>>>        Move (sPhysicalFileName + ".int") to sPhysicalFileName
48466>>>>>
48466>>>>>        Get psSchema hTable to sSchemaName
48467>>>>>        If (sSchemaName = "") Begin
48469>>>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchemaName
48470>>>>>        End
48470>>>>>>
48470>>>>>
48470>>>>>        // If the .int file already exists; we rename it to "FileName" + ".bak"
48470>>>>>        Get vFilePathExists (sDataPath + sPhysicalFileName) to bExists
48471>>>>>        If (bExists = True) Begin
48473>>>>>            Get vRenameFile (sDataPath + sPhysicalFileName) (sDataPath + sPhysicalFileName + ".bak") to bOK
48474>>>>>        End
48474>>>>>>
48474>>>>>
48474>>>>>        Get _UtilDeleteCacheFile sNoDriverRootName to bOK
48475>>>>>        Get _SqlUtilEnumerateIndexes sNoDriverRootName sDriverID to asIndexArray
48476>>>>>
48476>>>>>        Get Seq_Open_Output_Channel (sDataPath + sPhysicalFileName) to iCh
48477>>>>>            Writeln channel iCh CS_DRIVER_NAME     " " sDriverID
48482>>>>>            If (bUseConnectionID = True) Begin
48484>>>>>                Writeln channel iCh CS_SERVER_NAME " " CS_DFCONNID "=" sConnectionID
48491>>>>>            End
48491>>>>>>
48491>>>>>            Else Begin
48492>>>>>                Writeln channel iCh CS_SERVER_NAME " " CS_SERVER "=" sConnectionString
48499>>>>>            End
48499>>>>>>
48499>>>>>            Writeln channel iCh CS_DATABASE_NAME          " " hTableName
48504>>>>>            Writeln channel iCh CS_SCHEMA_NAME            " " (Lowercase(sSchemaName))
48509>>>>>            // There seems to be a new order how these are set from DF19.
48509>>>>>            If (bSysFile = True) Begin
48511>>>>>                Writeln channel iCh CS_RECNUM_TABLE       " " "NO"
48516>>>>>                Writeln channel iCh CS_SYSTEM_FILE        " " "YES"
48521>>>>>            End
48521>>>>>>
48521>>>>>            Writeln channel iCh CS_TABLE_CHARACTER_FORMAT " " sANSI_OEM
48526>>>>>            Writeln channel iCh CS_USE_DUMMY_ZERO_DATE    " " "YES" // ToDo: We maybe need to paramerize this setting?
48531>>>>>
48531>>>>>            If (bSysFile = False) Begin
48533>>>>>                Move (SizeOfArray(asIndexArray)) to iSize
48534>>>>>                Move (SortArray(asIndexArray)) to asIndexArray
48535>>>>>                If (iSize > 0) Begin
48537>>>>>                    Writeln channel iCh (CS_PRIMARY_INDEX * String("0"))
48540>>>>>                    Writeln channel iCh // Just an empty line
48542>>>>>                End
48542>>>>>>
48542>>>>>                Decrement iSize
48543>>>>>                for iCount from 0 to iSize
48549>>>>>>
48549>>>>>                    Writeln channel iCh (CS_INDEX_NUMBER * String(iCount))
48552>>>>>                    Writeln channel iCh (CS_INDEX_NAME   * String(asIndexArray[iCount]))
48555>>>>>                    Writeln channel iCh
48557>>>>>                Loop
48558>>>>>>
48558>>>>>            End
48558>>>>>>
48558>>>>>        Send Seq_Close_Channel iCh 
48559>>>>>        
48559>>>>>        Open hTable
48561>>>>>        Structure_Start hTable sDriverID
48562>>>>>        Structure_End hTable DF_STRUCTEND_OPT_FORCE
48564>>>>>
48564>>>>>        // Wait a sec for Windows to finish writing the file:
48564>>>>>//        Sleep 1
48564>>>>>
48564>>>>>        Function_Return (bOK = True)
48565>>>>>    End_Function 
48566>>>>>    
48566>>>>>    // Simplier version of the _SqlUtilCreateIntFile. It can be used if there is something wrong with the .int file and it needs
48566>>>>>    // to be refreshed by the driver. 
48566>>>>>    Function _SqlUtilRefreshIntFile Handle hTable String sDriverID String sConnectionID Boolean bAnsi Boolean bSysFile Returns Boolean        
48568>>>>>        String sOrgFormat sNewFormat
48568>>>>>        
48568>>>>>        Move False to Err
48569>>>>>        Open hTable
48571>>>>>        If (Err = True) Begin
48573>>>>>            Function_Return False
48574>>>>>        End
48574>>>>>>
48574>>>>>        
48574>>>>>        Structure_Start hTable
48575>>>>>        Structure_End hTable DF_STRUCTEND_OPT_FORCE "." ghoDbUpdateHandler
48577>>>>>    End_Function
48578>>>>>
48578>>>>>    Function _UtilDeleteCacheFile String sTableName Returns Boolean
48580>>>>>        String sDataPath sDriverID
48580>>>>>        Boolean bOK
48580>>>>>        Integer iPos
48580>>>>>
48580>>>>>        If (sTableName contains ".") Begin
48582>>>>>            Move (Pos(".", sTableName)) to iPos
48583>>>>>            Move (Mid(sTableName, Length(sTableName), (iPos +1))) to sTableName
48584>>>>>        End
48584>>>>>>
48584>>>>>
48584>>>>>        Get psDriverID to sDriverID
48585>>>>>        Get psDataPathFirstPart to sDataPath
48586>>>>>        // First delete the cache file:
48586>>>>>        Get vDeleteFile (sDataPath + sTableName + ".cch") to bOK
48587>>>>>
48587>>>>>        Function_Return bOK
48588>>>>>    End_Function
48589>>>>>
48589>>>>>    // Collects all tables from the SQL Database backend and sets the pasSQLTables property.
48589>>>>>    Procedure UtilFillSQLTables
48591>>>>>        String[] asSQLTables
48592>>>>>        String sDataBase
48592>>>>>        Integer iSize iCount
48592>>>>>
48592>>>>>        Get psDatabase to sDataBase
48593>>>>>        Get _SqlUtilEnumerateTables MSSQLDRV_ID sDataBase "" to asSQLTables
48594>>>>>        Set pasSQLDataTables to asSQLTables
48595>>>>>    End_Procedure 
48596>>>>>    
48596>>>>>    // This collects *all* filelist entries and sets the pFileListArray struct property.
48596>>>>>    Procedure UtilFillFileListStruct
48598>>>>>        tFilelist[] Tables
48598>>>>>        tFilelist[] Tables
48599>>>>>        String sRootName sLogicalName sDisplayName sDriver sNoDriverRootname
48599>>>>>        Handle hTable
48599>>>>>        Integer iItem iCount
48599>>>>>        Boolean bIsSystem bIsAlias bOpened
48599>>>>>        
48599>>>>>        Move 0 to iItem
48600>>>>>        Move 0 to hTable 
48601>>>>>        Repeat
48601>>>>>>
48601>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
48604>>>>>            // 0 = no more table in Filelist.cfg, 50 = Flexerrs.
48604>>>>>            If (hTable <> 0 and hTable <> 50) Begin  
48606>>>>>                Move False to Err
48607>>>>>                Move False to bIsSystem
48608>>>>>                Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
48611>>>>>                Get _DriverIDFromRootName sRootName to sDriver
48612>>>>>                Set Message_Text of ghoStatusPanel to ("Reading table" * String(hTable) * "RootName =" * sRootName)
48613>>>>>                Send DoAdvance of ghoProgressBar
48614>>>>>                Send Ignore_All of Error_Object_Id
48615>>>>>                Open hTable
48617>>>>>                Get_Attribute DF_FILE_OPENED         of hTable to bOpened
48620>>>>>                Get_Attribute DF_FILE_IS_SYSTEM_FILE of hTable to bIsSystem
48623>>>>>                Send Trap_All of Error_Object_Id
48624>>>>>                Close hTable
48625>>>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
48628>>>>>                Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
48631>>>>>                Get _TableNameOnly sRootName to sNoDriverRootname
48632>>>>>                Move hTable              to Tables[iItem].hTable
48633>>>>>                Move sRootName           to Tables[iItem].sRootName
48634>>>>>                Move sLogicalName        to Tables[iItem].sLogicalName
48635>>>>>                Move sDisplayName        to Tables[iItem].sDisplayName
48636>>>>>                Move sNoDriverRootname   to Tables[iItem].sNoDriverRootname
48637>>>>>                Move sDriver             to Tables[iItem].sDriver 
48638>>>>>                Move bIsSystem           to Tables[iItem].bIsSystemFile
48639>>>>>                Move (bOpened = False)   to Tables[iItem].bErrorOpening
48640>>>>>                Get _IsAliasTable hTable to Tables[iItem].bIsAlias 
48641>>>>>                Move False to Err
48642>>>>>                Increment iItem
48643>>>>>            End
48643>>>>>>
48643>>>>>        Until (hTable = 0)
48645>>>>>        
48645>>>>>        Set Message_Text of ghoStatusPanel to ""
48646>>>>>        Set pFileListArray to Tables
48647>>>>>    End_Procedure   
48648>>>>>    
48648>>>>>    // Special array search function for the tFilelistLogicalName struct.
48648>>>>>    // Used by e.g. UtilAliasToMasterTableHandle
48648>>>>>    Function CompareFileListTable tFilelistLogicalName FileListTable1 tFilelistLogicalName FileListTable2 Returns Integer
48650>>>>>        If (Lowercase(FileListTable1.sLogicalName) < Lowercase(FileListTable2.sLogicalName)) ;            Function_Return (LT)
48653>>>>>        If (Lowercase(FileListTable1.sLogicalName) > Lowercase(FileListTable2.sLogicalName)) ;            Function_Return (GT)
48656>>>>>
48656>>>>>        If (Lowercase(FileListTable1.sNoDriverRootname) < Lowercase(FileListTable2.sNoDriverRootname)) ;            Function_Return (LT)
48659>>>>>        If (Lowercase(FileListTable1.sNoDriverRootname) > Lowercase(FileListTable2.sNoDriverRootname)) ;            Function_Return (GT)
48662>>>>>            
48662>>>>>        Function_Return (EQ)
48663>>>>>    End_Function
48664>>>>>
48664>>>>>    // Finds the corresponding Master table for the passed Alias handle
48664>>>>>    Function UtilAliasToMasterTableHandle Handle hTable Returns Handle
48666>>>>>        Handle hMasterTable
48666>>>>>        String sDriver sRootNameAlias sNoDriverRootnameAlias
48666>>>>>        Boolean bIsAlias bFound bIsIntTable
48666>>>>>        Integer iSize iCount iItem 
48666>>>>>        tFilelistLogicalName[] FilelistLogicalTables
48666>>>>>        tFilelistLogicalName[] FilelistLogicalTables
48667>>>>>        tFilelistLogicalName FileListTable
48667>>>>>        tFilelistLogicalName FileListTable
48667>>>>>        
48667>>>>>        Get _IsAliasTable hTable to bIsAlias
48668>>>>>        If (bIsAlias = False) Begin
48670>>>>>            Function_Return 0
48671>>>>>        End
48671>>>>>>
48671>>>>>        
48671>>>>>        Move 0 to hMasterTable
48672>>>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootNameAlias 
48675>>>>>        Get _TableNameOnly sRootNameAlias to sNoDriverRootnameAlias
48676>>>>>        Get _IsIntEntry hTable to bIsIntTable
48677>>>>>        Get pFilelistLogicalTables  to FilelistLogicalTables
48678>>>>>        Move sNoDriverRootnameAlias to FileListTable.sLogicalName
48679>>>>>        Move sNoDriverRootnameAlias to FileListTable.sNoDriverRootname
48680>>>>>        Move (SearchArray(FileListTable, FilelistLogicalTables, Self, (RefFunc(CompareFileListTable)))) to iItem
48681>>>>>        If (iItem = -1) Begin
48683>>>>>            Function_Return 0
48684>>>>>        End
48684>>>>>>
48684>>>>>        Move (Lowercase(sNoDriverRootnameAlias) = Lowercase(FilelistLogicalTables[iItem].sNoDriverRootname) and Lowercase(FilelistLogicalTables[iItem].sNoDriverRootname) = Lowercase(FilelistLogicalTables[iItem].sLogicalName)) to bFound
48685>>>>>        If (bFound = True) Begin
48687>>>>>            Move FilelistLogicalTables[iItem].hTable to hMasterTable
48688>>>>>            Function_Return hMasterTable
48689>>>>>        End
48689>>>>>>
48689>>>>>        
48689>>>>>        Function_Return hMasterTable
48690>>>>>    End_Function
48691>>>>>     
48691>>>>>    Function pFilelistLogicalTables Returns tFilelistLogicalName
48693>>>>>        tFilelistLogicalName[] FilelistLogicalTables
48693>>>>>        tFilelistLogicalName[] FilelistLogicalTables
48694>>>>>        tFilelist[] FileListTables
48694>>>>>        tFilelist[] FileListTables
48695>>>>>        Integer iSize iCount
48695>>>>>        
48695>>>>>        Get pFileListArray to FileListTables
48696>>>>>        Move (SizeOfArray(FileListTables)) to iSize
48697>>>>>        Decrement iSize
48698>>>>>        for iCount from 0 to iSize
48704>>>>>>
48704>>>>>            Move FileListTables[iCount].bErrorOpening       to FilelistLogicalTables[iCount].bErrorOpening    
48705>>>>>            Move FileListTables[iCount].bIsAlias            to FilelistLogicalTables[iCount].bIsAlias
48706>>>>>            Move FileListTables[iCount].bIsSystemFile       to FilelistLogicalTables[iCount].bIsSystemFile
48707>>>>>            Move FileListTables[iCount].hTable              to FilelistLogicalTables[iCount].hTable
48708>>>>>            Move FileListTables[iCount].sDisplayName        to FilelistLogicalTables[iCount].sDisplayName
48709>>>>>            Move FileListTables[iCount].sDriver             to FilelistLogicalTables[iCount].sDriver
48710>>>>>            Move FileListTables[iCount].sLogicalName        to FilelistLogicalTables[iCount].sLogicalName
48711>>>>>            Move FileListTables[iCount].sNoDriverRootname   to FilelistLogicalTables[iCount].sNoDriverRootname
48712>>>>>            Move FileListTables[iCount].sRootName           to FilelistLogicalTables[iCount].sRootName
48713>>>>>        Loop
48714>>>>>>
48714>>>>>        Move (SortArray(FilelistLogicalTables)) to FilelistLogicalTables
48715>>>>>        Function_Return FilelistLogicalTables
48716>>>>>    End_Function 
48717>>>>>    
48717>>>>>    // Checks that the passed hTable number both exists in Filelist.cfg and
48717>>>>>    // that the embedded .dat file exists on disk _or_ that the SQL table exists
48717>>>>>    // if it is an SQL table
48717>>>>>    Function _UtilTableExists Handle hTable Returns Boolean
48719>>>>>        Boolean bExists bIsSQLTable
48719>>>>>        String sDataPath sRootName
48719>>>>>
48719>>>>>        Get _UtilTableNumberIsInUse hTable to bExists
48720>>>>>        If (bExists = False) Begin
48722>>>>>            Function_Return False
48723>>>>>        End
48723>>>>>>
48723>>>>>
48723>>>>>        Move False to bIsSQLTable
48724>>>>>        If (hTable > 0) Begin
48726>>>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
48729>>>>>            Move (sRootName contains ":") to bIsSQLTable
48730>>>>>        End
48730>>>>>>
48730>>>>>        If (bIsSQLTable = True) Begin
48732>>>>>            Get _UtilTableIsSql hTable to bExists
48733>>>>>            Function_Return bExists
48734>>>>>        End
48734>>>>>>
48734>>>>>        Else Begin
48735>>>>>            Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
48736>>>>>            Get vFolderFormat sDataPath to sDataPath
48737>>>>>            Get vFilePathExists (sDataPath + sRootName + ".dat") to bExists
48738>>>>>        End
48738>>>>>>
48738>>>>>
48738>>>>>        Function_Return bExists
48739>>>>>    End_Function
48740>>>>>
48740>>>>>    // Note: This variant uses the pasSQLDataTables property!
48740>>>>>    //       Thus, that property needs to have been initialized before
48740>>>>>    //       calling.
48740>>>>>    // It checks that the SQL table exists on the SQL end, *or*
48740>>>>>    // if embedded database, that the .dat file exists on disk.
48740>>>>>    Function _UtilTableExists_Ex Handle hTable Returns Boolean
48742>>>>>        Boolean bExists bIsSQLTable
48742>>>>>        String sDataPath sRootName
48742>>>>>
48742>>>>>        Get _UtilTableNumberIsInUse hTable to bExists
48743>>>>>        If (bExists = False) Begin
48745>>>>>            Function_Return False
48746>>>>>        End
48746>>>>>>
48746>>>>>
48746>>>>>        Move False to bIsSQLTable
48747>>>>>        If (hTable > 0) Begin
48749>>>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
48752>>>>>            Move (sRootName contains ":") to bIsSQLTable
48753>>>>>        End
48753>>>>>>
48753>>>>>        If (bIsSQLTable = True) Begin
48755>>>>>            Get _UtilTableIsSql_Ex hTable to bExists
48756>>>>>            Function_Return bExists
48757>>>>>        End
48757>>>>>>
48757>>>>>        Else Begin
48758>>>>>            Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
48759>>>>>            Get vFolderFormat sDataPath to sDataPath
48760>>>>>            Get vFilePathExists (sDataPath + sRootName + ".dat") to bExists
48761>>>>>        End
48761>>>>>>
48761>>>>>
48761>>>>>        Function_Return bExists
48762>>>>>    End_Function
48763>>>>>
48763>>>>>    // Pass a table handle
48763>>>>>    // Returns True if the table exists in filelist.cfg.
48763>>>>>    Function _UtilTableNumberIsInUse Handle hCheckTable Returns Boolean
48765>>>>>        Handle hTable
48765>>>>>        Boolean bFound
48765>>>>>
48765>>>>>        Move False to bFound
48766>>>>>        Move 0 to hTable
48767>>>>>        Repeat
48767>>>>>>
48767>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
48770>>>>>            If (hTable > 0) Begin
48772>>>>>                If (hTable = hCheckTable) Begin
48774>>>>>                    Move True to bFound
48775>>>>>                End
48775>>>>>>
48775>>>>>            End
48775>>>>>>
48775>>>>>            If (bFound = True) ;                Break
48778>>>>>        Until (hTable = 0)
48780>>>>>
48780>>>>>        Function_Return bFound
48781>>>>>    End_Function
48782>>>>>
48782>>>>>    // Returns number of tables in filelist.cfg.
48782>>>>>    Function _UtilNumberOfFileListTables Returns Boolean
48784>>>>>        Handle hTable
48784>>>>>        Integer iCount
48784>>>>>
48784>>>>>        Move 0 to iCount
48785>>>>>        Move 0 to hTable
48786>>>>>        Repeat
48786>>>>>>
48786>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
48789>>>>>            If (hTable > 0) Begin
48791>>>>>                Increment iCount
48792>>>>>            End
48792>>>>>>
48792>>>>>        Until (hTable = 0)
48794>>>>>
48794>>>>>        Function_Return iCount
48795>>>>>    End_Function
48796>>>>>
48796>>>>>    // DataFlex Embedded Database Data Types:
48796>>>>>    // Helper function for _UtilEnumerateColumnTypes
48796>>>>>    Function _UtilEnumerateDataFlexTypes Returns tColumnType[]
48798>>>>>        tColumnType[] ColumnType
48798>>>>>        tColumnType[] ColumnType
48799>>>>>        Integer i
48799>>>>>
48799>>>>>        Move DF_ASCII           to ColumnType[i].iSQLType
48800>>>>>        Move "ASCII"            to ColumnType[i].sSQLType
48801>>>>>        Move DF_ASCII           to ColumnType[i].iDataFlexType
48802>>>>>        Move "ASCII"            to ColumnType[i].sDataFlexType
48803>>>>>        Move "254"              to ColumnType[i].sPrecision
48804>>>>>        Increment i
48805>>>>>
48805>>>>>        Move DF_BCD             to ColumnType[i].iSQLType
48806>>>>>        Move "Numeric"          to ColumnType[i].sSQLType
48807>>>>>        Move DF_BCD             to ColumnType[i].iDataFlexType
48808>>>>>        Move "Numeric"          to ColumnType[i].sDataFlexType
48809>>>>>        Move "14.8"             to ColumnType[i].sPrecision
48810>>>>>        Increment i
48811>>>>>
48811>>>>>        Move DF_DATE            to ColumnType[i].iSQLType
48812>>>>>        Move "Date"             to ColumnType[i].sSQLType
48813>>>>>        Move DF_DATE            to ColumnType[i].iDataFlexType
48814>>>>>        Move "Date"             to ColumnType[i].sDataFlexType
48815>>>>>        Move "6.0"              to ColumnType[i].sPrecision
48816>>>>>        Move True               to ColumnType[i].bCanEditSize
48817>>>>>        Increment i
48818>>>>>
48818>>>>>        Move DF_TEXT            to ColumnType[i].iSQLType
48819>>>>>        Move "Text"             to ColumnType[i].sSQLType
48820>>>>>        Move DF_TEXT            to ColumnType[i].iDataFlexType
48821>>>>>        Move "Text"             to ColumnType[i].sDataFlexType
48822>>>>>        Move "16384"            to ColumnType[i].sPrecision
48823>>>>>        Increment i
48824>>>>>
48824>>>>>        Move DF_BINARY          to ColumnType[i].iSQLType
48825>>>>>        Move "Binary"           to ColumnType[i].sSQLType
48826>>>>>        Move DF_BINARY          to ColumnType[i].iDataFlexType
48827>>>>>        Move "Binary"           to ColumnType[i].sDataFlexType
48828>>>>>        Move "16384"            to ColumnType[i].sPrecision
48829>>>>>        Increment i
48830>>>>>
48830>>>>>        Move DF_DATETIME        to ColumnType[i].iSQLType
48831>>>>>        Move "DateTime"         to ColumnType[i].sSQLType
48832>>>>>        Move DF_DATETIME        to ColumnType[i].iDataFlexType
48833>>>>>        Move "DateTime"         to ColumnType[i].sDataFlexType
48834>>>>>        Move "23"               to ColumnType[i].sPrecision
48835>>>>>        Move True               to ColumnType[i].bCanEditSize
48836>>>>>        Increment i
48837>>>>>
48837>>>>>        Move DF_OVERLAP         to ColumnType[i].iSQLType
48838>>>>>        Move "Overlap"          to ColumnType[i].sSQLType
48839>>>>>        Move DF_OVERLAP         to ColumnType[i].iDataFlexType
48840>>>>>        Move "Overlap"          to ColumnType[i].sDataFlexType
48841>>>>>        Move "0.0"              to ColumnType[i].sPrecision
48842>>>>>
48842>>>>>        Function_Return ColumnType
48843>>>>>    End_Function
48844>>>>>
48844>>>>>    Function _UtilEnumerateDB2Types Returns tColumnType[]
48846>>>>>        tColumnType[] aColumnType
48846>>>>>        tColumnType[] aColumnType
48847>>>>>        Integer i
48847>>>>>
Including file: DB2_DRV_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\DB2_DRV_DriverDef.inc)
48847>>>>>>// Generated By The Database Update Framework
48847>>>>>>// Driver XML File: C:\Program Files (x86)\DataFlex 19.1\bin\MSSQLDRV_DriverDef.xml
48847>>>>>>// Driver COLUMN DATA TYPES
48847>>>>>>//
48847>>>>>>// Created: 2019-07-18 18:57:13.935
48847>>>>>>
48847>>>>>>            Move "bigint"                                to aColumnType[i].sSQLType
48848>>>>>>            Move -5                                      to aColumnType[i].iSQLType
48849>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48850>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48851>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
48852>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48853>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
48854>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
48855>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
48856>>>>>>            Move 14                                      to aColumnType[i].sPrecision
48857>>>>>>            Increment i
48858>>>>>>
48858>>>>>>            Move "binary"                                to aColumnType[i].sSQLType
48859>>>>>>            Move -2                                      to aColumnType[i].iSQLType
48860>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48861>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48862>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48863>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48864>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
48865>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48866>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48867>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
48868>>>>>>            Increment i
48869>>>>>>
48869>>>>>>            Move "bit"                                   to aColumnType[i].sSQLType
48870>>>>>>            Move -7                                      to aColumnType[i].iSQLType
48871>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
48872>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48873>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
48874>>>>>>            Move 0                                       to aColumnType[i].iMinSize
48875>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
48876>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48877>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48878>>>>>>            Move 1                                       to aColumnType[i].sPrecision
48879>>>>>>            Increment i
48880>>>>>>
48880>>>>>>            Move "char"                                  to aColumnType[i].sSQLType
48881>>>>>>            Move 1                                       to aColumnType[i].iSQLType
48882>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48883>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48884>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48885>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48886>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
48887>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48888>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48889>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
48890>>>>>>            Increment i
48891>>>>>>
48891>>>>>>            Move "date"                                  to aColumnType[i].sSQLType
48892>>>>>>            Move 91                                      to aColumnType[i].iSQLType
48893>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
48894>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48895>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
48896>>>>>>            Move 0                                       to aColumnType[i].iMinSize
48897>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
48898>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48899>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48900>>>>>>            Move 1                                       to aColumnType[i].sPrecision
48901>>>>>>            Increment i
48902>>>>>>
48902>>>>>>            Move "datetime"                              to aColumnType[i].sSQLType
48903>>>>>>            Move 93                                      to aColumnType[i].iSQLType
48904>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
48905>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48906>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48907>>>>>>            Move -1                                      to aColumnType[i].iMinSize
48908>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
48909>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48910>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48911>>>>>>            Move 23                                      to aColumnType[i].sPrecision
48912>>>>>>            Increment i
48913>>>>>>
48913>>>>>>            Move "datetime2"                             to aColumnType[i].sSQLType
48914>>>>>>            Move -200                                    to aColumnType[i].iSQLType
48915>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48916>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48917>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
48918>>>>>>            Move 23                                      to aColumnType[i].iMinSize
48919>>>>>>            Move 23                                      to aColumnType[i].nMaxSize
48920>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48921>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48922>>>>>>            Move 23                                      to aColumnType[i].sPrecision
48923>>>>>>            Increment i
48924>>>>>>
48924>>>>>>            Move "datetimeoffset"                        to aColumnType[i].sSQLType
48925>>>>>>            Move -155                                    to aColumnType[i].iSQLType
48926>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48927>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48928>>>>>>            Move 34                                      to aColumnType[i].iDefaultSize
48929>>>>>>            Move 34                                      to aColumnType[i].iMinSize
48930>>>>>>            Move 34                                      to aColumnType[i].nMaxSize
48931>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48932>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48933>>>>>>            Move 34                                      to aColumnType[i].sPrecision
48934>>>>>>            Increment i
48935>>>>>>
48935>>>>>>            Move "decimal"                               to aColumnType[i].sSQLType
48936>>>>>>            Move 3                                       to aColumnType[i].iSQLType
48937>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48938>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48939>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48940>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48941>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
48942>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
48943>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
48944>>>>>>            Move 14                                      to aColumnType[i].sPrecision
48945>>>>>>            Increment i
48946>>>>>>
48946>>>>>>            Move "float"                                 to aColumnType[i].sSQLType
48947>>>>>>            Move 6                                       to aColumnType[i].iSQLType
48948>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48949>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48950>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
48951>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48952>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
48953>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
48954>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
48955>>>>>>            Move 14                                      to aColumnType[i].sPrecision
48956>>>>>>            Increment i
48957>>>>>>
48957>>>>>>            Move "image"                                 to aColumnType[i].sSQLType
48958>>>>>>            Move -4                                      to aColumnType[i].iSQLType
48959>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48960>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48961>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
48962>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48963>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
48964>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48965>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48966>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
48967>>>>>>            Increment i
48968>>>>>>
48968>>>>>>            Move "int"                                   to aColumnType[i].sSQLType
48969>>>>>>            Move 4                                       to aColumnType[i].iSQLType
48970>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48971>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48972>>>>>>            Move 10                                      to aColumnType[i].iDefaultSize
48973>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48974>>>>>>            Move 10                                      to aColumnType[i].nMaxSize
48975>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
48976>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
48977>>>>>>            Move 10                                      to aColumnType[i].sPrecision
48978>>>>>>            Increment i
48979>>>>>>
48979>>>>>>            Move "money"                                 to aColumnType[i].sSQLType
48980>>>>>>            Move -204                                    to aColumnType[i].iSQLType
48981>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
48982>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48983>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
48984>>>>>>            Move 0                                       to aColumnType[i].iMinSize
48985>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
48986>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48987>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48988>>>>>>            Move 1                                       to aColumnType[i].sPrecision
48989>>>>>>            Increment i
48990>>>>>>
48990>>>>>>            Move "nchar"                                 to aColumnType[i].sSQLType
48991>>>>>>            Move -8                                      to aColumnType[i].iSQLType
48992>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48993>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48994>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48995>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48996>>>>>>            Move 4000                                    to aColumnType[i].nMaxSize
48997>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48998>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48999>>>>>>            Move 4000                                    to aColumnType[i].sPrecision
49000>>>>>>            Increment i
49001>>>>>>
49001>>>>>>            Move "ntext"                                 to aColumnType[i].sSQLType
49002>>>>>>            Move -10                                     to aColumnType[i].iSQLType
49003>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49004>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49005>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49006>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49007>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49008>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49009>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49010>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49011>>>>>>            Increment i
49012>>>>>>
49012>>>>>>            Move "numeric"                               to aColumnType[i].sSQLType
49013>>>>>>            Move 2                                       to aColumnType[i].iSQLType
49014>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49015>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49016>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49017>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49018>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49019>>>>>>            Move "DF_DATE"                               to aColumnType[i].sDataFlexType
49020>>>>>>            Move DF_DATE                                 to aColumnType[i].iDataFlexType
49021>>>>>>            Move 6                                       to aColumnType[i].sPrecision
49022>>>>>>            Increment i
49023>>>>>>
49023>>>>>>            Move "nvarchar"                              to aColumnType[i].sSQLType
49024>>>>>>            Move -9                                      to aColumnType[i].iSQLType
49025>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49026>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49027>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49028>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49029>>>>>>            Move 4000                                    to aColumnType[i].nMaxSize
49030>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49031>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49032>>>>>>            Move 4000                                    to aColumnType[i].sPrecision
49033>>>>>>            Increment i
49034>>>>>>
49034>>>>>>            Move "nvarchar(max)"                         to aColumnType[i].sSQLType
49035>>>>>>            Move -202                                    to aColumnType[i].iSQLType
49036>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49037>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49038>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49039>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49040>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49041>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49042>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49043>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49044>>>>>>            Increment i
49045>>>>>>
49045>>>>>>            Move "real"                                  to aColumnType[i].sSQLType
49046>>>>>>            Move 7                                       to aColumnType[i].iSQLType
49047>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49048>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49049>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49050>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49051>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49052>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49053>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49054>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49055>>>>>>            Increment i
49056>>>>>>
49056>>>>>>            Move "smalldatetime"                         to aColumnType[i].sSQLType
49057>>>>>>            Move -206                                    to aColumnType[i].iSQLType
49058>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49059>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49060>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
49061>>>>>>            Move 0                                       to aColumnType[i].iMinSize
49062>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
49063>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49064>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49065>>>>>>            Move 1                                       to aColumnType[i].sPrecision
49066>>>>>>            Increment i
49067>>>>>>
49067>>>>>>            Move "smallint"                              to aColumnType[i].sSQLType
49068>>>>>>            Move 5                                       to aColumnType[i].iSQLType
49069>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49070>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49071>>>>>>            Move 5                                       to aColumnType[i].iDefaultSize
49072>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49073>>>>>>            Move 5                                       to aColumnType[i].nMaxSize
49074>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49075>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49076>>>>>>            Move 5                                       to aColumnType[i].sPrecision
49077>>>>>>            Increment i
49078>>>>>>
49078>>>>>>            Move "smallmoney"                            to aColumnType[i].sSQLType
49079>>>>>>            Move -205                                    to aColumnType[i].iSQLType
49080>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49081>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49082>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
49083>>>>>>            Move 0                                       to aColumnType[i].iMinSize
49084>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
49085>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49086>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49087>>>>>>            Move 1                                       to aColumnType[i].sPrecision
49088>>>>>>            Increment i
49089>>>>>>
49089>>>>>>            Move "text"                                  to aColumnType[i].sSQLType
49090>>>>>>            Move -1                                      to aColumnType[i].iSQLType
49091>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49092>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49093>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49094>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49095>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49096>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49097>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49098>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49099>>>>>>            Increment i
49100>>>>>>
49100>>>>>>            Move "time"                                  to aColumnType[i].sSQLType
49101>>>>>>            Move -154                                    to aColumnType[i].iSQLType
49102>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49103>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49104>>>>>>            Move 10                                      to aColumnType[i].iDefaultSize
49105>>>>>>            Move 10                                      to aColumnType[i].iMinSize
49106>>>>>>            Move 19                                      to aColumnType[i].nMaxSize
49107>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49108>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49109>>>>>>            Move 19                                      to aColumnType[i].sPrecision
49110>>>>>>            Increment i
49111>>>>>>
49111>>>>>>            Move "tinyint"                               to aColumnType[i].sSQLType
49112>>>>>>            Move -6                                      to aColumnType[i].iSQLType
49113>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49114>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49115>>>>>>            Move 3                                       to aColumnType[i].iDefaultSize
49116>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49117>>>>>>            Move 3                                       to aColumnType[i].nMaxSize
49118>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49119>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49120>>>>>>            Move 3                                       to aColumnType[i].sPrecision
49121>>>>>>            Increment i
49122>>>>>>
49122>>>>>>            Move "uniqueidentifier"                      to aColumnType[i].sSQLType
49123>>>>>>            Move -11                                     to aColumnType[i].iSQLType
49124>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49125>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49126>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
49127>>>>>>            Move 0                                       to aColumnType[i].iMinSize
49128>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
49129>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49130>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49131>>>>>>            Move 1                                       to aColumnType[i].sPrecision
49132>>>>>>            Increment i
49133>>>>>>
49133>>>>>>            Move "varbinary"                             to aColumnType[i].sSQLType
49134>>>>>>            Move -3                                      to aColumnType[i].iSQLType
49135>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49136>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49137>>>>>>            Move 8000                                    to aColumnType[i].iDefaultSize
49138>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49139>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
49140>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49141>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49142>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
49143>>>>>>            Increment i
49144>>>>>>
49144>>>>>>            Move "varbinary(max)"                        to aColumnType[i].sSQLType
49145>>>>>>            Move -203                                    to aColumnType[i].iSQLType
49146>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49147>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49148>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49149>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49150>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49151>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49152>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49153>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49154>>>>>>            Increment i
49155>>>>>>
49155>>>>>>            Move "varchar"                               to aColumnType[i].sSQLType
49156>>>>>>            Move 12                                      to aColumnType[i].iSQLType
49157>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49158>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49159>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49160>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49161>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
49162>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49163>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49164>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
49165>>>>>>            Increment i
49166>>>>>>
49166>>>>>>            Move "varchar(max)"                          to aColumnType[i].sSQLType
49167>>>>>>            Move -201                                    to aColumnType[i].iSQLType
49168>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49169>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49170>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49171>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49172>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49173>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49174>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49175>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49176>>>>>>            Increment i
49177>>>>>>
49177>>>>>>            Move "xml"                                   to aColumnType[i].sSQLType
49178>>>>>>            Move -152                                    to aColumnType[i].iSQLType
49179>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49180>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49181>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49182>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49183>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49184>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49185>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49186>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49187>>>>>>            Increment i
49188>>>>>>
49188>>>>>>
49188>>>>>//        Move SQL_DBCLOB         to ColumnType[i].iSQLType
49188>>>>>//        Move "DBCLOB"           to ColumnType[i].sSQLType
49188>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49188>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49188>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_BIGINT         to ColumnType[i].iSQLType
49188>>>>>//        Move "BIGINT"           to ColumnType[i].sSQLType
49188>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49188>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49188>>>>>//        Move "14.0"             to ColumnType[i].sPrecision
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_BLOB           to ColumnType[i].iSQLType
49188>>>>>//        Move "BLOB"             to ColumnType[i].sSQLType
49188>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49188>>>>>//        Move "BINARY"           to ColumnType[i].sDataFlexType
49188>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_CHAR           to ColumnType[i].iSQLType
49188>>>>>//        Move "CHAR"             to ColumnType[i].sSQLType
49188>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49188>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49188>>>>>//        Move "254"              to ColumnType[i].sPrecision
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        // ToDo: We need to change the sType when using this!
49188>>>>>//        Move SQL_CHARBIT            to ColumnType[i].iSQLType
49188>>>>>//        Move "CHAR FOR BIT DATA"    to ColumnType[i].sSQLType
49188>>>>>//        Move DF_BINARY              to ColumnType[i].iDataFlexType
49188>>>>>//        Move "Binary"               to ColumnType[i].sDataFlexType
49188>>>>>//        Move "254"                  to ColumnType[i].sPrecision
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_DATE           to ColumnType[i].iSQLType
49188>>>>>//        Move "DATE"             to ColumnType[i].sSQLType
49188>>>>>//        Move DF_DATE            to ColumnType[i].iDataFlexType
49188>>>>>//        Move "Date"             to ColumnType[i].sDataFlexType
49188>>>>>//        Move "6.0"              to ColumnType[i].sPrecision
49188>>>>>//        Move True               to ColumnType[i].bCanEditSize
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_CLOB           to ColumnType[i].iSQLType
49188>>>>>//        Move "CLOB"             to ColumnType[i].sSQLType
49188>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49188>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49188>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_DECIMAL        to ColumnType[i].iSQLType
49188>>>>>//        Move "DECIMAL"          to ColumnType[i].sSQLType
49188>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49188>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49188>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_DOUBLE         to ColumnType[i].iSQLType
49188>>>>>//        Move "DOUBLE"           to ColumnType[i].sSQLType
49188>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49188>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49188>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_FLOAT          to ColumnType[i].iSQLType
49188>>>>>//        Move "FLOAT"            to ColumnType[i].sSQLType
49188>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49188>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49188>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_GRAPHIC        to ColumnType[i].iSQLType
49188>>>>>//        Move "GRAPHIC"          to ColumnType[i].sSQLType
49188>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49188>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49188>>>>>//        Move "255"              to ColumnType[i].sPrecision
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_INTEGER        to ColumnType[i].iSQLType
49188>>>>>//        Move "INTEGER"          to ColumnType[i].sSQLType
49188>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49188>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49188>>>>>//        Move "9.0"              to ColumnType[i].sPrecision
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_LONGVARCHAR    to ColumnType[i].iSQLType
49188>>>>>//        Move "LONG VARCHAR"     to ColumnType[i].sSQLType
49188>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49188>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
49188>>>>>//        Move "32000"            to ColumnType[i].sPrecision
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_LONGVARCHARBIT to ColumnType[i].iSQLType
49188>>>>>//        Move "LONG VARCHAR BIT" to ColumnType[i].sSQLType
49188>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49188>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
49188>>>>>//        Move "32000"            to ColumnType[i].sPrecision
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_LONGVARGRAPHIC to ColumnType[i].iSQLType
49188>>>>>//        Move "LONG VARGRAPHIC"  to ColumnType[i].sSQLType
49188>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49188>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
49188>>>>>//        Move "32000"            to ColumnType[i].sPrecision
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_NUMERIC        to ColumnType[i].iSQLType
49188>>>>>//        Move "NUMERIC"          to ColumnType[i].sSQLType
49188>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49188>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49188>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_REAL           to ColumnType[i].iSQLType
49188>>>>>//        Move "REAL"             to ColumnType[i].sSQLType
49188>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49188>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49188>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_SMALLINT       to ColumnType[i].iSQLType
49188>>>>>//        Move "SMALLINT"         to ColumnType[i].sSQLType
49188>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49188>>>>>//        Move "NUMERIC"          to ColumnType[i].sDataFlexType
49188>>>>>//        Move "5.0"              to ColumnType[i].sPrecision
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_TIME           to ColumnType[i].iSQLType
49188>>>>>//        Move "TIME"             to ColumnType[i].sSQLType
49188>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49188>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49188>>>>>//        Move "19.0"             to ColumnType[i].sPrecision
49188>>>>>//        Move True               to ColumnType[i].bCanEditSize
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_TIMESTAMP      to ColumnType[i].iSQLType
49188>>>>>//        Move "TIMESTAMP"        to ColumnType[i].sSQLType
49188>>>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
49188>>>>>//        Move "DATETIME"         to ColumnType[i].sDataFlexType
49188>>>>>//        Move "23.6"             to ColumnType[i].sPrecision
49188>>>>>//        Move True               to ColumnType[i].bCanEditSize
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_VARCHAR        to ColumnType[i].iSQLType
49188>>>>>//        Move "VARCHAR"          to ColumnType[i].sSQLType
49188>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49188>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
49188>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        // ToDo: We need to change the sType when using this!
49188>>>>>//        Move SQL_VARCHARBIT         to ColumnType[i].iSQLType
49188>>>>>//        Move "VARCHAR FOR BIT DATA" to ColumnType[i].sSQLType
49188>>>>>//        Move DF_TEXT                to ColumnType[i].iDataFlexType
49188>>>>>//        Move "TEXT"                 to ColumnType[i].sDataFlexType
49188>>>>>//        Move "16384"                to ColumnType[i].sPrecision
49188>>>>>//        Increment i
49188>>>>>//
49188>>>>>//        Move SQL_VARGRAPHIC     to ColumnType[i].iSQLType
49188>>>>>//        Move "VARGRAPHIC"       to ColumnType[i].sSQLType
49188>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49188>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
49188>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49188>>>>>//
49188>>>>>//        Move SQL_XML            to ColumnType[i].iSQLType
49188>>>>>//        Move "XML"              to ColumnType[i].sSQLType
49188>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49188>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
49188>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49188>>>>>
49188>>>>>        Function_Return aColumnType
49189>>>>>    End_Function
49190>>>>>
49190>>>>>    // Microsoft SQL Server Database Data Types:
49190>>>>>    // Helper function for _UtilEnumerateColumnTypes
49190>>>>>    Function _UtilEnumerateMSSQLTypes String sDriverID Returns tColumnType[]
49192>>>>>        tColumnType[] aColumnType
49192>>>>>        tColumnType[] aColumnType
49193>>>>>        Integer i
49193>>>>>
49193>>>>>        If (sDriverID = MSSQLDRV_ID) Begin
Including file: MSSQLDRV_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\MSSQLDRV_DriverDef.inc)
49195>>>>>>// Generated By The Database Update Framework
49195>>>>>>// Driver XML File: C:\Program Files\DataFlex 20.0\Lib\MSSQLDRV_DriverDef.xml
49195>>>>>>// Driver COLUMN DATA TYPES
49195>>>>>>//
49195>>>>>>// Created: 2019-11-15 21:57:51.001
49195>>>>>>
49195>>>>>>            Move "bigint"                                to aColumnType[i].sSQLType
49196>>>>>>            Move -5                                      to aColumnType[i].iSQLType
49197>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49198>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49199>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49200>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49201>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49202>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49203>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49204>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49205>>>>>>            Increment i
49206>>>>>>
49206>>>>>>            Move "binary"                                to aColumnType[i].sSQLType
49207>>>>>>            Move -2                                      to aColumnType[i].iSQLType
49208>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49209>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49210>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49211>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49212>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
49213>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49214>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49215>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
49216>>>>>>            Increment i
49217>>>>>>
49217>>>>>>            Move "bit"                                   to aColumnType[i].sSQLType
49218>>>>>>            Move -7                                      to aColumnType[i].iSQLType
49219>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49220>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49221>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
49222>>>>>>            Move 0                                       to aColumnType[i].iMinSize
49223>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
49224>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49225>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49226>>>>>>            Move 1                                       to aColumnType[i].sPrecision
49227>>>>>>            Increment i
49228>>>>>>
49228>>>>>>            Move "char"                                  to aColumnType[i].sSQLType
49229>>>>>>            Move 1                                       to aColumnType[i].iSQLType
49230>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49231>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49232>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49233>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49234>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
49235>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49236>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49237>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
49238>>>>>>            Increment i
49239>>>>>>
49239>>>>>>            Move "date"                                  to aColumnType[i].sSQLType
49240>>>>>>            Move 91                                      to aColumnType[i].iSQLType
49241>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49242>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49243>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
49244>>>>>>            Move 0                                       to aColumnType[i].iMinSize
49245>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
49246>>>>>>            Move "DF_DATE"                               to aColumnType[i].sDataFlexType
49247>>>>>>            Move DF_DATE                                 to aColumnType[i].iDataFlexType
49248>>>>>>            Move 6                                       to aColumnType[i].sPrecision
49249>>>>>>            Increment i
49250>>>>>>
49250>>>>>>            Move "datetime"                              to aColumnType[i].sSQLType
49251>>>>>>            Move 93                                      to aColumnType[i].iSQLType
49252>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49253>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49254>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49255>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49256>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49257>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49258>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49259>>>>>>            Move 23                                      to aColumnType[i].sPrecision
49260>>>>>>            Increment i
49261>>>>>>
49261>>>>>>            Move "datetime2"                             to aColumnType[i].sSQLType
49262>>>>>>            Move -200                                    to aColumnType[i].iSQLType
49263>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49264>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49265>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
49266>>>>>>            Move 23                                      to aColumnType[i].iMinSize
49267>>>>>>            Move 23                                      to aColumnType[i].nMaxSize
49268>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49269>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49270>>>>>>            Move 23                                      to aColumnType[i].sPrecision
49271>>>>>>            Increment i
49272>>>>>>
49272>>>>>>            Move "datetimeoffset"                        to aColumnType[i].sSQLType
49273>>>>>>            Move -155                                    to aColumnType[i].iSQLType
49274>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49275>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49276>>>>>>            Move 34                                      to aColumnType[i].iDefaultSize
49277>>>>>>            Move 34                                      to aColumnType[i].iMinSize
49278>>>>>>            Move 34                                      to aColumnType[i].nMaxSize
49279>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49280>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49281>>>>>>            Move 34                                      to aColumnType[i].sPrecision
49282>>>>>>            Increment i
49283>>>>>>
49283>>>>>>            Move "decimal"                               to aColumnType[i].sSQLType
49284>>>>>>            Move 3                                       to aColumnType[i].iSQLType
49285>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49286>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49287>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49288>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49289>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49290>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49291>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49292>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49293>>>>>>            Increment i
49294>>>>>>
49294>>>>>>            Move "float"                                 to aColumnType[i].sSQLType
49295>>>>>>            Move 6                                       to aColumnType[i].iSQLType
49296>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49297>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49298>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49299>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49300>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49301>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49302>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49303>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49304>>>>>>            Increment i
49305>>>>>>
49305>>>>>>            Move "image"                                 to aColumnType[i].sSQLType
49306>>>>>>            Move -4                                      to aColumnType[i].iSQLType
49307>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49308>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49309>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49310>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49311>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49312>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49313>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49314>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49315>>>>>>            Increment i
49316>>>>>>
49316>>>>>>            Move "int"                                   to aColumnType[i].sSQLType
49317>>>>>>            Move 4                                       to aColumnType[i].iSQLType
49318>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49319>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49320>>>>>>            Move 10                                      to aColumnType[i].iDefaultSize
49321>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49322>>>>>>            Move 10                                      to aColumnType[i].nMaxSize
49323>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49324>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49325>>>>>>            Move 10                                      to aColumnType[i].sPrecision
49326>>>>>>            Increment i
49327>>>>>>
49327>>>>>>            Move "money"                                 to aColumnType[i].sSQLType
49328>>>>>>            Move -204                                    to aColumnType[i].iSQLType
49329>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49330>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49331>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
49332>>>>>>            Move 0                                       to aColumnType[i].iMinSize
49333>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
49334>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49335>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49336>>>>>>            Move 1                                       to aColumnType[i].sPrecision
49337>>>>>>            Increment i
49338>>>>>>
49338>>>>>>            Move "nchar"                                 to aColumnType[i].sSQLType
49339>>>>>>            Move -8                                      to aColumnType[i].iSQLType
49340>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49341>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49342>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49343>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49344>>>>>>            Move 4000                                    to aColumnType[i].nMaxSize
49345>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49346>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49347>>>>>>            Move 4000                                    to aColumnType[i].sPrecision
49348>>>>>>            Increment i
49349>>>>>>
49349>>>>>>            Move "ntext"                                 to aColumnType[i].sSQLType
49350>>>>>>            Move -10                                     to aColumnType[i].iSQLType
49351>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49352>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49353>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49354>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49355>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49356>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49357>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49358>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49359>>>>>>            Increment i
49360>>>>>>
49360>>>>>>            Move "numeric"                               to aColumnType[i].sSQLType
49361>>>>>>            Move 2                                       to aColumnType[i].iSQLType
49362>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49363>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49364>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49365>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49366>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49367>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49368>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49369>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49370>>>>>>            Increment i
49371>>>>>>
49371>>>>>>            Move "nvarchar"                              to aColumnType[i].sSQLType
49372>>>>>>            Move -9                                      to aColumnType[i].iSQLType
49373>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49374>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49375>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49376>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49377>>>>>>            Move 4000                                    to aColumnType[i].nMaxSize
49378>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49379>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49380>>>>>>            Move 4000                                    to aColumnType[i].sPrecision
49381>>>>>>            Increment i
49382>>>>>>
49382>>>>>>            Move "nvarchar(max)"                         to aColumnType[i].sSQLType
49383>>>>>>            Move -202                                    to aColumnType[i].iSQLType
49384>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49385>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49386>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49387>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49388>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49389>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49390>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49391>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49392>>>>>>            Increment i
49393>>>>>>
49393>>>>>>            Move "real"                                  to aColumnType[i].sSQLType
49394>>>>>>            Move 7                                       to aColumnType[i].iSQLType
49395>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49396>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49397>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49398>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49399>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49400>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49401>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49402>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49403>>>>>>            Increment i
49404>>>>>>
49404>>>>>>            Move "smalldatetime"                         to aColumnType[i].sSQLType
49405>>>>>>            Move -206                                    to aColumnType[i].iSQLType
49406>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49407>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49408>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
49409>>>>>>            Move 0                                       to aColumnType[i].iMinSize
49410>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
49411>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49412>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49413>>>>>>            Move 1                                       to aColumnType[i].sPrecision
49414>>>>>>            Increment i
49415>>>>>>
49415>>>>>>            Move "smallint"                              to aColumnType[i].sSQLType
49416>>>>>>            Move 5                                       to aColumnType[i].iSQLType
49417>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49418>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49419>>>>>>            Move 5                                       to aColumnType[i].iDefaultSize
49420>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49421>>>>>>            Move 5                                       to aColumnType[i].nMaxSize
49422>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49423>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49424>>>>>>            Move 5                                       to aColumnType[i].sPrecision
49425>>>>>>            Increment i
49426>>>>>>
49426>>>>>>            Move "smallmoney"                            to aColumnType[i].sSQLType
49427>>>>>>            Move -205                                    to aColumnType[i].iSQLType
49428>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49429>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49430>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
49431>>>>>>            Move 0                                       to aColumnType[i].iMinSize
49432>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
49433>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49434>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49435>>>>>>            Move 1                                       to aColumnType[i].sPrecision
49436>>>>>>            Increment i
49437>>>>>>
49437>>>>>>            Move "text"                                  to aColumnType[i].sSQLType
49438>>>>>>            Move -1                                      to aColumnType[i].iSQLType
49439>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49440>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49441>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49442>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49443>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49444>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49445>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49446>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49447>>>>>>            Increment i
49448>>>>>>
49448>>>>>>            Move "time"                                  to aColumnType[i].sSQLType
49449>>>>>>            Move -154                                    to aColumnType[i].iSQLType
49450>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49451>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49452>>>>>>            Move 10                                      to aColumnType[i].iDefaultSize
49453>>>>>>            Move 10                                      to aColumnType[i].iMinSize
49454>>>>>>            Move 19                                      to aColumnType[i].nMaxSize
49455>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49456>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49457>>>>>>            Move 19                                      to aColumnType[i].sPrecision
49458>>>>>>            Increment i
49459>>>>>>
49459>>>>>>            Move "tinyint"                               to aColumnType[i].sSQLType
49460>>>>>>            Move -6                                      to aColumnType[i].iSQLType
49461>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49462>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49463>>>>>>            Move 3                                       to aColumnType[i].iDefaultSize
49464>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49465>>>>>>            Move 3                                       to aColumnType[i].nMaxSize
49466>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49467>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49468>>>>>>            Move 3                                       to aColumnType[i].sPrecision
49469>>>>>>            Increment i
49470>>>>>>
49470>>>>>>            Move "uniqueidentifier"                      to aColumnType[i].sSQLType
49471>>>>>>            Move -11                                     to aColumnType[i].iSQLType
49472>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49473>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49474>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
49475>>>>>>            Move 0                                       to aColumnType[i].iMinSize
49476>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
49477>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49478>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49479>>>>>>            Move 1                                       to aColumnType[i].sPrecision
49480>>>>>>            Increment i
49481>>>>>>
49481>>>>>>            Move "varbinary"                             to aColumnType[i].sSQLType
49482>>>>>>            Move -3                                      to aColumnType[i].iSQLType
49483>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49484>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49485>>>>>>            Move 8000                                    to aColumnType[i].iDefaultSize
49486>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49487>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
49488>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49489>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49490>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
49491>>>>>>            Increment i
49492>>>>>>
49492>>>>>>            Move "varbinary(max)"                        to aColumnType[i].sSQLType
49493>>>>>>            Move -203                                    to aColumnType[i].iSQLType
49494>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49495>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49496>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49497>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49498>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49499>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49500>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49501>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49502>>>>>>            Increment i
49503>>>>>>
49503>>>>>>            Move "varchar"                               to aColumnType[i].sSQLType
49504>>>>>>            Move 12                                      to aColumnType[i].iSQLType
49505>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49506>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49507>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49508>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49509>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
49510>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49511>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49512>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
49513>>>>>>            Increment i
49514>>>>>>
49514>>>>>>            Move "varchar(max)"                          to aColumnType[i].sSQLType
49515>>>>>>            Move -201                                    to aColumnType[i].iSQLType
49516>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49517>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49518>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49519>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49520>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49521>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49522>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49523>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49524>>>>>>            Increment i
49525>>>>>>
49525>>>>>>            Move "xml"                                   to aColumnType[i].sSQLType
49526>>>>>>            Move -152                                    to aColumnType[i].iSQLType
49527>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49528>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49529>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49530>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49531>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49532>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49533>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49534>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49535>>>>>>            Increment i
49536>>>>>>
49536>>>>>>
49536>>>>>
49536>>>>>//            Move SQL_BIGINT         to ColumnType[i].iSQLType
49536>>>>>//            Move "bigint"           to ColumnType[i].sSQLType
49536>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49536>>>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
49536>>>>>//            Move "14.0"             to ColumnType[i].sPrecision
49536>>>>>//            Move True               to ColumnType[i].bCanEditSize
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_BINARY         to ColumnType[i].iSQLType
49536>>>>>//            Move "binary"           to ColumnType[i].sSQLType
49536>>>>>//            Move DF_BINARY          to ColumnType[i].iDataFlexType
49536>>>>>//            Move "Binary"           to ColumnType[i].sDataFlexType
49536>>>>>//            Move "8000"             to ColumnType[i].sPrecision
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_BIT            to ColumnType[i].iSQLType
49536>>>>>//            Move "bit"              to ColumnType[i].sSQLType
49536>>>>>//            Move DF_ASCII           to ColumnType[i].iDataFlexType
49536>>>>>//            Move "ASCII"            to ColumnType[i].sDataFlexType
49536>>>>>//            Move "1.0"              to ColumnType[i].sPrecision // In SQL allows "1, 0, or NULL"
49536>>>>>//            Move True               to ColumnType[i].bCanEditSize
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_CHAR           to ColumnType[i].iSQLType
49536>>>>>//            Move "char"             to ColumnType[i].sSQLType
49536>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49536>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49536>>>>>//            Move "8000"             to ColumnType[i].sPrecision
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_DATE           to ColumnType[i].iSQLType
49536>>>>>//            Move "date"             to ColumnType[i].sSQLType
49536>>>>>//            Move DF_DATE            to ColumnType[i].iDataFlexType
49536>>>>>//            Move "Date"             to ColumnType[i].sDataFlexType
49536>>>>>//            Move "6.0"              to ColumnType[i].sPrecision
49536>>>>>//            Move True               to ColumnType[i].bCanEditSize
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_DATETIME       to ColumnType[i].iSQLType
49536>>>>>//            Move "datetime"         to ColumnType[i].sSQLType
49536>>>>>//            Move DF_DATETIME        to ColumnType[i].iDataFlexType
49536>>>>>//            Move "DateTime"         to ColumnType[i].sDataFlexType
49536>>>>>//            Move "23.3"             to ColumnType[i].sPrecision
49536>>>>>//            Move True               to ColumnType[i].bCanEditSize
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_TYPE_TIMESTAMP2 to ColumnType[i].iSQLType
49536>>>>>//            Move "datetime2"         to ColumnType[i].sSQLType
49536>>>>>//            Move DF_DATETIME         to ColumnType[i].iDataFlexType
49536>>>>>//            Move "DateTime"          to ColumnType[i].sDataFlexType
49536>>>>>//            Move "23.6"              to ColumnType[i].sPrecision
49536>>>>>//            Move True                to ColumnType[i].bCanEditSize
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_SS_TIMESTAMPOFFSET to ColumnType[i].iSQLType
49536>>>>>//            Move "datetimeoffset"       to ColumnType[i].sSQLType
49536>>>>>//            Move DF_DATETIME            to ColumnType[i].iDataFlexType
49536>>>>>//            Move "DateTime"             to ColumnType[i].sDataFlexType
49536>>>>>//            Move "34.0"                 to ColumnType[i].sPrecision
49536>>>>>//            Move True                   to ColumnType[i].bCanEditSize
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_DECIMAL        to ColumnType[i].iSQLType
49536>>>>>//            Move "decimal"          to ColumnType[i].sSQLType
49536>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49536>>>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
49536>>>>>//            Move "14.8"             to ColumnType[i].sPrecision
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_FLOAT          to ColumnType[i].iSQLType
49536>>>>>//            Move "float"            to ColumnType[i].sSQLType
49536>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49536>>>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
49536>>>>>//            Move "14.8"             to ColumnType[i].sPrecision
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_INTEGER        to ColumnType[i].iSQLType
49536>>>>>//            Move "int"              to ColumnType[i].sSQLType
49536>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49536>>>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
49536>>>>>//            Move "8.0"              to ColumnType[i].sPrecision
49536>>>>>//            Move True               to ColumnType[i].bCanEditSize
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_TYPE_MONEY     to ColumnType[i].iSQLType
49536>>>>>//            Move "money"            to ColumnType[i].sSQLType
49536>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49536>>>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
49536>>>>>//            Move "15.4"             to ColumnType[i].sPrecision // Studio 18.0 (!)
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_WCHAR          to ColumnType[i].iSQLType
49536>>>>>//            Move "nchar"            to ColumnType[i].sSQLType
49536>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49536>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49536>>>>>//            Move "4000"             to ColumnType[i].sPrecision
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_WLONGVARCHAR   to ColumnType[i].iSQLType
49536>>>>>//            Move "ntext"            to ColumnType[i].sSQLType
49536>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49536>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49536>>>>>//            Move "16384"            to ColumnType[i].sPrecision
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_NUMERIC        to ColumnType[i].iSQLType
49536>>>>>//            Move "numeric"          to ColumnType[i].sSQLType
49536>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49536>>>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
49536>>>>>//            Move "14.8"             to ColumnType[i].sPrecision
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_WVARCHAR       to ColumnType[i].iSQLType
49536>>>>>//            Move "nvarchar"         to ColumnType[i].sSQLType
49536>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49536>>>>>//            Move "Text"             to ColumnType[i].sDataFlexType
49536>>>>>//            Move "4000"             to ColumnType[i].sPrecision
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_VARCHARMAX     to ColumnType[i].iSQLType
49536>>>>>//            Move "nvarchar(max)"    to ColumnType[i].sSQLType
49536>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49536>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49536>>>>>//            Move "16384"            to ColumnType[i].sPrecision
49536>>>>>//            Move True               to ColumnType[i].bCanEditSize
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_REAL           to ColumnType[i].iSQLType
49536>>>>>//            Move "real"             to ColumnType[i].sSQLType
49536>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49536>>>>>//            Move "NUMERIC"          to ColumnType[i].sDataFlexType
49536>>>>>//            Move "14.8"             to ColumnType[i].sPrecision
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_TYPE_SMALLDATETIME to ColumnType[i].iSQLType
49536>>>>>//            Move "smalldatetime"        to ColumnType[i].sSQLType
49536>>>>>//            Move DF_DATETIME            to ColumnType[i].iDataFlexType
49536>>>>>//            Move "DATETIME"             to ColumnType[i].sDataFlexType
49536>>>>>//            Move "23.0"                 to ColumnType[i].sPrecision
49536>>>>>//            Move True                   to ColumnType[i].bCanEditSize
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_SMALLINT       to ColumnType[i].iSQLType
49536>>>>>//            Move "smallint"         to ColumnType[i].sSQLType
49536>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49536>>>>>//            Move "NUMERIC"          to ColumnType[i].sDataFlexType
49536>>>>>//            Move "4.0"              to ColumnType[i].sPrecision
49536>>>>>//            Move True               to ColumnType[i].bCanEditSize
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_TYPE_SMALLMONEY to ColumnType[i].iSQLType
49536>>>>>//            Move "smallmoney"        to ColumnType[i].sSQLType
49536>>>>>//            Move DF_BCD              to ColumnType[i].iDataFlexType
49536>>>>>//            Move "NUMERIC"           to ColumnType[i].sDataFlexType
49536>>>>>//            Move "10.0"              to ColumnType[i].sPrecision
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_TEXT           to ColumnType[i].iSQLType
49536>>>>>//            Move "text"             to ColumnType[i].sSQLType
49536>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49536>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49536>>>>>//            Move "8000"             to ColumnType[i].sPrecision
49536>>>>>//            Move True               to ColumnType[i].bCanEditSize
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_TIME           to ColumnType[i].iSQLType
49536>>>>>//            Move "time"             to ColumnType[i].sSQLType
49536>>>>>//            Move DF_ASCII           to ColumnType[i].iDataFlexType
49536>>>>>//            Move "ASCII"            to ColumnType[i].sDataFlexType
49536>>>>>//            Move "19.0"             to ColumnType[i].sPrecision
49536>>>>>//            Move True               to ColumnType[i].bCanEditSize
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_TINYINT        to ColumnType[i].iSQLType
49536>>>>>//            Move "tinyint"          to ColumnType[i].sSQLType
49536>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49536>>>>>//            Move "NUMERIC"          to ColumnType[i].sDataFlexType
49536>>>>>//            Move "2.0"              to ColumnType[i].sPrecision
49536>>>>>//            Move True               to ColumnType[i].bCanEditSize
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_GUID           to ColumnType[i].iSQLType
49536>>>>>//            Move "uniqueidentifier" to ColumnType[i].sSQLType
49536>>>>>//            Move DF_ASCII           to ColumnType[i].iDataFlexType
49536>>>>>//            Move "ASCII"            to ColumnType[i].sDataFlexType
49536>>>>>//            Move "36"               to ColumnType[i].sPrecision
49536>>>>>//            Move True               to ColumnType[i].bCanEditSize
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_VARBINARY      to ColumnType[i].iSQLType
49536>>>>>//            Move "varbinary"        to ColumnType[i].sSQLType
49536>>>>>//            Move DF_BINARY          to ColumnType[i].iDataFlexType
49536>>>>>//            Move "BINARY"           to ColumnType[i].sDataFlexType
49536>>>>>//            Move "16384"            to ColumnType[i].sPrecision
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_LONGVARBINARY  to ColumnType[i].iSQLType
49536>>>>>//            Move "varbinary(max)"   to ColumnType[i].sSQLType
49536>>>>>//            Move DF_BINARY          to ColumnType[i].iDataFlexType
49536>>>>>//            Move "BINARY"           to ColumnType[i].sDataFlexType
49536>>>>>//            Move "16384"            to ColumnType[i].sPrecision
49536>>>>>//            Move True               to ColumnType[i].bCanEditSize
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_VARCHAR        to ColumnType[i].iSQLType
49536>>>>>//            Move "varchar"          to ColumnType[i].sSQLType
49536>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType // ToDo: Under 255 = ASCII type! How to deal with this?
49536>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49536>>>>>//            Move "8000"             to ColumnType[i].sPrecision
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_LONGVARCHAR    to ColumnType[i].iSQLType
49536>>>>>//            Move "varchar(max)"     to ColumnType[i].sSQLType
49536>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49536>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49536>>>>>//            Move "16384"            to ColumnType[i].sPrecision
49536>>>>>//            Move True               to ColumnType[i].bCanEditSize
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_SS_XML         to ColumnType[i].iSQLType
49536>>>>>//            Move "xml"              to ColumnType[i].sSQLType
49536>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49536>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49536>>>>>//            Move "16384"            to ColumnType[i].sPrecision
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_TYPE_DATE      to ColumnType[i].iSQLType
49536>>>>>//            Move "DATE"             to ColumnType[i].sSQLType
49536>>>>>//            Move DF_DATE            to ColumnType[i].iDataFlexType
49536>>>>>//            Move "date"             to ColumnType[i].sDataFlexType
49536>>>>>//            Move "6.0"              to ColumnType[i].sPrecision
49536>>>>>//            Move True               to ColumnType[i].bCanEditSize
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_TYPE_TIME      to ColumnType[i].iSQLType
49536>>>>>//            Move "time"             to ColumnType[i].sSQLType
49536>>>>>//            Move DF_ASCII           to ColumnType[i].iDataFlexType
49536>>>>>//            Move "ASCII"            to ColumnType[i].sDataFlexType
49536>>>>>//            Move "8.7"              to ColumnType[i].sPrecision
49536>>>>>//            Move True               to ColumnType[i].bCanEditSize
49536>>>>>//            Increment i
49536>>>>>//
49536>>>>>//            Move SQL_TYPE_TIMESTAMP to ColumnType[i].iSQLType
49536>>>>>//            Move "datetime"         to ColumnType[i].sSQLType
49536>>>>>//            Move DF_DATETIME        to ColumnType[i].iDataFlexType
49536>>>>>//            Move "DateTime"         to ColumnType[i].sDataFlexType
49536>>>>>//            Move "23.6"             to ColumnType[i].sPrecision
49536>>>>>//            Move True               to ColumnType[i].bCanEditSize
49536>>>>>//            Increment i
49536>>>>>
49536>>>>>        End
49536>>>>>>
49536>>>>>
49536>>>>>        Function_Return aColumnType
49537>>>>>    End_Function
49538>>>>>
49538>>>>>    // MySQL Data Types
49538>>>>>    Function _UtilEnumerateMySQLTypes Returns tColumnType[]
49540>>>>>        tColumnType[] aColumnType
49540>>>>>        tColumnType[] aColumnType
49541>>>>>        Integer i
49541>>>>>
Including file: mdsmysql_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\mdsmysql_DriverDef.inc)
49541>>>>>>// Generated By The Database Update Framework
49541>>>>>>// Driver XML File: C:\Program Files (x86)\DataFlex 19.0\Bin\mdsmysql_DriverDef.xml
49541>>>>>>// Driver COLUMN DATA TYPES
49541>>>>>>//
49541>>>>>>// Created: 2018-03-14 23:46:49.593
49541>>>>>>
49541>>>>>>            Move "bigint"                                to aColumnType[i].sSQLType
49542>>>>>>            Move 8                                       to aColumnType[i].iSQLType
49543>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49544>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49545>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49546>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49547>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49548>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49549>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49550>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49551>>>>>>            Increment i
49552>>>>>>
49552>>>>>>            Move "bit"                                   to aColumnType[i].sSQLType
49553>>>>>>            Move 16                                      to aColumnType[i].iSQLType
49554>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49555>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49556>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49557>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49558>>>>>>            Move 64                                      to aColumnType[i].nMaxSize
49559>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49560>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49561>>>>>>            Move 64                                      to aColumnType[i].sPrecision
49562>>>>>>            Increment i
49563>>>>>>
49563>>>>>>            Move "blob"                                  to aColumnType[i].sSQLType
49564>>>>>>            Move 252                                     to aColumnType[i].iSQLType
49565>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49566>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49567>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49568>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49569>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49570>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49571>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49572>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49573>>>>>>            Increment i
49574>>>>>>
49574>>>>>>            Move "char"                                  to aColumnType[i].sSQLType
49575>>>>>>            Move 254                                     to aColumnType[i].iSQLType
49576>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49577>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49578>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49579>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49580>>>>>>            Move 255                                     to aColumnType[i].nMaxSize
49581>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49582>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49583>>>>>>            Move 255                                     to aColumnType[i].sPrecision
49584>>>>>>            Increment i
49585>>>>>>
49585>>>>>>            Move "date"                                  to aColumnType[i].sSQLType
49586>>>>>>            Move 10                                      to aColumnType[i].iSQLType
49587>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49588>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49589>>>>>>            Move 6                                       to aColumnType[i].iDefaultSize
49590>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49591>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49592>>>>>>            Move "DF_DATE"                               to aColumnType[i].sDataFlexType
49593>>>>>>            Move DF_DATE                                 to aColumnType[i].iDataFlexType
49594>>>>>>            Move 6                                       to aColumnType[i].sPrecision
49595>>>>>>            Increment i
49596>>>>>>
49596>>>>>>            Move "datetime"                              to aColumnType[i].sSQLType
49597>>>>>>            Move 12                                      to aColumnType[i].iSQLType
49598>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49599>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49600>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
49601>>>>>>            Move 6                                       to aColumnType[i].iMinSize
49602>>>>>>            Move 23                                      to aColumnType[i].nMaxSize
49603>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49604>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49605>>>>>>            Move 23                                      to aColumnType[i].sPrecision
49606>>>>>>            Increment i
49607>>>>>>
49607>>>>>>            Move "decimal"                               to aColumnType[i].sSQLType
49608>>>>>>            Move 246                                     to aColumnType[i].iSQLType
49609>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49610>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49611>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49612>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49613>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49614>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49615>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49616>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49617>>>>>>            Increment i
49618>>>>>>
49618>>>>>>            Move "decimal-MySQL4"                        to aColumnType[i].sSQLType
49619>>>>>>            Move 0                                       to aColumnType[i].iSQLType
49620>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49621>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49622>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49623>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49624>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49625>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49626>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49627>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49628>>>>>>            Increment i
49629>>>>>>
49629>>>>>>            Move "double"                                to aColumnType[i].sSQLType
49630>>>>>>            Move 5                                       to aColumnType[i].iSQLType
49631>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49632>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49633>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49634>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49635>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49636>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49637>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49638>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49639>>>>>>            Increment i
49640>>>>>>
49640>>>>>>            Move "enum"                                  to aColumnType[i].sSQLType
49641>>>>>>            Move 247                                     to aColumnType[i].iSQLType
49642>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49643>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49644>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49645>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49646>>>>>>            Move 255                                     to aColumnType[i].nMaxSize
49647>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49648>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49649>>>>>>            Move 255                                     to aColumnType[i].sPrecision
49650>>>>>>            Increment i
49651>>>>>>
49651>>>>>>            Move "float"                                 to aColumnType[i].sSQLType
49652>>>>>>            Move 4                                       to aColumnType[i].iSQLType
49653>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49654>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49655>>>>>>            Move 4                                       to aColumnType[i].iDefaultSize
49656>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49657>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49658>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49659>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49660>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49661>>>>>>            Increment i
49662>>>>>>
49662>>>>>>            Move "int"                                   to aColumnType[i].sSQLType
49663>>>>>>            Move 3                                       to aColumnType[i].iSQLType
49664>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49665>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49666>>>>>>            Move 10                                      to aColumnType[i].iDefaultSize
49667>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49668>>>>>>            Move 11                                      to aColumnType[i].nMaxSize
49669>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49670>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49671>>>>>>            Move 11                                      to aColumnType[i].sPrecision
49672>>>>>>            Increment i
49673>>>>>>
49673>>>>>>            Move "longblob"                              to aColumnType[i].sSQLType
49674>>>>>>            Move 251                                     to aColumnType[i].iSQLType
49675>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49676>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49677>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49678>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49679>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49680>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49681>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49682>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49683>>>>>>            Increment i
49684>>>>>>
49684>>>>>>            Move "longtext"                              to aColumnType[i].sSQLType
49685>>>>>>            Move -251                                    to aColumnType[i].iSQLType
49686>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49687>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49688>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49689>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49690>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49691>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49692>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49693>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49694>>>>>>            Increment i
49695>>>>>>
49695>>>>>>            Move "mediumblob"                            to aColumnType[i].sSQLType
49696>>>>>>            Move 250                                     to aColumnType[i].iSQLType
49697>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49698>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49699>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49700>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49701>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49702>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49703>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49704>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49705>>>>>>            Increment i
49706>>>>>>
49706>>>>>>            Move "mediumint"                             to aColumnType[i].sSQLType
49707>>>>>>            Move 9                                       to aColumnType[i].iSQLType
49708>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49709>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49710>>>>>>            Move 8                                       to aColumnType[i].iDefaultSize
49711>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49712>>>>>>            Move 9                                       to aColumnType[i].nMaxSize
49713>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49714>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49715>>>>>>            Move 9                                       to aColumnType[i].sPrecision
49716>>>>>>            Increment i
49717>>>>>>
49717>>>>>>            Move "mediumtext"                            to aColumnType[i].sSQLType
49718>>>>>>            Move -250                                    to aColumnType[i].iSQLType
49719>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49720>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49721>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49722>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49723>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49724>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49725>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49726>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49727>>>>>>            Increment i
49728>>>>>>
49728>>>>>>            Move "set"                                   to aColumnType[i].sSQLType
49729>>>>>>            Move 248                                     to aColumnType[i].iSQLType
49730>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49731>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49732>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49733>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49734>>>>>>            Move 255                                     to aColumnType[i].nMaxSize
49735>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49736>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49737>>>>>>            Move 255                                     to aColumnType[i].sPrecision
49738>>>>>>            Increment i
49739>>>>>>
49739>>>>>>            Move "smallint"                              to aColumnType[i].sSQLType
49740>>>>>>            Move 2                                       to aColumnType[i].iSQLType
49741>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49742>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49743>>>>>>            Move 5                                       to aColumnType[i].iDefaultSize
49744>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49745>>>>>>            Move 6                                       to aColumnType[i].nMaxSize
49746>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49747>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49748>>>>>>            Move 6                                       to aColumnType[i].sPrecision
49749>>>>>>            Increment i
49750>>>>>>
49750>>>>>>            Move "text"                                  to aColumnType[i].sSQLType
49751>>>>>>            Move -252                                    to aColumnType[i].iSQLType
49752>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49753>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49754>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49755>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49756>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49757>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49758>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49759>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49760>>>>>>            Increment i
49761>>>>>>
49761>>>>>>            Move "time"                                  to aColumnType[i].sSQLType
49762>>>>>>            Move 11                                      to aColumnType[i].iSQLType
49763>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49764>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49765>>>>>>            Move 10                                      to aColumnType[i].iDefaultSize
49766>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49767>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49768>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49769>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49770>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49771>>>>>>            Increment i
49772>>>>>>
49772>>>>>>            Move "timestamp"                             to aColumnType[i].sSQLType
49773>>>>>>            Move 7                                       to aColumnType[i].iSQLType
49774>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49775>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49776>>>>>>            Move 6                                       to aColumnType[i].iDefaultSize
49777>>>>>>            Move 6                                       to aColumnType[i].iMinSize
49778>>>>>>            Move 23                                      to aColumnType[i].nMaxSize
49779>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49780>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49781>>>>>>            Move 23                                      to aColumnType[i].sPrecision
49782>>>>>>            Increment i
49783>>>>>>
49783>>>>>>            Move "tinyblob"                              to aColumnType[i].sSQLType
49784>>>>>>            Move 249                                     to aColumnType[i].iSQLType
49785>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49786>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49787>>>>>>            Move 255                                     to aColumnType[i].iDefaultSize
49788>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49789>>>>>>            Move 255                                     to aColumnType[i].nMaxSize
49790>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49791>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49792>>>>>>            Move 255                                     to aColumnType[i].sPrecision
49793>>>>>>            Increment i
49794>>>>>>
49794>>>>>>            Move "tinyint"                               to aColumnType[i].sSQLType
49795>>>>>>            Move 1                                       to aColumnType[i].iSQLType
49796>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49797>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49798>>>>>>            Move 4                                       to aColumnType[i].iDefaultSize
49799>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49800>>>>>>            Move 4                                       to aColumnType[i].nMaxSize
49801>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49802>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49803>>>>>>            Move 4                                       to aColumnType[i].sPrecision
49804>>>>>>            Increment i
49805>>>>>>
49805>>>>>>            Move "tinytext"                              to aColumnType[i].sSQLType
49806>>>>>>            Move -249                                    to aColumnType[i].iSQLType
49807>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49808>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49809>>>>>>            Move 255                                     to aColumnType[i].iDefaultSize
49810>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49811>>>>>>            Move 255                                     to aColumnType[i].nMaxSize
49812>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49813>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49814>>>>>>            Move 255                                     to aColumnType[i].sPrecision
49815>>>>>>            Increment i
49816>>>>>>
49816>>>>>>            Move "varchar"                               to aColumnType[i].sSQLType
49817>>>>>>            Move 253                                     to aColumnType[i].iSQLType
49818>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49819>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49820>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49821>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49822>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49823>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49824>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49825>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49826>>>>>>            Increment i
49827>>>>>>
49827>>>>>>            Move "year"                                  to aColumnType[i].sSQLType
49828>>>>>>            Move 13                                      to aColumnType[i].iSQLType
49829>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49830>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49831>>>>>>            Move 4                                       to aColumnType[i].iDefaultSize
49832>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49833>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49834>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49835>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49836>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49837>>>>>>            Increment i
49838>>>>>>
49838>>>>>>
49838>>>>>
49838>>>>>//        Move eMySQL_LONGLONG    to ColumnType[i].iSQLType
49838>>>>>//        Move "bigint"           to ColumnType[i].sSQLType
49838>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49838>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49838>>>>>//        Move "14.0"             to ColumnType[i].sPrecision
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_BIT         to ColumnType[i].iSQLType
49838>>>>>//        Move "bit"              to ColumnType[i].sSQLType
49838>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49838>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49838>>>>>//        Move "4.0"              to ColumnType[i].sPrecision // In SQL allows "1, 0, or NULL"
49838>>>>>//        Move True               to ColumnType[i].bCanEditSize
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_BLOB        to ColumnType[i].iSQLType
49838>>>>>//        Move "blob"             to ColumnType[i].sSQLType
49838>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49838>>>>>//        Move "BINARY"           to ColumnType[i].sDataFlexType
49838>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_STRING      to ColumnType[i].iSQLType
49838>>>>>//        Move "char"             to ColumnType[i].sSQLType
49838>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49838>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
49838>>>>>//        Move "254"              to ColumnType[i].sPrecision
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_DATE        to ColumnType[i].iSQLType
49838>>>>>//        Move "date"             to ColumnType[i].sSQLType
49838>>>>>//        Move DF_DATE            to ColumnType[i].iDataFlexType
49838>>>>>//        Move "Date"             to ColumnType[i].sDataFlexType
49838>>>>>//        Move "6.0"              to ColumnType[i].sPrecision
49838>>>>>//        Move True               to ColumnType[i].bCanEditSize
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_DATETIME    to ColumnType[i].iSQLType
49838>>>>>//        Move "datetime"         to ColumnType[i].sSQLType
49838>>>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
49838>>>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
49838>>>>>//        Move "23.0"             to ColumnType[i].sPrecision
49838>>>>>//        Move True               to ColumnType[i].bCanEditSize
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_DECIMAL     to ColumnType[i].iSQLType
49838>>>>>//        Move "decimal"          to ColumnType[i].sSQLType
49838>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49838>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49838>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_DOUBLE      to ColumnType[i].iSQLType
49838>>>>>//        Move "double"           to ColumnType[i].sSQLType
49838>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49838>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49838>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_ENUM        to ColumnType[i].iSQLType
49838>>>>>//        Move "enum"             to ColumnType[i].sSQLType
49838>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49838>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49838>>>>>//        Move "254"              to ColumnType[i].sPrecision
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_FLOAT       to ColumnType[i].iSQLType
49838>>>>>//        Move "float"            to ColumnType[i].sSQLType
49838>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49838>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49838>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_INT24       to ColumnType[i].iSQLType
49838>>>>>//        Move "int"              to ColumnType[i].sSQLType
49838>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49838>>>>>//        Move "NUMERIC"          to ColumnType[i].sDataFlexType
49838>>>>>//        Move "11.0"             to ColumnType[i].sPrecision
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_LONG_BLOB   to ColumnType[i].iSQLType
49838>>>>>//        Move "longblob"         to ColumnType[i].sSQLType
49838>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49838>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
49838>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_LONG_TEXT   to ColumnType[i].iSQLType
49838>>>>>//        Move "longtext"         to ColumnType[i].sSQLType
49838>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49838>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49838>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_MEDIUM_BLOB to ColumnType[i].iSQLType
49838>>>>>//        Move "mediumblob"       to ColumnType[i].sSQLType
49838>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49838>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
49838>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_INT24       to ColumnType[i].iSQLType
49838>>>>>//        Move "mediumint"        to ColumnType[i].sSQLType
49838>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49838>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49838>>>>>//        Move "9.0"              to ColumnType[i].sPrecision
49838>>>>>//
49838>>>>>//        Move eMySQL_MEDIUM_TEXT to ColumnType[i].iSQLType
49838>>>>>//        Move "mediumtext"       to ColumnType[i].sSQLType
49838>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49838>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49838>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_SET         to ColumnType[i].iSQLType
49838>>>>>//        Move "set"              to ColumnType[i].sSQLType
49838>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49838>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49838>>>>>//        Move "254"              to ColumnType[i].sPrecision
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_SHORT       to ColumnType[i].iSQLType
49838>>>>>//        Move "smallint"         to ColumnType[i].sSQLType
49838>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49838>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49838>>>>>//        Move "6.0"              to ColumnType[i].sPrecision
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_TEXT        to ColumnType[i].iSQLType
49838>>>>>//        Move "text"             to ColumnType[i].sSQLType
49838>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49838>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49838>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_TIME        to ColumnType[i].iSQLType
49838>>>>>//        Move "time"             to ColumnType[i].sSQLType
49838>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49838>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49838>>>>>//        Move "10.0"             to ColumnType[i].sPrecision
49838>>>>>//        Move True               to ColumnType[i].bCanEditSize
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_TIMESTAMP   to ColumnType[i].iSQLType
49838>>>>>//        Move "timestamp"        to ColumnType[i].sSQLType
49838>>>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
49838>>>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
49838>>>>>//        Move "23.0"             to ColumnType[i].sPrecision
49838>>>>>//        Move True               to ColumnType[i].bCanEditSize
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_TINY_BLOB   to ColumnType[i].iSQLType
49838>>>>>//        Move "tinyblob"         to ColumnType[i].sSQLType
49838>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49838>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
49838>>>>>//        Move "254"              to ColumnType[i].sPrecision
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_TINY        to ColumnType[i].iSQLType
49838>>>>>//        Move "tinyint"          to ColumnType[i].sSQLType
49838>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49838>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49838>>>>>//        Move "4.0"              to ColumnType[i].sPrecision
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_TINY_TEXT   to ColumnType[i].iSQLType
49838>>>>>//        Move "tinytext"         to ColumnType[i].sSQLType
49838>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49838>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49838>>>>>//        Move "254"              to ColumnType[i].sPrecision
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_VAR_STRING  to ColumnType[i].iSQLType
49838>>>>>//        Move "varchar"          to ColumnType[i].sSQLType
49838>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49838>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49838>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49838>>>>>//        Increment i
49838>>>>>//
49838>>>>>//        Move eMySQL_YEAR        to ColumnType[i].iSQLType
49838>>>>>//        Move "year"             to ColumnType[i].sSQLType
49838>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49838>>>>>//        Move "NUMERIC"          to ColumnType[i].sDataFlexType
49838>>>>>//        Move "4.0"              to ColumnType[i].sPrecision
49838>>>>>//        Move True               to ColumnType[i].bCanEditSize
49838>>>>>//        Increment i
49838>>>>>
49838>>>>>        Function_Return aColumnType
49839>>>>>    End_Function
49840>>>>>
49840>>>>>    // Oracle Data Types
49840>>>>>    Function _UtilEnumerateOracleTypes Returns tColumnType[]
49842>>>>>        tColumnType[] aColumnType
49842>>>>>        tColumnType[] aColumnType
49843>>>>>        Integer i
49843>>>>>
Including file: ora_drv_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ora_drv_DriverDef.inc)
49843>>>>>>// Generated By The Database Update Framework
49843>>>>>>// Driver XML File: C:\Program Files (x86)\DataFlex 19.0\Bin\ora_drv_DriverDef.xml
49843>>>>>>// Driver COLUMN DATA TYPES
49843>>>>>>//
49843>>>>>>// Created: 2018-03-14 23:47:34.82
49843>>>>>>
49843>>>>>>            Move "blob"                                  to aColumnType[i].sSQLType
49844>>>>>>            Move 113                                     to aColumnType[i].iSQLType
49845>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49846>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49847>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49848>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49849>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49850>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49851>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49852>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49853>>>>>>            Increment i
49854>>>>>>
49854>>>>>>            Move "char"                                  to aColumnType[i].sSQLType
49855>>>>>>            Move 96                                      to aColumnType[i].iSQLType
49856>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49857>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49858>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49859>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49860>>>>>>            Move 2000                                    to aColumnType[i].nMaxSize
49861>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49862>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49863>>>>>>            Move 2000                                    to aColumnType[i].sPrecision
49864>>>>>>            Increment i
49865>>>>>>
49865>>>>>>            Move "clob"                                  to aColumnType[i].sSQLType
49866>>>>>>            Move 112                                     to aColumnType[i].iSQLType
49867>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49868>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49869>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49870>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49871>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49872>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49873>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49874>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49875>>>>>>            Increment i
49876>>>>>>
49876>>>>>>            Move "date"                                  to aColumnType[i].sSQLType
49877>>>>>>            Move 12                                      to aColumnType[i].iSQLType
49878>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49879>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49880>>>>>>            Move 6                                       to aColumnType[i].iDefaultSize
49881>>>>>>            Move 6                                       to aColumnType[i].iMinSize
49882>>>>>>            Move 23                                      to aColumnType[i].nMaxSize
49883>>>>>>            Move "DF_DATE"                               to aColumnType[i].sDataFlexType
49884>>>>>>            Move DF_DATE                                 to aColumnType[i].iDataFlexType
49885>>>>>>            Move 6                                       to aColumnType[i].sPrecision
49886>>>>>>            Increment i
49887>>>>>>
49887>>>>>>            Move "float"                                 to aColumnType[i].sSQLType
49888>>>>>>            Move 4                                       to aColumnType[i].iSQLType
49889>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49890>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49891>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49892>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49893>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49894>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49895>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49896>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49897>>>>>>            Increment i
49898>>>>>>
49898>>>>>>            Move "int"                                   to aColumnType[i].sSQLType
49899>>>>>>            Move 3                                       to aColumnType[i].iSQLType
49900>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49901>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49902>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49903>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49904>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49905>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49906>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49907>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49908>>>>>>            Increment i
49909>>>>>>
49909>>>>>>            Move "intervalds"                            to aColumnType[i].sSQLType
49910>>>>>>            Move 190                                     to aColumnType[i].iSQLType
49911>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49912>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49913>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
49914>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49915>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49916>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49917>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49918>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49919>>>>>>            Increment i
49920>>>>>>
49920>>>>>>            Move "intervalym"                            to aColumnType[i].sSQLType
49921>>>>>>            Move 189                                     to aColumnType[i].iSQLType
49922>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49923>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49924>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
49925>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49926>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49927>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49928>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49929>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49930>>>>>>            Increment i
49931>>>>>>
49931>>>>>>            Move "long"                                  to aColumnType[i].sSQLType
49932>>>>>>            Move 8                                       to aColumnType[i].iSQLType
49933>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49934>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49935>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49936>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49937>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49938>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49939>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49940>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49941>>>>>>            Increment i
49942>>>>>>
49942>>>>>>            Move "longraw"                               to aColumnType[i].sSQLType
49943>>>>>>            Move 24                                      to aColumnType[i].iSQLType
49944>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49945>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49946>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49947>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49948>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49949>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49950>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49951>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49952>>>>>>            Increment i
49953>>>>>>
49953>>>>>>            Move "nchar"                                 to aColumnType[i].sSQLType
49954>>>>>>            Move 286                                     to aColumnType[i].iSQLType
49955>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49956>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49957>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49958>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49959>>>>>>            Move 2000                                    to aColumnType[i].nMaxSize
49960>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49961>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49962>>>>>>            Move 2000                                    to aColumnType[i].sPrecision
49963>>>>>>            Increment i
49964>>>>>>
49964>>>>>>            Move "nclob"                                 to aColumnType[i].sSQLType
49965>>>>>>            Move 288                                     to aColumnType[i].iSQLType
49966>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49967>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49968>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49969>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49970>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49971>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49972>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49973>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49974>>>>>>            Increment i
49975>>>>>>
49975>>>>>>            Move "number"                                to aColumnType[i].sSQLType
49976>>>>>>            Move 2                                       to aColumnType[i].iSQLType
49977>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49978>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49979>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49980>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49981>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49982>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49983>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49984>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49985>>>>>>            Increment i
49986>>>>>>
49986>>>>>>            Move "nvarchar2"                             to aColumnType[i].sSQLType
49987>>>>>>            Move 287                                     to aColumnType[i].iSQLType
49988>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49989>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49990>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49991>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49992>>>>>>            Move 4000                                    to aColumnType[i].nMaxSize
49993>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49994>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49995>>>>>>            Move 4000                                    to aColumnType[i].sPrecision
49996>>>>>>            Increment i
49997>>>>>>
49997>>>>>>            Move "raw"                                   to aColumnType[i].sSQLType
49998>>>>>>            Move 23                                      to aColumnType[i].iSQLType
49999>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50000>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50001>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
50002>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50003>>>>>>            Move 2000                                    to aColumnType[i].nMaxSize
50004>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
50005>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
50006>>>>>>            Move 2000                                    to aColumnType[i].sPrecision
50007>>>>>>            Increment i
50008>>>>>>
50008>>>>>>            Move "timestamp"                             to aColumnType[i].sSQLType
50009>>>>>>            Move 187                                     to aColumnType[i].iSQLType
50010>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
50011>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50012>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
50013>>>>>>            Move -1                                      to aColumnType[i].iMinSize
50014>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
50015>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
50016>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
50017>>>>>>            Move -1                                      to aColumnType[i].sPrecision
50018>>>>>>            Increment i
50019>>>>>>
50019>>>>>>            Move "timestampltz"                          to aColumnType[i].sSQLType
50020>>>>>>            Move 232                                     to aColumnType[i].iSQLType
50021>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
50022>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50023>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
50024>>>>>>            Move -1                                      to aColumnType[i].iMinSize
50025>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
50026>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
50027>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
50028>>>>>>            Move -1                                      to aColumnType[i].sPrecision
50029>>>>>>            Increment i
50030>>>>>>
50030>>>>>>            Move "timestamptz"                           to aColumnType[i].sSQLType
50031>>>>>>            Move 188                                     to aColumnType[i].iSQLType
50032>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
50033>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50034>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
50035>>>>>>            Move -1                                      to aColumnType[i].iMinSize
50036>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
50037>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
50038>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
50039>>>>>>            Move -1                                      to aColumnType[i].sPrecision
50040>>>>>>            Increment i
50041>>>>>>
50041>>>>>>            Move "varchar2"                              to aColumnType[i].sSQLType
50042>>>>>>            Move 1                                       to aColumnType[i].iSQLType
50043>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50044>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50045>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
50046>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50047>>>>>>            Move 4000                                    to aColumnType[i].nMaxSize
50048>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50049>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50050>>>>>>            Move 4000                                    to aColumnType[i].sPrecision
50051>>>>>>            Increment i
50052>>>>>>
50052>>>>>>
50052>>>>>
50052>>>>>//        Move eOracle_BLOB       to ColumnType[i].iSQLType
50052>>>>>//        Move "BLOB"             to ColumnType[i].sSQLType
50052>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
50052>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
50052>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50052>>>>>//        Increment i
50052>>>>>//
50052>>>>>//        Move eOracle_CHAR       to ColumnType[i].iSQLType
50052>>>>>//        Move "CHAR"             to ColumnType[i].sSQLType
50052>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
50052>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
50052>>>>>//        Move "2000"             to ColumnType[i].sPrecision
50052>>>>>//        Increment i
50052>>>>>//
50052>>>>>//        Move eOracle_CLOB       to ColumnType[i].iSQLType
50052>>>>>//        Move "CLOB"             to ColumnType[i].sSQLType
50052>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
50052>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
50052>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50052>>>>>//        Increment i
50052>>>>>//
50052>>>>>//        Move eOracle_DATE       to ColumnType[i].iSQLType
50052>>>>>//        Move "DATE"             to ColumnType[i].sSQLType
50052>>>>>//        Move DF_Date            to ColumnType[i].iDataFlexType
50052>>>>>//        Move "Date"             to ColumnType[i].sDataFlexType
50052>>>>>//        Move "6.0"              to ColumnType[i].sPrecision
50052>>>>>//        Move True               to ColumnType[i].bCanEditSize
50052>>>>>//        Increment i
50052>>>>>//
50052>>>>>//        Move eOracle_FLOAT      to ColumnType[i].iSQLType
50052>>>>>//        Move "FLOAT"            to ColumnType[i].sSQLType
50052>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
50052>>>>>//        Move "Number"           to ColumnType[i].sDataFlexType
50052>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
50052>>>>>//        Increment i
50052>>>>>//
50052>>>>>//        Move eOracle_INT        to ColumnType[i].iSQLType
50052>>>>>//        Move "INT"              to ColumnType[i].sSQLType
50052>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
50052>>>>>//        Move "Number"           to ColumnType[i].sDataFlexType
50052>>>>>//        Move "14.0"             to ColumnType[i].sPrecision
50052>>>>>//        Increment i
50052>>>>>//
50052>>>>>//        Move eOracle_INTERVALDS to ColumnType[i].iSQLType
50052>>>>>//        Move "INTERVALDAYTOSEC" to ColumnType[i].sSQLType
50052>>>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
50052>>>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
50052>>>>>//        Move "23.0"             to ColumnType[i].sPrecision
50052>>>>>//        Move True               to ColumnType[i].bCanEditSize
50052>>>>>//        Increment i
50052>>>>>//
50052>>>>>//        Move eOracle_INTERVALYM  to ColumnType[i].iSQLType
50052>>>>>//        Move "INTERVALYEARTOMON" to ColumnType[i].sSQLType
50052>>>>>//        Move DF_DATETIME         to ColumnType[i].iDataFlexType
50052>>>>>//        Move "DateTime"          to ColumnType[i].sDataFlexType
50052>>>>>//        Move "23.0"              to ColumnType[i].sPrecision
50052>>>>>//        Move True                to ColumnType[i].bCanEditSize
50052>>>>>//        Increment i
50052>>>>>//
50052>>>>>//        Move eOracle_RAW        to ColumnType[i].iSQLType
50052>>>>>//        Move "LONG"             to ColumnType[i].sSQLType
50052>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
50052>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
50052>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50052>>>>>//        Increment i
50052>>>>>//
50052>>>>>//        Move eOracle_LONGRAW    to ColumnType[i].iSQLType
50052>>>>>//        Move "LONG RAW"         to ColumnType[i].sSQLType
50052>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
50052>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
50052>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50052>>>>>//        Increment i
50052>>>>>//
50052>>>>>//        Move eOracle_NCHAR      to ColumnType[i].iSQLType
50052>>>>>//        Move "NCHAR"            to ColumnType[i].sSQLType
50052>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
50052>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
50052>>>>>//        Move "2000"             to ColumnType[i].sPrecision
50052>>>>>//        Increment i
50052>>>>>//
50052>>>>>//        Move eOracle_NCLOB      to ColumnType[i].iSQLType
50052>>>>>//        Move "NCLOB"            to ColumnType[i].sSQLType
50052>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
50052>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
50052>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50052>>>>>//        Increment i
50052>>>>>//
50052>>>>>//        Move eOracle_NUMBER     to ColumnType[i].iSQLType
50052>>>>>//        Move "NUMBER"           to ColumnType[i].sSQLType
50052>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
50052>>>>>//        Move "Number"           to ColumnType[i].sDataFlexType
50052>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
50052>>>>>//        Increment i
50052>>>>>//
50052>>>>>//        Move eOracle_NVARCHAR2  to ColumnType[i].iSQLType
50052>>>>>//        Move "NVARCHAR2"        to ColumnType[i].sSQLType
50052>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
50052>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
50052>>>>>//        Move "4000"             to ColumnType[i].sPrecision
50052>>>>>//        Increment i
50052>>>>>//
50052>>>>>//        Move eOracle_RAW        to ColumnType[i].iSQLType
50052>>>>>//        Move "RAW"              to ColumnType[i].sSQLType
50052>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
50052>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
50052>>>>>//        Move "2000"             to ColumnType[i].sPrecision
50052>>>>>//        Increment i
50052>>>>>//
50052>>>>>//        Move eOracle_ROWID      to ColumnType[i].iSQLType
50052>>>>>//        Move "ROWID"            to ColumnType[i].sSQLType
50052>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
50052>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
50052>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50052>>>>>//        Increment i
50052>>>>>//
50052>>>>>//        Move eOracle_TIMESTAMP  to ColumnType[i].iSQLType
50052>>>>>//        Move "TimeStamp"        to ColumnType[i].sSQLType
50052>>>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
50052>>>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
50052>>>>>//        Move "11.0"             to ColumnType[i].sPrecision
50052>>>>>//        Move True               to ColumnType[i].bCanEditSize
50052>>>>>//        Increment i
50052>>>>>//
50052>>>>>//        Move eOracle_TIMESTAMPLTZ   to ColumnType[i].iSQLType
50052>>>>>//        Move "TIMESTAMPLOCALTZ"     to ColumnType[i].sSQLType
50052>>>>>//        Move DF_DATETIME            to ColumnType[i].iDataFlexType
50052>>>>>//        Move "DateTime"             to ColumnType[i].sDataFlexType
50052>>>>>//        Move "13.0"                 to ColumnType[i].sPrecision
50052>>>>>//        Move True                   to ColumnType[i].bCanEditSize
50052>>>>>//        Increment i
50052>>>>>//
50052>>>>>//        Move eOracle_TIMESTAMPTZ    to ColumnType[i].iSQLType
50052>>>>>//        Move "TIMEZONETIMEZONE"     to ColumnType[i].sSQLType
50052>>>>>//        Move DF_DATETIME            to ColumnType[i].iDataFlexType
50052>>>>>//        Move "DateTime"             to ColumnType[i].sDataFlexType
50052>>>>>//        Move "11.0"                 to ColumnType[i].sPrecision
50052>>>>>//        Move True                   to ColumnType[i].bCanEditSize
50052>>>>>//        Increment i
50052>>>>>//
50052>>>>>//        Move eOracle_VARCHAR2   to ColumnType[i].iSQLType
50052>>>>>//        Move "VARCHAR"          to ColumnType[i].sSQLType
50052>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
50052>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
50052>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50052>>>>>
50052>>>>>        Function_Return aColumnType
50053>>>>>    End_Function
50054>>>>>
50054>>>>>    // PostgreSQL Data Types
50054>>>>>    Function _UtilEnumeratePostgreSQLTypes Returns tColumnType[]
50056>>>>>        tColumnType[] aColumnType
50056>>>>>        tColumnType[] aColumnType
50057>>>>>        Integer i
50057>>>>>
Including file: mdspgsql_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\mdspgsql_DriverDef.inc)
50057>>>>>>// Generated By The Database Update Framework
50057>>>>>>// Driver XML File: C:\Program Files (x86)\DataFlex 19.0\Bin\mdspgsql_DriverDef.xml
50057>>>>>>// Driver COLUMN DATA TYPES
50057>>>>>>//
50057>>>>>>// Created: 2018-03-14 23:47:02.984
50057>>>>>>
50057>>>>>>            Move "bigint"                                to aColumnType[i].sSQLType
50058>>>>>>            Move 20                                      to aColumnType[i].iSQLType
50059>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50060>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50061>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
50062>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50063>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
50064>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
50065>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
50066>>>>>>            Move 14                                      to aColumnType[i].sPrecision
50067>>>>>>            Increment i
50068>>>>>>
50068>>>>>>            Move "bit"                                   to aColumnType[i].sSQLType
50069>>>>>>            Move 1560                                    to aColumnType[i].iSQLType
50070>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50071>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50072>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
50073>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50074>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
50075>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
50076>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
50077>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
50078>>>>>>            Increment i
50079>>>>>>
50079>>>>>>            Move "boolean"                               to aColumnType[i].sSQLType
50080>>>>>>            Move 16                                      to aColumnType[i].iSQLType
50081>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
50082>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50083>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
50084>>>>>>            Move -1                                      to aColumnType[i].iMinSize
50085>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
50086>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50087>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50088>>>>>>            Move -1                                      to aColumnType[i].sPrecision
50089>>>>>>            Increment i
50090>>>>>>
50090>>>>>>            Move "bytea"                                 to aColumnType[i].sSQLType
50091>>>>>>            Move 17                                      to aColumnType[i].iSQLType
50092>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50093>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50094>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
50095>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50096>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
50097>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
50098>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
50099>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
50100>>>>>>            Increment i
50101>>>>>>
50101>>>>>>            Move "char"                                  to aColumnType[i].sSQLType
50102>>>>>>            Move 18                                      to aColumnType[i].iSQLType
50103>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50104>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50105>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
50106>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50107>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
50108>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50109>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50110>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
50111>>>>>>            Increment i
50112>>>>>>
50112>>>>>>            Move "citext"                                to aColumnType[i].sSQLType
50113>>>>>>            Move -25                                     to aColumnType[i].iSQLType
50114>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50115>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50116>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
50117>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50118>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
50119>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50120>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50121>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
50122>>>>>>            Increment i
50123>>>>>>
50123>>>>>>            Move "date"                                  to aColumnType[i].sSQLType
50124>>>>>>            Move 1082                                    to aColumnType[i].iSQLType
50125>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
50126>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50127>>>>>>            Move 6                                       to aColumnType[i].iDefaultSize
50128>>>>>>            Move -1                                      to aColumnType[i].iMinSize
50129>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
50130>>>>>>            Move "DF_DATE"                               to aColumnType[i].sDataFlexType
50131>>>>>>            Move DF_DATE                                 to aColumnType[i].iDataFlexType
50132>>>>>>            Move 6                                       to aColumnType[i].sPrecision
50133>>>>>>            Increment i
50134>>>>>>
50134>>>>>>            Move "double"                                to aColumnType[i].sSQLType
50135>>>>>>            Move 701                                     to aColumnType[i].iSQLType
50136>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50137>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50138>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
50139>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50140>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
50141>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50142>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50143>>>>>>            Move 14                                      to aColumnType[i].sPrecision
50144>>>>>>            Increment i
50145>>>>>>
50145>>>>>>            Move "integer"                               to aColumnType[i].sSQLType
50146>>>>>>            Move 23                                      to aColumnType[i].iSQLType
50147>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50148>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50149>>>>>>            Move 11                                      to aColumnType[i].iDefaultSize
50150>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50151>>>>>>            Move 11                                      to aColumnType[i].nMaxSize
50152>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
50153>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
50154>>>>>>            Move 11                                      to aColumnType[i].sPrecision
50155>>>>>>            Increment i
50156>>>>>>
50156>>>>>>            Move "money"                                 to aColumnType[i].sSQLType
50157>>>>>>            Move 790                                     to aColumnType[i].iSQLType
50158>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50159>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50160>>>>>>            Move 30                                      to aColumnType[i].iDefaultSize
50161>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50162>>>>>>            Move 30                                      to aColumnType[i].nMaxSize
50163>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
50164>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
50165>>>>>>            Move 30                                      to aColumnType[i].sPrecision
50166>>>>>>            Increment i
50167>>>>>>
50167>>>>>>            Move "numeric"                               to aColumnType[i].sSQLType
50168>>>>>>            Move 1700                                    to aColumnType[i].iSQLType
50169>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50170>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50171>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
50172>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50173>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
50174>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50175>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50176>>>>>>            Move 14                                      to aColumnType[i].sPrecision
50177>>>>>>            Increment i
50178>>>>>>
50178>>>>>>            Move "oid"                                   to aColumnType[i].sSQLType
50179>>>>>>            Move 26                                      to aColumnType[i].iSQLType
50180>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
50181>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50182>>>>>>            Move 20                                      to aColumnType[i].iDefaultSize
50183>>>>>>            Move -1                                      to aColumnType[i].iMinSize
50184>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
50185>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
50186>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
50187>>>>>>            Move -1                                      to aColumnType[i].sPrecision
50188>>>>>>            Increment i
50189>>>>>>
50189>>>>>>            Move "real"                                  to aColumnType[i].sSQLType
50190>>>>>>            Move 700                                     to aColumnType[i].iSQLType
50191>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50192>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50193>>>>>>            Move 6                                       to aColumnType[i].iDefaultSize
50194>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50195>>>>>>            Move 6                                       to aColumnType[i].nMaxSize
50196>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
50197>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
50198>>>>>>            Move 6                                       to aColumnType[i].sPrecision
50199>>>>>>            Increment i
50200>>>>>>
50200>>>>>>            Move "regproc"                               to aColumnType[i].sSQLType
50201>>>>>>            Move 24                                      to aColumnType[i].iSQLType
50202>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
50203>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50204>>>>>>            Move 64                                      to aColumnType[i].iDefaultSize
50205>>>>>>            Move -1                                      to aColumnType[i].iMinSize
50206>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
50207>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50208>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50209>>>>>>            Move -1                                      to aColumnType[i].sPrecision
50210>>>>>>            Increment i
50211>>>>>>
50211>>>>>>            Move "smallint"                              to aColumnType[i].sSQLType
50212>>>>>>            Move 21                                      to aColumnType[i].iSQLType
50213>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50214>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50215>>>>>>            Move 6                                       to aColumnType[i].iDefaultSize
50216>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50217>>>>>>            Move 6                                       to aColumnType[i].nMaxSize
50218>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
50219>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
50220>>>>>>            Move 6                                       to aColumnType[i].sPrecision
50221>>>>>>            Increment i
50222>>>>>>
50222>>>>>>            Move "text"                                  to aColumnType[i].sSQLType
50223>>>>>>            Move 25                                      to aColumnType[i].iSQLType
50224>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50225>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50226>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
50227>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50228>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
50229>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50230>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50231>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
50232>>>>>>            Increment i
50233>>>>>>
50233>>>>>>            Move "time"                                  to aColumnType[i].sSQLType
50234>>>>>>            Move 1083                                    to aColumnType[i].iSQLType
50235>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50236>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50237>>>>>>            Move 8                                       to aColumnType[i].iDefaultSize
50238>>>>>>            Move 8                                       to aColumnType[i].iMinSize
50239>>>>>>            Move 15                                      to aColumnType[i].nMaxSize
50240>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50241>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50242>>>>>>            Move 15                                      to aColumnType[i].sPrecision
50243>>>>>>            Increment i
50244>>>>>>
50244>>>>>>            Move "timestamp"                             to aColumnType[i].sSQLType
50245>>>>>>            Move 1114                                    to aColumnType[i].iSQLType
50246>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
50247>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50248>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
50249>>>>>>            Move -1                                      to aColumnType[i].iMinSize
50250>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
50251>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
50252>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
50253>>>>>>            Move -1                                      to aColumnType[i].sPrecision
50254>>>>>>            Increment i
50255>>>>>>
50255>>>>>>            Move "timestamptz"                           to aColumnType[i].sSQLType
50256>>>>>>            Move 1184                                    to aColumnType[i].iSQLType
50257>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
50258>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50259>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
50260>>>>>>            Move -1                                      to aColumnType[i].iMinSize
50261>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
50262>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50263>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50264>>>>>>            Move -1                                      to aColumnType[i].sPrecision
50265>>>>>>            Increment i
50266>>>>>>
50266>>>>>>            Move "uuid"                                  to aColumnType[i].sSQLType
50267>>>>>>            Move 2950                                    to aColumnType[i].iSQLType
50268>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
50269>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50270>>>>>>            Move 40                                      to aColumnType[i].iDefaultSize
50271>>>>>>            Move -1                                      to aColumnType[i].iMinSize
50272>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
50273>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50274>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50275>>>>>>            Move -1                                      to aColumnType[i].sPrecision
50276>>>>>>            Increment i
50277>>>>>>
50277>>>>>>            Move "varbit"                                to aColumnType[i].sSQLType
50278>>>>>>            Move 1562                                    to aColumnType[i].iSQLType
50279>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50280>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50281>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
50282>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50283>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
50284>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50285>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50286>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
50287>>>>>>            Increment i
50288>>>>>>
50288>>>>>>            Move "varchar"                               to aColumnType[i].sSQLType
50289>>>>>>            Move 1043                                    to aColumnType[i].iSQLType
50290>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
50291>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
50292>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
50293>>>>>>            Move 1                                       to aColumnType[i].iMinSize
50294>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
50295>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
50296>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
50297>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
50298>>>>>>            Increment i
50299>>>>>>
50299>>>>>>
50299>>>>>
50299>>>>>//        Move ePgSQL_INT8        to ColumnType[i].iSQLType
50299>>>>>//        Move "bigint"           to ColumnType[i].sSQLType
50299>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
50299>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
50299>>>>>//        Move "14.0"             to ColumnType[i].sPrecision
50299>>>>>//        Move True               to ColumnType[i].bCanEditSize
50299>>>>>//        Increment i
50299>>>>>//
50299>>>>>//        Move ePgSQL_BIT         to ColumnType[i].iSQLType
50299>>>>>//        Move "bit"              to ColumnType[i].sSQLType
50299>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
50299>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
50299>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50299>>>>>//        Increment i
50299>>>>>//
50299>>>>>//        Move ePgSQL_BOOL        to ColumnType[i].iSQLType
50299>>>>>//        Move "boolean"          to ColumnType[i].sSQLType
50299>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
50299>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
50299>>>>>//        Move "1"                to ColumnType[i].sPrecision
50299>>>>>//        Increment i
50299>>>>>//
50299>>>>>//        Move ePgSQL_BYTEA       to ColumnType[i].iSQLType
50299>>>>>//        Move "bytea"            to ColumnType[i].sSQLType
50299>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
50299>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
50299>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50299>>>>>//        Increment i
50299>>>>>//
50299>>>>>//        Move ePgSQL_CHAR        to ColumnType[i].iSQLType
50299>>>>>//        Move "char"             to ColumnType[i].sSQLType
50299>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
50299>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
50299>>>>>//        Move "2000"             to ColumnType[i].sPrecision
50299>>>>>//        Increment i
50299>>>>>//
50299>>>>>//        Move ePgSQL_CITEXT      to ColumnType[i].iSQLType
50299>>>>>//        Move "citext"           to ColumnType[i].sSQLType
50299>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
50299>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
50299>>>>>//        Move "254"              to ColumnType[i].sPrecision
50299>>>>>//        Increment i
50299>>>>>//
50299>>>>>//        Move ePgSQL_DATE        to ColumnType[i].iSQLType
50299>>>>>//        Move "date"             to ColumnType[i].sSQLType
50299>>>>>//        Move DF_DATE            to ColumnType[i].iDataFlexType
50299>>>>>//        Move "Date"             to ColumnType[i].sDataFlexType
50299>>>>>//        Move "6.0"              to ColumnType[i].sPrecision
50299>>>>>//        Move True               to ColumnType[i].bCanEditSize
50299>>>>>//        Increment i
50299>>>>>//
50299>>>>>//        Move ePgSQL_FLOAT4      to ColumnType[i].iSQLType
50299>>>>>//        Move "decimal"          to ColumnType[i].sSQLType
50299>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
50299>>>>>//        Move "Decimal"          to ColumnType[i].sDataFlexType
50299>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
50299>>>>>//        Increment i
50299>>>>>//
50299>>>>>//        Move ePgSQL_FLOAT8      to ColumnType[i].iSQLType
50299>>>>>//        Move "double"           to ColumnType[i].sSQLType
50299>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
50299>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
50299>>>>>//        Move "22"               to ColumnType[i].sPrecision
50299>>>>>//        Increment i
50299>>>>>//
50299>>>>>//        Move ePgSQL_INT4        to ColumnType[i].iSQLType
50299>>>>>//        Move "integer"          to ColumnType[i].sSQLType
50299>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
50299>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
50299>>>>>//        Move "8.0"              to ColumnType[i].sPrecision
50299>>>>>//        Increment i
50299>>>>>//
50299>>>>>//        Move ePgSQL_MONEY       to ColumnType[i].iSQLType
50299>>>>>//        Move "money"            to ColumnType[i].sSQLType
50299>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
50299>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
50299>>>>>//        Move "8.0"              to ColumnType[i].sPrecision
50299>>>>>//        Increment i
50299>>>>>//
50299>>>>>//        Move ePgSQL_OID         to ColumnType[i].iSQLType
50299>>>>>//        Move "oid"              to ColumnType[i].sSQLType
50299>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
50299>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
50299>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50299>>>>>//        Increment i
50299>>>>>//
50299>>>>>//        Move ePgSQL_FLOAT4      to ColumnType[i].iSQLType
50299>>>>>//        Move "real"             to ColumnType[i].sSQLType
50299>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
50299>>>>>//        Move "Real"             to ColumnType[i].sDataFlexType
50299>>>>>//        Move "6.6"              to ColumnType[i].sPrecision
50299>>>>>//        Increment i
50299>>>>>//
50299>>>>>//        Move ePgSQL_REGPROC     to ColumnType[i].iSQLType
50299>>>>>//        Move "regproc"          to ColumnType[i].sSQLType
50299>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
50299>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
50299>>>>>//        Move "64"               to ColumnType[i].sPrecision
50299>>>>>//        Increment i
50299>>>>>//
50299>>>>>//        Move ePgSQL_INT2        to ColumnType[i].iSQLType
50299>>>>>//        Move "smallint"         to ColumnType[i].sSQLType
50299>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
50299>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
50299>>>>>//        Move "6.0"              to ColumnType[i].sPrecision
50299>>>>>//        Increment i
50299>>>>>//
50299>>>>>//        Move ePgSQL_TEXT        to ColumnType[i].iSQLType
50299>>>>>//        Move "text"             to ColumnType[i].sSQLType
50299>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
50299>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
50299>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50299>>>>>//        Increment i
50299>>>>>//
50299>>>>>//        Move ePgSQL_TIME        to ColumnType[i].iSQLType
50299>>>>>//        Move "time"             to ColumnType[i].sSQLType
50299>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
50299>>>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
50299>>>>>//        Move "15.0"             to ColumnType[i].sPrecision
50299>>>>>//        Increment i
50299>>>>>//
50299>>>>>//        Move ePgSQL_TIMESTAMP   to ColumnType[i].iSQLType
50299>>>>>//        Move "timestamp"        to ColumnType[i].sSQLType
50299>>>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
50299>>>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
50299>>>>>//        Move "23.0"             to ColumnType[i].sPrecision
50299>>>>>//        Move True               to ColumnType[i].bCanEditSize
50299>>>>>//        Increment i
50299>>>>>//
50299>>>>>//        Move ePgSQL_UUID        to ColumnType[i].iSQLType
50299>>>>>//        Move "uuid"             to ColumnType[i].sSQLType
50299>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
50299>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
50299>>>>>//        Move "40"               to ColumnType[i].sPrecision
50299>>>>>//        Move True               to ColumnType[i].bCanEditSize
50299>>>>>//        Increment i
50299>>>>>//
50299>>>>>//        Move ePgSQL_VARCHAR     to ColumnType[i].iSQLType
50299>>>>>//        Move "varchar"          to ColumnType[i].sSQLType
50299>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
50299>>>>>//        Move "DF_TEXT"          to ColumnType[i].sDataFlexType
50299>>>>>//        Move "16384"            to ColumnType[i].sPrecision
50299>>>>>//        Increment i
50299>>>>>
50299>>>>>        Function_Return aColumnType
50300>>>>>    End_Function
50301>>>>>
50301>>>>>    // Internal usage. Use the UtilColumnTypeXXX functions instead.
50301>>>>>    Function _UtilColumnType String sDriverID Integer iDbType Integer iType String sType Boolean bIntegerInputType Returns tColumnType
50303>>>>>        Integer iValue iSize iCount iStart iItem
50303>>>>>        tColumnType[] ColumnTypeArray
50303>>>>>        tColumnType[] ColumnTypeArray
50304>>>>>        tColumnType RetvalType
50304>>>>>        tColumnType RetvalType
50304>>>>>        String sValue
50304>>>>>        Boolean bFrameworkDataFlexType
50304>>>>>
50304>>>>>        Move "Undefined" to RetvalType.sSQLType
50305>>>>>        Move -1999       to RetvalType.iSQLType
50306>>>>>
50306>>>>>        Move 0 to iStart
50307>>>>>        Move (Uppercase(sType)) to sType
50308>>>>>        Move (iType <= -1490) to bFrameworkDataFlexType
50309>>>>>        If (bFrameworkDataFlexType = True) Begin
50311>>>>>            Get _UtilDUFDataTypeToSqlTypeMapping sDriverID iDbType iType to RetvalType
50312>>>>>            Function_Return RetvalType
50313>>>>>        End
50313>>>>>>
50313>>>>>
50313>>>>>        Get _UtilEnumerateColumnTypes sDriverID iDbType to ColumnTypeArray
50314>>>>>        Move iType to RetvalType.iSQLType
50315>>>>>        Move sType to RetvalType.sSQLType 
50316>>>>>        Move (SearchArray(RetvalType, ColumnTypeArray)) to iItem
50317>>>>>        
50317>>>>>        If (iItem = -1) Begin
50319>>>>>            Get _UtilEnumerateDataFlexTypes to ColumnTypeArray
50320>>>>>            Move (SearchArray(RetvalType, ColumnTypeArray)) to iItem
50321>>>>>        End
50321>>>>>>
50321>>>>>        If (iItem <> -1) Begin
50323>>>>>            Move ColumnTypeArray[iItem].sSQLType       to RetvalType.sSQLType
50324>>>>>            Move ColumnTypeArray[iItem].iSQLType       to RetvalType.iSQLType
50325>>>>>            Move ColumnTypeArray[iItem].sDataFlexType  to RetvalType.sDataFlexType
50326>>>>>            Move ColumnTypeArray[iItem].iDataFlexType  to RetvalType.iDataFlexType
50327>>>>>            Move ColumnTypeArray[iItem].sPrecision     to RetvalType.sPrecision
50328>>>>>            Move ColumnTypeArray[iItem].bCanEditSize   to RetvalType.bCanEditSize
50329>>>>>        End
50329>>>>>>
50329>>>>>
50329>>>>>        Function_Return RetvalType
50330>>>>>    End_Function
50331>>>>>
50331>>>>>    // Returns a struct array with all data types for the passed driver & dbtype.
50331>>>>>    Function _UtilEnumerateColumnTypes String sDriverID Integer iDbType Returns tColumnType[]
50333>>>>>        tColumnType[] ColumnType
50333>>>>>        tColumnType[] ColumnType
50334>>>>>
50334>>>>>        // We need to treat DAW's ODBC driver a bit different, as the output depends on
50334>>>>>        // the dbType.
50334>>>>>        If (sDriverID = ODBC_DRV_ID) Begin
50336>>>>>            If (iDbType = EN_DbTypeMySQL) Begin
50338>>>>>                Move ODBC_DRV_ID to sDriverID
50339>>>>>            End
50339>>>>>>
50339>>>>>            If (iDbType = EN_DbTypeMSSQL) Begin
50341>>>>>                Move MSSQLDRV_ID to sDriverID
50342>>>>>            End
50342>>>>>>
50342>>>>>            If (iDbType = EN_DbTypeDB2) Begin
50344>>>>>                Move DB2_DRV_ID to sDriverID
50345>>>>>            End
50345>>>>>>
50345>>>>>            If (iDbType = EN_DbTypePostgre) Begin
50347>>>>>                Move ODBC_DRV_ID to sDriverID
50348>>>>>            End
50348>>>>>>
50348>>>>>        End
50348>>>>>>
50348>>>>>
50348>>>>>        Case Begin
50348>>>>>            Case (iDbType = EN_dbTypeDataFlex)
50350>>>>>                Get _UtilEnumerateDataFlexTypes to ColumnType
50351>>>>>                Case Break
50352>>>>>
50352>>>>>            Case (iDbType = EN_DbTypeDB2)
50355>>>>>                Get _UtilEnumerateDB2Types to ColumnType
50356>>>>>                Case Break
50357>>>>>
50357>>>>>            Case (iDbType = EN_DbTypeMSSQL)
50360>>>>>                Get _UtilEnumerateMSSQLTypes sDriverID to ColumnType
50361>>>>>                Case Break
50362>>>>>        Case End
50362>>>>>
50362>>>>>        Function_Return ColumnType
50363>>>>>    End_Function
50364>>>>>
50364>>>>>    // Returns a struct with the default column types for the SQL back-end and how they
50364>>>>>    // are mapped to a DUF data type.
50364>>>>>    Function _UtilDUFDataTypeToSqlTypeMapping String sDriverID Integer iDbType Integer iType Returns tColumnType
50366>>>>>        tColumnType ColumnType
50366>>>>>        tColumnType ColumnType
50366>>>>>        String sDataType
50366>>>>>        Integer iDriverID iCount
50366>>>>>
50366>>>>>        Move 0 to iCount
50367>>>>>        Get DriverIndex sDriverID to iDriverID
50368>>>>>
50368>>>>>        Case Begin
50368>>>>>            // DF_ASCII
50368>>>>>            Case (iType = DF_ASCII_DUF)
50370>>>>>                If (sDriverID = ODBC_DRV_ID) Begin
50372>>>>>                    Get_Attribute DF_DRIVER_MAP_DFASCII_TO_ODBCTYPE of iDriverID to sDataType
50375>>>>>                End
50375>>>>>>
50375>>>>>                Else Begin
50376>>>>>                    Get_Attribute DF_DRIVER_MAP_DFASCII_TO_SQLTYPE  of iDriverID to sDataType
50379>>>>>                End
50379>>>>>>
50379>>>>>                Move DF_ASCII    to ColumnType.iDataFlexType
50380>>>>>                Move "ASCII"     to ColumnType.sDataFlexType
50381>>>>>                Move sDataType   to ColumnType.sSQLType
50382>>>>>                Move DF_ASCII    to ColumnType.iSQLType
50383>>>>>                Move False       to ColumnType.bCanEditSize
50384>>>>>                Case Break
50385>>>>>
50385>>>>>            // DF_BINARY
50385>>>>>            Case (iType = DF_BINARY_DUF)
50388>>>>>                If (sDriverID = ODBC_DRV_ID) Begin
50390>>>>>                    Get_Attribute DF_DRIVER_MAP_DFBINARY_TO_ODBCTYPE of iDriverID to sDataType
50393>>>>>                End
50393>>>>>>
50393>>>>>                Else Begin
50394>>>>>                    Get_Attribute DF_DRIVER_MAP_DFBINARY_TO_SQLTYPE  of iDriverID to sDataType
50397>>>>>                End
50397>>>>>>
50397>>>>>                Move DF_BINARY   to ColumnType.iDataFlexType
50398>>>>>                Move "Binary"    to ColumnType.sDataFlexType
50399>>>>>                Move sDataType   to ColumnType.sSQLType
50400>>>>>                Move DF_BINARY   to ColumnType.iSQLType
50401>>>>>                Move False       to ColumnType.bCanEditSize
50402>>>>>                Case Break
50403>>>>>
50403>>>>>            // DF_DATE
50403>>>>>            Case (iType = DF_DATE_DUF)
50406>>>>>                If (sDriverID = ODBC_DRV_ID) Begin
50408>>>>>                    Get_Attribute DF_DRIVER_MAP_DFDATE_TO_ODBCTYPE of iDriverID to sDataType
50411>>>>>                End
50411>>>>>>
50411>>>>>                Else Begin
50412>>>>>                    Get_Attribute DF_DRIVER_MAP_DFDATE_TO_SQLTYPE  of iDriverID to sDataType
50415>>>>>                End
50415>>>>>>
50415>>>>>                Move DF_DATE     to ColumnType.iDataFlexType
50416>>>>>                Move "Date"      to ColumnType.sDataFlexType
50417>>>>>                Move sDataType   to ColumnType.sSQLType
50418>>>>>                Move DF_DATE     to ColumnType.iSQLType
50419>>>>>                Move True        to ColumnType.bCanEditSize
50420>>>>>                Case Break
50421>>>>>
50421>>>>>            // DF_DATETIME
50421>>>>>            Case (iType = DF_DATETIME_DUF)
50424>>>>>                If (sDriverID = ODBC_DRV_ID) Begin
50426>>>>>                    Get_Attribute DF_DRIVER_MAP_DFDATETIME_TO_ODBCTYPE of iDriverID to sDataType
50429>>>>>                End
50429>>>>>>
50429>>>>>                Else Begin
50430>>>>>                    Get_Attribute DF_DRIVER_MAP_DFDATETIME_TO_SQLTYPE  of iDriverID to sDataType
50433>>>>>                End
50433>>>>>>
50433>>>>>                Move DF_DATETIME to ColumnType.iDataFlexType
50434>>>>>                Move "DateTime"  to ColumnType.sDataFlexType
50435>>>>>                Move sDataType   to ColumnType.sSQLType
50436>>>>>                Move DF_DATETIME to ColumnType.iSQLType
50437>>>>>                Move True        to ColumnType.bCanEditSize
50438>>>>>                Case Break
50439>>>>>
50439>>>>>            // DF_NUMERIC
50439>>>>>            // *** Why is there no DF_DRIVER_MAP available for BCD/Numeric??? ***
50439>>>>>            // DF_BCD can in SQL be either of "SmallInt", "Int", or "Numeric", but
50439>>>>>            // we make them here all "Numeric"...
50439>>>>>            // If (sDriverID = ODBC_DRV_ID) Begin
50439>>>>>            //     Get_Attribute DF_DRIVER_MAP_DFDATE_TO_ODBCTYPE of iDriverID to sDataType
50439>>>>>            // End
50439>>>>>            // Else Begin
50439>>>>>            //     Get_Attribute DF_DRIVER_MAP_DFDATE_TO_SQLTYPE  of iDriverID to sDataType
50439>>>>>            // End
50439>>>>>            // ToDo: How should we find the best "Numeric" data type here?
50439>>>>>            Case (iType = DF_BCD_DUF)
50442>>>>>                Move DF_BCD      to ColumnType.iDataFlexType
50443>>>>>                Move "Numeric"   to ColumnType.sDataFlexType
50444>>>>>                Move "Numeric"   to ColumnType.sSQLType
50445>>>>>                Move SQL_NUMERIC to ColumnType.iSQLType
50446>>>>>                Move False       to ColumnType.bCanEditSize
50447>>>>>                Case Break
50448>>>>>
50448>>>>>            // DF_TEXT
50448>>>>>            Case (iType = DF_TEXT_DUF)
50451>>>>>                If (sDriverID = ODBC_DRV_ID) Begin
50453>>>>>                    Get_Attribute DF_DRIVER_MAP_DFTEXT_TO_ODBCTYPE of iDriverID to sDataType
50456>>>>>                End
50456>>>>>>
50456>>>>>                Else Begin
50457>>>>>                    Get_Attribute DF_DRIVER_MAP_DFTEXT_TO_SQLTYPE  of iDriverID to sDataType
50460>>>>>                End
50460>>>>>>
50460>>>>>                Move DF_TEXT     to ColumnType.iDataFlexType
50461>>>>>                Move "Text"      to ColumnType.sDataFlexType
50462>>>>>                Move sDataType   to ColumnType.sSQLType
50463>>>>>                Move DF_TEXT     to ColumnType.iSQLType
50464>>>>>                Move False       to ColumnType.bCanEditSize
50465>>>>>                Case Break
50466>>>>>
50466>>>>>            Case Else
50466>>>>>                Move -1999       to ColumnType.iDataFlexType
50467>>>>>                Move "Undefined" to ColumnType.sDataFlexType
50468>>>>>                Move "Undefined" to ColumnType.sSQLType
50469>>>>>                Move -1999       to ColumnType.iSQLType
50470>>>>>                Move True        to ColumnType.bCanEditSize
50471>>>>>
50471>>>>>        Case End
50471>>>>>
50471>>>>>        Function_Return ColumnType
50472>>>>>    End_Function
50473>>>>>
50473>>>>>    Function _AllTablesToConvert Returns Integer[]
50475>>>>>        Integer[] aTableConvertExceptions iTablesArray
50477>>>>>        Handle hTable
50477>>>>>        Integer iIndex
50477>>>>>        String sTableName
50477>>>>>        Boolean bFlexErrs
50477>>>>>
50477>>>>>        // a) Get the exception table array the developer has specified
50477>>>>>        Get paTableConvertExceptions to aTableConvertExceptions
50478>>>>>
50478>>>>>        // b) Add CodeMast, CodeType & DbVersion to exceptions
50478>>>>>        Repeat
50478>>>>>>
50478>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
50481>>>>>            If (hTable <> 0) Begin
50483>>>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
50486>>>>>                Move (Uppercase(sTableName) = "FLEXERRS")  to bFlexErrs
50487>>>>>                If (bFlexErrs = False) Begin
50489>>>>>                    If (Uppercase(sTableName) = "CODEMAST" or Uppercase(sTableName) = "CODETYPE" or Uppercase(sTableName) = "DBVERSION") Begin
50491>>>>>                        Move (SearchArray(hTable, aTableConvertExceptions)) to iIndex
50492>>>>>                        If (iIndex = -1) Begin
50494>>>>>                            Move hTable to aTableConvertExceptions[SizeOfArray(aTableConvertExceptions)]
50495>>>>>                        End
50495>>>>>>
50495>>>>>                    End
50495>>>>>>
50495>>>>>                End
50495>>>>>>
50495>>>>>            End
50495>>>>>>
50495>>>>>        Until (hTable = 0)
50497>>>>>
50497>>>>>        Move 0 to hTable
50498>>>>>
50498>>>>>        // c) Spin through filelist.cfg and add all tables except those from the exception array, to the return array.
50498>>>>>        Repeat
50498>>>>>>
50498>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
50501>>>>>            If (hTable > 0) Begin
50503>>>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
50506>>>>>                Move (Uppercase(sTableName) = "FLEXERRS")  to bFlexErrs
50507>>>>>                If (bFlexErrs = False) Begin
50509>>>>>                    Move (SearchArray(hTable, aTableConvertExceptions)) to iIndex
50510>>>>>                    If (iIndex = -1) Begin
50512>>>>>                        Move hTable to iTablesArray[SizeOfArray(iTablesArray)]
50513>>>>>                    End
50513>>>>>>
50513>>>>>                End
50513>>>>>>
50513>>>>>            End
50513>>>>>>
50513>>>>>        Until (hTable = 0)
50515>>>>>
50515>>>>>        Function_Return iTablesArray
50516>>>>>    End_Function
50517>>>>>
50517>>>>>    Function _AllTablesDateCorrections Returns Integer[]
50519>>>>>        Integer[] aTableDateCorrectionExceptions iTablesArray
50521>>>>>        Handle hTable
50521>>>>>        Integer iIndex
50521>>>>>        String sTableName
50521>>>>>        Boolean bFlexErrs
50521>>>>>
50521>>>>>        Get paTableDateCorrectionExceptions to aTableDateCorrectionExceptions
50522>>>>>        Move 0 to hTable
50523>>>>>
50523>>>>>        // Spin through filelist.cfg and add all tables except those from the exception array, to the return array.
50523>>>>>        Repeat
50523>>>>>>
50523>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
50526>>>>>            If (hTable > 0) Begin
50528>>>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
50531>>>>>                Move (Uppercase(sTableName) = "FLEXERRS")  to bFlexErrs
50532>>>>>                If (bFlexErrs = False) Begin
50534>>>>>                    Move (SearchArray(hTable, aTableDateCorrectionExceptions)) to iIndex
50535>>>>>                    If (iIndex = -1) Begin
50537>>>>>                        Move hTable to iTablesArray[SizeOfArray(iTablesArray)]
50538>>>>>                    End
50538>>>>>>
50538>>>>>                End
50538>>>>>>
50538>>>>>            End
50538>>>>>>
50538>>>>>        Until (hTable = 0)
50540>>>>>
50540>>>>>        Function_Return iTablesArray
50541>>>>>    End_Function
50542>>>>>
50542>>>>>    Function _AppendAPIColumn tAPIColumn[] aCurrent String sFieldName Integer iType Integer iLength Integer iPrecision Integer iOptions Returns tAPIColumn[]
50544>>>>>        tAPIColumn NewAPIColumn
50544>>>>>        tAPIColumn NewAPIColumn
50544>>>>>
50544>>>>>        Move sFieldName to NewAPIColumn.sFieldName
50545>>>>>        Move iType      to NewAPIColumn.iType
50546>>>>>        Move iLength    to NewAPIColumn.iLength
50547>>>>>        Move iPrecision to NewAPIColumn.iPrecision
50548>>>>>        Move iOptions   to NewAPIColumn.iOptions
50549>>>>>
50549>>>>>        Move NewAPIColumn to aCurrent[SizeOfArray(aCurrent)]
50550>>>>>
50550>>>>>        Function_Return aCurrent
50551>>>>>    End_Function
50552>>>>>
50552>>>>>    Function _UtilIndexAppendSegmentFieldNames tAPIIndexSegment[] APIIndexSegment Returns String
50554>>>>>        String sRetval sFieldName
50554>>>>>        Integer iCount iSize
50554>>>>>
50554>>>>>        Move (SizeOfArray(APIIndexSegment)) to iSize
50555>>>>>        Decrement iSize
50556>>>>>        For iCount from 0 to iSize
50562>>>>>>
50562>>>>>            Move APIIndexSegment[iCount].sFieldName to sFieldName
50563>>>>>            Move (sRetval * (String(sFieldName))) to sRetval
50564>>>>>        Loop
50565>>>>>>
50565>>>>>        Move (Trim(sRetval)) to sRetval
50566>>>>>
50566>>>>>        Function_Return sRetval
50567>>>>>    End_Function
50568>>>>>
50568>>>>>    // *** Miscellaneous other functions ***
50568>>>>>    // Some of which can be used by both "Sqlxxx" and "Apixxx" functions.
50568>>>>>    //
50568>>>>>
50568>>>>>    // Callback functionality used when e.g. calling driver functions directly.
50568>>>>>    Function Callback String sCallback_Text Integer iCallback_Type Returns Integer
50570>>>>>        Integer iPerc
50570>>>>>        Number nReady nTotal
50570>>>>>
50570>>>>>        Send DoAdvance of ghoProgressBar
50571>>>>>
50571>>>>>        If (sCallback_Text contains "Copy records") Begin
50573>>>>>            Move CS_DUF_CopyingData to sCallback_Text
50574>>>>>        End
50574>>>>>>
50574>>>>>        If (sCallback_Text contains "Dropping index" or sCallback_Text contains "Temporary delete of all indices of table") Begin
50576>>>>>            Move (Replace("Dropping index", sCallback_Text, CS_DUF_DeletingIndex)) to sCallback_Text
50577>>>>>            Move (Replace("Temporary delete of all indices of table", sCallback_Text, CS_DUF_DeletingIndex)) to sCallback_Text
50578>>>>>        End
50578>>>>>>
50578>>>>>        If (sCallback_Text contains "Creating index") Begin
50580>>>>>            Move (Replace("Creating index", sCallback_Text, CS_DUF_CreatingIndex)) to sCallback_Text
50581>>>>>        End
50581>>>>>>
50581>>>>>
50581>>>>>        Case Begin
50581>>>>>            Case (iCallback_Type = DF_Message_Text)
50583>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50584>>>>>                Set Action_Text  of ghoStatusPanel to ""
50585>>>>>                Case Break
50586>>>>>            Case (iCallback_Type = DF_Message_Heading_1)
50589>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50590>>>>>                Set Action_Text  of ghoStatusPanel to ""
50591>>>>>                Case Break
50592>>>>>            Case (iCallback_Type = DF_Message_Heading_2)
50595>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50596>>>>>                Set Action_Text  of ghoStatusPanel to ""
50597>>>>>                Case Break
50598>>>>>            Case (iCallback_Type = DF_Message_Heading_3)
50601>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50602>>>>>                Set Action_Text  of ghoStatusPanel to ""
50603>>>>>                Case Break
50604>>>>>            Case (iCallback_Type = DF_Message_Heading_4)
50607>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50608>>>>>                Set Action_Text  of ghoStatusPanel to ""
50609>>>>>                Case Break
50610>>>>>            Case (iCallback_Type = DF_Message_Heading_5)
50613>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50614>>>>>                Set Action_Text  of ghoStatusPanel to ""
50615>>>>>                Case Break
50616>>>>>            Case (iCallback_Type = DF_Message_Warning)
50619>>>>>                Send None
50620>>>>>                Case Break
50621>>>>>            Case (iCallback_Type = DF_Message_Progress_Title)
50624>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50625>>>>>                Set Action_Text  of ghoStatusPanel to ""
50626>>>>>                Case Break
50627>>>>>            Case (iCallback_Type = DF_Message_Progress_Value)
50630>>>>>                //*** Interpret numbers
50630>>>>>                Move (Left(sCallback_Text, (Pos(",", sCallback_Text) - 1)))                       to nReady
50631>>>>>                Move (Right(sCallback_Text, (Length(sCallback_Text) - Pos(",", sCallback_Text)))) to nTotal
50632>>>>>                Move ((nReady / nTotal) * 100)                                                    to iPerc
50633>>>>>                Set Action_Text of ghoStatusPanel to (String(iPerc) * String("% Done (Total Number of Records:") * String(nTotal) + ")")
50634>>>>>                Case Break
50635>>>>>            Case Else
50635>>>>>                Set Message_Text to ""
50636>>>>>                Set Action_Text  to ""
50637>>>>>        Case End
50637>>>>>
50637>>>>>        Send ProcessEvents of ghoStatusPanel
50638>>>>>        Function_Return False
50639>>>>>    End_Function
50640>>>>>
50640>>>>>    // * Dummy function for the Studio's Code Explorer *
50640>>>>>    Function PRIVATE_SUB_FUNCTIONS Returns Boolean
50642>>>>>        Function_Return False
50643>>>>>    End_Function
50644>>>>>
50644>>>>>    // *** Helper functions with compiled sql script code ***
50644>>>>>    //
50644>>>>>    // When dropping columns on some SQL back-ends they doesn't reclaim the space taken up by the columns dropped.
50644>>>>>    // For data types that are stored inline in the rows (int for example) it may even take up space on
50644>>>>>    // the new rows added after the alter statement. to get around this you need to create a clustered
50644>>>>>    // index on the table _or_ rebuild the clustered Index if it already has one. Rebuilding the index
50644>>>>>    // can be done with a REBUILD command after modifying the table. But be warned this can be slow on very big tables.
50644>>>>>    //   ALTER TABLE MyTable
50644>>>>>    //       REBUILD
50644>>>>>    Function _SqlUtilRemoveTableColumnMSSQL String sTableName String sColumnName Returns Boolean
50646>>>>>        Boolean bOK
50646>>>>>
50646>>>>>        If (Trim(sTableName) = "" or Trim(sColumnName) = "") Begin
50648>>>>>            Function_Return False
50649>>>>>        End
50649>>>>>>
50649>>>>>
50649>>>>>        SQLIncludeScriptFile ..\Scripts\DropConstraintAndColumnNameMSSQL.sql as DropConstraintAndColumnNameMSSQL.sql
50649>>>>>        Get _SqlUtilRemoveTableColumnByScript "DropConstraintAndColumnNameMSSQL.sql" sTableName sColumnName to bOK
50650>>>>>
50650>>>>>        Function_Return (bOK = True)
50651>>>>>    End_Function
50652>>>>>
50652>>>>>    // When dropping columns SQL Sever does not reclaim the space taken up by the columns dropped.
50652>>>>>    // For data types that are stored inline in the rows (int for example) it may even take up space on
50652>>>>>    // the new rows added after the alter statement. To get around this you need to create a clustered
50652>>>>>    // index on the table or rebuild the clustered Index if it already has one. Rebuilding the index
50652>>>>>    // can be done with a REBUILD command after modifying the table. But be warned this can be slow on very big tables.
50652>>>>>    //   ALTER TABLE MyTable
50652>>>>>    //       REBUILD
50652>>>>>    Function _SqlUtilRemoveTableColumnByScript String sMemScriptFile String sTableName String sColumnName Returns Boolean
50654>>>>>        tSQLScriptArray SQLScriptArray
50654>>>>>        tSQLScriptArray SQLScriptArray
50654>>>>>        String sDriverID
50654>>>>>        Boolean bOK
50654>>>>>        Integer iSize iCount
50654>>>>>
50654>>>>>        If (Trim(sTableName) = "" or Trim(sColumnName) = "") Begin
50656>>>>>            Function_Return False
50657>>>>>        End
50657>>>>>>
50657>>>>>
50657>>>>>        Get psDriverID to sDriverID
50658>>>>>        Get _SqlUtilReadResource sMemScriptFile to SQLScriptArray
50659>>>>>        If (SQLScriptArray.bError = True) Begin
50661>>>>>            Function_Return False
50662>>>>>        End
50662>>>>>>
50662>>>>>
50662>>>>>        Move (SizeOfArray(SQLScriptArray.sSQLScriptArray)) to iSize
50663>>>>>        Decrement iSize
50664>>>>>
50664>>>>>        For iCount from 0 to iSize
50670>>>>>>
50670>>>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "TABLE_NAME_XXX") Begin
50672>>>>>                Move (Replaces("TABLE_NAME_XXX",  SQLScriptArray.sSQLScriptArray[iCount], String(sTableName))) to SQLScriptArray.sSQLScriptArray[iCount]
50673>>>>>            End
50673>>>>>>
50673>>>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "COLUMN_NAME_XXX") Begin
50675>>>>>                Move (Replaces("COLUMN_NAME_XXX", SQLScriptArray.sSQLScriptArray[iCount], String(sColumnName))) to SQLScriptArray.sSQLScriptArray[iCount]
50676>>>>>            End
50676>>>>>>
50676>>>>>        Loop
50677>>>>>>
50677>>>>>
50677>>>>>        Get _SqlUtilExecuteEmbeddedScript SQLScriptArray sDriverID False "" to bOK
50678>>>>>
50678>>>>>        Function_Return (bOK = True)
50679>>>>>    End_Function
50680>>>>>
50680>>>>>    // Reads a SQL script file that has been compiled into the .exe program as a resource.
50680>>>>>    // Pass: The memory resource reference and a boolean True if you want to create the file on disk (in the Home folder).
50680>>>>>    // Returns: A tSQLScriptArray Struct with the Sql script as an uChar Array will be returned along with the a bError boolean.
50680>>>>>    Function _SqlUtilReadResource String sMemFileName Returns tSQLScriptArray
50682>>>>>        Integer iChannel iArgumentSize iCount
50682>>>>>        Number nByteCount
50682>>>>>        String sSQLScript
50682>>>>>        tSQLScriptArray SqlScriptArray
50682>>>>>        tSQLScriptArray SqlScriptArray
50682>>>>>        UChar[] uCharData
50683>>>>>
50683>>>>>        Move False to Err
50684>>>>>        Get Seq_New_Channel to iChannel
50685>>>>>        If (iChannel = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
50687>>>>>            Error DFERR_PROGRAM 'No channel available...'
50688>>>>>>
50688>>>>>            Move True to SqlScriptArray.bError
50689>>>>>            Function_Return SqlScriptArray
50690>>>>>        End
50690>>>>>>
50690>>>>>
50690>>>>>        // First decide the size of the script
50690>>>>>        Direct_Input channel iChannel ("Resource: " + sMemFileName)
50692>>>>>        Read_Block channel iChannel uCharData -1 // -1 means that all data should be read.
50694>>>>>        Close_Input channel iChannel
50696>>>>>
50696>>>>>        Move (SizeOfArray(uCharData)) to nByteCount
50697>>>>>        If (nByteCount  < 1) Begin
50699>>>>>            Send Seq_Release_Channel iChannel
50700>>>>>            Move True to SqlScriptArray.bError
50701>>>>>            Function_Return SqlScriptArray
50702>>>>>        End
50702>>>>>>
50702>>>>>
50702>>>>>        // If necessary change the string argument_size
50702>>>>>        // Read the script file from memory line-by-line
50702>>>>>        Direct_Input channel iChannel ("Resource: " + sMemFileName)
50704>>>>>            Move 0 to iCount
50705>>>>>            Repeat
50705>>>>>>
50705>>>>>                Readln channel iChannel sSQLScript
50707>>>>>                Move sSQLScript to SqlScriptArray.sSQLScriptArray[iCount]
50708>>>>>                Increment iCount
50709>>>>>            Until (SeqEof = True)
50711>>>>>        Close_Input channel iChannel
50713>>>>>        Send Seq_Release_Channel iChannel
50714>>>>>
50714>>>>>        // Finally "sanitize" the script by removing all comments.
50714>>>>>        Get _SqlUtilSanitizeScript SqlScriptArray to SqlScriptArray
50715>>>>>
50715>>>>>        Function_Return SqlScriptArray
50716>>>>>    End_Function
50717>>>>>
50717>>>>>    Function _SqlUtilExecuteEmbeddedScript tSQLScriptArray SQLScriptArray String sDriverID Boolean bCreateScriptFile String sMemFileName Boolean bShowProgr Returns Boolean
50719>>>>>        String sSQLVal sStmt sCR sGOKeyWord sNoCountKeyWord sMessage sExportFile
50719>>>>>        Handle hoSql hoSQLConnect hoStmt hoError
50719>>>>>        Integer i iMsgs iRows iRowType iCount iChunkCounter iChunkMax iOut iNextSet iMessage iPos
50719>>>>>        String[] sMsg aSQLQueryMessages
50721>>>>>        DateTime dtQueryExecStart dtQueryExecEnd
50721>>>>>        TimeSpan tsQuery
50721>>>>>        tSqlErrorArray aSqlErrorArray
50721>>>>>        tSqlErrorArray aSqlErrorArray
50721>>>>>        tSQLConnection SQLConnection
50721>>>>>        tSQLConnection SQLConnection
50721>>>>>        Boolean bShowProgress
50721>>>>>
50721>>>>>        If (num_arguments > 4) Begin
50723>>>>>            Move bShowProgr to bShowProgress
50724>>>>>        End
50724>>>>>>
50724>>>>>        Get phoSQLManager to hoSql
50725>>>>>
50725>>>>>        Get _SqlFindKeyWord CI_SQLGO to sGOKeyWord
50726>>>>>        // There seems to be a problem to pass strings when their value gets really big, aka
50726>>>>>        // above the argument_size level. It isn't clear when these problems starts but sooner
50726>>>>>        // or later SqlExecDirect stops working correctly with no error messages!
50726>>>>>        // To guard from this we set a max number of lines (iChunkMax) that can be processed
50726>>>>>        // at a time. Testing with the Create Chinook Database script; 500 seems like a number that works fine.
50726>>>>>        // A bonus of this is that it turns out that it is actually faster to run in chunks!
50726>>>>>        Get piChunkMax to iChunkMax
50727>>>>>        Move 0 to iChunkCounter
50728>>>>>        Move "" to sStmt
50729>>>>>
50729>>>>>        Get _SqlFindKeyWord CI_SQLSetNoCountOn to sNoCountKeyWord
50730>>>>>        Move (Character(13) + Character(10)) to sCR
50731>>>>>
50731>>>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
50732>>>>>
50732>>>>>        Get phoSQLManager  to hoSQL
50733>>>>>        If (sDriverID = ODBC_DRV_ID) Begin
50735>>>>>            If (Uppercase(SQLConnection.sConnectionString) contains CS_SQLIniDSNKeyword) Begin
50737>>>>>                Move (Pos(";", SQLConnection.sConnectionString)) to iPos
50738>>>>>                If (iPos > 0) Begin
50740>>>>>                    Move (Left(SQLConnection.sConnectionString, (iPos - 1))) to SQLConnection.sConnectionString
50741>>>>>                    Move (Trim(SQLConnection.sConnectionString)) to SQLConnection.sConnectionString
50742>>>>>                End
50742>>>>>>
50742>>>>>            End
50742>>>>>>
50742>>>>>        End
50742>>>>>>
50742>>>>>        Send SqlSetConnect of hoSQL sDriverID SQLConnection.sConnectionString
50743>>>>>        Get SqlConnect     of hoSQL "" "" to hoSQLConnect
50744>>>>>
50744>>>>>        If (hoSQLConnect <> 0) Begin
50746>>>>>            Move False to Err
50747>>>>>            Get SqlOpen of hoSQLConnect to hoStmt
50748>>>>>            If (hoStmt <> 0) Begin
50750>>>>>
50750>>>>>                // If the embedded resource should be written as a script file to disk:
50750>>>>>                If (bCreateScriptFile = True) Begin
50752>>>>>                    Get psHome of (phoWorkspace(ghoApplication)) to sExportFile
50753>>>>>                    Get vFolderFormat sExportFile to sExportFile
50754>>>>>                    Move (sExportFile + sMemFileName) to sExportFile
50755>>>>>                    Get Seq_New_Channel to iOut
50756>>>>>                    If (iOut <> DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
50758>>>>>                        Direct_Output channel iOut sExportFile
50760>>>>>                    End
50760>>>>>>
50760>>>>>                End
50760>>>>>>
50760>>>>>
50760>>>>>                // Record starting date/time stamp
50760>>>>>                Move (CurrentDateTime()) to dtQueryExecStart
50761>>>>>                // Turn on error handling if enabled
50761>>>>>                If (pbHandleQueryErrors(Self)) Begin
50763>>>>>                    Set pbSqlError to False
50764>>>>>                    Set paSqlErrorArray to aSqlErrorArray
50765>>>>>                    Move Error_Object_Id to hoError
50766>>>>>                    Move Self to Error_Object_Id
50767>>>>>                End
50767>>>>>>
50767>>>>>
50767>>>>>                Move (SizeOfArray(SQLScriptArray.sSQLScriptArray)) to iRows
50768>>>>>                Decrement iRows
50769>>>>>                If (sDriverID = MSSQLDRV_ID) Begin
50771>>>>>                    Move (sNoCountKeyWord + sCR) to sStmt
50772>>>>>                End
50772>>>>>>
50772>>>>>
50772>>>>>                for iCount from 0 to iRows
50778>>>>>>
50778>>>>>                    Move (SQLScriptArray.sSQLScriptArray[iCount]) to sSQLVal
50779>>>>>
50779>>>>>                    If (Uppercase(sSQLVal) <> sGOKeyWord) Begin
50781>>>>>                        If (sSQLVal <> "") Begin
50783>>>>>                            Move (sSQLVal + sCR) to sSQLVal
50784>>>>>                        End
50784>>>>>>
50784>>>>>                        Move (Append(sStmt, (sSQLVal))) to sStmt
50785>>>>>                    End
50785>>>>>>
50785>>>>>
50785>>>>>                    // - Each time we encounter a "GO" statement we execute it,
50785>>>>>                    // or if at the very end of the script.
50785>>>>>                    If (Uppercase(sSQLVal) = sGOKeyWord or iChunkCounter >= iChunkMax or iCount = iRows) Begin
50787>>>>>
50787>>>>>                        // - It turns out it can be at least 10 times faster to execute SQL statements in chunks,
50787>>>>>                        // instead of all in one go.
50787>>>>>                        Send SqlExecDirect of hoStmt sStmt
50788>>>>>
50788>>>>>                        If (bCreateScriptFile = True) Begin
50790>>>>>                            Write channel iOut sStmt
50792>>>>>                        End
50792>>>>>>
50792>>>>>                        Move "" to sStmt
50793>>>>>                        Move 0 to iChunkCounter
50794>>>>>                    End
50794>>>>>>
50794>>>>>                    Increment iChunkCounter
50795>>>>>                Loop
50796>>>>>>
50796>>>>>
50796>>>>>                Repeat
50796>>>>>>
50796>>>>>                    If (pbHandleQueryErrors(Self)) Begin
50798>>>>>                        Move hoError to Error_Object_Id
50799>>>>>                    End
50799>>>>>>
50799>>>>>                    Move (CurrentDateTime()) to dtQueryExecEnd
50800>>>>>
50800>>>>>                    Send _SqlColumnInfo hoStmt
50801>>>>>                    Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_ROWCOUNT to iRows
50802>>>>>                    Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_ROWCOUNT_TYPE to iRowType
50803>>>>>                    Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_NUMMESSAGES to iMsgs
50804>>>>>                    Set piRows    to iRows
50805>>>>>                    Set piRowType to iRowType
50806>>>>>
50806>>>>>                    If (iMsgs <> 0) Begin
50808>>>>>                        If (ghoDbUpdateHandler > 0) Begin
50810>>>>>                            Get paSQLQueryMessages of ghoDbUpdateHandler to aSQLQueryMessages
50811>>>>>                        End
50811>>>>>>
50811>>>>>                        for i from 1 to iMsgs
50817>>>>>>
50817>>>>>                            Get SqlGetMessage of hoStmt i to sMessage
50818>>>>>                            Get RemoveComponentIdentifier of hoStmt sMessage to sMessage
50819>>>>>                            If (bShowProgress = True) Begin
50821>>>>>                                If (Active_State(ghoStatusPanel)) Begin
50823>>>>>                                    Send Update_StatusPanel of ghoStatusPanel (Sformat("  SQLGetMessage iMessage %1 returned [%2]", iMessage, sMessage))
50824>>>>>                                End
50824>>>>>>
50824>>>>>                                Else Begin
50825>>>>>                                    Showln (Sformat("  SQLGetMessage iMessage %1 returned [%2]", iMessage, sMessage))
50827>>>>>                                End
50827>>>>>>
50827>>>>>                            End
50827>>>>>>
50827>>>>>                            Move sMessage to sMsg[SizeOfArray(sMsg)]
50828>>>>>                            Move sMessage to aSQLQueryMessages[SizeOfArray(aSQLQueryMessages)]
50829>>>>>                        Loop
50830>>>>>>
50830>>>>>
50830>>>>>
50830>>>>>                        If (ghoDbUpdateHandler > 0) Begin
50832>>>>>                            Set paSQLQueryMessages of ghoDbUpdateHandler to aSQLQueryMessages
50833>>>>>                        End
50833>>>>>>
50833>>>>>                        Set paQueryMessages to sMsg
50834>>>>>                    End
50834>>>>>>
50834>>>>>
50834>>>>>                    Get SQLNextResultSet of hoStmt to iNextSet
50835>>>>>                Until (iNextSet = 0)
50837>>>>>
50837>>>>>                Move (CurrentDateTime()) to dtQueryExecEnd
50838>>>>>            End
50838>>>>>>
50838>>>>>
50838>>>>>            Move (dtQueryExecEnd - dtQueryExecStart) to tsQuery
50839>>>>>            Set ptsQueryExec to tsQuery
50840>>>>>            Send SqlClose of hoStmt
50841>>>>>
50841>>>>>            If (bCreateScriptFile = True) Begin
50843>>>>>                Close_Output channel iOut
50845>>>>>                Send Seq_Release_Channel iOut
50846>>>>>            End
50846>>>>>>
50846>>>>>        End
50846>>>>>>
50846>>>>>        Send SqlDisconnect of hoSQLConnect
50847>>>>>
50847>>>>>        Function_Return (hoSQLConnect <> 0 and Err = False)
50848>>>>>    End_Function
50849>>>>>
50849>>>>>    Function _SqlUtilCreatePostGreSQLDatabaseByScript String sMemScriptFile String sDatabaseName Returns Boolean
50851>>>>>        tSQLScriptArray SQLScriptArray
50851>>>>>        tSQLScriptArray SQLScriptArray
50851>>>>>        String sDriverID sCollation
50851>>>>>        Boolean bOK
50851>>>>>        Integer iSize iCount
50851>>>>>
50851>>>>>        If (Trim(sDatabaseName) = "") Begin
50853>>>>>            Function_Return False
50854>>>>>        End
50854>>>>>>
50854>>>>>
50854>>>>>        Get psDriverID  to sDriverID
50855>>>>>        Get psCollation to sCollation
50856>>>>>        Get _SqlUtilReadResource sMemScriptFile to SQLScriptArray
50857>>>>>        If (SQLScriptArray.bError = True) Begin
50859>>>>>            Function_Return False
50860>>>>>        End
50860>>>>>>
50860>>>>>
50860>>>>>        Move (SizeOfArray(SQLScriptArray.sSQLScriptArray)) to iSize
50861>>>>>        Decrement iSize
50862>>>>>
50862>>>>>        For iCount from 0 to iSize
50868>>>>>>
50868>>>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "DATABASE_NAME_XXX") Begin
50870>>>>>                Move (Replaces("DATABASE_NAME_XXX",  SQLScriptArray.sSQLScriptArray[iCount], String(sDatabaseName))) to SQLScriptArray.sSQLScriptArray[iCount]
50871>>>>>            End
50871>>>>>>
50871>>>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "COLLATION_NAME_XXX") Begin
50873>>>>>                Move (Replaces("COLLATION_NAME_XXX", SQLScriptArray.sSQLScriptArray[iCount], String(sCollation))) to SQLScriptArray.sSQLScriptArray[iCount]
50874>>>>>            End
50874>>>>>>
50874>>>>>        Loop
50875>>>>>>
50875>>>>>
50875>>>>>        Get _SqlUtilExecuteEmbeddedScript SQLScriptArray sDriverID False "" to bOK
50876>>>>>
50876>>>>>        Function_Return (bOK = True)
50877>>>>>    End_Function
50878>>>>>
50878>>>>>    Function _SqlUtilCreateMySQLDatabaseByScript String sMemScriptFile String sDatabaseName Returns Boolean
50880>>>>>        tSQLScriptArray SQLScriptArray
50880>>>>>        tSQLScriptArray SQLScriptArray
50880>>>>>        String sDriverID sCollation
50880>>>>>        Boolean bOK
50880>>>>>        Integer iSize iCount
50880>>>>>
50880>>>>>        If (Trim(sDatabaseName) = "") Begin
50882>>>>>            Function_Return False
50883>>>>>        End
50883>>>>>>
50883>>>>>
50883>>>>>        Get psDriverID  to sDriverID
50884>>>>>        Get psCollation to sCollation
50885>>>>>        Get _SqlUtilReadResource sMemScriptFile to SQLScriptArray
50886>>>>>        If (SQLScriptArray.bError = True) Begin
50888>>>>>            Function_Return False
50889>>>>>        End
50889>>>>>>
50889>>>>>
50889>>>>>        Move (SizeOfArray(SQLScriptArray.sSQLScriptArray)) to iSize
50890>>>>>        Decrement iSize
50891>>>>>
50891>>>>>        For iCount from 0 to iSize
50897>>>>>>
50897>>>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "DATABASE_NAME_XXX") Begin
50899>>>>>                Move (Replaces("DATABASE_NAME_XXX",  SQLScriptArray.sSQLScriptArray[iCount], String(sDatabaseName))) to SQLScriptArray.sSQLScriptArray[iCount]
50900>>>>>            End
50900>>>>>>
50900>>>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "COLLATION_NAME_XXX") Begin
50902>>>>>                Move (Replaces("COLLATION_NAME_XXX", SQLScriptArray.sSQLScriptArray[iCount], String(sCollation))) to SQLScriptArray.sSQLScriptArray[iCount]
50903>>>>>            End
50903>>>>>>
50903>>>>>        Loop
50904>>>>>>
50904>>>>>        // ToDo: THIS FAILS BUT THE SQL SCRIPT WORKS IN MYSQL!
50904>>>>>        Get _SqlUtilExecuteEmbeddedScript SQLScriptArray sDriverID False "" to bOK
50905>>>>>
50905>>>>>        Function_Return (bOK = True)
50906>>>>>    End_Function
50907>>>>>
50907>>>>>    Function _StrToFieldNumber Integer iFile String sField Returns Integer
50909>>>>>        Integer iMax iPos
50909>>>>>        String sName
50909>>>>>
50909>>>>>        Move (Lowercase(sField)) to sField
50910>>>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iFile to iMax
50913>>>>>        For iPos from 0 to iMax
50919>>>>>>
50919>>>>>            Get_Attribute DF_FIELD_NAME of iFile iPos to sName
50922>>>>>            Move (Lowercase(sName)) to sName
50923>>>>>            If (sName = sField) Begin
50925>>>>>                Function_Return iPos
50926>>>>>            End
50926>>>>>>
50926>>>>>        Loop
50927>>>>>>
50927>>>>>        Function_Return -1
50928>>>>>    End_Function
50929>>>>>
50929>>>>>    // Checks if the passed connection id exists in the CLI interface.
50929>>>>>    // This might be needed by API-methods when a connection id is to be used and
50929>>>>>    // the connection id hasn't been established with the driver's CLI interface.
50929>>>>>    // NOTE: Only applicable for DAW drivers.
50929>>>>>    Function IsConnectionID String sConnectionID String sDriverID Returns Boolean
50931>>>>>        String sID sConnString
50931>>>>>        Integer iDriver iNumConn iCount
50931>>>>>        Handle hoCLI
50931>>>>>        Boolean bOK
50931>>>>>
50931>>>>>        Get IsDAWSQLDriver sDriverID to bOK
50932>>>>>        If (bOK = False) Begin
50934>>>>>            Error DFERR_PROGRAM "Connection ID's can only be used with DAW drivers."
50935>>>>>>
50935>>>>>            Function_Return False
50936>>>>>        End
50936>>>>>>
50936>>>>>
50936>>>>>        Move False to bOK
50937>>>>>        Get phoCLIHandler to hoCLI
50938>>>>>        If (hoCLI <> 0) Begin
50940>>>>>            Set psDriverID of hoCLI to sDriverID
50941>>>>>            Get DriverIndex of hoCLI sDriverID to iDriver
50942>>>>>
50942>>>>>            // If driver not loaded; load it.
50942>>>>>            If (iDriver = 0) Begin
50944>>>>>                Load_Driver sDriverID
50945>>>>>                Get DriverIndex sDriverID to iDriver
50946>>>>>            End
50946>>>>>>
50946>>>>>            If (iDriver <> 0) Begin
50948>>>>>                Get_Attribute DF_DRIVER_NUMBER_CONNECTION_IDS of iDriver to iNumConn
50951>>>>>                Decrement iNumConn
50952>>>>>                For iCount from 0 to iNumConn
50958>>>>>>
50958>>>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID_STRING of iDriver iCount to sConnString
50961>>>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID of iDriver iCount to sID
50964>>>>>                    If (sID = sConnectionID) Begin
50966>>>>>                        Move True to bOK
50967>>>>>                    End
50967>>>>>>
50967>>>>>                Loop
50968>>>>>>
50968>>>>>            End
50968>>>>>>
50968>>>>>        End
50968>>>>>>
50968>>>>>
50968>>>>>        Function_Return bOK
50969>>>>>    End_Function
50970>>>>>
50970>>>>>    Function IsDAWSQLDriver String sDriverID Returns Boolean
50972>>>>>        Boolean bOK
50972>>>>>        Move (sDriverID = MSSQLDRV_ID or sDriverID = DB2_DRV_ID or sDriverID = ODBC_DRV_ID or sDriverID = DFBTRDRV_ID) to bOK
50973>>>>>        Function_Return bOK
50974>>>>>    End_Function
50975>>>>>
50975>>>>>    Function IsMSSQLDriver Returns Boolean
50977>>>>>        Integer iDriverIndex
50977>>>>>        Get DriverIndex MSSQLDRV_ID to iDriverIndex
50978>>>>>        Function_Return (iDriverIndex <> 0)
50979>>>>>    End_Function
50980>>>>>
50980>>>>>    // Similar to _SqlCheckCurrentDriver but generates no error and it doesn't
50980>>>>>    // attempt to load the driver.
50980>>>>>    // Returns true if the passed driver is SQL based.
50980>>>>>    Function IsSQLDriver String sDriverID Returns Boolean
50982>>>>>        Boolean bOK
50982>>>>>        Get IsDAWSQLDriver sDriverID to bOK
50983>>>>>        Function_Return bOK
50984>>>>>    End_Function
50985>>>>>
50985>>>>>    // *** Error Handler ***
50985>>>>>    //
50985>>>>>    // Note: If the cDbUpdateHandler & cDbUpdateVersion classes are used this error handler is _not_
50985>>>>>    //       used. Instead the Error_Report in the cDbUpdateHandler i used.
50985>>>>>    Procedure Error_Report Integer iErrorNumber Integer iErrorLine String sErrorText
50987>>>>>        Integer iSize iErrorMode
50987>>>>>        tSqlErrorArray aSqlErrorArray
50987>>>>>        tSqlErrorArray aSqlErrorArray
50987>>>>>
50987>>>>>        If (pbProcessingError(Self)) Begin
50989>>>>>            Procedure_Return
50990>>>>>        End
50990>>>>>>
50990>>>>>
50990>>>>>        Get Error_Report_Mode to iErrorMode
50991>>>>>        If (iErrorMode = DUF_ERROR_NO_REPORT) Begin
50993>>>>>            Set Private.pbProcessingError to False
50994>>>>>            Procedure_Return
50995>>>>>        End
50995>>>>>>
50995>>>>>
50995>>>>>        Set pbProcessingError to True
50996>>>>>        Set pbSqlError to True
50997>>>>>        Get paSqlErrorArray      to aSqlErrorArray
50998>>>>>        Move (SizeOfArray(aSqlErrorArray.sSqlErrorArray)) to iSize
50999>>>>>        Move sErrorText          to aSqlErrorArray.sSqlErrorArray[iSize]
51000>>>>>        Get psSQLStatementString to aSqlErrorArray.sSqlStatementArray[iSize]
51001>>>>>        Move iErrorNumber        to aSqlErrorArray.iSqlErrorArray[iSize]
51002>>>>>        Set paSqlErrorArray      to aSqlErrorArray
51003>>>>>        Set pbProcessingError to False
51004>>>>>    End_Procedure
51005>>>>>
51005>>>>>    // *** Miscellanous Helper Functions ***
51005>>>>>    //
51005>>>>>    // Helper function. Takes a DF_FILE_ROOT_NAME value as parameter and
51005>>>>>    // returns the table name only; stripped of any prefix, path or filename extension.
51005>>>>>    Function _TableNameOnly String sTableName Returns String
51007>>>>>        Integer iPos
51007>>>>>        Move (Pos(":", sTableName)) to iPos
51008>>>>>        If (iPos <> 0) Begin
51010>>>>>            Move (Mid(sTableName, Length(sTableName), (iPos +1))) to sTableName
51011>>>>>        End  
51011>>>>>>
51011>>>>>        Move (Pos(".int", Lowercase(sTableName))) to iPos
51012>>>>>        If (iPos <> 0) Begin
51014>>>>>            Move (Left(sTableName, (iPos -1))) to sTableName
51015>>>>>        End  
51015>>>>>>
51015>>>>>        Function_Return sTableName
51016>>>>>    End_Function
51017>>>>>
51017>>>>>    // Removes any prefix from a table name.
51017>>>>>    // Example mssqldrv:mytable returns mytable
51017>>>>>    //         dbo.mytable returns mytable
51017>>>>>    Function _TableNoPrefix String sName Returns String
51019>>>>>        Integer iPos
51019>>>>>        Move (Pos(":", sName)) to iPos
51020>>>>>        If (iPos <> 0) Begin
51022>>>>>            Move (Mid(sName, Length(sName), (iPos + 1))) to sName
51023>>>>>        End
51023>>>>>>
51023>>>>>        Move (Pos(".", sName)) to iPos
51024>>>>>        If (iPos <> 0) Begin
51026>>>>>            Move (Mid(sName, Length(sName), (iPos + 1))) to sName
51027>>>>>        End
51027>>>>>>
51027>>>>>        Function_Return sName
51028>>>>>    End_Function
51029>>>>>    
51029>>>>>    Function _DriverIDFromRootName String sRootName Returns String
51031>>>>>        String sDriverID
51031>>>>>        Integer iPos
51031>>>>>        Move DATAFLEX_ID to sDriverID
51032>>>>>        Move (Pos(":", sRootName)) to iPos
51033>>>>>        If (iPos <> 0) Begin
51035>>>>>            Move (Left(sRootName, (iPos -1))) to sDriverID
51036>>>>>        End
51036>>>>>>
51036>>>>>        Function_Return sDriverID
51037>>>>>    End_Function
51038>>>>>    // Does the Rootname points to a .dat file?
51038>>>>>    Function _IsDatEntry Handle hTable Returns Boolean
51040>>>>>        Boolean bFound bIsIntEntry
51040>>>>>        String sRootName sNoDriverRootname sDriver
51040>>>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
51043>>>>>        Get _DriverIDFromRootName sRootName to sDriver
51044>>>>>        Get _TableNameOnly sRootName to sNoDriverRootname
51045>>>>>        Get _IsIntEntry hTable to bIsIntEntry
51046>>>>>        Move (bIsIntEntry = False and sDriver = DATAFLEX_ID) to bFound
51047>>>>>        Function_Return bFound
51048>>>>>    End_Function
51049>>>>>
51049>>>>>    // Checks that the RootName points to a .dat file and that the .dat file exists on disk.
51049>>>>>    Function _DatFileExists Handle hTable Returns Boolean
51051>>>>>        Boolean bExists
51051>>>>>        String sDataPath sRootName sNoDriverRootname
51051>>>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
51054>>>>>        Get _TableNameOnly sRootName to sNoDriverRootname
51055>>>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
51056>>>>>        File_Exist (sDataPath + "\" + sNoDriverRootname + ".dat") bExists
51057>>>>>        Function_Return bExists
51058>>>>>    End_Function
51059>>>>>    
51059>>>>>    // Does the Rootname contain a ".int" suffix.
51059>>>>>    Function _IsIntEntry Handle hTable Returns Boolean
51061>>>>>        Boolean bFound
51061>>>>>        String sRootName
51061>>>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
51064>>>>>        Move (Lowercase(sRootName) contains ".int") to bFound
51065>>>>>        Function_Return bFound
51066>>>>>    End_Function
51067>>>>>
51067>>>>>    // Checks to see if the .int file actually exists in the Data folder.
51067>>>>>    Function _IntFileExists Handle hTable Returns Boolean
51069>>>>>        Boolean bExists bIsIntFile
51069>>>>>        String sDataPath sIntFileName
51069>>>>>        Integer iPos
51069>>>>>        
51069>>>>>        Move False to bExists
51070>>>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
51071>>>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sIntFileName
51074>>>>>        Get _TableNameOnly sIntFileName to sIntFileName
51075>>>>>        Move (Pos(".int", Lowercase(sIntFileName))) to iPos
51076>>>>>        If (iPos = 0) Begin
51078>>>>>            Move (sIntFileName + ".int") to sIntFileName
51079>>>>>        End
51079>>>>>>
51079>>>>>        File_Exist (sDataPath + "\" + sIntFileName) bExists
51080>>>>>        Function_Return bExists    
51081>>>>>    End_Function
51082>>>>>        
51082>>>>>    // Returns True if the hTable's RootName has a driver <> DataFlex
51082>>>>>    Function _IsSQLEntry Handle hTable Returns Boolean
51084>>>>>        Boolean bFound bIsIntFile
51084>>>>>        String sLogicalName sRootName sNoDriverRootname sDriver
51084>>>>>        
51084>>>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
51087>>>>>        Get _DriverIDFromRootName sRootName to sDriver
51088>>>>>        Get _IsIntEntry hTable to bIsIntFile
51089>>>>>        Get _TableNameOnly sRootName to sNoDriverRootname
51090>>>>>        Move (bIsIntFile = True or sDriver <> DATAFLEX_ID) to bFound
51091>>>>>        Function_Return bFound
51092>>>>>    End_Function
51093>>>>>
51093>>>>>    // This is used in place of the DF_FILE_OPENED table attribute, because
51093>>>>>    // the table then needs to be open, which takes time.
51093>>>>>    Function _IsAliasTable Handle hTable Returns Boolean
51095>>>>>        Boolean bFound bIsIntTable
51095>>>>>        String sLogicalName sRootName sNoDriverRootname
51095>>>>>        
51095>>>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
51098>>>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
51101>>>>>        Get _TableNameOnly sRootName to sNoDriverRootname
51102>>>>>        Get _IsIntEntry hTable to bIsIntTable
51103>>>>>        // Do we have an Alias table?
51103>>>>>        Move (Lowercase(sLogicalName) <> Lowercase(sNoDriverRootname)) to bFound
51104>>>>>        Function_Return bFound
51105>>>>>    End_Function
51106>>>>>
51106>>>>>    // If the SQL table cannot be opened, we do this checking a bit different.
51106>>>>>    Function _IsSystemFile Handle hTable Returns Boolean
51108>>>>>        Boolean bIsSystem bIsSQL bExists
51108>>>>>        String sRootName sDataPath sDriver
51108>>>>>        String[] asIndexes
51109>>>>>        Move False to bIsSystem
51110>>>>>        
51110>>>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
51113>>>>>        Get _DriverIDFromRootName sRootName to sDriver
51114>>>>>        Get _TableNameOnly sRootName to sRootName
51115>>>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
51116>>>>>        Get _IsSQLEntry hTable to bIsSQL
51117>>>>>        If (bIsSQL = False) Begin
51119>>>>>            File_Exist (sDataPath + "\" + sRootName + ".dat") bExists
51120>>>>>            If (bExists = True) Begin
51122>>>>>                Open (sDataPath + "\" + sRootName + ".dat") as hTable
51124>>>>>                Get_Attribute DF_FILE_IS_SYSTEM_FILE of hTable to bIsSystem 
51127>>>>>                Close hTable
51128>>>>>            End
51128>>>>>>
51128>>>>>        End 
51128>>>>>>
51128>>>>>        Else Begin
51129>>>>>            Get _SqlUtilEnumerateIndexes sRootName sDriver to asIndexes
51130>>>>>            Move (SizeOfArray(asIndexes) = 0) to bIsSystem
51131>>>>>        End
51131>>>>>>
51131>>>>>        Function_Return bIsSystem
51132>>>>>    End_Function
51133>>>>>                          
51133>>>>>    // Removes any driver prefix and any .int suffix from the Rootname
51133>>>>>    // If any driver found, it will be placed in the ByRef param: sDriver.
51133>>>>>    Function _RemoveDriverFromRootName String sRootname String ByRef sDriver Returns String
51135>>>>>        String sNoDriverRootname
51135>>>>>        Integer iPos
51135>>>>>        
51135>>>>>        Move sRootname to sNoDriverRootname
51136>>>>>        Move (Pos(":", sRootname)) to iPos
51137>>>>>        If (iPos <> 0) Begin
51139>>>>>            Move (Left(sRootname, iPos -1)) to sDriver
51140>>>>>            Move (Mid(sRootname, Length(sRootname), iPos +1)) to sNoDriverRootname    
51141>>>>>        End
51141>>>>>>
51141>>>>>        Else Begin
51142>>>>>            Move DATAFLEX_ID to sDriver
51143>>>>>        End
51143>>>>>>
51143>>>>>        Move (Pos(".int", Lowercase(sNoDriverRootname))) to iPos
51144>>>>>        If (iPos <> 0) Begin
51146>>>>>            Move (Left(sNoDriverRootname, iPos -1)) to sNoDriverRootname
51147>>>>>        End
51147>>>>>>
51147>>>>>        Function_Return sNoDriverRootname    
51148>>>>>    End_Function
51149>>>>>
51149>>>>>    Function _CountFilelistSystemTables Returns Integer
51151>>>>>        tFilelist[] FileListTables
51151>>>>>        tFilelist[] FileListTables
51152>>>>>        Integer iCount iSize iItems
51152>>>>>        
51152>>>>>        Move 0 to iItems
51153>>>>>        Get pFileListArray to FileListTables
51154>>>>>        Move (SizeOfArray(FileListTables)) to iSize
51155>>>>>        If (iSize <> 0) Begin
51157>>>>>            Decrement iSize
51158>>>>>            for iCount from 0 to iSize
51164>>>>>>
51164>>>>>                If (FileListTables[iCount].bIsSystemFile = True) Begin
51166>>>>>                    Increment iItems
51167>>>>>                End
51167>>>>>>
51167>>>>>            Loop
51168>>>>>>
51168>>>>>        End
51168>>>>>>
51168>>>>>        Function_Return iItems    
51169>>>>>    End_Function
51170>>>>>
51170>>>>>    Function _CountFileListAliasTables Returns Integer
51172>>>>>        tFilelist[] FileListTables
51172>>>>>        tFilelist[] FileListTables
51173>>>>>        Integer iCount iSize iItems
51173>>>>>        
51173>>>>>        Move 0 to iItems
51174>>>>>        Get pFileListArray to FileListTables
51175>>>>>        Move (SizeOfArray(FileListTables)) to iSize
51176>>>>>        If (iSize <> 0) Begin
51178>>>>>            Decrement iSize
51179>>>>>            for iCount from 0 to iSize
51185>>>>>>
51185>>>>>                If (FileListTables[iCount].bIsAlias = True) Begin
51187>>>>>                    Increment iItems
51188>>>>>                End
51188>>>>>>
51188>>>>>            Loop
51189>>>>>>
51189>>>>>        End
51189>>>>>>
51189>>>>>        Function_Return iItems    
51190>>>>>    End_Function
51191>>>>>
51191>>>>>    Function _CountFileListMasterTables Returns Integer
51193>>>>>        String sRootName sLogicalName sDriver sNoDriverRootname
51193>>>>>        Handle hTable
51193>>>>>        Integer iSize iItems
51193>>>>>        Boolean bIsAlias bIsIntTable
51193>>>>>        
51193>>>>>        Move 0 to iItems
51194>>>>>        Move 0 to hTable 
51195>>>>>        Repeat
51195>>>>>>
51195>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
51198>>>>>            If (hTable <> 0 and hTable <> 50) Begin
51200>>>>>                Get _IsAliasTable hTable to bIsAlias
51201>>>>>                If (bIsAlias = False) Begin
51203>>>>>                    Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
51206>>>>>                    Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName                    
51209>>>>>                    Get _RemoveDriverFromRootName sRootName (&sDriver) to sNoDriverRootname
51210>>>>>                    Get _IsIntEntry hTable to bIsIntTable
51211>>>>>                    If (sDriver <> DATAFLEX_ID and Lowercase(sNoDriverRootname) = Lowercase(sLogicalName)) Begin
51213>>>>>                        Increment iItems
51214>>>>>                    End
51214>>>>>>
51214>>>>>                End
51214>>>>>>
51214>>>>>            End
51214>>>>>>
51214>>>>>        Until (hTable = 0)
51216>>>>>        
51216>>>>>        Function_Return iItems
51217>>>>>    End_Function
51218>>>>>
51218>>>>>    Function _CountFileListOpenErrors Returns Integer
51220>>>>>        tFilelist[] FileListTables
51220>>>>>        tFilelist[] FileListTables
51221>>>>>        Integer iCount iSize iItems
51221>>>>>        
51221>>>>>        Move 0 to iItems
51222>>>>>        Get pFileListArray to FileListTables
51223>>>>>        Move (SizeOfArray(FileListTables)) to iSize
51224>>>>>        If (iSize <> 0) Begin
51226>>>>>            Decrement iSize
51227>>>>>            for iCount from 0 to iSize
51233>>>>>>
51233>>>>>                If (FileListTables[iCount].bErrorOpening = True) Begin
51235>>>>>                    Increment iItems
51236>>>>>                End
51236>>>>>>
51236>>>>>            Loop
51237>>>>>>
51237>>>>>        End
51237>>>>>>
51237>>>>>        Function_Return iItems    
51238>>>>>    End_Function 
51239>>>>>
51239>>>>>    // Checks all Alias Filelist entries for errors,
51239>>>>>    // and return them as a string array of RootNames.
51239>>>>>    Function _CountFileListAliasErrors Returns tFilelist[]
51241>>>>>        Integer iCount iItem
51241>>>>>        Handle hTable
51241>>>>>        Boolean bIsAlias bOK
51241>>>>>        String sRootName
51241>>>>>        tFilelist[] FileListArray
51241>>>>>        tFilelist[] FileListArray
51242>>>>>        
51242>>>>>        Move 0 to iCount
51243>>>>>        Move 0 to hTable
51244>>>>>        Repeat
51244>>>>>>
51244>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
51247>>>>>            If (hTable <> 0 and hTable <> 50) Begin
51249>>>>>                Get _IsAliasTable hTable to bIsAlias
51250>>>>>                If (bIsAlias = True) Begin
51252>>>>>                    Get _FindAliasEntryError hTable to iItem
51253>>>>>                    If (iItem <> 0) Begin
51255>>>>>                        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
51258>>>>>                        Move hTable    to FileListArray[iCount].hTable
51259>>>>>                        Move sRootName to FileListArray[iCount].sRootName
51260>>>>>                    End
51260>>>>>>
51260>>>>>                    Add iItem to iCount
51261>>>>>                End
51261>>>>>>
51261>>>>>            End
51261>>>>>>
51261>>>>>        Until (hTable = 0)
51263>>>>>        
51263>>>>>        Function_Return FileListArray
51264>>>>>    End_Function
51265>>>>>
51265>>>>>    // Helper function for _CountFileListAliasErrors.
51265>>>>>    // Checks to see if an Alias Filelist entry is correct
51265>>>>>    // What it does:
51265>>>>>    //  1. Checks that the Filelist entry is an Alias table
51265>>>>>    //  2. If an Alias, checks if the RootName points to a valid Table
51265>>>>>    Function _FindAliasEntryError Handle hTable Returns Integer
51267>>>>>        Handle hMasterTable
51267>>>>>        String sDataPath sDriver sLogicalNameAlias sRootNameAlias sNoDriverRootnameAlias sLogicalNameMaster sRootNameMaster sNoDriverRootnameMaster
51267>>>>>        Boolean bOK bFound bIsAlias bIsAliasSQL bIsMasterSQL bIsIntFile
51267>>>>>        Integer iRetval
51267>>>>>        
51267>>>>>        Get _IsAliasTable hTable to bIsAlias
51268>>>>>        If (bIsAlias = False) Begin
51270>>>>>            Function_Return 0
51271>>>>>        End
51271>>>>>>
51271>>>>>        
51271>>>>>        Move 0 to iRetval
51272>>>>>        Move False to bOK
51273>>>>>        Move False to bIsAliasSQL
51274>>>>>        Move False to bIsMasterSQL
51275>>>>>
51275>>>>>        Get _IsIntEntry hTable to bIsIntFile
51276>>>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootNameAlias
51279>>>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalNameAlias
51282>>>>>        Get _TableNameOnly sRootNameAlias to sNoDriverRootnameAlias
51283>>>>>        Get UtilAliasToMasterTableHandle hTable to hMasterTable
51284>>>>>        Move (hMasterTable <> 0) to bOK
51285>>>>>        If (bOK = True) Begin
51287>>>>>            Get _IsSQLEntry hTable       to bIsAliasSQL
51288>>>>>            Get _IsSQLEntry hMasterTable to bIsMasterSQL 
51289>>>>>            Move (bIsAliasSQL = bIsMasterSQL) to bOK
51290>>>>>        End
51290>>>>>>
51290>>>>>        
51290>>>>>        // Checks that the .int file exists in the Data folder
51290>>>>>        If (bIsIntFile = True) Begin
51292>>>>>            Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
51293>>>>>            File_Exist (sDataPath + "\" + sNoDriverRootnameAlias) bOK
51294>>>>>        End
51294>>>>>>
51294>>>>>
51294>>>>>        If (bOK = False) Begin
51296>>>>>            Move 1 to iRetval
51297>>>>>        End
51297>>>>>>
51297>>>>>        Function_Return iRetval
51298>>>>>    End_Function
51299>>>>>        
51299>>>>>    // Returns the first datapath found in the psDataPath property.
51299>>>>>    // The returned path always ends with a "\"
51299>>>>>    Function psDataPathFirstPart Returns String
51301>>>>>        String sDataPath
51301>>>>>        Integer iCount
51301>>>>>
51301>>>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
51302>>>>>        Get CountOfPaths of (phoWorkspace(ghoApplication)) sDataPath to iCount
51303>>>>>        If (iCount > 1) Begin
51305>>>>>            Get PathAtIndex of (phoWorkspace(ghoApplication)) sDataPath 1 to sDataPath
51306>>>>>        End
51306>>>>>>
51306>>>>>        If (sDataPath <> "") Begin
51308>>>>>            Get vFolderFormat sDataPath to sDataPath
51309>>>>>        End
51309>>>>>>
51309>>>>>
51309>>>>>        Function_Return sDataPath
51310>>>>>    End_Function
51311>>>>>
51311>>>>>    Function psLogTextFileWithPath Returns String
51313>>>>>        String sFileName
51313>>>>>        Handle hoLogFile
51313>>>>>        Get phoLogFile to hoLogFile
51314>>>>>        Get psLogTextFileWithPath of hoLogFile to sFileName
51315>>>>>        Function_Return sFileName
51316>>>>>    End_Function
51317>>>>>
51317>>>>>    Function phoLogFile Returns Handle
51319>>>>>        Handle hoLogFile   
51319>>>>>        Boolean bErr
51319>>>>>        
51319>>>>>        Move Err to bErr
51320>>>>>        Move 0 to hoLogFile
51321>>>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT  
51322>>>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
51323>>>>>        Delegate Get phoLogFile to hoLogFile
51325>>>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
51326>>>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
51327>>>>>        Move bErr to Err
51328>>>>>        
51328>>>>>        Function_Return hoLogFile
51329>>>>>    End_Function
51330>>>>>
51330>>>>>    Function pnCurrentVersionUpdate Returns Number
51332>>>>>        Number nCurrentVersionUpdate
51332>>>>>
51332>>>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
51333>>>>>        Delegate Get pnCurrentVersionUpdate to nCurrentVersionUpdate
51335>>>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
51336>>>>>
51336>>>>>        Function_Return nCurrentVersionUpdate
51337>>>>>    End_Function
51338>>>>>
51338>>>>>    Procedure LogError String sText Boolean bError
51340>>>>>        Handle hoLogFile
51340>>>>>        Number nCurrentVersionUpdate
51340>>>>>
51340>>>>>        Get phoLogFile to hoLogFile
51341>>>>>        If (hoLogFile = 0) Begin
51343>>>>>            Procedure_Return
51344>>>>>        End
51344>>>>>>
51344>>>>>        Get pnCurrentVersionUpdate to nCurrentVersionUpdate
51345>>>>>
51345>>>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
51346>>>>>        Send LogError of hoLogFile nCurrentVersionUpdate 0 sText 0 bError
51347>>>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
51348>>>>>    End_Procedure
51349>>>>>
51349>>>>>    Function pbContinueOnError Returns Boolean
51351>>>>>        Boolean bContinueOnError
51351>>>>>        If (ghoDbUpdateHandler > 0) Begin
51353>>>>>            Get pbContinueOnError of ghoDbUpdateHandler to bContinueOnError
51354>>>>>        End
51354>>>>>>
51354>>>>>        Function_Return bContinueOnError
51355>>>>>    End_Function
51356>>>>>
51356>>>>>
51356>>>>>    Function _UtilUpdateTAGFile String sFullTAGFileName String sColumnName Returns Boolean
51358>>>>>        Integer iChIn iChOut // iCount
51358>>>>>        Boolean bExists
51358>>>>>        String sExistingColumn
51358>>>>>
51358>>>>>        Move False to bExists
51359>>>>>        Get Seq_New_Channel to iChIn
51360>>>>>        Get Seq_New_Channel to iChOut
51361>>>>>        If (iChIn = DF_SEQ_CHANNEL_NOT_AVAILABLE or iChOut = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
51363>>>>>            Function_Return True
51364>>>>>        End
51364>>>>>>
51364>>>>>
51364>>>>>        Move False to Err
51365>>>>>        // The following line should also use the channel attribute. (Thank you, Hans van de Laar)
51365>>>>>        Direct_Input channel iChIn ("'" + sFullTAGFileName + "'")
51367>>>>>        While (not(SeqEof))
51371>>>>>            Readln channel iChIn sExistingColumn
51373>>>>>            If (Uppercase(sExistingColumn) = Uppercase(sColumnName)) Begin
51375>>>>>                Move True to bExists
51376>>>>>            End
51376>>>>>>
51376>>>>>            If (Trim(sExistingColumn) = "") Begin
51378>>>>>                Move True to SeqEof
51379>>>>>            End
51379>>>>>>
51379>>>>>        Loop
51380>>>>>>
51380>>>>>        Close_Input channel iChIn
51382>>>>>        Send Seq_Release_Channel iChIn
51383>>>>>
51383>>>>>        If (bExists = False) Begin
51385>>>>>            Append_Output channel iChOut sFullTAGFileName
51387>>>>>            Writeln channel iChOut sColumnName
51390>>>>>            Close_Output channel iChOut
51392>>>>>            Send Seq_Release_Channel iChOut
51393>>>>>        End
51393>>>>>>
51393>>>>>
51393>>>>>        Function_Return (Err = False)
51394>>>>>    End_Function
51395>>>>>
51395>>>>>    // Changes source code files.
51395>>>>>    // Pass a file name with full path and a value to search for, together with the value
51395>>>>>    // to change to. Can e.g. be used for changing all .int files from using a fixed server name,
51395>>>>>    // to use a Connection ID.
51395>>>>>    // Sample: Get _UtilChangeSourceCodeLine "C:\DataFlex 18.2 Examples\Order Entry\Data\Order.int" "SERVER_NAME SERVER=(local)\SQLEXPRESS1" "SERVER_NAME DFCONNID=ChinookDb"
51395>>>>>    // Pass "True" for the bShowResult if you want to see the result while it works. Showln will then be used for output
51395>>>>>    // Returns True if no errors occured.
51395>>>>>    Function _UtilChangeSourceCodeLine String sFileName String sChangeFrom String sChangeTo Boolean bShowResult Returns Boolean
51397>>>>>        Integer iCh iRow iItems iCount
51397>>>>>        String sValue sRow
51397>>>>>        String[] sFileArray
51398>>>>>        Boolean bExists bIsActive bFileChange
51398>>>>>
51398>>>>>        Move False to Err
51399>>>>>        Move 0 to iRow
51400>>>>>        Move False to bFileChange
51401>>>>>
51401>>>>>        If (ghoStatusPanel <> 0) Begin
51403>>>>>            Get Active_state of ghoStatusPanel to bIsActive
51404>>>>>        End
51404>>>>>>
51404>>>>>
51404>>>>>        Get vFilePathExists sFileName to bExists
51405>>>>>        If (bExists = False) Begin
51407>>>>>            If (bShowResult = True) Begin
51409>>>>>                If (bIsActive = True) Begin
51411>>>>>                    Send Update_StatusPanel of ghoStatusPanel ("File does not exist:" * String(sFileName))
51412>>>>>                End
51412>>>>>>
51412>>>>>                Else Begin
51413>>>>>                    Showln "File does not exist: " sFileName
51416>>>>>                End
51416>>>>>>
51416>>>>>            End
51416>>>>>>
51416>>>>>            Function_Return False
51417>>>>>        End
51417>>>>>>
51417>>>>>
51417>>>>>        Get Seq_Open_Input_Channel sFileName to iCh
51418>>>>>        If (iCh < 1) Begin
51420>>>>>            Function_Return False
51421>>>>>        End
51421>>>>>>
51421>>>>>
51421>>>>>        If (bShowResult = True) Begin
51423>>>>>            If (ghoStatusPanel <> 0) Begin
51425>>>>>                Get Active_state of ghoStatusPanel to bIsActive
51426>>>>>                If (bIsActive = True) Begin
51428>>>>>                    Set Message_Text of ghoStatusPanel to sFileName
51429>>>>>                    Send Update_StatusPanel of ghoStatusPanel ("sChangeFrom =" * String(sChangeFrom) * "sChangeTo =" * String(sChangeTo))
51430>>>>>                    Send DoAdvance of ghoProgressBar
51431>>>>>                End
51431>>>>>>
51431>>>>>            End
51431>>>>>>
51431>>>>>            Else Begin
51432>>>>>                Showln ""
51434>>>>>                Showln "sFileName = " sFileName
51437>>>>>                Showln "sChangeFrom = " sChangeFrom " sChangeTo = " sChangeTo
51442>>>>>            End
51442>>>>>>
51442>>>>>        End
51442>>>>>>
51442>>>>>
51442>>>>>        While (not(SeqEof))
51446>>>>>            Readln channel iCh sRow
51448>>>>>            If (Uppercase(sRow) contains Uppercase(sChangeFrom)) Begin
51450>>>>>                // Change the whole line to the new connection id:
51450>>>>>                Move sChangeTo to sRow 
51451>>>>>                Move True to bFileChange
51452>>>>>            End
51452>>>>>>
51452>>>>>            Move sRow to sFileArray[iRow]
51453>>>>>            Increment iRow
51454>>>>>        Loop
51455>>>>>>
51455>>>>>        Send Seq_Close_Channel iCh
51456>>>>>
51456>>>>>//        Sleep 1 // Wait for Windows to close the file
51456>>>>>
51456>>>>>        Get Seq_Open_Output_Channel sFileName to iCh
51457>>>>>        If (iCh < 1) Begin
51459>>>>>            Function_Return False
51460>>>>>        End
51460>>>>>>
51460>>>>>        Move (SizeOfArray(sFileArray)) to iItems
51461>>>>>        Decrement iItems
51462>>>>>
51462>>>>>        for iCount from 0 to iItems
51468>>>>>>
51468>>>>>            Move sFileArray[iCount] to sValue
51469>>>>>            Writeln channel iCh sValue
51472>>>>>        Loop
51473>>>>>>
51473>>>>>        Send Seq_Close_Channel iCh
51474>>>>>
51474>>>>>        Function_Return bFileChange
51475>>>>>    End_Function
51476>>>>>
51476>>>>>    // This message creates an error log in the "Home" folder named "SQLErrorLog.txt",
51476>>>>>    // and opens it in "notepad.exe".
51476>>>>>    // Note: This is _not_ used by the cDbUpdateHandler & cDbUpdateVersion classes!
51476>>>>>    //       Instead the cDbUpdateLogFile's WriteErrorLog & ShowErrorLog are used.
51476>>>>>    Procedure _UtilShowErrorList
51478>>>>>        tSqlErrorArray aSqlErrorArray
51478>>>>>        tSqlErrorArray aSqlErrorArray
51478>>>>>        Integer iRows iCount iCh iErrorNum
51478>>>>>        String sPath sFileName sErrorTxt sStatement
51478>>>>>
51478>>>>>        Get psHome of (phoWorkspace(ghoApplication)) to sPath
51479>>>>>        Get vFolderFormat sPath to sPath
51480>>>>>        Move "SQLErrorLog.txt"  to sFileName
51481>>>>>        Get Seq_Open_Output_Channel (sPath + sFileName) to iCh
51482>>>>>            Get paSqlErrorArray to aSqlErrorArray
51483>>>>>            Move (SizeOfArray(aSqlErrorArray.sSqlErrorArray)) to iRows
51484>>>>>            If (iRows > 0) Begin
51486>>>>>                Decrement iRows
51487>>>>>                for iCount from 0 to iRows
51493>>>>>>
51493>>>>>                    Move aSqlErrorArray.sSqlErrorArray[iCount]      to sErrorTxt
51494>>>>>                    Move aSqlErrorArray.sSqlStatementArray[iCount]  to sStatement
51495>>>>>                    Move aSqlErrorArray.iSqlErrorArray[iCount]      to iErrorNum
51496>>>>>                    Writeln channel iCh "Error No: " iErrorNum " Error Text: " sErrorTxt
51502>>>>>                    Writeln channel iCh "SQL Statement: " sStatement
51506>>>>>                Loop
51507>>>>>>
51507>>>>>            End
51507>>>>>>
51507>>>>>        Send Seq_Close_Channel iCh
51508>>>>>
51508>>>>>        If (iRows > 0) Begin
51510>>>>>            Runprogram Shell Background (sPath + sFileName)
51511>>>>>        End
51511>>>>>>
51511>>>>>    End_Procedure
51512>>>>>
51512>>>>>    // For this to be returning a True value, the table number needs to be in the Filelist.cfg,
51512>>>>>    // and the table needs to exist as an SQL table.
51512>>>>>    Function _UtilTableIsSql Handle hTable Returns Boolean
51514>>>>>        String sRootName sDriverID
51514>>>>>        Boolean bIsSQL
51514>>>>>
51514>>>>>        Move False to bIsSQL
51515>>>>>        If (hTable > 0) Begin
51517>>>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
51520>>>>>            Get _UtilTableIsSqlByRootName sRootName to bIsSQL
51521>>>>>            If (bIsSQL = True) Begin
51523>>>>>                Get psDriverID to sDriverID
51524>>>>>                Get _TableNameOnly sRootName to sRootName
51525>>>>>                Get _SqlUtilCheckIfTableNameExists sRootName sDriverID to bIsSQL
51526>>>>>            End
51526>>>>>>
51526>>>>>        End
51526>>>>>>
51526>>>>>
51526>>>>>        Function_Return bIsSQL
51527>>>>>    End_Function
51528>>>>>
51528>>>>>    // Note: This version uses the pasSQLDataTables array(!)
51528>>>>>    //       Thus that property needs to have been initialized before
51528>>>>>    //       calling this function.
51528>>>>>    Function _UtilTableIsSql_Ex Handle hTable Returns Boolean
51530>>>>>        String sRootName sDriverID
51530>>>>>        Boolean bIsSQL
51530>>>>>
51530>>>>>        Move False to bIsSQL
51531>>>>>        If (hTable > 0) Begin
51533>>>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
51536>>>>>            Get _UtilTableIsSqlByRootName sRootName to bIsSQL
51537>>>>>            If (bIsSQL = True) Begin
51539>>>>>                Get psDriverID to sDriverID
51540>>>>>                Get _TableNameOnly sRootName to sRootName
51541>>>>>                Get _SqlUtilCheckIfTableNameExists_Ex sRootName sDriverID to bIsSQL
51542>>>>>            End
51542>>>>>>
51542>>>>>        End
51542>>>>>>
51542>>>>>
51542>>>>>        Function_Return bIsSQL
51543>>>>>    End_Function
51544>>>>>
51544>>>>>    Function _UtilTableIsSqlByRootName String sRootName Returns Boolean
51546>>>>>        Boolean bIsSQL
51546>>>>>        Move (sRootName contains ":") to bIsSQL
51547>>>>>        Function_Return bIsSQL
51548>>>>>    End_Function
51549>>>>>
51549>>>>>    // Checks if a table exists as an SQL table. Returns = True if it does.
51549>>>>>    Function _SqlUtilCheckIfTableNameExists String sTableName String sDriverID Returns Boolean
51551>>>>>        String sDatabase sSchema sVal
51551>>>>>        Boolean bExists
51551>>>>>        String[] asTablesArray
51552>>>>>        Integer iItem
51552>>>>>
51552>>>>>        Move False to bExists
51553>>>>>        Get psDatabase to sDatabase
51554>>>>>        Get psSchema   to sSchema
51555>>>>>        If (sDriverID = DATAFLEX_ID or sDatabase = "") Begin
51557>>>>>            Error DFERR_PROGRAM ("Function _SqlUtilCheckIfTableNameExists: psDatabase =" * String(sDatabase) * "psDriver =" * String(sDriverID))
51558>>>>>>
51558>>>>>            Function_Return False
51559>>>>>        End
51559>>>>>>
51559>>>>>        Get _SqlUtilEnumerateTables sDriverID sDatabase sSchema to asTablesArray
51560>>>>>        Move (SearchArray(sTableName, asTablesArray, Desktop, (RefFunc(DFSTRICMP)))) to iItem
51561>>>>>        If (iItem <> -1) Begin
51563>>>>>            Move True to bExists
51564>>>>>        End
51564>>>>>>
51564>>>>>        Function_Return bExists
51565>>>>>    End_Function
51566>>>>>
51566>>>>>    // Checks if a table exists as an SQL table. Returns = True if it does.
51566>>>>>    // This alternative is much faster as it first enumerates all SQL tables
51566>>>>>    Function _SqlUtilCheckIfTableNameExists_Ex String sTableName String sDriverID Returns Boolean
51568>>>>>        String sDatabase sSchema sVal
51568>>>>>        Boolean bExists
51568>>>>>        String[] asTablesArray
51569>>>>>        Integer iItem
51569>>>>>
51569>>>>>        Move False to bExists
51570>>>>>        Get psDatabase to sDatabase
51571>>>>>        Get psSchema   to sSchema
51572>>>>>        If (sDriverID = DATAFLEX_ID or sDatabase = "") Begin
51574>>>>>            Error DFERR_PROGRAM ("Function _SqlUtilCheckIfTableNameExists: psDatabase =" * String(sDatabase) * "psDriver =" * String(sDriverID))
51575>>>>>>
51575>>>>>            Function_Return False
51576>>>>>        End
51576>>>>>>
51576>>>>>        Get pasSQLDataTables to asTablesArray
51577>>>>>        Move (SearchArray(sTableName, asTablesArray, Desktop, (RefFunc(DFSTRICMP)))) to iItem
51578>>>>>        If (iItem <> -1) Begin
51580>>>>>            Move True to bExists
51581>>>>>        End
51581>>>>>>
51581>>>>>        Function_Return bExists
51582>>>>>    End_Function
51583>>>>>
51583>>>>>    // Checks that the passed hTable number both exists in Filelist.cfg and
51583>>>>>    // that the embedded .dat file exists on disk.
51583>>>>>    Function _UtilTableIsEmbedded Handle hTable Returns Boolean
51585>>>>>        Boolean bExists bIsEmbedded
51585>>>>>        String sDataPath sRootName
51585>>>>>
51585>>>>>        Get _UtilTableNumberIsInUse hTable to bExists
51586>>>>>        If (bExists = False) Begin
51588>>>>>            Function_Return False
51589>>>>>        End
51589>>>>>>
51589>>>>>
51589>>>>>        Move False to bIsEmbedded
51590>>>>>        If (hTable > 0) Begin
51592>>>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
51595>>>>>            Move (not(sRootName contains ":")) to bIsEmbedded
51596>>>>>        End
51596>>>>>>
51596>>>>>        If (bIsEmbedded = True) Begin
51598>>>>>            Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
51599>>>>>            Get vFolderFormat sDataPath to sDataPath
51600>>>>>            Get vFilePathExists (sDataPath + sRootName + ".dat") to bIsEmbedded
51601>>>>>        End
51601>>>>>>
51601>>>>>
51601>>>>>        Function_Return bIsEmbedded
51602>>>>>    End_Function
51603>>>>>
51603>>>>>    // Returns the DateTime of the passed file name was modified, with seconds (only) precision.
51603>>>>>    Function FileModTime String sFileName Returns DateTime
51605>>>>>        Date dDate
51605>>>>>        Integer iYY iHH iMM iSS
51605>>>>>        Boolean bExists
51605>>>>>        DateTime dtFileDateTime
51605>>>>>
51605>>>>>        Move (NullDateTime()) to dtFileDateTime
51606>>>>>        Get vFilePathExists sFileName to bExists
51607>>>>>        If (bExists = True) Begin
51609>>>>>            Get_File_Mod_Time sFileName to dDate iHH iMM iSS
51613>>>>>            Move dDate            to dtFileDateTime
51614>>>>>            Move (DateGetYear       (dtFileDateTime))      to iYY
51615>>>>>            Move (DateSetYear       (dtFileDateTime, iYY)) to dtFileDateTime
51616>>>>>            Move (DateSetHour       (dtFileDateTime, iHH)) to dtFileDateTime
51617>>>>>            Move (DateSetMinute     (dtFileDateTime, iMM)) to dtFileDateTime
51618>>>>>            Move (DateSetSecond     (dtFileDateTime, iSS)) to dtFileDateTime
51619>>>>>            Move (DateSetMillisecond(dtFileDateTime, 0))   to dtFileDateTime
51620>>>>>        End
51620>>>>>>
51620>>>>>
51620>>>>>        Function_Return dtFileDateTime
51621>>>>>    End_Function
51622>>>>>
51622>>>>>    // Returns True if the file passed as sFileName1 is newer than sFileName2.
51622>>>>>    Function IsFileTimeNewer String sFileName1 String sFileName2 Returns Boolean
51624>>>>>        Boolean bExists bIsNewer
51624>>>>>        DateTime dtFileDateTime1 dtFileDateTime2
51624>>>>>
51624>>>>>        Move False to bIsNewer
51625>>>>>        Get vFilePathExists sFileName1 to bExists
51626>>>>>        If (bExists = True) Begin
51628>>>>>            Get FileModTime sFileName1  to dtFileDateTime1
51629>>>>>            Get FileModTime sFileName2  to dtFileDateTime2
51630>>>>>            Move (dtFileDateTime1 > dtFileDateTime2) to bIsNewer
51631>>>>>        End
51631>>>>>>
51631>>>>>        Function_Return bIsNewer
51632>>>>>    End_Function
51633>>>>>
51633>>>>>End_Class
51634>>>
51634>>>Register_Function pbExitIfDebuggerActive Returns Boolean
51634>>>Class cDbUpdateFunctionLibrary is a cBaseDbUpdateFuncLib
51635>>>
51635>>>    Procedure Construct_Object
51637>>>        Forward Send Construct_Object
51639>>>        Move Self to ghoDbUpdateFunctionLibrary
51640>>>    End_Procedure
51641>>>
51641>>>    Procedure End_Construct_Object
51643>>>        Forward Send End_Construct_Object
51645>>>    End_Procedure
51646>>>
51646>>>    // *** SQL Messages for making changes to the SQL back-end ***
51646>>>    //
51646>>>    // * Dummy function for the Studio's Code Explorer *
51646>>>    Function SQL_DATABASE_FUNCTIONS Returns Boolean
51648>>>        Function_Return False
51649>>>    End_Function
51650>>>
51650>>>    // Function for creating a new *Database*.
51650>>>    // Note: This is for creating SQL DATABASES - not tables!
51650>>>    // Returns True if successful.
51650>>>    // ToDo: Currently only works for MS-SQL...
51650>>>    Function SqlDatabaseCreate String sDriverID String sDatabase Boolean bUpdateConnectionString Boolean bPermanantly Returns Boolean
51652>>>        String sSQL sSQL1 sConnectionID sConnectionString
51652>>>        String sCreateDatabaseKeyWord sSelectFromWhereName sCollation sCollateKeyWord
51652>>>        Handle hConnection hStmt hoSQLManager
51652>>>        Integer iFetchResult iDbType
51652>>>        Boolean bOK bExists
51652>>>
51652>>>        Get piDbType to iDbType
51653>>>        If (iDbType <> EN_DbTypeMSSQL and iDbType <> EN_DbTypeDB2 and iDbType <> EN_DbTypeMySQL and iDbType <> EN_DbTypePostgre) Begin
51655>>>            Error DFERR_PROGRAM "Sorry, the SqlDatabaseCreate function is currently only supported for MS-SQL, MySQL & PostGre and DB2 drivers"
51656>>>>
51656>>>            Function_Return False
51657>>>        End
51657>>>>
51657>>>
51657>>>        Get SqlUtilCheckIfDatabaseExists sDatabase to bExists
51658>>>        If (bExists = True) Begin
51660>>>            Function_Return True
51661>>>        End
51661>>>>
51661>>>
51661>>>        Get phoSQLManager to hoSQLManager
51662>>>
51662>>>        Get psConnectionID     to sConnectionID
51663>>>        Get psConnectionString to sConnectionString
51664>>>        Move 0 to LastErr
51665>>>
51665>>>        If (sDriverID = ODBC_DRV_ID) Begin
51667>>>            // If an ODBC data source (DSN) we cannot pass the UID & PWD; so strip them from the connection string.
51667>>>            // ToDo: 2018-08-11 I think this is wrong and the uid & pw should be there.
51667>>>//            If (Uppercase(sConnectionString) contains CS_SQLIniDSNKeyword) Begin
51667>>>//                Move (Pos(";", sConnectionString)) to iPos
51667>>>//                If (iPos > 0) Begin
51667>>>//                    Move (Left(sConnectionString, (iPos - 1))) to sConnectionString
51667>>>//                    Move (Trim(sConnectionString)) to sConnectionString
51667>>>//                End
51667>>>//            End
51667>>>        End
51667>>>>
51667>>>
51667>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
51668>>>        Get SqlConnect of hoSQLManager sDriverID sConnectionString to hConnection
51669>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
51670>>>        If (LastErr = CLIERR_LOGIN_UNSUCCESSFUL) Begin
51672>>>            Error DFERR_PROGRAM (CS_DUF_LoginToDbServerFailed + "\n" + sConnectionString)
51673>>>>
51673>>>            Function_Return False
51674>>>        End
51674>>>>
51674>>>
51674>>>        Get SqlOpen of hConnection to hStmt
51675>>>
51675>>>        If (hStmt = 0) Begin
51677>>>            Send SqlDisconnect of hoSQLManager
51678>>>            Error DFERR_PROGRAM CS_DUF_ConnectError
51679>>>>
51679>>>            Function_Return False
51680>>>        End
51680>>>>
51680>>>
51680>>>        Get psCollation to sCollation
51681>>>
51681>>>        Case Begin
51681>>>            Case (sDriverID = MSSQLDRV_ID)
51683>>>                Get _SqlFindKeyWord CI_SQLCreateDatabase to sCreateDatabaseKeyWord
51684>>>                Get _SqlSelectFromWhereName to sSelectFromWhereName
51685>>>                Move (sSelectFromWhereName + "='" + sDatabase + "'") to sSQL
51686>>>
51686>>>                // Check if database exists
51686>>>                Send SqlExecDirect of hStmt sSQL
51687>>>                Get SqlFetch of hStmt to iFetchResult
51688>>>                Send SqlClose of hStmt
51689>>>                Send SqlDisconnect of hConnection
51690>>>                // If database already exists we're out of here!
51690>>>                // Note that we return True as this is not an error.
51690>>>                If (iFetchResult > 0) Begin
51692>>>                    Function_Return True
51693>>>                End
51693>>>>
51693>>>                // Database doesn't exist, create it.
51693>>>                If (iFetchResult = 0) Begin
51695>>>                    Move (sCreateDatabaseKeyWord + " [" + sDatabase + "]") to sSQL1
51696>>>                    Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
51697>>>                    If (sCollation <> "") Begin
51699>>>                        Get _SqlFindKeyWord CI_SQLDatabaseCollation to sCollateKeyWord
51700>>>                        Move (sSQL1 * String(sCollateKeyWord) * String(sCollation)) to sSQL1
51701>>>                    End
51701>>>>
51701>>>                    Send SqlUtilExecuteQuery sSQL1 sDriverID
51702>>>                    Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
51703>>>                    If (LastErr = CLIERR_GENERAL_ERROR) Begin
51705>>>                        Function_Return False
51706>>>                    End
51706>>>>
51706>>>                    // We need to wait a short time for Sql to finish, especially Windows to write the new file to disk.
51706>>>                    Sleep 1
51707>>>                    Send SqlUtilExecuteQuery sSQL sDriverID
51708>>>                End
51708>>>>
51708>>>                Case Break
51709>>>
51709>>>            Case (iDbType = EN_DbTypeMySQL and sDriverID = ODBC_DRV_ID)
51712>>>                // ToDo: How should this be set/checked?
51712>>>//                If (Lowercase(Left(sCollation, 3)) <> "utf") Begin
51712>>>//                    Set psCollation to "utf8"
51712>>>//                End
51712>>>                SQLIncludeScriptFile ..\Scripts\CreateMySQLDatabase.sql as CreateMySQLDatabase.sql
51712>>>                Get _SqlUtilCreateMySQLDatabaseByScript "CreateMySQLDatabase.sql" sDatabase to bOK
51713>>>                Case Break
51714>>>
51714>>>            Case Else
51714>>>                Error DFERR_PROGRAM "Unsupported database type"
51715>>>>
51715>>>        Case End
51715>>>
51715>>>        If (Err = False) Begin
51717>>>            Send LogError ("The Database:" * String(sDatabase) * "was created successfully for driver:" * String(sDriverID)) False
51718>>>        End
51718>>>>
51718>>>        // If used in e.g. the cDbUpdateHandler we want to change the login database name to
51718>>>        // the one we just created.
51718>>>        If (bUpdateConnectionString = True and Err = False) Begin
51720>>>            Set psDatabase to sDatabase
51721>>>            //...and perhaps also the SQLConnections.ini file setting.
51721>>>            If (bPermanantly = True) Begin
51723>>>                If (ghoSQLConnectionHandler <> 0) Begin
51725>>>                    Get SQLIniFileSetDefaultConnection of ghoSQLConnectionHandler sConnectionID to bOK
51726>>>                End
51726>>>>
51726>>>            End
51726>>>>
51726>>>        End
51726>>>>
51726>>>
51726>>>        Function_Return (Err = False)
51727>>>    End_Function
51728>>>
51728>>>    // Backs up an SQL database to a folder of choice. If no path is passed the SQL default backup folder
51728>>>    // will be used.
51728>>>    Function SqlDatabaseBackupToDisk String sDatabase String sBackupName String sPath Boolean bShowProg Returns Boolean
51730>>>        Boolean bOK bExists bShowProgress bErr
51730>>>        String sStatement sDriverID
51730>>>        tSQLScriptArray SQLScriptArray SQLScriptArrayPercentReady
51730>>>        tSQLScriptArray SQLScriptArray SQLScriptArrayPercentReady
51730>>>        Integer iDbType
51730>>>
51730>>>        If (sDatabase = "") Begin
51732>>>            Error DFERR_PROGRAM "The database name was not passed as a parameter to the 'SqlUtilBackupDatabaseToDisk' function"
51733>>>>
51733>>>            Function_Return False
51734>>>        End
51734>>>>
51734>>>        If (sBackupName = "") Begin
51736>>>            Error DFERR_PROGRAM "The database backup name was not passed as a parameter to the 'SqlUtilBackupDatabaseToDisk' function"
51737>>>>
51737>>>            Function_Return False
51738>>>        End
51738>>>>
51738>>>
51738>>>        // Create backup-folder if it doesn't exist
51738>>>        Get vFolderExists sPath to bExists
51739>>>        If (bExists = False) Begin
51741>>>            Get vCreateDirectory sPath to bErr
51742>>>            If (bErr = True) Begin
51744>>>                Error DFERR_PROGRAM ("Could not create database backup folder:" * sPath)
51745>>>>
51745>>>                Function_Return False
51746>>>            End
51746>>>>
51746>>>        End
51746>>>>
51746>>>        // Make sure the path ends with a back-slash
51746>>>        If (sPath <> "") Begin
51748>>>            Get vFolderFormat sPath to sPath
51749>>>        End
51749>>>>
51749>>>
51749>>>        Get psDriverID to sDriverID
51750>>>        Get piDbType   to iDbType
51751>>>        If (num_arguments > 3) Begin
51753>>>            Move bShowProg to bShowProgress
51754>>>        End
51754>>>>
51754>>>
51754>>>        Case Begin
51754>>>            Case (iDbType = EN_DbTypeMSSQL)
51756>>>                SQLIncludeScriptFile ..\Scripts\BackupMSSQLDatabase.sql as BackupMSSQLDatabase.sql
51756>>>                SQLIncludeScriptFile ..\Scripts\GetPercentageBackupCompletionMSSQL.sql as GetPercentageBackupCompletionMSSQL.sql
51756>>>                Get _SqlUtilReadResource  "BackupMSSQLDatabase.sql" sDriverID False to SQLScriptArray
51757>>>                Get _SqlUtilReadResource "GetPercentageBackupCompletionMSSQL.sql" sDriverID False to SQLScriptArrayPercentReady
51758>>>
51758>>>                Move SQLScriptArray.sSQLScriptArray[0] to sStatement
51759>>>                Move (Replaces("DATABASE_NAME_XXX", sStatement, sDatabase))   to sStatement
51760>>>                Move (Replaces("BACKUP_PATH_XXX",   sStatement, sPath))       to sStatement
51761>>>                Move (Replaces("BACKUP_NAME_XXX",   sStatement, sBackupName)) to sStatement
51762>>>                Move sStatement to SQLScriptArray.sSQLScriptArray[0]
51763>>>                Get _SqlUtilExecuteEmbeddedScript SQLScriptArray sDriverID False "" bShowProgress to bOK
51764>>>                Case Break
51765>>>            Case Else
51765>>>                Send Info_Box ("The SqlUtilBackupDatabaseToDisk function is currently not implemented for the driver:" * sDriverID + ". It would be great if you could spend a couple of minutes and add a little ESQL code snippet to make it work for that driver! Thanks for helping out.")
51766>>>        Case End
51766>>>
51766>>>        Function_Return bOK
51767>>>    End_Function
51768>>>
51768>>>    Function SqlDatabaseCollationQuery String sDatabase Boolean bSilent Returns String
51770>>>        String sStatement sDriverID sRetval //sPrevious
51770>>>        tSQLScriptArray SQLScriptArray SQLScriptArrayPercentReady
51770>>>        tSQLScriptArray SQLScriptArray SQLScriptArrayPercentReady
51770>>>        Integer iDbType iRows iFetchResult //iColumn
51770>>>        Handle hoSQLHandler hoSQLConnect hstmt
51770>>>        tSQLConnection SQLConnection
51770>>>        tSQLConnection SQLConnection
51770>>>
51770>>>        If (sDatabase = "") Begin
51772>>>            Error DFERR_PROGRAM "The database name was not passed as a parameter to the 'SqlUtilDatabaseCollation' function"
51773>>>>
51773>>>            Function_Return ""
51774>>>        End
51774>>>>
51774>>>
51774>>>        Move "" to sRetval
51775>>>        Get psDriverID to sDriverID
51776>>>        Get piDbType   to iDbType
51777>>>
51777>>>        Case Begin
51777>>>            Case (iDbType = EN_DbTypeMSSQL)
51779>>>                SQLIncludeScriptFile ..\Scripts\QueryMSSQLCollation.sql as QueryMSSQLCollation.sql
51779>>>                Get _SqlUtilReadResource "QueryMSSQLCollation.sql" sDriverID False to SQLScriptArray
51780>>>
51780>>>                Move SQLScriptArray.sSQLScriptArray[0] to sStatement
51781>>>                Move (Replaces("DATABASE_NAME_XXX", sStatement, sDatabase)) to sStatement
51782>>>                Get phoSQLManager to hoSQLHandler
51783>>>
51783>>>                If (hoSQLHandler <> 0) Begin
51785>>>                    Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
51786>>>                    Get SQLConnect of hoSQLHandler SQLConnection.sDriverID SQLConnection.sConnectionString to hoSQLConnect
51787>>>
51787>>>                    If (hoSQLConnect <> 0) Begin
51789>>>                        Get SQLOpen of hoSQLConnect to hstmt
51790>>>                        If (hstmt <> 0) Begin
51792>>>                            Send SqlExecDirect of hstmt sStatement
51793>>>                            Get SqlStmtAttribute of hstmt SqlSTMTATTRIB_ROWCOUNT to iRows
51794>>>                            Get SQLFetch of hstmt to iFetchResult
51795>>>                            If (iFetchResult <> 0) Begin
51797>>>                                Get SQLColumnValue of hstmt 2 to sRetval // Column 1 = Database Name, 2 = Collation Name.
51798>>>                            End
51798>>>>
51798>>>                            Send SQLClose of hstmt
51799>>>                        End
51799>>>>
51799>>>                        Send SQLDisconnect of hoSQLConnect
51800>>>                    End
51800>>>>
51800>>>                End
51800>>>>
51800>>>                Case Break
51801>>>            Case Else
51801>>>                If (bSilent = False) Begin
51803>>>                    Send Info_Box ("The SqlDatabaseCollationQuery function is currently not implemented for this driver:" * sDriverID + ". It would be great if you could spend a couple of minutes and create a little SQL code snippet and send it to RDC Tools to make this routine work for this driver! Thanks for helping out.")
51804>>>                End
51804>>>>
51804>>>        Case End
51804>>>
51804>>>        Function_Return sRetval
51805>>>    End_Function
51806>>>
51806>>>    Function SqlDatabaseCollationChange String sDatabase String sSQLCollation Returns Boolean
51808>>>        String sDriverID sSQL sConnectionID sConnectionString sSet sWith // sSQL1 
51808>>>        String sAlterDatabaseKeyWord sCollateKeyWord sSQLCollationCheck sSingle_User sMulti_User sRollback sImmediate
51808>>>        Handle hConnection hStmt hoSQLManager
51808>>>        Integer iDbType // iFetchResult
51808>>>
51808>>>        If (sDatabase = "") Begin
51810>>>            Error DFERR_PROGRAM "The database name was not passed as a parameter to the 'SqlDatabaseCollationChange' function"
51811>>>>
51811>>>            Function_Return False
51812>>>        End
51812>>>>
51812>>>
51812>>>        If (sSQLCollation = "") Begin
51814>>>            Error DFERR_PROGRAM "The SQL Collation name was not passed as a parameter to the 'SqlDatabaseCollationChange' function"
51815>>>>
51815>>>            Function_Return False
51816>>>        End
51816>>>>
51816>>>
51816>>>        Get psDriverID to sDriverID
51817>>>        Get piDbType   to iDbType
51818>>>
51818>>>        Get phoSQLManager to hoSQLManager
51819>>>        Get psConnectionID     to sConnectionID
51820>>>        Get psConnectionString to sConnectionString
51821>>>        Move 0 to LastErr
51822>>>
51822>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
51823>>>        Get SqlConnect of hoSQLManager sDriverID sConnectionString to hConnection
51824>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
51825>>>        If (LastErr = CLIERR_LOGIN_UNSUCCESSFUL) Begin
51827>>>            Error DFERR_PROGRAM ("Login failed to the database server. The following connect string was used:\n" + sConnectionString)
51828>>>>
51828>>>            Function_Return False
51829>>>        End
51829>>>>
51829>>>
51829>>>        Get SqlOpen of hConnection to hStmt
51830>>>
51830>>>        If (hStmt = 0) Begin
51832>>>            Send SqlDisconnect of hoSQLManager
51833>>>            Error DFERR_PROGRAM CS_DUF_ConnectError
51834>>>>
51834>>>            Function_Return False
51835>>>        End
51835>>>>
51835>>>
51835>>>        // Check if collation already exists
51835>>>        Get SqlDatabaseCollationQuery sDatabase False to sSQLCollationCheck
51836>>>        // If the current collate is the same as the new; do nothing.
51836>>>        If (sSQLCollation = sSQLCollationCheck) Begin
51838>>>            Function_Return True
51839>>>        End
51839>>>>
51839>>>
51839>>>        Get _SqlFindKeyWord CI_SQLSet               to sSet
51840>>>        Get _SqlFindKeyWord CI_SQLWith              to sWith
51841>>>        Get _SqlFindKeyWord CI_SQLSingle_User       to sSingle_User
51842>>>        Get _SqlFindKeyWord CI_SQLMulti_User        to sMulti_User
51843>>>        Get _SqlFindKeyWord CI_SQLRollback          to sRollback
51844>>>        Get _SqlFindKeyWord CI_SQLIMMEDIATE         to sImmediate
51845>>>        Get _SqlFindKeyWord CI_SQLAlterDatabase     to sAlterDatabaseKeyWord
51846>>>        Get _SqlFindKeyWord CI_SQLDatabaseCollation to sCollateKeyWord
51847>>>
51847>>>        // MS-SQL Syntax:
51847>>>        // ALTER DATABASE [database] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
51847>>>        // ALTER DATABASE [database] COLLATE SQL_1xCompat_CP850_CI_AS;
51847>>>        // ALTER DATABASE [database] SET MULTI_USER;
51847>>>        Move (              sAlterDatabaseKeyWord  * String(sDatabase) * String(sSet) * String(sSingle_User) * String(sWith) * String(sRollback) * String(sImmediate)) to sSQL
51848>>>        Move (sSQL * String(sAlterDatabaseKeyWord) * String(sDatabase) * String(sCollateKeyWord) * String(sSQLCollation)) to sSQL
51849>>>        Move (sSQL * String(sAlterDatabaseKeyWord) * String(sDatabase) * String(sSet) * String(sMulti_User)) to sSQL
51850>>>//        Move (sAlterDatabaseKeyWord * String(sDatabase) * String(sCollateKeyWord) * String(sSQLCollation)) to sSQL
51850>>>
51850>>>        Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
51851>>>        Send SqlUtilExecuteQuery sSQL sDriverID False
51852>>>        Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
51853>>>        If (LastErr = CLIERR_GENERAL_ERROR) Begin
51855>>>           Function_Return False
51856>>>        End
51856>>>>
51856>>>
51856>>>        Function_Return (Err = False)
51857>>>    End_Function
51858>>>
51858>>>
51858>>>    // * Dummy function for the Studio's Code Explorer *
51858>>>    Function SQL_TABLE_FUNCTIONS Returns Boolean
51860>>>        Function_Return False
51861>>>    End_Function
51862>>>
51862>>>    // Converts from SQL to Embedded (DataFlex .dat files).
51862>>>    // To convert from SQL -> SQL (e.g. from Oracle - > MS SQL)
51862>>>    //   first use SQLTableConvertToEmbedded in one cDbUpdateVersion object,
51862>>>    //   and then use the ApiTableConvertToSQL method in a second cDbUpdateVersion object.
51862>>>    // Note: To convert an embedded table to SQL use ApiTableConvertToSQL.
51862>>>    Function SqlTableConvertToEmbedded Handle hTable Boolean bCpyDat Returns Boolean
51864>>>        Handle hToTable
51864>>>        Boolean bOK bExists bOpened bCopyData
51864>>>        String sDriverID sPhysicalName sRootName sDisplayName
51864>>>        tSQLConnection SQLConnection
51864>>>        tSQLConnection SQLConnection
51864>>>        Integer iPos iMaxRecords
51864>>>
51864>>>        Get psDriverID to sDriverID
51865>>>        Get SqlUtilCheckIfTableHandleExists hTable sDriverID to bExists
51866>>>        If (bExists = False) Begin
51868>>>            Function_Return False
51869>>>        End
51869>>>>
51869>>>
51869>>>        If (num_arguments > 1) Begin
51871>>>            Move bCpyDat to bCopyData
51872>>>        End
51872>>>>
51872>>>        Else Begin
51873>>>            Move False to bCopyData
51874>>>        End
51874>>>>
51874>>>
51874>>>        Open hTable
51876>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
51879>>>        If (bOpened = False) Begin
51881>>>            Error DFERR_PROGRAM ("Could not open table number:" * String(hTable))
51882>>>>
51882>>>            Function_Return False
51883>>>        End
51883>>>>
51883>>>        Move 0 to hToTable
51884>>>
51884>>>        Move 16711679 to iMaxRecords
51885>>>        Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
51888>>>        Move (Pos(".", sDisplayName)) to iPos
51889>>>        If (iPos > 0) Begin
51891>>>            Move (Mid(sDisplayName, 200, (iPos +1))) to sDisplayName
51892>>>        End
51892>>>>
51892>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
51895>>>        Get _TableNameOnly sRootName                 to sRootName
51896>>>        Move (sRootName + ".dat")                    to sPhysicalName
51897>>>
51897>>>        If (ghoProgressBar <> 0) Begin
51899>>>            Send DoAdvance of ghoProgressBar
51900>>>            Set TableName_Text of ghoStatusPanel to ("Converting to Embedded - Table:" * String(sRootName) * "Number:" * String(hTable))
51901>>>        End
51901>>>>
51901>>>
51901>>>        Move False to Err
51902>>>
51902>>>        Structure_Start hToTable DATAFLEX_ID
51903>>>            Structure_Copy hTable to hToTable
51904>>>
51904>>>            Set_Attribute DF_FILE_PHYSICAL_NAME of hToTable to sPhysicalName
51907>>>            Set_Attribute DF_FILE_REUSE_DELETED of hToTable to DF_FILE_DELETED_REUSE
51910>>>            Set_Attribute DF_FILE_MULTIUSER     of hToTable to DF_FILE_USER_MULTI
51913>>>            Set_Attribute DF_FILE_TRANSACTION   of hToTable to DF_FILE_TRANSACTION_CLIENT_ATOMIC
51916>>>            Set_Attribute DF_FILE_MAX_RECORDS   of hToTable to iMaxRecords
51919>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
51920>>>
51920>>>        Structure_End hToTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
51922>>>
51922>>>        Set Action_Text of ghoStatusPanel to ""
51923>>>        Move (not(Err)) to bOK
51924>>>        If (bOK = True and bCopyData = True) Begin
51926>>>            Get ApiTableCopyData hTable sPhysicalName sRootName DATAFLEX_ID to bOK
51927>>>        End
51927>>>>
51927>>>
51927>>>        // This must be after copying data...
51927>>>        If (Err = False) Begin
51929>>>            Set_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
51932>>>            Set_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
51935>>>        End
51935>>>>
51935>>>        Move (not(Err)) to bOK
51936>>>
51936>>>        Function_Return (bOK = True)
51937>>>    End_Function
51938>>>
51938>>>    // Creates an SQL Table at the SQL end by its filelist number;
51938>>>    // Also creates a 'DUMMY' column because SQL doesn't like to create a table with no columns!
51938>>>    Function SqlTableCreate Integer hTable Returns Boolean
51940>>>        String sTableName sSQLString sPath sCreateTable sDriverID
51940>>>        Integer iDbType
51940>>>        Boolean bExists
51940>>>
51940>>>        Get psDriverID to sDriverID
51941>>>        Get UtilTableHandleToString hTable to sTableName
51942>>>        Get _SqlUtilCheckIfTableNameExists sTableName sDriverID to bExists
51943>>>        If (bExists = True) Begin
51945>>>            Function_Return False
51946>>>        End
51946>>>>
51946>>>
51946>>>        Get psDataPathFirstPart to sPath
51947>>>        Get vFilePathExists (sPath + String(sTableName) + ".int") to bExists
51948>>>
51948>>>        Get piDbType to iDbType
51949>>>        Get _SqlProperTableName sTableName to sTableName
51950>>>        Get _SqlFindKeyWord CI_SQLCreateTable iDbType to sCreateTable
51951>>>        Move (sCreateTable * String(sTableName) * "(Dummy Decimal(2,0))") to sSQLString
51952>>>
51952>>>        Move False to Err
51953>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
51954>>>
51954>>>        Function_Return (Err = False)
51955>>>    End_Function
51956>>>
51956>>>    // Same as SqlTableCreate but creates an SQL Table at the SQL end by a table name;
51956>>>    // Also creates a 'DUMMY' column because SQL doesn't like to create a table with no columns!
51956>>>    Function SqlTableCreateByTableName String sTableName  Returns Boolean
51958>>>        String sSQLString sPath sCreateTable sDriverID
51958>>>        Integer iDbType
51958>>>        Boolean bExists
51958>>>
51958>>>        Get psDriverID to sDriverID
51959>>>        Get _SqlUtilCheckIfTableNameExists sTableName sDriverID to bExists
51960>>>        If (bExists = True) Begin
51962>>>            Function_Return False
51963>>>        End
51963>>>>
51963>>>
51963>>>        Get psDataPathFirstPart to sPath
51964>>>        Get vFilePathExists (sPath + String(sTableName) + ".int") to bExists
51965>>>        If (bExists = True) Begin
51967>>>            // ToDo: What should we do if an .int file already exists?
51967>>>        End
51967>>>>
51967>>>
51967>>>        Get piDbType to iDbType
51968>>>        Get _SqlProperTableName sTableName to sTableName
51969>>>        Get _SqlFindKeyWord CI_SQLCreateTable iDbType to sCreateTable
51970>>>        Move (sCreateTable * String(sTableName) * "(Dummy Decimal(2,0))") to sSQLString
51971>>>
51971>>>        Move False to Err
51972>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
51973>>>
51973>>>        Function_Return (Err = False)
51974>>>    End_Function
51975>>>    
51975>>>    // ToDo: 2019-09-23 This needs to be finilized 
51975>>>    // It resets SQL constraints after a Structure_End, if necessary.
51975>>>    Function SqlTableRecreateConstraints Handle hTable Returns Boolean
51977>>>        Boolean bOK                                                            
51977>>>        String sStatement
51977>>>        Move "ALTER TABLE [dbo].[THREADS] ADD  DEFAULT ((0)) FOR [SEGMENTS]" to sStatement
51978>>>        Function_Return bOK
51979>>>    End_Function
51980>>>    
51980>>>    // First deletes the data cache file and then drops the passed SQL table.
51980>>>    // Note: The table needs to exist in filelist.cfg, and it must be possible to open it,
51980>>>    //       else try using the SqlTableRemoveByTableName message.
51980>>>    Function SqlTableRemove Handle hTable Returns Boolean
51982>>>        String sSQLString sPath sDropTable sTableName sDriverID
51982>>>        Integer iRetval iDbType
51982>>>        Boolean bExists bOK
51982>>>
51982>>>        Get psDriverID to sDriverID
51983>>>        Get UtilTableHandleToString hTable to sTableName
51984>>>        Get _SqlUtilCheckIfTableNameExists sTableName sDriverID to bExists
51985>>>        If (bExists = False) Begin
51987>>>            Function_Return False
51988>>>        End
51988>>>>
51988>>>
51988>>>        Get psDataPathFirstPart to sPath
51989>>>        Get _UtilDeleteCacheFile sTableName to iRetval
51990>>>
51990>>>        Get piDbType to iDbType
51991>>>        Get _SqlProperTableName sTableName to sTableName
51992>>>        Get _SqlFindKeyWord CI_SQLDropTable iDbType to sDropTable
51993>>>        Move (sDropTable * String(sTableName)) to sSQLString
51994>>>
51994>>>        Move False to Err
51995>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
51996>>>
51996>>>        // We also need to remove the cache-file since the table has been changed
51996>>>        Get _UtilDeleteCacheFile sTableName to bOK
51997>>>
51997>>>        Function_Return (Err = False)
51998>>>    End_Function
51999>>>
51999>>>    // First deletes the data cache file and then drops the passed data table.
51999>>>    Function SqlTableRemoveByTableName String sTableName Returns Boolean
52001>>>        String sSQLString sPath sDropTable sVal sSchema sDriverID
52001>>>        Integer iRetval iDbType
52001>>>        Boolean bOK
52001>>>
52001>>>        Get psDriverID to sDriverID
52002>>>        Get psDataPathFirstPart to sPath
52003>>>        Get _UtilDeleteCacheFile sTableName to iRetval
52004>>>
52004>>>        Get piDbType to iDbType
52005>>>        Get _SqlFindKeyWord CI_SQLDropTable iDbType to sDropTable
52006>>>        Get psSchema to sSchema
52007>>>        If (sSchema = "") Begin
52009>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
52010>>>        End
52010>>>>
52010>>>        Move (Uppercase(sTableName)) to sVal
52011>>>        If (not(sVal contains (sSchema + "."))) Begin
52013>>>            Move (Lowercase(sSchema) + "." + sTableName) to sTableName
52014>>>        End
52014>>>>
52014>>>        Move (sDropTable * String(sTableName)) to sSQLString
52015>>>
52015>>>        Move False to Err
52016>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
52017>>>
52017>>>        // We also need to remove the cache-file since the table has been changed
52017>>>        Get _UtilDeleteCacheFile sTableName to bOK
52018>>>
52018>>>        Function_Return (Err = False)
52019>>>    End_Function
52020>>>
52020>>>    // *** Sql View Messages ***
52020>>>
52020>>>    // First deletes the data cache file and then drops the passed Sql data view.
52020>>>    Function SqlViewRemove String sDataView Returns Boolean
52022>>>        String sDriverID sSQLString sDropViewKeyWord
52022>>>        Integer iRetval
52022>>>        Boolean bOK
52022>>>
52022>>>        Get psDriverID to sDriverID
52023>>>        Get _UtilDeleteCacheFile sDataView to iRetval
52024>>>
52024>>>        Get _SqlFindKeyWord CI_SQLDropView to sDropViewKeyWord
52025>>>        Move (sDropViewKeyWord * String(sDataView)) to sSQLString
52026>>>        Set psSQLStatementString to sSQLString
52027>>>
52027>>>        // As we don't check if the view exist or not, it might happen
52027>>>        // that it doesn't and that would through an error, so guard for that eventuality (just ignore it).
52027>>>        Move False to Err
52028>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
52029>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
52030>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
52031>>>        Move 0 to LastErr
52032>>>
52032>>>        // We also need to remove the cache-file since the table has been changed
52032>>>        Get _UtilDeleteCacheFile sDataView to bOK
52033>>>
52033>>>        Function_Return (Err = False)
52034>>>    End_Function
52035>>>
52035>>>    Function SqlTableRename Handle hTable String sCurrentTableName String sNewtTableName Returns Boolean
52037>>>        Boolean bOK
52037>>>        Integer iDbType
52037>>>        String sDriverID sAlterTable sRenameTable sSQLTo sSQLString
52037>>>
52037>>>        Get psDriverID to sDriverID
52038>>>        Get piDbType   to iDbType
52039>>>
52039>>>        Case Begin
52039>>>            Case (iDbType = EN_DbTypeDB2)
52041>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
52042>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
52043>>>                Move (sRenameTable * sCurrentTableName * sSQLTo * String(sNewtTableName)) to sSQLString
52044>>>            Break
52045>>>
52045>>>            Case (iDbType = EN_DbTypeMSSQL)
52048>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
52049>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
52050>>>                Move (sRenameTable * "'" - sCurrentTableName - "', '" - String(sNewtTableName) - "'") to sSQLString
52051>>>            Break
52052>>>
52052>>>            Case (iDbType = EN_DbTypeOracle)
52055>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
52056>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
52057>>>                Move (sRenameTable * sCurrentTableName * sSQLTo * String(sNewtTableName)) to sSQLString
52058>>>            Break
52059>>>
52059>>>            Case (iDbType = EN_DbTypePostgre)
52062>>>                Get _SqlFindKeyWord CI_SQLAlterTable  to sAlterTable
52063>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
52064>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
52065>>>                Move (sAlterTable * sCurrentTableName * sRenameTable * sSQLTo * String(sNewtTableName)) to sSQLString
52066>>>            Break
52067>>>
52067>>>            Case (iDbType = EN_DbTypeMySQL)
52070>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
52071>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
52072>>>                Move (Replaces("-", sNewtTableName, "_")) to sNewtTableName
52073>>>                Move (sRenameTable * sCurrentTableName * sSQLTo * String(sNewtTableName)) to sSQLString
52074>>>            Break
52075>>>        Case End
52075>>>
52075>>>        Move False to Err
52076>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
52077>>>        Move (Err = False) to bOK
52078>>>
52078>>>        Function_Return bOK
52079>>>    End_Function
52080>>>
52080>>>    // * Dummy function for the Studio's Code Explorer *
52080>>>    Function SQL_COLUMN_FUNCTIONS Returns Boolean
52082>>>        Function_Return False
52083>>>    End_Function
52084>>>
52084>>>    // Sample: Get SqlColumnAdd MyTable.File_Number "NewColumnName" True "InitValue" DF_ASCII_DUF 35
52084>>>    Function SqlColumnAdd Integer hTable String sColumnName Integer iDataType Integer iLen Integer iDec Boolean bInitVal String sColVal Returns Boolean
52086>>>        Integer iLength iDecimals
52086>>>        String sColumnValue
52086>>>        String sTableName sDriverID
52086>>>        Boolean bOK bInitializeValue
52086>>>
52086>>>        Get psDriverID to sDriverID
52087>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52088>>>        If (bOK = False) Begin
52090>>>            Function_Return False
52091>>>        End
52091>>>>
52091>>>
52091>>>        Get UtilTableHandleToString hTable to sTableName
52092>>>        If (sTableName = "") Begin
52094>>>            Function_Return False
52095>>>        End
52095>>>>
52095>>>
52095>>>        If (num_arguments > 3) Begin
52097>>>            Move iLen     to iLength
52098>>>            Move iDec     to iDecimals
52099>>>            Move bInitVal to bInitializeValue
52100>>>            Move sColVal  to sColumnValue
52101>>>        End
52101>>>>
52101>>>
52101>>>        Get SqlColumnAddByTableName sTableName sColumnName iDataType iLen iDecimals bInitializeValue sColumnValue to bOK
52102>>>
52102>>>        Function_Return (bOK = True)
52103>>>    End_Function
52104>>>
52104>>>    // Sample: Get SqlColumnAddByTableName "MyTable" "NewColumnName" DF_ASCII_DUF 35 0 True "InitValue"
52104>>>    Function SqlColumnAddByTableName String sTableName String sColumnName Integer iDataType Integer iLen Integer iDec Boolean bInitVal String sColVal Returns Boolean
52106>>>        Integer iDbType iLength iDecimals iDriver
52106>>>        String sStmt sAlterTable sAddColumn sVal sDataType sLengthAndDecimals sColumnValue
52106>>>        String sDriverID sNotNull
52106>>>        Boolean bOK bInitializeValue bRetval bFixed bDriverIgnoreErrorState
52106>>>        Handle hTable
52106>>>
52106>>>        Get psDriverID to sDriverID
52107>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52108>>>        If (bOK = False) Begin
52110>>>            Function_Return True
52111>>>        End
52111>>>>
52111>>>
52111>>>        Get UtilTableNameToHandle sTableName to hTable
52112>>>        If (hTable = 0) Begin
52114>>>            Get NextFreeFilelistSlot to hTable
52115>>>        End
52115>>>>
52115>>>
52115>>>        Get piDbType to iDbType
52116>>>        // If a field/column already exists; we just ignore the request to not add unneccesary errors to the log.
52116>>>        Get _SqlFindColumnName sTableName sColumnName to sVal
52117>>>        If (Uppercase(sVal) = Uppercase(sColumnName)) Begin
52119>>>            Function_Return True
52120>>>        End
52120>>>>
52120>>>
52120>>>        Get DriverIndex sDriverID to iDriver
52121>>>        Get_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
52124>>>        Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to True
52127>>>
52127>>>        Get UtilColumnTypeToString sDriverID iDbType iDataType to sDataType
52128>>>        If (num_arguments > 3) Begin
52130>>>            Move iLen     to iLength
52131>>>            Move iDec     to iDecimals
52132>>>            Move bInitVal to bInitializeValue
52133>>>            Move sColVal  to sColumnValue
52134>>>        End
52134>>>>
52134>>>
52134>>>        Get _SqlProperTableName sTableName   to sTableName
52135>>>        Get _SqlFindKeyWord CI_SQLAlterTable to sAlterTable
52136>>>        Get _SqlFindKeyWord CI_SQLAdd        to sAddColumn
52137>>>        Get SQLUtilDefaultNullValue sDriverID iDbType iDataType to sNotNull
52138>>>
52138>>>        Get UtilColumnTypeFixed sDriverID iDbType iDataType to bFixed
52139>>>        If (bFixed = False) Begin
52141>>>            Get _SqlFormatLengthAndDecimalAsString iLength iDecimals to sLengthAndDecimals
52142>>>        End
52142>>>>
52142>>>        Move (sAlterTable * sTableName * sAddColumn * sColumnName * sDataType + sLengthAndDecimals * sNotNull) to sStmt
52143>>>
52143>>>        Move False to Err
52144>>>        Send SqlUtilExecuteQuery sStmt sDriverID
52145>>>
52145>>>        If (bInitializeValue = True and Err = False) Begin
52147>>>            Get SQLColumnUpdateValue hTable sColumnName sColumnValue to bRetval
52148>>>        End
52148>>>>
52148>>>
52148>>>        If (Err = False) Begin
52150>>>            Get SqlUtilAdjustAuxFiles hTable sTableName sColumnName to bOK
52151>>>        End
52151>>>>
52151>>>
52151>>>        Move (not(Err)) to bRetval
52152>>>
52152>>>        // We also need to remove the cache-file since the table has been changed
52152>>>        Get _UtilDeleteCacheFile sTableName to bOK
52153>>>        Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
52156>>>
52156>>>        Function_Return bRetval
52157>>>    End_Function
52158>>>
52158>>>    // To update all current rows for a table column with a common value.
52158>>>    Function SqlColumnUpdateValue Handle hTable String sColumnName String sColumnValue Returns Boolean
52160>>>        String sDriverID sTableName sUpdate sSet sNoCountOn sSqlSafe_Updates sStmt
52160>>>        Boolean bRetval bSQLDriver
52160>>>        Integer iCurrErr iDbType
52160>>>
52160>>>        Move False to bRetval
52161>>>        Get piDbType to iDbType
52162>>>        Get psDriverID to sDriverID
52163>>>        Get IsSQLDriver sDriverID to bSQLDriver
52164>>>        If (bSQLDriver = False) Begin
52166>>>            Function_Return bRetval
52167>>>        End
52167>>>>
52167>>>        Get UtilTableHandleToString hTable to sTableName
52168>>>
52168>>>        Move Err to iCurrErr
52169>>>        Move False to Err
52170>>>        Get _SqlFindKeyWord CI_SQLUpdate       to sUpdate
52171>>>        Get _SqlFindKeyWord CI_SQLSet          to sSet
52172>>>        Get _SqlFindKeyWord CI_SQLSetNoCountOn to sNoCountOn
52173>>>        // If MySQL and DAW's ODBC driver is used we need to do it slightly different.
52173>>>        If (iDbType = EN_DbTypeMySQL) Begin
52175>>>            Get _SqlFindKeyWord CI_SQL_SAFE_UPDATES to sSqlSafe_Updates
52176>>>            Move (sSet * sSqlSafe_Updates + "=0;" * sUpdate * sTableName * sSet * sColumnName + "='" + sColumnValue + "'") to sStmt
52177>>>        End
52177>>>>
52177>>>        Else Begin
52178>>>            Move (sNoCountOn * sUpdate * sTableName * sSet * sColumnName + "='" + sColumnValue + "'") to sStmt
52179>>>        End
52179>>>>
52179>>>
52179>>>        Send SqlUtilExecuteQuery sStmt sDriverID
52180>>>        Move (Err = False) to bRetval
52181>>>        Move iCurrErr to Err
52182>>>
52182>>>        Function_Return bRetval
52183>>>    End_Function
52184>>>
52184>>>    // The fourth & fifth arguments are optional, depending on the iDataType
52184>>>    // passed. For e.g. a DF_ASCII the iLen must be passed.                     // Optional: // Optional:
52184>>>    Function SqlColumnChange Handle hTable String sColumnName Integer iDataType Integer iLen Integer iDec Returns Boolean
52186>>>        String sDriverID sTableName
52186>>>        Boolean bOK
52186>>>
52186>>>        Get psDriverID to sDriverID
52187>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52188>>>        If (bOK = False) Begin
52190>>>            Function_Return False
52191>>>        End
52191>>>>
52191>>>
52191>>>        Get UtilTableHandleToString hTable to sTableName
52192>>>        Get SqlColumnChangeByTableName sTableName sColumnName iDataType iLen iDec to bOK
52193>>>
52193>>>        Function_Return (Err = False)
52194>>>    End_Function
52195>>>
52195>>>    // Same as SqlColumnChange but instead of passing a filelist number; pass the table name as a string.
52195>>>    // The fourth & fifth arguments are optional, depending on the iDataType
52195>>>    // passed. For e.g. a DF_ASCII the iLen must be passed.                     // Optional: // Optional:
52195>>>    Function SqlColumnChangeByTableName String sTableName String sColumnName Integer iDataType Integer iLen Integer iDec Returns Boolean
52197>>>        Integer iDbType iLength iDecimals
52197>>>        String sDriverID sStmt sAlterTable sAlterColumn sDataType sLengthAndDecimals sNotNull
52197>>>        Boolean bExists bOK bFixed
52197>>>        Handle hTable
52197>>>
52197>>>        Get psDriverID to sDriverID
52198>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52199>>>        If (bOK = False) Begin
52201>>>            Function_Return False
52202>>>        End
52202>>>>
52202>>>
52202>>>        Get UtilTableNameToHandle sTableName to hTable
52203>>>        If (hTable = 0) Begin
52205>>>            Get NextFreeFilelistSlot to hTable
52206>>>        End
52206>>>>
52206>>>        Get SQLUtilColumnExists sTableName sColumnName to bExists
52207>>>        If (bExists = False) Begin
52209>>>            Function_Return False
52210>>>        End
52210>>>>
52210>>>
52210>>>        If (num_arguments > 3) Begin
52212>>>            Move iLen to iLength
52213>>>        End
52213>>>>
52213>>>        If (num_arguments > 4) Begin
52215>>>            Move iDec to iDecimals
52216>>>        End
52216>>>>
52216>>>
52216>>>        Get piDbType to iDbType
52217>>>        Get UtilColumnTypeToString sDriverID iDbType iDataType to sDataType
52218>>>
52218>>>        Move False to Err
52219>>>        Get _SqlProperTableName sTableName    to sTableName
52220>>>        Get _SqlFindKeyWord CI_SQLAlterTable  to sAlterTable
52221>>>        Get _SqlFindKeyWord CI_SQLAlterColumn to sAlterColumn
52222>>>        Get SQLUtilDefaultNullValue sDriverID iDbType iDataType to sNotNull
52223>>>
52223>>>        Get UtilColumnTypeFixed sDriverID iDbType iDataType to bFixed
52224>>>        If (bFixed = False) Begin
52226>>>            Get _SqlFormatLengthAndDecimalAsString iLength iDecimals to sLengthAndDecimals
52227>>>        End
52227>>>>
52227>>>
52227>>>        Move (sAlterTable * sTableName * sAlterColumn * sColumnName * sDataType + sLengthAndDecimals * sNotNull) to sStmt
52228>>>        Send SqlUtilExecuteQuery sStmt sDriverID
52229>>>
52229>>>        // We also need to remove the cache-file since the table has been changed
52229>>>        Get _UtilDeleteCacheFile sTableName to bOK
52230>>>
52230>>>        Function_Return (Err = False)
52231>>>    End_Function
52232>>>
52232>>>    Function SqlColumnDefaultValue Handle hTable Integer iColumn String sValue Returns Boolean
52234>>>        Boolean bOK bErr bIsSQLDriver
52234>>>        String sDriverID
52234>>>        Integer iDataType
52234>>>
52234>>>        Get psDriverID to sDriverID
52235>>>        Get IsSQLDriver sDriverID to bIsSQLDriver
52236>>>        If (bIsSQLDriver = False) Begin
52238>>>            Function_Return False
52239>>>        End
52239>>>>
52239>>>
52239>>>        Move Err to bErr
52240>>>        Move False to bErr
52241>>>
52241>>>        // There seems to be a problem with the ODBC_DRV driver that sometimes
52241>>>        // inserts randomly character(10) and spaces, so we correct from that here:
52241>>>        Move (Replaces(Character(10), Trim(sValue), "")) to sValue
52242>>>        Get_Attribute DF_FIELD_TYPE of hTable iColumn to iDataType
52245>>>        If (iDataType = DF_BCD and Left(sValue, 1 <> "[")) Begin
52247>>>            Move ("[" + String(sValue) + "]") to sValue
52248>>>        End
52248>>>>
52248>>>
52248>>>        Set_Attribute DF_FIELD_DEFAULT_VALUE of hTable iColumn to sValue
52251>>>        Move (not(Err)) to bOK
52252>>>        Move bErr to Err
52253>>>
52253>>>        Function_Return bOK
52254>>>    End_Function
52255>>>
52255>>>    Function SqlColumnNullable Handle hTable Integer iColumn Boolean bNullable Returns Boolean
52257>>>        Boolean bOK bErr bCurrentState bOpen bIsSQLDriver
52257>>>        String sDriverID
52257>>>
52257>>>        Get psDriverID to sDriverID
52258>>>        Get IsSQLDriver sDriverID to bIsSQLDriver
52259>>>        If (bIsSQLDriver = False) Begin
52261>>>            Function_Return False
52262>>>        End
52262>>>>
52262>>>
52262>>>        Move Err to bErr
52263>>>        Move False to bErr
52264>>>        Get_Attribute DF_FIELD_NULL_ALLOWED of hTable iColumn to bCurrentState
52267>>>        If (bNullable = bCurrentState) Begin
52269>>>            Function_Return True
52270>>>        End
52270>>>>
52270>>>
52270>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
52273>>>        If (bOpen = False) Begin
52275>>>            Get AutoConnectionIDLogin to bOK
52276>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
52277>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_INTERMEDIATE_FILE
52278>>>            Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
52279>>>            Open hTable
52281>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
52282>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_INTERMEDIATE_FILE
52283>>>            Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
52284>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
52287>>>        End
52287>>>>
52287>>>        If (bOpen = True) Begin
52289>>>            Structure_Start hTable sDriverID
52290>>>                Set_Attribute DF_FIELD_NULL_ALLOWED of hTable iColumn to bNullable
52293>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
52294>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
52296>>>            Set Action_Text of ghoStatusPanel to ""
52297>>>        End
52297>>>>
52297>>>
52297>>>        Move (not(Err)) to bOK
52298>>>        Move bErr to Err
52299>>>
52299>>>        Function_Return bOK
52300>>>    End_Function
52301>>>
52301>>>    // Drop column by its table handle
52301>>>    Function SqlColumnRemove Handle hTable String sColumnName Returns Boolean
52303>>>        String sDriverID sTableName
52303>>>        Boolean bOK
52303>>>
52303>>>        Get psDriverID to sDriverID
52304>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52305>>>        If (bOK = False) Begin
52307>>>            Function_Return False
52308>>>        End
52308>>>>
52308>>>
52308>>>        Get UtilTableHandleToString hTable to sTableName
52309>>>        If (sTableName = "") Begin
52311>>>            Function_Return False
52312>>>        End
52312>>>>
52312>>>
52312>>>        Get SqlColumnRemoveByTableName sTableName sColumnName to bOK
52313>>>
52313>>>        Function_Return (bOK = True)
52314>>>    End_Function
52315>>>
52315>>>    // Drop column by its table name as a string.
52315>>>    Function SqlColumnRemoveByTableName String sTableName String sColumnName Returns Boolean
52317>>>        Integer iDbType iDriver
52317>>>        String sDriverID sStmt sAlterTable sDropColumn
52317>>>        Boolean bExists bOK bRetval bDriverIgnoreErrorState
52317>>>        Handle hTable
52317>>>
52317>>>        Get psDriverID to sDriverID
52318>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52319>>>        If (bOK = False) Begin
52321>>>            Function_Return False
52322>>>        End
52322>>>>
52322>>>
52322>>>        Get DriverIndex sDriverID to iDriver
52323>>>        Get_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
52326>>>        Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to True
52329>>>
52329>>>        Get UtilTableNameToHandle sTableName to hTable
52330>>>        If (hTable <> 0) Begin
52332>>>            Get SQLUtilColumnExists sTableName sColumnName to bExists
52333>>>            If (bExists = False) Begin
52335>>>                Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
52338>>>                Function_Return False
52339>>>            End
52339>>>>
52339>>>        End
52339>>>>
52339>>>
52339>>>        Get piDbType to iDbType
52340>>>        If (iDbType = EN_DbTypeMSSQL) Begin
52342>>>            Get _SqlUtilRemoveTableColumnMSSQL sTableName sColumnName to bOK
52343>>>            Get _UtilDeleteCacheFile sTableName to bOK
52344>>>            Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
52347>>>            Function_Return bOK
52348>>>        End
52348>>>>
52348>>>
52348>>>        Move False to Err
52349>>>        Get _SqlProperTableName sTableName    to sTableName
52350>>>        Get _SqlFindKeyWord CI_SQLAlterTable  to sAlterTable
52351>>>        Get _SqlFindKeyWord CI_SQLDropColumn  to sDropColumn
52352>>>
52352>>>        Move (sAlterTable * sTableName * sDropColumn * sColumnName) to sStmt
52353>>>        Send SqlUtilExecuteQuery sStmt sDriverID
52354>>>        Move (not(Err)) to bRetval
52355>>>
52355>>>        // We also need to remove the cache-file since the table has been changed
52355>>>        Get _UtilDeleteCacheFile sTableName to bOK
52356>>>        Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
52359>>>
52359>>>        Function_Return bRetval
52360>>>    End_Function
52361>>>
52361>>>    // Rename a field/column by table handle (filelist number)
52361>>>    Function SqlColumnRename Integer hTable String sColumnName String sNewColumnName Returns Boolean
52363>>>        String sDriverID sTableName
52363>>>        Boolean bOK
52363>>>
52363>>>        Get psDriverID to sDriverID
52364>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52365>>>        If (bOK = False) Begin
52367>>>            Function_Return False
52368>>>        End
52368>>>>
52368>>>
52368>>>        Get UtilTableHandleToString hTable to sTableName
52369>>>        Get SqlColumnRenameByTableName sTableName sColumnName sNewColumnName to bOK
52370>>>
52370>>>        Function_Return (Err = False)
52371>>>    End_Function
52372>>>
52372>>>    // Rename a field/column by table name.
52372>>>    Function SqlColumnRenameByTableName String sTableName String sColumnName String sNewColumnName Returns Boolean
52374>>>        Integer iDbType iDataType
52374>>>        String sDriverID sStmt sAlterTable sRenameColumn sVal sColumnKeyWord sOrgTableName sDatabase sDataType
52374>>>        Boolean bOK bRetval
52374>>>        Handle hTable
52374>>>
52374>>>        Move sTableName to sOrgTableName
52375>>>        Get psDriverID to sDriverID
52376>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52377>>>        If (bOK = False) Begin
52379>>>            Function_Return False
52380>>>        End
52380>>>>
52380>>>
52380>>>        Get _SqlFindColumnName sTableName sColumnName to sVal
52381>>>        If (sVal = "") Begin
52383>>>            Function_Return False
52384>>>        End
52384>>>>
52384>>>
52384>>>        Get piDbType to iDbType
52385>>>        Get _SqlFindKeyWord CI_SQLColumn       to sColumnKeyWord
52386>>>        Get _SqlProperTableName sTableName     to sTableName
52387>>>        Get _SqlFindKeyWord CI_SQLAlterTable   to sAlterTable
52388>>>        Get _SqlFindKeyWord CI_SQLRenameColumn to sRenameColumn
52389>>>
52389>>>        Case Begin
52389>>>            Case (iDbType = EN_dbTypeMSSQL)
52391>>>                Move (sRenameColumn * "'" + sTableName + "." + sColumnName + "'," * "'" + sNewColumnName + "'," * "'" + sColumnKeyWord + "'") to sStmt
52392>>>                Case Break
52393>>>            // Alter table "SYS"."Customer" rename column "Comments" to "NewColumnName"
52393>>>            Case (iDbType = EN_dbTypeOracle)
52396>>>                Move (sAlterTable * '"' + sTableName + '"' * sRenameColumn * '"' + sColumnName + '"' * "TO" * '"' + sNewColumnName + '"') to sStmt
52397>>>                Case Break
52398>>>            // ALTER TABLE Schema.TableName RENAME COLUMN "deptnumb" TO "deptnum"
52398>>>            Case (iDbType = EN_dbTypeDB2)
52401>>>                Move (sAlterTable *  sTableName * sRenameColumn * '"' + sColumnName + '"' * "TO" * '"' + sNewColumnName + '"') to sStmt
52402>>>                Case Break
52403>>>            // ALTER TABLE "Customer" RENAME COLUMN "Comments" TO "NewColumnName"
52403>>>            Case (iDbType = EN_dbTypePostgre)
52406>>>                Move sOrgTableName to sTableName
52407>>>                Move (sAlterTable * '"' + sTableName + '"' * sRenameColumn * '"' + sColumnName + '"' * "TO" * '"' + sNewColumnName + '"') to sStmt
52408>>>                Case Break
52409>>>            Case (iDbType = EN_dbTypeMySQL)
52412>>>                // ALTER TABLE orderentry.customer CHANGE Comments NewColumnName text // Note: The last token is the column type!
52412>>>                Move sOrgTableName to sTableName
52413>>>                Get psDatabase to sDatabase
52414>>>                Get UtilTableNameToHandle sTableName to hTable
52415>>>                If (hTable = 0) Begin
52417>>>                    Get UtilTableOpen hTable sTableName DF_SHARE to bOK
52418>>>                    If (bOK = False) Begin
52420>>>                        Function_Return False
52421>>>                    End
52421>>>>
52421>>>                    Get NextFreeFilelistSlot to hTable
52422>>>                End
52422>>>>
52422>>>                Else Begin
52423>>>                    Open hTable
52425>>>                End
52425>>>>
52425>>>                Get SQLColumnType sDriverID hTable sTableName sColumnName to iDataType
52426>>>                Get UtilColumnTypeToString sDriverID iDbType iDataType    to sDataType
52427>>>                Move (sAlterTable * sDatabase + "." + sTableName * sRenameColumn * sColumnName * sNewColumnName * sDataType) to sStmt
52428>>>                Case Break
52429>>>            Case Else
52429>>>                Move (sAlterTable * "'" + sTableName + "'" * sRenameColumn * "'" + sTableName + "." + sColumnName + "'" * "TO" * "'" + sNewColumnName + "'") to sStmt
52430>>>        Case End
52430>>>
52430>>>        Move False to Err
52431>>>        Send SqlUtilExecuteQuery sStmt sDriverID
52432>>>        Move (Err = False) to bRetval
52433>>>        // We also need to remove the cache-file since the table has been changed
52433>>>        Get _UtilDeleteCacheFile sTableName to bOK
52434>>>
52434>>>        Function_Return bRetval
52435>>>    End_Function
52436>>>
52436>>>    Function SqlColumnType String sDriverID Handle hTable String sTableName String sColumnName Returns Integer
52438>>>        Handle hoSQLHandler hSQLConnect hStmt
52438>>>        Integer iNumCols iCount iDataType
52438>>>        String sValue
52438>>>
52438>>>        Get phoSQLManager to hoSQLHandler
52439>>>        Get SQLFileConnect of hoSQLHandler hTable to hSQLConnect
52440>>>        If (hSQLConnect <> 0) Begin
52442>>>            Get SQLOpen of hSQLConnect to hStmt
52443>>>            If (hStmt <> 0) Begin
52445>>>                Send SQLExecDirect of hStmt ("select * from" * sTableName)
52446>>>
52446>>>                Get SQLStmtAttribute of hStmt SQLSTMTATTRIB_COLUMNCOUNT to iNumCols
52447>>>                For iCount from 1 to iNumCols
52453>>>>
52453>>>                    Get SQLColAttribute of hStmt iCount SQLCOLATTRIB_LABEL to sValue
52454>>>                    If (Lowercase(sValue) = Lowercase(sColumnName)) Begin
52456>>>                        Get SQLColAttribute of hStmt iCount SQLCOLATTRIB_SQLTYPE to iDataType
52457>>>                        Move iNumCols to iCount // We're out of here
52458>>>                    End
52458>>>>
52458>>>                Loop
52459>>>>
52459>>>
52459>>>                Send SQLClose of hStmt
52460>>>            End
52460>>>>
52460>>>            Send SQLDisconnect of hSQLConnect
52461>>>        End
52461>>>>
52461>>>
52461>>>        Function_Return iDataType
52462>>>    End_Function
52463>>>
52463>>>    // * Dummy function for the Studio's Code Explorer *
52463>>>    Function SQL_EXECUTE_FUNCTIONS Returns Boolean
52465>>>        Function_Return False
52466>>>    End_Function
52467>>>
52467>>>    Procedure SqlUtilExecuteQuery String sStmt String sDriverID Boolean bShowProgr
52469>>>        String sMessage // sConnectionString
52469>>>        Handle hoSqlHandler hoSQLConnect hoStmt hoError
52469>>>        Integer i iMsgs iFetchResult iRowType iRows iErr iMessage iLastErr
52469>>>        String[] sMsg aSQLQueryMessages aSQLFetchResults
52472>>>        DateTime dtQueryExecStart dtQueryExecEnd dtFetchStart dtFetchEnd
52472>>>        TimeSpan tsQuery tsFetch
52472>>>        tSqlErrorArray aSqlErrorArray
52472>>>        tSqlErrorArray aSqlErrorArray
52472>>>        Boolean bOK bShowProgress
52472>>>        tSQLConnection SQLConnection
52472>>>        tSQLConnection SQLConnection
52472>>>
52472>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52473>>>        If (bOK = False) Begin
52475>>>            Procedure_Return
52476>>>        End
52476>>>>
52476>>>
52476>>>        If (num_arguments > 2) Begin
52478>>>            Move bShowProgr to bShowProgress
52479>>>        End
52479>>>>
52479>>>
52479>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
52480>>>        Get phoSQLManager to hoSqlHandler
52481>>>        Send SqlSetConnect of hoSqlHandler sDriverID SQLConnection.sConnectionString
52482>>>        Get SqlConnect     of hoSqlHandler "" "" to hoSQLConnect
52483>>>
52483>>>        If (hoSQLConnect <> 0) Begin
52485>>>            Get SqlOpen of hoSQLConnect to hoStmt
52486>>>            If (hoStmt <> 0) Begin
52488>>>                // record starting date/time stamp
52488>>>                Move (CurrentDateTime()) to dtQueryExecStart
52489>>>                // turn on error handling if enabled
52489>>>                If (pbHandleQueryErrors(Self)) Begin
52491>>>                    Set pbSqlError to False
52492>>>                    Set paSqlErrorArray to aSqlErrorArray
52493>>>                    Move Error_Object_Id to hoError
52494>>>                    If (ghoDbUpdateHandler <> 0) Begin
52496>>>                        Move ghoDbUpdateHandler to Error_Object_Id
52497>>>                    End
52497>>>>
52497>>>                    Else Begin
52498>>>                        Move Self to Error_Object_Id
52499>>>                    End
52499>>>>
52499>>>                End
52499>>>>
52499>>>
52499>>>                // Before we execute the statement; save it so we can display the faulty statement in the error log.
52499>>>                Set psSQLStatementString to sStmt
52500>>>                Send Cursor_Wait of Cursor_Control
52501>>>                Send SqlExecDirect of hoStmt sStmt
52502>>>                Send Cursor_Ready of Cursor_Control
52503>>>
52503>>>                If (pbHandleQueryErrors(Self)) Begin
52505>>>                    Move hoError to Error_Object_Id
52506>>>                End
52506>>>>
52506>>>
52506>>>                Move 0 to iMsgs
52507>>>                Move Err to iErr
52508>>>                Move LastErr to iLastErr
52509>>>                Get SqlStmtAttribute of hoStmt SQLSTMTATTRIB_NUMMESSAGES   to iMsgs
52510>>>                Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_ROWCOUNT      to iRows
52511>>>                Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_ROWCOUNT_TYPE to iRowType
52512>>>                Send _SqlColumnInfo hoStmt
52513>>>                Send Ignore_Error of Error_Object_Id 12289
52514>>>                Set Error_Report_Mode to DUF_ERROR_NO_REPORT
52515>>>                Repeat
52515>>>>
52515>>>                    Get SqlFetch of hoStmt to iFetchResult
52516>>>                    If (iFetchResult <> 0) Begin
52518>>>                        Get SQLColumnValue of hoStmt 1 to aSQLFetchResults[SizeOfArray(aSQLFetchResults)]
52519>>>                    End
52519>>>>
52519>>>                Until (iFetchResult = 0)
52521>>>                Send Trap_Error of Error_Object_Id 12289
52522>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
52523>>>                Move iErr to Err
52524>>>                Move iLastErr to LastErr
52525>>>                Set paSQLFetchResults to aSQLFetchResults
52526>>>
52526>>>                Set piRows    to iRows
52527>>>                Set piRowType to iRowType
52528>>>                Move (CurrentDateTime()) to dtQueryExecEnd
52529>>>                Move (CurrentDateTime()) to dtFetchStart
52530>>>
52530>>>                If (iMsgs <> 0) Begin
52532>>>                    If (ghoDbUpdateHandler > 0) Begin
52534>>>                        Get paSQLQueryMessages of ghoDbUpdateHandler to aSQLQueryMessages
52535>>>                    End
52535>>>>
52535>>>                    For i from 1 to iMsgs
52541>>>>
52541>>>                        Get SqlGetMessage of hoStmt i to sMessage
52542>>>                        Get RemoveComponentIdentifier of hoStmt sMessage to sMessage
52543>>>                        If (bShowProgress = True) Begin
52545>>>                            If (Active_State(ghoStatusPanel)) Begin
52547>>>                                Send Update_StatusPanel of ghoStatusPanel (Sformat("  SQLGetMessage iMessage %1 returned [%2]",iMessage,sMessage))
52548>>>                            End
52548>>>>
52548>>>                            Else Begin
52549>>>                                Showln (Sformat("  SQLGetMessage iMessage %1 returned [%2]",iMessage,sMessage))
52551>>>                            End
52551>>>>
52551>>>                        End
52551>>>>
52551>>>                        Move sMessage to sMsg[SizeOfArray(sMsg)]
52552>>>                        Move sMessage to aSQLQueryMessages[SizeOfArray(aSQLQueryMessages)]
52553>>>                    Loop
52554>>>>
52554>>>                    If (ghoDbUpdateHandler > 0) Begin
52556>>>                        Set paSQLQueryMessages of ghoDbUpdateHandler to aSQLQueryMessages
52557>>>                    End
52557>>>>
52557>>>                    Set paQueryMessages to sMsg
52558>>>                End
52558>>>>
52558>>>                Else Begin
52559>>>                    If (bShowProgress = True) Begin
52561>>>                        Get paSqlErrorArray to aSqlErrorArray
52562>>>                        If (SizeOfArray(aSqlErrorArray.iSqlErrorArray)) Begin
52564>>>                            Move (SizeOfArray(aSqlErrorArray.iSqlErrorArray)) to iMsgs
52565>>>                            Decrement iMsgs
52566>>>                            For i from 0 to iMsgs
52572>>>>
52572>>>                                Showln "Embedded SQL Statement: " aSqlErrorArray.sSqlStatementArray[i]
52575>>>                                Showln "SQL Error Message     : " aSqlErrorArray.sSqlErrorArray[i]
52578>>>                            Loop
52579>>>>
52579>>>                        End
52579>>>>
52579>>>                    End
52579>>>>
52579>>>                End
52579>>>>
52579>>>                Move (CurrentDateTime()) to dtFetchEnd
52580>>>            End
52580>>>>
52580>>>            Move (dtQueryExecEnd - dtQueryExecStart) to tsQuery
52581>>>            Move (dtFetchStart - dtFetchEnd) to tsFetch
52582>>>            Set ptsQueryExec to tsQuery
52583>>>            Set ptsFetchResults to tsFetch
52584>>>            Send SqlClose of hoStmt
52585>>>        End
52585>>>>
52585>>>
52585>>>        Send SqlDisconnect of hoSQLConnect
52586>>>    End_Procedure
52587>>>
52587>>>    // *** Main message for executing an SQL script that has been compiled into the program as a resource ***
52587>>>    // Use the SQLIncludeScriptFile command to include an SQL script into the program.
52587>>>    // Returns False if no error occured.
52587>>>    Function SqlUtilExecuteResource String sMemFileName String sDriverID Boolean bCreateScriptFile Boolean bShowProgr Returns Boolean
52589>>>        Boolean bOK bShowProgress
52589>>>        tSQLScriptArray SQLScriptArray
52589>>>        tSQLScriptArray SQLScriptArray
52589>>>        DateTime dtTotalQueryStart dtTotalQueryEnd
52589>>>        TimeSpan tsTotalTime
52589>>>
52589>>>        Move (CurrentDateTime()) to dtTotalQueryStart
52590>>>        Get _SqlUtilReadResource sMemFileName to SQLScriptArray
52591>>>        If (SQLScriptArray.bError = True) Begin
52593>>>            Function_Return False
52594>>>        End
52594>>>>
52594>>>
52594>>>        If (num_arguments > 3) Begin
52596>>>            Move bShowProgr to bShowProgress
52597>>>        End
52597>>>>
52597>>>
52597>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
52598>>>        Get _SqlUtilExecuteEmbeddedScript SQLScriptArray sDriverID bCreateScriptFile sMemFileName bShowProgress to bOK
52599>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
52600>>>
52600>>>        Move (CurrentDateTime()) to dtTotalQueryEnd
52601>>>        Move (dtTotalQueryEnd - dtTotalQueryStart) to tsTotalTime
52602>>>        Set ptsTotalQueryTime to tsTotalTime
52603>>>
52603>>>        Function_Return bOK
52604>>>    End_Function
52605>>>
52605>>>    // * Dummy function for the Studio's Code Explorer *
52605>>>    Function SQL_UTILITY_FUNCTIONS Returns Boolean
52607>>>        Function_Return False
52608>>>    End_Function
52609>>>
52609>>>    // Does three things with auxilirary files;
52609>>>    // 1) Deletes the cache file in the first Data folder of the psDataPath property as the table at the SQL end has been changed.
52609>>>    // 2) Adds the sColumnName to the TableName.tag file in the first Data folder of the psDataPath property
52609>>>    // 3) Creates a new TableName.fd file if the DdSrc folder is available (if this is a development environment)
52609>>>    Function SqlUtilAdjustAuxFiles Handle hTable String sTableName String sColumnName Returns Boolean
52611>>>        String sDataPath sDDSrcPath sDriverID
52611>>>        Boolean bOK bExists
52611>>>        Integer iCount iCh iPos
52611>>>
52611>>>        // If table name equals e.g. "dbo.MyTable" we need to remove the prefix.
52611>>>        If (sTableName contains ".") Begin
52613>>>            Move (Pos(".", sTableName)) to iPos
52614>>>            Move (Mid(sTableName, 999, (iPos +1))) to sTableName
52615>>>        End
52615>>>>
52615>>>
52615>>>        Get psDriverID to sDriverID
52616>>>        Get psDataPathFirstPart to sDataPath
52617>>>        Get vFolderExists sDataPath to bOK
52618>>>        If (bOK = False) Begin
52620>>>            Error DFERR_PROGRAM "Function SqlUtilAdjustAuxFiles; psDataPath not found!"
52621>>>>
52621>>>            Function_Return False
52622>>>        End
52622>>>>
52622>>>
52622>>>        // First delete the cache file:
52622>>>        Get _UtilDeleteCacheFile sTableName to bOK
52623>>>
52623>>>        Get Seq_New_Channel to iCh
52624>>>        If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
52626>>>            Function_Return False
52627>>>        End
52627>>>>
52627>>>
52627>>>        Get vFilePathExists (sDataPath + sTableName + ".tag") to bExists
52628>>>        If (bExists = False) Begin
52630>>>            Function_Return False
52631>>>        End
52631>>>>
52631>>>
52631>>>        Get _SqlUtilUpdateIntFile hTable to bOK
52632>>>        // Add the new column name to the .tag filen (if it doesn't exist):
52632>>>        Get _UtilUpdateTAGFile (sDataPath + sTableName + ".tag") sColumnName to bOK
52633>>>
52633>>>        // If in development environment; output new .fd file:
52633>>>        Get psDdSrcPath of (phoWorkspace(ghoApplication)) to sDDSrcPath
52634>>>        Get CountOfPaths of (phoWorkspace(ghoApplication)) sDDSrcPath to iCount
52635>>>        If (iCount > 1) Begin
52637>>>            Get PathAtIndex of (phoWorkspace(ghoApplication)) sDDSrcPath 1 to sDDSrcPath
52638>>>        End
52638>>>>
52638>>>        Get vFolderExists sDDSrcPath to bExists
52639>>>        If (bExists = True) Begin
52641>>>            Get vFolderFormat sDDSrcPath to sDDSrcPath
52642>>>            Move False to Err
52643>>>            Get AutoConnectionIDLogin to bOK
52644>>>            If (hTable <> 0) Begin
52646>>>                Open hTable
52648>>>            End
52648>>>>
52648>>>            Else Begin
52649>>>                Get UtilTableOpen hTable sTableName DF_SHARE to bOK
52650>>>            End
52650>>>>
52650>>>
52650>>>            Get_Attribute DF_FILE_OPENED of hTable to bOK
52653>>>            If (bOK = True) Begin
52655>>>                Output_Aux_File DF_AUX_FILE_FD for hTable to (sDDSrcPath + sTableName + ".fd")
52657>>>            End
52657>>>>
52657>>>            If (Err = True) Begin
52659>>>                Move False to bOK
52660>>>            End
52660>>>>
52660>>>        End
52660>>>>
52660>>>
52660>>>        Function_Return (bOK = True)
52661>>>    End_Function
52662>>>
52662>>>    // Message for changing .int files to use connection ID's
52662>>>    //
52662>>>    // Changes all ".int" files for the passed sDataPath to use a sConnectionID,
52662>>>    // OR changes an existing connection id to a new id.
52662>>>    // Pass the full path to the data folder and the name of the connection id (string value).
52662>>>    // Pass a True for the bShowResult parameter to show work in progress (showln's).
52662>>>    Function SqlUtilChangeIntFilesToConnectionIDs String sDataPath String sConnectionID Boolean bShowResult Returns String[] 
52664>>>        String sFileName sDriverID sDriverFile sConnectionString sPath
52664>>>        String[] sFilesData asFileChanges
52666>>>        Boolean bOK bCancel bChange
52666>>>        Integer iSize iCount
52666>>>
52666>>>        Get SqlUtilEnumerateIntFiles sDataPath to sFilesData
52667>>>        Move (SizeOfArray(sFilesData))    to iSize
52668>>>        If (iSize = 0) Begin
52670>>>            If (ghoStatusPanel <> 0) Begin
52672>>>                If (Active_State(ghoStatusPanel)) Begin
52674>>>                    Send Stop_StatusPanel of ghoStatusPanel
52675>>>                End
52675>>>>
52675>>>            End
52675>>>>
52675>>>            Send Info_Box CS_DUF_NoIntFilesFound
52676>>>            Function_Return 0
52677>>>        End
52677>>>>
52677>>>
52677>>>        Move (Trim(sConnectionID)) to sConnectionID
52678>>>        Get vFolderFormat sDataPath to sDataPath
52679>>>        Decrement iSize
52680>>>        For iCount from 0 to iSize
52686>>>>
52686>>>            Move sFilesData[iCount] to sFileName
52687>>>            If (Lowercase(sFileName) <> "mssqldrv.int" and Lowercase(sFileName) <> "db2_drv.int" and Lowercase(sFileName) <> "odbc_drv.int") Begin
52689>>>            // This makes sure that we also can change an existing connection id to something new:
52689>>>            Get _UtilChangeSourceCodeLine (sDataPath + sFileName) (CS_SERVER_NAME * CS_SERVER) (CS_SERVER_NAME * CS_DFCONNID + "=" + sConnectionID) bShowResult to bChange
52690>>>            If (bChange = True) Begin
52692>>>                Move sFileName to asFileChanges[SizeOfArray(asFileChanges)]
52693>>>            End
52693>>>>
52693>>>            If (ghoStatusPanel <> 0) Begin
52695>>>                If (Active_State(ghoStatusPanel)) Begin
52697>>>                    Get Check_StatusPanel of ghoStatusPanel to bCancel
52698>>>                    If (bCancel = True) Begin
52700>>>                        Send Deactivate of ghoStatusPanel
52701>>>                        Function_Return asFileChanges
52702>>>                        End
52702>>>>
52702>>>                    End
52702>>>>
52702>>>                End
52702>>>>
52702>>>            End
52702>>>>
52702>>>        Loop
52703>>>>
52703>>>
52703>>>         // ToDo: Not sure at all we want to do this automatically:
52703>>>//        Get psDriverID to sDriverID
52703>>>//         // Finally also change the driver file e.g. MSSQLDRV.int file in the Data folder in case it has a "DFconnectionID xxxxID,SERVER..."
52703>>>//        Move "" to sFileName
52703>>>//        If (sDriverID = MSSQLDRV_ID) Begin
52703>>>//            Move "MSSQLDrv.int" to sFileName
52703>>>//        End
52703>>>//        If (sDriverID = DB2_DRV_ID) Begin
52703>>>//            Move "DB2_Drv.int" to sFileName
52703>>>//        End
52703>>>//        If (sDriverID = ODBC_DRV_ID) Begin
52703>>>//            Move "ODBC_Drv.int" to sFileName
52703>>>//        End
52703>>>//        If (sFileName <> "") Begin
52703>>>//            Move "" to sDriverFile
52703>>>//            Get_File_Path sFileName to sDriverFile
52703>>>//            Get ParseFolderName sDriverFile to sPath
52703>>>//            If (sDataPath <> sPath) Begin
52703>>>//                Move "" to sDriverFile
52703>>>//            End
52703>>>//            If (sDriverFile <> "") Begin
52703>>>//                Get psConnectionString to sConnectionString
52703>>>//                Get _UtilChangeSourceCodeLine sDriverFile CS_SQLConnectionIDText (CS_SQLConnectionIDText * String(sConnectionID) + "," * String(sConnectionString) * String(",0")) bShowResult to bOK
52703>>>//            End
52703>>>//        End     
52703>>>        
52703>>>        Function_Return asFileChanges
52704>>>    End_Function
52705>>>
52705>>>    // Checks if the database exists in SQL. Returns = True if it does.
52705>>>    Function SqlUtilCheckIfDatabaseExists String sDatabase Returns Boolean
52707>>>        String[] sDatabaseArray
52708>>>        String sVal sServer sDriverID
52708>>>        Integer iCount iSize iPos
52708>>>        Boolean bExists
52708>>>        tSQLConnection SQLConnection
52708>>>        tSQLConnection SQLConnection
52708>>>
52708>>>        Move False to bExists
52709>>>        Get psDriverID to sDriverID
52710>>>        // DB2 doesn't have a "Database" name, so we always return True.
52710>>>        If (sDriverID = DB2_DRV_ID) Begin
52712>>>            Function_Return bExists
52713>>>        End
52713>>>>
52713>>>
52713>>>        Get SqlUtilEnumerateDatabases sDriverID to sDatabaseArray
52714>>>        If (SizeOfArray(sDatabaseArray) = 0) Begin
52716>>>            Function_Return False
52717>>>        End
52717>>>>
52717>>>
52717>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
52718>>>        Move SQLConnection.sServer to sServer
52719>>>
52719>>>        // Special code to handle a FILEDSN that also can contain "/"
52719>>>        If (Uppercase(sServer) contains ("." + CS_SQLIniDSNKeyword)) Begin
52721>>>            Move sDatabaseArray[0] to sVal  // Dummy!
52722>>>        End
52722>>>>
52722>>>        Else If (sServer contains "/") Begin
52725>>>            Move (Pos("/", sServer)) to iPos
52726>>>            Move (Mid(sServer, 999, (iPos +1))) to sDatabase
52727>>>        End
52727>>>>
52727>>>
52727>>>        Move (SizeOfArray(sDatabaseArray)) to iSize
52728>>>        Decrement iSize
52729>>>        For iCount from 0 to iSize
52735>>>>
52735>>>            Move sDatabaseArray[iCount] to sVal
52736>>>            If (Uppercase(sVal) = Uppercase(sDatabase)) Begin
52738>>>                Move True to bExists
52739>>>                If (bExists = True) Begin
52741>>>                    Move iSize to iCount // We're done.
52742>>>                End
52742>>>>
52742>>>            End
52742>>>>
52742>>>        Loop
52743>>>>
52743>>>
52743>>>        Function_Return bExists
52744>>>    End_Function
52745>>>
52745>>>    // Checks if a table exists as an SQL table. Returns = True if it does.
52745>>>    Function SqlUtilCheckIfTableHandleExists Handle hTable String sDriverID Returns Boolean
52747>>>        String sDatabase sSchema sTableName sVal
52747>>>        Boolean bExists
52747>>>        String[] sTablesArray
52748>>>        Integer iSize iCount
52748>>>
52748>>>        Move False to bExists
52749>>>        Get UtilTableHandleToString hTable to sTableName
52750>>>        Get psDatabase to sDatabase
52751>>>        Get psSchema   to sSchema
52752>>>        Get _SqlUtilEnumerateTables sDriverID sDatabase sSchema to sTablesArray
52753>>>        Move (SizeOfArray(sTablesArray)) to iSize
52754>>>        Decrement iSize
52755>>>        For iCount from 0 to iSize
52761>>>>
52761>>>            Move sTablesArray[iCount] to sVal
52762>>>            If (Uppercase(sVal) = Uppercase(sTableName)) Begin
52764>>>                Move True to bExists
52765>>>                Move iSize to iCount // We're done!
52766>>>            End
52766>>>>
52766>>>        Loop
52767>>>>
52767>>>
52767>>>        Function_Return bExists
52768>>>    End_Function
52769>>>
52769>>>    Function SqlUtilCheckIfTableNameSpelling String sDriverID String sDatabase String sTableName String sSchema Returns String
52771>>>        String sVal sTableSpelledCorrectly
52771>>>        Boolean bExists
52771>>>        String[] sTablesArray
52772>>>        Integer iSize iCount
52772>>>
52772>>>        Move False to bExists
52773>>>        Move sTableName to sTableSpelledCorrectly
52774>>>        Get _SqlUtilEnumerateTables sDriverID sDatabase sSchema to sTablesArray
52775>>>        Move (SizeOfArray(sTablesArray)) to iSize
52776>>>        Decrement iSize
52777>>>        For iCount from 0 to iSize
52783>>>>
52783>>>            Move sTablesArray[iCount] to sVal
52784>>>            If (Uppercase(sVal) = Uppercase(sTableName)) Begin
52786>>>                Move sVal to sTableSpelledCorrectly
52787>>>                Move iSize to iCount // We're done!
52788>>>            End
52788>>>>
52788>>>        Loop
52789>>>>
52789>>>
52789>>>        Function_Return sTableSpelledCorrectly
52790>>>    End_Function
52791>>>
52791>>>    // ToDo: This index name function needs to be finished...
52791>>>    Function SqlUtilCheckIfIndexNameExists Handle hTable String sIndexName Returns Boolean
52793>>>        String sSchema sTableName sDriverID
52793>>>        Boolean bExists
52793>>>
52793>>>        Get psDriverID to sDriverID
52794>>>        Get psSchema to sSchema
52795>>>        Get UtilTableHandleToString hTable to sTableName
52796>>>
52796>>>        Function_Return bExists
52797>>>    End_Function
52798>>>
52798>>>    // Checks if a column/field name exists in a SQL table definition
52798>>>    // Returns True if it does
52798>>>    // Sample:
52798>>>    //   Get SQLUtilColumnExists "MySQLTable" "MyColumnName" to bExists
52798>>>    Function SqlUtilColumnExists String sTableName String sFieldName Returns Boolean
52800>>>        Integer iNumColumns iColumn
52800>>>        String sColumn sDriverID
52800>>>        String[] sColumnsArray
52801>>>        Boolean bExists bOK
52801>>>
52801>>>        Move False to bExists
52802>>>        Get AutoConnectionIDLogin to bOK
52803>>>        Get psDriverID to sDriverID
52804>>>
52804>>>        Get _SqlUtilEnumerateColumns sDriverID sTableName to sColumnsArray
52805>>>        Move (SizeOfArray(sColumnsArray)) to iNumColumns
52806>>>        Decrement iNumColumns
52807>>>        For iColumn from 0 to iNumColumns
52813>>>>
52813>>>            Move sColumnsArray[iColumn] to sColumn
52814>>>            If (Uppercase(sFieldName) = Uppercase(sColumn)) Begin
52816>>>                Move True to bExists
52817>>>                Move iNumColumns to iColumn // We're out of here
52818>>>            End
52818>>>>
52818>>>        Loop
52819>>>>
52819>>>
52819>>>        Function_Return bExists
52820>>>    End_Function
52821>>>
52821>>>    Function SqlUtilConvertColumnTypesToSQL2008 Handle hTable Returns Boolean
52823>>>        Integer iNumColumns iColumn iDFType iNativeType
52823>>>        Boolean bOpened bOK
52823>>>        String sColumnName sNativeTypeName
52823>>>
52823>>>        Get AutoConnectionIDLogin to bOK
52824>>>        Get OpenTableExclusive hTable to bOK
52825>>>        If (bOK = False) Begin
52827>>>            Function_Return False
52828>>>        End
52828>>>>
52828>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
52831>>>        If (bOpened = False) Begin
52833>>>            Error DFERR_PROGRAM ("Function SQLUtilConvertColumnTypesToSQL2008; Could not open table" * String(hTable))
52834>>>>
52834>>>            Function_Return False
52835>>>        End
52835>>>>
52835>>>
52835>>>        Move False to Err
52836>>>
52836>>>        Structure_Start hTable
52837>>>            Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
52840>>>
52840>>>            For iColumn from 1 to iNumColumns
52846>>>>
52846>>>                Get_Attribute DF_FIELD_TYPE             of hTable iColumn to iDfType
52849>>>                Get_Attribute DF_FIELD_NAME             of hTable iColumn to sColumnName
52852>>>                Get_Attribute DF_FIELD_NATIVE_TYPE      of hTable iColumn to iNativeType
52855>>>                Get_Attribute DF_FIELD_NATIVE_TYPE_Name of hTable iColumn to sNativeTypeName
52858>>>
52858>>>                Case Begin
52858>>>                    Case (iDFType = DF_DATE)
52860>>>                        If (iNativeType = SQL_TYPE_TIMESTAMP) Begin
52862>>>                            // Convert datetime to date
52862>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_TYPE_DATE
52865>>>                        End
52865>>>>
52865>>>                        Case Break
52866>>>                    Case (iDFType = DF_DATETIME)
52869>>>                        If (iNativeType = SQL_TYPE_TIMESTAMP) Begin
52871>>>                            // Convert datetime to datetime2
52871>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_TYPE_TIMESTAMP2
52874>>>                        End
52874>>>>
52874>>>                        Case Break
52875>>>                    Case (iDFType = DF_ASCII)
52878>>>                        If (iNativeType = SQL_CHAR) Begin
52880>>>                            // Convert char to varchar
52880>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_VARCHAR
52883>>>                        End
52883>>>>
52883>>>                        Case Break
52884>>>                    Case (iDFType = DF_TEXT)
52887>>>                        If (iNativeType = SQL_LONGVARCHAR) Begin
52889>>>                            // Convert text to varchar(max)
52889>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_VARCHAR
52892>>>                        End
52892>>>>
52892>>>                        Case Break
52893>>>                    Case (iDFType = DF_BINARY)
52896>>>                        If (iNativeType = SQL_LONGVARBINARY) Begin
52898>>>                            // Convert image to varbinary(max)
52898>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_VARBINARY
52901>>>                        End
52901>>>>
52901>>>                        Case Break
52902>>>                Case End
52902>>>            Loop
52903>>>>
52903>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
52904>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
52906>>>
52906>>>        Set Action_Text of ghoStatusPanel to ""
52907>>>        Function_Return (Err = False)
52908>>>    End_Function
52909>>>
52909>>>
52909>>>    // Will create an SQL table with the passed sTableName & sColumnName as Numeric 4.2 to keep
52909>>>    // the DbUpdateVersion database revision in.
52909>>>    // Also pass the file number of the current (embedded?) table number used in development.
52909>>>    // It will first create the SQL Table & column, then create the .int file and change Filelist.cfg
52909>>>    Function SqlUtilCreateDbVersionTable Handle hTable String sColumnName String sDriverID Returns Boolean
52911>>>        Boolean bOK bOpened
52911>>>        String sTableName sDataType sAlterTable sAddColumn sLengthAndDecimals sStmt
52911>>>
52911>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sTableName
52914>>>        Get _TableNameOnly sTableName to sTableName
52915>>>        If (sTableName = "") Begin
52917>>>            Function_Return False
52918>>>        End
52918>>>>
52918>>>
52918>>>        // This just creates the table and a "dummy" column.
52918>>>        Get SqlTableCreate hTable sDriverID to bOK
52919>>>        If (bOK = False) Begin
52921>>>            Function_Return False
52922>>>        End
52922>>>>
52922>>>
52922>>>        Close hTable
52923>>>        Move False to Err
52924>>>
52924>>>        Get _SqlFindKeyWord CI_SQLAlterTable to sAlterTable
52925>>>        Get _SqlFindKeyWord CI_SQLAdd        to sAddColumn
52926>>>        Move "Decimal" to sDataType
52927>>>        Get _SqlFormatLengthAndDecimalAsString 4 2 to sLengthAndDecimals
52928>>>
52928>>>        // Adds the "sColumnName" passed to the function
52928>>>        Move (sAlterTable * sTableName * sAddColumn * sColumnName * sDataType + sLengthAndDecimals) to sStmt
52929>>>        Send SqlUtilExecuteQuery sStmt sDriverID
52930>>>
52930>>>        // Now we can delete the dummy column:
52930>>>        Get SqlColumnRemoveByTableName sTableName "Dummy" to bOK
52931>>>
52931>>>        // Finally, we attach to the newly created table.
52931>>>        If (Err = False) Begin
52933>>>            Get ApiTableAttachToSQL hTable True to bOK
52934>>>        End
52934>>>>
52934>>>        Open hTable
52936>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
52939>>>
52939>>>        Function_Return (Err = False and bOK = True and bOpened = True)
52940>>>    End_Function
52941>>>
52941>>>    // Returns a handle to the SQL server associated with the passed driver ID.
52941>>>    // Pass e.g. the psServer property to determine the current connection server.
52941>>>    // Returns a handle to the database connection, or a zero (0) if it fails.
52941>>>    // This handle can be used to obtain attributes about the server, such as default
52941>>>    // column types.
52941>>>    Function SqlUtilDatabaseHandle String sDriverID String sServer Returns Handle
52943>>>        Handle hDatabase
52943>>>        Integer iDriver iServers iCount
52943>>>        String sValue
52943>>>
52943>>>        If (sServer = "") Begin
52945>>>            Function_Return 0
52946>>>        End
52946>>>>
52946>>>
52946>>>        Get DriverIndex sDriverID to iDriver
52947>>>        If (iDriver = 0) Begin
52949>>>            Function_Return 0
52950>>>        End
52950>>>>
52950>>>
52950>>>        Get_Attribute DF_DRIVER_NUMBER_SERVERS of iDriver to iServers
52953>>>        For iCount from 1 to iServers
52959>>>>
52959>>>            Get_Attribute DF_DRIVER_SERVER_NAME of iDriver iCount to sValue
52962>>>            If (Uppercase(sValue) contains Uppercase(sServer)) Begin
52964>>>                Get_Attribute DF_DATABASE_ID of iDriver iCount to hDatabase
52967>>>            End
52967>>>>
52967>>>        Loop
52968>>>>
52968>>>
52968>>>        Function_Return hDatabase
52969>>>    End_Function
52970>>>
52970>>>//    Function UtilIsFilelistEntryDriverBased Integer hTable String sDriverID Returns Boolean
52970>>>//        String sRootName
52970>>>//        Boolean bOK
52970>>>//
52970>>>//        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
52970>>>//        Move (sRootName contains sDriverID) to bOK
52970>>>//
52970>>>//        Function_Return bOK
52970>>>//    End_Function
52970>>>
52970>>>//    Function UtilFilelistAddDriverInfo Integer hTable Returns Boolean
52970>>>//        String sDriverID sRootName sDisplayName sSchema sVal
52970>>>//        Integer iDbType
52970>>>//        Boolean bOK
52970>>>//
52970>>>//        Get UtilIsFilelistEntryDriverBased to bOK
52970>>>//        If (bOK = True) Begin
52970>>>//            Function_Return False
52970>>>//        End
52970>>>//
52970>>>//        Get psDriverID to sDriverID
52970>>>//        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
52970>>>//        Move (sDriverID + ":" + sRootName)           to sRootName
52970>>>//        Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
52970>>>//
52970>>>//        Get psDriverID to sDriverID
52970>>>//        Get piDbType   to iDbType
52970>>>//        Get psSchema   to sSchema
52970>>>//        If (sSchema = "") Begin
52970>>>//            Get _SqlFindKeyWord CI_SQLDBO to sSchema
52970>>>//        End
52970>>>//
52970>>>//        Move (Uppercase(sDisplayName)) to sVal
52970>>>//        If (not(sVal contains (sSchema + "."))) Begin
52970>>>//            If (iDbType = EN_dbTypeDB2) Begin
52970>>>//                Move (Lowercase(sSchema) + "." + sDisplayName) to sDisplayName
52970>>>//            End
52970>>>//            Else Begin
52970>>>//                Move (sSchema + "." + sDisplayName) to sDisplayName
52970>>>//            End
52970>>>//        End
52970>>>//
52970>>>//        Set_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
52970>>>//        Set_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
52970>>>//
52970>>>//        Function_Return True
52970>>>//    End_Function
52970>>>
52970>>>    // Removes all driver identifications (e.g. "MSSQLDRV:MyTable")
52970>>>    // from the passed filelist.
52970>>>    // Returns the number of tables affected.
52970>>>    Function SqlUtilFilelistRemoveDriverInfo String sFilelist Returns Integer
52972>>>        String sCurrentFileList sRootName sDisplayName sLogicalName sVal
52972>>>        Integer iRetval
52972>>>        Handle hTable
52972>>>
52972>>>        // We first save the current filelist as the passed filelist name
52972>>>        // may come from another workspace, to restore it when we're ready.
52972>>>        Get_Attribute DF_FILELIST_NAME to sCurrentFileList
52975>>>        Set_Attribute DF_FILELIST_NAME to sFilelist
52978>>>        Move 0 to hTable
52979>>>        Move 0 to iRetval
52980>>>
52980>>>        Repeat
52980>>>>
52980>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
52983>>>            If (hTable <> 0) Begin
52985>>>                Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
52988>>>                Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
52991>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
52994>>>                Move (Uppercase(sRootName)) to sVal
52995>>>                If (sVal contains MSSQLDRV_ID or sVal contains DB2_DRV_ID or sVal contains ODBC_DRV_ID) Begin
52997>>>                    // Prefixes:
52997>>>                    Move (Replace((MSSQLDRV_ID + ":"), sRootName, "")) to sRootName
52998>>>                    Move (Replace((DB2_DRV_ID  + ":"), sRootName, "")) to sRootName
52999>>>                    Move (Replace((ODBC_DRV_ID + ":"), sRootName, "")) to sRootName
53000>>>                    // Suffixes:
53000>>>                    Move (Replace(("." + MSSQLDRV_ID), sRootName, "")) to sRootName
53001>>>                    Move (Replace(("." + DB2_DRV_ID),  sRootName, "")) to sRootName
53002>>>                    Move (Replace(("." + ODBC_DRV_ID), sRootName, "")) to sRootName
53003>>>
53003>>>                    // Change Filelist entry:
53003>>>                    Set_Attribute DF_FILE_ROOT_NAME of hTable          to sRootName
53006>>>
53006>>>                    Move (Lowercase(sDisplayName)) to sVal
53007>>>                    If (sVal contains "dbo.") Begin
53009>>>                        Move (Replace("dbo.", sDisplayName, ""))       to sDisplayName
53010>>>
53010>>>                        // Change Filelist entry:
53010>>>                        Set_Attribute DF_FILE_DISPLAY_NAME of hTable   to sDisplayName
53013>>>                    End
53013>>>>
53013>>>                    Increment iRetval
53014>>>                End
53014>>>>
53014>>>            End
53014>>>>
53014>>>        Until (hTable = 0)
53016>>>
53016>>>        Set_Attribute DF_FILELIST_NAME to sCurrentFileList
53019>>>
53019>>>        Function_Return iRetval
53020>>>    End_Function
53021>>>
53021>>>    // To open all Sql based tables in Filelist.cfg
53021>>>    Procedure SqlUtilOpenAllTables
53023>>>        Handle hTable
53023>>>        String sRoot sDriverID
53023>>>        Boolean bOK
53023>>>
53023>>>        Move 0 to hTable
53024>>>        Move "" to sDriverID
53025>>>        Get AutoConnectionIDLogin to bOK
53026>>>
53026>>>        Repeat
53026>>>>
53026>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
53029>>>            If (hTable > 0) Begin
53031>>>                Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
53034>>>                If (sDriverID = MSSQLDRV_ID or sDriverID = DB2_DRV_ID or sDriverID = ODBC_DRV_ID) Begin
53036>>>                    Get_Attribute DF_FILE_ROOT_NAME of hTable to sRoot
53039>>>                    If (Uppercase(sRoot) contains ".INT" or Uppercase(sRoot) contains MSSQLDRV_ID or Uppercase(sRoot) contains DB2_DRV_ID or Uppercase(sRoot) contains ODBC_DRV_ID) Begin
53041>>>                        Open hTable
53043>>>                    End
53043>>>>
53043>>>                End
53043>>>>
53043>>>            End
53043>>>>
53043>>>
53043>>>        Until (hTable = 0)
53045>>>    End_Procedure
53046>>>
53046>>>//    Function SqlUtilSchemaName Handle hTable Returns String
53046>>>//        String sRetval sDriverID
53046>>>//        String sTableName
53046>>>//        Integer iDbType iIndex
53046>>>//        Boolean bOK
53046>>>//
53046>>>//        Get psDriverID to sDriverID
53046>>>//        Get _SqlCheckCurrentDriver sDriverID to bOK
53046>>>//        If (hTable = 0 or bOK = False) Begin
53046>>>//            Function_Return ""
53046>>>//        End
53046>>>//
53046>>>//        Move False to Err
53046>>>//        Get UtilTableHandleToString hTable to sTableName
53046>>>//        Get piDbType to iDbType
53046>>>//        Get _SqlUtilEnumerateTableIndex sTableName sDriverID to iIndex
53046>>>//        If (iIndex = -1) Begin
53046>>>//            Function_Return ""
53046>>>//        End
53046>>>//
53046>>>//        Function_Return sRetval
53046>>>//    End_Function
53046>>>
53046>>>    // Checks if the passed Table;
53046>>>    // 1) Already has a Filelist entry that points to SQL and
53046>>>    // 2) It has an .int file.
53046>>>    // If both is True it should already be connected to SQL
53046>>>    Function SqlUtilTableIsAttached String sDriverID Handle hTable Returns Boolean
53048>>>        Boolean bExists bRootName
53048>>>        String sRootName sDataPath
53048>>>
53048>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
53051>>>        Move (sRootName contains sDriverID) to bRootName
53052>>>
53052>>>        Get psDataPathFirstPart to sDataPath
53053>>>        Get vFolderExists sDataPath to bExists
53054>>>        If (bExists = False) Begin
53056>>>            // If the path doesn't exist it cannot have an .int file and we're done, although it shouldn't happen.
53056>>>            Function_Return False
53057>>>        End
53057>>>>
53057>>>
53057>>>        Get vFolderFormat sDataPath to sDataPath
53058>>>        Get _TableNameOnly sRootName to sRootName
53059>>>        Get vFilePathExists (sDataPath + sRootName + ".int") to bExists
53060>>>
53060>>>        Function_Return (bRootName = True and bExists = True)
53061>>>    End_Function
53062>>>
53062>>>    Function SqlUtilTableIsViewType String sDriverID Handle hTable Returns Boolean
53064>>>        Boolean bViewTableType bOpen bOK
53064>>>        Integer iTableCount iNumTables
53064>>>        String sTableName sOwner sTableType sEnumTableName sEnumSchemaName
53064>>>        Handle hoCliHandler
53064>>>        tSQLConnection SQLConnection
53064>>>        tSQLConnection SQLConnection
53064>>>
53064>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
53067>>>        If (bOpen = False) Begin
53069>>>            Get AutoConnectionIDLogin to bOK
53070>>>            Open hTable
53072>>>        End
53072>>>>
53072>>>
53072>>>        Get pSQLConnection to SQLConnection
53073>>>        Get phoCLIHandler to hoCliHandler
53074>>>        Set psDriverID of hoCliHandler to sDriverID
53075>>>
53075>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sTableName
53078>>>        Get _TableNameOnly sTableName to sTableName
53079>>>        Get_Attribute DF_FILE_OWNER     of hTable to sOwner
53082>>>        Get EnumerateTables of hoCliHandler SQLConnection.sConnectionString to iNumTables
53083>>>
53083>>>        For iTableCount from 1 to iNumTables
53089>>>>
53089>>>            Get TableName  of hoCliHandler iTableCount to sEnumTableName
53090>>>            Get SchemaName of hoCliHandler iTableCount to sEnumSchemaName
53091>>>            If ((Uppercase(sEnumTableName)  = Uppercase(sTableName)) and (Uppercase(sEnumSchemaName) = Uppercase(sOwner))) Begin
53093>>>                Get TableType of hoCliHandler iTableCount to sTableType
53094>>>                Move iNumTables to iTableCount // We're done.
53095>>>            End
53095>>>>
53095>>>        Loop
53096>>>>
53096>>>
53096>>>        Move (sTableType = "VIEW") to bViewTableType
53097>>>        If (bOpen = False) Begin
53099>>>            Close hTable
53100>>>        End
53100>>>>
53100>>>
53100>>>        Function_Return bViewTableType
53101>>>    End_Function
53102>>>
53102>>>    // *** DbType conversion routines - Converts between string/integer and driver ID values ***
53102>>>    //
53102>>>    // SQL utility function that returns a database type (string) constant
53102>>>    // corresponding to the passed iDbType.
53102>>>    Function SqlUtilDbTypeToString Integer iDbType Returns String
53104>>>        String sRetval
53104>>>        Get SqlUtilDbTypeToString of (phoSQLConnectionIniFile(ghoSQLConnectionHandler)) iDbType to sRetval
53105>>>        Function_Return sRetval
53106>>>    End_Function
53107>>>
53107>>>    // SQL utility function that returns a database type constant (integer)
53107>>>    // corresponding to the passed sDbType string constant.
53107>>>    Function SqlUtilDbTypeToInteger String sDbType Returns Integer
53109>>>        Integer iRetval
53109>>>        Get SqlUtilDbTypeToInteger of (phoSQLConnectionIniFile(ghoSQLConnectionHandler)) sDbType to iRetval
53110>>>        Function_Return iRetval
53111>>>    End_Function
53112>>>
53112>>>    // Pass an integer DbType and function returns the database type integer as a string value.
53112>>>    // Used e.g. when reading a connection ini-file to display the database type in
53112>>>    // the SQL Connection program's grid.
53112>>>    Function SqlUtilDbTypeIntegerToStringConstant Integer iDbType Returns String
53114>>>        String sRetval
53114>>>        Get SqlUtilDbTypeIntegerToStringConstant of (phoSQLConnectionIniFile(ghoSQLConnectionHandler)) iDbType to sRetval
53115>>>        Function_Return sRetval
53116>>>    End_Function
53117>>>
53117>>>    // Pass a driver name as a string and the function will return
53117>>>    // a dbType as an integer. Obviously for the ODBC_DRV this doesn't
53117>>>    // quite work and always returns "MS SQL Server"
53117>>>    Function SqlUtilDbTypeFromDriver String sDriverID Returns Integer
53119>>>        Integer iRetval
53119>>>        Get SqlUtilDbTypeFromDriver of (phoSQLConnectionIniFile(ghoSQLConnectionHandler)) sDriverID to iRetval
53120>>>        Function_Return iRetval
53121>>>    End_Function
53122>>>
53122>>>    // Returns a temp table name that consists of the RootName, an underscore and as much of a GUID
53122>>>    // that "fits" in the max allowed length for table names.
53122>>>    // Max number of characters allowed for table names;
53122>>>    // IBM DB2      = 128
53122>>>    // MS-SQL       = 128
53122>>>    // Oracle       = 128 (Version 12.2 and later. 30 characters for earlier versions)
53122>>>    // MySQL        = 64
53122>>>    // PostgreSQL   = 64
53122>>>    Function SqlUtilGUIDTempTableName String sRootName Returns String
53124>>>        String sGUIDName
53124>>>        Integer iDbType iLength
53124>>>
53124>>>        Get piDbType to iDbType
53125>>>        Move (RandomHexUUID()) to sGUIDName
53126>>>        Move (sRootName + "_" + sGUIDName) to sGUIDName
53127>>>        Move (Length(sGUIDName)) to iLength
53128>>>
53128>>>        Case Begin
53128>>>            Case (iDbType = EN_DbTypeDB2)
53130>>>            If (iLength > 128) Begin
53132>>>                Move (Left(sGUIDName, 128)) to sGUIDName
53133>>>            End
53133>>>>
53133>>>            Case Break
53134>>>
53134>>>            Case (iDbType = EN_DbTypeMSSQL)
53137>>>            If (iLength > 128) Begin
53139>>>                Move (Left(sGUIDName, 128)) to sGUIDName
53140>>>            End
53140>>>>
53140>>>            Case Break
53141>>>
53141>>>            Case (iDbType = EN_DbTypeOracle) // Note: We assume an Oracle version of 12.2 or later.
53144>>>            If (iLength > 128) Begin
53146>>>                Move (Left(sGUIDName, 128)) to sGUIDName
53147>>>            End
53147>>>>
53147>>>            Case Break
53148>>>
53148>>>            Case (iDbType = EN_DbTypeMySQL)
53151>>>            If (iLength > 64) Begin
53153>>>                Move (Left(sGUIDName, 64)) to sGUIDName
53154>>>            End
53154>>>>
53154>>>            Case Break
53155>>>
53155>>>            Case (iDbType = EN_DbTypePostgre)
53158>>>            If (iLength > 64) Begin
53160>>>                Move (Left(sGUIDName, 64)) to sGUIDName
53161>>>            End
53161>>>>
53161>>>        Case End
53161>>>
53161>>>        Function_Return sGUIDName
53162>>>    End_Function
53163>>>
53163>>>    // Reads a resource that has been embedded by the compiler and writes it to disk.
53163>>>    // Pass the memory resource file reference and the filename to be created,
53163>>>    // including full path.
53163>>>    Procedure SqlUtilCreateFileFromMemory String sMemFileName String sFileName
53165>>>        String sText
53165>>>        Integer iCh iSize iArgSize
53165>>>
53165>>>        Move ("Resource:" + sMemFileName) to sMemFileName
53166>>>        Get Seq_Open_Input_Channel sMemFileName to iCh
53167>>>        Get_Channel_Size iCh to iSize
53168>>>        Read_Block channel iCh sText iSize
53170>>>        Send Seq_Close_Channel iCh
53171>>>
53171>>>        Get Seq_Open_Output_Channel sFileName to iCh
53172>>>            Write channel iCh sText
53174>>>        Send Seq_Close_Channel iCh
53175>>>
53175>>>        // Wait for file to be written to disk.
53175>>>        Sleep 2
53176>>>    End_Procedure
53177>>>
53177>>>    Function SqlUtilDefaultNullValue String sDriverID Integer iDbType Integer iDataType Returns String
53179>>>        String sNotNull sRetval sDefaultValue
53179>>>        Boolean bOK
53179>>>
53179>>>        Get IsSQLDriver sDriverID to bOK
53180>>>        If (bOK = False) Begin
53182>>>            Function_Return ""
53183>>>        End
53183>>>>
53183>>>
53183>>>        Get UtilDataTypeDefaultValue sDriverID iDbType iDataType to sDefaultValue
53184>>>        Get _SqlFindKeyWord CI_SQLNotNull to sNotNull
53185>>>
53185>>>        Case Begin
53185>>>            Case (iDbType = EN_dbTypeMSSQL)
53187>>>                Move ("DEFAULT" * String(sDefaultValue) * String(sNotNull)) to sRetval
53188>>>                Case Break
53189>>>            Case (iDbType = EN_dbTypeMySQL)
53192>>>                Move (String(sNotNull) * "DEFAULT" * String(sDefaultValue)) to sRetval
53193>>>                Case Break
53194>>>            Case (iDbType = EN_dbTypePostgre)
53197>>>                Move (String(sNotNull) * "DEFAULT" * String(sDefaultValue)) to sRetval
53198>>>                Case Break
53199>>>            Case (iDbType = EN_dbTypeDB2)
53202>>>                Move (String(sNotNull))                                     to sRetval
53203>>>                Case Break
53204>>>
53204>>>            // Seems like Oracle can't handle setting a new column to 'NOT NULL' if the table exists with data(!)
53204>>>            // ToDo: We need to look deeper into how Oracle handles NULL
53204>>>            Case (iDbType = EN_dbTypeOracle)
53207>>>                Move  ""                                                    to sRetval
53208>>>                Case Break
53209>>>
53209>>>            Case Else
53209>>>                Move  ""                                                    to sRetval
53210>>>        Case End
53210>>>
53210>>>        Function_Return sRetval
53211>>>    End_Function
53212>>>
53212>>>    // * Dummy function for the Studio's Code Explorer *
53212>>>    Function SQL_ENUMERATION_FUNCTIONS Returns Boolean
53214>>>        Function_Return False
53215>>>    End_Function
53216>>>
53216>>>    // Enumerate SQL Servers.
53216>>>    // Pass a driver id. Returns a string array.
53216>>>    // The iDataSourceType (iDatSrcType) parameter is optional and is for the ODBC driver only.
53216>>>    // Note: Returns servers for MSSQLDRV; else data-sources on the machine.
53216>>>    Function SqlUtilEnumerateServers String sDriverID Integer iDatSrcType Returns String[]
53218>>>        String[] sReturnArray
53219>>>        Handle hoSQLHandler
53219>>>        String sServer
53219>>>        Integer iCount iNumItems iDataSourceType
53219>>>
53219>>>        If (num_arguments > 1) Begin
53221>>>            Move iDatSrcType to iDataSourceType
53222>>>        End
53222>>>>
53222>>>
53222>>>        Case Begin
53222>>>            Case (sDriverID = MSSQLDRV_ID)
53224>>>                Get phoMSSQLHandler to hoSQLHandler 
53225>>>                Get EnumerateServersLocal of hoSQLHandler to iNumItems
53226>>>                If (iNumItems = 0) Begin
53228>>>                    Get EnumerateServers of hoSQLHandler to iNumItems 
53229>>>                End
53229>>>>
53229>>>                For iCount from 0 to (iNumItems - 1)
53235>>>>
53235>>>                    Get String_Value of hoSQLHandler iCount to sServer
53236>>>                    Move (Trim(sServer)) to sReturnArray[iCount]
53237>>>                Loop
53238>>>>
53238>>>                Case Break
53239>>>
53239>>>            Case (sDriverID = DB2_DRV_ID)
53242>>>                Get phoDB2SQLHandler to hoSQLHandler
53243>>>                Send SeedDataSources of hoSQLHandler
53244>>>                Move 0 to iCount
53245>>>                Repeat
53245>>>>
53245>>>                    Get DataSources of hoSQLHandler to sServer
53246>>>                    If (sServer <> "") Begin
53248>>>                        Move (Replace(",", sServer, "")) to sServer
53249>>>                        Move sServer to sReturnArray[iCount]
53250>>>                    End
53250>>>>
53250>>>                    Increment iCount
53251>>>                Until (sServer = "")
53253>>>                Case Break
53254>>>
53254>>>            Case (sDriverID = ODBC_DRV_ID)
53257>>>                Get phoODBCSQLHandler to hoSQLHandler
53258>>>                Set DataSourceType of hoSQLHandler to iDataSourceType
53259>>>                Move 0 to iCount
53260>>>                Repeat
53260>>>>
53260>>>                    Get DataSources of hoSQLHandler to sServer
53261>>>                    If (sServer <> "") Begin
53263>>>                        Move (Replace(",", sServer, ", ")) to sServer
53264>>>                        Move sServer to sReturnArray[iCount]
53265>>>                    End
53265>>>>
53265>>>                    Increment iCount
53266>>>                Until (sServer = "")
53268>>>                Case Break
53269>>>
53269>>>            Case Else
53269>>>                Error DFERR_PROGRAM "Unsupported DriverID passed to SqlUtilEnumerateServers function"
53270>>>>
53270>>>        Case End
53270>>>
53270>>>        Function_Return sReturnArray
53271>>>    End_Function
53272>>>
53272>>>    // Returns all databases as a string array for the passed driver id.
53272>>>    Function SqlUtilEnumerateDatabases String sDriverID Returns String[]
53274>>>        String[] sReturnArray
53275>>>        String sServer sVal
53275>>>        tSQLIntTableInfo[] sReturnStructArray
53275>>>        tSQLIntTableInfo[] sReturnStructArray
53276>>>        tSQLConnection SQLConnection
53276>>>        tSQLConnection SQLConnection
53276>>>        Boolean bOK
53276>>>        Integer iCount iSize
53276>>>
53276>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
53277>>>        If (bOK = False) Begin
53279>>>            Function_Return sReturnArray
53280>>>        End
53280>>>>
53280>>>
53280>>>        Case Begin
53280>>>            Case (sDriverID = MSSQLDRV_ID)
53282>>>                Get _SqlDatabasesArrayMSSQL to sReturnArray
53283>>>                Case Break
53284>>>            Case (sDriverID = DB2_DRV_ID)
53287>>>                Get _SqlDatabasesArrayDB2 to sReturnArray
53288>>>                Case Break
53289>>>
53289>>>            // This is needed to be able to check if a database exists or not.
53289>>>            Case (sDriverID = ODBC_DRV_ID)
53292>>>                Get _SqlDatabasesArrayODBC to sReturnStructArray
53293>>>                If (SizeOfArray(sReturnStructArray)) Begin
53295>>>                    If (SizeOfArray(sReturnStructArray) = 1 and sReturnStructArray[0].sServerName = "") Begin
53297>>>                        // If a FILEDSN: (can only be one database name)
53297>>>                        Move sReturnStructArray[0].sDatabaseName to sReturnArray[0]
53298>>>                    End
53298>>>>
53298>>>                    Else Begin
53299>>>                        // Else the DSN's were read from the registry.
53299>>>                        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
53300>>>                        Move SQLConnection.sServer to sServer
53301>>>                        Move (SizeOfArray(sReturnStructArray)) to iSize
53302>>>                        Decrement iSize
53303>>>                        for iCount from 0 to iSize
53309>>>>
53309>>>                            Move (sReturnStructArray[iCount].sServerName) to sVal
53310>>>                            If (Uppercase(sServer) = Uppercase(sVal)) Begin
53312>>>                                Move sReturnStructArray[iCount].sDatabaseName to sReturnArray[0]
53313>>>                                Move iSize to iCount // We're done.
53314>>>                            End
53314>>>>
53314>>>                        Loop
53315>>>>
53315>>>                    End
53315>>>>
53315>>>                End
53315>>>>
53315>>>                Case Break
53316>>>
53316>>>            Case Else
53316>>>//                Error DFERR_PROGRAM "Unsupported DriverID passed to SqlUtilEnumerateDatabases function"
53316>>>        Case End
53316>>>
53316>>>        Function_Return sReturnArray
53317>>>    End_Function
53318>>>
53318>>>    
53318>>>    // *** Database API Functions: ***
53318>>>    // Instead of using Sql Scripts (ESQL), we can opt to use the DataFlex Database API's to
53318>>>    // make changes/updates to the database.
53318>>>
53318>>>    // * Dummy function for the Studio's Code Explorer *
53318>>>    Function API_TABLE_FUNCTIONS Returns Boolean
53320>>>        Function_Return False
53321>>>    End_Function
53322>>>
53322>>>    // This might not do what you think - Here's what it does:
53322>>>    // It checks that the passed hTable TableName in filelist.cfg is exactly the same as at the SQL back-end.
53322>>>    // If that is True; it creates an .int file for it and changes Filelist.cfg to point
53322>>>    // to the SQL table.
53322>>>    // Typical usage for this function is when an entry exists in the Filelist for a table and the table
53322>>>    // already exists in SQL.
53322>>>    // This is a bit fiddly as the DF_FILE_PHYSICAL_NAME attribute can only be set inside a
53322>>>    // Structure_Start ... Structure_End operation when creating a NEW table. Thus it cannot be set when
53322>>>    // restructuring an existing table.
53322>>>    Function ApiTableAttachToSql Handle hTable Boolean bUseConnID Returns Boolean
53324>>>        Boolean bExists bOpened bOK bSystemFile bUseConnectionID bIsAlias
53324>>>        String sDriverID sConnectionID sConnectionString sDisplayName sRootName sLogicalName sPhysicalName sSchema
53324>>>        Handle hToTable
53324>>>
53324>>>        Move True to bUseConnectionID
53325>>>        If (num_arguments > 1) Begin
53327>>>            Move bUseConnID to bUseConnectionID
53328>>>        End
53328>>>>
53328>>>
53328>>>        Get psDriverID to sDriverID
53329>>>        // If the table doesn't exist on the SQL back-end we do nothing.
53329>>>        Get SqlUtilCheckIfTableHandleExists hTable sDriverID to bExists
53330>>>        If (bExists = False) Begin
53332>>>            Function_Return False
53333>>>        End
53333>>>>
53333>>>
53333>>>        Get UtilTableIsAlias hTable to bIsAlias
53334>>>
53334>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
53335>>>        If (bOK = False) Begin
53337>>>            Function_Return False
53338>>>        End
53338>>>>
53338>>>
53338>>>        // Then we need to check that the function hasn't been called before; which in case
53338>>>        // we do nothing
53338>>>        Get SQLUtilTableIsAttached sDriverID hTable to bExists
53339>>>        If (bExists = True) Begin
53341>>>            Function_Return False
53342>>>        End
53342>>>>
53342>>>
53342>>>        Get psConnectionID     to sConnectionID
53343>>>        Get psConnectionString to sConnectionString
53344>>>        If (sConnectionID = "" or sConnectionString = "") Begin
53346>>>            Error DFERR_PROGRAM ("An SQL connection has NOT been setup correctly. Could not attach table:" * String(hTable) * "to SQL")
53347>>>>
53347>>>            Function_Return False
53348>>>        End
53348>>>>
53348>>>
53348>>>        Set Private.phCurrentTable to hTable
53349>>>        Get psSchema to sSchema
53350>>>        If (sSchema = "") Begin
53352>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
53353>>>        End
53353>>>>
53353>>>
53353>>>        // If we should use a connection id we need to check it exists;
53353>>>        // else we create it before attempting creating the table
53353>>>        If (bUseConnectionID = True) Begin
53355>>>            Get AutoConnectionIDLogin to bOK
53356>>>            If (bOk = False) Begin
53358>>>                Error DFERR_PROGRAM ("The Connection ID:" * sConnectionID * "could not be created and therefor the table can't be created.")
53359>>>>
53359>>>                Function_Return False
53360>>>            End
53360>>>>
53360>>>        End
53360>>>>
53360>>>
53360>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
53363>>>        Get _TableNameOnly sRootName to sRootName
53364>>>        If (sRootName = "") Begin
53366>>>            Function_Return False
53367>>>        End
53367>>>>
53367>>>        Move (sRootName + ".int")                    to sPhysicalName
53368>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
53371>>>        Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
53374>>>
53374>>>        // The Studio no longer adds the schema to the DISPLAY_NAME, so commented out.
53374>>>        //
53374>>>        // We don't want to change the display name if it starts with an ampersand ("@"),
53374>>>        // because then the table should not be visible to users.
53374>>>//        Move (Pos("@", sDisplayName)) to iPos
53374>>>//        If (iPos <> 1) Begin
53374>>>//            If (sDisplayName contains ".") Begin
53374>>>//                Move (Pos(".", sDisplayName)) to iPos
53374>>>//                Move (Mid(sDisplayName, 200 ,(iPos + 1))) to sDisplayName
53374>>>//                Move (sSchema + "." + sDisplayName)       to sDisplayName
53374>>>//            End
53374>>>//            If (not(Lowercase(sDisplayName) contains Lowercase(sSchema + "."))) Begin
53374>>>//                Move (Lowercase(sSchema) + "." + sDisplayName) to sDisplayName
53374>>>//            End
53374>>>//        End
53374>>>
53374>>>        If (bIsAlias = False) Begin
53376>>>            Get OpenTableExclusive hTable to bOpened
53377>>>            If (bOpened = False) Begin
53379>>>                Error DFERR_PROGRAM ("Function ApiTableAttachToSQL - Could not open table number:" * String(hTable) * sLogicalName)
53380>>>>
53380>>>                Function_Return False
53381>>>            End
53381>>>>
53381>>>        End
53381>>>>
53381>>>
53381>>>        If (ghoProgressBar <> 0) Begin
53383>>>            Send DoAdvance of ghoProgressBar
53384>>>            Set Message_Text of ghoStatusPanel to ""
53385>>>            Set TableName_Text of ghoStatusPanel to ("Attaching to SQL - Table:" * String(sLogicalName) * "Number:" * String(hTable) * "to SQL")
53386>>>        End
53386>>>>
53386>>>        // Note: The hToTable will get changed by the Structure_xxx command...
53386>>>        Move hTable to hToTable
53387>>>        Move False to Err
53388>>>
53388>>>        // We now create a stub .int file and after Structure_end and also change the Filelist.cfg,
53388>>>        // then we do a pseudo .int file change with the "_SqlUtilUpdateIntFile" function. After that we have
53388>>>        // a proper and updated .int file.
53388>>>        Get_Attribute DF_FILE_IS_SYSTEM_FILE of hTable to bSystemFile
53391>>>        Get _SqlUtilCreateIntFile hTable sDriverID sConnectionID True bSystemFile to bOK
53392>>>
53392>>>        If (bIsAlias = False) Begin
53394>>>            Structure_Start hToTable sDriverID
53395>>>                Set Private.phCurrentTable to hTable
53396>>>                If (bUseConnectionID = True) Begin
53398>>>                    Set_Attribute DF_FILE_LOGIN     of hToTable to (CS_DFCONNID + "=" + sConnectionID)
53401>>>                End
53401>>>>
53401>>>                Else Begin
53402>>>                    Set_Attribute DF_FILE_LOGIN     of hToTable to sConnectionString
53405>>>                End
53405>>>>
53405>>>                Set_Attribute DF_FILE_OWNER         of hToTable to (Lowercase(sSchema))
53408>>>                // For unknown reason the above sometimes triggers an error and it doesn't help to try to trap the error; so we cheat...
53408>>>                Move False to Err
53409>>>                Move 0 to LastErr
53410>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
53411>>>            Structure_End hToTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
53413>>>            Set Action_Text of ghoStatusPanel to ""
53414>>>        End
53414>>>>
53414>>>
53414>>>        Move (not(Err)) to bOK
53415>>>        If (bOK = True) Begin
53417>>>            // The attributes set above will always trigger an error
53417>>>            // We also adjust the Filelist entries
53417>>>            Set_Attribute DF_FILE_ROOT_NAME    of hTable to (sDriverID + ":" + sRootName)
53420>>>            Set_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
53423>>>            Set_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
53426>>>
53426>>>            // This updates the .int file to make it up-to-date with the SQL back-end.
53426>>>            Get _SqlUtilUpdateIntFile hTable to bOK
53427>>>        End
53427>>>>
53427>>>
53427>>>        Function_Return (bOK = True)
53428>>>    End_Function
53429>>>
53429>>>    // Sample usage:
53429>>>    //    Get ApiTableChangeAttribute SysInfo.File_Number DF_FILE_IS_SYSTEM_FILE True to bOK
53429>>>    //    Get ApiTableChangeAttribute OrderHea.File_Number DF_FILE_REUSE_DELETED DF_FILE_DELETED_NOREUSE to bOK
53429>>>    Function ApiTableChangeAttribute Handle hTable Integer iAttribute Integer iValue Returns Boolean
53431>>>        Boolean bOK bIsSQLTable
53431>>>
53431>>>        Get AutoConnectionIDLogin to bOK
53432>>>        Move False to Err
53433>>>        Get OpenTableExclusive hTable to bOK
53434>>>        If (bOK = False) Begin
53436>>>            Function_Return False
53437>>>        End
53437>>>>
53437>>>
53437>>>        // ToDo: Add to all table change functions!
53437>>>            Get _UtilTableIsSql hTable to bIsSQLTable
53438>>>            If (bIsSQLTable = True) Begin
53440>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
53443>>>            End
53443>>>>
53443>>>
53443>>>        Set Private.phCurrentTable to hTable
53444>>>        Structure_Start hTable
53445>>>            Set_Attribute iAttribute of hTable to iValue
53448>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
53449>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
53451>>>
53451>>>        Set Action_Text of ghoStatusPanel to ""
53452>>>        Function_Return (Err = False)
53453>>>    End_Function
53454>>>
53454>>>    Function ApiTableMoveFileListEntry String sRootName String sLogicalName String sDisplayName Handle hFromSlot Handle hToSlot String sDriverID Returns Boolean
53456>>>        Boolean bOK
53456>>>        
53456>>>        Get ApiTableChangeFileListSlot sRootName sLogicalName sDisplayName hToSlot sDriverID to bOK
53457>>>        If (bOK = True) Begin
53459>>>            Get ApiTableChangeFileListSlot "" "" "" hFromSlot sDriverID to bOK
53460>>>        End
53460>>>>
53460>>>        
53460>>>        Function_Return (bOK = True)
53461>>>    End_Function
53462>>>    
53462>>>    // To use a filelist slot for the passed FileName, TableName & DisplayName,
53462>>>    // or to change the filelist slot names.
53462>>>    Function ApiTableChangeFileListSlot String sRootName String sLogicalName String sDisplayName Handle hTable String sDriverID Returns Boolean
53464>>>        String sFileListName
53464>>>        
53464>>>        Move False to Err
53465>>>
53465>>>        If (ghoProgressBar <> 0) Begin
53467>>>            Send DoAdvance of ghoProgressBar
53468>>>            Set TableName_Text of ghoStatusPanel to ("Changing Filelist slot for Table:" * String(sLogicalName) * "Number:" * String(hTable))
53469>>>        End
53469>>>>
53469>>>        // If all strings are empty it means that we should remove this entry from filelist.
53469>>>        If (sRootName = "" and sLogicalName = "" and sDisplayName = "") Begin
53471>>>            Set_Attribute DF_FILE_ROOT_NAME     of hTable to ""
53474>>>            Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to ""
53477>>>            Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to ""
53480>>>            Function_Return (Err = False) // And we're done.
53481>>>        End
53481>>>>
53481>>>
53481>>>        If (sDriverID <> DATAFLEX_ID) Begin
53483>>>//            Set_Attribute DF_FILE_ROOT_NAME of hTable to (sDriverID + ":" + sRootName)
53483>>>            Move (sDriverID + ":" + sRootName) to sRootName
53484>>>        End
53484>>>>
53484>>>//        Else Begin
53484>>>//            Set_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
53484>>>//        End
53484>>>//
53484>>>//        Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
53484>>>//        Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
53484>>>
53484>>>        Set_Attribute DF_FILE_ROOT_NAME     of hTable to sRootName
53487>>>        Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
53490>>>        Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
53493>>>        
53493>>>        Function_Return (Err = False)
53494>>>    End_Function
53495>>>
53495>>>    Function ApiTableChangeRecordLength Handle hTable Integer iRecordLength Returns Boolean
53497>>>        Boolean bOK
53497>>>
53497>>>        Get AutoConnectionIDLogin to bOK
53498>>>        Move False to Err
53499>>>        Get OpenTableExclusive hTable to bOK
53500>>>        If (bOK = False) Begin
53502>>>            Function_Return False
53503>>>        End
53503>>>>
53503>>>
53503>>>        Set Private.phCurrentTable to hTable
53504>>>        Structure_Start hTable
53505>>>            Set_Attribute DF_FILE_RECORD_LENGTH of hTable to iRecordLength
53508>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
53509>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
53511>>>
53511>>>        Set Action_Text of ghoStatusPanel to ""
53512>>>        Function_Return (Err = False)
53513>>>    End_Function
53514>>>
53514>>>    Function ApiTableChangeRelation Handle hTable Handle hToTable Integer iFromField Integer iToField Returns Boolean
53516>>>        Boolean bOK bIsSQLTable
53516>>>
53516>>>        Move False to Err
53517>>>        Get AutoConnectionIDLogin to bOK
53518>>>        Open hToTable
53520>>>        Get OpenTableExclusive hTable to bOK
53521>>>        If (bOK = False) Begin
53523>>>            Function_Return False
53524>>>        End
53524>>>>
53524>>>
53524>>>            Get _UtilTableIsSql hTable to bIsSQLTable
53525>>>            If (bIsSQLTable = True) Begin
53527>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
53530>>>            End
53530>>>>
53530>>>
53530>>>        Set Private.phCurrentTable to hTable
53531>>>        Structure_Start hTable
53532>>>            Set_Attribute DF_FIELD_RELATED_FILE  of hTable iFromField to hToTable
53535>>>            Set_Attribute DF_FIELD_RELATED_FIELD of hTable iFromField to iToField
53538>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
53539>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
53541>>>
53541>>>        Set Action_Text of ghoStatusPanel to ""
53542>>>        Function_Return (Err = False)
53543>>>    End_Function
53544>>>
53544>>>    Procedure ApiTableConvertAllAddException Integer hTable
53546>>>        Integer[] aTableConvertExceptions
53547>>>        Get paTableConvertExceptions to aTableConvertExceptions
53548>>>        Move hTable to aTableConvertExceptions[SizeOfArray(aTableConvertExceptions)]
53549>>>        Set paTableConvertExceptions to aTableConvertExceptions
53550>>>    End_Procedure
53551>>>
53551>>>    Procedure ApiTableDateCorrectionAddException Integer hTable
53553>>>        Integer[] aTableDateCorrectionExceptions
53554>>>        Get paTableDateCorrectionExceptions to aTableDateCorrectionExceptions
53555>>>        Move hTable to aTableDateCorrectionExceptions[SizeOfArray(aTableDateCorrectionExceptions)]
53556>>>        Set paTableDateCorrectionExceptions to aTableDateCorrectionExceptions
53557>>>    End_Procedure
53558>>>
53558>>>    Procedure ApiTableConvertALLToSql
53560>>>        Integer[] iTablesArray
53561>>>        Integer iSize iCount
53561>>>        Boolean bUseConnectionID bToANSI bRecnum bCopyData bOK bContinueOnError
53561>>>        String sDriverID
53561>>>
53561>>>        Get psDriverID to sDriverID
53562>>>        Get pbUseConnectionID to bUseConnectionID
53563>>>        Get pbToANSI          to bToANSI
53564>>>        Get pbRecnum          to bRecnum
53565>>>        Get pbCopyData        to bCopyData
53566>>>        If (ghoDbUpdateHandler > 0) Begin
53568>>>            Get pbContinueOnError to bContinueOnError
53569>>>        End
53569>>>>
53569>>>
53569>>>        Get _AllTablesToConvert to iTablesArray
53570>>>        Move (SizeOfArray(iTablesArray)) to iSize
53571>>>        Set pbVisible   of ghoProgressBarOverall to True
53572>>>        Set piPosition  of ghoProgressBarOverall to 0
53573>>>        Set piAdvanceBy of ghoProgressBarOverall to 1
53574>>>        Set piMaximum   of ghoProgressBarOverall to iSize
53575>>>
53575>>>        Decrement iSize
53576>>>        For iCount from 0 to iSize
53582>>>>
53582>>>            Set piPosition of ghoProgressBarOverall to iCount
53583>>>            Get ApiTableConvertToSQL_Ex iTablesArray[iCount] sDriverID bUseConnectionID bToANSI bRecnum bCopyData to bOK
53584>>>            // Probably the right logic here is to just continue trying to convert every table even
53584>>>            // if there was an error converting one table...
53584>>>            //If (bContinueOnError = False and bOK = False) Break
53584>>>        Loop
53585>>>>
53585>>>
53585>>>    End_Procedure
53586>>>
53586>>>    Procedure ApiTableAttachALLToSql
53588>>>        Integer[] iTablesArray
53589>>>        Integer iSize iCount
53589>>>        Boolean bUseConnectionID bToANSI bRecnum bCopyData bOK bContinueOnError
53589>>>        String sDriverID
53589>>>
53589>>>        Get psDriverID to sDriverID
53590>>>        Get pbUseConnectionID to bUseConnectionID
53591>>>        Get pbToANSI          to bToANSI
53592>>>        Get pbRecnum          to bRecnum
53593>>>        Get pbCopyData        to bCopyData
53594>>>        If (ghoDbUpdateHandler > 0) Begin
53596>>>            Get pbContinueOnError to bContinueOnError
53597>>>        End
53597>>>>
53597>>>
53597>>>        Get _AllTablesToConvert to iTablesArray
53598>>>        Move (SizeOfArray(iTablesArray)) to iSize
53599>>>        Decrement iSize
53600>>>        For iCount from 0 to iSize
53606>>>>
53606>>>            Get ApiTableAttachToSQL iTablesArray[iCount] bUseConnectionID to bOK
53607>>>        Loop
53608>>>>
53608>>>
53608>>>    End_Procedure
53609>>>
53609>>>    Function ApiTableConvertToSql_Ex Handle hTable String sDriverID Boolean bUseConnectionID Boolean bToAnsi Boolean bRecnum Boolean bCopyData Returns Boolean
53611>>>        Handle hToTable hoLogFile
53611>>>        Boolean bOK bExists bOpened bDAWDriver bContinueOnError bIsAlias
53611>>>        String sPhysicalName sRootName sLogicalName sDisplayName sConnectionID sConnectionString
53611>>>        String sANSI_OEM sSchema sBaseTableSpace sLongTableSpace sIndexTableSpace sDatabase sGUIDName sWarning
53611>>>        tSQLConnection SQLConnection
53611>>>        tSQLConnection SQLConnection
53611>>>        // ToDo: Redo logic. Instead create the new table!
53611>>>        Get _UtilTableExists hTable to bExists
53612>>>        If (bExists = False) Begin
53614>>>            Set Private.phCurrentTable to hTable
53615>>>            Error DFERR_PROGRAM "Table exists in Filelist.cfg but not on disk or SQL back-end.(Or Filelist.cfg contains a driver but the table doesn't exists on the SQL back-end)"
53616>>>>
53616>>>            Function_Return False
53617>>>        End
53617>>>>
53617>>>
53617>>>        Get UtilTableIsAlias hTable to bIsAlias
53618>>>        // If this is an Alias file there is nothing to convert to SQL.
53618>>>        // Instead we change the Filelist.cfg by adding the driver id to the rootname and create an .int file
53618>>>        If (bIsAlias = True) Begin
53620>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
53623>>>            If (sDriverID <> DATAFLEX_ID and not(sRootName contains ":")) Begin
53625>>>                Set_Attribute DF_FILE_ROOT_NAME of hTable to (sDriverID + ":" + sRootName)
53628>>>                Get psConnectionID to sConnectionID
53629>>>                Get _SqlUtilCreateIntFile hTable sDriverID sConnectionID True False to bOK
53630>>>            End
53630>>>>
53630>>>            Function_Return True
53631>>>        End
53631>>>>
53631>>>
53631>>>        Set Private.phCurrentTable to hTable
53632>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
53635>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
53638>>>        Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
53641>>>
53641>>>        If (ghoProgressBar <> 0) Begin
53643>>>            Send DoAdvance of ghoProgressBar
53644>>>            Set TableName_Text of ghoStatusPanel to ("Checking Table:" * "Number:" * String(hTable) * String(sLogicalName))
53645>>>            Set Message_Text   of ghoStatusPanel to ""
53646>>>            Set Action_Text    of ghoStatusPanel to ""
53647>>>        End
53647>>>>
53647>>>
53647>>>        // Marco Kuipers suggestion;
53647>>>        // If Filelist.cfg points to an embedded .dat table and the table already exists as
53647>>>        // an SQL table; Instead of creating the table in SQL, attach it to the existing
53647>>>        // SQL table.
53647>>>        Get _UtilTableIsSql hTable to bOK
53648>>>        If (bOK = False) Begin
53650>>>            Get _SqlUtilCheckIfTableNameExists sLogicalName sDriverID to bExists
53651>>>            If (bExists = True) Begin
53653>>>//                Get SQLUtilGUIDTempTableName sLogicalName to sGUIDName
53653>>>//                Get SqlTableRename hTable sLogicalName sGUIDName to bOK
53653>>>                Get phoLogFile to hoLogFile
53654>>>                If (hoLogFile <> 0) Begin          
53656>>>                    Move ("WARNING! Function: ApiTableConvertToSQL_Ex. The table" * sLogicalName * "pointed to an embedded table in Filelist.cfg that already existed as an SQL table! The table was NOT converted to SQL but instead ATTACHED to the existing SQL table.") to sWarning
53657>>>//                    Move ("WARNING! Function: ApiTableConvertToSQL_Ex. The table" * sLogicalName * "pointed to an embedded table in Filelist.cfg that already existed as an SQL table! The existing SQL table was renamed to:" * String(sGUIDName) * "and then converted again.") to sWarning
53657>>>                    Send LogError sWarning False
53658>>>                End
53658>>>>
53658>>>                Else Begin
53659>>>                    Error DFERR_PROGRAM sWarning
53660>>>>
53660>>>                End                                                       
53660>>>>
53660>>>                Get ApiTableAttachToSql hTable bUseConnectionID to bOK
53661>>>                Function_Return bOK // We're done (We have attached to an existing SQL table instead of converting it.
53662>>>            End
53662>>>>
53662>>>        End
53662>>>>
53662>>>
53662>>>        // Does the rootname contain a driver?
53662>>>        If (sDriverID <> DATAFLEX_ID and (Uppercase(sRootName) contains sDriverID)) Begin
53664>>>            // Does the table already exist as an SQL table?
53664>>>            Get SqlUtilCheckIfTableHandleExists hTable sDriverID to bExists
53665>>>            // It can happen that the table is missing from Filelist.cfg but still
53665>>>            // exist on the SQL side, in case we want to search for the table by its name.
53665>>>            If (bExists = False) Begin
53667>>>                Get _SqlUtilCheckIfTableNameExists sLogicalName sDriverID to bExists
53668>>>            End
53668>>>>
53668>>>            If (bExists = True) Begin
53670>>>                Set TableName_Text of ghoStatusPanel to ""
53671>>>                Function_Return False
53672>>>            End
53672>>>>
53672>>>        End
53672>>>>
53672>>>        Move (If(bToAnsi = True, CS_ANSI_Txt, CS_OEM_Txt)) to sANSI_OEM
53673>>>
53673>>>        Get IsDAWSQLDriver sDriverID to bDAWDriver
53674>>>        If (bUseConnectionID = True) Begin
53676>>>            Move False to bUseConnectionID
53677>>>        End
53677>>>>
53677>>>
53677>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
53678>>>        Move SQLConnection.sSchema           to sSchema
53679>>>        If (sSchema = "") Begin
53681>>>            Get _SqlFindKeyWord CI_SQLDBO    to sSchema
53682>>>            Move (Lowercase(sSchema))        to sSchema
53683>>>        End
53683>>>>
53683>>>
53683>>>        Move SQLConnection.sDatabase         to sDatabase
53684>>>        Move SQLConnection.sConnectionID     to sConnectionID
53685>>>        Move SQLConnection.sConnectionString to sConnectionString
53686>>>        If (sConnectionID = "" or sConnectionString = "") Begin
53688>>>            Error DFERR_PROGRAM ("The SQL connection info has NOT been setup. Could not convert table:" * String(hTable) * "to SQL")
53689>>>>
53689>>>            Function_Return False
53690>>>        End
53690>>>>
53690>>>
53690>>>        Get AutoConnectionIDLogin to bOK
53691>>>        Open hTable
53693>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
53696>>>        If (bOpened = False) Begin
53698>>>            Error DFERR_PROGRAM ("Could not open table number:" * String(hTable))
53699>>>>
53699>>>            Function_Return False
53700>>>        End
53700>>>>
53700>>>
53700>>>        If (ghoProgressBar <> 0) Begin
53702>>>            Send DoAdvance of ghoProgressBar
53703>>>            Set TableName_Text of ghoStatusPanel to ("Converting to SQL - Table:" * String(sLogicalName) * "Number:" * String(hTable))
53704>>>        End
53704>>>>
53704>>>
53704>>>        Move 0 to hToTable
53705>>>        Get _TableNameOnly sRootName                 to sRootName
53706>>>        Move (sRootName + ".int")                    to sPhysicalName
53707>>>
53707>>>        Case Begin
53707>>>            Case (sDriverID = MSSQLDRV_ID)
53709>>>                Case Break
53710>>>            Case (sDriverID = ODBC_DRV_ID)
53713>>>                Case Break
53714>>>            Case (sDriverID = DB2_DRV_ID)
53717>>>                Move SQLConnection.sBaseTableSpace  to sBaseTableSpace
53718>>>                Move SQLConnection.sLongTableSpace  to sLongTableSpace
53719>>>                Move SQLConnection.sIndexTableSpace to sIndexTableSpace
53720>>>                Case Break
53721>>>            Case (sDriverID = DATAFLEX_ID)
53724>>>                Case Break
53725>>>            Case Else
53725>>>                Error DFERR_PROGRAM "Wrong database driver passed to the 'ApiTableConvertToSQL_Ex' function."
53726>>>>
53726>>>                Case Break
53727>>>        Case End
53727>>>
53727>>>        Move False to Err
53728>>>
53728>>>        Structure_Start hToTable sDriverID
53729>>>            Structure_Copy hTable to hToTable
53730>>>            Set_Attribute DF_FILE_PHYSICAL_NAME of hToTable to sPhysicalName
53733>>>
53733>>>            If (sDriverID <> DATAFLEX_ID) Begin
53735>>>                If (bUseConnectionID = True) Begin
53737>>>                    Set_Attribute DF_FILE_LOGIN of hToTable to (CS_DFCONNID + "=" + sConnectionID)
53740>>>                End
53740>>>>
53740>>>                Else Begin
53741>>>                    Set_Attribute DF_FILE_LOGIN of hToTable to sConnectionString
53744>>>                End
53744>>>>
53744>>>
53744>>>                Set_Attribute DF_FILE_RECNUM_TABLE of hToTable to bRecnum
53747>>>
53747>>>                If (sSchema <> "") Begin
53749>>>                    Set_Attribute DF_FILE_OWNER of hToTable to sSchema
53752>>>                End
53752>>>>
53752>>>
53752>>>                If (sDriverID = DB2_DRV_ID) Begin
53754>>>                    If (sLongTableSpace <> "") Begin
53756>>>                        Set_Attribute DF_FILE_LONG_TABLESPACE  of hToTable to sLongTableSpace
53759>>>                    End
53759>>>>
53759>>>                    If (sBaseTableSpace <> "") Begin
53761>>>                        Set_Attribute DF_FILE_TABLE_TABLESPACE of hToTable to sBaseTableSpace
53764>>>                    End
53764>>>>
53764>>>                    If (sIndexTableSpace <> "") Begin
53766>>>                        Set_Attribute DF_FILE_INDEX_TABLESPACE of hToTable to sIndexTableSpace
53769>>>                    End
53769>>>>
53769>>>                End
53769>>>>
53769>>>            End
53769>>>>
53769>>>
53769>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
53770>>>        Structure_End hToTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
53772>>>        Set Action_Text of ghoStatusPanel to ""
53773>>>
53773>>>        Move (not(Err)) to bOK
53774>>>
53774>>>        If (bOK = True and bCopyData = True) Begin
53776>>>            Get ApiTableCopyData hTable sPhysicalName sRootName sDriverID to bOK
53777>>>
53777>>>            If (ghoDbUpdateHandler > 0) Begin
53779>>>                Get pbContinueOnError to bContinueOnError
53780>>>            End
53780>>>>
53780>>>            // If the data copy failed we will keep the newly created SQL table but
53780>>>            // rename it by adding a GUID to the end of the table name
53780>>>            // - or as much as "fit" because different SQL back-ends have
53780>>>            // different rules how long a table name can be.
53780>>>            // The new table will probably contain data but something went
53780>>>            // wrong while converting the data from embedded to SQL.
53780>>>            If (bOK = False and bContinueOnError = False) Begin
53782>>>                Get SQLUtilGUIDTempTableName sLogicalName to sGUIDName
53783>>>                Get SqlTableRename hTable sLogicalName sGUIDName to bOK
53784>>>                Error DFERR_PROGRAM ("Copying of" * sLogicalName * " data failed due to bad data. Either duplicate records and/or bad e.g Date/DateTime data. The SQL table was renamed to:" * String(sGUIDName) * "and its Filelist.cfg entry was NOT changed.")
53785>>>>
53785>>>            End
53785>>>>
53785>>>        End
53785>>>>
53785>>>
53785>>>        // This must be after copying data...
53785>>>        If (Err = False) Begin
53787>>>            Set_Attribute DF_FILE_ROOT_NAME of hTable to (sDriverID + ":" + sRootName)
53790>>>            // It seems the Studio does not do this any more, so commented out.
53790>>>            // We also adjust the display name by prefixing it by the schema name;
53790>>>            //            If (not(Lowercase(sDisplayName) contains Lowercase(sSchema + "."))) Begin
53790>>>            //                // The max length for the display_name is 31 characters...
53790>>>            //                If (Length(sSchema + "." + sDisplayName) < 31) Begin
53790>>>            //                    Set_Attribute DF_FILE_DISPLAY_NAME of hTable to (Lowercase(sSchema) + "." + sDisplayName)
53790>>>            //                End
53790>>>            //            End
53790>>>        End
53790>>>>
53790>>>
53790>>>        Close hTable
53791>>>        Move (not(Err)) to bOK
53792>>>        Function_Return bOK
53793>>>    End_Function
53794>>>
53794>>>    // Calls a driver function directly to copy data from one table to another (table structures needs to be the same).
53794>>>    // It will first drop all indicies, copy the data and then recreate indicies.
53794>>>    // An error log file with the sRootname + ".err" will be created in the Data folder.
53794>>>    Function ApiTableCopyData Integer hFromTable String sPhysicalName String sRootName String sDriverID Returns Boolean
53796>>>        Boolean bOpened bOK
53796>>>        Integer hToTable iIndex iRetval iVoid iOrgFreq
53796>>>        String sErrorFile sEmpty sPath
53796>>>
53796>>>        Get_Attribute DF_FILE_NEXT_EMPTY of 0 to hToTable
53799>>>        Get AutoConnectionIDLogin to bOK
53800>>>        If (sDriverID = DATAFLEX_ID) Begin
53802>>>            Send IncreaseSortBufferSize
53803>>>//            Send SetAllIndexesToBatch hToTable
53803>>>        End
53803>>>>
53803>>>
53803>>>        Move False to Err
53804>>>        Open sPhysicalName as hToTable
53806>>>        Get_Attribute DF_FILE_OPENED of hToTable to bOpened
53809>>>        If (bOpened = False) Begin
53811>>>            Function_Return False
53812>>>        End
53812>>>>
53812>>>
53812>>>        If (ghoStatusPanel <> 0) Begin
53814>>>            Set TableName_Text of ghoStatusPanel to ("Copying Data for Table:" * sRootName * "Number:" * String(hFromTable))
53815>>>            Set piMinimum of ghoProgressBar to 0
53816>>>            Set piMaximum of ghoProgressBar to 100 // 100%
53817>>>        End
53817>>>>
53817>>>
53817>>>        Move "" to sEmpty
53818>>>        Move False to Err
53819>>>        Move True to bOK
53820>>>        Set Private.phCurrentTable to hToTable
53821>>>
53821>>>        // No need to get the record identifier
53821>>>        Set_Attribute DF_FILE_GET_RID_AFTER_CREATE of hToTable to False
53824>>>        Get_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
53827>>>        If (sDriverID <> DATAFLEX_ID) Begin
53829>>>            // Remove all indices to speed up copying of data:
53829>>>            Call_Driver hToTable sDriverID Function CLI_DROPINDICES Callback ghoDbUpdateHandler Passing sEmpty sEmpty iVoid Result iRetval
53834>>>            If (iRetval <> 0) Begin       
53836>>>                Error DFERR_PROGRAM ("Failed dropping indices for table Number:" * String(hToTable) * "Name:" * String(sRootName))
53837>>>>
53837>>>                Close hToTable
53838>>>                Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
53841>>>                Function_Return False
53842>>>            End
53842>>>>
53842>>>        End
53842>>>>
53842>>>
53842>>>        Move (sRootName + ".err") to sErrorFile
53843>>>        Move 0 to iIndex
53844>>>        Move False to Err
53845>>>
53845>>>        If (sDriverID = MSSQLDRV_ID) Begin
53847>>>            Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to 10
53850>>>            Call_Driver hToTable sDriverID Function CLI_BCP CallBack ghoDbUpdateHandler Passing iIndex sEmpty hFromTable Result iRetval
53855>>>            If (iRetval <> 0) Begin
53857>>>                Error DFERR_PROGRAM ("Failed copying data for table Number:" * String(hToTable) * "Name:" * String(sRootName))
53858>>>>
53858>>>                Close hToTable
53859>>>                Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
53862>>>                Function_Return False
53863>>>            End
53863>>>>
53863>>>        End
53863>>>>
53863>>>        Else Begin
53864>>>            Copy_Records hFromTable to hToTable using 0 Callback ghoDbUpdateHandler
53867>>>        End
53867>>>>
53867>>>
53867>>>        If (Err = False) Begin
53869>>>            Get psHome of (phoWorkspace(ghoApplication)) to sPath
53870>>>            Get vDeleteFile (sPath + sErrorFile) to iRetval
53871>>>        End
53871>>>>
53871>>>
53871>>>        If (sDriverID <> DATAFLEX_ID) Begin
53873>>>            // Recreate indices:
53873>>>            Call_Driver hToTable sDriverID Function CLI_CREATEINDICES Callback ghoDbUpdateHandler Passing sEmpty sEmpty iVoid Result iRetval
53878>>>            If (iRetval <> 0) Begin
53880>>>                Error DFERR_PROGRAM ("Failed creating indices for table Number:" * String(hToTable) * "Name:" * String(sRootName))
53881>>>>
53881>>>                Close hToTable
53882>>>                Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
53885>>>                Function_Return False
53886>>>            End
53886>>>>
53886>>>        End
53886>>>>
53886>>>
53886>>>        Close hToTable
53887>>>        Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
53890>>>
53890>>>        If (bOK = True) Begin
53892>>>            Move (not(Err)) to bOK
53893>>>        End
53893>>>>
53893>>>
53893>>>        If (ghoStatusPanel <> 0) Begin
53895>>>            Set TableName_Text of ghoStatusPanel to ""
53896>>>            Set Message_Text   of ghoStatusPanel to ""
53897>>>            Set Action_Text    of ghoStatusPanel to ""
53898>>>        End
53898>>>>
53898>>>
53898>>>        Function_Return (bOK = True)
53899>>>    End_Function
53900>>>
53900>>>    // The bANSI parameter's default value = True, meaning a table in ANSI format will be created.
53900>>>    // i.e. DF_FILE_TABLE_CHARACTER_FORMAT {"OEM"|"ANSI"}
53900>>>    Function ApiTableCreate Handle hTable String sRootName String sDisplayName String sLogicalName Boolean bUseConnectionID Boolean bANSI Boolean bRecnum tAPIColumn[] aColumnIn Returns Boolean
53902>>>        Handle hFile
53902>>>        String sConnectionID sPhysicalFile sANSI_OEM sVal sSchema sOriginalDriverID sDriverID sTableName
53902>>>        Integer iIdentityType iDataType iDbType iCount iSize
53902>>>        Boolean bOk bExists bSqlDriver bDeleteDummy bExistsInFilelist bSysFile
53902>>>        tSQLConnection SQLConnection
53902>>>        tSQLConnection SQLConnection
53902>>>        tAPIColumn[] aColumns
53902>>>        tAPIColumn[] aColumns
53903>>>        tColumnType ColumnType
53903>>>        tColumnType ColumnType
53903>>>
53903>>>        // First check if the passed filenumber already exists; in case we do nothing
53903>>>        Get _UtilTableExists hTable to bOk
53904>>>        If (bOk = True) Begin
53906>>>            Function_Return False
53907>>>        End
53907>>>>
53907>>>
53907>>>        Set Private.phCurrentTable to hTable
53908>>>        Move sLogicalName to sTableName
53909>>>        If (ghoProgressBar <> 0) Begin
53911>>>            Send DoAdvance of ghoProgressBar
53912>>>            Set TableName_Text of ghoStatusPanel to ("Creating Table:" * String(sTableName) * "Number:" * String(hTable) * String(sLogicalName))
53913>>>        End
53913>>>>
53913>>>
53913>>>        Get UtilTableLogicalNameIsInUse sTableName to bExistsInFilelist
53914>>>        Get psDriverID to sDriverID
53915>>>        Get IsSQLDriver sDriverID to bSqlDriver
53916>>>        Get piDbType to iDbType
53917>>>
53917>>>        // If no columns passed in, we need to create a "dummy" column
53917>>>        Move False to bDeleteDummy
53918>>>        If (Num_Arguments = 8) Begin
53920>>>            Move aColumnIn to aColumns
53921>>>        End
53921>>>>
53921>>>        If ((SizeOfArray(aColumns)) = 0) Begin
53923>>>            Get UtilDFDataTypeToSqlTypeMapping sDriverID iDbType DF_BCD to ColumnType
53924>>>            Move ColumnType.iSQLType to iDataType
53925>>>            If (bRecnum = False) Begin
53927>>>                Move C_tAPIColumn_Identity to iIdentityType
53928>>>            End
53928>>>>
53928>>>            Else Begin
53929>>>                Move C_tAPIColumn_None     to iIdentityType
53930>>>            End
53930>>>>
53930>>>            Get _AppendAPIColumn aColumns "temp" iDataType 10 0 iIdentityType to aColumns
53931>>>            Move True to bDeleteDummy
53932>>>        End
53932>>>>
53932>>>
53932>>>        // If columns have been passed as an array we need to check if an identity column
53932>>>        // has been specified (aColumns[iCounter].iOptions = C_tAPIColumn_Identity), and
53932>>>        // if so auto-set the bRecnum to FALSE. This is because else there would be
53932>>>        // two identity columns and SQL doesn't like that and throws an error.
53932>>>        If (bRecnum = True and (SizeOfArray(aColumns)) <> 0) Begin
53934>>>            Move (SizeOfArray(aColumns)) to iSize
53935>>>            Decrement iSize
53936>>>            for iCount from 0 to iSize
53942>>>>
53942>>>                If (aColumns[iCount].iOptions = C_tAPIColumn_Identity) Begin
53944>>>                    Move False to bRecnum
53945>>>                    Move iSize to iCount
53946>>>                End
53946>>>>
53946>>>            Loop
53947>>>>
53947>>>        End
53947>>>>
53947>>>
53947>>>        // If this is a SQL based driver we also check if the table exists
53947>>>        // in the SQL back end; in case we do nothing.
53947>>>        If (bSqlDriver = True) Begin
53949>>>            // Get all connection properties
53949>>>            Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
53950>>>            Move SQLConnection.sSchema to sSchema
53951>>>            If (sSchema = "") Begin
53953>>>                Get _SqlFindKeyWord CI_SQLDBO to sSchema
53954>>>            End
53954>>>>
53954>>>
53954>>>            Get SqlUtilCheckIfTableHandleExists hTable sDriverID to bExists
53955>>>            // It can happen that the table is missing from Filelist.cfg but still
53955>>>            // exist on the SQL side, in case we want to search for the table by its name.
53955>>>            If (bExists = False) Begin
53957>>>                Get _SqlUtilCheckIfTableNameExists sTableName sDriverID to bExists
53958>>>            End
53958>>>>
53958>>>            // If the table exists on the SQL back-end but not in Filelist.cfg,
53958>>>            // we will just add it to Filelist.cfg
53958>>>            If (bExists = True) Begin
53960>>>                If (bExistsInFilelist = False) Begin
53962>>>                    If (sDriverID <> DATAFLEX_ID and not(Uppercase(sRootName) contains sDriverID)) Begin
53964>>>                        Move (sDriverID + ":" + sRootName) to sRootName
53965>>>                    End
53965>>>>
53965>>>                    Set_Attribute DF_FILE_ROOT_NAME     of hTable to sRootName
53968>>>                    Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
53971>>>                    Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
53974>>>                    Move False to bSysFile
53975>>>                    Get _SqlUtilCreateIntFile hTable sDriverID SQLConnection.sConnectionID bANSI bSysFile to bOK
53976>>>                End
53976>>>>
53976>>>                Function_Return False
53977>>>            End
53977>>>>
53977>>>        End
53977>>>>
53977>>>
53977>>>        Move CS_ANSI_Txt to sANSI_OEM
53978>>>        If (num_arguments > 6) Begin
53980>>>            If (bANSI = False) Begin
53982>>>                Move CS_OEM_Txt to sANSI_OEM
53983>>>            End
53983>>>>
53983>>>        End
53983>>>>
53983>>>
53983>>>        Move False to Err
53984>>>        If (sDriverID = DATAFLEX_ID) Begin
53986>>>            Move sRootName to sPhysicalFile
53987>>>        End
53987>>>>
53987>>>
53987>>>        If (sDriverID <> DATAFLEX_ID) Begin
53989>>>            Move SQLConnection.sConnectionID to sConnectionID
53990>>>
53990>>>            // If DAW driver and we should use a connection id we need to
53990>>>            // check if the connection ID exists; else we create it before attempting creating the table
53990>>>            If (bUseConnectionID = True) Begin
53992>>>                Get IsConnectionID sConnectionID sDriverID to bExists
53993>>>                If (bExists = False) Begin
53995>>>                    Get AutoSetConnectionID sConnectionID to bOk
53996>>>                    If (bOk = False) Begin
53998>>>                        Error DFERR_PROGRAM ("The Connection ID:" * sConnectionID * "could not be created and therefor the table can't be created.")
53999>>>>
53999>>>                        Function_Return False
54000>>>                    End
54000>>>>
54000>>>                End
54000>>>>
54000>>>            End
54000>>>>
54000>>>
54000>>>            If (sDriverID <> DATAFLEX_ID and (Uppercase(sRootName) contains sDriverID)) Begin
54002>>>                Move (sTableName + ".int") to sPhysicalFile
54003>>>            End
54003>>>>
54003>>>            Else Begin
54004>>>                Move (sRootName + ".int") to sPhysicalFile
54005>>>            End
54005>>>>
54005>>>            Move (Uppercase(sDisplayName)) to sVal
54006>>>//            If (not(sVal contains (sSchema + "."))) Begin
54006>>>//                Move (Lowercase(sSchema) + "." + sTableName) to sDisplayName
54006>>>//            End
54006>>>        End
54006>>>>
54006>>>        Move False to Err
54007>>>        Move 0 to hFile
54008>>>
54008>>>        Structure_Start hFile sDriverID
54009>>>            If (sDriverID <> DATAFLEX_ID) Begin
54011>>>                If (bUseConnectionID = True) Begin
54013>>>                    Set_Attribute DF_FILE_LOGIN                of hFile to (CS_DFCONNID + "=" + sConnectionID)
54016>>>                End
54016>>>>
54016>>>                Else Begin
54017>>>                    Set_Attribute DF_FILE_LOGIN                of hFile to SQLConnection.sConnectionString
54020>>>                End
54020>>>>
54020>>>                Set_Attribute DF_FILE_TABLE_NAME               of hFile to sTableName
54023>>>                Set_Attribute DF_FILE_USE_DUMMY_ZERO_DATE      of hFile to True
54026>>>                Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT   of hFile to sANSI_OEM
54029>>>                Set_Attribute DF_FILE_RECNUM_TABLE             of hFile to bRecnum
54032>>>
54032>>>                If (sSchema <> "") Begin
54034>>>                    Set_Attribute DF_FILE_OWNER                of hFile to sSchema
54037>>>                End
54037>>>>
54037>>>
54037>>>                If (sDriverID = DB2_DRV_ID) Begin
54039>>>                    If (SQLConnection.sLongTableSpace <> "") Begin
54041>>>                        Set_Attribute DF_FILE_LONG_TABLESPACE  of hFile to SQLConnection.sLongTableSpace
54044>>>                    End
54044>>>>
54044>>>                End
54044>>>>
54044>>>                If (sDriverID = DB2_DRV_ID) Begin
54046>>>                    If (SQLConnection.sBaseTableSpace <> "") Begin
54048>>>                        Set_Attribute DF_FILE_TABLE_TABLESPACE of hFile to SQLConnection.sBaseTableSpace
54051>>>                    End
54051>>>>
54051>>>                    If (SQLConnection.sIndexTableSpace <> "") Begin
54053>>>                        Set_Attribute DF_FILE_INDEX_TABLESPACE of hFile to SQLConnection.sIndexTableSpace
54056>>>                    End
54056>>>>
54056>>>                End
54056>>>>
54056>>>            End
54056>>>>
54056>>>
54056>>>            Set_Attribute DF_FILE_PHYSICAL_NAME of hFile to sPhysicalFile
54059>>>            Get ApiColumnsAddToTable hFile aColumns True to bOk
54060>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
54061>>>        Structure_End hFile DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54063>>>        Set Action_Text of ghoStatusPanel to ""
54064>>>
54064>>>        Move (not(Err)) to bOK
54065>>>        If (bOk = True) Begin
54067>>>            If (sDriverID <> DATAFLEX_ID and not(Uppercase(sRootName) contains sDriverID)) Begin
54069>>>                Move (sDriverID + ":" + sRootName) to sRootName
54070>>>            End
54070>>>>
54070>>>            Set_Attribute DF_FILE_ROOT_NAME     of hTable to sRootName
54073>>>            Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
54076>>>            Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
54079>>>
54079>>>            // Lastly we remove the temporary column we created above, if all went well.
54079>>>            If (bDeleteDummy) Begin
54081>>>                Get ApiColumnRemove hTable "temp" to bOk
54082>>>            End
54082>>>>
54082>>>        End
54082>>>>
54082>>>
54082>>>        Set TableName_Text of ghoStatusPanel to ""
54083>>>        Close hTable
54084>>>        Function_Return bOK
54085>>>    End_Function
54086>>>
54086>>>    Function ApiTableCreateAlias String sFileName String sDisplayName String sAliasName Integer iFilelistSlot Returns Boolean
54088>>>        Move False to Err
54089>>>        Set_Attribute DF_FILE_ROOT_NAME     of iFilelistSlot to sFileName
54092>>>        Set_Attribute DF_FILE_DISPLAY_NAME  of iFilelistSlot to sDisplayName
54095>>>        Set_Attribute DF_FILE_LOGICAL_NAME  of iFilelistSlot to sAliasName
54098>>>
54098>>>        Function_Return (Err = False)
54099>>>    End_Function
54100>>>
54100>>>    // ToDo: Needs to be revised
54100>>>    Procedure ApiTableCreateFromDEF String sPath String sFileName String sTableName String sDisplayName Integer iFilelistSlot
54102>>>        Handle hTable
54102>>>        String sDEFName sDataPath
54102>>>        Boolean bExists
54102>>>
54102>>>        // Do nothing if MSSQL Driver.
54102>>>//        Get IsMSSQLDriver to bExists
54102>>>//        If (bExists = True) Begin
54102>>>//            Procedure_Return
54102>>>//        End
54102>>>
54102>>>        Get psDataPathFirstPart to sDataPath
54103>>>        Get vFilePathExists (sDataPath + sFileName + ".dat") to bExists
54104>>>        If (bExists = True) Begin
54106>>>            // We also needs to check if it is an Alias file, in case the sFileName.dat exists, but it may
54106>>>            // still be missing from the filelist and needs to be added.
54106>>>            Get _UtilTableNumberIsInUse iFilelistSlot to bExists
54107>>>            If (bExists = True) Begin
54109>>>                Procedure_Return
54110>>>            End
54110>>>>
54110>>>            // Do _not_ use the DEF file if an alias, it will overwrite the base table data.
54110>>>            Else Begin
54111>>>                Set_Attribute DF_FILE_ROOT_NAME    of iFilelistSlot to sFileName
54114>>>                Set_Attribute DF_FILE_LOGICAL_NAME of iFilelistSlot to sTableName
54117>>>                Set_Attribute DF_FILE_DISPLAY_NAME of iFilelistSlot to sDisplayName
54120>>>                Procedure_Return
54121>>>            End
54121>>>>
54121>>>        End
54121>>>>
54121>>>
54121>>>        Move (sPath + sFileName + ".def") to sDEFName
54122>>>        Move 0 to hTable
54123>>>        Move False to Err
54124>>>
54124>>>        Structure_Start hTable DATAFLEX_ID
54125>>>            Load_Def sDEFName Onto hTable
54126>>>            Set_Attribute DF_FILE_PHYSICAL_NAME of hTable to sFileName
54129>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
54130>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54132>>>        Set Action_Text of ghoStatusPanel to ""
54133>>>
54133>>>        Move iFilelistSlot to hTable
54134>>>        Set_Attribute DF_FILE_ROOT_NAME    of hTable to sFileName
54137>>>        Set_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
54140>>>        Set_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
54143>>>
54143>>>    End_Procedure
54144>>>
54144>>>    Function ApiTableMoveToFileSlot Integer iFromFileSlot Integer iToFileSlot String sDriverID Returns Boolean
54146>>>        Boolean bTmp bErr bOK
54146>>>        String sTableName sDisplayName sFileName
54146>>>
54146>>>        // We preserve the value of the Err flag, by saving its current state and resetting it before end of function.
54146>>>        Move Err to bTmp
54147>>>        Move False to Err
54148>>>
54148>>>        Get AutoConnectionIDLogin to bOK
54149>>>        // First get the info for the current filelist slot:
54149>>>        Open iFromFileSlot
54151>>>        Get_Attribute DF_FILE_OPENED of iFromFileSlot to bOK
54154>>>        If (bOK = True) Begin
54156>>>            Get_Attribute DF_FILE_ROOT_NAME    of iFromFileSlot to sFileName
54159>>>            Get_Attribute DF_FILE_LOGICAL_NAME of iFromFileSlot to sTableName
54162>>>            Get_Attribute DF_FILE_DISPLAY_NAME of iFromFileSlot to sDisplayName
54165>>>
54165>>>            //...then move it.
54165>>>            Set_Attribute DF_FILE_ROOT_NAME    of iToFileSlot to sFileName
54168>>>            Set_Attribute DF_FILE_LOGICAL_NAME of iToFileSlot to sTableName
54171>>>            Set_Attribute DF_FILE_DISPLAY_NAME of iToFileSlot to sDisplayName
54174>>>
54174>>>            //...and finally remove the old filelist values.
54174>>>            Set_Attribute DF_FILE_ROOT_NAME    of iFromFileSlot to ""
54177>>>            Set_Attribute DF_FILE_LOGICAL_NAME of iFromFileSlot to ""
54180>>>            Set_Attribute DF_FILE_DISPLAY_NAME of iFromFileSlot to ""
54183>>>        End
54183>>>>
54183>>>        Close iFromFileSlot
54184>>>
54184>>>        Move Err to bErr
54185>>>        Move bTmp to Err
54186>>>        Function_Return (bErr = False)
54187>>>    End_Function
54188>>>
54188>>>    Function ApiTableRelate Handle hTableFrom Handle hTableTo Integer iColumnFrom Integer iColumnTo Returns Boolean
54190>>>        Handle hTable
54190>>>        Boolean bOK
54190>>>        String sDriverID
54190>>>
54190>>>        Get _UtilTableExists hTableFrom to bOK
54191>>>        If (bOK = False) Begin
54193>>>            Set Private.phCurrentTable to hTableFrom
54194>>>            Error DFERR_PROGRAM ("Func: ApiTableRelate. From Table:" * String(hTableFrom) * "exists in Filelist.cfg but not on disk or SQL back-end.")
54195>>>>
54195>>>            Function_Return False
54196>>>        End
54196>>>>
54196>>>
54196>>>        Get _UtilTableExists hTableTo to bOK
54197>>>        If (bOK = False) Begin
54199>>>            Set Private.phCurrentTable to hTableTo
54200>>>            Error DFERR_PROGRAM ("Func: ApiTableRelate. To Table:" * String(hTableTo) * "exists in Filelist.cfg but not on disk or SQL back-end.")
54201>>>>
54201>>>            Function_Return False
54202>>>        End
54202>>>>
54202>>>
54202>>>        Get AutoConnectionIDLogin to bOK
54203>>>        Get UtilTableOpen hTableFrom "" DF_EXCLUSIVE to bOK
54204>>>        If (bOK = False) Begin
54206>>>            Function_Return False
54207>>>        End
54207>>>>
54207>>>
54207>>>        Move False to Err
54208>>>        Open hTableTo
54210>>>
54210>>>        Move hTableFrom to hTable
54211>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
54214>>>        Set Private.phCurrentTable to hTable
54215>>>
54215>>>        Structure_Start hTable sDriverID
54216>>>            Set_Attribute DF_FIELD_RELATED_FILE of hTable iColumnFrom to hTableTo
54219>>>            If (iColumnTo <> 0) Begin
54221>>>                Set_Attribute DF_FIELD_RELATED_FIELD of hTable iColumnFrom to iColumnTo
54224>>>            End
54224>>>>
54224>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
54225>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54227>>>        Set Action_Text of ghoStatusPanel to ""
54228>>>
54228>>>        If (hTableTo > 0) Begin
54230>>>            Close hTableTo
54231>>>        End
54231>>>>
54231>>>
54231>>>        Function_Return (Err = False)
54232>>>    End_Function
54233>>>
54233>>>    // Removes the passed table name completely from disk, filelist (& Sql Server if an Sql-driver)
54233>>>    Function ApiTableRemove Handle hTable Returns Boolean
54235>>>        String sTableName sDriverID
54235>>>        Boolean bOk
54235>>>        String sDataPath
54235>>>
54235>>>        Get AutoConnectionIDLogin to bOK
54236>>>        Move False to Err
54237>>>        Get psDriverID to sDriverID
54238>>>        Get UtilTableHandleToString hTable sDriverID to sTableName
54239>>>        If (sTableName = "") Begin
54241>>>            Function_Return False
54242>>>        End
54242>>>>
54242>>>
54242>>>        Set Private.phCurrentTable to hTable
54243>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_DELETE_FILE
54244>>>        Delete_db sTableName
54245>>>        Send Trap_Error of Error_Object_Id DFERR_CANT_DELETE_FILE
54246>>>
54246>>>        If (sDriverID <> DATAFLEX_ID) Begin
54248>>>//            Get SqlTableRemoveByTableName sTableName to bOk  // We don't have to do this because the database is already removed by 'delete_db' above
54248>>>            Get psDataPathFirstPart to sDataPath
54249>>>            Get vDeleteFile (sDataPath + sTableName + ".int") to bOk
54250>>>        End
54250>>>>
54250>>>        // Also remove table from filelist.cfg in case the physical file didn't exist.
54250>>>        If (hTable <> 0) Begin
54252>>>            Set_Attribute DF_FILE_ROOT_NAME     of hTable to ""
54255>>>            Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to ""
54258>>>            Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to ""
54261>>>        End
54261>>>>
54261>>>
54261>>>        Close hTable
54262>>>        Function_Return (hTable <> 0)
54263>>>    End_Function
54264>>>
54264>>>    Function ApiTableRemoveRelation Handle hTableFrom Integer iColumn Returns Boolean
54266>>>        Handle hTable
54266>>>        Boolean bOK
54266>>>
54266>>>        Get AutoConnectionIDLogin to bOK
54267>>>        Move False to Err
54268>>>        Open hTableFrom Mode DF_EXCLUSIVE
54270>>>        Move hTableFrom to hTable
54271>>>
54271>>>        Structure_Start hTable
54272>>>            Set_Attribute DF_FIELD_RELATED_FILE of hTable iColumn to 0
54275>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
54276>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54278>>>        Set Action_Text of ghoStatusPanel to ""
54279>>>
54279>>>        Close hTableFrom
54280>>>        Function_Return (Err = False)
54281>>>    End_Function
54282>>>
54282>>>    Function ApiTableRename Handle hTable String sRootName String sDisplayName String sLogicalName Returns Boolean
54284>>>        String sPhysicalName sRootNameTo sLogicalNameTo sDataPath sDriverID sSchema sPhysicalNameTo
54284>>>        Boolean bOK bExists bOpened
54284>>>        tAPITableNameInfo APITableNameInfo
54284>>>        tAPITableNameInfo APITableNameInfo
54284>>>
54284>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
54287>>>        If (bOpened = False) Begin
54289>>>            Get OpenTableExclusive hTable to bOpened
54290>>>            If (bOpened = False) Begin
54292>>>                Send UserError DFERR_PROGRAM ("Could not open table number:" * String(hTable) * "Table could not be updated.")
54293>>>                Function_Return False
54294>>>            End
54294>>>>
54294>>>        End
54294>>>>
54294>>>
54294>>>        Set Private.phCurrentTable to hTable
54295>>>        Move hTable         to APITableNameInfo.iTableNumber
54296>>>        Move sRootName      to APITableNameInfo.sRootName
54297>>>        Move sLogicalName   to APITableNameInfo.sLogicalName
54298>>>        Move sDisplayName   to APITableNameInfo.sDisplayName
54299>>>        Get _ApiTableFilelistNamesCompare True APITableNameInfo to bExists
54300>>>        If (bExists = True) Begin
54302>>>            Function_Return True
54303>>>        End
54303>>>>
54303>>>
54303>>>        Set Private.phCurrentTable to hTable
54304>>>        Move False to Err
54305>>>        Get psDataPathFirstPart to sDataPath
54306>>>        Get_Attribute DF_FILE_PHYSICAL_NAME of hTable to sPhysicalName
54309>>>        Get_Attribute DF_FILE_ROOT_NAME     of hTable to sRootNameTo
54312>>>        Get_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalNameTo
54315>>>
54315>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
54318>>>        Close hTable
54319>>>        If (sDriverID = DATAFLEX_ID) Begin
54321>>>            Get vFilePathExists (sDataPath + sRootNameTo + ".dat") to bExists
54322>>>            If (bExists = True) Begin
54324>>>                If (Uppercase(sRootName) <> Uppercase(sRootNameTo)) Begin
54326>>>                    Copy_db (sDataPath + sRootNameTo) to (sDataPath + sRootName)
54329>>>                    // We need a short break here before attempting to delete the physical old files or Windows
54329>>>                    // might report "File in use..." and the deletion will fail.
54329>>>                    Sleep 2
54330>>>                    Get vDeleteFile (sDataPath + sRootNameTo + ".*") to bOK
54331>>>                End
54331>>>>
54331>>>            End
54331>>>>
54331>>>        End
54331>>>>
54331>>>
54331>>>        If (sDriverID <> DATAFLEX_ID) Begin
54333>>>            If (not(sPhysicalName contains ".")) Begin
54335>>>                Move (sPhysicalName + String(".int")) to sPhysicalName
54336>>>            End
54336>>>>
54336>>>
54336>>>            // Change the table name in the .int file to the new table new:
54336>>>            Get _UtilChangeSourceCodeLine (sDataPath + sPhysicalName) (CS_DATABASE_NAME * String(sLogicalNameTo)) (CS_DATABASE_NAME * String(sLogicalName)) False to bOK
54337>>>            If (bOK = False) Begin
54339>>>                Function_Return False
54340>>>            End
54340>>>>
54340>>>
54340>>>            // Change table name at the SQL side:
54340>>>            Get psSchema to sSchema
54341>>>            Get SqlTableRename hTable sLogicalNameTo sLogicalName to bOK
54342>>>
54342>>>            Get _TableNameOnly sRootName to sPhysicalNameTo
54343>>>            // Remove cache file and Rename the physical file names:
54343>>>            Get vDeleteFile (sDataPath + sPhysicalNameTo + ".cch")                                  to bOK
54344>>>            Get vRenameFile (sDataPath + sPhysicalName)            (sDataPath + sRootName + ".int") to bOK
54345>>>            Get vRenameFile (sDataPath + sPhysicalNameTo + ".tag") (sDataPath + sRootName + ".tag") to bOK
54346>>>            Move (sDriverID + ":" + sRootName) to sRootName
54347>>>
54347>>>            // The Studio no longer adds the schema to the DISPLAY_NAME, so commented out.
54347>>>//            If (not(sDisplayName contains ".")) Begin
54347>>>//                Move (sSchema + "." + sDisplayName) to sDisplayName
54347>>>//            End
54347>>>        End
54347>>>>
54347>>>
54347>>>        Set_Attribute DF_FILE_ROOT_NAME     of hTable to sRootName
54350>>>        Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
54353>>>        Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
54356>>>
54356>>>        Function_Return (Err = False)
54357>>>    End_Function
54358>>>
54358>>>    Function ApiTableRenameAlias Integer hTable String sDisplayName String sLogicalName Returns Boolean
54360>>>        Move False to Err
54361>>>        Set Private.phCurrentTable to hTable
54362>>>        Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
54365>>>        Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
54368>>>
54368>>>        Function_Return (Err = False)
54369>>>    End_Function
54370>>>
54370>>>    Function ApiTableUpdate tAPITableNameInfo APITableNameInfoFrom tAPIColumn[] aColumnsFrom tAPIIndex[] aIndexesFrom tAPIRelation[] aRelationsFrom Returns Boolean
54372>>>        Handle hTable
54372>>>        String sTableName
54372>>>        String sDriverIDFrom sDriverIDTo sLogicalNameTo
54372>>>        Integer iDbType
54372>>>        Boolean bOk bOpened bApiTableUpdateAuto bLogicalNameOK
54372>>>        Boolean bUseConnectionID bToANSI bRecnum bCopyData bCompareDate_DateTime bCompareIndexAscending bCompareIndexUppercase bTableExists
54372>>>        Boolean bIsSame bFilelistError bIsAliasFrom bIsSQLTableFrom bIsSQLTableTo
54372>>>        tSQLConnection SQLConnection
54372>>>        tSQLConnection SQLConnection
54372>>>        tAPITable      APITableFrom APITableTo
54372>>>        tAPITable      APITableFrom APITableTo
54372>>>        tColumnType    ColumnType
54372>>>        tColumnType    ColumnType
54372>>>        tAPIColumnCompare[]   aAPIColumnCompare
54372>>>        tAPIColumnCompare[]   aAPIColumnCompare
54373>>>        tAPIIndexCompare[]    aAPIIndexCompare
54373>>>        tAPIIndexCompare[]    aAPIIndexCompare
54374>>>        tAPIRelationCompare[] aAPIRelationCompare
54374>>>        tAPIRelationCompare[] aAPIRelationCompare
54375>>>
54375>>>        // We don't allow changes to the framework's DbVersion table.
54375>>>        If (Lowercase(sTableName) = "dbversion") Begin
54377>>>            Function_Return False
54378>>>        End
54378>>>>
54378>>>        
54378>>>        Move True to bOk
54379>>>        Move APITableNameInfoFrom.sDriverID     to sDriverIDFrom
54380>>>        Get piDbType                            to iDbType
54381>>>        Get pbRecnum                            to bRecnum
54382>>>        Get pbToANSI                            to bToANSI
54383>>>        Get pbCopyData                          to bCopyData
54384>>>        Get pbApiTableUpdateAuto                to bApiTableUpdateAuto
54385>>>        Get pbCompareDate_DateTime              to bCompareDate_DateTime
54386>>>        Get pbCompareIndexAscending             to bCompareIndexAscending
54387>>>        Get pbCompareIndexUppercase             to bCompareIndexUppercase
54388>>>        Get pbUseConnectionID                   to bUseConnectionID
54389>>>
54389>>>        Move APITableNameInfoFrom.iTableNumber  to hTable
54390>>>        Set Private.phCurrentTable              to hTable
54391>>>        Get _UtilTableExists  hTable            to bTableExists
54392>>>
54392>>>        If (ghoProgressBar <> 0) Begin
54394>>>            Send DoAdvance of ghoProgressBar
54395>>>            Set TableName_Text of ghoStatusPanel to ("Checking Table:" * "Number:" * String(hTable) * String(APITableNameInfoFrom.sLogicalName))
54396>>>            Set Message_Text   of ghoStatusPanel to ""
54397>>>            Set Action_Text    of ghoStatusPanel to ""
54398>>>        End
54398>>>>
54398>>>
54398>>>        Move APITableNameInfoFrom.bIsAlias      to bIsAliasFrom
54399>>>        Move APITableNameInfoFrom.bIsSQL        to bIsSQLTableFrom
54400>>>        Get _UtilTableIsSql hTable              to bIsSQLTableTo
54401>>>        Get UtilDriverFromTableNumber hTable    to sDriverIDTo
54402>>>        Move True                               to APITableFrom.bFromTable
54403>>>        Move hTable                             to APITableFrom.hTable
54404>>>        Move APITableNameInfoFrom               to APITableFrom.ApiTableInfo
54405>>>        Move aColumnsFrom                       to APITableFrom.aApiColumns
54406>>>        Move aIndexesFrom                       to APITableFrom.aApiIndexes
54407>>>        Move aRelationsFrom                     to APITableFrom.aApiRelations
54408>>>
54408>>>        // Check both the Filelist slot AND the LogicalName are the same! Else declare an error and break out of here!
54408>>>        If (bTableExists = True and sDriverIDTo <> DATAFLEX_ID) Begin
54410>>>            Get _SqlUtilCheckIfTableNameExists APITableFrom.ApiTableInfo.sLogicalName sDriverIDTo to bLogicalNameOK
54411>>>            Get SqlUtilCheckIfTableHandleExists hTable sDriverIDFrom to bOk
54412>>>            If (bOk = True and bLogicalNameOK = False) Begin
54414>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalNameTo
54417>>>                Error DFERR_PROGRAM ("The Filelist slot:" * String(hTable) * "exists on the client, but the Logical names are differnt! New Logical Name:" ;                                      * String(APITableFrom.ApiTableInfo.sLogicalName) * "existing Logical Name:" * String(sLogicalNameTo) * "- The file needs to be manually moved to another file slot (or removed) before this process can be started!")
54418>>>>
54418>>>                Function_Return False
54419>>>            End
54419>>>>
54419>>>        End
54419>>>>
54419>>>
54419>>>        If (bTableExists = True) Begin
54421>>>            If (bIsSQLTableTo = True) Begin
54423>>>                Get _UtilDeleteCacheFile APITableFrom.ApiTableInfo.sLogicalName to bOk
54424>>>            End
54424>>>>
54424>>>            Get OpenTableExclusive hTable to bOpened
54425>>>            If (bOpened = False) Begin
54427>>>                Send UserError DFERR_PROGRAM ("Could not open table number:" * String(hTable) * "Table could not be updated.")
54428>>>                Function_Return False
54429>>>            End
54429>>>>
54429>>>            Get UtilTableStructFill hTable False                                                        to APITableTo
54430>>>            Get UtilColumnCombineFromAndToArrays   APITableFrom.aApiColumns   APITableTo.aApiColumns    to aAPIColumnCompare
54431>>>            Get UtilIndexCombineFromAndToArrays    APITableFrom.aApiIndexes   APITableTo.aApiIndexes    to aAPIIndexCompare
54432>>>            Get UtilRelationCombineFromAndToArrays APITableFrom.aApiRelations APITableTo.aApiRelations  to aAPIRelationCompare
54433>>>        End
54433>>>>
54433>>>
54433>>>        Move True to bOk
54434>>>        Move False to Err
54435>>>        Case Begin
54435>>>            // Alias table:
54435>>>            Case (bIsAliasFrom = True)
54437>>>                // Do nothing. Get _UtilTableCheckChangeFilelistNames is called below
54437>>>                Case Break
54438>>>
54438>>>            Case (bIsSQLTableFrom = True and bIsSQLTableTo = False and bTableExists = True)
54441>>>                    Get ApiTableConvertToSql_Ex hTable sDriverIDFrom bUseConnectionID bToANSI bRecnum bCopyData to bOk
54442>>>                    If (bOk = True) Begin
54444>>>                        Send LogError ("DataFlex table:" * String(APITableNameInfoFrom.sLogicalName) * "successfully converted to use driver:" * String(sDriverIDFrom)) False
54445>>>                    End
54445>>>>
54445>>>                Case Break
54446>>>            // New Table:
54446>>>            Case (bTableExists = False)
54449>>>                Get ApiTableCreate      hTable APITableNameInfoFrom.sRootName APITableNameInfoFrom.sDisplayName APITableNameInfoFrom.sLogicalName bUseConnectionID bToANSI bRecnum aColumnsFrom to bOk
54450>>>                //LR 20191112 Begin: Make file a system file if bIsSystemFile = True
54450>>>                If (APITableNameInfoFrom.bIsSystemFile) Begin
54452>>>                    Get ApiTableChangeAttribute hTable DF_FILE_IS_SYSTEM_FILE True to bOK
54453>>>                End                                                                 
54453>>>>
54453>>>                Get UtilIndexesUpdate   hTable bIsSQLTableFrom bIsSQLTableTo APITableFrom.aApiIndexes APITableTo.aApiIndexes bCompareIndexUppercase bCompareIndexAscending  to bOk
54454>>>                Get UtilRelationsUpdate hTable APITableFrom.aApiRelations APITableTo.aApiRelations to bOk
54455>>>                Case Break
54456>>>
54456>>>            // Update table:
54456>>>            Case (bTableExists = True)
54459>>>                Get UtilTableCompare APITableFrom APITableTo False (&bFilelistError) to bIsSame
54460>>>                If (bIsSame = True) Begin
54462>>>                    Case Break
54463>>>                End
54463>>>>
54463>>>                If (bFilelistError = True) Begin
54465>>>                    Get ApiTableRename hTable APITableNameInfoFrom.sRootName APITableNameInfoFrom.sDisplayName APITableNameInfoFrom.sLogicalName to bOk
54466>>>                    If (bOk = False) Begin
54468>>>                        Case Break
54469>>>                    End
54469>>>>
54469>>>                End
54469>>>>
54469>>>
54469>>>                If (ghoProgressBar <> 0) Begin
54471>>>                    Send DoAdvance of ghoProgressBar
54472>>>                    Set TableName_Text of ghoStatusPanel to ("Updating Table:" * "Number:" * String(hTable) * String(APITableNameInfoFrom.sLogicalName))
54473>>>                End
54473>>>>
54473>>>
54473>>>                // Columns:
54473>>>                Move True to bOk
54474>>>                Get UtilColumnsCompare sDriverIDFrom sDriverIDTo bIsSQLTableFrom bIsSQLTableTo aAPIColumnCompare bCompareDate_DateTime to bIsSame
54475>>>                If (bIsSame = False) Begin
54477>>>                    Get ApiColumnsUpdate sDriverIDFrom hTable bIsSQLTableFrom APITableFrom.aApiColumns APITableTo.aApiColumns bCompareDate_DateTime to bOk
54478>>>                End
54478>>>>
54478>>>                If (bOk = False) Begin
54480>>>                    Case Break
54481>>>                End
54481>>>>
54481>>>
54481>>>                // Indexes:
54481>>>                Get UtilIndexesCompare bIsSQLTableFrom bIsSQLTableTo aAPIIndexCompare bCompareIndexUppercase bCompareIndexAscending to bIsSame
54482>>>                If (bIsSame = False) Begin
54484>>>                    Get UtilIndexesUpdate hTable bIsSQLTableFrom bIsSQLTableTo APITableFrom.aApiIndexes APITableTo.aApiIndexes bCompareIndexUppercase bCompareIndexAscending  to bOk
54485>>>                End
54485>>>>
54485>>>
54485>>>                // Relations:
54485>>>                Get UtilRelationsCompare hTable aAPIRelationCompare to bIsSame
54486>>>                If (bIsSame = False) Begin
54488>>>                    Get UtilRelationsUpdate hTable APITableFrom.aApiRelations APITableTo.aApiRelations to bOk
54489>>>                    If (bOk = False) Begin
54491>>>                        Case Break
54492>>>                    End
54492>>>>
54492>>>                End
54492>>>>
54492>>>
54492>>>                Case Break
54493>>>
54493>>>            Case Else
54493>>>                Error DFERR_PROGRAM "Unknown Case structure exit in Function ApiTableUpdate"
54494>>>>
54494>>>                Move False to bOk
54495>>>        Case End
54495>>>        
54495>>>        If (bOk = True) Begin
54497>>>            // Note: If the from table was SQL; we should either connect to an existing SQL to table,
54497>>>            // or convert an embedded table to SQL
54497>>>            If (bIsSQLTableFrom = True and bIsSQLTableTo = False) Begin
54499>>>                Get SqlUtilCheckIfTableHandleExists hTable sDriverIDFrom to bOk
54500>>>                If (bOk = False) Begin
54502>>>                    Get ApiTableConvertToSql_Ex hTable sDriverIDFrom bUseConnectionID bToANSI bRecnum bCopyData to bOK
54503>>>                End
54503>>>>
54503>>>            End
54503>>>>
54503>>>            Else If (bIsSQLTableFrom = False and bIsSQLTableTo = True) Begin
54506>>>                Get SqlTableConvertToEmbedded hTable True to bOk
54507>>>            End
54507>>>>
54507>>>            
54507>>>            // Filelist Names:
54507>>>            Get _UtilTableCheckChangeFilelistNames APITableNameInfoFrom to bOk
54508>>>        End
54508>>>>
54508>>>        
54508>>>        Close hTable
54509>>>        Set TableName_Text of ghoStatusPanel to ""
54510>>>
54510>>>        Function_Return bOK
54511>>>    End_Function
54512>>>
54512>>>    // * Dummy function for the Studio's Code Explorer *
54512>>>    Function API_COLUMN_FUNCTIONS Returns Boolean
54514>>>        Function_Return False
54515>>>    End_Function
54516>>>
54516>>>    // Adds a column name to the passed table number.
54516>>>    Function ApiColumnAdd Handle hTable String sFieldName Integer iType Integer iLength Integer iPrec Boolean bInitVal String sColVal Returns Boolean
54518>>>        Integer iColumn iCount iFile iPrecision iLastErr
54518>>>        Boolean bExists bOK bInitializeValue bRetval
54518>>>        String sDataPath sDdSrcPath sTableName sColumnValue sDriverID
54518>>>
54518>>>        Get UtilColumnExists hTable sFieldName to bExists
54519>>>        If (bExists = True) Begin
54521>>>            Function_Return False
54522>>>        End
54522>>>>
54522>>>
54522>>>        Move False to Err
54523>>>        If (num_arguments > 4) Begin
54525>>>            Move iPrec to iPrecision
54526>>>        End
54526>>>>
54526>>>        If (num_arguments > 6) Begin
54528>>>            Move bInitVal to bInitializeValue
54529>>>            Move sColVal  to sColumnValue
54530>>>        End
54530>>>>
54530>>>        If (iType < -1490) Begin
54532>>>            Move (iType + 1500) to iType
54533>>>        End
54533>>>>
54533>>>
54533>>>        Move hTable to iFile
54534>>>        Get psDriverID to sDriverID
54535>>>        Get AutoConnectionIDLogin to bOK
54536>>>        Move False to Err
54537>>>        Move LastErr to iLastErr
54538>>>        Get OpenTableExclusive iFile to bOK
54539>>>        Set Private.phCurrentTable to hTable
54540>>>
54540>>>        Structure_Start iFile sDriverID
54541>>>            Move 0 to iColumn
54542>>>            Set Private.piCurrentField to iColumn
54543>>>            Create_Field hTable At iColumn
54544>>>            Set_Attribute DF_FIELD_NAME      of iFile iColumn to sFieldName
54547>>>            Set_Attribute DF_FIELD_TYPE      of iFile iColumn to iType
54550>>>            Set_Attribute DF_FIELD_LENGTH    of iFile iColumn to (iLength + iPrecision)
54553>>>            Set_Attribute DF_FIELD_PRECISION of iFile iColumn to iPrecision
54556>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
54557>>>        Structure_End iFile DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54559>>>
54559>>>        Set Action_Text of ghoStatusPanel to ""
54560>>>
54560>>>        // If in development environment; create .fd file:
54560>>>        Open hTable
54562>>>        Get psDdSrcPath  of (phoWorkspace(ghoApplication)) to sDDSrcPath
54563>>>        Get CountOfPaths of (phoWorkspace(ghoApplication)) sDDSrcPath to iCount
54564>>>        If (iCount > 1) Begin
54566>>>            Get PathAtIndex of (phoWorkspace(ghoApplication)) sDDSrcPath 1 to sDDSrcPath
54567>>>        End
54567>>>>
54567>>>        Get vFolderExists sDDSrcPath to bExists
54568>>>        If (bExists = True) Begin
54570>>>            Get vFolderFormat sDDSrcPath to sDDSrcPath
54571>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sTableName
54574>>>            Get _TableNameOnly sTableName to sTableName
54575>>>            Output_Aux_File DF_AUX_FILE_FD for hTable to (sDDSrcPath + sTableName + ".fd")
54577>>>        End
54577>>>>
54577>>>        If (sDriverID = DATAFLEX_ID) Begin  // We only want a tag if DataFlex embedded db
54579>>>            Get psDataPath  of (phoWorkspace(ghoApplication)) to sDataPath
54580>>>            Get CountOfPaths of (phoWorkspace(ghoApplication)) sDataPath to iCount
54581>>>            If (iCount > 1) Begin
54583>>>                Get PathAtIndex of (phoWorkspace(ghoApplication)) sDataPath 1 to sDataPath
54584>>>            End
54584>>>>
54584>>>            Get vFolderFormat sDataPath to sDataPath
54585>>>            // Add the new column name to the .tag filen (if it doesn't exist):
54585>>>            // The following line should not be necexxary for the DataFlex driver. (Thank you, Hans van de Laar)
54585>>>            //Get UtilUpdateTAGFile (sDataPath + sTableName + ".tag") sFieldName to bOK
54585>>>        End
54585>>>>
54585>>>        // Check for a default value
54585>>>        If (bInitializeValue = True and sColumnValue <> "" and Err = False) Begin
54587>>>            Get ApiColumnUpdateValue hTable sFieldName sColumnValue to bRetval
54588>>>        End
54588>>>>
54588>>>        Close hTable
54589>>>
54589>>>        Function_Return (Err = False)
54590>>>    End_Function
54591>>>
54591>>>    // Adds a column name to the passed table number.
54591>>>    Function ApiColumnInsert String sDriverIDFrom Handle hTable Integer iColumn String sFieldName Integer iType Integer iLength Integer iPrec Boolean bIsSQLType Returns Boolean
54593>>>        Integer iCount iFile iPrecision iNumberOfFields iDbType
54593>>>        Boolean bExists bOK bIsDateType bIsSQLTypeTo
54593>>>        String sDdSrcPath sTableName
54593>>>
54593>>>        Get UtilColumnExists hTable sFieldName to bExists
54594>>>        Move False to Err
54595>>>        If (bExists = True) Begin
54597>>>            Function_Return False
54598>>>        End
54598>>>>
54598>>>        If (num_arguments > 4) Begin
54600>>>            Move iPrec to iPrecision
54601>>>        End
54601>>>>
54601>>>        If (iType < -1490) Begin
54603>>>            Move (iType + 1500) to iType
54604>>>        End
54604>>>>
54604>>>
54604>>>        Get AutoConnectionIDLogin to bOK
54605>>>        Move False to Err
54606>>>        Get _UtilTableIsSql hTable to bIsSQLTypeTo
54607>>>        // If one of the two tables are SQL and the other Embedded we need to "translate"
54607>>>        // data types between Embedded and SQL, else we can't compare the data types. 
54607>>>        Get piDbType to iDbType
54608>>>        If (bIsSQLTypeTo = False) Begin
54610>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iType iLength to iType
54611>>>            If (iType = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
54613>>>                Move DF_DATE to iType
54614>>>            End
54614>>>>
54614>>>        End
54614>>>>
54614>>>
54614>>>        // Structure_start will change the value of hTable...
54614>>>        Move hTable to iFile
54615>>>        Get OpenTableExclusive iFile to bOK
54616>>>        If (bOK = False) Begin
54618>>>            Function_Return False
54619>>>        End
54619>>>>
54619>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iFile to iNumberOfFields
54622>>>
54622>>>        // If the passed column number is higher than the current number of fields
54622>>>        // in the table, this means we should _not_ insert a field but rather add
54622>>>        // a new field to the end:
54622>>>        If (iColumn > iNumberOfFields) Begin
54624>>>            Move 0 to iColumn
54625>>>        End
54625>>>>
54625>>>
54625>>>        Set Private.phCurrentTable to hTable
54626>>>        Set Private.piCurrentField to iColumn
54627>>>
54627>>>        Structure_Start iFile
54628>>>            Create_Field iFile At iColumn
54629>>>            Set_Attribute DF_FIELD_NAME            of iFile iColumn to sFieldName
54632>>>            If (bIsSQLTypeTo = False) Begin
54634>>>                Set_Attribute DF_FIELD_TYPE        of iFile iColumn to iType
54637>>>            End
54637>>>>
54637>>>            Else Begin
54638>>>                Set_Attribute DF_FIELD_NATIVE_TYPE of iFile iColumn to iType
54641>>>            End
54641>>>>
54641>>>            Get UtilColumnIsDateType iType bIsSQLTypeTo to bIsDateType
54642>>>            If (bIsDateType = False) Begin
54644>>>                Set_Attribute DF_FIELD_LENGTH       of iFile iColumn to (iLength + iPrecision)
54647>>>                Set_Attribute DF_FIELD_PRECISION    of iFile iColumn to iPrecision
54650>>>            End
54650>>>>
54650>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
54651>>>        Structure_End iFile DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54653>>>
54653>>>        Set Action_Text of ghoStatusPanel to ""
54654>>>        // If in development environment; create .fd file:
54654>>>        Open hTable
54656>>>        Get psDdSrcPath of (phoWorkspace(ghoApplication)) to sDDSrcPath
54657>>>        Get CountOfPaths of (phoWorkspace(ghoApplication)) sDDSrcPath to iCount
54658>>>        If (iCount > 1) Begin
54660>>>            Get PathAtIndex of (phoWorkspace(ghoApplication)) sDDSrcPath 1 to sDDSrcPath
54661>>>        End
54661>>>>
54661>>>        Get vFolderExists sDDSrcPath to bExists
54662>>>        If (bExists = True) Begin
54664>>>            Get vFolderFormat sDDSrcPath to sDDSrcPath
54665>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sTableName
54668>>>            Get _TableNameOnly sTableName to sTableName
54669>>>            Output_Aux_File DF_AUX_FILE_FD for hTable to (sDDSrcPath + sTableName + ".fd")
54671>>>        End
54671>>>>
54671>>>
54671>>>        // Check for a default value
54671>>>        Close hTable
54672>>>
54672>>>        Function_Return (Err = False)
54673>>>    End_Function
54674>>>
54674>>>    // To update all records for a table column with a fixed value.
54674>>>    Function ApiColumnUpdateValue Handle hTable String sFieldName String sColumnValue Returns Boolean
54676>>>        Integer iRecs iCurrErr iField iRecord
54676>>>        Boolean bRetval bOpen
54676>>>
54676>>>        Move 0 to iRecs
54677>>>        Move False to bRetval
54678>>>        Move Err to iCurrErr
54679>>>        Move False to Err
54680>>>
54680>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
54683>>>        If (bOpen = False) Begin
54685>>>            Open hTable
54687>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
54690>>>            If (bOpen = False) Begin
54692>>>                Function_Return bRetval
54693>>>            End
54693>>>>
54693>>>        End
54693>>>>
54693>>>
54693>>>        Field_Map hTable sFieldName to iField
54695>>>        If (iField <> 0) Begin
54697>>>            Set Private.phCurrentTable to hTable
54698>>>            Set Private.piCurrentField to iField
54699>>>            Clear hTable
54700>>>            Repeat
54700>>>>
54700>>>                Vfind hTable 0 GT
54702>>>                If (Found) Begin
54704>>>                    If (ghoStatusPanel <> 0) Begin
54706>>>                        Get_Field_Value hTable 0 to iRecord
54709>>>                        Send Update_StatusPanel of ghoStatusPanel (CS_DUF_UpdateVersion * String(iRecord))
54710>>>                    End
54710>>>>
54710>>>                    Reread hTable
54714>>>                        Set_Field_Value hTable iField to sColumnValue
54717>>>                        SaveRecord hTable
54718>>>                    Unlock
54719>>>>
54719>>>                End
54719>>>>
54719>>>           Until (not(Found))
54721>>>        End
54721>>>>
54721>>>
54721>>>        Move (Err = False) to bRetval
54722>>>        Move iCurrErr to Err
54723>>>
54723>>>        Function_Return bRetval
54724>>>    End_Function
54725>>>
54725>>>    // Note: This can only be used from within a Structure_Start/End construct.
54725>>>    Function ApiColumnsAddToTable Handle hTable tAPIColumn[] aColumns Boolean bCreating Returns Boolean
54727>>>        Integer iCount iSize iColumn iType iDataFlexType iIndex iDbType
54727>>>        Boolean bFieldExists bNativeType bIsSQLDriver bIsDAWSqlDriver bIsSqlTable bRecnumTable bIsOpen bIsDateType
54727>>>        String sFieldName sDriverID sTableName sDefaultValue
54727>>>
54727>>>        Get psDriverID to sDriverID
54728>>>        Get piDbType to iDbType
54729>>>        Get UtilTableHandleToString hTable to sTableName
54730>>>        Get IsSQLDriver    sDriverID to bIsSQLDriver
54731>>>        Get IsDAWSQLDriver sDriverID to bIsDAWSqlDriver
54732>>>        Get _UtilTableIsSql hTable to bIsSqlTable
54733>>>        If (bIsSqlTable = False and bCreating = True and bIsSQLDriver = True) Begin
54735>>>            Move True to bIsSqlTable
54736>>>        End
54736>>>>
54736>>>        Move False to bIsOpen
54737>>>        If (hTable > 0) Begin
54739>>>            Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
54742>>>        End
54742>>>>
54742>>>        If (bIsOpen = True) Begin
54744>>>            Get_Attribute DF_FILE_RECNUM_TABLE of hTable to bRecnumTable
54747>>>        End
54747>>>>
54747>>>        Else Begin
54748>>>            Get pbRecnum to bRecnumTable
54749>>>        End
54749>>>>
54749>>>
54749>>>        Move False to Err
54750>>>        Move (SizeOfArray(aColumns)) to iSize
54751>>>        Decrement iSize
54752>>>        for iCount from 0 to iSize
54758>>>>
54758>>>            Move aColumns[iCount].sFieldName to sFieldName
54759>>>            If (hTable > 0) Begin
54761>>>                Set Error_Report_Mode to DUF_ERROR_NO_REPORT
54762>>>                Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
54763>>>                Get_Attribute DF_FIELD_NAME of hTable iColumn to sFieldName
54766>>>                Move (Trim(sFieldName) <> "") to bFieldExists
54767>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
54768>>>                Send Trap_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
54769>>>            End
54769>>>>
54769>>>            Else Begin
54770>>>                Move False to bFieldExists
54771>>>            End
54771>>>>
54771>>>
54771>>>            If (bFieldExists = False) Begin
54773>>>                Move 0 to iColumn
54774>>>                Create_Field hTable At iColumn
54775>>>            End
54775>>>>
54775>>>            Else Begin
54776>>>                Move iCount to iColumn
54777>>>            End
54777>>>>
54777>>>
54777>>>            Set Private.piCurrentField to iColumn
54778>>>
54778>>>            Move                                        iColumn to aColumns[iCount].iFieldNumber
54779>>>            Set_Attribute DF_FIELD_NAME       of hTable iColumn to aColumns[iCount].sFieldName
54782>>>
54782>>>            Move aColumns[iCount].iType to iType
54783>>>            Move (not(iType < -1490)) to bNativeType
54784>>>            If (iType < -1490) Begin
54786>>>                Move (iType + 1500) to iType
54787>>>            End
54787>>>>
54787>>>
54787>>>            If (bIsSqlTable = True) Begin
54789>>>                If (aColumns[iCount].bIsSQLType = True) Begin
54791>>>                    Get UtilSQLColumnTypeToDataFlexType sDriverID iDbType iType aColumns[iCount].iLength to iDataFlexType
54792>>>//                    Set_Attribute DF_FIELD_TYPE          of hTable iColumn to iDataFlexType
54792>>>                    Set_Attribute DF_FIELD_NATIVE_TYPE   of hTable iColumn to iType
54795>>>                    Set_Attribute DF_FIELD_NULL_ALLOWED  of hTable iColumn to aColumns[iCount].bAllowNULL
54798>>>
54798>>>                    Move aColumns[iCount].sDefaultValue                    to sDefaultValue
54799>>>                    If (iDataFlexType = DF_BCD and Left(String(sDefaultValue), 1) <> "[") Begin
54801>>>                        Move ("[" + String(sDefaultValue) + "]") to sDefaultValue
54802>>>                    End
54802>>>>
54802>>>                    Set_Attribute DF_FIELD_DEFAULT_VALUE of hTable iColumn to sDefaultValue
54805>>>
54805>>>                End
54805>>>>
54805>>>                Else Begin
54806>>>                    Set_Attribute DF_FIELD_TYPE        of hTable iColumn to iType
54809>>>                End
54809>>>>
54809>>>            End
54809>>>>
54809>>>            Else Begin
54810>>>                If (bCreating = False) Begin
54812>>>                    Get UtilSQLColumnTypeToDataFlexType sDriverID iDbType iType aColumns[iCount].iLength to iType
54813>>>                    If (iType = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
54815>>>                        Move DF_DATE to iType
54816>>>                    End
54816>>>>
54816>>>                End
54816>>>>
54816>>>                Set_Attribute DF_FIELD_TYPE of hTable iColumn to iType
54819>>>            End
54819>>>>
54819>>>
54819>>>            Get UtilColumnIsDateType iType bIsSqlTable to bIsDateType
54820>>>            If (bIsDateType = False) Begin
54822>>>                Set_Attribute DF_FIELD_LENGTH     of hTable iColumn to aColumns[iCount].iLength
54825>>>                Set_Attribute DF_FIELD_PRECISION  of hTable iColumn to aColumns[iCount].iPrecision
54828>>>            End
54828>>>>
54828>>>
54828>>>            If (aColumns[iCount].iOptions iand C_tAPIColumn_Identity) Begin
54830>>>                Move 0 to iIndex
54831>>>                Create_Index hTable at iIndex
54832>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to 1
54835>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD   of hTable iIndex 1 to iColumn
54838>>>                Set_Attribute DF_FILE_PRIMARY_INDEX    of hTable iIndex to 1
54841>>>
54841>>>                // If we have an identity table - we must create a primary_key table.
54841>>>                If (bIsSqlTable = True) Begin
54843>>>                        Set_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable iIndex to True
54846>>>                        Set_Attribute DF_FIELD_IS_IDENTITY of hTable iColumn to True
54849>>>                End
54849>>>>
54849>>>            End
54849>>>>
54849>>>        Loop
54850>>>>
54850>>>
54850>>>        Function_Return (Err = False)
54851>>>    End_Function
54852>>>
54852>>>    // Changes a field type, length and precision for the passed table number and field name
54852>>>    Function ApiColumnChange Handle hTable String sFieldNameFrom Integer iTypeFrom Integer iLengthFrom Integer iPrec Returns Boolean
54854>>>        Integer iColumn iPrecFrom iTypeTo iLengthTo iPrecTo
54854>>>        Boolean bOK bIsSqlTable
54854>>>        String sFieldNameTo
54854>>>
54854>>>        If (num_arguments > 4) Begin
54856>>>            Move iPrec to iPrecFrom
54857>>>        End
54857>>>>
54857>>>        If (iTypeFrom < -1490) Begin
54859>>>            Move (iTypeFrom + 1500) to iTypeFrom
54860>>>        End
54860>>>>
54860>>>
54860>>>        Get AutoConnectionIDLogin to bOK
54861>>>        Move False to Err
54862>>>        Get OpenTableExclusive hTable to bOK
54863>>>        If (bOK = False) Begin
54865>>>            Function_Return False
54866>>>        End
54866>>>>
54866>>>
54866>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
54867>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
54868>>>        Field_Map hTable sFieldNameFrom to iColumn
54870>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
54871>>>        Send Trap_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
54872>>>        If (Err = True) Begin
54874>>>            Function_Return False
54875>>>        End
54875>>>>
54875>>>
54875>>>        Get_Attribute DF_FIELD_NAME                  of hTable iColumn to sFieldNameTo
54878>>>        Get _UtilTableIsSql hTable to bIsSqlTable
54879>>>        If (bIsSqlTable = False) Begin
54881>>>            Get_Attribute DF_FIELD_TYPE              of hTable iColumn to iTypeTo
54884>>>        End
54884>>>>
54884>>>        Else Begin
54885>>>            Get_Attribute DF_FIELD_NATIVE_TYPE       of hTable iColumn to iTypeTo
54888>>>        End
54888>>>>
54888>>>        // Let the driver decide the other values;
54888>>>        Get_Attribute DF_FIELD_LENGTH                of hTable iColumn to iLengthTo
54891>>>        Get_Attribute DF_FIELD_PRECISION             of hTable iColumn to iPrecTo
54894>>>
54894>>>        If (sFieldNameFrom = sFieldNameTo and iTypeFrom = iTypeTo and iLengthFrom = iLengthTo and iPrecFrom = iPrecTo) Begin
54896>>>            Function_Return False
54897>>>        End
54897>>>>
54897>>>
54897>>>        Set Private.phCurrentTable to hTable
54898>>>        Set Private.piCurrentField to iColumn
54899>>>
54899>>>        Structure_Start hTable
54900>>>            Set_Attribute DF_FIELD_NAME              of hTable iColumn to sFieldNameFrom
54903>>>            If (bIsSqlTable = False) Begin
54905>>>                Set_Attribute DF_FIELD_TYPE          of hTable iColumn to iTypeFrom
54908>>>            End
54908>>>>
54908>>>            Else Begin
54909>>>                Set_Attribute DF_FIELD_NATIVE_TYPE   of hTable iColumn to iTypeFrom
54912>>>            End
54912>>>>
54912>>>            Set_Attribute DF_FIELD_LENGTH            of hTable iColumn to (iLengthFrom + iPrecFrom)
54915>>>            Set_Attribute DF_FIELD_PRECISION         of hTable iColumn to iPrecFrom
54918>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
54919>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54921>>>
54921>>>        Set Action_Text of ghoStatusPanel to ""
54922>>>        Function_Return (Err = False)
54923>>>    End_Function
54924>>>
54924>>>    // Changes a field type, length and precision for the passed table number and field name
54924>>>    Function ApiColumnChangeByColumnNumber String sDriverIDFrom Handle hTable Boolean bIsSQLTableFrom Boolean bIsSQLTableTo String sFieldNameFrom Integer iColumn Integer iTypeFrom Integer iLengthFrom Integer iPrec Integer iOpt Returns Boolean
54926>>>        Integer iPrecFrom iTypeTo iLengthTo iPrecTo iDbType iOptionFrom iOptionTo iDataFlexType iIndex
54926>>>        Boolean bOK bCompareDate_DateTime bSkip bRecnumTable bIsSameDataType
54926>>>        String sFieldNameTo sDriverIDTo
54926>>>        tColumnType ColumnType
54926>>>        tColumnType ColumnType
54926>>>
54926>>>        Get pbCompareDate_DateTime to bCompareDate_DateTime
54927>>>        Get piDbType to iDbType
54928>>>        If (num_arguments > 4) Begin
54930>>>            Move iPrec to iPrecFrom
54931>>>            Move iOpt  to iOptionFrom
54932>>>        End
54932>>>>
54932>>>        If (iTypeFrom < -1490) Begin
54934>>>            Move (iTypeFrom + 1500) to iTypeFrom
54935>>>        End
54935>>>>
54935>>>
54935>>>        Get AutoConnectionIDLogin to bOK
54936>>>        Move False to Err
54937>>>        Close hTable
54938>>>        Get OpenTableExclusive hTable to bOK
54939>>>        If (bOK = False) Begin
54941>>>            Function_Return False
54942>>>        End
54942>>>>
54942>>>
54942>>>        Get_Attribute DF_FILE_DRIVER                of hTable         to sDriverIDTo
54945>>>        Get_Attribute DF_FILE_RECNUM_TABLE          of hTable         to bRecnumTable
54948>>>        Get UtilSQLColumnTypeToDataFlexType sDriverIDTo iDbType iTypeTo iLengthTo to iDataFlexType
54949>>>        If (iDataFlexType = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
54951>>>            Move DF_DATE to iDataFlexType
54952>>>        End
54952>>>>
54952>>>        Get_Attribute DF_FIELD_NAME                 of hTable iColumn to sFieldNameTo
54955>>>
54955>>>        If (bIsSQLTableTo = True) Begin
54957>>>                Get_Attribute DF_FIELD_NATIVE_TYPE  of hTable iColumn to iTypeTo
54960>>>        End
54960>>>>
54960>>>        Else Begin
54961>>>            Get_Attribute DF_FIELD_TYPE             of hTable iColumn to iTypeTo
54964>>>        End
54964>>>>
54964>>>
54964>>>        Get_Attribute DF_FIELD_LENGTH               of hTable iColumn to iLengthTo
54967>>>        Get_Attribute DF_FIELD_PRECISION            of hTable iColumn to iPrecTo
54970>>>            Get_Attribute DF_FIELD_IS_IDENTITY      of hTable iColumn to iOptionTo
54973>>>
54973>>>        // If one of the two tables are SQL and the other Embedded we need to "translate"
54973>>>        // data types between Embedded and SQL, else we can't compare the data types.
54973>>>        If (bIsSQLTableFrom = True and bIsSQLTableTo = False) Begin
54975>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iTypeFrom iLengthFrom to iTypeTo
54976>>>            If (iTypeTo = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
54978>>>                Move DF_DATE to iTypeTo  
54979>>>            End
54979>>>>
54979>>>        End
54979>>>>
54979>>>        Else If (bIsSQLTableFrom = False and bIsSQLTableTo = True) Begin
54982>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDTo   iDbType iTypeTo   iLengthTo   to iTypeFrom
54983>>>        End
54983>>>>
54983>>>        Move (iTypeFrom = iTypeTo) to bIsSameDataType
54984>>>
54984>>>        If (bCompareDate_DateTime = False) Begin
54986>>>            Move ((iTypeFrom = SQL_TYPE_DATE or iTypeFrom = SQL_TYPE_TIME or iTypeFrom = SQL_TYPE_TIMESTAMP) and (iTypeTo = SQL_TYPE_DATE or iTypeTo = SQL_TYPE_TIME or iTypeTo = SQL_TYPE_TIMESTAMP)) to bSkip
54987>>>            If (bSkip = True) Begin
54989>>>                If (sFieldNameFrom = sFieldNameTo and iLengthFrom = iLengthTo and iPrecFrom = iPrecTo and iOptionFrom = iOptionTo) Begin
54991>>>                    Function_Return True
54992>>>                End
54992>>>>
54992>>>            End
54992>>>>
54992>>>        End
54992>>>>
54992>>>        Else If (sFieldNameFrom = sFieldNameTo and iTypeFrom = iTypeTo and iLengthFrom = iLengthTo and iPrecFrom = iPrecTo and iOptionFrom = iOptionTo) Begin
54995>>>            Function_Return True
54996>>>        End
54996>>>>
54996>>>
54996>>>        Set Private.phCurrentTable to hTable
54997>>>        Set Private.piCurrentField to iColumn
54998>>>
54998>>>        Structure_Start hTable
54999>>>            If (sFieldNameFrom <> sFieldNameTo) Begin
55001>>>                Set_Attribute DF_FIELD_NAME             of hTable iColumn to sFieldNameFrom
55004>>>            End
55004>>>>
55004>>>
55004>>>            If (bIsSameDataType = False) Begin
55006>>>                Set_Attribute DF_FIELD_TYPE             of hTable iColumn to iDataFlexType
55009>>>                If (bIsSQLTableTo = True) Begin
55011>>>                        Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to iTypeFrom
55014>>>                End
55014>>>>
55014>>>            End
55014>>>>
55014>>>
55014>>>            If (iLengthFrom <> iLengthTo) Begin
55016>>>                Set_Attribute DF_FIELD_LENGTH           of hTable iColumn to iLengthFrom
55019>>>            End
55019>>>>
55019>>>            If (iPrecFrom <> iPrecTo) Begin
55021>>>                Set_Attribute DF_FIELD_PRECISION        of hTable iColumn to iPrecFrom
55024>>>            End
55024>>>>
55024>>>
55024>>>            If (bIsSQLTableTo = True and iOptionFrom =  C_tAPIColumn_Identity and iOptionTo <> C_tAPIColumn_Identity) Begin
55026>>>                // Can't set a recnum table to "DF_FIELD_IS_IDENTITY"
55026>>>                If (bRecnumTable = True) Begin
55028>>>                    Set_Attribute DF_FILE_RECNUM_TABLE  of hTable to False
55031>>>                End
55031>>>>
55031>>>
55031>>>                // We might need to create an index here.
55031>>>                // To be able to set the DF_FIELD_IS_IDENTITY the index must already exist, but it might not at this stage.
55031>>>                // This should probably fix that problem and if an adjustment is needed, it will get done with the normal
55031>>>                // index update checking logic.
55031>>>                Get_Attribute DF_FIELD_INDEX               of hTable iColumn to iIndex
55034>>>                If (iIndex = 0 and Uppercase(sFieldNameTo) <> "RECNUM") Begin
55036>>>                    Create_Index hTable At iIndex
55037>>>                    Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex   to 1
55040>>>                End
55040>>>>
55040>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD       of hTable iIndex 1 to iColumn
55043>>>                Set_Attribute DF_FILE_PRIMARY_INDEX        of hTable          to iIndex
55046>>>                    Set_Attribute DF_FIELD_IS_IDENTITY     of hTable iColumn  to True
55049>>>                If (bIsSQLTableTo = True) Begin
55051>>>                        Set_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable iIndex   to True
55054>>>                End
55054>>>>
55054>>>            End
55054>>>>
55054>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
55055>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55057>>>
55057>>>        Set Action_Text of ghoStatusPanel to ""
55058>>>        Function_Return (Err = False)
55059>>>    End_Function
55060>>>
55060>>>    Function ApiColumnChangeMainIndex Handle hTable Integer iIndex Integer iColumn Returns Boolean
55062>>>        Boolean bOK
55062>>>
55062>>>        Get AutoConnectionIDLogin to bOK
55063>>>        Move False to Err
55064>>>        Get OpenTableExclusive hTable to bOK
55065>>>        If (bOK = False) Begin
55067>>>            Function_Return False
55068>>>        End
55068>>>>
55068>>>
55068>>>        Structure_Start hTable
55069>>>            Set_Attribute DF_FIELD_INDEX of hTable iColumn to iIndex
55072>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
55073>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55075>>>
55075>>>        Set Action_Text of ghoStatusPanel to ""
55076>>>        Function_Return (Err = False)
55077>>>    End_Function
55078>>>
55078>>>    // To move an existing field to another position in a table.
55078>>>    Function ApiColumnMove Handle hTable Integer iOld Integer iNew Boolean bIsSQLType Integer iLength Integer iPrecision Returns Boolean
55080>>>        String sColumn sDriverID
55080>>>        Integer iType iSQLType
55080>>>        Boolean bOK bIsDate
55080>>>
55080>>>        Close hTable
55081>>>        Get AutoConnectionIDLogin to bOK
55082>>>        Get OpenTableExclusive hTable to bOK
55083>>>        If (bOK = False) Begin
55085>>>            Function_Return False
55086>>>        End
55086>>>>
55086>>>
55086>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
55089>>>        If (sDriverID = DFBTRDRV_ID) Begin
55091>>>            Error DFERR_PROGRAM "Function 'ColumnMove' is not supported for the Pervasive database."
55092>>>>
55092>>>            Function_Return False
55093>>>        End
55093>>>>
55093>>>
55093>>>        Set Action_Text of ghoStatusPanel to "Restructures table..."
55094>>>        Get_Attribute DF_FIELD_NAME of hTable iOld to sColumn
55097>>>        Get_Attribute DF_FIELD_TYPE of hTable iOld to iType
55100>>>        If (bIsSQLType = True) Begin
55102>>>            Get_Attribute DF_FIELD_NATIVE_TYPE of hTable iOld to iSQLType
55105>>>            Get UtilColumnIsDateType iSQLType bIsSQLType  to bIsDate
55106>>>        End
55106>>>>
55106>>>        Else Begin
55107>>>            Get UtilColumnIsDateType iType bIsSQLType  to bIsDate
55108>>>        End
55108>>>>
55108>>>
55108>>>        Set Private.phCurrentTable to hTable
55109>>>        Set Private.piCurrentField to iOld
55110>>>
55110>>>        Move False to Err
55111>>>
55111>>>        Structure_Start hTable
55112>>>            Delete_Field hTable iOld
55113>>>            Create_Field hTable At iNew
55114>>>            
55114>>>            // This one is the crucial line:
55114>>>            Set_Attribute DF_FIELD_OLD_NUMBER of hTable iNew to iOld
55117>>>            Set_Attribute DF_FIELD_NAME of hTable iNew to sColumn
55120>>>            
55120>>>            // If SQL table it is important that we don't try to change the field type, as MS-SQL then will generate an error.
55120>>>            If (bIsSQLType = True and bIsDate = False) Begin
55122>>>                Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iNew to iSQLType
55125>>>            End
55125>>>>
55125>>>            If (bIsDate = False) Begin
55127>>>                Set_Attribute DF_FIELD_TYPE   of hTable iNew to iType
55130>>>                Set_Attribute DF_FIELD_LENGTH of hTable iNew to iLength
55133>>>            End
55133>>>>
55133>>>            If (iType = DF_BCD) Begin
55135>>>                Set_Attribute DF_FIELD_PRECISION of hTable iNew to iPrecision
55138>>>            End
55138>>>>
55138>>>
55138>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55140>>>
55140>>>        Set Action_Text of ghoStatusPanel to ""
55141>>>        Move (not(Err)) to bOK
55142>>>        Move False to Err
55143>>>        Move 0 to LastErr
55144>>>        Function_Return bOK
55145>>>    End_Function 
55146>>>    
55146>>>    // Deletes a column name for the passed table number (and column number).
55146>>>    Function ApiColumnRemove Handle hTable String sFieldName Returns Boolean
55148>>>        Integer iColumn
55148>>>        Boolean bOK
55148>>>
55148>>>        Get AutoConnectionIDLogin to bOK
55149>>>        Move False to Err
55150>>>        Close hTable
55151>>>        Get OpenTableExclusive hTable to bOK
55152>>>        If (bOK = False) Begin
55154>>>            Function_Return False
55155>>>        End
55155>>>>
55155>>>
55155>>>        If (not(Err)) Begin
55157>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55158>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
55159>>>            Field_Map hTable sFieldName to iColumn
55161>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
55162>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
55163>>>            If (iColumn = 0) Begin
55165>>>                Move 0 to LastErr
55166>>>                Function_Return False
55167>>>            End
55167>>>>
55167>>>            Move False to Err
55168>>>
55168>>>            Set Private.phCurrentTable to hTable
55169>>>            Set Private.piCurrentField to iColumn
55170>>>
55170>>>            Structure_Start hTable
55171>>>                Delete_Field hTable iColumn
55172>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
55173>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55175>>>            Set Action_Text of ghoStatusPanel to ""
55176>>>        End
55176>>>>
55176>>>        Else Begin
55177>>>            Error DFERR_PROGRAM ("The table number:" * String(hTable) * "could not be opened exclusiv. This indicates the table is in use!")
55178>>>>
55178>>>        End
55178>>>>
55178>>>
55178>>>        Function_Return (Err = False)
55179>>>    End_Function
55180>>>
55180>>>    // Renames a field for the passed table number & old field name & new field name
55180>>>    // Returns True if no errors occured.
55180>>>    // Sample usage:
55180>>>    //   Get ColumnRename Quote.File_Number "ID#" "ID" to bOK
55180>>>    Function ApiColumnRename Integer hTable String sOldFieldName String sNewFieldName Returns Boolean
55182>>>        Integer iField
55182>>>        Boolean bOK bExists bIsOpen
55182>>>
55182>>>        Get UtilColumnExists hTable sNewFieldName to bExists
55183>>>        If (bExists = True) Begin
55185>>>            Function_Return False
55186>>>        End
55186>>>>
55186>>>
55186>>>        // Note: The Field_Map command does _not_ work if the table has been
55186>>>        //       opened exclusively, so we first open it in normal mode.
55186>>>        Close hTable
55187>>>        Open hTable
55189>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
55192>>>        If (bIsOpen = False) Begin
55194>>>            Function_Return False
55195>>>        End
55195>>>>
55195>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55196>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
55197>>>        Field_Map hTable sOldFieldName to iField
55199>>>        Send Trap_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
55200>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
55201>>>
55201>>>        Get AutoConnectionIDLogin to bOK
55202>>>        Get OpenTableExclusive hTable to bOK
55203>>>        If (bOK = False) Begin
55205>>>            Function_Return False
55206>>>        End
55206>>>>
55206>>>
55206>>>        Move False to Err
55207>>>        Send Ignore_Error of Error_Object_Id DFERR_DUPLICATE_FIELDNAME
55208>>>        Set Private.phCurrentTable to hTable
55209>>>        Set Private.piCurrentField to iField
55210>>>
55210>>>        If (iField > 0) Begin
55212>>>            Structure_Start hTable
55213>>>                Set_Attribute DF_FIELD_NAME of hTable iField to sNewFieldName
55216>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
55217>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55219>>>        End
55219>>>>
55219>>>        Else Begin
55220>>>            Move 0 to LastErr
55221>>>            Move False to Err
55222>>>        End
55222>>>>
55222>>>
55222>>>        Set Action_Text of ghoStatusPanel to ""
55223>>>        Send Trap_Error of Error_Object_Id DFERR_DUPLICATE_FIELDNAME
55224>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
55225>>>
55225>>>        Function_Return (Err = False)
55226>>>    End_Function
55227>>>
55227>>>    Function UtilColumnsCheckForInserts Handle hTable tAPIColumnCompare[] aAPIColumnCompare Returns tAPIColumnCompare[]
55229>>>        tAPIColumnCompare[] aAPIColumnsToInsert
55229>>>        tAPIColumnCompare[] aAPIColumnsToInsert
55230>>>        Integer iSize iCount iItem iFieldTo iNumberOfFieldsTo iColumnNumber
55230>>>        Boolean bRenameField
55230>>>
55230>>>        Open hTable
55232>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55233>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
55234>>>        Move (SizeOfArray(aAPIColumnCompare)) to iSize
55235>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumberOfFieldsTo
55238>>>        Move (iSize max iNumberOfFieldsTo) to iSize
55239>>>        Decrement iSize
55240>>>        for iCount from 0 to iSize
55246>>>>
55246>>>            If (Uppercase(aAPIColumnCompare[iCount].sFieldNameFrom) <> Uppercase(aAPIColumnCompare[iCount].sFieldNameTo)) Begin
55248>>>                Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55249>>>
55249>>>                Field_Map hTable aAPIColumnCompare[iCount].sFieldNameFrom to iFieldTo
55251>>>                If (aAPIColumnCompare[iCount].bExistsFrom = True and iFieldTo = 0) Begin
55253>>>                    Get UtilColumnExistsWithOtherNumber aAPIColumnCompare iCount to iColumnNumber
55254>>>                    Get UtilColumnShouldBeRenamed aAPIColumnCompare[iCount]      to bRenameField
55255>>>                    If (iColumnNumber = -1 and bRenameField = False) Begin
55257>>>                        Move aAPIColumnCompare[iCount].iFieldNumber     to aAPIColumnsToInsert[iItem].iFieldNumber
55258>>>                        Move aAPIColumnCompare[iCount].sFieldNameFrom   to aAPIColumnsToInsert[iItem].sFieldNameFrom
55259>>>                        Move aAPIColumnCompare[iCount].iTypeFrom        to aAPIColumnsToInsert[iItem].iTypeFrom
55260>>>                        Move aAPIColumnCompare[iCount].sTypeFrom        to aAPIColumnsToInsert[iItem].sTypeFrom
55261>>>                        Move aAPIColumnCompare[iCount].iLengthFrom      to aAPIColumnsToInsert[iItem].iLengthFrom
55262>>>                        Move aAPIColumnCompare[iCount].iPrecisionFrom   to aAPIColumnsToInsert[iItem].iPrecisionFrom
55263>>>                        Move aAPIColumnCompare[iCount].bIsSQLTypeFrom   to aAPIColumnsToInsert[iItem].bIsSQLTypeFrom
55264>>>                        Move aAPIColumnCompare[iCount].bIsSQLTypeTo     to aAPIColumnsToInsert[iItem].bIsSQLTypeTo
55265>>>                        Move True                                       to aAPIColumnsToInsert[iItem].bExistsFrom
55266>>>                        Move False                                      to aAPIColumnsToInsert[iItem].bExistsTo
55267>>>                        Increment iItem
55268>>>                    End
55268>>>>
55268>>>                End
55268>>>>
55268>>>            End
55268>>>>
55268>>>        Loop
55269>>>>
55269>>>
55269>>>        Move False to Err
55270>>>        Move 0 to LastErr
55271>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
55272>>>        Function_Return aAPIColumnsToInsert
55273>>>    End_Function
55274>>>
55274>>>    Function UtilColumnsInsert String sDriverIDFrom Handle hTable tAPIColumnCompare[] aAPIColumnsToInsert Returns Boolean
55276>>>        Integer iSize iCount
55276>>>        Boolean bOK
55276>>>        tAPIColumn[] aColumnsTo
55276>>>        tAPIColumn[] aColumnsTo
55277>>>        tAPIColumnCompare[] aAPIColumnCompare
55277>>>        tAPIColumnCompare[] aAPIColumnCompare
55278>>>
55278>>>        Move (SizeOfArray(aAPIColumnsToInsert)) to iSize
55279>>>        If (iSize = 0) Begin
55281>>>            Function_Return True
55282>>>        End
55282>>>>
55282>>>
55282>>>        Move False to Err
55283>>>        Decrement iSize
55284>>>        for iCount from 0 to iSize
55290>>>>
55290>>>            Get ApiColumnInsert sDriverIDFrom hTable aAPIColumnsToInsert[iCount].iFieldNumber aAPIColumnsToInsert[iCount].sFieldNameFrom aAPIColumnsToInsert[iCount].iTypeFrom aAPIColumnsToInsert[iCount].iLengthFrom aAPIColumnsToInsert[iCount].iPrecisionFrom aAPIColumnsToInsert[iCount].bIsSQLTypeFrom to bOK
55291>>>        Loop
55292>>>>
55292>>>
55292>>>        Function_Return bOK
55293>>>    End_Function
55294>>>
55294>>>    // Returns a struct array with fields that has the same names but different field numbers.
55294>>>    Function UtilColumnsCheckForMoves Handle hTable tAPIColumnCompare[] aAPIColumnCompare Returns tAPIColumnCompare[]
55296>>>        tAPIColumnCompare[] aAPIColumnsToMove
55296>>>        tAPIColumnCompare[] aAPIColumnsToMove
55297>>>        Integer iSize iCount iItem iShouldMove
55297>>>
55297>>>        Move 0 to iItem
55298>>>        Move (SizeOfArray(aAPIColumnCompare)) to iSize
55299>>>        Decrement iSize
55300>>>        for iCount from 0 to iSize
55306>>>>
55306>>>            If (Uppercase(aAPIColumnCompare[iCount].sFieldNameFrom) <> Uppercase(aAPIColumnCompare[iCount].sFieldNameTo)) Begin
55308>>>                Get UtilColumnExistsWithOtherNumber aAPIColumnCompare iCount to iShouldMove
55309>>>                If (iShouldMove <> -1) Begin
55311>>>                    Move aAPIColumnCompare[iCount] to aAPIColumnsToMove[iItem]
55312>>>                    Move iShouldMove               to aAPIColumnsToMove[iItem].iFieldNumberTo
55313>>>                    Move aAPIColumnCompare[iShouldMove - 1].sFieldNameTo to aAPIColumnsToMove[iItem].sFieldNameTo
55314>>>                    Increment iItem
55315>>>                End
55315>>>>
55315>>>            End
55315>>>>
55315>>>        Loop
55316>>>>
55316>>>
55316>>>        Move False to Err
55317>>>        Move 0 to LastErr
55318>>>        Function_Return aAPIColumnsToMove
55319>>>    End_Function
55320>>>
55320>>>    Function UtilColumnsMove Handle hTable tAPIColumn[] aColumnsFrom tAPIColumn[] aColumnsTo tAPIColumnCompare[] aAPIColumnsToMove Returns Boolean
55322>>>        Integer iSize iCount
55322>>>        Boolean bOK
55322>>>        tAPIColumnCompare[] aAPIColumnCompare
55322>>>        tAPIColumnCompare[] aAPIColumnCompare
55323>>>
55323>>>        Move (SizeOfArray(aAPIColumnsToMove)) to iSize
55324>>>        If (iSize = 0) Begin
55326>>>            Function_Return True
55327>>>        End
55327>>>>
55327>>>
55327>>>        Move False to Err
55328>>>        Decrement iSize
55329>>>        for iCount from 0 to iSize
55335>>>>
55335>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55336>>>            If (aAPIColumnsToMove[iCount].bExistsFrom = True and aAPIColumnsToMove[iCount].bExistsTo = True) Begin
55338>>>                Get ApiColumnMove hTable aAPIColumnsToMove[iCount].iFieldNumberTo aAPIColumnsToMove[iCount].iFieldNumber aAPIColumnsToMove[iCount].bIsSQLTypeFrom aAPIColumnsToMove[iCount].iLengthFrom aAPIColumnsToMove[iCount].iPrecisionFrom to bOK
55339>>>                If (bOK = True) Begin
55341>>>                    Get UtilColumnsStructFill hTable to aColumnsTo
55342>>>                    Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
55343>>>                    Get UtilColumnsCheckForMoves hTable aAPIColumnCompare to aAPIColumnsToMove
55344>>>                    If (SizeOfArray(aAPIColumnsToMove)) Begin
55346>>>                        Move (SizeOfArray(aAPIColumnsToMove)) to iSize
55347>>>                        Decrement iSize
55348>>>                        Move 0 to iCount
55349>>>                    End
55349>>>>
55349>>>                End
55349>>>>
55349>>>                Else Begin
55350>>>                    Move iSize to iCount // We're out of here! Else there will be an error generated for each field.
55351>>>                End
55351>>>>
55351>>>            End
55351>>>>
55351>>>        Loop
55352>>>>
55352>>>
55352>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
55353>>>        If (LastErr = DFERR_ARRAY_INDEX_OUT_OF_BOUNDS) Begin
55355>>>            Move 0 to LastErr
55356>>>        End
55356>>>>
55356>>>        Function_Return bOK
55357>>>    End_Function
55358>>>
55358>>>    // Takes a tAPIColumnCompare struct as parameter and returns True if;
55358>>>    // - Field Numbers, Data Types, Lengths and Precisions are all equal.
55358>>>    // - The "FROM" field name is <> "TO" field name
55358>>>    // - The "FROM" field name also exists in the "TO" table; or the "TO" is part
55358>>>    //   of the "FROM" field name. E.g. "FROM" = LATEST_REPL_COST_DATE, "TO" = Latest_Repl_Cos would results in a TRUE.
55358>>>    Function UtilColumnShouldBeRenamed tAPIColumnCompare aAPIColumnCompare Returns Boolean
55360>>>        Boolean bShouldRename
55360>>>        String sFieldNameFrom sFieldNameTo
55360>>>
55360>>>        Move (Uppercase(aAPIColumnCompare.sFieldNameFrom)) to sFieldNameFrom
55361>>>        Move (Uppercase(aAPIColumnCompare.sFieldNameTo))   to sFieldNameTo
55362>>>        If (sFieldNameFrom = sFieldNameTo) Begin
55364>>>            Function_Return False
55365>>>        End
55365>>>>
55365>>>
55365>>>        Move (aAPIColumnCompare.bExistsFrom    = aAPIColumnCompare.bExistsTo      and ;              aAPIColumnCompare.iFieldNumber   = aAPIColumnCompare.iFieldNumberTo and ;              aAPIColumnCompare.iTypeFrom      = aAPIColumnCompare.iTypeTo        and ;              aAPIColumnCompare.iLengthFrom    = aAPIColumnCompare.iLengthTo      and ;              aAPIColumnCompare.iPrecisionFrom = aAPIColumnCompare.iPrecisionTo   and ;              aAPIColumnCompare.iOptionsFrom   = aAPIColumnCompare.iOptionsTo) to bShouldRename
55366>>>//        If (bShouldRename = False) Begin
55366>>>//            Function_Return False
55366>>>//        End
55366>>>//
55366>>>//        If (sFieldNameFrom contains sFieldNameTo) Begin
55366>>>//            Function_Return True
55366>>>//        End
55366>>>
55366>>>        Function_Return bShouldRename
55367>>>    End_Function
55368>>>
55368>>>    // Returns -1 if the passed iColumn number doesn't exist with the same name in the aAPIColumnCompare struct array.
55368>>>    // Else it returns the column/field number of the field that exists in another position.
55368>>>    Function UtilColumnExistsWithOtherNumber tAPIColumnCompare[] aAPIColumnCompare Integer iColumn Returns Integer
55370>>>        Integer iCount iSize iRetval
55370>>>        String sFieldNameFrom
55370>>>
55370>>>        Move -1 to iRetval
55371>>>        If (aAPIColumnCompare[iColumn].bExistsFrom = False or aAPIColumnCompare[iColumn].bExistsTo = False) Begin
55373>>>            Function_Return iRetval
55374>>>        End
55374>>>>
55374>>>
55374>>>        Move (Uppercase(aAPIColumnCompare[iColumn].sFieldNameFrom)) to sFieldNameFrom
55375>>>        Move (SizeOfArray(aAPIColumnCompare)) to iSize
55376>>>        Decrement iSize
55377>>>        for iCount from 0 to iSize
55383>>>>
55383>>>            // We're only interested in fields other than the passed field/column number:
55383>>>            If (iCount <> iColumn) Begin
55385>>>                If (Uppercase(aAPIColumnCompare[iCount].sFieldNameTo) = sFieldNameFrom) Begin
55387>>>                    Move (iCount + 1) to iRetval
55388>>>                End
55388>>>>
55388>>>            End
55388>>>>
55388>>>        Loop
55389>>>>
55389>>>
55389>>>        Move 0 to LastErr
55390>>>        Function_Return iRetval
55391>>>    End_Function
55392>>>
55392>>>    Function UtilColumnsCheckForRenames Handle hTable tAPIColumnCompare[] aAPIColumnCompare Returns tAPIColumnCompare[]
55394>>>        tAPIColumnCompare[] aAPIColumnsToRename
55394>>>        tAPIColumnCompare[] aAPIColumnsToRename
55395>>>        Integer iSize iCount iItem iFieldTo iShouldMove
55395>>>        Boolean bRenameField
55395>>>
55395>>>        Open hTable
55397>>>        Move 0 to iItem
55398>>>        Move (SizeOfArray(aAPIColumnCompare)) to iSize
55399>>>        Decrement iSize
55400>>>        for iCount from 0 to iSize
55406>>>>
55406>>>            If (Uppercase(aAPIColumnCompare[iCount].sFieldNameFrom) <> Uppercase(aAPIColumnCompare[iCount].sFieldNameTo)) Begin
55408>>>                // Check if the field exists in another position (other field number)
55408>>>                Get UtilColumnExistsWithOtherNumber aAPIColumnCompare iCount to iShouldMove
55409>>>                Get UtilColumnShouldBeRenamed aAPIColumnCompare[iCount] to bRenameField
55410>>>                If (aAPIColumnCompare[iCount].bExistsFrom = True and iShouldMove = -1 and bRenameField = True) Begin
55412>>>                    Move aAPIColumnCompare[iCount].iFieldNumber     to aAPIColumnsToRename[iItem].iFieldNumber
55413>>>                    Move iFieldTo                                   to aAPIColumnsToRename[iItem].iFieldNumberTo
55414>>>                    Move aAPIColumnCompare[iCount].sFieldNameFrom   to aAPIColumnsToRename[iItem].sFieldNameFrom
55415>>>                    Move aAPIColumnCompare[iCount].sFieldNameTo     to aAPIColumnsToRename[iItem].sFieldNameTo
55416>>>                    Increment iItem
55417>>>                End
55417>>>>
55417>>>            End
55417>>>>
55417>>>        Loop
55418>>>>
55418>>>
55418>>>        Move False to Err
55419>>>        Move 0 to LastErr
55420>>>        Function_Return aAPIColumnsToRename
55421>>>    End_Function
55422>>>
55422>>>    Function UtilColumnsRename Handle hTable tAPIColumnCompare[] aAPIColumnsToRename Returns Boolean
55424>>>        Integer iSize iCount
55424>>>        Boolean bOK
55424>>>        tAPIColumn[] aColumnsTo
55424>>>        tAPIColumn[] aColumnsTo
55425>>>        tAPIColumnCompare[] aAPIColumnCompare
55425>>>        tAPIColumnCompare[] aAPIColumnCompare
55426>>>
55426>>>        Move (SizeOfArray(aAPIColumnsToRename)) to iSize
55427>>>        If (iSize = 0) Begin
55429>>>            Function_Return True
55430>>>        End
55430>>>>
55430>>>
55430>>>        Move False to Err
55431>>>        Decrement iSize
55432>>>        For iCount from 0 to iSize
55438>>>>
55438>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55439>>>            Get ApiColumnRename hTable aAPIColumnsToRename[iCount].sFieldNameTo aAPIColumnsToRename[iCount].sFieldNameFrom to bOK
55440>>>        Loop
55441>>>>
55441>>>
55441>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
55442>>>        Function_Return bOK
55443>>>    End_Function
55444>>>
55444>>>    Function UtilColumnIsDateType Integer iType Boolean bIsSQLTableTo Returns Boolean
55446>>>        Boolean bDateType
55446>>>
55446>>>        If (bIsSQLTableTo = True) Begin
55448>>>            Move (iType = SQL_DATE or iType = SQL_TYPE_DATE or iType = SQL_TYPE_TIMESTAMP or iType = SQL_TYPE_TIMESTAMP2) to bDateType
55449>>>        End
55449>>>>
55449>>>        Else Begin
55450>>>            Move (iType = DF_DATE or iType = DF_DATETIME) to bDateType
55451>>>        End
55451>>>>
55451>>>
55451>>>        Function_Return bDateType
55452>>>    End_Function
55453>>>
55453>>>    Function ApiColumnsUpdate String sDriverIDFrom Handle hTable Boolean bIsSQLTableFrom tAPIColumn[] aColumnsFrom tAPIColumn[] aColumnsTo Boolean bCompareDate_DateTime Returns Boolean
55455>>>        Integer iCount iColumns iColumn iTypeFrom iTypeTo iDataFlexType iIndex iLengthFrom iLengthTo iPrecisionFrom iPrecisionTo iOptionFrom iOptionTo iDbType
55455>>>        Integer iCount2 iColumn2
55455>>>        Handle hFile
55455>>>        Boolean bFieldExistsFrom bFieldExistsTo bIsSQLDriver bIsSame bOK bSkip
55455>>>        Boolean bRecnum bIsSQLTableTo bRecnumTable bIsOpen bSkipTypeChange bIsDateType
55455>>>        String sFieldNameFrom sFieldNameTo sDriverIDTo sDefaultValue
55455>>>        tAPIColumnCompare[] aAPIColumnCompare aApiInsertColumns aAPIMoveColumns aAPIRenameColumns aAPIRemoveColumns
55455>>>        tAPIColumnCompare[] aAPIColumnCompare aApiInsertColumns aAPIMoveColumns aAPIRenameColumns aAPIRemoveColumns
55460>>>        tColumnType ColumnType
55460>>>        tColumnType ColumnType
55460>>>
55460>>>        Move False to Err
55461>>>        Close hTable
55462>>>        Get OpenTableExclusive hTable to bIsOpen
55463>>>        If (bIsOpen = False) Begin
55465>>>            Error DFERR_PROGRAM ("Function 'ApiColumnsUpdate'. Can't open table number:" * String(hTable))
55466>>>>
55466>>>            Function_Return False
55467>>>        End 
55467>>>>
55467>>>        
55467>>>        Get piDbType to iDbType
55468>>>        Get_Attribute DF_FILE_RECNUM_TABLE of hTable to bRecnumTable
55471>>>        Move bIsSQLTableFrom to bIsSQLDriver
55472>>>        Get _UtilTableIsSql hTable to bIsSQLTableTo
55473>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverIDTo
55476>>>
55476>>>        Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
55477>>>
55477>>>        // Before we start to change the table we need to do three things;
55477>>>        // 1) Insert any new fields
55477>>>        Get UtilColumnsCheckForInserts hTable aAPIColumnCompare to aApiInsertColumns
55478>>>        If (SizeOfArray(aApiInsertColumns)) Begin
55480>>>            Get UtilColumnsInsert sDriverIDFrom hTable aApiInsertColumns to bOK
55481>>>            If (bOK = False) Begin
55483>>>                Function_Return False
55484>>>            End
55484>>>>
55484>>>            // Update info with changes made.
55484>>>            Get UtilColumnsStructFill hTable to aColumnsTo
55485>>>            Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
55486>>>        End
55486>>>>
55486>>>
55486>>>        // 2) Move fields with same names
55486>>>        Get UtilColumnsCheckForMoves hTable aAPIColumnCompare to aAPIMoveColumns
55487>>>        If (SizeOfArray(aAPIMoveColumns)) Begin
55489>>>            Get UtilColumnsMove hTable aColumnsFrom aColumnsTo aAPIMoveColumns to bOK
55490>>>            If (bOK = False) Begin
55492>>>                Function_Return False
55493>>>            End
55493>>>>
55493>>>            Get UtilColumnsStructFill hTable to aColumnsTo
55494>>>            Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
55495>>>        End
55495>>>>
55495>>>        
55495>>>        // 3) Rename fields
55495>>>        Get UtilColumnsCheckForRenames hTable aAPIColumnCompare to aAPIRenameColumns
55496>>>        If (SizeOfArray(aAPIRenameColumns)) Begin
55498>>>            Get UtilColumnsRename hTable aAPIRenameColumns to bOK
55499>>>            If (bOK = False) Begin
55501>>>                Function_Return False
55502>>>            End
55502>>>>
55502>>>            Get UtilColumnsStructFill hTable to aColumnsTo
55503>>>            Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
55504>>>        End
55504>>>>
55504>>>
55504>>>        // Note: Fields will be removed if needed in the Structure_Start/End below.
55504>>>        // Get utilColumnsCheckForRemoves hTable aAPIColumnCompare to aAPIRemoveColumns
55504>>>
55504>>>        // If any of the fields were changed by "Insert", "Rename" or "Move", we need to compare the fields again:
55504>>>        If (SizeOfArray(aApiInsertColumns) or SizeOfArray(aAPIRenameColumns) or SizeOfArray(aAPIMoveColumns)) Begin
55506>>>            Get UtilColumnsCompare sDriverIDFrom sDriverIDTo bIsSQLTableFrom bIsSQLTableTo aAPIColumnCompare bCompareDate_DateTime to bIsSame
55507>>>            If (bIsSame = True) Begin
55509>>>                Function_Return True
55510>>>            End
55510>>>>
55510>>>        End
55510>>>>
55510>>>
55510>>>        Move False to Err
55511>>>        // We can now continue to make standard field changes:
55511>>>        Get OpenTableExclusive hTable to bIsOpen
55512>>>        Set Private.phCurrentTable to hTable
55513>>>        Move hTable to hFile
55514>>>        Structure_Start hFile sDriverIDTo
55515>>>
55515>>>            Move (SizeOfArray(aAPIColumnCompare)) to iColumns
55516>>>            Decrement iColumns
55517>>>            for iCount from 0 to iColumns
55523>>>>
55523>>>                Send DoAdvance of ghoProgressBar
55524>>>
55524>>>                Move aAPIColumnCompare[iCount].iFieldNumber to iColumn
55525>>>                Set Private.piCurrentField                  to iColumn
55526>>>                Get UtilColumnCompare sDriverIDFrom sDriverIDTo bIsSQLTableFrom aAPIColumnCompare[iCount].bIsSQLTypeTo aAPIColumnCompare[iCount] bCompareDate_DateTime to bIsSame
55527>>>                If (bIsSame = False) Begin
55529>>>
55529>>>                    Move aAPIColumnCompare[iCount].bExistsFrom          to bFieldExistsFrom
55530>>>                    If (bFieldExistsFrom = True) Begin
55532>>>                        Move aAPIColumnCompare[iCount].bExistsTo        to bFieldExistsTo
55533>>>                        Move aAPIColumnCompare[iCount].sFieldNameFrom   to sFieldNameFrom
55534>>>                        Move aAPIColumnCompare[iCount].iLengthFrom      to iLengthFrom
55535>>>                        Move aAPIColumnCompare[iCount].iPrecisionFrom   to iPrecisionFrom
55536>>>                        Move aAPIColumnCompare[iCount].iOptionsFrom     to iOptionFrom
55537>>>                        Move aAPIColumnCompare[iCount].iTypeFrom        to iTypeFrom
55538>>>
55538>>>                        Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iTypeFrom iLengthFrom to iDataFlexType
55539>>>                        If (iTypeFrom < -1490) Begin
55541>>>                            Move (iTypeFrom + 1500)                     to iTypeFrom
55542>>>                        End
55542>>>>
55542>>>
55542>>>                        // If one of the two tables are SQL and the other Embedded we need to "translate"
55542>>>                        // data types between Embedded and SQL, else we can't compare the data types.
55542>>>                        If (bIsSQLTableFrom = True and bIsSQLTableTo = False) Begin
55544>>>                            Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iTypeFrom iLengthFrom to iTypeFrom
55545>>>                            If (iTypeFrom = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
55547>>>                                Move DF_DATE to iTypeFrom
55548>>>                            End
55548>>>>
55548>>>                        End
55548>>>>
55548>>>                        Else If (bIsSQLTableFrom = False and bIsSQLTableTo = True) Begin
55551>>>                            Get UtilSqlColumnTypeToDataFlexType sDriverIDTo   iDbType iTypeTo   iLengthTo   to iTypeTo
55552>>>                        End
55552>>>>
55552>>>
55552>>>                        Move aAPIColumnCompare[iCount].sFieldNameTo to sFieldNameTo
55553>>>                        Move aAPIColumnCompare[iCount].iLengthTo    to iLengthTo
55554>>>                        Move aAPIColumnCompare[iCount].iPrecisionTo to iPrecisionTo
55555>>>                        Move aAPIColumnCompare[iCount].iOptionsTo   to iOptionTo
55556>>>                        Move aAPIColumnCompare[iCount].iTypeTo      to iTypeTo
55557>>>
55557>>>                        Move False to bSkipTypeChange
55558>>>                        If (bCompareDate_DateTime = False) Begin
55560>>>                            Move ((iTypeFrom = SQL_TYPE_DATE or iTypeFrom = SQL_TYPE_TIME or iTypeFrom = SQL_TYPE_TIMESTAMP) and (iTypeTo = SQL_TYPE_DATE or iTypeTo = SQL_TYPE_TIME or iTypeTo = SQL_TYPE_TIMESTAMP)) to bSkipTypeChange
55561>>>                        End
55561>>>>
55561>>>
55561>>>                        If (bFieldExistsTo = False) Begin
55563>>>                            Move 0 to iColumn
55564>>>                            Create_Field hFile At iColumn
55565>>>                            Set Private.piCurrentField to iColumn
55566>>>                        End
55566>>>>
55566>>>
55566>>>                        If (sFieldNameFrom <> sFieldNameTo) Begin
55568>>>                            Set_Attribute DF_FIELD_NAME of hFile iColumn to sFieldNameFrom
55571>>>                        End
55571>>>>
55571>>>
55571>>>                        // Note: In MS-SQL it is vital that *nothing* gets changed for e.g. a "datetime" column, else error: 22018 is generated by the SQL backend:
55571>>>                        //       "Explicit conversion from data type int to datetime2 is not allowed", which will make the update to fail, and all changes for the table is rollbacked. 
55571>>>                        If (bIsSQLTableFrom = True and bIsSQLTableTo = True and aAPIColumnCompare[iCount].iOptionsFrom <> C_tAPIColumn_Identity and bSkipTypeChange = False) Begin
55573>>>                            Set_Attribute DF_FIELD_NULL_ALLOWED  of hFile iColumn to aAPIColumnCompare[iCount].bAllowNULLFrom
55576>>>                            Move aAPIColumnCompare[iCount].sDefaultValueFrom to sDefaultValue
55577>>>                            If (iDataFlexType = DF_BCD and Left(String(sDefaultValue), 1) <> "[") Begin
55579>>>                                Move ("[" + String(sDefaultValue) + "]") to sDefaultValue
55580>>>                            End
55580>>>>
55580>>>                            Set_Attribute DF_FIELD_DEFAULT_VALUE of hFile iColumn to sDefaultValue
55583>>>                        End
55583>>>>
55583>>>
55583>>>                        If (bSkipTypeChange = False) Begin
55585>>>                            If (iTypeFrom <> iTypeTo) Begin
55587>>>                                If (bIsSQLTableTo = True) Begin
55589>>>                                    Set_Attribute DF_FIELD_NATIVE_TYPE of hFile iColumn to iTypeFrom
55592>>>                                End
55592>>>>
55592>>>                                Else Begin                                                   
55593>>>                                    If (iDataFlexType = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
55595>>>                                        Move DF_DATE to iDataFlexType  // Date
55596>>>                                    End
55596>>>>
55596>>>                                    Set_Attribute DF_FIELD_TYPE of hFile iColumn to iDataFlexType
55599>>>                                End
55599>>>>
55599>>>                            End
55599>>>>
55599>>>                        End
55599>>>>
55599>>>
55599>>>                        Get UtilColumnIsDateType iTypeFrom bIsSQLTableTo to bIsDateType
55600>>>                        // We can't set the length or precision for Date type columns (they are fixed).
55600>>>                        If (bIsDateType = False and iLengthFrom <> iLengthTo) Begin
55602>>>                            Set_Attribute DF_FIELD_LENGTH of hFile iColumn to iLengthFrom
55605>>>                        End
55605>>>>
55605>>>                        // We do want to set the precision for e.g. DateTime2 (can be 3 or 7, but DataFlex can just handle "3").
55605>>>                        If (iPrecisionFrom <> iPrecisionTo) Begin
55607>>>                            Set_Attribute DF_FIELD_PRECISION of hFile iColumn to iPrecisionFrom
55610>>>                        End
55610>>>>
55610>>>
55610>>>                        If (bIsSQLTableTo = True and iOptionFrom =  C_tAPIColumn_Identity and iOptionTo <> C_tAPIColumn_Identity) Begin
55612>>>                            // Can't set a recnum table to "DF_FIELD_IS_IDENTITY"
55612>>>                            If (bRecnumTable = True) Begin
55614>>>                                Set_Attribute DF_FILE_RECNUM_TABLE of hTable to False
55617>>>                            End
55617>>>>
55617>>>
55617>>>                            // We might need to create an index here.
55617>>>                            // To be able to set the DF_FIELD_IS_IDENTITY the index must already exist, but it might not at this stage.
55617>>>                            // This should probably fix that problem and if an adjustment is needed, it will get done with the normal
55617>>>                            // index update checking logic.
55617>>>                            Get_Attribute DF_FIELD_INDEX           of hFile iColumn to iIndex
55620>>>                            If (iIndex = 0 and Uppercase(sFieldNameTo) <> "RECNUM") Begin
55622>>>                                Create_Index hFile at iIndex
55623>>>                                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hFile iIndex to 1
55626>>>                            End
55626>>>>
55626>>>
55626>>>                            Set_Attribute DF_INDEX_SEGMENT_FIELD   of hFile iIndex 1 to iColumn
55629>>>                            Set_Attribute DF_FILE_PRIMARY_INDEX    of hFile          to iIndex
55632>>>                                // Note: The order here is crucial!
55632>>>                                Set_Attribute DF_INDEX_SQL_PRIMARY_KEY of hFile iIndex to True
55635>>>                                Set_Attribute DF_FIELD_IS_IDENTITY of hFile iColumn    to True
55638>>>                        End
55638>>>>
55638>>>                    End
55638>>>>
55638>>>                    Else Begin
55639>>>                        Delete_Field hFile iColumn
55640>>>                        Move (RemoveFromArray(aColumnsTo, iCount)) to aColumnsTo
55641>>>                        Move (SizeOfArray(aColumnsTo)) to iCount2
55642>>>                        Decrement iCount2
55643>>>                        // We need to adjust FieldNumbers in the array with one, as we just deleted a field,
55643>>>                        // starting with the array number we just deleted the field for.
55643>>>                        for iColumn2 from iCount to iCount2
55649>>>>
55649>>>                            Move (aColumnsTo[iColumn2].iFieldNumber - 1) to aColumnsTo[iColumn2].iFieldNumber
55650>>>                        Loop
55651>>>>
55651>>>                        Decrement iCount
55652>>>                        Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
55653>>>                        Move (SizeOfArray(aAPIColumnCompare)) to iColumns
55654>>>                        If (SizeOfArray(aColumnsFrom) = SizeOfArray(aColumnsTo)) Begin
55656>>>                            Move iColumns to iCount 
55657>>>                        End
55657>>>>
55657>>>                    End
55657>>>>
55657>>>                End 
55657>>>>
55657>>>                If (Err = True) Begin 
55659>>>                    Move False to bOK
55660>>>                    Move iColumns to iCount
55661>>>                End
55661>>>>
55661>>>            Loop
55662>>>>
55662>>>
55662>>>            Set Action_Text of ghoStatusPanel to "Restructuring table..."
55663>>>        Structure_End hFile DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55665>>>
55665>>>        Set Action_Text of ghoStatusPanel to ""
55666>>>        Function_Return (Not(Err))
55667>>>    End_Function
55668>>>
55668>>>    // * Dummy function for the Studio's Code Explorer *
55668>>>    Function API_INDEX_FUNCTIONS Returns Boolean
55670>>>        Function_Return False
55671>>>    End_Function
55672>>>
55672>>>    // Get ApiIndexCreate Customers.File_Number 1 2 0 1 -1 -1 -1 -1 -1 -1 -1 -1 to bOK
55672>>>    // Note: the "-1" can be left out as this function is overloaded to make it easier to call.
55672>>>    // Note: This doesn't set Descending attributes - Use function IndexChangeDirection to do that.
55672>>>    Function ApiIndexCreate Handle hTable Integer iIndex Integer iSegments Integer iSgmnt1 Integer iSgmnt2 Integer iSgmnt3 Integer iSgmnt4 Integer iSgmnt5 Integer iSgmnt6 Integer iSgmnt7 Integer iSgmnt8 Integer iSgmnt9 Integer iSgmnt10 Returns Boolean
55674>>>        Integer iTableNo iSegment1 iSegment2 iSegment3 iSegment4 iSegment5 iSegment6 iSegment7 iSegment8 iSegment9 iSegment10  iIndexSegments
55674>>>        String sDriverID
55674>>>        Boolean bOK bExists bIsSQLTable
55674>>>
55674>>>        Get AutoConnectionIDLogin to bOK
55675>>>        Get OpenTableExclusive hTable to bOK
55676>>>        If (bOK = False) Begin
55678>>>            Function_Return False
55679>>>        End
55679>>>>
55679>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
55682>>>
55682>>>            Get _UtilTableIsSql hTable to bIsSQLTable
55683>>>            If (bIsSQLTable = True) Begin
55685>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
55688>>>            End
55688>>>>
55688>>>
55688>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iIndexSegments
55691>>>        Move (iIndexSegments > 0) to bExists
55692>>>        If (bExists = True) Begin
55694>>>            Function_Return True
55695>>>        End
55695>>>>
55695>>>
55695>>>        Move -1 to iSegment1
55696>>>        Move -1 to iSegment2
55697>>>        Move -1 to iSegment3
55698>>>        Move -1 to iSegment4
55699>>>        Move -1 to iSegment5
55700>>>        Move -1 to iSegment6
55701>>>        Move -1 to iSegment7
55702>>>        Move -1 to iSegment8
55703>>>        Move -1 to iSegment9
55704>>>        Move -1 to iSegment10
55705>>>
55705>>>        If (num_arguments > 3) Begin
55707>>>            Move iSgmnt1 to iSegment1
55708>>>        End
55708>>>>
55708>>>        If (num_arguments > 4) Begin
55710>>>            Move iSgmnt2 to iSegment2
55711>>>        End
55711>>>>
55711>>>        If (num_arguments > 5) Begin
55713>>>            Move iSgmnt3 to iSegment3
55714>>>        End
55714>>>>
55714>>>        If (num_arguments > 6) Begin
55716>>>            Move iSgmnt4 to iSegment4
55717>>>        End
55717>>>>
55717>>>        If (num_arguments > 7) Begin
55719>>>            Move iSgmnt5 to iSegment5
55720>>>        End
55720>>>>
55720>>>        If (num_arguments > 8) Begin
55722>>>            Move iSgmnt6 to iSegment6
55723>>>        End
55723>>>>
55723>>>        If (num_arguments > 9) Begin
55725>>>            Move iSgmnt7 to iSegment7
55726>>>        End
55726>>>>
55726>>>        If (num_arguments > 10) Begin
55728>>>            Move iSgmnt8 to iSegment8
55729>>>        End
55729>>>>
55729>>>        If (num_arguments > 11) Begin
55731>>>            Move iSgmnt9 to iSegment9
55732>>>        End
55732>>>>
55732>>>        If (num_arguments > 12) Begin
55734>>>            Move iSgmnt10 to iSegment10
55735>>>        End
55735>>>>
55735>>>
55735>>>        Move False to Err
55736>>>        Move hTable to iTableNo
55737>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55738>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_PARAMETER
55739>>>        Send Ignore_Error of Error_Object_Id DFERR_NON_FATAL_RESTRUCTURE_ERROR
55740>>>
55740>>>        // We start by deleting the index, if it exists.
55740>>>        If (bExists = True) Begin
55742>>>            Structure_Start hTable sDriverID
55743>>>                Delete_Index iTableNo iIndex
55744>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
55745>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55747>>>        End
55747>>>>
55747>>>
55747>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
55748>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_PARAMETER
55749>>>        Send Trap_Error of Error_Object_Id DFERR_NON_FATAL_RESTRUCTURE_ERROR
55750>>>        Set Action_Text of ghoStatusPanel to ""
55751>>>        Move False to Err
55752>>>        Move 0 to LastErr
55753>>>
55753>>>        // Need to re-open if index deleted.
55753>>>        Move iTableNo to hTable
55754>>>        Get OpenTableExclusive hTable to bOK
55755>>>        If (bOK = False) Begin
55757>>>            Function_Return False
55758>>>        End
55758>>>>
55758>>>
55758>>>        Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
55759>>>        Structure_Start hTable sDriverID
55760>>>            Create_Index hTable At iIndex
55761>>>            Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iSegments
55764>>>
55764>>>            If (iSgmnt1 <> -1) Begin
55766>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 1 to iSegment1
55769>>>            End
55769>>>>
55769>>>            If (iSegment2 <> -1) Begin
55771>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 2 to iSegment2
55774>>>            End
55774>>>>
55774>>>            If (iSegment3 <> -1) Begin
55776>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 3 to iSegment3
55779>>>            End
55779>>>>
55779>>>            If (iSegment4 <> -1) Begin
55781>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 4 to iSegment4
55784>>>            End
55784>>>>
55784>>>            If (iSegment5 <> -1) Begin
55786>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 5 to iSegment5
55789>>>            End
55789>>>>
55789>>>            If (iSegment6 <> -1) Begin
55791>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 6 to iSegment6
55794>>>            End
55794>>>>
55794>>>            If (iSegment7 <> -1) Begin
55796>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 7 to iSegment7
55799>>>            End
55799>>>>
55799>>>            If (iSegment8 <> -1) Begin
55801>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 8 to iSegment8
55804>>>            End
55804>>>>
55804>>>            If (iSegment9 <> -1) Begin
55806>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 9 to iSegment9
55809>>>            End
55809>>>>
55809>>>            If (iSegment10 <> -1) Begin
55811>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 10 to iSegment10
55814>>>            End
55814>>>>
55814>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
55815>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55817>>>
55817>>>        Set Action_Text of ghoStatusPanel to ""
55818>>>        Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
55819>>>
55819>>>        Function_Return (Err = False)
55820>>>    End_Function
55821>>>
55821>>>    // Example:
55821>>>    // Get ApiIndexCreateEx hTable 1 (StrSplitToArray("1,5,6,7,8,2,3,4,10,9,11", ",")) to bOk
55821>>>    // Note: The StrSplitToArray function was introduced with DataFlex 18.2
55821>>>    Function ApiIndexCreateEx Handle hTable Integer iIndex Integer[] iSgmnts Returns Boolean
55823>>>        Integer iTableNo iNumSgmnt iNumSgmnts
55823>>>        String sDriverID
55823>>>        Boolean bOK bIsSQLTable
55823>>>
55823>>>        Get AutoConnectionIDLogin to bOK
55824>>>
55824>>>        Move False to Err
55825>>>        Move hTable to iTableNo
55826>>>        Get OpenTableExclusive hTable to bOK
55827>>>        If (bOK = False) Begin
55829>>>            Function_Return False
55830>>>        End
55830>>>>
55830>>>
55830>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
55833>>>            Get _UtilTableIsSql hTable to bIsSQLTable
55834>>>            If (bIsSQLTable = True) Begin
55836>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
55839>>>            End
55839>>>>
55839>>>
55839>>>        // We start by deleting the index
55839>>>        Structure_Start hTable sDriverID
55840>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55841>>>            Send Ignore_Error of Error_Object_Id DFERR_BAD_PARAMETER
55842>>>            Delete_Index iTableNo iIndex
55843>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
55844>>>            Send Trap_Error of Error_Object_Id DFERR_BAD_PARAMETER
55845>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE
55847>>>
55847>>>        Move False to Err
55848>>>        Move iTableNo to hTable
55849>>>        Get OpenTableExclusive hTable to bOK
55850>>>        If (bOK = False) Begin
55852>>>            Function_Return False
55853>>>        End
55853>>>>
55853>>>
55853>>>        Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
55854>>>        Structure_Start hTable sDriverID
55855>>>            Move (SizeOfArray(iSgmnts)) to iNumSgmnts
55856>>>
55856>>>            Create_Index hTable at iIndex
55857>>>            Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSgmnts
55860>>>
55860>>>            for iNumSgmnt from 0 to (iNumSgmnts - 1)
55866>>>>
55866>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex (iNumSgmnt + 1) to iSgmnts[iNumSgmnt]
55869>>>            Loop
55870>>>>
55870>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE
55872>>>
55872>>>        Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
55873>>>
55873>>>        Function_Return (Err = False)
55874>>>    End_Function
55875>>>
55875>>>    Function APIIndexCreateByFieldNames Handle hTable tAPIIndex APIIndex tAPIIndex[] APIIndexTo tAPIIndexSegment[] aIndexSegments Returns Boolean
55877>>>        Integer iCount iSegmentsFrom iFieldFrom iSegmentsTo iSQLIndexType iTableNo
55877>>>        String sDriverID sSQLIndexName
55877>>>        Boolean bOK bIsSQLTable bIsOpen bIsSQLPrimaryKey bIsSQLClustered bIsSQLTemporaryIndex bExists
55877>>>
55877>>>        Move (SizeOfArray(aIndexSegments)) to iSegmentsFrom
55878>>>        If (iSegmentsFrom = 0) Begin
55880>>>            Function_Return False
55881>>>        End
55881>>>>
55881>>>
55881>>>        Get AutoConnectionIDLogin to bOK
55882>>>        Move False to Err
55883>>>        Get OpenTableExclusive hTable to bIsOpen
55884>>>        If (bIsOpen = False) Begin
55886>>>            Function_Return False
55887>>>        End
55887>>>>
55887>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
55890>>>        Get _UtilTableIsSql hTable to bIsSQLTable
55891>>>            If (bIsSQLTable = True) Begin
55893>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
55896>>>            End
55896>>>>
55896>>>
55896>>>        Move 0     to iSegmentsTo
55897>>>        Move 0     to iSQLIndexType
55898>>>        Move ""    to sSQLIndexName
55899>>>        Move False to bIsSQLTemporaryIndex
55900>>>        Move False to bIsSQLPrimaryKey
55901>>>        Move False to bIsSQLClustered
55902>>>
55902>>>            Get UtilIndexTempRenameSQLName hTable APIIndex.sSQLIndexName sDriverID          to bOK
55903>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable APIIndex.iIndexNumber              to iSegmentsTo
55906>>>        Move (iSegmentsTo > 0) to bExists
55907>>>        If (bExists = True) Begin
55909>>>            If (bIsSQLTable = True and iSegmentsTo > 0) Begin
55911>>>                Get_Attribute DF_INDEX_NAME of hTable APIIndex.iIndexNumber                 to sSQLIndexName
55914>>>                        Get_Attribute DF_INDEX_SQL_TYPE of hTable APIIndex.iIndexNumber         to iSQLIndexType
55917>>>                        Move (iSQLIndexType = DF_INDEX_TEMPORARY)                               to bIsSQLTemporaryIndex
55918>>>                    Get_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable APIIndex.iIndexNumber  to bIsSQLPrimaryKey
55921>>>                    Get_Attribute DF_INDEX_CLUSTERED       of hTable APIIndex.iIndexNumber  to bIsSQLClustered
55924>>>            End
55924>>>>
55924>>>        End
55924>>>>
55924>>>
55924>>>        Move hTable to iTableNo
55925>>>        Move False to Err
55926>>>        Move 0 to LastErr
55927>>>
55927>>>        Structure_Start hTable sDriverID
55928>>>            If (bExists = True) Begin
55930>>>                Delete_Index iTableNo APIIndex.iIndexNumber
55931>>>            End
55931>>>>
55931>>>
55931>>>            Create_Index hTable At APIIndex.iIndexNumber
55932>>>
55932>>>                If (bIsSQLTable = True) Begin // (DF_INDEX_SQL_TYPE = DF_INDEX_SERVER, DF_INDEX_CLIENT, DF_INDEX_SERVER_ONLY or DF_INDEX_TEMPORARY)
55934>>>                    Set_Attribute DF_INDEX_SQL_TYPE        of hTable APIIndex.iIndexNumber to APIIndex.iSQLIndexType
55937>>>                    Set_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable APIIndex.iIndexNumber to APIIndex.bIsSQLPrimaryKey
55940>>>                    Set_Attribute DF_INDEX_CLUSTERED       of hTable APIIndex.iIndexNumber to APIIndex.bIsSQLClustered
55943>>>                    Set_Attribute DF_INDEX_NAME            of hTable APIIndex.iIndexNumber to APIIndex.sSQLIndexName
55946>>>                End
55946>>>>
55946>>>
55946>>>                    Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable APIIndex.iIndexNumber to iSegmentsFrom
55949>>>
55949>>>            for iCount from 0 to (iSegmentsFrom -1)
55955>>>>
55955>>>                Move aIndexSegments[iCount].iFieldNumber to iFieldFrom
55956>>>                If (iFieldFrom <> -1 ) Begin
55958>>>                        Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable APIIndex.iIndexNumber (iCount +1) to iFieldFrom
55961>>>                        Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable APIIndex.iIndexNumber (iCount +1) to aIndexSegments[iCount].bAscending
55964>>>                        Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable APIIndex.iIndexNumber (iCount +1) to aIndexSegments[iCount].bUppercase
55967>>>                End
55967>>>>
55967>>>            Loop
55968>>>>
55968>>>
55968>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
55969>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55971>>>
55971>>>        Set Action_Text of ghoStatusPanel to ""
55972>>>
55972>>>        Function_Return (Err = False)
55973>>>    End_Function
55974>>>
55974>>>    // If an SQL index is to be renamed we need to check that the name doesn't exist already, but
55974>>>    // with another index number. If we find one we temporarily renames it by adding "TMP" to the SQL name.
55974>>>    Function UtilIndexTempRenameSQLName Handle hTable String sSQLIndexName String sDriverID Returns Boolean
55976>>>        Integer iLastIndex iCount iTableNo iSegments
55976>>>        String sSQLIndexNameCompare sTmpIndexName
55976>>>        Boolean bIsOpen bExists bIsSQLDriver 
55976>>>
55976>>>        Get IsSQLDriver sDriverID to bIsSQLDriver
55977>>>        
55977>>>        If (bIsSQLDriver = False) Begin
55979>>>            Function_Return False
55980>>>        End
55980>>>>
55980>>>
55980>>>        Move False to Err
55981>>>        Move hTable to iTableNo
55982>>>        Get_Attribute DF_FILE_LAST_INDEX_NUMBER of hTable to iLastIndex
55985>>>        for iCount from 0 to iLastIndex
55991>>>>
55991>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iCount to iSegments
55994>>>            Move (iSegments > 0) to bExists
55995>>>            If (bExists = True) Begin
55997>>>                Get_Attribute DF_INDEX_NAME of hTable iCount to sSQLIndexNameCompare
56000>>>                If (Lowercase(sSQLIndexName) = Lowercase(sSQLIndexNameCompare)) Begin
56002>>>                    Move (sSQLIndexNameCompare + String("_TMP")) to sTmpIndexName
56003>>>                    Structure_Start iTableNo sDriverID
56004>>>                        Set_Attribute DF_INDEX_NAME of iTableNo iCount to sTmpIndexName
56007>>>                    Structure_End iTableNo DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
56009>>>                    Open hTable
56011>>>                End
56011>>>>
56011>>>            End
56011>>>>
56011>>>        Loop
56012>>>>
56012>>>
56012>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
56015>>>        If (bIsOpen = False) Begin
56017>>>            Get OpenTableExclusive hTable to bIsOpen
56018>>>        End
56018>>>>
56018>>>        If (bIsOpen = False) Begin
56020>>>            Function_Return False
56021>>>        End
56021>>>>
56021>>>
56021>>>        Function_Return (Err = False)
56022>>>    End_Function
56023>>>
56023>>>    // Checks if an SQL Index name for the "FROM" database already exists in the TO database,
56023>>>    // but with another Index number. We can then not rename the SQL index name for the TO database table.
56023>>>    Function UtilIndexSQLIndexNameExists Handle hTable Integer iIndexNumberFrom String sSQLIndexNameFrom tAPIIndex[] APIIndexTo Returns Integer
56025>>>        Integer iSize iCount
56025>>>        Integer iRetVal
56025>>>
56025>>>        Move 0 to iRetVal
56026>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndexNumberFrom to iRetVal
56029>>>        If (iRetVal = 0) Begin
56031>>>            Function_Return 0
56032>>>        End
56032>>>>
56032>>>        Move (SizeOfArray(APIIndexTo)) to iSize
56033>>>        Decrement iSize
56034>>>        for iCount from 0 to iSize
56040>>>>
56040>>>            If (Uppercase(sSQLIndexNameFrom) = Uppercase(APIIndexTo[iCount].sSQLIndexName)) Begin
56042>>>                If (iIndexNumberFrom <> APIIndexTo[iCount].iIndexNumber) Begin
56044>>>                    Move APIIndexTo[iCount].iIndexNumber to iRetVal
56045>>>                End
56045>>>>
56045>>>            End
56045>>>>
56045>>>        Loop
56046>>>>
56046>>>
56046>>>        Function_Return iRetVal
56047>>>    End_Function
56048>>>
56048>>>    Function ApiIndexDeleteSegment Handle hTable Integer iIndex Integer iSegment Returns Boolean
56050>>>        Integer iNumSegments iCurSegment iSegmentCase iSegmentDirection iSegmentColumn
56050>>>        Boolean bIsSQLTable
56050>>>        
56050>>>            Get _UtilTableIsSql hTable to bIsSQLTable
56051>>>            If (bIsSQLTable = True) Begin
56053>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
56056>>>            End
56056>>>>
56056>>>
56056>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
56059>>>        If (iSegment = iNumSegments) Begin
56061>>>//            Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
56061>>>        End
56061>>>>
56061>>>
56061>>>        Else If (iSegment > 0 and iSegment < iNumSegments) Begin
56064>>>            for iCurSegment from iSegment to (iNumSegments - 1)
56070>>>>
56070>>>                //*** Move index segment attributes
56070>>>                Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment + 1) to iSegmentCase
56073>>>                Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment + 1) to iSegmentDirection
56076>>>                Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment + 1) to iSegmentColumn
56079>>>
56079>>>                Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment to iSegmentCase
56082>>>                Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment to iSegmentDirection
56085>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment to iSegmentColumn
56088>>>            Loop
56089>>>>
56089>>>
56089>>>            Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
56092>>>        End
56092>>>>
56092>>>
56092>>>        Function_Return (Err = False)
56093>>>    End_Function
56094>>>
56094>>>    Function APIIndexRemoveAllIndexes Handle hTable tAPIIndex[] APIIndex Returns Boolean
56096>>>        Integer iCount iSize iIndex
56096>>>        String sDriverID
56096>>>        Boolean bOK bIsSQLTable bIsOpen
56096>>>
56096>>>        Move (SizeOfArray(APIIndex)) to iSize
56097>>>        If (iSize = 0) Begin
56099>>>            Function_Return True
56100>>>        End
56100>>>>
56100>>>
56100>>>        Get AutoConnectionIDLogin to bOK
56101>>>        Move False to Err
56102>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
56105>>>        If (bIsOpen = False) Begin
56107>>>            Get OpenTableExclusive hTable to bIsOpen
56108>>>            If (bIsOpen = False) Begin
56110>>>                Function_Return False
56111>>>            End
56111>>>>
56111>>>        End
56111>>>>
56111>>>
56111>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
56114>>>        Get _UtilTableIsSql hTable to bIsSQLTable
56115>>>            If (bIsSQLTable = True) Begin
56117>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
56120>>>            End
56120>>>>
56120>>>
56120>>>        Move False to Err
56121>>>        Move 0 to LastErr
56122>>>        Decrement iSize
56123>>>
56123>>>        Structure_Start hTable sDriverID
56124>>>            for iCount from 0 to iSize
56130>>>>
56130>>>//                Move False to bIsSQLPrimaryKey
56130>>>//                #IF (!@ > 180)   // DF 18.1 and up
56130>>>//                    Set Error_Report_Mode to DUF_ERROR_NO_REPORT
56130>>>//                    Get_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable APIIndex[iCount].iIndexNumber to bIsSQLPrimaryKey
56130>>>//                    Set Error_Report_Mode to DUF_ERROR_REPORT
56130>>>//                #ENDIF
56130>>>                // We can't delete if this is a primary key index:
56130>>>//                If (bIsSQLPrimaryKey = False) Begin
56130>>>                    Move APIIndex[iCount].iIndexNumber to iIndex
56131>>>                    Delete_Index hTable iIndex
56132>>>//                    Set Error_Report_Mode to DUF_ERROR_REPORT
56132>>>//                End
56132>>>            Loop
56133>>>>
56133>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
56134>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
56136>>>//        Move False to Err
56136>>>        Move 0 to LastErr
56137>>>
56137>>>        Set Action_Text of ghoStatusPanel to ""
56138>>>        Function_Return (Err = False)
56139>>>    End_Function
56140>>>
56140>>>    Function ApiIndexChangeDirection Handle hTable Integer iIndex Integer iSegment Integer iDirection Returns Boolean
56142>>>        Boolean bOK
56142>>>
56142>>>        Get AutoConnectionIDLogin to bOK
56143>>>        Move False to Err
56144>>>        Get OpenTableExclusive hTable to bOK
56145>>>        If (bOK = False) Begin
56147>>>            Function_Return False
56148>>>        End
56148>>>>
56148>>>        Structure_Start hTable
56149>>>            Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iSegment to iDirection
56152>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
56153>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
56155>>>
56155>>>        Set Action_Text of ghoStatusPanel to ""
56156>>>        Function_Return (Err = False)
56157>>>    End_Function
56158>>>
56158>>>    Function ApiIndexChangeUppercase Handle hTable Integer iIndex Integer iSegment Boolean bUppercase Returns Boolean
56160>>>        Integer iCase
56160>>>        Boolean bOK
56160>>>
56160>>>        If (bUppercase = True) Begin
56162>>>            Move DF_CASE_IGNORED to iCase
56163>>>        End
56163>>>>
56163>>>        Else Begin
56164>>>            Move DF_CASE_USED to iCase
56165>>>        End
56165>>>>
56165>>>
56165>>>        Get AutoConnectionIDLogin to bOK
56166>>>        Move False to Err
56167>>>        Get OpenTableExclusive hTable to bOK
56168>>>        If (bOK = False) Begin
56170>>>            Function_Return False
56171>>>        End
56171>>>>
56171>>>        Structure_Start hTable
56172>>>            Set_Attribute DF_INDEX_SEGMENT_CASE of hTable iIndex iSegment to iCase
56175>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
56176>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
56178>>>
56178>>>        Set Action_Text of ghoStatusPanel to ""
56179>>>        Function_Return (Err = False)
56180>>>    End_Function
56181>>>
56181>>>    // To delete an index
56181>>>    Function ApiIndexRemove Handle hTable Integer iIndex Returns Boolean
56183>>>        Integer iTableNo iNumSegments
56183>>>        String sDriverID
56183>>>        Boolean bOK bIsSQLTable
56183>>>
56183>>>        Get AutoConnectionIDLogin to bOK
56184>>>        Move False to Err
56185>>>        Move hTable to iTableNo
56186>>>        Get OpenTableExclusive hTable to bOK
56187>>>        If (bOK = False) Begin
56189>>>            Function_Return False
56190>>>        End
56190>>>>
56190>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
56193>>>            Get _UtilTableIsSql hTable to bIsSQLTable
56194>>>            If (bIsSQLTable = True) Begin
56196>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
56199>>>            End
56199>>>>
56199>>>
56199>>>        // Check to see if the index exists or not...
56199>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
56202>>>        If (iNumSegments = 0) Begin
56204>>>            Function_Return True // Then nothing to do.
56205>>>        End
56205>>>>
56205>>>
56205>>>        Structure_Start hTable sDriverID
56206>>>            Send Ignore_Error of Error_Object_Id DFERR_BAD_PARAMETER
56207>>>            Delete_Index iTableNo iIndex
56208>>>            Send Trap_Error of Error_Object_Id DFERR_BAD_PARAMETER
56209>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
56210>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
56212>>>
56212>>>        Set Action_Text of ghoStatusPanel to ""
56213>>>        Function_Return (Err = False)
56214>>>    End_Function
56215>>>
56215>>>    // Delete an Index Segment
56215>>>    Function ApiIndexRemoveSegment Handle hTable Integer iIndex Integer iSegment Returns Boolean
56217>>>        Boolean bOK bSQLDriver bIndexTemporary bIsSQLTable
56217>>>        Integer iNumSegments iCurSegment iSegmentCase iSegmentDirection iSegmentColumn
56217>>>        Integer iIndexType
56217>>>        String sDriverID
56217>>>
56217>>>        Get AutoConnectionIDLogin to bOK
56218>>>        Move False to Err
56219>>>
56219>>>        Get OpenTableExclusive hTable to bOK
56220>>>        If (bOK = False) Begin
56222>>>            Function_Return False
56223>>>        End
56223>>>>
56223>>>
56223>>>            Get _UtilTableIsSql hTable to bIsSQLTable
56224>>>            If (bIsSQLTable = True) Begin
56226>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
56229>>>            End
56229>>>>
56229>>>
56229>>>        // Check to see if the index exists or not...
56229>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
56232>>>        If (iNumSegments = 0) Begin
56234>>>            Function_Return False
56235>>>        End
56235>>>>
56235>>>
56235>>>        Move False to bIndexTemporary
56236>>>        Get psDriverID to sDriverID
56237>>>        Get IsSQLDriver sDriverID to bSQLDriver
56238>>>        If (bSQLDriver) Begin
56240>>>           Get_Attribute DF_INDEX_TYPE of hTable iIndex to iIndexType
56243>>>                Get_Attribute DF_INDEX_TYPE to iIndexType
56246>>>                Move True to bIndexTemporary
56247>>>        End
56247>>>>
56247>>>
56247>>>        // If SQL and Temporary Index must not use Structure_Start/Structure_End
56247>>>        If (bSQLDriver = True and bIndexTemporary = True) Begin
56249>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
56252>>>            If (iSegment = iNumSegments) Begin
56254>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
56257>>>            End
56257>>>>
56257>>>            Else If (iSegment > 0 and iSegment < iNumSegments) Begin
56260>>>                For iCurSegment from iSegment to (iNumSegments - 1)
56266>>>>
56266>>>                    //*** Move index segment attributes
56266>>>                    Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment + 1) to iSegmentCase
56269>>>                    Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment + 1) to iSegmentDirection
56272>>>                    Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment + 1) to iSegmentColumn
56275>>>                    Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment       to iSegmentCase
56278>>>                    Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment       to iSegmentDirection
56281>>>                    Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment       to iSegmentColumn
56284>>>                Loop
56285>>>>
56285>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
56288>>>            End
56288>>>>
56288>>>        End
56288>>>>
56288>>>
56288>>>        Else Begin
56289>>>           Structure_Start hTable
56290>>>               Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
56293>>>               If (iSegment = iNumSegments) Begin
56295>>>                   Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
56298>>>               End
56298>>>>
56298>>>               Else If (iSegment > 0 and iSegment < iNumSegments) Begin
56301>>>                   for iCurSegment from iSegment to (iNumSegments - 1)
56307>>>>
56307>>>                       //*** Move index segment attributes
56307>>>                       Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment + 1) to iSegmentCase
56310>>>                       Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment + 1) to iSegmentDirection
56313>>>                       Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment + 1) to iSegmentColumn
56316>>>                       Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment       to iSegmentCase
56319>>>                       Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment       to iSegmentDirection
56322>>>                       Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment       to iSegmentColumn
56325>>>                   Loop
56326>>>>
56326>>>                   Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
56329>>>               End
56329>>>>
56329>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
56330>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
56332>>>            Set Action_Text of ghoStatusPanel to ""
56333>>>        End
56333>>>>
56333>>>
56333>>>        Function_Return (Err = False)
56334>>>    End_Function
56335>>>
56335>>>    // Add/Insert an Index Segment
56335>>>    Function ApiIndexInsertSegment Handle hTable Integer iIndex Integer iSegment Integer iSegmentColumn Integer iSegmentCase Integer iSegmentDirection Returns Boolean
56337>>>        Boolean bOK bSQLDriver bIndexTemporary bIsSQLTable
56337>>>        Integer iNumSegments iCurSegment iCurSegmentColumn iCurSegmentCase iCurSegmentDirection
56337>>>        Integer iIndexType
56337>>>        String sDriverId
56337>>>
56337>>>        Get AutoConnectionIDLogin to bOK
56338>>>        Move False to Err
56339>>>
56339>>>        Get OpenTableExclusive hTable to bOK
56340>>>        If (bOK = False) Begin
56342>>>            Function_Return False
56343>>>        End
56343>>>>
56343>>>
56343>>>            Get _UtilTableIsSql hTable to bIsSQLTable
56344>>>            If (bIsSQLTable = True) Begin
56346>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
56349>>>            End
56349>>>>
56349>>>
56349>>>        Move False to bIndexTemporary
56350>>>        // Check to see if the index exists or not...
56350>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
56353>>>        If (iNumSegments = 0) Begin
56355>>>            Function_Return False
56356>>>        End
56356>>>>
56356>>>
56356>>>        Get psDriverID to sDriverID
56357>>>        Get IsSQLDriver sDriverID to bSQLDriver
56358>>>        If (bSQLDriver) Begin
56360>>>           Get_Attribute DF_INDEX_TYPE of hTable iIndex to iIndexType
56363>>>                Get_Attribute DF_INDEX_TYPE to iIndexType
56366>>>                Move True to bIndexTemporary
56367>>>        End
56367>>>>
56367>>>
56367>>>        // If SQL and Temporary Index must not use Structure_Start/Structure_End
56367>>>        If (bSQLDriver = True and bIndexTemporary = True) Begin
56369>>>           Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
56372>>>
56372>>>           If (iSegment > iNumSegments) Begin
56374>>>               Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments + 1)
56377>>>               Move (iNumSegments + 1) to iCurSegment
56378>>>           End
56378>>>>
56378>>>           Else If (iSegment > 0 and iSegment <= iNumSegments) Begin
56381>>>               Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments + 1)
56384>>>               Move iNumSegments to iCurSegment
56385>>>
56385>>>               While (iCurSegment > iSegment)
56389>>>                   //*** Move index segment attributes
56389>>>                   Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment - 1) to iCurSegmentCase
56392>>>                   Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment - 1) to iCurSegmentDirection
56395>>>                   Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment - 1) to iSegmentColumn
56398>>>                   Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment       to iCurSegmentCase
56401>>>                   Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment       to iCurSegmentDirection
56404>>>                   Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment       to iCurSegmentColumn
56407>>>                   Decrement iCurSegment
56408>>>               Loop
56409>>>>
56409>>>
56409>>>               //*** Now set new segment attributes
56409>>>               Set_Attribute DF_INDEX_SEGMENT_CASE          of hTable iIndex iCurSegment       to iSegmentCase
56412>>>               Set_Attribute DF_INDEX_SEGMENT_DIRECTION     of hTable iIndex iCurSegment       to iSegmentDirection
56415>>>               Set_Attribute DF_INDEX_SEGMENT_FIELD         of hTable iIndex iCurSegment       to iSegment
56418>>>           End
56418>>>>
56418>>>        End
56418>>>>
56418>>>
56418>>>        Else Begin
56419>>>        Structure_Start hTable
56420>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
56423>>>
56423>>>            If (iSegment > iNumSegments) Begin
56425>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments + 1)
56428>>>                Move (iNumSegments + 1) to iCurSegment
56429>>>            End
56429>>>>
56429>>>            Else If (iSegment > 0 and iSegment <= iNumSegments) Begin
56432>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments + 1)
56435>>>                Move iNumSegments to iCurSegment
56436>>>
56436>>>                While (iCurSegment > iSegment)
56440>>>                    //*** Move index segment attributes
56440>>>                    Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment - 1) to iSegmentCase
56443>>>                    Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment - 1) to iSegmentDirection
56446>>>                    Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment - 1) to iSegmentColumn
56449>>>                    Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment       to iSegmentCase
56452>>>                    Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment       to iSegmentDirection
56455>>>                    Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment       to iSegmentColumn
56458>>>                    Decrement iCurSegment
56459>>>                Loop
56460>>>>
56460>>>
56460>>>                //*** Now set new segment attributes
56460>>>                Set_Attribute DF_INDEX_SEGMENT_CASE          of hTable iIndex iCurSegment       to iSegmentCase
56463>>>                Set_Attribute DF_INDEX_SEGMENT_DIRECTION     of hTable iIndex iCurSegment       to iSegmentDirection
56466>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD         of hTable iIndex iCurSegment       to iSegment
56469>>>            End
56469>>>>
56469>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
56470>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
56472>>>            Set Action_Text of ghoStatusPanel to ""
56473>>>        End
56473>>>>
56473>>>
56473>>>        Function_Return (Err = False)
56474>>>    End_Function
56475>>>
56475>>>    // * Dummy function for the Studio's Code Explorer *
56475>>>    Function TABLE_UTILITY_FUNCTIONS Returns Boolean
56477>>>        Function_Return False
56478>>>    End_Function  
56479>>>    
56479>>>    // Preparation message before an SQL onversion. It will check and wash all embedded data tables and prepare them
56479>>>    // for an SQL conversion.
56479>>>    Function UtilPrepareDataFolderForSQLConversion Boolean bMoveMiscFilesToBackup Boolean bFixALLBogusFilelistEntries Boolean bConvertTo30Format Boolean bRepairAndReindex Boolean bFixBogusDates Returns Boolean
56481>>>        Boolean bConvertTo30FormatbOK bRepairAndReindexOK bFixBogusDatesOK bMoveMiscFilesToBackupOK
56481>>>        
56481>>>        Move True to bConvertTo30FormatbOK
56482>>>        Move True to bRepairAndReindexOK
56483>>>        Move True to bFixBogusDatesOK
56484>>>        Move True to bMoveMiscFilesToBackupOK
56485>>>        
56485>>>        If (bMoveMiscFilesToBackup = True) Begin   
56487>>>            Set Message_Text of ghoStatusPanel to "Moving misc. files to backup..."
56488>>>            Get UtilMoveMiscFilesToBackupFolder to bMoveMiscFilesToBackupOK
56489>>>        End                                                                                
56489>>>>
56489>>>        If (bFixALLBogusFilelistEntries = True) Begin
56491>>>            Set Message_Text of ghoStatusPanel to "Fixing bogus Filelist.cfg entries..."
56492>>>            Get UtilTableFixALLBogusFilelistEntries to bFixALLBogusFilelistEntries
56493>>>        End
56493>>>>
56493>>>        If (bConvertTo30Format = True) Begin
56495>>>            Set Message_Text of ghoStatusPanel to "Converting .dat files from 2.3->..."
56496>>>            Get UtilTableConvertALLTablesFrom23Format to bConvertTo30FormatbOK
56497>>>        End                                                 
56497>>>>
56497>>>        If (bRepairAndReindex = True) Begin
56499>>>            Set Message_Text of ghoStatusPanel to "Repairing and reindexing..."
56500>>>            Get UtilTableRepairAndReindexALL to bRepairAndReindexOK
56501>>>        End  
56501>>>>
56501>>>        If (bFixBogusDates = True) Begin
56503>>>            Set Message_Text of ghoStatusPanel to "Fixing bogus date values..."
56504>>>            Get UtilTablesFixAllDateBogusValues True False to bFixBogusDatesOK
56505>>>        End                                    
56505>>>>
56505>>>        
56505>>>        Function_Return (bConvertTo30FormatbOK = True and bFixALLBogusFilelistEntries = True and bRepairAndReindexOK = True and bFixBogusDatesOK = True and bMoveMiscFilesToBackupOK = True)
56506>>>    End_Function
56507>>>
56507>>>    Function UtilTableConvertALLTablesFrom23Format Returns Boolean
56509>>>        Boolean bOK bFlexErrs bTemp
56509>>>        Handle hTable
56509>>>        String sTableName
56509>>>        Integer iCount iSize
56509>>>        
56509>>>        Move True to bOK
56510>>>        Move 0 to hTable    
56511>>>
56511>>>        Get UtilFilelistNoOfTables to iSize
56512>>>        Set pbVisible    of ghoProgressBarOverall to True
56513>>>        Set piPosition   of ghoProgressBarOverall to 0
56514>>>        Set piMaximum    of ghoProgressBarOverall to iSize
56515>>>        Set piAdvanceBy  of ghoProgressBarOverall to 1
56516>>>
56516>>>        Repeat
56516>>>>
56516>>>            Set Action_Text of ghoStatusPanel to "Checking if table is in 2.3 format..."
56517>>>            Set piPosition of ghoProgressBarOverall to iCount  
56518>>>            Increment iCount
56519>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
56522>>>            If (hTable > 0) Begin
56524>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
56527>>>                Move (Uppercase(sTableName) = "FLEXERRS")  to bFlexErrs
56528>>>                If (bFlexErrs = False) Begin
56530>>>                    Get UtilTableConvertFrom23Format hTable to bTemp
56531>>>                    If (bTemp = False) Begin
56533>>>                        Move False to bOK
56534>>>                    End
56534>>>>
56534>>>                End
56534>>>>
56534>>>            End
56534>>>>
56534>>>        Until (hTable = 0)
56536>>>        
56536>>>        Set Action_Text of ghoStatusPanel to ""
56537>>>        Function_Return bOK
56538>>>    End_Function
56539>>>    
56539>>>    // Converts an embedded table from 2.3 -> 3.0.
56539>>>    // Returns: FALSE only if the table can't be opened or the conversion fails.
56539>>>    // It will return a TRUE if successful or the table is an SQL table.
56539>>>    Function UtilTableConvertFrom23Format Handle hTable Returns Boolean
56541>>>        Boolean bOK bIsEmbedded bIsAlias
56541>>>        String sRevision
56541>>>        
56541>>>        Get AutoConnectionIDLogin to bOK
56542>>>        If (bOK = False) Begin
56544>>>            Function_Return True
56545>>>        End
56545>>>>
56545>>>        Get OpenTableExclusive hTable to bOK
56546>>>        If (bOK = False) Begin
56548>>>            Function_Return True
56549>>>        End
56549>>>>
56549>>>        Get _UtilTableIsEmbedded hTable to bIsEmbedded
56550>>>        If (bIsEmbedded = False) Begin
56552>>>            Function_Return True
56553>>>        End                             
56553>>>>
56553>>>        Get UtilTableIsAlias hTable to bIsAlias
56554>>>        If (bIsAlias = True) Begin
56556>>>            Function_Return True
56557>>>        End                     
56557>>>>
56557>>>        
56557>>>        Move False to Err
56558>>>        Get_Attribute DF_FILE_REVISION of hTable to sRevision
56561>>>        If (sRevision contains "2.3") Begin
56563>>>            Move False to Err
56564>>>            Set Private.phCurrentTable to hTable
56565>>>            Structure_Start hTable    
56566>>>                Set_Attribute DF_FILE_INTEGRITY_CHECK of hTable to True
56569>>>                Set Action_Text of ghoStatusPanel to "Restructures table to 3.0/4.0"
56570>>>            Structure_End hTable DF_STRUCTEND_OPT_FORCE "." ghoDbUpdateHandler
56572>>>            Set Action_Text of ghoStatusPanel to ""
56573>>>        End
56573>>>>
56573>>>        
56573>>>        Function_Return (Err = False)
56574>>>    End_Function
56575>>>
56575>>>    Function UtilTableFixALLBogusFilelistEntries Returns Boolean
56577>>>        Boolean bIgnore bExists bOK bResponse
56577>>>        Handle hTable   
56577>>>        String sTableName
56577>>>        
56577>>>        Move False to Err 
56578>>>        Move True to bOK
56579>>>        Move 0 to hTable
56580>>>        Repeat
56580>>>>
56580>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
56583>>>            If (hTable > 0) Begin
56585>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
56588>>>                Move (Uppercase(sTableName) = "FLEXERRS" or Uppercase(sTableName) = "CODETYPE" or Uppercase(sTableName) = "CODEMAST")  to bIgnore
56589>>>                If (bIgnore = False) Begin
56591>>>                    Get _UtilTableExists hTable to bExists
56592>>>                    If (bExists = False) Begin
56594>>>                        Get ApiTableChangeFileListSlot "" "" "" hTable DATAFLEX_ID to bResponse
56595>>>                        If (bResponse = False) Begin
56597>>>                            Move False to bOK
56598>>>                        End
56598>>>>
56598>>>                        
56598>>>                    End
56598>>>>
56598>>>                End
56598>>>>
56598>>>            End
56598>>>>
56598>>>        Until (hTable = 0)                     
56600>>>        
56600>>>        Set Action_Text of ghoStatusPanel to "" 
56601>>>        Function_Return bOK
56602>>>    End_Function
56603>>>    
56603>>>    // Replaces all date values with CS_DUFLowestAllowedDateValue for all tables in Filelist.cfg,
56603>>>    // _except_ those tables that has been excluded with the "ApiTableDateCorrectionAddException" message.
56603>>>    // If the passed bAllowZeroDates = True, date columns that are = 0 will not be changed.
56603>>>    // This is for prepairing embedded tables (*.dat) before an SQL conversion.
56603>>>    //
56603>>>    // The root of the problem is the following:
56603>>>    // The data type Date in SQL has a range of accepted values from 01-01-0001 through 12-31-9999
56603>>>    // while the data type DateTime has a range of accepted values from 01-01-1753 through 12-31-9999
56603>>>    // So if you happen to have a Date from before 1753, or an empty / NULL value - this will be outside
56603>>>    // the range that DateTime can handle and if you then try to change a Date column to a DateTime,
56603>>>    // an SQL error will be thrown;
56603>>>    // "The conversion of a date data type to a datetime data type resulted in an out-of-range value".
56603>>>    Function UtilTablesFixAllDateBogusValues Boolean bFixZeroDates Boolean bResetIndexesToOnLine Returns Boolean
56605>>>        Boolean bOK bIsAlias bIsSQL
56605>>>        Integer iCount iSize iDateSize
56605>>>        Handle hTable
56605>>>        String sLogicalName
56605>>>        Integer[] aTablesToCheck aDateFields
56607>>>
56607>>>        Get _AllTablesDateCorrections to aTablesToCheck
56608>>>        Move (SizeOfArray(aTablesToCheck)) to iSize
56609>>>        Set pbVisible    of ghoProgressBarOverall to True
56610>>>        Set piPosition   of ghoProgressBarOverall to 0
56611>>>        Set piMaximum    of ghoProgressBarOverall to iSize
56612>>>        Set piAdvanceBy  of ghoProgressBarOverall to 1
56613>>>
56613>>>        Move True to bOK
56614>>>        Decrement iSize
56615>>>        for iCount from 0 to iSize
56621>>>>
56621>>>            Move aTablesToCheck[iCount] to hTable
56622>>>            Set piPosition of ghoProgressBarOverall to iCount
56623>>>            Get UtilTableIsAlias hTable to bIsAlias
56624>>>            Get _UtilTableIsSql   hTable to bIsSQL
56625>>>
56625>>>            Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
56628>>>            Set TableName_Text of ghoStatusPanel to ("Processing Table Number:" * String(hTable) * "Name:" * String(sLogicalName))
56629>>>            Set Message_Text of ghoStatusPanel to "Fixing bogus date values..."
56630>>>
56630>>>            If (bIsAlias = False and bIsSQL = False) Begin
56632>>>                Get UtilCheckForDateFields hTable to aDateFields
56633>>>                Move (SizeOfArray(aDateFields)) to iDateSize
56634>>>                If (iDateSize > 0) Begin
56636>>>                    Get UtilTableCorrectBogusDateValues hTable aDateFields bFixZeroDates bResetIndexesToOnLine to bOK
56637>>>                    Close hTable
56638>>>                End
56638>>>>
56638>>>            End
56638>>>>
56638>>>        Loop
56639>>>>
56639>>>
56639>>>        Close DF_ALL
56640>>>        Function_Return bOK
56641>>>    End_Function
56642>>>
56642>>>    // Returns all fields of type Date or DateTime in an integer array with the field numbers.
56642>>>    Function UtilCheckForDateFields Handle hTable Returns Integer[]
56644>>>        Integer[] aDateFields aDateFieldsEmpty
56646>>>        Integer iSize iCount iType
56646>>>        Boolean bOpen bOK
56646>>>        
56646>>>        Get _UtilTableExists hTable to bOK
56647>>>        If (bOK = False) Begin
56649>>>            Set Private.phCurrentTable to hTable
56650>>>            Error DFERR_PROGRAM "Table exists in Filelist.cfg but not on disk or SQL back-end."
56651>>>>
56651>>>            Function_Return aDateFieldsEmpty
56652>>>        End
56652>>>>
56652>>>        Set Private.phCurrentTable to hTable
56653>>>        Set Private.piCurrentField to 0
56654>>>
56654>>>        Open hTable
56656>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
56659>>>        If (bOpen = False) Begin
56661>>>            Function_Return aDateFieldsEmpty
56662>>>        End
56662>>>>
56662>>>
56662>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iSize
56665>>>        For iCount from 1 to iSize
56671>>>>
56671>>>            Get_Attribute DF_FIELD_TYPE of hTable iCount to iType
56674>>>            If (iType = DF_DATE or iType = DF_DATETIME) Begin
56676>>>                Move iCount to aDateFields[SizeOfArray(aDateFields)]
56677>>>            End
56677>>>>
56677>>>        Loop
56678>>>>
56678>>>
56678>>>        Function_Return aDateFields
56679>>>    End_Function
56680>>>
56680>>>    // Loops through all records for the passed hTable, and checks that all Date values
56680>>>    // for the passed aDateFields array are OK. Else the Data value is set to CS_DUFLowestAllowedDateValue
56680>>>    // and the record is saved
56680>>>    // If the passed bAllowZeroDates = True, date columns that are = 0 will not be changed.
56680>>>    // Note: It first sets all indexes to BATCH and reset them at the end.
56680>>>    Function UtilTableCorrectBogusDateValues Handle hTable Integer[] aDateFields Boolean bFixZeroDates Boolean bResetIndexesToOnLine Returns Boolean
56682>>>        Integer iSize iCount iField iRecord iTotalRecords iDateFormat iDriverIndex
56682>>>        String sDriverID sDateMin
56682>>>        Boolean bCancel bFound bOK bChange bOpened bSaveChanges 
56682>>>        Date dDate dDateMin
56682>>>        Integer[] iaChangeField
56683>>>
56683>>>        Get _UtilTableExists hTable to bOK
56684>>>        // I believe we should just skip files not found and not report an error.
56684>>>        // This is because a filelist may have entries but no files/tables on disk, but
56684>>>        // this may be adjusted by other calls to DUF in a later update package. 
56684>>>        // Especially considering that this call is probably done at the very
56684>>>        // beginning of a DUF update.
56684>>>        If (bOK = False) Begin
56686>>>//            Set Private.phCurrentTable to hTable
56686>>>//            Error DFERR_PROGRAM "Table exists in Filelist.cfg but not on disk or SQL back-end."
56686>>>//            Function_Return False
56686>>>            Function_Return True
56687>>>        End
56687>>>>
56687>>>
56687>>>        // The CS_DUFLowestAllowedDateValue is defined as "01/01/1753", so we first set the
56687>>>        // date format to "USA" = "MM/DD/YYYY"
56687>>>        Get_Attribute DF_DATE_FORMAT to iDateFormat
56690>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_USA
56693>>>
56693>>>//        Send SetAllIndexesToBatch hTable True
56693>>>        Open hTable
56695>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
56698>>>        If (bOpened = False) Begin
56700>>>            Function_Return False
56701>>>        End
56701>>>>
56701>>>        
56701>>>        Set Private.phCurrentTable to hTable
56702>>>        Move 0 to iRecord
56703>>>        Move (SizeOfArray(aDateFields)) to iSize
56704>>>        Decrement iSize
56705>>>
56705>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
56708>>>        Get DriverIndex sDriverID to iDriverIndex
56709>>>        If (iDriverIndex <> 0) Begin
56711>>>            Get_Attribute DF_DRIVER_DUMMY_ZERO_DATE_VALUE of iDriverIndex to sDateMin
56714>>>            If (sDateMin = "") Begin
56716>>>                Move CS_DUFLowestAllowedDateValue to dDateMin
56717>>>            End
56717>>>>
56717>>>            Else Begin
56718>>>                If (IsDate(sDateMin)) Begin
56720>>>                    Move sDateMin to dDateMin
56721>>>                End
56721>>>>
56721>>>                Else Begin
56722>>>                    Move CS_DUFLowestAllowedDateValue to dDateMin
56723>>>                End
56723>>>>
56723>>>            End
56723>>>>
56723>>>        End
56723>>>>
56723>>>        Else Begin
56724>>>            Move CS_DUFLowestAllowedDateValue to dDateMin
56725>>>        End
56725>>>>
56725>>>
56725>>>        Get_Attribute DF_FILE_RECORDS_USED of hTable to iTotalRecords
56728>>>        Set piPosition   of ghoProgressBar to 0
56729>>>        Set piAdvanceBy  of ghoProgressBar to 100
56730>>>        Set piMaximum    of ghoProgressBar to iTotalRecords
56731>>>        Move False to Err
56732>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
56733>>>
56733>>>        Clear hTable
56734>>>        Repeat
56734>>>>
56734>>>            Vfind hTable 0 GT
56736>>>            Move Found to bFound
56737>>>            If (bFound = True) Begin
56739>>>                Move False to bSaveChanges
56740>>>                Move (ResizeArray(iaChangeField, 0)) to iaChangeField
56741>>>                Move (SizeOfArray(aDateFields)) to iSize
56742>>>                Decrement iSize
56743>>>                For iCount from 0 to iSize
56749>>>>
56749>>>                    Move aDateFields[iCount] to iField
56750>>>                    Get_Field_Value hTable iField to dDate
56753>>>                    If (bFixZeroDates = True) Begin
56755>>>                        Move (dDate = 0 or dDate < dDateMin) to bChange
56756>>>                    End
56756>>>>
56756>>>                    Else Begin
56757>>>                        Move (dDate <> 0 and dDate < dDateMin) to bChange
56758>>>                    End
56758>>>>
56758>>>                    If (bChange = True) Begin
56760>>>                        Move iField to iaChangeField[SizeOfArray(iaChangeField)]
56761>>>                    End
56761>>>>
56761>>>                Loop
56762>>>>
56762>>>
56762>>>                // Only change Date fields that needs to be changed.
56762>>>                If (SizeOfArray(iaChangeField)) Begin
56764>>>                    Reread hTable
56768>>>                        Move (SizeOfArray(iaChangeField)) to iSize
56769>>>                        Decrement iSize
56770>>>                        For iCount from 0 to iSize
56776>>>>
56776>>>                            Move iaChangeField[iCount] to iField
56777>>>                            Set Private.piCurrentField to iField
56778>>>                            Set_Field_Value hTable iField to dDateMin
56781>>>                        Loop
56782>>>>
56782>>>                        Move False to Err
56783>>>                        SaveRecord hTable
56784>>>                    Unlock
56785>>>>
56785>>>                End
56785>>>>
56785>>>
56785>>>                Increment iRecord
56786>>>                // Increment the StatusPanel counter and check the
56786>>>                // cancel status every 100 records rather than every
56786>>>                // record, it's way faster.
56786>>>                If (Mod(iRecord, 100) = 0) Begin
56788>>>                    Send DoAdvance of ghoProgressBar
56789>>>                    Set Action_Text of ghoStatusPanel to ("Record:" * String(iRecord))
56790>>>                    Get Check_StatusPanel of ghoStatusPanel to bCancel
56791>>>                End
56791>>>>
56791>>>            End
56791>>>>
56791>>>        Until (bFound = False)
56793>>>
56793>>>        Set_Attribute DF_DATE_FORMAT to iDateFormat
56796>>>        If (bResetIndexesToOnLine = True) Begin
56798>>>            Send SetAllIndexesToBatch hTable False
56799>>>        End
56799>>>>
56799>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
56800>>>
56800>>>        Function_Return (Err = False)
56801>>>    End_Function
56802>>>
56802>>>    // Compares the RootName, LogicalName & DisplayName and returns True if they are equal.
56802>>>    // Note that it first removes any driver prefixes in the rootname.
56802>>>    Function UtilTableInfoCompare Boolean bCompareFilelistUppercase tAPITableNameInfoCompare APITableInfoCompare Returns Boolean
56804>>>        Boolean bIsSame
56804>>>        String sRootNameFrom sRootNameTo sLogicalNameFrom sLogicalNameTo sDisplayNameFrom sDisplayNameTo
56804>>>
56804>>>        Get _TableNoPrefix APITableInfoCompare.sRootNameFrom    to sRootNameFrom
56805>>>        Get _TableNoPrefix APITableInfoCompare.sRootNameTo      to sRootNameTo
56806>>>        Move APITableInfoCompare.sLogicalNameFrom               to sLogicalNameFrom
56807>>>        Move APITableInfoCompare.sLogicalNameTo                 to sLogicalNameTo
56808>>>        Get _TableNoPrefix APITableInfoCompare.sDisplayNameFrom to sDisplayNameFrom
56809>>>        Get _TableNoPrefix APITableInfoCompare.sDisplayNameTo   to sDisplayNameTo
56810>>>
56810>>>        If (bCompareFilelistUppercase = True) Begin
56812>>>            Move (Uppercase(sRootNameFrom) = Uppercase(sRootNameTo) and Uppercase(sLogicalNameFrom) = Uppercase(sLogicalNameTo)) to bIsSame
56813>>>        End
56813>>>>
56813>>>        Else Begin
56814>>>            Move (sRootNameFrom = sRootNameTo and sLogicalNameFrom = sLogicalNameTo and sDisplayNameFrom = sDisplayNameTo) to bIsSame
56815>>>        End
56815>>>>
56815>>>        If (bIsSame = False) Begin
56817>>>            Function_Return False
56818>>>        End
56818>>>>
56818>>>
56818>>>        Move (APITableInfoCompare.bIsAliasFrom = APITableInfoCompare.bIsAliasTo) to bIsSame
56819>>>        If (bIsSame = False) Begin
56821>>>            Function_Return False
56822>>>        End
56822>>>>
56822>>>
56822>>>        Move (APITableInfoCompare.bIsSQLFrom = APITableInfoCompare.bIsSQLTo) to bIsSame
56823>>>        If (bIsSame = False) Begin
56825>>>            Function_Return False
56826>>>        End
56826>>>>
56826>>>
56826>>>        Move (APITableInfoCompare.bIsSystemFileFrom = APITableInfoCompare.bIsSystemFileTo) to bIsSame
56827>>>        If (bIsSame = False) Begin
56829>>>            Function_Return False
56830>>>        End
56830>>>>
56830>>>
56830>>>        Function_Return bIsSame
56831>>>    End_Function
56832>>>
56832>>>    Function UtilTableCompare tAPITable APITableFrom tAPITable APITableTo Boolean bCodeGenerateMode Boolean ByRef bFilelistError Returns Boolean
56834>>>        Handle hTableFrom hTableTo
56834>>>        Boolean bIsSame bIsSQLFrom bIsSQLTo
56834>>>        Boolean bCompareDate_DateTime bCompareIndexAscending bCompareIndexUppercase
56834>>>        String sRootName sDriverIDFrom sDriverIDTo
56834>>>        tAPIColumnCompare[]   aAPIColumnCompare
56834>>>        tAPIColumnCompare[]   aAPIColumnCompare
56835>>>        tAPIIndexCompare[]    aAPIIndexCompare
56835>>>        tAPIIndexCompare[]    aAPIIndexCompare
56836>>>        tAPIRelationCompare[] aAPIRelationCompare
56836>>>        tAPIRelationCompare[] aAPIRelationCompare
56837>>>
56837>>>        Move (IsSameStruct(APITableFrom, APITableTo)) to bIsSame
56838>>>        If (bIsSame = True) Begin
56840>>>            Function_Return True
56841>>>        End
56841>>>>
56841>>>
56841>>>        Move False to bFilelistError
56842>>>        Move True to bIsSame
56843>>>        Get pbCompareDate_DateTime  to bCompareDate_DateTime
56844>>>        Get pbCompareIndexAscending to bCompareIndexAscending
56845>>>        Get pbCompareIndexUppercase to bCompareIndexUppercase
56846>>>        Move APITableFrom.ApiTableInfo.iTableNumber to hTableFrom
56847>>>        Set Private.phCurrentTable to hTableFrom
56848>>>        
56848>>>        Move APITableTo.ApiTableInfo.iTableNumber   to hTableTo
56849>>>
56849>>>        Move APITableFrom.ApiTableInfo.sRootName to sRootName
56850>>>        Get _TableNameOnly sRootName             to sRootName
56851>>>        Move sRootName to APITableTo.ApiTableInfo.sRootName
56852>>>
56852>>>        // First we need to check that the logical table names are the same (so the order of tables in the Filelist.cfg is the same).
56852>>>        // bCodeGenerateMode = True = Code Generation mode.
56852>>>        If (bCodeGenerateMode = True) Begin
56854>>>            // If table doesn't exist in the TO database we want to create 'ApiTableUpdate' code for it.
56854>>>            If (Trim(Uppercase(APITableTo.ApiTableInfo.sLogicalName)) = "") Begin
56856>>>                Function_Return False
56857>>>            End
56857>>>>
56857>>>            Move (Trim(Uppercase(APITableFrom.ApiTableInfo.sLogicalName)) = Trim(Uppercase(APITableTo.ApiTableInfo.sLogicalName))) to bIsSame
56858>>>            If (bIsSame = False) Begin
56860>>>                Send UserError ("Yikes! There is a serious problem with the Filelist.cfg slot number:" * String(hTableFrom) + ".\nThe FROM table logical name is:" * String(APITableFrom.ApiTableInfo.sLogicalName) * "\nwhile the TO table logical name is:" * String(APITableTo.ApiTableInfo.sLogicalName) * ".\nThis needs to be fixed before you can generate code for this table number.")
56861>>>                Move True to bFilelistError
56862>>>                Function_Return False
56863>>>            End
56863>>>>
56863>>>        End
56863>>>>
56863>>>
56863>>>        If (bCodeGenerateMode = False) Begin
56865>>>            // Then we want to create this table
56865>>>            If (Trim(Uppercase(APITableTo.ApiTableInfo.sLogicalName)) = "") Begin
56867>>>                Function_Return False
56868>>>            End
56868>>>>
56868>>>
56868>>>            Move (Trim(Uppercase(APITableFrom.ApiTableInfo.sLogicalName)) = Trim(Uppercase(APITableTo.ApiTableInfo.sLogicalName))) to bIsSame
56869>>>            If (bIsSame = False) Begin
56871>>>                Error DFERR_PROGRAM ("'UtilTableCompare function' problem in Filelist.cfg! Table No:" * String(hTableFrom) + ".\nThe FROM table logical name is:" * String(APITableFrom.ApiTableInfo.sLogicalName) * "\nwhile the TO table logical name is:" * String(APITableTo.ApiTableInfo.sLogicalName) * "No changes was made for this entry.")
56872>>>>
56872>>>                Move True to bFilelistError
56873>>>                Function_Return False
56874>>>            End
56874>>>>
56874>>>        End
56874>>>>
56874>>>
56874>>>        // Check columns:
56874>>>        Move APITableFrom.ApiTableInfo.iTableNumber to hTableFrom
56875>>>        Move APITableFrom.ApiTableInfo.bIsSQL       to bIsSQLFrom
56876>>>        Move APITableFrom.ApiTableInfo.sDriverID    to sDriverIDFrom
56877>>>        Move APITableTo.ApiTableInfo.iTableNumber   to hTableTo
56878>>>        Move APITableTo.ApiTableInfo.bIsSQL         to bIsSQLTo
56879>>>        Move APITableTo.ApiTableInfo.sDriverID      to sDriverIDTo
56880>>>        Get UtilColumnsStructFill hTableTo          to APITableTo.aApiColumns
56881>>>        Get UtilColumnCombineFromAndToArrays APITableFrom.aApiColumns APITableTo.aApiColumns to aAPIColumnCompare
56882>>>        Get UtilColumnsCompare sDriverIDFrom sDriverIDTo bIsSQLFrom bIsSQLTo aAPIColumnCompare bCompareDate_DateTime to bIsSame
56883>>>        If (bIsSame = False) Begin
56885>>>            Function_Return False
56886>>>        End
56886>>>>
56886>>>
56886>>>        // ...then check indexes:
56886>>>        Get UtilIndexesStructFill hTableFrom to APITableTo.aApiIndexes
56887>>>        Get UtilIndexCombineFromAndToArrays APITableFrom.aApiIndexes APITableTo.aApiIndexes to aAPIIndexCompare
56888>>>        Get UtilIndexesCompare bIsSQLFrom bIsSQLTo aAPIIndexCompare bCompareIndexUppercase bCompareIndexAscending to bIsSame
56889>>>        If (bIsSame = False) Begin
56891>>>            Function_Return False
56892>>>        End
56892>>>>
56892>>>
56892>>>        // ...and finally relationships:
56892>>>        Get UtilRelationsStructFill hTableFrom to APITableTo.aApiRelations
56893>>>        Get UtilRelationCombineFromAndToArrays APITableFrom.aApiRelations APITableTo.aApiRelations to aAPIRelationCompare
56894>>>        Move (IsSameArray(APITableFrom.aApiRelations, APITableTo.aApiRelations)) to bIsSame
56895>>>        Get UtilRelationsCompare hTableFrom aAPIRelationCompare to bIsSame
56896>>>
56896>>>        Function_Return (bIsSame = True)
56897>>>    End_Function
56898>>>
56898>>>    // Similar to UtilTableCompare, but takes a tAPITableCompare struct array and a tAPITableBooleans struct as params.
56898>>>    Function UtilTableCompare_Ex tAPITableCompare APITableCompare tAPITableBooleans CompareTableBooleans Boolean bCodeGenerateMode Boolean ByRef bFilelistError Returns Boolean
56900>>>        Handle hTable
56900>>>        Boolean bIsSame bIsSQLFrom bIsSQLTo
56900>>>        String sRootName sDriverIDFrom sDriverIDTo
56900>>>
56900>>>        If (APITableCompare.APITableNameInfoCompare.bExistsFrom = False and APITableCompare.APITableNameInfoCompare.bExistsTo = False) Begin
56902>>>            Move True to bFilelistError
56903>>>            Function_Return False
56904>>>        End
56904>>>>
56904>>>
56904>>>        Move APITableCompare.hTable to hTable
56905>>>        Move True  to bIsSame
56906>>>        Move False to bFilelistError
56907>>>
56907>>>        If (APITableCompare.bExistsFrom = True) Begin
56909>>>            Move APITableCompare.APITableNameInfoCompare.sRootNameFrom to sRootName
56910>>>        End
56910>>>>
56910>>>        Else Begin
56911>>>            Move APITableCompare.APITableNameInfoCompare.sRootNameTo   to sRootName
56912>>>        End
56912>>>>
56912>>>        Get _TableNameOnly sRootName                                   to sRootName
56913>>>
56913>>>        Move APITableCompare.APITableNameInfoCompare.sDriverIDFrom     to sDriverIDFrom
56914>>>        Move APITableCompare.APITableNameInfoCompare.sDriverIDTo       to sDriverIDTo
56915>>>        Move APITableCompare.APITableNameInfoCompare.bIsSQLFrom        to bIsSQLFrom
56916>>>        Move APITableCompare.APITableNameInfoCompare.bIsSQLTo          to bIsSQLTo
56917>>>
56917>>>        // First we need to check that the logical table names are the same (so the order of tables in the Filelist.cfg are the same).
56917>>>        // bCodeGenerateMode = True = Code Generation mode.
56917>>>        If (bCodeGenerateMode = True) Begin
56919>>>            // If table doesn't exist in the TO database we want to create 'ApiTableUpdate' code for it.
56919>>>            If (APITableCompare.bExistsTo = False) Begin
56921>>>                Function_Return False
56922>>>            End
56922>>>>
56922>>>            Move (Uppercase(APITableCompare.APITableNameInfoCompare.sLogicalNameFrom) = Uppercase(APITableCompare.APITableNameInfoCompare.sLogicalNameTo)) to bIsSame
56923>>>            If (bIsSame = False) Begin
56925>>>                Send UserError ("Yikes! There is a problem with the Filelist.cfg slot number:" * String(hTable) + ;                    ".\nThe FROM table logical name is:" * String(APITableCompare.APITableNameInfoCompare.sLogicalNameFrom) * "\nwhile the TO table logical name is:" * ;                    String(APITableCompare.APITableNameInfoCompare.sLogicalNameTo) * ".\nThis needs to be fixed before you can generate code for this table number.")
56926>>>                Move True to bFilelistError
56927>>>                Function_Return False
56928>>>            End
56928>>>>
56928>>>        End
56928>>>>
56928>>>
56928>>>        If (bCodeGenerateMode = False) Begin
56930>>>            If (APITableCompare.bExistsTo = False) Begin
56932>>>                // Then we might want to create this table
56932>>>                Function_Return False
56933>>>            End
56933>>>>
56933>>>
56933>>>            Move (APITableCompare.APITableNameInfoCompare.bIsAliasFrom = APITableCompare.APITableNameInfoCompare.bIsAliasTo) to bIsSame
56934>>>            If (bIsSame = False) Begin
56936>>>                Function_Return False
56937>>>            End
56937>>>>
56937>>>
56937>>>            Move (APITableCompare.APITableNameInfoCompare.bIsSQLFrom = APITableCompare.APITableNameInfoCompare.bIsSQLTo) to bIsSame
56938>>>            If (bIsSame = False) Begin
56940>>>                Function_Return False
56941>>>            End
56941>>>>
56941>>>
56941>>>            Move (APITableCompare.APITableNameInfoCompare.bIsSystemFileFrom = APITableCompare.APITableNameInfoCompare.bIsSystemFileTo) to bIsSame
56942>>>            If (bIsSame = False) Begin
56944>>>                Function_Return False
56945>>>            End
56945>>>>
56945>>>
56945>>>            // Check table names et al.
56945>>>            Get UtilTableInfoCompare CompareTableBooleans.bCompareFilelistUppercase APITableCompare.APITableNameInfoCompare to bIsSame
56946>>>            If (bIsSame = False) Begin
56948>>>                Function_Return False
56949>>>            End
56949>>>>
56949>>>        End
56949>>>>
56949>>>
56949>>>        // Check Columns:
56949>>>        Get UtilColumnsCompare sDriverIDFrom sDriverIDTo bIsSQLFrom bIsSQLTo APITableCompare.aAPIColumnsCompare CompareTableBooleans.bCompareDate_DateTime to bIsSame
56950>>>        If (bIsSame = False) Begin
56952>>>            Function_Return False
56953>>>        End
56953>>>>
56953>>>
56953>>>        // ...then check Indexes:
56953>>>        Get UtilIndexesCompare bIsSQLFrom bIsSQLTo APITableCompare.aAPIIndexesCompare CompareTableBooleans.bCompareIndexUppercase CompareTableBooleans.bCompareIndexAscending to bIsSame
56954>>>        If (bIsSame = False) Begin
56956>>>            Function_Return False
56957>>>        End
56957>>>>
56957>>>
56957>>>        // ...and finally Relationships:
56957>>>        Get UtilRelationsCompare hTable APITableCompare.aAPIRelationsCompare to bIsSame
56958>>>
56958>>>        Function_Return (bIsSame = True)
56959>>>    End_Function
56960>>>
56960>>>    // To fill a complete Table array structure (tAPITable[]) with data.
56960>>>    // The data + filelist.cfg path, login et al must have been setup properly first.
56960>>>    // Pass a True as first parameter if the ghoStatusPanel is active and progress info should be shown.
56960>>>    // Pass a second True if this is a comparison and the text should either reflect "FROM" or "TO" database.
56960>>>    Function UtilTablesStructArrayFill Boolean bStatusPanel Boolean bCompareUtil Boolean bFromTables Returns tAPITable[]
56962>>>        tAPITableNameInfo ApiTableNameInfo
56962>>>        tAPITableNameInfo ApiTableNameInfo
56962>>>        tAPITable[]     aApiTables aApiTablesEmpty
56962>>>        tAPITable[]     aApiTables aApiTablesEmpty
56964>>>        tAPIColumn[]    aApiColumns
56964>>>        tAPIColumn[]    aApiColumns
56965>>>        tAPIIndex[]     aApiIndexes
56965>>>        tAPIIndex[]     aApiIndexes
56966>>>        tAPIRelation[]  aApiRelations
56966>>>        tAPIRelation[]  aApiRelations
56967>>>        Handle hTable
56967>>>        Integer iCount
56967>>>        Boolean bUserCancel bOK
56967>>>        String sLogicalName sMessageText
56967>>>
56967>>>        Get AutoConnectionIDLogin to bOK
56968>>>        Move 0 to hTable
56969>>>        If (bFromTables = True) Begin
56971>>>            Move "Reading 'FROM' Table Structure:" to sMessageText
56972>>>            If (bCompareUtil = True) Begin
56974>>>                Move (sMessageText * "(1 of 3)") to sMessageText
56975>>>            End
56975>>>>
56975>>>        End
56975>>>>
56975>>>        Else Begin
56976>>>            Move "Reading 'TO' Table Structure:" to sMessageText
56977>>>            If (bCompareUtil = True) Begin
56979>>>                Move (sMessageText * "(2 of 3)") to sMessageText
56980>>>            End
56980>>>>
56980>>>        End
56980>>>>
56980>>>        Set Message_Text of ghoStatusPanel to sMessageText
56981>>>
56981>>>        Get UtilFilelistNoOfTables to iCount
56982>>>        Set piMaximum of ghoProgressBar to iCount
56983>>>        Move 0 to iCount
56984>>>
56984>>>        Repeat
56984>>>>
56984>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
56987>>>            If (hTable > 0 and hTable <> 50) Begin
56989>>>
56989>>>                Open hTable
56991>>>                // ToDo: Needs to be revised
56991>>>                // For some reason tables may be reported as "unopened", while in
56991>>>                // fact the open was successful (!)
56991>>>//                Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
56991>>>//                If (bIsOpen = False) Begin
56991>>>//                    Move True to aApiTablesEmpty[0].bError
56991>>>//                    Move hTable to aApiTablesEmpty[0].ApiTableInfo.iTableNumber
56991>>>//                    Function_Return aApiTablesEmpty
56991>>>//                End
56991>>>
56991>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
56994>>>                Set piPosition of ghoProgressBar to iCount
56995>>>                Send DoAdvance of ghoProgressBarOverall
56996>>>                Set Action_Text of ghoStatusPanel to ("Number:" * String(hTable) * String(sLogicalName))
56997>>>
56997>>>                Get UtilTableStructFill hTable bFromTables to aApiTables[iCount]
56998>>>//                Close hTable DF_PERMANENT
56998>>>                Increment iCount
56999>>>            End
56999>>>>
56999>>>
56999>>>            If (bStatusPanel = True) Begin
57001>>>                Get Check_StatusPanel of ghoStatusPanel to bUserCancel
57002>>>                If (bUserCancel = True) Begin
57004>>>                    Move True to aApiTablesEmpty[0].bCancel
57005>>>                    Function_Return aApiTablesEmpty
57006>>>                End
57006>>>>
57006>>>            End
57006>>>>
57006>>>
57006>>>        Until (hTable = 0)
57008>>>
57008>>>        Function_Return aApiTables
57009>>>    End_Function
57010>>>
57010>>>    // Returns a 'single' table APITable struct.
57010>>>    Function UtilTableStructFill Handle hTable Boolean bFromTables Returns tAPITable
57012>>>        tAPITableNameInfo ApiTableNameInfo
57012>>>        tAPITableNameInfo ApiTableNameInfo
57012>>>        tAPITable         ApiTable ApiTableEmpty
57012>>>        tAPITable         ApiTable ApiTableEmpty
57012>>>        tAPIColumn[]     aApiColumns
57012>>>        tAPIColumn[]     aApiColumns
57013>>>        tAPIIndex[]      aApiIndexes
57013>>>        tAPIIndex[]      aApiIndexes
57014>>>        tAPIRelation[]   aApiRelations
57014>>>        tAPIRelation[]   aApiRelations
57015>>>        Boolean bIsOpen
57015>>>
57015>>>        Open hTable
57017>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
57020>>>        If (bIsOpen = False) Begin
57022>>>            Move True to ApiTableEmpty.bError
57023>>>            Move hTable to ApiTableEmpty.ApiTableInfo.iTableNumber
57024>>>            Function_Return ApiTableEmpty
57025>>>        End
57025>>>>
57025>>>
57025>>>        // Fill Table Name Info
57025>>>        Get UtilTableNameInfoStructFill hTable to ApiTableNameInfo
57026>>>
57026>>>        // Fill columns
57026>>>        Get UtilColumnsStructFill hTable to aApiColumns
57027>>>        If (SizeOfArray(aApiColumns)) Begin
57029>>>            If (aApiColumns[0].bCancel = True) Begin
57031>>>                Move True to ApiTableEmpty.bError
57032>>>                Move hTable to ApiTableEmpty.ApiTableInfo.iTableNumber
57033>>>                Function_Return ApiTableEmpty
57034>>>            End
57034>>>>
57034>>>        End
57034>>>>
57034>>>
57034>>>        // Fill indexes
57034>>>        Get UtilIndexesStructFill hTable to aApiIndexes
57035>>>        If (SizeOfArray(aApiIndexes)) Begin
57037>>>            If (aApiIndexes[0].bCancel = True) Begin
57039>>>                Move True to ApiTableEmpty.bError
57040>>>                Move hTable to ApiTableEmpty.ApiTableInfo.iTableNumber
57041>>>                Function_Return ApiTableEmpty
57042>>>            End
57042>>>>
57042>>>        End
57042>>>>
57042>>>
57042>>>        // Fill relationships
57042>>>        Get UtilRelationsStructFill hTable to aApiRelations
57043>>>        If (SizeOfArray(aApiRelations)) Begin
57045>>>            If (aApiRelations[0].bCancel = True) Begin
57047>>>                Move True to ApiTableEmpty.bError
57048>>>                Move hTable to ApiTableEmpty.ApiTableInfo.iTableNumber
57049>>>                Function_Return ApiTableEmpty
57050>>>            End
57050>>>>
57050>>>        End
57050>>>>
57050>>>
57050>>>        Move hTable             to ApiTable.hTable
57051>>>        Move bFromTables        to ApiTable.bFromTable
57052>>>        Move (not(bFromTables)) to ApiTable.bToTable
57053>>>
57053>>>        Move ApiTableNameInfo   to ApiTable.ApiTableInfo
57054>>>        Move aApiColumns        to ApiTable.aApiColumns
57055>>>        Move aApiIndexes        to ApiTable.aApiIndexes
57056>>>        Move aApiRelations      to ApiTable.aApiRelations
57057>>>
57057>>>        Function_Return ApiTable
57058>>>    End_Function
57059>>>
57059>>>    Function UtilTableNameInfoStructFill Handle hTable Returns tAPITableNameInfo
57061>>>        tAPITableNameInfo APITableNameInfo APITableNameInfoEmpty
57061>>>        tAPITableNameInfo APITableNameInfo APITableNameInfoEmpty
57061>>>        Boolean bIsOpen
57061>>>
57061>>>        Open hTable
57063>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
57066>>>        If (bIsOpen = False) Begin
57068>>>            Move True   to APITableNameInfoEmpty.bError
57069>>>            Move hTable to APITableNameInfoEmpty.iTableNumber
57070>>>            Function_Return APITableNameInfoEmpty
57071>>>        End
57071>>>>
57071>>>
57071>>>        Move hTable                                  to APITableNameInfo.iTableNumber
57072>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to APITableNameInfo.sRootName
57075>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to APITableNameInfo.sLogicalName
57078>>>        Get_Attribute DF_FILE_DISPLAY_NAME of hTable to APITableNameInfo.sDisplayName
57081>>>        Get_Attribute DF_FILE_DRIVER       of hTable to APITableNameInfo.sDriverID
57084>>>
57084>>>        Get UtilTableIsAlias                  hTable to APITableNameInfo.bIsAlias
57085>>>        Get _UtilTableIsSql                   hTable to APITableNameInfo.bIsSQL
57086>>>
57086>>>        Function_Return APITableNameInfo
57087>>>    End_Function
57088>>>
57088>>>    Function UtilFindTableArrayItem tAPITable[] ByRef aTableStructure String sLogicalTableName Returns Integer
57090>>>        Integer iSize iCount iItem
57090>>>        tAPITableNameInfo ApiTableNameInfo
57090>>>        tAPITableNameInfo ApiTableNameInfo
57090>>>
57090>>>        Move -1 to iItem
57091>>>        Move (SizeOfArray(aTableStructure)) to iSize
57092>>>        Decrement iSize
57093>>>        for iCount from 0 to iSize
57099>>>>
57099>>>            Move aTableStructure[iCount].ApiTableInfo to ApiTableNameInfo
57100>>>            If (Uppercase(ApiTableNameInfo.sLogicalName) = Uppercase(sLogicalTableName)) Begin
57102>>>                Move iCount to iItem
57103>>>                Move iSize  to iCount // We're done.
57104>>>            End
57104>>>>
57104>>>        Loop
57105>>>>
57105>>>
57105>>>        Function_Return iItem
57106>>>    End_Function
57107>>>
57107>>>    Function UtilTableArrayCompare tAPITable APITableFrom tAPITable APITableTo Returns Integer
57109>>>        If (APITableFrom.hTable  > APITableTo.hTable) ;            Function_Return (GT)
57112>>>        If (APITableFrom.hTable  < APITableTo.hTable) ;            Function_Return (LT)
57115>>>
57115>>>        If (APITableFrom.bFromTable = True)  ;            Function_Return (LT)
57118>>>        If (APITableFrom.bFromTable = False) ;            Function_Return (GT)
57121>>>
57121>>>        Function_Return (EQ)
57122>>>    End_Function
57123>>>
57123>>>    Function UtilTableCombineFromAndToArrays tAPITable[] aAPITableFrom tAPITable[] aAPITableTo Returns tAPITableCompare[]
57125>>>        Integer iCount iSize iSizeFrom iSizeTo iItemFrom iItemTo iItem
57125>>>        Handle hTable
57125>>>        tAPITable[] aAPITableFromAndTo
57125>>>        tAPITable[] aAPITableFromAndTo
57126>>>        tAPITable   APITableFrom APITableTo APITableEmpty
57126>>>        tAPITable   APITableFrom APITableTo APITableEmpty
57126>>>        tAPITableNameInfoCompare APITableNameInfoCompare
57126>>>        tAPITableNameInfoCompare APITableNameInfoCompare
57126>>>        tAPITableCompare[]    aAPITableCompare // This is the result set for this function
57126>>>        tAPITableCompare[]    aAPITableCompare // This is the result set for this function
57127>>>        tAPIColumnCompare[]   aAPIColumnCompare
57127>>>        tAPIColumnCompare[]   aAPIColumnCompare
57128>>>        tAPIIndexCompare[]    aAPIIndexCompare
57128>>>        tAPIIndexCompare[]    aAPIIndexCompare
57129>>>        tAPIRelationCompare[] aAPIRelationCompare
57129>>>        tAPIRelationCompare[] aAPIRelationCompare
57130>>>        tAPITableNameInfo ApiTableInfoEmpty ApiTableInfoFrom ApiTableInfoTo
57130>>>        tAPITableNameInfo ApiTableInfoEmpty ApiTableInfoFrom ApiTableInfoTo
57130>>>        tAPIColumn[]   aApiColumnsEmpty aApiColumnsFrom aApiColumnsTo
57130>>>        tAPIColumn[]   aApiColumnsEmpty aApiColumnsFrom aApiColumnsTo
57133>>>        tAPIIndex[]    aApiIndexEmpty aApiIndexFrom aApiIndexTo
57133>>>        tAPIIndex[]    aApiIndexEmpty aApiIndexFrom aApiIndexTo
57136>>>        tAPIRelation[] aApiRelationEmpty aApiRelationFrom aApiRelationTo
57136>>>        tAPIRelation[] aApiRelationEmpty aApiRelationFrom aApiRelationTo
57139>>>
57139>>>        Move (SizeOfArray(aAPITableFrom)) to iSizeFrom
57140>>>        Move (SizeOfArray(aAPITableTo))   to iSizeTo
57141>>>        If (iSizeFrom = 0 and iSizeTo = 0) Begin
57143>>>            Function_Return aAPITableCompare
57144>>>        End
57144>>>>
57144>>>
57144>>>        Move (AppendArray(aAPITableFrom, aAPITableTo)) to aAPITableFromAndTo
57145>>>        Move (SortArray(aAPITableFromAndTo, Self, RefFunc(UtilTableArrayCompare))) to aAPITableFromAndTo
57146>>>
57146>>>        Move 0 to iItem
57147>>>        Move (SizeOfArray(aAPITableFromAndTo)) to iSize
57148>>>        Decrement iSize
57149>>>        for iCount from 0 to iSize
57155>>>>
57155>>>
57155>>>            Move iCount to iItemFrom
57156>>>            Move iCount to iItemTo
57157>>>            Move APITableEmpty to APITableFrom
57158>>>            Move APITableEmpty to APITableTo
57159>>>
57159>>>            If (aAPITableFromAndTo[iCount].bFromTable = True) Begin
57161>>>                Move aAPITableFromAndTo[iCount]     to APITableFrom
57162>>>            End
57162>>>>
57162>>>            If (aAPITableFromAndTo[iCount].bToTable = True) Begin
57164>>>                Move aAPITableFromAndTo[iCount]     to APITableTo
57165>>>            End
57165>>>>
57165>>>            If (aAPITableFromAndTo[iCount].hTable = aAPITableFromAndTo[iCount + 1].hTable) Begin
57167>>>                Move aAPITableFromAndTo[iCount]     to APITableFrom
57168>>>                Move (iCount + 1) to iItemTo
57169>>>                Move aAPITableFromAndTo[iItemTo]    to APITableTo
57170>>>            End
57170>>>>
57170>>>            If (APITableFrom.hTable > APITableTo.hTable) Begin
57172>>>                Get FindTableNumber aAPITableTo APITableFrom.hTable to iItemTo
57173>>>                If (iItemTo <> -1) Begin
57175>>>                    Move aAPITableTo[iItemTo] to APITableTo
57176>>>                End
57176>>>>
57176>>>                Else Begin
57177>>>                    Move APITableEmpty to APITableTo
57178>>>                End
57178>>>>
57178>>>            End
57178>>>>
57178>>>
57178>>>            Move APITableFrom.ApiTableInfo  to ApiTableInfoFrom
57179>>>            Move APITableFrom.aApiColumns   to aApiColumnsFrom
57180>>>            Move APITableFrom.aApiIndexes   to aApiIndexFrom
57181>>>            Move APITableFrom.aApiRelations to aApiRelationFrom
57182>>>
57182>>>            Move APITableTo.ApiTableInfo    to ApiTableInfoTo
57183>>>            Move APITableTo.aApiColumns     to aApiColumnsTo
57184>>>            Move APITableTo.aApiIndexes     to aApiIndexTo
57185>>>            Move APITableTo.aApiRelations   to aApiRelationTo
57186>>>
57186>>>            Move aAPITableFromAndTo[iCount].hTable to hTable
57187>>>
57187>>>            If (hTable > 0) Begin
57189>>>
57189>>>                // Table info:
57189>>>                Get UtilTableINFOCombineFromAndToArrays ApiTableInfoFrom ApiTableInfoTo to APITableNameInfoCompare
57190>>>                Move APITableNameInfoCompare.iTableNumber                               to aAPITableCompare[iItem].hTable
57191>>>                Move APITableNameInfoCompare.bExistsFrom                                to aAPITableCompare[iItem].bExistsFrom
57192>>>                Move APITableNameInfoCompare.bExistsTo                                  to aAPITableCompare[iItem].bExistsTo
57193>>>                Move APITableNameInfoCompare                                            to aAPITableCompare[iItem].APITableNameInfoCompare
57194>>>
57194>>>                // Column info:
57194>>>                Get UtilColumnCombineFromAndToArrays aApiColumnsFrom aApiColumnsTo      to aAPIColumnCompare
57195>>>                Move aAPIColumnCompare                                                  to aAPITableCompare[iItem].aAPIColumnsCompare
57196>>>
57196>>>                // Index info:
57196>>>                Get UtilIndexCombineFromAndToArrays aApiIndexFrom aApiIndexTo           to aAPIIndexCompare
57197>>>                Move aAPIIndexCompare                                                   to aAPITableCompare[iItem].aAPIIndexesCompare
57198>>>
57198>>>                // Relation info:
57198>>>                Get UtilRelationCombineFromAndToArrays aApiRelationFrom aApiRelationTo  to aAPIRelationCompare
57199>>>                Move aAPIRelationCompare                                                to aAPITableCompare[iItem].aAPIRelationsCompare
57200>>>
57200>>>                Move False                                                              to aAPITableCompare[iItem].bShouldChange
57201>>>                Move False                                                              to aAPITableCompare[iItem].bCancel
57202>>>                Move False                                                              to aAPITableCompare[iItem].bError
57203>>>                If (iItemTo > iItemFrom) Begin
57205>>>                    Increment iCount
57206>>>                End
57206>>>>
57206>>>                Increment iItem
57207>>>            End
57207>>>>
57207>>>
57207>>>        Loop
57208>>>>
57208>>>
57208>>>        Function_Return aAPITableCompare
57209>>>    End_Function
57210>>>
57210>>>    Function FindTableNumber tAPITable[] ByRef aTableStructure Handle hTable Returns Integer
57212>>>        Integer iSize iCount iItem
57212>>>        tAPITableNameInfo ApiTableNameInfo
57212>>>        tAPITableNameInfo ApiTableNameInfo
57212>>>
57212>>>        Move -1 to iItem
57213>>>        Move (SizeOfArray(aTableStructure)) to iSize
57214>>>        Decrement iSize
57215>>>        For iCount from 0 to iSize
57221>>>>
57221>>>            Move aTableStructure[iCount].ApiTableInfo to ApiTableNameInfo
57222>>>            If (ApiTableNameInfo.iTableNumber = hTable) Begin
57224>>>                Move iCount to iItem
57225>>>                Move iSize  to iCount // We're done.
57226>>>            End
57226>>>>
57226>>>        Loop
57227>>>>
57227>>>
57227>>>        Function_Return iItem
57228>>>    End_Function
57229>>>
57229>>>    Function UtilTableInfoCombineFromAndToArrays tAPITableNameInfo APITableNameInfoFrom tAPITableNameInfo APITableNameInfoTo Returns tAPITableNameInfoCompare
57231>>>        tAPITableNameInfoCompare APITableNameInfoCompare
57231>>>        tAPITableNameInfoCompare APITableNameInfoCompare
57231>>>
57231>>>        If (APITableNameInfoFrom.iTableNumber = 0 and APITableNameInfoTo.iTableNumber = 0) Begin
57233>>>            Function_Return APITableNameInfoCompare
57234>>>        End
57234>>>>
57234>>>
57234>>>        // FROM database info:
57234>>>        If (APITableNameInfoFrom.iTableNumber > 0) Begin
57236>>>            Move APITableNameInfoFrom.iTableNumber  to APITableNameInfoCompare.iTableNumber
57237>>>            Move APITableNameInfoFrom.sRootName     to APITableNameInfoCompare.sRootNameFrom
57238>>>            Move APITableNameInfoFrom.sLogicalName  to APITableNameInfoCompare.sLogicalNameFrom
57239>>>            Move APITableNameInfoFrom.sDisplayName  to APITableNameInfoCompare.sDisplayNameFrom
57240>>>            Move APITableNameInfoFrom.sDriverID     to APITableNameInfoCompare.sDriverIDFrom
57241>>>            Move APITableNameInfoFrom.bIsAlias      to APITableNameInfoCompare.bIsAliasFrom
57242>>>            Move APITableNameInfoFrom.bIsSQL        to APITableNameInfoCompare.bIsSQLFrom
57243>>>            Move True                               to APITableNameInfoCompare.bExistsFrom
57244>>>        End
57244>>>>
57244>>>
57244>>>        // TO database info:
57244>>>        If (APITableNameInfoTo.iTableNumber > 0) Begin
57246>>>            Move APITableNameInfoTo.iTableNumber    to APITableNameInfoCompare.iTableNumber
57247>>>            Move APITableNameInfoTo.sRootName       to APITableNameInfoCompare.sRootNameTo
57248>>>            Move APITableNameInfoTo.sLogicalName    to APITableNameInfoCompare.sLogicalNameTo
57249>>>            Move APITableNameInfoTo.sDisplayName    to APITableNameInfoCompare.sDisplayNameTo
57250>>>            Move APITableNameInfoTo.sDriverID       to APITableNameInfoCompare.sDriverIDTo
57251>>>            Move APITableNameInfoTo.bIsAlias        to APITableNameInfoCompare.bIsAliasTo
57252>>>            Move APITableNameInfoTo.bIsSQL          to APITableNameInfoCompare.bIsSQLTo
57253>>>            Move True                               to APITableNameInfoCompare.bExistsTo
57254>>>        End
57254>>>>
57254>>>
57254>>>        Function_Return APITableNameInfoCompare
57255>>>    End_Function
57256>>>
57256>>>    // Note:
57256>>>    // The DF_FILE_TABLE_NAME attribute holds the name of the table at the back end. Depending on the back end, table
57256>>>    // names may be case sensitive, contain spaces or other special characters. This attribute is used to determine a table's
57256>>>    // back end name when using Embedded SQL. Since Embedded SQL works on the back end directly, the back end's name must be used.
57256>>>    // In most cases the back end name will be the same as the table name used in DataFlex.
57256>>>    // To do the opposite; To get the file handle from a table name string use the UtilTableNameToHandle function.
57256>>>    Function UtilTableHandleToString Handle hTable Returns String
57258>>>        String sTableName
57258>>>        Boolean bOpen bExists bOK
57258>>>
57258>>>        Get _UtilTableNumberIsInUse hTable to bExists
57259>>>        If (bExists = False) Begin
57261>>>            Function_Return ""
57262>>>        End
57262>>>>
57262>>>
57262>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
57263>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
57266>>>        If (bOpen = False) Begin
57268>>>            Get AutoConnectionIDLogin to bOK
57269>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57270>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_INTERMEDIATE_FILE
57271>>>            Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
57272>>>            Open hTable
57274>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57275>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_INTERMEDIATE_FILE
57276>>>            Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
57277>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
57280>>>        End
57280>>>>
57280>>>        If (bOpen = True) Begin
57282>>>            Send Ignore_Error of Error_Object_Id DFERR_UNSUPPORTED_ATTRIBUTE
57283>>>            Get_Attribute DF_FILE_TABLE_NAME of hTable to sTableName
57286>>>            // If blank it is an embedded table:
57286>>>            If (sTableName = "") Begin
57288>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
57291>>>                Move 0 to LastErr
57292>>>                Move False to Err
57293>>>            End
57293>>>>
57293>>>            Send Trap_Error of Error_Object_Id DFERR_UNSUPPORTED_ATTRIBUTE
57294>>>        End
57294>>>>
57294>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
57295>>>        Move 0 to LastErr
57296>>>
57296>>>        Function_Return sTableName
57297>>>    End_Function
57298>>>
57298>>>    // Returns the filenumber for the passed Table name from Filelist.cfg.
57298>>>    // Returns 0 if unsuccessful.
57298>>>    // To do the opposite; To get the string value from a table handle string use the UtilTableHandleToString function.
57298>>>    Function UtilTableNameToHandle String sTableName Returns Integer
57300>>>        String sValue sPrefixTableName sDriverID
57300>>>        Handle hTable hRetval
57300>>>
57300>>>        Get psDriverID to sDriverID
57301>>>        If (sDriverID <> DATAFLEX_ID and not(sTableName contains ":")) Begin
57303>>>            Move (sDriverID + ":" + sTableName) to sPrefixTableName
57304>>>        End
57304>>>>
57304>>>        Move 0 to hTable
57305>>>        Move 0 to hRetval
57306>>>        Repeat
57306>>>>
57306>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
57309>>>            If (hTable <> 0) Begin
57311>>>                Get_Attribute DF_FILE_ROOT_NAME of hTable to sValue
57314>>>                If (Uppercase(sValue) = Uppercase(sTableName) or Uppercase(sValue) = Uppercase(sPrefixTableName)) Begin
57316>>>                    Move hTable to hRetval
57317>>>                    Move 0 to hTable
57318>>>                End
57318>>>>
57318>>>            End
57318>>>>
57318>>>        Until (hTable = 0)
57320>>>
57320>>>        Function_Return hRetval
57321>>>    End_Function
57322>>>
57322>>>    // Use function to move all *.dat, *.k?? & *.hdr files to a "Data\Backup" folder
57322>>>    // _after_ all tables have successfully been converted to SQL (.int files)
57322>>>    Function UtilMoveAllEmbeddedToBackupFolder Returns Boolean
57324>>>        Boolean bOK bExists
57324>>>        String sDataPath sBackupFolder
57324>>>
57324>>>        Close DF_ALL DF_PERMANENT
57325>>>        Send DoAdvance of ghoProgressBar
57326>>>
57326>>>        Set Message_Text of ghoStatusPanel to "Moving Embedded (*.dat) files to Backup folder."
57327>>>        Move CS_DUFBackupDataFolder to sBackupFolder
57328>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
57329>>>        Get vFolderFormat sDataPath to sDataPath
57330>>>
57330>>>        Get vFilePathExists (sDataPath + sBackupFolder) to bExists
57331>>>        If (bExists = False) Begin
57333>>>            Get vCreateDirectory (sDataPath + sBackupFolder) to bOK
57334>>>            Get vFilePathExists (sDataPath + sBackupFolder) to bExists
57335>>>            If (bExists = False) Begin
57337>>>                Error DFERR_PROGRAM ("Could not create the the backup data folder to move all *.dat and *.k?? files to. You need to move them somewhere manually.")
57338>>>>
57338>>>                Function_Return False
57339>>>            End
57339>>>>
57339>>>        End
57339>>>>
57339>>>
57339>>>        Get vMoveFile (sDataPath + "*.dat") (sDataPath + sBackupFolder) to bOK
57340>>>        Get vMoveFile (sDataPath + "*.hdr") (sDataPath + sBackupFolder) to bOK
57341>>>        Get vMoveFile (sDataPath + "*.k??") (sDataPath + sBackupFolder) to bOK
57342>>>        Get vMoveFile (sDataPath + "*.vld") (sDataPath + sBackupFolder) to bOK
57343>>>        // We need to wait for Windows before we can copy files back
57343>>>        Sleep 2  
57344>>>        
57344>>>        //...except for these files that needs to be copied back to the Data folder:
57344>>>        Get vCopyFile (sBackupFolder + "\CodeMast.*")  sDataPath to bOK 
57345>>>        Get vCopyFile (sBackupFolder + "\CodeType.*")  sDataPath to bOK                                 
57346>>>        Get vCopyFile (sBackupFolder + "\Flexerrs.*")  sDataPath to bOK                                 
57347>>>        Get vCopyFile (sBackupFolder + "\DFErr001.*")  sDataPath to bOK                                 
57348>>>        Get vCopyFile (sBackupFolder + "\DFErr002.*")  sDataPath to bOK                                 
57349>>>        Get vCopyFile (sBackupFolder + "\DFErr003.*")  sDataPath to bOK                                 
57350>>>//            Get vCopyFile (sBackupFolder + "\DbVersion.*") sDataPath to bOK  
57350>>>        
57350>>>
57350>>>        Set Message_Text of ghoStatusPanel to ""
57351>>>        Function_Return True
57352>>>    End_Function
57353>>>    
57353>>>    Function UtilTableRepairAndReindexALL Returns Boolean
57355>>>        Boolean bOK bRetval
57355>>>        Handle hTable
57355>>>        Integer iSize iCount
57355>>>        
57355>>>        Move True to bOK
57356>>>        Get UtilFilelistNoOfTables to iSize
57357>>>        Set pbVisible    of ghoProgressBarOverall to True
57358>>>        Set piPosition   of ghoProgressBarOverall to 0
57359>>>        Set piMaximum    of ghoProgressBarOverall to iSize
57360>>>        Set piAdvanceBy  of ghoProgressBarOverall to 1
57361>>>
57361>>>        Repeat
57361>>>>
57361>>>            Set piPosition of ghoProgressBarOverall to iCount
57362>>>            Increment iCount
57363>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
57366>>>            If (hTable <> 0 and hTable <> 50) Begin // 50 = Flexerrs.
57368>>>                Get UtilTableRepairAndReindex hTable to bRetval
57369>>>                If (bRetval = False) Begin
57371>>>                    Move False to bOK
57372>>>                End
57372>>>>
57372>>>            End
57372>>>>
57372>>>        Until (hTable = 0)
57374>>>                
57374>>>        Function_Return bOK
57375>>>    End_Function           
57376>>>    
57376>>>    // Checks if an Embedded (DataFlex) data-file needs to be repaired.
57376>>>    // After the header has been repaired - also makes a re-index.  
57376>>>    // Returns TRUE if successful OR the table was an an ALIAS or SQL table in case we do nothing.
57376>>>    Function UtilTableRepairAndReindex Handle hTable Returns Boolean
57378>>>        Boolean bOK bIsAlias bIsEmbedded bIsOpen bBadExists
57378>>>        Integer iRetval
57378>>>        String sRootName sFileName sDataPath
57378>>>        
57378>>>        Move False to Err
57379>>>        Move 0 to LastErr 
57380>>>        Move True to bOK
57381>>>        
57381>>>        Get _UtilTableIsEmbedded hTable to bIsEmbedded
57382>>>        If (bIsEmbedded = False or hTable = 50) Begin // 50 = Flexerrs
57384>>>            Function_Return True
57385>>>        End
57385>>>>
57385>>>        Get UtilTableIsAlias hTable to bIsAlias 
57386>>>        If (bIsAlias = True) Begin
57388>>>            Function_Return True
57389>>>        End
57389>>>>
57389>>>        
57389>>>        // Check for bad file and remove if exists
57389>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
57392>>>        Set private.phCurrentTable to hTable  
57393>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT  
57394>>>        
57394>>>        // This is important! Else it can happen that the table can't be opened,
57394>>>        // with a "4077 - File in use" error.
57394>>>        Close DF_ALL DF_PERMANENT    
57395>>>        Open hTable
57397>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
57400>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
57401>>>        If (bIsOpen = False) Begin
57403>>>            Error DFERR_PROGRAM ("Could not open table to be repaired and reindexed:" * String(sRootName))
57404>>>>
57404>>>            Function_Return False        
57405>>>        End
57405>>>>
57405>>>
57405>>>        Get vFilePathExists (sRootName + ".BAD")  to bBadExists
57406>>>        If (bBadExists = True) Begin
57408>>>            Get_File_Path (sRootName + ".BAD") to sFileName
57409>>>            Get vDeleteFile sFileName to iRetval
57410>>>        End
57410>>>>
57410>>>        
57410>>>        Set TableName_Text of ghoStatusPanel to ("Repairing and reindex Table Name:" * sRootName * "Number:" * String(hTable))
57411>>>        
57411>>>        Move False to Err
57412>>>        // **** Repair and reindex the table. ****
57412>>>        Get UtilTableRepairEmbedded hTable sRootName to bOK
57413>>>
57413>>>        // Check for bad file: if it exists, something went wrong
57413>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
57414>>>        Get vFolderFormat sDataPath to sDataPath
57415>>>        Get vFilePathExists (sDataPath + sRootName + ".BAD") to bBadExists
57416>>>        If (bBadExists = True) Begin
57418>>>            Error DFERR_PROGRAM ("Error while sorting data. .BAD file created:"  * String(sRootName) + ".BAD")
57419>>>>
57419>>>            Move False to bOK
57420>>>        End
57420>>>>
57420>>>        Close hTable
57421>>>
57421>>>        Function_Return bOK
57422>>>    End_Function
57423>>>
57423>>>    // Repair and reindex the named DataFlex data-table.
57423>>>    // No checks are done if the passed table name is an embedded or SQL,
57423>>>    // so use with care (make sure you only pass embedded table names).
57423>>>    Function UtilTableRepairEmbedded Handle hTable String sTableName Returns Boolean
57425>>>        String sMode
57425>>>        Integer iVoid
57425>>>
57425>>>        Set Message_Text of ghoStatusPanel to "Repair/Reindex in progress..."
57426>>>        Move "0" to sMode   // 0=Reindex after repair!    
57427>>>        Close hTable        // The table needs to be closed, else error 4177 "Table in use".
57428>>>        Call_Driver 0 DATAFLEX_ID Function FLEX_REPAIR_FILE Callback ghoDbUpdateHandler Passing sTableName sMode 0 Result iVoid 
57433>>>        Set Message_Text of ghoStatusPanel to ""
57434>>>        Function_Return (iVoid = 0)
57435>>>    End_Function
57436>>>
57436>>>    // Returns _two_ arrays.
57436>>>    // Returns all files that are Master files in array ByRef iaFileIsMaster
57436>>>    // Also returns all files that are Alias files in a second array.
57436>>>    // IMPORTANT: All master & alias files _must_ have been included into
57436>>>    //            the DoSetAllMasterAndAlias message.
57436>>>    Function UtilTableAllMasterAndAliasFiles Integer[] ByRef iaFileIsMaster Returns Integer[]
57438>>>        Integer[] iaFileIsAlias
57439>>>        Integer hTable iFileAlias iSize
57439>>>        Boolean bOpen
57439>>>
57439>>>        Move 0 to hTable
57440>>>        Repeat
57440>>>>
57440>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
57443>>>            If (hTable <> 0) Begin
57445>>>                Open hTable
57447>>>                Get_Attribute DF_FILE_OPENED of hTable to bOpen
57450>>>                If (bOpen = True) Begin
57452>>>                    Get_Attribute DF_FILE_ALIAS of hTable to iFileAlias
57455>>>                    If (iFileAlias = DF_FILE_IS_MASTER) Begin
57457>>>                        Move (SizeOfArray(iaFileIsMaster)) to iSize
57458>>>                        Move hTable to iaFileIsMaster[iSize]
57459>>>                    End
57459>>>>
57459>>>                    Else If (iFileAlias = DF_FILE_IS_ALIAS) Begin
57462>>>                        Move (SizeOfArray(iaFileIsAlias)) to iSize
57463>>>                        Move hTable to iaFileIsAlias[iSize]
57464>>>                    End
57464>>>>
57464>>>                End
57464>>>>
57464>>>            End
57464>>>>
57464>>>        Until (hTable = 0)
57466>>>
57466>>>        Function_Return iaFileIsAlias
57467>>>    End_Function  
57468>>>    
57468>>>    // Is a repair of the data-header necessary? (Embedded tables only)
57468>>>    Function UtilTableRepairIsNeeded Handle hTable String sTableName Returns Integer
57470>>>        String sMode
57470>>>        Integer iRepairNeeded bIsOpen
57470>>>
57470>>>        Move "0" to sMode
57471>>>        Set private.phCurrentTable to hTable 
57472>>>        Close hTable
57473>>>        Open hTable
57475>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
57478>>>        Call_Driver hTable DATAFLEX_ID Function FLEX_GET_REPAIRS_NEEDED Callback 0 Passing sTableName sMode 0 Result iRepairNeeded
57483>>>
57483>>>        Function_Return iRepairNeeded
57484>>>    End_Function
57485>>>
57485>>>    // Helper function
57485>>>    // Takes two params:
57485>>>    //   1. An array with all master table numbers  (Function UtilTableAllMasterAndAliasFiles)
57485>>>    //   2. An array with all alias table numbers   (Function UtilTableAllMasterAndAliasFiles)
57485>>>    // Returns:
57485>>>    //  DF_FILE_ALIAS_DEFAULT if no master or alias
57485>>>    //  DF_FILE_IS_MASTER if master
57485>>>    //  DF_FILE_IS_ALIAS if alias
57485>>>    Function UtilTableIsMasterAlias Handle hTable Integer[] iaFileIsMaster Integer[] iaFileIsAlias Returns Integer
57487>>>        Integer i iSize
57487>>>
57487>>>        Move (SizeOfArray(iaFileIsMaster)) to iSize
57488>>>        Decrement iSize
57489>>>        for i from 0 to iSize
57495>>>>
57495>>>            If (hTable = iaFileIsMaster[i]) Begin
57497>>>                Function_Return DF_FILE_IS_MASTER
57498>>>            End
57498>>>>
57498>>>        Loop
57499>>>>
57499>>>
57499>>>        Move (SizeOfArray(iaFileIsAlias)) to iSize
57500>>>        Decrement iSize
57501>>>        for i from 0 to iSize
57507>>>>
57507>>>            If (hTable = iaFileIsAlias[i]) Begin
57509>>>                Function_Return DF_FILE_IS_ALIAS
57510>>>            End
57510>>>>
57510>>>        Loop
57511>>>>
57511>>>
57511>>>        Function_Return DF_FILE_ALIAS_DEFAULT
57512>>>    End_Function
57513>>>
57513>>>    // Determine the available indexes of a table.
57513>>>    //
57513>>>    // Arguments:
57513>>>    //   Handle hTable - The number of the table
57513>>>    //
57513>>>    // Returns:
57513>>>    //   String - A string to be used with the sort command
57513>>>    //   to re-index all indexes of a table.
57513>>>    Function UtilTableIndexString Handle hTable Returns String
57515>>>        String  sSortString
57515>>>        Integer iLastIndex iNumSegments iCount
57515>>>
57515>>>        Move "" to sSortString
57516>>>        Get_Attribute DF_FILE_LAST_INDEX_NUMBER of hTable to iLastIndex
57519>>>
57519>>>        for iCount from 1 to iLastIndex
57525>>>>
57525>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iCount to iNumSegments
57528>>>            If iNumSegments Begin
57530>>>                If (Length(sSortString)) ;                    Move (Append(sSortString, " ")) to sSortString
57533>>>                Move (Append(sSortString, iCount)) to sSortString
57534>>>            End
57534>>>>
57534>>>        Loop
57535>>>>
57535>>>
57535>>>        Function_Return sSortString
57536>>>    End_Function
57537>>>
57537>>>    
57537>>>    // * Dummy function for the Studio's Code Explorer *
57537>>>    Function API_COLUMN_UTILITY_FUNCTIONS Returns Boolean
57539>>>        Function_Return False
57540>>>    End_Function
57541>>>
57541>>>    // Compare multiple columns. (For 'FROM' & 'TO' tables)
57541>>>    Function UtilColumnsCompare String sDriverIDFrom String sDriverIDTo Boolean bIsSQLFrom Boolean bIsSQLTo tAPIColumnCompare[] aAPIColumnCompare Boolean bCompareDate_DataTime Returns Boolean
57543>>>        Boolean bIsSame
57543>>>        Integer iCount iColumns iColumn
57543>>>
57543>>>        Move True to bIsSame
57544>>>        Move (SizeOfArray(aAPIColumnCompare)) to iColumns
57545>>>        Set piMaximum of ghoProgressBar  to iColumns
57546>>>        Decrement iColumns
57547>>>
57547>>>        for iCount from 0 to iColumns
57553>>>>
57553>>>            Set piPosition of ghoProgressBar to iCount
57554>>>            Get UtilColumnCompare sDriverIDFrom sDriverIDTo bIsSQLFrom bIsSQLTo aAPIColumnCompare[iCount] bCompareDate_DataTime to bIsSame
57555>>>            If (bIsSame = False) Begin
57557>>>                Function_Return False
57558>>>            End
57558>>>>
57558>>>        Loop
57559>>>>
57559>>>
57559>>>        Function_Return (bIsSame = True)
57560>>>    End_Function
57561>>>
57561>>>    // Compares a single column (For 'FROM' & 'TO' tables)
57561>>>    Function UtilColumnCompare String sDriverIDFrom String sDriverIDTo Boolean bIsSQLFrom Boolean bIsSQLTo tAPIColumnCompare APIColumnCompare Boolean bCompareDate_DataTime Returns Boolean
57563>>>        Integer iFromType iToType iDbType
57563>>>        tColumnType ColumnType
57563>>>        tColumnType ColumnType
57563>>>        Boolean bIsDateTypeFrom bIsDateTypeTo
57563>>>
57563>>>        If (APIColumnCompare.bCancelFrom = True or APIColumnCompare.bCancelTo = True) Begin
57565>>>            Function_Return False
57566>>>        End
57566>>>>
57566>>>        If (APIColumnCompare.bExistsFrom = False or APIColumnCompare.bExistsTo = False) Begin
57568>>>            Function_Return False
57569>>>        End
57569>>>>
57569>>>        If (Uppercase(APIColumnCompare.sFieldNameFrom) <> Uppercase(APIColumnCompare.sFieldNameTo)) Begin
57571>>>            Function_Return False
57572>>>        End                                                                
57572>>>>
57572>>>
57572>>>        If (bIsSQLFrom = True and bIsSQLTo = True) Begin
57574>>>            If (APIColumnCompare.bAllowNULLFrom <> APIColumnCompare.bAllowNULLTo) Begin
57576>>>                Function_Return False
57577>>>            End
57577>>>>
57577>>>            If (APIColumnCompare.sDefaultValueFrom <> APIColumnCompare.sDefaultValueTo) Begin
57579>>>                If ((APIColumnCompare.sDefaultValueFrom = ""   and APIColumnCompare.sDefaultValueTo = "''") or ;                    (APIColumnCompare.sDefaultValueFrom = "''" and APIColumnCompare.sDefaultValueTo = "")) Begin
57581>>>                    End
57581>>>>
57581>>>                Else Begin
57582>>>                    Function_Return False
57583>>>                End
57583>>>>
57583>>>            End
57583>>>>
57583>>>        End
57583>>>>
57583>>>
57583>>>        Get piDbType                       to iDbType
57584>>>        Move APIColumnCompare.iTypeFrom    to iFromType
57585>>>        Move APIColumnCompare.iTypeTo      to iToType
57586>>>
57586>>>        // If one of the two tables are SQL and the other Embedded we need to "translate"
57586>>>        // data types between Embedded and SQL.
57586>>>        If (bIsSQLFrom = True and bIsSQLTo = False) Begin
57588>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iFromType APIColumnCompare.iLengthFrom to iFromType
57589>>>        End
57589>>>>
57589>>>        If (bIsSQLFrom = False and bIsSQLTo = True) Begin
57591>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDTo iDbType iToType APIColumnCompare.iLengthTo to iToType
57592>>>        End
57592>>>>
57592>>>
57592>>>        Get UtilColumnIsDateType iFromType bIsSQLFrom to bIsDateTypeFrom
57593>>>        Get UtilColumnIsDateType iToType   bIsSQLTo   to bIsDateTypeTo
57594>>>
57594>>>        // Make Date and DateTime comparison?
57594>>>        If (bCompareDate_DataTime = True) Begin
57596>>>            If (iFromType <> iToType) Begin
57598>>>                Function_Return False
57599>>>            End
57599>>>>
57599>>>        End
57599>>>>
57599>>>
57599>>>        // This is when not checking for Date/DateTime differences but all other other field types...
57599>>>        If (bCompareDate_DataTime = False and bIsDateTypeFrom = False) Begin
57601>>>            If (iFromType <> iToType) Begin
57603>>>                Function_Return False
57604>>>            End
57604>>>>
57604>>>        End
57604>>>>
57604>>>
57604>>>        // Only if the field is not a Date type (any of them) we compare length & precision.
57604>>>        If (bIsDateTypeFrom = False) Begin
57606>>>            If (APIColumnCompare.iLengthFrom <> APIColumnCompare.iLengthTo) Begin
57608>>>                Function_Return False
57609>>>            End
57609>>>>
57609>>>            If (APIColumnCompare.iPrecisionFrom <> APIColumnCompare.iPrecisionTo) Begin
57611>>>                Function_Return False
57612>>>            End
57612>>>>
57612>>>        End
57612>>>>
57612>>>
57612>>>        If (APIColumnCompare.iOptionsFrom <> APIColumnCompare.iOptionsTo) Begin
57614>>>            Function_Return False
57615>>>        End
57615>>>>
57615>>>
57615>>>        Function_Return True
57616>>>    End_Function
57617>>>
57617>>>    Function UtilColumnsStructFill Handle hTable Returns tAPIColumn[]
57619>>>        Integer iNumColumns iColumn iCount iOptions iDbType iType iCheckFieldNumber iDriverID
57619>>>        Boolean bIdentityKey bSqlDriver bIsOpen bExists bIsSqlTable bUserCancel
57619>>>        tAPIColumn[] APIColumns APIColumnsEmpty
57619>>>        tAPIColumn[] APIColumns APIColumnsEmpty
57621>>>        String sDriverID sRootName sLogicalName sDataType
57621>>>
57621>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
57622>>>        Get piDbType to iDbType
57623>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
57626>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
57629>>>
57629>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
57632>>>        If (bIsOpen = False) Begin
57634>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57635>>>            Open hTable
57637>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57638>>>            Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
57641>>>            If (bIsOpen = False) Begin
57643>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
57644>>>                Move True to APIColumnsEmpty[0].bError
57645>>>                Function_Return APIColumnsEmpty
57646>>>            End
57646>>>>
57646>>>        End
57646>>>>
57646>>>
57646>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
57649>>>        Get IsSQLDriver    sDriverID to bSqlDriver
57650>>>        Get _UtilTableIsSqlByRootName sRootName to bIsSqlTable
57651>>>        If (bIsSqlTable = True) Begin
57653>>>            Get _UtilTableExists hTable to bExists
57654>>>            If (bExists = False) Begin
57656>>>                Move True to APIColumnsEmpty[0].bError
57657>>>                Function_Return APIColumnsEmpty
57658>>>            End
57658>>>>
57658>>>        End
57658>>>>
57658>>>//        Get DriverIndex sDriverID to iDriverID
57658>>>//        If (sDriverID = MSSQLDRV_ID) Begin
57658>>>//            Set_Attribute DF_DRIVER_MAP_DFDATETIME_TO_SQLTYPE of iDriverId to 'datetime2'
57658>>>//        End
57658>>>
57658>>>        Move 0 to iCount
57659>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
57662>>>        Set piMaximum of ghoProgressBar to iNumColumns
57663>>>
57663>>>        for iColumn from 1 to iNumColumns
57669>>>>
57669>>>            Move 0 to iOptions
57670>>>            Move False to bIdentityKey
57671>>>            Move False to Err
57672>>>            Move 0     to LastErr
57673>>>            Move bIsSqlTable to APIColumns[iCount].bIsSQLType
57674>>>            Set piPosition of ghoProgressBar to iColumn
57675>>>
57675>>>            Send Ignore_Error of Error_Object_Id DFERR_UNSUPPORTED_ATTRIBUTE
57676>>>            If (bIsSqlTable = True) Begin 
57678>>>//                If (iType = DF_DATE) Begin
57678>>>//                    // Note: This is actually the same as SQL_DATETIME
57678>>>//                    Move SQL_DATE to iType
57678>>>//                    Move 3 to APIColumns[iCouknt].iPrecision
57678>>>//                End
57678>>>//                Else If (iType = DF_DATET Get_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to iTypeIME) Begin
57678>>>//                    // In modern MS-SQL databases SQL_DATETIME will be = to "datetime2".
57678>>>//                    // By default MS-SQL will create such a field with 7 (!) decimal places.
57678>>>//                    // This is just a waste because DataFlex will truncate that to 3 decimal
57678>>>//                    // places. Therefore, we hard-code the precision to be only thee decimals.
57678>>>//                    Move SQL_DATETIME to iType
57678>>>//                    Move 3 to APIColumns[iCount].iPrecision
57678>>>//                End
57678>>>//                Move iType                                                to APIColumns[iCount].iType
57678>>>                Get_Attribute DF_FIELD_NATIVE_TYPE      of hTable iColumn to APIColumns[iCount].iType
57681>>>                Get_Attribute DF_FIELD_NATIVE_TYPE_NAME of hTable iColumn to APIColumns[iCount].sType
57684>>>                Get_Attribute DF_FIELD_NULL_ALLOWED     of hTable iColumn to APIColumns[iCount].bAllowNULL
57687>>>                Get_Attribute DF_FIELD_DEFAULT_VALUE    of hTable iColumn to APIColumns[iCount].sDefaultValue
57690>>>            End
57690>>>>
57690>>>            Else Begin
57691>>>                Get_Attribute DF_FIELD_TYPE             of hTable iColumn to APIColumns[iCount].iType
57694>>>                Get UtilColumnTypeToString sDriverID iDbType APIColumns[iCount].iType to APIColumns[iCount].sType
57695>>>            End
57695>>>>
57695>>>
57695>>>            // If the array value is out of bounce it means that this column doesn't exist on the backend.
57695>>>            Get_Attribute DF_Field_Number of hTable iColumn to iCheckFieldNumber
57698>>>            Move (iCheckFieldNumber >= 0) to bExists
57699>>>            If (bExists = False) Begin
57701>>>                Move 0 to APIColumns[iCount].iType
57702>>>            End
57702>>>>
57702>>>            If (bExists = True) Begin
57704>>>                    Get_Attribute DF_FIELD_IS_IDENTITY of hTable iColumn to bIdentityKey
57707>>>            End
57707>>>>
57707>>>            Send Trap_Error of Error_Object_Id DFERR_UNSUPPORTED_ATTRIBUTE
57708>>>            If (bIdentityKey = True) Begin
57710>>>                Move C_tAPIColumn_Identity to APIColumns[iCount].iOptions
57711>>>            End
57711>>>>
57711>>>
57711>>>//            Else Begin
57711>>>//                Move False to Err
57711>>>//                Move 0     to LastErr
57711>>>//                If (bIsSqlTable = True) Begin
57711>>>//                    Get_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to APIColumns[iCount].iType
57711>>>//                End
57711>>>//                Else Begin
57711>>>//                    Get_Attribute DF_FIELD_TYPE        of hTable iColumn to APIColumns[iCount].iType
57711>>>//                    Get UtilColumnTypeToString sDriverID iDbType APIColumns[iCount].iType to APIColumns[iCount].sType
57711>>>//                End
57711>>>//                // If the array value is out of bounce it means that this column doesn't exist on the backend.
57711>>>//                Move (LastErr <> DFERR_ARRAY_INDEX_OUT_OF_BOUNDS) to bExists
57711>>>//                If (bExists = False) Begin
57711>>>//                    Move 0 to APIColumns[iCount].iType
57711>>>//                End
57711>>>//            End
57711>>>
57711>>>            If (bExists = True) Begin
57713>>>                Move iColumn to APIColumns[iCount].iFieldNumber
57714>>>                Get_Attribute DF_FIELD_NAME        of hTable iColumn to APIColumns[iCount].sFieldName
57717>>>                // ToDo: Can't use native_size as it can get way to big and causes "out of memory" problems.
57717>>>//                If (bIsSqlTable = True) Begin
57717>>>//                    Get_Attribute DF_FIELD_NATIVE_SIZE of hTable iColumn to APIColumns[iCount].iLength
57717>>>//                    Get_Attribute DF_FIELD_PRECISION   of hTable iColumn to APIColumns[iCount].iPrecision
57717>>>//                End
57717>>>                Get_Attribute DF_FIELD_LENGTH      of hTable iColumn to APIColumns[iCount].iLength 
57720>>>                If (APIColumns[iCount].iPrecision = 0) Begin
57722>>>                    Get_Attribute DF_FIELD_PRECISION   of hTable iColumn to APIColumns[iCount].iPrecision
57725>>>                End
57725>>>>
57725>>>
57725>>>                // If the length was zero we might have an Overlap(!) field.
57725>>>                // We then need check the DF_FIELD_TYPE if it really is and reset data for this array item.
57725>>>                If (APIColumns[iCount].iLength = 0) Begin
57727>>>                    Get_Attribute DF_FIELD_TYPE    of hTable iColumn to iType
57730>>>                    If (iType = DF_OVERLAP) Begin
57732>>>                        Move 0 to APIColumns[iCount].iFieldNumber
57733>>>                        Move 0 to APIColumns[iCount].iLength
57734>>>                        Move 0 to APIColumns[iCount].iOptions
57735>>>                        Move 0 to APIColumns[iCount].iPrecision
57736>>>                        Move DF_OVERLAP to APIColumns[iCount].iType
57737>>>                        Move "" to APIColumns[iCount].sFieldName
57738>>>                        Decrement iCount
57739>>>                    End
57739>>>>
57739>>>                End
57739>>>>
57739>>>            End
57739>>>>
57739>>>            Get Check_StatusPanel of ghoStatusPanel to bUserCancel
57740>>>            If (bUserCancel = True) Begin
57742>>>                Move True to APIColumnsEmpty[0].bCancel
57743>>>                Function_Return APIColumnsEmpty
57744>>>            End
57744>>>>
57744>>>            Increment iCount
57745>>>        Loop
57746>>>>
57746>>>
57746>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
57747>>>        Function_Return APIColumns
57748>>>    End_Function
57749>>>     
57749>>>    // ToDo: Shouldn't this be the other way round? The From bit last? That is what should be of interest??
57749>>>    // *** 
57749>>>    // This will return a struct array with the combined data for the passed FROM and TO column arrays.
57749>>>    // The combined data will be sorted on the first struct member: iFieldNumber
57749>>>    Function UtilColumnCombineFromAndToArrays tAPIColumn[] APIColumnFrom tAPIColumn[] APIColumnTo Returns tAPIIndexCompare[]
57751>>>        tAPIColumnCompare[] aAPIColumnCompare
57751>>>        tAPIColumnCompare[] aAPIColumnCompare
57752>>>        tAPIColumnCompare   APIColumnCompare
57752>>>        tAPIColumnCompare   APIColumnCompare
57752>>>        Integer iSizeFrom iSizeTo iSize iCount iItem
57752>>>
57752>>>        Move (SizeOfArray(APIColumnFrom)) to iSizeFrom
57753>>>        Decrement iSizeFrom
57754>>>        for iCount from 0 to iSizeFrom
57760>>>>
57760>>>            Move APIColumnFrom[iCount].iFieldNumber     to aAPIColumnCompare[iCount].iFieldNumber
57761>>>            Move APIColumnFrom[iCount].sFieldName       to aAPIColumnCompare[iCount].sFieldNameFrom
57762>>>            Move APIColumnFrom[iCount].iType            to aAPIColumnCompare[iCount].iTypeFrom
57763>>>            Move APIColumnFrom[iCount].sType            to aAPIColumnCompare[iCount].sTypeFrom
57764>>>            Move APIColumnFrom[iCount].iLength          to aAPIColumnCompare[iCount].iLengthFrom
57765>>>            Move APIColumnFrom[iCount].iPrecision       to aAPIColumnCompare[iCount].iPrecisionFrom
57766>>>            Move APIColumnFrom[iCount].iOptions         to aAPIColumnCompare[iCount].iOptionsFrom
57767>>>            Move APIColumnFrom[iCount].bIsSQLType       to aAPIColumnCompare[iCount].bIsSQLTypeFrom
57768>>>            Move APIColumnFrom[iCount].bAllowNULL       to aAPIColumnCompare[iCount].bAllowNULLFrom
57769>>>            Move APIColumnFrom[iCount].sDefaultValue    to aAPIColumnCompare[iCount].sDefaultValueFrom
57770>>>            Move APIColumnFrom[iCount].bShouldChange    to aAPIColumnCompare[iCount].bShouldChangeFrom
57771>>>            Move APIColumnFrom[iCount].bCancel          to aAPIColumnCompare[iCount].bCancelFrom
57772>>>            Move APIColumnFrom[iCount].bError           to aAPIColumnCompare[iCount].bErrorFrom
57773>>>            Move True                                   to aAPIColumnCompare[iCount].bExistsFrom
57774>>>        Loop
57775>>>>
57775>>>
57775>>>        Move (SizeOfArray(APIColumnTo)) to iSizeTo
57776>>>        Decrement iSizeTo
57777>>>        for iCount from 0 to iSizeTo
57783>>>>
57783>>>            Move APIColumnTo[iCount].iFieldNumber       to APIColumnCompare.iFieldNumber
57784>>>            // Search if the field number already exists in the "to" array; else add it. <
57784>>>            Move (SearchArray(APIColumnCompare, aAPIColumnCompare)) to iItem
57785>>>            If (iItem = -1) Begin
57787>>>                Move (SizeOfArray(aAPIColumnCompare))   to iItem
57788>>>            End
57788>>>>
57788>>>
57788>>>            Move APIColumnCompare.iFieldNumber          to aAPIColumnCompare[iItem].iFieldNumber
57789>>>            Move APIColumnTo[iCount].iFieldNumber       to aAPIColumnCompare[iItem].iFieldNumberTo
57790>>>            Move APIColumnTo[iCount].sFieldName         to aAPIColumnCompare[iItem].sFieldNameTo
57791>>>            Move APIColumnTo[iCount].iType              to aAPIColumnCompare[iItem].iTypeTo
57792>>>            Move APIColumnTo[iCount].sType              to aAPIColumnCompare[iItem].sTypeTo
57793>>>            Move APIColumnTo[iCount].iLength            to aAPIColumnCompare[iItem].iLengthTo
57794>>>            Move APIColumnTo[iCount].iPrecision         to aAPIColumnCompare[iItem].iPrecisionTo
57795>>>            Move APIColumnTo[iCount].iOptions           to aAPIColumnCompare[iItem].iOptionsTo
57796>>>            Move APIColumnTo[iCount].bIsSQLType         to aAPIColumnCompare[iItem].bIsSQLTypeTo
57797>>>            Move APIColumnTo[iCount].bAllowNULL         to aAPIColumnCompare[iItem].bAllowNULLTo
57798>>>            Move APIColumnTo[iCount].sDefaultValue      to aAPIColumnCompare[iItem].sDefaultValueTo
57799>>>            Move APIColumnTo[iCount].bShouldChange      to aAPIColumnCompare[iItem].bShouldChangeTo
57800>>>            Move APIColumnTo[iCount].bCancel            to aAPIColumnCompare[iItem].bCancelTo
57801>>>            Move APIColumnTo[iCount].bError             to aAPIColumnCompare[iItem].bErrorTo
57802>>>            Move True                                   to aAPIColumnCompare[iItem].bExistsTo
57803>>>        Loop
57804>>>>
57804>>>
57804>>>        Move (SortArray(aAPIColumnCompare)) to aAPIColumnCompare
57805>>>
57805>>>        Function_Return aAPIColumnCompare
57806>>>    End_Function
57807>>>
57807>>>    // Checks if a field name exists in a table definition
57807>>>    // Returns True if it does
57807>>>    // Sample:
57807>>>    //   Get UtilColumnExists MyTable.File_Number "MyColumnName" to iExists
57807>>>    Function UtilColumnExists Handle hTable String sFieldName Returns Boolean
57809>>>        Integer iNumColumns iColumn
57809>>>        String sColumn
57809>>>        Boolean bExists bOK bOpen
57809>>>
57809>>>        Get AutoConnectionIDLogin to bOK
57810>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57811>>>        Open hTable
57813>>>        Send Trap_Error   of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57814>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
57817>>>        If (bOpen = False) Begin
57819>>>            Function_Return False
57820>>>        End
57820>>>>
57820>>>
57820>>>        Move False to bExists
57821>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
57824>>>        for iColumn from 1 to iNumColumns
57830>>>>
57830>>>            Get_Attribute DF_FIELD_NAME of hTable iColumn to sColumn
57833>>>            If (Uppercase(sFieldName) = Uppercase(sColumn)) Begin
57835>>>                Move iNumColumns to iColumn
57836>>>                Move True to bExists
57837>>>            End
57837>>>>
57837>>>        Loop
57838>>>>
57838>>>        Close hTable
57839>>>
57839>>>        Function_Return bExists
57840>>>    End_Function
57841>>>
57841>>>    // Returns the field/column number for the passed FieldName as an integer.
57841>>>    Function UtilColumnNameToColumnNumber Handle hTable String sFieldName Returns Integer
57843>>>        Integer iNumColumns iColumn iRetval
57843>>>        String sColumn
57843>>>        Boolean bOK bOpen
57843>>>
57843>>>        Get AutoConnectionIDLogin to bOK
57844>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
57845>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57846>>>        Open hTable
57848>>>        Send Trap_Error   of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57849>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
57852>>>        If (bOpen = False) Begin
57854>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
57855>>>            Function_Return False
57856>>>        End
57856>>>>
57856>>>
57856>>>        Move 0 to iColumn
57857>>>        Move 0 to iRetval
57858>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
57861>>>        for iColumn from 1 to iNumColumns
57867>>>>
57867>>>            Get_Attribute DF_FIELD_NAME of hTable iColumn to sColumn
57870>>>            If (Uppercase(sFieldName) = Uppercase(sColumn)) Begin
57872>>>                Move iColumn to iRetval
57873>>>                Move iNumColumns to iColumn
57874>>>            End
57874>>>>
57874>>>        Loop
57875>>>>
57875>>>        Close hTable
57876>>>
57876>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
57877>>>        Function_Return iRetval
57878>>>    End_Function
57879>>>
57879>>>    // To convert between a data type string name and its integer constant declaration. E.g."VarChar" -> SQL_VarChar
57879>>>    // The reciprocal function is UtilColumnTypeToString.
57879>>>    Function UtilColumnTypeToInteger String sDriverID Integer iDbType String sDataType Returns Integer
57881>>>        tColumnType RetvalType
57881>>>        tColumnType RetvalType
57881>>>
57881>>>        Get _UtilColumnType sDriverID iDbType 0 sDataType False to RetvalType
57882>>>        Function_Return RetvalType.iSQLType
57883>>>    End_Function
57884>>>
57884>>>    // To convert between an integer data type constant and its string value. E.g. SQL_VarChar -> "VarChar".
57884>>>    // The reciprocal function is UtilColumnTypeToString.
57884>>>    Function UtilColumnTypeToString String sDriverID Integer iDbType Integer iDataType Returns String
57886>>>        tColumnType RetvalType
57886>>>        tColumnType RetvalType
57886>>>
57886>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
57887>>>        Function_Return RetvalType.sSQLType
57888>>>    End_Function
57889>>>
57889>>>    Function UtilColumnTypePrecision String sDriverID Integer iDbType Integer iDataType Returns String
57891>>>        tColumnType RetvalType
57891>>>        tColumnType RetvalType
57891>>>
57891>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
57892>>>        Function_Return RetvalType.sPrecision
57893>>>    End_Function
57894>>>
57894>>>    Function UtilColumnTypeFixed String sDriverID Integer iDbType Integer iDataType Returns Boolean
57896>>>        tColumnType RetvalType
57896>>>        tColumnType RetvalType
57896>>>
57896>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
57897>>>        // Nils 2019-02-15. This return value seems to have been wrong. The function should return False
57897>>>        // if the column type length is _not_ fixed.
57897>>>        Function_Return (RetvalType.bCanEditSize = False)
57898>>>    End_Function
57899>>>
57899>>>    Function UtilColumnTypePrecisionSize String sDriverID Integer iDbType Integer iDataType Returns Integer
57901>>>        tColumnType RetvalType
57901>>>        tColumnType RetvalType
57901>>>        String sValue
57901>>>        Integer iRetval iPos
57901>>>
57901>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
57902>>>        Move RetvalType.sPrecision to sValue
57903>>>        Move (Pos(".", sValue)) to iPos
57904>>>        If (iPos <> 0) Begin
57906>>>            Move (Left(sValue, (iPos -1))) to iRetval
57907>>>        End
57907>>>>
57907>>>        Else Begin
57908>>>            Move sValue to iRetval
57909>>>        End
57909>>>>
57909>>>        Function_Return iRetval
57910>>>    End_Function
57911>>>
57911>>>    Function UtilColumnTypePrecisionDec String sDriverID Integer iDbType Integer iDataType Returns Integer
57913>>>        tColumnType RetvalType
57913>>>        tColumnType RetvalType
57913>>>        String sValue
57913>>>        Integer iRetval iPos
57913>>>
57913>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
57914>>>        Move RetvalType.sPrecision to sValue
57915>>>        Move (Pos(".", sValue)) to iPos
57916>>>        If (iPos = 0) Begin
57918>>>            Function_Return 0
57919>>>        End
57919>>>>
57919>>>        Move (Mid(sValue, 99, (iPos + 1))) to iRetval
57920>>>
57920>>>        Function_Return iRetval
57921>>>    End_Function
57922>>>
57922>>>    // * Dummy function for the Studio's Code Explorer *
57922>>>    Function API_INDEX_UTILITY_FUNCTIONS Returns Boolean
57924>>>        Function_Return False
57925>>>    End_Function
57926>>>
57926>>>    // Compares multiple indexes for a 'FROM' and a 'TO' table.
57926>>>    Function UtilIndexesCompare Boolean bIsSQLTableFrom Boolean bIsSQLTableTo tAPIIndexCompare[] aAPIIndexCompare Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Boolean
57928>>>        Boolean bIsSame
57928>>>        Integer iCount iSize
57928>>>
57928>>>        Move True to bIsSame
57929>>>        Move (SizeOfArray(aAPIIndexCompare)) to iSize
57930>>>        Decrement iSize
57931>>>        For iCount from 0 to iSize
57937>>>>
57937>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
57938>>>            Send Ignore_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
57939>>>            Get UtilIndexCompare bIsSQLTableFrom bIsSQLTableTo aAPIIndexCompare[iCount] bCompareIndexUppercase bCompareIndexAscending to bIsSame
57940>>>            Send Trap_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
57941>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
57942>>>            If (bIsSame = False) Begin
57944>>>                Function_Return False
57945>>>            End
57945>>>>
57945>>>        Loop
57946>>>>
57946>>>
57946>>>        Function_Return bIsSame
57947>>>    End_Function
57948>>>
57948>>>    // Compares a single index for a 'FROM' and a 'TO' table.
57948>>>    Function UtilIndexCompare Boolean bIsSQLTableFrom Boolean bIsSQLTableTo tAPIIndexCompare APIIndexCompare Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Boolean
57950>>>        Boolean bIsSame
57950>>>        Integer iSegment
57950>>>
57950>>>        Move (APIIndexCompare.bExistsFrom = APIIndexCompare.bExistsTo) to bIsSame
57951>>>        If (bIsSame = False) Begin
57953>>>            Function_Return False
57954>>>        End
57954>>>>
57954>>>        Move (APIIndexCompare.iPrimaryIndexFrom = APIIndexCompare.iPrimaryIndexTo) to bIsSame
57955>>>        If (bIsSame = False) Begin
57957>>>            Function_Return False
57958>>>        End
57958>>>>
57958>>>
57958>>>        If (bIsSqlTableFrom = True and bIsSqlTableTo = True) Begin
57960>>>            // * We should probably not compare SQL index names?
57960>>>            // Move (Uppercase(aIndexFrom.sSQLIndexName) = Uppercase(aIndexTo.sSQLIndexName)) to bIsSame
57960>>>            // If (bIsSame = False) Begin   DF_INDEX_SERVER_ONLY
57960>>>            //     Function_Return False
57960>>>            // End
57960>>>            Move (APIIndexCompare.bIsSQLPrimaryKeyFrom = APIIndexCompare.bIsSQLPrimaryKeyTo) to bIsSame
57961>>>            If (bIsSame = False) Begin
57963>>>                Function_Return False
57964>>>            End
57964>>>>
57964>>>            Move (APIIndexCompare.bIsSQLClusteredFrom = APIIndexCompare.bIsSQLClusteredTo) to bIsSame
57965>>>            If (bIsSame = False) Begin
57967>>>                Function_Return False
57968>>>            End
57968>>>>
57968>>>            Move (APIIndexCompare.iSQLIndexTypeFrom = APIIndexCompare.iSQLIndexTypeTo) to bIsSame
57969>>>            If (bIsSame = False) Begin
57971>>>                Function_Return False
57972>>>            End
57972>>>>
57972>>>            Move (Uppercase(APIIndexCompare.sSQLIndexNameFrom) = Uppercase(APIIndexCompare.sSQLIndexNameTo)) to bIsSame
57973>>>            If (bIsSame = False) Begin
57975>>>                Function_Return False
57976>>>            End
57976>>>>
57976>>>        End
57976>>>>
57976>>>
57976>>>        Get UtilIndexSegmentsCompare APIIndexCompare.IndexSegmentArrayFrom APIIndexCompare.IndexSegmentArrayTo bCompareIndexUppercase bCompareIndexAscending to iSegment
57977>>>        Move (iSegment = -1) to bIsSame
57978>>>
57978>>>        Function_Return (bIsSame = True)
57979>>>    End_Function
57980>>>
57980>>>    // Compares each segment for the passed index.
57980>>>    // Returns -1 if same; else returns the index segment that differs.
57980>>>    Function UtilIndexSegmentsCompare tAPIIndexSegment[] aIndexSegmentFrom tAPIIndexSegment[] aIndexSegmentTo Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Integer
57982>>>        Integer iNumSegmentsFrom iNumSegmentsTo iNumSegments iSegment
57982>>>        Boolean bIsSame
57982>>>
57982>>>        Send Ignore_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
57983>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
57984>>>        Move (SizeOfArray(aIndexSegmentFrom))      to iNumSegmentsFrom
57985>>>        Move (SizeOfArray(aIndexSegmentTo))        to iNumSegmentsTo
57986>>>        Move (iNumSegmentsFrom max iNumSegmentsTo) to iNumSegments
57987>>>
57987>>>        Decrement iNumSegments
57988>>>        for iSegment from 0 to iNumSegments
57994>>>>
57994>>>            Move False to bIsSame
57995>>>            If (iSegment < iNumSegmentsFrom and iSegment < iNumSegmentsTo) Begin
57997>>>                Get UtilIndexSegmentCompare aIndexSegmentFrom[iSegment] aIndexSegmentTo[iSegment] bCompareIndexUppercase bCompareIndexAscending to bIsSame
57998>>>            End
57998>>>>
57998>>>            If (bIsSame = False) Begin
58000>>>                Send Trap_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
58001>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
58002>>>                Function_Return iSegment
58003>>>            End
58003>>>>
58003>>>        Loop
58004>>>>
58004>>>
58004>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
58005>>>        Function_Return -1 // This means bIsSame = True
58006>>>    End_Function
58007>>>
58007>>>    Function UtilIndexSegmentCompare tAPIIndexSegment aIndexSegmentFrom tAPIIndexSegment aIndexSegmentTo Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Integer
58009>>>        Boolean bIsSame
58009>>>
58009>>>        Move (aIndexSegmentFrom.iFieldNumber = aIndexSegmentTo.iFieldNumber) to bIsSame
58010>>>        If (bIsSame = False) Begin
58012>>>            Function_Return False
58013>>>        End
58013>>>>
58013>>>        If (bCompareIndexUppercase = True) Begin
58015>>>            Move (aIndexSegmentFrom.bUppercase = aIndexSegmentTo.bUppercase) to bIsSame
58016>>>            If (bIsSame = False) Begin
58018>>>                Function_Return False
58019>>>            End
58019>>>>
58019>>>        End
58019>>>>
58019>>>        If (bCompareIndexAscending = True) Begin
58021>>>            Move (aIndexSegmentFrom.bAscending = aIndexSegmentTo.bAscending) to bIsSame
58022>>>            If (bIsSame = False) Begin
58024>>>                Function_Return False
58025>>>            End
58025>>>>
58025>>>        End
58025>>>>
58025>>>
58025>>>        Function_Return True
58026>>>    End_Function
58027>>>
58027>>>    Function UtilIndexesUpdate Handle hTable Boolean bIsSQLTableFrom Boolean bIsSQLTableTo tAPIIndex[] aIndexesFrom tAPIIndex[] aIndexesTo Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Boolean
58029>>>        Boolean bIsSame bOK
58029>>>        Integer iSize iSizeTo iCount
58029>>>        tAPIIndexCompare[] aAPIIndexCompare
58029>>>        tAPIIndexCompare[] aAPIIndexCompare
58030>>>
58030>>>        Move (SizeOfArray(aIndexesFrom)) to iSize
58031>>>        If (iSize = 0) Begin
58033>>>            Function_Return True
58034>>>        End
58034>>>>
58034>>>        Move (SizeOfArray(aIndexesTo)) to iSizeTo
58035>>>        Get _UtilTableIsSql hTable to bIsSQLTableTo
58036>>>        Get UtilIndexCombineFromAndToArrays aIndexesFrom aIndexesTo to aAPIIndexCompare
58037>>>
58037>>>        for iCount from 0 to (iSize - 1)
58043>>>>
58043>>>            Get UtilIndexCompare bIsSQLTableFrom bIsSQLTableTo aAPIIndexCompare[iCount] bCompareIndexUppercase bCompareIndexAscending to bIsSame
58044>>>            If (bIsSame = False) Begin
58046>>>                Get APIIndexCreateByFieldNames hTable aIndexesFrom[iCount] aIndexesTo aIndexesFrom[iCount].IndexSegmentArray to bOK
58047>>>            End
58047>>>>
58047>>>        Loop
58048>>>>
58048>>>
58048>>>        // We probably should delete other indexes if they exists.
58048>>>        for iCount from (iSize +1) to iSizeTo
58054>>>>
58054>>>            Get ApiIndexRemove hTable iCount to bOK
58055>>>        Loop
58056>>>>
58056>>>
58056>>>        Function_Return bOK
58057>>>    End_Function
58058>>>
58058>>>    Function UtilIndexesStructFill Handle hTable Returns tAPIIndex[]
58060>>>        tAPIIndex[] APIIndexes
58060>>>        tAPIIndex[] APIIndexes
58061>>>        Integer iCount iIndex iIndexes iSegment iSegmentCount iNumSegments iColumn
58061>>>        String sDriverID
58061>>>        Boolean bDAWSQLDriver bIsOpen bIsSQLTable
58061>>>
58061>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
58062>>>        Get psDriverID to sDriverID
58063>>>        Get IsDAWSQLDriver sDriverID to bDAWSQLDriver
58064>>>        Get _UtilTableIsSql hTable to bIsSQLTable
58065>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
58068>>>        If (bIsOpen = False) Begin
58070>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
58071>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
58072>>>            Open hTable
58074>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
58075>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
58076>>>            Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
58079>>>            If (bIsOpen = False) Begin
58081>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
58082>>>                Move True to APIIndexes[0].bError
58083>>>                Function_Return APIIndexes
58084>>>            End
58084>>>>
58084>>>        End
58084>>>>
58084>>>
58084>>>        Move 0 to iCount
58085>>>        Get_Attribute DF_FILE_LAST_INDEX_NUMBER of hTable to iIndexes
58088>>>        for iIndex from 1 to iIndexes
58094>>>>
58094>>>            // This is a test that the index exists as there might be "holes" aka the index
58094>>>            // numbers doesn't not need to be consequitive:
58094>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
58097>>>            If (iNumSegments > 0) Begin
58099>>>
58099>>>                Move iIndex                                                     to APIIndexes[iCount].iIndexNumber
58100>>>                Get_Attribute DF_FILE_PRIMARY_INDEX of hTable                   to APIIndexes[iCount].iPrimaryIndex
58103>>>                If (bIsSQLTable = True) Begin
58105>>>                    Get_Attribute DF_INDEX_NAME         of hTable iIndex        to APIIndexes[iCount].sSQLIndexName
58108>>>                        Get_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable iIndex to APIIndexes[iCount].bIsSQLPrimaryKey
58111>>>                        Get_Attribute DF_INDEX_CLUSTERED of hTable iIndex       to APIIndexes[iCount].bIsSQLClustered
58114>>>                        Get_Attribute DF_INDEX_SQL_TYPE of hTable iIndex        to APIIndexes[iCount].iSQLIndexType // (DF_INDEX_SQL_TYPE = DF_INDEX_SERVER, DF_INDEX_CLIENT, DF_INDEX_SERVER_ONLY or DF_INDEX_TEMPORARY)
58117>>>                End
58117>>>>
58117>>>
58117>>>                Move 0 to iSegmentCount
58118>>>                Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
58121>>>                For iSegment from 1 to iNumSegments
58127>>>>
58127>>>                    Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iSegment to iColumn
58130>>>                    Move iColumn                                                       to APIIndexes[iCount].IndexSegmentArray[iSegmentCount].iFieldNumber
58131>>>                    Get_Attribute DF_FIELD_NAME              of hTable iColumn         to APIIndexes[iCount].IndexSegmentArray[iSegmentCount].sFieldName
58134>>>                    Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iSegment to APIIndexes[iCount].IndexSegmentArray[iSegmentCount].bUppercase
58137>>>                    Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iSegment to APIIndexes[iCount].IndexSegmentArray[iSegmentCount].bAscending
58140>>>                    Increment iSegmentCount
58141>>>                Loop
58142>>>>
58142>>>                Increment iCount
58143>>>            End
58143>>>>
58143>>>        Loop
58144>>>>
58144>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
58145>>>
58145>>>        Function_Return APIIndexes
58146>>>    End_Function
58147>>>
58147>>>    // This will return a struct array with the combined data for the passed FROM and TO index arrays.
58147>>>    // The combined data will be sorted on the first struct member: iIndexNumber
58147>>>    // This is needed because index numbers can start at any number. The range for a particular table might also
58147>>>    // have "holes" in the series of index numbers.
58147>>>    Function UtilIndexCombineFromAndToArrays tAPIIndex[] APIIndexFrom tAPIIndex[] APIIndexTo Returns tAPIIndexCompare[]
58149>>>        tAPIIndexCompare[] aAPIIndexCompare
58149>>>        tAPIIndexCompare[] aAPIIndexCompare
58150>>>        tAPIIndexCompare   APIIndexCompare
58150>>>        tAPIIndexCompare   APIIndexCompare
58150>>>        Integer iSizeFrom iSizeTo iSize iCount iItem
58150>>>
58150>>>        Move (SizeOfArray(APIIndexFrom)) to iSizeFrom
58151>>>        Move (SizeOfArray(APIIndexTo)) to iSizeTo
58152>>>        If (iSizeFrom = 0 and iSizeTo = 0) Begin
58154>>>            Function_Return aAPIIndexCompare
58155>>>        End
58155>>>>
58155>>>
58155>>>        Decrement iSizeFrom
58156>>>        for iCount from 0 to iSizeFrom
58162>>>>
58162>>>            Move APIIndexFrom[iCount].iIndexNumber      to aAPIIndexCompare[iCount].iIndexNumber
58163>>>            Move APIIndexFrom[iCount].iPrimaryIndex     to aAPIIndexCompare[iCount].iPrimaryIndexFrom
58164>>>            Move APIIndexFrom[iCount].sSQLIndexName     to aAPIIndexCompare[iCount].sSQLIndexNameFrom
58165>>>            Move APIIndexFrom[iCount].iSQLIndexType     to aAPIIndexCompare[iCount].iSQLIndexTypeFrom
58166>>>            Move APIIndexFrom[iCount].bIsSQLClustered   to aAPIIndexCompare[iCount].bIsSQLClusteredFrom
58167>>>            Move APIIndexFrom[iCount].bIsSQLPrimaryKey  to aAPIIndexCompare[iCount].bIsSQLPrimaryKeyFrom
58168>>>            Move APIIndexFrom[iCount].IndexSegmentArray to aAPIIndexCompare[iCount].IndexSegmentArrayFrom
58169>>>            Move APIIndexFrom[iCount].bShouldChange     to aAPIIndexCompare[iCount].bShouldChangeFrom
58170>>>            Move APIIndexFrom[iCount].bCancel           to aAPIIndexCompare[iCount].bCancelFrom
58171>>>            Move APIIndexFrom[iCount].bError            to aAPIIndexCompare[iCount].bErrorFrom
58172>>>            Move True                                   to aAPIIndexCompare[iCount].bExistsFrom
58173>>>        Loop
58174>>>>
58174>>>
58174>>>        Decrement iSizeTo
58175>>>        for iCount from 0 to iSizeTo
58181>>>>
58181>>>            Move APIIndexTo[iCount].iIndexNumber        to APIIndexCompare.iIndexNumber
58182>>>            // Search if the Index number already exists in the array; else add it.
58182>>>            Move (SearchArray(APIIndexCompare, aAPIIndexCompare)) to iItem
58183>>>            If (iItem = -1) Begin
58185>>>                Move (SizeOfArray(aAPIIndexCompare))    to iItem
58186>>>            End
58186>>>>
58186>>>
58186>>>            Move APIIndexCompare.iIndexNumber           to aAPIIndexCompare[iItem].iIndexNumber
58187>>>            Move APIIndexTo[iCount].iPrimaryIndex       to aAPIIndexCompare[iItem].iPrimaryIndexTo
58188>>>            Move APIIndexTo[iCount].sSQLIndexName       to aAPIIndexCompare[iItem].sSQLIndexNameTo
58189>>>            Move APIIndexTo[iCount].iSQLIndexType       to aAPIIndexCompare[iItem].iSQLIndexTypeTo
58190>>>            Move APIIndexTo[iCount].bIsSQLClustered     to aAPIIndexCompare[iItem].bIsSQLClusteredTo
58191>>>            Move APIIndexTo[iCount].bIsSQLPrimaryKey    to aAPIIndexCompare[iItem].bIsSQLPrimaryKeyTo
58192>>>            Move APIIndexTo[iCount].IndexSegmentArray   to aAPIIndexCompare[iItem].IndexSegmentArrayTo
58193>>>            Move APIIndexTo[iCount].bShouldChange       to aAPIIndexCompare[iItem].bShouldChangeTo
58194>>>            Move APIIndexTo[iCount].bCancel             to aAPIIndexCompare[iItem].bCancelTo
58195>>>            Move APIIndexTo[iCount].bError              to aAPIIndexCompare[iItem].bErrorTo
58196>>>            Move True                                   to aAPIIndexCompare[iItem].bExistsTo
58197>>>        Loop
58198>>>>
58198>>>
58198>>>        Move (SortArray(aAPIIndexCompare)) to aAPIIndexCompare
58199>>>
58199>>>        Function_Return aAPIIndexCompare
58200>>>    End_Function
58201>>>
58201>>>    // This is the same as the UtilIndexCompare function but it takes tAPIIndex structs as params.
58201>>>    Function UtilIndexTypeNumberCompare Handle hTable tAPIIndex aIndexFrom tAPIIndex aIndexTo Returns Boolean
58203>>>        Boolean bIsSame bDAWSQLDriver bIsSqlTable
58203>>>        String sDriverID
58203>>>
58203>>>        Get psDriverID to sDriverID
58204>>>        Get IsDAWSQLDriver sDriverID to bDAWSQLDriver
58205>>>        Get IsSQLDriver sDriverID to bIsSqlTable
58206>>>        If (bIsSqlTable = True) Begin
58208>>>            Get _UtilTableIsSql hTable to bIsSqlTable
58209>>>        End
58209>>>>
58209>>>
58209>>>        Move (aIndexFrom.iIndexNumber = aIndexTo.iIndexNumber) to bIsSame
58210>>>        If (bIsSame = False) Begin
58212>>>            Function_Return False
58213>>>        End
58213>>>>
58213>>>
58213>>>        If (bDAWSQLDriver = True and bIsSqlTable = True) Begin
58215>>>            // Don't think we should do this. Or should we?
58215>>>            // Move (aIndexesFrom[iCount].sSQLIndexName = aIndexesTo[iCount].sSQLIndexName) to bIsSame
58215>>>
58215>>>            Move (aIndexFrom.iSQLIndexType = aIndexTo.iSQLIndexType) to bIsSame
58216>>>            If (bIsSame = False) Begin
58218>>>                Function_Return False
58219>>>            End
58219>>>>
58219>>>            Move (aIndexFrom.iPrimaryIndex = aIndexTo.iPrimaryIndex) to bIsSame
58220>>>            If (bIsSame = False) Begin
58222>>>                Function_Return False
58223>>>            End
58223>>>>
58223>>>            Move (aIndexFrom.bIsSQLPrimaryKey = aIndexTo.bIsSQLPrimaryKey) to bIsSame
58224>>>            If (bIsSame = False) Begin
58226>>>                Function_Return False
58227>>>            End
58227>>>>
58227>>>            Move (aIndexFrom.bIsSQLClustered = aIndexTo.bIsSQLClustered) to bIsSame
58228>>>            If (bIsSame = False) Begin
58230>>>                Function_Return False
58231>>>            End
58231>>>>
58231>>>        End
58231>>>>
58231>>>
58231>>>        Function_Return bIsSame
58232>>>    End_Function
58233>>>
58233>>>    // DF_INDEX_SQL_TYPE values
58233>>>    // Pass one of the DF_INDEX_XXX integer constants and the function
58233>>>    // returns a string with the name.
58233>>>    Function UtilIndexTypeToString Integer iIndexType Returns String
58235>>>        String sRetval
58235>>>            Case Begin
58235>>>                Case (iIndexType = DF_INDEX_CLIENT)
58237>>>                    Move "DF_INDEX_CLIENT" to sRetval
58238>>>                    Case Break
58239>>>                Case (iIndexType = DF_INDEX_SERVER)
58242>>>                    Move "DF_INDEX_SERVER" to sRetval
58243>>>                    Case Break
58244>>>                Case (iIndexType = DF_INDEX_SERVER_ONLY)
58247>>>                    Move "DF_INDEX_SERVER_ONLY" to sRetval
58248>>>                    Case Break
58249>>>                Case (iIndexType = DF_INDEX_TEMPORARY)
58252>>>                    Move "DF_INDEX_TEMPORARY" to sRetval
58253>>>                    Case Break
58254>>>                Case Else
58254>>>                    Move "UNKNOWN INDEX TYPE" to sRetval
58255>>>            Case End
58255>>>        Function_Return sRetval
58256>>>    End_Function
58257>>>
58257>>>    // * Dummy function for the Studio's Code Explorer *
58257>>>    Function API_RELATION_UTILITY_FUNCTIONS Returns Boolean
58259>>>        Function_Return False
58260>>>    End_Function
58261>>>
58261>>>    // Compares multiple relationships for a 'FROM' and a 'TO' databases
58261>>>    Function UtilRelationsCompare Handle hTable tAPIRelationCompare[] aAPIRelationCompare Returns Boolean
58263>>>        Boolean bIsSame
58263>>>        Integer iSize iCount
58263>>>
58263>>>        Move True to bIsSame
58264>>>        Move (SizeOfArray(aAPIRelationCompare)) to iSize
58265>>>        Decrement iSize
58266>>>        For iCount from 0 to iSize
58272>>>>
58272>>>            Get UtilRelationCompare hTable aAPIRelationCompare[iCount] to bIsSame
58273>>>            If (bIsSame = False) Begin
58275>>>                Function_Return False
58276>>>            End
58276>>>>
58276>>>        Loop
58277>>>>
58277>>>
58277>>>        Function_Return bIsSame
58278>>>    End_Function
58279>>>
58279>>>    // Compares a single relationship for a 'FROM' and a 'TO' table
58279>>>    Function UtilRelationCompare Handle hTable tAPIRelationCompare APIRelationCompare Returns Boolean
58281>>>        Boolean bIsSame
58281>>>
58281>>>        Move True to bIsSame
58282>>>        If (APIRelationCompare.bExistsFrom <> APIRelationCompare.bExistsTo) Begin
58284>>>            Function_Return False
58285>>>        End
58285>>>>
58285>>>        If (APIRelationCompare.hTableFrom = 0 or APIRelationCompare.hTableTo = 0) Begin
58287>>>            Function_Return False
58288>>>        End
58288>>>>
58288>>>
58288>>>        // We could also compare field names, but I don't think that is necessary...
58288>>>
58288>>>        Function_Return bIsSame
58289>>>    End_Function
58290>>>
58290>>>    // This message is different from ApiTableCreate in that it will not do a function_return if the table
58290>>>    // already exists.
58290>>>    Function UtilRelationsUpdate Handle hTable tAPIRelation[] aRelationsFrom tAPIRelation[] aRelationsTo Returns Boolean
58292>>>        Boolean bOK
58292>>>        Integer iSizeTo iSize iCount iColumn
58292>>>        String sDriverID
58292>>>
58292>>>        Move True to bOK
58293>>>        Move (SizeOfArray(aRelationsTo))   to iSizeTo
58294>>>        If (iSizeTo > 0) Begin
58296>>>            Get AutoConnectionIDLogin to bOK
58297>>>            Move False to Err
58298>>>            Open hTable Mode DF_EXCLUSIVE
58300>>>            Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
58303>>>            Decrement iSizeTo
58304>>>
58304>>>            // We should probably not make any comparison between "FROM" and "TO" database; instead just create all "FROM" relations
58304>>>            // for the "TO" database. But start by deleting all current "TO" relations:
58304>>>            Structure_Start hTable sDriverID
58305>>>                for iCount from 0 to iSizeTo
58311>>>>
58311>>>                    Move aRelationsTo[iCount].iColumnFrom to iColumn
58312>>>                    Set_Attribute DF_FIELD_RELATED_FILE  of hTable iColumn to 0
58315>>>                    Set_Attribute DF_FIELD_RELATED_FIELD of hTable iColumn to 0
58318>>>                Loop
58319>>>>
58319>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
58320>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
58322>>>            Set Action_Text of ghoStatusPanel to ""
58323>>>        End
58323>>>>
58323>>>
58323>>>        Move (SizeOfArray(aRelationsFrom)) to iSize
58324>>>        Decrement iSize
58325>>>        for iCount from 0 to iSize
58331>>>>
58331>>>            Get ApiTableRelate aRelationsFrom[iCount].hTableFrom aRelationsFrom[iCount].hTableTo aRelationsFrom[iCount].iColumnFrom aRelationsFrom[iCount].iColumnTo aRelationsTo to bOK
58332>>>        Loop
58333>>>>
58333>>>
58333>>>        Function_Return bOK
58334>>>    End_Function
58335>>>
58335>>>    Function UtilRelationsStructFill Handle hTable Returns tAPIRelation[]
58337>>>        tAPIRelation[] APIRelations
58337>>>        tAPIRelation[] APIRelations
58338>>>        Integer iColumn iColumnTo iNumColumns iCount
58338>>>        Handle hParent
58338>>>        Boolean bIsOpen
58338>>>
58338>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
58339>>>        Move 0 to iCount
58340>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
58343>>>        If (bIsOpen = False) Begin
58345>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
58346>>>            Open hTable
58348>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
58349>>>            Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
58352>>>            If (bIsOpen = False) Begin
58354>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
58355>>>                Move True to APIRelations[0].bError
58356>>>                Function_Return APIRelations
58357>>>            End
58357>>>>
58357>>>        End
58357>>>>
58357>>>
58357>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
58360>>>        For iColumn from 1 to iNumColumns
58366>>>>
58366>>>            Get_Attribute DF_FIELD_RELATED_FILE of hTable iColumn to hParent
58369>>>            If (hParent <> 0) Begin
58371>>>                Open hParent
58373>>>                Move hTable                                             to APIRelations[iCount].hTableFrom
58374>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable            to APIRelations[iCount].sLogicalNameFrom
58377>>>                Move iColumn                                            to APIRelations[iCount].iColumnFrom
58378>>>                Get_Attribute DF_FIELD_NAME of hTable iColumn           to APIRelations[iCount].sFieldNameFrom
58381>>>
58381>>>                Move hParent                                            to APIRelations[iCount].hTableTo
58382>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hParent           to APIRelations[iCount].sLogicalNameTo
58385>>>                Get_Attribute DF_FIELD_RELATED_FIELD of hTable iColumn  to iColumnTo
58388>>>                Move iColumnTo                                          to APIRelations[iCount].iColumnTo
58389>>>                Get_Attribute DF_FIELD_NAME of hParent iColumnTo        to APIRelations[iCount].sFieldNameTo
58392>>>                Move False                                              to APIRelations[iCount].bShouldChange
58393>>>                Move False                                              to APIRelations[iCount].bCancel
58394>>>                Move False                                              to APIRelations[iCount].bError
58395>>>                Close hParent
58396>>>                Increment iCount
58397>>>            End
58397>>>>
58397>>>        Loop
58398>>>>
58398>>>
58398>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
58399>>>        Function_Return APIRelations
58400>>>    End_Function
58401>>>
58401>>>    // This will return a struct array with the combined data for the passed FROM and TO relation arrays.
58401>>>    // The combined data will be sorted on the first 4 struct members: hTableFrom, iColumnFrom, hTableTo and iColumnTo
58401>>>    Function UtilRelationCombineFromAndToArrays tAPIRelation[] aAPIRelationFrom tAPIRelation[] aAPIRelationTo Returns tAPIIndexCompare[]
58403>>>        tAPIRelation[] aAPIRelationFromAndTo
58403>>>        tAPIRelation[] aAPIRelationFromAndTo
58404>>>        tAPIRelationCompare[] aAPIRelationCompare
58404>>>        tAPIRelationCompare[] aAPIRelationCompare
58405>>>        tAPIRelationCompare   APIRelationCompare
58405>>>        tAPIRelationCompare   APIRelationCompare
58405>>>        Integer iSizeFrom iSizeTo iSize iCount iItem
58405>>>
58405>>>        Move (SizeOfArray(aAPIRelationFrom)) to iSizeFrom
58406>>>        Move (SizeOfArray(aAPIRelationTo))   to iSizeTo
58407>>>        If (iSizeFrom = 0 and iSizeTo = 0) Begin
58409>>>            Function_Return aAPIRelationCompare
58410>>>        End
58410>>>>
58410>>>
58410>>>        Move (AppendArray(aAPIRelationFrom, aAPIRelationTo)) to aAPIRelationFromAndTo
58411>>>        Move (SortArray(aAPIRelationFromAndTo, Self, RefFunc(__UtilRelationArrayCompare))) to aAPIRelationFromAndTo
58412>>>
58412>>>        Decrement iSizeFrom
58413>>>        for iCount from 0 to iSizeFrom
58419>>>>
58419>>>            Move aAPIRelationFrom[iCount].hTableFrom        to aAPIRelationCompare[iCount].hTableFrom
58420>>>            Move aAPIRelationFrom[iCount].iColumnFrom       to aAPIRelationCompare[iCount].iColumnFrom
58421>>>            Move aAPIRelationFrom[iCount].hTableTo          to aAPIRelationCompare[iCount].hTableTo
58422>>>            Move aAPIRelationFrom[iCount].iColumnTo         to aAPIRelationCompare[iCount].iColumnTo
58423>>>            Move aAPIRelationFrom[iCount].sLogicalNameFrom  to aAPIRelationCompare[iCount].sLogicalNameFrom_From
58424>>>            Move aAPIRelationFrom[iCount].sLogicalNameTo    to aAPIRelationCompare[iCount].sLogicalNameTo_From
58425>>>            Move aAPIRelationFrom[iCount].sFieldNameFrom    to aAPIRelationCompare[iCount].sFieldNameFrom_From
58426>>>            Move aAPIRelationFrom[iCount].sFieldNameTo      to aAPIRelationCompare[iCount].sFieldNameTo_From
58427>>>            Move aAPIRelationFrom[iCount].bShouldChange     to aAPIRelationCompare[iCount].bShouldChange_From
58428>>>            Move aAPIRelationFrom[iCount].bCancel           to aAPIRelationCompare[iCount].bCancel_From
58429>>>            Move aAPIRelationFrom[iCount].bError            to aAPIRelationCompare[iCount].bError_From
58430>>>            Move True                                       to aAPIRelationCompare[iCount].bExistsFrom
58431>>>        Loop
58432>>>>
58432>>>
58432>>>        Decrement iSizeTo
58433>>>        for iCount from 0 to iSizeTo
58439>>>>
58439>>>            Move aAPIRelationTo[iCount].hTableFrom          to APIRelationCompare.hTableFrom
58440>>>            Move aAPIRelationTo[iCount].iColumnFrom         to APIRelationCompare.iColumnFrom
58441>>>            Move aAPIRelationTo[iCount].hTableTo            to APIRelationCompare.hTableTo
58442>>>            Move aAPIRelationTo[iCount].iColumnTo           to APIRelationCompare.iColumnTo
58443>>>
58443>>>            // Search if the relation already exists in the array; else add it.
58443>>>            Move (SearchArray(APIRelationCompare, aAPIRelationCompare, Self, RefFunc(__SearchRelationCompare))) to iItem
58444>>>            If (iItem = -1) Begin
58446>>>                Move (SizeOfArray(aAPIRelationCompare))     to iItem
58447>>>            End
58447>>>>
58447>>>
58447>>>            Move APIRelationCompare.hTableFrom              to aAPIRelationCompare[iItem].hTableFrom
58448>>>            Move APIRelationCompare.iColumnFrom             to aAPIRelationCompare[iItem].iColumnFrom
58449>>>            Move APIRelationCompare.hTableTo                to aAPIRelationCompare[iItem].hTableTo
58450>>>            Move APIRelationCompare.iColumnTo               to aAPIRelationCompare[iItem].iColumnTo
58451>>>            Move aAPIRelationTo[iCount].sLogicalNameFrom    to aAPIRelationCompare[iItem].sLogicalNameFrom_To
58452>>>            Move aAPIRelationTo[iCount].sLogicalNameTo      to aAPIRelationCompare[iItem].sLogicalNameTo_To
58453>>>            Move aAPIRelationTo[iCount].sFieldNameFrom      to aAPIRelationCompare[iItem].sFieldNameFrom_To
58454>>>            Move aAPIRelationTo[iCount].sFieldNameTo        to aAPIRelationCompare[iItem].sFieldNameTo_To
58455>>>            Move aAPIRelationTo[iCount].bShouldChange       to aAPIRelationCompare[iItem].bShouldChange_To
58456>>>            Move aAPIRelationTo[iCount].bCancel             to aAPIRelationCompare[iItem].bCancel_To
58457>>>            Move aAPIRelationTo[iCount].bError              to aAPIRelationCompare[iItem].bError_To
58458>>>            Move True                                       to aAPIRelationCompare[iItem].bExistsTo
58459>>>        Loop
58460>>>>
58460>>>
58460>>>        Move (SortArray(aAPIRelationCompare, Self, RefFunc(__SearchRelationCompare))) to aAPIRelationCompare
58461>>>
58461>>>        Function_Return aAPIRelationCompare
58462>>>    End_Function
58463>>>
58463>>>    // * Dummy function for the Studio's Code Explorer *
58463>>>    Function CODEMAST_UTILITY_FUNCTIONS Returns Boolean
58465>>>        Function_Return False
58466>>>    End_Function
58467>>>
58467>>>    // To add a value to the CodeMast & CodeType tables. Pass; a) bCodeType if it is CodeType that should be updated.
58467>>>    // Else it is CodeMast. b) sTypeValue; either to be added If bCodeType = True, or it will be used to find the correct
58467>>>    // CodeType record. c) sValue1 and d) sValue2 is the CodeType Description & Comment, or CodeMast Type and Code values.
58467>>>    Function UtilCodeMasterAddValue Boolean bCodeType String sTypeValue String sValue2 String sValue3 Returns Boolean
58469>>>        Boolean bFound
58469>>>
58469>>>        Move False to Err
58470>>>        Open CodeMast
58472>>>        Open CodeType
58474>>>
58474>>>        If (bCodeType = True) Begin
58476>>>            Set Private.phCurrentTable to CODETYPE.File_Number
58477>>>            Clear CodeType
58478>>>            Move sTypeValue to CODETYPE.Type
58479>>>            Find eq CODETYPE by 1
58480>>>>
58480>>>            Move Found to bFound
58481>>>            If (bFound = True) Begin
58483>>>                Reread CodeType
58487>>>            End
58487>>>>
58487>>>            Else Begin
58488>>>                Clear CodeType
58489>>>            End
58489>>>>
58489>>>
58489>>>            Move sTypeValue to CODETYPE.Type
58490>>>            Move sValue2    to CODETYPE.Description
58491>>>            Move sValue3    to CODETYPE.Comment
58492>>>            SaveRecord CODETYPE
58493>>>
58493>>>            If (bFound = True) Begin
58495>>>                Unlock
58496>>>>
58496>>>            End
58496>>>>
58496>>>        End
58496>>>>
58496>>>
58496>>>        If (bCodeType = False) Begin
58498>>>            Set Private.phCurrentTable to CODEMAST.File_Number
58499>>>            Clear CODEMAST
58500>>>            Move sTypeValue to CODEMAST.Type
58501>>>            Move sValue2    to CODEMAST.Code
58502>>>            Find eq CODEMAST by 1
58503>>>>
58503>>>            Move Found to bFound
58504>>>            If (bFound = True) Begin
58506>>>                Reread CODEMAST
58510>>>            End
58510>>>>
58510>>>            Else Begin
58511>>>                Clear CODEMAST
58512>>>            End
58512>>>>
58512>>>
58512>>>            Move sTypeValue to CODEMAST.Type
58513>>>            Move sValue2    to CODEMAST.Code
58514>>>            Move sValue3    to CODEMAST.Description
58515>>>            SaveRecord CODEMAST
58516>>>
58516>>>            If (bFound = True) Begin
58518>>>                Unlock
58519>>>>
58519>>>            End
58519>>>>
58519>>>        End
58519>>>>
58519>>>
58519>>>        Close CodeMast
58520>>>        Close CodeType
58521>>>
58521>>>        Function_Return (Err = False)
58522>>>    End_Function
58523>>>
58523>>>    // Changes values in CodeType & CodeMast - From type value To type value. It first changes the type value in
58523>>>    // CodeType and then spins through all CodeMast records to change all related records.
58523>>>    Function UtilCodeMasterChangeValue String sFromValue String sToValue Returns Boolean
58525>>>        Boolean bFound
58525>>>
58525>>>        Move False to Err
58526>>>        Open CodeMast
58528>>>        Open CodeType
58530>>>
58530>>>        Clear CodeType
58531>>>        Move sFromValue to CODETYPE.Type
58532>>>        Find eq CODETYPE.Type
58533>>>>
58533>>>        If (Found = True) Begin
58535>>>            Reread CODETYPE
58539>>>                Move sToValue to CODETYPE.Type
58540>>>                SaveRecord CODETYPE
58541>>>            Unlock
58542>>>>
58542>>>        End
58542>>>>
58542>>>
58542>>>        Clear CODEMAST
58543>>>        Find gt CODEMAST by Recnum
58544>>>>
58544>>>        While (Found = True)
58548>>>            Move (Trim(Uppercase(CODEMAST.Type) = Trim(Uppercase(sFromValue)))) to bFound
58549>>>            If (bFound = True) Begin
58551>>>                Reread CODEMAST
58555>>>                    Move sToValue to CODEMAST.Type
58556>>>                    SaveRecord CODEMAST
58557>>>                Unlock
58558>>>>
58558>>>            End
58558>>>>
58558>>>            Find gt CODEMAST by Recnum
58559>>>>
58559>>>        Loop
58560>>>>
58560>>>
58560>>>        Close CodeMast
58561>>>        Close CodeType
58562>>>
58562>>>        Function_Return (Err = False)
58563>>>    End_Function
58564>>>
58564>>>    // Removes a value from CodeMast. Pass the sTypeValue and the sValue2 to remove.
58564>>>    Function UtilCodeMasterRemoveValue String sTypeValue String sValue2 Returns Boolean
58566>>>        Boolean bFound
58566>>>
58566>>>        Move False to Err
58567>>>        Open CodeMast
58569>>>
58569>>>        Clear CODEMAST
58570>>>        Move sTypeValue to CODEMAST.Type
58571>>>        Move sValue2    to CODEMAST.Code
58572>>>        Find eq CODEMAST.Code
58573>>>>
58573>>>        Move Found to bFound
58574>>>        If (bFound = True) Begin
58576>>>            Delete CODEMAST
58577>>>        End
58577>>>>
58577>>>
58577>>>        Close CodeMast
58578>>>
58578>>>        Function_Return (Err = False)
58579>>>    End_Function
58580>>>
58580>>>    Function UtilTableCreateCodeMastCodeTypeIntFiles String sDataPath Returns Boolean
58582>>>        Boolean bRecnum bToAnsi
58582>>>        Integer iCh
58582>>>        String sFileName sDriverID sConnectionID sSchemaName sANSI_OEM
58582>>>
58582>>>        If (Trim(sDataPath) = "") Begin
58584>>>            Function_Return False
58585>>>        End
58585>>>>
58585>>>
58585>>>        Move False to Err
58586>>>        Get psDriverID     to sDriverID
58587>>>        Get psConnectionID to sConnectionID
58588>>>        Get psSchema       to sSchemaName
58589>>>        Get True           to bRecnum
58590>>>        Get pbToANSI       to bToAnsi
58591>>>        Move CS_ANSI_Txt to sANSI_OEM
58592>>>        If (bToAnsi = False) Begin
58594>>>            Move CS_OEM_Txt to sANSI_OEM
58595>>>        End
58595>>>>
58595>>>
58595>>>        Get vFolderFormat sDataPath to sDataPath
58596>>>        Move "CodeMast.int"         to sFileName
58597>>>        Get Seq_Open_Output_Channel (sDataPath + sFileName) to iCh
58598>>>            Writeln channel iCh ("DRIVER_NAME" * sDriverID)
58601>>>            Writeln channel iCh ("SERVER_NAME DFCONNID=" + sConnectionID)
58604>>>            Writeln channel iCh ("DATABASE_NAME CODEMAST")
58607>>>            Writeln channel iCh ("SCHEMA_NAME" * sSchemaName)
58610>>>            Writeln channel iCh ("")
58613>>>            Writeln channel iCh ("RECNUM_TABLE YES")
58616>>>            Writeln channel iCh ("PRIMARY_INDEX 0")
58619>>>            Writeln channel iCh ("TABLE_CHARACTER_FORMAT" * sANSI_OEM)
58622>>>            Writeln channel iCh ("USE_DUMMY_ZERO_DATE YES")
58625>>>            Writeln channel iCh ("")
58628>>>            Writeln channel iCh ("INDEX_NUMBER 1")
58631>>>            Writeln channel iCh ("INDEX_NAME CODEMAST001_PK")
58634>>>            Writeln channel iCh ("")
58637>>>        Send Seq_Close_Channel iCh
58638>>>
58638>>>        Get vFolderFormat sDataPath to sDataPath
58639>>>        Move "CodeType.int"         to sFileName
58640>>>        Get Seq_Open_Output_Channel (sDataPath + sFileName) to iCh
58641>>>            Writeln channel iCh ("DRIVER_NAME" * sDriverID)
58644>>>            Writeln channel iCh ("SERVER_NAME DFCONNID=" + sConnectionID)
58647>>>            Writeln channel iCh ("DATABASE_NAME CODETYPE")
58650>>>            Writeln channel iCh ("SCHEMA_NAME" * sSchemaName)
58653>>>            Writeln channel iCh ("")
58656>>>            Writeln channel iCh ("RECNUM_TABLE YES")
58659>>>            Writeln channel iCh ("PRIMARY_INDEX 0")
58662>>>            Writeln channel iCh ("TABLE_CHARACTER_FORMAT" * sANSI_OEM)
58665>>>            Writeln channel iCh ("USE_DUMMY_ZERO_DATE YES")
58668>>>            Writeln channel iCh ("")
58671>>>            Writeln channel iCh ("INDEX_NUMBER 0")
58674>>>            Writeln channel iCh ("INDEX_NAME CODETYPE000")
58677>>>            Writeln channel iCh ("")
58680>>>            Writeln channel iCh ("INDEX_NUMBER 1")
58683>>>            Writeln channel iCh ("INDEX_NAME CODETYPE001_PK")
58686>>>            Writeln channel iCh ("")
58689>>>        Send Seq_Close_Channel iCh
58690>>>
58690>>>        Function_Return (Err = False)
58691>>>    End_Function
58692>>>
58692>>>    // * Dummy function for the Studio's Code Explorer *
58692>>>    Function OTHER_UTILITY_FUNCTIONS Returns Boolean
58694>>>        Function_Return False
58695>>>    End_Function
58696>>>
58696>>>    // Use function to move *.fd, termlist.*, collate.*, dfcollate.* files to a "Data\Backup" folder,
58696>>>    // and to remove all *.cch files (DAW SQL driver cache files. They will get recreated when needed.)
58696>>>    Function UtilMoveMiscFilesToBackupFolder Returns Boolean
58698>>>        Boolean bOK bExists
58698>>>        String sDataPath sBackupFolder
58698>>>
58698>>>        Set Message_Text of ghoStatusPanel to "Moving misc. files to Backup folder."
58699>>>        Move CS_DUFBackupDataFolder to sBackupFolder
58700>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
58701>>>        Get vFolderFormat sDataPath to sDataPath
58702>>>
58702>>>        Get vFilePathExists (sDataPath + sBackupFolder) to bExists
58703>>>        If (bExists = False) Begin
58705>>>            Get vCreateDirectory (sDataPath + sBackupFolder) to bOK
58706>>>            Get vFilePathExists (sDataPath + sBackupFolder) to bExists
58707>>>            If (bExists = False) Begin
58709>>>                Error DFERR_PROGRAM ("Could not create the the backup data folder to move all misc. files to. You need to move them somewhere manually.")
58710>>>>
58710>>>                Function_Return False
58711>>>            End
58711>>>>
58711>>>            Get vMoveFile (sDataPath + "*.fd")         (sDataPath + sBackupFolder) to bOK  
58712>>>            Get vMoveFile (sDataPath + "*.bad")        (sDataPath + sBackupFolder) to bOK  
58713>>>            Get vMoveFile (sDataPath + "*.err")        (sDataPath + sBackupFolder) to bOK  
58714>>>            Get vMoveFile (sDataPath + "*.bak")        (sDataPath + sBackupFolder) to bOK
58715>>>            Get vMoveFile (sDataPath + "*.def")        (sDataPath + sBackupFolder) to bOK
58716>>>            Get vMoveFile (sDataPath + "*.fil")        (sDataPath + sBackupFolder) to bOK
58717>>>            Get vMoveFile (sDataPath + "*.hlp")        (sDataPath + sBackupFolder) to bOK
58718>>>            Get vMoveFile (sDataPath + "*.old")        (sDataPath + sBackupFolder) to bOK           
58719>>>            Get vMoveFile (sDataPath + "*.prn")        (sDataPath + sBackupFolder) to bOK           
58720>>>            Get vMoveFile (sDataPath + "*.sts")        (sDataPath + sBackupFolder) to bOK           
58721>>>            Get vMoveFile (sDataPath + "*.td")         (sDataPath + sBackupFolder) to bOK           
58722>>>            Get vMoveFile (sDataPath + "*.log")        (sDataPath + sBackupFolder) to bOK           
58723>>>            Get vMoveFile (sDataPath + "*.bat")        (sDataPath + sBackupFolder) to bOK           
58724>>>            Get vMoveFile (sDataPath + "*.cmd")        (sDataPath + sBackupFolder) to bOK           
58725>>>            Get vMoveFile (sDataPath + "*.zip")        (sDataPath + sBackupFolder) to bOK           
58726>>>            Get vMoveFile (sDataPath + "*.abs")        (sDataPath + sBackupFolder) to bOK           
58727>>>            Get vMoveFile (sDataPath + "termlist.*")   (sDataPath + sBackupFolder) to bOK
58728>>>            Get vMoveFile (sDataPath + "*.dfr")        (sDataPath + sBackupFolder) to bOK
58729>>>            Get vMoveFile (sDataPath + "vsutil.cfg")   (sDataPath + sBackupFolder) to bOK
58730>>>            Get vMoveFile (sDataPath + "collate.*")    (sDataPath + sBackupFolder) to bOK
58731>>>            Get vMoveFile (sDataPath + "df_collate.*") (sDataPath + sBackupFolder) to bOK
58732>>>            Get vDeleteFile (sDataPath + "*.cch")                                  to bOK
58733>>>        End
58733>>>>
58733>>>
58733>>>        Set Message_Text of ghoStatusPanel to ""
58734>>>        Function_Return True
58735>>>    End_Function
58736>>>    
58736>>>    // Check if the file exists in the Data folder,
58736>>>    // else creates it from memory as it has been compiled into the program as a resource:
58736>>>    Function UtilCheckCreateIfFileExists String sFileName String sResourceName Boolean bDataFile Returns Boolean
58738>>>        String sPath
58738>>>        Boolean bExists
58738>>>
58738>>>        Get psDataPathFirstPart to sPath
58739>>>        Move (sPath + sFileName) to sFileName
58740>>>        Get vFilePathExists sFileName to bExists
58741>>>
58741>>>        If (bExists = False) Begin
58743>>>            // Read from memory & create file on disk.
58743>>>            Send SqlUtilCreateFileFromMemory sResourceName sFileName
58744>>>            Get vFilePathExists sFileName to bExists
58745>>>        End
58745>>>>
58745>>>        Function_Return bExists
58746>>>    End_Function
58747>>>
58747>>>    Function UtilSqlColumnTypeToDataFlexType String sDriverID Integer iDbType Integer iDataType Integer iLength Returns Integer
58749>>>        tColumnType RetvalType
58749>>>        tColumnType RetvalType
58749>>>        Integer iRetval
58749>>>
58749>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
58750>>>        Move RetvalType.iDataFlexType to iRetval
58751>>>        If (RetvalType.iDataFlexType = DF_TEXT) Begin
58753>>>            If (iLength <= 255) Begin
58755>>>                Move DF_ASCII to iRetval
58756>>>            End
58756>>>>
58756>>>        End
58756>>>>
58756>>>        Function_Return iRetval
58757>>>    End_Function
58758>>>
58758>>>    Function UtilDataFlexDataTypeToString Integer iDataType Returns String
58760>>>        String sRetval
58760>>>
58760>>>        Case Begin
58760>>>            Case (iDataType = DF_ASCII)
58762>>>                Move "DF_ASCII" to sRetval
58763>>>                Case Break
58764>>>            Case (iDataType = DF_BCD)
58767>>>                Move "DF_BCD" to sRetval
58768>>>                Case Break
58769>>>            Case (iDataType = DF_BINARY)
58772>>>                Move "DF_BINARY" to sRetval
58773>>>                Case Break
58774>>>            Case (iDataType = DF_DATE)
58777>>>                Move "DF_DATE" to sRetval
58778>>>                Case Break
58779>>>            Case (iDataType = DF_DATETIME)
58782>>>                Move "DF_DATETIME" to sRetval
58783>>>                Case Break
58784>>>            Case (iDataType = DF_TEXT)
58787>>>                Move "DF_TEXT" to sRetval
58788>>>                Case Break
58789>>>            Case Else
58789>>>                Move "" to sRetval
58790>>>        Case End
58790>>>
58790>>>        Function_Return sRetval
58791>>>    End_Function
58792>>>
58792>>>    // The default value used for a datatype as specified in the driver int file.
58792>>>    Function UtilDataTypeDefaultValue String sDriverID Integer iDbType Integer iDataType Returns String
58794>>>        String sRetval sServer
58794>>>        tColumnType RetvalType
58794>>>        tColumnType RetvalType
58794>>>        Integer iDriver iDataFlexType
58794>>>        Handle hDatabase
58794>>>
58794>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
58795>>>        Move RetvalType.iDataFlexType to iDataFlexType
58796>>>        Get DriverIndex sDriverID to iDriver
58797>>>        Get psServer to sServer
58798>>>        Get SqlUtilDatabaseHandle sDriverID sServer to hDatabase
58799>>>        If (hDatabase = 0) Begin
58801>>>            Function_Return ""
58802>>>        End
58802>>>>
58802>>>
58802>>>        Case Begin
58802>>>            Case (iDataFlexType = DF_ASCII)
58804>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_ASCII     of iDriver hDatabase to sRetval
58807>>>                Case Break
58808>>>            Case (iDataFlexType = DF_BCD)
58811>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_NUMERIC   of iDriver hDatabase to sRetval
58814>>>                Case Break
58815>>>            Case (iDataFlexType = DF_BINARY)
58818>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_BINARY    of iDriver hDatabase to sRetval
58821>>>                Case Break
58822>>>            Case (iDataFlexType = DF_DATE)
58825>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_DATE      of iDriver hDatabase to sRetval
58828>>>                Case Break
58829>>>            Case (iDataFlexType = DF_DATETIME)
58832>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_DATETIME  of iDriver hDatabase to sRetval
58835>>>                Case Break
58836>>>            Case (iDataFlexType = DF_TEXT)
58839>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_TEXT      of iDriver hDatabase to sRetval
58842>>>                Case Break
58843>>>            Case Else
58843>>>                Move "" to sRetval
58844>>>        Case End
58844>>>
58844>>>        Function_Return sRetval
58845>>>    End_Function
58846>>>
58846>>>    Procedure Set Df_Database_Default_Default_Date_DUF String sDateValue
58848>>>        String sDriverID sServer
58848>>>        tColumnType RetvalType
58848>>>        tColumnType RetvalType
58848>>>        Integer iDbType iDriver
58848>>>        Handle hDatabase
58848>>>
58848>>>        Get psDriverID to sDriverID
58849>>>        Get piDbType   to iDbType
58850>>>        Get DriverIndex sDriverID to iDriver
58851>>>        Get psServer to sServer
58852>>>        Get SqlUtilDatabaseHandle sDriverID sServer to hDatabase
58853>>>        If (hDatabase = 0) Begin
58855>>>            Error DFERR_PROGRAM "Could not change the Default Date Value. Could not get a handle to the database. (Check that at least one connection is 'Enabled')"
58856>>>>
58856>>>            Procedure_Return
58857>>>        End
58857>>>>
58857>>>
58857>>>        Set_Attribute DF_DATABASE_DEFAULT_DEFAULT_DATE of iDriver hDatabase to sDateValue
58860>>>
58860>>>    End_Procedure
58861>>>
58861>>>    Procedure Set Df_Database_Default_Default_Datetime_DUF String sDateValue
58863>>>        String sDriverID sServer
58863>>>        tColumnType RetvalType
58863>>>        tColumnType RetvalType
58863>>>        Integer iDbType iDriver
58863>>>        Handle hDatabase
58863>>>
58863>>>        Get psDriverID to sDriverID
58864>>>        Get piDbType   to iDbType
58865>>>        Get DriverIndex sDriverID to iDriver
58866>>>        Get psServer to sServer
58867>>>        Get SqlUtilDatabaseHandle sDriverID sServer to hDatabase
58868>>>        If (hDatabase = 0) Begin
58870>>>            Error DFERR_PROGRAM "Could not change the Default DateTime Value. Could not get a handle to the database."
58871>>>>
58871>>>            Procedure_Return
58872>>>        End
58872>>>>
58872>>>
58872>>>        Set_Attribute DF_DATABASE_DEFAULT_DEFAULT_DATETIME of iDriver hDatabase to sDateValue
58875>>>
58875>>>    End_Procedure
58876>>>
58876>>>    // Returns a struct array with the default column types for the SQL back-end and how they
58876>>>    // are mapped to the standard DataFlex data types.
58876>>>    // The DataFlex data types are: "ASCII", "BINARY", "DATE", "DATETIME", "NUMERIC" and "TEXT".
58876>>>    Function UtilDefaultSqlTypeMappings String sDriverID Integer iDbType Returns tColumnType[]
58878>>>        tColumnType[] ColumnTypeArray EmptyArray
58878>>>        tColumnType[] ColumnTypeArray EmptyArray
58880>>>        String sDataType
58880>>>        Integer iDataType iDriverID iCount
58880>>>        Boolean bSQLDriver
58880>>>
58880>>>        Move 0 to iCount
58881>>>        Get DriverIndex sDriverID to iDriverID
58882>>>        Get IsSQLDriver sDriverID to bSQLDriver
58883>>>        If (bSQLDriver = False) Begin
58885>>>            Function_Return EmptyArray
58886>>>        End
58886>>>>
58886>>>
58886>>>        // DF_ASCII
58886>>>        If (sDriverID = ODBC_DRV_ID) Begin
58888>>>            Get_Attribute DF_DRIVER_MAP_DFASCII_TO_ODBCTYPE of iDriverID to sDataType
58891>>>        End
58891>>>>
58891>>>        Else Begin
58892>>>            Get_Attribute DF_DRIVER_MAP_DFASCII_TO_SQLTYPE  of iDriverID to sDataType
58895>>>        End
58895>>>>
58895>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
58896>>>        Move DF_ASCII    to ColumnTypeArray[iCount].iDataFlexType
58897>>>        Move "ASCII"     to ColumnTypeArray[iCount].sDataFlexType
58898>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
58899>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
58900>>>        Increment iCount
58901>>>
58901>>>        // DF_BINARY
58901>>>        If (sDriverID = ODBC_DRV_ID) Begin
58903>>>            Get_Attribute DF_DRIVER_MAP_DFBINARY_TO_ODBCTYPE of iDriverID to sDataType
58906>>>        End
58906>>>>
58906>>>        Else Begin
58907>>>            Get_Attribute DF_DRIVER_MAP_DFBINARY_TO_SQLTYPE  of iDriverID to sDataType
58910>>>        End
58910>>>>
58910>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
58911>>>        Move DF_BINARY   to ColumnTypeArray[iCount].iDataFlexType
58912>>>        Move "Binary"    to ColumnTypeArray[iCount].sDataFlexType
58913>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
58914>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
58915>>>        Increment iCount
58916>>>
58916>>>        // DF_DATE
58916>>>        If (sDriverID = ODBC_DRV_ID) Begin
58918>>>            Get_Attribute DF_DRIVER_MAP_DFDATE_TO_ODBCTYPE of iDriverID to sDataType
58921>>>        End
58921>>>>
58921>>>        Else Begin
58922>>>            Get_Attribute DF_DRIVER_MAP_DFDATE_TO_SQLTYPE  of iDriverID to sDataType
58925>>>        End
58925>>>>
58925>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
58926>>>        Move DF_DATE     to ColumnTypeArray[iCount].iDataFlexType
58927>>>        Move "Date"      to ColumnTypeArray[iCount].sDataFlexType
58928>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
58929>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
58930>>>        Increment iCount
58931>>>
58931>>>        // DF_DATETIME
58931>>>        If (sDriverID = ODBC_DRV_ID) Begin
58933>>>            Get_Attribute DF_DRIVER_MAP_DFDATETIME_TO_ODBCTYPE of iDriverID to sDataType
58936>>>        End
58936>>>>
58936>>>        Else Begin
58937>>>            Get_Attribute DF_DRIVER_MAP_DFDATETIME_TO_SQLTYPE  of iDriverID to sDataType
58940>>>        End
58940>>>>
58940>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
58941>>>        Move DF_DATETIME to ColumnTypeArray[iCount].iDataFlexType
58942>>>        Move "DateTime"  to ColumnTypeArray[iCount].sDataFlexType
58943>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
58944>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
58945>>>        Increment iCount
58946>>>
58946>>>        // DF_NUMERIC
58946>>>        // *** Why is there no DF_DRIVER_MAP available for BCD/Numeric??? ***
58946>>>        // DF_BCD can in SQL be either of "SmallInt", "Int", or "Numeric", but
58946>>>        // we make them here all "Numeric"...
58946>>>        Case Begin
58946>>>            Case (sDriverID = MSSQLDRV_ID)
58948>>>                Move SQL_NUMERIC to iDataType
58949>>>                Move "numeric"   to sDataType
58950>>>                Case Break
58951>>>            Case (sDriverID = DB2_DRV_ID)
58954>>>                Move SQL_NUMERIC to iDataType
58955>>>                Move "NUMERIC"   to sDataType
58956>>>                Case Break
58957>>>            Case Else
58957>>>                Move DF_BCD      to iDataType
58958>>>                Move "Numeric"   to sDataType
58959>>>        Case End
58959>>>        Move DF_BCD      to ColumnTypeArray[iCount].iDataFlexType
58960>>>        Move "Numeric"   to ColumnTypeArray[iCount].sDataFlexType
58961>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
58962>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
58963>>>        Increment iCount
58964>>>
58964>>>        // DF_TEXT
58964>>>        If (sDriverID = ODBC_DRV_ID) Begin
58966>>>            Get_Attribute DF_DRIVER_MAP_DFTEXT_TO_ODBCTYPE of iDriverID to sDataType
58969>>>        End
58969>>>>
58969>>>        Else Begin
58970>>>            Get_Attribute DF_DRIVER_MAP_DFTEXT_TO_SQLTYPE  of iDriverID to sDataType
58973>>>        End
58973>>>>
58973>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
58974>>>        Move DF_TEXT     to ColumnTypeArray[iCount].iDataFlexType
58975>>>        Move "Text"      to ColumnTypeArray[iCount].sDataFlexType
58976>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
58977>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
58978>>>
58978>>>        Function_Return ColumnTypeArray
58979>>>    End_Function
58980>>>
58980>>>    Function UtilDFDataTypeToSqlTypeMapping String sDriverID Integer iDbType Integer iType Returns tColumnType
58982>>>        tColumnType[] ColumnTypeArray
58982>>>        tColumnType[] ColumnTypeArray
58983>>>        tColumnType   ColumnType
58983>>>        tColumnType   ColumnType
58983>>>        Integer iCount iSize
58983>>>
58983>>>        Get UtilDefaultSqlTypeMappings sDriverID iDbType iType to ColumnTypeArray
58984>>>        Move (SizeOfArray(ColumnTypeArray)) to iSize
58985>>>        Decrement iSize
58986>>>
58986>>>        for iCount from 0 to iSize
58992>>>>
58992>>>            If (iType = ColumnTypeArray[iCount].iDataFlexType) Begin
58994>>>                Move ColumnTypeArray[iCount].bCanEditSize   to ColumnType.bCanEditSize
58995>>>                Move ColumnTypeArray[iCount].iDataFlexType  to ColumnType.iDataFlexType
58996>>>                Move ColumnTypeArray[iCount].iSQLType       to ColumnType.iSQLType
58997>>>                Move ColumnTypeArray[iCount].sDataFlexType  to ColumnType.sDataFlexType
58998>>>                Move ColumnTypeArray[iCount].sPrecision     to ColumnType.sPrecision
58999>>>                Move ColumnTypeArray[iCount].sSQLType       to ColumnType.sSQLType
59000>>>                Move iSize to iCount
59001>>>            End
59001>>>>
59001>>>        Loop
59002>>>>
59002>>>
59002>>>        Function_Return ColumnType
59003>>>    End_Function
59004>>>
59004>>>    // Returns True if the passed hTable (filelist slot number) is an Alias table.
59004>>>    // An Alias file/table is a filelist number that share the same Physical filename
59004>>>    // but the Logical name is different.
59004>>>    // Note: If the table cannot be opened; the table is not considered to be an Alias.
59004>>>    Function UtilTableIsAlias Handle hTable Returns Boolean
59006>>>        String sRootName sRootNameCompare sLogicalName sLogicalNameCompare
59006>>>        Handle hInTable hMasterTable 
59006>>>        Boolean bIsAlias
59006>>>        
59006>>>        Move hTable to hInTable
59007>>>        Move False to bIsAlias
59008>>>        Move 0 to hMasterTable
59009>>>        
59009>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
59012>>>        // Remove any prefix with a driver name.
59012>>>        Get _TableNameOnly sRootName to sRootName     
59013>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
59016>>>        Get _TableNameOnly sLogicalName to sLogicalName     
59017>>>        
59017>>>        // If the table has the same root and logical name it can't be an alias,
59017>>>        // so we can safely return a "False".
59017>>>        If (Uppercase(sRootName) <> Uppercase(sLogicalName)) Begin
59019>>>            Function_Return True
59020>>>        End
59020>>>>
59020>>>        
59020>>>        Function_Return False
59021>>>        
59021>>>        // Now we need to find a master table with the same root name (sRootName above),
59021>>>        // as the passed hTable root name.
59021>>>        // A master table always has the same root and logical name (except for any driver name prefix or .int suffix).
59021>>>//        Move 0 to hTable
59021>>>//        Repeat
59021>>>//            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
59021>>>//            If (hTable > 0 and hTable <> 50) Begin
59021>>>//                Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootNameCompare
59021>>>//                Get _TableNameOnly sRootNameCompare to sRootNameCompare
59021>>>//                // If we found another table with the same root and logical name
59021>>>//                // we have found a master table.
59021>>>//                If (Uppercase(sRootName) = Uppercase(sRootNameCompare)) Begin
59021>>>//                    Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalNameCompare
59021>>>//                    Get _TableNameOnly sLogicalNameCompare to sLogicalNameCompare     
59021>>>//                    If (Uppercase(sRootNameCompare) = Uppercase(sLogicalNameCompare)) Begin
59021>>>//                        Move hTable to hMasterTable   
59021>>>//                        Move 0 to hTable // To end the loop.
59021>>>//                    End
59021>>>//                End
59021>>>//            End
59021>>>//        Until (hTable = 0)
59021>>>//        
59021>>>//        If (hMasterTable <> 0 and hMasterTable <> hInTable) Begin
59021>>>//            Move True to bIsAlias
59021>>>//        End
59021>>>//        
59021>>>//        Function_Return bIsAlias
59021>>>    End_Function
59022>>>
59022>>>    // To Open a table with any driver.
59022>>>    // Note: If the driver is <> DATAFLEX_ID  - login credentials are used; it is then assumed
59022>>>    //       that the proper login properties has been setup properly with the cSQLConnections object.
59022>>>    //
59022>>>    // If the open command fails the Err flag will be reset to false, at the end of the function!
59022>>>    // The found flag is still used to indicate if the open was successful or not. The function
59022>>>    // returns a True if successful (table could be opened).
59022>>>    //
59022>>>    // Using the "Open As" syntax with drivers means that we don't need to rely on .int file settings.
59022>>>    // This is good because with DFConnectionID's those credentials doesn't need to be available in
59022>>>    // the .int file (and probably aren't). As long as the login properties of this object have been
59022>>>    // set properly we can open the table.
59022>>>    //
59022>>>    // DAW Driver Syntax:
59022>>>    //  <CKId>:<Schema>#<Table>@<ConnectString>|<Filename>.int
59022>>>    //  Now the @<ConnectString> can be followed by a pipe character '|' followed by the name of the INT file.
59022>>>    //  Doing so, the driver will apply the information from the .INT file to the passed direct Open String.
59022>>>    //  Note that when an INT file has been passed, it will skip the keyword DRIVER_NAME, SERVER_NAME,
59022>>>    //  DATABASE_NAME and SCHEMA_NAME from the INT file because those are supposed to be supplied in the String already.
59022>>>    //  Open mode; iMode = DF_SHARE or DF_EXCLUSIVE.
59022>>>    //
59022>>>    // DAW Driver Sample:
59022>>>    //   Open "MSSQLDRV:dbo#MyFile@SERVER=(local)\SQLEXPRESS;Trusted_Connection=yes;DATABASE=OrderEntry|options|intfile=MyFile.int"
59022>>>    //
59022>>>    Function UtilTableOpen Integer hTable String sTableName Integer iMode Returns Boolean
59024>>>        String sTableNameOrg
59024>>>        Boolean bOpen bOK
59024>>>        tSQLConnection SQLConnection
59024>>>        tSQLConnection SQLConnection
59024>>>        
59024>>>        Move False to bOpen
59025>>>        Move sTableName to sTableNameOrg
59026>>>        If (hTable > 0) Begin
59028>>>            Send Ignore_Error of Error_Object_Id 20529
59029>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
59030>>>            Send Ignore_Error of Error_Object_Id CLIERR_CONNECTIONIDNOTFOUND
59031>>>            Send Ignore_Error of Error_Object_Id 10
59032>>>            Open hTable Mode iMode
59034>>>            Send Trap_Error of Error_Object_Id 20529
59035>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
59036>>>            Send Trap_Error of Error_Object_Id CLIERR_CONNECTIONIDNOTFOUND
59037>>>            Send Trap_Error of Error_Object_Id 10
59038>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
59041>>>            If (bOpen = True) Begin
59043>>>                Function_Return True
59044>>>            End
59044>>>>
59044>>>        End
59044>>>>
59044>>>
59044>>>        Get UtilTableOpenAsIntFile hTable sTableName iMode to bOK 
59045>>>        If (hTable > 0) Begin
59047>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
59050>>>        End
59050>>>>
59050>>>
59050>>>        Function_Return bOpen
59051>>>    End_Function
59052>>>
59052>>>    Function UtilTableOpenAsIntFile Integer hTable String sTableName Integer iMode Returns Boolean
59054>>>        String sDriverID sConnection sSchema sExt sTableNameShort sTableNameOrg
59054>>>        Boolean bOpen bOK
59054>>>        tSQLConnection SQLConnection
59054>>>        tSQLConnection SQLConnection
59054>>>
59054>>>        If (hTable < 1) Begin
59056>>>            Function_Return False
59057>>>        End
59057>>>>
59057>>>
59057>>>        Move sTableName to sTableNameOrg
59058>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
59059>>>        Move SQLConnection.sDriverID to sDriverID
59060>>>        Move SQLConnection.sConnectionString to sConnection
59061>>>        Move SQLConnection.sSchema to sSchema
59062>>>        If (sSchema = "") Begin
59064>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
59065>>>        End
59065>>>>
59065>>>
59065>>>        // We need to remove the ".int" part of the table name because
59065>>>        // the table name after the "#" in the connection syntax below wants the
59065>>>        // "bare" table name without any extension.
59065>>>        If (sDriverID <> DATAFLEX_ID) Begin
59067>>>            If (Lowercase(sTableName) contains ".int") Begin
59069>>>                Get ParseFileExtension sTableName to sExt
59070>>>                Move (Replace(("." + sExt), sTableName, "")) to sTableNameShort
59071>>>            End
59071>>>>
59071>>>            Else Begin
59072>>>                Move sTableName to sTableNameShort
59073>>>                Move (Append(sTableName, ".int")) to sTableName
59074>>>            End
59074>>>>
59074>>>            Move (sDriverID + ":" + sSchema + "#" + sTableNameShort + "@" + sConnection + "|options|intfile=" + sTableName) to sConnection
59075>>>            Move sConnection to sTableName
59076>>>        End
59076>>>>
59076>>>
59076>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
59077>>>        Send Ignore_Error of Error_Info_Object DFERR_FILE_ACCESS_VIOLATION
59078>>>        If (hTable = 0) Begin
59080>>>            Get NextFreeFilelistSlot to hTable
59081>>>        End
59081>>>>
59081>>>
59081>>>        Case Begin
59081>>>            Case (sDriverID = MSSQLDRV_ID)
59083>>>                // If not df_exclusive mode, we use the "Open As" syntax.
59083>>>                If (iMode <> DF_EXCLUSIVE) Begin
59085>>>                    Close hTable
59086>>>                    Open sTableName as hTable
59088>>>                End
59088>>>>
59088>>>                Else Begin
59089>>>                    Get OpenTableExclusive hTable to bOK
59090>>>                    If (bOK = False) Begin
59092>>>                        Function_Return False
59093>>>                    End
59093>>>>
59093>>>                End
59093>>>>
59093>>>                Case Break
59094>>>
59094>>>            Case (sDriverID = DB2_DRV_ID)
59097>>>                // If not df_exclusive mode, we use the "Open As" syntax.
59097>>>                If (iMode <> DF_EXCLUSIVE) Begin
59099>>>                    Close hTable
59100>>>                    Open sTableName as hTable
59102>>>                End
59102>>>>
59102>>>                Else Begin
59103>>>                    Get OpenTableExclusive hTable to bOK
59104>>>                    If (bOK = False) Begin
59106>>>                        Function_Return False
59107>>>                    End
59107>>>>
59107>>>                End
59107>>>>
59107>>>                Case Break
59108>>>
59108>>>            Case (sDriverID = ODBC_DRV_ID)
59111>>>                // If not df_exclusive mode, we use the "Open As" syntax.
59111>>>                If (iMode = DF_SHARE) Begin
59113>>>                    Close hTable
59114>>>                    Open sTableName as hTable
59116>>>                End
59116>>>>
59116>>>                Else Begin
59117>>>                    Get OpenTableExclusive hTable to bOK
59118>>>                    If (bOK = False) Begin
59120>>>                        Function_Return False
59121>>>                    End
59121>>>>
59121>>>                End
59121>>>>
59121>>>                Case Break
59122>>>
59122>>>            Case (sDriverID = DATAFLEX_ID)
59125>>>                If (sTableName <> "" and iMode <> DF_EXCLUSIVE) Begin
59127>>>                    Close hTable
59128>>>                    Open sTableName as hTable
59130>>>                End
59130>>>>
59130>>>                Else If (iMode = DF_EXCLUSIVE) Begin
59133>>>                    Get OpenTableExclusive hTable to bOK
59134>>>                    If (bOK = False) Begin
59136>>>                        Function_Return False
59137>>>                    End
59137>>>>
59137>>>                End
59137>>>>
59137>>>                Else Begin
59138>>>                    Open hTable
59140>>>                End
59140>>>>
59140>>>                Case Break
59141>>>
59141>>>            Case Else
59141>>>                Error DFERR_PROGRAM ("Invalid driver:" * sDriverID)
59142>>>>
59142>>>        Case End
59142>>>
59142>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
59143>>>        Send Trap_Error of Error_Info_Object DFERR_FILE_ACCESS_VIOLATION
59144>>>        If (LastErr = CLIERR_LOGIN_UNSUCCESSFUL) Begin
59146>>>            Move False to Found
59147>>>        End
59147>>>>
59147>>>        // If open failed, the Err is set to true,
59147>>>        // but we don't want that because it could end our loop.
59147>>>        Move False to Err
59148>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
59151>>>
59151>>>        Function_Return bOpen
59152>>>    End_Function
59153>>>
59153>>>    // Pass a table's logical name
59153>>>    // Returns True if the table exists in filelist.cfg.
59153>>>    Function UtilTableLogicalNameIsInUse String sCheckTable Returns Boolean
59155>>>        Handle hTable
59155>>>        Boolean bFound
59155>>>        String sCompareTable
59155>>>
59155>>>        Move False to bFound
59156>>>        Move 0 to hTable
59157>>>        Repeat
59157>>>>
59157>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
59160>>>            If (hTable > 0) Begin
59162>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sCompareTable
59165>>>                If (Uppercase(sCompareTable) = Uppercase(sCheckTable)) Begin
59167>>>                    Move True to bFound
59168>>>                End
59168>>>>
59168>>>            End
59168>>>>
59168>>>            If (bFound = True) ;                Break
59171>>>        Until (hTable = 0)
59173>>>
59173>>>        Function_Return (bFound = True)
59174>>>    End_Function
59175>>>
59175>>>    // Function will report the default driver "DATAFLEX" if table can't be opened
59175>>>    Function UtilDriverFromTableNumber Handle hTable Returns String
59177>>>        Boolean bOK bExists
59177>>>        String sDriverID
59177>>>
59177>>>        Get _UtilTableExists hTable to bExists
59178>>>        If (bExists = False) Begin
59180>>>            Function_Return DATAFLEX_ID
59181>>>        End
59181>>>>
59181>>>        Get OpenTableExclusive hTable to bOK
59182>>>        If (bOK = False) Begin
59184>>>            Function_Return DATAFLEX_ID
59185>>>        End
59185>>>>
59185>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
59188>>>        Function_Return sDriverID
59189>>>    End_Function
59190>>>
59190>>>    // Number of tables in Filelist.cfg. Returns integger
59190>>>    Function UtilFilelistNoOfTables Returns Integer
59192>>>        Handle hTable
59192>>>        Integer iRetval
59192>>>
59192>>>        Move 0 to hTable
59193>>>        Move 0 to iRetval
59194>>>
59194>>>        Repeat
59194>>>>
59194>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
59197>>>            If (hTable > 0) Begin
59199>>>                Increment iRetval
59200>>>            End
59200>>>>
59200>>>        Until (hTable = 0)
59202>>>
59202>>>        Function_Return iRetval
59203>>>    End_Function
59204>>>
59204>>>    // Checks if any of the tables in Filelist.cfg is an SQL driver and returns the first Driver ID.
59204>>>    Function UtilIsAnyFilelistEntrySQLtable Returns String
59206>>>        Handle hTable
59206>>>        String sRoot sDriverID
59206>>>        Boolean bIsSQLTable
59206>>>        Integer iPos
59206>>>
59206>>>        Move 0 to hTable
59207>>>        Move "" to sDriverID
59208>>>        Move False to bIsSQLTable
59209>>>
59209>>>        Repeat
59209>>>>
59209>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
59212>>>            If (hTable > 0) Begin
59214>>>                Get_Attribute DF_FILE_ROOT_NAME of hTable to sRoot
59217>>>                If (sRoot contains ":") Begin
59219>>>                    Move (Pos(":", sRoot)) to iPos
59220>>>                    Move (Left(sRoot, (iPos -1))) to sDriverID
59221>>>                End
59221>>>>
59221>>>                Get IsSQLDriver sDriverID to bIsSQLTable
59222>>>            End
59222>>>>
59222>>>
59222>>>        Until (hTable = 0 or bIsSQLTable = True)
59224>>>
59224>>>        Function_Return sDriverID
59225>>>    End_Function
59226>>>
59226>>>    Function UtilIsAllFilelistEntriesDataFlexTables Returns Boolean
59228>>>        String sRootName
59228>>>        Boolean bIsSQL
59228>>>        Handle hTable
59228>>>
59228>>>        Move False to bIsSQL
59229>>>        Move 0 to hTable
59230>>>        Repeat
59230>>>>
59230>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
59233>>>            If (hTable > 0) Begin
59235>>>                Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
59238>>>                Get _UtilTableIsSqlByRootName sRootName to bIsSQL
59239>>>                If (bIsSQL = True) Begin
59241>>>                    Move 0 to hTable
59242>>>                End
59242>>>>
59242>>>            End
59242>>>>
59242>>>        Until (hTable = 0)
59244>>>
59244>>>        Function_Return (bIsSQL = False)
59245>>>    End_Function
59246>>>
59246>>>    // * Dummy function for the Studio's Code Explorer *
59246>>>    Function UTIL_ENUMERATION_FUNCTIONS Returns Boolean
59248>>>        Function_Return False
59249>>>    End_Function
59250>>>
59250>>>    Function UtilEnumerateOverlapFields Integer hTable Integer iField Returns String[]
59252>>>        String  sRetval
59252>>>        String[] sOverlapFieldsArray
59253>>>        Integer iType iColumn iColumns
59253>>>        Boolean bOpen bOverlap
59253>>>
59253>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
59256>>>        If (bOpen = False) Begin
59258>>>            Open hTable
59260>>>        End
59260>>>>
59260>>>
59260>>>        Move "" to sRetval
59261>>>
59261>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iColumns
59264>>>
59264>>>        for iColumn from 0 to iColumns
59270>>>>
59270>>>            Get_Attribute DF_FIELD_TYPE of hTable iColumn to iType
59273>>>            If (iField <> iColumn and iType <> DF_OVERLAP) Begin
59275>>>                Get_Attribute DF_FIELD_OVERLAP of hTable iField iColumn to bOverlap
59278>>>                If (bOverlap) Begin
59280>>>                    If (sRetval <> "") Begin
59282>>>                        Append sRetval ","
59283>>>                    End
59283>>>>
59283>>>                    Append sRetval iColumn
59284>>>                End
59284>>>>
59284>>>            End
59284>>>>
59284>>>        Loop
59285>>>>
59285>>>
59285>>>        If (bOpen = False) Begin
59287>>>            Close hTable
59288>>>        End
59288>>>>
59288>>>
59288>>>        Get StrSplitToArray sRetval "," to sOverlapFieldsArray
59289>>>
59289>>>        Function_Return sOverlapFieldsArray
59290>>>    End_Function
59291>>>
59291>>>    Function UtilEnumerateODBCDrivers Returns String
59293>>>        Handle hoRegistry hoODBCDriverNames
59293>>>        Boolean bExists bKeyOpened
59293>>>        String sKey
59293>>>        String[] sDrivers
59294>>>        Integer iDriverNames iDriverName
59294>>>
59294>>>        Get Create (RefClass (cRegistry)) to hoRegistry
59295>>>        Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
59296>>>        Set pfAccessRights of hoRegistry to Key_Read
59297>>>        Move "SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers" to sKey
59298>>>        Get KeyExists of hoRegistry sKey to bExists
59299>>>        If (bExists) Begin
59301>>>            Get OpenKey of hoRegistry sKey to bKeyOpened
59302>>>            If (bKeyOpened) Begin
59304>>>                Get Create (RefClass (Array)) to hoODBCDriverNames
59305>>>                Get GetValues of hoRegistry hoODBCDriverNames to iDriverNames
59306>>>                If (iDriverNames > 0) Begin
59308>>>                    Move (ResizeArray (sDrivers, iDriverNames)) to sDrivers
59309>>>                    Decrement iDriverNames
59310>>>                    for iDriverName from 0 to iDriverNames
59316>>>>
59316>>>                        Get Value of hoODBCDriverNames iDriverName to sDrivers[iDriverName]
59317>>>                    Loop
59318>>>>
59318>>>                End
59318>>>>
59318>>>                Send CloseKey of hoRegistry
59319>>>            End
59319>>>>
59319>>>        End
59319>>>>
59319>>>        Send Destroy of hoRegistry
59320>>>
59320>>>        Function_Return sDrivers
59321>>>    End_Function
59322>>>
59322>>>    Procedure IncreaseSortBufferSize
59324>>>        String sNull
59324>>>        Integer iSortBufferSize
59324>>>        Boolean bBufferSet
59324>>>
59324>>>        Move "" to sNull
59325>>>        Move (1024 * 128) to iSortBufferSize
59326>>>        Call_Driver 0 DATAFLEX_ID Function FLEX_SET_MAX_SORT_BUFFER Callback ghoDbUpdateHandler Passing sNull sNull iSortBufferSize Result bBufferSet
59331>>>
59331>>>    End_Procedure
59332>>>
59332>>>    Procedure SetAllIndexesToBatch Handle hTable Boolean bSetToBatch
59334>>>        Integer iLastIndex iIndex iNumSegments
59334>>>        Boolean bOK
59334>>>        String sDriverID
59334>>>
59334>>>        If (hTable > 0) Begin
59336>>>            Get UtilDriverFromTableNumber hTable to sDriverID
59337>>>            Close hTable
59338>>>            Get OpenTableExclusive hTable to bOK
59339>>>            If (bOK = False) Begin
59341>>>                Procedure_Return
59342>>>            End
59342>>>>
59342>>>            Get_Attribute DF_FILE_LAST_INDEX_NUMBER of hTable to iLastIndex
59345>>>            Structure_Start hTable sDriverID
59346>>>                for iIndex from 1 to iLastIndex
59352>>>>
59352>>>                    Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
59355>>>                    If (iNumSegments > 0) Begin
59357>>>                        If (bSetToBatch = True) Begin
59359>>>                            Set_Attribute DF_INDEX_TYPE of hTable iIndex to DF_INDEX_TYPE_BATCH
59362>>>                        End
59362>>>>
59362>>>                        Else Begin
59363>>>                            Set_Attribute DF_INDEX_TYPE of hTable iIndex to DF_INDEX_TYPE_ONLINE
59366>>>                        End
59366>>>>
59366>>>                    End
59366>>>>
59366>>>                Loop
59367>>>>
59367>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
59369>>>        End
59369>>>>
59369>>>    End_Procedure
59370>>>
59370>>>    Function NextFreeFilelistSlot Returns Handle
59372>>>        Handle hTable
59372>>>
59372>>>        Move 0 to hTable
59373>>>        Get_Attribute DF_FILE_NEXT_EMPTY of hTable to hTable
59376>>>
59376>>>        Function_Return hTable
59377>>>    End_Function
59378>>>
59378>>>    // For debugging purposes. To print Sql statements as they are build...
59378>>>    Procedure DebugPrint String sStmt String sFileName
59380>>>        Integer iCh
59380>>>        Get Seq_Append_Output_Channel sFileName to iCh
59381>>>            Write channel iCh sStmt
59383>>>        Send Seq_Close_Channel iCh
59384>>>    End_Procedure
59385>>>
59385>>>    // Returns the integer number for the passed Driver ID that is
59385>>>    // needed by some database API calls.
59385>>>    Function DriverIndex String sDriverID Returns Integer
59387>>>        String  sCurrentDriver
59387>>>        Integer iNumberOfDrivers iDriver iCount
59387>>>
59387>>>        Move 0 to iDriver
59388>>>
59388>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
59391>>>        for iCount from 1 to iNumberOfDrivers
59397>>>>
59397>>>
59397>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
59400>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriverID) ) Begin
59402>>>                Move iCount to iDriver
59403>>>            End
59403>>>>
59403>>>        Loop
59404>>>>
59404>>>
59404>>>        // In case it was not found, it wasn't loaded so we do that now.
59404>>>        If (iDriver = 0) Begin
59406>>>            Move False to Err
59407>>>            Load_Driver sDriverID
59408>>>            If (Err = False) Begin
59410>>>                Get_Attribute DF_NUMBER_DRIVERS to iDriver
59413>>>            End
59413>>>>
59413>>>        End
59413>>>>
59413>>>
59413>>>        Function_Return iDriver
59414>>>    End_Function
59415>>>
59415>>>
59415>>>    Function SqlServerClientVersionName for cMSSQLHandler Integer iClientVersion  Returns String
59417>>>        String  sSqlServerClientVersionName
59417>>>        
59417>>>        Case Begin
59417>>>            Case (iClientVersion = SQLSERVER2019CLIENT)
59419>>>                Move SQLSERVER2019DRVRSTR to sSqlServerClientVersionName
59420>>>                Case Break
59421>>>
59421>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
59424>>>                Move SQLSERVER2017CLIENTNAME to sSqlServerClientVersionName
59425>>>                Case Break
59426>>>                
59426>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
59429>>>                Move SQLSERVER2016CLIENTNAME to sSqlServerClientVersionName
59430>>>                Case Break
59431>>>            
59431>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
59434>>>                Move SQLSERVER2014CLIENTNAME to sSqlServerClientVersionName
59435>>>                Case Break
59436>>>            
59436>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
59439>>>                Move SQLSERVER2012CLIENTNAME to sSqlServerClientVersionName
59440>>>                Case Break
59441>>>            
59441>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
59444>>>                Move SQLSERVER2008CLIENTNAME to sSqlServerClientVersionName
59445>>>                Case Break
59446>>>            
59446>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
59449>>>                Move SQLSERVER2005CLIENTNAME to sSqlServerClientVersionName
59450>>>                Case Break
59451>>>            
59451>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
59454>>>                Move SQLSERVER2000CLIENTNAME to sSqlServerClientVersionName
59455>>>                Case Break
59456>>>            
59456>>>            Case Else
59456>>>                Move SQLSERVERUNKNOWNCLIENTNAME to sSqlServerClientVersionName
59457>>>        Case End
59457>>>        
59457>>>        Function_Return sSqlServerClientVersionName
59458>>>    End_Function
59459>>>
59459>>>    Function SqlServerClientDriverName for cMSSQLHandler Integer iClientVersion  Returns String
59461>>>        String  sSqlServerClientDriverName
59461>>>        
59461>>>        Case Begin
59461>>>            Case (iClientVersion = SQLSERVER2019CLIENT)
59463>>>                Move SQLSERVER2019DRVRSTR to sSqlServerClientDriverName
59464>>>                Case Break
59465>>>
59465>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
59468>>>                Move SQLSERVER2017DRVRSTR to sSqlServerClientDriverName
59469>>>                Case Break
59470>>>                
59470>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
59473>>>                Move SQLSERVER2016DRVRSTR to sSqlServerClientDriverName
59474>>>                Case Break
59475>>>            
59475>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
59478>>>                Move SQLSERVER2014DRVRSTR to sSqlServerClientDriverName
59479>>>                Case Break
59480>>>            
59480>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
59483>>>                Move SQLSERVER2012DRVRSTR to sSqlServerClientDriverName
59484>>>                Case Break
59485>>>            
59485>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
59488>>>                Move SQLSERVER2008DRVRSTR to sSqlServerClientDriverName
59489>>>                Case Break
59490>>>            
59490>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
59493>>>                Move SQLSERVER2005DRVRSTR to sSqlServerClientDriverName
59494>>>                Case Break
59495>>>            
59495>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
59498>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
59499>>>                Case Break
59500>>>            
59500>>>            Case Else
59500>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
59501>>>        Case End
59501>>>        
59501>>>        Function_Return sSqlServerClientDriverName
59502>>>    End_Function
59503>>>    
59503>>>    Function MinMSSQLDRV_And_ClientVersion String sMSSQLDRVVersion Integer iClientVersion Boolean bShowErrorDialog Boolean bExitProgram Returns String
59505>>>        String sDriverID sVersion sClient sClientLowest sRetval
59505>>>        Integer iNumberOfDrivers iDriver iClient
59505>>>        Handle hoCLIHandler hoMSSQLHandler   
59505>>>        Boolean bOK
59505>>>        
59505>>>        Move "" to sRetval
59506>>>        Get Create (RefClass(cCLIHandler)) to hoCLIHandler
59507>>>        Get Create (RefClass(cMSSQLHandler)) to hoMSSQLHandler
59508>>>        Load_Driver MSSQLDRV_ID
59509>>>
59509>>>        // Loop through all loaded drivers.
59509>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
59512>>>        For iDriver from 1 to iNumberOfDrivers
59518>>>>
59518>>>            Get_Attribute DF_DRIVER_NAME of iDriver to sDriverID
59521>>>            If (sDriverID = MSSQLDRV_ID) Begin
59523>>>                Set psDriverID of hoCLIHandler to sDriverID
59524>>>                Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClient   
59527>>>                Get SqlServerClientVersionName of hoMSSQLHandler iClientVersion to sClientLowest 
59528>>>                Get SqlServerClientVersionName of hoMSSQLHandler iClient to sClient 
59529>>>                Get CKRevision of hoCLIHandler to sVersion
59530>>>                Move (SFormat (String(C_$DatabaseDriver), (sDriverID * "-" * (String(C_$Version) + ": " + String(sVersion))))) to sRetval
59531>>>                If (sClient <> "" and sRetval <> "") Begin
59533>>>                    Move (String(sRetval) + "\n" + String(C_$SQL_Client_Text) + "\n" + Trim(sClient)) to sRetval
59534>>>                End                                
59534>>>>
59534>>>                Else Begin
59535>>>                    Move (String(C_$SQL_Client_Text) + "\n" + Trim(sClient) * "(" + String(iClient) + ")") to sRetval
59536>>>                End
59536>>>>
59536>>>            End
59536>>>>
59536>>>        Loop
59537>>>>
59537>>>        Send Destroy of hoCLIHandler  
59538>>>        Send Destroy of hoMSSQLHandler  
59539>>>        If (bShowErrorDialog = True) Begin
59541>>>            Get IsFirstStringGreaterThanSecond sVersion sMSSQLDRVVersion to bOK
59542>>>            If (bOK = False or (iClient < iClientVersion)) Begin
59544>>>                Move (MSSQLDRV_ID + ".dll" * String(C_$SQL_Driver_Version_Min_Text) *  String(sMSSQLDRVVersion) + String("\n") + String(C_$SQL_Client_Version_Min_Text) + "\n" + String(sClientLowest) + String("\n\n") + String(C_$SQL_Versions_Are_Text) + String("\n") + String(sRetval)) to sRetval
59545>>>                If (bExitProgram = True) Begin
59547>>>                    Move (String(sRetval) + String("\n\n") + String(C_$PleaseAdjustTxt) * String(C_$ProgramWillExit_Text)) to sRetval
59548>>>                End
59548>>>>
59548>>>                Send Stop_Box sRetval  
59549>>>                If (bExitProgram = True) Begin
59551>>>                    Send Exit_Application
59552>>>                End
59552>>>>
59552>>>            End
59552>>>>
59552>>>        End
59552>>>>
59552>>>        
59552>>>        Function_Return sRetval
59553>>>    End_Function  
59554>>>    
59554>>>    // Returns True if first "." separated string is greater than the second.
59554>>>    // It checks from left to right, one part of the string at a time.
59554>>>    // E.g. if sVersion="20.1.31.10 and sSQLVersion="6.3.0.13" the function would return TRUE.
59554>>>    Function IsFirstStringGreaterThanSecond Global String sVersion String sSQLVersion Returns Boolean
59556>>>        String[] asVersion asSQLVersion          
59558>>>        Integer iSize iCount iVersion iSQLVersion
59558>>>        
59558>>>        Move (StrSplitToArray(sVersion, "."))    to asVersion
59559>>>        Move (StrSplitToArray(sSQLVersion, ".")) to asSQLVersion
59560>>>        Move (SizeOfArray(asVersion)) to iSize
59561>>>        // Make sure the two arrays are of the same size:
59561>>>        If (SizeOfArray(asSQLVersion) < iSize) Begin
59563>>>            Move (ResizeArray(asSQLVersion, iSize, 0)) to asSQLVersion
59564>>>        End
59564>>>>
59564>>>        Decrement iSize
59565>>>        for iCount from 0 to iSize
59571>>>>
59571>>>            Move asVersion[iCount]    to iVersion
59572>>>            Move asSQLVersion[iCount] to iSQLVersion
59573>>>            CompilerWarnings Off
59573>>>            If (iVersion > iSQLVersion) Break
59576>>>            CompilerWarnings On
59576>>>        Loop
59577>>>>
59577>>>        
59577>>>        Function_Return (iVersion >= iSQLVersion)
59578>>>    End_Function
59579>>>
59579>>>    // Returns TRUE if table is opened exclusive, otherwise FALSE
59579>>>    // Note: If run from the Studio, CodeMast & CodeType _is_ open by the Studio,
59579>>>    //       so in that case we "cheat" and report those tables were opened OK.
59579>>>    Function OpenTableExclusive Handle hTable Returns Boolean
59581>>>        Integer iMode iErrorObject
59581>>>        Boolean bOpened bExitIfDebuggerActive
59581>>>        String sTableName 
59581>>>        Handle hoCurrentErrorHandler
59581>>>        
59581>>>        Move False to bExitIfDebuggerActive
59582>>>        If (ghoDbUpdateHandler <> 0) Begin
59584>>>            Get pbExitIfDebuggerActive of ghoDbUpdateHandler to bExitIfDebuggerActive
59585>>>        End
59585>>>>
59585>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
59586>>>        // Can't open a table properly if run through the Debugger/Studio,
59586>>>        // so we generate an error here:
59586>>>        If (IsDebuggerPresent() and bExitIfDebuggerActive = True) Begin
59588>>>            Move Error_Object_Id to hoCurrentErrorHandler
59589>>>            Get piOrgErrorHandlerID to iErrorObject
59590>>>            If (iErrorObject <> 0) Begin
59592>>>                Move iErrorObject to Error_Object_Id
59593>>>            End
59593>>>>
59593>>>            Error DFERR_OPERATOR "It is not possible to make structural changes to the database when running through the Debugger/Studio! You need to run this program from outside of the Studio."
59594>>>>
59594>>>            Move hoCurrentErrorHandler to Error_Object_Id
59595>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
59596>>>            Function_Return False
59597>>>        End
59597>>>>
59597>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
59600>>>        If (bOpened) Begin
59602>>>            Get_Attribute DF_FILE_OPEN_MODE of hTable to iMode
59605>>>            If (iMode = DF_EXCLUSIVE) Begin
59607>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
59608>>>                Function_Return True
59609>>>            End
59609>>>>
59609>>>            Close hTable
59610>>>        End
59610>>>>
59610>>>        Else Begin
59611>>>            Open hTable
59613>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpened
59616>>>            If (bOpened and IsDebuggerPresent()) Begin
59618>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
59621>>>                If (Uppercase(sTableName) = "CODEMAST" or Uppercase(sTableName) = "CODETYPE") Begin
59623>>>                    Set Error_Report_Mode to DUF_ERROR_REPORT
59624>>>                    Function_Return True
59625>>>                End
59625>>>>
59625>>>            End
59625>>>>
59625>>>
59625>>>        End
59625>>>>
59625>>>
59625>>>        Close hTable
59626>>>        Open hTable Mode DF_EXCLUSIVE
59628>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
59631>>>
59631>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
59632>>>        Function_Return bOpened
59633>>>    End_Function
59634>>>
59634>>>    Function AutoConnectionIDLogin Returns Boolean
59636>>>        String sConnectionID sConnectionString sDriverID
59636>>>        Boolean bExists bOK bSQLDriver
59636>>>        Handle hoCLI hoDriver
59636>>>        Integer iRetval
59636>>>        tSQLConnection SQLConnection
59636>>>        tSQLConnection SQLConnection
59636>>>
59636>>>        Get psDriverID to sDriverID
59637>>>        Get IsSQLDriver sDriverID to bSQLDriver
59638>>>        If (bSQLDriver = False) Begin
59640>>>            Function_Return True
59641>>>        End
59641>>>>
59641>>>
59641>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
59642>>>        Move SQLConnection.sDriverID                  to sDriverID
59643>>>        Move SQLConnection.sConnectionString          to sConnectionString
59644>>>        Move SQLConnection.sConnectionID to sConnectionID
59645>>>
59645>>>        Get IsConnectionID sConnectionID sDriverID to bExists
59646>>>        If (bExists = False) Begin
59648>>>            // We always start by deleting the current connection - if any - because the
59648>>>            // login details my have changed.
59648>>>            Get phoCLIHandler to hoCLI
59649>>>            Set psDriverID    of hoCLI to sDriverID
59650>>>            Get DeleteConnectionID of hoCLI sConnectionID -1 to iRetval
59651>>>            Get AutoSetConnectionID sConnectionID to bOk
59652>>>            If (bOk = False) Begin
59654>>>                Error DFERR_PROGRAM ("The Connection ID:" * sConnectionID * "could not be created and therefor the table can't be changed.")
59655>>>>
59655>>>                Function_Return False
59656>>>            End
59656>>>>
59656>>>            Move bOK to bExists
59657>>>        End
59657>>>>
59657>>>
59657>>>        Get Create (RefClass(cDbUpdateDatabaseDriver)) to hoDriver
59658>>>        Set Name of hoDriver to "oDbUpdateDatabaseDriver"
59659>>>        Set psDriverID of hoDriver to SQLConnection.sDriverID
59660>>>        Get DbLogin of hoDriver sConnectionString SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to bOK
59661>>>        Send Destroy of hoDriver
59662>>>
59662>>>        Function_Return (bExists = True)
59663>>>    End_Function
59664>>>
59664>>>    // Scans to see if all tables can be opened exclusivly. I.e. that nobody else is running the application.
59664>>>    // Returns: False if nobody else is running
59664>>>    //          True if at least one table is open by another process (e.g. another user is running the application)
59664>>>    // N.B! Only works for Embedded DataFlex Tables! It will _not_ work for Sql tables because; these
59664>>>    //      tables are not locked as DataFlex tables are.
59664>>>    Function IsDatabaseInUse Returns Boolean
59666>>>        Handle  hTable
59666>>>        String  sRootName sDatabase sSchema sDriverID
59666>>>        Boolean bOpen bErr bAlias bOK bIsSQLTable bFlexErrs bExists
59666>>>        Integer iCount iTables
59666>>>        String[] asTablesArray asTablesArrayEmpty
59668>>>        
59668>>>        Move 0 to iTables
59669>>>        Set Action_Text of ghoStatusPanel to "Database in use check..."
59670>>>        Get AutoConnectionIDLogin to bOK
59671>>>        Get UtilFilelistNoOfTables to iTables
59672>>>        Set piPosition   of ghoProgressBar to 0
59673>>>        Set piAdvanceBy  of ghoProgressBar to 1
59674>>>        Set piMaximum    of ghoProgressBar to iTables
59675>>>        Close DF_ALL
59676>>>        Move 0 to hTable
59677>>>        Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
59680>>>        Move False to bErr
59681>>>        Send Ignore_Error of Error_Object_Id DFERR_FILE_ACCESS_VIOLATION
59682>>>
59682>>>        Get psDriverID to sDriverID
59683>>>        Get psDatabase to sDatabase
59684>>>        Get psSchema   to sSchema
59685>>>        Get _SqlUtilEnumerateTables sDriverID sDatabase sSchema to asTablesArray
59686>>>        Set pasSQLDataTables to asTablesArray
59687>>>        Repeat
59687>>>>
59687>>>            Set piPosition of ghoProgressBar to iCount
59688>>>            Increment iCount
59689>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
59692>>>            Move (Uppercase(sRootName) = "FLEXERRS")  to bFlexErrs
59693>>>
59693>>>            // This test is only applicable for DataFlex embedded tables; so skip test if driver based table.
59693>>>            Get _UtilTableIsSqlByRootName sRootName to bIsSQLTable
59694>>>            Move False to bOpen
59695>>>            // _UtilTableExists_Ex is a variant of "_UtilTableExists", but it needs that the pasSQLDataTables
59695>>>            // property has been set/updated before usage! This makes the loop much faster.
59695>>>            Get _UtilTableExists_Ex hTable to bExists
59696>>>            // Don't bother about CodeType (253, CodeMast (254) or) FlexErrs (Normally table 50)
59696>>>            If (bIsSQLTable = False and bExists = True and hTable <> 0 and hTable <> 253 and hTable <> 254 and bFlexErrs = False) Begin
59698>>>                Set Error_Report_Mode to DUF_ERROR_NO_REPORT
59699>>>                Open hTable
59701>>>                Get_Attribute DF_FILE_OPENED of hTable to bOpen
59704>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
59705>>>                If (bOpen = True) Begin
59707>>>                    // We cannot open an Alias file exclusive as it will generate an error (4177 - "File in use")
59707>>>                    Get UtilTableIsAlias hTable to bAlias
59708>>>                    If (bAlias = False) Begin
59710>>>                        Close hTable
59711>>>                        Get OpenTableExclusive hTable to bOpen
59712>>>                        If (bOpen = False) Begin
59714>>>                            Move True to bErr
59715>>>                        End
59715>>>>
59715>>>                    End
59715>>>>
59715>>>                End
59715>>>>
59715>>>            End
59715>>>>
59715>>>            Close hTable
59716>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
59719>>>            If (bErr = True ) ;                Break
59722>>>        Until (not(hTable))
59724>>>
59724>>>        // Reset the temporary used data tables property to blank:
59724>>>        Set pasSQLDataTables to asTablesArrayEmpty
59725>>>        Set Action_Text of ghoStatusPanel to ""
59726>>>        Send Trap_Error of Error_Object_Id DFERR_FILE_ACCESS_VIOLATION
59727>>>        Move False to Err
59728>>>
59728>>>        Function_Return bErr
59729>>>    End_Function
59730>>>
59730>>>End_Class
59731>Use cRDCHeaderGroup.pkg
Including file: cRDCHeaderGroup.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\RDCToolsLib\AppSrc\cRDCHeaderGroup.pkg)
59731>>>//****************************************************************************
59731>>>// $Module type: Package
59731>>>// $Module name: cRDCHeaderGroup.pkg
59731>>>//
59731>>>// $Author     : Nils Svedmyr, RDC Tools International.
59731>>>// Copyright (c) 2017 RDC Tools International
59731>>>// E-mail      : support@rdctools.com
59731>>>// Web-site    : http://www.rdctools.com
59731>>>//
59731>>>// Created     : 2017-01-05 @ 19:04 (Military date format - Year-Month-Day)
59731>>>//
59731>>>// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
59731>>>// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
59731>>>// This is free software; you can redistribute it and/or modify it under the terms of the
59731>>>// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
59731>>>// in the help folder for more details.
59731>>>//
59731>>>//****************************************************************************
59731>>>Use Windows.pkg
59731>>>Use cCommandLinkButton.pkg
Including file: cCommandLinkButton.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cCommandLinkButton.pkg)
59731>>>>>// This requires version 6 of common controls (vista or windows server 2008). If used with
59731>>>>>// older versions you will just get a regular great big button.
59731>>>>>
59731>>>>>Use Windows.pkg
59731>>>>>Use CharTranslate.pkg
59731>>>>>
59731>>>>>Class cCommandLinkButton is a Button
59732>>>>>    
59732>>>>>    Procedure Construct_Object
59734>>>>>        Forward Send Construct_Object
59736>>>>>        Property String psPrivateNote
59737>>>>>    End_Procedure
59738>>>>>    
59738>>>>>    Procedure Set psNote String sNote
59740>>>>>        Boolean bSupported
59740>>>>>        Set psPrivateNote to sNote
59741>>>>>        Get IsExControlSupported to bSupported
59742>>>>>        If bSupported Begin
59744>>>>>            Send SetWinNote
59745>>>>>        End
59745>>>>>>
59745>>>>>    End_Procedure
59746>>>>>    
59746>>>>>    Procedure SetWinNote
59748>>>>>        WString wNote
59748>>>>>        Handle hWnd
59748>>>>>        Integer i
59748>>>>>        Pointer pVar
59748>>>>>        Get Form_Window_Handle 0 to hWnd
59749>>>>>        If hWnd Begin
59751>>>>>            Get psNote to wNote
59752>>>>>            Move (SendMessage(hwnd, BCM_SETNOTE, 0, AddressOf(wNote))) to i
59753>>>>>        End
59753>>>>>>
59753>>>>>    End_Procedure
59754>>>>>    
59754>>>>>    
59754>>>>>    Function psNote Returns String
59756>>>>>        Function_Return (psPrivateNote(Self))
59757>>>>>    End_Function
59758>>>>>    
59758>>>>>    
59758>>>>>    Procedure Page Integer iState
59760>>>>>        Integer i hWnd
59760>>>>>        Boolean bSupported
59760>>>>>        Get IsExControlSupported to bSupported
59761>>>>>        If (iState=1 and bSupported) Begin
59763>>>>>            Get form_style i to i
59764>>>>>            Set Form_Style 0 to (i ior (BS_COMMANDLINK + BS_FLAT))
59765>>>>>            Forward Send Page iState
59767>>>>>            Send SetWinNote
59768>>>>>        End
59768>>>>>>
59768>>>>>        Else Begin
59769>>>>>            Forward Send Page iState
59771>>>>>        End
59771>>>>>>
59771>>>>>    End_Procedure
59772>>>>>    
59772>>>>>End_Class
59773>>>
59773>>>Define clGreenGrey      for (RGB(64, 84, 93))
59773>>>Define clGreenGreyLight for (RGB(7, 117, 104))
59773>>>
59773>>>Class cRDCHeaderGroupImage is a cCommandLinkButton
59774>>>    Procedure Construct_Object
59776>>>        Forward Send Construct_Object
59778>>>
59778>>>        Set Size to 18 19
59779>>>        Set Focus_Mode to NonFocusable
59780>>>        Set peImageAlign to Button_ImageList_Align_Top
59781>>>        Set pbAutoResizeIcons to True
59782>>>    End_Procedure
59783>>>
59783>>>    Procedure OnClick
59785>>>        Broadcast Send Prompt of (Parent(Self))
59787>>>    End_Procedure
59788>>>
59788>>>    Procedure Set Bitmap String sBitmapName
59790>>>        Forward Set psImage to sBitmapName
59792>>>    End_Procedure
59793>>>
59793>>>    Procedure End_Construct_Object
59795>>>        Set pbShield to False
59796>>>        Forward Send End_Construct_Object
59798>>>    End_Procedure
59799>>>
59799>>>End_Class
59800>>>
59800>>>// Intermediate class - don't use.
59800>>>Class _cRDCHeaderGroup is a Container3d
59801>>>
59801>>>    Procedure Construct_Object
59803>>>        Forward Send Construct_Object
59805>>>
59805>>>        Property String private.psImage
59806>>>        Property String private.psLabel
59807>>>
59807>>>    End_Procedure
59808>>>
59808>>>    Procedure Set psImage String sImage
59810>>>        Set private.psImage to sImage
59811>>>    End_Procedure
59812>>>
59812>>>    Function psImage Returns String
59814>>>        Function_Return (private.psImage(Self))
59815>>>    End_Function
59816>>>
59816>>>    Procedure Set psLabel String sLabel
59818>>>        Set private.psLabel to sLabel
59819>>>    End_Procedure
59820>>>
59820>>>    Function psLabel Returns String
59822>>>        Function_Return (private.psLabel(Self))
59823>>>    End_Function
59824>>>
59824>>>    // Don't display but allow to use old "Label" syntax to set the value of the oInfo_tb object (header text)
59824>>>    Procedure Set Label String sLabel
59826>>>        Set psLabel to sLabel
59827>>>    End_Procedure
59828>>>
59828>>>    Function Label Returns String
59830>>>        Function_Return (private.psLabel(Self))
59831>>>    End_Function
59832>>>
59832>>>End_Class
59833>>>
59833>>>Register_Procedure NavigatePrevious
59833>>>Register_Procedure NavigateNext
59833>>>
59833>>>Class cRDCHeaderGroup is a _cRDCHeaderGroup
59834>>>
59834>>>    Procedure Construct_Object
59836>>>        Forward Send Construct_Object
59838>>>
59838>>>        Set peAnchors to anTopLeftRight
59839>>>        Set pbAcceptDropFiles to True
59840>>>        Set Border_Style to Border_Normal
59841>>>
59841>>>        Property Integer private.piColorOrg
59842>>>        Property Boolean private.pbIsHeaderGroup True // Don't touch!
59843>>>        Property String private.psToolTip ""
59844>>>
59844>>>        Property Integer piImageColOffset 4
59845>>>        Property Integer piImageRowOffset -1
59846>>>        Property String psNote ""
59847>>>        Property Boolean pbLargeImageSize True
59848>>>        Property Integer private.piLargeImageSize 24
59849>>>        Property Integer private.piSmallImageSize 16
59850>>>        Property Boolean pbUseHotspotColor False
59851>>>        Property Integer piHeaderHotspotColor clAqua
59852>>>        Property String private.psLabel ""
59853>>>        Property Integer piLabelColor clGreenGrey
59854>>>        Property Boolean pbLabelFontItalics False
59855>>>        Property Integer piLabelLargeFontHeight 12
59856>>>        Property Integer piLabelSmallFontHeight 10
59857>>>        Property Boolean pbUseLargeFontHeight False
59858>>>
59858>>>        Property Integer piLabelFontPointWeight fw_Bold
59859>>>        Property Integer piLabelColOffset 28
59860>>>        Property Integer piLabelRowOffset 4
59861>>>        Property Boolean pbCreateTooltipItem True
59862>>>
59862>>>        Set pbAcceptDropFiles to True
59863>>>
59863>>>        Send Define_ToolTip_Support_Mixin
59864>>>
59864>>>        // For the Studio to render the header image
59864>>>        Set Bitmap to "Default32x32.bmp"
59865>>>        // This doesn't work... I wonder if there's a way to "trick" the Studio
59865>>>        // to render some text in the header when in design mode?
59865>>>        Set Label to "HEADER TEXT"
59866>>>
59866>>>        On_Key kLeftArrow  Send NavigatePrevious
59867>>>        On_Key kUpArrow    Send NavigatePrevious
59868>>>        On_Key kRightArrow Send NavigateNext
59869>>>        On_Key kDownArrow  Send NavigateNext
59870>>>        On_Key kSwitch     Send Switch_Next_Area
59871>>>    End_Procedure
59872>>>
59872>>>    Import_Class_Protocol ToolTip_Support_Mixin
59873>>>
59873>>>    Procedure Set psImage String sImage
59875>>>        Set Bitmap to ""
59876>>>        Forward Set psImage to sImage
59878>>>    End_Procedure
59879>>>
59879>>>    Function psImage Returns String
59881>>>        Function_Return (psImage(Self))
59882>>>    End_Function
59883>>>
59883>>>    Procedure Set Label String sLabel
59885>>>        Forward Set psLabel to sLabel
59887>>>    End_Procedure
59888>>>
59888>>>    Procedure Set psToolTip String sToolTip
59890>>>        Set private.psToolTip to sToolTip
59891>>>    End_Procedure
59892>>>
59892>>>    Function psToolTip Returns String
59894>>>        Function_Return (private.psToolTip(Self))
59895>>>    End_Function
59896>>>
59896>>>    Procedure End_Construct_Object
59898>>>        String sNote sLabel
59898>>>        Boolean bUseLargeFontHeight bLargeImageSize bCreateTooltipItem
59898>>>        Integer iFontHeight iImageSize iLabelRowOffset iLabelColOffset iSize iTextOffset
59898>>>
59898>>>        Forward Send End_Construct_Object
59900>>>
59900>>>        Get piLabelColOffset to iLabelColOffset
59901>>>        Get pbUseLargeFontHeight to bUseLargeFontHeight
59902>>>        If (bUseLargeFontHeight = True) Begin
59904>>>            Get piLabelLargeFontHeight to iFontHeight
59905>>>            Move 8 to iLabelRowOffset
59906>>>        End
59906>>>>
59906>>>        Else Begin
59907>>>            Get piLabelSmallFontHeight to iFontHeight
59908>>>            Move 6 to iLabelRowOffset
59909>>>        End
59909>>>>
59909>>>
59909>>>        Get pbLargeImageSize to bLargeImageSize
59910>>>        If (bLargeImageSize = True) Begin
59912>>>            Get private.piLargeImageSize to iImageSize
59913>>>        End
59913>>>>
59913>>>        Else Begin
59914>>>            Get private.piSmallImageSize to iImageSize
59915>>>            Move (iLabelColOffset - 6) to iLabelColOffset
59916>>>        End
59916>>>>
59916>>>
59916>>>        Object oHeaderGroupImage is a cRDCHeaderGroupImage
59918>>>            Set piImageSize to iImageSize
59919>>>            Set Location to (piImageRowOffset(Self)) (piImageColOffset(Self))
59920>>>            Set psImage to (private.psImage(Self))
59921>>>            Set peImageAlign to Button_ImageList_Align_Center
59922>>>            Set psToolTip to (private.psToolTip(Self))
59923>>>        End_Object
59924>>>
59924>>>        Object oHeaderGroupInfo_tb is a TextBox
59926>>>            Set Size to 12 100
59927>>>            Set Location to (piLabelRowOffset(Self)) iLabelColOffset
59928>>>            Set FontWeight to (piLabelFontPointWeight(Self))
59929>>>            Set FontItalics to (pbLabelFontItalics(Self))
59930>>>            Set FontPointHeight to iFontHeight
59931>>>            Set Label to (private.psLabel(Self))
59932>>>            Set TextColor to (piLabelColor(Self))
59933>>>            Set psToolTip to (private.psToolTip(Self))
59934>>>            Get Size to iSize
59935>>>        End_Object
59936>>>
59936>>>        // ToDo: The positioning logic for placing the info image to the right of the header text is flawed.
59936>>>        // How can it be improved?
59936>>>        Get pbCreateTooltipItem to bCreateTooltipItem
59937>>>        If (bCreateTooltipItem = True and private.psToolTip(Self) <> "") Begin
59939>>>            Get private.psLabel to sLabel
59940>>>            Get Text_Extent sLabel to iTextOffset
59941>>>            Move (Low(iTextOffset) -0)  to iTextOffset
59942>>>            Object oHeaderGroupTooltip_tb is a TextBox
59944>>>                Set Size to 10 10
59945>>>                If (bUseLargeFontHeight = True) Begin
59947>>>                    //                    Set Location to (piLabelRowOffset(Self)) iTextOffset //(Low(iSize) + (iTextOffset))
59947>>>                    Set Location to (piLabelRowOffset(Self)) (Low(iSize) + (iLabelColOffset * 2) + 10)
59948>>>                End
59948>>>>
59948>>>                Else Begin
59949>>>                    //                    Set Location to (piLabelRowOffset(Self)) iTextOffset
59949>>>                    Set Location to (piLabelRowOffset(Self)) (Low(iSize) + iLabelColOffset + 25)
59950>>>                End
59950>>>>
59950>>>                Set psToolTip to (private.psToolTip(Self))
59951>>>                Set Bitmap to "ActionAbout.bmp"
59952>>>            End_Object
59953>>>        End
59953>>>>
59953>>>
59953>>>        Get psNote to sNote
59954>>>        If (Trim(sNote) <> "") Begin
59956>>>            Object oHeaderGroupNote_tb is a TextBox
59958>>>                Set Size to 12 100
59959>>>                Set Location to (Hi(iSize) + iLabelRowOffset) (iLabelColOffset + 8)
59960>>>                Set Label to ("-" * String(sNote))
59961>>>                Set TextColor to (piLabelColor(Self))
59962>>>                Set FontPointHeight to 9
59963>>>                Set psToolTip to (private.psToolTip(Self))
59964>>>            End_Object
59965>>>        End
59965>>>>
59965>>>
59965>>>    End_Procedure
59966>>>
59966>>>    Function Popup_State Returns Boolean
59968>>>        Boolean bIsPopup
59968>>>        Get Popup_State of (Parent(Self)) to bIsPopup
59969>>>        Function_Return bIsPopup
59970>>>    End_Function
59971>>>
59971>>>    Procedure OnEnterArea Handle hoFrom
59973>>>        Integer iColor
59973>>>        Forward Send OnEnterArea hoFrom
59975>>>        // Not ideal, but works most of the time.
59975>>>        //       When navigating to i.e a popup we don't want
59975>>>        //       the coloring to appear. Else there will be 2
59975>>>        //       cRDCHeaderGroup's with the highlight color...
59975>>>        // Is there a better way?
59975>>>        If (hoFrom <> Desktop and hoFrom < Parent(Self)) Begin
59977>>>            Procedure_Return
59978>>>        End
59978>>>>
59978>>>        If (pbUseHotspotColor(Self) = True) Begin
59980>>>            Get Color to iColor
59981>>>            Set private.piColorOrg to iColor
59982>>>            Get piHeaderHotspotColor to iColor
59983>>>            Set Color to iColor
59984>>>            Broadcast Recursive Set Color to iColor
59986>>>        End
59986>>>>
59986>>>    End_Procedure
59987>>>
59987>>>    Procedure OnExitArea Handle hoFrom
59989>>>        Integer iColor
59989>>>        Forward Send OnExitArea hoFrom
59991>>>        If (pbUseHotspotColor(Self) = True) Begin
59993>>>            Get private.piColorOrg to iColor
59994>>>            Set Color to iColor
59995>>>            Broadcast Recursive Set Color to iColor
59997>>>        End
59997>>>>
59997>>>    End_Procedure
59998>>>
59998>>>    // Public access message to change the group header text color at runtime.
59998>>>    Procedure Set Label_Color Integer iColor
60000>>>        Set TextColor of (oHeaderGroupInfo_tb(Self)) to iColor
60001>>>    End_Procedure
60002>>>
60002>>>    Procedure NavigatePrevious
60004>>>        Integer iMulti ivoid iLastErr
60004>>>        Handle hWnd
60004>>>        Boolean bErr
60004>>>
60004>>>        Move Err to bErr
60005>>>        Move LastErr to iLastErr
60006>>>
60006>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
60007>>>        Get Select_Mode of (Focus(Self)) to iMulti
60008>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
60009>>>        If (Err) Begin
60011>>>            Move bErr to Err
60012>>>            Move iLastErr to LastErr
60013>>>            Procedure_Return
60014>>>        End
60014>>>>
60014>>>
60014>>>        Move bErr to Err
60015>>>        Move iLastErr to LastErr
60016>>>        If (iMulti = Multi_Select) Begin
60018>>>            Send Previous
60019>>>        End
60019>>>>
60019>>>        Else Begin
60020>>>            Get Form_Window_Handle of (Focus(Self)) to hWnd
60021>>>            Move (Sendmessage(hWnd, WM_KEYDOWN, Ascii(VK_LEFT), 0)) to iVoid
60022>>>        End
60022>>>>
60022>>>    End_Procedure
60023>>>
60023>>>    Procedure NavigateNext
60025>>>        Integer iMulti iVoid iLastErr
60025>>>        Handle hWnd
60025>>>        Boolean bErr
60025>>>
60025>>>        Move Err to bErr
60026>>>        Move LastErr to iLastErr
60027>>>
60027>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
60028>>>        Get Select_Mode of (Focus(Self)) to iMulti
60029>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
60030>>>        If (Err) Begin
60032>>>            Move bErr to Err
60033>>>            Move iLastErr to LastErr
60034>>>            Procedure_Return
60035>>>        End
60035>>>>
60035>>>
60035>>>        Move bErr to Err
60036>>>        Move iLastErr to LastErr
60037>>>        If (iMulti = Multi_Select) Begin
60039>>>            Send Next
60040>>>        End
60040>>>>
60040>>>        Else Begin
60041>>>            Get Form_Window_Handle of (Focus(Self)) to hWnd
60042>>>            Move (Sendmessage(hWnd, WM_KEYDOWN, Ascii(VK_LEFT), 0)) to iVoid
60043>>>        End
60043>>>>
60043>>>
60043>>>    End_Procedure
60044>>>
60044>>>    Procedure Enable_Window Integer iState
60046>>>        Handle hWnd
60046>>>        Get Window_Handle to hWnd
60047>>>        If hWnd Begin
60049>>>            Move (EnableWindow(hWnd, iState)) to hWnd
60050>>>        End
60050>>>>
60050>>>    End_Procedure
60051>>>
60051>>>    Procedure Page_Object Integer iState
60053>>>        Handle hWnd
60053>>>        Get Window_Handle to hWnd
60054>>>        Forward Send Page_Object iState
60056>>>        If (hWnd = 0 and iState) Begin
60058>>>            Send Shadow_Display
60059>>>        End
60059>>>>
60059>>>    End_Procedure
60060>>>
60060>>>    Procedure Shadow_Display
60062>>>        Send Enable_Window (not(Object_Shadow_State(Self)))
60063>>>    End_Procedure
60064>>>
60064>>>    Function Explicit_Shadow_State Returns Boolean
60066>>>        Function_Return (Private.Explicit_Shadow_State(Self))
60067>>>    End_Function
60068>>>
60068>>>    // For some reason we need to augment this event to allow
60068>>>    // files to be dropped on a cRDCHeaderGroup object; else nothing will
60068>>>    // happen.
60068>>>    Procedure OnFileDropped String sFilename Boolean bLast
60070>>>        Delegate Send OnFileDropped sFilename bLast
60072>>>    End_Procedure
60073>>>
60073>>>End_Class
60074>>>
60074>>>// We don't want the broadcast of setting color to set the background
60074>>>// color for forms that are within a cRDCHeaderGroup object.
60074>>>// If the Form is not within a cRDCHeaderGroup the Form class should
60074>>>// behave as it always has. But if you don't like this; just comment
60074>>>// it out.
60074>>>//Procedure Set Color for Form Integer eColor
60074>>>//    Boolean bIsHeaderGroup bErr bEnabled_State
60074>>>//    Integer iLastErr
60074>>>//
60074>>>//    Move Err to bErr
60074>>>//    Move LastErr to iLastErr
60074>>>//
60074>>>//    Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
60074>>>//    Delegate Get private.pbIsHeaderGroup to bIsHeaderGroup
60074>>>//    Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
60074>>>//    Move bErr to Err
60074>>>//    Move iLastErr to LastErr
60074>>>//    If (bIsHeaderGroup = False) Begin
60074>>>//        Forward Set Color to eColor
60074>>>//    End
60074>>>//End_Procedure
60074>Use cSQLComboForm.pkg
Including file: cSQLComboForm.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cSQLComboForm.pkg)
60074>>>Use Windows.pkg
60074>>>Use cRDCComboForm.pkg
Including file: cRDCComboForm.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\RDCToolsLib\AppSrc\cRDCComboForm.pkg)
60074>>>>>//****************************************************************************
60074>>>>>// $Module type: Package
60074>>>>>// $Module name: cRDCComboform.pkg
60074>>>>>//
60074>>>>>// $Author     : Nils Svedmyr, RDC Tools International.
60074>>>>>// Copyright (c) 2014 RDC Tools International
60074>>>>>// E-mail      : support@rdctools.com
60074>>>>>// Web-site    : http://www.rdctools.com
60074>>>>>//
60074>>>>>// Created     : 2014-03-17 @ 12:35 (Military date format - Year-Month-Day)
60074>>>>>//
60074>>>>>// Portions by : Raveen Sundram, Excellent Software Ltd
60074>>>>>//               The auto-size combo width logic was developed by Raveen.
60074>>>>>//
60074>>>>>// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
60074>>>>>// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
60074>>>>>// This is free software; you can redistribute it and/or modify it under the terms of the
60074>>>>>// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
60074>>>>>// in the help folder for more details.
60074>>>>>//
60074>>>>>//****************************************************************************
60074>>>>>Use Windows.pkg
60074>>>>>
60074>>>>>// Used by the "Page" message below to show
60074>>>>>// a focus rectangle around ComboForm and Checkbox objects.
60074>>>>>Define WM_CHANGEUISTATE For |CI$0127
60074>>>>>Define WM_UPDATEUISTATE For |CI$0128
60074>>>>>Define WM_QUERYUISTATE  For |CI$0129
60074>>>>>Define UIS_SET          For 1
60074>>>>>Define UIS_CLEAR        For 2
60074>>>>>Define UIS_INITIALIZE   For 3
60074>>>>>Define UISF_HIDEFOCUS   For |CI$1
60074>>>>>Define UISF_HIDEACCEL   For |CI$2
60074>>>>>Define UISF_ACTIVE      For |CI$4
60074>>>>>
60074>>>>>Class cComboFormIdleHandler is a cIdleHandler
60075>>>>>    Procedure Construct_Object
60077>>>>>        Forward Send Construct_Object
60079>>>>>
60079>>>>>        Set Label_Row_Offset to 0
60080>>>>>        Set Label_Col_Offset to 2
60081>>>>>        Set Label_Justification_Mode to jMode_Right
60082>>>>>        Set Combo_Sort_State to False
60083>>>>>        Set Entry_State to False
60084>>>>>
60084>>>>>    End_Procedure
60085>>>>>
60085>>>>>    Procedure OnIdle
60087>>>>>        Delegate Send DoUpdate
60089>>>>>    End_Procedure
60090>>>>>
60090>>>>>End_Class
60091>>>>>
60091>>>>>Class cRDCComboForm is a ComboForm
60092>>>>>    Procedure Construct_Object
60094>>>>>        Forward Send Construct_Object
60096>>>>>
60096>>>>>        Property Boolean pbAutoListWidth True
60097>>>>>
60097>>>>>        Property Boolean pbAutoShadowLabelObject True
60098>>>>>
60098>>>>>        Property Boolean pbAutoEnable False
60099>>>>>        Set Label_Col_Offset to 2
60100>>>>>        Property Boolean pbEnabled True
60101>>>>>        Set Label_Justification_Mode to JMode_Right
60102>>>>>        Property Handle phoIdleHandler (Create(Self, RefClass(cComboFormIdleHandler)))
60103>>>>>
60103>>>>>    End_Procedure
60104>>>>>
60104>>>>>    Procedure End_Construct_Object
60106>>>>>        Boolean bAutoShadowLabelObject
60106>>>>>        String sTooltip sStatus_Help
60106>>>>>
60106>>>>>        Get pbAutoShadowLabelObject to bAutoShadowLabelObject
60107>>>>>        If (bAutoShadowLabelObject = True) Begin
60109>>>>>            Set Private.Label_Shadow_Display_Mode to TBSHADOW_ON_LOCAL
60110>>>>>        End
60110>>>>>>
60110>>>>>
60110>>>>>        Forward Send End_Construct_Object
60112>>>>>
60112>>>>>        Get psToolTip   to sTooltip
60113>>>>>        Get Status_Help to sStatus_Help
60114>>>>>        If (sTooltip = "" and sStatus_Help <> "") Begin
60116>>>>>            Set psToolTip to sStatus_Help
60117>>>>>        End
60117>>>>>>
60117>>>>>        Else If (sTooltip <> "" and sStatus_Help = "") Begin
60120>>>>>            Set Status_Help to sTooltip
60121>>>>>        End
60121>>>>>>
60121>>>>>        Set pbEnabled of (phoIdleHandler(Self)) to (pbAutoEnable(Self))
60122>>>>>
60122>>>>>    End_Procedure
60123>>>>>
60123>>>>>    Procedure DoUpdate
60125>>>>>        If (pbAutoEnable(Self) = False) Begin
60127>>>>>            Procedure_Return
60128>>>>>        End
60128>>>>>>
60128>>>>>        Set Enabled_State to (IsEnabled(Self))
60129>>>>>    End_Procedure
60130>>>>>
60130>>>>>    Function IsEnabled Returns Boolean
60132>>>>>        Boolean bEnabled
60132>>>>>        Get pbEnabled to bEnabled
60133>>>>>        Function_Return bEnabled
60134>>>>>    End_Function
60135>>>>>
60135>>>>>    // Enable the idle handler timer when the object is activated
60135>>>>>    Procedure Activating
60137>>>>>        Forward Send Activating
60139>>>>>        Set pbEnabled of (phoIdleHandler(Self)) to True
60140>>>>>    End_Procedure
60141>>>>>
60141>>>>>    // Disable the idle handler when the object is deactivated
60141>>>>>    Procedure Deactivating
60143>>>>>        Set pbEnabled of (phoIdleHandler(Self)) to False
60144>>>>>        Forward Send Deactivating
60146>>>>>    End_Procedure
60147>>>>>
60147>>>>>    // To "un-select" the text in the comboform on startup
60147>>>>>    Procedure DoApplyAnchors Integer Arg1 Integer Arg2
60149>>>>>        Integer iStart iEnd
60149>>>>>
60149>>>>>        If (Focus(Desktop)=Self) Begin
60151>>>>>            Get SelStart to iStart
60152>>>>>            Get SelEnd   to iEnd
60153>>>>>        End
60153>>>>>>
60153>>>>>        Forward Send DoApplyAnchors Arg1 Arg2
60155>>>>>        Send SetSel iStart iEnd
60156>>>>>    End_Procedure
60157>>>>>
60157>>>>>    // Message that will drop down the list without the user clicking it,
60157>>>>>    // so you can send "DropDownList" to the combo to show the list.
60157>>>>>    Procedure DropDownList
60159>>>>>        Send Windows_Message CB_SHOWDROPDOWN 1 0
60160>>>>>    End_Procedure
60161>>>>>
60161>>>>>    Procedure SizeComboWidth
60163>>>>>        Integer iCount iItem iTextExt iRows iWd iNewWd iVertAdj
60163>>>>>        String sVal
60163>>>>>
60163>>>>>        // Initialise Width
60163>>>>>        Set ListWidth to 0
60164>>>>>        Send DoSetListWidth
60165>>>>>
60165>>>>>        Get ListRowCount     to iRows
60166>>>>>        Get Combo_Item_Count to iCount
60167>>>>>
60167>>>>>        // Vertical scroll-bar adjustment is needed
60167>>>>>        Move (iRows > 0 and iCount > iRows) to iVertAdj
60168>>>>>        If (iVertAdj) Begin
60170>>>>>            Move (GetSystemMetrics(SM_CXVSCROLL)+GetSystemMetrics(SM_CXEDGE)) to iVertAdj
60171>>>>>        End
60171>>>>>>
60171>>>>>        Else Begin
60172>>>>>            Move (GetSystemMetrics(SM_CXEDGE)) to iVertAdj
60173>>>>>        End
60173>>>>>>
60173>>>>>
60173>>>>>        // Calculate New Width
60173>>>>>        Decrement iCount
60174>>>>>        For iItem from 0 to iCount
60180>>>>>>
60180>>>>>            Get Combo_Value iItem to sVal
60181>>>>>            If (sVal <> "") Begin
60183>>>>>                Get Text_Extent sVal to iTextExt
60184>>>>>                Move (Low(iTextExt) + iVertAdj) to iWd
60185>>>>>                If (iWd > iNewWd) Begin
60187>>>>>                    Move (iWd + GetSystemMetrics(SM_CXFIXEDFRAME) + GetSystemMetrics(SM_CXEDGE)) to iNewWd
60188>>>>>                End
60188>>>>>>
60188>>>>>            End
60188>>>>>>
60188>>>>>        Loop
60189>>>>>>
60189>>>>>
60189>>>>>        // Set New Width
60189>>>>>        Set ListWidth to iNewWd
60190>>>>>        Send DoSetListWidth
60191>>>>>    End_Procedure
60192>>>>>
60192>>>>>    Procedure Combo_Add_Item String sValue
60194>>>>>        Forward Send Combo_Add_Item sValue
60196>>>>>        If (pbAutoListWidth(Self)) Begin
60198>>>>>            Send SizeComboWidth
60199>>>>>        End
60199>>>>>>
60199>>>>>    End_Procedure
60200>>>>>
60200>>>>>    Procedure Combo_Fill_List
60202>>>>>        Forward Send Combo_Fill_List
60204>>>>>        If (pbAutoListWidth(Self)) Begin
60206>>>>>            Send SizeComboWidth
60207>>>>>        End
60207>>>>>>
60207>>>>>    End_Procedure
60208>>>>>
60208>>>>>    // Fix for a bug when using manifest files & running Vista and above.
60208>>>>>    // The bug being that the focus rectangle doesn't show.
60208>>>>>    Procedure Page Integer iPageObject
60210>>>>>        Handle hWnd
60210>>>>>        Integer iRet iState
60210>>>>>
60210>>>>>        Forward Send Page iPageObject
60212>>>>>
60212>>>>>        If (iPageObject) Begin
60214>>>>>            Get Window_Handle to hWnd
60215>>>>>            If (hWnd) Begin
60217>>>>>                Move (SendMessage(hWnd, WM_QUERYUISTATE, 0, 0)) to iRet
60218>>>>>                If (iRet iand UISF_HIDEFOCUS) Begin
60220>>>>>                    Move (UIS_CLEAR + (UISF_HIDEFOCUS * 65536)) to iState
60221>>>>>                    Move (SendMessage(hWnd, WM_UPDATEUISTATE, iState, 0)) to iRet
60222>>>>>                End
60222>>>>>>
60222>>>>>            End
60222>>>>>>
60222>>>>>        End
60222>>>>>>
60222>>>>>
60222>>>>>        // To "un-select" the text in the comboform
60222>>>>>        If (iPageObject = 1 and Focus(Desktop) <> Self) Begin
60224>>>>>            Send SetSel 0 0
60225>>>>>        End
60225>>>>>>
60225>>>>>    End_Procedure
60226>>>>>
60226>>>>>End_Class
60227>>>
60227>>>// Used by the "Page" message below to show
60227>>>// a rectangle around ComboForm and Checkbox objects.
60227>>>//#IFNDEF WM_CHANGEUISTATE
60227>>>//    Define WM_CHANGEUISTATE for |CI$0127
60227>>>//    Define WM_UPDATEUISTATE for |CI$0128
60227>>>//    Define WM_QUERYUISTATE  for |CI$0129
60227>>>//    Define UIS_SET          for 1
60227>>>//    Define UIS_CLEAR        for 2
60227>>>//    Define UIS_INITIALIZE   for 3
60227>>>//    Define UISF_HIDEFOCUS   for |CI$1
60227>>>//    Define UISF_HIDEACCEL   for |CI$2
60227>>>//    Define UISF_ACTIVE      for |CI$4
60227>>>//#ENDIF
60227>>>
60227>>>Class cSQLComboForm is a cRDCComboForm
60228>>>    Procedure Construct_Object
60230>>>        Forward Send Construct_Object
60232>>>
60232>>>        // This will shadow the label if the form itself has its Enabled_State=False
60232>>>//        Property Boolean pbAutoShadowLabelObject True
60232>>>
60232>>>        // The piItem should be set to the object's corresponding tSQLConnection member (One based)
60232>>>        Property Integer piItem
60233>>>
60233>>>//        Set Label_Col_Offset to 2
60233>>>//        Set Label_Justification_Mode to JMode_Right
60233>>>    End_Procedure
60234>>>
60234>>>    Procedure End_Construct_Object
60236>>>//        Boolean bAutoShadowLabelObject
60236>>>//        Get pbAutoShadowLabelObject to bAutoShadowLabelObject
60236>>>//        If (bAutoShadowLabelObject = True) Begin
60236>>>//            Set Private.Label_Shadow_Display_Mode to TBSHADOW_ON_LOCAL
60236>>>//        End
60236>>>        Forward Send End_Construct_Object
60238>>>    End_Procedure
60239>>>
60239>>>    Procedure DbTypeUpdate Integer iDbType String sDriverID
60241>>>    End_Procedure
60242>>>
60242>>>    Procedure ReadConnectionData String[] sConnectionData
60244>>>        Integer iItem
60244>>>        Get piItem to iItem
60245>>>        Set Value to sConnectionData[iItem]
60246>>>    End_Procedure
60247>>>
60247>>>    Procedure WriteConnectionData String[] ByRef sConnectionData
60249>>>        String sValue
60249>>>        Integer iItem
60249>>>        Get piItem to iItem
60250>>>        Get Value to sValue
60251>>>        Move sValue to sConnectionData[iItem]
60252>>>    End_Procedure
60253>>>
60253>>>//    Procedure Set psToolTip String sToolTip
60253>>>//        String sStatusHelp
60253>>>//
60253>>>//        Get Status_Help to sStatusHelp
60253>>>//        If (sStatusHelp = "") Begin
60253>>>//            Set Status_Help to sToolTip
60253>>>//        End
60253>>>//
60253>>>//        Forward Set psToolTip to sToolTip
60253>>>//    End_Procedure
60253>>>//
60253>>>//    // Fix for a bug when using manifest files & running Vista and above.
60253>>>//    // The bug being that the focus rectangle doesn't show.
60253>>>//    Procedure Page Integer iPageObject
60253>>>//        Handle hWnd
60253>>>//        Integer iRet iState
60253>>>//
60253>>>//        Forward Send Page iPageObject
60253>>>//
60253>>>//        If (iPageObject) Begin
60253>>>//            Get Window_Handle to hWnd
60253>>>//            If (hWnd) Begin
60253>>>//                Move (SendMessage(hWnd, WM_QUERYUISTATE, 0, 0)) to iRet
60253>>>//                If (iRet iand UISF_HIDEFOCUS) Begin
60253>>>//                    Move (UIS_CLEAR + (UISF_HIDEFOCUS * 65536)) to iState
60253>>>//                    Move (SendMessage(hWnd, WM_UPDATEUISTATE, iState, 0)) to iRet
60253>>>//                End
60253>>>//            End
60253>>>//        End
60253>>>//    End_Procedure
60253>>>
60253>>>End_Class
60254>Use ChilkatXML-9.5.0-win32.pkg
Including file: ChilkatXML-9.5.0-win32.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ChilkatXML-9.5.0-win32.pkg)
60254>>>Use FlexCom20.pkg
60254>>>
60254>>>// CLSID: {2077C1B5-FBD0-40DF-B7AA-E07CBA589CB0}
60254>>>// IChilkatXml Interface v9.5.0
60254>>>Class cComIChilkatXml is a Mixin
60255>>>
60255>>>    Function ComGetImplAddrStr Returns String
60257>>>        Handle hDispatchDriver
60257>>>        String retVal
60257>>>        Get phDispatchDriver to hDispatchDriver
60258>>>        Get InvokeComMethod of hDispatchDriver 99 OLE_VT_BSTR to retVal
60259>>>        Function_Return retVal
60260>>>    End_Function
60261>>>
60261>>>    Function ComLastErrorHtml Returns String
60263>>>        Handle hDispatchDriver
60263>>>        String retVal
60263>>>        Get phDispatchDriver to hDispatchDriver
60264>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BSTR to retVal
60265>>>        Function_Return retVal
60266>>>    End_Function
60267>>>
60267>>>    Function ComLastErrorText Returns String
60269>>>        Handle hDispatchDriver
60269>>>        String retVal
60269>>>        Get phDispatchDriver to hDispatchDriver
60270>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BSTR to retVal
60271>>>        Function_Return retVal
60272>>>    End_Function
60273>>>
60273>>>    Function ComLastErrorXml Returns String
60275>>>        Handle hDispatchDriver
60275>>>        String retVal
60275>>>        Get phDispatchDriver to hDispatchDriver
60276>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BSTR to retVal
60277>>>        Function_Return retVal
60278>>>    End_Function
60279>>>
60279>>>    Function ComVersion Returns String
60281>>>        Handle hDispatchDriver
60281>>>        String retVal
60281>>>        Get phDispatchDriver to hDispatchDriver
60282>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_BSTR to retVal
60283>>>        Function_Return retVal
60284>>>    End_Function
60285>>>
60285>>>    Function ComDebugLogFilePath Returns String
60287>>>        Handle hDispatchDriver
60287>>>        String retVal
60287>>>        Get phDispatchDriver to hDispatchDriver
60288>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_BSTR to retVal
60289>>>        Function_Return retVal
60290>>>    End_Function
60291>>>
60291>>>    Procedure Set ComDebugLogFilePath String value
60293>>>        Handle hDispatchDriver
60293>>>        Get phDispatchDriver to hDispatchDriver
60294>>>        Send PrepareParams to hDispatchDriver 1
60295>>>        Set ComProperty of hDispatchDriver 5 OLE_VT_BSTR to value
60296>>>    End_Procedure
60297>>>
60297>>>    Function ComVerboseLogging Returns Integer
60299>>>        Handle hDispatchDriver
60299>>>        Integer retVal
60299>>>        Get phDispatchDriver to hDispatchDriver
60300>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_I4 to retVal
60301>>>        Function_Return retVal
60302>>>    End_Function
60303>>>
60303>>>    Procedure Set ComVerboseLogging Integer value
60305>>>        Handle hDispatchDriver
60305>>>        Get phDispatchDriver to hDispatchDriver
60306>>>        Send PrepareParams to hDispatchDriver 1
60307>>>        Set ComProperty of hDispatchDriver 6 OLE_VT_I4 to value
60308>>>    End_Procedure
60309>>>
60309>>>    Function ComLastMethodSuccess Returns Integer
60311>>>        Handle hDispatchDriver
60311>>>        Integer retVal
60311>>>        Get phDispatchDriver to hDispatchDriver
60312>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_I4 to retVal
60313>>>        Function_Return retVal
60314>>>    End_Function
60315>>>
60315>>>    Procedure Set ComLastMethodSuccess Integer value
60317>>>        Handle hDispatchDriver
60317>>>        Get phDispatchDriver to hDispatchDriver
60318>>>        Send PrepareParams to hDispatchDriver 1
60319>>>        Set ComProperty of hDispatchDriver 9 OLE_VT_I4 to value
60320>>>    End_Procedure
60321>>>
60321>>>    Function ComLastStringResult Returns String
60323>>>        Handle hDispatchDriver
60323>>>        String retVal
60323>>>        Get phDispatchDriver to hDispatchDriver
60324>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_BSTR to retVal
60325>>>        Function_Return retVal
60326>>>    End_Function
60327>>>
60327>>>    Function ComLastBinaryResult Returns Variant
60329>>>        Handle hDispatchDriver
60329>>>        Variant retVal
60329>>>        Get phDispatchDriver to hDispatchDriver
60330>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_VARIANT to retVal
60331>>>        Function_Return retVal
60332>>>    End_Function
60333>>>
60333>>>    Function ComLastStringResultLen Returns Integer
60335>>>        Handle hDispatchDriver
60335>>>        Integer retVal
60335>>>        Get phDispatchDriver to hDispatchDriver
60336>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_I4 to retVal
60337>>>        Function_Return retVal
60338>>>    End_Function
60339>>>
60339>>>    Function ComCdata Returns Integer
60341>>>        Handle hDispatchDriver
60341>>>        Integer retVal
60341>>>        Get phDispatchDriver to hDispatchDriver
60342>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_I4 to retVal
60343>>>        Function_Return retVal
60344>>>    End_Function
60345>>>
60345>>>    Procedure Set ComCdata Integer value
60347>>>        Handle hDispatchDriver
60347>>>        Get phDispatchDriver to hDispatchDriver
60348>>>        Send PrepareParams to hDispatchDriver 1
60349>>>        Set ComProperty of hDispatchDriver 100 OLE_VT_I4 to value
60350>>>    End_Procedure
60351>>>
60351>>>    Function ComContent Returns String
60353>>>        Handle hDispatchDriver
60353>>>        String retVal
60353>>>        Get phDispatchDriver to hDispatchDriver
60354>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_BSTR to retVal
60355>>>        Function_Return retVal
60356>>>    End_Function
60357>>>
60357>>>    Procedure Set ComContent String value
60359>>>        Handle hDispatchDriver
60359>>>        Get phDispatchDriver to hDispatchDriver
60360>>>        Send PrepareParams to hDispatchDriver 1
60361>>>        Set ComProperty of hDispatchDriver 101 OLE_VT_BSTR to value
60362>>>    End_Procedure
60363>>>
60363>>>    Function ComContentInt Returns Integer
60365>>>        Handle hDispatchDriver
60365>>>        Integer retVal
60365>>>        Get phDispatchDriver to hDispatchDriver
60366>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_I4 to retVal
60367>>>        Function_Return retVal
60368>>>    End_Function
60369>>>
60369>>>    Procedure Set ComContentInt Integer value
60371>>>        Handle hDispatchDriver
60371>>>        Get phDispatchDriver to hDispatchDriver
60372>>>        Send PrepareParams to hDispatchDriver 1
60373>>>        Set ComProperty of hDispatchDriver 102 OLE_VT_I4 to value
60374>>>    End_Procedure
60375>>>
60375>>>    Function ComDocType Returns String
60377>>>        Handle hDispatchDriver
60377>>>        String retVal
60377>>>        Get phDispatchDriver to hDispatchDriver
60378>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_BSTR to retVal
60379>>>        Function_Return retVal
60380>>>    End_Function
60381>>>
60381>>>    Procedure Set ComDocType String value
60383>>>        Handle hDispatchDriver
60383>>>        Get phDispatchDriver to hDispatchDriver
60384>>>        Send PrepareParams to hDispatchDriver 1
60385>>>        Set ComProperty of hDispatchDriver 103 OLE_VT_BSTR to value
60386>>>    End_Procedure
60387>>>
60387>>>    Function ComEmitXmlDecl Returns Integer
60389>>>        Handle hDispatchDriver
60389>>>        Integer retVal
60389>>>        Get phDispatchDriver to hDispatchDriver
60390>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_I4 to retVal
60391>>>        Function_Return retVal
60392>>>    End_Function
60393>>>
60393>>>    Procedure Set ComEmitXmlDecl Integer value
60395>>>        Handle hDispatchDriver
60395>>>        Get phDispatchDriver to hDispatchDriver
60396>>>        Send PrepareParams to hDispatchDriver 1
60397>>>        Set ComProperty of hDispatchDriver 104 OLE_VT_I4 to value
60398>>>    End_Procedure
60399>>>
60399>>>    Function ComEncoding Returns String
60401>>>        Handle hDispatchDriver
60401>>>        String retVal
60401>>>        Get phDispatchDriver to hDispatchDriver
60402>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_BSTR to retVal
60403>>>        Function_Return retVal
60404>>>    End_Function
60405>>>
60405>>>    Procedure Set ComEncoding String value
60407>>>        Handle hDispatchDriver
60407>>>        Get phDispatchDriver to hDispatchDriver
60408>>>        Send PrepareParams to hDispatchDriver 1
60409>>>        Set ComProperty of hDispatchDriver 105 OLE_VT_BSTR to value
60410>>>    End_Procedure
60411>>>
60411>>>    Function ComNumAttributes Returns Integer
60413>>>        Handle hDispatchDriver
60413>>>        Integer retVal
60413>>>        Get phDispatchDriver to hDispatchDriver
60414>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_I4 to retVal
60415>>>        Function_Return retVal
60416>>>    End_Function
60417>>>
60417>>>    Function ComNumChildren Returns Integer
60419>>>        Handle hDispatchDriver
60419>>>        Integer retVal
60419>>>        Get phDispatchDriver to hDispatchDriver
60420>>>        Get InvokeComMethod of hDispatchDriver 107 OLE_VT_I4 to retVal
60421>>>        Function_Return retVal
60422>>>    End_Function
60423>>>
60423>>>    Function ComSortCaseInsensitive Returns Integer
60425>>>        Handle hDispatchDriver
60425>>>        Integer retVal
60425>>>        Get phDispatchDriver to hDispatchDriver
60426>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_I4 to retVal
60427>>>        Function_Return retVal
60428>>>    End_Function
60429>>>
60429>>>    Procedure Set ComSortCaseInsensitive Integer value
60431>>>        Handle hDispatchDriver
60431>>>        Get phDispatchDriver to hDispatchDriver
60432>>>        Send PrepareParams to hDispatchDriver 1
60433>>>        Set ComProperty of hDispatchDriver 108 OLE_VT_I4 to value
60434>>>    End_Procedure
60435>>>
60435>>>    Function ComStandalone Returns Integer
60437>>>        Handle hDispatchDriver
60437>>>        Integer retVal
60437>>>        Get phDispatchDriver to hDispatchDriver
60438>>>        Get InvokeComMethod of hDispatchDriver 109 OLE_VT_I4 to retVal
60439>>>        Function_Return retVal
60440>>>    End_Function
60441>>>
60441>>>    Procedure Set ComStandalone Integer value
60443>>>        Handle hDispatchDriver
60443>>>        Get phDispatchDriver to hDispatchDriver
60444>>>        Send PrepareParams to hDispatchDriver 1
60445>>>        Set ComProperty of hDispatchDriver 109 OLE_VT_I4 to value
60446>>>    End_Procedure
60447>>>
60447>>>    Function ComTag Returns String
60449>>>        Handle hDispatchDriver
60449>>>        String retVal
60449>>>        Get phDispatchDriver to hDispatchDriver
60450>>>        Get InvokeComMethod of hDispatchDriver 110 OLE_VT_BSTR to retVal
60451>>>        Function_Return retVal
60452>>>    End_Function
60453>>>
60453>>>    Procedure Set ComTag String value
60455>>>        Handle hDispatchDriver
60455>>>        Get phDispatchDriver to hDispatchDriver
60456>>>        Send PrepareParams to hDispatchDriver 1
60457>>>        Set ComProperty of hDispatchDriver 110 OLE_VT_BSTR to value
60458>>>    End_Procedure
60459>>>
60459>>>    Function ComTreeId Returns Integer
60461>>>        Handle hDispatchDriver
60461>>>        Integer retVal
60461>>>        Get phDispatchDriver to hDispatchDriver
60462>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_I4 to retVal
60463>>>        Function_Return retVal
60464>>>    End_Function
60465>>>
60465>>>    Function ComAccumulateTagContent String llTag String llskipTags Returns String
60467>>>        Handle hDispatchDriver
60467>>>        String retVal
60467>>>        Get phDispatchDriver to hDispatchDriver
60468>>>        Send PrepareParams to hDispatchDriver 2
60469>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60470>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llskipTags
60471>>>        Get InvokeComMethod of hDispatchDriver 112 OLE_VT_BSTR to retVal
60472>>>        Function_Return retVal
60473>>>    End_Function
60474>>>
60474>>>    Function ComAddAttribute String llname String llvalue Returns Integer
60476>>>        Handle hDispatchDriver
60476>>>        Integer retVal
60476>>>        Get phDispatchDriver to hDispatchDriver
60477>>>        Send PrepareParams to hDispatchDriver 2
60478>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60479>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
60480>>>        Get InvokeComMethod of hDispatchDriver 113 OLE_VT_I4 to retVal
60481>>>        Function_Return retVal
60482>>>    End_Function
60483>>>
60483>>>    Function ComAddAttributeInt String llname Integer llvalue Returns Integer
60485>>>        Handle hDispatchDriver
60485>>>        Integer retVal
60485>>>        Get phDispatchDriver to hDispatchDriver
60486>>>        Send PrepareParams to hDispatchDriver 2
60487>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60488>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
60489>>>        Get InvokeComMethod of hDispatchDriver 114 OLE_VT_I4 to retVal
60490>>>        Function_Return retVal
60491>>>    End_Function
60492>>>
60492>>>    Function ComAddChildTree Variant lltree Returns Integer
60494>>>        Handle hDispatchDriver
60494>>>        Integer retVal
60494>>>        Get phDispatchDriver to hDispatchDriver
60495>>>        Send PrepareParams to hDispatchDriver 1
60496>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH lltree
60497>>>        Get InvokeComMethod of hDispatchDriver 115 OLE_VT_I4 to retVal
60498>>>        Function_Return retVal
60499>>>    End_Function
60500>>>
60500>>>    Procedure ComAddOrUpdateAttribute String llname String llvalue
60502>>>        Handle hDispatchDriver
60502>>>        Get phDispatchDriver to hDispatchDriver
60503>>>        Send PrepareParams to hDispatchDriver 2
60504>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60505>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
60506>>>        Send InvokeComMethod to hDispatchDriver 116 OLE_VT_VOID
60507>>>    End_Procedure
60508>>>
60508>>>    Procedure ComAddOrUpdateAttributeI String llname Integer llvalue
60510>>>        Handle hDispatchDriver
60510>>>        Get phDispatchDriver to hDispatchDriver
60511>>>        Send PrepareParams to hDispatchDriver 2
60512>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60513>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
60514>>>        Send InvokeComMethod to hDispatchDriver 117 OLE_VT_VOID
60515>>>    End_Procedure
60516>>>
60516>>>    Procedure ComAddStyleSheet String llstyleSheet
60518>>>        Handle hDispatchDriver
60518>>>        Get phDispatchDriver to hDispatchDriver
60519>>>        Send PrepareParams to hDispatchDriver 1
60520>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstyleSheet
60521>>>        Send InvokeComMethod to hDispatchDriver 118 OLE_VT_VOID
60522>>>    End_Procedure
60523>>>
60523>>>    Procedure ComAddToAttribute String llname Integer llamount
60525>>>        Handle hDispatchDriver
60525>>>        Get phDispatchDriver to hDispatchDriver
60526>>>        Send PrepareParams to hDispatchDriver 2
60527>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60528>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llamount
60529>>>        Send InvokeComMethod to hDispatchDriver 119 OLE_VT_VOID
60530>>>    End_Procedure
60531>>>
60531>>>    Procedure ComAddToChildContent String llTag Integer llamount
60533>>>        Handle hDispatchDriver
60533>>>        Get phDispatchDriver to hDispatchDriver
60534>>>        Send PrepareParams to hDispatchDriver 2
60535>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60536>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llamount
60537>>>        Send InvokeComMethod to hDispatchDriver 120 OLE_VT_VOID
60538>>>    End_Procedure
60539>>>
60539>>>    Procedure ComAddToContent Integer llamount
60541>>>        Handle hDispatchDriver
60541>>>        Get phDispatchDriver to hDispatchDriver
60542>>>        Send PrepareParams to hDispatchDriver 1
60543>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llamount
60544>>>        Send InvokeComMethod to hDispatchDriver 121 OLE_VT_VOID
60545>>>    End_Procedure
60546>>>
60546>>>    Function ComAppendToContent String llstr Returns Integer
60548>>>        Handle hDispatchDriver
60548>>>        Integer retVal
60548>>>        Get phDispatchDriver to hDispatchDriver
60549>>>        Send PrepareParams to hDispatchDriver 1
60550>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstr
60551>>>        Get InvokeComMethod of hDispatchDriver 122 OLE_VT_I4 to retVal
60552>>>        Function_Return retVal
60553>>>    End_Function
60554>>>
60554>>>    Function ComBEncodeContent String llcharset Variant llinData Returns Integer
60556>>>        Handle hDispatchDriver
60556>>>        Integer retVal
60556>>>        Get phDispatchDriver to hDispatchDriver
60557>>>        Send PrepareParams to hDispatchDriver 2
60558>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcharset
60559>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llinData
60560>>>        Get InvokeComMethod of hDispatchDriver 123 OLE_VT_I4 to retVal
60561>>>        Function_Return retVal
60562>>>    End_Function
60563>>>
60563>>>    Function ComChildContentMatches String lltagPath String llpattern Integer llcaseSensitive Returns Integer
60565>>>        Handle hDispatchDriver
60565>>>        Integer retVal
60565>>>        Get phDispatchDriver to hDispatchDriver
60566>>>        Send PrepareParams to hDispatchDriver 3
60567>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60568>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpattern
60569>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcaseSensitive
60570>>>        Get InvokeComMethod of hDispatchDriver 124 OLE_VT_I4 to retVal
60571>>>        Function_Return retVal
60572>>>    End_Function
60573>>>
60573>>>    Function ComChilkatPath String llpathCmd Returns String
60575>>>        Handle hDispatchDriver
60575>>>        String retVal
60575>>>        Get phDispatchDriver to hDispatchDriver
60576>>>        Send PrepareParams to hDispatchDriver 1
60577>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpathCmd
60578>>>        Get InvokeComMethod of hDispatchDriver 125 OLE_VT_BSTR to retVal
60579>>>        Function_Return retVal
60580>>>    End_Function
60581>>>
60581>>>    Procedure ComClear
60583>>>        Handle hDispatchDriver
60583>>>        Get phDispatchDriver to hDispatchDriver
60584>>>        Send InvokeComMethod to hDispatchDriver 126 OLE_VT_VOID
60585>>>    End_Procedure
60586>>>
60586>>>    Function ComContentMatches String llpattern Integer llcaseSensitive Returns Integer
60588>>>        Handle hDispatchDriver
60588>>>        Integer retVal
60588>>>        Get phDispatchDriver to hDispatchDriver
60589>>>        Send PrepareParams to hDispatchDriver 2
60590>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpattern
60591>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcaseSensitive
60592>>>        Get InvokeComMethod of hDispatchDriver 127 OLE_VT_I4 to retVal
60593>>>        Function_Return retVal
60594>>>    End_Function
60595>>>
60595>>>    Procedure ComCopy Variant llnode
60597>>>        Handle hDispatchDriver
60597>>>        Get phDispatchDriver to hDispatchDriver
60598>>>        Send PrepareParams to hDispatchDriver 1
60599>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llnode
60600>>>        Send InvokeComMethod to hDispatchDriver 128 OLE_VT_VOID
60601>>>    End_Procedure
60602>>>
60602>>>    Procedure ComCopyRef Variant llcopyFromNode
60604>>>        Handle hDispatchDriver
60604>>>        Get phDispatchDriver to hDispatchDriver
60605>>>        Send PrepareParams to hDispatchDriver 1
60606>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llcopyFromNode
60607>>>        Send InvokeComMethod to hDispatchDriver 129 OLE_VT_VOID
60608>>>    End_Procedure
60609>>>
60609>>>    Function ComDecodeContent Returns Variant
60611>>>        Handle hDispatchDriver
60611>>>        Variant retVal
60611>>>        Get phDispatchDriver to hDispatchDriver
60612>>>        Get InvokeComMethod of hDispatchDriver 130 OLE_VT_VARIANT to retVal
60613>>>        Function_Return retVal
60614>>>    End_Function
60615>>>
60615>>>    Function ComDecodeEntities String llstr Returns String
60617>>>        Handle hDispatchDriver
60617>>>        String retVal
60617>>>        Get phDispatchDriver to hDispatchDriver
60618>>>        Send PrepareParams to hDispatchDriver 1
60619>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstr
60620>>>        Get InvokeComMethod of hDispatchDriver 131 OLE_VT_BSTR to retVal
60621>>>        Function_Return retVal
60622>>>    End_Function
60623>>>
60623>>>    Function ComDecryptContent String llpassword Returns Integer
60625>>>        Handle hDispatchDriver
60625>>>        Integer retVal
60625>>>        Get phDispatchDriver to hDispatchDriver
60626>>>        Send PrepareParams to hDispatchDriver 1
60627>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
60628>>>        Get InvokeComMethod of hDispatchDriver 132 OLE_VT_I4 to retVal
60629>>>        Function_Return retVal
60630>>>    End_Function
60631>>>
60631>>>    Function ComEncryptContent String llpassword Returns Integer
60633>>>        Handle hDispatchDriver
60633>>>        Integer retVal
60633>>>        Get phDispatchDriver to hDispatchDriver
60634>>>        Send PrepareParams to hDispatchDriver 1
60635>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
60636>>>        Get InvokeComMethod of hDispatchDriver 133 OLE_VT_I4 to retVal
60637>>>        Function_Return retVal
60638>>>    End_Function
60639>>>
60639>>>    Function ComExtractChildByIndex Integer llindex Returns Variant
60641>>>        Handle hDispatchDriver
60641>>>        Variant retVal
60641>>>        Get phDispatchDriver to hDispatchDriver
60642>>>        Send PrepareParams to hDispatchDriver 1
60643>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60644>>>        Get InvokeComMethod of hDispatchDriver 134 OLE_VT_DISPATCH to retVal
60645>>>        Function_Return retVal
60646>>>    End_Function
60647>>>
60647>>>    Function ComExtractChildByName String lltagPath String llattrName String llattrValue Returns Variant
60649>>>        Handle hDispatchDriver
60649>>>        Variant retVal
60649>>>        Get phDispatchDriver to hDispatchDriver
60650>>>        Send PrepareParams to hDispatchDriver 3
60651>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60652>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
60653>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrValue
60654>>>        Get InvokeComMethod of hDispatchDriver 135 OLE_VT_DISPATCH to retVal
60655>>>        Function_Return retVal
60656>>>    End_Function
60657>>>
60657>>>    Function ComFindChild String lltagPath Returns Variant
60659>>>        Handle hDispatchDriver
60659>>>        Variant retVal
60659>>>        Get phDispatchDriver to hDispatchDriver
60660>>>        Send PrepareParams to hDispatchDriver 1
60661>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60662>>>        Get InvokeComMethod of hDispatchDriver 136 OLE_VT_DISPATCH to retVal
60663>>>        Function_Return retVal
60664>>>    End_Function
60665>>>
60665>>>    Function ComFindChild2 String lltagPath Returns Integer
60667>>>        Handle hDispatchDriver
60667>>>        Integer retVal
60667>>>        Get phDispatchDriver to hDispatchDriver
60668>>>        Send PrepareParams to hDispatchDriver 1
60669>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60670>>>        Get InvokeComMethod of hDispatchDriver 137 OLE_VT_I4 to retVal
60671>>>        Function_Return retVal
60672>>>    End_Function
60673>>>
60673>>>    Function ComFindNextRecord String lltagPath String llcontentPattern Returns Variant
60675>>>        Handle hDispatchDriver
60675>>>        Variant retVal
60675>>>        Get phDispatchDriver to hDispatchDriver
60676>>>        Send PrepareParams to hDispatchDriver 2
60677>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60678>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
60679>>>        Get InvokeComMethod of hDispatchDriver 138 OLE_VT_DISPATCH to retVal
60680>>>        Function_Return retVal
60681>>>    End_Function
60682>>>
60682>>>    Function ComFindOrAddNewChild String lltagPath Returns Variant
60684>>>        Handle hDispatchDriver
60684>>>        Variant retVal
60684>>>        Get phDispatchDriver to hDispatchDriver
60685>>>        Send PrepareParams to hDispatchDriver 1
60686>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60687>>>        Get InvokeComMethod of hDispatchDriver 139 OLE_VT_DISPATCH to retVal
60688>>>        Function_Return retVal
60689>>>    End_Function
60690>>>
60690>>>    Function ComFirstChild Returns Variant
60692>>>        Handle hDispatchDriver
60692>>>        Variant retVal
60692>>>        Get phDispatchDriver to hDispatchDriver
60693>>>        Get InvokeComMethod of hDispatchDriver 140 OLE_VT_DISPATCH to retVal
60694>>>        Function_Return retVal
60695>>>    End_Function
60696>>>
60696>>>    Function ComFirstChild2 Returns Integer
60698>>>        Handle hDispatchDriver
60698>>>        Integer retVal
60698>>>        Get phDispatchDriver to hDispatchDriver
60699>>>        Get InvokeComMethod of hDispatchDriver 141 OLE_VT_I4 to retVal
60700>>>        Function_Return retVal
60701>>>    End_Function
60702>>>
60702>>>    Function ComGetAttrValue String llname Returns String
60704>>>        Handle hDispatchDriver
60704>>>        String retVal
60704>>>        Get phDispatchDriver to hDispatchDriver
60705>>>        Send PrepareParams to hDispatchDriver 1
60706>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60707>>>        Get InvokeComMethod of hDispatchDriver 142 OLE_VT_BSTR to retVal
60708>>>        Function_Return retVal
60709>>>    End_Function
60710>>>
60710>>>    Function ComGetAttrValueInt String llname Returns Integer
60712>>>        Handle hDispatchDriver
60712>>>        Integer retVal
60712>>>        Get phDispatchDriver to hDispatchDriver
60713>>>        Send PrepareParams to hDispatchDriver 1
60714>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60715>>>        Get InvokeComMethod of hDispatchDriver 143 OLE_VT_I4 to retVal
60716>>>        Function_Return retVal
60717>>>    End_Function
60718>>>
60718>>>    Function ComGetAttributeName Integer llindex Returns String
60720>>>        Handle hDispatchDriver
60720>>>        String retVal
60720>>>        Get phDispatchDriver to hDispatchDriver
60721>>>        Send PrepareParams to hDispatchDriver 1
60722>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60723>>>        Get InvokeComMethod of hDispatchDriver 144 OLE_VT_BSTR to retVal
60724>>>        Function_Return retVal
60725>>>    End_Function
60726>>>
60726>>>    Function ComGetAttributeValue Integer llindex Returns String
60728>>>        Handle hDispatchDriver
60728>>>        String retVal
60728>>>        Get phDispatchDriver to hDispatchDriver
60729>>>        Send PrepareParams to hDispatchDriver 1
60730>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60731>>>        Get InvokeComMethod of hDispatchDriver 145 OLE_VT_BSTR to retVal
60732>>>        Function_Return retVal
60733>>>    End_Function
60734>>>
60734>>>    Function ComGetAttributeValueInt Integer llindex Returns Integer
60736>>>        Handle hDispatchDriver
60736>>>        Integer retVal
60736>>>        Get phDispatchDriver to hDispatchDriver
60737>>>        Send PrepareParams to hDispatchDriver 1
60738>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60739>>>        Get InvokeComMethod of hDispatchDriver 146 OLE_VT_I4 to retVal
60740>>>        Function_Return retVal
60741>>>    End_Function
60742>>>
60742>>>    Function ComGetBinaryContent Integer llunzipFlag Integer lldecryptFlag String llpassword Returns Variant
60744>>>        Handle hDispatchDriver
60744>>>        Variant retVal
60744>>>        Get phDispatchDriver to hDispatchDriver
60745>>>        Send PrepareParams to hDispatchDriver 3
60746>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llunzipFlag
60747>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldecryptFlag
60748>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
60749>>>        Get InvokeComMethod of hDispatchDriver 147 OLE_VT_VARIANT to retVal
60750>>>        Function_Return retVal
60751>>>    End_Function
60752>>>
60752>>>    Function ComGetChild Integer llindex Returns Variant
60754>>>        Handle hDispatchDriver
60754>>>        Variant retVal
60754>>>        Get phDispatchDriver to hDispatchDriver
60755>>>        Send PrepareParams to hDispatchDriver 1
60756>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60757>>>        Get InvokeComMethod of hDispatchDriver 148 OLE_VT_DISPATCH to retVal
60758>>>        Function_Return retVal
60759>>>    End_Function
60760>>>
60760>>>    Function ComGetChild2 Integer llindex Returns Integer
60762>>>        Handle hDispatchDriver
60762>>>        Integer retVal
60762>>>        Get phDispatchDriver to hDispatchDriver
60763>>>        Send PrepareParams to hDispatchDriver 1
60764>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60765>>>        Get InvokeComMethod of hDispatchDriver 149 OLE_VT_I4 to retVal
60766>>>        Function_Return retVal
60767>>>    End_Function
60768>>>
60768>>>    Function ComGetChildBoolValue String lltagPath Returns Integer
60770>>>        Handle hDispatchDriver
60770>>>        Integer retVal
60770>>>        Get phDispatchDriver to hDispatchDriver
60771>>>        Send PrepareParams to hDispatchDriver 1
60772>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60773>>>        Get InvokeComMethod of hDispatchDriver 150 OLE_VT_I4 to retVal
60774>>>        Function_Return retVal
60775>>>    End_Function
60776>>>
60776>>>    Function ComGetChildContent String lltagPath Returns String
60778>>>        Handle hDispatchDriver
60778>>>        String retVal
60778>>>        Get phDispatchDriver to hDispatchDriver
60779>>>        Send PrepareParams to hDispatchDriver 1
60780>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60781>>>        Get InvokeComMethod of hDispatchDriver 151 OLE_VT_BSTR to retVal
60782>>>        Function_Return retVal
60783>>>    End_Function
60784>>>
60784>>>    Function ComGetChildContentByIndex Integer llindex Returns String
60786>>>        Handle hDispatchDriver
60786>>>        String retVal
60786>>>        Get phDispatchDriver to hDispatchDriver
60787>>>        Send PrepareParams to hDispatchDriver 1
60788>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60789>>>        Get InvokeComMethod of hDispatchDriver 152 OLE_VT_BSTR to retVal
60790>>>        Function_Return retVal
60791>>>    End_Function
60792>>>
60792>>>    Function ComGetChildExact String llTag String llContent Returns Variant
60794>>>        Handle hDispatchDriver
60794>>>        Variant retVal
60794>>>        Get phDispatchDriver to hDispatchDriver
60795>>>        Send PrepareParams to hDispatchDriver 2
60796>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60797>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
60798>>>        Get InvokeComMethod of hDispatchDriver 153 OLE_VT_DISPATCH to retVal
60799>>>        Function_Return retVal
60800>>>    End_Function
60801>>>
60801>>>    Function ComGetChildIntValue String lltagPath Returns Integer
60803>>>        Handle hDispatchDriver
60803>>>        Integer retVal
60803>>>        Get phDispatchDriver to hDispatchDriver
60804>>>        Send PrepareParams to hDispatchDriver 1
60805>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60806>>>        Get InvokeComMethod of hDispatchDriver 154 OLE_VT_I4 to retVal
60807>>>        Function_Return retVal
60808>>>    End_Function
60809>>>
60809>>>    Function ComGetChildTag Integer llindex Returns String
60811>>>        Handle hDispatchDriver
60811>>>        String retVal
60811>>>        Get phDispatchDriver to hDispatchDriver
60812>>>        Send PrepareParams to hDispatchDriver 1
60813>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60814>>>        Get InvokeComMethod of hDispatchDriver 155 OLE_VT_BSTR to retVal
60815>>>        Function_Return retVal
60816>>>    End_Function
60817>>>
60817>>>    Function ComGetChildTagByIndex Integer llindex Returns String
60819>>>        Handle hDispatchDriver
60819>>>        String retVal
60819>>>        Get phDispatchDriver to hDispatchDriver
60820>>>        Send PrepareParams to hDispatchDriver 1
60821>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60822>>>        Get InvokeComMethod of hDispatchDriver 156 OLE_VT_BSTR to retVal
60823>>>        Function_Return retVal
60824>>>    End_Function
60825>>>
60825>>>    Function ComGetChildWithAttr String lltagPath String llattrName String llattrValue Returns Variant
60827>>>        Handle hDispatchDriver
60827>>>        Variant retVal
60827>>>        Get phDispatchDriver to hDispatchDriver
60828>>>        Send PrepareParams to hDispatchDriver 3
60829>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60830>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
60831>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrValue
60832>>>        Get InvokeComMethod of hDispatchDriver 157 OLE_VT_DISPATCH to retVal
60833>>>        Function_Return retVal
60834>>>    End_Function
60835>>>
60835>>>    Function ComGetChildWithContent String llContent Returns Variant
60837>>>        Handle hDispatchDriver
60837>>>        Variant retVal
60837>>>        Get phDispatchDriver to hDispatchDriver
60838>>>        Send PrepareParams to hDispatchDriver 1
60839>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
60840>>>        Get InvokeComMethod of hDispatchDriver 158 OLE_VT_DISPATCH to retVal
60841>>>        Function_Return retVal
60842>>>    End_Function
60843>>>
60843>>>    Function ComGetChildWithTag String lltagPath Returns Variant
60845>>>        Handle hDispatchDriver
60845>>>        Variant retVal
60845>>>        Get phDispatchDriver to hDispatchDriver
60846>>>        Send PrepareParams to hDispatchDriver 1
60847>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60848>>>        Get InvokeComMethod of hDispatchDriver 159 OLE_VT_DISPATCH to retVal
60849>>>        Function_Return retVal
60850>>>    End_Function
60851>>>
60851>>>    Function ComGetNthChildWithTag String llTag Integer lln Returns Variant
60853>>>        Handle hDispatchDriver
60853>>>        Variant retVal
60853>>>        Get phDispatchDriver to hDispatchDriver
60854>>>        Send PrepareParams to hDispatchDriver 2
60855>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60856>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lln
60857>>>        Get InvokeComMethod of hDispatchDriver 160 OLE_VT_DISPATCH to retVal
60858>>>        Function_Return retVal
60859>>>    End_Function
60860>>>
60860>>>    Function ComGetNthChildWithTag2 String llTag Integer lln Returns Integer
60862>>>        Handle hDispatchDriver
60862>>>        Integer retVal
60862>>>        Get phDispatchDriver to hDispatchDriver
60863>>>        Send PrepareParams to hDispatchDriver 2
60864>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60865>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lln
60866>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
60867>>>        Function_Return retVal
60868>>>    End_Function
60869>>>
60869>>>    Function ComGetParent Returns Variant
60871>>>        Handle hDispatchDriver
60871>>>        Variant retVal
60871>>>        Get phDispatchDriver to hDispatchDriver
60872>>>        Get InvokeComMethod of hDispatchDriver 162 OLE_VT_DISPATCH to retVal
60873>>>        Function_Return retVal
60874>>>    End_Function
60875>>>
60875>>>    Function ComGetParent2 Returns Integer
60877>>>        Handle hDispatchDriver
60877>>>        Integer retVal
60877>>>        Get phDispatchDriver to hDispatchDriver
60878>>>        Get InvokeComMethod of hDispatchDriver 163 OLE_VT_I4 to retVal
60879>>>        Function_Return retVal
60880>>>    End_Function
60881>>>
60881>>>    Function ComGetRoot Returns Variant
60883>>>        Handle hDispatchDriver
60883>>>        Variant retVal
60883>>>        Get phDispatchDriver to hDispatchDriver
60884>>>        Get InvokeComMethod of hDispatchDriver 164 OLE_VT_DISPATCH to retVal
60885>>>        Function_Return retVal
60886>>>    End_Function
60887>>>
60887>>>    Procedure ComGetRoot2
60889>>>        Handle hDispatchDriver
60889>>>        Get phDispatchDriver to hDispatchDriver
60890>>>        Send InvokeComMethod to hDispatchDriver 165 OLE_VT_VOID
60891>>>    End_Procedure
60892>>>
60892>>>    Function ComGetSelf Returns Variant
60894>>>        Handle hDispatchDriver
60894>>>        Variant retVal
60894>>>        Get phDispatchDriver to hDispatchDriver
60895>>>        Get InvokeComMethod of hDispatchDriver 166 OLE_VT_DISPATCH to retVal
60896>>>        Function_Return retVal
60897>>>    End_Function
60898>>>
60898>>>    Function ComGetXml Returns String
60900>>>        Handle hDispatchDriver
60900>>>        String retVal
60900>>>        Get phDispatchDriver to hDispatchDriver
60901>>>        Get InvokeComMethod of hDispatchDriver 167 OLE_VT_BSTR to retVal
60902>>>        Function_Return retVal
60903>>>    End_Function
60904>>>
60904>>>    Function ComHasAttrWithValue String llname String llvalue Returns Integer
60906>>>        Handle hDispatchDriver
60906>>>        Integer retVal
60906>>>        Get phDispatchDriver to hDispatchDriver
60907>>>        Send PrepareParams to hDispatchDriver 2
60908>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60909>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
60910>>>        Get InvokeComMethod of hDispatchDriver 168 OLE_VT_I4 to retVal
60911>>>        Function_Return retVal
60912>>>    End_Function
60913>>>
60913>>>    Function ComHasAttribute String llname Returns Integer
60915>>>        Handle hDispatchDriver
60915>>>        Integer retVal
60915>>>        Get phDispatchDriver to hDispatchDriver
60916>>>        Send PrepareParams to hDispatchDriver 1
60917>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60918>>>        Get InvokeComMethod of hDispatchDriver 169 OLE_VT_I4 to retVal
60919>>>        Function_Return retVal
60920>>>    End_Function
60921>>>
60921>>>    Function ComHasChildWithContent String llContent Returns Integer
60923>>>        Handle hDispatchDriver
60923>>>        Integer retVal
60923>>>        Get phDispatchDriver to hDispatchDriver
60924>>>        Send PrepareParams to hDispatchDriver 1
60925>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
60926>>>        Get InvokeComMethod of hDispatchDriver 170 OLE_VT_I4 to retVal
60927>>>        Function_Return retVal
60928>>>    End_Function
60929>>>
60929>>>    Function ComHasChildWithTag String lltagPath Returns Integer
60931>>>        Handle hDispatchDriver
60931>>>        Integer retVal
60931>>>        Get phDispatchDriver to hDispatchDriver
60932>>>        Send PrepareParams to hDispatchDriver 1
60933>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60934>>>        Get InvokeComMethod of hDispatchDriver 171 OLE_VT_I4 to retVal
60935>>>        Function_Return retVal
60936>>>    End_Function
60937>>>
60937>>>    Function ComHasChildWithTagAndContent String lltagPath String llContent Returns Integer
60939>>>        Handle hDispatchDriver
60939>>>        Integer retVal
60939>>>        Get phDispatchDriver to hDispatchDriver
60940>>>        Send PrepareParams to hDispatchDriver 2
60941>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60942>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
60943>>>        Get InvokeComMethod of hDispatchDriver 172 OLE_VT_I4 to retVal
60944>>>        Function_Return retVal
60945>>>    End_Function
60946>>>
60946>>>    Procedure ComInsertChildTreeAfter Integer llindex Variant lltree
60948>>>        Handle hDispatchDriver
60948>>>        Get phDispatchDriver to hDispatchDriver
60949>>>        Send PrepareParams to hDispatchDriver 2
60950>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60951>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH lltree
60952>>>        Send InvokeComMethod to hDispatchDriver 173 OLE_VT_VOID
60953>>>    End_Procedure
60954>>>
60954>>>    Procedure ComInsertChildTreeBefore Integer llindex Variant lltree
60956>>>        Handle hDispatchDriver
60956>>>        Get phDispatchDriver to hDispatchDriver
60957>>>        Send PrepareParams to hDispatchDriver 2
60958>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60959>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH lltree
60960>>>        Send InvokeComMethod to hDispatchDriver 174 OLE_VT_VOID
60961>>>    End_Procedure
60962>>>
60962>>>    Function ComLastChild Returns Variant
60964>>>        Handle hDispatchDriver
60964>>>        Variant retVal
60964>>>        Get phDispatchDriver to hDispatchDriver
60965>>>        Get InvokeComMethod of hDispatchDriver 175 OLE_VT_DISPATCH to retVal
60966>>>        Function_Return retVal
60967>>>    End_Function
60968>>>
60968>>>    Function ComLastChild2 Returns Integer
60970>>>        Handle hDispatchDriver
60970>>>        Integer retVal
60970>>>        Get phDispatchDriver to hDispatchDriver
60971>>>        Get InvokeComMethod of hDispatchDriver 176 OLE_VT_I4 to retVal
60972>>>        Function_Return retVal
60973>>>    End_Function
60974>>>
60974>>>    Function ComLoadXml String llxmlData Returns Integer
60976>>>        Handle hDispatchDriver
60976>>>        Integer retVal
60976>>>        Get phDispatchDriver to hDispatchDriver
60977>>>        Send PrepareParams to hDispatchDriver 1
60978>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llxmlData
60979>>>        Get InvokeComMethod of hDispatchDriver 177 OLE_VT_I4 to retVal
60980>>>        Function_Return retVal
60981>>>    End_Function
60982>>>
60982>>>    Function ComLoadXml2 String llxmlData Integer llautoTrim Returns Integer
60984>>>        Handle hDispatchDriver
60984>>>        Integer retVal
60984>>>        Get phDispatchDriver to hDispatchDriver
60985>>>        Send PrepareParams to hDispatchDriver 2
60986>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llxmlData
60987>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoTrim
60988>>>        Get InvokeComMethod of hDispatchDriver 178 OLE_VT_I4 to retVal
60989>>>        Function_Return retVal
60990>>>    End_Function
60991>>>
60991>>>    Function ComLoadXmlFile String llfilename Returns Integer
60993>>>        Handle hDispatchDriver
60993>>>        Integer retVal
60993>>>        Get phDispatchDriver to hDispatchDriver
60994>>>        Send PrepareParams to hDispatchDriver 1
60995>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
60996>>>        Get InvokeComMethod of hDispatchDriver 179 OLE_VT_I4 to retVal
60997>>>        Function_Return retVal
60998>>>    End_Function
60999>>>
60999>>>    Function ComLoadXmlFile2 String llfilename Integer llautoTrim Returns Integer
61001>>>        Handle hDispatchDriver
61001>>>        Integer retVal
61001>>>        Get phDispatchDriver to hDispatchDriver
61002>>>        Send PrepareParams to hDispatchDriver 2
61003>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
61004>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoTrim
61005>>>        Get InvokeComMethod of hDispatchDriver 180 OLE_VT_I4 to retVal
61006>>>        Function_Return retVal
61007>>>    End_Function
61008>>>
61008>>>    Function ComNewChild String lltagPath String llContent Returns Variant
61010>>>        Handle hDispatchDriver
61010>>>        Variant retVal
61010>>>        Get phDispatchDriver to hDispatchDriver
61011>>>        Send PrepareParams to hDispatchDriver 2
61012>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61013>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
61014>>>        Get InvokeComMethod of hDispatchDriver 181 OLE_VT_DISPATCH to retVal
61015>>>        Function_Return retVal
61016>>>    End_Function
61017>>>
61017>>>    Procedure ComNewChild2 String lltagPath String llContent
61019>>>        Handle hDispatchDriver
61019>>>        Get phDispatchDriver to hDispatchDriver
61020>>>        Send PrepareParams to hDispatchDriver 2
61021>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61022>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
61023>>>        Send InvokeComMethod to hDispatchDriver 182 OLE_VT_VOID
61024>>>    End_Procedure
61025>>>
61025>>>    Function ComNewChildAfter Integer llindex String llTag String llContent Returns Variant
61027>>>        Handle hDispatchDriver
61027>>>        Variant retVal
61027>>>        Get phDispatchDriver to hDispatchDriver
61028>>>        Send PrepareParams to hDispatchDriver 3
61029>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
61030>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61031>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
61032>>>        Get InvokeComMethod of hDispatchDriver 183 OLE_VT_DISPATCH to retVal
61033>>>        Function_Return retVal
61034>>>    End_Function
61035>>>
61035>>>    Function ComNewChildBefore Integer llindex String llTag String llContent Returns Variant
61037>>>        Handle hDispatchDriver
61037>>>        Variant retVal
61037>>>        Get phDispatchDriver to hDispatchDriver
61038>>>        Send PrepareParams to hDispatchDriver 3
61039>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
61040>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61041>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
61042>>>        Get InvokeComMethod of hDispatchDriver 184 OLE_VT_DISPATCH to retVal
61043>>>        Function_Return retVal
61044>>>    End_Function
61045>>>
61045>>>    Procedure ComNewChildInt2 String lltagPath Integer llvalue
61047>>>        Handle hDispatchDriver
61047>>>        Get phDispatchDriver to hDispatchDriver
61048>>>        Send PrepareParams to hDispatchDriver 2
61049>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61050>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
61051>>>        Send InvokeComMethod to hDispatchDriver 185 OLE_VT_VOID
61052>>>    End_Procedure
61053>>>
61053>>>    Function ComNextSibling Returns Variant
61055>>>        Handle hDispatchDriver
61055>>>        Variant retVal
61055>>>        Get phDispatchDriver to hDispatchDriver
61056>>>        Get InvokeComMethod of hDispatchDriver 186 OLE_VT_DISPATCH to retVal
61057>>>        Function_Return retVal
61058>>>    End_Function
61059>>>
61059>>>    Function ComNextSibling2 Returns Integer
61061>>>        Handle hDispatchDriver
61061>>>        Integer retVal
61061>>>        Get phDispatchDriver to hDispatchDriver
61062>>>        Get InvokeComMethod of hDispatchDriver 187 OLE_VT_I4 to retVal
61063>>>        Function_Return retVal
61064>>>    End_Function
61065>>>
61065>>>    Function ComNumChildrenHavingTag String llTag Returns Integer
61067>>>        Handle hDispatchDriver
61067>>>        Integer retVal
61067>>>        Get phDispatchDriver to hDispatchDriver
61068>>>        Send PrepareParams to hDispatchDriver 1
61069>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61070>>>        Get InvokeComMethod of hDispatchDriver 188 OLE_VT_I4 to retVal
61071>>>        Function_Return retVal
61072>>>    End_Function
61073>>>
61073>>>    Function ComPreviousSibling Returns Variant
61075>>>        Handle hDispatchDriver
61075>>>        Variant retVal
61075>>>        Get phDispatchDriver to hDispatchDriver
61076>>>        Get InvokeComMethod of hDispatchDriver 189 OLE_VT_DISPATCH to retVal
61077>>>        Function_Return retVal
61078>>>    End_Function
61079>>>
61079>>>    Function ComPreviousSibling2 Returns Integer
61081>>>        Handle hDispatchDriver
61081>>>        Integer retVal
61081>>>        Get phDispatchDriver to hDispatchDriver
61082>>>        Get InvokeComMethod of hDispatchDriver 190 OLE_VT_I4 to retVal
61083>>>        Function_Return retVal
61084>>>    End_Function
61085>>>
61085>>>    Function ComQEncodeContent String llcharset Variant llinData Returns Integer
61087>>>        Handle hDispatchDriver
61087>>>        Integer retVal
61087>>>        Get phDispatchDriver to hDispatchDriver
61088>>>        Send PrepareParams to hDispatchDriver 2
61089>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcharset
61090>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llinData
61091>>>        Get InvokeComMethod of hDispatchDriver 191 OLE_VT_I4 to retVal
61092>>>        Function_Return retVal
61093>>>    End_Function
61094>>>
61094>>>    Function ComRemoveAllAttributes Returns Integer
61096>>>        Handle hDispatchDriver
61096>>>        Integer retVal
61096>>>        Get phDispatchDriver to hDispatchDriver
61097>>>        Get InvokeComMethod of hDispatchDriver 192 OLE_VT_I4 to retVal
61098>>>        Function_Return retVal
61099>>>    End_Function
61100>>>
61100>>>    Procedure ComRemoveAllChildren
61102>>>        Handle hDispatchDriver
61102>>>        Get phDispatchDriver to hDispatchDriver
61103>>>        Send InvokeComMethod to hDispatchDriver 193 OLE_VT_VOID
61104>>>    End_Procedure
61105>>>
61105>>>    Function ComRemoveAttribute String llname Returns Integer
61107>>>        Handle hDispatchDriver
61107>>>        Integer retVal
61107>>>        Get phDispatchDriver to hDispatchDriver
61108>>>        Send PrepareParams to hDispatchDriver 1
61109>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
61110>>>        Get InvokeComMethod of hDispatchDriver 194 OLE_VT_I4 to retVal
61111>>>        Function_Return retVal
61112>>>    End_Function
61113>>>
61113>>>    Procedure ComRemoveChild String lltagPath
61115>>>        Handle hDispatchDriver
61115>>>        Get phDispatchDriver to hDispatchDriver
61116>>>        Send PrepareParams to hDispatchDriver 1
61117>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61118>>>        Send InvokeComMethod to hDispatchDriver 195 OLE_VT_VOID
61119>>>    End_Procedure
61120>>>
61120>>>    Procedure ComRemoveChildByIndex Integer llindex
61122>>>        Handle hDispatchDriver
61122>>>        Get phDispatchDriver to hDispatchDriver
61123>>>        Send PrepareParams to hDispatchDriver 1
61124>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
61125>>>        Send InvokeComMethod to hDispatchDriver 196 OLE_VT_VOID
61126>>>    End_Procedure
61127>>>
61127>>>    Procedure ComRemoveChildWithContent String llContent
61129>>>        Handle hDispatchDriver
61129>>>        Get phDispatchDriver to hDispatchDriver
61130>>>        Send PrepareParams to hDispatchDriver 1
61131>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
61132>>>        Send InvokeComMethod to hDispatchDriver 197 OLE_VT_VOID
61133>>>    End_Procedure
61134>>>
61134>>>    Procedure ComRemoveFromTree
61136>>>        Handle hDispatchDriver
61136>>>        Get phDispatchDriver to hDispatchDriver
61137>>>        Send InvokeComMethod to hDispatchDriver 198 OLE_VT_VOID
61138>>>    End_Procedure
61139>>>
61139>>>    Function ComSaveBinaryContent String llfilename Integer llunzipFlag Integer lldecryptFlag String llpassword Returns Integer
61141>>>        Handle hDispatchDriver
61141>>>        Integer retVal
61141>>>        Get phDispatchDriver to hDispatchDriver
61142>>>        Send PrepareParams to hDispatchDriver 4
61143>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
61144>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llunzipFlag
61145>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldecryptFlag
61146>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
61147>>>        Get InvokeComMethod of hDispatchDriver 199 OLE_VT_I4 to retVal
61148>>>        Function_Return retVal
61149>>>    End_Function
61150>>>
61150>>>    Function ComSaveXml String llfilename Returns Integer
61152>>>        Handle hDispatchDriver
61152>>>        Integer retVal
61152>>>        Get phDispatchDriver to hDispatchDriver
61153>>>        Send PrepareParams to hDispatchDriver 1
61154>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
61155>>>        Get InvokeComMethod of hDispatchDriver 200 OLE_VT_I4 to retVal
61156>>>        Function_Return retVal
61157>>>    End_Function
61158>>>
61158>>>    Function ComSearchAllForContent Variant llafterPtr String llcontentPattern Returns Variant
61160>>>        Handle hDispatchDriver
61160>>>        Variant retVal
61160>>>        Get phDispatchDriver to hDispatchDriver
61161>>>        Send PrepareParams to hDispatchDriver 2
61162>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61163>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
61164>>>        Get InvokeComMethod of hDispatchDriver 201 OLE_VT_DISPATCH to retVal
61165>>>        Function_Return retVal
61166>>>    End_Function
61167>>>
61167>>>    Function ComSearchAllForContent2 Variant llafterPtr String llcontentPattern Returns Integer
61169>>>        Handle hDispatchDriver
61169>>>        Integer retVal
61169>>>        Get phDispatchDriver to hDispatchDriver
61170>>>        Send PrepareParams to hDispatchDriver 2
61171>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61172>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
61173>>>        Get InvokeComMethod of hDispatchDriver 202 OLE_VT_I4 to retVal
61174>>>        Function_Return retVal
61175>>>    End_Function
61176>>>
61176>>>    Function ComSearchForAttribute Variant llafterPtr String llTag String llattr String llvaluePattern Returns Variant
61178>>>        Handle hDispatchDriver
61178>>>        Variant retVal
61178>>>        Get phDispatchDriver to hDispatchDriver
61179>>>        Send PrepareParams to hDispatchDriver 4
61180>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61181>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61182>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattr
61183>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvaluePattern
61184>>>        Get InvokeComMethod of hDispatchDriver 203 OLE_VT_DISPATCH to retVal
61185>>>        Function_Return retVal
61186>>>    End_Function
61187>>>
61187>>>    Function ComSearchForAttribute2 Variant llafterPtr String llTag String llattr String llvaluePattern Returns Integer
61189>>>        Handle hDispatchDriver
61189>>>        Integer retVal
61189>>>        Get phDispatchDriver to hDispatchDriver
61190>>>        Send PrepareParams to hDispatchDriver 4
61191>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61192>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61193>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattr
61194>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvaluePattern
61195>>>        Get InvokeComMethod of hDispatchDriver 204 OLE_VT_I4 to retVal
61196>>>        Function_Return retVal
61197>>>    End_Function
61198>>>
61198>>>    Function ComSearchForContent Variant llafterPtr String llTag String llcontentPattern Returns Variant
61200>>>        Handle hDispatchDriver
61200>>>        Variant retVal
61200>>>        Get phDispatchDriver to hDispatchDriver
61201>>>        Send PrepareParams to hDispatchDriver 3
61202>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61203>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61204>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
61205>>>        Get InvokeComMethod of hDispatchDriver 205 OLE_VT_DISPATCH to retVal
61206>>>        Function_Return retVal
61207>>>    End_Function
61208>>>
61208>>>    Function ComSearchForContent2 Variant llafterPtr String llTag String llcontentPattern Returns Integer
61210>>>        Handle hDispatchDriver
61210>>>        Integer retVal
61210>>>        Get phDispatchDriver to hDispatchDriver
61211>>>        Send PrepareParams to hDispatchDriver 3
61212>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61213>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61214>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
61215>>>        Get InvokeComMethod of hDispatchDriver 206 OLE_VT_I4 to retVal
61216>>>        Function_Return retVal
61217>>>    End_Function
61218>>>
61218>>>    Function ComSearchForTag Variant llafterPtr String llTag Returns Variant
61220>>>        Handle hDispatchDriver
61220>>>        Variant retVal
61220>>>        Get phDispatchDriver to hDispatchDriver
61221>>>        Send PrepareParams to hDispatchDriver 2
61222>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61223>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61224>>>        Get InvokeComMethod of hDispatchDriver 207 OLE_VT_DISPATCH to retVal
61225>>>        Function_Return retVal
61226>>>    End_Function
61227>>>
61227>>>    Function ComSearchForTag2 Variant llafterPtr String llTag Returns Integer
61229>>>        Handle hDispatchDriver
61229>>>        Integer retVal
61229>>>        Get phDispatchDriver to hDispatchDriver
61230>>>        Send PrepareParams to hDispatchDriver 2
61231>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61232>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61233>>>        Get InvokeComMethod of hDispatchDriver 208 OLE_VT_I4 to retVal
61234>>>        Function_Return retVal
61235>>>    End_Function
61236>>>
61236>>>    Function ComSetBinaryContent Variant llinData Integer llzipFlag Integer llencryptFlag String llpassword Returns Integer
61238>>>        Handle hDispatchDriver
61238>>>        Integer retVal
61238>>>        Get phDispatchDriver to hDispatchDriver
61239>>>        Send PrepareParams to hDispatchDriver 4
61240>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llinData
61241>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llzipFlag
61242>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llencryptFlag
61243>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
61244>>>        Get InvokeComMethod of hDispatchDriver 209 OLE_VT_I4 to retVal
61245>>>        Function_Return retVal
61246>>>    End_Function
61247>>>
61247>>>    Function ComSetBinaryContentFromFile String llfilename Integer llzipFlag Integer llencryptFlag String llpassword Returns Integer
61249>>>        Handle hDispatchDriver
61249>>>        Integer retVal
61249>>>        Get phDispatchDriver to hDispatchDriver
61250>>>        Send PrepareParams to hDispatchDriver 4
61251>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
61252>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llzipFlag
61253>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llencryptFlag
61254>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
61255>>>        Get InvokeComMethod of hDispatchDriver 210 OLE_VT_I4 to retVal
61256>>>        Function_Return retVal
61257>>>    End_Function
61258>>>
61258>>>    Procedure ComSortByAttribute String llattrName Integer llascending
61260>>>        Handle hDispatchDriver
61260>>>        Get phDispatchDriver to hDispatchDriver
61261>>>        Send PrepareParams to hDispatchDriver 2
61262>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
61263>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61264>>>        Send InvokeComMethod to hDispatchDriver 211 OLE_VT_VOID
61265>>>    End_Procedure
61266>>>
61266>>>    Procedure ComSortByAttributeInt String llattrName Integer llascending
61268>>>        Handle hDispatchDriver
61268>>>        Get phDispatchDriver to hDispatchDriver
61269>>>        Send PrepareParams to hDispatchDriver 2
61270>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
61271>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61272>>>        Send InvokeComMethod to hDispatchDriver 212 OLE_VT_VOID
61273>>>    End_Procedure
61274>>>
61274>>>    Procedure ComSortByContent Integer llascending
61276>>>        Handle hDispatchDriver
61276>>>        Get phDispatchDriver to hDispatchDriver
61277>>>        Send PrepareParams to hDispatchDriver 1
61278>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61279>>>        Send InvokeComMethod to hDispatchDriver 213 OLE_VT_VOID
61280>>>    End_Procedure
61281>>>
61281>>>    Procedure ComSortByTag Integer llascending
61283>>>        Handle hDispatchDriver
61283>>>        Get phDispatchDriver to hDispatchDriver
61284>>>        Send PrepareParams to hDispatchDriver 1
61285>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61286>>>        Send InvokeComMethod to hDispatchDriver 214 OLE_VT_VOID
61287>>>    End_Procedure
61288>>>
61288>>>    Procedure ComSortRecordsByAttribute String llsortTag String llattrName Integer llascending
61290>>>        Handle hDispatchDriver
61290>>>        Get phDispatchDriver to hDispatchDriver
61291>>>        Send PrepareParams to hDispatchDriver 3
61292>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsortTag
61293>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
61294>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61295>>>        Send InvokeComMethod to hDispatchDriver 215 OLE_VT_VOID
61296>>>    End_Procedure
61297>>>
61297>>>    Procedure ComSortRecordsByContent String llsortTag Integer llascending
61299>>>        Handle hDispatchDriver
61299>>>        Get phDispatchDriver to hDispatchDriver
61300>>>        Send PrepareParams to hDispatchDriver 2
61301>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsortTag
61302>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61303>>>        Send InvokeComMethod to hDispatchDriver 216 OLE_VT_VOID
61304>>>    End_Procedure
61305>>>
61305>>>    Procedure ComSortRecordsByContentInt String llsortTag Integer llascending
61307>>>        Handle hDispatchDriver
61307>>>        Get phDispatchDriver to hDispatchDriver
61308>>>        Send PrepareParams to hDispatchDriver 2
61309>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsortTag
61310>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61311>>>        Send InvokeComMethod to hDispatchDriver 217 OLE_VT_VOID
61312>>>    End_Procedure
61313>>>
61313>>>    Function ComSwapNode Variant llnode Returns Integer
61315>>>        Handle hDispatchDriver
61315>>>        Integer retVal
61315>>>        Get phDispatchDriver to hDispatchDriver
61316>>>        Send PrepareParams to hDispatchDriver 1
61317>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llnode
61318>>>        Get InvokeComMethod of hDispatchDriver 218 OLE_VT_I4 to retVal
61319>>>        Function_Return retVal
61320>>>    End_Function
61321>>>
61321>>>    Function ComSwapTree Variant lltree Returns Integer
61323>>>        Handle hDispatchDriver
61323>>>        Integer retVal
61323>>>        Get phDispatchDriver to hDispatchDriver
61324>>>        Send PrepareParams to hDispatchDriver 1
61325>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH lltree
61326>>>        Get InvokeComMethod of hDispatchDriver 219 OLE_VT_I4 to retVal
61327>>>        Function_Return retVal
61328>>>    End_Function
61329>>>
61329>>>    Function ComTagContent String lltagName Returns String
61331>>>        Handle hDispatchDriver
61331>>>        String retVal
61331>>>        Get phDispatchDriver to hDispatchDriver
61332>>>        Send PrepareParams to hDispatchDriver 1
61333>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagName
61334>>>        Get InvokeComMethod of hDispatchDriver 220 OLE_VT_BSTR to retVal
61335>>>        Function_Return retVal
61336>>>    End_Function
61337>>>
61337>>>    Function ComTagEquals String llTag Returns Integer
61339>>>        Handle hDispatchDriver
61339>>>        Integer retVal
61339>>>        Get phDispatchDriver to hDispatchDriver
61340>>>        Send PrepareParams to hDispatchDriver 1
61341>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61342>>>        Get InvokeComMethod of hDispatchDriver 221 OLE_VT_I4 to retVal
61343>>>        Function_Return retVal
61344>>>    End_Function
61345>>>
61345>>>    Function ComUnzipContent Returns Integer
61347>>>        Handle hDispatchDriver
61347>>>        Integer retVal
61347>>>        Get phDispatchDriver to hDispatchDriver
61348>>>        Get InvokeComMethod of hDispatchDriver 222 OLE_VT_I4 to retVal
61349>>>        Function_Return retVal
61350>>>    End_Function
61351>>>
61351>>>    Function ComUnzipTree Returns Integer
61353>>>        Handle hDispatchDriver
61353>>>        Integer retVal
61353>>>        Get phDispatchDriver to hDispatchDriver
61354>>>        Get InvokeComMethod of hDispatchDriver 223 OLE_VT_I4 to retVal
61355>>>        Function_Return retVal
61356>>>    End_Function
61357>>>
61357>>>    Function ComUpdateAttribute String llattrName String llattrValue Returns Integer
61359>>>        Handle hDispatchDriver
61359>>>        Integer retVal
61359>>>        Get phDispatchDriver to hDispatchDriver
61360>>>        Send PrepareParams to hDispatchDriver 2
61361>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
61362>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrValue
61363>>>        Get InvokeComMethod of hDispatchDriver 224 OLE_VT_I4 to retVal
61364>>>        Function_Return retVal
61365>>>    End_Function
61366>>>
61366>>>    Function ComUpdateAttributeInt String llattrName Integer llvalue Returns Integer
61368>>>        Handle hDispatchDriver
61368>>>        Integer retVal
61368>>>        Get phDispatchDriver to hDispatchDriver
61369>>>        Send PrepareParams to hDispatchDriver 2
61370>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
61371>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
61372>>>        Get InvokeComMethod of hDispatchDriver 225 OLE_VT_I4 to retVal
61373>>>        Function_Return retVal
61374>>>    End_Function
61375>>>
61375>>>    Procedure ComUpdateChildContent String lltagPath String llvalue
61377>>>        Handle hDispatchDriver
61377>>>        Get phDispatchDriver to hDispatchDriver
61378>>>        Send PrepareParams to hDispatchDriver 2
61379>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61380>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
61381>>>        Send InvokeComMethod to hDispatchDriver 226 OLE_VT_VOID
61382>>>    End_Procedure
61383>>>
61383>>>    Procedure ComUpdateChildContentInt String lltagPath Integer llvalue
61385>>>        Handle hDispatchDriver
61385>>>        Get phDispatchDriver to hDispatchDriver
61386>>>        Send PrepareParams to hDispatchDriver 2
61387>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61388>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
61389>>>        Send InvokeComMethod to hDispatchDriver 227 OLE_VT_VOID
61390>>>    End_Procedure
61391>>>
61391>>>    Function ComZipContent Returns Integer
61393>>>        Handle hDispatchDriver
61393>>>        Integer retVal
61393>>>        Get phDispatchDriver to hDispatchDriver
61394>>>        Get InvokeComMethod of hDispatchDriver 228 OLE_VT_I4 to retVal
61395>>>        Function_Return retVal
61396>>>    End_Function
61397>>>
61397>>>    Function ComZipTree Returns Integer
61399>>>        Handle hDispatchDriver
61399>>>        Integer retVal
61399>>>        Get phDispatchDriver to hDispatchDriver
61400>>>        Get InvokeComMethod of hDispatchDriver 229 OLE_VT_I4 to retVal
61401>>>        Function_Return retVal
61402>>>    End_Function
61403>>>
61403>>>    Function ComEmitBom Returns Integer
61405>>>        Handle hDispatchDriver
61405>>>        Integer retVal
61405>>>        Get phDispatchDriver to hDispatchDriver
61406>>>        Get InvokeComMethod of hDispatchDriver 237 OLE_VT_I4 to retVal
61407>>>        Function_Return retVal
61408>>>    End_Function
61409>>>
61409>>>    Procedure Set ComEmitBom Integer value
61411>>>        Handle hDispatchDriver
61411>>>        Get phDispatchDriver to hDispatchDriver
61412>>>        Send PrepareParams to hDispatchDriver 1
61413>>>        Set ComProperty of hDispatchDriver 237 OLE_VT_I4 to value
61414>>>    End_Procedure
61415>>>
61415>>>    Function ComLoadSb Variant llsb Integer llautoTrim Returns Integer
61417>>>        Handle hDispatchDriver
61417>>>        Integer retVal
61417>>>        Get phDispatchDriver to hDispatchDriver
61418>>>        Send PrepareParams to hDispatchDriver 2
61419>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llsb
61420>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoTrim
61421>>>        Get InvokeComMethod of hDispatchDriver 238 OLE_VT_I4 to retVal
61422>>>        Function_Return retVal
61423>>>    End_Function
61424>>>
61424>>>    Function ComGetXmlSb Variant llsb Returns Integer
61426>>>        Handle hDispatchDriver
61426>>>        Integer retVal
61426>>>        Get phDispatchDriver to hDispatchDriver
61427>>>        Send PrepareParams to hDispatchDriver 1
61428>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llsb
61429>>>        Get InvokeComMethod of hDispatchDriver 239 OLE_VT_I4 to retVal
61430>>>        Function_Return retVal
61431>>>    End_Function
61432>>>
61432>>>    Function ComI Returns Integer
61434>>>        Handle hDispatchDriver
61434>>>        Integer retVal
61434>>>        Get phDispatchDriver to hDispatchDriver
61435>>>        Get InvokeComMethod of hDispatchDriver 240 OLE_VT_I4 to retVal
61436>>>        Function_Return retVal
61437>>>    End_Function
61438>>>
61438>>>    Procedure Set ComI Integer value
61440>>>        Handle hDispatchDriver
61440>>>        Get phDispatchDriver to hDispatchDriver
61441>>>        Send PrepareParams to hDispatchDriver 1
61442>>>        Set ComProperty of hDispatchDriver 240 OLE_VT_I4 to value
61443>>>    End_Procedure
61444>>>
61444>>>    Function ComJ Returns Integer
61446>>>        Handle hDispatchDriver
61446>>>        Integer retVal
61446>>>        Get phDispatchDriver to hDispatchDriver
61447>>>        Get InvokeComMethod of hDispatchDriver 241 OLE_VT_I4 to retVal
61448>>>        Function_Return retVal
61449>>>    End_Function
61450>>>
61450>>>    Procedure Set ComJ Integer value
61452>>>        Handle hDispatchDriver
61452>>>        Get phDispatchDriver to hDispatchDriver
61453>>>        Send PrepareParams to hDispatchDriver 1
61454>>>        Set ComProperty of hDispatchDriver 241 OLE_VT_I4 to value
61455>>>    End_Procedure
61456>>>
61456>>>    Function ComK Returns Integer
61458>>>        Handle hDispatchDriver
61458>>>        Integer retVal
61458>>>        Get phDispatchDriver to hDispatchDriver
61459>>>        Get InvokeComMethod of hDispatchDriver 242 OLE_VT_I4 to retVal
61460>>>        Function_Return retVal
61461>>>    End_Function
61462>>>
61462>>>    Procedure Set ComK Integer value
61464>>>        Handle hDispatchDriver
61464>>>        Get phDispatchDriver to hDispatchDriver
61465>>>        Send PrepareParams to hDispatchDriver 1
61466>>>        Set ComProperty of hDispatchDriver 242 OLE_VT_I4 to value
61467>>>    End_Procedure
61468>>>
61468>>>    Function ComNumChildrenAt String lltagPath Returns Integer
61470>>>        Handle hDispatchDriver
61470>>>        Integer retVal
61470>>>        Get phDispatchDriver to hDispatchDriver
61471>>>        Send PrepareParams to hDispatchDriver 1
61472>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61473>>>        Get InvokeComMethod of hDispatchDriver 243 OLE_VT_I4 to retVal
61474>>>        Function_Return retVal
61475>>>    End_Function
61476>>>
61476>>>    Function ComUpdateAt String lltagPath Integer llautoCreate String llvalue Returns Integer
61478>>>        Handle hDispatchDriver
61478>>>        Integer retVal
61478>>>        Get phDispatchDriver to hDispatchDriver
61479>>>        Send PrepareParams to hDispatchDriver 3
61480>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61481>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoCreate
61482>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
61483>>>        Get InvokeComMethod of hDispatchDriver 244 OLE_VT_I4 to retVal
61484>>>        Function_Return retVal
61485>>>    End_Function
61486>>>
61486>>>    Function ComUpdateAttrAt String lltagPath Integer llautoCreate String llattrName String llattrValue Returns Integer
61488>>>        Handle hDispatchDriver
61488>>>        Integer retVal
61488>>>        Get phDispatchDriver to hDispatchDriver
61489>>>        Send PrepareParams to hDispatchDriver 4
61490>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61491>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoCreate
61492>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
61493>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrValue
61494>>>        Get InvokeComMethod of hDispatchDriver 245 OLE_VT_I4 to retVal
61495>>>        Function_Return retVal
61496>>>    End_Function
61497>>>
61497>>>    Function ComEmitCompact Returns Integer
61499>>>        Handle hDispatchDriver
61499>>>        Integer retVal
61499>>>        Get phDispatchDriver to hDispatchDriver
61500>>>        Get InvokeComMethod of hDispatchDriver 246 OLE_VT_I4 to retVal
61501>>>        Function_Return retVal
61502>>>    End_Function
61503>>>
61503>>>    Procedure Set ComEmitCompact Integer value
61505>>>        Handle hDispatchDriver
61505>>>        Get phDispatchDriver to hDispatchDriver
61506>>>        Send PrepareParams to hDispatchDriver 1
61507>>>        Set ComProperty of hDispatchDriver 246 OLE_VT_I4 to value
61508>>>    End_Procedure
61509>>>End_Class
61510>>>
61510>>>// CoClass
61510>>>// ProgID: Chilkat_9_5_0.Xml.1
61510>>>// CLSID: {501B9600-382D-454D-AA0A-3BC22A87C485}
61510>>>// ChilkatXml Class 9.5.0
61510>>>Class cComChilkatXml is a cComActiveXControl
61511>>>    Import_Class_Protocol cComIChilkatXml
61512>>>
61512>>>    Procedure Construct_Object
61514>>>        Forward Send Construct_Object
61516>>>        Set psProgID to "{501B9600-382D-454D-AA0A-3BC22A87C485}"
61517>>>        Set peAutoCreate to acAutoCreate
61518>>>    End_Procedure
61519>>>End_Class
61520>
61520>Object oApplication is a cApplication
61522>    Set psCompany to "RDC Tools International"
61523>    Set psProduct to "Driver Info Import"
61524>    Set psProgram to "Read DF Driver Def XML file"
61525>    Set psVersion to "2023"
61526>    Property String psCompileDateAndTime
61528>End_Object
61529>
61529>Object oMainPanel is a BasicPanel
61531>    Set Location to 59 173
61532>    Set Size to 180 394
61533>    Set piMinSize to 180 394
61534>    Set Border_Style to Border_Thick
61535>    Set Locate_Mode to Center_On_Screen
61536>    Set Label to "Read DF Driver Def XML file - Internal Usage Only!"
61537>    Set Maximize_Icon to False
61538>    Set peNeighborhood to nhPublic
61539>    
61539>    // Struct array to keep driver XML file Data Types read by the ReadXMLDriverData message.
61539>    // Then used by the WriteXMLDriverTypeData message to write them to file.
61539>    Property tColumnType[] paColumnType
61541>
61541>    Object oCommandBarSystem is a cCJCommandBarSystem
61543>        Set pbAutoResizeIcons to True
61544>        Move Self to ghoCommandBars
61545>    End_Object                  
61546>    
61546>    Object oDbUpdateFunctionLibrary is a cDbUpdateFunctionLibrary
61548>    End_Object
61549>
61549>    Object oReadXMLFile_grp is a cRDCHeaderGroup
61551>        Set Size to 67 360
61552>        Set Location to 11 17
61553>        Set peAnchors to anTopLeftRight
61554>        Set psLabel to "Read Driver Def XML file" 
61555>        Set psImage to "ActionOpen1.ico"
61556>
61556>        Object oFileNameDialog is a OpenDialog
61558>            Set Dialog_Caption to "Select a Driver XML-file"
61559>            Set Filter_String to "XML Files (.xml)|*.xml|All files (*.*)|*.*"
61560>        End_Object
61561>
61561>        Object oDriverXMLFileName_fm is a Form
61563>            Set Size to 13 298
61564>            Set Location to 20 43
61565>            Set Label_Justification_Mode to JMode_Top
61566>            Set Label_Col_Offset to 0
61567>            Set Prompt_Button_Mode to PB_PromptOn
61568>            Set peAnchors to anTopLeftRight
61569>            Set Label_Row_Offset to 1
61570>
61570>            Procedure Prompt
61573>                Boolean bOk
61573>                String sPath sDrive sFileName
61573>
61573>                Get Value to sFileName
61574>                Move (Trim (sFileName)) to sFileName
61575>                If (sFileName <> "") Begin
61577>                    Move (Left(sFileName, 2))     to sDrive
61578>                    Get ParseFolderName sFileName to sPath
61579>                End
61579>                If (sPath <> "") Begin
61581>                    Set Initial_Folder of oFileNameDialog to (sDrive - sPath)
61582>                End
61582>
61582>                Get Show_Dialog of oFileNameDialog to bOk
61583>                If (bOk) Begin
61585>                    Get File_Name of oFileNameDialog to sFileName
61586>                    Set Value to sFileName
61587>                End
61587>            End_Procedure 
61588>            
61588>            Procedure OnChange
61591>                String sValue
61591>                
61591>                Get Value to sValue
61592>                If (sValue <> "") Begin
61594>                    Set psOutputFileName of oOutputFilename_fm to sValue
61595>                    
61595>                End
61595>            End_Procedure
61596>
61596>        End_Object
61597>
61597>        Object oDbType_cf is a cSQLComboForm
61599>            Set Size to 11 100
61600>            Set Location to 45 43
61601>            Set Label_Col_Offset to 0
61602>            Set Label to "DbType:"
61603>            Set Label_Justification_Mode to JMode_Top
61604>            Set Label_Row_Offset to 1
61605>            Set Label to "Database Type"
61606>            Set Entry_State to False
61607>            Set Combo_Sort_State to False
61608>            Set piItem to 3
61609>
61609>            Procedure Combo_Fill_List
61612>                Send Combo_Add_Item CS_dbTypeMSSQL
61613>                Send Combo_Add_Item CS_dbTypeMySQL
61614>                Send Combo_Add_Item CS_dbTypeOracle
61615>                Send Combo_Add_Item CS_dbTypeDB2
61616>                Send Combo_Add_Item CS_dbTypePostgre
61617>            End_Procedure
61618>
61618>            Procedure OnChange
61621>                Integer iDbType
61621>                Get SelectedDbType to iDbType
61622>                Send Refill_Comboform of oDriverID_cf iDbType
61623>            End_Procedure
61624>    
61624>            Function SelectedDbType Returns Integer
61627>                Integer iRetval
61627>                String sDbType
61627>                Get Value to sDbType
61628>                If (sDbType = "1") Begin
61630>                    Move CS_dbTypeMSSQL to sDbType
61631>                End
61631>                Get SqlUtilDbTypeToInteger of ghoDbUpdateFunctionLibrary sDbType to iRetval
61632>                Function_Return iRetval
61633>            End_Function
61634>
61634>        End_Object
61635>
61635>        Object oDriverID_cf is a cSQLComboForm
61637>            Set Size to 11 100
61638>            Set Location to 45 150
61639>            Set Label_Justification_Mode to JMode_Top
61640>            Set Label_Col_Offset to 0
61641>            Set Label_Row_Offset to 1
61642>            Set Label to "Driver ID:"
61643>            Set Entry_State to False
61644>            Set Combo_Sort_State to False
61645>            Set piItem to 4
61646>
61646>            Procedure Refill_Comboform Integer iDbType
61649>                String sValue
61649>                Send Combo_Delete_Data
61650>                Case Begin
61650>                    Case (iDbType = EN_dbTypeMSSQL)
61652>                        Send Combo_Add_Item MSSQLDRV_ID
61653>                        Move MSSQLDRV_ID to sValue
61654>                        Case Break
61655>                    Case (iDbType = EN_dbTypeMySQL)
61658>                        Send Combo_Add_Item ODBC_DRV_ID
61659>                        Move ODBC_DRV_ID to sValue
61660>                        Case Break
61661>                    Case (iDbType = EN_dbTypeOracle)
61664>                        Send Combo_Add_Item ODBC_DRV_ID
61665>                        Move ODBC_DRV_ID to sValue
61666>                        Case Break
61667>                    Case (iDbType = EN_dbTypeDB2)
61670>                        Send Combo_Add_Item DB2_DRV_ID
61671>                        Move DB2_DRV_ID to sValue
61672>                        Case Break
61673>                    Case (iDbType = EN_dbTypePostgre)
61676>                        Send Combo_Add_Item ODBC_DRV_ID
61677>                        Move ODBC_DRV_ID to sValue
61678>                        Case Break
61679>                    Case Else
61679>                        Send Combo_Add_Item DATAFLEX_ID
61680>                        Move DATAFLEX_ID to sValue
61681>                Case End
61681>                Set Value to sValue
61682>            End_Procedure
61683>
61683>            Procedure OnChange
61686>                String sDriverID
61686>                Integer iDbType iPos
61686>
61686>                Get Value to sDriverID
61687>                Move (Pos("-", sDriverID)) to iPos
61688>                Move (Left(sDriverID, (iPos - 2))) to sDriverID
61689>                If (sDriverID = "") Begin
61691>                    Move MSSQLDRV_ID to sDriverID
61692>                End
61692>                Get SelectedDbType of oDbType_cf to iDbType
61693>            End_Procedure
61694>            
61694>        End_Object
61695>
61695>        Object oOpenInEditor_btn is a Button
61697>            Set Size to 12 77
61698>            Set Location to 45 265
61699>            Set Label to "View in Editor"
61700>            Set peAnchors to anBottomRight
61701>
61701>            Procedure OnClick
61704>                String sFileName             
61704>                Boolean bExists
61704>                
61704>                Get Value of oDriverXMLFileName_fm to sFileName
61705>                Get vFilePathExists sFileName to bExists
61706>                If (bExists = False) Begin
61708>                    Send Info_Box "File doesn't exist"
61709>                    Procedure_Return
61710>                End
61710>                Runprogram Shell Background sFileName
61711>            End_Procedure
61712>
61712>        End_Object
61713>         
61713>    End_Object
61714>
61714>    Object oWriteResult_grp is a cRDCHeaderGroup
61716>        Set Size to 67 360
61717>        Set Location to 87 17
61718>        Set peAnchors to anTopLeftRight
61719>        Set psLabel to "Write Driver Data Types to Package Name:"
61720>        Set psImage to "ActionPrint1.ico"
61721>        
61721>        Object oOutputFilename_fm is a Form
61723>            Set Size to 13 298
61724>            Set Location to 20 43
61725>//            Set Label to "Output Package File Name:"
61725>            Set Label_Justification_Mode to JMode_Top
61726>            Set Label_Col_Offset to 0
61727>            Set Prompt_Button_Mode to PB_PromptOn
61728>            Set peAnchors to anTopLeftRight
61729>            Set Label_Row_Offset to 1
61730>
61730>            Procedure Prompt
61733>                String sFileName sPath sFileMask sRetval
61733>
61733>                Get Value to sFileName
61734>                Get ParseFolderName sFileName to sPath
61735>                Move "Include files (*.inc)|*.inc|Package files (*.pkg)|*.pkg" to sFileMask
61736>                Get vSelect_File sFileMask "Please enter a file name" sPath to sRetval
61737>                If (sRetval <> "") Begin
61739>                    Set Value to sRetval
61740>                End
61740>            End_Procedure
61741>
61741>            Procedure Set psOutputFileName String sXMLFileName
61744>                String sOutPutFileName sPath sExt
61744>                
61744>                Get psAppSrcPath of (phoWorkspace(ghoApplication)) to sPath
61745>                Get ParseFileName sXMLFileName to sOutPutFileName
61746>                Get ParseFileExtension sOutPutFileName to sExt
61747>                // We default to set the extension to an include file (.inc):
61747>                Move (Replace(sExt, sOutPutFileName, "inc")) to sOutPutFileName
61748>                Set Value to (sPath + "\" + sOutPutFileName)
61749>
61749>            End_Procedure
61750>
61750>        End_Object
61751>
61751>        Object oOpenInEditor_btn is a Button
61753>            Set Size to 12 77
61754>            Set Location to 45 265
61755>            Set Label to "View in Editor"
61756>            Set peAnchors to anBottomRight
61757>
61757>            Procedure OnClick
61760>                String sFileName             
61760>                Boolean bExists
61760>                
61760>                Get Value of oOutputFilename_fm to sFileName
61761>                Get vFilePathExists sFileName to bExists
61762>                If (bExists = False) Begin
61764>                    Send Info_Box "File doesn't exist"
61765>                    Procedure_Return
61766>                End
61766>                Runprogram Shell Background sFileName
61767>            End_Procedure
61768>        End_Object
61769>
61769>    End_Object
61770>
61770>    Object oReadButton is a Button
61772>        Set Size to 14 50
61773>        Set Location to 160 222
61774>        Set Label to "Read"
61775>        Set peAnchors to anBottomRight
61776>        Set Default_State to True
61777>
61777>        Procedure OnClick
61780>            String sFileName
61780>            Boolean bExists
61780>            
61780>            Get Value of oDriverXMLFileName_fm to sFileName
61781>            Get vFilePathExists sFileName to bExists
61782>            If (bExists = False) Begin
61784>                Procedure_Return
61785>            End
61785>
61785>            Send ReadXMLDriverData sFileName
61786>        End_Procedure
61787>
61787>    End_Object
61788>
61788>    Object oWriteButton is a Button
61790>        Set Size to 14 50
61791>        Set Location to 160 275
61792>        Set Label to "Write"
61793>        Set peAnchors to anBottomRight
61794>
61794>        Procedure OnClick
61797>            tColumnType[] aColumnType
61797>            tColumnType[] aColumnType
61798>            String sFileName sDriverXMLFile 
61798>            Boolean bExists          
61798>            
61798>            Get paColumnType to aColumnType
61799>            If (SizeOfArray(aColumnType) = 0) Begin
61801>                Send Info_Box "You need to read an XML driver file successfully first."
61802>                Procedure_Return
61803>            End
61803>            
61803>            Get Value of oDriverXMLFileName_fm to sDriverXMLFile
61804>            Get Value of oOutputFilename_fm to sFileName
61805>            If (sFileName = "") Begin
61807>                Send Info_Box "You need to specify an output file name first."
61808>                Procedure_Return
61809>            End
61809>            
61809>            Send WriteXMLDriverTypeData sFileName sDriverXMLFile aColumnType
61810>        End_Procedure
61811>
61811>    End_Object
61812>
61812>    Object oCloseButton is a Button
61814>        Set Size to 14 50
61815>        Set Location to 160 328
61816>        Set Label to "Exit"
61817>        Set peAnchors to anBottomRight
61818>
61818>        Procedure OnClick
61821>            Send Exit_Application
61822>        End_Procedure
61823>    End_Object
61824>
61824>    Procedure ReadXMLDriverData String sFileName
61827>        DateTime dtExecStart dtExecEnd
61827>        TimeSpan tsTotalTime
61827>        Handle hoXML hoRoot hoList hoBeginAfter hoName hoNextSibling
61827>        Integer iItems i iCount
61827>        Boolean bOK bExists
61827>        String  sNamespace sValue sError
61827>        Variant vRoot vChild vList vBeginAfter vName vNextSibling
61827>        tColumnType[] aColumnType
61827>        tColumnType[] aColumnType
61828>
61828>        Move (CurrentDateTime()) to dtExecStart
61829>        Set paColumnType to aColumnType
61830>
61830>        Get Create (RefClass(cComChilkatXml)) to hoXML
61831>        If (not(IsComObjectCreated(hoXml))) Begin
61833>            Send CreateComObject of hoXml
61834>        End
61834>
61834>        Get ComLoadXmlFile of hoXml sFileName to bOK
61835>        If (bOK <> True) Begin
61837>            Get ComLastErrorText of hoXML to sError
61838>            Send Info_Box ("Sorry, couldn't load the XML file. Error:\n" + sError)
61839>            Procedure_Return
61840>        End
61840>
61840>        Get ComGetSelf of hoXML to vBeginAfter
61841>        If (IsComObject(vBeginAfter)) Begin
61843>            Get Create (RefClass(cComChilkatXml)) to hoBeginAfter
61844>            Set pvComObject of hoBeginAfter to vBeginAfter
61845>        End
61845>
61845>        Get ComSearchForContent of hoXML vBeginAfter "name" "df_field_native_type" to vName
61846>        If (IsComObject(vName)) Begin
61848>            Get Create (RefClass(cComChilkatXml)) to hoName
61849>            Set pvComObject of hoName to vName
61850>        End
61850>        If (IsNullComObject(vName)) Begin
61852>            Send Info_Box 'The tag "df_field_native_type" not found. It is needed to enumerate data types.'
61853>            Procedure_Return
61854>        End
61854>        
61854>        // Get the parent object, from where we can continue searching:
61854>        Get ComGetParent of hoName to vRoot
61855>        If (IsComObject(vRoot)) Begin
61857>            Get Create (RefClass(cComChilkatXml)) to hoRoot
61858>            Set pvComObject of hoRoot to vRoot
61859>        End
61859>        
61859>        // Set baseline at parent level:
61859>        Get ComGetSelf of hoRoot to vBeginAfter
61860>        If (IsComObject(vBeginAfter)) Begin
61862>            Get Create (RefClass(cComChilkatXml)) to hoBeginAfter
61863>            Set pvComObject of hoBeginAfter to vBeginAfter
61864>        End
61864>
61864>        //  Navigate to the enumValues node:
61864>        Get ComSearchForTag of hoRoot vBeginAfter "enumValues" to vList
61865>        If (IsComObject(vList)) Begin
61867>            Get Create (RefClass(cComChilkatXml)) to hoList
61868>            Set pvComObject of hoList to vList
61869>        End
61869>        
61869>        // Set baseline at enum values start object:
61869>        Get ComGetSelf of hoList to vBeginAfter
61870>        If (IsComObject(vBeginAfter)) Begin
61872>            Get Create (RefClass(cComChilkatXml)) to hoBeginAfter
61873>            Set pvComObject of hoBeginAfter to vBeginAfter
61874>        End
61874>        
61874>        // Find the first "enumValue" enumeration:
61874>        Get ComNumChildren of hoList to iItems
61875>        Get ComSearchForTag2 of hoList vBeginAfter "enumValue" to bExists
61876>        If (bExists = False) Begin
61878>            Send Info_Box 'No "enumValue" found (!). Nothing to enumerate.'
61879>            Procedure_Return
61880>        End
61880>
61880>        Decrement iItems
61881>        For iCount from 0 to iItems
61887>            Send CollectDriverAttributes hoList
61888>
61888>            Get ComNextSibling of hoList to vNextSibling
61889>            If (IsComObject(vNextSibling)) Begin
61891>                Get Create (RefClass(cComChilkatXml)) to hoNextSibling
61892>                Set pvComObject of hoNextSibling to vNextSibling
61893>            End
61893>            Send Destroy of hoList
61894>            Move hoNextSibling to hoList
61895>        Loop
61896>
61896>        Send Destroy of hoRoot
61897>        Send Destroy of hoXML
61898>
61898>        Move (CurrentDateTime()) to dtExecEnd
61899>        Move (dtExecEnd - dtExecStart) to tsTotalTime
61900>        Send Info_Box ("Ready! Total Time:" * String(tsTotalTime))
61901>    End_Procedure
61902>
61902>    Procedure CollectDriverAttributes Handle hoDriverAttribute
61905>        tColumnType ColumnType
61905>        tColumnType ColumnType
61905>        tColumnType[] aColumnType
61905>        tColumnType[] aColumnType
61906>        Handle hoChild
61906>        Variant vChild
61906>
61906>        // If the value was a cDataSection it will be properly translated back
61906>        // to normal text for us.
61906>        Move True                                                   to ColumnType.bNativeDataType
61907>        Get ComGetChildContent of hoDriverAttribute "name"          to ColumnType.sSQLType
61908>        Get ComGetChildContent of hoDriverAttribute "id"            to ColumnType.iSQLType
61909>
61909>        Get ComGetChildWithTag of hoDriverAttribute "nativeTypeData" to vChild
61910>        If (IsComObject(vChild)) Begin
61912>            Get Create (RefClass(cComChilkatXml)) to hoChild
61913>            Set pvComObject of hoChild to vChild
61914>            Get ComGetChildContent of hoChild       "canEditSize"   to ColumnType.bCanEditSize
61915>            
61915>            // Some data types does not have a iDefaultSize, Min or Max size.
61915>            // Then denote "not defined" by a "-1":
61915>            Send Ignore_Error of Error_Object_Id DFERR_BAD_OPERATOR
61916>            Get ComGetChildContent of hoChild       "defaultSize"   to ColumnType.iDefaultSize
61917>            Send Trap_Error   of Error_Object_Id DFERR_BAD_OPERATOR
61918>            If (ColumnType.iDefaultSize = 0) Begin
61920>                Move    -1                                          to ColumnType.iDefaultSize
61921>            End
61921>            Get ComGetChildContent of hoChild       "minSize"       to ColumnType.iMinSize
61922>            If (ColumnType.iMinSize = 0) Begin
61924>                Move        -1                                      to ColumnType.iMinSize
61925>            End
61925>            Get ComGetChildContent of hoChild       "maxSize"       to ColumnType.nMaxSize
61926>            If (ColumnType.nMaxSize = 0) Begin
61928>                Move        -1                                      to ColumnType.nMaxSize
61929>            End
61929>            Send Destroy           of hoChild
61930>        End
61930>
61930>        Get paColumnType to aColumnType
61931>        Move ColumnType to aColumnType[SizeOfArray(aColumnType)]
61932>        // paColumnType is a Panel array struct property
61932>        Set paColumnType to aColumnType
61933>    End_Procedure  
61934>    
61934>    Function MakeStringLength String sValue Integer iReportColumnPos Returns String
61937>        Move (Pad(sValue, (Length(sValue) + (iReportColumnPos - Length(sValue))))) to sValue
61938>
61938>        Function_Return sValue
61939>    End_Function
61940>
61940>    Procedure WriteXMLDriverTypeData String sFileName String sDriverXMLFile tColumnType[] aColumnType
61943>        Integer iSize iCount iCh iDbType iDataFlexType
61943>        String sSpace sDriverID sDataFlexType sValue
61943>        DateTime dtExecStart dtExecEnd
61943>        
61943>        Get Seq_Open_Output_Channel sFileName to iCh
61944>        If (iCh = DF_SEQ_CHANNEL_ERROR) Begin
61946>            Send Info_Box "Could not get a free output channel number."
61947>            Procedure_Return
61948>        End                 
61948>        
61948>        Move (CurrentDateTime()) to dtExecStart
61949>        Get SelectedDbType of oDbType_cf   to iDbType
61950>        Get Value          of oDriverID_cf to sDriverID
61951>        Writeln channel iCh "/" "/ Generated By The Database Update Framework"
61955>        Writeln channel iCh "/" "/ Driver XML File: " sDriverXMLFile
61960>        Writeln channel iCh "/" "/ Driver COLUMN DATA TYPES"
61964>        Writeln channel iCh "/" "/"
61968>        Writeln channel iCh "/" "/ Created: " (String(dtExecStart))
61973>        Writeln channel iCh
61975>        Move "            " to sSpace
61976>        
61976>        Move (SizeOfArray(aColumnType)) to iSize
61977>        Decrement iSize
61978>        For iCount from 0 to iSize                    
61984>            Get UtilSqlColumnTypeToDataFlexType of ghoDbUpdateFunctionLibrary sDriverID iDbType aColumnType[iCount].iSQLType aColumnType[iCount].iDefaultSize to iDataFlexType 
61985>            Get UtilDataFlexDataTypeToString    of ghoDbUpdateFunctionLibrary iDataFlexType to sDataFlexType
61986>            
61986>            If (Lowercase(aColumnType[iCount].sSQLType) <> "unknown type") Begin
61988>                // sSQLType:
61988>                Move ('Move "' + String(aColumnType[iCount].sSQLType) + '"') to sValue
61989>                Get MakeStringLength sValue 45 to sValue
61990>                Writeln channel iCh sSpace sValue 'to aColumnType[i].sSQLType'                                     
61995>                // iSQLType:
61995>                Move ('Move' * String(aColumnType[iCount].iSQLType)) to sValue
61996>                Get MakeStringLength sValue 45 to sValue
61997>                Writeln channel iCh sSpace sValue 'to aColumnType[i].iSQLType'
62002>                // bCanEditSize:
62002>                Move ('Move' * (If(aColumnType[iCount].bCanEditSize = True, 'True', 'False'))) to sValue
62003>                Get MakeStringLength sValue 45 to sValue
62004>                Writeln channel iCh sSpace sValue 'to aColumnType[i].bCanEditSize'
62009>                // bNativeDataType:
62009>                Move ('Move' * (If(aColumnType[iCount].bNativeDataType = True, 'True', 'False'))) to sValue
62010>                Get MakeStringLength sValue 45 to sValue
62011>                Writeln channel iCh sSpace sValue 'to aColumnType[i].bNativeDataType' 
62016>                // iDefaultSize:
62016>                Move ('Move' * String(aColumnType[iCount].iDefaultSize)) to sValue 
62017>                Get MakeStringLength sValue 45 to sValue
62018>                Writeln channel iCh sSpace sValue 'to aColumnType[i].iDefaultSize'
62023>                // iMinSize:
62023>                Move ('Move' * String(aColumnType[iCount].iMinSize)) to sValue 
62024>                Get MakeStringLength sValue 45 to sValue
62025>                Writeln channel iCh sSpace sValue 'to aColumnType[i].iMinSize'
62030>                // iMaxSize:
62030>                Move ('Move' * String(aColumnType[iCount].nMaxSize)) to sValue 
62031>                Get MakeStringLength sValue 45 to sValue
62032>                Writeln channel iCh sSpace sValue 'to aColumnType[i].nMaxSize'
62037>                // sDataFlexType:
62037>                Move ('Move "' + String(sDataFlexType) + '"') to sValue    
62038>                Get MakeStringLength sValue 45 to sValue
62039>                Writeln channel iCh sSpace sValue 'to aColumnType[i].sDataFlexType'
62044>                // iDataFlexType:
62044>                Move ('Move' * String(sDataFlexType)) to sValue    
62045>                Get MakeStringLength sValue 45 to sValue
62046>                Writeln channel iCh sSpace sValue 'to aColumnType[i].iDataFlexType'
62051>                // sPrecision:
62051>                // ToDo: Should this be .DefaultSize or .nMaxSize? ...Or removed !
62051>                // Maybe change the struct?
62051>                If (iDataFlexType = DF_DATE) Begin
62053>                    Move  6 to aColumnType[iCount].nMaxSize
62054>                End
62054>                If (Lowercase(aColumnType[iCount].sSQLType) = "datetime" or Lowercase(aColumnType[iCount].sSQLType) = "datetime2") Begin
62056>                    Move 23 to aColumnType[iCount].nMaxSize
62057>                End                                           
62057>                If (aColumnType[iCount].nMaxSize = 0) Begin
62059>                    Move  1 to aColumnType[iCount].nMaxSize
62060>                End
62060>                Move ('Move' * String(aColumnType[iCount].nMaxSize)) to sValue 
62061>                Get MakeStringLength sValue 45 to sValue
62062>                Writeln channel iCh sSpace sValue 'to aColumnType[i].sPrecision'
62067>
62067>                Writeln channel iCh sSpace 'Increment i'
62071>                Writeln channel iCh
62073>            End
62073>        Loop
62074>
62074>        Send Seq_Close_Channel iCh
62075>        Send Info_Box "Ready!"    
62076>    End_Procedure
62077>    
62077>    Procedure OnStartUp
62080>        String sBinPath sXMLFileName
62080>        Get DFBinPath of ghoApplication to sBinPath
62081>        // The .xml files now resides in the .\Lib folder
62081>        Move (Replace("\bin", sBinPath, "\Lib")) to sBinPath
62082>        Move "\MSSQLDRV_DriverDef.xml" to sXMLFileName
62083>        Set Value of oDriverXMLFileName_fm to (sBinPath + sXMLFileName) 
62084>        Set Value of oDbType_cf   to EN_DbTypeMSSQL
62085>//        Set Value of oDriverID_cf to MSSQLDRV_ID
62085>    End_Procedure
62086>    Send OnStartUp
62087>
62087>    On_Key Key_Ctrl+Key_R Send KeyAction of oReadButton
62088>    On_Key Key_Ctrl+Key_W Send KeyAction of oWriteButton
62089>End_Object
62090>
62090>Start_UI oMainPanel
62092>
Including Resources...
Summary
Memory Available: 2147483646
Total Warnings : 1
Total Errors   : 0
Total Symbols  : 34896
Total Resources: 6
Total Commands : 62091
Total Windows  : 0
Total Pages    : 0
Static Data    : 520759
Message area   : 380300
Total Blocks   : 23100
