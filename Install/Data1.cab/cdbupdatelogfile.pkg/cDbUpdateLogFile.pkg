//****************************************************************************
// $Module type: Class
// $Module name: cDbUpdateLogFile
// $Author     : Nils G. Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
// Web-site    : http://www.rdctools.com
// Created     : 2016-10-05 @ 18:58 (Military date format: YY-MM-DD)
//
// Description : This logic was moved from the cDbUpdateHandler class so that it would
//               be easier to change to where errors/status messages are written/saved. As it is less likely
//               that this class is to change; each developer can decide if the errors instead
//               should be saved to a database table, or something entirely different.
//               The default is to write the errors to a Ascii-file in the Data folder.
//
// $Rev History:
//    2016-10-05  Module header created
//****************************************************************************
Use UI

#IFNDEF _struct_tDbUpdateError
Struct tDbUpdateError
    Number  nUpdateVersion
    Integer iError
    String  sErrorText
    Integer iErrorLine
    Boolean bError
End_Struct
#ENDIF

Class cDbUpdateLogFile is a cObject

    Procedure Construct_Object
        Forward Send Construct_Object

        // Error handling:
        Property tDbUpdateError[] paDbUpdateErrorArray
        { Visibility=Private }
        Property Integer piChannel -1

        { Visibility=Private }
        // This property is set by the cDbUpdateHandler object,
        // when the update process starts.
        Property DateTime pdtUpdateStart

        { Visibility=Private }
        // Gets set to True after the error log header text
        // has been written.
        Property Boolean pbHeaderWritten False

        // If all activities should be logged- not just errors.
        Property Boolean pbVerboseState False

        // File name for the error log where all errors
        // after a run is written to (appended).
        // It is saved in the Data folder.
        Property String psLogTextFile   "DUFUpdateLog.txt"
        Property String psEditorProgram "Notepad.exe"

        Property Boolean pbUseDataTable False

        // If true an error will be written to file immediately when
        // it occurs. This can be handy if a large update generates a lots
        // of errors and the application crasches before finished, thus
        // the errors will not be written.
        Property Boolean pbQuickWrite True
    End_Procedure

    Procedure End_Construct_Object
        Forward Send End_Construct_Object

    End_Procedure

    Procedure LogError Number nVersion Integer iError String sErrorText Integer iErrorLine Boolean bError
        tDbUpdateError[] DbUpdateErrorArray DbUpdateErrorArrayEmpty
        Boolean bQuickWrite
        Integer iSize
        String sChar

        // Only do once.
        If (pbHeaderWritten(Self) = False) Begin
            Send WriteHeaderData
            Set pbHeaderWritten to True
        End

        Get paDbUpdateErrorArray to DbUpdateErrorArray
        Move (SizeOfArray(DbUpdateErrorArray)) to iSize
        Move nVersion   to DbUpdateErrorArray[iSize].nUpdateVersion
        Move iError     to DbUpdateErrorArray[iSize].iError
        Move iErrorLine to DbUpdateErrorArray[iSize].iErrorLine
        Move True       to DbUpdateErrorArray[iSize].bError
        Move sErrorText to DbUpdateErrorArray[iSize].sErrorText

        If (bError = False) Begin
            Move False to DbUpdateErrorArray[iSize].bError
        End
        Set paDbUpdateErrorArray to DbUpdateErrorArray

        If (pbUseDataTable(Self) = True) Begin
            If (pbQuickWrite(Self) = True) Begin
                Send OnWriteRow_DataTable
                // If we are writing error for error flush the
                // error array when latest error has been written.
                Set paDbUpdateErrorArray to DbUpdateErrorArrayEmpty
            End
            Procedure_Return
        End  
        Else Begin
            If (pbQuickWrite(Self) = True) Begin
                Send WriteErrorLog                                 
                // Flush the error log array
                Set paDbUpdateErrorArray to DbUpdateErrorArrayEmpty
            End
        End

    End_Procedure

    // Hook procedure for writing header text prior starting the update work to
    // a database table. This does nothing by default.
    // Don't forget to Open your "error log table" first (!) as all
    // tables have been closed at this stage. Put anything
    // you want to indicate that the update process is just started.
    Procedure OnWriteHeader_DataTable DateTime dtUpdateStart
        Delegate Send OnErrorWriteHeader_DataTable dtUpdateStart
    End_Procedure

    Procedure OnWriteRow_DataTable
        tDbUpdateError[] DbUpdateErrorArray
        Get paDbUpdateErrorArray to DbUpdateErrorArray
        If (SizeOfArray(DbUpdateErrorArray) > 0) Begin
            Delegate Send OnErrorWriteRow_DataTable DbUpdateErrorArray
        End
    End_Procedure

    Procedure WriteHeaderData
        String sPath sFileName
        Integer iCount iSize iCh
        Boolean bExists bQuickWrite
        DateTime dtCurrentDateTime dtUpdateStart dtUpdateEnd
        TimeSpan tsElapsed

        Move (CurrentDateTime()) to dtUpdateStart
        If (pbUseDataTable(Self) = True) Begin
            Send OnWriteHeader_DataTable dtUpdateStart
            Procedure_Return
        End

        Get piChannel to iCh
        If (iCh < 0) Begin
            Get Seq_New_Channel to iCh
            If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
                Error DFERR_PROGRAM "No free channel for writing output!"
                Procedure_Return
            End
            Set piChannel to iCh
        End

        Get psDataPathFirstPart to sPath
        Get psLogTextFile to sFileName
        Move (sPath + sFileName) to sFileName

        Get pbQuickWrite to bQuickWrite
        If (bQuickWrite = True) Begin
            Append_Output channel iCh sFileName
                If (bQuickWrite = True) Begin
                    Writeln channel iCh ""
                    Writeln channel iCh ("Database Update Started:      " + String(dtUpdateStart))
                End
            Close_Output channel iCh
        End

    End_Procedure

    // Returns the first datapath found in the psDataPath property.
    // The returned path always ends with a "\"
    Function psDataPathFirstPart Returns String
        String sDataPath
        Integer iCount

        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
        Get CountOfPaths of (phoWorkspace(ghoApplication)) sDataPath to iCount
        If (iCount > 1) Begin
            Get PathAtIndex of (phoWorkspace(ghoApplication)) sDataPath 1 to sDataPath
        End
        If (sDataPath <> "") Begin
            Get vFolderFormat sDataPath to sDataPath
        End

        Function_Return sDataPath
    End_Function

    // Called from the cDbUpdateHandler object after all updates have been done.
    Procedure WriteErrorLog
        tDbUpdateError[] aDbUpdateErrorArray
        String sPath sFileName sErrorNo sVersion sErrorText sText
        Integer iCount iSize iCh iError iErrorLine
        Boolean bExists bUseDataTable bQuickWrite bError
        DateTime dtCurrentDateTime dtUpdateStart dtUpdateEnd
        TimeSpan tsElapsed
        Number nVersion

        If (pbHeaderWritten(Self) = False) Begin
            Send WriteHeaderData
            Set pbHeaderWritten to True
        End

        Get pbUseDataTable to bUseDataTable
        If (bUseDataTable = True) Begin
            Send OnWriteRow_DataTable
            Procedure_Return
        End

        Get piChannel to iCh
        If (iCh < 0) Begin
            Get Seq_New_Channel to iCh
            If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
                Error DFERR_PROGRAM "No free channel for writing output!"
                Procedure_Return
            End
            Set piChannel to iCh
        End

        Get psDataPathFirstPart to sPath
        Get psLogTextFile to sFileName
        Move (sPath + sFileName) to sFileName

        Get paDbUpdateErrorArray to aDbUpdateErrorArray
        Move (SizeOfArray(aDbUpdateErrorArray)) to iSize
        Decrement iSize

        Get pdtUpdateStart to dtUpdateStart
        Move (CurrentDateTime()) to dtUpdateEnd
        Move (dtUpdateEnd - dtUpdateStart) to tsElapsed
        Get pbQuickWrite to bQuickWrite

        Append_Output channel iCh sFileName
            If (bQuickWrite = True) Begin
                Writeln channel iCh ("Database Update Finished at:  " + String(dtUpdateEnd) * "Time Elapsed:" * String(tsElapsed))
            End
            Else Begin
                Writeln channel iCh
                Writeln channel iCh ("Database Update Started:" * String(dtUpdateStart) * "and finished at:" * String(dtUpdateEnd) * "Time Elapsed:" * String(tsElapsed))
            End
            Writeln channel iCh "[Err No:] [pnVersionNumber:] [Status Text:]"

            For iCount from 0 to iSize
                Move aDbUpdateErrorArray[iCount].iError         to iError
                Move aDbUpdateErrorArray[iCount].nUpdateVersion to nVersion
                Move aDbUpdateErrorArray[iCount].sErrorText     to sErrorText
                Move aDbUpdateErrorArray[iCount].iErrorLine     to iErrorLine
                Get PadLeft (String(iError)) 8 to sErrorNo
                If (aDbUpdateErrorArray[iCount].bError = True) Begin
                    Get PadLeft (String(nVersion)) (27 - Length(sErrorNo)) to sVersion
                    Move (sErrorNo + sVersion + "   " + sErrorText * "[ErrLine:" * String(iErrorLine) + "]") to sText
                End
                Else Begin
                    Get PadLeft (String(nVersion)) 27 to sVersion
                    Move (sVersion + "   " + sErrorText) to sText
                End
                Writeln channel iCh sText
            Loop
        Close_Output channel iCh

        Send Seq_Release_Channel iCh
        Set piChannel to -1

    End_Procedure

    // The character to pad is optional. If nothing, spaces are used.
    // Example:
    // Move (PadLeft(45672,10,"0")) to sString -> "0000045672"
    //  or:
    // Move (PadLeft("Test",10)) to sString -> " Test"
    // Courtesy of Pieter van Dieren. Collected from DAWs' Newsgroups.
    Function PadLeft String sString Integer iLength String sOptChar Returns String
        String sChar

        If (Num_Arguments >= 3) Begin
            Move sOptChar to sChar
        End
        Else Begin
            Move " " to sChar
        End

        While (Length(sString) < iLength)
            Move (sChar + sString) to sString
        Loop

        Function_Return sString
    End_Function

    Procedure ShowErrorLog
        String sPath sFileName
        Boolean bExists

        Get psDataPathFirstPart to sPath
        Get psLogTextFile to sFileName
        Get vFilePathExists (sPath + sFileName) to bExists
        If (bExists = True) Begin
            Runprogram Background (psEditorProgram(Self)) (sPath + sFileName)
        End
        Else Begin
            Send Info_Box ("Could not locate the error log file:\n\n" + (sPath + sFileName))
        End
    End_Procedure

End_Class
