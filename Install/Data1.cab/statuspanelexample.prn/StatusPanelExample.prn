Compiling Program: C:\Projects\DF18\DbUpdateFramework\AppSrc\StatusPanelExample.src
Memory Available: 2147483646
1>// StatusPanelExample.src
1>Use DfAllEnt.pkg
Using pre-compiled package DFALLENT.PKG
Including file: dfallent.pkd    (C:\Program Files (x86)\DataFlex 18.2\Pkg\dfallent.pkd)
75290>Use cApplication.pkg
75290>
75290>Use ProcessStatusPanel.pkg
Including file: ProcessStatusPanel.pkg    (C:\Projects\DF18\DbUpdateFramework\AppSrc\ProcessStatusPanel.pkg)
75290>>>// ProcessStatusPanel.pkg
75290>>>
75290>>>Use cProcessStatusPanel.pkg
75290>>>Use cProgressBar.pkg
Including file: cProgressBar.pkg    (C:\Program Files (x86)\DataFlex 18.2\Pkg\cProgressBar.pkg)
75290>>>>>Use Windows.pkg
75290>>>>>Use cWinControl.pkg
75290>>>>>Use CommCtrl.pkg
75290>>>>>
75290>>>>>Type tPbRange
75290>>>>>    Field tPbRange.iLow  as DWord
75290>>>>>    Field tPbRange.iHigh as DWord
75290>>>>>End_Type
75290>>>>>
75290>>>>>//{ OverrideProperty=pbEnabled DesignTime=False }
75290>>>>>Class cProgressBar is a cWinControl
75291>>>>>
75291>>>>>    Procedure Construct_Object
75293>>>>>        Forward Send Construct_Object
75295>>>>>        Property Integer private_piMinimum
75296>>>>>        Property Integer private_piMaximum   100
75297>>>>>        Property Integer private_piAdvanceBy 10
75298>>>>>        Property Integer private_piPosition
75299>>>>>        Property Integer private_pbVertical  False
75300>>>>>        Property Integer private_pbSmooth    False
75301>>>>>        Property Integer private_piBackColor clDefault
75302>>>>>        Property Integer private_piBarColor  clDefault
75303>>>>>
75303>>>>>        Send Define_ToolTip_Support_Mixin
75304>>>>>
75304>>>>>        Set External_Class_Name 'cVdfProgressBar' To 'msctls_progress32'
75305>>>>>        Set Focus_Mode to NonFocusable
75306>>>>>        Set Skip_State to True
75307>>>>>        Set pbUseFormWindowHandle to False     // Must come after Define_ToolTip_Support_Mixin
75308>>>>>    End_Procedure
75309>>>>>
75309>>>>>    Import_Class_Protocol ToolTip_Support_Mixin
75310>>>>>
75310>>>>>    Procedure Set piMinimum Integer iMin
75312>>>>>        Integer iMax
75312>>>>>
75312>>>>>        Set private_piMinimum to iMin
75313>>>>>        Get private_piMaximum To iMax
75314>>>>>        Send Windows_Message PBM_SETRANGE32 iMin iMax
75315>>>>>    End_Procedure
75316>>>>>    Function piMinimum Returns Integer
75318>>>>>        If (Window_Handle(self)) Function_Return (WindowsMessage(PBM_GETRANGE, 1, 0))
75321>>>>>        Else Function_Return (private_piMinimum(self))
75323>>>>>    End_Function
75324>>>>>
75324>>>>>    Procedure Set piMaximum Integer iMax
75326>>>>>        Integer iMin
75326>>>>>
75326>>>>>        Set private_piMaximum to iMax
75327>>>>>        Get private_piMinimum To iMin
75328>>>>>        Send Windows_Message PBM_SETRANGE32 iMin iMax
75329>>>>>    End_Procedure
75330>>>>>    Function piMaximum Returns Integer
75332>>>>>        If (Window_Handle(self)) Function_Return (WindowsMessage(PBM_GETRANGE, 0, 0))
75335>>>>>        Else Function_Return (private_piMaximum(self))
75337>>>>>    End_Function
75338>>>>>
75338>>>>>    Procedure Set piAdvanceBy Integer iAdvanceBy
75340>>>>>        Set private_piAdvanceBy To iAdvanceBy
75341>>>>>        Send Windows_Message PBM_SETSTEP iAdvanceBy 0
75342>>>>>    End_Procedure
75343>>>>>    Function piAdvanceBy Returns Integer
75345>>>>>        Function_Return (private_piAdvanceBy(self))
75346>>>>>    End_Function
75347>>>>>
75347>>>>>    Procedure Set piPosition Integer iPos
75349>>>>>        Set private_piPosition To iPos
75350>>>>>        Send Windows_Message PBM_SETPOS iPos 0
75351>>>>>    End_Procedure
75352>>>>>
75352>>>>>    Function piPosition Returns Integer
75354>>>>>        If (Window_Handle(self)) Function_Return (WindowsMessage(PBM_GETPOS, 0, 0))
75357>>>>>        Else Function_Return (private_piPosition(self))
75359>>>>>    End_Function
75360>>>>>
75360>>>>>    Procedure Set pbVertical Boolean bVertical
75362>>>>>        If (private_pbVertical(self) <> bVertical) Begin
75364>>>>>            Set private_pbVertical To bVertical
75365>>>>>           Send DoRecreateWindow
75366>>>>>        End
75366>>>>>>
75366>>>>>    End_Procedure
75367>>>>>
75367>>>>>    Function pbVertical Returns Boolean
75369>>>>>        Function_Return (private_pbVertical(self))
75370>>>>>    End_Function
75371>>>>>
75371>>>>>    Procedure Set pbSmooth Boolean bSmooth
75373>>>>>        If (private_pbSmooth(self) <> bSmooth) Begin
75375>>>>>           Set private_pbSmooth To bSmooth
75376>>>>>           Send DoRecreateWindow
75377>>>>>        End
75377>>>>>>
75377>>>>>    End_Procedure
75378>>>>>    Function pbSmooth Returns Boolean
75380>>>>>        Function_Return (private_pbSmooth(self))
75381>>>>>    End_Function
75382>>>>>
75382>>>>>    Procedure Set piBackColor Integer rgbColor
75384>>>>>        Set private_piBackColor To rgbColor
75385>>>>>        Send Windows_Message PBM_SETBKCOLOR 0 rgbColor
75386>>>>>    End_Procedure
75387>>>>>    Function piBackColor Returns Integer
75389>>>>>        Function_Return (private_piBackColor(self))
75390>>>>>    End_Function
75391>>>>>
75391>>>>>    Procedure Set piBarColor Integer rgbColor
75393>>>>>        Set private_piBarColor To rgbColor
75394>>>>>        Send Windows_Message PBM_SETBARCOLOR 0 rgbColor
75395>>>>>    End_Procedure
75396>>>>>    Function piBarColor Returns Integer
75398>>>>>        Function_Return (private_piBarColor(self))
75399>>>>>    End_Function
75400>>>>>
75400>>>>>    Procedure DoAdvance
75402>>>>>        Send Windows_Message PBM_STEPIT 0 0
75403>>>>>    End_procedure
75404>>>>>
75404>>>>>    Procedure DoAdvanceBy  Integer iAdvanceBy
75406>>>>>        Send Windows_Message PBM_DELTAPOS iAdvanceBy 0
75407>>>>>    End_procedure
75408>>>>>
75408>>>>>    Procedure private_DoInitWindow
75410>>>>>        Set piBarColor  To (private_piBarColor(self))
75411>>>>>        Set piBackColor To (private_piBackColor(self))
75412>>>>>        Set piAdvanceBy To (private_piAdvanceBy(self))
75413>>>>>        Set piMinimum   To (private_piMinimum(self))
75414>>>>>        Set piMaximum   To (private_piMaximum(self))
75415>>>>>        Set piPosition  To (private_piPosition(self))
75416>>>>>    End_Procedure
75417>>>>>
75417>>>>>    Procedure Page_Object Integer iState
75419>>>>>        Handle hWnd
75419>>>>>
75419>>>>>        Get Window_Handle To hWnd
75420>>>>>        If (hWnd=0 and iState) Begin
75422>>>>>            Set Window_Style To PBS_VERTICAL (private_pbVertical(self))
75423>>>>>            Set Window_Style To PBS_SMOOTH   (private_pbSmooth(self))
75424>>>>>            Forward Send Page_Object True
75426>>>>>        End
75426>>>>>>
75426>>>>>        Else Forward Send Page_Object iState
75429>>>>>     
75429>>>>>        // Handle tooltip support....
75429>>>>>        If (iState = 0) Begin
75431>>>>>            Send RequestDeleteToolTip
75432>>>>>        End 
75432>>>>>>
75432>>>>>        Else Begin
75433>>>>>            Send RequestAddToolTip
75434>>>>>        End
75434>>>>>>
75434>>>>>    End_Procedure
75435>>>>>
75435>>>>>    Procedure Page Integer iState
75437>>>>>        Forward Send Page iState
75439>>>>>        If (iState =1) Send private_DoInitWindow
75442>>>>>    End_Procedure
75443>>>>>
75443>>>>>    // Called by Page_Object. Handles tooltip creation. We use a dedicated
75443>>>>>    // method to perform AddToolTip because it is often the case that Page_Object
75443>>>>>    // is implemented in a mixin class.
75443>>>>>    Procedure RequestAddToolTip
75445>>>>>        Send AddToolTip
75446>>>>>    End_Procedure  // RequestAddToolTip
75447>>>>>
75447>>>>>
75447>>>>>    // Called by Page_Object. Handles tooltip removal. 
75447>>>>>    Procedure RequestDeleteToolTip
75449>>>>>        Send DeleteToolTip
75450>>>>>    End_Procedure // RequestDeleteToolTip
75451>>>>>End_Class
75452>>>
75452>>>
75452>>>    Global_Variable Handle ghoProgressBar // will contain the ID of the embedded progress bar.
75452>>>// this is the main progress bar unless ghoProgressBarOverall is used in which case ghoProgressBarOverall becomes the main one.
75452>>>
75452>>>    Global_Variable Handle ghoProgressBarOverall // will contain the ID of the embedded progress bar with overall results
75452>>>
75452>>>Object Status_Panel is a cProcessStatusPanel
75454>>>    Property Boolean Cancel_Button_Visible_State True
75456>>>
75456>>>    Move Self to ghoStatusPanel         // this can be used throughout your application to access this object
75457>>>    
75457>>>    Set Size to 110 166
75458>>>    Set Sysmenu_Icon to False
75459>>>
75459>>>    // When the status panel is continuously called it gets smaller and smaller each time it is invoked.
75459>>>    // This only happens when using the skin framework and this totally fixes the problem.
75459>>>    Procedure Activate
75462>>>        Integer iSizeBefore iSizeAfter
75462>>>        Get GuiSize to iSizeBefore
75463>>>        Forward Send Activate
75465>>>        Get Size to iSizeAfter
75466>>>        If (iSizeAfter < iSizeBefore) Begin
75468>>>            Set GuiSize to (Hi(iSizeBefore)) (Low(iSizeBefore))
75469>>>        End
75469>>>>
75469>>>        Send Adjust_Logicals
75470>>>    End_Procedure
75471>>>    
75471>>>    Object oTitleTxt is a TextBox
75473>>>        Set location to 10 10
75474>>>        Set Auto_Size_State to False
75475>>>        Set size to 20 150
75476>>>        Set Justification_Mode to JMode_Center
75477>>>    End_Object
75478>>>
75478>>>    Object oMessageTxt is a TextBox
75480>>>        Set location to 25 10
75481>>>        Set Auto_Size_State to False
75482>>>        Set size to 20 150
75483>>>    End_Object
75484>>>
75484>>>    Object oActionTxt is a TextBox
75486>>>        Set location to 45 10
75487>>>    End_Object
75488>>>
75488>>>    Object oStopButton is a Button
75490>>>        Set Location to 90 58
75491>>>        Set Label to C_$Cancel
75492>>>        
75492>>>        Procedure OnClick
75495>>>            Send Close_panel
75496>>>        End_Procedure
75497>>>    
75497>>>    End_Object
75498>>>
75498>>>    Object oProgressBar is a cProgressBar
75500>>>        Set Size to 10 150
75501>>>        Set Location to 60 8
75502>>>        Set pbVisible to False // default
75503>>>        Move Self to ghoProgressBar // this can be used throughout your application to access the progress bar
75504>>>    End_Object
75505>>>    
75505>>>    Procedure Set Progress_Bar_Visible_State Boolean bVisible
75508>>>        Set pbVisible of ghoProgressBar to bVisible
75509>>>    End_Procedure
75510>>>    
75510>>>    Function Progress_Bar_Visible_State Returns Boolean
75513>>>        Boolean bVisible
75513>>>        Get pbVisible of ghoProgressBar to bVisible
75514>>>        Function_Return (bVisible)
75515>>>    End_Function
75516>>>
75516>>>    Object oProgressBarOverall is a cProgressBar
75518>>>        Set Size to 10 150
75519>>>        Set Location to 75 8
75520>>>        Set pbVisible to False // default
75521>>>        Move Self to ghoProgressBarOverall // this can be used throughout your application to access the progress bar
75522>>>    End_Object
75523>>>    
75523>>>    Procedure Set Progress_Bar_Overall_Visible_State Boolean bVisible
75526>>>        Set pbVisible of ghoProgressBarOverall to bVisible
75527>>>    End_Procedure
75528>>>    
75528>>>    Function Progress_Bar_Overall_Visible_State Returns Boolean
75531>>>        Boolean bVisible
75531>>>        Get pbVisible of ghoProgressBarOverall to bVisible
75532>>>        Function_Return (bVisible)
75533>>>    End_Function
75534>>>
75534>>>    // These messages bind the standard cProcessStatusPanel interface to the actual
75534>>>    // objects defined within this instance of the status panel.
75534>>>    
75534>>>    // note: all of the messages that change text should be forwarded
75534>>>    // as the forwarded messages allows the panel to paint when in a tight loop
75534>>>
75534>>>    Procedure Set Message_Text String sText
75537>>>        Set Label of oMessageTxt to sText
75538>>>        Forward Set Message_Text to sText
75540>>>    End_Procedure
75541>>>    
75541>>>    Function Message_Text Returns String
75544>>>        Function_Return (Label(oMessageTxt))
75545>>>    End_Function
75546>>>    
75546>>>    Procedure Set Action_Text String sText
75549>>>        Set Label of oActionTxt to sText
75550>>>        Forward Set Action_Text to sText
75552>>>    End_Procedure
75553>>>    
75553>>>    Function Action_Text Returns String
75556>>>        Function_Return (Label(oActionTxt))
75557>>>    End_Function
75558>>>    
75558>>>    Procedure Set Button_Text String sText
75561>>>        Set Label of oStopButton to sText
75562>>>        Forward Set Button_Text to sText
75564>>>    End_Procedure
75565>>>    
75565>>>    Function Button_Text Returns String
75568>>>        Function_Return (Label(oStopButton))
75569>>>    End_Function
75570>>>    
75570>>>    Procedure Set Title_Text String sText
75573>>>        Set Label of oTitleTxt to sText
75574>>>        Forward Set Title_Text to sText
75576>>>    End_Procedure
75577>>>    
75577>>>    Function Title_Text Returns String
75580>>>        Function_Return (Label(oTitleTxt))
75581>>>    End_Function
75582>>>
75582>>>    // gets called when status panel is activated passing whether a button
75582>>>    // should appear
75582>>>    Procedure EnableCancelButton Boolean bEnable
75585>>>        Boolean bVisible
75585>>>        Get Cancel_Button_Visible_State to bVisible
75586>>>        If (bEnable = False) Begin
75588>>>            Set Visible_State of oStopButton to bVisible
75589>>>        End
75589>>>>
75589>>>        Set Enabled_State of oStopButton to bEnable
75590>>>    End_Procedure
75591>>>    
75591>>>    Procedure Reset_StatusPanel
75594>>>        Set Allow_Cancel_State of ghoStatusPanel to True
75595>>>        Set Cancel_Button_Visible_State of ghoStatusPanel to True
75596>>>        Set Progress_Bar_Visible_State of ghoProgressBar to False
75597>>>        Set Progress_Bar_Overall_Visible_State of ghoProgressBarOverall to False
75598>>>    End_Procedure
75599>>>   
75599>>>End_Object
75600>
75600>Object oApplication is a cApplication
75602>End_Object 
75603>
75603>Use cCJSkinFramework.pkg
Including file: cCJSkinFramework.pkg    (C:\Program Files (x86)\DataFlex 18.2\Pkg\cCJSkinFramework.pkg)
75603>>>Use windows.pkg
75603>>>Use cCJComSkinFramework.pkg
Including file: cCJComSkinFramework.pkg    (C:\Program Files (x86)\DataFlex 18.2\Pkg\cCJComSkinFramework.pkg)
75603>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v16.4.0\Bin\Codejock.SkinFramework.v16.4.0.ocx
75603>>>>>Use FlexCom20.pkg
75603>>>>>
75603>>>>>// Changes to Imported package
75603>>>>>//     OLEXTPxx to XTPxx
75603>>>>>//     OLExtpxx to xtpxx
75603>>>>>//     OLESkinFramework to SkinFramework
75603>>>>>//     OLESTDxxx and OLEXPxxxx to STD/XP
75603>>>>>//     cCom classes to cCJ
75603>>>>>//     cCJAutomationObject back to cComAutomationObject
75603>>>>>//     cCJActiveXControl back to cComActiveXControl
75603>>>>>//     cCJSkinFramework to cCJComSkinFramework
75603>>>>>//     Use statements as noted below (classes moved to these files)
75603>>>>>//     Set classlibrary of all cComAutomation objects to Windows (for class doc)
75603>>>>>
75603>>>>>// These have been extracted from this class and moved into seperate packages
75603>>>>>// because other Codejock classes use these.
75603>>>>>Use cCJColorManager.pkg     // cCJColorManager
75603>>>>>
75603>>>>>Define SkinFrameworkApplyOptions for Integer
75603>>>>>    Define xtpSkinApplyMetrics for 1
75603>>>>>    Define xtpSkinApplyFrame for 2
75603>>>>>    Define xtpSkinApplyColors for 4
75603>>>>>    Define xtpSkinApplyMenus for 8
75603>>>>>
75603>>>>>// CLSID: {AFA0E6A1-28D7-4F2C-87A7-7266367B4655}
75603>>>>>// Dispatch interface for SkinFramework Control
75603>>>>>Class cCJ_DSkinFramework is a Mixin
75604>>>>>
75604>>>>>    Function ComApplyOptions Returns SkinFrameworkApplyOptions
75606>>>>>        SkinFrameworkApplyOptions retVal
75606>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
75607>>>>>        Function_Return retVal
75608>>>>>    End_Function
75609>>>>>
75609>>>>>    Procedure Set ComApplyOptions SkinFrameworkApplyOptions value
75611>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
75612>>>>>    End_Procedure
75613>>>>>
75613>>>>>    Function ComAutoApplyNewWindows Returns Boolean
75615>>>>>        Boolean retVal
75615>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
75616>>>>>        Function_Return retVal
75617>>>>>    End_Function
75618>>>>>
75618>>>>>    Procedure Set ComAutoApplyNewWindows Boolean value
75620>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
75621>>>>>    End_Procedure
75622>>>>>
75622>>>>>    Function ComAutoApplyNewThreads Returns Boolean
75624>>>>>        Boolean retVal
75624>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
75625>>>>>        Function_Return retVal
75626>>>>>    End_Function
75627>>>>>
75627>>>>>    Procedure Set ComAutoApplyNewThreads Boolean value
75629>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
75630>>>>>    End_Procedure
75631>>>>>
75631>>>>>    Function ComLoadSkin String llResourcePath String llIniFileName Returns Boolean
75633>>>>>        Handle hDispatchDriver
75633>>>>>        Boolean retVal
75633>>>>>        Get phDispatchDriver to hDispatchDriver
75634>>>>>        Send PrepareParams to hDispatchDriver 2
75635>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llResourcePath
75636>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llIniFileName
75637>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
75638>>>>>        Function_Return retVal
75639>>>>>    End_Function
75640>>>>>
75640>>>>>    Procedure ComApplyWindow OLE_HANDLE llhWnd
75642>>>>>        Handle hDispatchDriver
75642>>>>>        Get phDispatchDriver to hDispatchDriver
75643>>>>>        Send PrepareParams to hDispatchDriver 1
75644>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
75645>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
75646>>>>>    End_Procedure
75647>>>>>
75647>>>>>    Procedure ComEnableThemeDialogTexture OLE_HANDLE llhWnd Integer llFlags
75649>>>>>        Handle hDispatchDriver
75649>>>>>        Get phDispatchDriver to hDispatchDriver
75650>>>>>        Send PrepareParams to hDispatchDriver 2
75651>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
75652>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llFlags
75653>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
75654>>>>>    End_Procedure
75655>>>>>
75655>>>>>    Procedure ComRemoveWindow OLE_HANDLE llhWnd
75657>>>>>        Handle hDispatchDriver
75657>>>>>        Get phDispatchDriver to hDispatchDriver
75658>>>>>        Send PrepareParams to hDispatchDriver 1
75659>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
75660>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
75661>>>>>    End_Procedure
75662>>>>>
75662>>>>>    Procedure ComRemoveAllWindows
75664>>>>>        Handle hDispatchDriver
75664>>>>>        Get phDispatchDriver to hDispatchDriver
75665>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
75666>>>>>    End_Procedure
75667>>>>>
75667>>>>>    Procedure ComAddWindowClass String llClassName String llBaseClassName
75669>>>>>        Handle hDispatchDriver
75669>>>>>        Get phDispatchDriver to hDispatchDriver
75670>>>>>        Send PrepareParams to hDispatchDriver 2
75671>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
75672>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llBaseClassName
75673>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
75674>>>>>    End_Procedure
75675>>>>>
75675>>>>>    Procedure ComRemoveWindowClass String llClassName
75677>>>>>        Handle hDispatchDriver
75677>>>>>        Get phDispatchDriver to hDispatchDriver
75678>>>>>        Send PrepareParams to hDispatchDriver 1
75679>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
75680>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
75681>>>>>    End_Procedure
75682>>>>>
75682>>>>>    Function ComEnumerateSkinDirectory String llPath Boolean llRecursive Returns Variant
75684>>>>>        Handle hDispatchDriver
75684>>>>>        Variant retVal
75684>>>>>        Get phDispatchDriver to hDispatchDriver
75685>>>>>        Send PrepareParams to hDispatchDriver 2
75686>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
75687>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRecursive
75688>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
75689>>>>>        Function_Return retVal
75690>>>>>    End_Function
75691>>>>>
75691>>>>>    Function ComEnumerateSkinFile String llPath Returns Variant
75693>>>>>        Handle hDispatchDriver
75693>>>>>        Variant retVal
75693>>>>>        Get phDispatchDriver to hDispatchDriver
75694>>>>>        Send PrepareParams to hDispatchDriver 1
75695>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
75696>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
75697>>>>>        Function_Return retVal
75698>>>>>    End_Function
75699>>>>>
75699>>>>>    Function ComGetColor XTPColorManagerColor llIndex Returns OLE_COLOR
75701>>>>>        Handle hDispatchDriver
75701>>>>>        OLE_COLOR retVal
75701>>>>>        Get phDispatchDriver to hDispatchDriver
75702>>>>>        Send PrepareParams to hDispatchDriver 1
75703>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
75704>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_I4 to retVal
75705>>>>>        Function_Return retVal
75706>>>>>    End_Function
75707>>>>>
75707>>>>>    Procedure ComExcludeModule String llModuleName
75709>>>>>        Handle hDispatchDriver
75709>>>>>        Get phDispatchDriver to hDispatchDriver
75710>>>>>        Send PrepareParams to hDispatchDriver 1
75711>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llModuleName
75712>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
75713>>>>>    End_Procedure
75714>>>>>
75714>>>>>    Function ComCreateSchema String llResourcePath String llIniFileName Returns Variant
75716>>>>>        Handle hDispatchDriver
75716>>>>>        Variant retVal
75716>>>>>        Get phDispatchDriver to hDispatchDriver
75717>>>>>        Send PrepareParams to hDispatchDriver 2
75718>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llResourcePath
75719>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llIniFileName
75720>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
75721>>>>>        Function_Return retVal
75722>>>>>    End_Function
75723>>>>>
75723>>>>>    Procedure ComSetWindowTheme OLE_HANDLE llhWnd Variant llSchema
75725>>>>>        Handle hDispatchDriver
75725>>>>>        Get phDispatchDriver to hDispatchDriver
75726>>>>>        Send PrepareParams to hDispatchDriver 2
75727>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
75728>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llSchema
75729>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
75730>>>>>    End_Procedure
75731>>>>>
75731>>>>>    Procedure ComAboutBox
75733>>>>>        Handle hDispatchDriver
75733>>>>>        Get phDispatchDriver to hDispatchDriver
75734>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
75735>>>>>    End_Procedure
75736>>>>>End_Class
75737>>>>>
75737>>>>>// CLSID: {40217CB8-4463-4030-B324-AC6A8075FEC8}
75737>>>>>// Event interface for SkinFramework Control
75737>>>>>Class cCJ_DSkinFrameworkEvents is a Mixin
75738>>>>>
75738>>>>>    Procedure RegisterComEvents
75740>>>>>    End_Procedure
75741>>>>>End_Class
75742>>>>>
75742>>>>>// CoClass
75742>>>>>// ProgID: Codejock.SkinFramework.16.4.0
75742>>>>>// CLSID: {44B5A659-2E68-45F8-AE67-E0E181238C14}
75742>>>>>// SkinFramework Control
75742>>>>>Class cCJComSkinFramework is a cComActiveXControl
75743>>>>>    Import_Class_Protocol cCJ_DSkinFramework
75744>>>>>    Import_Class_Protocol cCJ_DSkinFrameworkEvents
75745>>>>>
75745>>>>>    Procedure Construct_Object
75747>>>>>        Forward Send Construct_Object
75749>>>>>        Set psProgID to "{44B5A659-2E68-45F8-AE67-E0E181238C14}"
75750>>>>>        Set psEventId to "{40217CB8-4463-4030-B324-AC6A8075FEC8}"
75751>>>>>        Set psLicenseKey to ("Skin Framework Control Copyright (c) 2003-2013 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.SkinFramework.ActiveX.v16.4"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: GGE-OLD-QQR-EJS")
75752>>>>>        Set peAutoCreate to acAutoCreate
75753>>>>>    End_Procedure
75754>>>>>End_Class
75755>>>>>
75755>>>>>// CLSID: {AB5B22B2-6963-466E-8E88-E6AB19A51024}
75755>>>>>// SkinFramework Global Settings
75755>>>>>Class cCJISkinFrameworkGlobalSettings is a Mixin
75756>>>>>
75756>>>>>    Function ComLicense Returns String
75758>>>>>        String retVal
75758>>>>>        Get ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to retVal
75759>>>>>        Function_Return retVal
75760>>>>>    End_Function
75761>>>>>
75761>>>>>    Procedure Set ComLicense String value
75763>>>>>        Set ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to value
75764>>>>>    End_Procedure
75765>>>>>
75765>>>>>    Function ComTitle Returns String
75767>>>>>        String retVal
75767>>>>>        Get ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to retVal
75768>>>>>        Function_Return retVal
75769>>>>>    End_Function
75770>>>>>
75770>>>>>    Procedure Set ComTitle String value
75772>>>>>        Set ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to value
75773>>>>>    End_Procedure
75774>>>>>
75774>>>>>    Function ComVersion Returns String
75776>>>>>        Handle hDispatchDriver
75776>>>>>        String retVal
75776>>>>>        Get phDispatchDriver to hDispatchDriver
75777>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_BSTR to retVal
75778>>>>>        Function_Return retVal
75779>>>>>    End_Function
75780>>>>>
75780>>>>>    Function ComUnicode Returns Boolean
75782>>>>>        Handle hDispatchDriver
75782>>>>>        Boolean retVal
75782>>>>>        Get phDispatchDriver to hDispatchDriver
75783>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_BOOL to retVal
75784>>>>>        Function_Return retVal
75785>>>>>    End_Function
75786>>>>>
75786>>>>>    Function ComOcxPath Returns String
75788>>>>>        Handle hDispatchDriver
75788>>>>>        String retVal
75788>>>>>        Get phDispatchDriver to hDispatchDriver
75789>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_BSTR to retVal
75790>>>>>        Function_Return retVal
75791>>>>>    End_Function
75792>>>>>End_Class
75793>>>>>
75793>>>>>// CoClass
75793>>>>>// ProgID: Codejock.SkinFrameworkGlobalSettings.16.4.0
75793>>>>>// CLSID: {E0F136EB-4BA5-4C3F-8769-1AD0A7330A98}
75793>>>>>// SkinFramework Global Settings
75793>>>>>Class cCJComSkinFrameworkGlobalSettings is a cComAutomationObject
75794>>>>>    Import_Class_Protocol cCJISkinFrameworkGlobalSettings
75795>>>>>
75795>>>>>    Procedure Construct_Object
75797>>>>>        Forward Send Construct_Object
75799>>>>>        Set psProgID to "{E0F136EB-4BA5-4C3F-8769-1AD0A7330A98}"
75800>>>>>        Set peAutoCreate to acNoAutoCreate
75801>>>>>    End_Procedure
75802>>>>>End_Class
75803>>>>>
75803>>>>>// CLSID: {DCEFD473-E750-47AF-9E66-937239AB2265}
75803>>>>>Class cCJSkinIniFile is a cComAutomationObject
75804>>>>>
75804>>>>>    Function ComColorScheme Returns String
75806>>>>>        String retVal
75806>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
75807>>>>>        Function_Return retVal
75808>>>>>    End_Function
75809>>>>>
75809>>>>>    Procedure Set ComColorScheme String value
75811>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
75812>>>>>    End_Procedure
75813>>>>>
75813>>>>>    Function ComFontSize Returns String
75815>>>>>        String retVal
75815>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
75816>>>>>        Function_Return retVal
75817>>>>>    End_Function
75818>>>>>
75818>>>>>    Procedure Set ComFontSize String value
75820>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
75821>>>>>    End_Procedure
75822>>>>>
75822>>>>>    Function ComIniFileName Returns String
75824>>>>>        String retVal
75824>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
75825>>>>>        Function_Return retVal
75826>>>>>    End_Function
75827>>>>>
75827>>>>>    Procedure Set ComIniFileName String value
75829>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
75830>>>>>    End_Procedure
75831>>>>>End_Class
75832>>>>>
75832>>>>>// CLSID: {32396035-F42B-40D4-B283-77E71957A2F7}
75832>>>>>Class cCJSkinDescription is a cComAutomationObject
75833>>>>>
75833>>>>>    Function ComName Returns String
75835>>>>>        String retVal
75835>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
75836>>>>>        Function_Return retVal
75837>>>>>    End_Function
75838>>>>>
75838>>>>>    Procedure Set ComName String value
75840>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
75841>>>>>    End_Procedure
75842>>>>>
75842>>>>>    Function ComPath Returns String
75844>>>>>        String retVal
75844>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
75845>>>>>        Function_Return retVal
75846>>>>>    End_Function
75847>>>>>
75847>>>>>    Procedure Set ComPath String value
75849>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
75850>>>>>    End_Procedure
75851>>>>>
75851>>>>>    Function ComCount Returns Integer
75853>>>>>        Handle hDispatchDriver
75853>>>>>        Integer retVal
75853>>>>>        Get phDispatchDriver to hDispatchDriver
75854>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
75855>>>>>        Function_Return retVal
75856>>>>>    End_Function
75857>>>>>
75857>>>>>    Function ComIniFile Integer llIndex Returns Variant
75859>>>>>        Handle hDispatchDriver
75859>>>>>        Variant retVal
75859>>>>>        Get phDispatchDriver to hDispatchDriver
75860>>>>>        Send PrepareParams to hDispatchDriver 1
75861>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
75862>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
75863>>>>>        Function_Return retVal
75864>>>>>    End_Function
75865>>>>>
75865>>>>>    Function Com_NewEnum Returns Variant
75867>>>>>        Handle hDispatchDriver
75867>>>>>        Variant retVal
75867>>>>>        Get phDispatchDriver to hDispatchDriver
75868>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
75869>>>>>        Function_Return retVal
75870>>>>>    End_Function
75871>>>>>End_Class
75872>>>>>
75872>>>>>// CLSID: {8EB9C809-490C-453D-80B5-3A61CC3CC0D7}
75872>>>>>Class cCJSkinDescriptions is a cComAutomationObject
75873>>>>>
75873>>>>>    Function ComCount Returns Integer
75875>>>>>        Handle hDispatchDriver
75875>>>>>        Integer retVal
75875>>>>>        Get phDispatchDriver to hDispatchDriver
75876>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
75877>>>>>        Function_Return retVal
75878>>>>>    End_Function
75879>>>>>
75879>>>>>    Function ComSkin Integer llIndex Returns Variant
75881>>>>>        Handle hDispatchDriver
75881>>>>>        Variant retVal
75881>>>>>        Get phDispatchDriver to hDispatchDriver
75882>>>>>        Send PrepareParams to hDispatchDriver 1
75883>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
75884>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
75885>>>>>        Function_Return retVal
75886>>>>>    End_Function
75887>>>>>
75887>>>>>    Function Com_NewEnum Returns Variant
75889>>>>>        Handle hDispatchDriver
75889>>>>>        Variant retVal
75889>>>>>        Get phDispatchDriver to hDispatchDriver
75890>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
75891>>>>>        Function_Return retVal
75892>>>>>    End_Function
75893>>>>>End_Class
75894>>>>>
75894>>>>>// CLSID: {128507E0-C56F-43C0-BCF1-8193B35FE4C4}
75894>>>>>Class cCJSkinSchema is a cComAutomationObject
75895>>>>>End_Class
75896>>>Use cApplication.pkg
75896>>>
75896>>>Struct tSkinInformation
75896>>>    String sName     // description of the skin
75896>>>    String sSkinfile // file path. Can be relative or full
75896>>>    String sSkinIni  // section name
75896>>>End_Struct
75896>>>
75896>>>
75896>>>Class cCJSkinFramework is a cCJComSkinFramework
75897>>>    
75897>>>    Procedure Construct_Object
75899>>>        Forward Send Construct_Object
75901>>>        
75901>>>        Property String psSkinFile ""
75902>>>        Property String psSkinIni ""
75903>>>        Property Boolean pbLoadPreference False
75904>>>        
75904>>>        Set peAutoCreate to acAutoCreate
75905>>>        
75905>>>        Move Self to ghoSkinFramework
75906>>>    End_Procedure
75907>>>    
75907>>>    // return the default skin path, which is the programs directory.
75907>>>    // This requires an application object.
75907>>>    // If you want to different skin path, override this.
75907>>>    Function SkinPath Returns String
75909>>>        String sPath sPaths
75909>>>        Handle hoWorkspace
75909>>>        If ghoApplication Begin
75911>>>            Get phoWorkspace of ghoApplication to hoWorkspace
75912>>>            Get psProgramPath of hoWorkspace to sPaths
75913>>>            Get PathAtIndex of hoWorkspace sPaths 1 to sPath
75914>>>        End
75914>>>>
75914>>>        Else Begin
75915>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
75916>>>>
75916>>>        End
75916>>>>
75916>>>        Function_Return sPath
75917>>>    End_Function
75918>>>    
75918>>>    // Returns the Qualified name of psSkinFile. If the file is already qualified it just
75918>>>    // returns itself. If it is not, it uses SkinPath to get the path.
75918>>>    Function SkinQFile Returns String
75920>>>        String sFile sPath sSep
75920>>>        Boolean bQualified
75920>>>        Get psSkinFile to sFile
75921>>>        If not (IsFileNameQualified(sFile)) Begin
75923>>>            Get SkinPath to sPath
75924>>>            Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sSep
75925>>>            Move (sPath - sSep - sFile) to sFile
75926>>>        End
75926>>>>
75926>>>        Function_Return sFile
75927>>>    End_Function
75928>>>        
75928>>>    // defines the default VDF window class mapping.    
75928>>>    Procedure OnAddVDFWindowClasses
75930>>>        Send ComAddWindowClass "DFlistbox"               "ListBox"
75931>>>        Send ComAddWindowClass "DFentry"                 "Edit"
75932>>>        Send ComAddWindowClass "DFtextbox"               "Edit"
75933>>>        Send ComAddWindowClass "DFRichEditCtrl"          "Edit"
75934>>>        Send ComAddWindowClass "DFcombobox"              "ComboBox"
75935>>>        Send ComAddWindowClass "DFformlist"              "Edit"
75936>>>        Send ComAddWindowClass "DFFormListHeader"        "SysHeader32"
75937>>>        Send ComAddWindowClass "DFbutton"                "Button"
75938>>>        Send ComAddWindowClass "HPromptBtn"              "Button"
75939>>>        Send ComAddWindowClass "Hspinbtn"                "msctls_updown32"
75940>>>        Send ComAddWindowClass "DFSysTabControl32"       "SysTabControl32"
75941>>>        Send ComAddWindowClass "DFMDIClient"             "MDIClient" 
75942>>>        Send ComAddWindowClass "DFedit"                  "edit"
75943>>>        Send ComAddWindowClass "DFlistedit"              "edit"
75944>>>        Send ComAddWindowClass "DFscrollbar"             "scrollbar"
75945>>>        Send ComAddWindowClass "DFgroup"                 "Button"
75946>>>        Send ComAddWindowClass "DFComboGrid"             "ComboBox"
75947>>>        // External class
75947>>>        Send ComAddWindowClass "cVdfAnimation"           "SysAnimate32"
75948>>>        Send ComAddWindowClass "cVdfProgressBar"         "msctls_progress32"
75949>>>        Send ComAddWindowClass "cVdfStatusBar"           "msctls_statusbar32"
75950>>>        Send ComAddWindowClass "cVdfToolbar"             "ToolbarWindow32"
75951>>>        Send ComAddWindowClass "cObsoleteVdfProgressBar" "msctls_progress32"
75952>>>        Send ComAddWindowClass "cVdfTrackBar"            "msctls_trackbar32"
75953>>>        Send ComAddWindowClass "cObsoleteBasicStatusBar" "msctls_statusbar32"
75954>>>        Send ComAddWindowClass "cVdfTreeView"            "SysTreeView32"
75955>>>    End_Procedure
75956>>>    
75956>>>    // Used to support developer designed class mappings (e.g. COM controls)
75956>>>    Procedure OnAddCustomWindowClasses
75958>>>    End_Procedure
75959>>>
75959>>>    // called when object is created during end_construct_object.
75959>>>    Procedure OnCreate
75961>>>        Integer iOpts
75961>>>        Boolean bUseWindowsFont
75961>>>        Forward Send OnCreate
75963>>>        
75963>>>        // if we are using the windows fonts we will disable the apply metrics which
75963>>>        // never really looked good anyway. This test only exists or legacy purposes
75963>>>        Get pbUseWindowsFont of Desktop to bUseWindowsFont
75964>>>        If bUseWindowsFont Begin
75966>>>            Get ComApplyOptions to iOpts
75967>>>            Set ComApplyOptions to (RemoveBitValue(xtpSkinApplyMetrics, iOpts))
75968>>>        End
75968>>>>
75968>>>
75968>>>        // this works around a CJ issue where skins applied to other threads causes an exception upon close down. 
75968>>>        // We saw this with our mssql driver but it could occur elsewhere. This has been reported in the CJ newsgroup
75968>>>        // and this was the suggested workaround.
75968>>>        Set ComAutoApplyNewThreads to False
75969>>>
75969>>>        Send OnAddVDFWindowClasses
75970>>>        Send OnAddCustomWindowClasses
75971>>>        
75971>>>        // if preferences are used, it will set psSkinFile and psSkinIni
75971>>>        If (pbLoadPreference(Self)) Begin
75973>>>            Send LoadSkinPreference
75974>>>        End
75974>>>>
75974>>>        // if a skin file name exists, we apply the skin.    
75974>>>        If (psSkinFile(Self)<>"") Begin
75976>>>            Send ApplySkin
75977>>>        End        
75977>>>>
75977>>>    End_Procedure
75978>>>    
75978>>>    // called by framework as part of application exit.
75978>>>    Procedure Broadcast_Notify_Exit_Application
75980>>>        Send Notify_Exit_Application
75981>>>    End_Procedure // Notify_Exit_Application
75982>>>
75982>>>    Procedure Notify_Exit_Application
75984>>>        If (pbLoadPreference(Self)) Begin
75986>>>            Send SaveSkinPreference
75987>>>        End
75987>>>>
75987>>>    End_Procedure
75988>>>
75988>>>    Procedure NotifyPreApplySkin
75990>>>        Broadcast Send OnPreApplySkin of Desktop True       
75992>>>    End_Procedure
75993>>>
75993>>>    Procedure NotifyPostApplySkin
75995>>>        Broadcast Send OnPostApplySkin of Desktop True       
75997>>>    End_Procedure
75998>>>    
75998>>>    // returns an array of all skins in the path. If path is "", use the default path.
75998>>>    // If the default path is used, returns the file names as relative names, else use full path.
75998>>>    Function EnumerateSkins String sPath Boolean bRecursive Returns tSkinInformation[]
76000>>>        tSkinInformation[] Skins
76000>>>        tSkinInformation[] Skins
76001>>>        String sSkinName sSkinFile sDefaultPath sSep
76001>>>        Variant vSkinDescriptions vSkinDescription vSkinIniFile
76001>>>        Handle hSkinDescriptions hSkinDescription hSkinIniFile
76001>>>        Integer iSkinsCount iSkinFilesCount iNumSkins iNumSkinFiles iArrayItem
76001>>>        Integer iPos iDfltLen
76001>>>        Boolean bUseRelativePath
76001>>>        
76001>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sSep
76002>>>        
76002>>>        Get SkinPath to sDefaultPath
76003>>>        If (sPath="") Begin
76005>>>            Move sDefaultPath to sPath
76006>>>        End
76006>>>>
76006>>>        Move (Uppercase(sDefaultPath)) to sDefaultPath
76007>>>        Move (Length(sDefaultPath)) to iDfltLen
76008>>>        Move (sDefaultPath=Uppercase(sPath)) to bUseRelativePath
76009>>>
76009>>>        Get ComEnumerateSkinDirectory sPath bRecursive to vSkinDescriptions
76010>>>        If (not(IsNullComObject(vSkinDescriptions))) Begin
76012>>>
76012>>>            Get Create U_cCJSkinDescriptions to hSkinDescriptions
76013>>>            Get Create U_cCJSkinDescription to hSkinDescription
76014>>>            Get Create U_cCJSkinIniFile to hSkinIniFile
76015>>>            
76015>>>            Set pvComObject of hSkinDescriptions to vSkinDescriptions
76016>>>            Get ComCount of hSkinDescriptions to iNumSkinFiles
76017>>>            
76017>>>            For iSkinFilesCount from 0 to (iNumSkinFiles-1)
76023>>>>
76023>>>                Get ComSkin of hSkinDescriptions iSkinFilesCount to vSkinDescription
76024>>>                Set pvComObject of hSkinDescription to vSkinDescription
76025>>>
76025>>>                Get ComCount of hSkinDescription to iNumSkins
76026>>>                    
76026>>>                For iSkinsCount from 0 to (iNumSkins-1)
76032>>>>
76032>>>                    Get ComIniFile of hSkinDescription iSkinsCount to vSkinIniFile
76033>>>                    Set pvComObject of hSkinIniFile to vSkinIniFile
76034>>>
76034>>>                    Get ComName of hSkinDescription to Skins[iArrayItem].sName
76035>>>                    Get ComPath of hSkinDescription to sSkinFile
76036>>>                    If bUseRelativePath Begin
76038>>>                        Move (pos(sDefaultPath,uppercase(sSkinFile))) to iPos
76039>>>                        If iPos Begin
76041>>>                            Move (Remove(sSkinFile,iPos,iDfltLen)) to sSkinFile   
76042>>>                            While (Left(sSkinFile,1)=sSep)
76046>>>                                Move (Remove(sSkinFile,1,1)) to sSkinFile   
76047>>>                            Loop                         
76048>>>>
76048>>>                        End
76048>>>>
76048>>>                    End
76048>>>>
76048>>>                    Move sSkinFile to Skins[iArrayItem].sSkinfile
76049>>>                    Get ComIniFileName of hSkinIniFile to Skins[iArrayItem].sSkinIni
76050>>>
76050>>>                    Increment iArrayItem
76051>>>                Loop
76052>>>>
76052>>>            Loop
76053>>>>
76053>>>                            
76053>>>            Send Destroy of hSkinDescriptions
76054>>>            Send Destroy of hSkinDescription
76055>>>            Send Destroy of hSkinIniFile
76056>>>                
76056>>>        End
76056>>>>
76056>>>        Function_Return Skins
76057>>>    End_Function 
76058>>>    
76058>>>    // Save the skin preference. This requires an application object.
76058>>>    // Only do this if the application object allows it. 
76058>>>    // This is called during startup if pbLoadPreference is True
76058>>>    // Suitable for override
76058>>>    Procedure SaveSkinPreference 
76060>>>        String sSkin sIni
76060>>>        If ghoApplication Begin
76062>>>            If (pbPreserveEnvironment(ghoApplication)) Begin
76064>>>                Get psSkinFile to sSkin
76065>>>                Get psSkinIni to sIni
76066>>>                Send WriteString of ghoApplication "Preferences" "SkinFile" sSkin
76067>>>                Send WriteString of ghoApplication "Preferences" "SkinIni" sIni
76068>>>            End
76068>>>>
76068>>>        End
76068>>>>
76068>>>        Else Begin
76069>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
76070>>>>
76070>>>        End
76070>>>>
76070>>>    End_Procedure
76071>>>
76071>>>    // Load the skin preference. This requires an application object.
76071>>>    // Only do this if the application object allows it. 
76071>>>    // This is called during startup if pbLoadPreference is True
76071>>>    // Suitable for override
76071>>>    Procedure LoadSkinPreference 
76073>>>        String sSkin sIni
76073>>>        Boolean bExists
76073>>>        If ghoApplication Begin
76075>>>            If (pbPreserveEnvironment(ghoApplication)) Begin
76077>>>                Get ValueExists of ghoApplication "Preferences" "SkinFile" to bExists
76078>>>                If bExists Begin
76080>>>                    Get ReadString of ghoApplication "Preferences" "SkinFile" "" to sSkin
76081>>>                    Get ReadString of ghoApplication "Preferences" "SkinIni" "" to sIni
76082>>>                    Set psSkinFile to sSkin
76083>>>                    Set psSkinIni to sIni
76084>>>                End
76084>>>>
76084>>>            End
76084>>>>
76084>>>        End
76084>>>>
76084>>>        Else Begin
76085>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
76086>>>>
76086>>>        End
76086>>>>
76086>>>    End_Procedure
76087>>>
76087>>>    // Can be called to apply the current skin.
76087>>>    Procedure ApplySkin
76089>>>        Boolean bOk
76089>>>        String sSkin sIni
76089>>>        If (IsComObjectCreated(Self)) Begin
76091>>>            Get SkinQFile to sSkin
76092>>>            Get psSkinIni to sIni
76093>>>            
76093>>>            Send NotifyPreApplySkin
76094>>>            // when skins are used we don't want to use built in Visual Styles
76094>>>            Send EnableVisualStyles of Desktop (sSkin="")
76095>>>            Get ComLoadSkin sSkin sIni to bOK
76096>>>            If (sSkin<>"" and not(bOk)) Begin
76098>>>                // if not ok, no skin was appied. Enable visual styles
76098>>>                Send EnableVisualStyles of Desktop True
76099>>>            End
76099>>>>
76099>>>            Send NotifyPostApplySkin
76100>>>        End
76100>>>>
76100>>>    End_Procedure
76101>>>
76101>>>
76101>>>End_Class
76102>Object oCJSkinFramework is a cCJSkinFramework
76104>    Set psSkinFile to "Windows8.cjstyles"
76105>    Set psSkinIni to "NormalAero.ini"
76106>End_Object
76107>
76107>Object oStatusPanelExample is a ModalPanel
76109>    Set Locate_Mode to CENTER_ON_SCREEN
76110>    Set Size to 150 200
76111>    Set Label to "Status Panel Example"
76112>    Set Sysmenu_Icon to False
76113>
76113>    Object oInform_User is a Textbox
76115>        Set Location to 10 5
76116>        Set Size to 13 180
76117>    End_Object
76118>
76118>    Object oOk_Btn is a Button
76120>        Set Location to 95 75
76121>        Set Label to "Start"
76122>
76122>        Procedure onClick
76125>            Integer x y z iCnt
76125>            Boolean bStopIt
76125>            Set Enabled_State to False
76126>            Set Enabled_State of oExit_Btn to False
76127>            //
76127>            Send Update_Textbox "Processing..."
76128>            Send Reset_StatusPanel of ghoStatusPanel // reset object visibility to their defaults.
76129>            Set Progress_Bar_Overall_Visible_State of ghoProgressBarOverall to True // Default is False
76130>            Set piMinimum of ghoProgressBarOverall to 0
76131>            Set piMaximum of ghoProgressBarOverall to (15 * 5000)
76132>            For x from 1 to 15
76138>                Send Initialize_StatusPanel of ghoStatusPanel "Caption" "Title" "Message"
76139>                Set Allow_Cancel_State of ghoStatusPanel to False                       // You would normally wish to do this within a batch update process.
76140>                Set Cancel_Button_Visible_State of ghoStatusPanel to False              // It makes sense not to display the cancel button.
76141>                Set Progress_Bar_Visible_State of ghoProgressBar to True                // Default is False
76142>                Set piMinimum of ghoProgressBar to 0
76143>                Set piMaximum of ghoProgressBar to (5000)
76144>                Send Start_StatusPanel of ghoStatusPanel
76145>                //
76145>                // This For-from-to loop is standing in for some data processing.
76145>                For y from 1 to 5000
76151>                    Increment iCnt
76152>                    Send Update_StatusPanel of ghoStatusPanel ("y =" * String(y))
76153>                    Set piPosition of ghoProgressBar to (y)
76154>                    Set piPosition of ghoProgressBarOverall to (iCnt)
76155>                Loop
76156>                //
76156>//                Send Stop_StatusPanel of ghoStatusPanel // the status panel is only being stopped here to demonstrate that its location and size remain the same when skinning is used.
76156>                Set piPosition of ghoProgressBar to 0 // reset
76157>                //
76157>                // This For-from-to loop is standing in simply as a minor delay.
76157>                For z from 1 to 10000
76163>                Loop
76164>                //
76164>            Loop
76165>            Set piPosition of ghoProgressBarOverall to 0 // reset
76166>            Send Reset_StatusPanel of ghoStatusPanel // reset object visibility back to their defaults.
76167>            //
76167>            // Inform user that update was successful and give focus to exit button.
76167>            //
76167>            Send Finish_Update "COMPLETED... Process was successful."
76168>            Set Enabled_State of oExit_Btn to True
76169>            Send Next
76170>            //
76170>        End_Procedure
76171>
76171>
76171>        
76171>        Procedure Update_Textbox String sVal
76174>            Set Value of oInform_User to sVal
76175>        End_Procedure
76176>
76176>
76176>        Procedure Finish_Update String sVal
76179>            Set Value of oInform_User to sVal
76180>        End_Procedure
76181>    End_Object
76182>
76182>
76182>    Object oExit_Btn is a Button
76184>        Set Location to 115 75
76185>        Set Label to "Exit"
76186>
76186>        Procedure onClick
76189>            Send Close_Panel of oStatusPanelExample
76190>        End_Procedure
76191>    End_Object
76192>End_Object
76193>
76193>
76193>Procedure Do_It
#REM AMBIGUOUS METHODS ON .DESKTOP. ARE .NOT. RECOMMENDED (OBSOLETE TECHNIQUE)
76195>    Send Popup of oStatusPanelExample
76196>End_Procedure
76197>
76197>Send Do_It
76198>
Summary
Memory Available: 2147483646
Total Warnings : 0
Total Errors   : 0
Total Symbols  : 43696
Total Resources: 0
Total Commands : 76197
Total Windows  : 1
Total Pages    : 1
Static Data    : 456591
Message area   : 526194
Total Blocks   : 27298
