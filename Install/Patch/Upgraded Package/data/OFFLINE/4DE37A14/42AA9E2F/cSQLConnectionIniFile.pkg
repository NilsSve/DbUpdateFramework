//****************************************************************************
// $Module type: Class
// $Module name: cSQLConnectionIniFile.pkg
//
// $Author     : Nils G. Svedmyr, RDC Tools International.
// Copyright (c) 2012 RDC Tools International
// E-mail      : support@rdctools.com
// Web-site    : http://www.rdctools.com
//
// Created     : 2012-09-20 @ 18:04 (Military date format - Year-Month-Day)
//
// Note        : The file must be USEd after declaration of the ghoApplication object, as it uses
//               properties of that object.
//
// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// This is free software; you can redistribute it and/or modify it under the terms of the
// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
// in the help folder for more details.
//
Use cSQLConnectionIniFile.inc
Use cDbUpdateDatabaseDriver.pkg

Class cSQLConnectionIniFile is a cIniFile
    Procedure Construct_Object
        Forward Send Construct_Object

        { Visibility=Private }
        Property String Private_psIniFilePath
        { Visibility=Private }
        Property String Private_psIniFileName CS_SQLIniFileName
        { Visibility=Private }
        Property String psIniSectionName (CS_SQLIniSectionName + "1")

//        { Visibility=Private }
        Property Boolean pbDFConnId False

        // We use Base64 coding instead of the cCryptographer class because the
        // password will get scrambled while writing/reading to/from the ini-file.
//        { Visibility=Public }
//        // *** You really want to change this value! ***
//        Property String psHashString "zx!2139(LI0+?ips7433"

    End_Procedure

    Procedure End_Construct_Object
        Forward Send End_Construct_Object
    End_Procedure

    Procedure Set psIniFilePath String sPath
        String sIniFile
        Get vFolderFormat sPath to sPath
        Set private_psIniFilePath to sPath
        Get psIniFileName to sIniFile
        Set psFileName to (sPath + sIniFile)
    End_Procedure

    Function psIniFilePath Returns String
        Function_Return (private_psIniFilePath(Self))
    End_Function

    Procedure Set psIniFileName String sFileName
        String sPath
        Get psIniFilePath to sPath
        Set psFileName to (sPath + sFileName)
        Set private_psIniFileName to sFileName
    End_Procedure

    Function psIniFileName Returns String
        Function_Return (private_psIniFileName(Self))
    End_Function

    // *** Generalized messages to Get & Set values of the ini file.
    // Sets a value in the program's ini file (write)
    // Pass a section name, the value name parameter and the value itself to be written.
    Procedure Set IniFileValue String sSection String sValueName String sValue
        String sIniFile sPath

        Get psIniFilePath to sPath
        Get psIniFileName to sIniFile
        Move (sPath + sIniFile) to sIniFile
        Set psFileName to sIniFile
        Send WriteString sSection sValueName sValue
    End_Procedure

    // Get a value from program's ini-file (read)
    // Pass a section name and the name of the value parameter & a default value.
    // Returns the value
    Function IniFileValue String sSection String sValueName String sDefaultValue Returns String
        String sValue sIniFile sPath

        Get psIniFilePath to sPath
        Get psIniFileName to sIniFile
        Move (sPath + sIniFile) to sIniFile
        Set psFileName to sIniFile
        Get ReadString sSection sValueName sDefaultValue to sValue

        Function_Return sValue
    End_Function

    // Sort function that first sorts on bEnabled & then on the connection string.
    Function SortActiveFirst tSQLConnection SQLConnectionRow1 tSQLConnection SQLConnectionRow2 Returns Integer
        If (SQLConnectionRow1.bEnabled > SQLConnectionRow2.bEnabled) ;
            Function_Return (LT)
        If (SQLConnectionRow1.bEnabled < SQLConnectionRow2.bEnabled) ;
            Function_Return (GT)

        If (SQLConnectionRow1.sConnectionID < SQLConnectionRow2.sConnectionID) ;
            Function_Return (LT)
        If (SQLConnectionRow1.sConnectionID > SQLConnectionRow2.sConnectionID) ;
            Function_Return (GT)

        If (SQLConnectionRow1.iDbType < SQLConnectionRow2.iDbType) ;
            Function_Return (LT)
        If (SQLConnectionRow1.iDbType > SQLConnectionRow2.iDbType) ;
            Function_Return (GT)

        If (SQLConnectionRow1.sServer < SQLConnectionRow2.sServer) ;
            Function_Return (LT)
        If (SQLConnectionRow1.sServer > SQLConnectionRow2.sServer) ;
            Function_Return (GT)

        If (SQLConnectionRow1.sDatabase < SQLConnectionRow2.sDatabase) ;
            Function_Return (LT)
        If (SQLConnectionRow1.sDatabase > SQLConnectionRow2.sDatabase) ;
            Function_Return (GT)

        If (SQLConnectionRow1.sDriverID < SQLConnectionRow2.sDriverID) ;
            Function_Return (LT)
        If (SQLConnectionRow1.sDriverID > SQLConnectionRow2.sDriverID) ;
            Function_Return (GT)

        If (SQLConnectionRow1.sConnectionString < SQLConnectionRow2.sConnectionString) ;
            Function_Return (LT)
        If (SQLConnectionRow1.sConnectionString > SQLConnectionRow2.sConnectionString) ;
            Function_Return (GT)

        Function_Return (EQ)
    End_Function

    Function SQLIniFileNumberOfConnections Returns Integer
        Handle hoSections
        Integer iItems

        Send ReadSections hoSections
        Move (Item_Count(hoSections)) to iItems
        Function_Return iItems
    End_Function

    // The normal connection string looks something like this;
    // "SERVER=.\SQLEXPRESS; DATABASE=OrderEntry; TRUSTED_CONNECTION=Yes; ,0"
    // ...but the full connection string looks like this;
    // "DFConnectionId OrderEntry, SERVER=.\SQLEXPRESS; DATABASE=OrderEntry; TRUSTED_CONNECTION=Yes; ,0"
//    Function SQLIniFileAddConnection String sFullConnectionString Returns Boolean
//        String sSection
//        Integer iCount
//
//        Move False to Err
//        Get psIniSectionName to sSection
//        Get SQLIniFileNumberOfConnections to iCount
//        Increment iCount
//        Set IniFileValue sSection (CS_SQLIniSectionName + String(iCount)) to sFullConnectionString
//
//        Function_Return (Err = False)
//    End_Function

    Function SQLIniFileDeleteAllConnections Returns Boolean
        Integer iCount
        Boolean bExists
        String sSection

        Move False to Err
        Move 1 to iCount
        Get psIniSectionName to sSection
        Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists
        While (bExists = True)
            Send DeleteSection (CS_SQLIniSectionName + String(iCount))
            Increment iCount
            Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists
        Loop
        Function_Return (Err = False)
    End_Function

    Function SQLIniFileDeleteConnection Integer iItem Returns Boolean
        Integer iCount
        String sSection
        Boolean bExists

        Move False to Err
        Move 1 to iCount
        Get psIniSectionName to sSection
        Get KeyExists sSection CS_SQLIniConnectionIdKeyword to bExists
        While (bExists = True)
            If (iCount = iItem) Begin
                Send DeleteSection sSection
//                Set IniFileValue sSection (CS_SQLIniSectionName + String(iCount)) to ""
                Move 9999 to iCount // Just some ridiculously high number to get out of the loop as we're done.
            End
            Increment iCount
            Get KeyExists sSection (CS_SQLIniSectionName + String(iCount)) to bExists
        Loop

        Function_Return (Err = False)
    End_Function

    // Returns all connection details for the passed Connection ID as a tSQLConnection
    // If it fails the returned struct member SQLConnection.bError = True.
    Function SQLIniFileConnectionID String sConnectionID Returns tSQLConnection
        tSQLConnection[] SQLConnectionsArray
        tSQLConnection   SQLConnection
        Integer iIndex

        Get SQLIniFileConnectionIDIndex sConnectionID to iIndex
        If (iIndex = -1) Begin
            Move True to SQLConnection.bError
            Function_Return SQLConnection
        End

        Get SQLIniFileReadConnections to SQLConnectionsArray
        Move SQLConnectionsArray[iIndex -1] to SQLConnection

        Function_Return SQLConnection
    End_Function

    // Returns -1 if the passed connection ID was not found, else the item number.
    Function SQLIniFileConnectionIDIndex String sConnectionID Returns Integer
        tSQLConnection[] SQLConnectionsArray
        Integer iRetval iCount iSize
        String sValue
        Boolean bExists

        Move -1 to iRetval

        Get SQLIniFileReadConnections to SQLConnectionsArray
        Move (SizeOfArray(SQLConnectionsArray)) to iSize
        Decrement iSize
        For iCount from 0 to iSize
            Move SQLConnectionsArray[iCount].sConnectionID to sValue
            Move (Uppercase(sValue) = Uppercase(sConnectionID)) to bExists
            If (bExists) Begin
                Move (iCount + 1) to iRetval // The [ConnectionX] keys are one-based (starts at 1) but the loop starts at zero.
                Move iSize to iCount         // We're done!
            End
        Loop

        Function_Return iRetval
    End_Function

    // Checks if the passed sConnectionID exists more than once in the passed struct array.
    // Used to check that ConnectionID's are unique.
    Function IsConnectionIDDuplicate String sConnectionID Returns Boolean
        Integer iCount iSize iItems
        String sValue
        Boolean bExists
        tSQLConnection[] SQLConnectionsArray

        Move 0 to iItems
        Get SQLIniFileReadConnections to SQLConnectionsArray
        Move (SizeOfArray(SQLConnectionsArray)) to iSize
        Decrement iSize
        For iCount from 0 to iSize
            Move SQLConnectionsArray[iCount].sConnectionID to sValue
            Move (sValue = sConnectionID) to bExists
            If (bExists) Begin
                Increment iItems
            End
        Loop

        Function_Return (iItems > 1)
    End_Function

    // To update the SQLConnections.ini file with a new default Connection ID.
    Function SQLIniFileSetDefaultConnection String sConnectionID Returns Boolean
        Boolean bOK
        Integer iSize iCount
        tSQLConnection[] SQLConnectionsArray
        tSQLConnection SQLConnection
        String sConnectionString

        Move False to Err
        Get psConnectionString to sConnectionString

        Get SQLIniFileReadConnections to SQLConnectionsArray
        Move (SizeOfArray(SQLConnectionsArray)) to iSize
        Decrement iSize
        // Set all current connection to inactive.
        For iCount from 0 to iSize
            Move False to SQLConnectionsArray[iCount].bEnabled
        Loop

        Get SQLIniFileConnectionID sConnectionID to SQLConnection
        Move True              to SQLConnection.bEnabled
        Move sConnectionString to SQLConnection.sConnectionString
        Move (InsertInArray(SQLConnectionsArray, 0, SQLConnection)) to SQLConnectionsArray
        Get SQLIniFileWriteConnections SQLConnectionsArray to bOK

        Function_Return (bOK = True)
    End_Function

    // Used for updating an existing connection with new data.
    // Returns True if successful.
    Function SQLIniFileUpdateConnection tSQLConnection SQLConnection Returns Boolean
        Boolean bOK
        Integer iItem iSize iCount
        tSQLConnection[] SQLConnectionsArray

        Move False to Err
        Move -1 to iItem
        Get SQLIniFileReadConnections to SQLConnectionsArray
        Move (SizeOfArray(SQLConnectionsArray)) to iSize
        Decrement iSize
        // Set all current connection to inactive.
        For iCount from 0 to iSize
            Move False to SQLConnectionsArray[iCount].bEnabled
            If (SQLConnectionsArray[iCount].sConnectionID = SQLConnection.sConnectionID) Begin
                Move iCount to iItem
            End
        Loop

        If (iItem <> -1) Begin
            Move True to SQLConnection.bEnabled
            Move SQLConnection to SQLConnectionsArray[iItem]
            Get SQLIniFileWriteConnections SQLConnectionsArray to bOK
        End

        Function_Return (bOK = True)
    End_Function

    Function SQLIniFileReadConnections Returns tSQLConnection[]
        tSQLConnection[] SQLConnectionsArray
        String sSection sValue
        Integer iCount
        Boolean bExists bEnabled

        Get psIniSectionName to sSection
        Get SectionExists sSection to bExists
        If (bExists = False) Begin
            Function_Return SQLConnectionsArray
        End
        Get SectionExists CS_SQLIniConnectionSection to bExists
        If (bExists = True) Begin
            Error DFERR_PROGRAM "Sorry, the format for the SQLConnections.ini file has been changed and this file has the old format that is no longer valid and thus cannot be read. You need to re-enter your connection(s)."
        End

        Move 1 to iCount // The section name "[ConnectionXX]" starts with "1"
        Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists

        While (bExists = True)
            // We always put the enabled/active connection at the top
            Move (iCount = 1) to bEnabled
            Move bEnabled to SQLConnectionsArray[iCount].bEnabled

            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniConnectionIdKeyword ""        to SQLConnectionsArray[iCount].sConnectionID
            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDriverKeyword       ""        to SQLConnectionsArray[iCount].sDriverID

            // The iDbType might be missing from the ini-file. This is e.g. the case when a DAW Managed Connection "DFConnId.ini" file is read.
            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDbTypeKeyword       "99"      to sValue
            If (sValue = "99") Begin
                Get SqlUtilDbTypeFromDriver SQLConnectionsArray[iCount].sDriverID to sValue
            End
            Move sValue                                                                                     to SQLConnectionsArray[iCount].iDbType

            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniConnectionKeyWord   ""        to SQLConnectionsArray[iCount].sConnectionString
            Get ParseKeyWord SQLConnectionsArray[iCount].sConnectionString (CS_SQLIniServerKeyword + "=")   to SQLConnectionsArray[iCount].sServer
            If (SQLConnectionsArray[iCount].sServer = "") Begin
                Get ParseKeyWord SQLConnectionsArray[iCount].sConnectionString (CS_SQLIniDSNKeyword +"=")   to SQLConnectionsArray[iCount].sServer
            End
            Get ParseKeyWord SQLConnectionsArray[iCount].sConnectionString (CS_SQLIniDatabaseKeyword + "=") to SQLConnectionsArray[iCount].sDatabase

            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniTrustedKeyword      ""        to sValue
            Move (If(Uppercase(sValue) = "YES", True, False))                                               to SQLConnectionsArray[iCount].bTrusted

            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniUIDKeyword          ""        to SQLConnectionsArray[iCount].sUserID
            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDFPWDKeyword        ""        to sValue
            If (pbDFConnId(Self) = False and sValue <> "") Begin
                Get DecryptPassword sValue to sValue
            End
            Move sValue                                                                                     to SQLConnectionsArray[iCount].sPassword

            // Here we reconstruct the connection string to be complete with all params;
            Get ConstructConnectionString SQLConnectionsArray[iCount].sDriverID SQLConnectionsArray[iCount].sServer SQLConnectionsArray[iCount].sDatabase ;
                                          SQLConnectionsArray[iCount].bTrusted SQLConnectionsArray[iCount].sUserID SQLConnectionsArray[iCount].sPassword ;
                                          to SQLConnectionsArray[iCount].sConnectionString

            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniSchemaKeyword          ""     to SQLConnectionsArray[iCount].sSchema
            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniBaseTableSpaceKeyword  ""     to SQLConnectionsArray[iCount].sBaseTableSpace
            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniLongTableSpaceKeyword  ""     to SQLConnectionsArray[iCount].sLongTableSpace
            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniIndexTableSpaceKeyword ""     to SQLConnectionsArray[iCount].sIndexTableSpace
            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniSilentLoginKeyword     ""     to SQLConnectionsArray[iCount].bSilentLogin
//            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDisabledKeyword        ""     to SQLConnectionsArray[iCount].bDisabled

            Increment iCount
            Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists
        Loop

        // Lastly, we remove the very first array item as it is empty (we started at 1 because that is the first [Connection#])
        If (SizeOfArray(SQLConnectionsArray) > 0) Begin
            Move (RemoveFromArray(SQLConnectionsArray, 0)) to SQLConnectionsArray
        End

        Function_Return SQLConnectionsArray
    End_Function

    Function SQLIniFileWriteConnections tSQLConnection[] SQLConnectionsArray Returns Boolean
        Integer iCount iSize
        Boolean bOK
        String sConnectionString sSection sValue

        // First we need to _remove_ all current connections in the ini-file, we
        // do that by setting their values to "".
        Move 0 to iCount
        Get SQLIniFileDeleteAllConnections to bOK
        If (bOK = False) Begin
            Function_Return False
        End

        Move False to Err
        Get psIniSectionName to sSection
        // Sorting will make sure we have the active connection record as the first connection item in the ini-file.
        Move (SortArray(SQLConnectionsArray, Self, (RefFunc(SortActiveFirst)))) to SQLConnectionsArray
        Move (SizeOfArray(SQLConnectionsArray)) to iSize
        Decrement iSize

        For iCount from 0 to iSize
            // DF 19 compatible settings:
            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniConnectionIdKeyword   to SQLConnectionsArray[iCount].sConnectionID
            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniDriverKeyword         to SQLConnectionsArray[iCount].sDriverID
            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniUIDKeyword            to SQLConnectionsArray[iCount].sUserID

            Move SQLConnectionsArray[iCount].sPassword to sValue
            If (pbDFConnId(Self) = False and sValue <> "") Begin
                Get EncryptPassword sValue to sValue
            End
            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniDFPWDKeyword          to sValue

            If (SQLConnectionsArray[iCount].bTrusted = True) Begin
                Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniTrustedKeyword    to CS_SQLIniConnectionYes
            End

            Get ConstructShortConnectionString SQLConnectionsArray[iCount].sDriverID SQLConnectionsArray[iCount].sServer SQLConnectionsArray[iCount].sDatabase ;
                                            to SQLConnectionsArray[iCount].sConnectionString
            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniConnectionKeyWord     to SQLConnectionsArray[iCount].sConnectionString

            // The Database Update Framework extended settings:
            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniDbTypeKeyword          to SQLConnectionsArray[iCount].iDbType
            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniSchemaKeyword          to SQLConnectionsArray[iCount].sSchema
            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniBaseTableSpaceKeyword  to SQLConnectionsArray[iCount].sBaseTableSpace
            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniLongTableSpaceKeyword  to SQLConnectionsArray[iCount].sLongTableSpace
            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniIndexTableSpaceKeyword to SQLConnectionsArray[iCount].sIndexTableSpace
            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniSilentLoginKeyword     to SQLConnectionsArray[iCount].bSilentLogin
        Loop

        Function_Return (bOK and Err = False)
    End_Function

    // *** DbType conversion routines - Converts between string/integer and driver ID values ***
    //
    // SQL utility function that returns a database type (string) constant
    // corresponding to the passed iDbType.
    Function SqlUtilDbTypeToString Integer iDbType Returns String
        String sRetval
        If (iDbType = EN_dbTypeMSSQL) Begin
            Move CS_dbTypeMSSQL to sRetval
        End
        If (iDbType = EN_dbTypeMySQL) Begin
            Move CS_dbTypeMySQL to sRetval
        End
        If (iDbType = EN_dbTypeOracle) Begin
            Move CS_dbTypeOracle to sRetval
        End
        If (iDbType = EN_dbTypeDB2) Begin
            Move CS_dbTypeDB2 to sRetval
        End
        If (iDbType = EN_dbTypePostgre) Begin
            Move CS_dbTypePostgre to sRetval
        End
        Function_Return sRetval
    End_Function

    // SQL utility function that returns a database type constant (integer)
    // corresponding to the passed sDbType string constant.
    Function SqlUtilDbTypeToInteger String sDbType  Returns Integer
        Integer iRetval
        If (sDbType = CS_dbTypeMSSQL) Begin
            Move EN_dbTypeMSSQL to iRetval
        End
        If (sDbType = CS_dbTypeMySQL) Begin
            Move EN_dbTypeMySQL to iRetval
        End
        If (sDbType = CS_dbTypeOracle) Begin
            Move EN_dbTypeOracle to iRetval
        End
        If (sDbType = CS_dbTypeDB2) Begin
            Move EN_dbTypeDB2 to iRetval
        End
        If (sDbType = CS_dbTypePostgre) Begin
            Move EN_dbTypePostgre to iRetval
        End
        Function_Return iRetval
    End_Function

    // Pass an integer DbType and function returns the database type integer as a string value.
    // Used e.g. when reading a connection ini-file to display the database type in
    // the SQL Connection program's grid.
    Function SqlUtilDbTypeIntegerToStringConstant Integer iDbType Returns String
        String sRetval
        If (iDbType = EN_dbTypeMSSQL) Begin
            Move "EN_dbTypeMSSQL" to sRetval
        End
        If (iDbType = EN_dbTypeMySQL) Begin
            Move "EN_dbTypeMySQL" to sRetval
        End
        If (iDbType = EN_dbTypeOracle) Begin
            Move "EN_dbTypeOracle" to sRetval
        End
        If (iDbType = EN_dbTypeDB2) Begin
            Move "EN_dbTypeDB2" to sRetval
        End
        If (iDbType = EN_dbTypePostgre) Begin
            Move "EN_dbTypePostgre" to sRetval
        End
        Function_Return sRetval
    End_Function

    // Pass a driver id and the function will return
    // a dbType as an integer. Obviously for the ODBC_DRV this doesn't
    // quite work and always returns "MS SQL Server"
    Function SqlUtilDbTypeFromDriver String sDriverID Returns Integer
        Integer iRetval
        If (sDriverID = MSSQLDRV_ID) Begin
            Move EN_dbTypeMSSQL to iRetval
        End
        If (sDriverID = SQLFLEX) Begin
            Move EN_dbTypeMSSQL to iRetval
        End
        If (sDriverID = ODBC_DRV_ID) Begin
            Move EN_dbTypeMSSQL to iRetval
        End
        If (sDriverID = MDSMySQL) Begin
            Move EN_dbTypeMySQL to iRetval
        End
        If (sDriverID = ORAFLEX) Begin
            Move EN_dbTypeOracle to iRetval
        End
        If (sDriverID = DB2_DRV_ID) Begin
            Move EN_dbTypeDB2 to iRetval
        End
        If (sDriverID = MDSPgSQL) Begin
            Move EN_dbTypePostgre to iRetval
        End
        Function_Return iRetval
    End_Function

    #Include ParseKeyWord.pkg

    Function ConstructConnectionString String sDriverID String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
        String sConnect
        Handle hoDriver

        Get Create (RefClass(cDbUpdateDatabaseDriver)) to hoDriver
        Set psDriverID of hoDriver to sDriverID
        Get ConstructConnectionString of hoDriver sServer sDatabase bTrusted sUserID sPassword to sConnect
        Send Destroy   of hoDriver

//        Case Begin
//            Case (sDriverID = MSSQLDRV_ID)
//                Move (sConnect * CS_SQLIniServerKeyword + "=" + sServer) to sConnect
//                If (sDatabase <> "") Begin
//                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
//                End
//                If (bTrusted = True) Begin
//                    Move (sConnect * ";" + CS_SQLIniTrustedKeyword + "=Yes") to sConnect
//                End
//                Else Begin
//                    Move (sConnect * ";" + CS_SQLIniUIDKeyword + "=" + sUserID * ";" + CS_SQLIniPWDKeyword + "=" + sPassword) to sConnect
//                End
//                Case Break
//
//            Case (sDriverID = ODBC_DRV_ID)
//                Move (sConnect * CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
//                If (sDatabase <> "") Begin
//                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
//                End
//                If (bTrusted = True) Begin
//                    Move (sConnect * ";" + CS_SQLIniTrustedKeyword + "=Yes") to sConnect
//                End
//                Else Begin
//                    Move (sConnect * ";" + CS_SQLIniUIDKeyword + "=" + sUserID * ";" + CS_SQLIniPWDKeyword + "=" + sPassword) to sConnect
//                End
//                Case Break
//
//            Case (sDriverID = DB2_DRV_ID)
//                Move (sConnect * CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
////                If (sDatabase <> "") Begin
////                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
////                End
////                If (bTrusted = True) Begin
////                    Move (sConnect * ";" + CS_SQLIniTrustedKeyword + "=Yes") to sConnect
////                End
////                Else Begin
//                Move (sConnect * ";" + CS_SQLIniUIDKeyword + "=" + sUserID * ";" + CS_SQLIniPWDKeyword + "=" + sPassword) to sConnect
////                End
//                Case Break
//
//            Case (sDriverID = SQLFLEX)
//                Move (sConnect * CS_SQLIniServerKeyword + "=" + sServer) to sConnect
//                If (sDatabase <> "") Begin
//                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
//                End
//                If (bTrusted = True) Begin
//                    Move (sConnect * ";" + CS_SQLIniTrustedKeyword + "=Yes") to sConnect
//                End
//                Else Begin
//                    Move (sConnect * ";" + CS_SQLIniUIDKeyword + "=" + sUserID * ";" + CS_SQLIniPWDKeyword + "=" + sPassword) to sConnect
//                End
//                Case Break
//
//            Case (sDriverID = ORAFLEX)
//                If (sDatabase <> "" and (not(sServer contains "/"))) Begin
//                    Move (sServer + "/" + sDatabase)                  to sServer
//                End
//                Move (sConnect * CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
//                Move (sConnect * ";" + CS_SQLIniUIDKeyword + "=" + sUserID * ";" + CS_SQLIniPWDKeyword + "=" + sPassword) to sConnect
//                Case Break
//
//            Case (sDriverID = MDSPgSQL)
//                Move (sConnect * CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
//                If (sDatabase <> "") Begin
//                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
//                End
//                Move (sConnect * ";" + CS_SQLIniUIDKeyword + "=" + sUserID * ";" + CS_SQLIniPWDKeyword + "=" + sPassword) to sConnect
//                Case Break
//
//            Case (sDriverID = MDSMySQL)
//                Move (sConnect * CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
//                If (sDatabase <> "") Begin
//                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
//                End
//                Move (sConnect * ";" + CS_SQLIniUIDKeyword + "=" + sUserID * ";" + CS_SQLIniPWDKeyword + "=" + sPassword) to sConnect
//                Case Break
//
//            Case (sDriverID = DATAFLEX_ID)    // Dummy stub.
//                Break
//
//            Case Else
//                Move "" to sConnect
//        Case End

        Function_Return sConnect
    End_Function

    // Short connection string used when writing to ini-file. This is to be compatible with DF19 DFConnId.ini files that uses this short format.
    Function ConstructShortConnectionString String sDriverID String sServer String sDatabase Returns String
        String sConnect

        Case Begin
            Case (sDriverID = MSSQLDRV_ID or sDriverID = SQLFLEX)
                Move (sConnect * CS_SQLIniServerKeyword + "=" + sServer) to sConnect
                If (sDatabase <> "") Begin
                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
                End
                Case Break

            Case (sDriverID = ODBC_DRV_ID)
                Move (sConnect * CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
                If (sDatabase <> "") Begin
                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
                End
                Case Break

            Case (sDriverID = DB2_DRV_ID)
                Move (sConnect * CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
                If (sDatabase <> "") Begin
                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
                End
                Case Break

            Case (sDriverID = ORAFLEX)
                Move (sConnect * CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
                If (sDatabase <> "") Begin
                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
                End
                Case Break

            Case (sDriverID = MDSPgSQL)
                Move (sConnect * CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
                If (sDatabase <> "") Begin
                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
                End
                Case Break

            Case (sDriverID = MDSMySQL)
                Move (sConnect * CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
                If (sDatabase <> "") Begin
                    Move (sConnect * ";" +CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
                End
                Case Break

            Case (sDriverID = DATAFLEX_ID)    // Dummy stub.
                Break

            Case Else
                Move "" to sConnect
        Case End

        Function_Return sConnect
    End_Function

    // Use Base64
    Function EncryptPassword String sPassword Returns String
        String sRetval
//        Handle hoCryptographer
//
//        Get psHashString to sHashString
//        Get Create (RefClass(cCryptographer)) to hoCryptographer
//        Set psProvider of hoCryptographer to MS_ENHANCED_PROV
//        Get Encrypt of hoCryptographer sHashString sPassword to sRetval
//
//        Send Destroy of hoCryptographer
          Get EncodeString of oBase64Functions sPassword to sRetval
        Function_Return sRetval
    End_Function

    Function DecryptPassword String sPassword Returns String
        String sRetval
//        Handle hoCryptographer
//
//        Get psHashString to sHashString
//        Get Create (RefClass(cCryptographer)) to hoCryptographer
//        Set psProvider of hoCryptographer to MS_ENHANCED_PROV
//        Get Decrypt of hoCryptographer sHashString sPassword to sRetval
//
//        Send Destroy of hoCryptographer
          Get DecodeString of oBase64Functions sPassword to sRetval

        Function_Return sRetval
    End_Function

    // Returns the full path of the Application (no trailing "\")
    Function ApplicationPath Returns String
        String sApplicationFileName sPath
        Integer iNumChars iRetval

        Move (Repeat(Character(0), 1024))    to sApplicationFileName
        Move (GetModuleFileName(0, AddressOf(sApplicationFileName), 1024)) to iNumChars
        Move (CString(sApplicationFileName)) to sApplicationFileName
        Move (PathRemoveFileSpec(AddressOf(sApplicationFileName))) to iRetval
        Move (CString(sApplicationFileName)) to sPath

        Function_Return sPath
    End_Function

End_Class
